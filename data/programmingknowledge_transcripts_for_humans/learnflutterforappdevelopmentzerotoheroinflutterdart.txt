With timestamps:

00:00 - welcome to programming knowledge so in
00:03 - this tutorial series we will learn about
00:05 - flutter so flutter is basically an
00:09 - open source ui development kit created
00:12 - by google
00:13 - it is used to develop applications for
00:16 - androids
00:16 - ios windows etc
00:20 - so to get started open your browser and
00:23 - then open
00:24 - flutter.dav then click on get started
00:29 - and then over here the installation
00:32 - process
00:32 - is pretty much same i'll show the
00:35 - installation process for mac os
00:37 - and the windows users can ignore the
00:40 - xcode part
00:41 - okay so i'll go to mac os
00:45 - and over here there is an option to
00:48 - download
00:48 - flutter underscore mac os underscore v
00:52 - 1.12.13 dot zip file
00:55 - so first of all we need to download the
00:58 - zip file
00:59 - okay now once downloaded we can
01:03 - unzip it wherever we want so i have
01:06 - unzipped it in my documents section
01:09 - under a folder called development tools
01:12 - over here i have unzipped the
01:14 - flutter sdk and i can see all my data's
01:17 - are
01:18 - over here okay so now
01:21 - for the development purpose one thing
01:23 - that is very important for both
01:26 - windows and mac users is android studio
01:30 - so first of all go and download android
01:32 - studio the
01:34 - process to download android studio is
01:36 - also mentioned over here
01:38 - in the android setup section so while
01:41 - the android studio is downloading let's
01:44 - discuss
01:44 - a little bit about flutter so flutter is
01:48 - one of the emerging development software
01:50 - because if we want to
01:52 - develop an application for both android
01:55 - and ios we had to keep two different
01:58 - code bases
01:59 - and double the work in maintaining the
02:02 - app and bug fixes
02:04 - but with flutter a single code base runs
02:07 - on both the platform however to develop
02:10 - for ios you will need a mac os system
02:15 - so once android studio has been
02:17 - installed we will try
02:18 - installing xcode so for that i'll go in
02:21 - the xcode section
02:24 - that is ios setup and over there i'll
02:27 - just open my terminal
02:28 - and copy and paste both the lines one by
02:32 - one
02:33 - once done we need to export our
02:36 - path to the system so for that i'll
02:41 - copy this from here the
02:44 - export line will be different for
02:47 - mac os and windows so the windows users
02:51 - can
02:52 - check accordingly so i'll open my
02:55 - terminal
02:56 - and paste the command
03:01 - and over here i'll change this to
03:06 - users my username
03:12 - then the documents section
03:16 - and over there i have a folder called
03:20 - development
03:23 - tools and inside that i have flutter
03:28 - and bin so i'll hit enter
03:33 - now i'll create a folder called flutter
03:36 - projects and
03:36 - all the projects that we do in flutter
03:39 - i'll store it over there
03:40 - so i'll i already have one
03:44 - i'll just navigate to it
03:56 - now over here i'll write flutter
04:01 - doctor so then the doctor will start
04:04 - running and it will
04:05 - tell that if the everything is installed
04:08 - properly or not
04:11 - if you are running for the first time it
04:12 - might take a few moments
04:15 - so over here you can see we have android
04:18 - tool chain
04:20 - some android licenses are not expected
04:22 - not accepted
04:24 - and we have no connected device we can
04:26 - ignore this
04:27 - x code error over here okay so
04:31 - the system is fine we can start working
04:34 - with flutter
04:35 - so to create a project we write a
04:39 - flutter
04:41 - create and then the project name
04:44 - keep in mind that a flutter project
04:46 - cannot have dashes
04:48 - and capital letters it can only have
04:50 - underscore
04:51 - and small letters then i'll hit enter
04:54 - and it will start creating my
04:56 - project
05:00 - so once done open android studio
05:04 - and then go to open an existing android
05:08 - studio project
05:09 - and then i'll simply navigate to flutter
05:12 - projects
05:13 - and the demo app that i have just now
05:15 - created and then i'll
05:17 - hit open
05:20 - so if you first open a flutter project
05:23 - it will
05:24 - ask you to download some extensions so
05:27 - click on download and once
05:31 - done we need to set up an emulator
05:34 - so for setting up an emulator we go to
05:38 - tools
05:39 - and then avd manager
05:42 - and over here i have already created a
05:45 - virtual device called
05:47 - flutter device and
05:50 - if you are new you can go to the create
05:53 - virtual devices and then select any of
05:57 - the
05:57 - preferred sizes you want click on next
06:01 - and then the android version you want to
06:04 - use
06:05 - then click on next and give the device a
06:08 - name
06:09 - okay so once done it will it should
06:12 - appear something like this
06:14 - and then click on this green arrow
06:16 - button
06:17 - so if you click on the green arrow
06:19 - button you can see that the
06:23 - virtual device has started
06:31 - so once the emulator has been set up
06:33 - correctly you can run your application
06:36 - by clicking on the run button over here
06:38 - it is not showing in my case because i
06:41 - don't have the
06:42 - sdks installed so the another method to
06:46 - run a flutter project is go to the
06:48 - terminal and then navigate to the
06:50 - project folder
06:52 - in this case it is demo and then write
06:56 - flutter run but before writing flutter
07:00 - run we can write flutter
07:02 - doctor to check if the android device is
07:04 - connected
07:05 - properly so now you can see we have
07:08 - connected devices
07:10 - one available so now we will try running
07:12 - our app pilot flutter
07:14 - run so once done
07:17 - don't quit the process and go to the
07:20 - emulator
07:21 - so you can see this is a pre fabricated
07:25 - screen
07:26 - that comes with flutter and whenever i
07:28 - click the plus button
07:30 - over here the counter gets increased by
07:33 - one
07:34 - okay and now for mac users
07:39 - you can also open the simulator
07:42 - and run the flutter code so now if we
07:45 - already have a project running and we
07:47 - want to quit it
07:49 - we just need to press q
07:54 - and then it will say application
07:56 - finished
07:57 - now to open a simulator we write open
08:01 - space dash a space simulator
08:04 - dot app and this will start a simulator
08:07 - on our screen and then again if we write
08:10 - flutter run
08:11 - then we can see the same application in
08:14 - our
08:14 - iphone now before moving forward
08:18 - i would like to tell you that the
08:20 - programming language used by flutter is
08:23 - dot so that is a programming language
08:27 - that is developed
08:28 - by google and it is a cl and it is
08:30 - client
08:31 - optimized okay so you can read more
08:35 - about
08:35 - dart by simply coming to dart dot dev
08:39 - over here you see the documentations you
08:41 - can read about it
08:43 - and in the website we also have a
08:48 - environment to test our dart code
08:51 - okay so this was for the
08:54 - video see you in the next tutorial thank
08:57 - you
08:58 - welcome to programming knowledge so in
09:00 - this tutorial we will start with the
09:02 - basics of dart
09:03 - dart is the official programming
09:06 - language that the flutter framework uses
09:08 - i will be using dot pad to write all my
09:11 - darts code
09:16 - so every dot program's basic requirement
09:19 - is a main method
09:21 - main method is the entry point of every
09:23 - dot program we can write the main method
09:26 - like this
09:27 - main followed by a parenthesis set of
09:29 - parentheses then curly braces
09:32 - and over here we write our code
09:35 - we can also add a void over here if
09:38 - needed
09:39 - void basically specifies that a method
09:42 - or
09:42 - function will not return anything we
09:45 - will study about functions
09:47 - in details later in this tutorial
09:50 - so after main method we
09:54 - let us discuss about print so to print
09:56 - anything on the console we use the
09:59 - keyword
09:59 - print and then the parentheses then
10:02 - single quotes and then we can write the
10:06 - sentence that we want to be printed on
10:09 - the console so for
10:10 - this case i am writing
10:14 - programming knowledge
10:18 - and then followed by a semicolon now if
10:21 - i
10:21 - run this program in my console i would
10:24 - be able to see programming knowledge
10:28 - so you can see programming knowledge is
10:30 - visible in my
10:32 - console now if i change the text over
10:35 - here the
10:36 - output in the console will also change
10:41 - suppose i write my own name and then
10:44 - click on run
10:46 - so now the console is showing my name
10:51 - like python we can also use double
10:53 - quotes and triple quotes to print
10:55 - blocks of statements after print
10:58 - let's discuss about data types so there
11:01 - are five to six primitive data types
11:04 - namely int for storing integer values
11:08 - float and double for storing decimal
11:10 - values
11:11 - care for storing character string for
11:14 - storing group of characters and bool for
11:18 - storing boolean values
11:19 - that is true and false now in dart
11:23 - there are four types of variable
11:25 - declaration
11:26 - the first type is static declaration
11:29 - in static declaration we write the data
11:33 - type
11:35 - for followed by the variable name let's
11:38 - call it v
11:39 - and then a semicolon
11:42 - we can store values to this variables by
11:45 - writing v
11:47 - is equal to and inside quotes rishabh
11:52 - over here we have written string that
11:54 - means the variable v can only store
11:57 - string values now let's try printing it
12:00 - so to print i'll write print
12:02 - v followed by a semicolon and now let's
12:04 - try running it
12:07 - so it is showing rishabh we can merge
12:10 - these two statements together so to
12:13 - merge
12:14 - we will write
12:18 - now again if i try running the program
12:21 - we will get the same output
12:23 - but over here it has changed from
12:25 - variable declaration to variable
12:28 - definition
12:29 - the basic difference between variable
12:31 - declaration and variable definition
12:34 - is that in variable declaration we tell
12:36 - the compiler
12:37 - that the program will have a variable v
12:40 - of string type but in variable
12:43 - definition
12:44 - we tell the compiler that the program
12:46 - will have a variable v
12:47 - of string type and rishabh
12:50 - will be stored in it
12:55 - after static declaration we have dynamic
12:58 - declaration
12:59 - over here dynamic refers to the data
13:01 - types
13:02 - that is a variable can store values of
13:05 - different data
13:06 - types we declare a dynamic variable by
13:09 - writing
13:10 - var v and then the values
13:13 - so in the first variable i am storing a
13:15 - string
13:17 - in the second variable i am storing an
13:20 - integer
13:21 - and in the third variable
13:24 - i am storing a decimal
13:27 - okay now i will try printing them so
13:30 - i'll write print
13:34 - v then print to v1
13:39 - then print v2
13:44 - now if i click on run i'll get i am
13:48 - getting the output as
13:49 - rishabh 10 69.69
13:53 - over here var automatically changes to
13:56 - type of data stored in it
13:58 - and memory to the variables are
14:00 - allocated during the compile time
14:03 - and to check if i select v over here in
14:06 - the documentation
14:07 - i get string if i select v1
14:11 - i get integer and if i select v2
14:14 - i get double okay
14:17 - so after the static declaration and
14:20 - dynamic declaration the third type of
14:23 - declaration is
14:24 - constant declaration as the name
14:27 - suggests
14:28 - variable declared constants cannot be
14:31 - changed
14:33 - so to so to declare a constant value
14:37 - we write c o n s t const
14:40 - c is equal to 10
14:44 - now we can print the constant values
14:49 - if i click on run it will give me 10 as
14:52 - the output
14:53 - and now if i try changing the values
14:56 - if i write c is equal to c plus 1
15:00 - and then if i print it
15:06 - it is giving me an error error this is
15:10 - compilation failed that is because i
15:12 - have tried
15:13 - to change the value of a constant
15:15 - variable
15:16 - over here okay so
15:20 - after this the last type of declaration
15:23 - is
15:23 - again dynamic declaration over here
15:26 - dynamic refers to
15:28 - a location of memory during runtime
15:31 - for example suppose we want to show the
15:34 - exact
15:35 - time when the program is executed then
15:38 - if we use where or string to store time
15:41 - then the value will be the time at which
15:44 - the program was compiled
15:46 - and not the time when the program was
15:49 - executed
15:50 - so in such cases we use dynamic
15:53 - variables
15:54 - so to you create a dynamic variable we
15:56 - write
15:58 - dynamic and then the variable v
16:01 - and then we can add the value as and
16:04 - when
16:06 - required
16:08 - okay so this was about variables
16:11 - i hope everything was clear thank you
16:16 - welcome to programming knowledge so
16:19 - today we will learn about
16:20 - type conversion so first
16:25 - let us try about converting string to
16:28 - integer but before that i would like to
16:30 - tell you
16:31 - one thing that for writing comments we
16:34 - can use
16:35 - double slashes and write an
16:39 - inline comment and we can also use
16:43 - slash followed by a star and then
16:47 - again star followed by space
16:50 - and then over here we can write blocks
16:52 - of code
16:57 - and then the final one is three slashes
17:00 - and over here we can write the
17:03 - documentation
17:05 - okay so back in the program let's try
17:08 - converting
17:10 - string to integer
17:14 - so to convert string to integer we write
17:18 - we create a variable where one and then
17:21 - i will write
17:22 - int dot parse and inside this will be my
17:26 - string value
17:27 - so suppose i enter one
17:32 - now to check if one has an
17:35 - integer value so we will write assert
17:40 - one equals
17:43 - digit one assert is a built-in function
17:48 - to verify
17:50 - that the thing is as required or not
17:53 - okay so now let's try adding some value
17:56 - to 1
17:56 - if it is an integer it will add without
18:00 - any problems
18:15 - over here i have written the wrong
18:17 - spelling it will be assert
18:20 - now if i try to run the program
18:24 - you can see 11 is the output so over
18:28 - here you can see we have good when
18:29 - one as a string input then it has been
18:32 - converted to
18:33 - integer and then i have added 10 to it
18:36 - and then printed
18:37 - so 10 plus 1 is 11. now we will try to
18:42 - convert
18:42 - integer to string
18:50 - integer to string so for that i'll
18:52 - create a variable to store
18:56 - i will write 1
18:59 - is equal to 1 which is an integer dot
19:02 - 2 string
19:05 - okay now if i add some values it should
19:08 - be concatenated
19:10 - to the end of the variable so i will
19:12 - write 1
19:15 - plus plus equal to
19:20 - reshaft and now if i try printing it
19:25 - [Music]
19:35 - the output is one risk of
19:38 - that means this integer one is converted
19:41 - to string
19:42 - and then ratio is added at the end of
19:45 - the string one
19:47 - so this is how we convert an integer to
19:50 - string now to convert our decimal to
19:54 - string
19:57 - we have two methods
20:03 - first is the one similar to which we
20:06 - have seen just now where
20:08 - 1 is equal to 3.1234
20:13 - that is the decimal or double value
20:17 - dot 2 string
20:20 - and the other method is where
20:24 - 1d is equal to
20:29 - 3.1234
20:31 - dot 2 string
20:36 - as fixed
20:39 - two so this basically means that
20:43 - the string will have only two decimal
20:45 - places
20:46 - so let's check that and you know to
20:48 - check that we use
20:50 - a cert keyword and then we will write
20:54 - 1d is equal to
20:58 - so as we have converted it to string we
21:01 - will keep it inside quotes
21:03 - 3.12 and now then we will try
21:07 - printing so we'll write one d
21:12 - now if i click on run the output should
21:14 - be 3.12
21:16 - so you can see the output is 3.12
21:20 - so this is how we convert an integer to
21:23 - string string to integer
21:25 - decimal to string and also how to trim
21:28 - the decimal places
21:32 - after type conversion let's discuss
21:34 - about operators
21:36 - so let's start with unary operators
21:39 - so first i'll create a variable a and
21:42 - store
21:43 - 10 in it now to
21:46 - add some value to a we can write a is
21:49 - equal to
21:50 - a plus 10 so what this will basically do
21:54 - is
21:55 - add a 10 to a and then again store it
21:57 - inside the variable
21:59 - a let's check it by printing it
22:08 - so the output is 20. similarly we can do
22:11 - for minus
22:15 - the output is zero and it will be same
22:18 - for
22:19 - multiplication as well as division
22:23 - so we can reduce the length of the code
22:26 - if we want so to reduce we will write a
22:28 - is equal to a plus equal to
22:33 - 10 so this will also do the same purpose
22:36 - that is to add 10 to a and then again
22:39 - store in it so if i run this
22:43 - the output should be 20 similarly for
22:46 - minus
22:46 - for multiplication and for division
22:52 - next type of operators is increment and
22:56 - decrement operator
22:58 - so if i write print
23:01 - a plus plus and then again
23:04 - print a
23:08 - the output will be 10
23:11 - and 11 that means first
23:14 - this statement got executed then the
23:18 - value of a was
23:19 - incremented by 1 and then is value
23:23 - became 11 and it got printed here
23:25 - but if i give the plus plus before a
23:29 - and then if i click on run the output
23:32 - will be 11 and 11
23:34 - that means before the execution of the
23:36 - statement a got incremented by
23:38 - 1 as you can see in the console
23:41 - similarly for
23:42 - mine decrementing we can use minus minus
23:46 - now if i click on run
23:49 - the output will be 10 and 9 that means
23:52 - first the statement got executed then
23:55 - the value was
23:56 - decremented and now similarly if i put
23:59 - minus minus before a
24:01 - and run it then the value will get
24:04 - decremented
24:04 - first and then the statement will be
24:08 - executed after unary operators
24:11 - we have relational operator so to
24:14 - learn about relational operator i'll
24:16 - create two more variables
24:19 - where b is equal to 5
24:23 - where c is equal to 15
24:26 - and one more variable where d
24:30 - is equal to 10 so to check equality
24:34 - between any two variables
24:35 - we write if
24:39 - a is equal to equal to d
24:43 - that means if a equals d then print
24:49 - true
24:55 - so the output is true and now if i
24:58 - change
24:59 - this d to b and then click on run
25:07 - now there is no output because we don't
25:09 - have an else condition so i'll write
25:12 - else
25:14 - print
25:18 - false now if i click on run the output
25:22 - should be
25:23 - false we will learn about if and else in
25:27 - details
25:28 - in the for future tutorials
25:34 - we will learn about files in details
25:37 - later in this course
25:40 - so after checking equality there is an
25:43 - operator that checks for
25:44 - greater than equal to case so i
25:48 - if i write if
25:53 - a is greater than equal to
25:57 - b then the output should be
26:01 - print true
26:08 - else print
26:13 - false now if i run this the output
26:16 - should be true
26:18 - that is because the b has 5 stone
26:21 - stored in it and a has 10 stored in it
26:24 - so as 10 is greater than 5
26:28 - this condition is true and now if i
26:30 - change to d
26:32 - then again the output will be true
26:36 - because a has 10 stored in it and d has
26:38 - 10 stored in it so
26:40 - a is equal to d so the condition is true
26:44 - and now if i change it to c the output
26:48 - will be false because 15 is neither
26:50 - greater than
26:51 - nor equal to 10 now
26:54 - after this we have less than equal to
27:00 - and if we run this the output will be
27:03 - true that means 10 is less than
27:06 - 50 which is true and now if i
27:10 - change it to c
27:13 - itself then also the output will be true
27:16 - that is because 15 is equal to 15
27:20 - now after this we also have only less
27:23 - than
27:24 - that means 15 we have to check if 15 is
27:27 - less than 15 so the output should be
27:30 - false as 15 is equal to 15
27:34 - but not less than 15 and now if i change
27:36 - it to
27:37 - d the output will be true as 10 is
27:41 - less than 15 and if now i change it to
27:45 - greater than then the output will again
27:46 - be
27:47 - false as 10 is not greater than
27:51 - 15 so this is how we use
27:54 - relational operators
27:58 - now another type of operators is logical
28:01 - operators
28:02 - so there are three types of logical
28:04 - operators the first one is logical
28:06 - and and its symbol is
28:11 - and and it checks and it returns
28:15 - true if both the conditions are true
28:18 - otherwise it will return
28:20 - false so let check if b
28:23 - is d is greater than b
28:26 - so if this is the condition let's see
28:29 - what is the
28:30 - output so the output is false
28:34 - as you can see d is less than c that
28:37 - means
28:38 - 10 is less than c that means this
28:40 - condition is false
28:42 - and this condition is true and as i told
28:45 - you
28:45 - and returns true only when both the
28:48 - conditions are true
28:49 - as one of the condition is false it
28:51 - returns false
28:52 - and the else statement gets executed and
28:55 - now if i change it to greater than that
28:57 - means
28:58 - now both the condition will be true and
29:00 - if i try to run it
29:02 - the output should be true and as you can
29:05 - see the output is
29:06 - true now the next type of logical
29:08 - operator is
29:09 - or operator and the sign is
29:12 - this now or operator returns true
29:16 - if any of the condition is true so
29:19 - suppose
29:20 - and if both the conditions is true it
29:22 - will always give
29:23 - true as the result so now if i run the
29:26 - output will be true
29:28 - and now if even if i make one of the
29:30 - condition false
29:32 - the output will still be true
29:35 - that means if one of the condition is
29:39 - also true the output is true
29:41 - and now if i make both the conditions
29:43 - false then the output will be
29:45 - false and then the final type of
29:49 - operator is not so
29:52 - over here if i write a is not equal to
29:57 - 10 then the output should be
30:00 - false but as you know the a is
30:03 - having 10 stored in it so the output is
30:06 - false because 10
30:08 - is equal to 10 and not not equal to 10
30:11 - i hope are you and you are understanding
30:14 - so this was about operators
30:16 - see you in the next tutorial thank you
30:20 - welcome to programming knowledge in this
30:23 - tutorial we will continue with
30:25 - operators so the next type of operators
30:29 - are called null aware operators
30:36 - so for explaining this i will create a
30:39 - class
30:41 - num and it will have a variable
30:45 - or you can also call data members num
30:48 - and it will have a value of
30:50 - 10. we will learn about class in greater
30:53 - detail later in this course
30:57 - now after that over here i'll create
31:01 - a variable n and to initialize our class
31:04 - we just write num
31:05 - that is the class name followed by
31:07 - parentheses
31:08 - this is also called constructor
31:12 - then after that we'll create an integer
31:14 - variable no
31:17 - and now we will check if
31:23 - n is not equal to null
31:27 - null stands for empty reference
31:31 - then no is equal to
31:34 - n dot num that means to get the
31:38 - data member num from the object
31:41 - n where n is an object of class
31:44 - num and then we will
31:47 - print n
31:57 - so now you can see when i print n it is
32:00 - showing
32:01 - instance of num and if i print no
32:04 - it should show 10 so you can see
32:08 - 10 is the output now
32:11 - suppose we have not initialized this
32:15 - and then if we try running then it will
32:18 - show
32:18 - null that means that no value is
32:22 - stored in n so now instead of
32:26 - if else we can use the null of a null
32:28 - aware
32:29 - operator so for that
32:32 - we will write n o
32:35 - is equal to n question mark
32:39 - dot num and try running it
32:45 - the output is again null but we over
32:48 - here we don't have to write the
32:49 - if else what it basically does is it
32:52 - checks
32:53 - that n is null or not if n is not null
32:56 - then it extracts the value from data
32:59 - member num
33:00 - and stores it inside no so now let's try
33:03 - see the difference by initializing n
33:06 - over here i'll write
33:08 - num now if i run this the output should
33:11 - be
33:12 - 10 so you can see the output is 10
33:16 - now we will see another type of null
33:19 - aware operator
33:22 - so now i'll change it back to
33:25 - null and now
33:29 - along with this i'll add two question
33:31 - marks
33:32 - and give a zero and now if i try running
33:35 - this
33:36 - the output will be 0 this means that if
33:40 - n is null then this will be the default
33:44 - value
33:45 - and if i again write num that means call
33:48 - the constructor
33:50 - and try running then the value will be
33:53 - 10 and then the
33:57 - final type of null aware operator
34:01 - is this
34:04 - it is written by two question marks
34:07 - and then an equal to so for that i'll
34:10 - remove this class i don't need it
34:12 - anymore
34:14 - i'll create a integer variable n o
34:18 - and not initialize it and now over here
34:21 - i'll write
34:22 - print and no
34:26 - double question mark equal to 100
34:31 - what this basically does is if no is
34:34 - null then it will
34:36 - store 100 in it and now let's try
34:38 - running this
34:41 - so you can see hundred is stored in no
34:45 - now the last type of operators are
34:48 - ternary operator
34:50 - so i'll create a main method
34:55 - and i'll create an integer variable
34:59 - 5 and another
35:02 - integer variable
35:06 - 6 and now for the ternary operator
35:11 - i'll create a boolean value bool
35:15 - a n s is equal to
35:18 - n o greater than n o one
35:22 - so this is the condition and if the
35:24 - condition is true
35:26 - we will set the value to true
35:29 - else the value will be false and now
35:32 - let's try printing
35:34 - the answer
35:43 - okay sorry the t will be small
35:54 - so you can see the output is false that
35:57 - means
35:57 - 5 is not greater than 6 this type of
36:01 - expression is called ternary operator
36:03 - where 3
36:04 - operators are used over here the
36:06 - operators are ans
36:08 - no and n 0 1. the functioning is
36:12 - this is a condition and if the condition
36:14 - is true then this part is executed
36:16 - else this part is executed
36:19 - so this was about operators
36:23 - after operators now we will move to
36:25 - conditional statements
36:27 - so in dart there are two types of
36:30 - conditional statements
36:31 - one is if else and the other one is
36:34 - switch case
36:35 - so to study about
36:38 - if else i'll create an integer variable
36:41 - you know and store 100 in it
36:43 - and i want to print even if the number
36:47 - is even
36:48 - otherwise i want to print odd so for
36:51 - that i can use an
36:52 - if else so inside the if i'll try to
36:55 - divide it by
36:56 - 2 and get the remainder
37:01 - and if the remainder is 0 that means it
37:03 - is completely divided by 2
37:05 - that means it is an even number so i
37:08 - should print
37:10 - even
37:14 - otherwise i should print
37:20 - odd
37:24 - odd should be inside quotes and now if i
37:28 - run the program
37:29 - the answer should be even and now if i
37:31 - change it to 1001
37:34 - the output will be odd and now
37:37 - if i want to have more than one
37:40 - condition
37:41 - then over here i can write else if
37:45 - so for that i'll write else if
37:49 - no divided by 3 and the remainder is
37:53 - equal to 0
37:54 - then i will print
38:01 - divisible by 3.
38:06 - else
38:10 - print odd
38:15 - so now if i change the number to
38:18 - 99 which is divisible by 3 you will see
38:22 - the output is
38:23 - divisible by 3 so if i run it
38:27 - the answer is divisible by 3 so this is
38:30 - how we use
38:31 - if else for checking some conditions
38:35 - you can add as many elsif blocks
38:38 - you want but if and else
38:41 - block can only be used once
38:46 - after if else we have switch case so in
38:49 - switch case we use the keyword switch
38:54 - and then we need to pass a number or
38:57 - character that will be checked
38:59 - so i will be using number in this case
39:02 - and then we will check the case in case
39:05 - 0 that means if
39:06 - no is equal to 0
39:09 - then i want to print
39:13 - 0 0 should be inside quotes
39:21 - followed by a break
39:25 - break brings the control outside of the
39:29 - switch case
39:31 - now after that i'll check for another
39:33 - case
39:34 - case 100
39:38 - that then print
39:46 - and then again a break
39:50 - and then finally we can have default
39:57 - and there we can print
40:01 - not 0 not 100
40:04 - and we don't need to give a break
40:07 - because
40:08 - we are as it is at the end of the
40:11 - switch case so now let's try running
40:14 - this program
40:15 - as the number is 99 the default case
40:18 - should be executed
40:23 - so if i run this the output is not 0
40:26 - not 100 and now if i change it to 100
40:30 - the output should be 100
40:34 - and if i change it to 0
40:41 - the output is 0 so this is how we use
40:45 - conditional statements in dot i hope
40:48 - everything was clear
40:49 - thank you welcome to programming
40:52 - knowledge
40:53 - so the next thing that we will study in
40:56 - dart is loops so basically there are
41:00 - five types of loop the first loop is
41:03 - for loop
41:07 - so the syntax of for loop is
41:10 - very much same as in other programming
41:14 - languages
41:14 - we have the keyword for and then we
41:17 - create a variable
41:18 - where i is equal to 0 that is
41:21 - initializing a variable
41:23 - then setting the range i is less than
41:27 - 10 and then increment or
41:30 - decrement and then inside this we write
41:32 - the code
41:33 - that we want to execute
41:37 - so for right now i will be printing
41:43 - programming knowledge
41:48 - and now if i click on run programming
41:51 - knowledge
41:52 - should be printed 10 times so you can
41:55 - see
41:56 - it has been printed 10 times so this is
41:59 - how we use
42:00 - for loop another possible way to use
42:04 - for loop is setting this value to
42:07 - 10 and checking that i
42:10 - is greater than 0
42:14 - and instead of incrementing decrementing
42:16 - the operators
42:17 - and now if i run this code the output
42:21 - will be exactly same
42:23 - so these are the two methods in which we
42:25 - can use
42:26 - for loop the next type of loop is called
42:30 - for in loop
42:33 - so i'll just remove this
42:42 - so for in loop is basically used in
42:45 - collections
42:46 - we will study about collections later in
42:49 - this course but
42:50 - for now i'll just create a list
42:54 - and store one two three in it
42:57 - list is a type of collection that stores
43:00 - more than one values under the same name
43:04 - and now to run i'll write for
43:11 - where x where x is a variable that i
43:14 - have created
43:16 - in n o that means x will have the
43:20 - have 1 2 3 every time the loop runs
43:24 - so now if i print x
43:27 - 1 2 3 should be printed
43:32 - so you can see the output is 1 2
43:36 - 3 now the next type of loop is
43:39 - for each loop for each loop is also used
43:43 - on collections so just for example
43:46 - i'll write no that is the variable that
43:50 - we have created
43:51 - dot for each
43:55 - that is a method and inside that
44:00 - it returns and that is each value inside
44:04 - the no list
44:05 - and then it should perform some tasks so
44:08 - to
44:08 - write which task to perform we first
44:11 - given equal to
44:13 - then a right arrow and then we write the
44:16 - statement print n in this case
44:20 - so now if i click on run one two three
44:24 - should again be the
44:25 - output now suppose we want to call
44:28 - another function so for that i'll write
44:31 - void print
44:34 - num it takes a value num
44:38 - and then prints it to the console
44:43 - so now instead of this print statement
44:46 - i'll
44:47 - replace it with my method name that is
44:49 - print num
44:50 - and it takes a value num which is
44:54 - nothing else then n so now if i try to
44:58 - try to run this i will get the same
45:00 - output
45:03 - now the next type of loop is while loop
45:06 - so for that i don't need this function
45:15 - now i'll create a variable integer type
45:19 - variable
45:19 - num and initialize it to 5 and
45:23 - now i want to run a loop while
45:28 - num is greater than
45:32 - zero so to run a while loop the keyword
45:34 - is
45:35 - while and now over here i'll just simply
45:37 - print the number
45:41 - and then decrement the number by one and
45:46 - now if i
45:46 - run the loop i'll get the output 5
45:49 - 4 3 2 1 so this is how we use a
45:53 - while loop now the next type of loop is
45:57 - do while loop so for do while
46:00 - we first try to do and then inside
46:03 - that the code that every time the
46:06 - condition is
46:07 - true should be executed so i'll just
46:10 - print the number
46:12 - then num minus minus
46:15 - and then after do we have while
46:20 - num greater than zero
46:23 - and now if we run the code we will get
46:25 - the same output
46:27 - now the benefit of do while over while
46:30 - is
46:30 - that even if the condition is true
46:34 - even if the condition is false the loop
46:36 - gets executed
46:38 - once suppose the condition is suppose
46:40 - the number is
46:41 - minus 1 that is already less than 0
46:45 - so now if i run the loop will get at
46:47 - least executed
46:49 - once so the output is minus 1 but
46:52 - if we use while instead of do while
46:56 - this will not get executed
47:06 - now if i click on run the console will
47:08 - be empty
47:11 - so this is the difference between while
47:14 - and do while now another thing that is
47:18 - important
47:18 - while studying loops is break
47:22 - and continue we have seen break in
47:26 - switch cases and now we will see that
47:29 - in a more elaborate way the basic
47:32 - concept of break is that wherever break
47:34 - statement is executed
47:36 - the control comes out of the loop so
47:38 - suppose i
47:39 - have number 10 and i want to print only
47:42 - till
47:42 - 5 but my while loop has the condition
47:46 - till
47:47 - check still zero so what i'll basically
47:49 - do is i'll check if
47:52 - num is equal to equal to 5
47:56 - then break
48:00 - and the print statement will also be
48:03 - there
48:04 - and the decrement statement also
48:08 - so now if i click on run it should only
48:10 - print till
48:11 - 6 i guess yes so you can see the
48:14 - output only till 6 is printed because as
48:17 - soon as num value became 5
48:19 - this condition became true and break was
48:22 - executed so as soon as break was
48:24 - executed
48:25 - it came out of the loop
48:29 - so that was about loops i hope
48:32 - everything was clear
48:33 - thank you welcome to programming
48:36 - knowledge
48:37 - in this tutorial we are going to discuss
48:39 - about collections in dart
48:41 - there are basically three built-in
48:43 - collections that ships with
48:45 - dot one of them is list list
48:48 - is very similar to arrays that we have
48:51 - in
48:51 - most of the other programming languages
48:54 - we can define a list by writing the
48:56 - keyword list
48:58 - and then the name that we want to give
48:59 - to the list and a
49:01 - pair of square brackets so in this
49:04 - manner we have created a
49:06 - variable of list which has a name name
49:10 - and it has been initialized and it has
49:13 - no values in it and suppose if i want to
49:15 - initialize with certain values inside it
49:17 - then i can simply write them
49:19 - inside the square brackets and to add
49:22 - more than one value we can just
49:23 - separate them by a comma
49:28 - so over here i have a list name which
49:31 - has two values stored in it
49:33 - rishabh and ram so
49:36 - list also follows the basic indexing
49:38 - concept that we have in most of the
49:40 - programming languages
49:42 - except pascal photon etc
49:46 - that is the indexing starts at 0 that
49:49 - means
49:49 - this reshop is stored at an index 0
49:53 - and ramesh is stored at index 1
49:56 - so to print the values at a certain
49:58 - index we just need to write it inside
50:01 - the
50:02 - print statement and followed with a
50:05 - square brackets and inside square
50:06 - brackets we need to write the
50:08 - index and now if i click on run reshop
50:12 - should be printed and now if i change
50:15 - the index from 0 to 1
50:18 - ramesh should be printed
50:21 - and over here i can also change this
50:24 - list to var and it should not give us
50:28 - any error
50:29 - this is because the dart with the help
50:32 - of
50:33 - type inference automatically converts
50:36 - this variable name
50:38 - to a type or to a list type which has
50:41 - strings values stored in it
50:43 - now we can have values of more than one
50:47 - data type stored in the
50:49 - stored in the list so to do so if i
50:51 - write 100
50:52 - which is an integer and if i also try to
50:55 - add a
50:56 - double value then this will work and it
51:00 - will not give us any
51:01 - error so if i click on run 100 should be
51:04 - the output
51:05 - now suppose i want to loop through each
51:07 - of the values then the most
51:10 - easiest way is to use a for each loop
51:13 - so for that i'll add var i
51:19 - in name and then inside this
51:22 - i'll just print i
51:26 - and then i should be able to see all the
51:28 - values that i have inside the
51:31 - list and now if i want i can also change
51:34 - the
51:35 - values at a certain index in the list
51:38 - so if i want to change the
51:42 - value at index 1 in the list
51:45 - name then i can just simply change it to
51:49 - suresh and this should work
51:55 - and i can and it is not necessary to
51:58 - change a
51:58 - string value to another string value
52:01 - only we can give it a
52:03 - integer value also and now if i click on
52:05 - run one two three should be displayed
52:07 - instead of
52:08 - suresh so it is working fine and now
52:11 - suppose we
52:12 - want to have a list that only stores
52:16 - string then what we can do is we can
52:18 - change this
52:20 - where to list and after that inside
52:23 - angular brackets
52:24 - i will define the data type that means
52:27 - only string values
52:29 - should be there so you can see the red
52:31 - line below this integer and
52:34 - float values it is basically there
52:36 - because
52:37 - we have defined the list as a string
52:41 - values
52:42 - container list and it cannot store
52:44 - integer and double
52:46 - so if i remove this then it will not be
52:49 - a problem
52:51 - now if i click on run rishabh and ramesh
52:55 - should be printed
52:59 - now let me change it back to var
53:03 - and i'll remove this comment and then
53:06 - i want to change the value at index 1
53:10 - from ramesh2 123 and then if i click on
53:12 - run
53:14 - then it is changing okay and now suppose
53:17 - i want i don't want to change the value
53:20 - at runtime so what i can basically do is
53:22 - i can put a const over here which makes
53:25 - the values stored inside the variable
53:27 - name
53:28 - as a constant so now you can see
53:31 - over here i am declaring the variable
53:33 - name as a constant and after that i am
53:35 - trying to
53:36 - change a value so if i run this it
53:39 - should give me an
53:40 - error so over here you can see
53:43 - uncaught error unsupported operation
53:46 - indexed set and now if i
53:50 - comment this again and try to run this
53:53 - then this should not be an error
53:58 - now after that suppose i want to copy
54:01 - this list
54:02 - to another variable so for that i'll
54:04 - create a new variable n
54:06 - and i'll just simply write name and over
54:08 - here in the loop i'll change this
54:10 - name to n and now if i click on
54:13 - run the output will be same
54:17 - okay but now if i change the value of
54:20 - name means any value of the list
54:24 - name then the values in list
54:28 - n will also change
54:33 - okay so it is giving me an error because
54:35 - i have a const over here so i'll just
54:37 - remove the const for now
54:39 - for the explanation purpose so now
54:42 - if i click on run it is still giving me
54:44 - an error
54:48 - it is because i have missed a semicolon
54:51 - over here so now if i give the semicolon
54:53 - and run this again
54:55 - so over here you can see that if we
54:58 - change the values stored in the variable
55:00 - name then the values stored in variable
55:03 - n is
55:04 - also changing so basically over here it
55:07 - doesn't copy the set of values but
55:09 - both the list variables point at the
55:12 - same location
55:13 - that is the location of the data in the
55:16 - memory
55:17 - so to avoid this we have a special
55:19 - function
55:20 - that is prefabricated in dart
55:23 - known as spread operator
55:27 - javascript developers might be familiar
55:29 - with this
55:30 - so over here what we basically do is we
55:33 - surround the variable name with square
55:35 - brackets
55:36 - and before writing the variable name we
55:38 - just simply give three simple dots
55:41 - and now after assigning if we change the
55:43 - value of
55:44 - the previous list or the original list
55:47 - then it will not be reflected in the new
55:50 - list
55:51 - so now if i click on run the output
55:53 - should be rishabh
55:55 - and ramesh so this is how we get
55:58 - the two different copies of a list
56:02 - so this was for list see you in the next
56:04 - tutorial
56:05 - thank you welcome to programming
56:08 - knowledge
56:09 - in the last tutorial we discussed about
56:11 - lists
56:12 - and in this tutorial we are going to
56:14 - discuss about
56:15 - another collection that is called set
56:18 - so suppose i want to define a set of
56:20 - elements
56:21 - so i'll write elements and to initialize
56:25 - a set we give a pair
56:26 - of curly braces and inside suppose i
56:30 - have
56:30 - two values for instance hydrogen
56:34 - and oxygen
56:38 - okay so now over here i have defined a
56:40 - set elements that has two values
56:42 - hydrogen and
56:43 - oxygen and to iterate through each value
56:46 - we can simply use the for each loop so
56:48 - for that we write
56:50 - for where x in halogens
56:56 - then simply for now let's print the
56:59 - value
57:00 - okay and now if i run this hydrogen and
57:03 - oxygen
57:04 - should be printed in the screen okay my
57:06 - mistake instead of
57:08 - elements i have written halogens over
57:10 - here
57:12 - so now if i run this hydrogen and oxygen
57:15 - should be printed okay
57:17 - so another feature of set is that if we
57:20 - have duplicate values then it gets
57:23 - removed automatically
57:26 - so for instance suppose i add another
57:30 - hydrogen okay and now if i try to run
57:33 - this we will get
57:34 - a single hydrogen printed on the console
57:37 - okay so this is a feature of set that we
57:40 - use while programming in flutter
57:43 - okay so the next thing about set is
57:47 - that to initialize a set
57:50 - if we write something like this which is
57:53 - correct according to the basic
57:55 - convention
57:56 - ok now if i try printing its runtime
57:58 - type
57:59 - so first of all to print the runtime
58:01 - type
58:02 - we write element dot
58:07 - runtime type
58:10 - and a semicolon over here and now if i
58:14 - run this
58:15 - so it is giving me an error because an s
58:18 - is missing right over here
58:21 - and now if i run this the output is
58:24 - hash map but our task was or our
58:28 - assumption was that this will initialize
58:30 - a set so this is a common mistake that
58:33 - everyone does
58:35 - okay so the curly curly braces
58:38 - stand for a hash map and if you want to
58:42 - initialize a set
58:44 - then we can just add a data type over
58:47 - here or the data type
58:50 - of the values which we are going to
58:52 - store and now if i run this
58:54 - this should change from hash map to hash
58:57 - set
58:58 - okay and yet another method is
59:01 - we can write instead of where we write a
59:05 - set over here okay now if i run this the
59:08 - output will be again hash
59:10 - set okay and i can also
59:13 - predefine the data type that will be
59:16 - stored in that
59:17 - set by writing
59:20 - like this and now if i run this it again
59:24 - says
59:25 - hash set but instead of dynamic now it
59:28 - has string over here which means it can
59:30 - only store string values
59:33 - okay so moving on this was about
59:37 - set the next thing that we are going to
59:39 - discuss is map that is yet another
59:41 - collection provided by dart
59:43 - and it is very much similar to
59:45 - dictionaries in python
59:47 - and hashmap in java and for different
59:51 - languages there is also some reference
59:53 - to this type of collection okay so you
59:56 - understand that how much important this
59:58 - map collection is
60:00 - okay so to create a map
60:04 - we rise for suppose i create a map
60:06 - student
60:07 - okay that has a key value pair okay so
60:10 - the key is name
60:13 - and the value is my name
60:17 - okay then a comma then the another value
60:20 - that is another key
60:22 - that is h and the value is 20
60:25 - so mark over here i can store different
60:29 - data types as my key and as my value
60:33 - let's say the third value is email
60:36 - okay and the answer is my email
60:44 - okay so now over here i have a student
60:47 - map that has
60:48 - three key value pair the key is name the
60:50 - value is rishabh
60:52 - key is age the value corresponding to
60:54 - that is
60:55 - 20 the key is email and the value
60:58 - corresponding to it
60:59 - is my email okay and now suppose i want
61:03 - to print a particular value
61:05 - so that can be done using the key okay
61:08 - so suppose if i want to print my name so
61:10 - inside print
61:11 - i'll first write the map name and then
61:14 - inside square brackets
61:17 - i'll write the key name mark over here i
61:20 - have my key as a string so the key
61:22 - over here is also a string okay and now
61:25 - if i
61:26 - run this reshafts should be the output
61:31 - okay so this was about map
61:35 - and over here we finished the
61:37 - collections now moving forward the next
61:40 - thing that we are going to discuss
61:41 - is functions
61:46 - or you can also call them methods if
61:48 - they are inside a class
61:50 - so over here this void main is
61:53 - itself a method itself a function the
61:56 - most important function in any dart
61:58 - program
61:59 - this is where the compiler will start
62:01 - executing the code from
62:03 - okay so now suppose i create another
62:06 - function
62:08 - a very basic function called
62:11 - sum okay i am writing dynamic before
62:14 - that that defines the return type
62:16 - and dynamic stands for the value will be
62:19 - assigned the data type will be assigned
62:21 - during runtime
62:22 - okay so the return type will be
62:26 - dependent on the inputs that we give
62:28 - okay so if i write where n1
62:32 - comma n 2 ok
62:35 - now simply i just return their sum
62:38 - so i write n 1 plus n 2
62:42 - and now over here i call this method and
62:45 - since it is returning some values so i
62:47 - need to store
62:48 - it in a variable or a shorthand of a
62:51 - shorthand method will be i directly
62:53 - surround it with a print statement
62:55 - so that the return value directly gets
62:57 - printed
62:59 - and then some i'll pass two values
63:02 - one comma two and now if i run this
63:05 - three should be the output
63:07 - okay and similarly as i have dynamic
63:10 - over here it is not confined
63:12 - to integer only i can also pass uh
63:15 - decimal value which will be
63:19 - considered as float over here and i get
63:21 - a float output
63:23 - and i can also pass a string over here
63:27 - so suppose i pass two strings
63:31 - shove and kumar and if i run this rish
63:34 - of kumar will be
63:35 - the output that means string
63:37 - concatenation has taken place
63:40 - okay now the another feature about
63:42 - functions in
63:44 - dot is that if we have a single line
63:46 - function
63:47 - then instead of writing it like this we
63:49 - can use the
63:51 - shorthand method that dot provides
63:54 - that is giving an equal to sign then a
63:57 - right angle sign and then just
63:59 - writing the operation that we want to
64:02 - provide and
64:03 - in this case it is n 1 plus n 2
64:06 - and we don't need to write a return
64:08 - statement over here and now if i run
64:10 - this the output will be the same
64:12 - okay and let's again check it with an
64:15 - integer
64:16 - if i write 1 comma 2
64:22 - sorry now let's run this and you can see
64:25 - 3 is the
64:27 - output so this type of function is
64:30 - common in all types of programming
64:32 - language and this type of function is
64:34 - called
64:35 - positional functions that means the
64:38 - first parameter will be stored in the
64:40 - first variable
64:42 - defined inside the parenthesis and the
64:45 - second parameter will be stored in the
64:47 - second variable decided in the
64:48 - parenthesis
64:50 - okay and the next type of
64:54 - arguments are called named arguments
64:56 - where we don't need
64:58 - to worry about the order
65:01 - okay so to make it a named argument i'll
65:04 - just put curly braces
65:07 - in between the parentheses and the
65:10 - variable names
65:11 - okay and now i can pass any value as per
65:14 - my choice
65:14 - okay so i i want to pass the n1 value so
65:17 - i'll just write the key name
65:19 - give a colon and the value comma
65:21 - similarly for the other parameter i'll
65:23 - write n2 that is the key name
65:26 - and a value okay now similarly if i run
65:29 - this the output will be
65:31 - three again okay and now the basic
65:34 - flexible flexibility that it provides
65:37 - over here is
65:38 - that i can change the order in which i
65:40 - want my value to pass
65:42 - okay so suppose i want to pass n2 as
65:47 - rishabh and n1 s
65:51 - kumar so now my output will be kumar
65:54 - rishabh
65:55 - okay but if we would have gone by the
65:59 - positional method then rishabh kumar
66:02 - should have been printed but
66:04 - because we are using named arguments we
66:06 - are getting this flexibility to change
66:08 - the order of parameters
66:10 - that will give as an input to any method
66:13 - okay
66:14 - so this will be it for dart
66:17 - deep dive in the next class we will
66:19 - start with
66:21 - exploring flutter and widgets that we
66:23 - have in flutter
66:25 - thank you welcome to programming
66:29 - knowledge
66:29 - so in this tutorial we are going to
66:31 - discuss about all the files and folders
66:34 - that ships with a flutter package so
66:37 - as you can see the first folder is dot
66:39 - dot
66:40 - underscore tool so it has some basic
66:43 - tools that we use in our developer
66:45 - console
66:46 - and we will see what is our dart
66:48 - developer console in one of the videos
66:51 - okay then the next folder is dot idea
66:54 - and it has
66:55 - the basic android studio configurations
66:58 - which are used when we run the project
67:00 - on android studio ide
67:02 - then after that we have dot vs code
67:05 - folder so this folder is created by vs
67:07 - code which is the ide i am using right
67:09 - now
67:10 - and this folder will only be created
67:12 - when you change some default settings
67:13 - and we can ignore this for now
67:15 - then the next folder is the android
67:18 - folder so as the name suggests
67:20 - it has all the files that supports the
67:23 - android functionality so it is a super
67:26 - important folder it contains
67:28 - all the files which are used by flutter
67:30 - sdk to run our flutter app on android
67:33 - devices
67:34 - and android emulators it is a passive
67:36 - folder which is created by flutter
67:38 - itself and we generally don't
67:40 - need to change anything inside the
67:42 - folder except when we want some
67:44 - variation in
67:45 - android and our ios app then the next
67:49 - folder is the build folder so it is also
67:52 - an
67:53 - important folder it holds all the output
67:55 - files and the generated resources
67:58 - and it is also a passive folder
68:01 - then the next folder is ios folder so
68:05 - it is also similar to android folder
68:08 - except as the name suggests its target
68:11 - devices ios if you are using
68:15 - windows then you may or may not have
68:17 - this folder as it is not allowed by
68:19 - windows
68:19 - but if you are using a mac os system you
68:22 - will be able to see this ios folder
68:25 - and what it basically contains is an
68:28 - xcode project
68:29 - xcode is the official development id for
68:32 - apple devices
68:33 - then the next folder is the lib folder
68:37 - as the name suggests it stands for
68:39 - library
68:40 - and 90 percent of interaction that we
68:42 - will have with
68:43 - this or any flutter project is via this
68:47 - folder
68:48 - this is the folder where we add all our
68:50 - dart
68:51 - files and write codes for our project
68:55 - then the next folder is the test folder
68:57 - and as the name suggests it is used for
68:59 - writing test
69:00 - for the project and that is done
69:03 - when we move from development to testing
69:06 - so it is not our
69:07 - main concern right now after that we
69:10 - have this dot get ignore and it has
69:12 - all the version control settings
69:16 - and if you don't know what is a version
69:17 - control then you can do a quick google
69:19 - and get your answer
69:20 - then after that we have dot metadata
69:23 - and dot packages so it is system
69:25 - generated and we don't need to worry
69:27 - much about them
69:29 - okay and then next we have this
69:33 - demo.iml so it is a project
69:36 - it is the file that has the same name as
69:38 - the project
69:39 - we will not work with this file also it
69:42 - is just a file which works with
69:44 - internal dependencies and stuff and the
69:47 - similar goes to
69:48 - pop spec dot lock then the next
69:51 - one is pop spec dot tml so it is a file
69:55 - in which we will be working
69:57 - over here we can configure all the third
69:59 - party packages
70:00 - that the project will use similar to the
70:03 - app
70:04 - level build.gradle that we have in
70:06 - android
70:07 - we also configure other things such as
70:10 - fonts
70:11 - location images and stuff
70:14 - then back to pub spec dot log so pub
70:17 - spec
70:17 - dot lock is generated from pop spec dot
70:20 - tml and it basically has a more
70:22 - structured
70:24 - uh settings than pub spec dot tml okay
70:27 - so this were all the files
70:29 - and we also have a readme.md
70:32 - so over here we can specify something
70:34 - about our project and if we are sharing
70:36 - our project we can add some data over
70:38 - here
70:39 - so that the developer whom we are
70:41 - sharing to can read this
70:43 - and understand okay
70:47 - so these were all the files that we have
70:49 - in a
70:50 - flutter project and now let's open our
70:54 - main dot
70:55 - dot file okay and let's see what is our
70:58 - prefabricated
70:59 - application has okay so to run any
71:02 - flutter project i can simply go to run
71:04 - and then click on run without debugging
71:06 - we can also use this
71:08 - start debugging but it is a slower
71:11 - process okay because in debugging we
71:12 - need to add some breakpoints and all
71:14 - okay and we are not in that complex
71:16 - level of
71:18 - flutter project so i'll simply start
71:19 - with run without debugging
71:21 - and then over here you can see the debug
71:23 - console has opened and it is
71:25 - writing launching and the basic
71:27 - requirement is over here you can see i
71:29 - have a flutter device that means
71:31 - an android device connected to my system
71:35 - okay and if you also want you can use an
71:37 - ios emulator instead of an
71:40 - android emulator okay but i'll go for an
71:42 - android emulator right now
71:45 - and let's wait for the builder to finish
71:47 - so once the application has started
71:49 - running we can see we get something like
71:51 - this on our emulator
71:53 - now the basic ui designing that we do in
71:56 - flutter is done by a widgets
71:58 - that means that everything that we see
72:00 - on the screen is a tree of widgets
72:02 - for example the text that we see on the
72:05 - center is a widget
72:07 - the app bar is a widget and the floating
72:09 - action button
72:10 - is also a widget and they all are the
72:13 - branches of the root widget which is the
72:15 - screen
72:16 - which is also referred as scaffold in
72:19 - flutter
72:20 - okay so that means scaffold is the root
72:23 - widget
72:24 - and the center text floating action
72:27 - button
72:27 - app bar all are the branch widgets of
72:30 - the scaffold root widget
72:32 - okay and all these widgets have their
72:35 - sub widgets also like the app bar
72:37 - has a text widget that displays the text
72:40 - on the app bar
72:41 - the center widget also has a text widget
72:44 - which displays the text that you see on
72:47 - the center
72:49 - similarly the floating action button has
72:51 - an icon widget
72:53 - so as to specify which icon will be
72:55 - displayed on the floating action button
72:58 - and similarly we can also have a text
73:00 - widget
73:01 - if we want to display some text below
73:03 - this icon in our floating action button
73:06 - okay so now if we go to our main dot dot
73:10 - and if you look for build method
73:13 - over here you can see first of all we
73:16 - have the scaffold widget
73:18 - okay that means our parent widget the
73:20 - root widget
73:21 - then we have the app bar widget which is
73:23 - a branch of the scaffold widget
73:25 - and then inside this f bar widget we
73:28 - have another widget that is the text
73:30 - widget
73:31 - and over here we have widget dot title
73:34 - that is basically displays the text that
73:37 - we can see on the app bar
73:40 - then after that we have this body inside
73:42 - scaffold and body refers to
73:45 - the entire screen leaving the app bar
73:48 - okay then inside the body you can see
73:52 - center that means the our elements will
73:55 - be displayed in the center
73:57 - then we have a child column main access
74:00 - element
74:00 - we will discuss about these things in
74:04 - later in another tutorials then after
74:06 - that you can see we have our text widget
74:09 - over here and you have a text written
74:11 - you have post the button this many times
74:14 - which is similar to the text that we see
74:16 - in our
74:17 - center widget okay then similarly this
74:20 - text also where we have dollar and
74:22 - underscore counter that stands for
74:24 - string interpolation
74:26 - which we have discussed in one of our
74:27 - dot deep type videos
74:29 - what basically happens that the value
74:32 - stored in this counter variable will be
74:34 - displayed at this place
74:36 - after that we have this floating action
74:38 - button okay and it also takes an
74:41 - icon widget and it displays the add icon
74:45 - okay now over here you can see our
74:48 - application
74:49 - also has some functionality that means
74:51 - if i click on this plus button
74:53 - over here the value will keep on
74:56 - increasing
74:57 - okay so how does this happen this
74:59 - happens
75:00 - that inside the floating action button
75:02 - we have a
75:04 - parameter called on pressed okay which
75:06 - calls
75:08 - underscore increment counter which means
75:10 - whenever this on pressed method
75:13 - is called then this increment counter is
75:15 - referred to
75:17 - by the on pressed method so if you look
75:19 - in the
75:21 - file for this increment counter over
75:23 - here we can see
75:24 - that this underscore increment counter
75:26 - is a method
75:28 - and the underscore which we have before
75:30 - the
75:32 - method name or variable name refers to
75:36 - that it is a private member of the class
75:39 - okay so inside this method you can see
75:41 - we have something called set state we
75:43 - will discuss about this later
75:44 - and we are incrementing the value of
75:47 - underscore counter and it is the same
75:49 - counter
75:50 - which we are displaying in our text okay
75:53 - so now just to check i want to increment
75:57 - the value by
75:58 - 2 instead of 1 so i'll just write
76:02 - counter plus 2.
76:07 - okay so now if i'll save this
76:13 - this will be build automatically over
76:15 - here you can see
76:20 - okay this will take a few minutes if you
76:22 - do it for the first time
76:28 - once done if you go back to your
76:30 - application and if you click on this
76:32 - plus
76:32 - then instead of incrementing by one it
76:35 - will increment by
76:36 - two okay so this is the basic structure
76:40 - of any flutter application
76:42 - we will start building the application
76:44 - from scratch in our next tutorial
76:46 - thank you welcome to programming
76:48 - knowledge
76:49 - so as i told in my previous video that
76:52 - in this video we are going to
76:54 - start making an application from scratch
76:57 - so for that first i'll select all the
77:00 - code that was free
77:01 - prefabricated by flutter and remove them
77:04 - okay and now in our dart deep dive
77:07 - videos we have seen that the
77:09 - maximum code that we were writing
77:13 - was starting from this main method and
77:15 - which is true which is the most
77:17 - common convention that is followed
77:20 - from the functionality point of view
77:22 - which means for
77:23 - competitive coding or stuff like that
77:26 - but our target is to
77:28 - show ui elements on the mobile screen
77:31 - and for that we need to follow the
77:33 - convention specified by the flutter team
77:36 - and that is to create a class and
77:38 - inherit certain properties
77:40 - now if you don't know what inheritance
77:43 - is
77:43 - it is basically inheriting features from
77:46 - a predefined class
77:48 - and we can only add features and use the
77:50 - predefined features
77:52 - but we cannot modify them okay
77:55 - so now let's say i create a class
77:59 - and to create a class we need to write
78:01 - the keyword class where c is small and
78:03 - then the class name for instance i give
78:05 - my class name as
78:07 - my app okay and then a set of curly
78:10 - braces and to inherit
78:12 - any other class we use the keyword
78:14 - extends
78:16 - okay and this extends should be written
78:19 - after the class name and before the
78:20 - curly braces
78:22 - okay and the class that we are going
78:26 - to extend or inherit properties from
78:29 - is a class not created by us but
78:31 - provided by the flutter sdk
78:34 - which which you can see is added in our
78:38 - pub spec dot tml file over here you can
78:40 - see we have this dependencies
78:42 - section and the dependency that we have
78:44 - added is flutter
78:46 - okay so to import
78:50 - any dart file in our
78:53 - main dot dot or any other dart file
78:57 - ok so we write import there is a keyword
79:00 - import
79:01 - and then the file that we are going to
79:04 - use is material dot dot
79:08 - okay so as you can see
79:12 - it is inside the flutter package that
79:14 - means it is provided by flutter and what
79:17 - it basically
79:18 - has is a whole bunch of widgets to use
79:22 - and the base class widget which allows
79:24 - us to use this
79:26 - widgets is called as stateless widget so
79:30 - over here
79:30 - i'll write stateless
79:34 - with check now
79:37 - stateless widget is not the only base
79:40 - class that allows us to use widgets
79:42 - in our custom defined class there are
79:46 - more which we will
79:47 - learn in other videos so now
79:50 - over here you can see i get a red line
79:53 - below this my app
79:54 - okay that means there is some error in
79:56 - the program and over here it is
79:58 - specifically because we are missing some
80:00 - methods and functions which should be
80:03 - inside this class and
80:04 - namely the build function okay so
80:07 - instead of this
80:09 - the another method that you can use is
80:11 - just write
80:13 - s t okay and then the flutter will
80:15 - itself tell you
80:16 - to click suggest you to this flutter
80:20 - stateless widget and if you click on
80:21 - them then you can see
80:22 - it automatically creates a class over
80:26 - here you can give the class name
80:28 - okay that extends the stateless widget
80:31 - and inside this
80:32 - it has a class that is called build
80:35 - it takes a parameter that is built
80:37 - context and it returns a widget
80:39 - okay so over here it takes a near
80:41 - positional parameter that is context
80:44 - which is of type
80:45 - build context okay now it is having more
80:48 - red lines okay so
80:50 - the it is because we are not importing
80:52 - the material package over here
80:55 - okay so for that i'll again write
80:56 - material dot dot
80:58 - and once it is done you can see all the
81:00 - red lines are gone
81:01 - okay and now over here it is written
81:04 - return container
81:06 - okay so we will discuss about container
81:08 - a little later
81:09 - okay so now the first
81:13 - thing that we need to return
81:16 - is a material app
81:20 - okay a capital
81:24 - now which whose basic task is to show
81:27 - all the
81:28 - widgets that you write inside this as an
81:31 - ui element in the app
81:34 - now one thing you need to remember is
81:37 - that
81:38 - out of all the other named parameters
81:40 - that it takes
81:42 - one most important parameter is home
81:46 - okay and whatever widgets or widget tree
81:49 - that we send
81:50 - as a value for this named parameter
81:53 - will be the first thing that will be
81:55 - loaded on the screen as we build the
81:57 - app okay and then later we can toggle to
82:00 - different screens which are in
82:02 - flutter is called routing or
82:06 - routing for now let's just send a text
82:09 - with
82:10 - jet and to do that we write t e x t
82:13 - as in text and mark the capital t and it
82:16 - takes a string as the parameter which
82:18 - will be displayed on the screen so for
82:20 - now let's
82:22 - give programming knowledge
82:26 - as the text
82:32 - okay now text widget also has
82:36 - other named parameters which we will use
82:39 - in the later videos okay but as you can
82:42 - see
82:43 - i have no name before this string
82:46 - and that is because it is a positional
82:48 - parameter which means it is compulsory
82:51 - to send okay and along with this we also
82:55 - have some named parameters
82:57 - okay which we will be using later and
82:59 - these are not necessary to
83:01 - send as we have discussed in our data
83:03 - deep dive video
83:05 - now let's see this in action and for
83:08 - that we need to write
83:12 - a void main okay
83:15 - and then inside this i'll write run
83:19 - app okay so this run app is also a
83:23 - method provided in material dot dot
83:26 - and then we need to write my app
83:30 - inside this run app method
83:34 - and then i also need to give a set of
83:36 - parentheses because i am passing it as a
83:38 - function so as to tell what it needs
83:42 - to run okay and now as you can see
83:47 - it is a one liner method okay so we
83:51 - we will use another method to declare
83:53 - the function
83:54 - okay the one liner method okay so i'll
83:57 - just cut it from here
84:00 - and then i'll give an equal to a right
84:03 - angle bracket
84:05 - and then simply paste this okay
84:08 - and now if i run this i will be able to
84:11 - see
84:12 - something on my screen okay so i just
84:14 - need to save and it will hot reload
84:16 - automatically
84:20 - so as the app starts running you can see
84:23 - the text is in red and it has
84:25 - two yellow underlinings okay that means
84:28 - the code is not correct okay and
84:31 - that is because as we discussed in the
84:33 - previous video that the root of
84:36 - every widget tree in flutter is a
84:38 - scaffold
84:39 - okay and over here you can see i am
84:42 - directly passing the text
84:43 - instead of scaffold okay so
84:46 - what you can do is you can
84:50 - pass a scaffold and inside scaffold you
84:53 - can pass a text as the body
84:55 - okay or else we will see this in the
84:57 - next video
84:58 - thank you welcome to programming
85:02 - knowledge
85:03 - so in the previous video we started
85:05 - discussing about stateless widgets
85:07 - material app and the text widget
85:10 - and we passed this text widget as a
85:13 - parameter to this
85:14 - home argument and then when we were
85:18 - running the application we were getting
85:20 - the text in red and it has
85:22 - two yellow lines below it okay and this
85:25 - generally happens when there is some
85:27 - error in the code so the error over here
85:30 - was basically that we were making
85:32 - the text as our home widget which is not
85:35 - correct because the
85:36 - home takes the root widget and as we
85:39 - have discussed in previous videos that
85:41 - the root widget
85:42 - needs to be a scaffold widget okay so
85:45 - instead of passing a text over here
85:49 - i'll pass a scaffold
85:53 - ok and now if i save this
86:00 - you can see that the text is gone and no
86:04 - error is present in the console okay so
86:07 - now let's add some widgets on our screen
86:10 - and the first thing that you will see
86:13 - in maximum mobile applications is an
86:16 - app bar so to add an app bar we write
86:21 - app mark the small a app bar
86:26 - and it takes an app bar widget over here
86:29 - the a is capital
86:31 - okay now this app bar widget also takes
86:35 - a few parameters
86:36 - and as we want to
86:41 - give an app our title we will call the
86:44 - title parameter
86:45 - and as we want our text as our title
86:48 - we will again use a text widget over
86:51 - here and as we have discussed in the
86:53 - previous video that text
86:54 - takes a string over here which is
86:56 - compulsory to give
86:57 - okay and that is also verified when you
87:00 - hover over it
87:01 - you can see that the says that it takes
87:05 - a string data which is compulsory and
87:07 - then
87:07 - all the other values are inside curly
87:10 - braces that means they are named
87:11 - parameters and they are not necessary to
87:13 - give
87:14 - okay so now let's give this
87:17 - programming
87:21 - knowledge okay and now if i
87:25 - save this i will be able to see an app
87:27 - bar with
87:28 - the text programming knowledge on it
87:30 - okay
87:31 - and here you go you see you have a text
87:34 - programming knowledge and this
87:36 - blue check section is your app bar
87:39 - okay and now if you are wondering where
87:41 - did this blue color
87:43 - came from as we have not discussed or
87:46 - not
87:46 - specified any color over here so let me
87:49 - tell you that
87:50 - blue is the default color in every
87:52 - flutter application
87:54 - okay but if you want you can also give a
87:57 - custom defined color okay so to give a
87:59 - color you need to come
88:00 - out of the text widget okay but be
88:04 - inside the app bar widget and then call
88:06 - the property
88:08 - background color okay
88:11 - and then the background color takes a
88:14 - parameter called colors okay
88:18 - so now colors is an enum okay that
88:21 - has a collection of colors which is
88:23 - prefabricated with
88:25 - flutter and if you don't know what is an
88:28 - enum then that is
88:29 - not a problem as we will discuss about
88:32 - enum in great
88:33 - detail in our upcoming videos okay so
88:35 - for now let's just
88:37 - say that colors is a keyword and if we
88:40 - hit
88:40 - dot then you can see all the colors that
88:45 - this colors enum has or that means
88:48 - the colors which are fabricated by
88:50 - flutter
88:51 - okay so let's say i choose red
88:55 - okay so now my background color is red
88:57 - and now if i again
88:58 - save this and go back to my application
89:03 - you can see the app bar color has
89:05 - changed to red
89:09 - okay then the next thing over here
89:12 - is okay before moving to the next thing
89:15 - you can see that
89:16 - all the code we are writing the maximum
89:18 - code
89:19 - is written in a single line okay and it
89:21 - is not
89:22 - very much formatted okay so to format
89:25 - you can give spaces manually here and
89:28 - there
89:29 - give enters press enters here and there
89:31 - but there is also a shortcut
89:33 - we can use a keyboard binding that vs
89:36 - code provides us
89:37 - okay to so to know what is the keyboard
89:40 - binding we need to go to code
89:42 - preferences keyboard shortcuts
89:46 - and then over here if you look for
89:48 - format then you will find a command
89:50 - called format document and then the key
89:53 - binding over here
89:55 - is your shortcut key so for me it is
89:57 - control
89:59 - control command and f okay so i'll apply
90:02 - that
90:04 - in my main dot if i write
90:07 - control command f so you can see
90:10 - everything got formatted
90:12 - on its own okay so now the
90:15 - application looks more structured
90:18 - okay so now after the app bar
90:22 - we can also add a body
90:26 - okay so now this body is
90:29 - the space that is left after the
90:33 - app bar okay so the entire screen space
90:36 - excluding the app bar
90:38 - is our body okay so for now as we have
90:41 - seen in the prefabricated app we have
90:43 - our text and center okay and so to
90:46 - display anything in center we have a
90:48 - widget called
90:49 - center so we will call that widget and
90:52 - then this widget also takes
90:54 - some parameters and over here you can
90:56 - see
90:57 - it takes a child parameter so i will
90:59 - call this child parameter and what all
91:01 - values it
91:02 - takes you can say it takes a widget and
91:05 - that is the child widget okay so for now
91:07 - let's just
91:08 - pass a text and
91:11 - now you all know that the text takes a
91:14 - compulsory parameter that is a string
91:16 - that gets printed
91:17 - and let's give my name okay you can give
91:20 - your name
91:22 - so now our body has a center and it has
91:25 - a text called vishav kumar
91:27 - now again i'll format it and then save
91:30 - it
91:33 - okay so once saved you can see i have a
91:36 - text called
91:36 - rishabh kumar in the center okay so
91:40 - over here you can see this is called a
91:42 - widget tree
91:43 - that means i have a scaffold as my root
91:45 - widget
91:46 - it has two branches app bar and center
91:49 - the first branch app bar has
91:50 - another branch text okay and it has a
91:54 - one more branch as
91:55 - colors okay then the second branch that
91:58 - is body it has a
92:00 - child branch called text okay so this is
92:03 - how
92:03 - branches are increased and we design our
92:07 - app we design our application
92:10 - okay and now you can explore about more
92:13 - parameters more functionalities about
92:16 - app bar
92:17 - body and if you want to do so all you
92:18 - need to do is after the comma
92:21 - hit control space okay and then all the
92:24 - values that it takes will be available
92:26 - to you
92:27 - like the center takes height factor key
92:29 - and width factor
92:31 - and in the app bar if we hit control
92:34 - space you can see it takes an actions
92:37 - actions icon theme automatically
92:41 - imply leading bottom okay so these are
92:44 - some functions that you can if you will
92:46 - hover around then you will ever
92:48 - be able to know what it is about so
92:50 - suppose if we choose bottom
92:52 - and if you over hover around bottom so
92:54 - then you can see this widget appears
92:56 - across the bottom of the app bar
92:59 - okay so for now let's try adding an icon
93:02 - and see where it appears
93:03 - okay so to add an icon we again call the
93:06 - icon widget
93:08 - okay and then this icon widget also
93:10 - takes and compulsory parameter and that
93:13 - is an
93:13 - icon data okay so icon data is
93:17 - not something that we need to worry
93:19 - about that is present in
93:21 - icons enum okay so this is also and
93:25 - enum and we will study about enum for
93:28 - now enum is uh
93:29 - icons is just a keyword and if you hit
93:31 - enter you will be able to see a lot of
93:34 - icons that it has and for now let's just
93:36 - say
93:37 - add okay which is the plus sign as you
93:40 - can see over here
93:41 - okay and now it is still giving an error
93:45 - and if you peek on the problem it says
93:47 - the argument
93:48 - type icon can't be assigned to a
93:50 - parameter type per
93:52 - preferred size widget
93:56 - okay so this means that we can't give an
93:59 - icon to the bottom
94:00 - okay but that is not the problem over
94:02 - here i just wanted you to know
94:04 - how to explore all the other things that
94:08 - it has
94:08 - okay and so you can do that now okay and
94:11 - then we will add the
94:13 - floating action button and some
94:15 - functionality to this application in the
94:17 - next tutorial thank you
94:21 - welcome to programming knowledge so in
94:23 - this video we are going to discuss about
94:25 - two very important widgets
94:27 - okay which are not the ui elements but
94:30 - are very essential while designing the
94:32 - look
94:32 - of the screen okay and the first one is
94:35 - column
94:36 - and the basic use of column is that we
94:38 - can give
94:39 - more than one widgets to column and they
94:42 - all
94:42 - appear in a column that is one after
94:44 - another okay so to use a column first
94:46 - i'll remove this
94:48 - center that i have over here and instead
94:50 - of that i'll write column
94:52 - okay and it takes a children and which
94:56 - is you can see over here
94:57 - of type widgets okay so inside this we
95:00 - can give a list of widgets that we want
95:02 - to display on the screen
95:04 - okay as the body so the first one is a
95:08 - text okay
95:15 - okay so this is a text now along with
95:18 - text i also want to add a button so
95:21 - first i'll give a comma and
95:23 - the next widget will be a button so to
95:26 - add a button in flutter we write
95:28 - flat button okay and it takes a
95:31 - parameter
95:32 - child as in what will be are written
95:35 - or displayed on that button okay so for
95:38 - now i'll just give a text
95:40 - and the text says press
95:44 - or just simple press okay and now you
95:47 - can see it has a yellow line below where
95:49 - it is written flat button
95:51 - and if you hover around it you can see
95:54 - the parameter
95:55 - on pressed is required that means this
95:57 - flat button requires the on pressed
95:59 - parameters
96:01 - and on pressed basically decides the
96:04 - functionality what will happen when this
96:06 - flat button is pressed
96:08 - okay and it takes a function it takes a
96:11 - function okay
96:12 - so you can define a function over here
96:14 - and then call it from here or what i'll
96:16 - do is i'll create
96:17 - anonymous function like this and
96:21 - since i don't want to do a lot of
96:23 - functionality i'll just
96:24 - print it in the console that the button
96:27 - is pressed
96:28 - so for that i'll write print and then
96:31 - inside that
96:33 - pressed okay
96:36 - now when i'll first format it and then
96:39 - i'll save it
96:40 - so i would be able to see two things on
96:43 - my screen the first is a text with
96:45 - rishabh kumar
96:46 - and after that i'll have a flat button
96:49 - which is calling
96:50 - press okay so just wait for a moment for
96:54 - the sink to finish
96:56 - so once finished you can see i have a
96:59 - text called
96:59 - rishabh kumar and after that press
97:03 - so the background color of the button
97:05 - and the screen
97:06 - both are the same so we are not able to
97:09 - differentiate
97:10 - so i can add another property that this
97:12 - flat button provides and that is
97:15 - color okay so for color i told you there
97:18 - is a
97:18 - enum that is provided by flutter called
97:21 - colors and then i'll just simply write
97:23 - red okay again format it and save it
97:29 - so over here you can see i have a text
97:33 - called rishabh kumar and below that i
97:34 - have a button press
97:36 - which has red background and if i press
97:38 - on it
97:40 - you can see i am getting over here
97:43 - presses presses okay so the text over
97:46 - here was processed
97:47 - inside instead of pressed so i am
97:49 - getting the same in my console
97:51 - okay now i can also change that text
97:54 - color over here
97:55 - okay so for that i'll just write text
97:58 - color
97:59 - and the color can be again colors
98:03 - dot white okay i'll again save this
98:08 - so once done you can see my text is
98:12 - in white okay so i can keep on adding
98:16 - as many ui elements i want in this
98:18 - column okay so for instance i add
98:20 - another text
98:24 - okay and let's set this
98:28 - programming
98:32 - knowledge okay now if i again
98:35 - save this so below this flat button i'll
98:39 - get
98:39 - another text that says programming
98:42 - knowledge
98:42 - and the order which we in which we write
98:45 - the
98:46 - elements over here that will be the same
98:48 - order that we see on the screen
98:50 - okay that means first this text then
98:52 - this flat button and after that we'll
98:54 - have this text
98:56 - programming knowledge okay so now
99:00 - uh this is how we can add more than one
99:03 - elements in a column okay now suppose i
99:06 - don't want this column to be
99:08 - over here but instead i want it to be
99:11 - inside the
99:11 - center okay so then we have a
99:15 - parameter that this column takes and
99:17 - that is called
99:18 - main axis alignment okay and for the
99:22 - column the main axis
99:23 - is the vertical axis and it takes
99:26 - and it also has an enum that is main
99:29 - axis alignment
99:30 - okay and then if you enter dot you can
99:32 - see all the options
99:34 - and as my task is to display on center
99:36 - i'll just hit center and then if i save
99:38 - this i'll be able to see it in the
99:41 - center so now you can see it is in the
99:45 - center now if you want you can also try
99:49 - different types of main axis alignment
99:51 - that is in this enum
99:53 - so i'll again hit the dot and let's try
99:55 - end
99:56 - okay so now if i save this let's see
99:59 - what happens
100:02 - so you can see everything is at that
100:04 - tech at the
100:06 - end that is the bottom okay and then
100:09 - similarly you can also try something
100:11 - called
100:12 - start that will go at the start
100:16 - okay then we have space around that
100:18 - means it will take all the space
100:22 - so you can see the entire height has
100:25 - been
100:26 - covered by three widgets and basically
100:28 - two text and a
100:30 - button okay so this is called space
100:32 - around and then we also have space
100:34 - between so you can see the spaces are
100:40 - only between the
100:41 - elements okay that means below this
100:44 - programming knowledge we don't have any
100:46 - space and above this rish of kumar we
100:48 - don't have any space
100:50 - but the space is only between the
100:52 - elements
100:53 - okay so this is how we can play with the
100:56 - alignment of the columns
100:58 - for now i'll make it center
101:02 - okay and then comma so now the text will
101:05 - be in
101:06 - sent okay so now you can see the text is
101:08 - again in center but you can see it is
101:10 - only the
101:11 - vertical center and not the horizontal
101:14 - center
101:15 - okay so there are two ways to bring it
101:18 - in the exact center
101:19 - okay so as i told you the column has
101:22 - main axis alignment as
101:24 - vertical axis and the cross axis
101:27 - alignment is the horizontal axis so
101:30 - along with main access alignment you
101:32 - also have a cross
101:34 - axis alignment and over there you can
101:37 - write
101:37 - cross access alignment which is also in
101:39 - enum
101:40 - dot center so then again it will be in
101:43 - the exact center
101:45 - and the other way to do is to wrap this
101:48 - entire column by a center widget okay so
101:51 - you can do it manually by creating a
101:53 - center and
101:54 - in the place of child you will pass this
101:57 - whole column
101:58 - or easier method is to go to code
102:02 - preferences and keyboard shortcuts and
102:05 - in the shortcuts look for sent refractor
102:08 - okay so you will get a certain key
102:11 - binding for the refractor
102:13 - okay in my case it is ctrl shift r
102:16 - so if i press ctrl shift r i get the
102:18 - options
102:19 - wrap with widget wrap with center
102:21 - wrapped with column
102:23 - okay and similar to that so i'll just
102:25 - wrap
102:26 - with center okay and you can see it
102:28 - automatically adds a center and the
102:30 - child becomes the
102:32 - column and now if i'll save this i would
102:34 - be able to see
102:36 - the entire column in the center
102:39 - okay so here you go the everything is in
102:43 - the center
102:44 - okay so now similar to column we also
102:47 - have
102:48 - a row okay so for to demonstrate that
102:51 - i'll just
102:53 - copy all the children that i have over
102:55 - here
102:56 - okay
103:00 - and instead of a column
103:05 - okay i'll also need to remove this
103:10 - instead of a column i'll have a row
103:13 - okay so as you can understand by the
103:16 - name row
103:17 - adds one element after another towards
103:20 - the right means starting from left
103:22 - towards the right
103:23 - okay so ins in place of children if i
103:25 - again pass all those things
103:27 - i'll format it and save it so now i will
103:30 - be able to see all these things
103:32 - things one after another
103:35 - so now you can see we have a text over
103:38 - here
103:39 - and after that we have this button and
103:41 - then the programming knowledge text and
103:43 - if i again click on this press
103:45 - so the console is again logging presses
103:48 - means the functionality is fine and
103:52 - similarly over here also inside this row
103:54 - you have a main axis alignment
103:56 - and you know how to use it and a cross
103:59 - axis alignment
104:01 - okay and you can also wrap it with a
104:02 - center and it is already wrapped with a
104:05 - center so you can see it is already in
104:08 - the
104:08 - center according to the cross axis
104:10 - alignment because for the row the main
104:12 - axis alignment is the horizontal axis
104:15 - and the cross
104:16 - axis alignment is the vertical axis so
104:19 - as it is already inside center the cross
104:21 - axis alignment is
104:22 - automatically center okay and if i add
104:26 - main axis
104:27 - alignment main axis alignment
104:31 - as center then it will be in the exact
104:33 - center of the
104:35 - screen
104:38 - and once reloaded we can see the row is
104:41 - in the
104:42 - center okay and so this is how we
104:46 - add more than one elements in the screen
104:50 - okay so this was for the tutorial thank
104:52 - you
104:54 - welcome to programming knowledge so in
104:56 - this video we are going to
104:58 - add some functionality to our
105:00 - application
105:01 - because till now what we have done is we
105:04 - have just added ui elements and we have
105:06 - seen different ways to
105:07 - add multiple ui elements but our
105:10 - application is not functional
105:12 - okay so to add functionality let's say
105:16 - that
105:16 - instead of print presses i want to
105:20 - display a
105:21 - toast okay so the first thing that
105:24 - toast is not prefabricated in flutter we
105:27 - need to
105:28 - add the extension okay and the place
105:31 - where you can find
105:32 - all the flutter extension is this pair
105:35 - is this website pub dot dev
105:39 - and over here if you search for toast
105:42 - then you will
105:43 - find this toast 0.1.5
105:46 - and there are other extensions also but
105:48 - i prefer to use this one
105:51 - okay so now you can see over here it is
105:53 - written how to use and then the first
105:55 - thing is this
105:56 - toast colon and then
106:01 - sign then 0.1.5 this is basically the
106:04 - line to install this dependency
106:06 - in our project now in
106:10 - most of the extensions how to download
106:13 - is not written over here so you can also
106:15 - find it in the
106:16 - installing section okay so i will just
106:18 - copy it from here
106:23 - and as we discussed earlier we need to
106:26 - add all the extensions in our pub spec
106:29 - dot tml file
106:30 - so over there i'll add this file
106:34 - okay inside this dependencies
106:37 - section and at the same line we have
106:40 - this
106:41 - flutter written okay now if i save this
106:43 - it will automatically
106:46 - start getting the extension in our file
106:48 - in our
106:49 - application okay so after this
106:54 - now we can use that extension in our
106:57 - application so to use that extension
106:59 - again in my readme
107:01 - you can see the first thing that we need
107:03 - to do is we need to import
107:05 - this package so i'll just copy it from
107:08 - here
107:09 - and i'll paste it below this so now this
107:13 - file is inside our
107:17 - application and now to use the now to
107:20 - display our toast we write
107:22 - toast dot show and then the text
107:25 - that is message then the context
107:28 - and we have the context that is build
107:31 - context okay that
107:32 - we have in our every application okay
107:35 - then after that we have this
107:37 - duration then gravity then
107:40 - text color background color background
107:42 - radius and border
107:44 - okay so now you can see the background
107:46 - color has a default color of this
107:49 - so over here 0x stands for hexadecimal
107:52 - that means the code is in hexadecimal
107:55 - the last six digits stands for the color
107:58 - code
107:59 - and then the first two digits after x
108:02 - stands for opacity
108:05 - okay so now to display our toast we'll
108:09 - use this line so instead of console
108:12 - logging i'll write
108:17 - toast
108:20 - dot show and the message is
108:27 - toast to demo okay so now let's try
108:30 - running this
108:32 - okay so once the application starts
108:35 - running if you click on this
108:36 - press so instead of showing anything it
108:40 - is giving me a list of
108:41 - errors over here okay and the main error
108:44 - is
108:44 - unimplemented handling of missing static
108:47 - target
108:48 - okay so this means that we are trying to
108:53 - add functionality in a stateless widget
108:56 - class
108:56 - okay so that means that is because the
108:59 - basic functionality of stateless widget
109:01 - is
109:02 - to just create a static page okay that
109:05 - means
109:05 - if this page is created like this then
109:08 - we can't change it
109:09 - while the application is running okay
109:12 - and if you want to display a toast then
109:14 - that
109:14 - means the look of the page will change
109:17 - and the page will not be static and
109:19 - that will defy the functionality of
109:21 - stateless widget
109:23 - okay so to solve that problem we have
109:26 - another base class in our material dot
109:28 - dot
109:29 - and that is called state full widget
109:31 - okay so you can see stateless and
109:33 - stateful they both are contrary
109:35 - and so is their features so to create a
109:38 - stateful widget
109:39 - we just write stf or something like that
109:42 - and over here you get
109:44 - flutter stateful widget and then let's
109:46 - give this class a name so
109:48 - let's say my home app okay so now you
109:52 - can see a class my home map is created
109:54 - and it extends stateful widget then
109:57 - inside this we have my home app state
110:00 - that is the app state
110:02 - okay and it calls a method called create
110:04 - state then after that we have another
110:06 - class
110:07 - called my home app state and it extends
110:09 - state
110:10 - okay so this is the basic code that we
110:12 - need to write for
110:14 - every stateful widget and flutter and
110:17 - vs code helps us in writing this okay
110:20 - and if you want to know
110:22 - what what are the functionalities of
110:24 - these functions then you can simply
110:27 - go to flutter
110:31 - okay and open the first link
110:36 - and then over here go to docs
110:40 - okay so now instead of returning a
110:42 - container i want to return this
110:44 - scaffold that i have over here so i'll
110:47 - just
110:48 - cut it from here
110:52 - and paste it
110:55 - over here
111:01 - okay and now over here the home will be
111:04 - my this my home app class so i'll write
111:07 - my
111:08 - home app okay now i'll again format this
111:13 - and try running this okay instead of
111:16 - running i will
111:17 - reload this once reloaded you can see
111:21 - everything is
111:22 - still the same and now i'll remove this
111:25 - two texts
111:26 - okay just for now
111:31 - again run this okay so once the
111:35 - application starts running
111:37 - now if we click on press then we are
111:39 - able to see our toast
111:41 - so that means if we are inside a
111:43 - stateful widget we can change the
111:46 - state means the application is not
111:48 - static
111:49 - but it is suggested that when we don't
111:52 - need to change the state
111:53 - we should use state less widget okay
111:57 - so now let's explore this toast a bit
112:00 - so over here you can see the it also
112:03 - takes
112:04 - more parameters and the duration is
112:07 - toast
112:08 - dot length short that is the default
112:10 - parameter the gravity
112:11 - is toast dot back bottom that is also
112:14 - default
112:15 - and we can override it okay so for let's
112:18 - overwrite the duration to length long
112:21 - so i'll write
112:25 - duration toast
112:29 - dot length long
112:32 - and now if i save this so now the text
112:36 - will be
112:36 - now the toast will be displayed for a
112:38 - longer period of time
112:40 - and you can see that okay similarly i
112:43 - can also
112:45 - override the gravity so i'll write
112:48 - gravity toast
112:53 - dot center okay first format it
112:57 - then save it
113:01 - and now if we display the toast so it is
113:04 - in the center
113:05 - but as you can see we have kept
113:08 - the button also in center and we are
113:10 - also displaying the
113:11 - toast and center so that means according
113:14 - to convention they both
113:15 - should overlap but when the toast is
113:17 - being displayed it is
113:19 - above this flat button so this is
113:22 - because the toast is being displayed at
113:24 - the center of the entire screen
113:26 - and this press button is at the center
113:29 - of this
113:29 - scaffold part means the whole screen
113:32 - except the
113:34 - app bar okay so similarly there are
113:37 - other properties also that is
113:39 - background color and i can give it a
113:42 - different color
113:46 - let's say red
113:52 - so now the toast is in red i can also
113:55 - change it to different color means
113:57 - we can play around
114:03 - now the toast will means this color okay
114:08 - then we can also change the
114:09 - text color let's say
114:16 - colors dot black
114:24 - and now the text color is in black
114:28 - okay so this is the difference between
114:30 - stateless and stateful widget
114:33 - like when we don't have any
114:34 - functionality in our application
114:36 - so it is suggested to use a stateless
114:39 - widget but when we need to add some
114:40 - functionality then we should go for
114:43 - stateful widget okay i hope everything
114:46 - was clear
114:47 - thank you welcome to programming
114:50 - knowledge
114:50 - so in this tutorial we are going to
114:52 - discuss about text with chats
114:55 - so text widget is one of the most used
114:57 - widget and we
114:58 - ourself have been using it in two or
115:01 - three previous videos
115:02 - okay so today we will look deeper in
115:05 - text widget and see a few of the
115:07 - functionalities provided by the text
115:08 - widget
115:09 - okay so for that first i will remove
115:12 - this center
115:12 - from the body
115:16 - okay so i will just simply comment it
115:17 - out and then create another body
115:20 - okay it will be a center
115:24 - the center will have a text okay the
115:28 - centers
115:28 - child parameter will have a text
115:32 - and the text says
115:36 - programming knowledge okay now if i
115:40 - save this i'll get a text
115:43 - programming knowledge in the center
115:47 - okay you can see that okay now after
115:50 - this the
115:50 - next thing that we need to know is that
115:52 - we can constrain the number of
115:55 - lines that our text will be displayed
115:57 - okay like
115:58 - if i only want to display three lines
116:00 - then i have a property called max lines
116:03 - okay and if you hover around it you can
116:05 - see it takes an integer value so let's
116:07 - say i only want to display three lines
116:09 - okay and now to break the line you can
116:13 - use
116:13 - backslash n okay so what i am going to
116:16 - do is i am going to
116:18 - display programming knowledge four times
116:20 - in four different lines
116:21 - okay so according to the concept of this
116:25 - max lines
116:26 - only three lines should be visible so
116:28 - let's check that
116:30 - okay
116:35 - okay so now i'll first format this and
116:37 - then save this
116:42 - okay so now you can see instead of
116:46 - printing five lines it is only showing
116:48 - three lines so this is how you can
116:50 - constrain the number of lines of your
116:53 - text
116:54 - okay then now i i'll bring it back to
116:56 - single line
116:57 - okay just programming knowledge and the
116:59 - next thing that we are going to discuss
117:01 - is
117:02 - style that means how to apply styling to
117:04 - our text widget so
117:05 - there is a named parameter called style
117:08 - and it takes a
117:10 - text style widget okay so i'll write a
117:12 - text
117:13 - style and now it also has some
117:16 - properties so the first property as you
117:18 - can see is
117:19 - background okay so background takes a
117:22 - paint very
117:22 - paint widget and till now we have not
117:25 - discussed about paint so i will come
117:27 - back to that later then we have
117:29 - background color and you know we have an
117:32 - enum called colors then i can simply
117:34 - give
117:35 - red now if i save this the
117:38 - background of the text will be in red
117:42 - and you can see that okay similarly we
117:46 - have another property called
117:49 - text color no not the text color just
117:53 - simply color
117:54 - and then i can give colors
117:58 - dot white let's see that okay then again
118:02 - format it and save it
118:09 - so now you can see the text is in white
118:12 - color
118:13 - okay now the next property that we have
118:16 - over here is
118:17 - font weight okay font to it and that
118:21 - means the
118:22 - size so if i give no sorry the font to
118:25 - it means
118:25 - the styling like bold italic
118:29 - and stuff like that so there is another
118:30 - enum called font weight
118:33 - okay and if i write font weight dot bold
118:36 - so now my text will be in bold
118:38 - okay now once i save this
118:41 - so you can see the text has become a bit
118:44 - bold okay now after this you have font
118:48 - size
118:51 - okay and you can give the size of the
118:54 - font
118:55 - of the current text widget okay so i'll
118:57 - give 20
118:58 - let's see okay so now you can see that
119:01 - text has become a little bit larger okay
119:03 - you can increase
119:05 - the font size a little bit more so that
119:08 - the change is
119:08 - significant and you can observe it
119:13 - okay so now you can see that text has
119:15 - become bigger
119:17 - now the next property that we have is
119:19 - font style
119:22 - and it takes font style dot italic
119:26 - ok so suppose if we want to make the
119:28 - text italic
119:33 - and you can see our text has become
119:35 - italic
119:37 - okay so these were the basic about
119:40 - text and there are other properties also
119:43 - like
119:44 - overflow text align and there are many
119:48 - other soft wrap
119:49 - struct style text align and these are
119:53 - not important right now because once we
119:55 - know about containers and paddings then
119:58 - these properties will make more sense so
120:00 - once we cover those we will surely come
120:02 - back to this
120:04 - okay so now another type of text
120:07 - that we use and that is used majorly for
120:10 - styling
120:12 - that is called rich text okay so i will
120:14 - again comment this out
120:18 - i'll have another body okay so first
120:22 - center center's
120:25 - child will be rich text
120:28 - okay then rich text takes a text
120:32 - okay and that text should take another
120:34 - widget and that is
120:36 - text span okay
120:39 - now text span takes a parameter called
120:42 - text okay which as the name suggests
120:46 - is a text okay and then one another
120:49 - thing
120:49 - that is style then again we have
120:53 - text style we discussed about it just
120:56 - now
120:57 - okay and then i give a color
121:01 - let's say colors dot
121:05 - black okay now i need to
121:09 - give another closing bracket over here
121:11 - now i'll format it
121:12 - and save it
121:16 - okay so you can see we have a text over
121:18 - here called
121:19 - programming okay now the basic
121:24 - use of rich text is to provide a
121:27 - different
121:28 - type of styling to different words in a
121:30 - string or in a sentence
121:32 - okay so over here the first word is
121:34 - programming and it is
121:36 - in text color black and if you want you
121:39 - can also change the color
121:41 - you can give it a size
121:45 - let's say 15 okay so this is
121:49 - one word and now if you want to give
121:51 - another styling to
121:53 - the next word then you have another
121:55 - property called children
121:57 - okay and it should also be of type text
122:00 - span so i'll
122:02 - you define it over here then it takes a
122:04 - list
122:05 - okay now as we have defined it to be
122:08 - text span it only takes
122:10 - text spans widget so i'll write text
122:13 - span
122:14 - again inside a text span we have our
122:16 - text
122:18 - okay so text will again take a text
122:21 - okay and now we can provide different
122:23 - styling to it okay so for now i'll just
122:25 - simply call
122:26 - copy this paste it over here and change
122:30 - the size to let's say
122:32 - 30 okay now once i save this
122:35 - you will be able to understand what is
122:37 - the difference
122:42 - okay so now you can see we have two
122:44 - different words but a single text
122:47 - okay now if i want i can also change
122:49 - this color
122:52 - okay and i should give a space over here
122:55 - so that it becomes
122:56 - more understandable
123:01 - and now you can see we have programming
123:03 - in
123:04 - [Music]
123:05 - this color and which is in a smaller
123:08 - size and knowledge in red color with
123:09 - with a bigger size okay and similarly
123:12 - you can add
123:13 - as many text spans as you want over here
123:15 - so i'll
123:16 - add another text span
123:21 - the text is let's say
123:25 - flutter okay and this should also have a
123:29 - space
123:30 - or whatever you like then again a style
123:36 - so the style will again be text style
123:40 - color colors
123:44 - dot let's say green
123:47 - okay and then we have font size of
123:54 - let's say 20 okay
123:57 - now i'll format all these okay i need to
123:59 - give a comma over here
124:03 - there is some error okay i missed a
124:07 - closing bracket over here
124:10 - now i will save this and then you can
124:13 - see another
124:14 - text that is flutter and it is in green
124:17 - color and it has a
124:18 - different size okay so you can see we
124:21 - have three different words but they are
124:23 - inside a single widget that is the rich
124:26 - text widget and they act as a single
124:28 - string
124:31 - okay so it's a real life uses in places
124:34 - like this
124:35 - like where you have a single text but a
124:38 - part of
124:38 - it is over here acts as a redirecting
124:41 - link
124:42 - okay like in our flutter application if
124:44 - i would click on this then i would open
124:46 - an
124:46 - another page okay and the rest of the
124:49 - text is just
124:50 - simple text and no changes are there on
124:52 - that
124:53 - okay so in such kind of scenarios rich
124:56 - text come to play
124:58 - okay and now another thing that i also
125:00 - want to cover in this video is like how
125:02 - to create
125:03 - uh how to separate widgets in different
125:07 - dart files and use it in another dart
125:09 - file okay so for that first of all i'll
125:11 - create a new dart file
125:13 - i'll call it my
125:16 - home underscore app dot
125:20 - dot okay and now inside this my home
125:25 - app dot dot i want this class to be
125:27 - there
125:28 - okay so i'll just copy everything or cut
125:31 - everything and paste it over here
125:35 - so now it is giving errors because i
125:37 - need to import material pack
125:39 - material dot dot
125:45 - okay now i will save this
125:48 - and over here you can see this my home
125:51 - app
125:52 - is giving an error because this file
125:54 - doesn't know what is my home app okay so
125:56 - now we need to add this my home app dot
125:59 - dot in our main dot dot file okay so
126:02 - for that again i will write import
126:05 - then dot n slash that means to
126:09 - look in the current directory and then
126:11 - over here you can see as the suggestion
126:13 - says my home app.not okay so now inside
126:16 - my home
126:17 - app dot dot we had this my home
126:20 - app so now over here the error is gone
126:24 - and now if i
126:25 - save and run this no change will be
126:27 - there but
126:28 - now what we can say is our main dot dot
126:31 - is a bit more cleaner
126:33 - okay so you can see the same thing okay
126:36 - so that was for the video thank you
126:40 - welcome to programming knowledge so in
126:42 - this tutorial we are going
126:44 - to discuss about buttons so button is a
126:47 - very basic yet very important ui widget
126:50 - that flutter provides us okay so the
126:53 - first thing i will comment this
126:55 - body out okay
127:00 - then next i'll add another body okay
127:04 - uh center and
127:07 - child okay so now there are different
127:10 - types of buttons okay
127:12 - and we will discuss all of them and the
127:14 - first
127:15 - type of button is flat button okay so
127:18 - capital f a
127:19 - flat button okay and it takes a child
127:23 - okay so child is the widget that will
127:26 - appear
127:27 - on the button okay so you can give any
127:29 - widget okay so let's try with
127:31 - our text okay and the text says
127:35 - press me okay and if i save this i
127:38 - should be able to see a
127:40 - button that says press me okay
127:43 - now it is not restricted to text as i
127:46 - told it takes any widget i can even give
127:48 - an
127:49 - icon
127:52 - okay and then i can has an icons enum
127:56 - okay and then if you give a hit a dot
127:58 - then you can see all the icons that
128:00 - are already available okay for now i'll
128:03 - just give add that is a plus sign
128:05 - okay and now if i save this i would be
128:08 - able to see a flat button that has an
128:10 - icon
128:11 - plus okay so you can see that
128:14 - okay now you can see this flat flat
128:17 - button has a yellow
128:19 - underlining okay and if you hover around
128:21 - it you can
128:22 - see one thing is missing and that is on
128:25 - pressed
128:27 - okay because over here you can see it
128:30 - is written that the parameter on pressed
128:32 - is required
128:33 - okay so let's provide that so basically
128:37 - on
128:37 - pressed is the takes a function
128:41 - that will be executed when the button is
128:44 - pressed okay so you can see it takes a
128:46 - function that is void that means it
128:47 - doesn't return anything
128:49 - and it and the function is run when the
128:52 - button is pressed okay so for now let's
128:54 - just
128:55 - create an anonymous function a one liner
128:58 - function and
128:59 - i'll simply print
129:04 - button pressed okay so that means
129:06 - whenever i'll press on this button
129:08 - button pressed will be written in my
129:10 - console okay so let's try this
129:16 - so now if i click on this plus
129:19 - over here you can see button pressed is
129:22 - being logged in my console
129:24 - if i go on pressing it will go on adding
129:26 - okay so this is an
129:28 - on pressed method okay so now it is not
129:31 - necessary
129:32 - to have a anonymous function like this
129:35 - okay
129:36 - you can have a function in over here
129:38 - okay so let us say i
129:40 - call it void
129:44 - button action okay that means the action
129:47 - that
129:47 - button will do and then simply over here
129:50 - i write
129:51 - press print
129:55 - button pressed okay and
129:58 - now over here instead of calling this
130:02 - i can call that function okay so button
130:06 - action okay and we don't need to give a
130:09 - parenthesis because we are not
130:11 - actually calling that function but we
130:13 - are pointing to that function
130:15 - okay so then again hit save and now
130:19 - again we should see the same action
130:21 - okay so now if i hit plus so you can see
130:26 - it is again giving button pressed but
130:28 - along with that it is also giving some
130:30 - other logs okay so that is not our
130:33 - concern
130:34 - so you can see as many times i press the
130:37 - button that many times
130:38 - uh our console is being logged with
130:42 - button console okay so this you can use
130:45 - this way also okay now the problem
130:48 - occurs when you want to pass a certain
130:50 - parameter that means this function
130:52 - accepts a parameter let's say string
130:56 - name okay and it logs
131:01 - the name also okay that means name is
131:03 - required
131:04 - but over here since you are pointing you
131:06 - don't give a parenthesis
131:09 - okay and hence you can't pass
131:12 - a value okay so then what you need to do
131:15 - is you need to again
131:17 - click like the write like this okay and
131:20 - anonymous function
131:23 - and then over here you can pass the
131:25 - parameter okay so for now let's say i am
131:27 - passing
131:29 - reshaft okay now if i
131:32 - save this everything should work fine
131:35 - but instead of console logging button
131:37 - pressed it should log
131:38 - button pressed reshaft okay so let's try
131:41 - that
131:44 - and you can see button pressed reshave
131:46 - is being
131:47 - locked okay so these were the three
131:50 - methods in which you can
131:53 - write the functionality for this on
131:55 - pressed which takes a function
131:57 - okay so i'll bring it back to the
132:02 - original means the first one that we
132:04 - have written okay
132:06 - over here just
132:10 - print
132:14 - button pressed okay now
132:17 - the next thing that we are going to
132:19 - discuss is the color
132:20 - okay so color then as you know colors
132:24 - enum is there present in flutter and it
132:26 - has a certain
132:28 - colors over here you can select any one
132:30 - of them i am going to use red
132:32 - okay so now if i save this
132:36 - my button should be red in color okay
132:39 - and you can see that
132:42 - okay now similarly i have a parameter
132:45 - called colors
132:46 - brightness and it also has an enum
132:49 - brightness
132:50 - and brightness has two values dark and
132:53 - light
132:54 - okay so dark means that the button would
132:56 - be visible even in a dark surrounding
132:58 - okay
132:59 - so now if i run this you should see how
133:02 - the
133:03 - changes happen okay so you can
133:07 - see the difference that the plus sign
133:09 - has
133:10 - become white instead of black okay and
133:12 - that is
133:13 - understandable when you have a black
133:15 - background white color is significant
133:17 - means you can point it out okay so that
133:20 - is what has happened over here and
133:22 - similarly if you change it to light
133:24 - that means the theming of that button
133:26 - will change
133:28 - for a light background okay and then
133:31 - you can see the button color is black
133:33 - that means if you have a bright
133:34 - background then this plus icon is
133:36 - noticeable
133:37 - okay and so is the case over here
133:42 - okay now the next thing that we have is
133:45 - a
133:46 - text color okay no now suppose if we
133:48 - have a text
133:49 - till now we don't have a text but if we
133:51 - have a text we can also provide some
133:53 - colors over here
133:54 - okay and you know how to add a text
133:56 - instead of passing icon as the child we
133:59 - can pass
134:00 - text as the child okay now the
134:03 - next feature that we are going to
134:05 - discuss about is enabling the button
134:08 - okay so like sometimes you might not
134:10 - want the button to be enabled
134:12 - at once but after some time it should be
134:14 - enabled
134:15 - okay so in that cases you need to
134:17 - disable the button
134:18 - okay so earlier we used to have an
134:21 - enabled parameter that used to take true
134:24 - or false means true for the button is
134:26 - enabled
134:27 - false for the button is disabled okay
134:29 - but in the latest
134:30 - flutter update it has been removed okay
134:33 - so the way around is
134:37 - instead of writing anything any function
134:39 - for onpressed if you write
134:41 - null then that means our button has
134:44 - become
134:45 - disabled okay so now if you save and run
134:49 - this you will not see any significant
134:51 - change okay but if we click on this you
134:54 - can see nothing is being logged in my
134:56 - console that means the button is
134:58 - disabled
134:59 - okay so now you can similarly add a
135:02 - disabled color
135:03 - like we had a color that was for when
135:06 - the button was enabled
135:07 - so disabled color is when the button is
135:10 - disabled
135:11 - so color start let's say this color
135:15 - okay so now since our button is disabled
135:18 - over here we should see
135:19 - this color and you can see that
135:23 - okay and similarly we have a disabled
135:26 - text color when we have a text as our
135:28 - child
135:29 - okay you can use that and then
135:32 - the last property
135:36 - in flat button is on long pressed okay
135:39 - so
135:39 - on pressed when you simply click on the
135:41 - button and on long pressed
135:43 - when you keep on when you click and hold
135:47 - okay so let's see what this this
135:50 - long press takes and it also takes a
135:52 - function that is
135:54 - non-return type okay that means it
135:56 - doesn't return anything so again i'll
135:57 - create an anonymous function
136:00 - and simply i'll print
136:06 - button is pressed
136:09 - for long time okay now let's see this in
136:14 - action
136:14 - so now if i press and hold the button
136:17 - this
136:18 - text should be logged in my console okay
136:20 - so now if i
136:22 - press and hold you can see it is showing
136:25 - button is pressed for long time
136:27 - again if i press and hold same is the
136:31 - log in the console and now if i try just
136:34 - clicking it so it is not working and
136:36 - because over here we have made onpress
136:38 - test
136:39 - null okay so i'll change it back to what
136:41 - it was
136:44 - print
136:51 - button pressed now if we run this you
136:54 - can see if i click on it then the log
136:56 - says button pressed and if i click and
136:59 - hold
136:59 - it says button is pressed for long time
137:02 - so this is how we add functionality
137:04 - to our button if you want you can
137:07 - display a toast over here call some
137:09 - function that does some
137:11 - complex calculations you can do whatever
137:13 - you want
137:14 - means all the functionality part you can
137:16 - add in this on pressed or on long
137:18 - pressed
137:18 - as ever you want your button to
137:22 - react welcome to programming knowledge
137:26 - so in this video we are going to
137:28 - continue our discussion on buttons
137:30 - okay so the first thing i'll comment
137:33 - this out
137:34 - this is about flat button which we
137:36 - discussed in our
137:38 - previous video okay so the next type of
137:41 - button
137:42 - that we are going to discuss is raised
137:44 - button okay so first i'll create our
137:46 - center
137:47 - and the child will be a raised button
137:51 - okay so the basic difference
137:55 - between flat button and rest button is
137:57 - that raised button looks a little bit
138:00 - elevated like floating on screen and
138:02 - flat button is infused on screen
138:04 - okay so if you go to stack overflow you
138:08 - can find a very good example over here
138:11 - you can see this buttons are
138:13 - bulging out over here and these are
138:16 - basically raised buttons
138:18 - okay and then if you scroll down you can
138:20 - see
138:21 - over here the button seems to be infused
138:24 - like there is
138:26 - no difference between the button
138:28 - background and
138:29 - the rest of the body of the alert dialog
138:32 - so
138:33 - the button seems to be infused in the
138:35 - dialog and such type of buttons are
138:38 - flat button okay so
138:42 - so back in our project
138:45 - over here we have a rest button okay and
138:47 - the rest button also takes an
138:49 - on pressed okay on pressed is compulsory
138:52 - for every button
138:53 - okay then over here also i'll add a
138:55 - simple anonymous function
138:56 - that says button
139:01 - pressed okay and then i also need to
139:04 - give an
139:06 - child okay so again you can give any
139:09 - text widget i am giving an
139:11 - icon from the icon cinema and the icon
139:14 - will be add
139:16 - okay and you can see there is an error
139:18 - over here and that is because we are
139:19 - missing a
139:20 - parenthesis okay now i'll format it and
139:22 - save it so now you should be able to see
139:25 - a
139:25 - button that has a plus icon on it
139:29 - and you can see that and if you look
139:31 - closely you can see
139:32 - there's a little bit shadow at the
139:35 - bottom and on the
139:38 - left side so that means the button is
139:41 - a little bit elevated from the screen
139:43 - okay so that is the z
139:44 - axis we have the shadow in the z axis
139:47 - representing that the button is
139:49 - a little bit elevated okay then we can
139:51 - apply the same properties that we have
139:53 - in our raised button like
139:55 - color okay so the colors is again
140:00 - red so now the button will be in red so
140:03 - an
140:03 - elevated button in red will be visible
140:06 - you can see that
140:07 - okay then similarly we have the
140:10 - color brightness okay then again it is
140:13 - let's say
140:15 - brightness
140:19 - dot dark okay
140:22 - and the rest of the features also like a
140:25 - disabled color and on long press
140:27 - okay so now the another property that we
140:31 - have over here is
140:32 - elevation okay elevation so that means
140:36 - how much
140:37 - shadow will be there that means how much
140:39 - will be the length of the z-axis so
140:41 - let's say if i give
140:43 - 10 so now you can see there's a little
140:46 - bit shadow now if i run this the shadow
140:48 - would be a little bit
140:50 - thicker okay so let's see that
140:53 - and you can see the shadow has become a
140:56 - little bit
140:56 - thicker and it is more significant now
140:59 - okay so this says
141:01 - that the button is a little bit raised
141:03 - and this
141:04 - actually over here acts as the shadow
141:08 - okay and now over here if i make this
141:11 - null
141:12 - the on pressed function as null so then
141:15 - let's see what is the
141:16 - difference like in flat button if we
141:18 - were making it null so
141:20 - no difference in the button was visible
141:23 - just the functionality was not there
141:25 - okay and that is because
141:26 - we have changed it to null but over here
141:28 - since we are making it null that means
141:30 - we are making the raised button disabled
141:33 - you can see the color automatically
141:36 - changes
141:37 - to a disabled type of thing okay and if
141:40 - you press then
141:41 - the functionality is also not there
141:44 - okay so now you can even try adding some
141:49 - disabled color okay so suppose if the
141:52 - button is
141:52 - disabled then the disabled color is
141:55 - let's say
141:56 - this okay so now if the since the button
141:59 - is disabled
142:00 - our color will be this okay and so now
142:03 - you can
142:03 - see the difference okay so this was
142:07 - about
142:07 - rest button and there are particular
142:09 - scenarios where we need
142:11 - flat button and we need rest button okay
142:14 - so you know
142:14 - where to use what okay
142:17 - now the next type of button that we are
142:20 - going to
142:20 - discuss is outline button
142:24 - okay so first things first
142:29 - i'll create a body a
142:32 - center okay and the center has a
142:36 - child and the child is outline button so
142:39 - as the name suggests this button doesn't
142:41 - have any background it just have a
142:43 - has an outline okay so first of all on
142:46 - pressed
142:47 - and on pressed i'll create an anonymous
142:49 - function
142:50 - that simply prints in my console
142:56 - button pressed okay and it has a
143:01 - child okay that is again
143:04 - an icons so that all the buttons have
143:07 - the same icon
143:08 - like all the buttons that we have
143:10 - discussed till now
143:11 - icons dot add okay over here
143:14 - it will only be icon and not icons and
143:18 - now if you save this you should be able
143:19 - to see an button that only has an
143:22 - outline and the background will be same
143:23 - as the
143:25 - entire screen and you can see that this
143:27 - is our button
143:29 - and it has a boundary okay so this is
143:31 - the default
143:33 - width and height of every button you can
143:35 - change the width and height by using a
143:37 - container and we have not
143:39 - studied about container but we will okay
143:41 - so if i press you can see button pressed
143:43 - so everything is working
143:45 - fine now the next feature that we have
143:49 - in this
143:50 - outline button is first let's format
143:52 - this
143:53 - okay the next feature is border okay so
143:56 - in
143:56 - an outline button the most significant
143:58 - part is the border
143:59 - so we have a property a parameter called
144:02 - border side
144:03 - and it takes a border side widget
144:07 - okay and it is used for designing the
144:08 - border okay so basically this border
144:11 - side is used for all the four sides like
144:14 - in general cases when you give a border
144:18 - to something then you need to give four
144:19 - borders for
144:20 - top bottom right and left but since it
144:23 - is
144:24 - an outline button and in button we want
144:26 - to have the same border throughout so
144:29 - a single border side will only be
144:31 - applied to all the four
144:32 - sides okay so border side takes a color
144:36 - okay that is the color of the border so
144:38 - let's say i give
144:40 - red okay so now you can see the color is
144:42 - something grayish
144:44 - now if i save this the border should be
144:46 - in red color
144:48 - okay and you can see that
144:51 - over here the border is in red color
144:55 - now the next property is width
144:58 - okay that means the border width and it
145:01 - takes a
145:03 - uh i think double yes it takes a double
145:05 - value and the default width is
145:07 - one okay so if i make it to 5
145:11 - 0.0 then it should then the border
145:14 - should be a little bit
145:15 - thick now okay so and you can see that
145:19 - okay so the border is a little bit thick
145:23 - now the next thing that we have is a
145:26 - style okay so style is basically just if
145:30 - you
145:30 - don't want to show the border so if you
145:32 - click on border style none
145:34 - the border will disappear and border
145:36 - style solid that is the default type
145:38 - means the borders
145:39 - border will be there okay so border is
145:42 - there so i'll try
145:43 - border style dot none and now my border
145:46 - should be
145:48 - gone okay so there's some error i'm
145:50 - missing a parenthesis over
145:52 - here okay again i'll format it and save
145:54 - it
145:56 - and now you can see the border is gone
145:59 - and to bring the border back i'll simply
146:01 - just
146:02 - remove this or you can give it border
146:04 - solid
146:06 - so that would also be fine and this is
146:09 - our
146:12 - outline button now over here also if you
146:14 - want you can add
146:15 - on long pressed and all the other
146:17 - functionalities all the other things
146:19 - that we have seen in
146:21 - flat button and the same goes for raised
146:23 - button all the
146:25 - parameters that we have seen in the flat
146:28 - button can be applied in both rest
146:30 - button
146:30 - and border outline button okay
146:34 - thank you welcome to programming
146:37 - knowledge
146:38 - so in this video we are going to discuss
146:40 - about icon button
146:42 - okay so as the name suggests icon button
146:44 - is a button that has an
146:46 - icon on it okay so first i'll
146:49 - comment this center out
146:52 - okay then we'll create another body
146:57 - that is a has a center okay and the
147:00 - child of the center will be
147:03 - uh icon button okay
147:06 - so in icon button the two
147:09 - important things are icon and the on
147:12 - pressed method okay
147:14 - so first i can end icon takes an icon
147:17 - widget
147:17 - okay and then inside i can we have an
147:21 - icons in them and if you hit a dot then
147:24 - you could
147:25 - see all the available icons okay so i'll
147:28 - simply go for
147:30 - add okay so now if you save this
147:34 - you can see a plus on the screen
147:37 - okay and now you can see the yellow line
147:40 - persists
147:41 - because i told there is two necessary
147:44 - things that is the icon
147:46 - and the on pressed
147:50 - function okay so for now i it will do
147:53 - simply print my print in the console
147:56 - print
148:02 - button pressed okay i'll format it and
148:05 - save it
148:07 - okay so now if i click on this you can
148:10 - see it is being locked in my
148:12 - console over here okay
148:15 - so now like all the other different
148:18 - types of button it
148:19 - also has a color okay and the color over
148:22 - here is for the icon
148:24 - and not for the background okay so color
148:26 - takes a
148:27 - colors enum uh color which we can get
148:31 - from color cinema and for now i'll give
148:33 - it red
148:34 - and now i should see my icon in
148:37 - red okay and then you can also
148:42 - disable it and
148:45 - give it any another
148:48 - disabled color also okay if you like
148:54 - something like that okay
148:57 - so then the next thing that we have over
149:00 - here is icon size okay and as you can
149:02 - see it takes a
149:04 - double value and if you don't give it
149:06 - then the default value is
149:08 - 24 okay so i'll make it 40.0
149:13 - and now we should see the icon size
149:17 - has increased okay now the next
149:20 - thing is splash color okay so splash
149:23 - color is the color that will be
149:25 - that will appear when we press the
149:28 - button okay so
149:30 - again i'll give colors dot let's say
149:32 - some other color green
149:35 - okay so now let's see the difference now
149:38 - you can see
149:39 - if i hold this green color is there okay
149:42 - green color comes in the background
149:45 - okay so this was one thing then
149:50 - there's a pile padding okay and if you
149:53 - don't give the padding then also there
149:55 - is a default padding of
149:57 - eight from all sides okay so
150:00 - as you can see over here padding takes
150:03 - an
150:04 - edge in sets type okay so i'll write
150:09 - edge in sets okay now it has a few
150:12 - variations
150:14 - okay dot all for all the four sides
150:17 - then it has symmetric that is horizontal
150:19 - and vertical and then
150:21 - only that is top bottom right and left
150:24 - okay we generally use
150:25 - these three okay so for now i will go
150:28 - with
150:28 - all okay and i'll change the value from
150:31 - 8 to let's say a significant change will
150:33 - be
150:34 - 20.0 okay so now let's see
150:37 - now if we press it the circle
150:40 - should be larger okay and you can see
150:44 - that okay so now the next thing that we
150:47 - need to know about icon button is
150:50 - tool tip okay so this is
150:53 - this actually takes a string that
150:55 - describes the functionality of this
150:57 - button
150:58 - okay because this button doesn't have a
151:01 - text
151:02 - so sometimes the end user might not know
151:04 - the use of
151:05 - it okay so this helps to know what that
151:09 - button is used for okay so i'll give a
151:11 - string
151:13 - us say
151:19 - description of the button okay so now if
151:22 - we save this
151:23 - okay and if the user doesn't know what
151:26 - this icon is for so if we press
151:28 - and hold then you can see this toast
151:31 - type of thing appears okay and it has
151:33 - the tool tip written on it
151:35 - okay so in this way the end user will
151:38 - know what that button is
151:40 - there for okay so now
151:43 - over here you can see inside this icon
151:46 - button if i try adding some color
151:48 - so it is not there okay some background
151:52 - color
151:54 - i didn't mean color but background color
151:56 - okay so
151:57 - any background color or feature is not
151:59 - there okay so
152:00 - generally uh icon buttons don't support
152:04 - specifying a background color or other
152:06 - background decorations
152:08 - because typically the icon is just
152:10 - displayed on top of
152:11 - parents widget background okay
152:14 - so if you want to add a background or a
152:17 - background color
152:18 - so out of many ways to do so we will
152:20 - only discuss about the method
152:22 - discussed in the flutter docs and that
152:25 - is to use a
152:26 - ink widget okay so i'll comment this
152:29 - child out for now okay
152:32 - i'm sorry i'll comment this out okay
152:35 - then this center takes another child
152:38 - and the child is a ink widget okay
152:41 - so ink is basically a convenience widget
152:43 - it is generally used for designing
152:45 - purpose okay
152:46 - so we'll see a little bit about ink also
152:49 - in this video
152:50 - okay so first to the child and the child
152:53 - is
152:55 - icon okay sorry an icon button
153:01 - then two important things i can so i'll
153:03 - give and i can
153:06 - of let's say android icons dot
153:10 - android and the next important thing is
153:15 - on pressed before now it simply prints
153:19 - the console
153:24 - button pressed okay now i'll format it
153:26 - and
153:27 - save it and there will be no significant
153:29 - change just the logo changed because i
153:32 - have used
153:33 - icons dot android over here so the
153:35 - android icon is appearing
153:38 - okay so now to add the background color
153:41 - this ink widget takes another uh
153:44 - parameter that is
153:45 - decoration okay and a decoration
153:48 - takes a decoration type widget okay so
153:52 - decoration is the collective widget and
153:55 - it has
153:55 - many sub widgets inside it like box
153:58 - decoration
153:59 - image decoration and we will discuss
154:01 - about all of them
154:02 - okay for now the most useful over here
154:05 - would be a
154:06 - shape decoration okay because our main
154:10 - objective is to give a circular shape
154:12 - and add background color to it
154:14 - okay so shape decoration now as it is a
154:18 - shape decoration a
154:19 - shape becomes necessary and we want the
154:22 - button to be circular let's see
154:24 - so i will write circle border
154:30 - okay and then it takes no parameter and
154:32 - then the main part
154:34 - to add a color and let's say i add color
154:38 - blue okay now i'll format it and save it
154:43 - so now a blue color
154:45 - should be yes you can see that okay so
154:49 - like this you can
154:50 - add a background color to your icon
154:52 - buttons okay
154:54 - so now since you are using an ink you
154:56 - can do
154:57 - many other things also like you can give
154:59 - it a height
155:01 - okay you can also give it a
155:04 - width and you can also give it a color
155:06 - so you can see
155:08 - if i give colors dot
155:11 - blue over here instead of giving it
155:13 - inside the shape decoration so
155:16 - then now it will give me an error okay
155:18 - so if i try saving this
155:20 - and you can see the compiler has thrown
155:23 - error over here
155:24 - and that is because in flutter whenever
155:27 - we use that decoration
155:29 - then we can't give color outside the
155:32 - decoration okay that means
155:33 - in this ink if we are using the
155:35 - decoration then this color should be
155:38 - inside this decoration okay if we
155:40 - might not be using this decoration and
155:43 - then we give color then that is not a
155:45 - problem
155:46 - but if we are using decoration then the
155:48 - color should be inside decoration and
155:50 - not outside the decoration okay just
155:53 - wait for the
155:54 - build to finish okay and then you can
155:56 - see it
155:57 - is an icon and a square
156:01 - type of box okay so this is the default
156:05 - shape that is a square and now you can
156:07 - apply
156:08 - those height and width and see the
156:09 - changes so this was about
156:11 - icon buttons thank you
156:14 - welcome to programming knowledge so in
156:17 - this video we are going to discuss about
156:19 - the last
156:20 - type of button and that is floating
156:22 - action button
156:24 - okay so to add a floating action button
156:27 - after
156:27 - the body we have another named
156:30 - argument that is floating
156:34 - action button and it takes a floating
156:38 - action button with chat
156:39 - okay and it has a child
156:43 - okay and the child also takes a widget
156:45 - and for now i'll just give an
156:47 - icon i can say i can add
156:51 - and as it is a button it also needs an
156:54 - on pressed method and
156:55 - for now i'll simply print
156:58 - in my console floating action button
157:02 - pressed okay this should be inside
157:06 - quotes
157:11 - okay so now first i'll format
157:14 - it and then if i run i should be able to
157:18 - see a floating action button on my
157:20 - screen
157:21 - okay and you can see that the floating
157:23 - action button with the plus icon
157:25 - appears at the bottom right of the
157:28 - screen and that is the
157:30 - place where the floating action button
157:33 - is
157:33 - placed in android and as well as in
157:36 - ios okay so now this
157:40 - also has all the same functionalities
157:43 - like other buttons that is it takes a
157:46 - child it has an on press which takes a
157:49 - function
157:50 - that returns void okay then it has a
157:53 - background color okay and if you don't
157:55 - give
157:56 - any color then it will be blue which is
157:58 - the default color of any flutter
158:00 - application
158:01 - okay and you can also change it to any
158:04 - color you like
158:05 - okay like now i am changing it to red
158:08 - and you can see the color has changed
158:10 - to red now one more thing that i wanted
158:13 - to
158:14 - tell you about colors that we can change
158:17 - the
158:17 - intensity of that color if we want okay
158:21 - so for that
158:22 - all we need to do is inside square
158:24 - brackets
158:25 - if we write 300 then the intensity would
158:28 - be a little bit
158:30 - less okay and you can see that
158:33 - now if i write 100 it will be lesser
158:38 - okay so i am missing this over here
158:41 - let's run this
158:44 - and you can see the intensity has become
158:46 - more lighter now if i change it to
158:50 - 900 then the intensity will increase and
158:53 - the color will appear much
158:54 - darker okay so the standard if we
158:58 - don't write any number then the standard
159:02 - number that
159:02 - is by default use this 500
159:06 - okay and you can see that
159:09 - then the next thing in floating action
159:12 - button is the
159:12 - tool tip okay and that is similarly
159:16 - a string that is displayed when we long
159:19 - press on the button
159:21 - okay so let's say tool tip
159:25 - now let's run this
159:28 - now if i press and hold so i'm able to
159:31 - see the
159:32 - tool tip that is the text in my tool tip
159:36 - argument okay so this was also the basic
159:40 - about floating action button
159:42 - now the next thing about floating action
159:44 - button is that sometimes
159:46 - instead of just an icon we also want a
159:49 - text
159:49 - alongside means next to the icon okay so
159:53 - then we can use the extended
159:55 - feature okay so for that we just need to
159:57 - write extended
159:59 - and extended doesn't take a child but it
160:02 - takes
160:02 - two other two different arguments first
160:05 - is the
160:06 - icon and the second one is text
160:10 - sorry it would be label yes so it takes
160:13 - a label
160:14 - and label takes a widget
160:17 - so we will pass our text widget okay and
160:20 - let's
160:21 - let the text say add you know again i
160:24 - format it and save it so
160:26 - now i should see a plus and then add
160:30 - written next to it
160:31 - and you can see that okay so this is how
160:34 - we can modify our floating action button
160:37 - okay now the next thing that i missed
160:40 - while discussing about flat button and
160:44 - rest button was that
160:45 - they also have a extended feature okay
160:48 - so let's
160:49 - discuss about that so coming to flat
160:52 - button we have
160:54 - we simply write flat button and dot
160:58 - icon okay so now this means that the
161:00 - flat button will first have
161:02 - an icon and then a label okay not
161:05 - just a child that takes a widget but it
161:07 - takes
161:08 - two different things first one is icon
161:11 - and the second one is
161:12 - a label okay so let's give it an icon i
161:16 - can say
161:17 - i can inside an icon widget from the
161:20 - icon cinema and let's say
161:21 - android for now okay and the label is
161:25 - let's see what the label takes and the
161:27 - label takes a widget so we will pass a
161:30 - text widget okay and it says
161:33 - android okay and on pressed is simply a
161:40 - console logging that is
161:44 - button pressed okay
161:48 - now let's format it and save it
161:51 - and let's see okay so now you can see we
161:55 - have the flat button that is for
161:58 - and it has an icon and then the text
162:01 - okay so now it is not as we expected
162:03 - because we are using a
162:05 - ink okay so we don't need an ink
162:08 - right now and just remove it from here
162:13 - now let's run this so now that bluish
162:16 - background
162:17 - should be gone okay so this is our
162:20 - flat button but in a extended form that
162:23 - is by using this
162:24 - icon constructor okay now if i press
162:27 - this the functionality is same
162:29 - okay and the same goes for
162:33 - raised button okay so if i write
162:37 - rest button then it also has an extended
162:39 - constructor that is the
162:40 - dot icon constructor and it takes two
162:43 - things icons and label
162:45 - and rest all the features are same okay
162:48 - so let's see this also
162:52 - and you can see that let's apply some
162:54 - color so that it is
162:56 - more evident
163:00 - i'm sorry because it's not red
163:04 - okay format it save it
163:08 - and you can see that this is our raised
163:11 - button but it now
163:13 - instead of having a single child widget
163:15 - it has two things first one is icon and
163:17 - the second one is
163:19 - text and the is intact
163:22 - okay so this was all about buttons in
163:25 - the
163:26 - next video we should discuss about some
163:28 - other widgets
163:30 - thank you welcome to programming
163:32 - knowledge
163:33 - so in this video we are going to discuss
163:36 - about a convenience widget
163:38 - which is the container can by
163:40 - convenience with jet
163:41 - i mean that it is there for the
163:44 - developer
163:44 - to make his job much more
163:48 - easier okay so let's see how we use that
163:51 - okay so over here instead of this button
163:53 - i'll change it to just a simple text
163:56 - okay so that it is easier for you to
163:59 - understand
164:00 - our text that says
164:04 - programming knowledge okay
164:09 - and now if i save this i should be able
164:12 - to see the text programming knowledge on
164:14 - the screen and you can see
164:15 - as it is wrapped by a center the
164:18 - text is in center okay so first i'll
164:22 - correct the spelling
164:29 - okay now to wrap in our container i'll
164:32 - use my refractor
164:33 - key binding that is control shift r and
164:36 - then
164:37 - wrap with a container okay and if you
164:39 - don't have this
164:40 - key binding you can simply create a
164:42 - container
164:44 - and in the child you can place our place
164:46 - the text twitter
164:48 - okay so now our container now our text
164:52 - is
164:52 - inside our container but we see no
164:54 - significant
164:55 - change okay so now let's add a color to
164:59 - the container
165:00 - okay so for that i write color color is
165:03 - colors dot red
165:04 - okay so now the container area will be
165:07 - red in color so let's
165:08 - see that okay and you can see the
165:12 - container is in red color okay now you
165:15 - yes you can also apply the same thing by
165:18 - adding a
165:18 - text style over here but uh
165:22 - suppose sometime you don't have a text
165:24 - widget and some different kind of widget
165:26 - then this
165:27 - container comes into action okay so you
165:29 - can apply a color like this
165:31 - now the next thing that you can do is
165:34 - you can apply margins
165:36 - okay so for margins you need to write
165:38 - margin
165:39 - okay and then margin takes another type
165:42 - of widget which is
165:43 - edge insects so i write h in sets
165:47 - okay and then it has a few
165:50 - constructors first one is all okay that
165:54 - means
165:54 - whatever value you give inside this it
165:57 - will be applied to
165:58 - all the four sides okay and then the
166:01 - next
166:01 - important one is only that means we give
166:04 - individual margins for
166:05 - all the four sides and the next one is
166:08 - symmetric which means we
166:10 - give a margin which will be applied to
166:12 - the horizontal
166:14 - sides and another margin which will be
166:16 - applied to the vertical sides okay so
166:19 - basically now we just have a single
166:22 - child so this margin we will not be able
166:24 - to
166:25 - see any kind of significant difference
166:27 - but
166:28 - the thing where we can see the
166:29 - significant difference is
166:31 - padding okay so we can also apply
166:34 - padding to a container
166:35 - so we have a padding parameter and it
166:38 - also takes
166:41 - edge inserts geometry okay so i'll use a
166:44 - named constructor edge inserts dot
166:46 - all okay and then this all takes a
166:49 - double value
166:50 - okay so over here instead of value i'll
166:53 - make it
166:54 - 10.0 now if i
166:58 - save this i should be able to see
167:00 - padding all over the
167:02 - and all the sides of the text and you
167:05 - can see that
167:06 - the red color has a little bit bulged
167:08 - out
167:09 - okay and that is uniform in all the four
167:12 - sides okay now
167:13 - over here instead of all if i use
167:16 - symmetric so if i use symmetric then i
167:18 - have to
167:19 - mention that which which value is for
167:23 - which is symmetric design okay so for
167:25 - let's say that
167:26 - 10 is for horizontal so i need to write
167:29 - horizontal and then 10 okay and
167:32 - similarly we have a
167:34 - vertical and in vertical i apply 20 so
167:37 - now you can see that the spacing in the
167:39 - both
167:40 - the sides right and left should be 10
167:43 - and the spacing in top and bottom should
167:45 - be 20. so let's see that
167:48 - and you can see the spacing over here
167:51 - and here is
167:53 - lesser as compared to these spacing
167:57 - okay so this is when symmetric comes to
167:59 - play and the last one
168:01 - which is only okay so now only as i said
168:04 - it
168:05 - takes a different parameter for all the
168:07 - four sides
168:08 - so over here we can't use horizontal and
168:11 - vertical but
168:11 - instead of that we need to use left
168:15 - right top and bottom okay so i
168:18 - let's see left and i'll apply
168:22 - 10 to left i'm sorry
168:26 - then right okay and write 20
168:30 - then we have top uh 30 to top
168:35 - and bottom 42
168:38 - bottom okay and then i'll close this
168:40 - over here and a comma
168:42 - and i'll format this and save this so
168:44 - you can see now
168:46 - there will be different spacing in all
168:48 - the four different sites
168:50 - okay so this is how you can apply
168:52 - padding and you will see the same
168:54 - behavior when we use for the margin okay
168:57 - when we use this edge in sets for margin
168:59 - but the difference will be that
169:01 - if we have a color inside the container
169:03 - then that color will apply
169:05 - be applied only when we use padding and
169:07 - not when we use
169:08 - margin because the basic difference
169:10 - between margin and padding is
169:12 - that in margin we separate different
169:15 - widgets
169:16 - from each other and in padding we add
169:18 - spacing
169:19 - to a widget okay so over here we are
169:22 - adding spacing to that widget that means
169:25 - the size of that widget is increasing
169:27 - and our widget is container
169:29 - and in container we have applied the red
169:31 - color so in the entire spacing we can
169:33 - see the red color
169:34 - but instead if we were using margin then
169:37 - that
169:37 - meant that we are separating this widget
169:40 - from
169:40 - other widgets with uh some value that we
169:43 - have given over here so then the color
169:46 - if we have a color in the container
169:48 - would be confined to the exact area
169:50 - as it was before applying the margin
169:53 - okay so i hope
169:54 - this concept is clear now another small
169:57 - thing about this padding and margin
169:58 - is that you will see generally
170:00 - developers add a const over here
170:04 - okay so const stands for constant
170:07 - and the basic use of adding const over
170:10 - here is
170:11 - that it doesn't get built when we hot
170:14 - reload the program
170:15 - okay which means that if you are running
170:17 - an application
170:18 - and you open a page so if you open a
170:22 - page then this
170:23 - build method gets called okay now
170:26 - suppose
170:26 - if you are using an app and you have
170:28 - navigated to other page and when you are
170:30 - coming back to that page
170:32 - so instead of building all these things
170:35 - if it is a const over here so then this
170:37 - will not be builded again okay and
170:39 - if it is not being builded it will save
170:42 - a little bit of time and the navigation
170:44 - will be faster
170:45 - the app and interface will will be more
170:48 - smoother
170:49 - okay so you can use constant and you
170:51 - should use constant
170:53 - whenever you use paddings or margins
170:57 - now the next thing that we are going to
170:59 - discuss about
171:00 - is decoration okay so every container
171:03 - has a
171:04 - decoration okay and this decoration
171:06 - takes a
171:07 - box decoration widget okay so decorate
171:10 - decoration
171:11 - is the root and it has many sub branches
171:14 - okay so over here in container the most
171:17 - suitable
171:18 - one would be box container
171:21 - okay i'm sorry
171:24 - it will be box decoration okay so in box
171:28 - decoration now if we have box decoration
171:30 - and i run
171:31 - try running this then it you can see it
171:34 - is giving me an error over here okay
171:36 - and you can see the error is also in our
171:38 - screen
171:39 - and that is because in flutter whenever
171:42 - we have a decoration then the color
171:44 - should be inside decoration
171:48 - that means this color red should not be
171:51 - over here but it should be inside this
171:54 - box
171:55 - decorations over here in color i'll
171:57 - write
171:58 - colors dot red okay so now if i run this
172:02 - the error should be gone
172:03 - and i should be able to see the same
172:05 - exact thing as i was seeing
172:07 - before okay so you can see okay so
172:09 - padding is used when we only
172:11 - want to apply a padding okay and if
172:14 - anything other than padding then we need
172:16 - to go for
172:17 - container okay so this was about
172:20 - container and padding
172:21 - thank you welcome to programming
172:24 - knowledge
172:25 - now the next thing about the decoration
172:29 - is that you can
172:30 - define the shape of our container okay
172:33 - so by default
172:34 - the shape is rectangle if you want you
172:37 - can also make it to
172:38 - a circular type okay so for that we have
172:41 - a shape
172:42 - and the shape also takes an enum that is
172:45 - box
172:46 - shape okay and if you click on box shape
172:49 - dot then you can see we have two options
172:51 - one is rectangle
172:53 - and the other one is circle so if i
172:54 - change it to circle and then
172:56 - save it so then you can see a few
172:59 - changes okay so
173:00 - it has became circular but you can see
173:03 - the text has
173:05 - moved out of the circle okay so that
173:07 - could be fixed by using padding and
173:09 - stuffs like that
173:10 - okay for now i'll make a change it back
173:13 - to rectangle
173:17 - now if i run this i should see the same
173:19 - thing again
173:20 - okay and i'll also remove this padding
173:22 - i'll make it all
173:25 - okay and in all the sides it should be
173:29 - 10.0 okay i'll format it save it
173:35 - and you can see it is fine now sometimes
173:38 - what we require is to have rounded
173:42 - corners in our
173:43 - rectangular shapes okay so for that we
173:47 - have another parameter which is inside
173:49 - this box
173:50 - decoration and that is border radius
173:53 - okay so border radius and this border
173:55 - radius
173:56 - takes a border radius
173:59 - geometry widget okay so for that we will
174:02 - use a named constructor of border radius
174:04 - so i'll write
174:05 - border radius
174:08 - and then circular okay so circular means
174:11 - the radius will be circular and inside
174:13 - circular as it is a circle we need to
174:15 - give a
174:16 - radius so i'll give a radius of 10.0
174:19 - okay let's see formatted save it
174:24 - and you can see the corners have become
174:27 - a little bit
174:29 - rounded okay so this is how you can
174:31 - design
174:32 - things using the help of container okay
174:34 - so if you want to design
174:35 - any widget we can we simply surround it
174:38 - with a container and then
174:39 - add all the designs to the container now
174:42 - we can also
174:43 - specify a height and width for a
174:45 - container
174:46 - okay so let's say i want to specify a
174:49 - width
174:49 - okay and i can specify a width let say
174:52 - as
174:52 - 500 okay now you can see the
174:56 - color of the container might have
174:58 - increased and you can see that
175:00 - now suppose you don't know what is the
175:04 - length of the screen and you want to
175:05 - take the entire length as the width of
175:07 - the container
175:08 - okay so then what you need to do is you
175:10 - need to write
175:14 - double
175:16 - dot infinity okay so that means it will
175:18 - take all the space that is available
175:21 - now if i save this it should be same
175:24 - okay you can see that now you can see as
175:27 - we have taken the entire width
175:30 - the text has automatically moved to the
175:33 - start okay but that is not the
175:35 - requirement sometimes okay so now
175:36 - suppose if you want this text to be
175:38 - displayed in the center
175:40 - okay so then i'll come back to the text
175:43 - widget this part i have left when we
175:46 - were discussing about text so we have a
175:48 - thing called
175:49 - text align okay so now in text align it
175:52 - takes a text
175:53 - align enum okay now if i you can see all
175:57 - the options so if i click on center
176:00 - so now the text would be in the center
176:03 - and you can see that similarly if i make
176:06 - it
176:06 - end
176:10 - then that text should be in the end and
176:13 - that is the case
176:14 - okay so this is how we apply
176:18 - width to a container and similarly we
176:20 - have the
176:21 - height okay height and then height also
176:25 - let's say for now double dot
176:27 - infinity okay now if i save this the
176:30 - entire body area should be in
176:33 - red and you can see the rounded corners
176:37 - at all the four sides okay and now over
176:40 - here this is the perfect time to use a
176:42 - margin suppose i want to leave a margin
176:44 - from all the four sides
176:46 - okay so i'll write margin
176:50 - const and it takes an edge insert for
176:54 - now let's say all
176:55 - and 20.0 so let's see what happens
177:00 - and now you can see from all the four
177:02 - sides margin of
177:04 - 20 has been left okay and as i said
177:07 - while discussing about padding when we
177:09 - add padding the color is
177:11 - also there and when we use margin the
177:13 - color vanishes
177:15 - okay means the entire decoration
177:17 - vanishes not just to the color
177:19 - but the entire decoration okay so this
177:22 - was about
177:23 - container now another thing that we have
177:26 - in container is
177:27 - constraints okay and this constraints
177:30 - take some
177:31 - box constraints okay and then in box
177:34 - constraints we provide the constraint
177:37 - that like suppose if we have a
177:41 - screen that whose size we don't know
177:44 - okay but we want to confine the height
177:46 - of the container then we can say the
177:48 - maximum height till which the container
177:50 - will extend is 300.0
177:53 - okay and now let's save this and see
177:55 - what happens
177:57 - and you can see the maximum height is
177:59 - 300 okay no matter how much height
178:02 - is available in the screen the container
178:04 - will never take
178:05 - height more than 300 okay even though we
178:08 - have allowed the
178:09 - container to take a height of infinity
178:11 - that means
178:12 - all the space available but still it
178:15 - will only take a height of 300 that is
178:17 - the power
178:18 - of constraints okay and similarly we
178:21 - have a min height
178:22 - okay that means this is the minimum
178:23 - height it will take the
178:26 - container can't take a lesser height
178:28 - than this okay so for now let's say 100
178:32 - okay and it will give you an error if
178:34 - you give the maximum height
178:35 - less than minimum height if i'll format
178:38 - it and save it
178:39 - and now let's see what happens and
178:42 - nothing happens
178:43 - that means everything is same but now if
178:45 - we try
178:47 - removing this height from here so you
178:48 - can see still there will be a 100.0
178:53 - height okay so this is the 100 height
178:55 - okay 100.0
178:57 - height okay now if i again add the
179:00 - height
179:02 - as infinity sorry double dot
179:05 - infinity
179:09 - so then it should again take the max
179:11 - height
179:12 - okay and it is taking the max height
179:14 - because we are providing it a height
179:16 - which exceeds max height
179:18 - okay so this was the thing about height
179:21 - and similarly we have for width
179:23 - okay so suppose if i say max width
179:26 - should only be 50
179:28 - okay that means we can't have a width
179:30 - more than
179:31 - 50 so now let's see what happens and you
179:34 - can see this is the
179:36 - width okay only 50.0
179:39 - pixels okay and similarly this is the
179:42 - max width
179:43 - so so similarly we have a min width okay
179:46 - and all the properties
179:48 - like if we remove the double dot
179:50 - infinity then it will take the
179:51 - min width and if we have the double dot
179:54 - infinity forward then it will take the
179:56 - max width okay so this is the power of
179:59 - constraints and this
180:00 - is very useful when you want to confine
180:03 - a widget to a particular shape to a
180:05 - particular
180:06 - size okay so this was about
180:09 - container this is how we use container
180:11 - with all the widgets
180:13 - to apply size to
180:17 - provide a background color to provide a
180:19 - little bit decoration so this is where
180:21 - container comes into action
180:23 - okay now along with container we also
180:26 - have
180:26 - another convenience object but that
180:29 - convenience widget is very confined very
180:31 - restricted we
180:32 - means we can use it only for one purpose
180:35 - okay so for now i'll remove all this
180:38 - decoration and thing
180:40 - means i'll remove the entire container
180:47 - okay and i'll format it save it so now
180:50 - again our text will be there in the
180:51 - center now the next widget which i was
180:53 - talking about
180:54 - is padding so as the name suggests
180:59 - it can only have a padding okay and you
181:02 - can see as the padding comes it already
181:04 - has a const
181:06 - and which justifies that it is also
181:10 - it is also recommended by the flutter
181:12 - team okay so now you can see
181:14 - as it is a padding we can only apply the
181:16 - padding
181:17 - and i'll make it let's say 20 and there
181:20 - will be no significant
181:21 - difference but still this is a
181:24 - convenience widget which we
181:26 - may need sometimes okay okay so padding
181:28 - is used when we only
181:30 - want to apply a padding okay and if
181:32 - anything other than padding then we need
181:34 - to go for
181:35 - container okay so this was about
181:38 - container
181:39 - and padding thank you
181:42 - welcome to programming knowledge so in
181:45 - this video we are going to discuss about
181:47 - images and the first type of image that
181:50 - we are going to discuss about
181:52 - is the asset image and as the name
181:55 - suggests
181:55 - the image will be an asset okay and
181:59 - an asset to the project means that the
182:02 - image is
182:02 - in the folder where the project is or in
182:05 - the root
182:06 - where the project is so for that first i
182:08 - need to
182:09 - add a image in my root folder okay so
182:12 - for that i'll create a separate folder
182:15 - and i'll call it asset okay and then
182:18 - i'll paste
182:19 - any simple image okay so for now i'll
182:22 - this image seems fine
182:24 - i'll add it to the asset folder okay so
182:27 - the images
182:28 - now in our root directory of the
182:32 - project okay then the next thing that we
182:35 - need to do with
182:36 - every asset image to use it in the
182:39 - code is to add it in our pop spec.tml
182:43 - file
182:43 - okay so to add if you look you will see
182:46 - some commented code
182:48 - and you can see it over here okay so
182:50 - first we write
182:51 - assets and then the location of that
182:54 - image
182:55 - okay so i'll simply comment this out
182:58 - okay
183:00 - and then over here instead of this
183:04 - it will be asset and then the file name
183:08 - which is in this case reshape dot
183:12 - png sorry and then we need to save this
183:16 - and then you can see
183:17 - automatically over here the flutter pub
183:20 - get command will start
183:22 - running so once it is done we can start
183:26 - using the
183:26 - image in our code okay so for
183:30 - that in my my home app
183:33 - i'll remove the body okay for now
183:38 - and i'll create another new body okay
183:41 - and the body is a
183:43 - image
183:46 - and dot asset okay so we are using the
183:49 - named constructor
183:50 - of image okay and we i will surely post
183:54 - a
183:55 - video on constructors class and objects
183:57 - in dart
183:58 - okay so for now image is a class and it
184:01 - has a named constructor that is dot
184:04 - asset
184:05 - okay so as it is an asset we can say it
184:08 - first
184:09 - takes the string name okay which is the
184:12 - required file
184:13 - which is the required parameter i'm
184:15 - sorry okay so
184:17 - i'll pass the name and we simply just
184:20 - can't pass gshf dot png
184:24 - okay we also need to pass the folder
184:26 - because we have kept it in a separate
184:28 - folder and as i told
184:30 - asset refers to the
184:33 - data which is in the root root folder
184:36 - okay so i'll write asset
184:40 - and reshop.png okay so now if i save
184:43 - this i should be able to see my image on
184:44 - my
184:45 - mobile screen okay and you can see that
184:49 - okay so this was this is the image that
184:52 - i have added
184:53 - and the first thing that people tend to
184:56 - forget is to not
184:58 - add it in the prospect.tml and
185:01 - then they struggle a lot to fix there
185:04 - okay so that is one important thing that
185:06 - you should never neglect
185:08 - okay so then if we added the
185:11 - file name we added the image name first
185:14 - then the next property that we can add
185:17 - is
185:18 - height okay so our height will be of
185:21 - let's say
185:21 - 20.0 height
185:24 - takes a double value so that's why i
185:26 - have added a dot is zero
185:28 - if i will not add it then also it is
185:30 - fine
185:31 - but adding the point 0 is a better
185:34 - practice
185:35 - okay so i'll save this and now my image
185:37 - size
185:38 - should have shrinked okay and you can
185:41 - see it has
185:41 - shrinked a little bit too much okay
185:44 - because the height is way too less
185:46 - i'll make it hundred
185:51 - and you can see the image has images
185:54 - height has decreased and since the
185:56 - height has decreased
185:57 - the width has also decreased
186:02 - and as we are talking about width we
186:04 - have a property called width
186:06 - okay and we can give any value we want
186:08 - okay so for now
186:09 - suppose i give 50 okay then
186:12 - since 50 is the smaller one then the
186:15 - scale right now will be 50.
186:17 - okay and you can see the image has
186:19 - shrinked even more
186:22 - okay so these were a few basic things
186:24 - now the next
186:25 - thing that we are going to discuss is
186:26 - the frame builder
186:29 - so as the name suggests it
186:32 - builds the frame in which the image
186:34 - widget will be shown
186:36 - so frame builder then it takes a it
186:39 - returns a method which has four
186:41 - parameters
186:42 - first one is build context okay so build
186:45 - context
186:46 - will get let's call it cons context
186:51 - then the next thing is
186:54 - widget child then
186:57 - frame and
187:01 - bool was synchronously
187:07 - loaded okay i'll give a
187:11 - comma over here and then format it okay
187:14 - so
187:15 - now let's discuss what are these
187:16 - parameters over here
187:18 - so the build context returns the current
187:21 - context
187:22 - okay then the widget child so it
187:25 - contains the default image object
187:28 - which is guaranteed to be normal because
187:30 - if we
187:32 - create an image asset then this is the
187:34 - required field we cannot neglect it we
187:36 - need to give this
187:38 - field and since we give this field there
187:40 - is some image that is played on the
187:42 - screen and
187:43 - therefore this child will never be null
187:46 - okay then the
187:47 - next thing is int frame so it contains
187:50 - the frame index
187:52 - it is of no use right now it basically
187:55 - comes in play when we display a gif
187:57 - or a video because what basically
187:59 - happens in a video or gif
188:02 - is that the image frame keeps on
188:04 - changing continuously at very minute
188:06 - interval
188:08 - okay so when we want to change the frame
188:11 - in between a video or a gif then this
188:13 - frame comes to play okay for now
188:17 - the frame value is null and as soon as
188:19 - we build it its value will become zero
188:24 - and for gif or any other multi-frame
188:26 - image it will
188:27 - increase by one every time any new image
188:31 - is shown and when
188:34 - something is not important we
188:37 - change it with a underscore okay so that
188:40 - means it is
188:41 - just a placeholder it has no
188:43 - significance in the function
188:45 - but still we need it in the function
188:48 - definition
188:49 - okay then the next thing is was
188:51 - synchronously
188:53 - loaded okay so before discussing about
188:57 - this
188:57 - we need to understand what is
188:59 - synchronous and
189:00 - the difference between a synchronous so
189:03 - for that i have found a blog which
189:06 - beautifully
189:07 - explains about both and the difference
189:10 - so you can have a look at it later okay
189:13 - for
189:13 - now in simple terms what synchronous
189:16 - means is
189:17 - that the transmission of data was done
189:19 - immediately
189:21 - and as we are using it in images
189:24 - image widget so over here it stands for
189:27 - whether the transmission of asset image
189:29 - to the widget was done
189:31 - immediately or not so it is generally
189:34 - true
189:34 - but if it is not then you can display
189:37 - some other widget
189:38 - until it until the image is being loaded
189:41 - like a progress bar or stuff like that
189:43 - okay so these were about the four
189:45 - parameters
189:46 - now inside this function we need
189:49 - to return a widget that will be the
189:52 - frame of our image
189:53 - okay so for now i'll remove this
189:58 - okay and save this
190:03 - okay so we are getting an error because
190:05 - i have not yet
190:07 - passed anything i'll comment this out
190:10 - for the moment
190:14 - okay and then save it and run it again
190:18 - okay so you can see our images like this
190:21 - and now when we use frame builder we
190:24 - return our widget
190:26 - that contains the image widget okay that
190:29 - acts as the frame for the image widget
190:31 - so for now let's just
190:34 - give some padding to it okay so return a
190:37 - padding
190:38 - that has a padding and the padding is
190:41 - first
190:43 - then edge in sets all
190:46 - and from all the sides i want to add
190:48 - 10.0
190:50 - okay and the child is our
190:53 - widget child which we get over here okay
190:55 - that means the current
190:56 - uh image will check okay
191:00 - then i'll format it and save it
191:04 - so now you can see the image has padding
191:07 - from
191:08 - all the sides okay so to make the
191:12 - change significant i'll change it to 100
191:15 - okay and you can see the image has
191:18 - automatically left hundred pixels
191:20 - padding from this side
191:22 - from top and even from bottom and right
191:24 - but it is not significant in the screen
191:26 - as we don't have any other widget
191:28 - okay now we can also change it to
191:31 - container and add some color and see
191:33 - if it works fine or not okay so
191:36 - container
191:37 - then the container has a color let's say
191:40 - colors dot red okay i'll save it
191:46 - and you can see the container is red in
191:49 - color and it has 100 pixel padding from
191:52 - all the four sides
191:55 - okay so now you can also try some
191:58 - different
192:00 - things in this if you want so the first
192:03 - is decoration
192:04 - for decoration we have a box decoration
192:07 - we have discussed all this in the
192:09 - previous videos
192:10 - okay and then since we are using a
192:12 - decoration we can't have a color outside
192:16 - okay it is like of a quick
192:19 - recapitulation
192:21 - so i'll paste the color over here and
192:24 - then i will also like to change the
192:26 - shape
192:27 - so the shape is in the box
192:30 - shape pinum and i'll make it circle okay
192:34 - then again format it save it and let's
192:36 - see what happens
192:38 - and you can see the padding has become
192:40 - circular okay
192:42 - so this is how we use a frame
192:45 - builder okay so frame builder is a very
192:49 - important
192:49 - thing when we deal with images and
192:52 - it is a thing where people generally
192:54 - make mistake so i hope
192:56 - all the concepts were clear till now
192:58 - will continue in the next video
193:00 - thank you welcome to programming
193:03 - knowledge
193:04 - so in this video we are going to
193:06 - continue where we left
193:08 - in the previous video we were discussing
193:10 - about images and to be more specific
193:12 - asset images and the last thing that we
193:15 - saw was the
193:16 - frame builder okay so in this video
193:18 - we'll discuss a few
193:19 - more properties of this image asset okay
193:23 - so for now i'll
193:24 - remove this height and the frame builder
193:29 - okay and i'll surround this
193:32 - image with a container now you might
193:35 - think that if i wanted a container then
193:37 - i could have simply sent it
193:39 - returned it in my frame builder but why
193:42 - am i surrounding this
193:43 - image asset with a container instead so
193:46 - the reason is when we return
193:48 - something from the frame builder then
193:51 - the entire frame
193:52 - acts as the image we checked okay so if
193:55 - i apply any property
193:56 - to the image then that property will be
193:59 - applied to the entire frame
194:01 - which might be the container in our case
194:03 - so to
194:04 - avoid such type of situation we surround
194:07 - the image with a container
194:08 - okay so now for now i'll give the height
194:11 - and width
194:12 - to infinity okay height is
194:17 - double dot infinity
194:20 - and the width is also
194:23 - double dot infinity okay then i'll
194:27 - format it
194:28 - save it and you can see our image is in
194:32 - the
194:32 - center okay so now the property that we
194:35 - are going to discuss about is fit
194:38 - okay so fit decides how to inscribe the
194:42 - image into the space allocated
194:44 - during layout so this is the function of
194:47 - it
194:48 - okay so there are there is a enum that
194:50 - has all the types of fit
194:52 - and the enum is as the name as you can
194:54 - see in the suggestion
194:56 - it is box fit okay so the default
195:00 - type is contain okay that means the
195:03 - entire image will be in the container
195:05 - and no part will be clipped out
195:07 - okay so let's save this and see and you
195:10 - can see
195:11 - no significant change but you can also
195:14 - see that no part is clipped out we can
195:16 - see the entire circular thing
195:18 - in the screen okay so then the next type
195:21 - is
195:22 - cover okay so that means it will cover
195:26 - the
195:26 - entire container okay so let's save this
195:30 - and see
195:32 - and you can see it has covered the
195:34 - entire container that means the
195:36 - entire height and the entire width
195:39 - okay and if some part is uh clipped out
195:42 - then it will be clipped out only okay so
195:45 - it doesn't care if the image is being
195:47 - clipped out or not
195:48 - but the entire screen will be filled
195:51 - with the
195:52 - image okay then the next
195:55 - type is fill okay that means it will
195:58 - fill the container
195:59 - so let's see
196:02 - and you can see the image is neither
196:04 - clipped out and nor
196:06 - any space is left it took took the
196:08 - entire height
196:09 - it took the entire width but no part of
196:12 - the image was clipped out
196:14 - so what happened was it got extended
196:18 - and it got stretched in some directions
196:21 - so as to fit the requirements okay
196:24 - now the next thing is
196:27 - fit height okay so as the name suggests
196:31 - it will fit the height and it will not
196:33 - care about its
196:34 - width so let's see
196:37 - and you can see the height has been all
196:40 - the height has been taken up
196:42 - and the width is also taken because the
196:45 - image is big but you can see
196:46 - some part of the image got clipped on
196:49 - both
196:50 - the horizontal sides and that is what
196:52 - the
196:53 - flutter will not care about because
196:55 - right now we are using fit height
196:57 - so all it cares about is the height okay
197:00 - and similarly we have
197:01 - fit width okay so now all it will care
197:05 - is about
197:06 - the width and whatever happens to height
197:08 - flutter will not care
197:09 - okay so let's see and you can see the
197:11 - entire width is
197:13 - taken by the image and there is no
197:15 - significant change in the height but
197:18 - if the image was a horizontally long
197:21 - image then you could see the significant
197:23 - change
197:24 - okay so this was fit width then the
197:28 - next one is none that means no change
197:30 - okay so it is equal to fit
197:32 - equal to null okay so the same image as
197:35 - it was before we had fit
197:39 - then the next part is scale down okay so
197:42 - what this basically does is it will
197:44 - shrink the image if required
197:46 - but it will never stretch the image okay
197:49 - so let's see
197:53 - and this also so shows no significant
197:56 - change but if we had some image
197:58 - that exceeded the length or the width
198:01 - then it would have automatically shrink
198:04 - okay so to understand better we you can
198:07 - go to the
198:08 - official flutter box fit enum and over
198:11 - there you can see with
198:13 - very good examples how these all work
198:15 - okay so the contain
198:17 - it contains the box okay and it
198:20 - changes the it shrinks or increases the
198:24 - size of the
198:26 - child as requi as needed okay and in box
198:29 - fit it covers the entire space in
198:32 - fill it it stretches such that
198:35 - all the spaces are filled and fit height
198:38 - it only cares about the height
198:39 - in fit width it only cares about the
198:42 - width
198:43 - in none you can see no changes happening
198:46 - irrespective of the shape and size of
198:48 - the container
198:50 - and then is scaled down and you can see
198:52 - as the size changes
198:53 - its height is shrinking okay
198:57 - so this was about this fit
199:00 - thing okay so i'll remove it for now
199:03 - and save it so now we got the image back
199:08 - in the center
199:09 - now the next thing that we are going to
199:11 - discuss about is
199:12 - alignment okay so as we have seen in the
199:16 - text in the text widget over there we
199:20 - had a
199:20 - text align but over here we have a
199:23 - alignment enum okay and
199:27 - over here these are the options that we
199:29 - have so let's try
199:30 - top center and then the image
199:34 - should be pushed to the top okay and you
199:37 - can see that
199:38 - similarly we have bottom center
199:44 - and the images pushed at the bottom now
199:46 - if we had a
199:48 - image which had uh
199:51 - the width less than the screen size then
199:54 - we could also try
199:56 - bottom left and bottom right and the
199:58 - image will
200:00 - accordingly be placed at those positions
200:04 - okay so then after alignment the
200:07 - last thing that i want to discuss is
200:10 - repeat
200:11 - okay so sometimes you could see that a
200:13 - single image is being repeated in all
200:15 - the places
200:16 - okay means like in the entire screen of
200:19 - single images is repeated
200:21 - uh in column wise also and in rows wise
200:23 - also
200:24 - so that can be done using this repeat
200:27 - argument okay and it also has a
200:30 - image repeat enum okay and the first one
200:33 - let's say
200:34 - try repeat okay so that means that the
200:37 - image will be repeated
200:38 - in all the place available in the screen
200:41 - which is
200:42 - unused okay so let's see
200:46 - and you can see the image is repeated
200:48 - over here because this was the unused
200:50 - space
200:50 - and the same goes for this bottom part
200:53 - because this was the
200:54 - unused space okay so this is what we can
200:57 - do with
200:57 - repeat now the next type is repeat
201:01 - x and it is for the x axis that means
201:04 - the width
201:05 - so let's see and since we had no free
201:08 - space in the width
201:09 - so no repeat no repetition has taken
201:12 - place
201:13 - okay now let's try for repeat y okay
201:16 - that is for the y axis
201:18 - or the height so now you can see the
201:22 - same repetition took place as we
201:24 - saw in repeat okay so i hope you are
201:28 - able to relate all
201:29 - all these things together okay and then
201:31 - the last type
201:32 - is no repeat okay that means no repeat
201:36 - which is equal to null
201:38 - okay so you can see that okay so this
201:41 - was about
201:42 - image asset in the next video we will
201:44 - discuss about image
201:45 - network thank you
201:48 - welcome to programming knowledge so in
201:51 - this video we are going to discuss about
201:53 - class and objects in dart okay so
201:56 - if you don't know what is class and
201:58 - object you can refer to this
202:00 - website it has explained beautifully
202:02 - over here you can see we have a class
202:04 - car okay and then these objects are
202:07 - derived from this class
202:09 - okay so generally till now whatever we
202:12 - have done like whenever we wanted
202:14 - to store some value we created a
202:16 - variable and then that variable
202:18 - generally had some primitive data type
202:20 - like string
202:22 - integer and more like that okay but
202:24 - suppose if i want to
202:26 - have a collection of these primitive
202:29 - data types
202:29 - and refer to them as a single object
202:32 - then we use this class and objects okay
202:35 - so you can read more about this
202:37 - okay so back in our dot pad to create
202:41 - a class we have a keyword class
202:45 - okay and then we write the class name
202:48 - over here i am writing point that is a
202:50 - very
202:50 - common problem that we see okay means a
202:53 - common
202:54 - competitive coding question okay so
202:57 - i'll have two variables inside this
203:01 - intex and into i okay both are primitive
203:04 - data type
203:05 - and any variable that is declared inside
203:08 - a class
203:09 - is called as data members okay
203:12 - so now it is
203:15 - recommended that whenever we create a
203:17 - class and have some data members then we
203:19 - should
203:20 - initialize it okay and to initialize
203:23 - we have a special function inside a
203:27 - class
203:27 - called constructor which is used for
203:30 - initializing
203:31 - all the data members inside a class okay
203:34 - so now this constructor doesn't have any
203:37 - return type and it has the same name
203:40 - as we have of the class okay so over
203:42 - here the class name is point
203:44 - then the constructor name will also be
203:46 - point
203:48 - okay then we have created this
203:51 - method now inside this method what i'm
203:53 - going to do is i'm gonna
203:54 - initialize my data members okay so for
203:57 - that i'll write
203:58 - x is equal to 0
204:01 - and y is equal to 0
204:05 - okay so this is done now to create a
204:08 - object of this class over here i'll
204:10 - simply write the class name
204:13 - and then p means that is the object name
204:16 - which is very similar to
204:17 - how we created any other variable like
204:20 - int
204:21 - x so that means we have created a
204:23 - variable x of type
204:25 - end okay and over here if we give var
204:28 - that means
204:29 - that was also correct and so is the case
204:32 - over here even if we write var
204:34 - over here this will also work this is
204:36 - absolutely fine
204:38 - but for the time being i am gonna use
204:40 - point okay so that it is
204:43 - clearer to understand okay so now to
204:46 - access
204:47 - any data members we simply write print
204:52 - p dot x okay and let's try printing it
204:56 - so 0 should be printed
205:01 - okay so you can see we got an error over
205:05 - here
205:05 - and the error is because we have just
205:09 - created the object but we have not
205:12 - initialized it
205:13 - okay so to initialize any object we need
205:16 - to
205:16 - write the
205:20 - class name and then parentheses which is
205:23 - basically calling this constructor okay
205:25 - that means as soon as this point p will
205:28 - be created then this
205:29 - point method will be called which is
205:31 - nothing but our constructor
205:33 - so then our values will be initialized
205:35 - and the
205:36 - error will be not there so you can see
205:38 - the error is also null error that means
205:40 - the value is not
205:42 - assigned some proper quantity like this
205:45 - x and y are null they don't have any
205:47 - value stored in them then we are that's
205:49 - why the compiler is not able to print
205:51 - the values
205:52 - okay so let's try running this now
205:57 - so now you can see the output is 0
206:00 - for x as we have stored 0 in x okay so
206:03 - now if i change it to 10
206:05 - then the output should be 10
206:11 - and you can see that okay so now i'll
206:12 - remove this function for now
206:15 - we don't need function right now okay
206:18 - so this is one type of constructor now
206:21 - we can
206:21 - have some parameters assigned also
206:25 - like suppose i am giving it a value int
206:29 - 8 okay and now over here when i call
206:31 - this constructor now i need to
206:33 - pass this value a okay so let's say i
206:36 - pass
206:37 - 200 okay so now over here what will
206:41 - happen that
206:42 - i am assigning the received value at a
206:45 - to this variable x so now if i print x i
206:49 - should be able to see the value that i
206:50 - have sent from here
206:52 - so let's see
206:55 - and you can see 200 is being printed
206:57 - similarly you can try
206:59 - for print
207:02 - p dot y
207:06 - now if i run this i should be able to
207:08 - see 200
207:10 - and 0 okay now the next thing that we
207:14 - are going to see is
207:15 - uh like suppose i have the data members
207:19 - as
207:19 - x and y and the parameters i am taking
207:22 - is also x
207:23 - and y okay so like for first i need to
207:26 - give here another parameter because over
207:28 - here i am expecting two parameters
207:31 - so now if i write if i want to assign
207:34 - this
207:34 - x value to this x conventionally i
207:37 - should write
207:38 - x is equal to x and same goes for y i
207:42 - should write y
207:43 - is equal to y so now at this point the
207:47 - compiler will be confused
207:49 - as to which x refers to which type of
207:52 - data like
207:53 - is this x the data member or the
207:56 - positional argument that we have over
207:57 - here and the same for this x
208:00 - that whether it is the positioner
208:02 - argument that we get over here or the
208:05 - data members okay so in such scenarios
208:09 - we have a special keyword called this
208:12 - okay so if i write this dot x and this
208:16 - dot y so that means if
208:19 - it is written this dot x that means i am
208:21 - referring to the
208:22 - data member of this class okay
208:25 - so if i write this inside this point
208:28 - class that means my this is referring to
208:30 - this class
208:31 - and this has a variable y
208:34 - has our data member x which is this one
208:37 - so
208:37 - in this data member this positional
208:41 - argument will be stored
208:42 - okay so now let's try removing this and
208:45 - see what is the
208:50 - error
208:53 - and you can see the it is showing null
208:55 - that means no value is assigned
208:57 - because over here these both are
208:59 - referred as the
209:02 - positional arguments okay so if i add
209:05 - this dot y then the error should be gone
209:08 - okay i should be able to see 200 and 100
209:12 - okay so you can see that so this is when
209:15 - this keyword comes to play okay so now
209:19 - this is one method
209:20 - to create a constructor there is a
209:22 - simpler method that a dot provides
209:25 - okay i'll remove this and i'll simply
209:28 - write
209:28 - point okay and then inside this this
209:32 - dot x comma this dot y
209:35 - and then a semicolon okay so this means
209:37 - that when we call the constructor the
209:40 - value that we store over here
209:42 - will be stored in the parameter in the
209:45 - named argument that we have over here
209:47 - and which is
209:47 - eventually a data member so the value
209:50 - received
209:51 - over here will be directly saved in this
209:54 - data member
209:55 - okay so now if i run this we will not
209:57 - see any error and the
209:59 - answer will also be the same but you can
210:01 - see the lines of code has reduced and it
210:04 - is a
210:04 - much more simpler way okay so
210:08 - this is it now after that the next
210:12 - thing that we have in a class is a
210:13 - function okay so a class generally
210:15 - comprises of three things
210:18 - uh data members constructor and
210:21 - some functions and the functions which
210:23 - are inside a class are called
210:24 - member functions and sometimes we also
210:27 - have a destructor
210:28 - okay so if you don't know about
210:30 - destructor then
210:32 - as we have constructor which is called
210:33 - at a star as soon as
210:35 - the object is initialized destructor is
210:38 - called as soon
210:39 - as the execution of that
210:42 - object ends okay so we are not gonna
210:45 - discuss about the destructor because
210:46 - that is not
210:48 - used a lot but if you want to learn you
210:50 - can go to the
210:51 - official documentation of that okay so
210:54 - now we are going to create a
210:56 - member function okay so i'll first
210:58 - simply create a simple member function
211:00 - that will simply print some data
211:03 - again it will have it will not return
211:05 - anything so the return type is void
211:07 - and the method name is print data
211:10 - and since it is a one liner function
211:13 - i'll write it like this print
211:15 - and then i'll use string interpolation
211:20 - okay and quite so now if i run this i
211:24 - should be able to see
211:26 - 100 plus 200 200 plus 100 i am sorry
211:31 - okay so
211:34 - you can see the output is not as we
211:36 - expected and that is
211:38 - because over here i have not called the
211:41 - method that is my mistake
211:42 - okay so to call any member function we
211:45 - first need to write the object name
211:47 - a dot and then that member function
211:50 - okay so now let's try running this and
211:53 - then we should
211:54 - be able to get to the output okay and
211:57 - you can see the
211:58 - first two print statements give these
212:01 - two output and the last
212:03 - is this statement which is executing
212:06 - this function and over here we have this
212:08 - print statement
212:10 - x plus y so we are getting the value of
212:12 - x plus the value of
212:14 - y okay so this were the basics about
212:18 - class and objects in the next video we
212:20 - will discuss
212:21 - little bit more about the class and
212:23 - objects and then continue with our
212:25 - images
212:26 - thank you
212:29 - welcome to programming knowledge so in
212:32 - this tutorial we are going to continue
212:34 - our discussion on class and objects in
212:36 - dot
212:37 - okay so now we are going to discuss
212:39 - about named constructors
212:41 - okay so sometimes we need to have more
212:44 - than one constructor such as
212:45 - one which takes two input values and the
212:48 - other one which takes a map
212:50 - okay so that may vary according to your
212:52 - requirement okay
212:54 - so in those places what our what we do
212:57 - in
212:57 - any other programming language was to
212:59 - create another constructor with the same
213:01 - name
213:02 - and over here the parameter will vary
213:06 - okay so that was the normal case that we
213:08 - had in java
213:09 - c or java or c plus plus okay but in dot
213:13 - this will give us an
213:14 - error okay so the way to have more than
213:18 - one constructor in a same class
213:20 - in dart is by using the name the
213:22 - constructor okay that means the
213:24 - constructor will have an
213:26 - additional name to it okay so to create
213:28 - a cons
213:29 - named constructor we first write our
213:32 - construct
213:32 - class name okay and then the
213:36 - additional name so let's say from map
213:39 - okay and as the name suggests
213:41 - that this will take a map of type string
213:44 - and i'll call it map and then
213:47 - i'll store the value in this map to my
213:50 - data members
213:51 - okay so for that i'll write this dot x
213:53 - is equal to
213:55 - map and map will have a x value okay
213:58 - this
213:59 - dot y and then map will have a
214:02 - y value okay so this is done
214:06 - now let's try creating a point object
214:09 - using this constructor
214:11 - okay so for that over here i'll first
214:13 - instantiate an object point p1
214:16 - and then to call this named constructor
214:18 - we write point
214:20 - dot from mac
214:23 - okay and then over here as you can see
214:25 - over here we are expecting a map so we
214:28 - need
214:28 - to pass a map okay so for that i'll open
214:31 - curly braces
214:32 - and then the first value is x and let's
214:35 - say
214:35 - 10 and then the next value is y
214:39 - and i'll pass 20. okay then i'll close
214:43 - this bracket over here
214:44 - now over here you can see the type has
214:47 - been mentioned
214:48 - so it would be better if we mentioned
214:50 - the type over here also
214:51 - this is referred as a good practice this
214:54 - is string and
214:56 - okay that means in this map the key will
214:58 - always be
214:59 - of string type and the value will always
215:01 - be of integer type any other data type
215:03 - will give us an
215:04 - error okay so now let's try calling this
215:06 - function
215:07 - on this p1 object okay so for that i'll
215:10 - write p1 dot
215:12 - print data
215:15 - so now let's try running this and we
215:17 - should get 10 plus 20 as the output and
215:19 - you can see that
215:21 - so this is how we have more than one
215:23 - constructor
215:24 - in the same class by using the named
215:27 - constructor
215:28 - okay so now over here you can see this
215:32 - is
215:33 - how we create a named constructor but
215:36 - this
215:36 - is not the best way actually there is
215:39 - another way and that is called
215:42 - initializer list okay so for that
215:46 - i'll remove this from here okay and
215:48 - let's see how we use an initializer list
215:51 - okay so suppose my con cons named
215:54 - constructor is same
215:55 - dot from map okay and it
215:59 - takes a map of type
216:02 - string and end and i call it map
216:07 - okay now instead of giving curly braces
216:11 - what i'm going to do is i'll give a
216:13 - colon
216:14 - okay and then i'll initialize the value
216:16 - so i'll write x
216:18 - is equal to map x
216:22 - okay and y
216:25 - is equal to map
216:29 - y okay and then over here only we can
216:33 - call this print
216:34 - data method okay so let's see what
216:36 - happens
216:38 - print data okay so this means
216:42 - this method will be called after the
216:45 - value is
216:46 - stored okay so let's try running this
216:48 - i'll just remove this print data from
216:50 - here we should get the
216:51 - same output let's see
216:55 - and you can see we get the same output
216:58 - so over here you can see our lines of
217:00 - code are less
217:01 - and the work is also optimized
217:04 - that means before the code inside this
217:08 - constructor starts running our data
217:10 - members are initialized
217:12 - okay so this is where initializer list
217:15 - comes to play
217:17 - okay and we don't use initial
217:19 - initializer list
217:20 - just to initialize but for other cases
217:23 - also
217:24 - like assert
217:27 - assert x greater than zero okay so that
217:30 - means it will check if x value is
217:33 - greater than zero and if it is not then
217:35 - this constructor will not run
217:37 - okay so assert is a special keyword that
217:41 - we
217:41 - have in that okay and the code will not
217:44 - pass from here until this condition is
217:46 - true
217:47 - okay if this condition is false then the
217:48 - execution will stop over here
217:51 - okay so this is done
217:54 - yes so now let's try running this i hope
217:56 - there are no errors
217:58 - okay and you can see there is an error
218:03 - okay so let's see what has happened
218:06 - okay so the error over here is that x
218:09 - and y
218:09 - are not getting initialized okay so
218:12 - instead of writing it over here i'll
218:14 - write it i'll cut it from here
218:18 - remove this okay and over here i'll
218:21 - write
218:22 - the same thing okay now let's try
218:24 - running this and i think the error
218:26 - should be gone by now
218:28 - and the error still exists because we
218:30 - are calling this and this is
218:32 - not valid so now let's run this again
218:39 - okay so now you can see we get the
218:41 - output
218:42 - now the next thing that we are going to
218:45 - discuss
218:46 - in class is getters and setters we can
218:49 - use the same type of getters and setters
218:51 - that we use in any other
218:53 - object oriented programming language
218:55 - along with that
218:57 - there is another procedure that
219:00 - that provides okay so to get a value
219:04 - we simply write the return type of the
219:07 - value and then the keyword get
219:10 - and then the name point x okay so
219:14 - suppose
219:14 - if i call point x i want the value of
219:18 - value stored in this data member okay so
219:20 - then simply i'll write
219:24 - this dot x okay so that means over here
219:28 - return keyword is applied implicitly
219:32 - okay so now let's try running this so
219:34 - i'll write print
219:37 - p dot point
219:40 - x okay so as i told in the previous
219:43 - video we
219:43 - call all the methods inside the class
219:46 - using the
219:47 - object of that class okay so now let's
219:49 - try running this
219:50 - and 200 should be printed below this
219:54 - and you can see that okay similarly we
219:56 - can write for
219:57 - y and get
220:01 - point y okay
220:05 - and then this returns this dot y
220:08 - now similarly over here i'll print this
220:10 - print
220:12 - p dot get y
220:20 - sorry p dot 0.1
220:25 - now let's run this and i should get 100
220:27 - over here
220:29 - and you can see that now this getter
220:32 - is not only used for getting the data
220:34 - members we can use
220:36 - return customized answers also okay so
220:39 - suppose if i want to return a map of
220:41 - type string
220:43 - and and i'll call it
220:46 - get map okay then this should return
220:51 - a map of type string and
220:54 - it okay and the values will be
220:57 - x and that will have the value stored in
221:00 - the data number
221:01 - x okay and then it will have a value y
221:06 - okay and that will return the value
221:08 - stored in the data member y
221:10 - okay then i'll close this over here and
221:12 - as i said the return keyword is
221:14 - applied in these both implicitly okay so
221:17 - then again i'll call this method
221:19 - point p dot get
221:23 - map okay and now let's try running this
221:28 - okay so it is giving us an error and
221:30 - that is because instead of print over
221:32 - here i have written
221:33 - point so now let's try running this
221:39 - and there we get the result it returns a
221:42 - map where
221:42 - x has value 200 stored in it and y
221:46 - has a value 100 stored in it that is
221:48 - same as we have passed
221:50 - in our constructor okay so this is how
221:52 - we use the getters
221:54 - in that okay now talking about setters
221:58 - for setters also there's a different
222:00 - method that is provided by this
222:03 - dot so we simply write set that is a
222:05 - keyword in dot
222:06 - and then point x
222:10 - okay point capital x okay so now
222:13 - let's not give it uh give the same name
222:16 - i'll write set x
222:17 - okay and then it expects an integer
222:20 - value i'll call it
222:21 - x and then as we know how to
222:23 - differentiate this dot x refers to the
222:26 - data member
222:27 - and this refers to the parameter that we
222:29 - get over here
222:30 - okay so now let's try calling this i'll
222:32 - call
222:34 - p dot set x
222:38 - okay and then it returns expects a value
222:40 - i'll give
222:41 - 500 to it okay and then simply p
222:44 - dot print data
222:53 - okay now let's try running this
222:59 - okay so over here you can see we got an
223:01 - error so the error was instead of
223:03 - passing it as a parameter
223:05 - i pass it with an equal to sign okay so
223:08 - now let's try running this
223:11 - and you can see instead of 200 the value
223:13 - has now changed
223:14 - to 500 similarly we can set x
223:18 - set y for the y parameter and then
223:20 - similarly we can take a map and then map
223:23 - it to our data members like we did in
223:25 - the named constructor part
223:27 - okay so this was about getters and
223:29 - setters and by this we complete the
223:31 - basics
223:32 - of class and objects in that
223:37 - okay so the next thing that i want to
223:39 - discuss is about
223:40 - enums okay so enum is a special type of
223:44 - class
223:45 - that represents fixed number of constant
223:48 - values
223:49 - okay so to create an enum okay so now
223:52 - suppose we have a payment status
223:55 - okay like the payment status will have
223:57 - three values
223:58 - and those three need to be fixed values
224:01 - okay so
224:02 - in those those cases we use an enum
224:05 - okay so for enum we write the keyword
224:07 - enum
224:08 - and then let's say payment status that
224:11 - is the example scenario that we have
224:13 - taken
224:14 - payment status okay and then this has
224:17 - three values
224:18 - first one is not
224:22 - paid then otp
224:25 - sent and then paid
224:29 - okay so this can be the three members
224:32 - i'll give a semicolon over here
224:35 - comma over here
224:38 - okay i think we don't need a semicolon
224:40 - over here yes we don't need it
224:42 - so we have an enum over here that has
224:45 - three values not
224:46 - paid otp sent and paid okay so over here
224:49 - we can create a
224:52 - object of this enum okay so for that
224:55 - i'll add final
224:57 - status and to store any value from this
225:00 - enum we first write the enum name
225:02 - that is payment status
225:07 - dot not sent not
225:10 - paid okay so now
225:14 - we have a status which will have a data
225:16 - type of payment status and it has a
225:18 - value
225:20 - you can see in a payment status if i
225:21 - click on this also
225:23 - we will get the same thing that is
225:25 - payment status status
225:27 - okay so the status right now is not paid
225:29 - now to check
225:31 - so this is actually used
225:34 - widely when we use a switch case okay so
225:36 - in suitcase i have a status
225:39 - okay and then i'll i'm sorry
225:42 - in such case we have a status and then
225:45 - over here the first case is
225:48 - case payment status
225:52 - dot not paid and if that is true
225:56 - then we want to to do something
226:02 - and then similarly for the other two
226:04 - statuses
226:05 - okay so now you might be thinking that
226:07 - why do we use
226:08 - uh enum even when we can simply write it
226:12 - use it as a string or as an integer okay
226:15 - so
226:16 - enum is used for standardizing the
226:18 - values okay so
226:20 - now suppose over here if you have the
226:23 - stay
226:34 - santa
226:42 - okay so now suppose over here the status
226:45 - is
226:46 - not paid okay and in the
226:50 - switch case we are checking switch and
226:53 - then
226:53 - case and the case is not
226:57 - paid okay so you can see this is a
227:00 - common mistake that we can do like over
227:03 - here we have a capital p
227:05 - over here we have a small p and using
227:07 - enum we can avoid all these
227:09 - types of mistake also so that is another
227:13 - benefit of using
227:14 - enum okay so that was about enum i hope
227:18 - everything was clear
227:19 - thank you welcome to programming
227:23 - knowledge
227:24 - so in this video we are going to discuss
227:26 - about error handling in dart
227:29 - and you might be thinking why we are
227:31 - using this editor instead of the dot pad
227:34 - and the reason is that in dart pad it
227:36 - automatically handles the
227:38 - exception okay and as we are discussing
227:41 - about
227:41 - error handling so we need to see the
227:43 - errors okay
227:45 - not all the errors but maximum errors in
227:47 - the dart pad
227:48 - is handled by itself okay so the concept
227:51 - of error handling is same as in any
227:53 - other object oriented programming
227:55 - language
227:56 - okay we have a try and then we have a
228:00 - catch
228:01 - okay and then this catch block takes an
228:04 - exception
228:05 - okay and if you don't know what is an
228:07 - exception so that means that is a
228:10 - technical term used for
228:11 - errors okay so in your program if there
228:14 - is an error then it is referred to an
228:16 - exception
228:17 - okay so and in the catch block we deal
228:20 - with
228:21 - the exception
228:24 - okay so now let's try creating an error
228:27 - okay and without this try and catch
228:29 - block
228:30 - so i'll use the most popular example for
228:33 - errors
228:33 - for creating errors that is division by
228:36 - 0
228:37 - okay so i'll create a variable a 10
228:40 - sorry it should be 10 and then
228:47 - and then another variable b that is 0
228:51 - and then in variable c i'll
228:54 - store the quotient
228:57 - so a by b okay and then i'll print
229:01 - c so now let's try running this and see
229:04 - what is the
229:05 - answer and you can see we are getting
229:09 - infinity as the answer okay so that is
229:12 - because whenever we divide
229:14 - by zero in dart it automatically gets
229:17 - converted
229:18 - to a double value okay and in the double
229:22 - data type
229:22 - in that we have a certain value for
229:25 - infinity
229:26 - so as this will give an output of
229:29 - infinity so it is automatically
229:31 - converted
229:31 - into double and the infinity value is
229:34 - assigned to this variable c that is why
229:36 - we are getting infinity as the output
229:39 - okay so to prevent from the changing of
229:42 - data types
229:43 - we need to add a tilde symbol over here
229:47 - so now let's try running this again okay
229:49 - and now since the
229:50 - it is not being converted we should get
229:52 - an error okay and you can see
229:54 - we are getting an error and as i told
229:57 - error is referred as
229:58 - exception so there is an unhandled
230:01 - exception
230:02 - and that is integer division 0 exception
230:06 - okay that means it is very much
230:07 - understanding that we have divided by
230:09 - zero and that is why we are getting this
230:11 - exception
230:12 - okay but now suppose this exception is
230:15 - in an
230:15 - app and the user sees this error message
230:19 - so he might
230:20 - not be able to understand what this
230:21 - means okay so at
230:24 - that places what we do is we surround
230:27 - them with a try and catch block
230:30 - okay so over here a try and every try
230:33 - block needs
230:34 - to be followed by a catch block okay and
230:36 - then it takes an
230:37 - e that is the extra exception and that
230:40 - will be an object of this
230:42 - exception okay and then instead of
230:45 - printing
230:45 - these things i'll simply print
230:51 - division by zero
230:55 - is not possible
230:58 - okay and now let's try running this
231:00 - again
231:04 - and you can see that the catch block
231:08 - has been executed and it is printing
231:10 - division by zero is not possible
231:13 - okay so this is what happens normally in
231:15 - try and catch block
231:16 - the we keep the code where we expect it
231:20 - to find some error inside the try block
231:23 - okay and if some error is found then the
231:26 - terminate
231:26 - execution is terminated then and there
231:29 - and the
231:30 - catch block is executed instead
231:33 - okay so this is the use of try and catch
231:35 - block and this is how we generally use
231:37 - try and catch block in most of the
231:39 - programming languages
231:41 - okay so now in dart there is another
231:44 - thing that it provides us
231:45 - okay and that is for specific exception
231:49 - handling that means
231:50 - if it is a division by zero exception
231:53 - then we will handle it differently
231:55 - otherwise we will handle it differently
232:00 - okay so for that what i'll write over
232:03 - here is
232:04 - on okay so on is a keyword in dot
232:07 - and then the exception name integer
232:13 - division by zero
232:17 - exception okay so if this is the case
232:20 - that means integer division by
232:21 - zero exception is the case then we will
232:24 - then this
232:25 - statement will be printed so let's try
232:27 - running this
232:31 - and you can see division by zero is not
232:34 - possible that is inside our this
232:36 - on block okay now along with this let's
232:39 - try to
232:40 - let's try and check if we can have
232:42 - another catch block or not
232:44 - okay so now inside this i'll simply
232:46 - print
232:49 - another catch block
232:52 - and let's run this and see what happens
232:57 - okay so you can see only the on block is
233:01 - being printed and not
233:02 - the catch block means if the exception
233:05 - is of this type then only this block
233:07 - will be executed
233:08 - and not the catch block and if the
233:11 - exception is
233:12 - not of this type then only catch block
233:14 - will be executed
233:16 - okay so now let's create another
233:18 - exception i'll comment this
233:19 - out for now
233:23 - and i'll create a list let's say
233:26 - s is equal to 1 comma 2 comma 3 comma 4
233:31 - and i try to print the value
233:34 - out of index okay so that means s4
233:38 - where the list has index only till three
233:42 - zero one two and three so let's try
233:44 - executing this and see
233:51 - and now you can see it is giving me some
233:53 - different type of errors which is not
233:55 - actually an error but it isn't warning
233:57 - and that is because over here i have
233:59 - forgot to give the data type now let's
234:01 - try running this again
234:04 - and you can see the error has been
234:06 - created over here and since it was not
234:09 - of this type so this block is not
234:10 - executed
234:11 - instead the catch block is executed
234:15 - okay so this is how we handle error
234:17 - specifically means
234:19 - handle error for specific exception in a
234:22 - specific way
234:23 - okay and suppose if we want to get an
234:26 - object over here also
234:27 - so after this what we need to do is
234:30 - simply write
234:31 - catch e okay so that means when this is
234:35 - the exception then the exception will be
234:37 - catched
234:38 - over here and then inside this we can do
234:40 - whatever we want to do with
234:42 - this e block okay
234:45 - so this was about to try catch and this
234:48 - is specific error handling
234:50 - now the next thing that we generally
234:53 - discuss in error handling is
234:54 - a finally block okay so that means
234:58 - whether the try block is executed
235:00 - completely
235:01 - or if there is some exception and a
235:03 - catch block is
235:05 - executed no matter what is the case
235:08 - after this whole part is over
235:11 - finally block will always be executed
235:15 - okay so let's see print
235:20 - always executed
235:23 - okay and now let's try running this
235:29 - and you can see the catch block has been
235:31 - printed means the statement inside the
235:33 - catch block has been printed
235:35 - and the final block has also been
235:38 - executed
235:39 - okay so this was the case when there is
235:41 - an error
235:42 - now let's see if there is not an error
235:45 - okay then as i said this try block
235:49 - should be
235:51 - executed and then the finally block
235:53 - because that is
235:54 - always executed okay so this was about
235:57 - finally block okay so the last
236:00 - thing about exception that we need to
236:03 - discuss is creating a custom
236:05 - exception okay so for that i'll create a
236:08 - custom
236:09 - exception class okay since we are
236:11 - studying an
236:12 - object-oriented programming languages
236:14 - most
236:15 - of our working will be done via
236:18 - class okay so i'll create a class
236:22 - age exception okay which will throw an
236:25 - error when the age is below zero which
236:28 - is not technically possible
236:30 - so class age exception implements
236:34 - okay so this is the way of inheriting
236:37 - another class properties okay or our
236:39 - abstract
236:40 - class to be more specific implements
236:43 - exception okay so we have an exception
236:46 - class
236:46 - already inside that okay now inside this
236:50 - all we need to do is create a
236:52 - define our method string
236:55 - err msg or you can name it
236:58 - as and how you like okay so
237:02 - what it basically does is by
237:03 - implementing this exception
237:06 - we are basically able to throw this type
237:08 - of exception okay and whatever we do
237:10 - inside this doesn't matter with the
237:13 - throwing of exception okay this is our
237:16 - custom choice what we want to do with
237:17 - it okay so over here this will simply
237:21 - return
237:22 - h cannot be zero
237:26 - it cannot be less than zero
237:31 - okay so now over here
237:35 - let's see i'll remove this
237:40 - thing from here and now
237:43 - over here i'll create a variable
237:47 - a vra is equal to
237:50 - minus 10 okay so that means
237:53 - if a stands for h so i'll check if
237:57 - a is less than
238:01 - 0 then i want to call this exception
238:04 - okay so to call this
238:06 - exception there is another keyword throw
238:08 - which creates an
238:09 - exception and throws it to the catch
238:12 - block if it has any
238:13 - or to the user if we don't surround it
238:15 - with a try and catch block
238:17 - so throw and then we write
238:20 - age exception
238:24 - okay so now let's see what happens
238:33 - and you can see we got an exception with
238:36 - the exception was thrown over here
238:38 - that's why the catch block got executed
238:41 - and the finally always gets executed
238:44 - okay so this was about
238:45 - error handling in dot thank you
238:49 - welcome to programming knowledge so in
238:51 - this video we are going to discuss about
238:53 - asynchronous
238:54 - operations in dot okay so the
238:57 - question that arises is why asynchronous
239:00 - operations
239:02 - so the answer to that would be a
239:04 - synchronous operations
239:05 - let your program keep running while
239:08 - waiting for another
239:10 - operation to finish okay so let's say
239:13 - for example
239:14 - we want to store data in our server
239:18 - so this type of operation doesn't
239:20 - execute instantly but might
239:22 - take some time depending upon the
239:24 - internet speed or
239:25 - size of data etc so if we don't use
239:29 - asynchronous operation
239:30 - user will have to wait until our program
239:34 - is interacting with the server
239:36 - which will create a bad user experience
239:39 - so to prevent that we use asynchronous
239:42 - operations
239:43 - and for this purpose that provides us
239:46 - three
239:46 - special keywords to use they are future
239:50 - a sink and a weight
239:53 - so first we are going to discuss about
239:57 - future okay so a future represents the
240:00 - result of an
240:01 - asynchronous operation and can have two
240:04 - states only
240:05 - either uncompleted state or completed
240:09 - state
240:10 - so how this works is when we call an
240:13 - asynchronous function
240:14 - it returns a uncompleted future
240:18 - and then future is waiting for the
240:21 - functions
240:22 - asynchronous operation to finish or
240:25 - throw an error
240:26 - and soon as it finishes or throws error
240:30 - the future state
240:31 - changes from uncompleted to completed
240:35 - okay so let's
240:37 - take an example and the keyword future
240:41 - we have capital f in it okay so let's
240:44 - say we have a
240:45 - future method a future function we call
240:48 - it
240:50 - fetch user data
240:58 - and what it basically does is return
241:04 - future dot delayed
241:07 - okay so this means that using this
241:10 - delayed
241:11 - method we can delay the process for some
241:13 - times
241:14 - that is equivalent to sleep in
241:17 - multi-threading in java
241:19 - or in any other common programming
241:21 - language
241:22 - i mean object oriented programming
241:24 - language
241:25 - okay so then we have another class
241:28 - called duration
241:29 - and it takes all the time parameters
241:32 - that is seconds minutes hours days
241:36 - okay so for now suppose we assume that
241:39 - our
241:40 - program will take two seconds to
241:43 - interact with the server so
241:45 - i'll give it a seconds
241:48 - and that is two that means i this
241:52 - will wait for two seconds and then start
241:54 - executing okay and
241:57 - we are doing this because we have
241:59 - assumed two seconds to be the time
242:01 - of our program to be interacting with
242:04 - the server
242:05 - okay so after this we have an unnamed
242:08 - function
242:09 - which contains the code that will be
242:11 - executed after
242:12 - this delay of duration two seconds
242:16 - and simply i wanna print data
242:21 - okay so this is our function now we can
242:24 - also
242:25 - specify the return type of the future
242:28 - okay
242:28 - now over here in this fetch user data i
242:31 - have a return keyword but it is not
242:34 - actually returning any data it is simply
242:36 - printing the
242:37 - word data that means i am not returning
242:40 - anything
242:41 - and if i am not returning anything then
242:43 - we all know the keyword which is
242:44 - void which means this function will not
242:47 - return
242:48 - any data now i'll comment this out for
242:52 - now okay now after that i'll call this
242:55 - method
242:56 - fetch user data
243:03 - and after that i can say have a print
243:06 - statement
243:09 - switching user data
243:13 - okay so now let's try running this
243:20 - okay so now you can see we have fetching
243:23 - user data
243:24 - first and then data but actually
243:27 - according to the convention we have
243:29 - first called fetch user data which is
243:31 - this method so this
243:32 - should be printed first so that means
243:35 - our
243:36 - delay function is working fine and that
243:38 - is
243:39 - how the asynchronous functions work
243:42 - that means over here if there is a delay
243:45 - of two seconds it will not wait
243:48 - for two seconds to execute the rest of
243:50 - the code
243:51 - it will directly start executing the
243:53 - rest of the code and
243:55 - as soon as this finishes the future
243:58 - states
244:00 - become completed and it hardly affects
244:02 - the
244:03 - rest of the execution of the program so
244:07 - then this function is called an
244:08 - asynchronous function okay that means
244:11 - our program is still running
244:14 - and not caring about the completion of
244:17 - this function
244:18 - means the completion of execution of
244:21 - this function
244:22 - okay so this is how we use futures
244:26 - okay so the next thing that we are going
244:28 - to discuss is a sync
244:30 - and await so these keywords provide a
244:33 - declarative way to define our sync
244:36 - function
244:36 - and use the result okay so let's say
244:40 - this function remains same and instead
244:43 - of printing data now it actually returns
244:45 - something and which is eventually a
244:48 - string
244:49 - okay so means after two seconds data
244:51 - will be returned
244:53 - okay and now if it is returning string i
244:55 - need to change
244:56 - this to string okay
244:59 - and now after that over here i'll create
245:03 - another method which is
245:06 - string and i'll call it user message
245:12 - okay anything that we like
245:16 - and then what it basically does is where
245:19 - data
245:21 - is equal to fetch
245:26 - user data means we are calling this
245:29 - method
245:32 - okay and then i am simply printing this
245:36 - uh simply returning a string because we
245:39 - have a string return type here
245:41 - return data
245:45 - and now in our main method all we do is
245:48 - we remove all these
245:50 - thing and we write print
245:56 - user
245:59 - msg okay now over here you can see it is
246:02 - giving us an error so all we can do is
246:05 - surround it inside quotes and do string
246:08 - interpolation
246:09 - okay so now uh dart will infer that it
246:12 - is a string
246:13 - so now let's try running this and see
246:16 - what is the output
246:21 - okay so as according to the convention
246:26 - the output should be data but instead of
246:28 - that we are getting a
246:29 - future of string that means as i earlier
246:33 - said if we execute a future it returns
246:36 - a future and that is in
246:39 - uncompleted state and it is expecting to
246:42 - be completed or thrown error
246:44 - okay so now over here you can see
246:47 - what basically happened was that this
246:49 - function was executed
246:51 - and as this is a synchronous operation
246:53 - it didn't wait for this function to
246:55 - finish
246:56 - and returned the data and why
247:00 - and since this this was not yet finished
247:03 - it returned the uncomplete state of
247:06 - future and that is why we are getting
247:09 - such type of output okay so this is what
247:12 - we call a
247:13 - uncompleted future okay and completed
247:16 - future
247:17 - has a proper accurate value okay
247:21 - so i hope you are understanding what i
247:22 - am trying to say and now to prevent such
247:26 - type of error what we need to do is we
247:28 - will use the async
247:29 - and await keyword okay so what a weight
247:32 - keyword basically does is
247:34 - that it will wait for this function
247:38 - to execute or basically it will wait for
247:41 - this function's future to be of
247:44 - completed state
247:46 - okay and then this await function is
247:49 - giving an error over here and that is
247:51 - because
247:52 - a weight function never goes without
247:55 - a sync function okay a sync end of it
247:57 - always go together
247:59 - okay if we write a wait and don't write
248:02 - a sync it will give us an error
248:04 - however vice versa will not give an
248:06 - error and
248:07 - that is because a sink is just
248:10 - allowing that function to use a weight
248:13 - and then if we don't use a weight then
248:15 - that is not a problem
248:16 - but if we use a weight and we have not
248:19 - allowed that function to use of it
248:21 - then that thing will give us a problem
248:25 - okay i hope you are understanding these
248:28 - things
248:29 - now as you can see this is now a
248:31 - asynchronous function
248:33 - and over here also you have seen a
248:35 - asynchronous function but
248:37 - the difference between these two
248:38 - asynchronous functions were
248:40 - this asynchronous functions function
248:43 - returns a future
248:44 - while this asynchronous function is
248:46 - returning a string
248:48 - and that is why we are getting a error
248:50 - over here
248:53 - because asynchronous functions always
248:56 - return a future
248:58 - okay so instead of string this will now
249:00 - be
249:01 - future string
249:13 - so now it is a future string and
249:16 - since it also will now return over here
249:20 - uh uncompleted state of future
249:23 - and we want a completed state of future
249:25 - that means we want some actual
249:28 - result we will use a weight over here
249:30 - also
249:31 - and now since this is using a weight we
249:33 - need to give
249:35 - a sink over here keep in mind a sink is
249:38 - always after the ending parentheses
249:41 - and before the opening
249:44 - curly braces okay so now let's try
249:47 - running this program and now
249:49 - instead of getting this instance we
249:52 - should
249:52 - be able to see this data being printed
249:56 - so let's see
250:01 - and you can see as soon as the execution
250:03 - is completed
250:04 - it waits for 2 second and then data is
250:07 - being printed
250:08 - so it is waiting for two seconds because
250:10 - over here we have used a weight which is
250:12 - making
250:12 - the program stop for two seconds until
250:15 - this
250:15 - has a completed state of future and the
250:19 - same goes over here
250:22 - so this were all the basics about future
250:25 - async and await okay so i hope
250:28 - everything was clear
250:29 - thank you welcome to programming
250:33 - knowledge
250:34 - so in this video we will come back to
250:36 - flutter from dot
250:37 - and continue our discussion where we
250:40 - left
250:41 - so in our last flutter video the love we
250:44 - discussed about image dot asset
250:47 - so in this video we are going to discuss
250:50 - about
250:51 - another type of image and that is image
250:54 - dot network okay so what it basically
250:57 - means
250:57 - is that you can display any image from
251:00 - the internet
251:01 - in your flutter application okay so for
251:04 - that
251:05 - i'll remove this child completely from
251:07 - here
251:09 - add another child and that is image
251:13 - dot network okay and then we need to
251:17 - give a
251:17 - src which is actually the
251:21 - url of the image okay so
251:24 - i have a url copied
251:27 - you can pick any url from the internet
251:32 - okay now if i save this i should be able
251:35 - to see this image
251:37 - on my screen and you can see this it is
251:40 - a
251:40 - simple image of a burger with a red
251:42 - background
251:45 - okay so now the properties that we
251:48 - discussed in image dot
251:49 - assets are also applicable in image dot
251:53 - network and there are a few more things
251:55 - which were there which were present in
251:58 - image asset but i have
252:00 - intentionally left that to discuss in
252:02 - image dot network because it makes more
252:04 - sense over here
252:06 - okay so for that first a quick
252:08 - recapitulation about
252:10 - frame builder so as i told as we
252:13 - discussed in our previous video
252:16 - frame builder takes four properties
252:19 - first is build context context
252:24 - then a widget child
252:30 - then a frame and then
252:33 - boot is a sync
252:38 - loaded okay and then it needs to return
252:42 - a widget
252:45 - okay so just to see the difference of
252:47 - this frame builder i'll simply add a
252:49 - padding
252:54 - okay and it will have a padding of
252:57 - let's say const as insets
253:01 - i'm sorry
253:06 - edge inserts all and let's say 20.0
253:12 - and the child is our child widget over
253:15 - here
253:18 - okay so now i'll format this
253:23 - and run and let's see the difference
253:27 - okay so now you can see we have a
253:29 - padding of 20 from all the sides
253:32 - okay let's make it 40 so that the change
253:34 - is significant
253:39 - and you can see we have a spacing from
253:42 - all the sides and that is the padding
253:44 - okay so this is about frame builder we
253:48 - have discussed it in the previous video
253:50 - about image dot
253:51 - asset now the next thing that we are
253:54 - going to discuss is
253:55 - a loading builder okay so the reason i
253:58 - have not discussed it
254:00 - in image dot asset because over there we
254:02 - don't
254:03 - actually load something we already have
254:05 - the image in our asset folder
254:08 - but while we are loading some image from
254:10 - network which means we are
254:13 - downloading stuff from some other server
254:16 - so that might
254:17 - take some time to load okay so that is
254:20 - when we use the loading builder
254:23 - okay so then loading builder also takes
254:26 - a build context
254:31 - i'll call it context
254:36 - then reject
254:39 - child and then image
254:43 - chunk i'm sorry
254:47 - image chunk event and that is
254:52 - the loading progress okay so
254:56 - this has all the data about the loading
254:59 - speed
255:00 - bytes already loaded and bytes remaining
255:03 - to load means
255:04 - all the numerical data means are stored
255:07 - in this
255:08 - image junk event okay so
255:12 - we can get all the data from this
255:13 - loading process okay anyways we are not
255:15 - going to discuss anything about that
255:17 - right now because that is not
255:19 - actually used that much okay so
255:23 - now over here we want to return a widget
255:25 - and that widget will be displayed until
255:27 - the image is being loaded
255:29 - from the server okay so for that i'll
255:33 - simply return
255:35 - inside a center
255:40 - inside a center i'll have a child and
255:42 - that will be a text
255:44 - view okay and the text view says
255:51 - loading image
255:57 - okay and why is this text we are giving
255:59 - an error
256:01 - okay so it should be a text not a text
256:04 - view
256:05 - i'm sorry now let's run this and see
256:11 - okay so you can see after some time the
256:13 - image is
256:14 - loaded okay now the next thing that i
256:17 - want to discuss
256:18 - is error builder so that means
256:22 - this widget will be displayed when there
256:24 - is an
256:25 - error the widget that we return in error
256:28 - builder
256:29 - okay so error builder it also takes a
256:32 - build context you will see in flutter
256:35 - whenever we are returning a widget we
256:37 - are generally
256:38 - taking a build context
256:42 - okay then an error object
256:46 - sorry object spelling is wrong
256:53 - and then a stack trace
257:02 - about the error
257:07 - okay and then over here i'll return
257:12 - inside our center
257:15 - the child will be text
257:20 - error occurred
257:25 - okay so now let's return this let's run
257:28 - this
257:29 - and before running i'll remove just one
257:31 - letter from here so that this url is
257:34 - invalid and this error builder
257:36 - should be called okay so let's see
257:48 - and you can see error occurred is
257:49 - written in the center and
257:51 - along with this you can also see in the
257:53 - terminal we are not getting any errors
257:56 - when
257:56 - which would be in the console if we
258:00 - don't
258:00 - have this thing right over here
258:04 - okay so let's see if i remove this error
258:07 - builder
258:09 - and then if i try loading uh invalid url
258:13 - we will get a error in
258:14 - over here in our console and you can see
258:18 - that
258:18 - and even on the screen so that means
258:21 - that the error handling has also been
258:24 - done
258:25 - internally when we use a error builder
258:30 - okay so that was about
258:34 - image network and all the other things
258:36 - that were discussed in image dot
258:38 - asset is also applicable in image dot
258:40 - network these were a few new things
258:42 - okay so now these are not the only
258:46 - types of images that we have in flutter
258:49 - there are two more
258:50 - that is image dot file and image
258:53 - dot memory okay so
258:57 - we will discuss about those when we
258:59 - cover little bit more
259:01 - about basics like working with files in
259:05 - flutter and working with
259:07 - base64 and stuff like that okay
259:10 - so this was about image dot network
259:14 - and now since we are discussing images
259:18 - there is another way to display an image
259:20 - inside a container
259:22 - okay and that is inside a decoration so
259:24 - inside a decoration we have our simple
259:27 - box
259:27 - decoration okay now this box
259:30 - decoration has a property image
259:34 - and this image takes a decoration image
259:38 - widget
259:39 - okay so over here i'll write a
259:40 - decoration image
259:43 - and then inside the decoration image
259:45 - image is required part
259:47 - okay and then over here we simply can't
259:50 - write
259:50 - the url for network image or the
259:54 - path for asset image okay for that over
259:57 - here we have
259:58 - different widgets suppose if i want to
260:01 - display a
260:01 - asset image so i'll write asset image
260:05 - that is the widget name and then over
260:07 - here the first thing should be the
260:10 - path so that is asset
260:14 - and then gshf dot png
260:18 - now let's run this and see
260:23 - and you can see the image is over here
260:25 - now what will happen if we will apply
260:28 - padding to this container that will not
260:31 - be a pla
260:31 - applicable for this image because this
260:34 - image is a decoration to the
260:36 - container and not a child to the
260:39 - container
260:40 - okay so there's a difference between
260:42 - decoration and a child
260:44 - okay now similarly for
260:48 - our network image we have network
260:51 - image and then over here goes the url
260:55 - okay so
260:56 - you can add the url over here and then
260:59 - it will be pretty much the same we we
261:02 - will be able to see the image
261:04 - on the screen okay and now we apply all
261:08 - the properties
261:09 - to the image like
261:12 - fit and stuff so that is not inside this
261:16 - asset image that is inside this
261:18 - decoration image
261:20 - okay so over here i'll i can have that
261:22 - fit
261:23 - and then all the other stuff that i had
261:26 - in
261:26 - image dot asset and image dot network
261:29 - not all but
261:30 - most of them okay so suppose if i write
261:35 - fit height and let's see what happens
261:38 - and format it save it
261:42 - and you can see the same properties as
261:44 - we discussed in image dot asset
261:46 - okay so this was yet another way how to
261:49 - display a image
261:50 - in flutter okay the method you display
261:53 - an image may vary according to your
261:55 - needs
261:56 - so this was for the video thank you
262:00 - welcome to programming knowledge so in
262:02 - this video we are going
262:04 - to discuss about list views in flutter
262:07 - okay so list view is the scrollable
262:10 - widget the most commonly used
262:12 - scrollable widget that we use in flutter
262:15 - and
262:15 - inside that we show a child one after
262:18 - another
262:19 - okay so for that first thing that i'll
262:23 - do is i'll remove this
262:25 - decoration box decoration thing
262:29 - okay and then i'll not give the height
262:32 - to infinity but
262:33 - to 300.0 okay so that are smaller size
262:37 - so that in
262:38 - less less child only we can see the
262:41 - scrollable effect
262:43 - okay so now let's give it a child and
262:45 - the child will be list
262:47 - view okay so now this list view takes
262:51 - our children
262:52 - same as we have in columns or rows
262:56 - okay now simply i give a text and that
262:59 - says
263:01 - programming
263:04 - knowledge i'll copy this
263:11 - and paste it a few times
263:14 - format it and now let's see what happens
263:19 - okay so now you can see i have
263:22 - this text printed four times but it we
263:26 - are not actually able to see the scroll
263:28 - level effect
263:29 - i'll reduce it to 50. now let's see what
263:31 - happens
263:33 - and yes you can see now we are having
263:36 - six texts over here but we can actually
263:39 - see only three
263:40 - and the rest are in scroll level so if i
263:43 - scroll i am able to see all the other
263:45 - lists
263:46 - okay so now yes it is not looking very
263:48 - beautiful but
263:50 - for understanding purpose it is adequate
263:53 - okay so this is the scrolling purpose
263:55 - now we can also
263:56 - change the scrolling direction we have a
264:00 - axis okay or let us say scroll direction
264:04 - yes and it has a axis enum
264:08 - okay and then over here we have two
264:10 - values horizontal and vertical
264:12 - by default it is vertical we can change
264:14 - it to horizontal
264:16 - now let's see what happens
264:20 - and you can see it is scrollable in
264:23 - horizontal direction
264:25 - okay so now another thing that we have
264:28 - in a list
264:29 - view is a padding okay so we can add a
264:32 - simple padding construct
264:35 - inserts all 10.0
264:41 - let's save and see what happens
264:44 - okay so over here the common confusion
264:47 - is that
264:48 - this padding is for in between each
264:51 - children but that is not the case
264:53 - actually it is for the entire list view
264:57 - okay so now uh generally when we use
265:01 - list view we actually have a list of
265:03 - items and then we want to show
265:06 - widgets according to that okay so now
265:10 - for that what we basically do is
265:12 - let's first consider having a list okay
265:15 - so i have a list
265:16 - of let's say type string
265:20 - and they are called list items
265:24 - okay and they have something like a
265:29 - comma b or maybe it will be better if i
265:32 - just make it comma two comma three comma
265:35 - five
265:35 - six seven eight nine zero
265:39 - and change the type to int
265:43 - okay so now we have a list okay that has
265:47 - numerics one till zero can we want to
265:51 - display it in a list
265:52 - okay so over here this children
265:56 - over here we can we can't simply write
266:00 - list items okay because that is invalid
266:04 - because this
266:04 - children expects a list of
266:08 - widgets and what we are actually giving
266:11 - here is a list of
266:13 - integers okay so this is a common
266:15 - mistake that
266:17 - developers make okay so there's a way
266:20 - around what we can do is
266:22 - we can use the map function that we have
266:25 - in a list
266:26 - okay so what map basically does is it is
266:29 - like a for each loop
266:30 - it will give you each item inside the
266:33 - list and then we can
266:34 - perform specific actions related to that
266:37 - okay so map and then over here this e
266:41 - will contain the integer means each
266:43 - integer
266:44 - one by one okay and then over here
266:47 - instead of
266:48 - null i want i will return the
266:51 - widget that i wanna show here that i
266:54 - wanna show in my list
266:55 - okay so i'll simply write return
267:00 - our text widget maybe okay and the text
267:04 - says
267:08 - count and then string interpolation
267:13 - e okay and then after that over here
267:17 - dot to list okay so what we have
267:20 - basically done over here is that we have
267:23 - mapped
267:23 - all the items of list view okay and for
267:26 - every item we have returned our text
267:29 - widget and then we have finally
267:30 - converted
267:31 - all the widgets to a list and then that
267:35 - list is given as a
267:36 - char children in this list view okay so
267:39 - now let's see what happens
267:43 - and you can see count 1 count 2 count 3
267:46 - count
267:47 - 4 means as we expected it to be ok now
267:50 - suppose i want to give it a little bit
267:52 - spacing so what i'll do is
267:57 - i'll wrap it with a padding and
268:00 - all sides should be 10 and then if i
268:03 - save this
268:05 - so now you can see it is having some
268:08 - problems in spacing and padding i'll
268:10 - remove this for now
268:11 - okay that is just for understanding
268:13 - purposes so now you can see
268:15 - count one count two till from here till
268:19 - count zero okay so this is how you
268:22 - display a
268:23 - predefined list of dynamic
268:27 - data type as a list of widgets using a
268:30 - list view
268:32 - okay then after that we also have a few
268:35 - things such as
268:36 - key okay so then it also takes
268:39 - a key now the basic use of key is that
268:42 - we can use the same key in any other
268:45 - list and then we can
268:47 - manage both the scrolling of both the
268:50 - lists
268:51 - at the same time okay so that is the
268:53 - basic use of key
268:55 - and then there are other things that we
268:57 - don't need
268:58 - as such but when we will do some
269:01 - projects then we will see
269:02 - all the other features of list view also
269:05 - thank you welcome to
269:08 - programming knowledge so in this video
269:11 - we are going to continue
269:13 - our discussion on list views in flutter
269:16 - so in the previous video we saw one
269:18 - method to use a list view
269:20 - in flutter in this video we are going to
269:23 - see another method and that is by using
269:25 - the
269:26 - builder named constructor that we have
269:29 - for list view in flutter okay so
269:33 - for that i'll first of all remove this
269:37 - list view from here
269:39 - and then i'll write list view
269:44 - dot builder okay so now this
269:48 - builder takes a few parameters some
269:51 - parameters which are necessary to be
269:53 - given first
269:54 - is the length of the list okay so that
269:58 - is referred as item count
270:00 - okay and now we are referring to our
270:02 - this list
270:03 - items so i will give the length of that
270:07 - okay and we know to get the length of
270:09 - any list we have a
270:12 - keyword called length in flutter okay
270:15 - and then we need to give an item builder
270:18 - okay that means how and how each item
270:20 - will look
270:22 - okay so now it takes a few parameters
270:26 - first is the build context as i
270:29 - said whenever we will be returning a
270:31 - widget or
270:32 - dealing with widgets we will be needing
270:35 - a context
270:37 - and to be more specific build context
270:41 - okay so this is automatically returned
270:43 - in this item builder
270:45 - okay and then the index okay means
270:49 - this index item is going to be displayed
270:52 - okay so now first of all i'll simply
270:56 - return a text
270:59 - that prints count
271:03 - okay and then using string interpolation
271:07 - i'll write list items
271:15 - index okay now let's try running this
271:24 - and you can see we have one two three
271:27 - and then
271:28 - means we have given this much space only
271:30 - that is why
271:31 - it is happening like that now i'll
271:33 - remove this space
271:35 - uh height part from here now let's see
271:40 - and you can see we have this list over
271:43 - here okay now it is
271:45 - obviously not scrollable because we have
271:47 - ample space
271:48 - left okay so now this is
271:53 - an easier way or to use the list view
271:56 - when we
271:57 - have the same widget for each item
272:01 - okay now since we are discussing about
272:03 - list view there is
272:05 - a special tile widget that is
272:09 - most commonly used in a list view okay
272:11 - and it
272:12 - is basically designed for being used by
272:14 - a list view
272:15 - and that is called a list
272:18 - tile okay so
272:23 - means its ideal purpose is to be the
272:26 - item of a list
272:28 - okay so first of all it takes a title
272:31 - okay and the title can title needs a
272:34 - widget
272:35 - so for now it is text
272:38 - count the same thing string
272:41 - interpolation
272:44 - list items
272:48 - index okay then along with a title it
272:52 - takes a sub title and it can be anything
272:56 - it means it also needs to be a widget
272:59 - it can be any widget so text and
273:02 - anything like programming knowledge
273:06 - then after that it takes a leading
273:10 - okay that means on the in the left
273:13 - side in the at the starting of the
273:16 - screen if you want to display something
273:18 - okay so that is called leading okay it
273:20 - also takes a widget for now i'll
273:22 - display icon that is what standardly
273:25 - people do
273:27 - and then inside that i'll use the i can
273:29 - see now and then
273:30 - let's say done that will give us a tick
273:34 - mark
273:38 - okay i need to format i need to give a
273:40 - semicolon
273:42 - format this now along with title
273:45 - subtitle leading we also have a trailing
273:48 - which will be in the opposite side of
273:50 - the leading which means at the
273:52 - end of the screen horizontally so
273:55 - i can also give this an icon widget
274:00 - okay inside that i'll use icons dot
274:03 - close that will give me a cross
274:04 - sign okay now along with this we
274:08 - also have on press or on tap yes
274:11 - we have on tap and on long press
274:15 - so on tap that is like any other on tap
274:18 - it takes a function
274:20 - simply i'll print
274:24 - pressed
274:27 - list items
274:31 - index
274:37 - okay it is giving
274:40 - error because that is a
274:44 - string that is an integer and we are
274:46 - trying to display it inside
274:48 - a print statement and print only takes a
274:51 - string
274:52 - okay so that problem is gone
274:57 - okay so now let's see how it looks
275:02 - and you can see we get a list now as i
275:06 - told in leading we have given this a
275:08 - done which is our tick mark
275:10 - and in trailing we have given a close
275:13 - which is this cross mark
275:14 - then this part is our title this part is
275:18 - our subtitle and if we press on it we
275:20 - are getting pressed one pressed
275:23 - to our and similarly okay so this
275:26 - is a list tile
275:31 - okay so now the last thing about list
275:34 - that i want to discuss is that it
275:37 - doesn't
275:38 - always need to be a proper list means
275:41 - suppose
275:42 - i have three different columns of varied
275:45 - things
275:45 - i can't say that all the things are
275:48 - uniform all the things
275:50 - are coming from a list means there are
275:52 - different things
275:54 - but i want them to be scrollable okay so
275:57 - in those conditions
276:00 - what we can use is we can wrap our
276:03 - body with a widget called as
276:07 - single child
276:10 - scroll view okay
276:14 - so what it basically does is that its
276:17 - child whatever we give inside
276:19 - its child no matter how long it is
276:22 - they all will act as a single scrollable
276:26 - screen
276:27 - okay so this is a way around when you
276:30 - don't
276:31 - actually properly use a list but we can
276:33 - use all the properties
276:35 - of a list okay so this will be about
276:39 - lists
276:40 - thank you welcome to programming
276:43 - knowledge
276:44 - so in this video we are going to discuss
276:47 - about
276:48 - another type of list view and the
276:51 - dismissible feature which is generally
276:53 - associated with list view
276:56 - okay so let's start
276:59 - first of all in my body i will give it a
277:01 - width of infinity
277:03 - so with this double
277:07 - dot infinity
277:10 - okay and then the child is
277:14 - list view dot
277:17 - separated okay so this is another type
277:20 - of list view which has a separator
277:22 - builder
277:23 - like in the list view dot builder we
277:26 - only had an
277:27 - item builder okay but over here in list
277:30 - view dot separated we also have a
277:32 - separator builder which means
277:33 - every item in the list will be separated
277:37 - by the widget returned
277:39 - to this separator builder okay so first
277:42 - of all let's add the
277:43 - item count and it will be
277:47 - list items
277:51 - dot length okay and then the
277:55 - item builder is simple it takes a
277:58 - build context
278:06 - okay and it returns
278:12 - so this wrong spelling returns
278:17 - a list tile
278:21 - okay and then over here in the title we
278:23 - can have
278:24 - the text and the text
278:27 - says count
278:32 - then we'll use the string interpolation
278:35 - inside curly braces we will write
278:39 - list items
278:42 - and then the index oh i forgot to give
278:45 - an index over here
278:47 - this method also takes an index
278:51 - okay then i'll return this over here
278:55 - this will go over here now let's format
278:58 - this
278:58 - and now let's also give a separator
279:00 - builder okay so when you hover around
279:03 - separator builder you see we
279:04 - get a build context and an integer which
279:07 - is the index
279:08 - so this means that for every item we can
279:12 - specify a different divider okay that is
279:16 - the power of this
279:17 - separator builder but over here we will
279:19 - simply use a
279:20 - single separator for all the items
279:23 - okay so build context
279:27 - context sorry that will be a comma
279:32 - int index and i'll use the arrow
279:35 - function and it returns a
279:38 - divider okay so we have not yet
279:41 - discussed about divider so divider is
279:43 - actually a widget that will
279:45 - just draw a faint horizontal line
279:49 - divider always draws a horizontal line
279:51 - in flutter
279:52 - so let's save this in c and now you can
279:55 - see we get
279:56 - the values and each value is
279:59 - divided by a divider okay so now you can
280:03 - see this is the standard color of
280:05 - divider but we can do a few changes with
280:07 - the divider like change the color
280:10 - so i can change the color to color start
280:14 - red now let's format this
280:17 - and see what happens and now you can see
280:21 - we have the divider in
280:24 - red now similar to list view dot builder
280:26 - it also has a
280:28 - padding okay so we can give it a padding
280:31 - con
280:32 - sorry the const will be in small c
280:36 - const edge insets
280:40 - dot all and that can be 10.0
280:46 - so now let's format it save it
280:49 - and then you can see each divider has a
280:52 - little bit space
280:53 - over there and that is because of the
280:56 - padding
280:57 - okay so this was about the list view
280:59 - separated which is the last
281:01 - type of list view okay so we also have a
281:04 - list view dot
281:05 - custom which takes a sliver delegate but
281:09 - still we have not discussed about sliver
281:11 - delegate so i'll
281:13 - do the list view dot custom part once we
281:16 - discuss the list view sliver delegate
281:19 - okay so moving on the next thing that we
281:22 - are going to discuss is about the
281:24 - dismissible feature
281:25 - okay so by that i mean that if i
281:30 - if i pull from the end to start
281:34 - on a list item it should be dismissed or
281:36 - maybe over here it shows a
281:38 - delete icon and then if i pull it from
281:41 - the
281:41 - right to left the item gets dismissed
281:45 - okay so that is a very common feature
281:47 - that we see with list views
281:50 - okay so to do so over here in item
281:53 - builder
281:55 - instead of returning a list to tile i'll
281:57 - return another widget
282:00 - okay and that is dismissible
282:06 - okay so now again this dismissible
282:10 - will let's give it the child a card okay
282:13 - so
282:13 - a card is another type of widget it is
282:17 - very much similar to container
282:20 - only difference is that it has an
282:22 - elevation
282:23 - means it also has a height in the z-axis
282:26 - okay so then i'll give the child as a
282:29 - card
282:30 - okay then card will take a margin
282:33 - again the margin let's say h
282:37 - inserts symmetric
282:45 - i'm sorry edge inserts dot
282:48 - symmetric okay and then in
282:52 - horizontal
282:55 - we give it uh let's say 15.0
282:59 - margin and in vertical
283:03 - we can give it a
283:06 - 4.0 margin i am doing so because we are
283:10 - already giving it a margin over here of
283:12 - padding over here
283:14 - that's why that's why i am reducing the
283:17 - margin
283:18 - vertically so let's format it
283:22 - now we have the card now inside this
283:26 - card we will add our child okay so the
283:30 - child
283:30 - will be for now a simple list tile
283:38 - can the title will be
283:43 - our text that says
283:48 - count and then string interpolation
283:54 - list items
283:58 - index let's format
284:02 - this save it and see
284:06 - okay so you can see over here it says
284:09 - that key
284:10 - should not be equal to null okay is not
284:13 - true
284:15 - so that me that error is because this
284:18 - dismissible
284:19 - takes a key which is not significant
284:23 - over here but it is necessary
284:25 - so over here i can simply write key and
284:28 - then
284:29 - key takes a key value okay so over here
284:33 - i can simply say value key
284:38 - okay and then over here it takes an id
284:40 - i'll write one two three
284:42 - okay that means this value key means it
284:44 - will generate a key from this value
284:47 - and it is assigned to this key okay that
284:50 - is just for removing the error
284:53 - now let's save this
284:56 - and now you can see we have this card
284:59 - over here this elevated thing
285:02 - okay so now i think we should remove
285:04 - this separator builder
285:06 - the purpose is understood over here and
285:08 - this
285:10 - can be changed to builder
285:16 - okay so now you can see we have this
285:18 - card over here for each item
285:22 - okay now after this the next thing that
285:25 - i need to do is for dismissible i need
285:28 - to add a on dismissed property
285:31 - okay so over here after the key
285:35 - i'll write on dismissed and at takes a
285:38 - function
285:39 - which has the direction means the
285:42 - direction in which
285:43 - the item was dismissed and then
285:47 - for now i we can simply print
285:50 - the direction okay we can change it
285:54 - according to the functionality needed
285:56 - later
285:58 - so let's save this and now let's try
286:02 - dismissing it so you can see this is
286:05 - dismissible
286:06 - and the value is being printed okay the
286:10 - direction is being printed so over here
286:11 - you can see dismiss direction dot
286:13 - end to start which means this is the end
286:16 - this is the start and dismiss direction
286:18 - is an
286:19 - enum okay now if i do it from
286:23 - here so now you can see it is like start
286:26 - to end
286:27 - so i think you are understanding what i
286:28 - am trying to do over here this is the
286:30 - feature i was talking about we can
286:32 - simply
286:33 - remove an item from a list with a little
286:36 - bit of animation
286:38 - okay and now however if i build this
286:40 - again i think all the items
286:42 - should return okay now let's
286:45 - rerun this that was giving us an error
286:53 - yes so you can see we have the list over
286:56 - here back
286:57 - now along with on dismissed we can
287:00 - specify a direction that will be
287:03 - used as the dismissed direction like
287:07 - right now in the app you can see the
287:11 - item can be dismissed from end to start
287:14 - and can also be dismissed from start to
287:17 - the end
287:18 - but i want only to dismiss it from the
287:20 - end to start
287:22 - so in that case what we can do is inside
287:25 - this
287:26 - dismissible we can add a dismiss
287:29 - direction
287:33 - okay not a dismiss direction just throw
287:35 - direction
287:36 - okay and over there over here we have
287:39 - just now seen
287:40 - we have our dismiss direction enum
287:43 - like this and then you can see this is
287:46 - the
287:46 - these are all the values down means when
287:49 - we pull the item down
287:51 - and to start means the names explain
287:54 - themselves
287:55 - okay and i want this to only be valid
287:58 - for end to start
288:00 - means the dismiss feature will only work
288:02 - when we try dismissing from the end to
288:05 - start
288:07 - okay now let's save this and see
288:10 - so now if i try dismissing it from this
288:13 - direction it will not work but however
288:16 - if i try it is missing from
288:18 - the end to start it will force your work
288:21 - because we have restricted the direction
288:23 - from end to start
288:25 - only now when we are dismissing you can
288:29 - see we have this background over here
288:32 - now in flutter we can also
288:36 - specify what should be the background of
288:39 - every item when being dismissed
288:41 - okay so the general convention would be
288:43 - to add a delete sign
288:46 - okay so let's do that
288:49 - we have a background named parameter
288:52 - it will it takes a widget and for now it
288:55 - is a container
288:58 - okay now the container should have a
289:01 - color
289:03 - and the color is red okay
289:07 - let's format this first now it takes a
289:10 - child the child is an
289:12 - icon which will obviously be a delete
289:14 - icon
289:15 - so i'll use the icons em and then delete
289:20 - and then the color should be
289:24 - colors dot white
289:28 - okay and then the size can be around
289:34 - 40.00
289:36 - okay let's format this now after that i
289:39 - want the containers item to be aligned
289:42 - to the right we since we are
289:45 - dismissing it from the end to start
289:48 - where the end represents the right
289:50 - i want the child to be aligned at the
289:52 - right
289:53 - so i'll add the alignment as right
289:57 - so i'll use the alignment tenon
290:02 - alignment dot center
290:06 - right that means in the center
290:09 - vertically and at the right horizontally
290:12 - okay and maybe let's add a padding from
290:15 - the
290:16 - end that is from the right otherwise the
290:19 - the the the delete
290:22 - icon will be at the end of the container
290:24 - means it will be sticking to the
290:26 - border of the container so let's add a
290:29 - padding
290:31 - and then again add a const
290:34 - before padding and margins because
290:37 - so it will not be builded again and
290:39 - again so
290:40 - const as insets
290:45 - dot only and it is only for write
290:51 - 20.0
290:54 - now let's save this and see
290:59 - so now when we dismiss this we can see
291:02 - we get this delete icon over here now
291:05 - this doesn't look very good
291:06 - because
291:10 - when we try to dismiss this it is not
291:12 - actually the
291:14 - card which is being dismissed it is a
291:16 - little bit surface
291:18 - beyond the cart which is dismissible
291:21 - okay so to fix that over here we can
291:23 - remove this padding from here
291:26 - and do a little bit design changes which
291:28 - is required
291:29 - but the purpose is fulfilled so i hope
291:32 - you understand how to use our
291:33 - dismissible
291:35 - okay and and one thing that i missed and
291:38 - dismissible was there is a confirmed
291:40 - dismiss option
291:41 - okay that means once the dismiss process
291:44 - has been done and still you want to
291:46 - confirm the user that
291:47 - are you sure you want to you want
291:50 - this to happen so then we can use this
291:53 - confirm dismiss
291:54 - okay so this will be for
291:58 - the video thank you
292:02 - welcome to programming knowledge so in
292:04 - this video we are going to discuss
292:07 - about our inbuilt function in flutter
292:09 - which is
292:10 - set state okay so what set state
292:14 - does is it informs flutter that the
292:17 - internal state of application has
292:19 - changed
292:20 - and probably we should rebuild the
292:22 - current interface
292:24 - means the current screen that the user
292:26 - is seeing
292:27 - which means that whenever we call the
292:30 - set state function
292:31 - this build method is executed once again
292:35 - okay so we will see what happens when we
292:38 - don't use set state and how set state
292:40 - comes to the rescue
292:42 - okay so first of all i'll remove that
292:45 - list
292:46 - i'll remove the entire body we don't
292:48 - need it over here
292:51 - okay and now i'll add our body a simple
292:54 - text in the center
293:02 - child is a text the text is
293:06 - count okay so let's create a
293:10 - count variable over here
293:15 - that is zero now i'll increase the
293:20 - size so that it is visible so i'll add
293:23 - the style parameter it takes a
293:25 - text style widget okay and then over
293:29 - there we have
293:30 - font size okay so i can make the font
293:33 - size
293:34 - 20. now let's format it
293:37 - save it
293:40 - and you can see we can see a zero in the
293:42 - center okay so
293:44 - now what i am basically trying to do is
293:46 - whenever i click
293:48 - on this button instead of printing
293:51 - fab pressed the counter should increment
293:56 - okay so this is exactly same as the
293:58 - starting
293:59 - project that we get when we create a
294:01 - flutter app
294:02 - okay so for that the simple process
294:05 - would be
294:09 - we can keep this print statement
294:13 - okay so the simple method would be we
294:15 - can write
294:16 - count plus plus
294:20 - now let's save this so
294:23 - now if i click on this button the
294:25 - counter should
294:27 - increment so let's see
294:30 - and you can see the print statement is
294:34 - executing
294:35 - but this count statement is not
294:37 - executing
294:38 - and that and i can say that by seeing
294:41 - in the counter over here it is still
294:43 - zero
294:44 - okay so now uh what happened over here
294:48 - was that we
294:49 - the incrementing operation was done
294:52 - but that was that is happening
294:55 - internally
294:56 - and it is not reflected on the screen
294:58 - okay so this
294:59 - is when we use set state now what
295:02 - happened over here was that the
295:04 - value of count changed internally but
295:07 - the interface has no response to it
295:11 - so to give so to get a uh
295:15 - so to get a expected response
295:18 - on the screen we can use the set state
295:20 - method
295:21 - so what i'll basically do is i'll simply
295:24 - use a
295:24 - write a set state
295:28 - over here
295:31 - so now another thing we can use is set
295:34 - state only when we use a stateful widget
295:36 - if we try using set state in a stateless
295:39 - widget probably it will not work and
295:41 - give you some errors
295:43 - okay so now over here what will happen
295:46 - that
295:46 - as soon as the value of count will be
295:49 - changed
295:49 - the set state method will be called and
295:52 - that means as i told you just now that
295:56 - the
295:56 - build method will be called and since
295:59 - the
296:00 - build method will be executed again this
296:02 - center will be executed again and then
296:04 - over here the new value of
296:06 - count can be seen okay so now let's
296:11 - try running this
296:18 - okay so now if i click on plus you can
296:21 - see the
296:23 - value is changing over here okay so that
296:26 - means we are getting the expected
296:28 - response
296:30 - okay so this is this is the place when
296:32 - we use set state
296:34 - okay now if you want you can keep
296:37 - this function
296:40 - inside set state also okay so it hardly
296:44 - cause
296:45 - changes anything but the general
296:47 - convention is to keep it
296:48 - inside set state the factors which
296:51 - actually change the state of the
296:54 - application
296:55 - should be kept inside the set state
296:57 - method
296:59 - okay so now let's save this again
297:03 - and then again it should work fine okay
297:07 - so you can see this was about set state
297:10 - it is a very important function and it
297:12 - will help you in a lot of places
297:16 - okay so the next method that we are
297:18 - going to discuss about
297:20 - uh it is not a discussion but rather an
297:23 - overview so the next method that we will
297:26 - see is the
297:27 - init state okay so it is
297:30 - similar to like onstart
297:34 - that we have in android if anyone is
297:36 - coming from android background
297:38 - so what it basically does is it
297:41 - it is generally used for initializing
297:44 - some controllers and parameters
297:46 - some global keys that we have in flutter
297:50 - okay so you might not be knowing what is
297:52 - a controller what is a global key in
297:54 - flutter but we will come to that later
297:56 - okay so to initialize such things we
297:59 - have a
298:00 - inbuilt function called init state
298:03 - okay and then over here it always have
298:06 - has a statement called a super dot init
298:08 - state
298:09 - so now this is super comes from the
298:11 - concept of oops a concept of inheritance
298:15 - so what basically is happening over here
298:17 - is
298:18 - that init state is already a method that
298:21 - is existing somewhere inside the flutter
298:23 - code
298:24 - okay and over here if we write super dot
298:27 - init state that means we are
298:28 - overriding that init state method in
298:32 - our init state method and that is the
298:34 - same reason we have a at the rate
298:36 - override over here okay so now in this
298:40 - init state first of all we have
298:42 - reference to the actual init state which
298:45 - is inside the flutter code
298:47 - that function will be executed and then
298:49 - after that all the
298:54 - initialization that
298:58 - we wanna do okay so over here only we
299:02 - deal with the
299:04 - shared preferences checking if a user
299:06 - has logged in
299:07 - previously like we have the remember me
299:09 - feature
299:10 - all those stuffs
299:13 - work within its state okay
299:17 - so then the next method that i am going
299:19 - to discuss about is
299:21 - the dispose method so it is similar to
299:26 - uh on stop method if you are coming from
299:29 - an
299:29 - android background okay so what it
299:32 - basically does is it
299:33 - it is used for closing all the existing
299:37 - things
299:38 - means uh disposing all the controllers
299:41 - disposing all the global keys again we
299:44 - will
299:44 - discuss about controllers and global
299:47 - keys later
299:49 - but since we are initializing them it is
299:52 - kind of understood that it is necessary
299:54 - to dispose them as well
299:56 - okay so for the same reason we have this
299:58 - dispose method over here
300:00 - and now the trick part is that over here
300:03 - we
300:03 - after this super statement we write all
300:06 - the code
300:07 - but in dispose we write all the code
300:10 - before the
300:10 - super statement and the reason is that
300:14 - when this method is called
300:15 - this page this my home app
300:19 - means like this class will stop
300:21 - completely
300:24 - okay so i hope you understood about the
300:26 - three methods
300:27 - init state dispose
300:30 - and set state okay and you can always
300:33 - refer to the
300:34 - documentation for a detailed explanation
300:36 - and better understanding
300:39 - thank you welcome to programming
300:43 - knowledge
300:44 - so in this video we are going to discuss
300:46 - about text
300:47 - field okay so text field is basically a
300:50 - widget
300:51 - in flutter which is used to take input
300:54 - from the user
300:55 - and by input i mean only text input
300:58 - okay so let's start so in the
301:02 - body inside our center with chat
301:07 - my child will be a text object
301:11 - sorry not a text widget but a text field
301:17 - okay then let's format it
301:20 - save it and now you can see we have our
301:24 - text field over here
301:26 - in the center okay so if i click on it
301:28 - then it gets
301:29 - selected and it is highlighted in blue
301:32 - color
301:32 - and then if i type anything it is shown
301:35 - in the screen
301:37 - okay so this is a text field now let's
301:40 - discuss about the properties of the text
301:43 - field
301:45 - okay so the first thing that we need to
301:48 - know is
301:48 - autocorrect so autocorrect is a named
301:51 - parameter
301:52 - that takes a boolean value that is true
301:55 - or false and as the name explains itself
301:59 - it enables auto correction in that
302:01 - specific
302:02 - text field okay so this
302:05 - is one the next thing is auto focus
302:10 - okay so uh generally means
302:14 - at the starting auto focus is false but
302:17 - we can
302:18 - always make it true i mean that the
302:20 - default value of autofocus is
302:22 - false so what autofocus does over here
302:26 - is
302:26 - that if we open the screen and nothing
302:29 - else is selected then this
302:31 - text field will automatically be
302:33 - selected
302:34 - that means this text field will
302:36 - automatically have the
302:38 - focus okay so over here i'll
302:42 - try running this and then you can see
302:44 - this will have the focus
302:46 - automatically okay so let's wait for the
302:49 - builder to finish
302:52 - and you can see it is automatically
302:54 - selected
302:55 - now if i remove this and then i
302:59 - try to restart this then that text field
303:03 - will not be selected
303:04 - automatically but we will have to do it
303:06 - manually
303:08 - okay so you can see as as we have
303:10 - commented out
303:12 - autofocus the text field is not selected
303:15 - and if we remove this comment then it
303:18 - will be selected
303:20 - so we need to do a hot restart
303:24 - and then you can see this text field is
303:27 - selected automatically
303:29 - okay so this was about auto focus
303:32 - now the next thing and we can say
303:35 - practically the
303:36 - most important thing in the text field
303:38 - is the controller
303:40 - okay so we are going to discuss about
303:42 - controller so
303:43 - by using this controller we can get the
303:46 - value that we give as an
303:48 - input in the text field we can define
303:51 - some preset value for the text field
303:54 - okay so let's see how to do those okay
303:57 - so to use a controller the
303:59 - for ideal way is to first define a
304:02 - controller outside and then use it
304:04 - in the text field okay so let's see
304:07 - first of all i'll
304:08 - declare a variable and that is called
304:11 - text controller
304:14 - okay so now the next thing is to
304:16 - initialize it
304:18 - and as we discussed in our previous
304:20 - video to initialize the ideal ways using
304:23 - init state so inside init state i will
304:26 - remove this comment
304:28 - and after the super statement i'll write
304:31 - text
304:32 - controller
304:36 - is equal to text editing
304:44 - controller
304:49 - okay so now if you are thinking why it
304:51 - is a text editing controller so if you
304:53 - will hover
304:54 - over this controller you can see it
304:57 - takes a controller which is of type
304:59 - text editing controller okay so now
305:02 - since we have initialized it we also
305:04 - need to dispose it
305:06 - and for disposing we will again use the
305:08 - inbuilt function in flutter
305:10 - called dispose
305:18 - so now in this pose as we discussed in
305:21 - the previous video we write the dispose
305:23 - statements before the super dot dispose
305:27 - so over here i'll write a text
305:28 - controller
305:32 - dot dispose
305:39 - okay so now our text controller is ready
305:42 - to use so i'll give that
305:45 - to this text field so text controller
305:49 - okay so now to trigger the printing
305:51 - function means to print
305:53 - the value inside this text field i'll
305:55 - add a floating action button
306:00 - so over here i'll simply used use an
306:03 - icon button
306:08 - okay
306:11 - and that sorry it has a icon
306:16 - and the for the icon i'll use the
306:20 - icon widget and inside that the icons
306:24 - enum and then i'll simply use that add
306:27 - icon which is the plus sign
306:31 - okay and then inside this i'll also
306:33 - write on pressed
306:36 - and in on pressed i'll print the value
306:39 - that is inside the
306:40 - text field okay so to print the
306:44 - value which is inside the text field we
306:46 - don't need to do much we simply write
306:49 - print statement and then the controller
306:51 - name
306:52 - okay text controller
306:59 - dot text okay so this text
307:03 - actually has the text which is inside
307:06 - the
307:06 - text field means the text given as an
307:08 - input from the user
307:10 - and plus i also want to point out that
307:13 - the
307:14 - underscore which we have before text
307:16 - controller makes it
307:17 - a private variable okay so i have
307:20 - already discussed this it was kind of a
307:22 - reminder
307:23 - and it is recommended by flutter that
307:27 - wherever possible we should always use a
307:29 - private variables we should always use
307:32 - private variables so now let's try
307:34 - running this
307:36 - i'll save this
307:39 - now if i click on plus icon this should
307:42 - get
307:43 - printed on my console so let's see
307:47 - and it is giving us an error and the
307:50 - error is
307:51 - because we are initializing the text
307:54 - controller in init state
307:55 - and when we hot reload it basically only
307:58 - executes the build method
308:00 - but this init method and dispose method
308:03 - are not executed
308:04 - okay so this is a common mistake that
308:06 - many people make
308:08 - and the way to fix it that instead of
308:10 - hot reload we can do
308:11 - hot restart okay so once it has
308:14 - restarted now if i enter something
308:17 - let's say my name and press on this
308:20 - icon button over here so you can see the
308:23 - output is being printed on my console
308:26 - so this is how we use a controller to
308:28 - get
308:29 - the text that is given by the user and
308:32 - use it as and what according to your
308:35 - requirement okay so now the another
308:38 - thing that we can do using
308:40 - controller is to set an initial value a
308:43 - setup
308:44 - preset value okay so for that
308:47 - what i can do is in the text controller
308:53 - dot text i will give the preset value
308:56 - so let's say the preset value is
309:00 - programming knowledge
309:04 - so this means that whenever this screen
309:07 - will open that
309:08 - my home app dot dot screen will be the
309:12 - end screen seen by the user then over
309:14 - there in the
309:15 - text field the initial value will always
309:18 - be
309:19 - programming knowledge and then after
309:21 - that the user can change it as and
309:23 - however he likes
309:24 - okay so let's restart and see this
309:28 - okay so once the app has restarted you
309:30 - can see the text field already has a
309:32 - value and that is
309:34 - programming knowledge which was set by
309:36 - us over here
309:38 - okay so this is the use of controller in
309:41 - a text field
309:42 - now moving forward the next thing that
309:45 - we need to know is this
309:46 - enabled okay so enabled basically
309:51 - also takes a boolean and it means that
309:54 - the text field is enabled or disabled
309:56 - for changing the values
309:58 - okay so by default it is always true
310:02 - but if we make it false then we will not
310:05 - be able to change the value of the text
310:07 - field
310:08 - okay so let's save this and see
310:11 - so now you can see it automatically got
310:14 - unselected and now if i try
310:17 - pressing this to select it or try typing
310:19 - anything nothing is happening
310:21 - because the enabled is false so now if
310:24 - we make it
310:25 - back to true or even remove this both
310:28 - are the same thing okay
310:31 - so let's save this and now if i try
310:35 - selecting this i am able to select
310:37 - and i am also able to edit so this was
310:41 - about
310:42 - enabled now the next thing is enabled
310:46 - interactive selection
310:49 - okay so this means that
310:52 - if the user long presses the text field
310:55 - then the entire text will get
310:57 - automatically selected
310:59 - and we will have an option to cut copy
311:02 - paste like the simple stuff that we do
311:04 - okay so this is by default to true but
311:07 - if we want we can make it false
311:09 - okay so let's save this and see so
311:12 - now over here if i press and hold
311:16 - so then i get an option to select all
311:19 - and paste so if i select all then we
311:21 - have the option to cut copy and paste
311:24 - and now if i make it false then i will
311:27 - not be able to
311:28 - do this things so let's make it false
311:32 - i'll restart
311:38 - okay so now if i press and hold nothing
311:42 - is
311:43 - popping up over here like paste and
311:45 - select or stuff like that so
311:47 - those things are prevented like this
311:50 - okay
311:51 - so now the next thing is enable
311:54 - suggestion okay so this is basically a
311:57 - keyboard thing we can't see it on the
311:59 - emulator because
312:00 - the keyboard doesn't pop over here so
312:02 - what it basically means
312:04 - is that when you are typing something
312:06 - then it will show you suggestions
312:08 - just above the keyboard like that you
312:10 - would be seeing in
312:11 - many other apps if you type some
312:13 - something suggested keywords maybe three
312:15 - suggestions or four suggestions
312:18 - are showed just above the keyboard so
312:21 - that is by default
312:22 - true and if you want we can make it
312:26 - false
312:29 - okay so this was one thing
312:32 - now the next thing is keyboard
312:35 - type okay so keyboard
312:39 - type defines what type of keyboard
312:42 - should be used for that
312:43 - text field okay so for that we have a
312:46 - enum that is text input type
312:51 - okay so now this text input type has a
312:54 - few values
312:57 - okay so let's see so the first one is
313:01 - date time so it will automatically pop
313:03 - out our date time selector then we have
313:06 - an email address that means
313:08 - requests a keyboard with ready access to
313:12 - add the rate and dot keys okay then we
313:14 - have a multi line requests the default
313:17 - platform keyboard but accepts new line
313:20 - with the enter key pressed
313:22 - okay so uh what this means is that by
313:24 - default
313:25 - if in the keyword keyboard you press the
313:28 - enter key
313:29 - it basically sends the message or means
313:32 - moves to the next text
313:34 - or something like that but if we have a
313:36 - multi line then what will happen that if
313:38 - we click on the
313:40 - enter button it will go to the next line
313:42 - okay so i hope you are understanding
313:44 - then the next one is simple number that
313:46 - will
313:47 - show us a numeric keyboard then a
313:50 - phone then that will also show us a
313:52 - numeric keyboard with
313:54 - ready access to asterisks and hash
313:58 - then text that is a simple keyboard url
314:01 - means it will have the ready access to
314:05 - backslash and dot keys values
314:08 - and then means it is all possible enum
314:10 - values
314:11 - then visible password means it is
314:13 - generally used for entering password
314:15 - where we have both
314:16 - numbers and letters on the same screen
314:20 - okay so you can put anything according
314:23 - to your choice
314:25 - let it be email address for now
314:28 - okay so this was one thing and then the
314:32 - last thing that i want to discuss
314:34 - in this video is obscure text
314:37 - so that means that if we it is by
314:40 - default always
314:41 - false but if we make it true then it is
314:45 - something like we see while entering
314:47 - passwords
314:48 - okay so if i save this
314:51 - then you can see our text has been
314:53 - obscured
314:55 - okay so this was about a text field
314:58 - now in the next video we will continue
315:01 - with a text field and discuss about
315:03 - decoration of the text field means
315:06 - whether it is a box what should be the
315:08 - hint text
315:09 - how to add a background color how to add
315:12 - a borders
315:13 - and stuff like that okay so this will be
315:16 - for this video
315:17 - i hope everything was clear thank you
315:22 - welcome to programming knowledge so in
315:24 - this video we are going to
315:27 - continue our discussion on text fields
315:30 - okay so in the previous video the last
315:32 - thing that we
315:34 - discussed was obsecure text which means
315:37 - if we write something it will
315:38 - show us only dots okay that means if i
315:42 - write
315:43 - the show over here then instead of
315:45 - showing rishabh it is
315:47 - simply showing us the dots
315:50 - okay so i'll remove this for now
315:54 - now the next thing uh rather important
315:57 - thing which we are going to discuss is
315:59 - decoration it means how we will decorate
316:02 - the
316:02 - text field so this decoration takes a
316:05 - widget
316:05 - called input decoration
316:10 - okay and then we will now discuss about
316:12 - the properties of input decoration
316:14 - okay so the first thing is content
316:17 - padding
316:18 - okay that means the padding which will
316:20 - be inside
316:22 - the text field means for the content
316:24 - inside the text field
316:26 - okay so as it is a padding it will take
316:28 - edge inserts
316:30 - so i'll write const
316:34 - edge inserts all and so as to mark a
316:37 - significant change i'll make it
316:40 - 30
316:43 - let's format and save and now you can
316:46 - see
316:47 - we have padding 30 pixels padding on top
316:50 - right left and all the sides so this is
316:54 - how content padding works okay now the
316:57 - next important
316:58 - thing is border okay means how to
317:00 - specify the border
317:02 - so there are three options to specify
317:05 - border i'll use the most common one
317:08 - okay and that is outline
317:13 - input border
317:18 - okay so now this takes a border radius
317:22 - okay so for border radius we'll use the
317:25 - border
317:26 - radius dot circular named constructor
317:29 - and i want to give it a radius of
317:32 - 20 from all the four sides okay and then
317:36 - another compulsory thing is to give a
317:39 - border site okay so even if you don't
317:41 - want to specify any
317:44 - thing inside the border side we still
317:46 - need to write
317:47 - simply border side means call the
317:50 - constructor at least
317:53 - okay so this is an important step
317:56 - and it is rather a required step okay so
317:59 - now if i
317:59 - save this i should be able to see a
318:01 - border
318:02 - so now we can see we have the border
318:05 - around the text field
318:06 - okay and it has rounded corners okay so
318:09 - it is not clearly visible let's
318:11 - add a padding over here
318:16 - and the padding is of 10 pixels from all
318:19 - the four sides
318:20 - yes so now it looks better so this is
318:23 - the
318:24 - border side now similarly we
318:28 - also have a enabled border
318:32 - okay the this also takes the same value
318:35 - and it is
318:35 - when this text field is selected
318:39 - okay and then similarly we have error
318:41 - border
318:42 - it also takes outline input border and
318:45 - it is
318:46 - when there is an error in that text
318:48 - field
318:49 - okay so these were the three types of
318:52 - border means three places where we use a
318:54 - border
318:56 - now suppose i want to add some color
318:59 - inside this text field okay so for that
319:02 - we have another property called
319:04 - fill color okay and let's decide our
319:07 - color let's say color
319:08 - start green
319:12 - okay and let's say dot with opacity
319:19 - okay so we don't have that feature over
319:21 - here i'll simply give a 50.
319:24 - okay so now if i save this i should be
319:26 - able to see a greenish
319:28 - tint in my text field but it is not
319:32 - there because we mix
319:33 - missed something since we are giving a
319:36 - fill color we also need to tell the
319:38 - text field that it should be filled with
319:41 - the
319:42 - fill color okay so for that we have a
319:45 - filled
319:45 - parameter and it takes a bool so i'll
319:48 - simply give it a true
319:50 - okay let's save this
319:55 - and now you can see our text field has a
319:57 - greenish tint
319:59 - okay means this fill color has been
320:01 - filled inside the
320:03 - text field okay now i'll remove this
320:06 - text from here
320:08 - okay and now we will add a hint text
320:11 - means
320:12 - as to depict what that text field is for
320:15 - and also the user will have
320:18 - ease in identifying what that text field
320:22 - is
320:22 - used for okay so let's say hint
320:26 - text and the hint
320:29 - text takes a string
320:35 - yes we can see it takes a string so
320:36 - let's give it a string and let's say
320:40 - enter name
320:45 - i'll save this and now we can see we
320:49 - have a hint text enter text and if you
320:51 - start typing anything it
320:53 - vanishes okay now we can also
320:56 - design uh style this text over here
321:00 - and for that we have a hint
321:04 - style
321:06 - okay so the hand style takes our text
321:09 - style widget
321:13 - okay and then maybe i'll change the
321:16 - color the color is colors dot
321:18 - red so let's see
321:24 - okay so it is giving us an error
321:25 - somewhere let's save this again
321:29 - and now we can see the hint text station
321:32 - red so we can
321:33 - change the hint text we can style the
321:36 - hint
321:36 - text like this now another thing that we
321:40 - have is a icon means sometimes
321:44 - for design requirements we want an icon
321:47 - and a text field corresponding to it
321:50 - so for that we already have a icon
321:54 - parameter in our input decoration and it
321:57 - takes a widget
321:58 - so since it is an icon i'll use an icon
322:00 - widget and then i'll use one of the
322:04 - already present icons okay so let's say
322:08 - icons dot person
322:14 - okay
322:22 - now let's save this
322:29 - and now you can see we have a icon of
322:32 - the
322:32 - person over here okay so this is how we
322:35 - use
322:36 - icons now the next
322:39 - thing that i want to discuss is a label
322:42 - text okay so sometimes
322:43 - the text fields also have a label
322:46 - okay so simply label text it is very
322:49 - similar to hint text
322:51 - the label text takes a string and it is
322:54 - name
322:55 - okay and it also takes a style and that
322:58 - is a text style
323:00 - so label style
323:03 - and it takes our text style
323:08 - and let's give this some another color
323:10 - color dot
323:14 - let's say yellow
323:18 - okay the spelling is wrong over here
323:38 - okay so now we can see we have a label
323:41 - called name over here since my color
323:44 - colors are very contrasting we are not
323:46 - able to see that
323:48 - okay so this was the label text and
323:51 - label style
323:52 - now similar to this hint text hint
323:55 - style label text to label style we have
323:58 - a prefix text
324:01 - and a prefix style and a prefix icon
324:04 - okay so the difference between
324:06 - simple icon and prefix icon is that in
324:09 - case of prefix
324:10 - icon this icon will be inside the text
324:14 - field
324:15 - and then before the text field we will
324:17 - have a small
324:18 - space for the text and that is the
324:20 - prefix text
324:22 - and similar to prefix text we also have
324:25 - a
324:25 - suffix text and a suffix style
324:29 - okay so these are the four types of text
324:32 - that we can add in a
324:34 - text field
324:39 - okay so this was about input decoration
324:43 - format this now back in the text field
324:46 - there are a few methods that we should
324:49 - know
324:50 - okay so the first method is on changed
324:53 - okay so this will be fired whenever the
324:56 - value of text field is changed
324:58 - okay so it receives a value
325:02 - and then the function okay so this value
325:04 - is the actual value in the text field
325:07 - means the present value in the text
325:09 - field okay so
325:11 - to check i'll simply print the value
325:19 - okay so i'll save this
325:31 - okay so now let's enter something so you
325:34 - can see as i am typing here it is being
325:36 - printed over here because
325:38 - as soon as i start typing it means it is
325:41 - it has started changing okay so this
325:44 - unchanged parameter is called so if i
325:46 - write ratio it will
325:48 - print after every keystroke because
325:50 - after every keystroke some value is
325:52 - being added or removed and that
325:54 - counts as a change okay so
325:57 - this is one method that we have now
326:00 - similar to this we also have
326:02 - another method on editing complete
326:05 - so this method is also very similar to
326:08 - this unchanged method
326:10 - okay so this method is called when we
326:12 - move to the next
326:14 - text field or we submit the or we click
326:17 - on the submit button
326:19 - okay so this was on on editing complete
326:23 - now after that we have on submitted okay
326:27 - so on submitted also when we click on
326:29 - the submit button this function is
326:31 - called okay so these are basically
326:33 - related to
326:34 - forms okay so this on submit function
326:37 - and on editing complete functions
326:40 - are used generally when we are working
326:42 - with forms
326:43 - okay so then after that the next feature
326:46 - is on tap
326:47 - and as the name suggests it will work
326:50 - whenever the text field is
326:52 - tapped okay then after it also takes a
326:55 - function
326:56 - similar to on change okay and then the
326:59 - next thing that i want to talk is
327:03 - read only okay so this means that
327:06 - whether the
327:07 - we will be able to change the text
327:09 - present in the text field or not
327:11 - it is very much similar to enabled
327:14 - okay then after that we have style
327:17 - which takes our text style to design the
327:20 - text to style the text which will be
327:23 - given
327:23 - input from the user okay then after that
327:26 - we have text
327:28 - align okay so to align the text
327:31 - horizontally okay has a text
327:34 - align enum okay
327:39 - okay and then over here we can see we
327:41 - have these options
327:43 - center so the text will be aligned and
327:45 - center and
327:46 - so in the end justify so the text will
327:48 - be justified wherever
327:50 - it seems right then left right start and
327:53 - means all the values are understandable
327:55 - now similar to text align we also have
327:58 - text align vertically okay because text
328:02 - the line works
328:03 - horizontally so there is another feature
328:05 - called text align vertical
328:07 - okay so in this we align the text
328:09 - vertically
328:11 - okay then after that we have this text
328:14 - input action okay so this depicts
328:19 - what will be what will happen when we
328:21 - click on the
328:22 - next button or the done button or the
328:24 - tick we have
328:25 - in our keyboard that displays on the
328:28 - screen
328:29 - okay so this text input action has a
328:32 - text input action in enum
328:42 - okay and then continue action means it
328:44 - will go to the next field
328:46 - done action means it will call the
328:48 - submit function means it will
328:50 - automatically submit
328:52 - and then emergency call means these are
328:54 - some features it is not
328:55 - generally used but if you want we can
328:58 - you can give a
328:59 - read over here all the things are pretty
329:02 - descriptive
329:04 - okay so this was about a text input
329:07 - action and the last thing in text field
329:10 - would be
329:11 - text direction
329:14 - okay so that means if we start typing
329:16 - how the
329:17 - text will start flowing in okay so by
329:20 - default it is left
329:22 - that means if we type the the texts are
329:26 - flowing from the left
329:27 - if it is center then the cursor will be
329:30 - in center and whenever we add something
329:32 - it will flow
329:32 - flow in both the sides and the same goes
329:36 - for right if
329:37 - the text direction is right it will flow
329:40 - in
329:41 - from the right okay so i hope you are
329:45 - understanding all these things
329:48 - so these were the pretty much yet about
329:52 - text field i hope everything was clear
329:54 - thank you
329:56 - welcome to programming knowledge so in
329:59 - this video we are going to create a
330:01 - small project by using all the things we
330:04 - have learnt
330:05 - till now and we will also discuss about
330:07 - few other widgets
330:09 - in the go okay so the project that we
330:12 - are going to make is very simple we will
330:14 - simply have a text field that will take
330:16 - the input from user
330:18 - and then we will display the table of
330:20 - that input
330:21 - okay so the input over here is can only
330:24 - be a
330:24 - integer okay so let's start
330:28 - first i'll remove this entire body we
330:30 - don't need it
330:37 - then we also don't need this floating
330:40 - action button
330:42 - okay so now first we will
330:46 - write a container okay so this makes the
330:50 - most
330:50 - sense by starting the body with a
330:52 - container
330:55 - okay then inside container we will have
330:57 - a child and the child will of course
331:00 - be a column
331:05 - okay so now this column takes children
331:09 - let's format this and then our first
331:11 - child will be a text field to take the
331:13 - input
331:15 - so text field and then we will give this
331:19 - the same controller that we have used
331:21 - earlier
331:22 - while discussing about text field so
331:25 - that was
331:25 - text controller
331:31 - okay so now let's save this
331:37 - and we can see we have a text controller
331:39 - with programming knowledge written
331:41 - in it and that is because in the init
331:43 - state we have initialized
331:45 - the text of this controller with
331:47 - programming knowledge
331:49 - so i'll remove this or maybe i'll change
331:51 - it to two
331:52 - so that means that by default our
331:55 - program will
331:56 - show the table of two okay so let's
331:59 - save this and see and over here still it
332:03 - is programming knowledge because it is
332:04 - inside init state
332:06 - it is not executed again so we will do a
332:11 - full restart
332:17 - and it will take some time and we have 2
332:20 - over here
332:22 - now let's add the table below that
332:25 - and so to add the table there are many
332:28 - ways
332:29 - the easiest way would be to use a list
332:31 - view okay so i'll simply write
332:34 - list view
332:37 - dot builder and then this builder takes
332:40 - a few things first one is
332:43 - item count okay and we want to display
332:46 - the first
332:47 - 10 values of the table
332:50 - and then it takes a item builder okay
332:53 - which takes a function with
332:55 - two values the first one is build
332:58 - context and i'll call it context
333:02 - the second one is index okay so now over
333:05 - here i'll simply return a
333:08 - list to tie okay
333:11 - and in the list tile in the title
333:14 - section we will have the value
333:16 - okay so in title the title takes our
333:20 - text widget
333:23 - okay and then over here we'll use
333:26 - string interpolation to multiply and
333:29 - display the values both
333:30 - at the same time okay so i can get the
333:35 - uh position by using this index so index
333:38 - now since index
333:40 - starts at 0 and we plan on showing our
333:42 - table from 1
333:44 - we need to add 1 to the index
333:48 - okay and then we surround it with the
333:50 - brackets as in this gets executed first
333:53 - and then over here in this controller we
333:56 - have the
333:57 - value that is given as the input okay so
334:02 - what we will do is we will simply
334:03 - multiply it with
334:06 - text controller dot
334:10 - text okay so now this will not work
334:13 - because this text is in string type and
334:16 - to multiply we need an
334:18 - integer okay so to convert string to
334:20 - integer we have a
334:21 - inbuilt function in dot and we have
334:25 - had one video on that so that is into
334:28 - dot
334:28 - parse okay so anything any value inside
334:31 - this parse method gets converted to
334:34 - integer
334:35 - only if possible if it is not possible
334:37 - then it will give us an
334:38 - error okay so now let's try running this
334:41 - and see what is the output
334:45 - okay so you can see as soon as i tried
334:47 - to run this i got a bunch of
334:49 - errors and that is because over here
334:52 - we have tried to put a list view inside
334:55 - a column
334:56 - so column is also type of a list where
334:59 - we show values one after another
335:01 - and in list view the name justifies it
335:04 - shows
335:04 - values one after another so they both do
335:07 - the same thing and since they have been
335:09 - merged they clash so to
335:13 - solve this what we can do is we can give
335:16 - the list view a specific height
335:18 - so that that means that our list view
335:20 - will only be in a
335:22 - section of 200 pixels okay any value of
335:25 - the list
335:26 - that exceeds that 200 range will be
335:29 - scrollable okay so to give the height
335:33 - the
335:35 - one one option is to use a container
335:38 - okay and then other option which is also
335:41 - a very important
335:42 - option and that is called a
335:45 - sized box okay so i'll use
335:48 - a sized box so not only over here sized
335:52 - box is
335:53 - used in all the places where we just
335:56 - need to specify the height
335:58 - and the width so size box takes three
336:01 - parameters that is height width
336:03 - and child so child is already over here
336:08 - width is not required i'll simply give
336:10 - it a
336:11 - height of let's say 300 pixels okay so
336:14 - any value more than that
336:16 - that will be in the scrollable region
336:19 - okay so let's save this
336:23 - and then we can see we have the table of
336:26 - 2 over here the mathematics is correct
336:29 - means our this calculation is working
336:31 - fine
336:33 - and then you can see this table is only
336:36 - over till here okay all the rest things
336:39 - are
336:40 - scrollable that means it is not going
336:42 - beyond the 300
336:45 - okay so this is the beauty of sized box
336:48 - it is used to specify
336:50 - height and width of almost every widget
336:52 - okay we can use it everywhere to specify
336:54 - a height and width
336:56 - okay so this is one possible way to
336:58 - solve the error the
337:00 - next possible way which makes more sense
337:03 - is to use
337:04 - all the extra space that is left okay
337:07 - means
337:07 - we have the text field till here then
337:10 - after this all this space is unused and
337:13 - we can use that
337:14 - to show the table okay so to
337:17 - get all the unused space we have another
337:20 - widget in flutter
337:22 - and that is called expanded
337:27 - okay so what it basically will do is
337:29 - that it will expand in
337:31 - all the region that is unused
337:34 - okay so since it expands it doesn't need
337:36 - a height it
337:37 - expanded only takes a child
337:41 - okay so now let's save this
337:45 - and you can see it took the or it took
337:48 - all the space that was left
337:50 - okay so now we can see the table is
337:53 - working fine
337:54 - now let's try to change the value and
337:56 - subsequently change the value of this
337:59 - table okay so for that we need
338:02 - to deal with this controller
338:06 - okay so now to confirm that the value
338:08 - has been changed means to tell the
338:10 - program to
338:11 - render the table according to the new
338:13 - value we will again add a floating
338:14 - action button
338:16 - okay so that will be let's say an icon
338:20 - button
338:23 - okay an icon button where the icon is
338:26 - inside a icon widget
338:32 - and the icon says icons dot
338:36 - done that is nothing but a tick mark and
338:39 - then after
338:40 - i can we have a on pressed method and
338:43 - then
338:43 - in this on pressed for now let's simply
338:47 - print the value so print
338:54 - text controller
338:58 - dot text okay so let's format
339:02 - this and save this
339:07 - okay so now once this is done i'll
339:09 - change the value from 2 to 3
339:12 - and then press on this icon button and
339:15 - we get the new value over here
339:18 - so now this means that whenever we press
339:21 - on this
339:21 - that means we are telling the program
339:23 - that we have entered some new value and
339:25 - render the program according to it
339:27 - okay so now over here you can see in the
339:31 - list view it automatically takes the
339:34 - latest value present in the text
339:36 - controller okay
339:37 - so to render the new value all we need
339:41 - to do is call the set state once again
339:43 - and all the other works will be done on
339:45 - its own
339:46 - okay so let's try doing that
339:53 - over here whenever that tick button is
339:56 - pressed first of all we'll print the new
339:57 - value and then
339:58 - simply set state
340:13 - and then we can give it over here now
340:15 - let's format this and save this
340:19 - and now you can see since our value was
340:22 - three it has automatically rendered the
340:24 - table of three now let's change it to
340:27 - five
340:28 - press on this stick and you can see the
340:30 - values are updating automatically
340:33 - you can give any wake value and that
340:35 - will also work
340:37 - okay so and this is how we combine
340:40 - few things and may work okay
340:44 - so now if you want you can decorate this
340:47 - text field if we can also decorate this
340:50 - list tile okay so this is how we
340:53 - link widgets together with each other
340:56 - and
340:56 - subsequently make a complete app that is
341:00 - ready to be published on play stores
341:02 - thank you welcome to programming
341:05 - knowledge
341:06 - so in this video we are going to discuss
341:08 - about grid view and flutter
341:10 - so grid view is nothing but a scrollable
341:13 - 2d
341:13 - array of widgets so let's directly
341:17 - jump into the code so we don't
341:20 - need this text controller in its state
341:22 - and dispose for
341:24 - now we neither need this
341:27 - body or the floating action button
341:31 - okay so now let's start creating a grid
341:35 - view
341:35 - so the widget name is grid view
341:41 - now there are too many parameters
341:44 - in the grid view we will discuss only
341:46 - which are important and which are mostly
341:48 - used
341:50 - okay and if you want to know about all
341:52 - the other parameters you can
341:54 - of course refer to the documentation
341:57 - okay so the first
341:58 - parameter is a scroll direction it is
342:01 - very similar to the one we had in list
342:03 - view
342:04 - it takes a value from an axis enum
342:08 - okay and it defines whether the list
342:10 - will be scrollable in horizontal
342:12 - direction or in vertical direction
342:14 - by default its value is vertical okay
342:17 - then after that
342:18 - the next thing that we should know is
342:20 - reverse so
342:22 - this is a boolean value if we give it to
342:25 - true if we give the value true
342:27 - then the list from which the grid view
342:29 - is generated
342:30 - will be reversed and if we give
342:34 - it as false then the list will not be
342:36 - reversed by default the value of reverse
342:38 - is
342:39 - false so let's try giving it true and we
342:42 - will see what is the output
342:45 - okay now the next thing is controller
342:48 - okay so the the controller in grid view
342:52 - takes a widget of type
342:54 - scroll controller so let's create a
342:57 - scroll controller
343:02 - now scroll controller is stored as a
343:06 - state variable
343:07 - and it is used when the state rebuilds
343:10 - that means when the set state method is
343:13 - called
343:14 - then flutter internally uses this scroll
343:17 - controller to get
343:18 - the position of user in that list view
343:22 - in that grid view okay so suppose if we
343:26 - are viewing a
343:27 - grid view and we are at the 100th
343:30 - row or the column
343:34 - okay so then that position is stored in
343:37 - scroll controller
343:38 - and now if internally due to some
343:40 - background actions
343:42 - set state is called the build method is
343:44 - re-rendered
343:46 - then instead of start instead of
343:49 - going back at the starting of the grid
343:52 - view
343:52 - the user will remain at that 100th
343:56 - column or row of the grid view okay so
343:59 - that is what a scroll controller is
344:02 - mainly used for and it comes with some
344:06 - parameters
344:07 - okay and that is initial offset value
344:11 - initial scroll offset so by this we can
344:14 - define the
344:16 - offset that will already be on the
344:20 - left side or the top side of the
344:23 - scrollable grid view okay that means
344:27 - if the grid view would start from zero
344:30 - point
344:30 - zero zero comma zero axis and if we set
344:34 - the initial scroll offset to
344:36 - 20 then if our scroll direction is
344:39 - vertical
344:40 - then it will start from 0 comma 20.
344:43 - if our scroll direction is axis dot
344:46 - horizontal then it will start from 20
344:48 - comma 0.
344:49 - so i hope you are understanding what i
344:51 - am trying to say
344:52 - some part the part that we
344:56 - define over here in initial scroll
344:58 - offset will be left out
344:59 - will already be considered as scrolled
345:04 - okay so that is what initial scroll
345:06 - offset is used for
345:08 - and another thing is keep a scroll
345:10 - offset that means to
345:13 - tell the system to use that scroll
345:16 - offset
345:17 - defined by the programmer or the
345:19 - developer
345:20 - okay so this was about controller
345:24 - now the next thing which is rather a
345:27 - very important
345:28 - thing is physics so physics
345:33 - takes a widget of scroll physics
345:37 - okay so now this scroll physics
345:41 - is not used that much but
345:44 - everyone should know what this scroll
345:46 - physics is
345:48 - for what this for scroll physics is used
345:51 - when is this used
345:53 - okay so it is used to determine how a
345:56 - scrollable widget will behave
345:59 - when the user reaches the maximum scroll
346:01 - extent
346:02 - or when the user stops scrolling okay
346:05 - means
346:06 - the action the reaction to
346:09 - every user action is defined in this
346:13 - scroll physics
346:14 - now the normal normal reactions
346:18 - that we see that if we stop scrolling
346:20 - the list stops
346:22 - if we click on it it gets selected so
346:25 - all those are predefined and we don't
346:27 - need to do anything
346:30 - and if we want we can change those
346:34 - okay so the next thing that we have is
346:36 - padding
346:37 - and then as we know padding takes an
346:40 - edge inserts the geometry value so let's
346:43 - give it a padding as inserts geometry
346:46 - dot all
346:50 - edge inserts dot all i'm sorry as
346:53 - inserts dot all 10.0
346:56 - okay so now the next thing is
347:00 - one of the most important thing in grid
347:02 - view and that is
347:04 - grid delegate okay so a delegate that
347:07 - controls the layout of the children
347:10 - within the grid view
347:11 - okay so graded delegate now there are
347:14 - many types of delegate
347:15 - the most commonly used delegate type is
347:19 - sliver grid delegate with free fixed
347:22 - access count okay so don't get confused
347:25 - this is a single widget name
347:27 - okay so let's start typing sliver
347:32 - grid delegate with fixed access count
347:36 - okay so now this means that our
347:40 - cross access will be fixed
347:43 - so now over here it takes a few things
347:46 - the first one is cross access count so
347:49 - let's say i want a column of a row of
347:53 - three values a row should have three
347:55 - values
347:56 - so i'll write three then
347:59 - after that we have a child aspect ratio
348:03 - so over here we define what will be the
348:06 - aspect ratio of every child by default
348:08 - it is one
348:10 - point zero we can change it let's say
348:13 - or one point zero seems fine if you want
348:16 - to change
348:16 - something you can okay so i'll remove
348:19 - this child aspect ratio now the next
348:22 - thing that we have is cross
348:23 - axis spacing and minux main axis spacing
348:27 - so this will this is used to define the
348:30 - spacing between
348:31 - each item cross axis spacing
348:34 - for the column wise for column wise and
348:37 - main axis spacing for row wise okay so i
348:41 - hope all these things are clear
348:44 - and then another important thing or the
348:47 - rather the
348:48 - necessary thing is children means what
348:51 - we will show
348:52 - inside the grid view okay
348:55 - so now to display something first let's
348:58 - create a simple list
349:01 - a list of type integers
349:06 - call this call it dummy
349:09 - and it has a few values
349:14 - it has eight values
349:18 - okay so now over here we will again use
349:20 - the
349:21 - map method so dummy
349:25 - dot map
349:29 - dot to list and now over here i want to
349:32 - return a
349:34 - container
349:37 - okay of i'm sorry
349:40 - container of height
349:43 - 100.0 with hundred point zero
349:49 - color should be colors
349:52 - dot red alignment
349:55 - should be alignment
349:58 - dot center that means the child should
350:01 - be in the
350:02 - center of this container and the child
350:04 - is nothing but
350:06 - e okay so
350:09 - i'm sorry e should be inside text
350:13 - and then i'll use a string interpolation
350:18 - which is better than using two string
350:20 - because we have more accessibility we
350:22 - can add
350:23 - more things in the string and all the
350:25 - stuff
350:26 - so let's format this save this see if
350:30 - we have some errors so now since we
350:32 - don't have any error we should be able
350:34 - to
350:35 - see all the values so now since the
350:38 - first thing that i would like to mention
350:39 - is
350:40 - that since we have written reverse as
350:43 - true then
350:44 - the first value one is starting in the
350:47 - last row so i hope you
350:48 - get my point it is not the last item but
350:52 - in the last row so this is a very clear
350:55 - confusion please
350:56 - don't get confused okay now let's
351:00 - try adding some spacing main
351:03 - axis spacing can be 20.0
351:10 - so we have the spacing over there now
351:13 - cross
351:13 - axis spacing can be 20.0 again and that
351:17 - also so we'll get some spacing over here
351:26 - now uh we need to know
351:29 - why is this grid view at the bottom
351:33 - okay so let's try
351:36 - surrounding it with a column maybe
351:40 - this column brings everything to the top
351:44 - so that will not work
351:50 - okay maybe if we remove this reverse
351:54 - then it should go at the top because the
351:57 - general practice
351:58 - the general behavior of flutter is to
352:00 - start from top
352:01 - and yes so as you
352:04 - saw and i also learnt a new thing here
352:07 - if we use reverse then it
352:09 - also reverses the alignment
352:13 - it also reverses the position means
352:16 - instead of starting from
352:17 - top it starts from bottom instead of
352:20 - being
352:22 - the start aligned it is and aligned so
352:25 - these are a few things
352:26 - that we learned today and i hope the
352:30 - concept of grid view is clear thank you
352:36 - welcome to programming knowledge so in
352:39 - this video we are going to discuss about
352:41 - two things which are very important
352:43 - while we develop in flutter
352:45 - so the first thing is media query now
352:48 - what is media query and where does it
352:50 - comes in play
352:51 - so suppose you have an app okay and then
352:55 - that app has a container and you have
352:57 - given it a static height of 100 and a
353:00 - static width of 100
353:02 - so now suppose if that app runs on
353:05 - 10 different mobiles then that
353:08 - there is a very high probability that
353:11 - all those
353:12 - 10 mobiles will have different screen
353:14 - size
353:15 - so now suppose if someone has a big
353:18 - mobile then the
353:19 - 100 height 100 width container will take
353:24 - a very small amount of space
353:26 - now suppose someone has a mobile with
353:28 - small screen size then that 100
353:32 - hundred as height and hundred as width
353:34 - hundred pixels
353:36 - will take a very large space okay so now
353:39 - you understand that
353:40 - as the screen size changes the look and
353:43 - feel of your app will also change
353:46 - and that is not a very good ux quality
353:49 - that is not at all a good quality that
353:51 - is a disk merit in your app it should
353:53 - never happen
353:55 - okay so to avoid such kind of
353:59 - problems we have media query in flutter
354:02 - so by using media query we can get the
354:05 - current
354:06 - height and width of the mobile means the
354:09 - mobile on which the app is running
354:11 - and then we can render accordingly
354:14 - okay so now over here i have only one
354:17 - mobile so
354:18 - i will not i will not be able to show
354:21 - you some
354:22 - demo you can try on your own with two
354:24 - three different devices
354:26 - okay so let's start i'll remove this
354:29 - grid view we don't need it anymore
354:32 - we also don't need this list
354:36 - okay so now our body will simply be a
354:40 - container
354:44 - can the height of container is 200
354:48 - the width of container is 200
354:52 - the color of container is red
355:00 - let's format this save this
355:04 - so now we have a container like this
355:06 - let's bring this in center
355:14 - okay sorry this will be small l
355:17 - alignment
355:18 - dot center
355:26 - okay so we need to surround it by a
355:29 - center
355:29 - i'm sorry
355:33 - yes we can also remove this
355:39 - so now we have a container of height 200
355:42 - and of
355:43 - width 200 in the center of the screen
355:46 - now on this screen means the screen of
355:49 - iphone 11 it looks fine okay but now if
355:52 - i open on some
355:54 - older versions of iphone like iphone 5
355:58 - iphone 6 where the screen is only around
356:03 - 50 to 60 percent of what it is right now
356:06 - then this same container will take a
356:09 - very large
356:10 - amount of space in the
356:14 - screen so we don't want that to happen
356:17 - so to fix that we are gonna use media
356:19 - query and
356:20 - to use that we simply write media query
356:26 - dot off context dot size
356:30 - dot width divided by
356:34 - 3 okay so whatever the
356:37 - width is that will be divided by 3 and
356:40 - since we want it to be a square
356:42 - we will give the same to height oh sorry
356:45 - first was height
356:46 - so to get the width of the screen we
356:49 - write this
356:50 - media query dot off dot context dot size
356:53 - dot
356:54 - width okay so now let's save this
356:58 - okay so we still have
357:01 - rectangle i'll make it half
357:06 - okay so now over here the containers
357:11 - width is half of the mobile screen
357:15 - so now uh suppose if we open
357:18 - in any other mobile then also the
357:20 - container's width will be
357:22 - half of the mobile okay so that means
357:25 - the height and width are
357:27 - given dynamically so for different
357:30 - mobiles
357:31 - no matter what is the screen size the
357:33 - look and feel of your app
357:35 - will be same so this is how we get the
357:38 - width
357:39 - we can similarly get the height
357:43 - this will this line will return as the
357:46 - height of the current
357:47 - mobile screen so right now the height of
357:50 - this container is
357:51 - half of the height of the screen
357:54 - so now we use a media query
357:58 - very rarely these are the no means we
358:00 - use
358:01 - media query only for getting the height
358:04 - and width
358:04 - there are other uses of media query
358:06 - which are used very
358:07 - rarely and that is not
358:11 - that much important but if you are
358:12 - curious and you want to learn you can
358:15 - surely refer to the flutter
358:16 - documentation
358:18 - so now the next thing that i am going to
358:20 - talk about is navigation
358:22 - like we can practically make no app
358:25 - without navigation
358:28 - okay so let's create another screen
358:31 - so we can create a new class over here
358:35 - i'll simply write a stateless widget
358:38 - and then the name of the class but that
358:40 - is not
358:41 - suggested by flutter flutter says that
358:44 - in
358:44 - each file there should only be one state
358:47 - widget a class that extends
358:49 - state widget no matter it is a stateful
358:51 - or a stateless object okay so let's
358:54 - create another file
358:57 - i'll call it screen2 dot dot
359:01 - now over here also i'll import material
359:04 - that is very important
359:06 - and then i'll create a stateless widget
359:09 - and i'll call it
359:11 - screen2 now this has
359:14 - a scaffold
359:18 - and the body and in body
359:22 - inside a center widget we have a child
359:24 - that is a text
359:25 - and that says screen to
359:34 - okay so this is done now let's try
359:37 - navigating from screen 1 to screen
359:40 - 2 from our home app screen to the screen
359:43 - 2
359:44 - so we need a button to trigger and the
359:46 - most easy way is to create a floating
359:48 - action button i'll simply create a
359:50 - floating action button
359:54 - okay on press to that is what we are
359:57 - gonna do
359:58 - now we need to specify the child i guess
360:02 - yes we have the child and the child is
360:05 - an icon
360:06 - and the icon is
360:11 - icons dot play that can also refer as
360:14 - our next
360:18 - okay we don't have anything called play
360:21 - so we can give any icon that is just
360:24 - for understanding purposes
360:28 - now uh now let's talk about navigation
360:31 - so to navigate
360:32 - there are two methods we will see both
360:35 - of them
360:36 - okay so on press means when it is
360:39 - pressed we want to navigate
360:41 - okay so to navigate we write
360:45 - navigator dot of
360:48 - context dot push
360:52 - so now consider navigation as a stack
360:55 - we push means we open another screen on
360:59 - top
360:59 - of the first screen then we have
361:02 - pop and push okay pop
361:09 - then we have pop and push okay
361:12 - so that means that the current screen
361:14 - will be popped
361:15 - and a new screen will be pushed so that
361:18 - is
361:19 - used when we don't want to navigate back
361:21 - to the previous screen
361:23 - okay and then we have this pop so that
361:26 - to close the screen and go to its
361:29 - parent screen means from where it was
361:31 - redirected
361:32 - okay so these are three methods that we
361:34 - need to know all the rest are
361:36 - not that necessary so the first one is
361:40 - push
361:41 - so now inside push we write the
361:45 - route name the class name where we want
361:47 - to push okay so for that we again have a
361:51 - material page
361:55 - route object okay which
361:58 - takes a builder now since it is a
362:00 - builder it will always take a function
362:03 - which has a build context so this
362:05 - is almost a generalized thing in flutter
362:08 - wherever we see a builder
362:10 - it will take a function that
362:13 - has a build context might be there are
362:15 - some
362:16 - more added values but build context is
362:18 - always there
362:20 - okay so
362:24 - context now i'll not simply call this
362:27 - context as it is not
362:29 - a good practice we write it
362:32 - build context and then over here we
362:36 - write the class name so our class name
362:39 - is
362:39 - screen2 so over here we will simply
362:42 - write
362:42 - screen 2
362:48 - ok so now this is done now if we click
362:51 - on the
362:52 - a floating action button we should be
362:54 - redirected to
362:55 - screen two okay so if i click on this i
362:58 - am being redirected to screen
363:00 - two now since i said it is it acts like
363:04 - a stack
363:05 - and over here we have push that means
363:07 - this
363:08 - screen is on top of its parent screen
363:11 - that is the screen from which it has
363:12 - originated which is nothing other than
363:14 - maya
363:15 - so now over here if we come back we can
363:17 - return to the screen
363:20 - from where it started okay
363:24 - so this is one thing now suppose i don't
363:26 - want a return
363:27 - then i'll simply write pop and push
363:31 - okay now over here we have pop and push
363:34 - name
363:35 - so we'll also see what this named means
363:40 - okay now on screen two let's create
363:44 - another floating action button i'll okay
363:48 - a floating action button
363:51 - that takes a child the child is again an
363:54 - icon
363:55 - and inside i can we will use the icons
363:58 - enum
363:59 - and this time let's use some other
364:04 - icon any icon will work and then over
364:06 - here on pressed
364:10 - we can simply write navigator
364:15 - dot off dot pop
364:19 - okay so pop is used to return to the
364:22 - screen from where it has
364:23 - originated so this is
364:26 - all right
364:30 - i don't know what's the error over here
364:44 - okay there is some error okay this is
364:47 - not required no
364:51 - over here we have push
364:54 - i'm sorry for the glitch so now let's
364:57 - save this restart
364:58 - it
365:03 - so now over here if i click on this i am
365:05 - taken to the next screen and
365:07 - again if i click on the button i am
365:10 - taken back to the screen from where
365:12 - i started that is means we are popping
365:14 - that screen
365:15 - out okay and sorry for the icons they
365:18 - are
365:18 - not at all relatable okay so this is one
365:21 - method of navigation let's see another
365:23 - method of navigation and that is called
365:26 - named navigation okay so
365:29 - for that over here in our
365:33 - material app we need to specify the
365:37 - routes the named routes
365:39 - okay so for that it has a routes
365:43 - parameter that takes a map then the
365:47 - first one is the route name the key
365:50 - value is the route name i'll call it
365:53 - to okay and then it again
365:56 - takes a build context
366:01 - and then it will simply call screen
366:06 - 2.
366:09 - so now over here it is like this so now
366:12 - instead of writing so much so many
366:15 - things
366:16 - we'll simply write a navigator
366:20 - dot off context
366:23 - dot push named so now push named and
366:27 - simply will write the route name which
366:29 - is
366:30 - nothing other than screen two
366:37 - okay so i think there is some error okay
366:40 - it will want to be like this
366:42 - yes let's save this
366:45 - let's restart
366:49 - and now if i click on this it goes to
366:52 - the next screen and if i click on this
366:54 - then it pops back to the
366:56 - previous screen so the flow is still the
367:00 - same everything is working fine
367:02 - and this is the best way to navigate
367:05 - from one screen to another i
367:07 - personally prefer this way means
367:10 - creating a route
367:11 - giving it a name and then calling that
367:13 - name from
367:15 - all the places where i want to navigate
367:17 - and the
367:18 - more better version that i use is i
367:21 - don't write it over here
367:23 - okay i'll i write the route name for
367:27 - that screen
367:28 - inside that screen okay so over here
367:30 - i'll create a
367:32 - static constant route
367:35 - name okay and then over here
367:39 - i'm sorry and then over here i'll simply
367:42 - paste
367:43 - this okay so now by doing this
367:47 - i can avoid the chances of making a
367:49 - spelling mistake plus
367:51 - my another classes will not know what is
367:53 - my route name okay so
367:55 - it is kind of protecting your data as
367:58 - well
367:59 - so now over here i'll write screen
368:02 - to dot route name since it is a
368:06 - static variable we can access it from
368:10 - throughout anywhere in our project so
368:13 - i'll save this
368:16 - and over here instead of calling screen
368:18 - to i'll simply call
368:19 - screen to dot route
368:26 - name
368:29 - so now let's save this see if everything
368:32 - works fine or not
368:37 - and then if i click on this i am taken
368:39 - to the next screen
368:41 - and then again if i click on this i am
368:43 - popped back to the
368:44 - previous screen okay so now this is how
368:48 - we use
368:48 - push name now if i write pop and push
368:51 - named
368:52 - okay so that means my initial screen
368:54 - will be popped and then that screen will
368:56 - be pushed
368:57 - so ultimately i will not be able to come
369:00 - back
369:00 - okay so now to check if that is working
369:03 - or not
369:04 - so if that is working fine we should get
369:06 - an error that we can't pop
369:08 - because there is no screen okay so i'll
369:11 - call this
369:12 - and then if i press back then it shows a
369:16 - black screen that means it is not
369:18 - showing the home screen
369:19 - but it has blacked out that means the
369:21 - parent widget has already been
369:24 - popped out okay so
369:27 - i hope you are understanding the concept
369:29 - of push and pop and push name
369:32 - all those things i'll change it back to
369:35 - push named
369:37 - now this is this was about basic
369:40 - navigation between screens
369:42 - okay now the next thing and a very
369:44 - important thing
369:46 - is how to pass data from one screen to
369:49 - another
369:50 - okay so passing data from one screen to
369:52 - another is also pretty simple
369:55 - with uh push push named pop and push
369:58 - named
369:59 - every all these types of
370:02 - navigation methods take a named
370:04 - parameter called arguments
370:07 - so now over here arguments can be
370:09 - anything you can send a list you can
370:11 - send a map you can send a object of some
370:14 - custom class you can send anything
370:17 - so this argument parameter is very
370:20 - flexible and that is the beauty of
370:22 - flutter it provides you more
370:24 - accessibility so right now i'll simply
370:27 - pass a string
370:28 - that says navigation is working
370:35 - okay so now in my screen 2 i am sending
370:38 - this argument
370:39 - so let's see how to retrieve the data in
370:42 - screen 2.
370:44 - okay so inside our build method please
370:46 - note i am writing this inside my build
370:49 - method
370:50 - i will create a variable
370:53 - arguments that will be my received
370:55 - arguments
370:56 - now over here we write model root
371:02 - so these are some keywords that has a
371:04 - specific meaning
371:05 - which will not be required in general
371:08 - development flow
371:10 - but if you develop something very much
371:13 - related to native and something related
371:16 - to plugins
371:17 - means you are generating a plugin then
371:19 - we will then you will
371:20 - might have uh to look closely to this
371:23 - modal route
371:24 - but if you are generating simple hybrid
371:26 - mobile apps
371:28 - then this is not required then knowing
371:30 - the deep knowledge about model root is
371:32 - not required we can simply
371:35 - keep this in mind that modal route
371:37 - contains all the data
371:38 - that are transferred from one screen to
371:40 - another now the
371:41 - arguments are not the only thing there
371:43 - are many other things which are transfer
371:45 - internally from one screen to another
371:48 - okay but we will
371:49 - but we will be able to access only the
371:52 - arguments
371:53 - okay so let's see how we access that
371:55 - model route
371:56 - dot of context dot
372:00 - settings dot arguments
372:04 - okay so now by this i got
372:07 - the argument which i sent here
372:09 - navigation is working
372:11 - in screen 2. so now over here instead of
372:14 - displaying screen 2 i will display that
372:17 - argument
372:21 - let's save this restart
372:29 - now over here you can see navigation is
372:31 - working okay because this doesn't have
372:34 - any predefined value that means the
372:37 - value returned in that argument is being
372:40 - received
372:41 - properly and that is being displayed we
372:44 - can
372:44 - now as i told you it is very flexible we
372:47 - can pass
372:48 - anything so let's pass a
372:51 - map that says
372:56 - nothing is working nothing is working
372:58 - five times
373:00 - let's save this now let's see what is
373:02 - the output
373:04 - it should so show something like it is a
373:07 - list or something like that
373:09 - because it will not print the value that
373:11 - is directly inside that
373:13 - okay so it is giving us an error because
373:15 - over here the
373:17 - text takes a string type and that is a
373:19 - list of a string
373:21 - so let's change the value to argument 0
373:24 - that will return a screen
373:25 - that will return a string now over here
373:28 - arguments is a variable it doesn't
373:30 - know the flutter doesn't know that it is
373:33 - a
373:34 - list so the first method would be
373:38 - to change this to a list
373:41 - okay now another method is
373:45 - writing as a list
373:48 - so this ascii word is used for
373:51 - defining the type now to make it more
373:54 - specific i'll write
373:56 - string over here okay so now the error
373:59 - is gone let's
374:00 - re-save that this
374:07 - and now if i click on this the first
374:10 - value of the list is
374:12 - displayed now let's change the first
374:16 - value
374:28 - let's save this now we can come back now
374:33 - if i click on this
374:34 - we can see test to programming knowledge
374:37 - okay so you understood what is
374:38 - navigation and how we pass
374:41 - data through navigation and what are the
374:44 - different types of navigation
374:46 - and we also discussed about media query
374:48 - the most
374:49 - important use of media query that is
374:51 - dynamic rendering of widgets
374:54 - okay and i hope everything was clear
374:56 - thank you
374:57 - programming knowledge so in this video
374:59 - we are going to see
375:01 - how to send an http request
375:04 - and then parse the response and update
375:07 - the ui
375:08 - accordingly so first let's remove all
375:11 - the extra code that we have over here
375:14 - we don't need the floating action button
375:18 - okay we don't need a body for now we'll
375:21 - create a new body
375:23 - and we don't need this screen too so
375:26 - i'll delete the screen too
375:29 - and then i need to remove it from my
375:31 - home app if i have it
375:33 - yes so i need to remove it from here
375:41 - i also need to remove it from here
375:46 - okay i need to remove the import
375:50 - from here also okay so let's save
375:53 - everything
375:54 - do a restart and yes so we have our
375:58 - empty screen
376:00 - so now to send an http request if you
376:03 - don't know what is an http request you
376:06 - can follow this link and read about it
376:08 - they have very excellent documentation
376:11 - now to send an http request from a
376:15 - flutter app we need a third party
376:17 - package
376:18 - and the most popular package is http
376:21 - you can see over here it has one four
376:23 - zero four likes
376:24 - one one zero pop points and hundred
376:26 - percent popularity
376:28 - means this is most preferred by flutter
376:31 - developers
376:32 - another alternative can be do okay so
376:35 - do also has 99 percent popularity
376:39 - it is made by some flutter china dot
376:41 - club
376:43 - okay so let's install flutter we will go
376:46 - in this installing section
376:51 - and then inside our dependencies we
376:54 - simply need
376:55 - to add this so we find our dependencies
376:58 - in pubspec.yaml
377:02 - over here below below this toast or
377:05 - below that
377:06 - cupertino icons we can paste anywhere
377:09 - save and then since i am using vs code
377:12 - it will automatically start flutter
377:14 - pubget
377:16 - okay so that means it is importing this
377:18 - dependency to our project
377:20 - so that will take a minute
377:24 - now after that let's see which api we
377:27 - are going to call from our app
377:30 - okay so i'll be using this kanye dot
377:33 - rest api
377:34 - it is a free rest api for random kanye
377:37 - west
377:38 - quotes okay so since it is free it is
377:40 - accessible to everyone and everyone can
377:42 - try the same
377:44 - so now over here you can see it says get
377:47 - and
377:48 - get is nothing but a type of an http
377:51 - request
377:52 - okay so what get basically does it
377:54 - fetches data from
377:56 - this server means the link followed by
377:59 - the get request okay so i'll for now
378:02 - copy this link
378:04 - okay and if i paste it in my browser
378:08 - then that is also ultimately a get
378:10 - request only
378:11 - so let's see what is the response of
378:13 - this get request
378:16 - so over here uh doing this get request
378:18 - we get a quote
378:20 - i am the best and now if i refresh this
378:22 - it should change
378:24 - people always tell and then there are
378:26 - stuff
378:27 - okay so let's try implementing this in
378:29 - our app
378:31 - so we now have the http
378:35 - a package in our app so let's try
378:38 - calling this
378:40 - first we need to import http
378:43 - import http
378:47 - okay so it is not showing over here that
378:49 - means
378:50 - it has not installed correctly i need to
378:54 - run pub get again so i will do that we
378:57 - have a
378:58 - icon over here in vs code
379:01 - okay so once that is done now over here
379:04 - if i
379:07 - if i type import then http so we can see
379:12 - http slash http dot dot
379:15 - now i am not simply gonna call all the
379:17 - methods i'll use our namespace
379:19 - that means uh reference to this package
379:22 - as http means everything
379:26 - inside this package will be used
379:30 - under this namespace okay so you'll
379:32 - understand what i'm trying to say when i
379:34 - implement this
379:35 - okay so now let's try calling this
379:38 - rest api so for that
379:42 - in our class i'll simply create a future
379:46 - i have a video on what is a future and
379:49 - what is its use in flutter
379:51 - now since over here we are interacting
379:53 - with the internet we don't
379:54 - know how much time it will take so that
379:58 - is
379:59 - so that is the reason we can't
380:01 - immediately send the response we need to
380:04 - wait for the
380:06 - interaction with the internet to finish
380:09 - and then we will send a response and for
380:11 - the same i am using a future
380:13 - okay a future and that future should
380:16 - return a string
380:17 - that string will be nothing but this
380:19 - followed by code
380:21 - okay and then i'll call them name the
380:24 - method
380:25 - and get kanye
380:29 - okay simple name now it needs to be a
380:33 - sync since we are dealing with future
380:35 - okay now a good practice is that
380:38 - whenever you interact with
380:40 - futures we need to surround whenever
380:43 - sorry whenever we interact with the
380:45 - internet
380:46 - uh we need to surround it with a try and
380:49 - catch so that when there is error
380:51 - it will not simply show a red screen on
380:54 - your mobile app but to give some
380:56 - customized message
380:57 - which improves the user experience so
381:00 - i'll simply surround it with a try catch
381:06 - and then over here you can print t if
381:09 - you are making a real app
381:11 - most probably you will want to show a
381:12 - toast
381:14 - so that is done now lets finally
381:18 - call this request so i'll copy this url
381:20 - that i have over here
381:22 - now to call a get request means after
381:25 - every request we get a response okay so
381:28 - to store a response i'll create a
381:30 - response variable okay and then now
381:34 - let's call the get request
381:36 - this request let's call this get request
381:38 - okay so for that i'll simply write
381:41 - http which is the name space we used
381:44 - over here
381:45 - dot get so this dot gets
381:49 - refers to this get means over here in
381:52 - the documentation it says that we need
381:54 - to use a get request and that is why i
381:57 - am using a get request over here
381:59 - now the url we copied right now https
382:03 - api dot kanye dot rest
382:06 - okay so now we are getting a response
382:10 - okay so now if i hover over this get you
382:13 - can see it
382:14 - sends a future of response okay so that
382:17 - means
382:18 - as i said it will take a indefinite
382:21 - amount of time to interact with the
382:22 - internet we can't
382:24 - assume the time so that is why it is a
382:26 - future and we need to wait until we get
382:29 - some response
382:30 - and as we have discussed in our dot
382:32 - tutorial to wait for the response
382:34 - we use the await keyword and since we
382:37 - are using await here we need to have a
382:40 - async keyword over here okay
382:44 - so now once this command is executed
382:48 - that means
382:49 - this command will take some time since
382:51 - we are using await that means the comma
382:53 - that means the controller which runs the
382:56 - code will not proceed until this
382:59 - statement is completely executed so once
383:01 - this is done
383:02 - then that means that this response
383:05 - has the response means this response
383:08 - which we will get from this
383:10 - api okay so this response variable will
383:12 - now have this response
383:14 - so before updating the ui let's try
383:17 - simply printing it
383:18 - to check that everything is working fine
383:20 - now uh
383:22 - if you would be knowing about rest apis
383:25 - you would know that
383:26 - response doesn't only have this thing
383:29 - this is the body
383:30 - but it also has different things like
383:33 - the headers
383:34 - and other stuffs okay so this part where
383:38 - we have the actual
383:40 - response from the api that is the body
383:43 - okay so now let's get the body so
383:47 - instead of getting let's simply print
383:48 - the body to see if we have something or
383:51 - not so response
383:54 - dot body now i hope everything is clear
383:58 - okay so let's save this now inside the
384:00 - build method i'll simply call
384:04 - get kanye
384:12 - i'll restart
384:20 - and you can see it took a second or two
384:23 - and then after that we have the
384:25 - response code you took you can't look at
384:29 - a glass half full or empty if it's
384:31 - overflowing
384:32 - okay now if i save it again means that
384:36 - means i will do a refresh
384:37 - since on the refresh the build method is
384:41 - run i
384:41 - is executed again so this get kanye
384:44 - method will be called again
384:45 - and we get a response
384:50 - okay so now since we have a response
384:52 - let's try
384:53 - updating our ui okay so over here this
384:56 - future needs to return a string so
384:59 - you know over here my requirement is
385:03 - only this string but
385:04 - right now the body is printing this
385:06 - entire string
385:07 - okay so the body is in string format but
385:11 - if you look
385:11 - closely or you look in the browser it is
385:14 - actually a map
385:16 - a map which has a key and the value
385:19 - the value which we are interested in so
385:21 - to convert a string back to a map
385:24 - we need to use a dot package
385:28 - and so for that we will import that dart
385:30 - package and that is called
385:32 - convert so
385:35 - this convert package allows you to
385:37 - convert a
385:40 - string to any other object
385:44 - or object to a string okay
385:47 - so let's see how that happens i'll
385:50 - simply write
385:53 - where result is equal to json
385:57 - now this json is inside this dot dot
385:59 - convert
386:00 - json dot decode okay so now
386:03 - string is the encoded thing if we
386:06 - convert a
386:07 - map to a string then the string is
386:09 - considered as an
386:10 - encoded as the encoded output
386:13 - of that adjacent variable json value
386:16 - okay so since we have the string we need
386:19 - to decode we need to go back
386:21 - and over here i'll write response dot
386:25 - body
386:28 - and then instead of printing this i'll
386:31 - print
386:36 - result and then the key that we have
386:40 - over here that is
386:41 - quote so simply
386:44 - paste it over here format it and do a
386:52 - restart
386:54 - okay so now you see we only get the
386:57 - code part means instead of getting this
387:00 - entire thing as a string we have decoded
387:03 - it to a map
387:05 - and then we are printing the value for
387:07 - this key
387:09 - okay and now we want to return the same
387:11 - thing so i'll simply
387:13 - change this to return and now this
387:17 - get kanye will return something
387:20 - so let's wait for that to return
387:24 - so then that means this method is called
387:27 - and when it finally returns
387:29 - then we go to this net then method
387:32 - so now the string sent over here is
387:34 - stored in this
387:36 - value okay so let's create another
387:38 - variable
387:40 - string code
387:46 - and then over here i'll save
387:50 - the value to quote
387:54 - okay we don't need a semicolon over here
388:00 - so now once this get kanye returns
388:03 - something it is stored in this code
388:06 - thing
388:06 - so now let's simply print the code thing
388:09 - so over here i'll write
388:12 - body the body is in center
388:17 - and the center has a child which is our
388:19 - text widget and the text
388:22 - displays nothing but the quote
388:26 - so now let's do a hot restart and see
388:29 - what happens
388:34 - and you can see it gives us an error and
388:37 - that is because as i
388:38 - said interacting with internet takes
388:41 - time
388:42 - but the execution doesn't stop over here
388:44 - and it keeps on
388:46 - running it keeps executing so one
388:49 - solution would be to
388:50 - add an await over here okay and the
388:53 - other solution is because
388:55 - i am not adding a weight over here
388:56 - because that is not a standard practice
388:59 - in if you do a real world project most
389:02 - probably all your
389:04 - con all your
389:07 - interactions with the internet will be
389:09 - in a separate file
389:10 - so what i'll do is over here i'll add a
389:12 - conditional statement
389:15 - so if this quote is
389:19 - null so in that time
389:23 - i want you to show a circular
389:27 - progress indicator and once this quote
389:31 - is
389:32 - not null then the code should be printed
389:34 - so now what happens is
389:36 - that for the first time it will be null
389:40 - and then the circular progress indicator
389:42 - will keep on working
389:43 - now even after we get the value this
389:46 - will not
389:47 - update and to update the screen
389:51 - as we have discussed earlier we need to
389:53 - call the set state method
389:55 - so over here i'll write set
389:59 - state and then
390:02 - inside this the value
390:06 - means okay so everything is fine let's
390:08 - restart
390:11 - let's do a full restart
390:16 - okay so i think my internet speed is
390:18 - very fast
390:19 - that's why we are not able to see the
390:23 - progress indicator thing okay no no
390:28 - yes so the progress indicator is at
390:31 - the top so instead of
390:35 - conditional rendering over here i'll do
390:38 - it
390:39 - inside the center widget
390:43 - so now let's see
390:52 - so you can see the circular progress
390:54 - indicator and as soon as we get
390:56 - the value the value gets updated
391:00 - okay and now you can see it is
391:04 - it will keep on updating it is not
391:06 - stopping
391:07 - and that is because we have a error in
391:09 - our program
391:11 - okay so the reason that it keeps on
391:15 - updating it
391:16 - is not stopping is that we are calling
391:18 - set state
391:19 - inside the build method so this is a
391:22 - very
391:22 - common mistake that people do that is
391:24 - calling set state method inside the
391:27 - build method so what the set state
391:31 - does is it re-renders the build method
391:34 - so if the set state is called it will
391:36 - uh re-render the build method and now
391:38 - while rendering it will again
391:40 - encounter set state so it will again
391:43 - start re-rendering so
391:45 - this will go to an infinite loop
391:48 - okay so the way to fix this is to use an
391:51 - if else
391:52 - okay so i'll write bool
391:58 - code controller
392:01 - is equal to false so now this method
392:05 - should run only if the code controller
392:07 - is false
392:16 - okay otherwise this shouldn't run
392:19 - and now let's update the value of code
392:22 - controller to true
392:29 - okay so this means that the first time
392:32 - when the value of code controller is
392:34 - false uh this method will run and
392:39 - as soon as this runs this if condition
392:42 - runs the code controllers value is true
392:44 - so even after even though the set state
392:46 - is called
392:47 - and the build method starts rendering
392:49 - this if condition will become false and
392:52 - all this code will not get executed it
392:54 - will
392:55 - simply render this return statement
392:59 - okay so i hope everything is clear
393:02 - let's do a full restart
393:08 - and you can see it updated only once
393:11 - okay so yes now after this this will not
393:14 - update
393:17 - and it is not updating so i hope you
393:19 - understood what i
393:20 - did over here and you understood
393:25 - how to call a http
393:28 - request how to parse the response over
393:32 - here and then
393:33 - update the ui accordingly
393:36 - update the ui always has set state in it
393:39 - so i hope all the concepts are clear
393:42 - now this is one kanye dot rest which you
393:45 - can try another one which i also use
393:48 - which is also free
393:49 - is chuck norris so over here also you
393:53 - can call
393:54 - this request and you will get you will
393:56 - not only get a quote you will get
393:58 - multiple things you will get an url
394:01 - for the image okay you will get an id
394:04 - which you if you have any idea about
394:07 - databases will understand that every
394:09 - value has a id
394:11 - url which will be url for this code
394:14 - and then a value which is the actual
394:16 - code so you can also
394:18 - try this if you want to
394:21 - okay so i hope everything was clear
394:23 - thank you
394:25 - welcome to programming knowledge so in
394:28 - this
394:28 - video we are going to discuss about
394:30 - bottom sheets in flutter
394:32 - so basically there are two types of
394:35 - bottom sheets in flutter the first one
394:37 - is persistent bottom sheet and the
394:39 - second one is modal bottom sheet
394:41 - the difference between these two types
394:43 - of sheets are that in persistent bottom
394:46 - sheet
394:46 - the sheet remains on the screen even
394:48 - though we are not interacting with it
394:51 - whereas in modal bottom sheet the sheet
394:54 - will hide
394:54 - if we are not interacting with it so
394:57 - let's start
394:58 - coding so first i'll remove
395:02 - all this code that we
395:05 - that we wrote while we were discussing
395:07 - about http requests
395:09 - we don't need this anymore
395:17 - i'll also remove the new stim ports
395:26 - now once this is done in the center
395:29 - widget i'll add a
395:31 - raised button
395:35 - and the child will be
395:39 - text that says
395:43 - show bottom sheet
395:48 - and then it will have an on pressed
395:51 - and that will show the bottom sheet
395:54 - so first let's start with modal bottom
395:58 - sheet
395:58 - to display a modal bottom sheet we
396:01 - simply write
396:02 - show model bottom sheet
396:06 - now it takes two parameters that are
396:08 - necessary and the other ones are not
396:10 - necessary
396:12 - the first one is context and the context
396:14 - we have right over here
396:15 - this is the context so i'll simply write
396:19 - context
396:22 - and the next one is builder
396:25 - so it takes a function which has a
396:28 - parameter
396:29 - of build context
396:34 - and now over here we return the widget
396:36 - that will be displayed
396:38 - as our bottom sheet so i'll simply
396:41 - return a
396:43 - container of
396:48 - height 400
396:51 - and the color to be
396:54 - red so now let's format this
396:59 - save this and now we have a button in
397:03 - center and if i
397:04 - click on this i am able to see the modal
397:08 - bottom sheet
397:09 - so now as i said the sheet will hide if
397:12 - we don't
397:12 - interact with it so this is the bottom
397:15 - sheet let's not interact with this but
397:18 - interact with the remaining part so as
397:20 - soon as i click
397:22 - over here the bottom sheet hides
397:25 - so you understood what i was trying to
397:27 - say that
397:28 - the bottom sheet hides when we are not
397:31 - interacting with it
397:33 - and if that happens then that sheet is a
397:36 - modal
397:36 - bottom sheet okay now the next type of
397:40 - sheet is the persistent bottom sheet
397:43 - so for that we simply write show
397:47 - bottom sheet
397:50 - now format this save this
397:55 - now if i click on this okay so it is
397:58 - giving me an error
398:00 - so let's try another method
398:04 - to show a bottom sheet and the method is
398:07 - by using a global key
398:09 - so i'll write vr
398:12 - scaffold key and that will
398:18 - be a global
398:21 - that will be a global key
398:27 - okay and the global key will be of type
398:31 - scaffold state
398:37 - okay and then i'll add this key to our
398:40 - scaffold
398:42 - so the key over here is
398:45 - scaffold key so now what this basically
398:49 - does is that right now this is our
398:52 - scaffold
398:54 - scaffold is the area in which the
398:56 - contents are displaced
398:58 - or displayed like the app bar body the
399:00 - widgets inside
399:02 - the app bar widgets inside the body all
399:04 - those are displayed on the scaffold
399:06 - scaffold is like a canvas
399:09 - we can say it to be a canvas so by
399:12 - adding a key to the scaffold now we can
399:15 - access
399:16 - the state the context of this scaffold
399:19 - anywhere else by simply using this key
399:23 - okay and that is what we are gonna do
399:25 - over here to show the bottom sheet
399:28 - okay so i'll simply comment this
399:32 - now to show a bottom sheet first we
399:35 - write the global key name that is
399:38 - in our case scaffold key then we
399:42 - take the current state okay so now over
399:44 - here you can see we
399:46 - with the scaffold key we can get three
399:49 - things first one is the context that is
399:51 - the current context
399:52 - the current state and the current widget
399:55 - that is being displayed
399:57 - so over here we need the current state
400:01 - and then on that we call show bottom
400:04 - sheet
400:06 - so now over here i'll return the same
400:09 - container
400:10 - let's see
400:13 - now i'll remove i'll remove the comment
400:16 - from here and then give a
400:18 - semicolon so now
400:21 - let's see
400:26 - now if i save and then if i click on
400:29 - this
400:30 - i am able to see my bottom sheet
400:33 - so this bottom sheet is a persistent
400:37 - bottom sheet okay and by that
400:40 - if i don't interact with this part of
400:43 - the sheet
400:44 - even then this will not disappear so if
400:46 - i click
400:47 - anywhere over here the sheet still
400:50 - remains if you want to close it
400:52 - programmatically we can do it by writing
400:55 - navigator dot of
400:56 - context dot pop and over here
401:00 - in app we can simply slide it down
401:03 - like this so these are the two types of
401:07 - sheet that we have in flutter
401:10 - that is the persistent bottom sheet
401:13 - and the modal bottom sheet so i hope the
401:16 - concept was clear
401:18 - thank you
401:23 - you

Cleaned transcript:

welcome to programming knowledge so in this tutorial series we will learn about flutter so flutter is basically an open source ui development kit created by google it is used to develop applications for androids ios windows etc so to get started open your browser and then open flutter.dav then click on get started and then over here the installation process is pretty much same i'll show the installation process for mac os and the windows users can ignore the xcode part okay so i'll go to mac os and over here there is an option to download flutter underscore mac os underscore v 1.12.13 dot zip file so first of all we need to download the zip file okay now once downloaded we can unzip it wherever we want so i have unzipped it in my documents section under a folder called development tools over here i have unzipped the flutter sdk and i can see all my data's are over here okay so now for the development purpose one thing that is very important for both windows and mac users is android studio so first of all go and download android studio the process to download android studio is also mentioned over here in the android setup section so while the android studio is downloading let's discuss a little bit about flutter so flutter is one of the emerging development software because if we want to develop an application for both android and ios we had to keep two different code bases and double the work in maintaining the app and bug fixes but with flutter a single code base runs on both the platform however to develop for ios you will need a mac os system so once android studio has been installed we will try installing xcode so for that i'll go in the xcode section that is ios setup and over there i'll just open my terminal and copy and paste both the lines one by one once done we need to export our path to the system so for that i'll copy this from here the export line will be different for mac os and windows so the windows users can check accordingly so i'll open my terminal and paste the command and over here i'll change this to users my username then the documents section and over there i have a folder called development tools and inside that i have flutter and bin so i'll hit enter now i'll create a folder called flutter projects and all the projects that we do in flutter i'll store it over there so i'll i already have one i'll just navigate to it now over here i'll write flutter doctor so then the doctor will start running and it will tell that if the everything is installed properly or not if you are running for the first time it might take a few moments so over here you can see we have android tool chain some android licenses are not expected not accepted and we have no connected device we can ignore this x code error over here okay so the system is fine we can start working with flutter so to create a project we write a flutter create and then the project name keep in mind that a flutter project cannot have dashes and capital letters it can only have underscore and small letters then i'll hit enter and it will start creating my project so once done open android studio and then go to open an existing android studio project and then i'll simply navigate to flutter projects and the demo app that i have just now created and then i'll hit open so if you first open a flutter project it will ask you to download some extensions so click on download and once done we need to set up an emulator so for setting up an emulator we go to tools and then avd manager and over here i have already created a virtual device called flutter device and if you are new you can go to the create virtual devices and then select any of the preferred sizes you want click on next and then the android version you want to use then click on next and give the device a name okay so once done it will it should appear something like this and then click on this green arrow button so if you click on the green arrow button you can see that the virtual device has started so once the emulator has been set up correctly you can run your application by clicking on the run button over here it is not showing in my case because i don't have the sdks installed so the another method to run a flutter project is go to the terminal and then navigate to the project folder in this case it is demo and then write flutter run but before writing flutter run we can write flutter doctor to check if the android device is connected properly so now you can see we have connected devices one available so now we will try running our app pilot flutter run so once done don't quit the process and go to the emulator so you can see this is a pre fabricated screen that comes with flutter and whenever i click the plus button over here the counter gets increased by one okay and now for mac users you can also open the simulator and run the flutter code so now if we already have a project running and we want to quit it we just need to press q and then it will say application finished now to open a simulator we write open space dash a space simulator dot app and this will start a simulator on our screen and then again if we write flutter run then we can see the same application in our iphone now before moving forward i would like to tell you that the programming language used by flutter is dot so that is a programming language that is developed by google and it is a cl and it is client optimized okay so you can read more about dart by simply coming to dart dot dev over here you see the documentations you can read about it and in the website we also have a environment to test our dart code okay so this was for the video see you in the next tutorial thank you welcome to programming knowledge so in this tutorial we will start with the basics of dart dart is the official programming language that the flutter framework uses i will be using dot pad to write all my darts code so every dot program's basic requirement is a main method main method is the entry point of every dot program we can write the main method like this main followed by a parenthesis set of parentheses then curly braces and over here we write our code we can also add a void over here if needed void basically specifies that a method or function will not return anything we will study about functions in details later in this tutorial so after main method we let us discuss about print so to print anything on the console we use the keyword print and then the parentheses then single quotes and then we can write the sentence that we want to be printed on the console so for this case i am writing programming knowledge and then followed by a semicolon now if i run this program in my console i would be able to see programming knowledge so you can see programming knowledge is visible in my console now if i change the text over here the output in the console will also change suppose i write my own name and then click on run so now the console is showing my name like python we can also use double quotes and triple quotes to print blocks of statements after print let's discuss about data types so there are five to six primitive data types namely int for storing integer values float and double for storing decimal values care for storing character string for storing group of characters and bool for storing boolean values that is true and false now in dart there are four types of variable declaration the first type is static declaration in static declaration we write the data type for followed by the variable name let's call it v and then a semicolon we can store values to this variables by writing v is equal to and inside quotes rishabh over here we have written string that means the variable v can only store string values now let's try printing it so to print i'll write print v followed by a semicolon and now let's try running it so it is showing rishabh we can merge these two statements together so to merge we will write now again if i try running the program we will get the same output but over here it has changed from variable declaration to variable definition the basic difference between variable declaration and variable definition is that in variable declaration we tell the compiler that the program will have a variable v of string type but in variable definition we tell the compiler that the program will have a variable v of string type and rishabh will be stored in it after static declaration we have dynamic declaration over here dynamic refers to the data types that is a variable can store values of different data types we declare a dynamic variable by writing var v and then the values so in the first variable i am storing a string in the second variable i am storing an integer and in the third variable i am storing a decimal okay now i will try printing them so i'll write print v then print to v1 then print v2 now if i click on run i'll get i am getting the output as rishabh 10 69.69 over here var automatically changes to type of data stored in it and memory to the variables are allocated during the compile time and to check if i select v over here in the documentation i get string if i select v1 i get integer and if i select v2 i get double okay so after the static declaration and dynamic declaration the third type of declaration is constant declaration as the name suggests variable declared constants cannot be changed so to so to declare a constant value we write c o n s t const c is equal to 10 now we can print the constant values if i click on run it will give me 10 as the output and now if i try changing the values if i write c is equal to c plus 1 and then if i print it it is giving me an error error this is compilation failed that is because i have tried to change the value of a constant variable over here okay so after this the last type of declaration is again dynamic declaration over here dynamic refers to a location of memory during runtime for example suppose we want to show the exact time when the program is executed then if we use where or string to store time then the value will be the time at which the program was compiled and not the time when the program was executed so in such cases we use dynamic variables so to you create a dynamic variable we write dynamic and then the variable v and then we can add the value as and when required okay so this was about variables i hope everything was clear thank you welcome to programming knowledge so today we will learn about type conversion so first let us try about converting string to integer but before that i would like to tell you one thing that for writing comments we can use double slashes and write an inline comment and we can also use slash followed by a star and then again star followed by space and then over here we can write blocks of code and then the final one is three slashes and over here we can write the documentation okay so back in the program let's try converting string to integer so to convert string to integer we write we create a variable where one and then i will write int dot parse and inside this will be my string value so suppose i enter one now to check if one has an integer value so we will write assert one equals digit one assert is a builtin function to verify that the thing is as required or not okay so now let's try adding some value to 1 if it is an integer it will add without any problems over here i have written the wrong spelling it will be assert now if i try to run the program you can see 11 is the output so over here you can see we have good when one as a string input then it has been converted to integer and then i have added 10 to it and then printed so 10 plus 1 is 11. now we will try to convert integer to string integer to string so for that i'll create a variable to store i will write 1 is equal to 1 which is an integer dot 2 string okay now if i add some values it should be concatenated to the end of the variable so i will write 1 plus plus equal to reshaft and now if i try printing it the output is one risk of that means this integer one is converted to string and then ratio is added at the end of the string one so this is how we convert an integer to string now to convert our decimal to string we have two methods first is the one similar to which we have seen just now where 1 is equal to 3.1234 that is the decimal or double value dot 2 string and the other method is where 1d is equal to 3.1234 dot 2 string as fixed two so this basically means that the string will have only two decimal places so let's check that and you know to check that we use a cert keyword and then we will write 1d is equal to so as we have converted it to string we will keep it inside quotes 3.12 and now then we will try printing so we'll write one d now if i click on run the output should be 3.12 so you can see the output is 3.12 so this is how we convert an integer to string string to integer decimal to string and also how to trim the decimal places after type conversion let's discuss about operators so let's start with unary operators so first i'll create a variable a and store 10 in it now to add some value to a we can write a is equal to a plus 10 so what this will basically do is add a 10 to a and then again store it inside the variable a let's check it by printing it so the output is 20. similarly we can do for minus the output is zero and it will be same for multiplication as well as division so we can reduce the length of the code if we want so to reduce we will write a is equal to a plus equal to 10 so this will also do the same purpose that is to add 10 to a and then again store in it so if i run this the output should be 20 similarly for minus for multiplication and for division next type of operators is increment and decrement operator so if i write print a plus plus and then again print a the output will be 10 and 11 that means first this statement got executed then the value of a was incremented by 1 and then is value became 11 and it got printed here but if i give the plus plus before a and then if i click on run the output will be 11 and 11 that means before the execution of the statement a got incremented by 1 as you can see in the console similarly for mine decrementing we can use minus minus now if i click on run the output will be 10 and 9 that means first the statement got executed then the value was decremented and now similarly if i put minus minus before a and run it then the value will get decremented first and then the statement will be executed after unary operators we have relational operator so to learn about relational operator i'll create two more variables where b is equal to 5 where c is equal to 15 and one more variable where d is equal to 10 so to check equality between any two variables we write if a is equal to equal to d that means if a equals d then print true so the output is true and now if i change this d to b and then click on run now there is no output because we don't have an else condition so i'll write else print false now if i click on run the output should be false we will learn about if and else in details in the for future tutorials we will learn about files in details later in this course so after checking equality there is an operator that checks for greater than equal to case so i if i write if a is greater than equal to b then the output should be print true else print false now if i run this the output should be true that is because the b has 5 stone stored in it and a has 10 stored in it so as 10 is greater than 5 this condition is true and now if i change to d then again the output will be true because a has 10 stored in it and d has 10 stored in it so a is equal to d so the condition is true and now if i change it to c the output will be false because 15 is neither greater than nor equal to 10 now after this we have less than equal to and if we run this the output will be true that means 10 is less than 50 which is true and now if i change it to c itself then also the output will be true that is because 15 is equal to 15 now after this we also have only less than that means 15 we have to check if 15 is less than 15 so the output should be false as 15 is equal to 15 but not less than 15 and now if i change it to d the output will be true as 10 is less than 15 and if now i change it to greater than then the output will again be false as 10 is not greater than 15 so this is how we use relational operators now another type of operators is logical operators so there are three types of logical operators the first one is logical and and its symbol is and and it checks and it returns true if both the conditions are true otherwise it will return false so let check if b is d is greater than b so if this is the condition let's see what is the output so the output is false as you can see d is less than c that means 10 is less than c that means this condition is false and this condition is true and as i told you and returns true only when both the conditions are true as one of the condition is false it returns false and the else statement gets executed and now if i change it to greater than that means now both the condition will be true and if i try to run it the output should be true and as you can see the output is true now the next type of logical operator is or operator and the sign is this now or operator returns true if any of the condition is true so suppose and if both the conditions is true it will always give true as the result so now if i run the output will be true and now if even if i make one of the condition false the output will still be true that means if one of the condition is also true the output is true and now if i make both the conditions false then the output will be false and then the final type of operator is not so over here if i write a is not equal to 10 then the output should be false but as you know the a is having 10 stored in it so the output is false because 10 is equal to 10 and not not equal to 10 i hope are you and you are understanding so this was about operators see you in the next tutorial thank you welcome to programming knowledge in this tutorial we will continue with operators so the next type of operators are called null aware operators so for explaining this i will create a class num and it will have a variable or you can also call data members num and it will have a value of 10. we will learn about class in greater detail later in this course now after that over here i'll create a variable n and to initialize our class we just write num that is the class name followed by parentheses this is also called constructor then after that we'll create an integer variable no and now we will check if n is not equal to null null stands for empty reference then no is equal to n dot num that means to get the data member num from the object n where n is an object of class num and then we will print n so now you can see when i print n it is showing instance of num and if i print no it should show 10 so you can see 10 is the output now suppose we have not initialized this and then if we try running then it will show null that means that no value is stored in n so now instead of if else we can use the null of a null aware operator so for that we will write n o is equal to n question mark dot num and try running it the output is again null but we over here we don't have to write the if else what it basically does is it checks that n is null or not if n is not null then it extracts the value from data member num and stores it inside no so now let's try see the difference by initializing n over here i'll write num now if i run this the output should be 10 so you can see the output is 10 now we will see another type of null aware operator so now i'll change it back to null and now along with this i'll add two question marks and give a zero and now if i try running this the output will be 0 this means that if n is null then this will be the default value and if i again write num that means call the constructor and try running then the value will be 10 and then the final type of null aware operator is this it is written by two question marks and then an equal to so for that i'll remove this class i don't need it anymore i'll create a integer variable n o and not initialize it and now over here i'll write print and no double question mark equal to 100 what this basically does is if no is null then it will store 100 in it and now let's try running this so you can see hundred is stored in no now the last type of operators are ternary operator so i'll create a main method and i'll create an integer variable 5 and another integer variable 6 and now for the ternary operator i'll create a boolean value bool a n s is equal to n o greater than n o one so this is the condition and if the condition is true we will set the value to true else the value will be false and now let's try printing the answer okay sorry the t will be small so you can see the output is false that means 5 is not greater than 6 this type of expression is called ternary operator where 3 operators are used over here the operators are ans no and n 0 1. the functioning is this is a condition and if the condition is true then this part is executed else this part is executed so this was about operators after operators now we will move to conditional statements so in dart there are two types of conditional statements one is if else and the other one is switch case so to study about if else i'll create an integer variable you know and store 100 in it and i want to print even if the number is even otherwise i want to print odd so for that i can use an if else so inside the if i'll try to divide it by 2 and get the remainder and if the remainder is 0 that means it is completely divided by 2 that means it is an even number so i should print even otherwise i should print odd odd should be inside quotes and now if i run the program the answer should be even and now if i change it to 1001 the output will be odd and now if i want to have more than one condition then over here i can write else if so for that i'll write else if no divided by 3 and the remainder is equal to 0 then i will print divisible by 3. else print odd so now if i change the number to 99 which is divisible by 3 you will see the output is divisible by 3 so if i run it the answer is divisible by 3 so this is how we use if else for checking some conditions you can add as many elsif blocks you want but if and else block can only be used once after if else we have switch case so in switch case we use the keyword switch and then we need to pass a number or character that will be checked so i will be using number in this case and then we will check the case in case 0 that means if no is equal to 0 then i want to print 0 0 should be inside quotes followed by a break break brings the control outside of the switch case now after that i'll check for another case case 100 that then print and then again a break and then finally we can have default and there we can print not 0 not 100 and we don't need to give a break because we are as it is at the end of the switch case so now let's try running this program as the number is 99 the default case should be executed so if i run this the output is not 0 not 100 and now if i change it to 100 the output should be 100 and if i change it to 0 the output is 0 so this is how we use conditional statements in dot i hope everything was clear thank you welcome to programming knowledge so the next thing that we will study in dart is loops so basically there are five types of loop the first loop is for loop so the syntax of for loop is very much same as in other programming languages we have the keyword for and then we create a variable where i is equal to 0 that is initializing a variable then setting the range i is less than 10 and then increment or decrement and then inside this we write the code that we want to execute so for right now i will be printing programming knowledge and now if i click on run programming knowledge should be printed 10 times so you can see it has been printed 10 times so this is how we use for loop another possible way to use for loop is setting this value to 10 and checking that i is greater than 0 and instead of incrementing decrementing the operators and now if i run this code the output will be exactly same so these are the two methods in which we can use for loop the next type of loop is called for in loop so i'll just remove this so for in loop is basically used in collections we will study about collections later in this course but for now i'll just create a list and store one two three in it list is a type of collection that stores more than one values under the same name and now to run i'll write for where x where x is a variable that i have created in n o that means x will have the have 1 2 3 every time the loop runs so now if i print x 1 2 3 should be printed so you can see the output is 1 2 3 now the next type of loop is for each loop for each loop is also used on collections so just for example i'll write no that is the variable that we have created dot for each that is a method and inside that it returns and that is each value inside the no list and then it should perform some tasks so to write which task to perform we first given equal to then a right arrow and then we write the statement print n in this case so now if i click on run one two three should again be the output now suppose we want to call another function so for that i'll write void print num it takes a value num and then prints it to the console so now instead of this print statement i'll replace it with my method name that is print num and it takes a value num which is nothing else then n so now if i try to try to run this i will get the same output now the next type of loop is while loop so for that i don't need this function now i'll create a variable integer type variable num and initialize it to 5 and now i want to run a loop while num is greater than zero so to run a while loop the keyword is while and now over here i'll just simply print the number and then decrement the number by one and now if i run the loop i'll get the output 5 4 3 2 1 so this is how we use a while loop now the next type of loop is do while loop so for do while we first try to do and then inside that the code that every time the condition is true should be executed so i'll just print the number then num minus minus and then after do we have while num greater than zero and now if we run the code we will get the same output now the benefit of do while over while is that even if the condition is true even if the condition is false the loop gets executed once suppose the condition is suppose the number is minus 1 that is already less than 0 so now if i run the loop will get at least executed once so the output is minus 1 but if we use while instead of do while this will not get executed now if i click on run the console will be empty so this is the difference between while and do while now another thing that is important while studying loops is break and continue we have seen break in switch cases and now we will see that in a more elaborate way the basic concept of break is that wherever break statement is executed the control comes out of the loop so suppose i have number 10 and i want to print only till 5 but my while loop has the condition till check still zero so what i'll basically do is i'll check if num is equal to equal to 5 then break and the print statement will also be there and the decrement statement also so now if i click on run it should only print till 6 i guess yes so you can see the output only till 6 is printed because as soon as num value became 5 this condition became true and break was executed so as soon as break was executed it came out of the loop so that was about loops i hope everything was clear thank you welcome to programming knowledge in this tutorial we are going to discuss about collections in dart there are basically three builtin collections that ships with dot one of them is list list is very similar to arrays that we have in most of the other programming languages we can define a list by writing the keyword list and then the name that we want to give to the list and a pair of square brackets so in this manner we have created a variable of list which has a name name and it has been initialized and it has no values in it and suppose if i want to initialize with certain values inside it then i can simply write them inside the square brackets and to add more than one value we can just separate them by a comma so over here i have a list name which has two values stored in it rishabh and ram so list also follows the basic indexing concept that we have in most of the programming languages except pascal photon etc that is the indexing starts at 0 that means this reshop is stored at an index 0 and ramesh is stored at index 1 so to print the values at a certain index we just need to write it inside the print statement and followed with a square brackets and inside square brackets we need to write the index and now if i click on run reshop should be printed and now if i change the index from 0 to 1 ramesh should be printed and over here i can also change this list to var and it should not give us any error this is because the dart with the help of type inference automatically converts this variable name to a type or to a list type which has strings values stored in it now we can have values of more than one data type stored in the stored in the list so to do so if i write 100 which is an integer and if i also try to add a double value then this will work and it will not give us any error so if i click on run 100 should be the output now suppose i want to loop through each of the values then the most easiest way is to use a for each loop so for that i'll add var i in name and then inside this i'll just print i and then i should be able to see all the values that i have inside the list and now if i want i can also change the values at a certain index in the list so if i want to change the value at index 1 in the list name then i can just simply change it to suresh and this should work and i can and it is not necessary to change a string value to another string value only we can give it a integer value also and now if i click on run one two three should be displayed instead of suresh so it is working fine and now suppose we want to have a list that only stores string then what we can do is we can change this where to list and after that inside angular brackets i will define the data type that means only string values should be there so you can see the red line below this integer and float values it is basically there because we have defined the list as a string values container list and it cannot store integer and double so if i remove this then it will not be a problem now if i click on run rishabh and ramesh should be printed now let me change it back to var and i'll remove this comment and then i want to change the value at index 1 from ramesh2 123 and then if i click on run then it is changing okay and now suppose i want i don't want to change the value at runtime so what i can basically do is i can put a const over here which makes the values stored inside the variable name as a constant so now you can see over here i am declaring the variable name as a constant and after that i am trying to change a value so if i run this it should give me an error so over here you can see uncaught error unsupported operation indexed set and now if i comment this again and try to run this then this should not be an error now after that suppose i want to copy this list to another variable so for that i'll create a new variable n and i'll just simply write name and over here in the loop i'll change this name to n and now if i click on run the output will be same okay but now if i change the value of name means any value of the list name then the values in list n will also change okay so it is giving me an error because i have a const over here so i'll just remove the const for now for the explanation purpose so now if i click on run it is still giving me an error it is because i have missed a semicolon over here so now if i give the semicolon and run this again so over here you can see that if we change the values stored in the variable name then the values stored in variable n is also changing so basically over here it doesn't copy the set of values but both the list variables point at the same location that is the location of the data in the memory so to avoid this we have a special function that is prefabricated in dart known as spread operator javascript developers might be familiar with this so over here what we basically do is we surround the variable name with square brackets and before writing the variable name we just simply give three simple dots and now after assigning if we change the value of the previous list or the original list then it will not be reflected in the new list so now if i click on run the output should be rishabh and ramesh so this is how we get the two different copies of a list so this was for list see you in the next tutorial thank you welcome to programming knowledge in the last tutorial we discussed about lists and in this tutorial we are going to discuss about another collection that is called set so suppose i want to define a set of elements so i'll write elements and to initialize a set we give a pair of curly braces and inside suppose i have two values for instance hydrogen and oxygen okay so now over here i have defined a set elements that has two values hydrogen and oxygen and to iterate through each value we can simply use the for each loop so for that we write for where x in halogens then simply for now let's print the value okay and now if i run this hydrogen and oxygen should be printed in the screen okay my mistake instead of elements i have written halogens over here so now if i run this hydrogen and oxygen should be printed okay so another feature of set is that if we have duplicate values then it gets removed automatically so for instance suppose i add another hydrogen okay and now if i try to run this we will get a single hydrogen printed on the console okay so this is a feature of set that we use while programming in flutter okay so the next thing about set is that to initialize a set if we write something like this which is correct according to the basic convention ok now if i try printing its runtime type so first of all to print the runtime type we write element dot runtime type and a semicolon over here and now if i run this so it is giving me an error because an s is missing right over here and now if i run this the output is hash map but our task was or our assumption was that this will initialize a set so this is a common mistake that everyone does okay so the curly curly braces stand for a hash map and if you want to initialize a set then we can just add a data type over here or the data type of the values which we are going to store and now if i run this this should change from hash map to hash set okay and yet another method is we can write instead of where we write a set over here okay now if i run this the output will be again hash set okay and i can also predefine the data type that will be stored in that set by writing like this and now if i run this it again says hash set but instead of dynamic now it has string over here which means it can only store string values okay so moving on this was about set the next thing that we are going to discuss is map that is yet another collection provided by dart and it is very much similar to dictionaries in python and hashmap in java and for different languages there is also some reference to this type of collection okay so you understand that how much important this map collection is okay so to create a map we rise for suppose i create a map student okay that has a key value pair okay so the key is name and the value is my name okay then a comma then the another value that is another key that is h and the value is 20 so mark over here i can store different data types as my key and as my value let's say the third value is email okay and the answer is my email okay so now over here i have a student map that has three key value pair the key is name the value is rishabh key is age the value corresponding to that is 20 the key is email and the value corresponding to it is my email okay and now suppose i want to print a particular value so that can be done using the key okay so suppose if i want to print my name so inside print i'll first write the map name and then inside square brackets i'll write the key name mark over here i have my key as a string so the key over here is also a string okay and now if i run this reshafts should be the output okay so this was about map and over here we finished the collections now moving forward the next thing that we are going to discuss is functions or you can also call them methods if they are inside a class so over here this void main is itself a method itself a function the most important function in any dart program this is where the compiler will start executing the code from okay so now suppose i create another function a very basic function called sum okay i am writing dynamic before that that defines the return type and dynamic stands for the value will be assigned the data type will be assigned during runtime okay so the return type will be dependent on the inputs that we give okay so if i write where n1 comma n 2 ok now simply i just return their sum so i write n 1 plus n 2 and now over here i call this method and since it is returning some values so i need to store it in a variable or a shorthand of a shorthand method will be i directly surround it with a print statement so that the return value directly gets printed and then some i'll pass two values one comma two and now if i run this three should be the output okay and similarly as i have dynamic over here it is not confined to integer only i can also pass uh decimal value which will be considered as float over here and i get a float output and i can also pass a string over here so suppose i pass two strings shove and kumar and if i run this rish of kumar will be the output that means string concatenation has taken place okay now the another feature about functions in dot is that if we have a single line function then instead of writing it like this we can use the shorthand method that dot provides that is giving an equal to sign then a right angle sign and then just writing the operation that we want to provide and in this case it is n 1 plus n 2 and we don't need to write a return statement over here and now if i run this the output will be the same okay and let's again check it with an integer if i write 1 comma 2 sorry now let's run this and you can see 3 is the output so this type of function is common in all types of programming language and this type of function is called positional functions that means the first parameter will be stored in the first variable defined inside the parenthesis and the second parameter will be stored in the second variable decided in the parenthesis okay and the next type of arguments are called named arguments where we don't need to worry about the order okay so to make it a named argument i'll just put curly braces in between the parentheses and the variable names okay and now i can pass any value as per my choice okay so i i want to pass the n1 value so i'll just write the key name give a colon and the value comma similarly for the other parameter i'll write n2 that is the key name and a value okay now similarly if i run this the output will be three again okay and now the basic flexible flexibility that it provides over here is that i can change the order in which i want my value to pass okay so suppose i want to pass n2 as rishabh and n1 s kumar so now my output will be kumar rishabh okay but if we would have gone by the positional method then rishabh kumar should have been printed but because we are using named arguments we are getting this flexibility to change the order of parameters that will give as an input to any method okay so this will be it for dart deep dive in the next class we will start with exploring flutter and widgets that we have in flutter thank you welcome to programming knowledge so in this tutorial we are going to discuss about all the files and folders that ships with a flutter package so as you can see the first folder is dot dot underscore tool so it has some basic tools that we use in our developer console and we will see what is our dart developer console in one of the videos okay then the next folder is dot idea and it has the basic android studio configurations which are used when we run the project on android studio ide then after that we have dot vs code folder so this folder is created by vs code which is the ide i am using right now and this folder will only be created when you change some default settings and we can ignore this for now then the next folder is the android folder so as the name suggests it has all the files that supports the android functionality so it is a super important folder it contains all the files which are used by flutter sdk to run our flutter app on android devices and android emulators it is a passive folder which is created by flutter itself and we generally don't need to change anything inside the folder except when we want some variation in android and our ios app then the next folder is the build folder so it is also an important folder it holds all the output files and the generated resources and it is also a passive folder then the next folder is ios folder so it is also similar to android folder except as the name suggests its target devices ios if you are using windows then you may or may not have this folder as it is not allowed by windows but if you are using a mac os system you will be able to see this ios folder and what it basically contains is an xcode project xcode is the official development id for apple devices then the next folder is the lib folder as the name suggests it stands for library and 90 percent of interaction that we will have with this or any flutter project is via this folder this is the folder where we add all our dart files and write codes for our project then the next folder is the test folder and as the name suggests it is used for writing test for the project and that is done when we move from development to testing so it is not our main concern right now after that we have this dot get ignore and it has all the version control settings and if you don't know what is a version control then you can do a quick google and get your answer then after that we have dot metadata and dot packages so it is system generated and we don't need to worry much about them okay and then next we have this demo.iml so it is a project it is the file that has the same name as the project we will not work with this file also it is just a file which works with internal dependencies and stuff and the similar goes to pop spec dot lock then the next one is pop spec dot tml so it is a file in which we will be working over here we can configure all the third party packages that the project will use similar to the app level build.gradle that we have in android we also configure other things such as fonts location images and stuff then back to pub spec dot log so pub spec dot lock is generated from pop spec dot tml and it basically has a more structured uh settings than pub spec dot tml okay so this were all the files and we also have a readme.md so over here we can specify something about our project and if we are sharing our project we can add some data over here so that the developer whom we are sharing to can read this and understand okay so these were all the files that we have in a flutter project and now let's open our main dot dot file okay and let's see what is our prefabricated application has okay so to run any flutter project i can simply go to run and then click on run without debugging we can also use this start debugging but it is a slower process okay because in debugging we need to add some breakpoints and all okay and we are not in that complex level of flutter project so i'll simply start with run without debugging and then over here you can see the debug console has opened and it is writing launching and the basic requirement is over here you can see i have a flutter device that means an android device connected to my system okay and if you also want you can use an ios emulator instead of an android emulator okay but i'll go for an android emulator right now and let's wait for the builder to finish so once the application has started running we can see we get something like this on our emulator now the basic ui designing that we do in flutter is done by a widgets that means that everything that we see on the screen is a tree of widgets for example the text that we see on the center is a widget the app bar is a widget and the floating action button is also a widget and they all are the branches of the root widget which is the screen which is also referred as scaffold in flutter okay so that means scaffold is the root widget and the center text floating action button app bar all are the branch widgets of the scaffold root widget okay and all these widgets have their sub widgets also like the app bar has a text widget that displays the text on the app bar the center widget also has a text widget which displays the text that you see on the center similarly the floating action button has an icon widget so as to specify which icon will be displayed on the floating action button and similarly we can also have a text widget if we want to display some text below this icon in our floating action button okay so now if we go to our main dot dot and if you look for build method over here you can see first of all we have the scaffold widget okay that means our parent widget the root widget then we have the app bar widget which is a branch of the scaffold widget and then inside this f bar widget we have another widget that is the text widget and over here we have widget dot title that is basically displays the text that we can see on the app bar then after that we have this body inside scaffold and body refers to the entire screen leaving the app bar okay then inside the body you can see center that means the our elements will be displayed in the center then we have a child column main access element we will discuss about these things in later in another tutorials then after that you can see we have our text widget over here and you have a text written you have post the button this many times which is similar to the text that we see in our center widget okay then similarly this text also where we have dollar and underscore counter that stands for string interpolation which we have discussed in one of our dot deep type videos what basically happens that the value stored in this counter variable will be displayed at this place after that we have this floating action button okay and it also takes an icon widget and it displays the add icon okay now over here you can see our application also has some functionality that means if i click on this plus button over here the value will keep on increasing okay so how does this happen this happens that inside the floating action button we have a parameter called on pressed okay which calls underscore increment counter which means whenever this on pressed method is called then this increment counter is referred to by the on pressed method so if you look in the file for this increment counter over here we can see that this underscore increment counter is a method and the underscore which we have before the method name or variable name refers to that it is a private member of the class okay so inside this method you can see we have something called set state we will discuss about this later and we are incrementing the value of underscore counter and it is the same counter which we are displaying in our text okay so now just to check i want to increment the value by 2 instead of 1 so i'll just write counter plus 2. okay so now if i'll save this this will be build automatically over here you can see okay this will take a few minutes if you do it for the first time once done if you go back to your application and if you click on this plus then instead of incrementing by one it will increment by two okay so this is the basic structure of any flutter application we will start building the application from scratch in our next tutorial thank you welcome to programming knowledge so as i told in my previous video that in this video we are going to start making an application from scratch so for that first i'll select all the code that was free prefabricated by flutter and remove them okay and now in our dart deep dive videos we have seen that the maximum code that we were writing was starting from this main method and which is true which is the most common convention that is followed from the functionality point of view which means for competitive coding or stuff like that but our target is to show ui elements on the mobile screen and for that we need to follow the convention specified by the flutter team and that is to create a class and inherit certain properties now if you don't know what inheritance is it is basically inheriting features from a predefined class and we can only add features and use the predefined features but we cannot modify them okay so now let's say i create a class and to create a class we need to write the keyword class where c is small and then the class name for instance i give my class name as my app okay and then a set of curly braces and to inherit any other class we use the keyword extends okay and this extends should be written after the class name and before the curly braces okay and the class that we are going to extend or inherit properties from is a class not created by us but provided by the flutter sdk which which you can see is added in our pub spec dot tml file over here you can see we have this dependencies section and the dependency that we have added is flutter okay so to import any dart file in our main dot dot or any other dart file ok so we write import there is a keyword import and then the file that we are going to use is material dot dot okay so as you can see it is inside the flutter package that means it is provided by flutter and what it basically has is a whole bunch of widgets to use and the base class widget which allows us to use this widgets is called as stateless widget so over here i'll write stateless with check now stateless widget is not the only base class that allows us to use widgets in our custom defined class there are more which we will learn in other videos so now over here you can see i get a red line below this my app okay that means there is some error in the program and over here it is specifically because we are missing some methods and functions which should be inside this class and namely the build function okay so instead of this the another method that you can use is just write s t okay and then the flutter will itself tell you to click suggest you to this flutter stateless widget and if you click on them then you can see it automatically creates a class over here you can give the class name okay that extends the stateless widget and inside this it has a class that is called build it takes a parameter that is built context and it returns a widget okay so over here it takes a near positional parameter that is context which is of type build context okay now it is having more red lines okay so the it is because we are not importing the material package over here okay so for that i'll again write material dot dot and once it is done you can see all the red lines are gone okay and now over here it is written return container okay so we will discuss about container a little later okay so now the first thing that we need to return is a material app okay a capital now which whose basic task is to show all the widgets that you write inside this as an ui element in the app now one thing you need to remember is that out of all the other named parameters that it takes one most important parameter is home okay and whatever widgets or widget tree that we send as a value for this named parameter will be the first thing that will be loaded on the screen as we build the app okay and then later we can toggle to different screens which are in flutter is called routing or routing for now let's just send a text with jet and to do that we write t e x t as in text and mark the capital t and it takes a string as the parameter which will be displayed on the screen so for now let's give programming knowledge as the text okay now text widget also has other named parameters which we will use in the later videos okay but as you can see i have no name before this string and that is because it is a positional parameter which means it is compulsory to send okay and along with this we also have some named parameters okay which we will be using later and these are not necessary to send as we have discussed in our data deep dive video now let's see this in action and for that we need to write a void main okay and then inside this i'll write run app okay so this run app is also a method provided in material dot dot and then we need to write my app inside this run app method and then i also need to give a set of parentheses because i am passing it as a function so as to tell what it needs to run okay and now as you can see it is a one liner method okay so we we will use another method to declare the function okay the one liner method okay so i'll just cut it from here and then i'll give an equal to a right angle bracket and then simply paste this okay and now if i run this i will be able to see something on my screen okay so i just need to save and it will hot reload automatically so as the app starts running you can see the text is in red and it has two yellow underlinings okay that means the code is not correct okay and that is because as we discussed in the previous video that the root of every widget tree in flutter is a scaffold okay and over here you can see i am directly passing the text instead of scaffold okay so what you can do is you can pass a scaffold and inside scaffold you can pass a text as the body okay or else we will see this in the next video thank you welcome to programming knowledge so in the previous video we started discussing about stateless widgets material app and the text widget and we passed this text widget as a parameter to this home argument and then when we were running the application we were getting the text in red and it has two yellow lines below it okay and this generally happens when there is some error in the code so the error over here was basically that we were making the text as our home widget which is not correct because the home takes the root widget and as we have discussed in previous videos that the root widget needs to be a scaffold widget okay so instead of passing a text over here i'll pass a scaffold ok and now if i save this you can see that the text is gone and no error is present in the console okay so now let's add some widgets on our screen and the first thing that you will see in maximum mobile applications is an app bar so to add an app bar we write app mark the small a app bar and it takes an app bar widget over here the a is capital okay now this app bar widget also takes a few parameters and as we want to give an app our title we will call the title parameter and as we want our text as our title we will again use a text widget over here and as we have discussed in the previous video that text takes a string over here which is compulsory to give okay and that is also verified when you hover over it you can see that the says that it takes a string data which is compulsory and then all the other values are inside curly braces that means they are named parameters and they are not necessary to give okay so now let's give this programming knowledge okay and now if i save this i will be able to see an app bar with the text programming knowledge on it okay and here you go you see you have a text programming knowledge and this blue check section is your app bar okay and now if you are wondering where did this blue color came from as we have not discussed or not specified any color over here so let me tell you that blue is the default color in every flutter application okay but if you want you can also give a custom defined color okay so to give a color you need to come out of the text widget okay but be inside the app bar widget and then call the property background color okay and then the background color takes a parameter called colors okay so now colors is an enum okay that has a collection of colors which is prefabricated with flutter and if you don't know what is an enum then that is not a problem as we will discuss about enum in great detail in our upcoming videos okay so for now let's just say that colors is a keyword and if we hit dot then you can see all the colors that this colors enum has or that means the colors which are fabricated by flutter okay so let's say i choose red okay so now my background color is red and now if i again save this and go back to my application you can see the app bar color has changed to red okay then the next thing over here is okay before moving to the next thing you can see that all the code we are writing the maximum code is written in a single line okay and it is not very much formatted okay so to format you can give spaces manually here and there give enters press enters here and there but there is also a shortcut we can use a keyboard binding that vs code provides us okay to so to know what is the keyboard binding we need to go to code preferences keyboard shortcuts and then over here if you look for format then you will find a command called format document and then the key binding over here is your shortcut key so for me it is control control command and f okay so i'll apply that in my main dot if i write control command f so you can see everything got formatted on its own okay so now the application looks more structured okay so now after the app bar we can also add a body okay so now this body is the space that is left after the app bar okay so the entire screen space excluding the app bar is our body okay so for now as we have seen in the prefabricated app we have our text and center okay and so to display anything in center we have a widget called center so we will call that widget and then this widget also takes some parameters and over here you can see it takes a child parameter so i will call this child parameter and what all values it takes you can say it takes a widget and that is the child widget okay so for now let's just pass a text and now you all know that the text takes a compulsory parameter that is a string that gets printed and let's give my name okay you can give your name so now our body has a center and it has a text called vishav kumar now again i'll format it and then save it okay so once saved you can see i have a text called rishabh kumar in the center okay so over here you can see this is called a widget tree that means i have a scaffold as my root widget it has two branches app bar and center the first branch app bar has another branch text okay and it has a one more branch as colors okay then the second branch that is body it has a child branch called text okay so this is how branches are increased and we design our app we design our application okay and now you can explore about more parameters more functionalities about app bar body and if you want to do so all you need to do is after the comma hit control space okay and then all the values that it takes will be available to you like the center takes height factor key and width factor and in the app bar if we hit control space you can see it takes an actions actions icon theme automatically imply leading bottom okay so these are some functions that you can if you will hover around then you will ever be able to know what it is about so suppose if we choose bottom and if you over hover around bottom so then you can see this widget appears across the bottom of the app bar okay so for now let's try adding an icon and see where it appears okay so to add an icon we again call the icon widget okay and then this icon widget also takes and compulsory parameter and that is an icon data okay so icon data is not something that we need to worry about that is present in icons enum okay so this is also and enum and we will study about enum for now enum is uh icons is just a keyword and if you hit enter you will be able to see a lot of icons that it has and for now let's just say add okay which is the plus sign as you can see over here okay and now it is still giving an error and if you peek on the problem it says the argument type icon can't be assigned to a parameter type per preferred size widget okay so this means that we can't give an icon to the bottom okay but that is not the problem over here i just wanted you to know how to explore all the other things that it has okay and so you can do that now okay and then we will add the floating action button and some functionality to this application in the next tutorial thank you welcome to programming knowledge so in this video we are going to discuss about two very important widgets okay which are not the ui elements but are very essential while designing the look of the screen okay and the first one is column and the basic use of column is that we can give more than one widgets to column and they all appear in a column that is one after another okay so to use a column first i'll remove this center that i have over here and instead of that i'll write column okay and it takes a children and which is you can see over here of type widgets okay so inside this we can give a list of widgets that we want to display on the screen okay as the body so the first one is a text okay okay so this is a text now along with text i also want to add a button so first i'll give a comma and the next widget will be a button so to add a button in flutter we write flat button okay and it takes a parameter child as in what will be are written or displayed on that button okay so for now i'll just give a text and the text says press or just simple press okay and now you can see it has a yellow line below where it is written flat button and if you hover around it you can see the parameter on pressed is required that means this flat button requires the on pressed parameters and on pressed basically decides the functionality what will happen when this flat button is pressed okay and it takes a function it takes a function okay so you can define a function over here and then call it from here or what i'll do is i'll create anonymous function like this and since i don't want to do a lot of functionality i'll just print it in the console that the button is pressed so for that i'll write print and then inside that pressed okay now when i'll first format it and then i'll save it so i would be able to see two things on my screen the first is a text with rishabh kumar and after that i'll have a flat button which is calling press okay so just wait for a moment for the sink to finish so once finished you can see i have a text called rishabh kumar and after that press so the background color of the button and the screen both are the same so we are not able to differentiate so i can add another property that this flat button provides and that is color okay so for color i told you there is a enum that is provided by flutter called colors and then i'll just simply write red okay again format it and save it so over here you can see i have a text called rishabh kumar and below that i have a button press which has red background and if i press on it you can see i am getting over here presses presses okay so the text over here was processed inside instead of pressed so i am getting the same in my console okay now i can also change that text color over here okay so for that i'll just write text color and the color can be again colors dot white okay i'll again save this so once done you can see my text is in white okay so i can keep on adding as many ui elements i want in this column okay so for instance i add another text okay and let's set this programming knowledge okay now if i again save this so below this flat button i'll get another text that says programming knowledge and the order which we in which we write the elements over here that will be the same order that we see on the screen okay that means first this text then this flat button and after that we'll have this text programming knowledge okay so now uh this is how we can add more than one elements in a column okay now suppose i don't want this column to be over here but instead i want it to be inside the center okay so then we have a parameter that this column takes and that is called main axis alignment okay and for the column the main axis is the vertical axis and it takes and it also has an enum that is main axis alignment okay and then if you enter dot you can see all the options and as my task is to display on center i'll just hit center and then if i save this i'll be able to see it in the center so now you can see it is in the center now if you want you can also try different types of main axis alignment that is in this enum so i'll again hit the dot and let's try end okay so now if i save this let's see what happens so you can see everything is at that tech at the end that is the bottom okay and then similarly you can also try something called start that will go at the start okay then we have space around that means it will take all the space so you can see the entire height has been covered by three widgets and basically two text and a button okay so this is called space around and then we also have space between so you can see the spaces are only between the elements okay that means below this programming knowledge we don't have any space and above this rish of kumar we don't have any space but the space is only between the elements okay so this is how we can play with the alignment of the columns for now i'll make it center okay and then comma so now the text will be in sent okay so now you can see the text is again in center but you can see it is only the vertical center and not the horizontal center okay so there are two ways to bring it in the exact center okay so as i told you the column has main axis alignment as vertical axis and the cross axis alignment is the horizontal axis so along with main access alignment you also have a cross axis alignment and over there you can write cross access alignment which is also in enum dot center so then again it will be in the exact center and the other way to do is to wrap this entire column by a center widget okay so you can do it manually by creating a center and in the place of child you will pass this whole column or easier method is to go to code preferences and keyboard shortcuts and in the shortcuts look for sent refractor okay so you will get a certain key binding for the refractor okay in my case it is ctrl shift r so if i press ctrl shift r i get the options wrap with widget wrap with center wrapped with column okay and similar to that so i'll just wrap with center okay and you can see it automatically adds a center and the child becomes the column and now if i'll save this i would be able to see the entire column in the center okay so here you go the everything is in the center okay so now similar to column we also have a row okay so for to demonstrate that i'll just copy all the children that i have over here okay and instead of a column okay i'll also need to remove this instead of a column i'll have a row okay so as you can understand by the name row adds one element after another towards the right means starting from left towards the right okay so ins in place of children if i again pass all those things i'll format it and save it so now i will be able to see all these things things one after another so now you can see we have a text over here and after that we have this button and then the programming knowledge text and if i again click on this press so the console is again logging presses means the functionality is fine and similarly over here also inside this row you have a main axis alignment and you know how to use it and a cross axis alignment okay and you can also wrap it with a center and it is already wrapped with a center so you can see it is already in the center according to the cross axis alignment because for the row the main axis alignment is the horizontal axis and the cross axis alignment is the vertical axis so as it is already inside center the cross axis alignment is automatically center okay and if i add main axis alignment main axis alignment as center then it will be in the exact center of the screen and once reloaded we can see the row is in the center okay and so this is how we add more than one elements in the screen okay so this was for the tutorial thank you welcome to programming knowledge so in this video we are going to add some functionality to our application because till now what we have done is we have just added ui elements and we have seen different ways to add multiple ui elements but our application is not functional okay so to add functionality let's say that instead of print presses i want to display a toast okay so the first thing that toast is not prefabricated in flutter we need to add the extension okay and the place where you can find all the flutter extension is this pair is this website pub dot dev and over here if you search for toast then you will find this toast 0.1.5 and there are other extensions also but i prefer to use this one okay so now you can see over here it is written how to use and then the first thing is this toast colon and then sign then 0.1.5 this is basically the line to install this dependency in our project now in most of the extensions how to download is not written over here so you can also find it in the installing section okay so i will just copy it from here and as we discussed earlier we need to add all the extensions in our pub spec dot tml file so over there i'll add this file okay inside this dependencies section and at the same line we have this flutter written okay now if i save this it will automatically start getting the extension in our file in our application okay so after this now we can use that extension in our application so to use that extension again in my readme you can see the first thing that we need to do is we need to import this package so i'll just copy it from here and i'll paste it below this so now this file is inside our application and now to use the now to display our toast we write toast dot show and then the text that is message then the context and we have the context that is build context okay that we have in our every application okay then after that we have this duration then gravity then text color background color background radius and border okay so now you can see the background color has a default color of this so over here 0x stands for hexadecimal that means the code is in hexadecimal the last six digits stands for the color code and then the first two digits after x stands for opacity okay so now to display our toast we'll use this line so instead of console logging i'll write toast dot show and the message is toast to demo okay so now let's try running this okay so once the application starts running if you click on this press so instead of showing anything it is giving me a list of errors over here okay and the main error is unimplemented handling of missing static target okay so this means that we are trying to add functionality in a stateless widget class okay so that means that is because the basic functionality of stateless widget is to just create a static page okay that means if this page is created like this then we can't change it while the application is running okay and if you want to display a toast then that means the look of the page will change and the page will not be static and that will defy the functionality of stateless widget okay so to solve that problem we have another base class in our material dot dot and that is called state full widget okay so you can see stateless and stateful they both are contrary and so is their features so to create a stateful widget we just write stf or something like that and over here you get flutter stateful widget and then let's give this class a name so let's say my home app okay so now you can see a class my home map is created and it extends stateful widget then inside this we have my home app state that is the app state okay and it calls a method called create state then after that we have another class called my home app state and it extends state okay so this is the basic code that we need to write for every stateful widget and flutter and vs code helps us in writing this okay and if you want to know what what are the functionalities of these functions then you can simply go to flutter okay and open the first link and then over here go to docs okay so now instead of returning a container i want to return this scaffold that i have over here so i'll just cut it from here and paste it over here okay and now over here the home will be my this my home app class so i'll write my home app okay now i'll again format this and try running this okay instead of running i will reload this once reloaded you can see everything is still the same and now i'll remove this two texts okay just for now again run this okay so once the application starts running now if we click on press then we are able to see our toast so that means if we are inside a stateful widget we can change the state means the application is not static but it is suggested that when we don't need to change the state we should use state less widget okay so now let's explore this toast a bit so over here you can see the it also takes more parameters and the duration is toast dot length short that is the default parameter the gravity is toast dot back bottom that is also default and we can override it okay so for let's overwrite the duration to length long so i'll write duration toast dot length long and now if i save this so now the text will be now the toast will be displayed for a longer period of time and you can see that okay similarly i can also override the gravity so i'll write gravity toast dot center okay first format it then save it and now if we display the toast so it is in the center but as you can see we have kept the button also in center and we are also displaying the toast and center so that means according to convention they both should overlap but when the toast is being displayed it is above this flat button so this is because the toast is being displayed at the center of the entire screen and this press button is at the center of this scaffold part means the whole screen except the app bar okay so similarly there are other properties also that is background color and i can give it a different color let's say red so now the toast is in red i can also change it to different color means we can play around now the toast will means this color okay then we can also change the text color let's say colors dot black and now the text color is in black okay so this is the difference between stateless and stateful widget like when we don't have any functionality in our application so it is suggested to use a stateless widget but when we need to add some functionality then we should go for stateful widget okay i hope everything was clear thank you welcome to programming knowledge so in this tutorial we are going to discuss about text with chats so text widget is one of the most used widget and we ourself have been using it in two or three previous videos okay so today we will look deeper in text widget and see a few of the functionalities provided by the text widget okay so for that first i will remove this center from the body okay so i will just simply comment it out and then create another body okay it will be a center the center will have a text okay the centers child parameter will have a text and the text says programming knowledge okay now if i save this i'll get a text programming knowledge in the center okay you can see that okay now after this the next thing that we need to know is that we can constrain the number of lines that our text will be displayed okay like if i only want to display three lines then i have a property called max lines okay and if you hover around it you can see it takes an integer value so let's say i only want to display three lines okay and now to break the line you can use backslash n okay so what i am going to do is i am going to display programming knowledge four times in four different lines okay so according to the concept of this max lines only three lines should be visible so let's check that okay okay so now i'll first format this and then save this okay so now you can see instead of printing five lines it is only showing three lines so this is how you can constrain the number of lines of your text okay then now i i'll bring it back to single line okay just programming knowledge and the next thing that we are going to discuss is style that means how to apply styling to our text widget so there is a named parameter called style and it takes a text style widget okay so i'll write a text style and now it also has some properties so the first property as you can see is background okay so background takes a paint very paint widget and till now we have not discussed about paint so i will come back to that later then we have background color and you know we have an enum called colors then i can simply give red now if i save this the background of the text will be in red and you can see that okay similarly we have another property called text color no not the text color just simply color and then i can give colors dot white let's see that okay then again format it and save it so now you can see the text is in white color okay now the next property that we have over here is font weight okay font to it and that means the size so if i give no sorry the font to it means the styling like bold italic and stuff like that so there is another enum called font weight okay and if i write font weight dot bold so now my text will be in bold okay now once i save this so you can see the text has become a bit bold okay now after this you have font size okay and you can give the size of the font of the current text widget okay so i'll give 20 let's see okay so now you can see that text has become a little bit larger okay you can increase the font size a little bit more so that the change is significant and you can observe it okay so now you can see that text has become bigger now the next property that we have is font style and it takes font style dot italic ok so suppose if we want to make the text italic and you can see our text has become italic okay so these were the basic about text and there are other properties also like overflow text align and there are many other soft wrap struct style text align and these are not important right now because once we know about containers and paddings then these properties will make more sense so once we cover those we will surely come back to this okay so now another type of text that we use and that is used majorly for styling that is called rich text okay so i will again comment this out i'll have another body okay so first center center's child will be rich text okay then rich text takes a text okay and that text should take another widget and that is text span okay now text span takes a parameter called text okay which as the name suggests is a text okay and then one another thing that is style then again we have text style we discussed about it just now okay and then i give a color let's say colors dot black okay now i need to give another closing bracket over here now i'll format it and save it okay so you can see we have a text over here called programming okay now the basic use of rich text is to provide a different type of styling to different words in a string or in a sentence okay so over here the first word is programming and it is in text color black and if you want you can also change the color you can give it a size let's say 15 okay so this is one word and now if you want to give another styling to the next word then you have another property called children okay and it should also be of type text span so i'll you define it over here then it takes a list okay now as we have defined it to be text span it only takes text spans widget so i'll write text span again inside a text span we have our text okay so text will again take a text okay and now we can provide different styling to it okay so for now i'll just simply call copy this paste it over here and change the size to let's say 30 okay now once i save this you will be able to understand what is the difference okay so now you can see we have two different words but a single text okay now if i want i can also change this color okay and i should give a space over here so that it becomes more understandable and now you can see we have programming in this color and which is in a smaller size and knowledge in red color with with a bigger size okay and similarly you can add as many text spans as you want over here so i'll add another text span the text is let's say flutter okay and this should also have a space or whatever you like then again a style so the style will again be text style color colors dot let's say green okay and then we have font size of let's say 20 okay now i'll format all these okay i need to give a comma over here there is some error okay i missed a closing bracket over here now i will save this and then you can see another text that is flutter and it is in green color and it has a different size okay so you can see we have three different words but they are inside a single widget that is the rich text widget and they act as a single string okay so it's a real life uses in places like this like where you have a single text but a part of it is over here acts as a redirecting link okay like in our flutter application if i would click on this then i would open an another page okay and the rest of the text is just simple text and no changes are there on that okay so in such kind of scenarios rich text come to play okay and now another thing that i also want to cover in this video is like how to create uh how to separate widgets in different dart files and use it in another dart file okay so for that first of all i'll create a new dart file i'll call it my home underscore app dot dot okay and now inside this my home app dot dot i want this class to be there okay so i'll just copy everything or cut everything and paste it over here so now it is giving errors because i need to import material pack material dot dot okay now i will save this and over here you can see this my home app is giving an error because this file doesn't know what is my home app okay so now we need to add this my home app dot dot in our main dot dot file okay so for that again i will write import then dot n slash that means to look in the current directory and then over here you can see as the suggestion says my home app.not okay so now inside my home app dot dot we had this my home app so now over here the error is gone and now if i save and run this no change will be there but now what we can say is our main dot dot is a bit more cleaner okay so you can see the same thing okay so that was for the video thank you welcome to programming knowledge so in this tutorial we are going to discuss about buttons so button is a very basic yet very important ui widget that flutter provides us okay so the first thing i will comment this body out okay then next i'll add another body okay uh center and child okay so now there are different types of buttons okay and we will discuss all of them and the first type of button is flat button okay so capital f a flat button okay and it takes a child okay so child is the widget that will appear on the button okay so you can give any widget okay so let's try with our text okay and the text says press me okay and if i save this i should be able to see a button that says press me okay now it is not restricted to text as i told it takes any widget i can even give an icon okay and then i can has an icons enum okay and then if you give a hit a dot then you can see all the icons that are already available okay for now i'll just give add that is a plus sign okay and now if i save this i would be able to see a flat button that has an icon plus okay so you can see that okay now you can see this flat flat button has a yellow underlining okay and if you hover around it you can see one thing is missing and that is on pressed okay because over here you can see it is written that the parameter on pressed is required okay so let's provide that so basically on pressed is the takes a function that will be executed when the button is pressed okay so you can see it takes a function that is void that means it doesn't return anything and it and the function is run when the button is pressed okay so for now let's just create an anonymous function a one liner function and i'll simply print button pressed okay so that means whenever i'll press on this button button pressed will be written in my console okay so let's try this so now if i click on this plus over here you can see button pressed is being logged in my console if i go on pressing it will go on adding okay so this is an on pressed method okay so now it is not necessary to have a anonymous function like this okay you can have a function in over here okay so let us say i call it void button action okay that means the action that button will do and then simply over here i write press print button pressed okay and now over here instead of calling this i can call that function okay so button action okay and we don't need to give a parenthesis because we are not actually calling that function but we are pointing to that function okay so then again hit save and now again we should see the same action okay so now if i hit plus so you can see it is again giving button pressed but along with that it is also giving some other logs okay so that is not our concern so you can see as many times i press the button that many times uh our console is being logged with button console okay so this you can use this way also okay now the problem occurs when you want to pass a certain parameter that means this function accepts a parameter let's say string name okay and it logs the name also okay that means name is required but over here since you are pointing you don't give a parenthesis okay and hence you can't pass a value okay so then what you need to do is you need to again click like the write like this okay and anonymous function and then over here you can pass the parameter okay so for now let's say i am passing reshaft okay now if i save this everything should work fine but instead of console logging button pressed it should log button pressed reshaft okay so let's try that and you can see button pressed reshave is being locked okay so these were the three methods in which you can write the functionality for this on pressed which takes a function okay so i'll bring it back to the original means the first one that we have written okay over here just print button pressed okay now the next thing that we are going to discuss is the color okay so color then as you know colors enum is there present in flutter and it has a certain colors over here you can select any one of them i am going to use red okay so now if i save this my button should be red in color okay and you can see that okay now similarly i have a parameter called colors brightness and it also has an enum brightness and brightness has two values dark and light okay so dark means that the button would be visible even in a dark surrounding okay so now if i run this you should see how the changes happen okay so you can see the difference that the plus sign has become white instead of black okay and that is understandable when you have a black background white color is significant means you can point it out okay so that is what has happened over here and similarly if you change it to light that means the theming of that button will change for a light background okay and then you can see the button color is black that means if you have a bright background then this plus icon is noticeable okay and so is the case over here okay now the next thing that we have is a text color okay no now suppose if we have a text till now we don't have a text but if we have a text we can also provide some colors over here okay and you know how to add a text instead of passing icon as the child we can pass text as the child okay now the next feature that we are going to discuss about is enabling the button okay so like sometimes you might not want the button to be enabled at once but after some time it should be enabled okay so in that cases you need to disable the button okay so earlier we used to have an enabled parameter that used to take true or false means true for the button is enabled false for the button is disabled okay but in the latest flutter update it has been removed okay so the way around is instead of writing anything any function for onpressed if you write null then that means our button has become disabled okay so now if you save and run this you will not see any significant change okay but if we click on this you can see nothing is being logged in my console that means the button is disabled okay so now you can similarly add a disabled color like we had a color that was for when the button was enabled so disabled color is when the button is disabled so color start let's say this color okay so now since our button is disabled over here we should see this color and you can see that okay and similarly we have a disabled text color when we have a text as our child okay you can use that and then the last property in flat button is on long pressed okay so on pressed when you simply click on the button and on long pressed when you keep on when you click and hold okay so let's see what this this long press takes and it also takes a function that is nonreturn type okay that means it doesn't return anything so again i'll create an anonymous function and simply i'll print button is pressed for long time okay now let's see this in action so now if i press and hold the button this text should be logged in my console okay so now if i press and hold you can see it is showing button is pressed for long time again if i press and hold same is the log in the console and now if i try just clicking it so it is not working and because over here we have made onpress test null okay so i'll change it back to what it was print button pressed now if we run this you can see if i click on it then the log says button pressed and if i click and hold it says button is pressed for long time so this is how we add functionality to our button if you want you can display a toast over here call some function that does some complex calculations you can do whatever you want means all the functionality part you can add in this on pressed or on long pressed as ever you want your button to react welcome to programming knowledge so in this video we are going to continue our discussion on buttons okay so the first thing i'll comment this out this is about flat button which we discussed in our previous video okay so the next type of button that we are going to discuss is raised button okay so first i'll create our center and the child will be a raised button okay so the basic difference between flat button and rest button is that raised button looks a little bit elevated like floating on screen and flat button is infused on screen okay so if you go to stack overflow you can find a very good example over here you can see this buttons are bulging out over here and these are basically raised buttons okay and then if you scroll down you can see over here the button seems to be infused like there is no difference between the button background and the rest of the body of the alert dialog so the button seems to be infused in the dialog and such type of buttons are flat button okay so so back in our project over here we have a rest button okay and the rest button also takes an on pressed okay on pressed is compulsory for every button okay then over here also i'll add a simple anonymous function that says button pressed okay and then i also need to give an child okay so again you can give any text widget i am giving an icon from the icon cinema and the icon will be add okay and you can see there is an error over here and that is because we are missing a parenthesis okay now i'll format it and save it so now you should be able to see a button that has a plus icon on it and you can see that and if you look closely you can see there's a little bit shadow at the bottom and on the left side so that means the button is a little bit elevated from the screen okay so that is the z axis we have the shadow in the z axis representing that the button is a little bit elevated okay then we can apply the same properties that we have in our raised button like color okay so the colors is again red so now the button will be in red so an elevated button in red will be visible you can see that okay then similarly we have the color brightness okay then again it is let's say brightness dot dark okay and the rest of the features also like a disabled color and on long press okay so now the another property that we have over here is elevation okay elevation so that means how much shadow will be there that means how much will be the length of the zaxis so let's say if i give 10 so now you can see there's a little bit shadow now if i run this the shadow would be a little bit thicker okay so let's see that and you can see the shadow has become a little bit thicker and it is more significant now okay so this says that the button is a little bit raised and this actually over here acts as the shadow okay and now over here if i make this null the on pressed function as null so then let's see what is the difference like in flat button if we were making it null so no difference in the button was visible just the functionality was not there okay and that is because we have changed it to null but over here since we are making it null that means we are making the raised button disabled you can see the color automatically changes to a disabled type of thing okay and if you press then the functionality is also not there okay so now you can even try adding some disabled color okay so suppose if the button is disabled then the disabled color is let's say this okay so now if the since the button is disabled our color will be this okay and so now you can see the difference okay so this was about rest button and there are particular scenarios where we need flat button and we need rest button okay so you know where to use what okay now the next type of button that we are going to discuss is outline button okay so first things first i'll create a body a center okay and the center has a child and the child is outline button so as the name suggests this button doesn't have any background it just have a has an outline okay so first of all on pressed and on pressed i'll create an anonymous function that simply prints in my console button pressed okay and it has a child okay that is again an icons so that all the buttons have the same icon like all the buttons that we have discussed till now icons dot add okay over here it will only be icon and not icons and now if you save this you should be able to see an button that only has an outline and the background will be same as the entire screen and you can see that this is our button and it has a boundary okay so this is the default width and height of every button you can change the width and height by using a container and we have not studied about container but we will okay so if i press you can see button pressed so everything is working fine now the next feature that we have in this outline button is first let's format this okay the next feature is border okay so in an outline button the most significant part is the border so we have a property a parameter called border side and it takes a border side widget okay and it is used for designing the border okay so basically this border side is used for all the four sides like in general cases when you give a border to something then you need to give four borders for top bottom right and left but since it is an outline button and in button we want to have the same border throughout so a single border side will only be applied to all the four sides okay so border side takes a color okay that is the color of the border so let's say i give red okay so now you can see the color is something grayish now if i save this the border should be in red color okay and you can see that over here the border is in red color now the next property is width okay that means the border width and it takes a uh i think double yes it takes a double value and the default width is one okay so if i make it to 5 0.0 then it should then the border should be a little bit thick now okay so and you can see that okay so the border is a little bit thick now the next thing that we have is a style okay so style is basically just if you don't want to show the border so if you click on border style none the border will disappear and border style solid that is the default type means the borders border will be there okay so border is there so i'll try border style dot none and now my border should be gone okay so there's some error i'm missing a parenthesis over here okay again i'll format it and save it and now you can see the border is gone and to bring the border back i'll simply just remove this or you can give it border solid so that would also be fine and this is our outline button now over here also if you want you can add on long pressed and all the other functionalities all the other things that we have seen in flat button and the same goes for raised button all the parameters that we have seen in the flat button can be applied in both rest button and border outline button okay thank you welcome to programming knowledge so in this video we are going to discuss about icon button okay so as the name suggests icon button is a button that has an icon on it okay so first i'll comment this center out okay then we'll create another body that is a has a center okay and the child of the center will be uh icon button okay so in icon button the two important things are icon and the on pressed method okay so first i can end icon takes an icon widget okay and then inside i can we have an icons in them and if you hit a dot then you could see all the available icons okay so i'll simply go for add okay so now if you save this you can see a plus on the screen okay and now you can see the yellow line persists because i told there is two necessary things that is the icon and the on pressed function okay so for now i it will do simply print my print in the console print button pressed okay i'll format it and save it okay so now if i click on this you can see it is being locked in my console over here okay so now like all the other different types of button it also has a color okay and the color over here is for the icon and not for the background okay so color takes a colors enum uh color which we can get from color cinema and for now i'll give it red and now i should see my icon in red okay and then you can also disable it and give it any another disabled color also okay if you like something like that okay so then the next thing that we have over here is icon size okay and as you can see it takes a double value and if you don't give it then the default value is 24 okay so i'll make it 40.0 and now we should see the icon size has increased okay now the next thing is splash color okay so splash color is the color that will be that will appear when we press the button okay so again i'll give colors dot let's say some other color green okay so now let's see the difference now you can see if i hold this green color is there okay green color comes in the background okay so this was one thing then there's a pile padding okay and if you don't give the padding then also there is a default padding of eight from all sides okay so as you can see over here padding takes an edge in sets type okay so i'll write edge in sets okay now it has a few variations okay dot all for all the four sides then it has symmetric that is horizontal and vertical and then only that is top bottom right and left okay we generally use these three okay so for now i will go with all okay and i'll change the value from 8 to let's say a significant change will be 20.0 okay so now let's see now if we press it the circle should be larger okay and you can see that okay so now the next thing that we need to know about icon button is tool tip okay so this is this actually takes a string that describes the functionality of this button okay because this button doesn't have a text so sometimes the end user might not know the use of it okay so this helps to know what that button is used for okay so i'll give a string us say description of the button okay so now if we save this okay and if the user doesn't know what this icon is for so if we press and hold then you can see this toast type of thing appears okay and it has the tool tip written on it okay so in this way the end user will know what that button is there for okay so now over here you can see inside this icon button if i try adding some color so it is not there okay some background color i didn't mean color but background color okay so any background color or feature is not there okay so generally uh icon buttons don't support specifying a background color or other background decorations because typically the icon is just displayed on top of parents widget background okay so if you want to add a background or a background color so out of many ways to do so we will only discuss about the method discussed in the flutter docs and that is to use a ink widget okay so i'll comment this child out for now okay i'm sorry i'll comment this out okay then this center takes another child and the child is a ink widget okay so ink is basically a convenience widget it is generally used for designing purpose okay so we'll see a little bit about ink also in this video okay so first to the child and the child is icon okay sorry an icon button then two important things i can so i'll give and i can of let's say android icons dot android and the next important thing is on pressed before now it simply prints the console button pressed okay now i'll format it and save it and there will be no significant change just the logo changed because i have used icons dot android over here so the android icon is appearing okay so now to add the background color this ink widget takes another uh parameter that is decoration okay and a decoration takes a decoration type widget okay so decoration is the collective widget and it has many sub widgets inside it like box decoration image decoration and we will discuss about all of them okay for now the most useful over here would be a shape decoration okay because our main objective is to give a circular shape and add background color to it okay so shape decoration now as it is a shape decoration a shape becomes necessary and we want the button to be circular let's see so i will write circle border okay and then it takes no parameter and then the main part to add a color and let's say i add color blue okay now i'll format it and save it so now a blue color should be yes you can see that okay so like this you can add a background color to your icon buttons okay so now since you are using an ink you can do many other things also like you can give it a height okay you can also give it a width and you can also give it a color so you can see if i give colors dot blue over here instead of giving it inside the shape decoration so then now it will give me an error okay so if i try saving this and you can see the compiler has thrown error over here and that is because in flutter whenever we use that decoration then we can't give color outside the decoration okay that means in this ink if we are using the decoration then this color should be inside this decoration okay if we might not be using this decoration and then we give color then that is not a problem but if we are using decoration then the color should be inside decoration and not outside the decoration okay just wait for the build to finish okay and then you can see it is an icon and a square type of box okay so this is the default shape that is a square and now you can apply those height and width and see the changes so this was about icon buttons thank you welcome to programming knowledge so in this video we are going to discuss about the last type of button and that is floating action button okay so to add a floating action button after the body we have another named argument that is floating action button and it takes a floating action button with chat okay and it has a child okay and the child also takes a widget and for now i'll just give an icon i can say i can add and as it is a button it also needs an on pressed method and for now i'll simply print in my console floating action button pressed okay this should be inside quotes okay so now first i'll format it and then if i run i should be able to see a floating action button on my screen okay and you can see that the floating action button with the plus icon appears at the bottom right of the screen and that is the place where the floating action button is placed in android and as well as in ios okay so now this also has all the same functionalities like other buttons that is it takes a child it has an on press which takes a function that returns void okay then it has a background color okay and if you don't give any color then it will be blue which is the default color of any flutter application okay and you can also change it to any color you like okay like now i am changing it to red and you can see the color has changed to red now one more thing that i wanted to tell you about colors that we can change the intensity of that color if we want okay so for that all we need to do is inside square brackets if we write 300 then the intensity would be a little bit less okay and you can see that now if i write 100 it will be lesser okay so i am missing this over here let's run this and you can see the intensity has become more lighter now if i change it to 900 then the intensity will increase and the color will appear much darker okay so the standard if we don't write any number then the standard number that is by default use this 500 okay and you can see that then the next thing in floating action button is the tool tip okay and that is similarly a string that is displayed when we long press on the button okay so let's say tool tip now let's run this now if i press and hold so i'm able to see the tool tip that is the text in my tool tip argument okay so this was also the basic about floating action button now the next thing about floating action button is that sometimes instead of just an icon we also want a text alongside means next to the icon okay so then we can use the extended feature okay so for that we just need to write extended and extended doesn't take a child but it takes two other two different arguments first is the icon and the second one is text sorry it would be label yes so it takes a label and label takes a widget so we will pass our text widget okay and let's let the text say add you know again i format it and save it so now i should see a plus and then add written next to it and you can see that okay so this is how we can modify our floating action button okay now the next thing that i missed while discussing about flat button and rest button was that they also have a extended feature okay so let's discuss about that so coming to flat button we have we simply write flat button and dot icon okay so now this means that the flat button will first have an icon and then a label okay not just a child that takes a widget but it takes two different things first one is icon and the second one is a label okay so let's give it an icon i can say i can inside an icon widget from the icon cinema and let's say android for now okay and the label is let's see what the label takes and the label takes a widget so we will pass a text widget okay and it says android okay and on pressed is simply a console logging that is button pressed okay now let's format it and save it and let's see okay so now you can see we have the flat button that is for and it has an icon and then the text okay so now it is not as we expected because we are using a ink okay so we don't need an ink right now and just remove it from here now let's run this so now that bluish background should be gone okay so this is our flat button but in a extended form that is by using this icon constructor okay now if i press this the functionality is same okay and the same goes for raised button okay so if i write rest button then it also has an extended constructor that is the dot icon constructor and it takes two things icons and label and rest all the features are same okay so let's see this also and you can see that let's apply some color so that it is more evident i'm sorry because it's not red okay format it save it and you can see that this is our raised button but it now instead of having a single child widget it has two things first one is icon and the second one is text and the is intact okay so this was all about buttons in the next video we should discuss about some other widgets thank you welcome to programming knowledge so in this video we are going to discuss about a convenience widget which is the container can by convenience with jet i mean that it is there for the developer to make his job much more easier okay so let's see how we use that okay so over here instead of this button i'll change it to just a simple text okay so that it is easier for you to understand our text that says programming knowledge okay and now if i save this i should be able to see the text programming knowledge on the screen and you can see as it is wrapped by a center the text is in center okay so first i'll correct the spelling okay now to wrap in our container i'll use my refractor key binding that is control shift r and then wrap with a container okay and if you don't have this key binding you can simply create a container and in the child you can place our place the text twitter okay so now our container now our text is inside our container but we see no significant change okay so now let's add a color to the container okay so for that i write color color is colors dot red okay so now the container area will be red in color so let's see that okay and you can see the container is in red color okay now you yes you can also apply the same thing by adding a text style over here but uh suppose sometime you don't have a text widget and some different kind of widget then this container comes into action okay so you can apply a color like this now the next thing that you can do is you can apply margins okay so for margins you need to write margin okay and then margin takes another type of widget which is edge insects so i write h in sets okay and then it has a few constructors first one is all okay that means whatever value you give inside this it will be applied to all the four sides okay and then the next important one is only that means we give individual margins for all the four sides and the next one is symmetric which means we give a margin which will be applied to the horizontal sides and another margin which will be applied to the vertical sides okay so basically now we just have a single child so this margin we will not be able to see any kind of significant difference but the thing where we can see the significant difference is padding okay so we can also apply padding to a container so we have a padding parameter and it also takes edge inserts geometry okay so i'll use a named constructor edge inserts dot all okay and then this all takes a double value okay so over here instead of value i'll make it 10.0 now if i save this i should be able to see padding all over the and all the sides of the text and you can see that the red color has a little bit bulged out okay and that is uniform in all the four sides okay now over here instead of all if i use symmetric so if i use symmetric then i have to mention that which which value is for which is symmetric design okay so for let's say that 10 is for horizontal so i need to write horizontal and then 10 okay and similarly we have a vertical and in vertical i apply 20 so now you can see that the spacing in the both the sides right and left should be 10 and the spacing in top and bottom should be 20. so let's see that and you can see the spacing over here and here is lesser as compared to these spacing okay so this is when symmetric comes to play and the last one which is only okay so now only as i said it takes a different parameter for all the four sides so over here we can't use horizontal and vertical but instead of that we need to use left right top and bottom okay so i let's see left and i'll apply 10 to left i'm sorry then right okay and write 20 then we have top uh 30 to top and bottom 42 bottom okay and then i'll close this over here and a comma and i'll format this and save this so you can see now there will be different spacing in all the four different sites okay so this is how you can apply padding and you will see the same behavior when we use for the margin okay when we use this edge in sets for margin but the difference will be that if we have a color inside the container then that color will apply be applied only when we use padding and not when we use margin because the basic difference between margin and padding is that in margin we separate different widgets from each other and in padding we add spacing to a widget okay so over here we are adding spacing to that widget that means the size of that widget is increasing and our widget is container and in container we have applied the red color so in the entire spacing we can see the red color but instead if we were using margin then that meant that we are separating this widget from other widgets with uh some value that we have given over here so then the color if we have a color in the container would be confined to the exact area as it was before applying the margin okay so i hope this concept is clear now another small thing about this padding and margin is that you will see generally developers add a const over here okay so const stands for constant and the basic use of adding const over here is that it doesn't get built when we hot reload the program okay which means that if you are running an application and you open a page so if you open a page then this build method gets called okay now suppose if you are using an app and you have navigated to other page and when you are coming back to that page so instead of building all these things if it is a const over here so then this will not be builded again okay and if it is not being builded it will save a little bit of time and the navigation will be faster the app and interface will will be more smoother okay so you can use constant and you should use constant whenever you use paddings or margins now the next thing that we are going to discuss about is decoration okay so every container has a decoration okay and this decoration takes a box decoration widget okay so decorate decoration is the root and it has many sub branches okay so over here in container the most suitable one would be box container okay i'm sorry it will be box decoration okay so in box decoration now if we have box decoration and i run try running this then it you can see it is giving me an error over here okay and you can see the error is also in our screen and that is because in flutter whenever we have a decoration then the color should be inside decoration that means this color red should not be over here but it should be inside this box decorations over here in color i'll write colors dot red okay so now if i run this the error should be gone and i should be able to see the same exact thing as i was seeing before okay so you can see okay so padding is used when we only want to apply a padding okay and if anything other than padding then we need to go for container okay so this was about container and padding thank you welcome to programming knowledge now the next thing about the decoration is that you can define the shape of our container okay so by default the shape is rectangle if you want you can also make it to a circular type okay so for that we have a shape and the shape also takes an enum that is box shape okay and if you click on box shape dot then you can see we have two options one is rectangle and the other one is circle so if i change it to circle and then save it so then you can see a few changes okay so it has became circular but you can see the text has moved out of the circle okay so that could be fixed by using padding and stuffs like that okay for now i'll make a change it back to rectangle now if i run this i should see the same thing again okay and i'll also remove this padding i'll make it all okay and in all the sides it should be 10.0 okay i'll format it save it and you can see it is fine now sometimes what we require is to have rounded corners in our rectangular shapes okay so for that we have another parameter which is inside this box decoration and that is border radius okay so border radius and this border radius takes a border radius geometry widget okay so for that we will use a named constructor of border radius so i'll write border radius and then circular okay so circular means the radius will be circular and inside circular as it is a circle we need to give a radius so i'll give a radius of 10.0 okay let's see formatted save it and you can see the corners have become a little bit rounded okay so this is how you can design things using the help of container okay so if you want to design any widget we can we simply surround it with a container and then add all the designs to the container now we can also specify a height and width for a container okay so let's say i want to specify a width okay and i can specify a width let say as 500 okay now you can see the color of the container might have increased and you can see that now suppose you don't know what is the length of the screen and you want to take the entire length as the width of the container okay so then what you need to do is you need to write double dot infinity okay so that means it will take all the space that is available now if i save this it should be same okay you can see that now you can see as we have taken the entire width the text has automatically moved to the start okay but that is not the requirement sometimes okay so now suppose if you want this text to be displayed in the center okay so then i'll come back to the text widget this part i have left when we were discussing about text so we have a thing called text align okay so now in text align it takes a text align enum okay now if i you can see all the options so if i click on center so now the text would be in the center and you can see that similarly if i make it end then that text should be in the end and that is the case okay so this is how we apply width to a container and similarly we have the height okay height and then height also let's say for now double dot infinity okay now if i save this the entire body area should be in red and you can see the rounded corners at all the four sides okay and now over here this is the perfect time to use a margin suppose i want to leave a margin from all the four sides okay so i'll write margin const and it takes an edge insert for now let's say all and 20.0 so let's see what happens and now you can see from all the four sides margin of 20 has been left okay and as i said while discussing about padding when we add padding the color is also there and when we use margin the color vanishes okay means the entire decoration vanishes not just to the color but the entire decoration okay so this was about container now another thing that we have in container is constraints okay and this constraints take some box constraints okay and then in box constraints we provide the constraint that like suppose if we have a screen that whose size we don't know okay but we want to confine the height of the container then we can say the maximum height till which the container will extend is 300.0 okay and now let's save this and see what happens and you can see the maximum height is 300 okay no matter how much height is available in the screen the container will never take height more than 300 okay even though we have allowed the container to take a height of infinity that means all the space available but still it will only take a height of 300 that is the power of constraints okay and similarly we have a min height okay that means this is the minimum height it will take the container can't take a lesser height than this okay so for now let's say 100 okay and it will give you an error if you give the maximum height less than minimum height if i'll format it and save it and now let's see what happens and nothing happens that means everything is same but now if we try removing this height from here so you can see still there will be a 100.0 height okay so this is the 100 height okay 100.0 height okay now if i again add the height as infinity sorry double dot infinity so then it should again take the max height okay and it is taking the max height because we are providing it a height which exceeds max height okay so this was the thing about height and similarly we have for width okay so suppose if i say max width should only be 50 okay that means we can't have a width more than 50 so now let's see what happens and you can see this is the width okay only 50.0 pixels okay and similarly this is the max width so so similarly we have a min width okay and all the properties like if we remove the double dot infinity then it will take the min width and if we have the double dot infinity forward then it will take the max width okay so this is the power of constraints and this is very useful when you want to confine a widget to a particular shape to a particular size okay so this was about container this is how we use container with all the widgets to apply size to provide a background color to provide a little bit decoration so this is where container comes into action okay now along with container we also have another convenience object but that convenience widget is very confined very restricted we means we can use it only for one purpose okay so for now i'll remove all this decoration and thing means i'll remove the entire container okay and i'll format it save it so now again our text will be there in the center now the next widget which i was talking about is padding so as the name suggests it can only have a padding okay and you can see as the padding comes it already has a const and which justifies that it is also it is also recommended by the flutter team okay so now you can see as it is a padding we can only apply the padding and i'll make it let's say 20 and there will be no significant difference but still this is a convenience widget which we may need sometimes okay okay so padding is used when we only want to apply a padding okay and if anything other than padding then we need to go for container okay so this was about container and padding thank you welcome to programming knowledge so in this video we are going to discuss about images and the first type of image that we are going to discuss about is the asset image and as the name suggests the image will be an asset okay and an asset to the project means that the image is in the folder where the project is or in the root where the project is so for that first i need to add a image in my root folder okay so for that i'll create a separate folder and i'll call it asset okay and then i'll paste any simple image okay so for now i'll this image seems fine i'll add it to the asset folder okay so the images now in our root directory of the project okay then the next thing that we need to do with every asset image to use it in the code is to add it in our pop spec.tml file okay so to add if you look you will see some commented code and you can see it over here okay so first we write assets and then the location of that image okay so i'll simply comment this out okay and then over here instead of this it will be asset and then the file name which is in this case reshape dot png sorry and then we need to save this and then you can see automatically over here the flutter pub get command will start running so once it is done we can start using the image in our code okay so for that in my my home app i'll remove the body okay for now and i'll create another new body okay and the body is a image and dot asset okay so we are using the named constructor of image okay and we i will surely post a video on constructors class and objects in dart okay so for now image is a class and it has a named constructor that is dot asset okay so as it is an asset we can say it first takes the string name okay which is the required file which is the required parameter i'm sorry okay so i'll pass the name and we simply just can't pass gshf dot png okay we also need to pass the folder because we have kept it in a separate folder and as i told asset refers to the data which is in the root root folder okay so i'll write asset and reshop.png okay so now if i save this i should be able to see my image on my mobile screen okay and you can see that okay so this was this is the image that i have added and the first thing that people tend to forget is to not add it in the prospect.tml and then they struggle a lot to fix there okay so that is one important thing that you should never neglect okay so then if we added the file name we added the image name first then the next property that we can add is height okay so our height will be of let's say 20.0 height takes a double value so that's why i have added a dot is zero if i will not add it then also it is fine but adding the point 0 is a better practice okay so i'll save this and now my image size should have shrinked okay and you can see it has shrinked a little bit too much okay because the height is way too less i'll make it hundred and you can see the image has images height has decreased and since the height has decreased the width has also decreased and as we are talking about width we have a property called width okay and we can give any value we want okay so for now suppose i give 50 okay then since 50 is the smaller one then the scale right now will be 50. okay and you can see the image has shrinked even more okay so these were a few basic things now the next thing that we are going to discuss is the frame builder so as the name suggests it builds the frame in which the image widget will be shown so frame builder then it takes a it returns a method which has four parameters first one is build context okay so build context will get let's call it cons context then the next thing is widget child then frame and bool was synchronously loaded okay i'll give a comma over here and then format it okay so now let's discuss what are these parameters over here so the build context returns the current context okay then the widget child so it contains the default image object which is guaranteed to be normal because if we create an image asset then this is the required field we cannot neglect it we need to give this field and since we give this field there is some image that is played on the screen and therefore this child will never be null okay then the next thing is int frame so it contains the frame index it is of no use right now it basically comes in play when we display a gif or a video because what basically happens in a video or gif is that the image frame keeps on changing continuously at very minute interval okay so when we want to change the frame in between a video or a gif then this frame comes to play okay for now the frame value is null and as soon as we build it its value will become zero and for gif or any other multiframe image it will increase by one every time any new image is shown and when something is not important we change it with a underscore okay so that means it is just a placeholder it has no significance in the function but still we need it in the function definition okay then the next thing is was synchronously loaded okay so before discussing about this we need to understand what is synchronous and the difference between a synchronous so for that i have found a blog which beautifully explains about both and the difference so you can have a look at it later okay for now in simple terms what synchronous means is that the transmission of data was done immediately and as we are using it in images image widget so over here it stands for whether the transmission of asset image to the widget was done immediately or not so it is generally true but if it is not then you can display some other widget until it until the image is being loaded like a progress bar or stuff like that okay so these were about the four parameters now inside this function we need to return a widget that will be the frame of our image okay so for now i'll remove this okay and save this okay so we are getting an error because i have not yet passed anything i'll comment this out for the moment okay and then save it and run it again okay so you can see our images like this and now when we use frame builder we return our widget that contains the image widget okay that acts as the frame for the image widget so for now let's just give some padding to it okay so return a padding that has a padding and the padding is first then edge in sets all and from all the sides i want to add 10.0 okay and the child is our widget child which we get over here okay that means the current uh image will check okay then i'll format it and save it so now you can see the image has padding from all the sides okay so to make the change significant i'll change it to 100 okay and you can see the image has automatically left hundred pixels padding from this side from top and even from bottom and right but it is not significant in the screen as we don't have any other widget okay now we can also change it to container and add some color and see if it works fine or not okay so container then the container has a color let's say colors dot red okay i'll save it and you can see the container is red in color and it has 100 pixel padding from all the four sides okay so now you can also try some different things in this if you want so the first is decoration for decoration we have a box decoration we have discussed all this in the previous videos okay and then since we are using a decoration we can't have a color outside okay it is like of a quick recapitulation so i'll paste the color over here and then i will also like to change the shape so the shape is in the box shape pinum and i'll make it circle okay then again format it save it and let's see what happens and you can see the padding has become circular okay so this is how we use a frame builder okay so frame builder is a very important thing when we deal with images and it is a thing where people generally make mistake so i hope all the concepts were clear till now will continue in the next video thank you welcome to programming knowledge so in this video we are going to continue where we left in the previous video we were discussing about images and to be more specific asset images and the last thing that we saw was the frame builder okay so in this video we'll discuss a few more properties of this image asset okay so for now i'll remove this height and the frame builder okay and i'll surround this image with a container now you might think that if i wanted a container then i could have simply sent it returned it in my frame builder but why am i surrounding this image asset with a container instead so the reason is when we return something from the frame builder then the entire frame acts as the image we checked okay so if i apply any property to the image then that property will be applied to the entire frame which might be the container in our case so to avoid such type of situation we surround the image with a container okay so now for now i'll give the height and width to infinity okay height is double dot infinity and the width is also double dot infinity okay then i'll format it save it and you can see our image is in the center okay so now the property that we are going to discuss about is fit okay so fit decides how to inscribe the image into the space allocated during layout so this is the function of it okay so there are there is a enum that has all the types of fit and the enum is as the name as you can see in the suggestion it is box fit okay so the default type is contain okay that means the entire image will be in the container and no part will be clipped out okay so let's save this and see and you can see no significant change but you can also see that no part is clipped out we can see the entire circular thing in the screen okay so then the next type is cover okay so that means it will cover the entire container okay so let's save this and see and you can see it has covered the entire container that means the entire height and the entire width okay and if some part is uh clipped out then it will be clipped out only okay so it doesn't care if the image is being clipped out or not but the entire screen will be filled with the image okay then the next type is fill okay that means it will fill the container so let's see and you can see the image is neither clipped out and nor any space is left it took took the entire height it took the entire width but no part of the image was clipped out so what happened was it got extended and it got stretched in some directions so as to fit the requirements okay now the next thing is fit height okay so as the name suggests it will fit the height and it will not care about its width so let's see and you can see the height has been all the height has been taken up and the width is also taken because the image is big but you can see some part of the image got clipped on both the horizontal sides and that is what the flutter will not care about because right now we are using fit height so all it cares about is the height okay and similarly we have fit width okay so now all it will care is about the width and whatever happens to height flutter will not care okay so let's see and you can see the entire width is taken by the image and there is no significant change in the height but if the image was a horizontally long image then you could see the significant change okay so this was fit width then the next one is none that means no change okay so it is equal to fit equal to null okay so the same image as it was before we had fit then the next part is scale down okay so what this basically does is it will shrink the image if required but it will never stretch the image okay so let's see and this also so shows no significant change but if we had some image that exceeded the length or the width then it would have automatically shrink okay so to understand better we you can go to the official flutter box fit enum and over there you can see with very good examples how these all work okay so the contain it contains the box okay and it changes the it shrinks or increases the size of the child as requi as needed okay and in box fit it covers the entire space in fill it it stretches such that all the spaces are filled and fit height it only cares about the height in fit width it only cares about the width in none you can see no changes happening irrespective of the shape and size of the container and then is scaled down and you can see as the size changes its height is shrinking okay so this was about this fit thing okay so i'll remove it for now and save it so now we got the image back in the center now the next thing that we are going to discuss about is alignment okay so as we have seen in the text in the text widget over there we had a text align but over here we have a alignment enum okay and over here these are the options that we have so let's try top center and then the image should be pushed to the top okay and you can see that similarly we have bottom center and the images pushed at the bottom now if we had a image which had uh the width less than the screen size then we could also try bottom left and bottom right and the image will accordingly be placed at those positions okay so then after alignment the last thing that i want to discuss is repeat okay so sometimes you could see that a single image is being repeated in all the places okay means like in the entire screen of single images is repeated uh in column wise also and in rows wise also so that can be done using this repeat argument okay and it also has a image repeat enum okay and the first one let's say try repeat okay so that means that the image will be repeated in all the place available in the screen which is unused okay so let's see and you can see the image is repeated over here because this was the unused space and the same goes for this bottom part because this was the unused space okay so this is what we can do with repeat now the next type is repeat x and it is for the x axis that means the width so let's see and since we had no free space in the width so no repeat no repetition has taken place okay now let's try for repeat y okay that is for the y axis or the height so now you can see the same repetition took place as we saw in repeat okay so i hope you are able to relate all all these things together okay and then the last type is no repeat okay that means no repeat which is equal to null okay so you can see that okay so this was about image asset in the next video we will discuss about image network thank you welcome to programming knowledge so in this video we are going to discuss about class and objects in dart okay so if you don't know what is class and object you can refer to this website it has explained beautifully over here you can see we have a class car okay and then these objects are derived from this class okay so generally till now whatever we have done like whenever we wanted to store some value we created a variable and then that variable generally had some primitive data type like string integer and more like that okay but suppose if i want to have a collection of these primitive data types and refer to them as a single object then we use this class and objects okay so you can read more about this okay so back in our dot pad to create a class we have a keyword class okay and then we write the class name over here i am writing point that is a very common problem that we see okay means a common competitive coding question okay so i'll have two variables inside this intex and into i okay both are primitive data type and any variable that is declared inside a class is called as data members okay so now it is recommended that whenever we create a class and have some data members then we should initialize it okay and to initialize we have a special function inside a class called constructor which is used for initializing all the data members inside a class okay so now this constructor doesn't have any return type and it has the same name as we have of the class okay so over here the class name is point then the constructor name will also be point okay then we have created this method now inside this method what i'm going to do is i'm gonna initialize my data members okay so for that i'll write x is equal to 0 and y is equal to 0 okay so this is done now to create a object of this class over here i'll simply write the class name and then p means that is the object name which is very similar to how we created any other variable like int x so that means we have created a variable x of type end okay and over here if we give var that means that was also correct and so is the case over here even if we write var over here this will also work this is absolutely fine but for the time being i am gonna use point okay so that it is clearer to understand okay so now to access any data members we simply write print p dot x okay and let's try printing it so 0 should be printed okay so you can see we got an error over here and the error is because we have just created the object but we have not initialized it okay so to initialize any object we need to write the class name and then parentheses which is basically calling this constructor okay that means as soon as this point p will be created then this point method will be called which is nothing but our constructor so then our values will be initialized and the error will be not there so you can see the error is also null error that means the value is not assigned some proper quantity like this x and y are null they don't have any value stored in them then we are that's why the compiler is not able to print the values okay so let's try running this now so now you can see the output is 0 for x as we have stored 0 in x okay so now if i change it to 10 then the output should be 10 and you can see that okay so now i'll remove this function for now we don't need function right now okay so this is one type of constructor now we can have some parameters assigned also like suppose i am giving it a value int 8 okay and now over here when i call this constructor now i need to pass this value a okay so let's say i pass 200 okay so now over here what will happen that i am assigning the received value at a to this variable x so now if i print x i should be able to see the value that i have sent from here so let's see and you can see 200 is being printed similarly you can try for print p dot y now if i run this i should be able to see 200 and 0 okay now the next thing that we are going to see is uh like suppose i have the data members as x and y and the parameters i am taking is also x and y okay so like for first i need to give here another parameter because over here i am expecting two parameters so now if i write if i want to assign this x value to this x conventionally i should write x is equal to x and same goes for y i should write y is equal to y so now at this point the compiler will be confused as to which x refers to which type of data like is this x the data member or the positional argument that we have over here and the same for this x that whether it is the positioner argument that we get over here or the data members okay so in such scenarios we have a special keyword called this okay so if i write this dot x and this dot y so that means if it is written this dot x that means i am referring to the data member of this class okay so if i write this inside this point class that means my this is referring to this class and this has a variable y has our data member x which is this one so in this data member this positional argument will be stored okay so now let's try removing this and see what is the error and you can see the it is showing null that means no value is assigned because over here these both are referred as the positional arguments okay so if i add this dot y then the error should be gone okay i should be able to see 200 and 100 okay so you can see that so this is when this keyword comes to play okay so now this is one method to create a constructor there is a simpler method that a dot provides okay i'll remove this and i'll simply write point okay and then inside this this dot x comma this dot y and then a semicolon okay so this means that when we call the constructor the value that we store over here will be stored in the parameter in the named argument that we have over here and which is eventually a data member so the value received over here will be directly saved in this data member okay so now if i run this we will not see any error and the answer will also be the same but you can see the lines of code has reduced and it is a much more simpler way okay so this is it now after that the next thing that we have in a class is a function okay so a class generally comprises of three things uh data members constructor and some functions and the functions which are inside a class are called member functions and sometimes we also have a destructor okay so if you don't know about destructor then as we have constructor which is called at a star as soon as the object is initialized destructor is called as soon as the execution of that object ends okay so we are not gonna discuss about the destructor because that is not used a lot but if you want to learn you can go to the official documentation of that okay so now we are going to create a member function okay so i'll first simply create a simple member function that will simply print some data again it will have it will not return anything so the return type is void and the method name is print data and since it is a one liner function i'll write it like this print and then i'll use string interpolation okay and quite so now if i run this i should be able to see 100 plus 200 200 plus 100 i am sorry okay so you can see the output is not as we expected and that is because over here i have not called the method that is my mistake okay so to call any member function we first need to write the object name a dot and then that member function okay so now let's try running this and then we should be able to get to the output okay and you can see the first two print statements give these two output and the last is this statement which is executing this function and over here we have this print statement x plus y so we are getting the value of x plus the value of y okay so this were the basics about class and objects in the next video we will discuss little bit more about the class and objects and then continue with our images thank you welcome to programming knowledge so in this tutorial we are going to continue our discussion on class and objects in dot okay so now we are going to discuss about named constructors okay so sometimes we need to have more than one constructor such as one which takes two input values and the other one which takes a map okay so that may vary according to your requirement okay so in those places what our what we do in any other programming language was to create another constructor with the same name and over here the parameter will vary okay so that was the normal case that we had in java c or java or c plus plus okay but in dot this will give us an error okay so the way to have more than one constructor in a same class in dart is by using the name the constructor okay that means the constructor will have an additional name to it okay so to create a cons named constructor we first write our construct class name okay and then the additional name so let's say from map okay and as the name suggests that this will take a map of type string and i'll call it map and then i'll store the value in this map to my data members okay so for that i'll write this dot x is equal to map and map will have a x value okay this dot y and then map will have a y value okay so this is done now let's try creating a point object using this constructor okay so for that over here i'll first instantiate an object point p1 and then to call this named constructor we write point dot from mac okay and then over here as you can see over here we are expecting a map so we need to pass a map okay so for that i'll open curly braces and then the first value is x and let's say 10 and then the next value is y and i'll pass 20. okay then i'll close this bracket over here now over here you can see the type has been mentioned so it would be better if we mentioned the type over here also this is referred as a good practice this is string and okay that means in this map the key will always be of string type and the value will always be of integer type any other data type will give us an error okay so now let's try calling this function on this p1 object okay so for that i'll write p1 dot print data so now let's try running this and we should get 10 plus 20 as the output and you can see that so this is how we have more than one constructor in the same class by using the named constructor okay so now over here you can see this is how we create a named constructor but this is not the best way actually there is another way and that is called initializer list okay so for that i'll remove this from here okay and let's see how we use an initializer list okay so suppose my con cons named constructor is same dot from map okay and it takes a map of type string and end and i call it map okay now instead of giving curly braces what i'm going to do is i'll give a colon okay and then i'll initialize the value so i'll write x is equal to map x okay and y is equal to map y okay and then over here only we can call this print data method okay so let's see what happens print data okay so this means this method will be called after the value is stored okay so let's try running this i'll just remove this print data from here we should get the same output let's see and you can see we get the same output so over here you can see our lines of code are less and the work is also optimized that means before the code inside this constructor starts running our data members are initialized okay so this is where initializer list comes to play okay and we don't use initial initializer list just to initialize but for other cases also like assert assert x greater than zero okay so that means it will check if x value is greater than zero and if it is not then this constructor will not run okay so assert is a special keyword that we have in that okay and the code will not pass from here until this condition is true okay if this condition is false then the execution will stop over here okay so this is done yes so now let's try running this i hope there are no errors okay and you can see there is an error okay so let's see what has happened okay so the error over here is that x and y are not getting initialized okay so instead of writing it over here i'll write it i'll cut it from here remove this okay and over here i'll write the same thing okay now let's try running this and i think the error should be gone by now and the error still exists because we are calling this and this is not valid so now let's run this again okay so now you can see we get the output now the next thing that we are going to discuss in class is getters and setters we can use the same type of getters and setters that we use in any other object oriented programming language along with that there is another procedure that that provides okay so to get a value we simply write the return type of the value and then the keyword get and then the name point x okay so suppose if i call point x i want the value of value stored in this data member okay so then simply i'll write this dot x okay so that means over here return keyword is applied implicitly okay so now let's try running this so i'll write print p dot point x okay so as i told in the previous video we call all the methods inside the class using the object of that class okay so now let's try running this and 200 should be printed below this and you can see that okay similarly we can write for y and get point y okay and then this returns this dot y now similarly over here i'll print this print p dot get y sorry p dot 0.1 now let's run this and i should get 100 over here and you can see that now this getter is not only used for getting the data members we can use return customized answers also okay so suppose if i want to return a map of type string and and i'll call it get map okay then this should return a map of type string and it okay and the values will be x and that will have the value stored in the data number x okay and then it will have a value y okay and that will return the value stored in the data member y okay then i'll close this over here and as i said the return keyword is applied in these both implicitly okay so then again i'll call this method point p dot get map okay and now let's try running this okay so it is giving us an error and that is because instead of print over here i have written point so now let's try running this and there we get the result it returns a map where x has value 200 stored in it and y has a value 100 stored in it that is same as we have passed in our constructor okay so this is how we use the getters in that okay now talking about setters for setters also there's a different method that is provided by this dot so we simply write set that is a keyword in dot and then point x okay point capital x okay so now let's not give it uh give the same name i'll write set x okay and then it expects an integer value i'll call it x and then as we know how to differentiate this dot x refers to the data member and this refers to the parameter that we get over here okay so now let's try calling this i'll call p dot set x okay and then it returns expects a value i'll give 500 to it okay and then simply p dot print data okay now let's try running this okay so over here you can see we got an error so the error was instead of passing it as a parameter i pass it with an equal to sign okay so now let's try running this and you can see instead of 200 the value has now changed to 500 similarly we can set x set y for the y parameter and then similarly we can take a map and then map it to our data members like we did in the named constructor part okay so this was about getters and setters and by this we complete the basics of class and objects in that okay so the next thing that i want to discuss is about enums okay so enum is a special type of class that represents fixed number of constant values okay so to create an enum okay so now suppose we have a payment status okay like the payment status will have three values and those three need to be fixed values okay so in those those cases we use an enum okay so for enum we write the keyword enum and then let's say payment status that is the example scenario that we have taken payment status okay and then this has three values first one is not paid then otp sent and then paid okay so this can be the three members i'll give a semicolon over here comma over here okay i think we don't need a semicolon over here yes we don't need it so we have an enum over here that has three values not paid otp sent and paid okay so over here we can create a object of this enum okay so for that i'll add final status and to store any value from this enum we first write the enum name that is payment status dot not sent not paid okay so now we have a status which will have a data type of payment status and it has a value you can see in a payment status if i click on this also we will get the same thing that is payment status status okay so the status right now is not paid now to check so this is actually used widely when we use a switch case okay so in suitcase i have a status okay and then i'll i'm sorry in such case we have a status and then over here the first case is case payment status dot not paid and if that is true then we want to to do something and then similarly for the other two statuses okay so now you might be thinking that why do we use uh enum even when we can simply write it use it as a string or as an integer okay so enum is used for standardizing the values okay so now suppose over here if you have the stay santa okay so now suppose over here the status is not paid okay and in the switch case we are checking switch and then case and the case is not paid okay so you can see this is a common mistake that we can do like over here we have a capital p over here we have a small p and using enum we can avoid all these types of mistake also so that is another benefit of using enum okay so that was about enum i hope everything was clear thank you welcome to programming knowledge so in this video we are going to discuss about error handling in dart and you might be thinking why we are using this editor instead of the dot pad and the reason is that in dart pad it automatically handles the exception okay and as we are discussing about error handling so we need to see the errors okay not all the errors but maximum errors in the dart pad is handled by itself okay so the concept of error handling is same as in any other object oriented programming language okay we have a try and then we have a catch okay and then this catch block takes an exception okay and if you don't know what is an exception so that means that is a technical term used for errors okay so in your program if there is an error then it is referred to an exception okay so and in the catch block we deal with the exception okay so now let's try creating an error okay and without this try and catch block so i'll use the most popular example for errors for creating errors that is division by 0 okay so i'll create a variable a 10 sorry it should be 10 and then and then another variable b that is 0 and then in variable c i'll store the quotient so a by b okay and then i'll print c so now let's try running this and see what is the answer and you can see we are getting infinity as the answer okay so that is because whenever we divide by zero in dart it automatically gets converted to a double value okay and in the double data type in that we have a certain value for infinity so as this will give an output of infinity so it is automatically converted into double and the infinity value is assigned to this variable c that is why we are getting infinity as the output okay so to prevent from the changing of data types we need to add a tilde symbol over here so now let's try running this again okay and now since the it is not being converted we should get an error okay and you can see we are getting an error and as i told error is referred as exception so there is an unhandled exception and that is integer division 0 exception okay that means it is very much understanding that we have divided by zero and that is why we are getting this exception okay but now suppose this exception is in an app and the user sees this error message so he might not be able to understand what this means okay so at that places what we do is we surround them with a try and catch block okay so over here a try and every try block needs to be followed by a catch block okay and then it takes an e that is the extra exception and that will be an object of this exception okay and then instead of printing these things i'll simply print division by zero is not possible okay and now let's try running this again and you can see that the catch block has been executed and it is printing division by zero is not possible okay so this is what happens normally in try and catch block the we keep the code where we expect it to find some error inside the try block okay and if some error is found then the terminate execution is terminated then and there and the catch block is executed instead okay so this is the use of try and catch block and this is how we generally use try and catch block in most of the programming languages okay so now in dart there is another thing that it provides us okay and that is for specific exception handling that means if it is a division by zero exception then we will handle it differently otherwise we will handle it differently okay so for that what i'll write over here is on okay so on is a keyword in dot and then the exception name integer division by zero exception okay so if this is the case that means integer division by zero exception is the case then we will then this statement will be printed so let's try running this and you can see division by zero is not possible that is inside our this on block okay now along with this let's try to let's try and check if we can have another catch block or not okay so now inside this i'll simply print another catch block and let's run this and see what happens okay so you can see only the on block is being printed and not the catch block means if the exception is of this type then only this block will be executed and not the catch block and if the exception is not of this type then only catch block will be executed okay so now let's create another exception i'll comment this out for now and i'll create a list let's say s is equal to 1 comma 2 comma 3 comma 4 and i try to print the value out of index okay so that means s4 where the list has index only till three zero one two and three so let's try executing this and see and now you can see it is giving me some different type of errors which is not actually an error but it isn't warning and that is because over here i have forgot to give the data type now let's try running this again and you can see the error has been created over here and since it was not of this type so this block is not executed instead the catch block is executed okay so this is how we handle error specifically means handle error for specific exception in a specific way okay and suppose if we want to get an object over here also so after this what we need to do is simply write catch e okay so that means when this is the exception then the exception will be catched over here and then inside this we can do whatever we want to do with this e block okay so this was about to try catch and this is specific error handling now the next thing that we generally discuss in error handling is a finally block okay so that means whether the try block is executed completely or if there is some exception and a catch block is executed no matter what is the case after this whole part is over finally block will always be executed okay so let's see print always executed okay and now let's try running this and you can see the catch block has been printed means the statement inside the catch block has been printed and the final block has also been executed okay so this was the case when there is an error now let's see if there is not an error okay then as i said this try block should be executed and then the finally block because that is always executed okay so this was about finally block okay so the last thing about exception that we need to discuss is creating a custom exception okay so for that i'll create a custom exception class okay since we are studying an objectoriented programming languages most of our working will be done via class okay so i'll create a class age exception okay which will throw an error when the age is below zero which is not technically possible so class age exception implements okay so this is the way of inheriting another class properties okay or our abstract class to be more specific implements exception okay so we have an exception class already inside that okay now inside this all we need to do is create a define our method string err msg or you can name it as and how you like okay so what it basically does is by implementing this exception we are basically able to throw this type of exception okay and whatever we do inside this doesn't matter with the throwing of exception okay this is our custom choice what we want to do with it okay so over here this will simply return h cannot be zero it cannot be less than zero okay so now over here let's see i'll remove this thing from here and now over here i'll create a variable a vra is equal to minus 10 okay so that means if a stands for h so i'll check if a is less than 0 then i want to call this exception okay so to call this exception there is another keyword throw which creates an exception and throws it to the catch block if it has any or to the user if we don't surround it with a try and catch block so throw and then we write age exception okay so now let's see what happens and you can see we got an exception with the exception was thrown over here that's why the catch block got executed and the finally always gets executed okay so this was about error handling in dot thank you welcome to programming knowledge so in this video we are going to discuss about asynchronous operations in dot okay so the question that arises is why asynchronous operations so the answer to that would be a synchronous operations let your program keep running while waiting for another operation to finish okay so let's say for example we want to store data in our server so this type of operation doesn't execute instantly but might take some time depending upon the internet speed or size of data etc so if we don't use asynchronous operation user will have to wait until our program is interacting with the server which will create a bad user experience so to prevent that we use asynchronous operations and for this purpose that provides us three special keywords to use they are future a sink and a weight so first we are going to discuss about future okay so a future represents the result of an asynchronous operation and can have two states only either uncompleted state or completed state so how this works is when we call an asynchronous function it returns a uncompleted future and then future is waiting for the functions asynchronous operation to finish or throw an error and soon as it finishes or throws error the future state changes from uncompleted to completed okay so let's take an example and the keyword future we have capital f in it okay so let's say we have a future method a future function we call it fetch user data and what it basically does is return future dot delayed okay so this means that using this delayed method we can delay the process for some times that is equivalent to sleep in multithreading in java or in any other common programming language i mean object oriented programming language okay so then we have another class called duration and it takes all the time parameters that is seconds minutes hours days okay so for now suppose we assume that our program will take two seconds to interact with the server so i'll give it a seconds and that is two that means i this will wait for two seconds and then start executing okay and we are doing this because we have assumed two seconds to be the time of our program to be interacting with the server okay so after this we have an unnamed function which contains the code that will be executed after this delay of duration two seconds and simply i wanna print data okay so this is our function now we can also specify the return type of the future okay now over here in this fetch user data i have a return keyword but it is not actually returning any data it is simply printing the word data that means i am not returning anything and if i am not returning anything then we all know the keyword which is void which means this function will not return any data now i'll comment this out for now okay now after that i'll call this method fetch user data and after that i can say have a print statement switching user data okay so now let's try running this okay so now you can see we have fetching user data first and then data but actually according to the convention we have first called fetch user data which is this method so this should be printed first so that means our delay function is working fine and that is how the asynchronous functions work that means over here if there is a delay of two seconds it will not wait for two seconds to execute the rest of the code it will directly start executing the rest of the code and as soon as this finishes the future states become completed and it hardly affects the rest of the execution of the program so then this function is called an asynchronous function okay that means our program is still running and not caring about the completion of this function means the completion of execution of this function okay so this is how we use futures okay so the next thing that we are going to discuss is a sync and await so these keywords provide a declarative way to define our sync function and use the result okay so let's say this function remains same and instead of printing data now it actually returns something and which is eventually a string okay so means after two seconds data will be returned okay and now if it is returning string i need to change this to string okay and now after that over here i'll create another method which is string and i'll call it user message okay anything that we like and then what it basically does is where data is equal to fetch user data means we are calling this method okay and then i am simply printing this uh simply returning a string because we have a string return type here return data and now in our main method all we do is we remove all these thing and we write print user msg okay now over here you can see it is giving us an error so all we can do is surround it inside quotes and do string interpolation okay so now uh dart will infer that it is a string so now let's try running this and see what is the output okay so as according to the convention the output should be data but instead of that we are getting a future of string that means as i earlier said if we execute a future it returns a future and that is in uncompleted state and it is expecting to be completed or thrown error okay so now over here you can see what basically happened was that this function was executed and as this is a synchronous operation it didn't wait for this function to finish and returned the data and why and since this this was not yet finished it returned the uncomplete state of future and that is why we are getting such type of output okay so this is what we call a uncompleted future okay and completed future has a proper accurate value okay so i hope you are understanding what i am trying to say and now to prevent such type of error what we need to do is we will use the async and await keyword okay so what a weight keyword basically does is that it will wait for this function to execute or basically it will wait for this function's future to be of completed state okay and then this await function is giving an error over here and that is because a weight function never goes without a sync function okay a sync end of it always go together okay if we write a wait and don't write a sync it will give us an error however vice versa will not give an error and that is because a sink is just allowing that function to use a weight and then if we don't use a weight then that is not a problem but if we use a weight and we have not allowed that function to use of it then that thing will give us a problem okay i hope you are understanding these things now as you can see this is now a asynchronous function and over here also you have seen a asynchronous function but the difference between these two asynchronous functions were this asynchronous functions function returns a future while this asynchronous function is returning a string and that is why we are getting a error over here because asynchronous functions always return a future okay so instead of string this will now be future string so now it is a future string and since it also will now return over here uh uncompleted state of future and we want a completed state of future that means we want some actual result we will use a weight over here also and now since this is using a weight we need to give a sink over here keep in mind a sink is always after the ending parentheses and before the opening curly braces okay so now let's try running this program and now instead of getting this instance we should be able to see this data being printed so let's see and you can see as soon as the execution is completed it waits for 2 second and then data is being printed so it is waiting for two seconds because over here we have used a weight which is making the program stop for two seconds until this has a completed state of future and the same goes over here so this were all the basics about future async and await okay so i hope everything was clear thank you welcome to programming knowledge so in this video we will come back to flutter from dot and continue our discussion where we left so in our last flutter video the love we discussed about image dot asset so in this video we are going to discuss about another type of image and that is image dot network okay so what it basically means is that you can display any image from the internet in your flutter application okay so for that i'll remove this child completely from here add another child and that is image dot network okay and then we need to give a src which is actually the url of the image okay so i have a url copied you can pick any url from the internet okay now if i save this i should be able to see this image on my screen and you can see this it is a simple image of a burger with a red background okay so now the properties that we discussed in image dot assets are also applicable in image dot network and there are a few more things which were there which were present in image asset but i have intentionally left that to discuss in image dot network because it makes more sense over here okay so for that first a quick recapitulation about frame builder so as i told as we discussed in our previous video frame builder takes four properties first is build context context then a widget child then a frame and then boot is a sync loaded okay and then it needs to return a widget okay so just to see the difference of this frame builder i'll simply add a padding okay and it will have a padding of let's say const as insets i'm sorry edge inserts all and let's say 20.0 and the child is our child widget over here okay so now i'll format this and run and let's see the difference okay so now you can see we have a padding of 20 from all the sides okay let's make it 40 so that the change is significant and you can see we have a spacing from all the sides and that is the padding okay so this is about frame builder we have discussed it in the previous video about image dot asset now the next thing that we are going to discuss is a loading builder okay so the reason i have not discussed it in image dot asset because over there we don't actually load something we already have the image in our asset folder but while we are loading some image from network which means we are downloading stuff from some other server so that might take some time to load okay so that is when we use the loading builder okay so then loading builder also takes a build context i'll call it context then reject child and then image chunk i'm sorry image chunk event and that is the loading progress okay so this has all the data about the loading speed bytes already loaded and bytes remaining to load means all the numerical data means are stored in this image junk event okay so we can get all the data from this loading process okay anyways we are not going to discuss anything about that right now because that is not actually used that much okay so now over here we want to return a widget and that widget will be displayed until the image is being loaded from the server okay so for that i'll simply return inside a center inside a center i'll have a child and that will be a text view okay and the text view says loading image okay and why is this text we are giving an error okay so it should be a text not a text view i'm sorry now let's run this and see okay so you can see after some time the image is loaded okay now the next thing that i want to discuss is error builder so that means this widget will be displayed when there is an error the widget that we return in error builder okay so error builder it also takes a build context you will see in flutter whenever we are returning a widget we are generally taking a build context okay then an error object sorry object spelling is wrong and then a stack trace about the error okay and then over here i'll return inside our center the child will be text error occurred okay so now let's return this let's run this and before running i'll remove just one letter from here so that this url is invalid and this error builder should be called okay so let's see and you can see error occurred is written in the center and along with this you can also see in the terminal we are not getting any errors when which would be in the console if we don't have this thing right over here okay so let's see if i remove this error builder and then if i try loading uh invalid url we will get a error in over here in our console and you can see that and even on the screen so that means that the error handling has also been done internally when we use a error builder okay so that was about image network and all the other things that were discussed in image dot asset is also applicable in image dot network these were a few new things okay so now these are not the only types of images that we have in flutter there are two more that is image dot file and image dot memory okay so we will discuss about those when we cover little bit more about basics like working with files in flutter and working with base64 and stuff like that okay so this was about image dot network and now since we are discussing images there is another way to display an image inside a container okay and that is inside a decoration so inside a decoration we have our simple box decoration okay now this box decoration has a property image and this image takes a decoration image widget okay so over here i'll write a decoration image and then inside the decoration image image is required part okay and then over here we simply can't write the url for network image or the path for asset image okay for that over here we have different widgets suppose if i want to display a asset image so i'll write asset image that is the widget name and then over here the first thing should be the path so that is asset and then gshf dot png now let's run this and see and you can see the image is over here now what will happen if we will apply padding to this container that will not be a pla applicable for this image because this image is a decoration to the container and not a child to the container okay so there's a difference between decoration and a child okay now similarly for our network image we have network image and then over here goes the url okay so you can add the url over here and then it will be pretty much the same we we will be able to see the image on the screen okay and now we apply all the properties to the image like fit and stuff so that is not inside this asset image that is inside this decoration image okay so over here i'll i can have that fit and then all the other stuff that i had in image dot asset and image dot network not all but most of them okay so suppose if i write fit height and let's see what happens and format it save it and you can see the same properties as we discussed in image dot asset okay so this was yet another way how to display a image in flutter okay the method you display an image may vary according to your needs so this was for the video thank you welcome to programming knowledge so in this video we are going to discuss about list views in flutter okay so list view is the scrollable widget the most commonly used scrollable widget that we use in flutter and inside that we show a child one after another okay so for that first thing that i'll do is i'll remove this decoration box decoration thing okay and then i'll not give the height to infinity but to 300.0 okay so that are smaller size so that in less less child only we can see the scrollable effect okay so now let's give it a child and the child will be list view okay so now this list view takes our children same as we have in columns or rows okay now simply i give a text and that says programming knowledge i'll copy this and paste it a few times format it and now let's see what happens okay so now you can see i have this text printed four times but it we are not actually able to see the scroll level effect i'll reduce it to 50. now let's see what happens and yes you can see now we are having six texts over here but we can actually see only three and the rest are in scroll level so if i scroll i am able to see all the other lists okay so now yes it is not looking very beautiful but for understanding purpose it is adequate okay so this is the scrolling purpose now we can also change the scrolling direction we have a axis okay or let us say scroll direction yes and it has a axis enum okay and then over here we have two values horizontal and vertical by default it is vertical we can change it to horizontal now let's see what happens and you can see it is scrollable in horizontal direction okay so now another thing that we have in a list view is a padding okay so we can add a simple padding construct inserts all 10.0 let's save and see what happens okay so over here the common confusion is that this padding is for in between each children but that is not the case actually it is for the entire list view okay so now uh generally when we use list view we actually have a list of items and then we want to show widgets according to that okay so now for that what we basically do is let's first consider having a list okay so i have a list of let's say type string and they are called list items okay and they have something like a comma b or maybe it will be better if i just make it comma two comma three comma five six seven eight nine zero and change the type to int okay so now we have a list okay that has numerics one till zero can we want to display it in a list okay so over here this children over here we can we can't simply write list items okay because that is invalid because this children expects a list of widgets and what we are actually giving here is a list of integers okay so this is a common mistake that developers make okay so there's a way around what we can do is we can use the map function that we have in a list okay so what map basically does is it is like a for each loop it will give you each item inside the list and then we can perform specific actions related to that okay so map and then over here this e will contain the integer means each integer one by one okay and then over here instead of null i want i will return the widget that i wanna show here that i wanna show in my list okay so i'll simply write return our text widget maybe okay and the text says count and then string interpolation e okay and then after that over here dot to list okay so what we have basically done over here is that we have mapped all the items of list view okay and for every item we have returned our text widget and then we have finally converted all the widgets to a list and then that list is given as a char children in this list view okay so now let's see what happens and you can see count 1 count 2 count 3 count 4 means as we expected it to be ok now suppose i want to give it a little bit spacing so what i'll do is i'll wrap it with a padding and all sides should be 10 and then if i save this so now you can see it is having some problems in spacing and padding i'll remove this for now okay that is just for understanding purposes so now you can see count one count two till from here till count zero okay so this is how you display a predefined list of dynamic data type as a list of widgets using a list view okay then after that we also have a few things such as key okay so then it also takes a key now the basic use of key is that we can use the same key in any other list and then we can manage both the scrolling of both the lists at the same time okay so that is the basic use of key and then there are other things that we don't need as such but when we will do some projects then we will see all the other features of list view also thank you welcome to programming knowledge so in this video we are going to continue our discussion on list views in flutter so in the previous video we saw one method to use a list view in flutter in this video we are going to see another method and that is by using the builder named constructor that we have for list view in flutter okay so for that i'll first of all remove this list view from here and then i'll write list view dot builder okay so now this builder takes a few parameters some parameters which are necessary to be given first is the length of the list okay so that is referred as item count okay and now we are referring to our this list items so i will give the length of that okay and we know to get the length of any list we have a keyword called length in flutter okay and then we need to give an item builder okay that means how and how each item will look okay so now it takes a few parameters first is the build context as i said whenever we will be returning a widget or dealing with widgets we will be needing a context and to be more specific build context okay so this is automatically returned in this item builder okay and then the index okay means this index item is going to be displayed okay so now first of all i'll simply return a text that prints count okay and then using string interpolation i'll write list items index okay now let's try running this and you can see we have one two three and then means we have given this much space only that is why it is happening like that now i'll remove this space uh height part from here now let's see and you can see we have this list over here okay now it is obviously not scrollable because we have ample space left okay so now this is an easier way or to use the list view when we have the same widget for each item okay now since we are discussing about list view there is a special tile widget that is most commonly used in a list view okay and it is basically designed for being used by a list view and that is called a list tile okay so means its ideal purpose is to be the item of a list okay so first of all it takes a title okay and the title can title needs a widget so for now it is text count the same thing string interpolation list items index okay then along with a title it takes a sub title and it can be anything it means it also needs to be a widget it can be any widget so text and anything like programming knowledge then after that it takes a leading okay that means on the in the left side in the at the starting of the screen if you want to display something okay so that is called leading okay it also takes a widget for now i'll display icon that is what standardly people do and then inside that i'll use the i can see now and then let's say done that will give us a tick mark okay i need to format i need to give a semicolon format this now along with title subtitle leading we also have a trailing which will be in the opposite side of the leading which means at the end of the screen horizontally so i can also give this an icon widget okay inside that i'll use icons dot close that will give me a cross sign okay now along with this we also have on press or on tap yes we have on tap and on long press so on tap that is like any other on tap it takes a function simply i'll print pressed list items index okay it is giving error because that is a string that is an integer and we are trying to display it inside a print statement and print only takes a string okay so that problem is gone okay so now let's see how it looks and you can see we get a list now as i told in leading we have given this a done which is our tick mark and in trailing we have given a close which is this cross mark then this part is our title this part is our subtitle and if we press on it we are getting pressed one pressed to our and similarly okay so this is a list tile okay so now the last thing about list that i want to discuss is that it doesn't always need to be a proper list means suppose i have three different columns of varied things i can't say that all the things are uniform all the things are coming from a list means there are different things but i want them to be scrollable okay so in those conditions what we can use is we can wrap our body with a widget called as single child scroll view okay so what it basically does is that its child whatever we give inside its child no matter how long it is they all will act as a single scrollable screen okay so this is a way around when you don't actually properly use a list but we can use all the properties of a list okay so this will be about lists thank you welcome to programming knowledge so in this video we are going to discuss about another type of list view and the dismissible feature which is generally associated with list view okay so let's start first of all in my body i will give it a width of infinity so with this double dot infinity okay and then the child is list view dot separated okay so this is another type of list view which has a separator builder like in the list view dot builder we only had an item builder okay but over here in list view dot separated we also have a separator builder which means every item in the list will be separated by the widget returned to this separator builder okay so first of all let's add the item count and it will be list items dot length okay and then the item builder is simple it takes a build context okay and it returns so this wrong spelling returns a list tile okay and then over here in the title we can have the text and the text says count then we'll use the string interpolation inside curly braces we will write list items and then the index oh i forgot to give an index over here this method also takes an index okay then i'll return this over here this will go over here now let's format this and now let's also give a separator builder okay so when you hover around separator builder you see we get a build context and an integer which is the index so this means that for every item we can specify a different divider okay that is the power of this separator builder but over here we will simply use a single separator for all the items okay so build context context sorry that will be a comma int index and i'll use the arrow function and it returns a divider okay so we have not yet discussed about divider so divider is actually a widget that will just draw a faint horizontal line divider always draws a horizontal line in flutter so let's save this in c and now you can see we get the values and each value is divided by a divider okay so now you can see this is the standard color of divider but we can do a few changes with the divider like change the color so i can change the color to color start red now let's format this and see what happens and now you can see we have the divider in red now similar to list view dot builder it also has a padding okay so we can give it a padding con sorry the const will be in small c const edge insets dot all and that can be 10.0 so now let's format it save it and then you can see each divider has a little bit space over there and that is because of the padding okay so this was about the list view separated which is the last type of list view okay so we also have a list view dot custom which takes a sliver delegate but still we have not discussed about sliver delegate so i'll do the list view dot custom part once we discuss the list view sliver delegate okay so moving on the next thing that we are going to discuss is about the dismissible feature okay so by that i mean that if i if i pull from the end to start on a list item it should be dismissed or maybe over here it shows a delete icon and then if i pull it from the right to left the item gets dismissed okay so that is a very common feature that we see with list views okay so to do so over here in item builder instead of returning a list to tile i'll return another widget okay and that is dismissible okay so now again this dismissible will let's give it the child a card okay so a card is another type of widget it is very much similar to container only difference is that it has an elevation means it also has a height in the zaxis okay so then i'll give the child as a card okay then card will take a margin again the margin let's say h inserts symmetric i'm sorry edge inserts dot symmetric okay and then in horizontal we give it uh let's say 15.0 margin and in vertical we can give it a 4.0 margin i am doing so because we are already giving it a margin over here of padding over here that's why that's why i am reducing the margin vertically so let's format it now we have the card now inside this card we will add our child okay so the child will be for now a simple list tile can the title will be our text that says count and then string interpolation list items index let's format this save it and see okay so you can see over here it says that key should not be equal to null okay is not true so that me that error is because this dismissible takes a key which is not significant over here but it is necessary so over here i can simply write key and then key takes a key value okay so over here i can simply say value key okay and then over here it takes an id i'll write one two three okay that means this value key means it will generate a key from this value and it is assigned to this key okay that is just for removing the error now let's save this and now you can see we have this card over here this elevated thing okay so now i think we should remove this separator builder the purpose is understood over here and this can be changed to builder okay so now you can see we have this card over here for each item okay now after this the next thing that i need to do is for dismissible i need to add a on dismissed property okay so over here after the key i'll write on dismissed and at takes a function which has the direction means the direction in which the item was dismissed and then for now i we can simply print the direction okay we can change it according to the functionality needed later so let's save this and now let's try dismissing it so you can see this is dismissible and the value is being printed okay the direction is being printed so over here you can see dismiss direction dot end to start which means this is the end this is the start and dismiss direction is an enum okay now if i do it from here so now you can see it is like start to end so i think you are understanding what i am trying to do over here this is the feature i was talking about we can simply remove an item from a list with a little bit of animation okay and now however if i build this again i think all the items should return okay now let's rerun this that was giving us an error yes so you can see we have the list over here back now along with on dismissed we can specify a direction that will be used as the dismissed direction like right now in the app you can see the item can be dismissed from end to start and can also be dismissed from start to the end but i want only to dismiss it from the end to start so in that case what we can do is inside this dismissible we can add a dismiss direction okay not a dismiss direction just throw direction okay and over there over here we have just now seen we have our dismiss direction enum like this and then you can see this is the these are all the values down means when we pull the item down and to start means the names explain themselves okay and i want this to only be valid for end to start means the dismiss feature will only work when we try dismissing from the end to start okay now let's save this and see so now if i try dismissing it from this direction it will not work but however if i try it is missing from the end to start it will force your work because we have restricted the direction from end to start only now when we are dismissing you can see we have this background over here now in flutter we can also specify what should be the background of every item when being dismissed okay so the general convention would be to add a delete sign okay so let's do that we have a background named parameter it will it takes a widget and for now it is a container okay now the container should have a color and the color is red okay let's format this first now it takes a child the child is an icon which will obviously be a delete icon so i'll use the icons em and then delete and then the color should be colors dot white okay and then the size can be around 40.00 okay let's format this now after that i want the containers item to be aligned to the right we since we are dismissing it from the end to start where the end represents the right i want the child to be aligned at the right so i'll add the alignment as right so i'll use the alignment tenon alignment dot center right that means in the center vertically and at the right horizontally okay and maybe let's add a padding from the end that is from the right otherwise the the the the delete icon will be at the end of the container means it will be sticking to the border of the container so let's add a padding and then again add a const before padding and margins because so it will not be builded again and again so const as insets dot only and it is only for write 20.0 now let's save this and see so now when we dismiss this we can see we get this delete icon over here now this doesn't look very good because when we try to dismiss this it is not actually the card which is being dismissed it is a little bit surface beyond the cart which is dismissible okay so to fix that over here we can remove this padding from here and do a little bit design changes which is required but the purpose is fulfilled so i hope you understand how to use our dismissible okay and and one thing that i missed and dismissible was there is a confirmed dismiss option okay that means once the dismiss process has been done and still you want to confirm the user that are you sure you want to you want this to happen so then we can use this confirm dismiss okay so this will be for the video thank you welcome to programming knowledge so in this video we are going to discuss about our inbuilt function in flutter which is set state okay so what set state does is it informs flutter that the internal state of application has changed and probably we should rebuild the current interface means the current screen that the user is seeing which means that whenever we call the set state function this build method is executed once again okay so we will see what happens when we don't use set state and how set state comes to the rescue okay so first of all i'll remove that list i'll remove the entire body we don't need it over here okay and now i'll add our body a simple text in the center child is a text the text is count okay so let's create a count variable over here that is zero now i'll increase the size so that it is visible so i'll add the style parameter it takes a text style widget okay and then over there we have font size okay so i can make the font size 20. now let's format it save it and you can see we can see a zero in the center okay so now what i am basically trying to do is whenever i click on this button instead of printing fab pressed the counter should increment okay so this is exactly same as the starting project that we get when we create a flutter app okay so for that the simple process would be we can keep this print statement okay so the simple method would be we can write count plus plus now let's save this so now if i click on this button the counter should increment so let's see and you can see the print statement is executing but this count statement is not executing and that and i can say that by seeing in the counter over here it is still zero okay so now uh what happened over here was that we the incrementing operation was done but that was that is happening internally and it is not reflected on the screen okay so this is when we use set state now what happened over here was that the value of count changed internally but the interface has no response to it so to give so to get a uh so to get a expected response on the screen we can use the set state method so what i'll basically do is i'll simply use a write a set state over here so now another thing we can use is set state only when we use a stateful widget if we try using set state in a stateless widget probably it will not work and give you some errors okay so now over here what will happen that as soon as the value of count will be changed the set state method will be called and that means as i told you just now that the build method will be called and since the build method will be executed again this center will be executed again and then over here the new value of count can be seen okay so now let's try running this okay so now if i click on plus you can see the value is changing over here okay so that means we are getting the expected response okay so this is this is the place when we use set state okay now if you want you can keep this function inside set state also okay so it hardly cause changes anything but the general convention is to keep it inside set state the factors which actually change the state of the application should be kept inside the set state method okay so now let's save this again and then again it should work fine okay so you can see this was about set state it is a very important function and it will help you in a lot of places okay so the next method that we are going to discuss about uh it is not a discussion but rather an overview so the next method that we will see is the init state okay so it is similar to like onstart that we have in android if anyone is coming from android background so what it basically does is it it is generally used for initializing some controllers and parameters some global keys that we have in flutter okay so you might not be knowing what is a controller what is a global key in flutter but we will come to that later okay so to initialize such things we have a inbuilt function called init state okay and then over here it always have has a statement called a super dot init state so now this is super comes from the concept of oops a concept of inheritance so what basically is happening over here is that init state is already a method that is existing somewhere inside the flutter code okay and over here if we write super dot init state that means we are overriding that init state method in our init state method and that is the same reason we have a at the rate override over here okay so now in this init state first of all we have reference to the actual init state which is inside the flutter code that function will be executed and then after that all the initialization that we wanna do okay so over here only we deal with the shared preferences checking if a user has logged in previously like we have the remember me feature all those stuffs work within its state okay so then the next method that i am going to discuss about is the dispose method so it is similar to uh on stop method if you are coming from an android background okay so what it basically does is it it is used for closing all the existing things means uh disposing all the controllers disposing all the global keys again we will discuss about controllers and global keys later but since we are initializing them it is kind of understood that it is necessary to dispose them as well okay so for the same reason we have this dispose method over here and now the trick part is that over here we after this super statement we write all the code but in dispose we write all the code before the super statement and the reason is that when this method is called this page this my home app means like this class will stop completely okay so i hope you understood about the three methods init state dispose and set state okay and you can always refer to the documentation for a detailed explanation and better understanding thank you welcome to programming knowledge so in this video we are going to discuss about text field okay so text field is basically a widget in flutter which is used to take input from the user and by input i mean only text input okay so let's start so in the body inside our center with chat my child will be a text object sorry not a text widget but a text field okay then let's format it save it and now you can see we have our text field over here in the center okay so if i click on it then it gets selected and it is highlighted in blue color and then if i type anything it is shown in the screen okay so this is a text field now let's discuss about the properties of the text field okay so the first thing that we need to know is autocorrect so autocorrect is a named parameter that takes a boolean value that is true or false and as the name explains itself it enables auto correction in that specific text field okay so this is one the next thing is auto focus okay so uh generally means at the starting auto focus is false but we can always make it true i mean that the default value of autofocus is false so what autofocus does over here is that if we open the screen and nothing else is selected then this text field will automatically be selected that means this text field will automatically have the focus okay so over here i'll try running this and then you can see this will have the focus automatically okay so let's wait for the builder to finish and you can see it is automatically selected now if i remove this and then i try to restart this then that text field will not be selected automatically but we will have to do it manually okay so you can see as as we have commented out autofocus the text field is not selected and if we remove this comment then it will be selected so we need to do a hot restart and then you can see this text field is selected automatically okay so this was about auto focus now the next thing and we can say practically the most important thing in the text field is the controller okay so we are going to discuss about controller so by using this controller we can get the value that we give as an input in the text field we can define some preset value for the text field okay so let's see how to do those okay so to use a controller the for ideal way is to first define a controller outside and then use it in the text field okay so let's see first of all i'll declare a variable and that is called text controller okay so now the next thing is to initialize it and as we discussed in our previous video to initialize the ideal ways using init state so inside init state i will remove this comment and after the super statement i'll write text controller is equal to text editing controller okay so now if you are thinking why it is a text editing controller so if you will hover over this controller you can see it takes a controller which is of type text editing controller okay so now since we have initialized it we also need to dispose it and for disposing we will again use the inbuilt function in flutter called dispose so now in this pose as we discussed in the previous video we write the dispose statements before the super dot dispose so over here i'll write a text controller dot dispose okay so now our text controller is ready to use so i'll give that to this text field so text controller okay so now to trigger the printing function means to print the value inside this text field i'll add a floating action button so over here i'll simply used use an icon button okay and that sorry it has a icon and the for the icon i'll use the icon widget and inside that the icons enum and then i'll simply use that add icon which is the plus sign okay and then inside this i'll also write on pressed and in on pressed i'll print the value that is inside the text field okay so to print the value which is inside the text field we don't need to do much we simply write print statement and then the controller name okay text controller dot text okay so this text actually has the text which is inside the text field means the text given as an input from the user and plus i also want to point out that the underscore which we have before text controller makes it a private variable okay so i have already discussed this it was kind of a reminder and it is recommended by flutter that wherever possible we should always use a private variables we should always use private variables so now let's try running this i'll save this now if i click on plus icon this should get printed on my console so let's see and it is giving us an error and the error is because we are initializing the text controller in init state and when we hot reload it basically only executes the build method but this init method and dispose method are not executed okay so this is a common mistake that many people make and the way to fix it that instead of hot reload we can do hot restart okay so once it has restarted now if i enter something let's say my name and press on this icon button over here so you can see the output is being printed on my console so this is how we use a controller to get the text that is given by the user and use it as and what according to your requirement okay so now the another thing that we can do using controller is to set an initial value a setup preset value okay so for that what i can do is in the text controller dot text i will give the preset value so let's say the preset value is programming knowledge so this means that whenever this screen will open that my home app dot dot screen will be the end screen seen by the user then over there in the text field the initial value will always be programming knowledge and then after that the user can change it as and however he likes okay so let's restart and see this okay so once the app has restarted you can see the text field already has a value and that is programming knowledge which was set by us over here okay so this is the use of controller in a text field now moving forward the next thing that we need to know is this enabled okay so enabled basically also takes a boolean and it means that the text field is enabled or disabled for changing the values okay so by default it is always true but if we make it false then we will not be able to change the value of the text field okay so let's save this and see so now you can see it automatically got unselected and now if i try pressing this to select it or try typing anything nothing is happening because the enabled is false so now if we make it back to true or even remove this both are the same thing okay so let's save this and now if i try selecting this i am able to select and i am also able to edit so this was about enabled now the next thing is enabled interactive selection okay so this means that if the user long presses the text field then the entire text will get automatically selected and we will have an option to cut copy paste like the simple stuff that we do okay so this is by default to true but if we want we can make it false okay so let's save this and see so now over here if i press and hold so then i get an option to select all and paste so if i select all then we have the option to cut copy and paste and now if i make it false then i will not be able to do this things so let's make it false i'll restart okay so now if i press and hold nothing is popping up over here like paste and select or stuff like that so those things are prevented like this okay so now the next thing is enable suggestion okay so this is basically a keyboard thing we can't see it on the emulator because the keyboard doesn't pop over here so what it basically means is that when you are typing something then it will show you suggestions just above the keyboard like that you would be seeing in many other apps if you type some something suggested keywords maybe three suggestions or four suggestions are showed just above the keyboard so that is by default true and if you want we can make it false okay so this was one thing now the next thing is keyboard type okay so keyboard type defines what type of keyboard should be used for that text field okay so for that we have a enum that is text input type okay so now this text input type has a few values okay so let's see so the first one is date time so it will automatically pop out our date time selector then we have an email address that means requests a keyboard with ready access to add the rate and dot keys okay then we have a multi line requests the default platform keyboard but accepts new line with the enter key pressed okay so uh what this means is that by default if in the keyword keyboard you press the enter key it basically sends the message or means moves to the next text or something like that but if we have a multi line then what will happen that if we click on the enter button it will go to the next line okay so i hope you are understanding then the next one is simple number that will show us a numeric keyboard then a phone then that will also show us a numeric keyboard with ready access to asterisks and hash then text that is a simple keyboard url means it will have the ready access to backslash and dot keys values and then means it is all possible enum values then visible password means it is generally used for entering password where we have both numbers and letters on the same screen okay so you can put anything according to your choice let it be email address for now okay so this was one thing and then the last thing that i want to discuss in this video is obscure text so that means that if we it is by default always false but if we make it true then it is something like we see while entering passwords okay so if i save this then you can see our text has been obscured okay so this was about a text field now in the next video we will continue with a text field and discuss about decoration of the text field means whether it is a box what should be the hint text how to add a background color how to add a borders and stuff like that okay so this will be for this video i hope everything was clear thank you welcome to programming knowledge so in this video we are going to continue our discussion on text fields okay so in the previous video the last thing that we discussed was obsecure text which means if we write something it will show us only dots okay that means if i write the show over here then instead of showing rishabh it is simply showing us the dots okay so i'll remove this for now now the next thing uh rather important thing which we are going to discuss is decoration it means how we will decorate the text field so this decoration takes a widget called input decoration okay and then we will now discuss about the properties of input decoration okay so the first thing is content padding okay that means the padding which will be inside the text field means for the content inside the text field okay so as it is a padding it will take edge inserts so i'll write const edge inserts all and so as to mark a significant change i'll make it 30 let's format and save and now you can see we have padding 30 pixels padding on top right left and all the sides so this is how content padding works okay now the next important thing is border okay means how to specify the border so there are three options to specify border i'll use the most common one okay and that is outline input border okay so now this takes a border radius okay so for border radius we'll use the border radius dot circular named constructor and i want to give it a radius of 20 from all the four sides okay and then another compulsory thing is to give a border site okay so even if you don't want to specify any thing inside the border side we still need to write simply border side means call the constructor at least okay so this is an important step and it is rather a required step okay so now if i save this i should be able to see a border so now we can see we have the border around the text field okay and it has rounded corners okay so it is not clearly visible let's add a padding over here and the padding is of 10 pixels from all the four sides yes so now it looks better so this is the border side now similarly we also have a enabled border okay the this also takes the same value and it is when this text field is selected okay and then similarly we have error border it also takes outline input border and it is when there is an error in that text field okay so these were the three types of border means three places where we use a border now suppose i want to add some color inside this text field okay so for that we have another property called fill color okay and let's decide our color let's say color start green okay and let's say dot with opacity okay so we don't have that feature over here i'll simply give a 50. okay so now if i save this i should be able to see a greenish tint in my text field but it is not there because we mix missed something since we are giving a fill color we also need to tell the text field that it should be filled with the fill color okay so for that we have a filled parameter and it takes a bool so i'll simply give it a true okay let's save this and now you can see our text field has a greenish tint okay means this fill color has been filled inside the text field okay now i'll remove this text from here okay and now we will add a hint text means as to depict what that text field is for and also the user will have ease in identifying what that text field is used for okay so let's say hint text and the hint text takes a string yes we can see it takes a string so let's give it a string and let's say enter name i'll save this and now we can see we have a hint text enter text and if you start typing anything it vanishes okay now we can also design uh style this text over here and for that we have a hint style okay so the hand style takes our text style widget okay and then maybe i'll change the color the color is colors dot red so let's see okay so it is giving us an error somewhere let's save this again and now we can see the hint text station red so we can change the hint text we can style the hint text like this now another thing that we have is a icon means sometimes for design requirements we want an icon and a text field corresponding to it so for that we already have a icon parameter in our input decoration and it takes a widget so since it is an icon i'll use an icon widget and then i'll use one of the already present icons okay so let's say icons dot person okay now let's save this and now you can see we have a icon of the person over here okay so this is how we use icons now the next thing that i want to discuss is a label text okay so sometimes the text fields also have a label okay so simply label text it is very similar to hint text the label text takes a string and it is name okay and it also takes a style and that is a text style so label style and it takes our text style and let's give this some another color color dot let's say yellow okay the spelling is wrong over here okay so now we can see we have a label called name over here since my color colors are very contrasting we are not able to see that okay so this was the label text and label style now similar to this hint text hint style label text to label style we have a prefix text and a prefix style and a prefix icon okay so the difference between simple icon and prefix icon is that in case of prefix icon this icon will be inside the text field and then before the text field we will have a small space for the text and that is the prefix text and similar to prefix text we also have a suffix text and a suffix style okay so these are the four types of text that we can add in a text field okay so this was about input decoration format this now back in the text field there are a few methods that we should know okay so the first method is on changed okay so this will be fired whenever the value of text field is changed okay so it receives a value and then the function okay so this value is the actual value in the text field means the present value in the text field okay so to check i'll simply print the value okay so i'll save this okay so now let's enter something so you can see as i am typing here it is being printed over here because as soon as i start typing it means it is it has started changing okay so this unchanged parameter is called so if i write ratio it will print after every keystroke because after every keystroke some value is being added or removed and that counts as a change okay so this is one method that we have now similar to this we also have another method on editing complete so this method is also very similar to this unchanged method okay so this method is called when we move to the next text field or we submit the or we click on the submit button okay so this was on on editing complete now after that we have on submitted okay so on submitted also when we click on the submit button this function is called okay so these are basically related to forms okay so this on submit function and on editing complete functions are used generally when we are working with forms okay so then after that the next feature is on tap and as the name suggests it will work whenever the text field is tapped okay then after it also takes a function similar to on change okay and then the next thing that i want to talk is read only okay so this means that whether the we will be able to change the text present in the text field or not it is very much similar to enabled okay then after that we have style which takes our text style to design the text to style the text which will be given input from the user okay then after that we have text align okay so to align the text horizontally okay has a text align enum okay okay and then over here we can see we have these options center so the text will be aligned and center and so in the end justify so the text will be justified wherever it seems right then left right start and means all the values are understandable now similar to text align we also have text align vertically okay because text the line works horizontally so there is another feature called text align vertical okay so in this we align the text vertically okay then after that we have this text input action okay so this depicts what will be what will happen when we click on the next button or the done button or the tick we have in our keyboard that displays on the screen okay so this text input action has a text input action in enum okay and then continue action means it will go to the next field done action means it will call the submit function means it will automatically submit and then emergency call means these are some features it is not generally used but if you want we can you can give a read over here all the things are pretty descriptive okay so this was about a text input action and the last thing in text field would be text direction okay so that means if we start typing how the text will start flowing in okay so by default it is left that means if we type the the texts are flowing from the left if it is center then the cursor will be in center and whenever we add something it will flow flow in both the sides and the same goes for right if the text direction is right it will flow in from the right okay so i hope you are understanding all these things so these were the pretty much yet about text field i hope everything was clear thank you welcome to programming knowledge so in this video we are going to create a small project by using all the things we have learnt till now and we will also discuss about few other widgets in the go okay so the project that we are going to make is very simple we will simply have a text field that will take the input from user and then we will display the table of that input okay so the input over here is can only be a integer okay so let's start first i'll remove this entire body we don't need it then we also don't need this floating action button okay so now first we will write a container okay so this makes the most sense by starting the body with a container okay then inside container we will have a child and the child will of course be a column okay so now this column takes children let's format this and then our first child will be a text field to take the input so text field and then we will give this the same controller that we have used earlier while discussing about text field so that was text controller okay so now let's save this and we can see we have a text controller with programming knowledge written in it and that is because in the init state we have initialized the text of this controller with programming knowledge so i'll remove this or maybe i'll change it to two so that means that by default our program will show the table of two okay so let's save this and see and over here still it is programming knowledge because it is inside init state it is not executed again so we will do a full restart and it will take some time and we have 2 over here now let's add the table below that and so to add the table there are many ways the easiest way would be to use a list view okay so i'll simply write list view dot builder and then this builder takes a few things first one is item count okay and we want to display the first 10 values of the table and then it takes a item builder okay which takes a function with two values the first one is build context and i'll call it context the second one is index okay so now over here i'll simply return a list to tie okay and in the list tile in the title section we will have the value okay so in title the title takes our text widget okay and then over here we'll use string interpolation to multiply and display the values both at the same time okay so i can get the uh position by using this index so index now since index starts at 0 and we plan on showing our table from 1 we need to add 1 to the index okay and then we surround it with the brackets as in this gets executed first and then over here in this controller we have the value that is given as the input okay so what we will do is we will simply multiply it with text controller dot text okay so now this will not work because this text is in string type and to multiply we need an integer okay so to convert string to integer we have a inbuilt function in dot and we have had one video on that so that is into dot parse okay so anything any value inside this parse method gets converted to integer only if possible if it is not possible then it will give us an error okay so now let's try running this and see what is the output okay so you can see as soon as i tried to run this i got a bunch of errors and that is because over here we have tried to put a list view inside a column so column is also type of a list where we show values one after another and in list view the name justifies it shows values one after another so they both do the same thing and since they have been merged they clash so to solve this what we can do is we can give the list view a specific height so that that means that our list view will only be in a section of 200 pixels okay any value of the list that exceeds that 200 range will be scrollable okay so to give the height the one one option is to use a container okay and then other option which is also a very important option and that is called a sized box okay so i'll use a sized box so not only over here sized box is used in all the places where we just need to specify the height and the width so size box takes three parameters that is height width and child so child is already over here width is not required i'll simply give it a height of let's say 300 pixels okay so any value more than that that will be in the scrollable region okay so let's save this and then we can see we have the table of 2 over here the mathematics is correct means our this calculation is working fine and then you can see this table is only over till here okay all the rest things are scrollable that means it is not going beyond the 300 okay so this is the beauty of sized box it is used to specify height and width of almost every widget okay we can use it everywhere to specify a height and width okay so this is one possible way to solve the error the next possible way which makes more sense is to use all the extra space that is left okay means we have the text field till here then after this all this space is unused and we can use that to show the table okay so to get all the unused space we have another widget in flutter and that is called expanded okay so what it basically will do is that it will expand in all the region that is unused okay so since it expands it doesn't need a height it expanded only takes a child okay so now let's save this and you can see it took the or it took all the space that was left okay so now we can see the table is working fine now let's try to change the value and subsequently change the value of this table okay so for that we need to deal with this controller okay so now to confirm that the value has been changed means to tell the program to render the table according to the new value we will again add a floating action button okay so that will be let's say an icon button okay an icon button where the icon is inside a icon widget and the icon says icons dot done that is nothing but a tick mark and then after i can we have a on pressed method and then in this on pressed for now let's simply print the value so print text controller dot text okay so let's format this and save this okay so now once this is done i'll change the value from 2 to 3 and then press on this icon button and we get the new value over here so now this means that whenever we press on this that means we are telling the program that we have entered some new value and render the program according to it okay so now over here you can see in the list view it automatically takes the latest value present in the text controller okay so to render the new value all we need to do is call the set state once again and all the other works will be done on its own okay so let's try doing that over here whenever that tick button is pressed first of all we'll print the new value and then simply set state and then we can give it over here now let's format this and save this and now you can see since our value was three it has automatically rendered the table of three now let's change it to five press on this stick and you can see the values are updating automatically you can give any wake value and that will also work okay so and this is how we combine few things and may work okay so now if you want you can decorate this text field if we can also decorate this list tile okay so this is how we link widgets together with each other and subsequently make a complete app that is ready to be published on play stores thank you welcome to programming knowledge so in this video we are going to discuss about grid view and flutter so grid view is nothing but a scrollable 2d array of widgets so let's directly jump into the code so we don't need this text controller in its state and dispose for now we neither need this body or the floating action button okay so now let's start creating a grid view so the widget name is grid view now there are too many parameters in the grid view we will discuss only which are important and which are mostly used okay and if you want to know about all the other parameters you can of course refer to the documentation okay so the first parameter is a scroll direction it is very similar to the one we had in list view it takes a value from an axis enum okay and it defines whether the list will be scrollable in horizontal direction or in vertical direction by default its value is vertical okay then after that the next thing that we should know is reverse so this is a boolean value if we give it to true if we give the value true then the list from which the grid view is generated will be reversed and if we give it as false then the list will not be reversed by default the value of reverse is false so let's try giving it true and we will see what is the output okay now the next thing is controller okay so the the controller in grid view takes a widget of type scroll controller so let's create a scroll controller now scroll controller is stored as a state variable and it is used when the state rebuilds that means when the set state method is called then flutter internally uses this scroll controller to get the position of user in that list view in that grid view okay so suppose if we are viewing a grid view and we are at the 100th row or the column okay so then that position is stored in scroll controller and now if internally due to some background actions set state is called the build method is rerendered then instead of start instead of going back at the starting of the grid view the user will remain at that 100th column or row of the grid view okay so that is what a scroll controller is mainly used for and it comes with some parameters okay and that is initial offset value initial scroll offset so by this we can define the offset that will already be on the left side or the top side of the scrollable grid view okay that means if the grid view would start from zero point zero zero comma zero axis and if we set the initial scroll offset to 20 then if our scroll direction is vertical then it will start from 0 comma 20. if our scroll direction is axis dot horizontal then it will start from 20 comma 0. so i hope you are understanding what i am trying to say some part the part that we define over here in initial scroll offset will be left out will already be considered as scrolled okay so that is what initial scroll offset is used for and another thing is keep a scroll offset that means to tell the system to use that scroll offset defined by the programmer or the developer okay so this was about controller now the next thing which is rather a very important thing is physics so physics takes a widget of scroll physics okay so now this scroll physics is not used that much but everyone should know what this scroll physics is for what this for scroll physics is used when is this used okay so it is used to determine how a scrollable widget will behave when the user reaches the maximum scroll extent or when the user stops scrolling okay means the action the reaction to every user action is defined in this scroll physics now the normal normal reactions that we see that if we stop scrolling the list stops if we click on it it gets selected so all those are predefined and we don't need to do anything and if we want we can change those okay so the next thing that we have is padding and then as we know padding takes an edge inserts the geometry value so let's give it a padding as inserts geometry dot all edge inserts dot all i'm sorry as inserts dot all 10.0 okay so now the next thing is one of the most important thing in grid view and that is grid delegate okay so a delegate that controls the layout of the children within the grid view okay so graded delegate now there are many types of delegate the most commonly used delegate type is sliver grid delegate with free fixed access count okay so don't get confused this is a single widget name okay so let's start typing sliver grid delegate with fixed access count okay so now this means that our cross access will be fixed so now over here it takes a few things the first one is cross access count so let's say i want a column of a row of three values a row should have three values so i'll write three then after that we have a child aspect ratio so over here we define what will be the aspect ratio of every child by default it is one point zero we can change it let's say or one point zero seems fine if you want to change something you can okay so i'll remove this child aspect ratio now the next thing that we have is cross axis spacing and minux main axis spacing so this will this is used to define the spacing between each item cross axis spacing for the column wise for column wise and main axis spacing for row wise okay so i hope all these things are clear and then another important thing or the rather the necessary thing is children means what we will show inside the grid view okay so now to display something first let's create a simple list a list of type integers call this call it dummy and it has a few values it has eight values okay so now over here we will again use the map method so dummy dot map dot to list and now over here i want to return a container okay of i'm sorry container of height 100.0 with hundred point zero color should be colors dot red alignment should be alignment dot center that means the child should be in the center of this container and the child is nothing but e okay so i'm sorry e should be inside text and then i'll use a string interpolation which is better than using two string because we have more accessibility we can add more things in the string and all the stuff so let's format this save this see if we have some errors so now since we don't have any error we should be able to see all the values so now since the first thing that i would like to mention is that since we have written reverse as true then the first value one is starting in the last row so i hope you get my point it is not the last item but in the last row so this is a very clear confusion please don't get confused okay now let's try adding some spacing main axis spacing can be 20.0 so we have the spacing over there now cross axis spacing can be 20.0 again and that also so we'll get some spacing over here now uh we need to know why is this grid view at the bottom okay so let's try surrounding it with a column maybe this column brings everything to the top so that will not work okay maybe if we remove this reverse then it should go at the top because the general practice the general behavior of flutter is to start from top and yes so as you saw and i also learnt a new thing here if we use reverse then it also reverses the alignment it also reverses the position means instead of starting from top it starts from bottom instead of being the start aligned it is and aligned so these are a few things that we learned today and i hope the concept of grid view is clear thank you welcome to programming knowledge so in this video we are going to discuss about two things which are very important while we develop in flutter so the first thing is media query now what is media query and where does it comes in play so suppose you have an app okay and then that app has a container and you have given it a static height of 100 and a static width of 100 so now suppose if that app runs on 10 different mobiles then that there is a very high probability that all those 10 mobiles will have different screen size so now suppose if someone has a big mobile then the 100 height 100 width container will take a very small amount of space now suppose someone has a mobile with small screen size then that 100 hundred as height and hundred as width hundred pixels will take a very large space okay so now you understand that as the screen size changes the look and feel of your app will also change and that is not a very good ux quality that is not at all a good quality that is a disk merit in your app it should never happen okay so to avoid such kind of problems we have media query in flutter so by using media query we can get the current height and width of the mobile means the mobile on which the app is running and then we can render accordingly okay so now over here i have only one mobile so i will not i will not be able to show you some demo you can try on your own with two three different devices okay so let's start i'll remove this grid view we don't need it anymore we also don't need this list okay so now our body will simply be a container can the height of container is 200 the width of container is 200 the color of container is red let's format this save this so now we have a container like this let's bring this in center okay sorry this will be small l alignment dot center okay so we need to surround it by a center i'm sorry yes we can also remove this so now we have a container of height 200 and of width 200 in the center of the screen now on this screen means the screen of iphone 11 it looks fine okay but now if i open on some older versions of iphone like iphone 5 iphone 6 where the screen is only around 50 to 60 percent of what it is right now then this same container will take a very large amount of space in the screen so we don't want that to happen so to fix that we are gonna use media query and to use that we simply write media query dot off context dot size dot width divided by 3 okay so whatever the width is that will be divided by 3 and since we want it to be a square we will give the same to height oh sorry first was height so to get the width of the screen we write this media query dot off dot context dot size dot width okay so now let's save this okay so we still have rectangle i'll make it half okay so now over here the containers width is half of the mobile screen so now uh suppose if we open in any other mobile then also the container's width will be half of the mobile okay so that means the height and width are given dynamically so for different mobiles no matter what is the screen size the look and feel of your app will be same so this is how we get the width we can similarly get the height this will this line will return as the height of the current mobile screen so right now the height of this container is half of the height of the screen so now we use a media query very rarely these are the no means we use media query only for getting the height and width there are other uses of media query which are used very rarely and that is not that much important but if you are curious and you want to learn you can surely refer to the flutter documentation so now the next thing that i am going to talk about is navigation like we can practically make no app without navigation okay so let's create another screen so we can create a new class over here i'll simply write a stateless widget and then the name of the class but that is not suggested by flutter flutter says that in each file there should only be one state widget a class that extends state widget no matter it is a stateful or a stateless object okay so let's create another file i'll call it screen2 dot dot now over here also i'll import material that is very important and then i'll create a stateless widget and i'll call it screen2 now this has a scaffold and the body and in body inside a center widget we have a child that is a text and that says screen to okay so this is done now let's try navigating from screen 1 to screen 2 from our home app screen to the screen 2 so we need a button to trigger and the most easy way is to create a floating action button i'll simply create a floating action button okay on press to that is what we are gonna do now we need to specify the child i guess yes we have the child and the child is an icon and the icon is icons dot play that can also refer as our next okay we don't have anything called play so we can give any icon that is just for understanding purposes now uh now let's talk about navigation so to navigate there are two methods we will see both of them okay so on press means when it is pressed we want to navigate okay so to navigate we write navigator dot of context dot push so now consider navigation as a stack we push means we open another screen on top of the first screen then we have pop and push okay pop then we have pop and push okay so that means that the current screen will be popped and a new screen will be pushed so that is used when we don't want to navigate back to the previous screen okay and then we have this pop so that to close the screen and go to its parent screen means from where it was redirected okay so these are three methods that we need to know all the rest are not that necessary so the first one is push so now inside push we write the route name the class name where we want to push okay so for that we again have a material page route object okay which takes a builder now since it is a builder it will always take a function which has a build context so this is almost a generalized thing in flutter wherever we see a builder it will take a function that has a build context might be there are some more added values but build context is always there okay so context now i'll not simply call this context as it is not a good practice we write it build context and then over here we write the class name so our class name is screen2 so over here we will simply write screen 2 ok so now this is done now if we click on the a floating action button we should be redirected to screen two okay so if i click on this i am being redirected to screen two now since i said it is it acts like a stack and over here we have push that means this screen is on top of its parent screen that is the screen from which it has originated which is nothing other than maya so now over here if we come back we can return to the screen from where it started okay so this is one thing now suppose i don't want a return then i'll simply write pop and push okay now over here we have pop and push name so we'll also see what this named means okay now on screen two let's create another floating action button i'll okay a floating action button that takes a child the child is again an icon and inside i can we will use the icons enum and this time let's use some other icon any icon will work and then over here on pressed we can simply write navigator dot off dot pop okay so pop is used to return to the screen from where it has originated so this is all right i don't know what's the error over here okay there is some error okay this is not required no over here we have push i'm sorry for the glitch so now let's save this restart it so now over here if i click on this i am taken to the next screen and again if i click on the button i am taken back to the screen from where i started that is means we are popping that screen out okay and sorry for the icons they are not at all relatable okay so this is one method of navigation let's see another method of navigation and that is called named navigation okay so for that over here in our material app we need to specify the routes the named routes okay so for that it has a routes parameter that takes a map then the first one is the route name the key value is the route name i'll call it to okay and then it again takes a build context and then it will simply call screen 2. so now over here it is like this so now instead of writing so much so many things we'll simply write a navigator dot off context dot push named so now push named and simply will write the route name which is nothing other than screen two okay so i think there is some error okay it will want to be like this yes let's save this let's restart and now if i click on this it goes to the next screen and if i click on this then it pops back to the previous screen so the flow is still the same everything is working fine and this is the best way to navigate from one screen to another i personally prefer this way means creating a route giving it a name and then calling that name from all the places where i want to navigate and the more better version that i use is i don't write it over here okay i'll i write the route name for that screen inside that screen okay so over here i'll create a static constant route name okay and then over here i'm sorry and then over here i'll simply paste this okay so now by doing this i can avoid the chances of making a spelling mistake plus my another classes will not know what is my route name okay so it is kind of protecting your data as well so now over here i'll write screen to dot route name since it is a static variable we can access it from throughout anywhere in our project so i'll save this and over here instead of calling screen to i'll simply call screen to dot route name so now let's save this see if everything works fine or not and then if i click on this i am taken to the next screen and then again if i click on this i am popped back to the previous screen okay so now this is how we use push name now if i write pop and push named okay so that means my initial screen will be popped and then that screen will be pushed so ultimately i will not be able to come back okay so now to check if that is working or not so if that is working fine we should get an error that we can't pop because there is no screen okay so i'll call this and then if i press back then it shows a black screen that means it is not showing the home screen but it has blacked out that means the parent widget has already been popped out okay so i hope you are understanding the concept of push and pop and push name all those things i'll change it back to push named now this is this was about basic navigation between screens okay now the next thing and a very important thing is how to pass data from one screen to another okay so passing data from one screen to another is also pretty simple with uh push push named pop and push named every all these types of navigation methods take a named parameter called arguments so now over here arguments can be anything you can send a list you can send a map you can send a object of some custom class you can send anything so this argument parameter is very flexible and that is the beauty of flutter it provides you more accessibility so right now i'll simply pass a string that says navigation is working okay so now in my screen 2 i am sending this argument so let's see how to retrieve the data in screen 2. okay so inside our build method please note i am writing this inside my build method i will create a variable arguments that will be my received arguments now over here we write model root so these are some keywords that has a specific meaning which will not be required in general development flow but if you develop something very much related to native and something related to plugins means you are generating a plugin then we will then you will might have uh to look closely to this modal route but if you are generating simple hybrid mobile apps then this is not required then knowing the deep knowledge about model root is not required we can simply keep this in mind that modal route contains all the data that are transferred from one screen to another now the arguments are not the only thing there are many other things which are transfer internally from one screen to another okay but we will but we will be able to access only the arguments okay so let's see how we access that model route dot of context dot settings dot arguments okay so now by this i got the argument which i sent here navigation is working in screen 2. so now over here instead of displaying screen 2 i will display that argument let's save this restart now over here you can see navigation is working okay because this doesn't have any predefined value that means the value returned in that argument is being received properly and that is being displayed we can now as i told you it is very flexible we can pass anything so let's pass a map that says nothing is working nothing is working five times let's save this now let's see what is the output it should so show something like it is a list or something like that because it will not print the value that is directly inside that okay so it is giving us an error because over here the text takes a string type and that is a list of a string so let's change the value to argument 0 that will return a screen that will return a string now over here arguments is a variable it doesn't know the flutter doesn't know that it is a list so the first method would be to change this to a list okay now another method is writing as a list so this ascii word is used for defining the type now to make it more specific i'll write string over here okay so now the error is gone let's resave that this and now if i click on this the first value of the list is displayed now let's change the first value let's save this now we can come back now if i click on this we can see test to programming knowledge okay so you understood what is navigation and how we pass data through navigation and what are the different types of navigation and we also discussed about media query the most important use of media query that is dynamic rendering of widgets okay and i hope everything was clear thank you programming knowledge so in this video we are going to see how to send an http request and then parse the response and update the ui accordingly so first let's remove all the extra code that we have over here we don't need the floating action button okay we don't need a body for now we'll create a new body and we don't need this screen too so i'll delete the screen too and then i need to remove it from my home app if i have it yes so i need to remove it from here i also need to remove it from here okay i need to remove the import from here also okay so let's save everything do a restart and yes so we have our empty screen so now to send an http request if you don't know what is an http request you can follow this link and read about it they have very excellent documentation now to send an http request from a flutter app we need a third party package and the most popular package is http you can see over here it has one four zero four likes one one zero pop points and hundred percent popularity means this is most preferred by flutter developers another alternative can be do okay so do also has 99 percent popularity it is made by some flutter china dot club okay so let's install flutter we will go in this installing section and then inside our dependencies we simply need to add this so we find our dependencies in pubspec.yaml over here below below this toast or below that cupertino icons we can paste anywhere save and then since i am using vs code it will automatically start flutter pubget okay so that means it is importing this dependency to our project so that will take a minute now after that let's see which api we are going to call from our app okay so i'll be using this kanye dot rest api it is a free rest api for random kanye west quotes okay so since it is free it is accessible to everyone and everyone can try the same so now over here you can see it says get and get is nothing but a type of an http request okay so what get basically does it fetches data from this server means the link followed by the get request okay so i'll for now copy this link okay and if i paste it in my browser then that is also ultimately a get request only so let's see what is the response of this get request so over here uh doing this get request we get a quote i am the best and now if i refresh this it should change people always tell and then there are stuff okay so let's try implementing this in our app so we now have the http a package in our app so let's try calling this first we need to import http import http okay so it is not showing over here that means it has not installed correctly i need to run pub get again so i will do that we have a icon over here in vs code okay so once that is done now over here if i if i type import then http so we can see http slash http dot dot now i am not simply gonna call all the methods i'll use our namespace that means uh reference to this package as http means everything inside this package will be used under this namespace okay so you'll understand what i'm trying to say when i implement this okay so now let's try calling this rest api so for that in our class i'll simply create a future i have a video on what is a future and what is its use in flutter now since over here we are interacting with the internet we don't know how much time it will take so that is so that is the reason we can't immediately send the response we need to wait for the interaction with the internet to finish and then we will send a response and for the same i am using a future okay a future and that future should return a string that string will be nothing but this followed by code okay and then i'll call them name the method and get kanye okay simple name now it needs to be a sync since we are dealing with future okay now a good practice is that whenever you interact with futures we need to surround whenever sorry whenever we interact with the internet uh we need to surround it with a try and catch so that when there is error it will not simply show a red screen on your mobile app but to give some customized message which improves the user experience so i'll simply surround it with a try catch and then over here you can print t if you are making a real app most probably you will want to show a toast so that is done now lets finally call this request so i'll copy this url that i have over here now to call a get request means after every request we get a response okay so to store a response i'll create a response variable okay and then now let's call the get request this request let's call this get request okay so for that i'll simply write http which is the name space we used over here dot get so this dot gets refers to this get means over here in the documentation it says that we need to use a get request and that is why i am using a get request over here now the url we copied right now https api dot kanye dot rest okay so now we are getting a response okay so now if i hover over this get you can see it sends a future of response okay so that means as i said it will take a indefinite amount of time to interact with the internet we can't assume the time so that is why it is a future and we need to wait until we get some response and as we have discussed in our dot tutorial to wait for the response we use the await keyword and since we are using await here we need to have a async keyword over here okay so now once this command is executed that means this command will take some time since we are using await that means the comma that means the controller which runs the code will not proceed until this statement is completely executed so once this is done then that means that this response has the response means this response which we will get from this api okay so this response variable will now have this response so before updating the ui let's try simply printing it to check that everything is working fine now uh if you would be knowing about rest apis you would know that response doesn't only have this thing this is the body but it also has different things like the headers and other stuffs okay so this part where we have the actual response from the api that is the body okay so now let's get the body so instead of getting let's simply print the body to see if we have something or not so response dot body now i hope everything is clear okay so let's save this now inside the build method i'll simply call get kanye i'll restart and you can see it took a second or two and then after that we have the response code you took you can't look at a glass half full or empty if it's overflowing okay now if i save it again means that means i will do a refresh since on the refresh the build method is run i is executed again so this get kanye method will be called again and we get a response okay so now since we have a response let's try updating our ui okay so over here this future needs to return a string so you know over here my requirement is only this string but right now the body is printing this entire string okay so the body is in string format but if you look closely or you look in the browser it is actually a map a map which has a key and the value the value which we are interested in so to convert a string back to a map we need to use a dot package and so for that we will import that dart package and that is called convert so this convert package allows you to convert a string to any other object or object to a string okay so let's see how that happens i'll simply write where result is equal to json now this json is inside this dot dot convert json dot decode okay so now string is the encoded thing if we convert a map to a string then the string is considered as an encoded as the encoded output of that adjacent variable json value okay so since we have the string we need to decode we need to go back and over here i'll write response dot body and then instead of printing this i'll print result and then the key that we have over here that is quote so simply paste it over here format it and do a restart okay so now you see we only get the code part means instead of getting this entire thing as a string we have decoded it to a map and then we are printing the value for this key okay and now we want to return the same thing so i'll simply change this to return and now this get kanye will return something so let's wait for that to return so then that means this method is called and when it finally returns then we go to this net then method so now the string sent over here is stored in this value okay so let's create another variable string code and then over here i'll save the value to quote okay we don't need a semicolon over here so now once this get kanye returns something it is stored in this code thing so now let's simply print the code thing so over here i'll write body the body is in center and the center has a child which is our text widget and the text displays nothing but the quote so now let's do a hot restart and see what happens and you can see it gives us an error and that is because as i said interacting with internet takes time but the execution doesn't stop over here and it keeps on running it keeps executing so one solution would be to add an await over here okay and the other solution is because i am not adding a weight over here because that is not a standard practice in if you do a real world project most probably all your con all your interactions with the internet will be in a separate file so what i'll do is over here i'll add a conditional statement so if this quote is null so in that time i want you to show a circular progress indicator and once this quote is not null then the code should be printed so now what happens is that for the first time it will be null and then the circular progress indicator will keep on working now even after we get the value this will not update and to update the screen as we have discussed earlier we need to call the set state method so over here i'll write set state and then inside this the value means okay so everything is fine let's restart let's do a full restart okay so i think my internet speed is very fast that's why we are not able to see the progress indicator thing okay no no yes so the progress indicator is at the top so instead of conditional rendering over here i'll do it inside the center widget so now let's see so you can see the circular progress indicator and as soon as we get the value the value gets updated okay and now you can see it is it will keep on updating it is not stopping and that is because we have a error in our program okay so the reason that it keeps on updating it is not stopping is that we are calling set state inside the build method so this is a very common mistake that people do that is calling set state method inside the build method so what the set state does is it rerenders the build method so if the set state is called it will uh rerender the build method and now while rendering it will again encounter set state so it will again start rerendering so this will go to an infinite loop okay so the way to fix this is to use an if else okay so i'll write bool code controller is equal to false so now this method should run only if the code controller is false okay otherwise this shouldn't run and now let's update the value of code controller to true okay so this means that the first time when the value of code controller is false uh this method will run and as soon as this runs this if condition runs the code controllers value is true so even after even though the set state is called and the build method starts rendering this if condition will become false and all this code will not get executed it will simply render this return statement okay so i hope everything is clear let's do a full restart and you can see it updated only once okay so yes now after this this will not update and it is not updating so i hope you understood what i did over here and you understood how to call a http request how to parse the response over here and then update the ui accordingly update the ui always has set state in it so i hope all the concepts are clear now this is one kanye dot rest which you can try another one which i also use which is also free is chuck norris so over here also you can call this request and you will get you will not only get a quote you will get multiple things you will get an url for the image okay you will get an id which you if you have any idea about databases will understand that every value has a id url which will be url for this code and then a value which is the actual code so you can also try this if you want to okay so i hope everything was clear thank you welcome to programming knowledge so in this video we are going to discuss about bottom sheets in flutter so basically there are two types of bottom sheets in flutter the first one is persistent bottom sheet and the second one is modal bottom sheet the difference between these two types of sheets are that in persistent bottom sheet the sheet remains on the screen even though we are not interacting with it whereas in modal bottom sheet the sheet will hide if we are not interacting with it so let's start coding so first i'll remove all this code that we that we wrote while we were discussing about http requests we don't need this anymore i'll also remove the new stim ports now once this is done in the center widget i'll add a raised button and the child will be text that says show bottom sheet and then it will have an on pressed and that will show the bottom sheet so first let's start with modal bottom sheet to display a modal bottom sheet we simply write show model bottom sheet now it takes two parameters that are necessary and the other ones are not necessary the first one is context and the context we have right over here this is the context so i'll simply write context and the next one is builder so it takes a function which has a parameter of build context and now over here we return the widget that will be displayed as our bottom sheet so i'll simply return a container of height 400 and the color to be red so now let's format this save this and now we have a button in center and if i click on this i am able to see the modal bottom sheet so now as i said the sheet will hide if we don't interact with it so this is the bottom sheet let's not interact with this but interact with the remaining part so as soon as i click over here the bottom sheet hides so you understood what i was trying to say that the bottom sheet hides when we are not interacting with it and if that happens then that sheet is a modal bottom sheet okay now the next type of sheet is the persistent bottom sheet so for that we simply write show bottom sheet now format this save this now if i click on this okay so it is giving me an error so let's try another method to show a bottom sheet and the method is by using a global key so i'll write vr scaffold key and that will be a global that will be a global key okay and the global key will be of type scaffold state okay and then i'll add this key to our scaffold so the key over here is scaffold key so now what this basically does is that right now this is our scaffold scaffold is the area in which the contents are displaced or displayed like the app bar body the widgets inside the app bar widgets inside the body all those are displayed on the scaffold scaffold is like a canvas we can say it to be a canvas so by adding a key to the scaffold now we can access the state the context of this scaffold anywhere else by simply using this key okay and that is what we are gonna do over here to show the bottom sheet okay so i'll simply comment this now to show a bottom sheet first we write the global key name that is in our case scaffold key then we take the current state okay so now over here you can see we with the scaffold key we can get three things first one is the context that is the current context the current state and the current widget that is being displayed so over here we need the current state and then on that we call show bottom sheet so now over here i'll return the same container let's see now i'll remove i'll remove the comment from here and then give a semicolon so now let's see now if i save and then if i click on this i am able to see my bottom sheet so this bottom sheet is a persistent bottom sheet okay and by that if i don't interact with this part of the sheet even then this will not disappear so if i click anywhere over here the sheet still remains if you want to close it programmatically we can do it by writing navigator dot of context dot pop and over here in app we can simply slide it down like this so these are the two types of sheet that we have in flutter that is the persistent bottom sheet and the modal bottom sheet so i hope the concept was clear thank you you
