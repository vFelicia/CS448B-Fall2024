With timestamps:

00:00 - [Music]
00:01 - hello guys welcome once again in this
00:02 - video I'm going to teach you what is a
00:05 - virtual member function and what is a
00:09 - pure virtual member function but before
00:12 - uh showing you how uh this virtual
00:15 - member function and how to declare this
00:17 - virtual member function I must recommend
00:20 - you that you must know the basic concept
00:23 - of polymorphism in order to understand
00:26 - this virtual function because uh this
00:31 - virtual member functions are generally
00:33 - used whenever you are are using
00:36 - polymorphism so I have uh shown you how
00:39 - to use polymorphism in the last video if
00:41 - you don't know what is polymorphism I
00:44 - have shown that in the last video so
00:46 - please watch that and I'm going to take
00:49 - the same example from the last video in
00:51 - order to demonstrate this of virtual
00:55 - member
00:56 - function so in the last video I have
00:58 - defined uh Base Class which was which I
01:02 - call it as a shape class and what my
01:06 - purpose was is I wanted to calculate the
01:10 - area of different shapes so I have this
01:14 - Base Class called shape and this was uh
01:18 - this uh shape class which is my Base
01:23 - Class have these member variable height
01:25 - and width and have these uh this uh
01:30 - member function called set values and
01:33 - what this is doing this is just do doing
01:36 - this this is just setting the values of
01:39 - width and height here right and I also
01:43 - defined a derived class which I call
01:46 - rectangle and which is inheriting from
01:48 - this shape class and this has only one
01:52 - function called area and this what this
01:56 - was doing this was just calculating the
01:59 - area of rectangle by multiplication of
02:02 - height and width and if you know when
02:05 - you are inheriting from a class it's
02:07 - member functions are available in the
02:09 - derived class if they are private or or
02:13 - if they are public or protected members
02:16 - right in a similar way I have defined
02:18 - this triangle class to calculate the
02:20 - area of triangle and I was inheriting
02:23 - from my shape class and this triangle
02:26 - class also had a function member
02:29 - function
02:30 - called area and I was calculating the
02:33 - area by multiplication of height and
02:35 - width divided by two and the let's see
02:39 - how virtual function work so first of
02:42 - all what is a virtual member function a
02:45 - virtual member function is a member
02:48 - function that can be redefined in the
02:51 - derived class okay so let's see how we
02:56 - can define a virtual member function
03:00 - uh one more important thing is you can
03:03 - define a virtual function or virtual
03:06 - member in your base class only okay so
03:10 - my shape class is the base class so I
03:12 - can Define the virtual member function
03:15 - here so how you can Define you just need
03:17 - to use the
03:19 - keyword virtual and then the normal
03:23 - definition of a member function for
03:26 - example I want to call my function as a
03:29 - area so I will just Define the function
03:34 - called area which takes no argument and
03:38 - it
03:42 - returns returns zero for example okay so
03:46 - this is how you can declare a virtual
03:49 - function and what is the use of defining
03:53 - this virtual function so if you define
03:57 - your member function as a virtual
03:59 - function in your your base class you can
04:01 - provide the redefinition of this
04:04 - function in your derived classes so I
04:08 - have this uh virtual function called
04:10 - area I can provide the redefinition of
04:13 - this uh virtual function in my rectangle
04:17 - class by the name same name
04:20 - area like this and I can even Define the
04:25 - same or redefinition of this function in
04:29 - my triangle class by redefinition I mean
04:34 - the name of the function is same or the
04:36 - Prototype of the function is same but
04:39 - the
04:40 - implementation is different for
04:43 - different classes or the implementation
04:45 - is depending upon the class in which
04:48 - it's defined okay so the Prototype is
04:51 - same which is int
04:53 - area and the definition is different in
04:57 - the case of rectangle I was calculating
04:59 - just just height into width and in the
05:02 - case of triangle I'm calculating the
05:04 - triangle area by height into width
05:06 - divided by two so the basic use of
05:09 - virtual function in the base class is
05:13 - just to tell C+ plus that we have
05:17 - defined this function as a virtual
05:19 - function because we want to redefine
05:22 - this function in my derived class and I
05:26 - want to
05:27 - read redefine the definition of this um
05:31 - virtual function in my derived class
05:34 - according to the requirement of the
05:36 - derived
05:38 - classes and this virtual member function
05:41 - you can use as normal virtual function
05:45 - whenever you want to use it in the main
05:47 - class so for example I declare a uh
05:51 - instance of this poly uh by the way this
05:55 - uh code I have written in the last video
05:57 - right if you remember remember uh and I
06:01 - have defined the instances of my derived
06:04 - classes rectangle and triangle like this
06:07 - rack and try and this I have also
06:10 - defined the uh instance of my base class
06:15 - which I call it poly
06:18 - right and according to the polymorphism
06:22 - concept I can point to this uh derived
06:26 - class using my Base Class like this
06:29 - so I can define a pointer which uh has
06:32 - the reference of my derived class object
06:36 - okay in a similar way I have done uh the
06:40 - definition of this
06:43 - triangle derived class also and in a
06:46 - similar way I can point to my Base Class
06:49 - also so this is the instance of uh Base
06:54 - Class which is pointing to the base
06:56 - class itself and I can set these values
06:59 - set values which I have defined in my
07:02 - Base Class you can see which set the
07:06 - value of width and height
07:07 - here and then I can calculate the area
07:10 - of uh the
07:13 - specific uh
07:15 - member or specific class for the
07:18 - specific class so rectangle gives the
07:20 - area of rectangle triangle gives the
07:22 - area of triangle and po poly gives the
07:24 - area of polygon which I have defined and
07:27 - I can compile it and I can run it it
07:30 - gives the area like this so the area of
07:35 - um rectangle is 200 which is 10 into 20
07:40 - rectangle uh area of triangle is 100
07:42 - which is 10 into 20 / 2 and area of poly
07:47 - is zero because we have
07:49 - defined virtual member function which
07:51 - was returning zero here right now this
07:56 - is about virtual member function
07:59 - now what is a pure virtual
08:03 - member so a pure virtual member uh is a
08:08 - member which have no
08:12 - definition so right now I have defined a
08:15 - a virtual member function like this uh
08:18 - and this is returning zero here that
08:21 - means I've provided some uh definition
08:23 - to my function but if you want to uh
08:26 - tell that this is a pure virtual
08:28 - function you don't even provide any
08:31 - definition here and how you can say that
08:35 - this is a pure virtual function you just
08:37 - need to assign zero to this function and
08:41 - then this uh tells this type of
08:44 - Declaration tells C++ that this is a
08:47 - pure virtual member
08:50 - function and what is the speciality of
08:52 - this pure virtual member function uh the
08:56 - speciality is you don't even have to
08:59 - give give the definition to this pure
09:01 - virtual member function in your base
09:03 - class you can redefine this
09:06 - um uh virtual member function in your
09:10 - derived classes like this okay so this
09:13 - is a short way of uh telling uh C++ that
09:18 - you have this function in the base class
09:20 - which you want to redefine in your
09:22 - derived classes according to the
09:25 - requirement of the derived classes so
09:27 - you can do it like this this is how you
09:30 - can define a pure virtual member
09:33 - functions okay now suppose for example I
09:37 - don't give the definition here uh of
09:42 - this pure virtual member function okay
09:46 - and I don't calculate the area of this
09:50 - rectangle also for example
09:54 - and what I'm going to do is I'm going to
09:57 - compile my program so I compile it and
10:01 - it gives me the
10:03 - error okay and why it's giving me the
10:06 - error because it says cannot declare
10:09 - variable poly to be the abstract type
10:15 - shape so this error is coming
10:20 - because I haven't Define or I I haven't
10:25 - given the definition of member function
10:29 - or pure virtual function area in my
10:31 - rectangle class so this is the
10:34 - Restriction of pure virtual function if
10:37 - you define a pure virtual function in
10:40 - your base
10:42 - class you need to
10:45 - redefine the definition of this uh
10:49 - member function in your derived class
10:52 - otherwise it will give the error okay so
10:56 - I haven't uh redefined this area member
10:59 - function in my rectangle class which is
11:01 - deriving from the my shape class so this
11:04 - is throwing an error or this will give
11:07 - the compilation error right so I have to
11:11 - give the definition of uh this member
11:15 - function virtual member function area in
11:18 - my derived class otherwise it will throw
11:21 - an error so once again I will define the
11:26 - definition here and once again I compile
11:29 - it and it will run fine I
11:32 - think let me
11:37 - see and once
11:39 - again it's cannot declare variable poly
11:43 - because it's abstract type let's
11:47 - see yeah so once you have
11:53 - this you you know once you define your
11:57 - function as a vir pure virtual member
11:59 - function it makes your class as an
12:03 - abstract class and what is the abstract
12:07 - class abstract class is a normal class
12:11 - but the speciality of the abstract class
12:14 - is it's just the definition of the class
12:17 - so abst class are something very similar
12:20 - to uh our shape class and Abstract
12:26 - classes are just the definition of the
12:30 - member function and no implementation is
12:33 - given here okay so we haven't given any
12:37 - implementation of uh the area function
12:40 - so we cannot Define this object here
12:44 - this is
12:47 - true and once again compile it yeah yeah
12:52 - I need to remove this
12:54 - also and this will not give me an error
12:58 - okay okay so always remember that if you
13:02 - define your member function as a pure me
13:05 - pure virtual function this makes your
13:09 - class base class as an abstract class
13:12 - and abstract class is a
13:15 - class which have only the definition
13:19 - okay so not the definition but the
13:22 - prototyping definition you provide in uh
13:24 - the derived classes okay so notice that
13:29 - uh our
13:31 - area here has no definition
13:36 - okay okay so I hope you have understood
13:39 - the concept of pure virtual function and
13:42 - virtual member function and I hope you
13:44 - have enjoyed this video please RIT
13:46 - comment and subscribe and bye for now

Cleaned transcript:

hello guys welcome once again in this video I'm going to teach you what is a virtual member function and what is a pure virtual member function but before uh showing you how uh this virtual member function and how to declare this virtual member function I must recommend you that you must know the basic concept of polymorphism in order to understand this virtual function because uh this virtual member functions are generally used whenever you are are using polymorphism so I have uh shown you how to use polymorphism in the last video if you don't know what is polymorphism I have shown that in the last video so please watch that and I'm going to take the same example from the last video in order to demonstrate this of virtual member function so in the last video I have defined uh Base Class which was which I call it as a shape class and what my purpose was is I wanted to calculate the area of different shapes so I have this Base Class called shape and this was uh this uh shape class which is my Base Class have these member variable height and width and have these uh this uh member function called set values and what this is doing this is just do doing this this is just setting the values of width and height here right and I also defined a derived class which I call rectangle and which is inheriting from this shape class and this has only one function called area and this what this was doing this was just calculating the area of rectangle by multiplication of height and width and if you know when you are inheriting from a class it's member functions are available in the derived class if they are private or or if they are public or protected members right in a similar way I have defined this triangle class to calculate the area of triangle and I was inheriting from my shape class and this triangle class also had a function member function called area and I was calculating the area by multiplication of height and width divided by two and the let's see how virtual function work so first of all what is a virtual member function a virtual member function is a member function that can be redefined in the derived class okay so let's see how we can define a virtual member function uh one more important thing is you can define a virtual function or virtual member in your base class only okay so my shape class is the base class so I can Define the virtual member function here so how you can Define you just need to use the keyword virtual and then the normal definition of a member function for example I want to call my function as a area so I will just Define the function called area which takes no argument and it returns returns zero for example okay so this is how you can declare a virtual function and what is the use of defining this virtual function so if you define your member function as a virtual function in your your base class you can provide the redefinition of this function in your derived classes so I have this uh virtual function called area I can provide the redefinition of this uh virtual function in my rectangle class by the name same name area like this and I can even Define the same or redefinition of this function in my triangle class by redefinition I mean the name of the function is same or the Prototype of the function is same but the implementation is different for different classes or the implementation is depending upon the class in which it's defined okay so the Prototype is same which is int area and the definition is different in the case of rectangle I was calculating just just height into width and in the case of triangle I'm calculating the triangle area by height into width divided by two so the basic use of virtual function in the base class is just to tell C+ plus that we have defined this function as a virtual function because we want to redefine this function in my derived class and I want to read redefine the definition of this um virtual function in my derived class according to the requirement of the derived classes and this virtual member function you can use as normal virtual function whenever you want to use it in the main class so for example I declare a uh instance of this poly uh by the way this uh code I have written in the last video right if you remember remember uh and I have defined the instances of my derived classes rectangle and triangle like this rack and try and this I have also defined the uh instance of my base class which I call it poly right and according to the polymorphism concept I can point to this uh derived class using my Base Class like this so I can define a pointer which uh has the reference of my derived class object okay in a similar way I have done uh the definition of this triangle derived class also and in a similar way I can point to my Base Class also so this is the instance of uh Base Class which is pointing to the base class itself and I can set these values set values which I have defined in my Base Class you can see which set the value of width and height here and then I can calculate the area of uh the specific uh member or specific class for the specific class so rectangle gives the area of rectangle triangle gives the area of triangle and po poly gives the area of polygon which I have defined and I can compile it and I can run it it gives the area like this so the area of um rectangle is 200 which is 10 into 20 rectangle uh area of triangle is 100 which is 10 into 20 / 2 and area of poly is zero because we have defined virtual member function which was returning zero here right now this is about virtual member function now what is a pure virtual member so a pure virtual member uh is a member which have no definition so right now I have defined a a virtual member function like this uh and this is returning zero here that means I've provided some uh definition to my function but if you want to uh tell that this is a pure virtual function you don't even provide any definition here and how you can say that this is a pure virtual function you just need to assign zero to this function and then this uh tells this type of Declaration tells C++ that this is a pure virtual member function and what is the speciality of this pure virtual member function uh the speciality is you don't even have to give give the definition to this pure virtual member function in your base class you can redefine this um uh virtual member function in your derived classes like this okay so this is a short way of uh telling uh C++ that you have this function in the base class which you want to redefine in your derived classes according to the requirement of the derived classes so you can do it like this this is how you can define a pure virtual member functions okay now suppose for example I don't give the definition here uh of this pure virtual member function okay and I don't calculate the area of this rectangle also for example and what I'm going to do is I'm going to compile my program so I compile it and it gives me the error okay and why it's giving me the error because it says cannot declare variable poly to be the abstract type shape so this error is coming because I haven't Define or I I haven't given the definition of member function or pure virtual function area in my rectangle class so this is the Restriction of pure virtual function if you define a pure virtual function in your base class you need to redefine the definition of this uh member function in your derived class otherwise it will give the error okay so I haven't uh redefined this area member function in my rectangle class which is deriving from the my shape class so this is throwing an error or this will give the compilation error right so I have to give the definition of uh this member function virtual member function area in my derived class otherwise it will throw an error so once again I will define the definition here and once again I compile it and it will run fine I think let me see and once again it's cannot declare variable poly because it's abstract type let's see yeah so once you have this you you know once you define your function as a vir pure virtual member function it makes your class as an abstract class and what is the abstract class abstract class is a normal class but the speciality of the abstract class is it's just the definition of the class so abst class are something very similar to uh our shape class and Abstract classes are just the definition of the member function and no implementation is given here okay so we haven't given any implementation of uh the area function so we cannot Define this object here this is true and once again compile it yeah yeah I need to remove this also and this will not give me an error okay okay so always remember that if you define your member function as a pure me pure virtual function this makes your class base class as an abstract class and abstract class is a class which have only the definition okay so not the definition but the prototyping definition you provide in uh the derived classes okay so notice that uh our area here has no definition okay okay so I hope you have understood the concept of pure virtual function and virtual member function and I hope you have enjoyed this video please RIT comment and subscribe and bye for now
