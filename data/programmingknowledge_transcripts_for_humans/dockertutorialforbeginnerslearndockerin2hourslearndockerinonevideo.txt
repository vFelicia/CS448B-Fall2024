With timestamps:

00:00 - hello guys and welcome back to the
00:01 - channel this is ayush and from today we
00:04 - are going to start out the docker
00:05 - tutorial Series so this is the our first
00:08 - video in which we basically talk about
00:10 - the introduction to Docker okay
00:12 - so without resting tablet start the
00:15 - video actually so
00:17 - for this tutorial uh we are just going
00:21 - to learn about some Theory concept
00:23 - because if you will learn theory then
00:25 - and only then you can Implement that
00:28 - practically Okay so
00:31 - there is also important to learn about
00:33 - the docker and all this okay so you
00:35 - should learn the first concept what
00:37 - Docker is
00:38 - so here you can see I mentioned some
00:40 - points for you guys like the basic
00:43 - definition which everyone knows and
00:45 - maybe everyone is aware of it like
00:48 - Docker is an app platform for developing
00:50 - shipping and running application what
00:53 - does this line or what does this
00:56 - definition actually mean so it's a very
00:58 - simple uh you will just think Docker as
01:02 - just uh one kind of platform
01:05 - or it is a platform which if which we
01:08 - use or which software developers use to
01:10 - develop the application to ship that
01:13 - application to some other place and then
01:15 - there run that application so it simply
01:19 - means the
01:21 - you will develop one project in the one
01:23 - involvement and then you will just uh
01:27 - send that project or that environment to
01:30 - the other person or to the other
01:32 - computer and then there that project
01:34 - will run okay
01:36 - so if you find this definition little
01:38 - bit difficult or not understandable so
01:41 - you can also see the second Point like
01:44 - Docker is a platform which packages an
01:46 - application all its dependencies
01:48 - together in the form of container so it
01:51 - this line is just similar to the adverb
01:53 - it simply means the whatever we will
01:56 - create an application so in which what
01:58 - will happen all the dependencies and all
02:01 - the whatever the required software
02:03 - whatever the required libraries are
02:04 - there they all will be packed in one
02:07 - single container and that can container
02:09 - will be shipped or will be sent to the
02:13 - other person okay
02:15 - we will see some of the things like how
02:19 - everything goes on and how the actually
02:22 - the docker works so we are we will going
02:24 - to learn with that example okay
02:27 - and next point if you will see like
02:29 - developers can create a container image
02:32 - that includes all necessary components
02:34 - of the applications as a core runtime
02:36 - Library so just just it's same as the
02:39 - above line okay
02:40 - so you can read and here also the this
02:43 - one is important the point like this
02:45 - image can then be distributed to other
02:46 - developers test or deployed on different
02:48 - server or Cloud platform okay
02:51 - so the basic uh Theory or basic concept
02:55 - about dog I just like there is one line
02:58 - in the software industry like this code
03:01 - is working on my machine but it's not
03:03 - working on your machine okay so it's
03:06 - basically uh just like
03:10 - to solve this problem Docker came okay
03:14 - so let's start with example so here I
03:17 - have just you can see the heading like
03:20 - what problem Docker solves
03:22 - so to understand this one I will just
03:25 - create one
03:29 - example for you guys okay so that you
03:32 - can understand it easily let me just do
03:35 - it
03:37 - okay fine perfect
03:40 - so here you will support this one is one
03:43 - computer okay
03:45 - I just write here uh
03:50 - computer
03:52 - one okay
03:55 - and suppose you are building uh or you
03:59 - are creating some python based project
04:02 - okay so you are creating
04:05 - project in with name one project one
04:10 - and the tool which you are using are the
04:14 - software which you're using is just
04:16 - python okay suppose here the version of
04:19 - python is 2.7
04:22 - okay
04:23 - and the scenario is like that uh this
04:27 - project is created by your friend
04:28 - suppose this project is created by your
04:31 - friend and your friend sends you this
04:33 - project okay so now in your PC
04:37 - so this one is computer two
04:43 - okay
04:44 - so in computer 2 what you do
04:48 - you again just simply copy this project
04:52 - so the name will be same project
04:56 - 1 and suppose here you are using another
04:59 - version of python that is python
05:03 - 3.7 just suppose it
05:06 - so in this situation what will happen
05:09 - the first like the project which is
05:12 - created is based on the 2.7 so whatever
05:15 - will be the feature of 2.7 that will not
05:18 - be there in 3.7 some some features have
05:21 - changed okay
05:23 - so in this case your project will not
05:25 - work so it basically in this case we
05:28 - will use the
05:30 - the concept or the platform Docker okay
05:34 - I hope you got it why this project will
05:37 - not go this project will not work
05:38 - because they have the this project is
05:40 - dependent on 2.7 version but now you are
05:43 - going to run this project on 3.7 version
05:45 - so it says totally different okay so
05:48 - that's why this project will not work on
05:50 - this machine that is computer too
05:53 - so to solve this problem Docker came
05:55 - into role so what Docker can do
05:58 - so the docker will not Docker will just
06:01 - simply just create one container in uh
06:05 - in that computer one so in container
06:09 - what we can do we can just
06:12 - install Python 2.7 okay and we can
06:17 - create the project one okay and what we
06:21 - will do we will we can just
06:25 - send this project okay
06:28 - we can just
06:30 - send this project to
06:34 - this one
06:36 - to computer 2.
06:38 - you can send it using the uh container
06:42 - or image this thing we will cover in our
06:45 - further videos about the docker like
06:48 - important concept okay so this one is
06:51 - container which is shared with the
06:53 - computer too so in this what is
06:54 - happening you can say this project is
06:57 - created on 2.7 in this container and
07:00 - here also it will run in this on the
07:02 - same version of python it is python two
07:04 - point
07:05 - 7 okay so in this way the docker solves
07:08 - the problem of the statement like this
07:11 - one
07:12 - like it's a very famous statement in the
07:14 - software industry like
07:20 - my code runs on my machine
07:27 - but
07:29 - it's not running in your machine
07:34 - okay so this is the uh like most
07:38 - um
07:40 - like important or famous statement in
07:43 - the software industry and this problem
07:44 - is being solved by the docker nowadays
07:46 - okay so this is also the one uh very
07:49 - important Concept in the docker CDs okay
07:51 - so let's start with the video without
07:53 - wasting time okay
07:55 - so for the docker architecture in this
07:57 - we have different layers okay but if you
08:00 - will learn about the docker architecture
08:02 - so we will also discuss about about the
08:05 - virtualization like if you are aware of
08:07 - virtualization then it is very easy for
08:09 - you to understand this otherwise also if
08:12 - you don't know about virtualization
08:14 - concept then and also it's fine okay so
08:18 - you can get it easily okay so let's
08:20 - start with the layers okay or the
08:23 - architecture so the very first layer or
08:26 - the very bottom of player we get is the
08:29 - Hardware layer okay
08:32 - so this one is the first is the hardware
08:35 - okay
08:37 - and the next we get is the host OS
08:42 - okay so I will add Hardware we get the
08:46 - host operating system
08:48 - so this is the just basic okay everyone
08:52 - knows about it so in Hardware what do we
08:54 - usually we get the Ram we get the hard
08:58 - drives or SSD
09:01 - and we get the CPU
09:05 - and all those things motherboards a
09:08 - keyboard all those things okay we're
09:09 - getting Hardware okay and above Hardware
09:12 - uh we mostly install the operating
09:15 - system usually we install the windows OS
09:19 - okay some people install the Linux or
09:25 - Mac OS
09:28 - okay so some people install these osr as
09:33 - well okay so now we will talk about
09:36 - first we will talk about only these two
09:38 - or or normal operating system which we
09:41 - have in our PC
09:43 - So currently suppose if you I want to
09:46 - install python okay so I can easily
09:48 - install python in my PC suppose I
09:51 - install python 3.8
09:53 - so yeah so I can easily install in my
09:55 - this host OS okay it's fine to install
09:59 - suppose if I again I want to install
10:01 - some other thing suppose I want to
10:04 - install Java yeah I can install Java
10:07 - suppose it's version 8 okay
10:10 - and suppose if I want to install
10:14 - MySQL I can install it easy no it's
10:16 - node.js all those things we can install
10:18 - it easy but the problem is there suppose
10:21 - if my if I require uh like the version
10:27 - 2.8 okay python 2.8 if I require okay
10:32 - python
10:35 - 2.8 is required for some project okay
10:38 - but in my PC there is three pointed so
10:41 - what I will need to do I will need to
10:43 - uninstall this version and again install
10:44 - this this version it is not possible to
10:47 - run those versions in a single OS okay
10:51 - so this is not a case we cannot do it
10:53 - like this so that's why a Docker came up
10:56 - okay and um
11:00 - with the help of Doc Docker we what we
11:03 - can do we can run different versions of
11:05 - a software okay we can run different
11:08 - version of software so again each
11:09 - container so how the like thing works
11:14 - now so I ever the host operating system
11:17 - we have a Docker engine okay
11:20 - so Docker engine is basically used to
11:23 - managing the containers which is created
11:26 - okay so here we have the
11:30 - Docker engine
11:33 - okay and above this Docker engine we
11:36 - have the different containers suppose
11:39 - this one is container one
11:41 - this one is container one
11:44 - this one is container two
11:47 - which is supposed to containers for now
11:49 - so this one is container one and this
11:53 - one is container two in this we have
11:55 - Python
11:57 - 2.7 in this we have python
12:03 - uh just to wait a minute
12:10 - we have python
12:13 - 3.8 okay
12:16 - and this one is computer one
12:19 - okay so in this way the basic
12:22 - architecture of the
12:25 - Docker works so Docker engine is
12:28 - basically responsible for sorry
12:31 - it is responsible for managing the
12:38 - I just write it here
12:41 - for many
12:43 - managing the containers okay
12:47 - so all those things is managed by the
12:50 - Docker engine
12:51 - okay I hope you got it how this thing
12:54 - works okay
12:55 - the docker engine host OS and control
12:58 - one container 2. so this is the basic
13:00 - architecture of the docker okay now if
13:03 - you talk about the virtualization so in
13:05 - virtualization what happens on in the
13:07 - host OS there is the hypervisor and in
13:11 - the hypervisor what happens we use
13:14 - different OS okay like in my PC
13:17 - currently I have virtualbox okay I use
13:20 - virtualbox so if you will see here
13:23 - in my virtualbox is one software which I
13:25 - use to run different OS in a single OS
13:27 - so here you can see I have two OS for
13:29 - now we I have Kali Linux and the Ubuntu
13:32 - so these are the two OS which is
13:35 - currently present in my
13:37 - Windows machine okay so the how is the
13:41 - architecture if you will see suppose if
13:44 - I just
13:46 - demonstrate you
13:49 - so suppose the hardware is my this one
13:52 - normal hardware and I have the windows
13:55 - OS so above the windows OS what I have
13:59 - I have one hypervisor okay
14:02 - not in my machine currently I'm using
14:05 - virtualbox okay and then
14:08 - what I have I have two OS so here if
14:12 - it's see here I have one is Ubuntu
14:18 - and other is
14:22 - that is Kali Linux
14:25 - okay
14:27 - so the thing is and if you now you will
14:29 - uh just to ask what is the difference
14:32 - between both of them the docker
14:34 - architecture and the normal
14:35 - virtualization architecture
14:37 - so the difference is basically it just
14:40 - like
14:41 - in virtualization what happens here you
14:44 - can see we are installing a new OS okay
14:48 - a new OS so it will what it will it will
14:51 - create like it will use more memory
14:54 - so because of that our board time will
14:57 - also reduce okay your PC will become
14:59 - slow so that's why instead of using
15:03 - virtual machines or the hypervisor or
15:07 - virtualization we can use the docker or
15:12 - container so we can create different
15:14 - container different number of contents
15:16 - on a single machine okay
15:19 - so this is the just the basic difference
15:21 - suppose in virtualization you have to
15:24 - run python two different version of
15:26 - python so you install python in this one
15:28 - and Python 2.7 in this and python 3.7 in
15:31 - in this OS so
15:34 - for those purpose you will need to you
15:36 - are you are installing the two OS so
15:39 - that is not a good thing okay and also
15:42 - uh it will create more load on your host
15:45 - OS
15:46 - so that's why Docker is mostly preferred
15:48 - instead of virtualization
15:51 - so I hope you got it the basic
15:53 - architecture of Docker and the virtual
15:54 - virtual machine not virtual machine
15:57 - virtualization okay so here also I have
16:00 - some basic um
16:02 - you can see the image I have the
16:04 - container architecture and the virtual
16:06 - machine architecture okay
16:08 - so here you can see the infrastructure
16:09 - that is the same as the uh
16:13 - what I said this one Hardware okay host
16:16 - devices there dock engine and there and
16:18 - here I have a fbfc FD suits four apps
16:21 - are being run on a single machine and
16:23 - anyway you can see the again the
16:25 - hypervisor is there and the guest OS is
16:28 - there and in case 2s we are running
16:30 - different apps
16:32 - so this is the basic difference between
16:34 - the docker and the virtualization
16:36 - architecture so like in this series
16:38 - these are this like very uh important
16:41 - week you can say or just you can say the
16:44 - foundation of this Docker series okay so
16:47 - let's start with the first one which we
16:49 - have on the screen is the docker file so
16:50 - what is a Docker file so it's a very
16:54 - simple concept like Docker file is
16:56 - nothing but a just like a text document
16:58 - like we just we have normal text
17:00 - document it's also like that text
17:02 - document like some commands and some
17:05 - like instructions will be there in that
17:07 - Docker file which will be which will be
17:10 - used to create Docker images okay
17:13 - so you might feel little bit of
17:15 - confusing about this but let me just
17:17 - simplify this for you guys so you will
17:20 - just think Docker file as just like uh
17:23 - you can think like it as a recipe okay
17:27 - just suppose it's like a recipe book or
17:30 - something like that and then you will
17:31 - create some
17:33 - like some good foods okay some tasty
17:35 - foods which you will create so similarly
17:38 - in Docker file we will have some
17:40 - instructions okay
17:42 - there will be instructions and we we
17:45 - will use those instruction or we will
17:48 - use this file like Docker file and we
17:50 - will create images okay Docker images
17:53 - which we will create so this is the
17:56 - basic Funda of this Docker file and it's
17:59 - a very uh like simple concept I think
18:02 - you should not get to feel like you
18:05 - didn't get it okay
18:07 - so this is the normal definition of the
18:09 - docker file I hope you got it now moving
18:11 - forward if you will talk about the
18:13 - docker image so Docker image is nothing
18:15 - but the like nothing which is Created
18:19 - from the docker file it just we can say
18:21 - it is a Docker image and also you can
18:24 - see here like it just a template to
18:26 - create a Docker container okay so
18:29 - whatever we will give the instructions
18:31 - like how you have to create image what
18:33 - are the functionalities or what are the
18:35 - dependencies what are the like base
18:38 - should be there like whether it's the
18:40 - application will be based on the python
18:42 - Java PHP or something like that we will
18:44 - write all those in Docker file and then
18:47 - we will get a Docker image okay so it
18:50 - just uh like just like a template to
18:53 - create a Docker container
18:55 - okay and also here you can see I
18:58 - mentioned on point like images which is
18:59 - created can be stored in a Docker Hub so
19:01 - in there is something called as Docker
19:04 - where we get different images different
19:06 - types of images and then we can share
19:09 - those images to other developers or we
19:12 - can use the like images which is created
19:14 - by some other developers okay all those
19:17 - things
19:18 - so now uh to uh like uh to understand
19:22 - quickly or to get it easily like it's
19:26 - the docker image the concept which
19:28 - basically is the based on the oops
19:30 - concept like the class and the object
19:32 - okay if you are familiar with the
19:34 - object-oriented programming language you
19:36 - may be in Python Java C plus plus okay
19:39 - or any other languages then it's it will
19:42 - be very easy to understand for you guys
19:43 - to understand the docker image so let me
19:45 - just simplify this for you
19:48 - suppose you have a one class called as
19:50 - students okay
19:54 - uh sorry it's not visible here I just
19:57 - take some other
20:01 - uh wait wait
20:04 - let's go in general yeah
20:10 - okay
20:12 - suppose this one is your class okay the
20:15 - class is uh students
20:18 - okay
20:20 - students is one class and it has some
20:22 - like Properties or uh you can say uh
20:26 - their name roll number all those things
20:28 - are there like okay
20:31 - so what with what will happen we can
20:34 - create different objects with this class
20:36 - okay so we can create different objects
20:40 - suppose one object will be o1 okay
20:44 - suppose this one is the o1 is the object
20:48 - okay and then suppose we will create one
20:52 - O2 as the object
20:54 - okay
20:56 - so
20:57 - this one is another object which we have
21:00 - now
21:02 - so here we have suppose we have object
21:04 - O2
21:05 - okay cool
21:09 - now wait yeah we have object Auto
21:14 - so like you just like you know just
21:16 - think just think and uh imagine like
21:19 - it's just like the image okay a student
21:22 - is just one image and we are creating
21:25 - different containers from that image so
21:27 - I hope that is clear to you now like if
21:30 - we just talk an image just nothing but a
21:32 - template which we will use and we will
21:35 - create then containers okay
21:38 - so now moving forward if you talk about
21:40 - the container so container is nothing
21:42 - but just here you can see the running
21:44 - instance of the docker image okay it
21:46 - contains the entire package to run the
21:48 - application like whatever the dependency
21:49 - whatever the platform everything
21:51 - whatever is required we will get in the
21:54 - docker container
21:56 - okay like uh just like if you suppose
22:00 - like what what is the basic and what is
22:02 - um like main concept of the docker so it
22:05 - just it we just not just copy the code
22:07 - we actually copy the whole environment
22:10 - okay and we then pass it to the other
22:12 - person or the developer or other member
22:14 - of your team
22:15 - so this is the simple concept of the
22:18 - docker container okay so whatever the
22:20 - instance which is run by the docker
22:22 - image now in the summary which we have
22:24 - the summary is nothing is just a very
22:26 - simple so this one will be the docker uh
22:30 - it will be the
22:33 - it will be the docker file
22:37 - okay
22:39 - and with Docker file we will create
22:43 - Docker image okay let me just
22:47 - get it for you so that it will be easy
22:49 - to understand okay
22:52 - so this one is the
22:57 - code
23:03 - so here we what we will get we will get
23:06 - the docker image we will get
23:09 - okay so here I have got the docker image
23:17 - and then I will get
23:22 - the docker container here we will get
23:25 - the
23:26 - docker
23:29 - container okay
23:32 - so this is the like basic overview and
23:37 - the
23:38 - basic concept of the
23:41 - Docker file Docker image and Docker
23:44 - container okay cool
23:46 - so I'm taking a little bit problem in
23:49 - this so it's going in
23:51 - background
23:53 - I'll just leave I hope you got it okay
23:56 - you got the concept
23:58 - okay hello everyone and now in this
24:00 - particular video we will see how we can
24:02 - install the docker in all this window
24:03 - system okay so currently you can see I'm
24:06 - on this particular website.com
24:08 - install you can come upon on this by uh
24:12 - typing as well you can just search on
24:14 - the Google like Docker install
24:16 - and you will come upon on this screen
24:18 - just click on it and you'll be on the
24:20 - same screen on which I am okay
24:23 - so now in today's video we'll be
24:25 - basically installing for the windows
24:27 - okay so here are some different options
24:30 - as well for different OS like Linux Mac
24:32 - you can
24:33 - install on those OS if you want
24:35 - otherwise if you want to install for
24:37 - Windows so you are on the right place
24:39 - okay so what we can do for Windows you
24:42 - have to just click on this Docker
24:43 - desktop for Windows
24:45 - so here are the some information which
24:47 - you will see like some requirements and
24:49 - all those things WSL about Windows
24:52 - containers everything you will see on
24:53 - this particular page
24:55 - and this one is the button which we will
24:57 - use to uh download the exe so we will
25:00 - get one EXA file through which we will
25:02 - install the docker okay but before
25:04 - starting uh you will you will need to
25:07 - first check the system requirement like
25:09 - it is important for us to install Docker
25:12 - so the first requirement you can see it
25:14 - should be Windows 11 or Windows 10.
25:16 - it should be of six to four bit and the
25:18 - version you can check here like it
25:20 - should be home or Pro or Enterprise or
25:23 - education and it should be higher or
25:27 - 21 H2 it should be okay
25:30 - so to check the version you can just uh
25:33 - press Windows r
25:35 - and you will need to just write or type
25:38 - Winword like Windows version and head
25:41 - will come up on this dialog and here you
25:43 - can see the version in my case it's 22
25:46 - H2 and the
25:48 - it is Windows 11 okay so same you can
25:50 - check in your computer as well
25:54 - and also uh you can see here the enable
25:57 - WSL to feature on on Windows okay so for
26:01 - this what you can do you have to just to
26:03 - open the command line
26:05 - and just type the command WSL if it is
26:07 - there it will show if it is not you can
26:10 - just install it using WSL hyphen iPhone
26:12 - install Okay so it will install WSL for
26:14 - you so WS is nothing but the window
26:16 - supported Linux Okay so
26:20 - it is required to install the docker
26:22 - okay
26:23 - and the other like General like 4GB 64
26:27 - GB Ram should be there 64-bit processor
26:29 - should be there and also virtualization
26:31 - should be enabled that is also on point
26:33 - so how you can check for virtualization
26:36 - like it is required for okay so what you
26:39 - can do you can just hit Ctrl shift
26:42 - Escape
26:43 - okay it will open your task manager you
26:46 - will come up on this screen here just
26:47 - click on the second one performance and
26:50 - then you have to go in the CPU and here
26:52 - you will see virtualization is enabled
26:55 - by default it is enabled but if in your
26:57 - case it disable then you can enable it
26:59 - by going in BIOS setting so you can
27:01 - follow some other tutorials for that as
27:03 - well so for different PCS there are some
27:05 - different Keys like effect F5 F4
27:08 - something like that
27:09 - you can check
27:12 - so I hope it is clear the system
27:14 - requirements and all so now moving
27:16 - forward uh you have to just click on
27:18 - this Docker desktop for Windows it will
27:20 - start this one installer it will uh
27:25 - start downloading this installer
27:27 - actually I have already downloaded it
27:28 - it's of some 600 MB
27:32 - so now what we will do we will just
27:34 - click on it
27:38 - to hit yes
27:41 - and it will take some time
27:44 - yeah if you want to add to desktop here
27:47 - I want okay so it will unpack some files
27:49 - okay
27:51 - so just wait for them unpacking okay
27:53 - after that it will try to install
27:58 - and after all those things we will need
28:01 - to restart our PC as well that is also
28:05 - on point after that it will like
28:09 - installation will be successful
28:12 - okay
28:15 - so I hope you are enjoying the series of
28:18 - our Docker like in our previous video we
28:20 - have talked about the dog of file image
28:21 - and container so I hope these all
28:25 - concepts are clear to you if not you can
28:26 - ask us in comment section as well
28:30 - so just wait
28:35 - let's see till then we just go through
28:38 - the uh what are the other things which
28:41 - we have here
28:42 - uh for the WSL we can check the
28:46 - documentation as well so here you can
28:48 - see how we can install so this is the
28:51 - command which we will use to install the
28:53 - WSL
28:55 - so here you can see developer can access
28:57 - the power of both windows and Linux at
28:58 - the same time on a window machine that's
29:00 - what WSL game okay the windows subsystem
29:03 - for Linux okay
29:05 - so
29:07 - sorry uh
29:10 - so with that we can install many
29:12 - detective distributions and we can
29:14 - install Ubuntu Kali
29:18 - uh cleanups and all
29:24 - okay let's check
29:27 - okay so finally it's installing just
29:30 - wait
29:36 - so here it is saying You must log out of
29:38 - Windows to complete the installation
29:40 - okay
29:41 - so uh
29:44 - let's do this
29:49 - all right so here you can see uh we have
29:52 - got some error and it's it's showing we
29:56 - need to update the WSL okay no problem
29:59 - we'll just copy this one
30:01 - quit windows or CMD right click enter
30:07 - click on yes
30:12 - just wait for installation
30:23 - just see how much time it will take five
30:27 - percent is now okay
30:31 - so if in case if in your case it shows
30:34 - log out then you do log out but again
30:36 - just try to uh just restart your PC
30:41 - okay otherwise it will uh
30:44 - it will show like Docker stopped
30:58 - or else to wait for the installation
31:10 - 38 is done
31:25 - foreign
31:45 - just wait guys
31:52 - till then I just pause the video
31:58 - okay so here you can see uh like uh
32:01 - window subsystem volumes has been
32:04 - installed it's fine
32:06 - now just close this one again click on
32:08 - Docker desktop
32:14 - just wait and here you can see Docker
32:17 - desktop is starting
32:20 - okay
32:27 - just wait
32:32 - so it means we have successfully
32:34 - installed the docker actually
32:37 - and from here you can search for
32:39 - different images like where
32:42 - which we are talking about images in the
32:45 - uh in our previous videos
32:47 - so we can use images for for like
32:53 - which other developers have created okay
32:56 - so here you can see uh to try running a
32:59 - Docker copy and paste this command into
33:00 - terminal and then come back
33:03 - okay we will need to do this one all
33:06 - those things and the images
33:09 - volumes everything you will get here
33:12 - okay
33:13 - so today we will just stop here like our
33:17 - installation is successful
33:19 - now in our next video we will learn
33:21 - about how we can create images all those
33:23 - things okay so that's it for today's
33:25 - guys and I hope you like this video if
33:27 - you have any queries or you face any
33:29 - problem just
33:31 - tell us in the comment section okay so
33:33 - that's it for today's video thank you
33:35 - for watching hello everyone and now in
33:36 - this particular video we will see the
33:38 - docker basic command so as you can see
33:40 - on the screen The Heading is the docker
33:42 - basic commands Okay so we will see the
33:44 - these all commands to pull image to run
33:47 - the image to run the containers all
33:48 - those things we will see in this
33:50 - particular video so before starting the
33:52 - video I hope you have already installed
33:54 - Docker it should be there in your PC to
33:56 - run all these commands Okay and also
33:59 - make sure you are running Docker in your
34:01 - background already I have opened up
34:03 - Docker here in my background
34:04 - okay so I hope you have also opened it
34:08 - all as well so to run these commands we
34:11 - need one uh see command line so you can
34:14 - use just Windows CMD or Powershell
34:16 - whatever you want it all depends upon
34:17 - you so I'm using CMD here normal okay
34:21 - and if you want to use some other you
34:23 - can use that by clicking on this plus
34:26 - icon and then here you can see it as
34:28 - windows power cell and all those things
34:30 - or on this drop down you can check here
34:32 - I have Ubuntu as well okay so all those
34:36 - things you can do so I'm preferring here
34:39 - normal CMD okay so currently I will just
34:42 - divide up the screen between two parts
34:45 - okay
34:47 - to check the commands as well now I will
34:50 - first move into the different directory
34:52 - here actually
34:54 - so we are here at the different
34:55 - directory yeah and now to before
34:58 - starting the actual video so you should
35:01 - know about the docker Hub okay what is a
35:04 - Docker Hub
35:05 - so basically a Docker Hub is nothing but
35:09 - uh you can see as the uh Marketplace of
35:12 - images okay you will get many different
35:15 - type of images there if you will search
35:17 - for Docker hub
35:19 - you will come up on on this screen let
35:21 - me just increase the size here and just
35:24 - click on it hub.docker.com you will come
35:27 - upon on this and here you can search for
35:29 - any image which you want okay so today
35:31 - in this particular video we will be only
35:34 - using the hello world image okay in our
35:37 - next video we will see some other images
35:39 - like how we can use those images and how
35:41 - to run containers how to actually use
35:44 - the uh
35:46 - UI or the console of that particular
35:49 - thing suppose if you want to install
35:51 - python or use Python then we will use
35:53 - Python image and then we will do all
35:56 - those things so just let's search for
35:58 - Hello World for now so hello world is
36:02 - there okay
36:04 - and now what we will do uh here you will
36:07 - see we have this image hello world image
36:09 - okay you have to just click on it
36:13 - and from here you can find different
36:15 - things about this image you can check
36:18 - Force tags what are the tags here's
36:21 - latest is this
36:23 - share taxes there okay
36:26 - now what we will need to do we need to
36:29 - just uh use these uh commands in our CMD
36:33 - so let me open up the CMD and the uh my
36:38 - Chrome browser as well this one now
36:41 - let's start with the uh first thing
36:44 - which you will do is the docker version
36:46 - we will check the which Docker version
36:47 - we are using So currently here you will
36:49 - see we are using 20.1 dot sorry
36:53 - 20.10.23 and the build is this
36:55 - particular thing particular number okay
36:57 - so this is the currently version which
37:00 - we are using in our machine right now so
37:02 - now the First Command which we'll be
37:03 - using in this now we will be doing
37:05 - pulling okay we will pull the hello
37:08 - world image so this is very simple uh
37:11 - you will need to just do Docker pull
37:15 - hello world okay so in every programming
37:19 - language whether it's C C plus plus Java
37:22 - python Swift any language
37:24 - I hope like you may have wrote the first
37:27 - program as your hello world program okay
37:29 - so this time also we are doing the same
37:31 - okay
37:32 - so just hit enter and it will using the
37:36 - default tag as letters it means the uh
37:39 - it is latest image or the latest version
37:41 - of that image you can say like that okay
37:44 - so here you will see we have currently
37:46 - uh pulled this image hello world and now
37:50 - if you if you remember the concept of
37:53 - Docker image and Docker container so we
37:56 - run a container from our image so image
37:58 - just acts as a class and the container
38:01 - as the objects so now the thing is that
38:05 - now we will when we will run this image
38:07 - so it will create container for us okay
38:10 - so how how we can do it it's very simple
38:13 - you have to just write this command
38:16 - Docker run and the image name which we
38:19 - have currently pulled so image name is
38:21 - hello world
38:24 - so here you can see it it successfully
38:27 - uh executed this command so here you can
38:29 - see uh the content of that hello world
38:31 - image is the hello from Docker this in
38:34 - this message shows that your
38:36 - installation appears to be working all
38:38 - those things are there and to generate
38:41 - this image what Docker did so all these
38:43 - things are mentioned in that image
38:45 - that's why it's showing here now now if
38:48 - you will see our the docker uh
38:52 - UI
38:53 - so let me open the docker desktop
38:58 - and here you will see one container is
39:00 - showing okay so here you will see the uh
39:04 - logs what are the locks over there okay
39:07 - and the terminal nothing is there
39:10 - inspect is here okay files here in this
39:13 - one file we have hello name hello we
39:15 - have one file
39:17 - okay
39:18 - and here you can see the content of that
39:21 - file here actually okay
39:24 - so now the thing is if what will happen
39:27 - if I again run the command so it will
39:29 - just create another container for me
39:30 - let's check and if I do just clear the
39:34 - screen and again run the con command so
39:36 - here you will see one more container has
39:38 - been created okay so it just like the
39:41 - class and the objects these are the
39:43 - objects okay of the images okay it means
39:46 - different containers are being earned
39:47 - okay
39:48 - so uh this one is about the uh
39:54 - creating a container and all those
39:56 - things okay
39:58 - so I hope it is clear to you how you can
40:01 - pull the image and how you can then
40:03 - create a container from that image so
40:05 - you have to just pull image using Docker
40:07 - pull and image name and you have to
40:08 - create the container just using the
40:10 - docker run and the image name now next
40:12 - command we have in this list is Docker
40:14 - PA so what it does it basically stores
40:17 - the current running container okay so
40:20 - currently it's showing nothing because
40:21 - we don't have any running container
40:23 - right now because it is all the
40:25 - containers have started and it is
40:26 - stopped and exited so here if you will
40:29 - see uh on the UI here you can say status
40:32 - exited okay that's why it's not showing
40:35 - any kind of container right now it shows
40:37 - us the current running container we will
40:40 - see all those thing in our next videos
40:41 - when we will be doing on the python or
40:43 - some other uh image then we will see all
40:47 - those things which containers are
40:48 - currently running and all those things
40:50 - now moving forward if we will talk about
40:53 - the to check the list of all the
40:54 - containers then we have a option uh we
40:57 - get one as the a or or we can say if we
41:01 - will do a so here you will see if I
41:03 - increase this one and here you will see
41:06 - the container ID image is there when it
41:10 - is created status all those things we
41:12 - are getting so these are the two
41:13 - containers which we have created okay so
41:16 - if you will check for the container ID
41:18 - then you will see up here on the UI we
41:21 - will have the same ID that is if you
41:23 - will check for this one it's 903 and
41:26 - above one is C double four so it is same
41:29 - C double four and nine zero three okay
41:31 - so in this way you can check the uh you
41:35 - can check the all the containers which
41:37 - are there in currently in the system
41:39 - okay
41:40 - and similarly to uh check for images you
41:43 - can check using the docker images okay
41:45 - so before that let's uh check for how we
41:50 - can remove the container okay so this is
41:53 - very simple as you can see on the screen
41:55 - we need to just to use the container ID
41:57 - so how we can do it first I clear the
42:00 - screen and maximize it to it should be
42:03 - clearly visible to you guys so what is
42:06 - the command Docker PS hyphen a or all
42:09 - you can use anything uh sorry
42:13 - we have not deleted I think yeah hyphony
42:16 - okay so now what we will do uh we have
42:19 - to just use the docker
42:22 - okay and you have to use the RM and the
42:26 - ID which you have to use that is this
42:29 - one
42:31 - so here you can see if we will again
42:34 - check all the container it will give you
42:36 - only one and if you will go on here and
42:38 - you will check if there is also only one
42:40 - container is there now again to remove
42:43 - that container you can use the uh Docker
42:46 - RM and that container ID
42:48 - so you have to just copy it and paste it
42:52 - done we are done now there is no any
42:54 - container in our PC right now and also
42:57 - you will see nothing is there okay so in
43:00 - this way you can remove the containers
43:02 - as well now moving forward in this
43:04 - tutorial you will see for what are the
43:06 - images present in our this machine so if
43:09 - you need to go for Docker images so here
43:12 - you will see one image is there hello
43:13 - world image is there its tag is latest
43:16 - that ID is given when when it was
43:18 - created it was created 17 months ago
43:20 - like you can see like someone has
43:22 - created this image 17 months ago now
43:24 - currently in 2023 we are using this
43:26 - image so in this thing for like you can
43:30 - imagine how things have been changed
43:32 - what are the like uses of Docker can be
43:34 - you can think of that okay
43:36 - and also here you can see in this column
43:38 - we have size at 13.3 KB
43:41 - so now uh let's check for uh how we can
43:44 - remove the image so it's also very
43:47 - simple you have to just use Docker RMI
43:50 - that will remove image and the image
43:52 - name which we have is hello world okay
43:57 - so something happened uh no it's deleted
44:01 - now if we'll check for images so no
44:03 - images are currently there in our PC
44:05 - okay so that's all for today's videos
44:09 - guys I hope you liked it if you have any
44:11 - queries anything you can just ask in the
44:13 - comment section okay so this one is the
44:16 - command which we used now in our next
44:18 - video we will check for the actual
44:19 - implementation and all those things with
44:21 - some other images okay so that's it for
44:24 - today's guys thank you for watching I'll
44:25 - meet you in the next video thank you so
44:27 - much hello everyone and now in this
44:29 - video we'll be working on the python
44:31 - image okay so basically we are on this
44:33 - Docker Hub and we will search for the
44:35 - python image here
44:36 - so basically in this particular video
44:38 - we'll be working on the python image
44:40 - like how we can uh pull this python
44:43 - image how we can create the containers
44:45 - and also we will see the uh interactive
44:49 - cell of the python in this particular
44:50 - video okay so let's start with the video
44:53 - I hope you already have installed Docker
44:55 - Hub and all those things and your
44:56 - previous YouTube we have already covered
44:58 - the basic commands as well so it uh like
45:01 - there should be no any problem in that
45:03 - so here we have on the python this is
45:07 - the one of the image of python uh okay
45:10 - so here you will see the command for
45:13 - pull python okay so we can pull the
45:15 - python using this particular command
45:17 - which we have already covered and these
45:19 - are the some tags which you used
45:21 - nowadays like
45:24 - what version if you want to suppose in
45:27 - your project you are using python three
45:29 - point something like 3.2 you're using
45:31 - then we can use different tags for those
45:33 - all things
45:35 - okay
45:36 - so uh let's start with the video okay so
45:39 - let me open the CMD okay
45:43 - and I will go in first
45:45 - [Music]
45:49 - uh 15 I think yeah
45:53 - so here uh let's check our Docker
45:56 - version First
45:57 - okay so it's 20. something something
46:01 - okay so now what we will do we will be
46:04 - installing uh sorry we will be pulling
46:06 - the docker image so the very simple
46:08 - command which you have is Docker pull
46:10 - and the name of the image that is python
46:12 - okay so we'll just hit enter and it will
46:16 - using the default tag that is the latest
46:18 - is the default act which which is uh
46:21 - there okay so it will install it will
46:24 - take some kind of time you can see here
46:26 - we
46:27 - uh the size actually uh okay
46:32 - so we will just wait for the
46:34 - installation
46:37 - just wait
46:40 - and also one more thing suppose if you
46:42 - want to uh install different version of
46:45 - path and then while installing while
46:47 - pulling the image we can provide the
46:50 - different version using the colon like
46:52 - Docker pull python colon and the version
46:54 - name
46:56 - it might be three point something okay
46:58 - so in this way you can uh
47:02 - pull image of different version as well
47:04 - so it's quite useful for us okay
47:07 - so till then we just scroll the what are
47:10 - the things are here if we get something
47:11 - interesting let's search for it
47:13 - okay so these are the simple tags so we
47:16 - have here okay
47:21 - share taxes there
47:24 - quick reference okay
47:26 - so here you can learn about what is
47:29 - python okay if you're new to it
47:31 - and these are the some things which we
47:33 - will do in our next video actually so we
47:36 - will create one Docker file we will
47:38 - understand what are all those things and
47:40 - then we will run one python project as
47:43 - well in our later videos okay in the
47:45 - docker container we will do all those
47:46 - things
47:48 - okay
47:51 - so let's check whether everything is
47:54 - installed or not yeah it's installing uh
47:59 - you can also search for jdk as well like
48:02 - open JD or jdk something like that for
48:05 - Java which we have uh
48:10 - let me search I think it's open jdkm
48:14 - okay
48:16 - uh
48:19 - yeah I had this one is we have it so you
48:23 - can see it's one billion plus uh
48:26 - downloads are there
48:28 - for this one
48:31 - also there are many things which you can
48:33 - see here like Debian
48:35 - MySQL as well you can see
48:38 - everything is there and based on the
48:41 - operating system you can also uh
48:43 - select on which operating system you're
48:45 - working on
48:49 - so it's very interesting thing Docker
48:51 - hub
48:53 - let's check whether it is installed or
48:55 - not
49:00 - yeah it's finally installed okay
49:02 - download a newer image for python latest
49:05 - okay so uh finally we have a image let
49:09 - me just go in here and we'll search for
49:12 - images here
49:14 - so here you will see we have one python
49:16 - image okay
49:17 - so now what we can do we can just run
49:20 - this python image how we will run it uh
49:23 - as we have discussed already we can run
49:26 - it using Docker run
49:28 - and the one more thing which we will add
49:30 - here right now is hyphen
49:32 - ID and the image name which we have
49:35 - python
49:36 - so what does it refers to ital just
49:39 - server so I refers to interactive and T
49:42 - refers to the terminal so basically we
49:44 - will get the python interactive terminal
49:47 - which we usually get suppose if you are
49:50 - going in uh I open on another
49:53 - window of CMD
49:56 - I think yeah yeah this is the another
49:58 - window if I search for python
50:03 - so here you will see you you are getting
50:04 - this uh terminal window or that
50:08 - interactive cell of python if you will
50:11 - here write print
50:14 - hello
50:16 - then it will print okay so in this way
50:19 - we will get as well there also so let me
50:23 - just close it and now I just run this
50:27 - particular command
50:30 - okay so here you will see we are using
50:34 - 3.11.2 version that is the latest one if
50:37 - you will do something like print
50:42 - uh hello
50:45 - it will print okay so yeah if you want
50:49 - to do anything like suppose if I do
50:51 - import OS
50:54 - and print
50:57 - OS Dot pwde
51:00 - I think this is the command no it's not
51:04 - PWD something is the command which we
51:06 - use for the present voting directory let
51:08 - me just search for it uh if we go for uh
51:13 - OS Library
51:18 - python okay
51:20 - so let's open gigs for gigs
51:26 - okay so here you can see the CWD equal
51:29 - to OS dot get CWD it will print the
51:33 - current working directory so we can just
51:35 - copy it and I just
51:38 - paste it here
51:40 - okay and I just to print CWD
51:46 - okay
51:48 - so you you are saying like we are on
51:50 - this particular directory like the root
51:53 - directory okay
51:55 - so in this way you can use the python
51:57 - shell and all those things okay so it
52:00 - was a very uh quick tutorial for you
52:03 - guys so you learn basically about that
52:05 - it flag okay that interactive terminal
52:08 - flag okay
52:09 - so that's all for today's guys and in
52:11 - now next video we will be learning about
52:12 - how we can create the docker file and
52:14 - all those things and then we will create
52:16 - that images from that Docker file and
52:18 - then creating containers and running
52:20 - projects all those things okay we'll be
52:22 - doing in that particular video so that's
52:24 - all for today's videos I hope you liked
52:26 - it if you have any queries you can ask
52:27 - us in the comment section thank you for
52:28 - watching
52:31 - hello everyone uh in this video
52:34 - basically we will see some important
52:35 - content which are remaining from the
52:37 - basic commands video okay so basically
52:40 - in this particular video we will first
52:42 - see about the how we can uh run the
52:45 - container in the background okay these
52:47 - all thing which we'll see and also we
52:49 - will cover in this video like how you
52:51 - can start the container how you can stop
52:53 - the container so these are these are all
52:55 - things first we will see in the
52:57 - particular video in the next video we
52:59 - will cover that creating images then
53:01 - creating contents all those things okay
53:03 - so let's start with the video already in
53:05 - our previous video we have covered this
53:07 - one like we have created that uh images
53:10 - uh sorry we have pulled that image of
53:13 - python okay
53:15 - and now we will create the uh container
53:18 - of that image okay so just open the CMD
53:21 - uh
53:23 - let me go into that directory
53:26 - where I do all those things okay so now
53:29 - what you will need to do uh actually
53:32 - first we will see the images what are
53:34 - the images we have So currently you will
53:37 - see you we have on the python image
53:39 - right now and if you want to check for
53:42 - container So currently you don't have
53:45 - any container okay
53:47 - so the basic thing which we do usually
53:50 - uh to run the container so how we do it
53:52 - it's just simple Docker run and the
53:55 - particular image name so connected here
53:57 - we have the image name as python okay if
54:00 - you do python so what happened now
54:02 - if you will check for container so one
54:04 - container has been created and it is
54:07 - exited so what happened with this
54:09 - container created and then exited okay
54:13 - it's not running in the background okay
54:15 - it is now stopped so when you use this
54:18 - command uh Docker and python okay
54:21 - and also which we had covered uh in the
54:24 - last video the docker uh run hyphen
54:28 - interactive terminal and the image name
54:31 - so here uh we will just wait for five to
54:34 - ten seconds okay and I will just write
54:37 - the print
54:41 - hello
54:42 - is printed also something else if you do
54:46 - Class 2 and uh
54:49 - and if you do just pass here uh sorry
54:53 - indentation error we got
54:55 - if you do pass okay just control D okay
55:02 - so this thing you can do like you have
55:04 - created a student as well uh if you
55:07 - create the object
55:10 - of that class
55:14 - you can do that as well
55:17 - print S1 if you do yeah there you have
55:21 - the object okay so now we just exit okay
55:25 - now when we will see the uh this one so
55:29 - here you will see uh
55:32 - this one this is the container which is
55:35 - that okay uh exited about a minute and
55:39 - no no this one this one is the one just
55:42 - exited three seconds ago so we waited
55:45 - some time and then After exiting we it's
55:48 - showing three seconds ago if you again
55:50 - check it will show some more second that
55:52 - is 26 seconds ago and if you do just
55:55 - Docker PA so it shows the currently
55:57 - running containers okay so currently you
56:00 - you don't have any container running
56:02 - okay so to execute or to run the
56:06 - container in the background we have some
56:08 - different flags okay which we use so the
56:11 - very uh spatial flag we have is The
56:13 - Hyphen D that is the detach okay we use
56:16 - this flag to run our containers in the
56:18 - background so how we can do it it's so
56:20 - very simple to use and also you will
56:23 - learn about some uh
56:26 - what you can say uh one more flag that
56:28 - is The Hyphen iPhone name you can give
56:30 - any particular name to the uh container
56:33 - as well so how we will do it so if you
56:36 - want to do uh first I just do PSI funny
56:39 - I just remove these containers for now
56:42 - so how you can do it Docker RM and you
56:44 - have to just to provide this
56:47 - okay done again let me just copy this
56:51 - one okay
56:52 - okay let's check again okay we we don't
56:55 - have any content right now so now we
56:57 - will just uh create a container I need
56:59 - to run in the background how we can do
57:01 - it so you have to use Docker run and the
57:03 - flag which we'll use for now is it that
57:06 - is uh interactive terminal and the name
57:08 - we will use so I will give the name to
57:12 - the uh Docker is PS you can PC you can
57:16 - give it like that as well or like this
57:18 - as well it doesn't matter okay so I'm
57:20 - using this simple method that is PS
57:22 - without codes
57:24 - will use the hyphen D flag Dirty attach
57:27 - and here we will need you will need to
57:29 - provide the image okay the name of the
57:32 - image which you have pulled so image
57:34 - name is this python okay so here you
57:36 - will see some kind of long string it may
57:39 - be a Docker ID it uh sorry container ID
57:42 - it can be let's again search for Docker
57:44 - psyphen a so here you will see
57:46 - um
57:47 - the details about the container ID the
57:50 - image the command which is basically
57:52 - used when we do it interactive cell when
57:55 - we do it
57:58 - here you can see up it means it's
58:01 - running and the name you can say is PC
58:03 - which you had provided right now here
58:06 - okay if you do now Docker PS it will
58:09 - show you the running guidance So
58:11 - currently the running container is this
58:12 - one which is that okay that is 5D
58:15 - something is the ID which we have got
58:17 - already here
58:18 - okay so now moving forward uh if you
58:22 - want to execute that container how you
58:24 - can do it for that also we have the
58:26 - command that is exit means execute you
58:30 - can pronounce it like that like we have
58:32 - exec
58:34 - and here you will need to provide the
58:36 - itself that is uh interactive terminal
58:39 - flag not cell
58:41 - and then you will provide the name
58:43 - and after that you have to just give the
58:45 - which command you you want to execute So
58:48 - currently we want to execute this Python
58:50 - 3 okay so if you do Python 3 so here you
58:54 - got it you got the terminal that you can
58:57 - do print
58:58 - anything okay so in this way you can use
59:02 - the uh containers and you can run the
59:05 - containers in the background okay
59:07 - foreign
59:10 - so now what we will need to do uh later
59:14 - uh right now we will see uh how you can
59:17 - stop the container as well for now I
59:19 - just exit from this interactive shell
59:22 - and I'll just clear the screen and check
59:24 - for PS running and now I will do a stop
59:28 - so how you can stop Docker stop here you
59:30 - can provide the name of the container or
59:34 - just a container ID
59:37 - it takes some I approx 30 seconds of
59:39 - time for stopping the container okay
59:42 - just wait for it
59:46 - okay so now container has been stopped
59:48 - if you again go for PS something so here
59:52 - you will see there is no running
59:54 - containers for now if you do psyphenase
59:57 - so the container will be there again if
60:00 - you want to uh
60:01 - what we can say start the container how
60:04 - you can do it it's simple uh just
60:06 - instead of stop you can use this start
60:09 - okay so now if you go for PS uh that is
60:14 - running container so we have that this
60:16 - one up nine up four seconds again if you
60:19 - do 9 seconds 10 seconds 11 seconds 12
60:22 - seconds okay
60:23 - so our container is running so I hope
60:27 - you got it uh how you can execute the uh
60:30 - command or how you can start the
60:32 - container stop the container run the
60:33 - Contour in the background so these were
60:35 - the some important content concepts of
60:37 - the docker okay which we had uh by
60:40 - mistake left
60:42 - currently now it is cover so in our next
60:44 - video we will surely uh do that one uh
60:47 - creating Docker file and creating image
60:50 - and then all those things particular
60:51 - okay
60:52 - so if you have any query you can answer
60:53 - in the comment section otherwise that's
60:55 - it for today's video and I will meet you
60:57 - in the next one thank you for watching
61:04 - hello everyone and now in this video we
61:06 - will talk about how we can create the
61:08 - docker file for the python image okay so
61:10 - here you can see the different uh
61:13 - keywords I have written for you all okay
61:15 - so these are the some keywords which we
61:17 - use for creating the docker file
61:18 - actually so in this particular video
61:20 - basically we will be will be creating
61:22 - the python image okay
61:24 - so uh here you can see actually the uh
61:27 - the description is also written for
61:30 - these keywords you can see the from
61:32 - keyword is used to use the base image
61:34 - okay what are the base image which we
61:35 - are going to use here so mostly in the
61:38 - from keyword we specify the base image
61:40 - for python we use Java for sorry for
61:44 - python we'll be use Python based image
61:45 - for Java we will we use open jdk for the
61:49 - Ubuntu will be us Ubuntu image okay so
61:51 - these are the base images which we get
61:53 - from the docker we will be using those
61:56 - kind of images okay
61:57 - and run command is also used to run some
61:59 - kind of commands which we which you want
62:01 - to uh
62:03 - run while creating the container and all
62:06 - and copy used to copy the files from the
62:09 - local file system to the docker image
62:11 - what they are used to set the working
62:13 - directory for the container actually
62:17 - okay and CMD is we use to CMD is
62:21 - basically used to specify the what are
62:23 - the commands you want to run or when
62:25 - that particular container runs or
62:27 - something like that happens okay
62:30 - so these are the some of the uh I think
62:33 - three to five uh commands or keywords
62:35 - which will be using in our Docker file
62:37 - okay
62:37 - so before starting the video or you
62:40 - should have a vs code installer you can
62:42 - use any uh
62:44 - any uh ID not ID it's just what do we
62:49 - say
62:51 - uh notepad or something like that okay
62:55 - or editor you can say so here uh I have
62:57 - this Docker uh Docker tutorial folder
63:00 - and I'll be creating one python image
63:02 - folder
63:04 - okay so let me just
63:08 - cancel all those things
63:10 - and now what we will be doing we will
63:13 - just create one Docker file okay you can
63:15 - do like this Docker file and keep it
63:18 - keep in mind like you should use only
63:19 - one capital D here not the name should
63:23 - be like this only okay
63:26 - so you here is the docker file has been
63:28 - created and let me create some app.pi as
63:32 - well
63:34 - okay so this is the python file and
63:37 - suppose you want to just print like this
63:40 - this is my first
63:44 - image okay cool
63:47 - so this is done suppose it till uh now
63:51 - we just want to pin this in our
63:53 - container like when our container will
63:55 - run okay
63:57 - now what we will be doing we'll be
63:59 - creating the docker file how we can do
64:01 - it you have to just use form and we from
64:04 - where I from which uh base image you
64:07 - want to use I want to use Simple python
64:09 - okay you can use from python after that
64:12 - you can specify the working directory
64:15 - for that particular container so I just
64:18 - want working directly to be app
64:21 - okay and also you want to copy all the
64:25 - files
64:26 - okay
64:27 - to the app here
64:30 - okay and next we'll be using the CMD
64:34 - okay now currently we don't want to run
64:36 - any kind of command okay that's why we
64:38 - are not using run here so in CMD what we
64:41 - want uh we want to use this line Python
64:46 - 3
64:48 - and you can specify in a comma you want
64:52 - to run which file I want to run app.pi
64:55 - file okay
64:57 - so this one is done okay that much is
65:00 - fine to create the python image okay so
65:03 - now the further step is just to use to
65:05 - build that build image okay actually
65:08 - from the docker file so you have to just
65:10 - open up the terminal here you can click
65:12 - on this and click on this here Docker
65:15 - terminal
65:16 - and you have to go in that particular
65:19 - directory so we are currently in Python
65:21 - image
65:22 - so
65:25 - we are here in the directory and for
65:28 - building the uh image the command which
65:31 - we use is docker
65:34 - build and one hyphen T flag is used to
65:37 - define this some kind of tag like the
65:40 - default tag which you get is the latest
65:42 - so here you can Define any tag suppose
65:44 - like
65:45 - my first python app and in that also it
65:50 - should be only in lower case you cannot
65:52 - give the combination of a percussion
65:55 - lowercase in the tag name okay and then
65:57 - we will be using dot dot will be used to
66:00 - just uh get the docker file and then
66:02 - creating that image from that okay just
66:04 - hit enter
66:07 - and here you can see our image has been
66:09 - created actually
66:10 - and this one you can see exporting layer
66:13 - writing image this one okay naming my
66:17 - first python app this is done okay now I
66:20 - will just clear the screen and I will
66:22 - just run that
66:24 - uh particular
66:27 - image so image name was my I think my
66:30 - first
66:32 - python app
66:37 - so it's running so here you can see it
66:40 - is printing this is my first image okay
66:43 - and if you go on the docker desktop so
66:46 - here also you will see the name is this
66:49 - one it is just specifying that random
66:51 - name it specifies and the image name is
66:54 - my first python app and image also here
66:56 - you can see the my first python app okay
66:59 - so in this way you can create the python
67:01 - image now let's do uh some
67:05 - what we can say uh some kind of expand
67:09 - or not experiment just I write some
67:11 - commands actually here import OS okay
67:14 - and I want to just show you the actual
67:17 - uh directory in which directory that
67:19 - Docker is running okay so
67:22 - here we can write current dir is
67:27 - and here comma separator OS dot get CWD
67:34 - and here we will be using this one
67:38 - and again I want us to run the build
67:41 - image and I will
67:43 - build it okay and the container name I
67:47 - want to provide I want to provide name
67:50 - of container is
67:52 - iPhone iPhone name and it should be like
67:54 - uh
67:55 - uh
67:58 - what should be the name
68:01 - uh
68:03 - first
68:05 - pi
68:06 - first Pi c means first python container
68:10 - just hit enter
68:13 - and here you will see the this is my
68:15 - first image printing and currently I
68:17 - already slash
68:19 - okay and here if you will see uh here
68:23 - also like okay none it's showing we will
68:27 - see why
68:28 - okay tag is none okay
68:32 - okay no problem in containers if you see
68:36 - yeah engineer her name is first spicy
68:38 - okay the container name actually
68:40 - okay so uh now what we will do uh again
68:44 - if you want so
68:46 - we I just want to create one file here
68:49 - suppose I create one file hello.txt here
68:52 - and I just print a higher
68:55 - and I want to print the list of
68:59 - directories or files which are present
69:01 - in that documentary because we are using
69:04 - the copy here okay so it will copy all
69:06 - those things in the docker image so for
69:09 - this we can use OS dot get
69:12 - uh not get I think it's list dir yeah
69:19 - again we will just uh
69:24 - here I use some different tag
69:28 - list list I just do list image okay
69:35 - okay and now I run this
69:39 - using list image and the second
69:47 - Pi container enter
69:50 - and here you can see it is listing the
69:52 - all the uh what you can say
69:56 - um
69:56 - all the files and the current directory
69:59 - and the print statement is printing okay
70:00 - so in this way you can create the any
70:05 - python image which you want and suppose
70:07 - you want to uh send this file or
70:10 - something like that Suppose there is
70:12 - some kind of project which you have
70:13 - created in that file and
70:15 - you want to send to the other person so
70:18 - you can just create the image of that
70:19 - file and you can send it okay
70:22 - so in this way it works so I hope you
70:24 - like this video and that's all for
70:26 - today's videos guys and if you have any
70:28 - queries you can ask us in the comment
70:30 - section okay so that's it for today
70:32 - we'll meet you in the next video thank
70:33 - you for watching
70:36 - hello guys and now in this particular
70:37 - video we will see how we can create the
70:39 - docker file for the Ubuntu image okay so
70:41 - basically we'll be using all this
70:43 - command which you are able to see on my
70:45 - screen like from run copy work there CMD
70:48 - okay so basically we'll be using some of
70:49 - the commands from that and we will
70:52 - create one Ubuntu image okay from the
70:54 - docker file as we have already saw in
70:56 - previous video in the python we have
70:58 - done it so same thing which we have to
71:00 - do in this as well so what we will do
71:03 - will be just creating one uh
71:06 - directory with the name Ubuntu image and
71:09 - inside that let's create the file uh
71:12 - Docker file the name should be only like
71:14 - this and then what you have to do
71:17 - uh you will just uh
71:21 - use this one from
71:23 - okay and then what you have to do you
71:27 - have to just write the image name as the
71:30 - Ubuntu and then what you have to do
71:33 - a UV will use run command in this
71:36 - actually and we will update the image
71:38 - okay whenever the image will be created
71:40 - it will update it okay our Ubuntu will
71:43 - be updated
71:44 - and then we will be using CMD and then
71:48 - we will write some command like we can
71:49 - write who am I it will tell us the who
71:52 - is the current user the name of the user
71:54 - okay
71:56 - so now what we will be doing uh I'm
71:58 - already in this directory and we can do
72:01 - like this like Docker build hyphen T you
72:04 - can provide any tag name it's all depend
72:07 - upon you Ubuntu app and then we will use
72:09 - Dot
72:10 - and it will
72:13 - not okay
72:15 - so now it's donating okay PTA update
72:19 - also didn't take much time okay it takes
72:22 - usually okay fine uh let me just clear
72:25 - the screen open up the CMD okay you can
72:29 - do anywhere you can do on this
72:31 - terminalizer but I prefer doing on this
72:33 - so if you will do Docker images and here
72:36 - you will see Ubuntu app so this image
72:39 - has been
72:40 - created uh
72:43 - I guess
72:45 - uh let me just check
72:48 - what was the
72:52 - image name yeah Ubuntu app is the image
72:54 - name actually okay so now what we'll be
72:57 - doing uh we will just run this
73:01 - image Docker run and we'll provide some
73:05 - name as the my first
73:07 - Ubuntu okay
73:10 - and we will give it uh
73:14 - image name that is Ubuntu app
73:17 - yeah so here you can see the root so it
73:20 - is giving us the result root okay so uh
73:24 - like the command has been executed so
73:26 - which command has been executed uh this
73:28 - who am I if you will check in the
73:30 - containers
73:31 - so here you will see the command who am
73:33 - I and the image is Ubuntu app and the
73:36 - name is my first Ubuntu okay so uh now
73:40 - let's just uh change the command you can
73:44 - do any command like uh
73:46 - suppose if I do some comma and write
73:49 - some another command what will happen
73:51 - just check
73:52 - it was just to give us error because it
73:54 - will execute uh
73:58 - in a single command line I guess so it
74:01 - will give us error so instead of that uh
74:04 - we can try like this PWD only okay and
74:09 - we will create with the name we want to
74:11 - have two
74:12 - okay
74:14 - so it's done again open up the terminal
74:16 - and it will clear the screen and let's
74:20 - check for Docker images
74:23 - okay Ubuntu app 2 is there if you will
74:26 - do a Docker run uh hyphen iPhone name
74:31 - same name just give same name one two
74:33 - two and the uh
74:37 - okay so now let's hit enter
74:42 - so here you will see the present working
74:43 - diode the follow slash means it's in
74:46 - root directory actually okay
74:49 - so uh that's it for today's videos guys
74:52 - I hope you liked it and you got it how
74:54 - you can create the docker file for the
74:57 - Ubuntu image okay it's simple okay so
74:59 - that's it for today and I will meet you
75:00 - in the next video thank you for watching
75:04 - hello everyone now in this video we will
75:06 - see how we can create the Java image
75:08 - okay using the docker file okay so here
75:10 - are the some of the commands which you
75:12 - can see on this screen we have from run
75:14 - copy workday and CMD okay so basically
75:17 - we'll be using these commands Okay and
75:19 - we will create on Docker file we will
75:21 - create one python uh sorry one Java
75:23 - project as well and we will run that
75:25 - project okay and we will check the
75:27 - output in the docker like how we are
75:29 - getting
75:30 - so it's a very simple step to do uh for
75:33 - that again you will need to create One
75:35 - Directory uh let me just create outside
75:37 - this yeah here we can create that's fine
75:41 - Java image is there okay so you have to
75:45 - just create one Docker file fine
75:48 - and then we will be using next command
75:52 - we have is the work dir so basically we
75:54 - will Define the directory okay
75:57 - fine then we have uh copies there so it
76:02 - will basically copy the all the contents
76:04 - of the file
76:05 - or the current directory and then uh we
76:09 - will see uh we basically run one command
76:11 - let's uh
76:13 - uh I will explain it to you let me just
76:16 - write sample dot
76:18 - Java and then we will use CMD okay and
76:23 - we'll use Java comma sample
76:27 - okay so we are done okay Docker file is
76:32 - done so now let me explain you why I
76:34 - have written this sample.java so now I
76:36 - will just create one file with the name
76:38 - sample dot Java okay and I will just uh
76:45 - create the class with the name sample
76:48 - and then we'll be using public static
76:51 - void Main
76:53 - Java syntax is very lengthy r
76:57 - but it's fine we can do
77:00 - at the system dot out Dot println and
77:04 - then we will just print
77:06 - hello world hello world uh it's uh it's
77:10 - it's working fine okay cool so now what
77:16 - we'll do we will go into this directory
77:18 - in the Java image and we'll clear the
77:20 - screen and the simple thing which you
77:22 - have to do is they just compile this
77:25 - Java file so if you are a Java
77:27 - programmer you might be aware of that
77:28 - before
77:30 - actually running that uh like Java
77:33 - program we need to compile first because
77:34 - it's I think compile based programming
77:36 - language okay
77:38 - and then we get one file then we run
77:40 - that file then it is executed okay so we
77:44 - will just compile this one so we'll
77:46 - compile using Java C program sorry
77:49 - JavaScript command and the sample.java
77:52 - and uh we forgot semicolon it happens
77:56 - here
77:57 - okay so here you can see uh the file has
78:01 - been created and we have to just give
78:04 - the name sample and here you can see the
78:06 - result is hello world it's working okay
78:08 - it's fine so because it's working
78:11 - so now what we will do
78:13 - I will just explain it to you so
78:16 - basically the Run command is basically
78:17 - the command which is run when you create
78:19 - the uh when you run the image actually
78:21 - okay
78:23 - so uh it will just first compile and
78:26 - then what we are doing we are just
78:28 - running uh the executing that compiled
78:32 - code okay using this command Java and we
78:35 - are providing the file name as the
78:36 - sample okay that's it this is the only
78:38 - concept behind this okay fine uh what we
78:42 - will do uh we will first build the file
78:45 - uh build the image using this Docker
78:48 - file how we can do it job Docker build
78:49 - and we'll provide the tag name using
78:52 - hyphen T flag
78:53 - and we will write the name is my Java
78:56 - app
78:59 - okay just start at the end okay it's
79:02 - working
79:04 - it will take some time and something
79:07 - happened uh what we are getting uh
79:12 - sample dot Java comma not found okay
79:18 - fine because we have not written Java C
79:21 - here okay that's why it was just basic
79:24 - one let me again run
79:28 - okay now it's done finally and we will
79:31 - just clear the screen we will open up
79:33 - the CMD we will search for the docker
79:37 - images okay so here you will see my Java
79:40 - app has been created now what we will do
79:42 - we will basically run this image we will
79:44 - provide the name of the container as the
79:47 - uh what we can provide
79:50 - uh Java uh
79:53 - Java one okay fine it's fine my Java app
79:58 - is also we can give the image name okay
80:01 - let's see okay so here you can see we
80:03 - are getting the output as the hello
80:05 - world it's working fine it means like
80:07 - it's working perfectly if you want to
80:10 - check the container list so here you can
80:12 - see the using psyphen a and here you can
80:15 - see it's created just 11 seconds ago
80:17 - okay exit exited this one 10 seconds ago
80:22 - and the name is Javan okay fine again if
80:26 - you want to Let's uh we can uh we can do
80:30 - something else as well we can try to
80:32 - create calculator I will just copy the
80:34 - code of calculator y to write the
80:38 - whole code if you have code
80:42 - don't take it seriously
80:45 - okay so here what we can do uh
80:49 - I have just copied it
80:52 - and we will just paste it here Ctrl V
80:56 - and the change the name as sample again
81:00 - I will just first run this app let's see
81:03 - how it's working Javas Java C
81:06 - ycle dot sample dot Java
81:11 - let me again delete this one
81:15 - okay and let's run Java sample
81:19 - okay I will choose plus I will 12 11
81:22 - okay it's perfectly it's working fine
81:26 - okay so now what we will do we will be
81:28 - just uh
81:31 - again creating image Docker build hyphen
81:34 - t
81:36 - Cal C dot okay
81:42 - fine and now what we will do uh
81:46 - will be on Terminal let me just clear
81:49 - the screen we will check for Docker
81:51 - images
81:54 - and its calcium is there uh it's created
81:57 - you can see 12 seconds ago we will just
81:59 - run this application we will do Docker
82:02 - build sorry sorry we will do uh Docker
82:05 - run we will provide the name one name
82:07 - like calci app in Java okay we'll
82:12 - provide the name of the application as
82:15 - my job sorry what was the name calci is
82:18 - the name fine
82:20 - okay let's see so here you can see
82:23 - choose an operator because we are
82:24 - getting something else uh
82:27 - we will need to run this application in
82:29 - the background guys
82:34 - okay
82:37 - okay we can try with uh detach mode okay
82:41 - let me just clear this screen uh we can
82:44 - do Docker run iPhone IIT
82:47 - hyphen iPhone name uh
82:51 - let me first check the name
82:55 - whether any your container is
82:59 - created
83:02 - okay
83:04 - we will delete this one uh Docker RM you
83:07 - can delete the container using the
83:09 - container ID and the RM command okay
83:11 - let's do now it is related uh yeah I
83:15 - guess yeah it's still later now so now
83:17 - what we'll do we will run the uh
83:21 - image that calcium is so we will do
83:24 - Docker run hyphen ID hyphen iPhone name
83:27 - we can give it as the calc C app again
83:31 - we will do hyphen D for in-day touch
83:33 - mode it means it will run in the
83:34 - background again calcium is there let's
83:37 - hit enter let's do Docker PS
83:40 - to check yeah so here you can see it's
83:42 - running in the background
83:43 - okay fine uh let's try to execute Docker
83:47 - execute hyphen ID and the uh
83:52 - container name is we have container name
83:54 - as Kelsey app
83:57 - Cal C app
84:01 - okay okay but here we need to provide
84:04 - the command name actually so we can
84:06 - provide a
84:08 - Java sample
84:10 - let's let's see what happened just okay
84:13 - so choose an operator so we will choose
84:16 - operator S Plus enter the first number
84:18 - 12 13 and it's working perfectly fine so
84:22 - in this way you can just uh execute
84:26 - these type of programs in the background
84:28 - okay
84:30 - so that was a very simple actually so
84:33 - now uh if you will check again if I'll
84:37 - clear the screen and again run this one
84:39 - and I choose approach
84:42 - into first number 12 12 144 yeah cool
84:46 - create the screen it means it's working
84:48 - fine and to stop the container you can
84:51 - use uh
84:53 - here the container is running so to stop
84:55 - the container you just have to provide
84:57 - the command Docker stop and you can
84:59 - provide the container name and the or
85:02 - you can provide the uh what you can say
85:05 - um this one the name as well then it
85:08 - will stop it and if you will check so
85:11 - here no container is running okay it's
85:12 - perfectly fine so in this way we can do
85:15 - all these things so it was a very uh
85:17 - good video I guess uh but you guys will
85:20 - tell how it was okay so if you have any
85:22 - query you can ask in the comment section
85:23 - okay and uh that's it for today and I'll
85:26 - meet you in the next video thank you for
85:28 - watching
85:30 - hello everyone and now in this video we
85:33 - will see how we can push the image to
85:34 - the docker Rob ok
85:36 - so uh these are the some of the steps
85:38 - which we have to follow to push the
85:40 - whatever we create the image for the
85:42 - docker okay as uh it will be very
85:45 - beneficial suppose if you want to send
85:47 - some code or some part of like some of
85:49 - your project to someone else which works
85:52 - on a particular uh environment suppose
85:55 - that project works on python 2.6 only
85:57 - okay so then you can create the image of
86:00 - that and then you can send it to your
86:02 - friend or
86:04 - like you can post it on the docker Hub
86:07 - and from there your friend can access it
86:08 - okay so this is the very uh simple
86:10 - process so for that first of all you
86:12 - will need to go on this particular
86:14 - website that is Docker hub
86:16 - it will like hub.docker.com okay
86:19 - and here if you don't have any account
86:21 - then for that you will need to register
86:22 - first it's very easy process to register
86:25 - actually I have already a account on it
86:28 - so what we can do I will just sign up
86:30 - sign in here so this is the user which
86:33 - is required
86:34 - to push the image to the docker up okay
86:39 - So currently we are here on the
86:41 - dashboard okay so now what we will be
86:43 - doing uh
86:45 - like we had created the image that is
86:48 - calci okay and now but uh we can do uh
86:53 - we will create one more image uh for
86:57 - this project okay that sample.java okay
86:59 - we have already the docker file here we
87:01 - had done it in our last video okay
87:04 - so this is the docker file so what we
87:07 - will do we will basically create one
87:08 - image okay
87:10 - so how we can do it it's a very simple
87:12 - Docker build hyphen T okay and the name
87:16 - which you want to provide suppose I want
87:18 - to provide its name to calculator
87:23 - Java okay
87:25 - this time I want to provide and you have
87:27 - to just use Dot
87:29 - okay
87:32 - so you can see image is being created
87:34 - now if you'll search for Docker images
87:37 - so here you will see calculator Java has
87:39 - indicated and the tag is latest because
87:41 - we have not provided any kind of tag to
87:43 - it that's why it's showing latest okay
87:46 - so just uh clear the screen and again
87:50 - I'm let me just search okay so this is
87:53 - the image has been created okay so now
87:56 - here if you will check
87:58 - um
88:01 - here you will see like the whatever the
88:04 - image we create we don't provide the
88:06 - actual the format of that so we need to
88:09 - change the format using this command
88:11 - like Docker tag and whatever the image
88:13 - name if version is present then we write
88:15 - the version name and then the
88:17 - uh the name in The Format in which uh
88:20 - through which we can
88:22 - post that image to the docker app okay
88:26 - so that how we can do let's see so it's
88:30 - uh just you have to provide Docker and
88:32 - then you have to provide the tag and the
88:34 - name of the image which you have created
88:36 - so here the name is calculator Java okay
88:39 - so Cal queue later
88:43 - Java okay and the name will be followed
88:47 - by your username so my username is
88:50 - 987456 Slash and whatever the name which
88:52 - you want to give suppose I want to give
88:55 - it as a calculator
88:59 - app and I will provide the version so I
89:03 - will provide the version Ms version 1.0
89:05 - okay let's hit enter
89:08 - and now if you will again search for
89:10 - Docker images you will see one image has
89:12 - been created with the name and the tag
89:14 - is version 1.0 okay
89:16 - so now what you will need to do uh you
89:19 - will need to just uh
89:22 - do Docker login okay to push that image
89:26 - to the docker so Docker login is
89:28 - required
89:29 - okay so here it is showing me like I'm
89:32 - already uh authenticated here okay so if
89:36 - I will open up some new terminal and if
89:38 - I will search Docker login
89:43 - okay it's already uh my account is
89:46 - already authenticated that's why it's
89:48 - not asking me for the username and
89:49 - password but when you will do it it you
89:51 - will need to enter your username and the
89:53 - password okay so it's fine uh now what I
89:56 - will do the last command which we'll use
89:58 - is Docker push and whatever the image
90:01 - name which we have so we have this image
90:04 - name
90:04 - we will need to copy this hole okay
90:09 - so
90:16 - okay
90:18 - push and the version which you will need
90:20 - to provide it
90:22 - and the version name is uh version 1.0
90:25 - okay
90:28 - so here we're done so the post refers to
90:31 - repository this so it will push our
90:33 - project to
90:35 - on the docker okay
90:38 - let's wait it will take some time uh
90:42 - so it's soft
90:45 - 323.6 MB
90:55 - okay
91:05 - so here you can see it is showing me
91:07 - mounted from ayush disk calcium okay
91:11 - so is there also any
91:15 - no
91:16 - actually I had already pushed one image
91:19 - with the same name for the testing that
91:21 - so it's showing that
91:26 - so till the completion I just pause the
91:28 - video okay I will come back when this
91:30 - will complete
91:33 - here you will see now it is pushed okay
91:35 - so if you will check here uh
91:39 - if we reload this
91:46 - okay so here we you will see uh
91:50 - uh one image it's pushed here okay and
91:53 - this is the same name which we had given
91:55 - like calculator app
91:57 - okay and if you click on the public view
92:00 - you will get to know how you can uh pull
92:03 - this image okay so this is the command
92:05 - which we use to pull the image actually
92:07 - okay
92:08 - so that is the simple one okay so uh
92:11 - you'll might you might get confused why
92:13 - mounted and all so to clear all this uh
92:16 - if you want to you can give it like this
92:19 - colon and then version 1.0 but now I
92:21 - don't want it just a hit dot okay
92:25 - so let's just clear the screen if you'll
92:27 - check for Docker images so here you will
92:29 - see this one is this this okay
92:33 - oh sorry not this one yeah here
92:37 - we have hello python okay
92:39 - so this is created now we can just push
92:41 - it using Docker push and the name which
92:44 - we have is uh iOS
92:47 - 987456 slash
92:50 - hello python okay
92:54 - so here you can see it is preparing and
92:57 - waiting it will take some time okay
93:03 - okay it is now taking all the from
93:05 - library pattern fine
93:10 - okay I just pause okay and we'll wait
93:13 - let's pause
93:19 - okay so here you can see it is just
93:22 - pushed all those things if you will
93:24 - check again on the
93:27 - repositories here in this section and
93:30 - here you will see Hello python is there
93:32 - and if you click on public View
93:36 - so this one is the command which will be
93:38 - you using okay so now what we will do I
93:42 - just go into the dock images and
93:46 - I just remove this one uh
93:51 - Docker RMI remove image and the name of
93:56 - the image should be
93:58 - okay
94:02 - okay now removed if I can check okay
94:05 - fine there is no images
94:07 - so now what we can do uh where is the
94:10 - yeah
94:12 - instead of RMI we can do not pull
94:16 - okay
94:20 - so now it's pulling the resource from
94:22 - the docker up
94:23 - okay status downloaded if you will again
94:25 - check for Docker images
94:27 - so you will see we have this one and if
94:31 - you want to run you can earn it using
94:33 - Docker run and the Ctrl V if you do this
94:37 - one
94:38 - and the here you can see the content
94:41 - whatever the content we had written uh
94:44 - it's showing us here if we'll check
94:46 - app.pi so this is the this is first
94:48 - image current director is printing and
94:50 - the all the files which are present
94:52 - there okay so in this way you can push
94:55 - the image to the docker you can pull the
94:57 - image from the docker up okay and also
94:59 - this will help you to like um what we
95:02 - say
95:03 - you can easily share your project to
95:05 - other person as well okay
95:08 - so that's it for today's videos guys I
95:10 - hope you liked it okay if you have any
95:11 - queries you can ask in the comment
95:13 - section that's all for today's video and
95:15 - I'll meet you in the next video thank
95:16 - you for watching
95:18 - hello guys and now in this video we'll
95:20 - be talking about the docker compose okay
95:22 - so this is the very uh interesting topic
95:25 - and till now we have actually covered
95:27 - the very uh all the basic concepts of
95:29 - the docker like from creating uh for
95:32 - pulling images from the docker to
95:33 - pushing image
95:35 - to creating your own custom image
95:37 - everything has been cleared till now and
95:39 - now we will be moving towards some
95:41 - Advanced topic that is now the current
95:44 - we have is the docker compose okay
95:47 - so uh let's see uh what are the
95:50 - information about the docker compose on
95:53 - the
95:56 - documentation
95:59 - so uh here you will see uh
96:05 - so here you will see the uh overview of
96:08 - the docker compose one Docker composes
96:10 - how you can install try compose
96:12 - everything all the information is here
96:14 - okay so uh let me tell you first about
96:17 - the what exactly the docker comes and
96:19 - why it came in the role okay just think
96:22 - about the web application okay suppose
96:24 - if we have a one web application if we
96:27 - come here and if I create some
96:31 - suppose this is one of the website okay
96:34 - this is one website okay
96:38 - and it's uh support e-commerce website
96:42 - or any uh Dynamic website you can say it
96:46 - will be the front end and the backend as
96:48 - well okay
96:49 - so what will happen
96:52 - if you want to just uh run this
96:55 - application in the containers device
96:57 - with the through uh with containers and
97:00 - in Docker so in that case you will need
97:02 - to create two different images one for
97:05 - the front end and one for the back end
97:07 - so in this way like it will be very
97:09 - difficult to manage both the containers
97:11 - at a time okay so that's why that Docker
97:15 - compost came in a role so with the help
97:17 - of that we can run these two containers
97:19 - at once and we can manage it easily so
97:22 - this is a very a basic and fundamental
97:24 - concept of the docker compost will come
97:26 - up come on the documentation part and
97:29 - here it will run sorry if you will read
97:32 - uh so here you can see the compose is a
97:35 - tool for defining and running multiple
97:37 - container Docker applications okay with
97:40 - compose you use yml file so we basically
97:43 - use one viable file that is Docker
97:46 - compose dot yml it is the one file in
97:49 - which we Define all these things like uh
97:52 - images what images you have to use and
97:55 - all the like connecting parts all those
97:57 - kind of things
97:58 - it is managed by the docker compose file
98:01 - that is dot yml file okay
98:03 - so with this file uh we manage the
98:06 - containers
98:09 - here also you can see here it is written
98:11 - like with a single command we can create
98:13 - and start
98:14 - all the services from your configuration
98:16 - okay so this is also one of the parts
98:20 - so uh if you will come up on here you
98:23 - will see how you can install compose try
98:25 - compose all those things so we will
98:27 - cover all these things in our uh next
98:29 - video
98:30 - so uh that was the basic overview of the
98:33 - docker compose and what we got to know
98:36 - is the dot ymf file is first important
98:38 - file and it is basically used to run the
98:41 - multiple containers at a time if we need
98:44 - uh to like if you need some more
98:47 - information you can just search for
98:48 - Docker compose and any medium you can
98:50 - search
98:51 - okay so here you will see many people
98:53 - post about the docker compose what is
98:56 - this or you can read this uh blocks by
99:00 - someone for him okay
99:03 - so here you can see all those things
99:04 - okay
99:06 - so uh that is the uh basic overview of
99:09 - the docker compose I hope you liked it
99:11 - and we'll be surely updating uh in our
99:14 - next video the further part of the
99:16 - docker compose so if you have any
99:18 - queries you can answer in the comment
99:19 - section so thank you for watching and
99:21 - I'll meet you in the next video thank
99:22 - you so much for watching
99:25 - hello guys and now in this video we will
99:27 - see about the docker compose
99:28 - installation okay
99:30 - so before starting the video there is a
99:33 - good news for you like if you are using
99:35 - Windows and the Mac OS then uh
99:38 - it comes already pre-installed when you
99:40 - install the docker in your system okay
99:43 - so currently uh in this video we will be
99:45 - seeing uh how you can install in the
99:48 - Linux system if you are using the docker
99:50 - in the Linux system then you will need
99:52 - to uh install that okay so for that you
99:55 - will need to just search Docker compose
99:57 - if you search your installation
100:00 - and here you will come upon on the
100:02 - official documentation of the docker and
100:05 - here you will need to open a pair and
100:07 - here you can see the overview of the
100:09 - page of this one uh Docker compose and
100:12 - here you can read the documentation
100:14 - about all those things like for Linux
100:17 - Mac they are the same to install the
100:19 - docker desktop
100:20 - and for uh
100:23 - Linux as well like it is required I
100:25 - guess
100:27 - uh yeah here you can see if you have
100:29 - already installed Locker desktop you can
100:31 - check which version of compose you have
100:32 - by selecting about Docker desktop from
100:35 - the docker menu okay no one need no need
100:37 - to do all those things let's just
100:40 - quickly check the docker version in our
100:42 - PC so here if you'll do Docker compose
100:47 - hyphen V so here you will see we are
100:50 - using the version
100:51 - 2.15.1 uh Docker compose okay so in your
100:55 - PC as well it might be same or it might
100:58 - be different okay so let's see uh how we
101:03 - can install in Linux so for that you
101:05 - will need to come up on here and you
101:06 - will need to just click on this you can
101:09 - install the compose standalone
101:11 - and here you will see the some of the
101:13 - commands which will be used to install
101:15 - the docker compose in the system so here
101:17 - you can see the call command is there
101:19 - and there they are provided the some
101:22 - links and also these steps what are the
101:25 - steps you will need to take to uh
101:27 - install the docker compose and also this
101:29 - pseudo command is there for I think
101:32 - creating symboli links is there this is
101:34 - uh for the Linux and if you will go
101:36 - scroll down and here you will see for
101:39 - the Windows Server as well they have
101:40 - given the documentation
101:42 - so you can read it and you can install
101:44 - the docker compose easily in your system
101:47 - so if you are using Windows and Mac then
101:49 - it's fine otherwise you can install in
101:52 - both of these DirectX and Windows Server
101:54 - okay
101:55 - so that's it for today's and I'll meet
101:56 - you in the next video thank you for
101:58 - watching
101:59 - hello guys and now in this video we'll
102:01 - be talking about how we can create the
102:03 - docker compose.yml file for this uh
102:06 - Docker file okay so basically we will be
102:09 - creating that file that will be the
102:11 - simple one for this video for now okay
102:13 - in the next video we'll be look for some
102:15 - complex okay where we can manage the
102:18 - ports and all everything
102:19 - so Docker compose dot yml you have to
102:22 - write like this and it has also some
102:24 - kind of syntax and semantics to write
102:26 - this file just like the docker file
102:28 - which you have you are running from
102:30 - first from then run CMD copy all those
102:33 - things so similarly in Docker compose
102:35 - also we have some syntaxes so what is
102:39 - the syntax let's see uh we will just
102:41 - write okay so the very first is we need
102:44 - to provide the version okay version
102:46 - basically which version of Docker
102:48 - compose you want to use So currently we
102:50 - had checked so it's our 2.5 so we will
102:53 - write it 2.5
102:55 - and then later on you have to provide
102:58 - the services so here you will provide
103:00 - the services and next you will provide
103:03 - with the service name
103:05 - so service name we can provide anything
103:07 - like
103:09 - uh let's provide
103:11 - ubu okay it's one two or Ubuntu image
103:15 - like this we can provide okay
103:18 - and next you will need to provide some
103:21 - container name okay so basically we'll
103:24 - be uh creating file for building the
103:27 - image and then running the ad container
103:29 - do those things okay so how you can do
103:32 - it now you have to just provide
103:33 - container underscore Name colon space
103:36 - and let's write something my container
103:39 - okay
103:41 - and next you will need to provide for
103:43 - build look look for the building of with
103:46 - the docker file we use build hyphen T
103:48 - then the uh tag which we want to provide
103:52 - and the context that is the directory in
103:55 - which directory we have so for that here
103:57 - also you will need to provide the
103:59 - context actually
104:00 - so
104:02 - context will be the dot and the next
104:04 - Docker file
104:06 - so Docker file will be the docker file
104:09 - which we have that is this one and
104:12 - that's it and now we are going to go so
104:14 - you will need to just enter the docker
104:16 - compose
104:18 - up and here you will see it is building
104:22 - so here you can see and now uh container
104:26 - my container created attaching to my
104:27 - container my content is printing hi hi
104:30 - why because so if you will check here so
104:33 - we have printed Eco High that's why it's
104:34 - showing High
104:36 - okay if you just clear the screen and
104:38 - you check for the images so here you
104:40 - will see uh image might be created with
104:43 - yeah here you can see Ubuntu image one
104:45 - two image with the name it is created
104:48 - okay and if you will check for the
104:51 - container as well let me open up the CMD
104:53 - in the full screen mode
104:57 - if we'll check for Docker psyphenase so
105:00 - here also you will see the one container
105:01 - just 35 seconds ago had created okay
105:05 - so in this way you can write the uh yml
105:09 - file of Docker compose so this is the
105:12 - basic Syntax for the version and this is
105:15 - the service this is the service name
105:17 - and these are the some key value pair
105:19 - which we need okay for building the uh
105:24 - image we need this one for ports to
105:27 - defining ports and all we do we write
105:30 - for the ports and these things okay
105:33 - so in the next video we will see some
105:35 - more uh complex so that's it for today's
105:37 - videos guys and I hope you liked it and
105:40 - if you have any queries you can ask in
105:42 - the comment section thank you for
105:43 - watching I'll meet you in the next video
105:44 - thank you so much
105:47 - hello whether now in this particular
105:49 - video we will see how we can create the
105:50 - python server using the docker company
105:52 - so for that you will need to First
105:54 - create One Directory let's create a
105:57 - python server and inside that we will
105:59 - need to create first one dock of file so
106:01 - it's very simple you can just write like
106:03 - this Docker file and in that we'll be
106:06 - using uh python as a base image okay
106:10 - and also I will create some file here
106:12 - like I will create one hello Dot txt
106:16 - and here I will just write hi this file
106:20 - is
106:21 - inside the python
106:25 - server directory
106:29 - okay fine
106:31 - cool so now what we will need to do you
106:33 - need to First copy all these files I
106:36 - want this to copy all this in slash app
106:41 - and work the IR should be
106:45 - as well slash app
106:47 - okay
106:48 - so let me just check it is correct okay
106:52 - fine now we will write like this work
106:54 - there at first and then
106:56 - correct
106:58 - cool so now our Docker file is ready now
107:01 - we will need to create one Docker
107:03 - compose file okay so how you can create
107:05 - docker
107:07 - compose dot yml okay so inside that you
107:12 - will need to write the version you need
107:14 - to specify the version so version will
107:16 - be uh 2.4 okay then Services you will
107:21 - need to provide services so inside
107:24 - Services you will need to write the
107:27 - service name uh you can write service
107:28 - name as my first server
107:31 - okay and inside that again you will need
107:34 - to write the container name
107:36 - so you can write like this
107:38 - container
107:40 - underscore name
107:42 - colon server
107:45 - nice and then command which we'll be
107:48 - using to run the uh server so the
107:51 - command which we have is Python 3 hyphen
107:54 - M HTTP dot server
107:58 - and the port I will give it as one two
108:00 - three four okay and here you will need
108:03 - to allow the ports from your system as
108:05 - well so for this you will need to write
108:08 - minus
108:10 - one two three four colon one two three
108:15 - four
108:16 - okay
108:20 - now you will be writing the uh code for
108:23 - the build which we use to build the
108:26 - image so build will be as simple as it
108:28 - is so we'll need to provide the context
108:32 - so contest will be the current directory
108:35 - and then the docker file you will need
108:37 - to provide the docker file as well so
108:39 - which we have Docker file as this one
108:41 - Docker file okay
108:44 - you have to just save
108:48 - and now we will run the docker compose
108:51 - up so for that you will need to go into
108:53 - that directory also you know python
108:56 - image CD
108:59 - python server PLS screen
109:02 - Docker compose up okay
109:07 - so here you will see how we are getting
109:09 - some
109:12 - techno string key in Services dot my
109:15 - first result port01234
109:18 - okay uh for this we will need to just
109:21 - remove this space I guess so now it will
109:23 - work
109:24 - yeah cool so as you can see python
109:27 - service default containing server key
109:29 - container server created attaching to
109:31 - server
109:33 - all those things are working just check
109:37 - okay now let me just open up the
109:42 - Chrome and if I go on
109:46 - localhost
109:49 - one two three four and here you can see
109:52 - directory listing for this Docker
109:54 - composer value
109:57 - click on hello.txt here you will see
110:00 - this file inside of python server
110:01 - directory okay so in this way you can
110:04 - create the python server using the
110:06 - docker compose so here you can see the
110:09 - everything you can see here okay
110:12 - so that's all guys for today's video I
110:15 - hope you liked it if you have any query
110:17 - you can answer in the comment section
110:18 - thank you for watching I'll meet you in
110:20 - the next video
110:22 - hello guys and now in this particular
110:23 - video you will see how we can install
110:25 - the Dockery now this Ubuntu machine okay
110:27 - so it's very simple uh you just have to
110:29 - go on the official documentation of
110:31 - docker and we will search for the
110:34 - install uh
110:36 - Docker on Ubuntu okay
110:39 - and then we will go on this particular
110:41 - website
110:43 - and we will open up one terminal here
110:46 - just to go
110:49 - now it's fine let me increase the size
110:51 - yeah now if you will see here uh
110:55 - installation method so
110:57 - like Peter Quizlet is what you should
111:00 - have this Ubuntu like we have already
111:02 - that one and you will need to uninstall
111:05 - the previous version if you have so
111:06 - using this command you can just
111:09 - on install the previous version
111:12 - so here you will need to enter your
111:14 - password
111:15 - and no packages there so no install on
111:20 - installation
111:21 - okay later if you will go on go below
111:26 - you will see installation method you can
111:27 - install Docker engine and different ways
111:29 - depending on your needs so it is Docker
111:31 - desktop or apt repository or manually
111:35 - okay so we'll be using this apt
111:37 - repository so first we will be going to
111:40 - run this command so or you can do it
111:45 - just paste that command here okay it
111:49 - will update
111:52 - okay next we have to run this command
111:59 - okay let me just clear the screen
112:04 - okay uh run this command code so just to
112:09 - do yes
112:14 - okay next you will need to do this one
112:18 - so you do first we'll run this command
112:23 - let me be complete clear the screen
112:27 - again paste that one hit enter okay
112:31 - again you copy this command
112:36 - paste it hit enter okay
112:40 - again this command
112:44 - uh let me just copy this
112:48 - and paste it here
112:51 - okay cool
112:54 - uh
112:56 - okay
112:58 - next what we have to do you have to just
113:00 - do the Eco
113:03 - control C
113:06 - TRL V
113:09 - okay
113:10 - then
113:12 - again you have to update
113:27 - then we'll be using this copy
113:30 - we'll paste it
113:34 - it will take 414 MB of space
113:40 - it will take some time then we will
113:42 - finally run the hello world uh container
113:46 - okay
113:50 - let's see how much time it takes
114:10 - so it will take approx one minute of
114:13 - time again
114:21 - so here you will see you uh after
114:24 - running this command this command
114:27 - downloads a testament runs it in a
114:28 - container when the container set prints
114:30 - a confirmation message and exists exit
114:33 - okay
114:34 - so we will do that as well so one minute
114:37 - of approx time you can just fast forward
114:40 - the video at this point
114:52 - relax
114:53 - so if you want to install from the
114:55 - package you can do that as well
115:03 - so many methods are there actually
115:06 - then if you want to uninstall you can
115:09 - uninstall like this as well
115:23 - okay it's unpacking everything
115:39 - let's wait
115:42 - okay now it's finally done now I just
115:45 - clear the screen and run this command
115:52 - now it will fetch
115:58 - okay so as you can see hello from Docker
116:01 - this message so your installation
116:02 - appears to be working correctly so we
116:05 - have successfully installed Docker in
116:08 - our Ubuntu machine if you want to check
116:10 - the version you can use like this so
116:13 - current version we have
116:15 - 23.0.3 okay so this is the very uh like
116:20 - basic uh thing like you can do this from
116:22 - the official documentation later on we
116:25 - will see uh how we can install the
116:28 - docker desktop in Ubuntu machine so
116:30 - that's it for today guys I hope you like
116:32 - this video if you have any query you can
116:33 - also in the comment section thank you
116:35 - for watching
116:39 - hello guys and now in this particular
116:40 - video we will see how we can install the
116:42 - docker desktop on our this Ubuntu
116:45 - machine so it's also very simple step uh
116:48 - we will basically follow the official
116:50 - documentation which we have from the
116:52 - docker so you have to just search
116:53 - install Docker desktop or Ubuntu hereby
116:57 - app
116:58 - and then you you have to click on this
117:01 - first link and then you will come upon
117:04 - on this page and here you will see the
117:06 - information like install Docker desktop
117:07 - on Ubuntu and you will you will need to
117:10 - download this DB package the package
117:13 - okay
117:13 - and the prerequisite as this you can see
117:16 - like 64-bit version should have like you
117:19 - should have this one
117:21 - and also uh terminals you should have
117:24 - genome terminal and everything you
117:26 - should have okay
117:28 - so let's do how we can do it and if you
117:32 - have already installed the uh Docker
117:35 - desktop in our PC or in our this Ubuntu
117:38 - machine then you will need to First
117:39 - remove that one and then you can go
117:41 - forward
117:42 - so let's do uh do uh I will open up one
117:45 - terminal here
117:52 - okay
117:53 - so first thing which we have to do is
117:56 - the install is the package
117:58 - I mean download
118:00 - so it's a 463 MB uh it will take two
118:05 - minutes of time till then I just pause
118:07 - the video
118:11 - okay so here you can see we have
118:14 - downloaded this dot package so now what
118:17 - we have to do uh you will need to first
118:19 - update
118:21 - so sudo uh uh sudo apt get update okay
118:28 - you will need to enter your password
118:30 - that's it
118:32 - and it would also take some time but now
118:35 - it's done okay now what you have to do
118:37 - you have to uh change your directly to
118:40 - the downloads how you can do it just CD
118:42 - and the name of directory that is
118:43 - downloads okay I have already done it so
118:46 - now what we will be doing uh we uh you
118:49 - will use this command sudo apt get
118:52 - installed
118:55 - uh i n s t a 12 install dots and then we
119:01 - will use the name what is the name
119:04 - okay desktop so do just hit tab
119:10 - okay why it's not showing let me just
119:12 - check a list
119:15 - okay
119:34 - so here we have to write AMD 64.
119:41 - and then here the version name we have
119:44 - 4.18.0
119:49 - 4.18.0 hit enter
119:51 - and it's working
119:56 - so here you will see at the end of
119:58 - installation I pictured displays Android
119:59 - to installing a downloaded package we
120:01 - ignore the error message okay
120:03 - just hit enter y
120:34 - and to run the docker Dexter you can use
120:37 - this command system CTL
120:48 - okay I just wait for the installation
120:50 - until then I just pause the video
120:57 - okay so we have installed the docker
121:00 - desktop successfully to run the docker
121:02 - desktop for what is the command so we
121:04 - have this one uh where it is uh this one
121:07 - not this one yeah
121:09 - this command we have just
121:12 - paste it and hit enter it will start the
121:16 - docker desktop
121:17 - and here you can see all those things
121:20 - you have to accept
121:24 - okay and it will start and here you can
121:28 - see quick weekly tips it will give you
121:30 - some weekly tips
121:32 - and this is the setup which you want to
121:35 - do uh you can do it as a student and
121:38 - local development and that's it
121:42 - or you can just skip this part
121:46 - it's showing now Docker engine stopped
121:49 - okay
121:52 - uh let me now close it
121:56 - and let's again uh
122:00 - here you can see to stop the docker you
122:03 - can use this command hyphen you just
122:05 - stop
122:06 - okay and also you can run it from here
122:09 - from all the applications you have just
122:12 - search for Docker desktop and hit on
122:14 - this
122:16 - and then it will start
122:20 - okay it's uh stopping again and again
122:23 - let me check
122:26 - okay guys so here is a solution for uh
122:30 - why Docker is being stopped so here you
122:32 - can see uh for reusing in Ubuntu we need
122:36 - to actually uh
122:38 - enable these things you can read this
122:41 - one KVM support and all so actually I'm
122:44 - also running on the VM that's why it's
122:46 - happening uh
122:49 - and then you can just check the another
122:54 - solution let's check if any other
122:56 - solution we have
122:58 - okay okay
123:00 - uh this one I had the same problem with
123:03 - this with Windows 11 as main host and
123:06 - offer desktop okay
123:08 - you need to enable nested virtualization
123:11 - support which is available on Windows on
123:13 - version greater than 6.0 also it's
123:15 - important to mention it will disable the
123:17 - hyper B virtual machine at the windows
123:19 - okay
123:22 - okay so in order to enable nested VT
123:25 - this in Windows you need to step by step
123:28 - guide so you can follow these steps okay
123:31 - from the this stack Overflow guide and
123:34 - then you are good to go so that's all
123:37 - for today's guys and I'll meet you in
123:39 - the next video thank you for watching

Cleaned transcript:

hello guys and welcome back to the channel this is ayush and from today we are going to start out the docker tutorial Series so this is the our first video in which we basically talk about the introduction to Docker okay so without resting tablet start the video actually so for this tutorial uh we are just going to learn about some Theory concept because if you will learn theory then and only then you can Implement that practically Okay so there is also important to learn about the docker and all this okay so you should learn the first concept what Docker is so here you can see I mentioned some points for you guys like the basic definition which everyone knows and maybe everyone is aware of it like Docker is an app platform for developing shipping and running application what does this line or what does this definition actually mean so it's a very simple uh you will just think Docker as just uh one kind of platform or it is a platform which if which we use or which software developers use to develop the application to ship that application to some other place and then there run that application so it simply means the you will develop one project in the one involvement and then you will just uh send that project or that environment to the other person or to the other computer and then there that project will run okay so if you find this definition little bit difficult or not understandable so you can also see the second Point like Docker is a platform which packages an application all its dependencies together in the form of container so it this line is just similar to the adverb it simply means the whatever we will create an application so in which what will happen all the dependencies and all the whatever the required software whatever the required libraries are there they all will be packed in one single container and that can container will be shipped or will be sent to the other person okay we will see some of the things like how everything goes on and how the actually the docker works so we are we will going to learn with that example okay and next point if you will see like developers can create a container image that includes all necessary components of the applications as a core runtime Library so just just it's same as the above line okay so you can read and here also the this one is important the point like this image can then be distributed to other developers test or deployed on different server or Cloud platform okay so the basic uh Theory or basic concept about dog I just like there is one line in the software industry like this code is working on my machine but it's not working on your machine okay so it's basically uh just like to solve this problem Docker came okay so let's start with example so here I have just you can see the heading like what problem Docker solves so to understand this one I will just create one example for you guys okay so that you can understand it easily let me just do it okay fine perfect so here you will support this one is one computer okay I just write here uh computer one okay and suppose you are building uh or you are creating some python based project okay so you are creating project in with name one project one and the tool which you are using are the software which you're using is just python okay suppose here the version of python is 2.7 okay and the scenario is like that uh this project is created by your friend suppose this project is created by your friend and your friend sends you this project okay so now in your PC so this one is computer two okay so in computer 2 what you do you again just simply copy this project so the name will be same project 1 and suppose here you are using another version of python that is python 3.7 just suppose it so in this situation what will happen the first like the project which is created is based on the 2.7 so whatever will be the feature of 2.7 that will not be there in 3.7 some some features have changed okay so in this case your project will not work so it basically in this case we will use the the concept or the platform Docker okay I hope you got it why this project will not go this project will not work because they have the this project is dependent on 2.7 version but now you are going to run this project on 3.7 version so it says totally different okay so that's why this project will not work on this machine that is computer too so to solve this problem Docker came into role so what Docker can do so the docker will not Docker will just simply just create one container in uh in that computer one so in container what we can do we can just install Python 2.7 okay and we can create the project one okay and what we will do we will we can just send this project okay we can just send this project to this one to computer 2. you can send it using the uh container or image this thing we will cover in our further videos about the docker like important concept okay so this one is container which is shared with the computer too so in this what is happening you can say this project is created on 2.7 in this container and here also it will run in this on the same version of python it is python two point 7 okay so in this way the docker solves the problem of the statement like this one like it's a very famous statement in the software industry like my code runs on my machine but it's not running in your machine okay so this is the uh like most um like important or famous statement in the software industry and this problem is being solved by the docker nowadays okay so this is also the one uh very important Concept in the docker CDs okay so let's start with the video without wasting time okay so for the docker architecture in this we have different layers okay but if you will learn about the docker architecture so we will also discuss about about the virtualization like if you are aware of virtualization then it is very easy for you to understand this otherwise also if you don't know about virtualization concept then and also it's fine okay so you can get it easily okay so let's start with the layers okay or the architecture so the very first layer or the very bottom of player we get is the Hardware layer okay so this one is the first is the hardware okay and the next we get is the host OS okay so I will add Hardware we get the host operating system so this is the just basic okay everyone knows about it so in Hardware what do we usually we get the Ram we get the hard drives or SSD and we get the CPU and all those things motherboards a keyboard all those things okay we're getting Hardware okay and above Hardware uh we mostly install the operating system usually we install the windows OS okay some people install the Linux or Mac OS okay so some people install these osr as well okay so now we will talk about first we will talk about only these two or or normal operating system which we have in our PC So currently suppose if you I want to install python okay so I can easily install python in my PC suppose I install python 3.8 so yeah so I can easily install in my this host OS okay it's fine to install suppose if I again I want to install some other thing suppose I want to install Java yeah I can install Java suppose it's version 8 okay and suppose if I want to install MySQL I can install it easy no it's node.js all those things we can install it easy but the problem is there suppose if my if I require uh like the version 2.8 okay python 2.8 if I require okay python 2.8 is required for some project okay but in my PC there is three pointed so what I will need to do I will need to uninstall this version and again install this this version it is not possible to run those versions in a single OS okay so this is not a case we cannot do it like this so that's why a Docker came up okay and um with the help of Doc Docker we what we can do we can run different versions of a software okay we can run different version of software so again each container so how the like thing works now so I ever the host operating system we have a Docker engine okay so Docker engine is basically used to managing the containers which is created okay so here we have the Docker engine okay and above this Docker engine we have the different containers suppose this one is container one this one is container one this one is container two which is supposed to containers for now so this one is container one and this one is container two in this we have Python 2.7 in this we have python uh just to wait a minute we have python 3.8 okay and this one is computer one okay so in this way the basic architecture of the Docker works so Docker engine is basically responsible for sorry it is responsible for managing the I just write it here for many managing the containers okay so all those things is managed by the Docker engine okay I hope you got it how this thing works okay the docker engine host OS and control one container 2. so this is the basic architecture of the docker okay now if you talk about the virtualization so in virtualization what happens on in the host OS there is the hypervisor and in the hypervisor what happens we use different OS okay like in my PC currently I have virtualbox okay I use virtualbox so if you will see here in my virtualbox is one software which I use to run different OS in a single OS so here you can see I have two OS for now we I have Kali Linux and the Ubuntu so these are the two OS which is currently present in my Windows machine okay so the how is the architecture if you will see suppose if I just demonstrate you so suppose the hardware is my this one normal hardware and I have the windows OS so above the windows OS what I have I have one hypervisor okay not in my machine currently I'm using virtualbox okay and then what I have I have two OS so here if it's see here I have one is Ubuntu and other is that is Kali Linux okay so the thing is and if you now you will uh just to ask what is the difference between both of them the docker architecture and the normal virtualization architecture so the difference is basically it just like in virtualization what happens here you can see we are installing a new OS okay a new OS so it will what it will it will create like it will use more memory so because of that our board time will also reduce okay your PC will become slow so that's why instead of using virtual machines or the hypervisor or virtualization we can use the docker or container so we can create different container different number of contents on a single machine okay so this is the just the basic difference suppose in virtualization you have to run python two different version of python so you install python in this one and Python 2.7 in this and python 3.7 in in this OS so for those purpose you will need to you are you are installing the two OS so that is not a good thing okay and also uh it will create more load on your host OS so that's why Docker is mostly preferred instead of virtualization so I hope you got it the basic architecture of Docker and the virtual virtual machine not virtual machine virtualization okay so here also I have some basic um you can see the image I have the container architecture and the virtual machine architecture okay so here you can see the infrastructure that is the same as the uh what I said this one Hardware okay host devices there dock engine and there and here I have a fbfc FD suits four apps are being run on a single machine and anyway you can see the again the hypervisor is there and the guest OS is there and in case 2s we are running different apps so this is the basic difference between the docker and the virtualization architecture so like in this series these are this like very uh important week you can say or just you can say the foundation of this Docker series okay so let's start with the first one which we have on the screen is the docker file so what is a Docker file so it's a very simple concept like Docker file is nothing but a just like a text document like we just we have normal text document it's also like that text document like some commands and some like instructions will be there in that Docker file which will be which will be used to create Docker images okay so you might feel little bit of confusing about this but let me just simplify this for you guys so you will just think Docker file as just like uh you can think like it as a recipe okay just suppose it's like a recipe book or something like that and then you will create some like some good foods okay some tasty foods which you will create so similarly in Docker file we will have some instructions okay there will be instructions and we we will use those instruction or we will use this file like Docker file and we will create images okay Docker images which we will create so this is the basic Funda of this Docker file and it's a very uh like simple concept I think you should not get to feel like you didn't get it okay so this is the normal definition of the docker file I hope you got it now moving forward if you will talk about the docker image so Docker image is nothing but the like nothing which is Created from the docker file it just we can say it is a Docker image and also you can see here like it just a template to create a Docker container okay so whatever we will give the instructions like how you have to create image what are the functionalities or what are the dependencies what are the like base should be there like whether it's the application will be based on the python Java PHP or something like that we will write all those in Docker file and then we will get a Docker image okay so it just uh like just like a template to create a Docker container okay and also here you can see I mentioned on point like images which is created can be stored in a Docker Hub so in there is something called as Docker where we get different images different types of images and then we can share those images to other developers or we can use the like images which is created by some other developers okay all those things so now uh to uh like uh to understand quickly or to get it easily like it's the docker image the concept which basically is the based on the oops concept like the class and the object okay if you are familiar with the objectoriented programming language you may be in Python Java C plus plus okay or any other languages then it's it will be very easy to understand for you guys to understand the docker image so let me just simplify this for you suppose you have a one class called as students okay uh sorry it's not visible here I just take some other uh wait wait let's go in general yeah okay suppose this one is your class okay the class is uh students okay students is one class and it has some like Properties or uh you can say uh their name roll number all those things are there like okay so what with what will happen we can create different objects with this class okay so we can create different objects suppose one object will be o1 okay suppose this one is the o1 is the object okay and then suppose we will create one O2 as the object okay so this one is another object which we have now so here we have suppose we have object O2 okay cool now wait yeah we have object Auto so like you just like you know just think just think and uh imagine like it's just like the image okay a student is just one image and we are creating different containers from that image so I hope that is clear to you now like if we just talk an image just nothing but a template which we will use and we will create then containers okay so now moving forward if you talk about the container so container is nothing but just here you can see the running instance of the docker image okay it contains the entire package to run the application like whatever the dependency whatever the platform everything whatever is required we will get in the docker container okay like uh just like if you suppose like what what is the basic and what is um like main concept of the docker so it just it we just not just copy the code we actually copy the whole environment okay and we then pass it to the other person or the developer or other member of your team so this is the simple concept of the docker container okay so whatever the instance which is run by the docker image now in the summary which we have the summary is nothing is just a very simple so this one will be the docker uh it will be the it will be the docker file okay and with Docker file we will create Docker image okay let me just get it for you so that it will be easy to understand okay so this one is the code so here we what we will get we will get the docker image we will get okay so here I have got the docker image and then I will get the docker container here we will get the docker container okay so this is the like basic overview and the basic concept of the Docker file Docker image and Docker container okay cool so I'm taking a little bit problem in this so it's going in background I'll just leave I hope you got it okay you got the concept okay hello everyone and now in this particular video we will see how we can install the docker in all this window system okay so currently you can see I'm on this particular website.com install you can come upon on this by uh typing as well you can just search on the Google like Docker install and you will come upon on this screen just click on it and you'll be on the same screen on which I am okay so now in today's video we'll be basically installing for the windows okay so here are some different options as well for different OS like Linux Mac you can install on those OS if you want otherwise if you want to install for Windows so you are on the right place okay so what we can do for Windows you have to just click on this Docker desktop for Windows so here are the some information which you will see like some requirements and all those things WSL about Windows containers everything you will see on this particular page and this one is the button which we will use to uh download the exe so we will get one EXA file through which we will install the docker okay but before starting uh you will you will need to first check the system requirement like it is important for us to install Docker so the first requirement you can see it should be Windows 11 or Windows 10. it should be of six to four bit and the version you can check here like it should be home or Pro or Enterprise or education and it should be higher or 21 H2 it should be okay so to check the version you can just uh press Windows r and you will need to just write or type Winword like Windows version and head will come up on this dialog and here you can see the version in my case it's 22 H2 and the it is Windows 11 okay so same you can check in your computer as well and also uh you can see here the enable WSL to feature on on Windows okay so for this what you can do you have to just to open the command line and just type the command WSL if it is there it will show if it is not you can just install it using WSL hyphen iPhone install Okay so it will install WSL for you so WS is nothing but the window supported Linux Okay so it is required to install the docker okay and the other like General like 4GB 64 GB Ram should be there 64bit processor should be there and also virtualization should be enabled that is also on point so how you can check for virtualization like it is required for okay so what you can do you can just hit Ctrl shift Escape okay it will open your task manager you will come up on this screen here just click on the second one performance and then you have to go in the CPU and here you will see virtualization is enabled by default it is enabled but if in your case it disable then you can enable it by going in BIOS setting so you can follow some other tutorials for that as well so for different PCS there are some different Keys like effect F5 F4 something like that you can check so I hope it is clear the system requirements and all so now moving forward uh you have to just click on this Docker desktop for Windows it will start this one installer it will uh start downloading this installer actually I have already downloaded it it's of some 600 MB so now what we will do we will just click on it to hit yes and it will take some time yeah if you want to add to desktop here I want okay so it will unpack some files okay so just wait for them unpacking okay after that it will try to install and after all those things we will need to restart our PC as well that is also on point after that it will like installation will be successful okay so I hope you are enjoying the series of our Docker like in our previous video we have talked about the dog of file image and container so I hope these all concepts are clear to you if not you can ask us in comment section as well so just wait let's see till then we just go through the uh what are the other things which we have here uh for the WSL we can check the documentation as well so here you can see how we can install so this is the command which we will use to install the WSL so here you can see developer can access the power of both windows and Linux at the same time on a window machine that's what WSL game okay the windows subsystem for Linux okay so sorry uh so with that we can install many detective distributions and we can install Ubuntu Kali uh cleanups and all okay let's check okay so finally it's installing just wait so here it is saying You must log out of Windows to complete the installation okay so uh let's do this all right so here you can see uh we have got some error and it's it's showing we need to update the WSL okay no problem we'll just copy this one quit windows or CMD right click enter click on yes just wait for installation just see how much time it will take five percent is now okay so if in case if in your case it shows log out then you do log out but again just try to uh just restart your PC okay otherwise it will uh it will show like Docker stopped or else to wait for the installation 38 is done foreign just wait guys till then I just pause the video okay so here you can see uh like uh window subsystem volumes has been installed it's fine now just close this one again click on Docker desktop just wait and here you can see Docker desktop is starting okay just wait so it means we have successfully installed the docker actually and from here you can search for different images like where which we are talking about images in the uh in our previous videos so we can use images for for like which other developers have created okay so here you can see uh to try running a Docker copy and paste this command into terminal and then come back okay we will need to do this one all those things and the images volumes everything you will get here okay so today we will just stop here like our installation is successful now in our next video we will learn about how we can create images all those things okay so that's it for today's guys and I hope you like this video if you have any queries or you face any problem just tell us in the comment section okay so that's it for today's video thank you for watching hello everyone and now in this particular video we will see the docker basic command so as you can see on the screen The Heading is the docker basic commands Okay so we will see the these all commands to pull image to run the image to run the containers all those things we will see in this particular video so before starting the video I hope you have already installed Docker it should be there in your PC to run all these commands Okay and also make sure you are running Docker in your background already I have opened up Docker here in my background okay so I hope you have also opened it all as well so to run these commands we need one uh see command line so you can use just Windows CMD or Powershell whatever you want it all depends upon you so I'm using CMD here normal okay and if you want to use some other you can use that by clicking on this plus icon and then here you can see it as windows power cell and all those things or on this drop down you can check here I have Ubuntu as well okay so all those things you can do so I'm preferring here normal CMD okay so currently I will just divide up the screen between two parts okay to check the commands as well now I will first move into the different directory here actually so we are here at the different directory yeah and now to before starting the actual video so you should know about the docker Hub okay what is a Docker Hub so basically a Docker Hub is nothing but uh you can see as the uh Marketplace of images okay you will get many different type of images there if you will search for Docker hub you will come up on on this screen let me just increase the size here and just click on it hub.docker.com you will come upon on this and here you can search for any image which you want okay so today in this particular video we will be only using the hello world image okay in our next video we will see some other images like how we can use those images and how to run containers how to actually use the uh UI or the console of that particular thing suppose if you want to install python or use Python then we will use Python image and then we will do all those things so just let's search for Hello World for now so hello world is there okay and now what we will do uh here you will see we have this image hello world image okay you have to just click on it and from here you can find different things about this image you can check Force tags what are the tags here's latest is this share taxes there okay now what we will need to do we need to just uh use these uh commands in our CMD so let me open up the CMD and the uh my Chrome browser as well this one now let's start with the uh first thing which you will do is the docker version we will check the which Docker version we are using So currently here you will see we are using 20.1 dot sorry 20.10.23 and the build is this particular thing particular number okay so this is the currently version which we are using in our machine right now so now the First Command which we'll be using in this now we will be doing pulling okay we will pull the hello world image so this is very simple uh you will need to just do Docker pull hello world okay so in every programming language whether it's C C plus plus Java python Swift any language I hope like you may have wrote the first program as your hello world program okay so this time also we are doing the same okay so just hit enter and it will using the default tag as letters it means the uh it is latest image or the latest version of that image you can say like that okay so here you will see we have currently uh pulled this image hello world and now if you if you remember the concept of Docker image and Docker container so we run a container from our image so image just acts as a class and the container as the objects so now the thing is that now we will when we will run this image so it will create container for us okay so how how we can do it it's very simple you have to just write this command Docker run and the image name which we have currently pulled so image name is hello world so here you can see it it successfully uh executed this command so here you can see uh the content of that hello world image is the hello from Docker this in this message shows that your installation appears to be working all those things are there and to generate this image what Docker did so all these things are mentioned in that image that's why it's showing here now now if you will see our the docker uh UI so let me open the docker desktop and here you will see one container is showing okay so here you will see the uh logs what are the locks over there okay and the terminal nothing is there inspect is here okay files here in this one file we have hello name hello we have one file okay and here you can see the content of that file here actually okay so now the thing is if what will happen if I again run the command so it will just create another container for me let's check and if I do just clear the screen and again run the con command so here you will see one more container has been created okay so it just like the class and the objects these are the objects okay of the images okay it means different containers are being earned okay so uh this one is about the uh creating a container and all those things okay so I hope it is clear to you how you can pull the image and how you can then create a container from that image so you have to just pull image using Docker pull and image name and you have to create the container just using the docker run and the image name now next command we have in this list is Docker PA so what it does it basically stores the current running container okay so currently it's showing nothing because we don't have any running container right now because it is all the containers have started and it is stopped and exited so here if you will see uh on the UI here you can say status exited okay that's why it's not showing any kind of container right now it shows us the current running container we will see all those thing in our next videos when we will be doing on the python or some other uh image then we will see all those things which containers are currently running and all those things now moving forward if we will talk about the to check the list of all the containers then we have a option uh we get one as the a or or we can say if we will do a so here you will see if I increase this one and here you will see the container ID image is there when it is created status all those things we are getting so these are the two containers which we have created okay so if you will check for the container ID then you will see up here on the UI we will have the same ID that is if you will check for this one it's 903 and above one is C double four so it is same C double four and nine zero three okay so in this way you can check the uh you can check the all the containers which are there in currently in the system okay and similarly to uh check for images you can check using the docker images okay so before that let's uh check for how we can remove the container okay so this is very simple as you can see on the screen we need to just to use the container ID so how we can do it first I clear the screen and maximize it to it should be clearly visible to you guys so what is the command Docker PS hyphen a or all you can use anything uh sorry we have not deleted I think yeah hyphony okay so now what we will do uh we have to just use the docker okay and you have to use the RM and the ID which you have to use that is this one so here you can see if we will again check all the container it will give you only one and if you will go on here and you will check if there is also only one container is there now again to remove that container you can use the uh Docker RM and that container ID so you have to just copy it and paste it done we are done now there is no any container in our PC right now and also you will see nothing is there okay so in this way you can remove the containers as well now moving forward in this tutorial you will see for what are the images present in our this machine so if you need to go for Docker images so here you will see one image is there hello world image is there its tag is latest that ID is given when when it was created it was created 17 months ago like you can see like someone has created this image 17 months ago now currently in 2023 we are using this image so in this thing for like you can imagine how things have been changed what are the like uses of Docker can be you can think of that okay and also here you can see in this column we have size at 13.3 KB so now uh let's check for uh how we can remove the image so it's also very simple you have to just use Docker RMI that will remove image and the image name which we have is hello world okay so something happened uh no it's deleted now if we'll check for images so no images are currently there in our PC okay so that's all for today's videos guys I hope you liked it if you have any queries anything you can just ask in the comment section okay so this one is the command which we used now in our next video we will check for the actual implementation and all those things with some other images okay so that's it for today's guys thank you for watching I'll meet you in the next video thank you so much hello everyone and now in this video we'll be working on the python image okay so basically we are on this Docker Hub and we will search for the python image here so basically in this particular video we'll be working on the python image like how we can uh pull this python image how we can create the containers and also we will see the uh interactive cell of the python in this particular video okay so let's start with the video I hope you already have installed Docker Hub and all those things and your previous YouTube we have already covered the basic commands as well so it uh like there should be no any problem in that so here we have on the python this is the one of the image of python uh okay so here you will see the command for pull python okay so we can pull the python using this particular command which we have already covered and these are the some tags which you used nowadays like what version if you want to suppose in your project you are using python three point something like 3.2 you're using then we can use different tags for those all things okay so uh let's start with the video okay so let me open the CMD okay and I will go in first uh 15 I think yeah so here uh let's check our Docker version First okay so it's 20. something something okay so now what we will do we will be installing uh sorry we will be pulling the docker image so the very simple command which you have is Docker pull and the name of the image that is python okay so we'll just hit enter and it will using the default tag that is the latest is the default act which which is uh there okay so it will install it will take some kind of time you can see here we uh the size actually uh okay so we will just wait for the installation just wait and also one more thing suppose if you want to uh install different version of path and then while installing while pulling the image we can provide the different version using the colon like Docker pull python colon and the version name it might be three point something okay so in this way you can uh pull image of different version as well so it's quite useful for us okay so till then we just scroll the what are the things are here if we get something interesting let's search for it okay so these are the simple tags so we have here okay share taxes there quick reference okay so here you can learn about what is python okay if you're new to it and these are the some things which we will do in our next video actually so we will create one Docker file we will understand what are all those things and then we will run one python project as well in our later videos okay in the docker container we will do all those things okay so let's check whether everything is installed or not yeah it's installing uh you can also search for jdk as well like open JD or jdk something like that for Java which we have uh let me search I think it's open jdkm okay uh yeah I had this one is we have it so you can see it's one billion plus uh downloads are there for this one also there are many things which you can see here like Debian MySQL as well you can see everything is there and based on the operating system you can also uh select on which operating system you're working on so it's very interesting thing Docker hub let's check whether it is installed or not yeah it's finally installed okay download a newer image for python latest okay so uh finally we have a image let me just go in here and we'll search for images here so here you will see we have one python image okay so now what we can do we can just run this python image how we will run it uh as we have discussed already we can run it using Docker run and the one more thing which we will add here right now is hyphen ID and the image name which we have python so what does it refers to ital just server so I refers to interactive and T refers to the terminal so basically we will get the python interactive terminal which we usually get suppose if you are going in uh I open on another window of CMD I think yeah yeah this is the another window if I search for python so here you will see you you are getting this uh terminal window or that interactive cell of python if you will here write print hello then it will print okay so in this way we will get as well there also so let me just close it and now I just run this particular command okay so here you will see we are using 3.11.2 version that is the latest one if you will do something like print uh hello it will print okay so yeah if you want to do anything like suppose if I do import OS and print OS Dot pwde I think this is the command no it's not PWD something is the command which we use for the present voting directory let me just search for it uh if we go for uh OS Library python okay so let's open gigs for gigs okay so here you can see the CWD equal to OS dot get CWD it will print the current working directory so we can just copy it and I just paste it here okay and I just to print CWD okay so you you are saying like we are on this particular directory like the root directory okay so in this way you can use the python shell and all those things okay so it was a very uh quick tutorial for you guys so you learn basically about that it flag okay that interactive terminal flag okay so that's all for today's guys and in now next video we will be learning about how we can create the docker file and all those things and then we will create that images from that Docker file and then creating containers and running projects all those things okay we'll be doing in that particular video so that's all for today's videos I hope you liked it if you have any queries you can ask us in the comment section thank you for watching hello everyone uh in this video basically we will see some important content which are remaining from the basic commands video okay so basically in this particular video we will first see about the how we can uh run the container in the background okay these all thing which we'll see and also we will cover in this video like how you can start the container how you can stop the container so these are these are all things first we will see in the particular video in the next video we will cover that creating images then creating contents all those things okay so let's start with the video already in our previous video we have covered this one like we have created that uh images uh sorry we have pulled that image of python okay and now we will create the uh container of that image okay so just open the CMD uh let me go into that directory where I do all those things okay so now what you will need to do uh actually first we will see the images what are the images we have So currently you will see you we have on the python image right now and if you want to check for container So currently you don't have any container okay so the basic thing which we do usually uh to run the container so how we do it it's just simple Docker run and the particular image name so connected here we have the image name as python okay if you do python so what happened now if you will check for container so one container has been created and it is exited so what happened with this container created and then exited okay it's not running in the background okay it is now stopped so when you use this command uh Docker and python okay and also which we had covered uh in the last video the docker uh run hyphen interactive terminal and the image name so here uh we will just wait for five to ten seconds okay and I will just write the print hello is printed also something else if you do Class 2 and uh and if you do just pass here uh sorry indentation error we got if you do pass okay just control D okay so this thing you can do like you have created a student as well uh if you create the object of that class you can do that as well print S1 if you do yeah there you have the object okay so now we just exit okay now when we will see the uh this one so here you will see uh this one this is the container which is that okay uh exited about a minute and no no this one this one is the one just exited three seconds ago so we waited some time and then After exiting we it's showing three seconds ago if you again check it will show some more second that is 26 seconds ago and if you do just Docker PA so it shows the currently running containers okay so currently you you don't have any container running okay so to execute or to run the container in the background we have some different flags okay which we use so the very uh spatial flag we have is The Hyphen D that is the detach okay we use this flag to run our containers in the background so how we can do it it's so very simple to use and also you will learn about some uh what you can say uh one more flag that is The Hyphen iPhone name you can give any particular name to the uh container as well so how we will do it so if you want to do uh first I just do PSI funny I just remove these containers for now so how you can do it Docker RM and you have to just to provide this okay done again let me just copy this one okay okay let's check again okay we we don't have any content right now so now we will just uh create a container I need to run in the background how we can do it so you have to use Docker run and the flag which we'll use for now is it that is uh interactive terminal and the name we will use so I will give the name to the uh Docker is PS you can PC you can give it like that as well or like this as well it doesn't matter okay so I'm using this simple method that is PS without codes will use the hyphen D flag Dirty attach and here we will need you will need to provide the image okay the name of the image which you have pulled so image name is this python okay so here you will see some kind of long string it may be a Docker ID it uh sorry container ID it can be let's again search for Docker psyphen a so here you will see um the details about the container ID the image the command which is basically used when we do it interactive cell when we do it here you can see up it means it's running and the name you can say is PC which you had provided right now here okay if you do now Docker PS it will show you the running guidance So currently the running container is this one which is that okay that is 5D something is the ID which we have got already here okay so now moving forward uh if you want to execute that container how you can do it for that also we have the command that is exit means execute you can pronounce it like that like we have exec and here you will need to provide the itself that is uh interactive terminal flag not cell and then you will provide the name and after that you have to just give the which command you you want to execute So currently we want to execute this Python 3 okay so if you do Python 3 so here you got it you got the terminal that you can do print anything okay so in this way you can use the uh containers and you can run the containers in the background okay foreign so now what we will need to do uh later uh right now we will see uh how you can stop the container as well for now I just exit from this interactive shell and I'll just clear the screen and check for PS running and now I will do a stop so how you can stop Docker stop here you can provide the name of the container or just a container ID it takes some I approx 30 seconds of time for stopping the container okay just wait for it okay so now container has been stopped if you again go for PS something so here you will see there is no running containers for now if you do psyphenase so the container will be there again if you want to uh what we can say start the container how you can do it it's simple uh just instead of stop you can use this start okay so now if you go for PS uh that is running container so we have that this one up nine up four seconds again if you do 9 seconds 10 seconds 11 seconds 12 seconds okay so our container is running so I hope you got it uh how you can execute the uh command or how you can start the container stop the container run the Contour in the background so these were the some important content concepts of the docker okay which we had uh by mistake left currently now it is cover so in our next video we will surely uh do that one uh creating Docker file and creating image and then all those things particular okay so if you have any query you can answer in the comment section otherwise that's it for today's video and I will meet you in the next one thank you for watching hello everyone and now in this video we will talk about how we can create the docker file for the python image okay so here you can see the different uh keywords I have written for you all okay so these are the some keywords which we use for creating the docker file actually so in this particular video basically we will be will be creating the python image okay so uh here you can see actually the uh the description is also written for these keywords you can see the from keyword is used to use the base image okay what are the base image which we are going to use here so mostly in the from keyword we specify the base image for python we use Java for sorry for python we'll be use Python based image for Java we will we use open jdk for the Ubuntu will be us Ubuntu image okay so these are the base images which we get from the docker we will be using those kind of images okay and run command is also used to run some kind of commands which we which you want to uh run while creating the container and all and copy used to copy the files from the local file system to the docker image what they are used to set the working directory for the container actually okay and CMD is we use to CMD is basically used to specify the what are the commands you want to run or when that particular container runs or something like that happens okay so these are the some of the uh I think three to five uh commands or keywords which will be using in our Docker file okay so before starting the video or you should have a vs code installer you can use any uh any uh ID not ID it's just what do we say uh notepad or something like that okay or editor you can say so here uh I have this Docker uh Docker tutorial folder and I'll be creating one python image folder okay so let me just cancel all those things and now what we will be doing we will just create one Docker file okay you can do like this Docker file and keep it keep in mind like you should use only one capital D here not the name should be like this only okay so you here is the docker file has been created and let me create some app.pi as well okay so this is the python file and suppose you want to just print like this this is my first image okay cool so this is done suppose it till uh now we just want to pin this in our container like when our container will run okay now what we will be doing we'll be creating the docker file how we can do it you have to just use form and we from where I from which uh base image you want to use I want to use Simple python okay you can use from python after that you can specify the working directory for that particular container so I just want working directly to be app okay and also you want to copy all the files okay to the app here okay and next we'll be using the CMD okay now currently we don't want to run any kind of command okay that's why we are not using run here so in CMD what we want uh we want to use this line Python 3 and you can specify in a comma you want to run which file I want to run app.pi file okay so this one is done okay that much is fine to create the python image okay so now the further step is just to use to build that build image okay actually from the docker file so you have to just open up the terminal here you can click on this and click on this here Docker terminal and you have to go in that particular directory so we are currently in Python image so we are here in the directory and for building the uh image the command which we use is docker build and one hyphen T flag is used to define this some kind of tag like the default tag which you get is the latest so here you can Define any tag suppose like my first python app and in that also it should be only in lower case you cannot give the combination of a percussion lowercase in the tag name okay and then we will be using dot dot will be used to just uh get the docker file and then creating that image from that okay just hit enter and here you can see our image has been created actually and this one you can see exporting layer writing image this one okay naming my first python app this is done okay now I will just clear the screen and I will just run that uh particular image so image name was my I think my first python app so it's running so here you can see it is printing this is my first image okay and if you go on the docker desktop so here also you will see the name is this one it is just specifying that random name it specifies and the image name is my first python app and image also here you can see the my first python app okay so in this way you can create the python image now let's do uh some what we can say uh some kind of expand or not experiment just I write some commands actually here import OS okay and I want to just show you the actual uh directory in which directory that Docker is running okay so here we can write current dir is and here comma separator OS dot get CWD and here we will be using this one and again I want us to run the build image and I will build it okay and the container name I want to provide I want to provide name of container is iPhone iPhone name and it should be like uh uh what should be the name uh first pi first Pi c means first python container just hit enter and here you will see the this is my first image printing and currently I already slash okay and here if you will see uh here also like okay none it's showing we will see why okay tag is none okay okay no problem in containers if you see yeah engineer her name is first spicy okay the container name actually okay so uh now what we will do uh again if you want so we I just want to create one file here suppose I create one file hello.txt here and I just print a higher and I want to print the list of directories or files which are present in that documentary because we are using the copy here okay so it will copy all those things in the docker image so for this we can use OS dot get uh not get I think it's list dir yeah again we will just uh here I use some different tag list list I just do list image okay okay and now I run this using list image and the second Pi container enter and here you can see it is listing the all the uh what you can say um all the files and the current directory and the print statement is printing okay so in this way you can create the any python image which you want and suppose you want to uh send this file or something like that Suppose there is some kind of project which you have created in that file and you want to send to the other person so you can just create the image of that file and you can send it okay so in this way it works so I hope you like this video and that's all for today's videos guys and if you have any queries you can ask us in the comment section okay so that's it for today we'll meet you in the next video thank you for watching hello guys and now in this particular video we will see how we can create the docker file for the Ubuntu image okay so basically we'll be using all this command which you are able to see on my screen like from run copy work there CMD okay so basically we'll be using some of the commands from that and we will create one Ubuntu image okay from the docker file as we have already saw in previous video in the python we have done it so same thing which we have to do in this as well so what we will do will be just creating one uh directory with the name Ubuntu image and inside that let's create the file uh Docker file the name should be only like this and then what you have to do uh you will just uh use this one from okay and then what you have to do you have to just write the image name as the Ubuntu and then what you have to do a UV will use run command in this actually and we will update the image okay whenever the image will be created it will update it okay our Ubuntu will be updated and then we will be using CMD and then we will write some command like we can write who am I it will tell us the who is the current user the name of the user okay so now what we will be doing uh I'm already in this directory and we can do like this like Docker build hyphen T you can provide any tag name it's all depend upon you Ubuntu app and then we will use Dot and it will not okay so now it's donating okay PTA update also didn't take much time okay it takes usually okay fine uh let me just clear the screen open up the CMD okay you can do anywhere you can do on this terminalizer but I prefer doing on this so if you will do Docker images and here you will see Ubuntu app so this image has been created uh I guess uh let me just check what was the image name yeah Ubuntu app is the image name actually okay so now what we'll be doing uh we will just run this image Docker run and we'll provide some name as the my first Ubuntu okay and we will give it uh image name that is Ubuntu app yeah so here you can see the root so it is giving us the result root okay so uh like the command has been executed so which command has been executed uh this who am I if you will check in the containers so here you will see the command who am I and the image is Ubuntu app and the name is my first Ubuntu okay so uh now let's just uh change the command you can do any command like uh suppose if I do some comma and write some another command what will happen just check it was just to give us error because it will execute uh in a single command line I guess so it will give us error so instead of that uh we can try like this PWD only okay and we will create with the name we want to have two okay so it's done again open up the terminal and it will clear the screen and let's check for Docker images okay Ubuntu app 2 is there if you will do a Docker run uh hyphen iPhone name same name just give same name one two two and the uh okay so now let's hit enter so here you will see the present working diode the follow slash means it's in root directory actually okay so uh that's it for today's videos guys I hope you liked it and you got it how you can create the docker file for the Ubuntu image okay it's simple okay so that's it for today and I will meet you in the next video thank you for watching hello everyone now in this video we will see how we can create the Java image okay using the docker file okay so here are the some of the commands which you can see on this screen we have from run copy workday and CMD okay so basically we'll be using these commands Okay and we will create on Docker file we will create one python uh sorry one Java project as well and we will run that project okay and we will check the output in the docker like how we are getting so it's a very simple step to do uh for that again you will need to create One Directory uh let me just create outside this yeah here we can create that's fine Java image is there okay so you have to just create one Docker file fine and then we will be using next command we have is the work dir so basically we will Define the directory okay fine then we have uh copies there so it will basically copy the all the contents of the file or the current directory and then uh we will see uh we basically run one command let's uh uh I will explain it to you let me just write sample dot Java and then we will use CMD okay and we'll use Java comma sample okay so we are done okay Docker file is done so now let me explain you why I have written this sample.java so now I will just create one file with the name sample dot Java okay and I will just uh create the class with the name sample and then we'll be using public static void Main Java syntax is very lengthy r but it's fine we can do at the system dot out Dot println and then we will just print hello world hello world uh it's uh it's it's working fine okay cool so now what we'll do we will go into this directory in the Java image and we'll clear the screen and the simple thing which you have to do is they just compile this Java file so if you are a Java programmer you might be aware of that before actually running that uh like Java program we need to compile first because it's I think compile based programming language okay and then we get one file then we run that file then it is executed okay so we will just compile this one so we'll compile using Java C program sorry JavaScript command and the sample.java and uh we forgot semicolon it happens here okay so here you can see uh the file has been created and we have to just give the name sample and here you can see the result is hello world it's working okay it's fine so because it's working so now what we will do I will just explain it to you so basically the Run command is basically the command which is run when you create the uh when you run the image actually okay so uh it will just first compile and then what we are doing we are just running uh the executing that compiled code okay using this command Java and we are providing the file name as the sample okay that's it this is the only concept behind this okay fine uh what we will do uh we will first build the file uh build the image using this Docker file how we can do it job Docker build and we'll provide the tag name using hyphen T flag and we will write the name is my Java app okay just start at the end okay it's working it will take some time and something happened uh what we are getting uh sample dot Java comma not found okay fine because we have not written Java C here okay that's why it was just basic one let me again run okay now it's done finally and we will just clear the screen we will open up the CMD we will search for the docker images okay so here you will see my Java app has been created now what we will do we will basically run this image we will provide the name of the container as the uh what we can provide uh Java uh Java one okay fine it's fine my Java app is also we can give the image name okay let's see okay so here you can see we are getting the output as the hello world it's working fine it means like it's working perfectly if you want to check the container list so here you can see the using psyphen a and here you can see it's created just 11 seconds ago okay exit exited this one 10 seconds ago and the name is Javan okay fine again if you want to Let's uh we can uh we can do something else as well we can try to create calculator I will just copy the code of calculator y to write the whole code if you have code don't take it seriously okay so here what we can do uh I have just copied it and we will just paste it here Ctrl V and the change the name as sample again I will just first run this app let's see how it's working Javas Java C ycle dot sample dot Java let me again delete this one okay and let's run Java sample okay I will choose plus I will 12 11 okay it's perfectly it's working fine okay so now what we will do we will be just uh again creating image Docker build hyphen t Cal C dot okay fine and now what we will do uh will be on Terminal let me just clear the screen we will check for Docker images and its calcium is there uh it's created you can see 12 seconds ago we will just run this application we will do Docker build sorry sorry we will do uh Docker run we will provide the name one name like calci app in Java okay we'll provide the name of the application as my job sorry what was the name calci is the name fine okay let's see so here you can see choose an operator because we are getting something else uh we will need to run this application in the background guys okay okay we can try with uh detach mode okay let me just clear this screen uh we can do Docker run iPhone IIT hyphen iPhone name uh let me first check the name whether any your container is created okay we will delete this one uh Docker RM you can delete the container using the container ID and the RM command okay let's do now it is related uh yeah I guess yeah it's still later now so now what we'll do we will run the uh image that calcium is so we will do Docker run hyphen ID hyphen iPhone name we can give it as the calc C app again we will do hyphen D for inday touch mode it means it will run in the background again calcium is there let's hit enter let's do Docker PS to check yeah so here you can see it's running in the background okay fine uh let's try to execute Docker execute hyphen ID and the uh container name is we have container name as Kelsey app Cal C app okay okay but here we need to provide the command name actually so we can provide a Java sample let's let's see what happened just okay so choose an operator so we will choose operator S Plus enter the first number 12 13 and it's working perfectly fine so in this way you can just uh execute these type of programs in the background okay so that was a very simple actually so now uh if you will check again if I'll clear the screen and again run this one and I choose approach into first number 12 12 144 yeah cool create the screen it means it's working fine and to stop the container you can use uh here the container is running so to stop the container you just have to provide the command Docker stop and you can provide the container name and the or you can provide the uh what you can say um this one the name as well then it will stop it and if you will check so here no container is running okay it's perfectly fine so in this way we can do all these things so it was a very uh good video I guess uh but you guys will tell how it was okay so if you have any query you can ask in the comment section okay and uh that's it for today and I'll meet you in the next video thank you for watching hello everyone and now in this video we will see how we can push the image to the docker Rob ok so uh these are the some of the steps which we have to follow to push the whatever we create the image for the docker okay as uh it will be very beneficial suppose if you want to send some code or some part of like some of your project to someone else which works on a particular uh environment suppose that project works on python 2.6 only okay so then you can create the image of that and then you can send it to your friend or like you can post it on the docker Hub and from there your friend can access it okay so this is the very uh simple process so for that first of all you will need to go on this particular website that is Docker hub it will like hub.docker.com okay and here if you don't have any account then for that you will need to register first it's very easy process to register actually I have already a account on it so what we can do I will just sign up sign in here so this is the user which is required to push the image to the docker up okay So currently we are here on the dashboard okay so now what we will be doing uh like we had created the image that is calci okay and now but uh we can do uh we will create one more image uh for this project okay that sample.java okay we have already the docker file here we had done it in our last video okay so this is the docker file so what we will do we will basically create one image okay so how we can do it it's a very simple Docker build hyphen T okay and the name which you want to provide suppose I want to provide its name to calculator Java okay this time I want to provide and you have to just use Dot okay so you can see image is being created now if you'll search for Docker images so here you will see calculator Java has indicated and the tag is latest because we have not provided any kind of tag to it that's why it's showing latest okay so just uh clear the screen and again I'm let me just search okay so this is the image has been created okay so now here if you will check um here you will see like the whatever the image we create we don't provide the actual the format of that so we need to change the format using this command like Docker tag and whatever the image name if version is present then we write the version name and then the uh the name in The Format in which uh through which we can post that image to the docker app okay so that how we can do let's see so it's uh just you have to provide Docker and then you have to provide the tag and the name of the image which you have created so here the name is calculator Java okay so Cal queue later Java okay and the name will be followed by your username so my username is 987456 Slash and whatever the name which you want to give suppose I want to give it as a calculator app and I will provide the version so I will provide the version Ms version 1.0 okay let's hit enter and now if you will again search for Docker images you will see one image has been created with the name and the tag is version 1.0 okay so now what you will need to do uh you will need to just uh do Docker login okay to push that image to the docker so Docker login is required okay so here it is showing me like I'm already uh authenticated here okay so if I will open up some new terminal and if I will search Docker login okay it's already uh my account is already authenticated that's why it's not asking me for the username and password but when you will do it it you will need to enter your username and the password okay so it's fine uh now what I will do the last command which we'll use is Docker push and whatever the image name which we have so we have this image name we will need to copy this hole okay so okay push and the version which you will need to provide it and the version name is uh version 1.0 okay so here we're done so the post refers to repository this so it will push our project to on the docker okay let's wait it will take some time uh so it's soft 323.6 MB okay so here you can see it is showing me mounted from ayush disk calcium okay so is there also any no actually I had already pushed one image with the same name for the testing that so it's showing that so till the completion I just pause the video okay I will come back when this will complete here you will see now it is pushed okay so if you will check here uh if we reload this okay so here we you will see uh uh one image it's pushed here okay and this is the same name which we had given like calculator app okay and if you click on the public view you will get to know how you can uh pull this image okay so this is the command which we use to pull the image actually okay so that is the simple one okay so uh you'll might you might get confused why mounted and all so to clear all this uh if you want to you can give it like this colon and then version 1.0 but now I don't want it just a hit dot okay so let's just clear the screen if you'll check for Docker images so here you will see this one is this this okay oh sorry not this one yeah here we have hello python okay so this is created now we can just push it using Docker push and the name which we have is uh iOS 987456 slash hello python okay so here you can see it is preparing and waiting it will take some time okay okay it is now taking all the from library pattern fine okay I just pause okay and we'll wait let's pause okay so here you can see it is just pushed all those things if you will check again on the repositories here in this section and here you will see Hello python is there and if you click on public View so this one is the command which will be you using okay so now what we will do I just go into the dock images and I just remove this one uh Docker RMI remove image and the name of the image should be okay okay now removed if I can check okay fine there is no images so now what we can do uh where is the yeah instead of RMI we can do not pull okay so now it's pulling the resource from the docker up okay status downloaded if you will again check for Docker images so you will see we have this one and if you want to run you can earn it using Docker run and the Ctrl V if you do this one and the here you can see the content whatever the content we had written uh it's showing us here if we'll check app.pi so this is the this is first image current director is printing and the all the files which are present there okay so in this way you can push the image to the docker you can pull the image from the docker up okay and also this will help you to like um what we say you can easily share your project to other person as well okay so that's it for today's videos guys I hope you liked it okay if you have any queries you can ask in the comment section that's all for today's video and I'll meet you in the next video thank you for watching hello guys and now in this video we'll be talking about the docker compose okay so this is the very uh interesting topic and till now we have actually covered the very uh all the basic concepts of the docker like from creating uh for pulling images from the docker to pushing image to creating your own custom image everything has been cleared till now and now we will be moving towards some Advanced topic that is now the current we have is the docker compose okay so uh let's see uh what are the information about the docker compose on the documentation so uh here you will see uh so here you will see the uh overview of the docker compose one Docker composes how you can install try compose everything all the information is here okay so uh let me tell you first about the what exactly the docker comes and why it came in the role okay just think about the web application okay suppose if we have a one web application if we come here and if I create some suppose this is one of the website okay this is one website okay and it's uh support ecommerce website or any uh Dynamic website you can say it will be the front end and the backend as well okay so what will happen if you want to just uh run this application in the containers device with the through uh with containers and in Docker so in that case you will need to create two different images one for the front end and one for the back end so in this way like it will be very difficult to manage both the containers at a time okay so that's why that Docker compost came in a role so with the help of that we can run these two containers at once and we can manage it easily so this is a very a basic and fundamental concept of the docker compost will come up come on the documentation part and here it will run sorry if you will read uh so here you can see the compose is a tool for defining and running multiple container Docker applications okay with compose you use yml file so we basically use one viable file that is Docker compose dot yml it is the one file in which we Define all these things like uh images what images you have to use and all the like connecting parts all those kind of things it is managed by the docker compose file that is dot yml file okay so with this file uh we manage the containers here also you can see here it is written like with a single command we can create and start all the services from your configuration okay so this is also one of the parts so uh if you will come up on here you will see how you can install compose try compose all those things so we will cover all these things in our uh next video so uh that was the basic overview of the docker compose and what we got to know is the dot ymf file is first important file and it is basically used to run the multiple containers at a time if we need uh to like if you need some more information you can just search for Docker compose and any medium you can search okay so here you will see many people post about the docker compose what is this or you can read this uh blocks by someone for him okay so here you can see all those things okay so uh that is the uh basic overview of the docker compose I hope you liked it and we'll be surely updating uh in our next video the further part of the docker compose so if you have any queries you can answer in the comment section so thank you for watching and I'll meet you in the next video thank you so much for watching hello guys and now in this video we will see about the docker compose installation okay so before starting the video there is a good news for you like if you are using Windows and the Mac OS then uh it comes already preinstalled when you install the docker in your system okay so currently uh in this video we will be seeing uh how you can install in the Linux system if you are using the docker in the Linux system then you will need to uh install that okay so for that you will need to just search Docker compose if you search your installation and here you will come upon on the official documentation of the docker and here you will need to open a pair and here you can see the overview of the page of this one uh Docker compose and here you can read the documentation about all those things like for Linux Mac they are the same to install the docker desktop and for uh Linux as well like it is required I guess uh yeah here you can see if you have already installed Locker desktop you can check which version of compose you have by selecting about Docker desktop from the docker menu okay no one need no need to do all those things let's just quickly check the docker version in our PC so here if you'll do Docker compose hyphen V so here you will see we are using the version 2.15.1 uh Docker compose okay so in your PC as well it might be same or it might be different okay so let's see uh how we can install in Linux so for that you will need to come up on here and you will need to just click on this you can install the compose standalone and here you will see the some of the commands which will be used to install the docker compose in the system so here you can see the call command is there and there they are provided the some links and also these steps what are the steps you will need to take to uh install the docker compose and also this pseudo command is there for I think creating symboli links is there this is uh for the Linux and if you will go scroll down and here you will see for the Windows Server as well they have given the documentation so you can read it and you can install the docker compose easily in your system so if you are using Windows and Mac then it's fine otherwise you can install in both of these DirectX and Windows Server okay so that's it for today's and I'll meet you in the next video thank you for watching hello guys and now in this video we'll be talking about how we can create the docker compose.yml file for this uh Docker file okay so basically we will be creating that file that will be the simple one for this video for now okay in the next video we'll be look for some complex okay where we can manage the ports and all everything so Docker compose dot yml you have to write like this and it has also some kind of syntax and semantics to write this file just like the docker file which you have you are running from first from then run CMD copy all those things so similarly in Docker compose also we have some syntaxes so what is the syntax let's see uh we will just write okay so the very first is we need to provide the version okay version basically which version of Docker compose you want to use So currently we had checked so it's our 2.5 so we will write it 2.5 and then later on you have to provide the services so here you will provide the services and next you will provide with the service name so service name we can provide anything like uh let's provide ubu okay it's one two or Ubuntu image like this we can provide okay and next you will need to provide some container name okay so basically we'll be uh creating file for building the image and then running the ad container do those things okay so how you can do it now you have to just provide container underscore Name colon space and let's write something my container okay and next you will need to provide for build look look for the building of with the docker file we use build hyphen T then the uh tag which we want to provide and the context that is the directory in which directory we have so for that here also you will need to provide the context actually so context will be the dot and the next Docker file so Docker file will be the docker file which we have that is this one and that's it and now we are going to go so you will need to just enter the docker compose up and here you will see it is building so here you can see and now uh container my container created attaching to my container my content is printing hi hi why because so if you will check here so we have printed Eco High that's why it's showing High okay if you just clear the screen and you check for the images so here you will see uh image might be created with yeah here you can see Ubuntu image one two image with the name it is created okay and if you will check for the container as well let me open up the CMD in the full screen mode if we'll check for Docker psyphenase so here also you will see the one container just 35 seconds ago had created okay so in this way you can write the uh yml file of Docker compose so this is the basic Syntax for the version and this is the service this is the service name and these are the some key value pair which we need okay for building the uh image we need this one for ports to defining ports and all we do we write for the ports and these things okay so in the next video we will see some more uh complex so that's it for today's videos guys and I hope you liked it and if you have any queries you can ask in the comment section thank you for watching I'll meet you in the next video thank you so much hello whether now in this particular video we will see how we can create the python server using the docker company so for that you will need to First create One Directory let's create a python server and inside that we will need to create first one dock of file so it's very simple you can just write like this Docker file and in that we'll be using uh python as a base image okay and also I will create some file here like I will create one hello Dot txt and here I will just write hi this file is inside the python server directory okay fine cool so now what we will need to do you need to First copy all these files I want this to copy all this in slash app and work the IR should be as well slash app okay so let me just check it is correct okay fine now we will write like this work there at first and then correct cool so now our Docker file is ready now we will need to create one Docker compose file okay so how you can create docker compose dot yml okay so inside that you will need to write the version you need to specify the version so version will be uh 2.4 okay then Services you will need to provide services so inside Services you will need to write the service name uh you can write service name as my first server okay and inside that again you will need to write the container name so you can write like this container underscore name colon server nice and then command which we'll be using to run the uh server so the command which we have is Python 3 hyphen M HTTP dot server and the port I will give it as one two three four okay and here you will need to allow the ports from your system as well so for this you will need to write minus one two three four colon one two three four okay now you will be writing the uh code for the build which we use to build the image so build will be as simple as it is so we'll need to provide the context so contest will be the current directory and then the docker file you will need to provide the docker file as well so which we have Docker file as this one Docker file okay you have to just save and now we will run the docker compose up so for that you will need to go into that directory also you know python image CD python server PLS screen Docker compose up okay so here you will see how we are getting some techno string key in Services dot my first result port01234 okay uh for this we will need to just remove this space I guess so now it will work yeah cool so as you can see python service default containing server key container server created attaching to server all those things are working just check okay now let me just open up the Chrome and if I go on localhost one two three four and here you can see directory listing for this Docker composer value click on hello.txt here you will see this file inside of python server directory okay so in this way you can create the python server using the docker compose so here you can see the everything you can see here okay so that's all guys for today's video I hope you liked it if you have any query you can answer in the comment section thank you for watching I'll meet you in the next video hello guys and now in this particular video you will see how we can install the Dockery now this Ubuntu machine okay so it's very simple uh you just have to go on the official documentation of docker and we will search for the install uh Docker on Ubuntu okay and then we will go on this particular website and we will open up one terminal here just to go now it's fine let me increase the size yeah now if you will see here uh installation method so like Peter Quizlet is what you should have this Ubuntu like we have already that one and you will need to uninstall the previous version if you have so using this command you can just on install the previous version so here you will need to enter your password and no packages there so no install on installation okay later if you will go on go below you will see installation method you can install Docker engine and different ways depending on your needs so it is Docker desktop or apt repository or manually okay so we'll be using this apt repository so first we will be going to run this command so or you can do it just paste that command here okay it will update okay next we have to run this command okay let me just clear the screen okay uh run this command code so just to do yes okay next you will need to do this one so you do first we'll run this command let me be complete clear the screen again paste that one hit enter okay again you copy this command paste it hit enter okay again this command uh let me just copy this and paste it here okay cool uh okay next what we have to do you have to just do the Eco control C TRL V okay then again you have to update then we'll be using this copy we'll paste it it will take 414 MB of space it will take some time then we will finally run the hello world uh container okay let's see how much time it takes so it will take approx one minute of time again so here you will see you uh after running this command this command downloads a testament runs it in a container when the container set prints a confirmation message and exists exit okay so we will do that as well so one minute of approx time you can just fast forward the video at this point relax so if you want to install from the package you can do that as well so many methods are there actually then if you want to uninstall you can uninstall like this as well okay it's unpacking everything let's wait okay now it's finally done now I just clear the screen and run this command now it will fetch okay so as you can see hello from Docker this message so your installation appears to be working correctly so we have successfully installed Docker in our Ubuntu machine if you want to check the version you can use like this so current version we have 23.0.3 okay so this is the very uh like basic uh thing like you can do this from the official documentation later on we will see uh how we can install the docker desktop in Ubuntu machine so that's it for today guys I hope you like this video if you have any query you can also in the comment section thank you for watching hello guys and now in this particular video we will see how we can install the docker desktop on our this Ubuntu machine so it's also very simple step uh we will basically follow the official documentation which we have from the docker so you have to just search install Docker desktop or Ubuntu hereby app and then you you have to click on this first link and then you will come upon on this page and here you will see the information like install Docker desktop on Ubuntu and you will you will need to download this DB package the package okay and the prerequisite as this you can see like 64bit version should have like you should have this one and also uh terminals you should have genome terminal and everything you should have okay so let's do how we can do it and if you have already installed the uh Docker desktop in our PC or in our this Ubuntu machine then you will need to First remove that one and then you can go forward so let's do uh do uh I will open up one terminal here okay so first thing which we have to do is the install is the package I mean download so it's a 463 MB uh it will take two minutes of time till then I just pause the video okay so here you can see we have downloaded this dot package so now what we have to do uh you will need to first update so sudo uh uh sudo apt get update okay you will need to enter your password that's it and it would also take some time but now it's done okay now what you have to do you have to uh change your directly to the downloads how you can do it just CD and the name of directory that is downloads okay I have already done it so now what we will be doing uh we uh you will use this command sudo apt get installed uh i n s t a 12 install dots and then we will use the name what is the name okay desktop so do just hit tab okay why it's not showing let me just check a list okay so here we have to write AMD 64. and then here the version name we have 4.18.0 4.18.0 hit enter and it's working so here you will see at the end of installation I pictured displays Android to installing a downloaded package we ignore the error message okay just hit enter y and to run the docker Dexter you can use this command system CTL okay I just wait for the installation until then I just pause the video okay so we have installed the docker desktop successfully to run the docker desktop for what is the command so we have this one uh where it is uh this one not this one yeah this command we have just paste it and hit enter it will start the docker desktop and here you can see all those things you have to accept okay and it will start and here you can see quick weekly tips it will give you some weekly tips and this is the setup which you want to do uh you can do it as a student and local development and that's it or you can just skip this part it's showing now Docker engine stopped okay uh let me now close it and let's again uh here you can see to stop the docker you can use this command hyphen you just stop okay and also you can run it from here from all the applications you have just search for Docker desktop and hit on this and then it will start okay it's uh stopping again and again let me check okay guys so here is a solution for uh why Docker is being stopped so here you can see uh for reusing in Ubuntu we need to actually uh enable these things you can read this one KVM support and all so actually I'm also running on the VM that's why it's happening uh and then you can just check the another solution let's check if any other solution we have okay okay uh this one I had the same problem with this with Windows 11 as main host and offer desktop okay you need to enable nested virtualization support which is available on Windows on version greater than 6.0 also it's important to mention it will disable the hyper B virtual machine at the windows okay okay so in order to enable nested VT this in Windows you need to step by step guide so you can follow these steps okay from the this stack Overflow guide and then you are good to go so that's all for today's guys and I'll meet you in the next video thank you for watching
