With timestamps:

00:00 - hello everyone welcome to the
00:02 - programming knowledge
00:03 - i hope you are all doing well today
00:06 - let's understand filtering of events
00:10 - in every game we did not have to handle
00:12 - all the events
00:14 - because there are often alternative ways
00:17 - of getting the information
00:19 - that the event might give you for
00:22 - example
00:24 - if you are using pygame.mouse.getpos
00:29 - you will not need to respond to the
00:32 - mouse motion event
00:34 - pygame dot mouse dot kit pos will give
00:37 - you the position
00:38 - x y of the mouse as we have seen already
00:40 - in the hello world program
00:43 - occasionally you also need to suspend
00:46 - the handling of certain event right if
00:49 - you
00:50 - were to play a cutscene movie
00:53 - between levels you would probably want
00:56 - to ignore any
00:58 - input events until it is finished right
01:01 - the pygame event module has a number of
01:04 - function
01:05 - to help you just do that you can block
01:08 - event from the event queue with the set
01:12 - block function
01:14 - let's uh take a mouse motion event to
01:17 - understand it better
01:19 - so we can pass mouse motion event as a
01:22 - parameter to the set block
01:25 - we can write uh pygame dot event dot set
01:28 - underscore block then we can pass here
01:30 - mouse motion
01:33 - if you pass in a list of event type
01:37 - all those event will be blocked so let's
01:40 - suppose
01:41 - i have to disable key down and key up
01:44 - event so
01:45 - we can put this to event in a list and
01:48 - pass it as a list to the set block as a
01:52 - parameter
01:54 - now if you want to unblock
01:58 - all the events pass the value
02:02 - none to the set block so if we pass
02:06 - none then all the event
02:10 - will be allowed or unblocked
02:14 - the opposite of setblocked is set
02:17 - allowed
02:17 - we select the event that should be
02:20 - allowed it also take a single event type
02:24 - or a list of event type but if you pass
02:26 - in the value of none
02:28 - it effectively block all the event
02:33 - you can ask pygame if an event is
02:37 - currently blocked with pygame.even dot
02:41 - get block which take a single event type
02:44 - and
02:44 - it return it is blocked or not
02:51 - now let's understand about
02:55 - uh posting events
02:58 - generally it is
03:02 - by game that creates all the events for
03:05 - you
03:06 - but you can create your own events
03:10 - you could use this ability to play back
03:13 - demos
03:14 - or similar the effect of cat walking
03:17 - across
03:18 - the keyboard
03:21 - to send an event you first construct an
03:24 - event object
03:25 - with pygame dot event dot event
03:28 - and then post it with the pygame dot
03:31 - event dot
03:32 - post the event will be placed on the
03:36 - end of the queue ready for retrieval in
03:40 - the event group
03:43 - so here it is a
03:48 - very simple function call
03:51 - you can call like pygame.even.event and
03:54 - you
03:55 - have to pass
03:58 - a certain parameters so the event
04:00 - constructor takes the type of event
04:02 - such as uh let's say key down
04:08 - followed by the values the event should
04:10 - contain
04:12 - since here we are simulating the key
04:14 - down event
04:16 - we need to supply all the value that
04:18 - event handler
04:19 - would expect to be there if you prefer
04:23 - you can supply this value as a
04:25 - dictionary as well
04:27 - so here like key is equal to k
04:30 - underscore space mod is equal to zero
04:33 - unicode is equal to
04:35 - space so here uh so
04:38 - here all this thing key mod and unicode
04:41 - i have
04:42 - discussed in the previous part of the
04:43 - video
04:46 - so if you
04:50 - find difficulty then please watch the
04:53 - previous lecture so if you find
04:56 - difficulty to understand then please
04:59 - watch the previous lecture of the events
05:04 - in addition to simulating pi game
05:06 - generated event you can create a
05:07 - completely new event
05:10 - all you have to do is use a value for a
05:12 - event that is
05:15 - above user event
05:21 - all you have to do is use a value for
05:23 - the event that is above
05:25 - user event user event is the maximum
05:28 - value that pygame will use for its
05:30 - own on event ids
05:35 - this can sometimes be useful if you want
05:38 - to do something in
05:39 - event loop before you can you go on to
05:42 - draw to the screen
05:48 - so this is an example of user event
05:52 - to respond to a cat walking over the
05:54 - keyboard
05:55 - so here cat on keyboard is equal to user
05:58 - event plus 1 because we have to take
06:00 - the value greater than user event
06:03 - which is the maximum value that pygm
06:05 - will use for its own event id right
06:08 - so my event is equal to pygame dot
06:12 - event dot event here i am passing
06:16 - cat on keyboard and message is bad cat
06:20 - and you here we have to post so pygame
06:23 - dot
06:23 - even dot post my event
06:32 - now
06:34 - the handling of the user event is done
06:36 - in the same way as the usual
06:38 - event that pigram pygame generates
06:43 - just we have to check the event type to
06:45 - see if it is matches your custom event
06:48 - so here you can see that for event in
06:52 - pygmy.even.get which is similar to which
06:55 - we have
06:55 - already have seen that if event.type is
06:59 - equal to
07:00 - cat on keyboard we can print that
07:02 - message event dot message
07:08 - so i hope you are able to understand
07:11 - how to handle events
07:15 - as well as we have seen
07:18 - how to filter out the event and how to
07:21 - create your
07:22 - own event and
07:25 - try to simulate the pi game event as
07:28 - well as you can create your
07:30 - own event using a proper
07:34 - pie game functions so i hope
07:38 - you are able to understand the event
07:41 - completely
07:43 - so in the next lecture we will see
07:46 - opening of a display
07:50 - we have seen already in the hello world
07:52 - program
07:53 - example but pygame has a variety of
07:57 - option for display
07:59 - so we will see some varieties of
08:03 - option available in pygame so i hope
08:07 - you so i hope
08:10 - you are all able to understand the today
08:12 - lecture
08:14 - and thank you thank you guys

Cleaned transcript:

hello everyone welcome to the programming knowledge i hope you are all doing well today let's understand filtering of events in every game we did not have to handle all the events because there are often alternative ways of getting the information that the event might give you for example if you are using pygame.mouse.getpos you will not need to respond to the mouse motion event pygame dot mouse dot kit pos will give you the position x y of the mouse as we have seen already in the hello world program occasionally you also need to suspend the handling of certain event right if you were to play a cutscene movie between levels you would probably want to ignore any input events until it is finished right the pygame event module has a number of function to help you just do that you can block event from the event queue with the set block function let's uh take a mouse motion event to understand it better so we can pass mouse motion event as a parameter to the set block we can write uh pygame dot event dot set underscore block then we can pass here mouse motion if you pass in a list of event type all those event will be blocked so let's suppose i have to disable key down and key up event so we can put this to event in a list and pass it as a list to the set block as a parameter now if you want to unblock all the events pass the value none to the set block so if we pass none then all the event will be allowed or unblocked the opposite of setblocked is set allowed we select the event that should be allowed it also take a single event type or a list of event type but if you pass in the value of none it effectively block all the event you can ask pygame if an event is currently blocked with pygame.even dot get block which take a single event type and it return it is blocked or not now let's understand about uh posting events generally it is by game that creates all the events for you but you can create your own events you could use this ability to play back demos or similar the effect of cat walking across the keyboard to send an event you first construct an event object with pygame dot event dot event and then post it with the pygame dot event dot post the event will be placed on the end of the queue ready for retrieval in the event group so here it is a very simple function call you can call like pygame.even.event and you have to pass a certain parameters so the event constructor takes the type of event such as uh let's say key down followed by the values the event should contain since here we are simulating the key down event we need to supply all the value that event handler would expect to be there if you prefer you can supply this value as a dictionary as well so here like key is equal to k underscore space mod is equal to zero unicode is equal to space so here uh so here all this thing key mod and unicode i have discussed in the previous part of the video so if you find difficulty then please watch the previous lecture so if you find difficulty to understand then please watch the previous lecture of the events in addition to simulating pi game generated event you can create a completely new event all you have to do is use a value for a event that is above user event all you have to do is use a value for the event that is above user event user event is the maximum value that pygame will use for its own on event ids this can sometimes be useful if you want to do something in event loop before you can you go on to draw to the screen so this is an example of user event to respond to a cat walking over the keyboard so here cat on keyboard is equal to user event plus 1 because we have to take the value greater than user event which is the maximum value that pygm will use for its own event id right so my event is equal to pygame dot event dot event here i am passing cat on keyboard and message is bad cat and you here we have to post so pygame dot even dot post my event now the handling of the user event is done in the same way as the usual event that pigram pygame generates just we have to check the event type to see if it is matches your custom event so here you can see that for event in pygmy.even.get which is similar to which we have already have seen that if event.type is equal to cat on keyboard we can print that message event dot message so i hope you are able to understand how to handle events as well as we have seen how to filter out the event and how to create your own event and try to simulate the pi game event as well as you can create your own event using a proper pie game functions so i hope you are able to understand the event completely so in the next lecture we will see opening of a display we have seen already in the hello world program example but pygame has a variety of option for display so we will see some varieties of option available in pygame so i hope you so i hope you are all able to understand the today lecture and thank you thank you guys
