With timestamps:

00:00 - in this video we will talk about
00:01 - operator overloading in Python now you
00:05 - might already know that everything is an
00:07 - object in Python so when I want to know
00:10 - the type of this number two it's going
00:13 - to show this kind of output and this
00:15 - means that two is an object of the class
00:19 - int now when I once again want to know
00:23 - the type of let's say 2.0 it's an object
00:28 - of class float when I want to do the
00:32 - same operation with the string this
00:35 - string is an object of class string so
00:39 - everything is an object in Python now
00:42 - have you ever wondered that when you do
00:46 - two plus two it's going to give us the
00:49 - addition of two numbers and when I add
00:53 - two strings let's say two and then I am
00:57 - going to use the same operator which is
00:59 - plus operator with the other string it's
01:02 - going to give me the concatenation of
01:05 - these two string values so the same
01:09 - operator plus is working differently
01:11 - with different type of objects the same
01:16 - you might have observed with the
01:19 - multiplication operator which is this
01:21 - asterisk so when I use this asterisks or
01:24 - multiplication operator with a string
01:26 - and let's say I write three here it's
01:29 - going to print this given string three
01:31 - times but the same operator when I will
01:34 - use with the two numbers it's going to
01:36 - give me the different behavior which is
01:38 - the multiplication of these two numbers
01:41 - so the same operator Asterix is
01:43 - functioning differently with different
01:46 - kind of data or in other words we can
01:50 - say that this Astrix operator or this
01:54 - plus operator are overloaded for a
01:58 - different kind of objects so whenever
02:01 - this plus operator is used with two
02:04 - numbers it's going to give us the sum of
02:07 - these two numbers and whenever this
02:09 - operator is used with the string it's
02:11 - going to give us the concatenation
02:14 - of these two strings so both these
02:16 - operators are overloaded for handling
02:19 - different kind of data so this is the
02:22 - overloading of the built-in operators
02:26 - now we might also think that if this is
02:29 - possible can we overload the operators
02:34 - by our custom classes so let me create a
02:37 - class and I'm going to name it as the
02:41 - number class which is going to take one
02:45 - argument so let me define a constructor
02:47 - here so underscore underscore init
02:50 - underscore underscore and this is going
02:53 - to take one argument which is the number
02:55 - and I'm going to just write self dot num
03:00 - is equal to num so this is the simple
03:03 - class which we have created and now I'm
03:06 - going to create two instance of the same
03:09 - class so number and I'm going to give
03:12 - the number one let's say here and then
03:15 - I'm going to create a second object of
03:17 - this class and this time I'm going to
03:19 - give the number two here so is it
03:22 - possible that we can use let's say and
03:25 - one plus and two so let's try this and
03:29 - it's going to give us this error which
03:31 - says unsupported operand type four plus
03:36 - number and number so because Python
03:39 - doesn't know how to use this plus
03:41 - operator with your class objects it's
03:44 - going to give us this error which is
03:46 - unsupported operand type and whatever is
03:50 - the operator you are using so it turns
03:52 - out that we can overload these kind of
03:55 - operators in Python by implementing some
03:58 - inbuilt methods in our class so we
04:02 - already know that whenever we want to
04:04 - implement a constructor in Python we use
04:08 - this init method so I'm going to create
04:11 - a very simple class and I'm going to
04:14 - name it as a and this will be a blank
04:17 - class so this is a very simple class in
04:21 - Python and when I use a dir function
04:25 - which is a built-in function
04:27 - with this class let's see what happens
04:30 - so I'm going to just press ENTER and
04:32 - it's going to print some methods here
04:35 - which are inbuilt method so here not all
04:38 - methods are visible so I'm going to
04:40 - assign this value of dir a to a variable
04:46 - a and then we will see in the right-hand
04:50 - side in this inspector here and this is
04:53 - the a variable and you will see the list
04:55 - of all the inbuilt methods which are
04:59 - associated or which you can implement
05:01 - them so for example we have implemented
05:04 - the init method in order to have the
05:07 - functionality similar to constructor but
05:10 - there are other methods here too so
05:13 - there is a STR method or le method which
05:16 - is less than method or any method which
05:19 - is not equal to method and many other
05:22 - methods which we can implement here in
05:25 - our class so now I have given enough
05:29 - theory to you and let's try to see with
05:32 - an example how to overload an operator
05:36 - in Python so here I have created a class
05:40 - which I call circle and this takes one
05:44 - argument which is the radius of the
05:46 - circle and I have created the setter and
05:49 - get a method for this radius variable
05:52 - and in the third method I am just
05:55 - calculating the area of the circle using
05:59 - the radius and I have also used a
06:02 - inbuilt module which is math in order to
06:05 - get the value of pi so using this
06:08 - expression I am just calculating the
06:10 - area of the circle now I have created
06:13 - two objects of this class with two
06:16 - different radiuses so in the first
06:19 - object I have given the radius to and in
06:22 - the second object I have given the
06:23 - radius 3 and from the theory which we
06:26 - have learned till now we already know
06:28 - that this expression will not work with
06:32 - these two objects so when I run this
06:34 - code it's going to give me the error
06:36 - which says unsupported operand error so
06:40 - now we are going
06:41 - to overload this plus operator in this
06:43 - circle floss now in order to overload a
06:47 - particular operator let's say plus you
06:50 - need to implement associated method in
06:54 - your class so with this plus operator
06:56 - there is a special method which we need
06:59 - to implement in our class and I have
07:02 - given the list of all the methods which
07:04 - is associated with the operators so with
07:07 - the plus operator you need to implement
07:10 - this special method which is underscore
07:12 - underscore add underscore underscore in
07:15 - order to overload - you use this method
07:18 - in order to overload the multiplication
07:22 - you use this method so here is the
07:25 - operator which we want to overload and
07:28 - here I have given the method name which
07:32 - you need to implement in your class in
07:35 - order to overload this operator in
07:38 - Python so there is this list which you
07:41 - can use with all these operators so you
07:44 - can overload the mathematical operators
07:47 - in Python you can also overload the
07:50 - bitwise operators in Python like and or
07:53 - or bitwise right shift orbit wise left
07:58 - shift and also you can overload the
08:01 - comparison operators in python using
08:04 - these associated methods with these
08:08 - operators so now we want to overload
08:11 - this plus operator so we will implement
08:13 - this add method into our class so let's
08:17 - implement this add method into our class
08:20 - and implementing this method is really
08:22 - simple you just need to define a special
08:26 - method which is underscore underscore
08:28 - add underscore underscore and this add
08:31 - method is going to take two arguments
08:33 - one is self you already know and the
08:37 - other is the object of the other
08:40 - instance so this second argument is the
08:43 - object of the circle class and now
08:46 - inside this method I am going to just
08:48 - return first of all I will just use the
08:52 - circle as the constructor
08:54 - and what I want to do I want to add
08:56 - let's say the radius of the two objects
09:00 - which are provided one is the self
09:03 - object and other is the object which is
09:06 - provided using this argument so I am
09:09 - going to just say self dot underscore
09:12 - underscore radius plus the circle object
09:16 - radius so let's use the circle object
09:18 - and then dot and then underscore
09:21 - underscore radius so basically I'm
09:23 - adding the radius of the two objects one
09:28 - is this circle object and other is the
09:31 - radius of the self which is the current
09:33 - class so as soon as you implement this
09:36 - method ad using these two arguments then
09:40 - this operation is going to work in
09:43 - Python so because we have overloaded the
09:47 - plus operator using this add method now
09:51 - this operation is going to work so let
09:53 - me just assign the addition of these two
09:57 - objects into a third variable and this
10:00 - variable I'm going to name it as c3 and
10:02 - using this c3 let's say I want to print
10:06 - the radius of the circle so I'm going to
10:10 - just use the print method and then I'm
10:14 - going to use the c3 object and I'm going
10:18 - to call our get radius method from this
10:22 - object and let's print the radius of c1
10:25 - and c2 also so here I am going to just
10:27 - write c1 and here I'm going to just
10:29 - write c2 so we are printing the radius
10:32 - of all these three objects and I'm going
10:35 - to run the program now and you can see
10:38 - here the radius of the first object is
10:41 - two because we have provided two as an
10:43 - argument here the second is three
10:45 - because we have provided three as an
10:48 - argument here and because we have
10:49 - created this third object using the
10:52 - overloading of this plus operator where
10:55 - we were just adding the radius of both
10:58 - the objects that's why we got five years
11:01 - so two plus three is equal to five and
11:04 - this addition we have done using
11:07 - this expression so we have added the
11:10 - radius of the current class and the
11:14 - object which is passed using this
11:16 - argument so this is how you can overload
11:19 - the operators in python by implementing
11:23 - the Associated methods which are
11:25 - available in Python so let's say now we
11:29 - want to overload the less than and the
11:33 - greater than operator so for the less
11:36 - than operator we use this LT method and
11:39 - for the greater than operator we use
11:42 - this method called GT so let's implement
11:46 - these two method inside our classes so
11:50 - I'm going to just copy this add method
11:54 - to x and first of all I'm going to
11:57 - replace this by LT which is less than
11:59 - and the second method I'm going to
12:02 - replace by GT which is greater than and
12:05 - we want to see if the radius of the
12:09 - circle is greater than the second radius
12:12 - which is provided using this object or
12:14 - not so first is less than so we are
12:16 - going to provide this operator and
12:18 - second is greater than so we are going
12:20 - to provide the other operator which is
12:23 - greater than operator and now this less
12:26 - than and greater than function is going
12:28 - to give us the boolean value if this
12:32 - radius is less than this radius then
12:35 - it's going to return us true otherwise
12:37 - it's going to return us the false so I
12:40 - already have the two instance of two
12:42 - classes and if I want to compare these
12:45 - two classes I can just write c1 and I
12:49 - will use the less than operator here and
12:52 - then c2 and also I'm going to use the
12:57 - greater than operator here and let's run
13:01 - the code and let's see what happens so
13:03 - now it's going to give us this value
13:04 - which is the constructor of the circle
13:06 - so how can we get the boolean value you
13:10 - just need to remove this constructor
13:13 - from here so you just need to remove the
13:15 - name of the class and now I'm going to
13:18 - run the code once again and now you will
13:20 - see
13:21 - true and false so we were checking if
13:24 - Siwon radius is less than C 2 and it
13:26 - gives us true and once again we were
13:28 - checking if Siwon radius is greater than
13:31 - C 2 and it has given false to us also we
13:35 - can check the third object for example C
13:38 - 3 here if C 3 is greater than C 2 or not
13:41 - and most probably is going to give us
13:43 - true and it's correct here so you can
13:45 - see it's that simple to overload any
13:48 - operator in python using these built-in
13:52 - methods so you just need to find out the
13:56 - Associated method related to that
13:58 - operator and then you just need to
14:01 - implement that method related to that
14:04 - operator in addition you can also
14:07 - implement some other methods which are
14:09 - available with the class so once again
14:12 - when I'm going to print the dir with any
14:17 - of the object let's say C 1 and I'm
14:20 - going to run this program and you can
14:22 - see the list of the functions which you
14:24 - can implement inside your class so ad is
14:27 - already there but you can also implement
14:29 - this dish method or dir method or any of
14:35 - these methods which are available here
14:37 - so our EPR method or STR method any
14:41 - method you can implement inside your
14:44 - class in order to avail the
14:46 - functionality associated with that
14:49 - method so at last let's try to implement
14:52 - one of the method which are associated
14:56 - with the class so let's say we want to
14:58 - implement this method which is the STR
15:01 - method so I'm going to just minimize
15:03 - this and I'm going to just copy this
15:06 - function and once again paste here and
15:08 - instead of greater than I'm going to
15:11 - just implement now the STR method
15:14 - now this STR method only takes one
15:16 - argument which is self so I'm going to
15:18 - just remove the second argument and here
15:21 - in the return value I can just return
15:25 - some string for example so I can just
15:28 - say circle area and I'm going to return
15:31 - the area of the circle so I'm going to
15:34 - use this
15:35 - concatenation operator and then I'm
15:38 - going to convert the area into the
15:41 - string and then I'm going to just use
15:43 - self dot area which is going to give us
15:46 - the area of that circle so once you have
15:49 - implemented this STR method in your
15:51 - class you can simply use it like this
15:55 - dir method so I can just write STR and
15:58 - then the name of your object which you
16:01 - have created and let's run the code and
16:04 - let's see what happens so I'm going to
16:06 - just see the result now and it prints
16:08 - circle area and it's going to print the
16:11 - area of the circle I just need to
16:14 - provide equals to symbol here so we will
16:17 - be able to see it in a prettier way so
16:21 - you can see the area of the circle is
16:23 - printed similarly you can print the area
16:26 - of the other two circle which is circle
16:29 - two and circle three and let's run the
16:32 - code once again it's going to print us
16:34 - the area of all these circles so this is
16:37 - how you can use operator overloading in
16:40 - Python

Cleaned transcript:

in this video we will talk about operator overloading in Python now you might already know that everything is an object in Python so when I want to know the type of this number two it's going to show this kind of output and this means that two is an object of the class int now when I once again want to know the type of let's say 2.0 it's an object of class float when I want to do the same operation with the string this string is an object of class string so everything is an object in Python now have you ever wondered that when you do two plus two it's going to give us the addition of two numbers and when I add two strings let's say two and then I am going to use the same operator which is plus operator with the other string it's going to give me the concatenation of these two string values so the same operator plus is working differently with different type of objects the same you might have observed with the multiplication operator which is this asterisk so when I use this asterisks or multiplication operator with a string and let's say I write three here it's going to print this given string three times but the same operator when I will use with the two numbers it's going to give me the different behavior which is the multiplication of these two numbers so the same operator Asterix is functioning differently with different kind of data or in other words we can say that this Astrix operator or this plus operator are overloaded for a different kind of objects so whenever this plus operator is used with two numbers it's going to give us the sum of these two numbers and whenever this operator is used with the string it's going to give us the concatenation of these two strings so both these operators are overloaded for handling different kind of data so this is the overloading of the builtin operators now we might also think that if this is possible can we overload the operators by our custom classes so let me create a class and I'm going to name it as the number class which is going to take one argument so let me define a constructor here so underscore underscore init underscore underscore and this is going to take one argument which is the number and I'm going to just write self dot num is equal to num so this is the simple class which we have created and now I'm going to create two instance of the same class so number and I'm going to give the number one let's say here and then I'm going to create a second object of this class and this time I'm going to give the number two here so is it possible that we can use let's say and one plus and two so let's try this and it's going to give us this error which says unsupported operand type four plus number and number so because Python doesn't know how to use this plus operator with your class objects it's going to give us this error which is unsupported operand type and whatever is the operator you are using so it turns out that we can overload these kind of operators in Python by implementing some inbuilt methods in our class so we already know that whenever we want to implement a constructor in Python we use this init method so I'm going to create a very simple class and I'm going to name it as a and this will be a blank class so this is a very simple class in Python and when I use a dir function which is a builtin function with this class let's see what happens so I'm going to just press ENTER and it's going to print some methods here which are inbuilt method so here not all methods are visible so I'm going to assign this value of dir a to a variable a and then we will see in the righthand side in this inspector here and this is the a variable and you will see the list of all the inbuilt methods which are associated or which you can implement them so for example we have implemented the init method in order to have the functionality similar to constructor but there are other methods here too so there is a STR method or le method which is less than method or any method which is not equal to method and many other methods which we can implement here in our class so now I have given enough theory to you and let's try to see with an example how to overload an operator in Python so here I have created a class which I call circle and this takes one argument which is the radius of the circle and I have created the setter and get a method for this radius variable and in the third method I am just calculating the area of the circle using the radius and I have also used a inbuilt module which is math in order to get the value of pi so using this expression I am just calculating the area of the circle now I have created two objects of this class with two different radiuses so in the first object I have given the radius to and in the second object I have given the radius 3 and from the theory which we have learned till now we already know that this expression will not work with these two objects so when I run this code it's going to give me the error which says unsupported operand error so now we are going to overload this plus operator in this circle floss now in order to overload a particular operator let's say plus you need to implement associated method in your class so with this plus operator there is a special method which we need to implement in our class and I have given the list of all the methods which is associated with the operators so with the plus operator you need to implement this special method which is underscore underscore add underscore underscore in order to overload you use this method in order to overload the multiplication you use this method so here is the operator which we want to overload and here I have given the method name which you need to implement in your class in order to overload this operator in Python so there is this list which you can use with all these operators so you can overload the mathematical operators in Python you can also overload the bitwise operators in Python like and or or bitwise right shift orbit wise left shift and also you can overload the comparison operators in python using these associated methods with these operators so now we want to overload this plus operator so we will implement this add method into our class so let's implement this add method into our class and implementing this method is really simple you just need to define a special method which is underscore underscore add underscore underscore and this add method is going to take two arguments one is self you already know and the other is the object of the other instance so this second argument is the object of the circle class and now inside this method I am going to just return first of all I will just use the circle as the constructor and what I want to do I want to add let's say the radius of the two objects which are provided one is the self object and other is the object which is provided using this argument so I am going to just say self dot underscore underscore radius plus the circle object radius so let's use the circle object and then dot and then underscore underscore radius so basically I'm adding the radius of the two objects one is this circle object and other is the radius of the self which is the current class so as soon as you implement this method ad using these two arguments then this operation is going to work in Python so because we have overloaded the plus operator using this add method now this operation is going to work so let me just assign the addition of these two objects into a third variable and this variable I'm going to name it as c3 and using this c3 let's say I want to print the radius of the circle so I'm going to just use the print method and then I'm going to use the c3 object and I'm going to call our get radius method from this object and let's print the radius of c1 and c2 also so here I am going to just write c1 and here I'm going to just write c2 so we are printing the radius of all these three objects and I'm going to run the program now and you can see here the radius of the first object is two because we have provided two as an argument here the second is three because we have provided three as an argument here and because we have created this third object using the overloading of this plus operator where we were just adding the radius of both the objects that's why we got five years so two plus three is equal to five and this addition we have done using this expression so we have added the radius of the current class and the object which is passed using this argument so this is how you can overload the operators in python by implementing the Associated methods which are available in Python so let's say now we want to overload the less than and the greater than operator so for the less than operator we use this LT method and for the greater than operator we use this method called GT so let's implement these two method inside our classes so I'm going to just copy this add method to x and first of all I'm going to replace this by LT which is less than and the second method I'm going to replace by GT which is greater than and we want to see if the radius of the circle is greater than the second radius which is provided using this object or not so first is less than so we are going to provide this operator and second is greater than so we are going to provide the other operator which is greater than operator and now this less than and greater than function is going to give us the boolean value if this radius is less than this radius then it's going to return us true otherwise it's going to return us the false so I already have the two instance of two classes and if I want to compare these two classes I can just write c1 and I will use the less than operator here and then c2 and also I'm going to use the greater than operator here and let's run the code and let's see what happens so now it's going to give us this value which is the constructor of the circle so how can we get the boolean value you just need to remove this constructor from here so you just need to remove the name of the class and now I'm going to run the code once again and now you will see true and false so we were checking if Siwon radius is less than C 2 and it gives us true and once again we were checking if Siwon radius is greater than C 2 and it has given false to us also we can check the third object for example C 3 here if C 3 is greater than C 2 or not and most probably is going to give us true and it's correct here so you can see it's that simple to overload any operator in python using these builtin methods so you just need to find out the Associated method related to that operator and then you just need to implement that method related to that operator in addition you can also implement some other methods which are available with the class so once again when I'm going to print the dir with any of the object let's say C 1 and I'm going to run this program and you can see the list of the functions which you can implement inside your class so ad is already there but you can also implement this dish method or dir method or any of these methods which are available here so our EPR method or STR method any method you can implement inside your class in order to avail the functionality associated with that method so at last let's try to implement one of the method which are associated with the class so let's say we want to implement this method which is the STR method so I'm going to just minimize this and I'm going to just copy this function and once again paste here and instead of greater than I'm going to just implement now the STR method now this STR method only takes one argument which is self so I'm going to just remove the second argument and here in the return value I can just return some string for example so I can just say circle area and I'm going to return the area of the circle so I'm going to use this concatenation operator and then I'm going to convert the area into the string and then I'm going to just use self dot area which is going to give us the area of that circle so once you have implemented this STR method in your class you can simply use it like this dir method so I can just write STR and then the name of your object which you have created and let's run the code and let's see what happens so I'm going to just see the result now and it prints circle area and it's going to print the area of the circle I just need to provide equals to symbol here so we will be able to see it in a prettier way so you can see the area of the circle is printed similarly you can print the area of the other two circle which is circle two and circle three and let's run the code once again it's going to print us the area of all these circles so this is how you can use operator overloading in Python
