With timestamps:

00:00 - hey guys welcome to this video on how to
00:02 - be a good programmer now before going
00:05 - forward with this video I want to make a
00:08 - disclaimer and that disclaimer is that
00:10 - all the things which I'm going to show
00:13 - you or tell you in this video are
00:16 - totally based upon my software
00:18 - development professional experience
00:22 - I've worked full time as a software
00:25 - developer and all the things which I'm
00:27 - going to tell you in this video
00:28 - according to me are important to become
00:32 - a good software developer and by no
00:35 - means I want to claim that I'm a perfect
00:38 - software developer I feel nobody is a
00:41 - perfect software developer but everybody
00:43 - can improve and if you have some
00:46 - suggestions based upon your professional
00:48 - experience as a software developer you
00:51 - can give them in the comment section so
00:53 - without further ado let's get started
00:56 - the first thing I want to say here is
00:59 - your knowledge is your portfolio so you
01:03 - need to invest regularly in your
01:05 - knowledge portfolio so let me give you
01:08 - an example and this example I want to
01:11 - give you about a smart investor who want
01:14 - to invest in the share market so
01:18 - knowledge is something like investing in
01:22 - the share market now an investment in
01:25 - knowledge always pays the best interest
01:28 - according to me now what are the traits
01:30 - of a smart investor a smart investor
01:34 - invest regularly he diversifies his
01:37 - portfolio
01:38 - he manages his risk between the
01:41 - high-risk shares and the low risk CS and
01:45 - time to time he reviews his portfolio in
01:49 - the same way a good software developer
01:52 - learns at least one new language every
01:55 - year and why I am saying this because
01:58 - whatever your core language is in which
02:02 - you are working professionally might not
02:05 - be the perfect choice in the future
02:08 - because technology nowadays is changing
02:12 - very fast new
02:13 - Technologies comes every one or two
02:15 - years and old technologies takes the
02:18 - backseat but what stays is your
02:22 - fundamental knowledge now if you learn
02:25 - some new language every year let's say
02:28 - you are a C++ developer which is an
02:30 - object-oriented language and if you
02:33 - learn every year a new language let's
02:35 - say you learn
02:36 - Ayten or Scala or any other new language
02:40 - these languages are multi-paradigm
02:42 - programming languages so you get to
02:44 - learn about functional programming you
02:47 - get to learn about procedures data
02:50 - structures in different languages that
02:53 - broadens your knowledge about software
02:56 - development so try to learn at least one
03:00 - language every year the second
03:03 - suggestion I want to give here is read a
03:06 - technical or non-technical book every
03:09 - quarter everybody knows that reading
03:12 - books is a good habit so I don't want to
03:15 - add anything to it I just want to
03:18 - suggest that reading books helps a lot
03:21 - it helps in writing it helps in
03:24 - gathering your thoughts it helps to
03:27 - broaden your knowledge so try to read at
03:30 - least one technical or non-technical
03:32 - book every quarter if possible the next
03:36 - suggestion is take classes about
03:39 - whatever you want to learn now nobody is
03:42 - an expert of all the software languages
03:45 - there are exports of their domains and
03:49 - their software languages or some
03:52 - technologies and they have the
03:55 - professional knowledge to teach you and
03:58 - I will recommend to try to learn from
04:01 - them there are many resources which you
04:04 - can refer to which I'm going to show you
04:06 - in the next slide which you can use to
04:10 - take classes and broaden your knowledge
04:13 - the next suggestion I want to give here
04:16 - is try to participate in local user
04:19 - groups or events there are many software
04:23 - development events going on all the
04:26 - years relay
04:27 - to all the sorts of technologies which
04:30 - are prevailing nowadays so you can
04:32 - search for those events online and
04:35 - attend them and that will broaden your
04:39 - mind and knowledge also because there
04:41 - are all sorts of speakers and they are
04:45 - experts in their domains which gives
04:48 - talks in these kind of events and that
04:52 - will help you immensely and the last
04:54 - suggestion which I want to give you in
04:57 - this slide is experiment with different
05:00 - environments so let's say you want to
05:03 - become a Java developer or you are a
05:06 - Java developer which is a cross-platform
05:08 - programming language which means it can
05:12 - work on any operating system be it
05:15 - Windows or Mac operating system or all
05:18 - types of Linux operating systems so try
05:21 - to learn at least if you have Windows
05:24 - try to learn Linux operating system if
05:27 - you can't afford Mac OS try to learn at
05:30 - least Windows and Linux why I'm saying
05:33 - this is because Linux is open-source
05:36 - most of the distribution of Linux are
05:39 - open-source so you can install Linux for
05:43 - free and experiment with it if you don't
05:47 - have a spare PC or computer you can also
05:50 - use some kind of virtual software for
05:55 - example VirtualBox or VMware Player
05:57 - workstation to install different kind of
05:59 - operating systems and experiment with
06:03 - them and try to develop the language of
06:05 - your expertise in those environments
06:08 - because right now your work may be only
06:11 - limited to the Windows operating system
06:14 - but in future you might get a project in
06:17 - which you might have to deploy your java
06:20 - code on Mac OS let's say or a Linux
06:24 - operating system now let's talk about
06:26 - the tools and techniques which I feel
06:29 - are essential in your software
06:32 - development career and all that software
06:36 - techniques and tools which I am showing
06:38 - here I use them on every
06:41 - a basis and these tools and techniques
06:43 - you will need regardless of the
06:46 - programming language in which you are
06:48 - developing so nowadays you no longer can
06:51 - say that I am an expert in one
06:54 - particular language and I don't need to
06:57 - learn anything else so nowadays in
07:00 - modern software development you need to
07:03 - learn some tools and techniques in order
07:06 - to work in bigger teams so let's see
07:09 - these tools and techniques one by one so
07:13 - the first tool you need to learn is any
07:16 - version control tool it might be any
07:19 - version control tool like git or
07:22 - subversion or any other version control
07:26 - tool because nowadays you cannot develop
07:29 - in teams without version controlling
07:33 - your software in addition you can also
07:36 - learn version control management systems
07:39 - like github or bitbucket with your
07:42 - version control tool the second tool I
07:45 - want to recommend here is a text editor
07:48 - of your choice
07:49 - so there are many text editor available
07:52 - nowadays it can be a whim or Visual
07:55 - Studio code or atom or sublime or Emacs
07:59 - any text editor try to develop your
08:03 - language or programming language in
08:06 - those text editor if possible because
08:10 - for example when you work with
08:12 - integrated development environment or
08:15 - IDE it hides many details from you so
08:20 - whenever you are using an IDE you might
08:23 - not have a total control on your code or
08:28 - your software but if you are using a
08:32 - simple text editor which is also very
08:35 - powerful for example if you are using
08:37 - vim or Visual Studio code which doesn't
08:41 - hide much from you so you have the total
08:45 - control on your software and secondly if
08:48 - you are an expert of some text editor
08:51 - that programming language doesn't matter
08:54 - whatever
08:55 - language you want to develop you can
08:57 - develop any programming language in the
09:01 - text editor
09:02 - so you might not need any particular IDE
09:05 - specialized in that language if you just
09:09 - have a text editor you will be good to
09:12 - go in hostile environments the next
09:15 - thing which I will recommend you to
09:17 - learn is the terminal commands so try to
09:21 - learn the terminal commands to compile
09:23 - your code or deploy your code or do
09:27 - anything with your code with the help of
09:30 - commands so for example if you want to
09:33 - deploy your code on a server where you
09:35 - might not find any fancy graphical user
09:39 - interface you should have the knowledge
09:41 - of terminal commands to compile your
09:44 - code test your code deploy your code and
09:47 - send it to the production using the
09:50 - command line and this will give you a
09:52 - confidence that you don't need any
09:55 - special tool in order to work with the
09:58 - programming language in which you are
10:01 - working in the next suggestion I want to
10:04 - give here is to learn to debug so it's
10:09 - the fact that you cannot avoid bugs in
10:13 - your software and I feel that nobody can
10:16 - write a software which doesn't have any
10:19 - bug so every software might face some
10:23 - kind of bug in its lifecycle so try to
10:27 - learn to debug the code in which you are
10:31 - working in and if possible try to debug
10:34 - your software on the terminal using the
10:38 - command line that will give you immense
10:41 - confidence in writing and debugging your
10:44 - software the next suggestion I will give
10:47 - you is to learn any continuous
10:50 - integration software continuous
10:53 - integration software helps you to test
10:56 - your code compile your code deploy your
11:00 - code so it helps you to handle all the
11:03 - life cycles or all the important steps
11:06 - of your software
11:08 - and nowadays there are many continuous
11:11 - integration software available the most
11:13 - popular which I use personally is
11:16 - Jenkins but there are some modern CI
11:19 - tools like Travis CI or gate lab CI
11:23 - which you can also use as a continuous
11:26 - integration tool for your software the
11:29 - next suggestion is try to learn the
11:32 - design patterns so there is a set of
11:35 - design patterns which are standard and
11:38 - which are language agnostic which you
11:41 - can learn and many R times in your
11:44 - software development career you will
11:46 - face some situation where a design
11:50 - pattern can help or implemented directly
11:55 - to your software so they are standard
11:58 - patterns and they are created by exports
12:01 - so you might get help from these design
12:04 - patterns the next suggestion is try to
12:07 - learn UML diagrams so for example you
12:10 - want to show some control flow or
12:12 - software design or software architecture
12:14 - to your colleague or to your team lead
12:17 - or to anyone you can use UML diagram to
12:22 - create or design those software
12:24 - architecture diagrams or class diagram
12:27 - there are many kind of diagrams which
12:29 - you can draw using the UML diagrams so
12:33 - try to learn UML diagrams how to draw
12:36 - them and make use of them the next
12:39 - suggestion is try to write test whatever
12:42 - programming language you are using there
12:45 - are standard libraries available to
12:49 - write unit tests or integration tests or
12:52 - system tests in those languages using
12:55 - those libraries so try to write tests
12:58 - for your software before delivering it
13:01 - to the client
13:03 - the next suggestion is try to learn
13:05 - agile methodologies and try to learn
13:08 - agile project management tool for
13:11 - example JIRA which I use in my
13:14 - professional software development career
13:17 - which is I think the most popular tool
13:19 - for agile project management
13:22 - and if you don't know what is agile just
13:25 - search on google what is agile and you
13:28 - will get to know more about what is
13:31 - agile and what is JIRA the next
13:34 - suggestion is build project from scratch
13:36 - so whatever programming language you are
13:39 - working in try to write some kind of
13:43 - project personally or professionally
13:45 - from scratch so you will be able to
13:49 - experience all the nuances or granule
13:53 - details about the software development
13:56 - in that particular language now there
14:00 - are some suggestions which I haven't
14:02 - included in this slide but I want to
14:04 - give you and those suggestions are try
14:08 - to peer review or code review your code
14:12 - so whenever you write a code and you
14:14 - feel that this is the perfect code but
14:17 - an expert can give you suggestions what
14:21 - you can improve in your code so try to
14:24 - give your code to an expert for the
14:26 - review and he will be able to improve
14:29 - your code and code quality and the last
14:33 - suggestion is don't shy away from the
14:36 - hard work this is the fact that you
14:38 - cannot avoid hard work in your software
14:41 - development career so these are some of
14:44 - the tools and techniques which I use
14:46 - regularly
14:48 - in my software development career
14:50 - professionally now let's talk about some
14:54 - learning resources which you can use in
14:57 - order to get better in your chosen
15:01 - software development domain so here I
15:04 - have listed some of the websites and
15:06 - resources which you can use to learn
15:10 - programming languages and get better in
15:12 - software development now at last I want
15:15 - to give you some tips which will make
15:17 - you a better software developer so the
15:21 - first tip is provide options and don't
15:24 - make lame excuses so whenever you are
15:28 - provided some tasks from your team or
15:32 - from your project lead try to give some
15:35 - suggestions or
15:36 - options don't say straight away that
15:39 - this can't be done I have in my software
15:43 - development career never faced the
15:45 - problem which I couldn't solve I just
15:48 - need to work harder in order to solve
15:51 - these problems but there is no problem
15:54 - which I faced and I couldn't solve so if
15:58 - you feel it's difficult to solve this
16:00 - problem try to read more about this
16:03 - problem or think more about this problem
16:05 - and you will get some idea to solve this
16:09 - problem maybe also you can discuss with
16:11 - your colleagues for the suggestions and
16:13 - at the end you will be able to solve
16:16 - that problem or the task the next tip is
16:19 - make quality a requirement issue as I
16:23 - said whenever you write a software you
16:25 - need to write the unit test for them or
16:28 - integration test for them so try to
16:30 - check the quality of your code by code
16:34 - reviews the next step is don't repeat
16:37 - yourself so try to write the code in
16:40 - which you don't repeat yourself so you
16:43 - don't have to write some function
16:45 - multiple times and try to write this
16:48 - code in such a way that you write a
16:50 - function or a functionality which you
16:53 - can reuse in different places in your
16:56 - software code the next step is
16:59 - reversibility so in my software
17:01 - development career I have never seen a
17:05 - decision which is a final decision so
17:08 - that changes are bound to come in your
17:11 - software so try to write the software
17:14 - which you can easily reverse or change
17:18 - the next and the last tip which I have
17:21 - already told you is use the power of
17:24 - command shell the benefit of graphical
17:29 - user interface is what you see is what
17:32 - you get but the disadvantage of
17:35 - graphical user interface is what you see
17:38 - is all you get so you will not get any
17:42 - extra knowledge or the detailed and
17:45 - knowledge whenever you are using the
17:47 - graphical user interface when
17:50 - you use a command shell or terminal you
17:53 - have full control or you will have full
17:56 - control over your software whatever you
18:00 - are doing and in the most hostile
18:02 - conditions also you will be able to work
18:05 - your way with your software using
18:09 - command terminal or command shell so try
18:12 - to learn the power of command shell so
18:16 - these are the tips and suggestions which
18:18 - I wanted to give you in order to become
18:21 - a better software developer once again
18:24 - all these suggestions are based upon my
18:27 - professional experience as a software
18:30 - developer and if you have some extra
18:32 - suggestions please write them in the
18:35 - comments so please keep watching these
18:37 - videos I will see you in the next video

Cleaned transcript:

hey guys welcome to this video on how to be a good programmer now before going forward with this video I want to make a disclaimer and that disclaimer is that all the things which I'm going to show you or tell you in this video are totally based upon my software development professional experience I've worked full time as a software developer and all the things which I'm going to tell you in this video according to me are important to become a good software developer and by no means I want to claim that I'm a perfect software developer I feel nobody is a perfect software developer but everybody can improve and if you have some suggestions based upon your professional experience as a software developer you can give them in the comment section so without further ado let's get started the first thing I want to say here is your knowledge is your portfolio so you need to invest regularly in your knowledge portfolio so let me give you an example and this example I want to give you about a smart investor who want to invest in the share market so knowledge is something like investing in the share market now an investment in knowledge always pays the best interest according to me now what are the traits of a smart investor a smart investor invest regularly he diversifies his portfolio he manages his risk between the highrisk shares and the low risk CS and time to time he reviews his portfolio in the same way a good software developer learns at least one new language every year and why I am saying this because whatever your core language is in which you are working professionally might not be the perfect choice in the future because technology nowadays is changing very fast new Technologies comes every one or two years and old technologies takes the backseat but what stays is your fundamental knowledge now if you learn some new language every year let's say you are a C++ developer which is an objectoriented language and if you learn every year a new language let's say you learn Ayten or Scala or any other new language these languages are multiparadigm programming languages so you get to learn about functional programming you get to learn about procedures data structures in different languages that broadens your knowledge about software development so try to learn at least one language every year the second suggestion I want to give here is read a technical or nontechnical book every quarter everybody knows that reading books is a good habit so I don't want to add anything to it I just want to suggest that reading books helps a lot it helps in writing it helps in gathering your thoughts it helps to broaden your knowledge so try to read at least one technical or nontechnical book every quarter if possible the next suggestion is take classes about whatever you want to learn now nobody is an expert of all the software languages there are exports of their domains and their software languages or some technologies and they have the professional knowledge to teach you and I will recommend to try to learn from them there are many resources which you can refer to which I'm going to show you in the next slide which you can use to take classes and broaden your knowledge the next suggestion I want to give here is try to participate in local user groups or events there are many software development events going on all the years relay to all the sorts of technologies which are prevailing nowadays so you can search for those events online and attend them and that will broaden your mind and knowledge also because there are all sorts of speakers and they are experts in their domains which gives talks in these kind of events and that will help you immensely and the last suggestion which I want to give you in this slide is experiment with different environments so let's say you want to become a Java developer or you are a Java developer which is a crossplatform programming language which means it can work on any operating system be it Windows or Mac operating system or all types of Linux operating systems so try to learn at least if you have Windows try to learn Linux operating system if you can't afford Mac OS try to learn at least Windows and Linux why I'm saying this is because Linux is opensource most of the distribution of Linux are opensource so you can install Linux for free and experiment with it if you don't have a spare PC or computer you can also use some kind of virtual software for example VirtualBox or VMware Player workstation to install different kind of operating systems and experiment with them and try to develop the language of your expertise in those environments because right now your work may be only limited to the Windows operating system but in future you might get a project in which you might have to deploy your java code on Mac OS let's say or a Linux operating system now let's talk about the tools and techniques which I feel are essential in your software development career and all that software techniques and tools which I am showing here I use them on every a basis and these tools and techniques you will need regardless of the programming language in which you are developing so nowadays you no longer can say that I am an expert in one particular language and I don't need to learn anything else so nowadays in modern software development you need to learn some tools and techniques in order to work in bigger teams so let's see these tools and techniques one by one so the first tool you need to learn is any version control tool it might be any version control tool like git or subversion or any other version control tool because nowadays you cannot develop in teams without version controlling your software in addition you can also learn version control management systems like github or bitbucket with your version control tool the second tool I want to recommend here is a text editor of your choice so there are many text editor available nowadays it can be a whim or Visual Studio code or atom or sublime or Emacs any text editor try to develop your language or programming language in those text editor if possible because for example when you work with integrated development environment or IDE it hides many details from you so whenever you are using an IDE you might not have a total control on your code or your software but if you are using a simple text editor which is also very powerful for example if you are using vim or Visual Studio code which doesn't hide much from you so you have the total control on your software and secondly if you are an expert of some text editor that programming language doesn't matter whatever language you want to develop you can develop any programming language in the text editor so you might not need any particular IDE specialized in that language if you just have a text editor you will be good to go in hostile environments the next thing which I will recommend you to learn is the terminal commands so try to learn the terminal commands to compile your code or deploy your code or do anything with your code with the help of commands so for example if you want to deploy your code on a server where you might not find any fancy graphical user interface you should have the knowledge of terminal commands to compile your code test your code deploy your code and send it to the production using the command line and this will give you a confidence that you don't need any special tool in order to work with the programming language in which you are working in the next suggestion I want to give here is to learn to debug so it's the fact that you cannot avoid bugs in your software and I feel that nobody can write a software which doesn't have any bug so every software might face some kind of bug in its lifecycle so try to learn to debug the code in which you are working in and if possible try to debug your software on the terminal using the command line that will give you immense confidence in writing and debugging your software the next suggestion I will give you is to learn any continuous integration software continuous integration software helps you to test your code compile your code deploy your code so it helps you to handle all the life cycles or all the important steps of your software and nowadays there are many continuous integration software available the most popular which I use personally is Jenkins but there are some modern CI tools like Travis CI or gate lab CI which you can also use as a continuous integration tool for your software the next suggestion is try to learn the design patterns so there is a set of design patterns which are standard and which are language agnostic which you can learn and many R times in your software development career you will face some situation where a design pattern can help or implemented directly to your software so they are standard patterns and they are created by exports so you might get help from these design patterns the next suggestion is try to learn UML diagrams so for example you want to show some control flow or software design or software architecture to your colleague or to your team lead or to anyone you can use UML diagram to create or design those software architecture diagrams or class diagram there are many kind of diagrams which you can draw using the UML diagrams so try to learn UML diagrams how to draw them and make use of them the next suggestion is try to write test whatever programming language you are using there are standard libraries available to write unit tests or integration tests or system tests in those languages using those libraries so try to write tests for your software before delivering it to the client the next suggestion is try to learn agile methodologies and try to learn agile project management tool for example JIRA which I use in my professional software development career which is I think the most popular tool for agile project management and if you don't know what is agile just search on google what is agile and you will get to know more about what is agile and what is JIRA the next suggestion is build project from scratch so whatever programming language you are working in try to write some kind of project personally or professionally from scratch so you will be able to experience all the nuances or granule details about the software development in that particular language now there are some suggestions which I haven't included in this slide but I want to give you and those suggestions are try to peer review or code review your code so whenever you write a code and you feel that this is the perfect code but an expert can give you suggestions what you can improve in your code so try to give your code to an expert for the review and he will be able to improve your code and code quality and the last suggestion is don't shy away from the hard work this is the fact that you cannot avoid hard work in your software development career so these are some of the tools and techniques which I use regularly in my software development career professionally now let's talk about some learning resources which you can use in order to get better in your chosen software development domain so here I have listed some of the websites and resources which you can use to learn programming languages and get better in software development now at last I want to give you some tips which will make you a better software developer so the first tip is provide options and don't make lame excuses so whenever you are provided some tasks from your team or from your project lead try to give some suggestions or options don't say straight away that this can't be done I have in my software development career never faced the problem which I couldn't solve I just need to work harder in order to solve these problems but there is no problem which I faced and I couldn't solve so if you feel it's difficult to solve this problem try to read more about this problem or think more about this problem and you will get some idea to solve this problem maybe also you can discuss with your colleagues for the suggestions and at the end you will be able to solve that problem or the task the next tip is make quality a requirement issue as I said whenever you write a software you need to write the unit test for them or integration test for them so try to check the quality of your code by code reviews the next step is don't repeat yourself so try to write the code in which you don't repeat yourself so you don't have to write some function multiple times and try to write this code in such a way that you write a function or a functionality which you can reuse in different places in your software code the next step is reversibility so in my software development career I have never seen a decision which is a final decision so that changes are bound to come in your software so try to write the software which you can easily reverse or change the next and the last tip which I have already told you is use the power of command shell the benefit of graphical user interface is what you see is what you get but the disadvantage of graphical user interface is what you see is all you get so you will not get any extra knowledge or the detailed and knowledge whenever you are using the graphical user interface when you use a command shell or terminal you have full control or you will have full control over your software whatever you are doing and in the most hostile conditions also you will be able to work your way with your software using command terminal or command shell so try to learn the power of command shell so these are the tips and suggestions which I wanted to give you in order to become a better software developer once again all these suggestions are based upon my professional experience as a software developer and if you have some extra suggestions please write them in the comments so please keep watching these videos I will see you in the next video
