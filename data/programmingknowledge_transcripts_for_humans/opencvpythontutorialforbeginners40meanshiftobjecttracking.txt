With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we will talk about
00:07 - an object tracking method which is
00:09 - called mean shift so first of all what
00:12 - is object tracking so in simple words
00:16 - object tracking is the process of
00:18 - locating a moving object over time using
00:22 - a camera and what is me shift the idea
00:26 - behind mean shift is really simple
00:28 - consider you have a set of points it can
00:31 - be a pixel density like histogram back
00:35 - projection and you are given a window
00:39 - which is a very small window which can
00:42 - be a circle or rectangle or a square and
00:45 - you have to move that window to a area
00:47 - of maximum pixel density or maximum
00:51 - number of points so in the image you can
00:55 - see this illustration very easily so
00:59 - essentially the working of mean shift
01:01 - algorithm can be summarized in following
01:05 - points so in the first step we pass the
01:09 - initial location of our target object
01:11 - and the histogram back projected image
01:14 - to a mean shift function and then in the
01:19 - second step as the object moves the
01:22 - histogram back projected image also
01:24 - changes and in the third step the mean
01:29 - shift function moves the window to the
01:33 - new location with the maximum
01:35 - probability density so we will see all
01:38 - these steps with the help of an example
01:41 - so here I have the simple code where I'm
01:44 - loading video which is called slow
01:48 - traffic small dot mp4 and I'm just
01:51 - iterating over each and every frame of
01:54 - that video so this code till now you
01:58 - already know how it works so I'm going
02:00 - to just run this code and let's say I
02:03 - just want to track this window of the
02:07 - white car okay so let me just run this
02:11 - video once again so I want to try
02:13 - this window of the white car or window
02:16 - in general of each and every car let's
02:19 - say okay so how can I track this window
02:24 - using mean shift algorithm let's see so
02:29 - as I said the first step is the passing
02:33 - of the initial location of our target so
02:36 - this can be you can say a disadvantage
02:39 - of mean shift that you have to provide
02:42 - the initial location of your target in
02:45 - our case that target is the car window
02:49 - so what I have done is I have just
02:52 - calculated the initial position of the
02:55 - white car window and that we are going
02:59 - to see in the next step so first of all
03:02 - we are going to take the first frame of
03:04 - our video so the first frame of our
03:06 - video can be retrieved by this course so
03:11 - ret comma frame is equal to cap we have
03:17 - this cap function and we will read the
03:21 - first frame using the read method and
03:24 - this is going to give you the first
03:26 - frame of the video so this is our first
03:29 - frame now once we have our first frame
03:32 - we are going to define the initial
03:36 - location of the car window in our case
03:39 - we want to track first of all the white
03:43 - car window right so I'm going to define
03:46 - four variables first two are X comma Y
03:50 - and the next two are width and height so
03:54 - and because I have already calculated
03:56 - the initial position of the window I'm
03:59 - going to hard-code
04:00 - this position of the window so 300 200
04:06 - comma 100 comma 50 okay so this is the
04:10 - hard-coded value which I have already
04:14 - calculated which is the initial position
04:16 - of the car window now we can say that
04:21 - this XY and width and height is our
04:24 - track window so we are going to
04:27 - you define a variable called track
04:31 - underscore window let's say and then we
04:36 - are going to just pass all these four
04:38 - variables X comma Y comma width comma
04:43 - height
04:44 - okay so let's pass all these four
04:46 - variables and in the next step we are
04:49 - going to define our region of interest
04:52 - so let's define this region of interest
04:57 - with the variable called ROI and we
05:01 - already have our first frame so we are
05:03 - going to take our first frame and then
05:06 - we are going to pass that window so y :
05:10 - y plus height comma X : X plus width so
05:20 - this is our window or the position of
05:23 - the window so as I said in the first
05:26 - step we will pass the initial location
05:27 - of our target object and the histogram
05:31 - back projected image of the mean shift
05:35 - function so histogram back projection in
05:38 - simple words creates an image of the
05:41 - same size but of a single channel as of
05:46 - our input image in our case this will be
05:50 - our frame where each pixel corresponds
05:53 - to the probability of that pixel
05:56 - belonging to our object that is the
06:00 - output image will have our object of
06:03 - interest or region of a in more white
06:06 - color compared to the remaining part of
06:09 - that image so this is back projections
06:14 - so for calculating the histogram back
06:16 - projection there are some steps which
06:19 - are involved so we are going to follow
06:21 - all these steps to calculate the
06:24 - histogram back projection but first of
06:27 - all let's just see the region of
06:31 - interest because we already have our
06:34 - region of interest so I'm going to just
06:36 - write C V dot I am sure and our region
06:40 - of
06:40 - interests so let's say how our region of
06:43 - interest looks like so I have this video
06:48 - and this image which is our region of
06:52 - interest right so this is the initial
06:55 - position I'm going to pass to our mean
06:59 - shift function right so now in the next
07:04 - step what we are going to do is we are
07:06 - going to define the histogram back
07:10 - projection so you already have our ROI
07:14 - so in the next step we are going to just
07:18 - convert this ROI to the HSV color space
07:23 - so I'm going to just write HSV
07:25 - underscore ry HSB we have already
07:28 - learned in the previous video so I'm
07:30 - going not going to go into the details
07:32 - of HSV color space I'm going to just try
07:37 - it
07:37 - CV dot CB the color which is going to
07:43 - convert this image into the HSV color
07:48 - space so our input image will be the ROI
07:52 - and the next parameter will be CV dot
07:57 - color underscore BG are two HSV okay so
08:04 - we are converting this image to the HSV
08:07 - color space and then we are going to
08:09 - calculate the mask so let's say we
08:13 - define a variable called mask and for
08:16 - the mask we are going to just write CV
08:19 - dot in range so this also we have learnt
08:23 - in the HSB tutorial so if you want to
08:27 - learn more about all these functions you
08:30 - can just go to that video so first
08:33 - parameter we are going to pass is our
08:36 - HSV image and the second parameter and
08:40 - the third parameter will be the lower
08:42 - and the upper bound so the lower limit
08:45 - will be 0 dot comma sixty dot comma
08:51 - 32 dot okay so let's
08:54 - pass this and the upper limit so let's
08:58 - define the upper limit also so the third
09:01 - parameter will be the upper limit in the
09:04 - form of the topple but we need to use
09:07 - the numpy for that right so an umpire
09:09 - dot array and inside that we just passed
09:14 - this couple value which will be 180 dot
09:20 - 255 dot 255
09:23 - okay so 180 dot comma 255 dot comma 255
09:29 - so why we use the in range function
09:32 - because for the histogram only hue is
09:35 - considered from HSV right so the first
09:40 - channel right and also to avoid the
09:43 - false value due to low light or low
09:47 - light value we use the in range function
09:52 - okay so these low light values are
09:55 - discarded using the inner range function
09:58 - and then in the next step we are going
10:01 - to calculate our histogram a value so
10:05 - I'm going to define this variable called
10:08 - ROI hist
10:09 - this also we have learned in the
10:12 - previous video so I'm not going to go
10:14 - into the details so I'm going to just
10:16 - use the function called calc hist which
10:20 - takes the first parameter which will be
10:23 - the image so I'm going to just pass our
10:26 - HSV ROI so just pass HSB underscore ROI
10:31 - the second value here will be the
10:34 - channels so we are just using only hue
10:38 - Channel the first channel in the HSP
10:41 - space so we are going to just write 0
10:43 - here ask now the next parameter will be
10:45 - the masks so we have already calculated
10:47 - the mass so we are going to just pass
10:50 - this mask parameter here
10:53 - the next parameter will be the hist size
10:55 - so as we have already learned in the
10:58 - previous videos that this his size
11:01 - starts from 0 to 179 so essentially 180
11:06 - News and then we just need to pass the
11:10 - ranges so as I said start from 0 to 1
11:15 - now in the next step we are going to
11:17 - just normalize these values using the
11:20 - normalize function so this normalized
11:23 - function takes few values first is the
11:26 - source so the source is our ROI hist
11:29 - variable the next value is the
11:33 - destination so let's say we have the
11:36 - same destination we just want to
11:38 - override this ROI hist value the next
11:42 - parameter here will be the value of
11:44 - alpha so alpha will start from 0 and the
11:49 - value of beta will be 255 so we want to
11:52 - normalize these values between 0 to 255
11:56 - okay and then the next value will be the
12:02 - norm type so the norm type we are going
12:05 - to take is CV dot norm min max okay so
12:12 - we are going to just take this one norm
12:15 - min max so all these steps which we have
12:19 - written here is going to give us the
12:23 - histogram back projected image now once
12:26 - we have this histogram back projected
12:29 - image we are going to use this histogram
12:34 - back projected image which is also going
12:37 - to change with the moving object so now
12:41 - in the next step we are going to go
12:44 - inside our while loop and read each and
12:48 - every frame one by one and first of all
12:52 - what we are going to do is we are going
12:54 - to calculate the HSV value of the frame
12:58 - as we have done with the first frame
13:01 - also right so we are going to just take
13:05 - the frame and then calculate the HSV ROI
13:10 - value let's say this time we are going
13:13 - to name it as HSB and we are going to
13:16 - pass frame as the source instead of this
13:20 - I value now in the next step we are
13:24 - going to use a function called calculate
13:26 - back project so let's define the
13:31 - variable called nest for destination and
13:34 - then see we dot calc back project which
13:38 - is the function for calculating the back
13:42 - projection and this function takes few
13:44 - argument first is the number of images
13:47 - so we only have our HSB image so we are
13:51 - going to pass in the form of the list
13:54 - the second argument will be the channels
13:57 - so as I said we just want to use the hue
14:01 - values here so only one channel so we
14:04 - are going to just write 0 so because
14:07 - channel starts from 0 1 2 so that's why
14:11 - I have written 0 here the third
14:14 - parameter is the hist value so in this
14:18 - case or hist value is the ROI hist which
14:22 - we have calculated the next parameter is
14:25 - the ranges so we will start from 0 to
14:30 - 180 as we are talking about the HSV
14:35 - color space and the next value will be
14:38 - the scale let's say scale for now we
14:42 - take 1 as the scale so this is going to
14:46 - give you the back projected image and
14:49 - then in the next step we are going to
14:51 - apply the mean shift to get the new
14:54 - location so I'm going to just write ret
14:57 - comma track window so I'm going to just
15:01 - say track window which is this variable
15:05 - which we have already defined and then
15:09 - we are going to just use CV dot mean
15:14 - shift which is going to take few
15:17 - arguments first is the image which is
15:21 - the destination image which we got from
15:24 - the back project function calc back
15:28 - project and next argument will be our
15:32 - track image which is
15:34 - that track window so we have to define
15:37 - this term criteria so I'm going to just
15:40 - write term C RIT for criteria and then
15:47 - we have to define this outside this
15:50 - while loop so I'm going to go here and
15:54 - we are going to set up the termination
15:57 - criteria either ten iterations or move
16:01 - by at least one point okay so we are
16:06 - going to define that criteria
16:08 - so here in the curly brackets we are
16:13 - going to just say CV dot term criteria
16:19 - ESP or CV dot term criteria count so
16:24 - because we want to either provide the
16:28 - termination criteria for either ten
16:31 - iteration so we just give ten or we want
16:35 - to terminate by moving at least one
16:39 - point this is the criteria for the mean
16:42 - shift and we are providing these to try
16:46 - criteria so once we have or a track
16:48 - window for the car we can draw a
16:52 - rectangle with the help of this track
16:54 - window and this will be visible on our
16:58 - video so we are going to draw that
17:02 - window you're going to just say X comma
17:06 - Y comma W comma H for X Y width and
17:13 - height and this will be our track window
17:16 - and then we are going to just draw a
17:19 - rectangle so I'm going to just say we
17:22 - have the final image and then we are
17:28 - going to just write C V dot rectangle
17:33 - which is going to take the frame and
17:35 - then the point for the first point of
17:40 - the rectangle and the second point of
17:43 - the rectangle which are the coordinates
17:45 - of that point so the first point
17:48 - coordinate
17:48 - we'll be X comma Y and the second point
17:53 - coordinate will be X plus width comma y
17:58 - plus height okay and then the next value
18:03 - will be the color let's say we want to
18:05 - use 255 here and the thickness or
18:11 - thickness we want to take 3 here for
18:14 - example now we can just show this final
18:19 - image using imshow method so till now we
18:22 - were just showing our original frame so
18:26 - we can just say let's say we want to
18:30 - show the final image here also if you
18:33 - want to see the back projected image you
18:37 - can just use this destination so we can
18:43 - print this destination image also and
18:46 - see how does this back projected image
18:49 - looks like so let's run this code and
18:52 - you can see this car window is dragged
18:56 - right so as the car moves this window
18:59 - also moves once this car goes out of the
19:03 - scope it tracks the other window so this
19:06 - is how the mean shift algorithm works in
19:10 - OpenCV now as I said this mean shift has
19:15 - few disadvantages or limitations the
19:19 - first limitation is the size of the
19:23 - target window does not change so as we
19:26 - have seen once this car is coming near
19:31 - to us the size of this window is not
19:34 - changing it remains always same so this
19:38 - is one problem the second problem is we
19:41 - have to give the initial position of our
19:45 - region of interest for example if
19:48 - initial position of the region of
19:50 - interest is not known then it will be
19:53 - really hard to apply mean shift method
19:56 - so there are these two mean limitations
19:59 - of this mean shift Algar
20:02 - and we are going to try to solve these
20:04 - limitations in the next video when we
20:07 - learn
20:08 - which stands for continuously adoptive
20:11 - mean shift so this we are going to see
20:15 - in the next video so stay tuned and I'm
20:19 - going to see you in the next video

Cleaned transcript:

hey guys welcome to the next video on open CV tutorial for beginners using Python in this video we will talk about an object tracking method which is called mean shift so first of all what is object tracking so in simple words object tracking is the process of locating a moving object over time using a camera and what is me shift the idea behind mean shift is really simple consider you have a set of points it can be a pixel density like histogram back projection and you are given a window which is a very small window which can be a circle or rectangle or a square and you have to move that window to a area of maximum pixel density or maximum number of points so in the image you can see this illustration very easily so essentially the working of mean shift algorithm can be summarized in following points so in the first step we pass the initial location of our target object and the histogram back projected image to a mean shift function and then in the second step as the object moves the histogram back projected image also changes and in the third step the mean shift function moves the window to the new location with the maximum probability density so we will see all these steps with the help of an example so here I have the simple code where I'm loading video which is called slow traffic small dot mp4 and I'm just iterating over each and every frame of that video so this code till now you already know how it works so I'm going to just run this code and let's say I just want to track this window of the white car okay so let me just run this video once again so I want to try this window of the white car or window in general of each and every car let's say okay so how can I track this window using mean shift algorithm let's see so as I said the first step is the passing of the initial location of our target so this can be you can say a disadvantage of mean shift that you have to provide the initial location of your target in our case that target is the car window so what I have done is I have just calculated the initial position of the white car window and that we are going to see in the next step so first of all we are going to take the first frame of our video so the first frame of our video can be retrieved by this course so ret comma frame is equal to cap we have this cap function and we will read the first frame using the read method and this is going to give you the first frame of the video so this is our first frame now once we have our first frame we are going to define the initial location of the car window in our case we want to track first of all the white car window right so I'm going to define four variables first two are X comma Y and the next two are width and height so and because I have already calculated the initial position of the window I'm going to hardcode this position of the window so 300 200 comma 100 comma 50 okay so this is the hardcoded value which I have already calculated which is the initial position of the car window now we can say that this XY and width and height is our track window so we are going to you define a variable called track underscore window let's say and then we are going to just pass all these four variables X comma Y comma width comma height okay so let's pass all these four variables and in the next step we are going to define our region of interest so let's define this region of interest with the variable called ROI and we already have our first frame so we are going to take our first frame and then we are going to pass that window so y y plus height comma X X plus width so this is our window or the position of the window so as I said in the first step we will pass the initial location of our target object and the histogram back projected image of the mean shift function so histogram back projection in simple words creates an image of the same size but of a single channel as of our input image in our case this will be our frame where each pixel corresponds to the probability of that pixel belonging to our object that is the output image will have our object of interest or region of a in more white color compared to the remaining part of that image so this is back projections so for calculating the histogram back projection there are some steps which are involved so we are going to follow all these steps to calculate the histogram back projection but first of all let's just see the region of interest because we already have our region of interest so I'm going to just write C V dot I am sure and our region of interests so let's say how our region of interest looks like so I have this video and this image which is our region of interest right so this is the initial position I'm going to pass to our mean shift function right so now in the next step what we are going to do is we are going to define the histogram back projection so you already have our ROI so in the next step we are going to just convert this ROI to the HSV color space so I'm going to just write HSV underscore ry HSB we have already learned in the previous video so I'm going not going to go into the details of HSV color space I'm going to just try it CV dot CB the color which is going to convert this image into the HSV color space so our input image will be the ROI and the next parameter will be CV dot color underscore BG are two HSV okay so we are converting this image to the HSV color space and then we are going to calculate the mask so let's say we define a variable called mask and for the mask we are going to just write CV dot in range so this also we have learnt in the HSB tutorial so if you want to learn more about all these functions you can just go to that video so first parameter we are going to pass is our HSV image and the second parameter and the third parameter will be the lower and the upper bound so the lower limit will be 0 dot comma sixty dot comma 32 dot okay so let's pass this and the upper limit so let's define the upper limit also so the third parameter will be the upper limit in the form of the topple but we need to use the numpy for that right so an umpire dot array and inside that we just passed this couple value which will be 180 dot 255 dot 255 okay so 180 dot comma 255 dot comma 255 so why we use the in range function because for the histogram only hue is considered from HSV right so the first channel right and also to avoid the false value due to low light or low light value we use the in range function okay so these low light values are discarded using the inner range function and then in the next step we are going to calculate our histogram a value so I'm going to define this variable called ROI hist this also we have learned in the previous video so I'm not going to go into the details so I'm going to just use the function called calc hist which takes the first parameter which will be the image so I'm going to just pass our HSV ROI so just pass HSB underscore ROI the second value here will be the channels so we are just using only hue Channel the first channel in the HSP space so we are going to just write 0 here ask now the next parameter will be the masks so we have already calculated the mass so we are going to just pass this mask parameter here the next parameter will be the hist size so as we have already learned in the previous videos that this his size starts from 0 to 179 so essentially 180 News and then we just need to pass the ranges so as I said start from 0 to 1 now in the next step we are going to just normalize these values using the normalize function so this normalized function takes few values first is the source so the source is our ROI hist variable the next value is the destination so let's say we have the same destination we just want to override this ROI hist value the next parameter here will be the value of alpha so alpha will start from 0 and the value of beta will be 255 so we want to normalize these values between 0 to 255 okay and then the next value will be the norm type so the norm type we are going to take is CV dot norm min max okay so we are going to just take this one norm min max so all these steps which we have written here is going to give us the histogram back projected image now once we have this histogram back projected image we are going to use this histogram back projected image which is also going to change with the moving object so now in the next step we are going to go inside our while loop and read each and every frame one by one and first of all what we are going to do is we are going to calculate the HSV value of the frame as we have done with the first frame also right so we are going to just take the frame and then calculate the HSV ROI value let's say this time we are going to name it as HSB and we are going to pass frame as the source instead of this I value now in the next step we are going to use a function called calculate back project so let's define the variable called nest for destination and then see we dot calc back project which is the function for calculating the back projection and this function takes few argument first is the number of images so we only have our HSB image so we are going to pass in the form of the list the second argument will be the channels so as I said we just want to use the hue values here so only one channel so we are going to just write 0 so because channel starts from 0 1 2 so that's why I have written 0 here the third parameter is the hist value so in this case or hist value is the ROI hist which we have calculated the next parameter is the ranges so we will start from 0 to 180 as we are talking about the HSV color space and the next value will be the scale let's say scale for now we take 1 as the scale so this is going to give you the back projected image and then in the next step we are going to apply the mean shift to get the new location so I'm going to just write ret comma track window so I'm going to just say track window which is this variable which we have already defined and then we are going to just use CV dot mean shift which is going to take few arguments first is the image which is the destination image which we got from the back project function calc back project and next argument will be our track image which is that track window so we have to define this term criteria so I'm going to just write term C RIT for criteria and then we have to define this outside this while loop so I'm going to go here and we are going to set up the termination criteria either ten iterations or move by at least one point okay so we are going to define that criteria so here in the curly brackets we are going to just say CV dot term criteria ESP or CV dot term criteria count so because we want to either provide the termination criteria for either ten iteration so we just give ten or we want to terminate by moving at least one point this is the criteria for the mean shift and we are providing these to try criteria so once we have or a track window for the car we can draw a rectangle with the help of this track window and this will be visible on our video so we are going to draw that window you're going to just say X comma Y comma W comma H for X Y width and height and this will be our track window and then we are going to just draw a rectangle so I'm going to just say we have the final image and then we are going to just write C V dot rectangle which is going to take the frame and then the point for the first point of the rectangle and the second point of the rectangle which are the coordinates of that point so the first point coordinate we'll be X comma Y and the second point coordinate will be X plus width comma y plus height okay and then the next value will be the color let's say we want to use 255 here and the thickness or thickness we want to take 3 here for example now we can just show this final image using imshow method so till now we were just showing our original frame so we can just say let's say we want to show the final image here also if you want to see the back projected image you can just use this destination so we can print this destination image also and see how does this back projected image looks like so let's run this code and you can see this car window is dragged right so as the car moves this window also moves once this car goes out of the scope it tracks the other window so this is how the mean shift algorithm works in OpenCV now as I said this mean shift has few disadvantages or limitations the first limitation is the size of the target window does not change so as we have seen once this car is coming near to us the size of this window is not changing it remains always same so this is one problem the second problem is we have to give the initial position of our region of interest for example if initial position of the region of interest is not known then it will be really hard to apply mean shift method so there are these two mean limitations of this mean shift Algar and we are going to try to solve these limitations in the next video when we learn which stands for continuously adoptive mean shift so this we are going to see in the next video so stay tuned and I'm going to see you in the next video
