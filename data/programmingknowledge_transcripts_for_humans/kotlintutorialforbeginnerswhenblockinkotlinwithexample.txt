With timestamps:

00:00 - and in the previous video we have
00:03 - we have seen that uh
00:05 - what happens if we use an apple
00:07 - statement
00:08 - so
00:09 - if we have some condition we use an if
00:11 - statement
00:13 - so what about if i have multiple
00:15 - conditions like
00:18 - if condition one is true then i have to
00:20 - execute particular code and then if
00:22 - condition two is true then i have to
00:24 - execute a particular code and then if
00:26 - condition three is true and then i have
00:28 - to
00:29 - execute a particular block of code
00:32 - so uh this can be uh this could be
00:36 - done via
00:38 - an elsif uh
00:40 - keyword okay
00:42 - so what i'll do is i'll just create a
00:44 - main function and inside the main
00:47 - function
00:48 - i'll
00:49 - create a variable that is equals to
00:52 - five
00:55 - and
00:56 - what i'll do is i will create some
00:59 - conditions
01:02 - such as if
01:05 - i is equals to 5
01:09 - then i have
01:10 - to print
01:14 - that
01:15 - i is
01:17 - fine
01:19 - okay
01:20 - and then again
01:23 - else if i'll use the keyword else if
01:26 - and then pass the
01:29 - condition if i is equals to 4
01:32 - else if i is equals to 4
01:35 - i have to
01:36 - print
01:39 - i is
01:40 - 4
01:42 - okay
01:44 - so i can do that and
01:47 - there could be as many number of if else
01:50 - block as required
01:51 - so i can
01:53 - use like here
01:56 - as many effects block i required
01:59 - else if the block i required
02:04 - so i'll just
02:06 - make that
02:09 - i is three
02:11 - okay then again
02:12 - i'll use the keyword else if
02:15 - i
02:16 - is equals to two then i have to
02:20 - print that
02:23 - i is 2
02:25 - then again
02:27 - else if
02:30 - i is equals to 1
02:33 - then i have to print
02:38 - i
02:39 - is
02:40 - one
02:41 - okay so at the end of the uh if else
02:45 - block or else if block
02:49 - we should must end with end it with the
02:52 - uh
02:53 - else statement so like what i am trying
02:56 - to say is else block is optional
02:58 - as
02:59 - said for fl statement so we can skip the
03:02 - else block in fl statement as well as
03:05 - when we use the if else ladder or
03:08 - the elsif blocks okay so i can here
03:11 - include the else statement
03:15 - or i can choose to skip that
03:18 - print
03:19 - i can
03:20 - choose the else statement like print
03:23 - i is not in
03:26 - not in one two five
03:30 - okay so
03:33 - i'll just
03:36 - change the value of i26 and then
03:39 - run this program
03:48 - so the
04:07 - so we can see here that
04:10 - the output is i is not in one two five
04:12 - as mentioned in the else statement so
04:15 - when i change the value to 5 it will
04:18 - print that i is 5
04:21 - so the conditions are evaluated
04:23 - sequentially from top to bottom
04:25 - and if a condition is evaluated as false
04:28 - the condition the execution continues
04:31 - with the evaluation of subsequent
04:33 - condition
04:34 - okay so
04:35 - from here the
04:37 - the we enter in this code and we enter
04:40 - in this effects letter
04:42 - so the first condition is evaluated and
04:45 - if the first condition is true then we
04:47 - get out of the if else letter
04:50 - and if the first condition is false
04:52 - we evaluate with the subsequent and this
04:54 - or the second condition
04:57 - okay and if the second condition if the
04:59 - uh and if any condition is true
05:02 - the corresponding block
05:04 - against the statement
05:07 - is executed and
05:08 - we are out of the if else letter and if
05:11 - none of the conditions evaluate to true
05:14 - run time minutes run time executes else
05:16 - block
05:18 - and
05:19 - that too if else block is present so as
05:23 - i change the value of i to 6 the else
05:26 - blocks else block get gets executed
05:28 - because
05:30 - every condition is false in that
05:32 - particular case
05:34 - so that was if else ladder kotlin if
05:38 - else letter
05:39 - so we can see here that the id is
05:41 - underlining this with a green
05:45 - so uh what it's what it is saying when i
05:47 - hover over it it's saying that cascade
05:49 - if should be replaced with when so don't
05:52 - you think that this code is a little bit
05:55 - of redundant like we are using lc plc lc
05:58 - a lot of times
06:00 - and
06:01 - suppose that i have 20 conditions
06:03 - so then
06:04 - i have to repeat 20 if else else if
06:07 - blocks
06:09 - so when i go to
06:13 - if
06:14 - statement and it shows that
06:17 - we should use when so now we will move
06:20 - on and study the
06:22 - keyword then
06:24 - so instead of
06:27 - doing this i'll just comment it out
06:29 - what i can do is i can
06:32 - use the keyword when
06:34 - and then uh
06:37 - and then
06:38 - what to check so like i'll just open
06:41 - parenthesis
06:43 - and
06:44 - write the variable that i have to check
06:47 - okay so when i okay
06:50 - and then
06:52 - i'll
06:53 - open this
06:56 - code
06:57 - and
07:00 - then i'll provide the values of i
07:03 - and
07:04 - if i is one okay so then i'll uh
07:07 - just use hyphen and integrate greater
07:09 - than sign
07:11 - and
07:13 - then i'll
07:14 - open a code block and then i'll write
07:19 - println
07:23 - i is one
07:25 - okay so what this when block does is
07:29 - when i went enter this when block when
07:32 - st when statement
07:34 - uh
07:34 - it assigns
07:36 - a condition that when i is 1 okay so
07:41 - when i write
07:43 - below that
07:44 - too
07:45 - and then i open a code block
07:49 - okay so whatever what it will do is
07:53 - it will
07:56 - pass the
07:57 - pass it will execute this statement when
08:00 - i is two
08:02 - okay so
08:03 - like this is just one liner code so i
08:06 - have to write just print code so i will
08:09 - not use the
08:11 - curly braces i'll just
08:14 - type that when i is 3 println i is 3
08:18 - okay when i is 4
08:20 - println i is
08:23 - 4 and when i is five
08:28 - println i is
08:30 - five
08:31 - okay so after all of this
08:34 - what i can do is
08:36 - i can
08:37 - just use an else statement so what if
08:41 - any of this is not true like i is not
08:43 - equals to one two three or four or five
08:46 - okay so i'll just use else statement and
08:49 - i'll i'll also have to use the hyphen
08:51 - and the greater than sign for that
08:53 - okay and i can use the curly braces if i
08:55 - want
08:57 - and
08:58 - i can
08:59 - write that
09:01 - i is
09:03 - not in
09:04 - like is
09:05 - not in 1 to 5.
09:08 - okay so when i execute this code
09:11 - when i execute this code
09:13 - so i is five
09:15 - and then
09:16 - we enter this uh when i co block and
09:20 - then it checks that whether i is 1 or
09:22 - not then whether i is 2 or not then
09:24 - whether i is 3 or not so
09:27 - after checking and getting this is false
09:30 - it's exact whether i is 5 or not so i is
09:33 - 5 in this case and then it prints that i
09:35 - is five and then it gets out of this
09:38 - when um
09:39 - [Music]
09:40 - when for function or when keyword okay
09:44 - so when i provide that i is equals to
09:46 - six
09:49 - okay
09:50 - and then this
09:53 - so
09:53 - i have not mentioned here what to print
09:56 - when i s 6 but i have mentioned that
09:59 - what to print when i is not in 1 to 5
10:01 - which is the else statement so
10:04 - that presents that but what happens when
10:06 - i
10:07 - doesn't i don't don't use the else else
10:10 - keyword
10:11 - okay
10:12 - so
10:13 - when i don't use the else keyword and
10:16 - the i is 6
10:19 - what happens is the codes get executed
10:22 - and
10:24 - it is it does not print anything so
10:26 - when
10:27 - else
10:28 - keyword is not required so i don't have
10:31 - to mention else keyword and it is not
10:33 - necessary but it is a good practice as
10:37 - uh if the condition is not true if any
10:39 - condition is not true there is something
10:41 - to execute
10:43 - otherwise
10:44 - nothing will be executed
10:46 - okay
10:47 - so after that
10:50 - we have nested effects
10:53 - so what happens
10:54 - if i have
10:56 - condition one
10:58 - and condition two so i have like
11:02 - if condition 1 is true then i have to
11:05 - check second condition
11:07 - so in that case
11:09 - we use nested effects
11:11 - we can nest an fl statement inside
11:14 - another fl statement
11:16 - when when we say if
11:18 - else in this context it could be if
11:21 - statement or if statement or if else if
11:24 - statement
11:25 - okay
11:27 - so
11:28 - i'll just use an example
11:31 - for this
11:32 - nested difference
11:36 - so if
11:39 - i is
11:41 - 5
11:43 - okay
11:44 - i'll use two
11:46 - okay if i is 5 and then i have to check
11:48 - that if i is odd or not
11:50 - so that doesn't make sense but for
11:53 - understanding purpose it should make
11:54 - sense so if i is
11:57 - divisible by
11:58 - if
11:59 - if i is divisible by 2 i have to check
12:01 - that so if i
12:03 - divided by 2
12:05 - is 0
12:06 - so then i is even
12:09 - so i have to print
12:11 - ln that
12:13 - i is
12:14 - five and
12:17 - even
12:19 - okay
12:20 - and i can just do that also but
12:24 - as i mentioned that using an else
12:26 - statement is a good practice
12:28 - so else
12:30 - print again
12:32 - i
12:34 - is
12:35 - 5 and
12:36 - odd and i can again use an else
12:40 - statement here that
12:44 - print helen
12:46 - i is not equal to
12:52 - five
12:53 - okay so when i run this
12:56 - function
12:57 - or run this code
12:59 - what i'll find is
13:01 - it prints the statement i is not equal
13:03 - to 5 because i have mentioned that i is
13:05 - equals to 6 i'll just go ahead and
13:07 - change the variable i is equals to 5
13:10 - and then again run this statement
13:13 - okay so i can find the output is
13:16 - i is 5 and odd because i is 5 are not
13:19 - okay
13:20 - so
13:22 - here you can see that i have nested an
13:24 - ether statement
13:26 - under an fl statement okay so if this is
13:28 - the case then i have to check that if
13:31 - this is the case or not and if this is
13:33 - not the case then i have to print this
13:35 - okay
13:36 - so this is the example for nested
13:39 - effects
13:40 - and in this video we have covered what
13:42 - is nested apples what is it letter and
13:45 - when to use when keyword thank you for
13:48 - watching this video

Cleaned transcript:

and in the previous video we have we have seen that uh what happens if we use an apple statement so if we have some condition we use an if statement so what about if i have multiple conditions like if condition one is true then i have to execute particular code and then if condition two is true then i have to execute a particular code and then if condition three is true and then i have to execute a particular block of code so uh this can be uh this could be done via an elsif uh keyword okay so what i'll do is i'll just create a main function and inside the main function i'll create a variable that is equals to five and what i'll do is i will create some conditions such as if i is equals to 5 then i have to print that i is fine okay and then again else if i'll use the keyword else if and then pass the condition if i is equals to 4 else if i is equals to 4 i have to print i is 4 okay so i can do that and there could be as many number of if else block as required so i can use like here as many effects block i required else if the block i required so i'll just make that i is three okay then again i'll use the keyword else if i is equals to two then i have to print that i is 2 then again else if i is equals to 1 then i have to print i is one okay so at the end of the uh if else block or else if block we should must end with end it with the uh else statement so like what i am trying to say is else block is optional as said for fl statement so we can skip the else block in fl statement as well as when we use the if else ladder or the elsif blocks okay so i can here include the else statement or i can choose to skip that print i can choose the else statement like print i is not in not in one two five okay so i'll just change the value of i26 and then run this program so the so we can see here that the output is i is not in one two five as mentioned in the else statement so when i change the value to 5 it will print that i is 5 so the conditions are evaluated sequentially from top to bottom and if a condition is evaluated as false the condition the execution continues with the evaluation of subsequent condition okay so from here the the we enter in this code and we enter in this effects letter so the first condition is evaluated and if the first condition is true then we get out of the if else letter and if the first condition is false we evaluate with the subsequent and this or the second condition okay and if the second condition if the uh and if any condition is true the corresponding block against the statement is executed and we are out of the if else letter and if none of the conditions evaluate to true run time minutes run time executes else block and that too if else block is present so as i change the value of i to 6 the else blocks else block get gets executed because every condition is false in that particular case so that was if else ladder kotlin if else letter so we can see here that the id is underlining this with a green so uh what it's what it is saying when i hover over it it's saying that cascade if should be replaced with when so don't you think that this code is a little bit of redundant like we are using lc plc lc a lot of times and suppose that i have 20 conditions so then i have to repeat 20 if else else if blocks so when i go to if statement and it shows that we should use when so now we will move on and study the keyword then so instead of doing this i'll just comment it out what i can do is i can use the keyword when and then uh and then what to check so like i'll just open parenthesis and write the variable that i have to check okay so when i okay and then i'll open this code and then i'll provide the values of i and if i is one okay so then i'll uh just use hyphen and integrate greater than sign and then i'll open a code block and then i'll write println i is one okay so what this when block does is when i went enter this when block when st when statement uh it assigns a condition that when i is 1 okay so when i write below that too and then i open a code block okay so whatever what it will do is it will pass the pass it will execute this statement when i is two okay so like this is just one liner code so i have to write just print code so i will not use the curly braces i'll just type that when i is 3 println i is 3 okay when i is 4 println i is 4 and when i is five println i is five okay so after all of this what i can do is i can just use an else statement so what if any of this is not true like i is not equals to one two three or four or five okay so i'll just use else statement and i'll i'll also have to use the hyphen and the greater than sign for that okay and i can use the curly braces if i want and i can write that i is not in like is not in 1 to 5. okay so when i execute this code when i execute this code so i is five and then we enter this uh when i co block and then it checks that whether i is 1 or not then whether i is 2 or not then whether i is 3 or not so after checking and getting this is false it's exact whether i is 5 or not so i is 5 in this case and then it prints that i is five and then it gets out of this when um when for function or when keyword okay so when i provide that i is equals to six okay and then this so i have not mentioned here what to print when i s 6 but i have mentioned that what to print when i is not in 1 to 5 which is the else statement so that presents that but what happens when i doesn't i don't don't use the else else keyword okay so when i don't use the else keyword and the i is 6 what happens is the codes get executed and it is it does not print anything so when else keyword is not required so i don't have to mention else keyword and it is not necessary but it is a good practice as uh if the condition is not true if any condition is not true there is something to execute otherwise nothing will be executed okay so after that we have nested effects so what happens if i have condition one and condition two so i have like if condition 1 is true then i have to check second condition so in that case we use nested effects we can nest an fl statement inside another fl statement when when we say if else in this context it could be if statement or if statement or if else if statement okay so i'll just use an example for this nested difference so if i is 5 okay i'll use two okay if i is 5 and then i have to check that if i is odd or not so that doesn't make sense but for understanding purpose it should make sense so if i is divisible by if if i is divisible by 2 i have to check that so if i divided by 2 is 0 so then i is even so i have to print ln that i is five and even okay and i can just do that also but as i mentioned that using an else statement is a good practice so else print again i is 5 and odd and i can again use an else statement here that print helen i is not equal to five okay so when i run this function or run this code what i'll find is it prints the statement i is not equal to 5 because i have mentioned that i is equals to 6 i'll just go ahead and change the variable i is equals to 5 and then again run this statement okay so i can find the output is i is 5 and odd because i is 5 are not okay so here you can see that i have nested an ether statement under an fl statement okay so if this is the case then i have to check that if this is the case or not and if this is not the case then i have to print this okay so this is the example for nested effects and in this video we have covered what is nested apples what is it letter and when to use when keyword thank you for watching this video
