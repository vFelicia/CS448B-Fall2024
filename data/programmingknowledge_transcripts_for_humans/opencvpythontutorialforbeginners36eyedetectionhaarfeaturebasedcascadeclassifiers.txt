With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in the last video we have seen
00:06 - the basics of face detection using hard
00:10 - feature-based
00:11 - cascade classifiers in this video we are
00:14 - going to extend our code to detect eyes
00:16 - using the same Harr cascade classifier
00:20 - so for that first of all you need to
00:24 - download the pre trained cross
00:27 - classifier for the eyes from the same
00:30 - source which I have shown you last time
00:32 - also which is the github repository of
00:35 - open CV again I'm going to give you this
00:39 - link in the description so you can
00:41 - directly come to this page and this time
00:44 - we are going to download this XML file
00:48 - with the name har cascade i underscore
00:52 - tree underscore eyeglass dot xml file so
00:56 - this is the pre trained classifier for
01:00 - detecting eyes so you can just click on
01:03 - draw and then save it as this same
01:08 - filename in your project okay so i have
01:12 - already downloaded this XML file you can
01:16 - see here har cascade i underscore tree
01:19 - underscore eyeglass dot xml file and now
01:21 - we are ready to write our code so this
01:25 - is the code which we have written last
01:27 - time so if you don't know how this code
01:29 - works you can see the last video I'm
01:33 - going to just extend this code to detect
01:35 - eyes so first thing first we need to
01:38 - create the Cascade classifier for the
01:43 - eyes so instead of face cascade we are
01:47 - going to name it as eye cascade and this
01:52 - filename will be the file which we have
01:55 - downloaded which is i underscore tree
01:57 - underscore eyeglass dot xml file so once
02:01 - we have our classifier then in the last
02:05 - video we have already seen how to detect
02:07 - faces so our region of interest will be
02:10 - the face this time because the
02:13 - eyes will not be present outside the
02:16 - phase right so Isis will always be
02:19 - present inside the face so our region of
02:21 - interest will be the face and face we
02:25 - have already detected last time so this
02:28 - face will be now our region of interest
02:32 - so go inside this for loop where we are
02:35 - iterating over this face variable and
02:39 - then we are going to create our ROI so
02:43 - I'm going to create this variable which
02:44 - is called our i underscore gray and this
02:49 - will be the original grayscale image
02:54 - which we have created here but we just
02:57 - want the face out of this image so we
03:00 - can just index the space using y : y
03:05 - plus h comma X :
03:09 - X plus W which is the width so this line
03:13 - is going to give us the grayscale region
03:16 - of interest but we also want the colored
03:19 - image also so we are going to just say
03:21 - our Y color which will be the colored
03:26 - our Y and here instead of gray we are
03:30 - going to take the direct image which
03:33 - will be before we have converted this BG
03:37 - our image to the grayscale image so we
03:39 - have the colored our Y and the grayscale
03:42 - our Y once we have this we will follow
03:46 - the same concept which we have applied
03:49 - for detecting the faces so so we are
03:51 - going to use this detect multiscale
03:54 - method so I'm going to just write eyes
03:58 - is equal to because we already have or I
04:02 - cascade which is a classifier so we are
04:05 - going to use this variable and then use
04:08 - this method called detect multiscale and
04:11 - then we are going to simply pass our ROI
04:16 - gray which we got using the faces now we
04:20 - are going to iterate over those
04:24 - so inside this follow we are going to
04:26 - create one more for loop to iterate over
04:28 - all the eyes which are found on the face
04:32 - so far and then this will be e X comma E
04:37 - Y comma E W comma E H for XY coordinate
04:44 - and the width and height now we will
04:46 - just say in eyes and then we are going
04:51 - to just draw this rectangle which is
04:53 - also very simple see B 2 dot rectangle
04:57 - and then we are going to pass our image
05:01 - first of all which will be our colored
05:03 - ry image which is this one so here we
05:07 - will pass this ry color and then the
05:11 - first point in the rectangle which will
05:14 - be e ex and ey so I'm going to just say
05:18 - X comma Y Y and the second point will be
05:23 - e X plus e W which is X plus width so we
05:29 - are going to just write this e X plus e
05:32 - W comma E y plus e H which is the
05:37 - y-coordinate and height the next
05:41 - parameter will be the color so let's
05:43 - provide the color let's say this will be
05:46 - 0 comma 255 comma 0 and then the next
05:51 - parameter will be the width so let's say
05:53 - width we want here is 5 so that's it so
05:57 - hopefully this code is going to work out
05:59 - of the box we don't need to do anything
06:01 - else
06:02 - we just need to define our classifier
06:06 - and then we just need to use this detect
06:10 - multiscale method to detect the eyes and
06:13 - then we just need to draw the rectangle
06:16 - on all the eyes which are detected so
06:19 - let's run this code and let's see what
06:20 - happens so we are going to see you can
06:23 - see eyes are detected but there is some
06:25 - problem because something is wrong so
06:29 - I'm going to just quit this script and
06:32 - see what's going wrong here so you can
06:35 - see this should be
06:37 - X X comma Y Y and then our problem will
06:42 - be solved hopefully so I'm going to run
06:44 - this code once again and you can see the
06:47 - eyes are properly detected so this is
06:49 - how you can detect eyes in the face
06:53 - using open CV and heart cascade
06:56 - classifiers I hope you've enjoyed this
06:58 - video and I will see you in the next
07:00 - video
07:09 - you

Cleaned transcript:

hey guys welcome to the next video on open CV tutorial for beginners using Python in the last video we have seen the basics of face detection using hard featurebased cascade classifiers in this video we are going to extend our code to detect eyes using the same Harr cascade classifier so for that first of all you need to download the pre trained cross classifier for the eyes from the same source which I have shown you last time also which is the github repository of open CV again I'm going to give you this link in the description so you can directly come to this page and this time we are going to download this XML file with the name har cascade i underscore tree underscore eyeglass dot xml file so this is the pre trained classifier for detecting eyes so you can just click on draw and then save it as this same filename in your project okay so i have already downloaded this XML file you can see here har cascade i underscore tree underscore eyeglass dot xml file and now we are ready to write our code so this is the code which we have written last time so if you don't know how this code works you can see the last video I'm going to just extend this code to detect eyes so first thing first we need to create the Cascade classifier for the eyes so instead of face cascade we are going to name it as eye cascade and this filename will be the file which we have downloaded which is i underscore tree underscore eyeglass dot xml file so once we have our classifier then in the last video we have already seen how to detect faces so our region of interest will be the face this time because the eyes will not be present outside the phase right so Isis will always be present inside the face so our region of interest will be the face and face we have already detected last time so this face will be now our region of interest so go inside this for loop where we are iterating over this face variable and then we are going to create our ROI so I'm going to create this variable which is called our i underscore gray and this will be the original grayscale image which we have created here but we just want the face out of this image so we can just index the space using y y plus h comma X X plus W which is the width so this line is going to give us the grayscale region of interest but we also want the colored image also so we are going to just say our Y color which will be the colored our Y and here instead of gray we are going to take the direct image which will be before we have converted this BG our image to the grayscale image so we have the colored our Y and the grayscale our Y once we have this we will follow the same concept which we have applied for detecting the faces so so we are going to use this detect multiscale method so I'm going to just write eyes is equal to because we already have or I cascade which is a classifier so we are going to use this variable and then use this method called detect multiscale and then we are going to simply pass our ROI gray which we got using the faces now we are going to iterate over those so inside this follow we are going to create one more for loop to iterate over all the eyes which are found on the face so far and then this will be e X comma E Y comma E W comma E H for XY coordinate and the width and height now we will just say in eyes and then we are going to just draw this rectangle which is also very simple see B 2 dot rectangle and then we are going to pass our image first of all which will be our colored ry image which is this one so here we will pass this ry color and then the first point in the rectangle which will be e ex and ey so I'm going to just say X comma Y Y and the second point will be e X plus e W which is X plus width so we are going to just write this e X plus e W comma E y plus e H which is the ycoordinate and height the next parameter will be the color so let's provide the color let's say this will be 0 comma 255 comma 0 and then the next parameter will be the width so let's say width we want here is 5 so that's it so hopefully this code is going to work out of the box we don't need to do anything else we just need to define our classifier and then we just need to use this detect multiscale method to detect the eyes and then we just need to draw the rectangle on all the eyes which are detected so let's run this code and let's see what happens so we are going to see you can see eyes are detected but there is some problem because something is wrong so I'm going to just quit this script and see what's going wrong here so you can see this should be X X comma Y Y and then our problem will be solved hopefully so I'm going to run this code once again and you can see the eyes are properly detected so this is how you can detect eyes in the face using open CV and heart cascade classifiers I hope you've enjoyed this video and I will see you in the next video you
