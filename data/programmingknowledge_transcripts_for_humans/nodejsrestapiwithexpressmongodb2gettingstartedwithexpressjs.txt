With timestamps:

00:00 - hey guys in this video we are going to
00:02 - create a server using Express library
00:04 - right now I have created the file app
00:06 - torches and I'm going to initializing
00:10 - him into my folder using NPM any tests
00:14 - way because explosives library is going
00:18 - to install from in him so now we are
00:21 - going to install NPM we haven't
00:25 - installed expenses level NPM using NPM
00:29 - install and saving destice self and
00:36 - expressed in the meantime we are going
00:42 - to create a cost let's say Express and
00:47 - acquiring the module Express and also an
00:56 - app Const which is going to use Express
01:03 - as a function and app is going to listen
01:09 - to a port number let's say 3000 so
01:14 - that's it the server has been created
01:16 - and you can see that Express library is
01:20 - also pink installed here so for
01:24 - convenience I'm going to start the
01:26 - syllable using a node 1 and the file it
01:31 - is no add one app touch yes and now we
01:36 - are going to see what how this
01:39 - expressive works well Express uses a
01:42 - concept called middleware well each
01:45 - request is going to go through the
01:47 - middleware and response is going to set
01:50 - through from it so it uses a set of
01:55 - middlewares so now we are going to see
01:58 - how it's been done let's so let's say
02:02 - app is using a function that's just a
02:06 - used function and its uses a request
02:11 - handler for this the step two arguments
02:16 - necessarily that is request response and
02:19 - the next is a next function which is
02:24 - used for sending the next middle voice
02:28 - to sending the function to sending the
02:31 - request to the next middleware so how
02:34 - it's being used we can see through by
02:36 - creating a new request and next and now
02:45 - if i console here that let's say first
02:52 - middleware first middleware and let's
02:58 - say here console.log second middleware
03:06 - second middleware and if I run this file
03:14 - you will see this that this only file
03:18 - will be done this only middle available
03:19 - a run this will not run so for executing
03:23 - after this me deliver to this the next
03:27 - function is used but let's see what will
03:30 - happen right now
03:31 - so let's NPM start this file not one is
03:38 - starting the file and let's say
03:42 - localhost 3,000 and right now there is
03:46 - no response is being sent so it's like
03:49 - the same river hand handling the
03:51 - response so that is the first middle of
03:54 - a first middleware so if I write next
03:58 - here you will see that if i refresh the
04:03 - auto restart and what more you will see
04:06 - that if I again localhost 3000 you will
04:11 - see the first second middleware is being
04:13 - ranked that means this middleware then
04:16 - after this malware but if I select the
04:20 - page like slash product page this will
04:23 - also go to this
04:24 - middleware and if I select / software
04:27 - this will also go to this middleware
04:30 - so for selecting a specific pace we are
04:35 - going to use the route concept here
04:38 - so before request before a callback
04:43 - function there is a route options is
04:47 - being here used so if I let's type ad
04:50 - product here and here it's less because
05:01 - it's going to be on home page and we are
05:04 - going to remove the next because it's
05:06 - not going to be executed after this
05:10 - believer to this so no let's response
05:14 - back to it
05:18 - HTML tag let's say here a form tag so
05:29 - now I'm going to create a form tag which
05:32 - takes input let's have a type let's call
05:37 - text and also a name that's called title
05:45 - and this is wrong because we are we are
05:49 - going to use inverted and also say
05:53 - inverted and now also a button is being
06:01 - used here and it's submit button and
06:08 - also we are going to send back this
06:12 - result using the action to product
06:22 - product base which is a method post
06:30 - so if this will run then it will go to
06:33 - the product route so we are going to
06:37 - create a new road let's call it AB dot u
06:41 - is product which takes request/response
06:47 - and next and it's a callback function
06:53 - and it will redirect to sorry
07:01 - it will response back with a redirection
07:04 - to a slash space and also we are going
07:10 - to response back with h1 tag like hello
07:18 - from Express Cheers
07:25 - now if I save this file and if I go to
07:31 - the localhost 3,000 page it will say
07:35 - local hello from X places and if I go to
07:39 - the add product add product page it will
07:45 - show the form tag and if I type books
07:50 - and it's submit it will go redirect to
07:54 - the experts J's file now what's the
07:58 - response sent back with the form Tech
08:01 - well it's supposed paste and it will
08:04 - send to the product page product route
08:07 - so if I see what's the requests getting
08:11 - to it'll get into the body so that can
08:14 - be seen through the twisted body but it
08:17 - will not give the correct answer that
08:23 - the correct solution that is required
08:25 - here so if I seek add product here and
08:28 - go to the books type books here you will
08:33 - see that it gives undefined well the
08:37 - response is being sent to through a JSON
08:41 - format so we are going to
08:44 - use another functionality that is given
08:48 - by Express status Express dot URL
08:53 - encoded with extended true now if I type
09:00 - this and and if I go to the head product
09:05 - page and if I type box right now you can
09:12 - see that it gives the consult or
09:14 - requested pardhu fine we can also send
09:20 - file through the response so let's
09:23 - create files HTML files so let's save
09:29 - views we are going to create the views
09:31 - folder in which there will be a product
09:34 - piece let's say product dot chest pass
09:40 - or dot HTML and another one is swap
09:49 - taught HTML and so had created two files
10:00 - that is product dot HTML and so up put
10:04 - HTML the same way you can create into
10:07 - your own laptop or desktop so the
10:12 - functionality who's being quaint used
10:14 - here like we are going to remove the
10:18 - response thought sent metal and we're
10:22 - going to respond start sent file so how
10:27 - it's being used here for using this we
10:32 - are going to use the core module it is
10:36 - part here and we are going to get from
10:42 - part and this is used to part
10:49 - dot join is going to join the directory
10:56 - but that is where is the product of HTML
11:00 - set so we are the turn name that we have
11:05 - used is going to give the directory name
11:08 - or the full part of the expressed demo
11:12 - and we are going to the views folder and
11:18 - it's going to select the product dot
11:25 - HTML page and for this bit for this
11:32 - middleware we are going to send the file
11:39 - we're going to send file using part
11:45 - toward join and using the third name and
11:52 - go to the views and selecting the stop
12:00 - dot HTML file so now if I now if I run
12:10 - this file we are going to see if I go to
12:14 - localhost 3000 and select add product is
12:19 - going to go to the add product page and
12:22 - if I type again books here you will see
12:26 - that it is going to redirect to the
12:28 - localhost 3000 and say the title is the
12:33 - book but you can see that if all the
12:37 - functionality is going to the in the one
12:40 - file it's going to get very lengthy so
12:42 - Express provides and another module or a
12:48 - function that's called routers which is
12:51 - used as a mini Express for the folder
12:56 - for functionality so if I creative like
13:00 - folder like router
13:03 - because this because we know that this
13:07 - is used for the product phase and this
13:10 - is used for a homepage so we are going
13:14 - to create a folder for this or a file
13:19 - that is that all the functionality will
13:21 - be reside on that file and this when
13:24 - this functionality will be decided on
13:26 - one file so let's say here like say
13:31 - product dot Cheers
13:35 - and here also you file shop tour Cheers
13:42 - so for requiring the router concern we
13:48 - are going to import the Express module
13:53 - for the Express module to require we are
13:56 - going to express and for requiring the
14:01 - router let's say the name will be router
14:03 - and we are going to use Express dot
14:10 - router for this this will not be changed
14:13 - this is fixed so now if I cut this lines
14:21 - from here and paste into this file and
14:27 - let's say and let's also change the name
14:33 - up to the router also this one to the
14:38 - router now if I module use module dot
14:44 - exports and export a router file from
14:49 - here and also for the app we are going
14:53 - to cut from here and paste into the
15:00 - table dot s jjs file and also require
15:05 - the same functions same libraries like
15:09 - expressed and also requiring that
15:15 - outer from Express using Express dot
15:21 - router also changing the name app to the
15:27 - router and also exporting this one the
15:36 - file explorer module dot exports and we
15:41 - are going to require from here so let's
15:44 - say Const product router is going to get
16:01 - required from dot slash router slash
16:09 - product and also const so router from
16:19 - [Music]
16:22 - requiring the file from dot slash router
16:26 - and soap and after that we are going to
16:35 - use the router here AB dot use product
16:40 - router and also the soap router and
16:57 - all the files are being saved and now if
17:01 - I run again look at those 3000 it will
17:05 - give the same thing and if I type again
17:10 - books it will give the books so this is
17:18 - the basic of Express chase and it will
17:23 - come very handy in the next video so
17:27 - thank you

Cleaned transcript:

hey guys in this video we are going to create a server using Express library right now I have created the file app torches and I'm going to initializing him into my folder using NPM any tests way because explosives library is going to install from in him so now we are going to install NPM we haven't installed expenses level NPM using NPM install and saving destice self and expressed in the meantime we are going to create a cost let's say Express and acquiring the module Express and also an app Const which is going to use Express as a function and app is going to listen to a port number let's say 3000 so that's it the server has been created and you can see that Express library is also pink installed here so for convenience I'm going to start the syllable using a node 1 and the file it is no add one app touch yes and now we are going to see what how this expressive works well Express uses a concept called middleware well each request is going to go through the middleware and response is going to set through from it so it uses a set of middlewares so now we are going to see how it's been done let's so let's say app is using a function that's just a used function and its uses a request handler for this the step two arguments necessarily that is request response and the next is a next function which is used for sending the next middle voice to sending the function to sending the request to the next middleware so how it's being used we can see through by creating a new request and next and now if i console here that let's say first middleware first middleware and let's say here console.log second middleware second middleware and if I run this file you will see this that this only file will be done this only middle available a run this will not run so for executing after this me deliver to this the next function is used but let's see what will happen right now so let's NPM start this file not one is starting the file and let's say localhost 3,000 and right now there is no response is being sent so it's like the same river hand handling the response so that is the first middle of a first middleware so if I write next here you will see that if i refresh the auto restart and what more you will see that if I again localhost 3000 you will see the first second middleware is being ranked that means this middleware then after this malware but if I select the page like slash product page this will also go to this middleware and if I select / software this will also go to this middleware so for selecting a specific pace we are going to use the route concept here so before request before a callback function there is a route options is being here used so if I let's type ad product here and here it's less because it's going to be on home page and we are going to remove the next because it's not going to be executed after this believer to this so no let's response back to it HTML tag let's say here a form tag so now I'm going to create a form tag which takes input let's have a type let's call text and also a name that's called title and this is wrong because we are we are going to use inverted and also say inverted and now also a button is being used here and it's submit button and also we are going to send back this result using the action to product product base which is a method post so if this will run then it will go to the product route so we are going to create a new road let's call it AB dot u is product which takes request/response and next and it's a callback function and it will redirect to sorry it will response back with a redirection to a slash space and also we are going to response back with h1 tag like hello from Express Cheers now if I save this file and if I go to the localhost 3,000 page it will say local hello from X places and if I go to the add product add product page it will show the form tag and if I type books and it's submit it will go redirect to the experts J's file now what's the response sent back with the form Tech well it's supposed paste and it will send to the product page product route so if I see what's the requests getting to it'll get into the body so that can be seen through the twisted body but it will not give the correct answer that the correct solution that is required here so if I seek add product here and go to the books type books here you will see that it gives undefined well the response is being sent to through a JSON format so we are going to use another functionality that is given by Express status Express dot URL encoded with extended true now if I type this and and if I go to the head product page and if I type box right now you can see that it gives the consult or requested pardhu fine we can also send file through the response so let's create files HTML files so let's save views we are going to create the views folder in which there will be a product piece let's say product dot chest pass or dot HTML and another one is swap taught HTML and so had created two files that is product dot HTML and so up put HTML the same way you can create into your own laptop or desktop so the functionality who's being quaint used here like we are going to remove the response thought sent metal and we're going to respond start sent file so how it's being used here for using this we are going to use the core module it is part here and we are going to get from part and this is used to part dot join is going to join the directory but that is where is the product of HTML set so we are the turn name that we have used is going to give the directory name or the full part of the expressed demo and we are going to the views folder and it's going to select the product dot HTML page and for this bit for this middleware we are going to send the file we're going to send file using part toward join and using the third name and go to the views and selecting the stop dot HTML file so now if I now if I run this file we are going to see if I go to localhost 3000 and select add product is going to go to the add product page and if I type again books here you will see that it is going to redirect to the localhost 3000 and say the title is the book but you can see that if all the functionality is going to the in the one file it's going to get very lengthy so Express provides and another module or a function that's called routers which is used as a mini Express for the folder for functionality so if I creative like folder like router because this because we know that this is used for the product phase and this is used for a homepage so we are going to create a folder for this or a file that is that all the functionality will be reside on that file and this when this functionality will be decided on one file so let's say here like say product dot Cheers and here also you file shop tour Cheers so for requiring the router concern we are going to import the Express module for the Express module to require we are going to express and for requiring the router let's say the name will be router and we are going to use Express dot router for this this will not be changed this is fixed so now if I cut this lines from here and paste into this file and let's say and let's also change the name up to the router also this one to the router now if I module use module dot exports and export a router file from here and also for the app we are going to cut from here and paste into the table dot s jjs file and also require the same functions same libraries like expressed and also requiring that outer from Express using Express dot router also changing the name app to the router and also exporting this one the file explorer module dot exports and we are going to require from here so let's say Const product router is going to get required from dot slash router slash product and also const so router from requiring the file from dot slash router and soap and after that we are going to use the router here AB dot use product router and also the soap router and all the files are being saved and now if I run again look at those 3000 it will give the same thing and if I type again books it will give the books so this is the basic of Express chase and it will come very handy in the next video so thank you
