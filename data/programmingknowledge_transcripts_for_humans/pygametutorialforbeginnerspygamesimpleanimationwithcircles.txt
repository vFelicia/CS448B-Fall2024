With timestamps:

00:03 - hey everyone by now we have seen several
00:06 - applications of fire game we have
00:08 - practiced a lot we made designs using
00:10 - the arrow keys displayed user inputs on
00:13 - screen we also made buttons in pi game
00:16 - in the last video
00:17 - today we will program an animated circle
00:20 - so the circle would move around on the
00:22 - pi key window
00:24 - let's write the code for it
00:26 - i'll import pygame
00:30 - initialize it then i'll write pi game
00:33 - dot init
00:34 - then i'll set up the screen
00:36 - write screen equals buy game dot display
00:40 - dot set mode that the screen size be 500
00:43 - comma 500
00:44 - then i'll also given a caption i'll
00:46 - write my game dot display
00:48 - dot set caption
00:51 - let the caption be animated circle
00:55 - and then i'll go to my game loop i'll
00:58 - write while true
00:59 - you should be very comfortable doing all
01:01 - this because by now we have written this
01:03 - a lot of times
01:05 - and then i'll have my for loop i'll
01:07 - write four events
01:09 - and buy game dot event dot get
01:14 - i'll check if events type
01:16 - equals by game dot quit
01:20 - then i'll quit
01:22 - i'll call the quit function by piking
01:24 - and i'll go
01:26 - i'll update the screen
01:28 - right by game dot display dot update
01:33 - that's the basic framework let's get to
01:35 - the main code since i want my circle to
01:38 - move around i'll lead its initial
01:40 - position let that initial position be 5
01:42 - x comma y
01:44 - and
01:44 - equal to 200 200 you can take any
01:48 - starting position i have taken 200 comma
01:50 - 200
01:51 - then
01:52 - i also need to set up the speed
01:55 - along both the directions
01:57 - so along x direction let it be x b
02:00 - and let x v be equal to 5
02:03 - and along
02:04 - y direction let it be y v and equal to
02:07 - -5 so what is this clause of plus and
02:10 - minus if you're giving the speed along
02:13 - the x-direction as
02:14 - positive it should your object should go
02:17 - towards right otherwise it should go to
02:19 - left if the speed is negative similarly
02:23 - for y direction if you're giving the
02:25 - speed to be negative it should go
02:26 - upwards and if it is positive the speed
02:29 - is positive
02:30 - the object will go downwards okay
02:33 - so the speed would tell you how much the
02:36 - displacement would be at a time
02:38 - and i'll have my clock object i'll write
02:40 - clock equals by game dot time dot clock
02:44 - to set up the frame frame rate later
02:47 - now i'll have a screen color i'll write
02:50 - screen
02:52 - dot fill
02:54 - so let me fill my screen with color sky
02:56 - blue
02:59 - then
03:00 - i'll also need to draw
03:02 - the circle i need i need to move around
03:05 - so
03:06 - i'll write pie game dot raw dot circle
03:10 - and screen is the surface i'm gonna draw
03:12 - on
03:13 - and the color that will be
03:16 - orange then the center coordinates are
03:19 - given by x and y x comma y
03:22 - then this radius let it be 10 units okay
03:26 - now after this for loop outside this
03:29 - i'll
03:30 - increment the x and y coordinates
03:33 - so that i can see my circle moving on
03:36 - the screen
03:37 - so i'll write x
03:40 - plus equals
03:42 - x v i've incremented x coordinate with x
03:46 - cube v units by x p units and similarly
03:49 - for y i'll write y plus equals
03:52 - y v
03:54 - and to keep these x coordinates
03:57 - x and y coordinates within the
03:58 - boundaries within the screen
04:01 - right
04:02 - if x is greater than 490 or x is less
04:05 - than 10
04:09 - i'll change the direction okay how do i
04:11 - do that i'll change the sign okay
04:14 - i'll change the sign of the speed you
04:16 - can even relocate the
04:18 - position but that would look like the
04:21 - circle is appearing out of nowhere
04:24 - at a certain
04:25 - position that won't look nice so i want
04:29 - the motion to be regular and fine
04:32 - so that's why i'd be changing the
04:33 - direction rather than
04:35 - reallocating that coordinate okay
04:38 - similarly for y i'll write if y is
04:41 - greater than 490 i'm keeping a margin of
04:44 - 10 units or y is less than 10
04:48 - i'll change the y d
04:51 - cool now after that i'll update
04:55 - and
04:56 - have my clock object i'll write clocked
04:59 - optic
05:01 - let the frame rate be 50.
05:03 - let's run it and see if we get what we
05:06 - really want to see
05:08 - if we can see our circle moving
05:09 - uniformly
05:11 - let's run this
05:14 - now if i run this i can see my circle
05:16 - moving around in various directions
05:18 - changing its direction as it hits the
05:22 - boundaries and everything works fine if
05:25 - i quit the screen goes away
05:27 - so this motion of the circle is not
05:29 - defined
05:31 - in the next video we will define this
05:34 - motion of the circle
05:36 - the path along which the circle moves
05:38 - would be some function
05:40 - so
05:41 - this was pretty much it for this video
05:44 - i hope you understood whatever we did
05:47 - thank you

Cleaned transcript:

hey everyone by now we have seen several applications of fire game we have practiced a lot we made designs using the arrow keys displayed user inputs on screen we also made buttons in pi game in the last video today we will program an animated circle so the circle would move around on the pi key window let's write the code for it i'll import pygame initialize it then i'll write pi game dot init then i'll set up the screen write screen equals buy game dot display dot set mode that the screen size be 500 comma 500 then i'll also given a caption i'll write my game dot display dot set caption let the caption be animated circle and then i'll go to my game loop i'll write while true you should be very comfortable doing all this because by now we have written this a lot of times and then i'll have my for loop i'll write four events and buy game dot event dot get i'll check if events type equals by game dot quit then i'll quit i'll call the quit function by piking and i'll go i'll update the screen right by game dot display dot update that's the basic framework let's get to the main code since i want my circle to move around i'll lead its initial position let that initial position be 5 x comma y and equal to 200 200 you can take any starting position i have taken 200 comma 200 then i also need to set up the speed along both the directions so along x direction let it be x b and let x v be equal to 5 and along y direction let it be y v and equal to 5 so what is this clause of plus and minus if you're giving the speed along the xdirection as positive it should your object should go towards right otherwise it should go to left if the speed is negative similarly for y direction if you're giving the speed to be negative it should go upwards and if it is positive the speed is positive the object will go downwards okay so the speed would tell you how much the displacement would be at a time and i'll have my clock object i'll write clock equals by game dot time dot clock to set up the frame frame rate later now i'll have a screen color i'll write screen dot fill so let me fill my screen with color sky blue then i'll also need to draw the circle i need i need to move around so i'll write pie game dot raw dot circle and screen is the surface i'm gonna draw on and the color that will be orange then the center coordinates are given by x and y x comma y then this radius let it be 10 units okay now after this for loop outside this i'll increment the x and y coordinates so that i can see my circle moving on the screen so i'll write x plus equals x v i've incremented x coordinate with x cube v units by x p units and similarly for y i'll write y plus equals y v and to keep these x coordinates x and y coordinates within the boundaries within the screen right if x is greater than 490 or x is less than 10 i'll change the direction okay how do i do that i'll change the sign okay i'll change the sign of the speed you can even relocate the position but that would look like the circle is appearing out of nowhere at a certain position that won't look nice so i want the motion to be regular and fine so that's why i'd be changing the direction rather than reallocating that coordinate okay similarly for y i'll write if y is greater than 490 i'm keeping a margin of 10 units or y is less than 10 i'll change the y d cool now after that i'll update and have my clock object i'll write clocked optic let the frame rate be 50. let's run it and see if we get what we really want to see if we can see our circle moving uniformly let's run this now if i run this i can see my circle moving around in various directions changing its direction as it hits the boundaries and everything works fine if i quit the screen goes away so this motion of the circle is not defined in the next video we will define this motion of the circle the path along which the circle moves would be some function so this was pretty much it for this video i hope you understood whatever we did thank you
