With timestamps:

00:01 - hello guys welcome once again in the
00:02 - last video I have shown you how to use
00:04 - inheritance in
00:07 - C++ and I have shown you how you can
00:10 - create a base class and create a derived
00:14 - class from which you can inherit from
00:17 - base class so we have seen in the last
00:21 - video that uh our shape is our Base
00:24 - Class I have uh given you an example of
00:27 - this polygon and
00:30 - types of polygon right and the polygon
00:34 - for example shape class was our Base
00:38 - Class and the rectangle which was
00:42 - inheriting this shape class was the
00:46 - derived class right so we were just
00:50 - calculating the area of rectangle using
00:53 - uh The Inheritance uh
00:57 - method in this uh uh example right if
01:01 - you haven't remember this uh example
01:05 - just watch the last video and in this
01:07 - video I'm going to show you that it's
01:10 - not only that you can inherit from one
01:13 - class it's uh also allowed to multiple
01:18 - inheritance or inherit from multiple
01:21 - classes in
01:23 - C++
01:25 - so if you remember we have created in
01:28 - the last video a shape class visual was
01:30 - our Base Class and rectangle class which
01:32 - was our derived class let's create one
01:37 - more Base Class for example
01:41 - class and I will name it
01:46 - as description which will give us the
01:50 - description of
01:53 - any any class right and what I'm going
01:57 - to do is I'm going to create uh
02:01 - simple
02:02 - program
02:04 - print and what it takes it takes uh
02:12 - string which gives us the
02:21 - description okay so and what I'm going
02:25 - to do is I'm going to Sprint
02:28 - STD see
02:34 - out and then I'm going to
02:38 - print
02:40 - we are
02:44 - using and then I'm going to give the
02:47 - space and I'm going to use this
02:50 - description variable which I'm passing
02:52 - it as an
02:55 - argument uh and I can just say
03:03 - class okay and I will end
03:10 - line okay so this is a very simple class
03:13 - uh let me give the xess modifier
03:19 - also okay so this is a very simple base
03:23 - class and what it does is it just gives
03:25 - us the
03:27 - description of uh whatever we pass as an
03:31 - argument right so one class which is a
03:37 - shape class uh we have used this class
03:41 - in the last video as a base class and
03:43 - for example we want to use this
03:46 - description class also as a base class
03:49 - for our rectangle class so what we can
03:53 - do we can multiple inherit from
03:58 - uh shape class as well as your
04:01 - description class and how you can do you
04:05 - can just separate your
04:07 - inheritance by a comma or in uh base
04:11 - classes by a comma so
04:15 - now this rectangle is um inheriting from
04:21 - shape class as well as description class
04:25 - but don't forget to give this excess
04:27 - specifier to every
04:30 - a base class here
04:33 - okay
04:34 - so we are inheriting from two classes
04:38 - and now in the main I have created if
04:41 - you have remembered that I have created
04:44 - uh uh object called rectangle Rec and I
04:49 - can calculate or set the values using
04:52 - this um set Value method from our shape
04:58 - based class right so from our rectangle
05:01 - object which is a object of our
05:03 - rectangle class we can access the method
05:07 - from the base class which was the shape
05:10 - class in a similar way we can access the
05:13 - method from description class from or by
05:18 - using the object of our rectangle class
05:21 - because we are inheriting from our
05:25 - description class into the rectangle
05:28 - class also right
05:31 - so what we can do
05:33 - is we can
05:36 - just in the next line we can use this
05:41 - rectangle class or object and we can
05:45 - whenever we just write dot separator we
05:48 - can see the print method is also
05:51 - available which is a method we have
05:53 - defined in description class right but
05:55 - because we are inheriting from
05:57 - description class it's available to the
06:00 - object of your rectangle class also just
06:05 - use this
06:07 - and you can just give a string as a
06:10 - parameter and for example I can
06:16 - say
06:18 - rectangle okay so we passed rectangle as
06:22 - a parameter now I'm going to run the
06:26 - program I need to build it first and
06:29 - then run the
06:34 - program now I'm going to run this and
06:37 - now you can see we are using rectangle
06:39 - class right so in this way you can
06:44 - inheriting inherit from multiple classes
06:48 - and all the function or member function
06:52 - or member variables are available for us
06:56 - usage by the instance of of the derived
07:00 - class also okay so this is from The Base
07:04 - Class function right this uh in the last
07:07 - video we have seen this we have defined
07:09 - in the base class in a similar way this
07:12 - print method we have defined in the Base
07:14 - Class called description we haven't
07:16 - defined any print method in the
07:19 - rectangle class but even though even
07:22 - then also we will be able to use this um
07:26 - print method from the
07:28 - description class because we are
07:31 - inheriting from the description class in
07:35 - the rectangle class and whenever we
07:39 - inherit the public and protected members
07:42 - of the base class are available for user
07:47 - use to the derived class okay so in this
07:51 - way you can do multiple inheritance in
07:54 - C++ I hope you have enjoyed this video
07:57 - please wait comment and subscribe and
07:58 - bye for now oh

Cleaned transcript:

hello guys welcome once again in the last video I have shown you how to use inheritance in C++ and I have shown you how you can create a base class and create a derived class from which you can inherit from base class so we have seen in the last video that uh our shape is our Base Class I have uh given you an example of this polygon and types of polygon right and the polygon for example shape class was our Base Class and the rectangle which was inheriting this shape class was the derived class right so we were just calculating the area of rectangle using uh The Inheritance uh method in this uh uh example right if you haven't remember this uh example just watch the last video and in this video I'm going to show you that it's not only that you can inherit from one class it's uh also allowed to multiple inheritance or inherit from multiple classes in C++ so if you remember we have created in the last video a shape class visual was our Base Class and rectangle class which was our derived class let's create one more Base Class for example class and I will name it as description which will give us the description of any any class right and what I'm going to do is I'm going to create uh simple program print and what it takes it takes uh string which gives us the description okay so and what I'm going to do is I'm going to Sprint STD see out and then I'm going to print we are using and then I'm going to give the space and I'm going to use this description variable which I'm passing it as an argument uh and I can just say class okay and I will end line okay so this is a very simple class uh let me give the xess modifier also okay so this is a very simple base class and what it does is it just gives us the description of uh whatever we pass as an argument right so one class which is a shape class uh we have used this class in the last video as a base class and for example we want to use this description class also as a base class for our rectangle class so what we can do we can multiple inherit from uh shape class as well as your description class and how you can do you can just separate your inheritance by a comma or in uh base classes by a comma so now this rectangle is um inheriting from shape class as well as description class but don't forget to give this excess specifier to every a base class here okay so we are inheriting from two classes and now in the main I have created if you have remembered that I have created uh uh object called rectangle Rec and I can calculate or set the values using this um set Value method from our shape based class right so from our rectangle object which is a object of our rectangle class we can access the method from the base class which was the shape class in a similar way we can access the method from description class from or by using the object of our rectangle class because we are inheriting from our description class into the rectangle class also right so what we can do is we can just in the next line we can use this rectangle class or object and we can whenever we just write dot separator we can see the print method is also available which is a method we have defined in description class right but because we are inheriting from description class it's available to the object of your rectangle class also just use this and you can just give a string as a parameter and for example I can say rectangle okay so we passed rectangle as a parameter now I'm going to run the program I need to build it first and then run the program now I'm going to run this and now you can see we are using rectangle class right so in this way you can inheriting inherit from multiple classes and all the function or member function or member variables are available for us usage by the instance of of the derived class also okay so this is from The Base Class function right this uh in the last video we have seen this we have defined in the base class in a similar way this print method we have defined in the Base Class called description we haven't defined any print method in the rectangle class but even though even then also we will be able to use this um print method from the description class because we are inheriting from the description class in the rectangle class and whenever we inherit the public and protected members of the base class are available for user use to the derived class okay so in this way you can do multiple inheritance in C++ I hope you have enjoyed this video please wait comment and subscribe and bye for now oh
