With timestamps:

00:00 - hello guys welcome to the next video
00:02 - tutorial on C programming for beginners
00:05 - and in this video we will discuss about
00:07 - scope rules in
00:09 - C now there are two kind of uh variable
00:13 - declaration in C one is called a local
00:17 - variable which we have been seeing in
00:20 - our
00:21 - tutorial and one is called Global
00:24 - variable so for example local variable
00:28 - is a variable which you declare inside
00:32 - some function so inside for example in
00:35 - main you can declare in a is equal to 10
00:41 - it's called a local variable okay so
00:45 - what it's
00:47 - called
00:50 - local variable okay now whenever you
00:56 - declare a variable which is not in
00:59 - inside any function it's called a global
01:04 - variable okay so for example I declare a
01:07 - function which is not inside main or I
01:11 - will declare one more function in for
01:14 - example or
01:16 - void
01:19 - vo
01:21 - number print it doesn't take any
01:26 - argument and it prints something okay
01:29 - okay and here we can declare a variable
01:32 - called X or a variable called int or any
01:37 - variable in a and this is also a local
01:41 - local variable right because it's
01:44 - declared inside your function but
01:48 - whenever you declare a variable for
01:51 - example
01:52 - int G it's called a global variable okay
01:57 - which is not uh inside any function
02:00 - and what is difference between Global
02:02 - and local variable is a local variable
02:06 - is only uh valid inside your function so
02:12 - it's local to your function so you
02:15 - cannot use this a inside this
02:20 - number or you cannot this use this x
02:24 - inside this main function or anywhere
02:27 - else but on the other hand a global
02:31 - variable is visible to every function in
02:34 - our program so you can use this Global
02:38 - variable here also and here also now
02:43 - let's see what uh I mean by that so for
02:47 - example I want to print or I declare
02:50 - Global variable as
02:53 - 0o or for example I just declare a
02:56 - global variable and just remember uh uh
03:00 - I will just comment
03:05 - here
03:07 - Global variable and always remember
03:10 - whenever you declare a global variable
03:13 - and it's initialized by zero if it's int
03:18 - float or double it's already initialized
03:21 - by zero you don't need to initialize it
03:23 - by zero but a local variable whenever
03:28 - you declare it the like this
03:30 - it's not initialized by zero so this
03:34 - variable can contain any value any
03:36 - garbage value and you may not know the
03:39 - value of this uh a so let's see first of
03:43 - all we will
03:45 - print print
03:47 - F we will print the value of uh This
03:51 - Global
03:54 - variable Global is equal to percentage d
04:00 - and this should be percentage D without
04:04 - space and comma G we are printing this
04:09 - value right in the same uh way we will
04:13 - print this local variable so we will
04:17 - write local and we will print a okay or
04:24 - let's name them uh logically so I will
04:27 - name this variable as
04:30 - Global underscore V and I will name it
04:35 - as local uncore V local underscore V uh
04:40 - stands for local variable and local un
04:43 - Global underscore v stands for Global
04:46 - variable so I use this Global variable
04:49 - to print here or let's not print it here
04:53 - but let's print this Global variable
04:55 - value in uh our main fun function
05:00 - because we are not going to call this
05:02 - function for now and this should be
05:06 - local variable and remember we haven't
05:09 - initialized this and this by any value
05:13 - let's see what happens when we run this
05:15 - program we can see that this variable
05:20 - local is equal to 77 let me give a one
05:24 - more thing here which is
05:27 - this sln to change
05:30 - line and I will run the
05:32 - program and you can see this local
05:35 - variable is printing 77 but we haven't
05:40 - initialized this local variable by any
05:42 - value so it's taking the garbage value
05:45 - but whenever you use this Global
05:47 - variable It's Always initialized by zero
05:50 - even if you haven't assigned any value
05:53 - to it so just uh remember this and if
05:57 - it's a character it will be a
06:00 - initialized by a null
06:02 - character and if it's a pointer which we
06:05 - are going to learn in next videos it
06:07 - will be initialized by a null
06:10 - pointer
06:12 - now a global variable so for example you
06:17 - decare this Global variable is equal to
06:21 - 25 here you initialized it and you also
06:26 - initialized
06:28 - uh local
06:30 - variable like this uh Global variable
06:34 - with the same name but this is is equal
06:37 - to uh 20 for example and I will just
06:40 - commend this because we don't need this
06:42 - line so what we have done we have
06:45 - initialized a Glo variable called Global
06:47 - V and initialize it by
06:50 - 25 and the same name I have given to my
06:54 - local variable now what happens in this
06:57 - case so in this this case whatever value
07:02 - is uh contained by your local variable
07:06 - even if it's uh declared with the same
07:09 - name uh globally it will the value of
07:12 - This Global V will be the value in the
07:16 - local variable right so whenever we
07:19 - print this this value will print 20 here
07:24 - so local variable is always has the
07:27 - preference over the global variable able
07:30 - if they have the same name I'll run the
07:32 - program and it says 20 instead of 25
07:37 - right now for example you want to use
07:42 - Global variable inside this function I
07:44 - will just print this
07:47 - uh here so I will print something like
07:51 - uh Global variable
07:55 - plus uh 50 for example okay
07:59 - and I will uh name it
08:02 - as
08:06 - uh Global plus 50 okay and so what this
08:14 - will do it will print whatever the value
08:17 - of global variable which is 25 plus it
08:20 - will add 50 to it and I will call this
08:23 - function
08:24 - here and it's visible to this function
08:28 - so we can see global plus 50 is 75 it's
08:31 - printing so Global variable is visible
08:34 - to uh your
08:36 - functions and all all your functions and
08:40 - uh all your uh code right but local
08:44 - variable is you know you cannot use it
08:47 - uh globally for example int uh
08:54 - num local is equal
08:58 - to uh 30 for example and if you want to
09:01 - use this local variable here you want to
09:04 - print this local
09:08 - num here it will give you compilation
09:11 - error because this variable is not
09:14 - visible to uh this main function because
09:19 - it this exist in other function other
09:22 - than main right run it and it says the
09:27 - this error and this error
09:30 - is numor local Undeclared right so you
09:36 - cannot use a local variable in your
09:40 - other functions right so these are the
09:47 - scope rules in C I hope you have enjoyed
09:50 - this video please write comment and
09:51 - subscribe and bye for now

Cleaned transcript:

hello guys welcome to the next video tutorial on C programming for beginners and in this video we will discuss about scope rules in C now there are two kind of uh variable declaration in C one is called a local variable which we have been seeing in our tutorial and one is called Global variable so for example local variable is a variable which you declare inside some function so inside for example in main you can declare in a is equal to 10 it's called a local variable okay so what it's called local variable okay now whenever you declare a variable which is not in inside any function it's called a global variable okay so for example I declare a function which is not inside main or I will declare one more function in for example or void vo number print it doesn't take any argument and it prints something okay okay and here we can declare a variable called X or a variable called int or any variable in a and this is also a local local variable right because it's declared inside your function but whenever you declare a variable for example int G it's called a global variable okay which is not uh inside any function and what is difference between Global and local variable is a local variable is only uh valid inside your function so it's local to your function so you cannot use this a inside this number or you cannot this use this x inside this main function or anywhere else but on the other hand a global variable is visible to every function in our program so you can use this Global variable here also and here also now let's see what uh I mean by that so for example I want to print or I declare Global variable as 0o or for example I just declare a global variable and just remember uh uh I will just comment here Global variable and always remember whenever you declare a global variable and it's initialized by zero if it's int float or double it's already initialized by zero you don't need to initialize it by zero but a local variable whenever you declare it the like this it's not initialized by zero so this variable can contain any value any garbage value and you may not know the value of this uh a so let's see first of all we will print print F we will print the value of uh This Global variable Global is equal to percentage d and this should be percentage D without space and comma G we are printing this value right in the same uh way we will print this local variable so we will write local and we will print a okay or let's name them uh logically so I will name this variable as Global underscore V and I will name it as local uncore V local underscore V uh stands for local variable and local un Global underscore v stands for Global variable so I use this Global variable to print here or let's not print it here but let's print this Global variable value in uh our main fun function because we are not going to call this function for now and this should be local variable and remember we haven't initialized this and this by any value let's see what happens when we run this program we can see that this variable local is equal to 77 let me give a one more thing here which is this sln to change line and I will run the program and you can see this local variable is printing 77 but we haven't initialized this local variable by any value so it's taking the garbage value but whenever you use this Global variable It's Always initialized by zero even if you haven't assigned any value to it so just uh remember this and if it's a character it will be a initialized by a null character and if it's a pointer which we are going to learn in next videos it will be initialized by a null pointer now a global variable so for example you decare this Global variable is equal to 25 here you initialized it and you also initialized uh local variable like this uh Global variable with the same name but this is is equal to uh 20 for example and I will just commend this because we don't need this line so what we have done we have initialized a Glo variable called Global V and initialize it by 25 and the same name I have given to my local variable now what happens in this case so in this this case whatever value is uh contained by your local variable even if it's uh declared with the same name uh globally it will the value of This Global V will be the value in the local variable right so whenever we print this this value will print 20 here so local variable is always has the preference over the global variable able if they have the same name I'll run the program and it says 20 instead of 25 right now for example you want to use Global variable inside this function I will just print this uh here so I will print something like uh Global variable plus uh 50 for example okay and I will uh name it as uh Global plus 50 okay and so what this will do it will print whatever the value of global variable which is 25 plus it will add 50 to it and I will call this function here and it's visible to this function so we can see global plus 50 is 75 it's printing so Global variable is visible to uh your functions and all all your functions and uh all your uh code right but local variable is you know you cannot use it uh globally for example int uh num local is equal to uh 30 for example and if you want to use this local variable here you want to print this local num here it will give you compilation error because this variable is not visible to uh this main function because it this exist in other function other than main right run it and it says the this error and this error is numor local Undeclared right so you cannot use a local variable in your other functions right so these are the scope rules in C I hope you have enjoyed this video please write comment and subscribe and bye for now
