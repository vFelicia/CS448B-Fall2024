With timestamps:

00:00 - hey guys welcome to programming
00:02 - knowledge in this video we will be
00:04 - talking about logical operators the
00:06 - previous video we load a program to
00:10 - validate the age the user does right so
00:13 - we are giving a condition like if it's
00:16 - checked whether it's a positive number
00:17 - or not and if it's a positive numbers we
00:20 - were are then checking whether it's too
00:22 - great or not if it was too great we were
00:25 - telling something like your age is not
00:28 - valid and if it was okay if it was in
00:33 - the range then we wait checking whether
00:35 - his 18 years or younger we were
00:38 - considering that the age was valid or
00:40 - else we are telling that it was a North
00:43 - Valley age right here if you observe
00:46 - this condition and this condition good
00:49 - together so if a number is positive and
00:52 - if a number is too great
00:55 - then it's not a valid number or if we
00:58 - look at the larger scope here you can
01:00 - combine these three statements if a
01:03 - number is positive and it's too great or
01:06 - if a number is negative then it's not
01:09 - valid age or else it's going to be valid
01:12 - so the way you group these conditions
01:15 - are by using logical operators so these
01:18 - are just like the color connecting words
01:21 - are used in the English statement so
01:23 - here if I talk about the condition when
01:26 - the age is not going to be valid let me
01:28 - write it down here and number as a valid
01:31 - is or a number is not a valid eight if
01:34 - it is positive and if it is to grade or
01:40 - the number is negative so this was the
01:44 - condition right so if a number is
01:46 - positive and to grade so these two
01:49 - conditions go together or the number is
01:53 - negative then the age is not value so
01:58 - this was the condition if we write it
02:01 - down in this manner it is much easier to
02:03 - write it down than this group of Nestor
02:06 - different density so the way to achieve
02:10 - these things to evaluate these
02:13 - conditions and to drawing the result of
02:15 - these two Cadiz results are joined red
02:17 - you need to take whether the number is
02:19 - positive and whether it's too great and
02:22 - you need to combine these two results
02:25 - and you are going to get a result also
02:27 - you are going to check whether the
02:28 - number is negative or not what if it's
02:30 - positive you need to check whether it's
02:32 - never too or not and then you are going
02:34 - to check these two conditions if one of
02:36 - them is true then we're going to say it
02:39 - is not valid so this is basically the
02:42 - function of logical operators so there
02:45 - are three logical operators in C++ or in
02:48 - any language these are same as the
02:50 - logical gates and physics you might have
02:53 - come across it so these are and you have
02:56 - an all and a not so not simple you might
03:00 - have there did while I was talking about
03:01 - the relational operators are was talking
03:03 - about this operator right so this one
03:05 - stands for not equal to so this
03:07 - exclamation stands for the not so this
03:10 - is not and for all we are going to put
03:12 - two vertical bars which are which you
03:15 - will see on top of the entity and here
03:19 - for an you have two ampersands the very
03:22 - important point to note here is that you
03:24 - need to use two ampersand symbols for
03:26 - hand and two vertical parts for all
03:29 - because a single version also exists so
03:33 - it in C++
03:35 - there is also an operator which is this
03:38 - one which is single hand and a single or
03:41 - so these are actually big words
03:43 - operators we need not dig deep into
03:46 - these operators because they deal with a
03:49 - binary representation of the data but
03:51 - just like your information I am telling
03:53 - these things we will talk about that in
03:55 - a later video for now we don't need
03:58 - these bitwise operators or bit
03:59 - manipulators we are only going to need
04:02 - the logical operators which are just
04:03 - going to tell the relation between two
04:05 - conditions so and this basically if 2 or
04:09 - any kind any number of condition if all
04:11 - are true then the result is true so and
04:14 - this basically if all the conditions are
04:18 - true then it's going to be true
04:23 - and for all you have if any one of the
04:29 - condition is true right if any one of
04:32 - the condition is true then the result is
04:34 - going to be true that is a specialty of
04:37 - all so you if you have n number of
04:39 - conditions even if one condition value
04:43 - gets through true then the result is
04:45 - going to be true and four and if n
04:48 - number of conditions are there all in
04:50 - number of condition should be satisfied
04:52 - then only you are going to get the true
04:54 - value or else you're going to get false
04:56 - so this is the basically the end and our
05:00 - operator Nord is just it's going to turn
05:02 - the value so notice it is going to
05:06 - change true to false and vice versa so
05:11 - the function of naught is just the
05:13 - change true to false and false to true
05:15 - all takes n number of conditions and if
05:19 - any one of the condition is true then
05:21 - the result is true and for and it is
05:24 - going to check all n number of
05:26 - conditions and if any one of them is
05:28 - false then the result is false every
05:31 - condition should be true that only an is
05:33 - going to give you a true so that is
05:36 - basically the logical operators so here
05:39 - another thing is that if you're writing
05:41 - a logical operator let's say some
05:43 - condition1 and condition2 that's how you
05:46 - represent and for all it is the same
05:49 - thing if condition 1 or condition 2 and
05:54 - not basically doesn't need two
05:56 - conditions just going to reverse the
05:57 - condition so first you put an
05:59 - exclamation mark and you put the
06:00 - condition so here if you are using an
06:02 - and operator if this condition evaluates
06:06 - to true this first condition then only
06:08 - it's going to check the second condition
06:10 - so even if the second condition is true
06:12 - if the first condition is false it is
06:15 - not going to check the second condition
06:16 - at all it's not going to perform
06:18 - anything over here so this thing with
06:21 - always it is going to check every
06:24 - condition and here if this one is true
06:27 - it is not going to check other condition
06:29 - so the condition for or is that if any
06:32 - one of the mr. right so you if it forms
06:35 - any one of the
06:36 - is true then it's going to evaluate it
06:38 - as true and this whole condition becomes
06:41 - a truth condition so this part is going
06:43 - to be executed that is with the odd so
06:45 - those are the kinda those are the
06:47 - logical operators let's take a quick
06:49 - example we are going to deal with the
06:51 - same example we took yesterday
06:53 - so here on that it will take the edge so
06:57 - enter your age and I'm going to take
07:02 - that inside a variable so in THC in age
07:04 - and here I am going to agitate the edge
07:08 - so if if age is greater than zero and
07:15 - ages greater than 102 right so this was
07:19 - the condition we gave a study or 101
07:22 - from that so let's stick with 102 now
07:24 - and if this condition if this age is
07:28 - greater than 0 and the H is greater than
07:30 - 1 0 2 so this condition is basically not
07:33 - required because if it is carried along
07:35 - 0 then only it's going to be greater
07:36 - than right I am just going to take out
07:39 - this particular condition so if the age
07:42 - is greater than 102 or if the age is
07:46 - less than 0 right so if an ages greater
07:51 - than 100 something like 100 and 102
07:54 - something like that or if the age is
07:56 - less than 0 what we are going to say you
08:00 - have not entered a valid age right and
08:09 - Oren's we are just going to perform the
08:12 - check
08:12 - so if age is greater than or equal to 18
08:16 - we're just ah let me tell you over here
08:19 - I forgot yesterday we were talking about
08:21 - the block right so here if you are only
08:25 - one statement executes then you know
08:27 - need not use a block so here I have only
08:30 - one statement X is good this is going to
08:32 - be the same thing as this one here if I
08:36 - put a block inside this and then put X
08:38 - your statement it's going to be the same
08:40 - thing but block is generally used to
08:42 - hold two or more statements if I'm going
08:45 - to use only one statement I don't need a
08:47 - block so I can just
08:49 - put this statement beside the if
08:51 - condition itself so this is also valid
08:54 - but if you write any other statement
08:56 - over here so let's say statement to if I
08:59 - write something over here this is
09:01 - actually not considered a part of this
09:04 - if statement unless and until I have a
09:06 - block something like this so here inside
09:08 - this block whatever light inside this
09:11 - block all the statements belong to this
09:13 - else statement but here since I have not
09:16 - put in block over here so this
09:18 - particular statements goes to the if
09:19 - this statement stays to the else part
09:22 - only unless and until I specify another
09:25 - block and mentioned these two things
09:27 - over here so if I put these two things
09:29 - over here now these two have become a
09:31 - part of this if statement and this whole
09:34 - if statement becomes a part of the else
09:36 - statement and here I'll put only one
09:38 - statement that is why I don't need a
09:40 - block and here if any age is greater
09:44 - than or equal to 18 I am going to say
09:47 - that you are eligible so whatever is
09:52 - equal to word something like that or
09:57 - else we are going to say sorry you are
10:07 - not Elizabeth coming that so this is the
10:12 - program we have written this is going to
10:15 - do the same thing which we had done in
10:17 - the previous video but see how small the
10:20 - program now looks so if you consider
10:22 - taking out these braces then it's going
10:25 - to look much much smaller because you
10:28 - have only one statement at the code
10:29 - inside the if block but because it many
10:34 - people tend to forget putting these
10:35 - braces for multiple statements also it
10:37 - is always advisable to put the braces
10:40 - for even one condition but generally I
10:42 - don't do that I just if there's only one
10:44 - condition I put it beside the condition
10:46 - itself for a one statement instakills I
10:48 - put it without the condition itself it's
10:50 - something you either way it's going to
10:52 - work
10:53 - so the here now let us execute it we are
10:57 - going to get the same output so here
10:59 - it's going to ask for the age so enter
11:01 - your age
11:02 - let's say one so here it says sorry you
11:06 - are not eligible and that's it
11:11 - we have created the same program but
11:12 - here it's a much smaller program than
11:15 - the previous program so that's all for
11:18 - this video in the next video we'll be
11:20 - talking about switch case statement

Cleaned transcript:

hey guys welcome to programming knowledge in this video we will be talking about logical operators the previous video we load a program to validate the age the user does right so we are giving a condition like if it's checked whether it's a positive number or not and if it's a positive numbers we were are then checking whether it's too great or not if it was too great we were telling something like your age is not valid and if it was okay if it was in the range then we wait checking whether his 18 years or younger we were considering that the age was valid or else we are telling that it was a North Valley age right here if you observe this condition and this condition good together so if a number is positive and if a number is too great then it's not a valid number or if we look at the larger scope here you can combine these three statements if a number is positive and it's too great or if a number is negative then it's not valid age or else it's going to be valid so the way you group these conditions are by using logical operators so these are just like the color connecting words are used in the English statement so here if I talk about the condition when the age is not going to be valid let me write it down here and number as a valid is or a number is not a valid eight if it is positive and if it is to grade or the number is negative so this was the condition right so if a number is positive and to grade so these two conditions go together or the number is negative then the age is not value so this was the condition if we write it down in this manner it is much easier to write it down than this group of Nestor different density so the way to achieve these things to evaluate these conditions and to drawing the result of these two Cadiz results are joined red you need to take whether the number is positive and whether it's too great and you need to combine these two results and you are going to get a result also you are going to check whether the number is negative or not what if it's positive you need to check whether it's never too or not and then you are going to check these two conditions if one of them is true then we're going to say it is not valid so this is basically the function of logical operators so there are three logical operators in C++ or in any language these are same as the logical gates and physics you might have come across it so these are and you have an all and a not so not simple you might have there did while I was talking about the relational operators are was talking about this operator right so this one stands for not equal to so this exclamation stands for the not so this is not and for all we are going to put two vertical bars which are which you will see on top of the entity and here for an you have two ampersands the very important point to note here is that you need to use two ampersand symbols for hand and two vertical parts for all because a single version also exists so it in C++ there is also an operator which is this one which is single hand and a single or so these are actually big words operators we need not dig deep into these operators because they deal with a binary representation of the data but just like your information I am telling these things we will talk about that in a later video for now we don't need these bitwise operators or bit manipulators we are only going to need the logical operators which are just going to tell the relation between two conditions so and this basically if 2 or any kind any number of condition if all are true then the result is true so and this basically if all the conditions are true then it's going to be true and for all you have if any one of the condition is true right if any one of the condition is true then the result is going to be true that is a specialty of all so you if you have n number of conditions even if one condition value gets through true then the result is going to be true and four and if n number of conditions are there all in number of condition should be satisfied then only you are going to get the true value or else you're going to get false so this is the basically the end and our operator Nord is just it's going to turn the value so notice it is going to change true to false and vice versa so the function of naught is just the change true to false and false to true all takes n number of conditions and if any one of the condition is true then the result is true and for and it is going to check all n number of conditions and if any one of them is false then the result is false every condition should be true that only an is going to give you a true so that is basically the logical operators so here another thing is that if you're writing a logical operator let's say some condition1 and condition2 that's how you represent and for all it is the same thing if condition 1 or condition 2 and not basically doesn't need two conditions just going to reverse the condition so first you put an exclamation mark and you put the condition so here if you are using an and operator if this condition evaluates to true this first condition then only it's going to check the second condition so even if the second condition is true if the first condition is false it is not going to check the second condition at all it's not going to perform anything over here so this thing with always it is going to check every condition and here if this one is true it is not going to check other condition so the condition for or is that if any one of the mr. right so you if it forms any one of the is true then it's going to evaluate it as true and this whole condition becomes a truth condition so this part is going to be executed that is with the odd so those are the kinda those are the logical operators let's take a quick example we are going to deal with the same example we took yesterday so here on that it will take the edge so enter your age and I'm going to take that inside a variable so in THC in age and here I am going to agitate the edge so if if age is greater than zero and ages greater than 102 right so this was the condition we gave a study or 101 from that so let's stick with 102 now and if this condition if this age is greater than 0 and the H is greater than 1 0 2 so this condition is basically not required because if it is carried along 0 then only it's going to be greater than right I am just going to take out this particular condition so if the age is greater than 102 or if the age is less than 0 right so if an ages greater than 100 something like 100 and 102 something like that or if the age is less than 0 what we are going to say you have not entered a valid age right and Oren's we are just going to perform the check so if age is greater than or equal to 18 we're just ah let me tell you over here I forgot yesterday we were talking about the block right so here if you are only one statement executes then you know need not use a block so here I have only one statement X is good this is going to be the same thing as this one here if I put a block inside this and then put X your statement it's going to be the same thing but block is generally used to hold two or more statements if I'm going to use only one statement I don't need a block so I can just put this statement beside the if condition itself so this is also valid but if you write any other statement over here so let's say statement to if I write something over here this is actually not considered a part of this if statement unless and until I have a block something like this so here inside this block whatever light inside this block all the statements belong to this else statement but here since I have not put in block over here so this particular statements goes to the if this statement stays to the else part only unless and until I specify another block and mentioned these two things over here so if I put these two things over here now these two have become a part of this if statement and this whole if statement becomes a part of the else statement and here I'll put only one statement that is why I don't need a block and here if any age is greater than or equal to 18 I am going to say that you are eligible so whatever is equal to word something like that or else we are going to say sorry you are not Elizabeth coming that so this is the program we have written this is going to do the same thing which we had done in the previous video but see how small the program now looks so if you consider taking out these braces then it's going to look much much smaller because you have only one statement at the code inside the if block but because it many people tend to forget putting these braces for multiple statements also it is always advisable to put the braces for even one condition but generally I don't do that I just if there's only one condition I put it beside the condition itself for a one statement instakills I put it without the condition itself it's something you either way it's going to work so the here now let us execute it we are going to get the same output so here it's going to ask for the age so enter your age let's say one so here it says sorry you are not eligible and that's it we have created the same program but here it's a much smaller program than the previous program so that's all for this video in the next video we'll be talking about switch case statement
