With timestamps:

00:00 - hey everyone today we'll be talking
00:02 - about one of the graphic user interfaces
00:05 - provided by python thinker
00:09 - it is a standard python interface to the
00:11 - tkh GUI toolkit shipped with python now
00:14 - what is TK TK is a free and open source
00:17 - widget toolkit it provides a library of
00:21 - widgets for building a graphical user
00:23 - interface in many programming languages
00:25 - but now since we are working with python
00:27 - we have to enter module DK has a
00:31 - cross-platform operating system and it
00:33 - is written in C
00:35 - now to install tincter you can run pip
00:38 - install tincter
00:39 - you will write pip install
00:42 - tincter in the terminal and you'll be
00:45 - good to go
00:47 - please note that if you're working with
00:49 - python 2 it is Center the DS capital and
00:52 - if you're working with Python 3 it is
00:53 - technicality is in lowercase the
00:57 - spelling is the same it's just the
00:58 - difference of the cases
01:01 - Now to create anything to your app you
01:03 - would basically be following these four
01:05 - steps you'll be importing the tincter
01:07 - module you'll create the main window
01:10 - now windows are the containers in which
01:13 - all other GUI elements live now what are
01:15 - these other GUI elements these are
01:18 - widgets widgets can be text boxes labels
01:22 - buttons Etc we'll be making each one of
01:25 - them in the upcoming videos
01:27 - widgets are contained inside of Windows
01:29 - okay
01:31 - and that's what the third step is you'll
01:33 - be adding these widgets to the main
01:35 - window you can add any number of widgets
01:37 - to the main window
01:39 - then you'll call in the main Loop method
01:41 - it is used when your application is
01:44 - ready to run it is an infinite Loop main
01:46 - Loop is an infinite Loop used to run the
01:49 - application
01:50 - wait for an event to occur and process
01:53 - the event as long as the window is not
01:55 - closed okay
01:56 - we also have geometry managers namely
02:00 - the pack grid and place pack is very
02:03 - much used
02:04 - but we would not talk about them right
02:07 - now we would talk about them later
02:09 - right now we would try to get the
02:12 - tincter window the master window that we
02:15 - just talked about above
02:17 - I write the least code to make the
02:19 - window appear let's do that I'll import
02:22 - enter I'll write import
02:27 - I'll have my window the window I was
02:30 - talking about in the second step
02:34 - and
02:35 - I'll write when
02:37 - equals tincter dot TK
02:41 - fine
02:43 - now TK can have a lot of arguments so
02:46 - the screen name sets the display event
02:48 - base name sets the profile file by
02:51 - default it is derived from the program
02:53 - name okay
02:54 - now class name it is the name of the
02:57 - widget that is currently used widget
02:59 - class it is TK here okay
03:02 - then we have use TK if it is true it
03:05 - initializes CK subsystem
03:08 - we have sync it is used for debugging
03:10 - basically it executes all X server
03:13 - commands synchronously then we have use
03:16 - which specifies ID of the window for the
03:18 - application now these all arguments
03:21 - might not make sense to you right now
03:23 - but once we start making big
03:25 - applications with tincter you'll get the
03:27 - use of them
03:29 - now I'll write win dot main Loop
03:33 - and I have called in the main loop I
03:36 - told you I won't be making any visit
03:38 - right now I have skipped the third step
03:41 - and called in the main Loop okay now
03:44 - let's run this and see if we can get the
03:46 - window
03:51 - so I can see the window that I declared
03:55 - you can even resize it
03:58 - this logo is of TK software
04:02 - if you search on the internet about TK
04:05 - you'll see this logo
04:09 - you can also add in a title to this
04:11 - let's do that I'll write win.title I'll
04:14 - give the title my first interim window
04:20 - now you can see the title appearing
04:23 - it's my first enter window it was TK
04:26 - here earlier now after this we start
04:29 - making printer applications but in the
04:31 - next video we would talk about something
04:33 - per modules
04:35 - Tinker is very easy to work with and
04:38 - with a very less amount of code you can
04:40 - achieve a lot so the upcoming videos
04:43 - would be very helpful for you
04:45 - thank you
04:47 - hey everyone Teamster offers great
04:50 - modules and that's what we're gonna talk
04:51 - about today while using a class and
04:54 - thinker the module first assembles a TCL
04:56 - or TK command string
04:59 - now the tincter package is the standard
05:01 - python interface to the TCL or TK GUI
05:04 - toolkit
05:06 - TCL or TK is not a single library but a
05:09 - collection of various modules if you're
05:10 - not familiar with the TCL or TK I will
05:13 - just write down the architecture briefly
05:15 - for you
05:16 - so TCL
05:19 - is a
05:21 - Dynamic interpreted
05:24 - Dynamic interpreted programming language
05:26 - just like python it is another
05:28 - programming language which is written in
05:30 - C it is most commonly embedded into C
05:33 - applications we talked about this last
05:34 - time that TCL is mostly written in C
05:39 - then comes TK TK is a TCL package
05:43 - implemented in C
05:44 - so what does TK TK is a TCL package
05:49 - it is used to add custom commands to
05:51 - create and manipulate UI visits
05:54 - okay
05:56 - then we have theme TK or we can call it
05:59 - ttk it is a newer family of TK widgets
06:05 - it provides a much better appearance
06:09 - so this was all about the architecture
06:12 - now about the modules available in
06:14 - Tinker we will talk about some useful
06:16 - modules and to get a better idea of how
06:19 - they work we will see some examples too
06:22 - now ttk is very important as a module so
06:26 - it provides you upgraded widgets so the
06:28 - widgets here are upgraded and the main
06:31 - dictator module okay
06:33 - we can also talk about the color Chooser
06:36 - module which lets you choose a color
06:37 - indicator
06:40 - to just show you how it works I'll write
06:42 - a piece of code
06:44 - now I'll import into
06:47 - I'll write from thinker import ttk
06:52 - and I'll import things third art color
06:54 - Chooser that's the module I was talking
06:57 - about
06:59 - then I'll declare the window container
07:01 - I'll write when equals sphincter.tk
07:05 - we did this in the last program
07:09 - I'll also given a title
07:12 - that the title fitting through color
07:14 - chooser
07:18 - then I'll Define the change color
07:20 - function
07:22 - I'll write F change color
07:25 - don't worry if you don't understand what
07:26 - is happening in this program it's
07:29 - completely fine because we have not
07:31 - discussed any of it
07:32 - I'm just writing this as an example to
07:35 - just show you what the colors user
07:37 - module can do
07:39 - then I'll Define this function I'll
07:43 - write Colors equals tincter.color
07:45 - chooser.ascolor I'll use the ask color
07:48 - function
07:50 - and then I'll configure I'll write
07:52 - win.configure PG equals color one
07:59 - now to column this function I'll make a
08:01 - button
08:03 - I'll write ttk dot button
08:05 - so I've used the ttk module button and
08:09 - not the regular one
08:11 - and I'll call in the window I'll
08:14 - write the text pick color and
08:17 - the command would be change color I'll
08:19 - call in this function and then I'll pack
08:21 - this
08:23 - then I'll call in the main Loop cool
08:26 - so what I have done is I've made a
08:28 - button
08:29 - which when clicked will call in this
08:31 - change color function and you'll be
08:33 - asked to pick a color and it will change
08:35 - the background color to that color cool
08:38 - so let's run this and see if we can
08:42 - change the background colors
08:48 - so I have the screen let me resize it
08:52 - and I'll pick a color click on this
08:55 - button so I have this new window or a
08:58 - pop-up box you can say I'll pick any
09:00 - color and select okay
09:04 - and I have it as the background color
09:06 - you can even change this color
09:09 - let me pick another color
09:11 - and click OK and I have different shade
09:13 - cool
09:15 - so that's what tincter color Chooser
09:18 - module can do
09:21 - now if we talk about the other modules
09:24 - that we have we can talk about common
09:26 - dialogue module so basically we have
09:29 - many modules to create dialogues in data
09:31 - this module is the base class for
09:33 - getting dialogues
09:35 - we can also have file dialog it is used
09:37 - to get dialogues to save or open the
09:40 - specified file we have SIMPLE dialogues
09:43 - for the dialogues
09:45 - we can also have font module so it is
09:49 - used for writing fonts
09:52 - I'll just show you an example how we do
09:54 - that
09:56 - so I'll just comment this piece of code
09:58 - and okay I'll declare a variable Let It
10:02 - Be Georgia
10:04 - equals TK font
10:07 - dot font
10:10 - and family equals Georgia size 30 weight
10:15 - bold that's how you declare a font
10:19 - and you can declare a lot of things I
10:22 - have declared the family size and weight
10:24 - you can even declare if it needs to be
10:27 - slant if it needs to be italic or Roman
10:30 - or if it needs to be underlined
10:33 - or if it needs to be over struck you can
10:36 - even do that
10:38 - then
10:39 - we can have other modules like the
10:42 - message boxes so I'll just write down
10:45 - something for that too
10:47 - I'll import enter
10:51 - and
10:52 - from Tinker I'll import message box
10:57 - okay I'll just Define another function
11:00 - so I'll write Def
11:03 - dialogue
11:04 - message box dot show error
11:08 - answer
11:10 - sorry no answer available
11:13 - okay and then I'll again declare a
11:16 - button
11:17 - ttk dot button text equals answer
11:23 - and I'll call in the main Loop
11:25 - sorry
11:27 - so let's see what we get
11:58 - so I have my screen and let me resize it
12:02 - again
12:05 - and I'll click on this answer button
12:08 - so I get a pop-up
12:10 - it says sorry no answer available and
12:13 - I'll click on OK and I'll exit the
12:16 - screen so that's what we have
12:19 - when we use the message box module
12:22 - we can talk about many more modules in
12:25 - Linker we have scrolled text module so
12:28 - we can get a text widget with a vertical
12:30 - scroll bar it's all built in
12:34 - we have idle lib module constants module
12:38 - DND module text module we also have
12:41 - total module it's a very powerful GUI
12:43 - with great applications
12:46 - and I'd really like you to check out the
12:48 - total module because it's really amazing
12:50 - and you can do a lot with total 2.
12:53 - that's pretty much it about the modules
12:56 - indenter thank you
13:04 - hey everyone in this tutorial we will be
13:07 - talking about the button widget so I
13:09 - will just explain as I write the code
13:11 - for creating one such button I will just
13:14 - follow the four steps we discussed in
13:15 - the introduction video so I'll import
13:17 - into I'll write import
13:20 - think there
13:22 - then I'll declare the window
13:26 - that was the Second Step I'll write when
13:28 - equals
13:29 - tincter
13:31 - dot TK
13:33 - and then I'll given the title I'll write
13:35 - when dot title
13:38 - and let the title be button
13:42 - okay
13:44 - now I'll declare my widget that was the
13:46 - third step adding any number of widgets
13:48 - to the main screen so I'll write button
13:52 - that's my variable equals sphincter
13:56 - dot button
14:00 - and I'll given these brackets and you
14:03 - can see that there are these numerous
14:06 - parameters that I can specify to size my
14:09 - button or to decorate it so
14:13 - first I'll given this master which is
14:17 - about the parent window so I'll write
14:20 - when
14:21 - then I'll mention the text so
14:24 - it's the text that I want on my button
14:28 - so I'll write quit
14:31 - because the command that I'd be
14:33 - specifying so command tells you what the
14:36 - button would be doing so that would be
14:40 - win dot destroy so destroy is an
14:43 - Universal widget you can not only use it
14:46 - with the window container but also to
14:48 - destroy other widgets like the button
14:50 - itself
14:51 - okay and uh
14:53 - I can even specify the height and width
14:56 - of the button so I'll write width equals
14:59 - let it be seven and height
15:02 - let it be four okay then I can have the
15:06 - active background parameter so I'll
15:09 - write active background
15:11 - let it be pink so active background is
15:14 - basically the color of the button when
15:16 - you have clicked on it
15:17 - and active foreground let it be purple
15:21 - so that's the color of the text when you
15:24 - have clicked on the button then you can
15:26 - also specify the background color and
15:28 - foreground color let us specify that so
15:31 - I'll write PG equals sky blue
15:34 - you can also take in the RGB colors but
15:38 - I'll take the normal ones for it now
15:40 - then you have for round let it be white
15:45 - and then you can even specify the font
15:47 - Let It Be Church yeah you can given any
15:49 - font area or calipery
15:52 - then I'll have relief let it be equal to
15:55 - Rich
15:56 - so relief is the type of powder you want
15:59 - it can be flat Groove raised Rich solid
16:03 - or sunken okay that's all that I'd be
16:06 - specifying all the parameters that we
16:09 - tell uh giving in for my button
16:12 - but there are more in place of text you
16:15 - can even given an image that would be
16:18 - working as a button okay
16:21 - or you even have this justify parameter
16:25 - so how you want to show the multiple
16:28 - lines if you have a text
16:31 - then how you want to show those multiple
16:33 - lines a lot long left side or right side
16:36 - or you want it to be in Center so it's
16:39 - basically the alignment of the text but
16:42 - for that you would need to specify that
16:43 - slash n in the text otherwise it won't
16:45 - be treated as multiple lines
16:48 - you can even have bad eggs or bad y so
16:51 - bad X is for additional padding along
16:53 - the y-axis left or right of the text
16:56 - and Pad Y is for the additional padding
17:00 - above or below the text
17:02 - then you can even have the state
17:04 - parameter to disable the button then you
17:07 - have underline so the corresponding
17:09 - number text would be underlined then you
17:12 - can have wrap length if it is positive
17:14 - then the text lines will be wrapped to
17:17 - fit within this length
17:19 - and then I'll get to the pack I'll pack
17:24 - this widget I'll write button dot pack
17:26 - so this is a geometry manager that
17:28 - organizes the widgets in blocks
17:31 - we'll talk about this very descriptively
17:33 - in some upcoming videos
17:36 - but for right now just know that it's
17:39 - for organizing this widget there are
17:42 - options to this you can give in an
17:44 - argument we have expand fill unsite
17:47 - expand lets the widget take up any space
17:50 - on the master window fill is for taking
17:52 - up extra space so you can specify along
17:54 - y or x-axis or both
17:57 - then you have side it is for top left
18:00 - bottom right alignment where you want
18:03 - your button
18:04 - and then I'll call in the main Loop cool
18:07 - I'll write pin dot mean
18:10 - let's run this and let's check if our
18:13 - button has the parameters that we
18:14 - specified
18:17 - so I have my screen and I can see this
18:20 - sky blue and white combination that we
18:22 - specified for
18:24 - background and foreground and when I
18:27 - click on it I can see this pink and
18:29 - purple
18:30 - actor for ground and background
18:32 - you can even see this Ridge border and
18:36 - you can notice the Border width the
18:38 - width and height of the button
18:42 - okay you can even see the text
18:45 - and when I click on the button the
18:47 - window goes away as in the window is
18:49 - destroyed okay
18:52 - okay so everything worked as we wanted
18:53 - it to we could see the parameters
18:56 - working button parameters working and
18:58 - the widget working quite fine
19:01 - you can even get an image in place of
19:03 - this text so please try doing that it's
19:06 - very easy
19:07 - so that's it for this program thank you
19:17 - hey everyone today we're gonna talk
19:19 - about grouping and organizing widgets in
19:21 - the master window and we're gonna make
19:23 - use of frame class and pack geometry
19:25 - manager a frame in itself will work like
19:28 - a container a frame is a rectangular
19:31 - region that would be used to arrange
19:32 - positions of other widgets
19:35 - so basically it is used to organize a
19:37 - group of widgets so let me start writing
19:40 - the program for it
19:42 - so I'll import
19:45 - or I'll write from
19:48 - tincter
19:49 - import start
19:53 - okay so I do not need to import every
19:56 - single module separately in printer I'll
19:58 - just write the class name I do not need
20:01 - to mention tick toadoc button or
20:03 - something like that then I'll take the
20:05 - screen I'll write win equals TK
20:09 - in Brackets here I didn't need to
20:11 - writing dot TK because I've already
20:14 - imported it
20:16 - then I have given the title I'll write
20:18 - win dot title
20:20 - let the title be friends
20:24 - so the third step was adding widgets now
20:27 - I will be adding widgets so frames are
20:30 - also widgets that helps in organizing
20:32 - other widgets I will take the button
20:34 - widget only
20:36 - since we talked about that in the last
20:38 - video so to organize my buttons I would
20:40 - use the frame class now I'll write frame
20:43 - equals
20:45 - frame
20:46 - and in Brackets when
20:50 - because I want the string on the window
20:52 - right
20:54 - so you can see that we can give in a lot
20:57 - of arguments for frame
20:58 - so you can given PG this was for the
21:03 - normal background color of the frame
21:06 - then you can given BD that is the
21:09 - border size and you can give in the
21:12 - cursor so the mouse cursor will change
21:15 - to this pattern specified pattern when
21:18 - you hover over the frame
21:21 - and then you can mention the size you
21:23 - can tell the height and width
21:25 - then you have relief here which was also
21:29 - there in buttons so it's the same here
21:32 - you can specify the kind of Border you
21:34 - want for the frame
21:36 - here I won't be specifying anything
21:38 - because I would be getting some widgets
21:41 - over it so it's no use it will be
21:44 - displayed
21:46 - so with the frame class I have made a
21:49 - rectangular area and then I'll pack up
21:52 - to the left side of the screen so I'll
21:54 - write frame dot pack
21:56 - side equals left we discussed this in
21:59 - the last video while we were discussing
22:01 - back a little bit
22:03 - we talked about side fill and expand I
22:06 - hope you remember so I'll be writing
22:09 - side equals left in the argument we're
22:11 - back
22:12 - okay
22:13 - I will take up another frame so that you
22:16 - can understand what frames actually do
22:18 - the grouping would be clear so I'll
22:20 - write Frame 2
22:22 - equals frame when because I want this
22:26 - frame on the window
22:28 - and then I'll back this to the right
22:31 - side okay it's all right side equals
22:35 - right
22:37 - then I'll get my buttons I'll write B1
22:42 - equals
22:43 - button
22:47 - now last time when we declared the
22:49 - buttons you might remember that we used
22:51 - window
22:52 - as the master argument but right now
22:55 - since I won my button on this Frame I'll
22:58 - write the frame variable okay so I'll
23:01 - write frame comma text equals
23:05 - button one
23:08 - let the background be pink
23:13 - and foreground be white
23:17 - and then I'll pack this button I'll
23:18 - write B1 dot pack
23:21 - similarly I'll declare button two
23:24 - I write P2 equals button
23:27 - frame
23:31 - comma text equals button two
23:36 - and background color sky blue and
23:38 - foreground White
23:42 - and then I'll pack it
23:45 - write P2 dot back
23:47 - then I'll have two more buttons B3 and
23:51 - B4 I'll get them on the second frame
23:53 - that I declared
23:55 - you might notice that I have not given
23:57 - any commands for the buttons
23:59 - so let's start focus on that because
24:01 - right now our main focus is
24:03 - understanding frames
24:05 - so let me get my button three and button
24:07 - four I'll write B3 equals button
24:11 - frame two
24:14 - text equals button three
24:18 - background purple and foreground White
24:25 - okay then I'll pack it
24:27 - let me get the button four
24:30 - button frame two
24:33 - text equals button for
24:36 - background let it be light green
24:39 - and four round repeat White
24:43 - then I'll pack it I'll write P4 dot back
24:48 - then I'll call the main Loop this main
24:51 - Loop would be called for the master
24:52 - window only the parent window so I'll
24:55 - write when dot main group
24:58 - so let's run this and see if we get the
25:00 - buttons on the left and right sides
25:03 - according to the frames
25:14 - so I can see the buttons the four
25:17 - buttons that I declared and they are on
25:20 - sides button one and two is on the left
25:23 - side and button three and four are on
25:24 - the right side because
25:26 - I have packed the frame
25:28 - one on the left side
25:31 - and Frame 2 was packed on the right side
25:36 - as we have not given any command to the
25:38 - buttons nothing is happening when we are
25:40 - clicking them
25:42 - you can think about how differently you
25:44 - can park these buttons just like we have
25:46 - packed the frames
25:48 - you can use the site or expand or fill
25:51 - arguments
25:53 - and that's what we'd be talking about in
25:55 - the next video we'll be discussing
25:57 - geometry managers
25:59 - thank you
26:03 - hey everyone so I've always told you
26:06 - that we are going to talk about geometry
26:08 - managers whenever we use spark so that's
26:11 - what we're gonna do today in this video
26:12 - we will talk about pack grid and place
26:16 - since you have already used pack in some
26:18 - of the last videos let's start with the
26:20 - pack widget so from the enter
26:25 - I'll import
26:29 - star
26:30 - then I'll get my window I'll write well
26:33 - equals TK
26:38 - I'll also given a title so I'll write
26:41 - when dot title
26:43 - and let the title be geometry managers
26:50 - okay
26:52 - then I'll get the widgets so for the
26:55 - widgets I'll get some frames and I'll
26:56 - pack those frames
26:58 - so I'll have my frame one
27:02 - equals frame
27:05 - for the master I'll give window
27:07 - when
27:09 - then let the width be 200
27:13 - and height be 100
27:17 - and let's have the background color to
27:20 - be orange
27:25 - now I'll park this Frame I'll write
27:27 - frame one dot Park
27:30 - so I'll fill this
27:32 - for both the axles I'll write fill
27:34 - equals
27:38 - both
27:40 - and side equals left
27:43 - expand equals true
27:47 - so this fill and expand is for making
27:49 - the frame responsive as you increase the
27:51 - screen size the frame will expand in
27:54 - both the directions and the side is to
27:56 - place it on left cool so let's have
27:59 - another frame
28:01 - right frame two
28:04 - equals frame
28:07 - when
28:09 - let the width be hundred
28:12 - background color let it be purple
28:16 - [Music]
28:18 - and I'll pack this
28:20 - and I'll given the same arguments as
28:23 - above I'll write well equals both
28:26 - side equals left expand true
28:29 - okay then I'll call in the main Loop all
28:33 - right when dot main Loop
28:36 - so let's run this and see how the pack
28:39 - Works see how the Frame Works
28:44 - okay so I have this screen and as I
28:47 - expand it on either side
28:50 - if I expand it along x axis I can see
28:53 - the frames increasing so you can see the
28:55 - two colors purple and orange
28:59 - so that's the rectangular area a frame
29:01 - makes
29:02 - and the parking starts from the left
29:04 - side because we have specified site to
29:06 - be left okay
29:08 - and you can see as I expand the screen
29:12 - the frame size also increases cool
29:17 - so if I want to talk about the place
29:19 - geometry manager it is used to control
29:22 - the precise location of a widget
29:25 - the location it should take up on the
29:27 - window or the frame okay so we can given
29:29 - the coordinates it takes up two
29:32 - arguments X and Y so that's the top left
29:35 - corner coordinate of that widget okay so
29:38 - let me write something for it so that
29:40 - you can understand it better I already
29:42 - have Tinker imported and my window I
29:45 - also have a title for my window
29:47 - I'll just get another frame to get my
29:50 - button on it
29:52 - or rather I'll get two buttons so let me
29:55 - have the frame I'll write frame equals
30:01 - frame
30:03 - when
30:04 - and let the width be 150 and height p150
30:09 - frame dot pack
30:12 - okay and I'll add my button one
30:16 - so button one equals button and I'll get
30:20 - this button on the frame so I'll give in
30:22 - the master to be frame
30:24 - let the text be
30:28 - button at 10 comma 20
30:37 - and let the background color be pink
30:45 - then I will place the button not use
30:49 - pack but I'll place it and I'll given
30:51 - the coordinates x equals 10 y equals 20.
30:58 - so I'll get this button at 10 comma 20
31:00 - coordinate the top left corner
31:03 - coordinate of this button would be our
31:05 - 10 comma 20.
31:07 - then I'll get another button button to
31:11 - equals button
31:15 - strain
31:17 - let the text be
31:19 - button
31:21 - at
31:25 - 40 comma 50.
31:28 - and the background color Let It Be
31:30 - yellow
31:33 - then I'll place this button again
31:36 - at 40 comma 50. so x equals 40 y equals
31:42 - 50.
31:44 - and then I'll call in the main Loop
31:48 - we'll check this if this works fine and
31:51 - we get the buttons at the defined
31:54 - coordinates
32:00 - now when I run this I have these two
32:04 - buttons at the
32:06 - coordinates so this top left corner is
32:10 - at coordinate 10 comma 20 and this
32:13 - yellow one
32:14 - press out 40 comma 50. so that's the
32:18 - coordinates and the buttons are at the
32:20 - specified coordinates
32:23 - so the screen should be seen as a
32:26 - coordinate plane
32:28 - and the buttons are at the specified
32:30 - coordinates
32:32 - go
32:33 - so that's how place works now let's talk
32:36 - about grid
32:38 - grid has all the parameters of pack plus
32:41 - it is efficient done place as place
32:43 - needs specific coordinates crutches
32:46 - splits or mixed parts of the screen
32:48 - according to the Matrix given
32:50 - you'll understand this better if I give
32:52 - you an example so I already have
32:56 - things are imported and
32:59 - I'll just comment this part
33:02 - first of all if you're talking about
33:04 - grid you need to make that grid so we'll
33:08 - make it just like we make a matrix I'll
33:11 - have two for loops and I'm gonna make a
33:13 - grid of three by three so I'll write for
33:16 - I in range three
33:19 - for J in range three
33:24 - frame equals
33:26 - frame
33:29 - Master is Finn and let me give in a
33:33 - border type
33:35 - so relief equals sunken
33:40 - that's about my frame so for each block
33:44 - for each Matrix element I'll get a frame
33:47 - okay
33:48 - now I'll use grid for the frame I'll
33:51 - write frame dot grid so you can see what
33:54 - all arguments we can give for grid we
33:56 - can give the row which is I
34:00 - then column
34:02 - which is equal to J
34:04 - we'll given some extra padding along X
34:08 - and Y axis both so let it be 5
34:12 - that'll look good
34:14 - then I'll get some buttons on these
34:16 - frames so I'll write button equals
34:20 - button
34:22 - and since I won this button on the frame
34:24 - so I'll given Master equals frame
34:30 - for text I'll given the Matrix elements
34:33 - index
34:36 - so I am Jay I hope you know this format
34:41 - this is General python then we'll get to
34:44 - packing this button I'll just use pack
34:48 - for this not Grid or place
34:51 - I'll simply black back this button so
34:55 - I'll write button dot pack
34:57 - I'll give
34:58 - some padding pad x equals five
35:02 - y equals 5.
35:05 - so that there is space between
35:08 - each element of the Matrix and also
35:12 - there is space between the text and the
35:14 - button
35:16 - and then I'll call in the main Loop I'll
35:18 - write when dot main Loop
35:22 - as you had expand and fill in pack you
35:27 - have column configure and row
35:29 - configuring grid
35:30 - I want the buttons to increase in size
35:33 - just as
35:35 - the screen size increases
35:38 - so I'll write
35:40 - when dot column configure
35:45 - so you can see what all arguments it
35:47 - requires
35:48 - so first is the index
35:51 - so of course index is the row all column
35:54 - number
35:55 - then you have Min size which will given
35:58 - the minimum size of the row height and
36:01 - column width in pixels okay and then you
36:05 - have weight okay so weight is the rate
36:09 - with which the size of the button or
36:11 - size of the specified widget would
36:14 - increase with what rate
36:16 - so I'll give it to be one
36:19 - I want all the grid elements to increase
36:22 - with the same rate as I increase the
36:24 - screen size okay and I'll give in the
36:28 - bin size for column configure to be 75
36:33 - then I'll also have row configure
36:37 - so I've given the index I and weight
36:41 - equals 1.
36:45 - and the minimum size Let It Be 50.
36:49 - so we're good to go let's run this and
36:53 - let's see how grid works
37:00 - so you can see that the screen size is
37:03 - not little it's there's a proper grid
37:05 - because we have already specified the
37:07 - minimum size using column configure and
37:10 - row configure there is a specific size
37:12 - of the screen because there is a minimum
37:16 - size of the buttons
37:19 - and when I
37:21 - resize the screen they grow in size
37:24 - automatically the button Size Doesn't
37:26 - grow but they are rearranged on the
37:29 - entire screen properly
37:33 - so that's it for grid
37:36 - that's it for the geometry managers I
37:39 - hope you understood everything the place
37:42 - pack and grid widgets
37:45 - they are going to be of great help in
37:47 - the upcoming videos
37:49 - so you really need to get a grasp of
37:52 - what was going on throughout this video
37:55 - thank you
37:59 - hey everyone today we're gonna talk
38:02 - about canvas widget in painter it's
38:04 - going to be very easy and simple we will
38:07 - just see some functions provided by the
38:08 - class
38:10 - canvas is basically used to draw crafts
38:13 - and charts
38:14 - to get text or images on the window we
38:18 - will see drawings in simple figures on
38:21 - the canvas let's start with it
38:23 - so from winter
38:27 - import Star
38:30 - that's a very convenient way then I'll
38:33 - have my window I'll write when equals TK
38:37 - and I'll also given a title I'll write
38:39 - win dot title
38:42 - that the title be canvas
38:48 - okay then I'll add my widget so my
38:51 - widget would be canvas I'll write canvas
38:53 - equals canvas
38:57 - and where do I want my canvas I want it
39:00 - on my windows all right win for master
39:02 - so basically canvas is a rectangular
39:04 - area where you can draw okay so you have
39:08 - the height and width for canvas I'll
39:10 - given the width
39:12 - to be 500 and height
39:16 - to be 500
39:20 - I'll also given a background color Let
39:23 - It Be PG equals
39:26 - sky blue
39:28 - you can also have a cursor for it so let
39:32 - the cursor type be
39:34 - dot box
39:36 - you can give an arrow circle clock cross
39:39 - exchange heart
39:42 - as a cursor type there are a lot of
39:45 - cursors in Victor
39:47 - so you can see how many arguments you
39:50 - can give in for canvas you can have
39:52 - Border Water width
39:55 - background
39:57 - highlight color insert border with
40:01 - Etc so
40:04 - I'll just given these parameters and
40:08 - then I'll pack this visit I'll write
40:10 - canvas dot back
40:13 - then I'll get on to creating the figures
40:16 - so first of all I'll write canvas
40:20 - dot create Arc
40:23 - I've given the X1 y1 and X2 Y2
40:27 - coordinates
40:28 - so that's basically the starting landing
40:30 - position
40:32 - so I'll write 5 comma 10
40:34 - and 100 comma 100.
40:39 - then I'll also create a line a simple
40:41 - line that is parallel to the x-axis I'll
40:44 - write
40:46 - canvas dot create line
40:50 - now given the starting and ending
40:51 - position
40:52 - 0 comma 80
40:55 - and 500 comma 80.
40:58 - so you do not need to specify the X one
41:02 - by one pair and X2 Y2 pair separately
41:05 - think there knows how to fix the
41:06 - coordinates if they are given in the
41:09 - correct order
41:10 - similarly to draw an ellipse or an oval
41:14 - I'll write canvas Dot
41:17 - create oval
41:20 - and I've given the top left and bottom
41:22 - right coordinates of the rectangle in
41:25 - which the oval would be contained so
41:27 - I've given 200 comma 200
41:30 - and 400 comma 400.
41:33 - sorry
41:35 - then I can also given a text so let me
41:39 - use this as the heading for the canvas
41:42 - I'll write canvas dot create text
41:45 - the starting position would be 250 comma
41:48 - 10 and the text Let It Be
41:51 - using
41:57 - you can also given bitmaps you can also
41:59 - draw bitmaps so
42:02 - I'll write canvas dot create bitmap
42:05 - and let it coordinate let the location
42:08 - for the bitmap be 210 comma 50.
42:11 - and bitmap equals Quest head
42:16 - so you have a lot of kind of bitmaps you
42:19 - can take error gray 75 R class info
42:22 - warning question
42:24 - I have taken Quest head
42:26 - then uh you can also try creating a
42:29 - polygon so I'll write canvas dot create
42:32 - polygon
42:34 - to create a polygon you would need the
42:37 - corner coordinates
42:39 - of the polygon so I'll make a list for
42:41 - that I'll write points equals
42:46 - I'll make a list so I'll try to make a
42:48 - hexagon so let the coordinates be
42:52 - hundred come a hundred
42:53 - 120 comma 100
42:56 - 140 comma 120
42:59 - 120 comma 140
43:01 - 100 comma 140
43:04 - 80 comma 120. so there are six pairs
43:08 - and 12 points okay
43:12 - so for the argument of create polygon
43:15 - I'll write points
43:16 - and I'll fill with color
43:19 - pink
43:20 - so that's all I'd be drawing for right
43:22 - now I'll call in the main Loop I'll
43:25 - write when dot main Loop
43:27 - so let's run this and check our canvas
43:34 - so as I run this you can see that the
43:37 - screen is off a specified size that is
43:39 - 500 comma 500 the canvas size and if you
43:43 - expand it you can see that the canvas
43:46 - is not extended okay
43:49 - let's do a specified size you can see
43:51 - the arc you can see the bitmap you can
43:55 - see the line you can see the hexagon you
43:57 - can see the oval
43:58 - so the oval turned out to be a circle
44:01 - because the coordinates that we gave and
44:03 - were 200 comma 200 and 400 comma 400
44:06 - they are the coordinates of a square
44:09 - not a problem and uh
44:12 - you can also notice the kind of Arrow we
44:16 - have within the canvas outside the
44:18 - canvas it's just the normal Arrow
44:21 - but inside it it's a DOT box
44:24 - cool
44:31 - so that's it about drawing on a canvas
44:33 - you can make a real canvas like a paint
44:36 - app using canvas pattern but it requires
44:39 - events so since we are not still done
44:42 - with events in Winter we would do that
44:44 - later
44:45 - you can check out how to get images on a
44:48 - canvas try to do that and also try to
44:51 - make some complex shapes on the canvas I
44:54 - hope you will be able to do that thank
44:56 - you
44:58 - hey everyone today we will be talking
45:01 - about radio buttons and check buttons
45:04 - there are another type of widgets they
45:06 - can be used while making a form so this
45:09 - is a very simple program to make it a
45:12 - bit interesting what I would do is I
45:15 - would given commands to these buttons
45:16 - whenever the buttons would be filled in
45:18 - the specified function would be called
45:21 - and the function that I would Define
45:24 - would declare another tincter window and
45:27 - show some message for that I will use
45:30 - canvas widget we have already discussed
45:33 - it in the last video
45:35 - so let's start writing the code for it
45:37 - from Tinker
45:41 - I'll import
45:42 - star
45:44 - and I'll have my window master window
45:47 - I'll write when TK
45:49 - brackets
45:51 - I will also give in a title I'll write
45:54 - win DOT type 2.
45:57 - let the title be
45:59 - radio buttons
46:03 - cool
46:04 - then I will have an INT variable
46:08 - so I'll write V equals into r
46:12 - so this interval would be used to
46:15 - control the variable value for the radio
46:19 - button or check buttons
46:21 - it would be used to set its current
46:23 - value option
46:25 - now this entire function can hold
46:28 - integer data where we can set integer
46:31 - data and we can even retrieve it using
46:34 - the getter and Setter methods
46:36 - for right now just remember that V into
46:39 - one is used to set the value of radio
46:42 - button or check button okay now I will
46:45 - have my radio button I'll write radio
46:46 - button
46:49 - and I want my radio button on the window
46:52 - so I'll write win
46:54 - and the text that I want is
46:57 - radio button one
47:05 - and variable I will give in to VV
47:10 - and let the active background be
47:13 - pink
47:15 - and active foreground
47:18 - be purple
47:22 - and the command
47:24 - I told you I'll be giving in a command
47:26 - so the command name would be free
47:29 - okay so I'll Define the spray what pre
47:33 - would do is it would show up another
47:36 - window with the text value accepted
47:39 - now how I would do this I would use
47:42 - canvas and create text function by
47:44 - canvas so I'll write wind equals TK
47:49 - here I have another window for tinker
47:53 - I'll write C equals canvas where I want
47:56 - the canvas I want it on the window so
47:58 - I've given wind
48:00 - and background color let's be light
48:03 - cream
48:08 - then I'll pack this canvas I'll write C
48:11 - dot pack
48:17 - then I will
48:19 - create text I'll write C dot create text
48:24 - let the coordinates be hundred comma 10
48:28 - let the text be value accepted
48:38 - I'll fill in with purple
48:46 - then the font that B16
48:50 - cool then I'll run the main Loop I'll
48:53 - write wind dot main Loop
48:56 - okay
48:57 - now let's get back to the main
49:00 - code
49:02 - I have given three as command and now I
49:06 - will use grid for this
49:08 - because I want the radio buttons in a
49:11 - specific line or a row so I'll write dot
49:15 - grid row equals 0.
49:21 - I will have another radio button
49:24 - so I'll write V2 equals into power
49:28 - radio button
49:32 - then
49:35 - text equals
49:38 - radio button
49:40 - two
49:43 - variable
49:46 - letter pv2
49:49 - active background
49:51 - let's keep it the same as above
49:57 - then command free
50:00 - and for grid now the row number would be
50:03 - one because I want it in the next line
50:06 - so I'll write dot grid
50:09 - row equals 1.
50:12 - similarly you can have the check buttons
50:14 - they are very similar
50:16 - it's just the difference of the symbol
50:19 - so I'll have variable one equals into r
50:24 - ack button
50:30 - window where I want it I want it on the
50:34 - window
50:34 - and text
50:37 - check button
50:40 - one variable is wire one
50:47 - and again I'll given grid I'll not pack
50:50 - this I'll use grid
50:52 - and row Let It Be
50:56 - three
50:58 - if you're given the same row number then
51:01 - the things would overlap and you would
51:03 - not be able to see the radio buttons so
51:06 - given a
51:08 - number greater than one or zero
51:13 - then I'll have another variable
51:17 - if you wanted to print wire
51:20 - like button when
51:23 - text equals
51:25 - check button
51:27 - two
51:29 - variable
51:31 - Y2
51:33 - and grid
51:36 - row
51:39 - okay then I can run the main Loop
51:43 - twin dot main Loop
51:46 - so let's run this and let's see if
51:49 - everything works as we have defined it
51:51 - if we can call on to 3 as we given the
51:55 - value for radio buttons
52:02 - so I can see the radio buttons and check
52:05 - buttons on the window
52:07 - and when I click on the check buttons
52:09 - they get checked nothing else happens
52:12 - but when I click on the radio buttons
52:16 - I can see another window popping up with
52:19 - value accepted
52:20 - message and
52:23 - same as with the other radio button if I
52:26 - click on it I can see another window
52:29 - so we could actually given the command
52:34 - and execute it properly
52:37 - so giving in this command also helped
52:39 - you in practicing canvas once
52:42 - that's it about radio buttons and check
52:44 - buttons
52:46 - you can check out once what all
52:48 - arguments we could give to radio buttons
52:50 - or check buttons
52:52 - thank you
52:58 - hey everyone so to display text on the
53:01 - tincter window we just have learned
53:03 - about the create text function in canvas
53:05 - but we also have label and message to
53:09 - print a message on the screen to get
53:11 - text on screen so we haven't discussed
53:13 - that yet that's what we are going to
53:15 - talk about today we will learn about the
53:18 - label and message widgets
53:20 - there is just a little difference
53:22 - between label and message let's write
53:24 - some code to check that out
53:27 - so from thinker
53:30 - import Star
53:33 - and I'll have my window right when take
53:38 - care
53:38 - packets
53:40 - I'll give in a title I'll write when dot
53:42 - title
53:44 - display text
53:49 - let the title be display text
53:51 - now I'm gonna add my visit
53:55 - that is message and I will given a
53:58 - variable I'll write
54:00 - my message
54:06 - equals message
54:10 - and where do I want that I want it on
54:12 - the main screen so I'll write when
54:16 - comma what is the text that we want to
54:19 - display so the text equals
54:24 - foreign
54:36 - we are learning
54:39 - tinker
54:40 - cool
54:42 - and then we'll give in a background
54:44 - color
54:46 - I'll write PG equals
54:48 - I think
54:51 - okay then I'll give an aspect so aspect
54:55 - is the ratio so basically it's aspect
54:58 - ratio it's the ratio of width and height
55:01 - in percent the default is 150 which
55:06 - means the
55:07 - width would be 50 percent greater than
55:10 - the height of the message box
55:11 - so you can think of on your own what
55:14 - aspect you would give in I will give in
55:17 - an aspect of
55:20 - 500
55:22 - and then
55:24 - I will give an border with it will be 5
55:28 - PD equals five
55:31 - I've also given a type of water relief
55:34 - equals rich
55:37 - I've given a padding
55:39 - fad x equals 10 just along the x-axis
55:44 - okay also the foreground let it be dark
55:47 - blue
55:50 - I can also given a font Let It Be ink
55:54 - free
55:56 - 14 and italic so that's the way you can
56:00 - given a font that's how you describe a
56:02 - font in tincter
56:05 - then you can just look up what all
56:08 - arguments you can given for message
56:11 - so we have already described master
56:15 - we have not talked about anchors so
56:18 - anchor is used to decide where the text
56:20 - should be placed in the message widget
56:22 - it can be North North East
56:26 - the top right corner
56:28 - east south east south Southwest or
56:32 - Center the default is Center
56:34 - do not get confused between justify and
56:37 - anchor anchor is for position whereas
56:40 - justify is like alignment okay
56:44 - then we have aspect we just discussed it
56:47 - we have decided the background
56:50 - and water and the font for round color
56:54 - too
56:55 - we know about justify
56:58 - we can given a padding pad by and Pat X
57:02 - we know about relief we know about text
57:06 - and you can also given the width but I
57:09 - have not given it that's fine I have
57:12 - already given in the aspect
57:14 - then I'll get to the label
57:17 - I'll write
57:18 - label
57:19 - equals label
57:24 - so for the master it would be win again
57:28 - and then text
57:30 - Let It Be
57:31 - label which it does not allow multiple
57:34 - lines
57:47 - okay so this is a fact label widget
57:50 - would not let you get a long text in
57:53 - several lines
57:56 - there is no line wrap-up option so it
58:00 - will just cut off the text that does not
58:03 - fit into the specified height and width
58:05 - so if you have mentioned a smaller size
58:08 - the text will just disappear and not all
58:12 - the text would appear on the screen
58:15 - so
58:17 - this is one difference between message
58:19 - and label widget there are many
58:22 - but this is a major one then I will
58:25 - given the Border
58:27 - size Let It Be 8
58:30 - let the background be
58:32 - sky blue
58:35 - and I'll have a cursor for this
58:39 - at the cursor
58:41 - the cross
58:43 - foreground Let It Be
58:46 - yellow and I'll also given a font here
58:49 - right Georgia
58:54 - 18 italic
58:58 - relief
59:02 - raised
59:05 - height let it be two
59:08 - and I'll not given the width let the
59:11 - label widget decided on its own
59:13 - according to the text
59:15 - now I'll pack this
59:17 - but first I'll pack the label then I'll
59:21 - pack the message okay
59:23 - now let's see if the packing order
59:26 - affects the order of display or is it
59:29 - the order of defining the widgets that
59:31 - decide in which order the widgets would
59:33 - be displayed
59:35 - so I'll write down
59:38 - label dot pack
59:41 - I'll simply use spark and then
59:45 - I'll also pack the message widget
59:50 - dot back
59:52 - now I will call the main Loop
59:54 - win dot main Loop
59:57 - fine
59:58 - let's check out how the label and
60:00 - message widgets work
60:47 - hey everyone today we're gonna talk
60:49 - about the menu widget in painter it is
60:51 - basically to create a menu bar or a list
60:54 - like menu there is nothing complex about
60:56 - it just try to understand how things are
60:58 - working as we write the code so from
61:01 - Tinker
61:06 - import Star
61:08 - and I'll get the window I'll write one
61:11 - equals TK
61:13 - are also given the title I'll write win
61:15 - dot title
61:17 - let the title be menu
61:20 - then I'll add the widget
61:23 - so this widget would be declared with a
61:26 - variable
61:27 - menu which will be the main menu and
61:29 - that would contain the sub menus to be
61:31 - displayed so I'll write menu
61:34 - equals menu and where do I want this
61:37 - menu on the window on the master window
61:39 - so I'll write when
61:41 - so I'll have this main menu where all
61:43 - the other features or objects will be
61:45 - contained like this is the main list
61:47 - that will contain elements with sub
61:49 - lists
61:50 - now I would need to add this to the
61:53 - master window so I'll write
61:55 - dot config
61:58 - menu
61:59 - equals menu
62:01 - this config function can be used to
62:04 - overload if you have an object in
62:06 - thinker that is already configured and
62:09 - you want to edit some of those
62:10 - configurations we use config now we'll
62:13 - create the elements of the main list so
62:15 - I'm gonna create a list with picking
62:17 - tools the size of the tools and then its
62:20 - color so let's do it
62:23 - so first would be tool
62:25 - equals
62:28 - menu
62:30 - and within brackets
62:33 - you can see what all configurations you
62:35 - can given to this menu widget
62:38 - so for master I'll give menu
62:41 - I'll have given a background color
62:44 - Let It Be Gray
62:48 - let the foreground be black
62:54 - I'll also given active background
62:59 - Let It Be Skype
63:03 - okay
63:05 - then I need to add this tool object to
63:09 - the main menu list okay so I'll write
63:11 - menu
63:14 - the variable menu
63:16 - dot add Cascade
63:18 - that is how you add any object to the
63:21 - main list main menu
63:23 - and label equals tool
63:30 - and menu equals tool
63:33 - okay
63:34 - now I'll be adding some options to the
63:37 - tool object so a right tool dot add
63:41 - command
63:42 - you can also add in
63:45 - check buttons and radio buttons but
63:48 - we'll just stick to command for right
63:50 - now and label
63:53 - equals pen
63:58 - then I'll add some more options I'll
64:01 - write tool dot add command
64:05 - label equals brush
64:13 - then tool dot art command label equals
64:17 - pencil
64:23 - then tool dot add command
64:27 - label equals
64:29 - eraser
64:33 - and command equals
64:36 - so I'll given a command to this whenever
64:38 - you click on this option
64:40 - this given command should take place so
64:43 - command would be
64:45 - win dot quit
64:47 - then I'll have another menu object the
64:50 - size so I'll write size
64:53 - equals
64:57 - menu
64:59 - and it's the part of the main menu so
65:02 - I'll write menu in Brackets
65:05 - then I'll add this size objective menu
65:09 - so write menu
65:12 - dot add Cascade
65:18 - label
65:20 - equals size
65:22 - and menu would be
65:29 - I will not decorate this I'll just keep
65:32 - it to default
65:34 - to check out what the default is
65:37 - then I'll add the options to the size
65:39 - object so I'll write size
65:43 - dot add command
65:50 - and label lp1px
65:57 - and similarly I'll do for three four and
66:00 - six PX
66:01 - so I'll just copy this down
66:04 - I'll write 3px
66:10 - 4px
66:13 - and 6px cool
66:17 - I'll have another element
66:20 - for the main menu
66:21 - I'll write Colors
66:25 - equals
66:26 - menu
66:30 - and I'll give it an octave background
66:31 - for this let it be light green
66:34 - and the background let it be light
66:36 - yellow
66:37 - okay
66:40 - I'll add this colors to main menu I'll
66:43 - write menu dot add Cascade
66:53 - label equals colors
66:58 - menu equals colors
67:01 - and I'll add the options to Colors the
67:04 - right colors dot add command
67:08 - label
67:10 - equals red
67:14 - colors.ad command label equals yellow
67:21 - and colors dot add command
67:27 - label equals
67:32 - and I'll call in the mail Loop right pin
67:35 - dot mean
67:37 - now you can see that even for these
67:39 - options you can given configurations you
67:42 - can have a background color a foreground
67:45 - color
67:45 - a different active background
67:48 - Etc please check them out too they'll
67:51 - help you practice
67:53 - now let's check out how the menu Works
67:56 - how the menu widget Works how it looks
67:58 - like
68:02 - so I have my screen and you can see
68:05 - tools size and colors on the menu bar
68:08 - they are the part of the main menu and
68:11 - when I click on each one of them they
68:14 - display a new menu okay so that's the
68:17 - sub list
68:19 - so I hope you get an idea of how the
68:22 - list was how the menu was organized
68:25 - and you can even add further lists so
68:29 - please try doing that too that would be
68:32 - your practice
68:33 - and when you're quite comfortable with
68:35 - menu you might also look up for menu
68:38 - button
68:39 - try to pick out the differences and
68:41 - benefits of menu button
68:43 - what options menu doesn't provide when
68:46 - your widget doesn't provide but the menu
68:47 - button does
68:50 - so that's it about the menu widget thank
68:53 - you
68:55 - hey everyone today we're gonna talk
68:57 - about message box and thinker so without
69:00 - declaring a new screen you can have one
69:02 - but its functionalities are limited so
69:05 - let's check what I'm actually talking
69:06 - about basically I will declare buttons
69:09 - and the commands would contain functions
69:11 - that call the message boxes we can have
69:14 - many types of message box as per our
69:17 - requirement we can have the show info
69:19 - show warning show error ask question ask
69:22 - okay cancel ask yes no ask retry cancel
69:27 - these all are functions available in the
69:30 - message box module now we'll check them
69:32 - one by one let's get started so I'll
69:35 - write
69:37 - from Tinker
69:39 - import Star and also from Tinker
69:45 - import message box
69:48 - you need to import this message box
69:50 - module separately and then I'll get the
69:54 - window I'll write win equals TK
69:57 - brackets and I'll also given a title
70:00 - I'll write when dot title
70:03 - let the title be message box
70:09 - and then I'll also specify the size of
70:12 - the screen so I'll write win dot
70:14 - geometry
70:15 - 400 cross 400 in double quotes so that's
70:20 - how you can specify the size of the
70:23 - screen
70:24 - this is a new thing
70:26 - then we will Define the functions one by
70:28 - one they would be given as command for
70:30 - each button so first of all I'll use the
70:33 - show info function so I'll write
70:36 - Def
70:37 - show info
70:40 - kits
70:41 - and I'll write message box
70:44 - dot show info
70:47 - so the first string would be the heading
70:50 - of the message box so I'll write
70:52 - important
70:54 - because this is just an information and
70:57 - for the message
70:59 - I'll write this might
71:02 - take a minute
71:06 - okay
71:07 - then similarly I'll Define some more
71:10 - functions I'll write something for
71:13 - show error
71:15 - so I'll write Def
71:17 - error
71:19 - and
71:21 - message box dot show error
71:27 - the title would be error
71:31 - and the message would be the specified
71:35 - path
71:37 - does not exist
71:40 - because this is an error you can given
71:42 - any messages as per
71:45 - requirement then I'll have something for
71:48 - ask question I'll write def
71:51 - Q
71:54 - message box dot ask question
72:00 - and I'll write title h
72:04 - and the message would be are you 13
72:08 - years
72:10 - old or above
72:13 - question mark
72:14 - so and ask question function you'll have
72:17 - two options to select from yes or no
72:20 - and accordingly you can select then I'll
72:23 - Define for ask OK or cancel I'll write
72:26 - def cancel
72:30 - you can name the function anything
72:33 - is just what function you call
72:36 - then I'll write message box start ask
72:39 - okay cancel
72:42 - and let the title be delete
72:46 - and message PR you sure you want to
72:52 - delete
72:54 - question mark
72:56 - then I'll have the function yes no
72:59 - it's all right deaf
73:03 - yes no
73:05 - rockets and I'll call the ask yes no
73:08 - function write message box
73:11 - dot ask
73:13 - yes no
73:15 - and let the title be confirmation
73:20 - and the message B are
73:23 - you sure
73:25 - you want
73:27 - to proceed
73:31 - so ask yes now also gives you two
73:34 - options to select from yes and no so you
73:37 - might think that ask yes no and ask
73:40 - question functions are same but they're
73:42 - not the ask question returns yes or no
73:45 - string but the ask yes no function
73:49 - returns a Boolean true for yes and false
73:52 - for no
73:53 - okay then you also have the ask retry
73:56 - Council so I'll Define a function for
73:58 - that too I'll write f
74:00 - retry
74:02 - now for this function you will have two
74:05 - options to select from retry and cancel
74:09 - now if you click on retry
74:12 - this ask retry cancel function returns
74:15 - true and if you click on cancel it
74:18 - returns false so just to give you an
74:21 - idea of what is happening I'll declare a
74:25 - variable for this function
74:26 - which will store this Boolean so I'll
74:29 - have R equals
74:32 - message box start ask retry
74:36 - cancel
74:39 - let the title be failure
74:44 - and the message let it be to you
74:47 - want to try
74:50 - again
74:52 - question mark
74:54 - and if
74:56 - R is true
74:58 - f r then I'll print retry
75:03 - I'll simply print redrive on the console
75:06 - and else
75:08 - I'll print cancel
75:14 - then I'll move on to the next function
75:17 - I'll have this show warning function so
75:20 - I'll write F1
75:24 - and message box dot show warning
75:30 - let the title be warning in caps
75:36 - and let the message be
75:38 - this might
75:41 - lead
75:43 - to malfunction
75:47 - of the app
75:49 - okay
75:51 - now I have all the functions for all the
75:55 - buttons
75:56 - now I'll declare the buttons one by one
75:58 - and assign them these functions we have
76:01 - seven functions so we'll have seven
76:03 - buttons so let's start
76:07 - B1 equals button
76:11 - and
76:13 - where do I want my button I want it on
76:16 - the window so I'll write win
76:18 - text equals
76:20 - information
76:22 - because first I'll have the show info
76:25 - command so command equals
76:29 - show info
76:31 - background
76:34 - Let It Be
76:36 - sky blue
76:39 - foreground
76:41 - let it be white
76:43 - active background let it be light green
76:49 - then I'll place this button I'll write
76:51 - P1 dot place
76:54 - and x equals 100
76:58 - y equals 100 so I'll simply given a
77:02 - coordinate
77:04 - and similarly I'll have all my buttons
77:07 - so I'll just copy this
77:09 - and edit the next ones
77:14 - so for B2
77:17 - I want it on the screen so I'll write
77:20 - win as Master then text would be error
77:26 - command would also be error
77:31 - and the rest Let It Be same
77:34 - I'll change the coordinates to 100 comma
77:36 - 200. right 200. book
77:41 - then in B3
77:45 - I'll have when text Let It Be retry
77:52 - command would be retry
77:54 - I have my retry function
77:57 - and
77:59 - then let the rest be same let the
78:01 - decoration be same for the button
78:04 - and I'll have the coordinates as 100
78:07 - comma 300 so y would be 300.
78:10 - then again I'll have B4
78:14 - I'll change the text to question
78:19 - command will be q-u-e
78:23 - and I'll change the coordinates
78:26 - to 200 comma 100 so X would be 200.
78:31 - y would be hundred
78:33 - then B5
78:38 - Let It Be cancel
78:41 - command will be cancel
78:44 - and the rest would be same
78:48 - then the x coordinate Let It Be 200. why
78:52 - let it be 200.
78:56 - then I'll have B6
78:59 - text Let It Be yes no
79:05 - yes or no
79:06 - and command Let It Be yes no
79:11 - coordinates will be
79:14 - 200
79:17 - comma 300.
79:20 - then B7
79:24 - let the text be warning
79:30 - command will be warned
79:34 - coordinates will be 300
79:39 - and 100 okay
79:42 - and I'll call in the main Loop
79:45 - all right when dot main Loop
79:51 - I hope there is no confusion the text
79:54 - for buttons is what would be displayed
79:56 - on the buttons the command for the
79:58 - buttons are user defined functions which
80:00 - contain the message box widget functions
80:02 - okay so you should be very clear about
80:04 - all this now let's run this and see the
80:07 - buttons and check out the message boxes
80:10 - how they are popped up on the screen
80:17 - so I have my screen and I can see the
80:21 - buttons as defined and I'll click on
80:23 - each one of them
80:25 - I get a sound too so this important
80:30 - is the title as defined and this might
80:32 - take a minute
80:33 - so this I symbol is there
80:36 - and I have to click on OK because that's
80:38 - the only available option and I have
80:41 - question
80:42 - and there's a question mark symbol I
80:45 - have two options
80:46 - so there are differences in each
80:49 - function
80:51 - and for warning I have an exclamation
80:53 - mark symbol
80:55 - then for cancel I have a question mark
80:58 - again but the options are different I
81:00 - have okay cancel
81:02 - then for retry there is retry console
81:06 - and when I click on retry I can see
81:08 - retry printed on the terminal because
81:10 - that's how I defined it
81:12 - now that's pretty much it about the
81:14 - message box widget thank you
81:17 - hey everyone we have covered almost all
81:20 - the widgets in thinker we are left with
81:22 - a few so let's just take a look at them
81:24 - we will discuss the scale scroll bar
81:26 - list box and spin box they are very easy
81:29 - to understand and there is nothing
81:32 - complex about them so I'll just get all
81:35 - these widgets on the same screen and
81:37 - let's start writing the code
81:39 - all right
81:41 - from Center
81:44 - import Star you don't need to import any
81:48 - separate modules for these then I'll
81:50 - have my screen I'll write when equals TK
81:54 - and then I'll given a title I'll write
81:56 - when dot title
82:00 - and let title be scroll
82:05 - so I'll add my first widget I'll give
82:08 - the name scale
82:10 - half the variable scale
82:12 - equal scale that's my widget
82:16 - so it is like a slider that lets you
82:18 - pick a value and it has two methods get
82:21 - unset so let's just give the options for
82:24 - this where do I want the scale I want it
82:26 - on my window so I'll write when
82:30 - and you have this from N2 to specify the
82:34 - range of this slider
82:36 - so I'll write from equals 0.
82:41 - two hundred
82:44 - okay
82:45 - while given a background I'll give it to
82:48 - be light yellow
82:50 - then a foreground
82:54 - let it be black
82:57 - you can give an orientation for vertical
83:01 - and horizontal so I'll give an Orient
83:03 - equals horizontal
83:11 - then I'll given a label
83:13 - so let the label be scale widget
83:21 - there are many more options like the
83:24 - trough color the slider relief the kind
83:27 - of slider you want you can give it a
83:29 - command you can have a font description
83:31 - you can have
83:34 - resolution you have slider length you
83:37 - can specify the length of the slider
83:39 - then you can specify the state of it you
83:41 - can have the cursor then the Border
83:44 - Etc so
83:46 - you have given enough options and let's
83:49 - pack this widget I'll write scale dot
83:52 - pack
83:53 - cool now I'll go to the spin box I'll
83:57 - write spin box
83:59 - equals spin box
84:03 - and for the arguments I'll give Master
84:06 - equals win
84:09 - again we have from N2 so from 0 to 10
84:17 - you can also given a negative number for
84:19 - from you can start from a negative
84:21 - number you can go to a negative from
84:23 - number but there should be a difference
84:25 - there should be a positive difference
84:26 - between them
84:28 - so you can given accordingly the range
84:31 - but we'll do it from zero
84:35 - and then I'll give in a background color
84:37 - I'll write PG
84:39 - equals
84:40 - light gray
84:44 - FC equals
84:46 - Orange
84:51 - and
84:53 - let me give an a font I will give the
84:55 - font to be Ariel
84:57 - 12 italic it's just a number you can
85:01 - even not given the font
85:02 - for a spin box too we have a lot of
85:05 - options
85:07 - some are same as the scale widget but
85:10 - there are some things that are different
85:12 - so you have button up relief and button
85:15 - down release
85:16 - then you have this increment parameter
85:19 - it can be a float
85:21 - then you have this x scroll command
85:23 - option so you can given a command that
85:26 - you want to take place when you scroll
85:28 - through the values
85:29 - that is when you increment or decrement
85:32 - the
85:32 - numbers in the spin box
85:36 - and I'm done with the widget so I'll
85:38 - pack this I'll write spinbox dot back
85:42 - then I'll go on to the scroll bar
85:44 - I'll write scroll bar
85:47 - equals scroll bar
85:51 - so for argument I have win as master
85:56 - so let's just keep the scroll bar simple
85:58 - it'll just take up a side and I'll pack
86:02 - the scroll bar I'll write scroll bar dot
86:05 - pack
86:06 - side equals right
86:13 - fill equals y
86:16 - so I'll pack this at the right side of
86:18 - the screen and I want to fill
86:20 - the y-axis completely with the scroll
86:23 - bar okay
86:25 - then I'll get my list
86:28 - so I'll have this variable list
86:31 - equals list box this is another widget
86:35 - and when as master
86:39 - now what I want to do is I want to
86:41 - scroll through the list as I move my
86:44 - scroll bar so I'll write y scroll
86:46 - command
86:47 - equals scroll bar dot set
86:51 - so I'll set the values according to this
86:54 - file scroll command okay
86:56 - now I'll also given a font I'll give it
86:58 - to be Georgia 20. it's for the list okay
87:03 - and I'll have the background color to be
87:06 - sky blue
87:09 - now there are many methods associated
87:12 - with the list box widget to insert the
87:15 - values in a list box we would use the
87:18 - insert method so what I'll do is I'll
87:21 - write for I in range 51
87:24 - I'll just make a list with 51 lines I'll
87:28 - write list dot insert
87:32 - end so I need to give in the index
87:37 - and end word represent the point
87:40 - immediately after the last character
87:42 - entered by the user so and for the index
87:46 - and
87:49 - for the element I'll write string I
87:53 - Plus
87:54 - thought
87:57 - we are checking
88:01 - the list and scroll bar
88:06 - together
88:07 - okay
88:09 - now outside the for Loop I'll pack this
88:11 - widget I'll write list dot pack
88:15 - side equals right
88:17 - fill equals y
88:19 - expand equals true
88:22 - okay so that'll give me a good format
88:26 - now I want to configure the scroll bar
88:29 - again because I want to add the list to
88:30 - it okay so I'll write scroll bar dot
88:34 - config we have already discussed the use
88:36 - of config
88:37 - config is basically for overloading
88:40 - and I'll write in the argument command
88:44 - equals
88:46 - list dot y View
88:49 - okay
88:51 - so this tells the scroll bar that
88:53 - whenever the scroll bar is scrolled
88:57 - through the list should also move along
88:59 - the wire view okay the y-axis now I can
89:02 - call the main Loop I'll write win Dot
89:06 - main Loop
89:08 - and let's just run this and check out
89:11 - all our widgets if they're working
89:13 - together and working properly as we have
89:15 - arranged them
89:19 - so I have my scale widget and you can
89:23 - see how this bar moves and gives us
89:26 - values
89:27 - then you have your spin box you can
89:30 - increase the value first and then
89:31 - decrease it
89:33 - but the values will only go from 0 to 10
89:37 - we also have the scroll bar this thin
89:40 - line along
89:41 - the right of the screen and as you
89:45 - scroll
89:46 - As you move this scroll bar you can see
89:49 - the list moving up and down along this
89:52 - we have the list elements as we
89:54 - specified them and that's pretty much it
89:57 - for this video I hope you understood the
90:00 - widgets
90:02 - thank you
90:10 - hey everyone today we're gonna talk
90:13 - about the events and event handling in
90:15 - thinker we would focus on the buying
90:17 - function and talk a little elaborately
90:19 - about the main Loop so events handling
90:21 - is an important part of thinker module
90:23 - in this video we would try to understand
90:25 - the basic things associated with it and
90:29 - in the next video we would see a related
90:31 - example okay
90:33 - so we would try to make the program a
90:35 - little interactive by giving user inputs
90:37 - from the keyboard so that would be very
90:39 - much done by the event handlers okay so
90:42 - let's start writing the code for it I'll
90:45 - import
90:46 - or I'll write from thinker
90:50 - import Star
90:54 - then I'll get my window
90:56 - I'll write
90:58 - when equals TK
91:00 - then I'll given a title I'll write win
91:03 - Dot
91:04 - title
91:06 - let the title be event
91:09 - handling
91:14 - okay so I told you I'll be telling you a
91:16 - little more about the main Loop so
91:18 - whenever you create a tinker application
91:21 - we have always been calling the main
91:23 - Loop okay at the end so why do we call
91:27 - the main Loop what the main Loop
91:28 - actually does
91:30 - it checks whether an event has occurred
91:33 - or not it checks for an event occurrence
91:36 - of an event so if there is some event
91:40 - that has occurred then the written code
91:42 - the code that the user has given would
91:45 - be executed
91:46 - so as the main Loop has checked for an
91:49 - event occurrence
91:50 - the program written will be executed as
91:53 - a response okay so you need to write the
91:56 - code that would be executed in response
91:58 - to an event okay so you write these
92:01 - functions
92:02 - called event handlers for the events
92:05 - that you use in your application okay
92:08 - now I would be creating a very similar
92:11 - event handler for every time I press a
92:14 - key on the keyboard I should get that
92:16 - key printed on the console okay not the
92:19 - printer window but the console so what
92:22 - I'd write is I'll write def so I'll have
92:25 - a function for that I'll write def
92:29 - pressed key
92:38 - and in Brackets I'll write event
92:40 - I'll give event as an argument and I'll
92:44 - write print event dot car
92:48 - so that simply completes what I just
92:50 - said I want to print whatever I clicked
92:54 - okay
92:56 - so
92:58 - now we would move to the bind function
93:00 - to call an event handler whenever an
93:03 - event occurs on a widget or function or
93:06 - method we use the bind function okay the
93:09 - event handler is said to be bound to
93:10 - that event because it's called every
93:13 - time the event occurs okay and how do we
93:16 - do that we'll just write
93:18 - for our window when dot bind okay and
93:23 - the first parameter would be the
93:25 - sequence so it's just a string of the
93:28 - form event name okay I'll just write it
93:32 - down I'll write here the event name is
93:34 - key so in double quotes I'll write
93:40 - key
93:41 - and I should give this
93:44 - less than and greater than sign
93:48 - rounded okay that's how you write the
93:51 - event name and this event name can be
93:53 - any of tincter's events so there are
93:55 - many events in inter we have enter leave
93:58 - button one button two or key so here it
94:01 - is key
94:02 - and then we'll have the function name
94:05 - okay you can see for bind we have to
94:07 - give sequence and then the function okay
94:11 - so the event handler basically so I have
94:15 - pressed key
94:17 - right pressed key as the function okay
94:20 - so that completes my bind function
94:24 - and then I'll run the main Loop I'll
94:26 - write win dot main Loop
94:31 - now whenever the main Loop would run it
94:34 - will check for the event so I have
94:36 - declared my event here as pressed key
94:39 - function okay I have given it as the
94:42 - argument
94:43 - and whenever this event will occur what
94:46 - is my event the event is
94:48 - the user giving an input from the
94:51 - keyboard while by pressing a key okay
94:54 - so whenever this event occurs this
94:57 - function would be
94:59 - carried out okay this part of code would
95:03 - be executed as a response to the event
95:05 - occurrence okay so that's what should
95:08 - happen now let's check if that really
95:10 - happens whenever I click on the key
95:13 - I should see that key printed on the
95:16 - console okay let's do that so I have the
95:19 - sphincter blank screen okay and I'd not
95:23 - do anything
95:25 - with the screen but I just start typing
95:28 - something and that should be typed out
95:31 - on the console automatically without me
95:33 - taking the cursor over there okay so
95:36 - let's do that I'll just press D and
95:39 - there it is you can see it on the
95:41 - console then you can see t
95:44 - and then you can see Q
95:47 - and let me press a numeric let it be one
95:50 - I'll press shift one
95:52 - okay and then I can press M and I can
95:56 - given any character okay this is
96:00 - semicolon and
96:02 - an inverted comma
96:04 - so that's it about this program
96:07 - I just wanted to show you how
96:09 - interactive tinter can be
96:12 - and we'll see a related example in the
96:14 - next video thank you
96:19 - hey everyone we have already discussed
96:22 - the event handlers but we are left with
96:25 - the Tinker events let's discuss a few of
96:28 - them in brief
96:29 - so first up we have the button event
96:32 - when a mouse button is pressed with the
96:36 - mouse pointer over the widget
96:38 - we make use of this event then we have
96:42 - three parts of Wows the middle the right
96:46 - and left so accordingly we have button
96:49 - one button two and button three okay
96:51 - then we have motion we would be working
96:53 - with this motion event as an example we
96:56 - would see an example related to this
96:57 - event
96:58 - so we have B1 motion B2 motion and B3
97:01 - motion for the current position of X Y
97:04 - members and then we can have button
97:07 - release we can have double button we
97:10 - also have enter so enter is for telling
97:14 - that the mouse pointer has entered the
97:16 - widget we also have leave as a
97:18 - complementary to enter
97:20 - so this Leaf event would be used when
97:23 - the mouse pointer leaves the widget okay
97:26 - and then we have focus in on Focus out
97:29 - so focusing is to focus on a visit and
97:32 - focus out is to move to other widget
97:35 - move the focus to other widget okay then
97:38 - we have return we have key we have shift
97:41 - up and we have configure so these were
97:45 - the Tinker events while understanding
97:48 - these event handlers
97:50 - we use the event key and this time we
97:54 - would use the motion event so let's
97:57 - write a program for it so let me tell
98:00 - you what I'd be doing so I would write a
98:03 - program for getting the current position
98:04 - of mouse on a widget only on a widget
98:08 - okay so let's do that so I'll write
98:13 - from thinker
98:16 - import Star
98:20 - then I'll have my window I'll write one
98:22 - equals TK
98:27 - then I'll given a title I'll write win
98:29 - dot title
98:31 - brackets and let the title be event
98:34 - handling
98:39 - let the widget be canvas okay so I'll
98:43 - have C equals canvas
98:47 - and where do I want the canvas I want it
98:51 - on the window
98:52 - so I'll write win comma background color
98:54 - equals pink
98:58 - and width Let It Be 500
99:03 - and height Let It Be 400.
99:06 - okay and uh now I'll use the bind
99:09 - function we discuss the bind function
99:11 - last time
99:13 - so bind is to call the specified
99:16 - function whenever the specified event
99:18 - takes place now I would specify two
99:22 - arguments one would be the event and one
99:26 - would be the function so I need to make
99:28 - that function 2 but before that I'll
99:31 - write C dot bind
99:33 - and
99:35 - now let's define the function
99:38 - I'll also name the function as motion so
99:41 - I'll write
99:42 - def motion
99:45 - and
99:47 - I'll given the argument event we did
99:50 - this last time too
99:51 - because I want to check the event if the
99:54 - event has occurred and the related
99:57 - things to the event okay so I just want
100:01 - to check the current position of the
100:02 - cursor on the widget so I want to print
100:05 - that so I'll write print
100:09 - brackets f
100:12 - current position
100:14 - of cursor is in curly braces event dot X
100:21 - comma event dot y
100:24 - and I'll put this in a bracket
100:30 - so that would get me the current
100:33 - position of the cursor
100:34 - and about this F format this is a very
100:38 - basic way of getting values or variables
100:40 - within a string in Python so I hope you
100:43 - know about that and then I'll just
100:45 - simply write return
100:48 - in the function okay
100:51 - so I can get back to the main part and
100:54 - I'll give in the arguments
100:57 - I'll write
101:00 - within single inverted commas I'll write
101:03 - motion
101:06 - and I'll also given the function to view
101:08 - motion okay that I just defined
101:12 - fine
101:13 - now I'll part this I'll write C dot pack
101:18 - and I'll run the main Loop
101:23 - look
101:25 - so let's run this and let's see if we
101:28 - get the
101:29 - Mouse coordinates
101:33 - so I have the spring screen and whenever
101:37 - I move the cursor over it
101:40 - I get the positions of the cursor
101:44 - constantly and whenever it stops the
101:48 - output has stopped
101:50 - but if I increase this screen
101:56 - and you can see that outside this widget
102:00 - there is no such output scene but on
102:05 - this widget I can get the current
102:07 - position of the cursor
102:10 - so that's it about the event handling
102:14 - so we have covered a lot of tincter
102:17 - and the more you practice the more you
102:20 - get the concept clearer
102:22 - so in the next video we would be seeing
102:24 - some application of tincter would help
102:27 - you implement all that you have learned
102:30 - thank you
102:36 - hey everyone till now we have learned a
102:39 - lot about inter widgets and their
102:41 - functionalities it's time we put them to
102:43 - use so today we would make a simple dice
102:47 - on the Tinker window using the random
102:49 - module and the button widget it would be
102:52 - a six sided die so on rolling a
102:54 - six-sided die you get a number and
102:57 - that's what would happen here we would
102:59 - get a number in between one to six
103:01 - randomly picked by the random module so
103:04 - basically whenever I click on the button
103:07 - I should see a number randomly displayed
103:09 - on the screen so let's get started
103:13 - I'll first import tincter
103:15 - or rather I'll write from printer import
103:20 - star
103:22 - and I'll write win equals CK
103:27 - and win dot title
103:29 - let the title be dice
103:34 - and
103:35 - I'll have to visit I'll add a widget so
103:38 - I'll write button
103:40 - equals
103:42 - button
103:45 - where do I want the button I want it on
103:48 - the window so I'll write when
103:51 - and given the width to be 20.
103:56 - and background to be
103:59 - light yellow
104:02 - then I can given the foreground to be
104:05 - blue
104:09 - and
104:11 - I'll leave the command for right now
104:13 - just write command equals
104:16 - and we'll talk about it later a little
104:18 - later then I'll give an a border of
104:21 - three
104:22 - and relief Let It Be sunken
104:28 - an active background let it be white
104:34 - and the text is played on the button
104:36 - that'll be
104:39 - roll in cups
104:43 - okay then I'll pack this I'll write
104:46 - button
104:47 - dot back
104:52 - now I would also need label widget in
104:55 - order to display the chosen number by
104:57 - the random module so I'll write label
105:02 - equals label
105:04 - so that's the widget and when
105:08 - width let it be 20 so that the button
105:11 - and label are in Sim alignment
105:14 - and background color Let It Be sky blue
105:19 - foreground that will be purple
105:23 - okay
105:26 - now I will Define a function that would
105:28 - assign the value of text parameter of
105:31 - the labels widget so I'll write Def
105:35 - IC number
105:37 - so in this function
105:39 - a random number would be picked in
105:42 - between 1 to 6 and also that number
105:45 - would be assigned to the text parameter
105:46 - of the label so that would be displayed
105:49 - on the screen so how would I do that
105:50 - it's very simple so I have def pick num
105:54 - and I'll write label
105:57 - text
105:59 - so this is a dictionary label object
106:02 - and I'll assign the value
106:06 - Str
106:08 - ing
106:10 - random.randint one to six
106:12 - okay so a six-sided die has six numbers
106:15 - on it so I have used round in so that I
106:19 - can include both one and six
106:21 - so this piece of line picks a random
106:24 - number converts it into a string then
106:26 - assigns that to the text of label
106:29 - now I would have this function as the
106:32 - command for the button widget so this is
106:35 - a dictionary label object so I have
106:37 - simply accessed the text parameter of
106:39 - this label widget that I created just
106:41 - now okay and I have assigned it this
106:44 - value this randomly picked string okay
106:47 - cool then I need to pack the label too
106:50 - so I'll write label dot pack
106:58 - so I left the command of button widget
107:01 - empty now I'll just given the function
107:04 - pick num
107:07 - okay so whenever we click on the button
107:10 - we are calling the pick num function and
107:12 - it assigns the labels text a random
107:15 - number in between one to six
107:17 - okay so we're done with what was
107:20 - required and I can simply run the events
107:23 - Loop I'll write bin dot main Loop
107:29 - so let's run this and let's check if we
107:32 - get randomly picked numbers
107:36 - so I have my screen and
107:40 - when I click on roll button I can see
107:43 - new numbers appearing
107:45 - random number is appearing so that's the
107:48 - use of the random module
107:50 - and
107:52 - it's working quite fine so here we
107:55 - combine two widgets together to get an
107:59 - application
108:01 - you can do the same and
108:04 - the more you practice the more you'll
108:05 - get better at it the more easily you'll
108:08 - be able to handle the widgets indenter
108:11 - I hope you understood this example
108:14 - if it was simple
108:16 - thank you
108:18 - hey everyone today we would create a
108:21 - simple app that converts a temperature
108:23 - in fahrenheit to celsius if I talk about
108:26 - the main things required we would need
108:28 - the function that simply converts
108:30 - Fahrenheit to Celsius that formula then
108:33 - we would need the user to input the
108:35 - temperature
108:36 - for that we would use the entry visit we
108:38 - haven't talked about it yet but it's
108:40 - very simple to use and we would also
108:42 - have a button widget which gives the
108:44 - output on being clicked okay
108:47 - so it is a very simple app let's get to
108:50 - the code right away I'll import inter
108:53 - so I'll write from thinker
108:56 - import Star
108:58 - then I'll get my window I'll write win
109:01 - equals TK
109:03 - I'll have a title I'll write when dot
109:05 - title
109:06 - let the title be
109:08 - temporary sir
109:10 - converter
109:14 - okay then I'll start adding the widgets
109:17 - first I'll add the frame on which I want
109:21 - that text box
109:23 - so I am declaring a frame for it because
109:26 - I also need to put in the label widget I
109:29 - would need the symbol of degree
109:30 - Fahrenheit so I would add that label to
109:33 - the same frame okay
109:35 - so I'll write
109:37 - frame
109:40 - equals frame
109:43 - and where do I want it I want it on the
109:46 - window so when
109:47 - as master and I'll pack this I'll write
109:50 - frame dot grid
109:53 - and row equals 0 and column
109:58 - equals 0 and I'll given a padding I'll
110:01 - write par x equals 10. so there is no
110:05 - overlap on the screen boundaries okay
110:08 - cool
110:09 - then I'll get that entry visit that text
110:13 - box how do I do that
110:16 - I'll write temp one
110:20 - equals entry
110:22 - so that would allow the user to enter
110:25 - any text into that text box okay and for
110:30 - the arguments where do I want it I want
110:32 - this entry widget on the frame so I'll
110:35 - write frame
110:37 - and width let it be 10 cool
110:42 - then I'll use grid I'll write temp one
110:44 - dot grid
110:47 - row equals 0 and column equals zero
110:54 - same as the frame okay
110:56 - and I'll have an F variable for that
110:58 - label for that symbol of degree
111:00 - Fahrenheit because I need to tell that
111:03 - this entered
111:05 - number is in Fahrenheits and that number
111:08 - would be converted into degree celsius
111:10 - so I need to given the units so I'll
111:12 - write f equals
111:14 - label
111:16 - and I want it on the frame so I'll write
111:18 - frame comma text and this is something
111:22 - different you might know it you might
111:24 - not know it but I can easily get degree
111:26 - Fahrenheit symbol by this so I'll write
111:29 - in capitals degree
111:31 - Fahrenheit
111:34 - and there is a slash n before this and
111:37 - it's in inverted comma School
111:40 - now I'll pack this too
111:41 - or should I say use grid
111:45 - so I'll write F dot grid and row would
111:48 - be 0 and
111:52 - column would be one okay
111:55 - simple
111:57 - now we are done with the frame now I
111:59 - would need the button that would convert
112:01 - or that would call on to the function of
112:03 - conversion okay so first let me get the
112:06 - button
112:07 - I'll write
112:09 - button
112:11 - equals button
112:15 - and window I'll not get this on the
112:18 - frame I'll just get in on the window
112:19 - okay and text equals
112:22 - a right Black Arrow so how can I do that
112:26 - the similar way I got the degree
112:28 - Fahrenheit symbol you can get
112:31 - numerous symbols like this so here on
112:34 - the button I'll get a right words Black
112:36 - Arrow so I'll write
112:38 - an inverted comma slash n
112:42 - and right words
112:46 - Black Arrow
112:49 - fine for the command I'll Define the
112:52 - command in some time
112:55 - first let me make the function
112:58 - and I'll give in a background color Let
113:01 - It Be sky blue
113:05 - okay that's it
113:07 - so let me Define this function
113:09 - Fahrenheit to Celsius that would be my
113:11 - function so I'll write
113:14 - Def
113:16 - Fahrenheit
113:18 - to Celsius
113:21 - and brackets
113:25 - so I'll write
113:26 - f equals temp one dot get
113:31 - so whatever you entered here in the
113:33 - entry widget you'll get it over here
113:36 - okay that would be the value of this F
113:39 - variable okay so then I'll get the C
113:43 - that stands for Celsius right now I'll
113:46 - write 5 by 9 so this is the simplest
113:49 - formula for conversion of
113:51 - Fahrenheit to Celsius
113:53 - so I'll write f
113:56 - and minus 32
113:59 - okay I'll also convert this to float
114:02 - because there is a five by nine Clause
114:05 - so I'll write float
114:12 - and now I will display the C variable as
114:14 - the text of another label widget so
114:17 - let's do that I will have temp two which
114:21 - would be the converted temperature
114:23 - the temperature entered in degree
114:26 - celsius okay
114:27 - so I'll write temp two
114:30 - this visit is not this variable is not
114:33 - still declared in the main function we
114:35 - will do that in some time so temp 2 in
114:39 - Brackets text
114:42 - equals f
114:45 - and inverted commas
114:47 - round
114:49 - C comma 2 to 2 places
114:52 - and accordingly press is closed I'll
114:56 - also need that symbol of degree Celsius
114:58 - here just like we got the degree
115:00 - Fahrenheit symbol there
115:01 - I would use that here too so I'll write
115:04 - slash n and degree Celsius
115:07 - in capital
115:14 - so now I'll get to the main function
115:16 - again I'll write up this command I'll
115:19 - write Fahrenheit
115:22 - to Celsius
115:26 - and I'll use grid
115:29 - for this button I'll write convert
115:32 - button
115:35 - dot grid
115:39 - row equals zero
115:42 - column equals
115:44 - one
115:46 - and
115:48 - pad y equals 10.
115:52 - fine
115:53 - and I need to define the stem 2 also
115:56 - okay so I'll write them two it's the
115:59 - label
116:00 - initially let us keep it as degree
116:03 - celsius symbol and then it would be
116:05 - reassigned every time we click on that
116:07 - button after we enter the value okay
116:09 - so we have temp to
116:11 - equals label
116:13 - and and
116:15 - when
116:17 - text Let It Be
116:19 - slash n
116:23 - degree Celsius
116:30 - fine and then I'll use grid to place it
116:33 - Right Temp two dot grid
116:36 - row equals 0.
116:38 - column equals to and Pad x equals 10.
116:44 - same
116:48 - so I'm done with the app I'll call in
116:50 - the main Loop I'll write win dot main
116:52 - Loop
116:54 - and run this
117:05 - so I have my screen again
117:08 - this temperature converted and let's try
117:11 - for 100 degrees Fahrenheit because we
117:12 - know it's 37.78 degrees Celsius so I'll
117:16 - just write 100
117:18 - and nothing else and I'll simply click
117:20 - on this button
117:22 - so I have 37.78 degrees Celsius so this
117:25 - temperature converter is working fine
117:28 - let's enter some other value let's enter
117:31 - zero zero degree Fahrenheit is minus
117:34 - 17.78 degrees Celsius
117:37 - and this would even work for negative
117:40 - values of Fahrenheit so I'll write minus
117:42 - 11 degree Fahrenheit so it would be
117:45 - minus 23.89 degree celsius cool
117:50 - so that's it about this app
117:52 - hope you understood everything thank you
118:03 - hey everyone another application made
118:05 - using thinker can be a text editor we
118:08 - haven't yet explored the file dialog
118:10 - module by tick tock it needs to be
118:13 - imported separately the module provides
118:15 - classes and Factory functions for
118:18 - creating file or directory selection
118:20 - windows we have native loads
118:23 - static Factory functions convenience
118:25 - classes convenience classes help in
118:28 - creating files or directories from
118:30 - scripts while static Factory functions
118:33 - are user responsive so the text editor
118:36 - that we would make would have two static
118:38 - Factory functions open and safe so let's
118:41 - start making the application right away
118:43 - I'll import into
118:45 - I'll write
118:48 - from thinker
118:50 - import
118:52 - star
118:53 - and from
118:55 - tinker
118:57 - Dot
118:58 - file dialog
119:02 - import
119:04 - ask open
119:07 - file name
119:09 - ask save as
119:12 - file name
119:14 - we would use the ask open file name for
119:17 - opening a file for editing and the ask
119:21 - save as file name for saving the current
119:24 - file as a new file
119:27 - now I will get my window I'll write
119:29 - window equals TK
119:36 - and window.title
119:40 - so the title can be text
119:44 - editor
119:47 - fine
119:48 - now
119:50 - I'll get a text widget to insert
119:53 - multiple lines so that I can write on it
119:57 - a text editor needs inputs so this is
120:00 - how I'll give them the inputs
120:02 - and even for displaying some text I need
120:05 - a field so I'll use the text widget so
120:08 - I'll have this variable text
120:11 - equals
120:12 - text
120:15 - where do I want it I want it on my
120:17 - windows I'll write window
120:18 - for round I'll set some foreground I'll
120:21 - give it purple
120:23 - the foreground and background equals
120:26 - light yellow
120:29 - that would be a nice combination and
120:32 - font Let It Be
120:33 - calibri
120:36 - 14.
120:38 - fine
120:39 - then I'll park this
120:41 - I'll write txt text Dot back
120:49 - I will get a menu now to have to open
120:52 - and save as options just like in a text
120:54 - editor so I will name the menu file for
120:58 - that I should draw it menu
121:00 - equals menu
121:03 - and on the window so window
121:07 - now I'll configure it I'll write
121:09 - window.config menu equals menu
121:14 - and now file menu equals menu
121:18 - and in Brackets again menu
121:22 - now I'll add the options
121:25 - first to the main menu I'll write
121:28 - menu
121:31 - dot at Cascade
121:35 - label equals file
121:39 - and menu
121:41 - equals
121:43 - file menu
121:47 - then to the file manual I'll add
121:49 - open and save as so I'll write file menu
121:53 - dot add command
121:57 - label
121:59 - calls open
122:01 - comma command for now I'll leave it
122:04 - blank
122:06 - and file menu
122:07 - dot add command
122:11 - label
122:13 - will save us
122:17 - and command
122:19 - again let's leave it blank for right now
122:22 - and I'll call Window dot main Loop
122:27 - fine
122:30 - now I need these two functions open a
122:33 - file and save a new file so the first
122:36 - function to open a file
122:38 - let's define it I'll write Def
122:43 - open file
122:46 - brackets and
122:49 - I'll write file path
122:53 - equals
122:54 - ask open file
122:57 - name
123:00 - file types equals
123:04 - in a list in a tuple
123:07 - text files
123:12 - comma the extension for them
123:17 - star
123:18 - Dot txt
123:21 - and again comma under table
123:25 - all files
123:29 - comma
123:31 - the extensions
123:35 - this statement will open a dialog box so
123:39 - that the user can select the file to be
123:41 - opened
123:42 - since we are working with only text
123:44 - files I could have only given the Tuple
123:46 - text files but what we have written now
123:50 - lets you access all the kinds of files
123:53 - that can't be presented or read by the
123:56 - text editor
123:57 - now
123:58 - after the dialog box is opened
124:01 - it might happen that the user clicks on
124:04 - the cancel or closes the window so for
124:07 - that case I'll write if not file path if
124:12 - no file path is selected
124:15 - you return
124:17 - no further code is executed
124:19 - otherwise
124:21 - I'll delete whatever is there currently
124:24 - on the text editor I'll write txt dot
124:26 - delete
124:27 - I hope you remember txt was our text
124:31 - widget and I'll delete whatever is there
124:34 - on the text editor currently
124:36 - from index 1
124:38 - so 1.0 till the end
124:44 - fine
124:46 - now I need my text file to be red
124:50 - the selected file to be read so for that
124:53 - I'll write with open file path as an
124:57 - argument
124:59 - mode should be only read so r
125:03 - and you can pass an encoding UTF
125:07 - -8
125:10 - as input file
125:13 - text is equals to input file dot red
125:19 - now this string as read is inserted in
125:22 - the text editor so I'll use the insert
125:25 - function of the text widget so I'll
125:28 - write txt dot insert
125:31 - and
125:32 - text
125:34 - fine
125:36 - and finally I should change the title of
125:39 - the window
125:40 - to the file path
125:42 - okay so I'll write window dot title
125:48 - f
125:49 - Simple Text Editor
125:52 - and file path so this is a python format
125:55 - for
125:57 - getting the values I hope you know this
126:03 - and okay
126:06 - now very similarly I should Define the
126:08 - save file function too so I'll write Def
126:13 - save underscore file
126:16 - and brackets
126:20 - okay so this would be for saving the
126:22 - current file as a new file
126:25 - firstly I need to create the file path
126:28 - to get the location of the file to be
126:29 - saved
126:30 - so I'll write file path equals ask save
126:34 - as file name
126:37 - default extension
126:40 - dot txt so how the file should be saved
126:44 - with the extension ta dot txt unless
126:47 - specified
126:49 - and file types again similarly in a list
126:54 - then in a tuple
126:57 - text files
126:59 - and the extension
127:01 - star.txt
127:04 - again you can given the all files or not
127:08 - it's your wish
127:10 - then all files
127:13 - and star dot star
127:15 - okay
127:16 - now again if
127:19 - the screen is canceled you do not need
127:22 - to run any further code for that I'll
127:25 - write if not file path
127:28 - return
127:32 - otherwise a new file is created the text
127:35 - on the text editor is extracted for the
127:38 - same so how would I do it I'll write
127:40 - with open I'll given the file path I
127:44 - already have it
127:45 - mode now would be W so that it is
127:48 - writable
127:50 - encoding equals UTF
127:53 - hyphen 8.
127:55 - as output file
127:58 - okay
128:00 - Now text equals txt dot get
128:05 - from 1.0
128:08 - till index end
128:12 - okay the output file gets the text
128:15 - so I'll write output underscore file dot
128:18 - right
128:20 - text
128:22 - and again the title needs to be changed
128:25 - to file path so I'll write window.title
128:29 - if
128:31 - Simple Text Editor
128:34 - and file path
128:36 - and curly braces
128:40 - and that's pretty much it for the two
128:42 - functions now I need to pass these two
128:45 - functions as the commands for the two
128:47 - menu options
128:49 - so I'll write
128:50 - for file menu one
128:53 - command equals open file
128:56 - where the label was open and for save as
128:59 - I'll write the command save underscore
129:02 - file
129:04 - we are good to go let's run this and see
129:07 - if the text editor works properly
129:14 - so I have the window and please note
129:17 - that the title is text editor it would
129:20 - change later I have a light yellow
129:22 - background I have this file menu and I
129:25 - can have open and save as as options so
129:29 - I'll just type in something I'll write
129:31 - this is a tincter application
129:36 - a simple
129:38 - text editor
129:41 - and I'll save it now I'll click on file
129:44 - I'll click on save as and I have this
129:47 - pop-up window and it is asking me the
129:50 - file name so I'll name it as thinker
129:53 - and I'll click on Save
129:55 - now I'll again go to file and click on
129:59 - open
130:00 - I will click on
130:02 - tinker
130:04 - and I'll click on open
130:07 - so here I have my text that I just saved
130:10 - the title has also changed to file path
130:13 - so this was a simple text editor thank
130:16 - you
130:20 - hey everyone in this video we would make
130:22 - a simple paint application using tincter
130:25 - we would use many new methods and a lot
130:28 - would be from the canvas class obviously
130:30 - as we are working with paint don't worry
130:33 - it would be very easy so to make this
130:35 - application we would use the colors user
130:37 - module and just to make things more
130:40 - organized I would make main class that
130:43 - would be later called onto the screen
130:45 - let's get started so from denter
130:50 - import Star
130:53 - and separately from thinker
130:57 - import
130:58 - color chooser and ttk
131:03 - ttk you'll get the use of it later
131:06 - now the window declare plus its title
131:10 - so we have
131:12 - win equals TK and for the title I'll
131:16 - write win dot title
131:19 - feet up
131:24 - then I'll call on to the main Loop
131:27 - so when dot main Loop
131:30 - so I have the basic structure now the
131:33 - class main where I would be defining the
131:36 - functionalities of the paint app
131:39 - so let's get started I'll get the class
131:41 - I'll write class Main
131:47 - and
131:49 - first the init function definit
131:57 - for argument itself and master
132:00 - so this master is the window
132:03 - that when that would be passed on later
132:06 - to the main class
132:08 - and then I'll write self dot master
132:16 - equals master
132:19 - for initializing the window
132:22 - now I need to initialize a lot of
132:24 - variables to start doodling on screen
132:26 - like the color of my pen it's with maybe
132:29 - the screen background the starting
132:31 - position of the pen Etc so let's
132:34 - initialize the variables one by one
132:37 - so first is
132:39 - self dot color
132:41 - underscore foreground equals
132:46 - black so the pen color becomes black
132:48 - initially you can change it later
132:52 - and then self
132:54 - dot color underscore background equals
132:58 - White
133:00 - then also the initial positions so I'll
133:03 - have self Dot
133:05 - old underscore X
133:08 - equals
133:10 - none
133:12 - and similarly
133:14 - self taught
133:16 - old underscore y equals none
133:22 - also the pen width self dot pen
133:26 - width
133:28 - equals five
133:31 - I will call the straw with its function
133:34 - that is yet to be defined which would
133:36 - describe the layout and Main functioning
133:38 - of my paint app
133:40 - so I'll just write self dot Draw widget
133:44 - and brackets
133:46 - you'll just understand why I call this
133:48 - here later on when I Define the draw
133:50 - widgets
133:52 - function
133:54 - now I'll write
133:56 - self.c dot bind
133:59 - now here I have started using event
134:01 - handlers the bind function called for
134:04 - the canvas c c would be declared in the
134:07 - draw with its function now the argument
134:10 - for this given tangler bind
134:13 - would be P1 motion which is the mouse
134:16 - being moved while the left Mouse button
134:18 - is held down and the function called the
134:21 - other argument of the bind function
134:23 - would be self dot paint
134:25 - this would be another function in the
134:28 - main class and
134:30 - it would be used to draw the lines on
134:33 - the canvas
134:34 - so I'll write self.c.bind
134:39 - P1 motion
134:44 - self-taught paint
134:48 - okay
134:50 - now similarly I'll have another event
134:54 - for the button release to specify the
134:57 - button release of Left Mouse button I'll
135:00 - use button release 1 event and for the
135:04 - function of this event I will call the
135:06 - self reset it is another function in the
135:09 - main class I have to declare it
135:11 - it will indicate the end of one curved
135:14 - drawn okay so I'll write down cell
135:18 - dot C
135:20 - Dot
135:21 - bind
135:22 - and
135:24 - button release
135:30 - one
135:32 - self dot preset
135:40 - now I'll Define the paint function so
135:42 - I'll write that paint
135:46 - self comma e so e would be the
135:50 - coordinates of the current Mouse
135:52 - position
135:53 - I would fetch that repeatedly in order
135:56 - to draw a curve and if self dot old
136:01 - underscore X
136:03 - and self thought
136:06 - underscore Y is true
136:09 - it's if it's available then I'll create
136:12 - line I'll use the canvas
136:14 - function create line and I'll write self
136:17 - Dot C dot create line
136:23 - and as argument I'll given the Four
136:26 - Points the four coordinates so self dot
136:30 - old X
136:32 - and cell dot old y and e dot X and E dot
136:37 - y the current events the current Mouse
136:40 - positions X and Y coordinates
136:43 - the width of my curve would be given by
136:46 - self dot bandwidth as I have defined it
136:48 - in the initial
136:50 - function
136:52 - and
136:53 - fill equals self dot color foreground
136:58 - and cap style would be round it's just
137:00 - the style of the curve the line and I
137:04 - can do smooth equals true
137:07 - so we have already used create line in
137:10 - the previous videos
137:12 - and so I hope you don't need any
137:14 - explanation for the arguments given
137:16 - and I'll replace the value of old X
137:20 - with e dot X and cell dot old underscore
137:24 - y equals e dot y
137:27 - this would let me draw a continuous line
137:30 - and then I'll have the reset function
137:33 - again itself and E the current position
137:37 - of the cursor
137:40 - and I'll have self taught old underscore
137:43 - x equals none
137:48 - and self thought old underscore y equals
137:51 - none
137:52 - because basically I have
137:55 - ended one curve so that's what reset
137:59 - means
138:02 - now I'll start defining some options
138:04 - available some functionalities available
138:06 - with the paint app
138:08 - now the first one in the functions would
138:11 - be def changed width
138:14 - and
138:15 - I'll give self comma width so this would
138:18 - be used to change the width of the pen
138:22 - off the line and I'll have self.pin
138:26 - width equals width
138:28 - okay
138:30 - and I have
138:32 - clear canvas so I'll write def clear
138:36 - canvas
138:37 - self
138:39 - and I'll use the delete function from
138:42 - canvas self.c.delete
138:46 - and argument would be all
138:49 - that would just actually clear the
138:51 - canvas completely
138:53 - I'll also have the functionalities of
138:55 - changing the foreground and the
138:57 - background of the screen
138:58 - so first for the foreground changing
139:01 - I'll write def
139:03 - change underscore ft
139:07 - and self
139:10 - so self dot color underscore FC equals
139:15 - color chooser
139:20 - dot ask color
139:23 - equals self dot color underscore FC
139:27 - and
139:28 - 1.
139:31 - so color Chooser dot ask color returns a
139:35 - tuple that contains two values that
139:37 - represents the selected color the one at
139:40 - the zeroth index is the RGB value and
139:43 - the second element of this Tuple is the
139:45 - hexadecimal color
139:47 - and since our color uses hexadecimal
139:50 - values
139:51 - I have given the first element of this
139:54 - Tuple as the argument okay and similarly
139:58 - I can Define for background color
140:02 - I'll write Def
140:06 - change
140:07 - underscore PG and self
140:12 - and self dot color
140:15 - underscore PT equals color chooser
140:20 - dot ask color
140:23 - and color
140:24 - equals self
140:27 - color underscore PT
140:30 - and in square brackets one
140:33 - fine also I need to write self dot C
140:39 - PC and inverted commas
140:43 - equals self dot color
140:46 - riscore BG cool
140:49 - now it's the turn of draw widgets
140:52 - function so this would be like the real
140:55 - layout of the frame of the entire canvas
140:58 - of the entire screen
141:00 - so I'll write Def
141:04 - draw widgets
141:08 - self
141:10 - and now the screen should have the
141:14 - controls in one part and the canvas on
141:16 - the other so we need to divide the space
141:18 - available
141:20 - for that we use frames
141:22 - so I'll write self dot controls
141:26 - equals frame
141:29 - self taught master
141:32 - I hope you remember the master variable
141:34 - it was the screen itself the window and
141:39 - I'll give some padding I'll Write Pad X
141:43 - equals five
141:45 - part y
141:47 - equals 5.
141:50 - now on the left side I would need the
141:52 - controls like the pen color the
141:54 - background color let me put these in a
141:56 - menu also the clear canvas and exit
141:59 - option should be available there then do
142:01 - it just the size of the pen that is the
142:03 - width
142:04 - I would use a slider let's get all this
142:07 - on the screen first so starting with the
142:10 - label of the pen with controller
142:13 - I'll write text PW
142:16 - equals label
142:20 - self thought controls
142:24 - text equals pen width
142:27 - font equals Georgia 16.
142:31 - now I got this on the frame and not the
142:33 - window itself please note that
142:37 - and I'll
142:39 - put it in a grid I'll write text PW dot
142:42 - grid
142:45 - rho equals 0 column equals 0.
142:49 - then I'll have the slider
142:51 - I'll write self-taught slider equals ttk
142:55 - dot scale
142:57 - this is where ttk is used I'll have a
143:00 - different kind of slider
143:02 - it would not show me the numbers on the
143:05 - scale and
143:07 - so for the argument I'll write
143:09 - self-taught controls
143:12 - comma from equals five
143:16 - 200
143:19 - 2 equals hundred command is self dot
143:23 - change w
143:24 - so just to recall what changed W did
143:28 - it change the width of the pen
143:31 - it assigned a new value to the pen bit
143:35 - and the orientation of the scale of the
143:38 - slider would be vertical
143:40 - fine
143:42 - now we'll set the pen value bandwidth
143:46 - so I'll write self.slider dot set in
143:50 - Brackets
143:51 - self dot pen width
143:55 - okay
143:56 - now self.slider dot grid
143:59 - row equals zero
144:02 - column equals one
144:05 - now I'll pack my frame I'll write
144:08 - self.controls.pac
144:10 - and side equals left
144:13 - fine
144:15 - now here I'll declare my canvas so
144:18 - self.c equals canvas
144:21 - self.master where do I want my canvas on
144:25 - the screen on master
144:27 - so self-taught Master width equals 500
144:30 - and height equals 400.
144:33 - background color equals self dot color
144:35 - underscore PG it was there in the init
144:38 - function
144:39 - so there is where from we pick the
144:41 - background color
144:44 - then I'll pack this canvas I'll write
144:46 - cell.c
144:48 - dot back
144:50 - fill equals both
144:53 - expand equals true
144:56 - we've already worked with canvas and
144:58 - frames and labels a lot of times so I
145:01 - hope you're getting what is going on
145:04 - it's just the assembling of all that we
145:07 - observed it's nothing difficult
145:11 - and now I need to get the menu
145:14 - so I'll simply have this menu variable
145:17 - equals menu
145:19 - cell dot master
145:22 - and
145:24 - self.master.config menu equals menu
145:28 - and
145:29 - I'll have my option menu to which I'll
145:32 - be adding all the options available
145:35 - so
145:37 - option menu equals menu
145:40 - in Brackets menu
145:42 - it's in the menu of the main menu okay
145:45 - I hope it is not confusing now to menu
145:48 - I'll be adding the option menu
145:51 - variable
145:53 - so how would I do that I'll write menu
145:55 - dot art Cascade
145:57 - label equals menu
145:59 - menu equals option menu
146:02 - now let's add the options to the option
146:05 - menu so I'll write option menu Dot
146:08 - add underscore command
146:12 - label equals brush color
146:17 - command equals self dot change
146:19 - underscore
146:21 - foreground
146:25 - similarly
146:27 - or the other functions
146:29 - I'll write option menu Dot
146:33 - add command
146:37 - label equals background color
146:42 - command
146:44 - equals self thought
146:46 - change background
146:52 - then option menu
146:54 - dot add command
147:03 - label equals
147:06 - clear canvas
147:13 - command
147:16 - close self.clear
147:22 - again
147:23 - option menu
147:27 - dot add command
147:31 - label equals exit
147:37 - command equals self
147:40 - dot master dot destroy
147:44 - so we have four options one for changing
147:47 - the pen color the foreground one
147:50 - for the background changing color
147:54 - one for clearing the canvas
147:56 - and one for exiting the canvas okay
148:00 - so we're good to go
148:02 - okay but we need to call in this main
148:05 - class
148:06 - so I'll write Main
148:09 - and in Brackets when
148:12 - sorry
148:13 - now we're good to go
148:15 - and let's run this
148:21 - so I have my window and I can see this
148:24 - menu and bandwidth so I'll
148:28 - start right away doodling on the screen
148:31 - and I can see the line I've drawn
148:36 - and I can change the brush color
148:39 - I can pick any color let me pick this
148:43 - and I have different color pen now let
148:47 - me change the width once
148:50 - so it has a better width now
148:53 - brush is thicker and I can change the
148:56 - background color too
148:59 - so here it is the background color is
149:01 - different again I can clear the canvas
149:04 - everything is gone
149:06 - and if I click on the exit option
149:09 - the screen goes away
149:11 - so the paint application is working
149:13 - pretty much fine
149:15 - this was it for the program thank you
149:24 - hey everyone in some of the last videos
149:27 - we have learned the basics of tincter
149:29 - all that we need to make an application
149:31 - with tint
149:32 - so another application that we can make
149:35 - using the tincter module is the
149:37 - ciphertext application so to actually
149:40 - encrypt and decrypt the message we would
149:42 - use the one-time pad module but to give
149:45 - it its UI interface we will use the
149:47 - tincter module
149:49 - if you are not familiar with
149:51 - cryptography and Cipher you can read
149:53 - about it in the description so as I told
149:56 - you we would be using one-time pad for
149:58 - encryption and decryption purposes let's
150:01 - import the module also this might not be
150:04 - pre-installed so you can just run the
150:06 - command
150:07 - pip
150:08 - install
150:10 - One Time Pad
150:17 - so you can write that in your terminal
150:19 - and you are good to go
150:21 - so now we would import that module I'll
150:25 - write import
150:26 - One Time Pad
150:30 - Also let's import the Tinker I don't
150:32 - want to write Tinker dot over and over
150:34 - so I will just import everything from
150:36 - denter and this is how we have always
150:39 - done it
150:40 - from
150:42 - thinker
150:44 - import
150:46 - star
150:48 - and then you get the window
150:51 - that is your GUI interface you will
150:53 - write win equals TK
150:57 - and also we can give it a title right
151:00 - win dot title
151:04 - encryption
151:08 - for
151:09 - so what I'd be doing is I would create a
151:12 - function for encryption decryption is
151:14 - similar I would discuss it but to
151:16 - execute it is your task
151:18 - so coming back to the encryption part I
151:21 - should have an entry box for entering my
151:23 - message that I want to encrypt or encode
151:26 - and another display box for the
151:29 - encrypted value to be displayed also I
151:32 - would need encryption Button as the
151:34 - function should only be called after
151:35 - entering a value
151:37 - so let's first create the entry fields
151:39 - and their labels
151:41 - we will have two labels one for entering
151:44 - the original message and one for the
151:46 - encrypted message
151:48 - so if you couldn't follow what I said
151:50 - you will just understand as I write it
151:53 - so I'll first have my variable
151:56 - for the first label for entering the
151:59 - message
152:00 - which is OG MSG
152:03 - so it's just a short for original
152:05 - message and I'll write label
152:10 - where do I want this label I want it on
152:12 - my window so I'll write when and what is
152:14 - the text that should be displayed in
152:16 - this label it is enter message
152:22 - then I'll put it in a grid I'll write
152:24 - ogmsg dot grid
152:29 - in order to display it where do I want
152:31 - this message or label to be displayed or
152:36 - to be placed that is on row 10th and
152:40 - column one
152:45 - working with row and column is more easy
152:48 - to visualize so that's why I've used row
152:51 - and column and I'll get
152:54 - another label that is for getting the
152:57 - encrypted message so I'll write emsg
153:01 - equals label
153:05 - when dot text equals encrypted message
153:20 - and then I'll put it in a grid again
153:22 - emsg dot grid
153:25 - and related to the position of the other
153:28 - label I'll put the row equal to 11.
153:34 - and column equal to 1 okay
153:38 - so there goes my label
153:41 - and
153:43 - the label would be the text that is
153:45 - already displayed on the screen
153:47 - so now we will create the text box using
153:50 - entry widget of tenter
153:53 - you might note that we haven't used the
153:55 - one time pad yet we will use it only in
153:59 - the encryption function so I want two
154:01 - entries one for entering and another for
154:04 - displaying result
154:05 - so I'll have E1
154:08 - equals entry
154:10 - and where do I want it I want it on the
154:13 - window let's keep everything simple and
154:16 - try to understand what's happening then
154:18 - I'll put it in a grid again I'll place
154:21 - it I'll write E1 dot grid
154:25 - and row equals 10. now since you have
154:29 - placed one object somewhere on the
154:32 - screen
154:33 - relative to that you can arrange the
154:36 - other objects also okay
154:38 - so I'll write row equals 10 and column
154:43 - equals to okay and similarly I'll have
154:47 - the another entry E2 equals entry
154:51 - and when
154:53 - and E2 dot grid
154:57 - row 11.
155:01 - column
155:02 - two
155:04 - okay
155:06 - now finally I'd be creating the
155:08 - encryption button
155:10 - so let me write it down I'll write
155:12 - encryption
155:15 - button equals button
155:20 - and it is win
155:23 - I want it on the window so I'll write
155:25 - win and text should be
155:28 - Let It Be encryption
155:30 - because that's the function that would
155:32 - be carried out
155:34 - the ground color Let It Be Gray
155:38 - it's a normal button and for round let
155:40 - it be black
155:44 - and now for the command
155:46 - I just leave it blank
155:50 - because I have not defined the function
155:52 - yet
155:53 - and I'll pack this encryption button
155:56 - I'll write encryption button dot grid
156:00 - row equals 13.
156:03 - column equals to
156:05 - fine
156:06 - now I'll write win dot main Loop
156:12 - now let's just Define this encrypt
156:14 - message function so I'll write
156:17 - I'll just go above a little scroll up a
156:20 - little
156:21 - and I'll write def encrypt message
156:31 - and I'll have this variable message
156:35 - which will be the original message that
156:38 - would be encrypted that you want to
156:40 - encrypt and where will I get it from
156:43 - I'll get it from my E1 the first entry
156:45 - that I'd be making and how do you get
156:48 - that in tincter you can write message
156:50 - equals
156:52 - E1 dot get and brackets
156:57 - and then to encrypt the this message I
157:00 - can write I'll have another variable
157:02 - that will hold this value I'll have
157:04 - Cipher text
157:07 - equals
157:09 - One Time Pad dot encrypt this is an
157:13 - inbuilt function it will automatically
157:15 - encrypt the message that has been given
157:18 - as an argument I'll write message
157:20 - because that's the original message that
157:22 - I want to encrypt and I'll write run
157:27 - this fandom gives you what kind of a key
157:30 - you want so I just can have any random
157:34 - kind of key I hope you know what key is
157:37 - for a cipher text if you don't please
157:39 - read the description
157:41 - now I'll insert this value in the second
157:45 - entry that I created E2 so how will I do
157:50 - that
157:51 - I'll write E2
157:53 - dot insert
157:57 - and 0 comma Cipher text
158:01 - the zero in the argument is for the
158:04 - starting position of this Cipher text
158:07 - from where you want the cipher text to
158:09 - be displayed so the command for the
158:12 - encryption button would be encrypt
158:14 - message I'll just type that down
158:18 - and now we are good to go
158:20 - let's check this once
158:22 - and encrypt the messages
158:29 - so I have the window now let me enlarge
158:31 - it a little
158:34 - and I will just enter some random text
158:37 - or message let me write hello and I
158:41 - should get something encrypted some kind
158:43 - of code for this hello okay so I'll
158:46 - write hello
158:48 - and I'll click on the button encryption
158:53 - so here I go I have some code
158:57 - some encrypted message some Cipher for
159:00 - hello
159:01 - so that's pretty much it about this
159:04 - program
159:05 - for decryption you can use the decrypt
159:08 - function in one time pad module
159:11 - and you can carry out pretty much the
159:13 - same what we did in this application
159:17 - thank you
159:20 - hey everyone in this video we will try
159:22 - to make a registration form using
159:24 - tincter
159:25 - there is nothing to be explained about
159:27 - it as done in some of the last inter
159:29 - applications it is just assembling all
159:32 - that we have learned in linkta this is
159:34 - more like a practice session so let's
159:36 - get started with the code right away
159:40 - from tanker import Star
159:43 - and also importing to
159:46 - Dot message box
159:50 - now I'll add my window root equals TK
159:57 - also I'll set a specific size of the
159:59 - window
160:00 - Let It Be 500 into 500
160:03 - I will put that in inverted commas
160:06 - the form looks cleaner this way moreover
160:09 - it's been long we have used place to
160:11 - position objects mentioning the window
160:13 - size lets me manage coordinates easily
160:16 - then I'll also given a title I'll write
160:19 - shoot
160:21 - dot title
160:24 - registration form
160:26 - since we are making a registration form
160:28 - it would be registration form cool
160:33 - also let me give my form a little
160:35 - background so I'll write root dot config
160:39 - background equals
160:45 - hash f f
160:48 - e
160:50 - 6 f
160:52 - 0.
160:54 - now this should be an inverted commas
160:57 - also this is a light shade of pink
161:00 - you can also pick any random colors from
161:03 - Color Picker now
161:06 - I will make a very simple registration
161:08 - form it will have five entry Fields two
161:11 - for the complete name first and last
161:13 - name then a date of birth field a
161:16 - country field from which country the
161:18 - user belongs
161:19 - which will be your drop list a language
161:22 - selection checkbox
161:24 - and a radio button for gender selection
161:28 - okay
161:29 - so I'll just quickly declare all my five
161:32 - variables
161:34 - as string variables and
161:37 - if you cannot recall what string
161:39 - variables were they were usually used
161:42 - with the widgets entry and label since
161:44 - there are going to be many entries I
161:47 - would make use of string bar
161:49 - to manage them effectively I will not
161:52 - give in any arguments as they are
161:54 - directly contained in the master window
161:57 - so first name FN equals stringvar
162:01 - brackets
162:04 - last name Ln equals string bar again
162:10 - top the date of birth equals string bar
162:15 - variable equals string bar VAR
162:21 - C1 equals Java this would be our check
162:25 - box 1 for the language selection
162:29 - word to
162:32 - equals python
162:34 - VAR C3 equals C plus plus
162:40 - and then radio variable again a string
162:43 - bar
162:46 - this war variable would be used for
162:49 - country
162:51 - and okay
162:53 - I would also like this information
162:57 - to be
162:58 - displayed later on the console after I
163:02 - have submitted the registration form
163:04 - so I'll have a function for that
163:07 - I'll write Def
163:09 - print
163:12 - entry
163:14 - rockets and column
163:18 - first equals FN
163:22 - dot get so first would be my first name
163:25 - variable
163:26 - you can take any variables that's not a
163:30 - problem
163:31 - and then for the last name I'll write
163:34 - second equals Ln dot get
163:39 - dob1 equals Tob dot get
163:44 - variable 1 equals variable dot get
163:50 - War 3 equals vrc1
163:54 - or 3 equals for C2
163:59 - word 3 equals War C3
164:05 - now these three were repeated because
164:07 - you would be selected something from the
164:10 - check box only one option
164:13 - and accordingly the option would be fair
164:16 - in later on okay now I'll have my
164:19 - variable 4 equals radio underscore War
164:23 - dot get
164:26 - cool now I'll just print it
164:29 - so how I'll print it just follow along
164:32 - you know this already right print
164:35 - f
164:38 - the full name is
164:41 - first in curly braces and second in
164:44 - curly braces with a space in between
164:48 - then print f
164:52 - your age is
164:57 - top one
164:58 - and curly braces again and print
165:03 - if your country is
165:06 - in curly braces variable one
165:10 - then again print
165:12 - f
165:14 - your selected programming
165:16 - language is
165:23 - variable 3
165:25 - in curly braces again and print
165:29 - if your gender is in curly braces
165:33 - variable 4.
165:35 - now I'd be calling this function when
165:37 - I'd be done with my form filling so I'll
165:39 - also have this tincter Dot message box
165:42 - dot show info
165:44 - just to give the user a pop-up that your
165:47 - form has been filled
165:49 - so as the message I'll write
165:52 - congratulations
165:56 - this would be the heading of the pop-up
165:58 - box the message box
166:00 - and the message displayed in the Box
166:03 - would be
166:05 - user
166:06 - has
166:08 - successfully
166:11 - signed up
166:14 - now I'll start with the labels the text
166:17 - things and the entry Fields so let's
166:21 - start with the heading I'll have a
166:23 - heading registration form
166:25 - so I'll have a variable heading equals
166:28 - label
166:32 - where do I want it I want it on root
166:36 - the window I have and text would be
166:40 - registration form
166:44 - let me decorate it a little so I'll
166:46 - write relief equals solid
166:50 - width equals 20.
166:55 - font
166:57 - aerial
166:59 - 19
167:01 - and pulled
167:03 - foreground is
167:06 - hash
167:07 - p30047
167:13 - and background is Hash FF
167:18 - e 6 f 0.
167:22 - now I'll place the heading heading dot
167:25 - place
167:26 - x equals 90 y equals 10.
167:32 - fine then for the first name I'll have a
167:36 - variable F name equals label
167:39 - it's just the text not the entry field
167:42 - right now so label and root
167:46 - text equals first name and column
167:49 - width equals 20 font equals bold 10
167:55 - background equals FF
167:58 - e 6 f 0.
168:04 - fine now I'll place it
168:07 - fname dot place
168:12 - x equals 80.
168:17 - y equals 70.
168:20 - fine
168:22 - then for the entry field of the first
168:24 - name I'll write EF name
168:27 - equals entry
168:31 - root
168:34 - text War equals FN
168:37 - okay
168:39 - now F inverse the string variable that
168:41 - we declared above I hope you remember
168:43 - this is how we have used it
168:46 - and I'll place it I need to place the
168:49 - entry field also so it should be on the
168:52 - same y-axis
168:53 - and
168:55 - so I'll write efname dot place
168:59 - x equals 240 y equals 70. now very
169:04 - similarly for the last name L name
169:08 - equals label
169:10 - root
169:12 - text equals last name colon
169:19 - width equals 20
169:21 - font equals bold then
169:24 - background equals again
169:27 - hash FF E6 F0
169:33 - so I'll place it
169:36 - L name dot Place x equals 80 y equals
169:41 - 120.
169:44 - now the entry field for the last name
169:48 - I'll just copy it from above and change
169:51 - the text bar
169:53 - equals Ln
169:55 - then I'll pack it again I'll just copy
169:59 - it
170:00 - the last entry field
170:03 - x axis would be same y coordinate would
170:06 - be 120 now
170:09 - fine then moving on to the date of birth
170:12 - label and entry I'll have date equals
170:16 - label
170:18 - root comma text equals DOB
170:23 - width equals 20
170:26 - font equals bold and 10 background again
170:30 - would be ffe6 F0
170:34 - and I'll place this I'll write date dot
170:37 - place
170:38 - x equals 80.
170:41 - y equals 170.
170:45 - fine then the entry field
170:48 - e d o b equals entry
170:52 - root
170:55 - and text bar equals top
171:00 - now I'll place it e t o p dot Place x
171:05 - equals 240 y equals 170. fine
171:10 - now I'll have the country and that would
171:13 - be your drop down list so first the
171:16 - label country equals label
171:22 - where do I want this I want it on the
171:25 - window so I'll write root
171:28 - so the text would be country of course
171:30 - text equals country
171:34 - width equals 20 font equals poles 10.
171:39 - for round equals ffe6 F0
171:43 - you can just copy it from above
171:46 - and change the text part
171:49 - and
171:51 - country dot place
171:54 - x equals 75 y equals to 20.
172:03 - now I'll given a list for the drop down
172:06 - box
172:07 - and let's have it let's have the list
172:10 - now
172:12 - list equals
172:15 - let me give in some names of country
172:18 - Nepal
172:21 - India
172:23 - a miracle
172:25 - China
172:28 - doll
172:30 - Japan
172:33 - South Africa
172:37 - and you can given names of any countries
172:41 - and a lot more countries
172:44 - and I'll just make it a drop down list
172:47 - now how do we do it so drop list equals
172:51 - option menu
172:53 - it's again a tinctive function
172:57 - and root
173:00 - and variable
173:02 - variable would save the value of the
173:05 - list whatever was selected
173:08 - and where the values will be selected
173:12 - from the list so star list
173:16 - fine now to set the value I'll write VAR
173:20 - dot set
173:22 - select country
173:24 - okay
173:26 - now drop list dot config
173:31 - since the drop list values that is war
173:33 - can change so I need to configure the
173:35 - drop list
173:37 - and I'll just given the width equals 15.
173:45 - so I'll just place it
173:47 - drop list dot place
173:50 - x equals 238 y equals to 20.
173:56 - now again I'll have a label for the
173:59 - language
174:01 - equals label
174:04 - root
174:06 - text equals programming language
174:11 - width equals 20
174:13 - font bold and then
174:16 - background same as above ffe6f0
174:20 - and I'll place this variable language
174:23 - language dot place
174:28 - x equals 95
174:31 - and Y equals 270.
174:34 - fine
174:36 - now I'll have the check buttons
174:39 - C1 equals check button
174:42 - root
174:45 - text equals Java
174:48 - variable equals War C1
174:52 - dot place
174:54 - now here I'll be placing this all
174:58 - together
174:59 - without taking it separately
175:02 - and x equals 235
175:06 - y equals to 70.
175:09 - just copy this entire statement twice
175:12 - because we have two more check buttons
175:16 - text would be python for the second one
175:18 - C2 and where variable would be rc2
175:24 - and I'll place it somewhere else that is
175:26 - x equals to nine t
175:28 - and Y equals to 70.
175:31 - similarly
175:34 - for C plus plus
175:39 - VAR C3
175:41 - and I'll change the x coordinates also
175:46 - fine now for the gender I'll have the
175:49 - label
175:50 - I'll just copy it from above
175:53 - because everything is same just need to
175:56 - change the text that is gender
176:01 - otherwise width font and background
176:04 - color they all are same
176:06 - and I'll place it somewhere else I'll
176:09 - write gender dot place
176:12 - x equals 73
176:14 - y equals 320.
176:17 - fine
176:19 - now for gender I'll have radio buttons
176:22 - I can have male and female
176:25 - so R1 equals radio button
176:29 - root
176:31 - text equals mail
176:36 - variable equals radio underscore War
176:39 - value equals mail dot place
176:44 - x equals to 30 comma y equals 320.
176:51 - copy the same R1 make it R2 and text
176:55 - would be female
176:57 - also the value would change to female
177:03 - and x coordinate would change to 290.
177:07 - fine
177:09 - so I had all my five entries
177:12 - and I'll have two buttons now one to
177:15 - quit
177:16 - and another for submitting the phone so
177:19 - I'll have
177:20 - submit equals button
177:25 - root
177:26 - text equals submit
177:29 - width equals 12.
177:32 - background equals FF
177:35 - 4D 9 4
177:40 - ground let be white
177:43 - command equals print entry
177:46 - and I'll place it
177:49 - x equals 130 y equals 400.
177:54 - I'll have
177:55 - the quit button so quit equals button
178:01 - root
178:03 - comma text equals quit
178:07 - equals 12.
178:12 - background and foreground same as buff
178:16 - and command would be exit
178:19 - and I'll place it
178:22 - x equals to 80 comma y equals 400
178:27 - and I'll call in the main Loop to root
178:30 - root dot main loop it's good to go now
178:34 - we should not have any problem in the
178:37 - code let's run this uncheck it
178:44 - so I have the window the registration
178:47 - form
178:48 - I'll just quickly fill in some details
178:51 - you can see the labels and the entry
178:53 - fields for the first name I can fill in
178:57 - person one
179:01 - for last name I can fill in
179:04 - last name
179:09 - date of birth can be 12.
179:12 - slash zero four slash two zero zero one
179:17 - I can select some country see there's a
179:20 - drop list
179:21 - and let me select Canada
179:25 - programming language Let It Be python
179:28 - gender I'll click on mail
179:31 - and I'll submit
179:34 - so I have this
179:36 - pop-up box message box congratulations
179:39 - user has successfully signed up when I
179:42 - click on submit I have this printed on
179:46 - the console
179:47 - so this was it about the program thank
179:50 - you
180:00 - hey everyone in the last video we made a
180:03 - form a registration form that was very
180:05 - basic and the information attained from
180:08 - it was just printed on the console now
180:10 - in this video we will get that entered
180:12 - data in a table in a database we will
180:16 - save the information on the table so for
180:18 - that we have the SQL Lite model to carry
180:21 - out data related function
180:24 - now the entire program would be same
180:26 - except the print entry function let me
180:29 - copy the program I'll go to
180:31 - registrationform.pui
180:33 - control a control C
180:35 - and I'll space that over here
180:38 - Ctrl V
180:40 - INE
180:42 - now I'll import SQL lite3
180:45 - and if you don't have the module you can
180:47 - always download it using the command pip
180:50 - install SQL lite3
180:53 - so I'll write import
180:56 - SQL
180:58 - 8 3
181:00 - 5.
181:02 - and I'll just delete this function def
181:06 - print entry and in place I'll write def
181:08 - database
181:10 - I will get the variables so I'll write
181:12 - first just like print entry
181:15 - I'll write first equals FN dot get
181:24 - second
181:26 - equals
181:28 - Ln
181:29 - dot get last name the first name is done
181:32 - then dob1
181:35 - equals dob the date of birth dot get
181:39 - then variable one var1 equals War dot
181:43 - get
181:44 - this was for the country
181:46 - then
181:48 - variable three
181:50 - bar three equals War underscore C1
181:56 - or 3 equals
182:00 - bar underscore C2
182:03 - bar 3 equals to our underscore C3
182:09 - fine then the radio button
182:12 - were 4 for the gender equals radio
182:17 - underscore or
182:19 - dot get
182:21 - now till here the program was same as
182:25 - the print entry function
182:27 - it changes when I start connecting this
182:30 - data
182:32 - with the table or the database now how
182:35 - do we do that I'll write I'll have a
182:37 - variable
182:39 - c-o-n-n that is for connection equals
182:43 - SQL lite3 dot connect
182:47 - and in Brackets I'll given the name of
182:50 - the database okay so I'll write form dot
182:53 - DB
182:54 - this is to establish a connection to
182:57 - sqlite you need to pass the database
182:59 - name you want to connect okay that was
183:02 - form dot DB
183:04 - if the specified database is not present
183:07 - on the disk then a new one would be
183:09 - created by sqlite otherwise it will
183:11 - connect to the one that is already
183:14 - present
183:15 - now if there is a connection established
183:18 - that was done by dot connect I'll write
183:21 - with con c o n n
183:25 - cursor equals con dot cursor now this is
183:29 - another function by sqlite to create a
183:33 - cursor object to execute sqlite commands
183:35 - queries from python okay
183:38 - Now to create a database to add values
183:40 - to it SQL commands need to be executed
183:43 - and since we are doing that in a python
183:45 - file I need the cursor object okay now
183:48 - I'll write cursor.execute
183:53 - and in inverted commas I'll given the
183:56 - SQL command Okay so execute is used to
184:00 - run the SQL query and return the results
184:02 - okay
184:06 - so
184:08 - create table
184:11 - if not exists
184:15 - student
184:17 - which is the name of the database or the
184:19 - table
184:20 - SQL commands are not case sensitive but
184:24 - they are preferred to be written in
184:25 - uppercase
184:27 - then brackets
184:29 - are given the field names F name
184:33 - and what type of Entry would be made it
184:36 - would be text
184:38 - and then L name
184:42 - and also text
184:45 - DOB
184:46 - it is a date so I'll write date
184:49 - and Country
184:53 - text again
184:55 - programming language I'll write proc
184:57 - language
184:59 - it is also text
185:02 - and gender
185:04 - which is also text
185:06 - enclosed brackets and the inverted
185:09 - commas
185:10 - again I'll have another statement SQL
185:13 - statement I'll write cursor.execute
185:18 - in inverted commas
185:24 - insert into
185:28 - student
185:34 - F name
185:36 - L name dop country
185:40 - Pro language
185:44 - gender
185:46 - and what values would be inserted
185:49 - values
185:51 - brackets I'll given six question marks
185:55 - for six fields
186:00 - inverted commas close
186:05 - and
186:07 - comma the value of these question marks
186:10 - can be first
186:12 - these variables
186:14 - where we get the value of the string
186:17 - words first second
186:20 - dob1 War 1 War 3
186:24 - and War 4.
186:26 - fine
186:27 - these were just the two SQL statements
186:30 - that I needed and then I'll commit I'll
186:33 - write Conn
186:34 - dot commit
186:38 - and packets to make changes to the table
186:40 - to confirm the change is committed okay
186:43 - and also I need a pop-up box after I
186:46 - have submitted the form so I'll write
186:48 - tincter
186:50 - Dot message
186:52 - box
186:54 - dot show info
186:57 - we can print in the same message
186:59 - congratulations
187:04 - and for the information the user has
187:08 - successfully
187:11 - signed up
187:15 - close and what it comes closed
187:18 - and the rest would be pretty similar
187:22 - we have all the entries we have the
187:24 - labels we have the entries
187:27 - we have the drop list for the country
187:29 - then we have the check buttons
187:31 - the radio buttons
187:33 - but here for the command of the submit
187:36 - button I'll change this to database
187:39 - instead of print entry
187:43 - and the rest can remain the same
187:46 - now let's run this let's fill in the
187:49 - form
187:50 - and then we'll check the database
187:53 - so I have my form now I'll fill in this
187:56 - registration form twice just to have
187:59 - some data when I'm checking the database
188:01 - the table
188:02 - so for first name I can write
188:05 - ABC
188:08 - and for last name I can write x y z
188:13 - then for the date of course 12 0 3 slash
188:17 - two zero zero three
188:19 - I'll selection country India
188:21 - programming language Let It Be Python
188:24 - and gender mail and I'll submit I have
188:28 - to pop a box and I'll click on OK
188:31 - and I'll quit again I'll run this
188:40 - we can given the first name mnop
188:44 - last name
188:47 - qrst
188:50 - UB can be
188:53 - 10 slash 10 slash 1980
188:59 - and I'll select the country
189:01 - Canada again maybe and programming log
189:05 - which can be Java female and I'll submit
189:09 - I have the pop-up box
189:11 - and I'll quit
189:13 - now it's time to check the database
189:16 - for that you need to download something
189:18 - and that's database for sqlite
189:21 - you can just search the same statement
189:24 - database for sqlite and you'll find this
189:27 - first link
189:28 - and when you click on it you will see
189:30 - downloads and you can download the
189:33 - required version
189:35 - so I install the standard installer for
189:38 - 64-bit windows
189:40 - now once you've installed it installing
189:42 - this is very easy you can go with the
189:44 - default settings and you just need to
189:47 - check the tincter folder in which you
189:49 - are saving all the programs and there
189:52 - you'll find this form.tb and you can
189:54 - open it with database for SQL
189:58 - and you can actually see the table
190:01 - you will find this interface
190:05 - so you can see we have our table student
190:09 - it has the specified field names when I
190:12 - click on browse data you can actually
190:14 - see the table that we have filled in
190:18 - so this was all about the program we
190:20 - learned how to use sqlite3 along with
190:23 - printer
190:24 - and SQL in Python
190:28 - I hope you understood what we did thank
190:30 - you

Cleaned transcript:

hey everyone today we'll be talking about one of the graphic user interfaces provided by python thinker it is a standard python interface to the tkh GUI toolkit shipped with python now what is TK TK is a free and open source widget toolkit it provides a library of widgets for building a graphical user interface in many programming languages but now since we are working with python we have to enter module DK has a crossplatform operating system and it is written in C now to install tincter you can run pip install tincter you will write pip install tincter in the terminal and you'll be good to go please note that if you're working with python 2 it is Center the DS capital and if you're working with Python 3 it is technicality is in lowercase the spelling is the same it's just the difference of the cases Now to create anything to your app you would basically be following these four steps you'll be importing the tincter module you'll create the main window now windows are the containers in which all other GUI elements live now what are these other GUI elements these are widgets widgets can be text boxes labels buttons Etc we'll be making each one of them in the upcoming videos widgets are contained inside of Windows okay and that's what the third step is you'll be adding these widgets to the main window you can add any number of widgets to the main window then you'll call in the main Loop method it is used when your application is ready to run it is an infinite Loop main Loop is an infinite Loop used to run the application wait for an event to occur and process the event as long as the window is not closed okay we also have geometry managers namely the pack grid and place pack is very much used but we would not talk about them right now we would talk about them later right now we would try to get the tincter window the master window that we just talked about above I write the least code to make the window appear let's do that I'll import enter I'll write import I'll have my window the window I was talking about in the second step and I'll write when equals tincter dot TK fine now TK can have a lot of arguments so the screen name sets the display event base name sets the profile file by default it is derived from the program name okay now class name it is the name of the widget that is currently used widget class it is TK here okay then we have use TK if it is true it initializes CK subsystem we have sync it is used for debugging basically it executes all X server commands synchronously then we have use which specifies ID of the window for the application now these all arguments might not make sense to you right now but once we start making big applications with tincter you'll get the use of them now I'll write win dot main Loop and I have called in the main loop I told you I won't be making any visit right now I have skipped the third step and called in the main Loop okay now let's run this and see if we can get the window so I can see the window that I declared you can even resize it this logo is of TK software if you search on the internet about TK you'll see this logo you can also add in a title to this let's do that I'll write win.title I'll give the title my first interim window now you can see the title appearing it's my first enter window it was TK here earlier now after this we start making printer applications but in the next video we would talk about something per modules Tinker is very easy to work with and with a very less amount of code you can achieve a lot so the upcoming videos would be very helpful for you thank you hey everyone Teamster offers great modules and that's what we're gonna talk about today while using a class and thinker the module first assembles a TCL or TK command string now the tincter package is the standard python interface to the TCL or TK GUI toolkit TCL or TK is not a single library but a collection of various modules if you're not familiar with the TCL or TK I will just write down the architecture briefly for you so TCL is a Dynamic interpreted Dynamic interpreted programming language just like python it is another programming language which is written in C it is most commonly embedded into C applications we talked about this last time that TCL is mostly written in C then comes TK TK is a TCL package implemented in C so what does TK TK is a TCL package it is used to add custom commands to create and manipulate UI visits okay then we have theme TK or we can call it ttk it is a newer family of TK widgets it provides a much better appearance so this was all about the architecture now about the modules available in Tinker we will talk about some useful modules and to get a better idea of how they work we will see some examples too now ttk is very important as a module so it provides you upgraded widgets so the widgets here are upgraded and the main dictator module okay we can also talk about the color Chooser module which lets you choose a color indicator to just show you how it works I'll write a piece of code now I'll import into I'll write from thinker import ttk and I'll import things third art color Chooser that's the module I was talking about then I'll declare the window container I'll write when equals sphincter.tk we did this in the last program I'll also given a title that the title fitting through color chooser then I'll Define the change color function I'll write F change color don't worry if you don't understand what is happening in this program it's completely fine because we have not discussed any of it I'm just writing this as an example to just show you what the colors user module can do then I'll Define this function I'll write Colors equals tincter.color chooser.ascolor I'll use the ask color function and then I'll configure I'll write win.configure PG equals color one now to column this function I'll make a button I'll write ttk dot button so I've used the ttk module button and not the regular one and I'll call in the window I'll write the text pick color and the command would be change color I'll call in this function and then I'll pack this then I'll call in the main Loop cool so what I have done is I've made a button which when clicked will call in this change color function and you'll be asked to pick a color and it will change the background color to that color cool so let's run this and see if we can change the background colors so I have the screen let me resize it and I'll pick a color click on this button so I have this new window or a popup box you can say I'll pick any color and select okay and I have it as the background color you can even change this color let me pick another color and click OK and I have different shade cool so that's what tincter color Chooser module can do now if we talk about the other modules that we have we can talk about common dialogue module so basically we have many modules to create dialogues in data this module is the base class for getting dialogues we can also have file dialog it is used to get dialogues to save or open the specified file we have SIMPLE dialogues for the dialogues we can also have font module so it is used for writing fonts I'll just show you an example how we do that so I'll just comment this piece of code and okay I'll declare a variable Let It Be Georgia equals TK font dot font and family equals Georgia size 30 weight bold that's how you declare a font and you can declare a lot of things I have declared the family size and weight you can even declare if it needs to be slant if it needs to be italic or Roman or if it needs to be underlined or if it needs to be over struck you can even do that then we can have other modules like the message boxes so I'll just write down something for that too I'll import enter and from Tinker I'll import message box okay I'll just Define another function so I'll write Def dialogue message box dot show error answer sorry no answer available okay and then I'll again declare a button ttk dot button text equals answer and I'll call in the main Loop sorry so let's see what we get so I have my screen and let me resize it again and I'll click on this answer button so I get a popup it says sorry no answer available and I'll click on OK and I'll exit the screen so that's what we have when we use the message box module we can talk about many more modules in Linker we have scrolled text module so we can get a text widget with a vertical scroll bar it's all built in we have idle lib module constants module DND module text module we also have total module it's a very powerful GUI with great applications and I'd really like you to check out the total module because it's really amazing and you can do a lot with total 2. that's pretty much it about the modules indenter thank you hey everyone in this tutorial we will be talking about the button widget so I will just explain as I write the code for creating one such button I will just follow the four steps we discussed in the introduction video so I'll import into I'll write import think there then I'll declare the window that was the Second Step I'll write when equals tincter dot TK and then I'll given the title I'll write when dot title and let the title be button okay now I'll declare my widget that was the third step adding any number of widgets to the main screen so I'll write button that's my variable equals sphincter dot button and I'll given these brackets and you can see that there are these numerous parameters that I can specify to size my button or to decorate it so first I'll given this master which is about the parent window so I'll write when then I'll mention the text so it's the text that I want on my button so I'll write quit because the command that I'd be specifying so command tells you what the button would be doing so that would be win dot destroy so destroy is an Universal widget you can not only use it with the window container but also to destroy other widgets like the button itself okay and uh I can even specify the height and width of the button so I'll write width equals let it be seven and height let it be four okay then I can have the active background parameter so I'll write active background let it be pink so active background is basically the color of the button when you have clicked on it and active foreground let it be purple so that's the color of the text when you have clicked on the button then you can also specify the background color and foreground color let us specify that so I'll write PG equals sky blue you can also take in the RGB colors but I'll take the normal ones for it now then you have for round let it be white and then you can even specify the font Let It Be Church yeah you can given any font area or calipery then I'll have relief let it be equal to Rich so relief is the type of powder you want it can be flat Groove raised Rich solid or sunken okay that's all that I'd be specifying all the parameters that we tell uh giving in for my button but there are more in place of text you can even given an image that would be working as a button okay or you even have this justify parameter so how you want to show the multiple lines if you have a text then how you want to show those multiple lines a lot long left side or right side or you want it to be in Center so it's basically the alignment of the text but for that you would need to specify that slash n in the text otherwise it won't be treated as multiple lines you can even have bad eggs or bad y so bad X is for additional padding along the yaxis left or right of the text and Pad Y is for the additional padding above or below the text then you can even have the state parameter to disable the button then you have underline so the corresponding number text would be underlined then you can have wrap length if it is positive then the text lines will be wrapped to fit within this length and then I'll get to the pack I'll pack this widget I'll write button dot pack so this is a geometry manager that organizes the widgets in blocks we'll talk about this very descriptively in some upcoming videos but for right now just know that it's for organizing this widget there are options to this you can give in an argument we have expand fill unsite expand lets the widget take up any space on the master window fill is for taking up extra space so you can specify along y or xaxis or both then you have side it is for top left bottom right alignment where you want your button and then I'll call in the main Loop cool I'll write pin dot mean let's run this and let's check if our button has the parameters that we specified so I have my screen and I can see this sky blue and white combination that we specified for background and foreground and when I click on it I can see this pink and purple actor for ground and background you can even see this Ridge border and you can notice the Border width the width and height of the button okay you can even see the text and when I click on the button the window goes away as in the window is destroyed okay okay so everything worked as we wanted it to we could see the parameters working button parameters working and the widget working quite fine you can even get an image in place of this text so please try doing that it's very easy so that's it for this program thank you hey everyone today we're gonna talk about grouping and organizing widgets in the master window and we're gonna make use of frame class and pack geometry manager a frame in itself will work like a container a frame is a rectangular region that would be used to arrange positions of other widgets so basically it is used to organize a group of widgets so let me start writing the program for it so I'll import or I'll write from tincter import start okay so I do not need to import every single module separately in printer I'll just write the class name I do not need to mention tick toadoc button or something like that then I'll take the screen I'll write win equals TK in Brackets here I didn't need to writing dot TK because I've already imported it then I have given the title I'll write win dot title let the title be friends so the third step was adding widgets now I will be adding widgets so frames are also widgets that helps in organizing other widgets I will take the button widget only since we talked about that in the last video so to organize my buttons I would use the frame class now I'll write frame equals frame and in Brackets when because I want the string on the window right so you can see that we can give in a lot of arguments for frame so you can given PG this was for the normal background color of the frame then you can given BD that is the border size and you can give in the cursor so the mouse cursor will change to this pattern specified pattern when you hover over the frame and then you can mention the size you can tell the height and width then you have relief here which was also there in buttons so it's the same here you can specify the kind of Border you want for the frame here I won't be specifying anything because I would be getting some widgets over it so it's no use it will be displayed so with the frame class I have made a rectangular area and then I'll pack up to the left side of the screen so I'll write frame dot pack side equals left we discussed this in the last video while we were discussing back a little bit we talked about side fill and expand I hope you remember so I'll be writing side equals left in the argument we're back okay I will take up another frame so that you can understand what frames actually do the grouping would be clear so I'll write Frame 2 equals frame when because I want this frame on the window and then I'll back this to the right side okay it's all right side equals right then I'll get my buttons I'll write B1 equals button now last time when we declared the buttons you might remember that we used window as the master argument but right now since I won my button on this Frame I'll write the frame variable okay so I'll write frame comma text equals button one let the background be pink and foreground be white and then I'll pack this button I'll write B1 dot pack similarly I'll declare button two I write P2 equals button frame comma text equals button two and background color sky blue and foreground White and then I'll pack it write P2 dot back then I'll have two more buttons B3 and B4 I'll get them on the second frame that I declared you might notice that I have not given any commands for the buttons so let's start focus on that because right now our main focus is understanding frames so let me get my button three and button four I'll write B3 equals button frame two text equals button three background purple and foreground White okay then I'll pack it let me get the button four button frame two text equals button for background let it be light green and four round repeat White then I'll pack it I'll write P4 dot back then I'll call the main Loop this main Loop would be called for the master window only the parent window so I'll write when dot main group so let's run this and see if we get the buttons on the left and right sides according to the frames so I can see the buttons the four buttons that I declared and they are on sides button one and two is on the left side and button three and four are on the right side because I have packed the frame one on the left side and Frame 2 was packed on the right side as we have not given any command to the buttons nothing is happening when we are clicking them you can think about how differently you can park these buttons just like we have packed the frames you can use the site or expand or fill arguments and that's what we'd be talking about in the next video we'll be discussing geometry managers thank you hey everyone so I've always told you that we are going to talk about geometry managers whenever we use spark so that's what we're gonna do today in this video we will talk about pack grid and place since you have already used pack in some of the last videos let's start with the pack widget so from the enter I'll import star then I'll get my window I'll write well equals TK I'll also given a title so I'll write when dot title and let the title be geometry managers okay then I'll get the widgets so for the widgets I'll get some frames and I'll pack those frames so I'll have my frame one equals frame for the master I'll give window when then let the width be 200 and height be 100 and let's have the background color to be orange now I'll park this Frame I'll write frame one dot Park so I'll fill this for both the axles I'll write fill equals both and side equals left expand equals true so this fill and expand is for making the frame responsive as you increase the screen size the frame will expand in both the directions and the side is to place it on left cool so let's have another frame right frame two equals frame when let the width be hundred background color let it be purple and I'll pack this and I'll given the same arguments as above I'll write well equals both side equals left expand true okay then I'll call in the main Loop all right when dot main Loop so let's run this and see how the pack Works see how the Frame Works okay so I have this screen and as I expand it on either side if I expand it along x axis I can see the frames increasing so you can see the two colors purple and orange so that's the rectangular area a frame makes and the parking starts from the left side because we have specified site to be left okay and you can see as I expand the screen the frame size also increases cool so if I want to talk about the place geometry manager it is used to control the precise location of a widget the location it should take up on the window or the frame okay so we can given the coordinates it takes up two arguments X and Y so that's the top left corner coordinate of that widget okay so let me write something for it so that you can understand it better I already have Tinker imported and my window I also have a title for my window I'll just get another frame to get my button on it or rather I'll get two buttons so let me have the frame I'll write frame equals frame when and let the width be 150 and height p150 frame dot pack okay and I'll add my button one so button one equals button and I'll get this button on the frame so I'll give in the master to be frame let the text be button at 10 comma 20 and let the background color be pink then I will place the button not use pack but I'll place it and I'll given the coordinates x equals 10 y equals 20. so I'll get this button at 10 comma 20 coordinate the top left corner coordinate of this button would be our 10 comma 20. then I'll get another button button to equals button strain let the text be button at 40 comma 50. and the background color Let It Be yellow then I'll place this button again at 40 comma 50. so x equals 40 y equals 50. and then I'll call in the main Loop we'll check this if this works fine and we get the buttons at the defined coordinates now when I run this I have these two buttons at the coordinates so this top left corner is at coordinate 10 comma 20 and this yellow one press out 40 comma 50. so that's the coordinates and the buttons are at the specified coordinates so the screen should be seen as a coordinate plane and the buttons are at the specified coordinates go so that's how place works now let's talk about grid grid has all the parameters of pack plus it is efficient done place as place needs specific coordinates crutches splits or mixed parts of the screen according to the Matrix given you'll understand this better if I give you an example so I already have things are imported and I'll just comment this part first of all if you're talking about grid you need to make that grid so we'll make it just like we make a matrix I'll have two for loops and I'm gonna make a grid of three by three so I'll write for I in range three for J in range three frame equals frame Master is Finn and let me give in a border type so relief equals sunken that's about my frame so for each block for each Matrix element I'll get a frame okay now I'll use grid for the frame I'll write frame dot grid so you can see what all arguments we can give for grid we can give the row which is I then column which is equal to J we'll given some extra padding along X and Y axis both so let it be 5 that'll look good then I'll get some buttons on these frames so I'll write button equals button and since I won this button on the frame so I'll given Master equals frame for text I'll given the Matrix elements index so I am Jay I hope you know this format this is General python then we'll get to packing this button I'll just use pack for this not Grid or place I'll simply black back this button so I'll write button dot pack I'll give some padding pad x equals five y equals 5. so that there is space between each element of the Matrix and also there is space between the text and the button and then I'll call in the main Loop I'll write when dot main Loop as you had expand and fill in pack you have column configure and row configuring grid I want the buttons to increase in size just as the screen size increases so I'll write when dot column configure so you can see what all arguments it requires so first is the index so of course index is the row all column number then you have Min size which will given the minimum size of the row height and column width in pixels okay and then you have weight okay so weight is the rate with which the size of the button or size of the specified widget would increase with what rate so I'll give it to be one I want all the grid elements to increase with the same rate as I increase the screen size okay and I'll give in the bin size for column configure to be 75 then I'll also have row configure so I've given the index I and weight equals 1. and the minimum size Let It Be 50. so we're good to go let's run this and let's see how grid works so you can see that the screen size is not little it's there's a proper grid because we have already specified the minimum size using column configure and row configure there is a specific size of the screen because there is a minimum size of the buttons and when I resize the screen they grow in size automatically the button Size Doesn't grow but they are rearranged on the entire screen properly so that's it for grid that's it for the geometry managers I hope you understood everything the place pack and grid widgets they are going to be of great help in the upcoming videos so you really need to get a grasp of what was going on throughout this video thank you hey everyone today we're gonna talk about canvas widget in painter it's going to be very easy and simple we will just see some functions provided by the class canvas is basically used to draw crafts and charts to get text or images on the window we will see drawings in simple figures on the canvas let's start with it so from winter import Star that's a very convenient way then I'll have my window I'll write when equals TK and I'll also given a title I'll write win dot title that the title be canvas okay then I'll add my widget so my widget would be canvas I'll write canvas equals canvas and where do I want my canvas I want it on my windows all right win for master so basically canvas is a rectangular area where you can draw okay so you have the height and width for canvas I'll given the width to be 500 and height to be 500 I'll also given a background color Let It Be PG equals sky blue you can also have a cursor for it so let the cursor type be dot box you can give an arrow circle clock cross exchange heart as a cursor type there are a lot of cursors in Victor so you can see how many arguments you can give in for canvas you can have Border Water width background highlight color insert border with Etc so I'll just given these parameters and then I'll pack this visit I'll write canvas dot back then I'll get on to creating the figures so first of all I'll write canvas dot create Arc I've given the X1 y1 and X2 Y2 coordinates so that's basically the starting landing position so I'll write 5 comma 10 and 100 comma 100. then I'll also create a line a simple line that is parallel to the xaxis I'll write canvas dot create line now given the starting and ending position 0 comma 80 and 500 comma 80. so you do not need to specify the X one by one pair and X2 Y2 pair separately think there knows how to fix the coordinates if they are given in the correct order similarly to draw an ellipse or an oval I'll write canvas Dot create oval and I've given the top left and bottom right coordinates of the rectangle in which the oval would be contained so I've given 200 comma 200 and 400 comma 400. sorry then I can also given a text so let me use this as the heading for the canvas I'll write canvas dot create text the starting position would be 250 comma 10 and the text Let It Be using you can also given bitmaps you can also draw bitmaps so I'll write canvas dot create bitmap and let it coordinate let the location for the bitmap be 210 comma 50. and bitmap equals Quest head so you have a lot of kind of bitmaps you can take error gray 75 R class info warning question I have taken Quest head then uh you can also try creating a polygon so I'll write canvas dot create polygon to create a polygon you would need the corner coordinates of the polygon so I'll make a list for that I'll write points equals I'll make a list so I'll try to make a hexagon so let the coordinates be hundred come a hundred 120 comma 100 140 comma 120 120 comma 140 100 comma 140 80 comma 120. so there are six pairs and 12 points okay so for the argument of create polygon I'll write points and I'll fill with color pink so that's all I'd be drawing for right now I'll call in the main Loop I'll write when dot main Loop so let's run this and check our canvas so as I run this you can see that the screen is off a specified size that is 500 comma 500 the canvas size and if you expand it you can see that the canvas is not extended okay let's do a specified size you can see the arc you can see the bitmap you can see the line you can see the hexagon you can see the oval so the oval turned out to be a circle because the coordinates that we gave and were 200 comma 200 and 400 comma 400 they are the coordinates of a square not a problem and uh you can also notice the kind of Arrow we have within the canvas outside the canvas it's just the normal Arrow but inside it it's a DOT box cool so that's it about drawing on a canvas you can make a real canvas like a paint app using canvas pattern but it requires events so since we are not still done with events in Winter we would do that later you can check out how to get images on a canvas try to do that and also try to make some complex shapes on the canvas I hope you will be able to do that thank you hey everyone today we will be talking about radio buttons and check buttons there are another type of widgets they can be used while making a form so this is a very simple program to make it a bit interesting what I would do is I would given commands to these buttons whenever the buttons would be filled in the specified function would be called and the function that I would Define would declare another tincter window and show some message for that I will use canvas widget we have already discussed it in the last video so let's start writing the code for it from Tinker I'll import star and I'll have my window master window I'll write when TK brackets I will also give in a title I'll write win DOT type 2. let the title be radio buttons cool then I will have an INT variable so I'll write V equals into r so this interval would be used to control the variable value for the radio button or check buttons it would be used to set its current value option now this entire function can hold integer data where we can set integer data and we can even retrieve it using the getter and Setter methods for right now just remember that V into one is used to set the value of radio button or check button okay now I will have my radio button I'll write radio button and I want my radio button on the window so I'll write win and the text that I want is radio button one and variable I will give in to VV and let the active background be pink and active foreground be purple and the command I told you I'll be giving in a command so the command name would be free okay so I'll Define the spray what pre would do is it would show up another window with the text value accepted now how I would do this I would use canvas and create text function by canvas so I'll write wind equals TK here I have another window for tinker I'll write C equals canvas where I want the canvas I want it on the window so I've given wind and background color let's be light cream then I'll pack this canvas I'll write C dot pack then I will create text I'll write C dot create text let the coordinates be hundred comma 10 let the text be value accepted I'll fill in with purple then the font that B16 cool then I'll run the main Loop I'll write wind dot main Loop okay now let's get back to the main code I have given three as command and now I will use grid for this because I want the radio buttons in a specific line or a row so I'll write dot grid row equals 0. I will have another radio button so I'll write V2 equals into power radio button then text equals radio button two variable letter pv2 active background let's keep it the same as above then command free and for grid now the row number would be one because I want it in the next line so I'll write dot grid row equals 1. similarly you can have the check buttons they are very similar it's just the difference of the symbol so I'll have variable one equals into r ack button window where I want it I want it on the window and text check button one variable is wire one and again I'll given grid I'll not pack this I'll use grid and row Let It Be three if you're given the same row number then the things would overlap and you would not be able to see the radio buttons so given a number greater than one or zero then I'll have another variable if you wanted to print wire like button when text equals check button two variable Y2 and grid row okay then I can run the main Loop twin dot main Loop so let's run this and let's see if everything works as we have defined it if we can call on to 3 as we given the value for radio buttons so I can see the radio buttons and check buttons on the window and when I click on the check buttons they get checked nothing else happens but when I click on the radio buttons I can see another window popping up with value accepted message and same as with the other radio button if I click on it I can see another window so we could actually given the command and execute it properly so giving in this command also helped you in practicing canvas once that's it about radio buttons and check buttons you can check out once what all arguments we could give to radio buttons or check buttons thank you hey everyone so to display text on the tincter window we just have learned about the create text function in canvas but we also have label and message to print a message on the screen to get text on screen so we haven't discussed that yet that's what we are going to talk about today we will learn about the label and message widgets there is just a little difference between label and message let's write some code to check that out so from thinker import Star and I'll have my window right when take care packets I'll give in a title I'll write when dot title display text let the title be display text now I'm gonna add my visit that is message and I will given a variable I'll write my message equals message and where do I want that I want it on the main screen so I'll write when comma what is the text that we want to display so the text equals foreign we are learning tinker cool and then we'll give in a background color I'll write PG equals I think okay then I'll give an aspect so aspect is the ratio so basically it's aspect ratio it's the ratio of width and height in percent the default is 150 which means the width would be 50 percent greater than the height of the message box so you can think of on your own what aspect you would give in I will give in an aspect of 500 and then I will give an border with it will be 5 PD equals five I've also given a type of water relief equals rich I've given a padding fad x equals 10 just along the xaxis okay also the foreground let it be dark blue I can also given a font Let It Be ink free 14 and italic so that's the way you can given a font that's how you describe a font in tincter then you can just look up what all arguments you can given for message so we have already described master we have not talked about anchors so anchor is used to decide where the text should be placed in the message widget it can be North North East the top right corner east south east south Southwest or Center the default is Center do not get confused between justify and anchor anchor is for position whereas justify is like alignment okay then we have aspect we just discussed it we have decided the background and water and the font for round color too we know about justify we can given a padding pad by and Pat X we know about relief we know about text and you can also given the width but I have not given it that's fine I have already given in the aspect then I'll get to the label I'll write label equals label so for the master it would be win again and then text Let It Be label which it does not allow multiple lines okay so this is a fact label widget would not let you get a long text in several lines there is no line wrapup option so it will just cut off the text that does not fit into the specified height and width so if you have mentioned a smaller size the text will just disappear and not all the text would appear on the screen so this is one difference between message and label widget there are many but this is a major one then I will given the Border size Let It Be 8 let the background be sky blue and I'll have a cursor for this at the cursor the cross foreground Let It Be yellow and I'll also given a font here right Georgia 18 italic relief raised height let it be two and I'll not given the width let the label widget decided on its own according to the text now I'll pack this but first I'll pack the label then I'll pack the message okay now let's see if the packing order affects the order of display or is it the order of defining the widgets that decide in which order the widgets would be displayed so I'll write down label dot pack I'll simply use spark and then I'll also pack the message widget dot back now I will call the main Loop win dot main Loop fine let's check out how the label and message widgets work hey everyone today we're gonna talk about the menu widget in painter it is basically to create a menu bar or a list like menu there is nothing complex about it just try to understand how things are working as we write the code so from Tinker import Star and I'll get the window I'll write one equals TK are also given the title I'll write win dot title let the title be menu then I'll add the widget so this widget would be declared with a variable menu which will be the main menu and that would contain the sub menus to be displayed so I'll write menu equals menu and where do I want this menu on the window on the master window so I'll write when so I'll have this main menu where all the other features or objects will be contained like this is the main list that will contain elements with sub lists now I would need to add this to the master window so I'll write dot config menu equals menu this config function can be used to overload if you have an object in thinker that is already configured and you want to edit some of those configurations we use config now we'll create the elements of the main list so I'm gonna create a list with picking tools the size of the tools and then its color so let's do it so first would be tool equals menu and within brackets you can see what all configurations you can given to this menu widget so for master I'll give menu I'll have given a background color Let It Be Gray let the foreground be black I'll also given active background Let It Be Skype okay then I need to add this tool object to the main menu list okay so I'll write menu the variable menu dot add Cascade that is how you add any object to the main list main menu and label equals tool and menu equals tool okay now I'll be adding some options to the tool object so a right tool dot add command you can also add in check buttons and radio buttons but we'll just stick to command for right now and label equals pen then I'll add some more options I'll write tool dot add command label equals brush then tool dot art command label equals pencil then tool dot add command label equals eraser and command equals so I'll given a command to this whenever you click on this option this given command should take place so command would be win dot quit then I'll have another menu object the size so I'll write size equals menu and it's the part of the main menu so I'll write menu in Brackets then I'll add this size objective menu so write menu dot add Cascade label equals size and menu would be I will not decorate this I'll just keep it to default to check out what the default is then I'll add the options to the size object so I'll write size dot add command and label lp1px and similarly I'll do for three four and six PX so I'll just copy this down I'll write 3px 4px and 6px cool I'll have another element for the main menu I'll write Colors equals menu and I'll give it an octave background for this let it be light green and the background let it be light yellow okay I'll add this colors to main menu I'll write menu dot add Cascade label equals colors menu equals colors and I'll add the options to Colors the right colors dot add command label equals red colors.ad command label equals yellow and colors dot add command label equals and I'll call in the mail Loop right pin dot mean now you can see that even for these options you can given configurations you can have a background color a foreground color a different active background Etc please check them out too they'll help you practice now let's check out how the menu Works how the menu widget Works how it looks like so I have my screen and you can see tools size and colors on the menu bar they are the part of the main menu and when I click on each one of them they display a new menu okay so that's the sub list so I hope you get an idea of how the list was how the menu was organized and you can even add further lists so please try doing that too that would be your practice and when you're quite comfortable with menu you might also look up for menu button try to pick out the differences and benefits of menu button what options menu doesn't provide when your widget doesn't provide but the menu button does so that's it about the menu widget thank you hey everyone today we're gonna talk about message box and thinker so without declaring a new screen you can have one but its functionalities are limited so let's check what I'm actually talking about basically I will declare buttons and the commands would contain functions that call the message boxes we can have many types of message box as per our requirement we can have the show info show warning show error ask question ask okay cancel ask yes no ask retry cancel these all are functions available in the message box module now we'll check them one by one let's get started so I'll write from Tinker import Star and also from Tinker import message box you need to import this message box module separately and then I'll get the window I'll write win equals TK brackets and I'll also given a title I'll write when dot title let the title be message box and then I'll also specify the size of the screen so I'll write win dot geometry 400 cross 400 in double quotes so that's how you can specify the size of the screen this is a new thing then we will Define the functions one by one they would be given as command for each button so first of all I'll use the show info function so I'll write Def show info kits and I'll write message box dot show info so the first string would be the heading of the message box so I'll write important because this is just an information and for the message I'll write this might take a minute okay then similarly I'll Define some more functions I'll write something for show error so I'll write Def error and message box dot show error the title would be error and the message would be the specified path does not exist because this is an error you can given any messages as per requirement then I'll have something for ask question I'll write def Q message box dot ask question and I'll write title h and the message would be are you 13 years old or above question mark so and ask question function you'll have two options to select from yes or no and accordingly you can select then I'll Define for ask OK or cancel I'll write def cancel you can name the function anything is just what function you call then I'll write message box start ask okay cancel and let the title be delete and message PR you sure you want to delete question mark then I'll have the function yes no it's all right deaf yes no rockets and I'll call the ask yes no function write message box dot ask yes no and let the title be confirmation and the message B are you sure you want to proceed so ask yes now also gives you two options to select from yes and no so you might think that ask yes no and ask question functions are same but they're not the ask question returns yes or no string but the ask yes no function returns a Boolean true for yes and false for no okay then you also have the ask retry Council so I'll Define a function for that too I'll write f retry now for this function you will have two options to select from retry and cancel now if you click on retry this ask retry cancel function returns true and if you click on cancel it returns false so just to give you an idea of what is happening I'll declare a variable for this function which will store this Boolean so I'll have R equals message box start ask retry cancel let the title be failure and the message let it be to you want to try again question mark and if R is true f r then I'll print retry I'll simply print redrive on the console and else I'll print cancel then I'll move on to the next function I'll have this show warning function so I'll write F1 and message box dot show warning let the title be warning in caps and let the message be this might lead to malfunction of the app okay now I have all the functions for all the buttons now I'll declare the buttons one by one and assign them these functions we have seven functions so we'll have seven buttons so let's start B1 equals button and where do I want my button I want it on the window so I'll write win text equals information because first I'll have the show info command so command equals show info background Let It Be sky blue foreground let it be white active background let it be light green then I'll place this button I'll write P1 dot place and x equals 100 y equals 100 so I'll simply given a coordinate and similarly I'll have all my buttons so I'll just copy this and edit the next ones so for B2 I want it on the screen so I'll write win as Master then text would be error command would also be error and the rest Let It Be same I'll change the coordinates to 100 comma 200. right 200. book then in B3 I'll have when text Let It Be retry command would be retry I have my retry function and then let the rest be same let the decoration be same for the button and I'll have the coordinates as 100 comma 300 so y would be 300. then again I'll have B4 I'll change the text to question command will be que and I'll change the coordinates to 200 comma 100 so X would be 200. y would be hundred then B5 Let It Be cancel command will be cancel and the rest would be same then the x coordinate Let It Be 200. why let it be 200. then I'll have B6 text Let It Be yes no yes or no and command Let It Be yes no coordinates will be 200 comma 300. then B7 let the text be warning command will be warned coordinates will be 300 and 100 okay and I'll call in the main Loop all right when dot main Loop I hope there is no confusion the text for buttons is what would be displayed on the buttons the command for the buttons are user defined functions which contain the message box widget functions okay so you should be very clear about all this now let's run this and see the buttons and check out the message boxes how they are popped up on the screen so I have my screen and I can see the buttons as defined and I'll click on each one of them I get a sound too so this important is the title as defined and this might take a minute so this I symbol is there and I have to click on OK because that's the only available option and I have question and there's a question mark symbol I have two options so there are differences in each function and for warning I have an exclamation mark symbol then for cancel I have a question mark again but the options are different I have okay cancel then for retry there is retry console and when I click on retry I can see retry printed on the terminal because that's how I defined it now that's pretty much it about the message box widget thank you hey everyone we have covered almost all the widgets in thinker we are left with a few so let's just take a look at them we will discuss the scale scroll bar list box and spin box they are very easy to understand and there is nothing complex about them so I'll just get all these widgets on the same screen and let's start writing the code all right from Center import Star you don't need to import any separate modules for these then I'll have my screen I'll write when equals TK and then I'll given a title I'll write when dot title and let title be scroll so I'll add my first widget I'll give the name scale half the variable scale equal scale that's my widget so it is like a slider that lets you pick a value and it has two methods get unset so let's just give the options for this where do I want the scale I want it on my window so I'll write when and you have this from N2 to specify the range of this slider so I'll write from equals 0. two hundred okay while given a background I'll give it to be light yellow then a foreground let it be black you can give an orientation for vertical and horizontal so I'll give an Orient equals horizontal then I'll given a label so let the label be scale widget there are many more options like the trough color the slider relief the kind of slider you want you can give it a command you can have a font description you can have resolution you have slider length you can specify the length of the slider then you can specify the state of it you can have the cursor then the Border Etc so you have given enough options and let's pack this widget I'll write scale dot pack cool now I'll go to the spin box I'll write spin box equals spin box and for the arguments I'll give Master equals win again we have from N2 so from 0 to 10 you can also given a negative number for from you can start from a negative number you can go to a negative from number but there should be a difference there should be a positive difference between them so you can given accordingly the range but we'll do it from zero and then I'll give in a background color I'll write PG equals light gray FC equals Orange and let me give an a font I will give the font to be Ariel 12 italic it's just a number you can even not given the font for a spin box too we have a lot of options some are same as the scale widget but there are some things that are different so you have button up relief and button down release then you have this increment parameter it can be a float then you have this x scroll command option so you can given a command that you want to take place when you scroll through the values that is when you increment or decrement the numbers in the spin box and I'm done with the widget so I'll pack this I'll write spinbox dot back then I'll go on to the scroll bar I'll write scroll bar equals scroll bar so for argument I have win as master so let's just keep the scroll bar simple it'll just take up a side and I'll pack the scroll bar I'll write scroll bar dot pack side equals right fill equals y so I'll pack this at the right side of the screen and I want to fill the yaxis completely with the scroll bar okay then I'll get my list so I'll have this variable list equals list box this is another widget and when as master now what I want to do is I want to scroll through the list as I move my scroll bar so I'll write y scroll command equals scroll bar dot set so I'll set the values according to this file scroll command okay now I'll also given a font I'll give it to be Georgia 20. it's for the list okay and I'll have the background color to be sky blue now there are many methods associated with the list box widget to insert the values in a list box we would use the insert method so what I'll do is I'll write for I in range 51 I'll just make a list with 51 lines I'll write list dot insert end so I need to give in the index and end word represent the point immediately after the last character entered by the user so and for the index and for the element I'll write string I Plus thought we are checking the list and scroll bar together okay now outside the for Loop I'll pack this widget I'll write list dot pack side equals right fill equals y expand equals true okay so that'll give me a good format now I want to configure the scroll bar again because I want to add the list to it okay so I'll write scroll bar dot config we have already discussed the use of config config is basically for overloading and I'll write in the argument command equals list dot y View okay so this tells the scroll bar that whenever the scroll bar is scrolled through the list should also move along the wire view okay the yaxis now I can call the main Loop I'll write win Dot main Loop and let's just run this and check out all our widgets if they're working together and working properly as we have arranged them so I have my scale widget and you can see how this bar moves and gives us values then you have your spin box you can increase the value first and then decrease it but the values will only go from 0 to 10 we also have the scroll bar this thin line along the right of the screen and as you scroll As you move this scroll bar you can see the list moving up and down along this we have the list elements as we specified them and that's pretty much it for this video I hope you understood the widgets thank you hey everyone today we're gonna talk about the events and event handling in thinker we would focus on the buying function and talk a little elaborately about the main Loop so events handling is an important part of thinker module in this video we would try to understand the basic things associated with it and in the next video we would see a related example okay so we would try to make the program a little interactive by giving user inputs from the keyboard so that would be very much done by the event handlers okay so let's start writing the code for it I'll import or I'll write from thinker import Star then I'll get my window I'll write when equals TK then I'll given a title I'll write win Dot title let the title be event handling okay so I told you I'll be telling you a little more about the main Loop so whenever you create a tinker application we have always been calling the main Loop okay at the end so why do we call the main Loop what the main Loop actually does it checks whether an event has occurred or not it checks for an event occurrence of an event so if there is some event that has occurred then the written code the code that the user has given would be executed so as the main Loop has checked for an event occurrence the program written will be executed as a response okay so you need to write the code that would be executed in response to an event okay so you write these functions called event handlers for the events that you use in your application okay now I would be creating a very similar event handler for every time I press a key on the keyboard I should get that key printed on the console okay not the printer window but the console so what I'd write is I'll write def so I'll have a function for that I'll write def pressed key and in Brackets I'll write event I'll give event as an argument and I'll write print event dot car so that simply completes what I just said I want to print whatever I clicked okay so now we would move to the bind function to call an event handler whenever an event occurs on a widget or function or method we use the bind function okay the event handler is said to be bound to that event because it's called every time the event occurs okay and how do we do that we'll just write for our window when dot bind okay and the first parameter would be the sequence so it's just a string of the form event name okay I'll just write it down I'll write here the event name is key so in double quotes I'll write key and I should give this less than and greater than sign rounded okay that's how you write the event name and this event name can be any of tincter's events so there are many events in inter we have enter leave button one button two or key so here it is key and then we'll have the function name okay you can see for bind we have to give sequence and then the function okay so the event handler basically so I have pressed key right pressed key as the function okay so that completes my bind function and then I'll run the main Loop I'll write win dot main Loop now whenever the main Loop would run it will check for the event so I have declared my event here as pressed key function okay I have given it as the argument and whenever this event will occur what is my event the event is the user giving an input from the keyboard while by pressing a key okay so whenever this event occurs this function would be carried out okay this part of code would be executed as a response to the event occurrence okay so that's what should happen now let's check if that really happens whenever I click on the key I should see that key printed on the console okay let's do that so I have the sphincter blank screen okay and I'd not do anything with the screen but I just start typing something and that should be typed out on the console automatically without me taking the cursor over there okay so let's do that I'll just press D and there it is you can see it on the console then you can see t and then you can see Q and let me press a numeric let it be one I'll press shift one okay and then I can press M and I can given any character okay this is semicolon and an inverted comma so that's it about this program I just wanted to show you how interactive tinter can be and we'll see a related example in the next video thank you hey everyone we have already discussed the event handlers but we are left with the Tinker events let's discuss a few of them in brief so first up we have the button event when a mouse button is pressed with the mouse pointer over the widget we make use of this event then we have three parts of Wows the middle the right and left so accordingly we have button one button two and button three okay then we have motion we would be working with this motion event as an example we would see an example related to this event so we have B1 motion B2 motion and B3 motion for the current position of X Y members and then we can have button release we can have double button we also have enter so enter is for telling that the mouse pointer has entered the widget we also have leave as a complementary to enter so this Leaf event would be used when the mouse pointer leaves the widget okay and then we have focus in on Focus out so focusing is to focus on a visit and focus out is to move to other widget move the focus to other widget okay then we have return we have key we have shift up and we have configure so these were the Tinker events while understanding these event handlers we use the event key and this time we would use the motion event so let's write a program for it so let me tell you what I'd be doing so I would write a program for getting the current position of mouse on a widget only on a widget okay so let's do that so I'll write from thinker import Star then I'll have my window I'll write one equals TK then I'll given a title I'll write win dot title brackets and let the title be event handling let the widget be canvas okay so I'll have C equals canvas and where do I want the canvas I want it on the window so I'll write win comma background color equals pink and width Let It Be 500 and height Let It Be 400. okay and uh now I'll use the bind function we discuss the bind function last time so bind is to call the specified function whenever the specified event takes place now I would specify two arguments one would be the event and one would be the function so I need to make that function 2 but before that I'll write C dot bind and now let's define the function I'll also name the function as motion so I'll write def motion and I'll given the argument event we did this last time too because I want to check the event if the event has occurred and the related things to the event okay so I just want to check the current position of the cursor on the widget so I want to print that so I'll write print brackets f current position of cursor is in curly braces event dot X comma event dot y and I'll put this in a bracket so that would get me the current position of the cursor and about this F format this is a very basic way of getting values or variables within a string in Python so I hope you know about that and then I'll just simply write return in the function okay so I can get back to the main part and I'll give in the arguments I'll write within single inverted commas I'll write motion and I'll also given the function to view motion okay that I just defined fine now I'll part this I'll write C dot pack and I'll run the main Loop look so let's run this and let's see if we get the Mouse coordinates so I have the spring screen and whenever I move the cursor over it I get the positions of the cursor constantly and whenever it stops the output has stopped but if I increase this screen and you can see that outside this widget there is no such output scene but on this widget I can get the current position of the cursor so that's it about the event handling so we have covered a lot of tincter and the more you practice the more you get the concept clearer so in the next video we would be seeing some application of tincter would help you implement all that you have learned thank you hey everyone till now we have learned a lot about inter widgets and their functionalities it's time we put them to use so today we would make a simple dice on the Tinker window using the random module and the button widget it would be a six sided die so on rolling a sixsided die you get a number and that's what would happen here we would get a number in between one to six randomly picked by the random module so basically whenever I click on the button I should see a number randomly displayed on the screen so let's get started I'll first import tincter or rather I'll write from printer import star and I'll write win equals CK and win dot title let the title be dice and I'll have to visit I'll add a widget so I'll write button equals button where do I want the button I want it on the window so I'll write when and given the width to be 20. and background to be light yellow then I can given the foreground to be blue and I'll leave the command for right now just write command equals and we'll talk about it later a little later then I'll give an a border of three and relief Let It Be sunken an active background let it be white and the text is played on the button that'll be roll in cups okay then I'll pack this I'll write button dot back now I would also need label widget in order to display the chosen number by the random module so I'll write label equals label so that's the widget and when width let it be 20 so that the button and label are in Sim alignment and background color Let It Be sky blue foreground that will be purple okay now I will Define a function that would assign the value of text parameter of the labels widget so I'll write Def IC number so in this function a random number would be picked in between 1 to 6 and also that number would be assigned to the text parameter of the label so that would be displayed on the screen so how would I do that it's very simple so I have def pick num and I'll write label text so this is a dictionary label object and I'll assign the value Str ing random.randint one to six okay so a sixsided die has six numbers on it so I have used round in so that I can include both one and six so this piece of line picks a random number converts it into a string then assigns that to the text of label now I would have this function as the command for the button widget so this is a dictionary label object so I have simply accessed the text parameter of this label widget that I created just now okay and I have assigned it this value this randomly picked string okay cool then I need to pack the label too so I'll write label dot pack so I left the command of button widget empty now I'll just given the function pick num okay so whenever we click on the button we are calling the pick num function and it assigns the labels text a random number in between one to six okay so we're done with what was required and I can simply run the events Loop I'll write bin dot main Loop so let's run this and let's check if we get randomly picked numbers so I have my screen and when I click on roll button I can see new numbers appearing random number is appearing so that's the use of the random module and it's working quite fine so here we combine two widgets together to get an application you can do the same and the more you practice the more you'll get better at it the more easily you'll be able to handle the widgets indenter I hope you understood this example if it was simple thank you hey everyone today we would create a simple app that converts a temperature in fahrenheit to celsius if I talk about the main things required we would need the function that simply converts Fahrenheit to Celsius that formula then we would need the user to input the temperature for that we would use the entry visit we haven't talked about it yet but it's very simple to use and we would also have a button widget which gives the output on being clicked okay so it is a very simple app let's get to the code right away I'll import inter so I'll write from thinker import Star then I'll get my window I'll write win equals TK I'll have a title I'll write when dot title let the title be temporary sir converter okay then I'll start adding the widgets first I'll add the frame on which I want that text box so I am declaring a frame for it because I also need to put in the label widget I would need the symbol of degree Fahrenheit so I would add that label to the same frame okay so I'll write frame equals frame and where do I want it I want it on the window so when as master and I'll pack this I'll write frame dot grid and row equals 0 and column equals 0 and I'll given a padding I'll write par x equals 10. so there is no overlap on the screen boundaries okay cool then I'll get that entry visit that text box how do I do that I'll write temp one equals entry so that would allow the user to enter any text into that text box okay and for the arguments where do I want it I want this entry widget on the frame so I'll write frame and width let it be 10 cool then I'll use grid I'll write temp one dot grid row equals 0 and column equals zero same as the frame okay and I'll have an F variable for that label for that symbol of degree Fahrenheit because I need to tell that this entered number is in Fahrenheits and that number would be converted into degree celsius so I need to given the units so I'll write f equals label and I want it on the frame so I'll write frame comma text and this is something different you might know it you might not know it but I can easily get degree Fahrenheit symbol by this so I'll write in capitals degree Fahrenheit and there is a slash n before this and it's in inverted comma School now I'll pack this too or should I say use grid so I'll write F dot grid and row would be 0 and column would be one okay simple now we are done with the frame now I would need the button that would convert or that would call on to the function of conversion okay so first let me get the button I'll write button equals button and window I'll not get this on the frame I'll just get in on the window okay and text equals a right Black Arrow so how can I do that the similar way I got the degree Fahrenheit symbol you can get numerous symbols like this so here on the button I'll get a right words Black Arrow so I'll write an inverted comma slash n and right words Black Arrow fine for the command I'll Define the command in some time first let me make the function and I'll give in a background color Let It Be sky blue okay that's it so let me Define this function Fahrenheit to Celsius that would be my function so I'll write Def Fahrenheit to Celsius and brackets so I'll write f equals temp one dot get so whatever you entered here in the entry widget you'll get it over here okay that would be the value of this F variable okay so then I'll get the C that stands for Celsius right now I'll write 5 by 9 so this is the simplest formula for conversion of Fahrenheit to Celsius so I'll write f and minus 32 okay I'll also convert this to float because there is a five by nine Clause so I'll write float and now I will display the C variable as the text of another label widget so let's do that I will have temp two which would be the converted temperature the temperature entered in degree celsius okay so I'll write temp two this visit is not this variable is not still declared in the main function we will do that in some time so temp 2 in Brackets text equals f and inverted commas round C comma 2 to 2 places and accordingly press is closed I'll also need that symbol of degree Celsius here just like we got the degree Fahrenheit symbol there I would use that here too so I'll write slash n and degree Celsius in capital so now I'll get to the main function again I'll write up this command I'll write Fahrenheit to Celsius and I'll use grid for this button I'll write convert button dot grid row equals zero column equals one and pad y equals 10. fine and I need to define the stem 2 also okay so I'll write them two it's the label initially let us keep it as degree celsius symbol and then it would be reassigned every time we click on that button after we enter the value okay so we have temp to equals label and and when text Let It Be slash n degree Celsius fine and then I'll use grid to place it Right Temp two dot grid row equals 0. column equals to and Pad x equals 10. same so I'm done with the app I'll call in the main Loop I'll write win dot main Loop and run this so I have my screen again this temperature converted and let's try for 100 degrees Fahrenheit because we know it's 37.78 degrees Celsius so I'll just write 100 and nothing else and I'll simply click on this button so I have 37.78 degrees Celsius so this temperature converter is working fine let's enter some other value let's enter zero zero degree Fahrenheit is minus 17.78 degrees Celsius and this would even work for negative values of Fahrenheit so I'll write minus 11 degree Fahrenheit so it would be minus 23.89 degree celsius cool so that's it about this app hope you understood everything thank you hey everyone another application made using thinker can be a text editor we haven't yet explored the file dialog module by tick tock it needs to be imported separately the module provides classes and Factory functions for creating file or directory selection windows we have native loads static Factory functions convenience classes convenience classes help in creating files or directories from scripts while static Factory functions are user responsive so the text editor that we would make would have two static Factory functions open and safe so let's start making the application right away I'll import into I'll write from thinker import star and from tinker Dot file dialog import ask open file name ask save as file name we would use the ask open file name for opening a file for editing and the ask save as file name for saving the current file as a new file now I will get my window I'll write window equals TK and window.title so the title can be text editor fine now I'll get a text widget to insert multiple lines so that I can write on it a text editor needs inputs so this is how I'll give them the inputs and even for displaying some text I need a field so I'll use the text widget so I'll have this variable text equals text where do I want it I want it on my windows I'll write window for round I'll set some foreground I'll give it purple the foreground and background equals light yellow that would be a nice combination and font Let It Be calibri 14. fine then I'll park this I'll write txt text Dot back I will get a menu now to have to open and save as options just like in a text editor so I will name the menu file for that I should draw it menu equals menu and on the window so window now I'll configure it I'll write window.config menu equals menu and now file menu equals menu and in Brackets again menu now I'll add the options first to the main menu I'll write menu dot at Cascade label equals file and menu equals file menu then to the file manual I'll add open and save as so I'll write file menu dot add command label calls open comma command for now I'll leave it blank and file menu dot add command label will save us and command again let's leave it blank for right now and I'll call Window dot main Loop fine now I need these two functions open a file and save a new file so the first function to open a file let's define it I'll write Def open file brackets and I'll write file path equals ask open file name file types equals in a list in a tuple text files comma the extension for them star Dot txt and again comma under table all files comma the extensions this statement will open a dialog box so that the user can select the file to be opened since we are working with only text files I could have only given the Tuple text files but what we have written now lets you access all the kinds of files that can't be presented or read by the text editor now after the dialog box is opened it might happen that the user clicks on the cancel or closes the window so for that case I'll write if not file path if no file path is selected you return no further code is executed otherwise I'll delete whatever is there currently on the text editor I'll write txt dot delete I hope you remember txt was our text widget and I'll delete whatever is there on the text editor currently from index 1 so 1.0 till the end fine now I need my text file to be red the selected file to be read so for that I'll write with open file path as an argument mode should be only read so r and you can pass an encoding UTF 8 as input file text is equals to input file dot red now this string as read is inserted in the text editor so I'll use the insert function of the text widget so I'll write txt dot insert and text fine and finally I should change the title of the window to the file path okay so I'll write window dot title f Simple Text Editor and file path so this is a python format for getting the values I hope you know this and okay now very similarly I should Define the save file function too so I'll write Def save underscore file and brackets okay so this would be for saving the current file as a new file firstly I need to create the file path to get the location of the file to be saved so I'll write file path equals ask save as file name default extension dot txt so how the file should be saved with the extension ta dot txt unless specified and file types again similarly in a list then in a tuple text files and the extension star.txt again you can given the all files or not it's your wish then all files and star dot star okay now again if the screen is canceled you do not need to run any further code for that I'll write if not file path return otherwise a new file is created the text on the text editor is extracted for the same so how would I do it I'll write with open I'll given the file path I already have it mode now would be W so that it is writable encoding equals UTF hyphen 8. as output file okay Now text equals txt dot get from 1.0 till index end okay the output file gets the text so I'll write output underscore file dot right text and again the title needs to be changed to file path so I'll write window.title if Simple Text Editor and file path and curly braces and that's pretty much it for the two functions now I need to pass these two functions as the commands for the two menu options so I'll write for file menu one command equals open file where the label was open and for save as I'll write the command save underscore file we are good to go let's run this and see if the text editor works properly so I have the window and please note that the title is text editor it would change later I have a light yellow background I have this file menu and I can have open and save as as options so I'll just type in something I'll write this is a tincter application a simple text editor and I'll save it now I'll click on file I'll click on save as and I have this popup window and it is asking me the file name so I'll name it as thinker and I'll click on Save now I'll again go to file and click on open I will click on tinker and I'll click on open so here I have my text that I just saved the title has also changed to file path so this was a simple text editor thank you hey everyone in this video we would make a simple paint application using tincter we would use many new methods and a lot would be from the canvas class obviously as we are working with paint don't worry it would be very easy so to make this application we would use the colors user module and just to make things more organized I would make main class that would be later called onto the screen let's get started so from denter import Star and separately from thinker import color chooser and ttk ttk you'll get the use of it later now the window declare plus its title so we have win equals TK and for the title I'll write win dot title feet up then I'll call on to the main Loop so when dot main Loop so I have the basic structure now the class main where I would be defining the functionalities of the paint app so let's get started I'll get the class I'll write class Main and first the init function definit for argument itself and master so this master is the window that when that would be passed on later to the main class and then I'll write self dot master equals master for initializing the window now I need to initialize a lot of variables to start doodling on screen like the color of my pen it's with maybe the screen background the starting position of the pen Etc so let's initialize the variables one by one so first is self dot color underscore foreground equals black so the pen color becomes black initially you can change it later and then self dot color underscore background equals White then also the initial positions so I'll have self Dot old underscore X equals none and similarly self taught old underscore y equals none also the pen width self dot pen width equals five I will call the straw with its function that is yet to be defined which would describe the layout and Main functioning of my paint app so I'll just write self dot Draw widget and brackets you'll just understand why I call this here later on when I Define the draw widgets function now I'll write self.c dot bind now here I have started using event handlers the bind function called for the canvas c c would be declared in the draw with its function now the argument for this given tangler bind would be P1 motion which is the mouse being moved while the left Mouse button is held down and the function called the other argument of the bind function would be self dot paint this would be another function in the main class and it would be used to draw the lines on the canvas so I'll write self.c.bind P1 motion selftaught paint okay now similarly I'll have another event for the button release to specify the button release of Left Mouse button I'll use button release 1 event and for the function of this event I will call the self reset it is another function in the main class I have to declare it it will indicate the end of one curved drawn okay so I'll write down cell dot C Dot bind and button release one self dot preset now I'll Define the paint function so I'll write that paint self comma e so e would be the coordinates of the current Mouse position I would fetch that repeatedly in order to draw a curve and if self dot old underscore X and self thought underscore Y is true it's if it's available then I'll create line I'll use the canvas function create line and I'll write self Dot C dot create line and as argument I'll given the Four Points the four coordinates so self dot old X and cell dot old y and e dot X and E dot y the current events the current Mouse positions X and Y coordinates the width of my curve would be given by self dot bandwidth as I have defined it in the initial function and fill equals self dot color foreground and cap style would be round it's just the style of the curve the line and I can do smooth equals true so we have already used create line in the previous videos and so I hope you don't need any explanation for the arguments given and I'll replace the value of old X with e dot X and cell dot old underscore y equals e dot y this would let me draw a continuous line and then I'll have the reset function again itself and E the current position of the cursor and I'll have self taught old underscore x equals none and self thought old underscore y equals none because basically I have ended one curve so that's what reset means now I'll start defining some options available some functionalities available with the paint app now the first one in the functions would be def changed width and I'll give self comma width so this would be used to change the width of the pen off the line and I'll have self.pin width equals width okay and I have clear canvas so I'll write def clear canvas self and I'll use the delete function from canvas self.c.delete and argument would be all that would just actually clear the canvas completely I'll also have the functionalities of changing the foreground and the background of the screen so first for the foreground changing I'll write def change underscore ft and self so self dot color underscore FC equals color chooser dot ask color equals self dot color underscore FC and 1. so color Chooser dot ask color returns a tuple that contains two values that represents the selected color the one at the zeroth index is the RGB value and the second element of this Tuple is the hexadecimal color and since our color uses hexadecimal values I have given the first element of this Tuple as the argument okay and similarly I can Define for background color I'll write Def change underscore PG and self and self dot color underscore PT equals color chooser dot ask color and color equals self color underscore PT and in square brackets one fine also I need to write self dot C PC and inverted commas equals self dot color riscore BG cool now it's the turn of draw widgets function so this would be like the real layout of the frame of the entire canvas of the entire screen so I'll write Def draw widgets self and now the screen should have the controls in one part and the canvas on the other so we need to divide the space available for that we use frames so I'll write self dot controls equals frame self taught master I hope you remember the master variable it was the screen itself the window and I'll give some padding I'll Write Pad X equals five part y equals 5. now on the left side I would need the controls like the pen color the background color let me put these in a menu also the clear canvas and exit option should be available there then do it just the size of the pen that is the width I would use a slider let's get all this on the screen first so starting with the label of the pen with controller I'll write text PW equals label self thought controls text equals pen width font equals Georgia 16. now I got this on the frame and not the window itself please note that and I'll put it in a grid I'll write text PW dot grid rho equals 0 column equals 0. then I'll have the slider I'll write selftaught slider equals ttk dot scale this is where ttk is used I'll have a different kind of slider it would not show me the numbers on the scale and so for the argument I'll write selftaught controls comma from equals five 200 2 equals hundred command is self dot change w so just to recall what changed W did it change the width of the pen it assigned a new value to the pen bit and the orientation of the scale of the slider would be vertical fine now we'll set the pen value bandwidth so I'll write self.slider dot set in Brackets self dot pen width okay now self.slider dot grid row equals zero column equals one now I'll pack my frame I'll write self.controls.pac and side equals left fine now here I'll declare my canvas so self.c equals canvas self.master where do I want my canvas on the screen on master so selftaught Master width equals 500 and height equals 400. background color equals self dot color underscore PG it was there in the init function so there is where from we pick the background color then I'll pack this canvas I'll write cell.c dot back fill equals both expand equals true we've already worked with canvas and frames and labels a lot of times so I hope you're getting what is going on it's just the assembling of all that we observed it's nothing difficult and now I need to get the menu so I'll simply have this menu variable equals menu cell dot master and self.master.config menu equals menu and I'll have my option menu to which I'll be adding all the options available so option menu equals menu in Brackets menu it's in the menu of the main menu okay I hope it is not confusing now to menu I'll be adding the option menu variable so how would I do that I'll write menu dot art Cascade label equals menu menu equals option menu now let's add the options to the option menu so I'll write option menu Dot add underscore command label equals brush color command equals self dot change underscore foreground similarly or the other functions I'll write option menu Dot add command label equals background color command equals self thought change background then option menu dot add command label equals clear canvas command close self.clear again option menu dot add command label equals exit command equals self dot master dot destroy so we have four options one for changing the pen color the foreground one for the background changing color one for clearing the canvas and one for exiting the canvas okay so we're good to go okay but we need to call in this main class so I'll write Main and in Brackets when sorry now we're good to go and let's run this so I have my window and I can see this menu and bandwidth so I'll start right away doodling on the screen and I can see the line I've drawn and I can change the brush color I can pick any color let me pick this and I have different color pen now let me change the width once so it has a better width now brush is thicker and I can change the background color too so here it is the background color is different again I can clear the canvas everything is gone and if I click on the exit option the screen goes away so the paint application is working pretty much fine this was it for the program thank you hey everyone in some of the last videos we have learned the basics of tincter all that we need to make an application with tint so another application that we can make using the tincter module is the ciphertext application so to actually encrypt and decrypt the message we would use the onetime pad module but to give it its UI interface we will use the tincter module if you are not familiar with cryptography and Cipher you can read about it in the description so as I told you we would be using onetime pad for encryption and decryption purposes let's import the module also this might not be preinstalled so you can just run the command pip install One Time Pad so you can write that in your terminal and you are good to go so now we would import that module I'll write import One Time Pad Also let's import the Tinker I don't want to write Tinker dot over and over so I will just import everything from denter and this is how we have always done it from thinker import star and then you get the window that is your GUI interface you will write win equals TK and also we can give it a title right win dot title encryption for so what I'd be doing is I would create a function for encryption decryption is similar I would discuss it but to execute it is your task so coming back to the encryption part I should have an entry box for entering my message that I want to encrypt or encode and another display box for the encrypted value to be displayed also I would need encryption Button as the function should only be called after entering a value so let's first create the entry fields and their labels we will have two labels one for entering the original message and one for the encrypted message so if you couldn't follow what I said you will just understand as I write it so I'll first have my variable for the first label for entering the message which is OG MSG so it's just a short for original message and I'll write label where do I want this label I want it on my window so I'll write when and what is the text that should be displayed in this label it is enter message then I'll put it in a grid I'll write ogmsg dot grid in order to display it where do I want this message or label to be displayed or to be placed that is on row 10th and column one working with row and column is more easy to visualize so that's why I've used row and column and I'll get another label that is for getting the encrypted message so I'll write emsg equals label when dot text equals encrypted message and then I'll put it in a grid again emsg dot grid and related to the position of the other label I'll put the row equal to 11. and column equal to 1 okay so there goes my label and the label would be the text that is already displayed on the screen so now we will create the text box using entry widget of tenter you might note that we haven't used the one time pad yet we will use it only in the encryption function so I want two entries one for entering and another for displaying result so I'll have E1 equals entry and where do I want it I want it on the window let's keep everything simple and try to understand what's happening then I'll put it in a grid again I'll place it I'll write E1 dot grid and row equals 10. now since you have placed one object somewhere on the screen relative to that you can arrange the other objects also okay so I'll write row equals 10 and column equals to okay and similarly I'll have the another entry E2 equals entry and when and E2 dot grid row 11. column two okay now finally I'd be creating the encryption button so let me write it down I'll write encryption button equals button and it is win I want it on the window so I'll write win and text should be Let It Be encryption because that's the function that would be carried out the ground color Let It Be Gray it's a normal button and for round let it be black and now for the command I just leave it blank because I have not defined the function yet and I'll pack this encryption button I'll write encryption button dot grid row equals 13. column equals to fine now I'll write win dot main Loop now let's just Define this encrypt message function so I'll write I'll just go above a little scroll up a little and I'll write def encrypt message and I'll have this variable message which will be the original message that would be encrypted that you want to encrypt and where will I get it from I'll get it from my E1 the first entry that I'd be making and how do you get that in tincter you can write message equals E1 dot get and brackets and then to encrypt the this message I can write I'll have another variable that will hold this value I'll have Cipher text equals One Time Pad dot encrypt this is an inbuilt function it will automatically encrypt the message that has been given as an argument I'll write message because that's the original message that I want to encrypt and I'll write run this fandom gives you what kind of a key you want so I just can have any random kind of key I hope you know what key is for a cipher text if you don't please read the description now I'll insert this value in the second entry that I created E2 so how will I do that I'll write E2 dot insert and 0 comma Cipher text the zero in the argument is for the starting position of this Cipher text from where you want the cipher text to be displayed so the command for the encryption button would be encrypt message I'll just type that down and now we are good to go let's check this once and encrypt the messages so I have the window now let me enlarge it a little and I will just enter some random text or message let me write hello and I should get something encrypted some kind of code for this hello okay so I'll write hello and I'll click on the button encryption so here I go I have some code some encrypted message some Cipher for hello so that's pretty much it about this program for decryption you can use the decrypt function in one time pad module and you can carry out pretty much the same what we did in this application thank you hey everyone in this video we will try to make a registration form using tincter there is nothing to be explained about it as done in some of the last inter applications it is just assembling all that we have learned in linkta this is more like a practice session so let's get started with the code right away from tanker import Star and also importing to Dot message box now I'll add my window root equals TK also I'll set a specific size of the window Let It Be 500 into 500 I will put that in inverted commas the form looks cleaner this way moreover it's been long we have used place to position objects mentioning the window size lets me manage coordinates easily then I'll also given a title I'll write shoot dot title registration form since we are making a registration form it would be registration form cool also let me give my form a little background so I'll write root dot config background equals hash f f e 6 f 0. now this should be an inverted commas also this is a light shade of pink you can also pick any random colors from Color Picker now I will make a very simple registration form it will have five entry Fields two for the complete name first and last name then a date of birth field a country field from which country the user belongs which will be your drop list a language selection checkbox and a radio button for gender selection okay so I'll just quickly declare all my five variables as string variables and if you cannot recall what string variables were they were usually used with the widgets entry and label since there are going to be many entries I would make use of string bar to manage them effectively I will not give in any arguments as they are directly contained in the master window so first name FN equals stringvar brackets last name Ln equals string bar again top the date of birth equals string bar variable equals string bar VAR C1 equals Java this would be our check box 1 for the language selection word to equals python VAR C3 equals C plus plus and then radio variable again a string bar this war variable would be used for country and okay I would also like this information to be displayed later on the console after I have submitted the registration form so I'll have a function for that I'll write Def print entry rockets and column first equals FN dot get so first would be my first name variable you can take any variables that's not a problem and then for the last name I'll write second equals Ln dot get dob1 equals Tob dot get variable 1 equals variable dot get War 3 equals vrc1 or 3 equals for C2 word 3 equals War C3 now these three were repeated because you would be selected something from the check box only one option and accordingly the option would be fair in later on okay now I'll have my variable 4 equals radio underscore War dot get cool now I'll just print it so how I'll print it just follow along you know this already right print f the full name is first in curly braces and second in curly braces with a space in between then print f your age is top one and curly braces again and print if your country is in curly braces variable one then again print f your selected programming language is variable 3 in curly braces again and print if your gender is in curly braces variable 4. now I'd be calling this function when I'd be done with my form filling so I'll also have this tincter Dot message box dot show info just to give the user a popup that your form has been filled so as the message I'll write congratulations this would be the heading of the popup box the message box and the message displayed in the Box would be user has successfully signed up now I'll start with the labels the text things and the entry Fields so let's start with the heading I'll have a heading registration form so I'll have a variable heading equals label where do I want it I want it on root the window I have and text would be registration form let me decorate it a little so I'll write relief equals solid width equals 20. font aerial 19 and pulled foreground is hash p30047 and background is Hash FF e 6 f 0. now I'll place the heading heading dot place x equals 90 y equals 10. fine then for the first name I'll have a variable F name equals label it's just the text not the entry field right now so label and root text equals first name and column width equals 20 font equals bold 10 background equals FF e 6 f 0. fine now I'll place it fname dot place x equals 80. y equals 70. fine then for the entry field of the first name I'll write EF name equals entry root text War equals FN okay now F inverse the string variable that we declared above I hope you remember this is how we have used it and I'll place it I need to place the entry field also so it should be on the same yaxis and so I'll write efname dot place x equals 240 y equals 70. now very similarly for the last name L name equals label root text equals last name colon width equals 20 font equals bold then background equals again hash FF E6 F0 so I'll place it L name dot Place x equals 80 y equals 120. now the entry field for the last name I'll just copy it from above and change the text bar equals Ln then I'll pack it again I'll just copy it the last entry field x axis would be same y coordinate would be 120 now fine then moving on to the date of birth label and entry I'll have date equals label root comma text equals DOB width equals 20 font equals bold and 10 background again would be ffe6 F0 and I'll place this I'll write date dot place x equals 80. y equals 170. fine then the entry field e d o b equals entry root and text bar equals top now I'll place it e t o p dot Place x equals 240 y equals 170. fine now I'll have the country and that would be your drop down list so first the label country equals label where do I want this I want it on the window so I'll write root so the text would be country of course text equals country width equals 20 font equals poles 10. for round equals ffe6 F0 you can just copy it from above and change the text part and country dot place x equals 75 y equals to 20. now I'll given a list for the drop down box and let's have it let's have the list now list equals let me give in some names of country Nepal India a miracle China doll Japan South Africa and you can given names of any countries and a lot more countries and I'll just make it a drop down list now how do we do it so drop list equals option menu it's again a tinctive function and root and variable variable would save the value of the list whatever was selected and where the values will be selected from the list so star list fine now to set the value I'll write VAR dot set select country okay now drop list dot config since the drop list values that is war can change so I need to configure the drop list and I'll just given the width equals 15. so I'll just place it drop list dot place x equals 238 y equals to 20. now again I'll have a label for the language equals label root text equals programming language width equals 20 font bold and then background same as above ffe6f0 and I'll place this variable language language dot place x equals 95 and Y equals 270. fine now I'll have the check buttons C1 equals check button root text equals Java variable equals War C1 dot place now here I'll be placing this all together without taking it separately and x equals 235 y equals to 70. just copy this entire statement twice because we have two more check buttons text would be python for the second one C2 and where variable would be rc2 and I'll place it somewhere else that is x equals to nine t and Y equals to 70. similarly for C plus plus VAR C3 and I'll change the x coordinates also fine now for the gender I'll have the label I'll just copy it from above because everything is same just need to change the text that is gender otherwise width font and background color they all are same and I'll place it somewhere else I'll write gender dot place x equals 73 y equals 320. fine now for gender I'll have radio buttons I can have male and female so R1 equals radio button root text equals mail variable equals radio underscore War value equals mail dot place x equals to 30 comma y equals 320. copy the same R1 make it R2 and text would be female also the value would change to female and x coordinate would change to 290. fine so I had all my five entries and I'll have two buttons now one to quit and another for submitting the phone so I'll have submit equals button root text equals submit width equals 12. background equals FF 4D 9 4 ground let be white command equals print entry and I'll place it x equals 130 y equals 400. I'll have the quit button so quit equals button root comma text equals quit equals 12. background and foreground same as buff and command would be exit and I'll place it x equals to 80 comma y equals 400 and I'll call in the main Loop to root root dot main loop it's good to go now we should not have any problem in the code let's run this uncheck it so I have the window the registration form I'll just quickly fill in some details you can see the labels and the entry fields for the first name I can fill in person one for last name I can fill in last name date of birth can be 12. slash zero four slash two zero zero one I can select some country see there's a drop list and let me select Canada programming language Let It Be python gender I'll click on mail and I'll submit so I have this popup box message box congratulations user has successfully signed up when I click on submit I have this printed on the console so this was it about the program thank you hey everyone in the last video we made a form a registration form that was very basic and the information attained from it was just printed on the console now in this video we will get that entered data in a table in a database we will save the information on the table so for that we have the SQL Lite model to carry out data related function now the entire program would be same except the print entry function let me copy the program I'll go to registrationform.pui control a control C and I'll space that over here Ctrl V INE now I'll import SQL lite3 and if you don't have the module you can always download it using the command pip install SQL lite3 so I'll write import SQL 8 3 5. and I'll just delete this function def print entry and in place I'll write def database I will get the variables so I'll write first just like print entry I'll write first equals FN dot get second equals Ln dot get last name the first name is done then dob1 equals dob the date of birth dot get then variable one var1 equals War dot get this was for the country then variable three bar three equals War underscore C1 or 3 equals bar underscore C2 bar 3 equals to our underscore C3 fine then the radio button were 4 for the gender equals radio underscore or dot get now till here the program was same as the print entry function it changes when I start connecting this data with the table or the database now how do we do that I'll write I'll have a variable conn that is for connection equals SQL lite3 dot connect and in Brackets I'll given the name of the database okay so I'll write form dot DB this is to establish a connection to sqlite you need to pass the database name you want to connect okay that was form dot DB if the specified database is not present on the disk then a new one would be created by sqlite otherwise it will connect to the one that is already present now if there is a connection established that was done by dot connect I'll write with con c o n n cursor equals con dot cursor now this is another function by sqlite to create a cursor object to execute sqlite commands queries from python okay Now to create a database to add values to it SQL commands need to be executed and since we are doing that in a python file I need the cursor object okay now I'll write cursor.execute and in inverted commas I'll given the SQL command Okay so execute is used to run the SQL query and return the results okay so create table if not exists student which is the name of the database or the table SQL commands are not case sensitive but they are preferred to be written in uppercase then brackets are given the field names F name and what type of Entry would be made it would be text and then L name and also text DOB it is a date so I'll write date and Country text again programming language I'll write proc language it is also text and gender which is also text enclosed brackets and the inverted commas again I'll have another statement SQL statement I'll write cursor.execute in inverted commas insert into student F name L name dop country Pro language gender and what values would be inserted values brackets I'll given six question marks for six fields inverted commas close and comma the value of these question marks can be first these variables where we get the value of the string words first second dob1 War 1 War 3 and War 4. fine these were just the two SQL statements that I needed and then I'll commit I'll write Conn dot commit and packets to make changes to the table to confirm the change is committed okay and also I need a popup box after I have submitted the form so I'll write tincter Dot message box dot show info we can print in the same message congratulations and for the information the user has successfully signed up close and what it comes closed and the rest would be pretty similar we have all the entries we have the labels we have the entries we have the drop list for the country then we have the check buttons the radio buttons but here for the command of the submit button I'll change this to database instead of print entry and the rest can remain the same now let's run this let's fill in the form and then we'll check the database so I have my form now I'll fill in this registration form twice just to have some data when I'm checking the database the table so for first name I can write ABC and for last name I can write x y z then for the date of course 12 0 3 slash two zero zero three I'll selection country India programming language Let It Be Python and gender mail and I'll submit I have to pop a box and I'll click on OK and I'll quit again I'll run this we can given the first name mnop last name qrst UB can be 10 slash 10 slash 1980 and I'll select the country Canada again maybe and programming log which can be Java female and I'll submit I have the popup box and I'll quit now it's time to check the database for that you need to download something and that's database for sqlite you can just search the same statement database for sqlite and you'll find this first link and when you click on it you will see downloads and you can download the required version so I install the standard installer for 64bit windows now once you've installed it installing this is very easy you can go with the default settings and you just need to check the tincter folder in which you are saving all the programs and there you'll find this form.tb and you can open it with database for SQL and you can actually see the table you will find this interface so you can see we have our table student it has the specified field names when I click on browse data you can actually see the table that we have filled in so this was all about the program we learned how to use sqlite3 along with printer and SQL in Python I hope you understood what we did thank you
