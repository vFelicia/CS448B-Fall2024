With timestamps:

00:00 - welcome to programming knowledge
00:03 - so in this video we are going to discuss
00:06 - about
00:06 - another type of list view and the
00:09 - dismissible feature which is generally
00:12 - associated with list view
00:14 - okay so let's start
00:18 - first of all in my body i'll give it a
00:20 - width of infinity
00:22 - so with this double
00:25 - dot infinity
00:29 - okay and then the child is
00:32 - list view dot
00:35 - separated okay so this is another type
00:38 - of list view which has a separator
00:41 - builder
00:42 - like in the list view dot builder we
00:44 - only had an
00:45 - item builder okay but over here in list
00:48 - view dot separated we also have a
00:50 - separator builder which means
00:52 - every item in the list will be separated
00:56 - by the widget returned to this
00:58 - separator builder okay so first of all
01:01 - let's add the
01:02 - item count and it will be
01:06 - list items
01:10 - dot length okay and then the
01:14 - item builder is simple it takes a
01:17 - build context
01:25 - okay and it returns
01:30 - so this wrong spelling returns
01:36 - a list tile
01:39 - okay and then over here in the title we
01:42 - can have
01:42 - the text and the text
01:46 - says
01:49 - count then we'll use the string
01:52 - interpolation
01:54 - inside curly braces we will write
01:57 - list items
02:01 - and then the index oh i forgot to give
02:04 - an index over here
02:05 - this method also takes an index
02:10 - okay then i'll return this over here
02:13 - this will go over here now let's format
02:16 - this
02:17 - and now let's also give a separator
02:19 - builder okay so when you hover around
02:21 - separator builder you see we get a build
02:24 - context
02:24 - and an integer which is the index so
02:27 - this
02:27 - means that for every item we can
02:30 - specify a different divider okay that is
02:34 - the power of this separator builder but
02:37 - over here we will simply use a
02:39 - single separator for all the items
02:42 - okay so build context
02:46 - context sorry that will be a comma
02:50 - int index and i'll use the arrow
02:54 - function and it returns a
02:56 - divider okay so we have not yet
03:00 - discussed about divider so divider is
03:02 - actually a widget that will
03:04 - just draw a faint horizontal line
03:07 - divider always draws a horizontal line
03:10 - in flutter
03:11 - so let's save this in c and now you can
03:14 - see we get
03:14 - the values and each value is
03:18 - divided by a divider okay so now you can
03:22 - see this is the standard color of
03:23 - divider but we can do a few changes with
03:26 - the divider like
03:27 - change the color so i can change the
03:30 - color to color start
03:32 - red now let's format this
03:36 - and see what happens and now you can see
03:40 - we have the divider in
03:42 - red now similar to list view dot builder
03:45 - it also
03:46 - has a padding okay so we can give it a
03:49 - padding con
03:51 - sorry the const will be in small c
03:54 - const edge insets
03:58 - dot all and that can be 10.0
04:04 - so now let's format it save it
04:08 - and then you can see each divider has a
04:10 - little bit space
04:11 - over here and that is because of the
04:14 - padding
04:15 - okay so this was about the list view
04:18 - separated which is the last
04:19 - type of list view okay so we also have a
04:22 - list view dot custom which takes a
04:25 - sliver
04:26 - delegate but still we have not discussed
04:29 - about sliver delegate so i'll
04:32 - do the list view dot custom part once we
04:34 - discuss the list view sliver delegate
04:38 - okay so moving on the next thing that we
04:40 - are going to discuss is about the
04:42 - dismissible feature
04:44 - okay so by that i mean that if i
04:48 - if i pull from the end to start
04:52 - on a list item it should be dismissed or
04:55 - maybe over here it shows a delete icon
04:57 - and then if i pull it from
04:59 - the right to left the item gets
05:03 - dismissed okay so that is a very common
05:05 - feature that we see with list views
05:08 - okay so to do so over here in item
05:12 - builder
05:13 - instead of returning a list to tile i'll
05:16 - return another widget
05:18 - okay and that is dismissible
05:25 - okay so now again this dismissible
05:28 - will let's give it the child a card okay
05:31 - so
05:32 - a card is another type of widget it is
05:35 - very much similar to container
05:38 - only difference is that it has an
05:40 - elevation
05:41 - means it also has a height in the z-axis
05:45 - okay so then i'll give the child as a
05:47 - card
05:48 - okay then card will take a margin
05:52 - can the margin let's say h
05:55 - inserts symmetric
06:03 - i'm sorry edge inserts dot
06:07 - symmetric okay and then in
06:11 - horizontal
06:13 - we give it uh let's say 15.0
06:17 - margin and in vertical
06:22 - we can give it a
06:25 - 4.0 margin i am doing so because we are
06:29 - already giving it a margin over here up
06:31 - adding over here
06:32 - that's why that's why i am reducing the
06:35 - margin
06:36 - vertically so let's format it
06:40 - now we have the card now inside this
06:45 - card we will add our child okay so the
06:48 - child will
06:49 - be for now a simple list tile
06:57 - okay and the title will be
07:02 - text that says
07:07 - count and then string interpolation
07:13 - list items
07:17 - index let's format
07:20 - this save it and see
07:24 - okay so you can see over here it says
07:27 - that key
07:28 - should not be equal to null okay is not
07:31 - true
07:34 - so that me that error is because this
07:37 - dismissible
07:38 - takes a key which is not significant
07:41 - over here but it is necessary so over
07:44 - here i can simply write key
07:46 - and then key takes a
07:50 - key value okay so over here i can simply
07:52 - say value key
07:57 - okay and then over here it takes an idea
07:59 - i'll write one two three
08:00 - okay that means this value key means it
08:03 - will generate a key from this value
08:06 - and it is assigned to this key okay that
08:08 - is just for removing the error now let's
08:12 - save this
08:15 - and now you can see we have this card
08:18 - over here this elevated thing
08:20 - okay so now i think we should remove
08:22 - this separator builder
08:24 - the purpose is understood over here and
08:27 - this
08:28 - can be changed to builder
08:35 - okay so now you can see we have this
08:37 - card over here for each item
08:40 - okay now after this the next thing that
08:44 - i need to do is for dismissible i need
08:46 - to add a on dismissed property
08:50 - okay so over here after the key
08:53 - i'll write on dismissed and it takes a
08:56 - function
08:58 - which has the direction means the
09:00 - direction in which
09:02 - the item was dismissed and then
09:05 - for now i we can simply print
09:09 - the direction okay we can change it
09:13 - according to the functionality needed
09:15 - later
09:16 - so let's save this and now let's try
09:20 - dismissing it so you can see this is
09:24 - dismissible and the value is being
09:27 - printed okay the direction is being
09:29 - printed so over here you can see dismiss
09:31 - direction dot
09:32 - end to start which means this is the end
09:35 - this is the start and dismiss direction
09:37 - is an
09:37 - enum okay now if i do it from
09:41 - here so now you can see it is like start
09:44 - to
09:44 - end so i think you are understanding
09:47 - what i am trying to do over here this is
09:48 - the feature i was talking about we can
09:50 - simply
09:51 - remove an item from a list with a little
09:55 - bit of animation
09:56 - okay and now however if i build this
09:59 - again i think all the items
10:00 - should return okay now let's
10:04 - rerun this that was giving us an error
10:11 - yes so you can see we have the list over
10:14 - here back
10:16 - now along with on dismissed we can
10:18 - specify a direction that will be
10:22 - used as the dismissed direction like
10:25 - right now in the app you can see the
10:30 - item can be dismissed from end to start
10:33 - and can also be dismissed from start to
10:36 - the end
10:36 - but i want only to dismiss it from the
10:39 - end to start
10:41 - so in that case what we can do is inside
10:44 - this
10:44 - dismissible we can add a dismiss
10:48 - direction
10:51 - okay not a dismiss direction just
10:54 - direction
10:55 - okay and over there over here we have
10:57 - just now seen we have our dismiss
10:59 - direction
11:00 - enum like this and then you can see this
11:04 - is the
11:05 - these are all the values down means when
11:08 - we pull the item down
11:09 - and to start means the names explain
11:13 - themselves
11:14 - okay and i want this to only be valid
11:17 - for end
11:18 - to start means the dismiss feature will
11:20 - only work when we try dismissing from
11:22 - the end to start
11:25 - okay now let's save this and see
11:28 - so now if i try dismissing it from this
11:31 - direction it will not work but however
11:34 - if i tried is missing from
11:36 - the end to start it will force your work
11:39 - because we have restricted the direction
11:42 - from end to start
11:43 - only now when we are dismissing you can
11:48 - see we have this background over here
11:50 - now in flutter we can also
11:55 - specify what should be the background of
11:57 - every item when being dismissed
12:00 - okay so the general convention would be
12:02 - to add a delete sign
12:04 - okay so let's do that
12:07 - we have a background named parameter
12:10 - it will it takes a widget and for now it
12:13 - is a container
12:16 - okay now the container should have a
12:19 - color
12:21 - and the color is red okay
12:25 - let's format this first now it takes a
12:29 - child the child is an
12:30 - icon which will obviously be a delete
12:32 - icon
12:33 - so i'll use the icons em and then delete
12:38 - and then the color should be
12:43 - colors dot white
12:46 - okay and then the size can be around
12:51 - 40.0
12:54 - okay let's format this now after that i
12:58 - want the containers item to be aligned
13:01 - to the right we since we are
13:03 - dismissing it from the end to start
13:06 - where the end represents the right i
13:08 - want
13:09 - the child to be aligned at the right so
13:12 - i'll add the
13:13 - alignment as right so i'll use the
13:16 - alignment tenon
13:21 - alignment dot center
13:24 - right that means in the center
13:27 - vertically and at the right horizontally
13:31 - okay and maybe let's add a padding from
13:33 - the
13:34 - end that is from the right otherwise the
13:37 - the the delete icon will be at the end
13:42 - of the container means it will be
13:43 - sticking to the
13:45 - border of the container so let's add a
13:47 - padding
13:49 - and then again add a const
13:52 - before padding and margins because
13:55 - so it will not be builded again and
13:58 - again so
13:59 - const edge inserts
14:04 - dot only and it is only for write
14:09 - 20.0
14:12 - now let's save this and see
14:17 - so now when we dismiss this we can see
14:21 - we get this delete icon over here now
14:23 - this doesn't look very good because
14:28 - when we try to dismiss this it is not
14:31 - actually the
14:32 - card which is being dismissed it is a
14:35 - little bit surface
14:36 - beyond the card which is dismissible
14:39 - okay so to fix that over here we can
14:42 - remove this padding from here
14:44 - and do a little bit design changes which
14:46 - is required
14:48 - but the purpose is fulfilled so i hope
14:50 - you understand how to use our
14:52 - dismissible
14:54 - okay and and one thing that i missed and
14:56 - dismissible was there is a confirmed
14:58 - dismiss option
15:00 - okay that means once the dismiss process
15:02 - has been done and still you want to
15:04 - confirm the user that
15:06 - are you sure you want to you want
15:09 - this to happen so then we can use this
15:11 - confirm dismiss
15:13 - okay so this will be for
15:16 - the video thank you

Cleaned transcript:

welcome to programming knowledge so in this video we are going to discuss about another type of list view and the dismissible feature which is generally associated with list view okay so let's start first of all in my body i'll give it a width of infinity so with this double dot infinity okay and then the child is list view dot separated okay so this is another type of list view which has a separator builder like in the list view dot builder we only had an item builder okay but over here in list view dot separated we also have a separator builder which means every item in the list will be separated by the widget returned to this separator builder okay so first of all let's add the item count and it will be list items dot length okay and then the item builder is simple it takes a build context okay and it returns so this wrong spelling returns a list tile okay and then over here in the title we can have the text and the text says count then we'll use the string interpolation inside curly braces we will write list items and then the index oh i forgot to give an index over here this method also takes an index okay then i'll return this over here this will go over here now let's format this and now let's also give a separator builder okay so when you hover around separator builder you see we get a build context and an integer which is the index so this means that for every item we can specify a different divider okay that is the power of this separator builder but over here we will simply use a single separator for all the items okay so build context context sorry that will be a comma int index and i'll use the arrow function and it returns a divider okay so we have not yet discussed about divider so divider is actually a widget that will just draw a faint horizontal line divider always draws a horizontal line in flutter so let's save this in c and now you can see we get the values and each value is divided by a divider okay so now you can see this is the standard color of divider but we can do a few changes with the divider like change the color so i can change the color to color start red now let's format this and see what happens and now you can see we have the divider in red now similar to list view dot builder it also has a padding okay so we can give it a padding con sorry the const will be in small c const edge insets dot all and that can be 10.0 so now let's format it save it and then you can see each divider has a little bit space over here and that is because of the padding okay so this was about the list view separated which is the last type of list view okay so we also have a list view dot custom which takes a sliver delegate but still we have not discussed about sliver delegate so i'll do the list view dot custom part once we discuss the list view sliver delegate okay so moving on the next thing that we are going to discuss is about the dismissible feature okay so by that i mean that if i if i pull from the end to start on a list item it should be dismissed or maybe over here it shows a delete icon and then if i pull it from the right to left the item gets dismissed okay so that is a very common feature that we see with list views okay so to do so over here in item builder instead of returning a list to tile i'll return another widget okay and that is dismissible okay so now again this dismissible will let's give it the child a card okay so a card is another type of widget it is very much similar to container only difference is that it has an elevation means it also has a height in the zaxis okay so then i'll give the child as a card okay then card will take a margin can the margin let's say h inserts symmetric i'm sorry edge inserts dot symmetric okay and then in horizontal we give it uh let's say 15.0 margin and in vertical we can give it a 4.0 margin i am doing so because we are already giving it a margin over here up adding over here that's why that's why i am reducing the margin vertically so let's format it now we have the card now inside this card we will add our child okay so the child will be for now a simple list tile okay and the title will be text that says count and then string interpolation list items index let's format this save it and see okay so you can see over here it says that key should not be equal to null okay is not true so that me that error is because this dismissible takes a key which is not significant over here but it is necessary so over here i can simply write key and then key takes a key value okay so over here i can simply say value key okay and then over here it takes an idea i'll write one two three okay that means this value key means it will generate a key from this value and it is assigned to this key okay that is just for removing the error now let's save this and now you can see we have this card over here this elevated thing okay so now i think we should remove this separator builder the purpose is understood over here and this can be changed to builder okay so now you can see we have this card over here for each item okay now after this the next thing that i need to do is for dismissible i need to add a on dismissed property okay so over here after the key i'll write on dismissed and it takes a function which has the direction means the direction in which the item was dismissed and then for now i we can simply print the direction okay we can change it according to the functionality needed later so let's save this and now let's try dismissing it so you can see this is dismissible and the value is being printed okay the direction is being printed so over here you can see dismiss direction dot end to start which means this is the end this is the start and dismiss direction is an enum okay now if i do it from here so now you can see it is like start to end so i think you are understanding what i am trying to do over here this is the feature i was talking about we can simply remove an item from a list with a little bit of animation okay and now however if i build this again i think all the items should return okay now let's rerun this that was giving us an error yes so you can see we have the list over here back now along with on dismissed we can specify a direction that will be used as the dismissed direction like right now in the app you can see the item can be dismissed from end to start and can also be dismissed from start to the end but i want only to dismiss it from the end to start so in that case what we can do is inside this dismissible we can add a dismiss direction okay not a dismiss direction just direction okay and over there over here we have just now seen we have our dismiss direction enum like this and then you can see this is the these are all the values down means when we pull the item down and to start means the names explain themselves okay and i want this to only be valid for end to start means the dismiss feature will only work when we try dismissing from the end to start okay now let's save this and see so now if i try dismissing it from this direction it will not work but however if i tried is missing from the end to start it will force your work because we have restricted the direction from end to start only now when we are dismissing you can see we have this background over here now in flutter we can also specify what should be the background of every item when being dismissed okay so the general convention would be to add a delete sign okay so let's do that we have a background named parameter it will it takes a widget and for now it is a container okay now the container should have a color and the color is red okay let's format this first now it takes a child the child is an icon which will obviously be a delete icon so i'll use the icons em and then delete and then the color should be colors dot white okay and then the size can be around 40.0 okay let's format this now after that i want the containers item to be aligned to the right we since we are dismissing it from the end to start where the end represents the right i want the child to be aligned at the right so i'll add the alignment as right so i'll use the alignment tenon alignment dot center right that means in the center vertically and at the right horizontally okay and maybe let's add a padding from the end that is from the right otherwise the the the delete icon will be at the end of the container means it will be sticking to the border of the container so let's add a padding and then again add a const before padding and margins because so it will not be builded again and again so const edge inserts dot only and it is only for write 20.0 now let's save this and see so now when we dismiss this we can see we get this delete icon over here now this doesn't look very good because when we try to dismiss this it is not actually the card which is being dismissed it is a little bit surface beyond the card which is dismissible okay so to fix that over here we can remove this padding from here and do a little bit design changes which is required but the purpose is fulfilled so i hope you understand how to use our dismissible okay and and one thing that i missed and dismissible was there is a confirmed dismiss option okay that means once the dismiss process has been done and still you want to confirm the user that are you sure you want to you want this to happen so then we can use this confirm dismiss okay so this will be for the video thank you
