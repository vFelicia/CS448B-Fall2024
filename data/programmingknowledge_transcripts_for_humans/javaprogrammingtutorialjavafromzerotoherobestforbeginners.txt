With timestamps:

00:00 - hey guys welcome to this tutorial series
00:02 - wherein we'll be learning Java along
00:04 - with the DSA so myself aniket I've been
00:08 - I'll be your instructor throughout this
00:09 - course wherein where we'll be learning
00:11 - Java programming language starting from
00:13 - the basics to the core Java Concepts and
00:17 - along after that we will dive deep into
00:20 - the data structures and algorithms using
00:23 - and we will try to implement that using
00:25 - Java programming language
00:27 - so first of all starting with the
00:29 - introduction you would ask me to
00:32 - which person can take this course so I
00:34 - would say uh anyone who wants to learn
00:37 - the Java programming language right from
00:39 - the beginning till the advanced data
00:41 - structures can take this course
00:43 - okay so in this video we'll be talking
00:45 - about the installation part which are
00:47 - which softwares are required you to run
00:50 - the Java program inside your PC
00:52 - so start let's let's get started open
00:55 - your Chrome
00:57 - and head over to the Chrome and just
00:59 - type download
01:02 - jdk and search
01:06 - you'll be seeing first link which is of
01:08 - your your record one and just go there
01:11 - and according to your OS whether you are
01:14 - using Mac OS Linux Linux or Windows just
01:16 - to choose your windows OS and according
01:20 - to your installer
01:23 - just click on this and this will get
01:25 - downloaded in your system I have already
01:28 - downloaded it so I don't download it
01:31 - again or I will pause it
01:33 - okay and the next thing you will require
01:35 - is IDE so what is IDE basically ID is an
01:40 - environment where you code uh your Java
01:43 - Java programs and basically what is the
01:46 - difference between an ID and notepad you
01:47 - can also code in the notepad but the
01:49 - better way of the better way of using
01:52 - the IDE is you can get a auto suggestion
01:55 - of those code Snippets and uh and
01:58 - there's in Auto indentation is there in
02:00 - The Insider ID so I suggest one of the
02:03 - best ID to code the Java programs is
02:06 - IntelliJ IDEA so you just go into your
02:09 - browser and type
02:12 - download
02:14 - in Delhi J
02:17 - idea
02:20 - so first link comes of jetbrains who are
02:23 - the developer of this ID
02:25 - go there and click on this Community
02:27 - Edition Community Edition because don't
02:30 - download the ultimate edition you'll be
02:31 - charged after the 30 days free trial so
02:34 - so we want the free tile so go here and
02:38 - download the exe file or zip file
02:40 - whatever you want I suggest to download
02:42 - exe file click on the download and after
02:46 - two to three seconds your download will
02:48 - get started I have also downloaded this
02:51 - files that's why I don't download it
02:53 - again
02:54 - okay after downloading this file you
02:57 - just go there inside the full downloads
02:59 - folder and click on the jdk file
03:02 - double click on it it will ask for the
03:06 - permission click yes
03:11 - okay
03:12 - click next
03:14 - then keep the path as default
03:18 - okay so wait here the jdk will get
03:22 - installed in your PC
03:26 - simultaneously I will also install a
03:29 - IntelliJ IDEA
03:32 - okay
03:34 - wait
03:37 - hello here
03:39 - so it was saying the current IntelliJ
03:42 - Community Edition is already installed
03:44 - so I have already installed it so you
03:46 - just follow all the steps which uh just
03:48 - you need to click next next and IntelliJ
03:50 - IDEA will get installed in your PC
03:52 - okay
03:54 - so here you can see uh my jdk is also
03:58 - get down installed in my PC just close
04:00 - here and you need to go to the path
04:03 - which which you have given uh at the
04:05 - time of the jdk installation so here I
04:08 - given the path inside my Java folder I
04:10 - have jdk file and you just go inside the
04:14 - bin folder and just click here and copy
04:17 - the path
04:18 - I am again repeating just go to that
04:21 - path where you have installed the jdk
04:23 - and inside the jdk folder you have bin
04:26 - folder just click here and copy this
04:29 - path and and go to your start and type
04:33 - edit
04:34 - and you will be seeing edit the system
04:35 - variables here
04:38 - just click on it and click here edit
04:40 - environment
04:41 - and inside the user variable for the
04:44 - user just go here and click on the path
04:48 - and click edit and you will be seeing
04:51 - here new button and you click on this
04:53 - and just paste that path and click enter
04:56 - okay and click OK and again okay
05:01 - and okay
05:02 - so till now you have successfully
05:06 - installed all the softwares which are
05:08 - required you to run the Java programs
05:10 - inside your PC
05:12 - okay to test it out uh whether whether
05:15 - all this installation parties get
05:17 - succeed successfully installed just
05:20 - press the windows R but as a button on a
05:24 - keyboard and type CMD here and enter and
05:27 - just type Java minus minus version
05:32 - and after hitting enter you will be
05:34 - seeing the jacquer and Java version
05:36 - which is installed in a PC and jdk
05:38 - version which is also installed in your
05:41 - PC okay
05:42 - so till now we have seen the
05:45 - introduction and installation part which
05:47 - are required for you to run a Java
05:49 - program in your inside your PC okay uh
05:52 - so after that
05:54 - you have also I am assuming that you
05:56 - have also installed IntelliJ IDEA in
05:58 - your PC just click here open your open
06:02 - your IDE it will take some time
06:05 - according to the system configuration of
06:07 - your laptop or PC
06:09 - okay just wait here
06:12 - I'll be seeing this okay
06:16 - wait
06:19 - okay name and name the project whichever
06:22 - you want I will be giving hello
06:26 - and I will be creating clicking on the
06:28 - next
06:29 - okay after creating a new project inside
06:31 - IntelliJ IDEA the this window get pop up
06:34 - and inside source you can see the main
06:38 - file is there
06:40 - okay so this is the basic code
06:43 - that IntelliJ IDEA will provide you okay
06:46 - and after is inside this you can code
06:49 - whatever you want in Java programming
06:52 - language so till now I hope all the all
06:56 - of you have installed or all the
06:58 - required softwares and and till now you
07:01 - are rich at this point where you will be
07:03 - will be starting to code inside IDE
07:07 - so one more thing is there uh I'll be
07:09 - planning to give you some extra
07:13 - questions code like coding questions
07:15 - I'll be coming like for example I will
07:17 - be covering variables and data types and
07:19 - then again in the next question next
07:22 - video I will be giving you the problems
07:24 - or some coding questions uh regarding
07:27 - that Concepts which I have taught you in
07:30 - the previous videos uh so I expect
07:33 - expect you to answer those questions
07:35 - inside uh comment comment box of that
07:38 - video and I'll be reviewing your
07:40 - comments in the upcoming videos and
07:42 - we'll be talking some which are which
07:44 - Solutions is best which solution is
07:46 - wrong so I'll be thinking like that so I
07:50 - hope uh you enjoyed this video and
07:53 - install all the softwares which are
07:55 - required so in this video I will be
07:57 - talking about the theoretical part of
07:59 - the Java so in this video also we are
08:02 - not going to code anything so basically
08:05 - we are talking about the Java
08:06 - application what are the Java features
08:09 - and what are the three JS of the Java so
08:12 - I strongly recommend that you should
08:14 - watch this video if you are preparing
08:16 - for the interviews or any your college
08:19 - test so this will be helpful for you to
08:21 - clear out those examinations
08:24 - so what are we learning today so we'll
08:27 - be learning what is Java we will be
08:29 - discussing some applications of the Java
08:31 - and we will be seeing some features that
08:35 - makes the Java as a standout programming
08:37 - language and will at last we'll be
08:39 - covering the three JS of the Java which
08:42 - is jvm JRE and jdk so let's just get
08:46 - started okay
08:47 - so what is Java so Java is a programming
08:50 - language and a platform so Java is a
08:53 - high level robust object oriented and
08:55 - secure programming language
08:57 - so talking about the history of the Java
09:00 - the Java it was developed by the sun
09:01 - Microsystems in the year 1995 and James
09:05 - Gosling is The Man Behind the Java and
09:08 - which who called called as the father of
09:10 - the Java before Java its name was Oak
09:13 - since the oak was already registered by
09:16 - a company so James Gosling and his team
09:19 - decided that we should change the name
09:21 - to from Oak to Java so that is the
09:24 - history about Java so let's just talk
09:26 - about the real life examples and
09:28 - applications where Java is used okay
09:31 - so Java is used in a wide range of
09:34 - fields okay so let's just discuss some
09:37 - some of Themis so Java is used in
09:40 - desktop application so there's Acrobat
09:43 - Reader media player your antivirus which
09:45 - you use in your system
09:47 - is built using the Java programming
09:49 - language and some of the web
09:51 - applications like IRCTC uh the railway
09:54 - resolution systems and the Java T point
09:56 - which is famous website
09:58 - wherein you can find the tutorials for
10:01 - the Java learning
10:03 - and Enterprises applications such as
10:05 - banking applications are built using the
10:07 - Java and strong backend is also created
10:10 - using the Java programming language
10:12 - and the mobile application and embedded
10:15 - system smart cards Robotics and the
10:18 - games are yet more fields which you can
10:21 - think Java is there
10:24 - okay so let's talk about the features of
10:26 - the Java so here you can see the picture
10:29 - where I have written all those features
10:33 - that Java has okay let's just talk some
10:37 - few of them so Java is simple so what
10:41 - makes the Java simple Java is very easy
10:43 - to learn and its syntax is Simple and
10:46 - Clean and easy to understand according
10:48 - to the sun Microsystems Java is a simple
10:50 - language because Java syntax is based on
10:54 - C plus plus so it it makes easier to a
10:57 - new programmer to learn it better and in
11:00 - faster way so Java has removed many
11:03 - complicated and rarely used features for
11:05 - example explicit pointers operator
11:08 - overloading Etc okay so there is no
11:12 - there is no need to unreference the
11:14 - object because there is an automated
11:16 - garbage collection is there in the Java
11:19 - okay so another feature is Java is
11:23 - object oriented so what is object
11:24 - oriented so object oriented is nothing
11:27 - but the everything in Java is an object
11:29 - object oriented means we organize our
11:31 - software as a combination of the
11:33 - different types of the object that
11:35 - incorporate the both Behavior so Java
11:39 - implements the oops Concepts such as
11:41 - class object inheritance polymorphism
11:45 - abstraction and encapsulation
11:47 - I will be covering all those groups
11:49 - Concepts in detail in the upcoming video
11:52 - lectures
11:53 - okay uh so top let's talk about the one
11:57 - more feature here which is main feature
11:59 - I guess the Java is platform independent
12:02 - so what is Java platform Independence uh
12:04 - platform Independence means once you
12:07 - write your Java code that is the dot
12:09 - Java file
12:11 - and once you execute that file it
12:14 - creates the dot class file of that the
12:16 - Java program so what is dot class file
12:19 - so that dot class file is the byte code
12:21 - of the Java which you can run in any
12:25 - operating system so let's suppose
12:27 - Windows is there Mac OS is there Linux
12:29 - is there you can take that dot class
12:31 - file and you can run any of these
12:34 - platforms any of these wind operating
12:37 - system so that makes the Java as a
12:39 - platform independent language
12:42 - okay so enough talking about the
12:45 - features let's move on to the three JS
12:48 - of the Java so this is the most
12:51 - frequently asked questions in the
12:52 - interviews and your college examinations
12:55 - what is jdk what is JRE and what is jvm
12:59 - so let's just talk about it
13:02 - in detail okay so first I will be
13:05 - talking about jvm so here you can see
13:07 - the jvm okay so what is jvm jvm stands
13:11 - for Java virtual machine it is an
13:13 - abstract machine
13:14 - it is a it is a specification that
13:17 - provides a runtime environment in which
13:19 - Java byte code can be executed so as
13:23 - early I have told you the dot dot dot
13:26 - Java class file is converted into dot
13:29 - class file dot class file is the actual
13:31 - byte code that Java uses
13:33 - to run that code okay and then again
13:37 - that dot by dot class file is converted
13:39 - into machine understandable code okay so
13:43 - that part is handled by jvm so what jvm
13:47 - performs the task okay
13:49 - jvm loads the code it verifies your code
13:52 - it executes your code and provides the
13:55 - runtime environment to the user to
13:57 - execute the Java program
14:00 - okay so yeah let's just talk about JRE
14:04 - so what is JRE Jr stands for Java
14:07 - runtime environment it is a set of
14:09 - software tools which are used for the
14:11 - developing the Java applications it is
14:14 - used to provide the runtime environment
14:16 - it is implementation of the jvm it is
14:19 - physically exist it contains the set of
14:21 - libraries and other files that jvm uses
14:24 - at the runtime so here you can see jvm
14:28 - the set of libraries like jar Etc and
14:32 - other files together makes JRE so JRE so
14:38 - I hope you understand the JRE so let's
14:41 - move ahead and talk about jdk so jdk is
14:45 - an acronym for the Java development kit
14:47 - so till now we have learned jvm JRE and
14:51 - some development tools are there like
14:52 - Java C Java and all those things forms a
14:56 - jdk so you might have seen one software
15:00 - we have install in our first video that
15:02 - is download jdk and this is the jdk so
15:05 - what contains inside a jdk is jvm JRE
15:09 - and the development tools which are
15:11 - required for the Java Apple Java
15:14 - applications to be built okay so Java
15:18 - jdk is a software development
15:19 - environment which is used to develop
15:21 - Java application and applets it
15:24 - physically exists it contains JRE plus
15:27 - development tools so as I told you JRE
15:30 - plus some development tools forms
15:32 - together a jdk and which we have
15:35 - installed in our first video
15:38 - so enough talking about theoretical part
15:41 - I hope you guys learn something about
15:45 - the theoretical part of the Java so in
15:47 - our upcoming videos we'll be starting to
15:50 - code in Java programming language and
15:53 - will be
15:55 - recording our first Java program in the
15:58 - upcoming videos what we are going to
16:00 - cover in this video is Java variables
16:02 - what are variables in Java so okay so
16:05 - let's just get started
16:07 - a variable is a container which holds
16:10 - the value while the Java programs is
16:13 - executed okay a variable is assigned
16:16 - with a data type and the variable name
16:18 - is the memory location okay so what it
16:21 - mean you can see here is a pictorial
16:24 - representation of what I said so suppose
16:27 - this is a ram memory and you have
16:29 - created one variable
16:31 - here and you have assign value it value
16:35 - 10 to the to that variable okay so
16:38 - variable is nothing but a container
16:40 - inside your memory
16:42 - which holds a particular value and what
16:45 - kind what kind of value it's gonna hold
16:47 - it depends upon the what type what data
16:50 - type you have given to that variable
16:51 - okay so you can assume it like a
16:54 - reserved area inside your memory
16:58 - okay uh so moving ahead we have types of
17:01 - the variables okay so there are three
17:03 - mainly three types local instance and
17:06 - static
17:07 - so let's see one by one each of them
17:09 - okay so what are local variables a
17:12 - variable declared inside a body of the
17:15 - method is called as local variable and
17:17 - you can use this variable only within
17:20 - that method and other methods inside
17:22 - that class aren't even aware that the
17:25 - variable exists
17:26 - so we will see the implementation part
17:30 - of this local variable instance variable
17:33 - and static variable once we get into the
17:35 - code okay for time being just listen to
17:38 - me and try to understand
17:41 - okay the next next one is instance
17:43 - variable a variable declared inside the
17:45 - class but outside the body of the method
17:48 - is called as instance variable and it
17:50 - should it should not be declared as
17:52 - static one why so I will also tell you
17:55 - in the coding part of that video okay so
17:58 - moving ahead we have the static variable
18:00 - a variable that is declared as static is
18:03 - called as static variable it cannot be
18:05 - local you can create a single copy of
18:08 - the static variable and share it among
18:10 - all the instances of that class okay and
18:14 - the memory allocation for those static
18:16 - variables happens only once when the
18:19 - class is loaded inside your memory
18:21 - okay so enough talking about the
18:23 - theoretical part let's just get into
18:25 - your IDE and code it out
18:29 - okay and along during coding part
18:32 - implementation I will be discussing some
18:34 - variables rules to declare an variable
18:37 - okay so there are some six to seven
18:40 - rules are here which you need to keep in
18:43 - mind while declaring a variable
18:45 - okay so just open your IDE and create
18:48 - one new project and create one new file
18:52 - here and you can create a new file also
18:54 - by clicking here on SRC just right click
18:57 - here new Java class and let's suppose I
19:01 - am giving
19:02 - variable as my name class name
19:07 - variable okay variable dute
19:12 - and hit enter
19:13 - so it will create a new class as you can
19:16 - see let me increase the font size for
19:19 - you so that you can
19:22 - See Clearly
19:26 - okay I hope it is visible
19:28 - now and let me create one main method
19:33 - so one one added advantage of using this
19:36 - ID is is you can you don't have to write
19:38 - all those codes like here you if you can
19:41 - if you want to write the main method you
19:43 - can just simply type m a i n Main and
19:46 - hit enter on the keyboard and it will
19:49 - automatically write those main method
19:51 - for you and you can start coding okay so
19:56 - first of all let's see what are those
19:58 - three types of variables that I have
19:59 - told you previously that though the
20:02 - static variable local variable and
20:03 - instance variable and what are what are
20:05 - the difference between all this okay
20:07 - so
20:09 - let's suppose if I create one variable
20:12 - here
20:13 - let me create
20:16 - static
20:17 - int
20:19 - m is equals to 100.
20:22 - okay so for time being I know you can't
20:26 - you don't know the static and in keyword
20:29 - so
20:30 - in upcoming videos we will be covering
20:32 - data types there you can understand just
20:35 - for time being understand this is a
20:37 - variable that is M and I have assigned
20:41 - value as 100 to it okay so you can see
20:45 - here I have declared this variable
20:47 - inside the class but outside the main
20:50 - method so this method this this this
20:53 - type of variables are known as
20:56 - static variables
21:01 - okay
21:03 - and you you can comment write comments
21:05 - in the your Java program by giving the
21:09 - two forward slashes and writing the
21:11 - comment inside it
21:13 - okay so again I inside the class but
21:17 - outside the main method I will be
21:20 - declaring one method
21:22 - okay
21:23 - so
21:25 - return type of my method would be void
21:30 - let's suppose I have created this method
21:33 - and inside this method I will be
21:35 - declaring one variable okay so the
21:38 - variable which I declared named n and I
21:42 - have assigned value to it is 90. okay so
21:45 - these kind of variables which are
21:48 - declared inside a method okay so these
21:52 - are local variables means the scope of
21:55 - these variables are only limited to that
21:58 - method means outside this method from
22:02 - line 4 to 6 this variable is not
22:05 - accessible inside your class
22:09 - okay
22:11 - I will comment it out okay
22:13 - and now the last one is instance
22:16 - variable okay
22:18 - so inside I'll come inside the main
22:20 - method and declare another variable name
22:23 - as
22:24 - int data and I will assign value to it
22:27 - is as 50. okay so these
22:32 - variable are called as instance variable
22:36 - so here you can see
22:39 - what is the depth formal definition of
22:41 - the instance variable a variable
22:42 - declares inside a class but outside the
22:45 - body of the method is called an instance
22:47 - variable
22:48 - okay so you may think uh what is the
22:52 - difference between instance variable and
22:53 - static variables variables because the
22:55 - both the variables are declared outside
22:57 - the method body okay so the only
22:59 - difference is
23:01 - for the static variables you just give
23:05 - keyword as static
23:07 - okay ahead of that the variable which
23:11 - where you have declared it okay so
23:14 - I hope you have cleared idea about what
23:18 - are the variables and what is static
23:19 - local and instance variable
23:22 - so
23:24 - I'll be giving you some basic program of
23:28 - addition of the two numbers okay so
23:31 - let's just get started uh wait I will
23:34 - start from here I will just comment out
23:37 - this line
23:38 - and
23:39 - add the comment as
23:42 - addition
23:45 - of
23:47 - two numbers
23:49 - okay
23:50 - so
23:52 - what uh what are the variables you think
23:54 - we required for addition of the two
23:57 - numbers okay so I need one variable
24:00 - which hold the first value and I did
24:02 - another variable which hold the second
24:04 - value and I need the third variable
24:06 - which hold the addition of those two
24:08 - numbers okay
24:10 - so let's create int a is equals to 10
24:14 - and another variable in B is equals to
24:18 - Let's suppose 20 and another variable
24:21 - third variable which will hold the
24:23 - addition value of A and B I will write a
24:27 - plus b here
24:29 - okay and to print something on the
24:32 - console we just write system dot out dot
24:36 - paint Ln okay so here in this IDE you
24:40 - have also a shortcut to write this you
24:43 - just wrote write s out and hit enter the
24:46 - ID will automatically write system dot
24:50 - out dot println for you and I will be
24:52 - printing C here okay
24:55 - so let me just comment out
24:59 - this part of the code that I don't
25:01 - require okay
25:04 - and I will hit
25:06 - run
25:09 - okay so here you can see my file is
25:12 - getting there and here you can see on
25:14 - Console 30 is printed because the
25:16 - addition of the a that is 10 and B that
25:19 - is 20 is 30 and which is get printed on
25:22 - the console here
25:23 - Okay so uh another another example
25:29 - let's suppose we have you have to
25:31 - subtract those two numbers so simply
25:33 - here you can come here and give B minus
25:38 - a or something a minus B whatever you
25:41 - want and you just click here
25:44 - the code will get executed and here you
25:46 - can see then we sprinted on the console
25:48 - because 20 minus 10 is 10. so this is
25:52 - the basic uh very uh basic Theory and
25:55 - practical implementation of the
25:57 - variables in Java I hope you guys have
26:00 - understood the what are the variables or
26:03 - how it works and how it stores the data
26:06 - okay so in the upcoming video we will be
26:09 - talking about data types
26:12 - in depth okay so thank you guys for
26:15 - watching this video I will see you in
26:16 - the next video
26:17 - we'll be learning about the data types
26:20 - in Java so what are the data types data
26:23 - type specifies the different sizes and
26:25 - values that can be stored in the
26:26 - variable so in the previous video we
26:28 - have learned about the variables so we
26:31 - can here data type is nothing but it
26:33 - declares the which type of the data it's
26:35 - going to store inside the memory okay so
26:37 - here you can see the chart of the
26:39 - different types of data types are there
26:40 - you can pause the video and you can look
26:42 - into this I'll be teaching you it EV
26:45 - each and every type how what type of the
26:47 - data is going to store okay so now
26:51 - moving next it here is here is a chart
26:54 - you can see so in the First Column the
26:57 - name of the data type is there in the
26:58 - default value means if you don't assign
27:00 - the value to the data type what value it
27:02 - gonna store inside it by default okay
27:05 - and here's the default size that how how
27:08 - much memory it will consume if you
27:10 - declare that type of the data type
27:11 - inside your code okay so let's suppose
27:13 - if I declare integer integer variable of
27:17 - data type
27:18 - so the default size it will hold this of
27:21 - four bytes okay so enough talking about
27:23 - the data types we will see in detail in
27:26 - the code in this video okay so let's
27:29 - just talk about the keywords keywords in
27:31 - Java are also known as Reserve words
27:33 - okay the keywords are particular words
27:35 - that act as a key to the code these are
27:39 - the nothing but the predefined words by
27:40 - Java so that you cannot be used as a
27:43 - variable or object name or a class name
27:45 - okay so there are basically uh I think I
27:50 - guess 48 48 keywords rewards Reserve
27:52 - keywords are there in Java which you
27:54 - cannot use either as a variable name
27:57 - object name or the class name I will
27:59 - show in the show you in the code part so
28:02 - enough talking about the theoretical
28:04 - path let's code it
28:05 - I will jump into my IDE
28:08 - IntelliJ IDEA
28:12 - okay
28:14 - stick till the end I will be announcing
28:16 - some
28:17 - new announcement is there for you guys
28:19 - so that you can learn
28:22 - more efficiently in this whole series
28:25 - okay
28:27 - so and I don't want any tip come here
28:31 - click on right click on the SRC
28:34 - click on new and the new Java class
28:37 - so today we are learning data types so I
28:40 - will give this
28:42 - file name as data types okay
28:47 - okay so come inside this declare your
28:50 - main class
28:52 - main method sorry
28:54 - inside main method so let's go and see
28:59 - each data types one by one okay
29:02 - so first of all we will be talking about
29:04 - the Boolean data type okay so Boolean
29:07 - data type is it used to store only two
29:09 - values let me show you
29:11 - okay so for example if I declare
29:16 - Boolean
29:18 - first of all let me increase the font
29:20 - size I don't know how to increase it
29:24 - okay let it be I guess you guys are
29:27 - getting what I am telling time to tell
29:29 - you okay Boolean one
29:31 - is equal to
29:33 - false okay
29:36 - okay and
29:37 - I will do
29:39 - system.out.println and print one okay
29:43 - so if I click here run
29:48 - see guys what will happen
29:51 - let me hide this project
29:54 - okay so you can see false get printed on
29:57 - the console okay so as you can see I
30:00 - have declared one Boolean data type one
30:04 - and variable name is one and I have
30:07 - assign it the value to be false okay so
30:10 - if I write here true and again I click
30:13 - on the Run
30:15 - see it will give it true okay and if I
30:19 - write anything else one two
30:22 - C IntelliJ IDEA is throwing some error
30:25 - let's take it
30:27 - so here it was telling that the one
30:30 - variable that I have that I have
30:32 - declared is a type of Boolean and we I I
30:36 - am trying to store the integer value
30:38 - inside it so that can cannot be
30:41 - happen okay
30:42 - so now I will show you if I declare this
30:47 - one Boolean one and I am trying to print
30:50 - the one okay
30:51 - so here it again I get error variable
30:54 - one might not be have initialized so I
30:58 - have to initialize it whether as false
31:01 - okay or true it's up to you but
31:06 - remember it will going to hold only one
31:08 - two types okay either false or either
31:11 - true
31:13 - okay so next data type is a
31:16 - short data type so short data type is a
31:19 - 16-bit assigned to complement integer
31:22 - and its value lies in between minus 32
31:26 - 768 to 32
31:29 - 767 okay
31:31 - that's the theoretical part I will show
31:33 - you the implementation right away okay
31:36 - short
31:37 - s is equal to let me assign it the value
31:40 - let's suppose ten thousand
31:44 - I guess it is right okay
31:46 - and I will declare another short
31:51 - okay in the variable name is r
31:55 - okay and I will assign it the value of
31:58 - minus 5000.
32:00 - okay
32:02 - and I will simply print s
32:07 - Plus
32:10 - R okay
32:12 - and if I click run
32:17 - see the values are going to be printed
32:19 - on the console so short is the derived
32:22 - which holds
32:23 - these values okay so next is float
32:28 - next come float let me comment this out
32:31 - first
32:33 - yeah let's go so float is nothing but
32:36 - that does when you when you are
32:39 - trying to store the data which is in the
32:42 - point or decimal okay so what I'm trying
32:45 - today let me give you with the example
32:48 - float
32:49 - F1 is equal to
32:53 - 234.50
32:57 - okay
33:00 - uh I guess wait a wait a minute wait a
33:03 - minute
33:05 - float F1
33:07 - and F okay
33:10 - and if I try to print now
33:14 - load F1 okay
33:17 - and if I try to click on run
33:20 - here the float value is 2.5 is going to
33:23 - print it okay so you have to write F
33:25 - value that you are storing the float
33:28 - values inside of float variable okay
33:30 - so this is this is for float and now
33:34 - integer comes okay
33:37 - it's integer is simple straight forward
33:38 - into a is equal to you can assign any
33:42 - value okay let's suppose 250 okay
33:45 - and inside this I will print
33:49 - the variable name a
33:51 - and if I click run
33:54 - now here you can see 250 get printed on
33:56 - this console okay
33:59 - so these are the data types and yet more
34:02 - to come we will learn all those data
34:04 - types when we are going to learn all
34:07 - those data structures Parts Okay so
34:11 - let me get back to the keyword and the
34:13 - keywords are nothing but the reservers
34:15 - you cannot use that words uh to declare
34:18 - any variable name object name and class
34:20 - name inside your code okay
34:22 - so enough talking so in upcoming videos
34:26 - we are going to see one exercise is
34:29 - coming for you guys I expect you guys to
34:32 - answer those exercise and we will be
34:34 - seeing solution for those exercise
34:36 - questions in the upcoming videos okay so
34:39 - the announcement is that I have created
34:41 - one uh repository for you guys and I
34:45 - will be uploading all those PDF
34:46 - resources that I have these are the
34:49 - nodes I will uploading all those nodes
34:51 - inside that repository and the core part
34:53 - this part I'll be uploading all these
34:55 - codes in as of as a file inside this
34:58 - repository you can you guys can access
35:00 - this repository and download the code as
35:02 - well as the PDF part and the link to the
35:06 - repository will be provided in the video
35:08 - description you can access
35:10 - and
35:11 - get the help from it so thank you guys
35:14 - for
35:15 - watching this video I will see in the
35:17 - next one thank you
35:18 - so guys in this video I will be giving
35:20 - you the five coding questions here you
35:23 - can see and I'm expecting that you guys
35:26 - should give it a try and
35:29 - code it out these problem statements so
35:32 - till now if you are following this
35:34 - series I expect that you are what you
35:36 - have watched all those previous videos
35:38 - wherein I'll be talking about the data
35:40 - types and variables with you guys till
35:42 - now so uh in considering that you have
35:45 - watched the previous video I have
35:47 - created this list of five coding
35:50 - questions wherein the only concept that
35:53 - is required is data types and Java
35:55 - variable Java variables for you to solve
35:58 - these coding questions okay not more
36:00 - than this and not any other another
36:02 - concept that I didn't discuss in this
36:06 - series you don't require this okay so I
36:10 - will just give you brief overview of
36:11 - each question uh so that that it's like
36:15 - a hint for you to solve these questions
36:16 - okay so in the first question
36:19 - the question is like that write a Java
36:21 - program to convert the temperature from
36:23 - a Fahrenheit to the Celsius degree
36:25 - okay so it's a basic simple Pro Java
36:29 - code you have to perform and the input
36:31 - is like that you given a
36:33 - temperature that is in Fahrenheit and
36:35 - the expected output from your code is
36:38 - that though that fahrenheit's
36:41 - temperature will get converted into
36:42 - Celsius temperature okay you can search
36:44 - for a search into Google for the
36:46 - conversion formula for that Fahrenheit
36:49 - to Celsius
36:49 - okay and second one is write a Java
36:52 - program to convert minutes into a number
36:54 - of years and days so the here in the
36:58 - input will be the minutes like here you
37:00 - can see three four five six seven eight
37:02 - nine is the minutes that the user will
37:05 - input give input to your code and the
37:07 - expected output is you have to convert
37:10 - those minutes into years and
37:12 - corresponding days okay
37:14 - so next question is write a Java program
37:17 - to compute a body mass index so what is
37:20 - body mass index you can just Google it
37:22 - out like here if I Google body
37:26 - mass index
37:28 - and right formula okay
37:32 - so first
37:34 - you can come you can go any of this
37:37 - website
37:38 - and here you can see
37:41 - I guess yes here you can see the example
37:44 - they are given for example you have your
37:47 - weight is 68 kg height is this much so
37:49 - the calculation is this for calculating
37:51 - the BMI so you can use this formula and
37:54 - solve this problem to calculate the BMI
37:56 - of the of that person so the inputs to
37:59 - this program will be your weight and
38:02 - height and the corresponding BMI will be
38:05 - get printed on the console okay though
38:07 - so next question will be write a Java
38:10 - program to break an integer into
38:12 - sequence of individual digits
38:15 - okay so for this the input will be like
38:19 - like here you can see one two three four
38:21 - five six is given to the given as an
38:23 - input you just have to print the each
38:25 - word of that
38:27 - each digit of that number in a separated
38:30 - way like one then one space then two
38:33 - then one space one three asset like that
38:35 - okay so next moving next the fifth
38:39 - question is write a Java program that
38:40 - accepts the two integer from the user
38:42 - and then prints the sum the difference
38:44 - the product the average the distance the
38:47 - distance in the sense the difference
38:49 - between the integers okay the maximum
38:51 - the maximum means the larger of the two
38:54 - integer and the minimum minimum means a
38:56 - smaller of those two integers okay so
38:58 - for this you have to receive two inputs
39:01 - from the user first input as a first
39:03 - integer and second as a second integer
39:05 - and the expected output is the sum of
39:07 - those uh two numbers the difference
39:09 - between two numbers the product of the
39:11 - two numbers the average of those two
39:13 - numbers and the distance of the two
39:15 - integers and the maximum integer from
39:17 - those two numbers and the minimum
39:19 - integer from those two numbers
39:20 - so I hope you guys got some idea about
39:24 - these five questions give it a try try
39:27 - to solve those five question it will
39:29 - help you to understand those concepts of
39:32 - data types and variable more efficiently
39:34 - and after one or two weeks I'll be
39:38 - making a video in which we will be
39:41 - talking about looking into the comment
39:43 - section of this video this you put some
39:46 - solution of your Co you you put some
39:48 - code of your solution in the comment box
39:51 - of this video and I will be looking to
39:53 - it and okay
39:55 - so in the next video we will be seeing
39:57 - some solution towards this problems
40:00 - before that you should try those these
40:03 - questions and
40:05 - I hope you will try and give it a try
40:08 - and once once again I will be providing
40:10 - this
40:12 - as a PDF this notes there's all this
40:15 - question has a PDF file inside this
40:16 - GitHub repository you can just click
40:19 - here like here I have uploaded already
40:23 - you just this is the fifth video of our
40:25 - Java Series so you can click on the zero
40:27 - five resource and you will be get all
40:29 - those resources in here okay so no
40:32 - worries about that
40:33 - okay I hope you guys have enjoyed this
40:36 - video please give it a try for these
40:38 - questions and I will see you in the next
40:40 - video talking about the solution of
40:42 - these questions
40:43 - in this video we will be talking about
40:46 - the solution of the exercise one
40:50 - okay that I given to you in those
40:52 - previous videos
40:54 - okay so in this video I'll be giving you
40:57 - the solution of the problem number one
40:59 - two and three and in the next video I'll
41:03 - be talking about the solution for the
41:04 - fourth and fifth because if I make all
41:07 - those five solution in one video the
41:08 - video will get lengthy and you guys will
41:11 - not watch all these videos Okay so let's
41:13 - just get started so what is the first
41:16 - first problem statement says write a
41:18 - Java program to convert the temperature
41:20 - from Fahrenheit to the Celsius degree
41:23 - okay
41:24 - so let me get into my IDE
41:28 - right click here
41:31 - create a Java class
41:35 - and I'll be giving
41:37 - class name as the cell CS
41:41 - convert
41:45 - okay
41:47 - let me rename this because class name
41:50 - should always start with capital let
41:54 - okay
41:56 - so inside this let me create my main
41:59 - method
42:01 - okay let me just
42:04 - increase the font size so that it will
42:06 - visible to you guys also
42:09 - okay
42:11 - so first thing first
42:14 - to solve this problem you guys first
42:17 - know the formula of the conversion from
42:20 - Fahrenheit to the Celsius so formula is
42:22 - like this let's suppose C is the
42:26 - variable which holds this actual Celsius
42:29 - and which is equals to the
42:33 - 5
42:34 - into
42:36 - f means the Fahrenheit temperature
42:38 - minus 32
42:42 - then it's divided by 9.
42:45 - okay so this is our conversion formula
42:48 - to convert the temperature from
42:49 - Fahrenheit to Celsius okay
42:52 - so here so first I will import some
42:55 - classes
42:57 - from a package name
42:59 - java.util
43:02 - so to import it this you have to write
43:05 - import
43:06 - Java Dot util
43:10 - dot scanner
43:13 - so I know at this point you guys didn't
43:16 - know what is this import Java util.star
43:19 - bear with me I will tell you or each and
43:22 - everything in this code itself okay so
43:27 - at first I will create one
43:30 - object of that scanner class let me
43:33 - create like import let me call it as
43:36 - input because we are receiving the input
43:39 - from the user okay
43:41 - scanner and then system dot in
43:47 - so first let me explain you what I did
43:50 - here okay so in the first line import
43:53 - java.ital.scanner I have imported the
43:55 - scanner class from the util package of
43:58 - the okay main Java package util package
44:00 - is there and scanner class is there
44:02 - inside the util package okay what does
44:04 - the scanner class scanner class do
44:06 - scanner will
44:07 - just gives get the input from the user
44:11 - and give it to the program okay so to
44:13 - use that scanner class you have to
44:15 - create one object of that class okay so
44:18 - here I have declared the car scanner and
44:21 - input input is the object name for that
44:24 - scanner class and I have initialized
44:26 - that
44:27 - object here okay
44:28 - simply and system dot in represent you
44:31 - have to get the input from the system
44:34 - that means user will get type those
44:36 - input and hit enter and that input will
44:38 - pass to the program okay
44:40 - so next I will just print
44:44 - okay let me print so first we have to
44:48 - receive that Fahrenheit temperature from
44:50 - the user okay so I will just try it
44:53 - input uh
44:58 - degree in
45:01 - fah fa is just a short form for the
45:04 - fahrenheit that I I have given okay
45:07 - so this line will get printed on the
45:10 - screen so next at this point line number
45:12 - eight we have to receive the input from
45:14 - the user that is the Fahrenheit
45:15 - temperature okay for that I will be
45:18 - using double data type okay so and I
45:21 - hope you know the double data type that
45:22 - I have discussed in the data type video
45:24 - and I will call that
45:27 - I will create a variable name fah okay
45:31 - and at the next line I have assign it
45:34 - the value add input Dot
45:37 - next
45:40 - double okay
45:43 - okay so in line number eight we have
45:46 - create one fah variable and assign it
45:48 - the value that the input dot next Double
45:51 - and what next Double method will do just
45:54 - simply it will take the input from the
45:56 - user that that is in the form of double
45:58 - and store it inside the variable FH that
46:01 - is the Fahrenheit Fahrenheit temperature
46:03 - that we will receiving from the user
46:05 - okay
46:06 - so next we have to require we have
46:10 - required another variable which will
46:13 - store our Celsius temperature okay
46:17 - Celsius temperature
46:19 - okay and the formula that I have given
46:22 - here in the line number five you have
46:24 - you just you just have to create or
46:27 - just write it down here like this
46:31 - same here
46:32 - 5
46:34 - okay let's show 5 into
46:37 - again when brackets are there and the f
46:41 - means the fahrenheit so we have received
46:43 - that Fahrenheit in this variable okay so
46:46 - I will write fah
46:50 - minus
46:52 - 32.0 that is our formula you can see in
46:56 - the line number five also and after
46:59 - those two circular bracket I will divide
47:02 - it the result of it by 9.0 okay and at
47:07 - the end I'll add the semicolon
47:09 - okay so at this point of our code we
47:13 - have taken the input from the user that
47:14 - is in the fahrenheit and we have stored
47:16 - inside the fah and when and we have
47:19 - created the Celsius variable wherein
47:21 - we'll be converting those Fahrenheit
47:22 - temperature to the Celsius and storing
47:24 - in the range Celsius variable okay so at
47:27 - last I have to just print that Celsius
47:30 - variable to the user okay
47:33 - so for the printing
47:35 - first let me get that Fahrenheit
47:38 - temperature
47:39 - and I will be concatenating it with this
47:43 - okay so let let me first type it out
47:46 - then I will tell you what is
47:48 - concatenation in Java
47:51 - okay
47:52 - so here
47:54 - I will write
47:57 - degree
47:59 - FH stands for Fahrenheit
48:04 - is
48:07 - equal to
48:11 - okay
48:13 - okay
48:14 - it's equal to Celsius I guess yes
48:18 - Celsius
48:20 - then again one
48:23 - okay Celsius
48:26 - in Celsius
48:29 - let me just
48:32 - decrease the font size so that you can
48:34 - see in one window
48:36 - Celsius okay
48:38 - so what in this line is we'll be doing
48:40 - is first it will be printing fah value
48:43 - FH value that user will give us give us
48:45 - one space is there to concatenate those
48:48 - two strings we use the string
48:52 - concatenation which is plus where plus
48:54 - operator is there you can just write the
48:56 - plus and the one blank space is there
48:59 - right in this case let me just explain
49:02 - you
49:03 - when I run the code okay I will explain
49:06 - you okay
49:07 - so I guess this is what we have to
49:10 - achieve in this code let me just click
49:12 - on run
49:19 - so here it it was saying that input a
49:23 - degree in Fahrenheit so I just go here
49:26 - and what is the input 2 and 2 is there
49:28 - okay two one two
49:32 - so here you can see
49:34 - FH 212.0 is get printed one space is
49:38 - there after that degree Fahrenheit is
49:41 - equal to
49:42 - 100.00 in Celsius when space should be
49:45 - there you can just give it a space and
49:48 - that will get rectified here okay so
49:50 - we'll see 100.0 is the
49:54 - actual expected out output of that code
49:57 - and we are getting that same here okay
49:59 - so I hope you have also implemented this
50:03 - same way that I have done here
50:06 - okay so moving forward
50:09 - for the second code we have to write a
50:12 - Java program to convert the minutes into
50:14 - a number of years and the dates
50:17 - okay
50:18 - for this let me just create another
50:21 - class
50:24 - so let me just call it as
50:27 - so what we have to do actually convert
50:30 - the year and days okay
50:32 - here
50:36 - here and
50:39 - dates
50:42 - sorry guys
50:45 - okay let me just increase the font size
50:50 - okay
50:51 - and I will write the main method here
50:53 - okay
50:56 - so we have to convert minutes into
50:59 - number of years and equivalent days okay
51:02 - so here is the minute okay
51:04 - so for this
51:06 - again we we want we have to take one
51:09 - input from the user that is in the form
51:10 - of the minute okay
51:13 - for that I have told you which package
51:16 - to import
51:17 - import
51:19 - Java Dot
51:22 - YouTube
51:24 - Dot
51:26 - scanner
51:28 - okay
51:30 - so first of all let me just create one
51:32 - scanner variable
51:35 - scanner sorry object of that scanner
51:37 - class not variable
51:40 - import
51:42 - news scanner
51:46 - system dot in
51:49 - okay
51:51 - so now we have to take one input from
51:54 - the user that is minutes okay so I will
51:57 - create one double variable
52:00 - and name it as
52:03 - minutes
52:05 - in here
52:07 - you can name it whatever you want but
52:11 - name
52:13 - like that okay
52:14 - according to you
52:16 - so minutes in here I will assign the
52:19 - value of that 60
52:22 - into
52:23 - 24
52:25 - into
52:26 - 365.
52:28 - okay
52:31 - now so in the next step
52:33 - I will be
52:35 - printing
52:37 - one string one line that is input the
52:41 - number of minutes
52:43 - I'll be getting those input from the
52:45 - user at this line
52:47 - and put the number
52:51 - of minutes okay
52:56 - let me go into another line so here we
53:00 - have to take the input actual input that
53:01 - is user gonna give us and I'll be
53:04 - storing that inside a variable called
53:06 - Main
53:08 - okay so I I guess all of you know how to
53:12 - take input
53:14 - from the user
53:16 - as we discussed in the last
53:18 - problem statement
53:22 - okay
53:23 - so after receiving the input from the
53:26 - user I have to generate the number of
53:29 - years that is equivalent to that minute
53:31 - and with whatever days that are left
53:34 - after converting that years I have to
53:36 - convert those into days also okay so
53:39 - I'll be creating one long
53:42 - take long variable is there
53:45 - okay I will name it as
53:50 - long years okay so in that I will be
53:53 - giving
53:54 - Min means the minutes that user have
53:58 - input
54:00 - okay that is going to divide it by
54:03 - minutes in the year
54:06 - okay
54:07 - so at this line number nine years are
54:10 - going to stored in that
54:12 - variable okay
54:15 - so uh then we have to store the days
54:18 - that are equivalent
54:21 - that the day minutes are left okay
54:23 - okay so in here I have to write int
54:28 - and inside that I can write the whatever
54:32 - the minutes are left divided by 60
54:36 - and again divided by 24
54:40 - mod
54:42 - 365. okay
54:47 - so here at last I will just print out
54:50 - all those information that I have
54:52 - calculated over here
54:54 - okay
54:55 - I will write int
54:59 - Min means the minutes that are using
55:02 - user in going to get give the give us
55:05 - okay
55:06 - that is the minutes
55:10 - is
55:13 - approximately
55:16 - I will concatenate this
55:20 - with the ears okay here's
55:25 - again
55:29 - ears and
55:35 - okay
55:36 - yeah after the years I have to print
55:38 - those days also
55:40 - let me just print those days and after
55:43 - that
55:44 - I will concatenate with it
55:47 - equivalent dates okay
55:50 - I hope this is the answer okay
55:54 - just
55:57 - Checkmate okay so it is asking for the
56:00 - minutes so minutes are three four five
56:03 - six seven eight nine okay
56:06 - let me give this input three four five
56:09 - six seven eight nine
56:10 - if I hit enter it will say
56:14 - 3456789 minutes is approximately six
56:17 - years and 210 days so that is the
56:20 - expected output here you can see okay
56:23 - so I hope you have understood the second
56:25 - question also so just quickly we will
56:28 - move to the third question what is the
56:30 - question let me check write a Java
56:32 - program to compute a body mass index of
56:35 - the user okay
56:39 - this is another simple
56:42 - question is there we I will just name
56:45 - the class as BMI
56:49 - calculate okay hit enter
56:53 - let me increase the font size
56:57 - okay
56:59 - main method is there
57:01 - and inside that
57:05 - let me just import
57:07 - scanner okay
57:09 - because we have to receive the weight
57:12 - and height of the user okay
57:17 - java.util dot scanner
57:21 - okay
57:23 - and again I have to create one variable
57:27 - so not variable object
57:31 - input is equal to
57:34 - news
57:36 - scanner
57:38 - system dot in
57:42 - okay till here I hope you either
57:44 - understood so
57:46 - now I will first of all
57:50 - get the weight and height from the user
57:53 - okay
57:54 - so for that let me just print on the
57:57 - console
57:59 - enter your
58:01 - sorry
58:02 - enter your weight
58:06 - and I'll be receiving it in pounds
58:10 - you can take any
58:13 - convention
58:14 - just the formula will change to
58:17 - calculate the BMI okay double
58:20 - weight variable I will declare and store
58:23 - that weight inside that weight variable
58:25 - and to get the input from the user I
58:29 - guess you know what to write
58:32 - down put dot
58:34 - next Double
58:37 - okay now we have to receive the height
58:39 - of the user
58:41 - so again I will shout and
58:44 - enter
58:47 - your
58:49 - height
58:50 - in inches I will receive the height in
58:54 - inches from the user okay
58:56 - and I will be storing that in the double
58:59 - variable
59:00 - name inches which is will be equal to
59:06 - input
59:08 - Dot
59:10 - next
59:13 - so now when formula is there to
59:15 - calculate the BMI so the formula is let
59:20 - me just explain you
59:21 - so I will hold all these BMI inside one
59:26 - double variable named BMI
59:30 - okay
59:32 - and inside this the formula is
59:36 - weight
59:38 - okay
59:40 - into
59:42 - zero point
59:45 - four
59:46 - three sorry four five three
59:50 - five I will just write first four
59:54 - points only after the decimal okay
59:59 - divided by
60:01 - inches inches means the height of the
60:03 - user okay
60:05 - multiplied by zero point
60:09 - zero
60:10 - two five four
60:12 - okay and again it will get multiplied
60:17 - by the inches
60:19 - and again multiplied with zero point
60:24 - 0
60:25 - two five four
60:27 - okay after this I will end that line
60:31 - so at this point my bmis get calculated
60:34 - using the weight and height of the user
60:37 - and it will get stored inside this BMI
60:40 - variable so I I will just simply print
60:44 - that BMI in on the console that is
60:49 - your
60:51 - BMI
60:53 - will be
60:55 - I hope you know how to concatenate two
60:58 - strings okay
61:01 - as we have discussed
61:04 - okay
61:06 - I hope the code will get run
61:09 - okay so it will asking for the weight
61:13 - let me get the sample input 4 5 2 is the
61:17 - weight okay
61:18 - four five two is the weight and what is
61:22 - the height of the user that is 72 inches
61:26 - okay so okay here you can see the BMI
61:28 - for that user having
61:30 - 4.452 weight and 72 inches height will
61:33 - be 61.2891
61:36 - okay
61:38 - so I hope first three questions you
61:41 - understood and you have
61:43 - you have give it a try to solve by your
61:46 - own so in the next video we'll be
61:49 - talking about the solution for the
61:51 - fourth and fifth question okay
61:53 - so thank you thank you for watching this
61:55 - video I will see you in the next one
61:56 - hello and welcome back to the solution
61:58 - to exercise one part two video so in
62:02 - this previous part we have discussed
62:04 - about problem number one two and three
62:06 - and we have also seen the solution to it
62:09 - so in this video we will be discussing
62:11 - the solution of the question number four
62:12 - and question number five okay so let's
62:15 - just get started
62:17 - let me just
62:18 - Okay so what is the problem number four
62:22 - says write a Java program to break an
62:24 - integer into a sequence of individual
62:26 - digits okay so the test data is one two
62:29 - three four five six and the output
62:31 - expected output will be once then space
62:33 - then two then space like that in every
62:36 - digit we have to give one space okay
62:40 - so to achieve this there is
62:43 - multiple value in in which you can
62:45 - achieve this okay so as of now I I
62:49 - assume that you you are a new beginner
62:51 - and you have watched till my past videos
62:54 - and you don't know the concept of like
62:55 - arrays and strings yet so we will
62:59 - Implement those in this
63:01 - videos using the concept that I have
63:04 - taught you till now okay so let me just
63:07 - create one Java class okay so let me
63:09 - just give you the name to the Java class
63:12 - as
63:15 - give
63:18 - okay
63:21 - give space
63:22 - okay
63:24 - and I will increase the font size and I
63:28 - will import
63:29 - get that main method in my code
63:33 - so in this
63:35 - problem also we required one input from
63:38 - the user so as of you know we have to
63:41 - import
63:44 - Java
63:46 - dot util
63:49 - dots scanner
63:52 - okay
63:53 - and I have to create one object of that
63:55 - scanner class I will name it as import
64:00 - ant and I will name is news scanner
64:04 - system.in because we are receiving the
64:06 - input from this system
64:08 - okay
64:10 - so first of all I will
64:13 - print one line
64:15 - where I'll I'll be asking the user for
64:19 - the six non-negative digits okay
64:23 - enter six
64:27 - non
64:30 - okay
64:31 - negative
64:36 - digits
64:37 - okay
64:41 - and I will be storing that inside int
64:45 - very variable named
64:48 - input
64:51 - okay import
64:53 - let me just create input number so that
64:56 - you will
64:57 - not get confused between this variable
64:59 - and this input okay
65:02 - and I will calling input Dot
65:07 - next int
65:09 - so as of now we have received the input
65:12 - from the user and I will I have stored
65:14 - that inside input number variable okay
65:17 - so next step I have to
65:21 - okay so this is the step Where We Are in
65:24 - N1
65:27 - is equals to
65:29 - input
65:31 - divided by
65:33 - one
65:35 - one two three four five six
65:40 - mod 10.
65:42 - okay I know you are not getting what I
65:46 - have written here
65:48 - just bear with me
65:51 - I will tell you what I have done here
65:54 - okay so I will just copy it out
65:58 - print it
65:59 - for five times okay one
66:02 - two three four five and each time my
66:07 - variable name should be different here
66:10 - N2 here N3
66:12 - and four
66:14 - and five and then six and each time I
66:18 - will
66:19 - decrease the number of zeros in this
66:23 - okay
66:24 - so at first I have given zeros as one
66:28 - two three four five five time I have to
66:32 - give sorry I have given the sixth time
66:35 - so here I let me check one two three
66:37 - four five if it's five and then next
66:40 - time I have to give it
66:41 - it's four zeros one two three four and
66:45 - again next time I have to decrease one
66:47 - zero that is three zero should be there
66:50 - and next time there should be
66:53 - two zeros and in again the next time
66:57 - there should be
66:59 - one zero and at last
67:02 - there will be no modular operation only
67:05 - 10 divided by 10 will be there
67:07 - okay so what I have done here is I have
67:11 - taken the input number from the user and
67:14 - I have divided it by this okay so if if
67:19 - you go on to the Google
67:21 - and search for
67:24 - calculator okay
67:28 - let me just go and search for online
67:32 - calculator
67:34 - okay
67:36 - so what we have done here is we have
67:38 - taken that number so in our case the
67:42 - number is one two three four five six
67:44 - okay so I will just one two three four
67:47 - five six and I have to divide it with
67:50 - this okay
67:51 - so what is that again one two three four
67:56 - five should be there okay so one two
68:00 - three four five with Mod ten
68:04 - okay
68:05 - so if I do this my answer would be so
68:08 - this is the standard calculator so you
68:10 - have to first Define that more in mod
68:14 - operation inside the brackets so that
68:16 - the mod operation get executed first and
68:18 - the result of the mod operation mod
68:20 - operation will be given to the this
68:23 - entire operation where the result will
68:25 - get divided by the input number so here
68:28 - what we are getting is I will comment it
68:30 - out
68:32 - sorry
68:33 - okay I will write one comment here we
68:36 - are actually getting the first digit of
68:38 - the number okay so here we can see where
68:41 - our input is one two three four five six
68:43 - okay so at this line line number eight
68:45 - we are the result of this operation
68:48 - which gets stored inside the N1 is one
68:50 - like that similarly for the second two
68:54 - is going to store for third T is going
68:57 - to store and similarly for fourth four
69:00 - is going to store and five
69:04 - 5 is going to store and inside this
69:07 - 6 is going to you can perform this mod
69:09 - operation inside the calculator
69:11 - but do one thing while performing you
69:14 - just have to put these operators inside
69:17 - a
69:18 - circular basis so that this operation
69:21 - will get performed first and the second
69:22 - operation will be input number divided
69:24 - by that operation result of the
69:26 - operation first okay
69:28 - okay so after this I just have to print
69:32 - those N1 into N3 and for N5 and 6 by
69:35 - giving one simply space inside inside
69:38 - inside it okay
69:40 - I will shout
69:42 - one and one okay so after N1 I have to
69:45 - give one space that is our expected
69:47 - output in the way we want
69:50 - okay so then next N2 will be great
69:53 - printed again similarly and three will
69:55 - be get printed on the console again then
69:58 - plus will be there and 4 will get
70:00 - printed
70:01 - again
70:03 - n of 5 will be get printed
70:07 - and at last and six will get printed
70:11 - okay so I hope this code will run let's
70:16 - see if it get run
70:19 - all right it is asking for the input one
70:22 - two three four five six let me give this
70:23 - input hit enter
70:26 - so here guys you can see
70:30 - the we are getting one two three four
70:33 - five and after that we are not getting
70:36 - six we are getting one two three four
70:37 - five why so because I have done one
70:40 - mistake here as you can guys see input
70:42 - number divided by 10 okay so if I had do
70:46 - this divided by 10 the number that I
70:48 - will get is one two three four five
70:50 - because divided by 10 will shift that
70:52 - number from back side okay so here I
70:55 - have done one mistake I just have to do
70:58 - instead of dividing I have to just give
71:00 - mod okay
71:02 - errors are necessary in your code so
71:05 - that you can learn from it okay
71:09 - now it's working one two three four five
71:11 - six as expected output let me just give
71:14 - you another input through this code
71:16 - let's suppose one four seven four five
71:18 - six
71:20 - okay it it's working one four seven two
71:23 - five eight once spaces are there
71:25 - so okay I hope you have understood this
71:29 - fourth question
71:30 - there are more ways to efficiently write
71:33 - this code we'll be talking that after we
71:36 - once we learn string and arrays in Java
71:39 - okay
71:40 - so fifth question is little bit long
71:43 - okay let me write it read it for you
71:47 - okay write a Java program that accept
71:49 - two integer from the user and then
71:51 - prints the sum and difference the
71:52 - product the average the distance the
71:55 - maximum and the minimum from those two
71:57 - numbers so we you are here we you have
72:00 - to perform a lot of operations
72:03 - on those two numbers okay
72:06 - just quickly go into your editor
72:09 - click on the Java class and I will give
72:12 - here
72:13 - since we are performing multiple
72:15 - operation I will give here multiple Ops
72:19 - multiple Ops okay
72:21 - and let me increase the font size also
72:24 - let me get my main method inside here
72:27 - anyway since we are giving getting input
72:30 - form the user I will import
72:34 - Java Dot
72:36 - util Dot
72:38 - scanner
72:40 - okay
72:42 - so now I have to
72:44 - create one object of that scanner class
72:48 - input you know what let me give you
72:52 - another object name this time
72:54 - okay
72:57 - scanner
72:59 - system dot in
73:02 - okay and now I have to get two variables
73:06 - from the sorry two not variables two
73:09 - digit
73:10 - from the number to numbers okay
73:13 - so I will just
73:16 - out here and then ask for the user to
73:19 - enter
73:20 - the first
73:26 - number
73:29 - okay after this I will store that first
73:32 - number inside one variable
73:36 - called first int
73:41 - okay so again SC dot to get receive the
73:45 - input
73:46 - in the integer format we write next in
73:50 - okay so I will copy just this because
73:54 - I will not write that second type
73:59 - here we can write enter the second
74:02 - number and I will give it
74:04 - name as
74:08 - second end okay
74:10 - so at this point we have received info
74:12 - from the user okay so I have to perform
74:16 - operations okay so first operation that
74:19 - we are performing here is
74:21 - what is it sum of two integers is 30. so
74:24 - we have to perform addition operation
74:26 - okay
74:27 - so I will just simply Shout
74:32 - some
74:34 - will be
74:36 - and I have to store that sum means here
74:39 - okay
74:40 - so so for that sum
74:45 - okay so let me just create one variable
74:47 - here
74:49 - which will hold that sum okay
74:53 - some
74:55 - so for that sum I have to write first in
75:00 - the second it so this variable will hold
75:03 - that value of those addition of the two
75:06 - numbers and I will just concat this line
75:10 - with it
75:12 - okay
75:13 - so first operation we have done
75:16 - second operation that we have to perform
75:18 - is difference of the two integers okay
75:20 - so I have to perform
75:22 - minus subtraction okay
75:26 - and
75:28 - in Subs substance subtraction you can
75:31 - give any name to that variable okay
75:34 - until an endless it should not be a
75:37 - reserved keyword which is which is in
75:39 - Java okay which we have discussed in
75:43 - past videos I hope you guys are watching
75:46 - okay
75:47 - here
75:51 - difference will be
75:56 - Okay so
75:58 - difference will be
76:00 - [Music]
76:04 - so difference will be I will contact
76:07 - with
76:09 - Subs okay
76:11 - so the third option operation that we
76:14 - have to provide is product of the twin
76:16 - teachers okay
76:18 - sorry product of this 20 and I will hold
76:21 - that inside
76:23 - one variable name product
76:26 - so for the product we have to multiply
76:30 - those two numbers
76:33 - first hint
76:35 - multiplied by
76:37 - secondhand
76:38 - and again I will just copy it out
76:44 - okay
76:48 - product will be
76:51 - product
76:53 - okay
76:55 - so next operation that we have to Prof
76:58 - perform is average of the two integers
77:03 - okay so for the average here
77:07 - we can
77:09 - do one thing sorry for the interruption
77:13 - okay for the average we can perform
77:17 - addition of those two divided by two so
77:20 - I will declare one variable name in
77:24 - teacher of type in name AVG that will
77:28 - hold my average
77:29 - and in this I will perform
77:32 - first End plus
77:35 - second end divided by 2 so my average
77:39 - will get stored inside the variable AVG
77:41 - and I will just print
77:46 - average
77:48 - will be
77:49 - avt
77:52 - so from here I will not performing this
77:56 - distance Max minimum you guys can do it
78:00 - by your own I have I have shown you the
78:03 - first four operation you can perform all
78:05 - those operation here also okay so let me
78:08 - just run this code okay
78:11 - you should try
78:13 - so let me give the sample input here
78:16 - which is given 25 and 5 okay so first
78:19 - number is 25 and the second number is 5
78:21 - so here you can see 25 plus 5 is 30 25
78:25 - minus 5 is uh sorry
78:29 - oh
78:31 - I have given minus okay
78:34 - the difference I will
78:36 - run it again
78:40 - 25
78:42 - five and then now he here you can see 25
78:46 - plus 5 is 30 25 minus 5 is 20 25 into 5
78:50 - is 125 and 25 plus 5 is 30 times 30
78:54 - divided by 2 is 15 which is average of
78:57 - those two numbers
78:59 - okay
79:00 - so I hope you have understood these five
79:05 - Pro X5 coding questions and you have
79:07 - tried also by yourself I hope you get it
79:12 - so thank you for watching this video we
79:14 - will be covering
79:15 - another Concept in the next video okay
79:17 - so thank you thank you
79:19 - okay and welcome back guys to the
79:21 - another video of the Java tutorial
79:23 - series wherein today we are be learning
79:26 - about operators and its precedencies
79:29 - okay so first of all what is operators
79:32 - in Java operators is a symbol that is
79:34 - used to perform operations for example
79:37 - as we have discussed in like earlier
79:39 - videos exercise videos we have performed
79:41 - operations like addition minus
79:43 - subtraction division okay
79:46 - so there are different types of
79:47 - operators in Java and here I have
79:49 - mentioned all those types urinary
79:51 - urinary operators arithmetic operator
79:54 - shift operator relational operator
79:56 - bitwise logical ternary
79:59 - and assignment operators are there uh
80:01 - don't worry we will be doing some code
80:04 - part uh to understand this all operators
80:07 - wherein I will be teaching you about
80:09 - these operators so let's go ahead and
80:11 - learn about the Precedence of these
80:14 - operators in Java so I have shown you
80:16 - the highest to lowest precedence
80:18 - there is another one is the lowest to
80:20 - highest that is where just reverse of
80:22 - that so first of all the Precedence this
80:25 - column will represent the represent the
80:27 - Precedence this uh this is the operator
80:29 - which have which are included in that
80:31 - precedence this is the type of operators
80:33 - and this is the associativity
80:35 - associativity is another concept we will
80:38 - learn in the later videos of this series
80:40 - okay so here you can see operator first
80:44 - software bracket square bracket and
80:46 - are having the highest presidents and up
80:49 - to that the president presidents get
80:52 - precedent level get lower lower lower
80:54 - and at large the assignment operators
80:57 - addition subtraction multiplication
80:59 - operations are there
81:00 - uh motivation assignment operator there
81:03 - which has the lowest operated residence
81:05 - in Java okay so let's understand all
81:09 - this using
81:11 - uh code okay
81:14 - I will just simply create one class name
81:18 - as
81:20 - operators
81:23 - okay let me increase the font size
81:28 - and I will include my main method
81:33 - uh so I required
81:37 - to import scanner class as well because
81:40 - I will be receiving the input from the
81:43 - user in this code
81:45 - Java Dot
81:47 - util
81:50 - Dot
81:51 - scanner okay
81:54 - so here I'll create one scanner object
81:59 - scanner
82:01 - and my name of the object is SC
82:04 - new scanner
82:07 - system Dot
82:10 - okay so now first let me comment
82:14 - it out we'll be learning about unary
82:17 - operator
82:19 - urinary
82:23 - Ops let me like write it like this okay
82:25 - so what are unitary operators Unity
82:28 - operators require only one operand okay
82:31 - and the previous operation that we can
82:33 - perform in this like incrementing
82:36 - decrementing value by one
82:38 - and inverting the value of a Boolean
82:40 - okay let me tell you what I
82:43 - the side right now okay so let me create
82:47 - one variable name as X and I will assign
82:49 - value it as 10 okay and if I shout it
82:55 - like this X plus plus okay
82:59 - now if I click on run
83:02 - the program will get executed and what
83:04 - do you think what will be the output of
83:06 - this code
83:08 - so here you can see the output of the
83:10 - code is 10 okay and now if I print
83:16 - again I will write once out and now I am
83:21 - printing plus plus X okay
83:25 - and if I just comment it out the first
83:28 - line and if I hit
83:31 - run now you can see 11 get printed okay
83:34 - so what is the plus plus operated uh
83:37 - does it will increment the value of that
83:39 - integer by one okay so here at first
83:43 - line line number seven we are
83:45 - incrementing the value of x but after
83:48 - printing it okay if we just come here we
83:51 - print the X and increment the value of
83:53 - the X by 1. and in the second line we
83:56 - are just incrementing the value first
83:58 - and then printing that's why 11 get
84:00 - printed and in the second seventh line
84:02 - the 7 10 in 10 will get printed okay so
84:05 - like this unit Unity operators work
84:08 - and one more thing guys I will provide
84:10 - providing some resource links wherein
84:12 - you can go and check out all the
84:15 - operation
84:16 - of these operators I will be giving you
84:19 - some example in this video you can go
84:21 - there and check check it out and perform
84:24 - some operations
84:25 - okay uh another thing is that
84:30 - an arithmetic operators
84:33 - okay
84:35 - arithmetic Ops
84:38 - so in this arithmetic operation I used
84:41 - to perform the addition subtraction
84:42 - multiplication and division
84:44 - like operations okay so I don't think I
84:48 - have to tell you guys
84:50 - something here I let me just give you an
84:55 - example in a is equal to 10 in it B is
84:59 - equal to 20 and if I just
85:02 - South
85:04 - a plus b okay plus is the
85:08 - addition okay and if I just comment it
85:11 - out this part of the code so that on the
85:15 - arithmetic operator will get executed in
85:17 - this code okay so now you can see 30 is
85:19 - get printed on the screen because 20
85:21 - plus 10 is 30 okay like that
85:24 - multiplication division and
85:26 - uh subtraction is also there in this
85:29 - earth arithmetic operators okay so next
85:32 - comes left shift operators
85:35 - so let me give one
85:38 - comment here so that you can
85:40 - differentiate between all those
85:42 - operators and I will be providing this
85:45 - code inside
85:46 - my GitHub repository which link will be
85:50 - given to you in this video description
85:53 - okay so let's left shift operators what
85:56 - it does let me just give you one example
85:58 - okay
85:59 - I will do 10
86:02 - less than less than two
86:04 - it's not less than actually
86:06 - and if I just
86:09 - comment it out
86:11 - so that only left chip operators will
86:13 - get executed
86:15 - and you know you are seeing 40s get
86:18 - printing or printed out the screen so
86:20 - what actually
86:22 - happening behind the scene is Will right
86:24 - here okay so 10
86:28 - is get into
86:31 - where to
86:34 - cap power 2 okay
86:37 - so what will be the output for this this
86:40 - 10
86:41 - into 4
86:43 - and this is
86:45 - 40. so here you can see uh if you write
86:48 - 10 less than less than 2 actually what
86:51 - is happening 10 into 2 to the power 2 2
86:54 - to the power 2 is 4 and 10 into 4 is 40
86:56 - okay like that left shift operator swaps
87:00 - and similarly the right shift operators
87:03 - are also working okay so let me just
87:07 - right here itself
87:11 - I will just
87:15 - comment it out you know what
87:18 - let me write separately
87:22 - right
87:25 - Ops okay
87:28 - and I will just
87:30 - copy this and print it here and instead
87:34 - of doing this I will perform the right
87:37 - shift operator
87:39 - okay so what actually done here here you
87:42 - can see
87:43 - 10
87:44 - is getting divided now not multiply by 2
87:49 - to the power
87:50 - 2. so this operation will get
87:52 - performance 10
87:54 - will get divided by four
87:57 - and which is you know equals to 2.
88:00 - okay
88:04 - so if I run this let me just comment it
88:07 - out
88:08 - so that right shift will execute it
88:12 - near it here you can see two is get
88:14 - printed on the screen Okay so
88:18 - next we have and operator which are
88:22 - logical and and logical
88:26 - here you can see I will just comment it
88:29 - out
88:32 - logical
88:34 - and
88:37 - and
88:40 - bitwise and
88:45 - okay so here let me take one example of
88:49 - integer a which is holding the value 10
88:52 - and teacher B is there which is holding
88:55 - the value 5.
88:58 - 5.
88:59 - and again integers C is there which
89:03 - holding the value let's suppose 20 okay
89:06 - and I will s out
89:10 - a left in b
89:14 - and
89:16 - a less than C
89:21 - okay I will tell you what I have done
89:23 - here let me just write it out first
89:26 - okay and again I will write one more
89:28 - statement a
89:30 - less than b
89:32 - this time I will write only one and
89:35 - a is then C
89:38 - okay and I will comment this line okay
89:41 - let me check ah yes okay
89:43 - so at this line line number 25 what we
89:46 - have doing is we are checking that
89:49 - whether a is less than b and a is less
89:53 - than C so what and operator does if the
89:57 - both statements are true
90:00 - it will return true or here in this case
90:04 - if a is less than b a whether a is less
90:07 - than b
90:08 - no it is not less than b so it will
90:11 - return as false
90:13 - false and whether a is less than C
90:17 - yes it is less than C it will return
90:19 - true
90:21 - so what is this operation will return as
90:24 - false because
90:26 - both are not true and operator requires
90:29 - both the operation to be true if the a
90:32 - if I write here a is greater than b
90:35 - then it will perform that this is this
90:38 - will get true and true and true return
90:40 - true okay but here in our case
90:43 - okay
90:45 - so again in this line we are getting
90:47 - that checking a is less than b again we
90:51 - are getting false here
90:53 - and we are getting the second line as
90:56 - true
90:56 - this operation also return as false okay
91:00 - let me run this and you will see what I
91:03 - have done you
91:05 - see false and false will get printed on
91:07 - this console
91:09 - okay so likewise The Logical and in
91:12 - between and works okay
91:16 - so let's move ahead
91:19 - towards another operator which is called
91:23 - as assignment operator okay so let me
91:26 - just comment it out
91:28 - and in line I will write to that
91:33 - assignment
91:35 - Ops okay
91:38 - so to explain this let me just take one
91:41 - integer a which I will again assign it
91:43 - as random randomly 10. B which way I
91:48 - will assign it as 20
91:50 - and I will write a plus is equals to 4.
91:56 - okay I will tell you what I am doing
91:58 - here B minus is equals to 4.
92:02 - and I will just print out a
92:07 - and I will just print out
92:11 - B
92:12 - okay
92:13 - so first of all I have assigned value 10
92:16 - to a f and 20 value to the B and at this
92:20 - line a plus is equals to 4 it what
92:24 - actually happens here is a is equals to
92:28 - A plus 4 this is the operation that
92:33 - happens here okay so what is the value
92:35 - for that it will hold a is equals to
92:38 - what is previous value of a 10 plus 4 so
92:42 - now the value of a is 14 and similarly
92:45 - here the subsection operation will be
92:48 - get performed whether a is equals to A
92:51 - minus
92:52 - sorry our B is there b is equals to
92:57 - B minus 4. which is equivalent to what
93:02 - is the previous value of the B that is
93:04 - 20
93:05 - and minus 4 20 minus 4 is
93:10 - 16.
93:12 - okay so let me just run this code and
93:15 - you will see 4916 will be get printed on
93:18 - this console okay
93:20 - okay our code is working right 4916 is
93:23 - getting printed on the
93:24 - console okay similarly you can perform
93:27 - here if I write
93:30 - multiplication and
93:34 - here I can
93:36 - again I will perform the same operation
93:38 - but now 20 is multiplied by 4 that is 80
93:41 - it is it is getting printed on the
93:43 - screen also okay
93:45 - so let me just reverse what I have done
93:47 - here okay
93:49 - so these are the some examples of The
93:52 - Operators that there there that they are
93:56 - there in the Java okay so I will be
94:00 - providing the resource Link in the
94:02 - description box and the box and the link
94:05 - to the GitHub repository also where you
94:06 - can access this code and try some
94:10 - playing with this code okay so thank you
94:12 - guys for watching this video I will see
94:14 - you in the next one
94:15 - okay so welcome back guys to another
94:17 - video of the Java tutorial Series so
94:19 - today we are learning strings in Java so
94:23 - in Java string is basically an object
94:25 - that represents the sequence of
94:27 - character values and array of the
94:29 - characters Works same as that of the
94:32 - Java string for for example we will see
94:34 - in the code part so generally string is
94:38 - in sequence of the characters but in
94:40 - Java string is an object that represents
94:42 - a sequence of the characters and it is
94:45 - present inside the java.lang dot string
94:48 - class is used to create a string of the
94:50 - object so you you could ask me how to
94:53 - create a string object so there are
94:55 - basically two two ways where we can
94:57 - create a object for a string so first
95:01 - way is using the string literal and the
95:03 - second way is using the new keyword okay
95:06 - so string literal is created by using
95:09 - the double quotes Okay so let me just
95:12 - give an idea here itself if I create a
95:15 - new text
95:17 - let me decrease some font size so you
95:19 - can see
95:20 - okay so if I create string s that is
95:26 - equals to
95:27 - let's say
95:28 - welcome okay
95:31 - and if I write this okay
95:34 - let me get it here okay
95:38 - and I will again write same text here
95:42 - that is
95:44 - string now I am changing the object name
95:47 - here okay like previously I write yes
95:49 - now I am writing S1 but here also here
95:54 - also I am giving the same string value
95:57 - okay that is welcome
96:01 - okay
96:02 - so here you can see yes I have created
96:06 - S1 I have created and okay and I will
96:09 - create another one
96:12 - let me create it first and I will name
96:15 - it as S2 now object name is S2 but the
96:18 - value
96:19 - here also I have given this same value
96:23 - okay I have created three object of the
96:26 - string ss1 and S2 and but the values
96:29 - which are assigned to those objects are
96:30 - same so inside Java what Java interprets
96:35 - it as this hip memory is there and
96:38 - inside hip memory string constant pull
96:40 - is there and inside that all those
96:43 - strings which are constant are kept here
96:46 - and one stack is there which maintains
96:49 - an Al and it creates one link and it's
96:52 - assigned that value okay so here you can
96:54 - see I have created three object as S1
96:56 - and S2 and but this value is same and
96:59 - which are constant okay so that string
97:01 - is added inside the constant pull
97:03 - welcome is added and S1 and H2 which are
97:06 - having the same value is getting mapped
97:08 - with the with that value okay
97:10 - I hope you guys are getting so here it
97:13 - doesn't creates a new instance okay and
97:15 - this is this is where it makes the Java
97:19 - program more efficient because new
97:21 - objects are created if it is already
97:23 - exist in the constant Port okay
97:27 - so another way is by using the new
97:30 - keyword okay in such cases jvm will
97:33 - create a new string object in normal
97:35 - that is non pull hip memory and the
97:38 - literal welcome will be placed in the
97:40 - string Constable pool the variable s
97:43 - will refer to the object in the hip and
97:45 - non-mem
97:47 - non-pull okay so what I mean I will show
97:49 - in inside the code section so Java class
97:53 - methods is there I will show you that
97:56 - later
97:57 - first I will let me show you
97:59 - how the string actually works in Java
98:01 - okay so let me create one class name
98:06 - not strings
98:13 - Java okay
98:16 - and let me increase the font size
98:20 - okay and inside this
98:24 - I will just
98:26 - get my main method
98:29 - Okay so
98:32 - as we have discussed the first way first
98:35 - you know first definition I will write
98:38 - one
98:39 - array of characters then we'll name it
98:42 - as ch
98:43 - and I will assign
98:45 - value it like this let's suppose hello
98:50 - H is there
98:54 - h e
98:57 - again
99:00 - okay
99:03 - IntelliJ showing my error because I have
99:06 - used those
99:07 - double braces
99:10 - okay let me remove this
99:13 - okay h e
99:17 - l
99:22 - I'm sorry
99:24 - HL
99:26 - Ln oh okay so I have created one array
99:30 - of characters
99:31 - okay I know you guys don't know what is
99:34 - array we will be covering that part also
99:37 - in our upcoming videos
99:38 - so let me create one string
99:41 - okay string yes
99:44 - which is equals to
99:46 - new string
99:49 - and I'll assign the way pass the value
99:51 - to it as CH okay and simply I will
99:57 - print s on the console and now if I
100:00 - click on run
100:03 - here you can see Hello is getting
100:05 - printed okay so first we have characters
100:08 - means single single characters are there
100:10 - like h e l l o and what string does it
100:14 - it can't get all those characters and
100:17 - form one word and store inside the uh
100:21 - object s okay so let's see another
100:28 - example let me just comment it out
100:32 - and I will show you another example
100:34 - where
100:36 - wait a minute I require this line for
100:39 - the another example I will just copy and
100:41 - paste it here
100:42 - okay and I will create another string
100:47 - that is S2
100:50 - news
100:55 - new string
100:59 - CH okay and I will create another string
101:04 - S3
101:07 - and I will assign it the value string
101:11 - but now I am giving the hard-coded value
101:13 - that is let's suppose example okay
101:18 - example
101:19 - so now I'm trying to print that S2
101:26 - and I again I will print that object S3
101:30 - okay
101:31 - and if I
101:33 - click on run
101:35 - now what will happen see he see here
101:38 - hello is getting printed that is a it
101:40 - will concat all those characters all the
101:43 - strings character array and store it
101:46 - inside the object S2 and inside object
101:48 - S3 example is this string which is get
101:51 - stored inside it
101:54 - okay
101:55 - enough talking about the example so in
101:58 - Java there are multiple methods so here
102:01 - you can see a whole bunch of list is
102:03 - here of around 28 methods are there
102:06 - which are declared inside the string
102:09 - class in Java so I will give you one
102:13 - link where you can see the
102:15 - implementation of part of this all these
102:19 - methods I want you to try all playing
102:22 - with this all methods for but first of
102:25 - all let me show you some
102:27 - important ones okay I will show you some
102:30 - important one which are required in our
102:33 - Java code okay
102:36 - so let me just comment it out
102:39 - and here
102:41 - Okay so
102:45 - I'll be giving you the example of
102:48 - string
102:51 - two lower case
102:54 - there is Method inside the string class
102:56 - that's name two lowercase this method
102:59 - Returns the string in the lower case
103:01 - letters okay in another word it converts
103:04 - all this character of the string into
103:06 - the lower case
103:07 - okay let me give you an example so that
103:09 - you can understand
103:10 - better
103:12 - okay so if I create one string name F1
103:16 - I mean I will assign it
103:20 - value as let's suppose
103:25 - okay let me give you the straightforward
103:30 - method S1 is equals to
103:33 - let's suppose I have created h
103:37 - and let my caps lock hey hello
103:40 - world is there okay so here you can see
103:43 - I have created one S1 object and I have
103:45 - stored a string hello world inside it
103:47 - okay
103:49 - so if I try to print that string
103:54 - okay okay let me out okay so if I want
103:57 - to print this I will simply Scout the S1
103:59 - okay that is Simpson dot out Dot println
104:03 - okay so again if I try to print
104:07 - S1 but I will do some modification okay
104:10 - so I will write S1 dot so you can see a
104:14 - whole bunch of methods which are
104:16 - implemented inside the Java are
104:18 - displayed here so we want two lowercase
104:21 - two lowercases here and you will simply
104:23 - put this and if now if I click on run
104:27 - let's see see you can here you can see
104:29 - hello world is the original thing where
104:31 - all the all the alphabets are in capital
104:34 - format okay and if I apply the two
104:38 - lowercase method over it string and then
104:41 - it will convert all those alphabets into
104:44 - the lowercase format and it will print
104:46 - to the con print on the console okay
104:48 - similarly all those methods which are
104:50 - implemented in inside the string class
104:52 - are over here you can go on that website
104:55 - and check it out similarly to lowercase
104:57 - is there and two uppercases there which
104:59 - will convert all those
105:01 - uh strings and alphabet into the
105:04 - uppercases format if if there are any
105:06 - in the in your string similarly trim is
105:09 - there index office there and one more we
105:12 - can use his carat and in length it
105:16 - Returns the string length this is also
105:18 - important method with which come into
105:21 - picture when we are using Java arrays
105:23 - okay we will discuss that and when we
105:26 - try to learn Java arrays okay so enough
105:29 - about enough talking about the strings I
105:32 - hope you get the idea about string what
105:34 - are the string in Java okay thank you
105:37 - for watching this video I will see you
105:39 - in the next one
105:40 - hello and welcome back guys to the
105:42 - another video of the Java tutorial
105:44 - series wherein in this video we will be
105:46 - learning about Java if else statements
105:48 - so today onwards we are starting about
105:51 - the conditional statements in uh Java so
105:54 - conditional statements are nothing but
105:55 - the statements which which get executed
105:57 - if the certain condition match
105:59 - okay so there are basically four types
106:03 - in inside it if statement if else
106:05 - statement if else if ladder and nested
106:08 - if still statements we'll be seeing one
106:10 - after one each other so okay so first
106:13 - Java if is there so in if we declare if
106:18 - and inside if we write some condition if
106:21 - that condition becomes true the code
106:23 - inside that Curly braces will get
106:25 - executed okay so flow of this if
106:28 - statement is run like this so our code
106:31 - gets started and in the first condition
106:34 - gets checked if the condition is false
106:36 - then
106:37 - it if it it will not execute that part
106:41 - of the code and it will get execution is
106:43 - get towards that below that Curly basis
106:46 - and if that condition gets true if code
106:49 - is will get executed okay
106:51 - so uh we will be seeing the code
106:54 - implementation also let us first uh try
106:57 - to understand theoretically what is what
106:59 - are those forced
107:01 - types are actually mean okay so Java if
107:04 - else is there any else there is else
107:06 - condition is also there so if the
107:09 - condition of the if statement is not
107:11 - true that is its false then else
107:14 - condition will be get executed like here
107:16 - if you can see condition if the
107:18 - condition is true the code the code will
107:21 - get executed inside the if
107:23 - if if block and if the condition is
107:25 - false then the code inside the else Port
107:28 - is getting executed here also you can
107:30 - see uh the program flow comes here
107:32 - condition is getting checked if the
107:34 - condition is false then else code will
107:36 - be get executed and execution get uh
107:39 - successfully done and if the condition
107:42 - is getting true then if code is getting
107:44 - executed okay
107:46 - so next comes Java if else if ladder so
107:50 - it's like a ladder okay so here you can
107:53 - see if condition is there if this
107:54 - condition is not getting executed then
107:57 - if else else if is there so condition
108:00 - another condition is getting checked
108:02 - here okay so if condition 2 is true then
108:06 - this part of the lcf is getting executed
108:09 - so again else one one more else if is
108:12 - there that is condition three is there
108:14 - if that condition 3 is getting true then
108:17 - this block will be get executed okay and
108:19 - you can declare as many uh else if
108:22 - condition you want and at the last I
108:25 - have declared one else condition that is
108:27 - you all know that will get executed if
108:30 - all those if and else if are generated
108:35 - as false statements okay so let us try
108:38 - to understand why this tray diagram so
108:40 - condition one is there if it is false
108:42 - condition two uh two will be get checked
108:45 - if again it is false condition uh like
108:47 - that and number of condition that you
108:49 - declare inside the code will get checked
108:51 - and any of these any one of this if it
108:54 - is get true then that corresponding
108:56 - statements or the block of the code will
108:58 - be get executed and the program flow
109:01 - will be get uh continued okay if all
109:04 - those else if and else if get false then
109:08 - the else part will be con executed okay
109:12 - so now nested if uh is another concept
109:15 - inside Java so if condition is there
109:18 - inside if condition another if condition
109:20 - is there so we are checking if inside if
109:23 - okay so let us understand by this
109:26 - small exam or tree diagram is here so
109:29 - first condition is check if that
109:31 - condition is true if good if code is
109:33 - executed okay and inside that another
109:36 - condition is there that is another if if
109:38 - block is there if that condition true if
109:40 - code is there if that condition is gets
109:43 - getting false then a program code is
109:46 - altered to an outs outside if okay
109:49 - so this is the four types of the Java if
109:52 - else so let's move on move on to the IDE
109:55 - and try to implement each one of this
109:57 - okay so here I have created if else name
110:01 - if else class Java class Java file is
110:04 - there okay uh inside which I have
110:07 - implemented all those four types and I
110:09 - will try to explain you each one of it
110:12 - okay so I will comment it out okay uh
110:16 - let's try to understand a normal if
110:18 - statement is there okay I have declared
110:20 - an integer name age uh and assign it to
110:23 - Value as 20 okay and and we are checking
110:26 - the age okay if
110:28 - age is greater than 18 so this is the
110:31 - part which here you can see the
110:34 - condition part is there so this is the
110:36 - condition that is being checked and if
110:38 - this condition returns true then this
110:40 - block of code will be executed otherwise
110:42 - the book of code which is written
110:44 - outside this that is line number 12
110:46 - which is getting which will be get
110:48 - executed if that condition getting false
110:50 - okay if that condition gets true this
110:53 - will get executed if not the normal flow
110:57 - of the code will be get executed okay so
110:59 - here we are here we have stored age is
111:01 - 20 and 20 is greater than 18 so this is
111:05 - this will be evaluated as true and this
111:08 - block of code will make it executed and
111:11 - the age is greater than 18 will be get
111:13 - printed on the console let's see if it
111:16 - gets printed
111:18 - so here you can see age is greater than
111:20 - 18 is getting printed on our console
111:22 - okay so this is the normal if statement
111:25 - I will just comment it out and now let's
111:27 - talk about the if else okay
111:31 - uh this is a code that I have written
111:33 - okay if else so here I have created one
111:36 - variable called year I have I have
111:39 - assigned value to it uh 2020 and if I I
111:43 - have to check whether that year is a
111:45 - leap year or a common year okay so for
111:48 - checking the leaf here here we are
111:50 - taking here mod 4 is equal to equals to
111:53 - 0 and year mod 100 is not equals to zero
111:56 - and this whole uh guys you can you can
111:59 - see this whole let me highlight and this
112:03 - whole condition is one condition and it
112:06 - it is being checked with the another
112:08 - condition that is year mod
112:10 - of 400 is equal to equal to zero okay
112:13 - and this is the or operator which gets
112:16 - evaluated at true if any one of the
112:19 - condition of these two is evaluated as
112:23 - true okay so let's suppose uh this
112:27 - this block of code is evaluated as true
112:29 - and this evaluated as false then overall
112:32 - if statement will be evaluated as true
112:35 - okay so so this if this is true then it
112:40 - will print the leap year and if this is
112:42 - not true else part will will be get
112:44 - executed as common here so let's run it
112:49 - and see so here you can see it is
112:53 - telling that you know year 2020 is a
112:55 - leap year that's right okay
112:58 - so moving next we will be seeing if else
113:01 - if ladder
113:04 - okay so let me just comment it out
113:10 - and comment it and comment this okay so
113:14 - here we are check simply checking the
113:16 - grade of the student okay so here is the
113:19 - marks which are obtained by a student
113:20 - inside an examination okay so we are
113:22 - first we are checking whether the marks
113:24 - is less than 50 if if the marks is less
113:26 - than 50 this is simply the student is
113:28 - fail in that examination and if the Mark
113:31 - is greater than 50 and Mark is less than
113:35 - 60 that means uh and we use and operator
113:38 - when and this and operator will be
113:41 - evaluated evaluated as true if the both
113:43 - of the condition are getting true so now
113:47 - if the student Mark says
113:49 - anywhere between 51 to 659 then that
113:54 - student will be great get the grade D
113:57 - okay similarly C grade is there b grade
114:00 - is there and a grade is there and a A
114:02 - plus grade is there and if any if any
114:06 - one of this condition is not getting uh
114:08 - true then else part will be evaluated
114:10 - which is invalid that that means the
114:13 - marks you have that we have entered here
114:15 - is invalid okay so if I click run
114:20 - secret because why it is printing the
114:23 - secret since the marks is 65 which lies
114:26 - between the 61 to 69 that is this block
114:30 - of code okay so that's why C grade is
114:32 - printing on the console okay so this is
114:36 - the normal if else ladder is there
114:40 - and now let's go and check nested if
114:43 - statements okay so I have declared two
114:45 - variables name age and weight and I have
114:48 - assigned to them value as 20 and 80 okay
114:51 - and applying condition on age and weight
114:53 - so first of all I am checking that if
114:55 - the age of the user is greater than or
114:58 - equal to 18 it's okay so in that case uh
115:01 - our age is 20 which is greater than
115:03 - equals to which is greater than uh 18.
115:07 - and again we are checking one one if
115:10 - statement where we are checking weight
115:12 - is greater than 50 and in our case our
115:15 - weight is 80 which is greater than 50 so
115:18 - this statement will be executed and
115:21 - printed on the console let me check
115:26 - so here you can see you are eligible to
115:28 - donate blood
115:29 - okay
115:31 - so this is the concept behind if else in
115:35 - Java so I hope you have get some idea
115:39 - about if else statements in Java hello
115:41 - guys welcome back to the Java tutorial
115:43 - Series so today we are learning Java
115:45 - switch
115:46 - so what is Javascript Java switch
115:49 - statement execute one statement for the
115:51 - multiple conditions okay it's it's you
115:54 - can assume it's like a if else ladder
115:56 - okay statement the statement works for
115:58 - the with byte short integer long enum
116:01 - types and after the Java 7 now you can
116:04 - use string in the switch statement also
116:06 - talking about in other words you can say
116:09 - the switch statement attach the quality
116:11 - of the variable against the multiple
116:13 - values
116:14 - so there are a few points that you need
116:17 - to remember about the switch statement
116:19 - that we will be talking about talking
116:21 - when we get to code about the switch
116:23 - statement okay so let's first see what
116:26 - is the syntax how the switch statement
116:28 - syntax is there okay so first of all you
116:30 - have to write switch and inside circular
116:33 - brackets you can write your expression
116:35 - and then inside that multiple cases are
116:39 - there there are a number of cases you
116:40 - can Define and there is a value is there
116:43 - which is being checked if that value is
116:44 - satisfied then the code inside that case
116:46 - will be get executed and break break is
116:49 - there which is optional you can write or
116:51 - you cannot write you it depends upon you
116:54 - okay and one default statement is there
116:56 - which get executed if all the cases are
116:58 - not matched means uh if let's suppose
117:00 - you have write five cases here okay and
117:03 - none of the values get executed for that
117:06 - cases okay then default case should be
117:07 - executed okay
117:09 - so let's understand how the exactly the
117:12 - switch statement flow
117:14 - it is there okay so first of all
117:17 - expression is there which you write and
117:19 - multiple cases here as you can see one
117:21 - two three and uh n number of cases are
117:23 - there and if that case is match then
117:25 - statement one is processed and the and
117:28 - the break break statement is there okay
117:30 - this is optional you can write or you
117:32 - can also not write if you want and one
117:34 - defense default is there if none of the
117:37 - cases is matched then it will get
117:39 - executed okay
117:40 - so let's go in our IDE and let's see how
117:43 - it get implemented okay so I'm here in
117:46 - my IDE let me just create one more Java
117:50 - class
117:51 - so I will name it as switch because we
117:54 - are learning switch right
117:56 - okay just let me increase the font size
117:59 - for you guys and let me get my main
118:02 - method here
118:03 - okay so first thing first I'll give you
118:06 - some basic example okay so let's suppose
118:10 - I have declared an integer variable call
118:13 - number and I will assign it the value
118:14 - 20. okay and after that I will Define
118:18 - one switch okay so for Define I will let
118:21 - switch
118:22 - and inside bracket I will give it the
118:25 - way variable number okay pass the
118:27 - variable number and under that inside
118:29 - switch I can define a number of cases as
118:32 - you can see I have as you have till told
118:34 - you okay so I will Define one case where
118:37 - the value of the number should be 10
118:39 - okay so in that case I will just print
118:45 - 10
118:47 - okay and let me just
118:51 - create one more
118:53 - you know one more case
118:55 - so that you can you guys can understand
118:57 - it more
119:00 - more in better way okay
119:04 - let me just get out of this case okay
119:06 - and I will Define another case where
119:08 - value should be 20 and I will again
119:11 - south
119:13 - 20 okay
119:16 - and I will write the break statement
119:19 - okay so here you can Define n number of
119:22 - cases whatever you want okay and after
119:24 - that don't don't forget to write the
119:27 - default case okay so my default
119:30 - default case should be
119:34 - let's suppose
119:36 - I'm writing
119:40 - not
119:43 - 10 or 20.
119:47 - okay so here I am telling that value of
119:49 - the number is not 10 or 20. okay so
119:52 - that's why the default case is being
119:53 - executed because if the value of k a
119:55 - level of this number variable is 20 then
119:58 - a 20 will be executed if value of the
120:00 - number is not 20 then this will be
120:02 - executed okay
120:04 - so I guess that should run okay
120:08 - let me run this
120:11 - and one more thing guys all those
120:12 - resources and code part you will get in
120:14 - the GitHub repository that uh link to
120:17 - that get GitHub repository is in the
120:19 - description you can access it okay so
120:21 - here you can see 20 is being printed on
120:23 - the console because the weight value of
120:25 - the number variable is 20 and the number
120:28 - switch is number and the case number two
120:31 - is giving executed uh as true because
120:33 - the value of the number is 20 and this
120:35 - line is getting printed and break
120:36 - statement will break the flow of the
120:38 - code okay I means it it will get me out
120:42 - of the switch statement and after this
120:43 - situation switch statement our code is
120:45 - ended okay
120:47 - so let me just give you an another
120:50 - example
120:52 - okay so
120:54 - if I right now
120:57 - see here
120:59 - my value of the number is 30. so what do
121:01 - you think this will default case should
121:03 - be executed right because uh number
121:06 - numbers value is 30 is this is not true
121:09 - this is not true then default case will
121:11 - be in let's see
121:14 - see here not 10 or not or 20 okay so
121:18 - that means uh none of our case being
121:20 - executed as true that's why our default
121:22 - case is executed okay right
121:25 - so I hope you guys have understood the
121:28 - Java switch
121:29 - and try some uh doing some coding
121:33 - questions on Java switch so that you can
121:35 - get the better understanding of the
121:36 - switch and in the upcoming videos I will
121:39 - be talking about the Java Loops okay
121:41 - what are the different types of Loops
121:43 - are there in Java so thank you guys for
121:45 - watching this video I'll meet you in the
121:46 - next one
121:48 - hello guys welcome back to the Java
121:49 - tutorial Series so today we are learning
121:51 - loops in Java so basically there are
121:53 - three types of Loops in Java one is for
121:56 - Loop while loop and do while loop so in
121:59 - this video we are particularly
122:00 - particularly focusing on the for Loop so
122:03 - what is for Loop the Java for Loop is
122:04 - used to iterate a part of the program
122:06 - several times if the number of the
122:08 - iteration is fixed it is recommended to
122:11 - use a for Loop so here is here you can
122:14 - see the pictorial format of the each
122:16 - Loops in Java so here here you can see
122:19 - let me just zoom it out okay
122:21 - the for Loop is the Java for Loop is
122:24 - used to iterate a part of the program
122:26 - several times okay so when we when we
122:28 - have to perform a several tasks that is
122:31 - the same task but at the number of
122:34 - iterations are there then we we can use
122:36 - the for Loop if the number of iteration
122:37 - is fixed then we can use for Loop okay
122:39 - so what is while loop the Java while
122:42 - loop is used to iterate a part of the
122:44 - program several times if the number of
122:46 - the iteration is not fixed so what is
122:48 - the main difference between the for Loop
122:49 - and while loop when we when we when we
122:51 - have to use it is the only difference
122:53 - between them is when the number of
122:56 - iterations are fixed we can use for Loop
122:58 - or when the number of iteration is not
123:00 - fixed we can use while loop okay so what
123:02 - is do while loop the Java do while loop
123:05 - is used to iterate a part of the program
123:06 - several times use it it use if the
123:09 - number of the iteration is not fixed and
123:12 - you must have to execute the for loop at
123:14 - least once so it just uh means you can
123:18 - say that say it as a incremental part of
123:20 - the while loop where you where you have
123:22 - to perform that increment incrementing
123:25 - task at least once okay and then uh when
123:29 - the loop it reads next time the while
123:31 - condition is checked okay so we'll be
123:33 - discussing about it in the particular
123:35 - upcoming videos so for this video I will
123:37 - be discussing about the for Loop only
123:39 - okay so let's just get started uh so
123:43 - here you can see the Syntax for the for
123:44 - Loop for this for is the keyword for
123:46 - declares the for Loop and three
123:48 - parameters are there initialization is
123:50 - there condition is there and increment
123:53 - decrement is there okay so we'll be
123:55 - seeing uh in detail when we are
123:58 - code this for Loop okay so next comes
124:03 - the
124:04 - how the flow of the for Loop is
124:06 - maintained inside a code okay so first
124:09 - of all initialization is done then the
124:11 - condition is checked if that condition
124:13 - becomes false the loop is terminated and
124:17 - exam control flow of the code is resumed
124:21 - to the end of the for Loop okay and if
124:24 - the condition match then the statement
124:26 - inside that for Loop gets executed and
124:28 - increment decrement is there according
124:31 - to that it increments or decrements the
124:33 - variable counter variable and it again
124:36 - go for the checking the condition okay
124:38 - so enough talking about the for Loop
124:42 - let's jump into your IDE and call it out
124:45 - okay so I am in my IDE just let me
124:50 - create one class name for Loop
124:55 - okay the class name should be start with
124:58 - Capital One
124:59 - for Loop okay let me just increase the
125:02 - font size so that you guys can see
125:06 - main method should be there okay so
125:10 - first of all I will take only just
125:11 - simple program then we will do one more
125:13 - program
125:14 - okay so at first let me just declare one
125:19 - form okay so I will declare it for
125:23 - int
125:24 - I is equals to 1 I is less than equals
125:29 - to 10 and each time we are doing I plus
125:33 - plus okay
125:35 - don't worry I will I will be explaining
125:37 - you these things what you have written
125:40 - here
125:41 - okay and I have been painting I okay
125:44 - so here at line number three you you can
125:48 - see I have told you that there are three
125:50 - parameters are there inside of for Loop
125:52 - so first parameter integer I is equals
125:55 - to 1 is the initialization oh so what do
125:57 - you mean by initialization it is the
125:59 - initial condition which is executed when
126:02 - this Loop starts here we can initialize
126:04 - the variable or we can use the an
126:06 - already initialized variable okay it's
126:09 - up to you okay and then comes this part
126:12 - which is condition okay the second
126:15 - condition is second is it Con condition
126:18 - which is executed each time to test the
126:20 - condition of the loop it continues
126:22 - execution until the condition is false
126:25 - it must return the Boolean value either
126:27 - true or false it is option optional
126:29 - condition okay and this is the part
126:32 - third part that is increment or
126:34 - decrement increment means plus plus
126:36 - decrement means minus minus okay it
126:38 - increments or decrements the variable
126:40 - value and it it is an optional condition
126:42 - okay and the statement means this part
126:44 - is title for Loop that that code of the
126:47 - part that we have to execute okay so
126:50 - that is pretty much about the for Loop
126:53 - let me just run this
126:57 - uh so yes here you can see
126:59 - let me just increase the huh
127:01 - so our condition start from I is equals
127:05 - to 1 and until I is less than equals to
127:10 - 10 we are moving our iterating our for
127:13 - Loop okay so at first
127:16 - system.out.print value of I should be
127:19 - printed okay so when we are coming for
127:20 - the first time the value of I is 1 so
127:23 - that is going to print it on the screen
127:25 - and due to this print Ln new line the
127:28 - execution goes to new line and after
127:30 - that I plus plus is there so we will
127:32 - when the for Loops goes again for
127:35 - checking then then that that time is
127:37 - value is 2 okay so I is so now is value
127:42 - is 2 so 2 is less than equals to 10 is
127:44 - it right then we again come inside the
127:46 - for Loop 2 is going to print it this in
127:49 - this way again again and again the for
127:51 - Loop runs and at last when the value is
127:55 - 10 less than 10 yes when we print 10 and
127:58 - when we do I plus plus the I will value
128:02 - become 11 and when we check I 11 is less
128:05 - than equals to 10 so 11 is not less than
128:07 - equals to 10 so Loop terminates and we
128:10 - exit out of the loop and program is
128:13 - ended okay so that's how 1 to 10 is
128:15 - going to print it on the console okay so
128:18 - let me just take another example that is
128:22 - very often used example so let me just
128:26 - comment it out
128:28 - so what we have expected to print on the
128:31 - console is this okay we have to print
128:35 - the this let me just create it first for
128:40 - you
128:41 - guys
128:43 - okay airport three four five okay one
128:48 - space should be there after each
128:51 - star
128:54 - okay
128:57 - yes
128:59 - so
129:02 - okay so this is the expected output on
129:04 - the console this is this series of the
129:07 - Stars should be printed okay using the
129:10 - for Loop okay so let's just get started
129:13 - I will declare one for Loop which will
129:16 - go from
129:18 - one
129:21 - two
129:23 - five
129:25 - and each time I will be doing I plus
129:27 - plus that is I will be incrementing the
129:29 - value of I and I need again one more
129:33 - for Loop
129:35 - so here I I am declaring for Loop inside
129:39 - of for Loop that is the nested for Loop
129:41 - okay
129:42 - so I'll be declaring new variable
129:45 - integer J which is equals to 1 and I'll
129:49 - be checking that whether my J is less
129:51 - than equals to I and I'll be doing each
129:54 - time J plus plus
129:56 - okay
129:57 - and inside this
130:00 - I will be printing my star okay
130:08 - here okay my star is going to get
130:10 - printed on the console so this since
130:12 - this is the string I have to
130:14 - put it inside the curly braces and if
130:18 - after the for Loop execution and
130:22 - outer for loop I will just
130:26 - print a new line okay so now if I
130:30 - execute this code
130:32 - I hope this will work yeah this is
130:34 - working
130:35 - fine
130:37 - so only one thing is there we are not
130:39 - getting that space in between each star
130:41 - okay so that that is because of this I
130:44 - am not given the space here so that
130:47 - should be rectified here
130:48 - yeah so here we are getting that pattern
130:51 - one star then two stars and three star
130:53 - four star like that you can print it how
130:55 - how many
130:56 - as many stars you want just to just you
131:00 - have to increase this value of the five
131:01 - then it will get work okay
131:04 - so I hope you guys have learned about
131:06 - the for Loop you guys have got some idea
131:09 - about the for Loop so in upcoming videos
131:11 - we'll be learning about while loop and
131:13 - do while loop and after that I'll be
131:15 - giving one exercise based on the loops
131:17 - and whatever I talk to you till now okay
131:20 - so thank you guys for watching this
131:22 - video bye bye
131:24 - so hello guys welcome back to the
131:25 - another video of the Java tutorial
131:27 - Series so today we are we'll be
131:28 - discussing about while Loops in Java so
131:32 - what are the while Loops while loop is
131:33 - used to iterate a part of the program
131:35 - repeatedly until the specified Boolean
131:38 - condition is true so as soon as the
131:41 - Boolean condition becomes false the loop
131:42 - get automatically stops okay and it is
131:45 - recommended that to use the while loop
131:48 - when we don't know how much iteration we
131:50 - are going to perform in that Loop okay
131:52 - so here you can see the syntax of the
131:55 - while loop while this while is a keyword
131:57 - which is used and the condition is
131:59 - specified inside this circular brackets
132:01 - and uh inside those
132:05 - uh curly braces we will write the code
132:07 - which is which we have to execute inside
132:10 - the while loop okay and after that
132:12 - incrementing decrementing statement
132:14 - should be written so that each time the
132:17 - condition should be checked okay
132:20 - so now this is the flow of while loop so
132:24 - first uh program execution comes and
132:26 - condition is checked whether if the
132:28 - condition is false Loop gets terminated
132:30 - and if the condition is true then
132:32 - statement inside the loop gets executed
132:34 - and again it goes further checking the
132:37 - condition and this Loops will iterate uh
132:40 - time n number of times that we have
132:42 - declared okay
132:44 - so let me just get into my IDE and we
132:49 - can check how while loop is working okay
132:52 - so here I will create another Java class
132:56 - which is name
132:58 - as while loops
133:01 - sorry
133:03 - okay let me increase the font size
133:07 - I will get my main method
133:09 - and
133:10 - okay so first exam first I will take
133:13 - simple example okay so integer let me
133:16 - take integer I is equals to 1
133:19 - and then while while is the keyword
133:23 - which I will use and inside circular
133:25 - braces I will tell the condition that my
133:28 - ash is less than equals to 10. okay
133:32 - and inside loop uh I will be printing
133:35 - the value of I
133:37 - okay simply and after that I will be
133:41 - incrementing the my value of the I okay
133:44 - so this is the simple while loop where
133:47 - we are checking the whether ice value is
133:49 - less than equals to 10 or not if that
133:52 - value is less than equals to 10 that
133:54 - Loops uh this expression get evaluated
133:56 - at evaluated as true and Loops get
133:59 - executed and system dot out dot println
134:02 - will print the value of I on the console
134:05 - and each time the value of I will be
134:07 - incremented so for the first time when
134:10 - Loop expression gets checked the value
134:12 - of I is 1 here you can see okay so 1 is
134:15 - less than 10 yes it will come inside the
134:18 - loop and it will print the value of I
134:19 - that is 1 and it will after that it will
134:22 - increment the value of I by 1 so when
134:24 - next time the loop get when the
134:27 - expression get checked the value of I is
134:29 - 2 2 is less than 10 yes the it comes out
134:33 - inside the loop and it will print the
134:35 - value of I that is equal to 2 so it will
134:38 - print all this value of I well until the
134:42 - expression it this expression evaluated
134:44 - as true so let me just run this code
134:49 - so that we can get the output so here we
134:52 - can see one two three four five six
134:54 - seven eight nine ten is going to print
134:56 - it and after that Loop is terminated
134:59 - because the value of when after 10 the
135:01 - value of I becomes 11 and 11 is not less
135:04 - than 10 and this expression is evaluated
135:06 - as false and it will terminate the loop
135:09 - okay
135:09 - so let me just comment out this and I
135:13 - will tell you another example which is
135:16 - known as infinite Loop okay
135:19 - so
135:20 - I will declare one while loop and inside
135:23 - that I will write on simply true okay
135:26 - and I will just print
135:30 - in
135:32 - five native
135:36 - Loop
135:38 - okay
135:40 - so here you can see this while loop will
135:44 - never execute a naval terminate because
135:46 - why because the expression inside this
135:49 - tells that it is always true that will
135:51 - that because when when I click on run
135:55 - so here you can see infinite infinitive
135:58 - infinity loop is getting printed on the
136:01 - screen so to exit from this you just
136:04 - have to press Ctrl C so that your code
136:09 - will be get
136:10 - stopped executing and this look at here
136:14 - how many times it is printing in finite
136:16 - in finite Loops okay
136:19 - so this is one example of the infinite
136:21 - Loops in Java so you have to avoid this
136:24 - okay this kind of situation when you are
136:26 - coding so that that is pretty much about
136:29 - while Loops so in our upcoming videos
136:31 - we'll be talking about do while Loops so
136:33 - thank you guys for watching this video
136:34 - and I'll see you in the next one
136:37 - hello welcome back guys to the another
136:39 - video of the Java tutorial Series so
136:41 - today we are learning the do while loop
136:43 - okay so what is do while loop in Java
136:46 - the do while loop is used to iterate a
136:48 - part of the program repeatedly until a
136:50 - specified condition is true if the
136:52 - number of iteration is not fixed and you
136:54 - must have to execute that loop at least
136:56 - once it is recommended that you should
136:59 - use a do while loop okay so it it the
137:04 - Dual Loop is also called as exit exit
137:06 - control Loop in Java so I will tell you
137:08 - whenever when we are going to code it I
137:10 - will tell you why it is called exit code
137:12 - exit control Loop okay so here here you
137:16 - can see the guys syntax do do is the
137:19 - keyword which is used and inside after
137:20 - that we will write the code which we
137:23 - have to execute inside the loop and the
137:25 - update statement should be there and
137:27 - after the ex end of the do block you
137:31 - will write one while and we will specify
137:33 - the condition okay
137:35 - so due to this uh it this is the loop in
137:39 - Java which will execute at least once
137:42 - whether the condition is executed as
137:44 - true or false okay I'll I will tell you
137:47 - exactly what what is it is so when we
137:50 - are going to code okay so first of all
137:52 - let let us check the flow of how why do
137:56 - why do while loop is Works in Java okay
137:59 - so first when the exam flow control flow
138:03 - comes inside this do while loop there is
138:05 - the statement inside it get executed at
138:08 - least once then the condition is check
138:10 - if that condition is true that statement
138:12 - is processed and again it ratio
138:15 - iterative iterative work should be there
138:17 - and if that condition it evaluates at
138:19 - false it will terminate that Loop okay
138:27 - okay so let's just get into our IDE and
138:31 - see how do while loop works okay so I
138:35 - will come here and I will right click
138:38 - here Java class I will create and I will
138:40 - write
138:43 - Loop
138:45 - sorry
138:48 - okay and I will increase some font size
138:51 - so that
138:52 - you guys can see it clearly main method
138:54 - is there
138:56 - so first of all I will take only only
138:58 - one simple do while loop okay uh I will
139:01 - declare one integer I is equals to one
139:05 - and inside again I will declare do while
139:08 - loop and inside do I will just simply
139:11 - print the value of I
139:13 - and after that according to our syntax
139:16 - we have to declare one expression here
139:18 - so my expression is I is less than
139:22 - equals to 10 okay
139:26 - so if I now click on run
139:36 - so here you can see one one one one is
139:39 - getting printed in finatively because I
139:42 - was I'm I have done one little mistake
139:44 - inside my code I have not written I plus
139:48 - plus that is my ielt value is not
139:51 - incrementing in this code that is that's
139:53 - why it gone into an infinite Loop
139:56 - okay let me just terminate this code
139:59 - stop all
140:01 - okay and now if I click on this run
140:05 - button now yeah now it's working fine it
140:09 - will print one two three four five six
140:11 - seven eight nine ten
140:13 - so you would ask me what is the main
140:15 - difference between while and do while
140:17 - because here also we are doing it the
140:19 - same okay so I will explain you by
140:22 - giving one example right
140:24 - so let me just comment it out first
140:28 - and now I will declare again one I
140:31 - variable that is equals to zero
140:34 - and I will declare one do
140:37 - so
140:38 - the statement that I am going to print
140:40 - is
140:42 - wait
140:44 - hello
140:45 - hello is the string that I want to print
140:49 - and each time I'm doing I plus plus okay
140:53 - and the condition that I want to check
140:57 - is whether my I is less than 0 or not
141:02 - so what do you think guys let's check
141:04 - let us check if I run on click but run
141:08 - button okay so hello is going to print
141:11 - it on the screen at least once so you
141:14 - could ask me this this well I is less
141:17 - than zero this this could evaluated as
141:20 - false then why the loop is going to run
141:22 - so guys this is the main difference
141:24 - between a two while and while loop the
141:27 - the statement inside the do will always
141:30 - execute at least once it will execute
141:33 - then it will come and check whether my
141:35 - given expression is true or false so
141:38 - that's why once it it will print hello
141:41 - and in next time it will increment the
141:43 - value of I that is 1 so 1 is less than 0
141:46 - it is not obviously that's why it is
141:49 - terminating the loop now after painting
141:51 - the hello on the screen okay so I hope
141:53 - you guys have get some idea uh so what
141:56 - is do while loop and what is the main
141:58 - difference between a while and two while
141:59 - loop in Java okay so thank you guys for
142:02 - watching this video so in the upcoming
142:04 - video we will be talking some of the of
142:06 - few except which are left in the
142:09 - conditional statements okay that is
142:12 - break comment and
142:14 - few more are there it's okay so enough
142:17 - talking about this video we will be
142:19 - meeting in the next video okay so thank
142:21 - you bye
142:22 - hello and welcome back guys to the
142:23 - another video of the Java tutorial
142:25 - Series so guys this is the uh I guess
142:28 - last video of the control statements so
142:30 - wherein we will be talking about Java
142:33 - break Java continue and what are Java
142:36 - comments okay so let's just get started
142:40 - okay so what is Java break so Java break
142:42 - is a statement which is used to break a
142:45 - loop or a switch statement it breaks the
142:47 - current flow of the program at specified
142:49 - condition in case of the inner loop it
142:52 - breaks only the inner loop okay so here
142:55 - is a
142:56 - diagrammatic representation here you can
142:58 - see uh one Loop is going on it it is
143:03 - iterating and one condition is defined
143:05 - inside that Loop and if that condition
143:07 - becomes true uh we will declare a break
143:12 - statement there and it will break the
143:14 - flow of the loop and it will terminate
143:17 - that Loop okay and where whenever that
143:19 - condition is evaluated as false the loop
143:21 - will again go and iterate iterate
143:23 - iterate until the specified condition
143:25 - becomes false okay
143:28 - so what is Java continue okay so Java
143:32 - continue statement is used to continue
143:33 - the loop it continues the current flow
143:35 - of the program and skips the remaining
143:38 - code at a specified condition in case of
143:40 - an inner loop it will continue the inner
143:42 - loop only okay so we'll be uh talking in
143:46 - depth when we are going to code this
143:48 - Java continue
143:49 - and at last Java comments are there so
143:52 - what are the documents the Java comments
143:54 - are the statements in a program that are
143:56 - not executed by a compiler and an
143:58 - interpreter so basically there are three
144:01 - types of the Java comments one is single
144:03 - line command multi-line comment and
144:05 - documentation command so what is single
144:07 - line comment the single line comment is
144:08 - used to comment only one line so to
144:11 - declare a comment inside Java Java
144:13 - program we will just write two forward
144:16 - slashes are there so when you when you
144:19 - declare two two forward slashes and
144:21 - after that whatever you you will write
144:23 - that will be interpreted interpreted as
144:26 - a comment in Java okay so what is
144:28 - multi-line the multi-line comment is
144:30 - used to comment a multiple lines of the
144:32 - code so when you when we are you are
144:34 - going to comment out the multiple lines
144:37 - of the code in Java then you can use
144:40 - multi-line code multi-line comments
144:42 - sorry and third one is documentation
144:45 - command so documentation comment is used
144:47 - to create a documentation API to create
144:50 - documentation API you need to use Java
144:53 - doc tool so we'll be discussing more
144:55 - about documentation uh comments in our
144:58 - upcoming videos when we are writing some
145:01 - code that is a production level code
145:03 - okay so let's code it
145:06 - now it's I will come here inside my IDE
145:10 - and I will create one Java class name
145:13 - break
145:17 - okay and let me just increase the font
145:20 - size
145:22 - and I will tell you and give you one
145:24 - simple example of the break okay
145:27 - and here I am writing one for Loop which
145:30 - will iterate when I is equals to 1 and I
145:35 - is less than equals to 10 and each time
145:38 - my Loop is increment is value is
145:41 - incrementing by 1.
145:42 - okay so inside this
145:47 - sorry guys I'll get I'm getting errors
145:49 - because I forgot to
145:53 - write the main method and I should write
145:55 - all this code inside the main method my
145:57 - bad
145:58 - and inside this for Loop I will declare
146:02 - one if statement and I will write that
146:04 - when I is equals to equals to 5
146:08 - simply break
146:11 - okay
146:12 - and other than that
146:14 - if I come out of this Loop
146:19 - I will print the value of the eye okay
146:23 - now if I click on run
146:27 - so here you can see one two three four
146:30 - is going to print it on the screen and
146:32 - when the value value of the I is
146:34 - incremented and when the value of the is
146:36 - becomes 5 it will check whether the 5 is
146:39 - less than 10 it yes it come inside the
146:41 - loop and it will check I is equal to
146:43 - equal to 5 yes it will break the loop it
146:46 - will break the for Loop and it will get
146:49 - out of that Loop so this this is the
146:51 - situation where you can use the for Loop
146:53 - inside Java okay
146:59 - okay so we have discussed about break
147:02 - now
147:04 - we will see what is
147:07 - continue in Java okay
147:11 - so let me just copy out this code
147:13 - because I need this okay and add this I
147:18 - will instead of writing break I will
147:20 - write
147:21 - continue okay and I will
147:24 - I will execute the same code okay so
147:27 - here you can see
147:29 - what is going to get printed on the
147:31 - console is one two three four and five
147:35 - is skipped and six seven eight nine ten
147:39 - is printed on the console why so when
147:42 - the value of the is becomes 5 when I is
147:45 - equal to equal to 5 this if condition
147:47 - gets evaluated as true and continue this
147:51 - line number 11 is executed and what will
147:53 - continue will do it will skip that
147:56 - iteration for that Loop it will not
147:58 - execute any of the code after the line
148:01 - number 11 and it will skip that Loop and
148:04 - it will go for the incrementing of the
148:05 - value of the I and iel's value become 6
148:08 - and 6 is less than 10 and that's why 6A
148:10 - is going to get printed on the console
148:12 - okay so continue is used basically for
148:14 - to skip a particular iteration inside a
148:17 - loop
148:18 - okay so I hope you guys have understood
148:21 - this
148:22 - continue so last topic that we have
148:26 - remaining is Java comments
148:29 - okay so let me just give you some
148:33 - example of the comments so as you can
148:36 - see these are the single line comments
148:38 - okay so here uh comments and I will just
148:42 - explain you okay so this is uh
148:47 - single line
148:51 - comment
148:52 - in Java
148:54 - right now my ID is throwing so much
148:58 - error because this is not a Java code
149:01 - this is just a simple English statement
149:04 - so if I want to comment this out I will
149:07 - just come here and just put two forward
149:10 - slashes and this that this becomes a
149:13 - single line comment inside Java okay
149:17 - so let's suppose we have to declare a
149:20 - multi-line comment Okay so
149:23 - I will write like this this is a
149:28 - multi
149:30 - line
149:33 - comment
149:36 - Angel so here two lines are there line
149:40 - number 17 and line number 18 are there
149:41 - that we have to comment so in that case
149:43 - we will write one forward slash followed
149:47 - by one asterisk and after when the at
149:51 - line number 18th end will write asterisk
149:55 - and one forward slash so guys this is
149:58 - the example of the multi-line comments
150:01 - inside Java so now it when we talk about
150:07 - the documentation comment uh there are a
150:11 - lot more example of the document coming
150:13 - documentation comments are there that is
150:15 - at author add code at version tag so
150:19 - these are some tags which are used in a
150:21 - multi-line command we will be discussing
150:23 - it in our upcoming videos when we saw uh
150:26 - some high level hard level uh Java
150:29 - programs and in that we will create a
150:31 - documentation comments okay so that is
150:35 - it for this video guys and now we have
150:38 - officially uh discussed all the topics
150:43 - which are comes under the control
150:44 - statements in Java so in the next class
150:47 - onward we will be starting our oops
150:49 - Concepts in Java and one more thing guys
150:52 - I will be giving you the exercise number
150:54 - two in upcoming videos depending uh it
150:58 - the question that are asked in this
151:00 - exercise is whatever I well I taught you
151:04 - to form till now then that on those
151:07 - topics that is for Loop while loop do
151:10 - while Loops all these topics requires as
151:12 - a prerequisite to solve that exercise so
151:14 - I hope guys I hope you guys will uh
151:17 - solve that exercise and meet you soon
151:19 - thank you
151:22 - hello and welcome back to the another
151:24 - video of the Java tutorial series
151:25 - wherein today we will be covering uh one
151:28 - exercise number two uh so till now I
151:31 - have taught you Loops in Java and some
151:34 - basic concepts of java So based on that
151:38 - uh I have created five questions here
151:40 - here you can see and I expect you that
151:44 - you should give it a try to this
151:46 - question and try solving this question
151:48 - and post your comments uh answers in
151:51 - comment section
151:52 - okay so let's discuss one by one uh
151:56 - questions okay so first question is
151:58 - write a program to calculate the sum of
152:00 - first 10 natural numbers so you have to
152:03 - create one Loop wherein you will be
152:05 - calculating the sum of first 10 natural
152:07 - numbers okay so for the second one write
152:10 - a program that prompts the user to the
152:12 - to input a positive integers okay so
152:15 - first of all you have to take a user
152:17 - input user input from the user where a
152:20 - positive number and it it should then
152:22 - print the multiplication table of that
152:24 - number and let's suppose I have a given
152:26 - input as a 2 then it will show me a it
152:30 - the program should show me the whole
152:33 - table of the two okay and then third one
152:36 - is the writer program to find a
152:38 - factorial value of any number enter
152:40 - through the keyboard means you have to
152:43 - take input from the user and whatever
152:45 - the input in the user has given based on
152:47 - that you have to out give the output to
152:51 - the user as a factorial factorial value
152:53 - of that number okay
152:55 - so fourth number is write a program that
152:57 - prompts a user to an input an integer
153:01 - and then output the number with the
153:03 - digits reversed okay so what does it
153:06 - mean actually here you can see example
153:08 - one two three four five is there and the
153:12 - output which is you should given give to
153:14 - the user is five four three two one
153:16 - means just a reverse of that number
153:18 - which is given by the user okay so fifth
153:21 - one is write a program to print the
153:23 - Fibonacci series of n terms where n is
153:25 - the input by the user okay so N means
153:28 - any number let's suppose I have given 5
153:31 - as a input so so your program should
153:34 - return me the first five elements of the
153:37 - Fibonacci series Fibonacci series is
153:39 - nothing but the addition of the two
153:42 - numbers okay so first series start from
153:44 - 0 and 1 and the the next next third term
153:49 - should be addition of the past two terms
153:52 - okay so past two terms are 0 and 1 0
153:54 - plus 1 is 1 so now now for the fourth
153:56 - term we can add the past two terms one
153:58 - plus one is two and then again for the
154:01 - fifth term addition of the third and
154:03 - fourth term two plus one is three like
154:05 - that the series go on okay so I hope you
154:09 - try this questions and in upcoming
154:12 - videos we will see the solution to the
154:14 - questions before that you should try
154:16 - this question so thank you for watching
154:18 - this video
154:21 - hello and welcome back to the another
154:22 - video of the Java tutorial Series so
154:24 - today we are looking the solution to the
154:27 - exercise number two that I have given in
154:28 - the previous videos
154:30 - it's okay so let's just get started so
154:33 - first of all uh I'll be covering first
154:35 - three questions in this video and other
154:37 - two other two questions will be covered
154:39 - in the upcoming videos because the video
154:41 - link should it should be increased if I
154:44 - cover all those questions in one video
154:46 - okay
154:47 - okay so let's just get started so what
154:50 - is our first problem uh write a program
154:51 - to calculate the sum of first 10 natural
154:54 - numbers okay so I hope you know what is
154:57 - natural numbers natural numbers uh start
154:59 - from one okay so let me get just get
155:03 - into my IDE and
155:06 - and inside my SRC folder I will create
155:09 - one Java class and I will name it as
155:12 - exercise to
155:16 - Solutions
155:19 - okay
155:21 - so let me just increase the font size
155:23 - for you guys
155:26 - okay and inside this I will
155:30 - write my main method okay
155:32 - okay so I have to print the sum of the
155:37 - natural number first 10 natural number
155:39 - okay so for that I will be requiring one
155:42 - variable which will hold my sum okay and
155:47 - again
155:49 - one for Loop is there int
155:52 - I is equals to 1. so I hope you are
155:55 - getting why I have written one here
155:57 - because the natural uh natural number
155:59 - starts from 1 so that's why I have
156:01 - written here I is less than equals to 10
156:07 - less than equals is there because we
156:09 - have to iterate for the value 10 also
156:12 - okay and since our value as value is 1
156:14 - also there
156:15 - and each time I will be incrementing the
156:17 - value of I okay so inside my for loop I
156:20 - will be doing here
156:22 - sum plus is equals to
156:26 - I so at this point uh I am updating my
156:29 - sums value okay so what does it means
156:32 - plus is equals to is nothing but this
156:34 - let me just make it simple for you so
156:37 - that you can understand better okay sum
156:40 - plus I
156:42 - so at line number six and line number
156:45 - five are the same it just uh we write a
156:49 - Sim at a simpler manner okay so I like
156:53 - that first one okay uh so here we are
156:56 - just updating the sums value with the
156:59 - previous sums Value Plus current I is
157:01 - value okay
157:02 - and after my Loop
157:04 - I will just print
157:07 - my value of the sum that is the sum of
157:10 - the first
157:12 - 10 natural numbers okay
157:14 - now let me just concat with
157:18 - some variable okay
157:20 - so I hope this will work let me just run
157:24 - this
157:26 - I hope you guys are liking this tutorial
157:28 - series
157:30 - okay so here the here you can see the
157:33 - sum is 55 because when you add 1 plus 2
157:37 - plus 3 plus 4 plus 5 up to 10 the sum
157:40 - will be 55 okay so that is about the
157:44 - first question so let's just move on to
157:46 - the second question what is write a
157:50 - program that prompts the user to give a
157:52 - positive integer and it should print the
157:55 - multiplication table of that number okay
157:59 - so
158:00 - let me go inside my IDE and I will
158:03 - comment this okay so let me just give it
158:08 - a comment over here so that you guys can
158:11 - understand
158:12 - first
158:15 - okay first
158:17 - and I will comment this also and inside
158:20 - below this
158:22 - I will create another commander in a
158:25 - second so this is the solution for the
158:27 - second one
158:28 - so here I require one
158:31 - input from the user so that's why I have
158:34 - to
158:35 - create a object of the scanner class
158:37 - I hope you guys know the scanner class
158:42 - system
158:43 - sorry system.in
158:46 - okay
158:48 - so here you can see I have not imported
158:50 - uh the scanner class so that is the good
158:53 - thing about the IntelliJ IDE whichever
158:56 - class you use here it will automatically
158:58 - import that class inside the import
159:01 - statement at line number one UK you guys
159:04 - can see okay and uh I will require one a
159:08 - variable called num which is of type
159:10 - integer and then in the next line I will
159:14 - just print enter a positive number
159:16 - because I want a user to enter a number
159:21 - enter any
159:24 - positive number
159:28 - okay
159:30 - and below this
159:32 - uh I will simply write
159:35 - num is equal to
159:37 - SC dot next
159:42 - okay
159:43 - so now uh when I get input from the user
159:47 - I just have to generate the
159:49 - multiplication table of that number okay
159:50 - so for that I will be printing oops let
159:54 - me just create ah yes
159:56 - let me just write multiplication
159:59 - multiplication
160:03 - table of
160:10 - num okay
160:11 - So Below this I will be generating the
160:13 - multiplication table for that number I
160:15 - mean user icon so I will be using for
160:18 - Loop for INT I is equals to 1
160:22 - I is less than equals to 10
160:27 - because we have to generate uh for
160:29 - example for two stable we have to
160:30 - generate two two tens are twenty after
160:34 - that we have to send it you can generate
160:37 - how much you want okay
160:40 - and inside this I will be printing
160:44 - the num
160:47 - Plus
160:50 - one sign which represent multiplication
160:54 - and I will again concatenate it with
160:57 - value of I
161:00 - and then again I will
161:03 - concatenate it with
161:06 - equal to sine
161:08 - and again I will write one
161:11 - operation over here which is
161:14 - my num
161:16 - multiplied by I
161:20 - okay so I hope you guys are getting this
161:23 - slide number 20 what I have done here I
161:25 - have I have first the print the number
161:27 - that is the input given input by the
161:29 - user so at this line I will just show
161:32 - you what will be uh so
161:34 - if the user has given input S2 so at
161:37 - this point two will get printed on the
161:39 - screen and then multiplication sign will
161:42 - get printed and what is whatever the
161:45 - value of the I will be there let's
161:47 - suppose for the first time if the loop
161:48 - is incrementing then the value of the I
161:51 - is 1. and again one equals to sign will
161:54 - be there and after equal to sine the
161:57 - operation there is no mean to two num
161:59 - into I that is 2 into 1 is 2 will be get
162:01 - printed likewise the whole table of the
162:04 - two will get printed on the console each
162:06 - time uh the loop get increment is well
162:09 - you get incremented by 1 up to 10 okay
162:12 - so let me just run this I hope this will
162:15 - work
162:18 - enter a positive number let's suppose if
162:21 - I enter 2 so here you can see two and
162:24 - the two two to the four two two three
162:25 - here two three the six likewise hold the
162:28 - two stable get printed on the screen
162:30 - okay
162:35 - okay sorry for the interruption guys uh
162:38 - so our third question is write a program
162:40 - to find the factorial value of a number
162:42 - entered by the uh enter through the
162:44 - keyboard okay so you have to create
162:47 - factorial of the number okay
162:51 - not create we have to generate okay so I
162:53 - will just comment this out
162:55 - and I will write another comment as
162:58 - third third means the third solution for
163:00 - the third question okay so we have to
163:02 - generate a factorial of that number okay
163:04 - so what is factorial for factor is
163:06 - nothing but the
163:08 - here I can give you one example if I
163:10 - want to find the Fifth Fifth five
163:13 - factorial then it will be equals to the
163:17 - it will be equals to the
163:19 - 5
163:21 - into 4 into
163:23 - 3 into 2 into 1 okay so to find this uh
163:30 - I again I require one input from the
163:34 - user so I will just comment this comment
163:36 - of this so that I can receive input from
163:39 - the user
163:40 - and now I require one variable name as
163:44 - int num which will hold that number
163:47 - actually
163:48 - and again I will require another
163:52 - variable name as fact
163:55 - its current value is 1. okay and I will
163:59 - just print it out
164:02 - enter
164:07 - number
164:11 - and here I will just
164:13 - right sorry
164:17 - num is equals to
164:19 - SC dot next int
164:24 - okay and I will write one for Loop
164:27 - and whose value will be
164:31 - uh I is equals to one
164:36 - each time I will be doing I let's
164:39 - checking I is less than equals to num
164:42 - and I am doing I plus plus okay
164:46 - and inside this I will be doing fact
164:51 - multiplied is equals to
164:53 - I
164:55 - so I hope you guys are getting this at
164:57 - this point we are just getting the value
165:00 - of the I and it multiplying it with the
165:03 - previous value of the fact that is the
165:05 - fact variable and the fact variable uh
165:07 - initial value is 1 and when this Loop
165:10 - kill term gets terminated the value
165:12 - inside fact distort it is the factorial
165:16 - of that number okay so now
165:20 - I will simply print
165:24 - let me just write
165:27 - fact to real
165:30 - it's
165:33 - and I will contact it with
165:36 - fact
165:37 - okay so I hope it this will run if I
165:41 - click on execute
165:43 - it is it it was asking for a number
165:45 - let's suppose I write five
165:48 - and factorial is 120 because 5 into 4
165:52 - into 3 into 2 into 1 is 120.
165:55 - so I hope you you guys can solve these
165:59 - questions first second and third and in
166:01 - our upcoming videos we will be looking
166:03 - into the solution for the fourth and
166:05 - fifth question okay thank you guys for
166:07 - watching this video
166:10 - hello and welcome back to the another
166:12 - video of the ciao tutorial Series so
166:13 - till now we have covered exercise two
166:16 - part one and this is video for the
166:18 - exercise two part two wherein we will be
166:21 - covering the solution for the two
166:23 - programs that's the fourth and fifth one
166:25 - so let's
166:27 - get started uh what is the problem
166:30 - statement write a program that prompts
166:33 - the user to an import and integer and
166:35 - then outputs the number with the digits
166:37 - reverse so basically uh one string we
166:40 - have to provide to the user and we have
166:41 - to reverse it okay for example uh if the
166:44 - string is one two three four five then
166:46 - the output should be a five four three
166:48 - to one okay
166:50 - so let me just open my IDE and this is
166:54 - the previous video we have seen first
166:57 - second and third
166:58 - question solution now I will continue
167:01 - here for the fourth solution so we
167:04 - required to take input from the user uh
167:07 - that I have that's why I have imported
167:09 - the scanner class okay and now I just
167:13 - required one number because we have two
167:15 - reverse and numbers
167:18 - okay so I have declared a variable
167:20 - called number and another variable which
167:23 - will hold
167:25 - day number which which is a reversed one
167:28 - okay
167:29 - now I will print
167:33 - I will accept one input from the user
167:36 - enter the number
167:43 - then here I will write number is equals
167:48 - to
167:49 - uh let me just see what is my object
167:52 - name for Scandal yes SC Dot
167:57 - next int
167:59 - okay so we have accepted one input from
168:02 - the user and store it inside the
168:04 - variable called number now I have I will
168:07 - require one another variable called
168:09 - camps and one variable name
168:13 - remainder and I will assign the value of
168:16 - 0 to it okay so here I will be using
168:20 - while loop
168:24 - while
168:26 - my
168:28 - temp is
168:30 - greater than
168:32 - zero
168:33 - okay and oops I forgot to assign it due
168:37 - to the temp so tell me you will hold the
168:39 - value of the number the because we are
168:43 - in this line number 48 44 we are
168:46 - assigning the numbers value to the 10
168:48 - because we are we are not changing or
168:51 - modifying the actual number because we
168:54 - required that number to check whether
168:55 - that uh the original number or the
168:57 - reverse number are the same or not
168:58 - that's why I have to copied that number
169:00 - inside the temp variable
169:02 - okay
169:04 - so here we will write remainder is
169:07 - equals to
169:11 - temp
169:13 - mod 10. and after that don't worry I
169:18 - will explain you what I have done here
169:21 - just watch
169:23 - these are into
169:26 - sorry 10 plus
169:31 - Commander okay and again
169:35 - temp is equals to
169:39 - temp divided equals to 10
169:43 - and in line number 54 let me just
169:47 - increase the font size
169:51 - okay and line number 54 is same as this
169:55 - so don't get confused what I have done
169:59 - here temp is equals to
170:01 - wait a minute I will just comment it out
170:08 - 10 is equals to 10 divided by 10. so and
170:13 - that's just a shortcut to write
170:15 - this whole statement okay
170:18 - uh this is what I'm doing in the while
170:22 - loop and after that
170:24 - I'll print
170:26 - and check
170:28 - not it we just have to reverse okay
170:32 - reviews
170:36 - oh
170:39 - number holes in our original number
170:43 - eggs
170:47 - and our reverse number is inside the
170:50 - reverse temperature variable okay
170:54 - viewers
171:00 - okay so this is the string this is the
171:05 - actual
171:05 - okay
171:07 - so here you can see uh let's suppose I
171:10 - have uh let me explain you
171:12 - what I have done here inside the while
171:14 - loop
171:15 - okay
171:16 - so let's suppose our input is one two
171:19 - three four five okay and our 10th will
171:23 - hold the number
171:25 - 's value that is the actual number value
171:28 - okay
171:29 - and uh whether my time is criticism 0
171:31 - whether this is greater than zero
171:35 - whether this is greater than zero yes it
171:38 - will come inside inside the loop and
171:40 - remainder is equals to Temp mod 10.
171:46 - mod 10 okay so here
171:51 - the remainder will get stored when that
171:53 - is the last digit mod 10 the last digit
171:57 - will get stored inside the remainder
171:59 - okay and now reverse value here
172:01 - initially reverse value is zero so here
172:05 - 0 into
172:08 - 10 that is 0
172:10 - plus 5 so this will result 5 and in
172:15 - first iteration reverse value will get
172:18 - stored as 5 and and here we have just
172:21 - divided dividing our temp number by 10
172:24 - means
172:25 - one two three four five divided by ten
172:29 - which is equals to one two three four
172:33 - and again we are going to check for the
172:35 - loop and again and this time we will be
172:38 - checking whether the one two three four
172:40 - is greater than 0 yes it will come
172:42 - inside the loop and it will by mod 10 we
172:45 - will we will be getting the last digit
172:47 - of this number that is 4 and inside uh
172:51 - reverse then now the reverse value
172:53 - previously was 5 5 into what is an uh 10
173:00 - 5 into 10 is 50. plus what is the new
173:04 - remainder's value is 4 plus 4 now this
173:08 - is this is equals to 54.
173:10 - Okay so
173:13 - this is 54 and now we again we will
173:16 - divide by 10 12 by 10 so now the times
173:19 - value is 1 2 3 okay so this how this is
173:23 - how so while loop will run and one point
173:25 - will came where the tenth value will be
173:27 - zero and where 0 is greater than 0 will
173:30 - be get evaluated as false and will get
173:33 - out of this Loop and we will just print
173:36 - the original number and the reverse
173:38 - number okay
173:39 - so let me just run this
173:43 - wait by the way if you guys are liking
173:46 - this series
173:47 - do comment and like and share okay so
173:50 - the number I will give input as one two
173:53 - three four five
173:55 - and that's let's see here you can see
173:57 - reverse of one two three four five is
173:59 - okay just let me give one space over
174:02 - here five four three two one okay so if
174:06 - you guys don't know how the loop is
174:08 - running then please do watch the loop
174:10 - video that I have covered uh each and
174:13 - every Loop which is there in the Java
174:15 - and if you want to
174:18 - see how this is working then you can put
174:22 - one debug pointer over here not here
174:26 - wait here and you can just debug this
174:30 - okay
174:32 - and wait allow excess
174:37 - okay so my debug pointer is here I will
174:40 - click on here okay scanner class I will
174:44 - take
174:45 - in the console I will input the number
174:48 - one two three four five okay now I will
174:51 - go in the debugger now you can see
174:53 - number value is one two three four five
174:55 - which is getting stored inside it uh now
174:58 - again if I click remainder it's zero and
175:01 - see it is violating as true because one
175:04 - two three four five is greater than zero
175:06 - okay it will come inside the loop and uh
175:09 - it will do one two three four five more
175:12 - ten and the remainder value will get in
175:15 - stored is zero and here you can see uh
175:18 - now after executing the 40 48 line the
175:22 - remainder value will getting stored as
175:24 - five okay because one two three four
175:26 - five mod ten is equals to five okay so
175:29 - what is the reverse value initially 0 0
175:33 - into 10 0 plus 5 plus 5 is equal to five
175:36 - now if if I click here here you can see
175:39 - reverse value will be updated as 5 and
175:41 - the better will S5 and after doing this
175:44 - now the is eliminated from that original
175:47 - temp number because if I do one two
175:50 - three four five divided by 10 it it
175:53 - gives me one two three four okay uh like
175:55 - this you you can debug this debugger is
175:59 - best when you don't know how the loops
176:02 - are working internally how the flow flow
176:05 - of the code is going okay so you can use
176:07 - this feature of debugging
176:10 - okay so that that is about program
176:15 - number four let
176:16 - let's go into the program number five
176:18 - okay so what is program number five
176:21 - write a program to print the Fibonacci
176:22 - series of n terms where n is the import
176:25 - by the user
176:26 - okay so I hope you know what is
176:29 - Fibonacci series
176:31 - if no let me just comment it out and I
176:35 - will explain okay
176:37 - so here
176:39 - we are
176:40 - I'm commenting out this as fifth
176:44 - solution okay
176:46 - so Fibonacci series is nothing but uh
176:48 - let me just comment it out and I will
176:50 - show you Fibonacci series start from the
176:52 - uh zero
176:54 - and it goes like 0 1 1
176:59 - 2 like that because what is the formula
177:02 - for the Fibonacci series is nothing but
177:04 - the uh the place where the number is is
177:08 - a p addition of the previous two numbers
177:10 - okay this uh series start from zero and
177:12 - one the third number will determine as
177:14 - the addition of the previous two numbers
177:17 - okay so what is 0 plus 1 is 1 and now
177:20 - for this position we we have to add its
177:24 - previous two numbers okay what is one
177:26 - plus one that is equal to two now
177:28 - likewise uh series goes on okay so we
177:30 - are we have to print the series here
177:32 - okay so I again I am required one
177:38 - variable number
177:41 - okay to hold the number of terms which
177:45 - is given by the user and I will again
177:48 - required one variable called as first
177:53 - term and I will assign that 0 because
177:56 - the series starts from
177:58 - 0 okay and the second term of the series
178:01 - is one
178:04 - and that is going to hold here and the
178:07 - third
178:09 - down
178:10 - okay now let me just give it okay third
178:15 - okay now
178:19 - I will just print one line where we
178:22 - require is telling the user to put one
178:25 - number enter the
178:29 - number of
178:32 - terms
178:34 - stop sorry
178:36 - you want
178:38 - in the series
178:43 - okay and
178:45 - over here I will be doing a c dot next
178:50 - in sorry
178:55 - I see dot next in okay
178:58 - now
179:00 - after getting input from the user
179:04 - I will just print the first two number
179:07 - of the series because those are fixed
179:10 - those will never change because series
179:12 - start from zero and one as we know okay
179:15 - and after this I will give one space
179:19 - between two numbers and again again I
179:22 - will concatenate it with second term
179:26 - now I will be running one for Loop
179:29 - Square int
179:32 - I is equals to 3 by this time uh I hope
179:36 - you guys are getting oh I have wrote
179:38 - three over there because the first two
179:40 - terms are fixed and uh I don't want my
179:44 - Loop to run from 0 or 1 because first
179:48 - and second terms are fixed okay so
179:49 - that's why I am learning running my loop
179:51 - from third position and my eyes value is
179:56 - less than equals to the numbers value
180:00 - each time I am doing I plus plus okay
180:05 - so over here I will be assigning the
180:08 - third term is equals to the addition of
180:12 - the first term and the second term okay
180:17 - and I will be printing
180:22 - third term
180:24 - and after that I will be giving one
180:25 - space so that the next next time I will
180:29 - be printing the uh another term so that
180:32 - one extra space would be there between
180:35 - each term okay so here I don't require
180:38 - Ln because
180:40 - I don't want the series to be printed in
180:42 - the straight line I will I want the
180:44 - present to print the series in the one
180:46 - line itself okay
180:48 - so over here I will be assigning the
180:51 - first term value as the second term
180:56 - and the second term value should be
181:01 - third
181:03 - okay so here you can see uh first term
181:06 - and second terms are fixed for the first
181:07 - first time when we are iterating our
181:10 - Loop that is zero and one third term
181:13 - value will be a 0 plus 1 is 1 we will
181:16 - print the one as third term and we will
181:18 - update the value of the first step to
181:20 - the second term that is the second terms
181:22 - value is one
181:23 - and and the second term value is the
181:26 - third term that is one so that next time
181:28 - if we iterate this Loop that is one plus
181:31 - one is true two okay and
181:34 - I guess this is pretty much about the
181:36 - fifth question
181:37 - let me just stop the run it okay
181:43 - okay now enter the number of series that
181:45 - you want okay so let me just get the
181:48 - first 10 numbers of the series
181:50 - so over here you can see the first 10
181:53 - number of the series is zero one uh this
181:55 - is not 11 uh I have done one mistake
181:58 - over here I have to print one extra
182:01 - space over here so that it will
182:03 - distinguish between this one and one
182:05 - okay let me just again run this
182:09 - okay
182:11 - so over here you can see zero one one
182:14 - two three five eight thirteen Twenty One
182:16 - thirty four and then these are the ten
182:18 - numbers of the first first 10 numbers of
182:21 - the Fibonacci series
182:22 - okay
182:23 - so for this problem also uh you can put
182:26 - one debug pointer over here and uh right
182:29 - click and click on the debug okay it
182:32 - will run in the debug board where you
182:34 - can
182:35 - uh see how the loops are working
182:37 - internally okay
182:39 - so that this is pretty much about the
182:43 - exercise too I hope you guys have give
182:45 - it a try to solve this question
182:48 - and I will see you in the next one thank
182:49 - you
182:52 - hello and welcome back to the another
182:54 - video of the JavaScript Java tutorial
182:56 - series uh so I guess this is the right
182:58 - time to begin our project
183:00 - our project number one is a simple
183:02 - banking application
183:04 - okay so till now we have covered only
183:07 - the loops uh some basic basic concepts
183:10 - of the Java and we are not right now uh
183:13 - Deep dive into the oops concept and that
183:16 - will be doing after this project once we
183:19 - complete this project so this project is
183:22 - simply a console based project uh so no
183:25 - GUI interaction will be there in this
183:27 - project uh once we move into the
183:29 - advanced section of the Java where we'll
183:32 - be seeing some Java applets or swing
183:35 - there we can convert this project into
183:37 - the GUI based project okay so for till
183:40 - now uh I will be doing all this stuffs
183:45 - inside the console okay so for this I
183:48 - have plan what I have plans I will write
183:50 - down the points here over here so first
183:52 - we will display a
183:55 - one welcome welcome message to the user
183:57 - okay
183:58 - welcome
184:00 - message
184:01 - to user okay so that is how the first
184:04 - first goal okay
184:07 - and okay and then
184:09 - let me just get here
184:12 - okay for second number
184:15 - uh
184:18 - I can
184:20 - will be looking into the give me a we
184:24 - are giving five options to the user okay
184:26 - so first option will be uh something
184:28 - known as deposit
184:32 - where user can deposit the money inside
184:36 - this bank account okay and then
184:40 - after that
184:41 - the third option second option will be
184:44 - something known as withdraw
184:49 - okay where user can withdraw the money
184:51 - from his account okay then the third uh
184:55 - feature we will be carrying is get
185:02 - previous
185:05 - trans
185:07 - transactions okay so here in this
185:10 - feature uh user will uh get to know what
185:13 - what is this previous transactions what
185:16 - you have done
185:17 - in the past transaction okay and uh
185:20 - again one more feature is there that is
185:23 - not not a feature it it basically uh
185:27 - menu which shows to the user okay so
185:30 - here we are showing the menu to the user
185:33 - according to that by seeing that when
185:35 - new user will give import to our program
185:37 - and programs will behave according to
185:39 - that input okay
185:40 - show when
185:42 - today is it okay and uh at last
185:46 - we will
185:47 - execute
185:50 - execute our
185:53 - code
185:54 - okay so these are some steps that we
185:57 - will be following uh following inside
185:58 - this project
186:00 - okay at first user came and see the
186:02 - welcome message okay and then based on
186:07 - the user input we'll be performing some
186:10 - functions okay that is deposit withdraw
186:12 - that previous transaction show the menu
186:14 - and execute our code okay so I hope you
186:17 - understand the only of the project and
186:20 - in our upcoming videos we will be seeing
186:22 - into the these one one by one
186:25 - implementing this functionality in our
186:28 - projects and at last as a sixth point we
186:30 - will execute our code okay so thank you
186:32 - for watching this video and I will see
186:34 - in the next one
186:37 - hello and welcome back to the another
186:39 - bit of the Java tutorial Series so today
186:41 - we will be starting our first project
186:43 - for project Number One banking
186:44 - application so so in this video I will
186:48 - be discussing about the setup about this
186:50 - project and we will be covering up the
186:53 - first
186:54 - functionality of the project that is the
186:56 - deposit okay so let me just get into
186:58 - into my IDE and I will uh creating the
187:00 - new class name as
187:03 - banking application
187:08 - oops sorry
187:10 - banking application
187:13 - okay and let me increase the font size
187:17 - yes and I will include my public static
187:20 - wall Main
187:22 - okay and inside main uh this project
187:26 - required input from the user so that's
187:28 - why I have to import the scanner class
187:30 - also and I will be using this new
187:33 - keyword scanner
187:36 - system dot in so okay basic stuff
187:42 - now
187:43 - I know we have the not covered started
187:46 - oops concept so that's why
187:49 - you will at some point you will not get
187:53 - some concept so bear with me I will be
187:56 - telling you what those concepts are okay
187:59 - so this is pretty much about the setup
188:02 - okay and now since we are doing all this
188:05 - uh let me show you all this deposit with
188:08 - objectives and action show menu and
188:10 - execute our code all this functionality
188:12 - in a one place so I guess this is the
188:16 - right time to introduce you with the
188:19 - oops concept known as method okay so I
188:23 - will oops of method and class okay so I
188:27 - will create another class known as the
188:29 - banking
188:32 - uh bank accounts which is more
188:35 - appropriate I guess
188:39 - AWC bank account
188:43 - okay okay
188:45 - so this is nothing but I have created
188:48 - one another class name as bank account
188:50 - where I will be covering all those
188:52 - functionality in inside this class and
188:54 - we will create one object of this blank
188:56 - bank account class inside this banking
188:59 - application class okay oops I have
189:02 - written this class inside class that is
189:06 - okay
189:08 - now it's okay
189:10 - okay so this is one class our public
189:14 - class and inside which our main method
189:17 - is there and this is another class where
189:20 - we'll be covering all these
189:21 - functionalities which are required in
189:22 - the uh project okay
189:25 - so inside this
189:27 - uh I will show you how this class and
189:30 - object steps are created so bear with me
189:34 - and for first uh functionality of our
189:38 - project is deposit so we will be
189:40 - covering that first okay for so you you
189:45 - so you are pretty much aware about this
189:47 - for depositing the value uh something
189:50 - money inside our account we we need one
189:53 - variable which is known as balanced
189:54 - because we are updating that balance
189:57 - after deposit occurs inside our
190:01 - account okay and we will require another
190:04 - variable normal name as previous
190:06 - transaction which will hold the value
190:09 - value and the information about the
190:12 - transaction that happened in inside past
190:15 - recently okay so I will be creating
190:18 - those two
190:21 - variables name as balance and another
190:23 - one as previous transaction
190:31 - okay
190:33 - and now I will create one method uh so
190:36 - this method doesn't return anything so
190:38 - that's why I have written void uh I know
190:41 - you are not getting some concept what is
190:43 - wired what is ain't okay not in in you
190:47 - know what that is data type and void and
190:50 - my method name is
190:52 - deposit
190:56 - okay and my method is going to accept
190:58 - one way
191:01 - one
191:04 - parameter that is amount okay amount so
191:07 - method is nothing but one particular
191:10 - instruction of the lines of codes which
191:14 - will execute uh which will you will
191:17 - require again and again for the X
191:19 - equation and then those setup
191:21 - instruction you are right inside of one
191:23 - method and you will call that method
191:25 - again and again to perform that task
191:27 - okay so we will be covering in depth
191:30 - about the methods what what are their
191:32 - types in the Ops concepts for but for
191:34 - now uh you know
191:37 - you know what is methods okay uh we will
191:40 - be creating one method known as deposit
191:42 - and inside that method I will be writing
191:44 - now uh if I want to deposit my money I
191:48 - have to check uh whether my amount
191:52 - that is uh given by the user and this is
191:56 - the uh parameters that this method will
191:59 - be accepting this method will accept
192:00 - amount that uh which is given by the
192:04 - user to deposit inside that bank account
192:06 - okay so I will be checking whether my
192:08 - amount is
192:09 - not equals to zero okay so this uh if
192:14 - the user user inputs a given input as
192:17 - zero so that doesn't make sense because
192:20 - 0 cannot be added inside the bank
192:22 - account okay that doesn't make any sense
192:24 - so we are checking on base basically
192:26 - base condition over here whether my
192:29 - amount amount which is a given input by
192:32 - the user should not be equals to the
192:34 - zero okay
192:35 - if it is not equal to 0 this uh if
192:38 - condition is evaluated as true and
192:40 - inside that uh I will update my balance
192:43 - okay so my I will tell balance
192:46 - is equal to
192:49 - Plus
192:51 - amount okay I will update my balance
192:54 - variable and I will also updated my
192:56 - previous transaction variable as amount
193:00 - okay and so that tells that my previous
193:02 - transaction which done by the user is
193:05 - the amount that means the deposit
193:08 - through the bank account okay
193:10 - so this is pretty much about this and
193:14 - okay
193:15 - also in the upcoming videos we will be
193:18 - covering the withdraw withdraw
193:19 - functionality bitter functionality and
193:22 - the get previous transaction and the
193:23 - show manufactuality okay so thank you
193:25 - for watching this video and I will see
193:26 - you in the next one
193:28 - foreign
193:34 - banking application and this is the
193:36 - third video I guess of the series
193:39 - of the project okay so in this video we
193:43 - will be discussing about the
193:44 - functionality which is withdraw and the
193:47 - get previous transaction so we will be
193:49 - implementing the two methods so for the
193:51 - one method is for the Vedra and one
193:52 - method is for the get previous
193:53 - transactions okay so I hope you have
193:56 - watched the previous videos where we
193:58 - will be implemented about deposit
194:00 - function method and now in this video
194:04 - we'll be covering our withdraw and get
194:06 - previous transaction functionality okay
194:08 - so okay before we get in code think
194:12 - about it uh whenever I want to withdraw
194:15 - some money for my account what changes
194:17 - and first of all what I have required uh
194:20 - as the input to this method okay so
194:23 - let's think about it so for this I will
194:26 - be requiring one amount that is the
194:29 - amount of money that I want to withdraw
194:31 - from my account so the amount is the
194:35 - parameter which will be passing through
194:37 - the withdrawal functions and again one
194:40 - base condition should be there okay so
194:42 - think about it when what what will be
194:44 - the best condition again the same base
194:46 - condition uh like we have done for the
194:49 - deposit method that is amount should not
194:51 - be equal to the zero because deposit
194:53 - depositing the zero rupees or the zero
194:55 - dollars from an account
194:56 - doesn't make any sense okay so we'll be
194:59 - implementing that also
195:01 - and I guess this is a bit pretty much
195:04 - stuff that we have we want to do inside
195:06 - the withdrawal function okay so let's
195:09 - just get and implement this withdraw
195:11 - method okay
195:14 - since our method is doesn't returning
195:17 - anything that's why the return type
195:19 - should be avoid uh void void is the
195:22 - return type there are many different
195:24 - types such as int uh care strings are
195:27 - there so method is doesn't returning
195:30 - anything it it is just performing some
195:32 - basic math calculation and it will
195:35 - returning some value to the user okay
195:37 - not value it is performing some task
195:40 - okay
195:42 - so withdraw I will name this as withdraw
195:46 - and as we have discussed it will accept
195:49 - one parameter name as amount amount of
195:52 - money that we have to withdraw from our
195:54 - account okay and again one of the base
195:57 - condition should be base condition
195:58 - should be there that my amount should
196:01 - not
196:02 - be equals to the
196:04 - zero if it is equal to zero that doesn't
196:06 - make any sense okay and inside this uh I
196:10 - will update my balance because after
196:12 - we're drawing some money my when that
196:15 - amount that much amount of money should
196:17 - be deducted from a balance that for my
196:20 - account
196:21 - balance okay so balance
196:23 - minus amount
196:27 - okay and after that I I also have to
196:30 - update my previous transaction
196:33 - as amount
196:38 - okay and minus amount okay
196:42 - so I guess this is pretty much that we
196:44 - have to do
196:45 - inside the withdrawal functionality and
196:49 - after that we will be performing
196:54 - another functionality that is get
196:56 - previous transaction so
196:59 - this I have writing the previous
197:01 - generation previous transaction we have
197:03 - to implement that method inside this
197:05 - class name as bank account okay and so
197:09 - since
197:11 - previous get previous transaction it
197:13 - doesn't uh return anything so that's why
197:16 - I will write void as the return type and
197:19 - I will write get
197:23 - VBS transaction
197:28 - okay
197:30 - wait guys
197:33 - okay so sorry for the introduction guys
197:36 - okay so where we are avoid get previous
197:39 - transaction okay so this method uh
197:41 - doesn't require any parameters
197:44 - and it doesn't return anything okay so
197:47 - inside this I will write one if
197:49 - condition
197:50 - if my previous transaction value
197:53 - is greater than zero
197:56 - okay
197:57 - when the value will be will have the
198:00 - present previous induction will be
198:01 - greater than uh
198:03 - zero when we have done any deposit uh in
198:08 - our account okay so in that case I will
198:11 - print
198:13 - deposited
198:18 - and I will concat it with
198:21 - previous interactions value okay and uh
198:25 - again
198:26 - one else if condition should be there to
198:29 - check
198:30 - as if
198:33 - my the value of the previous transaction
198:37 - it's less than zero in that case when we
198:42 - draw uh means one withdrawal should be
198:45 - there for my account so in that case I
198:49 - will write
198:51 - sorry
198:53 - withdrawn
198:57 - let me drawn
199:00 - the amount should be there and one thing
199:04 - I will do here is math Dot abstract
199:10 - okay and I will pass it the value of the
199:13 - previous transaction
199:15 - so you'll ask me what we have done here
199:17 - what is this math dot abstract and we
199:20 - are passing uh three ways from the
199:22 - action value to it okay
199:24 - so this is the in inbuilt class inside
199:28 - the Java uh so here you can if you hover
199:30 - over the cursor over here you can see
199:33 - java.line link is a package inside which
199:36 - math class is there and one abs abs
199:40 - method should be there inside that math
199:42 - class if you right click here and here
199:45 - you can see public static int areas so
199:47 - what this uh method does it will accept
199:51 - one parameter
199:53 - okay so as you here you can see it is
199:55 - accepting one parameter which is integer
199:57 - a and it is returning something uh
200:00 - in in format okay
200:03 - so what it does is uh since the value of
200:07 - the application reaction is less than
200:08 - zero that is the negative one like
200:12 - minus something known as minus 50 or
200:15 - guess minus 400 so we don't want this
200:19 - values to be reflected in our console
200:22 - because negative values should not be
200:24 - there inside any account okay so we are
200:26 - doing this match dot abstract function
200:28 - and it will convert that negative value
200:30 - inside the positive to its corresponding
200:33 - positive value that is equal to it will
200:35 - convert the minus 50 as 50 and uh minus
200:38 - 400 as 400 okay so this is the work of
200:42 - the max dot abstracts abstract function
200:45 - okay or method oh then here I will write
200:49 - else
200:50 - if both the condition will not get
200:53 - satisfied in that case I will write
200:57 - no transaction is occurred
201:01 - no transaction
201:05 - is
201:06 - occurred
201:09 - okay
201:11 - so I guess this is pretty much about the
201:14 - previous transaction method where we
201:16 - will checking if the value is greater
201:18 - than 0 that is a deposit deposit method
201:21 - is getting run inside our application
201:23 - and if the value is less than zero that
201:26 - is withdrawal is done inside of a bank
201:29 - account if nothing none of this
201:32 - statement get executed then else will
201:34 - execute it and it will show that no
201:37 - transaction is acquired inside our
201:38 - account okay
201:40 - so this is pretty much about the
201:41 - withdraw and get previous function or
201:44 - the method
201:45 - I will see you in the next video where
201:47 - we will be covering the next
201:49 - functionality that is the show menu for
201:50 - our project so thank you guys for
201:52 - watching this video
201:55 - hello and welcome back to the another
201:56 - video the Java tutorial Series so today
201:58 - in this video we will be covering uh our
202:00 - next functionality of the project that
202:02 - is the show menu projects so this is the
202:05 - main uh method which will hold the all
202:09 - uh functionality of our banking
202:11 - application it will call all those
202:13 - method which you have which we have
202:15 - written in our previous videos that is
202:17 - withdraw our previous transaction and
202:19 - the deposit and it will perform all
202:22 - those
202:23 - functionality of our project I guess
202:27 - okay banking application okay so in this
202:30 - video we will be writing this show menu
202:32 - method okay so for this I will cover I
202:37 - will write another
202:39 - method name show menu
202:42 - and this may this method will does
202:44 - doesn't require any
202:46 - parameter and then it doesn't return
202:49 - anything okay you know so inside this
202:52 - menu show menu show menu function method
202:56 - will uh basically do all those printing
202:59 - part printing stuff inside that console
203:01 - okay so for that uh
203:03 - and we will be carrying on uh declaring
203:05 - one character
203:08 - okay so character variable name as
203:11 - option and I will initially write his
203:15 - ads slash Studio okay so that will
203:18 - present null
203:20 - okay
203:21 - again uh oh I guess I have declared the
203:25 - scanner class over here so that is
203:27 - inside this main uh another class so I
203:31 - have to I guess I have to declare one
203:34 - scanner I guess
203:37 - scanner SC
203:39 - is equals to new scanner
203:43 - system dot in
203:46 - okay let's go I have imported this kind
203:49 - of
203:49 - over here and now uh I have to create
203:54 - that
203:55 - console stop here okay now so I will
203:59 - just oops sorry I will just out one
204:03 - thing that is
204:05 - welcome
204:09 - Plus
204:12 - customer
204:15 - name
204:18 - so
204:19 - this time uh intelligent idea is telling
204:22 - me that hey what is customer name you
204:24 - have it doesn't have declared it
204:25 - anywhere okay so for that uh I will be
204:29 - creating one
204:31 - variable over here
204:33 - that is of type
204:36 - this is customer name so that is of type
204:38 - string
204:39 - records customer name is in string
204:42 - format and I will write
204:44 - that same customer name and one more
204:47 - thing I will be requiring is as customer
204:49 - ID okay and I will also declare it as
204:52 - spring
204:54 - customer ID
204:57 - Okay so
205:00 - whenever the object of this class is
205:03 - created uh I I want the user to give me
205:08 - the customer name and the customer ID so
205:11 - that I can print that name and the
205:13 - customer ID over here okay so for this
205:17 - one more concept was there of the of
205:19 - oops object object oriented programming
205:21 - language that is Constructor so what
205:24 - basically Constructor does is it will
205:27 - get automatically called whenever the
205:29 - object of the class is created okay
205:32 - whenever I create the object of the
205:34 - class the Constructor is getting called
205:37 - and the Constructor name should always
205:39 - be as same as that of the class name
205:42 - okay so what is the class name bank
205:44 - account and this Constructor should
205:47 - accept the two parameters that is the
205:49 - customer name and the customer ID so
205:51 - that we can uh print that customer name
205:53 - and customer ID inside the console okay
205:56 - and so the name should be in the format
205:58 - of string
206:00 - screen name
206:02 - I would like to see that because that is
206:04 - a proper convention that is the customer
206:06 - name and I will write string
206:11 - CID that is the customer I
206:15 - okay don't worry about this Constructor
206:17 - for till now for just now uh
206:21 - know that whenever we create the object
206:23 - of that class the Constructor get
206:25 - automatically called okay so this line
206:28 - number 15 to 17 and inside this
206:31 - Constructor whatever I'll write it will
206:33 - get automatically called whenever we
206:35 - create object of this bank account class
206:37 - okay so whenever I create this uh object
206:41 - of this class I just want to assign the
206:44 - customer name
206:45 - as the C name which is in given input by
206:49 - the
206:50 - C name
206:52 - by the user and I just want that
206:55 - customer ID should be equals to the CID
207:00 - okay so that is pretty much about this
207:02 - Constructor I guess
207:04 - and now we can move to the towards our
207:08 - show menu function and start a limiting
207:10 - this okay so I will write again one
207:13 - shout statement over here should be
207:15 - there and I will write
207:18 - your
207:19 - your ID is
207:23 - this and I will write
207:26 - customer ID
207:30 - okay so after this I want a new line
207:34 - should get painted on the console so for
207:36 - that I will write this out
207:38 - hit empty nothing should be there so
207:40 - that the new line should be there and
207:41 - which looks
207:43 - nice okay
207:45 - and again
207:47 - I want one option number a so we have
207:51 - discussed over here the options of that
207:53 - our application that is deposit withdraw
207:56 - we address and reaction at the show menu
207:58 - okay so we will be covering that over
208:01 - here
208:02 - we will write
208:03 - check balance
208:09 - okay uh then
208:12 - again one more functionality should be
208:15 - there that is B Dot
208:17 - deposit
208:21 - if the user want to deposit some money
208:23 - inside this account
208:25 - and again see is retro
208:34 - t-r-a-w withdraw
208:37 - and again one more shout statement
208:41 - and now option number D to get the
208:46 - previous strand
208:50 - transaction
208:56 - okay now last option
208:58 - if either want to get exit from this
209:00 - hour application you want
209:03 - our user to click key
209:06 - so that you can exit from our
209:07 - application and so
209:10 - now one thing sure you should notice
209:13 - this show menu methods will display all
209:17 - the these steps inside the console okay
209:19 - and we don't want the user to get uh
209:22 - multiple times click on this run button
209:24 - run button and execute over this code
209:26 - again and again so we can what we can do
209:28 - is we can provide one uh loop to the
209:32 - user wherein user can Loop iterate or
209:35 - iterate this functionalities or use this
209:38 - functionalities again and again as much
209:40 - time you want and whenever a user has
209:43 - done with all the
209:44 - application uses and then simply user
209:48 - can type e to exit from our application
209:51 - okay so for this I will be using one do
209:54 - while loop and inside do I will just
209:58 - first of all I will
210:01 - print one
210:03 - statement so it will look nice
210:06 - okay
210:08 - and then one more south statement should
210:11 - be there
210:12 - which will tell the user to enter
210:15 - the option
210:19 - okay
210:20 - enter the option
210:24 - and after that one more south statement
210:26 - should be there
210:27 - uh this line number 60 and line number
210:30 - 62 is just used for the getting the
210:33 - console such a nice look okay and after
210:37 - that I will be doing option is equals to
210:41 - scan uh
210:43 - SC is the object sorry SC Dot
210:48 - next
210:51 - Dot
210:52 - carat index 0 and I will be doing
210:57 - 2
210:58 - I guess I can't do this here and let it
211:02 - be we will cover in the next upcoming
211:04 - video so in this way in this part I have
211:08 - taken one uh input from the user at the
211:10 - string and I will be returning the first
211:12 - character of that string okay uh so I
211:16 - have declared here the character as a
211:19 - here option and I'm storing that user
211:23 - input inside this option and so user can
211:25 - input e d e c a b a b c d e any option
211:29 - that you either want that gets stored
211:31 - inside this
211:33 - option variable okay
211:35 - so now inside this I will create one
211:38 - switch
211:40 - and so for switch I will be passing
211:43 - option as the parameter
211:45 - so we have covered switch I hope you
211:48 - guys remember this
211:50 - how switch works and how what is switch
211:53 - okay so we'll be carrying one case
211:58 - for first case
212:00 - we will be passing a we will be writing
212:03 - the functionality if the user clicks a
212:06 - that is the check balance
212:08 - okay for that I will come inside this
212:11 - case and I will first of all print
212:16 - this line okay so this line is basically
212:20 - just to give that
212:23 - nice look to our application okay so
212:26 - again inside that I will write
212:30 - sound at the system.out.bination and I
212:32 - will simply print
212:35 - balance it's
212:39 - and I will concat it with
212:44 - balance
212:46 - can at last
212:48 - I will be printing again this just to
212:51 - give our application a nice look
212:54 - and I will print once our statement so
212:56 - that one extra line should be there
212:58 - between
212:59 - uh the switch next case okay
213:03 - so after that this is pretty much about
213:05 - the check balance I will just write
213:10 - foreign
213:12 - and
213:15 - for the next case we have
213:18 - case number B if these are given as B
213:24 - and I will just
213:26 - copy this statement over here
213:30 - just to give it
213:32 - oops sorry
213:35 - copy
213:38 - oh sorry guys
213:42 - me okay and what is the BP part uh B
213:47 - part is the deposit okay so when the
213:49 - user gives the input as B we have to
213:51 - deposit the amount inside our
213:53 - account okay so salt
213:57 - do either enter
214:00 - the
214:01 - amount
214:04 - to
214:06 - deposit
214:08 - okay
214:10 - so after this I will again print this
214:14 - line so that it will look nicer in our
214:17 - application
214:20 - okay
214:22 - now
214:24 - what I can do is int
214:28 - amount I will declare one variable name
214:31 - as amount and using strot next end
214:37 - I will receive that
214:40 - in input from the user and I will call
214:44 - deposit
214:46 - method inside this and we will pass that
214:49 - amount value to the deposit function
214:52 - deposit method okay and after that
214:55 - I will just print One new line
214:58 - and I guess that that is the pretty much
215:00 - I will have to do inside this case
215:02 - number B
215:03 - right
215:05 - so what I have done uh
215:07 - and printed this on the console and I
215:11 - have taken one input from the user and
215:13 - showed it inside the amount variable and
215:15 - I have passed that amount variable to
215:16 - the deposit method and we have written
215:19 - the deposit method over here here you
215:21 - can see and this deposit method will
215:23 - update the balance of the in our account
215:27 - and update the previous transaction
215:29 - value also okay
215:31 - so after that
215:33 - moving forward
215:35 - to the case number c
215:43 - k c
215:45 - okay so what is Case C withdraw okay so
215:48 - we have to implement the withdrawal
215:50 - functionality over here so I will just
215:52 - simply uh
215:54 - copy this and paste or paste it over
215:56 - here enter the amount to
216:00 - withdraw okay
216:03 - after that
216:04 - again I will create one
216:07 - variable name amount 2 because I'm
216:11 - already declared above already
216:13 - ridiculate about SC Dot
216:16 - next int
216:19 - and for doing the withdrawal stuff we
216:23 - have returned one method withdraw and we
216:25 - will accept one parameter name is amount
216:28 - so we are passing that amount that that
216:31 - needs to be withdraw from our account
216:33 - and then again I will simply just print
216:36 - a new line so that it looks nice in the
216:39 - console
216:40 - I guess this is pretty much we have to
216:42 - do inside this case
216:46 - okay so our next case is
216:49 - case
216:50 - D and let me just look what we have to
216:53 - do kst that is the previous term
216:56 - reaction uh we have to perform the
216:58 - previous transaction inside this case
217:00 - and again I will just copy this because
217:04 - this is step that I required every time
217:07 - okay
217:07 - and inside this
217:10 - I don't require this because
217:13 - I don't need to print anything inside
217:16 - the console or getting input from the
217:18 - user that's why and inside this we I
217:21 - will call the get previous transaction
217:22 - method and this call will be uh go to
217:26 - here
217:28 - to a this method get previous and
217:30 - reaction and this method will check this
217:33 - condition and according to that it will
217:35 - print that corresponding statement okay
217:37 - over here
217:39 - okay so I guess this is the pretty much
217:41 - we have to do inside this case and after
217:44 - that
217:45 - I will just print One new line
217:47 - and I will break this condition okay
217:52 - now
217:54 - I have to write again in more condition
217:58 - that is the E condition that is in exit
218:02 - condition what if the user write e okay
218:05 - so in that case
218:07 - either one to get exit from this Loop so
218:10 - they will simply just print
218:13 - this statement
218:16 - and after this statement we will do
218:21 - break okay and
218:24 - this is all we have handled all those
218:26 - cases and
218:29 - we will sorry one default case which
218:32 - will handle and inside default case
218:36 - we should do print something like
218:42 - when will get a default condition get
218:44 - hit when the user will enter uh doesn't
218:48 - enter a b c d e and other characters
218:51 - okay so in that case we just have to
218:54 - print
218:56 - invalid
218:59 - option
219:06 - please
219:08 - try
219:10 - again
219:12 - okay and I will simply
219:16 - break this
219:19 - okay so I guess so this is pretty much
219:22 - we have to do insert the switch
219:25 - okay so we have implemented this switch
219:28 - after that
219:32 - I will write while because this is this
219:35 - do while loop and inside while
219:37 - I will check the options value should
219:41 - not be equals to
219:44 - character P because if it is a e that
219:47 - that means user don't want to
219:49 - use our application anymore any more and
219:53 - you don't want to exit our phone or
219:55 - application okay so this is pretty much
219:57 - about the show menu
220:00 - I guess we have done let me just zoom
220:04 - out so that you can see whole method
220:06 - inside one View
220:08 - okay I guess this is and one
220:12 - one pretty simple mistake was there
220:14 - inside this method I want you to think
220:17 - about it and let me know and we will
220:20 - also cover that inside in our next uh
220:22 - video we will try to rectify that
220:25 - errorings which is inside this to do
220:28 - while loop okay so for this video this
220:31 - is pretty much we have done okay so in
220:33 - this next in our next video we will
220:35 - continue this project and we will try to
220:39 - implement this project thank you for
220:40 - watching this video
220:42 - hello and welcome back to the another
220:44 - video the Java tutorial Series so today
220:46 - we are continuing our project number one
220:48 - that is banking application and in this
220:50 - video we will finishing it okay so in
220:54 - our previous video we have discussed
220:56 - about the show many functionality of our
220:59 - application and I have told you that
221:02 - when there is mistake is there inside
221:04 - this method that is what if
221:07 - we are checking the cases for the this
221:10 - letter that is uh
221:12 - capital letters capital a capital b
221:14 - capital c capital D and the capital E
221:18 - okay
221:19 - one minute
221:22 - okay so where we are I have told you
221:25 - that one mistake is there inside this
221:26 - code that is we are checking this case
221:28 - case for the capital letter set is
221:30 - capital a capital b capital c d and e
221:33 - and what if the user is entering this
221:35 - small small letters okay so that is a b
221:40 - c d e uh because this switch switch is
221:45 - comparing that case using the Sky asci
221:48 - value of that characters okay so the Sky
221:51 - value of the capital A and as a capital
221:54 - small a are different so that's why user
221:57 - will doesn't know what is happening why
222:00 - the code is not getting run for the case
222:03 - number a because user had entered the
222:06 - small letters okay instead of entering
222:08 - this capital letter so this is the
222:10 - problem
222:11 - so what we can do whether the user will
222:14 - enter that characters in in a small
222:16 - letter or the capital letter and we are
222:19 - storing that inside the option option
222:20 - variable we will convert that uh input
222:23 - into capital letters okay so what we can
222:27 - do is there is one uh inbuilt class
222:30 - inside Java which is character and which
222:32 - has one function that to
222:35 - upper case and this will accept one
222:38 - character and which is which character
222:40 - is this options okay
222:42 - so what this will do let me just
222:45 - increase the font size so that you can
222:47 - see clearly
222:48 - this will uh get that options input from
222:52 - this option and it will conver apply the
222:56 - two uh apply not apply it will pass that
222:59 - options or the letter whether it is in a
223:03 - small or capital letter
223:05 - to the upper case method and uppercase
223:07 - method will return the capitalize form
223:11 - of that character okay so let me just
223:13 - show you uh this implementation of this
223:16 - here you can see the public static care
223:18 - method is written inside the Java this
223:20 - is the document inbuilt methods which
223:23 - are written inside the Java and here you
223:25 - can see what we what it is returning it
223:26 - is returning to upper case of that
223:28 - character
223:30 - okay
223:31 - so I guess this will remove the problem
223:35 - that we have inside our application
223:38 - and let me just okay so now I guess we
223:42 - have done all the part that we have you
223:45 - want to do inside our bank account class
223:48 - and we have implemented all the
223:50 - functionalities inside this and now we
223:53 - have to run this and we know from uh
223:56 - where our program will get executed
223:59 - inside this main method okay so inside
224:02 - that this is class banking application
224:04 - and this is class bank account so both
224:07 - classes are different and all our
224:08 - functionalities are written inside this
224:10 - bank account class and we now we have to
224:13 - tell this Bank application class that
224:15 - there is a bank account class is there
224:17 - and we have to create one object of that
224:19 - class okay so how to create the object
224:21 - of the class
224:22 - back we will simply write bank account
224:25 - don't worry for time being just remember
224:28 - uh be with me uh I will cover all those
224:32 - classes what is class object inside our
224:34 - upcoming queries inside that oops
224:36 - concept okay a bank account and we will
224:39 - give a name to the object okay so let me
224:43 - just write
224:44 - uh as Bank One whatever you can you can
224:48 - simply give your name also okay what it
224:51 - is it doesn't make any sense okay but
224:55 - normal convention is that you should
224:57 - give object name as
224:59 - so that's you can understand by looking
225:03 - at the object name what we have done
225:05 - inside this okay so we'll create a new
225:09 - bank account
225:10 - and here you can see IntelliJ IDEA is
225:13 - telling me that this
225:15 - object will require one two parameter
225:19 - that is C name and CID so I have in the
225:22 - previous videos I have told you that
225:24 - this is the Constructor which accepts a
225:26 - cname and CID and I have told you that
225:29 - whenever you create an object of the
225:31 - class it it calls the Constructor of
225:35 - that class and we have written our
225:36 - Constructor over an area of this kind of
225:38 - accept the two variable serum and CI so
225:40 - that's why we have to give two
225:43 - parameters to this program so let me
225:46 - just give the customer name as x y z you
225:49 - can give your name also as a customer
225:51 - name if you want
225:53 - and again
225:56 - second parameter is CID
225:58 - so let's suppose customer ID is
226:03 - let's suppose one
226:05 - zero one okay this is the customer ID
226:09 - okay uh this is pretty much that we have
226:12 - to do and
226:15 - we can now the object is created for
226:18 - that class name bank account okay so
226:20 - using that object we can call any method
226:23 - written inside that bank account class
226:26 - okay so what are the meters written
226:28 - inside this is void deposit void
226:30 - withdraw void Gateway send the action
226:32 - void show menu so one thing you tell me
226:35 - or you you decide which method I can
226:39 - call so that all the functionality of
226:41 - our application will be done inside that
226:45 - so I think there is only one method
226:47 - which uh which is there show menu method
226:51 - and which will Implement all these
226:54 - functionalities of our application here
226:56 - itself okay so I will call that method
227:00 - using the object name so for calling
227:03 - that method we will write object name
227:06 - that is bank 1 Dot
227:09 - now you can see show menu is there show
227:12 - menu okay
227:13 - so this will call that show menu method
227:16 - okay inside this okay so I guess this is
227:20 - pretty much that we have to do inside
227:21 - this project so I hope
227:24 - and this will run let me just run this
227:29 - okay it's running and now here you can
227:31 - see it is that asking me the enter the
227:33 - number of terms you want
227:36 - in the series uh wait
227:40 - I guess this running the previous
227:45 - sorry sorry guys this is running the
227:47 - previous class Java class I guess and
227:50 - now I have to run this Java class itself
227:52 - yes now see here you can see welcome XYZ
227:55 - your ID is zero one how this is doing uh
227:59 - we are passing x y z and zero one to
228:01 - this class Constructor and this
228:04 - Constructor is assigning that c name and
228:06 - CID value to the customer name and
228:08 - customer ID is over here okay and those
228:11 - customer IDs and customer name are
228:13 - getting printed in on the console here
228:14 - customer name and custom ID so I hope
228:16 - you guys are getting this
228:18 - and now it is asking for the option uh
228:21 - so let's suppose we have to check the
228:22 - balance and deposit the balance and we
228:24 - draw the previous transaction okay so
228:26 - we'll go one by one okay I will type A
228:29 - okay so we will check first of all let
228:32 - me check the error that we have
228:33 - rectified over here okay if I give small
228:36 - a and if I hit enter the check balance
228:39 - should be there so it was selling
228:40 - invalid option should be invalid option
228:42 - is there uh because I guess this is not
228:46 - working here
228:49 - why it is not working I don't get it
228:52 - okay let it be uh I will Rectify this
228:54 - error and let you know in the upcoming
228:56 - videos okay uh for time now being we
229:00 - will give the capitalized inputs to the
229:02 - other application okay capital a
229:05 - so now here you can see balance is zero
229:07 - it's showing balance is zero because we
229:09 - don't have any uh done uh deposit or
229:11 - withdrawal from our account and
229:13 - initially the value of the balance
229:15 - variable that we have declared over here
229:18 - is
229:19 - zero okay that's why it is printing 0 in
229:23 - this
229:24 - console okay
229:27 - uh okay now let me just increase the
229:30 - size of the console uh and now if I do B
229:33 - B what is a b deposit uh enter the
229:36 - amount that you want to deposit let's
229:38 - suppose I have to deposit 1000 rupees or
229:40 - thousand dollars in my account okay and
229:42 - then if I hit enter
229:45 - uh now thousand rupees or thousand
229:48 - dollars I uh deposited in my account now
229:51 - if I do option A that is view balance
229:54 - now here you can see balance is thousand
229:56 - previously it was selling that balance
229:58 - is zero now the balance is 1000 okay
230:01 - uh one second guys
230:07 - so now we have checked the balance that
230:10 - is thousand
230:11 - so we have implemented the check balance
230:14 - and deposit now if I want to withdraw
230:16 - money from my account I have to give
230:18 - input as C
230:21 - foreign
230:30 - 500 and now if I check the balance for
230:33 - checking balance
230:35 - um balance is 100 and now at last I want
230:38 - to check the previous suggestion that I
230:40 - have done
230:41 - d
230:43 - so here you can see if I type D
230:45 - withdrawn 500 that is the thing that I
230:48 - have done previously
230:50 - so that is withdraw for the 500 from the
230:54 - account okay
230:55 - so I guess we have implemented all those
230:59 - checks now at last I have to implement e
231:03 - if I press enter
231:05 - now here you can see process finished
231:07 - with exit code 0 that is our code will
231:10 - get
231:11 - ended and you will get out of this main
231:15 - method okay so this is pretty much about
231:18 - this project I hope you have enjoyed
231:20 - this project and you know upcoming
231:22 - tutorial series we will be starting
231:24 - oops concept from the
231:27 - on watch videos okay thank you for
231:29 - watching this video
231:31 - hello and welcome back guys to the
231:33 - another video of the Java tutorial
231:34 - series uh so today onwards we are
231:37 - covering oops
231:39 - in Java okay so what is oops oops
231:43 - there's nothing but the object oriented
231:44 - programming language and simula is
231:47 - considered to be the first
231:49 - object-oriented programming language and
231:52 - someone says a small talk is considered
231:55 - fully first fully truly object-oriented
231:58 - programming language okay so uh in
232:02 - today's world you can see uh C plus plus
232:05 - PHP Python and C sharp Java are the
232:09 - popular object oriented programming
232:11 - languages over there
232:12 - and so yes so first of all object means
232:17 - the real well entity such as pench table
232:19 - computer watch anything you see uh like
232:23 - Windows bed other object object oriented
232:27 - programming is a methodology of the
232:28 - Paradigm to design a program using
232:31 - classes and object what is classes and
232:33 - object we will cover in the next our
232:35 - upcoming videos we will go in step by
232:37 - steps okay and it simplifies the
232:39 - software development and maintenance by
232:41 - providing some Concepts such as object
232:43 - classes inheritance polymorphism
232:45 - abstraction encapsulations so these are
232:48 - some features of the object oriented
232:50 - programming languages and here you can
232:52 - see one nice diagram is there and we
232:54 - will go in such a way in this way also
232:56 - okay we will cover first object then
232:59 - class and in returns polymorphism then
233:01 - abstraction and an encapsulation okay
233:02 - we'll cover in depth each of each one of
233:05 - these okay so before going into the oops
233:08 - Concepts there are some naming
233:10 - convention that you should follow
233:12 - so that your code looks nice and clean
233:15 - okay so the Java naming convention is a
233:18 - rule to follow as you decide what to
233:22 - name your identifiers such as class
233:23 - package variable constant method uh till
233:27 - now you can you have seen we are giving
233:30 - some names to the variables some name to
233:32 - the classes so there are some naming
233:34 - conventions are declared by the sun
233:37 - micro system or the net Netscape
233:39 - which we should follow so that our code
233:43 - should be maintainable and readable to
233:48 - the other users also okay
233:51 - CNC here you can see the second point
233:53 - but it is not forced to follow okay you
233:55 - are not forced to follow it but it so it
233:58 - is known as convention not rules okay
234:00 - this these convention are suggested by
234:02 - the several Java communities such as
234:04 - Java Sun Microsystems and Netscape as
234:06 - I've said to you all classes interfaces
234:09 - and packages methods and Fields of the
234:11 - Java programming language are given
234:12 - according to the Java naming conventions
234:15 - okay if you fail to follow this
234:17 - convention it may generate confusions as
234:19 - I said it may generate confusion to the
234:21 - person who is reading your code and it
234:24 - may be uh get some error not errors
234:27 - ambiguity yes
234:30 - so let's talk about some advantages that
234:35 - you get in
234:37 - using the object oriented programming
234:40 - languages so first of all oops makes the
234:43 - development and maintenance easier
234:44 - whereas in procedure oriented
234:46 - programming language it is not easy to
234:48 - manage if the code grows as project size
234:50 - increases okay so what is procedure
234:52 - oriented programming language is the
234:53 - language such as c as a procedure
234:56 - oriented programming languages and
234:58 - languages like Java although object
235:00 - orientable programming language we will
235:01 - cover in depth in our upcoming videos
235:03 - okay oops provides the data hiding
235:05 - whereas in procedure oriented
235:07 - programming language global data can be
235:09 - accessed from anywhere for the data
235:11 - hiding we can use
235:13 - abstractions abstraction is a feature of
235:16 - the object-oriented programming
235:17 - languages which allows us to hide the
235:20 - complexity
235:21 - okay and third one is oops provides the
235:25 - ability to simulate the layer real world
235:27 - events more effectively okay one second
235:31 - guys
235:33 - okay so where we are so these are some
235:36 - naming convention that you should follow
235:38 - while writing your code and I have
235:41 - talked about the advantages also and in
235:44 - our next upcoming videos we will be
235:46 - starting for the covering the object in
235:48 - class 10 inheritance as follows okay so
235:51 - thank you guys for watching this video
235:55 - okay so welcome back guys to the another
235:57 - video of the Java tutorial Series so
235:59 - today we are we are starting with our
236:01 - very first concept of the
236:03 - object-oriented programming languages
236:05 - that is objects and classes so in this
236:08 - video we will be covering objects and
236:10 - classes
236:11 - so let's just get started so first of
236:14 - all I'm covering objects then I will
236:16 - cover uh class okay
236:20 - so what is object an object is an entity
236:22 - that hasn't State a behavior is known as
236:25 - object for example chair bike marker pen
236:28 - everything you see surrounding you is an
236:31 - object in a real world entity right it
236:33 - can be physical or The Logical okay the
236:36 - example of an intangible object is a
236:38 - banking system that we have done project
236:40 - on it as if you have watched or
236:43 - following the series okay so what are
236:46 - the characteristics of the object a
236:48 - state a state represent represents the
236:51 - data of an object and the behavior
236:52 - Behavior represents the behavior of an
236:56 - object such as deposit withdraw this is
236:59 - related to the banking application that
237:00 - project we have done in our previous
237:03 - videos okay and identity it is used
237:05 - internally by the jvm to identify each
237:08 - object uniquely so this is just identity
237:12 - is that just a jvm part that it handles
237:14 - to identify the each object uh uniquely
237:17 - in Java okay
237:19 - uh so first we will see the theoretical
237:22 - part of the object in the class then we
237:24 - will get into get into our IDE and see
237:28 - how class and objects are declared
237:30 - inside the code okay so what is the
237:32 - class a class is a group of objects a
237:35 - Fields methods Constructors blocks or
237:38 - nested classes and interfaces these all
237:41 - kinds of methods Constructors that you
237:43 - wrote in uh in Java you put it inside
237:46 - your class and a class holds all these
237:49 - fields okay and a class it is a template
237:53 - or a blueprint from which objects are
237:55 - created and it is a logical entity and
237:57 - it can it can't be physical okay so I
238:00 - will explain you one by one what what I
238:03 - have to uh
238:04 - speak right now okay so let me just open
238:07 - my IDE
238:12 - a by the way guys if you are enjoying
238:14 - this series so please like share and
238:16 - subscribe to the channel also okay
238:20 - okay
238:21 - wait hey this is the code of the project
238:24 - which you have which we have done
238:26 - previously okay if you have not watched
238:28 - this video go and watch it
238:30 - okay so here let me just create a new
238:34 - Java class name
238:37 - um what should I name this
238:40 - classes
238:42 - and
238:45 - objects okay
238:48 - okay let me just increase the font size
238:50 - and we can just get my main method
238:56 - okay so here you can see one class is
239:00 - declared okay public class classes and
239:03 - objects okay so as I have taught you
239:05 - over here you know in my notes okay it
239:09 - holds methods Constructors blocks and
239:12 - nested classes so right now this class
239:15 - is holding one main method main is a
239:18 - method method name okay and what what
239:20 - here here we have written it holding
239:22 - method constructed okay class is nothing
239:24 - but the uh one place where you in in
239:27 - which you have writing methods all those
239:30 - uh interfaces and code okay and here I
239:35 - can do whatever I want like just I will
239:38 - print one statement
239:42 - and low
239:44 - world and if I click here
239:49 - okay so it it will get that class and it
239:53 - will run that class okay just wait
239:57 - let me run this class
240:00 - okay so here you can see hello world is
240:03 - getting printed on the console what
240:05 - internally Java does is uh our class is
240:08 - this classes and objects okay dot Java
240:11 - this this is our file and whenever I
240:14 - click on the Run button it converts that
240:16 - dot Java file this file into a DOT class
240:19 - file the dot class file is then again
240:22 - used by the jvm and it uh it is
240:25 - converted uh into the byte code and
240:28 - which is the machine understandable code
240:30 - and our code get executed in the console
240:32 - okay so this is the behind the scene how
240:34 - this works okay and now I will give you
240:38 - an example of the object also so that
240:41 - you can understand clearly uh instead of
240:44 - writing here I will wait okay forgot let
240:48 - me just create one new class for you so
240:51 - that you can understand clearly
240:54 - okay uh so this this is our class and
240:59 - here
241:00 - wait let me just create one method okay
241:04 - uh
241:06 - print
241:09 - and this method is better than accepting
241:12 - anything and this method is simply
241:13 - printing
241:17 - hello world message on the screen
241:21 - okay so I have created another class
241:23 - name objects and one method is there
241:26 - inside this class name print and this
241:28 - method is doing nothing just simply
241:29 - printing the hello world on the screen
241:31 - okay so let me just clear it out uh
241:33 - comment it out
241:35 - and how to create an object okay so this
241:38 - is one part uh listen carefully so to
241:42 - create an object you have to write the
241:44 - class name
241:46 - sorry objects and then you have to write
241:51 - the what name you are giving to an
241:53 - object okay so name can be anything like
241:56 - this anything you want you name that
241:59 - object okay so I will name this as obj1
242:04 - because it's my first object so you can
242:06 - write anything okay so after that here
242:09 - you can see we we have also created uh
242:11 - this object during our project itself
242:13 - okay after that you have to write new
242:17 - then again the class name
242:19 - and this okay so you'll be wondering you
242:23 - know why I have not passed over
242:24 - something over here because in if you
242:26 - are following the series you you can see
242:28 - we have passed something over here
242:29 - that's because our we have created one
242:31 - Constructor of this class we will cover
242:33 - in depth quarter look at the Constructor
242:35 - in our upcoming videos also okay so now
242:38 - for till now you just understand how to
242:40 - create an object okay so this is where
242:42 - we just have to write the class name the
242:45 - object name and the new keyword is used
242:46 - to memory memory allocation of that
242:49 - object okay and after that using that
242:51 - object I can call all those methods and
242:54 - construct trade which are written inside
242:55 - this class okay so I will write obj1
242:58 - dot Sprint okay so here you can see and
243:03 - I will just click on this
243:07 - run button and here you can see again
243:10 - hello world is getting printed on the
243:12 - console I have con I have commented out
243:15 - this uh let me just clearly again so
243:19 - that you guys can understand clearly
243:21 - okay hello well it's printed on the
243:23 - console how it is working internally
243:24 - just uh look at here one object is
243:27 - objects object is the class name we
243:29 - create an object object one we use the
243:31 - new keyword to uh allocate the memory of
243:33 - the to our object and using that object
243:35 - we have called one print method of that
243:39 - class okay one print method is here and
243:41 - uh the egg call get executed uh call
243:45 - Gates over here wired print is called
243:48 - and executed and inside this we have
243:51 - written one South print statement
243:54 - that is hello world and this hello world
243:56 - is getting printed on the console the
243:57 - program execution comes here and comes
244:00 - here and Main methods gets over and our
244:02 - program gets terminated
244:04 - okay so this is pretty much about the
244:06 - classes and objects in Java so I hope
244:09 - you guys have get got some idea of the
244:11 - about the classes and objects in Java so
244:13 - in our upcoming videos we will cover uh
244:16 - I guess methods uh which is the next
244:18 - part of the object oriented programming
244:20 - language so thank you guys for watching
244:21 - this video
244:26 - tutorial Series so today we are covering
244:28 - methods in Java and so
244:32 - in general a method is a way to perform
244:34 - some tasks similarly the method in Java
244:36 - is a collection of the instructions that
244:38 - performs a specific task like if you if
244:41 - you want to perform a set of instruction
244:42 - uh multiple times you can make make it
244:45 - as a one method and you can you can call
244:47 - that method again and again whenever you
244:48 - want to okay and it provides a
244:51 - reusability of the code and we can
244:52 - easily modify the code using methods
244:56 - so basically there are two types of
244:58 - methods in Java one is predefined and
245:00 - one is user defined methods in Java okay
245:03 - so we will talk for first Let me just
245:06 - talk about the main method okay so just
245:09 - the main method that we have written
245:12 - over here that is public static World
245:14 - Main this is the main method and this is
245:17 - entry point where our Java code is
245:19 - getting executed first line by line okay
245:22 - so in in general this is the structure
245:26 - or the syntax of the methods public int
245:28 - sum int A and B where the public is the
245:31 - access specifier uh end is the return
245:33 - type and sum is the method name and
245:36 - integer a comma integer B inside the
245:39 - circular processes basis are parameter
245:41 - list and all together this is the method
245:44 - header and inside the curly basis we
245:47 - will write the method body and the
245:48 - method signature okay so we will cover
245:51 - in our upcoming videos what is X
245:53 - specifier method name so to till now uh
245:56 - just uh see One X specify should be
245:59 - there one return type of the mat of that
246:01 - method should be there and Method name
246:03 - should be there and inside the circular
246:04 - basis the parameters which which the
246:06 - method is accepting that we have to
246:08 - write over there okay uh so first type
246:11 - is predefined methods okay so predefined
246:14 - methods are nothing but the methods
246:15 - which are already refined inside the
246:17 - Java
246:18 - okay the methods which are already
246:20 - defined in Java and Java class libraries
246:23 - is known as the predefined methods and
246:25 - it is also known as the standard Library
246:27 - methods or the built-in methods so we
246:30 - will see some examples of this
246:32 - predefined methods also when we coding
246:34 - code it and some user user defined
246:37 - method also user defined methods are
246:39 - methods which are defined by us to
246:42 - perform some set of instructions okay
246:46 - and let's try let's look into the types
246:50 - of methods okay this well first one is
246:52 - the static method a method that is
246:54 - static keyword is used is known as a
246:57 - static method in other words a method
246:58 - that belongs to a class rather than the
247:01 - instance of the class is known as the
247:03 - static method what I have said is assume
247:06 - it like whenever we create a class we
247:09 - create an object of that class and when
247:11 - we create the object of the class the
247:12 - memory is allocated to that class uh if
247:16 - you're not okay if you know if we not
247:18 - create the object of that class the
247:19 - memory is not getting allocated to that
247:21 - class and when we create a method as
247:24 - static method it belongs to the class
247:27 - rather than the instance of the class
247:28 - instance of the class is the object of
247:30 - the class okay and we can also create
247:33 - the static method by using the key
247:34 - keyword static before the method name
247:37 - okay so next one is instance method the
247:40 - method of the class is known as the
247:42 - instant method it is non-static Method
247:45 - Define ins inside the class it is the
247:47 - normal method which is in your declared
247:49 - inside the class and it is not not
247:50 - static one before calling or invoking
247:52 - the instance method it is necessary
247:54 - necessary to create an object of its
247:56 - class uh like here you can see in a
247:59 - previous previous video we have created
248:01 - one class and we have created object of
248:03 - the class and then and then only we can
248:05 - uh call that print matter print method
248:09 - which is written inside this object
248:11 - class okay so this is an example of the
248:13 - instance method
248:15 - uh and third one is the abstract method
248:17 - the abstract method does not have any
248:19 - body and it is known as abstract method
248:22 - and in other words without an
248:23 - implementation it is known as the
248:25 - abstract method it means we just declare
248:28 - the method inside a class uh which is
248:31 - abstract and the implementation of that
248:34 - implementation part of that method is
248:36 - done in inside another class or another
248:38 - method okay
248:40 - uh it always declares and it has a
248:42 - abstract class we will cover this
248:44 - abstract class in our inheritance and
248:47 - inheritance and encapsulation uh oops
248:50 - Concepts there you can get this abstract
248:53 - method more clearly and it this it means
248:56 - the class itself must be abstract if it
248:58 - has abstract methods if you want to
249:01 - declare a method as abstract the class
249:03 - which in which the method is declared
249:06 - should be abstract okay to create an
249:08 - abstract method we use abstract keyword
249:10 - before it okay
249:12 - so let's get into our IDE and see some
249:16 - example
249:18 - of it okay
249:20 - let me give you an example of the
249:23 - predefined methods okay so here I can
249:26 - declare
249:28 - integer a
249:32 - um well assign it will be zero and
249:36 - let me just create one
249:39 - scanner
249:41 - so that I can take the input from the
249:43 - user
249:52 - okay and now here if I write
249:56 - a is equals to SC Dot
250:01 - next int
250:03 - okay so here we did nothing we just
250:06 - declared one variable a and we have
250:09 - taken input from the user and assign it
250:12 - to the value a okay
250:14 - so
250:16 - here I can write something like
250:21 - okay so wait here
250:24 - let me just see highest
250:27 - if you want to get a maximum array a
250:31 - maximum element from an array and we can
250:33 - just simply write
250:34 - out
250:37 - the maximum
250:41 - number it's
250:44 - and I will concat it with
250:47 - math Dot Max
250:53 - of
250:55 - let's suppose I will write 10 comma a
250:59 - okay
251:02 - so here you can see uh math is a class
251:06 - which is written inside the Lang package
251:08 - main package is Java and inside which uh
251:11 - one one more package is that name Lang
251:13 - and inside Lang package we have a math
251:16 - class and inside math class One Max Max
251:19 - uh method is there here you can see uh
251:22 - one public static int Max int a into B
251:25 - and we are passing two parameters to it
251:28 - one is 10 and one is a a is value we are
251:31 - inputting uh input to the program and it
251:34 - will compare the both the integer values
251:38 - and it will return the value which is a
251:41 - greater with the maximum okay so this is
251:44 - the example of the predefined uh
251:46 - predefined methods in Java let me just
251:49 - run this
251:51 - here you can see hello world is getting
251:53 - printed and it it was asking for a
251:55 - number
251:56 - so if I enter 5 it should give me the
251:59 - output the maximum number is 10 because
252:01 - when we compare 10 and 5 the 10 is the
252:04 - greater one or let me just run it again
252:08 - and I will give import such as 15. here
252:11 - you can see the maximum number is 15
252:12 - because 15 is greater than 10 okay so
252:16 - this is the example of the predefined
252:18 - methods and for the user defined methods
252:21 - we have already did it here you can see
252:23 - uh this is one we use the defined method
252:25 - I have written some set of instruction
252:27 - in this
252:29 - okay
252:30 - and I have created one object of that
252:32 - class and we are calling that method
252:35 - using that object of the class okay so
252:38 - this is pretty much about the method in
252:40 - our upcoming videos we will be covering
252:44 - okay Constructor in Java okay so thank
252:47 - you for watching this video
252:50 - hello and welcome back to another video
252:52 - without tutorial Series so today we will
252:54 - be covering Constructors in Java so what
252:57 - are Constructor in Con in Java a
252:59 - Constructor is a block of course uh
253:01 - similar to the method it is called when
253:03 - the instance of the class is created
253:05 - that means whenever the whenever create
253:08 - an object The Constructor will get
253:10 - automatically called okay at the time of
253:12 - the calling of the Constructor memory
253:14 - for the object is allocated inside the
253:16 - memory
253:17 - okay uh whenever we create an object uh
253:20 - the memory is get allocated to that
253:22 - class inside the memory okay and the
253:25 - rules for the configurating a
253:27 - Constructor in Java there are there are
253:29 - two rules defined for the Constructor
253:31 - Constructor name must be same as as that
253:34 - of the class name uh let's suppose you
253:39 - have created one class name
253:42 - ABC
253:43 - okay
253:45 - ABC
253:48 - and inside that class if you want to
253:51 - declare the Constructor for that class
253:53 - then the Constructor should be a b c and
253:57 - the other constructory accepted in the
253:59 - parameter it depends upon you and inside
254:01 - this you will write code for that
254:05 - Constructor okay
254:08 - construct
254:11 - Ure goes here
254:16 - you'll see in our coding part also in
254:20 - detail
254:21 - and second second rule is a Java
254:23 - Constructor cannot be abstract static
254:25 - final or synchronized you cannot cannot
254:29 - use these keywords before declaring The
254:31 - Constructor like abstract a here you can
254:34 - see abstract ABC a final ABC static ABC
254:38 - this is not allowed in Java you have to
254:40 - if you want to create a Constructor for
254:42 - that class simply write the class name
254:44 - and inside the circular circular basis
254:47 - you will write the parameter that
254:49 - constructory is accepting
254:51 - okay so there are basically two types of
254:54 - Constructor in Java one is default
254:55 - Constructor and one is
254:56 - uh parameterized Constructor so let's
255:00 - first see what is default Constructor
255:02 - and let me get into my IDE and I will
255:05 - create one new Java class
255:07 - name Constructor
255:11 - let me increase the font size I will
255:14 - write main method here okay uh I will
255:18 - declare one another class
255:21 - class ABC I will get that example itself
255:26 - and inside this if I want to create one
255:30 - default Constructor one default
255:32 - Constructor is nothing but
255:34 - a Constructor that is called default
255:36 - when it doesn't have any parameter okay
255:38 - so if I write this like this
255:43 - and if I insert this if I write out
255:47 - hello
255:50 - World okay so here you can see over we
255:53 - have declared one Constructor for that
255:55 - ABC class and inside the circular basis
255:58 - we have not uh passing any parameter to
256:00 - it okay so this is this is an example
256:02 - for the default Constructor to invoke
256:06 - this Constructor we will simply go in
256:07 - our main method and create an object for
256:10 - this class okay one thing I am missing
256:12 - naming convention in Java class name
256:15 - should always start from the capital
256:16 - letter
256:18 - ABC okay now it's correct uh if I want
256:22 - to create an object
256:24 - as we have discussed in our previous
256:26 - video uh if you want to create an object
256:29 - simply write the class name and write
256:31 - the object name that you want new ABC
256:36 - and inside here I am not passing any
256:39 - parameter because the Constructor of
256:41 - that class doesn't uh accepting any
256:43 - parameter okay uh in new line I will
256:46 - just
256:47 - now I will not do anything I will just
256:49 - create that object and simply run this
256:52 - program
256:54 - now here you can see in console hello
256:58 - world is getting printed okay why this
257:00 - is so because we are created an object
257:03 - of the
257:07 - okay so now we will look into the
257:09 - parameterized Constructor so Constructor
257:11 - which has a specific number of the
257:13 - parameters is known as The parameterized
257:14 - Constructor
257:16 - and we will see one example of the
257:18 - parameterized Constructor over here and
257:22 - okay
257:25 - let me give you an example
257:28 - if I write like this okay so if I write
257:31 - integer a
257:34 - command T sorry
257:37 - integer B
257:40 - okay now here you can see a intelligent
257:44 - idea is throwing error because it was it
257:46 - was telling me expected two arguments
257:48 - but found zero now this is this is this
257:50 - is the example of the parameterized
257:52 - Constructor where the Constructor of a
257:53 - class is accept accepting one
257:55 - better some parameters and we need to
257:58 - pass that parameter inside there uh
258:01 - Constructor when we whenever we create
258:03 - an object of that class okay
258:05 - now I will pass here something 15 sorry
258:10 - 15
258:12 - comma 20. okay uh it uh this Constructor
258:16 - is accepting two integer values and I
258:19 - have passed 5922 The Constructor okay
258:21 - and inside this Constructor we will be
258:23 - doing some operation using that uh two
258:26 - integers let me just print
258:31 - a plus b
258:34 - and print
258:37 - a minus B
258:42 - print
258:44 - a into B
258:47 - print
258:49 - a divided by B these are some basic
258:51 - operation math mathematical operations
258:52 - that I have performed here uh the
258:54 - purpose of telling this is uh whenever
258:56 - you create an object where the the
258:58 - parameterized Constructor though we have
258:59 - to pass that parameters to that
259:02 - Constructor there itself and the
259:04 - Constructor will get those parameters
259:07 - values and process the information
259:09 - according to this
259:11 - okay and now if I run this
259:14 - it will print me
259:17 - okay so here you can see 20 plus 15 is
259:20 - 35 uh a minus B that is 15 minus uh 20
259:23 - is minus five or a into B is the 20 into
259:26 - 15 C uh 300 and uh a divided by a
259:29 - divided by B uh 15 divided by 20 is uh
259:33 - it is giving me zero because I have uh
259:35 - both the variables are in integer and
259:37 - and such is always coming if the both
259:40 - operators are integer answer is also
259:42 - coming in integer itself okay so this is
259:45 - pretty much about the default and
259:46 - parameterized Constructor uh let me
259:49 - check if I'm missing something okay uh
259:52 - we have to see one difference of between
259:55 - the Constructor and methods because
259:57 - and here you can see the Constructor is
260:00 - not different pretty much different from
260:02 - the method because we in method also we
260:05 - would write the return type and if I
260:07 - write a b c
260:10 - and this is the this is our method there
260:14 - is no difference between this method and
260:18 - Constructor so let's see the difference
260:20 - a constructory is used to initialize the
260:22 - state of an object and whether the
260:24 - whereas the method is used to expose the
260:27 - behavior of an object okay and the
260:29 - method must have a return type the
260:30 - Constructor must not have a written time
260:33 - here you can see we didn't write any
260:35 - written statement for the Constructor
260:37 - and for that method we we have to write
260:39 - the return statement unless and until
260:41 - the method method written type is void
260:44 - okay
260:45 - and the Constructor is invoked
260:47 - implicitly implicitly because whenever
260:49 - we create an object we we don't writing
260:51 - any uh
260:52 - like this obj dot ABC we are not writing
260:57 - like this this is this says we are
261:00 - writing only for the methods okay and
261:03 - methods are called using this
261:06 - object name okay the methods invoke
261:08 - explicitly in Java compiler provides a
261:11 - default Constructor if you don't have
261:12 - any Constructor in the class uh and and
261:15 - the method is not provided by the
261:17 - compiler in any case the Constructor
261:19 - must have the same name as that of the
261:21 - class name here you can see ABC is there
261:23 - and Constructor name is also ABC and the
261:26 - method name may vary a way may or may
261:29 - not be same as the class name you can
261:31 - write it as same as daughter of the
261:34 - class name or you can give any name
261:36 - whatever you want okay
261:38 - so this is pretty much about the
261:40 - difference between the construction
261:42 - method and in our upcoming video we will
261:45 - be discussing about
261:47 - static and disk keyword in Java thank
261:49 - you for watching this video
261:52 - hello and welcome back to the another
261:53 - Studio of the Java tutorial Series so
261:55 - today we are covering a static keyword
261:57 - in Java so the static keyword in Java
262:00 - used for the memory memory management
262:01 - purpose only and we can you apply the
262:05 - static keyword with variables methods
262:07 - block nested classes uh like so for for
262:10 - example one method is there ABC I can
262:13 - write static ABC or one variable I have
262:16 - to declare integer a static int a that
262:19 - that is how I can do it and the static
262:21 - keyword belongs to the class that an
262:23 - instance of the class
262:25 - okay the static can be a variable can be
262:29 - static and a method can be static okay
262:32 - so we will see some basic syntax how the
262:35 - static variable is declared inside the
262:37 - class uh let's suppose we have class
262:39 - class student and inside this integer
262:42 - roll number uh variable name roll number
262:44 - is there of type int string name and
262:47 - college string College iits this is a
262:50 - simple class with that we have declared
262:52 - an example of static variable okay we
262:56 - will see one example uh in our IDE and
262:59 - before that you have to here is the
263:01 - pictorial dependent representation of
263:03 - the how static
263:04 - uh gear variables are work okay so here
263:08 - where we have declared one two variable
263:11 - S1 and S2 and inside the stack memory S1
263:13 - and S2 are there and hip memory is there
263:17 - uh as soon as it was object of that
263:19 - class student and here you can see we
263:22 - have created two object F1 and H2 inside
263:24 - stack memory and inside Heap memory
263:26 - id111 is there and name current for S1
263:30 - S1 object and for S2 object uh id22 and
263:34 - name Aryan is there okay and inside okay
263:39 - wait a minute guys
263:42 - okay so where we are here we have
263:44 - created uh two objects S1 and H2 and we
263:47 - have assigned the value of our ID and
263:49 - name for each of the objects and here
263:52 - you can see uh one static
263:55 - variable called College of type string
263:58 - is declared and college name is its okay
264:01 - so this is the class area and this is
264:03 - how the static static variables are work
264:05 - uh College its is assigned to both of
264:09 - those object S1 and S2 okay and and
264:12 - these objects are uh separate the
264:15 - college name its is separate this is not
264:18 - inside the hip memory this is actually
264:20 - inside the class area this is how the
264:23 - static static variables work and we will
264:25 - see you an example of the static method
264:27 - so that you can understand it clearly
264:29 - okay wait
264:32 - okay so let's get into our IDE and C1
264:37 - example of the static method okay
264:42 - so here I am inside my IDE let me just
264:45 - click here new Java class
264:49 - new Java class and I will declare
264:52 - whether it's
264:54 - great
264:58 - that take
265:03 - third
265:05 - okay and inside this I will write
265:11 - let me just increase the font size
265:15 - okay and now it
265:19 - okay so here I have declared one static
265:21 - method let me import my
265:24 - main method
265:27 - yes okay now
265:32 - silly okay let me get here inside this
265:36 - okay uh let me create one class name as
265:40 - calculate
265:42 - oh wait let me do all those stuffs
265:46 - inside this itself
265:48 - okay I will declare one
265:51 - static variable in
265:56 - Q back
266:02 - okay not this you know what let me get
266:07 - another example so that you guys can
266:10 - understand it more clearly okay let me
266:12 - just create last
266:15 - student
266:17 - however this one this I will I have to
266:19 - take I am taking this example itself
266:21 - okay class student is example okay so
266:24 - that you guys you guys can understand
266:25 - more clearly okay and I will declare one
266:28 - hint
266:29 - roll number
266:32 - after that
266:34 - string
266:36 - name for holding the student name and I
266:39 - will declare one static variable here a
266:41 - static string
266:44 - College
266:47 - is equal to i t s okay I have declared
266:52 - it as a static so this is a this is this
266:54 - will be stored inside the class area not
266:56 - the Heap memory and all the object uh
266:58 - all the objects are getting to the stack
267:01 - area okay
267:02 - here and after this I will write
267:07 - static
267:09 - sorry
267:11 - static Point change
267:18 - this is one method and I'm changing my
267:22 - college name to something known as
267:26 - let's suppose bbdi t
267:30 - just a random string okay
267:33 - and here I will declare one Constructor
267:36 - for this class
267:38 - uh so I hope you guys know how to
267:40 - declare the Constructor how to create a
267:42 - Constructor
267:43 - and for this Constructor I am requiring
267:45 - one two two parameters
267:48 - one is r r represent has the row number
267:51 - of the student and the string and I
267:52 - represent the name of the student okay
267:56 - and now insert this I will assign those
267:59 - values to the variables that I've
268:01 - declared over here
268:03 - are
268:05 - and name
268:09 - equals to n okay
268:12 - so now I have declared one created one
268:15 - variable declared the Constructor
268:18 - okay
268:20 - now I will create one another method
268:23 - name void display
268:27 - and inside this method I will just print
268:32 - the my roll number and
268:35 - okay
268:37 - so I will write
268:40 - roll number
268:42 - concat it with the roll number that we
268:44 - have declared over there and again
268:49 - name and I will assign the name it as
268:52 - name
268:54 - okay this is pretty much this method is
268:57 - going to do and inside my
269:00 - main class that is this static method
269:02 - class where we have declared our main
269:04 - method I will write I will create one
269:09 - variable for for not available object
269:12 - okay I will create the object of that
269:15 - class
269:17 - I will write student
269:20 - Dot first of all
269:23 - change okay and after that I will create
269:27 - a
269:31 - student S1 I will create first object of
269:35 - this class and I have to pass to
269:40 - uh way parameters because the
269:43 - Constructor is accepted accepting the
269:44 - two parameters
269:47 - one one is type of string and one is
269:49 - type of integer so let's suppose I am
269:52 - writing 0 1 as my roll number of that
269:55 - student and name of the student is
269:58 - something
270:00 - Harry
270:05 - and I will similarly I will create two
270:09 - more
270:10 - object of this class
270:13 - and goes here one goes here I have to
270:16 - give name some different name to this
270:19 - object this one is to S3 and these
270:23 - students have roll numbers like this
270:26 - and one's name is
270:28 - Joey
270:30 - one's name is veeru
270:33 - okay so these are the students and I
270:36 - have created those variable objects also
270:39 - now I have to do I have to display the
270:42 - name and uh roll number of the students
270:44 - for that I have created a separate
270:47 - function or the method S1 dot display S2
270:51 - Dot
270:54 - display
270:56 - S3 dot display okay all these methods
271:01 - will called and according to that roll
271:03 - number and name of the student gets
271:06 - printed on the console okay now if I run
271:09 - I'll end this code
271:11 - oops sorry I have done the previous code
271:16 - itself and let me run this with this one
271:19 - oh okay so here you can see roll number
271:22 - one name Harry roll number two name j
271:24 - roll number three uh name Vero okay
271:29 - and now let me hide this terminal
271:32 - this is pretty much about the static uh
271:35 - keyword and static variable and I go I
271:39 - hope you guys that have got some idea
271:41 - about the static keyword uh so in our
271:44 - upcoming videos we will look into the
271:46 - this keyword in Java thank you for
271:48 - watching this video
271:52 - hello and welcome back to the another
271:53 - video of the Java tutorial Series so
271:55 - till now we have covered class objects
271:58 - and I guess static keyword in Java and
272:02 - today onwards we will be learning
272:04 - inheritance in Java so I will be
272:06 - dividing inheritance in two videos in
272:09 - this video we will be talking about the
272:11 - theoretical theoretical part of the
272:13 - inheritance what is inheritance why it
272:15 - is required and what are the different
272:16 - terms which is which are used in The
272:19 - Inheritance and in the second video we
272:21 - will be discussing about the types of
272:23 - inheritance because there are basically
272:25 - five types in are there in inheritance
272:29 - and we will be discussing each type
272:30 - using the example code example okay so
272:34 - let's just get started uh so what is
272:36 - inheritance inheritance in Java is a
272:38 - mechanism in which one object acquires
272:41 - all the property and the behavior of the
272:43 - parent object so basically there are two
272:45 - terms are here
272:47 - subclass or the child class or the
272:50 - parent class okay parent class is the
272:52 - class whose properties are inherited by
272:55 - the child class child class uses the
272:57 - property which are declared inside the
272:58 - parent class and it is important it is
273:02 - important part of the object oriented
273:03 - programming system and inheritance
273:05 - represents the is a relationship which
273:08 - is also known as parent child
273:09 - relationship okay and you may ask why to
273:13 - use inheritance in Java okay so there
273:15 - are basically two reasons for method
273:17 - overriding so that we will discuss what
273:20 - is method overriding in our upcoming
273:21 - videos uh basically it it is used to
273:24 - achieve the runtime polymorphism in Java
273:27 - and for the code reusability code
273:30 - reusability means uh suppose we you have
273:34 - declared some variables and the methods
273:35 - inside the parent class and those
273:37 - methods and variables are required for
273:39 - you to write in in the another class uh
273:42 - and then instead of writing those
273:44 - variables and methods again and again
273:45 - you can just inherit the properties of
273:47 - that method and variable from the parent
273:50 - class to the child class in that case uh
273:54 - one is one becomes the parent class
273:55 - whose properties can get getting
273:57 - initiated and child class becomes the
274:00 - class whose profit who's inheriting the
274:03 - property okay
274:05 - so there are different terms which are
274:06 - used in inheritance one is class a class
274:09 - is a group of objects which have common
274:10 - properties it is a template of blueprint
274:13 - from which objects are created uh as we
274:16 - have discussed in our previous videos
274:17 - and subclass and the child class
274:20 - subclass is the class which inherits the
274:22 - other class as I have told you the child
274:25 - class will inherit the properties from
274:27 - the parent class and superclass slash
274:30 - parent class is the class whose
274:32 - properties are getting inherited by the
274:34 - child glasses and reusability as the
274:37 - names specifies religiability is a
274:39 - mechanism which gives you to reuse the
274:43 - fields and the methods of the existing
274:45 - class when you create a new class and
274:47 - you can use the same fields and methods
274:50 - already defined in the previous class so
274:52 - for achieving The Inheritance in Java we
274:55 - have the syntax uh we have to write this
274:57 - in this syntax class sub class name you
275:00 - can write here the subclass name and
275:03 - extend is the keyword which is used to
275:05 - Java and the super class name and inside
275:08 - the curly basis you can write a write
275:11 - ordinary to the properties which you
275:12 - want to inherit from the building parent
275:14 - class okay so this is pretty much about
275:17 - the inheritance in Java theoretical part
275:18 - uh from the next video onwards we will
275:21 - be looking into the types of the United
275:23 - States that there are single multi-level
275:25 - hierarchical multiple and hybrid there
275:28 - are five types of initials in Java and
275:30 - one more thing multiple inheritance is
275:32 - in Java is not supported and we can
275:35 - still achieve it but there is one thing
275:38 - uh concept that you to know how to
275:40 - achieve the multiple inheritance in Java
275:42 - that way that also we will be looking
275:44 - into the when we are going into the
275:46 - abstracts and encapsulation part
275:48 - okay so for now uh this is pretty much
275:52 - about the United NC Java and from next
275:54 - video onwards we will be saving seeing
275:56 - uh each type in detail with code example
275:59 - thank you
276:02 - and then welcome back to the another
276:03 - video without tutorial Series so today
276:05 - uh we are seeing in inheritance in Java
276:08 - part two where wherein will be disc
276:10 - discussing each and every type of
276:13 - inheritance in Java and there are
276:15 - basically five types of five types are
276:17 - there single multi-level hierarchical uh
276:20 - multiple and hybrid and as you know
276:22 - multiple inheritance is not supported in
276:25 - Java
276:26 - uh we'll discuss why not it is not
276:28 - supported in Java in our later videos
276:30 - but for now we will see in this video
276:34 - particularly we will seeing into a
276:37 - single and multi-level inheritance in
276:39 - Java so let me just open my IDE
276:48 - okay so here you can see a single level
276:51 - inheritance is nothing but one class is
276:54 - generating the properties of an another
276:56 - class uh like Class A is parent class
276:59 - here and Class B is innate in the
277:01 - property of the
277:02 - Class A okay so we'll see when a short
277:07 - example of single level inheritance I
277:09 - will just write a new class
277:12 - inheritance
277:15 - let me increase the font size
277:19 - I will import the main main method
277:22 - and now
277:26 - I will declare one method inside this
277:31 - uh for that before that I will create
277:33 - one class called
277:36 - animal
277:41 - inside this club I will declare one
277:44 - method name as eight
277:46 - and this method is not accepting any
277:48 - parameters any return type is also valid
277:51 - that's why it is not returning anything
277:53 - else
277:54 - I will just print
277:58 - eating
278:00 - now I will create another class
278:08 - name as dog
278:10 - and as we discussed in our early video
278:13 - uh for implementing The Inheritance we
278:16 - use the keyword extends I will write
278:18 - extends animal
278:23 - so here uh dog is a subclass or the
278:26 - child class and the animal is the parent
278:28 - class or the superclass okay and their
278:32 - dog class is inheriting the properties
278:34 - which are properties of the animal class
278:36 - now I will create one method here
278:39 - name as bark
278:43 - and I will just simply print
278:46 - marking
278:49 - okay now inside my main class that is
278:53 - the inheritance class and inside my main
278:55 - method I will create
278:58 - the object of the doc class
279:01 - let me call it as dog1
279:06 - is equals to new dog
279:09 - okay and I have created the object of
279:12 - the glass and I will write D dot bark
279:17 - let's take the dog one dot work
279:20 - and
279:22 - dog1.8
279:26 - sorry and now if I run this class
279:33 - um
279:35 - here you can see uh barking anything is
279:37 - getting printed on the console because
279:39 - uh in animal class that is apparent
279:41 - parent class we have written the void
279:43 - method avoid eat method uh which which
279:45 - is printing eating on the console and
279:49 - inside the dog we have a bark method and
279:52 - which is printing working and using the
279:55 - object of the doc class that is dog one
279:58 - we are just calling the method bark and
280:01 - eat so here you can see we are we have
280:03 - written the implementation part of the
280:05 - eat method inside the animal class that
280:07 - is the parent class and still we are
280:09 - using it uh by the creating the object
280:12 - of the dark class because we have
280:13 - inherited the properties of the animal
280:16 - class inside the dock class that's why
280:19 - so this is the simple example of this uh
280:22 - single level in inheritance
280:24 - and next we have multi-level inheritance
280:27 - so
280:29 - let me just go here and I will
280:33 - create one another class name as
280:37 - multi-level
280:40 - inheritance
280:43 - now let me just increase the font size
280:47 - we'll add my main method
280:50 - and as you can see here multi-level
280:53 - inheritance is nothing but multiple
280:55 - classes are in inheriting uh the
280:57 - properties as you can see here uh Class
281:00 - C is inheriting the properties of the
281:02 - Class B and Class B is generating the
281:04 - properties of Class A okay so we will
281:06 - Implement try to implement this inside
281:08 - our code
281:10 - so I will take the same example as we
281:12 - have taken with a single single level
281:14 - inheritance
281:16 - uh I will just copy this animal class
281:20 - inside
281:22 - this class
281:28 - k y is throwing error
281:31 - typically class found in HR oh sorry we
281:35 - have already written the cinema class
281:37 - over here
281:39 - let me just comment this out
281:42 - so that intelligent ID will not throw
281:45 - the errors
281:47 - okay here we have
281:50 - this animal class and one dog class is
281:54 - also I require
281:57 - and I will just copy this doc class also
282:06 - okay and
282:08 - I will require another
282:10 - class so that I can
282:13 - have three classes which I need
282:16 - inheriting the properties
282:18 - of animal class and I will write
282:22 - new class class name let's suppose baby
282:26 - dog
282:27 - and which is
282:31 - inheriting the properties of
282:34 - dog
282:38 - and it has its own method known as void
282:43 - well let's suppose whip
282:46 - and I will just simply print
282:50 - whipping
282:52 - okay here you can see uh one parent
282:55 - class is their NM animal and each method
282:57 - is there and dog is extending the
282:59 - extending the animal class and baby dog
283:02 - is extending the doc class so here here
283:06 - you can see one class in editing the
283:09 - another class and another that class is
283:11 - also inheriting the properties of the
283:12 - main main parent class
283:14 - okay so simply we will create the object
283:18 - of the Davido class let's suppose dog
283:21 - one
283:24 - is equal to new baby dog
283:28 - okay and now if I write
283:33 - dog1 Dot
283:36 - whip
283:37 - whip is the method I guess this is what
283:41 - sorry I have written wrong here
283:44 - now it's okay uh web
283:48 - and dog one dot
283:51 - bark
283:54 - dogon Dot
283:56 - it
283:58 - now if I run this class
284:01 - now it should output should be whipping
284:04 - uh barking and eating here you can see
284:06 - now
284:08 - now in hierarchical and uh
284:11 - hybrid we will discuss in the next video
284:14 - and we will also discuss why multiple
284:16 - units is not supported in Java thank you
284:18 - for watching this video
284:20 - hello and welcome back to another video
284:21 - of the Java tutorial Series so today we
284:24 - are covering the remaining types of
284:26 - inheritance that is hierarchical
284:27 - inheritance and we will see why the
284:29 - multiple units is not supported in Java
284:31 - okay so let me get into my IDE I will
284:35 - create one new class
284:37 - name
284:39 - hierarchical inheritance
284:47 - inheritance
284:50 - okay and let me increase my font size
284:55 - I will include the main method
284:58 - okay so what is hierarchical inheritance
285:01 - is when two or more classes inherits a
285:04 - single class means let's suppose uh one
285:08 - class a is there and whose properties
285:09 - are getting inherited by the class two
285:11 - classes that is Class B and Class C at
285:13 - the same time in the example uh we'll
285:16 - see one example let let's just get
285:18 - started
285:19 - I will create one
285:21 - class name as
285:23 - animal
285:25 - and inside that
285:27 - I will create one method which it
285:30 - doesn't written anything that is why I'd
285:31 - eat
285:32 - and this method doesn't accepting any
285:35 - parameters and I will simply print
285:39 - eating
285:40 - these are some simple examples to under
285:43 - just to understand what is hierarchical
285:46 - inheritance we will cover a complex
285:49 - example in our upcoming videos also and
285:51 - another one is class dog which is
285:56 - extending the class
285:59 - animal
286:01 - and inside this I will create another
286:04 - let's suppose what doc does bark
286:07 - I'll create one method name as Spark
286:10 - and we'll simply print
286:15 - working
286:19 - okay uh and one more class is required
286:23 - let's suppose class cat
286:27 - and
286:29 - this class is also
286:33 - extending
286:34 - animal class
286:37 - and inside this I will create one more
286:39 - method name is meow
286:43 - which doesn't accept any parameter and
286:46 - inside this I will write
286:50 - meowing
286:52 - m-e-o-w-i-n-g meowing
286:54 - okay so our goal is to achieve
286:58 - hierarchical inheritance here uh let's
287:00 - suppose this is the parent class I will
287:02 - write one comment over here
287:05 - parent
287:08 - class and
287:10 - this dot class is the
287:14 - child
287:16 - class one
287:17 - and this is
287:21 - child
287:24 - class 2.
287:27 - okay and inside this I will write
287:31 - it now I will write my main method now
287:35 - let me copy this from here
287:38 - and I will paste it over here
287:42 - my main method okay and inside my main
287:45 - method I will create a one object of the
287:48 - cat class
287:50 - cat C is equals to new
287:53 - cat
287:55 - okay and I'll
287:58 - I will call wait a minute
288:00 - I'm getting error
288:03 - and it cannot be referenced from a
288:05 - static const text
288:09 - we terminate
288:13 - yeah
288:15 - let me get let me write the static all
288:19 - static because we are calling them
288:21 - inside a static method okay so that's
288:24 - why I'm getting one error available at
288:26 - all the highest right now ah yes okay
288:31 - and I will call C Dot
288:36 - meow
288:38 - and again C Dot
288:41 - eat because it is inheriting the
288:44 - properties of the animal class and eight
288:45 - method is written inside the animal
288:46 - class so that we can call that eat
288:49 - method using the object of the cat and
288:52 - now I will write one more
288:54 - line here but I'm commenting out
288:57 - initially
288:58 - and I will write sorry not it bark
289:04 - okay
289:05 - and now if I run this
289:10 - the expected output should be meowing
289:13 - and eating let's see here you can see me
289:16 - moving and eating is getting printed on
289:18 - the console and now if I comment remove
289:21 - this comment
289:23 - and if I try to run this
289:27 - here you can see it it gave me error
289:30 - because location variable C is type
289:33 - hierarchical index.cat and you know it
289:36 - is telling me that this is compile time
289:38 - error guys I will commit it out
289:41 - CT errors means compile time error
289:45 - this error occurs because we uh here you
289:49 - can see we are in this is the parent
289:51 - class animal class and this is the cat
289:53 - and dog class these are the child
289:54 - classes which are animating the
289:55 - properties of this and we are extending
289:58 - this is this is the cat class and we are
290:00 - extending extending the properties of a
290:01 - class there is no linking between the
290:03 - class C and Class B and we are trying to
290:05 - access the methods which are written
290:07 - inside the class B using the object of
290:09 - the Class C that is not possible here
290:11 - and that's why uh Java is throwing
290:12 - errors a compile time error this is this
290:16 - can not be done inside Java
290:18 - okay I will comment it out and I will
290:21 - run run it again
290:24 - now it's working fine okay
290:27 - I hope you guys understood The
290:29 - hierarchical Inheritance in Java and now
290:32 - let's talk about why multiple nutrients
290:34 - is not supported in Java so in multiple
290:37 - entrances what here you can see
290:40 - one
290:41 - two parent class one one class is there
290:44 - which is child class which is inheriting
290:46 - the properties of the two different
290:47 - parent classes in class A and Class B
290:49 - are the parent classes and Class C is
290:51 - the child class and Class C is trying to
290:53 - inherit the properties of the Class A as
290:55 - well as the class B at the same time
290:57 - okay this is not supported in Java why
291:00 - so to reduce the complexity and simplify
291:03 - the language multiple ingredients is not
291:05 - supported in Java uh I will give give
291:07 - you one scenario where a a b and c are
291:11 - the three classes here you can see
291:13 - and Class C is in it inherit the
291:15 - property of the Class A and B if Class A
291:18 - and B have the same methods and you call
291:20 - it from the child class object means
291:22 - class let's suppose one method is there
291:25 - void it and in class A as well as the
291:28 - class B and we are trying to call the
291:30 - this void eat method inside Class C this
291:33 - creates an ambiguity
291:35 - for the class C to whom the coil which
291:39 - class method should it call class
291:41 - whether the class A and Class B since
291:43 - the compile time errors are better than
291:45 - the runtime errors Java renders the
291:46 - compile time error if you inherit the
291:48 - two classes okay so whether you have the
291:51 - same method or the different method
291:52 - there will be the compile time error so
291:54 - to remove this ambiguity Java doesn't
291:57 - support multiple inheritance
291:59 - but there is a way you can achieve
292:01 - multiple area times in Java that is
292:03 - using any interfaces and we will cover
292:06 - interfaces in our upcoming videos when
292:08 - we will be talking about the
292:09 - polymorphism in Java so right now uh
292:12 - just understand that multiple entities
292:14 - is not supported in Java just to
292:17 - simplify the language and remove the
292:19 - ambiguity which is created here
292:22 - Java doesn't support multiple hand
292:24 - returns so thank you guys for watching
292:25 - this video I'll see you in the next one
292:28 - hello and welcome to the new Aid of the
292:29 - Java tutorial Series so today we will be
292:31 - covering aggregation in Java
292:34 - so till now we have covered uh in
292:36 - inheritance in Java and inheritance
292:38 - represents is a relationship and
292:40 - aggregation represents has a
292:42 - relationship I will tell you what what
292:44 - exactly this is uh so let's start this
292:48 - video If a class has an entity reference
292:50 - it is known as the aggregation and
292:52 - aggregation represents a has a
292:53 - relationship okay because so consider a
292:56 - scenario where employee objects contain
292:58 - many information such as ID name email
293:01 - ID Etc it contains one more object that
293:03 - is named address so address contains so
293:06 - many fields like city state country zip
293:08 - code Etc
293:10 - okay uh so when to use aggregation and
293:13 - why to use aggregation so for y you can
293:17 - use aggregation for code reusability and
293:20 - when to use aggregation if the code
293:22 - reuses is also the best achieved by the
293:24 - aggregation when there is no is a
293:27 - relationship is a relationship is
293:29 - handled using uh inheritance and has a
293:32 - relationship is inside aggregation
293:34 - inheritance should be used only if the
293:37 - relationship is a either is maintained
293:39 - throughout the lifetime of the object
293:41 - involved otherwise aggregation is the
293:43 - best choice okay so I will cover one
293:46 - example
293:46 - uh that I have discussed earlier of the
293:49 - employee address so let me get into my
293:52 - IDE
293:54 - and I will create one new Java class
293:55 - name as
293:57 - aggregation
294:01 - let me increase the font size
294:07 - I will include my main method
294:11 - okay so I require one more class
294:14 - to hold the address of the employee
294:18 - I will name it as
294:21 - class
294:23 - address
294:25 - okay and inside this
294:30 - public static okay and insert this I
294:33 - will write string I will get City
294:39 - state
294:40 - and Country of that employee
294:46 - okay and
294:47 - I'll write one Constructor
294:50 - so public
294:52 - address
294:55 - and I will receive three parameters one
294:59 - is City
295:01 - one is state
295:05 - and another one is
295:09 - country
295:12 - and inside this I will map all those
295:16 - strings to the string that I have
295:17 - declared above that is City this
295:19 - velocity is equals to City
295:22 - uh again this Dot
295:26 - state is equals to state
295:30 - this dot country
295:35 - is equals to
295:39 - country
295:40 - okay
295:41 - so this declared one address class and
295:46 - one Constructor of the address class it
295:48 - which receives the three parameters city
295:50 - state and Country for that employee
295:56 - uh so I have created one address class
295:59 - which holds the address of the employee
296:00 - and now inside my main method public
296:04 - class I will write
296:07 - in ID which is uh
296:10 - receive the ID and string name to
296:13 - receive the employee's name and I will
296:16 - create
296:18 - address of type address
296:22 - this is where we are implementing
296:23 - aggregation in Java because we are
296:25 - receiving the address of the employee in
296:27 - in the format of address and this add
296:31 - format of the address we had declared
296:33 - over here which received the city state
296:34 - and control of the employee
296:37 - okay and I will write now one method
296:41 - Public Employee
296:45 - which receives the ID of the employee
296:49 - and string name of the employee
296:55 - and wait a minute
297:01 - aggregation
297:07 - in ID string name and address of type
297:11 - address
297:17 - okay so we have created
297:20 - Constructor for this class aggregation
297:22 - and upon create when we create a object
297:26 - of this class ID and name and address of
297:29 - the employees
297:30 - will receive and map those
297:34 - variable with this
297:38 - this Dot
297:42 - ID is equals to ID
297:46 - this dot name is equals to name
297:53 - this Dot
297:55 - address equals to
297:58 - address let me check why I'm getting
298:02 - this error
298:05 - unexpected token
298:08 - wait a minute I should write Constructor
298:14 - outside the main method
298:18 - and all this declaration should be done
298:22 - I'll set the
298:24 - limit
298:25 - now it's okay
298:29 - and I need one more method to display
298:31 - the information of the employee
298:36 - void display
298:40 - um
298:40 - system.out.printlain
298:44 - print the
298:48 - ID
298:51 - ID Plus
298:56 - name
299:01 - of that employee
299:06 - trans name okay and below that I will
299:10 - print the address of that employee
299:12 - and address
299:13 - here you can see we have created address
299:15 - in the format of City then State and
299:18 - then
299:19 - country so I need to print in that
299:22 - format also
299:23 - address Dot
299:26 - City
299:27 - and then
299:29 - one space should be there
299:31 - address Dot
299:34 - state
299:36 - open space and then
299:40 - address Dot
299:43 - country
299:45 - this will print the address of the
299:47 - employee
299:55 - employee okay
299:57 - now inside my main method I will create
299:59 - the object of this classes to create the
300:02 - employee and I will create so now I have
300:05 - created a address one and address two of
300:07 - the employee and I have created two
300:10 - employees okay now I just need to
300:13 - display the information that we have got
300:16 - from this
300:17 - address one and employee one so to
300:21 - imprint that I will just simply call
300:23 - employee one dot display
300:27 - and employee two dot display okay
300:32 - and now now I will run this
300:36 - it should print the employee ID employee
300:38 - name and address of the employee okay so
300:40 - here you can see id101 name Jack a
300:43 - Mumbai Maharashtra India and ID 102 name
300:47 - hack and XYZ is the city uh State and
300:51 - Country of that employee so here you can
300:54 - see we can this by creating the separate
300:57 - class for the address we are reusing
301:00 - that code for to to create the multiple
301:03 - instances of the employee we just need
301:06 - to create one address for that employee
301:08 - and we we can pass it over here as in
301:10 - parameter to the employee class employee
301:13 - object sorry
301:14 - so in this way we can achieve a
301:16 - aggregation in Java so thank you for
301:18 - watching this video
301:21 - hello and welcome back to the new video
301:22 - of the Java tutorial Series so today we
301:24 - will be covering method overloading in
301:25 - Java so what is Method overloading if a
301:28 - class has a multiple methods having the
301:30 - same name but there are different differ
301:32 - in parameters okay then it is known as
301:35 - method overloading if the two methods
301:37 - are there which names are same for
301:40 - example sum is the name of the two
301:42 - methods but so that so how we can defer
301:45 - the two methods okay so when the
301:48 - parameter one if the one method is
301:51 - accepting two two parameters and another
301:53 - one is accepting one or either more than
301:55 - two not not exactly two and then it is a
301:58 - type of a method overloading in Java
302:00 - okay where the same name method has the
302:03 - same name but they differ in the
302:04 - parameters they are accepting okay
302:06 - so if we have to perform only one
302:08 - operation having the same name or the
302:10 - methods increase the readability of the
302:12 - program okay suppose you have to perform
302:14 - a addition of the two given numbers but
302:17 - there can be any any number of the
302:19 - arguments okay if if you write the same
302:21 - method such as int a uh
302:25 - method name is a and it is accepting two
302:28 - parameters of type integer integer okay
302:30 - for the two parameters and another one
302:31 - is int B which is accepting as a three
302:34 - parameter int okay for three parameters
302:37 - then it it may be difficult for you as
302:39 - well as the other programmers to
302:40 - understand the behavior of the method
302:42 - because it's it has this it has the same
302:45 - name differs okay so we perform the
302:47 - method overloading to figure out the
302:49 - program quickly okay and what are the
302:52 - advantages of the method overloading
302:53 - method overloading increase the
302:55 - readability of the program okay and so
302:58 - let's just talk about the different ways
303:00 - to over overload a method okay so there
303:03 - are two methods uh by which you can
303:05 - overload the method method overloading
303:07 - by changing the number of the arguments
303:09 - uh the method is accepting and the
303:12 - method overloading by changing the data
303:13 - type of the argument which is accepting
303:15 - okay
303:17 - so let me just quickly go into my IDE
303:21 - we'll cover this popular question also
303:23 - uh but but let first we will code
303:27 - C1 example of the method overloading
303:30 - then we will see some popular method uh
303:33 - questions sorry
303:34 - okay method
303:36 - our loading
303:39 - okay let me increase the font size
303:43 - and first we will see a example of the
303:48 - method overlading by changing the number
303:50 - of the arguments okay let me copy this
303:52 - and I will give it a comment okay and
303:56 - now
303:57 - okay so let me take
304:00 - one example okay uh
304:02 - what I can do is I will declare one
304:06 - method name as
304:08 - int
304:10 - add and it is accepting the two
304:12 - parameter let's suppose into a and
304:17 - B okay and inside this I'm simply
304:20 - returning
304:23 - a plus b nothing else okay and I will
304:27 - introduce one more method
304:31 - which is inside this same class
304:33 - which is static
304:36 - int
304:38 - add
304:39 - same name of the method here you can see
304:41 - add is the method name and here also add
304:43 - is the method name but what I what I
304:45 - will do is I will change the number of
304:47 - the parameters it are accepting okay now
304:49 - int a comma int B
304:54 - comma in C
304:57 - and I will simply return
305:00 - a plus b plus sorry
305:05 - C
305:07 - fine
305:09 - okay I will I will return this okay okay
305:12 - so now I will create my main method and
305:16 - inside my main method I will
305:19 - print
305:22 - add
305:24 - off
305:26 - uh let's suppose 11 comma eleven okay
305:31 - and now again I will print one more
305:35 - statement uh once again guys
305:39 - okay so I will just print
305:44 - call another method now I am giving 11
305:48 - comma 11 comma eleven here you can see
305:52 - us method name or same add and add but
305:54 - they are differ in the parameters they
305:56 - are accepting one method is accepting
305:58 - the two parameters one another method is
305:59 - accepting the three parameters okay so
306:02 - this is the example of the method
306:03 - overloading changing the number of the
306:05 - arguments we are passing okay and simply
306:07 - I will run this
306:09 - class
306:11 - and you're guessing 11 plus 11 that is
306:14 - 22 for the first uh print statement and
306:16 - another pin statement 11 plus 11 plus 11
306:19 - is that is 33 is getting printed on the
306:22 - console okay so another meth another way
306:24 - to achieve the method overloading is
306:26 - changing the data type of the argument
306:28 - okay
306:29 - so I will just copy this
306:34 - and paste it over here
306:42 - okay so now
306:45 - let me comment this out
306:50 - okay
306:51 - now I will
306:54 - again I will have to declare one int
306:57 - method okay I will copy this and I will
306:59 - paste it over here and let me
307:03 - uncomment it okay one add method is
307:06 - there which is returning uh addition of
307:08 - the two methods two numbers A and B and
307:11 - one another method is there name is
307:14 - static
307:16 - double
307:19 - add
307:22 - and it it accepts two parameters double
307:25 - A
307:27 - comma double
307:29 - B
307:31 - okay and now it will return the addition
307:35 - of this
307:37 - two numbers okay
307:41 - okay now I will write my main method
307:44 - and inside my main method I will print
307:47 - call those methods add
307:50 - what I had to give 11 comma eleven
307:56 - and for another print statement I will
307:59 - call another ad
308:02 - method
308:05 - but this time I will pass
308:07 - uh
308:08 - 11.2 comma 11.5
308:14 - 11.5
308:19 - okay so here you can see uh two same
308:22 - method same two methods having the same
308:25 - name and same number of parameters that
308:27 - are accepting one add method is
308:29 - accepting to two parameters integer a
308:31 - and integer B and another uh method
308:33 - which is accepting the two parameter
308:34 - that uh that is a and b but they are
308:36 - different in the return type they are
308:38 - returning okay the first method is
308:40 - returning uh in integer and second
308:43 - method is in returning and double so
308:45 - this is a way we can achieve the method
308:48 - overloading by changing the data type of
308:50 - the argument okay argument here in it
308:53 - receive it it was receiving in the
308:54 - integer format and here it was receiving
308:56 - the double format okay and so now if I
308:59 - run this
309:00 - class
309:02 - I should get the okay 11 plus 11 is 22
309:06 - and 11.2 plus 11 11.5 is 22.7 so these
309:11 - are the two methods by which you you can
309:12 - achieve
309:14 - method overloading in Java one one is
309:16 - changing the arguments and another one
309:18 - is changing the data type of the
309:20 - argument okay some popular question
309:21 - which is asks frequently uh during the
309:25 - interview process uh of method
309:27 - overloading one is why method
309:28 - overloading is not possible by changing
309:30 - the return type of the method only okay
309:32 - so in Java method overloading is not
309:34 - possible by changing the return type of
309:36 - the method only because of the ambiguity
309:38 - let's see how the ambiguity May occurs
309:40 - okay so I will take one example
309:43 - uh let me go let me get into my class I
309:47 - will increase the font size
309:49 - and here I will create one same method
309:52 - same example I am taking
309:55 - let me print
309:59 - okay okay and now I will
310:02 - be writing the same double method also
310:05 - okay I will
310:06 - just copy this
310:08 - and paste it over here
310:11 - and comment this
310:14 - okay uh so all these steps let me
310:18 - introduce a new class
310:26 - adder
310:28 - and inside this I will write these two
310:30 - method okay and now inside this I will
310:35 - write my main method and main method I
310:38 - will simply
310:41 - print
310:44 - adder
310:45 - sorry
310:46 - header dot add
310:50 - 11
310:51 - comma 11.
310:54 - okay
310:57 - so here you can see I've created one two
310:59 - methods uh int add and double add they
311:03 - are written there the return type of the
311:06 - two methods are different that is inth
311:08 - and one is it returning a double okay
311:11 - and now if I come here and try to print
311:15 - this statement add a DOT add 11 comma
311:17 - eleven it will create an ambiguity
311:20 - why so
311:22 - here you can see
311:25 - in IntelliJ IDEA is telling me there's
311:29 - some error and what is what's there add
311:31 - int is already defined in Adder so it
311:35 - creates an ambiguity for the Java
311:37 - it it for here you can see we are
311:41 - calling this add method 11 comma eleven
311:44 - but the return types are different one
311:46 - is double and one is integer but the
311:48 - number of the parameters they are
311:49 - accepting are the same and the type of
311:51 - the parameters they are acting accepting
311:53 - is are also same it creates an ambiguity
311:56 - for the Java programming language
311:57 - and it can't differentiate the two
312:00 - methods are there of the different types
312:02 - okay so this creates an ambiguity and
312:05 - one more question is there can we
312:07 - overload the Java main method
312:10 - yes by Method overloading you can have
312:13 - the number of the main methods in the
312:15 - class by Method overloading but the jvm
312:17 - calls main method which receive the
312:19 - string array as an argument only okay so
312:22 - here you can see we are passing this is
312:24 - the main method and jvm received this
312:26 - main method and our program execution
312:28 - starts from this line number 38 and it
312:31 - accepts the arguments of type string
312:33 - array okay here you can see we are
312:35 - passing a argument of type string array
312:39 - and let's this is how you can overload
312:43 - the main method also in Java okay so
312:46 - thank you for watching this video
312:49 - hello and welcome back to the new video
312:50 - of the Java tutorial Series so today we
312:52 - will be covering method overloading in
312:53 - Java so what is Method overloading if a
312:56 - class has a multiple methods having the
312:58 - same name but there are different differ
313:00 - in parameters okay then it is known as
313:02 - method overloading if the two methods
313:04 - are there which names are same for
313:08 - example sum is the name of the two
313:10 - methods but so that so how we can defer
313:12 - the two methods okay so when the
313:16 - parameter one if the one method is
313:18 - accepting two two parameters and another
313:20 - one is accepting one or either more than
313:23 - two not not exactly two then it is a
313:26 - type of a method overloading in Java
313:28 - okay where the same name method has the
313:31 - same name but they differ in the
313:32 - parameters they are accepting okay
313:34 - so if we have to perform only one
313:36 - operation having the same name or the
313:38 - methods increase the readability of the
313:40 - program okay suppose you have to perform
313:42 - a addition of the two given numbers but
313:44 - there can be any any number of the
313:47 - arguments okay if if you write the same
313:49 - method such as int a uh
313:52 - method name is a and it is accepting two
313:55 - parameters of type integer integer okay
313:57 - for the two parameters and another one
313:59 - is int B which is accepting as a three
314:02 - parameter int okay for three parameters
314:05 - then it it may be difficult for you as
314:07 - well as the other programmers to
314:08 - understand the behavior of the method
314:10 - because it's it has this it has the same
314:13 - name differs okay so we perform the
314:15 - method overloading to figure out the
314:17 - program quickly okay and what are the
314:19 - advantages of the method overloading
314:21 - method overloading increase the
314:22 - readability of the program okay and so
314:26 - let's just talk about the different ways
314:28 - to over overload a method okay so there
314:31 - are two methods uh by which you can
314:33 - overload the method method overloading
314:35 - by changing the number of the arguments
314:37 - uh the method is accepting and the
314:40 - method overloading by changing the data
314:41 - type of the argument which is accepting
314:43 - okay
314:44 - so let me just quickly go into my IDE
314:49 - we'll cover this popular question also
314:51 - uh but but let first we will code
314:55 - C1 example of the method overloading
314:58 - then we will see some popular method uh
315:01 - questions sorry
315:02 - okay method
315:04 - overloading
315:07 - okay let me increase the font size
315:11 - and first we will see a example of the
315:15 - method overlading by changing the number
315:17 - of the arguments okay let me copy this
315:20 - and I will give it a comment okay and
315:24 - now
315:25 - okay so let me take
315:27 - one example okay uh
315:30 - what I can do is I will declare one
315:33 - method name as
315:35 - int
315:38 - add and it is accepting the two
315:40 - parameter let's suppose into a and
315:45 - B okay and inside this I'm simply
315:48 - returning
315:51 - a plus b nothing nothing else okay and I
315:55 - will introduce one more method
315:58 - which is inside this same class
316:01 - which is static
316:04 - int
316:05 - add
316:07 - same name of the method here you can see
316:08 - add is the method name and here also add
316:11 - is a method name but what I what I will
316:13 - do is I will change the number of the
316:15 - parameters it are accepting okay now int
316:18 - a comma int B
316:21 - comma in C
316:25 - and I will simply return
316:27 - a plus b plus sorry
316:32 - C
316:35 - fine
316:36 - okay I will I will return this okay okay
316:40 - so now I will create my main method and
316:44 - inside my main method I will
316:46 - print
316:50 - add
316:52 - off
316:54 - uh let's suppose 11 comma eleven okay
316:59 - and now again I will print one more
317:02 - statement uh once again guys
317:07 - okay so I will just print
317:12 - call another method now I am giving 11
317:16 - comma 11 comma eleven here you can see
317:20 - us method name or same add and add but
317:22 - they are differ in the parameters they
317:24 - are accepting one method is accepting
317:26 - the two parameters one another method is
317:27 - accepting the three parameters okay so
317:30 - this is the example of the method
317:31 - overloading changing the number of the
317:33 - arguments we are passing okay and simply
317:35 - I will run this
317:37 - class
317:39 - and you can see 11 plus 11 that is 22
317:42 - for the first print statement and
317:44 - another pin statement 11 plus 11 plus 11
317:46 - is that is 33 is getting printed on the
317:49 - console okay so another meth another way
317:52 - to achieve the method overloading is
317:54 - changing the data type of the argument
317:56 - okay so I will just copy this
318:02 - and paste it over here
318:10 - okay so now
318:13 - let me comment this out
318:18 - okay
318:19 - now I will
318:22 - again I will have to declare one int
318:25 - method okay I will copy this and I will
318:27 - paste it over here and let me
318:31 - uncomment it okay one add method is
318:34 - there which is returning uh addition of
318:36 - the two methods two numbers A and B and
318:39 - one another method is there name is
318:42 - static
318:44 - double
318:47 - add
318:50 - and it it accepts two parameters double
318:53 - A
318:55 - comma double
318:57 - B
318:59 - okay and now it will return the addition
319:03 - of this
319:05 - two numbers okay
319:09 - okay now I will write my main method
319:12 - and inside my main method I will print
319:14 - call those methods add
319:17 - what I had to give 11 comma eleven
319:24 - and for another print statement I will
319:27 - call another ad
319:30 - method
319:32 - but this time I will pass
319:35 - uh
319:36 - 11.2 comma 11.5
319:42 - 11.5
319:47 - okay so here you can see uh two same
319:50 - method same two methods having the same
319:53 - name and same number of parameters that
319:55 - are accepting one add method is
319:57 - accepting to two parameters integer a
319:58 - and integer B and another uh method
320:01 - which is accepted the two parameter that
320:02 - that is a and b but they are different
320:04 - in the return type they are returning
320:06 - okay the first method is returning uh in
320:09 - integer and second method is in
320:11 - returning and double so this is a way we
320:15 - can achieve the method overloading by
320:17 - changing the data type of the argument
320:18 - okay argument here in it receives it it
320:21 - was receiving in the integer format and
320:23 - here it was receiving the double format
320:25 - okay and so now if I run this
320:28 - class
320:30 - I should get the okay 11 plus 11 is 22
320:34 - and 11.2 plus 11 11.5 is 22.7 so these
320:39 - are the two methods by which you you can
320:40 - achieve
320:41 - method overloading in Java one one is
320:44 - changing the arguments and another one
320:46 - is changing the data type of the
320:48 - argument okay some popular question
320:49 - which is asked frequently uh during the
320:52 - interview versus uh div of method
320:54 - overloading one is why method
320:56 - overloading is not possible by changing
320:58 - the return type of the method only okay
321:00 - so in Java method overloading is not
321:02 - possible by changing the return type of
321:04 - the method only because of the ambiguity
321:06 - let's see how the ambiguity May occurs
321:08 - okay so I will take one example
321:11 - uh let me go let me get into my class I
321:14 - will increase the font size
321:16 - and here I will create one same method
321:20 - same example I am taking
321:23 - let me print
321:27 - okay and now I will
321:30 - be writing the same double method also
321:33 - okay I will
321:34 - just copy this
321:36 - and paste it over here
321:39 - and comment this
321:42 - okay uh so all these steps let me
321:46 - introduce a new class
321:54 - adder
321:56 - and inside this I will write these two
321:58 - method okay and now inside this I will
322:03 - write my main method and main method I
322:06 - will simply
322:09 - print
322:11 - adder
322:13 - sorry
322:14 - header dot add
322:18 - 11
322:19 - comma 11.
322:22 - okay
322:25 - so here you can see I've created one two
322:27 - methods into add and double add they are
322:31 - written there the return type of the two
322:34 - methods are different that is inth and
322:36 - one is it returning
322:38 - a double okay and now if I come here and
322:42 - try to print this statement add a DOT
322:44 - add 11 comma eleven it will create an
322:47 - ambiguity
322:48 - why so
322:50 - here you can see
322:53 - in IntelliJ IDEA is telling me there's
322:56 - some error and what is what's there add
322:59 - int is already defined in Adder so it
323:03 - creates an ambiguity for the Java
323:05 - it it for here you can see we are
323:09 - calling this add method 11 comma eleven
323:12 - but the return types are different one
323:14 - is double and one is integer but the
323:16 - number of the parameters they are
323:17 - accepting are the same and the type of
323:19 - the parameters they are acting accepting
323:21 - is are also same it creates an ambiguity
323:23 - for the job programming language
323:25 - and it can't differentiate the two
323:28 - methods are there of the different types
323:30 - okay so this creates an ambiguity and
323:33 - one more question is there can we
323:35 - overload the Java main method
323:38 - yes by Method overloading you can have
323:40 - the number of the main methods in the
323:42 - class by Method overloading but the jvm
323:44 - calls main method which receive the
323:46 - string array as an argument only okay so
323:50 - here you can see we are passing this is
323:52 - the main method and jvm received this
323:54 - main method and our program execution
323:56 - starts from this line number 38 and it
323:58 - accepts the arguments of type string
324:01 - array okay here you can see we are
324:03 - passing a argument of type string array
324:07 - and let's this is how you can overload
324:11 - the main method also in Java okay so
324:13 - thank you for watching this video
324:16 - hello and welcome back to the new videos
324:17 - tutorial Series so today we will be
324:20 - covering method overriding in Java so
324:23 - what is Method overriding uh if subclass
324:25 - that means a child class has the same
324:27 - name the same method name as declared in
324:30 - the parent class and it is known as a
324:31 - method overriding in Java in other words
324:33 - if a subclass provides the specific
324:36 - implementation of the method that has
324:38 - been declared by one of its parent class
324:40 - then it is known as method overriding we
324:42 - will see what it is by
324:46 - getting one real life example and next
324:49 - we will see uses of the method
324:51 - overriding so method overriding is used
324:53 - to provide the specific implementation
324:55 - of a method which is already provided by
324:57 - its superclass
324:58 - for example one method is there which is
325:01 - declared in the parent class and in some
325:03 - implementation parties also declared in
325:05 - the parent class and you just need to
325:07 - you have to get that method inside our
325:10 - subclass so you simply write extends
325:13 - that parent class and keyword uh to
325:15 - inherit the properties of the parent
325:17 - class and you can use that same method
325:19 - name inside the subclass and get that
325:22 - implementation in our subclass so method
325:25 - overriding is used for the runtime
325:27 - polymorphism and next up we will see
325:31 - rules for Java method overriding the
325:34 - method overriding must have the same
325:36 - name as in the parent class so the the
325:39 - name of the method should be same in
325:41 - both the classes one is parent class and
325:43 - the subclass
325:45 - the method must have the same parameters
325:47 - as in the parent class so the number of
325:50 - the parameters that the method is
325:52 - accepting in the parent class should be
325:54 - same as that of the number of the
325:56 - parameters it was accepting in the
325:58 - subclass and there must be a is a is a
326:01 - relationship which represents the
326:03 - inheritance in Java
326:04 - okay and let's understand the problem
326:07 - without method over a method overriding
326:10 - and we will see how how it fixes by
326:12 - using the method overriding so let me
326:15 - open my IDE
326:23 - okay it's opening weight
326:27 - we'll see one example uh how method
326:30 - overriding fixes one problem
326:33 - okay we'll see first problem uh
326:36 - okay so let me
326:39 - create my new Java class
326:43 - method
326:46 - over
326:49 - riding
326:52 - okay let me increase the font size
326:59 - okay uh now suppose let me declare one
327:03 - more class
327:04 - so that I can Define differentiate
327:07 - between the parent class and subclass I
327:09 - will create one class
327:11 - vehicle
327:18 - okay and inside that I will declare one
327:21 - method which isn't written anything
327:23 - that's why right void as a return type
327:25 - and inside that
327:28 - I will simply print
327:34 - vehicle is running
327:40 - and now this public class method
327:43 - overriding is extending that
327:46 - vehicle class
327:48 - so I will write extend
327:53 - vehicle
327:55 - and now uh
327:58 - inside this I will write my main method
328:00 - and inside that I will create the object
328:04 - of the disk method overriding class
328:07 - method overriding obj1
328:13 - new method overriding
328:16 - and using this object obj1 obj1 I am
328:21 - calling the run method
328:24 - and now if I
328:26 - run this class
328:30 - the expected output should be vehicle is
328:32 - running
328:34 - yes vehicle is running and now now you
328:37 - see the problem is that I have to
328:38 - provide a specific implementation of the
328:40 - run method in the subclass that is that
328:42 - is why we use the method overriding okay
328:44 - so here also
328:47 - now you'll see uh how it eliminates this
328:50 - problem
328:51 - okay let me comment this out
328:59 - one more class I required
329:03 - with the same name
329:07 - again inside this I will write the same
329:10 - method first void run
329:17 - and inside this I will simply print
329:21 - because
329:24 - running
329:26 - okay and now uh one more class public
329:30 - class I will just copy this code
329:37 - foreign
329:43 - class is actually in extending the
329:45 - vehicle class and now inside this
329:49 - I will write the same method that I have
329:53 - written earlier void run
329:59 - and inside this
330:02 - and simply print
330:06 - my kids
330:08 - running okay
330:12 - now I will declare my main method
330:16 - and inside this I will create the object
330:19 - of the method overriding class that is
330:21 - obj1 is equals to new
330:25 - method overriding
330:27 - and using this object obj1
330:30 - and call obj1 Dot run
330:34 - now we'll see uh how method overriding
330:37 - eliminates this problem okay
330:40 - and here you can see bike is running
330:41 - okay now uh this run method is also
330:44 - declared inside this uh vehicle method
330:46 - uh vehicle glass sorry and which is
330:49 - printing vehicle is running and same
330:51 - method by the same name we have written
330:53 - inside this public class method
330:54 - overriding which is extending the
330:56 - vehicle class so vehicle class is the
330:57 - parent class and this method overriding
331:00 - is a child class and inside this run
331:03 - method I have written a bike is running
331:05 - and when when we call this obj1 dot run
331:08 - it will call the subclass method which
331:11 - is this and we'll see how to call if
331:15 - there is the same two methods are there
331:17 - by the same name and you are trying to
331:19 - achieve the method overriding and if you
331:21 - want to call the method which is
331:23 - declared inside the parent class then we
331:25 - will we will use some one specific
331:27 - keyword is there super keyword we will
331:29 - see what is it what it is in our
331:31 - upcoming videos uh super keyword is used
331:34 - to call the method which is declared
331:36 - inside the parent class
331:38 - and now you now we will see when real
331:42 - life example of method overriding so
331:46 - that you can understand it clearly
331:48 - okay and let me just comment this out
331:55 - wait
331:58 - okay
332:01 - Let Me Clear My terminal okay now we are
332:04 - here uh
332:06 - now you see I will create one
332:10 - class name as bank and we as we know we
332:15 - have every bank has their interest rate
332:18 - okay so I will write one
332:21 - variable get
332:26 - weight of
332:31 - interest okay
332:33 - get rate of interest
332:36 - so this is the My Method name and this
332:38 - method is simply returning
332:41 - zero
332:43 - okay
332:46 - okay I have declared one method get rate
332:48 - of interest and it doesn't accepting any
332:50 - parameters and the return type of the
332:53 - method is zero okay it returns nothing
332:56 - it returns zero and I will now I create
332:59 - a one more class
333:01 - let's suppose any Bank SBI
333:06 - which is extending
333:09 - the bank class
333:12 - and now inside this I will write int
333:18 - get
333:21 - rate of
333:24 - the interest and I will pass
333:29 - and I will return
333:32 - eight
333:34 - uh similarly I will create one more one
333:36 - more Bank class okay
333:39 - any Bank you want let's suppose ICICI
333:44 - which is extending the bank class
333:49 - inside this I will write
333:52 - again the I will generate the override
333:55 - the same
333:56 - method which is declared inside the bank
333:58 - class get rate of
334:02 - interest
334:05 - now I will return inside this
334:09 - return let's suppose seven
334:13 - okay and now we will declare our public
334:16 - class I will just copy the
334:20 - this Lane
334:22 - and I'll paste it over here
334:26 - and yes
334:31 - okay and now in this class is extending
334:36 - okay nothing okay now if I get inside my
334:42 - public class I will declare my main
334:44 - method and inside my main method I will
334:47 - create the object of the SBI class SBI
334:52 - obj1
334:55 - is equal to new SBI
334:58 - and I will create
335:01 - object of the ici7 also obj2 it equals
335:06 - to new
335:08 - series here okay I've created
335:11 - all the object and now I will simply
335:13 - print
335:15 - I will print
335:18 - SBI
335:22 - interest is
335:25 - and I will concatenate it with
335:29 - obj1 dot get rid of interest and I will
335:33 - simply copy this because same code will
335:36 - require for ICICI Bank also I will paste
335:40 - it over here and change the bank name
335:43 - okay and object name also because object
335:47 - for ICICI Bank is obj2 and now if I run
335:51 - this
335:56 - and here you can see SB interest is 8
335:58 - and ICICI say Bank interest is zero well
336:02 - I saw all right sorry I'm I've written
336:06 - interest spelling wrong
336:08 - interest
336:14 - okay now it's okay if I run run this
336:17 - class again
336:18 - it should print as their interest is 8
336:20 - and ICS interest is seven okay now it's
336:23 - correct now here you can see uh one base
336:26 - implementation of the rate of interest
336:28 - for every bank is there we will just
336:30 - inheriting uh extend overriding this
336:33 - methods each each and every time for the
336:36 - different banks you can create a number
336:38 - of the bank Banks over here and you will
336:41 - simply overwrite this method get get rid
336:44 - of interest and return the particular
336:47 - rate of interest for that bank okay and
336:50 - now we will see some popular questions
336:53 - which are asked for method overriding
336:56 - that is can we override a static method
337:00 - the simple answer is no a static method
337:02 - cannot be overwritten it can be proved
337:04 - by runtime polymorphism so we can learn
337:07 - it later on our upcoming videos and why
337:10 - why can we not override the static
337:13 - method uh it is because the static
337:15 - method is bound with the class whereas
337:17 - the instant method is bound with an
337:19 - object okay
337:21 - what I what it means is this style which
337:25 - method a static method is always bind
337:28 - with the class not with the object now
337:31 - whenever whenever you run this run this
337:33 - class the static the method which are
337:35 - declared as a static binds with that
337:37 - class itself not with the object here
337:39 - obj1 obj2 okay
337:41 - and static static belongs to the class
337:44 - area and instance belongs to the hip
337:46 - area we'll see what is uh stack area in
337:49 - upcoming videos and can we overwrite the
337:52 - Java main method no because the main
337:54 - method is the static method and we
337:56 - cannot override the methods which are
337:58 - declared as a static
338:00 - okay I hope you got the concept of the
338:02 - method over like overriding in Java and
338:04 - thank you for watching this video
338:07 - hello and welcome back to the another
338:09 - video of the Java tutorial Series so
338:11 - today we will be covering super keyword
338:13 - in Java so the super keyword in Java is
338:15 - a reference variable to which it is used
338:18 - to refer the immediate parent class
338:20 - object whenever you create an instance
338:23 - of the subclass and instance of the
338:25 - parent class is created implicitly which
338:28 - is referred by the super a reference
338:30 - keyword okay so it is knitting method it
338:33 - is super keyword is used to call the
338:36 - variables methods and the constructors
338:38 - of the super class okay so the uses of
338:42 - this super cubes are super keyword is
338:45 - so this there are three uses it can be
338:49 - used to uh call the immediate parent
338:52 - class instance variable
338:54 - let me write it over here
338:58 - instance variable and it is super
339:01 - keyword is uh can be used to invoke the
339:04 - in immediate parent class method parent
339:07 - class method
339:11 - and again it is a super can be used to
339:14 - invoke the immediate parent class
339:16 - Constructor
339:20 - okay so these are the three uses of the
339:23 - super keyword we will see one by one
339:26 - each of them okay let me decrease the
339:29 - font size okay so first we will see how
339:33 - we can use the super keyword to refer
339:37 - the immediate parent class instance
339:38 - variable okay so let me get into my IDE
339:41 - and I will create one new Java sorry a
339:45 - new Java class I will name it as
339:51 - super
339:55 - keyword okay now in let me increase my
339:58 - font size and I will import my main
340:01 - method okay uh so let me take one
340:05 - example so that you guys can understand
340:07 - how we can use the parent class variable
340:12 - as in
340:13 - child's class okay
340:15 - uh let me
340:17 - declare my
340:20 - parent class over here
340:22 - I will
340:24 - write animal declare one class name as
340:28 - animal
340:29 - and I will write this okay now inside my
340:34 - animal class I am getting a difficult
340:37 - class found okay okay okay okay okay
340:39 - wait wait wait wait wait in our previous
340:42 - code we have used
340:45 - this animal class I guess that's why we
340:49 - are getting uh error over here
340:53 - okay okay let me change my class name so
340:58 - something else so that we can okay now
341:00 - now it's okay fine uh inside my animal
341:03 - class I will declare one string
341:08 - color and quit
341:13 - string
341:14 - col or color
341:17 - which is equals to
341:20 - White
341:22 - okay so this is my parent class and now
341:26 - I will create one class name as
341:31 - dog I guess
341:34 - you can take anyone any animal you want
341:37 - okay dog which is
341:40 - extending the
341:43 - enemy sorry animals class now inside
341:48 - this class I will write
341:51 - string
341:53 - color
341:55 - it is equals to
341:58 - black
342:00 - okay now uh wait a second I'm getting
342:04 - okay dog is also let me create it as
342:07 - stocks okay uh now I will write one
342:10 - method void
342:14 - print
342:16 - color which doesn't accept any
342:19 - parameters and inside this method I will
342:22 - write simply
342:25 - system.out.pentel in my color
342:27 - okay now and I will write one more
342:31 - Sprint statement and now this time I
342:33 - will write
342:35 - super dot color
342:37 - okay now you you will see what is
342:39 - different exactly difference between uh
342:42 - these two statements let me just create
342:45 - the object of the talks class
342:48 - dogs
342:50 - obj1
342:52 - is equals to new dogs okay and inside
342:56 - using this objects I will
343:00 - obj1
343:01 - Dot
343:04 - print color okay now if I run this
343:08 - you will see the difference between
343:10 - these two statements one is printing
343:12 - black and one is printing white why so
343:14 - because when we write system.out.print
343:16 - Ln color that this this is referred as
343:20 - this line number six and this colors
343:23 - value of this color variable color
343:26 - variable is black and which is getting
343:27 - getting printed on the console and when
343:29 - we write super dot color this super key
343:32 - this super keyword will call this call
343:36 - is getting called to the parent class
343:39 - parent classes here class animals and
343:42 - whereas colors value is white okay so
343:46 - super dot color is white and color
343:49 - simply color when we write simply color
343:51 - the that means inside this class we have
343:54 - declared string color black so black is
343:57 - getting printed first and why it is
343:58 - getting basic printed second okay I hope
344:01 - you
344:02 - understood this concept of variables
344:05 - okay and now moving forward
344:08 - we'll see how we can Super Key how we
344:13 - can use super keyword in class methods
344:15 - okay now
344:18 - uh I will make some changes in this code
344:21 - itself okay now this time I don't need
344:25 - this string because we don't we and I
344:28 - will create void
344:31 - eight
344:33 - and inside this I will just simply write
344:39 - eating okay uh so this is the parent
344:41 - class method and now inside my dogs
344:44 - which is extending the animals class
344:46 - extends the animal class uh I don't know
344:49 - I don't need this variable right now and
344:52 - I will declare this print I guess this
344:56 - also don't don't need anymore okay now
345:00 - inside this I will write
345:03 - avoid it
345:06 - uh and
345:08 - I will print
345:11 - doggy is eating
345:14 - such a random string okay and then right
345:19 - bark
345:22 - okay and I will simply print
345:26 - barking and I will declare one more
345:31 - method
345:33 - work
345:34 - okay
345:36 - and inside this I will write
345:40 - super
345:42 - dot it okay and now after this web
345:48 - method is done I will write
345:53 - bark
345:56 - okay so wait a second let me
346:01 - write this inside this
346:05 - okay now it's okay uh we have declared
346:09 - one the dog's class which is which
346:12 - extends the animal class and inside this
346:14 - we have written void eat and so this is
346:16 - the example of the method over adding as
346:18 - we have discussed in our previous videos
346:20 - also so this it method will print dog is
346:24 - eating and this bark method will print
346:26 - barking uh now one more method is there
346:29 - name as work which is uh calling to
346:33 - methods okay super dot eat and now we
346:36 - will see
346:37 - what you what you guys thinking what
346:40 - should be printed over here why why not
346:42 - eat eat whether it is painting dog dog
346:44 - is eating or the eating
346:46 - you will see uh let me just comment this
346:49 - out and I mean next line I will write
346:52 - obj1 dot work
346:56 - and now if sorry I open it in debug mode
347:01 - wait wait wait wait
347:03 - now it's okay huh yes
347:07 - here you can see eating and barking is
347:09 - getting written on the console why so
347:10 - because when the call is at line number
347:13 - 21 super dot it will call the immediate
347:16 - parent class okay and each method we
347:19 - have declared in the parent class uh it
347:21 - is printing eating and that's why eating
347:23 - is getting printed on the console and
347:25 - when when we call Bark it's just simply
347:27 - called uh the method which is in inside
347:30 - the animal class redox class itself okay
347:32 - that is the child class and which is
347:34 - printing barking okay
347:35 - so this is a this is the one use case of
347:38 - the super keyword uh to call the
347:41 - immediate parent class method okay now
347:44 - you will see how to call the immediate
347:46 - parent class Constructor invoke no call
347:49 - we will invoke okay so in this example
347:54 - itself I will do some changes so that
347:57 - you guys can understand
347:59 - it clear okay you know what let me
348:04 - comment this out
348:06 - okay and here
348:08 - I will come in
348:10 - this also okay now inside this uh parent
348:14 - class I will declare the
348:17 - Constructor for this class okay animals
348:20 - this is the Constructor
348:22 - and this Constructor is simply printing
348:29 - animals is
348:33 - create it okay and now inside this child
348:38 - class
348:39 - we'll write
348:42 - the Constructor for this class
348:46 - wait a second it's dogs not dog and
348:50 - inside this we'll write super
348:54 - and and again one pin statement so that
348:58 - you guys can understand the code flow is
349:01 - going dog is created
349:07 - okay now if I comment this out and I
349:11 - will simply run this because here you
349:13 - can see I have not uh used that object
349:15 - and called any method and uh still now
349:18 - something is getting printed on the
349:20 - console that that is because when as we
349:22 - have discussed in our Constructor video
349:24 - The Constructor will get uh called
349:26 - automatically whenever the object of
349:28 - that class is created okay so here we
349:29 - are creating the object of the class so
349:31 - that the Constructor will get called
349:32 - automatically okay so what is happening
349:35 - over here uh in the line number 37
349:37 - whenever we create an object of that
349:39 - class obj1 the call is passed to this
349:42 - line number uh 28 okay now this line
349:45 - number 28 is executed 29 we have written
349:49 - super okay and if you hover over this it
349:52 - says that animals class is there and
349:55 - this call is passed to this animals
349:58 - class Constructor and in this
350:00 - Constructor will get executed first okay
350:01 - and it is printing animals animals
350:04 - created so the first line is animal is
350:06 - created it is it and secondly it is
350:09 - printing uh dog is created that's why it
350:12 - it prints dog is created okay one more
350:14 - thing is there uh if you don't if you
350:16 - don't write this uh
350:18 - this super at line number 29 it
350:23 - that again it is writing animals is
350:25 - created why so because whenever you
350:28 - created whenever you create the child
350:30 - class object and if that child class is
350:34 - extending one parent class then in that
350:38 - case whenever you create a create the
350:40 - child class uh Constructor it will
350:43 - automatically call The Constructor which
350:45 - is there inside the parent class okay so
350:48 - if I don't write this super super over
350:50 - here again it it will call the animals
350:54 - class Constructor if we have if you have
350:56 - declared this Constructor inside that
350:58 - class if you don't have declared it will
351:00 - not call
351:01 - okay so this is the idea behind the
351:04 - super keyword uh I hope you understand
351:06 - the super keyword in Java thank you for
351:09 - watching this video
351:12 - hello and welcome back to the new video
351:13 - of the Java tutorial Series so today we
351:15 - will be discussing final keyword in Java
351:18 - okay so the final keyword in Java is
351:21 - used to restrict the user okay the final
351:23 - Java keyword can be used in many con
351:26 - context okay the final can be a variable
351:28 - a final can be a method and a final can
351:32 - be a class okay the final keyword can be
351:35 - applied with this variable a fine a
351:37 - final variable that have no value is
351:39 - called as blank final variable or
351:41 - uninitialized final variable okay and it
351:45 - can be initialized in a Constructor only
351:47 - and the blank final variable can be a
351:50 - static also can be initialized in the
351:52 - static block only and we will be
351:55 - detailed learning of this and let's
351:58 - first learn the basic final keyword okay
352:01 - okay so what is the use cases of the
352:03 - final keyword in Java to stop the value
352:05 - change and to stop the method overriding
352:08 - and to stop the inheritance okay we will
352:10 - we will be using final keyword for these
352:13 - two for these three reasons okay so we
352:16 - will discuss first what is Java final
352:18 - variable okay so let me get into my IDE
352:21 - and I will create one more class name as
352:27 - final
352:30 - keyword okay and let me create the font
352:32 - size
352:34 - okay so though
352:36 - if you make any variable final you
352:39 - cannot change that value of that final
352:41 - variable it will be constant throughout
352:43 - the code okay so the example of the
352:45 - variable is okay so assume uh try to
352:50 - understand this example there is a final
352:51 - variable called a speed limit okay speed
352:54 - limit of that bike okay we are going to
352:56 - change the value of this variable but it
352:58 - can be changed because the final
353:00 - variable once assigned a value and
353:03 - cannot be changed anywhere in the code
353:06 - okay so let me create
353:09 - when
353:11 - class one not class inside this class
353:14 - let me create one
353:16 - final so to declare a final variable we
353:19 - will write final keyword before that
353:21 - Declaration of that variable okay so the
353:23 - final int
353:25 - so what is the way my
353:28 - variable name is speed
353:30 - limit
353:32 - which is equals to 90.
353:35 - and after that I will write void run
353:40 - now inside this
353:43 - my I will set my speed limit to
353:47 - uh any any random number 400 okay you
353:51 - can set
353:52 - whatever you want and inside again this
353:55 - I will import my main I will write my
353:58 - main method and I will create one object
354:01 - of this class okay so final keyword obj1
354:07 - is equals to new Final keyword okay and
354:11 - now if I write obj Dot run
354:16 - now
354:17 - here we can see if I run this uh
354:20 - IntelliJ IDEA is throwing some errors we
354:23 - will see what is there here you can here
354:25 - you can see Java cannot assign a value
354:27 - to a final variable speed limit so here
354:30 - you can see once that variable you once
354:33 - you declare a variable as a final and
354:36 - you assign a value to it you cannot
354:38 - change that value again okay inside this
354:41 - line number four we are we are trying to
354:43 - change the value of the speed limit to
354:44 - 400 and it is giving me error saying
354:47 - that cannot assign a value to the final
354:49 - variable speed limit because it is
354:51 - already already over here at line number
354:54 - two we have declared value to it okay
354:57 - so we'll see
354:58 - next up Java final method okay what is
355:02 - our final method we will see
355:03 - I will take the same example let me
355:07 - comment this out
355:08 - and this one also okay and inside this
355:12 - class
355:13 - itself I will write one final method
355:17 - void
355:19 - run
355:22 - now inside this I will write simply
355:25 - print
355:27 - something random string running
355:30 - okay and now
355:32 - uh inside my main method I will create
355:36 - one object of this class and I will
355:38 - write obj1. run okay
355:41 - and now if I
355:43 - call this
355:46 - it is simply printing running okay now I
355:49 - will show what is the
355:51 - consequences if you write one method as
355:55 - a final and you are trying to
355:57 - call that method inside another class
356:00 - okay and now I will let me just
356:03 - I will write one more class
356:07 - uh any name by company let's suppose BMW
356:13 - and this BMW class is extending my
356:18 - oh okay wait wait wait wait wait
356:22 - to explain this I need one more class
356:25 - which is the parent class I will declare
356:28 - it over here
356:31 - class
356:33 - bike and inside this I will write final
356:36 - void run running okay and now this is my
356:41 - BMW class and which is extending my
356:45 - by class
356:48 - and set this I will write
356:52 - avoid
356:54 - run
356:56 - and inside this I will write
357:00 - yes
357:02 - sound
357:04 - BMW is
357:07 - running okay and now if I create the
357:12 - object of this
357:14 - b m w class
357:18 - foreign
357:22 - method inside this main method
357:25 - you'll see
357:28 - when error should be there
357:31 - we'll see what is that error
357:34 - IntelliJ IDEA okay the Java run in BMW
357:37 - cannot override run in bike overridden
357:40 - method is file is final okay so here you
357:43 - can see Java is telling me that you are
357:45 - trying to override one method name as
357:48 - void run which is declared inside the
357:51 - parent class bike as a final method okay
357:54 - you cannot overwrite the final method uh
357:57 - inside any of the child class once you
358:00 - declare it as a final
358:01 - final method okay
358:03 - so this is an example of the Java final
358:06 - method you'll see Java final class
358:08 - method also example sorry not method and
358:13 - now
358:14 - uh I'll make some changes over itself I
358:18 - will declare it as final class bike okay
358:21 - and I will remove this final keyword
358:26 - from here okay nothing
358:30 - okay and now if I try to run this code
358:36 - I should get one error yes cannot
358:39 - inherit from by final bike okay uh you
358:42 - have declared this bike class as a final
358:45 - and you cannot inherit this class inside
358:48 - any of the child class okay and and you
358:50 - in like line number 19 we are trying to
358:52 - in we are trying to inherit this by
358:55 - class inside this BMW class and here
358:58 - itself IntelliJ IDEA is telling me that
359:00 - cannot inherit from final bike okay so
359:03 - this is one example of the class where
359:06 - we have declared class as a final okay
359:08 - now we'll see some popular questions
359:10 - which is asked in the interview rounds
359:13 - okay is final method inherited yes the
359:17 - final method is inherited but you cannot
359:19 - override it okay as we as we have seen
359:21 - here okay
359:23 - now one more question is there what is
359:26 - the wait let me take can we initialize
359:30 - blank final variable uh yes but only in
359:34 - the Constructor if you want to
359:36 - initialize uh here I will give you an
359:40 - example here we have written Final End
359:42 - speed limit and we have assigned it
359:44 - value as 90. if you want uh to
359:47 - initialize this variable as a blank
359:50 - variable you just simply cancel that
359:52 - assigned value as 90 and then again you
359:57 - can write it here speed limit is equal
360:00 - to 70 and if you are trying to print
360:02 - this speed limit at that time the speed
360:05 - limit will be get printed on the console
360:07 - as 400 because you have initialized over
360:09 - it over here but the only thing is you
360:11 - have to initialize the limit speed limit
360:14 - value inside the
360:15 - Constructor of that class not in the
360:17 - method so here we are written method if
360:20 - you if you write a Constructor for this
360:22 - final keyword class and inside that
360:24 - class if you write speed limit is equal
360:25 - to 400 the value of the speed limit is
360:27 - uh
360:29 - set to 400 itself okay so this is pretty
360:33 - much idea behind the final keyword in
360:35 - Java I hope you guys understood it thank
360:37 - you for watching this video
360:39 - hello and welcome back to another video
360:41 - of the tutorial Series so today we'll be
360:43 - covering abstract classes in Java so a
360:46 - class which is declared as an abstract
360:48 - keyword is known as the abstract class
360:51 - in Java and it it can have abstract and
360:54 - non-apstack methods and methods with
360:56 - body okay so before learning the
360:59 - abstract class let's understand the
361:01 - abstraction in Java first okay so what
361:04 - is abstraction abstraction is a process
361:06 - of hiding the implementation details and
361:08 - showing the only functionality to the
361:10 - user okay so so it is a it's nothing but
361:14 - another way to it shows the only
361:16 - essential things to the user and hides
361:19 - the internal details for example sending
361:22 - sms where you type the text and send the
361:25 - message you don't know how the internal
361:27 - processing about the message delivery is
361:29 - done you just only see one tick that
361:32 - that tells you that the message is sent
361:34 - successfully so abstraction displays the
361:38 - very important role over there so so
361:40 - there are several several ways where you
361:43 - can achieve the abstraction
361:46 - uh first one is the abstract class and
361:49 - second one is interface so in this video
361:51 - we'll be covering abstract class and in
361:53 - our upcoming video we will be covering
361:55 - interface okay so hashtag class in Java
361:57 - a class which declares an abstract is
361:59 - normally abstract class it can have the
362:01 - abstract and known abstract methods okay
362:03 - so there are some points that you need
362:07 - to remember
362:08 - while learning the abstract class in
362:10 - Java an abstract class must be declared
362:13 - within an abstract with an abstract
362:16 - keyword okay if you want to declare an
362:18 - extra class you have to use the abstract
362:19 - keyword before that class implementation
362:21 - okay and it can have abstract and
362:24 - non-afstrack Method and inside the
362:25 - abstract class you can declare uh
362:27 - abstract as well as the non-ab-stack
362:29 - methods and it cannot be in in
362:32 - instantiated okay what is ancient
362:34 - interest instantiated we will discuss
362:36 - and it can have Constructor and static
362:39 - methods also and it can have final
362:41 - methods which will force the subclass
362:44 - not to change the body of the method
362:46 - okay
362:47 - and what is final keyword we have to
362:48 - discussed in our past videos and there
362:52 - are some rules uh for the Java abstract
362:54 - class and abstract class must be
362:56 - declared with an abstract keyword as we
362:58 - have discussed and now we will see one
363:01 - abstract methods in Java one example
363:03 - will try to understand it by example uh
363:07 - let me
363:09 - uh
363:10 - create one class
363:12 - abstract class
363:17 - okay let me increase my font size
363:21 - okay now
363:23 - I will create one class
363:27 - abstract
363:30 - class
363:32 - bike
363:35 - and inside this I will create one
363:38 - abstract method
363:39 - abstract
363:41 - void
363:43 - run
363:46 - okay so now inside my this public class
363:50 - I will write
363:54 - uh before that this class is extends the
363:59 - by class we are trying to achieve
364:01 - inheritance over here okay so
364:03 - inheritance also we have covered in our
364:06 - past videos if you haven't checked that
364:08 - video go and check first inheritance and
364:12 - void run and inside this I will simply
364:17 - print
364:21 - running
364:25 - my bike okay and now I will declare my
364:30 - main method
364:32 - now inside this I will create one object
364:38 - of that
364:39 - bike class obj one
364:43 - which is
364:45 - okay and not on
364:49 - it's
364:51 - abstract class
364:54 - and now if I try to call that run method
365:00 - over here
365:05 - yes now if I run this class
365:08 - we'll see what is the expected output by
365:12 - running my bike okay so when you declare
365:14 - this void run and now this abstract
365:18 - class is extending that by class and
365:20 - when when you declare run and we have
365:22 - already declared one here you can see is
365:25 - implemented in abstract class and here
365:28 - you can see implements methods in bike
365:30 - okay so here we have declared this void
365:33 - run method as an abstract an abstract
365:35 - method doesn't have anybody we have to
365:37 - uh declare that body inside one of this
365:40 - child class and that's why here we it is
365:43 - right it it's written as is implemented
365:46 - in abstract class if you click here the
365:48 - cursor will come here and if you hover
365:51 - over here it implements method in the
365:53 - bike if you write here yes
365:55 - that's why my running my bike is getting
365:57 - printed or printed on the console and
365:59 - next up uh we'll see when the real life
366:01 - scenario of the of an abstract class
366:07 - okay
366:10 - um okay let me get into my IDE
366:13 - and
366:15 - okay okay okay let me just think of one
366:20 - example
366:21 - okay we'll see one example
366:25 - I will just comment this out because I
366:28 - don't need this and this one also
366:32 - okay uh now this is not extending the
366:36 - bike class anymore okay now I will
366:40 - create one
366:42 - abstract
366:45 - class name is sheet
366:48 - okay and inside this I will write
366:52 - abstract
366:55 - void
366:58 - draw
367:00 - okay and now uh I will create one more
367:04 - class over here
367:09 - sorry
367:11 - class
367:15 - rectangle which is extends the class
367:20 - shape and inside this class I will write
367:24 - the implementation for out of that
367:26 - draw method
367:30 - and I will simply print
367:35 - print what should I print
367:40 - rectangle is
367:44 - drawing
367:48 - and okay and now
367:51 - if I come inside my public class and I
367:55 - will
367:56 - write my main method
368:03 - okay and inside my main method I will
368:05 - create one variable of the shape class
368:07 - obj1
368:09 - by referencing to the rectangle
368:14 - okay and now inside this I will write
368:18 - obj1 Dot
368:22 - bj1 Dot
368:25 - draw
368:26 - okay
368:27 - and now if I run this
368:33 - rectangle is drawing okay so this is one
368:37 - real life CMS scenario we can you can
368:39 - create one shape class and you can write
368:42 - a number of the uh rectangle is there
368:45 - square is there triangle is there and
368:47 - you can try to implement that method
368:49 - inside that same different classes with
368:52 - a different implementation and you can
368:54 - call those uh methods inside the public
368:58 - class using the object of that
369:00 - respective classes okay
369:01 - and now when we will see example of the
369:05 - class having constructed data members
369:07 - and methods okay so first of all
369:12 - let me
369:15 - clear this first previous example okay
369:21 - now I have to clear this also
369:26 - okay now
369:30 - to understand this I will create one
369:33 - more class
369:37 - which is abstract one sorry
369:41 - extract
369:42 - class
369:45 - bike and inside this I will create one
369:49 - Constructor of this class inside
369:53 - Constructor I will
369:56 - simply print
369:59 - in by case
370:02 - created okay and out after that I will
370:06 - create one abstract method
370:08 - abstract void
370:11 - run
370:12 - and I will create one known abstract
370:16 - method also void
370:19 - change gear
370:22 - and inside this method I will write
370:30 - gear changer
370:32 - okay and now I will create one more
370:35 - class
370:37 - uh any BMW random
370:42 - extends
370:45 - the
370:46 - by class and now
370:50 - inside this I will write I have to
370:53 - implement here you can see it it's
370:54 - showing some errors what is the error
370:56 - BMW class must be either declared with
370:58 - abstract or the implement the abstract
371:00 - world run method in the bike because
371:02 - when we declared a method as an abstract
371:05 - we have whenever we whenever that class
371:08 - is inherited by any of its subclasses
371:11 - then the implementation of those
371:14 - abstract methods should be there inside
371:15 - this child classes so we have to
371:17 - implement this run method inside this
371:20 - okay
371:22 - now in if I write
371:26 - running
371:29 - safely
371:31 - okay and this is pretty much about this
371:34 - and inside this I will create one object
371:38 - of the
371:40 - bike class
371:44 - bike obj1 it's equals to
371:50 - new
371:51 - BMW
371:54 - okay and after that I will write
371:58 - obj1 Dot
372:00 - run
372:02 - and obj one dot
372:06 - change here
372:09 - and now if I run this
372:12 - the expected output should be a bike is
372:15 - created uh why why first bike is created
372:18 - getting printed because when we when the
372:20 - program execution reaches at the line
372:22 - number 19 uh the object of that bike
372:26 - class is created and inside the bike
372:27 - class we have declared one Constructor
372:29 - which is printing bike is created that's
372:31 - why the first line which is printing
372:33 - bike is created and after that obj1 dot
372:36 - run the exam
372:38 - control flow of the code will
372:41 - go inside this abstract void run method
372:44 - and this abstract while drone method is
372:46 - implemented inside the BMW class and we
372:48 - have implemented it as running safely
372:50 - that's why running safely is getting
372:52 - printed on the console and after that
372:54 - obj1.j gear is executed and inside the
372:58 - change gear method we have
372:59 - written gear change that's why gear
373:01 - change is getting printed on the console
373:03 - so this is the pretty much idea behind
373:06 - the abstract class in Java so I hope you
373:08 - got
373:09 - some idea of the optional class so in
373:12 - upcoming videos we'll be covering
373:13 - interfacing interface in Java this is
373:16 - another way to achieve the abstraction
373:19 - in Java so thank you for watching this
373:20 - video
373:22 - hello and welcome back to the new way of
373:24 - the Java tutorial Series so today in
373:25 - this video we will be covering
373:27 - interfaces in Java which is used to
373:29 - achieve the abstractions in abstraction
373:31 - in Java okay so an interface in Java is
373:33 - a blueprint of the class
373:35 - it has a static constants and Abstract
373:37 - methods the interface in Java is a
373:40 - mechanism to achieve abstraction okay so
373:43 - there there can be only abstract methods
373:45 - in Java interface not not method body
373:48 - because we have seen earlier abstract
373:51 - methods doesn't have anybody uh it is
373:54 - used to achieve abstraction and multiple
373:55 - inheritance in Java so in when we are
373:59 - trying to when we are learning
374:00 - inheritance in Java at that time I have
374:02 - said uh multiple multiple entries is not
374:05 - supported in Java and we can achieve
374:08 - that multiple units in Java by using the
374:10 - interface by uh how we will see in this
374:14 - video itself
374:15 - in other words you can say that
374:17 - interfaces can have the abstract methods
374:19 - and variables it cannot have the method
374:21 - body okay and interface in Java is also
374:25 - represents a is a relationship as we
374:28 - have discussed in our in inheritance
374:30 - part and uh next up why we use
374:34 - interfaces in Java there are mainly
374:36 - three reason to use interfaces in Java
374:39 - it can be used to achieve the
374:40 - abstraction by interface we can support
374:42 - the functionality of the multiple
374:44 - unitings in Java and it can be used to
374:46 - achieve loose coupling
374:48 - okay so how to declare any interface
374:51 - okay so we'll see uh this how to declare
374:55 - when we bring some example of The
374:58 - Inheritance okay before that uh we need
375:00 - to understand some uh interface
375:02 - improvements that Java has done after
375:05 - the Java 8 release okay the Java
375:07 - compiler adds the public and Abstract
375:09 - keyword before the interface method and
375:12 - moreover it adds the public and static
375:14 - and final keywords before the data
375:16 - members in other words uh here you can
375:18 - see one example interface printable and
375:21 - int Min is equal to 5 and void print
375:23 - method is declared
375:25 - and uh what com compiler of the Java
375:29 - interprets is as uh this is the Java
375:32 - printable.java class dot Java class and
375:35 - this is the class which is created by
375:37 - the compiler so here we have written int
375:41 - mean is equal to 5 and what the Java
375:43 - compiler interprets is as public static
375:46 - final it adds the three uh keywords
375:48 - public static final if you heard before
375:51 - the Declaration of that
375:53 - variable whether you write it or doesn't
375:56 - don't write it it doesn't matter
375:58 - compiler will going to add these
376:00 - keywords before that Declaration of that
376:03 - variable and for the method it adds
376:05 - public abstract void okay
376:07 - and so here are some terms that you need
376:10 - to understand
376:11 - whenever a class
376:14 - a class in class A relationship is there
376:16 - it extends the okay this is the
376:18 - inheritance and whenever class
376:20 - implements in in interface and interface
376:23 - extends an interface okay we'll see one
376:26 - example of it okay so see we will see
376:29 - one real life example of the Java
376:31 - interface uh Bank example as we have
376:33 - discussed earlier okay
376:36 - so let me get into my IDE and I will
376:40 - create one new class
376:43 - okay by the name of interfaces
376:49 - let me increase my font size
376:52 - I will get my main method okay and now I
376:57 - have to declare one interface
376:59 - okay okay wait
377:02 - now if if I write one interface
377:07 - name is okay interface
377:12 - Bank
377:15 - and inside this interface I will
377:18 - create one float variable
377:22 - that is
377:24 - rate of
377:26 - interest rate of interest
377:30 - okay this is the method rate of interest
377:33 - and
377:36 - here you can see I have not written a
377:38 - float rate of I have simply written
377:40 - float rate of interest so what Java
377:43 - entropy interprets this method as
377:46 - uh here you can see I have discussed
377:48 - earlier also public abstract okay so it
377:52 - adds adds one two variables two keywords
377:55 - so before that public
377:58 - abstract
378:01 - float
378:03 - rate of
378:08 - interest
378:12 - this is what Java interprets it
378:14 - interbates as okay and now you know
378:18 - inside outside this interface
378:22 - I will write one class
378:27 - any class SBI
378:30 - which is implements
378:34 - Bank interface
378:37 - okay so and inside this wait a second
378:40 - why I'm getting error duplicate class
378:43 - okay I will write Banks now it okay
378:46 - Banks okay and here IntelliJ IDEA is
378:50 - throwing some errors let me check why
378:52 - the class SBI must be either declared as
378:55 - abstract or implement the abstract
378:57 - method rate of interest okay so this is
378:59 - here you can see we we didn't write any
379:01 - abstract keyword before it and if still
379:05 - that Java is throwing some error telling
379:07 - that this is an abstract method you have
379:09 - to implement this method inside this
379:11 - class okay so let
379:13 - us Implement that
379:17 - method public
379:19 - float
379:22 - rate of
379:24 - interest
379:28 - in for the body of this method I will
379:31 - simply return
379:33 - float value
379:35 - 9.15 f
379:38 - okay now it's not doing error and inside
379:43 - my main method I will create the object
379:47 - of that
379:49 - Banks interface
379:51 - oops sorry
379:54 - Banks
379:57 - obj1 is equals to new
380:00 - SBI okay and now
380:04 - here I will just simply print
380:10 - sbis
380:13 - rate of interest
380:17 - is
380:20 - and I will concat it with
380:24 - what is the object name object one dot
380:28 - rate of interest
380:29 - okay uh it was a throwing some errors
380:33 - duplicate class found okay SBI is we
380:36 - will write sbis
380:38 - now it's okay okay and run interface
380:42 - says dot Java here you can see SBI is
380:46 - Roi is 9.15 9.15 here here we have
380:50 - declared it so this is how uh interfaces
380:54 - Works in Java to implement that
380:56 - interface we have we have one keyword is
380:58 - there implements and to achieve the what
381:02 - we can say polymorphism we have we are
381:05 - writing extends keywords okay so these
381:07 - are some differences don't get confused
381:09 - inside this when a class when there is a
381:11 - relation between class and class extend
381:13 - keywords is there when there is a
381:15 - relation between
381:16 - uh class n interface implements keyword
381:18 - is there and when there is a
381:20 - relationship between interface and
381:21 - interface extend keyword is there okay
381:23 - so let's discuss how we can achieve the
381:26 - multiple inheritance in Java by using
381:28 - the interfaces okay
381:30 - so let me comment this out
381:34 - this code
381:39 - or else I will just remove this so that
381:42 - you don't get confused
381:45 - between the passcode and current code
381:47 - okay
381:49 - uh now if I create one
381:55 - interface okay interface
382:00 - and I will name that
382:03 - printable
382:04 - inside this I will write void
382:08 - one method which doesn't return anything
382:10 - and this is an abstract method because
382:13 - everything will return inside the
382:14 - interface is an abstract method okay and
382:18 - after that I will write in again one
382:20 - interface
382:22 - uh travel and show
382:26 - s h o w a b l is showable
382:30 - and inside this I will write void
382:36 - show method
382:37 - okay so these are two interfaces
382:42 - and now inside my this interface is
382:46 - class which which is public class I will
382:49 - create
382:54 - public
382:56 - void
382:59 - print
383:01 - okay now before that I have to write
383:06 - one keyword which is implements so that
383:09 - Javan just knows that we are trying to
383:12 - implement those interfaces inside this
383:14 - public class interfaces okay so the name
383:17 - of the two
383:19 - interfaces are printable and one is
383:23 - actually and
383:26 - intelligent idea is showing some errors
383:29 - we have to
383:31 - okay we have to
383:34 - declare that
383:36 - show method also inside this because
383:40 - that method was abstract method okay
383:47 - showing theirs and inside this print I
383:51 - will write simply on random string let's
383:54 - suppose
383:55 - hello
383:57 - and inside this I will write
384:02 - um
384:03 - world
384:05 - okay and now inside this main method I
384:08 - will create the object of this
384:10 - interfaces class interfaces
384:14 - sorry
384:19 - this is object 1 is equals to
384:23 - new
384:25 - interfaces
384:27 - okay and now if I try to call those
384:30 - methods object1 dot print and obj1 Dot
384:35 - show
384:37 - okay and now if I run this class
384:40 - hello and World should get printed okay
384:43 - hello and world is getting printed so
384:45 - here you can see uh
384:47 - we are trying to achieve the multiple
384:49 - inheritance over here why so because uh
384:52 - this is one child class and these are
384:56 - two parent classes and we are trying to
384:59 - inherit these two parent classes inside
385:01 - one child class and which is the example
385:04 - of the multiple heritance Okay so
385:07 - this is how you can achieve multiple
385:09 - linear attention
385:10 - Java by using the interfaces and the
385:13 - keyword which is used to
385:15 - here do this is implements okay so this
385:18 - is pretty much about interfaces in Java
385:20 - I hope you got some idea about the
385:22 - interfaces in Java thank you for
385:23 - watching this video
385:25 - hello and welcome back to the new head
385:27 - of the Java tutorial Series so today we
385:29 - will be covering packages in Java okay
385:31 - so Java package is a group of similar
385:33 - types of classes and interfaces and sub
385:36 - packages okay so package in Java can be
385:38 - categorized in two form a built-in
385:40 - packages and user defined packages so we
385:43 - will be covering both of this in our in
385:45 - this video
385:46 - and so the built-in built-in packages
385:49 - are look like this here you can see one
385:51 - example of this pictorial example of
385:53 - this building packages one Java main
385:55 - package main package Java is there
385:58 - and below that Lang utl and awt and
386:01 - there are a number of packages which are
386:02 - defined by the Java language itself
386:04 - these are the sub packages of the Java
386:06 - and inside this uh sub packages
386:07 - different classes are written
386:09 - system.class string.class I release dot
386:13 - classmap.class these are some classes
386:15 - that we have and here you can see I will
386:19 - open any of any of this uh example that
386:22 - we have covered in our upcoming uh sorry
386:24 - of not upcoming previous videos and here
386:26 - you can see we have written import
386:27 - java.util dot scanner so this is the
386:30 - Java is the main package utilize the sub
386:32 - package and scanner is the class which
386:33 - is written inside this package if you
386:36 - hover over this you can see uh
386:38 - implementation of implementation part
386:40 - also of this scanner class okay
386:43 - uh so these are some job packages which
386:46 - are defined uh predefined in Java and we
386:48 - will see user defined packages also how
386:51 - you how you can create and call those
386:53 - okay so first of all if you are using an
386:57 - IDE uh then this example will not help
387:01 - will helpful to you those people who
387:03 - doesn't uh using any IDE uh please look
387:08 - at this example simple example of java
387:10 - package uh package name and package is a
387:13 - keyword which is used to define a
387:14 - package and my pack is the package name
387:17 - and inside this package I have click
387:20 - created
387:21 - one class name is simple and
387:24 - by in inside this class one main method
387:28 - is there and inside main method welcome
387:29 - to package is the string that is printed
387:32 - on the console okay
387:33 - so to compile this Java package Java C
387:37 - minus t the directory or the folder
387:40 - where you are currently storing these
387:43 - files the path should be there in in
387:45 - place of this and Java file name a Java
387:48 - file name is the name we have which is
387:51 - you have given to this file so in this
387:55 - in my case I've written is at
387:57 - simple.java so I should write Java C
387:59 - minus t dot represent the rule directory
388:02 - and simple.java okay whenever I run this
388:06 - command minus D switches the specified
388:08 - destination where to put the generated
388:10 - class file so and you can use this
388:13 - directory name such as slash home in
388:16 - case of the Linux and D dot slash ABC in
388:20 - case of the windows Etc and if you want
388:23 - to keep this package within the same
388:24 - directory in that case you can use dot
388:27 - okay
388:28 - now
388:30 - uh how to access the package from the
388:32 - another package okay still now you have
388:35 - understood what is package how to create
388:37 - a package how to call the classes of the
388:39 - package now how to access the package
388:41 - from the another package okay so there
388:43 - are mainly three three ways you can
388:45 - access it by simply writing writing the
388:49 - import statement as you can see here
388:50 - over here import Java retail.scanner
388:53 - and second one is import package.class
388:56 - Name by specifying the particular class
388:58 - in uh
389:00 - consider a scenario where in one package
389:02 - holds some n number of the classes and
389:04 - you want only one one class to be get
389:06 - called in that case you can write this
389:08 - statement uh this is the example of the
389:10 - second statement where Java is the main
389:12 - uh main package I utilize the sub
389:14 - package and from the util it's a package
389:16 - we are calling simply one scanner class
389:19 - if you want to call all those uh classes
389:22 - which are written inside the util sub
389:24 - package you will simply write import
389:27 - Java Dot
389:29 - util Dot star star represents all all
389:33 - those classes which are written inside
389:34 - the util sub package import them all
389:36 - okay and third one is fully qualified
389:39 - name we will see each of them by looking
389:42 - one example okay
389:44 - now let me open my IDE so to create one
389:49 - package if you are using an IDE then
389:52 - it's very simple you just click on the
389:56 - source folder right click on it new and
389:58 - instead of creating Java class you just
390:00 - click on the package and you can name
390:02 - your package whatever you want I will
390:05 - name it as
390:07 - ABC you can write anything you want and
390:10 - uh so here you can see ABC package is
390:13 - created and inside this package if I
390:17 - want to
390:18 - write one
390:21 - class okay so I will right click on it
390:23 - new Java class and I will write uh
390:27 - class
390:29 - okay uh let's suppose a is my class name
390:32 - so a DOT Java is created under the
390:35 - package EBC here you can see okay and
390:38 - one more line is added by the
390:40 - intelligent idea package EBC that
390:42 - defines this class is written inside the
390:44 - package ABC and let me increase my font
390:47 - size
390:49 - okay so inside this a class
390:52 - uh I will declare one method okay
390:57 - public
391:00 - void message
391:04 - and inside this I will
391:07 - simply print
391:10 - hello
391:12 - okay and I will save this okay now
391:15 - uh in if I go outside of this package
391:19 - and I will create one new Java class
391:22 - name as B and inside this
391:26 - let me increase the font size
391:30 - and over here we are trying to see the
391:33 - import package dot star okay so I will
391:36 - same similarly like import package what
391:40 - is the package name EDC
391:42 - Dot
391:44 - star
391:45 - okay we have it okay and now inside my
391:49 - public Class B
391:51 - I will write my main method and inside
391:53 - the main method I will create the object
391:57 - of the
391:58 - Class A which is written inside this
392:02 - package okay
392:04 - I will write
392:05 - a
392:08 - o b j
392:10 - is equals to
392:12 - new a
392:14 - and I will try to call the method which
392:19 - is written inside the obj
392:21 - that is this one hello
392:24 - message method okay and now if I try to
392:27 - run this
392:29 - hello should get minted on the console
392:31 - okay yes here you can see Hello is
392:33 - getting printed on the console why so
392:34 - because we are in imported the class A
392:38 - from the package ABC okay and now one
392:43 - more thing is there import package name
392:45 - dot class name okay so here to explain
392:48 - this let me create one more class okay
392:51 - okay here
392:52 - however
392:55 - okay let me create one more class
393:00 - public
393:02 - class
393:04 - B
393:05 - okay
393:09 - Class B if public should be declared in
393:12 - the file name B dot Java
393:16 - okay okay in this class is already
393:18 - declared let me write it that PA
393:22 - okay what is ba should be declared in
393:25 - the B dot Java wait wait wait wait wait
393:28 - let me comment this out
393:31 - and this one also
393:35 - okay and
393:38 - okay okay wait you know what let me take
393:42 - this example itself
393:44 - and I will try to explain this also okay
393:47 - and now here you can see uh import
393:51 - package name dot class name okay if you
393:53 - want to
393:54 - call that specific class of that package
393:57 - then you should instead of writing star
394:00 - you should write a okay
394:02 - so package name is ABC the class is
394:06 - public Class A and inside this we have a
394:09 - written one method void message and it's
394:11 - printing hello on the console and it to
394:15 - import that package we have written
394:16 - import packagename dot class name and
394:19 - inside the public Class B and inside the
394:21 - main method I will create the object of
394:23 - that class and I will call that message
394:26 - method okay
394:28 - again hello should be printed yes hello
394:31 - is waiting printed on the console and
394:33 - now uh we'll see the third method fully
394:36 - qualified name okay
394:38 - how we can call
394:41 - okay so if you don't want to write this
394:45 - pack
394:47 - okay in this line and you you still want
394:51 - to use those
394:52 - classes which are written inside the
394:55 - package then you can simply write
394:57 - the package name what is the package
394:59 - name abc abc dot a
395:04 - and here also you have to write abc dot
395:07 - a
395:08 - and now if I try to run this
395:14 - again hello is getting printed on the
395:17 - console because fully qualified names
395:19 - defines as uh one class here Class A is
395:23 - declared inside the package and one
395:26 - method is there MSG and which is
395:28 - printing hello on the console and we are
395:30 - trying to access that class by using the
395:33 - package name dot the class name and by
395:35 - creating the object and again if if you
395:39 - want to call that method object name dot
395:41 - method name is the simple we can call
395:44 - this method okay and hello is printed on
395:47 - the console so this is the pretty much
395:48 - either we have behind the package is in
395:50 - Java okay so in our upcoming videos we
395:53 - will see
395:55 - access modifiers in Java so thank you
395:58 - for watching this video
396:00 - hello and welcome back to the new video
396:02 - tutorial Series so today we will be
396:04 - covering access modifiers in Java so
396:06 - there are two types of access modifiers
396:08 - in Java access modifiers and non-access
396:10 - modifiers and the access modifiers in
396:12 - Java specifies the Excel
396:14 - scope of the field method or Constructor
396:17 - of the class and we can change the
396:19 - access level of the fields Constructor
396:21 - methods and class by applying the access
396:24 - modifiers on it okay so there are mainly
396:26 - four types of access modifiers one is
396:28 - private a default protected and public
396:30 - so private defines the access level of
396:33 - the private modifiers is only within the
396:35 - class and it cannot be accessed out
396:37 - throughout the class and the default one
396:39 - is has the access level of the default
396:41 - modifiers only within the package and it
396:43 - cannot access from outside to the
396:45 - outside of the package if you do not
396:47 - specify any access level it will be the
396:50 - default okay
396:51 - are protected for protected the access
396:54 - level of the protected modifiers is
396:57 - within the package and outside the
396:58 - package through the child class if you
397:01 - do not make the child class it cannot be
397:03 - accessed outside the package and the
397:05 - public the public access level modifier
397:07 - is everywhere it can be accessed from
397:09 - the within the class outside the class
397:11 - within the package or the outside of the
397:13 - package
397:14 - so understanding of the Java access
397:16 - modifiers let us understand by this
397:18 - simple table so the if the access
397:20 - modifier is private it can be accessed
397:24 - within the class but it cannot be
397:26 - accessed within the package but it can
397:29 - and it also cannot be accessed outside
397:31 - the package by the subclass only and it
397:34 - it cannot be accessed I will set the
397:36 - package also so this is the yes no yes
397:38 - no chart uh this is the easiest one to
397:42 - understand how the access modifiers are
397:45 - working inside the Java okay so the
397:47 - first one is private
397:49 - for private I have taken one example
397:51 - over here you can see let me just okay
397:55 - yes one class is there Class A and which
397:58 - has the private variable name as data
398:02 - and value to it is 40 and one method is
398:06 - there private void message which is
398:09 - printing hello Java on the console and
398:11 - one public class simple we have written
398:13 - the main method and we have created
398:15 - object of the Class A and we are trying
398:18 - to print obj.data and we are trying to
398:22 - execute that message method which is MSG
398:26 - inside this simple class which is public
398:30 - and by using the object of that class
398:32 - that is obj okay whenever you write this
398:35 - this kind of statements to access the
398:38 - data which is private and which is
398:40 - inside the another class you will get
398:43 - the compile time error in both the lines
398:44 - because you are trying to access those
398:46 - data members which are private in
398:48 - privately declared inside another class
398:50 - okay you cannot access these members
398:53 - okay so the role of the private
398:55 - Constructor if you make any class
398:56 - Constructor private you cannot create
398:58 - the instead of the class outside of the
399:00 - class okay for the for example here you
399:02 - can see uh when class A is created and
399:05 - we have created one uh
399:07 - Constructor which is private okay and
399:10 - one method uh method is there MSG which
399:13 - is printing hello Java and inside our
399:15 - public class inside our main method we
399:17 - are trying to create the object of that
399:18 - class A obj is equal to new a and we'll
399:21 - we here here here itself we will get the
399:24 - compile time error because the
399:26 - Constructor which which is declared for
399:28 - the class A is private and we cannot uh
399:31 - access that
399:33 - for Constructor which is private and
399:35 - that's why we cannot create the object
399:37 - of their class okay so the role of the
399:39 - private Constructor is if you make the
399:40 - class Constructor private you cannot
399:42 - create or instance of the class outside
399:45 - of that class okay
399:47 - next up we have default cons default
399:50 - access specifier okay so let me zoom in
399:54 - okay yes here example you can see one
399:58 - package is there package pack and one
400:00 - class is there which holds one method
400:02 - MSG and which is printing hello on the
400:05 - console okay and inside uh B dot Java we
400:09 - are in the different package that
400:12 - package name is my pack and we are
400:14 - trying to import all the
400:17 - classes which are defined in the pack
400:19 - package and to do do so we are writing
400:23 - one statement import pack dot start star
400:25 - represents all to import all the classes
400:27 - which are defined inside that package uh
400:30 - in in that pack package we have written
400:33 - one one class that is Class A and inside
400:37 - our class B we are inside our main
400:40 - method we are trying to get the object
400:41 - of that class A and that is obj and we
400:44 - are trying to access that MSG method
400:47 - which is inside that
400:49 - back packaged class name a here itself
400:53 - we will get compile time error because
400:55 - the the definition of the default we
400:58 - have seen over here the access level of
401:01 - the default modifiers is only within the
401:02 - package it cannot be accessed outside of
401:04 - the package okay and we are trying to
401:06 - access these uh method uh over here here
401:10 - you can see we are trying to access this
401:12 - MSG method which is written written
401:14 - inside the pack package and we are
401:17 - trying to access it inside the my pack
401:19 - package this is not possible in Java and
401:21 - here here itself we will get you will
401:23 - get a compile time error okay and now
401:26 - for the protected one
401:29 - this is the example
401:30 - same package name pack and same class
401:33 - name but the method which we have
401:36 - declared over here is declared as a
401:38 - protected method and we are trying to
401:40 - paint print hello on the console okay
401:42 - and inside the another package my pack
401:44 - we are trying to import all the classes
401:46 - which is written inside the back package
401:49 - and Class B extends Class A because
401:54 - we are trying to inheriting inherit all
401:56 - the properties which are written inside
401:58 - the class A and inside our main method
402:00 - we we will write the object uh object of
402:03 - the Class B B object new B and we'll
402:07 - call obj Dot MSG and the output should
402:11 - be hello which is getting printed when
402:13 - for the definition of the protected we
402:15 - have seen vaccine level access level of
402:17 - the protective modifies is within the
402:18 - package and outside the package
402:20 - throughout the child class if you if you
402:22 - create the child class you can exit it
402:24 - outside the package
402:29 - now for the public one uh you will write
402:31 - one package back and Class A which is
402:34 - holding one method Miss G and which is
402:37 - printing hello and and in another
402:39 - package we will uh try to import that
402:42 - class which is written inside the pack
402:45 - package by writing import pack dot star
402:48 - and inside the class B inside the main
402:51 - method we will create one object of that
402:52 - class A and we'll print simply call that
402:55 - method
402:56 - obj.msg and we will print uh hello on
402:59 - the console why because for the public
403:01 - definition of the public access modifier
403:03 - says that it can be accessed from within
403:06 - the class outside the class within the
403:08 - package outside the package everywhere
403:09 - you can access that data members if you
403:11 - declare it as a private public okay so
403:14 - this is pretty much about the access
403:16 - modifiers in Java we'll see you in the
403:18 - next one video thank you
403:21 - hello and welcome back to the new video
403:23 - of the Java tutorial Series so today we
403:26 - have completed the oops Concepts and now
403:29 - it's time for the exercise uh so
403:31 - exercise or not Concepts uh head over to
403:33 - this link uh just
403:36 - type this link in your browser and you
403:38 - will be redirected to this page which is
403:40 - hacker rank page and here you can see uh
403:43 - some basic challenges on the oops
403:45 - Concepts in a Java animating this one
403:47 - Java inheritance to abstract class
403:49 - interfaces method overriding method over
403:52 - adding two instance of keyword so we can
403:56 - try solve this questions on your own but
403:59 - I will be
404:01 - taking for the first five questions of
404:03 - this
404:04 - challenges and you can try all these
404:08 - challenges but you can also try easy
404:10 - medium
404:11 - and hard you can set a difficulty level
404:14 - as whatever you want uh I'll be solving
404:17 - easy ones and so in this video we will
404:19 - be talking Java inheritance one and Java
404:21 - inheritance to solution to these
404:23 - problems
404:25 - okay so the problem statement is using
404:27 - inheritance one class can acquire the
404:29 - properties of others consider the
404:31 - following animal class so they have
404:33 - given us animal class which has one
404:35 - method wild walk and which is printing I
404:38 - am walking and this class has only one
404:41 - method walk and next time we want to
404:44 - create a bird class that also has a fly
404:47 - method we do this using extend keywords
404:50 - okay so they have created one one more
404:52 - class A bird which actually extends the
404:55 - animal and which has its own method fly
404:57 - and I'm flying is the
405:00 - print statement which is written inside
405:01 - this fly method and finally we create
405:04 - the bird object that can both fly and
405:07 - walk okay so they have one class
405:09 - solution inside which they have written
405:12 - main method and inside main method they
405:15 - have created the object of the bird
405:16 - class
405:17 - and using that object they have called
405:20 - walk and fly method and obviously this
405:23 - two methods will print I am working and
405:25 - I am flying this means that a bird
405:28 - object has all the properties that
405:30 - animal object has as well as some
405:32 - additional unique properties okay the
405:35 - the code above is provided for the for
405:37 - you in the editor you must add a sync
405:40 - method
405:41 - to the bird class then modify this main
405:43 - method accordingly so that the code
405:45 - prints the following line Okay so
405:48 - the expected output should be I am
405:50 - working I am flying and I am singing
405:52 - okay so they have provided us this code
405:56 - editor
405:57 - okay and we are expected to write one
406:01 - more method for the bird class
406:03 - which is sing method as you can see over
406:07 - here okay so
406:10 - we will write something
406:14 - reward
406:16 - thing
406:17 - and inside this method we will simply
406:22 - write system
406:24 - dot out
406:26 - Dot
406:30 - print Ln
406:34 - and inside this method I will write what
406:37 - we have to write I am singing I will
406:40 - copy this string and paste it over here
406:46 - okay okay this is the method that it has
406:49 - to write okay and okay and then modify
406:53 - the main method accordingly so that the
406:56 - code prints the following lines okay so
406:58 - I have to modify the solution class also
407:00 - and here bird dot thing is there okay
407:05 - now I guess it should print I'm singing
407:08 - I am submitting the code
407:11 - before that I will run the code okay let
407:14 - me just logging through my Google
407:17 - account
407:19 - foreign
407:30 - I
407:35 - will submit the code
407:39 - yes compile and message success now we
407:42 - congratulations so you have solved this
407:45 - challenge
407:46 - okay so this is about the Java
407:48 - inheritance one problem we will look
407:51 - into the Java inheritance second problem
407:53 - also
407:56 - wait let me open this in new tab
408:06 - okay
408:10 - okay for the Java inheritance second
408:12 - problem uh the problem statement is
408:14 - write a write the following code in your
408:16 - code editor below a class name
408:18 - arithmetic
408:19 - with the method name
408:22 - add that text to integer as a parameter
408:24 - and Returns the integer denoting their
408:27 - sum okay
408:28 - so let me write it down here comment
408:32 - what we have to do
408:34 - okay we have to write one class name
408:37 - arithmetic okay
408:41 - class
408:43 - arithmetic
408:45 - inside that class uh we have to write on
408:48 - method name as ADD
408:52 - one method should be there
408:57 - method
408:58 - and which accepts two parameters I and T
409:02 - comma int two integer parameters and
409:06 - then it Returns the sum
409:09 - and it is returning the sum of the two
409:12 - numbers okay and a class name Adder that
409:15 - inherits from a super class name
409:18 - arithmetic okay uh class name header an
409:22 - Adder class should be the one Adder
409:24 - class
409:32 - header class which inherits the
409:34 - properties of the arithmetic class okay
409:36 - so we have
409:38 - inherits
409:41 - inherits the
409:45 - arithmetic class
409:48 - okay and your classes should not be
409:52 - public okay so we don't have to write a
409:55 - class as a public because one class is
409:57 - already declared as a public list which
409:59 - is solution okay the improve input
410:01 - format is you are not responsible for
410:03 - reading any input from this STD in
410:05 - unlock code step will be test your
410:08 - submission by calling the add methods
410:10 - okay this is the normal line output
410:12 - format should be you are not dismissible
410:13 - for printing any anything to STD out
410:15 - your your ad method must return the sum
410:17 - of its parameter okay the sample out
410:19 - sample output they have given as my
410:22 - superclass is arithmetic and 42 13 is 20
410:26 - okay
410:27 - thank you
410:29 - Okay so
410:32 - write your code here okay so first of
410:34 - all let me create one arithmetic class
410:38 - okay
410:40 - abstract
410:44 - arithmetic
410:48 - abstract
410:53 - CLA s s class
410:56 - arithmetic
410:58 - and inside this class I will write
411:03 - public
411:06 - abstract
411:09 - and
411:11 - add
411:13 - and this is going to accept two
411:15 - parameters final
411:18 - in a
411:20 - and final int
411:24 - B
411:27 - okay so this is the abstract method so I
411:30 - don't need to write
411:32 - the body of this method that's so
411:37 - okay and now uh I have to declare one
411:40 - another
411:42 - method
411:44 - or class
411:47 - okay inside this solution class I will
411:50 - just
411:52 - so it I can't edit inside this
411:56 - solution class okay let me create my own
411:59 - class in IntelliJ IDEA
412:01 - I will name it as in
412:05 - inheritance
412:08 - to
412:13 - I will get my main method and I will
412:17 - simply copied my arithmetic class that I
412:21 - have written over here
412:22 - copy
412:24 - paste okay now we have implemented the
412:29 - arithmetic man and we have also
412:30 - implemented the add method which Returns
412:33 - the sum and now we have to overwrite
412:37 - this method inside our main public
412:39 - method that is public class sorry
412:41 - inheritance to
412:43 - so we will write
412:45 - public
412:47 - in
412:49 - add
412:51 - and which accepts two parameter
412:55 - final
412:56 - int a
412:58 - comma
413:01 - final
413:03 - in b
413:05 - and it performs simply the addition of
413:08 - the two numbers it will return
413:11 - a plus b okay and one more thing uh it
413:16 - it is extends this arithmetic class okay
413:22 - now it's okay now inside our main method
413:26 - we will simply create the object of this
413:29 - inheritance class in here it is to
413:34 - obj one is equals to new inheritance
413:38 - and using this object we will call this
413:40 - add method
413:41 - to call this method we will simply write
413:44 - obj1 dot add and we'll pass two numbers
413:50 - let's suppose
413:53 - uh two numbers can maintain a 10
413:57 - comma 20
414:00 - okay so now I guess that is the work
414:04 - that we have to do inside this problem
414:06 - statement we have to just
414:07 - uh create one abstract class arithmetic
414:11 - and one hashtag method which will simply
414:15 - perform addition of the two numbers and
414:17 - that we have done over here
414:19 - and we will create one object of that
414:21 - class and we'll call it and pass the
414:24 - parameters okay now I will run this
414:26 - method run this class sorry not method
414:30 - and okay okay wait wait wait I have to
414:35 - okay I have to write this entire code
414:38 - inside one print statement because the
414:41 - method doesn't printing anything
414:43 - okay and I will simply copy this
414:48 - and paste Insider
414:51 - when statement now if I run this
414:53 - question
414:54 - class Java class 30 is getting minted on
414:58 - the console yes because the addition of
415:00 - the 20 and 10 is 30. so this is pretty
415:03 - much about this problem statement Java
415:05 - inheritance to okay so we will discuss
415:09 - uh other problems also Java abstract
415:12 - Java interface method overriding method
415:14 - overriding two uh in our upcoming video
415:17 - so thank you for watching this video
415:20 - hello and welcome back to the new video
415:22 - Java tutorial Series so this is the
415:25 - continuation uh continued video to the
415:27 - exercise that we have started started in
415:30 - our previous video uh so we have to
415:32 - solve the two problems one and Java in
415:35 - it is two in our previous video so in
415:37 - this video we will be talking about uh
415:39 - abstract class 7 interface and Java
415:42 - method overriding problem okay so
415:46 - for the first problem in Java abstract
415:48 - class abstract class okay this is this
415:51 - is the formal definition of the hashtag
415:53 - class you read it we have also done it
415:56 - in our previous video okay the following
415:58 - is an example of the abstract class uh
416:00 - so they have given one example for the
416:02 - abstract class okay and if you try to
416:04 - create an instance of this class like
416:06 - the following you will get an error
416:10 - okay
416:11 - okay now you have to create another
416:14 - class that extends abstract class then
416:17 - you can create the instance of the new
416:18 - class and notice that set title method
416:20 - is abstract 2 and has no body okay
416:24 - set title is abstract and has no body
416:27 - okay and that means you must Implement
416:30 - that body of the method inside the child
416:32 - class okay we have to implement this in
416:34 - the editor we have provided an abstract
416:36 - class book in main class in the main
416:39 - class we created an instance of the
416:41 - class called my book and your task is to
416:43 - just write the my book class okay
416:46 - sample input is a tail of the two cities
416:49 - and the sample output is a title is a
416:51 - tale of the two cities okay
416:53 - so I got some idea okay and let me get
416:58 - into my ID I will create a new class
417:02 - okay Java
417:06 - exercise
417:12 - problem three okay
417:14 - let me increase the font size I will put
417:18 - my main method
417:20 - now okay
417:23 - so they have created the abstract class
417:26 - book okay so we have to create one extra
417:28 - class book
417:30 - okay so abstract
417:33 - class
417:35 - book and inside that uh one string for
417:39 - holding the title of the book
417:43 - title and then
417:45 - one abstract method as they have said
417:48 - abstract void
417:50 - set title
417:53 - okay and
417:55 - once it accepting one string parameter
418:00 - yes
418:01 - upside class we have written
418:04 - and we will write one
418:08 - sorry string
418:12 - get
418:14 - title for receiving the title
418:16 - and inside this
418:19 - will simply write
418:22 - return
418:25 - sorry not Capital return date title okay
418:30 - so we are returning the title over here
418:33 - and wait a minute small typo is okay now
418:37 - it's okay uh we'll write another class
418:39 - name as book
418:42 - so plus
418:45 - notebook my book
418:51 - which extends this
418:54 - book class
419:00 - and inside this we have two
419:03 - give the implementation of the set title
419:05 - method so over here I will write
419:10 - public
419:11 - set
419:14 - title and I will pass the parameter as
419:18 - string
419:22 - title
419:25 - no K set title I am getting error
419:30 - you're gonna require type must be
419:33 - declared after okay now we have
419:35 - implementing that okay the return time
419:38 - should be there now
419:40 - void set title okay now it's okay and
419:44 - this
419:45 - Dot
419:47 - title is equals to
419:50 - title
419:52 - okay this is about the set title method
419:57 - now inside my main method I will create
419:59 - the object author in my book class
420:03 - oh
420:04 - pH equals to new
420:11 - obj might
420:15 - and I will call this method
420:20 - obj Dot
420:23 - set title and I will
420:27 - simply first receive the title from the
420:30 - user
420:31 - for that I have to declare one string
420:33 - variable t i t l e title
420:38 - initially it is empty string
420:40 - and after that
420:43 - I will receive the input from the user
420:45 - for receiving the input I have to create
420:47 - one
420:48 - object of the scanner class
420:51 - scanner SC is equals to new scanner
420:57 - steam dot in
421:00 - okay now
421:04 - I will set the title value to
421:10 - see
421:11 - dot next
421:15 - now it's okay and I will pass that title
421:20 - to this method okay
421:23 - um okay and uh
421:25 - what it's returning get title okay so we
421:29 - have to
421:30 - get this method also
421:34 - now to receive this method I will just
421:37 - simply copy this method and will print
421:40 - it over here
421:42 - get title and I will simply
421:45 - call one Sprint statement and inside the
421:48 - Sprint statement I will write o b j Dot
421:52 - get title okay and before that I will
421:56 - concat it with one
422:00 - string
422:01 - that is
422:03 - the
422:05 - title of
422:08 - the book is
422:12 - this okay now if I run this
422:16 - first it will ask me for the title of
422:19 - the book okay so what they have given to
422:23 - us the title The Tale of the two cities
422:26 - I will simply copy it
422:28 - and I will paste it over here and enter
422:31 - a title of the book is a object wait a
422:36 - minute wait a minute
422:38 - am I missing over here
422:40 - the title of the book is a
422:44 - oh wait wait wait wait wait next
422:48 - next line it should be now if I
422:51 - run it again
422:54 - and I will give it the same now it's
422:56 - okay so the error was in this one if you
423:00 - write next it will get only
423:02 - the one word first word and whenever it
423:05 - receives the space it will just
423:08 - ignore that part to get that whole
423:11 - string you have to write a c dot next
423:13 - line okay so now you here you can see we
423:15 - are giving one input as a data of the
423:18 - notebook uh sorry no notebook book and
423:21 - we are receiving the title of the book
423:22 - is a tail of the two cities okay so that
423:26 - is the part that we have to do okay
423:29 - right
423:30 - moving forward to the next one uh Java
423:33 - interfaces uh and
423:36 - okay so what they have given is
423:40 - uh this is the overview of this
423:43 - whole problem now Java interface can
423:46 - contain only signature in the fields one
423:49 - okay so you read it I have read already
423:52 - you just pause the video and read it so
423:55 - what we have to do is
423:58 - here you can see you are given with the
424:00 - interface Advanced arithmetic which
424:02 - contains a method signature okay into
424:04 - divisor sum and you need to write a
424:07 - class called my calculator which
424:09 - implements the interface okay we have to
424:11 - implement the interface and the divider
424:13 - sum function just takes an integer as an
424:15 - input and return the sum of all its
424:18 - divisor okay so so the divisor of six
424:22 - are one two three and six and the sum of
424:25 - the divisors are one plus two plus three
424:27 - plus six is equal to 12. so we have to
424:29 - return this okay and to do so
424:33 - we have given our
424:35 - here and did The partially completed
424:37 - code in the editor completed okay so let
424:41 - me create one class
424:45 - name as
424:48 - advance
424:51 - arith
424:53 - m
424:54 - okay
424:57 - sorry for comment okay and I will import
425:01 - my main method
425:04 - I will get it over here and I have to
425:08 - write one
425:12 - this what we can say interface so I
425:16 - guess they have written interface
425:17 - already okay I will just copy this
425:19 - interface from here
425:22 - and I will paste it over here
425:25 - okay
425:26 - wait I is not getting it now it's okay
425:30 - uh let me format it
425:40 - so over here I have copied this
425:43 - interface so from here and now uh inside
425:47 - my arithmetic Advanced arithmetics class
425:50 - I need to
425:53 - Implement I guess that one okay
425:56 - so I will write
425:59 - public
426:02 - int
426:04 - let me just copy
426:07 - this part
426:09 - name of the method
426:12 - which accepting the parameter of integer
426:14 - n
426:15 - and inside this I will write int I need
426:19 - one variable known as sum
426:21 - 0 I will initialize with and I will
426:24 - enter my for Loop and it will start from
426:27 - Ink and D is equals to 1
426:30 - whenever D is less than n and each time
426:33 - I will be doing D plus plus
426:37 - okay and set this for Loop here I will
426:39 - check if that n in mod
426:44 - d
426:46 - equals equals to zero if it's so
426:49 - sum is equals to
426:51 - some plus is equals to D
426:54 - okay and after that after running the
426:58 - for Loop I will just simply return
427:02 - this sum
427:05 - okay uh so this is uh pretty much that
427:09 - we have to
427:11 - okay okay okay wait wait wait wait wait
427:13 - why it's throwing the error
427:16 - let me check okay uh class Advantage
427:19 - arithmetics is public and should be
427:20 - declared inside the advanced arithmetics
427:23 - dot Java okay okay wait
427:26 - I know the error
427:30 - now it's okay the file name and the
427:32 - class name is different that's why the
427:34 - IntelliJ ID is showing the errors okay
427:36 - and inside the main method uh I will
427:39 - just create
427:41 - the object of this class
427:47 - and using that object
427:50 - I will just call divider sum and it will
427:54 - pass the same value that they have given
427:57 - okay so they have given 6 as an input so
428:00 - let me give it as also 6 as the input
428:03 - and I will pass it
428:05 - and this method is returning the sum so
428:08 - I have to write this whole thing inside
428:11 - one print statement so that
428:14 - the return value can be printed on the
428:18 - console okay so if I right click and
428:21 - click on run
428:23 - the 12 should be getting yeah 12 12 is
428:26 - printing on the console so this problem
428:28 - is also
428:30 - it's done okay so
428:33 - I hope you you can solve this remaining
428:36 - problems uh if I I can solve also so I
428:41 - want you to solve let's give it a try
428:43 - try to solve this uh questions uh check
428:46 - out the discussion forum if you got
428:48 - stuck anywhere in between uh check out
428:50 - the leaderboard uh submissions your
428:52 - previous submission should be come here
428:54 - and edit editorial will be open uh
428:58 - one don't open the editorial you will
429:00 - see the answer directly uh first try to
429:03 - answer these questions try to get the
429:06 - solution
429:07 - and I hope you enjoyed this exercise and
429:10 - thank you for watching this video and I
429:12 - will see you in the next one
429:13 - hello guys welcome back to the new video
429:15 - wherein we are learning the data
429:18 - structures and algorithms in Java so in
429:21 - today's topic we are learning arrays in
429:23 - Java so let's get started so normally
429:26 - arrays is a collection of the similar
429:29 - types of element which has a contiguous
429:31 - memory locations so what do you mean by
429:34 - contagious memory locations so it's
429:37 - nothing but all the elements are located
429:39 - next to each other in the same memory
429:41 - space that is the consecutive blocks of
429:44 - the memory as allocated to the user for
429:47 - the processes uh so there are many types
429:50 - of memory location memory storage types
429:54 - such as hip memories are also there so
429:57 - array uses the contagious memory
429:59 - location
430:00 - so next point is array uses array which
430:04 - is the zero based indexing means at the
430:07 - element that is that stores at the first
430:10 - in the array
430:12 - is is stored at the
430:15 - zeroth index and the next element will
430:17 - store at the one then second
430:19 - and this series will go I go on till n n
430:23 - is the number of number of elements that
430:26 - you declare that the array will store
430:29 - okay
430:30 - so unlike C C plus plus we can get the
430:33 - length of the array using the length
430:35 - member so in C plus plus we use the size
430:39 - of operator which which gives our
430:41 - returns us the length of the array means
430:45 - then how many number of the integers
430:47 - store in that array like that in similar
430:50 - way there is a length member in Java
430:52 - which Returns the same the length of the
430:54 - array which we are using so typically
430:57 - there are two types of arrays in Java so
431:00 - first one is user defined and second one
431:02 - is using built-in class
431:04 - so in this video typically we are going
431:07 - to see the user defined one and the
431:10 - built-in building class we can see in in
431:12 - the next upcoming videos wherein there
431:15 - is not too much work that we we are
431:18 - going to do we just uh import the class
431:21 - from the Lang like a Java package blank
431:24 - package which is uh predefined in the
431:27 - Java Java and we just make an object of
431:30 - that class and we can use the predefined
431:32 - methods of that class okay moving Aid
431:36 - Java provides the feature of anonymous
431:39 - array which is not available there in C
431:41 - plus plus so we will see what is an
431:45 - anonymous arrays so Java supports the
431:48 - feature of anonymous arrays so so as you
431:50 - you don't need to declare the array
431:52 - while passing and add it to the method
431:54 - so think of a situation where where you
431:57 - have created one method and the method
432:01 - method requires an array as a parameter
432:03 - so where where when you when you are
432:05 - calling that
432:07 - method in the main method so instead of
432:10 - calling instead of declaring the new
432:13 - array and passing the value to that
432:15 - array you can just create create a new
432:18 - int and just pass the values that you
432:21 - want to pass through the array that is
432:23 - known as the anonymous array which c
432:25 - plus c c plus plus language is like that
432:27 - don't provide these features
432:29 - okay so moving on next we have the types
432:32 - of array so there are technical two
432:35 - types of arrays single dimensional and
432:37 - multi-dimensional okay so let's see uh
432:41 - each of them one one by one
432:43 - so single dimensional array the syntax
432:47 - is very similar to our other other
432:51 - programming languages so wherein we have
432:54 - first declare data type like integer and
432:58 - then two square brackets and array or we
433:02 - can declare it this in three different
433:04 - ways as you can see here so
433:07 - first of all let's write some basic code
433:11 - of that single dimensional array so I'm
433:15 - here and let's declare one public class
433:20 - Main
433:22 - okay and I will write the main method
433:26 - that is public
433:29 - static
433:31 - void Main
433:35 - string
433:37 - Alex
433:40 - okay so first of all let's
433:44 - declare and initiate initialize one
433:47 - array so for that we have we can we can
433:50 - do this int
433:52 - that is that that means the direct array
433:54 - is going to hold the integer types of
433:57 - values
433:57 - let's name our array as a
434:01 - okay equals to
434:04 - new
434:05 - integer
434:09 - and this is the
434:11 - five
434:12 - so this five is nothing but the size of
434:15 - the uh how many integer types of values
434:17 - that added is going to hold okay so here
434:21 - I return 5 that means the array is going
434:23 - to hold the five values in it okay so
434:26 - let me just go and
434:29 - quickly
434:33 - okay array at index one
434:36 - it's gonna hold twenty like this
434:40 - area index to
434:44 - hold 30
434:48 - and then index three
434:50 - is going to hold for t
434:54 - likewise array at index four
434:58 - foreign
435:00 - sorry 50. okay so here you can see uh my
435:05 - array length is 5 and I have declared
435:07 - the five elements in it so
435:11 - let me just print it on the console so
435:13 - for the printing of an print
435:15 - of an array on the console we just use a
435:18 - for Loop
435:19 - wherein our for Loop will start from int
435:23 - I is equal to zero and it will go until
435:27 - I less than a DOT length
435:31 - foreign
435:34 - and each time I am incrementing the
435:37 - value of the I
435:38 - so this dot length function you can
435:43 - see here I have told you
435:47 - the there's one
435:49 - method named as length of the length
435:52 - member which will return the length of
435:55 - the array so here we are using that same
435:57 - method
435:59 - so quickly just I will system
436:05 - start out Dot
436:08 - print Ln
436:11 - is
436:15 - Okay so
436:18 - quickly just revise it we have declared
436:20 - one array and initialize and we are
436:24 - given the all the values that the
436:27 - oregano store at that index and then we
436:30 - have used the for Loop where we are
436:33 - traversing the array and printing the
436:35 - elements that are stored at the 0 to
436:38 - fifth fourth element fourth index of
436:41 - that array okay so I'm gonna run this
436:45 - let's see so here you can see 10 20 30
436:49 - 40 and 50s got printed on the console
436:52 - because at the first at first is value
436:55 - is 0 and array at eyes I stored 10 so
436:59 - that's got printed here and each time
437:01 - the for Loops runs in welder the I got
437:04 - incremented I write one added to error
437:06 - three I added four got printed
437:08 - so this is the basics basic program of
437:12 - array
437:13 - so this so moving next we have
437:18 - multi-dimensional array so here you can
437:21 - see the multi-dimensional array
437:25 - how we can declare that array okay so
437:28 - without wasting the time let's
437:31 - code it out
437:33 - Okay so
437:35 - I'm gonna come here and I will comment
437:38 - it out this code
437:40 - at next I will again declare one array
437:44 - but this time I am declaring the
437:46 - multi-dimensional array that means I
437:48 - have to use two pair of square brackets
437:52 - equals to
437:55 - let me just pass those value
438:14 - okay so here I have declared one array
438:17 - which is multi-dimensional array and I
438:19 - have passed values to that
438:21 - okay so let us check how we can print
438:25 - the multi-dimension array like we have
438:28 - printed here the single Dimension array
438:29 - okay so for that we required two
438:32 - uh for Loops first one
438:36 - is run from I is equals to 0 to I less
438:41 - than
438:42 - 3
438:43 - and each time it will iterate I plus
438:46 - plus okay so inside this we have we are
438:50 - going to use another for Loop which is
438:53 - going to learn from i j is equal to 0
438:56 - J is less than three
439:00 - and each time we are incrementing the
439:02 - value of the J
439:03 - okay
439:04 - so in this we are going to print system
439:09 - dot out
439:11 - Dot println
439:14 - array add index I
439:18 - and index J
439:22 - plus one space
439:25 - after
439:26 - each number got printed on the console
439:29 - and after this I will just write
439:33 - system dot out Dot
439:37 - print Ln
439:41 - okay
439:43 - so if I run this now
439:47 - we'll see what happens
439:50 - so here you can see one two three two
439:53 - four five four five four four five is
439:55 - got printed so let's check how it got me
439:58 - how is its printing actually so when we
440:01 - come for the first for Loop the value of
440:03 - the I is 0 and it when it Center for the
440:06 - second for Loop the value of J is 0 and
440:08 - here when we enter and we pass the uh
440:11 - array array as array of zero comma zero
440:15 - zero so what is present at array 0 0
440:19 - this is the element which is present so
440:21 - this this got printed and when when we
440:23 - go uh again here in in inner for Loop
440:26 - wherein JJs value is now 1 okay and is
440:30 - value is zero so again we are passing
440:33 - wherein G is value is zero and but this
440:36 - time J is value is one so what it
440:38 - becomes array of 0 1 so at position
440:41 - error of 0 1 2 is present so 2 is got
440:45 - printed similarly this for Loop will run
440:47 - uh one time again when is 3 this for
440:51 - Loop gets terminated in a for Loop and
440:54 - it go outside for Loop where I plus plus
440:56 - is done and is value is now 1 again it
440:59 - enters the for Loop whereas in change
441:01 - value is 0 and this time we are going to
441:03 - get those values as I array of 1 0
441:08 - wherein we get this values
441:11 - similarly we are printing all those
441:13 - values so this is the this is how we can
441:17 - implement the multi-dimensional arrays
441:19 - in Java so
441:21 - there are many ways many practical uses
441:25 - of this using arrays in Java let's
441:28 - suppose think think about a scenario
441:30 - where you have 100 students in class and
441:34 - you have to store all the data of the
441:37 - student uh let's suppose marks the
441:40 - students got obtained the marks in
441:42 - mathematics
441:43 - so you can't just declare a one one
441:47 - variable one variable for each student
441:50 - so in this scenario we we can use an
441:53 - array wherein we we just declare one
441:55 - array of mathematics marks and we will
441:58 - just pass those values according to the
442:01 - students roll number and which got
442:03 - printed and stored and whenever we want
442:06 - we can retrieve those information or the
442:09 - values let's suppose I want to know the
442:12 - marks or marks obtained by the students
442:14 - whose roll number is 8 in mathematics so
442:17 - I can pass the array name and pass the
442:20 - parameter as a seven sorry because the
442:23 - array index in short form 0 and I will
442:25 - get the marks which is of 10 by the
442:27 - student whose role number is 8. so these
442:30 - are some real life scenarios where
442:31 - wherein we are using arrays in Java so
442:35 - you can
442:36 - go to the websites like Geeks for gigs
442:39 - where they have the practice portal
442:41 - wherein you can just sort those uh field
442:45 - you can apply the filter of arrays and
442:47 - you can set the difficulty level and do
442:50 - the do the practice for the coding I
442:52 - will be sharing on all the required
442:54 - resources and the references you will
442:57 - require to learn arrays in Java in the
443:00 - description box of the video so thank
443:02 - you so much guys I will see you in the
443:04 - next week next lecture
443:07 - hello and welcome back to the new video
443:09 - of java tutorial series uh so till now
443:11 - we have covered arrays in Java and for
443:14 - this video we will be covering some
443:15 - practice questions in arrays okay so
443:19 - what is first question uh write a Java
443:21 - program to sum the values of an array so
443:24 - input to this program is an array so you
443:27 - are giving you are given an array as a
443:29 - input you have to print the sum of the
443:32 - elements of elements which are present
443:34 - inside the array okay so let me open my
443:36 - IDE
443:38 - and I will create one new Java class
443:41 - name as
443:49 - practice
443:52 - questions
443:54 - let me increase the font size
443:57 - I'll write my main method
444:01 - okay and now I have to declare one array
444:04 - which will be given as input to the
444:07 - program
444:08 - int
444:10 - array
444:12 - equals to
444:14 - and I will assign the values to the
444:16 - array here itself let's suppose one
444:19 - comma 2 comma 3 comma 4 comma five comma
444:25 - six comma seven
444:27 - comma 8 comma
444:29 - okay so this is this is our array
444:33 - and now uh
444:35 - I again I will require one variable to
444:38 - store the sum sums value
444:40 - okay now
444:42 - I will use enhance for loop I I hope you
444:45 - guys don't know what is an answer for
444:47 - Loop for it's like a for each loop I
444:50 - will write int I
444:52 - in
444:54 - ARR
444:56 - what uh what we have done here is for
444:59 - every integer value inside array will
445:03 - run this Loop okay and what we are going
445:07 - to do inside this Loop sum plus is
445:09 - equals to
445:10 - I means we'll update the sums value with
445:13 - the value which we are getting uh from
445:16 - inside the array okay now at the last I
445:19 - will just simply print
445:21 - the
445:23 - sum is
445:25 - and I will concat it with the value of
445:28 - sum
445:30 - okay so now if I run this
445:34 - should print the value of summation of 1
445:38 - to 9. okay the sum is 45 now it's
445:41 - working properly
445:42 - so moving forward to the next question
445:45 - uh write a Java program to print the
445:48 - following grid so this is the grid that
445:50 - you are supposed to print on the console
445:52 - uh it has zero sorry one two three four
445:57 - five six seven eight nine ten uh ten
446:00 - columns and one two three four five six
446:03 - seven eight nine ten ten by ten grid is
446:06 - this and you're supposed to print this
446:09 - okay and
446:10 - so let me get into my ID I will
446:14 - comment this out
446:17 - this is the solution for the question
446:19 - number one I will comment
446:21 - and I will write one one more comment as
446:24 - solution
446:25 - to question number one
446:31 - now from here onwards I will write
446:35 - solution
446:38 - to question two
446:41 - and inside this we required
446:44 - multi-dimensional array because Matrix
446:48 - is there and so I will declare one
446:51 - multi-dimensional array over here
446:52 - integer
446:56 - this and this and I will name my array
447:00 - as a which is equals to
447:03 - new
447:04 - integer of 10 by 10 because our grid is
447:09 - 10 by 10
447:10 - Matrix
447:11 - and after this I require one for Loop
447:16 - of for Loop
447:18 - integer I is equals to
447:21 - 0 and
447:23 - I is less than 10 less than 10 means the
447:27 - loop will run from 0 to 9 which is 10
447:30 - times and each time I will increment the
447:32 - value of i as I plus plus and inside
447:34 - this Loop uh again I require one more
447:37 - for Loop to track the columns first
447:41 - first row will track the rows and second
447:44 - for Loop will track The Columns and
447:47 - inside this I will write intj is equals
447:49 - to 0.
447:50 - whenever my J is less than 10
447:54 - I will do J plus plus
447:57 - okay and inside this inner for loop I
448:01 - will be doing
448:03 - system.println
448:07 - person
448:09 - 2D
448:11 - and I will
448:14 - I will pass it a value as any at ith
448:18 - index and rare J sorry jet index
448:23 - Okay so
448:24 - after this I will do this okay
448:29 - now it's okay
448:33 - wait I will again simply print the
448:36 - value which is inside the array at I I
448:39 - comma J index and after printing the
448:43 - inner for loop I need to move to the
448:46 - next row and for that for that I will
448:48 - simply write one print statement so that
448:51 - I though so that the program execution
448:53 - will get to the next line okay
448:56 - now if I run this
448:59 - class
449:01 - you can see Zero Zero is getting
449:04 - printing on the console
449:06 - uh one mistake is there I have written
449:09 - print Ln instead of I should write print
449:12 - so that
449:13 - every time a new line should not get
449:16 - printed on the console now it's okay
449:18 - fine yes you can see 10 by 10 uh grid is
449:23 - printed Matrix so this is this is the
449:27 - expected output that we have we want to
449:29 - print on the console okay
449:30 - so next question is write a Java program
449:33 - to calculate the average value of the
449:35 - array elements okay
449:38 - so you have given one array so you just
449:40 - have to
449:42 - print the average of the elements which
449:44 - are present inside the array okay
449:45 - assuming that the there are integer
449:47 - values which are present inside the
449:49 - array okay so now again I will comment
449:54 - this solution of the question number two
449:56 - and I will write down one more comment
449:59 - which is
450:00 - solution
450:02 - to question number three
450:06 - okay so first of all we require one
450:10 - array okay so I will declare one array
450:13 - of type in of type integers and I will
450:16 - name it as numbers
450:18 - which whose value is equals to new
450:21 - integer add a and I will pass those
450:24 - values here itself let's suppose I will
450:28 - pass 20
450:30 - comma 30
450:32 - comma 35
450:34 - comma minus 15
450:38 - okay comma minus 60
450:42 - comma minus 100 okay so these are the
450:46 - value just random numbers I have passed
450:48 - to the array and I have to calculate to
450:51 - calculate the average we have to
450:53 - calculate uh sum of the elements which
450:55 - are present inside the array first okay
450:56 - so for that I will require one variable
450:58 - I'm going to sum I will assign it value
451:00 - as 0 initially
451:02 - and after that I will require one for
451:04 - Loop to calculate the sum of the
451:06 - elements which are present inside the
451:07 - array
451:09 - int I is equals to 0 now I it's less
451:15 - than numbers
451:17 - Dot
451:20 - numbers dot length numbers dot length
451:23 - methods will return the length of the
451:25 - array
451:26 - okay and now each time I will be doing I
451:29 - plus plus
451:31 - okay why am I getting error yeah yes I
451:35 - have written this
451:37 - okay now it's okay uh what we are
451:40 - supposed to do inside this is update the
451:43 - sums value okay so previous Value Plus
451:47 - the value of
451:50 - of the current
451:53 - element present inside the array okay
451:55 - now it's okay we have got to sum of the
451:59 - elements which are better inside the
452:01 - array now we just have to calculate uh
452:04 - average so to calculate the average and
452:06 - again
452:08 - declare one have a double average
452:09 - variable of type double and I will
452:14 - simply divide this sum by the numbers
452:18 - dot length
452:20 - okay
452:21 - and now I can simply print
452:28 - the
452:35 - AV
452:37 - average
452:41 - of the
452:44 - heavy
452:46 - elements are
452:49 - and now I will concat it with
452:54 - average and now if I
452:57 - run this I should get the average
453:01 - averages 4
453:04 - okay now it's okay and working fine if
453:08 - you calculate the summation of 20 plus
453:11 - 30 plus 30 35 plus minus 16 plus 60
453:15 - minus
453:16 - 100 and it when you divide it with the
453:20 - number of elements that is one two three
453:22 - four five six and then you should get
453:24 - four as a output
453:27 - that is the average of the array array
453:29 - elements okay so these are some
453:32 - questions again I suggest you that you
453:35 - go to the Geeks for gigs or any of the
453:38 - practice portal uh like hacker rank or
453:41 - hacker you just go there and apply the
453:43 - filter of arrays and set the difficulty
453:46 - level to easy and try to attempt those
453:48 - questions try to solve this question it
453:50 - will help you to improve your logic
453:53 - building
453:54 - in problem solving okay so thank you
453:57 - guys for watching this video
454:00 - hello and welcome back to the new video
454:02 - of the Java tutorial Series so so till
454:04 - now we have covered the theoretical part
454:06 - of the array and we have also done uh
454:09 - some uh easy level questions of the
454:12 - array and in this video we'll be talking
454:15 - some uh medium level of medium level
454:17 - question of the array which requires
454:19 - some searching and sorting techniques uh
454:22 - so till now I have not discussed you the
454:24 - not discussed the searching and sorting
454:27 - algorithms which are there
454:29 - for used used in jar arrays so in
454:34 - upcoming videos we will cover that don't
454:37 - worry uh there are a number of the
454:39 - Sorting techniques and searching tests
454:41 - there are two two searching techniques
454:43 - are there which is linear search and
454:45 - variance binary search we will cover
454:46 - that in our upcoming videos so what will
454:49 - be the agenda for this video is I will
454:51 - be covering this uh three uh medium
454:54 - level questions which are arrays add
454:57 - this question so so I again these these
455:01 - these many questions are not enough for
455:03 - you to practice you just have to get
455:06 - your hand dirty on the programming uh so
455:09 - what I suggest you you just go to the
455:11 - any any of the portal or Geeks for geeks
455:13 - hacker Rank and hacker hacker are
455:15 - register there uh try solving uh
455:18 - questions on the arrays set the
455:19 - difficulty levels as easy medium then
455:22 - hard
455:23 - okay so practice more and more so that
455:26 - you can improve your logic building okay
455:28 - so let's get started uh what is the
455:31 - question write a Java program to test if
455:33 - an array contains a specific value so
455:36 - what these programs what this
455:39 - in this question what we have to do is
455:41 - we have to search for an element uh
455:43 - which is given by the first of all we
455:46 - require an array and inside that array
455:49 - you will be getting one uh element which
455:51 - is of uh arrays arrays of type into
455:53 - arrays holding the integer values itself
455:55 - and we uh you have to search that
455:58 - element inside that array whether that
456:00 - elements is present inside the diary or
456:03 - not if that if that present inside the
456:05 - array you just simply return true
456:07 - Boolean value and if that elements
456:10 - doesn't uh present in inside that L
456:13 - array you just simply return false okay
456:16 - on the console okay so let me get into
456:19 - my IDE and I will just simply
456:22 - comment this out uh this is our previous
456:25 - videos Solutions okay and I will
456:29 - simply comment and here I will again
456:32 - comment and I will write
456:36 - medium
456:38 - question one
456:40 - okay medium level questions one okay uh
456:43 - now I will be creating one method inside
456:47 - this and since then since this method is
456:51 - probably I will declare it as a public
456:52 - and I will declare it as static because
456:55 - I have to call this inside my main
456:57 - method and which is test static method
456:58 - okay static uh and this is this will
457:02 - return a Boolean value either true or
457:04 - false it will return true if that
457:06 - element is present inside that array and
457:09 - it will return false if that element is
457:11 - not present inside that array okay and I
457:13 - will write
457:15 - uh My Method name as contains contains
457:18 - means whether that element is inside
457:20 - that array or not you can add anything
457:22 - whatever you want and I will pass my
457:25 - array
457:26 - and
457:28 - item means the value that we have we
457:31 - have to search inside that
457:33 - array okay and I will simply write one
457:36 - for Loop and so I will write integer I
457:40 - in
457:42 - array
457:44 - what we have to do uh we have to check
457:47 - if
457:49 - the array at ith index is equals to
457:53 - equals to
457:55 - um is equals to equals to item
457:58 - is equal equals index
458:02 - uh not just uh sorry uh I have followed
458:08 - the traditional for Loop over here I
458:10 - just have to write I is equals to equals
458:12 - to item oh
458:14 - sorry about that and I will write inside
458:17 - this return
458:21 - return true
458:24 - okay return to I guess this
458:29 - cannot return a value from a method with
458:32 - white word result type
458:37 - uh why am I getting
458:40 - oh wait I forgot that this is the
458:44 - separate method
458:45 - uh let me just remove this my main
458:49 - method so that program can understand
458:51 - this is as a separate method
458:55 - okay uh now it's okay I will import my
458:59 - main method over here
459:06 - why am I not getting
459:09 - wait a minute let me check this whether
459:15 - oh yeah sorry
459:17 - I have not ended the method
459:20 - now it's working fine I will get my main
459:23 - method okay now it's working right okay
459:26 - and after this for Loop uh when the
459:30 - program execution will get at line
459:32 - number 36 when we doesn't uh find any
459:36 - element which matches to the item that
459:37 - we have passed to the method okay so in
459:40 - that case we simply return
459:42 - false okay now it's okay and now we will
459:46 - call that method inside this main method
459:48 - for that before that uh I will declare
459:51 - one array
459:53 - int
459:55 - array which is equals to
459:59 - uh I will simply assign the values over
460:03 - here itself or 10 comma 20 comma
460:07 - 23 comma 30 comma 45
460:11 - you can give any value whatever you want
460:15 - and after that I will require one
460:18 - variable
460:20 - item means the I value that we want to
460:23 - search inside that array and let's
460:26 - suppose we have to search 23 inside that
460:29 - array okay and now
460:32 - I will just
460:34 - print the
460:37 - call the contents method and I will pass
460:40 - array and
460:42 - item as my parameters to it okay now if
460:47 - I run this since the 23 is present
460:49 - inside this array the expected output
460:51 - should be true yes it is returning to
460:53 - and now if I give a item value as number
460:58 - which which is not present inside that
461:00 - array then in that case I should get
461:02 - false yes it is getting showing false
461:06 - okay now it's working fine so this is
461:09 - the solution to the question number one
461:12 - and what is the question number two
461:14 - second question that is fifth question
461:15 - write a Java program to find the index
461:18 - of an array element so we have to find
461:21 - the index
461:23 - of an array element okay
461:26 - so in this case
461:28 - we want we have to get one array from
461:31 - the user and we want
461:34 - one item like here we have declared over
461:37 - here one item should be there and we
461:40 - have to match whether that item is
461:42 - present inside that array or not if that
461:44 - matches we just have to return the index
461:48 - at which the item is whether inside that
461:50 - array okay
461:52 - this is the idea behind this question I
461:55 - will comment this out and this statement
461:59 - also and now here I will write one more
462:03 - comment
462:04 - uh
462:06 - medium
462:07 - question two
462:09 - and for this I will create I will create
462:13 - one in
462:14 - method by the name of find index because
462:17 - we have to find the index of the element
462:21 - that that is present inside the diary
462:23 - and I will write public
462:28 - static the return type should be in
462:30 - because we are retaining the index that
462:32 - is the integer value
462:34 - okay those are the method name is find
462:37 - index and this method is uh receiving
462:40 - one
462:42 - array as an input
462:44 - array as an input and integer
462:48 - uh t
462:50 - let me give a SD okay
462:53 - okay so what we are going to do inside
462:56 - this we will check one base condition if
463:01 - my if the array
463:04 - is equals to equals to null
463:08 - then
463:11 - return minus one this is the this is
463:15 - called as base condition in programming
463:16 - uh you have to check the corner cases
463:19 - whether these are the cases uh that you
463:22 - need you need to handle or this will
463:24 - improve your space and time complexity
463:26 - of the
463:27 - your algorithm because if the array is
463:30 - horizontal means array is empty there is
463:32 - no point checking doing all this uh
463:35 - running those Loops doing all those
463:37 - processing tasks then it it you can
463:39 - simply return -1 because if the array is
463:43 - null you are not getting going to get
463:44 - that element inside that array okay so
463:47 - this is the base
463:49 - condition
463:51 - that we have to check and
463:55 - now here I will write integer length
464:00 - equals to
464:02 - array Dot
464:05 - oops sorry
464:07 - error.length
464:10 - and I will require one more variable I
464:12 - is equals to 0
464:14 - and I will declare one while loop
464:17 - and set this I will write I is less than
464:21 - my length
464:23 - okay uh I'm doing this task I'm running
464:27 - this while loop whenever
464:29 - my I is less than left so initially my
464:33 - value is 0 and length value is uh is the
464:36 - number of elements which are better
464:38 - inside that array okay it can be
464:40 - anything 5 10 whatever the number of
464:41 - number of elements you pass inside the
464:44 - array and inside this for loop I will
464:46 - check one if condition if my array at
464:48 - ith index
464:50 - is equals to equals to p okay T is
464:54 - nothing but the value either item that
464:56 - we want to find inside that array in
464:59 - that case we will simply return the
465:01 - value of the I uh return
465:04 - the i i wins the well in this highest
465:07 - value I represents the current index at
465:09 - which the loop is running so if that
465:11 - elements matches the elements that we
465:13 - want to pass that we have passed to the
465:17 - method then in that case return the
465:19 - value of the I that means return the
465:20 - value of the index at which the element
465:23 - is present inside the diary and if it is
465:26 - not present inside the diary if it not
465:28 - matches with the elements inside that
465:30 - array simply do I plus plus means
465:33 - increment the value of the I and again
465:35 - go further checking whether the I is
465:36 - less than equals to length and whenever
465:39 - my while loop is executed successfully
465:42 - and I till not found the element which
465:44 - is
465:45 - which I want to find inside that array
465:47 - in that case that means that that
465:49 - element is not present inside that array
465:51 - in that case we will simply return
465:53 - -1
465:55 - okay and now uh I hope this is the thing
465:59 - that we have to do inside this method
466:01 - and now if I go inside my main method I
466:05 - have I will be using the same array and
466:09 - here I will give 23 as an input the item
466:13 - which we have we are searching for in
466:15 - inside this array and add indexing start
466:18 - from 0 so 0 1 2 the expected output
466:21 - should be 2 okay
466:24 - and I will simply
466:26 - print
466:29 - I will call the method find index and I
466:32 - will pass array and the item to this
466:36 - method okay now if I run this
466:40 - I should get 0 1 2 yeah we are getting 2
466:43 - on the console because 0 1 2 the element
466:45 - is found at the index 23 and let me give
466:48 - the items value as 2 which is not there
466:52 - inside that array in that case I should
466:54 - get the
466:55 - output as -1 yeah we are receiving it as
466:58 - minus one and if I give the array as an
467:02 - empty array
467:03 - base condition we also check
467:06 - in that case also we will receive minus
467:08 - one yeah we are receiving the minus one
467:10 - uh now it's okay
467:13 - now the one more question was there uh
467:16 - write a Java program to copy an array by
467:18 - iterating the array now uh
467:22 - we in this questions uh in this question
467:24 - we have given one array we just have to
467:27 - copy the elements which are present
467:28 - inside one array and take those elements
467:31 - and copy those all elements inside the
467:33 - new array okay so there are several ways
467:36 - by which we can write this code in
467:38 - optimized manner uh
467:41 - okay so for now till now I'm assuming
467:45 - that you know have you don't have any
467:47 - advanced knowledge about the arrays and
467:50 - problem solving so we'll go the basic
467:53 - approach of itself okay uh so now
467:58 - I will comment it out
468:01 - and I will write one more comment over
468:03 - here
468:05 - taking medium
468:08 - question three
468:10 - and now I will comment this also okay
468:14 - so I will write one more method over
468:16 - here
468:17 - okay so what we'll be doing we just we
468:20 - just have to copy the elements okay so
468:22 - in that case uh the method should not
468:25 - return anything okay so the written type
468:27 - should be wired okay so I will
468:30 - public
468:33 - static
468:34 - void
468:38 - um late wait wait wait wait wait
468:41 - do I need to create one separate method
468:45 - first
468:46 - I think no need is there to create one
468:50 - separate method where we can do this
468:52 - kind of shop inside the main method
468:54 - itself
468:55 - okay so one array was declared already
468:57 - over here I will use the same array uh
469:00 - these items value was not required for
469:02 - me to in this question and I will
469:05 - declare one more here array I will call
469:10 - this as new
469:12 - array
469:14 - new integer of and I will give the same
469:17 - one two three four five capacity of five
469:21 - elements
469:22 - inside this area okay
469:25 - and now
469:28 - um
469:30 - to do this I one inbuilt method was
469:33 - there I will use it as
469:36 - uh okay I will write
469:40 - original
469:43 - array
469:44 - and to pin this array inside one go we
469:49 - have one method
469:52 - arrays
469:54 - Dot
469:56 - to string
469:58 - and we have to pass the array name to it
470:02 - okay
470:03 - now it's so address.2 string arrays is
470:07 - the class which is uh provided by the
470:09 - Java uh in the util package here you can
470:11 - see if I hover over here you can see
470:13 - Java dot util dot arrays and I guess
470:17 - yeah IntelliJ IDEA has also imported the
470:21 - following package okay
470:23 - what it will do it will get array as an
470:27 - input and it will convert that array in
470:30 - into the string okay so it will here you
470:33 - can see it it is accepting the errorism
470:35 - parameter and it will convert those
470:37 - array elements into the string and it
470:39 - will print all those in a sequence of
470:42 - that we have stored over here okay now
470:46 - I just have to copy all those elements
470:49 - so for the copying purpose I required
470:51 - one for Loop which will start from I is
470:55 - equals to 0 and which will go till
470:57 - whether till my array dot length
471:02 - and each time I will be doing I plus
471:03 - plus and inside this array
471:07 - I will simply write new array wait wait
471:11 - wait wait
471:13 - a new array at it index means the first
471:16 - India that is zeroth index I will copy
471:18 - the element which are which is present
471:20 - at the head right index means we are
471:22 - just simply taking the first element of
471:25 - the original array and we are assigning
471:27 - it to the value of the value add the
471:30 - zeroth index at the new array similarly
471:33 - when we go for the again checking for
471:35 - the for loop at that time is value is 1
471:37 - we will simply get the first element of
471:39 - the original array and copy it with this
471:41 - first position of the new array okay
471:44 - and after that
471:46 - once the for Loop is ended uh the same
471:49 - thing we are going to do we are going to
471:53 - print the
471:55 - copied array
471:58 - copied array and will pass
472:01 - new
472:03 - array as an input to this okay now if I
472:05 - run this
472:07 - same array should get printed okay
472:09 - original array is uh 10 20 23 30 45 and
472:12 - copied array is 10 20 30 to 23 30 and
472:15 - 45. so this is the solution to the
472:18 - question number sixth
472:20 - so I hope you got some idea how these
472:23 - searching and sorting techniques are
472:25 - done in Java there are some algorithms
472:29 - uh like I said a linear search binary
472:31 - search and for the Sorting uh bubble
472:33 - sort heaps or Radix or merge merge sort
472:36 - is there there are so many uh sorting
472:38 - techniques we will also cover that all
472:40 - these algorithms in our upcoming video
472:42 - but before that you should go to gigs
472:46 - for gigs or hacker rank to try solving
472:49 - some questions so that your logic
472:52 - building will get improved uh in the
472:54 - programming okay strength thank you guys
472:56 - for watching this video and I will see
472:57 - you in the next one
472:58 - hello and welcome back to the new video
473:00 - of the Java tutorial Series so till now
473:03 - we have covered arrays data structure uh
473:06 - so what I'll be doing is uh we'll be
473:08 - covering some hot hot topics hot
473:12 - interview questions which are covered or
473:14 - frequently asked during the interview
473:16 - processes of the many companies okay uh
473:19 - so these are the basic one uh that that
473:23 - the interviewer may ask you to test your
473:26 - problem solving skills okay so if today
473:31 - in this video
473:32 - uh let me just open uh create one Java
473:35 - class and I will rename it as
473:39 - net supports
473:41 - remove
473:43 - elements okay so let me what I'll be
473:47 - doing is let me just increase the font
473:50 - size
473:52 - okay wait I will increase the phone
473:55 - sites
474:00 - okay now it's okay okay so I'll just
474:05 - comment out the question so what we have
474:08 - to do is we have to
474:11 - remove the
474:14 - Indian numbers
474:18 - from an array
474:21 - so what we have to do is we have to
474:23 - write one function where we have to pass
474:27 - one array to that function and that
474:29 - function will return you the new array
474:32 - where all the elements are odd ones okay
474:37 - so what it does it will remove the all
474:40 - the even numbers from the array that you
474:44 - have you have passing to that function
474:46 - okay
474:47 - so enough talking so you know I will
474:50 - give you an example let's suppose
474:53 - okay wait let me just comment it out and
474:55 - this is an example array we have this
474:58 - array
475:00 - let's suppose we have elements random
475:02 - elements three comma 2 comma
475:06 - four comma seven comma eight
475:10 - okay so uh this is uh the array that you
475:14 - have passed to the function and now uh
475:17 - the array which will be returned by our
475:21 - function is 3
475:24 - 2 is removed because that is your even
475:26 - number four is also got removed because
475:28 - that is also even number seven
475:32 - and eight is also removed so this is the
475:34 - expected output from your function
475:36 - function okay uh so first of all let's
475:39 - break down our question so we have to
475:42 - remove the even numbers from an array
475:44 - right so first of all we have we need
475:47 - one uh way where we can count
475:52 - the total number of
475:55 - uh even integers that are present inside
475:59 - that array right so we need uh one way
476:02 - to count uh step let me just call it as
476:05 - steps
476:06 - steps that we need to solve
476:09 - count
476:11 - the number of
476:14 - uh not even that that let us count odd
476:19 - numbers so that okay after Counting
476:25 - step number two is we have to create one
476:29 - new array of that size of the size
476:33 - equals to the odd numbers present inside
476:35 - that array right so
476:37 - create a new
476:40 - array of
476:43 - sides
476:44 - equals
476:46 - number of
476:49 - odd
476:50 - numbers
476:52 - right
476:54 - now after creating the array we just
476:58 - need to iterate through this through the
477:00 - array and check whether that number is
477:04 - or if that number is odd we just simply
477:07 - take that number and put it inside the
477:10 - new array okay
477:12 - so I will write if
477:15 - number is
477:17 - odd
477:19 - take it
477:22 - and
477:24 - put it
477:26 - inside
477:29 - new cell okay so these are the steps
477:33 - that we have to follow
477:35 - okay so let's go and create our main
477:40 - function first
477:41 - I will like my main function and inside
477:44 - this main function I'll create one array
477:47 - I'll be taking the hard code hard-coded
477:51 - values you can also take the
477:54 - use input from the user by taking the
477:57 - creating this object of the scanner
477:59 - class as you know till now I hope
478:02 - array
478:05 - of size let's suppose five and wait
478:11 - and I will pass the values
478:15 - uh let's let let me let me give the
478:18 - above values itself three two
478:22 - four seven
478:24 - eight
478:27 - okay now I'm getting the error
478:32 - put it now it's okay
478:35 - okay uh now we have created one array
478:39 - and now I will write
478:42 - and one function
478:44 - function call before that I have to
478:46 - create our function over here I will
478:47 - create one function
478:53 - okay
478:54 - so my function uh doesn't return
478:57 - anything it just creates a or else I can
479:01 - return I can return one array
479:06 - um
479:06 - okay for now I have not written anything
479:10 - I will just simply write void
479:13 - my function name or else I will write
479:17 - I will return that new array itself okay
479:19 - you can also write while but one extra
479:23 - thing that you have to do is you have to
479:25 - print that a new array inside that uh
479:28 - that function okay
479:30 - that's what we have to do extra over
479:32 - here I'm not doing that thing
479:35 - I will write remove even and
479:39 - I will just pass
479:41 - the array
479:43 - to it okay now inside this function
479:47 - first thing we have to do we have to
479:49 - count the odd number okay so for
479:51 - counting part I need one uh counter
479:54 - variable
479:55 - uh let me just call call it as our count
479:58 - is equals to zero
480:00 - initiative zero
480:02 - and we need one for Loop and so this for
480:06 - Loop related from I is equal to 0 to I
480:10 - till
480:12 - less I less than array Dot
480:16 - length and each time we'll do
480:19 - I plus plus and inside this array now
480:23 - we'll check for if condition if
480:28 - current I index
480:31 - is more to
480:35 - is not equals to
480:38 - zero
480:40 - okay so what this line will do is it
480:44 - will check that number and it will check
480:47 - if it is divisible by 2 mod 2 means if
480:50 - it will be divisible by 2. if it is
480:52 - divisible by 2 that means that number is
480:54 - even number and we will not count that
480:57 - number as a odd odd number and we will
480:59 - not increment the value of the order
481:00 - count okay and inside this we will
481:02 - simply increment the uh
481:05 - or count by one or count plus plus
481:10 - okay
481:11 - so first step is done now we have to
481:15 - create a news array of size the number
481:19 - of the odd numbers basically excited
481:21 - array okay so I will write int array
481:26 - this is the result array so I will name
481:28 - it is result
481:32 - of size or count
481:35 - okay okay
481:37 - now inside this I will again need one
481:42 - variable to get to take the track of the
481:47 - indexes of the new uh what we can say
481:51 - new array
481:52 - now
481:54 - inside our for Loop
481:57 - I will just write my inti is equals to 0
482:01 - and this for Loop will again run from
482:03 - int I plus then Mary Dot and this time
482:09 - we'll do I plus plus
482:11 - and here we are checking one condition
482:14 - if
482:15 - array at height index
482:18 - mod 2.
482:21 - 0
482:24 - okay if that number is not equal to 0
482:26 - what that means
482:28 - that number
482:29 - is an odd number and we have to push
482:33 - that number inside our new result array
482:35 - and I will pass as index because
482:39 - indexing of this resultant error will be
482:42 - different uh as that of the our array
482:46 - that we have passed to the function okay
482:47 - and we'll write array add I
482:52 - okay after passing that we have to
482:54 - increment the index index variable also
482:59 - so that next time the I index will be
483:02 - switched to the next uh part okay or
483:06 - suppose uh for the first Value First
483:09 - Time index value is idx value is 0 so it
483:12 - will push that variable and sorry number
483:15 - to the zeroth index and next time uh idx
483:20 - plus plus we will do the 0 to 1 and next
483:22 - time when we are pushing that number to
483:24 - then array it will become one okay
483:28 - now at last
483:31 - I will just simply return our
483:33 - result.array
483:35 - okay and over here I will call that
483:41 - so remove I will call that
483:46 - function over here
483:48 - it means just call it
483:52 - wait wait
483:59 - laughs
484:03 - why am I not able to call this
484:08 - wait a minute guys
484:14 - int remove even
484:19 - more
484:27 - and I will pass Direct
484:30 - I'll do it okay what I am getting here
484:33 - non-sticking method oh wait now I will
484:36 - have to switch it as static because
484:40 - as we know uh non-static methods cannot
484:43 - be called inside the static method so
484:45 - our main method is static one that
484:47 - that's why we have to create our new
484:49 - method as a static on it also okay and
484:52 - now
484:53 - this whole thing I have I write inside a
484:57 - print statement
484:59 - print
485:02 - remove even and I will pass our ad to it
485:05 - okay
485:06 - so that is pretty much I think we have
485:10 - to do let's hope
485:13 - okay so this is getting
485:17 - then the build is going on
485:20 - we'll just complete
485:23 - okay this is returning I guess
485:27 - object
485:30 - wait wait wait
485:34 - effect
485:35 - this thing we have to do I think wait
485:39 - let me just commit it out
485:44 - and I will just simply
485:47 - what we can do is
485:50 - create one array
485:58 - every two
486:01 - and you will assign it as
486:04 - foreign
486:15 - [Music]
486:44 - [Music]
486:48 - all right we need to iterate over that
486:50 - array okay so we have to run run for
486:53 - Loop over here I is equal to zero I is
486:57 - less than
486:58 - ARR
487:00 - 2 dot length and each time you'll be
487:04 - doing I have 5 plus plus okay and inside
487:07 - this uh we'll just simply write not
487:10 - print element only print because it will
487:13 - print all the diary inside the vertical
487:16 - manner okay now I have to just print
487:20 - area of
487:22 - to a guide index yes
487:25 - okay so now it will print the new array
487:28 - which way which is returned by our
487:31 - function
487:33 - so expected output should be 3 and 7
487:35 - inside the new array let's see yeah
487:37 - three and seven is getting printed only
487:40 - thing is that
487:41 - I just have to print
487:43 - one extra line over here I will just
487:46 - simply write over here itself
487:48 - okay now it's okay
487:50 - fire and again three one space and seven
487:53 - should be printed on the console yeah it
487:56 - will be printed on the console so quick
487:59 - summarize uh what we have done in in
488:02 - this question uh we have removed the
488:04 - even numbers from an array uh so let's
488:07 - suppose this is an array it will remove
488:08 - the even numbers from an array so one
488:12 - thing uh let me clear
488:14 - the way I do in is not the only way you
488:17 - can do it you can also try in the new
488:20 - ways right right now here we have
488:23 - created one new array and we are storing
488:26 - that number inside this array uh we can
488:29 - solve this here by using one one array
488:32 - itself but only thing is optimization
488:35 - should be there okay so that part comes
488:38 - under the time and space complexity uh
488:41 - so we will also cover those lectures in
488:43 - our upcoming videos
488:45 - how to reduce your space and time
488:47 - complexity of your code which will
488:49 - improve The Code by a much way okay so
488:55 - here
488:56 - that's all for this question
488:58 - I will see in the next one
489:03 - hello and welcome back to the news new
489:04 - video of the driver tutorial Series so
489:06 - today in this video we will be covering
489:08 - another question uh which is frequently
489:10 - asked in our interview for interview
489:12 - process of any companies
489:15 - so the question is how to reverse an
489:17 - array in Java okay so let me just
489:21 - create a Java class and name it as
489:28 - first array
489:30 - okay so let me just increase the font
489:32 - size
489:37 - yeah now it's okay I guess
489:41 - okay so let me just give my one comment
489:44 - which is question
489:47 - reverse and
489:50 - edit uh
489:52 - for example uh the original array that
489:56 - we have given is let me just write
489:58 - original array origin arrays so let's
490:01 - suppose one comma two comma
490:04 - 3 comma four comma five
490:08 - all right and the array one
490:12 - that we have to return is
490:15 - the output at mesh weight five comma
490:18 - four comma 3 comma two comma 1. okay so
490:22 - this is the area that we have to return
490:25 - okay so let's go and write this
490:31 - math function
490:33 - okay so we have to write this function
490:34 - so we just have to reverse an error so I
490:37 - don't think we have to return anything
490:39 - so let me just write as
490:42 - method name as public static
490:47 - void as written time because we we do
490:50 - not return anything to
490:52 - after this function
490:54 - and I have to pass the array okay so
491:00 - adding
491:02 - let me call it as numbers
491:04 - because it's integer array and we have
491:07 - to pass start index
491:10 - and we have to pass the end index of the
491:13 - diary
491:15 - okay
491:16 - so this is a question this is the method
491:20 - declaration
491:22 - why we have written static because we
491:25 - are calling this method inside a main
491:27 - method and this method is a static one
491:29 - that's we have written static as the
491:32 - method type okay and we need one while
491:35 - loop okay so inside this file Loop one
491:38 - thing we can do is uh we can achieve
491:41 - this using single array itself means
491:44 - what what is the meaning we just modify
491:47 - the array which will be passed to this
491:50 - function or the method this method is
491:52 - accepting one array right so we will do
491:56 - such things that we will modify this
491:59 - array and reverse the elements and store
492:03 - those elements inside this array itself
492:05 - okay and another way in doing is doing
492:08 - this is you can create a new array
492:12 - and you can create a new array and you
492:14 - can Traverse this original array but in
492:18 - the backward Manner and you can just
492:19 - take go on taking those elements and
492:22 - adding those elements inside the new
492:24 - array what uh but one thing is the
492:28 - drawback of this approach is you have to
492:30 - create one new array right it will
492:32 - increase the space and time complexity
492:36 - of your code itself right there so what
492:39 - we'll be doing is we will modify things
492:42 - in such a manner that we will be
492:44 - requiring one array and we will do all
492:46 - those modification inside this array
492:48 - itself okay so why I will write one
492:51 - while loop while our start is less than
492:55 - 8. okay so this Loop will run until our
493:00 - start in start integer value is less
493:03 - than end integer value okay so what we
493:07 - will be doing is we will write 1 10
493:10 - variable and I will assign the value to
493:15 - it as integer of start integer of start
493:18 - okay
493:19 - and over here
493:22 - numbers
493:23 - start is equals to
493:26 - numbers
493:30 - sorry number set
493:34 - okay and over here I will write numbers
493:37 - of
493:40 - end is equals to
493:43 - temp
493:44 - and after that
493:46 - start plus plus
493:49 - n minus minus okay so let me explain
493:52 - what we have done here we are just
493:54 - swapping those numbers okay so what
493:57 - swapping means we are taking one element
494:00 - from that array itself and we are
494:02 - swapping that element with the element
494:04 - other element inside that array okay so
494:07 - uh initially module starts well it
494:10 - initially the start value is 0 because
494:13 - the error indexing start from 0 okay and
494:16 - what is the end value end value is the
494:18 - length of that array minus 1 because
494:21 - since the array is indexing start from 0
494:23 - that's why we have to minus one number
494:25 - from the address length okay
494:28 - and
494:29 - it over here we have assigned the
494:32 - numbers of start means numbers of zeroth
494:36 - element that is 1 to the 10. so
494:38 - initially
494:40 - 10th value is 1 and numbers of start we
494:43 - have assigned to the numbers of n
494:45 - numbers of strategies this this position
494:48 - first position of the array and we are
494:51 - assigning or changing the value of this
494:54 - position as numbers of n numbers of n is
494:56 - 5 so after the first uh after running
495:00 - the nine number the number which is
495:03 - stored at the first index of the array
495:06 - is file and numbers of n is equal to 10
495:08 - numbers and numbers of temperance and
495:11 - Position will be stored the tenth value
495:13 - to what is the tenth value time value is
495:15 - the first element of the array okay so
495:18 - after this after line number 10 the
495:21 - first and last number got successfully
495:24 - strapped okay and I will just simply
495:26 - increment the value of start now the for
495:30 - the next iteration the start value will
495:32 - be at over here and the end value will
495:35 - be will be at over here so the these
495:38 - numbers will also get slapped and will
495:40 - be at 4 comma 2 okay and when we are at
495:44 - three the start value is also three and
495:48 - ends and the pointer is also pointing at
495:51 - three okay so at that time uh this three
495:54 - will not get swapped since this is the
495:57 - middle point of the diary and after this
495:59 - iteration uh we'll we'll break this
496:03 - condition because start value will be uh
496:06 - over here and and we will go well the
496:09 - end value will be over here and this
496:12 - start value is no more less than the end
496:14 - value which is exceeds and this while
496:17 - loop will break and after that our whole
496:20 - array will get reversed at this point
496:22 - okay so I will write main main function
496:27 - and I'll create one array
496:32 - now
496:33 - which is equals to the let me give that
496:36 - example array itself over here one comma
496:39 - two comma three comma four comma five
496:42 - and
496:44 - I will just call that method okay
496:48 - reverse and I will pass our array
496:53 - comma start index should be zero As We
496:57 - Know and end index is the length of the
497:01 - array that means
497:03 - here uh dot length
497:06 - and since the array indexing starts from
497:09 - the
497:10 - zero we have to minus one because added
497:13 - out length this will return the arrays
497:17 - in length as 0 1 2 3 4 5 but the
497:20 - indexing should
497:21 - uh there for the till four number and
497:26 - now after this
497:29 - okay so we have to paint that array
497:33 - again
497:34 - for that we will do iterate
497:38 - through and for Loop I will write I is
497:41 - less than
497:43 - here Dot
497:45 - length
497:47 - I plus plus
497:49 - and inside this for Loop we will just
497:52 - simply print
497:56 - array add index
497:59 - plus okay
498:03 - so this this is the thing that we have
498:05 - to do insert this question I guess so so
498:07 - let me just run this
498:13 - okay so you can you can see five four
498:15 - three two one is getting printed which
498:17 - is exactly the reverse manner of this
498:19 - one two three four five okay so you can
498:22 - uh you can give as much value you want
498:25 - over here with an array and you rerun
498:27 - this code you will get the exactly the
498:31 - opposite in the reverse way of the diary
498:34 - and you can also take the input from the
498:38 - user from here you can you just simply
498:40 - need to create this object of the
498:42 - scanner class and take the input from
498:43 - the user and pass that array to this
498:46 - function of over here
498:48 - okay so try doing some giving some more
498:52 - important to this function and I hope
498:56 - you got this question thank you for
498:58 - watching this video
499:01 - hello and welcome back to the new
499:03 - version of the travel tutorial Series so
499:06 - so till now we have covered two
499:09 - questions which are frequently Asked in
499:12 - the interview processes and now today we
499:15 - will be covering another question which
499:18 - is to find the minimum or the maximum
499:21 - value inside an array so what they have
499:23 - done over here is you will be giving
499:25 - giving
499:27 - and array and you just find you just
499:30 - have to find minimum or the maximum
499:33 - value from the array
499:36 - array will consist of the integer
499:39 - numbers and you have to find the minimum
499:42 - number from the tab
499:44 - okay so let me just write question over
499:48 - here
499:50 - find
499:56 - maximum
499:59 - for all man
500:02 - Eddie
500:03 - and let me give you an example 5 comma 6
500:08 - comma 9 comma 10 comma 25 so let's
500:14 - suppose this is an uh example
500:17 - so after giving this array to our
500:21 - function that we have we are going to
500:22 - write
500:23 - the expected answer should be 5 because
500:25 - among those five integers five is the
500:29 - minimum number or else if you finding
500:31 - the maximum numbers the result should be
500:35 - 25. who can do anything so you can find
500:40 - minimum as well as the banks okay so in
500:43 - this question we will be finding the
500:45 - minimum you can try for the maximum one
500:46 - if you get some error you can do comment
500:49 - out I will be
500:51 - giving you the reply okay
500:53 - so
500:55 - I guess we have to find the minimum
500:57 - value for that we have to return that
501:00 - minimum value inside in the integer
501:01 - format okay so the return value of the
501:04 - written type of the our method should be
501:07 - integer okay and our method should be
501:10 - static because we are calling it from
501:13 - the main method
501:15 - of type in I will name it name this
501:18 - method as find
501:20 - mini mode
501:23 - okay so to this we will be writing
501:29 - array because we need to pass that array
501:32 - to that function
501:34 - okay so inside here I will be uh need
501:38 - one Min integer variable which will
501:42 - store the value of the minimum welfare
501:45 - minimum number from that array so
501:47 - initially I will be doing
501:51 - initially I just assigning the zeroth
501:55 - index integer value to the minimum
501:57 - variable over here okay and now we need
502:01 - one for Loop
502:03 - which will iterate through the entire
502:06 - array that we have passed I with less
502:10 - than
502:12 - error dot length
502:14 - and each time we'll be doing
502:17 - I plus plus
502:19 - okay so we need one if condition over
502:23 - here array at I
502:26 - is less than min
502:30 - okay so if if that's the case
502:34 - we just need to update the value of the
502:38 - I mean mini variable okay so what we are
502:40 - doing uh doing over is
502:43 - array at I so let me give an example if
502:46 - if it is the case that uh array is a
502:49 - trading for the first time so let's
502:52 - suppose this is the it's array and added
502:55 - index that is zeroth index is 5 so this
502:59 - is the element we are assigned it to the
503:01 - means value yes so let's suppose means
503:04 - the mean value is 5. and if condition we
503:07 - are checking added I
503:09 - that is 5 is less than 5 so this will be
503:13 - evaluated as false so Loop breaks and
503:16 - will come out of the loop and uh for the
503:20 - second time I will do is 1
503:23 - so array at I means array at one edit
503:27 - one is six is six less than five
503:32 - no this is not this is not the case we
503:35 - will again if condition is evaluated as
503:38 - false again we increment the value of I
503:40 - and again we will check uh whether array
503:44 - at 2 error to smile nine is less than
503:48 - min mean is value is 5. again it will
503:52 - evaluated as false so in in our case it
503:54 - it will never evaluate it as two and in
503:57 - an unless there is no number inside an
503:59 - array Which is less than five if that
504:01 - number is less than five it will just
504:03 - simply update the value of the mean to
504:05 - the minimum value that means that that
504:07 - iteration value okay uh and after this
504:11 - successful running of the for Loop we
504:14 - will just
504:15 - simply return the mean value
504:19 - you can also find the maximum value in
504:22 - this same manner you just try once
504:25 - finding I will just write in Array
504:31 - and again you can provide your own
504:35 - input also nope no issues five comma 6
504:40 - comma 9 comma 10 comma 25 comma
504:46 - 4.
504:47 - okay and I will just call
504:52 - find minimum
504:55 - I will write
504:57 - now we're ready
504:59 - and I will just
505:03 - do this entire thing inside this print
505:07 - statement so that the value that the
505:09 - function is returning that is the
505:12 - minimum number should get printed on the
505:14 - console over itself okay so if I run
505:17 - this
505:19 - uh 4 should get printed yeah four is
505:22 - getting printed on the console let me
505:24 - just uh modify one
505:27 - condition now 5 should get printed
505:33 - yeah so let me just try with the
505:38 - negative number
505:39 - oh let's suppose negative nine so what
505:43 - do you think what will be related
505:47 - yeah you guys right now minus 9 is
505:49 - getting printed on the console
505:52 - so this is pretty much about finding the
505:55 - minimum number inside an array you can
505:57 - do this some modification inside this
506:00 - code to get the maximum number
506:02 - try building your logic because by
506:06 - watching these kind of videos uh just
506:08 - watching the problem solving videos will
506:11 - not help you improving your problem
506:13 - solving skills you have to practice a
506:16 - lot uh transform the the focus portals
506:20 - uh problems or hacker and hacker Earth
506:23 - there are so many portals are there try
506:25 - solving those questions
506:26 - and
506:28 - so that you can build build a solving
506:31 - logic okay so thank you for watching
506:33 - this video and I'll see you in the next
506:35 - one
506:38 - hello and welcome back to the new video
506:40 - of the Java tutorial Series so today in
506:42 - this video we'll be showing another
506:44 - problem of array so that it that is the
506:48 - finding the second maximum value inside
506:51 - an array so in our last video we have
506:54 - covered uh finding the minimum or
506:55 - maximum value inside an array so in this
506:58 - video we'll be covering another question
507:00 - which is asked many times uh during the
507:03 - interview possible that is finding the
507:04 - second maximum value inside array array
507:07 - okay so let me just create one
507:10 - call a class called
507:13 - second
507:15 - X
507:18 - and I will let the question
507:21 - so what we have to do is find
507:27 - second
507:30 - Max
507:32 - value in Array
507:35 - okay so I will give you one example
507:37 - let's suppose
507:39 - one
507:40 - comma 2 comma 5
507:43 - comma 9 comma seven this is very so what
507:48 - is the expected output should be so the
507:51 - highest value is 9 and after 9 highest
507:54 - value is seven so the output of this uh
507:57 - array should be 7
508:00 - so this is the thing that we have to do
508:02 - so for this we will write one function
508:06 - and that function will be returning the
508:09 - second maximum number inside an array so
508:12 - the return type should be of type int so
508:15 - let me just create one public static
508:18 - method of type return type int and I
508:21 - will name it as
508:24 - find
508:27 - second
508:29 - Max you can also try finding the second
508:32 - minimum number of from this array so try
508:36 - solving it
508:37 - you just have to say simply
508:41 - change some conditions so that you can
508:43 - get the minimum number which is second
508:45 - minimum number
508:47 - from the array okay so here I need one
508:53 - variable to
508:55 - take the track of
508:59 - the largest element inside that Arrow
509:02 - okay so integer
509:04 - Dot
509:06 - mean value
509:08 - okay so don't worry uh you will be
509:11 - asking what is that this mean when you
509:13 - represent okay so here you can see if
509:15 - you hover over here uh Java has some
509:18 - predefined values inside the language
509:22 - and these are these are nothing with the
509:24 - constant okay so which are defined by
509:26 - the Java itself if you write integer
509:28 - document value some value is assigned to
509:31 - it that is minus two one four seven four
509:34 - eight three six four four eight so this
509:37 - is the values assigned by the Java you
509:39 - can use it inside your code uh you can
509:41 - also write max value as other
509:43 - constraints are also defined inside the
509:45 - Java so
509:47 - uh if you want some
509:50 - overview of this you can just go over
509:53 - here and write
509:55 - so
509:57 - Java
509:59 - for instance
510:02 - and if you go over here you can find the
510:05 - this article which gives you pretty much
510:08 - idea about the Java constants okay and
510:11 - now moving to our question
510:14 - uh I need again one
510:18 - add one more counter variable
510:21 - which takes not the counter variable a
510:24 - variable which carrier tracks the value
510:27 - of the second
510:29 - largest element
510:31 - s inside the array
510:34 - so integer Dot mean value
510:38 - and now one I will require one for Loop
510:42 - which really trade through entire array
510:46 - again the
510:48 - Lynch a
510:50 - ARR dot net
510:53 - and each time we'll be doing I plus plus
510:55 - inside this I will write one if
510:57 - condition uh that is array of I
511:01 - if it has Max
511:06 - then I will just simply write second Max
511:10 - assign the second max value as Max value
511:13 - okay and I will just simply update the
511:17 - max value as
511:19 - air out of I
511:22 - I don't worry we'll do don't dry and
511:25 - taste to check what is going on inside
511:30 - this
511:32 - code Okay so
511:35 - don't worry be with me uh RFI is less
511:39 - than
511:40 - second Max
511:42 - and will require one more
511:45 - and so I hope you remember this for this
511:49 - ad and what is all and means both the
511:53 - condition should be evaluated as true
511:55 - until an endless both conditions are
511:58 - evaluated as true Loop uh the equivalent
512:02 - controls will not enter inside this LC
512:04 - flow one once when all these both the
512:08 - conditions are evaluated as to the then
512:11 - and then only the program control the
512:13 - execution flow of that code should enter
512:15 - the inside this LC flow okay so edit
512:20 - hi
512:22 - is not equals to the
512:25 - Max
512:27 - so what if that's the case inside this
512:31 - we will be doing
512:32 - second Max is equals to
512:36 - ARR off
512:39 - okay
512:41 - so this is the thing that we have to do
512:44 - inside this for Loop and after after
512:47 - execution of the for Loop we will just
512:48 - click it on the
512:50 - variable second Max okay and now inside
512:53 - uh our
512:55 - main main method we will just create one
513:00 - new array
513:04 - and we will pass those values as we have
513:07 - taken inside the example
513:09 - like comma 9 comma seven
513:13 - okay and now I will call
513:17 - that method uh that is
513:21 - fine second left and pass our array Okay
513:24 - so so first let me run this
513:28 - and check whether we are getting the
513:30 - correct our
513:31 - yeah seven is getting minted on the
513:33 - console which is the second maximum
513:35 - number inside the direct and let me once
513:38 - check by changing some values
513:41 - as eight now this time it should be
513:44 - print on console
513:47 - yeah it is getting better on the console
513:49 - so wait let me just put one debug
513:54 - pointer over here
513:56 - and try to debug this code
514:01 - so that you guys can understand this
514:04 - easily okay
514:10 - oh okay so let's
514:13 - now
514:14 - when the program with Exhibition at line
514:17 - number 23 uh this array here you can see
514:20 - one two five nine seven eight it's
514:22 - passed to this fine method
514:26 - okay
514:27 - the exam of the program execution flow
514:30 - comes to this method call okay and now
514:35 - uh so here you can see uh Max has the
514:38 - value assigned as this value we have
514:40 - seen the predefined value which is
514:43 - assigned by the Java to this mean value
514:45 - constant okay so second mind second Max
514:48 - is also assigned that value
514:50 - so for the first iteration is value is 0
514:53 - here you can see and if when that if
514:57 - condition is checked the max value is
514:59 - this and is value is uh zero here you
515:02 - can see and let's go ahead
515:05 - okay so f for the first time so array of
515:09 - I is all obviously greater than Max
515:13 - because this is the value
515:16 - that we have assigned minimum value okay
515:18 - so next
515:20 - a second Max has assigned the value this
515:23 - okay
515:25 - now again we'll check where I is equals
515:28 - to 1 here you can see I becomes 1.
515:32 - and now this time uh we'll check error
515:36 - at 1 errat 1 is 2 whether 2 is greater
515:40 - than a Max uh value that is one
515:44 - yeah obviously we will get inside this
515:47 - Loop
515:48 - we'll update the second max value as 1
515:50 - which is the previous version we'll
515:52 - update the max values as 2. here you can
515:55 - see Max value is updated as to and
515:57 - segments will be updated as one
516:00 - okay come here we will check this uh and
516:04 - again we will check we will come here we
516:08 - will assign the second Max folder S2 and
516:11 - I'm gonna update the second uh max value
516:13 - as 5 because
516:15 - till now the maximum value is 5 inside
516:19 - the error here you can see we have
516:20 - updated the max value S5 and second Max
516:22 - will do H2 and again we will run this
516:25 - Loop for I is equal to 3 so what is the
516:28 - element as I is equal to 3 0 1 2 3 0 1 2
516:34 - 3 9 whether the nine is
516:37 - and greater than 5 because it is will
516:40 - come inside this Loop we will assign the
516:42 - value of second Max as 5 and we'll
516:44 - update the max value as 9 so after it's
516:47 - successful completion of the I value is
516:49 - three uh our max value is 9 and second
516:52 - max value is five okay so for now I is
516:54 - equal to 4 I is equal to 4 is 0 1 2 3 4
516:59 - 7 7 is uh greater than nine no
517:04 - we'll
517:06 - break that if condition will come inside
517:09 - the elsif condition and now inside this
517:12 - relative condition
517:13 - uh once we check this Airship condition
517:17 - will be evaluated as true and next value
517:20 - is 9 and now we'll update the second max
517:23 - value as seven okay seven itself okay
517:28 - now again we will run this Loop we will
517:32 - do these steps and and at last we will
517:36 - get 8 as the second
517:38 - largest number inside that array which
517:41 - is true here you can see one two five
517:44 - nine seven eight eight is the second
517:46 - largest element inside the diary uh okay
517:49 - so which is returned to this
517:53 - a return statement over here and after
517:56 - that return statement we will come here
517:58 - at line number 23 where we have left to
518:01 - that program is called
518:03 - and here we can print that number on the
518:07 - console and exam exams
518:12 - process successfully and it is completed
518:14 - on the console okay
518:16 - so this is how a this program works I
518:20 - hope you got this question
518:23 - try solving and finding the second
518:25 - minimum number inside that array okay so
518:30 - for this for this video this is pretty
518:32 - much thank you for watching this video
518:38 - hello and welcome back to the new video
518:40 - of the Java tutorial Series so today
518:43 - again we will be solving uh one another
518:46 - question uh which is frequently Asked
518:48 - instead of Internet processes
518:51 - and uh the question is how to move zeros
518:55 - to the end of the array okay so let me
518:58 - just create one new Java class with Java
519:02 - class
519:03 - and I will call it as move
519:08 - zeros
519:11 - okay so let me just commented out our
519:13 - question
519:16 - move
519:20 - zeros
519:22 - today
519:23 - and of the
519:26 - array
519:27 - so this is our question so it suppose uh
519:30 - we are given arrays six
519:32 - comma 5 comma 0 comma eight
519:36 - so I think
519:39 - the result should result and add it
519:41 - should look like it's
519:43 - six
519:44 - comma 5 comma 8.
519:48 - comma zero so this is the resultant
519:52 - error we have shifted all the zeros
519:54 - which are there inside this uh array
519:58 - version array to the end of the array
520:00 - okay so this is pretty much we have to
520:02 - do and so since we are doing
520:06 - on this operation inside that array
520:09 - itself so I don't think so we have to
520:10 - return anything
520:12 - uh after that function call so I will
520:15 - for timing I will call it as static
520:18 - wired but sorry
520:22 - void
520:24 - I will name this method as
520:27 - move zeros
520:30 - and I will pass
520:33 - array
520:36 - and
520:37 - when
520:39 - integer
520:41 - okay so inside this I will
520:45 - assign it as indj is equal to 0 and I
520:49 - will go call it a forward run run for
520:54 - Loop so our for Loop will run a form I
520:57 - is equal to 0 to
520:59 - I tell
521:01 - n n is uh
521:04 - side of that which is passing
521:07 - from the method coil okay and now inside
521:11 - this I will check for what if condition
521:14 - if my arrayhead I is
521:18 - not equals to zero
521:21 - and
521:23 - and condition should be there which
521:25 - states that both the condition should be
521:27 - evaluated as two and then then and then
521:30 - only we will inside uh get inside this
521:33 - if condition okay and errat
521:37 - J
521:39 - equal to equal zero
521:46 - and inside this if condition we will
521:49 - simply uh write one temp variable which
521:53 - has value as and there are five and what
521:57 - we are doing here is just swapping those
521:59 - two numbers okay if we found 0 at that
522:04 - in particular index we will swap that
522:06 - value with the value which is at the
522:10 - end of that array okay
522:13 - so we'll assign area of is value
522:18 - to
522:21 - area of change value that's the last
522:23 - value and after that we will just simply
522:27 - assign error J is going to the test
522:29 - value
522:31 - okay so here we are doing swapping and
522:35 - again we will check on if condition if
522:38 - array at
522:39 - J
522:41 - it's not equal to 0.
522:45 - if that is the case
522:47 - we'll just simply
522:49 - increment the value of J over here okay
522:52 - so I think this is a pretty much true
522:54 - that we have to insert this method uh
522:57 - let me just call my main method and I
523:00 - will write in
523:02 - array
523:04 - and we'll pass this same array that we
523:08 - have taken example six comma five comma
523:12 - zero comma eight
523:17 - okay and now
523:18 - from here
523:21 - we will write the note
523:24 - since our method is returning nothing
523:29 - what we can do is we can
523:32 - call that method and after calling that
523:35 - method we will just simply print that
523:36 - array okay because we are doing
523:39 - modification inside the same array
523:41 - that's why we can print the direct after
523:43 - the
523:45 - method call okay
523:49 - okay well we're getting the error oh
523:52 - okay so I have to write the N value also
523:56 - n value is 4.
523:58 - okay and now if I just
524:03 - wait wait not like this I have to write
524:07 - down for Loop to it right over that
524:10 - array
524:11 - why because
524:14 - I is less than
524:17 - error.length
524:19 - and each time we'll be doing I plus plus
524:25 - okay
524:27 - and inside this for Loop you just simply
524:30 - paint
524:31 - area
524:33 - by one extra space
524:35 - and not Ln because we want the array
524:40 - should be printed in the one line itself
524:42 - okay and now if I run this
524:46 - code
524:47 - the expected output should be six five
524:49 - eight zero yeah six five eight zero is
524:52 - getting minted on the console uh let me
524:54 - just modify and trying to give some more
524:57 - zeros inside this code okay
525:00 - uh zero six comma
525:04 - 0 comma five
525:06 - okay so let me run this
525:10 - so all those three zero should print uh
525:13 - shifted on the
525:15 - on the right hand side of this okay
525:19 - now again let me try to give
525:25 - some more input to this code
525:30 - okay and now if I run this
525:35 - though zero should be shifted
525:39 - okay so we guys we have one issue
525:44 - our zeros are not getting shifted
525:48 - okay so let me just
525:51 - try to figure out what I have
525:54 - done mistake over here
525:59 - and just develop this code
526:02 - and try to solve that error let's find
526:06 - that error
526:09 - okay wait wait wait wait
526:13 - let me just
526:15 - check
526:18 - head check for this
526:23 - of course
526:29 - okay so I think
526:33 - this might be the error
526:37 - instead of hard code values I will just
526:39 - write array dot length I don't think so
526:42 - that is the error but let me check
526:47 - if it is yeah
526:49 - that's the error inside our code uh
526:54 - error.net that we have to pass
526:56 - now you can see all the zeros are
526:59 - shifted at the end of the array and all
527:01 - the integer are first first comes
527:04 - integer and all those zeros integers
527:06 - have come after that okay so this is the
527:09 - pretty much about this question you can
527:12 - try buy your own try solving it and this
527:16 - will improve your logic building skills
527:18 - also okay so I will see you in the next
527:21 - one thank you
527:23 - together
527:24 - hello and welcome back to the new video
527:26 - of the Java tutorial Series so till now
527:28 - we have covered a lot of questions using
527:30 - uh arrays okay and now is this is the
527:35 - last question that we are doing uh on
527:37 - array so after this we will be starting
527:40 - our New Concept that is strings in Java
527:42 - uh so string is has some watched Concept
527:47 - in Java we'll see that in our next
527:49 - videos or for this video uh we are
527:52 - covering one question which is
527:54 - frequently Asked in Java how to resize
527:56 - an array okay so we want to resize an
527:59 - array for this I will just create a new
528:03 - Java class resize array
528:06 - and inside this Java class uh first of
528:10 - all write a question that we want to go
528:12 - home that is
528:15 - how to
528:17 - inside the
528:19 - heavy now let's suppose we have added
528:22 - one to
528:24 - three four five and we want to and now
528:28 - till now the RSI is of one two three
528:31 - five contain five elements
528:35 - elements and now we want to resize this
528:38 - array as
528:40 - in uh array array which is holding uh 10
528:44 - elements okay so we want to decide the
528:47 - array size as 10 elements okay
528:51 - wait
528:53 - okay nice
528:55 - so this is our goal uh that we have to
528:58 - achieve
529:01 - elements
529:03 - yeah
529:05 - so uh
529:07 - first of all
529:08 - I will write one function so achieve
529:11 - this thing okay and I guess we have to
529:14 - just resize the array so we are not
529:18 - returning anything so for time being I
529:21 - will just write public static
529:24 - because function doesn't return anything
529:27 - I guess for now and resize is the
529:31 - function name and it will accept one uh
529:34 - two parameters that is one array that we
529:38 - want to resize and the new capacity of
529:44 - that array
529:46 - capacity of the direct okay
529:50 - so okay and now uh what I will do is
529:55 - I'll create one new uh where
529:58 - array
530:00 - name them
530:01 - new int
530:04 - of capacity
530:07 - so what is capacity capacity is the uh
530:10 - capacity of the new array that we want
530:13 - to
530:14 - create okay and now I will create one oh
530:17 - wait wait and now I'll create one for
530:19 - Loop and in this for Loop we will run
530:22 - till I is equals to 0 and I is less than
530:27 - our area Dot length and each time we
530:32 - will increment the value of I by 1 I
530:34 - plus plus all right and inside this I
530:39 - will just simply assign uh 10 pad height
530:43 - index value
530:45 - to array at index
530:49 - right so we are just assigning the
530:52 - values of uh let's suppose for the first
530:55 - time where the is value is 0 we are
530:58 - simply assigning the array at zeros
531:00 - position value to the 10.0 position all
531:04 - right right so this fall group will run
531:09 - until the size home at ARR array and
531:14 - after that it will break the for Loop
531:17 - and after that we just simply assign the
531:21 - value of ARR
531:23 - to 10. yeah now instead of pointing that
531:27 - original array ARR now it is pointing to
531:31 - the new array temp all right and now if
531:35 - we write the main function and here I
531:37 - will just simply create one new array
531:40 - named ARR and I will assign those values
531:43 - uh let me give the values
531:46 - or upper itself one comma two command
531:51 - all three
531:53 - comma 4 comma five
531:56 - and after that uh we'll just simply call
532:00 - that function
532:01 - see size and I will pass our array and I
532:05 - will pass
532:06 - the new capacity as added Outlander into
532:10 - two because error.length is
532:12 - gives 5 and into 2 is 10 so that's the
532:18 - thing that you want to achieve
532:20 - all right and after that I will just
532:25 - simply print my entire array
532:28 - my is equal to 0 minus 10 here are DOT
532:33 - length each time I'll be doing I plus
532:36 - plus I will simply
532:40 - print
532:41 - array at I
532:45 - plus one space
532:48 - all right so what we have done quick
532:49 - recap where you have created one
532:52 - function name as resize and which is
532:54 - accepting two parameters one is array
532:56 - and one is capacity uh which is a new
532:58 - capacity of the new array that we are
533:00 - going to make okay and so here we are
533:03 - making a new array of capacity that is
533:07 - given by the user as the function and
533:10 - after that we have created one for Loop
533:12 - where we are simply assigning the values
533:15 - of or original added to the new array
533:18 - and after that we will just simply
533:21 - assigning the value of the value of the
533:24 - array to the depth that is the new newly
533:27 - created array okay and here we have just
533:30 - calling that function and after that
533:33 - using this for Loop we are just printing
533:35 - the entire new array okay so let me run
533:39 - this
533:41 - okay
533:42 - it means yeah so here you can see uh one
533:46 - two three four five is also printing
533:48 - over here and one thing we can do is
533:51 - we're just simply uh print the ARR dot
533:56 - net
533:58 - this will also give us one idea what
534:00 - inside living happen whether the array
534:04 - science is increased or not okay
534:07 - each
534:13 - all right here you can see the other
534:16 - side with the five you can see over here
534:19 - all right this is how uh you can resize
534:22 - the array in Java so thank you guys for
534:25 - watching this video and I'll see you in
534:26 - the next one
534:31 - hello and welcome back to the new video
534:33 - of the Java tutorial Series so till now
534:35 - we have covered arrays we have done a
534:39 - lot of questions on arrays we have
534:41 - practice some of the questions which are
534:44 - frequently asked during the interview
534:46 - process and I guess this is pretty much
534:48 - uh idea or the foundation you have you
534:51 - want to learn arrays and what you can do
534:54 - is uh just pause at this moment uh just
534:58 - pause this series uh for some one to two
535:01 - days and go and practice on a practice
535:03 - or more and more questions on hacker
535:06 - rank or Geeks for gigs or whatever code
535:09 - platform you prefer lead code is also
535:11 - there and try solving those uh questions
535:14 - using the array tag and you can also set
535:19 - the difficulties as easy medium high or
535:21 - difficult whatever you want but at least
535:24 - try this will improve your logic
535:27 - building skills okay so if you have done
535:29 - that part so you can continue this way
535:32 - and in this video we will be covering uh
535:35 - strings in Java okay so let me just
535:38 - create one new Java class image string
535:42 - string
535:44 - we just call it as string Java
535:47 - string so
535:50 - okay and uh we'll just simply like the
535:52 - main method okay now it's okay so what
535:56 - is string in Java in Java string is
535:58 - basically an object that represents a
536:00 - sequence of character values an array of
536:03 - characters Works same as its JavaScript
536:06 - what I what I tell you here is you just
536:10 - keep attention over here let me just
536:12 - give you an example if I create one uh
536:16 - array of type characters and let me name
536:19 - it as a CH and I will just write over
536:23 - here and I will assign the values to
536:26 - that array as random a
536:30 - comma B
536:33 - comma C
536:35 - comma D wait mistake
536:40 - C comma D now it's okay so if I create
536:45 - this array and instead of this I will
536:48 - just say it's string s
536:51 - is equals to
536:53 - new string and I will pass it as ch
536:56 - uh so here what I have done is I have
537:00 - created an array of type characters and
537:02 - uh and I've stored those characters a b
537:05 - c d inside that array and I have passed
537:08 - this array to the string s okay so at
537:11 - line number four what it that what it
537:14 - does as it will get that ABCD character
537:18 - as a one single string and it will treat
537:21 - it as a b c d now this is get stored
537:25 - inside the memory okay so it is it is
537:28 - same as uh this is another approach I am
537:31 - telling you simply go and write string s
537:34 - is equal to and simply assign a string a
537:36 - b c d so instead of writing these two
537:39 - lines you can you can still achieve the
537:42 - same output ABCD as here so I'm getting
537:46 - error I have got to written as well yeah
537:49 - you can achieve this is also okay
537:51 - and now a Java string class so string
537:54 - one thing you remember for other
537:57 - programming languages like C plus plus
538:00 - we write string as a s uh as small or in
538:04 - Java you write the string with starting
538:06 - s with capitalize and you as as of now
538:10 - you should know that everything in Java
538:12 - you write with capital letter starts
538:14 - with capital letter is a class in Java
538:16 - so Java provides so string is a class in
538:19 - Java here you can see the implementation
538:21 - path if you hover over this icon and
538:24 - public final clustering which is
538:27 - implementing this this many classes
538:31 - now okay so you can go through this
538:34 - official documentation of java to see
538:36 - how the strings Works in Java so Java
538:40 - stream class provides also a lot of
538:42 - methods to perform operation on the
538:43 - string such as compare concat equals
538:46 - plate length replace compared to in in
538:49 - turn substring we will be covering some
538:52 - of the frequently used functions in
538:55 - string you know upcoming videos so for
538:57 - still till now you just remember string
539:00 - is a class in Java which is which has
539:03 - some different methods which has
539:05 - different methods to implement it okay
539:08 - and now
539:09 - [Music]
539:11 - we just
539:13 - go through this concept of string okay
539:16 - now here what is how to create a string
539:20 - object so
539:21 - so now you have understood what is
539:24 - string so how to create a string object
539:26 - let's see so there are two ways uh first
539:28 - one way is by
539:34 - string
539:36 - literal literal and one more ways
539:41 - by using
539:44 - bye
539:46 - new
539:48 - keyword okay so we'll discuss now this
539:52 - this these two points okay how to create
539:54 - object of the string okay so by string
539:57 - literally is created by using double
540:00 - quotes for example for example let me
540:03 - just write string
540:04 - S2 S2 is equals to
540:09 - anything string
540:10 - welcome
540:14 - foreign
540:20 - so this is the one way by which you can
540:24 - create a string which this is the way of
540:27 - buying string literal okay and now by
540:29 - using the new keyword you can also
540:32 - create this string so how you can create
540:36 - let me just click Give an example string
540:39 - this time SC is equals to Visa you just
540:43 - have to write new string and you just
540:46 - pass the same
540:48 - string here that you have written or
540:52 - anything that you want to assign value
540:55 - to that string variable over there okay
540:57 - so this is this is the way two way by
541:01 - which you can create the strings in Java
541:05 - okay so one more constitute there now
541:09 - one thing one thing you tell me what you
541:13 - can
541:14 - interpret just pause the video and think
541:17 - about it string S4
541:20 - and I will write it as
541:23 - welcome okay
541:25 - and I will create one more stream by the
541:28 - name of S5
541:31 - and available right
541:36 - the same string exactly the stream
541:38 - string to where the W is capitalized and
541:40 - all all the letters are small small case
541:44 - okay so what do you think here the Java
541:47 - memory memory lock memory allocation
541:49 - will allocate the S4 and S5 the Sim
541:53 - different memory instances or not
541:56 - so in this case in Java whenever we
541:59 - create S4 and S5 which has the same
542:03 - exactly value of strings it doesn't
542:06 - create a new instance what in what
542:09 - exactly the Java do is you can
542:12 - understand by this example okay so here
542:15 - you can see S1 and S2 has the same value
542:17 - of welcome so Java has a string constant
542:21 - pull where inside the heat memory uh
542:25 - this pull is there where Java stores all
542:28 - these values of the strings and whenever
542:30 - you create a new string it it will check
542:34 - through entire string constant pool if
542:37 - there is a string present which has the
542:39 - same value that you have assigned
542:41 - previously it will just point to that
542:42 - variable to this
542:44 - string in the string pull which is
542:47 - inside the hip memory okay so this is
542:51 - one thing that I want to tell you
542:53 - and
542:54 - there are several methods are also there
542:59 - which is there inside the string class
543:02 - let me just
543:04 - give you one example okay
543:07 - let me just give you an example
543:12 - what I can do is okay
543:15 - so look at it
543:16 - I will just
543:18 - come here and I will create
543:21 - I will just use this S4 and S5 itself
543:25 - okay let me just write one more thing
543:27 - here then add B you can add B okay and
543:32 - now uh if I
543:34 - simply system dot outdoor println and I
543:38 - will write
543:40 - string
543:44 - S4
543:47 - length is and I will concat this string
543:51 - with the method as 4 dot length
543:58 - so this will return
544:02 - the number of characters inside this
544:07 - string that means the string length how
544:10 - many characters are present inside that
544:12 - string okay and now if I run this
544:18 - you can see the string F4 length is
544:21 - seven y seven You Can Count Your count
544:23 - here okay one two three
544:26 - four
544:27 - five six and seven okay seven characters
544:30 - are there that's why 7 is a string so
544:33 - similarly you can perform this same
544:35 - method or calculation on this S5 also uh
544:39 - you just have to write S5 dot length oh
544:42 - wait one mistake you just sanctify over
544:45 - here S5 it should be there because we
544:47 - are printing the length of the S5 okay
544:50 - and now if you come here string S5 is 14
544:53 - why so because you can count one two
544:56 - three four five six seven eight nine ten
545:01 - eleven twelve thirteen fourteen this
545:04 - method will also come the blank spaces
545:06 - which are given over here after welcome
545:09 - and after at this was also treated as a
545:12 - character in Java okay
545:14 - once I quoting the link so these are
545:18 - some methods and one more method is
545:21 - there
545:22 - which is wait let me just put it over
545:25 - here and yes one more method is there
545:29 - two lowercase
545:31 - so this is the method and similarly
545:34 - there is one more method is there to
545:36 - uppercase which also converts all those
545:41 - letters inside the string to the lower
545:43 - case and if you use the two upper case
545:45 - it will also convert that all the
545:48 - characters of that string to the upper
545:51 - case okay
545:52 - so to achieve this you just simply write
545:56 - S4
545:58 - dot to lower case and now if I run this
546:02 - let me just commit it out so that you
546:05 - can see only one output on the console
546:09 - yeah you can see welcome is printed but
546:12 - additionally we have given W as a
546:14 - capital and whenever we apply that two
546:18 - lowercase method on the S4 string if it
546:21 - was it was giving the output as W small
546:23 - because two lower case will convert all
546:25 - those character inside that string to
546:28 - the lower case and similarly you can
546:30 - achieve one more uh
546:32 - to uppercase
546:34 - you can see two uppercase now put it in
546:39 - thing
546:40 - yeah all the characters inside that
546:43 - string are converted to the upper case
546:45 - format okay so these are some uh methods
546:50 - which are there inside the string uh
546:53 - what you can do is you can simply come
546:55 - here
546:56 - and come here and write
546:59 - string in Java and one first page Java
547:04 - stream uh which is of java T Point
547:07 - website you just come here we go through
547:09 - it whatever I told you is there itself
547:12 - you can come here and read it and here
547:15 - you can see there are string class
547:17 - methods you got these uh huge list of 28
547:21 - methods which is implemented inside the
547:24 - string class you can come here you can
547:26 - also check the official documentation of
547:28 - the JavaScript this Java string intern
547:31 - method so you can come here and also see
547:35 - some example of this try those examples
547:38 - look at those methods and
547:41 - that's all for this Java string and in
547:44 - our upcoming videos we'll be covering
547:46 - some
547:47 - again after again what we do after
547:51 - creating this safe Theory creating this
547:53 - theory part we will move on to the
547:54 - coding questions we'll try solving some
547:56 - coding question inside using the
547:58 - JavaScript okay so thank you for
547:59 - watching this video
548:02 - hello and welcome back to the new video
548:04 - of the Java tutorial Series so till now
548:06 - we have covered
548:08 - uh add a sense string in Java so from
548:13 - this video onwards we are starting a
548:15 - link list in Java
548:17 - okay so linked list is a easy and more
548:22 - uh my my favorite data structures uh
548:25 - okay and I also love you implementing
548:28 - any links in Java and you can you also
548:31 - love it hash I am sure
548:33 - and so let's go uh so single in English
548:36 - either data structure used for storing
548:38 - the collection of nodes which have the
548:41 - following properties okay so till now we
548:44 - have we have seen arrays okay so let me
548:46 - show you one thing uh here you can see
548:49 - uh so this is this is one
548:54 - I hope you guys
548:56 - can understand by this so till now uh
549:00 - you have seen one array like this okay
549:02 - array so this is the array uh which has
549:06 - a elements one one two three four
549:09 - three in three six six elements which it
549:12 - is storing and now what linked list does
549:16 - is linked list does exactly the same way
549:19 - it stores the data but in the format of
549:23 - node nodes okay so these nodes have some
549:27 - properties okay so let me just uh give
549:29 - you an example of the node itself over
549:32 - here okay so
549:34 - here you can see so in Java
549:38 - linked list this is the No One node okay
549:41 - so let me just write one note over here
549:44 - this is one
549:46 - okay so this is one node which has uh
549:50 - two parts one is data part and one is
549:55 - next part
549:57 - so these this is simply represents one
550:01 - node in Java okay and which is pointing
550:06 - okay so this is
550:09 - n and which is pointing to
550:13 - none
550:15 - okay so this this entire thing in its
550:20 - one node in Java it has some character
550:23 - six okay one properties it contains
550:25 - sequence of the nodes okay in the single
550:27 - linked list uh you can see these main
550:31 - these multiple nodes are connected in an
550:34 - in a chain okay and these are connected
550:36 - with one one on one another okay another
550:39 - node has data and a reference to the
550:41 - next node in a list okay so it has two
550:45 - or two section one is there a section
550:46 - and the next section data section will
550:48 - hold the actual data or the value with
550:53 - that node going to hold and next in the
550:56 - next part it it contains the address of
550:59 - the next node that is it is pointing
551:01 - okay so let's suppose uh like this we
551:05 - have multiple nodes okay let me just
551:07 - give you an example uh let me just
551:11 - get it over here and for example uh
551:15 - these are the two things okay it's
551:17 - derive the two nodes in a two chain two
551:20 - nodes okay one node and here in the next
551:23 - part it is has the address of these
551:26 - nodes these node okay so this node and
551:28 - this node is connected using the next
551:32 - part here the address which is stored
551:34 - here okay
551:36 - now the first node is the head node uh
551:39 - always remember the first node of the
551:42 - linked list is called as head let me
551:44 - just write it all head and the last node
551:48 - it's of the
551:50 - of the link list it's always pointing to
551:53 - the null so if if you consider these
551:56 - type of nodes let's suppose they are uh
551:59 - five and the elements in the five nodes
552:02 - in the link list and after the fifth
552:05 - node fifth nodes next should point to
552:08 - the null which represents that this
552:10 - wrinklage ends here and
552:14 - in some of the reference books you will
552:17 - also find as the last element the last
552:21 - element or the last node of the linked
552:23 - list is called as tail okay so the first
552:26 - node is called as head last node is
552:28 - called as state link list okay so in
552:32 - Java
552:33 - or in general there are three types of
552:35 - Link list okay one is simply
552:38 - linked list
552:41 - second one is
552:43 - W linked list
552:47 - and third one is
552:49 - circular
552:51 - linked list
552:54 - all right so we are going to cover all
552:56 - these needs list in detail so starting
552:59 - with the single link list in this video
553:01 - in this video I will just give you one
553:04 - overview of the single in English what
553:06 - exactly it is so so you understand
553:09 - the in linked list the data is stored in
553:12 - the format of node and node contains the
553:14 - two part that is data and next part data
553:17 - Parts holds the actual value and next
553:19 - box next part holds the address of the
553:22 - next node to which it is pointing so
553:25 - that it just goes in in the chain format
553:28 - and always remember first node of the
553:31 - link list called as head and the last
553:33 - node of the link is called as tail and
553:35 - the last nodes next should point to the
553:37 - null which is represent representing
553:39 - that this necklace ends there okay so
553:43 - this is the idea of the syncline link
553:45 - list uh I hope you got some overview of
553:49 - the link list how English Works in Java
553:52 - and from next video onwards we'll be
553:55 - starting all those operation like insert
553:57 - insert operation or how to print the
554:00 - linked list uh how to delete the element
554:03 - and how to uh get the element of fetch
554:08 - the element how to check the whether the
554:10 - element is present inside the links all
554:12 - these queries so we will solve uh using
554:14 - the linked list in our upcoming videos
554:15 - so stay tuned and thank you for watching
554:19 - this video
554:24 - hello and welcome back to the new video
554:25 - of the Java tutorial Series so in our
554:28 - previous video we have seen the
554:31 - theoretical concept of the sync readings
554:33 - list okay so now from this video onwards
554:35 - we have started starting implementing
554:37 - all those uh
554:40 - functionalities of the single in English
554:42 - that that we want to know in order to
554:45 - understand the single link list so first
554:47 - of all in this video we'll be covering
554:50 - how to make the list
554:54 - in this using a singly linked list okay
554:57 - so let me just uh come here and
555:01 - create a new Java class and I will just
555:03 - name it as simply
555:07 - link list
555:11 - yes now uh you know it's okay so before
555:15 - that uh I hope you have watched our
555:17 - previous video where we have discussed
555:19 - the theoretical parts of the single in
555:20 - English and in that video I was told you
555:23 - that if we need one node uh to make a
555:28 - single linkage okay and that node
555:30 - contains the two parts one is a data
555:32 - part and one is next which representing
555:35 - which repair holding the address of the
555:38 - next node in the list okay so for that
555:41 - uh let me just come here come here and I
555:44 - will create one another plus uh which is
555:47 - our node of the
555:50 - linked list I will name it as node s
555:53 - which is node of sync singly range list
555:56 - okay notice
555:58 - and here we will create that structure I
556:01 - hope you guys remember that structure
556:02 - let me just recall if you don't know
556:05 - what I'm telling so these uh this this
556:08 - uh this structure I am talking about the
556:11 - structure this structure we are trying
556:13 - to create inside this class
556:16 - Okay so
556:18 - this class okay so let me just come here
556:22 - and we know we have we want two parts
556:25 - one is data part I will animate as data
556:28 - and another one is next which is holding
556:31 - the address so since it's it it is
556:34 - holding the address for the next node
556:35 - the so the type of these uh variables
556:39 - should be known as and I will just write
556:41 - this variable name as next okay and now
556:45 - uh one thing whenever these node node is
556:48 - getting created we want these uh that
556:51 - values that the user want user is given
556:54 - should assign to these two variables
556:56 - okay so for that we need one Constructor
556:59 - over here and I will write one
557:01 - Constructor after node s and this
557:05 - Constructor will accept on a parameter
557:08 - that is data which is given as input of
557:10 - either user uh like what what's the data
557:14 - that the node is going to hold okay so
557:17 - and we will assign these Dot
557:20 - data which is equals to data and these
557:22 - represent to the current distance of the
557:24 - variable and then our next should point
557:28 - to the null
557:30 - that is that is the simplest idea of the
557:32 - node we have taken those two variables
557:37 - and we have assigned that value
557:39 - and according to the node this is the
557:43 - idea that is the data part is over here
557:45 - and next part is over and this next is
557:47 - pointing to the null we can change that
557:49 - now uh when the if there are more number
557:52 - of nodes inside the English Okay so for
557:55 - now I guess this is a bit image that we
557:58 - have to do inside the node and now if I
558:01 - go inside my main class which is over
558:03 - here
558:04 - and I will just
558:06 - create one function
558:10 - to make a list okay so to create a
558:13 - single in English Okay and now uh since
558:16 - we are accepting your input from the
558:18 - user we need our scanner class to be
558:21 - imported uh so I will write import
558:29 - Java Dot
558:31 - util Dot
558:34 - scanner so we have imported this kind of
558:37 - class and now since we are going to make
558:40 - multiple functions I guess it is good to
558:44 - declare the scanner object uh globally
558:48 - inside the classroom okay so I will
558:51 - write public
558:53 - static
558:56 - scanner SC is equals to
559:01 - new scanner
559:03 - system.in
559:06 - okay so now we have created this and now
559:10 - I have to do one more thing
559:13 - the first node of the list is called a
559:16 - head and the last mode is called a stay
559:18 - okay so we need those two variables also
559:22 - so we like all right public static
559:26 - so these are no type right so we write
559:29 - public static of type node S
559:32 - one is head
559:35 - and one more is ding
559:38 - all right now I think we are good to go
559:42 - to write the function so I will just
559:44 - comment it out as
559:45 - function
559:48 - to make the
559:52 - singly
559:55 - link the list
560:00 - okay
560:01 - so inside this I will write my
560:05 - function probably static
560:11 - and node s and I will name my
560:15 - engine is make list
560:20 - okay okay
560:21 - so here you can see uh public static uh
560:25 - you know node s is the return type
560:28 - because since this is this this function
560:30 - is making our list we want we have to
560:32 - return the head of the list because uh
560:36 - to access one signal in English or
560:38 - whatever the Ws circular English we need
560:42 - the head
560:44 - head of the list that is the first node
560:47 - of the list without knowing the first
560:49 - node of the list we cannot Traverse the
560:51 - whole list or we just lost here if in
560:54 - case if you if you if you not assigned
560:57 - head uh as the first node of the list
561:00 - and you assign the t uh this second node
561:04 - as ahead of the list then we will never
561:06 - have the track of the first node of the
561:08 - list so that's why it's important to you
561:11 - to assign the head of the list and
561:13 - return the head while you're making the
561:15 - list whatever it is it if it is simply
561:19 - in doubly or circular in English Okay so
561:21 - that's why we have written the return
561:23 - type as known as and we have uh name our
561:27 - function name as make list and we are
561:29 - not passing anything to this function
561:31 - because it's just creating on list okay
561:34 - now uh since
561:37 - okay so assume on conditions we are
561:40 - making one list so initially what do you
561:44 - think a head and tail are null right
561:47 - because
561:49 - list is empty
561:51 - till now okay deal should also point to
561:55 - no so with that part we have done and we
561:58 - will just simply write one print
562:00 - statement that is enter
562:04 - they the data in the
562:09 - list
562:11 - okay so here we are asking the data from
562:15 - the user okay so in data is equal to SC
562:19 - Dot
562:20 - next
562:23 - [Music]
562:24 - so we have uh we have no data path which
562:27 - is the entire path is right so it's not
562:31 - the case that this function call will uh
562:33 - just once okay so we are calling that
562:36 - function making the list and we are
562:38 - making
562:39 - uh multiple nodes inside the list okay
562:41 - so for that purpose we will need one
562:44 - Loop which is iterating over each time
562:47 - whenever uh whenever and how much you
562:50 - denotes you want exactly in our in your
562:53 - list all right so for that we will need
562:56 - one while loop and this right Loop will
562:58 - run until and unless the data
563:02 - value is -1 that means whenever you give
563:05 - the data value as minus 1 this root will
563:09 - break which indicates that you are done
563:11 - with inserting the nodes inside the list
563:13 - and you want to
563:15 - close the list and get out of this okay
563:18 - now if
563:21 - and now here after coming inside this
563:23 - Loop for the first time we just have to
563:26 - create the node the actual node of this
563:29 - linkage okay so we'll create the object
563:31 - object of the nodes
563:35 - and I will just name it as new node
563:40 - s which is equals to the new node and
563:44 - according to that Constructor we have to
563:46 - pass one data okay so that data we have
563:50 - taken from the user over here that we
563:52 - can simply pass it over here
563:55 - now at this point line number 14 we are
563:58 - our list is uh our first node is got
564:01 - created now we have to check if one if
564:05 - condition it should be there if our head
564:08 - cos 2 equals to null
564:15 - sorry guys wait a minute
564:18 - yeah so if our head is equal to equal to
564:21 - null that represents that there is
564:23 - nothing inside the list no node is there
564:27 - inside the list and this is the first
564:29 - node that we are trying to insert our
564:31 - list okay head is equals to null so in
564:34 - that case we will just update the head
564:36 - value to the new node
564:39 - new node s and we update our Tails
564:43 - valued also to the new node s
564:46 - okay so this if condition will executed
564:51 - when there is no
564:53 - node inside the linked list that is the
564:57 - first node that we are trying to insert
564:59 - the list okay and now in the else part
565:02 - we will just simply write tail
565:05 - dot next
565:07 - equals to new node s
565:11 - and after that you will write tail
565:14 - is equal to
565:16 - new nodes okay so in this else part
565:24 - so now in this else part uh whenever
565:27 - when this else part get run when if if
565:29 - condition is not executed and if
565:31 - condition is not con executed when there
565:33 - is a no present inside the list and then
565:37 - in that case we just have to update our
565:39 - tail because head is not going to update
565:41 - head is also already assigned as the
565:44 - first node of the list over here you can
565:46 - see head is assigned to the first node
565:48 - we just have to
565:49 - uh point the tail to the next node okay
565:52 - so if so that is achieved in that else
565:55 - block tail dot next is equal to new node
565:59 - dot next that means tail is currently
566:02 - pointing over a over here that is the
566:04 - first node of the list and this next
566:06 - part
566:07 - 10's next part means this pass this part
566:10 - we are trying to
566:12 - assign the next value to this this node
566:15 - value okay so in over here we have
566:18 - simply assigned that value to this and
566:22 - they are simply as uh assigning the
566:24 - Tails value to the new node value okay
566:27 - so our now our tail should point to this
566:30 - new node that is inserted inside the
566:33 - English and how you are connecting to
566:35 - those nodes that is in next part in the
566:38 - next part we are showing the address of
566:40 - this new node over here and we are
566:43 - simply assigning the Tails value to the
566:45 - new node value okay so this is the part
566:48 - that we have to do and after this
566:53 - okay so whenever these are done with the
566:55 - making the list user will enter the
566:58 - minus one in in the console as the data
567:00 - value and loop will be terminated and
567:03 - after that we will simply write return
567:07 - head
567:09 - okay so we'll simply return head
567:12 - of the linked list
567:14 - okay and now uh
567:18 - if I write
567:21 - my main function and
567:24 - call that make list functions and I need
567:28 - to keep the track of the head okay so
567:30 - ahead I will add
567:33 - node s is equal to head is equal to
567:36 - Middle East so it says this uh function
567:40 - is a function is written in the head
567:41 - will store that head inside this local
567:43 - head variable and after this line uh our
567:49 - function called got called and our list
567:54 - is
567:55 - completed and our list is make okay
567:59 - build okay now I hope you guys
568:02 - understand how to make a single English
568:04 - in our upcoming videos we will see some
568:07 - more functionalities of the link list so
568:09 - thank you for watching this video
568:13 - hello and welcome back to the new video
568:14 - of the Java tutorial series uh so till
568:17 - now uh we have covered uh how to make a
568:21 - linked list
568:22 - that recently in English and so for this
568:25 - video
568:26 - we'll be seeing uh how to print a linked
568:30 - list and how to find a length of the
568:32 - link list okay so for the printing
568:35 - purpose let me just go into my page and
568:37 - let me explain you the theoretical part
568:40 - of this
568:41 - link list okay uh how to print the
568:45 - nucleation okay so for the printing
568:47 - purposes uh first of all we need the
568:50 - head of the link list so from here you
568:53 - you will get to know what is the
568:55 - importance of uh getting the head if you
568:57 - get the right head of the linked list
568:58 - you you can find or you can perform all
569:01 - the operation on the English okay so I'm
569:04 - assuming you have watched the previous
569:06 - video where we have make the link list
569:09 - and where we have discussed about the
569:11 - head part and head is basically contains
569:14 - the and which denotes the start of the
569:17 - language okay so for the printing
569:19 - purpose we need that head so that we can
569:21 - start printing the elements from that
569:23 - position itself okay so for the head
569:27 - printing purpose we need head and we are
569:31 - go go on printing the head and head head
569:36 - until we reach at one position where
569:39 - head is head the node the node of the
569:42 - head which is currently there with which
569:45 - next is pointing to them that that means
569:48 - uh here you can see uh assume there are
569:51 - two nodes in this liquid this this one
569:53 - is head and this one is tail and how you
569:56 - can find the end of the link list they
569:59 - have to find the end end of the link
570:01 - list the it is simply nothing but the
570:04 - the net that modes next should point to
570:07 - the null whenever the node is there
570:10 - whose next is pointing to the null that
570:13 - denotes that that is the end of the
570:15 - leakage that means we have traversed all
570:18 - the linked list and right starting from
570:20 - the head to the tail that is the last
570:23 - node of the necklace okay so this so
570:25 - this is the idea behind the printing of
570:27 - the link list
570:28 - and to find the length of the linked
570:31 - list
570:31 - uh let me just first get clear this
570:36 - print list then again we'll come inside
570:38 - the paint and try to discuss the length
570:40 - of the regression so for that purpose we
570:43 - will write one one more function
570:46 - so this is a public
570:49 - static
570:51 - void
570:54 - I will name it as print list
570:59 - and since we to print the linked list we
571:03 - need the head so that's why we will
571:06 - accept one
571:09 - head of the linked list
571:11 - to this function and after that we'll
571:13 - just simply print that
571:17 - elements
571:21 - elements
571:23 - of the list are
571:26 - after that we'll run one while loop and
571:31 - this while loop will get executed until
571:34 - and unless the head is pointing to
571:40 - not
571:41 - okay when the head is pointing to null
571:44 - that means that is the end of the
571:46 - linkage no more nodes are present after
571:49 - that node okay we are prevalencing
571:52 - then till we find null okay so sound
571:59 - head dot data
572:02 - head dot data
572:04 - and we'll just printing space set I will
572:08 - just write only print because we don't
572:11 - want our dish to be printed in the
572:13 - vertical manner okay
572:16 - here if you write head dot data that
572:19 - means head dot data means this is head
572:23 - entirely dot determine this part we are
572:25 - just simply printing the head dot data I
572:28 - mean the data part of that node okay so
572:30 - okay data part of the node and once we
572:34 - print that we will we just
572:37 - reassign the value of the head to the
572:39 - head.next that means we are moving next
572:42 - forward okay that means after after
572:44 - printing this data bar we will just
572:47 - assign the head value to the Head dot
572:49 - ahead dot next to it hold the next next
572:51 - node address okay so we'll reassign this
572:54 - head
572:55 - to this node and now the head is
572:58 - pointing to this one okay
573:00 - now likewise we will go on traversing
573:04 - the whole list and we'll go on printing
573:06 - the data part of that node and
573:09 - after the at the end we got all our
573:12 - node to get to be printed
573:16 - on the console okay
573:18 - so this is the print list function that
573:20 - we want to perform perform and uh you
573:23 - know previous video we have make the
573:25 - list
573:26 - and now we want to print the list okay
573:29 - so we will just simply can't call our
573:31 - method print list and we will pass the
573:33 - head to this
573:34 - subject and now uh let's try to
573:37 - understand the length function of the
573:39 - link list I like how to find the length
573:42 - of the nucleus that is how many nodes
573:43 - are present inside the linked list okay
573:45 - so for that purpose to find the length
573:48 - again we need the head
573:49 - each each time we need head if we if you
573:53 - get the head you just we have performed
573:56 - all the operation okay so uh a blank
574:00 - function is there we need one head okay
574:02 - so we will just simply write over here
574:04 - oh let me just write it over here we
574:07 - need one head
574:08 - that is a starting point of that click
574:10 - list and after that
574:13 - to count the number of the nodes in the
574:15 - link list that is between uh similar to
574:17 - The Print list we will just simply uh
574:21 - perform one while loop while loop
574:23 - which will iterate through all these
574:25 - nodes and it will iterate until the head
574:29 - dot next is pointing to the null that is
574:32 - the end of the link list and we will
574:34 - take one counter variable
574:37 - counter variables which will count the
574:41 - number of the nodes inside the linked
574:43 - list and each time we will increment
574:47 - increment the head
574:51 - to
574:53 - head dot next
574:55 - so this is the idea behind the how
574:59 - length how to find the length of the
575:01 - link list so let's go and implement this
575:04 - function also inside our code base
575:07 - so I will write public static
575:11 - so this function doesn't return anything
575:13 - find length okay
575:18 - and this is also accepting
575:22 - one head of the linked list parameter
575:26 - and again I as I told you we need one
575:30 - counter variable
575:31 - which initially assigned to 0 and well
575:34 - we need one while loop which will
575:37 - iterate through the all the nodes of the
575:39 - list and we will trade until the head is
575:43 - not a personal and
575:46 - once the height is equal to null that
575:48 - denotes the end of the linked list and
575:50 - if it is not equal signal we just simply
575:52 - uh increment
575:55 - the counter variable uh by one and we'll
575:59 - just simply reassign the value of the
576:01 - head to the head.next
576:04 - so this is the thing that you have to do
576:08 - and after
576:09 - uh successful running or the while loop
576:11 - we just have the length of the nodes
576:15 - which are how many nodes are present
576:18 - inside the necklace that will simply
576:19 - print out over the concept length
576:24 - of the
576:28 - this stage
576:30 - light Plus
576:34 - counter okay and after this we just
576:38 - simply come over here and call that
576:41 - length method and we'll pass that head
576:43 - to this structure also okay and now uh
576:47 - if I run this score okay so it is ready
576:50 - to run
576:51 - first of all uh make list function will
576:54 - get called here here you can say enter
576:56 - the data in the list uh program
576:58 - execution comes over here at line number
577:00 - 11 so let's suppose I'm creating one
577:03 - list okay so let me just write one
577:06 - comment over here so that you guys can
577:08 - understand easily I will write one
577:10 - comment
577:12 - so we are trying to make the list like
577:14 - this one
577:16 - two
577:18 - three
577:20 - four
577:22 - five so we want to make this list okay
577:25 - so let's go ahead and make this list
577:27 - okay so I will let one
577:30 - two
577:30 - three four five so at this point uh list
577:35 - is uh all the elements that I want to
577:38 - insert inside the list are inserted and
577:41 - now I want to get out of this Loop which
577:44 - is this Loop and how to get out this get
577:47 - out of this Loop we just have to give
577:49 - the data as minus one so if I write -1
577:52 - it will get out of this Loop
577:55 - you can see
577:57 - we've got one plug inside our code okay
578:02 - let's try to debug this
578:06 - according to my code this should get
578:11 - out of this Loop
578:15 - it is not getting out of this blue why
578:18 - is it so which is true
578:21 - go through the code and
578:24 - check what is the problem inside this
578:28 - code
578:29 - I'll give it to
578:32 - let me just
578:34 - write one run it one more time
578:39 - stop and return I guess there are some
578:42 - issues
578:44 - okay
578:48 - is it running
578:50 - let me just read like this
578:53 - wait guys it is running
578:56 - okay so yeah we want to enter the data
579:00 - that's one comma two comma three comma
579:05 - four comma five and after that I want to
579:07 - write one so
579:15 - so wait guys I will uh just Rectify what
579:19 - this error
579:22 - okay so guys I after debugging this code
579:27 - I got there one thing we have done a
579:30 - mistake over here while creating the
579:32 - link list that is we are accepting the
579:35 - data from the user and we are according
579:39 - to that we are running this file book
579:40 - okay so once this while loop Got Run we
579:44 - are we we just we have to sub we
579:46 - supposed to rename this Loop and recheck
579:50 - the data value but we are not getting
579:53 - again the input from the user for that
579:55 - purpose we have to time add one extra
579:57 - line over here the C Dot
579:59 - an exchange that that means we are
580:02 - getting again the input from the user
580:04 - and that input is again used as a check
580:08 - to this while loop again we are running
580:10 - this
580:11 - uh link
580:13 - group and now if I run this Main
580:17 - I hope this will work this time and I
580:20 - will try to create one two three four
580:23 - five uh so link is an English slower I
580:26 - will write minus one
580:28 - so here you can see the elements of this
580:30 - list are one two three four five uh
580:33 - which is printed printed by this paint
580:36 - list method and at the length of the
580:38 - list is five since the five elements
580:40 - inside the list is there one two three
580:42 - four five so the little length is five
580:44 - so all working fine uh till now we have
580:47 - covered how to make the list how to
580:50 - print the list and how to retrace the
580:53 - length of this okay so thank you guys
580:55 - for watching this video and I'll see you
580:57 - in the next one
581:00 - hello and welcome back to the new video
581:02 - of the Java tutorial Series so today uh
581:05 - we are trying to learn the how to find
581:09 - the or how to search the element inside
581:12 - this in English Okay so till now a quick
581:15 - recap uh we have done how to make the
581:18 - list how to print the list how to find
581:21 - the length of the list and now today we
581:24 - want we have we want to learn the how to
581:27 - search an element inside a single linked
581:29 - list for that uh we'll quickly go
581:32 - through the one paint and how to how to
581:36 - check how to find the or how to search
581:38 - the element inside and then play
581:40 - language same mean English okay so now
581:44 - so things which are required to search
581:47 - an element so first of all we need the
581:49 - head of the list head that is that is
581:52 - clear we need the head of the list and
581:54 - we need variables to check and to store
582:00 - the place at which we found that uh
582:05 - node or found that data inside the list
582:08 - that is variables variables
582:12 - of type integer
582:14 - and then we need one while loop where we
582:18 - can Traverse through to our whole list
582:21 - and check whether that nodes data is
582:25 - equals to the data which is entered by
582:27 - the user or this that that is the data
582:29 - that is user wants to search okay so
582:32 - these are the things that which which
582:33 - are required to search and particular
582:36 - element inside the linked list
582:38 - and so let's go inside our IDE and try
582:42 - to code this okay
582:44 - so I will write one method public
582:48 - static
582:49 - and we are trying to search an element
582:51 - so there is no modification inside our
582:54 - list and we are not returning anything
582:57 - so return type should be avoid and
583:02 - I will write the search
583:05 - element as our function name and this
583:09 - method should accept
583:12 - the head of the list that is the
583:14 - starting part of the list
583:16 - so at the first we will just simply
583:19 - print
583:21 - the enter
583:23 - the
583:25 - data
583:26 - that
583:28 - you want
583:29 - to search
583:32 - okay so we have receiving one input from
583:35 - the user that is the data that the user
583:38 - want to search inside this
583:40 - list
583:41 - and we will just simply write int
583:45 - element
583:47 - element
583:48 - SC dot extent
583:53 - and
583:56 - place
583:58 - which is equals to
584:00 - currently it is assigned to one
584:03 - okay
584:04 - so
584:06 - okay and then create one new node of
584:11 - temp which has the value equals to the
584:14 - header which will assign the value of
584:16 - head to the 10th and we will perform all
584:19 - those operation using that type variable
584:22 - okay and now we have our 10 we will just
584:26 - simply
584:27 - right one Loop and we'll write until our
584:30 - temp is equals to null
584:34 - we will perform this operation okay so
584:37 - what kind of operation that we have to
584:39 - perform we are we are checking one if
584:41 - condition if our
584:43 - element that we want to find is equals
584:47 - to equals to the current temp dot data
584:51 - if it if it is a condition that means we
584:54 - have we have found our searching element
584:56 - and we just simply write
584:59 - paint
585:00 - element found
585:06 - element
585:10 - found
585:12 - at
585:14 - and we will concat it with
585:17 - Place variable
585:21 - Plus
585:26 - th
585:31 - place
585:33 - in the list
585:36 - okay uh so we'll stop and after this if
585:40 - if you find the element we just simply
585:43 - return we don't want to perform uh more
585:46 - operation
585:47 - and if that is not the case we didn't
585:50 - find our Loop uh sorry the element we'll
585:53 - just simply reassign the template due to
585:55 - the temperature data
585:58 - uh not 10. data time dot next because
586:00 - you want to move to the next element of
586:04 - the
586:04 - list and we will just
586:07 - simply
586:09 - increase the count
586:12 - count of the place by one okay and after
586:16 - performing this while loop if it doesn't
586:19 - if it doesn't return this return
586:21 - statement doesn't get executed that
586:23 - means that element it doesn't uh element
586:25 - is not present inside the inside the
586:27 - list in the link then in that case we
586:29 - will just simply print
586:30 - a limit is not presented inside the list
586:33 - element
586:35 - is not
586:38 - present inside
586:41 - the list
586:43 - okay so I guess this is the thing that
586:46 - we have to perform and okay so I hope
586:50 - you guys are watching the previous
586:51 - videos do watch them and then come then
586:55 - and then only come here you know because
586:57 - you don't understand anything what's
586:58 - going on and please like and share to
587:01 - the series
587:02 - and do comment out what is your favorite
587:05 - part and what is if you find any
587:08 - difficulties also comment I will be
587:10 - looking after it okay so now
587:14 - we want to search the element right so
587:18 - we have make the list
587:20 - we have print the list we have length of
587:23 - the list and now we want to search the
587:27 - element
587:28 - uh okay so I will simply call the search
587:31 - element function I will simply pass the
587:33 - head of the list to that function okay
587:36 - and now if I run this
587:43 - uh we'll take the previous example
587:45 - itself we will make the list as one two
587:48 - three four five
587:51 - oh you know what let me just give you
587:52 - some more examples okay so we have the
587:56 - elements in the list of one two three
587:58 - four five six seven and the length of
588:00 - the list is seven and we want to search
588:03 - let's suppose
588:05 - 5 whether plus 5 is present inside the
588:07 - list or not okay so you can see element
588:10 - found at fifth place it's a list okay so
588:13 - for fifth place one two three four five
588:16 - fifth place is five which is better
588:18 - inside the list that is correct uh so
588:21 - again I will run this and this time I
588:23 - will give the data which is not present
588:25 - inside the list one two
588:27 - three four five six
588:32 - okay so I eliminated the star one two
588:34 - three four five six
588:35 - and now if I want to find 10 in the list
588:40 - so you can see element is not within
588:42 - inside the list okay so everything is
588:44 - fine working so this is the idea of how
588:48 - to search the element inside a link list
588:51 - I hope you got this concept thank you
588:53 - for watching this video
588:58 - hello and welcome back to the new video
589:00 - of the Java tutorial Series so till now
589:03 - we have covered how to search the
589:05 - element how to the length how to print
589:07 - and how to make the list so today in
589:10 - this video we'll be talking about the
589:11 - how to reverse LD single linked list and
589:14 - how to find the middle node of the
589:17 - single request okay so let's get started
589:21 - so to reverse a single request we
589:25 - what are what are all things that we
589:27 - have required and what is the logic how
589:29 - to reverse a string sorry strain not
589:33 - strain which is a single in English my
589:35 - bad how to reverse a single in English
589:38 - uh first of all we want head that uh
589:41 - which is indicating to the start of the
589:44 - link list and again we need one while
589:47 - loop which is iterating over all the
589:50 - elements
589:52 - of that list
589:53 - and one more two more variables of type
589:58 - node will be required which is one is
590:01 - previous which will hold hold the
590:04 - previous uh node of the list and one is
590:08 - next which will hold the next node of
590:10 - the list and of using these three
590:13 - variables of type node we will just
590:15 - perform this inverse operation of the
590:18 - string uh not answering what I'm saying
590:20 - either it's a single list my bad okay so
590:24 - now we will go and write the code for
590:29 - this reverse of this list
590:32 - okay I will come over here and I will
590:35 - write one more function that is public
590:39 - static of this is this uh we want to
590:43 - reverse a list after reversing a list we
590:46 - want to we want to give the new head of
590:48 - the list through which we can uh
590:51 - Traverse the new list that is the
590:53 - reverse list okay so we we need to
590:56 - return the head which is of type node so
591:00 - here we have written this and we have
591:02 - write the function name as reverse list
591:05 - then this list will accept one parameter
591:10 - which is head of the list
591:12 - and as I have told you we need three
591:16 - variables of type nodes
591:18 - so let me just write those node s
591:23 - I will write notice of current
591:27 - so we need we need the track of current
591:30 - previous and next row current will will
591:32 - be equal to the head of the list that is
591:35 - the current uh starting point of the
591:37 - list and again we require node as
591:40 - that is
591:42 - previous
591:44 - which is currently appointed usernal and
591:47 - one word is there that is next which is
591:50 - again pointed to the null
591:52 - okay so now we require one while loop
591:57 - while loop while our current
591:59 - is not equals to
592:02 - null
592:03 - so whenever our current date was signal
592:06 - until that we will perform this
592:09 - operation what are the what are our
592:11 - operation we will assign the next to the
592:13 - current dot next that is equal that
592:15 - means the current where node battery is
592:19 - pointing it is the next node
592:21 - if it will point away so next we'll hold
592:24 - the next variable next not variable next
592:26 - node of the list and current
592:30 - Dot
592:32 - next
592:34 - is assigned to the
592:37 - previous that is previous will shift one
592:40 - one step ahead
592:42 - okay and previous is equals to
592:47 - correct
592:48 - and after that we will just simply write
592:51 - current is equal to next we will move
592:53 - forward to the list
592:56 - and after performing all these operation
592:58 - we will just simply return the
593:00 - previous because
593:02 - that is the new head of the list which
593:05 - is the reverse list okay and after this
593:09 - now we will just simply need to call
593:12 - this
593:14 - method inside our main main method
593:17 - and to call this purpose I guess we want
593:20 - to make the list we have to print the
593:22 - list I don't think so we need length of
593:24 - the list that will just
593:28 - uh committed out and I will also comment
593:30 - the search
593:32 - part also and I will just write
593:34 - reverse list
593:37 - sorry guys
593:38 - will be worse
593:40 - list and I will pass head to it
593:43 - and after this now we again want to
593:46 - print the list but with the updated head
593:49 - right
593:51 - that is written by this reverse list
593:54 - okay so I will just again call the
593:57 - this paint slash method the only thing
594:01 - is that here the print list will print
594:03 - the list in the way manner that we have
594:07 - given input and here the print list
594:11 - function will print the same list but in
594:14 - the reverse manner okay so let's just
594:17 - paste it
594:19 - whether it is running
594:20 - good
594:23 - okay so we are entering the data one two
594:25 - three four and five uh so the expected
594:29 - output should be
594:31 - five four three two one okay let's see
594:33 - if it is there
594:36 - so elements in the list are one two
594:38 - three four five elements of the list are
594:43 - one
594:46 - wait wait wait we are doing something
594:49 - error in this code
594:52 - we have to give us the list
594:55 - so all right
594:58 - uh
594:59 - elements in the list are we are printing
595:01 - the list
595:02 - we are reversing the list and after that
595:05 - we are again printing tools elements of
595:07 - the list are we are we are getting only
595:09 - one over here why so I think we have one
595:13 - then one mistake inside our
595:16 - code
595:18 - uh let me see
595:21 - we have next will be able to call the
595:24 - next question dot next equals to
595:27 - previous and previous is equals to
595:30 - current and current is equals to next
595:32 - and we are simply returning the previous
595:37 - I guess say this wait guys I will just
595:41 - debug it and let you know
595:45 - okay guys I guess I have rectified the
595:48 - error I found the error that is uh look
595:51 - at here we are treating one head and we
595:55 - are making the list and the head which
595:57 - is written by this make list we are
595:58 - assigning that to the Head please
596:00 - okay the next time we are printing the
596:02 - list we are again sending that
596:03 - headquarters this method so that head is
596:06 - not going to get modified over over
596:08 - inside the print method print list
596:10 - method okay but inside the reverse list
596:12 - method uh our head is getting modified
596:14 - here you can see our head is getting
596:16 - modified and our head new head is our
596:19 - head is at one okay so our list is uh
596:22 - let me just give you a clear idea over
596:25 - here you can see one
596:29 - two three four five so our head is at
596:33 - one okay so to the print list we are
596:36 - giving our head okay our head is not not
596:39 - going to change inside our reverse list
596:40 - method also okay but the reverse list is
596:44 - has its own new head here you can see it
596:47 - was returning one node okay so we have
596:51 - to retrieve that node inside our main
596:54 - method we are not doing that we are just
596:55 - simply again passing that head so that
596:58 - head is pointing to one all right so if
597:01 - you reverse the list after work one
597:03 - should be pointing to the null that is
597:05 - that is going to happen by this reverse
597:07 - list that's why uh this this error was
597:12 - there where reverse list is or printing
597:14 - only one inside this we just have to
597:17 - introduce one new node to catch the new
597:20 - node of the list
597:23 - okay so you load
597:26 - new
597:27 - nudes let me write that as news Okay so
597:31 - this node is hold
597:34 - by this news and we'll just simply pass
597:37 - news to it uh now I guess this will work
597:41 - fine and our reversely should paint it
597:43 - on the console and okay now I will write
597:46 - one two three four and five and after
597:50 - that I have that minus one so here you
597:52 - can see one two three four five is
597:53 - getting maintain which is the original
597:55 - list and after performing the reverse
597:58 - reverse list method on this same list we
598:00 - are getting five four three two one uh
598:03 - which is correct
598:05 - so I hope you guys have found this
598:09 - helpful
598:10 - so do like share and subscribe to the
598:12 - channel and I will see you in the next
598:14 - one thank you
598:18 - hello and welcome back to the new video
598:19 - of the Java tutorial Series so in our
598:21 - previous video we have talked about the
598:23 - how to reverse the list and now in this
598:25 - video we will be covering up about how
598:28 - to find the middle node inside a list
598:31 - okay so let me just go in go into my
598:34 - paint window
598:36 - and I will show you how we can find the
598:38 - Metal Zone of the list okay so to find
598:40 - the middle node of the list since this
598:43 - is it is a link list we can we cannot uh
598:45 - perform the operation that we are
598:47 - performing inside our array to find the
598:48 - link list that is a total element inside
598:51 - the array you divided by two that that
598:53 - stuff we can do inside the array but but
598:55 - in the necklace uh we cannot do that
598:57 - that thing so we have to find another
599:00 - way to find the middle node of the list
599:02 - okay so to find this we will uh
599:06 - try to find the middle node of the
599:08 - middle node of the linked list using the
599:11 - slow and fast pointer approach okay so
599:14 - what it does is exactly so we need to
599:17 - two variables of type node s and uh
599:21 - which which will call it as let let me
599:24 - call it as slow Monitor and fast pointer
599:26 - we initially assign those uh as the
599:29 - heads value okay that is the starting
599:31 - starting of the list and
599:34 - only need one counter variable which is
599:36 - initially a count as a initially
599:39 - assigned as one okay so we need one
599:42 - while loop while what will be doing
599:44 - while
599:45 - our first pointer is not a personal and
599:49 - our first pointer dot next is not equal
599:50 - to none what that means exactly is uh
599:53 - the first node is not uh need should not
599:57 - be null and the node which is pointing
600:00 - to it the first node is pointing to the
600:02 - node uh that node should be present and
600:04 - that should note should not be null okay
600:06 - so these two conditions that we are
600:08 - going to check inside the while if that
600:09 - two conditions
600:11 - won't satisfies this condition will
600:13 - enter inside the loop and we will simply
600:15 - change the value of the slow pointer to
600:17 - the next that means slow pointer will be
600:20 - assigned a new new value of the slow
600:23 - pointer will be
600:24 - this next next next mode of the list
600:27 - okay and we will assign the first
600:29 - pointer value to the first pointer next
600:30 - dot next that is fast Pointer's value
600:33 - will go to the Third
600:36 - node inside the list that is
600:39 - by the name you can think file slope
600:43 - pointer means we are moving slowly we
600:45 - are iterating the list slowly at the
600:47 - first pointer means we are iterating the
600:49 - list by one one node ahead always one
600:52 - node ahead of the
600:54 - slow pointer okay and after this uh
600:57 - running of this while loop each time we
600:59 - will increment the count variable so
601:01 - that we can have the number exactly the
601:05 - position where the middle node of the
601:09 - list is present okay and after running
601:11 - up this while loop we will just simply
601:14 - print the slope pointer data because the
601:16 - slope pointer is a node which is uh
601:19 - exactly at the middle of the list and we
601:21 - will also print the count of a count
601:25 - variables value which will give us the
601:28 - exact position of the element exact
601:32 - position where the node is present
601:33 - inside the list okay so that is the idea
601:36 - behind the finding the middle node of
601:39 - the list so let's go inside into our ID
601:41 - and try to Port this out
601:44 - so to make this function I will write
601:46 - public static
601:48 - and I don't think so we are returning
601:51 - anything okay so I will write white for
601:54 - time being and I will write this name as
601:57 - middle node
602:00 - and this method will also accept the
602:02 - head of the list
602:04 - add
602:06 - and I will simply come here so we are
602:10 - approaching this way in the slow pointer
602:14 - first pointer approach I will just
602:16 - comment it out I will write slow
602:20 - pointed
602:22 - is equals to
602:24 - one star
602:27 - and
602:29 - our fast
602:32 - equals to
602:34 - touch down
602:35 - that that means always the first pointer
602:38 - will be ahead of the slow pointer by the
602:40 - one node and this will
602:42 - gives us the exact
602:44 - beta of the list and we need
602:49 - to
602:52 - this slowing for first pointer we need
602:56 - this slow pointer initially both the
602:58 - both are assigned to the head head of
603:01 - the list that is the starting point of
603:03 - the list
603:03 - and again we need one more notice
603:08 - flash pointer
603:11 - which is also assigned to the head of
603:13 - the test Edition okay so when we need
603:16 - one count variable to find the position
603:18 - of the position of the node that is
603:21 - present exactly at the middle of the
603:23 - list
603:29 - inside the while loop we will write
603:31 - first pointer
603:34 - is not equals to none that is function
603:36 - should not be null and and we will write
603:39 - and condition and I hope you guys
603:41 - remember and condition both the both the
603:44 - expansion expression should be evaluated
603:46 - as true
603:48 - fast pointer dot next
603:51 - a should not equals to
603:53 - null
603:55 - if that is the case we will enter inside
603:57 - this Loop and it will simply assign the
604:00 - slow pointer value to the slow pointer
604:01 - next we will implement the slow pointer
604:04 - nodes to the next node of the list okay
604:07 - so slow pointer is equal to slow pointer
604:10 - dot next
604:12 - and we will also increment the value of
604:16 - the first pointer to the first pointer
604:17 - is equals to fast pointer dot next dot
604:20 - next that means the one node ahead of
604:23 - the slow pointer and we will just count
604:26 - plus plus because we want also want to
604:28 - point the position where the
604:31 - inside the list and after this run after
604:34 - successfully running out this while loop
604:36 - we will we have now the
604:38 - middle node of the list and in the name
604:41 - of slow pointer which is flow pointer is
604:44 - exactly pointing to the middle middle
604:46 - node of the list and the count having
604:48 - count the value of the count is equals
604:51 - to the
604:52 - position of the node that is built
604:54 - inside the make list is the middle okay
604:58 - now here we can simply write middle
605:02 - load of the list is
605:10 - data
605:12 - that is the data part of the list uh
605:15 - which is
605:20 - which is at
605:24 - count is the position of that number
605:29 - position
605:32 - let me call now yes right position
605:38 - in the list
605:42 - full stop
605:44 - and this will give me the middle load
605:47 - data and the exact position of that node
605:51 - inside the list
605:52 - okay so let me call this
605:57 - to call purpose will come inside of
605:59 - method and we will call this function uh
606:02 - middle node
606:04 - not make list
606:06 - middle load and will pass the head to it
606:09 - okay uh so uh I don't think so we want
606:12 - to reverse this I will just comment it
606:14 - out we'll need this also
606:18 - you just make the list you just print
606:20 - the list and we just find the middle
606:22 - node of the list okay
606:24 - now if I run this
606:29 - sorry
606:30 - one two three four five so what do you
606:36 - think one two three four five is there
606:38 - and according to this list uh three
606:41 - should be the middle middle node of this
606:43 - list let's see if it is the case
606:46 - yeah elements of the list list are one
606:49 - two three four five middle node of the
606:51 - list is three yes this is right middle
606:54 - node is three which is at third position
606:57 - of the list that is one two three third
607:00 - position for the list so everything is
607:03 - working fine uh let me just run it again
607:06 - and give it give
607:07 - the even number of the
607:10 - nodes inside the list three four five
607:14 - and six and hit minus one and now you
607:17 - can see the middle node of the list is 4
607:19 - which is right 4 and which is that whose
607:23 - fourth position one two three four
607:24 - fourth which which is also correct so
607:27 - this is the idea behind how to find the
607:29 - middle node of the list so I hope you
607:32 - are enjoying this video enjoying this
607:34 - series uh do like share comment and
607:36 - subscribe to the channel and I will see
607:38 - you in the next one with the new concept
607:41 - of the single English thank you guys for
607:43 - watching this video
607:46 - hello and welcome back to the new video
607:48 - of the Java tutorial Series so till now
607:51 - we have covered a pretty much concept of
607:54 - the linked list so we have seen uh made
607:56 - a find in the middle node how to
607:58 - reversing the list how to search an
608:00 - element how to find the length of the
608:02 - list how to print the list and how to
608:03 - make the list
608:04 - so till now we have covered all those
608:08 - Concepts all those operations which are
608:11 - performing on the link list which
608:13 - doesn't modifies the linked list right
608:16 - we have not done anything over here we
608:19 - are just simply retriving or checking
608:21 - the list we are processing the list till
608:23 - now but from this video onwards we will
608:27 - start performing on the operation and to
608:30 - modify the list okay so we will be
608:33 - starting with the insertion operation
608:35 - first and then then we will move to the
608:38 - deletion operations okay so basically
608:41 - there are three types of
608:43 - uh insertion which are done at the on
608:45 - the link list okay so let me just clear
608:48 - this first
608:49 - let me just clear this
608:52 - oh let me just clear okay now it's fine
608:57 - I guess okay
608:59 - uh now let me just create one list for
609:02 - you so that you guys can understand it
609:05 - clearly
609:06 - okay
609:08 - so we are making this list and I will
609:11 - write uh
609:13 - I will make this three notes interest
609:16 - okay
609:18 - and each these nodes are pointing to
609:21 - this and this node is pointing to this
609:23 - and this node is pointing to the null
609:26 - okay I will write the lower
609:29 - so that you can understand
609:31 - null
609:33 - uh so this is our 10
609:37 - I hope you remember what is still
609:40 - uh this is head
609:44 - you know this is the
609:48 - data part
609:49 - and this is the
609:51 - next part
609:53 - okay and this next contents address of
609:56 - this node and this is the
609:58 - first node
610:01 - see the second node
610:02 - and this is the third node in the list
610:05 - okay so this is our list
610:08 - and we want to perform the instruction
610:10 - operation of this list so basically
610:13 - there are three type of operations
610:16 - okay that we can perform on a list uh
610:19 - let me just increase the font size
610:21 - we have to perform this operation on the
610:23 - list okay so
610:26 - first operation is
610:28 - insertion at
610:33 - beginning
610:36 - and second one is insertion app
610:42 - and
610:44 - and third one is insertionate
610:50 - user
610:52 - specified
610:56 - location
610:58 - okay so these three operations we are we
611:01 - have to perform
611:03 - okay and now
611:07 - now you can see
611:10 - these three operation we have to perform
611:12 - okay
611:14 - yeah right so in this video we'll be
611:17 - covering insertion at the beginning so
611:19 - what do you think to insert a new node
611:23 - at the beginning of the list uh what
611:25 - will be operation that you have to
611:27 - perform okay so let's write down those
611:31 - operation that we need to perform uh so
611:33 - okay and we need first of all
611:37 - and we need the current head of the list
611:41 - head of the list
611:44 - okay and then uh
611:47 - we need a third we need to make a new
611:51 - node inside a list before that we need
611:53 - data which is important we need data for
611:57 - the new node
611:58 - data
612:00 - for new node
612:03 - new node and we will make the new node
612:06 - make the new node
612:09 - and after that
612:12 - we will assign that or insert that node
612:16 - inside this list
612:18 - insert
612:21 - the node
612:22 - in list and after that we will return
612:29 - the new
612:32 - head of the list because head is going
612:34 - to change
612:38 - it is going to change because after
612:42 - performing this operation head is head
612:45 - over this way is going to change I will
612:47 - just copy all this operation that we
612:48 - need to perform to insert error at the
612:51 - beginning and I will come over here and
612:53 - I will just
612:55 - comment and paste it off okay so these
612:59 - are the operations that we need to
613:00 - perform I will just tab it over here
613:03 - okay now it's fine so these are the
613:06 - operation that we need to perform okay
613:07 - so we will write one function which is
613:09 - public static and it will return When
613:12 - you know new head of this list so we it
613:15 - didn't type should be node and the name
613:19 - of the method is insert
613:25 - add the
613:26 - insert at beginning
613:33 - so at the beginning
613:36 - node s
613:38 - uh will first will take the head of the
613:41 - list okay for all this operation so
613:45 - again okay
613:47 - so we have received the head of the list
613:50 - okay we have taken this uh in now we
613:54 - need to take the data for the new node
613:57 - okay so we have to receive the data
613:59 - right so before that I will print on the
614:02 - console
614:03 - write the
614:06 - enter
614:08 - the
614:10 - data
614:12 - to
614:15 - insert
614:17 - three
614:18 - node in
614:22 - beginning okay
614:23 - so we are asking for the data from the
614:27 - user to insert
614:28 - which is going to going to insert it at
614:31 - the beginning of the list and now here
614:36 - I will store that data into the data
614:39 - variable SC dot next state and after
614:43 - storing the data
614:44 - now a second part is done
614:48 - now we have to make the node okay so
614:52 - make the making the node is uh pretty
614:53 - simple I hope you guys now
614:56 - we just have to create a new object of
614:59 - the
614:59 - new node s
615:03 - okay wait
615:05 - all we have to do we just have to create
615:07 - a new node
615:10 - okay with node yes let's suppose and we
615:14 - will assign new
615:17 - new node and we'll pass the data into
615:20 - the node okay now it's okay and now
615:25 - wait guys
615:26 - no okay
615:28 - now once we created the node we have to
615:32 - insert that node into the list so for
615:34 - the insertion point of view uh what do
615:37 - you think I will just come to my paint
615:39 - okay so this is the head which is
615:41 - pointing to the second node of the list
615:42 - so if if you want to perform uh
615:45 - insertion operation at the beginning uh
615:48 - let me just create one new node so that
615:50 - you can understand clearly here is the
615:52 - data part and here is the next part okay
615:55 - now if you want to insert this node in
615:57 - inside this list at the beginning what
616:00 - all things that you have to do uh you
616:03 - have to do you think you have to perform
616:06 - Okay so
616:08 - first of all you need to link this node
616:11 - with the current
616:13 - first or the current head of the list
616:15 - okay so by linking means we you have to
616:19 - give the address of
616:21 - this s next and assign it to the current
616:25 - head this okay so this is the first step
616:28 - that you have to perform I will just
616:30 - write it as first step first step
616:33 - you know what okay so this this linking
616:36 - should be done and again now if this
616:40 - linking is done and we are inserting
616:42 - this uh node at the first uh we need to
616:44 - update the head also Okay so
616:46 - at second second operation we need to
616:49 - reassign the value of the head to this
616:53 - new node okay
616:54 - and after that we need to return the
616:57 - head now the head is pointing to this uh
617:00 - okay now the our current new current or
617:03 - the new node new head is this head of
617:06 - the list so these are the operation that
617:08 - we need to perform uh okay so first of
617:11 - all we need to uh
617:13 - connect our new node with the current
617:15 - head Okay so
618:48 - foreign
618:54 - guys uh my laptop battery was third
618:58 - that's why okay so now
619:01 - uh we have created a new node
619:04 - we have
619:06 - now we have also understood what we have
619:09 - to do exactly to insert this mode at the
619:12 - beginning okay so let's let's do this
619:15 - okay we now uh create a new node
619:18 - and
619:20 - that's next we will assign it as head
619:24 - now we at this point we have connected
619:27 - that new node to the Head current head
619:28 - of the red plate that means the current
619:30 - first node inside the list and now we
619:33 - have to just have we we just have to
619:36 - update the head which is head is equals
619:38 - to your node
619:40 - foreign
619:47 - first node of the list and now we just
619:50 - simply return
619:51 - head of the list okay now simply return
619:54 - the head of the list uh I hope this is
619:57 - the thing that we have to perform inside
619:59 - that began okay uh now we don't have to
620:02 - find the middle of the list that will
620:04 - simply comment it out we just need to
620:06 - print the list and now if you notice uh
620:09 - our new head is going to return by going
620:13 - to return by this uh inserted by getting
620:16 - method so we have to store that new head
620:19 - over here okay so we'll just simply
620:21 - write head is equals to
620:23 - insert at beginning and will pass our
620:26 - head to this method okay and after that
620:28 - we will just simply print list again
620:31 - with the new head okay
620:33 - and now if I run this
620:37 - okay so one two three four
620:41 - five
620:43 - six
620:44 - minus one okay so elements is one two
620:48 - three four five six and enter the data
620:50 - to insert in node in the beginning
620:54 - uh that is a typo you don't forget it
620:59 - enter the data okay so now if I want to
621:02 - enter 0
621:03 - at the beginning let's see if it enters
621:07 - here you can see after uh
621:09 - giving 0 to enter enter at the beginning
621:13 - the new list is zero one two three four
621:16 - five six so zero is getting inserted at
621:18 - the list okay so this is what this is
621:21 - working fine I hope you guys understood
621:23 - how to insert a node at the beginning of
621:27 - the link list I hope about this concept
621:30 - thank you for watching this video
621:34 - hello and welcome back to the new video
621:36 - of the Java tutorial Series so till now
621:38 - we have covered the insertion operation
621:40 - at the beginning and so now in this
621:43 - video we will be covering uh insertion
621:45 - operation at the end of the link list
621:47 - okay
621:49 - so in our previous video I will talk
621:51 - about this instruction at the beginning
621:53 - and in this video we will be covering
621:55 - insertion at the end okay so let me just
621:59 - clear this
622:02 - foreign
622:04 - let me just clear this thing
622:09 - okay
622:11 - okay now we want to insert this say node
622:15 - at the end of the link list okay uh let
622:19 - me just erase this also
622:31 - okay
622:33 - we don't require this one also yeah now
622:37 - it's okay uh so we want to perform the
622:40 - operation and which uh insertion at the
622:43 - end okay so things that we have we
622:45 - require okay
622:47 - first understand that so to insert at
622:51 - the end we need a first of all head of
622:53 - the list
622:55 - again
622:56 - that is much we need the head of the
623:01 - list
623:03 - okay now
623:06 - we need the data
623:09 - that with that data for new node data of
623:14 - new node okay that is going to get
623:16 - inserted now we have data we have the
623:19 - head now we create a new mode
623:23 - creator
623:25 - node okay now we created a node
623:29 - now we insert at the end
623:32 - insert at end and at the end we will
623:36 - return the head of the list
623:40 - data
623:42 - head okay so these are the operation
623:45 - that we want to perform uh to insert
623:48 - a new node at the end of the list
623:52 - okay so I will write it over here I will
623:55 - just comment it out and paste it
623:57 - and I will
623:59 - give one tab
624:01 - and after that we will just simply from
624:05 - here okay so now this is the thing that
624:09 - we have to achieve okay
624:12 - so now
624:14 - I will write my function which is public
624:18 - static and it is returning the head that
624:21 - way it is of type node s and the name of
624:25 - the function is inserted it let me call
624:28 - it as insert
624:30 - at
624:31 - end
624:33 - will simply pass
624:35 - no less
624:38 - remember we simply pass the head of the
624:40 - list
624:42 - first of all we will get the data from
624:44 - the user enter the data that we want to
624:46 - insert at the beginning
624:52 - and I'll just simply copy this line so
624:56 - that I can not
624:58 - write the new line okay
625:01 - and over here I will just simply paste
625:04 - this and node in the
625:09 - end okay
625:10 - and and we have to insert that node and
625:14 - now we will see the data platform the
625:17 - user data is equal to
625:19 - oh SC Dot
625:23 - an extent after receiving the data we
625:26 - need to create a new node uh we create
625:29 - the new node as new
625:31 - node s
625:32 - which is equals to
625:36 - new node and we'll pass that data to
625:39 - this function okay and now we need to
625:43 - insert at the end we need to perform
625:47 - insertion at the end so what do you
625:49 - think we will let we will go into the
625:51 - paint and we will try to figure it out
625:52 - how to insert
625:54 - inside end so two things should be there
625:57 - one is if our head is equal to equals to
626:00 - null what if the list itself doesn't
626:04 - have any element that's list is empty
626:06 - that is head is also point to null and
626:09 - tail is also pointing to the null and
626:11 - then in that case we will simply assign
626:13 - the new node to the head that means if
626:16 - there is no no node in the list
626:20 - and we are trying to insert a new node
626:23 - which is the first node as well as the
626:26 - last node of the list then in that case
626:28 - we'll just simply insert this node
626:29 - inside the list and we will assign it
626:31 - the value as head
626:34 - and in any in case there are some
626:37 - elements there are some node present
626:39 - inside that list we'll just simply uh we
626:42 - have to assign that value to the we just
626:47 - have to assign that current
626:49 - represents the last node of the list
626:52 - we'll just simply write tail dot next
626:54 - equals to new node that means we are
626:57 - linking this node with this node I will
627:00 - just show you we are linking this node
627:03 - to this node by writing 10 dot next is
627:05 - equals to you know and we will simply
627:09 - assign change the value of the tail to
627:11 - new node that means then now the list
627:14 - becomes 1 2 3 and this node is added at
627:16 - the end of the list and this nodes next
627:20 - is pointing to the null
627:22 - now this is our
627:24 - list after insertion at the end okay so
627:28 - this thing we have to achieve over here
627:29 - we will write an if condition to check
627:32 - whether the head is equals to equals to
627:34 - null if that is the case that means
627:36 - there is no element present inside the
627:38 - list and we will just simply write head
627:41 - is equals to
627:43 - you know this
627:45 - and now if it is not the condition uh
627:48 - there are some element dates at the list
627:50 - we'll just simply write
627:56 - we will just simply write
627:58 - tail dot next
628:01 - is equal to new node
628:04 - and I will assign the Tails value to the
628:07 - I will update the value of the tail to
628:10 - the new node node so that our list is
628:13 - like uh it is expanded okay and now at
628:17 - the end after performing this operation
628:19 - we will just simply return the head of
628:20 - new head of the list uh not new head is
628:24 - the this we will just return the head of
628:27 - the list okay and now uh to run this
628:31 - insert at the end we are returning
628:33 - something ahead so I we need that head
628:37 - to be updated over here uh we'll write
628:40 - head is equals to insert
628:42 - at end and will pass that head over here
628:47 - and we'll just simply print the list
628:49 - again okay now if I run this and I will
628:55 - first I will give the
628:58 - empty list no I'm not right not empty
629:01 - first I will give some inputs one two
629:03 - three four
629:04 - okay and after this I will write minus
629:06 - one and uh now I have to insert 5 at the
629:10 - end of the list that is the data and
629:13 - after inserting the here you can see the
629:15 - new list is up printing which is one two
629:18 - three four five and uh before list is
629:20 - one two three four five was not there
629:22 - and now after performing the insert at
629:24 - end operation 5 is inserted at the at
629:27 - the end of the list okay so now if I
629:29 - again
629:30 - run this and this time I will not give
629:33 - any uh prior node in the list I will
629:36 - just write -1 elements in the list are
629:38 - empty because which is not getting uh
629:42 - element list is first empty and now if I
629:45 - am trying to insert 2 in the list the
629:47 - element of the list are two okay so if
629:50 - condition is also getting executed or
629:52 - working fine so this is the way by which
629:56 - you can insert at the insert a node at
629:59 - the end of the list so till now we have
630:01 - covered insertion at the beginning and
630:03 - insertion at the end and in upcoming
630:04 - video we'll see how to insert a node at
630:07 - the user specified location in the
630:09 - single language so thank you guys for
630:11 - watching this video and I will see you
630:12 - in the next one
630:15 - so hello and welcome back to the new
630:16 - video of the Java tutorial Series so
630:19 - till now uh we have covered the core
630:21 - Java concept uh we have cover we have
630:24 - started with the data structures and
630:26 - algorithms we have covered array VR uh
630:29 - discussed some problems on arrays okay I
630:32 - hope you guys are enjoying the series so
630:34 - now
630:36 - uh till our uh previous videos we have
630:40 - started singly linked list okay and in
630:42 - that uh we have seen how to make a list
630:47 - how to print a list how to find the
630:50 - length of the list which means how many
630:52 - nodes are there inside the list we have
630:55 - find how to search an element inside the
630:57 - list and then we have started the basic
631:02 - operations like inserting deleting or
631:05 - finding like that okay and in inserting
631:08 - we have uh seen uh how to insert a node
631:12 - inside a simply linked list at the
631:14 - beginning and we have seen how to insert
631:17 - a node inside a single in English at the
631:19 - end and now again we have seen uh this
631:24 - much these many methods reverse list
631:26 - means how you can reverse a single link
631:28 - list and middle node like how you can
631:31 - find the middle node of the link singly
631:33 - linked list so these are some methods
631:36 - that we have seen till now and so now
631:38 - for today's video I I will be taking a
631:42 - concept of how to insert a node in
631:46 - syncline English at a user's specified
631:48 - positions right so for that let's just
631:51 - get into our paint and see the logic how
631:55 - we can implement or how we can add a
631:57 - node inside a Sinclair link list at a
632:00 - user specified position okay
632:02 - so this is our previous previous paint
632:06 - previous video paint so let me just
632:09 - erase the things that we don't want
632:13 - okay in case you can delete this
632:17 - you can delete this okay fine uh so
632:22 - let's assume that
632:25 - wait uh this is our link list okay this
632:28 - is our uh first node this is our second
632:30 - node this is our third node okay and now
632:33 - if I want to insert a node inside this
632:37 - simply linked list at a user specified
632:39 - positions right so if I say uh this is
632:43 - the single English and you have to
632:46 - insert this node this one right here and
632:49 - this node inside this single English at
632:51 - second position okay so what is your
632:54 - logic how you can uh think how we can
632:58 - insert this new node inside this English
633:00 - at user specified position okay so let
633:03 - me just write a write down here uh so we
633:06 - are trying to insert this new node
633:11 - at position is equals to 2. so right so
633:15 - we are trying to insert this node inside
633:17 - the single linguisher position number
633:19 - two okay so after inserting the whole
633:23 - list should look like this this is our
633:26 - try to form a cursor okay so this is our
633:28 - first node I am talking about the after
633:30 - insert method insert operation
633:33 - so after that the link should be here
633:38 - and after that this uh next should point
633:41 - to this
633:43 - and after that this next should point to
633:46 - this
633:47 - okay
633:48 - so this is the list our list new list
633:51 - updated list after inserting uh new node
633:54 - at the second position so what will
633:57 - happen uh this existing node which is at
634:01 - position two will get shifted at
634:04 - position 3 and new node which is which
634:06 - we'll be going to insert inside the list
634:08 - will be take that position position uh
634:11 - two
634:12 - okay so this is the logic that we have
634:15 - to build uh so first of all uh let's get
634:18 - in our ID get into ID and try to code
634:22 - this
634:22 - okay so let me just get into my IDE
634:27 - okay and I will write the similar method
634:32 - over here okay this is inserted
634:36 - beginning this is insert at end and now
634:39 - I will write it over here so that you
634:41 - can I will and also I will share I will
634:43 - be sharing this code don't worry you can
634:45 - follow this code and try to build your
634:48 - own single linkage and try try to play
634:50 - around this code Okay so
634:53 - let me just okay fine so we'll be
634:58 - uh let me write out write down one
635:00 - comment
635:01 - so we are performing insert
635:05 - operation
635:07 - at user
635:10 - specified
635:13 - location
635:15 - or to be more precise in programming
635:17 - language it is index okay
635:20 - now so since this is a method I will
635:24 - write this public method should be study
635:27 - because we are calling it inside the
635:29 - main method which is static one and
635:33 - think it uh think it guys uh when we are
635:36 - updating we are inserting a new node
635:37 - inside the list so our method should
635:39 - also return one node that is the head of
635:42 - the node uh that like here you can see
635:46 - uh for suppose uh user has inserted this
635:51 - node at First Position then in that case
635:55 - our head should also point to this right
635:56 - so our method should expect expected to
636:00 - return a new head or the uh if it is uh
636:04 - in inserting the node at the first
636:06 - version or any case we are returning a
636:10 - new node
636:11 - okay so our node is of type node s
636:14 - so I hope you guys are watching our
636:17 - previous videos also so that you can
636:19 - understand what is known as why we are
636:21 - written that over there so please watch
636:24 - on all the video and then come over here
636:26 - so I will name it as
636:29 - insert at the method name okay and this
636:32 - method will also first required one head
636:34 - so we are passing one link list to this
636:36 - method and in return this method will
636:39 - insert a new
636:41 - uh node in that list that I use a
636:45 - specified location right
636:47 - so we are passing the head to the list
636:50 - okay
636:51 - so first of all I will be requiring one
636:53 - uh
636:56 - variable name as position and count and
636:59 - I will assign value to both as one okay
637:03 - so both are one and I will just simply
637:06 - write system.out.winterline
637:09 - enter the
637:12 - data
637:15 - to
637:17 - third in the list
637:20 - okay so at this point we are asking we
637:23 - are printing on the console like uh
637:25 - asking the user to enter the data that
637:28 - you want to insert inside the list
637:30 - all right all right and after that we
637:32 - will declare one
637:34 - data variable and we will just write
637:36 - simply since SC dot next hint and you
637:39 - will accept the data value of that new
637:42 - node data part of the new node okay and
637:45 - well after that we will simply write
637:47 - print on this console like enter
637:51 - the position
637:54 - all right so this method will uh what
637:57 - will be do what it will be doing it will
637:59 - be taking the data part and it will take
638:01 - the position right all right so here you
638:04 - can see it will ask for the position at
638:06 - which position you want to insert this
638:09 - node inside the singly linkage that we
638:11 - are going to pass to this method okay so
638:13 - now I will write
638:16 - position is equal to SC Dot
638:19 - next
638:20 - next it
638:23 - okay
638:24 - so now we have covered position we have
638:29 - taken the data
638:31 - okay so now we are good to go to create
638:33 - a new node okay so we are creating a new
638:36 - node
638:38 - node
638:40 - s
638:42 - that is a new node is
638:45 - and we are passing the data to that
638:48 - Constructor of the node S Class
638:51 - so now at this line number one one is
638:55 - one one or four we have created a one
638:58 - node and we have passed the data that is
639:00 - incentive by the user and we have also
639:02 - taken the position from the user okay
639:04 - so now we are checking if the position
639:07 - is equals to equals to 1.
639:10 - all right what that means if position
639:12 - equals to equals to 1 here you can see
639:14 - if entry user enters the position that
639:18 - is of new node should be one then in
639:21 - that case user is user is trying to
639:23 - insert that new node in at the very
639:26 - beginning of the link list all right so
639:29 - in that case uh we we have to perform
639:31 - the some different tasks
639:34 - otherwise there are some
639:37 - okay so otherwise we will go inside the
639:40 - else part we will also Port that one
639:42 - okay so if the position equals to equals
639:45 - to 1 that that means we are trying to
639:47 - insert the node at the very beginning of
639:48 - the link list so in that case we will
639:51 - just simply write
639:53 - new node s
639:56 - dot next
639:59 - is equals to head
640:01 - and we will simply reassign the value of
640:04 - head to node s
640:10 - sorry for the type of mistake okay so
640:12 - what we are doing and doing over here is
640:14 - uh this is our new node we will just
640:18 - simply assign first this next to the
640:21 - Head currently the head will be pointing
640:24 - to the first in first node of the link
640:27 - is right so we are making this
640:30 - connection first to the first node and
640:33 - we are simply changing the heads value
640:34 - to this a new node okay so for after
640:38 - that uh how it gonna look like let me
640:41 - just clear this mess
640:44 - all right so after that it will look
640:47 - like this the head will be uh new node
640:49 - ahead our new node head is this
640:53 - and our second node inside the link list
640:56 - will be this and first node will be this
640:58 - okay so now this we have covered
641:02 - for the position equal to equals to 1
641:04 - what if the position is uh not one okay
641:07 - or else something then in that case you
641:10 - will come inside the else part and here
641:14 - we will create a new node and we'll
641:17 - assign it name it as previous
641:21 - is equals to head okay
641:24 - and in after that
641:27 - you run one while loop okay and then the
641:29 - condition we are going over here is
641:32 - while the count
641:34 - is less than position minus 1.
641:38 - okay don't worry I will be explaining
641:40 - this code in the using the paint window
641:43 - all right and we are writing previous is
641:47 - equals to
641:49 - previous Dot
641:51 - next
641:54 - okay and after that we will just simply
641:56 - write count plus plus
641:58 - all right and after running this while
642:00 - loop we will simply create one more uh
642:03 - one more node and name it and name it as
642:06 - current
642:08 - and this current will point to the
642:10 - previous dot next
642:14 - and after that I will write new node
642:18 - sorry for that
642:20 - check
642:21 - we'll write new node as
642:24 - dot next
642:27 - should be equals to the current
642:31 - and now the previous dot next
642:35 - should point to
642:37 - new node
642:40 - all right and after that
642:43 - after this else part we will just simply
642:46 - return
642:47 - the head of the list
642:49 - all right so let me explain what we have
642:51 - done inside this else part all right so
642:54 - uh we know if the position is not equals
642:57 - to 1 that means we are not trying to
642:58 - inserting the new node at the very first
643:00 - beginning of the list okay so in that
643:02 - case
643:03 - what are what are all the operation that
643:05 - we have to perform like we have seen
643:07 - over here if you want to if the user
643:09 - gives the position as true so in that
643:10 - case uh we will first we have to Simply
643:14 - look at over here okay so we'll create
643:16 - one uh node by the name of previous and
643:20 - we will assign it the value of head all
643:22 - right so at the very first the
643:25 - previous will come over here
643:29 - previous all right and then which is
643:32 - equals to the head like it is pointing
643:34 - to the first node
643:35 - and after that we'll we'll run our while
643:37 - loop all right so while
643:40 - we are repeating this iteration until
643:43 - our count is less than position minus
643:45 - one so what is our position uh let's
643:47 - suppose I have to insert the insert a
643:51 - new node this new node at the position
643:53 - is equals to 3. okay so look at here map
643:57 - if my position is
644:00 - wait my position is three
644:03 - now wait okay
644:06 - so what is the count value
644:09 - initially the count value is one
644:11 - it will check whether one is less than
644:14 - position minus 1 that is one is less
644:15 - than
644:17 - 2. if it is if it is correct yes
644:21 - then it will it will perform this this
644:24 - two line of code okay so previous is
644:26 - equal to previous dot next that means
644:28 - our previous uh previous will jump over
644:31 - here
644:32 - now the previous is pointing to the
644:33 - second node and count plus plus now the
644:36 - count value will be 2 and now uh when we
644:39 - again check for the condition now this
644:41 - time counts value is 2 and
644:44 - and what we are going to check
644:47 - we are going to check whether the
644:48 - position minus one okay
644:50 - so my position is 3 3 minus 1 is 2
644:53 - either by 2 is less than 2. so this time
644:56 - this condition will will be evaluated as
644:58 - false
644:59 - all right so if this condition is false
645:01 - then in that case this while loop breaks
645:05 - and we will come over here okay so now
645:08 - our previous which is pointing towards
645:11 - this second
645:13 - node of the list okay and now we will
645:16 - create one more node which is current
645:18 - and which will be pointed in the
645:20 - previous dot next all right so what is
645:22 - what is our previous previous is this
645:24 - and this next part we will assign it to
645:26 - the
645:27 - uh
645:29 - what we have created another
645:31 - node name as
645:34 - current all right so this here our
645:36 - current will point over here
645:40 - current is here and previous is here all
645:42 - right
645:43 - now
645:44 - new node.next is equal to current new
645:47 - node that is our test new node.next so
645:49 - we are taking this next and we'll
645:52 - assigning it assigning it to the current
645:55 - value all right so new node.next is
645:57 - equal to current so now our new node
645:59 - will be pointing towards this node
646:02 - and
646:04 - previous dot next is equal to new node
646:06 - previous dot next is equal to new node
646:09 - so if you can see these are the two uh
646:14 - nodes that we have created previous and
646:17 - current are for taking the keeping the
646:20 - track of the nodes which is previous to
646:23 - the position that we have entered to be
646:26 - uh to enter the new node inside the list
646:28 - and the current is the actual position
646:30 - at which we are we have want to insert
646:33 - that node inside the list okay so after
646:35 - performing this operation you can see
646:37 - the flow of the list would be 1 2 and
646:40 - this will become the third node and this
646:42 - will become the fourth node so we are
646:44 - successfully inserting uh the new node
646:47 - at the position is equal to 3 that is
646:49 - equal to here you can see so this is
646:51 - logic behind this
646:54 - I hope you got this if you're not
646:57 - uh go back in the video and try to
647:00 - understand what what I have covered okay
647:02 - so let's run this let's see if we are
647:07 - not getting any error after before that
647:10 - I will just comment it out we don't
647:13 - require this we will make one list we
647:15 - are print the list
647:17 - and we'll call our method insert at
647:21 - and we will simply pass the head tool to
647:24 - it okay so if you notice one thing
647:28 - uh this method we it accepting one head
647:31 - we that means that we are passing or
647:33 - passing it over here and but in return
647:36 - this is giving us a new
647:38 - a node a new head of the list right then
647:42 - new it is returning the new head of the
647:43 - list so that's why we have to get that
647:46 - new head of the list otherwise uh we are
647:49 - not printing the new list okay so we are
647:52 - printing the old list that we have make
647:54 - over here okay so this way this will not
647:56 - work
647:57 - so here let me just create one new node
648:00 - let me call it as
648:03 - head new
648:06 - so we are taking that new net and we'll
648:09 - again call the print list but this time
648:11 - we will pass the new head to this Method
648:14 - All right so so that we can print the
648:16 - new list after inserting the in node at
648:20 - the user specified index all right so
648:23 - this is we want to do
648:27 - Let's test it out
648:30 - okay so it is asking me to enter the
648:33 - data so let me enter five nodes in the
648:36 - list one two three
648:39 - four
648:40 - five and uh you know if you want to get
648:44 - out of this uh make list function you
648:47 - have to write -1
648:48 - so it is printing that elements of the
648:51 - list are one two three four five by why
648:53 - so because we are called over here
648:55 - printless method which will be gonna
648:56 - take head of the list and print all the
648:59 - list okay so here it is asking the enter
649:02 - author data to insert in the list so I
649:04 - want to insert let's suppose 0 so that
649:06 - you guys can understand
649:08 - okay so I want to insert 0 at what
649:11 - position let me insert it at position
649:13 - number three over here okay that means
649:15 - sorry that position number three now
649:18 - here you can see a element of the list
649:20 - are we are again calling the print list
649:21 - but this time we are
649:23 - oh let me show you we are again calling
649:26 - this function but this time we are
649:29 - giving the new new head of the list that
649:31 - is the new list that method our method
649:35 - is going to return us that is 1 2 then
649:38 - at position number three uh I have tell
649:41 - the program that to insert 0 at the
649:43 - position number three it is also it is
649:45 - inserting the zero and after that rest
649:47 - of the list will uh will be printed
649:49 - printed as it is Okay so
649:52 - this is the idea of inserting a new node
649:56 - in the single English at the users use a
649:59 - specified location I hope you got the
650:01 - concept please
650:04 - uh
650:05 - we re-watch the video if you are not
650:08 - getting the concept but try to
650:10 - understand and we'll I will share one
650:13 - trick so that you can solve this kind of
650:16 - linked list problems easily you know
650:19 - once we have uh covered all the topics
650:21 - of the single English Okay so thank you
650:24 - guys for watching this video and I'll
650:25 - see you in the next one
650:29 - so hello and welcome back to the new
650:31 - video of the Java tutorial Series so
650:33 - till now we have covered how to insert
650:37 - a node inside a sink living list and
650:41 - that too with the three all three types
650:43 - uh like in the beginning
650:45 - in the end and at the user specified
650:49 - location okay that is the user specified
650:52 - index okay so one more challenge for you
650:56 - so if you can try to solve it so what is
651:00 - the challenge so you have seen how to
651:02 - insert at end how to insert ad beginning
651:06 - how to insert a user user specified
651:08 - location right so now you have to insert
651:12 - a node in at the middle node of the
651:16 - linkage all right so
651:18 - what I am telling is let me give you an
651:21 - example so if the length of the list is
651:24 - 10
651:26 - okay or suppose let me take X5 okay so
651:30 - and the elements of the list is one two
651:33 - three four and five so at first you have
651:36 - you have to identify which is the middle
651:38 - node of the list okay so in that case a
651:40 - middle node is three I will color it up
651:43 - middle node is three and you have to
651:46 - insert a new node at the position or the
651:50 - index three so how you can solve this so
651:53 - I'll give you one hint okay so for this
651:56 - operation to perform you need
652:00 - to find first the middle of the link
652:03 - list okay so how to find that we have
652:06 - covered one video go and check that if
652:09 - you watch
652:10 - then then it's good here you can see uh
652:14 - we had written one method to find the
652:16 - middle middle node of the list so we
652:19 - have to somehow manage to get first the
652:22 - middle node of the list you have to
652:24 - store that middle node some somewhere
652:26 - and then then you can perform the
652:29 - similar kind of operation that we have
652:31 - performed at over here where we are
652:33 - inserting the new node at the user
652:35 - specified location right
652:37 - so these are this is the operation that
652:39 - you can perform so go and uh give it a
652:42 - try and try to solve this problem
652:45 - enough talking so in this video we will
652:48 - be starting with the deletion operation
652:52 - which we are going to perform on a
652:54 - linked list all right
652:56 - so I will just make one line over here
652:59 - and I will write one comment
653:01 - we are performing
653:03 - delete
653:05 - delete operations okay
653:08 - so for this video uh we'll be looking at
653:12 - how we can delete a node of linked list
653:15 - which is simply linked list obviously uh
653:18 - at the beginning of the link list all
653:20 - right so we are trying to delete the
653:22 - first node of the link list okay
653:26 - so let me just go here this is our
653:31 - previous code
653:32 - go and check that video If you have a
653:35 - checked all right
653:37 - so I will just write one comment
653:40 - all right why it is not okay all right
653:43 - so I will write one comment so we are
653:46 - trying to delete
653:50 - first node
653:52 - of the linked list
654:00 - okay so we are trying to achieve this
654:03 - so first thing first let's get into our
654:06 - paint and try to build the logic for
654:08 - this okay
654:09 - so here
654:12 - all right no more requiring this new
654:16 - node so I can delete that
654:21 - okay wait
654:24 - let me select
654:25 - all right wait wait let me select this
654:28 - area
654:29 - so that I can delete it okay
654:31 - fine so this is our list
654:35 - all right so we are trying to delete
654:37 - this node
654:40 - which is head is also pointing to this
654:43 - node that is the first node of the list
654:45 - okay so we are trying to delete this so
654:49 - when you are trying to delete a node
654:51 - inside a list
654:53 - the only thing you remember you have to
654:55 - do is you have to break the link between
654:59 - those two nodes all right so this is the
655:02 - link that joins this node this is the
655:05 - link due to which our list is going to
655:07 - get completed in the in this direction
655:10 - okay so when we are calling our print
655:13 - list method so we are passing that head
655:15 - if you remember okay and that head is
655:18 - going to get incremented at each time
655:20 - and how this incrementing part is done
655:22 - due to this uh just because of this next
655:26 - part okay so if that if this next is
655:28 - connected to this node then and then
655:30 - only we are going to move and this is
655:33 - forming a chain and this is forming the
655:35 - list of nodes
655:37 - okay so we are just need to break this
655:40 - link so that next time whenever we pass
655:44 - our head we are starting our list from
655:47 - this location and don't forget to
655:50 - upgrade update your head otherwise the
655:53 - for the printless method you are passing
655:54 - this head and this after this head uh if
655:57 - you break this link
655:59 - and then the list will be only this this
656:01 - part only and your code will not work so
656:04 - in that case you have to bake this link
656:06 - and you have to update the heads value
656:09 - to the next value because in that case
656:12 - then and then only if you are trying to
656:14 - pass this head to the printlish method
656:16 - then only this this is our new new list
656:19 - that we are going to build okay and this
656:21 - node will be discarded uh not discarded
656:24 - we will not have any access to this node
656:28 - inside this list okay so this is the
656:31 - logic that we have to build let me just
656:34 - clear this out I need this for the
656:37 - upcoming videos also okay so let's go
656:41 - into our IDE and try to build this up
656:45 - we'll write
656:46 - public static
656:49 - so
656:51 - think about it what will be the return
656:53 - type so here we are changing the head we
656:58 - are updating the head that means we are
657:00 - doing something a modification part
657:04 - inside our list so whenever the
657:05 - modification part comes inside the list
657:07 - there is one the method should return
657:10 - the new head of the list so that we can
657:13 - print it later onwards which is required
657:16 - for the printing the list okay so now
657:20 - I will write node s so this method will
657:22 - return one node that is the new head of
657:25 - the list
657:26 - delete
657:29 - at
657:33 - BK
657:35 - so this is our method name
657:38 - and this method will also accept one
657:42 - head of the list so we are passing one
657:44 - list to this method and in that return
657:47 - this method will delete the first node
657:50 - of the list and
657:51 - uh give us the updated head so that we
657:54 - can print that list later on
657:56 - all right so
657:58 - first thing first we will cover the
658:01 - corner cases okay so what if my head is
658:06 - equals to equals to null
658:09 - okay so if my list doesn't contain any
658:14 - element then in that case I don't need
658:16 - to perform any operation deletion
658:19 - operation all right so head is already
658:21 - empty then how can I perform the
658:22 - deletion operation all right so we will
658:24 - simply return
658:26 - don't know
658:28 - sorry no in that case all right so if
658:32 - this is not the case
658:34 - then
658:35 - we are assuming that not assuming there
658:38 - are sure sureity that's there are some
658:40 - nodes which are present inside that list
658:42 - and we have to delete the first node of
658:45 - that list okay so we will uh
658:47 - create one temporary uh
658:50 - variable of type node and we'll assign
658:53 - it to the value of the header all right
658:54 - so head and temp will both pointing to
658:57 - the first node of the list and we'll
658:59 - write head
659:01 - equals to
659:03 - head dot next
659:05 - and in next part we will write temp Dot
659:10 - next
659:12 - is equals to
659:15 - okay and now after that we will just
659:19 - write return
659:24 - head so what I have done over here is so
659:27 - two three line of code I will tell you
659:29 - so we are first creating a new variable
659:32 - of type nodes name temp
659:36 - so here you can see we are creating one
659:40 - more variable all right so let me just
659:43 - decrease the font size
659:47 - why it is not getting decreased
659:53 - all right
659:54 - temp and head are both pointing to this
659:58 - first
660:00 - these both are pointing to the first
660:02 - node of the list till this time okay so
660:06 - the next line is head is equal to head
660:07 - dot next
660:09 - so now we are changing the heads value
660:11 - to the Head dot next what the next part
660:13 - of this head is going to hold
660:15 - link to the next node of the list all
660:19 - right so we are changing the heads value
660:20 - to this so now our head is point head is
660:23 - pointing towards this node
660:26 - our new head is this uh so head is no
660:29 - more have the access to this node but
660:31 - the temp variable to have access
660:34 - so we'll let temp dot next is equal to
660:36 - no so temp dot next which is pointing to
660:40 - this node we'll just simply write temp
660:43 - dot next
660:44 - now it will point
660:46 - to the
660:48 - so here you can see and after that we
660:51 - will simply return head that that means
660:53 - we are returning this and this causes
660:56 - our this this is the new list after that
661:01 - operation will perform okay so we have
661:03 - what we are doing we are just first of
661:05 - all assigning the temp uh creating one
661:07 - new variable uh temp of type node and we
661:10 - will assigning the value to the head
661:12 - that means the first node of the list
661:13 - and we are changing the heads value to
661:15 - the next node in the list okay by using
661:18 - the using what using next head dot next
661:21 - all right after that I as I have told
661:24 - you you have to break this link link if
661:26 - you want to break this link you have to
661:28 - uh modify this next part so for that we
661:32 - have written attempt.next is equals to
661:34 - none so we are assigning the temp dot
661:37 - next to the null so that uh these temp
661:41 - node will no more have this access to
661:43 - this node and it will point to the null
661:45 - and our new list will be this and this
661:48 - all right so this is the idea behind
661:51 - this method
661:54 - all right so let's get an
661:58 - into our main function and I will call
662:01 - that method all right so we are making
662:03 - the list we are printing the list and
662:06 - over here we are calling
662:09 - delayed deleted at the beginning and we
662:11 - will pass that head
662:13 - okay and after that after passing the
662:17 - head
662:18 - one thing you can remember uh let me go
662:21 - there
662:23 - one thing you can remember this method
662:25 - is returning the new head of the list so
662:27 - we have to create and variable which
662:31 - will be holding our new head of the list
662:33 - which will be of type nodes
662:37 - let me call it as you
662:41 - head
662:43 - all right
662:45 - and we will again call the print list
662:47 - method and we will pass a new header the
662:50 - new head of the list to this list
662:53 - all right so let me run this
662:56 - I hope this will work let me create one
662:59 - list uh as usual one two three four and
663:04 - five and this is the elements let me get
663:06 - out of this and here you can see
663:08 - elements of the list are one two three
663:10 - four five uh this method is printing
663:12 - using the previous head so these are the
663:16 - element that we have entered and these
663:17 - are the element that is going to print
663:18 - it on the pencil okay so after that we
663:20 - have written
663:22 - this method call
663:24 - delete at the beginning so what it will
663:26 - do it will delete the first element of
663:30 - the list that is one and after that we
663:33 - are again called The Print list method
663:35 - okay so here you can see here called the
663:37 - printlash method and this print list
663:39 - method is printing the new list as two
663:42 - three four five why so because we have
663:44 - deleted this first node we are no more
663:46 - have the access to this node and new
663:49 - elements are the new list
663:51 - single English is two three four five so
663:55 - this is the idea behind the deletion of
663:59 - the node inside single link placed at
664:01 - the beginning okay so I hope you got
664:04 - this so in upcoming video we will be
664:07 - saving uh seeing
664:09 - how to delete a node at the end and how
664:12 - to delete the node at the user specified
664:15 - index uh like we have did in the insert
664:19 - operations right so thank you guys for
664:21 - watching this video and I'll see you in
664:22 - the next one
664:26 - so hello and welcome back to the new
664:28 - video of the Java tutorial Series so
664:30 - till now uh we have look
664:33 - at the deletion operation we have again
664:36 - with the deletion operation and we have
664:37 - seen deletion delete at beginning okay
664:41 - so in this video we will be looking at
664:43 - the delete at end so now what I am
664:46 - talking is we have to delete the node
664:49 - which is at the end of the link list all
664:53 - right
664:54 - so before going to the core part as we
664:58 - discussed through paint let's discuss
665:01 - so to perform the delete operation at
665:06 - the end of the linklift what do you guys
665:09 - think what will be required Okay so
665:13 - first thing we will require
665:18 - the access to the previous node right
665:22 - like that is the second last node of the
665:25 - list so as I'm assuming uh this this
665:28 - link list okay so this is our link list
665:31 - and one one thing uh you don't get
665:34 - confused uh some YouTubers have told you
665:37 - to implement this single English without
665:40 - taking the tail
665:42 - uh they are there just uh taking the
665:45 - head of the links list they are not
665:46 - assigning the Tails value and they are
665:48 - not maintaining the track of the tail so
665:50 - and I have taught you uh by taking the
665:53 - tail so I think uh this is the good idea
665:58 - to take till in the link list so that
666:01 - you can have at least the track of the
666:03 - two nodes in in the list that is the
666:05 - first node and the last two so that
666:07 - those are required whenever you perform
666:08 - some complex operation you know on your
666:11 - uh link list we'll see
666:13 - what I mean by the complex operation all
666:16 - right so this is the list one two three
666:18 - three nodes are there and this is the
666:20 - Red Data part of the list and this is
666:22 - the next part of the design this is the
666:24 - link list okay so we are trying to
666:26 - delete the last node of the list so if
666:28 - you want to delete this node uh we'll
666:30 - require the track of this node this is
666:32 - that is the previous node to the last
666:34 - node
666:35 - so first thing we have we need the track
666:38 - to this node somehow we we have to get
666:40 - to this Loop uh get to this node sorry
666:43 - not Loop and after that we can perform
666:46 - some basic stuff that is we will
666:49 - reassign the value of the tail to this
666:51 - so that our new tail will point to the
666:53 - new last node of the list and we will
666:55 - just simply uh
666:56 - not
666:58 - assign this part next value to the null
667:01 - so that our new list should look like
667:05 - this
667:07 - 1 2 and second node is pointing to the
667:10 - null and we don't have any more access
667:13 - to this nodes so this node is getting
667:16 - discarded from the list and this is our
667:19 - new updated list after performing the
667:22 - deletion operation at the end of the
667:24 - list okay so let me get rid of this okay
667:28 - so now we can go into our
667:32 - code IDE
667:33 - and right beneath of this deletion at
667:37 - the
667:38 - first node of the linked list I will
667:40 - make one comment and I will write it as
667:44 - delete
667:47 - edit the
667:49 - end of the list
667:52 - all right
667:54 - so now
667:56 - since uh this this we are making this
668:00 - method and this method will be a public
668:02 - one and static also and now we are
668:06 - deleting the node from the list so our
668:11 - list is getting modified all right so we
668:14 - we are getting a new list so for that
668:17 - this method will also
668:21 - release or means
668:24 - pass or the returns one head of that
668:27 - list new list okay so that we can use
668:30 - the head later on to print print that
668:32 - list okay and we'll write
668:35 - delete at end
668:38 - and this method will also acquire the
668:42 - head of the list that is next to the
668:44 - list
668:45 - oops sorry
668:49 - wait guys wait wait wait wait delete
668:52 - delete
668:54 - delete
668:57 - at end
668:59 - and this will require node as head
669:06 - okay so inside this
669:09 - so as we have discussion of previous
669:11 - video you know we are checking this uh
669:16 - if condition that is a corner case so
669:19 - what do you think uh here here also you
669:21 - have to check on Corner case right we
669:23 - have to check one corner case so what it
669:25 - will be if our head
669:28 - is equals to equals to math
669:31 - that means uh if the head that we are
669:34 - passing to this method that is that head
669:38 - is null or
669:40 - head Dot
669:43 - next
669:45 - is equals to equals to that
669:49 - guys what do you think uh this condition
669:52 - will this is the r operator so I hope
669:55 - you know what is our operator those who
669:57 - don't know I will tell you our operator
669:59 - will evaluated uh this one expression
670:02 - and this one expression and whether any
670:05 - any or operator what it does simply if
670:09 - any one of the condition is getting true
670:11 - this if condition will uh will be
670:14 - executed all right so if the head is
670:15 - equals to equal signal or the head dot
670:17 - next is equal to equal signal if any one
670:19 - of this condition uh is evaluated as
670:22 - true this if condition will be get
670:26 - perform and we'll just simply return
670:29 - simply return the head
670:32 - okay and what we have doing over here is
670:34 - if the head is equal to equal to null
670:36 - means this is the condition where
670:38 - there is no element inside the list all
670:41 - right and this when head dot next is
670:43 - equal to equals to null that means uh
670:45 - the head dot next that is this location
670:48 - is is pointing to the null so what what
670:51 - it depicts is there is only one node
670:53 - inside the list and if there is one node
670:57 - inside the list so technically we can't
671:00 - remove the end of the list and end mode
671:03 - of the list okay so because there is
671:06 - only one layer one node represent inside
671:08 - the list so we can't perform this
671:10 - operation in that case we will simply
671:12 - return the head of the list that means
671:14 - uh
671:16 - this is the condition all right
671:19 - and after checking that corner case if
671:22 - that corner case doesn't
671:24 - evaluate it then we'll simply create one
671:28 - node
671:29 - I will name it as previous so because we
671:32 - have discussed in our logic part we need
671:34 - to keep the track of the previous node
671:37 - of the
671:39 - link list that we are going to delete at
671:42 - the end okay so now we have uh declared
671:46 - one uh variable of previous previous of
671:50 - type node okay so we have to take that
671:54 - currently uh this is previous is
671:56 - pointing over here we and now if you
671:59 - want to delete this element we have to
672:01 - get this this previous somehow to this
672:03 - location so that uh what previous will
672:06 - do it will uh hold or keep the track of
672:08 - the node which is just behind the tail
672:12 - that is the second second last element
672:15 - of the list okay so we have we are
672:16 - performing this while loop so that we
672:18 - can keep the track of that previous uh
672:21 - until previous Dot
672:24 - next
672:26 - is not equals to
672:28 - tail and I hope that what is still you
672:31 - know the tail is the last note of the
672:33 - list so whenever this until we reaches
672:37 - to the tail uh which is the previous
672:40 - node of the tail we are performing this
672:42 - and each time we will be doing previous
672:43 - is equals to previous dot next
672:46 - previous dot next that means we are
672:48 - incrementing the previous value to the
672:50 - previous dot next and uh once we have
672:52 - reached to the previous uh previous node
672:55 - we will just simply write 10 is equals
672:58 - to previous
673:00 - and now we will write 10 dot next
673:04 - is equal to no
673:06 - all right and after that we'll just
673:09 - simply return the head of the list
673:14 - so here you can see
673:16 - we are declaring one previous variable
673:18 - uh and assigning to the value of head we
673:20 - are looping one while loop and we are
673:23 - taking that previous variable to the
673:25 - second second
673:29 - end of this which is the second element
673:32 - from the last of the list and after that
673:36 - we will just simply assign the tail
673:38 - value to the previous that means we are
673:40 - shifting our tail to over here and we
673:43 - will just write tail dot next is equal
673:44 - to null that means this this will point
673:47 - to the null
673:48 - now this will point to the null and this
673:51 - link will got broke and we have no more
673:55 - track of this node which is which is
673:58 - previously at the end of the list and
674:00 - our list will be like this one two and
674:02 - null
674:03 - all right this is the logic behind
674:05 - deletion
674:07 - at the end okay
674:10 - I hope you got that idea
674:12 - and now we will go inside the main
674:15 - method and now here over here we will
674:17 - just call those methods that we have
674:19 - declared above and we'll delete and end
674:23 - we'll pass that head and after that
674:26 - since we are getting the new head from
674:29 - that list so we have to capture that
674:32 - your head
674:34 - work your head
674:37 - equals to and we'll see when you had
674:41 - this okay
674:44 - let me run this
674:47 - okay so we are entering the nodes uh
674:51 - like one two three four five and after
674:55 - that I will write -1 so here you can see
674:57 - uh before performing the deletion
674:59 - operation the linkage would look like
675:01 - this one two three four five and after
675:03 - performing the uh let's delete at end
675:06 - operation uh we are printing again the
675:08 - list and this time we are printing one
675:10 - two three four and we have deleting the
675:12 - element which is at the end of the text
675:14 - okay so this is how the deletion at end
675:17 - works I hope you got this idea how it is
675:22 - works
675:23 - so if you're not get any idea go back
675:27 - and watch this video again
675:29 - so in our upcoming videos we will see
675:31 - how to delete a node inside the single
675:34 - link list which is at the user specified
675:36 - location all right so thank you for
675:38 - watching this video
675:41 - so hello and welcome back to the new bit
675:43 - of the Java tutorial Series so till now
675:45 - we have covered
675:47 - deletion at the beginning deletion at
675:51 - end and now in this video we'll be
675:53 - looking deletion at
675:55 - user specified location like we have
675:57 - seen in the insert operation at the
675:59 - specified location we are trying to
676:01 - delete a node which is user will tell
676:03 - that like this is the list and this is
676:05 - the position and at the node which is
676:08 - present at this position you just delete
676:10 - it okay and give me the new list
676:13 - all right
676:15 - so let's go before writing the code as
676:20 - we discussed our logic inside the paint
676:22 - we'll go and discuss it okay so let's
676:25 - suppose this is our list one two three
676:27 - there are three notes inside the list
676:29 - and
676:30 - me as a user gives My Method the input
676:34 - as like this is the no this is the list
676:36 - you just remove the node which is
676:39 - present at the position two like this is
676:42 - the node that we have to delete
676:44 - all right so in that case
676:48 - oh I want to perform the deletion
676:50 - operation so now we will check what are
676:54 - the things that we have to do so here
676:57 - if you want to delete this node we have
676:59 - to break this link
677:02 - and this one
677:05 - and if you break these links this node
677:07 - will get discard discarded
677:10 - we have no more access to this node and
677:12 - after that you have to do assign value
677:16 - of these nodes next to this this way
677:18 - this node so this is our so after
677:21 - performing this operation what will be
677:23 - the least this is our list one two and
677:27 - we will be not having this notes access
677:30 - anymore after performing that deletion
677:32 - operation okay so these are the thing
677:35 - that we have to do and let's see how we
677:37 - can do this into our
677:39 - Mutual intelligent not Visual Studio
677:41 - code
677:43 - okay let me get rid of this
677:47 - so now here we have to perform uh we
677:51 - have to create that method
677:53 - which will delete our node at the use a
677:56 - specified location all right so I will
677:58 - just create one comment
678:01 - delete at
678:04 - user
678:06 - specified
678:08 - location
678:10 - okay
678:12 - so this method is also public one static
678:15 - and this is also going to return a new
678:18 - uh head of the list
678:20 - so that's why we are writing the return
678:22 - type it as return type as nodes and I
678:26 - will name this method as
678:28 - delete at
678:34 - okay so now uh this method will also
678:37 - require
678:39 - head of the list
678:42 - and it will perform operation on that
678:44 - list okay so first thing first uh like
678:47 - we have discussed in the insert
678:48 - operation I hope you watch that video
678:51 - and like that
678:53 - here also we required one position and
678:56 - count variable
678:58 - and we will assign both value as one
679:03 - okay and now
679:06 - uh we'll write system.out.print align
679:09 - and we ask we are asking they use it as
679:13 - a position enter the
679:15 - position
679:19 - of the node
679:23 - you want to delete
679:29 - okay so we are asking the user to enter
679:31 - the position of the node that you you
679:33 - want to delete okay so after asking that
679:36 - position we have to store that position
679:38 - somewhere so we will be storing that
679:40 - position inside the position variable so
679:42 - you will write SC dot accent
679:45 - you'll get that position from the user
679:48 - and here also we will check one corner
679:50 - corner case what is the corner case if
679:53 - position equals to equals to 1.
679:56 - if that is the case if the position is
679:58 - one that may that means the user is
680:00 - trying to delete the node which is at
680:04 - the beginning that is the first node of
680:06 - the list so we know that how to do it
680:08 - and we have discussed in our previous
680:10 - videos also we will simply assign heads
680:13 - well to the Head dot next
680:15 - that means like here if the user want to
680:19 - delete this this node we just have to
680:21 - Simply uh pass our head to the next node
680:24 - and we will simply return that node from
680:28 - this and from this onwards the list will
680:30 - be that much only and they will no more
680:33 - have their track of this node so this is
680:36 - the corner case that we have to check if
680:37 - the interview and user enters the
680:39 - position as well we will just simply
680:42 - assign the head is equal to head.next
680:44 - now if not if that is not the case
680:48 - will come into the else part and we will
680:51 - create one node notice
680:54 - of name Will name it as previous
680:58 - okay and previous
680:59 - and we will assign it first value to the
681:02 - head and we will run one while loop
681:05 - while
681:07 - my count is less than
681:11 - position minus 1.
681:14 - so uh what is the condition that we are
681:17 - doing well until my count is less than
681:20 - position minus 1 so here you can see uh
681:23 - this is counties
681:26 - one and position that we have entered is
681:29 - 2 2 minus two minus one is one so one is
681:33 - less than one which is not getting
681:34 - evaluated as
681:36 - uh false we are not going inside this
681:39 - while loop so this is the condition uh
681:41 - where I have a small list right so
681:44 - imagine we have five notes in that list
681:46 - and we are trying to delete the node
681:48 - which has a parent at the third index so
681:50 - we have to uh perform this while loop at
681:54 - once because we have to get that
681:56 - previous node to the uh second index
681:59 - that is the previous index that if you
682:01 - want to delete the third index third
682:03 - index node uh you have to get that
682:05 - previous node to the second index node
682:07 - okay so how we can get that we will
682:10 - write previous
682:11 - is equals to
682:13 - previous dot next
682:16 - and we will simply count plus plus
682:20 - and after that while
682:23 - after they're coming after that while
682:25 - loop we will write current
682:31 - is equal to pH dot next
682:37 - okay current is equal to previous dot
682:39 - next and previous dot next is equal to
682:44 - current dot next
682:47 - what I will do what I have done here is
682:49 - I will tell you don't worry then after
682:52 - exiting out this cell tense Loop we'll
682:55 - just simply return the head of the list
682:57 - okay so this is pretty much that we have
683:00 - to do uh so till while loop I I have
683:03 - told you what we are doing we are just
683:05 - simply creating one previous node and we
683:07 - will keep that previous uh
683:10 - upgrading updating updating until an
683:13 - endless will reach the previous node
683:16 - like I'll give you an example
683:18 - so this is the list one two
683:23 - three four and five and we are trying to
683:26 - delete the
683:27 - index which is three and this is our
683:30 - head this is our tail and this is the
683:33 - position at which we are you want to
683:35 - delete the node okay so at first our
683:39 - previous is here so we are upgraded
683:41 - previous and come come that previous to
683:44 - the here so that our uh correct this is
683:47 - the current when we are assigning one
683:49 - current and creating one current and
683:51 - current is equal to previous dot next so
683:53 - after performing this step uh so our
683:56 - current will Point pointing to the index
683:59 - at which the node we want to delete and
684:02 - our previous will point to the previous
684:04 - node of the list
684:07 - okay and uh we'll just write say
684:09 - previous dot next is equal to current
684:11 - dot next we will simply create a link
684:12 - between this node and this node and we
684:16 - don't have a link between 2 and 3 and 3
684:20 - and 4 because the link which is created
684:23 - by this line is one two four and five so
684:26 - we have no more have the track to this
684:29 - third node inside the list because of
684:31 - this line line we have written previous
684:33 - dot X is equal to current dot next and
684:35 - after that we will simply return the
684:37 - head of the list
684:38 - okay so this is the idea that's okay so
684:42 - let me call that method
684:45 - delete at we will simply pass the head
684:48 - of the list
684:51 - and this method is also returning one
684:54 - head so we have to store that
684:56 - new head
684:59 - somewhere so I'm storing over here and
685:02 - after that we'll write print list and I
685:06 - will pass that new head
685:08 - okay so this is the idea behind deletion
685:13 - that is the specified quotation Let's
685:15 - test it out one two three four and five
685:19 - this is list and uh you can see one two
685:23 - three four five it's a list elements and
685:26 - let's suppose I have to delete the
685:28 - element which is at third index
685:31 - okay which is a third position so I have
685:33 - to delete this three so I have pass
685:36 - 3 as the position don't get confused
685:39 - three is a position not the value
685:42 - so here you can see the new list is
685:44 - returning after that method call is one
685:47 - two four five that is third position
685:49 - element is getting deleted so if you
685:53 - don't get don't get confused I will just
685:55 - run it run it again and I will write it
685:57 - simply 55 69 96 89
686:03 - now you can see I I know if I want to
686:05 - delete the 96 I can delete it by its
686:09 - position one two three and four fourth
686:12 - position is 96 so I want to delete the
686:14 - fourth
686:16 - node of the list here you can see 23 54
686:19 - 69 and after that 96 is getting deleted
686:22 - and 89 is uh again come at the end of
686:26 - the list
686:27 - so this is the idea uh delete deletion
686:29 - operation
686:31 - at the user specified location so I hope
686:33 - you got the idea
686:35 - thank you for watching this video
686:40 - so hello and welcome back to the new
686:42 - video of the Java tutorial Series so
686:44 - till now we have covered
686:46 - single English all right so let me show
686:49 - you
686:51 - if you are watching series uh
686:54 - so that's no problem but those who are
686:57 - watching just want to learn the links
687:00 - list part those for those I am telling
687:02 - we have covered this singly linked list
687:04 - we have covered all the operation we
687:06 - have covered insert operation deletion
687:08 - operation both three types insert at
687:10 - beginning insert at end inserted with a
687:12 - specified location
687:14 - likewise deletion operations are also
687:16 - performed we have uh covered how to make
687:18 - the list how to print the list how to
687:20 - print the length of the list how to
687:22 - search the element inside the list and
687:25 - and how to find the middle node of the
687:27 - list how to reverse list all these
687:29 - operation we have performed on The
687:30 - Single link list and I guess this is the
687:33 - pretty much idea that where we want
687:36 - regarding the link list so now today
687:39 - onwards we are looking for the W linked
687:42 - list
687:43 - so let's get started so what is public
687:45 - link list uh in this video I will be
687:47 - telling you the theoretical part
687:48 - regarding the W links list so let's get
687:51 - started
687:52 - so let me create create a create a list
687:56 - over here
687:58 - okay
688:02 - let me create a list
688:08 - we will try to understand each concept
688:12 - line by line
688:13 - uh okay
688:17 - so this is the one
688:24 - this is the line
688:25 - and
688:27 - this line so
688:30 - okay so till now uh what we have covered
688:33 - is incredits we know inside single link
688:36 - list this is the node this is node which
688:39 - is which looks
688:42 - looks like in single English there is
688:44 - one uh link which is coming from here
688:47 - and there is link which is
688:49 - going here that is one node is connected
688:52 - to this node and this node is again
688:54 - connected to the another node in that
688:56 - list and here this node contains
689:01 - data
689:03 - and here this contains next part okay so
689:08 - why this is this list called as single
689:10 - link list is simple because this node is
689:15 - connected to the next node via a single
689:17 - link okay this is the single link that
689:19 - is getting connected to the next node so
689:22 - whereas in the W enclosed if you can see
689:24 - the node structure is different
689:27 - okay so this is the one
689:30 - and this is
689:32 - this is pretty much simple and single in
689:35 - English but the node inside a doubling
689:37 - list is represented as like this
689:41 - this
689:45 - here
689:47 - here
689:49 - again here and one more here
689:54 - forget about my drawing
689:56 - okay just keep focus on the concept okay
689:59 - uh this is a that is the difference here
690:03 - you have only the data and the next part
690:05 - next part contains the address to the
690:08 - next node in the list and data part
690:10 - contain the actual data so here also we
690:12 - have a data part
690:14 - likewise here also we have data part
690:19 - here also we have data part
690:21 - and here also we have data part but
690:24 - nothing changes over here here also we
690:27 - have next part that is an address to the
690:30 - next next Link in in next node inside
690:32 - the list here also next next and here
690:35 - also we have next
690:38 - here also we have next and uh the this
690:43 - part right over here this contains
690:45 - previous
690:47 - okay I will tell you what is previous
690:49 - just bear with me
690:53 - previous
690:54 - previous
690:57 - okay so and one more thing is there
691:01 - this is
691:03 - one more linking over here
691:06 - this
691:08 - this which we have not seen in the
691:11 - singly linked list all right
691:14 - this is the this becomes the and single
691:17 - English it's uh one more thing single in
691:20 - English you can see uh is One Direction
691:23 - okay that means uh if you start from
691:26 - left
691:27 - it will go to the right only you cannot
691:31 - come back in that link list it will go
691:34 - from left to right you you don't have
691:36 - any way like we have you have gone to
691:39 - the next here from this next node this
691:41 - from this next note you cannot come back
691:43 - okay all right so so this is the thing
691:47 - that we have seen in a single English
691:49 - but in the uh double in English we have
691:51 - node like this you can see they just
691:54 - keep tracking my pointer and each node
691:57 - contained previous previous means
691:59 - previous will hold the address to the
692:02 - previous node inside the list all right
692:04 - so if you if you can consider this one
692:06 - so in this previous part the address of
692:09 - this node this node will be saved over
692:12 - here
692:13 - okay so address of this node will be
692:15 - saved over here and in the next part the
692:17 - address of this node will be saved over
692:19 - here and in the data part as usual the
692:22 - actual data that node is going to hold
692:24 - that will get stored here okay so you
692:27 - will be asking uh what are what is the
692:29 - if it is the first node or it is if it
692:32 - is a large node then in that case the
692:35 - first node previous will hold the value
692:37 - of -1
692:39 - minus 1 and the last node of the list
692:43 - next should hold minus one okay so this
692:48 - is the roughly I verified uh W English
692:51 - the advantage you get here is you can go
692:54 - from a left to right and you can come
692:58 - also backward from
693:02 - right to left because this this you you
693:05 - can get this idea better better you can
693:08 - check it over here this is the direction
693:11 - of the nodes
693:14 - this is the direction of the notes
693:17 - you can see
693:21 - here
693:24 - here
693:27 - next node and the previous node the only
693:31 - thing is there are two ways you can go
693:35 - front by using the next and you can come
693:38 - back using the previous so instead of
693:41 - having just only one way where you where
693:45 - you are going from left to right in the
693:46 - lovely linked list you have the access
693:48 - to the next node also and the previous
693:50 - node also why so because it at the node
693:53 - part of this double link which contains
693:55 - the three parts that is the previous
693:56 - part data part and the next part
693:58 - previous part will hold the address to
694:00 - the previous node in the list and the
694:02 - next part will hold the address to the
694:03 - next Lane next node in the list and the
694:05 - data data part as usual hold the data by
694:08 - the way it should be in uh integer
694:10 - format character format string format
694:12 - any data type format data can be stored
694:15 - over here
694:16 - okay so this is the doubling fish idea
694:19 - and this is the theoretical part that
694:21 - you need to understand before uh you get
694:25 - your hands dirty using the doubly linked
694:27 - list okay so go uh one more thing you
694:30 - can go in the
694:32 - web browser and you will just simply
694:35 - type uh doubly link list let me show you
694:39 - doubly linked list if you type and then
694:41 - firstly in Java D Point comes and if you
694:43 - go here and here you can see a nice
694:46 - article is there which will explain
694:49 - and all those
694:51 - stuff regarding the doubling list I hope
694:54 - you got some idea about the public
694:56 - increase on the next next video onwards
694:59 - we will be start implementing the
695:00 - doubling list using Code using Java
695:03 - thank you for watching this video
695:08 - so hello and welcome back to the new
695:09 - video of the Java tutorial Series so
695:11 - till now we have covered all the
695:13 - operations on the singly linked list so
695:15 - here you can see uh I hope you either
695:18 - followed the series along with me and so
695:22 - we have seen how to make the single
695:24 - English how to print it how to search an
695:26 - element how to find the middle node all
695:28 - the insert operation and all the delete
695:31 - operation as well so
695:33 - what I am I'll be thinking is uh from
695:36 - this video onwards we'll be starting for
695:38 - w link list so we'll uh in our previous
695:42 - video we have saw the theoretical part
695:43 - of the UW link list any for me this
695:46 - video onwards we will be looking for
695:48 - uh how to
695:50 - perform all the operation on Adobe link
695:52 - list all right so for as we have
695:56 - discussed in single English we inquired
695:58 - one node which uh
696:02 - so we have to make a node of our aw link
696:06 - list so we cannot use the node which I
696:09 - which we have made in the single
696:10 - language because in W linkage there is
696:12 - one uh previous pointer as well as the
696:15 - next pointer was there so that we can
696:16 - move for bi-direction we can go uh left
696:18 - to right or at the same time we can come
696:21 - right to a right to left right as well
696:23 - okay so for that we have we will be
696:25 - covering uh
696:27 - creating one Java class so I will name
696:29 - it as
696:31 - node D node d means node of
696:36 - uh double in English all right so in
696:40 - this uh first of all we require a data
696:42 - part
696:43 - so I will name that variable data and we
696:47 - will require
696:49 - two pointers that is the node d uh I
696:54 - will name it as previous so that it can
696:57 - hold the it will hold the previous
696:59 - address of the previous node in that
697:02 - list and one more is that node
697:05 - of type node D which is next
697:09 - usually as usual as we have seen in a
697:11 - single language part all right so now
697:14 - here let me call one Constructor of this
697:17 - class so that whenever we create an
697:18 - object of this class uh we have to pass
697:20 - the
697:21 - data
697:23 - data to this class so that we can make
697:26 - that nodes using that data okay so this
697:29 - Dot
697:30 - data is equal to data
697:32 - and it's for the first mode we will
697:35 - write as previous is equal to null and
697:39 - next is also equals to know
697:43 - all right so both are pointing to the
697:46 - two Arsenal uh for the single node okay
697:49 - so now what I'll be doing is this is our
697:52 - node part uh that that is pretty much we
697:55 - have to do and now I will go and create
697:58 - another Java class and I will name it as
698:01 - W linked list
698:06 - W the query list
698:11 - okay and I will hit enter
698:14 - all right so let me just increase the
698:17 - font size let's check whether I can
698:20 - increase it or not
698:25 - no I guess I can't decrease I hope you
698:28 - guys uh this font is visible to you all
698:30 - right so since we are taking input from
698:33 - the user so there is one library that we
698:35 - have to
698:36 - import first so I will import that
698:38 - import Java Dot
698:41 - detail dot star I will import every
698:44 - class from the util package and now
698:46 - inside this
698:48 - will create a object of the scanner
698:50 - class
698:51 - since we are making multiple multiple
698:54 - methods inside this class so I will
698:56 - declare the scanner object of the
698:58 - scanner class uh globally okay public
699:02 - static
699:05 - scanner SC is equals to new
699:10 - scanner
699:12 - system dotting
699:15 - okay so now after creating the object of
699:18 - this class uh
699:20 - let me create
699:22 - two new
699:24 - variables so those though there will be
699:27 - public
699:28 - static off type node
699:31 - t
699:32 - so I will create add and tail so as we
699:36 - have seen in our single linked list
699:39 - lectures so we have here again we
699:42 - require a head and tail so that we can
699:45 - keep track of the first node of the list
699:46 - and the last node of the list all right
699:48 - so now
699:51 - in this video we will be talking about
699:53 - how to create a doubly resist okay so
699:55 - for that I will make one method I will
699:58 - name it as
699:59 - public
700:02 - sorry I will do it in next line
700:06 - public
700:08 - static
700:10 - and since it it is making our new
700:14 - linked list which is of type double link
700:16 - list so it must return the head of the
700:18 - head of the list so that we can get that
700:21 - head and print and perform all of the
700:23 - operation that we want to perform on
700:24 - that list all right so it it will return
700:27 - uh head which is of type node d uh that
700:31 - is the node of the double linked list
700:33 - okay so make
700:35 - I will name it as make list as we have
700:38 - seen our single English lectures okay
700:41 - and so here uh for the first time
700:43 - whenever you create a whenever we want
700:45 - to create a list the head and tail at
700:48 - initial point though those two will be
700:51 - pointing towards the null and now here
700:54 - also I will write 10 is equal to 9 and
700:56 - after that we will simply uh print one
700:59 - line and we'll ask the user to enter the
701:01 - data
701:02 - all right enter
701:04 - the data
701:07 - in the list
701:10 - okay so we are asking Google to enter
701:11 - enter the data in the list and create
701:15 - one new variable
701:18 - data and SC dot extent
701:22 - I will take the data from the user and
701:25 - again we will run one while loop and
701:27 - we'll iterate over this while loop uh
701:31 - until an endless our data part is
701:34 - -1 so whenever the user words uh let's
701:38 - suppose user want to enter inside the
701:40 - five five elements in this like one two
701:42 - three four five and after that user can
701:44 - write a data value as minus one so that
701:47 - this while loop will get break and our W
701:50 - link list will be make it as one two
701:53 - three four five only okay so here we
701:57 - will uh whenever we get entered inside
701:59 - this while loop we know that enter data
702:03 - part is not -1 so there is a user who
702:07 - wants to insert a new node in that list
702:09 - so we will make that a new
702:13 - node
702:15 - B
702:16 - and we will call it as new node D and we
702:21 - will pass the data part that we so this
702:24 - is the Constructor that we have build it
702:27 - over here so we are passing this data to
702:30 - this data to this Constructor
702:34 - and now after passing the data after
702:36 - building that Constructor we will write
702:38 - one if condition and we'll write if head
702:41 - equals to equals to map so think I would
702:44 - think about it whenever head will be
702:46 - null so if it had a heading head is
702:49 - pointing to our Channel if and only if
702:51 - it is the first element that we are
702:53 - going to that we are trying to insert in
702:55 - the witness right so in that case we
702:57 - will just simply uh assign the head
703:00 - value to to the
703:02 - a new node a new node D value and we
703:06 - will assign the tail value is it also
703:08 - equals to New Order because ultimately
703:10 - uh this is the first node inside that
703:13 - list so therefore head entail will both
703:15 - point to that uh
703:17 - element uh so sorry L naught element
703:19 - that node itself okay so we will write a
703:22 - new node d
703:24 - dot next
703:27 - is equals to null
703:29 - and we'll write d
703:33 - Dot
703:35 - previous it also is equals to not so
703:38 - both will be pointing towards General so
703:40 - because there is no uh new node inside
703:42 - uh another node inside that list since
703:46 - it is the first node else uh so whenever
703:49 - if head is not equal signal that means
703:51 - there is there are some elements there
703:53 - are some nodes which are very present
703:55 - inside that wave English so we'll come
703:57 - inside with a else part we will write
704:00 - tail dot next
704:03 - is equals to new node new node B
704:06 - and we'll write new node
704:10 - D dot
704:12 - previous is equals to
704:16 - 10
704:18 - we will write
704:21 - tail is equals to new node d
704:25 - and we will write 10 dot next
704:31 - is equals to that
704:34 - okay so these are the tasks that we have
704:37 - we are going to perform is if it is head
704:39 - is not equal head is not a questionable
704:42 - so what we will be doing is tail dot
704:44 - next uh is equals to new node so we will
704:48 - assign uh the whatever the node which is
704:52 - at the last the tail is there all right
704:55 - so we are assigning the Tails next value
704:57 - to the node that means we are making
705:00 - that link for the previous node in the
705:04 - list to the to that next part okay and
705:06 - so here uh new node dot previous is
705:09 - equals to 10 and we are assigning new
705:11 - nodes previous to the tail that means we
705:13 - are making this linkage between the last
705:17 - let me show you let me show you
705:19 - let's suppose the the let me commit it
705:23 - out let's suppose uh this is the list
705:25 - one two three and we are trying to
705:28 - insert 4 inside the W link list okay all
705:31 - right so here uh we will as a tail is
705:34 - here ultimately uh this is this is the
705:36 - last element uh in that list tail is
705:38 - here we'll assign the Tails dot next
705:40 - that means this nodes next part to this
705:43 - new node okay so we are making this uh
705:46 - left to right connection in this wave
705:50 - language and we will write new node dot
705:52 - previous that is this this nodes
705:54 - previous to tail so we are making that
705:57 - right to left connection as well and
706:00 - after making those two connection we
706:01 - will simply uh change the value of the
706:04 - tail we will assign the tail is equal to
706:05 - new node because since this element is
706:08 - getting inserted for in the in the list
706:09 - so uh so this becomes the last element
706:12 - uh for now that's why we have to update
706:15 - the 10 since the tail is keeping the
706:17 - track of the last node inside the list
706:18 - all right so and you will write tail dot
706:20 - next is equal to so we assign this next
706:24 - to the milks indicating that this is the
706:26 - last element inside the list okay
706:29 - so these are operation that we have to
706:31 - perform after performing this operation
706:33 - either the If part will get executed or
706:35 - the else part will get executed executed
706:38 - after that we will uh again
706:40 - ask user to give us a new
706:45 - data
706:46 - okay so it will ask again the user to
706:48 - enter the new data and it will again go
706:51 - and check whether the data part is not
706:53 - equals to one or not when it is equal
706:55 - when it is equals to 1 minus 1 it will
706:58 - go out of that Loop and we will just
707:00 - simply return head of the list
707:03 - okay so this is pretty much that we have
707:06 - to perform inside this
707:10 - okay so these are the operation uh I
707:13 - hope you got the idea how to make a
707:16 - doubly links list so uh let's quickly
707:21 - run this so for running purpose we
707:25 - require one
707:27 - our main method so we will write a main
707:30 - method here and inside this main method
707:33 - we will call our make list function and
707:37 - you
707:38 - so for our make list function
707:41 - since the make list function is
707:43 - returning ahead to us so we will have to
707:46 - store that head
707:47 - uh in this head variable
707:51 - all right and after this let me call
707:53 - this okay so let's go and run this
707:58 - if you are not getting any errors we are
708:01 - successfully trying to end okay so here
708:03 - you can see enter the data in the list
708:05 - let me make a list as one two
708:10 - three four five and uh if I say uh it's
708:14 - done I these many elements that I want
708:17 - to insert this list after that I can
708:18 - write minus one and it will came come
708:22 - out of this for Loop not follow sorry
708:24 - white Loop and after that it will return
708:26 - the head list so this is the idea behind
708:30 - how to create a
708:32 - list which is of w type wasting doubling
708:36 - doubly linked list okay so in a upcoming
708:39 - videos we will see all other operation
708:41 - of the doubling English so thank you for
708:43 - watching this video
708:49 - so hello and welcome back to the new
708:50 - video of the Java tutorial Series so
708:53 - till now we have covered the waxed uh
708:56 - one functionality that is how to make
708:58 - the doubly links list how you can make
709:00 - one doubly linked list using Java and uh
709:04 - in a previous video as you as you can
709:06 - see we have created created a node
709:09 - um which is after which is of double
709:11 - type w link list which have which can go
709:14 - bi-directional which can go from this
709:16 - node to this node and it it can also
709:18 - come back from that note to that one
709:20 - that is left to right and right to left
709:21 - okay so in the our previous video we
709:25 - have also talked about uh how to create
709:27 - a w linked list
709:29 - so how to build one so if you you
709:32 - haven't watched that video go and check
709:34 - that video first watch that uh then come
709:36 - back to this video so now in this video
709:39 - we will be covering how to uh print the
709:42 - list all right so in our previous video
709:44 - we have built the list so in this video
709:46 - we will uh talking about how we can
709:48 - print the double linked list okay
709:51 - the logic is a pretty similar to the
709:54 - that one that we have seen in the single
709:57 - link list okay so in this video
709:59 - okay let me just first make this notes
710:04 - so that you guys can understand easily
710:07 - all right so let me just quickly make
710:09 - that make that list for you
710:12 - and I will make it as
710:15 - this one
710:18 - this one
710:22 - this this
710:30 - by the way guys how you how you are
710:33 - enjoying enjoying this series I hope do
710:37 - comment out if you have any doubts I
710:40 - will clear it out all right
710:42 - Okay so
710:46 - don't mind my drawing
710:48 - just focus on what I am trying to tell
710:52 - you and
710:54 - you'll get that what I'm trying to tell
710:56 - you okay
710:57 - so look at here
711:00 - this is our W link list so this is the
711:03 - direction that we are
711:05 - first going
711:08 - forget about it let me take my pencil
711:11 - this is the direction and in this
711:13 - direction this is the direction okay so
711:15 - you can go from uh this this direction
711:18 - also and if you want you can come from
711:21 - this direction also so we are trying to
711:23 - print this list okay so first thing
711:25 - first
711:27 - try to let's try to pseudocode this all
711:31 - right so we will try to think or build
711:34 - one logic okay so what do you think how
711:36 - you can print this list okay so uh there
711:39 - is one concept that uh I have taught you
711:41 - in the previous video like this uh we
711:43 - have keeping the track of the head and
711:45 - tail all right so if you guys can
711:48 - remember head head means the node that
711:51 - comes first in that list okay so for
711:56 - that
711:57 - here is the head and tail means the last
712:01 - last node of the list okay so we are
712:05 - going to use head
712:07 - you can also use Tail as well but in
712:10 - that case you will be printing the list
712:12 - in the backward Direction okay so in
712:15 - this video I will be talking how to
712:17 - print the list in this direction okay so
712:20 - you can take it as homework and you can
712:21 - try to solve uh or build one logic where
712:24 - you can uh where you have the Tails axis
712:26 - Tails means this is the last node of the
712:28 - list and you can you you're going to
712:30 - print uh list in a backward backward
712:32 - Direction okay so it's you can take it
712:35 - as a homework so okay uh here we'll use
712:39 - head
712:40 - okay so we will run a while loop to
712:45 - check
712:46 - whether
712:48 - to not check to print this list okay so
712:50 - we will we will use the while loop and
712:53 - you will use the head okay so each time
712:57 - we will get get to that head we will
713:00 - trying to paint that data
713:02 - get to head
713:06 - print the data
713:09 - okay after printing the data uh to move
713:11 - to the next node in the list we have the
713:14 - next uh next uh next ad next pointer
713:18 - which is holding the address of the next
713:20 - node so we will write logic so that data
713:24 - uh data the head will move
713:28 - thank you
713:31 - to the next node
713:35 - let me increase it to the side of the
713:38 - Box okay so first thing first we will
713:40 - get the head we will print the data
713:43 - inside that node uh which head is
713:46 - currently pointing to and where uh
713:48 - assign heads value to the current head
713:52 - dot next so we will iterate through this
713:56 - whole
713:57 - list and when we are trying to stop
714:00 - whenever our head is pointing towards
714:03 - another okay so when our head is point
714:06 - two point will Point towards anal when
714:09 - it when head will come here and we will
714:12 - assign the new heads value to this its
714:14 - next node node and it's there is no next
714:17 - node inside this list so head will
714:19 - pointing towards anal and we can stop
714:22 - at that condition okay so quickly we
714:26 - will go in our IDE
714:28 - and try to quote this out
714:30 - okay so we will here I will make one
714:33 - function or method whichever you you
714:35 - call it public
714:38 - static so we are just printing this list
714:41 - so we are not uh doing anything uh any
714:45 - operation we are just printing the notes
714:46 - of the list so there should not be any
714:49 - return type for this method and we will
714:51 - write print list
714:54 - okay and uh since uh we want the head of
714:58 - the list as our
715:00 - [Music]
715:01 - input to this method you will get that
715:04 - head and as as I said told you you will
715:08 - just simply print uh
715:10 - elements
715:13 - in the list
715:16 - are
715:17 - and after that
715:19 - uh
715:21 - we will perform one while loop and our
715:24 - while loop will run until our head is
715:26 - not equal to
715:28 - no
715:30 - okay so if the head is not equal to null
715:33 - we'll just simply print
715:35 - the heads data so we will write
715:38 - head.data we are trying to printing the
715:40 - data and after that we will
715:43 - print one one space because so that our
715:48 - elements can differentiate with each
715:49 - other so one space should be there and
715:52 - after printing this we will uh reassign
715:54 - the heads value to the Head dot next
715:57 - add dot next
715:59 - will assign this value to the head so
716:01 - that way we can iterate to the next node
716:04 - in the list okay so if your head is
716:07 - equals to equal to null that means we
716:09 - are at the end of the list we have
716:11 - printed all the all the elements
716:13 - so we will just print in print One new
716:15 - line so that whenever we build another
716:18 - function so function call gets executed
716:21 - to the new line okay
716:23 - uh okay so here in to run this method
716:29 - we have to call that method we will
716:31 - write print list and we will pass the
716:34 - head
716:35 - that we have stored here while making
716:38 - the list okay so what we are going to do
716:41 - here we will make the list and we will
716:43 - print the list okay I hope
716:46 - there will not any error let's see if we
716:51 - got any error okay so for now it's
716:53 - running okay so now let me give the
716:56 - element as 1 6 8 9 4 5 6 and after that
717:02 - we will write -1 okay so here you can
717:04 - see elements in the list are one six
717:07 - eight nine four five six these are all
717:10 - the elements that we have I have entered
717:12 - over here okay one thing is uh this is
717:15 - printing the new every element in the
717:18 - new line I don't want that because if if
717:21 - there is 100 elements in the list and we
717:24 - are trying to print that list it will
717:26 - take the whole lot of space in the
717:27 - console okay so we'll try to eliminate
717:29 - that uh we can do is print Ln instead of
717:33 - print Ln we'll write print and we can
717:35 - again call this method so that instead
717:38 - of printing the each element in the new
717:40 - line it will print it in a single line
717:42 - itself okay six six five one two four
717:47 - five
717:48 - minus 1 will print a six six five one
717:52 - four five nine these are the elements
717:54 - that I have entered over here you guys
717:56 - you can see
717:57 - so this is the idea how you can print
718:01 - the W linked list so you can try to
718:04 - print this
718:06 - same list
718:07 - in a backward for backward Direction you
718:10 - have the Tails axis that is the last
718:12 - note you can build one logic and try to
718:16 - print this list in a backward Direction
718:18 - okay so thank you for watching this
718:19 - video and I will see you in the next one

Cleaned transcript:

hey guys welcome to this tutorial series wherein we'll be learning Java along with the DSA so myself aniket I've been I'll be your instructor throughout this course wherein where we'll be learning Java programming language starting from the basics to the core Java Concepts and along after that we will dive deep into the data structures and algorithms using and we will try to implement that using Java programming language so first of all starting with the introduction you would ask me to which person can take this course so I would say uh anyone who wants to learn the Java programming language right from the beginning till the advanced data structures can take this course okay so in this video we'll be talking about the installation part which are which softwares are required you to run the Java program inside your PC so start let's let's get started open your Chrome and head over to the Chrome and just type download jdk and search you'll be seeing first link which is of your your record one and just go there and according to your OS whether you are using Mac OS Linux Linux or Windows just to choose your windows OS and according to your installer just click on this and this will get downloaded in your system I have already downloaded it so I don't download it again or I will pause it okay and the next thing you will require is IDE so what is IDE basically ID is an environment where you code uh your Java Java programs and basically what is the difference between an ID and notepad you can also code in the notepad but the better way of the better way of using the IDE is you can get a auto suggestion of those code Snippets and uh and there's in Auto indentation is there in The Insider ID so I suggest one of the best ID to code the Java programs is IntelliJ IDEA so you just go into your browser and type download in Delhi J idea so first link comes of jetbrains who are the developer of this ID go there and click on this Community Edition Community Edition because don't download the ultimate edition you'll be charged after the 30 days free trial so so we want the free tile so go here and download the exe file or zip file whatever you want I suggest to download exe file click on the download and after two to three seconds your download will get started I have also downloaded this files that's why I don't download it again okay after downloading this file you just go there inside the full downloads folder and click on the jdk file double click on it it will ask for the permission click yes okay click next then keep the path as default okay so wait here the jdk will get installed in your PC simultaneously I will also install a IntelliJ IDEA okay wait hello here so it was saying the current IntelliJ Community Edition is already installed so I have already installed it so you just follow all the steps which uh just you need to click next next and IntelliJ IDEA will get installed in your PC okay so here you can see uh my jdk is also get down installed in my PC just close here and you need to go to the path which which you have given uh at the time of the jdk installation so here I given the path inside my Java folder I have jdk file and you just go inside the bin folder and just click here and copy the path I am again repeating just go to that path where you have installed the jdk and inside the jdk folder you have bin folder just click here and copy this path and and go to your start and type edit and you will be seeing edit the system variables here just click on it and click here edit environment and inside the user variable for the user just go here and click on the path and click edit and you will be seeing here new button and you click on this and just paste that path and click enter okay and click OK and again okay and okay so till now you have successfully installed all the softwares which are required you to run the Java programs inside your PC okay to test it out uh whether whether all this installation parties get succeed successfully installed just press the windows R but as a button on a keyboard and type CMD here and enter and just type Java minus minus version and after hitting enter you will be seeing the jacquer and Java version which is installed in a PC and jdk version which is also installed in your PC okay so till now we have seen the introduction and installation part which are required for you to run a Java program in your inside your PC okay uh so after that you have also I am assuming that you have also installed IntelliJ IDEA in your PC just click here open your open your IDE it will take some time according to the system configuration of your laptop or PC okay just wait here I'll be seeing this okay wait okay name and name the project whichever you want I will be giving hello and I will be creating clicking on the next okay after creating a new project inside IntelliJ IDEA the this window get pop up and inside source you can see the main file is there okay so this is the basic code that IntelliJ IDEA will provide you okay and after is inside this you can code whatever you want in Java programming language so till now I hope all the all of you have installed or all the required softwares and and till now you are rich at this point where you will be will be starting to code inside IDE so one more thing is there uh I'll be planning to give you some extra questions code like coding questions I'll be coming like for example I will be covering variables and data types and then again in the next question next video I will be giving you the problems or some coding questions uh regarding that Concepts which I have taught you in the previous videos uh so I expect expect you to answer those questions inside uh comment comment box of that video and I'll be reviewing your comments in the upcoming videos and we'll be talking some which are which Solutions is best which solution is wrong so I'll be thinking like that so I hope uh you enjoyed this video and install all the softwares which are required so in this video I will be talking about the theoretical part of the Java so in this video also we are not going to code anything so basically we are talking about the Java application what are the Java features and what are the three JS of the Java so I strongly recommend that you should watch this video if you are preparing for the interviews or any your college test so this will be helpful for you to clear out those examinations so what are we learning today so we'll be learning what is Java we will be discussing some applications of the Java and we will be seeing some features that makes the Java as a standout programming language and will at last we'll be covering the three JS of the Java which is jvm JRE and jdk so let's just get started okay so what is Java so Java is a programming language and a platform so Java is a high level robust object oriented and secure programming language so talking about the history of the Java the Java it was developed by the sun Microsystems in the year 1995 and James Gosling is The Man Behind the Java and which who called called as the father of the Java before Java its name was Oak since the oak was already registered by a company so James Gosling and his team decided that we should change the name to from Oak to Java so that is the history about Java so let's just talk about the real life examples and applications where Java is used okay so Java is used in a wide range of fields okay so let's just discuss some some of Themis so Java is used in desktop application so there's Acrobat Reader media player your antivirus which you use in your system is built using the Java programming language and some of the web applications like IRCTC uh the railway resolution systems and the Java T point which is famous website wherein you can find the tutorials for the Java learning and Enterprises applications such as banking applications are built using the Java and strong backend is also created using the Java programming language and the mobile application and embedded system smart cards Robotics and the games are yet more fields which you can think Java is there okay so let's talk about the features of the Java so here you can see the picture where I have written all those features that Java has okay let's just talk some few of them so Java is simple so what makes the Java simple Java is very easy to learn and its syntax is Simple and Clean and easy to understand according to the sun Microsystems Java is a simple language because Java syntax is based on C plus plus so it it makes easier to a new programmer to learn it better and in faster way so Java has removed many complicated and rarely used features for example explicit pointers operator overloading Etc okay so there is no there is no need to unreference the object because there is an automated garbage collection is there in the Java okay so another feature is Java is object oriented so what is object oriented so object oriented is nothing but the everything in Java is an object object oriented means we organize our software as a combination of the different types of the object that incorporate the both Behavior so Java implements the oops Concepts such as class object inheritance polymorphism abstraction and encapsulation I will be covering all those groups Concepts in detail in the upcoming video lectures okay uh so top let's talk about the one more feature here which is main feature I guess the Java is platform independent so what is Java platform Independence uh platform Independence means once you write your Java code that is the dot Java file and once you execute that file it creates the dot class file of that the Java program so what is dot class file so that dot class file is the byte code of the Java which you can run in any operating system so let's suppose Windows is there Mac OS is there Linux is there you can take that dot class file and you can run any of these platforms any of these wind operating system so that makes the Java as a platform independent language okay so enough talking about the features let's move on to the three JS of the Java so this is the most frequently asked questions in the interviews and your college examinations what is jdk what is JRE and what is jvm so let's just talk about it in detail okay so first I will be talking about jvm so here you can see the jvm okay so what is jvm jvm stands for Java virtual machine it is an abstract machine it is a it is a specification that provides a runtime environment in which Java byte code can be executed so as early I have told you the dot dot dot Java class file is converted into dot class file dot class file is the actual byte code that Java uses to run that code okay and then again that dot by dot class file is converted into machine understandable code okay so that part is handled by jvm so what jvm performs the task okay jvm loads the code it verifies your code it executes your code and provides the runtime environment to the user to execute the Java program okay so yeah let's just talk about JRE so what is JRE Jr stands for Java runtime environment it is a set of software tools which are used for the developing the Java applications it is used to provide the runtime environment it is implementation of the jvm it is physically exist it contains the set of libraries and other files that jvm uses at the runtime so here you can see jvm the set of libraries like jar Etc and other files together makes JRE so JRE so I hope you understand the JRE so let's move ahead and talk about jdk so jdk is an acronym for the Java development kit so till now we have learned jvm JRE and some development tools are there like Java C Java and all those things forms a jdk so you might have seen one software we have install in our first video that is download jdk and this is the jdk so what contains inside a jdk is jvm JRE and the development tools which are required for the Java Apple Java applications to be built okay so Java jdk is a software development environment which is used to develop Java application and applets it physically exists it contains JRE plus development tools so as I told you JRE plus some development tools forms together a jdk and which we have installed in our first video so enough talking about theoretical part I hope you guys learn something about the theoretical part of the Java so in our upcoming videos we'll be starting to code in Java programming language and will be recording our first Java program in the upcoming videos what we are going to cover in this video is Java variables what are variables in Java so okay so let's just get started a variable is a container which holds the value while the Java programs is executed okay a variable is assigned with a data type and the variable name is the memory location okay so what it mean you can see here is a pictorial representation of what I said so suppose this is a ram memory and you have created one variable here and you have assign value it value 10 to the to that variable okay so variable is nothing but a container inside your memory which holds a particular value and what kind what kind of value it's gonna hold it depends upon the what type what data type you have given to that variable okay so you can assume it like a reserved area inside your memory okay uh so moving ahead we have types of the variables okay so there are three mainly three types local instance and static so let's see one by one each of them okay so what are local variables a variable declared inside a body of the method is called as local variable and you can use this variable only within that method and other methods inside that class aren't even aware that the variable exists so we will see the implementation part of this local variable instance variable and static variable once we get into the code okay for time being just listen to me and try to understand okay the next next one is instance variable a variable declared inside the class but outside the body of the method is called as instance variable and it should it should not be declared as static one why so I will also tell you in the coding part of that video okay so moving ahead we have the static variable a variable that is declared as static is called as static variable it cannot be local you can create a single copy of the static variable and share it among all the instances of that class okay and the memory allocation for those static variables happens only once when the class is loaded inside your memory okay so enough talking about the theoretical part let's just get into your IDE and code it out okay and along during coding part implementation I will be discussing some variables rules to declare an variable okay so there are some six to seven rules are here which you need to keep in mind while declaring a variable okay so just open your IDE and create one new project and create one new file here and you can create a new file also by clicking here on SRC just right click here new Java class and let's suppose I am giving variable as my name class name variable okay variable dute and hit enter so it will create a new class as you can see let me increase the font size for you so that you can See Clearly okay I hope it is visible now and let me create one main method so one one added advantage of using this ID is is you can you don't have to write all those codes like here you if you can if you want to write the main method you can just simply type m a i n Main and hit enter on the keyboard and it will automatically write those main method for you and you can start coding okay so first of all let's see what are those three types of variables that I have told you previously that though the static variable local variable and instance variable and what are what are the difference between all this okay so let's suppose if I create one variable here let me create static int m is equals to 100. okay so for time being I know you can't you don't know the static and in keyword so in upcoming videos we will be covering data types there you can understand just for time being understand this is a variable that is M and I have assigned value as 100 to it okay so you can see here I have declared this variable inside the class but outside the main method so this method this this this type of variables are known as static variables okay and you you can comment write comments in the your Java program by giving the two forward slashes and writing the comment inside it okay so again I inside the class but outside the main method I will be declaring one method okay so return type of my method would be void let's suppose I have created this method and inside this method I will be declaring one variable okay so the variable which I declared named n and I have assigned value to it is 90. okay so these kind of variables which are declared inside a method okay so these are local variables means the scope of these variables are only limited to that method means outside this method from line 4 to 6 this variable is not accessible inside your class okay I will comment it out okay and now the last one is instance variable okay so inside I'll come inside the main method and declare another variable name as int data and I will assign value to it is as 50. okay so these variable are called as instance variable so here you can see what is the depth formal definition of the instance variable a variable declares inside a class but outside the body of the method is called an instance variable okay so you may think uh what is the difference between instance variable and static variables variables because the both the variables are declared outside the method body okay so the only difference is for the static variables you just give keyword as static okay ahead of that the variable which where you have declared it okay so I hope you have cleared idea about what are the variables and what is static local and instance variable so I'll be giving you some basic program of addition of the two numbers okay so let's just get started uh wait I will start from here I will just comment out this line and add the comment as addition of two numbers okay so what uh what are the variables you think we required for addition of the two numbers okay so I need one variable which hold the first value and I did another variable which hold the second value and I need the third variable which hold the addition of those two numbers okay so let's create int a is equals to 10 and another variable in B is equals to Let's suppose 20 and another variable third variable which will hold the addition value of A and B I will write a plus b here okay and to print something on the console we just write system dot out dot paint Ln okay so here in this IDE you have also a shortcut to write this you just wrote write s out and hit enter the ID will automatically write system dot out dot println for you and I will be printing C here okay so let me just comment out this part of the code that I don't require okay and I will hit run okay so here you can see my file is getting there and here you can see on Console 30 is printed because the addition of the a that is 10 and B that is 20 is 30 and which is get printed on the console here Okay so uh another another example let's suppose we have you have to subtract those two numbers so simply here you can come here and give B minus a or something a minus B whatever you want and you just click here the code will get executed and here you can see then we sprinted on the console because 20 minus 10 is 10. so this is the basic uh very uh basic Theory and practical implementation of the variables in Java I hope you guys have understood the what are the variables or how it works and how it stores the data okay so in the upcoming video we will be talking about data types in depth okay so thank you guys for watching this video I will see you in the next video we'll be learning about the data types in Java so what are the data types data type specifies the different sizes and values that can be stored in the variable so in the previous video we have learned about the variables so we can here data type is nothing but it declares the which type of the data it's going to store inside the memory okay so here you can see the chart of the different types of data types are there you can pause the video and you can look into this I'll be teaching you it EV each and every type how what type of the data is going to store okay so now moving next it here is here is a chart you can see so in the First Column the name of the data type is there in the default value means if you don't assign the value to the data type what value it gonna store inside it by default okay and here's the default size that how how much memory it will consume if you declare that type of the data type inside your code okay so let's suppose if I declare integer integer variable of data type so the default size it will hold this of four bytes okay so enough talking about the data types we will see in detail in the code in this video okay so let's just talk about the keywords keywords in Java are also known as Reserve words okay the keywords are particular words that act as a key to the code these are the nothing but the predefined words by Java so that you cannot be used as a variable or object name or a class name okay so there are basically uh I think I guess 48 48 keywords rewards Reserve keywords are there in Java which you cannot use either as a variable name object name or the class name I will show in the show you in the code part so enough talking about the theoretical path let's code it I will jump into my IDE IntelliJ IDEA okay stick till the end I will be announcing some new announcement is there for you guys so that you can learn more efficiently in this whole series okay so and I don't want any tip come here click on right click on the SRC click on new and the new Java class so today we are learning data types so I will give this file name as data types okay okay so come inside this declare your main class main method sorry inside main method so let's go and see each data types one by one okay so first of all we will be talking about the Boolean data type okay so Boolean data type is it used to store only two values let me show you okay so for example if I declare Boolean first of all let me increase the font size I don't know how to increase it okay let it be I guess you guys are getting what I am telling time to tell you okay Boolean one is equal to false okay okay and I will do system.out.println and print one okay so if I click here run see guys what will happen let me hide this project okay so you can see false get printed on the console okay so as you can see I have declared one Boolean data type one and variable name is one and I have assign it the value to be false okay so if I write here true and again I click on the Run see it will give it true okay and if I write anything else one two C IntelliJ IDEA is throwing some error let's take it so here it was telling that the one variable that I have that I have declared is a type of Boolean and we I I am trying to store the integer value inside it so that can cannot be happen okay so now I will show you if I declare this one Boolean one and I am trying to print the one okay so here it again I get error variable one might not be have initialized so I have to initialize it whether as false okay or true it's up to you but remember it will going to hold only one two types okay either false or either true okay so next data type is a short data type so short data type is a 16bit assigned to complement integer and its value lies in between minus 32 768 to 32 767 okay that's the theoretical part I will show you the implementation right away okay short s is equal to let me assign it the value let's suppose ten thousand I guess it is right okay and I will declare another short okay in the variable name is r okay and I will assign it the value of minus 5000. okay and I will simply print s Plus R okay and if I click run see the values are going to be printed on the console so short is the derived which holds these values okay so next is float next come float let me comment this out first yeah let's go so float is nothing but that does when you when you are trying to store the data which is in the point or decimal okay so what I'm trying today let me give you with the example float F1 is equal to 234.50 okay uh I guess wait a wait a minute wait a minute float F1 and F okay and if I try to print now load F1 okay and if I try to click on run here the float value is 2.5 is going to print it okay so you have to write F value that you are storing the float values inside of float variable okay so this is this is for float and now integer comes okay it's integer is simple straight forward into a is equal to you can assign any value okay let's suppose 250 okay and inside this I will print the variable name a and if I click run now here you can see 250 get printed on this console okay so these are the data types and yet more to come we will learn all those data types when we are going to learn all those data structures Parts Okay so let me get back to the keyword and the keywords are nothing but the reservers you cannot use that words uh to declare any variable name object name and class name inside your code okay so enough talking so in upcoming videos we are going to see one exercise is coming for you guys I expect you guys to answer those exercise and we will be seeing solution for those exercise questions in the upcoming videos okay so the announcement is that I have created one uh repository for you guys and I will be uploading all those PDF resources that I have these are the nodes I will uploading all those nodes inside that repository and the core part this part I'll be uploading all these codes in as of as a file inside this repository you can you guys can access this repository and download the code as well as the PDF part and the link to the repository will be provided in the video description you can access and get the help from it so thank you guys for watching this video I will see in the next one thank you so guys in this video I will be giving you the five coding questions here you can see and I'm expecting that you guys should give it a try and code it out these problem statements so till now if you are following this series I expect that you are what you have watched all those previous videos wherein I'll be talking about the data types and variables with you guys till now so uh in considering that you have watched the previous video I have created this list of five coding questions wherein the only concept that is required is data types and Java variable Java variables for you to solve these coding questions okay not more than this and not any other another concept that I didn't discuss in this series you don't require this okay so I will just give you brief overview of each question uh so that that it's like a hint for you to solve these questions okay so in the first question the question is like that write a Java program to convert the temperature from a Fahrenheit to the Celsius degree okay so it's a basic simple Pro Java code you have to perform and the input is like that you given a temperature that is in Fahrenheit and the expected output from your code is that though that fahrenheit's temperature will get converted into Celsius temperature okay you can search for a search into Google for the conversion formula for that Fahrenheit to Celsius okay and second one is write a Java program to convert minutes into a number of years and days so the here in the input will be the minutes like here you can see three four five six seven eight nine is the minutes that the user will input give input to your code and the expected output is you have to convert those minutes into years and corresponding days okay so next question is write a Java program to compute a body mass index so what is body mass index you can just Google it out like here if I Google body mass index and right formula okay so first you can come you can go any of this website and here you can see I guess yes here you can see the example they are given for example you have your weight is 68 kg height is this much so the calculation is this for calculating the BMI so you can use this formula and solve this problem to calculate the BMI of the of that person so the inputs to this program will be your weight and height and the corresponding BMI will be get printed on the console okay though so next question will be write a Java program to break an integer into sequence of individual digits okay so for this the input will be like like here you can see one two three four five six is given to the given as an input you just have to print the each word of that each digit of that number in a separated way like one then one space then two then one space one three asset like that okay so next moving next the fifth question is write a Java program that accepts the two integer from the user and then prints the sum the difference the product the average the distance the distance in the sense the difference between the integers okay the maximum the maximum means the larger of the two integer and the minimum minimum means a smaller of those two integers okay so for this you have to receive two inputs from the user first input as a first integer and second as a second integer and the expected output is the sum of those uh two numbers the difference between two numbers the product of the two numbers the average of those two numbers and the distance of the two integers and the maximum integer from those two numbers and the minimum integer from those two numbers so I hope you guys got some idea about these five questions give it a try try to solve those five question it will help you to understand those concepts of data types and variable more efficiently and after one or two weeks I'll be making a video in which we will be talking about looking into the comment section of this video this you put some solution of your Co you you put some code of your solution in the comment box of this video and I will be looking to it and okay so in the next video we will be seeing some solution towards this problems before that you should try those these questions and I hope you will try and give it a try and once once again I will be providing this as a PDF this notes there's all this question has a PDF file inside this GitHub repository you can just click here like here I have uploaded already you just this is the fifth video of our Java Series so you can click on the zero five resource and you will be get all those resources in here okay so no worries about that okay I hope you guys have enjoyed this video please give it a try for these questions and I will see you in the next video talking about the solution of these questions in this video we will be talking about the solution of the exercise one okay that I given to you in those previous videos okay so in this video I'll be giving you the solution of the problem number one two and three and in the next video I'll be talking about the solution for the fourth and fifth because if I make all those five solution in one video the video will get lengthy and you guys will not watch all these videos Okay so let's just get started so what is the first first problem statement says write a Java program to convert the temperature from Fahrenheit to the Celsius degree okay so let me get into my IDE right click here create a Java class and I'll be giving class name as the cell CS convert okay let me rename this because class name should always start with capital let okay so inside this let me create my main method okay let me just increase the font size so that it will visible to you guys also okay so first thing first to solve this problem you guys first know the formula of the conversion from Fahrenheit to the Celsius so formula is like this let's suppose C is the variable which holds this actual Celsius and which is equals to the 5 into f means the Fahrenheit temperature minus 32 then it's divided by 9. okay so this is our conversion formula to convert the temperature from Fahrenheit to Celsius okay so here so first I will import some classes from a package name java.util so to import it this you have to write import Java Dot util dot scanner so I know at this point you guys didn't know what is this import Java util.star bear with me I will tell you or each and everything in this code itself okay so at first I will create one object of that scanner class let me create like import let me call it as input because we are receiving the input from the user okay scanner and then system dot in so first let me explain you what I did here okay so in the first line import java.ital.scanner I have imported the scanner class from the util package of the okay main Java package util package is there and scanner class is there inside the util package okay what does the scanner class scanner class do scanner will just gives get the input from the user and give it to the program okay so to use that scanner class you have to create one object of that class okay so here I have declared the car scanner and input input is the object name for that scanner class and I have initialized that object here okay simply and system dot in represent you have to get the input from the system that means user will get type those input and hit enter and that input will pass to the program okay so next I will just print okay let me print so first we have to receive that Fahrenheit temperature from the user okay so I will just try it input uh degree in fah fa is just a short form for the fahrenheit that I I have given okay so this line will get printed on the screen so next at this point line number eight we have to receive the input from the user that is the Fahrenheit temperature okay for that I will be using double data type okay so and I hope you know the double data type that I have discussed in the data type video and I will call that I will create a variable name fah okay and at the next line I have assign it the value add input Dot next double okay okay so in line number eight we have create one fah variable and assign it the value that the input dot next Double and what next Double method will do just simply it will take the input from the user that that is in the form of double and store it inside the variable FH that is the Fahrenheit Fahrenheit temperature that we will receiving from the user okay so next we have to require we have required another variable which will store our Celsius temperature okay Celsius temperature okay and the formula that I have given here in the line number five you have you just you just have to create or just write it down here like this same here 5 okay let's show 5 into again when brackets are there and the f means the fahrenheit so we have received that Fahrenheit in this variable okay so I will write fah minus 32.0 that is our formula you can see in the line number five also and after those two circular bracket I will divide it the result of it by 9.0 okay and at the end I'll add the semicolon okay so at this point of our code we have taken the input from the user that is in the fahrenheit and we have stored inside the fah and when and we have created the Celsius variable wherein we'll be converting those Fahrenheit temperature to the Celsius and storing in the range Celsius variable okay so at last I have to just print that Celsius variable to the user okay so for the printing first let me get that Fahrenheit temperature and I will be concatenating it with this okay so let let me first type it out then I will tell you what is concatenation in Java okay so here I will write degree FH stands for Fahrenheit is equal to okay okay it's equal to Celsius I guess yes Celsius then again one okay Celsius in Celsius let me just decrease the font size so that you can see in one window Celsius okay so what in this line is we'll be doing is first it will be printing fah value FH value that user will give us give us one space is there to concatenate those two strings we use the string concatenation which is plus where plus operator is there you can just write the plus and the one blank space is there right in this case let me just explain you when I run the code okay I will explain you okay so I guess this is what we have to achieve in this code let me just click on run so here it it was saying that input a degree in Fahrenheit so I just go here and what is the input 2 and 2 is there okay two one two so here you can see FH 212.0 is get printed one space is there after that degree Fahrenheit is equal to 100.00 in Celsius when space should be there you can just give it a space and that will get rectified here okay so we'll see 100.0 is the actual expected out output of that code and we are getting that same here okay so I hope you have also implemented this same way that I have done here okay so moving forward for the second code we have to write a Java program to convert the minutes into a number of years and the dates okay for this let me just create another class so let me just call it as so what we have to do actually convert the year and days okay here here and dates sorry guys okay let me just increase the font size okay and I will write the main method here okay so we have to convert minutes into number of years and equivalent days okay so here is the minute okay so for this again we we want we have to take one input from the user that is in the form of the minute okay for that I have told you which package to import import Java Dot YouTube Dot scanner okay so first of all let me just create one scanner variable scanner sorry object of that scanner class not variable import news scanner system dot in okay so now we have to take one input from the user that is minutes okay so I will create one double variable and name it as minutes in here you can name it whatever you want but name like that okay according to you so minutes in here I will assign the value of that 60 into 24 into 365. okay now so in the next step I will be printing one string one line that is input the number of minutes I'll be getting those input from the user at this line and put the number of minutes okay let me go into another line so here we have to take the input actual input that is user gonna give us and I'll be storing that inside a variable called Main okay so I I guess all of you know how to take input from the user as we discussed in the last problem statement okay so after receiving the input from the user I have to generate the number of years that is equivalent to that minute and with whatever days that are left after converting that years I have to convert those into days also okay so I'll be creating one long take long variable is there okay I will name it as long years okay so in that I will be giving Min means the minutes that user have input okay that is going to divide it by minutes in the year okay so at this line number nine years are going to stored in that variable okay so uh then we have to store the days that are equivalent that the day minutes are left okay okay so in here I have to write int and inside that I can write the whatever the minutes are left divided by 60 and again divided by 24 mod 365. okay so here at last I will just print out all those information that I have calculated over here okay I will write int Min means the minutes that are using user in going to get give the give us okay that is the minutes is approximately I will concatenate this with the ears okay here's again ears and okay yeah after the years I have to print those days also let me just print those days and after that I will concatenate with it equivalent dates okay I hope this is the answer okay just Checkmate okay so it is asking for the minutes so minutes are three four five six seven eight nine okay let me give this input three four five six seven eight nine if I hit enter it will say 3456789 minutes is approximately six years and 210 days so that is the expected output here you can see okay so I hope you have understood the second question also so just quickly we will move to the third question what is the question let me check write a Java program to compute a body mass index of the user okay this is another simple question is there we I will just name the class as BMI calculate okay hit enter let me increase the font size okay main method is there and inside that let me just import scanner okay because we have to receive the weight and height of the user okay java.util dot scanner okay and again I have to create one variable so not variable object input is equal to news scanner system dot in okay till here I hope you either understood so now I will first of all get the weight and height from the user okay so for that let me just print on the console enter your sorry enter your weight and I'll be receiving it in pounds you can take any convention just the formula will change to calculate the BMI okay double weight variable I will declare and store that weight inside that weight variable and to get the input from the user I guess you know what to write down put dot next Double okay now we have to receive the height of the user so again I will shout and enter your height in inches I will receive the height in inches from the user okay and I will be storing that in the double variable name inches which is will be equal to input Dot next so now when formula is there to calculate the BMI so the formula is let me just explain you so I will hold all these BMI inside one double variable named BMI okay and inside this the formula is weight okay into zero point four three sorry four five three five I will just write first four points only after the decimal okay divided by inches inches means the height of the user okay multiplied by zero point zero two five four okay and again it will get multiplied by the inches and again multiplied with zero point 0 two five four okay after this I will end that line so at this point my bmis get calculated using the weight and height of the user and it will get stored inside this BMI variable so I I will just simply print that BMI in on the console that is your BMI will be I hope you know how to concatenate two strings okay as we have discussed okay I hope the code will get run okay so it will asking for the weight let me get the sample input 4 5 2 is the weight okay four five two is the weight and what is the height of the user that is 72 inches okay so okay here you can see the BMI for that user having 4.452 weight and 72 inches height will be 61.2891 okay so I hope first three questions you understood and you have you have give it a try to solve by your own so in the next video we'll be talking about the solution for the fourth and fifth question okay so thank you thank you for watching this video I will see you in the next one hello and welcome back to the solution to exercise one part two video so in this previous part we have discussed about problem number one two and three and we have also seen the solution to it so in this video we will be discussing the solution of the question number four and question number five okay so let's just get started let me just Okay so what is the problem number four says write a Java program to break an integer into a sequence of individual digits okay so the test data is one two three four five six and the output expected output will be once then space then two then space like that in every digit we have to give one space okay so to achieve this there is multiple value in in which you can achieve this okay so as of now I I assume that you you are a new beginner and you have watched till my past videos and you don't know the concept of like arrays and strings yet so we will Implement those in this videos using the concept that I have taught you till now okay so let me just create one Java class okay so let me just give you the name to the Java class as give okay give space okay and I will increase the font size and I will import get that main method in my code so in this problem also we required one input from the user so as of you know we have to import Java dot util dots scanner okay and I have to create one object of that scanner class I will name it as import ant and I will name is news scanner system.in because we are receiving the input from this system okay so first of all I will print one line where I'll I'll be asking the user for the six nonnegative digits okay enter six non okay negative digits okay and I will be storing that inside int very variable named input okay import let me just create input number so that you will not get confused between this variable and this input okay and I will calling input Dot next int so as of now we have received the input from the user and I will I have stored that inside input number variable okay so next step I have to okay so this is the step Where We Are in N1 is equals to input divided by one one two three four five six mod 10. okay I know you are not getting what I have written here just bear with me I will tell you what I have done here okay so I will just copy it out print it for five times okay one two three four five and each time my variable name should be different here N2 here N3 and four and five and then six and each time I will decrease the number of zeros in this okay so at first I have given zeros as one two three four five five time I have to give sorry I have given the sixth time so here I let me check one two three four five if it's five and then next time I have to give it it's four zeros one two three four and again next time I have to decrease one zero that is three zero should be there and next time there should be two zeros and in again the next time there should be one zero and at last there will be no modular operation only 10 divided by 10 will be there okay so what I have done here is I have taken the input number from the user and I have divided it by this okay so if if you go on to the Google and search for calculator okay let me just go and search for online calculator okay so what we have done here is we have taken that number so in our case the number is one two three four five six okay so I will just one two three four five six and I have to divide it with this okay so what is that again one two three four five should be there okay so one two three four five with Mod ten okay so if I do this my answer would be so this is the standard calculator so you have to first Define that more in mod operation inside the brackets so that the mod operation get executed first and the result of the mod operation mod operation will be given to the this entire operation where the result will get divided by the input number so here what we are getting is I will comment it out sorry okay I will write one comment here we are actually getting the first digit of the number okay so here we can see where our input is one two three four five six okay so at this line line number eight we are the result of this operation which gets stored inside the N1 is one like that similarly for the second two is going to store for third T is going to store and similarly for fourth four is going to store and five 5 is going to store and inside this 6 is going to you can perform this mod operation inside the calculator but do one thing while performing you just have to put these operators inside a circular basis so that this operation will get performed first and the second operation will be input number divided by that operation result of the operation first okay okay so after this I just have to print those N1 into N3 and for N5 and 6 by giving one simply space inside inside inside it okay I will shout one and one okay so after N1 I have to give one space that is our expected output in the way we want okay so then next N2 will be great printed again similarly and three will be get printed on the console again then plus will be there and 4 will get printed again n of 5 will be get printed and at last and six will get printed okay so I hope this code will run let's see if it get run all right it is asking for the input one two three four five six let me give this input hit enter so here guys you can see the we are getting one two three four five and after that we are not getting six we are getting one two three four five why so because I have done one mistake here as you can guys see input number divided by 10 okay so if I had do this divided by 10 the number that I will get is one two three four five because divided by 10 will shift that number from back side okay so here I have done one mistake I just have to do instead of dividing I have to just give mod okay errors are necessary in your code so that you can learn from it okay now it's working one two three four five six as expected output let me just give you another input through this code let's suppose one four seven four five six okay it it's working one four seven two five eight once spaces are there so okay I hope you have understood this fourth question there are more ways to efficiently write this code we'll be talking that after we once we learn string and arrays in Java okay so fifth question is little bit long okay let me write it read it for you okay write a Java program that accept two integer from the user and then prints the sum and difference the product the average the distance the maximum and the minimum from those two numbers so we you are here we you have to perform a lot of operations on those two numbers okay just quickly go into your editor click on the Java class and I will give here since we are performing multiple operation I will give here multiple Ops multiple Ops okay and let me increase the font size also let me get my main method inside here anyway since we are giving getting input form the user I will import Java Dot util Dot scanner okay so now I have to create one object of that scanner class input you know what let me give you another object name this time okay scanner system dot in okay and now I have to get two variables from the sorry two not variables two digit from the number to numbers okay so I will just out here and then ask for the user to enter the first number okay after this I will store that first number inside one variable called first int okay so again SC dot to get receive the input in the integer format we write next in okay so I will copy just this because I will not write that second type here we can write enter the second number and I will give it name as second end okay so at this point we have received info from the user okay so I have to perform operations okay so first operation that we are performing here is what is it sum of two integers is 30. so we have to perform addition operation okay so I will just simply Shout some will be and I have to store that sum means here okay so so for that sum okay so let me just create one variable here which will hold that sum okay some so for that sum I have to write first in the second it so this variable will hold that value of those addition of the two numbers and I will just concat this line with it okay so first operation we have done second operation that we have to perform is difference of the two integers okay so I have to perform minus subtraction okay and in Subs substance subtraction you can give any name to that variable okay until an endless it should not be a reserved keyword which is which is in Java okay which we have discussed in past videos I hope you guys are watching okay here difference will be Okay so difference will be so difference will be I will contact with Subs okay so the third option operation that we have to provide is product of the twin teachers okay sorry product of this 20 and I will hold that inside one variable name product so for the product we have to multiply those two numbers first hint multiplied by secondhand and again I will just copy it out okay product will be product okay so next operation that we have to Prof perform is average of the two integers okay so for the average here we can do one thing sorry for the interruption okay for the average we can perform addition of those two divided by two so I will declare one variable name in teacher of type in name AVG that will hold my average and in this I will perform first End plus second end divided by 2 so my average will get stored inside the variable AVG and I will just print average will be avt so from here I will not performing this distance Max minimum you guys can do it by your own I have I have shown you the first four operation you can perform all those operation here also okay so let me just run this code okay you should try so let me give the sample input here which is given 25 and 5 okay so first number is 25 and the second number is 5 so here you can see 25 plus 5 is 30 25 minus 5 is uh sorry oh I have given minus okay the difference I will run it again 25 five and then now he here you can see 25 plus 5 is 30 25 minus 5 is 20 25 into 5 is 125 and 25 plus 5 is 30 times 30 divided by 2 is 15 which is average of those two numbers okay so I hope you have understood these five Pro X5 coding questions and you have tried also by yourself I hope you get it so thank you for watching this video we will be covering another Concept in the next video okay so thank you thank you okay and welcome back guys to the another video of the Java tutorial series wherein today we are be learning about operators and its precedencies okay so first of all what is operators in Java operators is a symbol that is used to perform operations for example as we have discussed in like earlier videos exercise videos we have performed operations like addition minus subtraction division okay so there are different types of operators in Java and here I have mentioned all those types urinary urinary operators arithmetic operator shift operator relational operator bitwise logical ternary and assignment operators are there uh don't worry we will be doing some code part uh to understand this all operators wherein I will be teaching you about these operators so let's go ahead and learn about the Precedence of these operators in Java so I have shown you the highest to lowest precedence there is another one is the lowest to highest that is where just reverse of that so first of all the Precedence this column will represent the represent the Precedence this uh this is the operator which have which are included in that precedence this is the type of operators and this is the associativity associativity is another concept we will learn in the later videos of this series okay so here you can see operator first software bracket square bracket and are having the highest presidents and up to that the president presidents get precedent level get lower lower lower and at large the assignment operators addition subtraction multiplication operations are there uh motivation assignment operator there which has the lowest operated residence in Java okay so let's understand all this using uh code okay I will just simply create one class name as operators okay let me increase the font size and I will include my main method uh so I required to import scanner class as well because I will be receiving the input from the user in this code Java Dot util Dot scanner okay so here I'll create one scanner object scanner and my name of the object is SC new scanner system Dot okay so now first let me comment it out we'll be learning about unary operator urinary Ops let me like write it like this okay so what are unitary operators Unity operators require only one operand okay and the previous operation that we can perform in this like incrementing decrementing value by one and inverting the value of a Boolean okay let me tell you what I the side right now okay so let me create one variable name as X and I will assign value it as 10 okay and if I shout it like this X plus plus okay now if I click on run the program will get executed and what do you think what will be the output of this code so here you can see the output of the code is 10 okay and now if I print again I will write once out and now I am printing plus plus X okay and if I just comment it out the first line and if I hit run now you can see 11 get printed okay so what is the plus plus operated uh does it will increment the value of that integer by one okay so here at first line line number seven we are incrementing the value of x but after printing it okay if we just come here we print the X and increment the value of the X by 1. and in the second line we are just incrementing the value first and then printing that's why 11 get printed and in the second seventh line the 7 10 in 10 will get printed okay so like this unit Unity operators work and one more thing guys I will provide providing some resource links wherein you can go and check out all the operation of these operators I will be giving you some example in this video you can go there and check check it out and perform some operations okay uh another thing is that an arithmetic operators okay arithmetic Ops so in this arithmetic operation I used to perform the addition subtraction multiplication and division like operations okay so I don't think I have to tell you guys something here I let me just give you an example in a is equal to 10 in it B is equal to 20 and if I just South a plus b okay plus is the addition okay and if I just comment it out this part of the code so that on the arithmetic operator will get executed in this code okay so now you can see 30 is get printed on the screen because 20 plus 10 is 30 okay like that multiplication division and uh subtraction is also there in this earth arithmetic operators okay so next comes left shift operators so let me give one comment here so that you can differentiate between all those operators and I will be providing this code inside my GitHub repository which link will be given to you in this video description okay so let's left shift operators what it does let me just give you one example okay I will do 10 less than less than two it's not less than actually and if I just comment it out so that only left chip operators will get executed and you know you are seeing 40s get printing or printed out the screen so what actually happening behind the scene is Will right here okay so 10 is get into where to cap power 2 okay so what will be the output for this this 10 into 4 and this is 40. so here you can see uh if you write 10 less than less than 2 actually what is happening 10 into 2 to the power 2 2 to the power 2 is 4 and 10 into 4 is 40 okay like that left shift operator swaps and similarly the right shift operators are also working okay so let me just right here itself I will just comment it out you know what let me write separately right Ops okay and I will just copy this and print it here and instead of doing this I will perform the right shift operator okay so what actually done here here you can see 10 is getting divided now not multiply by 2 to the power 2. so this operation will get performance 10 will get divided by four and which is you know equals to 2. okay so if I run this let me just comment it out so that right shift will execute it near it here you can see two is get printed on the screen Okay so next we have and operator which are logical and and logical here you can see I will just comment it out logical and and bitwise and okay so here let me take one example of integer a which is holding the value 10 and teacher B is there which is holding the value 5. 5. and again integers C is there which holding the value let's suppose 20 okay and I will s out a left in b and a less than C okay I will tell you what I have done here let me just write it out first okay and again I will write one more statement a less than b this time I will write only one and a is then C okay and I will comment this line okay let me check ah yes okay so at this line line number 25 what we have doing is we are checking that whether a is less than b and a is less than C so what and operator does if the both statements are true it will return true or here in this case if a is less than b a whether a is less than b no it is not less than b so it will return as false false and whether a is less than C yes it is less than C it will return true so what is this operation will return as false because both are not true and operator requires both the operation to be true if the a if I write here a is greater than b then it will perform that this is this will get true and true and true return true okay but here in our case okay so again in this line we are getting that checking a is less than b again we are getting false here and we are getting the second line as true this operation also return as false okay let me run this and you will see what I have done you see false and false will get printed on this console okay so likewise The Logical and in between and works okay so let's move ahead towards another operator which is called as assignment operator okay so let me just comment it out and in line I will write to that assignment Ops okay so to explain this let me just take one integer a which I will again assign it as random randomly 10. B which way I will assign it as 20 and I will write a plus is equals to 4. okay I will tell you what I am doing here B minus is equals to 4. and I will just print out a and I will just print out B okay so first of all I have assigned value 10 to a f and 20 value to the B and at this line a plus is equals to 4 it what actually happens here is a is equals to A plus 4 this is the operation that happens here okay so what is the value for that it will hold a is equals to what is previous value of a 10 plus 4 so now the value of a is 14 and similarly here the subsection operation will be get performed whether a is equals to A minus sorry our B is there b is equals to B minus 4. which is equivalent to what is the previous value of the B that is 20 and minus 4 20 minus 4 is 16. okay so let me just run this code and you will see 4916 will be get printed on this console okay okay our code is working right 4916 is getting printed on the console okay similarly you can perform here if I write multiplication and here I can again I will perform the same operation but now 20 is multiplied by 4 that is 80 it is it is getting printed on the screen also okay so let me just reverse what I have done here okay so these are the some examples of The Operators that there there that they are there in the Java okay so I will be providing the resource Link in the description box and the box and the link to the GitHub repository also where you can access this code and try some playing with this code okay so thank you guys for watching this video I will see you in the next one okay so welcome back guys to another video of the Java tutorial Series so today we are learning strings in Java so in Java string is basically an object that represents the sequence of character values and array of the characters Works same as that of the Java string for for example we will see in the code part so generally string is in sequence of the characters but in Java string is an object that represents a sequence of the characters and it is present inside the java.lang dot string class is used to create a string of the object so you you could ask me how to create a string object so there are basically two two ways where we can create a object for a string so first way is using the string literal and the second way is using the new keyword okay so string literal is created by using the double quotes Okay so let me just give an idea here itself if I create a new text let me decrease some font size so you can see okay so if I create string s that is equals to let's say welcome okay and if I write this okay let me get it here okay and I will again write same text here that is string now I am changing the object name here okay like previously I write yes now I am writing S1 but here also here also I am giving the same string value okay that is welcome okay so here you can see yes I have created S1 I have created and okay and I will create another one let me create it first and I will name it as S2 now object name is S2 but the value here also I have given this same value okay I have created three object of the string ss1 and S2 and but the values which are assigned to those objects are same so inside Java what Java interprets it as this hip memory is there and inside hip memory string constant pull is there and inside that all those strings which are constant are kept here and one stack is there which maintains an Al and it creates one link and it's assigned that value okay so here you can see I have created three object as S1 and S2 and but this value is same and which are constant okay so that string is added inside the constant pull welcome is added and S1 and H2 which are having the same value is getting mapped with the with that value okay I hope you guys are getting so here it doesn't creates a new instance okay and this is this is where it makes the Java program more efficient because new objects are created if it is already exist in the constant Port okay so another way is by using the new keyword okay in such cases jvm will create a new string object in normal that is non pull hip memory and the literal welcome will be placed in the string Constable pool the variable s will refer to the object in the hip and nonmem nonpull okay so what I mean I will show in inside the code section so Java class methods is there I will show you that later first I will let me show you how the string actually works in Java okay so let me create one class name not strings Java okay and let me increase the font size okay and inside this I will just get my main method Okay so as we have discussed the first way first you know first definition I will write one array of characters then we'll name it as ch and I will assign value it like this let's suppose hello H is there h e again okay IntelliJ showing my error because I have used those double braces okay let me remove this okay h e l I'm sorry HL Ln oh okay so I have created one array of characters okay I know you guys don't know what is array we will be covering that part also in our upcoming videos so let me create one string okay string yes which is equals to new string and I'll assign the way pass the value to it as CH okay and simply I will print s on the console and now if I click on run here you can see Hello is getting printed okay so first we have characters means single single characters are there like h e l l o and what string does it it can't get all those characters and form one word and store inside the uh object s okay so let's see another example let me just comment it out and I will show you another example where wait a minute I require this line for the another example I will just copy and paste it here okay and I will create another string that is S2 news new string CH okay and I will create another string S3 and I will assign it the value string but now I am giving the hardcoded value that is let's suppose example okay example so now I'm trying to print that S2 and I again I will print that object S3 okay and if I click on run now what will happen see he see here hello is getting printed that is a it will concat all those characters all the strings character array and store it inside the object S2 and inside object S3 example is this string which is get stored inside it okay enough talking about the example so in Java there are multiple methods so here you can see a whole bunch of list is here of around 28 methods are there which are declared inside the string class in Java so I will give you one link where you can see the implementation of part of this all these methods I want you to try all playing with this all methods for but first of all let me show you some important ones okay I will show you some important one which are required in our Java code okay so let me just comment it out and here Okay so I'll be giving you the example of string two lower case there is Method inside the string class that's name two lowercase this method Returns the string in the lower case letters okay in another word it converts all this character of the string into the lower case okay let me give you an example so that you can understand better okay so if I create one string name F1 I mean I will assign it value as let's suppose okay let me give you the straightforward method S1 is equals to let's suppose I have created h and let my caps lock hey hello world is there okay so here you can see I have created one S1 object and I have stored a string hello world inside it okay so if I try to print that string okay okay let me out okay so if I want to print this I will simply Scout the S1 okay that is Simpson dot out Dot println okay so again if I try to print S1 but I will do some modification okay so I will write S1 dot so you can see a whole bunch of methods which are implemented inside the Java are displayed here so we want two lowercase two lowercases here and you will simply put this and if now if I click on run let's see see you can here you can see hello world is the original thing where all the all the alphabets are in capital format okay and if I apply the two lowercase method over it string and then it will convert all those alphabets into the lowercase format and it will print to the con print on the console okay similarly all those methods which are implemented in inside the string class are over here you can go on that website and check it out similarly to lowercase is there and two uppercases there which will convert all those uh strings and alphabet into the uppercases format if if there are any in the in your string similarly trim is there index office there and one more we can use his carat and in length it Returns the string length this is also important method with which come into picture when we are using Java arrays okay we will discuss that and when we try to learn Java arrays okay so enough about enough talking about the strings I hope you get the idea about string what are the string in Java okay thank you for watching this video I will see you in the next one hello and welcome back guys to the another video of the Java tutorial series wherein in this video we will be learning about Java if else statements so today onwards we are starting about the conditional statements in uh Java so conditional statements are nothing but the statements which which get executed if the certain condition match okay so there are basically four types in inside it if statement if else statement if else if ladder and nested if still statements we'll be seeing one after one each other so okay so first Java if is there so in if we declare if and inside if we write some condition if that condition becomes true the code inside that Curly braces will get executed okay so flow of this if statement is run like this so our code gets started and in the first condition gets checked if the condition is false then it if it it will not execute that part of the code and it will get execution is get towards that below that Curly basis and if that condition gets true if code is will get executed okay so uh we will be seeing the code implementation also let us first uh try to understand theoretically what is what are those forced types are actually mean okay so Java if else is there any else there is else condition is also there so if the condition of the if statement is not true that is its false then else condition will be get executed like here if you can see condition if the condition is true the code the code will get executed inside the if if if block and if the condition is false then the code inside the else Port is getting executed here also you can see uh the program flow comes here condition is getting checked if the condition is false then else code will be get executed and execution get uh successfully done and if the condition is getting true then if code is getting executed okay so next comes Java if else if ladder so it's like a ladder okay so here you can see if condition is there if this condition is not getting executed then if else else if is there so condition another condition is getting checked here okay so if condition 2 is true then this part of the lcf is getting executed so again else one one more else if is there that is condition three is there if that condition 3 is getting true then this block will be get executed okay and you can declare as many uh else if condition you want and at the last I have declared one else condition that is you all know that will get executed if all those if and else if are generated as false statements okay so let us try to understand why this tray diagram so condition one is there if it is false condition two uh two will be get checked if again it is false condition uh like that and number of condition that you declare inside the code will get checked and any of these any one of this if it is get true then that corresponding statements or the block of the code will be get executed and the program flow will be get uh continued okay if all those else if and else if get false then the else part will be con executed okay so now nested if uh is another concept inside Java so if condition is there inside if condition another if condition is there so we are checking if inside if okay so let us understand by this small exam or tree diagram is here so first condition is check if that condition is true if good if code is executed okay and inside that another condition is there that is another if if block is there if that condition true if code is there if that condition is gets getting false then a program code is altered to an outs outside if okay so this is the four types of the Java if else so let's move on move on to the IDE and try to implement each one of this okay so here I have created if else name if else class Java class Java file is there okay uh inside which I have implemented all those four types and I will try to explain you each one of it okay so I will comment it out okay uh let's try to understand a normal if statement is there okay I have declared an integer name age uh and assign it to Value as 20 okay and and we are checking the age okay if age is greater than 18 so this is the part which here you can see the condition part is there so this is the condition that is being checked and if this condition returns true then this block of code will be executed otherwise the book of code which is written outside this that is line number 12 which is getting which will be get executed if that condition getting false okay if that condition gets true this will get executed if not the normal flow of the code will be get executed okay so here we are here we have stored age is 20 and 20 is greater than 18 so this is this will be evaluated as true and this block of code will make it executed and the age is greater than 18 will be get printed on the console let's see if it gets printed so here you can see age is greater than 18 is getting printed on our console okay so this is the normal if statement I will just comment it out and now let's talk about the if else okay uh this is a code that I have written okay if else so here I have created one variable called year I have I have assigned value to it uh 2020 and if I I have to check whether that year is a leap year or a common year okay so for checking the leaf here here we are taking here mod 4 is equal to equals to 0 and year mod 100 is not equals to zero and this whole uh guys you can you can see this whole let me highlight and this whole condition is one condition and it it is being checked with the another condition that is year mod of 400 is equal to equal to zero okay and this is the or operator which gets evaluated at true if any one of the condition of these two is evaluated as true okay so let's suppose uh this this block of code is evaluated as true and this evaluated as false then overall if statement will be evaluated as true okay so so this if this is true then it will print the leap year and if this is not true else part will will be get executed as common here so let's run it and see so here you can see it is telling that you know year 2020 is a leap year that's right okay so moving next we will be seeing if else if ladder okay so let me just comment it out and comment it and comment this okay so here we are check simply checking the grade of the student okay so here is the marks which are obtained by a student inside an examination okay so we are first we are checking whether the marks is less than 50 if if the marks is less than 50 this is simply the student is fail in that examination and if the Mark is greater than 50 and Mark is less than 60 that means uh and we use and operator when and this and operator will be evaluated evaluated as true if the both of the condition are getting true so now if the student Mark says anywhere between 51 to 659 then that student will be great get the grade D okay similarly C grade is there b grade is there and a grade is there and a A plus grade is there and if any if any one of this condition is not getting uh true then else part will be evaluated which is invalid that that means the marks you have that we have entered here is invalid okay so if I click run secret because why it is printing the secret since the marks is 65 which lies between the 61 to 69 that is this block of code okay so that's why C grade is printing on the console okay so this is the normal if else ladder is there and now let's go and check nested if statements okay so I have declared two variables name age and weight and I have assigned to them value as 20 and 80 okay and applying condition on age and weight so first of all I am checking that if the age of the user is greater than or equal to 18 it's okay so in that case uh our age is 20 which is greater than equals to which is greater than uh 18. and again we are checking one one if statement where we are checking weight is greater than 50 and in our case our weight is 80 which is greater than 50 so this statement will be executed and printed on the console let me check so here you can see you are eligible to donate blood okay so this is the concept behind if else in Java so I hope you have get some idea about if else statements in Java hello guys welcome back to the Java tutorial Series so today we are learning Java switch so what is Javascript Java switch statement execute one statement for the multiple conditions okay it's it's you can assume it's like a if else ladder okay statement the statement works for the with byte short integer long enum types and after the Java 7 now you can use string in the switch statement also talking about in other words you can say the switch statement attach the quality of the variable against the multiple values so there are a few points that you need to remember about the switch statement that we will be talking about talking when we get to code about the switch statement okay so let's first see what is the syntax how the switch statement syntax is there okay so first of all you have to write switch and inside circular brackets you can write your expression and then inside that multiple cases are there there are a number of cases you can Define and there is a value is there which is being checked if that value is satisfied then the code inside that case will be get executed and break break is there which is optional you can write or you cannot write you it depends upon you okay and one default statement is there which get executed if all the cases are not matched means uh if let's suppose you have write five cases here okay and none of the values get executed for that cases okay then default case should be executed okay so let's understand how the exactly the switch statement flow it is there okay so first of all expression is there which you write and multiple cases here as you can see one two three and uh n number of cases are there and if that case is match then statement one is processed and the and the break break statement is there okay this is optional you can write or you can also not write if you want and one defense default is there if none of the cases is matched then it will get executed okay so let's go in our IDE and let's see how it get implemented okay so I'm here in my IDE let me just create one more Java class so I will name it as switch because we are learning switch right okay just let me increase the font size for you guys and let me get my main method here okay so first thing first I'll give you some basic example okay so let's suppose I have declared an integer variable call number and I will assign it the value 20. okay and after that I will Define one switch okay so for Define I will let switch and inside bracket I will give it the way variable number okay pass the variable number and under that inside switch I can define a number of cases as you can see I have as you have till told you okay so I will Define one case where the value of the number should be 10 okay so in that case I will just print 10 okay and let me just create one more you know one more case so that you can you guys can understand it more more in better way okay let me just get out of this case okay and I will Define another case where value should be 20 and I will again south 20 okay and I will write the break statement okay so here you can Define n number of cases whatever you want okay and after that don't don't forget to write the default case okay so my default default case should be let's suppose I'm writing not 10 or 20. okay so here I am telling that value of the number is not 10 or 20. okay so that's why the default case is being executed because if the value of k a level of this number variable is 20 then a 20 will be executed if value of the number is not 20 then this will be executed okay so I guess that should run okay let me run this and one more thing guys all those resources and code part you will get in the GitHub repository that uh link to that get GitHub repository is in the description you can access it okay so here you can see 20 is being printed on the console because the weight value of the number variable is 20 and the number switch is number and the case number two is giving executed uh as true because the value of the number is 20 and this line is getting printed and break statement will break the flow of the code okay I means it it will get me out of the switch statement and after this situation switch statement our code is ended okay so let me just give you an another example okay so if I right now see here my value of the number is 30. so what do you think this will default case should be executed right because uh number numbers value is 30 is this is not true this is not true then default case will be in let's see see here not 10 or not or 20 okay so that means uh none of our case being executed as true that's why our default case is executed okay right so I hope you guys have understood the Java switch and try some uh doing some coding questions on Java switch so that you can get the better understanding of the switch and in the upcoming videos I will be talking about the Java Loops okay what are the different types of Loops are there in Java so thank you guys for watching this video I'll meet you in the next one hello guys welcome back to the Java tutorial Series so today we are learning loops in Java so basically there are three types of Loops in Java one is for Loop while loop and do while loop so in this video we are particularly particularly focusing on the for Loop so what is for Loop the Java for Loop is used to iterate a part of the program several times if the number of the iteration is fixed it is recommended to use a for Loop so here is here you can see the pictorial format of the each Loops in Java so here here you can see let me just zoom it out okay the for Loop is the Java for Loop is used to iterate a part of the program several times okay so when we when we have to perform a several tasks that is the same task but at the number of iterations are there then we we can use the for Loop if the number of iteration is fixed then we can use for Loop okay so what is while loop the Java while loop is used to iterate a part of the program several times if the number of the iteration is not fixed so what is the main difference between the for Loop and while loop when we when we when we have to use it is the only difference between them is when the number of iterations are fixed we can use for Loop or when the number of iteration is not fixed we can use while loop okay so what is do while loop the Java do while loop is used to iterate a part of the program several times use it it use if the number of the iteration is not fixed and you must have to execute the for loop at least once so it just uh means you can say that say it as a incremental part of the while loop where you where you have to perform that increment incrementing task at least once okay and then uh when the loop it reads next time the while condition is checked okay so we'll be discussing about it in the particular upcoming videos so for this video I will be discussing about the for Loop only okay so let's just get started uh so here you can see the Syntax for the for Loop for this for is the keyword for declares the for Loop and three parameters are there initialization is there condition is there and increment decrement is there okay so we'll be seeing uh in detail when we are code this for Loop okay so next comes the how the flow of the for Loop is maintained inside a code okay so first of all initialization is done then the condition is checked if that condition becomes false the loop is terminated and exam control flow of the code is resumed to the end of the for Loop okay and if the condition match then the statement inside that for Loop gets executed and increment decrement is there according to that it increments or decrements the variable counter variable and it again go for the checking the condition okay so enough talking about the for Loop let's jump into your IDE and call it out okay so I am in my IDE just let me create one class name for Loop okay the class name should be start with Capital One for Loop okay let me just increase the font size so that you guys can see main method should be there okay so first of all I will take only just simple program then we will do one more program okay so at first let me just declare one form okay so I will declare it for int I is equals to 1 I is less than equals to 10 and each time we are doing I plus plus okay don't worry I will I will be explaining you these things what you have written here okay and I have been painting I okay so here at line number three you you can see I have told you that there are three parameters are there inside of for Loop so first parameter integer I is equals to 1 is the initialization oh so what do you mean by initialization it is the initial condition which is executed when this Loop starts here we can initialize the variable or we can use the an already initialized variable okay it's up to you okay and then comes this part which is condition okay the second condition is second is it Con condition which is executed each time to test the condition of the loop it continues execution until the condition is false it must return the Boolean value either true or false it is option optional condition okay and this is the part third part that is increment or decrement increment means plus plus decrement means minus minus okay it increments or decrements the variable value and it it is an optional condition okay and the statement means this part is title for Loop that that code of the part that we have to execute okay so that is pretty much about the for Loop let me just run this uh so yes here you can see let me just increase the huh so our condition start from I is equals to 1 and until I is less than equals to 10 we are moving our iterating our for Loop okay so at first system.out.print value of I should be printed okay so when we are coming for the first time the value of I is 1 so that is going to print it on the screen and due to this print Ln new line the execution goes to new line and after that I plus plus is there so we will when the for Loops goes again for checking then then that that time is value is 2 okay so I is so now is value is 2 so 2 is less than equals to 10 is it right then we again come inside the for Loop 2 is going to print it this in this way again again and again the for Loop runs and at last when the value is 10 less than 10 yes when we print 10 and when we do I plus plus the I will value become 11 and when we check I 11 is less than equals to 10 so 11 is not less than equals to 10 so Loop terminates and we exit out of the loop and program is ended okay so that's how 1 to 10 is going to print it on the console okay so let me just take another example that is very often used example so let me just comment it out so what we have expected to print on the console is this okay we have to print the this let me just create it first for you guys okay airport three four five okay one space should be there after each star okay yes so okay so this is the expected output on the console this is this series of the Stars should be printed okay using the for Loop okay so let's just get started I will declare one for Loop which will go from one two five and each time I will be doing I plus plus that is I will be incrementing the value of I and I need again one more for Loop so here I I am declaring for Loop inside of for Loop that is the nested for Loop okay so I'll be declaring new variable integer J which is equals to 1 and I'll be checking that whether my J is less than equals to I and I'll be doing each time J plus plus okay and inside this I will be printing my star okay here okay my star is going to get printed on the console so this since this is the string I have to put it inside the curly braces and if after the for Loop execution and outer for loop I will just print a new line okay so now if I execute this code I hope this will work yeah this is working fine so only one thing is there we are not getting that space in between each star okay so that that is because of this I am not given the space here so that should be rectified here yeah so here we are getting that pattern one star then two stars and three star four star like that you can print it how how many as many stars you want just to just you have to increase this value of the five then it will get work okay so I hope you guys have learned about the for Loop you guys have got some idea about the for Loop so in upcoming videos we'll be learning about while loop and do while loop and after that I'll be giving one exercise based on the loops and whatever I talk to you till now okay so thank you guys for watching this video bye bye so hello guys welcome back to the another video of the Java tutorial Series so today we are we'll be discussing about while Loops in Java so what are the while Loops while loop is used to iterate a part of the program repeatedly until the specified Boolean condition is true so as soon as the Boolean condition becomes false the loop get automatically stops okay and it is recommended that to use the while loop when we don't know how much iteration we are going to perform in that Loop okay so here you can see the syntax of the while loop while this while is a keyword which is used and the condition is specified inside this circular brackets and uh inside those uh curly braces we will write the code which is which we have to execute inside the while loop okay and after that incrementing decrementing statement should be written so that each time the condition should be checked okay so now this is the flow of while loop so first uh program execution comes and condition is checked whether if the condition is false Loop gets terminated and if the condition is true then statement inside the loop gets executed and again it goes further checking the condition and this Loops will iterate uh time n number of times that we have declared okay so let me just get into my IDE and we can check how while loop is working okay so here I will create another Java class which is name as while loops sorry okay let me increase the font size I will get my main method and okay so first exam first I will take simple example okay so integer let me take integer I is equals to 1 and then while while is the keyword which I will use and inside circular braces I will tell the condition that my ash is less than equals to 10. okay and inside loop uh I will be printing the value of I okay simply and after that I will be incrementing the my value of the I okay so this is the simple while loop where we are checking the whether ice value is less than equals to 10 or not if that value is less than equals to 10 that Loops uh this expression get evaluated at evaluated as true and Loops get executed and system dot out dot println will print the value of I on the console and each time the value of I will be incremented so for the first time when Loop expression gets checked the value of I is 1 here you can see okay so 1 is less than 10 yes it will come inside the loop and it will print the value of I that is 1 and it will after that it will increment the value of I by 1 so when next time the loop get when the expression get checked the value of I is 2 2 is less than 10 yes the it comes out inside the loop and it will print the value of I that is equal to 2 so it will print all this value of I well until the expression it this expression evaluated as true so let me just run this code so that we can get the output so here we can see one two three four five six seven eight nine ten is going to print it and after that Loop is terminated because the value of when after 10 the value of I becomes 11 and 11 is not less than 10 and this expression is evaluated as false and it will terminate the loop okay so let me just comment out this and I will tell you another example which is known as infinite Loop okay so I will declare one while loop and inside that I will write on simply true okay and I will just print in five native Loop okay so here you can see this while loop will never execute a naval terminate because why because the expression inside this tells that it is always true that will that because when when I click on run so here you can see infinite infinitive infinity loop is getting printed on the screen so to exit from this you just have to press Ctrl C so that your code will be get stopped executing and this look at here how many times it is printing in finite in finite Loops okay so this is one example of the infinite Loops in Java so you have to avoid this okay this kind of situation when you are coding so that that is pretty much about while Loops so in our upcoming videos we'll be talking about do while Loops so thank you guys for watching this video and I'll see you in the next one hello welcome back guys to the another video of the Java tutorial Series so today we are learning the do while loop okay so what is do while loop in Java the do while loop is used to iterate a part of the program repeatedly until a specified condition is true if the number of iteration is not fixed and you must have to execute that loop at least once it is recommended that you should use a do while loop okay so it it the Dual Loop is also called as exit exit control Loop in Java so I will tell you whenever when we are going to code it I will tell you why it is called exit code exit control Loop okay so here here you can see the guys syntax do do is the keyword which is used and inside after that we will write the code which we have to execute inside the loop and the update statement should be there and after the ex end of the do block you will write one while and we will specify the condition okay so due to this uh it this is the loop in Java which will execute at least once whether the condition is executed as true or false okay I'll I will tell you exactly what what is it is so when we are going to code okay so first of all let let us check the flow of how why do why do while loop is Works in Java okay so first when the exam flow control flow comes inside this do while loop there is the statement inside it get executed at least once then the condition is check if that condition is true that statement is processed and again it ratio iterative iterative work should be there and if that condition it evaluates at false it will terminate that Loop okay okay so let's just get into our IDE and see how do while loop works okay so I will come here and I will right click here Java class I will create and I will write Loop sorry okay and I will increase some font size so that you guys can see it clearly main method is there so first of all I will take only only one simple do while loop okay uh I will declare one integer I is equals to one and inside again I will declare do while loop and inside do I will just simply print the value of I and after that according to our syntax we have to declare one expression here so my expression is I is less than equals to 10 okay so if I now click on run so here you can see one one one one is getting printed in finatively because I was I'm I have done one little mistake inside my code I have not written I plus plus that is my ielt value is not incrementing in this code that is that's why it gone into an infinite Loop okay let me just terminate this code stop all okay and now if I click on this run button now yeah now it's working fine it will print one two three four five six seven eight nine ten so you would ask me what is the main difference between while and do while because here also we are doing it the same okay so I will explain you by giving one example right so let me just comment it out first and now I will declare again one I variable that is equals to zero and I will declare one do so the statement that I am going to print is wait hello hello is the string that I want to print and each time I'm doing I plus plus okay and the condition that I want to check is whether my I is less than 0 or not so what do you think guys let's check let us check if I run on click but run button okay so hello is going to print it on the screen at least once so you could ask me this this well I is less than zero this this could evaluated as false then why the loop is going to run so guys this is the main difference between a two while and while loop the the statement inside the do will always execute at least once it will execute then it will come and check whether my given expression is true or false so that's why once it it will print hello and in next time it will increment the value of I that is 1 so 1 is less than 0 it is not obviously that's why it is terminating the loop now after painting the hello on the screen okay so I hope you guys have get some idea uh so what is do while loop and what is the main difference between a while and two while loop in Java okay so thank you guys for watching this video so in the upcoming video we will be talking some of the of few except which are left in the conditional statements okay that is break comment and few more are there it's okay so enough talking about this video we will be meeting in the next video okay so thank you bye hello and welcome back guys to the another video of the Java tutorial Series so guys this is the uh I guess last video of the control statements so wherein we will be talking about Java break Java continue and what are Java comments okay so let's just get started okay so what is Java break so Java break is a statement which is used to break a loop or a switch statement it breaks the current flow of the program at specified condition in case of the inner loop it breaks only the inner loop okay so here is a diagrammatic representation here you can see uh one Loop is going on it it is iterating and one condition is defined inside that Loop and if that condition becomes true uh we will declare a break statement there and it will break the flow of the loop and it will terminate that Loop okay and where whenever that condition is evaluated as false the loop will again go and iterate iterate iterate until the specified condition becomes false okay so what is Java continue okay so Java continue statement is used to continue the loop it continues the current flow of the program and skips the remaining code at a specified condition in case of an inner loop it will continue the inner loop only okay so we'll be uh talking in depth when we are going to code this Java continue and at last Java comments are there so what are the documents the Java comments are the statements in a program that are not executed by a compiler and an interpreter so basically there are three types of the Java comments one is single line command multiline comment and documentation command so what is single line comment the single line comment is used to comment only one line so to declare a comment inside Java Java program we will just write two forward slashes are there so when you when you declare two two forward slashes and after that whatever you you will write that will be interpreted interpreted as a comment in Java okay so what is multiline the multiline comment is used to comment a multiple lines of the code so when you when we are you are going to comment out the multiple lines of the code in Java then you can use multiline code multiline comments sorry and third one is documentation command so documentation comment is used to create a documentation API to create documentation API you need to use Java doc tool so we'll be discussing more about documentation uh comments in our upcoming videos when we are writing some code that is a production level code okay so let's code it now it's I will come here inside my IDE and I will create one Java class name break okay and let me just increase the font size and I will tell you and give you one simple example of the break okay and here I am writing one for Loop which will iterate when I is equals to 1 and I is less than equals to 10 and each time my Loop is increment is value is incrementing by 1. okay so inside this sorry guys I'll get I'm getting errors because I forgot to write the main method and I should write all this code inside the main method my bad and inside this for Loop I will declare one if statement and I will write that when I is equals to equals to 5 simply break okay and other than that if I come out of this Loop I will print the value of the eye okay now if I click on run so here you can see one two three four is going to print it on the screen and when the value value of the I is incremented and when the value of the is becomes 5 it will check whether the 5 is less than 10 it yes it come inside the loop and it will check I is equal to equal to 5 yes it will break the loop it will break the for Loop and it will get out of that Loop so this this is the situation where you can use the for Loop inside Java okay okay so we have discussed about break now we will see what is continue in Java okay so let me just copy out this code because I need this okay and add this I will instead of writing break I will write continue okay and I will I will execute the same code okay so here you can see what is going to get printed on the console is one two three four and five is skipped and six seven eight nine ten is printed on the console why so when the value of the is becomes 5 when I is equal to equal to 5 this if condition gets evaluated as true and continue this line number 11 is executed and what will continue will do it will skip that iteration for that Loop it will not execute any of the code after the line number 11 and it will skip that Loop and it will go for the incrementing of the value of the I and iel's value become 6 and 6 is less than 10 and that's why 6A is going to get printed on the console okay so continue is used basically for to skip a particular iteration inside a loop okay so I hope you guys have understood this continue so last topic that we have remaining is Java comments okay so let me just give you some example of the comments so as you can see these are the single line comments okay so here uh comments and I will just explain you okay so this is uh single line comment in Java right now my ID is throwing so much error because this is not a Java code this is just a simple English statement so if I want to comment this out I will just come here and just put two forward slashes and this that this becomes a single line comment inside Java okay so let's suppose we have to declare a multiline comment Okay so I will write like this this is a multi line comment Angel so here two lines are there line number 17 and line number 18 are there that we have to comment so in that case we will write one forward slash followed by one asterisk and after when the at line number 18th end will write asterisk and one forward slash so guys this is the example of the multiline comments inside Java so now it when we talk about the documentation comment uh there are a lot more example of the document coming documentation comments are there that is at author add code at version tag so these are some tags which are used in a multiline command we will be discussing it in our upcoming videos when we saw uh some high level hard level uh Java programs and in that we will create a documentation comments okay so that is it for this video guys and now we have officially uh discussed all the topics which are comes under the control statements in Java so in the next class onward we will be starting our oops Concepts in Java and one more thing guys I will be giving you the exercise number two in upcoming videos depending uh it the question that are asked in this exercise is whatever I well I taught you to form till now then that on those topics that is for Loop while loop do while Loops all these topics requires as a prerequisite to solve that exercise so I hope guys I hope you guys will uh solve that exercise and meet you soon thank you hello and welcome back to the another video of the Java tutorial series wherein today we will be covering uh one exercise number two uh so till now I have taught you Loops in Java and some basic concepts of java So based on that uh I have created five questions here here you can see and I expect you that you should give it a try to this question and try solving this question and post your comments uh answers in comment section okay so let's discuss one by one uh questions okay so first question is write a program to calculate the sum of first 10 natural numbers so you have to create one Loop wherein you will be calculating the sum of first 10 natural numbers okay so for the second one write a program that prompts the user to the to input a positive integers okay so first of all you have to take a user input user input from the user where a positive number and it it should then print the multiplication table of that number and let's suppose I have a given input as a 2 then it will show me a it the program should show me the whole table of the two okay and then third one is the writer program to find a factorial value of any number enter through the keyboard means you have to take input from the user and whatever the input in the user has given based on that you have to out give the output to the user as a factorial factorial value of that number okay so fourth number is write a program that prompts a user to an input an integer and then output the number with the digits reversed okay so what does it mean actually here you can see example one two three four five is there and the output which is you should given give to the user is five four three two one means just a reverse of that number which is given by the user okay so fifth one is write a program to print the Fibonacci series of n terms where n is the input by the user okay so N means any number let's suppose I have given 5 as a input so so your program should return me the first five elements of the Fibonacci series Fibonacci series is nothing but the addition of the two numbers okay so first series start from 0 and 1 and the the next next third term should be addition of the past two terms okay so past two terms are 0 and 1 0 plus 1 is 1 so now now for the fourth term we can add the past two terms one plus one is two and then again for the fifth term addition of the third and fourth term two plus one is three like that the series go on okay so I hope you try this questions and in upcoming videos we will see the solution to the questions before that you should try this question so thank you for watching this video hello and welcome back to the another video of the Java tutorial Series so today we are looking the solution to the exercise number two that I have given in the previous videos it's okay so let's just get started so first of all uh I'll be covering first three questions in this video and other two other two questions will be covered in the upcoming videos because the video link should it should be increased if I cover all those questions in one video okay okay so let's just get started so what is our first problem uh write a program to calculate the sum of first 10 natural numbers okay so I hope you know what is natural numbers natural numbers uh start from one okay so let me get just get into my IDE and and inside my SRC folder I will create one Java class and I will name it as exercise to Solutions okay so let me just increase the font size for you guys okay and inside this I will write my main method okay okay so I have to print the sum of the natural number first 10 natural number okay so for that I will be requiring one variable which will hold my sum okay and again one for Loop is there int I is equals to 1. so I hope you are getting why I have written one here because the natural uh natural number starts from 1 so that's why I have written here I is less than equals to 10 less than equals is there because we have to iterate for the value 10 also okay and since our value as value is 1 also there and each time I will be incrementing the value of I okay so inside my for loop I will be doing here sum plus is equals to I so at this point uh I am updating my sums value okay so what does it means plus is equals to is nothing but this let me just make it simple for you so that you can understand better okay sum plus I so at line number six and line number five are the same it just uh we write a Sim at a simpler manner okay so I like that first one okay uh so here we are just updating the sums value with the previous sums Value Plus current I is value okay and after my Loop I will just print my value of the sum that is the sum of the first 10 natural numbers okay now let me just concat with some variable okay so I hope this will work let me just run this I hope you guys are liking this tutorial series okay so here the here you can see the sum is 55 because when you add 1 plus 2 plus 3 plus 4 plus 5 up to 10 the sum will be 55 okay so that is about the first question so let's just move on to the second question what is write a program that prompts the user to give a positive integer and it should print the multiplication table of that number okay so let me go inside my IDE and I will comment this okay so let me just give it a comment over here so that you guys can understand first okay first and I will comment this also and inside below this I will create another commander in a second so this is the solution for the second one so here I require one input from the user so that's why I have to create a object of the scanner class I hope you guys know the scanner class system sorry system.in okay so here you can see I have not imported uh the scanner class so that is the good thing about the IntelliJ IDE whichever class you use here it will automatically import that class inside the import statement at line number one UK you guys can see okay and uh I will require one a variable called num which is of type integer and then in the next line I will just print enter a positive number because I want a user to enter a number enter any positive number okay and below this uh I will simply write num is equal to SC dot next okay so now uh when I get input from the user I just have to generate the multiplication table of that number okay so for that I will be printing oops let me just create ah yes let me just write multiplication multiplication table of num okay So Below this I will be generating the multiplication table for that number I mean user icon so I will be using for Loop for INT I is equals to 1 I is less than equals to 10 because we have to generate uh for example for two stable we have to generate two two tens are twenty after that we have to send it you can generate how much you want okay and inside this I will be printing the num Plus one sign which represent multiplication and I will again concatenate it with value of I and then again I will concatenate it with equal to sine and again I will write one operation over here which is my num multiplied by I okay so I hope you guys are getting this slide number 20 what I have done here I have I have first the print the number that is the input given input by the user so at this line I will just show you what will be uh so if the user has given input S2 so at this point two will get printed on the screen and then multiplication sign will get printed and what is whatever the value of the I will be there let's suppose for the first time if the loop is incrementing then the value of the I is 1. and again one equals to sign will be there and after equal to sine the operation there is no mean to two num into I that is 2 into 1 is 2 will be get printed likewise the whole table of the two will get printed on the console each time uh the loop get increment is well you get incremented by 1 up to 10 okay so let me just run this I hope this will work enter a positive number let's suppose if I enter 2 so here you can see two and the two two to the four two two three here two three the six likewise hold the two stable get printed on the screen okay okay sorry for the interruption guys uh so our third question is write a program to find the factorial value of a number entered by the uh enter through the keyboard okay so you have to create factorial of the number okay not create we have to generate okay so I will just comment this out and I will write another comment as third third means the third solution for the third question okay so we have to generate a factorial of that number okay so what is factorial for factor is nothing but the here I can give you one example if I want to find the Fifth Fifth five factorial then it will be equals to the it will be equals to the 5 into 4 into 3 into 2 into 1 okay so to find this uh I again I require one input from the user so I will just comment this comment of this so that I can receive input from the user and now I require one variable name as int num which will hold that number actually and again I will require another variable name as fact its current value is 1. okay and I will just print it out enter number and here I will just right sorry num is equals to SC dot next int okay and I will write one for Loop and whose value will be uh I is equals to one each time I will be doing I let's checking I is less than equals to num and I am doing I plus plus okay and inside this I will be doing fact multiplied is equals to I so I hope you guys are getting this at this point we are just getting the value of the I and it multiplying it with the previous value of the fact that is the fact variable and the fact variable uh initial value is 1 and when this Loop kill term gets terminated the value inside fact distort it is the factorial of that number okay so now I will simply print let me just write fact to real it's and I will contact it with fact okay so I hope it this will run if I click on execute it is it it was asking for a number let's suppose I write five and factorial is 120 because 5 into 4 into 3 into 2 into 1 is 120. so I hope you you guys can solve these questions first second and third and in our upcoming videos we will be looking into the solution for the fourth and fifth question okay thank you guys for watching this video hello and welcome back to the another video of the ciao tutorial Series so till now we have covered exercise two part one and this is video for the exercise two part two wherein we will be covering the solution for the two programs that's the fourth and fifth one so let's get started uh what is the problem statement write a program that prompts the user to an import and integer and then outputs the number with the digits reverse so basically uh one string we have to provide to the user and we have to reverse it okay for example uh if the string is one two three four five then the output should be a five four three to one okay so let me just open my IDE and this is the previous video we have seen first second and third question solution now I will continue here for the fourth solution so we required to take input from the user uh that I have that's why I have imported the scanner class okay and now I just required one number because we have two reverse and numbers okay so I have declared a variable called number and another variable which will hold day number which which is a reversed one okay now I will print I will accept one input from the user enter the number then here I will write number is equals to uh let me just see what is my object name for Scandal yes SC Dot next int okay so we have accepted one input from the user and store it inside the variable called number now I have I will require one another variable called camps and one variable name remainder and I will assign the value of 0 to it okay so here I will be using while loop while my temp is greater than zero okay and oops I forgot to assign it due to the temp so tell me you will hold the value of the number the because we are in this line number 48 44 we are assigning the numbers value to the 10 because we are we are not changing or modifying the actual number because we required that number to check whether that uh the original number or the reverse number are the same or not that's why I have to copied that number inside the temp variable okay so here we will write remainder is equals to temp mod 10. and after that don't worry I will explain you what I have done here just watch these are into sorry 10 plus Commander okay and again temp is equals to temp divided equals to 10 and in line number 54 let me just increase the font size okay and line number 54 is same as this so don't get confused what I have done here temp is equals to wait a minute I will just comment it out 10 is equals to 10 divided by 10. so and that's just a shortcut to write this whole statement okay uh this is what I'm doing in the while loop and after that I'll print and check not it we just have to reverse okay reviews oh number holes in our original number eggs and our reverse number is inside the reverse temperature variable okay viewers okay so this is the string this is the actual okay so here you can see uh let's suppose I have uh let me explain you what I have done here inside the while loop okay so let's suppose our input is one two three four five okay and our 10th will hold the number 's value that is the actual number value okay and uh whether my time is criticism 0 whether this is greater than zero whether this is greater than zero yes it will come inside inside the loop and remainder is equals to Temp mod 10. mod 10 okay so here the remainder will get stored when that is the last digit mod 10 the last digit will get stored inside the remainder okay and now reverse value here initially reverse value is zero so here 0 into 10 that is 0 plus 5 so this will result 5 and in first iteration reverse value will get stored as 5 and and here we have just divided dividing our temp number by 10 means one two three four five divided by ten which is equals to one two three four and again we are going to check for the loop and again and this time we will be checking whether the one two three four is greater than 0 yes it will come inside the loop and it will by mod 10 we will we will be getting the last digit of this number that is 4 and inside uh reverse then now the reverse value previously was 5 5 into what is an uh 10 5 into 10 is 50. plus what is the new remainder's value is 4 plus 4 now this is this is equals to 54. Okay so this is 54 and now we again we will divide by 10 12 by 10 so now the times value is 1 2 3 okay so this how this is how so while loop will run and one point will came where the tenth value will be zero and where 0 is greater than 0 will be get evaluated as false and will get out of this Loop and we will just print the original number and the reverse number okay so let me just run this wait by the way if you guys are liking this series do comment and like and share okay so the number I will give input as one two three four five and that's let's see here you can see reverse of one two three four five is okay just let me give one space over here five four three two one okay so if you guys don't know how the loop is running then please do watch the loop video that I have covered uh each and every Loop which is there in the Java and if you want to see how this is working then you can put one debug pointer over here not here wait here and you can just debug this okay and wait allow excess okay so my debug pointer is here I will click on here okay scanner class I will take in the console I will input the number one two three four five okay now I will go in the debugger now you can see number value is one two three four five which is getting stored inside it uh now again if I click remainder it's zero and see it is violating as true because one two three four five is greater than zero okay it will come inside the loop and uh it will do one two three four five more ten and the remainder value will get in stored is zero and here you can see uh now after executing the 40 48 line the remainder value will getting stored as five okay because one two three four five mod ten is equals to five okay so what is the reverse value initially 0 0 into 10 0 plus 5 plus 5 is equal to five now if if I click here here you can see reverse value will be updated as 5 and the better will S5 and after doing this now the is eliminated from that original temp number because if I do one two three four five divided by 10 it it gives me one two three four okay uh like this you you can debug this debugger is best when you don't know how the loops are working internally how the flow flow of the code is going okay so you can use this feature of debugging okay so that that is about program number four let let's go into the program number five okay so what is program number five write a program to print the Fibonacci series of n terms where n is the import by the user okay so I hope you know what is Fibonacci series if no let me just comment it out and I will explain okay so here we are I'm commenting out this as fifth solution okay so Fibonacci series is nothing but uh let me just comment it out and I will show you Fibonacci series start from the uh zero and it goes like 0 1 1 2 like that because what is the formula for the Fibonacci series is nothing but the uh the place where the number is is a p addition of the previous two numbers okay this uh series start from zero and one the third number will determine as the addition of the previous two numbers okay so what is 0 plus 1 is 1 and now for this position we we have to add its previous two numbers okay what is one plus one that is equal to two now likewise uh series goes on okay so we are we have to print the series here okay so I again I am required one variable number okay to hold the number of terms which is given by the user and I will again required one variable called as first term and I will assign that 0 because the series starts from 0 okay and the second term of the series is one and that is going to hold here and the third down okay now let me just give it okay third okay now I will just print one line where we require is telling the user to put one number enter the number of terms stop sorry you want in the series okay and over here I will be doing a c dot next in sorry I see dot next in okay now after getting input from the user I will just print the first two number of the series because those are fixed those will never change because series start from zero and one as we know okay and after this I will give one space between two numbers and again again I will concatenate it with second term now I will be running one for Loop Square int I is equals to 3 by this time uh I hope you guys are getting oh I have wrote three over there because the first two terms are fixed and uh I don't want my Loop to run from 0 or 1 because first and second terms are fixed okay so that's why I am learning running my loop from third position and my eyes value is less than equals to the numbers value each time I am doing I plus plus okay so over here I will be assigning the third term is equals to the addition of the first term and the second term okay and I will be printing third term and after that I will be giving one space so that the next next time I will be printing the uh another term so that one extra space would be there between each term okay so here I don't require Ln because I don't want the series to be printed in the straight line I will I want the present to print the series in the one line itself okay so over here I will be assigning the first term value as the second term and the second term value should be third okay so here you can see uh first term and second terms are fixed for the first first time when we are iterating our Loop that is zero and one third term value will be a 0 plus 1 is 1 we will print the one as third term and we will update the value of the first step to the second term that is the second terms value is one and and the second term value is the third term that is one so that next time if we iterate this Loop that is one plus one is true two okay and I guess this is pretty much about the fifth question let me just stop the run it okay okay now enter the number of series that you want okay so let me just get the first 10 numbers of the series so over here you can see the first 10 number of the series is zero one uh this is not 11 uh I have done one mistake over here I have to print one extra space over here so that it will distinguish between this one and one okay let me just again run this okay so over here you can see zero one one two three five eight thirteen Twenty One thirty four and then these are the ten numbers of the first first 10 numbers of the Fibonacci series okay so for this problem also uh you can put one debug pointer over here and uh right click and click on the debug okay it will run in the debug board where you can uh see how the loops are working internally okay so that this is pretty much about the exercise too I hope you guys have give it a try to solve this question and I will see you in the next one thank you hello and welcome back to the another video of the JavaScript Java tutorial series uh so I guess this is the right time to begin our project our project number one is a simple banking application okay so till now we have covered only the loops uh some basic basic concepts of the Java and we are not right now uh Deep dive into the oops concept and that will be doing after this project once we complete this project so this project is simply a console based project uh so no GUI interaction will be there in this project uh once we move into the advanced section of the Java where we'll be seeing some Java applets or swing there we can convert this project into the GUI based project okay so for till now uh I will be doing all this stuffs inside the console okay so for this I have plan what I have plans I will write down the points here over here so first we will display a one welcome welcome message to the user okay welcome message to user okay so that is how the first first goal okay and okay and then let me just get here okay for second number uh I can will be looking into the give me a we are giving five options to the user okay so first option will be uh something known as deposit where user can deposit the money inside this bank account okay and then after that the third option second option will be something known as withdraw okay where user can withdraw the money from his account okay then the third uh feature we will be carrying is get previous trans transactions okay so here in this feature uh user will uh get to know what what is this previous transactions what you have done in the past transaction okay and uh again one more feature is there that is not not a feature it it basically uh menu which shows to the user okay so here we are showing the menu to the user according to that by seeing that when new user will give import to our program and programs will behave according to that input okay show when today is it okay and uh at last we will execute execute our code okay so these are some steps that we will be following uh following inside this project okay at first user came and see the welcome message okay and then based on the user input we'll be performing some functions okay that is deposit withdraw that previous transaction show the menu and execute our code okay so I hope you understand the only of the project and in our upcoming videos we will be seeing into the these one one by one implementing this functionality in our projects and at last as a sixth point we will execute our code okay so thank you for watching this video and I will see in the next one hello and welcome back to the another bit of the Java tutorial Series so today we will be starting our first project for project Number One banking application so so in this video I will be discussing about the setup about this project and we will be covering up the first functionality of the project that is the deposit okay so let me just get into into my IDE and I will uh creating the new class name as banking application oops sorry banking application okay and let me increase the font size yes and I will include my public static wall Main okay and inside main uh this project required input from the user so that's why I have to import the scanner class also and I will be using this new keyword scanner system dot in so okay basic stuff now I know we have the not covered started oops concept so that's why you will at some point you will not get some concept so bear with me I will be telling you what those concepts are okay so this is pretty much about the setup okay and now since we are doing all this uh let me show you all this deposit with objectives and action show menu and execute our code all this functionality in a one place so I guess this is the right time to introduce you with the oops concept known as method okay so I will oops of method and class okay so I will create another class known as the banking uh bank accounts which is more appropriate I guess AWC bank account okay okay so this is nothing but I have created one another class name as bank account where I will be covering all those functionality in inside this class and we will create one object of this blank bank account class inside this banking application class okay oops I have written this class inside class that is okay now it's okay okay so this is one class our public class and inside which our main method is there and this is another class where we'll be covering all these functionalities which are required in the uh project okay so inside this uh I will show you how this class and object steps are created so bear with me and for first uh functionality of our project is deposit so we will be covering that first okay for so you you so you are pretty much aware about this for depositing the value uh something money inside our account we we need one variable which is known as balanced because we are updating that balance after deposit occurs inside our account okay and we will require another variable normal name as previous transaction which will hold the value value and the information about the transaction that happened in inside past recently okay so I will be creating those two variables name as balance and another one as previous transaction okay and now I will create one method uh so this method doesn't return anything so that's why I have written void uh I know you are not getting some concept what is wired what is ain't okay not in in you know what that is data type and void and my method name is deposit okay and my method is going to accept one way one parameter that is amount okay amount so method is nothing but one particular instruction of the lines of codes which will execute uh which will you will require again and again for the X equation and then those setup instruction you are right inside of one method and you will call that method again and again to perform that task okay so we will be covering in depth about the methods what what are their types in the Ops concepts for but for now uh you know you know what is methods okay uh we will be creating one method known as deposit and inside that method I will be writing now uh if I want to deposit my money I have to check uh whether my amount that is uh given by the user and this is the uh parameters that this method will be accepting this method will accept amount that uh which is given by the user to deposit inside that bank account okay so I will be checking whether my amount is not equals to zero okay so this uh if the user user inputs a given input as zero so that doesn't make sense because 0 cannot be added inside the bank account okay that doesn't make any sense so we are checking on base basically base condition over here whether my amount amount which is a given input by the user should not be equals to the zero okay if it is not equal to 0 this uh if condition is evaluated as true and inside that uh I will update my balance okay so my I will tell balance is equal to Plus amount okay I will update my balance variable and I will also updated my previous transaction variable as amount okay and so that tells that my previous transaction which done by the user is the amount that means the deposit through the bank account okay so this is pretty much about this and okay also in the upcoming videos we will be covering the withdraw withdraw functionality bitter functionality and the get previous transaction and the show manufactuality okay so thank you for watching this video and I will see you in the next one foreign banking application and this is the third video I guess of the series of the project okay so in this video we will be discussing about the functionality which is withdraw and the get previous transaction so we will be implementing the two methods so for the one method is for the Vedra and one method is for the get previous transactions okay so I hope you have watched the previous videos where we will be implemented about deposit function method and now in this video we'll be covering our withdraw and get previous transaction functionality okay so okay before we get in code think about it uh whenever I want to withdraw some money for my account what changes and first of all what I have required uh as the input to this method okay so let's think about it so for this I will be requiring one amount that is the amount of money that I want to withdraw from my account so the amount is the parameter which will be passing through the withdrawal functions and again one base condition should be there okay so think about it when what what will be the best condition again the same base condition uh like we have done for the deposit method that is amount should not be equal to the zero because deposit depositing the zero rupees or the zero dollars from an account doesn't make any sense okay so we'll be implementing that also and I guess this is a bit pretty much stuff that we have we want to do inside the withdrawal function okay so let's just get and implement this withdraw method okay since our method is doesn't returning anything that's why the return type should be avoid uh void void is the return type there are many different types such as int uh care strings are there so method is doesn't returning anything it it is just performing some basic math calculation and it will returning some value to the user okay not value it is performing some task okay so withdraw I will name this as withdraw and as we have discussed it will accept one parameter name as amount amount of money that we have to withdraw from our account okay and again one of the base condition should be base condition should be there that my amount should not be equals to the zero if it is equal to zero that doesn't make any sense okay and inside this uh I will update my balance because after we're drawing some money my when that amount that much amount of money should be deducted from a balance that for my account balance okay so balance minus amount okay and after that I I also have to update my previous transaction as amount okay and minus amount okay so I guess this is pretty much that we have to do inside the withdrawal functionality and after that we will be performing another functionality that is get previous transaction so this I have writing the previous generation previous transaction we have to implement that method inside this class name as bank account okay and so since previous get previous transaction it doesn't uh return anything so that's why I will write void as the return type and I will write get VBS transaction okay wait guys okay so sorry for the introduction guys okay so where we are avoid get previous transaction okay so this method uh doesn't require any parameters and it doesn't return anything okay so inside this I will write one if condition if my previous transaction value is greater than zero okay when the value will be will have the present previous induction will be greater than uh zero when we have done any deposit uh in our account okay so in that case I will print deposited and I will concat it with previous interactions value okay and uh again one else if condition should be there to check as if my the value of the previous transaction it's less than zero in that case when we draw uh means one withdrawal should be there for my account so in that case I will write sorry withdrawn let me drawn the amount should be there and one thing I will do here is math Dot abstract okay and I will pass it the value of the previous transaction so you'll ask me what we have done here what is this math dot abstract and we are passing uh three ways from the action value to it okay so this is the in inbuilt class inside the Java uh so here you can if you hover over the cursor over here you can see java.line link is a package inside which math class is there and one abs abs method should be there inside that math class if you right click here and here you can see public static int areas so what this uh method does it will accept one parameter okay so as you here you can see it is accepting one parameter which is integer a and it is returning something uh in in format okay so what it does is uh since the value of the application reaction is less than zero that is the negative one like minus something known as minus 50 or guess minus 400 so we don't want this values to be reflected in our console because negative values should not be there inside any account okay so we are doing this match dot abstract function and it will convert that negative value inside the positive to its corresponding positive value that is equal to it will convert the minus 50 as 50 and uh minus 400 as 400 okay so this is the work of the max dot abstracts abstract function okay or method oh then here I will write else if both the condition will not get satisfied in that case I will write no transaction is occurred no transaction is occurred okay so I guess this is pretty much about the previous transaction method where we will checking if the value is greater than 0 that is a deposit deposit method is getting run inside our application and if the value is less than zero that is withdrawal is done inside of a bank account if nothing none of this statement get executed then else will execute it and it will show that no transaction is acquired inside our account okay so this is pretty much about the withdraw and get previous function or the method I will see you in the next video where we will be covering the next functionality that is the show menu for our project so thank you guys for watching this video hello and welcome back to the another video the Java tutorial Series so today in this video we will be covering uh our next functionality of the project that is the show menu projects so this is the main uh method which will hold the all uh functionality of our banking application it will call all those method which you have which we have written in our previous videos that is withdraw our previous transaction and the deposit and it will perform all those functionality of our project I guess okay banking application okay so in this video we will be writing this show menu method okay so for this I will cover I will write another method name show menu and this may this method will does doesn't require any parameter and then it doesn't return anything okay you know so inside this menu show menu show menu function method will uh basically do all those printing part printing stuff inside that console okay so for that uh and we will be carrying on uh declaring one character okay so character variable name as option and I will initially write his ads slash Studio okay so that will present null okay again uh oh I guess I have declared the scanner class over here so that is inside this main uh another class so I have to I guess I have to declare one scanner I guess scanner SC is equals to new scanner system dot in okay let's go I have imported this kind of over here and now uh I have to create that console stop here okay now so I will just oops sorry I will just out one thing that is welcome Plus customer name so this time uh intelligent idea is telling me that hey what is customer name you have it doesn't have declared it anywhere okay so for that uh I will be creating one variable over here that is of type this is customer name so that is of type string records customer name is in string format and I will write that same customer name and one more thing I will be requiring is as customer ID okay and I will also declare it as spring customer ID Okay so whenever the object of this class is created uh I I want the user to give me the customer name and the customer ID so that I can print that name and the customer ID over here okay so for this one more concept was there of the of oops object object oriented programming language that is Constructor so what basically Constructor does is it will get automatically called whenever the object of the class is created okay whenever I create the object of the class the Constructor is getting called and the Constructor name should always be as same as that of the class name okay so what is the class name bank account and this Constructor should accept the two parameters that is the customer name and the customer ID so that we can uh print that customer name and customer ID inside the console okay and so the name should be in the format of string screen name I would like to see that because that is a proper convention that is the customer name and I will write string CID that is the customer I okay don't worry about this Constructor for till now for just now uh know that whenever we create the object of that class the Constructor get automatically called okay so this line number 15 to 17 and inside this Constructor whatever I'll write it will get automatically called whenever we create object of this bank account class okay so whenever I create this uh object of this class I just want to assign the customer name as the C name which is in given input by the C name by the user and I just want that customer ID should be equals to the CID okay so that is pretty much about this Constructor I guess and now we can move to the towards our show menu function and start a limiting this okay so I will write again one shout statement over here should be there and I will write your your ID is this and I will write customer ID okay so after this I want a new line should get painted on the console so for that I will write this out hit empty nothing should be there so that the new line should be there and which looks nice okay and again I want one option number a so we have discussed over here the options of that our application that is deposit withdraw we address and reaction at the show menu okay so we will be covering that over here we will write check balance okay uh then again one more functionality should be there that is B Dot deposit if the user want to deposit some money inside this account and again see is retro traw withdraw and again one more shout statement and now option number D to get the previous strand transaction okay now last option if either want to get exit from this hour application you want our user to click key so that you can exit from our application and so now one thing sure you should notice this show menu methods will display all the these steps inside the console okay and we don't want the user to get uh multiple times click on this run button run button and execute over this code again and again so we can what we can do is we can provide one uh loop to the user wherein user can Loop iterate or iterate this functionalities or use this functionalities again and again as much time you want and whenever a user has done with all the application uses and then simply user can type e to exit from our application okay so for this I will be using one do while loop and inside do I will just first of all I will print one statement so it will look nice okay and then one more south statement should be there which will tell the user to enter the option okay enter the option and after that one more south statement should be there uh this line number 60 and line number 62 is just used for the getting the console such a nice look okay and after that I will be doing option is equals to scan uh SC is the object sorry SC Dot next Dot carat index 0 and I will be doing 2 I guess I can't do this here and let it be we will cover in the next upcoming video so in this way in this part I have taken one uh input from the user at the string and I will be returning the first character of that string okay uh so I have declared here the character as a here option and I'm storing that user input inside this option and so user can input e d e c a b a b c d e any option that you either want that gets stored inside this option variable okay so now inside this I will create one switch and so for switch I will be passing option as the parameter so we have covered switch I hope you guys remember this how switch works and how what is switch okay so we'll be carrying one case for first case we will be passing a we will be writing the functionality if the user clicks a that is the check balance okay for that I will come inside this case and I will first of all print this line okay so this line is basically just to give that nice look to our application okay so again inside that I will write sound at the system.out.bination and I will simply print balance it's and I will concat it with balance can at last I will be printing again this just to give our application a nice look and I will print once our statement so that one extra line should be there between uh the switch next case okay so after that this is pretty much about the check balance I will just write foreign and for the next case we have case number B if these are given as B and I will just copy this statement over here just to give it oops sorry copy oh sorry guys me okay and what is the BP part uh B part is the deposit okay so when the user gives the input as B we have to deposit the amount inside our account okay so salt do either enter the amount to deposit okay so after this I will again print this line so that it will look nicer in our application okay now what I can do is int amount I will declare one variable name as amount and using strot next end I will receive that in input from the user and I will call deposit method inside this and we will pass that amount value to the deposit function deposit method okay and after that I will just print One new line and I guess that that is the pretty much I will have to do inside this case number B right so what I have done uh and printed this on the console and I have taken one input from the user and showed it inside the amount variable and I have passed that amount variable to the deposit method and we have written the deposit method over here here you can see and this deposit method will update the balance of the in our account and update the previous transaction value also okay so after that moving forward to the case number c k c okay so what is Case C withdraw okay so we have to implement the withdrawal functionality over here so I will just simply uh copy this and paste or paste it over here enter the amount to withdraw okay after that again I will create one variable name amount 2 because I'm already declared above already ridiculate about SC Dot next int and for doing the withdrawal stuff we have returned one method withdraw and we will accept one parameter name is amount so we are passing that amount that that needs to be withdraw from our account and then again I will simply just print a new line so that it looks nice in the console I guess this is pretty much we have to do inside this case okay so our next case is case D and let me just look what we have to do kst that is the previous term reaction uh we have to perform the previous transaction inside this case and again I will just copy this because this is step that I required every time okay and inside this I don't require this because I don't need to print anything inside the console or getting input from the user that's why and inside this we I will call the get previous transaction method and this call will be uh go to here to a this method get previous and reaction and this method will check this condition and according to that it will print that corresponding statement okay over here okay so I guess this is the pretty much we have to do inside this case and after that I will just print One new line and I will break this condition okay now I have to write again in more condition that is the E condition that is in exit condition what if the user write e okay so in that case either one to get exit from this Loop so they will simply just print this statement and after this statement we will do break okay and this is all we have handled all those cases and we will sorry one default case which will handle and inside default case we should do print something like when will get a default condition get hit when the user will enter uh doesn't enter a b c d e and other characters okay so in that case we just have to print invalid option please try again okay and I will simply break this okay so I guess so this is pretty much we have to do insert the switch okay so we have implemented this switch after that I will write while because this is this do while loop and inside while I will check the options value should not be equals to character P because if it is a e that that means user don't want to use our application anymore any more and you don't want to exit our phone or application okay so this is pretty much about the show menu I guess we have done let me just zoom out so that you can see whole method inside one View okay I guess this is and one one pretty simple mistake was there inside this method I want you to think about it and let me know and we will also cover that inside in our next uh video we will try to rectify that errorings which is inside this to do while loop okay so for this video this is pretty much we have done okay so in this next in our next video we will continue this project and we will try to implement this project thank you for watching this video hello and welcome back to the another video the Java tutorial Series so today we are continuing our project number one that is banking application and in this video we will finishing it okay so in our previous video we have discussed about the show many functionality of our application and I have told you that when there is mistake is there inside this method that is what if we are checking the cases for the this letter that is uh capital letters capital a capital b capital c capital D and the capital E okay one minute okay so where we are I have told you that one mistake is there inside this code that is we are checking this case case for the capital letter set is capital a capital b capital c d and e and what if the user is entering this small small letters okay so that is a b c d e uh because this switch switch is comparing that case using the Sky asci value of that characters okay so the Sky value of the capital A and as a capital small a are different so that's why user will doesn't know what is happening why the code is not getting run for the case number a because user had entered the small letters okay instead of entering this capital letter so this is the problem so what we can do whether the user will enter that characters in in a small letter or the capital letter and we are storing that inside the option option variable we will convert that uh input into capital letters okay so what we can do is there is one uh inbuilt class inside Java which is character and which has one function that to upper case and this will accept one character and which is which character is this options okay so what this will do let me just increase the font size so that you can see clearly this will uh get that options input from this option and it will conver apply the two uh apply not apply it will pass that options or the letter whether it is in a small or capital letter to the upper case method and uppercase method will return the capitalize form of that character okay so let me just show you uh this implementation of this here you can see the public static care method is written inside the Java this is the document inbuilt methods which are written inside the Java and here you can see what we what it is returning it is returning to upper case of that character okay so I guess this will remove the problem that we have inside our application and let me just okay so now I guess we have done all the part that we have you want to do inside our bank account class and we have implemented all the functionalities inside this and now we have to run this and we know from uh where our program will get executed inside this main method okay so inside that this is class banking application and this is class bank account so both classes are different and all our functionalities are written inside this bank account class and we now we have to tell this Bank application class that there is a bank account class is there and we have to create one object of that class okay so how to create the object of the class back we will simply write bank account don't worry for time being just remember uh be with me uh I will cover all those classes what is class object inside our upcoming queries inside that oops concept okay a bank account and we will give a name to the object okay so let me just write uh as Bank One whatever you can you can simply give your name also okay what it is it doesn't make any sense okay but normal convention is that you should give object name as so that's you can understand by looking at the object name what we have done inside this okay so we'll create a new bank account and here you can see IntelliJ IDEA is telling me that this object will require one two parameter that is C name and CID so I have in the previous videos I have told you that this is the Constructor which accepts a cname and CID and I have told you that whenever you create an object of the class it it calls the Constructor of that class and we have written our Constructor over an area of this kind of accept the two variable serum and CI so that's why we have to give two parameters to this program so let me just give the customer name as x y z you can give your name also as a customer name if you want and again second parameter is CID so let's suppose customer ID is let's suppose one zero one okay this is the customer ID okay uh this is pretty much that we have to do and we can now the object is created for that class name bank account okay so using that object we can call any method written inside that bank account class okay so what are the meters written inside this is void deposit void withdraw void Gateway send the action void show menu so one thing you tell me or you you decide which method I can call so that all the functionality of our application will be done inside that so I think there is only one method which uh which is there show menu method and which will Implement all these functionalities of our application here itself okay so I will call that method using the object name so for calling that method we will write object name that is bank 1 Dot now you can see show menu is there show menu okay so this will call that show menu method okay inside this okay so I guess this is pretty much that we have to do inside this project so I hope and this will run let me just run this okay it's running and now here you can see it is that asking me the enter the number of terms you want in the series uh wait I guess this running the previous sorry sorry guys this is running the previous class Java class I guess and now I have to run this Java class itself yes now see here you can see welcome XYZ your ID is zero one how this is doing uh we are passing x y z and zero one to this class Constructor and this Constructor is assigning that c name and CID value to the customer name and customer ID is over here okay and those customer IDs and customer name are getting printed in on the console here customer name and custom ID so I hope you guys are getting this and now it is asking for the option uh so let's suppose we have to check the balance and deposit the balance and we draw the previous transaction okay so we'll go one by one okay I will type A okay so we will check first of all let me check the error that we have rectified over here okay if I give small a and if I hit enter the check balance should be there so it was selling invalid option should be invalid option is there uh because I guess this is not working here why it is not working I don't get it okay let it be uh I will Rectify this error and let you know in the upcoming videos okay uh for time now being we will give the capitalized inputs to the other application okay capital a so now here you can see balance is zero it's showing balance is zero because we don't have any uh done uh deposit or withdrawal from our account and initially the value of the balance variable that we have declared over here is zero okay that's why it is printing 0 in this console okay uh okay now let me just increase the size of the console uh and now if I do B B what is a b deposit uh enter the amount that you want to deposit let's suppose I have to deposit 1000 rupees or thousand dollars in my account okay and then if I hit enter uh now thousand rupees or thousand dollars I uh deposited in my account now if I do option A that is view balance now here you can see balance is thousand previously it was selling that balance is zero now the balance is 1000 okay uh one second guys so now we have checked the balance that is thousand so we have implemented the check balance and deposit now if I want to withdraw money from my account I have to give input as C foreign 500 and now if I check the balance for checking balance um balance is 100 and now at last I want to check the previous suggestion that I have done d so here you can see if I type D withdrawn 500 that is the thing that I have done previously so that is withdraw for the 500 from the account okay so I guess we have implemented all those checks now at last I have to implement e if I press enter now here you can see process finished with exit code 0 that is our code will get ended and you will get out of this main method okay so this is pretty much about this project I hope you have enjoyed this project and you know upcoming tutorial series we will be starting oops concept from the on watch videos okay thank you for watching this video hello and welcome back guys to the another video of the Java tutorial series uh so today onwards we are covering oops in Java okay so what is oops oops there's nothing but the object oriented programming language and simula is considered to be the first objectoriented programming language and someone says a small talk is considered fully first fully truly objectoriented programming language okay so uh in today's world you can see uh C plus plus PHP Python and C sharp Java are the popular object oriented programming languages over there and so yes so first of all object means the real well entity such as pench table computer watch anything you see uh like Windows bed other object object oriented programming is a methodology of the Paradigm to design a program using classes and object what is classes and object we will cover in the next our upcoming videos we will go in step by steps okay and it simplifies the software development and maintenance by providing some Concepts such as object classes inheritance polymorphism abstraction encapsulations so these are some features of the object oriented programming languages and here you can see one nice diagram is there and we will go in such a way in this way also okay we will cover first object then class and in returns polymorphism then abstraction and an encapsulation okay we'll cover in depth each of each one of these okay so before going into the oops Concepts there are some naming convention that you should follow so that your code looks nice and clean okay so the Java naming convention is a rule to follow as you decide what to name your identifiers such as class package variable constant method uh till now you can you have seen we are giving some names to the variables some name to the classes so there are some naming conventions are declared by the sun micro system or the net Netscape which we should follow so that our code should be maintainable and readable to the other users also okay CNC here you can see the second point but it is not forced to follow okay you are not forced to follow it but it so it is known as convention not rules okay this these convention are suggested by the several Java communities such as Java Sun Microsystems and Netscape as I've said to you all classes interfaces and packages methods and Fields of the Java programming language are given according to the Java naming conventions okay if you fail to follow this convention it may generate confusions as I said it may generate confusion to the person who is reading your code and it may be uh get some error not errors ambiguity yes so let's talk about some advantages that you get in using the object oriented programming languages so first of all oops makes the development and maintenance easier whereas in procedure oriented programming language it is not easy to manage if the code grows as project size increases okay so what is procedure oriented programming language is the language such as c as a procedure oriented programming languages and languages like Java although object orientable programming language we will cover in depth in our upcoming videos okay oops provides the data hiding whereas in procedure oriented programming language global data can be accessed from anywhere for the data hiding we can use abstractions abstraction is a feature of the objectoriented programming languages which allows us to hide the complexity okay and third one is oops provides the ability to simulate the layer real world events more effectively okay one second guys okay so where we are so these are some naming convention that you should follow while writing your code and I have talked about the advantages also and in our next upcoming videos we will be starting for the covering the object in class 10 inheritance as follows okay so thank you guys for watching this video okay so welcome back guys to the another video of the Java tutorial Series so today we are we are starting with our very first concept of the objectoriented programming languages that is objects and classes so in this video we will be covering objects and classes so let's just get started so first of all I'm covering objects then I will cover uh class okay so what is object an object is an entity that hasn't State a behavior is known as object for example chair bike marker pen everything you see surrounding you is an object in a real world entity right it can be physical or The Logical okay the example of an intangible object is a banking system that we have done project on it as if you have watched or following the series okay so what are the characteristics of the object a state a state represent represents the data of an object and the behavior Behavior represents the behavior of an object such as deposit withdraw this is related to the banking application that project we have done in our previous videos okay and identity it is used internally by the jvm to identify each object uniquely so this is just identity is that just a jvm part that it handles to identify the each object uh uniquely in Java okay uh so first we will see the theoretical part of the object in the class then we will get into get into our IDE and see how class and objects are declared inside the code okay so what is the class a class is a group of objects a Fields methods Constructors blocks or nested classes and interfaces these all kinds of methods Constructors that you wrote in uh in Java you put it inside your class and a class holds all these fields okay and a class it is a template or a blueprint from which objects are created and it is a logical entity and it can it can't be physical okay so I will explain you one by one what what I have to uh speak right now okay so let me just open my IDE a by the way guys if you are enjoying this series so please like share and subscribe to the channel also okay okay wait hey this is the code of the project which you have which we have done previously okay if you have not watched this video go and watch it okay so here let me just create a new Java class name um what should I name this classes and objects okay okay let me just increase the font size and we can just get my main method okay so here you can see one class is declared okay public class classes and objects okay so as I have taught you over here you know in my notes okay it holds methods Constructors blocks and nested classes so right now this class is holding one main method main is a method method name okay and what what here here we have written it holding method constructed okay class is nothing but the uh one place where you in in which you have writing methods all those uh interfaces and code okay and here I can do whatever I want like just I will print one statement and low world and if I click here okay so it it will get that class and it will run that class okay just wait let me run this class okay so here you can see hello world is getting printed on the console what internally Java does is uh our class is this classes and objects okay dot Java this this is our file and whenever I click on the Run button it converts that dot Java file this file into a DOT class file the dot class file is then again used by the jvm and it uh it is converted uh into the byte code and which is the machine understandable code and our code get executed in the console okay so this is the behind the scene how this works okay and now I will give you an example of the object also so that you can understand clearly uh instead of writing here I will wait okay forgot let me just create one new class for you so that you can understand clearly okay uh so this this is our class and here wait let me just create one method okay uh print and this method is better than accepting anything and this method is simply printing hello world message on the screen okay so I have created another class name objects and one method is there inside this class name print and this method is doing nothing just simply printing the hello world on the screen okay so let me just clear it out uh comment it out and how to create an object okay so this is one part uh listen carefully so to create an object you have to write the class name sorry objects and then you have to write the what name you are giving to an object okay so name can be anything like this anything you want you name that object okay so I will name this as obj1 because it's my first object so you can write anything okay so after that here you can see we we have also created uh this object during our project itself okay after that you have to write new then again the class name and this okay so you'll be wondering you know why I have not passed over something over here because in if you are following the series you you can see we have passed something over here that's because our we have created one Constructor of this class we will cover in depth quarter look at the Constructor in our upcoming videos also okay so now for till now you just understand how to create an object okay so this is where we just have to write the class name the object name and the new keyword is used to memory memory allocation of that object okay and after that using that object I can call all those methods and construct trade which are written inside this class okay so I will write obj1 dot Sprint okay so here you can see and I will just click on this run button and here you can see again hello world is getting printed on the console I have con I have commented out this uh let me just clearly again so that you guys can understand clearly okay hello well it's printed on the console how it is working internally just uh look at here one object is objects object is the class name we create an object object one we use the new keyword to uh allocate the memory of the to our object and using that object we have called one print method of that class okay one print method is here and uh the egg call get executed uh call Gates over here wired print is called and executed and inside this we have written one South print statement that is hello world and this hello world is getting printed on the console the program execution comes here and comes here and Main methods gets over and our program gets terminated okay so this is pretty much about the classes and objects in Java so I hope you guys have get got some idea of the about the classes and objects in Java so in our upcoming videos we will cover uh I guess methods uh which is the next part of the object oriented programming language so thank you guys for watching this video tutorial Series so today we are covering methods in Java and so in general a method is a way to perform some tasks similarly the method in Java is a collection of the instructions that performs a specific task like if you if you want to perform a set of instruction uh multiple times you can make make it as a one method and you can you can call that method again and again whenever you want to okay and it provides a reusability of the code and we can easily modify the code using methods so basically there are two types of methods in Java one is predefined and one is user defined methods in Java okay so we will talk for first Let me just talk about the main method okay so just the main method that we have written over here that is public static World Main this is the main method and this is entry point where our Java code is getting executed first line by line okay so in in general this is the structure or the syntax of the methods public int sum int A and B where the public is the access specifier uh end is the return type and sum is the method name and integer a comma integer B inside the circular processes basis are parameter list and all together this is the method header and inside the curly basis we will write the method body and the method signature okay so we will cover in our upcoming videos what is X specifier method name so to till now uh just uh see One X specify should be there one return type of the mat of that method should be there and Method name should be there and inside the circular basis the parameters which which the method is accepting that we have to write over there okay uh so first type is predefined methods okay so predefined methods are nothing but the methods which are already refined inside the Java okay the methods which are already defined in Java and Java class libraries is known as the predefined methods and it is also known as the standard Library methods or the builtin methods so we will see some examples of this predefined methods also when we coding code it and some user user defined method also user defined methods are methods which are defined by us to perform some set of instructions okay and let's try let's look into the types of methods okay this well first one is the static method a method that is static keyword is used is known as a static method in other words a method that belongs to a class rather than the instance of the class is known as the static method what I have said is assume it like whenever we create a class we create an object of that class and when we create the object of the class the memory is allocated to that class uh if you're not okay if you know if we not create the object of that class the memory is not getting allocated to that class and when we create a method as static method it belongs to the class rather than the instance of the class instance of the class is the object of the class okay and we can also create the static method by using the key keyword static before the method name okay so next one is instance method the method of the class is known as the instant method it is nonstatic Method Define ins inside the class it is the normal method which is in your declared inside the class and it is not not static one before calling or invoking the instance method it is necessary necessary to create an object of its class uh like here you can see in a previous previous video we have created one class and we have created object of the class and then and then only we can uh call that print matter print method which is written inside this object class okay so this is an example of the instance method uh and third one is the abstract method the abstract method does not have any body and it is known as abstract method and in other words without an implementation it is known as the abstract method it means we just declare the method inside a class uh which is abstract and the implementation of that implementation part of that method is done in inside another class or another method okay uh it always declares and it has a abstract class we will cover this abstract class in our inheritance and inheritance and encapsulation uh oops Concepts there you can get this abstract method more clearly and it this it means the class itself must be abstract if it has abstract methods if you want to declare a method as abstract the class which in which the method is declared should be abstract okay to create an abstract method we use abstract keyword before it okay so let's get into our IDE and see some example of it okay let me give you an example of the predefined methods okay so here I can declare integer a um well assign it will be zero and let me just create one scanner so that I can take the input from the user okay and now here if I write a is equals to SC Dot next int okay so here we did nothing we just declared one variable a and we have taken input from the user and assign it to the value a okay so here I can write something like okay so wait here let me just see highest if you want to get a maximum array a maximum element from an array and we can just simply write out the maximum number it's and I will concat it with math Dot Max of let's suppose I will write 10 comma a okay so here you can see uh math is a class which is written inside the Lang package main package is Java and inside which uh one one more package is that name Lang and inside Lang package we have a math class and inside math class One Max Max uh method is there here you can see uh one public static int Max int a into B and we are passing two parameters to it one is 10 and one is a a is value we are inputting uh input to the program and it will compare the both the integer values and it will return the value which is a greater with the maximum okay so this is the example of the predefined uh predefined methods in Java let me just run this here you can see hello world is getting printed and it it was asking for a number so if I enter 5 it should give me the output the maximum number is 10 because when we compare 10 and 5 the 10 is the greater one or let me just run it again and I will give import such as 15. here you can see the maximum number is 15 because 15 is greater than 10 okay so this is the example of the predefined methods and for the user defined methods we have already did it here you can see uh this is one we use the defined method I have written some set of instruction in this okay and I have created one object of that class and we are calling that method using that object of the class okay so this is pretty much about the method in our upcoming videos we will be covering okay Constructor in Java okay so thank you for watching this video hello and welcome back to another video without tutorial Series so today we will be covering Constructors in Java so what are Constructor in Con in Java a Constructor is a block of course uh similar to the method it is called when the instance of the class is created that means whenever the whenever create an object The Constructor will get automatically called okay at the time of the calling of the Constructor memory for the object is allocated inside the memory okay uh whenever we create an object uh the memory is get allocated to that class inside the memory okay and the rules for the configurating a Constructor in Java there are there are two rules defined for the Constructor Constructor name must be same as as that of the class name uh let's suppose you have created one class name ABC okay ABC and inside that class if you want to declare the Constructor for that class then the Constructor should be a b c and the other constructory accepted in the parameter it depends upon you and inside this you will write code for that Constructor okay construct Ure goes here you'll see in our coding part also in detail and second second rule is a Java Constructor cannot be abstract static final or synchronized you cannot cannot use these keywords before declaring The Constructor like abstract a here you can see abstract ABC a final ABC static ABC this is not allowed in Java you have to if you want to create a Constructor for that class simply write the class name and inside the circular circular basis you will write the parameter that constructory is accepting okay so there are basically two types of Constructor in Java one is default Constructor and one is uh parameterized Constructor so let's first see what is default Constructor and let me get into my IDE and I will create one new Java class name Constructor let me increase the font size I will write main method here okay uh I will declare one another class class ABC I will get that example itself and inside this if I want to create one default Constructor one default Constructor is nothing but a Constructor that is called default when it doesn't have any parameter okay so if I write this like this and if I insert this if I write out hello World okay so here you can see over we have declared one Constructor for that ABC class and inside the circular basis we have not uh passing any parameter to it okay so this is this is an example for the default Constructor to invoke this Constructor we will simply go in our main method and create an object for this class okay one thing I am missing naming convention in Java class name should always start from the capital letter ABC okay now it's correct uh if I want to create an object as we have discussed in our previous video uh if you want to create an object simply write the class name and write the object name that you want new ABC and inside here I am not passing any parameter because the Constructor of that class doesn't uh accepting any parameter okay uh in new line I will just now I will not do anything I will just create that object and simply run this program now here you can see in console hello world is getting printed okay why this is so because we are created an object of the okay so now we will look into the parameterized Constructor so Constructor which has a specific number of the parameters is known as The parameterized Constructor and we will see one example of the parameterized Constructor over here and okay let me give you an example if I write like this okay so if I write integer a command T sorry integer B okay now here you can see a intelligent idea is throwing error because it was it was telling me expected two arguments but found zero now this is this is this is the example of the parameterized Constructor where the Constructor of a class is accept accepting one better some parameters and we need to pass that parameter inside there uh Constructor when we whenever we create an object of that class okay now I will pass here something 15 sorry 15 comma 20. okay uh it uh this Constructor is accepting two integer values and I have passed 5922 The Constructor okay and inside this Constructor we will be doing some operation using that uh two integers let me just print a plus b and print a minus B print a into B print a divided by B these are some basic operation math mathematical operations that I have performed here uh the purpose of telling this is uh whenever you create an object where the the parameterized Constructor though we have to pass that parameters to that Constructor there itself and the Constructor will get those parameters values and process the information according to this okay and now if I run this it will print me okay so here you can see 20 plus 15 is 35 uh a minus B that is 15 minus uh 20 is minus five or a into B is the 20 into 15 C uh 300 and uh a divided by a divided by B uh 15 divided by 20 is uh it is giving me zero because I have uh both the variables are in integer and and such is always coming if the both operators are integer answer is also coming in integer itself okay so this is pretty much about the default and parameterized Constructor uh let me check if I'm missing something okay uh we have to see one difference of between the Constructor and methods because and here you can see the Constructor is not different pretty much different from the method because we in method also we would write the return type and if I write a b c and this is the this is our method there is no difference between this method and Constructor so let's see the difference a constructory is used to initialize the state of an object and whether the whereas the method is used to expose the behavior of an object okay and the method must have a return type the Constructor must not have a written time here you can see we didn't write any written statement for the Constructor and for that method we we have to write the return statement unless and until the method method written type is void okay and the Constructor is invoked implicitly implicitly because whenever we create an object we we don't writing any uh like this obj dot ABC we are not writing like this this is this says we are writing only for the methods okay and methods are called using this object name okay the methods invoke explicitly in Java compiler provides a default Constructor if you don't have any Constructor in the class uh and and the method is not provided by the compiler in any case the Constructor must have the same name as that of the class name here you can see ABC is there and Constructor name is also ABC and the method name may vary a way may or may not be same as the class name you can write it as same as daughter of the class name or you can give any name whatever you want okay so this is pretty much about the difference between the construction method and in our upcoming video we will be discussing about static and disk keyword in Java thank you for watching this video hello and welcome back to the another Studio of the Java tutorial Series so today we are covering a static keyword in Java so the static keyword in Java used for the memory memory management purpose only and we can you apply the static keyword with variables methods block nested classes uh like so for for example one method is there ABC I can write static ABC or one variable I have to declare integer a static int a that that is how I can do it and the static keyword belongs to the class that an instance of the class okay the static can be a variable can be static and a method can be static okay so we will see some basic syntax how the static variable is declared inside the class uh let's suppose we have class class student and inside this integer roll number uh variable name roll number is there of type int string name and college string College iits this is a simple class with that we have declared an example of static variable okay we will see one example uh in our IDE and before that you have to here is the pictorial dependent representation of the how static uh gear variables are work okay so here where we have declared one two variable S1 and S2 and inside the stack memory S1 and S2 are there and hip memory is there uh as soon as it was object of that class student and here you can see we have created two object F1 and H2 inside stack memory and inside Heap memory id111 is there and name current for S1 S1 object and for S2 object uh id22 and name Aryan is there okay and inside okay wait a minute guys okay so where we are here we have created uh two objects S1 and H2 and we have assigned the value of our ID and name for each of the objects and here you can see uh one static variable called College of type string is declared and college name is its okay so this is the class area and this is how the static static variables are work uh College its is assigned to both of those object S1 and S2 okay and and these objects are uh separate the college name its is separate this is not inside the hip memory this is actually inside the class area this is how the static static variables work and we will see you an example of the static method so that you can understand it clearly okay wait okay so let's get into our IDE and C1 example of the static method okay so here I am inside my IDE let me just click here new Java class new Java class and I will declare whether it's great that take third okay and inside this I will write let me just increase the font size okay and now it okay so here I have declared one static method let me import my main method yes okay now silly okay let me get here inside this okay uh let me create one class name as calculate oh wait let me do all those stuffs inside this itself okay I will declare one static variable in Q back okay not this you know what let me get another example so that you guys can understand it more clearly okay let me just create last student however this one this I will I have to take I am taking this example itself okay class student is example okay so that you guys you guys can understand more clearly okay and I will declare one hint roll number after that string name for holding the student name and I will declare one static variable here a static string College is equal to i t s okay I have declared it as a static so this is a this is this will be stored inside the class area not the Heap memory and all the object uh all the objects are getting to the stack area okay here and after this I will write static sorry static Point change this is one method and I'm changing my college name to something known as let's suppose bbdi t just a random string okay and here I will declare one Constructor for this class uh so I hope you guys know how to declare the Constructor how to create a Constructor and for this Constructor I am requiring one two two parameters one is r r represent has the row number of the student and the string and I represent the name of the student okay and now insert this I will assign those values to the variables that I've declared over here are and name equals to n okay so now I have declared one created one variable declared the Constructor okay now I will create one another method name void display and inside this method I will just print the my roll number and okay so I will write roll number concat it with the roll number that we have declared over there and again name and I will assign the name it as name okay this is pretty much this method is going to do and inside my main class that is this static method class where we have declared our main method I will write I will create one variable for for not available object okay I will create the object of that class I will write student Dot first of all change okay and after that I will create a student S1 I will create first object of this class and I have to pass to uh way parameters because the Constructor is accepted accepting the two parameters one one is type of string and one is type of integer so let's suppose I am writing 0 1 as my roll number of that student and name of the student is something Harry and I will similarly I will create two more object of this class and goes here one goes here I have to give name some different name to this object this one is to S3 and these students have roll numbers like this and one's name is Joey one's name is veeru okay so these are the students and I have created those variable objects also now I have to do I have to display the name and uh roll number of the students for that I have created a separate function or the method S1 dot display S2 Dot display S3 dot display okay all these methods will called and according to that roll number and name of the student gets printed on the console okay now if I run I'll end this code oops sorry I have done the previous code itself and let me run this with this one oh okay so here you can see roll number one name Harry roll number two name j roll number three uh name Vero okay and now let me hide this terminal this is pretty much about the static uh keyword and static variable and I go I hope you guys that have got some idea about the static keyword uh so in our upcoming videos we will look into the this keyword in Java thank you for watching this video hello and welcome back to the another video of the Java tutorial Series so till now we have covered class objects and I guess static keyword in Java and today onwards we will be learning inheritance in Java so I will be dividing inheritance in two videos in this video we will be talking about the theoretical theoretical part of the inheritance what is inheritance why it is required and what are the different terms which is which are used in The Inheritance and in the second video we will be discussing about the types of inheritance because there are basically five types in are there in inheritance and we will be discussing each type using the example code example okay so let's just get started uh so what is inheritance inheritance in Java is a mechanism in which one object acquires all the property and the behavior of the parent object so basically there are two terms are here subclass or the child class or the parent class okay parent class is the class whose properties are inherited by the child class child class uses the property which are declared inside the parent class and it is important it is important part of the object oriented programming system and inheritance represents the is a relationship which is also known as parent child relationship okay and you may ask why to use inheritance in Java okay so there are basically two reasons for method overriding so that we will discuss what is method overriding in our upcoming videos uh basically it it is used to achieve the runtime polymorphism in Java and for the code reusability code reusability means uh suppose we you have declared some variables and the methods inside the parent class and those methods and variables are required for you to write in in the another class uh and then instead of writing those variables and methods again and again you can just inherit the properties of that method and variable from the parent class to the child class in that case uh one is one becomes the parent class whose properties can get getting initiated and child class becomes the class whose profit who's inheriting the property okay so there are different terms which are used in inheritance one is class a class is a group of objects which have common properties it is a template of blueprint from which objects are created uh as we have discussed in our previous videos and subclass and the child class subclass is the class which inherits the other class as I have told you the child class will inherit the properties from the parent class and superclass slash parent class is the class whose properties are getting inherited by the child glasses and reusability as the names specifies religiability is a mechanism which gives you to reuse the fields and the methods of the existing class when you create a new class and you can use the same fields and methods already defined in the previous class so for achieving The Inheritance in Java we have the syntax uh we have to write this in this syntax class sub class name you can write here the subclass name and extend is the keyword which is used to Java and the super class name and inside the curly basis you can write a write ordinary to the properties which you want to inherit from the building parent class okay so this is pretty much about the inheritance in Java theoretical part uh from the next video onwards we will be looking into the types of the United States that there are single multilevel hierarchical multiple and hybrid there are five types of initials in Java and one more thing multiple inheritance is in Java is not supported and we can still achieve it but there is one thing uh concept that you to know how to achieve the multiple inheritance in Java that way that also we will be looking into the when we are going into the abstracts and encapsulation part okay so for now uh this is pretty much about the United NC Java and from next video onwards we will be saving seeing uh each type in detail with code example thank you and then welcome back to the another video without tutorial Series so today uh we are seeing in inheritance in Java part two where wherein will be disc discussing each and every type of inheritance in Java and there are basically five types of five types are there single multilevel hierarchical uh multiple and hybrid and as you know multiple inheritance is not supported in Java uh we'll discuss why not it is not supported in Java in our later videos but for now we will see in this video particularly we will seeing into a single and multilevel inheritance in Java so let me just open my IDE okay so here you can see a single level inheritance is nothing but one class is generating the properties of an another class uh like Class A is parent class here and Class B is innate in the property of the Class A okay so we'll see when a short example of single level inheritance I will just write a new class inheritance let me increase the font size I will import the main main method and now I will declare one method inside this uh for that before that I will create one class called animal inside this club I will declare one method name as eight and this method is not accepting any parameters any return type is also valid that's why it is not returning anything else I will just print eating now I will create another class name as dog and as we discussed in our early video uh for implementing The Inheritance we use the keyword extends I will write extends animal so here uh dog is a subclass or the child class and the animal is the parent class or the superclass okay and their dog class is inheriting the properties which are properties of the animal class now I will create one method here name as bark and I will just simply print marking okay now inside my main class that is the inheritance class and inside my main method I will create the object of the doc class let me call it as dog1 is equals to new dog okay and I have created the object of the glass and I will write D dot bark let's take the dog one dot work and dog1.8 sorry and now if I run this class um here you can see uh barking anything is getting printed on the console because uh in animal class that is apparent parent class we have written the void method avoid eat method uh which which is printing eating on the console and inside the dog we have a bark method and which is printing working and using the object of the doc class that is dog one we are just calling the method bark and eat so here you can see we are we have written the implementation part of the eat method inside the animal class that is the parent class and still we are using it uh by the creating the object of the dark class because we have inherited the properties of the animal class inside the dock class that's why so this is the simple example of this uh single level in inheritance and next we have multilevel inheritance so let me just go here and I will create one another class name as multilevel inheritance now let me just increase the font size we'll add my main method and as you can see here multilevel inheritance is nothing but multiple classes are in inheriting uh the properties as you can see here uh Class C is inheriting the properties of the Class B and Class B is generating the properties of Class A okay so we will Implement try to implement this inside our code so I will take the same example as we have taken with a single single level inheritance uh I will just copy this animal class inside this class k y is throwing error typically class found in HR oh sorry we have already written the cinema class over here let me just comment this out so that intelligent ID will not throw the errors okay here we have this animal class and one dog class is also I require and I will just copy this doc class also okay and I will require another class so that I can have three classes which I need inheriting the properties of animal class and I will write new class class name let's suppose baby dog and which is inheriting the properties of dog and it has its own method known as void well let's suppose whip and I will just simply print whipping okay here you can see uh one parent class is their NM animal and each method is there and dog is extending the extending the animal class and baby dog is extending the doc class so here here you can see one class in editing the another class and another that class is also inheriting the properties of the main main parent class okay so simply we will create the object of the Davido class let's suppose dog one is equal to new baby dog okay and now if I write dog1 Dot whip whip is the method I guess this is what sorry I have written wrong here now it's okay uh web and dog one dot bark dogon Dot it now if I run this class now it should output should be whipping uh barking and eating here you can see now now in hierarchical and uh hybrid we will discuss in the next video and we will also discuss why multiple units is not supported in Java thank you for watching this video hello and welcome back to another video of the Java tutorial Series so today we are covering the remaining types of inheritance that is hierarchical inheritance and we will see why the multiple units is not supported in Java okay so let me get into my IDE I will create one new class name hierarchical inheritance inheritance okay and let me increase my font size I will include the main method okay so what is hierarchical inheritance is when two or more classes inherits a single class means let's suppose uh one class a is there and whose properties are getting inherited by the class two classes that is Class B and Class C at the same time in the example uh we'll see one example let let's just get started I will create one class name as animal and inside that I will create one method which it doesn't written anything that is why I'd eat and this method doesn't accepting any parameters and I will simply print eating these are some simple examples to under just to understand what is hierarchical inheritance we will cover a complex example in our upcoming videos also and another one is class dog which is extending the class animal and inside this I will create another let's suppose what doc does bark I'll create one method name as Spark and we'll simply print working okay uh and one more class is required let's suppose class cat and this class is also extending animal class and inside this I will create one more method name is meow which doesn't accept any parameter and inside this I will write meowing meowing meowing okay so our goal is to achieve hierarchical inheritance here uh let's suppose this is the parent class I will write one comment over here parent class and this dot class is the child class one and this is child class 2. okay and inside this I will write it now I will write my main method now let me copy this from here and I will paste it over here my main method okay and inside my main method I will create a one object of the cat class cat C is equals to new cat okay and I'll I will call wait a minute I'm getting error and it cannot be referenced from a static const text we terminate yeah let me get let me write the static all static because we are calling them inside a static method okay so that's why I'm getting one error available at all the highest right now ah yes okay and I will call C Dot meow and again C Dot eat because it is inheriting the properties of the animal class and eight method is written inside the animal class so that we can call that eat method using the object of the cat and now I will write one more line here but I'm commenting out initially and I will write sorry not it bark okay and now if I run this the expected output should be meowing and eating let's see here you can see me moving and eating is getting printed on the console and now if I comment remove this comment and if I try to run this here you can see it it gave me error because location variable C is type hierarchical index.cat and you know it is telling me that this is compile time error guys I will commit it out CT errors means compile time error this error occurs because we uh here you can see we are in this is the parent class animal class and this is the cat and dog class these are the child classes which are animating the properties of this and we are extending this is this is the cat class and we are extending extending the properties of a class there is no linking between the class C and Class B and we are trying to access the methods which are written inside the class B using the object of the Class C that is not possible here and that's why uh Java is throwing errors a compile time error this is this can not be done inside Java okay I will comment it out and I will run run it again now it's working fine okay I hope you guys understood The hierarchical Inheritance in Java and now let's talk about why multiple nutrients is not supported in Java so in multiple entrances what here you can see one two parent class one one class is there which is child class which is inheriting the properties of the two different parent classes in class A and Class B are the parent classes and Class C is the child class and Class C is trying to inherit the properties of the Class A as well as the class B at the same time okay this is not supported in Java why so to reduce the complexity and simplify the language multiple ingredients is not supported in Java uh I will give give you one scenario where a a b and c are the three classes here you can see and Class C is in it inherit the property of the Class A and B if Class A and B have the same methods and you call it from the child class object means class let's suppose one method is there void it and in class A as well as the class B and we are trying to call the this void eat method inside Class C this creates an ambiguity for the class C to whom the coil which class method should it call class whether the class A and Class B since the compile time errors are better than the runtime errors Java renders the compile time error if you inherit the two classes okay so whether you have the same method or the different method there will be the compile time error so to remove this ambiguity Java doesn't support multiple inheritance but there is a way you can achieve multiple area times in Java that is using any interfaces and we will cover interfaces in our upcoming videos when we will be talking about the polymorphism in Java so right now uh just understand that multiple entities is not supported in Java just to simplify the language and remove the ambiguity which is created here Java doesn't support multiple hand returns so thank you guys for watching this video I'll see you in the next one hello and welcome to the new Aid of the Java tutorial Series so today we will be covering aggregation in Java so till now we have covered uh in inheritance in Java and inheritance represents is a relationship and aggregation represents has a relationship I will tell you what what exactly this is uh so let's start this video If a class has an entity reference it is known as the aggregation and aggregation represents a has a relationship okay because so consider a scenario where employee objects contain many information such as ID name email ID Etc it contains one more object that is named address so address contains so many fields like city state country zip code Etc okay uh so when to use aggregation and why to use aggregation so for y you can use aggregation for code reusability and when to use aggregation if the code reuses is also the best achieved by the aggregation when there is no is a relationship is a relationship is handled using uh inheritance and has a relationship is inside aggregation inheritance should be used only if the relationship is a either is maintained throughout the lifetime of the object involved otherwise aggregation is the best choice okay so I will cover one example uh that I have discussed earlier of the employee address so let me get into my IDE and I will create one new Java class name as aggregation let me increase the font size I will include my main method okay so I require one more class to hold the address of the employee I will name it as class address okay and inside this public static okay and insert this I will write string I will get City state and Country of that employee okay and I'll write one Constructor so public address and I will receive three parameters one is City one is state and another one is country and inside this I will map all those strings to the string that I have declared above that is City this velocity is equals to City uh again this Dot state is equals to state this dot country is equals to country okay so this declared one address class and one Constructor of the address class it which receives the three parameters city state and Country for that employee uh so I have created one address class which holds the address of the employee and now inside my main method public class I will write in ID which is uh receive the ID and string name to receive the employee's name and I will create address of type address this is where we are implementing aggregation in Java because we are receiving the address of the employee in in the format of address and this add format of the address we had declared over here which received the city state and control of the employee okay and I will write now one method Public Employee which receives the ID of the employee and string name of the employee and wait a minute aggregation in ID string name and address of type address okay so we have created Constructor for this class aggregation and upon create when we create a object of this class ID and name and address of the employees will receive and map those variable with this this Dot ID is equals to ID this dot name is equals to name this Dot address equals to address let me check why I'm getting this error unexpected token wait a minute I should write Constructor outside the main method and all this declaration should be done I'll set the limit now it's okay and I need one more method to display the information of the employee void display um system.out.printlain print the ID ID Plus name of that employee trans name okay and below that I will print the address of that employee and address here you can see we have created address in the format of City then State and then country so I need to print in that format also address Dot City and then one space should be there address Dot state open space and then address Dot country this will print the address of the employee employee okay now inside my main method I will create the object of this classes to create the employee and I will create so now I have created a address one and address two of the employee and I have created two employees okay now I just need to display the information that we have got from this address one and employee one so to imprint that I will just simply call employee one dot display and employee two dot display okay and now now I will run this it should print the employee ID employee name and address of the employee okay so here you can see id101 name Jack a Mumbai Maharashtra India and ID 102 name hack and XYZ is the city uh State and Country of that employee so here you can see we can this by creating the separate class for the address we are reusing that code for to to create the multiple instances of the employee we just need to create one address for that employee and we we can pass it over here as in parameter to the employee class employee object sorry so in this way we can achieve a aggregation in Java so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today we will be covering method overloading in Java so what is Method overloading if a class has a multiple methods having the same name but there are different differ in parameters okay then it is known as method overloading if the two methods are there which names are same for example sum is the name of the two methods but so that so how we can defer the two methods okay so when the parameter one if the one method is accepting two two parameters and another one is accepting one or either more than two not not exactly two and then it is a type of a method overloading in Java okay where the same name method has the same name but they differ in the parameters they are accepting okay so if we have to perform only one operation having the same name or the methods increase the readability of the program okay suppose you have to perform a addition of the two given numbers but there can be any any number of the arguments okay if if you write the same method such as int a uh method name is a and it is accepting two parameters of type integer integer okay for the two parameters and another one is int B which is accepting as a three parameter int okay for three parameters then it it may be difficult for you as well as the other programmers to understand the behavior of the method because it's it has this it has the same name differs okay so we perform the method overloading to figure out the program quickly okay and what are the advantages of the method overloading method overloading increase the readability of the program okay and so let's just talk about the different ways to over overload a method okay so there are two methods uh by which you can overload the method method overloading by changing the number of the arguments uh the method is accepting and the method overloading by changing the data type of the argument which is accepting okay so let me just quickly go into my IDE we'll cover this popular question also uh but but let first we will code C1 example of the method overloading then we will see some popular method uh questions sorry okay method our loading okay let me increase the font size and first we will see a example of the method overlading by changing the number of the arguments okay let me copy this and I will give it a comment okay and now okay so let me take one example okay uh what I can do is I will declare one method name as int add and it is accepting the two parameter let's suppose into a and B okay and inside this I'm simply returning a plus b nothing else okay and I will introduce one more method which is inside this same class which is static int add same name of the method here you can see add is the method name and here also add is the method name but what I what I will do is I will change the number of the parameters it are accepting okay now int a comma int B comma in C and I will simply return a plus b plus sorry C fine okay I will I will return this okay okay so now I will create my main method and inside my main method I will print add off uh let's suppose 11 comma eleven okay and now again I will print one more statement uh once again guys okay so I will just print call another method now I am giving 11 comma 11 comma eleven here you can see us method name or same add and add but they are differ in the parameters they are accepting one method is accepting the two parameters one another method is accepting the three parameters okay so this is the example of the method overloading changing the number of the arguments we are passing okay and simply I will run this class and you're guessing 11 plus 11 that is 22 for the first uh print statement and another pin statement 11 plus 11 plus 11 is that is 33 is getting printed on the console okay so another meth another way to achieve the method overloading is changing the data type of the argument okay so I will just copy this and paste it over here okay so now let me comment this out okay now I will again I will have to declare one int method okay I will copy this and I will paste it over here and let me uncomment it okay one add method is there which is returning uh addition of the two methods two numbers A and B and one another method is there name is static double add and it it accepts two parameters double A comma double B okay and now it will return the addition of this two numbers okay okay now I will write my main method and inside my main method I will print call those methods add what I had to give 11 comma eleven and for another print statement I will call another ad method but this time I will pass uh 11.2 comma 11.5 11.5 okay so here you can see uh two same method same two methods having the same name and same number of parameters that are accepting one add method is accepting to two parameters integer a and integer B and another uh method which is accepting the two parameter that uh that is a and b but they are different in the return type they are returning okay the first method is returning uh in integer and second method is in returning and double so this is a way we can achieve the method overloading by changing the data type of the argument okay argument here in it receive it it was receiving in the integer format and here it was receiving the double format okay and so now if I run this class I should get the okay 11 plus 11 is 22 and 11.2 plus 11 11.5 is 22.7 so these are the two methods by which you you can achieve method overloading in Java one one is changing the arguments and another one is changing the data type of the argument okay some popular question which is asks frequently uh during the interview process uh of method overloading one is why method overloading is not possible by changing the return type of the method only okay so in Java method overloading is not possible by changing the return type of the method only because of the ambiguity let's see how the ambiguity May occurs okay so I will take one example uh let me go let me get into my class I will increase the font size and here I will create one same method same example I am taking let me print okay okay and now I will be writing the same double method also okay I will just copy this and paste it over here and comment this okay uh so all these steps let me introduce a new class adder and inside this I will write these two method okay and now inside this I will write my main method and main method I will simply print adder sorry header dot add 11 comma 11. okay so here you can see I've created one two methods uh int add and double add they are written there the return type of the two methods are different that is inth and one is it returning a double okay and now if I come here and try to print this statement add a DOT add 11 comma eleven it will create an ambiguity why so here you can see in IntelliJ IDEA is telling me there's some error and what is what's there add int is already defined in Adder so it creates an ambiguity for the Java it it for here you can see we are calling this add method 11 comma eleven but the return types are different one is double and one is integer but the number of the parameters they are accepting are the same and the type of the parameters they are acting accepting is are also same it creates an ambiguity for the Java programming language and it can't differentiate the two methods are there of the different types okay so this creates an ambiguity and one more question is there can we overload the Java main method yes by Method overloading you can have the number of the main methods in the class by Method overloading but the jvm calls main method which receive the string array as an argument only okay so here you can see we are passing this is the main method and jvm received this main method and our program execution starts from this line number 38 and it accepts the arguments of type string array okay here you can see we are passing a argument of type string array and let's this is how you can overload the main method also in Java okay so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today we will be covering method overloading in Java so what is Method overloading if a class has a multiple methods having the same name but there are different differ in parameters okay then it is known as method overloading if the two methods are there which names are same for example sum is the name of the two methods but so that so how we can defer the two methods okay so when the parameter one if the one method is accepting two two parameters and another one is accepting one or either more than two not not exactly two then it is a type of a method overloading in Java okay where the same name method has the same name but they differ in the parameters they are accepting okay so if we have to perform only one operation having the same name or the methods increase the readability of the program okay suppose you have to perform a addition of the two given numbers but there can be any any number of the arguments okay if if you write the same method such as int a uh method name is a and it is accepting two parameters of type integer integer okay for the two parameters and another one is int B which is accepting as a three parameter int okay for three parameters then it it may be difficult for you as well as the other programmers to understand the behavior of the method because it's it has this it has the same name differs okay so we perform the method overloading to figure out the program quickly okay and what are the advantages of the method overloading method overloading increase the readability of the program okay and so let's just talk about the different ways to over overload a method okay so there are two methods uh by which you can overload the method method overloading by changing the number of the arguments uh the method is accepting and the method overloading by changing the data type of the argument which is accepting okay so let me just quickly go into my IDE we'll cover this popular question also uh but but let first we will code C1 example of the method overloading then we will see some popular method uh questions sorry okay method overloading okay let me increase the font size and first we will see a example of the method overlading by changing the number of the arguments okay let me copy this and I will give it a comment okay and now okay so let me take one example okay uh what I can do is I will declare one method name as int add and it is accepting the two parameter let's suppose into a and B okay and inside this I'm simply returning a plus b nothing nothing else okay and I will introduce one more method which is inside this same class which is static int add same name of the method here you can see add is the method name and here also add is a method name but what I what I will do is I will change the number of the parameters it are accepting okay now int a comma int B comma in C and I will simply return a plus b plus sorry C fine okay I will I will return this okay okay so now I will create my main method and inside my main method I will print add off uh let's suppose 11 comma eleven okay and now again I will print one more statement uh once again guys okay so I will just print call another method now I am giving 11 comma 11 comma eleven here you can see us method name or same add and add but they are differ in the parameters they are accepting one method is accepting the two parameters one another method is accepting the three parameters okay so this is the example of the method overloading changing the number of the arguments we are passing okay and simply I will run this class and you can see 11 plus 11 that is 22 for the first print statement and another pin statement 11 plus 11 plus 11 is that is 33 is getting printed on the console okay so another meth another way to achieve the method overloading is changing the data type of the argument okay so I will just copy this and paste it over here okay so now let me comment this out okay now I will again I will have to declare one int method okay I will copy this and I will paste it over here and let me uncomment it okay one add method is there which is returning uh addition of the two methods two numbers A and B and one another method is there name is static double add and it it accepts two parameters double A comma double B okay and now it will return the addition of this two numbers okay okay now I will write my main method and inside my main method I will print call those methods add what I had to give 11 comma eleven and for another print statement I will call another ad method but this time I will pass uh 11.2 comma 11.5 11.5 okay so here you can see uh two same method same two methods having the same name and same number of parameters that are accepting one add method is accepting to two parameters integer a and integer B and another uh method which is accepted the two parameter that that is a and b but they are different in the return type they are returning okay the first method is returning uh in integer and second method is in returning and double so this is a way we can achieve the method overloading by changing the data type of the argument okay argument here in it receives it it was receiving in the integer format and here it was receiving the double format okay and so now if I run this class I should get the okay 11 plus 11 is 22 and 11.2 plus 11 11.5 is 22.7 so these are the two methods by which you you can achieve method overloading in Java one one is changing the arguments and another one is changing the data type of the argument okay some popular question which is asked frequently uh during the interview versus uh div of method overloading one is why method overloading is not possible by changing the return type of the method only okay so in Java method overloading is not possible by changing the return type of the method only because of the ambiguity let's see how the ambiguity May occurs okay so I will take one example uh let me go let me get into my class I will increase the font size and here I will create one same method same example I am taking let me print okay and now I will be writing the same double method also okay I will just copy this and paste it over here and comment this okay uh so all these steps let me introduce a new class adder and inside this I will write these two method okay and now inside this I will write my main method and main method I will simply print adder sorry header dot add 11 comma 11. okay so here you can see I've created one two methods into add and double add they are written there the return type of the two methods are different that is inth and one is it returning a double okay and now if I come here and try to print this statement add a DOT add 11 comma eleven it will create an ambiguity why so here you can see in IntelliJ IDEA is telling me there's some error and what is what's there add int is already defined in Adder so it creates an ambiguity for the Java it it for here you can see we are calling this add method 11 comma eleven but the return types are different one is double and one is integer but the number of the parameters they are accepting are the same and the type of the parameters they are acting accepting is are also same it creates an ambiguity for the job programming language and it can't differentiate the two methods are there of the different types okay so this creates an ambiguity and one more question is there can we overload the Java main method yes by Method overloading you can have the number of the main methods in the class by Method overloading but the jvm calls main method which receive the string array as an argument only okay so here you can see we are passing this is the main method and jvm received this main method and our program execution starts from this line number 38 and it accepts the arguments of type string array okay here you can see we are passing a argument of type string array and let's this is how you can overload the main method also in Java okay so thank you for watching this video hello and welcome back to the new videos tutorial Series so today we will be covering method overriding in Java so what is Method overriding uh if subclass that means a child class has the same name the same method name as declared in the parent class and it is known as a method overriding in Java in other words if a subclass provides the specific implementation of the method that has been declared by one of its parent class then it is known as method overriding we will see what it is by getting one real life example and next we will see uses of the method overriding so method overriding is used to provide the specific implementation of a method which is already provided by its superclass for example one method is there which is declared in the parent class and in some implementation parties also declared in the parent class and you just need to you have to get that method inside our subclass so you simply write extends that parent class and keyword uh to inherit the properties of the parent class and you can use that same method name inside the subclass and get that implementation in our subclass so method overriding is used for the runtime polymorphism and next up we will see rules for Java method overriding the method overriding must have the same name as in the parent class so the the name of the method should be same in both the classes one is parent class and the subclass the method must have the same parameters as in the parent class so the number of the parameters that the method is accepting in the parent class should be same as that of the number of the parameters it was accepting in the subclass and there must be a is a is a relationship which represents the inheritance in Java okay and let's understand the problem without method over a method overriding and we will see how how it fixes by using the method overriding so let me open my IDE okay it's opening weight we'll see one example uh how method overriding fixes one problem okay we'll see first problem uh okay so let me create my new Java class method over riding okay let me increase the font size okay uh now suppose let me declare one more class so that I can Define differentiate between the parent class and subclass I will create one class vehicle okay and inside that I will declare one method which isn't written anything that's why right void as a return type and inside that I will simply print vehicle is running and now this public class method overriding is extending that vehicle class so I will write extend vehicle and now uh inside this I will write my main method and inside that I will create the object of the disk method overriding class method overriding obj1 new method overriding and using this object obj1 obj1 I am calling the run method and now if I run this class the expected output should be vehicle is running yes vehicle is running and now now you see the problem is that I have to provide a specific implementation of the run method in the subclass that is that is why we use the method overriding okay so here also now you'll see uh how it eliminates this problem okay let me comment this out one more class I required with the same name again inside this I will write the same method first void run and inside this I will simply print because running okay and now uh one more class public class I will just copy this code foreign class is actually in extending the vehicle class and now inside this I will write the same method that I have written earlier void run and inside this and simply print my kids running okay now I will declare my main method and inside this I will create the object of the method overriding class that is obj1 is equals to new method overriding and using this object obj1 and call obj1 Dot run now we'll see uh how method overriding eliminates this problem okay and here you can see bike is running okay now uh this run method is also declared inside this uh vehicle method uh vehicle glass sorry and which is printing vehicle is running and same method by the same name we have written inside this public class method overriding which is extending the vehicle class so vehicle class is the parent class and this method overriding is a child class and inside this run method I have written a bike is running and when when we call this obj1 dot run it will call the subclass method which is this and we'll see how to call if there is the same two methods are there by the same name and you are trying to achieve the method overriding and if you want to call the method which is declared inside the parent class then we will we will use some one specific keyword is there super keyword we will see what is it what it is in our upcoming videos uh super keyword is used to call the method which is declared inside the parent class and now you now we will see when real life example of method overriding so that you can understand it clearly okay and let me just comment this out wait okay Let Me Clear My terminal okay now we are here uh now you see I will create one class name as bank and we as we know we have every bank has their interest rate okay so I will write one variable get weight of interest okay get rate of interest so this is the My Method name and this method is simply returning zero okay okay I have declared one method get rate of interest and it doesn't accepting any parameters and the return type of the method is zero okay it returns nothing it returns zero and I will now I create a one more class let's suppose any Bank SBI which is extending the bank class and now inside this I will write int get rate of the interest and I will pass and I will return eight uh similarly I will create one more one more Bank class okay any Bank you want let's suppose ICICI which is extending the bank class inside this I will write again the I will generate the override the same method which is declared inside the bank class get rate of interest now I will return inside this return let's suppose seven okay and now we will declare our public class I will just copy the this Lane and I'll paste it over here and yes okay and now in this class is extending okay nothing okay now if I get inside my public class I will declare my main method and inside my main method I will create the object of the SBI class SBI obj1 is equal to new SBI and I will create object of the ici7 also obj2 it equals to new series here okay I've created all the object and now I will simply print I will print SBI interest is and I will concatenate it with obj1 dot get rid of interest and I will simply copy this because same code will require for ICICI Bank also I will paste it over here and change the bank name okay and object name also because object for ICICI Bank is obj2 and now if I run this and here you can see SB interest is 8 and ICICI say Bank interest is zero well I saw all right sorry I'm I've written interest spelling wrong interest okay now it's okay if I run run this class again it should print as their interest is 8 and ICS interest is seven okay now it's correct now here you can see uh one base implementation of the rate of interest for every bank is there we will just inheriting uh extend overriding this methods each each and every time for the different banks you can create a number of the bank Banks over here and you will simply overwrite this method get get rid of interest and return the particular rate of interest for that bank okay and now we will see some popular questions which are asked for method overriding that is can we override a static method the simple answer is no a static method cannot be overwritten it can be proved by runtime polymorphism so we can learn it later on our upcoming videos and why why can we not override the static method uh it is because the static method is bound with the class whereas the instant method is bound with an object okay what I what it means is this style which method a static method is always bind with the class not with the object now whenever whenever you run this run this class the static the method which are declared as a static binds with that class itself not with the object here obj1 obj2 okay and static static belongs to the class area and instance belongs to the hip area we'll see what is uh stack area in upcoming videos and can we overwrite the Java main method no because the main method is the static method and we cannot override the methods which are declared as a static okay I hope you got the concept of the method over like overriding in Java and thank you for watching this video hello and welcome back to the another video of the Java tutorial Series so today we will be covering super keyword in Java so the super keyword in Java is a reference variable to which it is used to refer the immediate parent class object whenever you create an instance of the subclass and instance of the parent class is created implicitly which is referred by the super a reference keyword okay so it is knitting method it is super keyword is used to call the variables methods and the constructors of the super class okay so the uses of this super cubes are super keyword is so this there are three uses it can be used to uh call the immediate parent class instance variable let me write it over here instance variable and it is super keyword is uh can be used to invoke the in immediate parent class method parent class method and again it is a super can be used to invoke the immediate parent class Constructor okay so these are the three uses of the super keyword we will see one by one each of them okay let me decrease the font size okay so first we will see how we can use the super keyword to refer the immediate parent class instance variable okay so let me get into my IDE and I will create one new Java sorry a new Java class I will name it as super keyword okay now in let me increase my font size and I will import my main method okay uh so let me take one example so that you guys can understand how we can use the parent class variable as in child's class okay uh let me declare my parent class over here I will write animal declare one class name as animal and I will write this okay now inside my animal class I am getting a difficult class found okay okay okay okay okay wait wait wait wait wait in our previous code we have used this animal class I guess that's why we are getting uh error over here okay okay let me change my class name so something else so that we can okay now now it's okay fine uh inside my animal class I will declare one string color and quit string col or color which is equals to White okay so this is my parent class and now I will create one class name as dog I guess you can take anyone any animal you want okay dog which is extending the enemy sorry animals class now inside this class I will write string color it is equals to black okay now uh wait a second I'm getting okay dog is also let me create it as stocks okay uh now I will write one method void print color which doesn't accept any parameters and inside this method I will write simply system.out.pentel in my color okay now and I will write one more Sprint statement and now this time I will write super dot color okay now you you will see what is different exactly difference between uh these two statements let me just create the object of the talks class dogs obj1 is equals to new dogs okay and inside using this objects I will obj1 Dot print color okay now if I run this you will see the difference between these two statements one is printing black and one is printing white why so because when we write system.out.print Ln color that this this is referred as this line number six and this colors value of this color variable color variable is black and which is getting getting printed on the console and when we write super dot color this super key this super keyword will call this call is getting called to the parent class parent classes here class animals and whereas colors value is white okay so super dot color is white and color simply color when we write simply color the that means inside this class we have declared string color black so black is getting printed first and why it is getting basic printed second okay I hope you understood this concept of variables okay and now moving forward we'll see how we can Super Key how we can use super keyword in class methods okay now uh I will make some changes in this code itself okay now this time I don't need this string because we don't we and I will create void eight and inside this I will just simply write eating okay uh so this is the parent class method and now inside my dogs which is extending the animals class extends the animal class uh I don't know I don't need this variable right now and I will declare this print I guess this also don't don't need anymore okay now inside this I will write avoid it uh and I will print doggy is eating such a random string okay and then right bark okay and I will simply print barking and I will declare one more method work okay and inside this I will write super dot it okay and now after this web method is done I will write bark okay so wait a second let me write this inside this okay now it's okay uh we have declared one the dog's class which is which extends the animal class and inside this we have written void eat and so this is the example of the method over adding as we have discussed in our previous videos also so this it method will print dog is eating and this bark method will print barking uh now one more method is there name as work which is uh calling to methods okay super dot eat and now we will see what you what you guys thinking what should be printed over here why why not eat eat whether it is painting dog dog is eating or the eating you will see uh let me just comment this out and I mean next line I will write obj1 dot work and now if sorry I open it in debug mode wait wait wait wait now it's okay huh yes here you can see eating and barking is getting written on the console why so because when the call is at line number 21 super dot it will call the immediate parent class okay and each method we have declared in the parent class uh it is printing eating and that's why eating is getting printed on the console and when when we call Bark it's just simply called uh the method which is in inside the animal class redox class itself okay that is the child class and which is printing barking okay so this is a this is the one use case of the super keyword uh to call the immediate parent class method okay now you will see how to call the immediate parent class Constructor invoke no call we will invoke okay so in this example itself I will do some changes so that you guys can understand it clear okay you know what let me comment this out okay and here I will come in this also okay now inside this uh parent class I will declare the Constructor for this class okay animals this is the Constructor and this Constructor is simply printing animals is create it okay and now inside this child class we'll write the Constructor for this class wait a second it's dogs not dog and inside this we'll write super and and again one pin statement so that you guys can understand the code flow is going dog is created okay now if I comment this out and I will simply run this because here you can see I have not uh used that object and called any method and uh still now something is getting printed on the console that that is because when as we have discussed in our Constructor video The Constructor will get uh called automatically whenever the object of that class is created okay so here we are creating the object of the class so that the Constructor will get called automatically okay so what is happening over here uh in the line number 37 whenever we create an object of that class obj1 the call is passed to this line number uh 28 okay now this line number 28 is executed 29 we have written super okay and if you hover over this it says that animals class is there and this call is passed to this animals class Constructor and in this Constructor will get executed first okay and it is printing animals animals created so the first line is animal is created it is it and secondly it is printing uh dog is created that's why it it prints dog is created okay one more thing is there uh if you don't if you don't write this uh this super at line number 29 it that again it is writing animals is created why so because whenever you created whenever you create the child class object and if that child class is extending one parent class then in that case whenever you create a create the child class uh Constructor it will automatically call The Constructor which is there inside the parent class okay so if I don't write this super super over here again it it will call the animals class Constructor if we have if you have declared this Constructor inside that class if you don't have declared it will not call okay so this is the idea behind the super keyword uh I hope you understand the super keyword in Java thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today we will be discussing final keyword in Java okay so the final keyword in Java is used to restrict the user okay the final Java keyword can be used in many con context okay the final can be a variable a final can be a method and a final can be a class okay the final keyword can be applied with this variable a fine a final variable that have no value is called as blank final variable or uninitialized final variable okay and it can be initialized in a Constructor only and the blank final variable can be a static also can be initialized in the static block only and we will be detailed learning of this and let's first learn the basic final keyword okay okay so what is the use cases of the final keyword in Java to stop the value change and to stop the method overriding and to stop the inheritance okay we will we will be using final keyword for these two for these three reasons okay so we will discuss first what is Java final variable okay so let me get into my IDE and I will create one more class name as final keyword okay and let me create the font size okay so though if you make any variable final you cannot change that value of that final variable it will be constant throughout the code okay so the example of the variable is okay so assume uh try to understand this example there is a final variable called a speed limit okay speed limit of that bike okay we are going to change the value of this variable but it can be changed because the final variable once assigned a value and cannot be changed anywhere in the code okay so let me create when class one not class inside this class let me create one final so to declare a final variable we will write final keyword before that Declaration of that variable okay so the final int so what is the way my variable name is speed limit which is equals to 90. and after that I will write void run now inside this my I will set my speed limit to uh any any random number 400 okay you can set whatever you want and inside again this I will import my main I will write my main method and I will create one object of this class okay so final keyword obj1 is equals to new Final keyword okay and now if I write obj Dot run now here we can see if I run this uh IntelliJ IDEA is throwing some errors we will see what is there here you can here you can see Java cannot assign a value to a final variable speed limit so here you can see once that variable you once you declare a variable as a final and you assign a value to it you cannot change that value again okay inside this line number four we are we are trying to change the value of the speed limit to 400 and it is giving me error saying that cannot assign a value to the final variable speed limit because it is already already over here at line number two we have declared value to it okay so we'll see next up Java final method okay what is our final method we will see I will take the same example let me comment this out and this one also okay and inside this class itself I will write one final method void run now inside this I will write simply print something random string running okay and now uh inside my main method I will create one object of this class and I will write obj1. run okay and now if I call this it is simply printing running okay now I will show what is the consequences if you write one method as a final and you are trying to call that method inside another class okay and now I will let me just I will write one more class uh any name by company let's suppose BMW and this BMW class is extending my oh okay wait wait wait wait wait to explain this I need one more class which is the parent class I will declare it over here class bike and inside this I will write final void run running okay and now this is my BMW class and which is extending my by class and set this I will write avoid run and inside this I will write yes sound BMW is running okay and now if I create the object of this b m w class foreign method inside this main method you'll see when error should be there we'll see what is that error IntelliJ IDEA okay the Java run in BMW cannot override run in bike overridden method is file is final okay so here you can see Java is telling me that you are trying to override one method name as void run which is declared inside the parent class bike as a final method okay you cannot overwrite the final method uh inside any of the child class once you declare it as a final final method okay so this is an example of the Java final method you'll see Java final class method also example sorry not method and now uh I'll make some changes over itself I will declare it as final class bike okay and I will remove this final keyword from here okay nothing okay and now if I try to run this code I should get one error yes cannot inherit from by final bike okay uh you have declared this bike class as a final and you cannot inherit this class inside any of the child class okay and and you in like line number 19 we are trying to in we are trying to inherit this by class inside this BMW class and here itself IntelliJ IDEA is telling me that cannot inherit from final bike okay so this is one example of the class where we have declared class as a final okay now we'll see some popular questions which is asked in the interview rounds okay is final method inherited yes the final method is inherited but you cannot override it okay as we as we have seen here okay now one more question is there what is the wait let me take can we initialize blank final variable uh yes but only in the Constructor if you want to initialize uh here I will give you an example here we have written Final End speed limit and we have assigned it value as 90. if you want uh to initialize this variable as a blank variable you just simply cancel that assigned value as 90 and then again you can write it here speed limit is equal to 70 and if you are trying to print this speed limit at that time the speed limit will be get printed on the console as 400 because you have initialized over it over here but the only thing is you have to initialize the limit speed limit value inside the Constructor of that class not in the method so here we are written method if you if you write a Constructor for this final keyword class and inside that class if you write speed limit is equal to 400 the value of the speed limit is uh set to 400 itself okay so this is pretty much idea behind the final keyword in Java I hope you guys understood it thank you for watching this video hello and welcome back to another video of the tutorial Series so today we'll be covering abstract classes in Java so a class which is declared as an abstract keyword is known as the abstract class in Java and it it can have abstract and nonapstack methods and methods with body okay so before learning the abstract class let's understand the abstraction in Java first okay so what is abstraction abstraction is a process of hiding the implementation details and showing the only functionality to the user okay so so it is a it's nothing but another way to it shows the only essential things to the user and hides the internal details for example sending sms where you type the text and send the message you don't know how the internal processing about the message delivery is done you just only see one tick that that tells you that the message is sent successfully so abstraction displays the very important role over there so so there are several several ways where you can achieve the abstraction uh first one is the abstract class and second one is interface so in this video we'll be covering abstract class and in our upcoming video we will be covering interface okay so hashtag class in Java a class which declares an abstract is normally abstract class it can have the abstract and known abstract methods okay so there are some points that you need to remember while learning the abstract class in Java an abstract class must be declared within an abstract with an abstract keyword okay if you want to declare an extra class you have to use the abstract keyword before that class implementation okay and it can have abstract and nonafstrack Method and inside the abstract class you can declare uh abstract as well as the nonabstack methods and it cannot be in in instantiated okay what is ancient interest instantiated we will discuss and it can have Constructor and static methods also and it can have final methods which will force the subclass not to change the body of the method okay and what is final keyword we have to discussed in our past videos and there are some rules uh for the Java abstract class and abstract class must be declared with an abstract keyword as we have discussed and now we will see one abstract methods in Java one example will try to understand it by example uh let me uh create one class abstract class okay let me increase my font size okay now I will create one class abstract class bike and inside this I will create one abstract method abstract void run okay so now inside my this public class I will write uh before that this class is extends the by class we are trying to achieve inheritance over here okay so inheritance also we have covered in our past videos if you haven't checked that video go and check first inheritance and void run and inside this I will simply print running my bike okay and now I will declare my main method now inside this I will create one object of that bike class obj one which is okay and not on it's abstract class and now if I try to call that run method over here yes now if I run this class we'll see what is the expected output by running my bike okay so when you declare this void run and now this abstract class is extending that by class and when when you declare run and we have already declared one here you can see is implemented in abstract class and here you can see implements methods in bike okay so here we have declared this void run method as an abstract an abstract method doesn't have anybody we have to uh declare that body inside one of this child class and that's why here we it is right it it's written as is implemented in abstract class if you click here the cursor will come here and if you hover over here it implements method in the bike if you write here yes that's why my running my bike is getting printed or printed on the console and next up uh we'll see when the real life scenario of the of an abstract class okay um okay let me get into my IDE and okay okay okay let me just think of one example okay we'll see one example I will just comment this out because I don't need this and this one also okay uh now this is not extending the bike class anymore okay now I will create one abstract class name is sheet okay and inside this I will write abstract void draw okay and now uh I will create one more class over here sorry class rectangle which is extends the class shape and inside this class I will write the implementation for out of that draw method and I will simply print print what should I print rectangle is drawing and okay and now if I come inside my public class and I will write my main method okay and inside my main method I will create one variable of the shape class obj1 by referencing to the rectangle okay and now inside this I will write obj1 Dot bj1 Dot draw okay and now if I run this rectangle is drawing okay so this is one real life CMS scenario we can you can create one shape class and you can write a number of the uh rectangle is there square is there triangle is there and you can try to implement that method inside that same different classes with a different implementation and you can call those uh methods inside the public class using the object of that respective classes okay and now when we will see example of the class having constructed data members and methods okay so first of all let me clear this first previous example okay now I have to clear this also okay now to understand this I will create one more class which is abstract one sorry extract class bike and inside this I will create one Constructor of this class inside Constructor I will simply print in by case created okay and out after that I will create one abstract method abstract void run and I will create one known abstract method also void change gear and inside this method I will write gear changer okay and now I will create one more class uh any BMW random extends the by class and now inside this I will write I have to implement here you can see it it's showing some errors what is the error BMW class must be either declared with abstract or the implement the abstract world run method in the bike because when we declared a method as an abstract we have whenever we whenever that class is inherited by any of its subclasses then the implementation of those abstract methods should be there inside this child classes so we have to implement this run method inside this okay now in if I write running safely okay and this is pretty much about this and inside this I will create one object of the bike class bike obj1 it's equals to new BMW okay and after that I will write obj1 Dot run and obj one dot change here and now if I run this the expected output should be a bike is created uh why why first bike is created getting printed because when we when the program execution reaches at the line number 19 uh the object of that bike class is created and inside the bike class we have declared one Constructor which is printing bike is created that's why the first line which is printing bike is created and after that obj1 dot run the exam control flow of the code will go inside this abstract void run method and this abstract while drone method is implemented inside the BMW class and we have implemented it as running safely that's why running safely is getting printed on the console and after that obj1.j gear is executed and inside the change gear method we have written gear change that's why gear change is getting printed on the console so this is the pretty much idea behind the abstract class in Java so I hope you got some idea of the optional class so in upcoming videos we'll be covering interfacing interface in Java this is another way to achieve the abstraction in Java so thank you for watching this video hello and welcome back to the new way of the Java tutorial Series so today in this video we will be covering interfaces in Java which is used to achieve the abstractions in abstraction in Java okay so an interface in Java is a blueprint of the class it has a static constants and Abstract methods the interface in Java is a mechanism to achieve abstraction okay so there there can be only abstract methods in Java interface not not method body because we have seen earlier abstract methods doesn't have anybody uh it is used to achieve abstraction and multiple inheritance in Java so in when we are trying to when we are learning inheritance in Java at that time I have said uh multiple multiple entries is not supported in Java and we can achieve that multiple units in Java by using the interface by uh how we will see in this video itself in other words you can say that interfaces can have the abstract methods and variables it cannot have the method body okay and interface in Java is also represents a is a relationship as we have discussed in our in inheritance part and uh next up why we use interfaces in Java there are mainly three reason to use interfaces in Java it can be used to achieve the abstraction by interface we can support the functionality of the multiple unitings in Java and it can be used to achieve loose coupling okay so how to declare any interface okay so we'll see uh this how to declare when we bring some example of The Inheritance okay before that uh we need to understand some uh interface improvements that Java has done after the Java 8 release okay the Java compiler adds the public and Abstract keyword before the interface method and moreover it adds the public and static and final keywords before the data members in other words uh here you can see one example interface printable and int Min is equal to 5 and void print method is declared and uh what com compiler of the Java interprets is as uh this is the Java printable.java class dot Java class and this is the class which is created by the compiler so here we have written int mean is equal to 5 and what the Java compiler interprets is as public static final it adds the three uh keywords public static final if you heard before the Declaration of that variable whether you write it or doesn't don't write it it doesn't matter compiler will going to add these keywords before that Declaration of that variable and for the method it adds public abstract void okay and so here are some terms that you need to understand whenever a class a class in class A relationship is there it extends the okay this is the inheritance and whenever class implements in in interface and interface extends an interface okay we'll see one example of it okay so see we will see one real life example of the Java interface uh Bank example as we have discussed earlier okay so let me get into my IDE and I will create one new class okay by the name of interfaces let me increase my font size I will get my main method okay and now I have to declare one interface okay okay wait now if if I write one interface name is okay interface Bank and inside this interface I will create one float variable that is rate of interest rate of interest okay this is the method rate of interest and here you can see I have not written a float rate of I have simply written float rate of interest so what Java entropy interprets this method as uh here you can see I have discussed earlier also public abstract okay so it adds adds one two variables two keywords so before that public abstract float rate of interest this is what Java interprets it interbates as okay and now you know inside outside this interface I will write one class any class SBI which is implements Bank interface okay so and inside this wait a second why I'm getting error duplicate class okay I will write Banks now it okay Banks okay and here IntelliJ IDEA is throwing some errors let me check why the class SBI must be either declared as abstract or implement the abstract method rate of interest okay so this is here you can see we we didn't write any abstract keyword before it and if still that Java is throwing some error telling that this is an abstract method you have to implement this method inside this class okay so let us Implement that method public float rate of interest in for the body of this method I will simply return float value 9.15 f okay now it's not doing error and inside my main method I will create the object of that Banks interface oops sorry Banks obj1 is equals to new SBI okay and now here I will just simply print sbis rate of interest is and I will concat it with what is the object name object one dot rate of interest okay uh it was a throwing some errors duplicate class found okay SBI is we will write sbis now it's okay okay and run interface says dot Java here you can see SBI is Roi is 9.15 9.15 here here we have declared it so this is how uh interfaces Works in Java to implement that interface we have we have one keyword is there implements and to achieve the what we can say polymorphism we have we are writing extends keywords okay so these are some differences don't get confused inside this when a class when there is a relation between class and class extend keywords is there when there is a relation between uh class n interface implements keyword is there and when there is a relationship between interface and interface extend keyword is there okay so let's discuss how we can achieve the multiple inheritance in Java by using the interfaces okay so let me comment this out this code or else I will just remove this so that you don't get confused between the passcode and current code okay uh now if I create one interface okay interface and I will name that printable inside this I will write void one method which doesn't return anything and this is an abstract method because everything will return inside the interface is an abstract method okay and after that I will write in again one interface uh travel and show s h o w a b l is showable and inside this I will write void show method okay so these are two interfaces and now inside my this interface is class which which is public class I will create public void print okay now before that I have to write one keyword which is implements so that Javan just knows that we are trying to implement those interfaces inside this public class interfaces okay so the name of the two interfaces are printable and one is actually and intelligent idea is showing some errors we have to okay we have to declare that show method also inside this because that method was abstract method okay showing theirs and inside this print I will write simply on random string let's suppose hello and inside this I will write um world okay and now inside this main method I will create the object of this interfaces class interfaces sorry this is object 1 is equals to new interfaces okay and now if I try to call those methods object1 dot print and obj1 Dot show okay and now if I run this class hello and World should get printed okay hello and world is getting printed so here you can see uh we are trying to achieve the multiple inheritance over here why so because uh this is one child class and these are two parent classes and we are trying to inherit these two parent classes inside one child class and which is the example of the multiple heritance Okay so this is how you can achieve multiple linear attention Java by using the interfaces and the keyword which is used to here do this is implements okay so this is pretty much about interfaces in Java I hope you got some idea about the interfaces in Java thank you for watching this video hello and welcome back to the new head of the Java tutorial Series so today we will be covering packages in Java okay so Java package is a group of similar types of classes and interfaces and sub packages okay so package in Java can be categorized in two form a builtin packages and user defined packages so we will be covering both of this in our in this video and so the builtin builtin packages are look like this here you can see one example of this pictorial example of this building packages one Java main package main package Java is there and below that Lang utl and awt and there are a number of packages which are defined by the Java language itself these are the sub packages of the Java and inside this uh sub packages different classes are written system.class string.class I release dot classmap.class these are some classes that we have and here you can see I will open any of any of this uh example that we have covered in our upcoming uh sorry of not upcoming previous videos and here you can see we have written import java.util dot scanner so this is the Java is the main package utilize the sub package and scanner is the class which is written inside this package if you hover over this you can see uh implementation of implementation part also of this scanner class okay uh so these are some job packages which are defined uh predefined in Java and we will see user defined packages also how you how you can create and call those okay so first of all if you are using an IDE uh then this example will not help will helpful to you those people who doesn't uh using any IDE uh please look at this example simple example of java package uh package name and package is a keyword which is used to define a package and my pack is the package name and inside this package I have click created one class name is simple and by in inside this class one main method is there and inside main method welcome to package is the string that is printed on the console okay so to compile this Java package Java C minus t the directory or the folder where you are currently storing these files the path should be there in in place of this and Java file name a Java file name is the name we have which is you have given to this file so in this in my case I've written is at simple.java so I should write Java C minus t dot represent the rule directory and simple.java okay whenever I run this command minus D switches the specified destination where to put the generated class file so and you can use this directory name such as slash home in case of the Linux and D dot slash ABC in case of the windows Etc and if you want to keep this package within the same directory in that case you can use dot okay now uh how to access the package from the another package okay still now you have understood what is package how to create a package how to call the classes of the package now how to access the package from the another package okay so there are mainly three three ways you can access it by simply writing writing the import statement as you can see here over here import Java retail.scanner and second one is import package.class Name by specifying the particular class in uh consider a scenario where in one package holds some n number of the classes and you want only one one class to be get called in that case you can write this statement uh this is the example of the second statement where Java is the main uh main package I utilize the sub package and from the util it's a package we are calling simply one scanner class if you want to call all those uh classes which are written inside the util sub package you will simply write import Java Dot util Dot star star represents all all those classes which are written inside the util sub package import them all okay and third one is fully qualified name we will see each of them by looking one example okay now let me open my IDE so to create one package if you are using an IDE then it's very simple you just click on the source folder right click on it new and instead of creating Java class you just click on the package and you can name your package whatever you want I will name it as ABC you can write anything you want and uh so here you can see ABC package is created and inside this package if I want to write one class okay so I will right click on it new Java class and I will write uh class okay uh let's suppose a is my class name so a DOT Java is created under the package EBC here you can see okay and one more line is added by the intelligent idea package EBC that defines this class is written inside the package ABC and let me increase my font size okay so inside this a class uh I will declare one method okay public void message and inside this I will simply print hello okay and I will save this okay now uh in if I go outside of this package and I will create one new Java class name as B and inside this let me increase the font size and over here we are trying to see the import package dot star okay so I will same similarly like import package what is the package name EDC Dot star okay we have it okay and now inside my public Class B I will write my main method and inside the main method I will create the object of the Class A which is written inside this package okay I will write a o b j is equals to new a and I will try to call the method which is written inside the obj that is this one hello message method okay and now if I try to run this hello should get minted on the console okay yes here you can see Hello is getting printed on the console why so because we are in imported the class A from the package ABC okay and now one more thing is there import package name dot class name okay so here to explain this let me create one more class okay okay here however okay let me create one more class public class B okay Class B if public should be declared in the file name B dot Java okay okay in this class is already declared let me write it that PA okay what is ba should be declared in the B dot Java wait wait wait wait wait let me comment this out and this one also okay and okay okay wait you know what let me take this example itself and I will try to explain this also okay and now here you can see uh import package name dot class name okay if you want to call that specific class of that package then you should instead of writing star you should write a okay so package name is ABC the class is public Class A and inside this we have a written one method void message and it's printing hello on the console and it to import that package we have written import packagename dot class name and inside the public Class B and inside the main method I will create the object of that class and I will call that message method okay again hello should be printed yes hello is waiting printed on the console and now uh we'll see the third method fully qualified name okay how we can call okay so if you don't want to write this pack okay in this line and you you still want to use those classes which are written inside the package then you can simply write the package name what is the package name abc abc dot a and here also you have to write abc dot a and now if I try to run this again hello is getting printed on the console because fully qualified names defines as uh one class here Class A is declared inside the package and one method is there MSG and which is printing hello on the console and we are trying to access that class by using the package name dot the class name and by creating the object and again if if you want to call that method object name dot method name is the simple we can call this method okay and hello is printed on the console so this is the pretty much either we have behind the package is in Java okay so in our upcoming videos we will see access modifiers in Java so thank you for watching this video hello and welcome back to the new video tutorial Series so today we will be covering access modifiers in Java so there are two types of access modifiers in Java access modifiers and nonaccess modifiers and the access modifiers in Java specifies the Excel scope of the field method or Constructor of the class and we can change the access level of the fields Constructor methods and class by applying the access modifiers on it okay so there are mainly four types of access modifiers one is private a default protected and public so private defines the access level of the private modifiers is only within the class and it cannot be accessed out throughout the class and the default one is has the access level of the default modifiers only within the package and it cannot access from outside to the outside of the package if you do not specify any access level it will be the default okay are protected for protected the access level of the protected modifiers is within the package and outside the package through the child class if you do not make the child class it cannot be accessed outside the package and the public the public access level modifier is everywhere it can be accessed from the within the class outside the class within the package or the outside of the package so understanding of the Java access modifiers let us understand by this simple table so the if the access modifier is private it can be accessed within the class but it cannot be accessed within the package but it can and it also cannot be accessed outside the package by the subclass only and it it cannot be accessed I will set the package also so this is the yes no yes no chart uh this is the easiest one to understand how the access modifiers are working inside the Java okay so the first one is private for private I have taken one example over here you can see let me just okay yes one class is there Class A and which has the private variable name as data and value to it is 40 and one method is there private void message which is printing hello Java on the console and one public class simple we have written the main method and we have created object of the Class A and we are trying to print obj.data and we are trying to execute that message method which is MSG inside this simple class which is public and by using the object of that class that is obj okay whenever you write this this kind of statements to access the data which is private and which is inside the another class you will get the compile time error in both the lines because you are trying to access those data members which are private in privately declared inside another class okay you cannot access these members okay so the role of the private Constructor if you make any class Constructor private you cannot create the instead of the class outside of the class okay for the for example here you can see uh when class A is created and we have created one uh Constructor which is private okay and one method uh method is there MSG which is printing hello Java and inside our public class inside our main method we are trying to create the object of that class A obj is equal to new a and we'll we here here here itself we will get the compile time error because the Constructor which which is declared for the class A is private and we cannot uh access that for Constructor which is private and that's why we cannot create the object of their class okay so the role of the private Constructor is if you make the class Constructor private you cannot create or instance of the class outside of that class okay next up we have default cons default access specifier okay so let me zoom in okay yes here example you can see one package is there package pack and one class is there which holds one method MSG and which is printing hello on the console okay and inside uh B dot Java we are in the different package that package name is my pack and we are trying to import all the classes which are defined in the pack package and to do do so we are writing one statement import pack dot start star represents all to import all the classes which are defined inside that package uh in in that pack package we have written one one class that is Class A and inside our class B we are inside our main method we are trying to get the object of that class A and that is obj and we are trying to access that MSG method which is inside that back packaged class name a here itself we will get compile time error because the the definition of the default we have seen over here the access level of the default modifiers is only within the package it cannot be accessed outside of the package okay and we are trying to access these uh method uh over here here you can see we are trying to access this MSG method which is written written inside the pack package and we are trying to access it inside the my pack package this is not possible in Java and here here itself we will get you will get a compile time error okay and now for the protected one this is the example same package name pack and same class name but the method which we have declared over here is declared as a protected method and we are trying to paint print hello on the console okay and inside the another package my pack we are trying to import all the classes which is written inside the back package and Class B extends Class A because we are trying to inheriting inherit all the properties which are written inside the class A and inside our main method we we will write the object uh object of the Class B B object new B and we'll call obj Dot MSG and the output should be hello which is getting printed when for the definition of the protected we have seen vaccine level access level of the protective modifies is within the package and outside the package throughout the child class if you if you create the child class you can exit it outside the package now for the public one uh you will write one package back and Class A which is holding one method Miss G and which is printing hello and and in another package we will uh try to import that class which is written inside the pack package by writing import pack dot star and inside the class B inside the main method we will create one object of that class A and we'll print simply call that method obj.msg and we will print uh hello on the console why because for the public definition of the public access modifier says that it can be accessed from within the class outside the class within the package outside the package everywhere you can access that data members if you declare it as a private public okay so this is pretty much about the access modifiers in Java we'll see you in the next one video thank you hello and welcome back to the new video of the Java tutorial Series so today we have completed the oops Concepts and now it's time for the exercise uh so exercise or not Concepts uh head over to this link uh just type this link in your browser and you will be redirected to this page which is hacker rank page and here you can see uh some basic challenges on the oops Concepts in a Java animating this one Java inheritance to abstract class interfaces method overriding method over adding two instance of keyword so we can try solve this questions on your own but I will be taking for the first five questions of this challenges and you can try all these challenges but you can also try easy medium and hard you can set a difficulty level as whatever you want uh I'll be solving easy ones and so in this video we will be talking Java inheritance one and Java inheritance to solution to these problems okay so the problem statement is using inheritance one class can acquire the properties of others consider the following animal class so they have given us animal class which has one method wild walk and which is printing I am walking and this class has only one method walk and next time we want to create a bird class that also has a fly method we do this using extend keywords okay so they have created one one more class A bird which actually extends the animal and which has its own method fly and I'm flying is the print statement which is written inside this fly method and finally we create the bird object that can both fly and walk okay so they have one class solution inside which they have written main method and inside main method they have created the object of the bird class and using that object they have called walk and fly method and obviously this two methods will print I am working and I am flying this means that a bird object has all the properties that animal object has as well as some additional unique properties okay the the code above is provided for the for you in the editor you must add a sync method to the bird class then modify this main method accordingly so that the code prints the following line Okay so the expected output should be I am working I am flying and I am singing okay so they have provided us this code editor okay and we are expected to write one more method for the bird class which is sing method as you can see over here okay so we will write something reward thing and inside this method we will simply write system dot out Dot print Ln and inside this method I will write what we have to write I am singing I will copy this string and paste it over here okay okay this is the method that it has to write okay and okay and then modify the main method accordingly so that the code prints the following lines okay so I have to modify the solution class also and here bird dot thing is there okay now I guess it should print I'm singing I am submitting the code before that I will run the code okay let me just logging through my Google account foreign I will submit the code yes compile and message success now we congratulations so you have solved this challenge okay so this is about the Java inheritance one problem we will look into the Java inheritance second problem also wait let me open this in new tab okay okay for the Java inheritance second problem uh the problem statement is write a write the following code in your code editor below a class name arithmetic with the method name add that text to integer as a parameter and Returns the integer denoting their sum okay so let me write it down here comment what we have to do okay we have to write one class name arithmetic okay class arithmetic inside that class uh we have to write on method name as ADD one method should be there method and which accepts two parameters I and T comma int two integer parameters and then it Returns the sum and it is returning the sum of the two numbers okay and a class name Adder that inherits from a super class name arithmetic okay uh class name header an Adder class should be the one Adder class header class which inherits the properties of the arithmetic class okay so we have inherits inherits the arithmetic class okay and your classes should not be public okay so we don't have to write a class as a public because one class is already declared as a public list which is solution okay the improve input format is you are not responsible for reading any input from this STD in unlock code step will be test your submission by calling the add methods okay this is the normal line output format should be you are not dismissible for printing any anything to STD out your your ad method must return the sum of its parameter okay the sample out sample output they have given as my superclass is arithmetic and 42 13 is 20 okay thank you Okay so write your code here okay so first of all let me create one arithmetic class okay abstract arithmetic abstract CLA s s class arithmetic and inside this class I will write public abstract and add and this is going to accept two parameters final in a and final int B okay so this is the abstract method so I don't need to write the body of this method that's so okay and now uh I have to declare one another method or class okay inside this solution class I will just so it I can't edit inside this solution class okay let me create my own class in IntelliJ IDEA I will name it as in inheritance to I will get my main method and I will simply copied my arithmetic class that I have written over here copy paste okay now we have implemented the arithmetic man and we have also implemented the add method which Returns the sum and now we have to overwrite this method inside our main public method that is public class sorry inheritance to so we will write public in add and which accepts two parameter final int a comma final in b and it performs simply the addition of the two numbers it will return a plus b okay and one more thing uh it it is extends this arithmetic class okay now it's okay now inside our main method we will simply create the object of this inheritance class in here it is to obj one is equals to new inheritance and using this object we will call this add method to call this method we will simply write obj1 dot add and we'll pass two numbers let's suppose uh two numbers can maintain a 10 comma 20 okay so now I guess that is the work that we have to do inside this problem statement we have to just uh create one abstract class arithmetic and one hashtag method which will simply perform addition of the two numbers and that we have done over here and we will create one object of that class and we'll call it and pass the parameters okay now I will run this method run this class sorry not method and okay okay wait wait wait I have to okay I have to write this entire code inside one print statement because the method doesn't printing anything okay and I will simply copy this and paste Insider when statement now if I run this question class Java class 30 is getting minted on the console yes because the addition of the 20 and 10 is 30. so this is pretty much about this problem statement Java inheritance to okay so we will discuss uh other problems also Java abstract Java interface method overriding method overriding two uh in our upcoming video so thank you for watching this video hello and welcome back to the new video Java tutorial Series so this is the continuation uh continued video to the exercise that we have started started in our previous video uh so we have to solve the two problems one and Java in it is two in our previous video so in this video we will be talking about uh abstract class 7 interface and Java method overriding problem okay so for the first problem in Java abstract class abstract class okay this is this is the formal definition of the hashtag class you read it we have also done it in our previous video okay the following is an example of the abstract class uh so they have given one example for the abstract class okay and if you try to create an instance of this class like the following you will get an error okay okay now you have to create another class that extends abstract class then you can create the instance of the new class and notice that set title method is abstract 2 and has no body okay set title is abstract and has no body okay and that means you must Implement that body of the method inside the child class okay we have to implement this in the editor we have provided an abstract class book in main class in the main class we created an instance of the class called my book and your task is to just write the my book class okay sample input is a tail of the two cities and the sample output is a title is a tale of the two cities okay so I got some idea okay and let me get into my ID I will create a new class okay Java exercise problem three okay let me increase the font size I will put my main method now okay so they have created the abstract class book okay so we have to create one extra class book okay so abstract class book and inside that uh one string for holding the title of the book title and then one abstract method as they have said abstract void set title okay and once it accepting one string parameter yes upside class we have written and we will write one sorry string get title for receiving the title and inside this will simply write return sorry not Capital return date title okay so we are returning the title over here and wait a minute small typo is okay now it's okay uh we'll write another class name as book so plus notebook my book which extends this book class and inside this we have two give the implementation of the set title method so over here I will write public set title and I will pass the parameter as string title no K set title I am getting error you're gonna require type must be declared after okay now we have implementing that okay the return time should be there now void set title okay now it's okay and this Dot title is equals to title okay this is about the set title method now inside my main method I will create the object author in my book class oh pH equals to new obj might and I will call this method obj Dot set title and I will simply first receive the title from the user for that I have to declare one string variable t i t l e title initially it is empty string and after that I will receive the input from the user for receiving the input I have to create one object of the scanner class scanner SC is equals to new scanner steam dot in okay now I will set the title value to see dot next now it's okay and I will pass that title to this method okay um okay and uh what it's returning get title okay so we have to get this method also now to receive this method I will just simply copy this method and will print it over here get title and I will simply call one Sprint statement and inside the Sprint statement I will write o b j Dot get title okay and before that I will concat it with one string that is the title of the book is this okay now if I run this first it will ask me for the title of the book okay so what they have given to us the title The Tale of the two cities I will simply copy it and I will paste it over here and enter a title of the book is a object wait a minute wait a minute am I missing over here the title of the book is a oh wait wait wait wait wait next next line it should be now if I run it again and I will give it the same now it's okay so the error was in this one if you write next it will get only the one word first word and whenever it receives the space it will just ignore that part to get that whole string you have to write a c dot next line okay so now you here you can see we are giving one input as a data of the notebook uh sorry no notebook book and we are receiving the title of the book is a tail of the two cities okay so that is the part that we have to do okay right moving forward to the next one uh Java interfaces uh and okay so what they have given is uh this is the overview of this whole problem now Java interface can contain only signature in the fields one okay so you read it I have read already you just pause the video and read it so what we have to do is here you can see you are given with the interface Advanced arithmetic which contains a method signature okay into divisor sum and you need to write a class called my calculator which implements the interface okay we have to implement the interface and the divider sum function just takes an integer as an input and return the sum of all its divisor okay so so the divisor of six are one two three and six and the sum of the divisors are one plus two plus three plus six is equal to 12. so we have to return this okay and to do so we have given our here and did The partially completed code in the editor completed okay so let me create one class name as advance arith m okay sorry for comment okay and I will import my main method I will get it over here and I have to write one this what we can say interface so I guess they have written interface already okay I will just copy this interface from here and I will paste it over here okay wait I is not getting it now it's okay uh let me format it so over here I have copied this interface so from here and now uh inside my arithmetic Advanced arithmetics class I need to Implement I guess that one okay so I will write public int let me just copy this part name of the method which accepting the parameter of integer n and inside this I will write int I need one variable known as sum 0 I will initialize with and I will enter my for Loop and it will start from Ink and D is equals to 1 whenever D is less than n and each time I will be doing D plus plus okay and set this for Loop here I will check if that n in mod d equals equals to zero if it's so sum is equals to some plus is equals to D okay and after that after running the for Loop I will just simply return this sum okay uh so this is uh pretty much that we have to okay okay okay wait wait wait wait wait why it's throwing the error let me check okay uh class Advantage arithmetics is public and should be declared inside the advanced arithmetics dot Java okay okay wait I know the error now it's okay the file name and the class name is different that's why the IntelliJ ID is showing the errors okay and inside the main method uh I will just create the object of this class and using that object I will just call divider sum and it will pass the same value that they have given okay so they have given 6 as an input so let me give it as also 6 as the input and I will pass it and this method is returning the sum so I have to write this whole thing inside one print statement so that the return value can be printed on the console okay so if I right click and click on run the 12 should be getting yeah 12 12 is printing on the console so this problem is also it's done okay so I hope you you can solve this remaining problems uh if I I can solve also so I want you to solve let's give it a try try to solve this uh questions uh check out the discussion forum if you got stuck anywhere in between uh check out the leaderboard uh submissions your previous submission should be come here and edit editorial will be open uh one don't open the editorial you will see the answer directly uh first try to answer these questions try to get the solution and I hope you enjoyed this exercise and thank you for watching this video and I will see you in the next one hello guys welcome back to the new video wherein we are learning the data structures and algorithms in Java so in today's topic we are learning arrays in Java so let's get started so normally arrays is a collection of the similar types of element which has a contiguous memory locations so what do you mean by contagious memory locations so it's nothing but all the elements are located next to each other in the same memory space that is the consecutive blocks of the memory as allocated to the user for the processes uh so there are many types of memory location memory storage types such as hip memories are also there so array uses the contagious memory location so next point is array uses array which is the zero based indexing means at the element that is that stores at the first in the array is is stored at the zeroth index and the next element will store at the one then second and this series will go I go on till n n is the number of number of elements that you declare that the array will store okay so unlike C C plus plus we can get the length of the array using the length member so in C plus plus we use the size of operator which which gives our returns us the length of the array means then how many number of the integers store in that array like that in similar way there is a length member in Java which Returns the same the length of the array which we are using so typically there are two types of arrays in Java so first one is user defined and second one is using builtin class so in this video typically we are going to see the user defined one and the builtin building class we can see in in the next upcoming videos wherein there is not too much work that we we are going to do we just uh import the class from the Lang like a Java package blank package which is uh predefined in the Java Java and we just make an object of that class and we can use the predefined methods of that class okay moving Aid Java provides the feature of anonymous array which is not available there in C plus plus so we will see what is an anonymous arrays so Java supports the feature of anonymous arrays so so as you you don't need to declare the array while passing and add it to the method so think of a situation where where you have created one method and the method method requires an array as a parameter so where where when you when you are calling that method in the main method so instead of calling instead of declaring the new array and passing the value to that array you can just create create a new int and just pass the values that you want to pass through the array that is known as the anonymous array which c plus c c plus plus language is like that don't provide these features okay so moving on next we have the types of array so there are technical two types of arrays single dimensional and multidimensional okay so let's see uh each of them one one by one so single dimensional array the syntax is very similar to our other other programming languages so wherein we have first declare data type like integer and then two square brackets and array or we can declare it this in three different ways as you can see here so first of all let's write some basic code of that single dimensional array so I'm here and let's declare one public class Main okay and I will write the main method that is public static void Main string Alex okay so first of all let's declare and initiate initialize one array so for that we have we can we can do this int that is that that means the direct array is going to hold the integer types of values let's name our array as a okay equals to new integer and this is the five so this five is nothing but the size of the uh how many integer types of values that added is going to hold okay so here I return 5 that means the array is going to hold the five values in it okay so let me just go and quickly okay array at index one it's gonna hold twenty like this area index to hold 30 and then index three is going to hold for t likewise array at index four foreign sorry 50. okay so here you can see uh my array length is 5 and I have declared the five elements in it so let me just print it on the console so for the printing of an print of an array on the console we just use a for Loop wherein our for Loop will start from int I is equal to zero and it will go until I less than a DOT length foreign and each time I am incrementing the value of the I so this dot length function you can see here I have told you the there's one method named as length of the length member which will return the length of the array so here we are using that same method so quickly just I will system start out Dot print Ln is Okay so quickly just revise it we have declared one array and initialize and we are given the all the values that the oregano store at that index and then we have used the for Loop where we are traversing the array and printing the elements that are stored at the 0 to fifth fourth element fourth index of that array okay so I'm gonna run this let's see so here you can see 10 20 30 40 and 50s got printed on the console because at the first at first is value is 0 and array at eyes I stored 10 so that's got printed here and each time the for Loops runs in welder the I got incremented I write one added to error three I added four got printed so this is the basics basic program of array so this so moving next we have multidimensional array so here you can see the multidimensional array how we can declare that array okay so without wasting the time let's code it out Okay so I'm gonna come here and I will comment it out this code at next I will again declare one array but this time I am declaring the multidimensional array that means I have to use two pair of square brackets equals to let me just pass those value okay so here I have declared one array which is multidimensional array and I have passed values to that okay so let us check how we can print the multidimension array like we have printed here the single Dimension array okay so for that we required two uh for Loops first one is run from I is equals to 0 to I less than 3 and each time it will iterate I plus plus okay so inside this we have we are going to use another for Loop which is going to learn from i j is equal to 0 J is less than three and each time we are incrementing the value of the J okay so in this we are going to print system dot out Dot println array add index I and index J plus one space after each number got printed on the console and after this I will just write system dot out Dot print Ln okay so if I run this now we'll see what happens so here you can see one two three two four five four five four four five is got printed so let's check how it got me how is its printing actually so when we come for the first for Loop the value of the I is 0 and it when it Center for the second for Loop the value of J is 0 and here when we enter and we pass the uh array array as array of zero comma zero zero so what is present at array 0 0 this is the element which is present so this this got printed and when when we go uh again here in in inner for Loop wherein JJs value is now 1 okay and is value is zero so again we are passing wherein G is value is zero and but this time J is value is one so what it becomes array of 0 1 so at position error of 0 1 2 is present so 2 is got printed similarly this for Loop will run uh one time again when is 3 this for Loop gets terminated in a for Loop and it go outside for Loop where I plus plus is done and is value is now 1 again it enters the for Loop whereas in change value is 0 and this time we are going to get those values as I array of 1 0 wherein we get this values similarly we are printing all those values so this is the this is how we can implement the multidimensional arrays in Java so there are many ways many practical uses of this using arrays in Java let's suppose think think about a scenario where you have 100 students in class and you have to store all the data of the student uh let's suppose marks the students got obtained the marks in mathematics so you can't just declare a one one variable one variable for each student so in this scenario we we can use an array wherein we we just declare one array of mathematics marks and we will just pass those values according to the students roll number and which got printed and stored and whenever we want we can retrieve those information or the values let's suppose I want to know the marks or marks obtained by the students whose roll number is 8 in mathematics so I can pass the array name and pass the parameter as a seven sorry because the array index in short form 0 and I will get the marks which is of 10 by the student whose role number is 8. so these are some real life scenarios where wherein we are using arrays in Java so you can go to the websites like Geeks for gigs where they have the practice portal wherein you can just sort those uh field you can apply the filter of arrays and you can set the difficulty level and do the do the practice for the coding I will be sharing on all the required resources and the references you will require to learn arrays in Java in the description box of the video so thank you so much guys I will see you in the next week next lecture hello and welcome back to the new video of java tutorial series uh so till now we have covered arrays in Java and for this video we will be covering some practice questions in arrays okay so what is first question uh write a Java program to sum the values of an array so input to this program is an array so you are giving you are given an array as a input you have to print the sum of the elements of elements which are present inside the array okay so let me open my IDE and I will create one new Java class name as practice questions let me increase the font size I'll write my main method okay and now I have to declare one array which will be given as input to the program int array equals to and I will assign the values to the array here itself let's suppose one comma 2 comma 3 comma 4 comma five comma six comma seven comma 8 comma okay so this is this is our array and now uh I again I will require one variable to store the sum sums value okay now I will use enhance for loop I I hope you guys don't know what is an answer for Loop for it's like a for each loop I will write int I in ARR what uh what we have done here is for every integer value inside array will run this Loop okay and what we are going to do inside this Loop sum plus is equals to I means we'll update the sums value with the value which we are getting uh from inside the array okay now at the last I will just simply print the sum is and I will concat it with the value of sum okay so now if I run this should print the value of summation of 1 to 9. okay the sum is 45 now it's working properly so moving forward to the next question uh write a Java program to print the following grid so this is the grid that you are supposed to print on the console uh it has zero sorry one two three four five six seven eight nine ten uh ten columns and one two three four five six seven eight nine ten ten by ten grid is this and you're supposed to print this okay and so let me get into my ID I will comment this out this is the solution for the question number one I will comment and I will write one one more comment as solution to question number one now from here onwards I will write solution to question two and inside this we required multidimensional array because Matrix is there and so I will declare one multidimensional array over here integer this and this and I will name my array as a which is equals to new integer of 10 by 10 because our grid is 10 by 10 Matrix and after this I require one for Loop of for Loop integer I is equals to 0 and I is less than 10 less than 10 means the loop will run from 0 to 9 which is 10 times and each time I will increment the value of i as I plus plus and inside this Loop uh again I require one more for Loop to track the columns first first row will track the rows and second for Loop will track The Columns and inside this I will write intj is equals to 0. whenever my J is less than 10 I will do J plus plus okay and inside this inner for loop I will be doing system.println person 2D and I will I will pass it a value as any at ith index and rare J sorry jet index Okay so after this I will do this okay now it's okay wait I will again simply print the value which is inside the array at I I comma J index and after printing the inner for loop I need to move to the next row and for that for that I will simply write one print statement so that I though so that the program execution will get to the next line okay now if I run this class you can see Zero Zero is getting printing on the console uh one mistake is there I have written print Ln instead of I should write print so that every time a new line should not get printed on the console now it's okay fine yes you can see 10 by 10 uh grid is printed Matrix so this is this is the expected output that we have we want to print on the console okay so next question is write a Java program to calculate the average value of the array elements okay so you have given one array so you just have to print the average of the elements which are present inside the array okay assuming that the there are integer values which are present inside the array okay so now again I will comment this solution of the question number two and I will write down one more comment which is solution to question number three okay so first of all we require one array okay so I will declare one array of type in of type integers and I will name it as numbers which whose value is equals to new integer add a and I will pass those values here itself let's suppose I will pass 20 comma 30 comma 35 comma minus 15 okay comma minus 60 comma minus 100 okay so these are the value just random numbers I have passed to the array and I have to calculate to calculate the average we have to calculate uh sum of the elements which are present inside the array first okay so for that I will require one variable I'm going to sum I will assign it value as 0 initially and after that I will require one for Loop to calculate the sum of the elements which are present inside the array int I is equals to 0 now I it's less than numbers Dot numbers dot length numbers dot length methods will return the length of the array okay and now each time I will be doing I plus plus okay why am I getting error yeah yes I have written this okay now it's okay uh what we are supposed to do inside this is update the sums value okay so previous Value Plus the value of of the current element present inside the array okay now it's okay we have got to sum of the elements which are better inside the array now we just have to calculate uh average so to calculate the average and again declare one have a double average variable of type double and I will simply divide this sum by the numbers dot length okay and now I can simply print the AV average of the heavy elements are and now I will concat it with average and now if I run this I should get the average averages 4 okay now it's okay and working fine if you calculate the summation of 20 plus 30 plus 30 35 plus minus 16 plus 60 minus 100 and it when you divide it with the number of elements that is one two three four five six and then you should get four as a output that is the average of the array array elements okay so these are some questions again I suggest you that you go to the Geeks for gigs or any of the practice portal uh like hacker rank or hacker you just go there and apply the filter of arrays and set the difficulty level to easy and try to attempt those questions try to solve this question it will help you to improve your logic building in problem solving okay so thank you guys for watching this video hello and welcome back to the new video of the Java tutorial Series so so till now we have covered the theoretical part of the array and we have also done uh some uh easy level questions of the array and in this video we'll be talking some uh medium level of medium level question of the array which requires some searching and sorting techniques uh so till now I have not discussed you the not discussed the searching and sorting algorithms which are there for used used in jar arrays so in upcoming videos we will cover that don't worry uh there are a number of the Sorting techniques and searching tests there are two two searching techniques are there which is linear search and variance binary search we will cover that in our upcoming videos so what will be the agenda for this video is I will be covering this uh three uh medium level questions which are arrays add this question so so I again these these these many questions are not enough for you to practice you just have to get your hand dirty on the programming uh so what I suggest you you just go to the any any of the portal or Geeks for geeks hacker Rank and hacker hacker are register there uh try solving uh questions on the arrays set the difficulty levels as easy medium then hard okay so practice more and more so that you can improve your logic building okay so let's get started uh what is the question write a Java program to test if an array contains a specific value so what these programs what this in this question what we have to do is we have to search for an element uh which is given by the first of all we require an array and inside that array you will be getting one uh element which is of uh arrays arrays of type into arrays holding the integer values itself and we uh you have to search that element inside that array whether that elements is present inside the diary or not if that if that present inside the array you just simply return true Boolean value and if that elements doesn't uh present in inside that L array you just simply return false okay on the console okay so let me get into my IDE and I will just simply comment this out uh this is our previous videos Solutions okay and I will simply comment and here I will again comment and I will write medium question one okay medium level questions one okay uh now I will be creating one method inside this and since then since this method is probably I will declare it as a public and I will declare it as static because I have to call this inside my main method and which is test static method okay static uh and this is this will return a Boolean value either true or false it will return true if that element is present inside that array and it will return false if that element is not present inside that array okay and I will write uh My Method name as contains contains means whether that element is inside that array or not you can add anything whatever you want and I will pass my array and item means the value that we have we have to search inside that array okay and I will simply write one for Loop and so I will write integer I in array what we have to do uh we have to check if the array at ith index is equals to equals to um is equals to equals to item is equal equals index uh not just uh sorry uh I have followed the traditional for Loop over here I just have to write I is equals to equals to item oh sorry about that and I will write inside this return return true okay return to I guess this cannot return a value from a method with white word result type uh why am I getting oh wait I forgot that this is the separate method uh let me just remove this my main method so that program can understand this is as a separate method okay uh now it's okay I will import my main method over here why am I not getting wait a minute let me check this whether oh yeah sorry I have not ended the method now it's working fine I will get my main method okay now it's working right okay and after this for Loop uh when the program execution will get at line number 36 when we doesn't uh find any element which matches to the item that we have passed to the method okay so in that case we simply return false okay now it's okay and now we will call that method inside this main method for that before that uh I will declare one array int array which is equals to uh I will simply assign the values over here itself or 10 comma 20 comma 23 comma 30 comma 45 you can give any value whatever you want and after that I will require one variable item means the I value that we want to search inside that array and let's suppose we have to search 23 inside that array okay and now I will just print the call the contents method and I will pass array and item as my parameters to it okay now if I run this since the 23 is present inside this array the expected output should be true yes it is returning to and now if I give a item value as number which which is not present inside that array then in that case I should get false yes it is getting showing false okay now it's working fine so this is the solution to the question number one and what is the question number two second question that is fifth question write a Java program to find the index of an array element so we have to find the index of an array element okay so in this case we want we have to get one array from the user and we want one item like here we have declared over here one item should be there and we have to match whether that item is present inside that array or not if that matches we just have to return the index at which the item is whether inside that array okay this is the idea behind this question I will comment this out and this statement also and now here I will write one more comment uh medium question two and for this I will create I will create one in method by the name of find index because we have to find the index of the element that that is present inside the diary and I will write public static the return type should be in because we are retaining the index that is the integer value okay those are the method name is find index and this method is uh receiving one array as an input array as an input and integer uh t let me give a SD okay okay so what we are going to do inside this we will check one base condition if my if the array is equals to equals to null then return minus one this is the this is called as base condition in programming uh you have to check the corner cases whether these are the cases uh that you need you need to handle or this will improve your space and time complexity of the your algorithm because if the array is horizontal means array is empty there is no point checking doing all this uh running those Loops doing all those processing tasks then it it you can simply return 1 because if the array is null you are not getting going to get that element inside that array okay so this is the base condition that we have to check and now here I will write integer length equals to array Dot oops sorry error.length and I will require one more variable I is equals to 0 and I will declare one while loop and set this I will write I is less than my length okay uh I'm doing this task I'm running this while loop whenever my I is less than left so initially my value is 0 and length value is uh is the number of elements which are better inside that array okay it can be anything 5 10 whatever the number of number of elements you pass inside the array and inside this for loop I will check one if condition if my array at ith index is equals to equals to p okay T is nothing but the value either item that we want to find inside that array in that case we will simply return the value of the I uh return the i i wins the well in this highest value I represents the current index at which the loop is running so if that elements matches the elements that we want to pass that we have passed to the method then in that case return the value of the I that means return the value of the index at which the element is present inside the diary and if it is not present inside the diary if it not matches with the elements inside that array simply do I plus plus means increment the value of the I and again go further checking whether the I is less than equals to length and whenever my while loop is executed successfully and I till not found the element which is which I want to find inside that array in that case that means that that element is not present inside that array in that case we will simply return 1 okay and now uh I hope this is the thing that we have to do inside this method and now if I go inside my main method I have I will be using the same array and here I will give 23 as an input the item which we have we are searching for in inside this array and add indexing start from 0 so 0 1 2 the expected output should be 2 okay and I will simply print I will call the method find index and I will pass array and the item to this method okay now if I run this I should get 0 1 2 yeah we are getting 2 on the console because 0 1 2 the element is found at the index 23 and let me give the items value as 2 which is not there inside that array in that case I should get the output as 1 yeah we are receiving it as minus one and if I give the array as an empty array base condition we also check in that case also we will receive minus one yeah we are receiving the minus one uh now it's okay now the one more question was there uh write a Java program to copy an array by iterating the array now uh we in this questions uh in this question we have given one array we just have to copy the elements which are present inside one array and take those elements and copy those all elements inside the new array okay so there are several ways by which we can write this code in optimized manner uh okay so for now till now I'm assuming that you know have you don't have any advanced knowledge about the arrays and problem solving so we'll go the basic approach of itself okay uh so now I will comment it out and I will write one more comment over here taking medium question three and now I will comment this also okay so I will write one more method over here okay so what we'll be doing we just we just have to copy the elements okay so in that case uh the method should not return anything okay so the written type should be wired okay so I will public static void um late wait wait wait wait wait do I need to create one separate method first I think no need is there to create one separate method where we can do this kind of shop inside the main method itself okay so one array was declared already over here I will use the same array uh these items value was not required for me to in this question and I will declare one more here array I will call this as new array new integer of and I will give the same one two three four five capacity of five elements inside this area okay and now um to do this I one inbuilt method was there I will use it as uh okay I will write original array and to pin this array inside one go we have one method arrays Dot to string and we have to pass the array name to it okay now it's so address.2 string arrays is the class which is uh provided by the Java uh in the util package here you can see if I hover over here you can see Java dot util dot arrays and I guess yeah IntelliJ IDEA has also imported the following package okay what it will do it will get array as an input and it will convert that array in into the string okay so it will here you can see it it is accepting the errorism parameter and it will convert those array elements into the string and it will print all those in a sequence of that we have stored over here okay now I just have to copy all those elements so for the copying purpose I required one for Loop which will start from I is equals to 0 and which will go till whether till my array dot length and each time I will be doing I plus plus and inside this array I will simply write new array wait wait wait wait a new array at it index means the first India that is zeroth index I will copy the element which are which is present at the head right index means we are just simply taking the first element of the original array and we are assigning it to the value of the value add the zeroth index at the new array similarly when we go for the again checking for the for loop at that time is value is 1 we will simply get the first element of the original array and copy it with this first position of the new array okay and after that once the for Loop is ended uh the same thing we are going to do we are going to print the copied array copied array and will pass new array as an input to this okay now if I run this same array should get printed okay original array is uh 10 20 23 30 45 and copied array is 10 20 30 to 23 30 and 45. so this is the solution to the question number sixth so I hope you got some idea how these searching and sorting techniques are done in Java there are some algorithms uh like I said a linear search binary search and for the Sorting uh bubble sort heaps or Radix or merge merge sort is there there are so many uh sorting techniques we will also cover that all these algorithms in our upcoming video but before that you should go to gigs for gigs or hacker rank to try solving some questions so that your logic building will get improved uh in the programming okay strength thank you guys for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered arrays data structure uh so what I'll be doing is uh we'll be covering some hot hot topics hot interview questions which are covered or frequently asked during the interview processes of the many companies okay uh so these are the basic one uh that that the interviewer may ask you to test your problem solving skills okay so if today in this video uh let me just open uh create one Java class and I will rename it as net supports remove elements okay so let me what I'll be doing is let me just increase the font size okay wait I will increase the phone sites okay now it's okay okay so I'll just comment out the question so what we have to do is we have to remove the Indian numbers from an array so what we have to do is we have to write one function where we have to pass one array to that function and that function will return you the new array where all the elements are odd ones okay so what it does it will remove the all the even numbers from the array that you have you have passing to that function okay so enough talking so you know I will give you an example let's suppose okay wait let me just comment it out and this is an example array we have this array let's suppose we have elements random elements three comma 2 comma four comma seven comma eight okay so uh this is uh the array that you have passed to the function and now uh the array which will be returned by our function is 3 2 is removed because that is your even number four is also got removed because that is also even number seven and eight is also removed so this is the expected output from your function function okay uh so first of all let's break down our question so we have to remove the even numbers from an array right so first of all we have we need one uh way where we can count the total number of uh even integers that are present inside that array right so we need uh one way to count uh step let me just call it as steps steps that we need to solve count the number of uh not even that that let us count odd numbers so that okay after Counting step number two is we have to create one new array of that size of the size equals to the odd numbers present inside that array right so create a new array of sides equals number of odd numbers right now after creating the array we just need to iterate through this through the array and check whether that number is or if that number is odd we just simply take that number and put it inside the new array okay so I will write if number is odd take it and put it inside new cell okay so these are the steps that we have to follow okay so let's go and create our main function first I will like my main function and inside this main function I'll create one array I'll be taking the hard code hardcoded values you can also take the use input from the user by taking the creating this object of the scanner class as you know till now I hope array of size let's suppose five and wait and I will pass the values uh let's let let me let me give the above values itself three two four seven eight okay now I'm getting the error put it now it's okay okay uh now we have created one array and now I will write and one function function call before that I have to create our function over here I will create one function okay so my function uh doesn't return anything it just creates a or else I can return I can return one array um okay for now I have not written anything I will just simply write void my function name or else I will write I will return that new array itself okay you can also write while but one extra thing that you have to do is you have to print that a new array inside that uh that function okay that's what we have to do extra over here I'm not doing that thing I will write remove even and I will just pass the array to it okay now inside this function first thing we have to do we have to count the odd number okay so for counting part I need one uh counter variable uh let me just call call it as our count is equals to zero initiative zero and we need one for Loop and so this for Loop related from I is equal to 0 to I till less I less than array Dot length and each time we'll do I plus plus and inside this array now we'll check for if condition if current I index is more to is not equals to zero okay so what this line will do is it will check that number and it will check if it is divisible by 2 mod 2 means if it will be divisible by 2. if it is divisible by 2 that means that number is even number and we will not count that number as a odd odd number and we will not increment the value of the order count okay and inside this we will simply increment the uh or count by one or count plus plus okay so first step is done now we have to create a news array of size the number of the odd numbers basically excited array okay so I will write int array this is the result array so I will name it is result of size or count okay okay now inside this I will again need one variable to get to take the track of the indexes of the new uh what we can say new array now inside our for Loop I will just write my inti is equals to 0 and this for Loop will again run from int I plus then Mary Dot and this time we'll do I plus plus and here we are checking one condition if array at height index mod 2. 0 okay if that number is not equal to 0 what that means that number is an odd number and we have to push that number inside our new result array and I will pass as index because indexing of this resultant error will be different uh as that of the our array that we have passed to the function okay and we'll write array add I okay after passing that we have to increment the index index variable also so that next time the I index will be switched to the next uh part okay or suppose uh for the first Value First Time index value is idx value is 0 so it will push that variable and sorry number to the zeroth index and next time uh idx plus plus we will do the 0 to 1 and next time when we are pushing that number to then array it will become one okay now at last I will just simply return our result.array okay and over here I will call that so remove I will call that function over here it means just call it wait wait laughs why am I not able to call this wait a minute guys int remove even more and I will pass Direct I'll do it okay what I am getting here nonsticking method oh wait now I will have to switch it as static because as we know uh nonstatic methods cannot be called inside the static method so our main method is static one that that's why we have to create our new method as a static on it also okay and now this whole thing I have I write inside a print statement print remove even and I will pass our ad to it okay so that is pretty much I think we have to do let's hope okay so this is getting then the build is going on we'll just complete okay this is returning I guess object wait wait wait effect this thing we have to do I think wait let me just commit it out and I will just simply what we can do is create one array every two and you will assign it as foreign all right we need to iterate over that array okay so we have to run run for Loop over here I is equal to zero I is less than ARR 2 dot length and each time you'll be doing I have 5 plus plus okay and inside this uh we'll just simply write not print element only print because it will print all the diary inside the vertical manner okay now I have to just print area of to a guide index yes okay so now it will print the new array which way which is returned by our function so expected output should be 3 and 7 inside the new array let's see yeah three and seven is getting printed only thing is that I just have to print one extra line over here I will just simply write over here itself okay now it's okay fire and again three one space and seven should be printed on the console yeah it will be printed on the console so quick summarize uh what we have done in in this question uh we have removed the even numbers from an array uh so let's suppose this is an array it will remove the even numbers from an array so one thing uh let me clear the way I do in is not the only way you can do it you can also try in the new ways right right now here we have created one new array and we are storing that number inside this array uh we can solve this here by using one one array itself but only thing is optimization should be there okay so that part comes under the time and space complexity uh so we will also cover those lectures in our upcoming videos how to reduce your space and time complexity of your code which will improve The Code by a much way okay so here that's all for this question I will see in the next one hello and welcome back to the news new video of the driver tutorial Series so today in this video we will be covering another question uh which is frequently asked in our interview for interview process of any companies so the question is how to reverse an array in Java okay so let me just create a Java class and name it as first array okay so let me just increase the font size yeah now it's okay I guess okay so let me just give my one comment which is question reverse and edit uh for example uh the original array that we have given is let me just write original array origin arrays so let's suppose one comma two comma 3 comma four comma five all right and the array one that we have to return is the output at mesh weight five comma four comma 3 comma two comma 1. okay so this is the area that we have to return okay so let's go and write this math function okay so we have to write this function so we just have to reverse an error so I don't think we have to return anything so let me just write as method name as public static void as written time because we we do not return anything to after this function and I have to pass the array okay so adding let me call it as numbers because it's integer array and we have to pass start index and we have to pass the end index of the diary okay so this is a question this is the method declaration why we have written static because we are calling this method inside a main method and this method is a static one that's we have written static as the method type okay and we need one while loop okay so inside this file Loop one thing we can do is uh we can achieve this using single array itself means what what is the meaning we just modify the array which will be passed to this function or the method this method is accepting one array right so we will do such things that we will modify this array and reverse the elements and store those elements inside this array itself okay and another way in doing is doing this is you can create a new array and you can create a new array and you can Traverse this original array but in the backward Manner and you can just take go on taking those elements and adding those elements inside the new array what uh but one thing is the drawback of this approach is you have to create one new array right it will increase the space and time complexity of your code itself right there so what we'll be doing is we will modify things in such a manner that we will be requiring one array and we will do all those modification inside this array itself okay so why I will write one while loop while our start is less than 8. okay so this Loop will run until our start in start integer value is less than end integer value okay so what we will be doing is we will write 1 10 variable and I will assign the value to it as integer of start integer of start okay and over here numbers start is equals to numbers sorry number set okay and over here I will write numbers of end is equals to temp and after that start plus plus n minus minus okay so let me explain what we have done here we are just swapping those numbers okay so what swapping means we are taking one element from that array itself and we are swapping that element with the element other element inside that array okay so uh initially module starts well it initially the start value is 0 because the error indexing start from 0 okay and what is the end value end value is the length of that array minus 1 because since the array is indexing start from 0 that's why we have to minus one number from the address length okay and it over here we have assigned the numbers of start means numbers of zeroth element that is 1 to the 10. so initially 10th value is 1 and numbers of start we have assigned to the numbers of n numbers of strategies this this position first position of the array and we are assigning or changing the value of this position as numbers of n numbers of n is 5 so after the first uh after running the nine number the number which is stored at the first index of the array is file and numbers of n is equal to 10 numbers and numbers of temperance and Position will be stored the tenth value to what is the tenth value time value is the first element of the array okay so after this after line number 10 the first and last number got successfully strapped okay and I will just simply increment the value of start now the for the next iteration the start value will be at over here and the end value will be will be at over here so the these numbers will also get slapped and will be at 4 comma 2 okay and when we are at three the start value is also three and ends and the pointer is also pointing at three okay so at that time uh this three will not get swapped since this is the middle point of the diary and after this iteration uh we'll we'll break this condition because start value will be uh over here and and we will go well the end value will be over here and this start value is no more less than the end value which is exceeds and this while loop will break and after that our whole array will get reversed at this point okay so I will write main main function and I'll create one array now which is equals to the let me give that example array itself over here one comma two comma three comma four comma five and I will just call that method okay reverse and I will pass our array comma start index should be zero As We Know and end index is the length of the array that means here uh dot length and since the array indexing starts from the zero we have to minus one because added out length this will return the arrays in length as 0 1 2 3 4 5 but the indexing should uh there for the till four number and now after this okay so we have to paint that array again for that we will do iterate through and for Loop I will write I is less than here Dot length I plus plus and inside this for Loop we will just simply print array add index plus okay so this this is the thing that we have to do insert this question I guess so so let me just run this okay so you can you can see five four three two one is getting printed which is exactly the reverse manner of this one two three four five okay so you can uh you can give as much value you want over here with an array and you rerun this code you will get the exactly the opposite in the reverse way of the diary and you can also take the input from the user from here you can you just simply need to create this object of the scanner class and take the input from the user and pass that array to this function of over here okay so try doing some giving some more important to this function and I hope you got this question thank you for watching this video hello and welcome back to the new version of the travel tutorial Series so so till now we have covered two questions which are frequently Asked in the interview processes and now today we will be covering another question which is to find the minimum or the maximum value inside an array so what they have done over here is you will be giving giving and array and you just find you just have to find minimum or the maximum value from the array array will consist of the integer numbers and you have to find the minimum number from the tab okay so let me just write question over here find maximum for all man Eddie and let me give you an example 5 comma 6 comma 9 comma 10 comma 25 so let's suppose this is an uh example so after giving this array to our function that we have we are going to write the expected answer should be 5 because among those five integers five is the minimum number or else if you finding the maximum numbers the result should be 25. who can do anything so you can find minimum as well as the banks okay so in this question we will be finding the minimum you can try for the maximum one if you get some error you can do comment out I will be giving you the reply okay so I guess we have to find the minimum value for that we have to return that minimum value inside in the integer format okay so the return value of the written type of the our method should be integer okay and our method should be static because we are calling it from the main method of type in I will name it name this method as find mini mode okay so to this we will be writing array because we need to pass that array to that function okay so inside here I will be uh need one Min integer variable which will store the value of the minimum welfare minimum number from that array so initially I will be doing initially I just assigning the zeroth index integer value to the minimum variable over here okay and now we need one for Loop which will iterate through the entire array that we have passed I with less than error dot length and each time we'll be doing I plus plus okay so we need one if condition over here array at I is less than min okay so if if that's the case we just need to update the value of the I mean mini variable okay so what we are doing uh doing over is array at I so let me give an example if if it is the case that uh array is a trading for the first time so let's suppose this is the it's array and added index that is zeroth index is 5 so this is the element we are assigned it to the means value yes so let's suppose means the mean value is 5. and if condition we are checking added I that is 5 is less than 5 so this will be evaluated as false so Loop breaks and will come out of the loop and uh for the second time I will do is 1 so array at I means array at one edit one is six is six less than five no this is not this is not the case we will again if condition is evaluated as false again we increment the value of I and again we will check uh whether array at 2 error to smile nine is less than min mean is value is 5. again it will evaluated as false so in in our case it it will never evaluate it as two and in an unless there is no number inside an array Which is less than five if that number is less than five it will just simply update the value of the mean to the minimum value that means that that iteration value okay uh and after this successful running of the for Loop we will just simply return the mean value you can also find the maximum value in this same manner you just try once finding I will just write in Array and again you can provide your own input also nope no issues five comma 6 comma 9 comma 10 comma 25 comma 4. okay and I will just call find minimum I will write now we're ready and I will just do this entire thing inside this print statement so that the value that the function is returning that is the minimum number should get printed on the console over itself okay so if I run this uh 4 should get printed yeah four is getting printed on the console let me just uh modify one condition now 5 should get printed yeah so let me just try with the negative number oh let's suppose negative nine so what do you think what will be related yeah you guys right now minus 9 is getting printed on the console so this is pretty much about finding the minimum number inside an array you can do this some modification inside this code to get the maximum number try building your logic because by watching these kind of videos uh just watching the problem solving videos will not help you improving your problem solving skills you have to practice a lot uh transform the the focus portals uh problems or hacker and hacker Earth there are so many portals are there try solving those questions and so that you can build build a solving logic okay so thank you for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so today in this video we'll be showing another problem of array so that it that is the finding the second maximum value inside an array so in our last video we have covered uh finding the minimum or maximum value inside an array so in this video we'll be covering another question which is asked many times uh during the interview possible that is finding the second maximum value inside array array okay so let me just create one call a class called second X and I will let the question so what we have to do is find second Max value in Array okay so I will give you one example let's suppose one comma 2 comma 5 comma 9 comma seven this is very so what is the expected output should be so the highest value is 9 and after 9 highest value is seven so the output of this uh array should be 7 so this is the thing that we have to do so for this we will write one function and that function will be returning the second maximum number inside an array so the return type should be of type int so let me just create one public static method of type return type int and I will name it as find second Max you can also try finding the second minimum number of from this array so try solving it you just have to say simply change some conditions so that you can get the minimum number which is second minimum number from the array okay so here I need one variable to take the track of the largest element inside that Arrow okay so integer Dot mean value okay so don't worry uh you will be asking what is that this mean when you represent okay so here you can see if you hover over here uh Java has some predefined values inside the language and these are these are nothing with the constant okay so which are defined by the Java itself if you write integer document value some value is assigned to it that is minus two one four seven four eight three six four four eight so this is the values assigned by the Java you can use it inside your code uh you can also write max value as other constraints are also defined inside the Java so uh if you want some overview of this you can just go over here and write so Java for instance and if you go over here you can find the this article which gives you pretty much idea about the Java constants okay and now moving to our question uh I need again one add one more counter variable which takes not the counter variable a variable which carrier tracks the value of the second largest element s inside the array so integer Dot mean value and now one I will require one for Loop which really trade through entire array again the Lynch a ARR dot net and each time we'll be doing I plus plus inside this I will write one if condition uh that is array of I if it has Max then I will just simply write second Max assign the second max value as Max value okay and I will just simply update the max value as air out of I I don't worry we'll do don't dry and taste to check what is going on inside this code Okay so don't worry be with me uh RFI is less than second Max and will require one more and so I hope you remember this for this ad and what is all and means both the condition should be evaluated as true until an endless both conditions are evaluated as true Loop uh the equivalent controls will not enter inside this LC flow one once when all these both the conditions are evaluated as to the then and then only the program control the execution flow of that code should enter the inside this LC flow okay so edit hi is not equals to the Max so what if that's the case inside this we will be doing second Max is equals to ARR off okay so this is the thing that we have to do inside this for Loop and after after execution of the for Loop we will just click it on the variable second Max okay and now inside uh our main main method we will just create one new array and we will pass those values as we have taken inside the example like comma 9 comma seven okay and now I will call that method uh that is fine second left and pass our array Okay so so first let me run this and check whether we are getting the correct our yeah seven is getting minted on the console which is the second maximum number inside the direct and let me once check by changing some values as eight now this time it should be print on console yeah it is getting better on the console so wait let me just put one debug pointer over here and try to debug this code so that you guys can understand this easily okay oh okay so let's now when the program with Exhibition at line number 23 uh this array here you can see one two five nine seven eight it's passed to this fine method okay the exam of the program execution flow comes to this method call okay and now uh so here you can see uh Max has the value assigned as this value we have seen the predefined value which is assigned by the Java to this mean value constant okay so second mind second Max is also assigned that value so for the first iteration is value is 0 here you can see and if when that if condition is checked the max value is this and is value is uh zero here you can see and let's go ahead okay so f for the first time so array of I is all obviously greater than Max because this is the value that we have assigned minimum value okay so next a second Max has assigned the value this okay now again we'll check where I is equals to 1 here you can see I becomes 1. and now this time uh we'll check error at 1 errat 1 is 2 whether 2 is greater than a Max uh value that is one yeah obviously we will get inside this Loop we'll update the second max value as 1 which is the previous version we'll update the max values as 2. here you can see Max value is updated as to and segments will be updated as one okay come here we will check this uh and again we will check we will come here we will assign the second Max folder S2 and I'm gonna update the second uh max value as 5 because till now the maximum value is 5 inside the error here you can see we have updated the max value S5 and second Max will do H2 and again we will run this Loop for I is equal to 3 so what is the element as I is equal to 3 0 1 2 3 0 1 2 3 9 whether the nine is and greater than 5 because it is will come inside this Loop we will assign the value of second Max as 5 and we'll update the max value as 9 so after it's successful completion of the I value is three uh our max value is 9 and second max value is five okay so for now I is equal to 4 I is equal to 4 is 0 1 2 3 4 7 7 is uh greater than nine no we'll break that if condition will come inside the elsif condition and now inside this relative condition uh once we check this Airship condition will be evaluated as true and next value is 9 and now we'll update the second max value as seven okay seven itself okay now again we will run this Loop we will do these steps and and at last we will get 8 as the second largest number inside that array which is true here you can see one two five nine seven eight eight is the second largest element inside the diary uh okay so which is returned to this a return statement over here and after that return statement we will come here at line number 23 where we have left to that program is called and here we can print that number on the console and exam exams process successfully and it is completed on the console okay so this is how a this program works I hope you got this question try solving and finding the second minimum number inside that array okay so for this for this video this is pretty much thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today again we will be solving uh one another question uh which is frequently Asked instead of Internet processes and uh the question is how to move zeros to the end of the array okay so let me just create one new Java class with Java class and I will call it as move zeros okay so let me just commented out our question move zeros today and of the array so this is our question so it suppose uh we are given arrays six comma 5 comma 0 comma eight so I think the result should result and add it should look like it's six comma 5 comma 8. comma zero so this is the resultant error we have shifted all the zeros which are there inside this uh array version array to the end of the array okay so this is pretty much we have to do and so since we are doing on this operation inside that array itself so I don't think so we have to return anything uh after that function call so I will for timing I will call it as static wired but sorry void I will name this method as move zeros and I will pass array and when integer okay so inside this I will assign it as indj is equal to 0 and I will go call it a forward run run for Loop so our for Loop will run a form I is equal to 0 to I tell n n is uh side of that which is passing from the method coil okay and now inside this I will check for what if condition if my arrayhead I is not equals to zero and and condition should be there which states that both the condition should be evaluated as two and then then and then only we will inside uh get inside this if condition okay and errat J equal to equal zero and inside this if condition we will simply uh write one temp variable which has value as and there are five and what we are doing here is just swapping those two numbers okay if we found 0 at that in particular index we will swap that value with the value which is at the end of that array okay so we'll assign area of is value to area of change value that's the last value and after that we will just simply assign error J is going to the test value okay so here we are doing swapping and again we will check on if condition if array at J it's not equal to 0. if that is the case we'll just simply increment the value of J over here okay so I think this is a pretty much true that we have to insert this method uh let me just call my main method and I will write in array and we'll pass this same array that we have taken example six comma five comma zero comma eight okay and now from here we will write the note since our method is returning nothing what we can do is we can call that method and after calling that method we will just simply print that array okay because we are doing modification inside the same array that's why we can print the direct after the method call okay okay well we're getting the error oh okay so I have to write the N value also n value is 4. okay and now if I just wait wait not like this I have to write down for Loop to it right over that array why because I is less than error.length and each time we'll be doing I plus plus okay and inside this for Loop you just simply paint area by one extra space and not Ln because we want the array should be printed in the one line itself okay and now if I run this code the expected output should be six five eight zero yeah six five eight zero is getting minted on the console uh let me just modify and trying to give some more zeros inside this code okay uh zero six comma 0 comma five okay so let me run this so all those three zero should print uh shifted on the on the right hand side of this okay now again let me try to give some more input to this code okay and now if I run this though zero should be shifted okay so we guys we have one issue our zeros are not getting shifted okay so let me just try to figure out what I have done mistake over here and just develop this code and try to solve that error let's find that error okay wait wait wait wait let me just check head check for this of course okay so I think this might be the error instead of hard code values I will just write array dot length I don't think so that is the error but let me check if it is yeah that's the error inside our code uh error.net that we have to pass now you can see all the zeros are shifted at the end of the array and all the integer are first first comes integer and all those zeros integers have come after that okay so this is the pretty much about this question you can try buy your own try solving it and this will improve your logic building skills also okay so I will see you in the next one thank you together hello and welcome back to the new video of the Java tutorial Series so till now we have covered a lot of questions using uh arrays okay and now is this is the last question that we are doing uh on array so after this we will be starting our New Concept that is strings in Java uh so string is has some watched Concept in Java we'll see that in our next videos or for this video uh we are covering one question which is frequently Asked in Java how to resize an array okay so we want to resize an array for this I will just create a new Java class resize array and inside this Java class uh first of all write a question that we want to go home that is how to inside the heavy now let's suppose we have added one to three four five and we want to and now till now the RSI is of one two three five contain five elements elements and now we want to resize this array as in uh array array which is holding uh 10 elements okay so we want to decide the array size as 10 elements okay wait okay nice so this is our goal uh that we have to achieve elements yeah so uh first of all I will write one function so achieve this thing okay and I guess we have to just resize the array so we are not returning anything so for time being I will just write public static because function doesn't return anything I guess for now and resize is the function name and it will accept one uh two parameters that is one array that we want to resize and the new capacity of that array capacity of the direct okay so okay and now uh what I will do is I'll create one new uh where array name them new int of capacity so what is capacity capacity is the uh capacity of the new array that we want to create okay and now I will create one oh wait wait and now I'll create one for Loop and in this for Loop we will run till I is equals to 0 and I is less than our area Dot length and each time we will increment the value of I by 1 I plus plus all right and inside this I will just simply assign uh 10 pad height index value to array at index right so we are just assigning the values of uh let's suppose for the first time where the is value is 0 we are simply assigning the array at zeros position value to the 10.0 position all right right so this fall group will run until the size home at ARR array and after that it will break the for Loop and after that we just simply assign the value of ARR to 10. yeah now instead of pointing that original array ARR now it is pointing to the new array temp all right and now if we write the main function and here I will just simply create one new array named ARR and I will assign those values uh let me give the values or upper itself one comma two command all three comma 4 comma five and after that uh we'll just simply call that function see size and I will pass our array and I will pass the new capacity as added Outlander into two because error.length is gives 5 and into 2 is 10 so that's the thing that you want to achieve all right and after that I will just simply print my entire array my is equal to 0 minus 10 here are DOT length each time I'll be doing I plus plus I will simply print array at I plus one space all right so what we have done quick recap where you have created one function name as resize and which is accepting two parameters one is array and one is capacity uh which is a new capacity of the new array that we are going to make okay and so here we are making a new array of capacity that is given by the user as the function and after that we have created one for Loop where we are simply assigning the values of or original added to the new array and after that we will just simply assigning the value of the value of the array to the depth that is the new newly created array okay and here we have just calling that function and after that using this for Loop we are just printing the entire new array okay so let me run this okay it means yeah so here you can see uh one two three four five is also printing over here and one thing we can do is we're just simply uh print the ARR dot net this will also give us one idea what inside living happen whether the array science is increased or not okay each all right here you can see the other side with the five you can see over here all right this is how uh you can resize the array in Java so thank you guys for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered arrays we have done a lot of questions on arrays we have practice some of the questions which are frequently asked during the interview process and I guess this is pretty much uh idea or the foundation you have you want to learn arrays and what you can do is uh just pause at this moment uh just pause this series uh for some one to two days and go and practice on a practice or more and more questions on hacker rank or Geeks for gigs or whatever code platform you prefer lead code is also there and try solving those uh questions using the array tag and you can also set the difficulties as easy medium high or difficult whatever you want but at least try this will improve your logic building skills okay so if you have done that part so you can continue this way and in this video we will be covering uh strings in Java okay so let me just create one new Java class image string string we just call it as string Java string so okay and uh we'll just simply like the main method okay now it's okay so what is string in Java in Java string is basically an object that represents a sequence of character values an array of characters Works same as its JavaScript what I what I tell you here is you just keep attention over here let me just give you an example if I create one uh array of type characters and let me name it as a CH and I will just write over here and I will assign the values to that array as random a comma B comma C comma D wait mistake C comma D now it's okay so if I create this array and instead of this I will just say it's string s is equals to new string and I will pass it as ch uh so here what I have done is I have created an array of type characters and uh and I've stored those characters a b c d inside that array and I have passed this array to the string s okay so at line number four what it that what it does as it will get that ABCD character as a one single string and it will treat it as a b c d now this is get stored inside the memory okay so it is it is same as uh this is another approach I am telling you simply go and write string s is equal to and simply assign a string a b c d so instead of writing these two lines you can you can still achieve the same output ABCD as here so I'm getting error I have got to written as well yeah you can achieve this is also okay and now a Java string class so string one thing you remember for other programming languages like C plus plus we write string as a s uh as small or in Java you write the string with starting s with capitalize and you as as of now you should know that everything in Java you write with capital letter starts with capital letter is a class in Java so Java provides so string is a class in Java here you can see the implementation path if you hover over this icon and public final clustering which is implementing this this many classes now okay so you can go through this official documentation of java to see how the strings Works in Java so Java stream class provides also a lot of methods to perform operation on the string such as compare concat equals plate length replace compared to in in turn substring we will be covering some of the frequently used functions in string you know upcoming videos so for still till now you just remember string is a class in Java which is which has some different methods which has different methods to implement it okay and now we just go through this concept of string okay now here what is how to create a string object so so now you have understood what is string so how to create a string object let's see so there are two ways uh first one way is by string literal literal and one more ways by using bye new keyword okay so we'll discuss now this this these two points okay how to create object of the string okay so by string literally is created by using double quotes for example for example let me just write string S2 S2 is equals to anything string welcome foreign so this is the one way by which you can create a string which this is the way of buying string literal okay and now by using the new keyword you can also create this string so how you can create let me just click Give an example string this time SC is equals to Visa you just have to write new string and you just pass the same string here that you have written or anything that you want to assign value to that string variable over there okay so this is this is the way two way by which you can create the strings in Java okay so one more constitute there now one thing one thing you tell me what you can interpret just pause the video and think about it string S4 and I will write it as welcome okay and I will create one more stream by the name of S5 and available right the same string exactly the stream string to where the W is capitalized and all all the letters are small small case okay so what do you think here the Java memory memory lock memory allocation will allocate the S4 and S5 the Sim different memory instances or not so in this case in Java whenever we create S4 and S5 which has the same exactly value of strings it doesn't create a new instance what in what exactly the Java do is you can understand by this example okay so here you can see S1 and S2 has the same value of welcome so Java has a string constant pull where inside the heat memory uh this pull is there where Java stores all these values of the strings and whenever you create a new string it it will check through entire string constant pool if there is a string present which has the same value that you have assigned previously it will just point to that variable to this string in the string pull which is inside the hip memory okay so this is one thing that I want to tell you and there are several methods are also there which is there inside the string class let me just give you one example okay let me just give you an example what I can do is okay so look at it I will just come here and I will create I will just use this S4 and S5 itself okay let me just write one more thing here then add B you can add B okay and now uh if I simply system dot outdoor println and I will write string S4 length is and I will concat this string with the method as 4 dot length so this will return the number of characters inside this string that means the string length how many characters are present inside that string okay and now if I run this you can see the string F4 length is seven y seven You Can Count Your count here okay one two three four five six and seven okay seven characters are there that's why 7 is a string so similarly you can perform this same method or calculation on this S5 also uh you just have to write S5 dot length oh wait one mistake you just sanctify over here S5 it should be there because we are printing the length of the S5 okay and now if you come here string S5 is 14 why so because you can count one two three four five six seven eight nine ten eleven twelve thirteen fourteen this method will also come the blank spaces which are given over here after welcome and after at this was also treated as a character in Java okay once I quoting the link so these are some methods and one more method is there which is wait let me just put it over here and yes one more method is there two lowercase so this is the method and similarly there is one more method is there to uppercase which also converts all those letters inside the string to the lower case and if you use the two upper case it will also convert that all the characters of that string to the upper case okay so to achieve this you just simply write S4 dot to lower case and now if I run this let me just commit it out so that you can see only one output on the console yeah you can see welcome is printed but additionally we have given W as a capital and whenever we apply that two lowercase method on the S4 string if it was it was giving the output as W small because two lower case will convert all those character inside that string to the lower case and similarly you can achieve one more uh to uppercase you can see two uppercase now put it in thing yeah all the characters inside that string are converted to the upper case format okay so these are some uh methods which are there inside the string uh what you can do is you can simply come here and come here and write string in Java and one first page Java stream uh which is of java T Point website you just come here we go through it whatever I told you is there itself you can come here and read it and here you can see there are string class methods you got these uh huge list of 28 methods which is implemented inside the string class you can come here you can also check the official documentation of the JavaScript this Java string intern method so you can come here and also see some example of this try those examples look at those methods and that's all for this Java string and in our upcoming videos we'll be covering some again after again what we do after creating this safe Theory creating this theory part we will move on to the coding questions we'll try solving some coding question inside using the JavaScript okay so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered uh add a sense string in Java so from this video onwards we are starting a link list in Java okay so linked list is a easy and more uh my my favorite data structures uh okay and I also love you implementing any links in Java and you can you also love it hash I am sure and so let's go uh so single in English either data structure used for storing the collection of nodes which have the following properties okay so till now we have we have seen arrays okay so let me show you one thing uh here you can see uh so this is this is one I hope you guys can understand by this so till now uh you have seen one array like this okay array so this is the array uh which has a elements one one two three four three in three six six elements which it is storing and now what linked list does is linked list does exactly the same way it stores the data but in the format of node nodes okay so these nodes have some properties okay so let me just uh give you an example of the node itself over here okay so here you can see so in Java linked list this is the No One node okay so let me just write one note over here this is one okay so this is one node which has uh two parts one is data part and one is next part so these this is simply represents one node in Java okay and which is pointing okay so this is n and which is pointing to none okay so this this entire thing in its one node in Java it has some character six okay one properties it contains sequence of the nodes okay in the single linked list uh you can see these main these multiple nodes are connected in an in a chain okay and these are connected with one one on one another okay another node has data and a reference to the next node in a list okay so it has two or two section one is there a section and the next section data section will hold the actual data or the value with that node going to hold and next in the next part it it contains the address of the next node that is it is pointing okay so let's suppose uh like this we have multiple nodes okay let me just give you an example uh let me just get it over here and for example uh these are the two things okay it's derive the two nodes in a two chain two nodes okay one node and here in the next part it is has the address of these nodes these node okay so this node and this node is connected using the next part here the address which is stored here okay now the first node is the head node uh always remember the first node of the linked list is called as head let me just write it all head and the last node it's of the of the link list it's always pointing to the null so if if you consider these type of nodes let's suppose they are uh five and the elements in the five nodes in the link list and after the fifth node fifth nodes next should point to the null which represents that this wrinklage ends here and in some of the reference books you will also find as the last element the last element or the last node of the linked list is called as tail okay so the first node is called as head last node is called as state link list okay so in Java or in general there are three types of Link list okay one is simply linked list second one is W linked list and third one is circular linked list all right so we are going to cover all these needs list in detail so starting with the single link list in this video in this video I will just give you one overview of the single in English what exactly it is so so you understand the in linked list the data is stored in the format of node and node contains the two part that is data and next part data Parts holds the actual value and next box next part holds the address of the next node to which it is pointing so that it just goes in in the chain format and always remember first node of the link list called as head and the last node of the link is called as tail and the last nodes next should point to the null which is represent representing that this necklace ends there okay so this is the idea of the syncline link list uh I hope you got some overview of the link list how English Works in Java and from next video onwards we'll be starting all those operation like insert insert operation or how to print the linked list uh how to delete the element and how to uh get the element of fetch the element how to check the whether the element is present inside the links all these queries so we will solve uh using the linked list in our upcoming videos so stay tuned and thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so in our previous video we have seen the theoretical concept of the sync readings list okay so now from this video onwards we have started starting implementing all those uh functionalities of the single in English that that we want to know in order to understand the single link list so first of all in this video we'll be covering how to make the list in this using a singly linked list okay so let me just uh come here and create a new Java class and I will just name it as simply link list yes now uh you know it's okay so before that uh I hope you have watched our previous video where we have discussed the theoretical parts of the single in English and in that video I was told you that if we need one node uh to make a single linkage okay and that node contains the two parts one is a data part and one is next which representing which repair holding the address of the next node in the list okay so for that uh let me just come here come here and I will create one another plus uh which is our node of the linked list I will name it as node s which is node of sync singly range list okay notice and here we will create that structure I hope you guys remember that structure let me just recall if you don't know what I'm telling so these uh this this uh this structure I am talking about the structure this structure we are trying to create inside this class Okay so this class okay so let me just come here and we know we have we want two parts one is data part I will animate as data and another one is next which is holding the address so since it's it it is holding the address for the next node the so the type of these uh variables should be known as and I will just write this variable name as next okay and now uh one thing whenever these node node is getting created we want these uh that values that the user want user is given should assign to these two variables okay so for that we need one Constructor over here and I will write one Constructor after node s and this Constructor will accept on a parameter that is data which is given as input of either user uh like what what's the data that the node is going to hold okay so and we will assign these Dot data which is equals to data and these represent to the current distance of the variable and then our next should point to the null that is that is the simplest idea of the node we have taken those two variables and we have assigned that value and according to the node this is the idea that is the data part is over here and next part is over and this next is pointing to the null we can change that now uh when the if there are more number of nodes inside the English Okay so for now I guess this is a bit image that we have to do inside the node and now if I go inside my main class which is over here and I will just create one function to make a list okay so to create a single in English Okay and now uh since we are accepting your input from the user we need our scanner class to be imported uh so I will write import Java Dot util Dot scanner so we have imported this kind of class and now since we are going to make multiple functions I guess it is good to declare the scanner object uh globally inside the classroom okay so I will write public static scanner SC is equals to new scanner system.in okay so now we have created this and now I have to do one more thing the first node of the list is called a head and the last mode is called a stay okay so we need those two variables also so we like all right public static so these are no type right so we write public static of type node S one is head and one more is ding all right now I think we are good to go to write the function so I will just comment it out as function to make the singly link the list okay so inside this I will write my function probably static and node s and I will name my engine is make list okay okay so here you can see uh public static uh you know node s is the return type because since this is this this function is making our list we want we have to return the head of the list because uh to access one signal in English or whatever the Ws circular English we need the head head of the list that is the first node of the list without knowing the first node of the list we cannot Traverse the whole list or we just lost here if in case if you if you if you not assigned head uh as the first node of the list and you assign the t uh this second node as ahead of the list then we will never have the track of the first node of the list so that's why it's important to you to assign the head of the list and return the head while you're making the list whatever it is it if it is simply in doubly or circular in English Okay so that's why we have written the return type as known as and we have uh name our function name as make list and we are not passing anything to this function because it's just creating on list okay now uh since okay so assume on conditions we are making one list so initially what do you think a head and tail are null right because list is empty till now okay deal should also point to no so with that part we have done and we will just simply write one print statement that is enter they the data in the list okay so here we are asking the data from the user okay so in data is equal to SC Dot next so we have uh we have no data path which is the entire path is right so it's not the case that this function call will uh just once okay so we are calling that function making the list and we are making uh multiple nodes inside the list okay so for that purpose we will need one Loop which is iterating over each time whenever uh whenever and how much you denotes you want exactly in our in your list all right so for that we will need one while loop and this right Loop will run until and unless the data value is 1 that means whenever you give the data value as minus 1 this root will break which indicates that you are done with inserting the nodes inside the list and you want to close the list and get out of this okay now if and now here after coming inside this Loop for the first time we just have to create the node the actual node of this linkage okay so we'll create the object object of the nodes and I will just name it as new node s which is equals to the new node and according to that Constructor we have to pass one data okay so that data we have taken from the user over here that we can simply pass it over here now at this point line number 14 we are our list is uh our first node is got created now we have to check if one if condition it should be there if our head cos 2 equals to null sorry guys wait a minute yeah so if our head is equal to equal to null that represents that there is nothing inside the list no node is there inside the list and this is the first node that we are trying to insert our list okay head is equals to null so in that case we will just update the head value to the new node new node s and we update our Tails valued also to the new node s okay so this if condition will executed when there is no node inside the linked list that is the first node that we are trying to insert the list okay and now in the else part we will just simply write tail dot next equals to new node s and after that you will write tail is equal to new nodes okay so in this else part so now in this else part uh whenever when this else part get run when if if condition is not executed and if condition is not con executed when there is a no present inside the list and then in that case we just have to update our tail because head is not going to update head is also already assigned as the first node of the list over here you can see head is assigned to the first node we just have to uh point the tail to the next node okay so if so that is achieved in that else block tail dot next is equal to new node dot next that means tail is currently pointing over a over here that is the first node of the list and this next part 10's next part means this pass this part we are trying to assign the next value to this this node value okay so in over here we have simply assigned that value to this and they are simply as uh assigning the Tails value to the new node value okay so our now our tail should point to this new node that is inserted inside the English and how you are connecting to those nodes that is in next part in the next part we are showing the address of this new node over here and we are simply assigning the Tails value to the new node value okay so this is the part that we have to do and after this okay so whenever these are done with the making the list user will enter the minus one in in the console as the data value and loop will be terminated and after that we will simply write return head okay so we'll simply return head of the linked list okay and now uh if I write my main function and call that make list functions and I need to keep the track of the head okay so ahead I will add node s is equal to head is equal to Middle East so it says this uh function is a function is written in the head will store that head inside this local head variable and after this line uh our function called got called and our list is completed and our list is make okay build okay now I hope you guys understand how to make a single English in our upcoming videos we will see some more functionalities of the link list so thank you for watching this video hello and welcome back to the new video of the Java tutorial series uh so till now uh we have covered uh how to make a linked list that recently in English and so for this video we'll be seeing uh how to print a linked list and how to find a length of the link list okay so for the printing purpose let me just go into my page and let me explain you the theoretical part of this link list okay uh how to print the nucleation okay so for the printing purposes uh first of all we need the head of the link list so from here you you will get to know what is the importance of uh getting the head if you get the right head of the linked list you you can find or you can perform all the operation on the English okay so I'm assuming you have watched the previous video where we have make the link list and where we have discussed about the head part and head is basically contains the and which denotes the start of the language okay so for the printing purpose we need that head so that we can start printing the elements from that position itself okay so for the head printing purpose we need head and we are go go on printing the head and head head until we reach at one position where head is head the node the node of the head which is currently there with which next is pointing to them that that means uh here you can see uh assume there are two nodes in this liquid this this one is head and this one is tail and how you can find the end of the link list they have to find the end end of the link list the it is simply nothing but the the net that modes next should point to the null whenever the node is there whose next is pointing to the null that denotes that that is the end of the leakage that means we have traversed all the linked list and right starting from the head to the tail that is the last node of the necklace okay so this so this is the idea behind the printing of the link list and to find the length of the linked list uh let me just first get clear this print list then again we'll come inside the paint and try to discuss the length of the regression so for that purpose we will write one one more function so this is a public static void I will name it as print list and since we to print the linked list we need the head so that's why we will accept one head of the linked list to this function and after that we'll just simply print that elements elements of the list are after that we'll run one while loop and this while loop will get executed until and unless the head is pointing to not okay when the head is pointing to null that means that is the end of the linkage no more nodes are present after that node okay we are prevalencing then till we find null okay so sound head dot data head dot data and we'll just printing space set I will just write only print because we don't want our dish to be printed in the vertical manner okay here if you write head dot data that means head dot data means this is head entirely dot determine this part we are just simply printing the head dot data I mean the data part of that node okay so okay data part of the node and once we print that we will we just reassign the value of the head to the head.next that means we are moving next forward okay that means after after printing this data bar we will just assign the head value to the Head dot ahead dot next to it hold the next next node address okay so we'll reassign this head to this node and now the head is pointing to this one okay now likewise we will go on traversing the whole list and we'll go on printing the data part of that node and after the at the end we got all our node to get to be printed on the console okay so this is the print list function that we want to perform perform and uh you know previous video we have make the list and now we want to print the list okay so we will just simply can't call our method print list and we will pass the head to this subject and now uh let's try to understand the length function of the link list I like how to find the length of the nucleus that is how many nodes are present inside the linked list okay so for that purpose to find the length again we need the head each each time we need head if we if you get the head you just we have performed all the operation okay so uh a blank function is there we need one head okay so we will just simply write over here oh let me just write it over here we need one head that is a starting point of that click list and after that to count the number of the nodes in the link list that is between uh similar to The Print list we will just simply uh perform one while loop while loop which will iterate through all these nodes and it will iterate until the head dot next is pointing to the null that is the end of the link list and we will take one counter variable counter variables which will count the number of the nodes inside the linked list and each time we will increment increment the head to head dot next so this is the idea behind the how length how to find the length of the link list so let's go and implement this function also inside our code base so I will write public static so this function doesn't return anything find length okay and this is also accepting one head of the linked list parameter and again I as I told you we need one counter variable which initially assigned to 0 and well we need one while loop which will iterate through the all the nodes of the list and we will trade until the head is not a personal and once the height is equal to null that denotes the end of the linked list and if it is not equal signal we just simply uh increment the counter variable uh by one and we'll just simply reassign the value of the head to the head.next so this is the thing that you have to do and after uh successful running or the while loop we just have the length of the nodes which are how many nodes are present inside the necklace that will simply print out over the concept length of the this stage light Plus counter okay and after this we just simply come over here and call that length method and we'll pass that head to this structure also okay and now uh if I run this score okay so it is ready to run first of all uh make list function will get called here here you can say enter the data in the list uh program execution comes over here at line number 11 so let's suppose I'm creating one list okay so let me just write one comment over here so that you guys can understand easily I will write one comment so we are trying to make the list like this one two three four five so we want to make this list okay so let's go ahead and make this list okay so I will let one two three four five so at this point uh list is uh all the elements that I want to insert inside the list are inserted and now I want to get out of this Loop which is this Loop and how to get out this get out of this Loop we just have to give the data as minus one so if I write 1 it will get out of this Loop you can see we've got one plug inside our code okay let's try to debug this according to my code this should get out of this Loop it is not getting out of this blue why is it so which is true go through the code and check what is the problem inside this code I'll give it to let me just write one run it one more time stop and return I guess there are some issues okay is it running let me just read like this wait guys it is running okay so yeah we want to enter the data that's one comma two comma three comma four comma five and after that I want to write one so so wait guys I will uh just Rectify what this error okay so guys I after debugging this code I got there one thing we have done a mistake over here while creating the link list that is we are accepting the data from the user and we are according to that we are running this file book okay so once this while loop Got Run we are we we just we have to sub we supposed to rename this Loop and recheck the data value but we are not getting again the input from the user for that purpose we have to time add one extra line over here the C Dot an exchange that that means we are getting again the input from the user and that input is again used as a check to this while loop again we are running this uh link group and now if I run this Main I hope this will work this time and I will try to create one two three four five uh so link is an English slower I will write minus one so here you can see the elements of this list are one two three four five uh which is printed printed by this paint list method and at the length of the list is five since the five elements inside the list is there one two three four five so the little length is five so all working fine uh till now we have covered how to make the list how to print the list and how to retrace the length of this okay so thank you guys for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so today uh we are trying to learn the how to find the or how to search the element inside this in English Okay so till now a quick recap uh we have done how to make the list how to print the list how to find the length of the list and now today we want we have we want to learn the how to search an element inside a single linked list for that uh we'll quickly go through the one paint and how to how to check how to find the or how to search the element inside and then play language same mean English okay so now so things which are required to search an element so first of all we need the head of the list head that is that is clear we need the head of the list and we need variables to check and to store the place at which we found that uh node or found that data inside the list that is variables variables of type integer and then we need one while loop where we can Traverse through to our whole list and check whether that nodes data is equals to the data which is entered by the user or this that that is the data that is user wants to search okay so these are the things that which which are required to search and particular element inside the linked list and so let's go inside our IDE and try to code this okay so I will write one method public static and we are trying to search an element so there is no modification inside our list and we are not returning anything so return type should be avoid and I will write the search element as our function name and this method should accept the head of the list that is the starting part of the list so at the first we will just simply print the enter the data that you want to search okay so we have receiving one input from the user that is the data that the user want to search inside this list and we will just simply write int element element SC dot extent and place which is equals to currently it is assigned to one okay so okay and then create one new node of temp which has the value equals to the header which will assign the value of head to the 10th and we will perform all those operation using that type variable okay and now we have our 10 we will just simply right one Loop and we'll write until our temp is equals to null we will perform this operation okay so what kind of operation that we have to perform we are we are checking one if condition if our element that we want to find is equals to equals to the current temp dot data if it if it is a condition that means we have we have found our searching element and we just simply write paint element found element found at and we will concat it with Place variable Plus th place in the list okay uh so we'll stop and after this if if you find the element we just simply return we don't want to perform uh more operation and if that is not the case we didn't find our Loop uh sorry the element we'll just simply reassign the template due to the temperature data uh not 10. data time dot next because you want to move to the next element of the list and we will just simply increase the count count of the place by one okay and after performing this while loop if it doesn't if it doesn't return this return statement doesn't get executed that means that element it doesn't uh element is not present inside the inside the list in the link then in that case we will just simply print a limit is not presented inside the list element is not present inside the list okay so I guess this is the thing that we have to perform and okay so I hope you guys are watching the previous videos do watch them and then come then and then only come here you know because you don't understand anything what's going on and please like and share to the series and do comment out what is your favorite part and what is if you find any difficulties also comment I will be looking after it okay so now we want to search the element right so we have make the list we have print the list we have length of the list and now we want to search the element uh okay so I will simply call the search element function I will simply pass the head of the list to that function okay and now if I run this uh we'll take the previous example itself we will make the list as one two three four five oh you know what let me just give you some more examples okay so we have the elements in the list of one two three four five six seven and the length of the list is seven and we want to search let's suppose 5 whether plus 5 is present inside the list or not okay so you can see element found at fifth place it's a list okay so for fifth place one two three four five fifth place is five which is better inside the list that is correct uh so again I will run this and this time I will give the data which is not present inside the list one two three four five six okay so I eliminated the star one two three four five six and now if I want to find 10 in the list so you can see element is not within inside the list okay so everything is fine working so this is the idea of how to search the element inside a link list I hope you got this concept thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered how to search the element how to the length how to print and how to make the list so today in this video we'll be talking about the how to reverse LD single linked list and how to find the middle node of the single request okay so let's get started so to reverse a single request we what are what are all things that we have required and what is the logic how to reverse a string sorry strain not strain which is a single in English my bad how to reverse a single in English uh first of all we want head that uh which is indicating to the start of the link list and again we need one while loop which is iterating over all the elements of that list and one more two more variables of type node will be required which is one is previous which will hold hold the previous uh node of the list and one is next which will hold the next node of the list and of using these three variables of type node we will just perform this inverse operation of the string uh not answering what I'm saying either it's a single list my bad okay so now we will go and write the code for this reverse of this list okay I will come over here and I will write one more function that is public static of this is this uh we want to reverse a list after reversing a list we want to we want to give the new head of the list through which we can uh Traverse the new list that is the reverse list okay so we we need to return the head which is of type node so here we have written this and we have write the function name as reverse list then this list will accept one parameter which is head of the list and as I have told you we need three variables of type nodes so let me just write those node s I will write notice of current so we need we need the track of current previous and next row current will will be equal to the head of the list that is the current uh starting point of the list and again we require node as that is previous which is currently appointed usernal and one word is there that is next which is again pointed to the null okay so now we require one while loop while loop while our current is not equals to null so whenever our current date was signal until that we will perform this operation what are the what are our operation we will assign the next to the current dot next that is equal that means the current where node battery is pointing it is the next node if it will point away so next we'll hold the next variable next not variable next node of the list and current Dot next is assigned to the previous that is previous will shift one one step ahead okay and previous is equals to correct and after that we will just simply write current is equal to next we will move forward to the list and after performing all these operation we will just simply return the previous because that is the new head of the list which is the reverse list okay and after this now we will just simply need to call this method inside our main main method and to call this purpose I guess we want to make the list we have to print the list I don't think so we need length of the list that will just uh committed out and I will also comment the search part also and I will just write reverse list sorry guys will be worse list and I will pass head to it and after this now we again want to print the list but with the updated head right that is written by this reverse list okay so I will just again call the this paint slash method the only thing is that here the print list will print the list in the way manner that we have given input and here the print list function will print the same list but in the reverse manner okay so let's just paste it whether it is running good okay so we are entering the data one two three four and five uh so the expected output should be five four three two one okay let's see if it is there so elements in the list are one two three four five elements of the list are one wait wait wait we are doing something error in this code we have to give us the list so all right uh elements in the list are we are printing the list we are reversing the list and after that we are again printing tools elements of the list are we are we are getting only one over here why so I think we have one then one mistake inside our code uh let me see we have next will be able to call the next question dot next equals to previous and previous is equals to current and current is equals to next and we are simply returning the previous I guess say this wait guys I will just debug it and let you know okay guys I guess I have rectified the error I found the error that is uh look at here we are treating one head and we are making the list and the head which is written by this make list we are assigning that to the Head please okay the next time we are printing the list we are again sending that headquarters this method so that head is not going to get modified over over inside the print method print list method okay but inside the reverse list method uh our head is getting modified here you can see our head is getting modified and our head new head is our head is at one okay so our list is uh let me just give you a clear idea over here you can see one two three four five so our head is at one okay so to the print list we are giving our head okay our head is not not going to change inside our reverse list method also okay but the reverse list is has its own new head here you can see it was returning one node okay so we have to retrieve that node inside our main method we are not doing that we are just simply again passing that head so that head is pointing to one all right so if you reverse the list after work one should be pointing to the null that is that is going to happen by this reverse list that's why uh this this error was there where reverse list is or printing only one inside this we just have to introduce one new node to catch the new node of the list okay so you load new nudes let me write that as news Okay so this node is hold by this news and we'll just simply pass news to it uh now I guess this will work fine and our reversely should paint it on the console and okay now I will write one two three four and five and after that I have that minus one so here you can see one two three four five is getting maintain which is the original list and after performing the reverse reverse list method on this same list we are getting five four three two one uh which is correct so I hope you guys have found this helpful so do like share and subscribe to the channel and I will see you in the next one thank you hello and welcome back to the new video of the Java tutorial Series so in our previous video we have talked about the how to reverse the list and now in this video we will be covering up about how to find the middle node inside a list okay so let me just go in go into my paint window and I will show you how we can find the Metal Zone of the list okay so to find the middle node of the list since this is it is a link list we can we cannot uh perform the operation that we are performing inside our array to find the link list that is a total element inside the array you divided by two that that stuff we can do inside the array but but in the necklace uh we cannot do that that thing so we have to find another way to find the middle node of the list okay so to find this we will uh try to find the middle node of the middle node of the linked list using the slow and fast pointer approach okay so what it does is exactly so we need to two variables of type node s and uh which which will call it as let let me call it as slow Monitor and fast pointer we initially assign those uh as the heads value okay that is the starting starting of the list and only need one counter variable which is initially a count as a initially assigned as one okay so we need one while loop while what will be doing while our first pointer is not a personal and our first pointer dot next is not equal to none what that means exactly is uh the first node is not uh need should not be null and the node which is pointing to it the first node is pointing to the node uh that node should be present and that should note should not be null okay so these two conditions that we are going to check inside the while if that two conditions won't satisfies this condition will enter inside the loop and we will simply change the value of the slow pointer to the next that means slow pointer will be assigned a new new value of the slow pointer will be this next next next mode of the list okay and we will assign the first pointer value to the first pointer next dot next that is fast Pointer's value will go to the Third node inside the list that is by the name you can think file slope pointer means we are moving slowly we are iterating the list slowly at the first pointer means we are iterating the list by one one node ahead always one node ahead of the slow pointer okay and after this uh running of this while loop each time we will increment the count variable so that we can have the number exactly the position where the middle node of the list is present okay and after running up this while loop we will just simply print the slope pointer data because the slope pointer is a node which is uh exactly at the middle of the list and we will also print the count of a count variables value which will give us the exact position of the element exact position where the node is present inside the list okay so that is the idea behind the finding the middle node of the list so let's go inside into our ID and try to Port this out so to make this function I will write public static and I don't think so we are returning anything okay so I will write white for time being and I will write this name as middle node and this method will also accept the head of the list add and I will simply come here so we are approaching this way in the slow pointer first pointer approach I will just comment it out I will write slow pointed is equals to one star and our fast equals to touch down that that means always the first pointer will be ahead of the slow pointer by the one node and this will gives us the exact beta of the list and we need to this slowing for first pointer we need this slow pointer initially both the both are assigned to the head head of the list that is the starting point of the list and again we need one more notice flash pointer which is also assigned to the head of the test Edition okay so when we need one count variable to find the position of the position of the node that is present exactly at the middle of the list inside the while loop we will write first pointer is not equals to none that is function should not be null and and we will write and condition and I hope you guys remember and condition both the both the expansion expression should be evaluated as true fast pointer dot next a should not equals to null if that is the case we will enter inside this Loop and it will simply assign the slow pointer value to the slow pointer next we will implement the slow pointer nodes to the next node of the list okay so slow pointer is equal to slow pointer dot next and we will also increment the value of the first pointer to the first pointer is equals to fast pointer dot next dot next that means the one node ahead of the slow pointer and we will just count plus plus because we want also want to point the position where the inside the list and after this run after successfully running out this while loop we will we have now the middle node of the list and in the name of slow pointer which is flow pointer is exactly pointing to the middle middle node of the list and the count having count the value of the count is equals to the position of the node that is built inside the make list is the middle okay now here we can simply write middle load of the list is data that is the data part of the list uh which is which is at count is the position of that number position let me call now yes right position in the list full stop and this will give me the middle load data and the exact position of that node inside the list okay so let me call this to call purpose will come inside of method and we will call this function uh middle node not make list middle load and will pass the head to it okay uh so uh I don't think so we want to reverse this I will just comment it out we'll need this also you just make the list you just print the list and we just find the middle node of the list okay now if I run this sorry one two three four five so what do you think one two three four five is there and according to this list uh three should be the middle middle node of this list let's see if it is the case yeah elements of the list list are one two three four five middle node of the list is three yes this is right middle node is three which is at third position of the list that is one two three third position for the list so everything is working fine uh let me just run it again and give it give the even number of the nodes inside the list three four five and six and hit minus one and now you can see the middle node of the list is 4 which is right 4 and which is that whose fourth position one two three four fourth which which is also correct so this is the idea behind how to find the middle node of the list so I hope you are enjoying this video enjoying this series uh do like share comment and subscribe to the channel and I will see you in the next one with the new concept of the single English thank you guys for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered a pretty much concept of the linked list so we have seen uh made a find in the middle node how to reversing the list how to search an element how to find the length of the list how to print the list and how to make the list so till now we have covered all those Concepts all those operations which are performing on the link list which doesn't modifies the linked list right we have not done anything over here we are just simply retriving or checking the list we are processing the list till now but from this video onwards we will start performing on the operation and to modify the list okay so we will be starting with the insertion operation first and then then we will move to the deletion operations okay so basically there are three types of uh insertion which are done at the on the link list okay so let me just clear this first let me just clear this oh let me just clear okay now it's fine I guess okay uh now let me just create one list for you so that you guys can understand it clearly okay so we are making this list and I will write uh I will make this three notes interest okay and each these nodes are pointing to this and this node is pointing to this and this node is pointing to the null okay I will write the lower so that you can understand null uh so this is our 10 I hope you remember what is still uh this is head you know this is the data part and this is the next part okay and this next contents address of this node and this is the first node see the second node and this is the third node in the list okay so this is our list and we want to perform the instruction operation of this list so basically there are three type of operations okay that we can perform on a list uh let me just increase the font size we have to perform this operation on the list okay so first operation is insertion at beginning and second one is insertion app and and third one is insertionate user specified location okay so these three operations we are we have to perform okay and now now you can see these three operation we have to perform okay yeah right so in this video we'll be covering insertion at the beginning so what do you think to insert a new node at the beginning of the list uh what will be operation that you have to perform okay so let's write down those operation that we need to perform uh so okay and we need first of all and we need the current head of the list head of the list okay and then uh we need a third we need to make a new node inside a list before that we need data which is important we need data for the new node data for new node new node and we will make the new node make the new node and after that we will assign that or insert that node inside this list insert the node in list and after that we will return the new head of the list because head is going to change it is going to change because after performing this operation head is head over this way is going to change I will just copy all this operation that we need to perform to insert error at the beginning and I will come over here and I will just comment and paste it off okay so these are the operations that we need to perform I will just tab it over here okay now it's fine so these are the operation that we need to perform okay so we will write one function which is public static and it will return When you know new head of this list so we it didn't type should be node and the name of the method is insert add the insert at beginning so at the beginning node s uh will first will take the head of the list okay for all this operation so again okay so we have received the head of the list okay we have taken this uh in now we need to take the data for the new node okay so we have to receive the data right so before that I will print on the console write the enter the data to insert three node in beginning okay so we are asking for the data from the user to insert which is going to going to insert it at the beginning of the list and now here I will store that data into the data variable SC dot next state and after storing the data now a second part is done now we have to make the node okay so make the making the node is uh pretty simple I hope you guys now we just have to create a new object of the new node s okay wait all we have to do we just have to create a new node okay with node yes let's suppose and we will assign new new node and we'll pass the data into the node okay now it's okay and now wait guys no okay now once we created the node we have to insert that node into the list so for the insertion point of view uh what do you think I will just come to my paint okay so this is the head which is pointing to the second node of the list so if if you want to perform uh insertion operation at the beginning uh let me just create one new node so that you can understand clearly here is the data part and here is the next part okay now if you want to insert this node in inside this list at the beginning what all things that you have to do uh you have to do you think you have to perform Okay so first of all you need to link this node with the current first or the current head of the list okay so by linking means we you have to give the address of this s next and assign it to the current head this okay so this is the first step that you have to perform I will just write it as first step first step you know what okay so this this linking should be done and again now if this linking is done and we are inserting this uh node at the first uh we need to update the head also Okay so at second second operation we need to reassign the value of the head to this new node okay and after that we need to return the head now the head is pointing to this uh okay now the our current new current or the new node new head is this head of the list so these are the operation that we need to perform uh okay so first of all we need to uh connect our new node with the current head Okay so foreign guys uh my laptop battery was third that's why okay so now uh we have created a new node we have now we have also understood what we have to do exactly to insert this mode at the beginning okay so let's let's do this okay we now uh create a new node and that's next we will assign it as head now we at this point we have connected that new node to the Head current head of the red plate that means the current first node inside the list and now we have to just have we we just have to update the head which is head is equals to your node foreign first node of the list and now we just simply return head of the list okay now simply return the head of the list uh I hope this is the thing that we have to perform inside that began okay uh now we don't have to find the middle of the list that will simply comment it out we just need to print the list and now if you notice uh our new head is going to return by going to return by this uh inserted by getting method so we have to store that new head over here okay so we'll just simply write head is equals to insert at beginning and will pass our head to this method okay and after that we will just simply print list again with the new head okay and now if I run this okay so one two three four five six minus one okay so elements is one two three four five six and enter the data to insert in node in the beginning uh that is a typo you don't forget it enter the data okay so now if I want to enter 0 at the beginning let's see if it enters here you can see after uh giving 0 to enter enter at the beginning the new list is zero one two three four five six so zero is getting inserted at the list okay so this is what this is working fine I hope you guys understood how to insert a node at the beginning of the link list I hope about this concept thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered the insertion operation at the beginning and so now in this video we will be covering uh insertion operation at the end of the link list okay so in our previous video I will talk about this instruction at the beginning and in this video we will be covering insertion at the end okay so let me just clear this foreign let me just clear this thing okay okay now we want to insert this say node at the end of the link list okay uh let me just erase this also okay we don't require this one also yeah now it's okay uh so we want to perform the operation and which uh insertion at the end okay so things that we have we require okay first understand that so to insert at the end we need a first of all head of the list again that is much we need the head of the list okay now we need the data that with that data for new node data of new node okay that is going to get inserted now we have data we have the head now we create a new mode creator node okay now we created a node now we insert at the end insert at end and at the end we will return the head of the list data head okay so these are the operation that we want to perform uh to insert a new node at the end of the list okay so I will write it over here I will just comment it out and paste it and I will give one tab and after that we will just simply from here okay so now this is the thing that we have to achieve okay so now I will write my function which is public static and it is returning the head that way it is of type node s and the name of the function is inserted it let me call it as insert at end will simply pass no less remember we simply pass the head of the list first of all we will get the data from the user enter the data that we want to insert at the beginning and I'll just simply copy this line so that I can not write the new line okay and over here I will just simply paste this and node in the end okay and and we have to insert that node and now we will see the data platform the user data is equal to oh SC Dot an extent after receiving the data we need to create a new node uh we create the new node as new node s which is equals to new node and we'll pass that data to this function okay and now we need to insert at the end we need to perform insertion at the end so what do you think we will let we will go into the paint and we will try to figure it out how to insert inside end so two things should be there one is if our head is equal to equals to null what if the list itself doesn't have any element that's list is empty that is head is also point to null and tail is also pointing to the null and then in that case we will simply assign the new node to the head that means if there is no no node in the list and we are trying to insert a new node which is the first node as well as the last node of the list then in that case we'll just simply insert this node inside the list and we will assign it the value as head and in any in case there are some elements there are some node present inside that list we'll just simply uh we have to assign that value to the we just have to assign that current represents the last node of the list we'll just simply write tail dot next equals to new node that means we are linking this node with this node I will just show you we are linking this node to this node by writing 10 dot next is equals to you know and we will simply assign change the value of the tail to new node that means then now the list becomes 1 2 3 and this node is added at the end of the list and this nodes next is pointing to the null now this is our list after insertion at the end okay so this thing we have to achieve over here we will write an if condition to check whether the head is equals to equals to null if that is the case that means there is no element present inside the list and we will just simply write head is equals to you know this and now if it is not the condition uh there are some element dates at the list we'll just simply write we will just simply write tail dot next is equal to new node and I will assign the Tails value to the I will update the value of the tail to the new node node so that our list is like uh it is expanded okay and now at the end after performing this operation we will just simply return the head of new head of the list uh not new head is the this we will just return the head of the list okay and now uh to run this insert at the end we are returning something ahead so I we need that head to be updated over here uh we'll write head is equals to insert at end and will pass that head over here and we'll just simply print the list again okay now if I run this and I will first I will give the empty list no I'm not right not empty first I will give some inputs one two three four okay and after this I will write minus one and uh now I have to insert 5 at the end of the list that is the data and after inserting the here you can see the new list is up printing which is one two three four five and uh before list is one two three four five was not there and now after performing the insert at end operation 5 is inserted at the at the end of the list okay so now if I again run this and this time I will not give any uh prior node in the list I will just write 1 elements in the list are empty because which is not getting uh element list is first empty and now if I am trying to insert 2 in the list the element of the list are two okay so if condition is also getting executed or working fine so this is the way by which you can insert at the insert a node at the end of the list so till now we have covered insertion at the beginning and insertion at the end and in upcoming video we'll see how to insert a node at the user specified location in the single language so thank you guys for watching this video and I will see you in the next one so hello and welcome back to the new video of the Java tutorial Series so till now uh we have covered the core Java concept uh we have cover we have started with the data structures and algorithms we have covered array VR uh discussed some problems on arrays okay I hope you guys are enjoying the series so now uh till our uh previous videos we have started singly linked list okay and in that uh we have seen how to make a list how to print a list how to find the length of the list which means how many nodes are there inside the list we have find how to search an element inside the list and then we have started the basic operations like inserting deleting or finding like that okay and in inserting we have uh seen uh how to insert a node inside a simply linked list at the beginning and we have seen how to insert a node inside a single in English at the end and now again we have seen uh this much these many methods reverse list means how you can reverse a single link list and middle node like how you can find the middle node of the link singly linked list so these are some methods that we have seen till now and so now for today's video I I will be taking a concept of how to insert a node in syncline English at a user's specified positions right so for that let's just get into our paint and see the logic how we can implement or how we can add a node inside a Sinclair link list at a user specified position okay so this is our previous previous paint previous video paint so let me just erase the things that we don't want okay in case you can delete this you can delete this okay fine uh so let's assume that wait uh this is our link list okay this is our uh first node this is our second node this is our third node okay and now if I want to insert a node inside this simply linked list at a user specified positions right so if I say uh this is the single English and you have to insert this node this one right here and this node inside this single English at second position okay so what is your logic how you can uh think how we can insert this new node inside this English at user specified position okay so let me just write a write down here uh so we are trying to insert this new node at position is equals to 2. so right so we are trying to insert this node inside the single linguisher position number two okay so after inserting the whole list should look like this this is our try to form a cursor okay so this is our first node I am talking about the after insert method insert operation so after that the link should be here and after that this uh next should point to this and after that this next should point to this okay so this is the list our list new list updated list after inserting uh new node at the second position so what will happen uh this existing node which is at position two will get shifted at position 3 and new node which is which we'll be going to insert inside the list will be take that position position uh two okay so this is the logic that we have to build uh so first of all uh let's get in our ID get into ID and try to code this okay so let me just get into my IDE okay and I will write the similar method over here okay this is inserted beginning this is insert at end and now I will write it over here so that you can I will and also I will share I will be sharing this code don't worry you can follow this code and try to build your own single linkage and try try to play around this code Okay so let me just okay fine so we'll be uh let me write out write down one comment so we are performing insert operation at user specified location or to be more precise in programming language it is index okay now so since this is a method I will write this public method should be study because we are calling it inside the main method which is static one and think it uh think it guys uh when we are updating we are inserting a new node inside the list so our method should also return one node that is the head of the node uh that like here you can see uh for suppose uh user has inserted this node at First Position then in that case our head should also point to this right so our method should expect expected to return a new head or the uh if it is uh in inserting the node at the first version or any case we are returning a new node okay so our node is of type node s so I hope you guys are watching our previous videos also so that you can understand what is known as why we are written that over there so please watch on all the video and then come over here so I will name it as insert at the method name okay and this method will also first required one head so we are passing one link list to this method and in return this method will insert a new uh node in that list that I use a specified location right so we are passing the head to the list okay so first of all I will be requiring one uh variable name as position and count and I will assign value to both as one okay so both are one and I will just simply write system.out.winterline enter the data to third in the list okay so at this point we are asking we are printing on the console like uh asking the user to enter the data that you want to insert inside the list all right all right and after that we will declare one data variable and we will just write simply since SC dot next hint and you will accept the data value of that new node data part of the new node okay and well after that we will simply write print on this console like enter the position all right so this method will uh what will be do what it will be doing it will be taking the data part and it will take the position right all right so here you can see it will ask for the position at which position you want to insert this node inside the singly linkage that we are going to pass to this method okay so now I will write position is equal to SC Dot next next it okay so now we have covered position we have taken the data okay so now we are good to go to create a new node okay so we are creating a new node node s that is a new node is and we are passing the data to that Constructor of the node S Class so now at this line number one one is one one or four we have created a one node and we have passed the data that is incentive by the user and we have also taken the position from the user okay so now we are checking if the position is equals to equals to 1. all right what that means if position equals to equals to 1 here you can see if entry user enters the position that is of new node should be one then in that case user is user is trying to insert that new node in at the very beginning of the link list all right so in that case uh we we have to perform the some different tasks otherwise there are some okay so otherwise we will go inside the else part we will also Port that one okay so if the position equals to equals to 1 that that means we are trying to insert the node at the very beginning of the link list so in that case we will just simply write new node s dot next is equals to head and we will simply reassign the value of head to node s sorry for the type of mistake okay so what we are doing and doing over here is uh this is our new node we will just simply assign first this next to the Head currently the head will be pointing to the first in first node of the link is right so we are making this connection first to the first node and we are simply changing the heads value to this a new node okay so for after that uh how it gonna look like let me just clear this mess all right so after that it will look like this the head will be uh new node ahead our new node head is this and our second node inside the link list will be this and first node will be this okay so now this we have covered for the position equal to equals to 1 what if the position is uh not one okay or else something then in that case you will come inside the else part and here we will create a new node and we'll assign it name it as previous is equals to head okay and in after that you run one while loop okay and then the condition we are going over here is while the count is less than position minus 1. okay don't worry I will be explaining this code in the using the paint window all right and we are writing previous is equals to previous Dot next okay and after that we will just simply write count plus plus all right and after running this while loop we will simply create one more uh one more node and name it and name it as current and this current will point to the previous dot next and after that I will write new node sorry for that check we'll write new node as dot next should be equals to the current and now the previous dot next should point to new node all right and after that after this else part we will just simply return the head of the list all right so let me explain what we have done inside this else part all right so uh we know if the position is not equals to 1 that means we are not trying to inserting the new node at the very first beginning of the list okay so in that case what are what are all the operation that we have to perform like we have seen over here if you want to if the user gives the position as true so in that case uh we will first we have to Simply look at over here okay so we'll create one uh node by the name of previous and we will assign it the value of head all right so at the very first the previous will come over here previous all right and then which is equals to the head like it is pointing to the first node and after that we'll we'll run our while loop all right so while we are repeating this iteration until our count is less than position minus one so what is our position uh let's suppose I have to insert the insert a new node this new node at the position is equals to 3. okay so look at here map if my position is wait my position is three now wait okay so what is the count value initially the count value is one it will check whether one is less than position minus 1 that is one is less than 2. if it is if it is correct yes then it will it will perform this this two line of code okay so previous is equal to previous dot next that means our previous uh previous will jump over here now the previous is pointing to the second node and count plus plus now the count value will be 2 and now uh when we again check for the condition now this time counts value is 2 and and what we are going to check we are going to check whether the position minus one okay so my position is 3 3 minus 1 is 2 either by 2 is less than 2. so this time this condition will will be evaluated as false all right so if this condition is false then in that case this while loop breaks and we will come over here okay so now our previous which is pointing towards this second node of the list okay and now we will create one more node which is current and which will be pointed in the previous dot next all right so what is what is our previous previous is this and this next part we will assign it to the uh what we have created another node name as current all right so this here our current will point over here current is here and previous is here all right now new node.next is equal to current new node that is our test new node.next so we are taking this next and we'll assigning it assigning it to the current value all right so new node.next is equal to current so now our new node will be pointing towards this node and previous dot next is equal to new node previous dot next is equal to new node so if you can see these are the two uh nodes that we have created previous and current are for taking the keeping the track of the nodes which is previous to the position that we have entered to be uh to enter the new node inside the list and the current is the actual position at which we are we have want to insert that node inside the list okay so after performing this operation you can see the flow of the list would be 1 2 and this will become the third node and this will become the fourth node so we are successfully inserting uh the new node at the position is equal to 3 that is equal to here you can see so this is logic behind this I hope you got this if you're not uh go back in the video and try to understand what what I have covered okay so let's run this let's see if we are not getting any error after before that I will just comment it out we don't require this we will make one list we are print the list and we'll call our method insert at and we will simply pass the head tool to it okay so if you notice one thing uh this method we it accepting one head we that means that we are passing or passing it over here and but in return this is giving us a new a node a new head of the list right then new it is returning the new head of the list so that's why we have to get that new head of the list otherwise uh we are not printing the new list okay so we are printing the old list that we have make over here okay so this way this will not work so here let me just create one new node let me call it as head new so we are taking that new net and we'll again call the print list but this time we will pass the new head to this Method All right so so that we can print the new list after inserting the in node at the user specified index all right so this is we want to do Let's test it out okay so it is asking me to enter the data so let me enter five nodes in the list one two three four five and uh you know if you want to get out of this uh make list function you have to write 1 so it is printing that elements of the list are one two three four five by why so because we are called over here printless method which will be gonna take head of the list and print all the list okay so here it is asking the enter author data to insert in the list so I want to insert let's suppose 0 so that you guys can understand okay so I want to insert 0 at what position let me insert it at position number three over here okay that means sorry that position number three now here you can see a element of the list are we are again calling the print list but this time we are oh let me show you we are again calling this function but this time we are giving the new new head of the list that is the new list that method our method is going to return us that is 1 2 then at position number three uh I have tell the program that to insert 0 at the position number three it is also it is inserting the zero and after that rest of the list will uh will be printed printed as it is Okay so this is the idea of inserting a new node in the single English at the users use a specified location I hope you got the concept please uh we rewatch the video if you are not getting the concept but try to understand and we'll I will share one trick so that you can solve this kind of linked list problems easily you know once we have uh covered all the topics of the single English Okay so thank you guys for watching this video and I'll see you in the next one so hello and welcome back to the new video of the Java tutorial Series so till now we have covered how to insert a node inside a sink living list and that too with the three all three types uh like in the beginning in the end and at the user specified location okay that is the user specified index okay so one more challenge for you so if you can try to solve it so what is the challenge so you have seen how to insert at end how to insert ad beginning how to insert a user user specified location right so now you have to insert a node in at the middle node of the linkage all right so what I am telling is let me give you an example so if the length of the list is 10 okay or suppose let me take X5 okay so and the elements of the list is one two three four and five so at first you have you have to identify which is the middle node of the list okay so in that case a middle node is three I will color it up middle node is three and you have to insert a new node at the position or the index three so how you can solve this so I'll give you one hint okay so for this operation to perform you need to find first the middle of the link list okay so how to find that we have covered one video go and check that if you watch then then it's good here you can see uh we had written one method to find the middle middle node of the list so we have to somehow manage to get first the middle node of the list you have to store that middle node some somewhere and then then you can perform the similar kind of operation that we have performed at over here where we are inserting the new node at the user specified location right so these are this is the operation that you can perform so go and uh give it a try and try to solve this problem enough talking so in this video we will be starting with the deletion operation which we are going to perform on a linked list all right so I will just make one line over here and I will write one comment we are performing delete delete operations okay so for this video uh we'll be looking at how we can delete a node of linked list which is simply linked list obviously uh at the beginning of the link list all right so we are trying to delete the first node of the link list okay so let me just go here this is our previous code go and check that video If you have a checked all right so I will just write one comment all right why it is not okay all right so I will write one comment so we are trying to delete first node of the linked list okay so we are trying to achieve this so first thing first let's get into our paint and try to build the logic for this okay so here all right no more requiring this new node so I can delete that okay wait let me select all right wait wait let me select this area so that I can delete it okay fine so this is our list all right so we are trying to delete this node which is head is also pointing to this node that is the first node of the list okay so we are trying to delete this so when you are trying to delete a node inside a list the only thing you remember you have to do is you have to break the link between those two nodes all right so this is the link that joins this node this is the link due to which our list is going to get completed in the in this direction okay so when we are calling our print list method so we are passing that head if you remember okay and that head is going to get incremented at each time and how this incrementing part is done due to this uh just because of this next part okay so if that if this next is connected to this node then and then only we are going to move and this is forming a chain and this is forming the list of nodes okay so we are just need to break this link so that next time whenever we pass our head we are starting our list from this location and don't forget to upgrade update your head otherwise the for the printless method you are passing this head and this after this head uh if you break this link and then the list will be only this this part only and your code will not work so in that case you have to bake this link and you have to update the heads value to the next value because in that case then and then only if you are trying to pass this head to the printlish method then only this this is our new new list that we are going to build okay and this node will be discarded uh not discarded we will not have any access to this node inside this list okay so this is the logic that we have to build let me just clear this out I need this for the upcoming videos also okay so let's go into our IDE and try to build this up we'll write public static so think about it what will be the return type so here we are changing the head we are updating the head that means we are doing something a modification part inside our list so whenever the modification part comes inside the list there is one the method should return the new head of the list so that we can print it later onwards which is required for the printing the list okay so now I will write node s so this method will return one node that is the new head of the list delete at BK so this is our method name and this method will also accept one head of the list so we are passing one list to this method and in that return this method will delete the first node of the list and uh give us the updated head so that we can print that list later on all right so first thing first we will cover the corner cases okay so what if my head is equals to equals to null okay so if my list doesn't contain any element then in that case I don't need to perform any operation deletion operation all right so head is already empty then how can I perform the deletion operation all right so we will simply return don't know sorry no in that case all right so if this is not the case then we are assuming that not assuming there are sure sureity that's there are some nodes which are present inside that list and we have to delete the first node of that list okay so we will uh create one temporary uh variable of type node and we'll assign it to the value of the header all right so head and temp will both pointing to the first node of the list and we'll write head equals to head dot next and in next part we will write temp Dot next is equals to okay and now after that we will just write return head so what I have done over here is so two three line of code I will tell you so we are first creating a new variable of type nodes name temp so here you can see we are creating one more variable all right so let me just decrease the font size why it is not getting decreased all right temp and head are both pointing to this first these both are pointing to the first node of the list till this time okay so the next line is head is equal to head dot next so now we are changing the heads value to the Head dot next what the next part of this head is going to hold link to the next node of the list all right so we are changing the heads value to this so now our head is point head is pointing towards this node our new head is this uh so head is no more have the access to this node but the temp variable to have access so we'll let temp dot next is equal to no so temp dot next which is pointing to this node we'll just simply write temp dot next now it will point to the so here you can see and after that we will simply return head that that means we are returning this and this causes our this this is the new list after that operation will perform okay so we have what we are doing we are just first of all assigning the temp uh creating one new variable uh temp of type node and we will assigning the value to the head that means the first node of the list and we are changing the heads value to the next node in the list okay by using the using what using next head dot next all right after that I as I have told you you have to break this link link if you want to break this link you have to uh modify this next part so for that we have written attempt.next is equals to none so we are assigning the temp dot next to the null so that uh these temp node will no more have this access to this node and it will point to the null and our new list will be this and this all right so this is the idea behind this method all right so let's get an into our main function and I will call that method all right so we are making the list we are printing the list and over here we are calling delayed deleted at the beginning and we will pass that head okay and after that after passing the head one thing you can remember uh let me go there one thing you can remember this method is returning the new head of the list so we have to create and variable which will be holding our new head of the list which will be of type nodes let me call it as you head all right and we will again call the print list method and we will pass a new header the new head of the list to this list all right so let me run this I hope this will work let me create one list uh as usual one two three four and five and this is the elements let me get out of this and here you can see elements of the list are one two three four five uh this method is printing using the previous head so these are the element that we have entered and these are the element that is going to print it on the pencil okay so after that we have written this method call delete at the beginning so what it will do it will delete the first element of the list that is one and after that we are again called The Print list method okay so here you can see here called the printlash method and this print list method is printing the new list as two three four five why so because we have deleted this first node we are no more have the access to this node and new elements are the new list single English is two three four five so this is the idea behind the deletion of the node inside single link placed at the beginning okay so I hope you got this so in upcoming video we will be saving uh seeing how to delete a node at the end and how to delete the node at the user specified index uh like we have did in the insert operations right so thank you guys for watching this video and I'll see you in the next one so hello and welcome back to the new video of the Java tutorial Series so till now uh we have look at the deletion operation we have again with the deletion operation and we have seen deletion delete at beginning okay so in this video we will be looking at the delete at end so now what I am talking is we have to delete the node which is at the end of the link list all right so before going to the core part as we discussed through paint let's discuss so to perform the delete operation at the end of the linklift what do you guys think what will be required Okay so first thing we will require the access to the previous node right like that is the second last node of the list so as I'm assuming uh this this link list okay so this is our link list and one one thing uh you don't get confused uh some YouTubers have told you to implement this single English without taking the tail uh they are there just uh taking the head of the links list they are not assigning the Tails value and they are not maintaining the track of the tail so and I have taught you uh by taking the tail so I think uh this is the good idea to take till in the link list so that you can have at least the track of the two nodes in in the list that is the first node and the last two so that those are required whenever you perform some complex operation you know on your uh link list we'll see what I mean by the complex operation all right so this is the list one two three three nodes are there and this is the Red Data part of the list and this is the next part of the design this is the link list okay so we are trying to delete the last node of the list so if you want to delete this node uh we'll require the track of this node this is that is the previous node to the last node so first thing we have we need the track to this node somehow we we have to get to this Loop uh get to this node sorry not Loop and after that we can perform some basic stuff that is we will reassign the value of the tail to this so that our new tail will point to the new last node of the list and we will just simply uh not assign this part next value to the null so that our new list should look like this 1 2 and second node is pointing to the null and we don't have any more access to this nodes so this node is getting discarded from the list and this is our new updated list after performing the deletion operation at the end of the list okay so let me get rid of this okay so now we can go into our code IDE and right beneath of this deletion at the first node of the linked list I will make one comment and I will write it as delete edit the end of the list all right so now since uh this this we are making this method and this method will be a public one and static also and now we are deleting the node from the list so our list is getting modified all right so we we are getting a new list so for that this method will also release or means pass or the returns one head of that list new list okay so that we can use the head later on to print print that list okay and we'll write delete at end and this method will also acquire the head of the list that is next to the list oops sorry wait guys wait wait wait wait delete delete delete at end and this will require node as head okay so inside this so as we have discussion of previous video you know we are checking this uh if condition that is a corner case so what do you think uh here here also you have to check on Corner case right we have to check one corner case so what it will be if our head is equals to equals to math that means uh if the head that we are passing to this method that is that head is null or head Dot next is equals to equals to that guys what do you think uh this condition will this is the r operator so I hope you know what is our operator those who don't know I will tell you our operator will evaluated uh this one expression and this one expression and whether any any or operator what it does simply if any one of the condition is getting true this if condition will uh will be executed all right so if the head is equals to equal signal or the head dot next is equal to equal signal if any one of this condition uh is evaluated as true this if condition will be get perform and we'll just simply return simply return the head okay and what we have doing over here is if the head is equal to equal to null means this is the condition where there is no element inside the list all right and this when head dot next is equal to equals to null that means uh the head dot next that is this location is is pointing to the null so what what it depicts is there is only one node inside the list and if there is one node inside the list so technically we can't remove the end of the list and end mode of the list okay so because there is only one layer one node represent inside the list so we can't perform this operation in that case we will simply return the head of the list that means uh this is the condition all right and after checking that corner case if that corner case doesn't evaluate it then we'll simply create one node I will name it as previous so because we have discussed in our logic part we need to keep the track of the previous node of the link list that we are going to delete at the end okay so now we have uh declared one uh variable of previous previous of type node okay so we have to take that currently uh this is previous is pointing over here we and now if you want to delete this element we have to get this this previous somehow to this location so that uh what previous will do it will uh hold or keep the track of the node which is just behind the tail that is the second second last element of the list okay so we have we are performing this while loop so that we can keep the track of that previous uh until previous Dot next is not equals to tail and I hope that what is still you know the tail is the last note of the list so whenever this until we reaches to the tail uh which is the previous node of the tail we are performing this and each time we will be doing previous is equals to previous dot next previous dot next that means we are incrementing the previous value to the previous dot next and uh once we have reached to the previous uh previous node we will just simply write 10 is equals to previous and now we will write 10 dot next is equal to no all right and after that we'll just simply return the head of the list so here you can see we are declaring one previous variable uh and assigning to the value of head we are looping one while loop and we are taking that previous variable to the second second end of this which is the second element from the last of the list and after that we will just simply assign the tail value to the previous that means we are shifting our tail to over here and we will just write tail dot next is equal to null that means this this will point to the null now this will point to the null and this link will got broke and we have no more track of this node which is which is previously at the end of the list and our list will be like this one two and null all right this is the logic behind deletion at the end okay I hope you got that idea and now we will go inside the main method and now here over here we will just call those methods that we have declared above and we'll delete and end we'll pass that head and after that since we are getting the new head from that list so we have to capture that your head work your head equals to and we'll see when you had this okay let me run this okay so we are entering the nodes uh like one two three four five and after that I will write 1 so here you can see uh before performing the deletion operation the linkage would look like this one two three four five and after performing the uh let's delete at end operation uh we are printing again the list and this time we are printing one two three four and we have deleting the element which is at the end of the text okay so this is how the deletion at end works I hope you got this idea how it is works so if you're not get any idea go back and watch this video again so in our upcoming videos we will see how to delete a node inside the single link list which is at the user specified location all right so thank you for watching this video so hello and welcome back to the new bit of the Java tutorial Series so till now we have covered deletion at the beginning deletion at end and now in this video we'll be looking deletion at user specified location like we have seen in the insert operation at the specified location we are trying to delete a node which is user will tell that like this is the list and this is the position and at the node which is present at this position you just delete it okay and give me the new list all right so let's go before writing the code as we discussed our logic inside the paint we'll go and discuss it okay so let's suppose this is our list one two three there are three notes inside the list and me as a user gives My Method the input as like this is the no this is the list you just remove the node which is present at the position two like this is the node that we have to delete all right so in that case oh I want to perform the deletion operation so now we will check what are the things that we have to do so here if you want to delete this node we have to break this link and this one and if you break these links this node will get discard discarded we have no more access to this node and after that you have to do assign value of these nodes next to this this way this node so this is our so after performing this operation what will be the least this is our list one two and we will be not having this notes access anymore after performing that deletion operation okay so these are the thing that we have to do and let's see how we can do this into our Mutual intelligent not Visual Studio code okay let me get rid of this so now here we have to perform uh we have to create that method which will delete our node at the use a specified location all right so I will just create one comment delete at user specified location okay so this method is also public one static and this is also going to return a new uh head of the list so that's why we are writing the return type it as return type as nodes and I will name this method as delete at okay so now uh this method will also require head of the list and it will perform operation on that list okay so first thing first uh like we have discussed in the insert operation I hope you watch that video and like that here also we required one position and count variable and we will assign both value as one okay and now uh we'll write system.out.print align and we ask we are asking they use it as a position enter the position of the node you want to delete okay so we are asking the user to enter the position of the node that you you want to delete okay so after asking that position we have to store that position somewhere so we will be storing that position inside the position variable so you will write SC dot accent you'll get that position from the user and here also we will check one corner corner case what is the corner case if position equals to equals to 1. if that is the case if the position is one that may that means the user is trying to delete the node which is at the beginning that is the first node of the list so we know that how to do it and we have discussed in our previous videos also we will simply assign heads well to the Head dot next that means like here if the user want to delete this this node we just have to Simply uh pass our head to the next node and we will simply return that node from this and from this onwards the list will be that much only and they will no more have their track of this node so this is the corner case that we have to check if the interview and user enters the position as well we will just simply assign the head is equal to head.next now if not if that is not the case will come into the else part and we will create one node notice of name Will name it as previous okay and previous and we will assign it first value to the head and we will run one while loop while my count is less than position minus 1. so uh what is the condition that we are doing well until my count is less than position minus 1 so here you can see uh this is counties one and position that we have entered is 2 2 minus two minus one is one so one is less than one which is not getting evaluated as uh false we are not going inside this while loop so this is the condition uh where I have a small list right so imagine we have five notes in that list and we are trying to delete the node which has a parent at the third index so we have to uh perform this while loop at once because we have to get that previous node to the uh second index that is the previous index that if you want to delete the third index third index node uh you have to get that previous node to the second index node okay so how we can get that we will write previous is equals to previous dot next and we will simply count plus plus and after that while after they're coming after that while loop we will write current is equal to pH dot next okay current is equal to previous dot next and previous dot next is equal to current dot next what I will do what I have done here is I will tell you don't worry then after exiting out this cell tense Loop we'll just simply return the head of the list okay so this is pretty much that we have to do uh so till while loop I I have told you what we are doing we are just simply creating one previous node and we will keep that previous uh upgrading updating updating until an endless will reach the previous node like I'll give you an example so this is the list one two three four and five and we are trying to delete the index which is three and this is our head this is our tail and this is the position at which we are you want to delete the node okay so at first our previous is here so we are upgraded previous and come come that previous to the here so that our uh correct this is the current when we are assigning one current and creating one current and current is equal to previous dot next so after performing this step uh so our current will Point pointing to the index at which the node we want to delete and our previous will point to the previous node of the list okay and uh we'll just write say previous dot next is equal to current dot next we will simply create a link between this node and this node and we don't have a link between 2 and 3 and 3 and 4 because the link which is created by this line is one two four and five so we have no more have the track to this third node inside the list because of this line line we have written previous dot X is equal to current dot next and after that we will simply return the head of the list okay so this is the idea that's okay so let me call that method delete at we will simply pass the head of the list and this method is also returning one head so we have to store that new head somewhere so I'm storing over here and after that we'll write print list and I will pass that new head okay so this is the idea behind deletion that is the specified quotation Let's test it out one two three four and five this is list and uh you can see one two three four five it's a list elements and let's suppose I have to delete the element which is at third index okay which is a third position so I have to delete this three so I have pass 3 as the position don't get confused three is a position not the value so here you can see the new list is returning after that method call is one two four five that is third position element is getting deleted so if you don't get don't get confused I will just run it run it again and I will write it simply 55 69 96 89 now you can see I I know if I want to delete the 96 I can delete it by its position one two three and four fourth position is 96 so I want to delete the fourth node of the list here you can see 23 54 69 and after that 96 is getting deleted and 89 is uh again come at the end of the list so this is the idea uh delete deletion operation at the user specified location so I hope you got the idea thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered single English all right so let me show you if you are watching series uh so that's no problem but those who are watching just want to learn the links list part those for those I am telling we have covered this singly linked list we have covered all the operation we have covered insert operation deletion operation both three types insert at beginning insert at end inserted with a specified location likewise deletion operations are also performed we have uh covered how to make the list how to print the list how to print the length of the list how to search the element inside the list and and how to find the middle node of the list how to reverse list all these operation we have performed on The Single link list and I guess this is the pretty much idea that where we want regarding the link list so now today onwards we are looking for the W linked list so let's get started so what is public link list uh in this video I will be telling you the theoretical part regarding the W links list so let's get started so let me create create a create a list over here okay let me create a list we will try to understand each concept line by line uh okay so this is the one this is the line and this line so okay so till now uh what we have covered is incredits we know inside single link list this is the node this is node which is which looks looks like in single English there is one uh link which is coming from here and there is link which is going here that is one node is connected to this node and this node is again connected to the another node in that list and here this node contains data and here this contains next part okay so why this is this list called as single link list is simple because this node is connected to the next node via a single link okay this is the single link that is getting connected to the next node so whereas in the W enclosed if you can see the node structure is different okay so this is the one and this is this is pretty much simple and single in English but the node inside a doubling list is represented as like this this here here again here and one more here forget about my drawing okay just keep focus on the concept okay uh this is a that is the difference here you have only the data and the next part next part contains the address to the next node in the list and data part contain the actual data so here also we have a data part likewise here also we have data part here also we have data part and here also we have data part but nothing changes over here here also we have next part that is an address to the next next Link in in next node inside the list here also next next and here also we have next here also we have next and uh the this part right over here this contains previous okay I will tell you what is previous just bear with me previous previous okay so and one more thing is there this is one more linking over here this this which we have not seen in the singly linked list all right this is the this becomes the and single English it's uh one more thing single in English you can see uh is One Direction okay that means uh if you start from left it will go to the right only you cannot come back in that link list it will go from left to right you you don't have any way like we have you have gone to the next here from this next node this from this next note you cannot come back okay all right so so this is the thing that we have seen in a single English but in the uh double in English we have node like this you can see they just keep tracking my pointer and each node contained previous previous means previous will hold the address to the previous node inside the list all right so if you if you can consider this one so in this previous part the address of this node this node will be saved over here okay so address of this node will be saved over here and in the next part the address of this node will be saved over here and in the data part as usual the actual data that node is going to hold that will get stored here okay so you will be asking uh what are what is the if it is the first node or it is if it is a large node then in that case the first node previous will hold the value of 1 minus 1 and the last node of the list next should hold minus one okay so this is the roughly I verified uh W English the advantage you get here is you can go from a left to right and you can come also backward from right to left because this this you you can get this idea better better you can check it over here this is the direction of the nodes this is the direction of the notes you can see here here next node and the previous node the only thing is there are two ways you can go front by using the next and you can come back using the previous so instead of having just only one way where you where you are going from left to right in the lovely linked list you have the access to the next node also and the previous node also why so because it at the node part of this double link which contains the three parts that is the previous part data part and the next part previous part will hold the address to the previous node in the list and the next part will hold the address to the next Lane next node in the list and the data data part as usual hold the data by the way it should be in uh integer format character format string format any data type format data can be stored over here okay so this is the doubling fish idea and this is the theoretical part that you need to understand before uh you get your hands dirty using the doubly linked list okay so go uh one more thing you can go in the web browser and you will just simply type uh doubly link list let me show you doubly linked list if you type and then firstly in Java D Point comes and if you go here and here you can see a nice article is there which will explain and all those stuff regarding the doubling list I hope you got some idea about the public increase on the next next video onwards we will be start implementing the doubling list using Code using Java thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered all the operations on the singly linked list so here you can see uh I hope you either followed the series along with me and so we have seen how to make the single English how to print it how to search an element how to find the middle node all the insert operation and all the delete operation as well so what I am I'll be thinking is uh from this video onwards we'll be starting for w link list so we'll uh in our previous video we have saw the theoretical part of the UW link list any for me this video onwards we will be looking for uh how to perform all the operation on Adobe link list all right so for as we have discussed in single English we inquired one node which uh so we have to make a node of our aw link list so we cannot use the node which I which we have made in the single language because in W linkage there is one uh previous pointer as well as the next pointer was there so that we can move for bidirection we can go uh left to right or at the same time we can come right to a right to left right as well okay so for that we have we will be covering uh creating one Java class so I will name it as node D node d means node of uh double in English all right so in this uh first of all we require a data part so I will name that variable data and we will require two pointers that is the node d uh I will name it as previous so that it can hold the it will hold the previous address of the previous node in that list and one more is that node of type node D which is next usually as usual as we have seen in a single language part all right so now here let me call one Constructor of this class so that whenever we create an object of this class uh we have to pass the data data to this class so that we can make that nodes using that data okay so this Dot data is equal to data and it's for the first mode we will write as previous is equal to null and next is also equals to know all right so both are pointing to the two Arsenal uh for the single node okay so now what I'll be doing is this is our node part uh that that is pretty much we have to do and now I will go and create another Java class and I will name it as W linked list W the query list okay and I will hit enter all right so let me just increase the font size let's check whether I can increase it or not no I guess I can't decrease I hope you guys uh this font is visible to you all right so since we are taking input from the user so there is one library that we have to import first so I will import that import Java Dot detail dot star I will import every class from the util package and now inside this will create a object of the scanner class since we are making multiple multiple methods inside this class so I will declare the scanner object of the scanner class uh globally okay public static scanner SC is equals to new scanner system dotting okay so now after creating the object of this class uh let me create two new variables so those though there will be public static off type node t so I will create add and tail so as we have seen in our single linked list lectures so we have here again we require a head and tail so that we can keep track of the first node of the list and the last node of the list all right so now in this video we will be talking about how to create a doubly resist okay so for that I will make one method I will name it as public sorry I will do it in next line public static and since it it is making our new linked list which is of type double link list so it must return the head of the head of the list so that we can get that head and print and perform all of the operation that we want to perform on that list all right so it it will return uh head which is of type node d uh that is the node of the double linked list okay so make I will name it as make list as we have seen our single English lectures okay and so here uh for the first time whenever you create a whenever we want to create a list the head and tail at initial point though those two will be pointing towards the null and now here also I will write 10 is equal to 9 and after that we will simply uh print one line and we'll ask the user to enter the data all right enter the data in the list okay so we are asking Google to enter enter the data in the list and create one new variable data and SC dot extent I will take the data from the user and again we will run one while loop and we'll iterate over this while loop uh until an endless our data part is 1 so whenever the user words uh let's suppose user want to enter inside the five five elements in this like one two three four five and after that user can write a data value as minus one so that this while loop will get break and our W link list will be make it as one two three four five only okay so here we will uh whenever we get entered inside this while loop we know that enter data part is not 1 so there is a user who wants to insert a new node in that list so we will make that a new node B and we will call it as new node D and we will pass the data part that we so this is the Constructor that we have build it over here so we are passing this data to this data to this Constructor and now after passing the data after building that Constructor we will write one if condition and we'll write if head equals to equals to map so think I would think about it whenever head will be null so if it had a heading head is pointing to our Channel if and only if it is the first element that we are going to that we are trying to insert in the witness right so in that case we will just simply uh assign the head value to to the a new node a new node D value and we will assign the tail value is it also equals to New Order because ultimately uh this is the first node inside that list so therefore head entail will both point to that uh element uh so sorry L naught element that node itself okay so we will write a new node d dot next is equals to null and we'll write d Dot previous it also is equals to not so both will be pointing towards General so because there is no uh new node inside uh another node inside that list since it is the first node else uh so whenever if head is not equal signal that means there is there are some elements there are some nodes which are very present inside that wave English so we'll come inside with a else part we will write tail dot next is equals to new node new node B and we'll write new node D dot previous is equals to 10 we will write tail is equals to new node d and we will write 10 dot next is equals to that okay so these are the tasks that we have we are going to perform is if it is head is not equal head is not a questionable so what we will be doing is tail dot next uh is equals to new node so we will assign uh the whatever the node which is at the last the tail is there all right so we are assigning the Tails next value to the node that means we are making that link for the previous node in the list to the to that next part okay and so here uh new node dot previous is equals to 10 and we are assigning new nodes previous to the tail that means we are making this linkage between the last let me show you let me show you let's suppose the the let me commit it out let's suppose uh this is the list one two three and we are trying to insert 4 inside the W link list okay all right so here uh we will as a tail is here ultimately uh this is this is the last element uh in that list tail is here we'll assign the Tails dot next that means this nodes next part to this new node okay so we are making this uh left to right connection in this wave language and we will write new node dot previous that is this this nodes previous to tail so we are making that right to left connection as well and after making those two connection we will simply uh change the value of the tail we will assign the tail is equal to new node because since this element is getting inserted for in the in the list so uh so this becomes the last element uh for now that's why we have to update the 10 since the tail is keeping the track of the last node inside the list all right so and you will write tail dot next is equal to so we assign this next to the milks indicating that this is the last element inside the list okay so these are operation that we have to perform after performing this operation either the If part will get executed or the else part will get executed executed after that we will uh again ask user to give us a new data okay so it will ask again the user to enter the new data and it will again go and check whether the data part is not equals to one or not when it is equal when it is equals to 1 minus 1 it will go out of that Loop and we will just simply return head of the list okay so this is pretty much that we have to perform inside this okay so these are the operation uh I hope you got the idea how to make a doubly links list so uh let's quickly run this so for running purpose we require one our main method so we will write a main method here and inside this main method we will call our make list function and you so for our make list function since the make list function is returning ahead to us so we will have to store that head uh in this head variable all right and after this let me call this okay so let's go and run this if you are not getting any errors we are successfully trying to end okay so here you can see enter the data in the list let me make a list as one two three four five and uh if I say uh it's done I these many elements that I want to insert this list after that I can write minus one and it will came come out of this for Loop not follow sorry white Loop and after that it will return the head list so this is the idea behind how to create a list which is of w type wasting doubling doubly linked list okay so in a upcoming videos we will see all other operation of the doubling English so thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered the waxed uh one functionality that is how to make the doubly links list how you can make one doubly linked list using Java and uh in a previous video as you as you can see we have created created a node um which is after which is of double type w link list which have which can go bidirectional which can go from this node to this node and it it can also come back from that note to that one that is left to right and right to left okay so in the our previous video we have also talked about uh how to create a w linked list so how to build one so if you you haven't watched that video go and check that video first watch that uh then come back to this video so now in this video we will be covering how to uh print the list all right so in our previous video we have built the list so in this video we will uh talking about how we can print the double linked list okay the logic is a pretty similar to the that one that we have seen in the single link list okay so in this video okay let me just first make this notes so that you guys can understand easily all right so let me just quickly make that make that list for you and I will make it as this one this one this this by the way guys how you how you are enjoying enjoying this series I hope do comment out if you have any doubts I will clear it out all right Okay so don't mind my drawing just focus on what I am trying to tell you and you'll get that what I'm trying to tell you okay so look at here this is our W link list so this is the direction that we are first going forget about it let me take my pencil this is the direction and in this direction this is the direction okay so you can go from uh this this direction also and if you want you can come from this direction also so we are trying to print this list okay so first thing first try to let's try to pseudocode this all right so we will try to think or build one logic okay so what do you think how you can print this list okay so uh there is one concept that uh I have taught you in the previous video like this uh we have keeping the track of the head and tail all right so if you guys can remember head head means the node that comes first in that list okay so for that here is the head and tail means the last last node of the list okay so we are going to use head you can also use Tail as well but in that case you will be printing the list in the backward Direction okay so in this video I will be talking how to print the list in this direction okay so you can take it as homework and you can try to solve uh or build one logic where you can uh where you have the Tails axis Tails means this is the last node of the list and you can you you're going to print uh list in a backward backward Direction okay so it's you can take it as a homework so okay uh here we'll use head okay so we will run a while loop to check whether to not check to print this list okay so we will we will use the while loop and you will use the head okay so each time we will get get to that head we will trying to paint that data get to head print the data okay after printing the data uh to move to the next node in the list we have the next uh next uh next ad next pointer which is holding the address of the next node so we will write logic so that data uh data the head will move thank you to the next node let me increase it to the side of the Box okay so first thing first we will get the head we will print the data inside that node uh which head is currently pointing to and where uh assign heads value to the current head dot next so we will iterate through this whole list and when we are trying to stop whenever our head is pointing towards another okay so when our head is point two point will Point towards anal when it when head will come here and we will assign the new heads value to this its next node node and it's there is no next node inside this list so head will pointing towards anal and we can stop at that condition okay so quickly we will go in our IDE and try to quote this out okay so we will here I will make one function or method whichever you you call it public static so we are just printing this list so we are not uh doing anything uh any operation we are just printing the notes of the list so there should not be any return type for this method and we will write print list okay and uh since uh we want the head of the list as our input to this method you will get that head and as as I said told you you will just simply print uh elements in the list are and after that uh we will perform one while loop and our while loop will run until our head is not equal to no okay so if the head is not equal to null we'll just simply print the heads data so we will write head.data we are trying to printing the data and after that we will print one one space because so that our elements can differentiate with each other so one space should be there and after printing this we will uh reassign the heads value to the Head dot next add dot next will assign this value to the head so that way we can iterate to the next node in the list okay so if your head is equals to equal to null that means we are at the end of the list we have printed all the all the elements so we will just print in print One new line so that whenever we build another function so function call gets executed to the new line okay uh okay so here in to run this method we have to call that method we will write print list and we will pass the head that we have stored here while making the list okay so what we are going to do here we will make the list and we will print the list okay I hope there will not any error let's see if we got any error okay so for now it's running okay so now let me give the element as 1 6 8 9 4 5 6 and after that we will write 1 okay so here you can see elements in the list are one six eight nine four five six these are all the elements that we have I have entered over here okay one thing is uh this is printing the new every element in the new line I don't want that because if if there is 100 elements in the list and we are trying to print that list it will take the whole lot of space in the console okay so we'll try to eliminate that uh we can do is print Ln instead of print Ln we'll write print and we can again call this method so that instead of printing the each element in the new line it will print it in a single line itself okay six six five one two four five minus 1 will print a six six five one four five nine these are the elements that I have entered over here you guys you can see so this is the idea how you can print the W linked list so you can try to print this same list in a backward for backward Direction you have the Tails axis that is the last note you can build one logic and try to print this list in a backward Direction okay so thank you for watching this video and I will see you in the next one
