With timestamps:

00:01 - hey guys welcome once again
00:03 - till now we have seen how we can create
00:06 - our first
00:07 - nest js project and we have seen
00:10 - a broad overview of our nest
00:13 - js project now we want
00:16 - to add some end points to our
00:19 - rest api so what my plan is
00:23 - let me show you uh the api
00:26 - documentation which i want to implement
00:30 - so our api name will be car manager api
00:35 - which will be able to add a car
00:38 - or read all the car information
00:42 - or read full data of an individual car
00:45 - or it's going to delete a car or it's
00:48 - going to
00:49 - uh update a single car
00:52 - and these are the routes or endpoints
00:55 - which i have defined so we are going to
00:56 - define
00:58 - a get cars route and then
01:01 - we are going to define post car
01:05 - get car by id put car by id and
01:08 - delete car by id so this is
01:12 - what we are going to do and by the way
01:15 - you can also create
01:16 - this kind of swagger documentation
01:20 - using your nest js framework
01:23 - but this is not the part of this
01:26 - demonstration i
01:28 - just created this swagger documentation
01:30 - separately
01:31 - for this demonstration but
01:34 - i'm not going to show you how you can
01:36 - create this using nest
01:38 - js so let's get started so because we
01:41 - have already downloaded the
01:43 - nest js cli we are going to use the nest
01:47 - jscli to create our module
01:50 - service and controller so uh the good
01:53 - thing about
01:54 - nest cli is we can create our module or
01:57 - service or controller or
01:59 - it can do many other things
02:01 - automatically so you don't need to
02:04 - write your modules or classes or
02:08 - typescript files from the scratch
02:11 - right so what we are going to do is we
02:14 - are going to generate
02:16 - a module a controller and the service
02:19 - for the car so as you can see these were
02:23 - the files
02:24 - which are automatically generated for us
02:26 - we are going to remove all these files
02:29 - once we have generated our car module
02:31 - controller and service
02:33 - and we are going to use that because we
02:35 - don't want to
02:37 - just send hello world for example and
02:39 - this
02:41 - route is not even required in our
02:44 - api right so process of creating the
02:48 - module controller and service is really
02:52 - simple using nest cli you just need to
02:54 - write
02:55 - nest and then you just need to give this
02:58 - flag g
02:59 - or you can just write
03:02 - generate here in the short form you can
03:05 - just write
03:06 - g and then you write what you want to
03:09 - create
03:10 - right so for example first of all we are
03:12 - going to create a module so i'm going to
03:14 - just write
03:14 - module here and then give the name
03:18 - of your module so we are going to create
03:21 - a
03:22 - car module so i'm going to just write
03:24 - car here
03:25 - okay so nest generate and
03:28 - the name of the component
03:32 - you want to generate and then the
03:35 - actual component name which you want to
03:37 - generate just press
03:38 - enter which is going to create a
03:41 - new module for you so when nest js
03:44 - create
03:44 - a module or controller or a service
03:48 - it's going to create a folder with the
03:51 - same name
03:52 - which you have given here so we have
03:54 - created
03:55 - the car module and inside this we have
03:59 - this car.module.ts file
04:01 - right now as i already mentioned uh
04:05 - this at the rate module is the decorator
04:09 - if you want to create this car module
04:12 - from the scratch
04:13 - you can simply create this without using
04:16 - this
04:17 - cli also you just need to add this
04:21 - module decorator on top of
04:24 - your module class name and this module
04:28 - is present in the nest js common
04:31 - package right so just write nest g
04:34 - controller and the name of your
04:35 - controller
04:36 - and then press enter and it's going to
04:38 - create a new controller for you so here
04:42 - you can see this controller is
04:43 - created for us and you can see
04:47 - for the controller you need to add this
04:49 - decorator controller
04:51 - and then you need to add
04:54 - the route which you want to add to
04:57 - your controller so we want this
05:00 - sub route which is car as you can see
05:04 - all our our route have car car car
05:07 - car we are going to create the get
05:10 - car route also we are not going to
05:12 - create extra
05:13 - cars module or controller uh i decided
05:16 - that
05:17 - we are going to just create a car
05:20 - uh route here not cars right so keep
05:23 - this in mind
05:25 - uh and now we are going to create
05:28 - a new service for our car so here
05:31 - you just need to write service so
05:34 - nest g service car and it's going to
05:37 - create a new
05:38 - car service for you okay so we have
05:42 - generated
05:42 - the module controller and the service uh
05:47 - ts files also two extra files are
05:50 - created for the unit test
05:54 - car.service.spec.ts which is the unit
05:57 - test
05:57 - file for the service dot ts file
06:01 - and you also have this
06:04 - spec dot card.controller.spec.ts this is
06:07 - the unit test file for your
06:09 - car.controller.ts file
06:11 - right so now you will also observe
06:15 - that in your main modules when you go to
06:18 - the main module you will see here that
06:21 - under the imports element there is a new
06:24 - mapping which is added
06:26 - here which is cars module and this code
06:29 - is also
06:30 - auto generated right so if you are
06:33 - creating your controller or module or
06:36 - your service manually without this
06:38 - command line
06:39 - you just need to add your module
06:43 - which you have created and
06:46 - you just need to import it under your
06:48 - main
06:49 - app.module.ts file right
06:52 - and now what i'm going to do is i'm
06:54 - going to remove
06:55 - the controller and provider which is the
06:58 - main
06:58 - app controller and main app service
07:01 - provider because
07:02 - we don't want uh this we just want the
07:05 - car module car controller and
07:08 - uh car service right so i can just
07:11 - remove
07:13 - this controller from here and this
07:16 - provider from here
07:17 - and remove these imports now let's go to
07:20 - the car.module.ts so i'm going to go to
07:24 - theta.module.ts
07:26 - here and you will see that
07:30 - inside this module we have imported
07:33 - the car service and the car controller
07:37 - okay so these files are also
07:40 - automatically generated
07:41 - and we have added the decorator here as
07:45 - i mentioned earlier
07:46 - and then under controller we are going
07:49 - to add all the controllers
07:50 - in our case we only have one controller
07:52 - which is car controller
07:54 - and under provider we are going to add
07:56 - all the
07:58 - services right so we only have car
08:01 - service right now
08:02 - and we are going to just export this uh
08:05 - module and this is the same module which
08:08 - we are importing
08:09 - in the app.module.t file which is this
08:13 - one
08:13 - right also we don't need this
08:16 - main app.service.ts file
08:19 - because we have removed uh this
08:22 - dependency so i can just right click and
08:24 - delete this service file also we can
08:27 - delete this
08:28 - controller also right so i'm going to
08:31 - right click and delete
08:33 - the controller for the main app and then
08:38 - app.controller.spec.ts file also i'm
08:40 - going to remove
08:41 - right so now we only have the car
08:44 - controller car module
08:46 - and car service and unit test files for
08:48 - that
08:49 - and we have this app.module.ts
08:52 - where we are just importing our car
08:54 - module
08:55 - and in the main.ts we are just importing
08:58 - our main module
08:59 - and we are just starting our
09:03 - application on the port 3000.
09:06 - so now what i'm going to do is i'm going
09:08 - to just clear this terminal and i'm
09:10 - going to
09:11 - just uh transpile my typescript file to
09:14 - see
09:14 - if everything is working correctly or
09:17 - not
09:18 - so i'm going to just write npm run
09:22 - build here and once uh all the files are
09:26 - built
09:27 - successfully and if i don't see any
09:29 - error we can move
09:30 - forward so as you can see there is no
09:33 - error in transpilation
09:35 - so we can move forward so what
09:38 - we are going to do is we are going to
09:40 - start
09:41 - from the controller here
09:44 - so let's create uh some of the endpoints
09:48 - in this controller so the first thing
09:51 - which we
09:52 - need to add to the controller
09:55 - is the service so we are going to inject
09:59 - the service which is the car service
10:02 - into
10:02 - our car controller so i'm going to just
10:05 - uh
10:05 - create a constructor here and
10:08 - inside this constructor we are going to
10:11 - just
10:11 - inject our service which is the car
10:15 - service so first let me just import the
10:18 - card service in car controller so i'm
10:22 - going to just write
10:23 - import and then i'm going to
10:26 - just import the car service which we
10:29 - have already generated right
10:30 - so just write dot forward slash
10:34 - and then car dot service right so once
10:37 - we have imported this car
10:39 - service you just need to add the
10:42 - car service name also here
10:46 - and because we have provided the same
10:49 - name here car service
10:51 - right so we are importing this inside
10:54 - our controller and now we are going to
10:58 - just
10:58 - inject this service instance
11:01 - in the constructor and now we are going
11:04 - to just inject
11:05 - this car service instance into
11:08 - our uh controller constructor right
11:12 - so i'm going to just name it as
11:15 - a car service and also i'm going to
11:18 - remove this
11:19 - space from here so
11:22 - once again i'm going to go to my
11:25 - car.service.ts
11:26 - file and you can see in the service we
11:29 - have
11:30 - included this at the rate injectable
11:33 - decorator
11:34 - so whenever you create a car a service
11:37 - or any service
11:38 - manually you need to add this at the
11:41 - rate
11:42 - injectable decorator on top of
11:45 - your service right and that
11:48 - makes your service injectable and
11:51 - that's how nest js is going to recognize
11:54 - that this service
11:56 - is injectable so we can inject this
11:58 - service
11:59 - inside the constructor of the controller
12:03 - right now we are going to create
12:06 - some of the endpoint methods for
12:09 - our car controller so
12:12 - the first method will be get cars
12:16 - let's say so i'm going to just make this
12:19 - method
12:19 - a sync method and
12:22 - let's say that method name will be get
12:27 - cards and in the body of
12:31 - this method we are going to just
12:35 - call our service instance for now so
12:37 - card service this dot
12:39 - car service and we are going to create
12:42 - different
12:42 - methods uh later in the car service also
12:46 - and we are going to name this method
12:49 - same
12:49 - which will be car get cars so this
12:53 - method we are going to create
12:55 - in a moment in the service
12:58 - and also because this is an async await
13:01 - method so you can uh just uh
13:04 - write return here if you
13:08 - uh are not returning anything then you
13:11 - can also
13:11 - just write return without our bait here
13:15 - i'm sure you know uh this concept from
13:18 - before also
13:19 - right and then we are going to provide
13:22 - a new decorator and this decorator name
13:25 - will be
13:26 - a get so at the rate
13:29 - get here you just need to add get here
13:32 - and
13:32 - you just need to import get uh from your
13:35 - nest just common
13:37 - uh package also so you can see get is
13:40 - here
13:40 - and we are adding this get decorator
13:43 - here
13:43 - and you just need to add these
13:45 - parentheses here
13:47 - and inside these parentheses you can
13:49 - provide
13:50 - any uh sub route so
13:54 - if you want to get the car by id you can
13:57 - just write
13:58 - id here or whatever routes you want to
14:01 - add here
14:02 - right so for now we would just want to
14:06 - add the get method so when you just
14:09 - add this empty get method
14:12 - this means that you are just calling the
14:16 - get method
14:16 - on this car route right
14:20 - so let's add this get cars
14:23 - in your service file also so i'm going
14:27 - to go to
14:28 - car.service.ts file and here
14:31 - i'm going to add the public method
14:34 - which will be a sync await
14:38 - method and i'm going to name it as get
14:40 - cards
14:42 - and in the body what i want to do is i
14:44 - want to return
14:46 - something for now i'm going to return
14:48 - empty
14:50 - object from here now we also need some
14:53 - kind of
14:54 - mock data for the cards so i'm going to
14:57 - create
14:58 - a new file here and i'm going to
15:01 - name this file as
15:05 - cars dot mock
15:08 - dot ts file okay so here in
15:12 - this mock file what i want to do is i
15:14 - want to
15:15 - return some kind of dummy car object
15:18 - array right so i'm going to just uh
15:22 - export const
15:26 - cars is equal to then some kind of dummy
15:29 - data which i
15:30 - already have so i want to
15:34 - add one object to my
15:37 - array which will be already available
15:40 - so this array will be a mock array which
15:44 - is going to return
15:46 - this one object which is already present
15:49 - here
15:50 - and the other object we are going to add
15:53 - dynamically to our array when some
15:56 - request
15:56 - comes right so what we have done till
15:59 - now we have added
16:00 - this get cards into our service
16:03 - and into our controller right and we
16:07 - are just calling or returning the get
16:10 - cars uh method from the car service
16:14 - inside your controller also
16:17 - inside this get cars method so
16:21 - inside the cars dot service we are going
16:24 - to import our mock
16:25 - also so let's import our
16:28 - mock which we have created which have
16:31 - the name
16:33 - cars here and we are going to import it
16:36 - from the mock
16:36 - file which we have created and now uh
16:40 - we can use this cars object which is our
16:43 - mock
16:43 - data inside our
16:47 - car service so i'm going to just write
16:50 - private and then cars here
16:55 - which will be equal to this cars which
16:58 - and then we can return this uh dot
17:02 - cars uh from the get cars method
17:06 - right so now we have uh just uh
17:09 - finished first end point and
17:12 - we can test our endpoint by just running
17:15 - npm start command
17:18 - once your application is running i'm
17:20 - going to just open
17:22 - my postman and then i will just
17:25 - write http colon forward slash localhost
17:28 - 1000 which is the port on which our
17:31 - application is running
17:32 - and then i'm going to just give this uh
17:35 - end point which is car here so
17:37 - essentially we are
17:38 - just sending get car uh request
17:42 - to our application let's uh send this
17:45 - data
17:46 - and you can see it sends us this kind of
17:49 - data
17:50 - which is sent using this get cars
17:53 - method which is there inside your
17:56 - service
17:57 - and we are just returning the mock which
18:00 - we have just created which is
18:02 - uh this one right and
18:05 - first of all this request reaches to
18:08 - your controller and it sees that
18:12 - your base route is car
18:15 - here and here we haven't added any sub
18:17 - route so that means
18:19 - we are just uh responding to the
18:22 - car uh get car request using
18:25 - this get cars method i think that's it
18:28 - for this video in the next video we are
18:30 - going to add
18:31 - all the other uh routes or end points to
18:35 - our nest js restful api
18:38 - i hope you enjoyed this video and i will
18:40 - see you in the next video

Cleaned transcript:

hey guys welcome once again till now we have seen how we can create our first nest js project and we have seen a broad overview of our nest js project now we want to add some end points to our rest api so what my plan is let me show you uh the api documentation which i want to implement so our api name will be car manager api which will be able to add a car or read all the car information or read full data of an individual car or it's going to delete a car or it's going to uh update a single car and these are the routes or endpoints which i have defined so we are going to define a get cars route and then we are going to define post car get car by id put car by id and delete car by id so this is what we are going to do and by the way you can also create this kind of swagger documentation using your nest js framework but this is not the part of this demonstration i just created this swagger documentation separately for this demonstration but i'm not going to show you how you can create this using nest js so let's get started so because we have already downloaded the nest js cli we are going to use the nest jscli to create our module service and controller so uh the good thing about nest cli is we can create our module or service or controller or it can do many other things automatically so you don't need to write your modules or classes or typescript files from the scratch right so what we are going to do is we are going to generate a module a controller and the service for the car so as you can see these were the files which are automatically generated for us we are going to remove all these files once we have generated our car module controller and service and we are going to use that because we don't want to just send hello world for example and this route is not even required in our api right so process of creating the module controller and service is really simple using nest cli you just need to write nest and then you just need to give this flag g or you can just write generate here in the short form you can just write g and then you write what you want to create right so for example first of all we are going to create a module so i'm going to just write module here and then give the name of your module so we are going to create a car module so i'm going to just write car here okay so nest generate and the name of the component you want to generate and then the actual component name which you want to generate just press enter which is going to create a new module for you so when nest js create a module or controller or a service it's going to create a folder with the same name which you have given here so we have created the car module and inside this we have this car.module.ts file right now as i already mentioned uh this at the rate module is the decorator if you want to create this car module from the scratch you can simply create this without using this cli also you just need to add this module decorator on top of your module class name and this module is present in the nest js common package right so just write nest g controller and the name of your controller and then press enter and it's going to create a new controller for you so here you can see this controller is created for us and you can see for the controller you need to add this decorator controller and then you need to add the route which you want to add to your controller so we want this sub route which is car as you can see all our our route have car car car car we are going to create the get car route also we are not going to create extra cars module or controller uh i decided that we are going to just create a car uh route here not cars right so keep this in mind uh and now we are going to create a new service for our car so here you just need to write service so nest g service car and it's going to create a new car service for you okay so we have generated the module controller and the service uh ts files also two extra files are created for the unit test car.service.spec.ts which is the unit test file for the service dot ts file and you also have this spec dot card.controller.spec.ts this is the unit test file for your car.controller.ts file right so now you will also observe that in your main modules when you go to the main module you will see here that under the imports element there is a new mapping which is added here which is cars module and this code is also auto generated right so if you are creating your controller or module or your service manually without this command line you just need to add your module which you have created and you just need to import it under your main app.module.ts file right and now what i'm going to do is i'm going to remove the controller and provider which is the main app controller and main app service provider because we don't want uh this we just want the car module car controller and uh car service right so i can just remove this controller from here and this provider from here and remove these imports now let's go to the car.module.ts so i'm going to go to theta.module.ts here and you will see that inside this module we have imported the car service and the car controller okay so these files are also automatically generated and we have added the decorator here as i mentioned earlier and then under controller we are going to add all the controllers in our case we only have one controller which is car controller and under provider we are going to add all the services right so we only have car service right now and we are going to just export this uh module and this is the same module which we are importing in the app.module.t file which is this one right also we don't need this main app.service.ts file because we have removed uh this dependency so i can just right click and delete this service file also we can delete this controller also right so i'm going to right click and delete the controller for the main app and then app.controller.spec.ts file also i'm going to remove right so now we only have the car controller car module and car service and unit test files for that and we have this app.module.ts where we are just importing our car module and in the main.ts we are just importing our main module and we are just starting our application on the port 3000. so now what i'm going to do is i'm going to just clear this terminal and i'm going to just uh transpile my typescript file to see if everything is working correctly or not so i'm going to just write npm run build here and once uh all the files are built successfully and if i don't see any error we can move forward so as you can see there is no error in transpilation so we can move forward so what we are going to do is we are going to start from the controller here so let's create uh some of the endpoints in this controller so the first thing which we need to add to the controller is the service so we are going to inject the service which is the car service into our car controller so i'm going to just uh create a constructor here and inside this constructor we are going to just inject our service which is the car service so first let me just import the card service in car controller so i'm going to just write import and then i'm going to just import the car service which we have already generated right so just write dot forward slash and then car dot service right so once we have imported this car service you just need to add the car service name also here and because we have provided the same name here car service right so we are importing this inside our controller and now we are going to just inject this service instance in the constructor and now we are going to just inject this car service instance into our uh controller constructor right so i'm going to just name it as a car service and also i'm going to remove this space from here so once again i'm going to go to my car.service.ts file and you can see in the service we have included this at the rate injectable decorator so whenever you create a car a service or any service manually you need to add this at the rate injectable decorator on top of your service right and that makes your service injectable and that's how nest js is going to recognize that this service is injectable so we can inject this service inside the constructor of the controller right now we are going to create some of the endpoint methods for our car controller so the first method will be get cars let's say so i'm going to just make this method a sync method and let's say that method name will be get cards and in the body of this method we are going to just call our service instance for now so card service this dot car service and we are going to create different methods uh later in the car service also and we are going to name this method same which will be car get cars so this method we are going to create in a moment in the service and also because this is an async await method so you can uh just uh write return here if you uh are not returning anything then you can also just write return without our bait here i'm sure you know uh this concept from before also right and then we are going to provide a new decorator and this decorator name will be a get so at the rate get here you just need to add get here and you just need to import get uh from your nest just common uh package also so you can see get is here and we are adding this get decorator here and you just need to add these parentheses here and inside these parentheses you can provide any uh sub route so if you want to get the car by id you can just write id here or whatever routes you want to add here right so for now we would just want to add the get method so when you just add this empty get method this means that you are just calling the get method on this car route right so let's add this get cars in your service file also so i'm going to go to car.service.ts file and here i'm going to add the public method which will be a sync await method and i'm going to name it as get cards and in the body what i want to do is i want to return something for now i'm going to return empty object from here now we also need some kind of mock data for the cards so i'm going to create a new file here and i'm going to name this file as cars dot mock dot ts file okay so here in this mock file what i want to do is i want to return some kind of dummy car object array right so i'm going to just uh export const cars is equal to then some kind of dummy data which i already have so i want to add one object to my array which will be already available so this array will be a mock array which is going to return this one object which is already present here and the other object we are going to add dynamically to our array when some request comes right so what we have done till now we have added this get cards into our service and into our controller right and we are just calling or returning the get cars uh method from the car service inside your controller also inside this get cars method so inside the cars dot service we are going to import our mock also so let's import our mock which we have created which have the name cars here and we are going to import it from the mock file which we have created and now uh we can use this cars object which is our mock data inside our car service so i'm going to just write private and then cars here which will be equal to this cars which and then we can return this uh dot cars uh from the get cars method right so now we have uh just uh finished first end point and we can test our endpoint by just running npm start command once your application is running i'm going to just open my postman and then i will just write http colon forward slash localhost 1000 which is the port on which our application is running and then i'm going to just give this uh end point which is car here so essentially we are just sending get car uh request to our application let's uh send this data and you can see it sends us this kind of data which is sent using this get cars method which is there inside your service and we are just returning the mock which we have just created which is uh this one right and first of all this request reaches to your controller and it sees that your base route is car here and here we haven't added any sub route so that means we are just uh responding to the car uh get car request using this get cars method i think that's it for this video in the next video we are going to add all the other uh routes or end points to our nest js restful api i hope you enjoyed this video and i will see you in the next video
