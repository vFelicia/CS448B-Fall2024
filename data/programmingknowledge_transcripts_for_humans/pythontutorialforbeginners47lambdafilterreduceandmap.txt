With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - python tutorial for beginners in this
00:04 - video I'm going to show you how to use
00:06 - lambda functions in Python
00:08 - in addition I'm going to show you how to
00:11 - use lambda functions with functions like
00:14 - Map Reduce and filter so let's get
00:18 - started so as we all know that Python is
00:22 - a multi paradigm language and it also
00:25 - supports functional programming and the
00:29 - lambda functions falls into functional
00:32 - programming paradigm so what are lambda
00:36 - functions and how to use lambda
00:38 - functions so lambda functions in Python
00:41 - are also called
00:42 - anonymous functions because they don't
00:46 - have any name sometimes they are also
00:49 - called one-line functions because they
00:53 - can be written in a single line of code
00:56 - so let's see how we can define a lambda
00:59 - function so as you can see here I have
01:02 - three normal function defined here one
01:05 - is the double functions which doubles
01:08 - whatever arguments you provide here
01:11 - second is a simple addition function and
01:14 - third function is the function which
01:16 - takes three arguments and provide the
01:18 - product of the three argument which are
01:22 - provided so let's see how we can convert
01:24 - these three functions into the lambda
01:27 - functions so the first function which we
01:29 - have is that double function so I'm
01:32 - going to once again write double as a
01:34 - variable and then I can use a special
01:37 - keyword called lambda to create a lambda
01:40 - function so as you can see here this
01:42 - double takes one argument which is X so
01:46 - to provide an argument in the lambda
01:49 - function you just write the name of the
01:52 - argument and then after the colon you
01:55 - write the body of the function so in our
01:59 - case this double function have this body
02:03 - which is return x x two so in lambda
02:08 - function if you want to return some
02:10 - value you don't need
02:12 - to use this return keyword you can
02:15 - directly write x x 2 here so this lambda
02:21 - function is equivalent to this double
02:25 - function which is a normal function so
02:28 - this w function takes one argument which
02:31 - is X which we are providing here and it
02:34 - returns the multiplication of X by two
02:37 - which we are writing after the Kulin now
02:41 - let's write the add function using
02:44 - lambda function so I'm going to once
02:47 - again declare a variable called add and
02:50 - once again used lambda and this time
02:53 - this add takes two arguments so I can
02:57 - provide multiple arguments in lambda
03:00 - functions by comma as you do with the
03:03 - normal function so I will provide two
03:05 - arguments and then after the colon you
03:08 - just write whatever you want to return
03:11 - so we want to return X plus y so we can
03:15 - simply write x plus y here and that's it
03:18 - so in a single line we can define the
03:21 - lambda function now the third function
03:24 - we want to provide here is the product
03:27 - function so I will declare a variable
03:29 - product and this time I just need to
03:32 - provide three arguments using the comma
03:34 - separator and after the colon I just
03:38 - provide the multiplication of these
03:41 - three values which is X x y x said so
03:47 - all these three normal functions is
03:50 - equivalent to these lambda functions so
03:54 - I'm going to just comment these three
03:55 - functions out by pressing ctrl + forward
03:59 - slash and now let's see how to use these
04:02 - lambda functions so you create a lambda
04:04 - function and then assign the result into
04:08 - some variable and then you use these
04:11 - variable as you use the normal functions
04:14 - so I'm going to just use print to call
04:17 - the double variable and then using the
04:20 - parentheses I just provide the argument
04:23 - which this lambda function takes so
04:26 - lambda function takes one argument which
04:28 - is X so I can provide the value of x
04:32 - here so let's say I want to provide 10
04:34 - as the value of X same I will do with
04:38 - the add a function and the product
04:40 - function so add a function takes two
04:43 - argument and the product function takes
04:47 - three argument so I can simply write
04:50 - these functions like this like a normal
04:52 - function and then I can just run my
04:55 - script and you will see it's going to
04:57 - give us the same result as the normal
05:01 - function gives us so the first is the
05:05 - double of ten second is the addition of
05:08 - these two numbers and third is the
05:09 - product of these three numbers now you
05:12 - might ask a question that these
05:15 - functions which we have defined normally
05:17 - we can also define these function in a
05:20 - single line because there is not much
05:23 - logic inside these functions so we can
05:26 - declare these functions like this and
05:29 - they are also the single line functions
05:33 - so why do we use lambda functions so the
05:37 - lambda functions are generally used with
05:40 - the functions which takes function as an
05:43 - argument or returns function as the
05:48 - result so in functional programming
05:50 - functions are the first-class citizens
05:54 - that means we can pass the functions as
05:57 - the normal argument so as you can see
06:00 - here we have passed some static or
06:03 - constant value as an argument here but
06:06 - we can also pass the functions as an
06:10 - arguments and in addition you can also
06:13 - return a function from a function so
06:18 - instead of this multiplication you can
06:20 - create a function and return from a
06:23 - function and that's where these lambda
06:27 - functions are useful so let me give you
06:30 - some examples of where you can use
06:33 - lambda functions so as I said you can
06:36 - use lambda functions with the functions
06:39 - like filter
06:40 - reduce and map so let me illustrate how
06:44 - these functions work so I'm going to
06:46 - declare a list of some numbers so now I
06:50 - have created a list which have these six
06:53 - elements now let's see how to use a map
06:56 - function with a lambda function so there
06:59 - is an inbuilt function called map in
07:02 - Python which takes two argument one is a
07:06 - function and second is an iterate able
07:10 - the variable and we all know that
07:12 - collections like lists or tuples or the
07:17 - dictionaries are all iterate able
07:20 - collections so we can use map keyword
07:23 - and then here we can define a lambda
07:26 - function so let's say I want to double
07:29 - each and every element of this list so I
07:32 - can define a function which takes one
07:35 - argument X and then we are going to
07:38 - return that double of this value so this
07:42 - is the function which we have passed to
07:44 - this map function because the first
07:47 - argument which map expects is the
07:51 - function the second is the iterate able
07:55 - collection so we are going to pass this
07:57 - list as the second value let me define
07:59 - let's say my list here so it will be
08:04 - more clearer so I'm going to just pass
08:06 - this my list as the second variable so
08:10 - what this map function is going to do is
08:12 - it's going to apply this lambda function
08:16 - to each and every element of this list
08:19 - which is basically going to double the
08:23 - value of each and every element of the
08:26 - list now let's assign the result of this
08:28 - map function into our variable so I'm
08:31 - going to assign the result into some
08:33 - variable and then I'm going to print the
08:37 - result first of all so this variable
08:40 - contains the map function so let's see
08:44 - first of all what is the result and then
08:47 - I'm going to show you how to get the
08:49 - result which we are expecting so you can
08:51 - see here whenever you want to print the
08:54 - value of map it's going to just give you
08:57 - this kind of result so how we can get
09:01 - the list out of this map value in order
09:06 - to get the list out of this map value
09:09 - you need to cast this value into a list
09:13 - and how to convert this value into a
09:15 - list you use a list function and then
09:19 - pass the result of the map function as
09:22 - an argument of this list function let's
09:26 - run the program once again and you will
09:28 - see now that the result is a list and in
09:33 - the result every element of the list is
09:37 - doubled so basically what this map
09:39 - function has done is it has applied this
09:44 - function to each and every value of the
09:47 - list and this function just doubles each
09:51 - and every value of the list now you
09:54 - might say that this is a very simple
09:56 - function which we are applying to the
09:58 - list so let's make things a little bit
10:01 - complex and let's say now I have two
10:05 - lists one is my list 1 and other is my
10:10 - list too and this other list contains
10:13 - some other set of elements so let me
10:17 - just change the values which this second
10:20 - list contains and let's say using this
10:23 - map function I want to add each and
10:26 - every element of these two lists and
10:29 - create a third list with the addition of
10:33 - let's say 2 + 1 + 5 + 4 8 + 7 10 and 8
10:39 - like this so how can I create a map
10:42 - function to achieve this so let's say
10:46 - this is a variable B and here inside the
10:50 - lambda function we gave the second
10:53 - argument which is y so it takes two
10:55 - argument and then it adds the value of x
11:00 - + y so we can do like this and then as
11:03 - the second argument we are passing the
11:05 - first list and also as the
11:08 - third argument you can pass the second
11:12 - list here so now what this map function
11:14 - is going to do is it's going to take the
11:17 - first element of the first list and the
11:20 - first element of the second list and
11:22 - then it's going to apply this function
11:24 - to the first elements of both these
11:28 - lists which is to add these two numbers
11:31 - so let's see what is the result which we
11:34 - get using this map function so I'm going
11:37 - to just convert the answer or the result
11:40 - into a list and then I'm going to just
11:43 - pass this B variable as an argument of
11:45 - this list and then we are just printing
11:47 - the results so let's run the code and
11:49 - let's see what happens so you can see we
11:52 - get the list which adds the value of
11:55 - these two lists and creates a new list
11:58 - so you can see 2 plus 1 is 3 here 5 plus
12:01 - 4 is 9 then 8 plus 7 is 15 and so on so
12:07 - this is how you can use lambda functions
12:09 - with math function now let's see how to
12:12 - use a filter function so I'm going to
12:15 - use this special function which is
12:17 - called filter and this filter functions
12:20 - takes two argument but what is special
12:23 - about this filter function is it takes a
12:26 - function as the first argument which
12:28 - gives us a boolean result so instead of
12:32 - adding two numbers and returning this
12:35 - filter function is expecting a function
12:37 - which gives us the boolean result so let
12:40 - me minimize this so let's say we want to
12:43 - filter the even values from this list so
12:47 - how we can achieve this using the filter
12:50 - function so as I said this takes a
12:52 - function as the first argument so you
12:55 - can use lambda and how to find out the
12:58 - even values you pass an argument and
13:00 - then you return X modulo 2 is equal to 0
13:05 - so this X modulo 2 is going to give us 0
13:09 - whenever the number is even otherwise is
13:13 - going to give us 1 so this is the first
13:15 - argument and the second argument we can
13:17 - pass here is for example the first list
13:20 - here
13:21 - and now I'm going to assign the result
13:24 - into a variable and let's print the
13:27 - value of C now using the list function
13:31 - so list and as an argument I'm going to
13:34 - pass C here let's run the code and let's
13:37 - see what's the result and you can see
13:39 - you just get the even values filtered
13:43 - out from this first list which is 2 8
13:47 - and 10 now let me give you one more
13:50 - example of filter so let's say you want
13:54 - to filter out from the second list which
13:57 - values are greater than 5 so all the
14:00 - values which are greater than 5 we want
14:03 - to filter out so we will pass X as an
14:07 - argument and let's say this is the D
14:09 - variable so this lambda function takes X
14:12 - as an argument it's going to return true
14:15 - so let me just write the syntax here so
14:18 - it's going to return true if the value
14:21 - of x is greater than 5 else it's going
14:26 - to return the false so else we can just
14:29 - write false here so if you want to write
14:32 - if an else condition inside a lambda
14:35 - function you write something like this
14:38 - so this is the syntax of if and else so
14:41 - if the value of X is greater than 5 it's
14:44 - going to return true otherwise it's
14:47 - going to return false so let's run this
14:50 - code and let's see what happens let me
14:52 - just replace the C by D and I'm going to
14:55 - run this file and you will see the
14:58 - result here so in this list you will see
15:02 - 8 10 and 9 are greater than 5 that's why
15:07 - we got this result if we write here
15:10 - greater than and equal to and once again
15:13 - run the code it's going to give us 4
15:16 - values including 5 here so this is how
15:19 - you can use filter function with the
15:22 - lambda functions now let's see how we
15:24 - can use one more function which is
15:28 - called the reduced function so in order
15:31 - to use the reduce function we need to
15:34 - import a special
15:35 - module which is Fung tool so let's
15:38 - import this module and this module is
15:41 - called func tools so we are going to
15:44 - write from Fung tool
15:46 - import reduce so what we are basically
15:48 - saying is we need a reduce function from
15:52 - this Fung tool module and now you can
15:56 - use a reduce function so I'm going to
15:59 - declare a variable E and then I can use
16:02 - this reduce function which also takes
16:05 - two argument one is the function and
16:07 - other is the iterative collection so
16:11 - let's define a function first of all
16:13 - which is the lambda function and this
16:15 - lambda function is going to take let's
16:17 - say two values x and y and what it's
16:21 - going to return is the sum of X plus y
16:24 - here now as the second argument I'm
16:26 - going to pass my list variable here so
16:29 - what a reduce function does is it takes
16:32 - first two element of the list and then
16:36 - apply the function which you have
16:38 - written here which is going to add first
16:41 - two element and then it's going to store
16:43 - the result in X variable and take next
16:46 - element into the Y variable so seven
16:49 - plus y is going to give us whatever
16:52 - result and once again it's going to
16:54 - apply the result and then going to add
16:57 - the next number to the result so let's
17:01 - see what result we get using this reduce
17:04 - function so I'm going to once again use
17:06 - print and then we can directly print the
17:09 - value of the reduced function which is e
17:12 - so let's run this code once again and
17:15 - you will see this result which is 37 now
17:19 - 37 is the sum of all these elements
17:23 - inside this my list so let me explain
17:27 - you once again what this reduced
17:28 - function is doing so first of all
17:31 - because we are passing two arguments
17:34 - here in the lambda function it's going
17:36 - to take first two element of your
17:39 - collection which is two and five and
17:40 - then apply this code or statement to
17:45 - these two elements which is two plus
17:48 - five
17:49 - we will get seven as the result now once
17:52 - again it's going to take seven as the
17:54 - first argument which is the sum of these
17:55 - two numbers and eight as the second
17:59 - argument which is why here and then
18:02 - apply this logic once again to seven and
18:06 - eight which gives us fifteen and once
18:09 - again this fifteen will be passed as X
18:12 - and 10 will be passed as Y and once
18:16 - again the addition of 15 and 10 will
18:18 - happen which will make it 25 and so on
18:22 - so this is how you can use lambda
18:24 - functions in Python and this is how you
18:28 - can use lambda functions with map filter
18:32 - and reduce functions so I hope you have
18:35 - enjoyed this video and I will see you in
18:37 - the next video

Cleaned transcript:

hey guys welcome to the next video on python tutorial for beginners in this video I'm going to show you how to use lambda functions in Python in addition I'm going to show you how to use lambda functions with functions like Map Reduce and filter so let's get started so as we all know that Python is a multi paradigm language and it also supports functional programming and the lambda functions falls into functional programming paradigm so what are lambda functions and how to use lambda functions so lambda functions in Python are also called anonymous functions because they don't have any name sometimes they are also called oneline functions because they can be written in a single line of code so let's see how we can define a lambda function so as you can see here I have three normal function defined here one is the double functions which doubles whatever arguments you provide here second is a simple addition function and third function is the function which takes three arguments and provide the product of the three argument which are provided so let's see how we can convert these three functions into the lambda functions so the first function which we have is that double function so I'm going to once again write double as a variable and then I can use a special keyword called lambda to create a lambda function so as you can see here this double takes one argument which is X so to provide an argument in the lambda function you just write the name of the argument and then after the colon you write the body of the function so in our case this double function have this body which is return x x two so in lambda function if you want to return some value you don't need to use this return keyword you can directly write x x 2 here so this lambda function is equivalent to this double function which is a normal function so this w function takes one argument which is X which we are providing here and it returns the multiplication of X by two which we are writing after the Kulin now let's write the add function using lambda function so I'm going to once again declare a variable called add and once again used lambda and this time this add takes two arguments so I can provide multiple arguments in lambda functions by comma as you do with the normal function so I will provide two arguments and then after the colon you just write whatever you want to return so we want to return X plus y so we can simply write x plus y here and that's it so in a single line we can define the lambda function now the third function we want to provide here is the product function so I will declare a variable product and this time I just need to provide three arguments using the comma separator and after the colon I just provide the multiplication of these three values which is X x y x said so all these three normal functions is equivalent to these lambda functions so I'm going to just comment these three functions out by pressing ctrl + forward slash and now let's see how to use these lambda functions so you create a lambda function and then assign the result into some variable and then you use these variable as you use the normal functions so I'm going to just use print to call the double variable and then using the parentheses I just provide the argument which this lambda function takes so lambda function takes one argument which is X so I can provide the value of x here so let's say I want to provide 10 as the value of X same I will do with the add a function and the product function so add a function takes two argument and the product function takes three argument so I can simply write these functions like this like a normal function and then I can just run my script and you will see it's going to give us the same result as the normal function gives us so the first is the double of ten second is the addition of these two numbers and third is the product of these three numbers now you might ask a question that these functions which we have defined normally we can also define these function in a single line because there is not much logic inside these functions so we can declare these functions like this and they are also the single line functions so why do we use lambda functions so the lambda functions are generally used with the functions which takes function as an argument or returns function as the result so in functional programming functions are the firstclass citizens that means we can pass the functions as the normal argument so as you can see here we have passed some static or constant value as an argument here but we can also pass the functions as an arguments and in addition you can also return a function from a function so instead of this multiplication you can create a function and return from a function and that's where these lambda functions are useful so let me give you some examples of where you can use lambda functions so as I said you can use lambda functions with the functions like filter reduce and map so let me illustrate how these functions work so I'm going to declare a list of some numbers so now I have created a list which have these six elements now let's see how to use a map function with a lambda function so there is an inbuilt function called map in Python which takes two argument one is a function and second is an iterate able the variable and we all know that collections like lists or tuples or the dictionaries are all iterate able collections so we can use map keyword and then here we can define a lambda function so let's say I want to double each and every element of this list so I can define a function which takes one argument X and then we are going to return that double of this value so this is the function which we have passed to this map function because the first argument which map expects is the function the second is the iterate able collection so we are going to pass this list as the second value let me define let's say my list here so it will be more clearer so I'm going to just pass this my list as the second variable so what this map function is going to do is it's going to apply this lambda function to each and every element of this list which is basically going to double the value of each and every element of the list now let's assign the result of this map function into our variable so I'm going to assign the result into some variable and then I'm going to print the result first of all so this variable contains the map function so let's see first of all what is the result and then I'm going to show you how to get the result which we are expecting so you can see here whenever you want to print the value of map it's going to just give you this kind of result so how we can get the list out of this map value in order to get the list out of this map value you need to cast this value into a list and how to convert this value into a list you use a list function and then pass the result of the map function as an argument of this list function let's run the program once again and you will see now that the result is a list and in the result every element of the list is doubled so basically what this map function has done is it has applied this function to each and every value of the list and this function just doubles each and every value of the list now you might say that this is a very simple function which we are applying to the list so let's make things a little bit complex and let's say now I have two lists one is my list 1 and other is my list too and this other list contains some other set of elements so let me just change the values which this second list contains and let's say using this map function I want to add each and every element of these two lists and create a third list with the addition of let's say 2 + 1 + 5 + 4 8 + 7 10 and 8 like this so how can I create a map function to achieve this so let's say this is a variable B and here inside the lambda function we gave the second argument which is y so it takes two argument and then it adds the value of x + y so we can do like this and then as the second argument we are passing the first list and also as the third argument you can pass the second list here so now what this map function is going to do is it's going to take the first element of the first list and the first element of the second list and then it's going to apply this function to the first elements of both these lists which is to add these two numbers so let's see what is the result which we get using this map function so I'm going to just convert the answer or the result into a list and then I'm going to just pass this B variable as an argument of this list and then we are just printing the results so let's run the code and let's see what happens so you can see we get the list which adds the value of these two lists and creates a new list so you can see 2 plus 1 is 3 here 5 plus 4 is 9 then 8 plus 7 is 15 and so on so this is how you can use lambda functions with math function now let's see how to use a filter function so I'm going to use this special function which is called filter and this filter functions takes two argument but what is special about this filter function is it takes a function as the first argument which gives us a boolean result so instead of adding two numbers and returning this filter function is expecting a function which gives us the boolean result so let me minimize this so let's say we want to filter the even values from this list so how we can achieve this using the filter function so as I said this takes a function as the first argument so you can use lambda and how to find out the even values you pass an argument and then you return X modulo 2 is equal to 0 so this X modulo 2 is going to give us 0 whenever the number is even otherwise is going to give us 1 so this is the first argument and the second argument we can pass here is for example the first list here and now I'm going to assign the result into a variable and let's print the value of C now using the list function so list and as an argument I'm going to pass C here let's run the code and let's see what's the result and you can see you just get the even values filtered out from this first list which is 2 8 and 10 now let me give you one more example of filter so let's say you want to filter out from the second list which values are greater than 5 so all the values which are greater than 5 we want to filter out so we will pass X as an argument and let's say this is the D variable so this lambda function takes X as an argument it's going to return true so let me just write the syntax here so it's going to return true if the value of x is greater than 5 else it's going to return the false so else we can just write false here so if you want to write if an else condition inside a lambda function you write something like this so this is the syntax of if and else so if the value of X is greater than 5 it's going to return true otherwise it's going to return false so let's run this code and let's see what happens let me just replace the C by D and I'm going to run this file and you will see the result here so in this list you will see 8 10 and 9 are greater than 5 that's why we got this result if we write here greater than and equal to and once again run the code it's going to give us 4 values including 5 here so this is how you can use filter function with the lambda functions now let's see how we can use one more function which is called the reduced function so in order to use the reduce function we need to import a special module which is Fung tool so let's import this module and this module is called func tools so we are going to write from Fung tool import reduce so what we are basically saying is we need a reduce function from this Fung tool module and now you can use a reduce function so I'm going to declare a variable E and then I can use this reduce function which also takes two argument one is the function and other is the iterative collection so let's define a function first of all which is the lambda function and this lambda function is going to take let's say two values x and y and what it's going to return is the sum of X plus y here now as the second argument I'm going to pass my list variable here so what a reduce function does is it takes first two element of the list and then apply the function which you have written here which is going to add first two element and then it's going to store the result in X variable and take next element into the Y variable so seven plus y is going to give us whatever result and once again it's going to apply the result and then going to add the next number to the result so let's see what result we get using this reduce function so I'm going to once again use print and then we can directly print the value of the reduced function which is e so let's run this code once again and you will see this result which is 37 now 37 is the sum of all these elements inside this my list so let me explain you once again what this reduced function is doing so first of all because we are passing two arguments here in the lambda function it's going to take first two element of your collection which is two and five and then apply this code or statement to these two elements which is two plus five we will get seven as the result now once again it's going to take seven as the first argument which is the sum of these two numbers and eight as the second argument which is why here and then apply this logic once again to seven and eight which gives us fifteen and once again this fifteen will be passed as X and 10 will be passed as Y and once again the addition of 15 and 10 will happen which will make it 25 and so on so this is how you can use lambda functions in Python and this is how you can use lambda functions with map filter and reduce functions so I hope you have enjoyed this video and I will see you in the next video
