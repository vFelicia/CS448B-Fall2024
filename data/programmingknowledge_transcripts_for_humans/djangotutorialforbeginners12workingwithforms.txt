With timestamps:

00:00 - welcome to programming knowledge so this
00:02 - is the twelfth tutorial of a django
00:03 - series so like in the previous tutorial
00:06 - I showed you how you can integrate the
00:08 - front-end part of your form to the
00:11 - backend part so I again welcome you all
00:13 - to programming knowledge so guys this is
00:16 - the Kitab link upper portion you can
00:18 - prune this upholstery and you can run
00:20 - the project on your local machine I have
00:22 - defined below the instructions so guys
00:24 - in this tutorial we are going to work
00:26 - with the form but and we are going to
00:29 - work with the back end part only but
00:31 - today we are going to create a different
00:33 - instance of form how we can create a
00:36 - separate file form store py file and we
00:39 - can store all the forms in that file and
00:41 - we can render the home been able
00:44 - required or whenever required without
00:46 - writing the repetition of the HTML code
00:49 - so that brings some kind of alternative
00:53 - solution how we can create a form and
00:55 - how we can submit them so let's get
00:58 - started with this so I have two links so
01:02 - you can have a look at these drinks so I
01:05 - have opened this links on my browser as
01:07 - well so first one is this so today the
01:11 - we are basically going to work in
01:13 - something this kind we are going to
01:15 - create a form in this such way and I am
01:18 - defined below how we can catch the tea
01:20 - in data from this form this will remove
01:23 - the special characters any special
01:26 - characters and this is the wicked
01:28 - widgets in the form so the basically
01:30 - there are different types of widgets one
01:32 - set X input number input email your
01:35 - password hidden input gain input date
01:38 - time time input text area then some
01:40 - other also check box radius select so
01:43 - there are file input so these are some
01:46 - like many options in the form and how
01:50 - you can render the form on your
01:53 - front-end part using today we are going
01:55 - to work with a different or directive
01:57 - solution so let's get started with this
02:00 - so what we'll do first I have a quick
02:04 - recap of the last picture like we the
02:07 - first I'll open my file you are stopping
02:09 - by file so like in the previous tutorial
02:12 - I showed you that you
02:13 - two urls one to render the form that was
02:17 - my form and another was the URL to
02:20 - submit the form so well I used to render
02:23 - a form using my form then I used to
02:25 - submit that form and we used to move to
02:29 - this URL then we are used then we had
02:32 - our back-end logic then we had we can
02:35 - process the form data at this URL
02:38 - okay so today what we are going to do we
02:41 - are only going to create only one URL
02:43 - and will only work right on one you are
02:46 - and work when in such a way that it will
02:50 - help us out to do both the things so
02:53 - first what I will do
02:54 - okay okay and create a URL path I will
03:00 - define my form - and I call a view
03:06 - function you stored my form
03:09 - - and I'll define the name to it
03:13 - name is equal to my form - okay so I
03:19 - have to find this so in such a way that
03:21 - you don't get confused with the previous
03:23 - one so today we are going to work with
03:25 - my fault - okay now what are we going to
03:28 - do okay this is my app file and inside
03:33 - my app I create a new file with the name
03:37 - forms dot py okay so this looks pretty
03:43 - fine and what we are going to do so I'm
03:46 - inside my forms or py file and I move to
03:51 - this link okay so today the very first
03:54 - line you need to type is from Django
03:58 - import forms okay so what you need to do
04:02 - from Django import forms okay so why I'm
04:13 - doing this I will this will help and
04:16 - first I would run my server Python
04:19 - managed dot py run server so this would
04:25 - help me to get know if there's any
04:27 - okay the server will tell me okay so
04:30 - from Janko import forms and now you
04:33 - create a class for your form which will
04:36 - define okay highly creative glass glass
04:40 - is equal to feedback the feedback form
04:47 - okay I have a small V sorry feedback
04:50 - form and what I'm going to do I'm going
04:55 - to do forms dot form okay so this is the
05:00 - syntax you need to follow I can know
05:01 - you're we're done with this
05:03 - okay now I'll define two fields here one
05:07 - is the title okay and another one is
05:13 - subject okay so I'm going to define and
05:18 - what I'm going to do I'll create a
05:21 - careful since forms dot can feel okay
05:29 - and forms dot can feel this was
05:34 - predefined okay I have defined two cat
05:37 - fields here so I'll give a name left
05:39 - sorry I'll give a label with the max
05:41 - length i define label is equal to
05:46 - tighter
05:48 - okay now this fine label is equal to or
05:57 - we can call it a subject description
06:07 - description subject institution and I'll
06:12 - define a max under scope length is equal
06:16 - to 50 for this and in the same way I
06:19 - will define Maxon the thunderscope
06:24 - length is equal to 200 for this okay now
06:28 - what I'm going to do I'm also going to
06:31 - add a different attribute here here you
06:33 - can see that I can also define with it
06:38 - is able to form sort of X in
06:40 - okay so I'll copy this and in this field
06:46 - you are going to takes input here for
06:48 - this and for this one what I'll do I'll
06:53 - change this to have text area okay so if
06:59 - I'm not wrong I'm credit with the
07:01 - spelling okay this is takes a row right
07:03 - so here you can see this is text area
07:05 - this is takes input okay so I have
07:08 - created the form successfully so this is
07:10 - the form what you need to do from Django
07:14 - import forms class feedback form forms
07:17 - or form then title with both of them
07:19 - having a label of practice of the
07:20 - decision max lenses and the begin being
07:22 - the text input and the text theory
07:24 - respectively now I move to a new store
07:27 - py file and I'll define define my form -
07:36 - we'll take a request as a parameter and
07:41 - before using this what I do I'd type
07:45 - from dot forms so basically I'm
07:50 - referring to this file from form should
07:53 - provide import star so you can put it
07:57 - every form you want okay now what I am
08:01 - going to do I will put an if condition
08:04 - if request dot method is equal to post
08:13 - okay Elif
08:17 - just for the basic understanding I'm
08:18 - doing this request third method is equal
08:21 - to gate so for the same route we are
08:24 - going to check if the if the request
08:26 - method was get or post okay so if it was
08:32 - a cake method so what I'll do I'll
08:36 - create form I create a form and that
08:39 - form was this was the name of my form
08:42 - feedback form okay so I have a feedback
08:45 - form and okay so basically this is
08:50 - equivalent to
08:53 - this okay so this is just for having
08:58 - just fun and having a this is equal into
09:00 - this and what I'm going to do now I'll
09:05 - execute app a statement here just for
09:08 - I'm giving a pass segment Tilden on with
09:11 - that it doesn't show me an error and I
09:13 - have a form and what I do I return
09:16 - render request and I'll pull to find my
09:27 - dictionary is able to form okay and I'll
09:32 - pass this form and Hylian request and
09:37 - I'll make up my form to dot HTML okay
09:43 - and kind text is equal to mine
09:48 - dictionary okay sorry I'm wrong with the
09:51 - same text now this is fine but right now
09:56 - I've known to find my form to dot HTML
09:58 - okay so I'll go to my templates folder
10:01 - and I'll create a new file my form two
10:06 - dot HTML okay now what I'll do I'll
10:12 - extend my template so I'll have any page
10:16 - suppose I have this is a second row -
10:20 - table ocal have this page so basically
10:23 - right now what I'm doing okay so I'll
10:31 - change the title my form - okay what
10:39 - I'll do is create a form now that's it
10:44 - I'll create a form and now what I'm
10:47 - going to do basically I had rendered the
10:52 - form so I'll just what I'm doing
10:55 - I'll define the logic when I get to the
10:58 - post method so define my home - so if
11:01 - the requested methods will post till now
11:02 - I have to find a path segment will
11:04 - define the logic but if the method is
11:05 - get
11:06 - great the forum okay we will get the
11:10 - forum from that class and then we will
11:12 - render that forum to my forum to dot
11:14 - HTML using the dictionary and now if the
11:18 - same simply will move to my forum and
11:21 - simply type forum taught as under scope
11:25 - P okay so I'll be starting my server ok
11:32 - now this looks pretty fine so this
11:33 - should work now now I'll go to my local
11:37 - host so the server has started and I'll
11:40 - go to my forum - oh now you can see like
11:46 - the forum has been made so I didn't try
11:50 - to write the HTML code so what I did I
11:53 - move to my forms or py file I had to
11:58 - find a title and subject I've already
12:00 - defined the text input as well as the
12:03 - text area then I went to my views dot pi
12:07 - you store py file if the request method
12:09 - force dead so I had initialized the form
12:13 - then I had rendered on the page okay and
12:17 - then when I went to my HTML page that I
12:21 - had without writing the HTML I was able
12:24 - to successfully add the form using the
12:26 - HTML oh sorry using this by rendering
12:30 - the form okay so what you can see so an
12:33 - endoscopy means as paragraphs okay so
12:37 - when when I moved to my page so I'd
12:40 - rather simply click on ctrl + u so this
12:45 - will give me a source code
12:46 - so what hey you can see here the form
12:49 - has paragraph tags P P P ok so this
12:54 - means form was rendered using the
12:55 - paragraphs okay now what you can do I
12:58 - will type form a stable form a stable so
13:05 - when I move to my page now you can see
13:10 - the foam has been rendered using an
13:14 - table so table row table heading table
13:16 - data then table row respectively
13:19 - okay so this is fine right okay I'll
13:21 - zoom this okay this is a here you can
13:25 - see this had been rendered using an
13:27 - table okay and when I did form I'm just
13:30 - as P so this means it first paragraph so
13:34 - I also do this I will refresh this page
13:36 - then control you so here you can see
13:39 - this host paragraph
13:40 - okay there here you can see P P for
13:42 - paragraph and another know also one you
13:45 - can undo you can save form as the UN so
13:49 - this would give unordered list so I'll
13:53 - refresh this page I say so you can hear
13:56 - bullet marks this represents an
13:58 - unordered list so I simply control plus
14:01 - you know and you can see here you can
14:06 - see here is the form yes yeah here's the
14:08 - form you can see list has been declared
14:11 - list a list item list item when the form
14:13 - has been rendered using lists so in the
14:16 - next tutorial we are going to continue
14:18 - with this and then I will tell you the
14:22 - basic part way we if the request method
14:26 - have been the post so what I am going to
14:28 - tell you if the form will be submitted
14:30 - on so what would happen so next we will
14:34 - add see her try to style up this form as
14:37 - well as how we can render the errors and
14:39 - how we can fetch the clean data and how
14:41 - when you can check the validity of the
14:43 - form so this would help us really in the
14:46 - best possible way so thank you guys
14:49 - thank you so much and I again welcome
14:51 - you to programming knowledge so thank
14:53 - you guys thank you so much

Cleaned transcript:

welcome to programming knowledge so this is the twelfth tutorial of a django series so like in the previous tutorial I showed you how you can integrate the frontend part of your form to the backend part so I again welcome you all to programming knowledge so guys this is the Kitab link upper portion you can prune this upholstery and you can run the project on your local machine I have defined below the instructions so guys in this tutorial we are going to work with the form but and we are going to work with the back end part only but today we are going to create a different instance of form how we can create a separate file form store py file and we can store all the forms in that file and we can render the home been able required or whenever required without writing the repetition of the HTML code so that brings some kind of alternative solution how we can create a form and how we can submit them so let's get started with this so I have two links so you can have a look at these drinks so I have opened this links on my browser as well so first one is this so today the we are basically going to work in something this kind we are going to create a form in this such way and I am defined below how we can catch the tea in data from this form this will remove the special characters any special characters and this is the wicked widgets in the form so the basically there are different types of widgets one set X input number input email your password hidden input gain input date time time input text area then some other also check box radius select so there are file input so these are some like many options in the form and how you can render the form on your frontend part using today we are going to work with a different or directive solution so let's get started with this so what we'll do first I have a quick recap of the last picture like we the first I'll open my file you are stopping by file so like in the previous tutorial I showed you that you two urls one to render the form that was my form and another was the URL to submit the form so well I used to render a form using my form then I used to submit that form and we used to move to this URL then we are used then we had our backend logic then we had we can process the form data at this URL okay so today what we are going to do we are only going to create only one URL and will only work right on one you are and work when in such a way that it will help us out to do both the things so first what I will do okay okay and create a URL path I will define my form and I call a view function you stored my form and I'll define the name to it name is equal to my form okay so I have to find this so in such a way that you don't get confused with the previous one so today we are going to work with my fault okay now what are we going to do okay this is my app file and inside my app I create a new file with the name forms dot py okay so this looks pretty fine and what we are going to do so I'm inside my forms or py file and I move to this link okay so today the very first line you need to type is from Django import forms okay so what you need to do from Django import forms okay so why I'm doing this I will this will help and first I would run my server Python managed dot py run server so this would help me to get know if there's any okay the server will tell me okay so from Janko import forms and now you create a class for your form which will define okay highly creative glass glass is equal to feedback the feedback form okay I have a small V sorry feedback form and what I'm going to do I'm going to do forms dot form okay so this is the syntax you need to follow I can know you're we're done with this okay now I'll define two fields here one is the title okay and another one is subject okay so I'm going to define and what I'm going to do I'll create a careful since forms dot can feel okay and forms dot can feel this was predefined okay I have defined two cat fields here so I'll give a name left sorry I'll give a label with the max length i define label is equal to tighter okay now this fine label is equal to or we can call it a subject description description subject institution and I'll define a max under scope length is equal to 50 for this and in the same way I will define Maxon the thunderscope length is equal to 200 for this okay now what I'm going to do I'm also going to add a different attribute here here you can see that I can also define with it is able to form sort of X in okay so I'll copy this and in this field you are going to takes input here for this and for this one what I'll do I'll change this to have text area okay so if I'm not wrong I'm credit with the spelling okay this is takes a row right so here you can see this is text area this is takes input okay so I have created the form successfully so this is the form what you need to do from Django import forms class feedback form forms or form then title with both of them having a label of practice of the decision max lenses and the begin being the text input and the text theory respectively now I move to a new store py file and I'll define define my form we'll take a request as a parameter and before using this what I do I'd type from dot forms so basically I'm referring to this file from form should provide import star so you can put it every form you want okay now what I am going to do I will put an if condition if request dot method is equal to post okay Elif just for the basic understanding I'm doing this request third method is equal to gate so for the same route we are going to check if the if the request method was get or post okay so if it was a cake method so what I'll do I'll create form I create a form and that form was this was the name of my form feedback form okay so I have a feedback form and okay so basically this is equivalent to this okay so this is just for having just fun and having a this is equal into this and what I'm going to do now I'll execute app a statement here just for I'm giving a pass segment Tilden on with that it doesn't show me an error and I have a form and what I do I return render request and I'll pull to find my dictionary is able to form okay and I'll pass this form and Hylian request and I'll make up my form to dot HTML okay and kind text is equal to mine dictionary okay sorry I'm wrong with the same text now this is fine but right now I've known to find my form to dot HTML okay so I'll go to my templates folder and I'll create a new file my form two dot HTML okay now what I'll do I'll extend my template so I'll have any page suppose I have this is a second row table ocal have this page so basically right now what I'm doing okay so I'll change the title my form okay what I'll do is create a form now that's it I'll create a form and now what I'm going to do basically I had rendered the form so I'll just what I'm doing I'll define the logic when I get to the post method so define my home so if the requested methods will post till now I have to find a path segment will define the logic but if the method is get great the forum okay we will get the forum from that class and then we will render that forum to my forum to dot HTML using the dictionary and now if the same simply will move to my forum and simply type forum taught as under scope P okay so I'll be starting my server ok now this looks pretty fine so this should work now now I'll go to my local host so the server has started and I'll go to my forum oh now you can see like the forum has been made so I didn't try to write the HTML code so what I did I move to my forms or py file I had to find a title and subject I've already defined the text input as well as the text area then I went to my views dot pi you store py file if the request method force dead so I had initialized the form then I had rendered on the page okay and then when I went to my HTML page that I had without writing the HTML I was able to successfully add the form using the HTML oh sorry using this by rendering the form okay so what you can see so an endoscopy means as paragraphs okay so when when I moved to my page so I'd rather simply click on ctrl + u so this will give me a source code so what hey you can see here the form has paragraph tags P P P ok so this means form was rendered using the paragraphs okay now what you can do I will type form a stable form a stable so when I move to my page now you can see the foam has been rendered using an table so table row table heading table data then table row respectively okay so this is fine right okay I'll zoom this okay this is a here you can see this had been rendered using an table okay and when I did form I'm just as P so this means it first paragraph so I also do this I will refresh this page then control you so here you can see this host paragraph okay there here you can see P P for paragraph and another know also one you can undo you can save form as the UN so this would give unordered list so I'll refresh this page I say so you can hear bullet marks this represents an unordered list so I simply control plus you know and you can see here you can see here is the form yes yeah here's the form you can see list has been declared list a list item list item when the form has been rendered using lists so in the next tutorial we are going to continue with this and then I will tell you the basic part way we if the request method have been the post so what I am going to tell you if the form will be submitted on so what would happen so next we will add see her try to style up this form as well as how we can render the errors and how we can fetch the clean data and how when you can check the validity of the form so this would help us really in the best possible way so thank you guys thank you so much and I again welcome you to programming knowledge so thank you guys thank you so much
