With timestamps:

00:00 - hello guys welcome to the next video on
00:02 - Java programming tutorial for beginners
00:04 - in the last video we have seen how to
00:07 - use try-catch block with our java code
00:10 - in this video we will see what is
00:13 - finally block in Java and how we can use
00:17 - it with try-catch block in Java so first
00:22 - of all what is a finally block the
00:27 - finally block always executes when the
00:30 - try block exists okay so generally you
00:34 - use finally block when you want to add a
00:40 - try-catch block with your code okay and
00:44 - the property of finally block is it
00:50 - always executes whether your exception
00:54 - occurs or it doesn't occur it doesn't
00:57 - matter what the code does it throws
01:01 - exception or it doesn't throw exception
01:04 - this finally block is always executed
01:08 - so using this finally block you have
01:11 - always the chance to release your
01:15 - resources okay so let me give you an
01:19 - example in the last video we have seen
01:21 - that we can use a try-catch block
01:24 - something like this and this is the code
01:28 - which throws an exception because any
01:31 - integer which is divided by 0 will give
01:34 - an infinity and then Java will throw an
01:38 - exception for that and which exception
01:40 - is throws it throws arithmetic exception
01:42 - right now to add a finally block to a
01:47 - try-catch block what we can do is we can
01:49 - just write finally and then in the curly
01:53 - braces you can close it ok so this is
01:57 - how you add finally block to your pry
02:00 - cache block and the property of this is
02:02 - it's always executed so for example I
02:06 - can print something here for example
02:11 - finally called ok
02:13 - and let's add this print message here
02:16 - and here we can say catch called okay
02:20 - and let's save the program and run the
02:24 - program and in here you see here it
02:28 - gives you this finally called message
02:32 - right and when I just scroll a little
02:36 - bit above it prints catch that means
02:39 - this code throws an exception and then
02:42 - this line is printed and then it prints
02:45 - the exception which is which have
02:47 - occurred and then at the end when the
02:50 - exception is thrown and caught by this
02:52 - catch block at the end this finally will
02:55 - execute okay
02:57 - and this makes sure that you can release
03:01 - all your resources or this can be used
03:04 - to you know do the final work whatever
03:07 - you want to do after the exception or
03:11 - even if the exception doesn't happen
03:14 - then also you can use finally in most of
03:18 - the situations okay so it's a good
03:21 - practice to use finally with your try
03:25 - catch block okay and there is only one
03:28 - situation where this finally block will
03:31 - not be called and this situation is when
03:35 - you call a system dot exit method inside
03:39 - your try block so for example I do
03:41 - something like this system dot exit with
03:45 - some integer here for example 1 and I
03:48 - will comment this code and when I run
03:50 - the code then what happens see nothing
03:56 - happens why because we have called
03:58 - system dot exit and it exits from the
04:01 - program and this is the only situation
04:05 - where this finally will not be called in
04:07 - any other situation if the exception is
04:11 - thrown is if the exception is not thrown
04:13 - finally will be called ok now to
04:18 - understand this situation in a better
04:21 - way let's create a method for example
04:24 - public
04:27 - attic void or let's return integer here
04:33 - and let's say return int okay let's say
04:42 - this method only returned integer okay
04:44 - so and inside this I'm just going to
04:49 - copy and cut this code which I have in
04:53 - the main and paste it here okay and in
04:57 - the last at the last what I want to do
04:59 - is I want to return some integer so for
05:02 - example I want to return the value of a
05:06 - right so I want to declare this a
05:12 - outside my try block okay and for
05:15 - example we don't divide this hundred by
05:18 - zero so it's valid situation and we want
05:21 - to return a right so in here I want to
05:26 - delete this and I will return a okay and
05:30 - for example it throws an exception and
05:34 - it goes here I want to return a here
05:39 - also and in here also I want to return a
05:43 - okay so in finally block I want to
05:47 - return in this situation we will see
05:49 - later but for now I want to do something
05:52 - like this and in here I just want to
05:56 - call my system out so this out and in
06:03 - here I just want to call my return int
06:05 - method okay inside this okay so let's
06:10 - run the program and let's see what
06:12 - happens so I'm running the program
06:14 - and it returns 100 and 100 is printed
06:17 - here and then finally block is called
06:19 - after the try block returns so even if
06:25 - your function returns this finally block
06:30 - will be called okay so it doesn't matter
06:33 - if you return from try block generally
06:37 - you would think that you are returning
06:40 - from here
06:40 - then after return no code will be
06:44 - executed but for finally it's an
06:47 - exception finally will be executed even
06:51 - if you are returning in the try block or
06:56 - even in the catch block also so let's
07:00 - divide it by 100 or divide this by 0 not
07:06 - here but for example 2 it here a is
07:11 - equal to 8 divided by 0 okay so it will
07:17 - throw right so it will go here and then
07:20 - exception code will be called and then
07:23 - let's see what happens so save the
07:25 - program and run the program and once
07:28 - again we can see catch is called so it
07:31 - throws an exception it goes here and it
07:34 - first of all it calls this finally block
07:38 - which prints this message finally called
07:41 - and then only we will be able to see
07:44 - this hundred which is returned by this
07:47 - return so it doesn't matter if you
07:51 - return from the try block or catch block
07:53 - finally will be called in that situation
07:57 - also now there is one more situation
08:00 - which can occur for example I want to
08:05 - return from the finally block also so
08:09 - for example right now I have assigned a
08:11 - is equal to hundred right and in the
08:16 - finally block I can override my return
08:20 - value for example I can do something
08:23 - like this a is equal to thousand or five
08:28 - thousand okay and then I can return a
08:34 - now what will be returned from here will
08:41 - it return 100 or will it return 5000
08:45 - let's see what will happen so let me do
08:48 - this after this here and what I'm going
08:52 - to do here I will
08:54 - this program and I'm going to run it and
08:57 - you can see that finally overrides your
09:03 - return value also okay so ideally it
09:10 - should return 100 if you don't return
09:13 - from finally right so I don't want to
09:18 - return from finally I will save it and
09:21 - it will return 100 like this okay but
09:25 - when you return from finally and you
09:27 - want to change the value which you want
09:30 - to return in finally then finally will
09:35 - override your earlier return value for
09:39 - example five thousand so I will save
09:41 - this and run this and it will return
09:43 - five thousand okay so in this way you
09:48 - can use finally with your try/catch
09:51 - block and always remember it's a good
09:55 - practice to use finally with your
09:57 - try-catch block so always try to use it
09:59 - whenever you use try-catch blocks so I
10:02 - hope you have enjoyed this video please
10:04 - rate comment and subscribe and bye

Cleaned transcript:

hello guys welcome to the next video on Java programming tutorial for beginners in the last video we have seen how to use trycatch block with our java code in this video we will see what is finally block in Java and how we can use it with trycatch block in Java so first of all what is a finally block the finally block always executes when the try block exists okay so generally you use finally block when you want to add a trycatch block with your code okay and the property of finally block is it always executes whether your exception occurs or it doesn't occur it doesn't matter what the code does it throws exception or it doesn't throw exception this finally block is always executed so using this finally block you have always the chance to release your resources okay so let me give you an example in the last video we have seen that we can use a trycatch block something like this and this is the code which throws an exception because any integer which is divided by 0 will give an infinity and then Java will throw an exception for that and which exception is throws it throws arithmetic exception right now to add a finally block to a trycatch block what we can do is we can just write finally and then in the curly braces you can close it ok so this is how you add finally block to your pry cache block and the property of this is it's always executed so for example I can print something here for example finally called ok and let's add this print message here and here we can say catch called okay and let's save the program and run the program and in here you see here it gives you this finally called message right and when I just scroll a little bit above it prints catch that means this code throws an exception and then this line is printed and then it prints the exception which is which have occurred and then at the end when the exception is thrown and caught by this catch block at the end this finally will execute okay and this makes sure that you can release all your resources or this can be used to you know do the final work whatever you want to do after the exception or even if the exception doesn't happen then also you can use finally in most of the situations okay so it's a good practice to use finally with your try catch block okay and there is only one situation where this finally block will not be called and this situation is when you call a system dot exit method inside your try block so for example I do something like this system dot exit with some integer here for example 1 and I will comment this code and when I run the code then what happens see nothing happens why because we have called system dot exit and it exits from the program and this is the only situation where this finally will not be called in any other situation if the exception is thrown is if the exception is not thrown finally will be called ok now to understand this situation in a better way let's create a method for example public attic void or let's return integer here and let's say return int okay let's say this method only returned integer okay so and inside this I'm just going to copy and cut this code which I have in the main and paste it here okay and in the last at the last what I want to do is I want to return some integer so for example I want to return the value of a right so I want to declare this a outside my try block okay and for example we don't divide this hundred by zero so it's valid situation and we want to return a right so in here I want to delete this and I will return a okay and for example it throws an exception and it goes here I want to return a here also and in here also I want to return a okay so in finally block I want to return in this situation we will see later but for now I want to do something like this and in here I just want to call my system out so this out and in here I just want to call my return int method okay inside this okay so let's run the program and let's see what happens so I'm running the program and it returns 100 and 100 is printed here and then finally block is called after the try block returns so even if your function returns this finally block will be called okay so it doesn't matter if you return from try block generally you would think that you are returning from here then after return no code will be executed but for finally it's an exception finally will be executed even if you are returning in the try block or even in the catch block also so let's divide it by 100 or divide this by 0 not here but for example 2 it here a is equal to 8 divided by 0 okay so it will throw right so it will go here and then exception code will be called and then let's see what happens so save the program and run the program and once again we can see catch is called so it throws an exception it goes here and it first of all it calls this finally block which prints this message finally called and then only we will be able to see this hundred which is returned by this return so it doesn't matter if you return from the try block or catch block finally will be called in that situation also now there is one more situation which can occur for example I want to return from the finally block also so for example right now I have assigned a is equal to hundred right and in the finally block I can override my return value for example I can do something like this a is equal to thousand or five thousand okay and then I can return a now what will be returned from here will it return 100 or will it return 5000 let's see what will happen so let me do this after this here and what I'm going to do here I will this program and I'm going to run it and you can see that finally overrides your return value also okay so ideally it should return 100 if you don't return from finally right so I don't want to return from finally I will save it and it will return 100 like this okay but when you return from finally and you want to change the value which you want to return in finally then finally will override your earlier return value for example five thousand so I will save this and run this and it will return five thousand okay so in this way you can use finally with your try/catch block and always remember it's a good practice to use finally with your trycatch block so always try to use it whenever you use trycatch blocks so I hope you have enjoyed this video please rate comment and subscribe and bye
