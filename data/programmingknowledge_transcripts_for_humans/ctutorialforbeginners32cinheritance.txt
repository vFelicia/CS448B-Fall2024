With timestamps:

00:00 - hello guys in this video I'm going to
00:02 - show you what is
00:03 - inheritance and how to use inheritance
00:07 - in
00:08 - C++ so we all know that C++ is an
00:12 - objectoriented programming language
00:14 - right and inheritance is one of the most
00:19 - important concept of objectoriented
00:22 - programming so what inheritance does
00:26 - inheritance allows us to define a class
00:28 - in terms of another class right so once
00:33 - again inheritance allows us to define a
00:36 - class in terms of another class which
00:40 - makes us easier or which makes it easier
00:43 - to create and
00:45 - maintain our application and this in
00:49 - result will increase the US reusability
00:52 - of code and faster implementation of our
00:57 - code so let me give give you an
01:01 - example for example you want to
01:04 - calculate the area of some
01:07 - shapes and this shape is a polygon right
01:12 - so what uh polygon can be polygon can be
01:17 - a rectangle polygon can be a
01:20 - square polygon can be
01:24 - even triangle
01:27 - right and why I'm saying this
01:33 - is
01:35 - because each of the polygon has similar
01:39 - property and what is the property every
01:42 - polygon rectangle or square or triangle
01:47 - have height and width okay so height and
01:51 - width are common to each polygon but the
01:55 - calculation of area for each of the
01:57 - polygon is different right
02:00 - so what we can do is we can define a
02:04 - class which have width and height that
02:08 - we can reuse in other class for example
02:12 - rectangle square triangle or any other
02:14 - variable so that uh it will reduce our
02:19 - code uh writing also and it will use the
02:24 - reusability of our width and height in
02:26 - our polygon class so let's see how how
02:30 - we can
02:31 - Define uh inheritance classes in
02:36 - C++ so I have already told you we have
02:39 - polygon class and in this class for
02:41 - example I Nam this class as shape
02:45 - okay and this class has two member
02:50 - variables width and height as I have
02:53 - told you and what are these These are
02:55 - protected members now I I think I
02:59 - haven't uh discussed about protected
03:02 - access modifier uh before so this is the
03:06 - right time I
03:07 - think so protected member of a
03:11 - class
03:13 - are reusable or can be used in other
03:18 - class which is inheriting this class
03:24 - okay so I'm going to give you uh once I
03:27 - complete this example you will be able
03:29 - to understand
03:30 - what is protected and I will repeat this
03:32 - definition once again and you already
03:35 - know what is public uh members public
03:38 - members are available uh in other
03:40 - classes freely even though they are not
03:43 - inheriting from the base
03:45 - class so we have our class which we call
03:50 - as base class which will be a base class
03:55 - uh for rectangle square or triangle
03:58 - classes and the height and width we want
04:01 - to keep common to this rectangle square
04:06 - or triangle class so we have the class
04:08 - called shape which has protected
04:11 - members which is height and width and
04:15 - which has public me function function
04:18 - which sets uh which sets these uh the
04:22 - value of width and height okay so this
04:26 - is simple function which takes two
04:27 - arguments and whatever AR when we pass
04:30 - it in this function it will set the
04:33 - value of these two width and height
04:36 - right so this shape is a base class now
04:41 - for example I define a
04:44 - class called
04:51 - rectangle
04:55 - rectangle little
04:57 - bit okay so
05:04 - rectangle
05:07 - and in this rectangle we want to
05:09 - calculate the area of the rectangle okay
05:13 - so this
05:15 - has
05:20 - public function called
05:24 - void
05:26 - area and what it does it
05:30 - it's just we are using to calculate the
05:32 - area of the rectangle
05:36 - right so what we are going to do we
05:42 - are going to use these width and height
05:46 - from the shape class to our rectangle
05:50 - class and how we can use it by using
05:54 - inheritance and how we can inheritance
05:58 - inherit from from our shape class to our
06:02 - rectangle class okay so the shape class
06:06 - in our case is called a base class and
06:09 - rectangle class is in our case is called
06:11 - the derived class and how we can inherit
06:14 - from this shape class inherit uh these
06:17 - member variables or member functions in
06:21 - the derived class we just use colon this
06:25 - kind of colon and then we uh Define a x
06:29 - modifier which is
06:35 - Public public and then the name of our
06:39 - class from which we are
06:41 - deriving okay so this kind of
06:45 - Declaration is called inheriting from
06:48 - the base class to the derived class and
06:51 - rectangle in this case is called the
06:53 - derived class and shape in this case is
06:56 - called the base class from which we are
06:59 - in inheriting and what we are inheriting
07:01 - we are inheriting height and
07:04 - width of the
07:06 - polygon okay so we have the uh function
07:10 - public function and we want to calculate
07:14 - the area right so what we can do because
07:17 - we are inheriting from the shape class
07:20 - which have height and width defined
07:23 - already we can use all the public and
07:27 - protected members of the base class in
07:31 - our derived class we can use this height
07:35 - and width in our derived class so what
07:39 - we can
07:41 - do return what is the area of the
07:45 - rectangle height into width and because
07:48 - we are inheriting from shape class and
07:50 - these are the member variable of shape
07:52 - class we can use it here also height
07:56 - multiplied by width
08:02 - okay so inheritance allows us to
08:06 - reuse the Base Class member variable
08:10 - which are either protected or
08:13 - public
08:15 - okay and it will give you the area of
08:17 - the rectangle right now in order to
08:22 - calculate the
08:24 - area let's define other class for
08:27 - example triangle and this also will uh
08:31 - uh inherit from the shape class and we
08:34 - also want to calculate the area of the
08:39 - triangle so this is a class second class
08:42 - which is uh inheriting from the shape
08:45 - class and in this uh class also we want
08:48 - to calculate the area of the rectangle
08:51 - uh triangle right and the area of
08:54 - triangle is height into width ided 2
09:00 - right
09:01 - if you all agree with me I think so area
09:06 - of the triangle is width into height
09:08 - divided by two right so what we are
09:13 - doing we are reusing the variables from
09:18 - our base class in our derived classes
09:22 - which are rectangle and
09:24 - triangle
09:26 - now we can just
09:30 - Define the object of our rectangle
09:34 - class rectangle is equal to rectangle
09:39 - rack okay and we can Define the object
09:43 - of triangle
09:45 - class
09:47 - triangle p r i for
09:50 - example and what we can do is we can
09:54 - reuse or we can use the function which
09:58 - is set value which is there in the shape
10:01 - class by using these objects called
10:04 - rectangle or triangle because we are
10:08 - inheriting from our shape class
10:11 - right so once we write re which is a
10:16 - object of rectangle class Dot and you
10:19 - can see here set values is available
10:22 - here right so we are going to use
10:26 - this and we can set for example we want
10:29 - to calculate the area width is equal to
10:33 - 15 and the height is equal to 10 okay so
10:40 - this will give you the
10:44 - um width and height with this will set
10:47 - the width and height and I forgot one
10:50 - thing because we are returning this we
10:53 - need
10:54 - to return int instead of void right you
10:58 - may
10:59 - be confused why I'm writing void here it
11:03 - should be int because we are returning
11:05 - integer value
11:07 - right in a similar way I can use
11:09 - triangle object to calculate the area of
11:13 - the triangle and the member function set
11:16 - value is also available here for example
11:20 - the
11:21 - same values I want to give in the case
11:24 - of uh this triangle to calculate the
11:28 - area of triangle
11:29 - so this set function is there in our
11:33 - base class but we can reuse this in our
11:37 - derive class using the object of uh our
11:40 - Drive classes right now to calculate the
11:43 - area I can just write uh
11:49 - STD not
11:51 - here here standard which uh is standard
11:57 - see out
12:00 - and
12:02 - then we can uh just print
12:06 - area
12:10 - area
12:12 - rectangle is equal
12:15 - to so the area of rectangle we can find
12:19 - it from this uh rectangle function which
12:23 - is a area function right area so we can
12:27 - use this object of uh this rectangle
12:30 - class right so re C dot area right it
12:36 - will give us the area of the rectangle
12:39 - then I will just write the
12:42 - the end
12:49 - line and in a similar way I can find the
12:53 - area of the
12:55 - triangle
12:57 - area
13:01 - triangle okay and this time we are going
13:05 - to use try
13:08 - object so let's try and run the program
13:12 - I will just build
13:15 - this
13:17 - and yes we want to build it
13:21 - now and it gives some error let's see
13:25 - what is the
13:27 - error okay so here I forgot the
13:29 - semicolon here also I forgot the
13:32 - semicolon and let's rebuild it R
13:35 - again and still because this has to be
13:45 - here and when we build build it we can
13:48 - see area rectangle is 150 which is 10
13:52 - multiplied by 15 which is 150 and the
13:57 - area of triangle is 7 which is 15 * 10
14:01 - ided 2 which is
14:03 - 75 okay so this is the concept of
14:07 - inheritance so once again what
14:10 - inheritance does inheritance allows us
14:13 - to reuse Our member functions or member
14:18 - variables from the base class which is
14:22 - shape in our case and we can inherit
14:25 - from shape class because what we want we
14:29 - want to reuse this height and width
14:31 - function in our rectangle class and
14:34 - triangle class or even Square class for
14:37 - example and in the derived class so
14:41 - class which is inheriting from our Base
14:44 - Class is called the derived class and in
14:47 - this we this class has the access to all
14:52 - the protected
14:53 - members and public members of the base
14:57 - class so so what are protected
15:00 - members protected members are the
15:02 - members which can be reused in the
15:05 - derived class okay so class in which we
15:09 - are deriving from which we are deriving
15:12 - these are protected but if it was a
15:15 - private member height and width were the
15:18 - private member we cannot use it in the
15:21 - derived class private members are
15:23 - private to the class they cannot be
15:25 - reused outside the class and what are
15:28 - public members public members can be
15:31 - used
15:32 - everywhere right even if this uh
15:36 - rectangle class will not be uh derived
15:41 - from the shape class even then also we
15:44 - will use public members from shape class
15:47 - but in order to reuse this height and
15:51 - width uh we need to Define these members
15:54 - as pro pro protected uh because we are
15:58 - in inheriting from this and we want to
16:00 - reuse this height and width right so
16:03 - this is how you uh use protected members
16:07 - protected members are only available in
16:10 - the derived class and not in any other
16:13 - class and public members are available
16:16 - in any class even though it's not uh
16:19 - inheriting any class and private members
16:22 - cannot be used outside your class
16:25 - because they are private right so this
16:27 - is the difference between public
16:29 - protected and private access
16:32 - modifiers and this is how you can use um
16:36 - uh this inheritance now how you come to
16:40 - know that you uh can use inheritance in
16:44 - your C++ program so C uh inheritance
16:48 - always have the relation of is a
16:52 - relation so I will write it in double
16:55 - quote is our relation
16:59 - okay and what is this is a relation if
17:03 - you can uh uh find this relation for
17:06 - example triang rectangle is a polygon
17:10 - right square is a polygon triangle is a
17:14 - polygon then you can use inheritance
17:17 - right I will give you an another example
17:20 - for example we have the Base Class
17:23 - called
17:25 - animal and we have derived class
17:29 - dog cat for example so dog is a is an an
17:34 - animal
17:35 - right cat is an animal so in this case
17:39 - also we can use inheritance where our
17:42 - animal class will be uh Base Class which
17:45 - can be reused in place of shape and dog
17:48 - and cat can be used as der class which
17:52 - can inherit from animal
17:54 - class so I hope you have understood the
17:57 - concept of inheritance and I hope you
17:59 - have enjoyed this video please RIT
18:01 - comment and subscribe and bye for now

Cleaned transcript:

hello guys in this video I'm going to show you what is inheritance and how to use inheritance in C++ so we all know that C++ is an objectoriented programming language right and inheritance is one of the most important concept of objectoriented programming so what inheritance does inheritance allows us to define a class in terms of another class right so once again inheritance allows us to define a class in terms of another class which makes us easier or which makes it easier to create and maintain our application and this in result will increase the US reusability of code and faster implementation of our code so let me give give you an example for example you want to calculate the area of some shapes and this shape is a polygon right so what uh polygon can be polygon can be a rectangle polygon can be a square polygon can be even triangle right and why I'm saying this is because each of the polygon has similar property and what is the property every polygon rectangle or square or triangle have height and width okay so height and width are common to each polygon but the calculation of area for each of the polygon is different right so what we can do is we can define a class which have width and height that we can reuse in other class for example rectangle square triangle or any other variable so that uh it will reduce our code uh writing also and it will use the reusability of our width and height in our polygon class so let's see how how we can Define uh inheritance classes in C++ so I have already told you we have polygon class and in this class for example I Nam this class as shape okay and this class has two member variables width and height as I have told you and what are these These are protected members now I I think I haven't uh discussed about protected access modifier uh before so this is the right time I think so protected member of a class are reusable or can be used in other class which is inheriting this class okay so I'm going to give you uh once I complete this example you will be able to understand what is protected and I will repeat this definition once again and you already know what is public uh members public members are available uh in other classes freely even though they are not inheriting from the base class so we have our class which we call as base class which will be a base class uh for rectangle square or triangle classes and the height and width we want to keep common to this rectangle square or triangle class so we have the class called shape which has protected members which is height and width and which has public me function function which sets uh which sets these uh the value of width and height okay so this is simple function which takes two arguments and whatever AR when we pass it in this function it will set the value of these two width and height right so this shape is a base class now for example I define a class called rectangle rectangle little bit okay so rectangle and in this rectangle we want to calculate the area of the rectangle okay so this has public function called void area and what it does it it's just we are using to calculate the area of the rectangle right so what we are going to do we are going to use these width and height from the shape class to our rectangle class and how we can use it by using inheritance and how we can inheritance inherit from from our shape class to our rectangle class okay so the shape class in our case is called a base class and rectangle class is in our case is called the derived class and how we can inherit from this shape class inherit uh these member variables or member functions in the derived class we just use colon this kind of colon and then we uh Define a x modifier which is Public public and then the name of our class from which we are deriving okay so this kind of Declaration is called inheriting from the base class to the derived class and rectangle in this case is called the derived class and shape in this case is called the base class from which we are in inheriting and what we are inheriting we are inheriting height and width of the polygon okay so we have the uh function public function and we want to calculate the area right so what we can do because we are inheriting from the shape class which have height and width defined already we can use all the public and protected members of the base class in our derived class we can use this height and width in our derived class so what we can do return what is the area of the rectangle height into width and because we are inheriting from shape class and these are the member variable of shape class we can use it here also height multiplied by width okay so inheritance allows us to reuse the Base Class member variable which are either protected or public okay and it will give you the area of the rectangle right now in order to calculate the area let's define other class for example triangle and this also will uh uh inherit from the shape class and we also want to calculate the area of the triangle so this is a class second class which is uh inheriting from the shape class and in this uh class also we want to calculate the area of the rectangle uh triangle right and the area of triangle is height into width ided 2 right if you all agree with me I think so area of the triangle is width into height divided by two right so what we are doing we are reusing the variables from our base class in our derived classes which are rectangle and triangle now we can just Define the object of our rectangle class rectangle is equal to rectangle rack okay and we can Define the object of triangle class triangle p r i for example and what we can do is we can reuse or we can use the function which is set value which is there in the shape class by using these objects called rectangle or triangle because we are inheriting from our shape class right so once we write re which is a object of rectangle class Dot and you can see here set values is available here right so we are going to use this and we can set for example we want to calculate the area width is equal to 15 and the height is equal to 10 okay so this will give you the um width and height with this will set the width and height and I forgot one thing because we are returning this we need to return int instead of void right you may be confused why I'm writing void here it should be int because we are returning integer value right in a similar way I can use triangle object to calculate the area of the triangle and the member function set value is also available here for example the same values I want to give in the case of uh this triangle to calculate the area of triangle so this set function is there in our base class but we can reuse this in our derive class using the object of uh our Drive classes right now to calculate the area I can just write uh STD not here here standard which uh is standard see out and then we can uh just print area area rectangle is equal to so the area of rectangle we can find it from this uh rectangle function which is a area function right area so we can use this object of uh this rectangle class right so re C dot area right it will give us the area of the rectangle then I will just write the the end line and in a similar way I can find the area of the triangle area triangle okay and this time we are going to use try object so let's try and run the program I will just build this and yes we want to build it now and it gives some error let's see what is the error okay so here I forgot the semicolon here also I forgot the semicolon and let's rebuild it R again and still because this has to be here and when we build build it we can see area rectangle is 150 which is 10 multiplied by 15 which is 150 and the area of triangle is 7 which is 15 * 10 ided 2 which is 75 okay so this is the concept of inheritance so once again what inheritance does inheritance allows us to reuse Our member functions or member variables from the base class which is shape in our case and we can inherit from shape class because what we want we want to reuse this height and width function in our rectangle class and triangle class or even Square class for example and in the derived class so class which is inheriting from our Base Class is called the derived class and in this we this class has the access to all the protected members and public members of the base class so so what are protected members protected members are the members which can be reused in the derived class okay so class in which we are deriving from which we are deriving these are protected but if it was a private member height and width were the private member we cannot use it in the derived class private members are private to the class they cannot be reused outside the class and what are public members public members can be used everywhere right even if this uh rectangle class will not be uh derived from the shape class even then also we will use public members from shape class but in order to reuse this height and width uh we need to Define these members as pro pro protected uh because we are in inheriting from this and we want to reuse this height and width right so this is how you uh use protected members protected members are only available in the derived class and not in any other class and public members are available in any class even though it's not uh inheriting any class and private members cannot be used outside your class because they are private right so this is the difference between public protected and private access modifiers and this is how you can use um uh this inheritance now how you come to know that you uh can use inheritance in your C++ program so C uh inheritance always have the relation of is a relation so I will write it in double quote is our relation okay and what is this is a relation if you can uh uh find this relation for example triang rectangle is a polygon right square is a polygon triangle is a polygon then you can use inheritance right I will give you an another example for example we have the Base Class called animal and we have derived class dog cat for example so dog is a is an an animal right cat is an animal so in this case also we can use inheritance where our animal class will be uh Base Class which can be reused in place of shape and dog and cat can be used as der class which can inherit from animal class so I hope you have understood the concept of inheritance and I hope you have enjoyed this video please RIT comment and subscribe and bye for now
