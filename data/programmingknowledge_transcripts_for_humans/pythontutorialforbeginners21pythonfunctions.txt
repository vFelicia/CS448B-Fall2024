With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - Python tutorial for beginners in this
00:04 - video I'm going to show you what is a
00:06 - function in Python and how to use
00:08 - functions in Python so first of all what
00:12 - is a function so a function is a group
00:15 - of statements within a program that
00:18 - performs a specific task now functions
00:21 - can be of two types one is built-in
00:25 - function and other is user-defined
00:27 - function built-in function we have
00:30 - already seen that print is a built-in
00:33 - function or for example input is a
00:35 - built-in function or for example min is
00:38 - a built-in function and so on
00:41 - now usually function does one task at a
00:44 - time so you can see this print function
00:48 - only prints something whatever input you
00:50 - give here is going to print it input
00:53 - function takes some input from the user
00:56 - main function finds out the minimum out
00:58 - of some values so a particular function
01:02 - do one task at a time now let's see how
01:06 - we can define a function so to define a
01:09 - function you use a keyword de F and then
01:13 - you give the name of the function so
01:15 - name of function and after the name of
01:19 - the function you give these parentheses
01:21 - and you provide number of arguments or
01:25 - parameters so for example Arg 1 comma
01:30 - Arg 2 comma Arg 3 and so on so you can
01:36 - give any number of arguments to your
01:39 - function now after this ending
01:43 - parenthesis you give this colon and then
01:46 - under this function signature you write
01:50 - some statements which you want to
01:53 - execute when this function is called so
01:56 - for example if you want to print
01:58 - something you can print something or if
02:00 - you want to calculate something for
02:02 - example the product of two or three
02:05 - variables or a sum of two or three
02:08 - variables you can do under this function
02:11 - declaration so let us take an example
02:13 - sample of function and let's see how we
02:16 - can define real-life function so I'm
02:20 - going to define a very simple function
02:21 - which is going to add two values so I'm
02:25 - going to name it as sum and for example
02:29 - it takes two values one is let's say Arg
02:32 - 1 and other is Arg 2 and then after the
02:38 - colon I want to add these two values so
02:41 - I can just write print here and then I
02:44 - can write R 1 plus R 2 so this is a very
02:50 - simple function which takes two
02:52 - arguments and then add these two
02:55 - arguments and print them so this is how
02:59 - you declare a user-defined function now
03:02 - after declaring a function you need to
03:05 - also call this function so in order to
03:08 - call the function you just use the name
03:11 - of the function and then you provide the
03:13 - arguments which is required by the
03:15 - function so our function requires two
03:18 - argument right now R 1 and R 2 so we are
03:21 - going to provide these two values let's
03:24 - say I want to provide 15 as the argument
03:28 - 1 and I will provide 60 as the second
03:31 - value now let's run the code and let's
03:34 - see what happens so when we run the code
03:36 - you can see our function prints 75 which
03:41 - is the sum of these two values which we
03:44 - have provided as an argument to this
03:48 - function now also if you remember this
03:51 - plus operator you can also use to
03:54 - concatenate two strings so I can use
03:58 - this sum function and this time I'm
04:01 - going to provide for example hello as
04:04 - the first parameter and then world as
04:07 - the second parameter and then I'm going
04:11 - to run the program and it's going to
04:13 - print hello world in addition we can
04:15 - provide to float numbers here for
04:18 - example I will provide 15 point 6 4 7
04:21 - and the second argument I'm going to
04:23 - provide is 80 point 2 5 8
04:26 - and this is also allowed so I'm going to
04:29 - just run this code and it gives us the
04:33 - sum of these two values so this function
04:36 - sum is doing one single task which is to
04:40 - add two values whether it's a string or
04:44 - it's a number or it's a float value now
04:47 - you may also observe that when I provide
04:51 - for example as a first argument I will
04:54 - provide a string and as a second
04:57 - argument I will provide a number here
04:59 - will this work let's see so it's going
05:03 - to give us an error and this error says
05:06 - can't convert into object to string
05:09 - implicitly so this is a problem so to
05:12 - solve this problem we can provide here a
05:15 - simple condition and we are going to
05:17 - check the type of both the arguments so
05:20 - if type Arg 1 is not equal to type or 2
05:29 - this should be Arg of 1 not easier 1 so
05:33 - let me just change this here and if the
05:38 - type of art 1 is not equal to R 2 we are
05:42 - going to just use this keyword which is
05:45 - returned so this return keyword is used
05:49 - to return something so you can return
05:52 - for example 0 here or any string here
05:55 - and when you write this return function
05:58 - without any value here it's going to
06:01 - return nothing but as soon as this
06:04 - return keyword is called
06:06 - nothing after that will be executed so
06:09 - even though you are returning nothing
06:11 - from here then also this statement will
06:14 - not be executed so whenever return is
06:17 - executed after that all the statements
06:20 - which are under the return will not be
06:23 - executed also we can print a message
06:26 - here that please give the odds of same
06:31 - type okay and let's run the code now and
06:34 - you can see now it prints this message
06:38 - which says please give arcs or
06:40 - same type so if these arguments are not
06:44 - of same type whether it's integer or a
06:47 - string or a float value if the user
06:51 - provides first argument which is a
06:53 - string type and the second argument
06:55 - which is integer type then this
06:58 - condition will be true and this
07:01 - statement will be executed which is
07:04 - going to print this message and then
07:07 - return is called and after this whatever
07:10 - statements are there will not be
07:12 - executed so now as I said you can also
07:15 - return some values from a function and
07:17 - here when you don't give any values
07:21 - after this return keyword it's good not
07:23 - going to return anything but let's
07:26 - return the addition of two arguments
07:30 - using our return keyword so I'm going to
07:33 - use this return keyword here which is
07:36 - going to return the addition of these
07:39 - two values using this sum function so
07:43 - now what will happen is let's run the
07:46 - code once again and you can see this sum
07:48 - is executed this sum is executed this
07:50 - sum is executed but the result is not
07:53 - printed so in order to get the result
07:57 - out of this function when it returns
08:00 - something we need to save this return
08:03 - value in a variable so let's save this
08:05 - value into a variable and then you can
08:09 - use this variable to print the value of
08:12 - the sum so I can do something like this
08:16 - also you can directly and close this sum
08:20 - function inside a print function and
08:23 - then also it's going to print the sum of
08:27 - these two strings so either you can
08:30 - assign the result of this sum function
08:34 - which is returning the result into a
08:36 - variable or you can use directly this
08:40 - print function to get the result and
08:42 - print it so I'm going to use print with
08:45 - other two functions also
08:48 - so first print and the second print here
08:53 - and let's run the code once again
08:56 - and now you can see what happens so
09:00 - first of all it prints 75 which is the
09:03 - addition of these two numbers which is
09:06 - returned by this sum function
09:09 - into a variable a and we are printing
09:12 - the sum using this print function here
09:15 - in the next result it prints hello world
09:18 - because this sum function now returns
09:21 - the concatenation of these two strings
09:24 - similarly this sum function is going to
09:26 - return the sum of these two float values
09:28 - and in the last result because the type
09:33 - of Hello is not equal to the type of 15
09:36 - then this message is printed because
09:39 - this condition is true in the last case
09:43 - and then return will be called and when
09:46 - this return is called we were printing
09:49 - whatever is returned from the sum
09:52 - function and you can see at last none is
09:55 - printed because at last this sum
09:58 - function is returning nothing because
10:01 - the type of these two arguments is not
10:04 - same so we were returning without any
10:06 - value and that's why none is printed
10:10 - here now there are few things to note
10:12 - here okay so the first thing is you can
10:16 - define a function using DEF keyword and
10:19 - then the name of the function and under
10:22 - these parentheses you provide the
10:25 - arguments so these two are called
10:28 - arguments so this is argument 1 and this
10:31 - is an argument 2 also you can use
10:34 - alternatively the name parameters for
10:37 - these two arguments so this is a
10:39 - parameter 1 and this is a parameter to
10:42 - now it's possible to return from a
10:44 - function like you can return the
10:46 - addition of two values or it's also
10:49 - possible to return nothing from a
10:52 - function so when you use return without
10:55 - a value it's not going to return
10:57 - anything now when you use this function
10:59 - somewhere it's called calling a function
11:03 - now at last let's discuss about some of
11:07 - the
11:07 - benefits of using functions so the first
11:11 - benefit is function makes your code
11:14 - simpler because if you don't use
11:17 - function to execute this kind of code
11:21 - then you need to write this code again
11:25 - and again whenever you want to use this
11:28 - functionality at different places the
11:30 - second advantage is function makes your
11:33 - code reusable so the same code is used
11:37 - to add two integer values to concatenate
11:41 - two string
11:42 - to add two float values and it's also
11:46 - used to give the error if you provide
11:49 - the arguments of different types so that
11:53 - means you write the code once and use it
11:56 - multiple times and that results in
11:59 - faster development of the code so if you
12:03 - use a function you can develop your code
12:06 - much faster than if you don't use our
12:09 - function and the last but not the least
12:11 - advantage is when you declare functions
12:14 - you can test and debug your code in a
12:18 - better way so this is how you can
12:20 - declare and use functions in Python I
12:22 - hope you enjoyed this video and I will
12:25 - see you in the next video

Cleaned transcript:

hey guys welcome to the next video on Python tutorial for beginners in this video I'm going to show you what is a function in Python and how to use functions in Python so first of all what is a function so a function is a group of statements within a program that performs a specific task now functions can be of two types one is builtin function and other is userdefined function builtin function we have already seen that print is a builtin function or for example input is a builtin function or for example min is a builtin function and so on now usually function does one task at a time so you can see this print function only prints something whatever input you give here is going to print it input function takes some input from the user main function finds out the minimum out of some values so a particular function do one task at a time now let's see how we can define a function so to define a function you use a keyword de F and then you give the name of the function so name of function and after the name of the function you give these parentheses and you provide number of arguments or parameters so for example Arg 1 comma Arg 2 comma Arg 3 and so on so you can give any number of arguments to your function now after this ending parenthesis you give this colon and then under this function signature you write some statements which you want to execute when this function is called so for example if you want to print something you can print something or if you want to calculate something for example the product of two or three variables or a sum of two or three variables you can do under this function declaration so let us take an example sample of function and let's see how we can define reallife function so I'm going to define a very simple function which is going to add two values so I'm going to name it as sum and for example it takes two values one is let's say Arg 1 and other is Arg 2 and then after the colon I want to add these two values so I can just write print here and then I can write R 1 plus R 2 so this is a very simple function which takes two arguments and then add these two arguments and print them so this is how you declare a userdefined function now after declaring a function you need to also call this function so in order to call the function you just use the name of the function and then you provide the arguments which is required by the function so our function requires two argument right now R 1 and R 2 so we are going to provide these two values let's say I want to provide 15 as the argument 1 and I will provide 60 as the second value now let's run the code and let's see what happens so when we run the code you can see our function prints 75 which is the sum of these two values which we have provided as an argument to this function now also if you remember this plus operator you can also use to concatenate two strings so I can use this sum function and this time I'm going to provide for example hello as the first parameter and then world as the second parameter and then I'm going to run the program and it's going to print hello world in addition we can provide to float numbers here for example I will provide 15 point 6 4 7 and the second argument I'm going to provide is 80 point 2 5 8 and this is also allowed so I'm going to just run this code and it gives us the sum of these two values so this function sum is doing one single task which is to add two values whether it's a string or it's a number or it's a float value now you may also observe that when I provide for example as a first argument I will provide a string and as a second argument I will provide a number here will this work let's see so it's going to give us an error and this error says can't convert into object to string implicitly so this is a problem so to solve this problem we can provide here a simple condition and we are going to check the type of both the arguments so if type Arg 1 is not equal to type or 2 this should be Arg of 1 not easier 1 so let me just change this here and if the type of art 1 is not equal to R 2 we are going to just use this keyword which is returned so this return keyword is used to return something so you can return for example 0 here or any string here and when you write this return function without any value here it's going to return nothing but as soon as this return keyword is called nothing after that will be executed so even though you are returning nothing from here then also this statement will not be executed so whenever return is executed after that all the statements which are under the return will not be executed also we can print a message here that please give the odds of same type okay and let's run the code now and you can see now it prints this message which says please give arcs or same type so if these arguments are not of same type whether it's integer or a string or a float value if the user provides first argument which is a string type and the second argument which is integer type then this condition will be true and this statement will be executed which is going to print this message and then return is called and after this whatever statements are there will not be executed so now as I said you can also return some values from a function and here when you don't give any values after this return keyword it's good not going to return anything but let's return the addition of two arguments using our return keyword so I'm going to use this return keyword here which is going to return the addition of these two values using this sum function so now what will happen is let's run the code once again and you can see this sum is executed this sum is executed this sum is executed but the result is not printed so in order to get the result out of this function when it returns something we need to save this return value in a variable so let's save this value into a variable and then you can use this variable to print the value of the sum so I can do something like this also you can directly and close this sum function inside a print function and then also it's going to print the sum of these two strings so either you can assign the result of this sum function which is returning the result into a variable or you can use directly this print function to get the result and print it so I'm going to use print with other two functions also so first print and the second print here and let's run the code once again and now you can see what happens so first of all it prints 75 which is the addition of these two numbers which is returned by this sum function into a variable a and we are printing the sum using this print function here in the next result it prints hello world because this sum function now returns the concatenation of these two strings similarly this sum function is going to return the sum of these two float values and in the last result because the type of Hello is not equal to the type of 15 then this message is printed because this condition is true in the last case and then return will be called and when this return is called we were printing whatever is returned from the sum function and you can see at last none is printed because at last this sum function is returning nothing because the type of these two arguments is not same so we were returning without any value and that's why none is printed here now there are few things to note here okay so the first thing is you can define a function using DEF keyword and then the name of the function and under these parentheses you provide the arguments so these two are called arguments so this is argument 1 and this is an argument 2 also you can use alternatively the name parameters for these two arguments so this is a parameter 1 and this is a parameter to now it's possible to return from a function like you can return the addition of two values or it's also possible to return nothing from a function so when you use return without a value it's not going to return anything now when you use this function somewhere it's called calling a function now at last let's discuss about some of the benefits of using functions so the first benefit is function makes your code simpler because if you don't use function to execute this kind of code then you need to write this code again and again whenever you want to use this functionality at different places the second advantage is function makes your code reusable so the same code is used to add two integer values to concatenate two string to add two float values and it's also used to give the error if you provide the arguments of different types so that means you write the code once and use it multiple times and that results in faster development of the code so if you use a function you can develop your code much faster than if you don't use our function and the last but not the least advantage is when you declare functions you can test and debug your code in a better way so this is how you can declare and use functions in Python I hope you enjoyed this video and I will see you in the next video
