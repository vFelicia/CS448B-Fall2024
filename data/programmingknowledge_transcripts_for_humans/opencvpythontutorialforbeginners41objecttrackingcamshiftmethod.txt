With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in the last video we have learned
00:06 - how to use mean shift algorithm to find
00:09 - and track objects in the video in this
00:12 - video we are going to learn cam shift
00:14 - algorithm to track the object in the
00:17 - video so if you have seen the last video
00:21 - we have written this code so we are
00:24 - going to use all this code which we have
00:26 - written in the mean shift video tutorial
00:29 - and first of all let me just run this
00:33 - mean shift code which we have written in
00:35 - the last video and we have Li discussed
00:38 - about this problem of this rectangle
00:40 - which always remains the same even if
00:43 - the object is coming closer to the
00:46 - camera so we need to adopt the window
00:50 - size with the size and rotation of the
00:53 - target so once again the solution came
00:55 - from OpenCV labs and this time they
00:58 - introduced an algorithm which is called
01:01 - cam shift which stands for continuously
01:04 - adoptive mean shift
01:07 - so this cam shift algorithm applies mean
01:09 - shift per first and then once the me
01:12 - shift converges it updates the size of
01:15 - the window in addition it also
01:18 - calculates the orientation of the
01:20 - best-fitting Eclipse to it now let's
01:23 - talk about the implementation part of
01:25 - the camp shift so as I said all the code
01:28 - which we have written in the last video
01:30 - will remain the same
01:31 - except one thing which is we have used
01:34 - this main shift algorithm in the last
01:37 - video and in this video we are going to
01:40 - use the cam shift so just write CV
01:43 - dot cam shift and all the parameters
01:47 - also will remain the same which is
01:50 - destination track window and the
01:53 - termination criteria so let's run this
01:56 - code once again and let's see what
01:58 - result came out of this algorithm so you
02:01 - can see this rectangle is changing its
02:04 - size according to the target now this
02:07 - result which we have seen can be better
02:10 - because the cam shift function returns
02:13 - rotated rectangle that is our result and
02:17 - also the box parameters which are used
02:20 - to be passed as the search window in the
02:24 - next iteration so here when we see the
02:29 - result inside the ret variable so let's
02:32 - print the result inside the ret variable
02:35 - I'm going to just print it using the
02:38 - print function now let's run this code
02:40 - and let's see what this ret variable
02:43 - prints on the terminal so let me just
02:46 - press escape
02:48 - so what is this result so here you will
02:51 - see the value of x and Y and also you
02:54 - will see these three values which are
02:56 - your width height and the value of
02:59 - rotation so in camp shift you can also
03:03 - rotate your rectangle according to your
03:07 - object size so now we are going to use
03:11 - all these parameters which are there
03:13 - inside this ret variable and we are
03:16 - going to try to draw the rectangle which
03:20 - might be rotating so there will be a
03:24 - different approach
03:25 - other than this rectangle we are going
03:29 - to use that approach to print those
03:32 - points which we got using the ret
03:35 - variable so let's draw that rectangle so
03:39 - here we are going to define a variable
03:42 - called pts and there is a function
03:45 - called CV dot box points so we are going
03:49 - to use that function here which is box
03:55 - points and it takes a few arguments we
03:58 - just need to pass our ret variable here
04:03 - so we are going to just pass our each
04:05 - ret so let's say what values this is
04:08 - going to give us so I'm going to just
04:10 - print this pts value so I'm going to
04:13 - just print the value of pts now let's
04:17 - run this code once again you won't see
04:20 - anything and you will see these values
04:24 - right so it's going to
04:27 - if these floating-point values which we
04:30 - need to convert it into the integers and
04:34 - the error was due to this because this
04:36 - is no longer defined right so for that
04:39 - we are going to just convert these
04:42 - points ets into the integer value so I'm
04:47 - going to override this variable pts and
04:49 - then there is a function in numpy which
04:52 - is called int 0 and here when you pass
04:56 - this pts variable it's going to convert
05:00 - those point into the integers and now we
05:03 - can just draw our rectangle but remember
05:07 - this is a rotating rectangle so we
05:09 - cannot use this normal rectangle
05:11 - function so we need to use the other
05:13 - function for drawing those points so I'm
05:17 - going to define this final image
05:19 - variable once again and then I'm going
05:22 - to use C V dot polylines so there is
05:26 - this function called polylines which can
05:29 - you can use to draw those lines which
05:31 - you get using this points variable so we
05:34 - are going to just pass the frame first
05:37 - of all so we need to pass the frame as a
05:39 - first parameter the second parameter
05:42 - will be our pts value and then the third
05:47 - parameter will be the closed or not
05:51 - closed so when we pass true here then
05:55 - this rectangle will be closed right then
05:59 - we need to pass the color so you can
06:02 - pass any color here let's say 0 comma
06:05 - 255 comma 0 and then you can also pass
06:09 - the thickness so let's say we just need
06:13 - to give the thickness of 2 here okay so
06:16 - this is our final image and now we are
06:21 - going to run this example once again and
06:25 - let's see what happens so you can see
06:27 - this rectangle is drawn and it can
06:30 - rotate also with the object so this is
06:34 - how cam shift algorithm works with
06:37 - OpenCV I hope you've enjoyed this video
06:39 - and I will see you in the next
06:41 - video

Cleaned transcript:

hey guys welcome to the next video on open CV tutorial for beginners using Python in the last video we have learned how to use mean shift algorithm to find and track objects in the video in this video we are going to learn cam shift algorithm to track the object in the video so if you have seen the last video we have written this code so we are going to use all this code which we have written in the mean shift video tutorial and first of all let me just run this mean shift code which we have written in the last video and we have Li discussed about this problem of this rectangle which always remains the same even if the object is coming closer to the camera so we need to adopt the window size with the size and rotation of the target so once again the solution came from OpenCV labs and this time they introduced an algorithm which is called cam shift which stands for continuously adoptive mean shift so this cam shift algorithm applies mean shift per first and then once the me shift converges it updates the size of the window in addition it also calculates the orientation of the bestfitting Eclipse to it now let's talk about the implementation part of the camp shift so as I said all the code which we have written in the last video will remain the same except one thing which is we have used this main shift algorithm in the last video and in this video we are going to use the cam shift so just write CV dot cam shift and all the parameters also will remain the same which is destination track window and the termination criteria so let's run this code once again and let's see what result came out of this algorithm so you can see this rectangle is changing its size according to the target now this result which we have seen can be better because the cam shift function returns rotated rectangle that is our result and also the box parameters which are used to be passed as the search window in the next iteration so here when we see the result inside the ret variable so let's print the result inside the ret variable I'm going to just print it using the print function now let's run this code and let's see what this ret variable prints on the terminal so let me just press escape so what is this result so here you will see the value of x and Y and also you will see these three values which are your width height and the value of rotation so in camp shift you can also rotate your rectangle according to your object size so now we are going to use all these parameters which are there inside this ret variable and we are going to try to draw the rectangle which might be rotating so there will be a different approach other than this rectangle we are going to use that approach to print those points which we got using the ret variable so let's draw that rectangle so here we are going to define a variable called pts and there is a function called CV dot box points so we are going to use that function here which is box points and it takes a few arguments we just need to pass our ret variable here so we are going to just pass our each ret so let's say what values this is going to give us so I'm going to just print this pts value so I'm going to just print the value of pts now let's run this code once again you won't see anything and you will see these values right so it's going to if these floatingpoint values which we need to convert it into the integers and the error was due to this because this is no longer defined right so for that we are going to just convert these points ets into the integer value so I'm going to override this variable pts and then there is a function in numpy which is called int 0 and here when you pass this pts variable it's going to convert those point into the integers and now we can just draw our rectangle but remember this is a rotating rectangle so we cannot use this normal rectangle function so we need to use the other function for drawing those points so I'm going to define this final image variable once again and then I'm going to use C V dot polylines so there is this function called polylines which can you can use to draw those lines which you get using this points variable so we are going to just pass the frame first of all so we need to pass the frame as a first parameter the second parameter will be our pts value and then the third parameter will be the closed or not closed so when we pass true here then this rectangle will be closed right then we need to pass the color so you can pass any color here let's say 0 comma 255 comma 0 and then you can also pass the thickness so let's say we just need to give the thickness of 2 here okay so this is our final image and now we are going to run this example once again and let's see what happens so you can see this rectangle is drawn and it can rotate also with the object so this is how cam shift algorithm works with OpenCV I hope you've enjoyed this video and I will see you in the next video
