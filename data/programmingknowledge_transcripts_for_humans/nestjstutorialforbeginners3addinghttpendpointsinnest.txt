With timestamps:

00:01 - hey guys welcome to the next video on
00:03 - nestjs tutorial for beginners so in the
00:06 - last video we have seen how we can
00:08 - create our controller module and service
00:12 - classes using Nest JS CLI and we have uh
00:16 - added our first end point which is the
00:19 - get cars end point into our nestjs
00:24 - restful API in this video we are going
00:27 - to add other endpoints like uh delete
00:31 - car by ID get car by ID and put car by
00:35 - ID and also we are going to create a
00:38 - post method so what I'm going to do is
00:41 - I'm going to go to my car. service.ts
00:44 - file and here I'm going to create some
00:48 - methods so these are the method which
00:51 - I'm going to implement so I'm going to
00:54 - implement post car for the Post method
00:59 - I'm going to uh create a method called
01:02 - get car by ID so if the user have the ID
01:06 - of a particular uh car object then he
01:10 - will be able to get that data related to
01:13 - that ID uh user will be able to delete a
01:18 - single car uh using the ID of the car
01:22 - and also user will be able to uh put
01:26 - some data put means update the data uh
01:30 - if he have the ID of the car element
01:34 - okay so there is no implementation there
01:37 - so I have added all these uh method
01:40 - inside the car. service.ts file now uh I
01:45 - think for now the async is kind of
01:49 - overkill for now because we are not uh
01:52 - returning any uh promises uh here so I'm
01:56 - going to just remove this async uh from
02:01 - here so it's going to look like this and
02:04 - when we will require a sync await uh
02:07 - then we will add those async aate
02:09 - methods right so for the Post uh method
02:12 - what we want to do uh when the user
02:15 - sends some car related data for example
02:19 - he sends the brand uh color and the
02:24 - model and even the ID then we just want
02:27 - to uh add this data to our uh cache
02:32 - which we have here uh which is cars
02:35 - right so in the post method what I want
02:38 - to do is I want to add cars element to
02:41 - my already existing cars array so this
02:45 - is by default our cars array object and
02:49 - I want to uh add some element like this
02:53 - uh into my cars array here right later
02:58 - maybe we will add DB functionality
03:01 - but for now uh I want to keep everything
03:04 - simple so what I'm going to do here is
03:08 - I'm going to just uh push the car uh
03:12 - object which is this one we are also
03:14 - going to define the data type of this
03:16 - car object in a few minutes uh but what
03:21 - here we can do we can just write uh this
03:24 - do cars and if you uh already are
03:29 - familiar with the arrays in JavaScript
03:31 - or typescript you can use a push uh
03:35 - method and using this you can uh add
03:39 - data into your array okay and once uh
03:43 - you have pushed this data you can
03:47 - also return this data now for the get
03:50 - car by ID method what we require is some
03:53 - kind of ID so as you have seen here in
03:57 - this car object I have find the ID brand
04:01 - color and model right so let's say ID is
04:04 - a number instead of uh this kind of
04:08 - string so it will be easier and let's
04:10 - start with uh the default ID 1 and we
04:13 - are going to add uh more uh elements to
04:16 - our array using this ID and we'll be
04:19 - able to get the elements by ID also
04:23 - right so now we know that ID will be a
04:26 - number so I'm going to just uh Define
04:28 - the data type here which will be our
04:32 - number and then we want to get the car
04:36 - by ID so we have to first of all find
04:39 - the car by ID so I'm going to uh just
04:43 - Define const variable which is called
04:47 - car and then what we are going to do is
04:49 - we are going to find the car inside our
04:52 - array which we have here which is cars
04:55 - array so I'm going to just write this
04:57 - dot cars do find and what we want to
05:02 - find we want to find the ID right so I'm
05:06 - going to just write
05:09 - car and then we want to find the ID when
05:13 - we uh call the find method uh over an
05:17 - array we are going to get each and every
05:19 - element using this uh car uh element and
05:23 - then we can call car. ID so I'm going to
05:26 - just write car do ID and and if this
05:30 - car. ID will be equal to the ID which we
05:34 - are going to pass then uh we know that
05:38 - it's our car now here I can see this red
05:41 - squiggly line which says replace car
05:43 - with a parenthesis car so the nest just
05:48 - already have this es lint uh installed
05:52 - and this uh lint is suggesting us to
05:55 - just enclose this car inside the
05:58 - brackets right so now once we get the
06:02 - car by ID we are going to just return
06:05 - this uh car right so we can just uh
06:07 - write return car and then uh it will
06:11 - just return the car object you can see
06:14 - this like this now of course you can add
06:18 - uh different kind of error handling so
06:20 - for example if you don't uh find any car
06:24 - inside this car array you can throw some
06:26 - kind of error but that logic we are
06:28 - going to uh add a little bit later for
06:32 - example or let's add that logic uh right
06:35 - now so let's say if we don't find any
06:40 - car inside our cars array what we want
06:44 - to do we want to throw a new error so
06:48 - I'm going to just write uh throw new and
06:53 - then error so now in nestjs there are
06:57 - different kind of errors which are
07:00 - defined in the nest common uh package so
07:05 - we are going to add one such uh uh error
07:09 - class which is HTTP error error for
07:13 - example or HTTP extension it's called
07:16 - okay so we are going to add this HTTP
07:19 - extension and we are going to throw this
07:21 - HTTP extension and you can see when you
07:24 - hover over uh this HTTP extension you
07:27 - can uh just send the error string and
07:31 - also the status number so
07:34 - because uh we are throwing this error
07:37 - for the not found so we can uh just add
07:43 - not found here and then the status code
07:47 - will be 404 if you are aware with uh the
07:51 - HTTP status codes right now let's move
07:54 - to the delete by ID uh method so here
07:58 - also this logic will be same because we
08:01 - want to just find the car by its ID so
08:05 - this logic we can uh keep it as same and
08:09 - it's going to be a number so we can
08:12 - Define the data type of the ID also and
08:15 - the return value of this delete car by
08:18 - ID first we need to delete this uh car
08:22 - object from our array right so I can
08:25 - just write this dot cars and then we can
08:30 - use the splice method for example so
08:33 - just call this splice method and we want
08:37 - to first of all know the index right so
08:40 - if you want to splice uh uh some uh
08:43 - index from a car uh array what you can
08:47 - do here is instead of uh using this find
08:51 - you can just uh use find index uh method
08:55 - which is going to give you the index if
08:57 - uh this ID is is found inside an array
09:01 - so instead of uh the object you will get
09:04 - an index so I'm going to just write uh
09:07 - index here instead of the car and if
09:11 - there is uh no index so if the index is
09:15 - equal to let's say
09:18 - minus1 then we are going to throw an
09:21 - error in this case right and if the
09:25 - index is present there we're going to
09:27 - splice that index
09:30 - uh from our cars array okay and then we
09:35 - are going to Simply return our uh cards
09:39 - okay so I'm going to just write this dot
09:43 - cars which will be uh the array after
09:48 - the deletion of the uh object if we find
09:52 - the ID uh there now for the put car what
09:56 - I want to do is I want to let's say I
09:58 - want to delete a single element from the
10:03 - object which I found out right so let's
10:06 - say I have this uh object and let's say
10:10 - I just want to update the brand if I
10:13 - find this ID using the ID of uh this
10:18 - object okay I don't want to uh edit the
10:21 - whole object I just want to addit or
10:24 - update the single element from an array
10:29 - right right so how I can do this so as I
10:32 - have shown you uh this kind of uh
10:35 - Swagger
10:37 - documentation as I go inside the put car
10:41 - I will just send the ID of the car and
10:45 - in the uh query parameters I'm going to
10:48 - uh pass the property name and property
10:51 - value right so I want to pass property
10:54 - name and property value so property name
10:57 - will be in our case for example brand
11:01 - color or model and the property value
11:03 - will be for example BMW or gold or the
11:07 - model value here right so we will also
11:11 - learn how to use the properties right so
11:15 - what I want to do here is we want to of
11:18 - course get the ID which will be a number
11:22 - and then I want to uh use the property
11:26 - name and property value so we want to uh
11:30 - pass here property name which will be uh
11:34 - string and also the
11:37 - property value for example and for
11:40 - Simplicity I'm going to make it uh like
11:42 - camel case so property value and
11:46 - property name this will also be the
11:51 - string so for this what we are going to
11:53 - do uh we are going to once again find
11:56 - our element by ID so we we can use this
12:00 - uh this code again for finding the
12:04 - element inside an array by ID so we are
12:07 - going to find the index of the element
12:11 - and if the index is not found then we
12:14 - are going to throw uh the error
12:16 - otherwise we want to edit that uh value
12:19 - so how we can edit that value because we
12:23 - already have cars so what we can do this
12:27 - dot cars and we are going to edit the
12:31 - car for that index so I'm going to just
12:34 - add this square bracket and I'm going to
12:37 - get the value of the element at that
12:41 - index and then I'm going to addit the
12:44 - value so we can use once again this uh
12:48 - square bracket and this will be the
12:50 - property name and we want to just uh
12:54 - replace the value by the value uh which
12:59 - we are providing in the query request
13:01 - right and then once this uh value is
13:04 - addited we can just return the cars uh
13:10 - array once again okay so we have added
13:13 - the business logic inside our service.ts
13:16 - file now we are going to go to the car.
13:19 - controller. TS file and here we are
13:20 - going to add the end points which we
13:23 - want uh to add so I'm going to uh add
13:27 - all these empty uh methods here let me
13:30 - just also remove the async from here and
13:32 - I'm going to just uh make it public
13:35 - method so now let me add all those
13:38 - decorators here first of all for the
13:41 - post car I'm going to add uh post
13:46 - decorator and you can see it's
13:49 - automatically added in my uh Imports
13:52 - right so if you don't uh see this just
13:55 - add it into your import also for get car
13:58 - by ID I will just simply use the get uh
14:03 - decorator for delete I'm going to use
14:06 - the delete uh
14:09 - decorator and for the put request I'm
14:12 - going to use the put decorator right so
14:16 - you can see all these uh uh decorators
14:20 - are automatically imported in my case
14:22 - using visual studio code
14:24 - IDE but if uh they are not automatically
14:27 - added you need to add those Imports
14:30 - right now we also need to add all these
14:35 - parentheses here so let's add all these
14:39 - parentheses and then let's first of all
14:43 - uh implement this post method so inside
14:46 - this post method we don't have any sub
14:49 - route we just want to add the cars in
14:53 - the body so there is a decorator called
14:57 - at the rate body using which we can uh
15:01 - access the body of the post request so
15:04 - just write uh body here and you can see
15:08 - this body is also added in my imports
15:11 - and then this body will be the car right
15:14 - now if you want to add the type for this
15:17 - car you want to add this kind of type
15:20 - which have ID uh brand color and model
15:24 - right so you can either Define simple uh
15:28 - type using typescript or in uh nestjs
15:32 - they have a concept of
15:34 - dto dto stands for data transfer object
15:39 - and dto is an object that defines how
15:43 - data will be sent over the network so we
15:46 - can uh Define uh dto uh file for example
15:52 - so let's define this uh dto uhts file so
15:58 - this file name can be car. dto for
16:01 - example so I'm going to just write car.
16:05 - dto
16:06 - dots and inside this uh car. d. TS what
16:11 - we want to Define we want to define the
16:14 - type of the car so we can uh just write
16:17 - uh
16:19 - export class and class will be the car
16:26 - class or car dto and then inside the car
16:31 - uh class we can Define uh
16:34 - readon ID we can also Define the type of
16:38 - ID which is number then we will Define
16:42 - read
16:44 - only brand and the type will be the
16:50 - string so once we have this kind of uh
16:52 - dto we can import this uh dto class you
16:56 - can also say this will be uh car dto so
17:00 - you know that uh this is the dto and not
17:04 - the normal class and let me fix all the
17:07 - linting uh errors so let's name it car D
17:11 - instead of car right so now let's import
17:14 - this uh c d inside our controller so
17:18 - let's add this import and then we can uh
17:23 - just use this car D2 as the type of our
17:26 - car okay and then we just need to Simply
17:30 - call our service which is our car
17:33 - service and then we have the post car
17:36 - method which takes this uh
17:40 - car as a parameter so we just need to do
17:43 - that and we need to just uh return this
17:47 - value right so just write uh return here
17:51 - and we are good to go now as I can see
17:54 - here this body uh is giving me some kind
17:57 - of error and it say says you need to add
18:00 - these parenthesis so let me add those
18:02 - parenthesis here in order to access uh
18:06 - the body correctly so this method is uh
18:10 - done now we need to move to the get car
18:15 - by ID method so here we are going to add
18:18 - this uh route and we want to access the
18:21 - ID right so it's uh similar to using
18:24 - Express so whenever you want to uh
18:26 - access a parameter you can use colon and
18:31 - then the name of the parameter right so
18:34 - it will be like car colon ID so let me
18:38 - show you this request real quick it will
18:41 - be like this car SL car SL colon ID and
18:46 - you can access the value of ID uh using
18:50 - this controller so let me go back to my
18:53 - implementation and here to access the
18:56 - parameters you can use a decor Ator
18:59 - called uh param and you will see this
19:03 - decorator is also added in my imports
19:06 - and don't forget to add this parenthesis
19:10 - and how you can uh access the parameter
19:13 - so our parameter name will be ID so you
19:17 - can just uh give this uh uh code and
19:22 - then we can access the parameter by its
19:25 - name which is ID in our case and then
19:28 - the name of our variable will be ID and
19:32 - let's say it will be a number right so
19:36 - it will be a number and we just need to
19:39 - Simply return the value from our
19:42 - services so I'm going to just write
19:45 - return
19:46 - this do car
19:49 - service. get car by ID and then we are
19:53 - going to just pass our ID here right so
19:57 - once we have this get car by ID method
20:00 - implemented we can move to the delete
20:03 - car by ID method and we want to uh pass
20:07 - the similar kind of param here because
20:10 - we want to delete the car by ID right so
20:13 - here also we want to access the
20:16 - parameter so once again we can use the
20:19 - same kind of arguments here and then we
20:22 - can just return the value of uh Delete
20:25 - car by ID method from the service right
20:28 - so car service dot delete car by ID and
20:32 - we just need to pass our ID to our
20:36 - method in the inside the
20:38 - service now we will move to the put
20:42 - method so also we will be passing the ID
20:47 - as the parameter in output method if you
20:51 - have seen this request body so we are
20:54 - going to pass the ID and in the query we
20:58 - want to pass as the parameter name or
21:00 - property name and property uh value
21:03 - right so this will be the parameter
21:08 - which is uh the ID and now in order to
21:12 - access the query you need to add a
21:16 - decorator called query so how simple
21:18 - this is so you can just uh add The
21:22 - Decorator query and then you can Define
21:26 - your query parameters so let's let say
21:29 - uh this will be the query uh variable
21:33 - name and now what we are going to do we
21:37 - are going to just uh
21:40 - return the value which is this do
21:46 - service dop putut car by ID where we
21:50 - pass our ID and we want to get the
21:53 - property name and property ID right so I
21:56 - can uh just Define uh const property uh
22:01 - name query dot uh the property name
22:05 - which we want to pass so let's say
22:07 - property name which we want to pass is
22:10 - uh property underscore name from the
22:13 - query params so this will be the
22:15 - property uh value and let's extract this
22:19 - value from our query parameter which
22:21 - will be value right and we are going to
22:26 - pass this so this will be value
22:29 - and we are going to pass this as the
22:31 - second parameter and the third parameter
22:34 - of this method will be property value so
22:37 - now we have implemented all our methods
22:40 - and we just need to test them if they
22:42 - are actually working or not so let's
22:44 - test them one by one so I'm going to
22:47 - just write npm start so our API has
22:51 - started successfully so I'm going to go
22:53 - to my
22:55 - postmen and here first of all I'm going
22:58 - to get
22:58 - the list of all the cars which is going
23:01 - to return us this kind of object which
23:03 - is the mock uh object which we have
23:06 - already defined now let's uh do the post
23:10 - request so let me just add one more
23:13 - request here and this will be uh post
23:16 - request and the route will be car uh in
23:20 - the body what we want to pass we want to
23:23 - pass the uh Json value right so we are
23:27 - going to pass the the Json value and in
23:31 - the body I want to pass this uh kind of
23:34 - object so let's uh pass this kind of uh
23:37 - object from
23:39 - here and let's uh change the values so
23:42 - let's say ID will be two uh the brand
23:45 - will be
23:48 - VW uh the color will be
23:51 - red and uh the model will be let's say
23:56 - Polo okay and let's uh do this request
23:59 - but this is the post request right so we
24:01 - just need to change the uh method here
24:05 - uh not here but uh we need to change the
24:08 - method here in our second tab so the
24:13 - body will be this body and let's uh do
24:17 - this request so
24:19 - send and it says 2011 created that's
24:23 - okay and once uh we have posted our
24:28 - second element we can uh just get all
24:31 - the list of all the cars uh using get
24:34 - cars so I'm going to just send once
24:37 - again cars and we going to see that now
24:41 - we have two elements inside our array
24:44 - first one was already there and this one
24:47 - we have uh added right now we are going
24:52 - to test uh our put method first of all
24:55 - so I'm going to just uh use the similar
24:59 - URL uh but we also want to pass the ID
25:03 - of the car so let's say I want to addit
25:06 - the id2 so you see here it's uh ID 2 or
25:12 - let's say we just want to change the
25:13 - color of uh this VW car okay so I will
25:18 - just give the ID which is two here and
25:21 - in the parameter value let me just
25:23 - change the method to put and we want to
25:27 - uh just uh add the query which will be
25:31 - uh the parameter value or property value
25:36 - so property underscore name will be uh
25:42 - the color and the property value will be
25:47 - so Pro
25:49 - property value will be from Red we want
25:53 - to change it to let's say blue right so
25:57 - right now we we have the VW which is red
26:01 - in color and we want to change this
26:03 - value to uh blue right so this will be
26:07 - the whole query with the query
26:10 - parameters and let's uh do this uh query
26:14 - or let's send this and let's send this
26:17 - request so I'm going to send this
26:19 - request and it says 404 so why uh this
26:23 - is happening we need to check it so I
26:26 - think the problem in our code is because
26:29 - we are not returning our result using
26:32 - promises that's why it's uh giving us uh
26:34 - this problem so I'm going to return the
26:38 - values from get car by ID delete car by
26:41 - ID and put car by ID using the promises
26:44 - so let's uh do that so I'm going to just
26:47 - uh return the promise from the get car
26:51 - by ID and the type to start with we can
26:54 - use any here uh and later you can uh add
26:57 - more specific type here and then what
27:01 - I'm going to do is first of all I will
27:04 - declare uh const here and I want to
27:07 - check whether the ID is a number or not
27:11 - or and if it's not a number then uh I'm
27:13 - going to just convert it so cost car ID
27:17 - is equal to
27:20 - number ID and now we are going to pass
27:24 - this car ID here right and then let's
27:28 - return the promise so
27:31 - return new
27:34 - promise and then we are going to add the
27:38 - resolve value here and then using the
27:44 - arrow function we are going to return
27:47 - the code which we have written here so
27:50 - let's do that and then we can just use
27:54 - resolve to resolve this car object
27:58 - object okay you can also add uh return
28:02 - here and colon here okay so let's do the
28:07 - same for our delete car by ID and put
28:12 - car by ID so let me add these return
28:15 - types here and here and also I'm going
28:20 - to add this code which will be same for
28:24 - both of them and then I'm I'm going to
28:28 - just close this uh bracket here and
28:33 - bracket here and also
28:36 - let's and also let's uh fix all these uh
28:40 - indentation problems and this car ID now
28:44 - will come here and this car ID in delete
28:48 - car by ID will come here and also we
28:51 - need to resolve it right so we need to
28:55 - send the result using the resolve so
28:59 - let's do this here and also inside the
29:02 - put car ID function okay so now because
29:07 - our functions are returning promises
29:10 - inside our controller we can use a sync
29:13 - await also right so I'm going to go to
29:16 - the car. controller. TS file and here I
29:19 - can just write async also I can add this
29:24 - async here and I can add this async here
29:28 - okay uh if you want to be more uh uh
29:33 - specific you can also uh create a
29:36 - constant here and then uh uh write a
29:39 - wait and then return your uh uh value
29:42 - for example I can just write the
29:46 - const result is equal to a wait and then
29:51 - I can return this value from here which
29:54 - will also be fine so I will just leave
29:58 - it like this because I think it's also
30:02 - going to work let's see and check if it
30:05 - works or not so I think uh that's all we
30:09 - want to do here I will just uh restart
30:13 - my uh app once again and I will go to uh
30:17 - my post M request so get cars uh is
30:20 - working let's post uh new car with id2
30:24 - and now we can see we have two uh cars
30:28 - here and we want to addit this car which
30:31 - have the id2 and we want to change the
30:34 - color to Blue uh till now it's uh red
30:38 - right so let's do this and now you can
30:41 - see it's going to return this result and
30:45 - uh the color of uh this car is changed
30:49 - to the blue color also if you want what
30:53 - you can do because right now it's uh
30:56 - returning this
30:58 - service.ts file we are just returning
31:01 - all the cars so instead of returning all
31:05 - the cars you can simply return the car
31:10 - property which you have changed so like
31:13 - this okay so let's uh run the app once
31:17 - again and let's see uh if it works so I
31:20 - will just go to my Postman again I will
31:23 - just add this car by ID once again and
31:26 - then when I send this this request it's
31:29 - only going to uh return us uh the
31:32 - element or the object which it has
31:34 - changed and we have changed specifically
31:37 - this value okay so this is working uh we
31:41 - also need to check uh if the get car by
31:45 - ID and delete car by ID is working or
31:47 - not so let's let's delete uh this car
31:52 - which have the ID to so I'm going to
31:55 - just write uh Delete and I think we
31:58 - don't need to um add any other uh uh
32:03 - parameters here right let's do the get
32:06 - request first and then we can do the
32:08 - delete so I'm going to just send this
32:10 - request and it's giving us the right
32:13 - response here you can also use one uh
32:17 - id1 we have ID 1 and two right so it's
32:20 - going to give us uh this value by ID
32:24 - also if I want to delete the value so I
32:27 - will just use the same request let's say
32:29 - I want to delete the car by id2 and I
32:33 - will use the method delete here and then
32:37 - I will just send this request and it
32:40 - gives us uh this result which is which
32:44 - means that it has deleted the element
32:47 - with the id2 and now we only have one uh
32:52 - car element inside our array so when you
32:56 - uh give the uh get all cars request it's
32:59 - going to only return us one car because
33:02 - uh the other car we have already deleted
33:05 - you can also change this response to uh
33:09 - something else uh you can uh do
33:12 - something like this that uh when the car
33:15 - is deleted you just send no response and
33:18 - you can also change the status codes uh
33:20 - here also so our basic
33:24 - API code is working now so I think
33:28 - that's it for this video I hope you've
33:31 - enjoyed this video and I will see you in
33:33 - the next
33:35 - video

Cleaned transcript:

hey guys welcome to the next video on nestjs tutorial for beginners so in the last video we have seen how we can create our controller module and service classes using Nest JS CLI and we have uh added our first end point which is the get cars end point into our nestjs restful API in this video we are going to add other endpoints like uh delete car by ID get car by ID and put car by ID and also we are going to create a post method so what I'm going to do is I'm going to go to my car. service.ts file and here I'm going to create some methods so these are the method which I'm going to implement so I'm going to implement post car for the Post method I'm going to uh create a method called get car by ID so if the user have the ID of a particular uh car object then he will be able to get that data related to that ID uh user will be able to delete a single car uh using the ID of the car and also user will be able to uh put some data put means update the data uh if he have the ID of the car element okay so there is no implementation there so I have added all these uh method inside the car. service.ts file now uh I think for now the async is kind of overkill for now because we are not uh returning any uh promises uh here so I'm going to just remove this async uh from here so it's going to look like this and when we will require a sync await uh then we will add those async aate methods right so for the Post uh method what we want to do uh when the user sends some car related data for example he sends the brand uh color and the model and even the ID then we just want to uh add this data to our uh cache which we have here uh which is cars right so in the post method what I want to do is I want to add cars element to my already existing cars array so this is by default our cars array object and I want to uh add some element like this uh into my cars array here right later maybe we will add DB functionality but for now uh I want to keep everything simple so what I'm going to do here is I'm going to just uh push the car uh object which is this one we are also going to define the data type of this car object in a few minutes uh but what here we can do we can just write uh this do cars and if you uh already are familiar with the arrays in JavaScript or typescript you can use a push uh method and using this you can uh add data into your array okay and once uh you have pushed this data you can also return this data now for the get car by ID method what we require is some kind of ID so as you have seen here in this car object I have find the ID brand color and model right so let's say ID is a number instead of uh this kind of string so it will be easier and let's start with uh the default ID 1 and we are going to add uh more uh elements to our array using this ID and we'll be able to get the elements by ID also right so now we know that ID will be a number so I'm going to just uh Define the data type here which will be our number and then we want to get the car by ID so we have to first of all find the car by ID so I'm going to uh just Define const variable which is called car and then what we are going to do is we are going to find the car inside our array which we have here which is cars array so I'm going to just write this dot cars do find and what we want to find we want to find the ID right so I'm going to just write car and then we want to find the ID when we uh call the find method uh over an array we are going to get each and every element using this uh car uh element and then we can call car. ID so I'm going to just write car do ID and and if this car. ID will be equal to the ID which we are going to pass then uh we know that it's our car now here I can see this red squiggly line which says replace car with a parenthesis car so the nest just already have this es lint uh installed and this uh lint is suggesting us to just enclose this car inside the brackets right so now once we get the car by ID we are going to just return this uh car right so we can just uh write return car and then uh it will just return the car object you can see this like this now of course you can add uh different kind of error handling so for example if you don't uh find any car inside this car array you can throw some kind of error but that logic we are going to uh add a little bit later for example or let's add that logic uh right now so let's say if we don't find any car inside our cars array what we want to do we want to throw a new error so I'm going to just write uh throw new and then error so now in nestjs there are different kind of errors which are defined in the nest common uh package so we are going to add one such uh uh error class which is HTTP error error for example or HTTP extension it's called okay so we are going to add this HTTP extension and we are going to throw this HTTP extension and you can see when you hover over uh this HTTP extension you can uh just send the error string and also the status number so because uh we are throwing this error for the not found so we can uh just add not found here and then the status code will be 404 if you are aware with uh the HTTP status codes right now let's move to the delete by ID uh method so here also this logic will be same because we want to just find the car by its ID so this logic we can uh keep it as same and it's going to be a number so we can Define the data type of the ID also and the return value of this delete car by ID first we need to delete this uh car object from our array right so I can just write this dot cars and then we can use the splice method for example so just call this splice method and we want to first of all know the index right so if you want to splice uh uh some uh index from a car uh array what you can do here is instead of uh using this find you can just uh use find index uh method which is going to give you the index if uh this ID is is found inside an array so instead of uh the object you will get an index so I'm going to just write uh index here instead of the car and if there is uh no index so if the index is equal to let's say minus1 then we are going to throw an error in this case right and if the index is present there we're going to splice that index uh from our cars array okay and then we are going to Simply return our uh cards okay so I'm going to just write this dot cars which will be uh the array after the deletion of the uh object if we find the ID uh there now for the put car what I want to do is I want to let's say I want to delete a single element from the object which I found out right so let's say I have this uh object and let's say I just want to update the brand if I find this ID using the ID of uh this object okay I don't want to uh edit the whole object I just want to addit or update the single element from an array right right so how I can do this so as I have shown you uh this kind of uh Swagger documentation as I go inside the put car I will just send the ID of the car and in the uh query parameters I'm going to uh pass the property name and property value right so I want to pass property name and property value so property name will be in our case for example brand color or model and the property value will be for example BMW or gold or the model value here right so we will also learn how to use the properties right so what I want to do here is we want to of course get the ID which will be a number and then I want to uh use the property name and property value so we want to uh pass here property name which will be uh string and also the property value for example and for Simplicity I'm going to make it uh like camel case so property value and property name this will also be the string so for this what we are going to do uh we are going to once again find our element by ID so we we can use this uh this code again for finding the element inside an array by ID so we are going to find the index of the element and if the index is not found then we are going to throw uh the error otherwise we want to edit that uh value so how we can edit that value because we already have cars so what we can do this dot cars and we are going to edit the car for that index so I'm going to just add this square bracket and I'm going to get the value of the element at that index and then I'm going to addit the value so we can use once again this uh square bracket and this will be the property name and we want to just uh replace the value by the value uh which we are providing in the query request right and then once this uh value is addited we can just return the cars uh array once again okay so we have added the business logic inside our service.ts file now we are going to go to the car. controller. TS file and here we are going to add the end points which we want uh to add so I'm going to uh add all these empty uh methods here let me just also remove the async from here and I'm going to just uh make it public method so now let me add all those decorators here first of all for the post car I'm going to add uh post decorator and you can see it's automatically added in my uh Imports right so if you don't uh see this just add it into your import also for get car by ID I will just simply use the get uh decorator for delete I'm going to use the delete uh decorator and for the put request I'm going to use the put decorator right so you can see all these uh uh decorators are automatically imported in my case using visual studio code IDE but if uh they are not automatically added you need to add those Imports right now we also need to add all these parentheses here so let's add all these parentheses and then let's first of all uh implement this post method so inside this post method we don't have any sub route we just want to add the cars in the body so there is a decorator called at the rate body using which we can uh access the body of the post request so just write uh body here and you can see this body is also added in my imports and then this body will be the car right now if you want to add the type for this car you want to add this kind of type which have ID uh brand color and model right so you can either Define simple uh type using typescript or in uh nestjs they have a concept of dto dto stands for data transfer object and dto is an object that defines how data will be sent over the network so we can uh Define uh dto uh file for example so let's define this uh dto uhts file so this file name can be car. dto for example so I'm going to just write car. dto dots and inside this uh car. d. TS what we want to Define we want to define the type of the car so we can uh just write uh export class and class will be the car class or car dto and then inside the car uh class we can Define uh readon ID we can also Define the type of ID which is number then we will Define read only brand and the type will be the string so once we have this kind of uh dto we can import this uh dto class you can also say this will be uh car dto so you know that uh this is the dto and not the normal class and let me fix all the linting uh errors so let's name it car D instead of car right so now let's import this uh c d inside our controller so let's add this import and then we can uh just use this car D2 as the type of our car okay and then we just need to Simply call our service which is our car service and then we have the post car method which takes this uh car as a parameter so we just need to do that and we need to just uh return this value right so just write uh return here and we are good to go now as I can see here this body uh is giving me some kind of error and it say says you need to add these parenthesis so let me add those parenthesis here in order to access uh the body correctly so this method is uh done now we need to move to the get car by ID method so here we are going to add this uh route and we want to access the ID right so it's uh similar to using Express so whenever you want to uh access a parameter you can use colon and then the name of the parameter right so it will be like car colon ID so let me show you this request real quick it will be like this car SL car SL colon ID and you can access the value of ID uh using this controller so let me go back to my implementation and here to access the parameters you can use a decor Ator called uh param and you will see this decorator is also added in my imports and don't forget to add this parenthesis and how you can uh access the parameter so our parameter name will be ID so you can just uh give this uh uh code and then we can access the parameter by its name which is ID in our case and then the name of our variable will be ID and let's say it will be a number right so it will be a number and we just need to Simply return the value from our services so I'm going to just write return this do car service. get car by ID and then we are going to just pass our ID here right so once we have this get car by ID method implemented we can move to the delete car by ID method and we want to uh pass the similar kind of param here because we want to delete the car by ID right so here also we want to access the parameter so once again we can use the same kind of arguments here and then we can just return the value of uh Delete car by ID method from the service right so car service dot delete car by ID and we just need to pass our ID to our method in the inside the service now we will move to the put method so also we will be passing the ID as the parameter in output method if you have seen this request body so we are going to pass the ID and in the query we want to pass as the parameter name or property name and property uh value right so this will be the parameter which is uh the ID and now in order to access the query you need to add a decorator called query so how simple this is so you can just uh add The Decorator query and then you can Define your query parameters so let's let say uh this will be the query uh variable name and now what we are going to do we are going to just uh return the value which is this do service dop putut car by ID where we pass our ID and we want to get the property name and property ID right so I can uh just Define uh const property uh name query dot uh the property name which we want to pass so let's say property name which we want to pass is uh property underscore name from the query params so this will be the property uh value and let's extract this value from our query parameter which will be value right and we are going to pass this so this will be value and we are going to pass this as the second parameter and the third parameter of this method will be property value so now we have implemented all our methods and we just need to test them if they are actually working or not so let's test them one by one so I'm going to just write npm start so our API has started successfully so I'm going to go to my postmen and here first of all I'm going to get the list of all the cars which is going to return us this kind of object which is the mock uh object which we have already defined now let's uh do the post request so let me just add one more request here and this will be uh post request and the route will be car uh in the body what we want to pass we want to pass the uh Json value right so we are going to pass the the Json value and in the body I want to pass this uh kind of object so let's uh pass this kind of uh object from here and let's uh change the values so let's say ID will be two uh the brand will be VW uh the color will be red and uh the model will be let's say Polo okay and let's uh do this request but this is the post request right so we just need to change the uh method here uh not here but uh we need to change the method here in our second tab so the body will be this body and let's uh do this request so send and it says 2011 created that's okay and once uh we have posted our second element we can uh just get all the list of all the cars uh using get cars so I'm going to just send once again cars and we going to see that now we have two elements inside our array first one was already there and this one we have uh added right now we are going to test uh our put method first of all so I'm going to just uh use the similar URL uh but we also want to pass the ID of the car so let's say I want to addit the id2 so you see here it's uh ID 2 or let's say we just want to change the color of uh this VW car okay so I will just give the ID which is two here and in the parameter value let me just change the method to put and we want to uh just uh add the query which will be uh the parameter value or property value so property underscore name will be uh the color and the property value will be so Pro property value will be from Red we want to change it to let's say blue right so right now we we have the VW which is red in color and we want to change this value to uh blue right so this will be the whole query with the query parameters and let's uh do this uh query or let's send this and let's send this request so I'm going to send this request and it says 404 so why uh this is happening we need to check it so I think the problem in our code is because we are not returning our result using promises that's why it's uh giving us uh this problem so I'm going to return the values from get car by ID delete car by ID and put car by ID using the promises so let's uh do that so I'm going to just uh return the promise from the get car by ID and the type to start with we can use any here uh and later you can uh add more specific type here and then what I'm going to do is first of all I will declare uh const here and I want to check whether the ID is a number or not or and if it's not a number then uh I'm going to just convert it so cost car ID is equal to number ID and now we are going to pass this car ID here right and then let's return the promise so return new promise and then we are going to add the resolve value here and then using the arrow function we are going to return the code which we have written here so let's do that and then we can just use resolve to resolve this car object object okay you can also add uh return here and colon here okay so let's do the same for our delete car by ID and put car by ID so let me add these return types here and here and also I'm going to add this code which will be same for both of them and then I'm I'm going to just close this uh bracket here and bracket here and also let's and also let's uh fix all these uh indentation problems and this car ID now will come here and this car ID in delete car by ID will come here and also we need to resolve it right so we need to send the result using the resolve so let's do this here and also inside the put car ID function okay so now because our functions are returning promises inside our controller we can use a sync await also right so I'm going to go to the car. controller. TS file and here I can just write async also I can add this async here and I can add this async here okay uh if you want to be more uh uh specific you can also uh create a constant here and then uh uh write a wait and then return your uh uh value for example I can just write the const result is equal to a wait and then I can return this value from here which will also be fine so I will just leave it like this because I think it's also going to work let's see and check if it works or not so I think uh that's all we want to do here I will just uh restart my uh app once again and I will go to uh my post M request so get cars uh is working let's post uh new car with id2 and now we can see we have two uh cars here and we want to addit this car which have the id2 and we want to change the color to Blue uh till now it's uh red right so let's do this and now you can see it's going to return this result and uh the color of uh this car is changed to the blue color also if you want what you can do because right now it's uh returning this service.ts file we are just returning all the cars so instead of returning all the cars you can simply return the car property which you have changed so like this okay so let's uh run the app once again and let's see uh if it works so I will just go to my Postman again I will just add this car by ID once again and then when I send this this request it's only going to uh return us uh the element or the object which it has changed and we have changed specifically this value okay so this is working uh we also need to check uh if the get car by ID and delete car by ID is working or not so let's let's delete uh this car which have the ID to so I'm going to just write uh Delete and I think we don't need to um add any other uh uh parameters here right let's do the get request first and then we can do the delete so I'm going to just send this request and it's giving us the right response here you can also use one uh id1 we have ID 1 and two right so it's going to give us uh this value by ID also if I want to delete the value so I will just use the same request let's say I want to delete the car by id2 and I will use the method delete here and then I will just send this request and it gives us uh this result which is which means that it has deleted the element with the id2 and now we only have one uh car element inside our array so when you uh give the uh get all cars request it's going to only return us one car because uh the other car we have already deleted you can also change this response to uh something else uh you can uh do something like this that uh when the car is deleted you just send no response and you can also change the status codes uh here also so our basic API code is working now so I think that's it for this video I hope you've enjoyed this video and I will see you in the next video
