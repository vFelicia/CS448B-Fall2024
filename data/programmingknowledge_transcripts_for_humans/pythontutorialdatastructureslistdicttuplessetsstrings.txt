With timestamps:

00:03 - in this video we will talk about using
00:06 - strings in Python so I'm going to
00:09 - declare a variable and this variable I'm
00:11 - going to assign a hello world here right
00:16 - and to print this hello world we can
00:19 - just write print and inside the
00:21 - parenthesis we can use this X variable
00:25 - and when we run the code it runs so we
00:28 - already know how to use this kind of
00:31 - string in Python the second way of
00:34 - creating a string is you can use the
00:38 - single quotes instead of double quotes
00:40 - and this is also a valid string so this
00:44 - will also work so let me just print this
00:49 - also which is hello world using single
00:53 - quotes and when I am going to run this
00:56 - it's going to give me the result let me
00:59 - remove this spaces between the print and
01:02 - these parentheses so let's say you want
01:04 - to add a single quote into this hello
01:07 - world string so let's say I want to just
01:09 - write hello single quote s hellos world
01:14 - so this is totally possible in Python so
01:16 - whenever you surround your string using
01:19 - a double quotes you can just add this
01:22 - single quote without any problem but
01:24 - when you do the same with this string
01:28 - this will give you a problem because now
01:31 - Python thinks that your string starts
01:34 - from here
01:35 - and ends at this place just after hello
01:39 - and this will be seen as some kind of
01:42 - garbage by Python so in order to use
01:44 - these single quotes inside the string
01:47 - which uses single quote you use a escape
01:51 - character and the escape character in
01:54 - Python is backslash okay so when you add
01:57 - a backslash in front of a character
02:00 - Python interpreter knows that it's a
02:03 - escape character so this will be treated
02:07 - as a valid string so let me just print
02:09 - the result
02:11 - and you can see it prints the same
02:13 - result now now let's say I want to use a
02:17 - double quote in this string which uses
02:20 - double quote already so I'm going to
02:22 - just give a double quote here and the
02:25 - same problem arises which we have seen
02:28 - in the string with single code so to
02:30 - escape this you can also use backslash
02:33 - and the problem will be gone and let's
02:36 - run the program and it gives us this
02:39 - hello world with double quotes so you
02:42 - can print this double quote using this
02:45 - escape character which is backslash now
02:48 - let's say you want to print a string
02:50 - with a backslash itself so I can add a
02:53 - backslash here and I want to add a
02:55 - backslash here and let's save the code
02:58 - and let's run it and let's see if it
03:00 - runs or not so it turns out that you can
03:02 - use this kind of notation in Python also
03:05 - when you use double backslashes here and
03:08 - here let's see what happens so when we
03:12 - run the code it will give us the same
03:14 - result because one backslash is a escape
03:18 - character and other backslash is the
03:21 - part of the string so it will print the
03:23 - same result so you can use this for
03:27 - escaping this character or you can
03:30 - remove this the result will be same so
03:33 - now let me add it these two strings and
03:36 - I'm going to use hello here with the
03:39 - capital H and I'm also going to assign a
03:42 - hello to the Y variable with a small H
03:47 - here now Python provides us some inbuilt
03:50 - functions which you can use with strings
03:52 - so this is a string right so you can use
03:56 - some methods related to strings on the x
04:01 - and y variable so let's see what are
04:03 - these methods so after the X I can just
04:07 - press dot and you can see so many
04:09 - suggestions is given to us by pycharm
04:13 - and this is called intellisense
04:15 - which is provided by pycharm to us and
04:18 - intellisense means that whenever you
04:21 - type something pycharm will try to
04:24 - suggest you some supporting code for
04:27 - whatever you are typing so let's use
04:29 - some method which are suggested
04:31 - so I'm going to use this capitalized
04:34 - method so let's use this capitalized
04:37 - method with the x and y variable and
04:40 - let's see what happens so I'm going to
04:41 - run the code and you can see now the
04:43 - upper string is printed same but the
04:46 - lower string is printed with a capital H
04:50 - in front of it
04:51 - so this capitalized method capitalizes
04:54 - the first letter of the string now let's
04:58 - see what are some of the other method
05:02 - which we can use so there is a method
05:04 - called upper and also there is a method
05:08 - called dot lower so let me just rewrite
05:13 - this hello in all capitals and let's run
05:17 - the code now and you can see in the
05:19 - result the upper method has converted of
05:22 - a string into all upper letters and the
05:27 - lower method has converted our string
05:29 - into all lower letters now in Python
05:32 - everything is an object
05:34 - so using these square bracket you can
05:36 - extract each and every letter based upon
05:39 - their index so for example I write index
05:42 - 0 here and in the Y I'm going to use the
05:46 - same square bracket and I'm going to
05:49 - write one here which is the index 1 and
05:52 - let me run the code and it prints the
05:54 - first character of the string because it
05:57 - said index 0 and here you can see the
06:01 - second character of the string which is
06:03 - at index 1 so always remember index is
06:06 - starts from 0 not from 1 now in Python
06:09 - you can also get the substring out of a
06:12 - string so here inside these square
06:15 - brackets I can just write that I want a
06:19 - substring out of this complete string
06:21 - first 3 letters of this string so I can
06:25 - just start from 0 and I can just say I
06:29 - just want to stop at 3 that means we
06:34 - will get I think the first 3 character
06:36 - of the string also let me add some
06:39 - spaces into the second string here and
06:41 - in Python there is a method called
06:45 - strip so I'm going to just use this
06:47 - strip method and let's run the code
06:49 - first of all and let's see what happens
06:51 - so you can see first of all this print
06:55 - has printed first three letter of this
06:58 - string so you can see this notation
07:00 - means that we are telling Python to give
07:03 - a substring starting from 0 until -
07:08 - until the index - okay and we are saying
07:11 - that we want to stop at index 2 that's
07:15 - why we write 3 here now if you want to
07:18 - just print a chi ll be can write here 0
07:23 - to 4 and then we can run the code and
07:26 - then we get h-e-l-l-o if you want to get
07:30 - only a ll you can write 1 to 4 here and
07:35 - then it will give you a ll out of this
07:39 - string and this is how you can strip
07:41 - your string so strip means the spaces
07:44 - from the start and end will be stripped
07:47 - of this string now let me show some
07:50 - other method related to the strings so
07:53 - first method I want to show here is
07:55 - there is a method called is lower and
07:59 - then there is a method called is upper
08:04 - and then there is a method called dot
08:09 - replace which is used to replace some
08:12 - character inside the string so let's say
08:14 - I want to replace capital H by let's say
08:19 - J and the last method I want to show is
08:22 - how to split the string but that we will
08:24 - see in a moment so let's run this code
08:27 - and the first result says false because
08:31 - this string is not lower when we write
08:35 - all letters in lowercase then only it
08:38 - will give us true otherwise this method
08:41 - is lower will give us false
08:43 - now let's rerun the code and now it
08:47 - gives us true because now every letter
08:49 - in this string is lower second method
08:52 - gave us true because we were checking
08:55 - whether every letter in this string is
08:58 - cap
08:58 - not the next method replace is used to
09:01 - replace the character if it's there in
09:04 - your string and replace it with this
09:07 - character if this character is found in
09:10 - your string so this capital H is not
09:13 - present in our string right so let's
09:17 - just add this capital H into a string
09:20 - and let's see what's the result so now
09:23 - the capital H is replaced by capital J
09:27 - here in the result the next matter which
09:30 - you can use with the string is a split
09:33 - method so you can write y dot split and
09:37 - this is used to split your string using
09:40 - any character so I'm going to once again
09:43 - write hello comma world here and I want
09:48 - to split this string using this
09:50 - character which is comma so I can just
09:54 - write using single code these comma and
09:57 - once I run the code you can see it gives
10:00 - us an array of two members one is hollow
10:03 - and other is world with a space right
10:07 - because we have splitted our string
10:10 - using this character that's why the
10:13 - space is here right so that's why you
10:16 - can see this space here also in the
10:18 - second element of this array so there
10:20 - are number of methods which are
10:22 - associated with string which you can use
10:25 - and for knowing all these methods you
10:28 - just need to write your variable which
10:29 - contains a string and then just write
10:32 - dot and you will be able to see the
10:35 - suggestions which you can use with the
10:38 - strings so you can use the title method
10:40 - for example or you can use the translate
10:44 - method or you can use all these method
10:47 - which are available here okay so just
10:50 - see all these suggestions and see what
10:52 - you can use from these method also if
10:56 - you don't have any variable in which you
10:59 - have assigned your string you can
11:01 - directly take your string for example
11:02 - hello and then you can just write dot
11:05 - after this hello and once again you will
11:08 - see all these suggestions because this
11:10 - hello is also us
11:12 - let me show you one last thing which you
11:15 - can use by string very quickly so you
11:17 - can write print here and then if you
11:20 - want to print this hello for example ten
11:23 - times how will you do this so you can
11:26 - just write for example X comma X comma X
11:30 - this is how you can do this let's say
11:33 - you want to print this hello hundred
11:35 - times how you can do this so there is a
11:38 - trick in Python which you can use and
11:41 - this is using these Asterix you can
11:45 - print the string multiple times so for
11:48 - example I want to print this hello ten
11:50 - times I can just write my string
11:53 - variable name
11:54 - Astrix the number of time I want to
11:56 - iterate this string so let me run the
11:59 - code and you can see now this hello is
12:03 - printed ten times let me provide the
12:05 - space here so there will be a space
12:09 - between the two hollows right let's say
12:12 - I want to print hello hundred times then
12:15 - I can just write 100 here and then run
12:18 - the code and it will print this hello
12:20 - hundred times on the terminal so this is
12:23 - how you can use strings in Python I hope
12:27 - you have learned something new this time
12:28 - I will see you in the next video
12:35 - in this video I'm going to show you how
12:38 - to use lifts in Python so first of all
12:42 - what are lists so list in Python is a
12:46 - kind of collection which allows us to
12:49 - put many values in a single variable you
12:53 - can also say that list is an ordered set
12:57 - of values so let's define a list so I'm
13:01 - going to just say X is equal to and you
13:04 - can define a list inside these square
13:07 - brackets and inside the list you provide
13:09 - some values so for example I'm going to
13:11 - provide the values 3 comma 5 comma 4
13:16 - comma 9 comma 7 comma 10 so this is how
13:20 - you can create a list in Python and when
13:23 - I press ENTER it's going to create a
13:25 - list and when I just use X to get the
13:29 - list is going to provide me all the
13:32 - values in the list now these values
13:34 - which are inside the list are called
13:36 - elements so 3 is an element or 5 is an
13:40 - element or all these values in this list
13:43 - are all called elements and all these
13:46 - elements are ordered by their index now
13:50 - index as I already said in the previous
13:53 - videos also always starts from 0 so we
13:57 - can fetch the value which is at index 0
14:01 - using the square bracket once again with
14:04 - a variable name and then when I write
14:07 - index 0 it's going to give me the
14:10 - element which is saved at index 0 so
14:14 - looking at this list 3 is at index 0 5
14:19 - is at index 1 4 is at index 2 and so on
14:24 - so let's say I want to get the value
14:27 - which is at index 4 0 1 2 3 4 so I'm
14:33 - going to just write X square bracket 4
14:37 - and it is going to give me 7 which is
14:39 - saved at index 4 now it's not necessary
14:42 - that list must contain all the same data
14:45 - type elements so for example I can also
14:48 - declare our
14:49 - Abell called why and in this I can save
14:53 - some name for example max I can save
14:57 - integer let's say 1 I can save a decimal
15:02 - value let's say 15 point 5 I can save
15:04 - other lists inside this list using these
15:07 - square brackets for example 3 comma 2 so
15:10 - one list can contain different type of
15:12 - data types with any number of elements
15:15 - so when I press ENTER and this time I
15:18 - want to get the value which is at index
15:21 - 0 it's going to give me max and once I
15:25 - want to get the value which is saved at
15:27 - index 3 then it's going to give me this
15:32 - list which I have saved at index 3 now
15:36 - when you try to access the index which
15:39 - is not there so I'm going to just write
15:41 - Y and then I'm going to say hundred and
15:45 - this value is not present in this list
15:47 - at this index so I'm going to press
15:50 - ENTER and it's going to give me the
15:52 - error which says list index out of range
15:55 - now if you want to get the length of the
15:57 - list you can use the inbuilt function in
16:00 - Python which is le N and then your list
16:03 - name so for example I want to find out
16:06 - the length of list X it's going to give
16:10 - me 6 it's going to give me 6 because you
16:13 - can see here this list contains 6
16:15 - elements or I want to get the length of
16:18 - the second list which is why it's going
16:21 - to give us 4 because this list contain 4
16:24 - elements now it's also possible to
16:26 - insert and remove elements from the list
16:29 - so for example I'm going to use X which
16:32 - has 6 element till now
16:34 - and I'm going to insert the 7th element
16:36 - so I can use a method called insert and
16:40 - you can see this method takes an index
16:43 - and the object name so I'm going to
16:45 - choose this and the index at which I
16:47 - want to insert the value is at index 2
16:50 - and the value I want to insert is some
16:54 - string for example Tom and I'm going to
16:57 - press ENTER and I'm going to print the
16:59 - values inside the X list then you can
17:03 - see
17:03 - now this list has seven elements and Tom
17:07 - is inserted at the index - because we
17:10 - have inserted this value at the index -
17:14 - in a similar way you can remove
17:15 - something from a list also so to remove
17:18 - something you can use your variable name
17:20 - for example X dot remove and the value
17:24 - you want to remove so for example once
17:26 - again I want to remove this name which I
17:29 - have inserted at index two and once
17:32 - again when I print the value of X it's
17:34 - going to give me these values now let's
17:37 - say the list contains two element which
17:41 - are exactly the same so I'm going to
17:43 - insert one more element at index one and
17:46 - this element will be three for example
17:49 - and now my list contain double three
17:52 - here and if I want to remove this three
17:55 - so I'm going to just call this remove
17:57 - function once again and I will say three
17:59 - here and then press ENTER you can see
18:02 - only one three is removed from this list
18:05 - so you can see these three are at index
18:08 - zero and index one so this value is
18:10 - removed which is at index zero and this
18:14 - will remain in this list so if a list
18:17 - contains duplicate values is going to
18:20 - remove the value from the left and also
18:23 - remove is going to remove only one
18:25 - object which is found first in the list
18:28 - now if you try to remove the element
18:31 - which is not there in the list so I'm
18:33 - going to remove something which is not
18:35 - even there in this list then it's going
18:38 - to give us this error it says that this
18:40 - is a value error and it cannot remove
18:43 - this value from the list now there is
18:45 - one more function with the list which is
18:48 - a pop method and this we can use to
18:51 - remove the values from the last so you
18:54 - can see our list was previously having
18:56 - six elements and ten was the last
19:00 - element and when you use this function
19:03 - which is pop it's going to pop this 10
19:06 - from the list and now let's see the
19:08 - content of the list so now this list
19:11 - contain only five element and the last
19:13 - element is now removed once again when
19:16 - you
19:17 - this pop method it's going to remove the
19:19 - seven and now our list only contains
19:22 - four elements now let's say you want to
19:25 - delete the whole list so I'm going to
19:27 - declare a list and this list will
19:30 - contain few values and then I will press
19:33 - ENTER and you can see the labelled use
19:35 - of list and now I can use a function
19:37 - called de L and then the name of the
19:41 - list and this function is going to
19:42 - delete this list so I'm going to just
19:45 - press ENTER and then once again try to
19:47 - access the values inside this variable
19:50 - and now it says the name Z is not
19:54 - defined because delete function has
19:56 - deleted this list now once again I'm
19:58 - going to create this list Z and now
20:01 - there is a function called clear which
20:03 - is used to remove all the values from
20:06 - the list so I'm going to just press
20:09 - ENTER and then try to access the value
20:11 - of Z and you can see this list is now
20:14 - empty because we have used the clear
20:17 - function which is used to empty the list
20:19 - let me show you a few more functions
20:21 - related to lists so let's say I can use
20:24 - X and the values inside X are 3 5 4 9
20:28 - and I can use a function called sort to
20:32 - sort all these integer values inside the
20:35 - list and once I press ENTER now now you
20:38 - can see all the values are sorted and
20:41 - you can see all the values are sorted in
20:43 - ascending order you can also use this
20:46 - method X dot reverse and it's going to
20:50 - reverse all the values so once I use the
20:53 - reverse function and then when I try to
20:56 - get all the values inside the list you
20:58 - can see all the values are now reversed
21:00 - there is also a function called append
21:03 - and here you can append anything to your
21:06 - list so I'm going to append 10 to my
21:08 - list and when I try to access this list
21:11 - you can see at last this 10 is appended
21:15 - in my list also if you want to copy one
21:17 - list into another you can use let's say
21:20 - I'm going to declare a variable called s
21:23 - here and I want to copy all the values
21:26 - from X list I can use X dot
21:31 - P and this is going to copy all the
21:34 - content of my X list into this new
21:37 - variable called
21:38 - s so you can see all the values are
21:41 - copied into the variable s so let me
21:43 - append something into my list once again
21:46 - so I'm going to append it ten months
21:48 - again and now my list looks like this
21:51 - and there is a function called count
21:54 - using which you can count the number of
21:56 - element which are there in the list so I
22:00 - want to find how many number of 10 are
22:03 - there in the list is going to return me
22:05 - too
22:06 - and once again I want to count how many
22:08 - threes are there in the list it's going
22:11 - to return me one let's say I want to
22:13 - count how many hundreds are there in my
22:15 - list and it's going to return zero so
22:17 - this is how you can use lists in Python
22:20 - you can also use the list name and then
22:23 - dot and see all the methods which are
22:26 - available related to list here and you
22:29 - can use these methods which you see here
22:36 - in this video we are going to see how to
22:39 - use tuples in Python so first of all
22:42 - what are tuples so tuples are very
22:45 - similar to lists that is they are used
22:48 - to store the collection of elements in a
22:52 - single variable but there is a very
22:54 - important difference between them and
22:56 - that difference is tuples are immutable
23:00 - immutable means once tuples are created
23:04 - they cannot be changed or the content in
23:08 - them cannot be changed so let's see how
23:11 - we can declare a tuple so I'm going to
23:14 - declare a variable called X and I'm
23:16 - going to assign some values to it now in
23:20 - case of lists we have seen we used the
23:22 - square brackets in the case of tuples we
23:25 - use these parentheses in order to store
23:28 - the list of elements so I can just write
23:31 - 1 5 3 4 and 8 for example and then press
23:37 - ENTER and it's going to create a tuple
23:40 - now in order to print the tupple you can
23:42 - use X and it's going to print this top
23:45 - loop now as I said tuples are similar to
23:48 - lists in some ways and that means you
23:50 - can call a couple element by index in
23:55 - couple so all the tuple elements are
23:58 - arranged by their index and when you
24:01 - want to for example get the first
24:05 - element here you give the index 0 and
24:08 - then press ENTER and it's going to give
24:10 - you the value which is saved at index 0
24:14 - let's get the value which is saved at
24:17 - index 4 and I am going to press ENTER
24:20 - and you can see it gives 8 which is
24:22 - saved at index 4 now when I try to give
24:26 - an index which is not there for example
24:28 - 100 it's going to give us error which
24:31 - says index error tuple index out of
24:34 - range now as I said tuples are immutable
24:37 - that is you cannot change the content of
24:39 - a tuple if they are initialized once so
24:43 - let's try to test this so I'm going to
24:45 - just assign the value at index 0 which
24:49 - is let's say
24:50 - - and I'm going to press ENTER and you
24:53 - can see it says type error tuple object
24:56 - does not support item assignment that is
25:00 - you cannot assign any other value to a
25:05 - tuple element if they are once
25:08 - initialized now that also means that you
25:11 - cannot use some of the functions which
25:14 - you used with lists in the tuples for
25:17 - example you cannot remove any element
25:19 - you cannot append any element you cannot
25:22 - change any element so for example when I
25:24 - write X here and then press dot you can
25:28 - see there are few methods which are
25:31 - available with the tupple and most
25:34 - important is this count method so let's
25:37 - try to use this count method and I want
25:39 - to know how many number of eight which
25:43 - are there in this tuple and it will give
25:45 - me one because eight is only present
25:47 - once in this tuple if it is present
25:49 - twice in this tuple here you will see
25:52 - the result - now in order to get the
25:54 - length of the topple you can use the
25:56 - inbuilt function which is a Lian and
25:58 - then the tupple name and then press
26:00 - Enter
26:01 - and it's going to give you the length of
26:03 - the topple now in the previous video I
26:05 - have told you that you can save multiple
26:08 - data type values in lists let's see if
26:11 - we can do the same with tuples or not so
26:15 - I'm going to give the parentheses I'm
26:16 - going to give the first value as integer
26:19 - second value as string third value as
26:23 - for example the decimal value and I'm
26:27 - going to press ENTER and I'm going to
26:29 - get the value of y and you can see it's
26:33 - totally possible to save multiple data
26:36 - type values in our table so now I have
26:39 - declared two tuples one is X and other
26:42 - is why so let's print X and Y's once
26:45 - again very quickly and now what we want
26:48 - to do is we want to use a concatenation
26:51 - operators so as I said tuples are
26:54 - immutable but let me define a third
26:57 - tuple here and I want to add X couple
27:00 - and Y tuple here and I want to assign
27:04 - well you two said is it possible let's
27:07 - check so I'm going to just once again
27:10 - see the contents in the Z variable and
27:13 - you can see when you use this plus
27:16 - operator or concatenation operator it's
27:20 - going to join these two tupple and
27:22 - create a new tuple with the combination
27:25 - of the values of both these tuples now
27:29 - there is one interesting thing which you
27:31 - can do with a tuple which is you can
27:34 - declare a variable and let me define a
27:37 - tuple with only one element and I'm
27:40 - going to just give high here and then
27:43 - after this element I'm going to provide
27:45 - comma here so this is important I have
27:48 - provided this comma and I haven't
27:50 - provided the second element in the tuple
27:53 - and I can use an asterisk here and I can
27:57 - use some value here so let's say I have
27:59 - provided five here and I'm going to
28:02 - press ENTER and then I'm going to see
28:04 - the values inside this a variable and
28:08 - now you can see hi string is saved five
28:11 - times in a variable in the form of a
28:15 - tuple so you can once again get this
28:18 - value at index two for example and it's
28:21 - going to give you the value which is
28:23 - stored at index two which is high itself
28:25 - you can also use inbuilt function called
28:28 - max here to get the maximum value out of
28:32 - a tuples so Max and I have provided X
28:35 - tuple here and you will be able to see
28:37 - it will give us the maximum value stored
28:40 - in that tuples and you can see here it
28:43 - is the maximum value which is there
28:45 - inside the tupple we can also get the
28:48 - minimum value using mi and function it's
28:51 - going to give you the minimum value
28:53 - which is stored inside the tuple and
28:54 - also you can use our de l function to
28:57 - delete our tuples so let's say I want to
28:59 - delete this tuple which is Z here so I
29:02 - can just write the name of the tuple
29:04 - after the ELN space and then press Enter
29:07 - and now once again when I try to get the
29:10 - value of said it's going to give me
29:12 - error which says name Z is not defined
29:15 - so in order to delete the tupple you
29:17 - use that de l function so this is how
29:20 - you can use tuples in Python
29:25 - in this video we are going to learn how
29:28 - to use sets in Python so first of all
29:31 - what are sets so a set is an unordered
29:35 - collection with no duplicate elements
29:38 - and no indexing so let's see how we can
29:42 - use sets in Python so you can declare a
29:46 - variable and then is equal to and you
29:49 - define the elements in set in a curly
29:53 - bracket so you can define multiple
29:55 - values here for example 1 comma 2 comma
29:58 - 5 comma 4 comma 7 comma 9 but keep in
30:04 - mind that set cannot have duplicate
30:07 - values so each value in set must be a
30:11 - unique value so for example what happens
30:14 - when we define a set with some duplicate
30:17 - values so I'm going to just declare this
30:20 - set and press enter here and this set is
30:23 - created now whenever I try to access the
30:26 - values inside the set a then is going to
30:30 - give me this set and you can see the two
30:34 - which was a duplicate which we have
30:37 - defined here is removed from this set so
30:40 - a set always have unique values and if
30:44 - you define a set with duplicate values
30:46 - it's going to remove the duplicate
30:49 - values and only save the unique values
30:54 - in the set so let's see some of the
30:56 - methods related to sets and the first
30:59 - method is as always le n method and you
31:03 - can find the length of a set using this
31:05 - le n method and the name of the set
31:08 - which returns the length of a set you
31:11 - can also use add a function so a dot add
31:16 - to add a element in a set so I want to
31:21 - add 10 for example into my set I can use
31:24 - this and then press Enter and once again
31:27 - when I try to get the values inside this
31:29 - set a you can see 10 is added to this
31:34 - set but this time will only be added if
31:36 - it's already not there in
31:39 - set if it's already there in the set
31:41 - nothing will happen
31:43 - so let's try to add once again ten to
31:45 - this set which already have a set and
31:47 - once again you will see that nothing
31:51 - happens inside the set because ten was
31:53 - already there now if you want to add
31:55 - multiple values in a set you can use our
31:59 - update methods so you can call this
32:01 - method which is update and then inside
32:05 - the curly brackets you need to provide
32:07 - these multiple values so let's add some
32:11 - values into this set so I'm going to add
32:14 - 15 18 17 let's say and 14 okay and then
32:22 - press Enter
32:23 - and now I will see the values inside the
32:25 - set and you can see all these values are
32:27 - added to the set you can also remove the
32:31 - values from the set so I can use a
32:34 - method called remove and let's say I
32:37 - want to remove 18 from the set I can
32:41 - just give the element and then press
32:43 - ENTER and once again I will try to
32:45 - access the set and you can see 18 is
32:49 - removed from this set now there is a
32:51 - method called discard also so let's see
32:54 - how we can use this method this card
32:57 - works similar to remove method so for
33:00 - example I want to remove this 17 from my
33:04 - set I can write 17 here and it works
33:08 - fine right so when I try to access the
33:11 - value of a 17 is removed so what is the
33:14 - difference between a discard method and
33:17 - a remove method
33:19 - so our remove method whenever you use a
33:21 - remove method and you try to remove an
33:26 - element which is not there in the set
33:29 - for example I will try to remove 100
33:31 - which is not there in the set it's going
33:34 - to throw an exception and it says key
33:37 - error 100 now if you try to do the same
33:39 - thing using a discard method so I'm
33:42 - going to use a dot discard here and try
33:46 - to discard 100 from the set which is not
33:49 - there in the set it's not going to
33:52 - me any error and that's the difference
33:55 - between discard and remove
33:57 - so remove throws an error when element
34:01 - is not there but this card doesn't throw
34:04 - any error it's not going to do anything
34:06 - if the value is not there in the set now
34:10 - there is a pop method also you can use
34:13 - with set so I'm I can use this pop
34:16 - method and then press ENTER and what
34:19 - it's going to do is it's going to remove
34:22 - any random element from your set so it's
34:26 - not necessary that is going to remove
34:29 - the element from the left hand side or
34:31 - the right hand side it will remove any
34:34 - random element from the set also for
34:38 - example I will declare a set of names
34:40 - let's say
34:45 - and if you want to clear the set you can
34:48 - use a clear method so I can use this
34:50 - clear method in order to empty this set
34:53 - so now when I try to access the values
34:56 - inside the set you can see it's an empty
34:59 - set with no values if you want to delete
35:02 - a set you can use a de L function and
35:05 - then the name of your set and then press
35:08 - Enter
35:08 - and once you delete it when you try to
35:11 - access it it's going to give you an
35:13 - error that name is not defined now you
35:16 - can also create a set using a set
35:20 - constructor so instead of these curly
35:23 - brackets you can write set and in the
35:26 - double parentheses so you need to
35:28 - provide the double parentheses here in
35:31 - order to create a set using the set
35:34 - constructor so this is also going to
35:36 - create this set called name and when I
35:39 - try to access the values inside the set
35:41 - name you can see it has created this set
35:44 - of names also you can convert a list
35:47 - into a set so let me define a variable
35:50 - called Zed and then I can use a set
35:53 - constructor and inside these parentheses
35:57 - I can use the square brackets which we
36:00 - use generally with lists and then you
36:03 - can define your list here and then press
36:06 - Enter and this list will be converted to
36:09 - a set and you can see the result here
36:12 - now similar to the mathematical set
36:15 - operations like Union intersection
36:18 - difference symmetric difference you can
36:21 - also use these mathematical operations
36:24 - related to set on the Python sets also
36:28 - so let's see how we can use this
36:30 - mathematical set operations on our
36:33 - Python sets so let me once again define
36:36 - a set I have already one set which is a
36:39 - which contains these values for example
36:42 - and I will define a set B with some
36:46 - other set of values so I am going to
36:49 - define a set with for example
36:53 - so that is the content of the set be
36:56 - okay so now I have two sets and on these
37:00 - two sets I want to perform some set
37:04 - operations which are also used in
37:06 - mathematics so you can find out the
37:08 - union of two sets using operator called
37:12 - or okay so when I write a and this pipe
37:17 - symbol which is called or B it's going
37:21 - to give me the union of these two sets
37:24 - and what is the Union so union of two
37:28 - sets contain all the elements that are
37:31 - there in the set a or in the set B so or
37:36 - here is important right so I'm going to
37:39 - press ENTER and you can see it's going
37:42 - to give me the union of a and B that
37:46 - means this set contains all the elements
37:48 - that are there in set a or in set B also
37:53 - I can use a method called Union instead
37:56 - of this or operator so I can use a
37:59 - variable dot Union there is a method
38:03 - called Union and then you can write B
38:06 - here and then press ENTER which is going
38:08 - to give you the same answer okay so you
38:11 - can either use this Union method or this
38:15 - or operator now let's see how we can
38:18 - find out the intersection between two
38:21 - sets so in order to find out the
38:24 - intersection you use a and this operator
38:26 - and and then your next set which is B
38:31 - here so what is an intersection of two
38:33 - sets so intersection of two sets
38:36 - contains all the element that are there
38:39 - in both the set that means set a and set
38:44 - B okay so when I press ENTER you can see
38:48 - it gives me two elements inside the set
38:52 - and these two elements are there both in
38:56 - the a set and the be set that's why we
39:00 - get only two values because these two
39:02 - values are there in set a and set B also
39:05 - again
39:06 - can use a method called intersection so
39:09 - a intersection and then B which is going
39:13 - to give me the same answer so either you
39:16 - can use this method or you can use this
39:18 - operator now let's find out the
39:20 - difference between two sets so what is a
39:23 - difference between to set a difference
39:26 - of two sets contains all the elements
39:29 - that are in a but not in B okay so you
39:35 - can find out the difference by this
39:37 - minus operator here so when you write a
39:40 - minus B you will be able to get the
39:42 - difference between these two sets and
39:44 - this result will contain all the
39:47 - elements that are in a but not in B you
39:51 - can also use B minus a and then is going
39:55 - to give you other result because this
39:57 - time is going to give you a set which
40:00 - contains all the elements that are there
40:02 - in B and not in a so difference between
40:07 - set a minus B is totally different from
40:11 - B minus a and also you can use a
40:14 - difference method so a then you can call
40:18 - a difference method B and it's going to
40:21 - give you the same kind of answer you can
40:24 - see here and also you can call a B dot
40:28 - difference a and it's going to give you
40:32 - the another answer of B minus a now you
40:35 - can also find out the symmetric
40:37 - difference between two sets and what is
40:40 - the symmetric difference between two
40:42 - sets a symmetric difference between two
40:45 - sets contains all the elements that are
40:49 - either in set a but not in set B or they
40:54 - are there in set B but not in set E so
40:58 - this is the symmetric difference and you
41:01 - can find out the symmetric difference
41:02 - using this cap symbol and then B so a
41:07 - cap be I don't know what is the exact
41:09 - name of the symbol you can find out by
41:12 - ourselves and when you do this it is
41:15 - going to give you the symmetric
41:17 - difference between a and B and
41:20 - you find out the symmetric difference
41:22 - then when you do for example B this cap
41:27 - symbol a it's going to give you the same
41:31 - answer because symmetric difference give
41:34 - you same answer whether you give a cap B
41:37 - or B cap a the answer will be always
41:39 - same also you can use a method symmetric
41:43 - difference so you can use this method
41:46 - called symmetric difference B and it's
41:50 - going to give you the same kind of
41:52 - result now one last thing I want to show
41:54 - here is sets are not indexed or ordered
41:57 - so whenever you want to find out for
42:01 - example a and the value at index 0 it's
42:04 - going to give you an error because there
42:07 - are no indexes in a set and they are not
42:11 - ordered by any index so sets are
42:15 - unordered collection of values now if
42:19 - you want to find out what all other
42:21 - methods you can use which sets you can
42:23 - create a set and then write the name of
42:25 - your set and then press dot here and you
42:28 - will be able to see this is the list of
42:29 - all the methods which you can use with
42:32 - the sets also if you want to list out
42:36 - all the methods which you can use with
42:39 - sets you can use this inbuilt function
42:42 - dir and then you can provide any set
42:45 - name here which is your variable name
42:48 - and then press ENTER and once again it's
42:50 - going to print the list of all the
42:52 - method which you can use with the sets
42:55 - so this is how you can use sets in
42:57 - Python
42:59 - in this video I'm going to show you how
43:02 - to use dictionaries in Python so first
43:04 - of all what are dictionaries so
43:07 - dictionaries in Python are like
43:09 - associative lists or a map now you can
43:14 - think of dictionary as a list of pairs
43:18 - so let me show you how to define a
43:21 - dictionary so you can define any
43:23 - variable name and to define a dictionary
43:25 - first of all you use these curly
43:28 - brackets and inside these curly brackets
43:30 - you provide a list of key value pairs so
43:35 - let's provide the list of key value
43:37 - pairs so first key is name and the name
43:41 - is max the second key is for example age
43:47 - and the age of Max is let's say 14 and
43:52 - we can also write here in which year he
43:56 - was born so we can just write here and
43:59 - he was born in 2004 for example and I'm
44:04 - going to press ENTER here and once again
44:07 - I'm going to just access the values
44:09 - inside this dictionary which is D and
44:12 - you can see our dictionary is created
44:15 - now so as I said dictionary is a list of
44:19 - key value pairs and all these values
44:21 - which you see here before this colon are
44:25 - called keys so name is a key here here
44:29 - is a key here and age is a key here and
44:32 - whatever values you see after the colon
44:37 - are called values so Max is a value 2004
44:40 - is a value and 14 is a value and you can
44:45 - access the values from a dictionary
44:46 - based upon their keys so for example I
44:50 - have this dictionary D I can use the
44:53 - square bracket and the key name for
44:55 - example I want to get the name value I
44:59 - can just give the name key here and then
45:02 - press ENTER and it's going to return me
45:04 - the associated value related to key name
45:08 - in the same way you can use other keys
45:11 - also for example
45:13 - age and I'm going to press ENTER it's
45:15 - going to give me 14 which is the value
45:17 - so age is a key here and 14 is the value
45:22 - now what type of data types you can
45:24 - store in a dictionary so as key you can
45:28 - define any data type so let me define a
45:31 - new dictionary here and I'm going to
45:34 - give these curly brackets and as I said
45:37 - you can define a string value as key
45:40 - also you can define a number as a key
45:43 - for example 15 : 15 let's try the float
45:47 - values so I'm going to just write 15 0.1
45:50 - : 15 0.1 this is also allowed in
45:55 - dictionary so you can use string values
45:58 - you can use integer values you can use
46:01 - decimal values as key and also let's try
46:05 - the boolean values so you can use the
46:09 - boolean values also as keys and you can
46:13 - use a tuple also as a key so I'm going
46:16 - to just give a tuple 2 comma 3 and then
46:20 - I'm going to assign a value of 5 to this
46:23 - key and as values also you can use
46:25 - string values or decimal values or
46:28 - integer values or a boolean values or
46:30 - any kind of collection you can use as a
46:34 - value so I'm going to press ENTER here
46:36 - and now to access let's say we want to
46:38 - access the value for this key which is
46:42 - this tuples so I'm going to just enter
46:45 - this tuple inside these square brackets
46:47 - and it's going to return me 5 or I can
46:51 - just provide inside the square bracket
46:53 - true here and then press Enter it's
46:57 - going to return me the value which is
47:00 - associated with it which is true itself
47:02 - or I can just write here 15 and it's
47:07 - going to return me 15 in turn because 15
47:10 - is associated with this value which is
47:12 - also 15 now what happens when a key is
47:15 - not there and we try to access it so I'm
47:18 - going to just access hundred from this
47:21 - addiction Airy it's going to give us
47:23 - error that this key is not present in
47:26 - the
47:26 - dictionary you can also use the LAN
47:28 - method to find out the number of items
47:31 - in the dictionary and you can see it
47:33 - says five items are there in the
47:35 - dictionary II and we can count this item
47:38 - so this is one item two item three item
47:41 - for item and the fifth item is here or
47:44 - in other words you can also say that a
47:47 - Lian function is going to return you the
47:49 - number of key value pairs which are
47:52 - stored in dictionary you can also use
47:55 - for example I'm going to use my D
47:58 - dictionary now and you can also use a
48:01 - method called get and then you can give
48:05 - the key name here in the parenthesis so
48:08 - let's say I want to get the value
48:11 - associated with the name key I can get
48:14 - it like this and it's going to give me
48:16 - the value associated with the name key
48:20 - you can also add a new key so this D
48:23 - dictionary you can see there are right
48:25 - now three key value pairs and I can add
48:28 - one more key value pair so to add a key
48:32 - value pair you need to just write D and
48:35 - in the square bracket you just need to
48:37 - give the name of the new key so I'm
48:40 - going to just write surname here which
48:43 - is the name of the new key in the
48:45 - dictionary D and then you need to give
48:47 - the value associated with that key so
48:51 - when I press enter and once again when I
48:54 - try to access the values inside the
48:57 - dictionary now you can see that surname
49:01 - is added to your dictionary now if you
49:04 - want to remove any key value pair from a
49:07 - list then you can use d dot pop method
49:11 - and then the name of the key which you
49:13 - want to remove let's say we want to
49:15 - remove the surname once again which we
49:17 - have added and you can just press enter
49:20 - and now you can just print the values
49:23 - inside D now you can see the surname key
49:26 - value pair is remove you can also use a
49:30 - clear function so let's see what's there
49:33 - in the AE dictionary so these are the
49:35 - values inside a dictionary I can use a
49:39 - dot
49:40 - clear - clear the values inside the
49:43 - dictionary so once again when I try to
49:45 - access e it will give me the empty
49:49 - dictionary also you can delete the
49:51 - dictionary using de el function and the
49:54 - name of the dictionary and when I press
49:57 - enter and when I try to access this
49:58 - dictionary even seguin it's going to say
50:01 - that this name is not defined you can
50:04 - also update the values in a dictionary
50:06 - so this is my dictionary and I want to
50:08 - update the name for example so I can use
50:10 - the dictionary name and then the key
50:14 - here for example name and the new name I
50:17 - want to associate with this key is let's
50:20 - say a new name here and when I try to
50:23 - access this dictionary once again you
50:26 - can see the name is changed you can also
50:29 - use a method called update to update
50:32 - this key value pair so once again I want
50:35 - to change the key value pair which is
50:38 - name so I can give this curly bracket
50:40 - and then give the key value pair which I
50:43 - want to change so name and the new name
50:46 - will be max once again and once again
50:49 - when I try to access the dictionary it
50:52 - will give me this dictionary and you can
50:54 - see the name is updated now now there is
50:57 - a function in dictionary called keys
51:00 - which is used to list out all the keys
51:03 - of that dictionary so you can see it
51:06 - will list out all the keys of the
51:08 - particular dictionary there is also a
51:11 - function called values which will list
51:14 - out all the values of that dictionary if
51:18 - you want to list out all the key value
51:20 - pairs
51:20 - you can use the function called items
51:23 - here it will give you the key value pair
51:26 - list now the last function I want to
51:28 - show here is let me list out the content
51:31 - of the dictionary first of all so there
51:33 - is one more function which you can use
51:35 - here is which is pop item and you don't
51:39 - need to give any argument with this pop
51:41 - item when you press ENTER it's going to
51:44 - remove the last key value pair which you
51:47 - have added or updated so here we have
51:50 - updated this name key value pair that's
51:53 - why they
51:54 - is removed and now when you try to see
51:57 - the content of the dictionary this name
52:01 - key value pair is removed so this is how
52:03 - you can use dictionaries in Python
52:07 - in this video we will talk about the
52:09 - slice function in Python and also we
52:12 - will talk about how to use negative
52:14 - numbers with index in Python so let's
52:18 - get started so first of all I'm going to
52:20 - declare a list
52:29 - you
52:35 - so now we have three variables first is
52:37 - a list second is a tuple and third is a
52:41 - string now there is a function called
52:43 - slice which you can use with your list
52:46 - tuples and strings to slice something
52:50 - out of your collection so to use this
52:53 - slice I'm going to declare variable and
52:56 - then I'm going to use this function
52:58 - which is slice and you can provide some
53:00 - parameters in the parentheses here so
53:03 - the first parameter you can provide here
53:05 - is for example start the second
53:08 - parameter you can provide here is the
53:11 - end and the third parameter you can
53:13 - provide here is the step so let's say I
53:17 - want to get out of this list the numbers
53:21 - from 0 to 4 so as a first argument we
53:25 - can define number 0 which is the first
53:28 - index and at the end index we can define
53:31 - 5 and then I'm going to press ENTER and
53:34 - once again I'm going to use my list
53:35 - variable and pass this X variable which
53:39 - contains the slice object which is
53:41 - returned by this function here and then
53:45 - press Enter and you can see here it
53:47 - gives me the values from 0 to 4 so the
53:50 - first argument in the slice function is
53:53 - the index from where you want to start
53:56 - the next parameter is the index of the
53:58 - element before which you want to stop ok
54:02 - so if you want to stop at 4 you provide
54:05 - that index 5 if you want to stop at
54:08 - index 5 you will you will provide the
54:11 - stop value as 6 ok so it will be always
54:15 - 1 more than what you want now there is a
54:19 - short notation for achieving the same
54:22 - also and for that you can use your list
54:26 - and inside the square bracket you can
54:28 - provide the start value and the end
54:31 - value and then press ENTER and it's
54:34 - going to give you the answer but instead
54:36 - of comma I need to provide the colon
54:39 - here and then it will give me the answer
54:41 - ok so here you can use colon to give the
54:45 - start value and the end value
54:47 - and also an optional value which you can
54:50 - give as a third parameter which we will
54:53 - see in a moment okay so this is the
54:56 - short notation of creating slice in
55:00 - Python so as I said this is the start
55:02 - value and this is the end value plus one
55:05 - okay
55:06 - so let me show you something I have a
55:08 - list here
55:09 - and you can see here I have written you
55:13 - have the variable a it can be a list it
55:15 - can be a couple or it can be a string
55:18 - and inside the square brackets you give
55:20 - the start value and the end value
55:23 - separated by this colon symbol and what
55:26 - it's going to give you is the items from
55:29 - start through and minus one okay so
55:32 - whatever n value you will give here you
55:36 - will get the value and minus one you can
55:39 - also use this notation so start : and
55:41 - without giving the end value and also
55:45 - reverse is possible so you can give only
55:47 - the end value and not the start value
55:50 - and also this notation is possible so we
55:53 - will see one by one how to use all these
55:56 - notations so first of all I will give
55:59 - once again I will use the tuples now and
56:02 - this time I'm going to just give the
56:04 - start value let's say I want to start
56:05 - from four here and then : and then press
56:09 - ENTER and it's going to give me the
56:11 - result from index four until the end of
56:14 - this tupple once again let me give the
56:17 - end value so instead of using this value
56:20 - before : this time I will give the value
56:23 - after the Kulin and I will leave the
56:25 - start value blank and here let's say I
56:27 - just want to go before six so I'm going
56:31 - to press ENTER and you can see it will
56:33 - give me the result from zero to five
56:36 - that is and their value minus one right
56:40 - so until five and also you can give this
56:42 - kind of notation so this time I'm going
56:43 - to use the string variable and you can
56:47 - use : without giving the start and end
56:50 - value and when I press ENTER it's going
56:52 - to give me the whole string let's say if
56:55 - with this string I want to provide the
56:57 - start and end value let's say 0 to 5 and
57:01 - presenta is going to give me a string
57:04 - from zero to four so this slice
57:07 - functionality you can use with the
57:09 - tuples lists and also with the string or
57:13 - essentially whatever collection which
57:15 - have the indexes you can use this kind
57:18 - of slice notation with those kind of
57:21 - collections now in addition with the
57:23 - start and end value you can also give
57:25 - the step values so let me just print the
57:28 - value of a once again and you can see
57:30 - the values inside the a and let's say I
57:34 - want to get out of this list 0 2 4 6 8
57:40 - okay so essentially I want that every
57:43 - second value from the list so what I can
57:46 - do here is I can give the variable name
57:48 - and then start to end so from 0 to index
57:53 - 9 and the third argument here you can
57:57 - give is the step so let's say I want to
58:00 - get the every second value so I can give
58:02 - 2 here and then press ENTER and it
58:04 - returns me 0 2 4 6 8 now let's say I
58:10 - want to get every third value so I can
58:13 - write 3 here and it's going to give me 0
58:16 - 3 6 ok in a similar manner if I want to
58:20 - get every fourth value I can write 4
58:23 - here and then press Enter it gives me 0
58:26 - 4 8 also if you don't want to give this
58:30 - range from start to end you can leave
58:32 - the start and add in the value as blank
58:35 - and then press Enter
58:37 - it's going to give you the same result
58:39 - now in Python you can use indexes with
58:42 - the negative numbers also so let me
58:45 - explain what I mean by negative number
58:48 - index so let's say I have a string
58:51 - called a Python it have these character
58:54 - py th o n you already know that you can
58:58 - access the P character or P letter using
59:03 - the index 0 and the wide letter using
59:05 - the index 1 and the t letter using the
59:08 - index 2 so this is the positive index
59:10 - right you can also use the negative
59:12 - index which start from the right hand
59:15 - side
59:15 - it starts from N and the index you can
59:19 - give here is from minus one so the last
59:23 - index here will be minus 1 then minus 2
59:26 - minus 3 minus 4 minus 5 and -6 here so
59:31 - let's use these kind of indexes and
59:34 - let's see how we can use them so we have
59:37 - this string here and let's say I want to
59:39 - get this value which is 9 which is the
59:42 - last letter of the string so I can use C
59:46 - and here inside the square bracket I can
59:48 - give minus 1 and then press Enter it's
59:51 - going to give me the last letter of the
59:53 - string
59:54 - if I give minus 2 here it will give me
59:57 - the second last letter ok so the
60:01 - negative index start from the right-hand
60:03 - side and it goes from minus 1 till the
60:07 - end of the string now let's use this
60:09 - negative number index with the list
60:12 - which we have so we have this a list and
60:15 - we can use a and then we can give a
60:18 - colon colon minus 1 which is going to
60:21 - give you all the numbers in the reverse
60:25 - order in the list so our list was
60:28 - starting from 0 to 9 it will give us 9
60:31 - to 0 in the reverse order now let's say
60:34 - if you want to get the first two item in
60:37 - the reverse order so this is when you
60:40 - use this minus 1 as the third parameter
60:43 - it will give you everything in the
60:46 - reverse order okay
60:47 - so minus 1 as the step value is used to
60:52 - give everything in the reverse order so
60:55 - when you give for example 1 here and
60:58 - leave the end parameter empty it's going
61:00 - to give you you can see 1 0 so as you
61:04 - can see our list starts from 0 1 it's
61:07 - going to give us the reverse order
61:09 - values so it's going to give us 1 zeroes
61:13 - because here we have given one and it's
61:16 - the end a value for this reverse string
61:19 - because we have used the minus 1 here
61:22 - let's take some more example so instead
61:25 - of the start value I can give minus 3
61:28 - here and then
61:29 - press ENTER and you can see it gives us
61:31 - 8 and 9 which are the last two items of
61:34 - the list in the reverse format okay
61:37 - because our index in Reverse starts from
61:40 - minus 1 minus 2 minus 3 and we are
61:44 - skipping the -3 option because we have
61:47 - seen that we just take the end minus 1
61:52 - right so minus 1 minus 2 and these will
61:56 - be given to us in the reverse order
61:59 - because we have used minus 1 here now
62:01 - you can also give for example minus 3 as
62:05 - the start value so I'm going to give the
62:07 - minus 3 as the start value and then
62:09 - press ENTER and it's going to give us 0
62:13 - to 7 right so 0 to 7 except 8 & 9 in the
62:18 - reverse order so because 3 this time is
62:21 - the start value and and value is until
62:25 - best so because 3 this time is the start
62:30 - value so we go from minus 1 minus 2
62:34 - minus 3 so minus 3 is this index and
62:39 - this is the start value so we get 0 to 7
62:43 - in the reverse order so this is how you
62:46 - can use slice function and negative
62:49 - values with indexes in Python I hope you
62:53 - have enjoyed this video please rate
62:54 - comment and subscribe and bye for now

Cleaned transcript:

in this video we will talk about using strings in Python so I'm going to declare a variable and this variable I'm going to assign a hello world here right and to print this hello world we can just write print and inside the parenthesis we can use this X variable and when we run the code it runs so we already know how to use this kind of string in Python the second way of creating a string is you can use the single quotes instead of double quotes and this is also a valid string so this will also work so let me just print this also which is hello world using single quotes and when I am going to run this it's going to give me the result let me remove this spaces between the print and these parentheses so let's say you want to add a single quote into this hello world string so let's say I want to just write hello single quote s hellos world so this is totally possible in Python so whenever you surround your string using a double quotes you can just add this single quote without any problem but when you do the same with this string this will give you a problem because now Python thinks that your string starts from here and ends at this place just after hello and this will be seen as some kind of garbage by Python so in order to use these single quotes inside the string which uses single quote you use a escape character and the escape character in Python is backslash okay so when you add a backslash in front of a character Python interpreter knows that it's a escape character so this will be treated as a valid string so let me just print the result and you can see it prints the same result now now let's say I want to use a double quote in this string which uses double quote already so I'm going to just give a double quote here and the same problem arises which we have seen in the string with single code so to escape this you can also use backslash and the problem will be gone and let's run the program and it gives us this hello world with double quotes so you can print this double quote using this escape character which is backslash now let's say you want to print a string with a backslash itself so I can add a backslash here and I want to add a backslash here and let's save the code and let's run it and let's see if it runs or not so it turns out that you can use this kind of notation in Python also when you use double backslashes here and here let's see what happens so when we run the code it will give us the same result because one backslash is a escape character and other backslash is the part of the string so it will print the same result so you can use this for escaping this character or you can remove this the result will be same so now let me add it these two strings and I'm going to use hello here with the capital H and I'm also going to assign a hello to the Y variable with a small H here now Python provides us some inbuilt functions which you can use with strings so this is a string right so you can use some methods related to strings on the x and y variable so let's see what are these methods so after the X I can just press dot and you can see so many suggestions is given to us by pycharm and this is called intellisense which is provided by pycharm to us and intellisense means that whenever you type something pycharm will try to suggest you some supporting code for whatever you are typing so let's use some method which are suggested so I'm going to use this capitalized method so let's use this capitalized method with the x and y variable and let's see what happens so I'm going to run the code and you can see now the upper string is printed same but the lower string is printed with a capital H in front of it so this capitalized method capitalizes the first letter of the string now let's see what are some of the other method which we can use so there is a method called upper and also there is a method called dot lower so let me just rewrite this hello in all capitals and let's run the code now and you can see in the result the upper method has converted of a string into all upper letters and the lower method has converted our string into all lower letters now in Python everything is an object so using these square bracket you can extract each and every letter based upon their index so for example I write index 0 here and in the Y I'm going to use the same square bracket and I'm going to write one here which is the index 1 and let me run the code and it prints the first character of the string because it said index 0 and here you can see the second character of the string which is at index 1 so always remember index is starts from 0 not from 1 now in Python you can also get the substring out of a string so here inside these square brackets I can just write that I want a substring out of this complete string first 3 letters of this string so I can just start from 0 and I can just say I just want to stop at 3 that means we will get I think the first 3 character of the string also let me add some spaces into the second string here and in Python there is a method called strip so I'm going to just use this strip method and let's run the code first of all and let's see what happens so you can see first of all this print has printed first three letter of this string so you can see this notation means that we are telling Python to give a substring starting from 0 until until the index okay and we are saying that we want to stop at index 2 that's why we write 3 here now if you want to just print a chi ll be can write here 0 to 4 and then we can run the code and then we get hello if you want to get only a ll you can write 1 to 4 here and then it will give you a ll out of this string and this is how you can strip your string so strip means the spaces from the start and end will be stripped of this string now let me show some other method related to the strings so first method I want to show here is there is a method called is lower and then there is a method called is upper and then there is a method called dot replace which is used to replace some character inside the string so let's say I want to replace capital H by let's say J and the last method I want to show is how to split the string but that we will see in a moment so let's run this code and the first result says false because this string is not lower when we write all letters in lowercase then only it will give us true otherwise this method is lower will give us false now let's rerun the code and now it gives us true because now every letter in this string is lower second method gave us true because we were checking whether every letter in this string is cap not the next method replace is used to replace the character if it's there in your string and replace it with this character if this character is found in your string so this capital H is not present in our string right so let's just add this capital H into a string and let's see what's the result so now the capital H is replaced by capital J here in the result the next matter which you can use with the string is a split method so you can write y dot split and this is used to split your string using any character so I'm going to once again write hello comma world here and I want to split this string using this character which is comma so I can just write using single code these comma and once I run the code you can see it gives us an array of two members one is hollow and other is world with a space right because we have splitted our string using this character that's why the space is here right so that's why you can see this space here also in the second element of this array so there are number of methods which are associated with string which you can use and for knowing all these methods you just need to write your variable which contains a string and then just write dot and you will be able to see the suggestions which you can use with the strings so you can use the title method for example or you can use the translate method or you can use all these method which are available here okay so just see all these suggestions and see what you can use from these method also if you don't have any variable in which you have assigned your string you can directly take your string for example hello and then you can just write dot after this hello and once again you will see all these suggestions because this hello is also us let me show you one last thing which you can use by string very quickly so you can write print here and then if you want to print this hello for example ten times how will you do this so you can just write for example X comma X comma X this is how you can do this let's say you want to print this hello hundred times how you can do this so there is a trick in Python which you can use and this is using these Asterix you can print the string multiple times so for example I want to print this hello ten times I can just write my string variable name Astrix the number of time I want to iterate this string so let me run the code and you can see now this hello is printed ten times let me provide the space here so there will be a space between the two hollows right let's say I want to print hello hundred times then I can just write 100 here and then run the code and it will print this hello hundred times on the terminal so this is how you can use strings in Python I hope you have learned something new this time I will see you in the next video in this video I'm going to show you how to use lifts in Python so first of all what are lists so list in Python is a kind of collection which allows us to put many values in a single variable you can also say that list is an ordered set of values so let's define a list so I'm going to just say X is equal to and you can define a list inside these square brackets and inside the list you provide some values so for example I'm going to provide the values 3 comma 5 comma 4 comma 9 comma 7 comma 10 so this is how you can create a list in Python and when I press ENTER it's going to create a list and when I just use X to get the list is going to provide me all the values in the list now these values which are inside the list are called elements so 3 is an element or 5 is an element or all these values in this list are all called elements and all these elements are ordered by their index now index as I already said in the previous videos also always starts from 0 so we can fetch the value which is at index 0 using the square bracket once again with a variable name and then when I write index 0 it's going to give me the element which is saved at index 0 so looking at this list 3 is at index 0 5 is at index 1 4 is at index 2 and so on so let's say I want to get the value which is at index 4 0 1 2 3 4 so I'm going to just write X square bracket 4 and it is going to give me 7 which is saved at index 4 now it's not necessary that list must contain all the same data type elements so for example I can also declare our Abell called why and in this I can save some name for example max I can save integer let's say 1 I can save a decimal value let's say 15 point 5 I can save other lists inside this list using these square brackets for example 3 comma 2 so one list can contain different type of data types with any number of elements so when I press ENTER and this time I want to get the value which is at index 0 it's going to give me max and once I want to get the value which is saved at index 3 then it's going to give me this list which I have saved at index 3 now when you try to access the index which is not there so I'm going to just write Y and then I'm going to say hundred and this value is not present in this list at this index so I'm going to press ENTER and it's going to give me the error which says list index out of range now if you want to get the length of the list you can use the inbuilt function in Python which is le N and then your list name so for example I want to find out the length of list X it's going to give me 6 it's going to give me 6 because you can see here this list contains 6 elements or I want to get the length of the second list which is why it's going to give us 4 because this list contain 4 elements now it's also possible to insert and remove elements from the list so for example I'm going to use X which has 6 element till now and I'm going to insert the 7th element so I can use a method called insert and you can see this method takes an index and the object name so I'm going to choose this and the index at which I want to insert the value is at index 2 and the value I want to insert is some string for example Tom and I'm going to press ENTER and I'm going to print the values inside the X list then you can see now this list has seven elements and Tom is inserted at the index because we have inserted this value at the index in a similar way you can remove something from a list also so to remove something you can use your variable name for example X dot remove and the value you want to remove so for example once again I want to remove this name which I have inserted at index two and once again when I print the value of X it's going to give me these values now let's say the list contains two element which are exactly the same so I'm going to insert one more element at index one and this element will be three for example and now my list contain double three here and if I want to remove this three so I'm going to just call this remove function once again and I will say three here and then press ENTER you can see only one three is removed from this list so you can see these three are at index zero and index one so this value is removed which is at index zero and this will remain in this list so if a list contains duplicate values is going to remove the value from the left and also remove is going to remove only one object which is found first in the list now if you try to remove the element which is not there in the list so I'm going to remove something which is not even there in this list then it's going to give us this error it says that this is a value error and it cannot remove this value from the list now there is one more function with the list which is a pop method and this we can use to remove the values from the last so you can see our list was previously having six elements and ten was the last element and when you use this function which is pop it's going to pop this 10 from the list and now let's see the content of the list so now this list contain only five element and the last element is now removed once again when you this pop method it's going to remove the seven and now our list only contains four elements now let's say you want to delete the whole list so I'm going to declare a list and this list will contain few values and then I will press ENTER and you can see the labelled use of list and now I can use a function called de L and then the name of the list and this function is going to delete this list so I'm going to just press ENTER and then once again try to access the values inside this variable and now it says the name Z is not defined because delete function has deleted this list now once again I'm going to create this list Z and now there is a function called clear which is used to remove all the values from the list so I'm going to just press ENTER and then try to access the value of Z and you can see this list is now empty because we have used the clear function which is used to empty the list let me show you a few more functions related to lists so let's say I can use X and the values inside X are 3 5 4 9 and I can use a function called sort to sort all these integer values inside the list and once I press ENTER now now you can see all the values are sorted and you can see all the values are sorted in ascending order you can also use this method X dot reverse and it's going to reverse all the values so once I use the reverse function and then when I try to get all the values inside the list you can see all the values are now reversed there is also a function called append and here you can append anything to your list so I'm going to append 10 to my list and when I try to access this list you can see at last this 10 is appended in my list also if you want to copy one list into another you can use let's say I'm going to declare a variable called s here and I want to copy all the values from X list I can use X dot P and this is going to copy all the content of my X list into this new variable called s so you can see all the values are copied into the variable s so let me append something into my list once again so I'm going to append it ten months again and now my list looks like this and there is a function called count using which you can count the number of element which are there in the list so I want to find how many number of 10 are there in the list is going to return me too and once again I want to count how many threes are there in the list it's going to return me one let's say I want to count how many hundreds are there in my list and it's going to return zero so this is how you can use lists in Python you can also use the list name and then dot and see all the methods which are available related to list here and you can use these methods which you see here in this video we are going to see how to use tuples in Python so first of all what are tuples so tuples are very similar to lists that is they are used to store the collection of elements in a single variable but there is a very important difference between them and that difference is tuples are immutable immutable means once tuples are created they cannot be changed or the content in them cannot be changed so let's see how we can declare a tuple so I'm going to declare a variable called X and I'm going to assign some values to it now in case of lists we have seen we used the square brackets in the case of tuples we use these parentheses in order to store the list of elements so I can just write 1 5 3 4 and 8 for example and then press ENTER and it's going to create a tuple now in order to print the tupple you can use X and it's going to print this top loop now as I said tuples are similar to lists in some ways and that means you can call a couple element by index in couple so all the tuple elements are arranged by their index and when you want to for example get the first element here you give the index 0 and then press ENTER and it's going to give you the value which is saved at index 0 let's get the value which is saved at index 4 and I am going to press ENTER and you can see it gives 8 which is saved at index 4 now when I try to give an index which is not there for example 100 it's going to give us error which says index error tuple index out of range now as I said tuples are immutable that is you cannot change the content of a tuple if they are initialized once so let's try to test this so I'm going to just assign the value at index 0 which is let's say and I'm going to press ENTER and you can see it says type error tuple object does not support item assignment that is you cannot assign any other value to a tuple element if they are once initialized now that also means that you cannot use some of the functions which you used with lists in the tuples for example you cannot remove any element you cannot append any element you cannot change any element so for example when I write X here and then press dot you can see there are few methods which are available with the tupple and most important is this count method so let's try to use this count method and I want to know how many number of eight which are there in this tuple and it will give me one because eight is only present once in this tuple if it is present twice in this tuple here you will see the result now in order to get the length of the topple you can use the inbuilt function which is a Lian and then the tupple name and then press Enter and it's going to give you the length of the topple now in the previous video I have told you that you can save multiple data type values in lists let's see if we can do the same with tuples or not so I'm going to give the parentheses I'm going to give the first value as integer second value as string third value as for example the decimal value and I'm going to press ENTER and I'm going to get the value of y and you can see it's totally possible to save multiple data type values in our table so now I have declared two tuples one is X and other is why so let's print X and Y's once again very quickly and now what we want to do is we want to use a concatenation operators so as I said tuples are immutable but let me define a third tuple here and I want to add X couple and Y tuple here and I want to assign well you two said is it possible let's check so I'm going to just once again see the contents in the Z variable and you can see when you use this plus operator or concatenation operator it's going to join these two tupple and create a new tuple with the combination of the values of both these tuples now there is one interesting thing which you can do with a tuple which is you can declare a variable and let me define a tuple with only one element and I'm going to just give high here and then after this element I'm going to provide comma here so this is important I have provided this comma and I haven't provided the second element in the tuple and I can use an asterisk here and I can use some value here so let's say I have provided five here and I'm going to press ENTER and then I'm going to see the values inside this a variable and now you can see hi string is saved five times in a variable in the form of a tuple so you can once again get this value at index two for example and it's going to give you the value which is stored at index two which is high itself you can also use inbuilt function called max here to get the maximum value out of a tuples so Max and I have provided X tuple here and you will be able to see it will give us the maximum value stored in that tuples and you can see here it is the maximum value which is there inside the tupple we can also get the minimum value using mi and function it's going to give you the minimum value which is stored inside the tuple and also you can use our de l function to delete our tuples so let's say I want to delete this tuple which is Z here so I can just write the name of the tuple after the ELN space and then press Enter and now once again when I try to get the value of said it's going to give me error which says name Z is not defined so in order to delete the tupple you use that de l function so this is how you can use tuples in Python in this video we are going to learn how to use sets in Python so first of all what are sets so a set is an unordered collection with no duplicate elements and no indexing so let's see how we can use sets in Python so you can declare a variable and then is equal to and you define the elements in set in a curly bracket so you can define multiple values here for example 1 comma 2 comma 5 comma 4 comma 7 comma 9 but keep in mind that set cannot have duplicate values so each value in set must be a unique value so for example what happens when we define a set with some duplicate values so I'm going to just declare this set and press enter here and this set is created now whenever I try to access the values inside the set a then is going to give me this set and you can see the two which was a duplicate which we have defined here is removed from this set so a set always have unique values and if you define a set with duplicate values it's going to remove the duplicate values and only save the unique values in the set so let's see some of the methods related to sets and the first method is as always le n method and you can find the length of a set using this le n method and the name of the set which returns the length of a set you can also use add a function so a dot add to add a element in a set so I want to add 10 for example into my set I can use this and then press Enter and once again when I try to get the values inside this set a you can see 10 is added to this set but this time will only be added if it's already not there in set if it's already there in the set nothing will happen so let's try to add once again ten to this set which already have a set and once again you will see that nothing happens inside the set because ten was already there now if you want to add multiple values in a set you can use our update methods so you can call this method which is update and then inside the curly brackets you need to provide these multiple values so let's add some values into this set so I'm going to add 15 18 17 let's say and 14 okay and then press Enter and now I will see the values inside the set and you can see all these values are added to the set you can also remove the values from the set so I can use a method called remove and let's say I want to remove 18 from the set I can just give the element and then press ENTER and once again I will try to access the set and you can see 18 is removed from this set now there is a method called discard also so let's see how we can use this method this card works similar to remove method so for example I want to remove this 17 from my set I can write 17 here and it works fine right so when I try to access the value of a 17 is removed so what is the difference between a discard method and a remove method so our remove method whenever you use a remove method and you try to remove an element which is not there in the set for example I will try to remove 100 which is not there in the set it's going to throw an exception and it says key error 100 now if you try to do the same thing using a discard method so I'm going to use a dot discard here and try to discard 100 from the set which is not there in the set it's not going to me any error and that's the difference between discard and remove so remove throws an error when element is not there but this card doesn't throw any error it's not going to do anything if the value is not there in the set now there is a pop method also you can use with set so I'm I can use this pop method and then press ENTER and what it's going to do is it's going to remove any random element from your set so it's not necessary that is going to remove the element from the left hand side or the right hand side it will remove any random element from the set also for example I will declare a set of names let's say and if you want to clear the set you can use a clear method so I can use this clear method in order to empty this set so now when I try to access the values inside the set you can see it's an empty set with no values if you want to delete a set you can use a de L function and then the name of your set and then press Enter and once you delete it when you try to access it it's going to give you an error that name is not defined now you can also create a set using a set constructor so instead of these curly brackets you can write set and in the double parentheses so you need to provide the double parentheses here in order to create a set using the set constructor so this is also going to create this set called name and when I try to access the values inside the set name you can see it has created this set of names also you can convert a list into a set so let me define a variable called Zed and then I can use a set constructor and inside these parentheses I can use the square brackets which we use generally with lists and then you can define your list here and then press Enter and this list will be converted to a set and you can see the result here now similar to the mathematical set operations like Union intersection difference symmetric difference you can also use these mathematical operations related to set on the Python sets also so let's see how we can use this mathematical set operations on our Python sets so let me once again define a set I have already one set which is a which contains these values for example and I will define a set B with some other set of values so I am going to define a set with for example so that is the content of the set be okay so now I have two sets and on these two sets I want to perform some set operations which are also used in mathematics so you can find out the union of two sets using operator called or okay so when I write a and this pipe symbol which is called or B it's going to give me the union of these two sets and what is the Union so union of two sets contain all the elements that are there in the set a or in the set B so or here is important right so I'm going to press ENTER and you can see it's going to give me the union of a and B that means this set contains all the elements that are there in set a or in set B also I can use a method called Union instead of this or operator so I can use a variable dot Union there is a method called Union and then you can write B here and then press ENTER which is going to give you the same answer okay so you can either use this Union method or this or operator now let's see how we can find out the intersection between two sets so in order to find out the intersection you use a and this operator and and then your next set which is B here so what is an intersection of two sets so intersection of two sets contains all the element that are there in both the set that means set a and set B okay so when I press ENTER you can see it gives me two elements inside the set and these two elements are there both in the a set and the be set that's why we get only two values because these two values are there in set a and set B also again can use a method called intersection so a intersection and then B which is going to give me the same answer so either you can use this method or you can use this operator now let's find out the difference between two sets so what is a difference between to set a difference of two sets contains all the elements that are in a but not in B okay so you can find out the difference by this minus operator here so when you write a minus B you will be able to get the difference between these two sets and this result will contain all the elements that are in a but not in B you can also use B minus a and then is going to give you other result because this time is going to give you a set which contains all the elements that are there in B and not in a so difference between set a minus B is totally different from B minus a and also you can use a difference method so a then you can call a difference method B and it's going to give you the same kind of answer you can see here and also you can call a B dot difference a and it's going to give you the another answer of B minus a now you can also find out the symmetric difference between two sets and what is the symmetric difference between two sets a symmetric difference between two sets contains all the elements that are either in set a but not in set B or they are there in set B but not in set E so this is the symmetric difference and you can find out the symmetric difference using this cap symbol and then B so a cap be I don't know what is the exact name of the symbol you can find out by ourselves and when you do this it is going to give you the symmetric difference between a and B and you find out the symmetric difference then when you do for example B this cap symbol a it's going to give you the same answer because symmetric difference give you same answer whether you give a cap B or B cap a the answer will be always same also you can use a method symmetric difference so you can use this method called symmetric difference B and it's going to give you the same kind of result now one last thing I want to show here is sets are not indexed or ordered so whenever you want to find out for example a and the value at index 0 it's going to give you an error because there are no indexes in a set and they are not ordered by any index so sets are unordered collection of values now if you want to find out what all other methods you can use which sets you can create a set and then write the name of your set and then press dot here and you will be able to see this is the list of all the methods which you can use with the sets also if you want to list out all the methods which you can use with sets you can use this inbuilt function dir and then you can provide any set name here which is your variable name and then press ENTER and once again it's going to print the list of all the method which you can use with the sets so this is how you can use sets in Python in this video I'm going to show you how to use dictionaries in Python so first of all what are dictionaries so dictionaries in Python are like associative lists or a map now you can think of dictionary as a list of pairs so let me show you how to define a dictionary so you can define any variable name and to define a dictionary first of all you use these curly brackets and inside these curly brackets you provide a list of key value pairs so let's provide the list of key value pairs so first key is name and the name is max the second key is for example age and the age of Max is let's say 14 and we can also write here in which year he was born so we can just write here and he was born in 2004 for example and I'm going to press ENTER here and once again I'm going to just access the values inside this dictionary which is D and you can see our dictionary is created now so as I said dictionary is a list of key value pairs and all these values which you see here before this colon are called keys so name is a key here here is a key here and age is a key here and whatever values you see after the colon are called values so Max is a value 2004 is a value and 14 is a value and you can access the values from a dictionary based upon their keys so for example I have this dictionary D I can use the square bracket and the key name for example I want to get the name value I can just give the name key here and then press ENTER and it's going to return me the associated value related to key name in the same way you can use other keys also for example age and I'm going to press ENTER it's going to give me 14 which is the value so age is a key here and 14 is the value now what type of data types you can store in a dictionary so as key you can define any data type so let me define a new dictionary here and I'm going to give these curly brackets and as I said you can define a string value as key also you can define a number as a key for example 15 15 let's try the float values so I'm going to just write 15 0.1 15 0.1 this is also allowed in dictionary so you can use string values you can use integer values you can use decimal values as key and also let's try the boolean values so you can use the boolean values also as keys and you can use a tuple also as a key so I'm going to just give a tuple 2 comma 3 and then I'm going to assign a value of 5 to this key and as values also you can use string values or decimal values or integer values or a boolean values or any kind of collection you can use as a value so I'm going to press ENTER here and now to access let's say we want to access the value for this key which is this tuples so I'm going to just enter this tuple inside these square brackets and it's going to return me 5 or I can just provide inside the square bracket true here and then press Enter it's going to return me the value which is associated with it which is true itself or I can just write here 15 and it's going to return me 15 in turn because 15 is associated with this value which is also 15 now what happens when a key is not there and we try to access it so I'm going to just access hundred from this addiction Airy it's going to give us error that this key is not present in the dictionary you can also use the LAN method to find out the number of items in the dictionary and you can see it says five items are there in the dictionary II and we can count this item so this is one item two item three item for item and the fifth item is here or in other words you can also say that a Lian function is going to return you the number of key value pairs which are stored in dictionary you can also use for example I'm going to use my D dictionary now and you can also use a method called get and then you can give the key name here in the parenthesis so let's say I want to get the value associated with the name key I can get it like this and it's going to give me the value associated with the name key you can also add a new key so this D dictionary you can see there are right now three key value pairs and I can add one more key value pair so to add a key value pair you need to just write D and in the square bracket you just need to give the name of the new key so I'm going to just write surname here which is the name of the new key in the dictionary D and then you need to give the value associated with that key so when I press enter and once again when I try to access the values inside the dictionary now you can see that surname is added to your dictionary now if you want to remove any key value pair from a list then you can use d dot pop method and then the name of the key which you want to remove let's say we want to remove the surname once again which we have added and you can just press enter and now you can just print the values inside D now you can see the surname key value pair is remove you can also use a clear function so let's see what's there in the AE dictionary so these are the values inside a dictionary I can use a dot clear clear the values inside the dictionary so once again when I try to access e it will give me the empty dictionary also you can delete the dictionary using de el function and the name of the dictionary and when I press enter and when I try to access this dictionary even seguin it's going to say that this name is not defined you can also update the values in a dictionary so this is my dictionary and I want to update the name for example so I can use the dictionary name and then the key here for example name and the new name I want to associate with this key is let's say a new name here and when I try to access this dictionary once again you can see the name is changed you can also use a method called update to update this key value pair so once again I want to change the key value pair which is name so I can give this curly bracket and then give the key value pair which I want to change so name and the new name will be max once again and once again when I try to access the dictionary it will give me this dictionary and you can see the name is updated now now there is a function in dictionary called keys which is used to list out all the keys of that dictionary so you can see it will list out all the keys of the particular dictionary there is also a function called values which will list out all the values of that dictionary if you want to list out all the key value pairs you can use the function called items here it will give you the key value pair list now the last function I want to show here is let me list out the content of the dictionary first of all so there is one more function which you can use here is which is pop item and you don't need to give any argument with this pop item when you press ENTER it's going to remove the last key value pair which you have added or updated so here we have updated this name key value pair that's why they is removed and now when you try to see the content of the dictionary this name key value pair is removed so this is how you can use dictionaries in Python in this video we will talk about the slice function in Python and also we will talk about how to use negative numbers with index in Python so let's get started so first of all I'm going to declare a list you so now we have three variables first is a list second is a tuple and third is a string now there is a function called slice which you can use with your list tuples and strings to slice something out of your collection so to use this slice I'm going to declare variable and then I'm going to use this function which is slice and you can provide some parameters in the parentheses here so the first parameter you can provide here is for example start the second parameter you can provide here is the end and the third parameter you can provide here is the step so let's say I want to get out of this list the numbers from 0 to 4 so as a first argument we can define number 0 which is the first index and at the end index we can define 5 and then I'm going to press ENTER and once again I'm going to use my list variable and pass this X variable which contains the slice object which is returned by this function here and then press Enter and you can see here it gives me the values from 0 to 4 so the first argument in the slice function is the index from where you want to start the next parameter is the index of the element before which you want to stop ok so if you want to stop at 4 you provide that index 5 if you want to stop at index 5 you will you will provide the stop value as 6 ok so it will be always 1 more than what you want now there is a short notation for achieving the same also and for that you can use your list and inside the square bracket you can provide the start value and the end value and then press ENTER and it's going to give you the answer but instead of comma I need to provide the colon here and then it will give me the answer ok so here you can use colon to give the start value and the end value and also an optional value which you can give as a third parameter which we will see in a moment okay so this is the short notation of creating slice in Python so as I said this is the start value and this is the end value plus one okay so let me show you something I have a list here and you can see here I have written you have the variable a it can be a list it can be a couple or it can be a string and inside the square brackets you give the start value and the end value separated by this colon symbol and what it's going to give you is the items from start through and minus one okay so whatever n value you will give here you will get the value and minus one you can also use this notation so start and without giving the end value and also reverse is possible so you can give only the end value and not the start value and also this notation is possible so we will see one by one how to use all these notations so first of all I will give once again I will use the tuples now and this time I'm going to just give the start value let's say I want to start from four here and then and then press ENTER and it's going to give me the result from index four until the end of this tupple once again let me give the end value so instead of using this value before this time I will give the value after the Kulin and I will leave the start value blank and here let's say I just want to go before six so I'm going to press ENTER and you can see it will give me the result from zero to five that is and their value minus one right so until five and also you can give this kind of notation so this time I'm going to use the string variable and you can use without giving the start and end value and when I press ENTER it's going to give me the whole string let's say if with this string I want to provide the start and end value let's say 0 to 5 and presenta is going to give me a string from zero to four so this slice functionality you can use with the tuples lists and also with the string or essentially whatever collection which have the indexes you can use this kind of slice notation with those kind of collections now in addition with the start and end value you can also give the step values so let me just print the value of a once again and you can see the values inside the a and let's say I want to get out of this list 0 2 4 6 8 okay so essentially I want that every second value from the list so what I can do here is I can give the variable name and then start to end so from 0 to index 9 and the third argument here you can give is the step so let's say I want to get the every second value so I can give 2 here and then press ENTER and it returns me 0 2 4 6 8 now let's say I want to get every third value so I can write 3 here and it's going to give me 0 3 6 ok in a similar manner if I want to get every fourth value I can write 4 here and then press Enter it gives me 0 4 8 also if you don't want to give this range from start to end you can leave the start and add in the value as blank and then press Enter it's going to give you the same result now in Python you can use indexes with the negative numbers also so let me explain what I mean by negative number index so let's say I have a string called a Python it have these character py th o n you already know that you can access the P character or P letter using the index 0 and the wide letter using the index 1 and the t letter using the index 2 so this is the positive index right you can also use the negative index which start from the right hand side it starts from N and the index you can give here is from minus one so the last index here will be minus 1 then minus 2 minus 3 minus 4 minus 5 and 6 here so let's use these kind of indexes and let's see how we can use them so we have this string here and let's say I want to get this value which is 9 which is the last letter of the string so I can use C and here inside the square bracket I can give minus 1 and then press Enter it's going to give me the last letter of the string if I give minus 2 here it will give me the second last letter ok so the negative index start from the righthand side and it goes from minus 1 till the end of the string now let's use this negative number index with the list which we have so we have this a list and we can use a and then we can give a colon colon minus 1 which is going to give you all the numbers in the reverse order in the list so our list was starting from 0 to 9 it will give us 9 to 0 in the reverse order now let's say if you want to get the first two item in the reverse order so this is when you use this minus 1 as the third parameter it will give you everything in the reverse order okay so minus 1 as the step value is used to give everything in the reverse order so when you give for example 1 here and leave the end parameter empty it's going to give you you can see 1 0 so as you can see our list starts from 0 1 it's going to give us the reverse order values so it's going to give us 1 zeroes because here we have given one and it's the end a value for this reverse string because we have used the minus 1 here let's take some more example so instead of the start value I can give minus 3 here and then press ENTER and you can see it gives us 8 and 9 which are the last two items of the list in the reverse format okay because our index in Reverse starts from minus 1 minus 2 minus 3 and we are skipping the 3 option because we have seen that we just take the end minus 1 right so minus 1 minus 2 and these will be given to us in the reverse order because we have used minus 1 here now you can also give for example minus 3 as the start value so I'm going to give the minus 3 as the start value and then press ENTER and it's going to give us 0 to 7 right so 0 to 7 except 8 & 9 in the reverse order so because 3 this time is the start value and and value is until best so because 3 this time is the start value so we go from minus 1 minus 2 minus 3 so minus 3 is this index and this is the start value so we get 0 to 7 in the reverse order so this is how you can use slice function and negative values with indexes in Python I hope you have enjoyed this video please rate comment and subscribe and bye for now
