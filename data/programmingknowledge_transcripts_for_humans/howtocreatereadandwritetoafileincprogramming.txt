With timestamps:

00:00 - this is john from programming knowledge
00:02 - and in this video guys we're going to
00:04 - discuss
00:05 - what is file handling in c
00:09 - and then i'm going to give you a basic
00:12 - example
00:13 - we're going to create a program on how
00:15 - to
00:16 - handle files inside our c program so
00:19 - basically guys
00:20 - see files input or output functions
00:24 - handle data on our secondary storage
00:27 - devices such as
00:28 - our hard disk and c
00:31 - can handle the files as stream oriented
00:35 - data
00:37 - or system oriented data or
00:40 - binary files so again guys we're going
00:43 - to focus
00:44 - on this so the first one will be
00:47 - stream oriented
00:52 - data files and the second one will be
00:56 - system oriented
01:00 - data files okay so when we say
01:04 - stream oriented data files the data
01:07 - is the data
01:11 - is stored in the same
01:14 - [Music]
01:15 - manner as it appears
01:20 - on the screen okay so
01:23 - i hope you can see that the input
01:26 - output operations like buffering data
01:29 - conversions
01:31 - take place automatically while system
01:34 - oriented data files
01:37 - the data files are more
01:40 - closely associated
01:46 - with the operating system
01:49 - and data stored in memory without
01:52 - converting
01:53 - into text format so this
01:56 - is going to make sense later on when we
01:58 - try to implement our very
02:00 - simple file handling insider c
02:03 - program now there are five major
02:07 - operations that can be performed
02:10 - on files so
02:13 - this will be again i'm just gonna list
02:16 - it
02:17 - listed here just for you to see because
02:20 - i think it would be much
02:22 - clearer if you can see all the details
02:26 - all the things that i'm talking
02:29 - here so f c file
02:34 - operations
02:36 - so first one will be creation of
02:40 - a new file the second will be opening
02:45 - the third one will be reading
02:48 - the fourth yeah fourth one will be
02:52 - writing data
02:57 - in a file and last
03:01 - will be closing a
03:04 - file so these are the
03:07 - five major file operations
03:10 - the first one is great again creation
03:13 - the second
03:14 - is opening so we could open an existing
03:17 - file
03:19 - and then we could read the contents
03:22 - and then write data into a file so for
03:25 - example in your program you want to save
03:26 - an information
03:28 - so you could write data into a file okay
03:32 - and then of course whenever we are
03:35 - opening a file we need to close it
03:37 - after using it inside our program okay
03:41 - so the steps
03:44 - there will be steps for us to set up the
03:47 - file operations so these are
03:50 - the steps for
03:54 - processing a file
03:58 - so number one will be
04:01 - declare a file pointer
04:05 - so this is important so we need to
04:08 - declare a file pointer variable
04:12 - and then this will be our variable that
04:16 - we
04:16 - were going to use whenever we want to
04:18 - work with our files
04:20 - and then after that one we need to open
04:24 - a file using
04:28 - f open
04:32 - method or function okay so
04:35 - after that we're going to process
04:39 - this will be number three process
04:43 - the file using the
04:46 - suitable function right here
04:50 - and number four will be closing
04:55 - close the file using f
04:58 - close function also
05:01 - so if we want to work with
05:04 - files inside our c program we
05:07 - want or we we might want to check
05:10 - this uh steps for processing
05:14 - our files so we need to declare a file
05:17 - pointer variable
05:18 - and then we're going to open the file
05:21 - using the
05:22 - f open function right here and then
05:26 - process the file using the suitable
05:29 - function
05:30 - so for example we want to
05:33 - iterate through the lines uh inside the
05:36 - file
05:37 - if you want to save or maybe write
05:40 - information into the file you can do
05:42 - that here in step
05:43 - three meaning you could process the
05:46 - entire content
05:47 - of that particular file and then right
05:49 - after processing
05:51 - maybe you need to close the file or not
05:55 - maybe you must
05:57 - close the file after closing or
06:00 - after processing it inside rc program
06:03 - so basically guys there are a lot of
06:06 - functions that we could use when we say
06:09 - um we're processing a file so to handle
06:12 - files in c um file input or output
06:17 - functions
06:18 - available in the stdio library are the
06:22 - following
06:23 - so i'm just going to list it also here
06:25 - for you to see
06:27 - so we also we already discussed the
06:31 - the two functions
06:34 - the first one will be f open and the
06:37 - second one be
06:38 - the second one will be f close
06:41 - there are also functions such as
06:44 - get c which means
06:48 - um we read a character from a file
06:52 - and then we also have put c
06:55 - so this function put c
06:58 - writes a character into a file and then
07:01 - also we have
07:03 - get w which means we need to read
07:07 - an integer from a file
07:10 - and then we also have put w so write an
07:14 - integer and
07:16 - we're going to use this later on this
07:18 - particular functions okay
07:20 - so you need to be familiar with this
07:23 - again
07:23 - if you want to read characters from a
07:26 - file you need to use this
07:28 - get c and then if you want to write
07:32 - character into a file you you need to
07:35 - use put c
07:36 - and get w gets the integer and put w
07:41 - write an integer into a file and then we
07:44 - also have
07:45 - f printf so
07:48 - f printf prints formatted output
07:52 - into a file and we also have
07:56 - f f so reads
07:59 - formatted input from a file
08:03 - we also have f gets right here
08:07 - so f gets a read string of characters
08:11 - from a file and we also have
08:17 - the next one will be f puts
08:21 - and then the last one is f
08:24 - e o f so f puts
08:27 - write string of characters into a file
08:30 - and then we also have
08:31 - f e o f so it will detects
08:35 - and a file marker in a single
08:39 - file okay now
08:42 - as a sort of example we're going to
08:46 - implement a simple opening and closing
08:49 - of a file and maybe writing
08:51 - a specific text or something into our
08:57 - file so we're going to do that right
08:59 - here so
09:00 - at first we need to remember the
09:04 - the steps for processing a file
09:07 - we need to declare a file pointer so in
09:10 - order for us to do that
09:11 - we're going to have to follow
09:14 - this syntax right here i'm just going to
09:18 - copy and paste it here
09:19 - file open so as i've said we're going to
09:22 - use this
09:23 - function f open and these are
09:26 - the possible
09:30 - parameters that you could use okay so
09:34 - to put it simply we could use this
09:39 - we could declare a pointer variable
09:43 - so f p and then semicolon
09:47 - and then we're going to use that pointer
09:49 - variable
09:51 - and then use the f open function
09:55 - right here and then
09:58 - we could say here filename dot
10:02 - txt and then another
10:06 - uh parameter and then we're going to use
10:09 - here
10:09 - w so w means that the file is being open
10:13 - for writing and if the file does not
10:16 - exist
10:17 - then there will be new file
10:21 - created okay so
10:25 - um let's just return zero for now
10:30 - okay after that
10:35 - we could close our file
10:39 - okay if
10:42 - we open the file we can also close this
10:45 - so what we
10:46 - what we need is to use the f close
10:49 - function
10:50 - and then pass in the
10:54 - pointer variable which is fb right here
10:58 - okay and right after opening the file
11:02 - and before closing the file this is
11:05 - where
11:06 - the processing of the pi uh processing
11:09 - of the file happens
11:11 - processing of the files right here
11:15 - process end of processing
11:19 - okay so inside of processing we could
11:21 - just
11:22 - simply if you remember we have different
11:26 - functions
11:27 - so get c put c
11:31 - f printf so we're going to use this
11:35 - so for now let's just say uh
11:39 - f printf okay then open and close
11:43 - and then semicolon and inside here we
11:47 - could specify
11:48 - the pointer variable which is fp
11:51 - and then of course
11:55 - percent s
11:59 - percent s where is it
12:04 - percent as there you go and then
12:08 - hello world
12:12 - where okay hello world
12:17 - there you go so after this
12:20 - we could um save our
12:24 - file and then build and run
12:28 - okay so for now we're getting process
12:32 - return zero
12:33 - it means that the execution of
12:37 - the program is successful
12:40 - so we're going or we're trying uh we're
12:42 - going to try to open
12:44 - the
12:44 - [Music]
12:48 - file that we have created and as you can
12:51 - see here
12:52 - i have my
12:55 - project right here from documents code
12:58 - blocks projects and then programming
13:00 - knowledge
13:01 - and then if we try to open this we can
13:04 - see
13:05 - the text hello world okay
13:08 - so there you have it on how you can
13:10 - write files or write lines of
13:13 - strings into our file by using this
13:17 - simple program right here we're going to
13:20 - continue
13:21 - working and discussing file handling
13:25 - in c programming so from the previous
13:27 - tutorial
13:28 - so actually this is part 2 of the file
13:30 - handling video tutorial
13:32 - and in the previous tutorial we um
13:35 - discuss the basics of file handling
13:38 - and also discuss the five major
13:41 - operations that can be
13:42 - performed on a file so for example the
13:45 - creation
13:46 - as the first operation and then opening
13:50 - reading writing and closing
13:53 - a file and also we discuss the steps
13:57 - for processing a file so basically if
14:00 - you want to
14:02 - handle files inside your c program
14:06 - you need to declare a file pointer
14:09 - variable
14:10 - as the first step and then the second
14:13 - step will be
14:14 - opening a file using the f open function
14:18 - and then right after that one process
14:20 - the file
14:21 - so for example you want to count the
14:24 - number of lines
14:25 - inside of that particular file or
14:28 - you want to add something to that file
14:31 - you can do that
14:32 - so that's the processes or processing of
14:35 - the
14:36 - file and then of course closing the file
14:39 - using the fclose function and from the
14:42 - previous tutorial also
14:44 - we briefly uh discussed the different
14:47 - functions that we could use when
14:49 - we are handling files in c so for
14:51 - example we get c
14:53 - the put c um get w
14:56 - and put w and the other functions
15:00 - so in this video guys i'm just going to
15:01 - show you how you can
15:03 - uh read the content of a file
15:07 - and display it in your simple program
15:10 - so we're just going to use this main
15:12 - function right here
15:13 - so i have here the main.c um
15:16 - file and yeah main.ca file and then
15:20 - we're just going to use this main
15:21 - function
15:22 - right here just to get the contents
15:26 - of our file so as you can probably
15:29 - remember from the previous tutorial we
15:31 - already created the file
15:33 - inside our file system
15:36 - and let me show you that okay so i have
15:40 - here the file
15:41 - and then file name that text and it
15:43 - contains
15:45 - the text um
15:48 - hello world as you can see here so this
15:51 - is
15:51 - written from our c program and
15:55 - in this video we're going to read this
15:57 - by using also our c
15:59 - program so in order for us to
16:02 - again if you want to handle files in rc
16:05 - the first step is to declare a pointer
16:09 - variable so the pointer variable
16:12 - goes like this so we need to
16:16 - call on this file class and then
16:20 - add the semicolon i'm in the um
16:23 - asterisk or star symbol as you can see
16:26 - here
16:26 - and then of course the name of your
16:29 - variable so i'm just going to name
16:31 - it uh filename and then semicolon at the
16:34 - end
16:35 - so this is our pointer variable
16:41 - as i've said this is the first step
16:45 - for handling files in
16:48 - c we have to declare a pointer
16:52 - variable and then the next
16:56 - step since we're getting the content of
16:59 - a file
17:00 - i just want to assign the content of a
17:03 - file into a single variable
17:04 - so for example i'm just going to declare
17:07 - here another variable
17:09 - car or char ch or the name of the
17:13 - variable is ch
17:14 - and then i'm just going to assume the
17:16 - length land
17:18 - 100 there you go and then cb colon so
17:22 - basically
17:22 - this particular variable will hold
17:26 - the contents of our file
17:30 - okay next line will be
17:34 - using the file name variable right here
17:36 - which is our pointer variable
17:39 - and then the second step in the process
17:42 - is of course
17:43 - open the file by using f open function
17:47 - we already use this function from the
17:49 - previous video
17:50 - so in here we're just going to specify
17:54 - specified the name of the file which is
17:57 - file name
17:58 - dot text as you can see here so that
18:01 - will be
18:02 - file name that txt
18:05 - and then we're gonna use the um
18:09 - r symbol okay that's
18:12 - basically reading
18:16 - the file name or i mean the file coming
18:19 - from our file system
18:21 - and then the next step is of course
18:25 - if we want to print the contents of our
18:27 - file so
18:28 - we're just going to use the printf
18:30 - function right here
18:32 - and then specify
18:36 - the
18:39 - format specifier percent s because we're
18:42 - going to display um
18:45 - character or strings of character here
18:48 - coming from our file
18:50 - and then comma and then we
18:53 - discuss the function in the previous
18:56 - tutorial f
18:57 - gets f gets
19:01 - okay so basically this function
19:04 - um read string of characters
19:09 - from a file and this particular function
19:13 - takes a few parameters so for example
19:17 - we're just going to
19:19 - [Music]
19:21 - specify the form parameters here so
19:25 - for example
19:30 - the variable ch that's the
19:34 - variable that will hold the contents of
19:36 - our file and then so for example
19:38 - 50 this is the
19:42 - count of characters that we're going to
19:45 - allow to be saved in our
19:49 - char ch variable and then of course
19:53 - the file name okay
19:57 - and as always if you are working with
20:00 - file
20:01 - since we're opening the file here we
20:03 - need to
20:04 - use also the closing function which is
20:08 - f plus right here and then we're going
20:11 - to specify
20:13 - the file name right here
20:16 - okay so for example the file name
20:22 - and that's about it and
20:25 - we can run our program right now let's
20:27 - just save this
20:29 - and build and run
20:32 - so it's going to output hello
20:36 - world so for example
20:39 - just to show you a basic example let's
20:42 - just
20:42 - fill out our file
20:46 - hello world this
20:50 - is a string from
20:54 - a file so we're just
20:58 - going to um this
21:01 - this so save and
21:04 - let's run again our program
21:08 - okay so as you can see here hello world
21:11 - comma
21:12 - and then this is a string coming from a
21:15 - file as you can see here so basically
21:18 - we successfully read
21:22 - or get the contents of
21:25 - our file name that txt
21:28 - file okay so now
21:31 - there are other operations that you may
21:34 - want to
21:35 - do in your um
21:38 - [Music]
21:40 - file so for example you want to like
21:43 - count the number of lines
21:45 - that's possible again this particular
21:47 - symbol right here
21:49 - is uh like opening a file
21:52 - in a read mode okay so r
21:56 - that's basically what we use here
21:59 - so as i've said there are also other
22:02 - functions that we could use when trying
22:04 - to
22:05 - handle files in our c program
22:08 - and of course f gets is one of them
22:12 - but there are also so for example we
22:15 - have
22:18 - get c so this
22:21 - reads a character from a file
22:26 - okay we also have um
22:29 - get w so this will be
22:33 - for reading and integer
22:37 - and we also have f gets
22:41 - that's what we used here so f gets
22:45 - reads string
22:49 - string of characters
22:53 - from a file okay and then of course
22:56 - there
22:57 - are other functions that you could use
22:59 - to write
23:01 - this is right
23:04 - in into the file
23:09 - so we have put c
23:14 - um put w
23:18 - so basically put c writes a character a
23:22 - file
23:22 - and then put w write an integer to a
23:25 - file
23:26 - and then we have f print f
23:31 - for writing and we also have
23:35 - f puts okay to
23:40 - write string of characters into a
23:44 - certain file
23:45 - so i hope you understand the basics
23:49 - of handling files in c and
23:52 - of course as always if you have
23:54 - questions you can ask questions
23:56 - in the comment section below and we will
23:59 - try to answer
24:00 - your queries and thank you again for
24:03 - watching guys
24:04 - and see you in the next video

Cleaned transcript:

this is john from programming knowledge and in this video guys we're going to discuss what is file handling in c and then i'm going to give you a basic example we're going to create a program on how to handle files inside our c program so basically guys see files input or output functions handle data on our secondary storage devices such as our hard disk and c can handle the files as stream oriented data or system oriented data or binary files so again guys we're going to focus on this so the first one will be stream oriented data files and the second one will be system oriented data files okay so when we say stream oriented data files the data is the data is stored in the same manner as it appears on the screen okay so i hope you can see that the input output operations like buffering data conversions take place automatically while system oriented data files the data files are more closely associated with the operating system and data stored in memory without converting into text format so this is going to make sense later on when we try to implement our very simple file handling insider c program now there are five major operations that can be performed on files so this will be again i'm just gonna list it listed here just for you to see because i think it would be much clearer if you can see all the details all the things that i'm talking here so f c file operations so first one will be creation of a new file the second will be opening the third one will be reading the fourth yeah fourth one will be writing data in a file and last will be closing a file so these are the five major file operations the first one is great again creation the second is opening so we could open an existing file and then we could read the contents and then write data into a file so for example in your program you want to save an information so you could write data into a file okay and then of course whenever we are opening a file we need to close it after using it inside our program okay so the steps there will be steps for us to set up the file operations so these are the steps for processing a file so number one will be declare a file pointer so this is important so we need to declare a file pointer variable and then this will be our variable that we were going to use whenever we want to work with our files and then after that one we need to open a file using f open method or function okay so after that we're going to process this will be number three process the file using the suitable function right here and number four will be closing close the file using f close function also so if we want to work with files inside our c program we want or we we might want to check this uh steps for processing our files so we need to declare a file pointer variable and then we're going to open the file using the f open function right here and then process the file using the suitable function so for example we want to iterate through the lines uh inside the file if you want to save or maybe write information into the file you can do that here in step three meaning you could process the entire content of that particular file and then right after processing maybe you need to close the file or not maybe you must close the file after closing or after processing it inside rc program so basically guys there are a lot of functions that we could use when we say um we're processing a file so to handle files in c um file input or output functions available in the stdio library are the following so i'm just going to list it also here for you to see so we also we already discussed the the two functions the first one will be f open and the second one be the second one will be f close there are also functions such as get c which means um we read a character from a file and then we also have put c so this function put c writes a character into a file and then also we have get w which means we need to read an integer from a file and then we also have put w so write an integer and we're going to use this later on this particular functions okay so you need to be familiar with this again if you want to read characters from a file you need to use this get c and then if you want to write character into a file you you need to use put c and get w gets the integer and put w write an integer into a file and then we also have f printf so f printf prints formatted output into a file and we also have f f so reads formatted input from a file we also have f gets right here so f gets a read string of characters from a file and we also have the next one will be f puts and then the last one is f e o f so f puts write string of characters into a file and then we also have f e o f so it will detects and a file marker in a single file okay now as a sort of example we're going to implement a simple opening and closing of a file and maybe writing a specific text or something into our file so we're going to do that right here so at first we need to remember the the steps for processing a file we need to declare a file pointer so in order for us to do that we're going to have to follow this syntax right here i'm just going to copy and paste it here file open so as i've said we're going to use this function f open and these are the possible parameters that you could use okay so to put it simply we could use this we could declare a pointer variable so f p and then semicolon and then we're going to use that pointer variable and then use the f open function right here and then we could say here filename dot txt and then another uh parameter and then we're going to use here w so w means that the file is being open for writing and if the file does not exist then there will be new file created okay so um let's just return zero for now okay after that we could close our file okay if we open the file we can also close this so what we what we need is to use the f close function and then pass in the pointer variable which is fb right here okay and right after opening the file and before closing the file this is where the processing of the pi uh processing of the file happens processing of the files right here process end of processing okay so inside of processing we could just simply if you remember we have different functions so get c put c f printf so we're going to use this so for now let's just say uh f printf okay then open and close and then semicolon and inside here we could specify the pointer variable which is fp and then of course percent s percent s where is it percent as there you go and then hello world where okay hello world there you go so after this we could um save our file and then build and run okay so for now we're getting process return zero it means that the execution of the program is successful so we're going or we're trying uh we're going to try to open the file that we have created and as you can see here i have my project right here from documents code blocks projects and then programming knowledge and then if we try to open this we can see the text hello world okay so there you have it on how you can write files or write lines of strings into our file by using this simple program right here we're going to continue working and discussing file handling in c programming so from the previous tutorial so actually this is part 2 of the file handling video tutorial and in the previous tutorial we um discuss the basics of file handling and also discuss the five major operations that can be performed on a file so for example the creation as the first operation and then opening reading writing and closing a file and also we discuss the steps for processing a file so basically if you want to handle files inside your c program you need to declare a file pointer variable as the first step and then the second step will be opening a file using the f open function and then right after that one process the file so for example you want to count the number of lines inside of that particular file or you want to add something to that file you can do that so that's the processes or processing of the file and then of course closing the file using the fclose function and from the previous tutorial also we briefly uh discussed the different functions that we could use when we are handling files in c so for example we get c the put c um get w and put w and the other functions so in this video guys i'm just going to show you how you can uh read the content of a file and display it in your simple program so we're just going to use this main function right here so i have here the main.c um file and yeah main.ca file and then we're just going to use this main function right here just to get the contents of our file so as you can probably remember from the previous tutorial we already created the file inside our file system and let me show you that okay so i have here the file and then file name that text and it contains the text um hello world as you can see here so this is written from our c program and in this video we're going to read this by using also our c program so in order for us to again if you want to handle files in rc the first step is to declare a pointer variable so the pointer variable goes like this so we need to call on this file class and then add the semicolon i'm in the um asterisk or star symbol as you can see here and then of course the name of your variable so i'm just going to name it uh filename and then semicolon at the end so this is our pointer variable as i've said this is the first step for handling files in c we have to declare a pointer variable and then the next step since we're getting the content of a file i just want to assign the content of a file into a single variable so for example i'm just going to declare here another variable car or char ch or the name of the variable is ch and then i'm just going to assume the length land 100 there you go and then cb colon so basically this particular variable will hold the contents of our file okay next line will be using the file name variable right here which is our pointer variable and then the second step in the process is of course open the file by using f open function we already use this function from the previous video so in here we're just going to specify specified the name of the file which is file name dot text as you can see here so that will be file name that txt and then we're gonna use the um r symbol okay that's basically reading the file name or i mean the file coming from our file system and then the next step is of course if we want to print the contents of our file so we're just going to use the printf function right here and then specify the format specifier percent s because we're going to display um character or strings of character here coming from our file and then comma and then we discuss the function in the previous tutorial f gets f gets okay so basically this function um read string of characters from a file and this particular function takes a few parameters so for example we're just going to specify the form parameters here so for example the variable ch that's the variable that will hold the contents of our file and then so for example 50 this is the count of characters that we're going to allow to be saved in our char ch variable and then of course the file name okay and as always if you are working with file since we're opening the file here we need to use also the closing function which is f plus right here and then we're going to specify the file name right here okay so for example the file name and that's about it and we can run our program right now let's just save this and build and run so it's going to output hello world so for example just to show you a basic example let's just fill out our file hello world this is a string from a file so we're just going to um this this so save and let's run again our program okay so as you can see here hello world comma and then this is a string coming from a file as you can see here so basically we successfully read or get the contents of our file name that txt file okay so now there are other operations that you may want to do in your um file so for example you want to like count the number of lines that's possible again this particular symbol right here is uh like opening a file in a read mode okay so r that's basically what we use here so as i've said there are also other functions that we could use when trying to handle files in our c program and of course f gets is one of them but there are also so for example we have get c so this reads a character from a file okay we also have um get w so this will be for reading and integer and we also have f gets that's what we used here so f gets reads string string of characters from a file okay and then of course there are other functions that you could use to write this is right in into the file so we have put c um put w so basically put c writes a character a file and then put w write an integer to a file and then we have f print f for writing and we also have f puts okay to write string of characters into a certain file so i hope you understand the basics of handling files in c and of course as always if you have questions you can ask questions in the comment section below and we will try to answer your queries and thank you again for watching guys and see you in the next video
