With timestamps:

00:00 - hey guys welcome to the first video on
00:02 - docker tutorial for beginners in this
00:05 - video I'm going to give you a brief
00:07 - introduction about docker so first of
00:10 - all what is docker so docker is an open
00:14 - source project that automates the
00:17 - deployment of applications inside
00:19 - software containers by providing an
00:22 - additional layer of abstraction and
00:24 - automation of operating system-level
00:27 - virtualization on Linux so that is the
00:32 - definition which is available on
00:34 - Wikipedia but really what is docker so
00:39 - docker provides a uniformed wrapper
00:41 - around a software package and this
00:45 - wrapper is called docker container which
00:47 - you can ship or build and inside these
00:50 - containers you can run any app anywhere
00:54 - now doctor containers are similar to
00:57 - shipping containers now as you all know
01:00 - in the shipping container the container
01:03 - size is always same regardless of the
01:09 - content inside the container so these
01:12 - container can fit on all trucks or ships
01:16 - or trains regardless of the content
01:21 - inside the container in a same way
01:24 - docker packages a software into
01:27 - standardized unit for development
01:31 - shipment and deployment so let me give
01:35 - you a real world example so let's say I
01:38 - developed a node.js application which
01:42 - depends upon some version of node.js and
01:45 - it uses some data base and it's
01:50 - dependent on some shared library let's
01:53 - say and I want to give this software to
01:57 - the DevOps guy or let's say to my
02:00 - colleague to run it on his computer or
02:05 - on the QA system or on the cloud by
02:08 - DevOps or in the production system so I
02:11 - don't really care where
02:13 - it runs I just care that it should run
02:17 - when somebody tries to run my software
02:20 - now if docker is not present or any
02:24 - containerized system is not present the
02:27 - normal procedure will be that I give my
02:31 - software to my colleague or the DevOps
02:34 - guys and he has to install all the
02:38 - dependencies and for example node.js
02:41 - version and the database system exactly
02:46 - like a system on which I have tested my
02:49 - software now if you will just use docker
02:52 - to containerize your system you just
02:55 - need to package your system into a
02:58 - docker container and you can just give
03:02 - this docker container to your colleague
03:05 - or the DevOps guys and he will just run
03:10 - this docker container on the cloud or a
03:13 - QA machine or any other production
03:17 - system wherever he wants to run it and
03:20 - he can just run your software without
03:23 - worrying about all the dependencies or
03:27 - the environment setup which your
03:30 - software depends upon so nowadays docker
03:33 - is becoming more or less a standard for
03:37 - the container izing systems and you can
03:39 - find docker containers everywhere on
03:42 - Linux operating system or Windows
03:45 - operating system or in the data center
03:48 - clouds serverless application and so on
03:51 - now let's compare docker container
03:54 - versus virtual machines so containers
03:57 - and virtual machine have similar
04:00 - resource isolation and allocation
04:03 - benefits but docker containers and
04:06 - virtual machine functions differently
04:09 - because containers virtualized the
04:11 - operating system instead of hardware and
04:14 - containers are more portable and
04:17 - efficient so when you talk about virtual
04:19 - machines you can see this diagram on the
04:22 - right hand side so virtual machines or
04:25 - VMs are an apps
04:27 - fraction of physical hardware turning
04:30 - one server into many servers and it is
04:34 - made possible by the hypervisor which
04:37 - allows virtual machines to run on a
04:40 - single machine so each virtual machine
04:44 - or VM includes full copy of operating
04:48 - system so let's say this is your server
04:50 - and on this server you have your
04:54 - hypervisor and on top of your hypervisor
04:58 - you can run different virtual machines
05:01 - so this is virtual machine one virtual
05:04 - machine two virtual machine 3 which have
05:07 - this operating system one operating
05:11 - system two and operating system 3 or you
05:15 - can have the similar operating system in
05:17 - all the 3 virtual machine let's say now
05:20 - the important thing to note here is each
05:23 - virtual machine includes full copy of
05:27 - operating system the application
05:29 - necessary binaries and the libraries
05:32 - which takes up to tens of jeebies of
05:36 - memory and that is the reason that
05:39 - virtual machines can be slower now on
05:43 - the other hand in the container and you
05:46 - can see on the left hand side this
05:48 - diagram so containers are an abstraction
05:52 - on the a player that packages the code
05:57 - and dependencies together so you have
06:00 - your server and then you have your host
06:03 - operating system and then on top of your
06:07 - host operating system you can run your
06:10 - docker engine and the containers are the
06:14 - abstraction at the a player that
06:16 - packages the code and dependencies
06:19 - together so multiple containers can run
06:22 - on the same machine and share the same
06:27 - OS kernel with other containers but each
06:31 - container runs as isolated process in
06:36 - the user space as a result container
06:39 - takes less space than what
06:41 - machine and usually container images
06:44 - typically takes tens of megabytes in
06:48 - size in comparison to the virtual
06:51 - machine which which can take up to let's
06:53 - say several GBS of memory also
06:56 - containers can handle more application
06:59 - and require fewer virtual machines and
07:03 - operating system now when we talk about
07:05 - docker containers versus virtual
07:08 - machines the idea is to use containers
07:11 - and virtual machines together so the
07:14 - containers and the virtual machines can
07:16 - be used together which provides a great
07:19 - deal of flexibility in deploying and
07:22 - managing your apps now let's talk about
07:25 - the docker architecture so whenever you
07:29 - will install docker the docker engine
07:32 - will be installed on your system so
07:35 - docker engine will contain docker CLI
07:39 - docker demon and the docker registry now
07:44 - there is something called docker hub
07:47 - which is a cloud-based service where you
07:50 - can share your applications automate the
07:53 - workflow and assemble apps for the
07:57 - components now when you talk about
07:59 - docker two things are really important
08:02 - and these are docker images and docker
08:06 - containers so first of all what is
08:09 - docker container so a container is a
08:12 - standard unit of software that packages
08:15 - up your code and it's all dependencies
08:18 - so the application runs quickly and
08:22 - reliably from one environment to the
08:25 - other environment now when you create
08:28 - your daughter container which is
08:30 - essentially a unit of your software it
08:34 - can run everywhere regardless of the
08:37 - kernel version regardless of the host
08:40 - distro the only condition is that the
08:44 - container and the host architecture must
08:47 - match and you can run anything inside
08:50 - your containerized solution so if it can
08:53 - run on your host
08:55 - then it can run on your container that
08:58 - is if it runs on a Linux kernel it can
09:02 - run now let's talk about docker
09:04 - container images so a docker container
09:08 - image is a lightweight standalone
09:11 - executable package of software that
09:14 - includes everything needed to run the
09:17 - application that is code your runtime
09:20 - your system tools and the system
09:24 - libraries and the settings so the
09:26 - container images becomes container at
09:29 - runtime and in case of docker containers
09:33 - images becomes containers when they run
09:37 - on docker engine so images turns into
09:41 - container when these images runs on your
09:46 - docker engine now it's important to note
09:49 - that your docker image is not a virtual
09:53 - hard disk or VHD it's not a file system
09:57 - it uses Union filesystem and it's only a
10:02 - read-only layer also the docker images
10:06 - doesn't have any state so when your
10:09 - docker images runs as docker container
10:12 - inside the docker engine and when you
10:15 - stop these running containers these
10:18 - images will not have or will not save
10:22 - any state so they are stateless so
10:25 - basically an image is a tar file which
10:28 - has a hierarchy and an arbitrary depth
10:33 - and that's how it fits into your docker
10:36 - registry for example docker hub or any
10:39 - private docker registry so this was a
10:42 - brief introduction about docker in the
10:45 - next video we will go further so stay
10:47 - tuned and I will see you in the next
10:50 - video
10:59 - you

Cleaned transcript:

hey guys welcome to the first video on docker tutorial for beginners in this video I'm going to give you a brief introduction about docker so first of all what is docker so docker is an open source project that automates the deployment of applications inside software containers by providing an additional layer of abstraction and automation of operating systemlevel virtualization on Linux so that is the definition which is available on Wikipedia but really what is docker so docker provides a uniformed wrapper around a software package and this wrapper is called docker container which you can ship or build and inside these containers you can run any app anywhere now doctor containers are similar to shipping containers now as you all know in the shipping container the container size is always same regardless of the content inside the container so these container can fit on all trucks or ships or trains regardless of the content inside the container in a same way docker packages a software into standardized unit for development shipment and deployment so let me give you a real world example so let's say I developed a node.js application which depends upon some version of node.js and it uses some data base and it's dependent on some shared library let's say and I want to give this software to the DevOps guy or let's say to my colleague to run it on his computer or on the QA system or on the cloud by DevOps or in the production system so I don't really care where it runs I just care that it should run when somebody tries to run my software now if docker is not present or any containerized system is not present the normal procedure will be that I give my software to my colleague or the DevOps guys and he has to install all the dependencies and for example node.js version and the database system exactly like a system on which I have tested my software now if you will just use docker to containerize your system you just need to package your system into a docker container and you can just give this docker container to your colleague or the DevOps guys and he will just run this docker container on the cloud or a QA machine or any other production system wherever he wants to run it and he can just run your software without worrying about all the dependencies or the environment setup which your software depends upon so nowadays docker is becoming more or less a standard for the container izing systems and you can find docker containers everywhere on Linux operating system or Windows operating system or in the data center clouds serverless application and so on now let's compare docker container versus virtual machines so containers and virtual machine have similar resource isolation and allocation benefits but docker containers and virtual machine functions differently because containers virtualized the operating system instead of hardware and containers are more portable and efficient so when you talk about virtual machines you can see this diagram on the right hand side so virtual machines or VMs are an apps fraction of physical hardware turning one server into many servers and it is made possible by the hypervisor which allows virtual machines to run on a single machine so each virtual machine or VM includes full copy of operating system so let's say this is your server and on this server you have your hypervisor and on top of your hypervisor you can run different virtual machines so this is virtual machine one virtual machine two virtual machine 3 which have this operating system one operating system two and operating system 3 or you can have the similar operating system in all the 3 virtual machine let's say now the important thing to note here is each virtual machine includes full copy of operating system the application necessary binaries and the libraries which takes up to tens of jeebies of memory and that is the reason that virtual machines can be slower now on the other hand in the container and you can see on the left hand side this diagram so containers are an abstraction on the a player that packages the code and dependencies together so you have your server and then you have your host operating system and then on top of your host operating system you can run your docker engine and the containers are the abstraction at the a player that packages the code and dependencies together so multiple containers can run on the same machine and share the same OS kernel with other containers but each container runs as isolated process in the user space as a result container takes less space than what machine and usually container images typically takes tens of megabytes in size in comparison to the virtual machine which which can take up to let's say several GBS of memory also containers can handle more application and require fewer virtual machines and operating system now when we talk about docker containers versus virtual machines the idea is to use containers and virtual machines together so the containers and the virtual machines can be used together which provides a great deal of flexibility in deploying and managing your apps now let's talk about the docker architecture so whenever you will install docker the docker engine will be installed on your system so docker engine will contain docker CLI docker demon and the docker registry now there is something called docker hub which is a cloudbased service where you can share your applications automate the workflow and assemble apps for the components now when you talk about docker two things are really important and these are docker images and docker containers so first of all what is docker container so a container is a standard unit of software that packages up your code and it's all dependencies so the application runs quickly and reliably from one environment to the other environment now when you create your daughter container which is essentially a unit of your software it can run everywhere regardless of the kernel version regardless of the host distro the only condition is that the container and the host architecture must match and you can run anything inside your containerized solution so if it can run on your host then it can run on your container that is if it runs on a Linux kernel it can run now let's talk about docker container images so a docker container image is a lightweight standalone executable package of software that includes everything needed to run the application that is code your runtime your system tools and the system libraries and the settings so the container images becomes container at runtime and in case of docker containers images becomes containers when they run on docker engine so images turns into container when these images runs on your docker engine now it's important to note that your docker image is not a virtual hard disk or VHD it's not a file system it uses Union filesystem and it's only a readonly layer also the docker images doesn't have any state so when your docker images runs as docker container inside the docker engine and when you stop these running containers these images will not have or will not save any state so they are stateless so basically an image is a tar file which has a hierarchy and an arbitrary depth and that's how it fits into your docker registry for example docker hub or any private docker registry so this was a brief introduction about docker in the next video we will go further so stay tuned and I will see you in the next video you
