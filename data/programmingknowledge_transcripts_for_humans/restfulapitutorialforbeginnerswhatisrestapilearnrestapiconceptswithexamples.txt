With timestamps:

00:00 - hey guys in this video i'm going to try
00:02 - to explain you what is rest and what is
00:05 - our rest api
00:06 - so let's get started
00:08 - so first of all what is rest
00:11 - rest is an architectural style which is
00:14 - based on web standards and the http
00:17 - protocol this style was initially
00:20 - described by roy fielding in the year
00:23 - 2000
00:24 - roy fielding was also one of the
00:26 - principal author of http specifications
00:30 - now rest is an acronym standing for
00:32 - representational state transfer so as i
00:36 - said that rest is an architectural style
00:39 - of web but what does this even mean so
00:42 - rest is a set of design criteria and not
00:45 - the physical structure or architecture
00:48 - of the system so it's just a design
00:51 - criteria right
00:52 - so rest is not tied to web
00:56 - that is it doesn't depend on the
00:58 - mechanics of http now in rest based
01:02 - architecture everything is a resource
01:05 - and what is a resource
01:06 - a rest resource is a data on which we
01:10 - want to perform operations so this data
01:13 - can be present on the database on the
01:16 - server side for example
01:19 - some employee data which have some
01:21 - unique identification for example
01:24 - employee id
01:25 - now this resource is accessed via a
01:28 - common interface based on http standard
01:31 - methods which we will learn a little bit
01:34 - later so let me give you
01:36 - a more concrete example
01:38 - so in rest based architecture you have a
01:42 - rest server which provides the access to
01:46 - the resource so for example this is our
01:48 - rest server which provides the access to
01:51 - the resource which is there in the
01:53 - database
01:54 - or in some form of records now on the
01:57 - other hand we have a rest client which
02:00 - is used to access and modify the rest
02:04 - resource now in rest architecture every
02:08 - resource should support the http common
02:11 - operation so let me give you a more
02:14 - concrete example
02:16 - so let's say we want to create a weather
02:19 - app
02:21 - now weather app is dependent on the
02:24 - weather data now let's say this weather
02:27 - data is saved every day or every hour in
02:31 - some database which can be accessed from
02:35 - a rest server for example so in a rest
02:38 - based architecture you have a rest
02:40 - server
02:42 - which provides an access to the resource
02:45 - in our case it's a weather data of some
02:48 - city for example and you have a rest
02:51 - client
02:52 - rest client can access or modify
02:55 - the rest resource okay now every
02:58 - resource should support the http common
03:01 - operation now how this resource is
03:04 - identified so resources are identified
03:07 - by a global id which are typically
03:10 - called uris which stands for uniform
03:13 - resource identifier and in some cases
03:16 - it's called url which stands for uniform
03:18 - resource locator so you can consider
03:21 - this uri as an address of the resource
03:23 - so for example we want to access the
03:26 - temperature of city london now this
03:30 - request can be sent from a client in the
03:32 - form of uri you can see here so for
03:35 - example first of all this resource is
03:39 - under the country name uk for example
03:43 - and then the resource name london
03:45 - now if we think logically
03:48 - a resource must have at least one uri
03:51 - right so if
03:53 - the resource doesn't have any uri how
03:56 - will you access this resource so in rest
03:59 - architecture you must have
04:01 - a uri to access or modify this report
04:05 - for example if you don't have
04:08 - this uri uk forward slash london how
04:11 - will you identify this resource in the
04:15 - rest server and these uri should be
04:18 - descriptive that is human possible and
04:22 - have some structure so for example in
04:24 - our example
04:26 - i have given this uri uk which is a
04:29 - country name
04:30 - and then
04:31 - the city name for example now if you
04:34 - want to know the temperature of some
04:37 - other
04:37 - city in some other country for example
04:40 - we want to know the temperature of city
04:43 - munich then you can write germany as a
04:45 - country here and then forward slash you
04:47 - can write the city name which is munich
04:49 - in our case now rest allows the resource
04:53 - to have different representation
04:56 - right so for example this request is
04:59 - sent to a rest server and on the request
05:02 - this rest server accesses the london's
05:06 - temperature report and then how or in
05:09 - which representation it should send the
05:12 - result and in which format this data is
05:15 - returned to the client is called a
05:18 - representation right and rest allows
05:21 - that resource to have different
05:23 - representation
05:25 - it can send an xml representation of the
05:28 - result or it can send json
05:31 - representation of the result or in most
05:34 - of the cases it can also send html as a
05:38 - representation now in rest clients
05:41 - decide which kind of representation it
05:44 - want to have so for example client sends
05:47 - this information that i want this result
05:51 - in the representation of jason right so
05:54 - client send this request to the server
05:57 - that which form of its presentation of
05:59 - result it wants so let's go to the rest
06:03 - definition once again
06:05 - so why rest is called representational
06:09 - state transfer so representational state
06:12 - transfer refers to transferring
06:14 - representation
06:16 - in our case we have seen the
06:18 - representation can be sent in the form
06:20 - of json or text or html or xml in any
06:25 - representation so we are using the
06:27 - representation of resource to transfer
06:30 - this resource state which lives on the
06:33 - server into the application state which
06:37 - is on the client okay so
06:39 - representational because client
06:41 - possesses the information necessary to
06:44 - identify modify or delete a web resource
06:48 - and client decide which form of
06:51 - representation of the result now the
06:54 - word state comes in rest because all
06:56 - resource state information is stored on
06:58 - the client side so you can say
07:01 - that your server or your rest server is
07:04 - stateless it doesn't have any state all
07:07 - the states are stored on the client side
07:11 - and transfer because client state is
07:14 - passed from the client to the server
07:18 - through http now let's discuss about
07:21 - http methods supported by rest
07:24 - so these are some of the most important
07:26 - methods which are supported
07:29 - by rest architecture so you have get
07:32 - which is used to retrieve representation
07:35 - of resource you have put method to
07:38 - update or modify existing resources and
07:41 - in some special cases we use put to
07:44 - create a new resource also
07:47 - now we have post to create a new
07:50 - resource and delete method to delete an
07:53 - existing resource now rest have to
07:56 - another
07:57 - less commonly used methods which are had
08:00 - an option
08:02 - so had method fetches the metadata of
08:05 - representation only so it doesn't have
08:08 - any body
08:10 - and the method options checks which http
08:13 - method a particular resource supports so
08:16 - most of the time when you are designing
08:18 - your rest architecture you will be using
08:22 - these four method which are frequently
08:25 - used when you design your rest
08:28 - architecture which are get put post and
08:31 - delete
08:32 - now there are five basic software
08:34 - architectural style principle in rest
08:38 - so the principle one is everything is a
08:41 - resource
08:42 - so in rest architectural style data and
08:45 - functionality are considered as resource
08:49 - and are accessed using a uri now the
08:52 - second principle is every resource is
08:54 - identified by a unique identifier
08:57 - using uris now the third principle is
09:01 - you have to use simple and uniform
09:04 - interfaces
09:05 - so use simple and standard interfaces to
09:08 - define your rest architecture so for
09:11 - example in our temperature or weather
09:13 - information
09:15 - example we have defined a very simple
09:18 - and uniform interface so we have defined
09:20 - a country name and then
09:23 - inside a country name there is a city
09:25 - name so whenever we provide
09:27 - the country name and then a city name
09:30 - and for example we want to
09:32 - access
09:33 - the temperature of some particular area
09:36 - of that city we can even request that
09:40 - temperature using this uri so use simple
09:44 - and standard interfaces for
09:47 - defining your rest architecture now the
09:49 - fourth principle is communication is
09:52 - done by representation so for example
09:55 - rest server can send a representation in
09:58 - the form of xml or json or text or any
10:02 - other form on the client's request and
10:05 - the last principle is be stateless that
10:08 - means every request happens in complete
10:11 - isolation now the next question arises
10:14 - is what is a rest api
10:17 - so first of all we need to understand
10:19 - what is api
10:20 - so api stands for application
10:23 - programming interface and an api is a
10:25 - set of subroutine definitions protocols
10:29 - and tools for building application
10:31 - software now our rest api is an
10:34 - application program interface
10:36 - that uses http request to get put post
10:40 - and delete
10:41 - some resources now let me give you a
10:44 - simple example to explain a rest api
10:49 - so let's say we have a resource for
10:52 - example
10:54 - some dishes inside a kitchen so these
10:57 - can be considered as resources right
11:01 - now a client comes and he wants to order
11:05 - some dishes from the kitchen but he
11:08 - cannot directly go to the kitchen and
11:11 - then take whatever he wants so the user
11:14 - uses
11:15 - some intermediate service to access this
11:18 - resource and this is the job of an api
11:22 - which is waiter in our case so a rest
11:25 - api accesses
11:27 - this resource on the client's request
11:30 - and then responds this representation of
11:34 - the result to the client so we can say
11:37 - that our rest api is a intermediate
11:41 - service to access some resources now a
11:43 - real world example of that can be a
11:46 - twitter api
11:47 - or a google map api
11:50 - or for example
11:52 - facebook's graph apis so for example we
11:54 - want to make an app which uses for
11:58 - example facebook's graph api to know who
12:01 - have the most popular page on facebook
12:04 - you can use facebook's graph api for
12:07 - that or for example if you want to post
12:10 - something on twitter
12:12 - using
12:13 - the twitter's rest api you can do that
12:17 - also so let me give you this real world
12:19 - example so open your browser and search
12:22 - for api g console okay so search for api
12:27 - g console
12:29 - and you will be able to see this website
12:31 - which is api key dot com forward slash
12:34 - console
12:35 - so when you go inside this website you
12:38 - will be able to see different apis here
12:41 - okay
12:41 - and you will be able to see
12:44 - for example facebook's api yahoo weather
12:47 - api and so many different kind of apis
12:51 - so for example you want to use a twitter
12:53 - api which is already selected here or
12:56 - you can even select it from here so for
12:58 - example let's say i want to do a tweet
13:01 - on my twitter account using this api how
13:04 - can i do it
13:05 - so
13:06 - i will select this twitter api
13:09 - and you can see this is the service
13:11 - which is api.twitter.com
13:14 - version 1.1
13:16 - and i need to
13:18 - give some
13:19 - so i need to give some credentials from
13:22 - my site to login to my twitter account
13:25 - and then only i will be able to do some
13:28 - tweet right so for authentication i will
13:30 - choose
13:32 - one here so just choose this option out
13:35 - one
13:36 - and then just select sign in with
13:38 - twitter it's going to ask for your
13:40 - permission i'll just say authorize app
13:43 - and now
13:44 - this app is logged in with my
13:47 - credentials
13:48 - right
13:49 - and now i can do some tweet and on the
13:52 - left hand side i will search for
13:55 - the tweets section here
13:57 - and then i will just select this option
13:59 - which says status is update dot json
14:03 - which uses this http post method right
14:07 - so i will select this option from here
14:09 - which is going to give you this kind of
14:13 - url so you can see
14:15 - the resource we want to access here is
14:17 - statuses and then update dot json and
14:22 - this is
14:23 - uh the status we want to post so for
14:25 - example here from here i'm going to just
14:28 - delete the status which is the default
14:30 - status and i will just write here
14:32 - rest stands for representational state
14:36 - transfer and now i'm going to just send
14:38 - this
14:39 - tweet and i receive the status code 200
14:43 - that means my tweet has been
14:45 - tweeted and you can see this response
14:49 - here right
14:50 - and i can see here that this tweet is
14:54 - posted on my twitter account you can see
14:56 - rest stands for representational state
14:59 - transfer which i have done using this
15:01 - twitter's rest api now the last example
15:05 - i want to give here is the rest server i
15:08 - created using node.js so this is a very
15:11 - basic rest server which is used to
15:13 - create update delete or get
15:16 - the blog post so a blog can have post
15:20 - and then the post can have some comments
15:23 - and you can have also a profile of the
15:27 - person who is posting this blog post
15:30 - right now this is a rest server
15:33 - and i need to have a rest client in
15:36 - order to interact with this rest server
15:39 - so generally in development we use a
15:43 - tool called postman rest client which is
15:46 - used to send rest based request from a
15:50 - client to a server so open your web
15:52 - browser and search for postman rest
15:54 - client and the first link which will
15:56 - appear here will be from
15:59 - getpostman.com and then you can directly
16:02 - download this for your operating system
16:04 - and once you download and install it
16:07 - will look like this okay so this is a
16:10 - simple
16:11 - user interface of postman client from
16:14 - here you can send any request to your
16:17 - server so my server is running on
16:20 - localhost port 3000 so i'm going to just
16:23 - write here http colon double forward
16:26 - slash localhost port
16:28 - 3000 and for example i want to just send
16:31 - the get request from here and let's see
16:34 - on the server side i'm using this
16:36 - db.json as my
16:39 - database so for example you can see
16:41 - there is only one post existing in this
16:45 - json database and i want to access this
16:48 - post resource right so what i can do
16:51 - here is i can just send a request on
16:55 - post so this is my resource posts is my
16:58 - resource and let's say i want to just
17:00 - get the post whose id is one so i'm
17:03 - going to just write one here right and
17:05 - then i will just send this
17:07 - request and then you can see i get this
17:10 - response so for example id is equal to
17:13 - one title is json server and author is
17:16 - codebind which is also there on my json
17:20 - database now let's say i want to just
17:23 - retrieve the comments for post one then
17:26 - i can just write instead of post i can
17:29 - just
17:30 - access the comment resource from here
17:33 - right so i can just send this request
17:36 - and this time i can just get the
17:39 - comments resources from
17:42 - this rest server now let's say i want to
17:45 - post a new post so i will just send this
17:48 - request so i will just use this resource
17:51 - post to post some data and the method
17:53 - here i will use is post because i want
17:56 - to create a new blog post and format of
18:00 - this will be same as this one so i'm
18:03 - going to just copy this format
18:05 - and then in the body i'm going to send
18:09 - this request so just click on body
18:12 - and then i will just say bulk edit and i
18:16 - will send this request so this time the
18:18 - id of the post will be 2
18:20 - the title
18:22 - list will be for example
18:24 - rest api and the author i want to leave
18:27 - it as same so i will leave it as
18:29 - codebind so this is
18:31 - my request body for the post right
18:35 - and then in the header you can even
18:37 - write the content type but by default
18:40 - the postman sends the application json
18:42 - content type to the rest server so i
18:45 - will leave it as default and i will just
18:47 - say send and you can see here the status
18:51 - i get here is 201 created that means my
18:55 - post is successful and i receive the id
18:58 - of the created post now in order to
19:00 - delete the post i can choose the delete
19:03 - method from here and whatever post i
19:06 - want to delete so for example i will
19:08 - just write resource name posts and i
19:10 - want to delete the post 2 so i will
19:12 - write the id of the post 2 and then send
19:16 - the request and then you can see i get
19:19 - 200 response that means ok
19:21 - and then this id is deleted and then
19:24 - when i do the get request for the
19:27 - post id 2 i will not receive any data
19:30 - about this and when i request all the
19:33 - posts then i will only
19:36 - get the post id 1 because post id 2 i
19:39 - have already deleted so that's it for
19:42 - this video i hope you enjoyed this video
19:43 - please rate comment and subscribe and
19:45 - bye for now

Cleaned transcript:

hey guys in this video i'm going to try to explain you what is rest and what is our rest api so let's get started so first of all what is rest rest is an architectural style which is based on web standards and the http protocol this style was initially described by roy fielding in the year 2000 roy fielding was also one of the principal author of http specifications now rest is an acronym standing for representational state transfer so as i said that rest is an architectural style of web but what does this even mean so rest is a set of design criteria and not the physical structure or architecture of the system so it's just a design criteria right so rest is not tied to web that is it doesn't depend on the mechanics of http now in rest based architecture everything is a resource and what is a resource a rest resource is a data on which we want to perform operations so this data can be present on the database on the server side for example some employee data which have some unique identification for example employee id now this resource is accessed via a common interface based on http standard methods which we will learn a little bit later so let me give you a more concrete example so in rest based architecture you have a rest server which provides the access to the resource so for example this is our rest server which provides the access to the resource which is there in the database or in some form of records now on the other hand we have a rest client which is used to access and modify the rest resource now in rest architecture every resource should support the http common operation so let me give you a more concrete example so let's say we want to create a weather app now weather app is dependent on the weather data now let's say this weather data is saved every day or every hour in some database which can be accessed from a rest server for example so in a rest based architecture you have a rest server which provides an access to the resource in our case it's a weather data of some city for example and you have a rest client rest client can access or modify the rest resource okay now every resource should support the http common operation now how this resource is identified so resources are identified by a global id which are typically called uris which stands for uniform resource identifier and in some cases it's called url which stands for uniform resource locator so you can consider this uri as an address of the resource so for example we want to access the temperature of city london now this request can be sent from a client in the form of uri you can see here so for example first of all this resource is under the country name uk for example and then the resource name london now if we think logically a resource must have at least one uri right so if the resource doesn't have any uri how will you access this resource so in rest architecture you must have a uri to access or modify this report for example if you don't have this uri uk forward slash london how will you identify this resource in the rest server and these uri should be descriptive that is human possible and have some structure so for example in our example i have given this uri uk which is a country name and then the city name for example now if you want to know the temperature of some other city in some other country for example we want to know the temperature of city munich then you can write germany as a country here and then forward slash you can write the city name which is munich in our case now rest allows the resource to have different representation right so for example this request is sent to a rest server and on the request this rest server accesses the london's temperature report and then how or in which representation it should send the result and in which format this data is returned to the client is called a representation right and rest allows that resource to have different representation it can send an xml representation of the result or it can send json representation of the result or in most of the cases it can also send html as a representation now in rest clients decide which kind of representation it want to have so for example client sends this information that i want this result in the representation of jason right so client send this request to the server that which form of its presentation of result it wants so let's go to the rest definition once again so why rest is called representational state transfer so representational state transfer refers to transferring representation in our case we have seen the representation can be sent in the form of json or text or html or xml in any representation so we are using the representation of resource to transfer this resource state which lives on the server into the application state which is on the client okay so representational because client possesses the information necessary to identify modify or delete a web resource and client decide which form of representation of the result now the word state comes in rest because all resource state information is stored on the client side so you can say that your server or your rest server is stateless it doesn't have any state all the states are stored on the client side and transfer because client state is passed from the client to the server through http now let's discuss about http methods supported by rest so these are some of the most important methods which are supported by rest architecture so you have get which is used to retrieve representation of resource you have put method to update or modify existing resources and in some special cases we use put to create a new resource also now we have post to create a new resource and delete method to delete an existing resource now rest have to another less commonly used methods which are had an option so had method fetches the metadata of representation only so it doesn't have any body and the method options checks which http method a particular resource supports so most of the time when you are designing your rest architecture you will be using these four method which are frequently used when you design your rest architecture which are get put post and delete now there are five basic software architectural style principle in rest so the principle one is everything is a resource so in rest architectural style data and functionality are considered as resource and are accessed using a uri now the second principle is every resource is identified by a unique identifier using uris now the third principle is you have to use simple and uniform interfaces so use simple and standard interfaces to define your rest architecture so for example in our temperature or weather information example we have defined a very simple and uniform interface so we have defined a country name and then inside a country name there is a city name so whenever we provide the country name and then a city name and for example we want to access the temperature of some particular area of that city we can even request that temperature using this uri so use simple and standard interfaces for defining your rest architecture now the fourth principle is communication is done by representation so for example rest server can send a representation in the form of xml or json or text or any other form on the client's request and the last principle is be stateless that means every request happens in complete isolation now the next question arises is what is a rest api so first of all we need to understand what is api so api stands for application programming interface and an api is a set of subroutine definitions protocols and tools for building application software now our rest api is an application program interface that uses http request to get put post and delete some resources now let me give you a simple example to explain a rest api so let's say we have a resource for example some dishes inside a kitchen so these can be considered as resources right now a client comes and he wants to order some dishes from the kitchen but he cannot directly go to the kitchen and then take whatever he wants so the user uses some intermediate service to access this resource and this is the job of an api which is waiter in our case so a rest api accesses this resource on the client's request and then responds this representation of the result to the client so we can say that our rest api is a intermediate service to access some resources now a real world example of that can be a twitter api or a google map api or for example facebook's graph apis so for example we want to make an app which uses for example facebook's graph api to know who have the most popular page on facebook you can use facebook's graph api for that or for example if you want to post something on twitter using the twitter's rest api you can do that also so let me give you this real world example so open your browser and search for api g console okay so search for api g console and you will be able to see this website which is api key dot com forward slash console so when you go inside this website you will be able to see different apis here okay and you will be able to see for example facebook's api yahoo weather api and so many different kind of apis so for example you want to use a twitter api which is already selected here or you can even select it from here so for example let's say i want to do a tweet on my twitter account using this api how can i do it so i will select this twitter api and you can see this is the service which is api.twitter.com version 1.1 and i need to give some so i need to give some credentials from my site to login to my twitter account and then only i will be able to do some tweet right so for authentication i will choose one here so just choose this option out one and then just select sign in with twitter it's going to ask for your permission i'll just say authorize app and now this app is logged in with my credentials right and now i can do some tweet and on the left hand side i will search for the tweets section here and then i will just select this option which says status is update dot json which uses this http post method right so i will select this option from here which is going to give you this kind of url so you can see the resource we want to access here is statuses and then update dot json and this is uh the status we want to post so for example here from here i'm going to just delete the status which is the default status and i will just write here rest stands for representational state transfer and now i'm going to just send this tweet and i receive the status code 200 that means my tweet has been tweeted and you can see this response here right and i can see here that this tweet is posted on my twitter account you can see rest stands for representational state transfer which i have done using this twitter's rest api now the last example i want to give here is the rest server i created using node.js so this is a very basic rest server which is used to create update delete or get the blog post so a blog can have post and then the post can have some comments and you can have also a profile of the person who is posting this blog post right now this is a rest server and i need to have a rest client in order to interact with this rest server so generally in development we use a tool called postman rest client which is used to send rest based request from a client to a server so open your web browser and search for postman rest client and the first link which will appear here will be from getpostman.com and then you can directly download this for your operating system and once you download and install it will look like this okay so this is a simple user interface of postman client from here you can send any request to your server so my server is running on localhost port 3000 so i'm going to just write here http colon double forward slash localhost port 3000 and for example i want to just send the get request from here and let's see on the server side i'm using this db.json as my database so for example you can see there is only one post existing in this json database and i want to access this post resource right so what i can do here is i can just send a request on post so this is my resource posts is my resource and let's say i want to just get the post whose id is one so i'm going to just write one here right and then i will just send this request and then you can see i get this response so for example id is equal to one title is json server and author is codebind which is also there on my json database now let's say i want to just retrieve the comments for post one then i can just write instead of post i can just access the comment resource from here right so i can just send this request and this time i can just get the comments resources from this rest server now let's say i want to post a new post so i will just send this request so i will just use this resource post to post some data and the method here i will use is post because i want to create a new blog post and format of this will be same as this one so i'm going to just copy this format and then in the body i'm going to send this request so just click on body and then i will just say bulk edit and i will send this request so this time the id of the post will be 2 the title list will be for example rest api and the author i want to leave it as same so i will leave it as codebind so this is my request body for the post right and then in the header you can even write the content type but by default the postman sends the application json content type to the rest server so i will leave it as default and i will just say send and you can see here the status i get here is 201 created that means my post is successful and i receive the id of the created post now in order to delete the post i can choose the delete method from here and whatever post i want to delete so for example i will just write resource name posts and i want to delete the post 2 so i will write the id of the post 2 and then send the request and then you can see i get 200 response that means ok and then this id is deleted and then when i do the get request for the post id 2 i will not receive any data about this and when i request all the posts then i will only get the post id 1 because post id 2 i have already deleted so that's it for this video i hope you enjoyed this video please rate comment and subscribe and bye for now
