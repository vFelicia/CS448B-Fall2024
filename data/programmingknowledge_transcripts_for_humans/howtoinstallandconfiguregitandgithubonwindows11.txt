With timestamps:

00:00 - hey guys in this video I'm going to show
00:01 - you how you can install git and
00:03 - configure it with GitHub on your windows
00:06 - 11 operating system
00:07 - so let's start with the installation of
00:09 - git
00:10 - so for that just open your favorite
00:13 - browser and search for git
00:15 - and the first link which will appear
00:16 - here will be from git hyphen hcm.com
00:19 - which is the official website so we are
00:22 - going to click on this link
00:24 - and once we are on
00:28 - gitscm.com website you will be able to
00:31 - see this download for Windows button
00:34 - here
00:35 - so I'm going to click on this download
00:37 - for Windows button
00:39 - where you will see few options so let's
00:42 - click on this link you can also see
00:45 - there are some Standalone installers and
00:48 - portable installers we will just click
00:52 - on this link which says click here to
00:54 - download which is going to start the
00:56 - download of this executable file which
00:59 - is a very small file so and once this
01:02 - executable file is downloaded just click
01:04 - on this file
01:05 - I'm going to minimize the browser and
01:08 - here first of all you will see this kind
01:10 - of window which will say do you want to
01:12 - allow this app to make changes on your
01:14 - device I will click on yes here and you
01:17 - can see the setup for git has been
01:19 - started first window will be about the
01:23 - public license so just uh
01:26 - click on the next button here
01:28 - this will be the location where your git
01:32 - will be installed so if you don't have
01:34 - the good reason to change this location
01:36 - just leave it as default and then click
01:39 - on next and then you have this select
01:41 - component window here
01:44 - so you have the option to uh click on
01:47 - this checkbox which will add the
01:49 - additional icon on your desktop and all
01:54 - the other options are there so I'm going
01:56 - to just check this checkbox which says
01:59 - additional icons and leave all the other
02:02 - icons as checked and then click on next
02:06 - and then select start menu folder I'm
02:09 - going to leave it as default and then
02:11 - click on next
02:13 - and then you have choose the default
02:17 - editor by using git
02:19 - so you can see there are
02:22 - lots of editors here right so for now
02:26 - you can choose uh for example Visual
02:30 - Studio code as your default editor or
02:33 - whatever editor you have on your windows
02:36 - 11 operating system you can choose that
02:38 - editor and then click on next and then
02:42 - on the next window you have adjusting
02:44 - the name of the initial Branch so on
02:46 - this window what I generally like is I
02:50 - like to uh choose this option which says
02:53 - override the default Branch name for the
02:58 - new repositories and I generally name my
03:02 - default Branch as main the reason behind
03:05 - this is when you use git with GitHub the
03:08 - default Branch name on git is Main and
03:12 - not the master right so just click on
03:16 - override the default Branch name and
03:19 - then give the name main here and then
03:22 - click on next
03:24 - and then adjusting your path environment
03:27 - you have the option to use git from git
03:31 - bash only you have the option to use git
03:34 - from the command line and also from
03:37 - third party software I will go with the
03:40 - recommended option and then click on
03:42 - next
03:43 - and then you have choosing SSH
03:46 - executable use bundled open SSH and you
03:50 - also have the option to use the external
03:53 - open SSH
03:54 - executable file I will leave it as
03:57 - default and then click on next
03:59 - and then once again leave it as default
04:02 - click on next
04:03 - and then configuring the line ending
04:06 - conversion we are on windows so I will
04:09 - leave this as default once again and
04:11 - then click on next
04:12 - and then configuring the terminal
04:14 - emulator
04:16 - to use with Git bash I will go with the
04:19 - recommended one and then click on next
04:22 - and then you have to choose the default
04:26 - behavior of git pull
04:29 - so I will once again choose the default
04:32 - one and then click on next
04:34 - and then you have get credential manager
04:38 - so choose the credential helper I will
04:40 - choose the get credential manager here
04:43 - which is recommended and then click on
04:45 - next and then enable file system caching
04:48 - click on next
04:50 - here configuring experimental options so
04:54 - you have you can enable the experimental
04:58 - support for sudo consoles and then I
05:01 - mean and also enable experiment built-in
05:04 - file system monitor I will just choose
05:07 - both of them and then click on install
05:09 - which is going to start the installation
05:11 - of git so now as you can see the git
05:15 - setup is finished and you can even
05:18 - launch the git bash using this checkbox
05:22 - I'm going to uncheck this checkbox which
05:25 - says view release notes and then click
05:27 - on finish which is going to launch git
05:31 - bash so you can see git bash is now
05:34 - opened on my Windows operating system
05:37 - I can even go to my start menu and then
05:41 - click on all apps here and then under G
05:45 - I will be able to see
05:48 - get here and when you expand this git
05:50 - option you have this git bash git CMD
05:54 - and you also have git GUI
05:58 - so let me open git Bash from here
06:01 - and let me also open git GUI
06:05 - and let's see how it looks like so you
06:08 - can see there is this kit GUI and you
06:12 - can clone existing repositories here
06:14 - using git GUI open existing repository
06:18 - or create a new repository for now uh
06:22 - I'm going to use the command line tool
06:24 - so let me quit this GUI
06:27 - so now git is working right so let's
06:30 - create some kind of code and then we are
06:35 - going to commit our code
06:37 - so to do that let me open some kind of
06:40 - folder where I have a JavaScript file
06:43 - which I want to commit and then I want
06:47 - to push this JavaScript code to a GitHub
06:52 - repository right so this folder JS apps
06:55 - is on my desktop as you can see
06:58 - and then I have this test dot JS file
07:03 - here so what I am going to do is I'm
07:05 - going to right click here and I can
07:08 - either open
07:10 - terminal in this folder or I can click
07:14 - on show more options and I can click on
07:16 - get bash here so git fake bash is going
07:20 - to be opened inside this folder right so
07:24 - you can see I'm in my desktop and then
07:27 - JS apps folder right so the first thing
07:31 - you need to do here is we need to uh run
07:35 - a command called git init right it's
07:40 - going to initialize the git into this
07:43 - project so just write git
07:45 - init and then press enter
07:48 - which is going to initialize git into
07:50 - your project right and then when you do
07:54 - LS hyphen Al here you will see that
07:59 - there is this dot git uh directory which
08:04 - is created if you see it using folder
08:07 - Explorer you might not be able to see it
08:09 - because it's a hidden folder but on git
08:12 - bash you will be able to see it
08:14 - and now once the git is initialized we
08:20 - can check the git status so just write
08:23 - git
08:24 - status command here and you will see in
08:27 - the output it says untracked files and
08:30 - this is the untracked file I only had
08:33 - one file in my project folder which is
08:36 - test.js and git says that this file is
08:41 - not yet dragged using git right so we
08:44 - need to add this file to git and then
08:47 - commit this file right so to add this
08:50 - just write git add and the file name
08:53 - which is test.js and then press enter
08:56 - and it's going to add this file into git
08:59 - once again run get status command and
09:02 - now you will see this file in green so
09:05 - what this means is we have added the
09:08 - file to get but we need to commit this
09:12 - file also right so once you have added
09:15 - this file to get just write git
09:19 - comment here and then write hyphen M
09:23 - hyphen m is the flag which we use to
09:25 - give any comment right so I can give a
09:30 - comment to my commit for example first
09:36 - commit here and then the file name which
09:39 - is test dot TS and then press enter
09:41 - and once you press enter this file will
09:45 - be committed right now before committing
09:48 - this file you will be able to see uh
09:51 - this error you have to configure git
09:54 - before committing this file and you have
09:57 - to run these two commands right first
09:59 - one is git config user dot email and
10:03 - then second command is git config Global
10:06 - username and give your username right so
10:09 - I'm going to just do that so let me just
10:13 - copy and paste this command on the
10:16 - terminal
10:17 - which is the first command and you can
10:19 - replace
10:20 - the
10:22 - email sample email by your email here
10:26 - right so I can just write x y z for
10:31 - example at the rate gmail.com
10:37 - so I just want to give a sample email ID
10:40 - here you might want to give your real
10:42 - email ID in this case and the second
10:45 - command is git config hyphen hyphen
10:47 - Global user dot name so give the
10:51 - username here so I'm going to give the
10:53 - username
10:56 - you can give any username here and then
10:59 - press enter
11:00 - and once you are done
11:03 - you can once again run this git commit
11:07 - hyphen m
11:08 - first commit test dot JS in my case it
11:13 - can be any file in your case so let me
11:15 - run this command and this time it's
11:18 - going to be successful right so you can
11:21 - see our file is committed let me clear
11:25 - the terminal here and now I will write
11:27 - git
11:28 - status once again and then it says
11:31 - nothing to commit and our working tree
11:34 - is clean right so we have committed our
11:37 - code
11:37 - and you can also see that on git bash
11:41 - you will see the branch name in front of
11:44 - your folder name and right now the
11:47 - branch name is main here right and git
11:51 - has created this main default Branch for
11:53 - us so now we are done with the git part
11:56 - let's go to GitHub now so you can just
12:00 - search for GitHub and then click on the
12:02 - first link here and if you don't have
12:05 - the GitHub account you can create one
12:08 - very simply and once you are inside your
12:14 - GitHub account it's going to look like
12:16 - this right so in order to create a new
12:18 - repository you can click on this plus
12:20 - sign and then click on new repository
12:22 - and then give any name to your
12:25 - repository now what I will suggest is
12:28 - you can give the same name as your
12:31 - project name so in my case my project
12:34 - folder name is JS apps right so I can
12:37 - copy this name and then paste it as the
12:42 - repository name it's not necessary but
12:45 - what I generally do is I generally give
12:49 - the same name to my repository as my
12:53 - project name on my local system right
12:58 - and then you can add the description
13:03 - my
13:04 - first app for example so this will be
13:07 - the description of your Repository
13:10 - you can also add the readme file you can
13:16 - also add git ignore files and license
13:19 - files for now I don't want to do
13:22 - anything but you might want to add these
13:25 - files in your real projects right and
13:28 - then click on create Repository
13:31 - and our repository is created now right
13:35 - so now if you see closely here uh git
13:39 - Hub is going to give us some kind of
13:44 - procedure how you can push your code on
13:48 - this repository so if you see here we
13:51 - have already ran the git init command we
13:54 - have already ran the get add command to
13:58 - uh add the test.js file which was the
14:01 - file in our project right we have
14:04 - already ran the git commit command with
14:08 - hyphen M right we are already on the
14:11 - main branch right so you can see when I
14:15 - go to git uh bash terminal the branch
14:19 - name is highlighted here which is main
14:22 - right so first four command we have
14:25 - already uh done now the next command is
14:30 - git remote add or region this is the
14:33 - thing you need to do now right but
14:36 - before doing this I will recommend you
14:40 - to create a GitHub token because you
14:43 - will require wire a GitHub token in
14:46 - order to push your code into your
14:50 - repository so what I will recommend
14:52 - first is just go at the top here and
14:57 - then let me open this uh GitHub website
15:01 - on the next tab so just go at the top
15:05 - and then click on your profile and then
15:07 - click on settings here
15:10 - and once you are on settings just go at
15:13 - the very bottom on the left hand side
15:15 - where you will see developer settings
15:17 - I'm going to click on that and once I'm
15:20 - inside the developer settings I can
15:23 - click on personal access token here and
15:26 - then I'm going to create a classic token
15:29 - right
15:30 - so here I can click on generate new
15:33 - token and then I'm going to click on
15:36 - generate New Classic
15:38 - and I can give any name to my token so
15:41 - my
15:43 - first token for example and then you can
15:46 - also choose the expiration date for your
15:49 - token so I can choose the custom date
15:52 - and I want to expire this let's say
15:57 - after two days okay so today is 24th I
16:02 - will expire this token after two days
16:05 - because I am just creating this for the
16:08 - demonstration purposes in your case you
16:11 - might want to choose 90 days or even you
16:14 - can choose no expiration which means
16:16 - that your token will never expire so you
16:19 - can use it forever right and then
16:24 - just check all these check boxes here so
16:27 - so you are allowing the user if he uses
16:30 - this token create or delete your
16:33 - repository right into the packages uh
16:36 - and all the other privileges right so
16:39 - admin privileges I'm going to choose
16:41 - each and every uh option here for this
16:46 - token
16:47 - so let me just choose all these and once
16:51 - I'm done I can create this token so I'm
16:54 - going to click on generate token here
16:56 - and this token is generated now you need
16:59 - to keep in mind that this token you can
17:02 - only see once right once you close this
17:05 - window you will not be able to see it
17:08 - again so you it's a good idea to backup
17:11 - this token somewhere right so I will
17:14 - copy this token for now and let me open
17:17 - let's say notepad so let me open notepad
17:21 - and then paste this token here so that I
17:25 - can use this later okay
17:28 - so let's go to the repository where we
17:31 - were seeing these git commands and as I
17:34 - mentioned we have already finished first
17:37 - four commands so we can give this
17:40 - command and it says you can give this
17:43 - Command right but instead of giving this
17:46 - command you can give
17:49 - this command to use this token right so
17:54 - we have created this token right and
17:57 - instead of giving
17:59 - git remote ad the command is same git
18:02 - remote add or region right and then
18:05 - https
18:07 - and before
18:09 - github.com you can provide your token so
18:14 - that you don't need to provide any
18:17 - username and password at the time of git
18:20 - push right so just provide the token I'm
18:24 - going to give this command in the
18:26 - description of this video so you can
18:28 - directly copy this so I'm going to give
18:30 - this token and then give your username
18:32 - and the repository name you can see the
18:35 - username and repository name at the top
18:37 - in the URL also or you can also see it
18:41 - here
18:42 - right so this is the username and this
18:46 - is the repository name so let me copy
18:48 - these two things
18:50 - and then I'm going to replace this here
18:54 - so this is my command right https token
18:58 - name at the red github.com forward slash
19:03 - username and the repository name so the
19:06 - only change we need to do here is we
19:09 - need to provide the token name at the
19:11 - rate github.com okay
19:14 - so just uh copy this
19:17 - command and then paste it on the
19:20 - terminal and you need to paste it inside
19:23 - the same folder in which you are working
19:25 - so we are working inside the GS apps
19:29 - folder right so I'm going to paste this
19:32 - command here and there was some error
19:36 - because I copied
19:39 - some foreign characters here so I'm
19:42 - going to remove them
19:43 - and now I'm going to give this Command
19:45 - right which is git remote add origin
19:48 - https token name at the rate github.com
19:51 - so basically what this command is going
19:53 - to do is it's going to
19:56 - um
19:57 - add the remote origin for this project
20:02 - right which is our repository link okay
20:05 - and then you can give the next command
20:08 - which is git push hyphen new origin main
20:12 - okay so you can give this Command right
20:15 - click copy and then paste this here and
20:20 - then
20:21 - press enter which is going to push your
20:23 - code in to GitHub okay so if everything
20:28 - works correctly
20:30 - this branch is created and once you
20:34 - refresh
20:35 - this folder so let me open the next
20:39 - Tab and I will go to the repository once
20:43 - again because
20:44 - [Music]
20:45 - I want to just leave this as it is and
20:50 - then you can see we have created this JS
20:54 - apps
20:55 - repository right so I can click on this
20:59 - and you will see
21:01 - that our test dot JS file is here okay
21:07 - so inside the stash dot JS file
21:11 - I have some JavaScript code which is
21:14 - basically uh starting a very simple
21:17 - localhost web server right
21:20 - so our code is
21:23 - committed and it's there on GitHub right
21:28 - now if you want to change something in
21:31 - your code let's say I have this test dot
21:34 - TS file once again
21:37 - so you can see when I give LS I have
21:40 - this test.ts file and let me open this
21:43 - using code if you have Visual Studio
21:45 - code you can open this in Visual Studio
21:48 - code by just giving this command code
21:51 - space dot which is going to open this
21:54 - folder in Visual Studio code editor
21:57 - right
21:58 - and this is the code which we have
22:01 - committed right so in addition to a
22:04 - hello world let's say I will add some
22:06 - special characters here so now once you
22:10 - change your code
22:12 - you can commit this code once again
22:15 - right so in order to commit this code
22:17 - once again go to the same folder give
22:21 - get status command
22:24 - and you can see it will say you have
22:26 - some uncommitted code so just write git
22:30 - commit hyphen M and then your message so
22:34 - I can just say
22:36 - second
22:37 - commit here and then the name of the
22:40 - file which is test.ts and then press
22:42 - enter
22:43 - and every time you commit the code you
22:47 - need to push that also right so right
22:51 - now you can see
22:53 - the hello world look like this right so
22:56 - once we will commit the code we have
22:59 - changed the code little bit and we have
23:02 - added this these special characters
23:05 - after this hello world so we want to see
23:08 - this on the GitHub repository also right
23:10 - so what we are going to do is we are
23:14 - going to uh
23:16 - Commit This code so we have already
23:18 - committed this code with this comment
23:20 - which is second comment and now we are
23:22 - going to post this code in order to push
23:25 - this code you give this command git push
23:27 - hyphen U origin main okay press enter
23:31 - and then your code is pushed and once
23:34 - again when you will refresh this uh
23:38 - code or this URL so let me refresh this
23:42 - URL
23:44 - and hopefully this change will reflect
23:47 - in the GitHub also
23:51 - so you can see these special characters
23:54 - are added in my code in my test.js file
23:58 - right so this is how you can install and
24:03 - use git and GitHub on your windows 11
24:06 - operating system I hope you enjoyed this
24:08 - video and I will see you in the next
24:10 - video

Cleaned transcript:

hey guys in this video I'm going to show you how you can install git and configure it with GitHub on your windows 11 operating system so let's start with the installation of git so for that just open your favorite browser and search for git and the first link which will appear here will be from git hyphen hcm.com which is the official website so we are going to click on this link and once we are on gitscm.com website you will be able to see this download for Windows button here so I'm going to click on this download for Windows button where you will see few options so let's click on this link you can also see there are some Standalone installers and portable installers we will just click on this link which says click here to download which is going to start the download of this executable file which is a very small file so and once this executable file is downloaded just click on this file I'm going to minimize the browser and here first of all you will see this kind of window which will say do you want to allow this app to make changes on your device I will click on yes here and you can see the setup for git has been started first window will be about the public license so just uh click on the next button here this will be the location where your git will be installed so if you don't have the good reason to change this location just leave it as default and then click on next and then you have this select component window here so you have the option to uh click on this checkbox which will add the additional icon on your desktop and all the other options are there so I'm going to just check this checkbox which says additional icons and leave all the other icons as checked and then click on next and then select start menu folder I'm going to leave it as default and then click on next and then you have choose the default editor by using git so you can see there are lots of editors here right so for now you can choose uh for example Visual Studio code as your default editor or whatever editor you have on your windows 11 operating system you can choose that editor and then click on next and then on the next window you have adjusting the name of the initial Branch so on this window what I generally like is I like to uh choose this option which says override the default Branch name for the new repositories and I generally name my default Branch as main the reason behind this is when you use git with GitHub the default Branch name on git is Main and not the master right so just click on override the default Branch name and then give the name main here and then click on next and then adjusting your path environment you have the option to use git from git bash only you have the option to use git from the command line and also from third party software I will go with the recommended option and then click on next and then you have choosing SSH executable use bundled open SSH and you also have the option to use the external open SSH executable file I will leave it as default and then click on next and then once again leave it as default click on next and then configuring the line ending conversion we are on windows so I will leave this as default once again and then click on next and then configuring the terminal emulator to use with Git bash I will go with the recommended one and then click on next and then you have to choose the default behavior of git pull so I will once again choose the default one and then click on next and then you have get credential manager so choose the credential helper I will choose the get credential manager here which is recommended and then click on next and then enable file system caching click on next here configuring experimental options so you have you can enable the experimental support for sudo consoles and then I mean and also enable experiment builtin file system monitor I will just choose both of them and then click on install which is going to start the installation of git so now as you can see the git setup is finished and you can even launch the git bash using this checkbox I'm going to uncheck this checkbox which says view release notes and then click on finish which is going to launch git bash so you can see git bash is now opened on my Windows operating system I can even go to my start menu and then click on all apps here and then under G I will be able to see get here and when you expand this git option you have this git bash git CMD and you also have git GUI so let me open git Bash from here and let me also open git GUI and let's see how it looks like so you can see there is this kit GUI and you can clone existing repositories here using git GUI open existing repository or create a new repository for now uh I'm going to use the command line tool so let me quit this GUI so now git is working right so let's create some kind of code and then we are going to commit our code so to do that let me open some kind of folder where I have a JavaScript file which I want to commit and then I want to push this JavaScript code to a GitHub repository right so this folder JS apps is on my desktop as you can see and then I have this test dot JS file here so what I am going to do is I'm going to right click here and I can either open terminal in this folder or I can click on show more options and I can click on get bash here so git fake bash is going to be opened inside this folder right so you can see I'm in my desktop and then JS apps folder right so the first thing you need to do here is we need to uh run a command called git init right it's going to initialize the git into this project so just write git init and then press enter which is going to initialize git into your project right and then when you do LS hyphen Al here you will see that there is this dot git uh directory which is created if you see it using folder Explorer you might not be able to see it because it's a hidden folder but on git bash you will be able to see it and now once the git is initialized we can check the git status so just write git status command here and you will see in the output it says untracked files and this is the untracked file I only had one file in my project folder which is test.js and git says that this file is not yet dragged using git right so we need to add this file to git and then commit this file right so to add this just write git add and the file name which is test.js and then press enter and it's going to add this file into git once again run get status command and now you will see this file in green so what this means is we have added the file to get but we need to commit this file also right so once you have added this file to get just write git comment here and then write hyphen M hyphen m is the flag which we use to give any comment right so I can give a comment to my commit for example first commit here and then the file name which is test dot TS and then press enter and once you press enter this file will be committed right now before committing this file you will be able to see uh this error you have to configure git before committing this file and you have to run these two commands right first one is git config user dot email and then second command is git config Global username and give your username right so I'm going to just do that so let me just copy and paste this command on the terminal which is the first command and you can replace the email sample email by your email here right so I can just write x y z for example at the rate gmail.com so I just want to give a sample email ID here you might want to give your real email ID in this case and the second command is git config hyphen hyphen Global user dot name so give the username here so I'm going to give the username you can give any username here and then press enter and once you are done you can once again run this git commit hyphen m first commit test dot JS in my case it can be any file in your case so let me run this command and this time it's going to be successful right so you can see our file is committed let me clear the terminal here and now I will write git status once again and then it says nothing to commit and our working tree is clean right so we have committed our code and you can also see that on git bash you will see the branch name in front of your folder name and right now the branch name is main here right and git has created this main default Branch for us so now we are done with the git part let's go to GitHub now so you can just search for GitHub and then click on the first link here and if you don't have the GitHub account you can create one very simply and once you are inside your GitHub account it's going to look like this right so in order to create a new repository you can click on this plus sign and then click on new repository and then give any name to your repository now what I will suggest is you can give the same name as your project name so in my case my project folder name is JS apps right so I can copy this name and then paste it as the repository name it's not necessary but what I generally do is I generally give the same name to my repository as my project name on my local system right and then you can add the description my first app for example so this will be the description of your Repository you can also add the readme file you can also add git ignore files and license files for now I don't want to do anything but you might want to add these files in your real projects right and then click on create Repository and our repository is created now right so now if you see closely here uh git Hub is going to give us some kind of procedure how you can push your code on this repository so if you see here we have already ran the git init command we have already ran the get add command to uh add the test.js file which was the file in our project right we have already ran the git commit command with hyphen M right we are already on the main branch right so you can see when I go to git uh bash terminal the branch name is highlighted here which is main right so first four command we have already uh done now the next command is git remote add or region this is the thing you need to do now right but before doing this I will recommend you to create a GitHub token because you will require wire a GitHub token in order to push your code into your repository so what I will recommend first is just go at the top here and then let me open this uh GitHub website on the next tab so just go at the top and then click on your profile and then click on settings here and once you are on settings just go at the very bottom on the left hand side where you will see developer settings I'm going to click on that and once I'm inside the developer settings I can click on personal access token here and then I'm going to create a classic token right so here I can click on generate new token and then I'm going to click on generate New Classic and I can give any name to my token so my first token for example and then you can also choose the expiration date for your token so I can choose the custom date and I want to expire this let's say after two days okay so today is 24th I will expire this token after two days because I am just creating this for the demonstration purposes in your case you might want to choose 90 days or even you can choose no expiration which means that your token will never expire so you can use it forever right and then just check all these check boxes here so so you are allowing the user if he uses this token create or delete your repository right into the packages uh and all the other privileges right so admin privileges I'm going to choose each and every uh option here for this token so let me just choose all these and once I'm done I can create this token so I'm going to click on generate token here and this token is generated now you need to keep in mind that this token you can only see once right once you close this window you will not be able to see it again so you it's a good idea to backup this token somewhere right so I will copy this token for now and let me open let's say notepad so let me open notepad and then paste this token here so that I can use this later okay so let's go to the repository where we were seeing these git commands and as I mentioned we have already finished first four commands so we can give this command and it says you can give this Command right but instead of giving this command you can give this command to use this token right so we have created this token right and instead of giving git remote ad the command is same git remote add or region right and then https and before github.com you can provide your token so that you don't need to provide any username and password at the time of git push right so just provide the token I'm going to give this command in the description of this video so you can directly copy this so I'm going to give this token and then give your username and the repository name you can see the username and repository name at the top in the URL also or you can also see it here right so this is the username and this is the repository name so let me copy these two things and then I'm going to replace this here so this is my command right https token name at the red github.com forward slash username and the repository name so the only change we need to do here is we need to provide the token name at the rate github.com okay so just uh copy this command and then paste it on the terminal and you need to paste it inside the same folder in which you are working so we are working inside the GS apps folder right so I'm going to paste this command here and there was some error because I copied some foreign characters here so I'm going to remove them and now I'm going to give this Command right which is git remote add origin https token name at the rate github.com so basically what this command is going to do is it's going to um add the remote origin for this project right which is our repository link okay and then you can give the next command which is git push hyphen new origin main okay so you can give this Command right click copy and then paste this here and then press enter which is going to push your code in to GitHub okay so if everything works correctly this branch is created and once you refresh this folder so let me open the next Tab and I will go to the repository once again because I want to just leave this as it is and then you can see we have created this JS apps repository right so I can click on this and you will see that our test dot JS file is here okay so inside the stash dot JS file I have some JavaScript code which is basically uh starting a very simple localhost web server right so our code is committed and it's there on GitHub right now if you want to change something in your code let's say I have this test dot TS file once again so you can see when I give LS I have this test.ts file and let me open this using code if you have Visual Studio code you can open this in Visual Studio code by just giving this command code space dot which is going to open this folder in Visual Studio code editor right and this is the code which we have committed right so in addition to a hello world let's say I will add some special characters here so now once you change your code you can commit this code once again right so in order to commit this code once again go to the same folder give get status command and you can see it will say you have some uncommitted code so just write git commit hyphen M and then your message so I can just say second commit here and then the name of the file which is test.ts and then press enter and every time you commit the code you need to push that also right so right now you can see the hello world look like this right so once we will commit the code we have changed the code little bit and we have added this these special characters after this hello world so we want to see this on the GitHub repository also right so what we are going to do is we are going to uh Commit This code so we have already committed this code with this comment which is second comment and now we are going to post this code in order to push this code you give this command git push hyphen U origin main okay press enter and then your code is pushed and once again when you will refresh this uh code or this URL so let me refresh this URL and hopefully this change will reflect in the GitHub also so you can see these special characters are added in my code in my test.js file right so this is how you can install and use git and GitHub on your windows 11 operating system I hope you enjoyed this video and I will see you in the next video
