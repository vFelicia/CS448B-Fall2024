With timestamps:

00:00 - so first of all what is docker
00:03 - so docker is an open source project
00:07 - that automates the deployment of
00:09 - applications inside
00:11 - software containers by providing an
00:13 - additional layer of abstraction and
00:15 - automation
00:17 - of operating system level virtualization
00:20 - on
00:21 - linux so that is the definition which is
00:24 - available
00:25 - on wikipedia but really what
00:28 - is docker so docker provides a uniformed
00:32 - wrapper around a software package
00:35 - and this wrapper is called docker
00:38 - container which you can
00:39 - ship or build and inside these
00:42 - containers you can run
00:43 - any app anywhere now docker containers
00:47 - are similar to shipping containers now
00:50 - as you
00:51 - all know in the shipping container
00:54 - the container size is always same
00:58 - regardless of the content inside
01:02 - the container so these container can fit
01:05 - on all trucks or ships or
01:09 - trains regardless of the content
01:12 - inside the container in a same way
01:15 - docker packages a software into
01:19 - standardized unit for development
01:22 - shipment and deployment so let me give
01:26 - you
01:27 - a real world example so let's say i
01:30 - developed
01:31 - a node.js application which depends upon
01:34 - some version of node.js and it
01:37 - uses some database and
01:41 - it's dependent on some shared library
01:44 - let's say
01:45 - and i want to give this software to
01:49 - the devops guy or let's say to my
01:52 - colleague
01:52 - to run it on his computer
01:56 - or on the qa system or on the cloud by
01:59 - devops
02:00 - or in the production system so i don't
02:03 - really care
02:04 - where it runs i just care that
02:07 - it should run when somebody tries to run
02:10 - my software now if docker is not
02:14 - present or any containerized system is
02:17 - not present
02:18 - the normal procedure will be that i give
02:22 - my software to my colleague or the
02:25 - devops
02:26 - guys and he has to install all the
02:29 - dependencies
02:30 - and for example node.js version and
02:34 - the database system exactly like a
02:38 - system
02:38 - on which i have tested my software
02:42 - now if you will just use docker to
02:44 - containerize your system
02:45 - you just need to package your system
02:49 - into a docker container and you can just
02:53 - give this docker container to your
02:56 - colleague
02:57 - or the devops guys and
03:00 - he will just run this docker container
03:03 - on the cloud or a qa machine
03:07 - or any other production system wherever
03:10 - he wants to run it
03:11 - and he can just run your software
03:14 - without
03:15 - worrying about all the dependencies
03:18 - or the environment setup which your
03:21 - software
03:22 - depends upon so nowadays docker is
03:25 - becoming
03:26 - more or less a standard for the
03:28 - containerizing systems
03:30 - and you can find the docker containers
03:32 - everywhere
03:33 - on linux operating system or windows
03:36 - operating system
03:38 - or in the data center cloud serverless
03:41 - application and so on
03:43 - now let's compare docker container
03:45 - versus
03:46 - virtual machines so containers and
03:49 - virtual machine
03:50 - have similar resource isolation
03:53 - and allocation benefits but docker
03:56 - containers
03:57 - and virtual machine functions
03:59 - differently
04:00 - because containers virtualize the
04:03 - operating system
04:04 - instead of hardware and containers are
04:07 - more
04:07 - portable and efficient so when you talk
04:10 - about virtual machines
04:11 - you can see this diagram on the right
04:14 - hand side
04:15 - so virtual machines or vms are an
04:18 - abstraction
04:19 - of physical hardware turning one server
04:22 - into many servers and it is made
04:25 - possible by the hypervisor which
04:29 - allows virtual machines to run on a
04:32 - single machine
04:34 - so each virtual machine or vm includes
04:37 - full copy of operating system so let's
04:40 - say this is your server
04:42 - and on this server you have your
04:45 - hypervisor
04:46 - and on top of your hypervisor you can
04:50 - run different virtual machines so this
04:53 - is virtual machine one
04:54 - virtual machine 2 virtual machine 3
04:58 - which have this operating system 1
05:02 - operating system 2 and operating system
05:05 - 3
05:05 - or you can have the similar operating
05:07 - system in
05:09 - all the three virtual machine let's say
05:11 - now the important thing to note here is
05:14 - each virtual machine includes full
05:17 - copy of operating system the application
05:20 - necessary binaries
05:22 - and the libraries which takes up to
05:25 - tens of gb's of memory
05:29 - and that is the reason that virtual
05:31 - machines
05:32 - can be slower now on the other hand in
05:35 - the container
05:36 - and you can see on the left hand side
05:40 - this diagram so containers are
05:43 - an abstraction on the app layer
05:46 - that packages the code and dependencies
05:49 - together
05:51 - so you have your server and then you
05:54 - have your
05:54 - host operating system and then on top of
05:58 - your host operating system
06:00 - you can run your docker engine
06:04 - and the containers are the abstraction
06:07 - at the app layer that packages the code
06:09 - and dependencies together
06:11 - so multiple containers can run on the
06:14 - same machine
06:16 - and share the same os
06:19 - kernel with other containers but
06:22 - each container runs as isolated
06:26 - process in the user space as a result
06:30 - container takes less space than virtual
06:32 - machine and
06:34 - usually container images typically takes
06:37 - tens
06:37 - of megabytes in size in comparison to
06:41 - the virtual machine which
06:43 - which can take up to let's say several
06:45 - gbs
06:46 - of memory also containers can handle
06:49 - more application and require fewer
06:52 - virtual machines
06:54 - and operating system now when we talk
06:56 - about docker containers
06:58 - versus virtual machines the idea is to
07:01 - use
07:02 - containers and virtual machines together
07:05 - so the containers
07:06 - and the virtual machines can be used
07:08 - together which provides
07:10 - a great deal of flexibility in deploying
07:13 - and managing your apps now let's talk
07:16 - about the docker architecture
07:19 - so whenever you will install docker
07:22 - the docker engine will be installed on
07:25 - your system
07:26 - so docker engine will contain docker
07:29 - cli docker daemon and
07:33 - the docker registry now there is
07:36 - something called
07:37 - docker hub which is a cloud based
07:40 - service where you can share your
07:42 - applications
07:43 - automate the workflow and assemble
07:46 - apps for the components now when you
07:50 - talk about
07:50 - docker two things are really important
07:54 - and these are docker images and docker
07:57 - containers
07:59 - so first of all what is docker container
08:02 - so a container is a standard unit of
08:05 - software
08:05 - that packages up your code and it's all
08:09 - dependencies so the application runs
08:12 - quickly and reliably from one
08:15 - environment
08:16 - to the other environment now when you
08:19 - create your docker container which is
08:21 - essentially
08:22 - a unit of your software
08:25 - it can run everywhere regardless of the
08:28 - kernel version
08:29 - regardless of the host distro
08:32 - the only condition is that the container
08:36 - and the host architecture must match
08:39 - and you can run anything inside your
08:41 - containerized
08:42 - solution so if it can run on your host
08:46 - then it can run on your container that
08:49 - is
08:49 - if it runs on a linux kernel
08:53 - it can run now let's talk about docker
08:55 - container images
08:57 - so a docker container image is a
09:00 - lightweight
09:01 - standalone executable package of
09:04 - software
09:05 - that includes everything needed to run
09:08 - the application
09:09 - that is code your runtime your system
09:13 - tools
09:14 - and the system libraries and the
09:16 - settings
09:17 - so the container images becomes
09:20 - container
09:21 - at run time and in case of docker
09:24 - containers
09:25 - images becomes containers when they run
09:28 - on docker engine so images
09:32 - turns into container when these images
09:36 - runs on your docker engine now it's
09:39 - important to note
09:40 - that your docker image is not
09:44 - a virtual hard disk or vhd it's not a
09:47 - file system
09:49 - it uses union file system and
09:52 - it's only a read only layer
09:55 - also the docker images doesn't have any
09:59 - state so when your docker images runs as
10:02 - docker container inside the docker
10:04 - engine
10:05 - and when you stop these running
10:08 - containers
10:09 - these images will not have or will not
10:12 - save any state so they are stateless
10:16 - so basically an image is a tar file
10:19 - which has a hierarchy and an arbitrary
10:24 - depth and that's how it fits into your
10:27 - docker registry for example docker hub
10:29 - or any private docker registry
10:33 - so this was a brief introduction about
10:35 - docker in this video we are going to see
10:37 - how we can download and install docker
10:40 - on our windows 10 operating system
10:43 - so let's get started first of all open
10:46 - your favorite browser and search for
10:48 - docker
10:49 - but before installing docker desktop
10:52 - application
10:52 - on our windows operating system let's
10:55 - see
10:55 - what are the system requirements for
10:58 - installing this application
11:00 - so before going to the docker.com
11:03 - website
11:04 - i'm going to search on my browser
11:07 - install
11:07 - docker windows which will open this link
11:11 - from
11:13 - dot docs.docker.com forward slash docker
11:15 - for windows
11:16 - and this link i'm going to put in the
11:19 - description of the video also so you can
11:21 - also see all the description here
11:25 - and from here you can click this button
11:28 - which is going to redirect you to the
11:31 - downloads page
11:33 - but before that let's see what are the
11:35 - system requirements
11:36 - for downloading this application so as
11:39 - you can see here
11:40 - for installing docker on your windows
11:42 - operating system
11:44 - you need to have at least windows 10
11:47 - 64-bit
11:48 - pro enterprise or education version
11:51 - and hyper-v and containers windows
11:54 - feature must be enabled and some other
11:58 - requirements
11:59 - are 64-bit processor with second level
12:02 - address translation 4gb system ram
12:06 - and bios level hardware virtualization
12:08 - system must be
12:09 - enabled in bios settings
12:12 - so if you don't have a windows 10 64-bit
12:15 - pro version or enterprise or education
12:18 - version
12:19 - then also you can install docker on
12:22 - your windows operating system but the
12:24 - procedure will be little
12:26 - different so for that you can go to
12:30 - suspended products and tools and then
12:33 - go to this tool which is called docker
12:37 - toolbox which is now
12:39 - a legacy for legacy operating systems
12:43 - so here you can just click on the
12:45 - install toolbox on windows
12:48 - button i'm going to just open this link
12:50 - in the next
12:51 - tab and here you can
12:54 - follow the procedure of installing
12:56 - docker
12:57 - toolbox on your other windows
13:00 - operating system for example if you have
13:03 - windows 10
13:04 - home version or if you have windows
13:07 - 8 or windows 7 then you can install
13:11 - docker toolbox so first of all how to
13:13 - check
13:14 - which windows 10 version you have if you
13:18 - have windows 10 operating system running
13:21 - so for that what you can do is you can
13:24 - just right click on this windows button
13:26 - and then
13:27 - click on run and then just type
13:31 - win ver w i n v e
13:34 - r and then click ok which is going to
13:37 - open this kind of window and here you
13:40 - can find
13:41 - the windows 10 version you are running
13:45 - so as you can see here
13:46 - i'm running windows 10 pro version
13:50 - also the second requirement was let's
13:53 - see the second requirement
13:54 - which is hyper-v and containers windows
13:57 - features
13:58 - must be enabled so how to verify
14:02 - that so to check that the simple
14:04 - procedure is just
14:06 - right click on your toolbar windows
14:09 - toolbar
14:10 - and then click on task manager
14:14 - so once this task manager opens you just
14:17 - need
14:18 - to go to the performance section and
14:21 - then
14:21 - you need to verify this section which is
14:24 - called virtualization
14:26 - it needs to be enabled by default
14:30 - it is enabled on your windows 10
14:33 - operating system so you don't need to do
14:35 - any extra thing unless you have manually
14:39 - disabled this feature so now i'm going
14:42 - to click this button which says
14:44 - download from docker hub and here
14:47 - you will see this web page first so
14:50 - first of all
14:51 - you need to create a docker id if you
14:55 - haven't already have a docker id you can
14:58 - just
14:58 - click on this sign up link here which
15:01 - will open this kind of web page
15:03 - and here you can create your docker
15:06 - account
15:07 - which requires a docker id email address
15:10 - and
15:10 - password and you need to just agree
15:13 - these terms and conditions so once you
15:16 - have your docker id which i already have
15:19 - i'm going to sign into my docker account
15:23 - which is going to redirect me to this
15:25 - page
15:26 - which is the downloads page and from
15:29 - here i can
15:30 - just download this docker desktop
15:32 - application
15:33 - for windows also if you have searched
15:37 - for docker and if you have opened this
15:40 - main website from docker which is
15:43 - docker.com
15:44 - you can just click on get started
15:48 - and then click on download desktop for
15:50 - mac
15:51 - and windows which will also redirect you
15:54 - to the same page and you can see welcome
15:58 - my docker id is shown here so in order
16:02 - to download
16:02 - this desktop application you need to
16:05 - have
16:06 - your docker id you and you need to log
16:09 - in
16:09 - to the docker website in order to
16:11 - download
16:12 - this executable file so let's just
16:15 - click on this button which is going to
16:17 - start the
16:19 - download of this executable file i have
16:22 - already
16:22 - downloaded this executable file so i'm
16:25 - going to cancel this
16:26 - installation and you can see on my
16:30 - downloads folder i already
16:31 - have this docker desktop installer which
16:34 - is around
16:35 - megabytes so i'm going to just double
16:37 - click on this
16:39 - executable file and i'm going to just
16:43 - start the installation so i'm going to
16:45 - minimize this browser
16:49 - and you can see the installation has
16:51 - been started
16:52 - so the first window here is the
16:54 - configuration so i'm going to just
16:56 - leave everything as default and
16:59 - then click ok which is going to unpack
17:03 - all the files
17:04 - the installation procedure is
17:06 - straightforward i guess
17:07 - you just need to click some buttons and
17:10 - docker will be installed
17:12 - out of the box and now you can see after
17:15 - few seconds
17:16 - i can see this docker desktop icon
17:19 - on my desktop and you can see this
17:22 - message which says
17:23 - installation succeeded so i'm going to
17:26 - just
17:26 - uh click close and log out button
17:30 - which will log me out of windows
17:33 - 10 operating system so i need to log in
17:35 - once again
17:37 - so now i have logged in to my windows 10
17:40 - operating system once again
17:42 - and immediately after logging into my
17:45 - windows 10 operating system
17:47 - i can see this window which says hyper-v
17:50 - and container features
17:52 - are not enabled do you want to enable
17:55 - them for docker to be able to work
17:57 - properly
17:58 - i will say ok which is going to enable
18:02 - all these features i thought they are
18:04 - already enabled
18:05 - somehow but according to docker
18:09 - it wants to enable them once again let's
18:12 - say
18:12 - and now i will click on this docker
18:15 - desktop
18:15 - icon from here which is going to start
18:18 - the docker
18:19 - desktop application and i can see this
18:22 - message
18:23 - which is hyper-v service vmm is not
18:25 - available
18:26 - if you have enabled hyper-v
18:30 - just restart your computer now
18:33 - so i'm going to restart my computer and
18:36 - i will then try to just start docker
18:39 - application once again
18:41 - so now i'm going to click on this docker
18:43 - icon once again
18:45 - and you will see on your tool bar here
18:48 - you can see docker is starting
18:51 - so it will take some time to start
18:54 - docker
18:57 - and i can see this message which says
18:59 - docker desktop is running
19:01 - so i can open powershell and start
19:05 - hacking with docker or docker compose
19:09 - also when you click on this docker icon
19:11 - here you can see bunch of
19:13 - options here for the documentation
19:16 - docker hub switch to windows containers
19:20 - and all other settings here
19:23 - so one thing i will recommend here
19:26 - is to sign in with your
19:29 - docker credentials which you have
19:31 - already created
19:32 - and i'm going to sign in with my docker
19:34 - credentials
19:36 - and after signing in you will be able to
19:39 - see
19:40 - your docker id and the sign out option
19:44 - so let's get started with docker so
19:47 - first of all you can
19:48 - start the command prompt i'm going to
19:50 - just type cmd
19:52 - which is going to show me this option
19:54 - which is
19:55 - command prompt and here you can just
19:59 - type docker
20:02 - hyphen version or hyphen v
20:05 - will also work and you can see the
20:07 - version which we have installed
20:09 - now let's also check if docker is
20:12 - working with
20:13 - the docker hub perfectly fine or not
20:16 - to test this you can just run
20:19 - docker run hello
20:23 - hyphen world okay so just run this
20:26 - command this is
20:27 - the most popular command to test
20:30 - whether docker is running or not or it's
20:34 - able to fetch all the images from docker
20:36 - hub or not
20:38 - so i'm going to just run this command
20:40 - and when i run this command you can see
20:42 - this kind of
20:43 - output so you can see on the first line
20:46 - it says unable to find image
20:48 - hello world latest locally so it didn't
20:51 - find
20:52 - this image locally so it has pulled
20:55 - this image from the docker hub
20:58 - repository so
20:59 - you can see in the next line latest
21:02 - pulling from
21:03 - library hello world and once the pull is
21:07 - complete
21:08 - and you can see the status downloaded
21:11 - the new image
21:12 - hello world and then the latest version
21:15 - of hello world
21:17 - and then it says hello from docker that
21:20 - means
21:20 - everything is working fine with your
21:22 - docker and it's able to run your docker
21:25 - images
21:26 - and this is the first docker image
21:29 - we have run which ran successfully
21:32 - few more commands i can show you here
21:35 - for example you can
21:36 - also say docker
21:40 - images and then press enter
21:44 - and you will see the list of all the
21:46 - images you have
21:48 - on your system so we have just
21:50 - downloaded
21:51 - this docker image which is hello world
21:54 - image
21:54 - so this is how you can download and
21:56 - install docker
21:58 - on your windows 10 operating system in
22:01 - this video we are going to see
22:02 - how we can download and install docker
22:05 - on our mac
22:06 - operating system so let's get started so
22:09 - first of all open your favorite browser
22:11 - and search for docker
22:13 - and the first link which will appear
22:14 - here will be from docker.com so we are
22:16 - going to click
22:17 - into this link and then
22:20 - straight away you can see this button
22:23 - gets started or this button gets started
22:25 - so
22:26 - you can click on one of these buttons
22:29 - and then you will be able to see
22:32 - this button which says download docker
22:35 - for
22:36 - mac and windows so i'm going to just
22:38 - click on this button
22:40 - which will be redirect me to the docker
22:42 - hub
22:43 - website now in order to download the
22:46 - docker binary
22:47 - you need to have a docker account
22:50 - so if you haven't created a docker
22:53 - account
22:54 - you can just click on this sign up link
22:56 - here
22:57 - and then just fill your basic details
23:00 - like docker id email and password
23:03 - and create your docker id and docker
23:06 - account and once you have your docker id
23:09 - and docker account you can just log in
23:13 - with your docker account here on this
23:16 - website so i'm going to just
23:18 - give my docker credentials first
23:21 - is the docker id and then second is
23:24 - the password and now
23:28 - i'm going to just sign into this docker
23:30 - hub
23:31 - website which will allow me to download
23:33 - this
23:34 - docker desktop for mac so i'm going to
23:37 - just click on this download
23:39 - link here which will start the
23:42 - download of the docker now once this
23:45 - docker dot dmg file is downloaded i'm
23:48 - going to just click on this docker.dmg
23:51 - file
23:52 - and i'm going to minimize the browser
23:55 - and you can see this dmg file is opening
23:58 - first of all
23:59 - and once this window opens you just need
24:02 - to drag
24:03 - this docker icon to your applications
24:06 - so it's that simple to install a docker
24:09 - on your mac operating system so once
24:12 - docker is copied into your applications
24:15 - folder
24:16 - you can close this window and open
24:19 - docker from here or you can just
24:23 - go to the launchpad and you will be able
24:26 - to see this docker icon here so you can
24:28 - just click on the docker icon
24:30 - which is going to start the docker on
24:33 - your
24:33 - mac operating system so just wait for
24:36 - few seconds
24:37 - and now you will see this message which
24:39 - says docker is
24:41 - an app downloaded from internet are you
24:44 - sure you want to open it so i'm going to
24:46 - just say
24:47 - open and in the next step i can see this
24:50 - window
24:50 - which asks me to give some privileged
24:54 - access so i'm going to just click on ok
24:57 - and then i'm going to give my max
24:59 - password
25:02 - and now you can see docker desktop is
25:05 - starting
25:06 - on my mac operating system and your you
25:09 - can see
25:09 - this docker icon on top of
25:13 - your mac desktop so i will wait for
25:17 - this docker desktop to start and once
25:20 - this docker's desktop starts
25:22 - we will start testing if everything is
25:26 - working fine
25:27 - in the meantime i can also give my
25:30 - docker id
25:31 - and password to login to
25:35 - the docker using this docker desktop
25:39 - application so let me give my
25:42 - docker id and the password and then i'm
25:45 - going to just say
25:46 - login and you can see i am logged in
25:49 - with my docker id
25:51 - into this docker desktop application
25:54 - and now i can see this message which
25:56 - says docker desktop is now
25:58 - up and running so what we are going to
26:01 - do next
26:01 - is we are going to just uh open the
26:04 - terminal so i'm going to
26:06 - just search for
26:09 - terminal and then i'm going to open the
26:11 - terminal
26:12 - and once my terminal is open i can just
26:16 - check the docker version by just giving
26:18 - this
26:19 - docker version command and then press
26:23 - enter and i can see this long message
26:26 - and here the version information is
26:30 - displayed and then the api version
26:32 - is displayed and all the other
26:35 - information about
26:36 - my docker is displayed here
26:40 - also when i give docker info command so
26:44 - let me just
26:45 - clear this terminal once again and then
26:48 - i'm going to just give
26:50 - docker info command and it's going to
26:53 - give me bunch of
26:54 - information about docker and docker
26:56 - engine
26:57 - and the status of docker engine
27:00 - let me clear this terminal once again
27:04 - and now i'm going to test a docker
27:07 - by giving this command so i'm going to
27:09 - just say
27:11 - docker run hello
27:15 - world and then press enter which is
27:18 - going to
27:19 - fetch this hello world image from docker
27:22 - hub
27:23 - if it's not already present on my mac
27:27 - locally and once this image is pulled
27:31 - it's going to just display hello from
27:34 - docker that means
27:35 - everything is working fine and you can
27:38 - start working
27:39 - with docker now one more command you can
27:42 - use here
27:42 - is this command which is docker
27:46 - images which is going to show you the
27:49 - list of images
27:50 - which are present on your
27:54 - mac operating system and you can see i
27:56 - only have one image
27:58 - right now which is hello world which i
28:01 - have
28:02 - fetched just a few seconds ago and you
28:05 - can see this docker icon here
28:08 - so when you click on this docker icon
28:10 - you can
28:11 - do lots of thing for example if you want
28:13 - to restart your
28:15 - docker then you can just click on this
28:18 - if you want to quick quit the docker
28:21 - desktop then you can
28:22 - click here and there are lots of
28:25 - settings and updates and preferences
28:27 - settings you can do from this
28:31 - docker desktop icon and there are lots
28:35 - of other settings
28:36 - you can do from this window or this menu
28:40 - from here so this is how you can
28:43 - download and install docker
28:45 - on your mac operating system in this
28:48 - video we are going to see
28:49 - how we can download and install docker
28:52 - on our
28:52 - ubuntu operating system so let's get
28:56 - started so
28:57 - what i'm going to do is i'm going to
28:58 - open my
29:00 - favorite browser and then i'm going to
29:03 - search here
29:04 - docker install ubuntu and the first link
29:08 - which will appear here will be
29:10 - from docs docs.docker.com
29:13 - i'm going to put the link in the
29:15 - description also
29:17 - so i'm going to click this link which is
29:19 - the official documentation
29:21 - of installing docker engine community
29:25 - edition on your ubuntu operating system
29:29 - so here you can see the prerequisite of
29:32 - installing docker on your ubuntu
29:35 - operating system
29:36 - so you can see the os requirements and
29:38 - right now i have
29:40 - this version which is 18.04 lts
29:43 - version and if you have the older
29:47 - version of
29:47 - docker or docker io or docker engine
29:51 - installed
29:52 - you can use this command to uninstall
29:55 - previous versions of docker now to
29:59 - install docker you can just scroll a
30:02 - little bit
30:03 - down and they have the very good
30:06 - documentation
30:07 - of installing docker on your ubuntu
30:09 - operating system
30:10 - so we are going to just copy these
30:12 - commands and paste it on our terminal
30:15 - and we will be good to go so the first
30:18 - command is sudo apt-get
30:20 - update so i'm going to just copy this
30:22 - command and i'm going to just
30:24 - open my terminal here and then just
30:28 - paste this command and then give my
30:30 - ubuntu's password and then
30:32 - just press enter it's going to update
30:36 - all the repositories and then
30:39 - i'm going to just copy the second
30:42 - command
30:43 - in a meanwhile so this is the second
30:45 - command and in the second command we
30:47 - install
30:48 - the packages to allow the apt to use the
30:52 - repository over
30:53 - https so let's just copy
30:56 - this command and go to our terminal and
30:59 - then
31:00 - let me just clear the terminal and now
31:03 - i'm going to just
31:04 - paste this command and then press enter
31:07 - which is going to start
31:09 - the installation i'm going to press y
31:12 - and then press enter and in the meantime
31:15 - we are going to
31:17 - copy the third command which is to add
31:19 - docker's official gpg
31:21 - key so for that you need to have
31:24 - curl and curl we are installing
31:28 - using the second command so
31:31 - when the second command is finished you
31:33 - will have curl on your system
31:35 - and then we can just give the third
31:39 - command
31:40 - so hopefully that is complete so let's
31:43 - clear
31:44 - the terminal once again and then
31:47 - paste the third command
31:51 - and it's okay so we will move
31:54 - to the next command which is to verify
31:57 - that you now have the key with the
32:00 - fingerprints
32:01 - so i'm going to just copy this and then
32:05 - paste it here and verify this and you
32:08 - will see the similar result which
32:11 - is also shown here when you give
32:14 - this command so now we will move to the
32:17 - next command
32:18 - which is to install the docker
32:20 - repository
32:21 - so for ubuntu you need the first option
32:24 - here which is x
32:26 - 8664. so i'm going to just copy this
32:29 - command once again
32:31 - and then go to the terminal clear
32:34 - this terminal and then paste this
32:37 - command and then press
32:38 - enter which is going to install the
32:41 - docker repository
32:43 - and then in the next step we are going
32:46 - to
32:46 - update the repositories once again
32:49 - before installing docker so here you can
32:52 - see the next command which is to update
32:55 - the repositories
32:56 - again and then we are
32:59 - going to just install the docker so
33:02 - after update
33:03 - we are going to install the latest
33:06 - version of docker engine which is the
33:08 - community version
33:10 - so for that we just need to give this
33:12 - command
33:13 - which is going to install docker ce
33:17 - and docker cecli and containered
33:21 - dot io so i'm going to just copy this
33:24 - last command
33:25 - and then paste it to the terminal so
33:27 - clear the terminal
33:28 - just paste this command and then just
33:32 - wait for the installation to complete so
33:34 - it's that easy to install
33:36 - docker community edition on
33:39 - your ubuntu operating system
33:42 - and if you want to install a specific
33:45 - version
33:46 - of these packages you can
33:49 - give these commands so when you give
33:52 - this command apt
33:53 - cache medicine docker minus ce
33:57 - you will see a different version of
33:59 - docker
34:00 - which are available for your ubuntu
34:02 - operating system
34:04 - so from here you just need to take the
34:06 - version
34:07 - and then replace this placeholder for
34:10 - the version string
34:11 - with the actual version of whatever
34:14 - tool you want to install so for example
34:16 - if you want to
34:18 - install the version of docker ce
34:22 - for example we need the latest version
34:24 - of uh
34:25 - the docker ce then you can just copy
34:28 - this
34:29 - and then just replace this placeholder
34:32 - string by this string
34:36 - okay same you can do for the docker
34:39 - cecli
34:40 - so once this command is finished i'm
34:42 - going to once again clear the terminal
34:45 - and we are going to run this command
34:47 - which is sudo docker run
34:49 - hello world in order to test whether
34:52 - everything is working fine or not
34:54 - and here i'm going to just write sudo
34:58 - docker run hello
35:01 - hyphen world and then press enter
35:05 - and i'm going to give my ubuntu's
35:07 - password and you can see
35:09 - when you run this command it prints
35:11 - hello from docker
35:13 - so first of all what happens is because
35:16 - we are running this docker command for
35:18 - the first time
35:19 - it's going to find the docker locally
35:21 - and if it's not
35:22 - found then it's going to pull your
35:26 - docker image from the docker hub and
35:29 - then
35:30 - execute this hello world image which is
35:33 - going to print
35:33 - this kind of output so if you see this
35:37 - kind of output that means docker is
35:39 - running on your system and also you can
35:43 - check the docker images now so you can
35:46 - just
35:46 - give this command sudo
35:50 - docker which is going to list out all
35:53 - the
35:53 - docker images you have on your ubuntu
35:56 - operating system
35:58 - so that's how you can install docker on
36:01 - your ubuntu operating system
36:04 - in this video we will talk about how
36:06 - does docker works
36:08 - and we will see some commands related to
36:10 - docker and docker
36:11 - images so as i have told you
36:14 - in the earlier videos also you can build
36:17 - your docker images
36:18 - that holds your applications using
36:21 - docker files
36:23 - and then you can create your docker
36:25 - containers
36:26 - from those docker images
36:29 - to run your applications and then
36:33 - you can share your docker images via
36:36 - docker hub or via your private
36:40 - registry now if you want to see this
36:43 - docker flow
36:44 - in the form of a diagram you can
36:48 - see this diagram here so you can create
36:51 - a docker file which we are going to see
36:53 - how we can create a docker file
36:56 - in the later videos so docker file
36:59 - is a file from which you can build
37:03 - your applications into docker images
37:07 - so what happens is you pull some images
37:11 - which are already there on the docker
37:13 - hub
37:14 - and you use those images with
37:18 - your application and you write
37:21 - all that uh code
37:24 - or that script inside your docker file
37:27 - so how will
37:28 - your application run inside
37:31 - a container you write everything in a
37:34 - docker file
37:36 - and then you build your docker file
37:39 - which will create a docker image
37:42 - and when you run your docker image it
37:45 - will be
37:46 - converted to a docker container now
37:50 - let's see
37:50 - some commands related to docker
37:53 - so the first command which i want to
37:55 - show you is
37:57 - the docker search command so you just
37:59 - write
38:00 - docker search and then you give your
38:03 - options for example whatever
38:06 - image you want to fetch
38:10 - from your docker hub you can
38:13 - just write that image name for example i
38:17 - just write ubuntu here
38:20 - so you can search all the images
38:24 - which are there related to ubuntu
38:27 - on docker hub using this command so
38:30 - docker search
38:30 - ubuntu so when you give docker search
38:34 - ubuntu you will see this kind of result
38:37 - in the form of
38:38 - a table and the first column here is
38:42 - the name the second column here is the
38:46 - description
38:47 - third is the number of stars and if
38:50 - the image have more number of stars
38:53 - then it's more popular also you have the
38:57 - column
38:57 - for official so if you see
39:02 - ok under official for a particular
39:06 - image so for example this first image
39:09 - with the name ubuntu is the official
39:11 - image
39:12 - on docker hub and you can also see
39:15 - some description here so clearly uh this
39:18 - first
39:19 - image which is an official image also is
39:22 - the most popular image
39:24 - on docker hub about ubuntu
39:28 - now let's see some options which are
39:30 - related to docker search so i'm going to
39:32 - just write docker
39:34 - search here and then i can give the
39:37 - filter option which we use to filter
39:41 - our results so i'm going to just write a
39:43 - filter here
39:45 - so let's say we want to filter our
39:47 - result on the basis of stars
39:49 - an image on the docker hub
39:53 - so i can just write stars here
39:56 - is equal to 3 and then the name of an
40:00 - image i'm searching for so for example
40:02 - i'm
40:02 - searching for ubuntu here so i will just
40:05 - write ubuntu
40:06 - and this example will display the images
40:10 - with the name ubuntu and which have
40:14 - at least three stars i'm going to just
40:16 - press enter
40:17 - so you can see all the result of the
40:20 - images which have
40:21 - at least three stars now if you
40:24 - give here let's say number of star is
40:27 - equal to
40:28 - 100 so it's going to search for all the
40:32 - images
40:33 - which have at least 100 stars
40:36 - now if you want to give more than one
40:38 - filter you can
40:39 - add this filter option once again
40:43 - so you can just write hyphen hyphen
40:46 - filter and then the next filter
40:49 - so the first filter we have here is for
40:53 - the stars and the second filter i have
40:57 - added here
40:58 - is for the official image
41:01 - so i just want all the images
41:04 - which are official so that's why i have
41:08 - just given this filter which is is
41:10 - official is equal to true and then i'm
41:12 - going to just press enter
41:14 - and i will only see the official
41:18 - images which are present on the docker
41:20 - hub
41:21 - and which have more than 100 stars
41:25 - in a similar way i can also search for
41:29 - automated image which are not official
41:32 - but
41:32 - which are there by some users which are
41:36 - there
41:37 - on docker hub right so
41:40 - it's going to show you all the images
41:43 - which are not official
41:44 - but automated now there is this option
41:48 - which is called uh no trunk also which
41:50 - is going to show you the description
41:53 - without truncating uh this description
41:55 - so right now you can see
41:57 - in the description you see this
41:59 - description and these three dots
42:02 - so that means this description have
42:05 - more content in the description
42:08 - so i can just give this option which is
42:12 - no trunk which is not going to truncate
42:15 - this
42:15 - description it's going to show you
42:18 - the full description here so sometimes
42:22 - this option can get really messy if the
42:26 - description is really
42:28 - large so just use it
42:31 - wisely now instead of for this hyphen
42:34 - hyphen filter you can also
42:36 - simply write hyphen f for
42:40 - the filter option so either you can just
42:43 - give the
42:44 - full filter option or you can just give
42:46 - hyphen f
42:47 - for the filter and the result will be
42:50 - the same now the next command which i'm
42:53 - going to show you here
42:54 - is the docker images so i'm going to
42:57 - just
42:58 - write docker images
43:01 - and this command we use to list out
43:05 - all the local images you have on
43:08 - your host so when you give this command
43:11 - docker images it's going to give you
43:13 - all the images which you have on your
43:16 - host
43:16 - as i said and right now i only have
43:20 - one uh image which is hello world image
43:24 - which we have pulled in the previous
43:26 - videos when i have shown you how to
43:29 - install
43:29 - docker on your various operating system
43:34 - so right now i only have one docker
43:36 - image which
43:37 - is hello world now there are
43:40 - some options which are related to docker
43:44 - images
43:45 - so we are going to see all those options
43:48 - one by one
43:49 - so with this docker images option you
43:52 - can give
43:53 - the name of the image now let's say i
43:57 - give
43:57 - here the option java
44:01 - so you can list the images using the
44:04 - name or the tag
44:05 - so when you give this docker images java
44:08 - command it's going to search
44:11 - all the images related to java
44:14 - and you can see there is no image which
44:17 - is related to java on my host machine
44:22 - so let's pull the java image from the
44:25 - docker hub so i'm going to
44:27 - just write docker here
44:30 - and then pull so the pull command you
44:33 - can use to pull an
44:35 - image or a repository from docker hub or
44:38 - from your private repository so i'm
44:40 - going to just
44:41 - pull the java image
44:44 - from the docker hub so you can see when
44:47 - you give this docker pull
44:49 - java command it's going to pull always
44:52 - the latest tagged image from the docker
44:56 - hub
44:56 - and in the output also you can see using
44:59 - default tag so the default tag
45:02 - is always the latest tag that's why
45:05 - it's going to pull the latest
45:08 - java image so now you can see
45:11 - this java image with the latest
45:14 - tag is downloaded on my
45:18 - host so let me clear the
45:22 - terminal and now i'm going to give
45:25 - the docker images command once again
45:28 - so docker images
45:32 - and now i have the
45:35 - java image with the tag latest and
45:38 - the hello world image with the tag
45:41 - latest
45:42 - so now i can use the docker
45:46 - images and then the name of the image
45:49 - also so i can search
45:50 - uh based on the name of the image also
45:54 - so i can just write
45:55 - docker images java which is going to
45:58 - just give me
46:00 - the images which are related to java
46:04 - i can also search with the
46:07 - image name and the tag so let's say i
46:10 - want to search
46:11 - for the java image which have the tag
46:14 - let's say 8 which is not present
46:17 - on my host so it's going to give you
46:22 - the empty result without any image
46:26 - if you give the tag which is
46:30 - present so the latest tag is
46:33 - present on my host
46:36 - so it's going to give you the java image
46:39 - with the latest
46:40 - tag so let me give the docker images
46:44 - command once again
46:45 - and you can see by default in the result
46:47 - you will see the name of the repository
46:50 - or an image
46:51 - then the tag of that image
46:55 - and then the image id this id is very
46:58 - useful when you have a multiple
47:02 - image related to let's say java
47:05 - so you can use this image id to remove
47:07 - that image
47:09 - or work with that image so
47:12 - that's why this id is important
47:16 - also you can see when this image is
47:19 - created
47:20 - and the size of the image so the
47:23 - different
47:23 - images with different tag have different
47:26 - sizes
47:27 - so sometimes you want the images with
47:31 - the less size or sometimes you
47:34 - want the images which have the full
47:37 - feature
47:38 - so in that case you can use a different
47:41 - kind of
47:43 - image with different tag which suits
47:46 - your
47:46 - requirement for your application in this
47:49 - video we will talk about
47:51 - basics of docker file so first of all
47:55 - what is a docker file so docker can
47:59 - build images automatically by reading
48:01 - the instructions
48:02 - from the docker file and a docker file
48:06 - is a text
48:07 - document that contains all the commands
48:10 - a user could call on the command line
48:13 - to assemble an image now as i have
48:16 - previously told you
48:18 - you can use docker file and then
48:21 - once you write your instructions in the
48:23 - docker file you can build
48:25 - your docker file to produce a docker
48:28 - image
48:29 - and when you run the docker image it's
48:32 - called the docker
48:33 - container so let's see how we can create
48:35 - a docker file
48:36 - and then we will see how we can build
48:39 - our
48:40 - docker file to make an image so right
48:43 - now i'm in my home directory so here i'm
48:45 - going to
48:46 - create a directory called d1 let's say
48:50 - and then i'm going to cd in this
48:53 - d1 directory and right now
48:56 - it doesn't contain any files or folders
49:00 - so let's create our docker file in this
49:03 - d1 folder so i'm going to
49:05 - just write touch and then
49:09 - docker file so by convention
49:12 - we usually name our docker file as
49:16 - docker file with the capital d
49:19 - and this docker file doesn't contain any
49:23 - extension so it's without any extension
49:26 - so let's create this file so now i have
49:29 - this docker file
49:30 - in my deven folder right
49:33 - so now i'm going to open this docker
49:36 - file in
49:37 - any editor you can use the editor of
49:40 - your choice
49:41 - right from the nano bim or any editor
49:44 - i like to use the visual studio code
49:47 - editor so i'm going to
49:48 - use that so i'm going to just write code
49:52 - and then i'm going to just write dot
49:54 - which is going
49:55 - to open the current directory
49:58 - in my visual studio code so here i have
50:01 - this
50:02 - docker file right now in visual studio
50:06 - code there are many
50:07 - extensions you can install related to
50:10 - docker
50:11 - that's why i like to use this visual
50:14 - studio code
50:15 - and straight away when i open this
50:18 - docker file
50:18 - in my visual studio code i can see
50:22 - this pop-up which says docker extension
50:24 - is recommended for this file
50:26 - so you can click on this install button
50:30 - or you can just install this docker
50:33 - extension
50:34 - from this extension
50:37 - option here also so you can just search
50:39 - for
50:40 - docker here and then it will give you
50:43 - the most popular docker extension
50:46 - right so just choose the most popular
50:49 - one from here and i'm going to just
50:50 - install this
50:51 - docker extension and once this extension
50:54 - is
50:55 - installed it's going to help you with
50:57 - your
50:58 - docker files and docker commands
51:01 - in general okay so there are bunch
51:04 - of keywords which you can use inside
51:08 - your docker file and each keyword means
51:11 - something so we will start with the
51:14 - arg keyword so this arg
51:17 - keyword we can use to provide any
51:20 - argument as the name suggests and i'm
51:23 - going to explain
51:24 - this arg in detail after the
51:28 - other keyword which is from so here what
51:30 - i'm going to do is i'm going to
51:32 - just write version here and
51:36 - version equals i'm going to give here is
51:40 - 20.04 so version here is the name of the
51:44 - argument
51:45 - and 20.04 is the value of the argument
51:50 - now after this we are going to use
51:52 - another keyword
51:53 - which is from now this from defines the
51:56 - base image
51:57 - used to start the build process
52:00 - so there are many base images which you
52:03 - can
52:04 - find on the docker hub and we are going
52:06 - to
52:07 - use one such base image which is
52:10 - ubuntu and then after colon you can
52:13 - choose
52:14 - which version of ubuntu base image you
52:18 - want to
52:18 - have so here uh as i have defined this
52:23 - arg
52:23 - is equal to 20.04 so we are going to
52:26 - fetch the ubuntu
52:27 - 20.04 from the docker hub
52:31 - as our base image so how we can use this
52:34 - argument with this from uh
52:38 - keyword you just need to use this dollar
52:42 - symbol
52:42 - and then inside these curly brackets you
52:46 - just need to pass your argument so my
52:48 - argument name is version so
52:50 - i'm passing uh this argument here this
52:52 - means
52:53 - that we want to fetch the ubuntu 20.04
52:58 - image from the docker hub now this from
53:02 - instruction supports variables that are
53:04 - declared
53:06 - by any arg instruction that occurs
53:09 - before the first from and
53:12 - an arg declared before the from
53:16 - keyword is outside of the build stage
53:19 - so it can't be used in any instruction
53:23 - after from so now once we have the image
53:26 - we are going to use
53:27 - one more keyword which is the run
53:31 - keyword so this run is the central
53:33 - executing
53:34 - directive for the docker file so this
53:38 - run
53:38 - you can use to run commands using the
53:42 - docker file
53:43 - so for now i want to run inside
53:46 - this ubuntu base image apt get
53:50 - update command and also i'm going to
53:52 - give the flag y
53:53 - for yes and now let's move to the next
53:56 - command
53:56 - so the next command i'm going to use
53:59 - here is the cm
54:01 - d command so the cmd command can be used
54:05 - for executing a specific command within
54:08 - a container so let's say i just want to
54:11 - run the bash
54:12 - inside the container so i'm going to
54:15 - just use these
54:16 - square brackets and with the double
54:19 - quotes i'm going to just
54:20 - write bash here so this is a very basic
54:25 - docker file
54:26 - now let's see how we can just use this
54:30 - docker file to build
54:31 - some image so i'm going to open the
54:34 - terminal
54:34 - inside my visual studio code editor
54:38 - and as i can see i'm in my
54:41 - d1 directory which i have created and
54:44 - here i have this docker file
54:46 - right so now let's list out what are the
54:49 - docker images
54:50 - we have on our system so i'm going to
54:54 - just write a sudo docker
54:58 - images command to list out all the
55:00 - images
55:01 - and now i want to run or build this
55:04 - docker file
55:06 - and create an image so right now we have
55:09 - hello world and
55:10 - i want to create one more image using
55:13 - this
55:13 - docker file so to
55:16 - build a docker file you can give
55:20 - a command build so just write sudo
55:24 - docker build and then
55:27 - dot so when you run this docker build
55:30 - command the current working directory is
55:33 - called
55:34 - the build context and by default
55:38 - the docker file is assumed to be located
55:41 - in this directory but you can also
55:44 - specify
55:46 - the directory path using
55:49 - a flag called hyphen f that we will see
55:52 - a little bit later but just give this
55:55 - command for now
55:56 - which is sudo docker build
56:00 - space dot so now you can see
56:03 - that when we run this docker build
56:06 - command
56:07 - the build is run by the docker daemon
56:10 - not
56:10 - by your cli so the first thing
56:14 - a build process does is to send
56:17 - the entire context to the docker demon
56:20 - and that we can see here sending build
56:23 - context
56:24 - to the docker demon now in most cases
56:27 - it's best to start with the empty
56:30 - directory
56:31 - and then you start adding your docker
56:34 - file
56:35 - in that directory now when you run this
56:38 - docker build command you will also see
56:41 - that
56:42 - these layers are fetched from
56:46 - your base image from the docker hub
56:49 - and also you will be able to see which
56:52 - step
56:53 - is executed so the step one out of four
56:56 - is this arg step step two
56:59 - is the from step and at this step it's
57:02 - going to pull the base image
57:04 - from the docker hub and you have some
57:07 - intermediate
57:08 - layers here which are created and then
57:11 - we have used this
57:12 - run command which in itself has created
57:15 - its
57:15 - own layer and it has
57:18 - installed the updates using this updates
57:21 - command
57:22 - and at last we have given this cmd
57:24 - command
57:25 - so now let's give the docker images
57:28 - command once again so i'm going to just
57:30 - give
57:30 - sudo docker images command and now
57:33 - you're going to see this ubuntu base
57:36 - image which is fetched
57:38 - from the docker hub and you have
57:42 - this image which doesn't have any name
57:45 - or tag
57:46 - because we haven't provided any name or
57:48 - tag
57:49 - to our docker image and
57:53 - this only have this image id which you
57:55 - can see
57:56 - here also which is successfully built
57:59 - this
57:59 - image id so using this image id you know
58:03 - that your image is created
58:06 - here now let's say you are in
58:09 - some other directory other than the
58:12 - directory in which
58:13 - your docker file is there so for
58:16 - building a docker file from some
58:19 - different directory you use the hyphen
58:23 - f flag so what you do here you just
58:27 - use sudo docker build and then hyphen f
58:30 - and then you just give the path to your
58:34 - docker file so when you give this
58:37 - command
58:38 - and then you need to provide the context
58:40 - also
58:41 - so you need to create this context
58:43 - inside
58:44 - this current directory so when you give
58:46 - this command
58:47 - it's also going to give you the same
58:50 - result so because we have effectively
58:52 - given the same command so
58:54 - we don't need to modify our image
58:57 - so once again when you give the docker
58:59 - images command it's going to show the
59:01 - same
59:02 - image because your image is not modified
59:06 - and you haven't changed your context
59:08 - which is your current
59:09 - directory now as you can see we don't
59:13 - have any name and tag to our
59:17 - image so if you want to provide the
59:19 - repository name
59:20 - and the tag for your image
59:24 - what you can do is you can give this
59:27 - docker build command and then give
59:31 - the hyphen t flag so using this hyphen t
59:35 - flag you can specify the repository and
59:38 - the tag
59:39 - at which you want to save your image so
59:42 - let's say i want to give the repository
59:44 - name
59:44 - as my underscore
59:47 - app and the tag which i want to give
59:51 - here
59:51 - is let's say one so after the colon you
59:55 - can provide the tag
59:56 - also here so when you run this command
59:59 - and don't forget to provide this context
60:02 - which is
60:02 - dot which is the current directory and
60:04 - then press enter
60:06 - it's going to just create the same
60:09 - image and you will see here an extra
60:12 - step
60:13 - is shown here which is tagged with
60:16 - my app colon one so at this step also
60:21 - you will observe that docker is smart
60:24 - enough
60:25 - to know that you want to create
60:28 - the same image from the same docker file
60:32 - and you haven't changed your docker
60:35 - files so it's not going to change
60:37 - your image or create or recreate
60:40 - your image once again because we haven't
60:43 - changed our docker file right
60:45 - we have just give the repository name
60:47 - and the tag
60:49 - so now when you give this command docker
60:52 - images
60:53 - then you will see that the repository
60:56 - name
60:57 - is my app and the tag associated with it
61:01 - is one so this is how you can give
61:04 - the repository name and the tag now
61:08 - if you will observe here we have
61:11 - our base image also here which is ubuntu
61:15 - 20.04
61:16 - so in future if you create different
61:19 - docker file and it requires the same
61:23 - ubuntu docker image and the same
61:26 - tag which is 20.04 then
61:29 - your docker build command will be smart
61:33 - enough to
61:34 - know that and it's not going to pull
61:36 - this image
61:37 - from the docker hub again because you
61:40 - already have this image
61:42 - on your local pc so as i said we have
61:45 - fetched this ubuntu image and the
61:46 - version for
61:47 - it is 20.04 here
61:51 - in the version if you don't know the
61:53 - version you can always
61:55 - write the latest so just write latest
61:58 - here
61:59 - and it's going to just fetch the latest
62:01 - version of
62:03 - the base image you want to have
62:06 - so let me just save this file with the
62:09 - latest
62:10 - version and then run the same command
62:12 - with hyphen t
62:13 - my app and the tag will be the same
62:16 - and the context will be the same and now
62:20 - you will see that it's going to
62:23 - fetch the latest version of ubuntu
62:26 - here and now when i give this
62:30 - docker images command you will see the
62:32 - tag
62:33 - latest here instead of 20.04 which was
62:36 - this
62:37 - more specific version i wanted
62:40 - right so latest is the latest version
62:43 - which will be available on the docker
62:46 - hub
62:47 - for this base image so those are some of
62:50 - the basics
62:51 - of docker files we are going to learn
62:54 - about docker files in the upcoming
62:56 - videos
62:56 - also till now we have learned the basics
63:00 - of docker files and how we can create
63:03 - docker images using docker files now in
63:06 - this video we are going to learn
63:08 - about docker containers
63:11 - so as i have told you earlier when you
63:13 - run
63:14 - an image it's called a container
63:18 - so in the last video we have created
63:21 - this docker file and we have already
63:23 - built our docker file to
63:26 - produce an image so let's list out
63:29 - the docker images which we have created
63:32 - in the last video so just give the
63:35 - command
63:36 - docker images here and
63:39 - this was the image which we have created
63:43 - we have named our image as
63:46 - my app and the tag which we have given
63:49 - to our image
63:50 - is one here now this is the image
63:54 - id so let's see how we can run this
63:57 - image to create a container
64:01 - now in order to list out all the running
64:05 - containers
64:06 - you have the command which is called
64:09 - sudo docker ps which is going to give
64:13 - you the list of all the running
64:15 - containers
64:16 - so right now we don't have any running
64:18 - container
64:20 - now if you want to see the list of
64:23 - all the container including running or
64:26 - thus exited containers then you can give
64:31 - the command with the flag hyphen
64:34 - a and it's going to give you the list of
64:36 - all the containers
64:38 - you have on your system so it's going to
64:41 - give you the list of all the running
64:43 - container as well as
64:45 - if they are exited and if they are no
64:48 - more running then also it's going to
64:50 - give you the list of all the containers
64:52 - so you can see
64:54 - i have ran this hello world container
64:57 - two months ago right and
65:00 - right now the status of this container
65:02 - is exited
65:04 - that means it's not running so this is
65:06 - how you can see the list of
65:08 - all the containers now to run a
65:11 - container
65:12 - what you need is a command called
65:16 - run so you just write sudo
65:19 - docker run and then you can give
65:22 - with this run command some options for
65:26 - example
65:27 - and then you give the name of the image
65:30 - so it requires
65:31 - uh the image in order to run
65:34 - a container and then you can give some
65:38 - commands so
65:40 - you can give some commands with the
65:42 - docker round image
65:43 - and also you can give some args here
65:47 - okay so let me just write args
65:50 - right so this is the basic syntax
65:53 - of a docker run command so let's say
65:57 - we want to run our docker image
66:01 - which is my app right
66:04 - so let me just once again give this
66:08 - docker images command
66:09 - and i want to run this image so to run a
66:13 - container
66:14 - you just need one thing which is the
66:16 - docker image
66:18 - so you can just write sudo
66:21 - docker run and then the image
66:24 - id so this is the image id of
66:28 - this repository which is my app
66:31 - so let's say we want to run this image
66:34 - so i'm going to just
66:35 - take the image id of this image
66:39 - and then i'm going to just press enter
66:42 - and as soon as i press enter it's going
66:45 - to run
66:46 - the container and exits
66:49 - immediately so when i run this docker
66:52 - run
66:53 - image id command then it's going to run
66:56 - and it's going to exit immediately right
66:59 - so when you give this uh docker ps
67:03 - command so let's
67:04 - list out all the running containers
67:08 - right so
67:08 - all the running containers still you
67:11 - will see
67:12 - there is no running container but
67:15 - when you give this command with hyphen
67:18 - a flag which means we want to see
67:21 - all the containers then it's going to
67:24 - show you
67:25 - that it ran this uh container with this
67:29 - image so we
67:30 - uh ran the container with this image and
67:33 - this is the same image
67:34 - which we have used in this command right
67:37 - and it was exited about a minute
67:41 - ago right so it ran
67:44 - and it exited immediately
67:48 - now here one more interesting thing to
67:51 - note here
67:52 - is when you run the container with the
67:56 - run command
67:57 - dot co automatically generates a
67:59 - container name
68:01 - with a string of randomly selected
68:03 - numbers and letters
68:05 - so if you uh are wondering what
68:08 - this name is this is just a
68:12 - automatically generated name which is
68:15 - generated by
68:16 - docker for you now if you
68:19 - want to give a specific name
68:22 - to your docker container there is a flag
68:25 - for that so we are going to run
68:29 - the docker run command for the same
68:32 - image
68:33 - and this time what we are going to do is
68:35 - we are going to
68:36 - give some name to our container so
68:38 - before
68:39 - the image id i'm going to just provide
68:42 - this
68:42 - name flag and then i can give the name
68:46 - to my container so the name i have given
68:50 - here
68:50 - is my ubuntu container to my container
68:53 - and let's give the same command with
68:55 - this flag
68:57 - and once again you don't see any
69:00 - output here on the terminal but
69:03 - as i have told you it has just
69:06 - ran the container and exited immediately
69:09 - so when we give the docker ps hyphen a
69:13 - command
69:14 - once again you will see this time
69:17 - that now our container name
69:20 - is my ubuntu container right so this was
69:24 - the container
69:25 - which uh we ran earlier and this time
69:30 - with the last docker run command we have
69:34 - given the name to our container and the
69:36 - image
69:37 - was this one so image is unchanged
69:40 - but we have created a new container with
69:43 - the name
69:44 - my ubuntu container right and the
69:47 - command
69:48 - which we ran is badabash command
69:51 - which is coming from this
69:55 - line of docker file now when you run
69:59 - your docker containers
70:00 - it's run in two modes one is
70:04 - attached mode or in the foreground
70:07 - and other is in the detached mode
70:10 - or in the background and by default
70:13 - docker runs the container in the
70:15 - attached
70:16 - mode that means it's attached
70:19 - to the terminal session where it
70:22 - displays the output
70:23 - and the message so if this docker file
70:26 - has some commands or
70:30 - some output related to this docker file
70:34 - then it's going to show you the output
70:37 - in the terminal when you
70:39 - run the container with the docker run
70:41 - command
70:42 - but because we don't have any uh output
70:45 - associated with
70:46 - the docker file it doesn't show any
70:49 - output
70:50 - right now if you want to run your docker
70:53 - file
70:53 - in the detached mode what you can do
70:56 - here is you can give the hyphen d
71:00 - flag that means you want to run your
71:02 - container
71:03 - in the detached mode so just give hyphen
71:06 - d
71:07 - and then i'm going to give the same
71:09 - command here and let's see what happens
71:12 - and you can see it's going to give you
71:14 - this
71:15 - message which says error response from
71:18 - the daemon
71:19 - conflict the container name this
71:22 - is already in use right so
71:25 - this container we have already defined
71:27 - so you cannot create this
71:29 - container with the same name so you need
71:32 - to give the
71:33 - different name here so let's say i'm
71:36 - going to just
71:37 - give my ubuntu container 2 now
71:41 - okay and then i have also given this
71:44 - hyphen d command to run it in the
71:47 - detached
71:48 - mode and now you will see that
71:51 - there is an output which is printed here
71:54 - and this is the container id
71:58 - of your container now
72:01 - if you have observed here in the
72:04 - previous command where it has
72:06 - should thrown this error
72:09 - it has this long container id
72:12 - now when you give the docker ps hyphen a
72:16 - command
72:16 - you will see in the container id some
72:19 - part of
72:20 - this container id is shown so for
72:23 - example
72:24 - i can see here up to this part
72:27 - of the container id is shown but in the
72:30 - background
72:31 - the container id is so much
72:34 - bigger right so now when i give the
72:38 - docker ps
72:39 - hyphen a command once again i can see
72:42 - one more container which is created and
72:45 - the container id you can see
72:48 - it's going to show you the
72:51 - starting few uh values of the container
72:55 - here until i think until d
72:59 - so using this id also you can
73:02 - delete or work with your container or
73:05 - you can
73:06 - take the full id of the container and
73:09 - work
73:09 - with your container okay so this
73:12 - id will also work or in the short form
73:16 - or the first few letters of the id
73:20 - will also work which is shown here now
73:23 - we have seen
73:24 - that how we can run our docker container
73:26 - in the detached mode and as i told you
73:29 - that by default docker runs the
73:31 - container in the
73:33 - attached mode or in the foreground right
73:37 - now let's see how we can run our
73:39 - container interactively
73:41 - so docker allows you to run the
73:43 - container in
73:45 - interactive mode that means you can
73:48 - execute commands
73:49 - inside the container while it's still
73:52 - running so let's see how we can run our
73:55 - docker container
73:56 - interactively so now what i'm going to
73:58 - do here is
74:00 - i'm going to just create a new container
74:02 - let's say
74:03 - it's container 3 my open to container
74:06 - underscore 3
74:08 - and i don't want to run it in detached
74:11 - mode
74:11 - instead i want to run this container in
74:14 - the
74:15 - interactive mode so here i can give
74:19 - hyphen i t flag
74:23 - which means that we want to run our
74:26 - container
74:26 - in the interactive mode and the image
74:30 - name is same which we have created using
74:33 - this docker file
74:35 - so let's see what happens when i run
74:37 - this command
74:38 - like this so when i run this command
74:40 - like this
74:41 - you will see the bash shell
74:45 - which appears here and this
74:48 - is what i was expecting so
74:52 - now as you can see here in this docker
74:55 - file
74:56 - when we have created this image the last
74:59 - command which we wanted
75:00 - is this bash command and
75:04 - it has just given us this bash command
75:07 - shell in the last right so this is how
75:10 - you can run
75:11 - your container in the interactive mode
75:14 - now when i open the new terminal so
75:18 - let this terminal be like this and let
75:21 - me open the new terminal
75:23 - in the visual studio code you can open
75:25 - the new terminal by just clicking
75:27 - on this plus button or you can open your
75:30 - default terminal on your operating
75:32 - system
75:32 - also you can see i'm in the second
75:35 - terminal
75:36 - and here i'm going to give this sudo
75:39 - docker ps command without hyphenae that
75:42 - means i want to see
75:43 - only the running docker containers
75:47 - and then i'm going to provide my
75:49 - password of my operating system and this
75:52 - time you will
75:53 - observe that when i give this
75:56 - docker ps command it's going to give me
75:59 - some output because
76:01 - now the container which i have created
76:03 - which is
76:04 - my ubuntu container 3 is still
76:07 - running in the other terminal as you can
76:10 - see
76:11 - we have uh running bash
76:15 - shell in the docker container so this
76:18 - bash shell is running inside our
76:21 - container
76:22 - right so when you uh just
76:25 - give some ls command you will see
76:28 - the file system directories here
76:31 - inside your container you can also give
76:35 - for example up time so as the name
76:38 - suggests
76:39 - the uptime command will give you the
76:41 - time for which
76:42 - the system has been up or
76:45 - running right and as we have seen in the
76:49 - last video we have
76:50 - only uh given this bash command so
76:53 - our container is not doing much it's
76:56 - just
76:56 - opening the bash a shell now there are
77:00 - many interesting things which you can
77:02 - do with your docker run command and that
77:05 - we are going to see in the next videos
77:08 - also
77:08 - i want to show you uh some more commands
77:12 - related to docker run and uh
77:15 - docker in general so
77:18 - now what i'm going to do is i'm going to
77:20 - switch to
77:21 - my terminal so i'm going to open my
77:24 - default
77:25 - terminal on my ubuntu operating system
77:28 - also i'm going to open my browser and
77:30 - i'm going to just search for docker hub
77:32 - i want to show you how this docker hub
77:35 - looks like so
77:36 - the first link here is hub.docker.com
77:40 - and when you click on this link you will
77:43 - see
77:44 - uh this web page here from where you can
77:47 - just sign in with your docker id which
77:51 - you have created earlier
77:52 - or you can search for some images
77:56 - so let's say i'm going to search for
77:59 - an image called busy box
78:02 - and then press enter and you will see
78:05 - an official image of busy box and
78:08 - as you can see uh you will see the
78:12 - tag here on the top which is going to
78:14 - show you
78:15 - if it's official it's going to show you
78:17 - it's an official image
78:19 - and otherwise it's going to show you
78:21 - verified
78:22 - or the other information
78:26 - associated with the image so the most
78:28 - popular one and the official one
78:30 - is this one so i'm going to just click
78:32 - on this
78:33 - base image and here i will see
78:36 - some more information related to this
78:40 - image so if i want to just pull this
78:42 - image on
78:43 - my pc i can just give this docker pull
78:47 - busy box command so let's do this and
78:50 - i'm going to show you how we can use the
78:54 - docker run command with the busy box uh
78:56 - image which we are going to pull so i'm
78:58 - going to just write
79:00 - docker pull busy box here
79:04 - and then press enter and i'm going to
79:06 - just give my ubuntu's password which is
79:08 - going to
79:09 - just pull the latest tag image of the
79:13 - busy box right so if you don't provide
79:16 - any
79:16 - tag after colon then it's going to pull
79:19 - the latest image
79:21 - so now let's run the docker images
79:24 - commands
79:26 - so i'm going to just give images and now
79:29 - you can see this busy box image
79:31 - is there so you can
79:34 - run the docker run command with
79:38 - the images you have in this list also
79:41 - so till now we have seen how we can run
79:44 - the
79:44 - docker run command with the container
79:48 - which
79:48 - we have created but you can also
79:51 - use this docker run command with the
79:53 - base images
79:54 - also for example busy box or ubuntu
79:58 - 20.04 or ubuntu latest
80:01 - version and i have pulled this busy box
80:04 - base image because it's very small in
80:07 - size
80:08 - you can see it's only around 1.22
80:12 - megabytes so if you want to quickly test
80:15 - something with some linux terminal or
80:19 - linux operating system
80:20 - busy box is the image to go
80:24 - so now as i told you you can use this
80:27 - docker run command with the images you
80:31 - have
80:32 - in your local pc so you can just
80:36 - give docker run and the name of
80:39 - your image which is
80:42 - busy box here and then
80:46 - you can do something with it so
80:49 - you can just write echo so
80:52 - it means that we want to
80:55 - run the echo command inside our busy box
80:58 - container when it
81:00 - runs and let's say we just want to print
81:03 - hello world here so i'm going to just
81:05 - write hello
81:06 - world and then press enter and it's
81:09 - going to
81:10 - run this busy box image as the container
81:14 - and it's going to print or execute
81:16 - whatever command you have given
81:18 - after this busy box
81:21 - command right so basically what this
81:24 - means is we are running echo
81:26 - inside our busy box container also when
81:30 - you give
81:30 - the docker ps hyphen a command so let's
81:34 - give this
81:34 - docker ps hyphen a and you will see
81:38 - this busy box command also so you can
81:41 - see
81:42 - this busy box and what command it has
81:44 - ran
81:45 - so we have we ran echo hello world and
81:48 - it was created 42 seconds ago and it was
81:51 - exited right so status is executed
81:54 - now let's say you just want to work with
81:57 - the busybox
81:58 - shell what you can do you can just give
82:01 - the same command but
82:02 - instead of giving this echo
82:06 - you can run it in the interactive
82:09 - manner using this i t flag
82:12 - and then you can just tell that
82:15 - you want to run the shell so just write
82:18 - sh
82:19 - which is going to run this container and
82:22 - open the shell
82:23 - inside the container right so let's give
82:26 - this command
82:27 - and when you give this run command with
82:29 - the id flag it
82:30 - attached us to the interactive tty
82:34 - in the container right so because we are
82:37 - running the
82:38 - sh command after this run command
82:41 - so it's going to open the shell inside
82:44 - your
82:44 - busy box container and here again you
82:47 - can run
82:48 - your basic commands or whatever you want
82:51 - to do inside the container
82:53 - so we are not working inside our
82:56 - operating system we are working inside
82:59 - our
82:59 - container now in order to exit from the
83:02 - container you can just
83:04 - give this exit command and you will come
83:06 - out
83:07 - of this container now the last
83:10 - thing which i want to show you before
83:13 - just finishing this video and that
83:16 - is how we can remove some containers
83:20 - so now we ran so many commands and we
83:22 - have so many containers
83:24 - and as you can see we have so many
83:28 - dead container that means all the
83:30 - containers
83:31 - are exited and they are not running
83:34 - anymore
83:35 - so when you give this docker ps
83:39 - command you can see only one container
83:41 - is running
83:42 - and all the other containers when you
83:45 - see using hyphen
83:47 - a are exited so let's say you want to
83:49 - remove some of these containers
83:52 - so let me clear the terminal and let me
83:55 - just give this docker ps hyphen a
83:58 - command
83:58 - so let's say i want to remove this
84:01 - container and this container
84:03 - so there is a very simple command which
84:05 - is called rm
84:06 - so you can just write sudo and then
84:10 - the docker command and then just give rm
84:14 - and then after that you can give the
84:16 - container id of the container so let's
84:18 - say
84:19 - i want to just give this container id of
84:21 - the container
84:22 - so just copy and paste this container id
84:26 - and then press enter and if you see
84:29 - the container id in return in the output
84:32 - that means this container is removed so
84:35 - once again when you give the docker ps
84:37 - hyphen a
84:38 - you will see that this container is
84:40 - already removed
84:42 - right in the same way you can remove
84:45 - multiple uh containers
84:48 - using this rm command so you can just
84:51 - give container id
84:53 - space container id to space
84:56 - you can give multiple container id in
84:59 - this manner
85:00 - and it's going to remove all the
85:02 - container ids which you have given
85:04 - after the rm command so so right now we
85:06 - want to remove two containers
85:08 - and as i said if you see the container
85:12 - id
85:12 - in the output that means that container
85:15 - is removed
85:16 - and in my case as i can see this
85:19 - container is removed
85:20 - but the container with this
85:24 - id is not removed means the container
85:26 - with this id is not removed
85:28 - because it's running right so if the
85:31 - container is running and if you want to
85:33 - remove it
85:34 - you need to stop this container first
85:37 - and then
85:38 - you can remove the container so
85:41 - as i have shown you this container is
85:44 - running here so i
85:45 - i can either just give this exit command
85:49 - or i can stop the container let's see
85:51 - how we can stop
85:53 - the container using a command called
85:55 - stop
85:56 - so let's say i want to just stop this
85:59 - container
86:00 - so i can just give the command docker
86:03 - stop
86:04 - just write docker stop and then the name
86:08 - of your container so my container name
86:12 - is this one so i want to stop this
86:14 - container and then press
86:15 - enter and if you see the container id in
86:18 - the output that means this container is
86:20 - stopped so when you give this docker ps
86:24 - without
86:24 - hyphen a you can see there is no
86:27 - container running anymore
86:29 - and now in the list
86:32 - of all containers you will see this
86:35 - container
86:36 - and now when you give this docker rm
86:40 - with this container id it's going to
86:43 - give you
86:44 - the output that means this container is
86:46 - successfully removed
86:48 - okay so you use top command to stop the
86:51 - container
86:52 - and then you can use rm command to
86:55 - remove the container
86:56 - in the last few videos we have seen the
86:58 - fundamentals
86:59 - of using docker files docker images
87:03 - and docker containers now in this video
87:06 - i want to give you
87:07 - a concrete example of using
87:10 - the docker container so i'm going to
87:13 - give you
87:13 - a real world example of how you can
87:17 - really use docker containers and how
87:21 - these docker containers are really
87:23 - useful in certain situations
87:26 - so we are going to compile and run
87:29 - a c plus program inside a docker
87:32 - container
87:33 - now you might say that uh compiling and
87:36 - building a c
87:37 - plus plus program on your host operating
87:40 - system is
87:41 - also easy so why do we need a container
87:45 - so consider a situation in which you
87:48 - have a c
87:48 - plus plus program and you want to
87:50 - compile a c plus
87:52 - program with different version of
87:55 - gcc let's say now it's really hard
87:59 - to maintain different version of gcc
88:02 - on your linux or windows operating
88:05 - system
88:06 - but using docker containers it's really
88:09 - easy
88:10 - to use and compile your
88:14 - program in different gcc versions
88:18 - using docker containers also let's say
88:20 - you want to develop
88:22 - a c plus program which works on multiple
88:24 - operating system
88:26 - or you want to compile your c plus plus
88:28 - program for
88:29 - a cross plate form application so docker
88:33 - containers
88:34 - are really useful for c plus plus cross
88:37 - platform development
88:39 - with containers with containers you can
88:42 - choose a target
88:44 - with a platform that runs completely
88:46 - different operating system
88:48 - other than your host operating system
88:51 - or the system on which you are
88:53 - developing so let's say you are
88:55 - just working on your windows operating
88:57 - system but you want to compile your c
88:59 - plus plus program
89:00 - on a linux operating system or any
89:03 - special
89:04 - version of linux operating system you
89:06 - can do it easily with
89:08 - the docker container so let's start with
89:11 - our example
89:12 - so as you can see on my visual studio
89:15 - code
89:15 - i have opened a docker folder and inside
89:18 - this docker folder i have this
89:20 - directory d1 which we have created in
89:22 - the previous video and now i'm going to
89:24 - create a new directory inside
89:27 - this docker directory and i'm going to
89:31 - name this directory as d2
89:35 - and now i'm going to just go inside this
89:38 - d2 directory so let's go inside
89:41 - this t2 directory and here inside this
89:44 - d2 directory i'm going to
89:46 - create a new cpp file let's say
89:49 - so you can use touch on the terminal or
89:51 - you can just
89:52 - click on new file here and then just
89:55 - create
89:56 - a new cpp file with the extension
89:59 - cpp i'm going to name my file as main
90:02 - dot cpp
90:03 - and as soon as you create a cpp file
90:06 - inside
90:07 - your visual studio code editor it's
90:10 - going to give you the suggestion for the
90:12 - c plus plus extension so i'm going to
90:13 - install this
90:14 - c plus extension so now this c plus
90:17 - extension
90:18 - is installed and this c plus plus
90:20 - extension is going to help
90:22 - me to uh work with the c
90:25 - plus plus file inside my visual studio
90:28 - code editor
90:29 - so what i'm going to do here is inside
90:32 - my
90:32 - main.cpp file i'm going to just write a
90:35 - very simple
90:37 - program here which just prints
90:40 - hello docker container so normally what
90:43 - you will do on your host machine if you
90:46 - have a g
90:47 - plus plus or gcc you can compile
90:50 - your c plus program using the g
90:53 - plus plus right so you can see i have
90:57 - this main.cpp so i can compile this
91:00 - program using g plus plus hyphen
91:04 - o and then the executable file name
91:07 - which i want to
91:08 - create let's say i want to just give the
91:11 - name
91:11 - test to my file and then my
91:14 - main.cpp file right so
91:17 - i'm going to just uh press enter which
91:20 - is going to create
91:21 - this executable file you can see here
91:23 - also i'm going to do ls here
91:26 - also so you can see this executable file
91:29 - and now you can just run this test
91:32 - executable file or binary file using
91:35 - this
91:36 - command dot forward slash and the name
91:38 - of your binary file and it's going to
91:40 - print
91:41 - hello docker container and i want to
91:44 - create
91:44 - a docker container and i want to compile
91:47 - my
91:48 - c plus plus program inside my docker
91:50 - container and i want to run
91:52 - my c plus plus program inside my docker
91:56 - container
91:56 - this is what i have done in my host
92:00 - machine
92:00 - not inside my docker container right so
92:03 - let me just
92:04 - clear the terminal and
92:07 - inside my d2 directory where my c plus
92:10 - file is there or my cpp file is there
92:14 - i'm going to create a docker file so i'm
92:16 - going to just
92:18 - right click and i'm going to just create
92:20 - this
92:22 - docker file here and then press
92:25 - enter and i can remove this test
92:28 - binary file because i don't need it for
92:32 - my docker container now if you don't
92:35 - know which
92:36 - base image you want to use so for
92:38 - example if you want to use
92:40 - gcc to compile your c plus plus program
92:44 - you can go to docker hub and search for
92:47 - gcc here and when you search for gcc
92:51 - you will be able to find the official
92:54 - gcc image here you can see docker
92:58 - official image
92:59 - or let's just press enter and
93:02 - see what result it gives so you can see
93:05 - the official image is this one with this
93:08 - official image tag and it has more than
93:11 - 10 million
93:12 - downloads so i'm going to just click on
93:15 - this
93:15 - gcc link and
93:19 - you can see when you just scroll down
93:22 - what are the tags you can use
93:24 - with gcc also you can see how you can
93:27 - pull
93:28 - this gcc base image using docker so
93:31 - the name is really simple gcc so what we
93:34 - are going to do is we are going to
93:36 - just write from and then
93:39 - our base image i'm going to use here is
93:42 - gcc
93:43 - now the version or the tag i want to
93:46 - use here is the latest
93:50 - or you can choose the tags which are
93:53 - available here so you can choose
93:56 - 10.2.0 or 10.2
93:58 - or from all these tags which are
94:01 - available
94:02 - here you can also go to tags section and
94:05 - see
94:06 - the more specific tags you want to use
94:09 - for your c plus plus program so now once
94:12 - we have the base image
94:13 - the next step is to copy our current
94:16 - folder
94:16 - which contains our cpp code into the
94:20 - docker image
94:21 - under the file system where
94:24 - we want to copy this so for copying our
94:28 - local files into the docker image
94:32 - we use this copy command okay
94:35 - and as you can see it suggest us uh that
94:38 - we need to provide the source
94:40 - so source in our case is dot
94:43 - because we want to copy all the files
94:45 - from the current folder
94:47 - and the destination will be the
94:48 - destination inside
94:50 - the file system of your docker image in
94:53 - our case
94:54 - it's gcc so in gcc base image
94:57 - file system you will find this
95:01 - path which already exists there so you
95:04 - can
95:04 - just write user forward slash src which
95:08 - is
95:09 - already there inside the file system
95:12 - of gcc base image okay so
95:15 - as i said this command is going to copy
95:18 - all the files which are there
95:20 - in your local directory to
95:24 - this directory inside your docker image
95:28 - okay now if you want to copy some
95:31 - specific file
95:32 - then you can do this also you can just
95:35 - write
95:35 - main dot cpp and then you can copy
95:39 - a specific file into uh the
95:43 - folder which should already exist
95:46 - inside your image which you are using
95:50 - right so for now for simplicity i would
95:52 - just want to copy
95:54 - all the files from the color current
95:55 - directory to
95:57 - user forward slash source forward slash
96:00 - the directory which we are going to
96:02 - create so let's say we want to create
96:04 - this directory where we want to copy all
96:06 - the files cpp
96:08 - test let's say so this path already
96:10 - exists
96:11 - in the file system and this is the
96:13 - folder name which we want to
96:15 - create and copy our local files to this
96:18 - folder in the docker image right
96:22 - now we are going to define the work
96:24 - directory so
96:26 - we can just use this work
96:29 - there keyword to define the
96:32 - working directory in which you want to
96:35 - work
96:35 - now okay so because we want
96:39 - to work inside this directory because
96:42 - we are copying our c plus file inside
96:45 - this directory
96:46 - we are going to set our work directory
96:48 - as
96:49 - this one that means when you run any
96:52 - command it's going to run inside
96:56 - this directory which you set as work
96:58 - directory
96:59 - now in the next step i want to run
97:02 - the command which will compile the c
97:05 - plus plus program
97:07 - using this main.cpp so now
97:10 - i can just give the g plus plus command
97:13 - then
97:14 - hyphen o as the flag and
97:17 - let's say i want to name my binary as
97:19 - test
97:20 - and the file name which i want to
97:22 - compile is main
97:24 - dot cpp so this run command is going to
97:27 - compile
97:28 - my c plus program inside my cpp test
97:32 - directory
97:33 - under user source folder right
97:36 - now in the next step i'm going to give
97:38 - the command
97:39 - using cmd which will be the command
97:42 - which i want to run
97:43 - inside the container so this is going to
97:46 - run the program output from the previous
97:49 - step into our container so this
97:52 - works like this as you have already seen
97:55 - in the last video also so
97:56 - if you want to run your binary you can
97:58 - just give dot forward slash and the name
98:00 - of your binary which is
98:02 - test right so this binary is going to be
98:06 - uh run using this cmd command
98:09 - inside our container so that's it that's
98:12 - how you can
98:13 - create this docker file to compile your
98:15 - c plus program
98:16 - and run it now let's build our docker
98:19 - file to create an image
98:21 - for that you can just give sudo docker
98:25 - then your build command so
98:28 - build and then the build context and
98:31 - then you can provide
98:32 - hyphen t to provide the name of your
98:34 - image i am going to
98:36 - name my image as cpp underscore
98:40 - test for example and then you can also
98:43 - give the tag
98:44 - to your image let's say i want to
98:46 - provide the tag one
98:48 - to my image okay so this is going to
98:51 - create
98:51 - a docker image using the docker file
98:55 - so you can see it has pulled the base
98:57 - image in the first step
98:58 - then copied our files from the local
99:01 - directory to the directory which we have
99:03 - defined
99:05 - and then it has set the work directory
99:08 - and then in the next step
99:09 - it has compiled our c plus program
99:12 - and in the last step we
99:15 - have set the test binary to run
99:18 - when we run our container so now let's
99:21 - list out
99:22 - all the images you can just give
99:25 - docker images command for that and you
99:27 - will see
99:28 - that this repository is created about a
99:31 - minute
99:32 - ago and this is the image id for
99:35 - that image right so now we want
99:38 - to run our container using this
99:42 - image so for that we have seen in the
99:44 - last video we can give
99:45 - sudo docker run command
99:49 - and then i'm going to give the hyphen
99:51 - hyphen rm
99:53 - flag and this rm flag causes
99:56 - docker to remove automatically the
99:58 - container if
99:59 - it already exists so if the container
100:02 - which we are going to
100:04 - run already exists then it's going to
100:06 - remove that container
100:08 - and then it's going to re-run that
100:11 - container
100:12 - so this command is handy when you want
100:14 - to
100:15 - just run only one container at a time
100:18 - and then i'm going to give this i t flag
100:21 - with
100:21 - hyphen so i t flag for running this
100:24 - container in the interactive mode
100:27 - and then your image
100:30 - so you can give this image name cpp
100:33 - test here or image id also you can give
100:36 - so i am going to
100:37 - give the image name which is cpp
100:39 - underscore
100:40 - test with the tag so tag we have
100:44 - provided
100:44 - is one okay so here as i said you can
100:48 - give the image id
100:49 - or the repository name and the tag
100:52 - and then when you run this docker
100:55 - container
100:56 - it's going to print hello docker
100:58 - container that means we ran
101:00 - the test binary inside our docker
101:03 - container
101:04 - right now as i said you can change this
101:07 - tag instead of latest you can choose the
101:10 - version of gcc you want to use for
101:13 - compiling and running your c plus
101:15 - programs so that's why this docker and
101:18 - docker containers
101:19 - will help you to just cross compile in
101:23 - cross platform applications now let's
101:25 - say you want to compile
101:26 - your c plus plus program using the c
101:29 - lag compiler instead of gcc okay
101:32 - so we want to compile our program using
101:35 - c
101:36 - lag compiler instead of gcc so let me
101:39 - clear
101:39 - this terminal and let me go one
101:43 - directory up here and i'm going to
101:45 - create a new directory so i'm going to
101:47 - just write mkdir
101:49 - d3 and inside this d3 directory what i
101:54 - want to do is
101:55 - i want to just have the same
101:58 - cpp file so i will just copy this cpp
102:01 - file into the d3
102:02 - uh directory also and then
102:06 - we are going to create a docker file
102:08 - inside
102:09 - this d3 directory so let's create
102:12 - this docker file here so now let's move
102:15 - to
102:16 - the docker hub website and let's search
102:18 - for c lang if we
102:20 - have something related to c lang
102:23 - compiler on docker
102:24 - or not so i'm going to just write c lang
102:26 - here and
102:28 - as i remember there is no official a
102:31 - base image for c lang
102:33 - on the docker hub so what we can do
102:37 - we can use the base images we already
102:39 - have
102:40 - on our system and then we can install
102:42 - the c lang compiler on
102:44 - that base image so i'm going to just
102:48 - give this
102:49 - sudo docker images command
102:52 - and from these images let's say we will
102:56 - use this ubuntu latest or ubuntu 20.04
102:59 - to compile our
103:01 - c plus program inside the ubuntu base
103:03 - image using the sealang
103:05 - compiler okay so what i'm going to do is
103:09 - i'm going to just write this kind of
103:12 - docker file i'm going to explain you all
103:15 - the steps one by one
103:17 - so we want the base image ubuntu with
103:20 - the tag
103:21 - latest because we already have
103:24 - downloaded or pulled this image in the
103:26 - previous videos so we don't
103:28 - need to pull it once again now in the
103:31 - next step
103:31 - i'm running apt get y update
103:35 - and app get install update
103:38 - to update apps on the base image so
103:41 - that's what you do
103:42 - when you want to install any
103:46 - software on your ubuntu operating system
103:49 - so this command is going to update
103:51 - the apps on the base image now in the
103:54 - next step
103:55 - using this apt get hyphen y install c
103:58 - lang
103:59 - command we want to install c lang on
104:02 - our base image which is ubuntu right the
104:05 - next
104:06 - step are relatively easier because we
104:09 - have seen
104:10 - these steps in the other docker files
104:13 - also so we want to copy all the files in
104:16 - the current
104:17 - directory into this directory inside
104:21 - our base image and then we want to set
104:24 - the work there which is the same
104:28 - where we have copied our c plus plus
104:30 - files
104:31 - and then to compile your c
104:34 - plus program using c lang you can just
104:37 - replace the gcc with c lang plus plus
104:41 - and the rest of the command will look
104:44 - like same
104:45 - as you have seen in the case of gcc also
104:47 - so
104:48 - you can see g plus plus hyphen node test
104:51 - main dot cpp and here also you can
104:54 - give this command the only thing i want
104:57 - to change here is
104:58 - the main dot cpp the file name here
105:01 - okay because our binary name is test we
105:04 - are going to just
105:05 - run this binary using this command so
105:09 - this is going to run inside our
105:11 - container okay
105:12 - in the d3 folder i have created this
105:15 - docker file to compile
105:17 - my c plus plus program using c lag and
105:20 - i'm going to run this
105:21 - now so let me clear the terminal once
105:24 - again
105:24 - so now let's build our docker image
105:27 - using this
105:28 - docker file so for that i need to go
105:30 - inside the d3 directory
105:33 - and then i'm going to give the docker
105:37 - build command with the context or in the
105:40 - current
105:41 - directory and then hyphen t to give the
105:44 - name of
105:45 - my image so let's say i want to give
105:49 - the name to my image as c lang
105:52 - underscore
105:53 - cpp and the version or the tag which i
105:55 - want to provide here
105:56 - is let's say 1.0.0
106:00 - okay so let's build our image using this
106:02 - command
106:04 - so now as you can see the build of this
106:06 - image is successful
106:08 - with the name c lang underscore cpp
106:11 - and the tag 1.0.0
106:14 - so let's run the container for this
106:16 - image using the docker run command so
106:18 - i'm going to just provide
106:21 - sudo docker
106:24 - run oops by mistake i pressed ctrl c
106:28 - that's why
106:28 - it break so let me just give this
106:31 - command once again
106:32 - and then give this image name with
106:36 - the tag 1.0.0 so we want to run our
106:39 - container
106:40 - using this image so let's press enter
106:43 - now and as
106:46 - expected we see hello docker container
106:50 - that means
106:51 - we successfully ran this binary
106:55 - file which is compiled using clang
106:59 - in our container and the output is
107:02 - printed
107:03 - now let's say you want to change
107:05 - something in the output
107:06 - so instead of let's say hello docker
107:09 - container
107:10 - i just want to print hello world
107:13 - here okay so i will just save this
107:17 - program and then i can just build it
107:20 - again but this time i will build it
107:23 - with the different tags so let's say i
107:26 - just did
107:27 - the miner change so i will just change
107:29 - the tag as
107:31 - 1.0.1 so let's build
107:34 - this image which is going to be built
107:36 - really fast
107:37 - and now let's run this image using
107:41 - this docker run command but don't forget
107:43 - to change the tag
107:44 - because i have changed the tag for the
107:47 - image also
107:48 - to 1.0.1 so here also i'm going to
107:52 - change the tag for the image
107:53 - and then press enter which is going to
107:55 - run this program
107:56 - and it prints hello world so how simple
108:00 - is this
108:01 - so this is how you can compile and run
108:04 - your c plus plus programs using docker
108:07 - containers
108:09 - so as i said i just wanted to give you a
108:12 - real world example
108:13 - same thing you can do for your java
108:16 - programs or any other programs
108:19 - which you want to run in different
108:21 - environments
108:22 - in this video we are going to see how we
108:24 - can do
108:25 - port mapping between your docker
108:27 - container and your host
108:29 - machine so let's say you have some kind
108:32 - of
108:32 - a server and that server listens
108:36 - on some particular port so
108:40 - you need to expose your
108:44 - port from your docker container so
108:47 - the outer world will be able to
108:50 - interact with your server so in this
108:53 - video we are going to take an
108:55 - example of a node js
108:58 - server the same concepts you can
109:02 - apply on any other kind of server it can
109:05 - be
109:05 - a nginx server it can be a python flask
109:09 - or django server or any other kind of
109:12 - server
109:13 - so let's start with our example of
109:16 - dockerizing our node.js
109:18 - web app so what i'm going to do is
109:22 - i'm going to just create a new
109:25 - directory for me so i'm going to just
109:27 - write mkdir
109:30 - d4 and then i'm going to go inside
109:33 - that the 4 directory
109:36 - and here i'm going to create a new node
109:40 - js app so for initializing my app i'm
109:43 - going to just write
109:44 - npm init and then
109:48 - hyphen y and then press enter which is
109:50 - going to create
109:52 - a package.json file inside
109:55 - my d4 folder now
109:58 - for this node.js server i will be using
110:02 - express so i need to install express
110:05 - locally for this app
110:08 - so if you already know something about
110:11 - node.js
110:12 - or npm you can easily install
110:17 - the npm package using npm
110:20 - ins tall and the package name
110:23 - in our case it's uh express which is a
110:26 - very
110:27 - popular node.js package
110:30 - or npm package so i'm going to just
110:32 - write
110:33 - express here and then i'm going to
110:36 - give this save flag here so it's going
110:40 - to be installed
110:41 - inside my directory and this
110:44 - express will be added a as the
110:46 - dependency in my package.json file
110:50 - so let me uh press enter which is going
110:53 - to install this
110:54 - express package
110:57 - in my directory you can see this new
111:01 - directory is created which is node
111:03 - modules
111:04 - and this new dependency is added in
111:07 - my package.json which is
111:10 - express so now let's create our
111:13 - server.js file so if you can
111:15 - see in our package.json file uh the main
111:20 - entry point right now
111:21 - is the index.js you can change it
111:25 - to server.js
111:28 - and let's create this server.js
111:32 - file server.js here and then press
111:36 - enter which is going to create this
111:39 - server.js file
111:41 - so we are going to write a very simple
111:44 - node.js code which is going to use
111:47 - express
111:48 - and it's going to just print hello world
111:50 - whenever
111:51 - somebody uh will make a get request
111:55 - to this server so i'm going to just uh
112:00 - copying and pasting this code because
112:02 - this code
112:03 - is available everywhere and it's very
112:06 - simple
112:07 - so what i have done i have just imported
112:11 - this express and then i have created
112:14 - these two variables
112:15 - one is the port variable which will be
112:18 - exposed
112:20 - via a browser or via the
112:23 - rest request and then we have the
112:27 - host here which is basically the local
112:30 - host
112:31 - and we have one get request here so
112:34 - whenever somebody makes a get request to
112:37 - the server
112:38 - we are going to just send hello world so
112:40 - very simple
112:41 - uh node.js server code and we are going
112:44 - to run this code let me clear
112:46 - this terminal so i'm going to just write
112:49 - node
112:49 - and the name of my server file which is
112:54 - server.js and when i just
112:57 - run this server.js using node.js
113:00 - it's running like this and it's printing
113:03 - uh
113:04 - on which host and ports it's
113:07 - running so let's open our browser and we
113:10 - are going to
113:11 - just open this url which is
113:15 - 0.0.0.0 colon
113:18 - the port number on which we have started
113:20 - this node.js server
113:22 - and i'm going to just press enter and it
113:25 - just prints hello world which is the
113:28 - expected result
113:29 - right so now we want to dockerize our
113:34 - node.js server so let's see how we can
113:37 - dockerize our node.js server so for that
113:40 - i'm going to just close this app
113:43 - or stop this app and now i'm going to
113:46 - create
113:47 - a new docker file so let's just create
113:50 - this docker file
113:52 - by just giving this command which is
113:54 - touch
113:55 - docker file now i'm going to go inside
113:58 - my docker file
113:59 - and here inside my docker file
114:03 - i'm going to use the node base image
114:06 - so when you go to the docker hub there
114:09 - is
114:10 - an official base image for
114:13 - node.js and that's what we are going to
114:15 - use so i am going to just write
114:17 - from and the base image will be node
114:20 - and the version of node we are going to
114:23 - use is
114:24 - version 12. so you can use
114:27 - the latest tag also here which is going
114:29 - to give you the latest
114:31 - version now in the next step i'm going
114:34 - to define the working directory using
114:37 - the work their
114:40 - keyword and we are going to
114:43 - define this work there in the
114:47 - user forward slash src
114:50 - for slash app folder
114:53 - and now this should be work data right
114:57 - so like this
115:01 - okay so we have defined our working
115:04 - directory
115:04 - inside this working directory we are
115:06 - going to uh copy our code
115:09 - and then we are going to do all the
115:12 - stuff
115:13 - now uh let's copy uh all the files
115:17 - which are there in our current
115:20 - folder to this docker image so
115:24 - we are going to use the copy keyword to
115:26 - copy
115:27 - uh all the files but first of all we
115:30 - need to
115:31 - copy the package.json
115:34 - to the container so that we will be able
115:37 - to run the
115:38 - npm install command and npm install
115:41 - command
115:42 - what it does it just installs all the
115:45 - dependencies
115:47 - into uh our container right so
115:50 - let's first of all copy the package
115:54 - dot json file so we are going to copy uh
115:57 - the package
115:58 - log dot json file and package dot
116:01 - json file so these two files are
116:05 - responsible for
116:06 - all the dependencies to this directory
116:09 - right so now we have copied the package
116:13 - json files so next step is
116:16 - to install all the dependencies using
116:19 - npm install
116:20 - so you can just give this command run
116:23 - npm ins tall
116:27 - now if you are uh working in the
116:30 - production
116:31 - environment this command can be a little
116:33 - bit
116:34 - different let me just write this in the
116:36 - form of comment
116:38 - so you can just write run and npm
116:42 - ci and then you can give this
116:46 - only production flag production
116:49 - okay so if you are working in the
116:51 - production environment you can give this
116:53 - command
116:53 - if you are working in the development
116:56 - environment then
116:57 - you can just do uh this command so
117:00 - npm install will install all the
117:03 - dependencies
117:04 - and in our case there is only one
117:06 - dependency which is
117:08 - express right so via this npm install
117:11 - this express
117:13 - npm package will be installed in our
117:16 - uh docker image now
117:19 - in the next step once uh all the
117:22 - dependencies
117:23 - will be installed we are going to just
117:25 - copy
117:26 - all the files uh which are there in
117:29 - our server code so we only have
117:32 - this one file which is server.js but
117:35 - let's say you have
117:37 - many modules and many files inside your
117:41 - node.js projects so i'm going to just
117:44 - write copy and then i'm going to
117:47 - copy all the files and folders which are
117:51 - there
117:51 - in the current directory okay
117:54 - now next step is important and
117:58 - this step is we are going to expose
118:02 - our port so i'm going to just write
118:05 - expose and we are going to expose
118:09 - the port which we are using in our
118:12 - server so we are using
118:14 - uh port 8080 in our server so we are
118:17 - going to
118:18 - expose this port this means that we want
118:20 - to expose
118:21 - port 8080 into our
118:25 - docker container so this exposed keyword
118:28 - means that we want to expose port 8080
118:32 - from our container to the outside
118:35 - world for example to our host machine
118:39 - and this expose is a way of documenting
118:42 - so it's not
118:43 - going to publish your port
118:47 - at runtime it's just a way of
118:50 - documenting in your docker file
118:53 - that you intend to expose this
118:56 - port 8080 in
119:00 - your docker container so exposing
119:03 - port using this exposed keyword is a way
119:07 - of documenting
119:08 - which port are used but it does not
119:12 - actually
119:13 - map or open any port we are going to
119:16 - open and map the port using
119:19 - the docker run command and we are going
119:22 - to use
119:22 - a different flag for publishing
119:26 - our port or opening or mapping our port
119:30 - later when we just build and run our
119:33 - our docker con now the next
119:36 - step here will be to run our
119:39 - node.js application and we all know
119:43 - that we just need cmd
119:46 - and then inside our square brackets we
119:48 - will just write
119:49 - npm and then we are going to just give
119:53 - this comma and then we are going to give
119:56 - the name of
119:57 - our server.js file so
120:00 - this will be server dot
120:03 - js now here one interesting point
120:07 - to note here is when we are going to
120:10 - copy
120:10 - uh all the files and folders from our
120:14 - current directory uh to the
120:17 - docker image you can see i have used dot
120:20 - dot that means it's going to copy node
120:23 - modules also into your docker image
120:28 - and we have already installed our node
120:31 - packages
120:32 - using this npm install so this is going
120:35 - to
120:35 - overwrite this node modules folder
120:39 - from your image
120:42 - right so to avoid copying your node
120:46 - modules
120:47 - into your docker image you can create
120:51 - a docker ignore file so this docker
120:54 - ignore file
120:55 - is going to prevent your local node
120:57 - modules
120:58 - or your debug logs from being copied
121:02 - into your docker image
121:03 - so let's uh just create this
121:07 - docker ignore file so to
121:10 - create uh this docker ignore file you
121:12 - can just
121:13 - write touch dot docker ignore
121:18 - in the same format which i have used
121:21 - so this format is recognized
121:24 - by docker and whatever
121:27 - you write inside this docker ignore a
121:30 - file so let's create
121:31 - this docker ignore file first of all so
121:33 - we have created this docker ignore file
121:36 - and we want to exclude the
121:39 - npm modules and npm
121:43 - debug.log file
121:46 - from copying into our image so this
121:49 - means that we have added npm modules
121:53 - and the npm debug log file
121:56 - uh which will be excluded when we are
121:59 - going to copy
122:00 - the files from our local container to
122:04 - the docker image
122:05 - okay so this will avoid the overwriting
122:08 - of
122:08 - our npm modules now we are done
122:12 - and we can build our image so let me
122:16 - clear this terminal so now let's build
122:18 - our
122:19 - image by giving the docker build command
122:22 - so i'm going to just write sudo
122:24 - uh docker build
122:28 - hyphen t and then the image
122:32 - name so let's say i'm going to just give
122:34 - the name
122:35 - node underscore test
122:38 - colon the tag you can give any tag
122:41 - to your image so let's say i am going to
122:45 - give 1.0.0 or
122:47 - tag to my image and then the context
122:50 - and then press enter which is going to
122:53 - just
122:54 - build this image and in few seconds
122:58 - this image will be created
123:01 - so let me clear this terminal once again
123:03 - and let's
123:05 - list out all the images so sudo
123:09 - docker images
123:12 - and when you see here our
123:15 - docker image is created with the tag
123:18 - 1.0.0
123:20 - 15 seconds ago okay so now
123:23 - we are going to run our container so to
123:27 - run our container
123:28 - we can just use a sudo
123:31 - docker run so as i told you we want to
123:35 - expose this port 8080
123:37 - so that this server can listen to the
123:40 - request from
123:42 - the outside the container right so in
123:45 - order to
123:46 - map the port we use the
123:50 - flag which is called hyphen p which is
123:53 - also called publish and hyphen p
123:56 - is a way of mapping a host port
123:59 - to a running container port
124:03 - so this is our running container port
124:06 - and let's say we want to uh map this
124:10 - port which is running inside the
124:11 - container to
124:14 - our local host machine
124:17 - and we want to let's say give the
124:20 - port 3000 in our local host machine
124:24 - and which is going to be mapped
124:27 - to port 8080 so if you specify
124:31 - this expose the port
124:34 - and if you specify this publish flag to
124:37 - map the ports
124:38 - then the service in the container is
124:41 - accessible from
124:42 - anywhere even outside the docker
124:45 - so this means that we want to expose
124:48 - port 8080 from our container
124:52 - to the port 3000 inside
124:55 - our host machine and now let's
124:58 - give the name of our image which we want
125:01 - to run which is
125:02 - node underscore test colon
125:07 - 1.0.0 okay
125:09 - and let's run this docker container
125:12 - and this gives me error and the error is
125:16 - obvious
125:16 - because instead of using npm i should
125:20 - have used node okay because we have
125:23 - started
125:23 - our server using node command not npm
125:27 - npm we used just for installing our
125:30 - packages
125:31 - and managing our packages right so let's
125:33 - rebuild our image once again
125:36 - and once our image is rebuilt we are
125:39 - going to just
125:40 - run our container so now our container
125:44 - is running and we can see the same
125:46 - output now we might
125:49 - be confused or you might be confused
125:52 - that
125:52 - we are exposing uh the port 8080
125:55 - and when we go on this
125:59 - url on our browser so let's go to this
126:02 - url on our browser and let's see
126:05 - if it works or not so it's not going to
126:07 - work because we have
126:08 - mapped the port 8080 to
126:12 - the port 3000 on our local machine so
126:16 - this is
126:17 - the port on the container
126:20 - on your docker container and this is the
126:23 - port
126:24 - which uh it'll listen on your local
126:27 - machine so we want to listen
126:29 - on port 3000 on our
126:32 - host machine so instead of port 8080
126:36 - you can give port 3000 and it's going to
126:39 - print hello world
126:41 - right this is how this uh port mapping
126:44 - work
126:45 - so this will be the port
126:48 - which will be available on your local
126:51 - host
126:52 - and this is the port you have exposed
126:56 - inside your docker container so let me
126:59 - just
126:59 - stop this container so i'm going to go
127:02 - to the
127:03 - next terminal and i'm going to just
127:05 - write
127:06 - sudo docker ps
127:09 - to list out all the running
127:12 - containers and this container is running
127:15 - so i'm going to just use the
127:17 - container id from here just copy the
127:19 - container id
127:21 - and then sudo and then the container id
127:24 - which is going to stop
127:26 - this container now this container is
127:29 - stopped and you can see in this terminal
127:33 - also
127:34 - that we are out of the container right
127:38 - so now let's say let me just uh clear
127:40 - this terminal and
127:42 - now let's say we want to map to the port
127:45 - 8080
127:46 - itself on our host machine also
127:50 - from our docker container so
127:53 - this is the port on the docker container
127:56 - and we want to map
127:57 - this port to the same port on our host
128:00 - machine
128:01 - if it's available then it's going to run
128:04 - fine
128:04 - so let's run this command and now
128:07 - this time when you go to the browser
128:10 - on port 3000 obviously you will not get
128:13 - anything
128:14 - because we have mapped uh the port 8080
128:18 - to our host machine now and now when you
128:22 - give
128:23 - port 8080 it's going to give you hello
128:25 - world
128:26 - if you want to run this server in the
128:29 - detached
128:29 - mode as i have told you you can use
128:32 - hyphen d
128:33 - so that this node.js will run in the
128:36 - detached mode that means
128:38 - it will run in the background so this is
128:41 - how you can expose
128:43 - the http port you can also expose
128:46 - the tcp port and the udp port
128:50 - from your docker container so let me
128:53 - uh just stop this container so i'm going
128:56 - to
128:57 - just stop this container first of all
129:00 - and let me show you how you can expose
129:02 - the udp
129:03 - and the tcp ports so let's say
129:07 - you are running uh application
129:10 - and in this application you are doing
129:13 - some tcp communication
129:15 - or the udp communication so for mapping
129:18 - the tcp port
129:20 - and the udp port you uh can use
129:24 - the flag hyphen p and then
129:27 - you can use this kind of notation so
129:31 - the port which you want to expose from
129:33 - your container let's say i'm
129:35 - just exposing port 80 and forward slash
129:38 - tcp so in case you want to expose the
129:42 - tcp port
129:43 - you just need to uh write forward slash
129:46 - tcp
129:47 - after the port which you want to expose
129:50 - from your container
129:52 - and this will be the port uh you want to
129:55 - expose
129:56 - to the host machine so this port will be
129:59 - available
130:00 - on your host machine um from
130:04 - this port to your container so this is
130:06 - the mapping right
130:07 - for udp you just write forward slash udp
130:11 - right so the flag is hyphen
130:14 - p you just need to write forward slash
130:18 - tcp or forward slash udp to expose
130:21 - the udp or the tcp
130:24 - flag you can expose multiple ports also
130:28 - by using this hyphen p flag
130:31 - so it's not that you just
130:34 - can use only one hyphen p flag you can
130:38 - use
130:39 - multiple hyphen p flags to expose
130:41 - multiple
130:42 - ports from your container to the
130:46 - host machine so this is how port mapping
130:50 - works
130:50 - in a docker i hope you haven't
130:53 - understood this
130:54 - concept so in this video we are going to
130:56 - talk about
130:57 - docker hub so what is docker hub
131:00 - so docker hub is a service provided by
131:03 - docker for finding and sharing your
131:05 - container images with your teams
131:08 - or with the general public
131:11 - so as you can see i'm on this website
131:14 - which is hub.docker.com
131:17 - and here i can sign in at the time of
131:20 - downloading the docker on your operating
131:24 - system you might have created
131:26 - a docker id for you and the password for
131:30 - you
131:30 - so you can log in with that docker id
131:32 - and password
131:33 - so once you are signed in with your
131:36 - docker id
131:36 - and password you will be able to see
131:38 - this kind of
131:40 - web page here you have this explore
131:43 - option
131:43 - where you can explore all the
131:47 - other repositories you have this
131:50 - repository option
131:52 - and under this repository option you
131:54 - will be able to
131:55 - see and manage your repositories
131:58 - which you have created and which you
132:01 - have
132:01 - pushed into your docker registry here
132:05 - you also have the option for
132:06 - organization
132:08 - which we are not going to cover in this
132:10 - video and
132:11 - also you have all these general uh
132:15 - account related uh stuff here right
132:18 - now let's talk about the pricing a
132:21 - little bit
132:22 - so you can see uh for public repository
132:25 - docker hub is absolutely free and that's
132:28 - what we are going to uh be using but if
132:31 - you
132:32 - are working in an organization or you
132:35 - want to create
132:36 - some private repositories for
132:40 - your docker images then you can choose
132:43 - one of these options which are provided
132:45 - here
132:46 - also it's not necessary that you need to
132:49 - use
132:49 - docker hub as a docker registry
132:53 - you can create a docker registry you
132:56 - have
132:57 - this documentation which you can use to
132:59 - create a docker registry
133:02 - i know uh google cloud provide a docker
133:05 - registry or
133:06 - a github nowadays also provide these
133:09 - kind of docker registries so you can
133:11 - create your own registry if you want
133:13 - you don't need a docker hub for just
133:16 - managing your images right so right now
133:19 - you can see
133:20 - i don't have any image on my docker hub
133:24 - account so to start with i have this
133:26 - very simple
133:27 - uh docker file which i want to convert
133:30 - to the docker image and then i want to
133:33 - push that
133:33 - image to my docker hub registry
133:38 - so let me list all the docker images on
133:40 - my operating system right now i don't
133:42 - have any
133:43 - image so let's uh build one image
133:46 - so i'm going to just write pseudo docker
133:51 - build dot hyphen t and the name of the
133:54 - image
133:54 - i'm going to just name my image as hello
133:57 - and then press
133:58 - enter which is going to just create
134:01 - this image i have this hello world image
134:06 - which is created five seconds ago
134:08 - right so now let me just also
134:11 - quickly run this image to see everything
134:14 - is working so i'm going to
134:16 - once again write sudo docker
134:19 - run hyphen hyphen rm
134:23 - hyphen it and the name of the image
134:27 - which is hello and then press enter
134:30 - and it prints the content of
134:33 - my main.cpp that's what it's doing so
134:37 - that's a very basic minimal image the
134:40 - size is very small that's why
134:42 - i have done this and once you have all
134:46 - these images let me just
134:47 - clear the terminal and then let me just
134:50 - move this terminal a little bit
134:52 - up and let's just list all the images
134:55 - once again
134:56 - so now i have this image hello and i
134:59 - want to push this image
135:00 - to my docker hub registry so in order to
135:04 - push this image first of all you need to
135:06 - log in with your docker id
135:09 - into your docker terminal most probably
135:13 - you are already logged in but if you are
135:15 - not you can just
135:17 - give this command which is sudo
135:20 - docker login
135:23 - and if you want to log out then you can
135:25 - just write log out here
135:28 - right so let's give this command which
135:30 - is a pseudo docker login
135:33 - and then give your username here i'm
135:35 - going to provide my username
135:37 - and then you need to provide your
135:39 - password so let me
135:41 - quickly provide my password and then
135:43 - press enter
135:44 - which is going to log me in the docker
135:48 - so you can see login succeeded and now
135:52 - i can just push my images to my docker
135:55 - hub registry
135:56 - so first thing we generally do in order
135:59 - to push the
136:00 - image to the registry is we just tag it
136:03 - so
136:03 - we can give this command which is a
136:06 - docker
136:07 - and then tag and then the name of your
136:11 - image
136:11 - my image name is hello you can also take
136:14 - the image id
136:15 - and then give the space and then give
136:18 - some tag
136:19 - to your image so right now
136:22 - because i want to push my uh
136:26 - docker image to this docker hub account
136:29 - and which has the username codebind i
136:32 - will just
136:33 - first of all write code bind here and
136:36 - then forward slash
136:38 - and then you can give the name of your
136:40 - image i will
136:41 - just leave it as hello and then you can
136:44 - give
136:44 - the tag of your image so i'm going to
136:46 - just give the tag
136:49 - 1.0.0 so this tag
136:51 - is useful whenever you want to
136:55 - just let's say keep working on your
136:57 - image and
136:58 - you want to update the image and
137:02 - want to just version your image
137:05 - into multiple versions so you have the
137:08 - track of
137:09 - all these versions right so i'm going to
137:12 - just
137:12 - tag my image i'm going to press enter
137:15 - and then i will
137:16 - once again list all the images and now
137:18 - you can see
137:19 - i have this image with
137:22 - the this name and i have the tag 1.0.0
137:26 - right now once you do that you are ready
137:29 - to push your image to the docker
137:31 - registry the command is very simple sudo
137:35 - docker push and the name of your
137:39 - docker file which is codebind forward
137:42 - slash
137:43 - hello in my case you also need to give
137:46 - the
137:46 - tag here 1.0.0
137:50 - and then you can just press enter which
137:53 - is going to push your image
137:54 - to your docker hub registry
137:58 - so just wait for some seconds
138:03 - and you can see it's pushed so i'm going
138:06 - to go to
138:07 - my docker hub web page
138:11 - and then refresh this web page
138:14 - and now i can see this image which
138:18 - is available here and also you will be
138:20 - able to see
138:21 - that this image is a public image
138:24 - so it's not private so anybody
138:28 - on docker can see your image right
138:31 - also when you click on this image
138:34 - you will be able to see more information
138:37 - about the image
138:38 - so here you can give that little
138:40 - description for your image
138:42 - and also you can even write the readme
138:44 - for
138:45 - your image uh what it's doing and what's
138:48 - the purpose of this
138:49 - image right so here is the general
138:52 - information about the image
138:54 - you can also see this tags uh section
138:58 - where you will be able to see uh the
139:01 - tags related to your image i only have
139:04 - one tag here
139:05 - and the size of this image is around
139:09 - 746 kilobyte right
139:12 - and also you can see how you can pull
139:14 - this image so you can just
139:16 - pull this image using docker pull
139:18 - codebind forward slash
139:20 - hello and then you need to use this tag
139:23 - you can just copy this and then pull
139:26 - this image also
139:27 - also you have the build section this is
139:30 - for the automation so if you are using
139:32 - github or bitbucket automation system
139:36 - then you can directly push your image
139:38 - from the github
139:40 - or bitbucket into your docker registry
139:43 - you also have the collaborator tab and
139:45 - then
139:46 - webhooks also and then you have the
139:49 - settings related
139:50 - to your docker image right so you can
139:54 - make it
139:54 - private if you want and also you can
139:58 - delete
139:58 - your image from this section right so
140:02 - let's say i just want to pull this image
140:04 - i will just copy this text
140:06 - and then i will just uh write sudo
140:09 - and then paste uh this test text uh
140:12 - which i have copied which is
140:13 - uh docker pull and the name of my image
140:16 - with the tag
140:18 - and it's going to pull this image if
140:20 - it's
140:21 - already not there on your operating
140:24 - system so this was the simple
140:26 - demonstration
140:27 - using which you can create your images
140:30 - and then push your images to the docker
140:32 - hub and then manage your images
140:35 - using the docker hub so i hope you've
140:37 - enjoyed this video and i will see you in
140:39 - the next video

Cleaned transcript:

so first of all what is docker so docker is an open source project that automates the deployment of applications inside software containers by providing an additional layer of abstraction and automation of operating system level virtualization on linux so that is the definition which is available on wikipedia but really what is docker so docker provides a uniformed wrapper around a software package and this wrapper is called docker container which you can ship or build and inside these containers you can run any app anywhere now docker containers are similar to shipping containers now as you all know in the shipping container the container size is always same regardless of the content inside the container so these container can fit on all trucks or ships or trains regardless of the content inside the container in a same way docker packages a software into standardized unit for development shipment and deployment so let me give you a real world example so let's say i developed a node.js application which depends upon some version of node.js and it uses some database and it's dependent on some shared library let's say and i want to give this software to the devops guy or let's say to my colleague to run it on his computer or on the qa system or on the cloud by devops or in the production system so i don't really care where it runs i just care that it should run when somebody tries to run my software now if docker is not present or any containerized system is not present the normal procedure will be that i give my software to my colleague or the devops guys and he has to install all the dependencies and for example node.js version and the database system exactly like a system on which i have tested my software now if you will just use docker to containerize your system you just need to package your system into a docker container and you can just give this docker container to your colleague or the devops guys and he will just run this docker container on the cloud or a qa machine or any other production system wherever he wants to run it and he can just run your software without worrying about all the dependencies or the environment setup which your software depends upon so nowadays docker is becoming more or less a standard for the containerizing systems and you can find the docker containers everywhere on linux operating system or windows operating system or in the data center cloud serverless application and so on now let's compare docker container versus virtual machines so containers and virtual machine have similar resource isolation and allocation benefits but docker containers and virtual machine functions differently because containers virtualize the operating system instead of hardware and containers are more portable and efficient so when you talk about virtual machines you can see this diagram on the right hand side so virtual machines or vms are an abstraction of physical hardware turning one server into many servers and it is made possible by the hypervisor which allows virtual machines to run on a single machine so each virtual machine or vm includes full copy of operating system so let's say this is your server and on this server you have your hypervisor and on top of your hypervisor you can run different virtual machines so this is virtual machine one virtual machine 2 virtual machine 3 which have this operating system 1 operating system 2 and operating system 3 or you can have the similar operating system in all the three virtual machine let's say now the important thing to note here is each virtual machine includes full copy of operating system the application necessary binaries and the libraries which takes up to tens of gb's of memory and that is the reason that virtual machines can be slower now on the other hand in the container and you can see on the left hand side this diagram so containers are an abstraction on the app layer that packages the code and dependencies together so you have your server and then you have your host operating system and then on top of your host operating system you can run your docker engine and the containers are the abstraction at the app layer that packages the code and dependencies together so multiple containers can run on the same machine and share the same os kernel with other containers but each container runs as isolated process in the user space as a result container takes less space than virtual machine and usually container images typically takes tens of megabytes in size in comparison to the virtual machine which which can take up to let's say several gbs of memory also containers can handle more application and require fewer virtual machines and operating system now when we talk about docker containers versus virtual machines the idea is to use containers and virtual machines together so the containers and the virtual machines can be used together which provides a great deal of flexibility in deploying and managing your apps now let's talk about the docker architecture so whenever you will install docker the docker engine will be installed on your system so docker engine will contain docker cli docker daemon and the docker registry now there is something called docker hub which is a cloud based service where you can share your applications automate the workflow and assemble apps for the components now when you talk about docker two things are really important and these are docker images and docker containers so first of all what is docker container so a container is a standard unit of software that packages up your code and it's all dependencies so the application runs quickly and reliably from one environment to the other environment now when you create your docker container which is essentially a unit of your software it can run everywhere regardless of the kernel version regardless of the host distro the only condition is that the container and the host architecture must match and you can run anything inside your containerized solution so if it can run on your host then it can run on your container that is if it runs on a linux kernel it can run now let's talk about docker container images so a docker container image is a lightweight standalone executable package of software that includes everything needed to run the application that is code your runtime your system tools and the system libraries and the settings so the container images becomes container at run time and in case of docker containers images becomes containers when they run on docker engine so images turns into container when these images runs on your docker engine now it's important to note that your docker image is not a virtual hard disk or vhd it's not a file system it uses union file system and it's only a read only layer also the docker images doesn't have any state so when your docker images runs as docker container inside the docker engine and when you stop these running containers these images will not have or will not save any state so they are stateless so basically an image is a tar file which has a hierarchy and an arbitrary depth and that's how it fits into your docker registry for example docker hub or any private docker registry so this was a brief introduction about docker in this video we are going to see how we can download and install docker on our windows 10 operating system so let's get started first of all open your favorite browser and search for docker but before installing docker desktop application on our windows operating system let's see what are the system requirements for installing this application so before going to the docker.com website i'm going to search on my browser install docker windows which will open this link from dot docs.docker.com forward slash docker for windows and this link i'm going to put in the description of the video also so you can also see all the description here and from here you can click this button which is going to redirect you to the downloads page but before that let's see what are the system requirements for downloading this application so as you can see here for installing docker on your windows operating system you need to have at least windows 10 64bit pro enterprise or education version and hyperv and containers windows feature must be enabled and some other requirements are 64bit processor with second level address translation 4gb system ram and bios level hardware virtualization system must be enabled in bios settings so if you don't have a windows 10 64bit pro version or enterprise or education version then also you can install docker on your windows operating system but the procedure will be little different so for that you can go to suspended products and tools and then go to this tool which is called docker toolbox which is now a legacy for legacy operating systems so here you can just click on the install toolbox on windows button i'm going to just open this link in the next tab and here you can follow the procedure of installing docker toolbox on your other windows operating system for example if you have windows 10 home version or if you have windows 8 or windows 7 then you can install docker toolbox so first of all how to check which windows 10 version you have if you have windows 10 operating system running so for that what you can do is you can just right click on this windows button and then click on run and then just type win ver w i n v e r and then click ok which is going to open this kind of window and here you can find the windows 10 version you are running so as you can see here i'm running windows 10 pro version also the second requirement was let's see the second requirement which is hyperv and containers windows features must be enabled so how to verify that so to check that the simple procedure is just right click on your toolbar windows toolbar and then click on task manager so once this task manager opens you just need to go to the performance section and then you need to verify this section which is called virtualization it needs to be enabled by default it is enabled on your windows 10 operating system so you don't need to do any extra thing unless you have manually disabled this feature so now i'm going to click this button which says download from docker hub and here you will see this web page first so first of all you need to create a docker id if you haven't already have a docker id you can just click on this sign up link here which will open this kind of web page and here you can create your docker account which requires a docker id email address and password and you need to just agree these terms and conditions so once you have your docker id which i already have i'm going to sign into my docker account which is going to redirect me to this page which is the downloads page and from here i can just download this docker desktop application for windows also if you have searched for docker and if you have opened this main website from docker which is docker.com you can just click on get started and then click on download desktop for mac and windows which will also redirect you to the same page and you can see welcome my docker id is shown here so in order to download this desktop application you need to have your docker id you and you need to log in to the docker website in order to download this executable file so let's just click on this button which is going to start the download of this executable file i have already downloaded this executable file so i'm going to cancel this installation and you can see on my downloads folder i already have this docker desktop installer which is around megabytes so i'm going to just double click on this executable file and i'm going to just start the installation so i'm going to minimize this browser and you can see the installation has been started so the first window here is the configuration so i'm going to just leave everything as default and then click ok which is going to unpack all the files the installation procedure is straightforward i guess you just need to click some buttons and docker will be installed out of the box and now you can see after few seconds i can see this docker desktop icon on my desktop and you can see this message which says installation succeeded so i'm going to just uh click close and log out button which will log me out of windows 10 operating system so i need to log in once again so now i have logged in to my windows 10 operating system once again and immediately after logging into my windows 10 operating system i can see this window which says hyperv and container features are not enabled do you want to enable them for docker to be able to work properly i will say ok which is going to enable all these features i thought they are already enabled somehow but according to docker it wants to enable them once again let's say and now i will click on this docker desktop icon from here which is going to start the docker desktop application and i can see this message which is hyperv service vmm is not available if you have enabled hyperv just restart your computer now so i'm going to restart my computer and i will then try to just start docker application once again so now i'm going to click on this docker icon once again and you will see on your tool bar here you can see docker is starting so it will take some time to start docker and i can see this message which says docker desktop is running so i can open powershell and start hacking with docker or docker compose also when you click on this docker icon here you can see bunch of options here for the documentation docker hub switch to windows containers and all other settings here so one thing i will recommend here is to sign in with your docker credentials which you have already created and i'm going to sign in with my docker credentials and after signing in you will be able to see your docker id and the sign out option so let's get started with docker so first of all you can start the command prompt i'm going to just type cmd which is going to show me this option which is command prompt and here you can just type docker hyphen version or hyphen v will also work and you can see the version which we have installed now let's also check if docker is working with the docker hub perfectly fine or not to test this you can just run docker run hello hyphen world okay so just run this command this is the most popular command to test whether docker is running or not or it's able to fetch all the images from docker hub or not so i'm going to just run this command and when i run this command you can see this kind of output so you can see on the first line it says unable to find image hello world latest locally so it didn't find this image locally so it has pulled this image from the docker hub repository so you can see in the next line latest pulling from library hello world and once the pull is complete and you can see the status downloaded the new image hello world and then the latest version of hello world and then it says hello from docker that means everything is working fine with your docker and it's able to run your docker images and this is the first docker image we have run which ran successfully few more commands i can show you here for example you can also say docker images and then press enter and you will see the list of all the images you have on your system so we have just downloaded this docker image which is hello world image so this is how you can download and install docker on your windows 10 operating system in this video we are going to see how we can download and install docker on our mac operating system so let's get started so first of all open your favorite browser and search for docker and the first link which will appear here will be from docker.com so we are going to click into this link and then straight away you can see this button gets started or this button gets started so you can click on one of these buttons and then you will be able to see this button which says download docker for mac and windows so i'm going to just click on this button which will be redirect me to the docker hub website now in order to download the docker binary you need to have a docker account so if you haven't created a docker account you can just click on this sign up link here and then just fill your basic details like docker id email and password and create your docker id and docker account and once you have your docker id and docker account you can just log in with your docker account here on this website so i'm going to just give my docker credentials first is the docker id and then second is the password and now i'm going to just sign into this docker hub website which will allow me to download this docker desktop for mac so i'm going to just click on this download link here which will start the download of the docker now once this docker dot dmg file is downloaded i'm going to just click on this docker.dmg file and i'm going to minimize the browser and you can see this dmg file is opening first of all and once this window opens you just need to drag this docker icon to your applications so it's that simple to install a docker on your mac operating system so once docker is copied into your applications folder you can close this window and open docker from here or you can just go to the launchpad and you will be able to see this docker icon here so you can just click on the docker icon which is going to start the docker on your mac operating system so just wait for few seconds and now you will see this message which says docker is an app downloaded from internet are you sure you want to open it so i'm going to just say open and in the next step i can see this window which asks me to give some privileged access so i'm going to just click on ok and then i'm going to give my max password and now you can see docker desktop is starting on my mac operating system and your you can see this docker icon on top of your mac desktop so i will wait for this docker desktop to start and once this docker's desktop starts we will start testing if everything is working fine in the meantime i can also give my docker id and password to login to the docker using this docker desktop application so let me give my docker id and the password and then i'm going to just say login and you can see i am logged in with my docker id into this docker desktop application and now i can see this message which says docker desktop is now up and running so what we are going to do next is we are going to just uh open the terminal so i'm going to just search for terminal and then i'm going to open the terminal and once my terminal is open i can just check the docker version by just giving this docker version command and then press enter and i can see this long message and here the version information is displayed and then the api version is displayed and all the other information about my docker is displayed here also when i give docker info command so let me just clear this terminal once again and then i'm going to just give docker info command and it's going to give me bunch of information about docker and docker engine and the status of docker engine let me clear this terminal once again and now i'm going to test a docker by giving this command so i'm going to just say docker run hello world and then press enter which is going to fetch this hello world image from docker hub if it's not already present on my mac locally and once this image is pulled it's going to just display hello from docker that means everything is working fine and you can start working with docker now one more command you can use here is this command which is docker images which is going to show you the list of images which are present on your mac operating system and you can see i only have one image right now which is hello world which i have fetched just a few seconds ago and you can see this docker icon here so when you click on this docker icon you can do lots of thing for example if you want to restart your docker then you can just click on this if you want to quick quit the docker desktop then you can click here and there are lots of settings and updates and preferences settings you can do from this docker desktop icon and there are lots of other settings you can do from this window or this menu from here so this is how you can download and install docker on your mac operating system in this video we are going to see how we can download and install docker on our ubuntu operating system so let's get started so what i'm going to do is i'm going to open my favorite browser and then i'm going to search here docker install ubuntu and the first link which will appear here will be from docs docs.docker.com i'm going to put the link in the description also so i'm going to click this link which is the official documentation of installing docker engine community edition on your ubuntu operating system so here you can see the prerequisite of installing docker on your ubuntu operating system so you can see the os requirements and right now i have this version which is 18.04 lts version and if you have the older version of docker or docker io or docker engine installed you can use this command to uninstall previous versions of docker now to install docker you can just scroll a little bit down and they have the very good documentation of installing docker on your ubuntu operating system so we are going to just copy these commands and paste it on our terminal and we will be good to go so the first command is sudo aptget update so i'm going to just copy this command and i'm going to just open my terminal here and then just paste this command and then give my ubuntu's password and then just press enter it's going to update all the repositories and then i'm going to just copy the second command in a meanwhile so this is the second command and in the second command we install the packages to allow the apt to use the repository over https so let's just copy this command and go to our terminal and then let me just clear the terminal and now i'm going to just paste this command and then press enter which is going to start the installation i'm going to press y and then press enter and in the meantime we are going to copy the third command which is to add docker's official gpg key so for that you need to have curl and curl we are installing using the second command so when the second command is finished you will have curl on your system and then we can just give the third command so hopefully that is complete so let's clear the terminal once again and then paste the third command and it's okay so we will move to the next command which is to verify that you now have the key with the fingerprints so i'm going to just copy this and then paste it here and verify this and you will see the similar result which is also shown here when you give this command so now we will move to the next command which is to install the docker repository so for ubuntu you need the first option here which is x 8664. so i'm going to just copy this command once again and then go to the terminal clear this terminal and then paste this command and then press enter which is going to install the docker repository and then in the next step we are going to update the repositories once again before installing docker so here you can see the next command which is to update the repositories again and then we are going to just install the docker so after update we are going to install the latest version of docker engine which is the community version so for that we just need to give this command which is going to install docker ce and docker cecli and containered dot io so i'm going to just copy this last command and then paste it to the terminal so clear the terminal just paste this command and then just wait for the installation to complete so it's that easy to install docker community edition on your ubuntu operating system and if you want to install a specific version of these packages you can give these commands so when you give this command apt cache medicine docker minus ce you will see a different version of docker which are available for your ubuntu operating system so from here you just need to take the version and then replace this placeholder for the version string with the actual version of whatever tool you want to install so for example if you want to install the version of docker ce for example we need the latest version of uh the docker ce then you can just copy this and then just replace this placeholder string by this string okay same you can do for the docker cecli so once this command is finished i'm going to once again clear the terminal and we are going to run this command which is sudo docker run hello world in order to test whether everything is working fine or not and here i'm going to just write sudo docker run hello hyphen world and then press enter and i'm going to give my ubuntu's password and you can see when you run this command it prints hello from docker so first of all what happens is because we are running this docker command for the first time it's going to find the docker locally and if it's not found then it's going to pull your docker image from the docker hub and then execute this hello world image which is going to print this kind of output so if you see this kind of output that means docker is running on your system and also you can check the docker images now so you can just give this command sudo docker which is going to list out all the docker images you have on your ubuntu operating system so that's how you can install docker on your ubuntu operating system in this video we will talk about how does docker works and we will see some commands related to docker and docker images so as i have told you in the earlier videos also you can build your docker images that holds your applications using docker files and then you can create your docker containers from those docker images to run your applications and then you can share your docker images via docker hub or via your private registry now if you want to see this docker flow in the form of a diagram you can see this diagram here so you can create a docker file which we are going to see how we can create a docker file in the later videos so docker file is a file from which you can build your applications into docker images so what happens is you pull some images which are already there on the docker hub and you use those images with your application and you write all that uh code or that script inside your docker file so how will your application run inside a container you write everything in a docker file and then you build your docker file which will create a docker image and when you run your docker image it will be converted to a docker container now let's see some commands related to docker so the first command which i want to show you is the docker search command so you just write docker search and then you give your options for example whatever image you want to fetch from your docker hub you can just write that image name for example i just write ubuntu here so you can search all the images which are there related to ubuntu on docker hub using this command so docker search ubuntu so when you give docker search ubuntu you will see this kind of result in the form of a table and the first column here is the name the second column here is the description third is the number of stars and if the image have more number of stars then it's more popular also you have the column for official so if you see ok under official for a particular image so for example this first image with the name ubuntu is the official image on docker hub and you can also see some description here so clearly uh this first image which is an official image also is the most popular image on docker hub about ubuntu now let's see some options which are related to docker search so i'm going to just write docker search here and then i can give the filter option which we use to filter our results so i'm going to just write a filter here so let's say we want to filter our result on the basis of stars an image on the docker hub so i can just write stars here is equal to 3 and then the name of an image i'm searching for so for example i'm searching for ubuntu here so i will just write ubuntu and this example will display the images with the name ubuntu and which have at least three stars i'm going to just press enter so you can see all the result of the images which have at least three stars now if you give here let's say number of star is equal to 100 so it's going to search for all the images which have at least 100 stars now if you want to give more than one filter you can add this filter option once again so you can just write hyphen hyphen filter and then the next filter so the first filter we have here is for the stars and the second filter i have added here is for the official image so i just want all the images which are official so that's why i have just given this filter which is is official is equal to true and then i'm going to just press enter and i will only see the official images which are present on the docker hub and which have more than 100 stars in a similar way i can also search for automated image which are not official but which are there by some users which are there on docker hub right so it's going to show you all the images which are not official but automated now there is this option which is called uh no trunk also which is going to show you the description without truncating uh this description so right now you can see in the description you see this description and these three dots so that means this description have more content in the description so i can just give this option which is no trunk which is not going to truncate this description it's going to show you the full description here so sometimes this option can get really messy if the description is really large so just use it wisely now instead of for this hyphen hyphen filter you can also simply write hyphen f for the filter option so either you can just give the full filter option or you can just give hyphen f for the filter and the result will be the same now the next command which i'm going to show you here is the docker images so i'm going to just write docker images and this command we use to list out all the local images you have on your host so when you give this command docker images it's going to give you all the images which you have on your host as i said and right now i only have one uh image which is hello world image which we have pulled in the previous videos when i have shown you how to install docker on your various operating system so right now i only have one docker image which is hello world now there are some options which are related to docker images so we are going to see all those options one by one so with this docker images option you can give the name of the image now let's say i give here the option java so you can list the images using the name or the tag so when you give this docker images java command it's going to search all the images related to java and you can see there is no image which is related to java on my host machine so let's pull the java image from the docker hub so i'm going to just write docker here and then pull so the pull command you can use to pull an image or a repository from docker hub or from your private repository so i'm going to just pull the java image from the docker hub so you can see when you give this docker pull java command it's going to pull always the latest tagged image from the docker hub and in the output also you can see using default tag so the default tag is always the latest tag that's why it's going to pull the latest java image so now you can see this java image with the latest tag is downloaded on my host so let me clear the terminal and now i'm going to give the docker images command once again so docker images and now i have the java image with the tag latest and the hello world image with the tag latest so now i can use the docker images and then the name of the image also so i can search uh based on the name of the image also so i can just write docker images java which is going to just give me the images which are related to java i can also search with the image name and the tag so let's say i want to search for the java image which have the tag let's say 8 which is not present on my host so it's going to give you the empty result without any image if you give the tag which is present so the latest tag is present on my host so it's going to give you the java image with the latest tag so let me give the docker images command once again and you can see by default in the result you will see the name of the repository or an image then the tag of that image and then the image id this id is very useful when you have a multiple image related to let's say java so you can use this image id to remove that image or work with that image so that's why this id is important also you can see when this image is created and the size of the image so the different images with different tag have different sizes so sometimes you want the images with the less size or sometimes you want the images which have the full feature so in that case you can use a different kind of image with different tag which suits your requirement for your application in this video we will talk about basics of docker file so first of all what is a docker file so docker can build images automatically by reading the instructions from the docker file and a docker file is a text document that contains all the commands a user could call on the command line to assemble an image now as i have previously told you you can use docker file and then once you write your instructions in the docker file you can build your docker file to produce a docker image and when you run the docker image it's called the docker container so let's see how we can create a docker file and then we will see how we can build our docker file to make an image so right now i'm in my home directory so here i'm going to create a directory called d1 let's say and then i'm going to cd in this d1 directory and right now it doesn't contain any files or folders so let's create our docker file in this d1 folder so i'm going to just write touch and then docker file so by convention we usually name our docker file as docker file with the capital d and this docker file doesn't contain any extension so it's without any extension so let's create this file so now i have this docker file in my deven folder right so now i'm going to open this docker file in any editor you can use the editor of your choice right from the nano bim or any editor i like to use the visual studio code editor so i'm going to use that so i'm going to just write code and then i'm going to just write dot which is going to open the current directory in my visual studio code so here i have this docker file right now in visual studio code there are many extensions you can install related to docker that's why i like to use this visual studio code and straight away when i open this docker file in my visual studio code i can see this popup which says docker extension is recommended for this file so you can click on this install button or you can just install this docker extension from this extension option here also so you can just search for docker here and then it will give you the most popular docker extension right so just choose the most popular one from here and i'm going to just install this docker extension and once this extension is installed it's going to help you with your docker files and docker commands in general okay so there are bunch of keywords which you can use inside your docker file and each keyword means something so we will start with the arg keyword so this arg keyword we can use to provide any argument as the name suggests and i'm going to explain this arg in detail after the other keyword which is from so here what i'm going to do is i'm going to just write version here and version equals i'm going to give here is 20.04 so version here is the name of the argument and 20.04 is the value of the argument now after this we are going to use another keyword which is from now this from defines the base image used to start the build process so there are many base images which you can find on the docker hub and we are going to use one such base image which is ubuntu and then after colon you can choose which version of ubuntu base image you want to have so here uh as i have defined this arg is equal to 20.04 so we are going to fetch the ubuntu 20.04 from the docker hub as our base image so how we can use this argument with this from uh keyword you just need to use this dollar symbol and then inside these curly brackets you just need to pass your argument so my argument name is version so i'm passing uh this argument here this means that we want to fetch the ubuntu 20.04 image from the docker hub now this from instruction supports variables that are declared by any arg instruction that occurs before the first from and an arg declared before the from keyword is outside of the build stage so it can't be used in any instruction after from so now once we have the image we are going to use one more keyword which is the run keyword so this run is the central executing directive for the docker file so this run you can use to run commands using the docker file so for now i want to run inside this ubuntu base image apt get update command and also i'm going to give the flag y for yes and now let's move to the next command so the next command i'm going to use here is the cm d command so the cmd command can be used for executing a specific command within a container so let's say i just want to run the bash inside the container so i'm going to just use these square brackets and with the double quotes i'm going to just write bash here so this is a very basic docker file now let's see how we can just use this docker file to build some image so i'm going to open the terminal inside my visual studio code editor and as i can see i'm in my d1 directory which i have created and here i have this docker file right so now let's list out what are the docker images we have on our system so i'm going to just write a sudo docker images command to list out all the images and now i want to run or build this docker file and create an image so right now we have hello world and i want to create one more image using this docker file so to build a docker file you can give a command build so just write sudo docker build and then dot so when you run this docker build command the current working directory is called the build context and by default the docker file is assumed to be located in this directory but you can also specify the directory path using a flag called hyphen f that we will see a little bit later but just give this command for now which is sudo docker build space dot so now you can see that when we run this docker build command the build is run by the docker daemon not by your cli so the first thing a build process does is to send the entire context to the docker demon and that we can see here sending build context to the docker demon now in most cases it's best to start with the empty directory and then you start adding your docker file in that directory now when you run this docker build command you will also see that these layers are fetched from your base image from the docker hub and also you will be able to see which step is executed so the step one out of four is this arg step step two is the from step and at this step it's going to pull the base image from the docker hub and you have some intermediate layers here which are created and then we have used this run command which in itself has created its own layer and it has installed the updates using this updates command and at last we have given this cmd command so now let's give the docker images command once again so i'm going to just give sudo docker images command and now you're going to see this ubuntu base image which is fetched from the docker hub and you have this image which doesn't have any name or tag because we haven't provided any name or tag to our docker image and this only have this image id which you can see here also which is successfully built this image id so using this image id you know that your image is created here now let's say you are in some other directory other than the directory in which your docker file is there so for building a docker file from some different directory you use the hyphen f flag so what you do here you just use sudo docker build and then hyphen f and then you just give the path to your docker file so when you give this command and then you need to provide the context also so you need to create this context inside this current directory so when you give this command it's also going to give you the same result so because we have effectively given the same command so we don't need to modify our image so once again when you give the docker images command it's going to show the same image because your image is not modified and you haven't changed your context which is your current directory now as you can see we don't have any name and tag to our image so if you want to provide the repository name and the tag for your image what you can do is you can give this docker build command and then give the hyphen t flag so using this hyphen t flag you can specify the repository and the tag at which you want to save your image so let's say i want to give the repository name as my underscore app and the tag which i want to give here is let's say one so after the colon you can provide the tag also here so when you run this command and don't forget to provide this context which is dot which is the current directory and then press enter it's going to just create the same image and you will see here an extra step is shown here which is tagged with my app colon one so at this step also you will observe that docker is smart enough to know that you want to create the same image from the same docker file and you haven't changed your docker files so it's not going to change your image or create or recreate your image once again because we haven't changed our docker file right we have just give the repository name and the tag so now when you give this command docker images then you will see that the repository name is my app and the tag associated with it is one so this is how you can give the repository name and the tag now if you will observe here we have our base image also here which is ubuntu 20.04 so in future if you create different docker file and it requires the same ubuntu docker image and the same tag which is 20.04 then your docker build command will be smart enough to know that and it's not going to pull this image from the docker hub again because you already have this image on your local pc so as i said we have fetched this ubuntu image and the version for it is 20.04 here in the version if you don't know the version you can always write the latest so just write latest here and it's going to just fetch the latest version of the base image you want to have so let me just save this file with the latest version and then run the same command with hyphen t my app and the tag will be the same and the context will be the same and now you will see that it's going to fetch the latest version of ubuntu here and now when i give this docker images command you will see the tag latest here instead of 20.04 which was this more specific version i wanted right so latest is the latest version which will be available on the docker hub for this base image so those are some of the basics of docker files we are going to learn about docker files in the upcoming videos also till now we have learned the basics of docker files and how we can create docker images using docker files now in this video we are going to learn about docker containers so as i have told you earlier when you run an image it's called a container so in the last video we have created this docker file and we have already built our docker file to produce an image so let's list out the docker images which we have created in the last video so just give the command docker images here and this was the image which we have created we have named our image as my app and the tag which we have given to our image is one here now this is the image id so let's see how we can run this image to create a container now in order to list out all the running containers you have the command which is called sudo docker ps which is going to give you the list of all the running containers so right now we don't have any running container now if you want to see the list of all the container including running or thus exited containers then you can give the command with the flag hyphen a and it's going to give you the list of all the containers you have on your system so it's going to give you the list of all the running container as well as if they are exited and if they are no more running then also it's going to give you the list of all the containers so you can see i have ran this hello world container two months ago right and right now the status of this container is exited that means it's not running so this is how you can see the list of all the containers now to run a container what you need is a command called run so you just write sudo docker run and then you can give with this run command some options for example and then you give the name of the image so it requires uh the image in order to run a container and then you can give some commands so you can give some commands with the docker round image and also you can give some args here okay so let me just write args right so this is the basic syntax of a docker run command so let's say we want to run our docker image which is my app right so let me just once again give this docker images command and i want to run this image so to run a container you just need one thing which is the docker image so you can just write sudo docker run and then the image id so this is the image id of this repository which is my app so let's say we want to run this image so i'm going to just take the image id of this image and then i'm going to just press enter and as soon as i press enter it's going to run the container and exits immediately so when i run this docker run image id command then it's going to run and it's going to exit immediately right so when you give this uh docker ps command so let's list out all the running containers right so all the running containers still you will see there is no running container but when you give this command with hyphen a flag which means we want to see all the containers then it's going to show you that it ran this uh container with this image so we uh ran the container with this image and this is the same image which we have used in this command right and it was exited about a minute ago right so it ran and it exited immediately now here one more interesting thing to note here is when you run the container with the run command dot co automatically generates a container name with a string of randomly selected numbers and letters so if you uh are wondering what this name is this is just a automatically generated name which is generated by docker for you now if you want to give a specific name to your docker container there is a flag for that so we are going to run the docker run command for the same image and this time what we are going to do is we are going to give some name to our container so before the image id i'm going to just provide this name flag and then i can give the name to my container so the name i have given here is my ubuntu container to my container and let's give the same command with this flag and once again you don't see any output here on the terminal but as i have told you it has just ran the container and exited immediately so when we give the docker ps hyphen a command once again you will see this time that now our container name is my ubuntu container right so this was the container which uh we ran earlier and this time with the last docker run command we have given the name to our container and the image was this one so image is unchanged but we have created a new container with the name my ubuntu container right and the command which we ran is badabash command which is coming from this line of docker file now when you run your docker containers it's run in two modes one is attached mode or in the foreground and other is in the detached mode or in the background and by default docker runs the container in the attached mode that means it's attached to the terminal session where it displays the output and the message so if this docker file has some commands or some output related to this docker file then it's going to show you the output in the terminal when you run the container with the docker run command but because we don't have any uh output associated with the docker file it doesn't show any output right now if you want to run your docker file in the detached mode what you can do here is you can give the hyphen d flag that means you want to run your container in the detached mode so just give hyphen d and then i'm going to give the same command here and let's see what happens and you can see it's going to give you this message which says error response from the daemon conflict the container name this is already in use right so this container we have already defined so you cannot create this container with the same name so you need to give the different name here so let's say i'm going to just give my ubuntu container 2 now okay and then i have also given this hyphen d command to run it in the detached mode and now you will see that there is an output which is printed here and this is the container id of your container now if you have observed here in the previous command where it has should thrown this error it has this long container id now when you give the docker ps hyphen a command you will see in the container id some part of this container id is shown so for example i can see here up to this part of the container id is shown but in the background the container id is so much bigger right so now when i give the docker ps hyphen a command once again i can see one more container which is created and the container id you can see it's going to show you the starting few uh values of the container here until i think until d so using this id also you can delete or work with your container or you can take the full id of the container and work with your container okay so this id will also work or in the short form or the first few letters of the id will also work which is shown here now we have seen that how we can run our docker container in the detached mode and as i told you that by default docker runs the container in the attached mode or in the foreground right now let's see how we can run our container interactively so docker allows you to run the container in interactive mode that means you can execute commands inside the container while it's still running so let's see how we can run our docker container interactively so now what i'm going to do here is i'm going to just create a new container let's say it's container 3 my open to container underscore 3 and i don't want to run it in detached mode instead i want to run this container in the interactive mode so here i can give hyphen i t flag which means that we want to run our container in the interactive mode and the image name is same which we have created using this docker file so let's see what happens when i run this command like this so when i run this command like this you will see the bash shell which appears here and this is what i was expecting so now as you can see here in this docker file when we have created this image the last command which we wanted is this bash command and it has just given us this bash command shell in the last right so this is how you can run your container in the interactive mode now when i open the new terminal so let this terminal be like this and let me open the new terminal in the visual studio code you can open the new terminal by just clicking on this plus button or you can open your default terminal on your operating system also you can see i'm in the second terminal and here i'm going to give this sudo docker ps command without hyphenae that means i want to see only the running docker containers and then i'm going to provide my password of my operating system and this time you will observe that when i give this docker ps command it's going to give me some output because now the container which i have created which is my ubuntu container 3 is still running in the other terminal as you can see we have uh running bash shell in the docker container so this bash shell is running inside our container right so when you uh just give some ls command you will see the file system directories here inside your container you can also give for example up time so as the name suggests the uptime command will give you the time for which the system has been up or running right and as we have seen in the last video we have only uh given this bash command so our container is not doing much it's just opening the bash a shell now there are many interesting things which you can do with your docker run command and that we are going to see in the next videos also i want to show you uh some more commands related to docker run and uh docker in general so now what i'm going to do is i'm going to switch to my terminal so i'm going to open my default terminal on my ubuntu operating system also i'm going to open my browser and i'm going to just search for docker hub i want to show you how this docker hub looks like so the first link here is hub.docker.com and when you click on this link you will see uh this web page here from where you can just sign in with your docker id which you have created earlier or you can search for some images so let's say i'm going to search for an image called busy box and then press enter and you will see an official image of busy box and as you can see uh you will see the tag here on the top which is going to show you if it's official it's going to show you it's an official image and otherwise it's going to show you verified or the other information associated with the image so the most popular one and the official one is this one so i'm going to just click on this base image and here i will see some more information related to this image so if i want to just pull this image on my pc i can just give this docker pull busy box command so let's do this and i'm going to show you how we can use the docker run command with the busy box uh image which we are going to pull so i'm going to just write docker pull busy box here and then press enter and i'm going to just give my ubuntu's password which is going to just pull the latest tag image of the busy box right so if you don't provide any tag after colon then it's going to pull the latest image so now let's run the docker images commands so i'm going to just give images and now you can see this busy box image is there so you can run the docker run command with the images you have in this list also so till now we have seen how we can run the docker run command with the container which we have created but you can also use this docker run command with the base images also for example busy box or ubuntu 20.04 or ubuntu latest version and i have pulled this busy box base image because it's very small in size you can see it's only around 1.22 megabytes so if you want to quickly test something with some linux terminal or linux operating system busy box is the image to go so now as i told you you can use this docker run command with the images you have in your local pc so you can just give docker run and the name of your image which is busy box here and then you can do something with it so you can just write echo so it means that we want to run the echo command inside our busy box container when it runs and let's say we just want to print hello world here so i'm going to just write hello world and then press enter and it's going to run this busy box image as the container and it's going to print or execute whatever command you have given after this busy box command right so basically what this means is we are running echo inside our busy box container also when you give the docker ps hyphen a command so let's give this docker ps hyphen a and you will see this busy box command also so you can see this busy box and what command it has ran so we have we ran echo hello world and it was created 42 seconds ago and it was exited right so status is executed now let's say you just want to work with the busybox shell what you can do you can just give the same command but instead of giving this echo you can run it in the interactive manner using this i t flag and then you can just tell that you want to run the shell so just write sh which is going to run this container and open the shell inside the container right so let's give this command and when you give this run command with the id flag it attached us to the interactive tty in the container right so because we are running the sh command after this run command so it's going to open the shell inside your busy box container and here again you can run your basic commands or whatever you want to do inside the container so we are not working inside our operating system we are working inside our container now in order to exit from the container you can just give this exit command and you will come out of this container now the last thing which i want to show you before just finishing this video and that is how we can remove some containers so now we ran so many commands and we have so many containers and as you can see we have so many dead container that means all the containers are exited and they are not running anymore so when you give this docker ps command you can see only one container is running and all the other containers when you see using hyphen a are exited so let's say you want to remove some of these containers so let me clear the terminal and let me just give this docker ps hyphen a command so let's say i want to remove this container and this container so there is a very simple command which is called rm so you can just write sudo and then the docker command and then just give rm and then after that you can give the container id of the container so let's say i want to just give this container id of the container so just copy and paste this container id and then press enter and if you see the container id in return in the output that means this container is removed so once again when you give the docker ps hyphen a you will see that this container is already removed right in the same way you can remove multiple uh containers using this rm command so you can just give container id space container id to space you can give multiple container id in this manner and it's going to remove all the container ids which you have given after the rm command so so right now we want to remove two containers and as i said if you see the container id in the output that means that container is removed and in my case as i can see this container is removed but the container with this id is not removed means the container with this id is not removed because it's running right so if the container is running and if you want to remove it you need to stop this container first and then you can remove the container so as i have shown you this container is running here so i i can either just give this exit command or i can stop the container let's see how we can stop the container using a command called stop so let's say i want to just stop this container so i can just give the command docker stop just write docker stop and then the name of your container so my container name is this one so i want to stop this container and then press enter and if you see the container id in the output that means this container is stopped so when you give this docker ps without hyphen a you can see there is no container running anymore and now in the list of all containers you will see this container and now when you give this docker rm with this container id it's going to give you the output that means this container is successfully removed okay so you use top command to stop the container and then you can use rm command to remove the container in the last few videos we have seen the fundamentals of using docker files docker images and docker containers now in this video i want to give you a concrete example of using the docker container so i'm going to give you a real world example of how you can really use docker containers and how these docker containers are really useful in certain situations so we are going to compile and run a c plus program inside a docker container now you might say that uh compiling and building a c plus plus program on your host operating system is also easy so why do we need a container so consider a situation in which you have a c plus plus program and you want to compile a c plus program with different version of gcc let's say now it's really hard to maintain different version of gcc on your linux or windows operating system but using docker containers it's really easy to use and compile your program in different gcc versions using docker containers also let's say you want to develop a c plus program which works on multiple operating system or you want to compile your c plus plus program for a cross plate form application so docker containers are really useful for c plus plus cross platform development with containers with containers you can choose a target with a platform that runs completely different operating system other than your host operating system or the system on which you are developing so let's say you are just working on your windows operating system but you want to compile your c plus plus program on a linux operating system or any special version of linux operating system you can do it easily with the docker container so let's start with our example so as you can see on my visual studio code i have opened a docker folder and inside this docker folder i have this directory d1 which we have created in the previous video and now i'm going to create a new directory inside this docker directory and i'm going to name this directory as d2 and now i'm going to just go inside this d2 directory so let's go inside this t2 directory and here inside this d2 directory i'm going to create a new cpp file let's say so you can use touch on the terminal or you can just click on new file here and then just create a new cpp file with the extension cpp i'm going to name my file as main dot cpp and as soon as you create a cpp file inside your visual studio code editor it's going to give you the suggestion for the c plus plus extension so i'm going to install this c plus extension so now this c plus extension is installed and this c plus plus extension is going to help me to uh work with the c plus plus file inside my visual studio code editor so what i'm going to do here is inside my main.cpp file i'm going to just write a very simple program here which just prints hello docker container so normally what you will do on your host machine if you have a g plus plus or gcc you can compile your c plus program using the g plus plus right so you can see i have this main.cpp so i can compile this program using g plus plus hyphen o and then the executable file name which i want to create let's say i want to just give the name test to my file and then my main.cpp file right so i'm going to just uh press enter which is going to create this executable file you can see here also i'm going to do ls here also so you can see this executable file and now you can just run this test executable file or binary file using this command dot forward slash and the name of your binary file and it's going to print hello docker container and i want to create a docker container and i want to compile my c plus plus program inside my docker container and i want to run my c plus plus program inside my docker container this is what i have done in my host machine not inside my docker container right so let me just clear the terminal and inside my d2 directory where my c plus file is there or my cpp file is there i'm going to create a docker file so i'm going to just right click and i'm going to just create this docker file here and then press enter and i can remove this test binary file because i don't need it for my docker container now if you don't know which base image you want to use so for example if you want to use gcc to compile your c plus plus program you can go to docker hub and search for gcc here and when you search for gcc you will be able to find the official gcc image here you can see docker official image or let's just press enter and see what result it gives so you can see the official image is this one with this official image tag and it has more than 10 million downloads so i'm going to just click on this gcc link and you can see when you just scroll down what are the tags you can use with gcc also you can see how you can pull this gcc base image using docker so the name is really simple gcc so what we are going to do is we are going to just write from and then our base image i'm going to use here is gcc now the version or the tag i want to use here is the latest or you can choose the tags which are available here so you can choose 10.2.0 or 10.2 or from all these tags which are available here you can also go to tags section and see the more specific tags you want to use for your c plus plus program so now once we have the base image the next step is to copy our current folder which contains our cpp code into the docker image under the file system where we want to copy this so for copying our local files into the docker image we use this copy command okay and as you can see it suggest us uh that we need to provide the source so source in our case is dot because we want to copy all the files from the current folder and the destination will be the destination inside the file system of your docker image in our case it's gcc so in gcc base image file system you will find this path which already exists there so you can just write user forward slash src which is already there inside the file system of gcc base image okay so as i said this command is going to copy all the files which are there in your local directory to this directory inside your docker image okay now if you want to copy some specific file then you can do this also you can just write main dot cpp and then you can copy a specific file into uh the folder which should already exist inside your image which you are using right so for now for simplicity i would just want to copy all the files from the color current directory to user forward slash source forward slash the directory which we are going to create so let's say we want to create this directory where we want to copy all the files cpp test let's say so this path already exists in the file system and this is the folder name which we want to create and copy our local files to this folder in the docker image right now we are going to define the work directory so we can just use this work there keyword to define the working directory in which you want to work now okay so because we want to work inside this directory because we are copying our c plus file inside this directory we are going to set our work directory as this one that means when you run any command it's going to run inside this directory which you set as work directory now in the next step i want to run the command which will compile the c plus plus program using this main.cpp so now i can just give the g plus plus command then hyphen o as the flag and let's say i want to name my binary as test and the file name which i want to compile is main dot cpp so this run command is going to compile my c plus program inside my cpp test directory under user source folder right now in the next step i'm going to give the command using cmd which will be the command which i want to run inside the container so this is going to run the program output from the previous step into our container so this works like this as you have already seen in the last video also so if you want to run your binary you can just give dot forward slash and the name of your binary which is test right so this binary is going to be uh run using this cmd command inside our container so that's it that's how you can create this docker file to compile your c plus program and run it now let's build our docker file to create an image for that you can just give sudo docker then your build command so build and then the build context and then you can provide hyphen t to provide the name of your image i am going to name my image as cpp underscore test for example and then you can also give the tag to your image let's say i want to provide the tag one to my image okay so this is going to create a docker image using the docker file so you can see it has pulled the base image in the first step then copied our files from the local directory to the directory which we have defined and then it has set the work directory and then in the next step it has compiled our c plus program and in the last step we have set the test binary to run when we run our container so now let's list out all the images you can just give docker images command for that and you will see that this repository is created about a minute ago and this is the image id for that image right so now we want to run our container using this image so for that we have seen in the last video we can give sudo docker run command and then i'm going to give the hyphen hyphen rm flag and this rm flag causes docker to remove automatically the container if it already exists so if the container which we are going to run already exists then it's going to remove that container and then it's going to rerun that container so this command is handy when you want to just run only one container at a time and then i'm going to give this i t flag with hyphen so i t flag for running this container in the interactive mode and then your image so you can give this image name cpp test here or image id also you can give so i am going to give the image name which is cpp underscore test with the tag so tag we have provided is one okay so here as i said you can give the image id or the repository name and the tag and then when you run this docker container it's going to print hello docker container that means we ran the test binary inside our docker container right now as i said you can change this tag instead of latest you can choose the version of gcc you want to use for compiling and running your c plus programs so that's why this docker and docker containers will help you to just cross compile in cross platform applications now let's say you want to compile your c plus plus program using the c lag compiler instead of gcc okay so we want to compile our program using c lag compiler instead of gcc so let me clear this terminal and let me go one directory up here and i'm going to create a new directory so i'm going to just write mkdir d3 and inside this d3 directory what i want to do is i want to just have the same cpp file so i will just copy this cpp file into the d3 uh directory also and then we are going to create a docker file inside this d3 directory so let's create this docker file here so now let's move to the docker hub website and let's search for c lang if we have something related to c lang compiler on docker or not so i'm going to just write c lang here and as i remember there is no official a base image for c lang on the docker hub so what we can do we can use the base images we already have on our system and then we can install the c lang compiler on that base image so i'm going to just give this sudo docker images command and from these images let's say we will use this ubuntu latest or ubuntu 20.04 to compile our c plus program inside the ubuntu base image using the sealang compiler okay so what i'm going to do is i'm going to just write this kind of docker file i'm going to explain you all the steps one by one so we want the base image ubuntu with the tag latest because we already have downloaded or pulled this image in the previous videos so we don't need to pull it once again now in the next step i'm running apt get y update and app get install update to update apps on the base image so that's what you do when you want to install any software on your ubuntu operating system so this command is going to update the apps on the base image now in the next step using this apt get hyphen y install c lang command we want to install c lang on our base image which is ubuntu right the next step are relatively easier because we have seen these steps in the other docker files also so we want to copy all the files in the current directory into this directory inside our base image and then we want to set the work there which is the same where we have copied our c plus plus files and then to compile your c plus program using c lang you can just replace the gcc with c lang plus plus and the rest of the command will look like same as you have seen in the case of gcc also so you can see g plus plus hyphen node test main dot cpp and here also you can give this command the only thing i want to change here is the main dot cpp the file name here okay because our binary name is test we are going to just run this binary using this command so this is going to run inside our container okay in the d3 folder i have created this docker file to compile my c plus plus program using c lag and i'm going to run this now so let me clear the terminal once again so now let's build our docker image using this docker file so for that i need to go inside the d3 directory and then i'm going to give the docker build command with the context or in the current directory and then hyphen t to give the name of my image so let's say i want to give the name to my image as c lang underscore cpp and the version or the tag which i want to provide here is let's say 1.0.0 okay so let's build our image using this command so now as you can see the build of this image is successful with the name c lang underscore cpp and the tag 1.0.0 so let's run the container for this image using the docker run command so i'm going to just provide sudo docker run oops by mistake i pressed ctrl c that's why it break so let me just give this command once again and then give this image name with the tag 1.0.0 so we want to run our container using this image so let's press enter now and as expected we see hello docker container that means we successfully ran this binary file which is compiled using clang in our container and the output is printed now let's say you want to change something in the output so instead of let's say hello docker container i just want to print hello world here okay so i will just save this program and then i can just build it again but this time i will build it with the different tags so let's say i just did the miner change so i will just change the tag as 1.0.1 so let's build this image which is going to be built really fast and now let's run this image using this docker run command but don't forget to change the tag because i have changed the tag for the image also to 1.0.1 so here also i'm going to change the tag for the image and then press enter which is going to run this program and it prints hello world so how simple is this so this is how you can compile and run your c plus plus programs using docker containers so as i said i just wanted to give you a real world example same thing you can do for your java programs or any other programs which you want to run in different environments in this video we are going to see how we can do port mapping between your docker container and your host machine so let's say you have some kind of a server and that server listens on some particular port so you need to expose your port from your docker container so the outer world will be able to interact with your server so in this video we are going to take an example of a node js server the same concepts you can apply on any other kind of server it can be a nginx server it can be a python flask or django server or any other kind of server so let's start with our example of dockerizing our node.js web app so what i'm going to do is i'm going to just create a new directory for me so i'm going to just write mkdir d4 and then i'm going to go inside that the 4 directory and here i'm going to create a new node js app so for initializing my app i'm going to just write npm init and then hyphen y and then press enter which is going to create a package.json file inside my d4 folder now for this node.js server i will be using express so i need to install express locally for this app so if you already know something about node.js or npm you can easily install the npm package using npm ins tall and the package name in our case it's uh express which is a very popular node.js package or npm package so i'm going to just write express here and then i'm going to give this save flag here so it's going to be installed inside my directory and this express will be added a as the dependency in my package.json file so let me uh press enter which is going to install this express package in my directory you can see this new directory is created which is node modules and this new dependency is added in my package.json which is express so now let's create our server.js file so if you can see in our package.json file uh the main entry point right now is the index.js you can change it to server.js and let's create this server.js file server.js here and then press enter which is going to create this server.js file so we are going to write a very simple node.js code which is going to use express and it's going to just print hello world whenever somebody uh will make a get request to this server so i'm going to just uh copying and pasting this code because this code is available everywhere and it's very simple so what i have done i have just imported this express and then i have created these two variables one is the port variable which will be exposed via a browser or via the rest request and then we have the host here which is basically the local host and we have one get request here so whenever somebody makes a get request to the server we are going to just send hello world so very simple uh node.js server code and we are going to run this code let me clear this terminal so i'm going to just write node and the name of my server file which is server.js and when i just run this server.js using node.js it's running like this and it's printing uh on which host and ports it's running so let's open our browser and we are going to just open this url which is 0.0.0.0 colon the port number on which we have started this node.js server and i'm going to just press enter and it just prints hello world which is the expected result right so now we want to dockerize our node.js server so let's see how we can dockerize our node.js server so for that i'm going to just close this app or stop this app and now i'm going to create a new docker file so let's just create this docker file by just giving this command which is touch docker file now i'm going to go inside my docker file and here inside my docker file i'm going to use the node base image so when you go to the docker hub there is an official base image for node.js and that's what we are going to use so i am going to just write from and the base image will be node and the version of node we are going to use is version 12. so you can use the latest tag also here which is going to give you the latest version now in the next step i'm going to define the working directory using the work their keyword and we are going to define this work there in the user forward slash src for slash app folder and now this should be work data right so like this okay so we have defined our working directory inside this working directory we are going to uh copy our code and then we are going to do all the stuff now uh let's copy uh all the files which are there in our current folder to this docker image so we are going to use the copy keyword to copy uh all the files but first of all we need to copy the package.json to the container so that we will be able to run the npm install command and npm install command what it does it just installs all the dependencies into uh our container right so let's first of all copy the package dot json file so we are going to copy uh the package log dot json file and package dot json file so these two files are responsible for all the dependencies to this directory right so now we have copied the package json files so next step is to install all the dependencies using npm install so you can just give this command run npm ins tall now if you are uh working in the production environment this command can be a little bit different let me just write this in the form of comment so you can just write run and npm ci and then you can give this only production flag production okay so if you are working in the production environment you can give this command if you are working in the development environment then you can just do uh this command so npm install will install all the dependencies and in our case there is only one dependency which is express right so via this npm install this express npm package will be installed in our uh docker image now in the next step once uh all the dependencies will be installed we are going to just copy all the files uh which are there in our server code so we only have this one file which is server.js but let's say you have many modules and many files inside your node.js projects so i'm going to just write copy and then i'm going to copy all the files and folders which are there in the current directory okay now next step is important and this step is we are going to expose our port so i'm going to just write expose and we are going to expose the port which we are using in our server so we are using uh port 8080 in our server so we are going to expose this port this means that we want to expose port 8080 into our docker container so this exposed keyword means that we want to expose port 8080 from our container to the outside world for example to our host machine and this expose is a way of documenting so it's not going to publish your port at runtime it's just a way of documenting in your docker file that you intend to expose this port 8080 in your docker container so exposing port using this exposed keyword is a way of documenting which port are used but it does not actually map or open any port we are going to open and map the port using the docker run command and we are going to use a different flag for publishing our port or opening or mapping our port later when we just build and run our our docker con now the next step here will be to run our node.js application and we all know that we just need cmd and then inside our square brackets we will just write npm and then we are going to just give this comma and then we are going to give the name of our server.js file so this will be server dot js now here one interesting point to note here is when we are going to copy uh all the files and folders from our current directory uh to the docker image you can see i have used dot dot that means it's going to copy node modules also into your docker image and we have already installed our node packages using this npm install so this is going to overwrite this node modules folder from your image right so to avoid copying your node modules into your docker image you can create a docker ignore file so this docker ignore file is going to prevent your local node modules or your debug logs from being copied into your docker image so let's uh just create this docker ignore file so to create uh this docker ignore file you can just write touch dot docker ignore in the same format which i have used so this format is recognized by docker and whatever you write inside this docker ignore a file so let's create this docker ignore file first of all so we have created this docker ignore file and we want to exclude the npm modules and npm debug.log file from copying into our image so this means that we have added npm modules and the npm debug log file uh which will be excluded when we are going to copy the files from our local container to the docker image okay so this will avoid the overwriting of our npm modules now we are done and we can build our image so let me clear this terminal so now let's build our image by giving the docker build command so i'm going to just write sudo uh docker build hyphen t and then the image name so let's say i'm going to just give the name node underscore test colon the tag you can give any tag to your image so let's say i am going to give 1.0.0 or tag to my image and then the context and then press enter which is going to just build this image and in few seconds this image will be created so let me clear this terminal once again and let's list out all the images so sudo docker images and when you see here our docker image is created with the tag 1.0.0 15 seconds ago okay so now we are going to run our container so to run our container we can just use a sudo docker run so as i told you we want to expose this port 8080 so that this server can listen to the request from the outside the container right so in order to map the port we use the flag which is called hyphen p which is also called publish and hyphen p is a way of mapping a host port to a running container port so this is our running container port and let's say we want to uh map this port which is running inside the container to our local host machine and we want to let's say give the port 3000 in our local host machine and which is going to be mapped to port 8080 so if you specify this expose the port and if you specify this publish flag to map the ports then the service in the container is accessible from anywhere even outside the docker so this means that we want to expose port 8080 from our container to the port 3000 inside our host machine and now let's give the name of our image which we want to run which is node underscore test colon 1.0.0 okay and let's run this docker container and this gives me error and the error is obvious because instead of using npm i should have used node okay because we have started our server using node command not npm npm we used just for installing our packages and managing our packages right so let's rebuild our image once again and once our image is rebuilt we are going to just run our container so now our container is running and we can see the same output now we might be confused or you might be confused that we are exposing uh the port 8080 and when we go on this url on our browser so let's go to this url on our browser and let's see if it works or not so it's not going to work because we have mapped the port 8080 to the port 3000 on our local machine so this is the port on the container on your docker container and this is the port which uh it'll listen on your local machine so we want to listen on port 3000 on our host machine so instead of port 8080 you can give port 3000 and it's going to print hello world right this is how this uh port mapping work so this will be the port which will be available on your local host and this is the port you have exposed inside your docker container so let me just stop this container so i'm going to go to the next terminal and i'm going to just write sudo docker ps to list out all the running containers and this container is running so i'm going to just use the container id from here just copy the container id and then sudo and then the container id which is going to stop this container now this container is stopped and you can see in this terminal also that we are out of the container right so now let's say let me just uh clear this terminal and now let's say we want to map to the port 8080 itself on our host machine also from our docker container so this is the port on the docker container and we want to map this port to the same port on our host machine if it's available then it's going to run fine so let's run this command and now this time when you go to the browser on port 3000 obviously you will not get anything because we have mapped uh the port 8080 to our host machine now and now when you give port 8080 it's going to give you hello world if you want to run this server in the detached mode as i have told you you can use hyphen d so that this node.js will run in the detached mode that means it will run in the background so this is how you can expose the http port you can also expose the tcp port and the udp port from your docker container so let me uh just stop this container so i'm going to just stop this container first of all and let me show you how you can expose the udp and the tcp ports so let's say you are running uh application and in this application you are doing some tcp communication or the udp communication so for mapping the tcp port and the udp port you uh can use the flag hyphen p and then you can use this kind of notation so the port which you want to expose from your container let's say i'm just exposing port 80 and forward slash tcp so in case you want to expose the tcp port you just need to uh write forward slash tcp after the port which you want to expose from your container and this will be the port uh you want to expose to the host machine so this port will be available on your host machine um from this port to your container so this is the mapping right for udp you just write forward slash udp right so the flag is hyphen p you just need to write forward slash tcp or forward slash udp to expose the udp or the tcp flag you can expose multiple ports also by using this hyphen p flag so it's not that you just can use only one hyphen p flag you can use multiple hyphen p flags to expose multiple ports from your container to the host machine so this is how port mapping works in a docker i hope you haven't understood this concept so in this video we are going to talk about docker hub so what is docker hub so docker hub is a service provided by docker for finding and sharing your container images with your teams or with the general public so as you can see i'm on this website which is hub.docker.com and here i can sign in at the time of downloading the docker on your operating system you might have created a docker id for you and the password for you so you can log in with that docker id and password so once you are signed in with your docker id and password you will be able to see this kind of web page here you have this explore option where you can explore all the other repositories you have this repository option and under this repository option you will be able to see and manage your repositories which you have created and which you have pushed into your docker registry here you also have the option for organization which we are not going to cover in this video and also you have all these general uh account related uh stuff here right now let's talk about the pricing a little bit so you can see uh for public repository docker hub is absolutely free and that's what we are going to uh be using but if you are working in an organization or you want to create some private repositories for your docker images then you can choose one of these options which are provided here also it's not necessary that you need to use docker hub as a docker registry you can create a docker registry you have this documentation which you can use to create a docker registry i know uh google cloud provide a docker registry or a github nowadays also provide these kind of docker registries so you can create your own registry if you want you don't need a docker hub for just managing your images right so right now you can see i don't have any image on my docker hub account so to start with i have this very simple uh docker file which i want to convert to the docker image and then i want to push that image to my docker hub registry so let me list all the docker images on my operating system right now i don't have any image so let's uh build one image so i'm going to just write pseudo docker build dot hyphen t and the name of the image i'm going to just name my image as hello and then press enter which is going to just create this image i have this hello world image which is created five seconds ago right so now let me just also quickly run this image to see everything is working so i'm going to once again write sudo docker run hyphen hyphen rm hyphen it and the name of the image which is hello and then press enter and it prints the content of my main.cpp that's what it's doing so that's a very basic minimal image the size is very small that's why i have done this and once you have all these images let me just clear the terminal and then let me just move this terminal a little bit up and let's just list all the images once again so now i have this image hello and i want to push this image to my docker hub registry so in order to push this image first of all you need to log in with your docker id into your docker terminal most probably you are already logged in but if you are not you can just give this command which is sudo docker login and if you want to log out then you can just write log out here right so let's give this command which is a pseudo docker login and then give your username here i'm going to provide my username and then you need to provide your password so let me quickly provide my password and then press enter which is going to log me in the docker so you can see login succeeded and now i can just push my images to my docker hub registry so first thing we generally do in order to push the image to the registry is we just tag it so we can give this command which is a docker and then tag and then the name of your image my image name is hello you can also take the image id and then give the space and then give some tag to your image so right now because i want to push my uh docker image to this docker hub account and which has the username codebind i will just first of all write code bind here and then forward slash and then you can give the name of your image i will just leave it as hello and then you can give the tag of your image so i'm going to just give the tag 1.0.0 so this tag is useful whenever you want to just let's say keep working on your image and you want to update the image and want to just version your image into multiple versions so you have the track of all these versions right so i'm going to just tag my image i'm going to press enter and then i will once again list all the images and now you can see i have this image with the this name and i have the tag 1.0.0 right now once you do that you are ready to push your image to the docker registry the command is very simple sudo docker push and the name of your docker file which is codebind forward slash hello in my case you also need to give the tag here 1.0.0 and then you can just press enter which is going to push your image to your docker hub registry so just wait for some seconds and you can see it's pushed so i'm going to go to my docker hub web page and then refresh this web page and now i can see this image which is available here and also you will be able to see that this image is a public image so it's not private so anybody on docker can see your image right also when you click on this image you will be able to see more information about the image so here you can give that little description for your image and also you can even write the readme for your image uh what it's doing and what's the purpose of this image right so here is the general information about the image you can also see this tags uh section where you will be able to see uh the tags related to your image i only have one tag here and the size of this image is around 746 kilobyte right and also you can see how you can pull this image so you can just pull this image using docker pull codebind forward slash hello and then you need to use this tag you can just copy this and then pull this image also also you have the build section this is for the automation so if you are using github or bitbucket automation system then you can directly push your image from the github or bitbucket into your docker registry you also have the collaborator tab and then webhooks also and then you have the settings related to your docker image right so you can make it private if you want and also you can delete your image from this section right so let's say i just want to pull this image i will just copy this text and then i will just uh write sudo and then paste uh this test text uh which i have copied which is uh docker pull and the name of my image with the tag and it's going to pull this image if it's already not there on your operating system so this was the simple demonstration using which you can create your images and then push your images to the docker hub and then manage your images using the docker hub so i hope you've enjoyed this video and i will see you in the next video
