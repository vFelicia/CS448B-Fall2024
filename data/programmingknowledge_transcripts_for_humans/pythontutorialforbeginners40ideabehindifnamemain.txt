With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - Python to troll for beginners in this
00:04 - video we will talk about this special
00:07 - keyword which is underscore underscore
00:09 - name underscore underscore and we will
00:13 - see in which situations we use this
00:16 - keyword and why do we use this special
00:19 - if statement which is name is equal to
00:23 - underscore underscore main underscore
00:25 - underscore so let's get started so to
00:30 - start with you can see I have two files
00:33 - here one is my math dot py and other is
00:38 - test dot py both the files are in the
00:42 - same directory in my project so now what
00:46 - I will do here is I will define a very
00:48 - simple method which is ad which takes
00:51 - two argument a and B and it's going to
00:55 - return the sum of a and B so we have
00:59 - already seen how to create these kind of
01:02 - simple functions and now what I'm going
01:05 - to do is I'm going to use this print
01:08 - function to call this add function and
01:12 - here I'm going to just give two numbers
01:16 - here so nothing special about this code
01:18 - now what I'm going to do next is I'm
01:20 - going to import this file which is my
01:23 - math dot py file into that test dot py
01:27 - and now I'm going to just use print and
01:30 - then I'm going to use this module name
01:33 - which is my math to call this function
01:36 - which is there inside this my math dot
01:39 - py file and then I'm going to provide
01:42 - two values here once again into this add
01:46 - function so let's say seven and six now
01:50 - let me run this test dot py file first
01:53 - in which I'm importing this my math dot
01:56 - py file so right click and then run test
01:59 - which is going to run this program and
02:01 - what you will see here is it prints 26
02:05 - which is the sum of 10 and 16 we just
02:09 - printed using this print statement and
02:11 - then you will see 13
02:14 - which is printed using this print
02:16 - statement which is the sum of these two
02:20 - numbers which we have provided in test
02:22 - dot py now I have a simple question is
02:26 - this a correct response because I just
02:29 - want to call the add method from my math
02:34 - dot py file into the test dot py and I
02:38 - don't want to print any result which is
02:42 - coming from this print statement because
02:45 - I just want to use my math dot py as a
02:49 - module and we just want to use the
02:52 - functions inside this my math dot py
02:55 - file not any special code which is
02:58 - written here so that's where we use this
03:01 - special condition which is if underscore
03:04 - underscore name underscore underscore is
03:06 - equal to underscore underscore main
03:08 - underscore underscore and under this
03:10 - condition we use whatever code we want
03:13 - to execute and this name is a special
03:18 - built-in keyword in Python whose value
03:21 - is equal to either the module name which
03:24 - is my math or its value is equal to
03:26 - underscore underscore main underscore
03:28 - underscore so under what condition the
03:31 - value of underscore underscore name
03:34 - becomes the module name and in what
03:37 - condition underscore underscore name
03:39 - underscore underscore contains this
03:41 - value which is mean so whenever you run
03:44 - this my math dot py file as the main
03:48 - Python file so whenever I run this file
03:51 - which is my math dot py file then the
03:56 - value of name becomes this which is
03:59 - underscore underscore main underscore
04:01 - underscore let's print the value of this
04:05 - variable and then we will see how this
04:09 - value changes in different conditions so
04:12 - once again I am going to run this code
04:14 - and you will see the value of this
04:17 - special variable becomes underscore
04:19 - underscore main underscore underscore so
04:22 - whenever you will run this my math dot
04:25 - py
04:26 - the main file then only the value of
04:29 - this special keyword underscore
04:30 - underscore name underscore underscore
04:32 - becomes this mean value now if I import
04:36 - this my math module into some other file
04:40 - for example test dot py and then use the
04:43 - functions from this module then let's
04:48 - see what happens so I'm going to just
04:49 - right click on the test dot py now and
04:52 - then I'm going to run it and you will
04:55 - see the value of this underscore
04:58 - underscore name underscore underscore is
05:01 - now is equal to the name of your module
05:05 - okay so my module name is my math dot py
05:10 - so here it just prints the module name
05:13 - and you will also see that because we
05:15 - have provided this condition this
05:17 - statement is not executed and only the
05:22 - statement which we have written here is
05:24 - executed because this condition checks
05:27 - for the name value which checks whether
05:30 - we are running this my math dot py file
05:34 - as the main file or we are importing
05:37 - this file into the other file and we are
05:40 - just using the functions inside that
05:43 - module so this condition is similar to
05:46 - for example main method in the C++ or
05:51 - the Java programming language and what
05:54 - does the main method do in those two
05:57 - languages the main function is the main
06:00 - entry point of your program so this
06:04 - condition is performing the same
06:05 - operations we can run these two files
06:07 - using the terminal also so in PyCharm
06:11 - you can just click on this option which
06:13 - says terminal which opens the terminal
06:16 - in your pycharm ide in the same folder
06:20 - in which you are currently working in
06:22 - and then I can use this Python command
06:26 - to call this my math dot py file first
06:30 - of all so I'm going to just use my math
06:33 - dot py which is going to run this my
06:36 - math dot py and you can see if we run
06:40 - my math dot py as the main file then the
06:43 - value of this special keyword name
06:45 - becomes mean otherwise when we are going
06:48 - to run this test dot py file in which we
06:52 - are just importing this my math dot P I
06:55 - file and then when I press Enter
06:58 - you will see that now the value of this
07:01 - name variable becomes the name of your
07:06 - module which is my math so in this way
07:08 - you can use the special condition in
07:11 - Python I hope you have enjoyed this
07:13 - video and I will see you in the next
07:16 - video
07:24 - you

Cleaned transcript:

hey guys welcome to the next video on Python to troll for beginners in this video we will talk about this special keyword which is underscore underscore name underscore underscore and we will see in which situations we use this keyword and why do we use this special if statement which is name is equal to underscore underscore main underscore underscore so let's get started so to start with you can see I have two files here one is my math dot py and other is test dot py both the files are in the same directory in my project so now what I will do here is I will define a very simple method which is ad which takes two argument a and B and it's going to return the sum of a and B so we have already seen how to create these kind of simple functions and now what I'm going to do is I'm going to use this print function to call this add function and here I'm going to just give two numbers here so nothing special about this code now what I'm going to do next is I'm going to import this file which is my math dot py file into that test dot py and now I'm going to just use print and then I'm going to use this module name which is my math to call this function which is there inside this my math dot py file and then I'm going to provide two values here once again into this add function so let's say seven and six now let me run this test dot py file first in which I'm importing this my math dot py file so right click and then run test which is going to run this program and what you will see here is it prints 26 which is the sum of 10 and 16 we just printed using this print statement and then you will see 13 which is printed using this print statement which is the sum of these two numbers which we have provided in test dot py now I have a simple question is this a correct response because I just want to call the add method from my math dot py file into the test dot py and I don't want to print any result which is coming from this print statement because I just want to use my math dot py as a module and we just want to use the functions inside this my math dot py file not any special code which is written here so that's where we use this special condition which is if underscore underscore name underscore underscore is equal to underscore underscore main underscore underscore and under this condition we use whatever code we want to execute and this name is a special builtin keyword in Python whose value is equal to either the module name which is my math or its value is equal to underscore underscore main underscore underscore so under what condition the value of underscore underscore name becomes the module name and in what condition underscore underscore name underscore underscore contains this value which is mean so whenever you run this my math dot py file as the main Python file so whenever I run this file which is my math dot py file then the value of name becomes this which is underscore underscore main underscore underscore let's print the value of this variable and then we will see how this value changes in different conditions so once again I am going to run this code and you will see the value of this special variable becomes underscore underscore main underscore underscore so whenever you will run this my math dot py the main file then only the value of this special keyword underscore underscore name underscore underscore becomes this mean value now if I import this my math module into some other file for example test dot py and then use the functions from this module then let's see what happens so I'm going to just right click on the test dot py now and then I'm going to run it and you will see the value of this underscore underscore name underscore underscore is now is equal to the name of your module okay so my module name is my math dot py so here it just prints the module name and you will also see that because we have provided this condition this statement is not executed and only the statement which we have written here is executed because this condition checks for the name value which checks whether we are running this my math dot py file as the main file or we are importing this file into the other file and we are just using the functions inside that module so this condition is similar to for example main method in the C++ or the Java programming language and what does the main method do in those two languages the main function is the main entry point of your program so this condition is performing the same operations we can run these two files using the terminal also so in PyCharm you can just click on this option which says terminal which opens the terminal in your pycharm ide in the same folder in which you are currently working in and then I can use this Python command to call this my math dot py file first of all so I'm going to just use my math dot py which is going to run this my math dot py and you can see if we run my math dot py as the main file then the value of this special keyword name becomes mean otherwise when we are going to run this test dot py file in which we are just importing this my math dot P I file and then when I press Enter you will see that now the value of this name variable becomes the name of your module which is my math so in this way you can use the special condition in Python I hope you have enjoyed this video and I will see you in the next video you
