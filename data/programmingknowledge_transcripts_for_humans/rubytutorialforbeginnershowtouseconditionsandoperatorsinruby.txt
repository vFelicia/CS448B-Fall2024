With timestamps:

00:00 - hello everyone welcome to new tutorial
00:01 - on ruby so today we are going to start
00:04 - some with some conditions and operators
00:06 - so let's start with a tutorial so
00:08 - basically
00:09 - we are going to create two variables a
00:12 - is equal to
00:12 - 100 b is equal to 50
00:18 - and now we are going to define put s a
00:22 - plus b okay the we are going to
00:25 - i'm going to repeat these four
00:26 - statements so this is put as a plus b
00:29 - this is put as a minus b this is put as
00:31 - a by b
00:33 - and this is put as a multiplied by b and
00:35 - the last one is going to
00:37 - put s a modulo b so
00:40 - let's run this file ruby conditions and
00:43 - operators or rb so we get all the result
00:45 - the addition takes it to 150 minus takes
00:48 - a 50
00:49 - a by b 2 and this is 5 000 and this is
00:52 - model this
00:52 - is zero so this is fine okay
00:56 - and now let's start with some conditions
00:58 - some basic condition
01:00 - so so let's take with uh
01:05 - so let's create a variable and try to
01:08 - give this a value true
01:10 - and false and let's
01:13 - put sc okay so let's
01:17 - remove this yeah so this is false okay
01:20 - uh let's change this to or operator
01:25 - and let's run this file again
01:29 - okay clear now this is true
01:33 - so you must be clear with all the
01:35 - conditions like how this and operator
01:37 - works and our operators work so this is
01:38 - fine
01:39 - go now and now what we can do
01:43 - we can like this is perfectly these are
01:45 - some basic conditions now let's create
01:46 - some if conditions
01:48 - so for if conditions let's create a
01:51 - a a grade uh we'll give this a value
01:55 - if grade greater than equal to
01:58 - 90 then put s
02:01 - a plus else
02:04 - uh this else in so else if so please
02:08 - and make a note of this e l s i f else
02:12 - if grade is less than equal to 89
02:17 - okay no no we will do this is greater
02:19 - than equal to 80
02:20 - and okay and grade
02:24 - less than equal to 89 so this is
02:27 - it lies in this range so
02:32 - we do put s
02:36 - b or we can assign it a else
02:41 - else put s
02:46 - b plus l uh and then we need to
02:50 - end this if condition so i'll just make
02:52 - a like these are
02:53 - three conditions if else else so we will
02:56 - give
02:56 - values to it and see how this condition
02:58 - was let's give the grade
02:59 - equal to 99 uh
03:02 - so okay it's a small stick okay yeah
03:05 - i like this looks looks very intuitive
03:08 - to python so
03:09 - you don't need a semicolon a colon here
03:11 - okay so let's run this
03:14 - and here we are about it a plus now
03:17 - let's give it a 85
03:21 - let's give it a value 85
03:24 - now let's run this now it is a
03:28 - and now let's give it a value 75 and it
03:31 - should move to the else part
03:33 - okay now let's run this and it is b
03:37 - plus so this is how we make conditions
03:40 - now let's move to the
03:41 - like while loop so for that we can
03:45 - define a variable a zero so while i
03:48 - less than equal to 10
03:52 - okay so simply put s i
03:55 - and make sure you increment the i else
03:57 - it is in an infinite loop
04:00 - okay and now let's run this okay yeah
04:03 - so you need to end this loop here okay
04:06 - so
04:08 - i was going with some speed so yeah
04:11 - so this is how a while loop works okay
04:14 - now uh you can also
04:19 - work with for loop so there are two ways
04:22 - to work on a for loop
04:23 - so before we work on for loop i would
04:26 - like to show you the
04:28 - case statement okay the
04:31 - case statement is very much similar okay
04:34 - so okay what i'll do first i'll move
04:36 - with the like for loop so because
04:38 - i did the value first so uh
04:41 - then i'll move to case statement in ruby
04:43 - okay
04:44 - so basically case statement in the ruby
04:46 - are similar to switch statements
04:47 - okay so let's move to okay before we
04:50 - move
04:51 - i'll do word and print there is i'll
04:53 - show you one a range operator range
04:54 - operators is denoted by double dots
04:57 - and there is a small difference with one
04:59 - dot two dot three dots like there is a
05:01 - difference between i'll show you
05:02 - how see when i do put
05:05 - s put s range of
05:10 - 100 okay
05:14 - okay so i'll show you
05:22 - okay
05:25 - now i'll show you
05:30 - so yeah so i just forgot to lick
05:33 - this is to underscore array so it says
05:36 - i'll convert this range 100 to an array
05:40 - and here you see i have two dots okay so
05:43 - in these two dots here you can see
05:45 - this one two and i'll show you a small
05:48 - like i
05:49 - i'll show you small one yeah i know it's
05:50 - fine i'll do
05:52 - this
05:55 - now here you can see the value is from 1
05:57 - to 10 increases of inclusive of 10 the
06:00 - 10 is here
06:01 - when i put an extra dot here the 10 will
06:04 - not be included
06:05 - see so here you can see the
06:09 - last value has been excluded so it is
06:11 - because of the like extra dot
06:13 - so this is how it works okay so
06:16 - like this is for you can use this to
06:19 - work
06:20 - in like a for loop
06:23 - so for i in
06:27 - 1 to 2 10 okay
06:31 - and you can do put s
06:35 - i okay
06:38 - so let's clear this
06:44 - okay you need to end this for loop like
06:46 - i uh
06:48 - forgot to do that
06:52 - and this is how a for loop works with
06:54 - the full range okay
06:56 - now let's move to case statement in ruby
06:59 - so so what you can do
07:02 - the very first example the one with for
07:05 - which we made the grade
07:06 - we'll do this with the grid okay so we
07:08 - will take a variable grade
07:09 - and this time we are going to define
07:11 - case grade and uh i'll first try
07:13 - i'll automatically end this before i
07:15 - forget this so case grade
07:18 - now what i'm going to do uh
07:21 - when when
07:25 - uh so k is great
07:28 - and when when this crate is less than
07:32 - is greater than equal to 90 then i put s
07:35 - a play a plus okay when
07:40 - this grade how
07:44 - great is greater than equal to 80
07:50 - and grade less than equal to 89
07:56 - put s a when
08:00 - grade uh when grade
08:04 - uh then you can have a default statement
08:06 - uh but i'll show you one
08:07 - when grade is greater than equal to
08:10 - 70 and and
08:14 - great less than equal to 79
08:17 - then you can do put s
08:22 - put s b
08:26 - else uh
08:29 - something like else put s
08:33 - improve something like this uh
08:36 - now i'll put some great value 95
08:40 - and i'll try to run this and
08:44 - so okay i made a mistake then i'm
08:46 - putting a colon here
08:48 - sorry
08:52 - so this is
08:55 - okay when
08:58 - like this didn't hit the like something
09:01 - is missing
09:06 - key is good one good okay let me check
09:08 - what's the issue with this
09:11 - hey hey everyone uh welcome back uh that
09:13 - time i made a mistake the mistake was
09:15 - like
09:16 - uh like uh like the mistaken distance i
09:18 - opted to
09:19 - use case grade here so i used to just
09:21 - define the variable so
09:22 - uh earlier i was also like instead of
09:25 - this
09:26 - i was also comparing the value grade
09:28 - greater than equal to 90. this was not
09:31 - needed because
09:32 - i had already used case grade so this is
09:35 - not
09:36 - needed to repeat the same here okay so
09:39 - let's
09:39 - uh like let's uh so
09:42 - let's remove this now the perfect like
09:44 - syntax for grid statement is this now
09:46 - let's run this
09:47 - now for 95 it rewards a plus let's do
09:51 - this to 85
09:53 - for 85 it will reward a and 475
09:58 - it will reward b and
10:02 - like let's take another value 55 it
10:05 - should
10:06 - prove to move to improve statement that
10:08 - is else
10:09 - so thank you for watching this tutorial
10:11 - tutorial i'll catch you in the next
10:13 - video thank you

Cleaned transcript:

hello everyone welcome to new tutorial on ruby so today we are going to start some with some conditions and operators so let's start with a tutorial so basically we are going to create two variables a is equal to 100 b is equal to 50 and now we are going to define put s a plus b okay the we are going to i'm going to repeat these four statements so this is put as a plus b this is put as a minus b this is put as a by b and this is put as a multiplied by b and the last one is going to put s a modulo b so let's run this file ruby conditions and operators or rb so we get all the result the addition takes it to 150 minus takes a 50 a by b 2 and this is 5 000 and this is model this is zero so this is fine okay and now let's start with some conditions some basic condition so so let's take with uh so let's create a variable and try to give this a value true and false and let's put sc okay so let's remove this yeah so this is false okay uh let's change this to or operator and let's run this file again okay clear now this is true so you must be clear with all the conditions like how this and operator works and our operators work so this is fine go now and now what we can do we can like this is perfectly these are some basic conditions now let's create some if conditions so for if conditions let's create a a a grade uh we'll give this a value if grade greater than equal to 90 then put s a plus else uh this else in so else if so please and make a note of this e l s i f else if grade is less than equal to 89 okay no no we will do this is greater than equal to 80 and okay and grade less than equal to 89 so this is it lies in this range so we do put s b or we can assign it a else else put s b plus l uh and then we need to end this if condition so i'll just make a like these are three conditions if else else so we will give values to it and see how this condition was let's give the grade equal to 99 uh so okay it's a small stick okay yeah i like this looks looks very intuitive to python so you don't need a semicolon a colon here okay so let's run this and here we are about it a plus now let's give it a 85 let's give it a value 85 now let's run this now it is a and now let's give it a value 75 and it should move to the else part okay now let's run this and it is b plus so this is how we make conditions now let's move to the like while loop so for that we can define a variable a zero so while i less than equal to 10 okay so simply put s i and make sure you increment the i else it is in an infinite loop okay and now let's run this okay yeah so you need to end this loop here okay so i was going with some speed so yeah so this is how a while loop works okay now uh you can also work with for loop so there are two ways to work on a for loop so before we work on for loop i would like to show you the case statement okay the case statement is very much similar okay so okay what i'll do first i'll move with the like for loop so because i did the value first so uh then i'll move to case statement in ruby okay so basically case statement in the ruby are similar to switch statements okay so let's move to okay before we move i'll do word and print there is i'll show you one a range operator range operators is denoted by double dots and there is a small difference with one dot two dot three dots like there is a difference between i'll show you how see when i do put s put s range of 100 okay okay so i'll show you okay now i'll show you so yeah so i just forgot to lick this is to underscore array so it says i'll convert this range 100 to an array and here you see i have two dots okay so in these two dots here you can see this one two and i'll show you a small like i i'll show you small one yeah i know it's fine i'll do this now here you can see the value is from 1 to 10 increases of inclusive of 10 the 10 is here when i put an extra dot here the 10 will not be included see so here you can see the last value has been excluded so it is because of the like extra dot so this is how it works okay so like this is for you can use this to work in like a for loop so for i in 1 to 2 10 okay and you can do put s i okay so let's clear this okay you need to end this for loop like i uh forgot to do that and this is how a for loop works with the full range okay now let's move to case statement in ruby so so what you can do the very first example the one with for which we made the grade we'll do this with the grid okay so we will take a variable grade and this time we are going to define case grade and uh i'll first try i'll automatically end this before i forget this so case grade now what i'm going to do uh when when uh so k is great and when when this crate is less than is greater than equal to 90 then i put s a play a plus okay when this grade how great is greater than equal to 80 and grade less than equal to 89 put s a when grade uh when grade uh then you can have a default statement uh but i'll show you one when grade is greater than equal to 70 and and great less than equal to 79 then you can do put s put s b else uh something like else put s improve something like this uh now i'll put some great value 95 and i'll try to run this and so okay i made a mistake then i'm putting a colon here sorry so this is okay when like this didn't hit the like something is missing key is good one good okay let me check what's the issue with this hey hey everyone uh welcome back uh that time i made a mistake the mistake was like uh like uh like the mistaken distance i opted to use case grade here so i used to just define the variable so uh earlier i was also like instead of this i was also comparing the value grade greater than equal to 90. this was not needed because i had already used case grade so this is not needed to repeat the same here okay so let's uh like let's uh so let's remove this now the perfect like syntax for grid statement is this now let's run this now for 95 it rewards a plus let's do this to 85 for 85 it will reward a and 475 it will reward b and like let's take another value 55 it should prove to move to improve statement that is else so thank you for watching this tutorial tutorial i'll catch you in the next video thank you
