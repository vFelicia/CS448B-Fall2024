With timestamps:

00:00 - hello guys in this video I'm going to
00:02 - show you how you can create your first
00:04 - maven project in your NetBeans IDE so
00:09 - let's get started first of all open your
00:11 - NetBeans IDE and just click this file
00:14 - option here and then we will just choose
00:18 - the new project option and in here you
00:21 - will be able to find the Mabel category
00:24 - okay so just to the Maven category here
00:27 - and then choose this java application
00:31 - which is the first option here you can
00:34 - choose other type of options here for
00:37 - example JavaFX or web application or
00:40 - other you know other type of maven
00:43 - project but for simplicity we are
00:46 - choosing the first one which is java
00:48 - application right which is a bare bowl
00:51 - project now click Next and in here we
00:55 - are going to give the project name to
00:59 - our maven project and this will be the
01:02 - artifact ID of our project also now
01:06 - artifact ID is a name for your project
01:10 - for example j-unit has the artifact I
01:12 - will be J unit itself so whatever name
01:16 - you give here it will be the artifact ID
01:19 - of your project so for example maven -
01:24 - demo and you can see the artifact ID of
01:28 - my project is also same as the project
01:32 - name now the second option here is the
01:37 - group ID so the group ID is for example
01:42 - you have some company or you are working
01:46 - for some company and its website name is
01:50 - code bind comm so group ID should be the
01:54 - reverse for example of that so in here
01:57 - we have comm dot code bind write or for
02:02 - example you have Java dot o-r-g so here
02:07 - you will write Watchi dot Java for
02:09 - example
02:10 - right and it's going to create the
02:13 - package for you according to this rope
02:16 - idea now third option here is this
02:19 - version now version here by default it's
02:24 - 1.0 and after - this snapshot keyword is
02:30 - added to your version and this means
02:33 - that your project is in development mode
02:38 - whenever you are developing it's a good
02:42 - practice to add this keyword which is
02:44 - snapshot and this indicates that you are
02:48 - developing your project on your project
02:51 - is in development mode and once the
02:54 - project is you know in the result
02:56 - release mode you can just remove this
02:59 - snapshot keyword from here this last
03:02 - option is optional so you can keep it or
03:07 - you can you know you don't need to keep
03:10 - it
03:10 - it's just optional so let's keep it so
03:14 - my project name was maven demo right so
03:18 - it's creating the package something like
03:21 - this comm dot code binder which comes
03:23 - from group ID and then dot maven dot
03:27 - demo which comes from the project name
03:30 - ok so I'm going to just click finish
03:34 - here and it's going to create me a maven
03:37 - project now in here I can see this
03:42 - source packages and some dependencies
03:46 - but all of them are blank for now and
03:49 - also I can see some Java dependency and
03:53 - the project files so let's open our pom
03:56 - dot XML for now and right now in the pom
04:00 - dot XML we have our group ID which we
04:04 - have given which is comm dot code bind
04:06 - and our artefact ID which we have given
04:09 - which is maven demo and the module which
04:12 - is 1.0 snapshot right and the packaging
04:16 - of it by default it's a jar but you can
04:20 - change the packaging of your
04:23 - maven project inator also you just need
04:25 - to change this chart to for example war
04:28 - or any other option okay so this is the
04:32 - pom dot XML file right palm stands for
04:36 - project object model and it's really
04:40 - important to know about the details of
04:44 - pom dot XML because it's the basic
04:47 - building block I can say of Mabel
04:51 - site right now for example I want to add
04:55 - a source files to my project so I will
05:00 - just go to my source package here and
05:03 - then I will just go to new and in here
05:06 - I'm going to create a new Java class and
05:10 - for the Java class I'm going to give the
05:13 - name as for example app ok and you can
05:18 - see it's inside the maven demo project
05:20 - which is inside our source packages so
05:25 - we are creating a source you know force
05:28 - class so it's inside the source package
05:31 - and for the package you can choose the
05:33 - default package here which is comm dot
05:36 - code bind not may will not demo which is
05:39 - our package name and you can see the
05:44 - created file will be on this path so you
05:48 - have this project so this will be the
05:53 - project and then inside the source
05:54 - directory you will be having the main
05:58 - than the Java folder then comm then code
06:01 - bind then maven then demo and inside
06:04 - them all you will be having this app dot
06:07 - Java class so for now I'm going to copy
06:10 - this path and we are going to you know
06:14 - see the location later for example so
06:17 - just copy this pop and just click finish
06:20 - and after you click finish you can see
06:23 - here this app dot Java is created inside
06:26 - our comm load code by not evil one demo
06:31 - package right
06:36 - so now let's open this location where
06:39 - it's created so open your Windows
06:41 - Explorer and just paste this part up to
06:44 - your project name so inside my NetBeans
06:48 - project I have this maven demo project
06:51 - so I'm going to just copy and paste the
06:54 - path of this here and I'm going to open
06:56 - it so you can see you have this palm dot
07:00 - XML file and you have this source file
07:03 - here right inside so far you have the
07:05 - main and Java then comm code mine maven
07:09 - demo and your app dot Java class here
07:14 - right now for example you want to add
07:18 - the test files how we can do it
07:22 - so for creating the test class you just
07:24 - need to click on your project and then
07:27 - go to new and go to others and in here
07:31 - you will be able to see j-unit here you
07:35 - can see unit tests and in the unit tests
07:39 - category you can see a unit test right
07:42 - so just do this and then click Next
07:45 - and in here also you just need to give
07:48 - the name of your class so I'm going to
07:52 - just name it as app test because it's a
07:55 - test class right and it's inside the
07:58 - maven demo package and the location will
08:03 - be the test package right and the
08:07 - package name I can also give here right
08:10 - now it says default package but I can
08:14 - just give the package name same as I
08:18 - have given for the for example my source
08:23 - files right so for example here I can
08:26 - give comm dot would bind dot the
08:33 - Mayville dot demo right this was the
08:38 - same package name I have given for my
08:41 - source file right and in here leave
08:45 - everything as default for now and then
08:47 - click finish
08:49 - and you can see in the test packages it
08:54 - has created us the test class inside the
09:00 - same package name right so let's open
09:04 - the folder structure once again and we
09:07 - will go to the Mabel demo once again and
09:09 - inside ours SRC folder now you have main
09:13 - folder which contains our source file
09:15 - and you have the test folder which
09:17 - contains our test files so you can go to
09:20 - test Java comm code by naval demo and
09:25 - you have this class here okay now once
09:29 - you added this test class it uses j-unit
09:35 - right so when you go to bomb dot axonal
09:38 - you will be able to see this dependency
09:42 - which is automatically added to your
09:45 - bomb dot XML file right so this is due
09:50 - to this class which we have added so if
09:55 - you remove this dependency then it's
09:58 - going to remove this test dependency
10:01 - also so you can see there is one more
10:03 - test dependency folders created for us
10:07 - and in here maven has automatically
10:10 - downloaded these two jar files one is
10:13 - j-unit 4.12 and second is hamcrest which
10:18 - is the dependency for a.j unit so that's
10:21 - why it has also added this one also
10:24 - right so if you remove this dependency
10:30 - for example I'm going to remove this and
10:32 - I'm going to save my project these tests
10:35 - dependency will also be deleted you see
10:39 - there is no jar file for our j-unit now
10:43 - and now it's showing the error right so
10:46 - once again when I add in my pom dot XML
10:50 - this dependency for the J unit then it's
10:55 - going to let's see what happens so save
10:59 - it and you can see the dependency is
11:01 - automatically down low
11:03 - loaded and then added to your test
11:06 - dependencies and then you don't have any
11:09 - error now to compile your project what
11:14 - you need to do is we just need to right
11:15 - click on your project and there is a
11:18 - option here which says custom and then
11:22 - choose the bulls now there are different
11:26 - goals possible for your mimin project
11:31 - for example if you want to compile your
11:33 - project you just need to write here
11:35 - compile which is the normal option just
11:39 - write compile write and it's going to
11:43 - compile your project so when I write
11:46 - compile here and click OK in the maven
11:50 - build here you can see it's building
11:53 - your project and you can see this
11:55 - message which says build success this
11:58 - means that your source files are
12:01 - compiled successfully now there is one
12:03 - more goal for example you want to run
12:06 - your test go to the custom goes and here
12:09 - just write tests which will run your
12:11 - tests so just click OK and going to run
12:15 - your test as going to run tests after
12:19 - running the tests is going to show this
12:22 - message which says build success right
12:25 - there is one more command which is for
12:28 - compiling your tests so just go custom
12:31 - goes and this time just write tests
12:36 - compiled so just test hi compile and
12:40 - then click OK and then it's going to you
12:44 - know compile your tests and then it will
12:47 - show you the result which is build
12:49 - success now in order to create a jar
12:52 - file out of your project you just need
12:54 - to right click on your project go to
12:57 - custom goals and in here you just need
13:00 - to write install which is going to
13:03 - create the jar file for your project so
13:06 - just choose install here and click OK so
13:10 - it's going to compile your source file
13:13 - test file it's going to run your tests
13:16 - then is going to create a jar file for
13:20 - your project so just wait for some time
13:23 - and then once it's finished you can see
13:27 - the jar file which will be created for
13:31 - your project so let's go to our project
13:34 - once again which is maven demo and you
13:37 - can see there is a one more folder which
13:40 - is created here which is target and
13:43 - inside a target you will be able to see
13:46 - the jar file created for your project
13:49 - which is maven demo this is the standard
13:51 - format in which this jar file will be
13:53 - created which is a 1 - demo which is the
13:57 - artifact ID then - the version of your
14:00 - project and then dot the package type of
14:04 - your project which is John in our case
14:06 - right in here you have all the test
14:09 - classes and surefire classes and in here
14:15 - you have maven archiver
14:18 - and other things which can be learned
14:22 - later but in this video I just wanted to
14:25 - show you how you can create your maven
14:28 - project and build it right now if you
14:31 - you know run the clean come on this
14:34 - target will be deleted so see this
14:37 - target for now and then when I run the
14:40 - clean command so good custom goes just
14:43 - right clean here and then run it and
14:50 - once this command is successful we will
14:54 - see here that your target folder will be
14:58 - deleted so it's deletes the target
15:01 - folder once you run the clean come on so
15:04 - in this way you can create a maven
15:06 - project inside your NetBeans IDE I hope
15:09 - you enjoyed this video please rate
15:11 - comment subscribe and bye

Cleaned transcript:

hello guys in this video I'm going to show you how you can create your first maven project in your NetBeans IDE so let's get started first of all open your NetBeans IDE and just click this file option here and then we will just choose the new project option and in here you will be able to find the Mabel category okay so just to the Maven category here and then choose this java application which is the first option here you can choose other type of options here for example JavaFX or web application or other you know other type of maven project but for simplicity we are choosing the first one which is java application right which is a bare bowl project now click Next and in here we are going to give the project name to our maven project and this will be the artifact ID of our project also now artifact ID is a name for your project for example junit has the artifact I will be J unit itself so whatever name you give here it will be the artifact ID of your project so for example maven demo and you can see the artifact ID of my project is also same as the project name now the second option here is the group ID so the group ID is for example you have some company or you are working for some company and its website name is code bind comm so group ID should be the reverse for example of that so in here we have comm dot code bind write or for example you have Java dot org so here you will write Watchi dot Java for example right and it's going to create the package for you according to this rope idea now third option here is this version now version here by default it's 1.0 and after this snapshot keyword is added to your version and this means that your project is in development mode whenever you are developing it's a good practice to add this keyword which is snapshot and this indicates that you are developing your project on your project is in development mode and once the project is you know in the result release mode you can just remove this snapshot keyword from here this last option is optional so you can keep it or you can you know you don't need to keep it it's just optional so let's keep it so my project name was maven demo right so it's creating the package something like this comm dot code binder which comes from group ID and then dot maven dot demo which comes from the project name ok so I'm going to just click finish here and it's going to create me a maven project now in here I can see this source packages and some dependencies but all of them are blank for now and also I can see some Java dependency and the project files so let's open our pom dot XML for now and right now in the pom dot XML we have our group ID which we have given which is comm dot code bind and our artefact ID which we have given which is maven demo and the module which is 1.0 snapshot right and the packaging of it by default it's a jar but you can change the packaging of your maven project inator also you just need to change this chart to for example war or any other option okay so this is the pom dot XML file right palm stands for project object model and it's really important to know about the details of pom dot XML because it's the basic building block I can say of Mabel site right now for example I want to add a source files to my project so I will just go to my source package here and then I will just go to new and in here I'm going to create a new Java class and for the Java class I'm going to give the name as for example app ok and you can see it's inside the maven demo project which is inside our source packages so we are creating a source you know force class so it's inside the source package and for the package you can choose the default package here which is comm dot code bind not may will not demo which is our package name and you can see the created file will be on this path so you have this project so this will be the project and then inside the source directory you will be having the main than the Java folder then comm then code bind then maven then demo and inside them all you will be having this app dot Java class so for now I'm going to copy this path and we are going to you know see the location later for example so just copy this pop and just click finish and after you click finish you can see here this app dot Java is created inside our comm load code by not evil one demo package right so now let's open this location where it's created so open your Windows Explorer and just paste this part up to your project name so inside my NetBeans project I have this maven demo project so I'm going to just copy and paste the path of this here and I'm going to open it so you can see you have this palm dot XML file and you have this source file here right inside so far you have the main and Java then comm code mine maven demo and your app dot Java class here right now for example you want to add the test files how we can do it so for creating the test class you just need to click on your project and then go to new and go to others and in here you will be able to see junit here you can see unit tests and in the unit tests category you can see a unit test right so just do this and then click Next and in here also you just need to give the name of your class so I'm going to just name it as app test because it's a test class right and it's inside the maven demo package and the location will be the test package right and the package name I can also give here right now it says default package but I can just give the package name same as I have given for the for example my source files right so for example here I can give comm dot would bind dot the Mayville dot demo right this was the same package name I have given for my source file right and in here leave everything as default for now and then click finish and you can see in the test packages it has created us the test class inside the same package name right so let's open the folder structure once again and we will go to the Mabel demo once again and inside ours SRC folder now you have main folder which contains our source file and you have the test folder which contains our test files so you can go to test Java comm code by naval demo and you have this class here okay now once you added this test class it uses junit right so when you go to bomb dot axonal you will be able to see this dependency which is automatically added to your bomb dot XML file right so this is due to this class which we have added so if you remove this dependency then it's going to remove this test dependency also so you can see there is one more test dependency folders created for us and in here maven has automatically downloaded these two jar files one is junit 4.12 and second is hamcrest which is the dependency for a.j unit so that's why it has also added this one also right so if you remove this dependency for example I'm going to remove this and I'm going to save my project these tests dependency will also be deleted you see there is no jar file for our junit now and now it's showing the error right so once again when I add in my pom dot XML this dependency for the J unit then it's going to let's see what happens so save it and you can see the dependency is automatically down low loaded and then added to your test dependencies and then you don't have any error now to compile your project what you need to do is we just need to right click on your project and there is a option here which says custom and then choose the bulls now there are different goals possible for your mimin project for example if you want to compile your project you just need to write here compile which is the normal option just write compile write and it's going to compile your project so when I write compile here and click OK in the maven build here you can see it's building your project and you can see this message which says build success this means that your source files are compiled successfully now there is one more goal for example you want to run your test go to the custom goes and here just write tests which will run your tests so just click OK and going to run your test as going to run tests after running the tests is going to show this message which says build success right there is one more command which is for compiling your tests so just go custom goes and this time just write tests compiled so just test hi compile and then click OK and then it's going to you know compile your tests and then it will show you the result which is build success now in order to create a jar file out of your project you just need to right click on your project go to custom goals and in here you just need to write install which is going to create the jar file for your project so just choose install here and click OK so it's going to compile your source file test file it's going to run your tests then is going to create a jar file for your project so just wait for some time and then once it's finished you can see the jar file which will be created for your project so let's go to our project once again which is maven demo and you can see there is a one more folder which is created here which is target and inside a target you will be able to see the jar file created for your project which is maven demo this is the standard format in which this jar file will be created which is a 1 demo which is the artifact ID then the version of your project and then dot the package type of your project which is John in our case right in here you have all the test classes and surefire classes and in here you have maven archiver and other things which can be learned later but in this video I just wanted to show you how you can create your maven project and build it right now if you you know run the clean come on this target will be deleted so see this target for now and then when I run the clean command so good custom goes just right clean here and then run it and once this command is successful we will see here that your target folder will be deleted so it's deletes the target folder once you run the clean come on so in this way you can create a maven project inside your NetBeans IDE I hope you enjoyed this video please rate comment subscribe and bye
