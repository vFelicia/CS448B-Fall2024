With timestamps:

00:00 - hey guys welcome to this course on
00:02 - python programming for beginners so why
00:05 - learn python because using python you
00:08 - can build almost anything python can be
00:11 - used for web development game
00:13 - development computer vision robotics
00:17 - graphical user interface development and
00:20 - also python is the number one
00:23 - language of choice for machine learning
00:26 - data science and artificial intelligence
00:30 - so the goal of this course is to provide
00:32 - you the working knowledge of python
00:34 - programming we will start with the
00:36 - basics starting from the installation of
00:39 - python on your operating system and then
00:41 - we will learn all the basic concepts in
00:43 - python programming like variables data
00:46 - types operators control statements loops
00:50 - strings
00:51 - functions
00:52 - and also python collections like lists
00:56 - tuples sets and dictionaries
00:59 - then we will move to the object oriented
01:02 - programming concepts in python so in
01:05 - this section we will start with what is
01:08 - object oriented programming what are
01:10 - classes and objects and then we will
01:12 - cover the concepts like encapsulation
01:15 - inheritance polymorphism abstraction and
01:19 - access specifiers also we will see some
01:22 - advanced object oriented programming
01:24 - topics like abstract classes and
01:27 - compositions next we will see how we can
01:30 - handle exceptions using python
01:32 - programming then we will move towards
01:34 - some advanced topics like python
01:37 - iterators generators decorators and also
01:41 - we will cover some functional
01:43 - programming concepts using python i will
01:46 - also cover how you can debug your python
01:48 - code and also we will see how to use pip
01:51 - which is a python package management
01:54 - system to install and manage your
01:57 - software packages written in python next
02:00 - we will see multithreading in python
02:02 - also we will see pi test framework which
02:05 - is one of the most popular unit testing
02:08 - framework
02:09 - for python now if you want to see the
02:12 - whole list of topics which will be
02:15 - covered in this video course then you
02:18 - can see the description of this video
02:20 - and you will be able to see all the
02:22 - topics which will be covered in this
02:25 - video so what are you waiting for let's
02:27 - get started
02:31 - in this video i'm going to give you a
02:32 - brief introduction about python so let's
02:35 - get started so first of all what is
02:37 - python
02:38 - so python is a high level dynamically
02:41 - typed programming language
02:44 - python support multiple
02:46 - programming paradigms including object
02:49 - oriented
02:50 - imperative functional and procedural
02:54 - styles now python is a interpreted
02:56 - language
02:58 - so what do we mean by interpreted to
03:01 - understand this we need to understand
03:03 - the difference between the compiled
03:05 - languages and the interpreted languages
03:08 - so some languages like c c plus plus
03:11 - java are all translated by running the
03:14 - source code through our tool called
03:18 - compiler this compilation of source code
03:21 - results in a very efficient byte code
03:24 - that can be executed any number of times
03:27 - now interpreted languages like python in
03:29 - contrast must be parsed
03:32 - interpreted and executed each time the
03:35 - program is run thereby greatly adding
03:39 - the cost of running the program so a
03:42 - compiled language takes the entire
03:44 - program as a single input and converts
03:47 - it into machine code or byte code which
03:50 - is stored in a file called a binary file
03:54 - on the other hand interpreted languages
03:56 - like python takes the single instruction
03:59 - as single input and execute that
04:02 - instruction now compile languages run
04:05 - faster because compilation is done
04:07 - before the execution
04:09 - on the other hand interpreted programs
04:11 - run slower because compilation and
04:14 - execution takes place
04:16 - simultaneously in case of python even
04:19 - though it's a interpreted language but
04:22 - it's really fast now python supports
04:24 - dynamic data types and to understand
04:27 - this we need to understand the
04:28 - difference between statically typed
04:31 - programming languages and dynamically
04:34 - typed programming languages
04:36 - so at statically typed programming
04:38 - languages do the type checking at the
04:41 - compiled time as opposed to the real
04:44 - time and dynamically typed programming
04:47 - languages
04:49 - do type checking at run time as opposed
04:52 - to compile time so let's say you declare
04:55 - a variable x is equal to 9 in python
04:59 - python will do its type checking at
05:01 - runtime whether it's an integer or a
05:04 - string or a double value
05:06 - all will be done at the runtime now
05:09 - python is independent from platforms
05:12 - that means it's a cross platform
05:14 - programming language
05:16 - that means you can run your python code
05:18 - on windows linux mac or on any other
05:22 - unix operating system now python focuses
05:25 - on faster development time so python
05:27 - code has a very natural style to it
05:30 - which makes it easy to read and
05:32 - understand thanks to the lack of
05:34 - semicolons and braces so we don't use
05:37 - semicolons or braces in python that
05:40 - means faster development time especially
05:43 - when you are doing some prototyping work
05:45 - python is a highly readable language and
05:48 - has a clean visual layout so if a
05:51 - developer writes a very efficient python
05:54 - program it's like reading english
05:57 - language now python have high level
05:59 - internal object data types and have
06:02 - automatic memory management and at last
06:05 - python is free and open source that
06:07 - means you don't need to pay anything to
06:10 - start learning python now let's talk
06:12 - about some history about python
06:15 - so python was conceived in late 1980s
06:20 - and its implementation began in december
06:23 - 1989 by a developer called guido fan
06:27 - rossum in netherlands as a successor of
06:31 - a programming language called abc now
06:33 - guido fan rossum worked at google from
06:37 - 2005 to december 2012 where he spent
06:41 - half of his time in the development of
06:43 - python programming language and nowadays
06:46 - fan rusim is working in a company called
06:49 - dropbox and from where this python name
06:52 - come from
06:53 - russom chose the name python since he
06:55 - was a big fan of monty python's flying
06:58 - circus so python was first publicly
07:01 - released in february 1991
07:04 - and
07:05 - python.org which is the official website
07:08 - of python was released in the time
07:11 - period between 1996 and 1997. in the
07:15 - year 2001 python software foundation was
07:18 - created and fan brewsim remained the
07:21 - principal author of python his
07:24 - continuing central role in python
07:26 - development is reflected in the title
07:29 - given to him
07:30 - by python community which is benevolent
07:33 - director of life now what is a
07:36 - benevolent director of life this is a
07:38 - title given to small number of open
07:40 - source software development leaders
07:43 - typically the project founders who
07:46 - retain the final say
07:48 - in the dispute or arguments within the
07:51 - community so why learn python because
07:54 - python is fun to use scripting language
07:58 - and as i said python is a multi-paradigm
08:00 - programming language which supports
08:03 - object oriented imperative functional
08:05 - programming and procedural styles that
08:08 - means it's highly recommended for the
08:11 - educational purpose so majority of
08:14 - educational institutes use python as the
08:17 - first language which they teach to their
08:20 - students and why it's the first choice
08:23 - of educational institutes because it's
08:25 - very easy to learn and it runs on any
08:28 - platform now python is very powerful
08:31 - scalable and easy to maintain
08:34 - programming language which enables high
08:36 - productivity and it has lots and lots of
08:39 - inbuilt libraries which our developer
08:41 - can use python is also used as a glue
08:44 - language which acts as a interactive
08:46 - front end for the languages like c and c
08:49 - plus plus so when you develop in python
08:51 - it reduces the development time it
08:54 - reduces the code length it is easy to
08:57 - learn and use as a developer it is easy
09:00 - to understand codes it is easy to do
09:03 - team projects in python and it's really
09:06 - easy to extend to other languages if you
09:09 - are using python so where can you use
09:12 - python
09:13 - so because python is a general purpose
09:15 - programming language it is used in many
09:18 - web development framework for example
09:21 - django and flask recently became very
09:24 - popular for web development now python
09:27 - is also widely used in scientific
09:30 - computing data mining and machine
09:33 - learning and continued growth and demand
09:36 - for machine learning developers may be
09:39 - driving the popularity of python now as
09:42 - i said python is used as a scripting
09:45 - language that means if you are doing
09:48 - prototyping it's really efficient to use
09:51 - python
09:52 - python is also used in the development
09:54 - of graphical user interfaces embedded
09:58 - applications gaming and devops tools and
10:02 - at last as i said because python is
10:05 - really easy to learn
10:07 - it's used for educational purposes as
10:10 - the first programming language for
10:13 - teaching programming now the question
10:15 - arises which version of python should
10:17 - you learn python 3 or python 2. so i
10:21 - would recommend python 3 since it's more
10:24 - modern and it is a more popular option
10:27 - at this point of time so i will be
10:30 - teaching this course in python 3. so
10:33 - this was a brief introduction about
10:35 - python from the next video i'm going to
10:37 - show you how to install python and how
10:39 - to use python as a programming language
10:42 - in this video i'm going to show you how
10:44 - to install python 3 on your windows 10
10:46 - operating system so let's get started so
10:49 - first of all open your favorite browser
10:51 - on your windows 10 operating system and
10:52 - then search for python and the first
10:55 - link which will appear here will be from
10:57 - python.org so we are going to click on
10:59 - that link and once this python.org
11:01 - website is open you just need to scroll
11:03 - down a little until you see this
11:05 - downloads section
11:07 - and you can see at the time of making
11:09 - this video python 3.7.0
11:12 - is the latest version of python
11:13 - available so we are going to click on
11:15 - this link which says python 3.7.0 and
11:18 - you will be redirected to this page
11:21 - which says python 3.7.0 and now i'm
11:23 - going to scroll down until i see
11:26 - the files here and you will see there
11:28 - are various kinds of installer available
11:30 - here we are going to install the python
11:33 - using the executable installer so we are
11:35 - going to choose this option which says
11:36 - windows x86 hyphen 64 executable
11:41 - installer and now i will wait for this
11:43 - executable to be downloaded and once
11:45 - this executable is downloaded you just
11:47 - need to click on this exe file and i'm
11:50 - going to minimize the browser here so
11:52 - you can see python's 3.7.0 setup window
11:55 - has been started and on the first window
11:57 - you will see two options here
11:59 - one is install now and other is
12:02 - customize installation so what we are
12:05 - going to choose is this option which
12:07 - says customize installation because when
12:09 - you choose this install now option
12:12 - python will be installed at this part
12:15 - which i don't want to use you can see
12:18 - it's a long path which i don't want to
12:20 - remember so i will use this option which
12:24 - says customize installation and i will
12:26 - also check this option which says add
12:28 - python 3.7 to path so now let's click on
12:31 - customize installation and next you will
12:33 - see this optional feature window and you
12:36 - can see there are some optional feature
12:38 - which this python installer will install
12:41 - for example documentation pip it will
12:44 - install which is a python package
12:46 - manager idle ide
12:48 - python test suit and other feature it's
12:51 - going to install so i'm going to leave
12:52 - everything as default and then i'm going
12:54 - to click next and now this next window
12:56 - will open which says advanced option
12:59 - here i'm going to check
13:00 - this option which says install for all
13:03 - users and i'm going to leave other check
13:06 - boxes as checked and then you will see
13:08 - this section here which says customize
13:10 - install location so i want to install
13:12 - python on my c directory so what i'm
13:14 - going to do is i'm going to open the
13:16 - windows explorer and i'm going to go to
13:18 - the c directory here
13:21 - and once the c directory is open i'm
13:23 - going to right click here and i'm going
13:24 - to create a new directory and i'm going
13:26 - to name this directory as python and
13:29 - then i'm going to press enter
13:31 - and this path i'm going to give here in
13:34 - the customize install location so i'm
13:36 - going to just give this part which says
13:39 - see colon slash
13:41 - python and then backslash python 3 7 3 7
13:46 - here means that we are going to install
13:48 - 3.7 version of python so now python will
13:51 - be installed at this location on my
13:53 - computer and then i'm going to click on
13:55 - the install button here and then you
13:56 - will see the installation will start and
13:58 - it will be finished in a few seconds so
14:01 - just wait for the installation to
14:02 - complete and after some time i can see
14:04 - this message which says setup was
14:05 - successful so i'm going to click on this
14:07 - close button which is going to close
14:09 - this installer so now in order to check
14:11 - whether python is installed on our
14:13 - windows operating system or not we are
14:15 - going to search for
14:16 - python here and you will see few options
14:19 - here one is this python 3.7 terminal
14:23 - other is
14:25 - idle ide so first of all we are going to
14:27 - click on this option which says python
14:29 - 3.7 64-bit which is going to open this
14:32 - kind of terminal so this is a python
14:35 - terminal and here we can for example
14:38 - print something so i am going to just
14:39 - write print and in the parenthesis and
14:42 - in between the double quotes i can just
14:44 - write hello
14:46 - world and then press enter which is
14:48 - going to in return print hello world
14:51 - that means python 3.7 terminal is
14:54 - working so i'm going to close this
14:56 - terminal now and once again i'm going to
14:58 - search for python here and this time i'm
15:00 - going to select this option which says
15:02 - idle okay so just select this option
15:04 - which says idle and in the parenthesis
15:06 - python 3.7 64-bit so this idle is an ide
15:11 - which comes with python installation at
15:14 - the time of installation we have chosen
15:16 - this option to install idle that's why
15:18 - we can see this option here and also
15:20 - this is an interactive shell so you can
15:22 - once again write a print and inside the
15:25 - parenthesis you can just write for
15:27 - example once again hello
15:30 - world and then press enter and it's
15:32 - going to give you this kind of output
15:34 - here so now python interactive shell is
15:36 - working and idle ide is also working so
15:39 - i'm going to close this idle ide and now
15:42 - i want to check whether python is
15:44 - working using my command prompt or not
15:46 - so i'm going to right click on this
15:48 - windows button and then i'm going to
15:51 - click on command prompt
15:53 - and here i'm going to first of all write
15:55 - python and then press enter and you can
15:58 - see this python option is working now
16:01 - even on your command prompt right so
16:04 - here also you can just write print and
16:07 - inside the parenthesis you can just
16:09 - print hello
16:11 - world and then press enter and it prints
16:13 - hello world in return so now we have
16:16 - successfully installed python on our
16:18 - windows 10 operating system in this
16:21 - video i'm going to show you
16:23 - how to use mathematical operators and
16:26 - how to do basic math in python
16:30 - so first of all we will open the idle
16:33 - ide so just search for
16:35 - python once again i have shown you this
16:37 - method in the last video also so just
16:40 - search for the python once again and in
16:43 - the last video i have shown you how to
16:45 - install a python and with the python
16:47 - installation this idle is also installed
16:51 - right so we are going to open this idle
16:54 - ide now some of you who are familiar
16:56 - with python and have some experience
16:59 - with python may think that why am i
17:02 - using this python idle ide because there
17:06 - are many better ides and editors
17:09 - available for the development of python
17:13 - so don't worry i'm going to show you
17:16 - everything how to install other ides
17:19 - which are preferred in the development
17:21 - of python step by step but for now we
17:24 - will start with this idle ide so the
17:27 - first thing which i want to do here is i
17:29 - want to increase the font size first of
17:32 - all in the idle ide because this may be
17:37 - not visible to some of you you can
17:39 - change the font size by just changing
17:42 - this number
17:43 - and i'm going to change it to for
17:45 - example 18 and bold so we will be able
17:49 - to see our fonts in a better way so now
17:52 - everything is set so let's get started
17:55 - with the programming so let's start with
17:57 - the basic math operations so let's say i
18:00 - want to add something so i can just
18:02 - write number plus which is a operator
18:06 - and the other number and then press
18:09 - enter and you will get the result of
18:12 - this expression now let's try the
18:14 - subtraction so let's say i want to
18:16 - subtract 60 minus 50 and then press
18:20 - enter and it gives the result
18:22 - let's do the negative subtraction so i'm
18:25 - going to just write 60
18:27 - plus 50 and then press enter and it's
18:30 - going to return me
18:32 - the negative value now let's do the
18:34 - division so for example i want to divide
18:37 - 50
18:38 - by 3 i'm going to press enter and you
18:41 - can see it gives me a float value or a
18:44 - decimal value and if you are familiar
18:46 - with other languages like java or c plus
18:49 - plus this may appear a little bit
18:50 - strange to you because when you do the
18:53 - same operation in java or c plus plus
18:57 - with this division operator you will get
19:00 - the different answer which is 16 and not
19:04 - these decimal float value so if you want
19:07 - to just get an integer value and not the
19:10 - decimal value out of the division then
19:13 - you can write this expression which is
19:15 - 50
19:16 - double forward slash 3 okay and then
19:19 - press enter and now you get 16 which is
19:23 - a whole number or an integer this type
19:25 - of division is also called the floor
19:28 - division in which you get the whole
19:31 - number as the answer and
19:34 - the decimal value is truncated out of
19:38 - your answer so if you want to get the
19:40 - exact value out of the division in
19:42 - decimal values also then you can use
19:45 - this expression which is single forward
19:47 - slash operator and if you want to do the
19:50 - flow division then use these two forward
19:53 - slash symbols now it's also possible to
19:56 - divide two decimal values so decimal
19:58 - values in python and most of the other
20:02 - languages are called the float values so
20:05 - here instead of 50 i can just write 50.0
20:10 - divided by
20:11 - 3.0
20:13 - which is also valid or i can write 50.0
20:18 - divided by 10 and then press enter which
20:22 - gives me 5.0 and when i write the
20:25 - integer which is 50 divided by 10 it
20:28 - will also give me this value which is
20:31 - 5.0 now let's try some multiplication so
20:34 - if you want to do multiplication in
20:36 - python you use
20:37 - a number and then this asterisk symbol
20:40 - and then
20:42 - second number and then press enter and
20:45 - this is going to multiply these two
20:47 - numbers so this is the multiplication
20:51 - operator which we can use to multiply
20:53 - two numbers now this is what we are
20:55 - doing here is for example uh multiplying
20:59 - two numbers or dividing two numbers or
21:01 - addition of two numbers or subtraction
21:03 - of two numbers
21:05 - in python it's called expression okay so
21:08 - 50 multiplied by 10 is an expression and
21:12 - i have already told you that these are
21:14 - symbols for multiplication or division
21:18 - are called operators
21:20 - now the number on which you are doing
21:23 - these mathematical operations are called
21:26 - operands so 50 here is an operand 10
21:29 - here is an operand or 3 here is operand
21:32 - and 50 here is operand now here 50 and
21:36 - 10 are also called literals because they
21:38 - are constant values so what we have
21:41 - learned till now
21:42 - this is an expression
21:45 - this is an expression or 50 divided by 3
21:49 - is an expression
21:50 - the number on which you operate on are
21:53 - called operands
21:54 - and
21:55 - these symbols
21:57 - which you can use to multiply divide add
22:00 - or subtract
22:02 - are called operators and these numbers
22:05 - are also called literals when they are
22:08 - constants now let's try some modulo
22:12 - operations so for example i'm going to
22:14 - just write 10
22:16 - modulus
22:17 - 3 here what it's going to give us is the
22:20 - remainder of the division of these two
22:24 - values so 3 multiplied by 3 is 9 which
22:28 - leaves the remainder 1 and that's the
22:31 - result we are getting okay let's try it
22:34 - once again so for example i will divide
22:36 - 21
22:37 - divided by 5 it will give me the answer
22:40 - 4.2 but when i do 21 modulo
22:45 - 5 and then press enter it's going to
22:48 - give me the remainder of the division of
22:52 - two values now there is an another
22:55 - interesting operator which is called
22:57 - exponent operator which you can use for
23:01 - the exponent values so for example i
23:03 - want to get the result of 2 to the power
23:06 - 5. how can i do it so i can just write 2
23:10 - and then double as 6 and then 5 which
23:13 - means 2 to the power 5 and then when i
23:16 - press enter it's going to give me 32 or
23:21 - i can just write to 10
23:23 - and then i can just write double
23:25 - asterisks and then for example 10 once
23:28 - again and then press enter it's going to
23:30 - give me the result of 10 to the power
23:32 - 10. now it's also possible to do these
23:35 - mathematical operations on more than one
23:38 - number so for example i can write 5 plus
23:41 - 5 plus 6 plus 9 and it will give me the
23:45 - result of the addition of these four
23:48 - numbers and it's also possible to use
23:50 - different type of operator in one
23:53 - expression so i can write 5 plus 9 minus
23:57 - 6 multiplied by 10 for example and it's
24:01 - going to give me the result of this
24:03 - expression now there is one question
24:06 - which may arise here is for example once
24:08 - again i'm going to do 5 plus 9 minus 6
24:13 - multiplied by 10
24:15 - and divided by 20
24:18 - and press enter here it's going to give
24:21 - me this value but how this value is
24:24 - calculated
24:25 - what operation is executed first is the
24:29 - multiplication is done first or is the
24:32 - division done first or the addition took
24:35 - place first or the subtraction took
24:38 - place first so i have this table and
24:41 - here you can see
24:42 - the precedence of these operators so in
24:46 - this table highest precedence is at top
24:49 - and lowest is at bottom that means
24:53 - parenthesis have the highest priority
24:57 - and then the exponents have the priority
25:00 - and then the multiplication and division
25:02 - operators have the same priority here
25:05 - and at last the subtraction and addition
25:09 - have the same priority but whenever you
25:12 - use these operators which are in the
25:14 - same box
25:16 - in a same expression
25:18 - then whatever operator you use on the
25:21 - left have the highest priority
25:24 - and whatever operator you use on the
25:27 - right have the lower priority so in this
25:31 - table parenthesis have the highest
25:32 - priority and the addition and the
25:34 - subtraction have the lowest priority
25:37 - and for example if you use
25:39 - multiplication and division in the same
25:42 - expression
25:43 - then the priority is decided which
25:46 - operator is appearing on the left so if
25:49 - the operator is appearing on the left it
25:51 - has the highest priority then the
25:53 - operator which are on the right side so
25:56 - let's take an example of that so for
25:59 - example
26:07 - so first the addition of these two
26:09 - number will happen
26:10 - and then the division of these two
26:12 - numbers will happen because parentheses
26:15 - have the highest priority
26:17 - and then the result of these two numbers
26:21 - will be multiplied by 6 because
26:24 - multiplication have the highest priority
26:27 - out of these two operators which are
26:30 - minus and multiply so multiplication
26:33 - operator have the highest priority and
26:36 - at the end the subtraction of the result
26:40 - will take place so let's press enter and
26:42 - let's see what's the result so the
26:44 - result here is 11 and how we get this
26:47 - result here so 5 plus 9 is 14. and the
26:52 - division of these two number is 1 by 2
26:56 - so 6 will be divided by 2 which is 3 and
26:59 - then at last 3 will be subtracted from
27:02 - this result which is 14 which will give
27:05 - you 11. once again for example you use
27:09 - 60 multiplied by 20
27:13 - divided by
27:14 - 30 and then press enter it will give you
27:17 - 40 but in which order this calculation
27:21 - will happen first of all this
27:23 - multiplication will take place because
27:25 - in the table we have seen
27:27 - that multiplication operator and
27:29 - division operator have the same priority
27:32 - and that's why the priority will be
27:34 - decided from left to right now if you
27:37 - want to learn the order of precedence
27:40 - between the operators
27:42 - then you can use this keyword which is p
27:45 - e m d a s
27:47 - p stands for parentheses e stands for
27:50 - exponents m stands for multiplication
27:54 - d stands for division a stands for
27:57 - addition and s stands for subtraction
28:00 - okay so you can either remember this
28:04 - name which is
28:06 - pemdas or you can use this sentence
28:09 - which i have written here
28:11 - so please excuse my dear aunt sally and
28:15 - you need to remember the first letter
28:18 - of each word here and the first letter
28:21 - of every word for example p here stands
28:23 - for parenthesis is here stands for
28:26 - exponent m and d here stands for
28:29 - multiplication and division a and s here
28:32 - stands for addition and subtraction so
28:35 - for remembering you can either use this
28:38 - sentence or you can remember this
28:40 - keyword in this video we will talk about
28:43 - python variables and types
28:46 - so first of all what is a variable
28:50 - so according to wikipedia in computer
28:52 - programming a variable is a storage
28:55 - location
28:57 - paired with an associated symbolic name
29:00 - also known as variable name or
29:03 - identifier
29:04 - which contains some
29:07 - known or unknown quantity of information
29:10 - referred to as value
29:13 - now in simple words a variable is a
29:16 - named place in the memory
29:19 - where a programmer can store data
29:22 - and later retrieve this data using the
29:26 - variable name
29:28 - now the programmer get to choose the
29:30 - name of this variable which is declared
29:33 - and programmer can change the content of
29:36 - this variable
29:37 - in the later statements so let's see how
29:40 - we can define a variable in python so
29:43 - you can define a variable using any name
29:47 - for example you can give my
29:50 - int as a name and then using an
29:52 - assignment operator which is this equal
29:54 - to symbol
29:56 - you can assign some value to this
29:58 - variable for example 9 and when i press
30:01 - enter
30:02 - this value 9 is assigned to this
30:06 - variable which is my int and now on i
30:09 - can just get the value of this
30:13 - variable using the variable name so when
30:16 - i write my int and then press enter it
30:19 - gives me the value which is assigned to
30:22 - this variable now as i told you in the
30:25 - first introduction video of this course
30:28 - that python is completely object
30:31 - oriented and it's not statically typed
30:35 - so you do not need to declare the
30:37 - variables before
30:39 - using them
30:40 - or you do not need to declare the type
30:43 - of the variable and further every
30:46 - variable in python is an object so if
30:50 - you have learned some other languages
30:52 - like c c plus plus java or other
30:55 - statically typed languages
30:58 - you may have observed that before
31:00 - writing the variable name
31:03 - they give the type of the variable for
31:05 - example in other languages for defining
31:08 - integer they have to first define the
31:10 - data type of that variable and then they
31:13 - define the variable name and then they
31:16 - assign any value to it but in python you
31:19 - don't need to define this data type here
31:21 - and whenever you define a variable you
31:23 - need to assign some value to it so that
31:26 - python will be able to understand the
31:29 - type of data you want to store in this
31:32 - variable
31:33 - so this type of notation when i press
31:36 - enter here it's going to give me
31:38 - error which says invalid syntax because
31:41 - this type of variable declaration is not
31:44 - allowed in python now there are some
31:47 - rules which you need to follow in order
31:49 - to declare a variable in python and
31:51 - these rules are a variable must start
31:55 - with a letter or
31:57 - underscore okay so you cannot
32:01 - start the variable name with a number or
32:05 - some unknown symbol the second rule is a
32:08 - variable must consist of letters numbers
32:12 - and underscores and no other special
32:15 - symbol
32:17 - and the third rule is
32:19 - variables are case sensitive so let me
32:22 - show you the demo of all the rules which
32:25 - are related to declaration of variables
32:27 - in python
32:28 - so let's say we have defined this
32:30 - variable myint
32:32 - i cannot get the value of my end when i
32:36 - write for example
32:37 - my with capital letter and then int here
32:42 - and it's going to give me an error
32:44 - because variables in python are case
32:48 - sensitive
32:49 - so this variable name is different from
32:51 - this variable name now as i told you you
32:54 - can define a variable starting with the
32:56 - letter it's totally valid so let's
32:59 - define this variable age is equal to 10
33:02 - which is valid you can also define a
33:04 - variable with the combination of
33:07 - letters and the numbers and it's also
33:10 - totally valid
33:11 - but a variable name cannot start with a
33:14 - number so when you write something like
33:16 - this
33:17 - and assign some value to it it's going
33:20 - to give you an error which is a syntax
33:22 - error so a variable name cannot start
33:25 - with a number
33:26 - a variable name can start
33:28 - with underscore and it's totally valid
33:32 - but apart from underscore when you use
33:35 - some special character for example hash
33:38 - age is equal to 10 it's not valid so
33:41 - whenever you try to get the value of age
33:43 - it's not going to give you
33:45 - the value which is stored inside this
33:48 - variable also you cannot use any other
33:52 - special symbol between the variable
33:55 - names so for example i can write h dot
33:58 - 22 here is equal to 22 which is not a
34:02 - valid syntax because we have used this
34:06 - dot symbol in between
34:08 - the variable declaration so these are
34:11 - some of the ground rule in order to
34:13 - declare a variable
34:14 - in
34:15 - python now apart from that there are
34:18 - some reserved words in python which also
34:22 - you cannot use in order to declare a
34:24 - variable for example these are some of
34:27 - the words which you cannot use in order
34:30 - to declare a variable for example and
34:33 - del for is raise you cannot use to
34:38 - declare a variable so let's say i'm
34:40 - going to go to idle once again and i
34:43 - declare a variable called for
34:45 - is equal to 10
34:47 - it's not valid it says it's a invalid
34:51 - syntax because for is a reserved word in
34:54 - python so now we have learned some rule
34:57 - about declaring the variables so let's
35:00 - declare some variables in python
35:03 - so first of all i'm going to declare an
35:06 - integer variable which takes an integer
35:09 - and then i'm going to declare a float
35:12 - variable which takes a decimal value and
35:15 - then i can also declare in python a
35:18 - complex value for example
35:21 - my
35:22 - complex is equal to 1 j
35:25 - and then press enter
35:27 - and it's also totally valid where j in
35:30 - this value is the imaginary part of this
35:34 - complex number now you can also use e to
35:37 - indicate the power of something so for
35:39 - example i declare a variable my num and
35:42 - you can write this notation like this so
35:45 - 10
35:45 - to the power 10 is totally valid okay
35:49 - and when you try to access this value of
35:53 - my num it's going to give you the value
35:55 - of 10 to the power 10. you can also
35:57 - write the capital e here so when i write
36:01 - my num is equal to 10
36:03 - capital e 10 and then press enter and i
36:07 - try to access the value which is stored
36:09 - in this variable you can see it gives me
36:12 - the same result now in order to declare
36:14 - a string variable for example my string
36:17 - i can use double quotations for example
36:21 - i want to write some name here
36:23 - it's totally valid so i'm going to just
36:25 - get the value which i stored inside this
36:28 - my string variable and it gives me this
36:31 - name max i can also use single quotation
36:34 - in order to assign a string to the
36:37 - variable so i will use now single
36:40 - quotation and this time i just change
36:42 - the name to tom
36:44 - it's also totally valid so when i write
36:47 - my
36:48 - string once again it gives me the value
36:50 - tom now you may have noticed one more
36:53 - thing here is
36:55 - reassignment of the variable is possible
36:57 - so first i have assigned the value max
37:00 - to this variable my string and then i
37:03 - have reassigned some other value tom to
37:06 - the same variable my string so
37:08 - reassignment is possible so for example
37:12 - let's say what i'm going to do is i'm
37:14 - going to take my float variable and then
37:17 - what i'm going to do is i want to assign
37:20 - in this variable the value which is
37:22 - stored in my int variable so i'm going
37:25 - to just write my int here and then press
37:28 - enter and let's see what is the value
37:30 - inside my
37:32 - float now and you can see it gives us
37:34 - the value 10 but you may ask that we
37:37 - have declared this variable name as
37:41 - myfloat so we are expecting the float
37:43 - value inside this myfloat variable name
37:47 - but it's giving me
37:49 - the value 10 so in order to convert
37:52 - integer value into a float value you can
37:56 - use typecasting so i can just write my
37:59 - float here is equal to
38:02 - then you write a keyword float here and
38:05 - then inside the parentheses you can
38:07 - write the name of the variable which is
38:09 - myint
38:10 - and then when i access the value of my
38:13 - float here it's going to give me
38:15 - 10.0 which is a float value so in order
38:19 - to convert integers into float you can
38:23 - use this keyword float here now if you
38:26 - want to convert a float value into an
38:29 - integer you can just write for example
38:32 - my
38:32 - int
38:33 - is equal to
38:35 - int
38:36 - and then inside the parenthesis you can
38:38 - write the variable name for example my
38:41 - float here and then press enter and then
38:44 - i can see the value which is stored
38:47 - inside this mind variable and it's an
38:50 - integer now let me show you one last
38:52 - thing which is to find out the type of
38:55 - any variables so you use a keyword
38:58 - called type and in the parenthesis
39:01 - you use the variable name for example my
39:04 - int and then press enter
39:06 - and it will give me the type of the
39:09 - value which is stored inside this
39:12 - variable so you can see integer is
39:14 - stored inside this variable myint once
39:18 - again type and then parenthesis and now
39:21 - i want to know the type which is stored
39:24 - in the my float variable and you can see
39:27 - it will give me float as an answer so we
39:31 - know that in my float variable float
39:34 - value is stored once again we will see
39:37 - what value is stored in this mynum which
39:40 - is an exponent value right so i'm going
39:43 - to just write type and then i'm going to
39:46 - just write my
39:48 - num now and then press enter and it
39:51 - gives me a float value and at last i
39:54 - want to see what type is stored in this
39:57 - my string variable so i can just write
40:00 - my
40:01 - string here and then press enter and you
40:03 - can see
40:04 - the value which we get here is str which
40:08 - stands for string that means in my
40:10 - string string value is stored now it's
40:13 - totally possible to use the operators
40:16 - with variables so i want to add the
40:18 - value stored in my int plus
40:21 - my
40:22 - float here and this will give me 20
40:25 - because my int have the value 10 and my
40:29 - float have the value 10.10 so the result
40:32 - is 20.0 here so this is how you can use
40:35 - variables and types in python
40:38 - in this video we will see how to use
40:40 - print function in order to print output
40:43 - on the console in various different ways
40:46 - and i'm also going to show you how to
40:48 - take user input using python so we have
40:52 - already seen that in python we can use
40:55 - this print function in order to print
40:58 - something and we have already printed
41:01 - hello world
41:03 - at the time of installation right and
41:05 - when i press enter it's going to print
41:07 - hello world on the console now some of
41:09 - you might wonder what is this print
41:13 - so print is a in built function in
41:17 - python so python has a number of inbuilt
41:21 - function and print is one of them so
41:24 - here print is a function
41:27 - and then inside the parenthesis what you
41:30 - give here is called a parameter
41:34 - or an argument okay so hello world is an
41:38 - argument which is a string argument
41:41 - right so let's try to give
41:44 - in this print
41:46 - an integer argument let's say i just
41:49 - provide 25 here
41:51 - and it will print this number once again
41:54 - let's say i'm going to write print and
41:56 - then i want to execute some expression
41:58 - 50
41:59 - multiplied by 60 and then press enter
42:03 - print function is also able to do this
42:06 - now let's say i want to output some more
42:09 - complex formatted string so let's say i
42:12 - want to print on the console 50
42:14 - multiplied by 10
42:16 - is equal to 60. how can i do this so
42:20 - let's see how we can do it so i can
42:21 - write print here and then inside these
42:24 - double quotes you can write your string
42:26 - for example 50
42:28 - multiplied by 10
42:30 - and then in print function you can give
42:32 - multiple arguments using this comma
42:35 - separator
42:36 - so here i can just write 50
42:39 - multiplied by 10 and let me put equals
42:44 - symbol here inside this string
42:46 - and then press enter and now it prints
42:49 - 50 multiplied by 10
42:52 - equals
42:53 - 500 and you can also provide more than
42:56 - one
42:56 - argument to this print function so for
42:59 - example i can just write hello here and
43:03 - then in the second argument i will just
43:06 - provide the space between hello and
43:08 - world and in the third argument i will
43:10 - just say world here and this print
43:12 - function will concatenate all these
43:15 - string values and give you the output in
43:18 - this format now let's say you want to
43:19 - also provide this value here which is 50
43:22 - and 10 instead of string you want to
43:25 - provide
43:26 - some value which you take from a
43:29 - variable so for example you declare a
43:32 - variable x is equal to 50 here and then
43:35 - y
43:36 - is equal to 10
43:38 - and you want to use these two variables
43:40 - instead of this static string
43:43 - so how you can achieve this you can
43:45 - achieve this in various different ways
43:47 - so let me show you the first way so i
43:49 - can write print
43:51 - and then in the double quotes this is
43:53 - your string
43:54 - so whenever you use this double quotes
43:56 - and whenever you write something in
43:59 - between this double quotes it becomes a
44:01 - string so after this string i will
44:03 - provide a dot here
44:04 - and wait for some seconds and as soon as
44:07 - you do this you will be able to see
44:10 - various different hints here which are
44:12 - provided so these are all the inbuilt
44:15 - methods which you can use
44:17 - with the string
44:19 - so you can use find method you can use
44:23 - format method so for now we are going to
44:25 - use this format method with string so
44:28 - you can just click on this format method
44:30 - so let's say i will provide x
44:33 - as the first argument
44:35 - y as the second argument
44:37 - and i want to see
44:39 - the output of x multiplied by y
44:43 - in the third argument now how you can
44:46 - print the value of x y and the
44:48 - multiplication of x y
44:50 - using this blank string
44:53 - so it turns out that you can use these
44:56 - curly brackets inside this string and
44:59 - you can give some index here so index
45:02 - starts from 0. so this index is index 0
45:06 - and then i'm going to provide space and
45:09 - then this asterisk symbol to provide
45:12 - this kind of format so we want to
45:13 - achieve this format here right
45:16 - so just write 0 in the curly bracket
45:18 - space asterix and once again curly
45:22 - bracket and this time we are going to
45:23 - provide the index 1 and the result will
45:26 - be transferred to index 2.
45:29 - why because here the index starts from 0
45:32 - so x will be transferred to the index 0
45:36 - y will be transferred to the index 1 and
45:39 - the multiplication of x and y will be
45:41 - transferred to index 2 here so let me
45:44 - press enter here and you can see it
45:46 - prints the string which we desire now
45:50 - once again i'm going to write this print
45:51 - function and once again i'm going to
45:53 - give this parenthesis and you can see
45:55 - the hint here
45:57 - so i want to use this scp keyword now
46:01 - inside the string so how can i use this
46:03 - so i will just close this parenthesis
46:06 - and once again i want to print hello
46:07 - world so i will just write hello and
46:10 - then i'm going to provide the comma and
46:12 - inside the double quotes i'm going to
46:15 - just write
46:16 - world here and then in the last argument
46:19 - you can provide this keyword scp
46:22 - is equal to and inside the double quotes
46:24 - you can provide some separator to
46:26 - separate the hello from world so i want
46:30 - to just give this string to separate
46:32 - hello from world and now i'm going to
46:35 - press enter and you can see this string
46:37 - is separating the keyword hello from the
46:40 - world now in python you can also use c
46:44 - style string formatting to create a new
46:47 - formatted string so let me show you how
46:49 - we can do it so i'm going to declare a
46:51 - variable called name and i'm going to
46:53 - assign some value to it for example max
46:56 - here and then press enter
46:58 - and now i'm going to just write print
47:01 - function and in the parenthesis i want
47:04 - to just greet this name so i can just
47:07 - write double quotes hello here and then
47:11 - if you are familiar with c style
47:14 - string formatting then you may know this
47:16 - modulo s symbol which is used to print
47:19 - strings right
47:21 - and then after this double quote you
47:23 - just need to provide once again this
47:25 - modulo symbol
47:27 - and then you need to provide the
47:29 - variable name which you want to replace
47:32 - instead of this modulo s so in our case
47:35 - we want to replace this modulo s
47:38 - by name variable and i'm going to press
47:42 - enter
47:43 - and you can see it prints hello max now
47:46 - let's say i also have the age of this
47:49 - person so the age is let's say 22 and
47:53 - once again i'm going to use this print
47:56 - function and inside the parenthesis i
47:58 - want to say hello
48:00 - to the name including the age so i can
48:04 - just write hello and then modulo s here
48:07 - and then i'm going to print the age of
48:11 - this person i can just write r u modulo
48:15 - d which is used to print the integer
48:17 - values and then i'm going to just write
48:19 - years
48:20 - old
48:22 - and after the double quotes i can just
48:25 - write modulo and this time i cannot
48:27 - simply provide this name argument like
48:30 - this i must provide the name in the form
48:33 - of a tuple
48:34 - and what is a tuple a tuple is a fixed
48:38 - size list and we are going to see in the
48:41 - future videos how to use tuples but for
48:44 - now just remember that a table is a
48:47 - fixed size list okay so inside these
48:52 - parentheses once again i can provide
48:55 - first of all the name and then as a
48:57 - second value in the tuple i can provide
49:00 - the age variable and now i'm going to
49:03 - press enter
49:04 - and now you can see it prints hello max
49:07 - are you 22 years old so this is how also
49:11 - you can use
49:12 - these c styled string formatting in
49:16 - python
49:17 - i want to give you one more example of
49:19 - float here so i can just write
49:21 - for example this person's marks so i'm
49:24 - going to just write marks
49:26 - is equal to and let's say i want to
49:28 - provide these marks in the floating
49:30 - point so i can give this modulo f here
49:33 - and then after this modulo i can just
49:36 - give the mark so
49:38 - 92.5 and then press enter
49:40 - and you can see it prints the marks now
49:43 - one more little thing which we can do
49:45 - here is we can limit the number of
49:47 - decimal values which we want to see
49:49 - after this point so we can write the
49:52 - same
49:53 - printf function and same argument
49:57 - and in order to limit the number of
50:00 - digits after the decimal you just need
50:02 - to write after f dot and some number for
50:06 - example 2. oops i don't want to see this
50:10 - output i wanted to see the output after
50:13 - the decimal value so once again i think
50:17 - this should be this point should be
50:19 - before f so i just need to write dot and
50:23 - 2 before f i think and then press enter
50:26 - and now it limits the number of digits
50:30 - after this decimal point now the last
50:32 - thing i want to show here is how you can
50:35 - allow the user to provide some input so
50:38 - for example i will declare a variable
50:40 - called value
50:42 - and then i can use equals and then i'm
50:45 - going to use a inbuilt function which is
50:48 - called input so input is also an inbuilt
50:51 - function which allows you to take
50:54 - user input
50:56 - so here i can just write as the first
50:58 - argument and then i will provide this
51:00 - colon here and that's it you just need
51:03 - to press enter here and now you can see
51:05 - this terminal is asking us the same
51:08 - question which we have written here so
51:11 - let's say i just provide 50 here and
51:13 - then press enter then what's going to
51:15 - happen is this 50
51:18 - is going to be assigned to this variable
51:21 - which is value so now when you just
51:25 - use this value variable you can see this
51:28 - 50 is assigned to this value variable
51:31 - you will also see that this 50 is a
51:34 - string and not a number right because
51:37 - it's enclosed in single quotes so how
51:40 - you can assign 50
51:42 - to this value using the user input so
51:46 - what we can do here is once again i'm
51:48 - going to use this value variable
51:52 - and what we can do here is we can type
51:54 - cast
51:55 - the output of input so you can just
51:58 - write int
52:00 - and then
52:01 - here inside the parenthesis you can just
52:03 - write and now when i press enter and
52:06 - provide 50 and then press enter and see
52:09 - the value now it's an integer right so
52:12 - you can typecast the output of this
52:15 - input function which provides us the
52:18 - string and this int method is going to
52:21 - convert the string into an integer and
52:24 - then give us the result instead of this
52:26 - int you can also use a float
52:29 - keyword here so let me show you uh this
52:31 - example also so i'm going to just copy
52:33 - this and paste it here
52:35 - and instead of using the int i'm going
52:39 - to just write
52:41 - float here okay and then press enter and
52:44 - i'm going to provide this time 100 here
52:46 - and then press enter
52:48 - and then i'm going to just print the
52:50 - value of the value variable
52:53 - and now it prints the answer in floating
52:56 - points so this is how you can use print
52:59 - function to print the output on the
53:01 - console and input function to take the
53:04 - input from the user in this video we
53:07 - will discuss about built-in functions
53:09 - and modules in python
53:12 - so the python interpreter has a number
53:15 - of built-in functions modules and type
53:19 - that are always available that means you
53:21 - can use them at any time and we have
53:24 - already used some of the built-in
53:26 - functions in python so first of all we
53:30 - have used the print built-in function we
53:33 - have already used the input built-in
53:35 - function we have already used the int
53:38 - which is used to type cast
53:40 - a float or a string into an integer
53:44 - right we have already used a built-in
53:46 - function called float which is used to
53:49 - convert an integer to a float value or a
53:53 - string to a float value now python has a
53:56 - list of these inbuilt function and you
53:59 - can find this list by going to the
54:01 - python.org website and then clicking on
54:05 - that docs section and you can choose the
54:08 - version you have installed so we have
54:10 - installed the latest version which is
54:12 - 3.7.0
54:14 - and you can even choose your language
54:17 - which are available here now when you
54:19 - click on this link which says library
54:21 - references you will be able to see this
54:23 - page which says python standard library
54:26 - and then when you scroll down here you
54:28 - will be able to see the introduction
54:30 - about python and the second section here
54:33 - is about built-in functions so i'm going
54:35 - to click on this built-in function link
54:38 - and here you will be able to see all the
54:40 - built-in functions in python so this is
54:43 - the list of all the built-in functions
54:45 - which you can use in python and if you
54:48 - want to know more about these functions
54:51 - for example i want to know what this max
54:54 - function does i can click on this
54:56 - function
54:57 - and then you can get the help about this
54:59 - function so what this function does
55:02 - and how it can be used in python
55:04 - all the information is given here
55:08 - now let's go to the terminal and let's
55:10 - see how we can use some of these
55:13 - built-in functions so first of all how
55:15 - you can list out all these built-in
55:17 - functions and types in python there is a
55:21 - built-in function to list out all the
55:23 - built-in functions and types which is
55:26 - dir and then double underscore and then
55:30 - you write build ins and then once again
55:33 - double underscore and then close the
55:35 - parenthesis and then press enter and
55:38 - it's going to give you the list of all
55:39 - the built-ins available in python so for
55:43 - example from this list we have already
55:45 - used this function called float print
55:48 - and then we have already used this
55:50 - function int and input also so let's use
55:53 - some more functions so in the previous
55:55 - videos i have shown you how to calculate
55:57 - the power of a number so you use these
56:00 - double asterisks in order to calculate
56:03 - the power of any number
56:05 - and you can see you get the power of 2
56:07 - to the power 10.
56:09 - now python also have a built-in function
56:12 - called pow
56:14 - here you can give as a first argument
56:17 - the number and as the second argument
56:19 - you can provide the number which you
56:21 - want to use as a power and when i press
56:24 - enter it gives me
56:26 - the same result let's use some other
56:29 - built in function for example l e n
56:31 - l e n you can use to find out the length
56:34 - of any string so i can write l e n and
56:37 - inside the parenthesis i can just write
56:40 - any string here for example
56:42 - hello and it will give me the length of
56:46 - the string so this string hello have
56:48 - five letters inside it that's why it's
56:51 - giving me
56:52 - length five now there is a built-in
56:54 - function called help using which you can
56:57 - get some help about any function so i
57:00 - can write
57:01 - help here and inside the parenthesis
57:04 - i can just write the function name so
57:07 - for example i want to know what this max
57:10 - function does so i can just write max
57:13 - here and then press enter so it gives me
57:15 - the signature of max so how it's used
57:18 - and then it will provide me some
57:20 - description about the function so what
57:22 - it does so you can see here it returns
57:25 - the biggest item right so i can just
57:29 - write max here and inside the
57:31 - parenthesis i can give the list of items
57:34 - here for example 1
57:36 - 2
57:37 - 8 9 4
57:39 - and 5 and when i press enter it's going
57:42 - to give me the maximum value out of this
57:45 - list so you can use this help built-in
57:48 - function in order to know more about all
57:50 - the other built-in functions now till
57:52 - now we have talked about the built-in
57:55 - functions which are available in python
57:57 - now let's talk about some of the
57:59 - built-in modules which are available in
58:02 - python now what is a module i'm going to
58:05 - describe in the later videos but for now
58:08 - let's see how to import a built-in
58:10 - module in python and how to use them so
58:13 - there is a built-in module called math
58:16 - and to import it you just use a keyword
58:20 - called
58:21 - import and then the module name for
58:24 - example math
58:25 - and press enter
58:27 - and it's going to import this module
58:30 - into our interpreter
58:32 - now you can use this math keyword and
58:35 - then you can write dot and wait for some
58:38 - seconds
58:39 - and you can see it gives me all the list
58:42 - which are available inside this math
58:45 - module so let's say i want to find out
58:47 - the square root of any number i can use
58:51 - a function called
58:53 - sqrt here
58:55 - and then this gives me the square root
58:57 - of a number so for example i want to
59:00 - find out the square root of 100 and then
59:03 - press enter
59:04 - it gives me the answer 10. now once
59:06 - again as i said you can use a built-in
59:09 - function called help in order to know
59:11 - the signature of this function so i can
59:14 - just write
59:15 - math dot sq rt and then press enter and
59:20 - it's going to give me some help about
59:22 - this function so you can see it returns
59:24 - the square root of x and the signature
59:28 - looks like this now if you want to print
59:31 - all the methods and types available
59:34 - inside this built-in module you can once
59:37 - again use this built-in function dir
59:41 - and then in the parenthesis write the
59:43 - name of the module so this time we will
59:45 - write
59:46 - math here and then press enter and it
59:48 - gives me the list of all the available
59:51 - functions available inside this math
59:54 - module and you can see all these
59:56 - functions which are available inside
59:58 - this module so you can just use a cos
60:01 - function from here pi function from here
60:04 - radians or tan function from here so
60:07 - this is how you can use built-in
60:08 - functions and modules in python in this
60:12 - video i'm going to show you how you can
60:14 - write your first python script in the
60:17 - form of dot py file
60:19 - and execute it
60:21 - but not just by idle
60:24 - but i'm going to show you various
60:26 - different ways you can execute this
60:29 - python file which you will create so
60:32 - let's get started so first of all i'm
60:34 - going to show you how you can create
60:36 - your python file using idle so first of
60:39 - all open your idle ide and just go to
60:43 - file here and you will be able to see
60:46 - this option here which says new file and
60:48 - then you will be able to see this kind
60:50 - of window opens which is a python file
60:54 - editor now first of all we are going to
60:56 - save this file so let's save this file
60:58 - you can save this file at any
61:01 - directory or any path wherever you want
61:04 - so for this first file i'm going to name
61:07 - it as hello dot py so dot p y is the
61:10 - python extension and hello is the name
61:13 - of our file so i'm going to save this
61:16 - file first of all and you can see it's
61:18 - saved at my desired location
61:20 - so in this file let's write some python
61:24 - code so let's say i want to create a
61:25 - program in which i will ask the user to
61:29 - input three numbers and as the output i
61:32 - want the maximum out of these three
61:35 - numbers which is inputted by the user
61:39 - so how can i do this so as we have
61:41 - already seen you can define a variable
61:43 - in python like this so i'm going to
61:45 - define a variable x is equal to and we
61:48 - also know that there is a inbuilt
61:50 - function in python called input to take
61:53 - the user input and then in the double
61:56 - quotes so we are going to ask the user
61:58 - that he needs to enter
62:00 - the first number so enter first number
62:04 - and in a similar way i am going to ask
62:06 - the user to enter the second number and
62:08 - the third number let me change the
62:10 - variable name here so instead of x this
62:13 - variable will be y and the last variable
62:16 - will be z
62:18 - and this is the third number
62:21 - and
62:22 - this is the second number but when i
62:24 - write the input like this
62:27 - this may give us some problem the
62:29 - problem is input function gives us a
62:33 - string and we need to convert the string
62:36 - into
62:37 - a integer or a float
62:40 - so let's convert this number into
62:44 - a
62:45 - float value so you can use another
62:48 - inbuilt function which is float
62:50 - and then this string will be converted
62:54 - to float so i'm going to do the same for
62:57 - other two numbers now in order to get
62:59 - the maximum numbers out of these three
63:02 - numbers we have seen there is a inbuilt
63:04 - function in python which is called max
63:07 - and we are going to use this max
63:09 - function
63:10 - but first of all we need to print
63:12 - something so we will just write the
63:16 - max
63:17 - value is and then we can calculate the
63:21 - maximum value and print it from here so
63:23 - we can use this comma and then we can
63:26 - use this inbuilt function which is max
63:29 - and then we will just pass these three
63:31 - values which is x
63:33 - y
63:34 - and z so will this program work let's
63:38 - see so first of all before doing
63:40 - anything
63:41 - you need to once again save this file
63:44 - okay so right now you can see there is a
63:47 - little
63:48 - asterisk symbol here in front of my file
63:52 - which means my file is not saved so you
63:55 - need to first of all save your file and
63:58 - then you will see this asterisk is gone
64:00 - that means our file is saved so let's
64:02 - run our code so if you want to run this
64:06 - python file
64:07 - using your idle ide you just need to
64:11 - click on the run button here
64:14 - and then choose the third option which
64:16 - says run module so i'm going to click on
64:19 - run module
64:21 - and after some time you will be able to
64:23 - see this output printed on the idle ide
64:28 - so it says enter the first number which
64:31 - we have written in our code you can see
64:35 - this line is executed first of all so we
64:38 - will enter some number i'm going to just
64:40 - write 50 here and then press enter
64:43 - and then it asks us to provide the
64:45 - second number so let's say
64:47 - this number is 90
64:49 - and
64:50 - now we need to give the third number so
64:53 - i'm going to just give 1 0 1 here
64:56 - and then press enter
64:58 - and it says the max value is 1 0 1 which
65:02 - is correct
65:03 - but in real world you will not have this
65:06 - idle ide installed everywhere
65:09 - so how can i run
65:11 - my hello dot py file
65:14 - so i'm going to minimize this idle ide
65:16 - for now
65:18 - and i'm going to go to the location
65:20 - where i have saved this hello dot py
65:23 - file
65:24 - okay so just go to the location where
65:27 - you have saved your hello dot py file
65:30 - and now you just need to double click on
65:33 - this hello dot py file so i'm going to
65:36 - just double click on this hello dot py
65:38 - file
65:39 - and you can see as soon as i double
65:42 - click on hello dot py
65:44 - it opens this program
65:47 - in our terminal okay so once again i'm
65:50 - going to close this terminal and i'm
65:52 - going to double click on my hello dot py
65:55 - file and it opens our program in our
65:59 - terminal so once again i'm going to give
66:02 - three
66:02 - inputs here let's say one one zero enter
66:06 - 55 enter
66:08 - 200 and enter
66:11 - as soon as you press enter this window
66:14 - disappears so why this window disappears
66:17 - because after the execution of your
66:19 - program this terminal immediately closes
66:22 - so we need to provide something
66:25 - in our program in order to avoid the
66:28 - closing of this terminal and how we can
66:30 - do this we can do this using our input
66:34 - method which is a inbuilt method right
66:37 - and here we can just type press
66:41 - any
66:42 - key
66:44 - to
66:45 - exit so what will happen here is after
66:48 - printing the result
66:49 - your terminal will wait for
66:52 - the user input and once the input is
66:55 - given by the user then only the terminal
66:58 - will exit so let's test our program once
67:01 - again but before this don't forget to
67:04 - save this program so i'm going to just
67:06 - save my program and then i'm going to
67:08 - open the folder where i have saved this
67:11 - hello dot py file and once again i'm
67:13 - going to double click on this hello dot
67:16 - py and i'm going to give three numbers
67:20 - here
67:21 - and then i'm going to press enter and it
67:23 - prints
67:24 - 99 which is the maximum out of three
67:27 - numbers
67:28 - and at last it asks us to press any key
67:31 - so i'm going to press any key for
67:33 - example z
67:35 - and then press enter and this terminal
67:38 - disappears so now the question is how
67:41 - does this python file is executed
67:45 - without compiling this file so the
67:48 - answer of this question i have already
67:50 - given in the introduction video
67:53 - and the answer is python is
67:56 - a interpreted language and not the
67:59 - compiled language so what happens in
68:02 - normal languages like java c plus plus c
68:07 - you have a source code
68:09 - and this source code you need to compile
68:12 - in order to convert this source code
68:15 - into
68:16 - an executable file for example you have
68:18 - a hello.java file
68:21 - you need to compile this java file in
68:24 - order to convert it into a hello dot
68:26 - class file which is a executable file
68:29 - and when you run this hello dot class
68:31 - file hello world or whatever program you
68:34 - have written will be executed
68:36 - now in the case of python because it's a
68:39 - interpreted file
68:41 - you just need to create this hello dot
68:43 - py file
68:45 - and you just need to run it you don't
68:47 - need to compile this file and that is
68:50 - the difference between interpreted
68:51 - languages like python
68:53 - and the compiled language like java c
68:56 - plus plus or c now there is one more way
68:59 - using which you can run your python file
69:03 - and that is by using your command prompt
69:06 - so i'm going to open my command prompt
69:08 - i'm going to right click on this windows
69:11 - icon
69:12 - and then i'm going to open this command
69:14 - prompt from here so make sure that this
69:17 - command prompt is able to understand
69:20 - this python command so first of all type
69:23 - python on your command prompt and then
69:26 - press enter and if it shows you this
69:28 - output like python and the version of
69:30 - python
69:31 - then
69:32 - python is working on your command prompt
69:35 - so this command prompt is
69:37 - windows command prompt and not the
69:40 - python shell which we have installed so
69:43 - this is our windows command prompt right
69:46 - now let me make this terminal little bit
69:49 - bigger so we will be able to see what
69:52 - i'm typing so i'm going to
69:53 - change the font size to let's say 24
69:56 - here so now we will be able to see
69:59 - what's happening you can just write quit
70:02 - and then these two parentheses and then
70:05 - press enter and you will come out of
70:08 - this command prompt so you need to come
70:11 - out of your command prompt in order to
70:13 - execute your python file now in here
70:16 - what you need to do is you need to copy
70:19 - the path of your python file so i'm
70:22 - going to right click here and then go to
70:25 - the properties and then in the
70:26 - securities i'm going to just copy full
70:30 - path of this python file up to
70:33 - dot python okay so i have copied full
70:36 - path of this python file
70:39 - and now what i need to do is i need to
70:41 - just write python here okay so just
70:44 - write python
70:46 - and then
70:47 - paste the path which you have copied so
70:49 - i'm going to just paste the path which i
70:52 - have copied and then press enter and you
70:54 - can see our program is executed so i'm
70:57 - going to just give quickly three numbers
71:01 - and it gives us the maximum of these
71:03 - three numbers now i will just type any
71:06 - letter here and then press enter and i
71:08 - will come out of this terminal
71:11 - there is one more way of executing your
71:15 - file
71:16 - and this is you need to just give this
71:18 - command which is cd
71:20 - and then your directory path so up to
71:24 - your directory you just need to copy
71:26 - this path from here okay so you just
71:29 - need to copy this path and then after cd
71:31 - you just need to give space
71:33 - and then paste this path
71:36 - without your hello dot py file okay so i
71:40 - haven't given the hello dot py file name
71:43 - here and now press enter
71:45 - which will change your directory to your
71:49 - python directory so now
71:51 - we are inside our python directory
71:55 - from here you can directly give python
71:58 - and the name of your file which is hello
72:00 - dot py and then press enter
72:03 - and once again the program opens so we
72:06 - can just give three inputs here and the
72:09 - result is shown once again i'm going to
72:11 - just type any key or any letter here
72:14 - with for example r and then press enter
72:17 - and now i'm out of this program so this
72:20 - is how you can run your python script on
72:23 - any terminal you don't need any ide or
72:27 - any other special software in order to
72:30 - run your python script you can run it on
72:33 - your terminal or directly click on the
72:36 - python file till now we have been using
72:40 - idle ide in order to develop our python
72:43 - code now the reason behind why i was
72:46 - showing to code in python using idle in
72:50 - the first few videos because i wanted
72:53 - that you get familiar first with python
72:57 - interpreter so now whenever you want to
73:00 - test some functionality in python you
73:03 - don't need to open any ide or any editor
73:06 - you can just open your terminal
73:09 - and then test that functionality until
73:12 - you wanted to test something
73:14 - terminal or python interpreter was okay
73:18 - but when you want to develop a big
73:21 - project using python we need to use some
73:25 - kind of ide
73:27 - ide stands for integrated development
73:30 - environment in order to develop such
73:33 - kind of projects so in this video i'm
73:36 - going to show you how to install pycharm
73:39 - on your windows 10 operating system
73:42 - which is the most popular ide today used
73:45 - by developers to develop python code so
73:49 - let's get started and let's see how we
73:51 - can install pycharm on our windows 10
73:54 - operating system
73:56 - so open your favorite browser and search
73:58 - for pycharm and the first link which
74:01 - will appear here will be from
74:03 - jetbrains.com forward slash pycharm so
74:07 - jetbrains is the company behind this ide
74:11 - and this company which is jetbrains is
74:13 - famous for making
74:15 - very good ides so jetbrains has also
74:19 - created some other ides like android
74:21 - studio
74:22 - intellij idea webstorm and many other
74:26 - ides which are popular between
74:28 - developers nowadays
74:30 - so we are going to just click on this
74:32 - link so now we are inside this
74:34 - jetbrains.com website and here you will
74:37 - be able to see this logo pie charm and
74:41 - you will be able to see this download
74:43 - button here so i'm going to click on
74:45 - this button which says download now and
74:47 - then you will be redirected to this page
74:50 - which is for downloading pycharm so here
74:54 - you can select your platform whether you
74:56 - are working on windows or mac or linux
75:00 - and what we want to download is we want
75:03 - to download the community version of
75:05 - pycharm this community version you can
75:08 - see is free and open source so you can
75:11 - download and install it with no cost
75:15 - if you want to download the professional
75:17 - version then you need to pay some money
75:20 - to jetbrains in order to use it and as
75:24 - soon as you click on download button
75:26 - this download of pycharm community
75:29 - version dot exe file will start so i
75:32 - will wait for
75:34 - this file to be downloaded so now this
75:36 - exe file is downloaded on my windows
75:39 - operating system so i'm going to double
75:40 - click on this exe file
75:43 - and i'm going to minimize the browser
75:45 - and now you can see pycharm setup wizard
75:47 - has been started so here you just need
75:50 - to click next and this is the location
75:52 - where pycharm will be installed on your
75:54 - system so it will be installed inside
75:57 - your c directory then program files jet
76:00 - brains and then there will be a
76:02 - directory created which will be called
76:04 - pycharm community edition whatever
76:07 - version you have downloaded so i'm going
76:09 - to click next now on this next window
76:12 - you will see two options one is to
76:14 - create a shortcut so we are going to
76:17 - choose this option which says 64-bit
76:19 - launcher now the second option here is
76:22 - create associations and i'm not going to
76:25 - check this checkbox because i don't want
76:28 - that on my computer every dot py file to
76:32 - be associated with the pycharm so i will
76:35 - leave this unchecked and the next option
76:38 - here is download and install the jre
76:41 - x 86 by jetbrains there is no harm in
76:45 - this so i'm going to check this box and
76:47 - i'm going to click next and now i'm
76:50 - going to click on the install button
76:53 - so this is going to start installing
76:55 - pycharm on my windows 10 operating
76:57 - system so i need to wait for some time
77:00 - until this installation is finished so
77:03 - now the installation of pycharm
77:05 - community edition is finished on my
77:07 - windows 10 operating system and you can
77:09 - also see there is a pycharm shortcut
77:12 - which is created on my desktop
77:15 - now i will check this checkbox which
77:17 - will start the pycharm ide and i'm going
77:19 - to click finish which is going to launch
77:22 - the pi charm ide now for the first time
77:25 - when pycharm starts it will ask you this
77:28 - question whether you want to import any
77:31 - settings from the previous installation
77:33 - of pycharm we don't have any previously
77:36 - installed pycharm so we are going to
77:38 - just leave this as default which says do
77:41 - not import setting and then click ok and
77:44 - then you will see this license terms and
77:47 - conditions window if you agree with all
77:50 - these license terms and conditions then
77:52 - just click accept and one more window
77:55 - appears here which is for data sharing
77:58 - so i'm going to just say don't send
78:01 - and now you can see pycharm ide has been
78:04 - launched so for the first time it will
78:06 - ask you
78:07 - which ui theme you want to use you want
78:10 - to use the darcula which is the dark
78:12 - theme or the intellij theme which is the
78:15 - light theme so i'm going to choose this
78:17 - light theme which is intellij theme and
78:20 - then i'm going to just click on next and
78:22 - on this next window you will see some
78:25 - featured plugin so for now i'm not going
78:28 - to install any of the plugin i'm going
78:30 - to just say start using pycharm which is
78:33 - going to start the pycharm so now
78:36 - pycharm ide has been started so let's
78:39 - create a new project here so i'm going
78:41 - to click on new project and now we need
78:43 - to give the title of this project and
78:46 - pycharm will ask you where you want to
78:48 - save this project so i'm going to just
78:50 - give the name to my project so let's
78:53 - name our project as
78:55 - hello
78:56 - world
78:58 - and then i'm going to just click on
79:00 - create button which is going to create
79:02 - our python project so now you can see
79:05 - pycharm ide has been started so you can
79:08 - see the first thing you will see here is
79:10 - tip of the day i'm going to just close
79:13 - this tip of the day and i'm going to
79:15 - maximize
79:16 - my ide window and you can see our
79:19 - project is shown on the left hand side
79:23 - so let's create a python file and we are
79:25 - going to just
79:27 - run some code using this python file so
79:30 - we need to just right click on our
79:31 - project and then click on new and then
79:35 - choose a python file from here and now
79:37 - we just need to give the name to our
79:39 - python file for example hello without
79:42 - any extension so you don't need to
79:44 - provide any extension when you choose
79:47 - this option which says python file and
79:50 - now click ok and now you can see on the
79:53 - left hand side that this file is created
79:55 - which is hello dot py this dot py
79:58 - extension is added by pi charm for us
80:02 - and now on this editor for example let's
80:04 - print hello world once again so i'm
80:06 - going to just
80:07 - print the hello world you already know
80:10 - how to print hello world right and once
80:12 - you have written your code you just need
80:14 - to save your code by pressing ctrl
80:17 - s and now you can just right click on
80:19 - your file and choose this option which
80:21 - says
80:22 - run hello so i'm going to just click on
80:25 - this option which says run hello and you
80:28 - can see this output is printed on this
80:31 - run window so this is how you can
80:33 - install pycharm on your windows 10
80:36 - operating system
80:38 - in this video we will talk about using
80:40 - strings in python
80:42 - but before that i want to show you
80:44 - something and that is how to comment
80:48 - your code in python or how to write a
80:52 - comment in python
80:54 - so for example i have this line of code
80:57 - which is used to print hello world on
80:59 - terminal now for some reason i don't
81:02 - want to execute this line of code then i
81:04 - can convert this statement into a
81:07 - comment and how do i do this you can
81:09 - just add an asterisk in front of your
81:12 - code and this makes your statement a
81:15 - comment
81:16 - a comment
81:18 - means that now
81:20 - this line of code will not be executed
81:23 - by python
81:25 - so let's run our code and let's see what
81:27 - happens
81:28 - so you can see now it doesn't print
81:30 - hello world because
81:32 - now this is a comment
81:34 - now generally we use comments in order
81:37 - to provide some information
81:39 - about some functionality or what we'd
81:42 - want to do with our code so let me
81:44 - remove this line and because it's a
81:46 - python strings video we can just write
81:50 - after this hash symbol python strings
81:54 - right and this means that this is a
81:56 - comment and this line will not be
81:57 - executed by the python interpreter
82:00 - now there is one more way of giving a
82:03 - comment in python which is by writing
82:07 - the double quotes three times and this
82:10 - is also a comment so when you write for
82:13 - example
82:14 - python strings
82:16 - this is also a comment so this will also
82:20 - not be executed by python interpreter so
82:23 - what is the difference between this hash
82:25 - comment and the comment with these three
82:30 - double quotes
82:31 - so it turns out that using these double
82:34 - quotes you can write multiple
82:36 - line comments so for example i want to
82:39 - write a multiple line comment let's say
82:42 - i want to write python string
82:45 - tutorial
82:46 - i can write this multiple line comment
82:49 - using these triple double quotes so
82:52 - let's get started and let's see how we
82:54 - can use strings in python so i'm going
82:57 - to declare a variable and this variable
83:00 - i'm going to assign
83:02 - hello
83:03 - world here right
83:05 - and to print this hello world we can
83:08 - just write print and inside the
83:10 - parenthesis we can use
83:12 - this x variable and when we run the code
83:16 - it runs so we already know how to use
83:19 - this kind of string in python the second
83:22 - way of creating a string
83:25 - is you can use the single quotes instead
83:28 - of double quotes and this is also a
83:30 - valid string so this will also work so
83:35 - let me just
83:36 - print
83:37 - this also which is
83:40 - hello world using single quotes and when
83:43 - i am going to run this
83:45 - it's going to give me the result let me
83:48 - remove this spaces between the print and
83:51 - these parentheses so let's say you want
83:53 - to add a single quote into this hello
83:56 - world string so let's say i want to just
83:58 - write hello single quote s hellos world
84:02 - so this is totally possible in python so
84:05 - whenever you surround your string using
84:08 - double quotes you can just add the
84:10 - single quote without any problem but
84:13 - when you do the same with this string
84:17 - this will give you a problem because now
84:20 - python thinks that your string starts
84:23 - from here and ends at this place just
84:27 - after hello and this will be seen as
84:30 - some kind of garbage by python so in
84:32 - order to use these single quotes inside
84:35 - the string which uses single code you
84:38 - use a escape character and the escape
84:42 - character in python is backslash okay so
84:46 - when you add a backslash in front of a
84:49 - character python interpreter knows that
84:51 - it's a escape character so this will be
84:55 - treated as a valid string so let me just
84:58 - print the result and you can see it
85:01 - prints the same result now
85:03 - now let's say i want to use a double
85:06 - quote in this string which uses double
85:09 - quote already so i'm going to just give
85:12 - a double quote here and the same problem
85:15 - arises which we have seen
85:17 - in the string with single quote so to
85:19 - escape this you can also use backslash
85:23 - and the problem will be gone let's run
85:25 - the program and it gives us this hello
85:29 - world
85:30 - with double quotes so you can print this
85:32 - double quote using this escape character
85:35 - which is backslash now let's say you
85:37 - want to print a string with a backslash
85:40 - itself so i can add a backslash here and
85:43 - i want to add a backslash here and let's
85:46 - save the code and let's run it and let's
85:48 - see if it runs or not so it turns out
85:50 - that you can use this kind of notation
85:53 - in python also when you use double
85:55 - backslashes here
85:57 - and here let's see what happens
86:00 - so when we run the code it will give us
86:02 - the same result because one backslash is
86:06 - a escape character and other backslash
86:09 - is the part of the string so it will
86:12 - print the same result so you can use
86:14 - this
86:15 - for escaping this character or you can
86:18 - remove this the result will be
86:21 - same so now let me edit these two
86:24 - strings and i'm going to use hello here
86:27 - with the capital h
86:29 - and i'm also going to assign
86:31 - hello to the y variable
86:34 - with a small edge here now python
86:37 - provides us some inbuilt functions which
86:40 - you can use with strings so this is a
86:42 - string right so you can use
86:45 - some methods related to strings on the x
86:49 - and y variable so let's see what are
86:52 - these methods
86:54 - so after the x i can just press dot and
86:57 - you can see so many suggestions
86:59 - is given to us by pi charm and this is
87:02 - called intellisense which is provided by
87:05 - pi charm to us and intellisense means
87:08 - that whenever you type something pycharm
87:12 - will try to suggest you some supporting
87:15 - code for whatever you are typing so
87:17 - let's use some method which are
87:19 - suggested to us so i'm going to use this
87:22 - capitalize method so let's use this
87:25 - capitalize method with the x and y
87:27 - variable and let's see what happens so
87:30 - i'm going to run the code and you can
87:31 - see now the upper string is printed same
87:34 - but the lower string
87:36 - is printed with a capital h in front of
87:40 - it so this capitalize method capitalizes
87:43 - the first
87:44 - letter of the string
87:47 - now let's see what are some of the other
87:50 - method which we can use so there is a
87:52 - method called
87:54 - upper and also there is a method called
87:58 - dot
87:59 - lower so let me just
88:01 - rewrite this hello in all
88:04 - capitals
88:05 - and let's run the code now and you can
88:07 - see in the result the upper method has
88:10 - converted our string into all
88:13 - upper letters and the lower method has
88:16 - converted our string into all lower
88:19 - letters now in python everything is an
88:22 - object so using these square bracket you
88:25 - can extract each and every letter based
88:27 - upon their index
88:29 - so for example i write index 0 here
88:32 - and in the y i am going to use the same
88:36 - square bracket and i am going to write 1
88:38 - here which is the index 1 and let me run
88:41 - the code and it prints the first
88:44 - character of the string because it's at
88:47 - index zero and here you can see the
88:49 - second character of the string which is
88:52 - at index one so always remember indexes
88:55 - starts from zero not from one now in
88:57 - python you can also get the sub string
89:00 - out of a string
89:02 - so here inside these square brackets i
89:05 - can just write that i want a substring
89:08 - out of this complete string
89:10 - first three letters of this string so i
89:14 - can just start from zero and i can just
89:17 - say i just want to stop at
89:21 - three that means we will get i think the
89:23 - first three character of the string
89:26 - also let me add some spaces into the
89:28 - second string here
89:30 - and in python there is a method called
89:33 - strip so i'm going to just use this trip
89:36 - method and let's run the code first of
89:38 - all and let's see what happens
89:40 - so you can see first of all
89:43 - this print has printed first tree letter
89:46 - of this string so you can see this
89:48 - notation means that we are telling
89:50 - python to give a substring starting from
89:55 - 0 until 2 until the index 2 okay and we
90:00 - are saying that we want to stop at index
90:03 - 2 that's why we write 3 here now if you
90:06 - want to just print h-e-l-l we can write
90:11 - here 0 to 4 and then we can run the code
90:14 - and then
90:15 - we get h-e-l-l if you want to get only e
90:20 - l l you can write
90:22 - 1 to 4 here and then it will give you e
90:26 - l l
90:27 - out of this string and this is how you
90:29 - can strip your string so strip means
90:32 - the spaces from the start and end will
90:36 - be stripped off this string now let me
90:38 - show some other method related to the
90:41 - strings so first method i want to show
90:44 - here is there is a method called is
90:47 - lower and then there is a method called
90:51 - is
90:52 - upper
90:53 - and then there is a method called
90:57 - dot
90:58 - replace which is used to replace some
91:01 - character inside the string so let's say
91:03 - i want to replace capital h
91:06 - by let's say j
91:08 - and the last method i want to show is
91:10 - how to split the string but that we will
91:13 - see in a moment so let's run this code
91:16 - and the first result says false because
91:20 - this string is not lower when we write
91:24 - all letters in lowercase then only it
91:27 - will give us true otherwise this method
91:30 - is lower will give us false
91:33 - now let's rerun the code and now it
91:35 - gives us true because now every letter
91:38 - in the string is lower second method
91:41 - gave us true because we were checking
91:43 - whether every letter in this string is
91:46 - capital or not the next method replace
91:49 - is used to replace the character if it's
91:52 - there in your string and replace it with
91:55 - this character if this character is
91:58 - found in your string so this capital h
92:01 - is not present in our string right so
92:05 - let's just
92:07 - add this capital h into our string and
92:10 - let's see what's the result so now
92:12 - the capital h is replaced by capital j
92:16 - here in the result the next method which
92:19 - you can use with the string is a split
92:21 - method so you can write y dot
92:24 - split and this is used to split your
92:28 - string using any character so i'm going
92:31 - to once again write hello comma
92:35 - world here
92:36 - and i want to split this string using
92:39 - this character which is
92:41 - comma so i can just write using single
92:44 - quote these comma
92:46 - and once i run the code you can see it
92:49 - gives us an array of two members one is
92:52 - hello and other is world with a space
92:56 - right because we have splitted our
92:58 - string using this character that's why
93:01 - the space is here right so that's why
93:04 - you can see this space here also in the
93:07 - second element of this array so there
93:09 - are number of methods which are
93:11 - associated with string which you can use
93:14 - and for knowing all these method you
93:16 - just need to write your variable which
93:18 - contains a string and then just write
93:21 - dot and you will be able to see the
93:23 - suggestions which you can use
93:26 - with the strings so you can use the
93:28 - title method for example
93:30 - or you can use the translate method or
93:34 - you can use all these method which are
93:37 - available here okay so just see all
93:39 - these suggestions and see what you can
93:42 - use
93:42 - from these method also if you don't have
93:46 - any variable
93:47 - in which you have assigned your string
93:49 - you can directly take your string for
93:51 - example hello and then you can just
93:53 - write dot after this hello and once
93:56 - again you will see all these suggestions
93:58 - because this hello is also a string let
94:01 - me show you one last thing which you can
94:03 - use with string very quickly so you can
94:06 - write print here
94:08 - and then if you want to print this hello
94:11 - for example 10 times how will you do
94:13 - this so you can just write for example x
94:17 - comma x comma x this is how you can do
94:20 - this
94:21 - let's say you want to print this hello
94:23 - hundred times how you can do this so
94:26 - there is a trick in python which you can
94:29 - use and this is using these asterisks
94:33 - you can print the string multiple times
94:36 - so for example i want to print this
94:38 - hello 10 times i can just write my
94:41 - string variable name asterix the number
94:44 - of time i want to iterate
94:46 - this string so let me run the code and
94:49 - you can see
94:50 - now this hello is printed 10 times let
94:53 - me provide the space here
94:55 - so
94:56 - there will be a space between the two
94:58 - hellos right let us say i want to print
95:01 - hello hundred times then i can just
95:04 - write hundred here and then run the code
95:07 - and it will print this hello hundred
95:10 - times on the terminal so this is how you
95:12 - can use strings
95:14 - in python in this video we will talk
95:16 - about the boolean values comparison
95:19 - operators and the logical operators in
95:22 - python
95:24 - so first of all what is a boolean value
95:27 - so in python boolean values are two
95:31 - constant objects which are true
95:34 - and false
95:36 - now for this demonstration i will be
95:38 - using a python interpreter
95:41 - and in pycharm you can open the python
95:44 - interpreter by going down at the bottom
95:48 - and you will be able to see
95:50 - this option which says python console so
95:54 - just click on this python console option
95:57 - which is going to open
95:59 - the python console and you can move
96:03 - this bar up and down
96:05 - in order to expand your console right so
96:10 - let me just clear this console so we
96:13 - will start from the top so in order to
96:15 - clear this console you can right click
96:18 - and then just say clear all and it's
96:21 - going to clear the console and let me
96:24 - resize this console up to the top
96:27 - and let me just
96:28 - minimize this section also so as i said
96:31 - boolean in python are two constants
96:34 - objects which are true and false so how
96:38 - you write true and false in python you
96:41 - write true with a capital t
96:45 - and press enter this is a true value and
96:48 - false you write with a capital false
96:51 - this is a false value
96:54 - now if you write true with small t
96:57 - this is not recognized by python
97:00 - also when you write false with small f
97:04 - this is also not recognized by python
97:07 - now generally we use boolean values in
97:10 - order to find out the result of some
97:13 - condition now let's say you have two
97:15 - numbers and you want to find out which
97:18 - number is greater out of these two
97:21 - numbers you can use a comparison
97:23 - operator to compare these two numbers
97:26 - and the result will be shown as a
97:30 - boolean value now the next question
97:32 - arises what is a comparison operator
97:37 - so in python
97:38 - these are some of the comparison
97:41 - operators you can use so you can use
97:44 - this double equals to check the equality
97:48 - between
97:49 - two
97:49 - values
97:51 - you have this not equal operator with
97:54 - this exclamation mark and equals which
97:57 - you can use to check the non-equality
98:00 - between two values there is a greater
98:03 - than operator and there is a less than
98:05 - operator and also there is a greater
98:08 - than equals operator and the less than
98:10 - equals operator now examples of each of
98:13 - these operators i have given here so how
98:16 - to use these operators as i said if you
98:18 - have two values let's say two integers x
98:22 - and y
98:23 - to compare these two integers whether
98:25 - they are equal or not you write on the
98:27 - left hand side first variable
98:31 - and on the left hand side second
98:32 - variable and in between you use the
98:36 - comparison operator it can be equal to
98:39 - operator or non-equality operator or
98:43 - greater than or less than
98:45 - or greater than equals or less than
98:47 - equals operator so let's see how we can
98:50 - use these operators in real python
98:53 - environment
98:55 - so let's say i want to check whether 10
98:59 - is greater than 9 or not
99:02 - and when i press enter it's going to
99:04 - give me true because 10 is greater than
99:07 - 9. now once again let's check if 10 is
99:11 - less than 9 or not and it will give me a
99:14 - false value which is also a boolean
99:16 - result also we can check equality
99:19 - between two
99:20 - values so we can just write hundred is
99:24 - equal to 100 or not
99:27 - and it will give us true once again we
99:29 - can check if 100 is equal to 99 it will
99:33 - give us false in a same way you can also
99:35 - check for the non-equality so for
99:37 - non-equality you use this exclamation
99:40 - mark equals and then press enter
99:43 - it will say true because
99:46 - 100 is not equal to
99:48 - 99 the same operation you can also
99:51 - perform with some variable so let's say
99:55 - i have a variable called x whose value
99:58 - is 20 and i have a variable called y
100:01 - and i assign 30 to it and let's say i
100:04 - want to check whether the value in the x
100:08 - is greater than or equal to the value
100:11 - which is there in y then i can write
100:14 - this kind of a statement and when i
100:16 - press enter it's going to give me false
100:19 - because
100:20 - 30
100:21 - is not
100:22 - greater than or equal to
100:25 - x
100:26 - so let's assign a value which is
100:29 - 30 into our variable x
100:32 - and now let's check
100:34 - whether
100:35 - x
100:37 - and now let's check whether x
100:40 - is less than or equal to
100:43 - y or not and when i press enter it's
100:46 - going to give me true
100:48 - because we know that
100:51 - x which is 30 is not
100:54 - less than
100:55 - y but it's equal to y
100:58 - and this condition is true now you can
101:01 - also compare two strings using these
101:04 - operators so let's say i have a string
101:06 - called hello and i want to check whether
101:10 - the hello value is equal to
101:13 - some other value for example hello in
101:16 - double quotes or not and it will return
101:19 - me true that means whether you write
101:21 - hello in single quote or hello in double
101:24 - quote both these values are same in
101:28 - python now also we have seen in the last
101:30 - video where we have seen how to use
101:32 - strings
101:33 - that whenever for example i write a
101:36 - string
101:37 - i can use this dot operator in order to
101:41 - call some functions related to strings
101:44 - so some of these functions returns a
101:47 - boolean value so for example we can
101:49 - check whether this hello all letters are
101:52 - in uppercase or not and once i press
101:54 - enter it says false or i can check
101:58 - whether in this hello
102:00 - all letters are in lowercase or not this
102:03 - will give me true or i can test whether
102:07 - in this hello string
102:08 - all letters
102:10 - are alphabet or not this is going to
102:13 - give me true because all letters are
102:16 - alphabets
102:18 - now if i check whether in the string
102:20 - whether there is a alpha numeric value
102:23 - or not i can use this method which says
102:26 - is
102:27 - al
102:28 - num and this will check whether in my
102:30 - string there is a alphanumeric value or
102:32 - not now the next question you may ask is
102:35 - for example i want to evaluate two
102:38 - conditions at the same time
102:41 - let's say i want to evaluate whether
102:44 - 10
102:44 - is greater than
102:46 - 9
102:47 - and i want to evaluate whether 20 is
102:52 - less than
102:53 - 15 or not so how can i evaluate these
102:57 - two conditions at the same time so for
103:00 - those type of comparison we use that
103:03 - logical operators and there are three
103:05 - logical operators which we can use in
103:08 - python an end operator
103:11 - an or operator
103:13 - and
103:14 - a not operator
103:16 - so this and operator you can use
103:19 - to evaluate two conditions and it will
103:22 - return true only if both conditions are
103:26 - true okay so let's say you have two
103:30 - conditions
103:31 - x condition and y condition
103:34 - then
103:34 - if you use this and operator then in
103:38 - order to get true out of these two
103:40 - conditions both conditions have to be
103:43 - true in the case of r it will return
103:45 - true
103:46 - if
103:47 - one of these conditions
103:49 - is true
103:50 - so whether x is true or y is true it
103:54 - doesn't matter but if only one condition
103:56 - is true
103:57 - this will give us true value and the not
104:01 - operator will return the opposite of
104:03 - what we have
104:05 - so if some condition returns us true
104:08 - then when we use not operator then not
104:12 - operator will make this false so let's
104:15 - try all these three operators
104:17 - in python so i said i can use an end
104:21 - operator to check whether this value is
104:25 - true
104:26 - as well as this value is true or not so
104:29 - when i press enter it returns us false
104:32 - because even though the first condition
104:34 - is true which is 10 is greater than 9
104:37 - but the second condition is not true
104:40 - right so in case of end
104:42 - both condition should be true in order
104:45 - to get the true result once again when i
104:49 - use the same conditions and instead of
104:51 - end i use the or operator it will return
104:55 - me true because one of these conditions
104:59 - is true which is 10 is greater than 9
105:01 - even though the other condition is false
105:04 - now let's say we make both conditions
105:06 - true
105:07 - and we use r and when we press enter
105:10 - it's going to still returns us true so
105:13 - the minimum requirement of or is there
105:16 - should be at least one condition which
105:18 - evaluates to true now let's see how we
105:21 - can use the not operator so i can write
105:24 - not
105:25 - and then i can check whether 10
105:28 - is greater than 9 or not and when i
105:32 - press enter
105:34 - it returns us false
105:36 - because we know that 10 is greater than
105:38 - 9 and not makes it false so it returns
105:42 - us false once again if we check whether
105:46 - 10 is
105:47 - less than 9 or not it's going to return
105:50 - us true because
105:51 - 10 is not
105:53 - less than
105:54 - 9
105:55 - and this condition will return false and
105:58 - not will make
106:00 - it opposite which is true so in this way
106:03 - you can use boolean values
106:05 - comparison operators and logical
106:07 - operators in python in this video we
106:10 - will learn how to use if else statements
106:13 - in python
106:14 - so first of all what is a if statement
106:18 - so a if statement is used to execute a
106:22 - statement
106:23 - or a block of code
106:25 - if and only if a condition is fulfilled
106:30 - so first of all let's see the syntax of
106:33 - if statement
106:35 - so let's say i declare a variable called
106:38 - x whose value
106:40 - is 100
106:41 - and then i'm going to check whether the
106:43 - value in x is equal to 100 or not
106:47 - so i can use this keyword if and then if
106:50 - you have seen the last video in which i
106:52 - have shown you how to use
106:54 - comparison operators and logical
106:57 - operators then you will know that for
107:00 - equality we use
107:02 - a double equal symbol
107:05 - and then i'm going to just check it
107:07 - against hundred
107:09 - now after the condition you need to give
107:11 - this colon in order to tell python that
107:14 - this condition is finished
107:16 - and you need to press enter
107:19 - and you will see that there is a indent
107:22 - given to our code and you can see this
107:26 - cursor is here which is four spaces away
107:30 - from
107:31 - this start or one tab away from the
107:34 - start
107:35 - and here i can just for example print
107:38 - the value of x so i can just say
107:42 - x
107:43 - is
107:45 - equal to and then after the comma
107:48 - x and let me save this code and run this
107:50 - code and you can see on the run window
107:53 - here x is equal to 100 is printed
107:56 - because this condition which we are
107:59 - checking using the if statement is true
108:02 - which means whatever code or statement
108:05 - or block of code you will write
108:07 - under if
108:09 - it will be printed
108:11 - let's say this condition is not
108:14 - fulfilled so i'm going to just say
108:17 - that x is not equal to 100 which is a
108:20 - false condition and when i run the code
108:24 - now it doesn't print anything
108:26 - because this condition is not fulfilled
108:29 - and that's why
108:31 - this statement is not executed now let's
108:34 - talk about the indentation little bit
108:37 - so indentation in python is the way of
108:40 - marking a block of code so you can see i
108:44 - have given four spaces indentation here
108:48 - so one two three four or if you are
108:51 - using pie charm when you press enter
108:53 - after an if condition
108:56 - you will see that automatically this
108:58 - cursor is pointing here which is four
109:01 - spaces away from the starting point so
109:03 - this means that whatever you write after
109:07 - these four spaces or a tab
109:09 - is the part of this
109:11 - if statement
109:13 - now if you are familiar with c or c plus
109:16 - plus this indent acts like a curly
109:19 - bracket in c or c plus plus so in python
109:22 - you don't use the curly bracket to
109:25 - define a block of code you use
109:28 - indentation to define a block of code so
109:31 - i can write this statement like this
109:33 - also so i'm going to just say
109:36 - x is equal to and in the next line i can
109:39 - just
109:40 - give one more print function and i will
109:43 - print x from
109:45 - the next line and you can see here also
109:47 - i have given indentation
109:49 - after this starting point and this means
109:52 - that these two lines are the part of
109:55 - this if statement so let me change the
109:57 - value of x is equal to 99 and when i run
110:00 - the code
110:01 - it will print x is equal to and in the
110:04 - next line it prints 99 using this line
110:08 - of code so you may ask what happens when
110:11 - i will write this print
110:14 - function here and let's say we want to
110:17 - print finish here
110:19 - okay
110:20 - and let me run the code and let's see
110:22 - what happens so it prints finish now let
110:26 - me just change this condition and i'm
110:28 - going to just say 100 here and let's see
110:31 - what happens now
110:32 - so now only finish is printed
110:35 - because
110:37 - this line of code is not the part of if
110:40 - condition only statement which you write
110:44 - after four spaces will be the part of
110:47 - the if condition like this line and this
110:49 - line of code but if you don't give any
110:51 - indentation here
110:53 - that means that this line of code is not
110:56 - the part of the if statement now let's
110:59 - take another scenario and this time i
111:01 - want to check whether the value of x is
111:06 - a positive value or a negative value so
111:09 - i will start from here and i will give
111:11 - one more if statement here and i will
111:14 - just check whether x
111:15 - is greater than 0 or not
111:18 - and then give this colon
111:21 - to indicate python that i have finished
111:24 - this condition
111:25 - and then if it's greater than 0 then i'm
111:29 - going to print that x is positive now if
111:33 - x is not positive and if it has a
111:36 - negative value i need to somehow print
111:40 - that x is a negative value and for this
111:44 - you use a else statement so here you can
111:47 - write else and once again you need to
111:50 - give the
111:51 - colon here and then under this else
111:54 - statement once again you provide four
111:57 - spaces or a tab indent and you can once
112:00 - again write
112:02 - print and this time we can write x is
112:06 - negative this means whenever
112:09 - this condition is false
112:12 - and if and only if this condition is
112:14 - false then only the else part will be
112:19 - executed so whatever code or block of
112:23 - code you write under else that will be
112:26 - executed if and only if
112:28 - the condition here is false so seeing
112:32 - the value of x which is 100 which is
112:34 - obviously greater than 0 it's going to
112:37 - print that x is a positive value now
112:40 - when i change the value of x is equal to
112:43 - minus 100 here
112:45 - and once again i execute the code first
112:48 - of all it prints that x is minus 100
112:51 - here because first of all this condition
112:54 - is checked and obviously minus 100 is
112:57 - not equal to 100 so this condition is
112:59 - true so these two lines of code are
113:02 - executed because this condition is true
113:05 - and here because this condition is false
113:09 - that's why this
113:10 - statement is not printed and the
113:12 - execution of code goes to the else
113:15 - condition and then this line of code
113:19 - will be executed which is
113:21 - x is negative and you can see here and
113:24 - this line of code is independent of both
113:27 - these if statements and that's why it
113:30 - will be printed always now as we have
113:32 - seen from our last video that we can
113:36 - provide multiple conditions
113:38 - using a logical operators
113:41 - so we can here also write
113:44 - that if x is not equal to 100
113:48 - or
113:49 - if the value of x is less than
113:52 - 0 let's write here x is less than
113:56 - 0 then only we want to print
114:00 - this
114:01 - statement so once again when we run the
114:03 - code in this case both the conditions
114:05 - are true that's why this is printed if
114:08 - we write here that x should be greater
114:10 - than zero
114:11 - then also this
114:13 - will be executed because one of the
114:17 - condition is true and because in the
114:19 - case of r we only need to satisfy one
114:21 - condition out of multiple conditions in
114:24 - the case of end when i write end here
114:28 - and run the code now you can see
114:31 - this is not executed because one
114:34 - condition is true here and other is
114:37 - false and in the case of end we need to
114:40 - satisfy both the conditions and then
114:43 - only these two statements will be
114:46 - executed or this block of code will be
114:49 - executed so this is how you can use if
114:52 - else statements in python now in this
114:54 - video i'm going to show you how to use
114:57 - lf statement with if else statements and
115:00 - how to use nested if statements in
115:03 - python
115:04 - so let's get started so what i'm going
115:06 - to do is i'm going to declare a variable
115:08 - and i'm going to ask the user to enter
115:12 - some name
115:13 - so i'm going to just write
115:16 - enter a
115:17 - name here
115:19 - and when the user enters this name
115:23 - i want to compare this name
115:25 - with some predefined names
115:28 - so in the last video we have already
115:30 - seen how to use if statement so i can
115:33 - just write name
115:34 - is equal to and i can compare it with
115:37 - some name so let's compare it with a
115:39 - name called
115:40 - max here and i will give this colon here
115:43 - and once the name matches uh this name
115:46 - i'm going to print a name so i'm going
115:48 - to just write name
115:50 - entered is
115:52 - and whatever the name provided by the
115:54 - user so i will just use this name
115:58 - variable here
115:59 - this we have already seen in the last
116:01 - video
116:02 - now in python you can also use a l if
116:06 - statement and the signature of ls if
116:09 - statement is
116:10 - you can just write lf here and then you
116:13 - can provide some other condition
116:16 - which returns boolean
116:18 - so i can once again here write if the
116:21 - name
116:22 - matches some other name for example
116:26 - leo and once again i'm going to just
116:29 - print the name entered by the user
116:31 - and this lf condition i can use
116:34 - any number of time
116:36 - after the if let me match this name to
116:40 - some
116:41 - other different names for example roy
116:45 - and the last name will be
116:48 - ali so if the name matches max
116:51 - this statement will be executed if the
116:54 - name matches leo this statement will be
116:57 - executed if the name matches roy this
116:59 - statement will be executed and if the
117:02 - name matches ali this statement will be
117:04 - executed now if the name entered by the
117:07 - user does not matches any of these names
117:11 - then we can use a else statement so we
117:15 - can just write
117:16 - else here
117:18 - and we can just print a message here so
117:21 - the name entered is invalid so this
117:23 - message will be printed when the name
117:25 - entered by the user does not match any
117:29 - of the name i am checking here
117:32 - so let's run the code and let's see what
117:34 - happens
117:35 - so now my code is running and i'm going
117:37 - to give the name a max here for example
117:41 - and then press enter
117:42 - and it prints this message which says
117:45 - the name entered is max
117:47 - using this statement
117:49 - now once again when i run the program
117:52 - and this name
117:54 - matches
117:56 - let's say some other name ali and then
117:58 - when i press enter
118:00 - it prints the name entered is ali which
118:02 - means this statement is executed
118:06 - and let me run the program once again
118:09 - and when i give some random string here
118:13 - it prints the name entered is invalid
118:16 - now let's say the name entered by the
118:18 - user is max and this condition evaluates
118:22 - to true then this statement will be
118:24 - executed and the other conditions which
118:27 - we have given
118:28 - using lf
118:30 - statement will not be evaluated so let's
118:34 - say we will write max here also so this
118:37 - condition and this condition is same
118:40 - right checking for the same name and
118:43 - when i run the program and when i write
118:46 - max here
118:47 - only one statement is printed which is
118:50 - this one so we can see when this
118:52 - condition returns true
118:54 - only one
118:55 - statement is executed and none of the
118:58 - other conditions are even evaluated now
119:02 - the important thing to note here is you
119:04 - cannot start with a l if statement you
119:08 - need to start with the if statement so
119:12 - you need to write a if statement and
119:14 - check the condition first and then only
119:17 - you will be able to write l if condition
119:20 - now it's possible to use
119:23 - multiple if condition
119:25 - and then
119:26 - this
119:27 - lf will become the part of this if
119:29 - condition and this will be the separate
119:33 - if condition so when i run the code once
119:36 - again
119:37 - and when i write max here it's going to
119:39 - print
119:40 - two
119:42 - statements
119:43 - one is using this
119:45 - and other is using this because this if
119:48 - condition and this if condition are two
119:51 - different if conditions and once you use
119:54 - l if so i'm going to use alif here then
119:58 - this alif is the part of this
120:01 - if condition so this is how you can use
120:04 - if statement with lf statement and else
120:07 - statement
120:08 - now let's see how to use the nested if
120:12 - statement so i'm going to declare a
120:14 - variable called x and the value i will
120:18 - assign to x is 10 and then i'm going to
120:21 - write
120:22 - an if condition and here i'm going to
120:24 - just evaluate where the x is less than 0
120:29 - and when x is less than 0 i'm going to
120:32 - just print that x is negative else if
120:36 - the value is not less than zero so i'm
120:40 - going to just write else
120:42 - then i'm going to just print x is
120:44 - positive now let's say i also want to
120:46 - evaluate if the x value is a even number
120:50 - or an odd number if the x value is
120:54 - positive
120:55 - so under the else i can once again write
120:59 - if
120:59 - and then
121:00 - we can just evaluate this condition
121:04 - that if x
121:06 - modulo 2
121:09 - is equal to
121:10 - 0
121:12 - which means that when x modulo 2 returns
121:16 - a 0 that means it's a even number so we
121:19 - can print x is
121:22 - even otherwise in the else condition i
121:25 - can just write else
121:28 - x is odd so in this if condition i'm
121:32 - checking if the value of x is less than
121:34 - 0 or not and if this condition is not
121:36 - satisfied then i'm checking whether
121:40 - x is
121:41 - up even number or x is an odd number so
121:45 - if you remember indentation here is very
121:48 - important so this
121:50 - if condition
121:52 - falls under the else condition right so
121:56 - this if condition and this else is the
122:00 - part of the else statement so because we
122:03 - have provided this four space indent
122:06 - here whatever
122:08 - code you write with this indent is a
122:11 - block of code and what we are
122:13 - essentially doing here is we are nesting
122:15 - one if else condition inside the other
122:19 - if else condition you can also reverse
122:21 - this condition checking and you can also
122:24 - say if x is greater than or equal to
122:27 - zero
122:28 - then
122:29 - the value of x is positive otherwise the
122:33 - value of x is negative and this
122:37 - statement you can write under
122:40 - the if condition also and this is also
122:43 - our nested if else statement
122:45 - and let me run this program
122:48 - and you can see
122:49 - x is a positive value because x is equal
122:52 - to 10
122:54 - and x is a even value so once this
122:57 - condition
122:58 - is true this statement will be printed
123:02 - and whatever if condition is there
123:04 - inside the parent if statement that will
123:08 - also be executed
123:10 - and this condition is checked first of
123:12 - all and obviously this condition is true
123:15 - in this case when x is equal to 10
123:17 - because when you do x modulo 2 it's
123:20 - going to give us the remainder 0 and
123:23 - that's why x is a even value and that's
123:26 - why it's printing x is even here so it's
123:30 - totally possible to use one if else
123:32 - statement inside the other if else
123:35 - statement and this type of if else
123:37 - statement are called nested if else
123:41 - statement in this video i'm going to
123:43 - show you how to use lists
123:45 - in python
123:47 - so first of all what are lists
123:50 - so list in python is a kind of
123:52 - collection
123:54 - which allows us to put many values in a
123:57 - single variable
123:59 - you can also say that list is an ordered
124:03 - set of values so let's define a list so
124:06 - i'm going to just say x is equal to and
124:10 - you can define a list inside these
124:12 - square brackets and inside the list you
124:15 - provide some values so for example i'm
124:17 - going to provide the values 3
124:19 - comma 5 comma 4
124:22 - comma 9 comma 7 comma 10. so this is how
124:26 - you can create a list in python and when
124:29 - i press enter it's going to create a
124:31 - list and when i just
124:34 - use x to get the list it's going to
124:37 - provide me all the values in the list
124:39 - now these values which are inside the
124:41 - list
124:42 - are called elements so 3 is an element
124:45 - or 5 is an element or all these values
124:48 - in this list are all called elements and
124:52 - all these elements are ordered by their
124:55 - index now index as i already said in the
124:58 - previous videos also
125:00 - always starts from zero
125:02 - so we can fetch the value which is at
125:06 - index 0 using this square bracket once
125:09 - again with the variable name
125:11 - and then when i write index 0 it's going
125:14 - to give me the element which is saved at
125:18 - index 0. so looking at this list
125:22 - 3 is at index 0
125:24 - 5 is at index 1
125:27 - 4 is at index 2 and so on
125:31 - so let's say i want to get the value
125:34 - which is at index 4 0 1 2 3 4 so i'm
125:39 - going to just write
125:40 - x
125:41 - square bracket 4 and it is going to give
125:44 - me 7 which is saved at index 4. now it's
125:47 - not necessary that list must contain all
125:50 - the same data type elements so for
125:53 - example i can also declare a variable
125:55 - called y
125:57 - and in this i can save some name for
126:00 - example max i can save
126:04 - integer let's say 1 i can save a decimal
126:08 - value let's say 15.5 i can save other
126:11 - list inside this list using these square
126:14 - brackets for example three comma two so
126:16 - one list can contain different type of
126:18 - data types with any number of elements
126:22 - so when i press enter and this time i
126:24 - want to get the value which is at index
126:28 - zero it's going to give me max and once
126:31 - i want to get the value which is saved
126:33 - at index
126:34 - 3
126:36 - then it's going to give me
126:37 - this list which i have saved at index 3.
126:42 - now when you try to access the index
126:44 - which is not there so i'm going to just
126:46 - write y
126:48 - and then i'm going to
126:49 - say hundred and this value is not
126:52 - present in this list at this index so
126:55 - i'm going to press enter and it's going
126:57 - to give me the error which says list
127:00 - index out of range now if you want to
127:02 - get the length of the list you can use
127:05 - the inbuilt function in python which is
127:07 - len
127:08 - and then your list name so for example i
127:11 - want to find out
127:12 - the length of
127:14 - list x it's going to give me 6 it's
127:17 - going to give me 6 because you can see
127:19 - here
127:20 - this list contains 6 elements or i want
127:23 - to get the length of the second list
127:25 - which is y and it's going to give us
127:27 - four because this list contain four
127:30 - elements now it's also possible to
127:32 - insert and remove elements from the list
127:36 - so for example i'm going to use x which
127:38 - has six element till now and i'm going
127:40 - to insert the seventh element so i can
127:43 - use a method called insert and you can
127:46 - see this method takes an index
127:49 - and the object name so i'm going to
127:51 - choose this and the index at which i
127:53 - want to insert the value is at index 2
127:57 - and the value i want to insert is some
128:00 - string for example tom
128:02 - and i'm going to press enter and i'm
128:04 - going to print the values inside the x
128:07 - list then you can see now this list has
128:11 - 7 elements and tom is inserted at the
128:15 - index 2 because we have inserted this
128:18 - value at the index 2. in a similar way
128:21 - you can remove something from a list
128:22 - also so to remove something you can use
128:25 - your variable name for example x
128:28 - dot
128:29 - remove
128:30 - and the value you want to remove so for
128:32 - example once again i want to remove this
128:34 - name which i have inserted at index 2
128:37 - and once again when i print the value of
128:39 - x it's going to give me
128:42 - these values now let's say the list
128:44 - contains two
128:46 - element which are exactly the same so i
128:49 - am going to insert one more element
128:51 - at index 1 and this element will be 3
128:55 - for example and now my list contain
128:57 - double 3 here and if i want to remove
129:00 - this 3 so i am going to just
129:02 - call this remove function once again and
129:04 - i will say three here and then press
129:06 - enter you can see only one three is
129:09 - removed from this list so you can see
129:12 - these three are at index zero and index
129:14 - one so this value is removed which is at
129:18 - index 0 and this will remain in this
129:22 - list so if a list contains duplicate
129:24 - values it's going to remove the value
129:27 - from the left and also remove is going
129:30 - to remove only one object which is found
129:33 - first in the list now if you try to
129:35 - remove the element which is not there in
129:38 - the list so i'm going to remove
129:40 - something which is not even there in
129:42 - this list then it's going to give us
129:44 - this error which says that this is a
129:46 - value error and it cannot remove this
129:49 - value from the list now there is one
129:51 - more function with the list which is a
129:55 - pop method and this we can use to remove
129:57 - the values from the last so you can see
130:00 - our list was previously having 6
130:03 - elements and 10 was the last element and
130:07 - when you use this
130:08 - function which is pop it's going to pop
130:11 - this 10 from the list and now let's see
130:14 - the content of the list so now this list
130:17 - contain only five element and the last
130:20 - element is now removed once again when
130:22 - you use this pop method it's going to
130:24 - remove the seven and now our list only
130:27 - contains four elements now let's say you
130:30 - want to delete the whole list so i'm
130:32 - going to
130:33 - declare a list and this list will
130:36 - contain a few values and then i will
130:39 - press enter and you can see the values
130:41 - of list and now i can use a function
130:43 - called del
130:45 - and then the name of the list and this
130:47 - function is going to delete this list so
130:50 - i'm going to just press
130:51 - enter and then once again try to access
130:54 - the values inside this variable and now
130:57 - it says the name
130:59 - z is not defined because delete function
131:02 - has deleted this list now once again i'm
131:04 - going to create this list z
131:06 - and now there is a function called clear
131:09 - which is used to
131:11 - remove all the values from the list
131:13 - so i'm going to just press enter and
131:16 - then try to access the value of z and
131:18 - you can see this list is now empty
131:21 - because we have used the clear function
131:23 - which is used to empty the list let me
131:26 - show you a few more functions related to
131:28 - list so let's say i can use x and the
131:31 - values inside x are 3 5 4 9
131:35 - and i can use a function called sort to
131:38 - sort all these
131:40 - integer values inside the list and once
131:42 - i press enter now now you can see all
131:46 - the values are sorted and you can see
131:48 - all the values are sorted in ascending
131:50 - order you can also use this method x dot
131:54 - reverse and it's going to reverse all
131:57 - the values so once i use the reverse
131:59 - function and then
132:01 - when i try to get all the values inside
132:03 - the list you can see all the values are
132:06 - now reversed there is also a function
132:08 - called
132:09 - append
132:10 - and here you can append anything to your
132:12 - list so i want to append 10 to my list
132:15 - and when i try to access this list you
132:17 - can see at last this 10 is appended in
132:21 - my list also if you want to copy one
132:23 - list into another you can use let's say
132:26 - i'm going to declare a variable called
132:29 - s here and i want to copy all the values
132:32 - from x list i can use x dot
132:37 - copy
132:38 - and this is going to copy all the
132:40 - content of my x list into this new
132:43 - variable called s
132:45 - so you can see all the values are copied
132:47 - into the variable s so let me append
132:50 - something into my list once again so i'm
132:53 - going to append the 10 once again and
132:55 - now my list looks like this and there is
132:57 - a function called
133:00 - count using which you can count the
133:02 - number of element which are there in the
133:05 - list so i want to find how many number
133:08 - of ten are there in the list is going to
133:10 - return me two and once again i want to
133:13 - count how many threes are there in the
133:15 - list it's going to return me
133:18 - one let's say i want to count how many
133:20 - hundreds are there in my list it's going
133:22 - to return 0. so this is how you can use
133:24 - lists in python you can also use the
133:28 - list name and then dot
133:30 - and see all the methods which are
133:32 - available related to list here and you
133:34 - can use these method which you see here
133:38 - in this video we are going to see how to
133:40 - use tuples in python
133:43 - so first of all what are tuples
133:46 - so tuples are very similar to lists that
133:49 - is they are used to store the collection
133:51 - of elements in a single variable but
133:55 - there is a very important difference
133:57 - between them and that difference is
134:00 - tuples are immutable
134:03 - immutable means once tuples are created
134:06 - they cannot be changed or the content in
134:10 - them cannot be changed so lets see how
134:13 - we can declare a tuple
134:15 - so i am going to declare a variable
134:16 - called x and i am going to assign
134:19 - some values to it
134:21 - now in case of list we have seen we used
134:24 - the square brackets in the case of
134:26 - tuples we use these parentheses in order
134:29 - to store the list of elements so i can
134:32 - just write 1
134:34 - 5
134:35 - 3
134:35 - 4
134:37 - and 8 for example and then press enter
134:40 - and it's going to create a tuple now in
134:42 - order to print the tuple you can use x
134:45 - and it's going to print this tuple now
134:47 - as i said tuples are similar to lists in
134:50 - some ways and that means you can
134:53 - call a tuple element by a index in tuple
134:58 - so all the tuple elements are arranged
135:01 - by their index and when you want to for
135:04 - example
135:05 - get the first element here you give the
135:08 - index 0 and then press enter and it's
135:11 - going to give you
135:13 - the value which is saved at index 0.
135:16 - let's get the value which is saved at
135:19 - index 4 and am going to press enter
135:22 - and you can see it gives 8 which is
135:24 - saved at index 4. now when i try to give
135:27 - a index which is not there for example
135:30 - 100 it is going to give us error which
135:33 - says
135:34 - index error tuple index out of range now
135:37 - as i said tuples are immutable that is
135:39 - you cannot change the content of a tuple
135:42 - if they are initialized once so let's
135:45 - try to test this so i'm going to
135:47 - just assign the value at index 0
135:50 - which is let's say 2 and i'm going to
135:53 - press enter and you can see it says
135:56 - type error tuple object does not support
135:59 - item assignment that is you cannot
136:03 - assign
136:04 - any other
136:05 - value to a tuple element if they are
136:09 - once initialized now that also means
136:12 - that you cannot use some of the
136:14 - functions which you used with lists in
136:17 - the tuples for example you cannot remove
136:20 - any element you cannot append any
136:22 - element you cannot change any element so
136:25 - for example when i write x here and then
136:28 - press dot you can see there are few
136:32 - methods which are available
136:34 - with the tuple
136:35 - and most important is this count method
136:38 - so let us try to use this count method
136:40 - and i want to know how many number of
136:43 - eight
136:44 - which are there in this tuple and it
136:46 - will give me 1 because 8 is only present
136:49 - once in this tuple if 8 is present twice
136:51 - in this tuple here you will see the
136:53 - result 2. now in order to get the length
136:56 - of the tuple you can use the in build
136:58 - function which is len and then the tuple
137:01 - name and then press enter and it's going
137:03 - to give you the length of the tuple now
137:05 - in the previous video i have told you
137:07 - that you can save
137:09 - multiple data type values in lists let's
137:13 - see if we can do the same with tuples or
137:15 - not so i am going to give the
137:17 - parenthesis i am going to give the first
137:19 - value as integer
137:21 - second value as a string
137:23 - third value as for example
137:26 - the decimal value
137:28 - and i am going to press enter
137:30 - and i am going to get the value of y
137:34 - and you can see its totally possible to
137:36 - save multiple data type values in our
137:39 - tuple so now i have declared two tuples
137:42 - one is x and other is y
137:45 - so let's print x and y once again very
137:47 - quickly
137:48 - and now what we want to do is we want to
137:51 - use a concatenation operators so as i
137:54 - said tuples are immutable but let me
137:57 - define a third tuple here and i want to
138:00 - add
138:01 - x tuple and y tuple here and i want to
138:05 - assign the value to z
138:07 - is it possible let's check so i am going
138:10 - to just once again see the contents in
138:13 - the z variable
138:15 - and you can see when you use this
138:18 - plus operator or concatenation operator
138:21 - it is going to join these two tuple and
138:24 - create a new tuple
138:26 - with the combination of the values of
138:29 - both these tuples now there is one
138:31 - interesting thing which you can do with
138:33 - a tuple which is you can declare a
138:36 - variable and let me define
138:39 - a tuple with only one element and i am
138:41 - going to just
138:43 - give hi here
138:44 - and then after this element i am going
138:46 - to provide comma here so this is
138:49 - important i have provided this comma
138:51 - and i haven't provided the second
138:53 - element in the tuple and i can use
138:56 - an asterisk here and i can use some
138:59 - value here so let's say i have provided
139:02 - five here and i'm going to press enter
139:05 - and then i am going to see the values
139:07 - inside this a variable and now you can
139:10 - see a high string is saved five times in
139:14 - a variable in the form of a tuple so you
139:18 - can once again get this value at index 2
139:22 - for example and it is going to give you
139:24 - the value which is stored at index 2
139:26 - which is high itself you can also use a
139:28 - inbuilt function called max here
139:31 - to get the maximum value out of a tuple
139:34 - so max and i have provided x tuple here
139:38 - and you will be able to see it will give
139:40 - us the maximum value
139:41 - stored in that tuple and you can see
139:44 - here 8 is the maximum value which is
139:47 - there inside the tuple we can also get
139:49 - the minimum value using min function and
139:52 - it's going to give you the minimum value
139:54 - which is stored inside the tuple and
139:56 - also you can use our del function to
139:59 - delete a tuple so let's say i want to
140:01 - delete this tuple which is z here so i
140:04 - can just write the name of the tuple
140:06 - after the e l and space and then press
140:08 - enter and now once again when i try to
140:11 - get the value of z it is going to give
140:13 - me error which says name z is not
140:16 - defined so in order to delete the tuple
140:19 - you can use that del function so this is
140:21 - how you can use tuples in python in this
140:24 - video we are going to learn how to use
140:26 - sets in python
140:28 - so first of all what are sets
140:31 - so a set is an unordered collection
140:34 - with no duplicate elements and no
140:37 - indexing
140:39 - so let's see how we can use sets in
140:41 - python
140:43 - so you can declare a variable and then
140:45 - is equal to and you define the elements
140:48 - in set in a curly bracket
140:51 - so you can define multiple values here
140:53 - for example 1 comma 2 comma 5 comma 4
140:58 - comma 7 comma 9
141:00 - but keep in mind that set cannot have
141:04 - duplicate values so each
141:06 - value in set must be a unique value so
141:10 - for example what happens when we define
141:12 - a set with some duplicate values so i'm
141:16 - going to just declare this set and press
141:18 - enter here
141:19 - and this set is created now whenever i
141:23 - try to access the values inside the set
141:26 - a
141:27 - then it's going to give me this set and
141:30 - you can see
141:31 - the 2 which was a duplicate which we
141:34 - have defined here
141:36 - is removed from this set so a set always
141:39 - have unique values and if you define a
141:42 - set with duplicate values it's going to
141:45 - remove the duplicate values and only
141:49 - save the unique values in the set so
141:53 - let's see some of the methods related to
141:55 - sets and the first method is as always l
141:59 - e n method and you can find the length
142:01 - of a set using this l e n method and the
142:04 - name of the set which returns the length
142:07 - of a set
142:09 - you can also use a add function so a
142:13 - dot add to add a element in a set so i
142:18 - want to add 10 for example into my set i
142:22 - can use this and then press enter and
142:24 - once again when i try to get the values
142:26 - inside the set a
142:28 - you can see 10 is added to this set but
142:32 - this 10 will only be added if it's
142:35 - already not there in the set if it's
142:37 - already there in the set nothing will
142:40 - happen so let's try to add once again 10
142:43 - to this set which already have a set
142:45 - and once again you will see
142:48 - that nothing happens inside the set
142:50 - because 10 was already there now if you
142:52 - want to add multiple values in a set you
142:55 - can use a update method so you can call
142:59 - this method which is update
143:01 - and then inside the curly brackets you
143:04 - need to provide these multiple values
143:07 - so let's add some values into this set
143:11 - so i'm going to add
143:12 - 15
143:13 - 18
143:15 - 17 let's say
143:17 - and 14
143:18 - okay and then press enter
143:20 - and now i will see the values inside the
143:22 - set
143:23 - and you can see all these values are
143:25 - added to the set you can also remove the
143:28 - values from the set so i can use a
143:32 - method called remove
143:34 - and let's say i want to remove
143:37 - 18 from the set i can just give the
143:40 - element and then press enter and once
143:42 - again i will try to access the set and
143:45 - you can see 18 is removed from this set
143:48 - now there is a method called discard
143:51 - also so let's see how we can use this
143:53 - method discard works similar to remove
143:56 - method so for example i want to remove
144:00 - this 17 from my set i can write 17 here
144:05 - and it works fine right so when i try to
144:08 - access the value of a
144:10 - 17 is removed so what is the difference
144:12 - between a discard method and a remove
144:15 - method
144:17 - so our remove method whenever you use a
144:19 - remove method
144:21 - and you try to remove an element which
144:24 - is not there in the set for example i
144:27 - will try to remove 100 which is not
144:29 - there in the set it's going to throw an
144:32 - exception and it says key error 100. now
144:36 - if you try to do the same thing using a
144:38 - discard method so i'm going to use a dot
144:42 - discard here and try to discard 100 from
144:46 - the set which is not there in the set
144:48 - it's not going to give me any error and
144:52 - that's the difference between this card
144:53 - and remove so remove throws an error
144:57 - when a element is not there but this
145:00 - card doesn't throw any error it's not
145:02 - going to do anything
145:04 - if the value is not there in the set now
145:08 - there is a pop method also you can use
145:11 - with uh set so i'm i can use this pop
145:14 - method and then press enter and what
145:16 - it's going to do is it's going to remove
145:19 - any random element from your set so it's
145:24 - not necessary that is going to remove
145:27 - the element from the left hand side or
145:29 - the right hand side it will remove any
145:32 - random element from the set also for
145:35 - example i will declare a set of names
145:39 - let's say
145:43 - and if you want to clear the
145:44 - set you can use a clear method so i can
145:47 - use this clear method
145:49 - in order to empty this set so now when i
145:52 - try to access the values inside the set
145:55 - you can see it's an empty set with no
145:58 - values if you want to delete a set you
146:01 - can use a del function and then the name
146:04 - of your set and then press enter and
146:06 - once you delete it when you try to
146:09 - access it it's going to give you an
146:11 - error that name is not defined now you
146:14 - can also create a set
146:16 - using a set constructor so instead of
146:20 - these curly brackets you can
146:22 - write set and in the double parenthesis
146:25 - so you need to provide the double
146:27 - parenthesis here in order to create a
146:29 - set using the set constructor so this is
146:32 - also going to create this set called
146:36 - name and when i try to access the values
146:38 - inside the set name you can see it has
146:41 - created this set of names also you can
146:44 - convert a list into a set so let me
146:47 - define a variable called z
146:49 - and then i can use a set constructor and
146:53 - inside these parentheses i can use the
146:56 - square brackets which we use generally
146:58 - with lists and then you can define your
147:02 - list here and then press enter and this
147:05 - list will be converted
147:07 - to a set and you can see the result here
147:10 - now similar to the mathematical set
147:13 - operations like union intersection
147:16 - difference symmetric difference you can
147:19 - also use these mathematical operations
147:22 - related to set on the python sets also
147:25 - so let's see how we can use this
147:27 - mathematical set operations on our
147:31 - python sets
147:32 - so let me once again define a set i have
147:35 - already one set which is a which
147:37 - contains these values for example
147:40 - and i will define a set b
147:43 - with some other set of values so i'm
147:46 - going to define a set
147:48 - with for example
147:51 - so that is the content of the set b okay
147:55 - so now i have two sets
147:57 - and on these two sets i want to perform
148:00 - some
148:01 - set operations which are also used in
148:04 - mathematics so you can find out the
148:06 - union of two sets using a operator
148:10 - called or okay so when i write a
148:14 - and this pipe symbol which is called r
148:18 - b
148:18 - it's going to give me the union of these
148:21 - two sets
148:23 - and what is the union
148:25 - so union of two sets contain all the
148:28 - elements that are there in the set a
148:31 - or
148:32 - in the set b so or here is important
148:36 - right so i'm going to press enter
148:38 - and you can see it's going to give me
148:41 - the union of a and b that means this set
148:44 - contains all the elements that are there
148:47 - in set a
148:48 - or in set b
148:50 - also i can use a method called union
148:53 - instead of this or operator so i can use
148:56 - a variable
148:58 - dot
148:59 - union there is a method called union and
149:02 - then you can write b here and then press
149:04 - enter which is going to give you the
149:07 - same answer okay so you can either use
149:10 - this union method or this or operator
149:14 - now let's see how we can find out the
149:16 - intersection between
149:18 - two sets
149:20 - so in order to find out the intersection
149:22 - you use a and this operator end
149:25 - and then your next set which is b here
149:29 - so what is an intersection of two sets
149:32 - so intersection of two sets contains all
149:35 - the elements that are there
149:37 - in both the set that means set a and set
149:42 - b
149:42 - okay so when i press enter
149:45 - you can see it gives me two
149:48 - elements inside the set and these two
149:51 - elements are there both in the a set and
149:55 - the b set that's why we get only two
149:58 - values because these two values are
150:01 - there in set a and set b also again you
150:04 - can use a method called intersection so
150:06 - a
150:08 - intersection
150:09 - and then b which is going to give me the
150:12 - same answer so either you can use this
150:14 - method or you can use this operator now
150:17 - let's find out the difference between
150:19 - two sets
150:20 - so what is a difference between two set
150:23 - a difference of two sets contains all
150:26 - the elements that are in a
150:29 - but not in b
150:31 - okay so you can find out the difference
150:33 - by this
150:35 - minus operator here so when you write a
150:37 - minus b
150:38 - you will be able to get the difference
150:40 - between these two sets and this result
150:43 - will contain all the elements that are
150:45 - in a but not in b you can also use b
150:50 - minus a
150:51 - and then
150:52 - is going to give you other result
150:54 - because this time it's going to give you
150:56 - a set which contains all the elements
150:59 - that are there in b
151:01 - and not in a so difference between
151:05 - set a minus b
151:07 - is totally different from b minus a and
151:11 - also you can use a difference method so
151:13 - a
151:14 - then you can call a difference method b
151:18 - and it's going to give you
151:19 - the same kind of answer you can see here
151:22 - and also you can call b
151:25 - dot
151:26 - difference
151:27 - a
151:28 - and it's going to give you the another
151:30 - answer of b minus a now you can also
151:33 - find out the symmetric difference
151:35 - between two sets
151:37 - and what is the symmetric difference
151:39 - between two sets
151:41 - a symmetric difference between two sets
151:43 - contains all the elements
151:46 - that are either in set a
151:49 - but not in set b
151:51 - or they are there in set b
151:54 - but not in set a so this is the
151:56 - symmetric difference and you can find
151:59 - out the symmetric difference
152:01 - using this cap symbol
152:03 - and then b so a cap b i don't know what
152:06 - is the exact name of this symbol you can
152:09 - find out by yourself and when you do
152:12 - this it's going to give you the
152:14 - symmetric difference between
152:16 - a and b
152:17 - and whenever you find out the symmetric
152:19 - difference
152:20 - then when you do for example
152:23 - b
152:24 - this cap symbol
152:26 - a
152:27 - it's going to give you the same answer
152:29 - because symmetric difference give you
152:32 - same answer whether you give a cap b or
152:35 - b cap a the answer will be always same
152:38 - also you can use a method symmetric
152:41 - difference so you can use this method
152:44 - called symmetric difference b
152:47 - and it's going to give you the same kind
152:49 - of result now one last thing i want to
152:51 - show here is sets are not indexed or
152:54 - ordered so whenever you want to find out
152:58 - for example a and the value at index 0
153:02 - it's going to give you an error because
153:05 - there are no indexes in a set and they
153:08 - are not ordered by any index so sets are
153:13 - unordered collection of values now if
153:16 - you want to find out what all other
153:18 - methods you can use with sets you can
153:21 - create a set and then write the name of
153:23 - your set and then press dot here and you
153:25 - will be able to see this is the list of
153:27 - all the methods which you can use with
153:30 - the sets
153:32 - also if you want to list out all the
153:34 - methods which you can use with sets you
153:38 - can use this inbuilt function dir and
153:41 - then you can provide any set name here
153:44 - which is your variable name and then
153:46 - press enter and once again it's going to
153:48 - print the list of all the method which
153:50 - you can use with the sets so this is how
153:53 - you can use sets in python in this video
153:55 - i'm going to show you how to use
153:57 - dictionaries in python so first of all
154:00 - what are dictionaries so dictionaries in
154:03 - python are like associative lists or a
154:07 - map
154:08 - now you can think of dictionary as a
154:11 - list of pairs
154:14 - so let me show you how to define a
154:16 - dictionary so you can define any
154:18 - variable name and to define a dictionary
154:20 - first of all you use these curly
154:23 - brackets
154:24 - and inside these curly brackets you
154:26 - provide a list of key value pairs
154:30 - so let's provide the list of key value
154:32 - pairs so first key is name
154:36 - and the name is
154:38 - max
154:39 - the second key is for example age
154:43 - and the age of max is let's say 14
154:48 - and we can also write here in which year
154:51 - he was born so we can just write here
154:54 - and he was born in 2000
154:58 - for example and i'm going to press enter
155:00 - here
155:01 - and once again i'm going to just access
155:04 - the values inside this dictionary which
155:06 - is d
155:07 - and you can see our dictionary is
155:09 - created now
155:11 - so as i said dictionary is a list of key
155:14 - value pairs and all these values which
155:17 - you see here before this colon
155:20 - are called keys so name is a key here
155:24 - here is a key here and age is a key here
155:28 - and whatever values you see after the
155:31 - colon are called values so max is a
155:34 - value 2004 is a value and 14 is a value
155:39 - and you can access the values from a
155:41 - dictionary
155:42 - based upon their keys
155:44 - so for example i have this dictionary d
155:47 - i can use the square bracket and the key
155:50 - name for example i want to get the name
155:53 - value i can just give the
155:56 - name key here and then press enter and
155:58 - it's going to return me the associated
156:00 - value related to key name in the same
156:04 - way you can use other keys also for
156:07 - example age and i'm going to press enter
156:10 - and it's going to give me 14 which is
156:12 - the value so age is a key here and 14 is
156:16 - the value now what type of data types
156:19 - you can store in a dictionary
156:21 - so as key you can define any data type
156:24 - so let me define a
156:26 - new dictionary here and i'm going to
156:29 - give these curly brackets
156:30 - and as i said you can define a
156:34 - string value as key also you can define
156:37 - a number as a key for example 15
156:39 - colon 15. let's try the float values so
156:43 - i'm going to just write 15.1
156:46 - colon
156:47 - 15.1 this is also allowed in dictionary
156:52 - so you can use string values you can use
156:55 - integer values you can use decimal
156:57 - values as key
156:58 - and also let's try
157:01 - the boolean values so you can use the
157:04 - boolean values also
157:06 - as keys
157:08 - and you can use a tuple also as a key so
157:11 - i'm going to just give a tuple 2 comma 3
157:14 - and then
157:15 - i'm going to assign a value of 5 to this
157:18 - key and as values also you can use
157:20 - string values or decimal values or
157:23 - integer values or boolean values or any
157:26 - kind of collection you can use
157:28 - as a value so i'm going to press enter
157:30 - here and now to access let's say we want
157:33 - to access the value
157:35 - for this key which is this tuple so i'm
157:38 - going to just
157:39 - enter this tuple inside these square
157:42 - brackets and it's going to return me 5
157:45 - or i can just provide inside the square
157:48 - bracket
157:49 - true here and then press enter and it's
157:52 - going to return me
157:54 - the value which is associated with it
157:56 - which is true itself or i can just write
158:00 - here 15
158:01 - it's going to return me 15 in turn
158:04 - because 15 is associated with this value
158:07 - which is also 15. now what happens when
158:09 - a key is not there and we try to access
158:12 - it so i'm going to just access hundred
158:15 - from this e dictionary it's going to
158:17 - give us error that this key is not
158:20 - present in the dictionary you can also
158:22 - use the len method to find out the
158:25 - number of items in the dictionary and
158:27 - you can see it says five items are there
158:30 - in the dictionary e and we can count
158:32 - this item so this is one item two item
158:36 - three item four item and the fifth item
158:38 - is here or in other words you can also
158:41 - say that ali and function is going to
158:43 - return you the number of key value pairs
158:46 - which are stored in a dictionary
158:49 - you can also use for example i'm going
158:52 - to use my d dictionary now
158:55 - and you can also use a method called get
158:59 - and then you can give the key name here
159:02 - in the parenthesis so let's say i want
159:04 - to get the value associated with the
159:07 - name key i can
159:08 - get it like this and it's going to give
159:11 - me the value associated with the
159:14 - name key you can also add a new key so
159:17 - this d dictionary you can see there are
159:20 - right now three key value pairs
159:22 - and i can add one more key value pair so
159:26 - to add a key value pair you need to just
159:29 - write d
159:30 - and in the square bracket you just need
159:32 - to give the name of the new key so i'm
159:35 - going to just write
159:37 - so name here which is the name of the
159:39 - new key in the dictionary d and then you
159:42 - need to give the value associated with
159:45 - that key
159:46 - so
159:47 - when i press enter and once again when i
159:49 - try to access the values inside the
159:52 - dictionary
159:54 - now you can see
159:55 - that surname is added to your dictionary
159:59 - now if you want to remove any key value
160:01 - pair from a list then you can use d dot
160:05 - pop method
160:06 - and then the name of the key which you
160:08 - want to remove let's say we want to
160:10 - remove the surname once again which we
160:12 - have added
160:13 - and you can just press enter and now you
160:16 - can just print the values inside d
160:19 - now you can see the surname key value
160:22 - pair is removed you can also use a clear
160:25 - function so let's see what's there in
160:28 - the e dictionary so these are the values
160:31 - inside e dictionary i can use e dot
160:35 - clear to clear the values inside
160:38 - the e dictionary so once again when i
160:40 - try to access e it will give me the
160:43 - empty dictionary
160:45 - also you can delete the dictionary using
160:47 - del
160:48 - function and the name of the dictionary
160:51 - and when i press enter and when i try to
160:53 - access this dictionary e once again it's
160:55 - going to say that this name is not
160:58 - defined you can also update the values
161:00 - in a dictionary so this is my dictionary
161:03 - and i want to update the name for
161:04 - example so i can use
161:06 - the dictionary name
161:08 - and then the key here for example name
161:11 - and the new name i want to associate
161:13 - with this key
161:14 - is let's say
161:16 - a new name here
161:17 - and when i try to access this dictionary
161:20 - once again you can see the name is
161:22 - changed
161:23 - you can also use a method called update
161:26 - to update this key value pair so once
161:29 - again i want to change the key value
161:32 - pair which is name so i can give this
161:35 - curly bracket and then give the key
161:37 - value pair which i want to change so
161:39 - name
161:40 - and the new name will be
161:42 - max once again and once again when i try
161:45 - to access the dictionary it will give me
161:47 - this dictionary and you can see the name
161:50 - is updated now now there is a function
161:53 - in dictionary called keys
161:55 - which is used to list out all the keys
161:58 - of that dictionary so you can see it
162:01 - will list out all the keys of the
162:03 - particular dictionary
162:05 - there is also a function called values
162:08 - which will list out all the values
162:11 - of that dictionary if you want to list
162:14 - out all the key value pairs you can use
162:16 - the function called items here and it
162:19 - will give you the key value pair
162:22 - list now the last function i want to
162:23 - show here is let me list out the content
162:26 - of the dictionary first of all so there
162:28 - is one more function which you can use
162:30 - here is which is
162:32 - pop item and you don't need to give any
162:35 - argument with this pop item when you
162:37 - press enter it's going to remove the
162:39 - last
162:40 - key value pair which you have added or
162:43 - updated so here we have updated this
162:46 - name key value pair that's why this is
162:49 - removed and now when you try to
162:52 - see the content of the dictionary
162:55 - this name key value pair is removed so
162:58 - this is how you can use dictionaries in
163:00 - python in this video we will talk about
163:02 - the slice function in python and also we
163:05 - will talk about how to use negative
163:08 - numbers with index in python so let's
163:11 - get started so first of all i'm going to
163:13 - declare a list
163:28 - so now we have three variables first is
163:30 - a list second is a tuple and third
163:34 - is a string now there is a function
163:36 - called slice which you can use with your
163:39 - list tuples and strings to slice
163:43 - something out of your collection
163:45 - so to use this slice i'm going to
163:47 - declare a variable and then i'm going to
163:50 - use this function which is slice and you
163:52 - can provide some parameters in the
163:54 - parenthesis here so the first parameter
163:57 - you can provide here is for example
164:00 - start the second parameter you can
164:02 - provide here is the end
164:05 - and the third parameter you can provide
164:07 - here is the step
164:08 - so let's say i want to get out of this
164:12 - list
164:13 - the numbers from 0 to 4 so as a first
164:17 - argument we can define our number 0
164:20 - which is the first index
164:22 - and at the end index we can define 5 and
164:25 - then i'm going to press enter and once
164:27 - again i'm going to use my list variable
164:29 - and pass this x
164:31 - variable which contains the slice object
164:34 - which is returned by this function
164:37 - here and then press enter and you can
164:39 - see here it gives me the values from 0
164:42 - to 4 so the first argument in the slice
164:45 - function is the index
164:47 - from where you want to start the next
164:49 - parameter is the index of the element
164:52 - before which you want to stop okay so if
164:55 - you want to stop at four you provide the
164:58 - index five if you want to stop at index
165:01 - five you will you will provide the stop
165:04 - value as six okay so it will be
165:08 - always one more than what you want now
165:11 - there is a short notation for achieving
165:14 - the same also and for that you can
165:17 - use your list and inside the square
165:20 - bracket you can provide the start value
165:23 - and the end value and then press enter
165:26 - and it's going to give you the answer
165:28 - but instead of comma i need to provide
165:31 - the colon here and then it will give me
165:34 - the answer okay
165:35 - so here you can use colon to give the
165:38 - start value and the end value and also
165:41 - an optional value which you can give as
165:43 - a third parameter which we will see in a
165:46 - moment okay so this is the short
165:49 - notation of creating slice
165:52 - in python so as i said this is the start
165:55 - value and this is the end value plus one
165:58 - okay so let me show you something i have
166:01 - a list here
166:02 - and you can see here i have written
166:05 - you have the variable a it can be a list
166:08 - it can be a tuple or it can be a string
166:11 - and inside the square brackets you give
166:13 - the start value and the end value
166:16 - separated by this colon symbol and what
166:19 - it's going to give you is the items from
166:22 - start to end minus 1 okay
166:26 - so whatever end value you will give here
166:28 - you will get the value n minus 1
166:31 - you can also use this notation so start
166:34 - colon and without giving the end
166:37 - value and also reverse is possible so
166:39 - you can give only the end value and not
166:42 - the start value and also this notation
166:44 - is possible so we will see one by one
166:47 - how to use all these notations
166:50 - so first of all i will give once again i
166:53 - will use the tuple now and this time i'm
166:56 - going to just give the start value let's
166:57 - say i want to start from
166:59 - 4 here and then colon and then press
167:02 - enter and it's going to give me the
167:04 - result from index 4 until the end of
167:07 - this tuple once again let me give the
167:09 - end value so instead of using
167:12 - this value before colon this time i will
167:15 - give the value after the colon and i
167:17 - will leave the start value blank and
167:20 - here let's say i just want to
167:22 - go before 6 so i'm going to press enter
167:25 - and you can see it will give me
167:27 - the result from 0 to 5 that is
167:30 - end value minus 1 right so until 5 and
167:34 - also you can give this kind of notation
167:35 - so this time i'm going to use
167:37 - the string
167:38 - variable and you can use colon without
167:41 - giving the start and end value and when
167:44 - i press enter it's going to give me the
167:46 - whole string
167:47 - let's say with this string i want to
167:49 - provide the start and end value let's
167:51 - say 0
167:52 - to
167:53 - 5 and then press enter it's going to
167:56 - give me a string from 0 to 4. so this
167:59 - slice functionality you can use with the
168:02 - tuples lists and also with the string or
168:06 - essentially whatever collection which
168:08 - have the indexes you can use this kind
168:10 - of slides notation with those kind of
168:13 - collections now in addition with the
168:15 - start and end value you can also give
168:18 - the step values so let me just print the
168:21 - value of a once again and you can see
168:24 - the values inside the a and let's say i
168:27 - want to get out of this list 0
168:31 - 2
168:32 - 4 6
168:33 - 8 okay so essentially i want the every
168:36 - second value from the list so what i can
168:39 - do here is i can
168:40 - give the variable name and then start to
168:43 - end so from zero to index nine
168:47 - and the third
168:49 - argument here you can give is the step
168:52 - so let's say i want to get the every
168:53 - second value so i can give two here and
168:55 - then press enter and it returns me 0
168:59 - 2 4
169:00 - 6 8.
169:02 - now let's say i want to get every third
169:04 - value so i can write
169:06 - 3 here and it's going to give me 0 3 6.
169:10 - okay in a similar manner if i want to
169:13 - get the every fourth value i can write 4
169:16 - here and then press enter it gives me 0
169:19 - 4 8.
169:21 - also if you don't want to give this
169:23 - range from start to end you can leave
169:25 - the start and add in the value as blank
169:28 - and then press enter and it's going to
169:30 - give you the same result now in python
169:33 - you can use indexes with the negative
169:36 - numbers also so let me explain what i
169:39 - mean by negative number index
169:42 - so let's say i have a string called
169:44 - python it have
169:46 - these character p y t h o n
169:49 - you already know that you can access the
169:53 - p character or p letter using the index
169:56 - 0 and the y letter using the index 1 and
169:59 - the t letter using the index 2 so this
170:01 - is the positive index right you can also
170:04 - use the negative index which starts from
170:07 - the right hand side so it starts from n
170:10 - and the index you can give here is from
170:14 - minus one so the last index here will be
170:17 - minus one
170:18 - then minus two minus three minus 4 minus
170:21 - 5 and minus
170:22 - 6 here
170:24 - so let's use these kind of indexes and
170:27 - let's see how we can use them
170:29 - so we have this string here and let's
170:32 - say i want to get this value which is 9
170:34 - which is the last
170:36 - letter of the string so i can use c
170:39 - and here inside the square bracket i can
170:41 - give minus 1 and then press enter and
170:43 - it's going to give me the last letter of
170:46 - the string
170:47 - if i give minus 2 here it will give me
170:50 - the second last letter okay so the
170:53 - negative index starts from the right
170:56 - hand side
170:57 - and it goes from minus 1 till the end of
171:00 - the string now let's use this negative
171:03 - number index with the list which we have
171:06 - so we have this a list
171:08 - and we can use a and then we can give a
171:11 - colon colon
171:13 - -1 which is going to give you
171:15 - all the numbers in the reverse order
171:18 - in the list so our list was starting
171:21 - from 0 to 9
171:22 - it will give us 9 to 0 in the reverse
171:25 - order now let's say if you want to get
171:28 - the first two item in the reverse order
171:31 - so this is when you use this minus 1
171:35 - as the third parameter it will give you
171:37 - everything in the reverse order okay so
171:40 - minus 1 as the step value is used to
171:44 - give everything in the reverse order so
171:47 - when you give for example
171:50 - one here and leave the end parameter
171:52 - empty it's going to give you you can see
171:55 - one zero so as you can see our list
171:58 - starts from zero one it's going to give
172:01 - us the reverse order values so it's
172:03 - going to give us
172:05 - one zeros because here we have given one
172:08 - and it's the end value for this reverse
172:11 - string because we have used the minus
172:14 - one here let's take some more examples
172:17 - so instead of this start value
172:19 - i can give minus three here and then
172:21 - press enter and you can see it gives us
172:24 - eight and nine which are the last two
172:26 - items of the list in the reverse format
172:30 - okay because our index in reverse starts
172:33 - from minus one
172:34 - minus two minus three and we we are
172:37 - skipping the minus three option because
172:40 - we have seen that we just take the end
172:44 - minus one right so minus one minus two
172:48 - and these will be given to us in the
172:51 - reverse order because we have used minus
172:53 - one here now you can also give for
172:56 - example minus 3 as the start value so
172:59 - i'm going to give the minus 3 as the
173:01 - start value and then press enter and
173:03 - it's going to give us 0 to 7 right so 0
173:07 - to 7 except 8 and 9 in the reverse order
173:12 - so because 3 this time is the start
173:15 - value and end value
173:17 - is until thus
173:20 - so because 3 this time is the start
173:23 - value so we go from
173:26 - minus 1 minus 2 minus 3 so minus 3 is
173:30 - this index
173:32 - and this is the start value so we get
173:35 - 0 to 7
173:37 - in the reverse order so this is how you
173:39 - can use slice function and negative
173:42 - values with indexes in python in this
173:45 - video i'm going to show you how to use
173:47 - loops in python
173:49 - and we will start with the while loop
173:52 - so first of all what is a loop
173:55 - so a loop allows us to repeat over some
174:00 - block of code again and again
174:03 - until and unless some condition is met
174:06 - now let's see how to use while loop in
174:08 - python
174:10 - so let's say i'm going to declare a
174:11 - variable called i and i'm going to
174:14 - initialize it with the value 0
174:17 - and to use a while loop you use this
174:19 - keyword and then you provide some
174:21 - condition
174:22 - so let's say i want to check whether
174:25 - the value inside the i variable
174:29 - is less than 5 or not okay
174:33 - and as in the case of if also we have
174:36 - seen we provide after the condition this
174:38 - colon symbol
174:40 - and then in the next line
174:42 - we write the code which we want to
174:45 - perform again and again until
174:48 - this while loop condition
174:51 - is true
174:52 - so let's say we want to just print
174:55 - something and we will print that the
174:58 - value of i
175:00 - is and then we will print the value of i
175:04 - like this also i want to change the
175:07 - value of i
175:08 - with every step so i will change the
175:10 - value of i using this expression which
175:13 - is i plus equals one
175:17 - this essentially mean that we want to
175:20 - just add one every time whenever this
175:25 - code is executed also we can say that we
175:28 - want to perform this operation i is
175:30 - equal to i
175:32 - plus 1 so this statement is similar to
175:35 - this statement let me provide some
175:37 - spaces here now in here also you will
175:40 - observe that i have provided some
175:41 - indentation here and indentation means
175:45 - that these two lines of code is the part
175:48 - of while loop okay so when i want to
175:52 - write something outside the while loop i
175:55 - will start from here with no indentation
175:58 - and let's say i want to just
176:00 - print
176:01 - that we are finished and now let me run
176:04 - the code and let's see what's the result
176:06 - and you will see here first of all this
176:09 - string is executed which is the value of
176:11 - i is
176:13 - and then
176:14 - the value of i is printed which is 0 1 2
176:19 - 3 and 4. so as you can see here that we
176:22 - have initialized i is equal to 2 so the
176:24 - initial value of i is 0. now when we
176:27 - come to this code and when this
176:29 - condition is checked
176:31 - here the value of i is 0 which is less
176:35 - than
176:35 - 5 that means this condition is true and
176:39 - that means that these two lines of code
176:42 - which are under while loop will be
176:44 - executed
176:45 - so this line is executed where value of
176:47 - i is printed which is i is equal to 0
176:50 - and this line of code increments the
176:53 - value of i by 1 so when this line of
176:55 - code is executed now the value of i
176:58 - becomes 1 because previously it was 0
177:02 - and once again this program flow grows
177:04 - to the starting to evaluate this
177:06 - condition and this time the value of i
177:09 - is 1 which is less than 5 and the
177:11 - condition is true once again and again
177:14 - this line is of code is executed and
177:17 - this line of code is executed and the
177:19 - value of i is incremented by 1 once
177:21 - again
177:22 - and the value of i becomes 2 here
177:25 - and this will happen again and again
177:28 - until the value of i
177:30 - becomes 5
177:33 - and when the value of i becomes 5 this
177:36 - condition will be false and that means
177:39 - this code will not be executed this code
177:42 - will only be executed when the while
177:45 - loop condition is true and then at last
177:48 - this line of code is printed which is
177:51 - finished while loop now let me give you
177:54 - one more example of while loop and i
177:57 - will start from the top once again and
177:59 - this time i will declare a variable
178:00 - called num and i will initialize this
178:02 - value by zero and also i will declare a
178:07 - variable called sum and initial value of
178:09 - sum is also zero now here first of all i
178:12 - will ask the user to enter a number so
178:15 - i'm going to just write and also i will
178:18 - ask the user if he or she wants to exit
178:21 - from the
178:23 - loop he can enter zeros and then in the
178:26 - next line i will start with my while
178:28 - loop and i will give the condition
178:31 - if the number so if the number i'm going
178:34 - to write number
178:35 - is not
178:37 - equals to 0
178:39 - we want to perform some operations
178:42 - and what operation we want to perform we
178:44 - want to ask the user to provide any
178:47 - number
178:48 - and we will transfer this number into
178:50 - the variable num so here i will first of
178:53 - all write input and then i will ask the
178:56 - user to provide the number and when the
178:58 - user provides the number i want to
179:00 - convert it to a float value so i will
179:03 - just type cast this input to a float
179:06 - value and then this number will be
179:09 - assigned to the variable num
179:12 - now here don't forget to give the colon
179:15 - and in the next line what i will do is i
179:17 - will just use my sum variable
179:19 - and i will just add
179:21 - the
179:22 - number value to the sum so i can just
179:25 - write sum is equal to sum
179:27 - plus
179:28 - num and this means that initially the
179:30 - value of sum will be 0 and then this
179:33 - number will be added to the sum and
179:36 - until this loop runs
179:38 - we will get the sum of all the numbers
179:41 - which is entered by the user
179:44 - and at last i'm going to just print the
179:46 - value of sum so now what do you think
179:48 - will happen so in this condition we are
179:51 - evaluating that num should not be equal
179:54 - to 0 and then only this code will be
179:58 - executed and we have provided the
180:00 - initial value of number is equal to 0 so
180:04 - this condition will never be met
180:07 - and this statement will never be
180:10 - executed
180:11 - so we need to provide the initial value
180:14 - of num is equal to 1
180:16 - and then
180:17 - whenever the user provides the value
180:20 - this 1 will be overwritten by the value
180:23 - which is provided by the user
180:26 - so this time when we run the code
180:29 - you can see first of all the program
180:31 - asks us to provide a number so i will
180:34 - provide 100 here and then press enter
180:37 - and you can see
180:38 - the sum is printed which is equal to 100
180:42 - once again we will provide some number
180:44 - and then press enter
180:45 - and now you can see sum is equal to 150
180:49 - once again we will provide one number
180:51 - and then press enter
180:53 - and now the sum is one zero five zero
180:57 - now let's say we provide a number is
180:59 - equal to zero and then press enter
181:01 - you can see that our while loop is
181:04 - finished because 0 is not equal to 0
181:07 - that means a false condition and then
181:10 - the flow of program comes out of the
181:13 - loop and then the other
181:15 - while loop will be executed which is
181:17 - this while loop and that's why this
181:20 - output is printed we can also write
181:23 - that sum is equal to so
181:26 - we know that this is the sum so sum
181:28 - equals and then after the comma we will
181:31 - print the value of sum and once again
181:33 - when we execute the code
181:37 - and once i want to exit from the code i
181:40 - can use 0 to exit so 0 and then press
181:43 - enter and i come out of this loop now
181:45 - python also supports the else statement
181:49 - to be associated with the loop statement
181:53 - so what i mean by the else statement to
181:56 - be associated with the loop statement is
181:59 - that i can use after the end of this
182:02 - while loop condition i can use here else
182:06 - and after the colon i can provide some
182:08 - code which i want to execute once this
182:11 - loop is finished okay so i can write
182:15 - here that i want to print for example
182:18 - finished sum so let me run the code once
182:21 - again
182:22 - and i will quickly provide some numbers
182:25 - here and which will provide the sum
182:28 - and when i provide 0 here
182:31 - then we come out of the loop and you can
182:33 - see this finished some string is printed
182:36 - using this else so once your program
182:38 - comes out of the loop this else
182:41 - statement will be executed similarly we
182:43 - can go down and here also instead of
182:46 - writing
182:47 - this finished while loop we can also
182:49 - give else statement here so i'm going to
182:51 - just write else
182:53 - and after the colon here i need to
182:55 - provide
182:56 - the
182:57 - indentations so four space indentation
183:00 - one twos three four
183:02 - and everything will be okay and once i
183:04 - run the code and first of all i will
183:06 - provide zero here to see if this is
183:09 - executed and you can see
183:11 - this else condition
183:13 - is called once your while loop is
183:16 - finished now also you can provide some
183:19 - condition here which is always true so
183:21 - for example i can write true here and
183:24 - this means
183:25 - that while loop evaluates to true every
183:28 - time and this means that this
183:31 - statement will be executed
183:34 - forever so this is also possible but you
183:36 - need to think carefully what do you want
183:39 - to do do you want to execute this code
183:42 - infinitely or do you want at some time
183:45 - that this condition will be false so
183:48 - this is how you can use
183:49 - while loops in python in this video we
183:52 - are going to see how to use for loops in
183:54 - python
183:56 - so first of all what are for loops
183:59 - so a for loop is used to iterate over a
184:02 - sequence and that sequence can be a list
184:06 - or a tuple or a dictionary or a set or a
184:10 - string so for that i'm going to declare
184:13 - some variables and the first variable is
184:16 - a which is a list second variable is b
184:19 - which is a tuple third is c which is a
184:22 - set
184:23 - fourth is a string and fifth variable is
184:27 - e which is a dictionary now before
184:30 - seeing the syntax of for loop i'm going
184:33 - to show you how to use in operator in
184:36 - python because it's used in for loop
184:39 - so i'm going to first of all use print
184:43 - and then i'm going to use 0 and then use
184:47 - in operator and then i'm going to use
184:49 - this first variable which is a which is
184:52 - a list right and let's see what happens
184:55 - when i try to run this code so it prints
184:58 - true so in operator will give you true
185:01 - or false depending upon whether
185:04 - this value is present in your sequence
185:08 - or not so for example when i write
185:10 - hundred here which is not present in the
185:12 - list it's going to return us false so
185:15 - this you can use with the tuple also let
185:18 - me just use it with tuple and let's use
185:22 - one here and i'm going to run the
185:24 - program and it prints true once again
185:30 - also we can use in operator with strings
185:33 - so i can write d here but for that i
185:36 - need to convert this one
185:38 - into a string so now when i run the code
185:42 - it will give me true now let's see how
185:44 - to use a for loop
185:46 - in python so for loop as i said we can
185:49 - use with some sequence so let's use it
185:53 - with a which is a list so i can write x
185:57 - in
185:58 - a
185:59 - and a is a list in this case
186:01 - and then i can just print the value of x
186:06 - and let's see what happens first of all
186:08 - when we just write this kind of a for
186:11 - loop so we are going to run the program
186:14 - and what it does is it prints the values
186:17 - from 0 to 5 which is the element present
186:21 - inside the list so for loop is going to
186:24 - iterate over your list one by one and
186:27 - this in operator is going to check
186:29 - whether this value is there in your
186:32 - sequence or not in this case in our list
186:35 - or not so first of all when for loop
186:37 - start it will transfer the first value
186:40 - which is 0 into x
186:42 - and then it checks whether x is in this
186:45 - list a or not and then it's going to
186:48 - print the value of x which is 0. and
186:50 - once again program sequence goes here
186:53 - and once again the next value is
186:55 - transferred to x which is 1 and once
186:58 - again this condition is validated if
187:01 - 1 is in this list a or not and then the
187:04 - value of x is printed which is 1 and
187:06 - this iteration goes on and on until 5 is
187:10 - reached which is the last value in the
187:12 - list so 5 is printed and after that
187:14 - there is nothing inside x and then the
187:17 - program flow comes out of this loop you
187:19 - can also use this for loop with the
187:22 - tuple also so let's try it with tuple
187:24 - and let's see what happens
187:26 - and it's going to print the same values
187:28 - also with
187:30 - the
187:31 - set let's see what happens so i'm going
187:33 - to run the program once again and it
187:34 - prints 0 to 5 once again because these
187:37 - are the content of the set also
187:40 - once again let's try to use this for
187:43 - loop with the string and let's see what
187:45 - happens
187:46 - and it's going to print out the content
187:49 - of this string which is 0 1 2 3 4 5 and
187:53 - it prints them one by one now with the
187:56 - dictionary we use this for loop in a
187:59 - little bit different way so for example
188:01 - i will write the variable name which is
188:04 - a dictionary and then let's say i want
188:06 - to just print all the keys inside this
188:10 - dictionary then i can write e dot
188:13 - keys and then we have all the keys using
188:16 - this function and when i run the code
188:18 - it's going to print all the keys inside
188:21 - your dictionary also when you use
188:24 - the function called dot
188:26 - values
188:27 - it's going to print out all the values
188:30 - inside your dictionary you can see max
188:32 - and the age 20. now let's say you want
188:34 - to print out all the key value pairs
188:37 - which are there in your dictionary you
188:39 - can use a function called
188:41 - items and this is going to give you keys
188:44 - and values right so i can just write key
188:48 - comma
188:49 - value here and then i can print the
188:51 - value of key first of all key
188:54 - and let's provide some space here
188:57 - and then let's print out the variable
188:59 - value here okay and when i run the code
189:02 - it's going to give you first of all key
189:05 - and then the value once again key and
189:08 - then the value so in order to print out
189:10 - the keys and values from a dictionary
189:13 - you can use this kind of notation now
189:16 - you can also use a function called range
189:18 - so let me show you how to use this
189:20 - function which is range which returns us
189:23 - the values starting from zero so there
189:26 - is a function called
189:28 - range here and in here you can provide a
189:31 - number
189:32 - and this range is going to return the
189:35 - number starting from 0 to 5. so whatever
189:38 - number you write here the range rate
189:40 - will be returned from 0 until that
189:43 - number accept whatever number you write
189:45 - here okay so let me just try to print
189:48 - out the values which is there in the x
189:51 - and when i try to print this
189:54 - it's going to return me from 0 to 5 and
189:57 - you can see here 6 is not printed
189:59 - because the range will give us the value
190:02 - except that value which you write here
190:04 - you can also provide the start value
190:06 - here so let's say i want to start from 2
190:09 - and i want to go until 5 i can
190:12 - write something like this and now you
190:14 - can see now it start printing from 2 to
190:16 - 5. also you can give a third parameter
190:20 - here which is a step parameter so i can
190:22 - give 3 here for example
190:25 - and let's say i want to write 30 here
190:27 - and let's run the code
190:30 - and now what is going to return is it
190:33 - starts from 2 because we have given the
190:36 - start value 2 here
190:37 - and it's going to go until 29 because we
190:40 - have given 30 value here right
190:43 - and this is the step
190:45 - so every third value will be printed
190:47 - after 2 here so 5 will be printed then 8
190:51 - then 11 14 17 20 23 26 and 29 every
190:57 - third value right if you write here two
191:00 - then
191:01 - we will increment in the step of two so
191:04 - this is how you can use range function
191:06 - with your for loop
191:08 - also as i said in the last video you can
191:11 - use else statement with your loops so i
191:15 - can also write else here
191:18 - and then after the colon in the next
191:20 - line i can print something or i can
191:23 - execute some statement so for now i will
191:25 - just print finished
191:28 - and then i'm going to run the code and
191:31 - once the loop is finished you can see
191:33 - this else statement is executed which
191:36 - prints finished so else statement will
191:39 - be executed once your for loop is
191:41 - finished so in this way you can use for
191:43 - loops in python in this video i'm going
191:45 - to show you how you can use break and
191:48 - continue keywords with your python loops
191:52 - so to start with i have here two loops
191:54 - one is a for loop and other is a while
191:57 - loop now this for loop takes a list and
192:00 - then print
192:01 - every element out of this list using
192:04 - this print function
192:06 - in a similar way while loop evaluates
192:09 - the value of i
192:11 - if it's less than 5 then it's going to
192:14 - print the value of i and then increment
192:16 - the value of i by one
192:19 - now this is all normal and we have
192:21 - already seen this kind of code now you
192:23 - can use a break keyword with your loops
192:27 - in order to terminate the execution of
192:30 - loop immediately so let's see how we can
192:33 - use break keyword first and then we will
192:36 - see how to use continue keyword
192:38 - so here i'm going to give a condition
192:41 - inside my for loop and i'm going to just
192:44 - evaluate whether x is equal to
192:47 - 3 or not and if x is equal to 3 i'm
192:51 - going to use this break keyword in a
192:54 - same way i'm going to use this if
192:56 - condition inside my while loop also but
192:59 - instead this time i'm going to evaluate
193:02 - i is equal to 3 and if i is equal to 3
193:04 - then i'm going to use this break inside
193:07 - this if condition
193:08 - so let's run the code and let's see what
193:10 - happens
193:11 - and you can see in the for loop it has
193:14 - only printed 0 1 2.
193:16 - even though this for loop is supposed to
193:18 - print from 0 to 5
193:21 - it has printed until 2 from 0
193:24 - because as soon as this x value becomes
193:28 - 3
193:29 - and we call break here the loop is
193:32 - terminated immediately and our program
193:35 - will come out of the loop immediately as
193:38 - soon as this break keyword is called in
193:41 - the case of this while loop also as soon
193:43 - as this i value becomes 3 we are calling
193:47 - the break keyword and as soon as this
193:49 - break keyword is called our loop is
193:52 - broken and the execution of code will
193:56 - come out of this loop so until 2
193:59 - everything was ok but as soon as the
194:02 - value becomes 3 this break is called and
194:05 - then we come out of the loop let me just
194:09 - print a line here in order to separate
194:13 - these two loops so we know that from
194:17 - where one is starting right so i'm going
194:20 - to once again run the code and you can
194:22 - see for loop prints from 0 to 2 and also
194:25 - while loop prints from 0 to 2. if you uh
194:28 - change the value here for example here
194:31 - you want to evaluate xz is equal to 2 or
194:33 - not and here you want to evaluate if x
194:37 - is equal to 4 or not and then you break
194:39 - out of the loop and once again when i
194:42 - run the code you can see the for loop
194:45 - runs only 2 iteration for 0 and 1 and as
194:49 - soon as the value of x becomes 2
194:52 - we call the break keyword and we come
194:55 - out of this loop and in the case of
194:57 - while loop as soon as this value of i
195:00 - becomes 4 we come out of the loop so the
195:04 - value from 0 to 3 is printed now let's
195:07 - see how we can use a continue keyword
195:10 - instead of this break keyword so instead
195:12 - of this break keyword i will use a
195:15 - keyword called continue here and also in
195:18 - the while loop also i'm going to use
195:20 - this keyword called continue and i'm
195:23 - going to run the program and let's see
195:24 - what happens
195:26 - so now when you see here so you can see
195:29 - here for loop starts from printing 0
195:32 - 1 and as soon as the value of x becomes
195:35 - 2 this condition is met and this
195:38 - continue is called and as soon as this
195:42 - continue keyword is called
195:44 - everything whatever code comes after
195:47 - this continue keyword will be skipped
195:50 - and your program execution goes once
195:52 - again to a for loop for the next value
195:56 - so you can see
195:58 - in case where x is equal to 2 and
196:01 - continue is called
196:02 - this statement is not executed because
196:07 - as soon as we execute continue in our
196:10 - loop then that iteration is skipped and
196:14 - all the code after the continue will not
196:18 - be executed okay so we go to the next
196:21 - iteration
196:23 - so that's why 2 is not printed because
196:26 - this was skipped in case of 2 and then
196:29 - directly 3 is printed and then 4 and 5
196:32 - is printed
196:33 - in case of while loop also
196:35 - as soon as the value of i becomes 4 you
196:39 - can see 4 is not printed here you can
196:43 - also change this value to 2
196:45 - and then i'm going to run the program
196:47 - once again and you can see
196:49 - while loop prints 0 1 and y it prints 0
196:53 - and 1 so because as soon as the value of
196:56 - i becomes 2 this continue keyword is
196:59 - called and after that
197:01 - this iteration is skipped and also
197:04 - because this iteration is skipped these
197:07 - two lines of code are not executed and
197:10 - because this line of code is not
197:12 - executed that's why the value of i is
197:15 - not incremented and the value of i
197:19 - always remains 2 and that's why this
197:22 - becomes our infinite loop right so
197:25 - instead of increment the value of i at
197:28 - the last line we can increment the value
197:30 - of i just after
197:32 - this condition check whether i is less
197:35 - than 5 or not and then we run the code
197:39 - now you can see it prints 1
197:42 - 3
197:43 - 4
197:44 - and 5. so now what's happening here is
197:47 - initially the value of i is equal to 0
197:50 - and this condition is evaluated and then
197:53 - we first increment the value by one
197:57 - and that's why
197:58 - it starts with the printing of one by
198:01 - using this print function and as soon as
198:04 - i is equal to two this continue is
198:06 - called and that's why here 2 is not
198:10 - printed because as soon as the value of
198:12 - i becomes 2 this continue is called and
198:15 - every code or every statement after the
198:18 - continue will be skipped for that
198:21 - iteration that's why 2 is not printed
198:24 - here so in this way you can use break
198:27 - and continue keywords with loop in this
198:29 - video i'm going to show you what is a
198:32 - function in python and how to use
198:34 - functions in python so first of all what
198:37 - is a function so a function is a group
198:40 - of statements within a program that
198:43 - performs a specific task now functions
198:46 - can be of two types one is built-in
198:50 - function and other is user defined
198:53 - function
198:54 - built-in function we have already seen
198:56 - that print is a built-in function or for
198:59 - example input is a built-in function or
199:02 - for example min is a built-in function
199:05 - and so on now usually function does one
199:09 - task at a time so you can see this print
199:12 - function only prints something whatever
199:15 - input you give here it's going to print
199:17 - it input function takes some input from
199:20 - the user min function finds out the
199:23 - minimum out of some values
199:26 - so a particular function
199:28 - do one task at a time now let's see how
199:32 - we can define a function so to define a
199:35 - function you use a keyword def
199:38 - and then you give the name of the
199:40 - function so
199:41 - name of
199:43 - function and after the name of the
199:44 - function you give these parentheses and
199:47 - you provide number of arguments or
199:51 - parameters so for example arg1
199:55 - comma
199:56 - arg2 comma arg 3
200:00 - and so on so you can give any number of
200:03 - arguments to your function
200:06 - now after this ending parenthesis you
200:09 - give this colon and then
200:12 - under this function
200:14 - signature you write some statements
200:18 - which you want to execute when this
200:20 - function is called so for example if you
200:22 - want to print something you can print
200:25 - something or if you want to calculate
200:27 - something for example the product of
200:30 - two or three variables or a sum of two
200:33 - or three variables you can do under this
200:36 - function declaration so let's take an
200:38 - example or function and let's see how we
200:41 - can define our real life function so i'm
200:45 - going to define a very simple function
200:48 - which is going to add two values so i'm
200:51 - going to name it as a sum
200:53 - and for example it takes two values one
200:56 - is let's say arg1
200:58 - and other is
201:00 - arg2
201:02 - and then after the colon i want to add
201:05 - these two values so i can just write
201:08 - print here and then i can write arg1
201:12 - plus
201:14 - r2 so this is a very simple function
201:17 - which takes two arguments and then add
201:20 - these two arguments and print them so
201:24 - this is how you declare a user defined
201:27 - function now after declaring a function
201:30 - you need to also call this function so
201:33 - in order to call the function you just
201:35 - use the name of the function and then
201:38 - you provide the arguments which is
201:40 - required by the function so our function
201:42 - requires two argument right now arg1 and
201:45 - r2 so we are going to provide these two
201:49 - values let's say i want to provide 15 as
201:52 - the argument 1 and i will provide 60 as
201:56 - the second value
201:57 - now let's run the code and let's see
201:59 - what happens
202:00 - so when we run the code you can see
202:03 - our function
202:05 - prints 75 which is the sum of these two
202:09 - values which we have provided
202:11 - as an argument to this function now also
202:15 - if you remember
202:16 - this plus
202:17 - operator you can also use to concatenate
202:21 - two strings so i can use this sum
202:24 - function and this time i'm going to
202:27 - provide for example
202:29 - hello as the first parameter and then
202:32 - world as the second parameter
202:35 - and then i'm going to run the program
202:37 - and it's going to print hello world in
202:40 - addition we can provide to float numbers
202:42 - here for example i will provide 15.647
202:47 - and the second argument i'm going to
202:49 - provide is 80.258
202:52 - and this is also allowed so i'm going to
202:54 - just
202:55 - run this code and it gives us the sum of
202:59 - these two values so this function sum is
203:02 - doing one single task which is to add
203:06 - two values whether it's a string or it's
203:10 - a number or it's a float value now you
203:13 - may also observe
203:15 - that when i provide for example as a
203:18 - first argument i will provide a string
203:21 - and as a second argument i will provide
203:24 - a number here
203:25 - will this work
203:26 - let's see
203:28 - so it's going to give us an error and
203:30 - this error says can't convert into
203:33 - object to string implicitly so this is a
203:36 - problem
203:37 - so to solve this problem we can provide
203:40 - here a simple condition and we are going
203:42 - to check the type of both the arguments
203:45 - so if type
203:47 - arg
203:48 - 1
203:50 - is not equal to
203:53 - type
203:54 - arg2
203:55 - this should be arg arg1 not agr1 so let
203:59 - me just change
204:01 - this here
204:02 - and if the type of arg1 is not equal to
204:06 - r2 we are going to just use this keyword
204:10 - which is
204:11 - return
204:12 - so this return keyword is used to return
204:16 - something so you can return for example
204:18 - 0 here or any string here and when you
204:22 - write this return function without
204:24 - any value here it's going to return
204:27 - nothing but as soon as this return
204:30 - keyword is called
204:32 - nothing after that will be executed so
204:35 - even though you are returning nothing
204:36 - from here then also this statement will
204:40 - not be executed so whenever return is
204:43 - executed after that all the statements
204:46 - which are under the return will not be
204:48 - executed also we can print a message
204:52 - here that please give
204:54 - the args of same type okay and let's run
204:58 - the code now
205:00 - and you can see
205:01 - now it prints this message which says
205:04 - please give args of same type
205:07 - so if these arguments are not of same
205:11 - type whether it's a integer or a string
205:14 - or a float value if the user provides
205:17 - first argument which is a string type
205:19 - and the second argument which is a
205:22 - integer type then this condition will be
205:25 - true and this
205:27 - statement will be executed which is
205:30 - going to print this message and then
205:32 - return is called and after this whatever
205:35 - statements are there will not be
205:38 - executed so now as i said you can also
205:40 - return some values from a function and
205:43 - here when you don't give any values
205:46 - after this return keyword it's not going
205:49 - to return anything but let's return the
205:52 - addition of two
205:55 - arguments using our return keyword so
205:57 - i'm going to use this return keyword
206:00 - here which is going to return the
206:02 - addition of these two values using this
206:07 - sum function so now what will happen is
206:10 - let's run the code once again and you
206:12 - can see this sum is executed this sum is
206:15 - executed this sum is executed but the
206:18 - result is not printed so in order to get
206:21 - the result out of this function when it
206:25 - returns something we need to save this
206:28 - return value in a variable so let's save
206:30 - this value
206:32 - into a variable and then you can use
206:36 - this variable to print the value of the
206:38 - sum so i can do something like this
206:42 - also you can directly and close this sum
206:45 - function inside a print function
206:48 - and then also it's going to print the
206:51 - sum
206:52 - of these two strings so either you can
206:55 - assign
206:56 - the result of this sum function which is
206:59 - returning the result
207:01 - into a variable or you can use directly
207:05 - this print function to get the result
207:07 - and print it so i'm going to
207:09 - use print with other
207:12 - two
207:13 - functions also so first print and the
207:17 - second print here
207:19 - and let's run the code once again
207:22 - and now you can see what happens
207:25 - so first of all it prints 75 which is
207:28 - the addition of these two numbers which
207:31 - is returned by this sum function into a
207:35 - variable a and we are printing the sum
207:38 - using this print function
207:40 - here in the next result it prints hello
207:44 - world because this sum function now
207:46 - returns the concatenation of these two
207:48 - strings similarly this sum function is
207:51 - going to return the sum of these two
207:53 - float values
207:54 - and in the last result because the type
207:58 - of hello is not equal to the type of 15
208:02 - then this message is printed because
208:05 - this condition is true in the last case
208:09 - and then return will be called and when
208:12 - this return is called we were printing
208:15 - whatever is returned from the sum
208:17 - function and you can see at last none is
208:21 - printed because at last this sum
208:23 - function is returning nothing because
208:26 - the type of these two arguments is not
208:29 - same so we were returning without any
208:32 - value and that's why none is printed
208:35 - here now there are few things to note
208:37 - here okay
208:39 - so the first thing is you can define a
208:42 - function using
208:43 - def keyword and then the name of the
208:46 - function and under these parentheses you
208:49 - provide the argument so these two are
208:53 - called arguments so this is argument one
208:56 - and this is an argument two also you can
208:59 - use alternatively the name parameters
209:03 - for these two arguments so this is a
209:04 - parameter 1 and this is the parameter 2.
209:08 - now it's possible to return from a
209:09 - function like you can return the
209:11 - addition of two values or it's also
209:14 - possible to return nothing from a
209:17 - function so when you use return without
209:20 - a value it's not going to return
209:22 - anything now when you use this function
209:25 - somewhere it's called calling a function
209:29 - now at last let's discuss about some of
209:32 - the benefits of using functions so the
209:36 - first benefit is function makes your
209:39 - code simpler because if you don't use
209:43 - function to execute this kind of code
209:47 - then you need
209:48 - to write this code again and again
209:51 - whenever you want to use this
209:53 - functionality at different places the
209:56 - second advantage is function makes your
209:59 - code reusable
210:01 - so the same code is used to add to
210:04 - integer values to concatenate two string
210:07 - values to add two float values and it's
210:11 - also used to give the error if you
210:14 - provide the arguments of different types
210:18 - so that means you write the code once
210:21 - and use it multiple times and that
210:24 - results in faster development of the
210:27 - code so if you use a function you can
210:30 - develop your code much faster than if
210:34 - you don't use a function and the last
210:36 - but not the least advantage is when you
210:39 - declare functions you can test and debug
210:42 - your code in a better way so this is how
210:45 - you can declare and use functions in
210:47 - python in the last video we have seen
210:49 - how to declare functions and how to use
210:52 - functions in python
210:54 - in this video also we will discuss some
210:56 - more properties which are related to
210:59 - functions in python so let's get started
211:02 - so to start with i have a function
211:04 - called student which takes two arguments
211:08 - one is name and other is age and inside
211:11 - the function we just simply print the
211:14 - value of name and age using the print
211:17 - function and when we call this function
211:21 - with the name and age it's going to
211:24 - print this kind of output now python
211:27 - allows us to set the default value of
211:30 - the arguments so after this name you can
211:33 - put
211:34 - equals to symbol and then
211:36 - put the default value whatever you want
211:39 - to set for the name for example if
211:42 - somebody doesn't provide any name
211:45 - then you can just say unknown name
211:49 - similarly we can set the default age
211:51 - here let's say default age is 0 if
211:54 - somebody doesn't provide any
211:57 - age with the student function then the
212:01 - default value will be 0.
212:04 - now instead of using this student
212:07 - function like this let's say i don't
212:09 - provide any
212:11 - argument to this student function and
212:15 - let's run the code and you can see if i
212:18 - don't provide any argument to this
212:20 - student function the default values are
212:23 - taken so the default values are used
212:26 - when you want to make sure that every
212:29 - argument in your function should have
212:32 - some value
212:34 - now let's say i just provide
212:36 - a name here and don't provide
212:39 - the age and let's run the program
212:43 - and now you can see the name is
212:46 - overwritten by the argument what we have
212:49 - provided here right so default value
212:52 - will be this one if no argument is
212:56 - provided similarly if we give the value
212:58 - of age
213:00 - and now we run the program
213:03 - the default age is replaced by the age
213:05 - which is provided using the arguments so
213:09 - this is how you can use default values
213:12 - with the arguments of the function so
213:14 - let me just remove these default values
213:17 - and i'm going to give you the next
213:20 - example which is variable length
213:23 - arguments
213:24 - so let's say with the name and age i
213:27 - want to provide the list of scores
213:31 - which this student has scored for
213:34 - different subjects so as a third
213:36 - argument i'm going to provide a argument
213:39 - called
213:41 - marks
213:42 - and somehow i want to provide a list of
213:45 - marks which is scored by this student
213:48 - and let me print the value of
213:51 - marks
213:52 - using this print function also
213:55 - now in python you can use asterix in
213:58 - front of your argument and this means
214:01 - that you can provide multiple arguments
214:04 - when you use this kind of notation
214:06 - so let's just provide for example we
214:10 - already provided the name and age here
214:12 - and let's provide different marks scored
214:15 - by the student so i can provide 95 for
214:18 - first subject then 70 for second subject
214:22 - then 80 for next subject then 50 for
214:24 - next subject and let's say we don't know
214:27 - how many subjects the student has taken
214:30 - we just have only the information about
214:34 - these four subjects which he has taken
214:38 - so we can provide the four values here
214:41 - and then let's run the code
214:43 - and now you can see name is tom age is
214:47 - 22 and the value of marks is shown as a
214:52 - tuple okay so whenever you provide this
214:55 - asterisk in front of an argument you can
214:58 - provide the values for that argument
215:00 - using normal arguments as you provide
215:03 - for normal argument so first two
215:05 - variables are associated with name and
215:07 - age and all the other variables which
215:10 - you provide here will be assigned to
215:13 - this marks variable because it has this
215:16 - asterisk in front of it so now you can
215:19 - also use a for loop in order to iterate
215:23 - over tuple so x in
215:26 - marks for example
215:28 - and then you can print every value or
215:31 - you can access every value inside this
215:34 - tuple and let me comment this print
215:37 - function
215:38 - and let's run the code once again and
215:40 - you can see
215:42 - for loop has printed all these
215:44 - marks which are there inside the list
215:47 - now if you want to use this type of
215:49 - variable length argument then i will
215:51 - suggest you to use this argument as the
215:54 - last argument of your function so that
215:56 - it will be clearer to the reader of the
215:59 - function that whatever you provide at
216:02 - the end
216:03 - will be the part of this last argument
216:06 - now you may ask that we have provided
216:08 - these marks
216:10 - for this student but for which subject
216:13 - these marks are given to the student
216:17 - now in python you can also use double as
216:20 - tricks in front of your function
216:22 - argument and this means that now you can
216:25 - provide the key value pairs as a marks
216:29 - arguments
216:30 - so instead of using 95 i can also say
216:34 - that 95 is scored in english let's say
216:39 - and then
216:40 - 70 is scored in
216:42 - math and then let's say 80 is scored in
216:46 - physics and the 50 marks is code in
216:51 - biology so now when you use these double
216:54 - asterisks in front of your function
216:57 - argument
216:58 - you can provide these kind of key value
217:01 - pairs which are separated by this equal
217:04 - to symbol and how you can access these
217:07 - values so let's run the code and let's
217:08 - see what happens and now you can see
217:10 - only keys are printed and not the values
217:13 - of
217:14 - these subjects are printed so let's
217:17 - first uncomment this
217:19 - print
217:20 - function
217:21 - and let's see what type of value we are
217:23 - getting so whenever you use these double
217:26 - asterisks the values are given to you in
217:29 - the form of a dictionary okay so if you
217:32 - use
217:33 - single asterisks the values are given to
217:36 - you in the form of tuple but whenever
217:38 - you use these double asterisks and
217:40 - whenever you try to access this variable
217:43 - then this variable will be of type
217:47 - dictionary
217:48 - and you already know how to print the
217:50 - values of dictionary so you can just
217:53 - write marks dot items here
217:56 - and then here you can just write
218:00 - key
218:00 - comma value
218:02 - and then you can print the value of key
218:05 - and value so i'm going to just print key
218:07 - first of all and then i'm going to just
218:10 - give a space here and then i'm going to
218:13 - print the value right and now when we
218:16 - run the code it will give me first of
218:19 - all the key for example english math
218:22 - physics or biology and the value which
218:25 - is 95
218:26 - 70 80 or 50. now before starting our
218:30 - object oriented programming journey in
218:32 - python
218:33 - let's discuss about what is the
218:36 - difference between the procedural
218:38 - programming
218:39 - and the object oriented programming so
218:43 - you will have the better idea why we use
218:46 - object oriented programming now
218:48 - traditional programming languages such
218:51 - as c or pascal
218:53 - were called procedural programming
218:56 - languages or structural programming
218:58 - languages
218:59 - where the basic unit was
219:02 - functions now programming in these type
219:05 - of procedural languages
219:07 - involves
219:08 - choosing a data structure
219:11 - and then designing the algorithm and
219:14 - then translating that algorithm into a
219:18 - code so if this sounds little bit
219:20 - confusing let me try to explain it with
219:23 - an example so let's say you have been
219:26 - given a task to create a program for
219:29 - a passenger who wants to travel
219:32 - from one place to the another place
219:36 - using a cab service so if we think from
219:39 - the point of view of procedural
219:41 - programming what we do in the procedural
219:44 - programming is we create
219:46 - some global data structure which holds
219:50 - the data so here for example we create
219:54 - some kind of data structure which can
219:57 - hold the data for example in case of a
219:59 - cab service
220:01 - which cab service is it or which type of
220:05 - cab is it and at what location this cab
220:08 - is standing all these kind of data we
220:11 - store in a data structure
220:13 - in our global environment now after
220:16 - storing the data
220:18 - we design an algorithm so let's see what
220:22 - kind of algorithm we can develop in the
220:26 - procedural programming language for our
220:28 - cab booking service so this is a pseudo
220:31 - code which i have written so first of
220:33 - all
220:34 - the passenger will open the app from
220:38 - which he can book a cab and then he will
220:41 - book the cab and once the cab is booked
220:44 - he will wait for the cab
220:46 - and then once cab arrives he will sit in
220:50 - the cab and then he will reach to his or
220:53 - her destination and at the end he will
220:56 - pay the fare of the cab and this is the
220:59 - pseudo code of that algorithm and then
221:02 - we will translate this algorithm into
221:05 - actual code in procedural programming
221:08 - language now in these type of procedural
221:10 - programming languages we concentrate on
221:14 - creating the functions and the major
221:16 - drawback of
221:18 - using these functions is
221:21 - that data and operations on the data are
221:24 - separated that means we need a
221:27 - methodology
221:28 - to send this data
221:31 - to these functions so here we need to
221:35 - send this data which we have saved
221:37 - globally
221:38 - into these functions and these functions
221:41 - take this data either as argument or as
221:44 - a global variable and then perform some
221:47 - actions on this data and give you some
221:51 - result now these kind of functions are
221:53 - passive what do i mean by passive here
221:56 - that is
221:57 - these kind of function cannot hold any
222:00 - information inside them so once you give
222:04 - the data they are able to give you the
222:06 - result back after performing some
222:09 - operations
222:10 - but they cannot save or hold the state
222:14 - or the data so that if you want to use
222:18 - that data in some other place in your
222:20 - code then it will be very difficult
222:23 - using these kind of functions which you
222:25 - use in procedural programming now let's
222:28 - look at the object oriented approach of
222:32 - doing things so in object oriented
222:35 - programming languages like c plus plus
222:37 - or java or python
222:40 - the basic unit is class now if we take
222:43 - the same example of a passenger who
222:47 - wants to travel from one place to
222:50 - another using a cab service using object
222:53 - oriented programming thinking
222:55 - which depends upon the creation of
222:58 - object we can create different kind of
223:01 - object for example for a cab we can
223:05 - create a class called cab and then we
223:08 - can create a class for cab driver and
223:11 - the third class we can create for a
223:14 - passenger okay so a class you can create
223:17 - for any real life object it can be a car
223:20 - it can be a motorbike it can be a book
223:23 - or employee or a person so object
223:26 - oriented programming allows us to create
223:29 - object so first of all what is a class
223:32 - so a class refers to a blueprint in
223:35 - which we can have
223:37 - data
223:38 - and methods okay
223:41 - so for example for our cab class what
223:44 - attributes this cab class can have for
223:48 - example a cab service which cab service
223:50 - we want to take
223:52 - what is the make of the cab it is it a
223:55 - toyota or a bmw or a volkswagen cab at
224:00 - which location this cab is right now
224:03 - what is the number plate of that cab so
224:05 - the passenger can recognize this cab so
224:09 - all these things which i have written
224:12 - here
224:13 - are called data because they can hold
224:17 - some kind of data number plate has
224:19 - number plate data location have
224:22 - geolocation data make have
224:24 - the make data cab service can have data
224:28 - like uber or any other cab service and
224:31 - the other thing which a class can have
224:34 - are called method so earlier we have
224:37 - seen that we can create functions and
224:39 - when these functions you use inside a
224:42 - class they are called method okay so
224:46 - functions inside a class are called
224:49 - method now the data inside this object
224:52 - or class is called attributes
224:55 - or the member variables which can hold
224:59 - some data and using this class we can
225:02 - create
225:03 - object of the cab class which means we
225:08 - can create different object using a same
225:11 - class and how to create object using
225:14 - classes we will see in the next video in
225:17 - the real life example so don't worry if
225:20 - you don't understand how these things
225:22 - works i will give you a real life
225:24 - example so you will be able to
225:26 - understand in a better way now what is
225:29 - an object
225:30 - an object is a software unit that
225:33 - combines data and methods okay so we
225:37 - have this data here and then we have the
225:40 - methods inside the class
225:42 - and object is able to combined both of
225:46 - them which is data with the methods now
225:49 - these objects for example a cab object
225:52 - and the passenger object can exchange
225:55 - the data between them also so data is
225:59 - interchangeable between for example the
226:02 - passenger object and a cab object so
226:07 - let's rewind once again what we have
226:09 - learned about object oriented
226:11 - programming
226:12 - so the basic unit in object oriented
226:15 - programming is a class and a class
226:18 - refers to a blueprint which can have the
226:22 - data
226:23 - and methods
226:25 - now using a class we can create objects
226:29 - and what is an object
226:30 - object is an instance of a class and
226:34 - each object can have its own data and
226:38 - method and an object is able to store
226:41 - the state of some kind so at which
226:44 - location this cab is right now so this
226:48 - is a state and an object is able to
226:51 - store that state now in procedural
226:53 - programming if you remember there is no
226:56 - relation between the data and the method
226:59 - right we need to provide the data to the
227:02 - method which are separate entities in
227:05 - the procedural programming language now
227:07 - these data members are called attributes
227:11 - or member variables
227:13 - and these functions which you define
227:15 - inside a class are called methods and
227:19 - what are some of the key differences
227:20 - between procedural programming language
227:23 - and object oriented programming language
227:26 - the first is the unit in procedural
227:28 - programming languages function
227:30 - and on the other hand in
227:32 - object-oriented programming the unit is
227:34 - class the second is the procedural
227:37 - programming concentrate on creating
227:39 - functions
227:41 - while object-oriented programming starts
227:44 - from isolating classes
227:46 - and then
227:47 - they can have data and methods inside it
227:52 - in procedural programming language the
227:54 - data and the functions are separate and
227:57 - in object oriented programming language
228:00 - data and methods are not separate they
228:02 - are the part of a single object of a
228:06 - class now if all this seems to be little
228:09 - confusing to you don't worry you are not
228:13 - alone and i will try to solve this
228:16 - confusion in the next video
228:19 - in which i will tell you how to create
228:21 - the classes and how to use classes in
228:25 - python in this video i am going to show
228:27 - you how you can create your first class
228:30 - in python
228:31 - now if you haven't seen my last video in
228:34 - which i have discussed
228:36 - what is object oriented programming and
228:39 - what are classes i will highly recommend
228:42 - you to watch that video because this
228:44 - will be a continuation of that video
228:48 - so let's create a class in python
228:52 - so for that i will create a new project
228:54 - so let's create a new project in pycharm
228:57 - so just click on file here and then
229:00 - click on new project
229:01 - and then the project name i'm going to
229:04 - give here is oops
229:06 - and then
229:07 - i will just click on create
229:09 - and i will
229:10 - choose this option which says open in
229:13 - current window and also this option
229:15 - which is added to currently opened
229:18 - project which is going to create this
229:20 - project in this window itself which is
229:23 - already open
229:24 - so now you can see we have our empty
229:27 - project here
229:28 - and inside this project let's create a
229:31 - python file so right click on the
229:33 - project and then new and then we are
229:35 - going to create a new file and let's
229:38 - create a class called car so i'm going
229:41 - to name
229:43 - the file name as car because we are
229:45 - going to create the car class
229:49 - now in order to create a class in python
229:52 - you use a keyword
229:54 - class
229:56 - and then you give the name to your class
229:59 - so the class name in our case is car and
230:02 - then you give this colon
230:05 - and for example i write here a keyword
230:09 - called pass
230:11 - now when you write
230:12 - this keyword after the declaration of a
230:15 - class
230:16 - this means that it is a empty class you
230:20 - can also use this pass keyword to create
230:24 - an empty method so this keyword pass is
230:27 - used to create an empty class or an
230:31 - empty method now here after the class
230:34 - declaration
230:35 - let's see how we can create an instance
230:38 - of a class so it's really easy to create
230:40 - an instance of a class so let's create a
230:42 - first object and i'm going to name it as
230:45 - ford which is a car brand and then you
230:48 - use your car
230:50 - class name and use these parentheses
230:53 - here okay
230:55 - so this here ford is an object
230:59 - or you can also say it's an instance of
231:02 - the class car in a similar way we can
231:05 - create multiple objects for example
231:08 - honda is another car brand and you can
231:13 - create the honda object using this class
231:17 - car once again you can create a new
231:19 - object for example audi and then you can
231:22 - once again use this car class to create
231:26 - this object
231:27 - so what we have done till now we have
231:30 - created three object from the class car
231:34 - now in the previous video i have told
231:36 - you that you can associate some data
231:39 - with your object so let's associate some
231:43 - data so for example
231:44 - ford we can associate
231:47 - uh attribute called speed right so we
231:50 - can assign the speed for example 200
231:55 - here
231:56 - for
231:57 - honda we can assign
232:00 - speed
232:01 - let's say 220 and for
232:03 - audi we can assign the speed let's say
232:07 - 250 so speed here is called the
232:10 - attribute and whenever you create an
232:12 - empty class using this pass keyword
232:15 - you can add these attributes on the fly
232:19 - so you can see we have added
232:22 - these attribute after the declaration of
232:25 - the class
232:27 - and after the creation of the objects
232:30 - let's add some more attribute to these
232:33 - instances or the object so a car can
232:36 - have the color so i'm going to just
232:39 - write color
232:41 - and the food has let's say the red color
232:45 - and let me just copy and paste here and
232:49 - let's say the honda
232:51 - have the
232:53 - blue color
232:54 - and we have the
232:57 - audi of
232:58 - black color so once again color is an
233:01 - attribute here
233:03 - now if you want to print these attribute
233:05 - you can use this print method and then
233:08 - for example we want to print the speed
233:11 - off ford
233:12 - and
233:13 - the color of ford
233:16 - then we can do it like this and let's
233:18 - run the code so in order to run this
233:21 - code first of all when you create a new
233:23 - project and the new
233:25 - python file you need to right click on
233:28 - this file and then
233:30 - click on run the file name whatever is
233:33 - your file name my file name was car so
233:35 - you can see now
233:37 - the
233:38 - result is printed here first is the
233:40 - speed and second is the color of an
233:44 - instance ford similarly you can print
233:47 - the color and speed of honda and audi
233:51 - objects also now if you want to change
233:53 - some attribute it's also possible
233:56 - so let's say i want to change the speed
234:00 - of ford object so i'm going to use ford
234:03 - dot speed once again and this time i
234:06 - want to assign 300 speed to this
234:10 - attribute let's say we also want to
234:12 - change the color of
234:15 - the ford object so i'm going to just use
234:17 - four dot color
234:19 - and this time i want to
234:21 - use the
234:22 - color blue here and let's once again we
234:25 - will try to print
234:28 - the color and speed of the object ford
234:31 - and now
234:32 - you can see this result so before the
234:35 - speed was 200 and the new speed is 300
234:38 - for the object ford
234:40 - and before the color was red and the new
234:43 - color is blue for this object ford now
234:46 - if you have followed the last video
234:49 - this speed and color is the data so
234:52 - speed and color are the variables which
234:54 - holds some data inside them but still we
234:58 - haven't added any behavior or methods to
235:02 - our class car and that we will do in the
235:06 - next video now let's create a new class
235:09 - because
235:10 - understanding classes in any language is
235:14 - difficult so let me give you another
235:16 - example
235:18 - so this time i'm going to create a new
235:19 - python class and i'm going to name this
235:22 - python class as a rectangle
235:26 - and then press ok which is going to
235:28 - create this class
235:30 - and to create a class you already know
235:32 - you use the keyword and the name of the
235:34 - class and then the colon
235:37 - and we will also make this class
235:40 - an empty class using this pass keyword
235:43 - and in order to create an instance i'm
235:45 - going to just
235:46 - write
235:48 - rect 1 which is the first object using
235:52 - the rectangle class
235:54 - and then i'm going to create
235:56 - rect 2 which is the second object using
236:00 - this rectangle class
236:02 - and now
236:03 - what are the attributes which we can
236:05 - relate to the rectangle a rectangle have
236:09 - a width
236:10 - and the height so let's add the width
236:13 - and height so let me use the first
236:16 - object and let's say height is 20 for
236:19 - the rectangle 1
236:21 - and then we are going to
236:23 - use the second object and once again we
236:26 - are going to
236:27 - add the height for the second rectangle
236:31 - let's say the height of second rectangle
236:33 - is 30.
236:34 - similarly we can add the width
236:37 - to the rectangle so width is equal to
236:40 - let's say it's 40
236:43 - and
236:44 - rect 2
236:45 - object have the width let's say 10. so
236:49 - what we have done here we have created a
236:51 - rectangle class
236:53 - and then we have created two instances
236:56 - of the rectangle class rect one and rect
236:59 - two which are also called objects
237:02 - and then we have added some attributes
237:05 - to our objects which are height and
237:08 - width now let's say you want to
237:10 - calculate the area of these two
237:13 - rectangles i can use the print method
237:16 - and then what is the area of the
237:18 - rectangle it's the multiplication of the
237:21 - height and the
237:23 - width right so i can use
237:26 - this
237:26 - rectangle one object and then i can call
237:31 - the height and width of this object and
237:34 - this will give me
237:36 - the
237:37 - area of the rectangle 1 using this
237:40 - multiplication operator similarly i will
237:44 - do the same for
237:45 - the object 2 here and let's run the code
237:49 - and if you remember what we need to do
237:51 - if we create a new python file we need
237:53 - to right click
237:55 - on the file and then
237:57 - click on run right so once
238:00 - the file is running you can choose from
238:03 - here which file you want to run but at
238:05 - least once you need to right click on
238:08 - the file and
238:09 - just click on run whatever file name you
238:12 - have so you can see the area of
238:14 - rectangle 1 is 800 and the area of
238:18 - rectangle 2 is 300. so this is how you
238:21 - can create a very simple class in python
238:24 - in this video i'm going to show you how
238:26 - to use init method in python and how to
238:30 - use a keyword called self in python
238:34 - so i will continue with the class which
238:36 - i have created in the last video
238:39 - and this was the class which we have
238:41 - created and we have used this special
238:43 - keyword pass there
238:46 - and pass we were using to create an
238:49 - empty class
238:50 - now i'm going to remove this pass
238:53 - and i'm going to add a method called
238:57 - init here so i'm going to just write def
239:00 - and then underscore underscore
239:02 - init
239:04 - and then press enter
239:05 - and you can see this init method is
239:08 - created here
239:10 - so this is like a normal method with
239:13 - double underscore in front and back of
239:16 - this init keyword
239:18 - and you will also see the self
239:20 - keyword is already added
239:23 - as the first argument of this method
239:27 - now this init method
239:29 - serves as a constructor for the class so
239:33 - usually it is used to initialize some
239:37 - attributes or some functions because
239:41 - this is the first method which will be
239:43 - called when you create an instance of a
239:47 - class so here we are creating an
239:50 - instance of a class and this init method
239:53 - will be the first method
239:55 - which will be called when this
239:58 - object or instance will be created so
240:01 - let's check what i'm saying so let's say
240:03 - i want to print inside this init method
240:06 - that the
240:08 - underscore underscore
240:10 - init underscore underscore is
240:13 - called
240:14 - and let me run this code so i will
240:16 - change this to car and then run this
240:19 - code and now when i see this result
240:22 - you will see
240:24 - this line is called three times because
240:27 - we have created three instance from the
240:30 - same class okay so every time this
240:33 - instance is created
240:35 - this print is called and that's why
240:39 - this line is printed three times and
240:42 - everything else will be printed after
240:45 - that whatever we were printing for
240:47 - example speed or color of the car will
240:49 - be printed after that now one important
240:52 - thing to notice here is i said init
240:56 - serves as a constructor it's not a
240:59 - constructor although it would be
241:02 - tempting to call this init method as a
241:04 - constructor actually it's not a
241:07 - constructor
241:08 - but it behaves like a constructor
241:11 - because init is the closest thing we are
241:15 - going to get in python to a constructor
241:18 - because it is the first method which is
241:21 - called whenever an instance is created
241:25 - now if you are familiar with other
241:27 - object oriented programming languages
241:29 - like java
241:30 - and c plus plus
241:32 - there is a destructor also in those kind
241:35 - of languages with classes
241:38 - now python doesn't have any destructor
241:42 - because python has
241:43 - an automatic garbage collections so you
241:46 - don't need a destructor in python
241:49 - because python will take care of
241:51 - anything which should be taken care of
241:54 - now as i said usually init method is
241:57 - used to initialize something so instead
242:00 - of initializing the value of speed
242:03 - and initializing the value of color
242:07 - let me just comment this code first of
242:10 - all so i'm going to select whatever i
242:12 - want to comment and then i can press
242:14 - ctrl forward slash to comment all the
242:17 - line you can also go to code and then
242:21 - use this option which says comment with
242:24 - line comment and you can see the
242:25 - shortcut for that control plus forward
242:28 - slash okay so this is going to comment
242:31 - your lines of code and now i want to use
242:35 - the speed as the initialization value so
242:38 - after the self keyword i can give the
242:42 - next
242:43 - parameter which is speed here
242:46 - and then the third parameter is the
242:49 - color here and now to print the value of
242:52 - speed and color i can use once again
242:55 - print and then first of all i'm going to
242:57 - print the speed and then i'm going to
243:00 - print the
243:02 - color attribute
243:04 - and as soon as you do this and when you
243:06 - try to run this program it will give you
243:09 - an error so let me run the program and
243:11 - it will give me the error it says init
243:14 - missing to required positional argument
243:18 - which is speed and color okay so once
243:22 - you create an init method and provide
243:25 - any arguments other than self self is
243:29 - automatically provided by python
243:32 - whenever you create an instance of a
243:35 - class but other than self when you write
243:38 - for example speed and color arguments
243:41 - here you need to provide those argument
243:44 - at the initialization of your class
243:48 - so here first we will give the speed
243:51 - inside these parentheses for example 200
243:54 - and then the color for example
243:57 - red here okay
243:59 - same we need to do
244:01 - for the other two instantiation of the
244:05 - car class so let me
244:07 - do it for the second
244:09 - instance and also for the
244:12 - third instance and now let's run the
244:15 - code once again and let's see what
244:17 - happens so now you can see everything
244:21 - works fine and no error is given to us
244:25 - and you will also see because
244:27 - this print is called first
244:30 - you can see the speed is printed first
244:33 - and then the color
244:34 - and then this line is printed after that
244:37 - and that means we will get the speed
244:40 - color and this line three times for
244:43 - every instance with different values
244:47 - whatever values you have provided for
244:49 - the instantiation of your car class now
244:52 - usually you provide these arguments
244:55 - because you want to initialize the value
244:58 - of speed
244:59 - so let's try to access the value of
245:02 - the ford object speed and color so let
245:06 - me just uncomment this code and let's
245:08 - run this code and it will give us an
245:11 - error you can see this says that car
245:14 - object has no attribute called speed
245:17 - right so what is the error because
245:20 - we have provided these attribute speed
245:24 - and color but we haven't assigned these
245:26 - values to any attribute inside this car
245:30 - class earlier what we have done is we
245:33 - have assigned
245:35 - the speed value to a speed attribute and
245:38 - the color value to the color attribute
245:40 - but we have already commented those
245:43 - codes so how can we assign the speed and
245:45 - color to the car object
245:49 - so it turns out that you can use the
245:51 - self keyword
245:53 - and then using the self keyword you can
245:55 - assign the value to the current object
245:58 - so self is essentially the current
246:01 - object okay it's similar to using this
246:05 - in c plus plus or java if you're
246:08 - familiar with those two languages
246:10 - so you use self dot and then the name of
246:13 - the attribute for example speed in our
246:16 - case is equal to whatever argument you
246:19 - provide for speed so we have provided
246:21 - the same argument which is speed is
246:23 - itself
246:24 - once again i can use self
246:27 - to set the value of
246:29 - color here so
246:31 - self.color is equal to color let me
246:33 - remove this semicolon because it's not
246:35 - required
246:37 - and now when i run this code
246:39 - you will see
246:41 - that there is no error now so because we
246:44 - have now
246:45 - used the self keyword to set the
246:48 - attributes of speed and color so we can
246:51 - easily access the values of the speed
246:54 - and color using any object of the car
246:56 - class so let me once again minimize this
246:59 - so now let's talk about
247:01 - the self keyword here so whenever you
247:04 - create a class the first argument of
247:07 - every method
247:08 - you need to provide this keyword
247:10 - yourself now it's not necessary to
247:13 - provide this same keyword which itself
247:16 - but it's a convention to write this self
247:19 - as the first parameter the first
247:21 - parameter
247:22 - can be for example abc it doesn't matter
247:25 - but you need to use this abc here also
247:29 - as self and it will be totally fine but
247:32 - it's a convention that we use
247:35 - the self keyword in order to indicate
247:38 - that this is the current object so every
247:41 - method you will create you need to give
247:44 - this self keyword as the first argument
247:47 - of your method inside a class now you
247:50 - may also observe that here when i am
247:53 - initializing this class instance i'm not
247:56 - providing any self keyword so even
247:59 - though in the init method i have
248:01 - provided three
248:03 - arguments i'm only providing two
248:05 - arguments here so it turns out that you
248:07 - don't need to provide the first argument
248:10 - which is self it will be automatically
248:13 - be provided to your class so you just
248:16 - need to give the next argument whatever
248:20 - argument you give after the cell so we
248:22 - have given speed and color after the
248:25 - self argument so we just need to provide
248:27 - those arguments after whatever you use
248:30 - after this keyword called self so let's
248:33 - do the same thing with our second class
248:35 - which is the rectangle class and here
248:38 - also we have created this empty class so
248:41 - let's remove this pass keyword and
248:43 - instead of this pass keyword we will use
248:46 - this init method which is def underscore
248:50 - underscore init underscore underscore
248:52 - and here after the self we will provide
248:56 - the height
248:57 - as the second argument
248:59 - and the width
249:01 - as the third argument okay
249:04 - and then we are going to initialize the
249:07 - attributes height and width using this
249:10 - self keyword so self dot height
249:13 - is equal to
249:15 - height self dot width
249:18 - is equal to width okay so this is how
249:21 - you can initialize your attribute using
249:24 - this init method and now when you do
249:28 - this you don't need to
249:30 - initialize these values like this you
249:33 - can directly
249:34 - initialize this height and width using
249:37 - these parentheses let me provide these
249:40 - values let's say 20 and 60 for the first
249:44 - rectangle and let's say 50
249:47 - and 40 for the second rectangle and when
249:50 - we run this code let me just change the
249:53 - file here and then run the code and you
249:56 - will see it will print the area once
249:58 - again here so this init method is used
250:02 - to initialize your attributes or
250:05 - whatever you want to initialize at the
250:07 - start of your class you will do all
250:11 - those initializations inside this init
250:15 - method so this is how you can use init
250:17 - method and self keyword in python in
250:20 - this video also we will discuss more
250:22 - about init method and the self keyword
250:26 - so let's get started so here i have a
250:28 - very simple class called hello and in
250:31 - this class i have a method called init
250:34 - and i'm just instantiating this class
250:37 - and creating an object out of this hello
250:40 - class
250:41 - now the first question which may arise
250:43 - is what if i don't want to use this self
250:47 - keyword
250:49 - you can see directly that there is a red
250:51 - squiggly line appears here which means
250:54 - an error and this we can also see when
250:57 - we run the program so when we run the
250:59 - program it's going to give us this error
251:02 - which says init takes zero arguments
251:05 - but given one
251:07 - now you may ask why it's saying that
251:10 - we have given one argument to the
251:13 - initialization of this hello class
251:15 - so as i said in the last video that self
251:18 - is automatically passed when you
251:21 - initialize a class and that's why it
251:23 - says that one argument is given but init
251:28 - takes zero argument because here we
251:30 - haven't given any argument inside these
251:34 - parentheses so self is absolutely
251:38 - important so you need to give the self
251:41 - now the second question you may ask is
251:43 - can i create
251:44 - multiple init method inside a class so
251:47 - let's see if it's possible or not so
251:50 - here i'm going to give this pass keyword
251:53 - which means that this init method is an
251:56 - empty method and let me create a second
251:59 - init method and this time i want to add
252:03 - one more parameter here let's say
252:06 - name
252:07 - okay so we have provided two init
252:10 - methods here
252:11 - and let's see what happens
252:13 - so this is the instantiation of class
252:15 - where i haven't given any argument to
252:19 - this instantiation so i'm going to run
252:22 - the program and what it says
252:24 - it says init missing one required
252:28 - positional argument which is name so it
252:31 - turns out that it's not possible to
252:35 - provide multiple init methods in your
252:39 - python class
252:41 - if you provide multiple init method in
252:44 - your python class the init method which
252:46 - you define at last will be considered as
252:50 - the main init method and other will be
252:54 - overwritten okay so whatever init method
252:58 - you define at last
253:00 - that signature of init method will be
253:03 - valid and all the other init method
253:06 - which you will create will be
253:08 - overwritten by the last init method okay
253:11 - so let's provide the argument name here
253:14 - so i'm going to
253:16 - just provide one argument here and then
253:18 - run this code and it works perfectly
253:22 - fine okay let me just reverse this order
253:25 - so instead of using this init at the top
253:29 - i will use the init which doesn't take
253:31 - any parameter at the bottom now okay and
253:35 - we provide this argument and let's run
253:38 - the code and now
253:41 - once again we get the error which says
253:44 - init takes one positional argument but
253:47 - two were provided so one positional
253:50 - argument means
253:51 - that this init only takes the self
253:54 - argument and nothing else but here
253:57 - self is provided automatically but we
254:00 - are providing an extra parameter here
254:03 - which is not required and that means
254:06 - this in it which we have defined
254:08 - later is valid and this previous init is
254:12 - not valid so always remember it's not
254:15 - allowed to use multiple init method in
254:19 - the python class but if you do this the
254:22 - last init method will be a valid init
254:25 - method and all the other init method
254:28 - will be the invalid init method now one
254:31 - more question you may ask here
254:34 - what if i want to create both kind of
254:36 - instances one which takes
254:39 - no argument here and other which takes
254:43 - one argument or multiple arguments here
254:46 - so the answer is in my previous video in
254:49 - which i have shown you how to provide
254:52 - default value to your arguments so let's
254:56 - say i provide a default value to my
254:58 - argument here
255:00 - now i will create two
255:03 - instances of the same class one takes
255:08 - no argument and other takes one argument
255:10 - and when i run this code no error
255:13 - appears here okay so if you want to
255:16 - create a init method with multiple
255:18 - parameters you can either use this
255:21 - default value for your init method
255:25 - parameters or what you can do here is
255:28 - you can use this parameter which takes a
255:30 - tuple so in the previous video we have
255:33 - seen that we can provide an argument
255:37 - with asterisks in front of it and this
255:40 - means that we can provide multiple
255:42 - parameters to our method here and when
255:46 - we run the code it's also valid we can
255:49 - also provide multiple parameters here
255:52 - and it will also be totally valid so i
255:56 - am going to run the program once again
255:58 - and you can see it's totally valid so if
256:00 - you want to provide multiple parameters
256:02 - to your
256:04 - init method you can use this kind of
256:06 - notation or you can provide the default
256:09 - value to your
256:11 - parameter or the last thing you can use
256:13 - is you can use for example
256:17 - this type of argument which takes the
256:19 - keyword so kw
256:21 - args here okay and this also we have
256:25 - seen whenever you use this kind of
256:27 - notation
256:28 - that means you want to provide the
256:30 - dictionary right key value pair so let
256:33 - me provide some kind of key value pair
256:36 - let's say
256:37 - name
256:38 - is equal to some kind of name here
256:41 - and then let me run the code and it's
256:43 - totally valid it doesn't give us any
256:45 - error so even though multiple init
256:47 - methods are not allowed in python you
256:50 - can use these type of notations in order
256:53 - to give variable length argument in your
256:57 - init method now let me just remove all
257:00 - the parameters from here and this
257:02 - instantiation from here also
257:05 - and let's take the next question
257:08 - so let's say i want to remove this pass
257:11 - keyword from here
257:13 - and here i want to initialize some
257:16 - values so self
257:18 - dot name
257:20 - is equal to let's say we will provide
257:22 - some name so i'm going to provide a
257:25 - argument called name and
257:28 - self.name is equal to name here
257:31 - and then let's say self dot age here and
257:35 - we provide some value which is not taken
257:38 - from
257:40 - the argument but we provide some static
257:42 - value here is it allowed
257:45 - yes it's totally allowed right so if you
257:48 - want to provide some default value
257:51 - for your attribute you can absolutely
257:53 - provide that without even
257:56 - passing it as an argument so it's not
257:58 - necessary that all the attribute values
258:02 - you need to provide from
258:04 - this argument list you can provide any
258:06 - default or static value here which is
258:09 - not coming as an argument so i hope that
258:12 - clarifies some more details about this
258:14 - init method in this video we will learn
258:17 - how to use encapsulation in python
258:20 - encapsulation is one of the most
258:23 - important principle in object oriented
258:26 - programming so let's get started i will
258:28 - be using this car class and the
258:30 - rectangle class which we have been using
258:33 - in the previous videos also
258:35 - and let me remove these print statements
258:39 - because
258:40 - we don't want them right now now let's
258:42 - say we want to change the value of speed
258:45 - so if you want to change the value of
258:47 - speed you can simply take your object
258:51 - for example ford dot your attribute name
258:54 - for example speed and then you can
258:56 - directly change it for example 300 and
258:59 - when i run the program it's going to
259:02 - print the new speed which is 300
259:04 - initially we have set the speed to 200
259:07 - in here we can also put let's say the
259:10 - speed as string which is very stupid but
259:14 - will it work it works you can see here
259:16 - and this can break the function in which
259:18 - the speed is used so therefore it is
259:21 - very important that we protect our data
259:25 - and only give the access
259:27 - to our data to the other users so
259:30 - encapsulation is particularly important
259:33 - when you want to give
259:35 - your code to some other people because
259:38 - they might want to change your code so
259:40 - let's see how we can encapsulate our
259:43 - code so to encapsulate our code we
259:45 - create functions so let's create a first
259:48 - function which is to set the value of
259:51 - speed so i'm going to just say set
259:54 - underscore
259:55 - speed and inside the parentheses it's
259:58 - going to take self as the first argument
260:00 - which is the default and second is the
260:04 - value of speed so so i can say
260:07 - value here right and then once we have
260:10 - the value of speed we can just call self
260:13 - dot speed
260:15 - is equal to value similarly we can
260:19 - create a get method for the speed so
260:22 - right now we have created the set method
260:24 - to set the speed and now we are going to
260:27 - create a get method to get the speed and
260:31 - in order to get the speed we don't need
260:34 - to pass any argument we just need to
260:37 - return this speed which is already set
260:40 - so we can just write return and then
260:43 - self dot speed so we have created two
260:45 - functions set and get these are also
260:48 - called setter and getter for
260:51 - the attribute which is speed in our case
260:54 - so let's use these functions instead of
260:57 - this kind of setting of data so first of
260:59 - all i'm going to call this ford object
261:03 - dot
261:04 - set speed method out of this object and
261:07 - then i'm going to pass the new speed
261:09 - using this set method now in order to
261:11 - get the speed i can write instead of
261:14 - this forward dot speed i can just write
261:16 - the 4 dot
261:18 - get speed which is going to give me the
261:21 - speed of this forward object so i'm
261:24 - going to run the code and you can see it
261:27 - prints the speed which we have set using
261:30 - the set method but still will this
261:33 - protect your data let's see so i'm going
261:36 - to once again try to use
261:39 - ford dot speed
261:41 - and then i will try to set the new value
261:44 - of speed
261:46 - will it be a problem no so you can see
261:49 - when i try to get the speed the new
261:51 - speed is set and we want to prevent this
261:54 - kind of setting of data using this
261:57 - equals to symbol so we need to somehow
262:01 - make our attribute private
262:04 - now if you are familiar with other
262:06 - object oriented programming languages
262:09 - like java or c plus plus they use the
262:11 - keywords like public private or
262:15 - protected in order to mark their
262:17 - attributes or the member variables as
262:20 - the private or public or protected but
262:23 - python doesn't have any of these
262:26 - keywords so how we can make our data
262:29 - private so let me give you first of all
262:31 - an example so i'm going to go to
262:34 - this class which is hello
262:36 - and here i'm going to set some values so
262:39 - first value is for example self
262:42 - dot
262:43 - a
262:44 - is equal to 10
262:46 - second value is self
262:48 - dot underscore b
262:51 - is equal to 20
262:53 - and the third value is self
262:55 - dot
262:56 - underscore underscore c
262:59 - is equal to 30 so we have created three
263:02 - member variables in this hello class one
263:05 - is a
263:06 - second is underscore b
263:09 - and the c is with two underscores in
263:12 - front of it and let's try to access all
263:15 - these three values so i'm going to just
263:18 - use the print method and then
263:20 - the hello object dot a
263:23 - and similarly i will use this print to
263:27 - get the value of
263:29 - dot underscore
263:31 - b
263:32 - and
263:33 - also
263:34 - dot underscore underscore
263:36 - c and let's try to run this program and
263:39 - let's see what happens and you can see
263:41 - here the first value which is printed
263:43 - here is 10 which is the value inside the
263:46 - a variable so this code was executed
263:48 - successfully now we can see here that 20
263:52 - is also printed that means this code is
263:54 - also executed successfully but at the
263:58 - time of underscore underscore c when we
264:01 - want to
264:02 - use this underscore underscore c outside
264:06 - the class it says hello object has no
264:10 - attribute called underscore underscore c
264:13 - and this is the point so underscore
264:16 - underscore you can use to make your
264:19 - attribute private okay so this is a
264:22 - convention there is no keywords like
264:25 - private in python that's why python uses
264:28 - this kind of convention in which
264:31 - whenever you use double underscores it
264:34 - makes your data private when you use
264:37 - single underscore that also means that
264:39 - it's a private variable but this is only
264:42 - a convention nothing stops you to change
264:44 - the value of underscore b or accessing
264:48 - the value of underscore b okay so if you
264:51 - truly want to make your data private
264:54 - then use double underscore in front of
264:58 - your variable when you use single
265:00 - underscore that means it's a partially
265:03 - private variable and it's only a
265:06 - convention okay so let's go to our car
265:10 - class once again and now we know that we
265:13 - can add double underscore in front of
265:17 - our variable name so we have two
265:19 - variables here one is speed so let's add
265:22 - double list underscore in front of speed
265:25 - and also let's add double underscore in
265:27 - front of this color variable to make
265:30 - both of them private so i'm going to
265:32 - change this value of speed
265:34 - in getter and setter also and now let's
265:37 - try to access this value using
265:40 - this ford object which is underscore
265:42 - underscore speed now let's try to run
265:44 - our program so i'm going to change the
265:46 - file and then run our program
265:48 - and you will see that it's going to give
265:50 - us an error and this error says the car
265:53 - object has no attribute called color
265:56 - because this variable color is private
265:59 - now also you will observe that the value
266:03 - of the speed is 300 which is set by this
266:07 - set function even though we have set the
266:11 - speed again to 400 using this underscore
266:14 - underscore speed but this speed is not
266:18 - changed right so we cannot change the
266:20 - speed using this underscore underscore
266:23 - variable because now it's a private
266:26 - variable and that means we cannot change
266:28 - the value using this variable we need to
266:32 - use
266:33 - this set function in order to change the
266:35 - value of the speed also if you want to
266:39 - use this underscore underscore
266:41 - color here and let's run the code this
266:43 - will also give you an error because this
266:46 - underscore underscore color is private
266:48 - so either you can remove this code or
266:52 - you can create the setter and get a
266:54 - method for the color also so let's
266:57 - create the setter and get a method for
266:59 - the color
267:04 - and now we can access the value of color
267:06 - using the get color method right so
267:10 - instead of this get speed we can just
267:12 - write 4 dot get color and it's going to
267:16 - give us the value of color and now you
267:19 - can see
267:20 - that there is no error and the speed
267:22 - here is 300 which we have set using the
267:25 - set speed method and the color is red
267:29 - which is the color we have given using
267:31 - this argument in the constructor and
267:34 - this type of restricting your data
267:36 - access
267:37 - using functions is called encapsulation
267:41 - let's do the same thing with our
267:43 - rectangle class also and let's create
267:46 - the setter and get a method inside the
267:48 - rectangle class so you already know we
267:51 - can use this define
267:54 - and then we can first of all
267:57 - set for example set the height first of
267:59 - all and then we can give the value of
268:02 - height here and then self
268:05 - dot
268:06 - height
268:07 - is equal to
268:09 - height right and don't forget you need
268:11 - to give double underscore in front of
268:14 - your attributes in order to make them
268:17 - private so i'm going to
268:19 - do just that
268:21 - and let's create the get height method
268:23 - also
268:28 - so now we have created the setter and
268:30 - getter for the height and let's do the
268:33 - same
268:34 - for the width also
268:40 - so now you have made the height and
268:42 - width as private and we have created
268:45 - setter and getter for the height and
268:47 - width and now in order to calculate the
268:49 - area we can define one more method here
268:52 - which is the area method so let's create
268:54 - the area method here and this area
268:57 - method is not going to take any argument
268:59 - we are just going to return the
269:01 - multiplication of the height so self dot
269:05 - height
269:06 - multiplied by
269:08 - self dot underscore underscore width
269:11 - okay which will give us the area of this
269:14 - rectangle and we can call this area
269:16 - method instead of using this kind of
269:19 - notation so rect 1 dot
269:22 - area
269:23 - and rect 2
269:26 - dot area also let's run the code by
269:30 - changing the file name here and run this
269:33 - code
269:34 - and you can see the area is printed now
269:36 - so this is how you can use encapsulation
269:39 - in python in the last video we have seen
269:41 - how to use encapsulation in python
269:45 - and we have also seen how we can declare
269:47 - private member variables in python
269:50 - to declare a private member variable we
269:53 - use double
269:55 - underscore in front of your variable
269:58 - name
269:58 - and this variable becomes private
270:01 - but the question is what exactly is a
270:04 - private member variable
270:07 - so a private member variable is private
270:10 - to the class that means you can use this
270:13 - private member variable inside the class
270:17 - but as soon as you use it or access it
270:22 - outside the class it will give you an
270:24 - error so you cannot access a private
270:27 - member variable outside a class and the
270:31 - example we have already seen so here you
270:33 - can see i try to access this private
270:35 - member variable outside the class and
270:38 - when i run the code it says that there
270:42 - is
270:43 - no
270:43 - underscore underscore c attribute for
270:47 - this hello
270:48 - object
270:49 - why because whenever you create an
270:52 - instance and if the member variable is
270:55 - private this private member variable is
270:58 - invisible to your object so you cannot
271:02 - access the private member variable
271:04 - outside the class but can we use this
271:08 - private member variable inside the class
271:11 - let's see
271:12 - so i'm going to declare one more method
271:15 - here and i'm going to name it as public
271:18 - underscore
271:20 - method
271:21 - and this doesn't take any argument
271:24 - but what we have learned about the
271:26 - methods in a class that even though you
271:30 - don't pass any argument to the method
271:34 - you have to provide at least one
271:36 - argument which is the self argument and
271:38 - what is self self is the current object
271:41 - so let me just print something here
271:45 - quickly for example
271:47 - public here
271:49 - so can we use this private member
271:51 - variable inside this method let's see so
271:55 - i'm going to just write
271:57 - self dot underscore underscore c
272:00 - and then i'm going to
272:03 - run this code and let me comment this
272:05 - line because this was giving us an error
272:08 - and instead we can use
272:11 - this
272:12 - public method so i can
272:15 - use an instance of hello which is hello
272:18 - dot public method
272:21 - and let's run the code now
272:24 - and you can see there is no error that
272:26 - means you can use your private member
272:28 - variables inside the class or any method
272:32 - of the class now the other question is
272:34 - what is a public member variable like a
272:38 - here
272:39 - so a is a public member variable because
272:42 - it doesn't contain
272:43 - any underscore underscore in front of it
272:46 - and that means you can use this public
272:49 - member variable inside the class as well
272:52 - as outside the class so if i want to use
272:55 - this public member variable inside the
272:58 - class also i can just use self.a
273:02 - and then run the code and it's totally
273:05 - fine it doesn't give us any error let's
273:08 - print the value of
273:10 - those two member variables and once
273:13 - again run the code and it will print the
273:15 - value of a and c and then this message
273:18 - which we are printing here which is
273:19 - public here now the next question is how
273:22 - we can define a private
273:25 - method in the class
273:27 - so let's see how we can define a private
273:29 - method
273:30 - you already know most probably which is
273:33 - by using double underscore in front of
273:36 - your method name so for example
273:39 - underscore underscore
273:41 - private
273:42 - underscore
273:44 - method
273:45 - and then
273:46 - i'm going to just print something inside
273:49 - this method let's say
273:51 - private so this is a private method and
273:54 - how you can define a private method
273:56 - using these double underscore in front
273:59 - of the name of your private method and
274:01 - the restriction will be the same on the
274:03 - private methods also so let's try to
274:06 - access this private method outside the
274:08 - class so i have this hello instance and
274:10 - when i
274:11 - press dot here you will see there is no
274:14 - suggestion for this private method
274:17 - because pycharm already know that this
274:20 - is a private method so it doesn't show
274:23 - this method in the suggestion when you
274:25 - use this object outside the class but
274:28 - let's try the brute force and let's try
274:31 - to
274:32 - use this method outside the class and
274:35 - when i run this code you will see once
274:38 - again you will get an error which says
274:41 - hello object has no attribute underscore
274:44 - underscore private method so private
274:46 - methods also you cannot use outside the
274:50 - class but inside the class absolutely
274:53 - you can use your private methods
274:56 - so how to use your private methods
274:58 - inside the class so you can use your
275:01 - private method inside the class using
275:04 - once again a self keyword so you write
275:07 - self dot and then your method name for
275:11 - example private method and that's how
275:14 - you can call your private method inside
275:16 - the class using self so any method you
275:19 - want to call
275:21 - inside a class
275:22 - you do it once again using this self
275:25 - keyword as you do with your member
275:28 - variable and once again when i run the
275:30 - code now it prints private
275:33 - using this statement and this statement
275:37 - is executed when we call this private
275:39 - method from here so i hope this video
275:42 - will clarify some more doubts about the
275:45 - private member variables and private
275:48 - methods in python in this video we will
275:50 - talk about python inheritance
275:53 - so first of all
275:55 - what is inheritance in python
275:58 - so classes in python can be extended
276:02 - creating new classes which retains the
276:05 - characteristics of a base class
276:09 - and this process is known as inheritance
276:12 - now in simple words the idea behind the
276:15 - inheritance is that a new class can
276:19 - borrow
276:20 - the behaviors and methods from the
276:24 - another class
276:26 - now the inheritance involves two types
276:29 - of classes
276:31 - one is a super class
276:33 - and other is a sub class
276:36 - now the sub class inherit members
276:40 - of the super class on top of which it
276:43 - can add its own members for example any
276:47 - other member methods or variables so
276:51 - here
276:52 - subclass is the one
276:54 - who is doing the borrowing of the
276:56 - members and the superclass is one
276:59 - from which subclasses borrows these kind
277:03 - of member
277:04 - methods and variables now if this
277:07 - inheritance sounds to be a little bit
277:10 - confusing to you let me give you an
277:13 - example so i said in inheritance there
277:16 - are two type of classes one is a super
277:19 - class and other is a subclass
277:23 - now in this example
277:25 - i have taken polygon as a super class
277:29 - and two classes rectangle and triangle
277:33 - as the subclasses now if you see
277:36 - carefully
277:38 - what is the relationship between
277:40 - rectangle and polygon
277:43 - and triangle and polygon
277:46 - so rectangle is a polygon right and a
277:50 - triangle is also a polygon that means
277:53 - the rectangle can inherit
277:56 - some properties from the polygon class
278:00 - also triangle can inherit some
278:02 - properties from the polygon class and
278:05 - the relationship between the superclass
278:08 - and the subclass is defined
278:11 - by
278:12 - a relationship called is our
278:14 - relationship
278:15 - so rectangle is a polygon and triangle
278:20 - is a polygon also
278:23 - that means
278:24 - that rectangle and triangle can inherit
278:28 - from the polygon class so in inheritance
278:32 - the subclasses have uh is our
278:35 - relationship
278:36 - with the super classes so let me give
278:39 - you one more example so as a super class
278:42 - you can take
278:43 - an animal class and then as subclasses
278:47 - you can create a dog class cat class red
278:51 - class because all of them
278:54 - are animals so dog is an animal cat is
278:59 - an animal rat is an animal so always
279:02 - remember when you use inheritance there
279:05 - is a is our relationship between
279:08 - superclass and the subclass now let's
279:11 - take our real life example and let me
279:14 - try to explain you
279:15 - this concept with some code so i'm going
279:18 - to create a new project in my pycharm
279:21 - ide and this i'm going to name it as
279:25 - inheritance and i will choose this
279:27 - option open in current window and also
279:29 - this option which says add to the
279:30 - current opened project which is going to
279:33 - create the project
279:34 - in the same window so now this project
279:37 - is created so i'm going to go inside
279:39 - this project and i'm going to create a
279:42 - new python file here and i'm going to
279:44 - name this file as
279:46 - polygon because we are going to create a
279:49 - polygon class
279:51 - and inside this polygon dot py file
279:54 - let's first create a class
279:57 - called
279:58 - polygon and inside this polygon class
280:01 - what are the attributes which we want to
280:03 - add here
280:04 - so
280:05 - rectangle and triangle what are the
280:08 - common things which they both have
280:11 - they both have the width and the height
280:14 - so we are going to first of all
280:16 - create a variable called width and we
280:20 - will initialize it by a value none the
280:23 - none keyword is used whenever you want
280:26 - to assign nothing to your variables
280:29 - right
280:30 - in the same way i'm going to
280:33 - use
280:34 - height and i'm going to assign none to
280:37 - that also now what i'm going to do is
280:40 - i'm going to create a method here so let
280:42 - me define a method using def
280:46 - and i'm going to use this method to set
280:48 - the values of width and heights and this
280:51 - method is going to take two argument one
280:54 - is the width and the other is the height
280:58 - right
280:59 - now if you remember in the last video i
281:01 - have shown you how to make your variable
281:04 - private so you use double
281:07 - underscore in front of your variables to
281:10 - make them private so i'm going to add
281:12 - this double underscore in front of width
281:14 - and height that means these two
281:16 - variables are private
281:18 - now using the set values method i'm
281:21 - going to just set the values of the
281:24 - height and width so
281:28 - self dot
281:29 - underscore underscore width is equal to
281:31 - width
281:32 - and
281:33 - self
281:34 - dot
281:35 - underscore underscore height
281:38 - is equal to
281:39 - height
281:40 - so this is the polygon class which we
281:42 - have created and it's a
281:45 - super class in our case right and now
281:48 - let's define two subclasses one is a
281:52 - rectangle and other is a triangle so
281:55 - let's define other class called
281:57 - rectangle and inside this rectangle i'm
282:00 - going to define one method let's say
282:02 - this method is a area method and this
282:07 - area method is going to give us the area
282:09 - of the rectangle and what is the area of
282:11 - the rectangle
282:13 - the area of the rectangle is the
282:15 - multiplication
282:17 - of the width and the height similarly
282:20 - i'm going to define a triangle class
282:23 - also so let me define the triangle class
282:25 - here and let's say this triangle class
282:28 - also have this method which is area
282:31 - now what is the area of a triangle
282:34 - the area of the triangle is the
282:37 - multiplication of width and height
282:39 - divided by two so we are going to divide
282:43 - the multiplication of width and height
282:44 - by two this is the area of the triangle
282:47 - so now we have defined three different
282:49 - classes and we are saying that polygon
282:52 - is the superclass and rectangle and
282:55 - triangle is our subclasses
282:59 - now how we can inherit the properties of
283:03 - the super class which is polygon into
283:06 - our subclasses which is rectangle and
283:09 - triangle
283:10 - so in order to inherit from one class to
283:14 - another you use this parenthesis and
283:17 - inside the parenthesis you write the
283:20 - name of your super class and that means
283:23 - your rectangle
283:25 - is inheriting from the polygon class
283:30 - similarly when we write
283:32 - this parenthesis and the polygon class
283:35 - here that means triangle
283:37 - is inheriting from the polygon class now
283:42 - when a sub class inherits from a super
283:44 - class the super class member variables
283:47 - and methods are accessible also using
283:52 - the
283:52 - sub class also so let me give you an
283:55 - example so i'm going to create
283:57 - the instance of
283:59 - rectangle first of all so let me just
284:02 - write rectangle so this is the rectangle
284:04 - instance
284:05 - and
284:06 - let's create a triangle instance also
284:10 - and now once we have triangle and
284:12 - rectangle instance let's use this
284:15 - rectangle instance and when you write
284:17 - dot here you can see intellisense says
284:21 - that
284:22 - area is available for this object and
284:25 - set value is available for this object
284:28 - so when you use set value you can see we
284:31 - haven't defined the set value method
284:34 - inside the rectangle
284:36 - but because we are inheriting from the
284:39 - polygon class into our rectangle class
284:42 - all the members of the polygon class are
284:47 - available using the rectangle object
284:49 - also and what this method takes it takes
284:52 - the width and height so we are going to
284:54 - provide the width and let's say height
284:57 - 50 and 40 and once again we are going to
285:00 - use the
285:01 - triangle
285:03 - object and we use the set values and
285:06 - this time also let's say i'm going to
285:08 - provide the same values here and what
285:10 - does this set value method is doing it's
285:13 - just setting the values of
285:15 - width and height
285:17 - inside the polygon class now in order to
285:20 - calculate the area we can call the area
285:22 - method from the
285:24 - rectangle and the triangle class so
285:26 - let's just do that and i'm going to do
285:29 - this inside a print method and i'm going
285:32 - to just
285:33 - call the rectangle object dot
285:36 - area which doesn't take any argument and
285:39 - the same i'm going to do for the
285:41 - triangle
285:43 - object also so triangle dot area so what
285:47 - do you think will happen now so let's
285:49 - run the code and let's see what will
285:50 - happen so i'm going to right click on
285:52 - this file and i'm going to just choose
285:54 - run a polygon
285:56 - and it's going to run the program and
285:58 - you will see it gives us an error and
286:01 - what is the error the rectangle object
286:04 - has no attribute rectangle underscore
286:07 - underscore width
286:09 - that means because
286:11 - this width and height are private member
286:15 - variables
286:16 - of the polygon class they are not
286:19 - accessible from the subclass which is
286:23 - the rectangle class and the triangle
286:26 - class so you cannot inherit the private
286:30 - members from the super class into the
286:34 - subclass so what is the solution here
286:38 - so what we can do here is we can create
286:41 - the getter methods
286:43 - for
286:44 - the width and the height so i'm going to
286:47 - do exactly that so let's define a method
286:49 - called
286:51 - def
286:52 - get
286:53 - underscore
286:54 - width and it's going to take no argument
286:57 - and it's going to return the value of
287:00 - the width so using self we can access
287:03 - the value of underscore underscore width
287:06 - in a same way we can define a method
287:09 - called get underscore height here and
287:12 - it's also not going to take any argument
287:15 - but we are going to return the value of
287:18 - the height here so self dot underscore
287:21 - underscore high so now we have created
287:23 - the getter methods for the width and
287:27 - height
287:28 - and these getter methods are the public
287:31 - members why they are public because we
287:33 - haven't used the double underscore in
287:37 - front of these two methods
287:39 - and these two methods now we can use in
287:43 - place of these private member variables
287:47 - which we were trying to inherit
287:50 - in the subclass using the super class so
287:55 - instead of underscore underscore width
287:57 - we can write self dot
288:00 - get width and also here instead of
288:03 - underscore underscore height we can use
288:06 - get height similarly we will do the same
288:09 - for the triangle class so get width and
288:12 - the
288:13 - get height dot
288:16 - get
288:17 - height now let's run the program again
288:20 - and let's see what happens
288:22 - and now when i run the code it gives me
288:24 - the area of rectangle
288:26 - using this print line statement and then
288:30 - it's going to give me the area of
288:31 - triangle which is exactly the half using
288:34 - this line of statement so let me once
288:37 - again minimize this
288:39 - and let's recap what we have learned
288:42 - so we have created a super class and two
288:46 - sub classes super class is polygon and
288:49 - sub classes are rectangle and triangle
288:52 - and in order to inherit
288:54 - from the super class you just use
288:56 - parentheses and the name of your super
288:58 - class and that means in our example
289:01 - rectangle is inheriting from the polygon
289:05 - class
289:06 - next what we have learned is all the
289:09 - public member variables or the methods
289:13 - are accessible from the subclass from
289:17 - the super class
289:19 - so set value method and getvalue method
289:22 - is accessible because they are public
289:26 - methods but underscore underscore width
289:29 - and underscore underscore height are not
289:32 - accessible because they are the private
289:34 - member variables so you cannot inherit
289:37 - the private member variables into your
289:40 - sub classes now we have seen this
289:43 - example in which we have created two
289:46 - instance of the classes one is rectangle
289:49 - object from the rectangle class and the
289:51 - other is triangle object from the
289:53 - triangle class and first of all we have
289:56 - used the set method which is coming from
289:58 - the polygon class it's not the part of
290:01 - the rectangle or the triangle class to
290:04 - set the values of width and height
290:07 - and then we have just called
290:10 - the area method from these two classes
290:12 - in order to give us the area so this set
290:16 - method is used to set the value so it
290:19 - has set the value of width and height
290:22 - and using this get method get width and
290:24 - get height
290:26 - this value is returned and this value is
290:29 - returned into
290:31 - the sub classes
290:33 - and then the multiplication of these two
290:35 - values gives us the area here and the
290:38 - multiplication of these values divided
290:41 - by 2 gives the area of the triangle here
290:44 - so this is how you can use inheritance
290:47 - in python
290:48 - hey guys welcome to the next video on
290:50 - python tutorial for beginners in this
290:52 - video we will discuss how to create
290:55 - modules in python
290:57 - now in the previous videos i have
291:00 - already discussed briefly about built-in
291:03 - modules and how to import a built-in
291:06 - module you use an import keyword and
291:09 - then you use the name of the built-in
291:12 - module in python built-in means this
291:16 - module is already present in python so
291:19 - we can use these built-in module in
291:22 - order to perform some functionality
291:25 - so for example this math module helps us
291:28 - to perform some mathematical operations
291:31 - now first of all what is a module
291:35 - so it turns out that a module is nothing
291:39 - but a python file
291:42 - now to prove my point
291:45 - let me just
291:46 - hover over this math module and just
291:49 - press ctrl and then hover over it
291:53 - so right now i'm pressing ctrl and i'm
291:55 - hovering my mouse over this math on the
291:58 - pycharm ide and now i'm going to click
292:01 - it
292:02 - and when i click it you will see
292:05 - this module is nothing but a file right
292:08 - and inside this module
292:10 - we have a number of functions
292:13 - which we can use for example
292:16 - a cos function or a tan function or many
292:21 - different functions which we can use
292:23 - from this math module
292:25 - so a module is nothing but a python file
292:29 - now if a module is nothing but a python
292:32 - file
292:33 - why don't we create a module and it
292:36 - turns out that python allows us to
292:39 - create our own modules so let's create
292:43 - our own modules and let me show you how
292:46 - you can create your own module and right
292:48 - now you can see in my project there is
292:51 - only one file which is hello dot py
292:54 - and it's empty right now
292:57 - now to create a module i'm going to just
293:00 - create a new file so right click and
293:02 - then new python file and this module i'm
293:05 - going to name it as my
293:07 - functions and then
293:09 - press ok and this file is created so now
293:12 - i have two files in my project one is my
293:15 - functions and other is hello dot py so
293:18 - let's say i want to create some
293:20 - functions inside this my functions dot
293:23 - py file
293:24 - so let's create some function i'm going
293:27 - to very quickly create some very basic
293:31 - functions which you already
293:33 - know in
293:35 - python so so let's say add function
293:38 - which returns the addition of two
293:41 - numbers and also let's create let's say
293:44 - multiply functions so multiply
293:48 - and this is going to just give the
293:50 - product of two numbers
293:52 - so let's say this is our module and it
293:55 - has two functions
293:57 - now somehow i need to use these two
294:00 - functions
294:01 - from my functions dot py file
294:04 - into
294:05 - this hello dot py file
294:08 - now as you can see
294:10 - these two files are in the same
294:12 - directory right so i can import this my
294:16 - functions file using import and then the
294:19 - name of the file which is my functions
294:23 - and that's it so in order to import a
294:26 - module you just write a keyword called
294:29 - import and then you just write the name
294:32 - of the file without the extension py
294:35 - okay so you don't need to provide any
294:37 - extension here and then i can use this
294:40 - function so let's say i want to print
294:43 - my function which is the file name so
294:47 - whatever file name you give here you
294:48 - need to use the file name here
294:51 - dot you will see all the functions in
294:55 - the file are now visible
294:57 - in the other file which is hello dot py
294:59 - so let's use this add function and i'm
295:02 - going to just give two parameters here
295:05 - and also let's use the multiplier
295:07 - functions from the my functions
295:10 - files so the file name and
295:14 - the method name or the function name and
295:16 - let's give two parameters here also and
295:20 - that's it so it's that simple to create
295:23 - your own modules
295:25 - and import them into other files in
295:28 - python now when i run this program it's
295:32 - going to give me the addition and the
295:34 - product of these two arguments which i
295:37 - have provided here now let's say your my
295:42 - functions
295:43 - file is in some other directory so let
295:47 - me create a directory so i'm going to
295:49 - right click here and then i'm going to
295:51 - create a directory and i'm going to name
295:53 - it as dir
295:55 - and then click ok
295:57 - and now i'm going to move this
296:00 - my functions dot py file
296:02 - into the new directory so i'm going to
296:05 - just right click and cut from here this
296:07 - file and i'm going to just paste this
296:09 - file into the dir directory okay so let
296:13 - me just click ok here and as soon as i
296:17 - do this you will see here pycharm is
296:20 - intelligent enough to refactor this code
296:23 - and now it has given us the correct
296:26 - import okay so if
296:29 - this my functions
296:30 - file is in some directory then you use
296:34 - this type of notation so you write from
296:37 - and then your directory name
296:39 - and then import keyword and then your
296:42 - file name so you can see
296:44 - this is the directory name and this is
296:46 - the file name
296:47 - so i use from directory name import file
296:51 - name
296:51 - and when i run the code once again it's
296:53 - going to give me the same answer
296:57 - now there is one more way of writing the
296:59 - same notation
297:01 - and that is using the import so use
297:04 - import keyword and then write the name
297:07 - of your directory
297:08 - dot the name of your file so directory
297:12 - dot the file name
297:14 - and then
297:15 - you use
297:16 - this
297:17 - name in place of your
297:20 - my function
297:21 - name okay and once again when you run
297:24 - the code it runs fine now sometimes you
297:27 - might feel that this is a long name
297:30 - and python have the solution for it also
297:34 - so it turns out that you can rename
297:38 - your file
297:40 - using a keyword called as
297:43 - so after the import so import directory
297:47 - name dot file name as and then you can
297:51 - provide your name for example
297:53 - my functions i will just name it as mf
297:56 - okay and now i can use this mf name
298:00 - instead of this big name
298:03 - and this will also work fine so either
298:07 - you can import from your file which is
298:11 - inside the directory using this notation
298:13 - or you can use this notation you can
298:16 - also write as
298:18 - in front of
298:20 - this notation also so from directory
298:23 - name import file name as whatever name
298:26 - you want to give here and this
298:28 - you can use
298:29 - to call your function using this dot
298:32 - notation now this was the easy stuff
298:36 - and i have just written here
298:38 - the two functions and then imported
298:41 - these two functions into the other file
298:45 - but what if if i have
298:47 - multiple classes i haven't shown you how
298:50 - to import files which have classes in
298:54 - them so let's see how to import the
298:56 - python files which have classes inside
298:59 - them so i'm going to close these two
299:01 - files
299:02 - and in the last video i have shown you
299:05 - how to use inheritance in python and we
299:09 - have created
299:10 - this class polygon and two other classes
299:13 - which is triangle and the rectangle
299:16 - class and this might be right now the
299:19 - perfect candidate to import into some
299:23 - other file
299:24 - so i'm going to create two more file one
299:27 - is the rectangle file so i'm going to
299:30 - just right click and create a python
299:32 - file and i'm going to name it as
299:34 - rectangle
299:35 - and i'm going to create one more file
299:37 - with the name of triangle so right click
299:40 - new python file
299:41 - and the name is
299:44 - triangle.py and let me create the fourth
299:47 - file which i'm going to name it as main
299:51 - and this will be our main file in which
299:53 - we will import all these classes so in
299:57 - my polygon class i will just leave this
299:59 - polygon class and i will just transfer
300:02 - this rectangle class into the rectangle
300:06 - dot py file and this triangle class into
300:11 - triangle dot py file and also this was
300:14 - the instantiation of the rectangle and
300:17 - triangle class which we have done so i
300:20 - will transfer this code into our main
300:23 - dot py file okay so now we have a
300:27 - polygon dot py file in which we have the
300:30 - polygon class
300:32 - and then we have the rectangle class
300:35 - inside rectangle.py and also we have the
300:38 - triangle class into the triangle.py file
300:42 - and
300:43 - rest of the code we have inside the main
300:46 - dot py now when you go to the rectangle
300:49 - dot py you will see that it's inheriting
300:53 - from the polygon
300:55 - class that means we need to import
300:58 - polygon class into the rectangle dot py
301:01 - file so how to import it you can use
301:05 - from and then the file name which is
301:07 - polygon
301:08 - and then use import keyword
301:11 - and use the name of the class which is
301:14 - polygon and you will see that this error
301:17 - is gone and same we will do inside the
301:21 - triangle dot py file in order to import
301:24 - the polygon class
301:26 - into
301:27 - the triangle dot py file so this is the
301:31 - file name so from file name import the
301:34 - class name now when i go to the polygon
301:37 - class we don't need to import anything
301:39 - here because it's a super class and
301:41 - there is no import needed here let's go
301:44 - to the main dot py file and here you
301:46 - will see red squiggly line
301:49 - under rectangle and triangle
301:52 - class because we haven't imported this
301:55 - triangle dot py and the rectangle dot py
301:58 - into our main dot python file
302:00 - so the procedure is same from
302:03 - your file name which is first of all
302:06 - rectangle
302:07 - import
302:09 - the name of the class which is rectangle
302:12 - same we will do for the triangle
302:15 - class so from the triangle
302:18 - file name triangle.py and then import
302:22 - and then the name of the triangle class
302:25 - and you will see as soon as you do this
302:28 - the error is gone so now there is no red
302:31 - squiggly line
302:33 - under any of the code
302:35 - so now let's run the code so i'm going
302:38 - to just go to the main.py file and i'm
302:42 - going to right click on this main.py
302:44 - file and i'm going to just click on run
302:47 - main
302:48 - which is going to run the program and
302:50 - it's going to print the result which is
302:52 - the area of rectangle and the area of
302:56 - the triangle so in this way you can
302:59 - import the py file which have classes
303:03 - inside them so this is how you create
303:05 - your own modules in python and import
303:09 - them into other python files in this
303:12 - video we will talk about multiple
303:14 - inheritance in python
303:17 - so first of all what is multiple
303:19 - inheritance
303:20 - so the ability of a class to inherit
303:24 - from more than one class is called
303:28 - multiple inheritance and in python a
303:31 - class can inherit from more than one
303:34 - class so let's see an example which
303:36 - shows us how to inherit from multiple
303:40 - classes now i will be using this example
303:43 - which i have already shown you in the
303:46 - video where i have shown you inheritance
303:48 - in python so there is a class called
303:52 - polygon which is a super class
303:54 - and the other two classes are triangle
303:57 - class and the rectangle class which are
304:00 - the sub classes and these two classes
304:03 - are inheriting from the polygon class
304:06 - and i have also one more python file
304:09 - which is main dot py
304:12 - and in this main dot py i'm just
304:15 - importing these two rectangle and
304:18 - triangle class and creating an instance
304:20 - out of them and then setting the value
304:23 - of width and height and then we are
304:25 - printing the area of the rectangle and
304:28 - the triangle so if you haven't seen the
304:30 - last two videos just watch those videos
304:33 - because i will be using the same code in
304:35 - order to show you how to use multiple
304:38 - inheritance so let's get started so what
304:40 - i'm going to do is i'm going to
304:42 - create a new python file here and i'm
304:44 - going to name my file as a shape
304:48 - and i'm going to use this shape dot py
304:51 - to create a class called
304:54 - shape so let me create a class quickly
304:57 - and i'm going to name it as shape and
305:00 - this method i'm going to define a
305:02 - private variable called
305:05 - color and i'm going to initialize it
305:07 - with
305:08 - the value none and then i'm going to
305:10 - define the setter and getter for this
305:12 - color attribute so let's define those
305:24 - so now we have defined the setter and
305:26 - getter for this color attribute now if
305:29 - you remember what i told you about
305:31 - inheritance and that is whenever you
305:33 - want to do inheritance between a
305:36 - superclass and a subclass there is a is
305:39 - a relationship between the subclass and
305:42 - the super class
305:44 - so rectangle is a shape
305:46 - and triangle is also a shape so that
305:49 - means we can also use this shape class
305:52 - as the super class
305:54 - in rectangle and the triangle classes
305:58 - so let's use
306:00 - the shape class into
306:02 - the rectangle and triangle class as the
306:05 - super glass so first of all i'm going to
306:07 - import this shape class from
306:11 - the
306:12 - shape file so let's import this and same
306:16 - i will do in the triangle class also and
306:19 - now how to inherit from multiple classes
306:22 - into our subclasses so we have already
306:25 - inherited from the polygon class and in
306:28 - order to add one more class here you
306:31 - just need a comma separator and the name
306:34 - of your class so this is how you inherit
306:37 - from multiple classes you just use the
306:40 - parenthesis and then the name of your
306:43 - classes separated by the comma
306:46 - that means the triangle class is
306:49 - inheriting from the polygon class as
306:52 - well as the shape class
306:55 - the same we will do in the rectangle
306:57 - class i will just provide the comma here
307:00 - and then i will just write shape here
307:02 - and now i will go to the main dot py
307:05 - file and once you do the multiple
307:07 - inheritance that means all the public
307:10 - methods
307:11 - of the shape class is available in the
307:15 - sub classes which are triangle and the
307:18 - rectangle so i can
307:20 - use this kind of notation first of all
307:22 - i'm going to use rectangle class to call
307:26 - the method called set color so i'm going
307:29 - to set color from here and let's say the
307:32 - rectangle color is red
307:35 - and
307:36 - then i'm going to use the
307:38 - triangle object to call the set color
307:41 - method once again and the color i want
307:43 - to provide here is let's say blue okay
307:46 - and in order to get those two
307:49 - color values we can once again write
307:51 - print the instance name which is
307:54 - rectangle dot get color
307:57 - and same we will do for the triangle
308:00 - object also so print
308:03 - triangle
308:04 - dot
308:05 - get color
308:07 - and that's it so now
308:09 - all the public method of the shape class
308:12 - is also available in our rectangle and
308:17 - the triangle classes and we can use all
308:20 - the public methods of this shape class
308:23 - into the subclasses and let's run the
308:25 - code and let's see what happens
308:28 - so the code is running and you can see
308:30 - it prints red and blue using these two
308:34 - statements so this is how you can do
308:37 - multiple inheritance in python in this
308:40 - video i'm going to show you how you can
308:42 - use a built-in function called super
308:45 - in your python classes
308:48 - so let's get started
308:49 - so to start with i have two classes here
308:52 - one is the parent class and other is the
308:55 - child class and here parent class acts
308:59 - like a super class and the child class
309:01 - acts like a sub class which is
309:03 - inheriting from the parent class
309:06 - now both these classes have
309:09 - this init function and you already know
309:11 - what does this init function do it is
309:13 - the first function which is called
309:16 - when an instance of a class is created
309:19 - and here i'm just creating the object
309:21 - from the child class
309:23 - now what do you think will happen
309:26 - will this constructor will be called or
309:29 - this constructor will be called because
309:31 - we are inheriting from the parent class
309:34 - into the child class
309:35 - so let's find out so i'm going to run
309:38 - this code and it prints child in it that
309:41 - means this statement under the child
309:43 - class init method is executed
309:47 - and this method is not executed now in
309:50 - some cases you might want to pass some
309:53 - parameters also into
309:56 - your super class for example i'm just
309:59 - going to give this example let's say i
310:01 - want to pass a argument called name here
310:05 - and then i will just print the value of
310:08 - name
310:09 - how can i call this init function
310:13 - using this child class instance so it
310:16 - turns out that there is a function
310:19 - called super
310:20 - in python that allows us to refer
310:24 - to the super class implicitly
310:27 - now this super function
310:30 - is a built-in function which returns a
310:32 - proxy object that allows you to refer to
310:37 - your super class so let's try to use
310:40 - this super function so you just use the
310:43 - keyword super and then give these
310:45 - parentheses because this is a function
310:48 - and then this super function will return
310:50 - the proxy object of the super class that
310:53 - means i can use this dot operator to
310:56 - call
310:57 - the init method from the super class so
311:00 - this notation means super dot init means
311:04 - we are calling the init method from the
311:06 - parent class and that means we can pass
311:10 - the name from here so let's just pass
311:12 - this name i'm going to just write max
311:14 - here
311:15 - and now i'm going to run this code and
311:18 - now you will see that child init is
311:21 - printed using this statement first of
311:23 - all and then using the super
311:26 - function the init method of the parent
311:28 - class
311:29 - is called and then this name is passed
311:33 - here and it prints parent init and the
311:36 - name whatever name we have provided here
311:39 - so this super function allows us to
311:41 - refer to the super class now let me show
311:44 - you one more thing which is called the
311:46 - method resolution order and you can find
311:49 - this method resolution order by using
311:52 - your
311:53 - class name so child class name dot
311:56 - underscore underscore
311:59 - mro so just write underscore underscore
312:01 - mro underscore underscore and this
312:03 - statement i'm going to use inside the
312:06 - print function so we can see the result
312:08 - what it returns so i'm going to run the
312:10 - code now
312:12 - and you can see it returns this kind of
312:14 - order so as the name suggests mro stands
312:17 - for method resolution order
312:21 - and this is the order in which the
312:23 - methods
312:25 - are called inside your child class or
312:28 - the parent class and this order means
312:31 - that all the method in the child class
312:34 - will be executed first and then all the
312:37 - method in the parent class will be
312:40 - executed now there are some rules based
312:44 - upon which this order is calculated and
312:48 - these rules are the first rule is the
312:51 - method inside your subclass are always
312:54 - called first and then whatever the
312:57 - method inside the base class they will
313:00 - be called and the second rule is related
313:03 - to multiple inheritance so let me just
313:06 - create the second parent class and i'm
313:09 - going to name it as parent two
313:11 - and here also i'm going to just write
313:13 - parent two here
313:14 - and let me inherit from the parent to
313:18 - also in the child class right and let's
313:21 - run the code once again
313:23 - and now you will see this order
313:26 - so once again child is printed and then
313:29 - the parent and then parent two and then
313:32 - the object so the second thing on which
313:35 - the mro depends upon is the order in
313:38 - which you inherit
313:40 - from the parent class or the super class
313:43 - so in our example we were inheriting
313:46 - from the parent class first of all and
313:48 - then parent two
313:50 - and in the same order
313:52 - this mro also will be decided so all the
313:55 - method in the child class will be
313:57 - executed first and then all the methods
314:00 - inside the parent class whatever you use
314:03 - first here
314:05 - will be executed and then whatever
314:07 - superclass you write after that those
314:09 - method inside the class or superclass
314:13 - will be executed next and then at last
314:16 - this is the base object now let's try to
314:18 - just reverse this order
314:21 - and once again let's run the code and
314:24 - you will see that this order will be
314:26 - reversed so the method resolution order
314:29 - will tell you which class method will be
314:32 - executed first and then the order of all
314:36 - the methods from the super classes
314:39 - now one more interesting thing which you
314:41 - will observe here is this output
314:45 - so i said that this super function is
314:48 - used to refer to the super class and now
314:52 - we have two super classes that means
314:54 - multiple inheritance
314:56 - and you will see here that only one
315:00 - output is printed which is from
315:02 - the init method inside the parent two
315:06 - and this statement is not printed which
315:09 - is inside the init method
315:11 - inside the parent class
315:14 - so how to solve this problem
315:16 - so if you have multiple inheritance
315:19 - then you need to manually call
315:23 - these init function using the
315:27 - class name so let's say i want to call
315:29 - the init function first of all from the
315:31 - parent two class i will use parent two
315:35 - dot init and then you need to give also
315:38 - the self as the first parameter and the
315:41 - second which is the name in the same way
315:44 - you use the second class which is parent
315:48 - dot
315:49 - init function
315:50 - and then first parameter is the self and
315:53 - then you can pass any other name for
315:55 - example tom here and let me run the code
315:59 - and you will see it calls first of all
316:01 - paren2init function and we have passed
316:03 - max here as the name and then it calls
316:06 - the parent one init function
316:09 - with the name tom which is printed here
316:12 - also so this is how you can use super
316:14 - function
316:15 - in python in this video i'm going to
316:18 - show you what is composition
316:20 - and how to use class composition in
316:23 - python
316:24 - so to start with i have
316:26 - two classes here one is an employee
316:29 - class and other is the salary class
316:32 - now in the salary class i have this init
316:34 - method which takes two argument pay and
316:37 - bonus and it sets these two arguments to
316:41 - the member variables of this class
316:43 - also i have a method called annual
316:45 - salary which is used to calculate the
316:48 - salary
316:49 - now in the employee class i have this
316:51 - constructor which takes four arguments
316:54 - which is name age pay and bonus
316:59 - now what do you think can we apply
317:01 - inheritance here the answer is no
317:04 - because there is no is our relationship
317:06 - between salary and employee so employee
317:10 - is not a salary and salary is not an
317:13 - employee but somehow i want to delegate
317:15 - the responsibility of calculating the
317:18 - employee's salary to the salary class
317:21 - because calculating salary is in itself
317:24 - is a big task i have just simplified
317:27 - this
317:28 - class in the form of just calculating
317:31 - the annual salary but the employee can
317:34 - have his own taxes
317:36 - or he has taken some leaves or many
317:39 - factors affects the salary of an
317:43 - employee so this salary calculation
317:46 - let's say we want to delegate to the
317:48 - salary class but whose salary is this
317:51 - this salary is the employee's salary so
317:54 - we know that we cannot use inheritance
317:57 - here but we can use a concept called
318:00 - composition here
318:02 - and the composition means that we are
318:05 - just delegating some responsibility
318:09 - from one class to the another class so
318:12 - how to delegate this responsibility we
318:14 - can just create one more variable here
318:18 - for example
318:20 - self dot obj underscore
318:23 - salary
318:24 - which is the salary object we are going
318:26 - to create using the salary class okay
318:31 - and this salary class takes two
318:33 - parameters one is pay and other is bonus
318:36 - which we are already providing using the
318:40 - employee init method so i'm going to
318:42 - just pass this pay
318:44 - comma the bonus into
318:48 - the salary class so we are instantiating
318:51 - the salary class inside the employee
318:53 - class so here one class which is an
318:56 - employee class
318:58 - acts like a container of the other class
319:02 - which acts like a content okay so salary
319:06 - class is the content and the employee
319:09 - class is the container of this salary
319:12 - class now in order to calculate the
319:15 - total salary we can define one more
319:16 - method here and i'm going to just say
319:19 - total underscore salary and then what we
319:23 - are going to do is we are going to call
319:25 - our
319:27 - object salary member variable because
319:30 - this gives us the object of the salary
319:33 - so i'm going to just call object salary
319:36 - and we can call this method from the
319:38 - celery class which gives us the annual
319:40 - salary and now i'm going to just create
319:43 - the object of this employee class so let
319:46 - me just
319:48 - write emp is equal to
319:50 - employee which takes four parameter
319:53 - first is name
319:55 - second is the age
319:57 - third is the pay so let's say
320:00 - pay is 15 000
320:03 - and the bonus is 10 000. and now i just
320:06 - want to print the total salary of this
320:09 - employee so i can just write print and
320:12 - then
320:13 - emp object
320:15 - dot the total salary which is total
320:18 - salary method and you can see here this
320:20 - total salary is returning let me just
320:23 - use the return keyword also because we
320:26 - are returning this annual salary from
320:28 - the salary class using this total salary
320:31 - method so let's run the code once again
320:34 - and let's see what happens and you can
320:35 - see annual salary is printed and this
320:38 - annual salary is calculated using the
320:41 - salary class so what this employee class
320:46 - has done it has delegated some
320:49 - responsibility
320:50 - to
320:51 - the other class which is the salary
320:53 - class which gives us the annual salary
320:56 - of an employee and this here is called
321:00 - composition now one interesting thing
321:02 - which you will notice here is
321:04 - we are not instantiating salary
321:07 - here we are just instantiating the
321:10 - salary inside an employee class so as
321:14 - soon as you delete an instance of an
321:17 - employee the salary class instance will
321:20 - be automatically deleted so whenever you
321:23 - want to delegate some responsibility
321:26 - of one class to the another class it's
321:29 - called composition one more example of
321:32 - composition can be
321:34 - a book class and a chapter class so
321:39 - a chapter is not a book and book is not
321:42 - a chapter but we can delegate some
321:45 - responsibility from a book class to the
321:48 - chapter class so this is how you can use
321:50 - composition in python in the last video
321:53 - we have seen how to use composition
321:56 - between classes in python
321:58 - in this video i'm going to show you how
322:00 - to use class aggregation between classes
322:04 - in python now if you haven't watched my
322:07 - last video in which i have shown you how
322:09 - to use class composition in python i
322:12 - will highly recommend you to watch that
322:15 - video
322:16 - because i will be using the same code to
322:20 - demonstrate how aggregation works in
322:23 - python
322:24 - so in the last video we have created two
322:27 - classes one is an employee class and
322:30 - other is the salary class and then we
322:34 - have used the celery class inside the
322:37 - employee class and we have seen how
322:39 - composition works in python
322:42 - so employee class is delegating some
322:45 - part of its responsibility
322:47 - to the salary class and that is called
322:50 - the composition now in composition the
322:53 - relationship between the classes which
322:55 - have some association is represented by
322:59 - a keyword part of so salary is the part
323:03 - of employee so the keyword we use in
323:06 - composition is part of now let's see how
323:09 - we can use aggregation instead of
323:12 - composition between these two classes so
323:15 - let's say i will not use this salary
323:18 - class inside the employee class but what
323:22 - i'm going to do is i'm going to pass
323:24 - an instance of salary here so i'm going
323:27 - to just write
323:28 - celery and this will be the object of
323:32 - celery class which i'm going to pass
323:35 - in the init method of the employee class
323:40 - so let's create an object of the salary
323:44 - so i'm going to just write salary here
323:47 - is equal to the celery class and we will
323:50 - instantiate the celery class
323:53 - by these two argument which we have
323:56 - given in the last video to the employee
323:58 - class so i'm going to just copy these
324:00 - two arguments and paste it here and i'm
324:03 - going to remove this comma here so now
324:05 - what we are doing here is we are first
324:08 - of all instantiating the salary class
324:11 - and now the salary class we can pass to
324:14 - the constructor of the employee class
324:17 - and this is the object which we have
324:19 - passed using the salary class object and
324:23 - then i'm going to take the salary class
324:25 - object and i'm going to assign the
324:26 - salary class object to the member
324:28 - variable of the employee class which is
324:31 - obj underscore salary now because we are
324:35 - passing the salary object that means
324:37 - this member variable is the salary
324:39 - member object and we can call any public
324:42 - method from the salary class using this
324:45 - member variable now so let's run the
324:47 - code and let's see what happens and we
324:49 - get the same result as we have seen in
324:51 - the last video in the composition
324:54 - example so what we have done differently
324:56 - here
324:57 - so instead of using the salary class
325:00 - inside the employee class we have first
325:03 - created an instance of the salary class
325:06 - and then we have passed this instance
325:08 - to the employee constructor which can be
325:11 - used inside the employee class and this
325:15 - type of relationship is called
325:17 - aggregation now let's see what are the
325:19 - special properties of the aggregation
325:22 - the first property is the relationship
325:25 - between the associated classes in
325:29 - aggregation is defined by the keyword
325:32 - has ah so employee has a salary because
325:36 - now we are first of all creating the
325:37 - salary object and then passing it to the
325:41 - employee so now we are not directly
325:43 - using salary inside the employee class
325:46 - the second property of aggregation is
325:49 - the associated classes have
325:52 - unidirectional association so we are
325:55 - just passing salary object
325:58 - to the employee class we are not passing
326:02 - employee object to the salary class so
326:05 - it's a unidirectional association only
326:08 - salary can be passed to employee
326:11 - not the other way around and the third
326:14 - property of aggregation is we have
326:16 - created the salary object and the
326:19 - employee object so both these objects
326:21 - are independent of each other so if one
326:25 - object dies
326:27 - the other survive so both the object are
326:30 - able to survive individually so these
326:32 - are the three properties of aggregation
326:35 - now let's see the difference between the
326:37 - composition and the aggregation so i'm
326:39 - going to split the screen so i'm going
326:40 - to just right click on this tab and i
326:44 - will say split vertically and here i'm
326:47 - going to open the example of the
326:50 - composition so on the right hand side i
326:52 - have the example of composition and on
326:54 - the left hand side i have the example of
326:57 - aggregation let me just maximize this so
327:00 - you can see it
327:02 - and now let's discuss about the
327:04 - differences between the composition and
327:07 - aggregation
327:09 - so the relationship in composition is
327:12 - defined by a keyword called part of
327:17 - so salary is the part of employee
327:21 - in aggregation
327:22 - there is no part of relationship but the
327:25 - relationship is defined by the keyword
327:28 - called has a so now in aggregation we
327:30 - are defining the instance of salary and
327:33 - then passing it to the employee class
327:36 - and salary is not the part of the
327:39 - employee class we are just passing it to
327:42 - the employee class so aggregation we use
327:45 - has our relationship and in composition
327:48 - we use part of relationship the second
327:51 - difference is when you delete
327:54 - the employee object the salary object
327:57 - will be automatically be deleted so
328:01 - salary object is dependent on the
328:04 - employee class but in aggregation the
328:08 - salary object and the employee object
328:10 - are
328:11 - individually independent so they can
328:14 - survive individually if one object dies
328:17 - then it doesn't matter that the other
328:20 - object dies because we have created
328:22 - these object individually now in
328:25 - composition both salary and employee are
328:27 - interdependent on each other
328:30 - but in aggregation the relationship is
328:34 - unidirectional so the association
328:36 - between the
328:38 - employee and the salary object is
328:40 - unidirectional we can only pass the
328:42 - salary to the employee class but we
328:45 - cannot pass the employee object to the
328:49 - salary class so these are the three
328:51 - major differences between composition
328:54 - and the aggregation
328:55 - in this video we will talk about
328:57 - creating abstract classes in python
329:01 - so let's get started
329:02 - so to start with i have here two classes
329:06 - one is a shape class another is a square
329:09 - class in shape class i have two empty
329:12 - methods one is area and other is
329:15 - parameter
329:16 - and i'm using shape as a super class and
329:20 - square as a subclass and square class is
329:23 - inheriting from the shape class
329:26 - now in this example i want to do two
329:28 - things
329:29 - one is i don't want to allow the other
329:32 - users to create an instance of a shape
329:36 - class because shape class acts like a
329:38 - template for
329:40 - the square class so i don't want to
329:42 - allow those users to create an instance
329:46 - of this shape class
329:48 - so let's see right now if we can create
329:51 - an instance of this shape class or not
329:53 - so i'm going to
329:54 - just
329:55 - write shape is equal to shape
329:59 - and when i run the code my code runs
330:02 - fine that means right now i'm able to
330:04 - create an instance of the shape class
330:07 - which i don't want
330:09 - the second thing is i want to make sure
330:12 - that both these methods which are there
330:15 - inside the shape class are implemented
330:19 - inside the square class so i want to
330:21 - make sure that whoever is using the
330:25 - shape class he or she must implement
330:28 - these two methods inside the subclass so
330:32 - how can i achieve these two things now
330:34 - it turns out that abstract classes are
330:37 - just made for that so how to create an
330:40 - abstract class in python the fact is
330:42 - python on its own doesn't provide any
330:46 - abstract class but don't worry
330:49 - there is a built-in module in python
330:51 - which we can use to create an abstract
330:54 - class so let's import this built-in
330:57 - module first so i'm going to just write
330:59 - from abc import capital abc comma
331:04 - abstract method
331:06 - so these are the two things we need to
331:08 - import from this module
331:11 - now this module abc stands for abstract
331:15 - base classes
331:17 - and this allows us to create the
331:19 - abstract classes so how we can create an
331:22 - abstract class using this abc module
331:25 - so what we need to do here is we need to
331:28 - inherit from
331:30 - the abc module into the shape class okay
331:35 - so shape class is inheriting from the
331:38 - abc module now once this shape class
331:40 - inherit from the abc module
331:43 - the second thing what we need to do here
331:45 - is we need to add a decorator here and
331:49 - how to add a decorator we just need to
331:52 - use at the rate and then the name of
331:55 - this abstract method which is like this
331:58 - and let me use this abstract method
332:01 - decorator
332:02 - on top of this parameter method also so
332:05 - what this abstract method decorator does
332:08 - is it makes these two methods abstract
332:12 - and what is an abstract method an
332:14 - abstract method is a method which you
332:17 - must implement in the sub class so when
332:20 - you run the code now it will give us
332:23 - this error which says can't instantiate
332:26 - abstract class shape
332:28 - with the abstract method so once you
332:31 - create any of your class method as
332:34 - abstract then your class becomes the
332:37 - abstract class and then you cannot
332:40 - instantiate this class like this so our
332:43 - first goal is achieved that we cannot
332:46 - instantiate this shape class now because
332:50 - this class is now an abstract class and
332:53 - how to create an abstract class you just
332:56 - need to import the abc module and then
333:00 - you just need to add this decorator on
333:02 - top of your method and if you do this
333:04 - even with one method in your class then
333:08 - your class becomes abstract so now we
333:11 - have removed the instantiation of this
333:13 - shape class but now when i try to
333:16 - instantiate this square
333:18 - object from the square class let's see
333:21 - what happens so this square class takes
333:23 - one argument which is the side of the
333:26 - square and let me run this code
333:28 - and once again it gives us an error and
333:31 - this error says can't instantiate
333:33 - abstract class square with abstract
333:36 - methods so that means that whenever you
333:39 - inherit from a class which is an
333:42 - abstract class and if this class contain
333:45 - any abstract methods then the sub class
333:49 - have to implement the methods which are
333:52 - abstract so this method area is an
333:55 - abstract method
333:56 - and this method parameter is also an
333:59 - abstract method that means we have to
334:01 - provide the implementation of these two
334:04 - method inside our sub class so i'm going
334:08 - to provide the implementation of area
334:11 - first of all into the subclass and area
334:15 - i'm going to just return as the
334:17 - multiplication of the sides right so
334:20 - self dot underscore underscore side
334:23 - multiplied by itself so self
334:26 - dot underscore underscore side and let's
334:29 - say for now i will remove this abstract
334:31 - decorator from
334:33 - the parameter method and let's run the
334:36 - code once again and you can see it runs
334:39 - fine so there is no error when we
334:41 - instantiate this class when we implement
334:45 - all the abstract method
334:47 - into your subclass so right now there is
334:50 - only one abstract method which is area
334:52 - into the shape class which we need to
334:55 - implement in the subclass and that we
334:58 - have done so we'd see no error here now
335:00 - let's add this decorator abstract method
335:02 - on top of this parameter method also and
335:06 - once again when i run the code it will
335:08 - give me once again this error it's going
335:10 - to give me the same error which says
335:12 - can't instantiate the abstract class
335:14 - square with the abstract method
335:16 - perimeter
335:18 - so we also need now to implement this
335:21 - method also so let's just implement this
335:25 - parameter method inside the subclass
335:28 - once again and what is the perimeter
335:31 - it's four times the size of your square
335:35 - so self
335:36 - dot underscore underscore size and now
335:39 - we have implemented both of them and
335:41 - once again when we run the code it runs
335:44 - fine
335:45 - let's also try to print the area and
335:47 - parameter of the square so i am going to
335:50 - just use this object to call the area
335:53 - method and in the next line i am going
335:56 - to just use print to once again call
335:58 - this object and this time i will call
336:01 - the perimeter method and let's run the
336:04 - code once again and it prints
336:06 - the area of the square and the perimeter
336:09 - of this square
336:10 - so let's rewind what we have learned
336:12 - till now so in python you can define an
336:16 - abstract class by importing this module
336:19 - and this abstract method and this abc
336:23 - stands for abstract based classes and
336:26 - you need to inherit from this abc into
336:29 - the class which you want to make
336:31 - abstract the second thing which you need
336:33 - to do is you need to provide this
336:35 - decorator at the rate abstract method on
336:38 - top of at least one of the methods
336:42 - inside your abstract class that makes
336:45 - your class abstract and what are the
336:47 - properties of the abstract class you
336:49 - cannot instantiate an abstract class so
336:52 - you cannot create an object of this
336:55 - abstract class and you need to implement
336:59 - all the abstract method into the sub
337:02 - class which is inheriting the abstract
337:04 - class so this abstract class acts like
337:07 - just a template for other classes which
337:11 - wants to inherit from this shape class
337:14 - so this is how you can use abstract
337:15 - classes in python in this video we will
337:18 - learn how to use exception handling in
337:21 - python
337:23 - so first of all what are exceptions so
337:26 - an exception is an event which occurs
337:30 - during the execution of a program
337:33 - that disrupts the normal flow of the
337:36 - program
337:37 - so basically
337:39 - exception is an unexpected event
337:43 - which disrupts the normal flow of the
337:47 - program
337:48 - so let me show you some examples of
337:50 - exceptions which may occur during the
337:53 - execution of a program
337:55 - so to start with i'm going to open the
337:57 - pie charm python consoles and then i'm
338:00 - going to maximize this pycharm python
338:03 - control and let me also just clear this
338:07 - terminal so we will start from the top
338:10 - so let's say we have a number and we
338:12 - divide this number by zero and when we
338:15 - press enter it's going to give us this
338:18 - exception which says zero division error
338:22 - so this zero division error is an
338:25 - exception when you divide anything by
338:28 - zero in python let me show you some more
338:31 - examples so let's say i want to add
338:34 - a number and a string let's say 10 plus
338:39 - 10 but this 10 is an integer and this 10
338:43 - is a string and when i run the command
338:46 - it says type error unsupported
338:49 - types for int and string so we cannot
338:53 - add a number and a string in python so
338:57 - this type error is another kind of
338:59 - exception
339:01 - let's say i'm going to just use a
339:04 - variable name a
339:06 - b c
339:07 - which i haven't declared till now and
339:10 - when i press enter it's going to once
339:12 - again give me this exception which says
339:16 - name errors name abc is not defined
339:19 - which is true because we haven't defined
339:21 - the name abc but we are calling this
339:24 - variable which we haven't defined so we
339:27 - get this exception which says name error
339:30 - next let me define a variable and i'm
339:32 - going to assign
339:34 - some
339:35 - double values here one and two and now
339:38 - what i want to do is i want to call
339:41 - some method so you can see some methods
339:44 - are available for this tuple
339:47 - now let's call some random method using
339:50 - this double variable it'll give us an
339:53 - error which says attribute error tuple
339:55 - object has no attribute whatever
339:58 - attribute i have provided here so this
340:00 - attribute is not present in the tuple
340:03 - object
340:04 - also when you call a method let me call
340:08 - some other method which is not there and
340:11 - once again when i press enter once again
340:13 - i get this error which says attribute
340:16 - error because this function is not
340:18 - present in the tuple object so these are
340:22 - all
340:23 - exceptions in python attribute error or
340:26 - name error or type error or zero
340:29 - division error all are exceptions in
340:32 - python
340:33 - now if you want to see more exceptions
340:36 - you can use the help
340:38 - inbuilt method and then you can write
340:41 - built-ins and then press enter it gives
340:43 - me the name error once again because i
340:46 - need to first of all
340:49 - import this built-in module so import
340:52 - built-ins and i'm going to once again
340:54 - use help and inside the parentheses
340:57 - built in and then press enter
340:59 - which is going to give me this kind of
341:01 - output and when i go
341:03 - at the top of this output so let me just
341:06 - scroll
341:07 - at the top and here you will see under
341:10 - the classes
341:11 - there is an object class and under the
341:14 - object class there is a base exception
341:16 - class and under the base exception comes
341:19 - the exception class and under the
341:21 - exception there is a big list of
341:23 - exceptions
341:24 - which you can see here so zero division
341:27 - error we have already seen or when you
341:30 - scroll down name error we have already
341:32 - seen so all the exceptions which python
341:35 - may throw are all listed here so if you
341:38 - want to see the list of all the
341:40 - exceptions you can just give this method
341:43 - which is help
341:45 - built in but before that you need to
341:47 - import this built-in module and then
341:50 - it's going to show you this kind of
341:52 - output and you will also be able to see
341:54 - all these exceptions in python now let
341:57 - me show you a real life example
342:01 - of exceptions in python so what i'm
342:03 - going to do is i'm going to
342:05 - define some variables here so first
342:07 - variable is result and i'm going to
342:09 - initialize it with the value none
342:12 - and then i'm going to declare two
342:15 - variables let's say a
342:18 - which takes an input and we want to ask
342:21 - the user to provide some numbers so
342:23 - let's say
342:24 - number
342:25 - one using the variable a and in the same
342:29 - way i'm going to declare a variable b
342:32 - which also asks the user to provide
342:34 - a second number but you already know
342:37 - that this input will return the string
342:39 - so we can just convert this string into
342:43 - a float let's say so i'm going to just
342:46 - cast the output of this input string to
342:50 - a float value and then what i want to do
342:53 - is i want to save
342:55 - the division of the two numbers a and b
342:58 - into the result so a divided by b i want
343:02 - to save it into the result and then at
343:05 - last i would just want to print the
343:07 - value of the result let's run this
343:10 - program so right click run
343:12 - the file name and then let me provide
343:15 - some numbers here so
343:17 - 5
343:18 - and 6 and press enter it's going to give
343:22 - me the result which is the division of
343:24 - these two numbers
343:26 - let me run the program once again
343:28 - and this time i will provide 10
343:31 - and the second number is equal to 0 here
343:34 - and we know that when we divide
343:36 - some number by 0 we get this exception
343:39 - which says 0 division error and you will
343:43 - also observe that as soon as this error
343:46 - is thrown so this error comes from this
343:49 - line line five so when you click on this
343:51 - line it shows us that this error is
343:54 - coming from this line which is the
343:56 - division of these two numbers and as
343:58 - soon as this exception occurs
344:01 - all the code which we want to execute
344:05 - after that will not be executed so we
344:07 - were printing this result here but it's
344:10 - not printed let me print something else
344:13 - here so i'm going to just say end
344:16 - and once again i'm going to run the
344:18 - program i'm going to provide the same
344:21 - inputs here and you can see
344:23 - neither this statement is printed nor
344:27 - the end is printed so whenever an
344:30 - exception occurs python stops whatever
344:34 - it is doing so in our case whenever this
344:37 - exception is thrown at this line both
344:40 - these statements will not be executed
344:43 - and why these two lines of code will not
344:45 - be executed because we haven't handled
344:49 - this exception so python allows us to
344:52 - handle the exception
344:54 - which we are not doing right now that's
344:57 - why it stops everything whenever this
345:00 - exception occurs so how to handle these
345:03 - types of exceptions so you can handle
345:05 - these type of exceptions using a
345:08 - try accept
345:10 - keyword so just write try and then under
345:14 - the try you write whatever you want to
345:16 - test and then you write
345:18 - accept keyword here so just write accept
345:21 - and then under the accept you
345:24 - write some code which you perform
345:27 - when the exception is thrown so i'm
345:29 - going to just say this error which is
345:32 - float division error okay so this is
345:36 - what i'm going to print and don't forget
345:38 - to put colon in front of accept and try
345:42 - so let me run the code and let me give
345:44 - the same condition so 10 and second is 0
345:47 - and this time you will see that this
345:50 - exception is not thrown and the result
345:53 - is also printed and the end line is also
345:56 - printed you can see here and also this
346:00 - line
346:00 - is executed which comes from the accept
346:05 - statement which says float division
346:07 - error so whenever you use try accept
346:10 - notation first of all your code under a
346:13 - try will be evaluated and if it throws
346:16 - some exception then whatever code you
346:19 - write under the accept will be executed
346:22 - and then all the other statements will
346:24 - be executed whatever comes after this
346:27 - try accept code so this time no error is
346:31 - thrown and we have handled this error
346:35 - and you can see clearly it says that
346:37 - float division by zero which means it
346:40 - comes to the accept condition so now we
346:43 - are handling this error which is 0
346:46 - division error
346:47 - now in other condition when this error
346:50 - is not thrown so we will just give some
346:53 - valid value 10 and 5 so no zero division
346:57 - error will be thrown and when i press
347:00 - enter you will see that result will be
347:03 - printed and and will be printed by these
347:06 - two lines but no
347:08 - except statement will be printed so this
347:11 - statement is not executed because
347:14 - this code has not thrown any error
347:17 - because there is no error occurred now
347:20 - as i have shown you
347:21 - that
347:22 - all the exceptions are under exception
347:26 - class so we can also write here
347:29 - exception
347:30 - and then we can just write this notation
347:33 - exception as e
347:35 - and this will show us
347:38 - more details of the error okay so i'm
347:41 - going to just
347:43 - write here
347:44 - error is equal to and then i'm going to
347:47 - just print whatever the content of e is
347:51 - and once again when i run the code and i
347:53 - will give the number with the zero here
347:58 - and you will see it prints
348:00 - this error which says float division by
348:04 - zero so this is printed using this e
348:07 - keyword which shows us the correct error
348:10 - i have also shown you that this
348:12 - exception is the base class of zero
348:15 - division error so for example when i
348:18 - will try to know the type of
348:21 - this error e and when i run the code
348:24 - once again
348:25 - and let me provide this input once again
348:28 - you will see that this error is of type
348:31 - 0 division error so we know that this
348:34 - exception is thrown from this class so
348:36 - instead of writing this generic
348:39 - exception class we can also
348:41 - use this zero division error here and
348:44 - now whenever this specific error is
348:47 - thrown then only this will be printed
348:51 - here so let me run the code once again
348:53 - and let me give this input here and you
348:56 - will see once again this line of code is
348:58 - printed using this statement and that
349:01 - means zero division error is caught by
349:04 - this line of code and then the statement
349:08 - under that is printed now let's say this
349:10 - line of code throws some other kind of
349:14 - error other than zero division error so
349:17 - let me just remove this type casting of
349:19 - float here
349:21 - that means it's going to throw us some
349:23 - other kind of error which is not zero
349:25 - division error and let me run the code
349:28 - now
349:29 - and i will provide two numbers here once
349:32 - again
349:33 - and you will see
349:34 - that now
349:36 - this error is different which is type
349:39 - error which says unsupported type string
349:43 - and float so why is this happening we
349:45 - are
349:46 - catching the exception using this accept
349:49 - keyword but
349:50 - we are only catching the zero division
349:53 - exception we are not catching the type
349:56 - error exception that's why our program
350:00 - is stopped and these two lines of code
350:02 - is not executed so you need to either
350:06 - use the base class of the exception
350:08 - which is this one exception and when you
350:11 - run the code and when you write these
350:14 - input it will be handle and you can see
350:17 - this time
350:18 - type error is caught it's not a zero
350:21 - division error but the type error which
350:23 - comes because
350:25 - the type which we have provided here is
350:28 - string and we are dividing
350:30 - string
350:31 - by a float value which throws this error
350:34 - so if you want to catch all the
350:35 - exceptions you use this base class but
350:38 - it's not a good practice you need to
350:41 - have information about your exceptions
350:44 - so i'm going to once again write this
350:46 - zero exception error here
350:48 - and what i can do more here is i can add
350:51 - one more accept
350:54 - statement here and this time instead of
350:56 - zero division error i can say
350:58 - catch also type error okay so i'm going
351:02 - to just
351:04 - write type error and here zero division
351:07 - error so we know from where this error
351:09 - is coming and when i run the code once
351:12 - again
351:13 - and when i give the inputs
351:15 - you will see
351:16 - that this error is coming from this line
351:20 - of code so
351:22 - this accept statement is catching your
351:25 - exception which is type error
351:28 - now when i just add this
351:30 - typecast of float once again and when i
351:33 - run the code once again and when i
351:35 - provide 10 and 0 once again you will see
351:38 - this error is caught by the other accept
351:42 - statement which is this statement
351:45 - which is used to catch the zero division
351:49 - error so you can also provide multiple
351:52 - accept statement in order to catch
351:55 - multiple
351:56 - exceptions in python so this is how you
351:59 - can do exception handling in python
352:02 - there is more to exception handling
352:04 - which i will cover in the next video in
352:07 - the last video we have seen how to use
352:09 - exception handling in python and we have
352:12 - seen how to use this try accept
352:15 - statement in order to catch the
352:17 - exceptions
352:19 - now in this video also we will talk more
352:21 - about exception handling in python and
352:24 - we will talk about else and finally
352:28 - statement with this try accept statement
352:32 - so i will be using the same code which i
352:34 - have used in the last video so i will
352:36 - highly recommend you to watch the last
352:38 - video if you haven't seen that now to
352:41 - start with at the end of this try accept
352:44 - statement we can also use the else
352:48 - statement so you can just write else
352:50 - and for now
352:52 - i will just print here for example
352:55 - underscore underscore
352:56 - else underscore underscore
352:59 - and also we can use a keyword called
353:03 - finally with our try accept statement
353:07 - and here also i'm going to just print
353:10 - underscore underscore
353:13 - finally underscore underscore so what
353:15 - does this else and finally statement do
353:18 - let's see by running our program so i'm
353:21 - going to run the program and now i'm
353:23 - going to give some valid input so that
353:26 - our program will not throw any errors so
353:30 - i'm going to just divide 10 by 5 and
353:32 - then press enter and you will see what
353:35 - is printed here so first of all else is
353:37 - printed then finally is printed and then
353:40 - the result is printed using this print
353:43 - statement and then at the end this and
353:47 - string is printed so in this scenario
353:50 - there was no exception thrown
353:52 - by the code that's why none of these
353:55 - exception statements are printed so you
353:58 - can use else statement whenever your
354:01 - code does not throw any exception so
354:04 - whenever your code doesn't throw any
354:07 - exception
354:08 - else statement will be executed but when
354:12 - this finally statement is executed so
354:15 - let me give you one more scenario
354:18 - and then we will discuss about the final
354:20 - statement and this time i'm going to
354:23 - intentionally write 0 here which is
354:25 - going to throw the exception and i'm
354:28 - going to press
354:29 - enter and you can see zero division
354:32 - error is thrown which is caught here and
354:36 - this statement is printed first
354:38 - and then this finally keyword is printed
354:41 - using this statement and at the end
354:44 - these two lines of code are executed so
354:47 - once again let's talk about the else
354:49 - statement you can see whenever your code
354:53 - throws an exception
354:55 - then this else statement will not be
354:58 - executed the else statement will only be
355:00 - executed whenever your code doesn't
355:04 - throw any exception but what's with
355:06 - finally statement so we have seen in the
355:09 - case of exception this finally is
355:12 - printed and in the case of no exception
355:15 - also this finally is printed so this
355:17 - finally statement is guaranteed to be
355:20 - executed
355:21 - whether exception occurs or does not
355:25 - occurs so the only code which is
355:28 - guaranteed to be executed in all these
355:31 - lines is the finally statement finally
355:34 - statement is always executed whether
355:38 - your code throws any error or it doesn't
355:41 - throw any error
355:43 - now in which cases you might want to use
355:46 - this finally statement
355:48 - so sometimes whenever you use files you
355:52 - need to close these files
355:56 - after opening them whether the exception
355:58 - occurs or not it is mandatory to close
356:02 - your files and in those cases you can
356:04 - use this finally statement the next
356:07 - example is for example you are using any
356:11 - database and you are opening that
356:14 - database right and for some reason your
356:18 - connection is lost with your database
356:21 - then the exception is thrown and in the
356:24 - final statement you can reconnect to
356:27 - your database
356:28 - using the reconnect code of the database
356:32 - so in final statement you would want to
356:35 - execute that code which you think that
356:38 - have to be executed whether error
356:41 - happens or does not happens so in all
356:44 - those scenarios you can use the finally
356:47 - statement now the next question arises
356:50 - is
356:50 - whether we can use this else and the
356:53 - final statement without the accept
356:56 - statement the answer is you can already
356:59 - see here
357:00 - no so you cannot use this else statement
357:04 - without the accept statement so you have
357:07 - to use accept in order to use
357:10 - this else statement
357:12 - but when i remove the accept and the
357:15 - else statements you can see there is no
357:18 - error now so you can use the try and
357:21 - finally without the use of accept or the
357:26 - else statement because the code under
357:29 - finally will always be executed whether
357:32 - your code throws any error or not so
357:35 - it's independent of this accept
357:38 - statement or the else statement so this
357:42 - is how you can use else and finally
357:44 - statements with the try and accept
357:48 - keywords now in this video i'm going to
357:50 - show you how to raise an exception in
357:53 - python
357:54 - now raising an exception is similar to
357:57 - through an error or exception in the
358:00 - languages like java or c plus plus
358:04 - so python allows us to use a keyword
358:08 - called raise
358:09 - and that raise statement or keyword
358:13 - allows the programmer to force a
358:15 - specific exception to occur
358:19 - so let's get started and let's see this
358:21 - raise statement with an example
358:24 - so to start with i have created
358:26 - a class called coffee cup which have a
358:29 - init method which takes one argument
358:32 - which is the temperature and i'm just
358:34 - initializing the value of temperature
358:36 - using this init method and this coffee
358:39 - cup class also have one more method
358:41 - which is called drink coffee and inside
358:44 - this drink coffee method i have some
358:46 - conditions
358:48 - so if the temperature is greater than 85
358:51 - then
358:52 - i print coffee is too hot if the
358:55 - temperature is less than 65 then i print
358:58 - coffee is too cold
359:00 - and if the temperature is between
359:03 - 65 and 85
359:06 - then i print that coffee is okay and
359:09 - here i have created an instance of
359:11 - coffee cup class with an argument which
359:14 - is 75 to start with and i'm just calling
359:17 - this method drink coffee from this
359:20 - object so let's run the code and let's
359:22 - see what happens so because the 75 is
359:25 - neither satisfying this condition
359:27 - nor this condition so the answer which
359:30 - is printed here is coffee okay to drink
359:34 - now when i provide for example 101
359:38 - temperature value here and when i run
359:40 - the code once again it will say coffee
359:43 - too hot
359:44 - if i say coffee temperature is 10
359:47 - it says coffee too cold
359:50 - now in these two situations when the
359:53 - coffee is too hot or the coffee is too
359:56 - cold i can also throw an exception
359:59 - and show the user some kind of message
360:03 - so instead of printing that coffee is
360:05 - too hot i can use a keyword called raise
360:10 - and then
360:10 - i can use any class of exception so we
360:15 - can use the exception class or any sub
360:18 - class of exception and you can see this
360:21 - exception class comes in this built-in
360:23 - module so i'm going to just use this
360:26 - exception which is the base class
360:30 - and same i'm going to do
360:32 - here
360:33 - when the coffee is cold and i'm going to
360:36 - comment these two print
360:38 - statements
360:39 - and now when i run the code it throws an
360:43 - exception without any error so it throws
360:45 - an exception and after that the
360:48 - execution of program stops so right now
360:51 - temperature is 10 which satisfies this
360:54 - condition so this exception is thrown
360:58 - and that's why we see this exception so
361:01 - in python we can throw an exception
361:04 - using
361:05 - this keyword raise and this exception
361:07 - class or any subclass of this exception
361:11 - class now in the last video also i have
361:12 - shown you how to see all the sub classes
361:15 - which are under the exception class to
361:18 - see them you can just open your python
361:21 - console and in the python python console
361:24 - you just need to
361:26 - import built-ins and then press enter
361:29 - and now you use a method called
361:33 - help and inside the help method you use
361:36 - this keyword built-ins and then press
361:39 - enter which is going to give you a big
361:41 - list here and when you scroll up at the
361:44 - top you will see classes here and under
361:47 - the classes you will see base exception
361:50 - and we have used this class which is
361:52 - exception you can see here so to raise
361:55 - an exception you can use this exception
361:58 - class or any sub class under this
362:01 - exception so you can use arithmetic
362:03 - error or you can use resource division
362:06 - error buffer error whatever error is
362:09 - appropriate for your exception you can
362:13 - use from this list so right now i have
362:16 - just used the exception class which is
362:19 - the base class to throw an exception
362:22 - here instead of exception i can also use
362:24 - for example
362:26 - uh exception called value error which is
362:29 - also the sub class of this exception
362:32 - class and now when i run the code it
362:35 - will show me the value error so this is
362:38 - the one way of throwing an exception
362:41 - in python now with these exceptions you
362:43 - can also pass an argument inside the
362:46 - parenthesis so you can write exception
362:49 - and then in the parenthesis you can
362:51 - write
362:52 - the message whatever you want to show
362:54 - when this exception is thrown so here i
362:57 - can just write coffee is too hot and for
363:01 - the another exception i'm going to just
363:04 - say coffee too cold and when i run the
363:07 - code
363:08 - because it's a value exception which
363:10 - comes
363:11 - from this statement it shows the value
363:15 - error exception and then the message
363:17 - which we want to show so we are just
363:19 - showing coffee to cold so here it also
363:23 - prints the same message which we have
363:25 - given as the first argument of this
363:28 - exception error class so you can either
363:31 - raise an exception with the base class
363:33 - exception or the sub class of the base
363:36 - class exception for example value error
363:38 - and you can also give an optional
363:40 - argument here which is the message which
363:43 - will be displayed at the time when this
363:46 - exception is thrown so this is how you
363:48 - can raise or throw an exception in
363:50 - python in the last video we have seen
363:53 - how to raise an exception in python
363:56 - using this raise keyword and we have
363:59 - seen how to raise an exception using the
364:03 - base class which is exception or the
364:05 - subclasses of this exception class for
364:07 - example the value error or any other
364:10 - error which is the subclass of this
364:12 - exception
364:14 - now in this video i'm going to show you
364:15 - how you can create your custom
364:18 - exception classes and use them to raise
364:21 - exception in python
364:23 - so let's get started so i'm going to
364:25 - create a custom exception class here so
364:29 - let me create a class and i'm going to
364:31 - name it as coffee to
364:34 - hot exception and to create your own
364:37 - custom exception class you need to
364:39 - inherit from the exception class so you
364:43 - just need to provide exception as the
364:46 - superclassia inside the parentheses and
364:49 - then after the colon you can just define
364:52 - the init method to provide the message
364:56 - so it takes one argument
364:58 - for example msg which stands for message
365:01 - and now what we need to do is we need to
365:04 - pass this message
365:06 - to
365:07 - the constructor of this exception class
365:10 - and how to do that you can do that using
365:12 - the super function so you can use super
365:16 - and then
365:17 - call the init function
365:19 - here which means we are calling the init
365:21 - method of this exception class using
365:24 - this super function and we just need to
365:27 - pass the message which comes as an
365:31 - argument of your custom exception class
365:34 - to the super class which is the
365:36 - exception class and that's your custom
365:39 - exception class now i can pass this
365:42 - class instead of this base exception
365:45 - class
365:46 - similarly to create the coffee
365:50 - to cold class i can once again write
365:53 - coffee to cold here and instead of using
365:56 - this subclass of exception i can give
366:00 - here my own custom exception class so
366:03 - let's run this program and let's see
366:04 - what happens so because right now the
366:07 - temperature which we have provided here
366:08 - is 10
366:09 - which means this falls in this condition
366:12 - which says coffee too cold so we
366:16 - are seeing this exception which says
366:19 - coffee too cold and then it's going to
366:22 - show us this message which says coffee
366:24 - too cold now we have made this exception
366:26 - class explanatory enough so that we
366:29 - don't require this coffee too cold
366:32 - message instead of this coffee too cold
366:34 - message we can give some more
366:36 - information
366:38 - for the user for example we can write
366:41 - here coffee temperature and then we can
366:44 - provide the information of the coffee
366:47 - temperature which the user has provided
366:49 - so self dot underscore underscore
366:52 - temperature and same we can provide
366:56 - in the coffee to hot
366:58 - exception
366:59 - message one more thing which we need to
367:01 - do here is we need to convert this
367:03 - temperature into a string so we can use
367:06 - this mesh third
367:08 - str to convert from the integer or the
367:12 - float value to the string value so this
367:15 - is just the type casting from the
367:17 - integer to the string and now we are
367:20 - going to run our program and see what's
367:23 - the result here so you can see now the
367:26 - result says coffee to cold exception and
367:29 - then it shows the temperature which is
367:31 - provided
367:32 - by the user let's say just temperature
367:34 - we change from 10 to 100 and once again
367:37 - run the code now it's going to say
367:40 - coffee too hot and it's going to display
367:43 - the temperature of coffee which is
367:45 - hundred here so let's rewind what we
367:47 - have learned about creating our own
367:51 - custom exception class
367:53 - so in order to create your own custom
367:55 - exception class you need to inherit from
367:58 - this exception
367:59 - base class or the super class and then
368:02 - you can create any custom class with any
368:05 - name and for passing the message which
368:08 - you provide as the first argument of
368:10 - your exception you can just create an
368:13 - init method which takes this message and
368:16 - pass it to the init method of your super
368:20 - class which is the exception class so
368:23 - this is how you can create your own
368:25 - custom exception classes and use them to
368:28 - raise the exception in python in this
368:31 - video we will talk about this special
368:34 - keyword which is underscore underscore
368:37 - name
368:38 - underscore underscore and we will see in
368:41 - which situations we use this keyword
368:44 - and why do we use this special if
368:48 - statement which is name is equal to
368:50 - underscore underscore
368:52 - main underscore underscore
368:55 - so let's get started
368:57 - so to start with you can see i have two
369:00 - files here one is mymath.py
369:04 - and other is test.py
369:07 - both the files are in the same directory
369:11 - in my project so now what i will do here
369:14 - is i will define a very simple method
369:17 - which is add which takes two argument a
369:21 - and b
369:22 - and it's going to return
369:24 - the sum of a and b so we have already
369:27 - seen how to create these kind of
369:30 - simple functions and now what i'm going
369:33 - to do is i'm going to use this print
369:35 - function to call
369:37 - this add
369:38 - function
369:39 - and here i'm going to just give
369:42 - two numbers here so nothing special
369:44 - about this code now what i'm going to do
369:47 - next is i'm going to import this file
369:50 - which is my math dot py file into the
369:53 - test dot py and now i'm going to just
369:56 - use print and then i'm going to use this
370:00 - module name which is my math to call
370:03 - this function which is there inside this
370:05 - mymath.py
370:07 - file
370:08 - and then
370:09 - i'm going to provide two values here
370:11 - once again into this add function so
370:15 - let's say 7 and 6. now let me run this
370:18 - test dot py file first in which i am
370:21 - importing this my math dot py file so
370:24 - right click and then run test
370:26 - which is going to run this program
370:29 - and what you will see here is it prints
370:31 - 26 which is the sum of
370:35 - 10 and 16 which is printed using this
370:37 - print statement
370:39 - and then you will see 13 which is
370:42 - printed using this print statement which
370:45 - is the sum of these two numbers which we
370:48 - have provided in test dot py now i have
370:52 - a simple question is this a correct
370:54 - response because i just want to call
370:58 - the add method from
371:01 - mymath.py file into the test dot py and
371:05 - i don't want to print any result which
371:09 - is coming from this print statement
371:12 - because i just want to use my math
371:14 - mymath.py as a module and we just want
371:18 - to use the functions inside this
371:21 - mymath.py file not any special code
371:25 - which is written here so that's where we
371:27 - use this special condition which is if
371:30 - underscore underscore name underscore
371:33 - underscore is equal to underscore
371:35 - underscore main underscore underscore
371:37 - and under this condition we use whatever
371:40 - code we want to execute
371:42 - and this name
371:44 - is a special built-in keyword in python
371:48 - whose value is equal to either the
371:50 - module name which is my math or its
371:52 - value is equal to underscore underscore
371:55 - main underscore underscore so under what
371:58 - condition the value of underscore
372:00 - underscore name
372:02 - becomes the module name and in what
372:04 - condition underscore underscore name
372:06 - underscore underscore contains this
372:08 - value which is mean so whenever you run
372:11 - this
372:12 - mymath.py file as the main python file
372:16 - so whenever i run
372:18 - this file which is my math dot py file
372:22 - then the value of name
372:25 - becomes this which is underscore
372:27 - underscore main underscore underscore
372:30 - let's print the value of this variable
372:33 - and then we will see
372:35 - how this value changes in different
372:38 - conditions
372:39 - so once again i'm going to run this code
372:42 - and you will see the value of this
372:44 - special variable becomes underscore
372:47 - underscore main underscore underscore so
372:49 - whenever you will run this
372:51 - mymath.py as the main file then only the
372:55 - value of this special keyword underscore
372:57 - underscore name underscore underscore
373:00 - becomes
373:01 - this main value now if i import this my
373:05 - math module into some other file for
373:08 - example test dot py and then use the
373:11 - functions from this module
373:14 - then let's see what happens so i'm going
373:16 - to just right click on the test dot py
373:19 - now and then i'm going to run it and you
373:22 - will see the value of
373:25 - this underscore underscore name
373:27 - underscore underscore is now is equal to
373:30 - the name of your module okay so my
373:34 - module name is
373:36 - mymath.py so here it just prints the
373:39 - module name and you will also see that
373:42 - because we have provided this condition
373:44 - this statement is not executed and only
373:49 - the statement which we have written here
373:51 - is executed because this condition
373:54 - checks for the name value which checks
373:57 - whether we are running this
374:00 - mymath.py file as the main file or we
374:04 - are importing this file into the other
374:07 - file and we are just using the functions
374:09 - inside that module so this condition is
374:12 - similar to
374:14 - for example main method in the c plus or
374:19 - the java programming language and what
374:22 - does the main method do in those two
374:24 - languages the main function is the main
374:27 - entry point of your program so this
374:31 - condition is performing the same
374:33 - operation we can run these two files
374:35 - using the terminal also so in python you
374:38 - can just click on this option which says
374:41 - terminal which opens the terminal in
374:44 - your pycharm ide in the same folder in
374:47 - which you are currently working in
374:50 - and then i can use
374:51 - this python command to call this
374:55 - mymath.py file first of all so i'm going
374:58 - to just use mymath.py which is going to
375:02 - run this math dot py and you can see if
375:06 - we run this mymath.py as the main file
375:10 - then the value of this special keyword
375:12 - name becomes main otherwise when we are
375:15 - going to run this test dot py file in
375:19 - which we are just importing this
375:22 - mymath.pi file and then when i press
375:24 - enter you will see that now the value of
375:28 - this name
375:30 - variable becomes the name of your module
375:33 - which is my math so in this way you can
375:36 - use this special condition
375:38 - in python in this video i'm going to
375:40 - show you how you can create a text file
375:42 - in python and write in it
375:45 - so let's get started so to start with we
375:49 - use
375:50 - a built-in function which is open
375:52 - and it takes two argument
375:54 - first is the name of the file which we
375:58 - want to create or read
376:00 - so let's say i want to just create a
376:03 - file which is
376:04 - demo
376:05 - dot txt in the same folder in which i am
376:09 - working in so you can see i'm working in
376:11 - my file handling project and there is
376:14 - only one file there which is test dot py
376:18 - and this demo dot txt file will be
376:20 - created in the same folder now the
376:23 - second argument which we want to give
376:25 - here is the mode so there are several
376:28 - types of modes which we can use with
376:31 - this open function
376:33 - to work with the files so let me show
376:36 - you the list of some of these modes
376:39 - so you can see on the left hand side i
376:42 - have listed the modes so you can use the
376:45 - r
376:46 - or r plus or w or w plus or a or b now r
376:53 - is used to read from the file and if you
376:56 - don't provide any mode to this function
377:00 - then the default mode is the read mode
377:04 - now if you want to write to a file you
377:07 - use this write mode with a keyword w so
377:11 - we are going to use this
377:13 - w keyword in order to write to the file
377:17 - so let's use this w keyword here and
377:20 - then this open
377:22 - function returns a file object so let's
377:26 - store this file object into a variable
377:30 - now generally we call this file object a
377:34 - file handler and using this file handler
377:37 - we can work with the file on which we
377:41 - are working on so this file handler will
377:43 - be used to work on this file which we
377:47 - want to create now in the next line i
377:50 - will just use this file handler and then
377:54 - i can call some methods here you can see
377:57 - there is a list of methods i can call on
378:00 - this file handler which is returned by
378:04 - this open function
378:05 - so to write
378:07 - into a file i can use
378:09 - the write function
378:11 - and here inside the write function you
378:15 - can provide any text whatever you want
378:18 - to write to the file so let's say i just
378:21 - want to write this line of string
378:24 - to my text file which i'm creating so i
378:28 - can just
378:29 - paste this text here and then after
378:31 - writing to a file when you are finished
378:34 - working with the file you use once again
378:38 - this fh
378:39 - and then call a method called close on
378:43 - it now what does this close function do
378:46 - so this close function is used to close
378:49 - the file and immediately free up any
378:53 - system resources
378:55 - used by your file handler which is fh
378:59 - and it's a good practice to use this
379:02 - whenever you are done with the handling
379:06 - of your file so always remember to use
379:09 - this close function after you are done
379:11 - with the handling of your file so this
379:14 - is a good practice but i would say you
379:16 - must call this function and that's it
379:19 - so this w mode if the file demo dot text
379:24 - doesn't exist it's going to create the
379:27 - file and then it's going to write this
379:30 - text into the file so wmod is
379:33 - responsible for creating the file also
379:36 - and if the file already exists
379:39 - it will overwrite the previous string by
379:42 - the string which you are writing
379:45 - using this write function so let me just
379:47 - run this code and you will keep eye on
379:50 - this project because this file will be
379:52 - created inside this project so i'm going
379:55 - to right click and then run this test
379:58 - file
379:59 - and you will see as soon as i run this
380:02 - test file
380:03 - there is one more file created here
380:06 - which is demo dot txt and when i click
380:09 - on this file you can see the same text
380:13 - appears here which we have written using
380:16 - the write function
380:17 - now if you want to provide the line
380:20 - breaks you can provide them using
380:23 - backslash n and i'm going to once again
380:26 - run the code so remember when the file
380:28 - doesn't exist
380:29 - the w mode is going to create the file
380:32 - and if the file already exists which it
380:35 - does now
380:36 - then it's going to overwrite it so i'm
380:38 - going to run the program once again and
380:41 - see the content of this demo.txt and you
380:44 - can see this string is split into two
380:48 - lines which is done by this backslash n
380:52 - so let me just split the screen so you
380:54 - will see
380:56 - the demo in the real time so on the
380:59 - right hand side i have my demo.txt file
381:02 - and on the left hand side i have this
381:05 - code on which i'm working on so let's
381:07 - write something else in this file so
381:09 - instead of writing this
381:11 - big line of text into the file what i
381:15 - want to do now is i want to
381:17 - use a for loop to print 10
381:20 - lines into this demo.txt file so i'm
381:24 - going to use a for loop for that and i'm
381:28 - going to just write for
381:30 - i
381:30 - in range
381:33 - and let's say the range is 10 and then
381:36 - we will call our write function using
381:38 - this
381:39 - fh
381:40 - file handler and then what i want to
381:42 - write here is let's say this is line
381:46 - number modulus d and i will just replace
381:51 - this mod d with the line number
381:54 - and then i will just provide the line
381:57 - break after that
381:59 - and in the previous videos we have
382:01 - already seen that when you use this
382:03 - modulo symbol and then give some value
382:07 - here for example i then this mod d will
382:10 - be replaced by this i right so let's run
382:14 - the code and let's see what happens now
382:17 - so i'm going to run this code and now
382:20 - you will see that this code prints this
382:23 - is line number zero this is line number
382:26 - one because the range starts from zero
382:30 - so in order to print the line number
382:32 - from one what we can do here is
382:35 - we can use this parenthesis here let me
382:39 - just move this to the side so inside the
382:42 - parenthesis we can use i plus one so we
382:45 - can add
382:47 - one every time this value of i is
382:49 - printed so it will start from one so
382:52 - let's run the code once again and you
382:54 - can see now
382:56 - it prints this is line number one line
382:58 - number two three four up to ten now you
383:01 - might have already observed that
383:04 - whenever i run the code this demo dot
383:07 - txt file is overwritten every time when
383:11 - i run this code so the old text is
383:15 - overwritten by the new text now in order
383:19 - to avoid the overwriting of the text
383:21 - what we can do is we can use
383:24 - a special mode which is a here
383:28 - and a stands for append and this append
383:31 - mode is used to append the text to the
383:35 - file so let's replace this
383:37 - w mode with the a mode now okay
383:42 - and you can see this is the previous
383:44 - content of the demo.txt file and now
383:47 - when i run the code
383:49 - you will see
383:50 - the previous content
383:52 - is staying there and the new content is
383:56 - appended to the same file so a we use to
384:00 - append to the existing content of the
384:04 - file now let me go to the list of modes
384:06 - once again and you will see there is a
384:08 - special mode w plus also which means if
384:12 - you want to read and write at the same
384:15 - time you use this w plus mode
384:19 - and this mode is going to create a new
384:22 - file if the file doesn't exist
384:25 - otherwise if file already exists it's
384:27 - going to overwrite to the file which
384:31 - already exists also you will see a
384:34 - special mode b here which is used for
384:37 - the binary file such as images or other
384:41 - binary files this r and r plus mode we
384:44 - will see
384:46 - in the next video and i'm going to show
384:48 - you how to read from the file using
384:51 - these modes in python in the next video
384:54 - so let's go to our code once again
384:56 - and in the videos in which i have shown
384:58 - you how to use exception handling i told
385:01 - you we can use try with the finally
385:05 - keyword so try and we can enclose this
385:08 - for loop inside the try block and let's
385:12 - do this and then in the finally we can
385:15 - add the closing of
385:18 - this file and what does this finally do
385:21 - if you remember this finally block is
385:24 - always called in the case exception is
385:27 - thrown by this code or if exception is
385:31 - not thrown so this fh dot close is
385:35 - definitely will be called whenever we
385:38 - use this finally keyword in order to
385:42 - call the fh dot close function so you
385:46 - can either use this kind of code in
385:48 - order to work with your file handler and
385:52 - then use this close function with this
385:54 - file handler at the end of the handling
385:57 - of the file
385:58 - otherwise pythons provide the shorter
386:01 - form of writing the same type of
386:04 - notation and this notation is you use a
386:08 - keyword with and then you call open
386:12 - function and you can provide the same
386:15 - type of arguments here for example
386:18 - demo.txt
386:20 - and append
386:21 - and then you use as keyword and then you
386:25 - write the name of the file handler for
386:27 - example fh as you have done here and
386:31 - then you provide this colon and inside
386:33 - this with statement you work with your
386:36 - code for example we work with the file
386:40 - writing with this for loop so this whole
386:43 - code including the try and finally block
386:47 - is equivalent to this kind of code which
386:50 - is the shorter
386:52 - form of writing the same code so this
386:55 - with statement is going to always call
386:58 - this close method with your file handler
387:01 - when you are done with the handling of
387:04 - your file so you don't need to
387:07 - explicitly call this try finally block
387:10 - in order to work with your file
387:13 - this is enough to work with the file so
387:16 - either use this notation or this
387:19 - notation both are equivalent to each
387:22 - other now the last thing which i want to
387:24 - show here is let me just use
387:27 - the with statement in order to work with
387:29 - this demo.txt file is for example you
387:33 - don't want to create this demo.txt file
387:37 - into the current project instead you
387:39 - want to create this file into some
387:42 - folder on your computer so let's say i
387:44 - want to create this file inside this
387:47 - folder which is inside my c directory so
387:50 - i can just copy this whole path from
387:53 - here
387:54 - and then i can just paste this path with
387:57 - the backslash here and the important
388:00 - thing to note here is on windows you
388:02 - always need to use the double bag
388:05 - slashes in order to provide the file
388:08 - path okay so use these double
388:11 - backslashes to provide the file path so
388:14 - see inside the c directory i have these
388:17 - files folder and inside the file folder
388:20 - right now you can see this is empty and
388:23 - now when i run this code let me just
388:26 - change the mode to w which is for write
388:29 - mode and i'm going to run the code and
388:31 - as soon as i run the code this demo.txt
388:34 - file is created here and you can also
388:37 - see the content of the file on the right
388:39 - side which is this is line 1 up to this
388:43 - is line number 10. so this is how you
388:45 - can create a text file and write into it
388:48 - using python in the last video we have
388:51 - seen how to create a file in python and
388:54 - how to write content in that file in
388:58 - python
388:59 - now in this video i am going to show you
389:00 - how you can read the content of a text
389:04 - file
389:04 - using python
389:06 - now if you remember in the last video i
389:09 - have told you that you can use this open
389:12 - function to open any text file and this
389:16 - open function takes two argument first
389:19 - is the path of the file with the exact
389:22 - name of the file so because this
389:25 - demo.txt file is in the current folder
389:28 - in which i'm working in
389:30 - that's why i haven't provided any exact
389:34 - path i can just give the file name here
389:36 - but if you have the full path then you
389:39 - can provide for example c colon
389:41 - backslash and then whatever is the
389:43 - folder name and then the file name so
389:47 - either you can provide the exact path of
389:50 - this file with the file name or you can
389:53 - provide the file name if this file is
389:57 - present in the same directory in which
390:00 - your python script is there now the
390:02 - second argument which this open function
390:05 - takes is the mode of opening this file
390:09 - so we have seen in the last video when
390:11 - we write w here or a here that means we
390:16 - want to write or append to the file now
390:20 - in order to read from the file this mode
390:23 - here should be r which is the read mode
390:27 - in the last video we have seen this
390:28 - table in which we have seen that we can
390:31 - use this r or r plus mode in order to
390:35 - read the file or if you want to read and
390:37 - write at the same time you can use this
390:40 - r plus mode now if you see here i have
390:43 - also written here that r is the default
390:46 - mode so when i don't give any argument
390:50 - here as the second argument which is for
390:52 - the mode
390:53 - then also the default mode is the read
390:56 - mode so let's see how we can read this
390:59 - file which is demo.txt file and the
391:03 - content of file is shown here so in
391:05 - order to read the file you use the file
391:08 - handler and then use the function for
391:10 - example read which is used to read
391:13 - the whole file
391:15 - now in order to print the content of the
391:17 - file you need to
391:19 - use this print function so this fh dot
391:22 - read will provide the string and then
391:26 - using this print function we can print
391:28 - that string
391:29 - so let's run the code and let's see what
391:31 - happens so you can see it prints the
391:35 - whole content of the file now let me
391:37 - minimize this window once again
391:40 - now let's say if you provide some file
391:43 - path which doesn't exist so this file
391:47 - name doesn't exist
391:49 - in the current folder and when i try to
391:51 - read this file let's see what happens
391:54 - so it's going to throw an error and this
391:57 - error says that no such file or
392:00 - directory so if you try to open a file
392:03 - which doesn't exist
392:05 - it will throw an error so you need to
392:08 - give the exact name of the file in order
392:11 - to read it now here we can also
392:15 - be more
392:16 - specific and we can also say that this
392:19 - is a read mode in which i want to open
392:22 - this file and once again when i run the
392:24 - code is going to read the content of
392:27 - this file now let us say i just want to
392:30 - read the first word of first line here
392:33 - so let's say i want to just read the
392:35 - first four character of this
392:37 - line one then i can just write four here
392:41 - which will read the first four character
392:44 - of the line one now if we just want to
392:48 - read the first two words of this
392:51 - line one then you can see the number of
392:54 - character here four for this and then
392:56 - there is a space so five character and
392:59 - then i as
393:00 - is two character more so five plus two
393:04 - seven so when we write seven here then
393:06 - it's going to read the first two word of
393:10 - this line one now let's say i want to
393:13 - read the whole line so instead of some
393:16 - words or some characters i want to read
393:18 - the whole line then i can use a function
393:22 - called read line and this readline
393:24 - function is going to read the first line
393:27 - of the text which is present in my file
393:29 - so i'm going to just run the code and
393:32 - you can see it reads the first line
393:34 - of my text file now if you want to read
393:37 - the next line then you need to use this
393:41 - readline function once again and when i
393:44 - run the code once again it's going to
393:46 - print the second line and so on so if
393:49 - you want to print the three lines then
393:51 - you use this function three times now
393:54 - let's say you want to read some
393:56 - characters of the line one then you can
393:59 - once again write the number of character
394:01 - which you want to read and then run the
394:03 - code and it will print the first four
394:05 - character of the first line
394:08 - and you will observe that when i use
394:11 - this readline function once again the
394:13 - string starts from the ending of the
394:16 - first
394:17 - line so in the first line we have just
394:20 - used the first four characters of the
394:23 - first line
394:24 - now pointer will be set to the end of
394:28 - this first four characters so when you
394:30 - use the read line function once again
394:32 - it's going to start where the first line
394:35 - has ended so first line has ended at the
394:38 - end of the fourth character and then
394:41 - it's going to read the space and then
394:44 - all the line characters which are there
394:46 - so in the second read line statement it
394:48 - has printed this kind of text which is
394:51 - after the first four characters and in
394:54 - the third read line because we haven't
394:56 - provided any argument here so it has
394:58 - printed the whole line here so let me
395:00 - minimize this now let's say you want to
395:02 - read all the lines of this file
395:07 - in the form of the list
395:09 - so you want to read
395:11 - the 10 lines of this file in the form of
395:14 - list you can use a function called dot
395:18 - read lines so here you just need to
395:21 - write dot read lines and this function
395:24 - is going to give you the list of every
395:28 - line in the text so let me run the code
395:30 - first of all and you can see this is the
395:33 - list which starts from a square bracket
395:36 - and the first element of the list is the
395:39 - first line with the
395:41 - backslash n which is the line break
395:44 - comma the second element of the list is
395:46 - the second line of the text which we are
395:50 - reading from here so now we know that
395:52 - this read lines function returns the
395:54 - list so we can also call some index of
395:58 - this list so let's say i just want to
396:00 - read the fifth line of this text then i
396:05 - can just write index 4 because index
396:08 - starts from 0 right so let me run the
396:11 - code once again and it prints this line
396:14 - which is at the line
396:16 - 5. now let's say i want to read the last
396:18 - line i can just say
396:20 - 9 and it's going to print the
396:23 - line number 10
396:24 - of your text file let me minimize this
396:27 - once again
396:28 - now let's say you want to read
396:32 - all the lines of this text
396:35 - one by one
396:36 - and do some operations on each and every
396:40 - line one by one so you can use a for
396:43 - loop for that to iterate over
396:45 - the lines one by one so for let's say
396:48 - line in your fh which is the file
396:52 - handler and then you can print the line
396:55 - one by one so you can call
396:57 - this
396:58 - variable which is line here
397:00 - and now let's run the code and it's
397:03 - going to iterate over this text
397:05 - line by line and every line is printed
397:08 - one by one using this print line
397:11 - statement so let's say you want to count
397:13 - the number of characters in every line
397:15 - you can use this function which is l e n
397:18 - function which is used to count the
397:20 - length of a string and when i run this
397:22 - code
397:23 - now it's just going to print the number
397:25 - of characters in every line now once
397:29 - again let's say you want to count the
397:31 - number of words in every line so we can
397:35 - use a function on this line variable
397:38 - which is a function called split so line
397:41 - dot split which is going to split your
397:45 - line on the basis of character you
397:47 - provide as an argument here so let's say
397:50 - i want to split the line on the basis of
397:53 - a space
397:54 - so let me run the code once again and
397:57 - now you will see that it's going to give
397:59 - me the list of each and every word of
398:02 - every line so this is the first element
398:06 - of the first list and then the second
398:08 - element third element and fourth element
398:11 - and the fifth element so if you want to
398:13 - count the number of words in every line
398:16 - then once again we can enclose this code
398:19 - into
398:20 - a function called len okay so this
398:24 - length is going to give you the length
398:26 - of this list and when i run the code
398:29 - once again it's going to print the
398:31 - number of words in every line of this
398:35 - text file so if you want to count the
398:37 - number of words in every line you can
398:39 - split the words using the space and then
398:43 - using this l e n function you can just
398:46 - find the length of the list which is
398:48 - returned by this split function or if
398:51 - you want to just see the list of words
398:54 - in every line then you can just use this
398:58 - function without the len function and
399:00 - it's going to give you the list of each
399:02 - and every word of every line of your
399:06 - text file and of course to make things
399:08 - easier you can also use this with
399:11 - notation which i've also told you in the
399:13 - last video so you can write with and
399:15 - then this open function
399:17 - and in the open function you give these
399:20 - two argument which is the name of the
399:21 - file and the mode
399:23 - and then you can use as
399:25 - fh for example and then you can execute
399:29 - whatever code you want to execute using
399:31 - this file handler for example once again
399:33 - i want to read the content of the file
399:36 - once again so using this with statement
399:39 - you don't need to use this
399:41 - fh.close function because this width
399:44 - function is going to take care of
399:46 - closing of this handler by itself so
399:50 - this whole code is equivalent to the
399:53 - code which you write whenever you use
399:56 - the try finally block with this
399:59 - code also so this is also possible so
400:02 - let me just remove this code and let's
400:04 - run the code once again
400:06 - it's going to give me the same result as
400:08 - we have seen earlier so in this way you
400:11 - can read the text files in python
400:14 - in this video i'm going to show you how
400:16 - to handle json values in python
400:19 - so first of all what is json
400:21 - so json is a text format which stands
400:24 - for javascript object notation
400:28 - and json is a syntax which is used for
400:31 - storing and exchanging data
400:35 - now if you want to know more about json
400:38 - what is json and how to create jsons and
400:41 - what value you can store in json then i
400:44 - have created a whole video about that so
400:48 - you can watch that video and understand
400:50 - more about json so let's get started
400:52 - with this tutorial
400:54 - and let's see how we can use json in
400:56 - python
400:57 - so to use json in python you use a in
401:02 - build package which is called json so
401:05 - you need to import this inbuilt package
401:08 - which is json now let's say i have a
401:11 - python dictionary so let me create
401:14 - a dictionary in python
401:16 - which have let's say
401:27 - so this is a dictionary in python so in
401:29 - order to convert this dictionary into
401:32 - json you use this json keyword which we
401:36 - have imported here and then call a
401:39 - method called dumps so this dumps method
401:42 - we can call here to convert some python
401:45 - values to
401:47 - a json value and we will pass this
401:50 - dictionary variable a here and in order
401:52 - to print the value of json
401:54 - we can use this print method so i'm
401:57 - going to enclose this json dot dumps
402:00 - method inside our print function now
402:04 - let's run this code and you will see
402:06 - that this json dot dumps function has
402:09 - converted your dictionary into a json
402:14 - value so this is a json text format now
402:18 - the next question which can arise here
402:20 - is what data types this dumps function
402:24 - takes as an argument so it takes a
402:26 - dictionary we already know now but what
402:29 - are the other data types which we can
402:32 - pass as an argument to this dumps
402:35 - function so it turns out that you can
402:38 - provide majority of your collections and
402:41 - your data types as an argument to this
402:44 - dumps function so you can provide
402:46 - dictionary here list tuple string int
402:50 - float or a boolean value any value you
402:53 - can provide here i think sets you cannot
402:56 - provide as an argument here but other
402:58 - than sets you can provide any other
403:01 - format
403:02 - as an argument to this dumbs methods so
403:06 - let me show you how you can provide all
403:08 - these values into this
403:11 - json.dumps function
403:13 - so here in the first print statement i
403:15 - have provided the dictionary in the
403:17 - second print statement i have provided
403:19 - the list in the third we have provided
403:22 - tuple in the fourth statement we have
403:24 - provided the string and then the integer
403:26 - and then float values and then we have
403:28 - provided the two boolean values false
403:31 - and true and at last we have provided
403:34 - this none keyword to this dumbs function
403:39 - so let's run the code and let's see what
403:41 - happens so everything runs fine so that
403:44 - means you can convert from this
403:46 - json.dumbs function a dictionary or a
403:50 - list or a tuple or a string or a decimal
403:53 - or a float or a boolean value into a
403:57 - json value and all these are valid json
404:01 - values now let me go once again to this
404:04 - dictionary method and here also as the
404:07 - json values you can provide any type of
404:10 - values which i have shown here so you
404:12 - can use inside this dictionary for
404:15 - example another dictionary so i can
404:17 - just write
404:24 - so we can also provide a tuple here so
404:26 - let's run this code and it's totally
404:28 - valid so you can see our dictionary is
404:31 - now converted to a json value now this
404:34 - dumps function also takes few other
404:36 - parameters also
404:38 - so we can also provide a parameter
404:41 - called indent here so you need to write
404:44 - indent is equal to and then after that
404:46 - you can write some number here so if you
404:48 - want to give the indent of 4 to each and
404:51 - every element of your
404:54 - json then you can write indent is equal
404:56 - to 4 and let me run the code once again
404:59 - and now you can see
405:01 - this json is printed into a pretty
405:04 - format and the indentation here
405:07 - indentation means this indentation is
405:10 - four spaces for each and every element
405:13 - of your json so if you want to print
405:15 - your json into a pretty format then you
405:19 - can just write indent is equal to and
405:21 - the number of indents you want to give
405:24 - so let us say i want to provide just two
405:26 - indents here and let me run the code
405:28 - once again and you will see now this
405:31 - only have the two indents for every
405:34 - element of this json also you can
405:36 - provide a parameter called
405:39 - separators and as the separators let's
405:42 - say first value i want to provide here
405:45 - is a dot value and the space here and
405:48 - the second value i want to provide here
405:50 - is this equals to symbol so what this
405:53 - separators argument does is it will
405:56 - replace your commas
405:58 - with this dot notation
406:00 - and your colons with this equals to
406:04 - notation and when i run the code you can
406:07 - see
406:08 - now
406:09 - the colon is replaced by
406:11 - the equals to symbol and the comma is
406:15 - replaced by this dot symbol so you can
406:17 - use separators like this also but i will
406:20 - not prefer to use these kind of notation
406:23 - the original notation is the one which i
406:26 - prefer to use which is with commas and
406:29 - these colons one more thing you can use
406:31 - here is the sort keys so you can just
406:34 - write sort keys here and whenever you
406:38 - write true here it's going to sort your
406:41 - json according to their alphabetical
406:44 - orders so you can see right now your
406:46 - keys are assembled in
406:49 - non-alphabetical order so they are
406:52 - assembled in a random manner but when
406:55 - you give sort keys is equal to true here
406:58 - and i am going to run the code you can
407:00 - see age comes first then the marks and
407:03 - then the name and then the object so now
407:06 - your keys are assembled or sorted in the
407:10 - alphabetical order when you use this
407:12 - kind of notation now let's try to save
407:15 - this json value into a json file so in
407:18 - the last video i have shown you you can
407:20 - use this with
407:21 - statement and then you can use
407:24 - open function and we can provide
407:28 - a file name here for example demo dot
407:31 - json so json file always have the
407:34 - extension dot json and the second value
407:38 - we will provide here is the mode so we
407:40 - want to write to the file so that's why
407:43 - we have used w here as fh
407:47 - and then using this fh we can write to
407:51 - this file which we have created so we
407:53 - can pass this json.dumps function here
407:57 - and now
407:58 - your dictionary a will be converted into
408:01 - a json
408:02 - and then this json will be saved into
408:05 - this demo.json file you can see here i'm
408:08 - working inside this file handling
408:10 - project and here i only have
408:13 - dot py file and when i run this code you
408:17 - will see there is one more file which
408:19 - will be created here which is demo.json
408:22 - so i can open this file here and here
408:25 - you will see all our json values are
408:29 - saved in this
408:31 - demo.json file so we have provided these
408:35 - values into the demo.json file let me
408:39 - just split the screen so you will be
408:40 - able to see it correctly so we have
408:43 - provided a name here so name is here
408:46 - age is here
408:48 - marks is here and then the object is
408:51 - here and also
408:52 - the pass is also here so this is how you
408:56 - can write your json values into a file
409:00 - now let's see how we can read the json
409:02 - values from a file so i'm going to
409:05 - remove this
409:07 - dictionary from here and instead of
409:09 - using this write mode i'm going to just
409:11 - use read mode which we used to read from
409:14 - the file and the file we already have so
409:17 - let's say we want to read all this data
409:19 - which we have written into this file and
409:21 - now instead of using this line
409:24 - i need to use fh dot
409:26 - read function here and to print the
409:29 - content what we have read from this file
409:31 - we can use the print function so i'm
409:33 - going to enclose this fh dot read
409:37 - into
409:38 - the print function and let's run the
409:40 - code first of all and when i run this
409:42 - code you can see it prints all the
409:45 - content of this json now one thing which
409:48 - you need to observe here is this fh dot
409:51 - read function is going to give you a
409:53 - string value so to confirm that we can
409:56 - just write type here and we will just
409:59 - see the type of this fh dot read
410:02 - function and i'm going to run the code
410:05 - let's see what's the answer so you can
410:07 - see
410:08 - this read replies you in the form of
410:11 - string so in order to convert the string
410:13 - into some possible format you use a
410:16 - function called json.loads so i'm going
410:19 - to save this string into uh
410:22 - let's say a variable json underscore str
410:26 - this is the variable name and we will
410:28 - assign whatever we read from the file
410:30 - into this variable and now what we can
410:33 - do here is we can convert the string
410:36 - into a json value
410:38 - using a method called json.loads so let
410:41 - me create a variable once again so json
410:45 - value is the variable name and then i
410:48 - can use this json keyword which we have
410:50 - imported
410:51 - dot
410:52 - loads function so just use the loads
410:55 - function and then pass the string as an
410:58 - argument of this loads function so this
411:01 - loads function takes a string and
411:04 - converts it into a json value so now
411:07 - let's print the type of the json values
411:11 - i'm going to just write print type and
411:14 - then we use the json value argument here
411:18 - and then once again run the code and you
411:20 - will see now the json value data type is
411:22 - the dictionary so because now it's a
411:24 - dictionary we can pass some values from
411:28 - it so let's say from this json value
411:31 - dictionary we want to get the name so
411:34 - name here we have stored is max so we
411:38 - can just give the key here name
411:41 - and then run the code it's going to give
411:44 - us the value associated with the name
411:47 - which is max so this json.loads function
411:51 - we use to convert from a json or a
411:55 - string value into a python dictionary so
411:58 - this is how you can handle json values
412:00 - in python in this video i'm going to
412:03 - show you what are iterators in python
412:06 - and how to use iterators in python
412:09 - and at the end i'm also going to show
412:11 - you how you can create your custom
412:14 - iterator class in python
412:17 - so let's get started and let's see first
412:19 - of all what is an iterator but before
412:23 - that we need to understand what is
412:25 - iteration
412:26 - so what is iteration an act of going
412:30 - over a collection is called iteration
412:34 - now what kind of collections we are
412:36 - talking about we have already seen some
412:38 - kind of collections like lists tuples
412:42 - dictionaries sets and other kind of
412:45 - collections
412:46 - and till now what we have seen is we can
412:49 - use a for loop to iterate over a
412:52 - collection so till now what we have
412:54 - learned is for example i'm going to
412:56 - declare a collection which is list in
412:59 - this case and i'm going to just add some
413:03 - values inside the list
413:04 - and once i declare the list i can
413:07 - iterate over this list using a for loop
413:10 - so let's say for i in the collection
413:13 - name
413:14 - and then you can just write
413:17 - print here to print each and every value
413:20 - of this collection a so this for loop
413:22 - iterate over each and every element in
413:25 - the collection and then print the value
413:29 - using this print statement now let's
413:31 - talk about the iterators
413:34 - so what is an iterator
413:36 - iterator is an object which can be used
413:40 - to iterate over our collection now this
413:44 - iterator object has two special methods
413:47 - first is
413:48 - underscore underscore iter underscore
413:51 - underscore and second is underscore
413:54 - underscore next
413:56 - underscore underscore so iterators have
413:59 - these two special methods one is eater
414:02 - and this iter method is going to get you
414:05 - the iterator
414:07 - and the next method is going to give you
414:10 - the next value using this iterator now
414:14 - collections like lists or dictionary or
414:17 - tuple
414:18 - are all iteratable collections that
414:21 - means we can iterate over them and all
414:25 - these collection objects have a special
414:28 - method called eater which is used to get
414:31 - the iterator from these collections so
414:35 - let me show you first of all these two
414:37 - methods inside a collection so when you
414:40 - use dir
414:42 - inbuilt function and give any collection
414:45 - as an argument here and when i press
414:48 - enter you will see a list of functions
414:50 - here and when i scroll
414:52 - little bit right here you will see a
414:55 - special function which is iter so all
414:59 - these collections like lists or
415:01 - dictionary or tuple
415:02 - have this iter method and we can call
415:07 - this itr method to get the object of the
415:11 - iterator and we can call this underscore
415:13 - underscore iter method using a special
415:17 - method called iter without underscore in
415:20 - front and back of it so let me just show
415:24 - you what i'm saying so i'm going to
415:27 - declare a variable id which stands for
415:30 - iterator and then i'm going to use a
415:32 - special method called iter without
415:35 - underscore and this iter method is used
415:40 - to get the iterator so i can just pass
415:44 - my collection here as an argument and
415:47 - this iterator method is going to give me
415:50 - the iterator object of this collection
415:54 - which i was talking about which is
415:55 - underscore underscore iter underscore
415:58 - underscore so let me just press enter
416:01 - and now we have the iterator object and
416:04 - this iterator object we can use to call
416:07 - all the values in the collection so
416:10 - let's once again print the values of our
416:13 - a list and this has
416:16 - these six values and now i can use a
416:19 - special method called next here to get
416:22 - the first value of this collection so
416:25 - i'm going to just pass
416:27 - the i t
416:28 - which is the iterator which we have got
416:31 - from this iter method and then press
416:34 - enter and you will see it will print the
416:36 - first value of your list
416:40 - now once again when you call this next
416:43 - using this i t variable is going to give
416:46 - you the next value of the list and when
416:50 - you call it again and again it's going
416:53 - to iterate over your list and give you
416:56 - the values of the list one by one so
417:00 - let's get all the values so this is the
417:02 - second last value which is nine and then
417:04 - at last it's going to print the last
417:07 - value which is seven now at this point
417:09 - iterator has iterated over all these six
417:13 - values
417:14 - after that when you call this next
417:16 - method once again over this it variable
417:19 - then it's going to give you
417:21 - this exception which says stop iteration
417:25 - so when your iterator is exhausted then
417:29 - it's going to give you the exception
417:31 - which is stop iteration now as i said
417:34 - the collections like list dictionary or
417:36 - tuple have this iteratable object that
417:40 - means we can use the for loop to iterate
417:44 - over these collections so for loop uses
417:48 - the same iterator mechanism to iterate
417:51 - over all these elements of the
417:54 - collection now many times in your
417:56 - programming development career you will
417:58 - have to write a class in order to
418:02 - iterate over some kind of collection so
418:05 - let me show you how you can create your
418:07 - custom iterator class so let me minimize
418:10 - this python
418:11 - console in the pycharm ide
418:15 - and i will just comment these two
418:17 - methods so as i said
418:19 - an iterator always have these two
418:22 - special methods one is underscore
418:25 - underscore iter underscore underscore
418:27 - and the second is underscore underscore
418:30 - next
418:31 - underscore underscore so in order to
418:34 - create your own iterator class you need
418:37 - to implement both these methods so let's
418:40 - create an iterator class and i'm going
418:42 - to just name my class as
418:45 - list iterator class and in this list
418:48 - iterator class first of all i'm going to
418:50 - define uh init method and this init
418:54 - method is going to take any type of list
418:57 - or any type of collection which is
418:59 - iteratable and then inside this init
419:01 - method i'm going to just call
419:04 - a self to create a member variable here
419:08 - and i'm going to name my member variable
419:10 - as dot underscore underscore
419:13 - list
419:14 - and i'm going to just pass the value of
419:16 - a let's name this a as list also so we
419:20 - will be clear so list
419:22 - is equal to list the second member
419:24 - variable which i want to create here is
419:26 - the index variable so the second
419:29 - variable is the index variable which is
419:32 - the index of the list or the collection
419:35 - and let's give the initial value of this
419:37 - index now as i said in order to create
419:39 - an iterator class you need to implement
419:42 - these two methods which are underscore
419:45 - underscore
419:46 - iter method first of all and in this
419:49 - method we are just going to return
419:52 - the value of self so this underscore
419:54 - underscore iter method is going to give
419:57 - you the iterator and let's also
420:00 - implement the method which is underscore
420:04 - underscore next now in this next method
420:07 - first of all when this next method is
420:10 - called what we want to do is we want to
420:12 - increase the value of index so let's
420:15 - call our index member variable and let's
420:18 - increase the value of index by one and
420:21 - the next thing which we want to do here
420:23 - is we want to send the value at this
420:26 - index so we can just return so let me
420:29 - call return first of all and then
420:32 - self
420:33 - dot
420:34 - your list name whatever is your list and
420:36 - then inside these square brackets we
420:39 - call the index which we have incremented
420:42 - by one so self dot underscore underscore
420:45 - index so this statement is going to give
420:48 - you the current value at this index
420:51 - right now and that's basically it so i'm
420:54 - going to just say my
420:56 - list is equal to list iterator and this
421:00 - list iterator takes an argument which is
421:03 - a collection right so let me create a
421:05 - list collection and i'm going to name my
421:08 - list as a and here i'm going to provide
421:12 - some values inside the list
421:15 - so let's say we have these six values
421:18 - inside the list and now we can just pass
421:21 - this
421:21 - list as an argument of our list iterator
421:25 - so once we have this list iterator
421:28 - object we can call
421:30 - our iter method in order to get
421:34 - the iterator object which is this one so
421:37 - let me create one more
421:39 - variable which is i t and then i'm going
421:41 - to call this iter method and i'm going
421:44 - to pass my my list object as an argument
421:47 - of this iter method so now i have the
421:50 - iterator object of this list using this
421:54 - list iterator class and now i can use
421:57 - the print methods let me call a print
422:00 - method and then i can call the next
422:03 - method to iterate over the list using
422:06 - the
422:07 - i t variable
422:09 - so let's run this code once again and
422:11 - you will see it's going to print the
422:13 - first value of the list which is one
422:17 - let's print it two more times and let's
422:20 - run the code once again and you can see
422:22 - it's going to give you the next two
422:24 - values of the list so now we know that
422:26 - this next is going to call every time
422:28 - the next value from this list so let's
422:32 - print all the values of the list using
422:35 - this next method
422:37 - and you can see it prints all the values
422:40 - of this list
422:41 - now when i want to go beyond this
422:44 - after the list iterator is exhausted and
422:47 - let's run the code you will see it's
422:49 - going to give me this error which says
422:52 - list
422:53 - index out of range but this is not the
422:56 - problem of the iterator is the problem
422:59 - of the list now what i have shown you
423:01 - when i have shown you the example of
423:04 - this list iterator in the python console
423:09 - whenever your iterator is exhausted it
423:11 - throws the stop iteration error or
423:14 - exception so let's raise the same kind
423:17 - of stop iteration exception using our
423:20 - class also so i will go to the next
423:23 - method of my class
423:25 - and here
423:26 - i can give a condition
423:28 - and this condition checks whether the
423:31 - value of index so self dot underscore
423:34 - underscore index
423:35 - is greater than or equal to the length
423:39 - of your list
423:41 - so length and the list name is self dot
423:45 - underscore underscore list and when this
423:47 - condition is true we are going to raise
423:51 - an exception so let's
423:53 - use the raise keyword and the exception
423:55 - which we want to raise here is the top
423:57 - iteration exception so let's throw
424:00 - this exception or raise this exception
424:02 - and what this condition is basically
424:04 - going to do is until the last index
424:07 - which is for example in this list the
424:10 - last index is
424:11 - five so under until the last index
424:14 - everything will be okay but as soon as
424:16 - this index becomes 6
424:19 - which is the length of your list also so
424:22 - the length of the list which have 6
424:25 - element is 6 but index will go up to
424:28 - five because the index starts from zero
424:31 - so as soon as this index becomes is
424:34 - equal to the length which means the
424:37 - iterator has been exhausted we can also
424:39 - write double equals to here as soon as
424:42 - the value of index becomes the length of
424:44 - the list we can throw this exception so
424:48 - let's run this code once again and you
424:51 - can see we have used this next method
424:54 - seven times so at the last print
424:56 - statement it's going to give us the
424:58 - error so first of all let me remove the
425:00 - last statement and let's run the code
425:03 - it's going to run fine so you can see
425:05 - everything is fine but as soon as i call
425:08 - this last next method and i know that my
425:12 - iterator is exhausted and when i run the
425:14 - code once again it's going to raise an
425:17 - exception which is stop iteration now
425:20 - one more thing which i said which you
425:22 - can use with your iterators is the for
425:26 - loop so let's try to use this for loop
425:29 - and i'm going to just write for
425:32 - i in your iterator which is i t which we
425:35 - have got using this iter method
425:38 - and let me comment this code also and
425:41 - now i can print each and every element
425:44 - inside the list a so i'm going to just
425:47 - write print i here and let me remove
425:50 - this code from here so you can see
425:52 - the list also and this for loop also and
425:56 - i'm going to run this code once again
425:58 - and you can see this for loop has
426:00 - iterated over our list which we have
426:03 - provided
426:04 - as an argument of this list iterator
426:06 - class
426:07 - and you can see all the
426:10 - values inside the list have been printed
426:13 - using this for loop so in this way you
426:16 - can create your own iterator class in
426:19 - python
426:20 - in the last video we have seen how to
426:22 - use iterators in python now in this
426:25 - video we are going to learn
426:26 - how to use generators in python so first
426:30 - of all what are generators so generators
426:33 - are the simple way of creating iterators
426:38 - now simply put a generator is a function
426:41 - that returns the iterator object on
426:44 - which we can iterate upon so let me give
426:48 - you an example of generators and then we
426:51 - will see
426:52 - why it's a simple way of creating
426:54 - iterators so what i'm going to do is i'm
426:56 - going to create a simple function my
426:59 - func and inside this function i will use
427:02 - a special keyword called yield instead
427:05 - of return now after this keyword yield
427:08 - let's say i want to return some values
427:11 - so i'm going to write first of all a
427:14 - and then once again i'm going to use
427:16 - yield and i'm going to use b here and
427:19 - once again i'm going to use this keyword
427:21 - yield and again i'm going to return c
427:25 - here so if your function contains at
427:28 - least one yield keyword then this
427:31 - function is called a generator function
427:35 - so how this yield keyword is different
427:37 - from the return
427:40 - so in the case of return
427:42 - the statement is immediately terminated
427:46 - entirely so after return you cannot do
427:49 - anything inside a function because after
427:51 - using this return keyword the statement
427:54 - is terminated entirely but the yield
427:57 - statement pauses the function and saving
428:00 - the state of that function so let me
428:03 - demonstrate what i said so i'm going to
428:06 - create
428:07 - a variable x and i'm going to just
428:10 - assign the value of my function to this
428:13 - variable x
428:15 - now on this x i can use
428:18 - a next function so as i said whenever
428:20 - you use at least one yield keyword
428:24 - inside your function it becomes a
428:27 - generator and i also said when you use a
428:30 - generator it returns the iterator object
428:34 - so this myfunc generator function
428:37 - returns the iterator object which we are
428:39 - saving inside the x variable and we can
428:43 - provide this x variable which is a
428:46 - iterator object as an argument of this
428:48 - next function which is going to give you
428:51 - the first value which you use with the
428:54 - yield keyword so let me just run the
428:56 - code so right click and then run
428:59 - the file and you will see it's going to
429:01 - give you the first value which you use
429:03 - with the yield keyword
429:05 - now after that let's say we use
429:08 - this next function two more times then
429:12 - it's going to give you
429:13 - the next value and once again when you
429:16 - use the next function it's going to give
429:18 - you the next value so it's like using
429:21 - the iterator
429:22 - on which you can use the next function
429:25 - but it's much simpler to use because you
429:28 - just need to use this yield keyword
429:32 - instead of implementing the iter method
429:36 - and the next method inside your class
429:39 - which we have done in the last video now
429:42 - after using next three times because we
429:44 - only have
429:46 - used this yield three time
429:48 - let's use the next function fourth time
429:52 - because now
429:53 - in the fourth time your iterator is
429:56 - already exhausted and let's see what
429:58 - happens so you will see it's going to
430:01 - give you
430:02 - this exception which says stop iteration
430:04 - which we have already seen in the case
430:07 - of iterators also which i have shown you
430:10 - in the last video so generators are
430:12 - similar to
430:14 - iterators but they are more simple to
430:18 - use and create so you don't need to
430:21 - throw any exception the generator will
430:23 - take care of throwing this exception by
430:26 - itself so what is the difference between
430:28 - iterators and generators so as we have
430:31 - seen in the last video that in order to
430:34 - create an iterator class we need to
430:37 - implement two methods which are iter
430:41 - method and the next method so if you
430:44 - haven't seen the last video i will
430:46 - recommend you to watch that last video
430:48 - in which i have shown you how to create
430:50 - the iterator class so whenever you need
430:53 - to implement the iterators they are more
430:56 - lengthy and sometimes counter intuitive
431:00 - now in the case of generators the
431:02 - methods like iter and next are
431:06 - automatically implemented so this
431:08 - generator which we have implemented here
431:11 - will return the iterator object on which
431:14 - we can iterate upon so now what's the
431:17 - role of this yield keyword so whatever
431:20 - value you will write after the yield
431:22 - keyword it's going to return that value
431:25 - and immediately after that it's going to
431:27 - save the status of your function so that
431:31 - means for example whenever we call this
431:35 - next function for the first time
431:37 - with this
431:39 - x value then it's going to return the
431:41 - first
431:42 - value which you use with the yield
431:45 - keyword
431:46 - as soon as you do that your function is
431:48 - going to save the status of this
431:52 - iterator that means the iterator is at a
431:56 - and then whenever you call the next
431:58 - method once again your generator is
432:00 - going to remember that last time it has
432:03 - returned the first value and now it's
432:05 - the time to return the next value and
432:08 - this will go on and on until you use
432:12 - this yield keyword so let me give you
432:15 - one more example let's say i will
432:16 - declare a variable n
432:19 - and the initial value of n is one and
432:21 - then i'm going to just
432:23 - yield this value n for the first time
432:26 - and also
432:28 - above the yield keyword i'm going to
432:30 - print the value of n so i'm going to
432:34 - just give this string and after this
432:36 - string i'm going to just print the value
432:38 - of n same print statement i'm going to
432:41 - use before the other yield keywords also
432:45 - and before using this n keyword with
432:47 - other yields
432:49 - statements i'm going to increase the
432:51 - value of n by 1 every time so before the
432:55 - next yield i'm going to increase the
432:57 - value of 1 once again and before
433:01 - the last yield also i'm going to
433:03 - increase the value of n once again so we
433:06 - have used yield three times and every
433:09 - time we are increasing the value of n
433:12 - and let's use the
433:14 - same initialization of my func and also
433:18 - i will use this print statement three
433:20 - times and when i will do this i'm going
433:23 - to run the program and you will see what
433:25 - happens let me use this next function
433:27 - only once and when i run the code it
433:30 - prints the print statement using this
433:33 - print statement
433:34 - and then gives you the value of n which
433:37 - is one
433:38 - at the first yield then we have
433:41 - increased the value of n by one so now
433:43 - the value becomes two so when we call
433:47 - the next
433:48 - method once again it's going to give you
433:52 - the value of n and also it's going to
433:54 - print the next print statement so let me
433:57 - just move this below
434:00 - this expression so we will see the
434:02 - increment here also and similar we will
434:06 - do with the
434:07 - third yield statement so when i use this
434:11 - next third time is going to print the
434:13 - third value so basically your yield
434:16 - keyword is saving the status
434:19 - after
434:20 - it returns the value associated with it
434:23 - and it resumes the status whenever you
434:25 - use the next next function now let me
434:29 - show you one more thing and that is how
434:32 - you can use this yield keyword with the
434:35 - for loop so let's say i will create a
434:38 - for loop and i will say for i
434:42 - in
434:42 - some range and let's say this range is
434:45 - up to 5
434:47 - and after this i want to print the value
434:50 - of i for example so here i will print
434:54 - the value of i and then what i'm going
434:56 - to do is inside this for loop i'm going
434:59 - to return the value of i so now we don't
435:03 - need this n variable so every time from
435:06 - the for loop i'm just returning the
435:10 - value of i
435:12 - in each iteration and let's see what
435:15 - happens so let me use this next function
435:18 - only once
435:19 - and you will see it's going to first
435:21 - print the value of i
435:24 - which is 5 here which is little bit
435:26 - strange i thought i have written here
435:29 - range here but it was something else so
435:32 - let's rewrite range function here
435:35 - inside this we have provided
435:37 - 5 as the range and once again when we
435:40 - run the code it's going to print the
435:42 - value of i which is 0.
435:44 - now every time you use this next
435:47 - function it's going to give you the next
435:50 - value of i which is 0 1 2
435:53 - until
435:54 - the 5. so let me just run this code once
435:57 - again and you will see it's going to
435:59 - give you the value until this for loop
436:02 - is valid and as soon as you go outside
436:05 - the range it's going to give you this
436:08 - exception which is stop iteration
436:10 - exception so everything in generator is
436:13 - working similar to the iterators which
436:16 - we have seen in the last video
436:19 - so how about we recreate the class which
436:22 - we have written in the last video when i
436:25 - have shown you the iterators example
436:28 - which is list iterator class so i'm
436:31 - going to write a similar code to iterate
436:35 - over this list of numbers so what i want
436:38 - to do is i want to rewrite this code
436:41 - using the generators so let me just
436:43 - split this editor so you will see
436:46 - iterators and generators side by side so
436:50 - i'm going to close this from here so on
436:52 - the left hand side we have a generators
436:54 - file and on the right hand side we have
436:57 - the iterators file so let me just remove
437:00 - this code from here and what i'm going
437:02 - to do is i'm going to create a new
437:04 - function and i'm going to name it as
437:08 - list
437:09 - iterator function with the smaller l and
437:13 - smaller i so this function takes a list
437:17 - as we have seen in the case of list
437:19 - iterators which was taking a list as the
437:24 - argument so here also we are going to
437:26 - give this argument which is list and
437:29 - inside this function what i'm going to
437:31 - do is i'm going to use a simple for loop
437:34 - for i
437:35 - in
437:36 - and i will iterate over the list which
437:39 - we have provided as an argument so we
437:42 - will iterate over this list using the
437:44 - for loop and then we are going to yield
437:48 - the value of i
437:50 - every time when we iterate over this
437:52 - list using this for loop and that's it
437:56 - so it's that simple to recreate the
438:00 - whole class of iterators using this
438:04 - generator so the biggest advantage here
438:06 - when we create the generator is we don't
438:10 - need to implement this iter method or
438:14 - this next method
438:16 - and we also don't need to raise this
438:20 - exception from our function or a class
438:23 - whenever we create the generator the
438:26 - generator function will take care of
438:28 - this top exception
438:30 - by itself so the only thing which
438:33 - remains now is we just need to create a
438:36 - list so we will use the same list as we
438:39 - have used with the list iterator class
438:44 - and instead of this class i will just
438:46 - replace it with this list iterator
438:49 - function and you don't need to do
438:51 - anything so you don't need to use this
438:53 - iter method to get the iterator object
438:57 - this function is going to return the
438:59 - iterator object by itself so now we just
439:02 - need to call the print function and the
439:05 - next function and inside the next
439:07 - function we just need to pass this
439:10 - variable which we have got from this
439:13 - generator function which we have created
439:16 - and when we run this code so i'm going
439:18 - to right click and run this code once
439:20 - again it's going to give you the first
439:23 - value of the list which is one and when
439:26 - you do this
439:27 - several time let's say we call this
439:31 - function
439:32 - six times which is the length of your
439:34 - list also is going to iterate over your
439:37 - list and print each and every value
439:40 - which we have inside the list now if you
439:43 - use this value seventh time that means
439:46 - our iterator is exhausted it's going to
439:48 - automatically throw the stop iteration
439:51 - error so we don't need to create or
439:53 - raise this top error by ourself
439:56 - generator function will take care of it
439:59 - by itself
440:00 - now as we have seen in the last video
440:02 - also we can use a for loop with the
440:06 - iterators so you can also write for
440:09 - x in your my list variable and then you
440:14 - can print the value of x every time and
440:18 - this is going to give you the same
440:20 - result and you can see it gives us the
440:23 - same result which is all the elements of
440:26 - your list which you have provided here
440:29 - so now this whole
440:31 - list class is performing the same
440:34 - operation as this small piece of code
440:38 - which we call generators so let's
440:41 - discuss the advantages of using
440:43 - generators first we have already seen
440:46 - that generators are easy to implement
440:49 - second is generators are more efficient
440:52 - if you want to perform the same logic
440:54 - with the normal function so let's say
440:57 - you want to perform the same
440:59 - functionality which is to iterate over
441:02 - the list of these numbers and let's say
441:05 - this list is big enough let's say this
441:09 - list length is 1 million then if you are
441:12 - using the normal function your normal
441:14 - function has to store all the one
441:17 - million values inside that list variable
441:20 - and that's not very memory efficient but
441:24 - whenever you use
441:25 - this kind of generators
441:28 - they are more memory efficient
441:30 - because they are not going to store one
441:32 - million values in the variable your
441:35 - generator function is going to work on
441:38 - the values one by one so let's say you
441:40 - want to stream some data let's say you
441:42 - want to stream a video
441:44 - and you don't know the length of the
441:46 - video
441:47 - then in those cases the generators are
441:51 - much efficient because they will work
441:53 - upon your stream in steps it's not going
441:57 - to wait for your stream to come entirely
442:00 - and then work upon it so generators are
442:02 - good to work with streams also so these
442:05 - are the few advantages of using
442:08 - generators in python so that's how you
442:10 - use and create generators in python in
442:14 - this video i'm going to show you how you
442:16 - can pass the command line arguments to
442:19 - your python script so to start with i
442:22 - have a script called
442:23 - myparser.py
442:26 - and in order to pass the command line
442:28 - arguments to this dot py file first of
442:31 - all we need to import a built-in module
442:35 - which is called arg parse module now
442:38 - using this arg parse module we can parse
442:42 - the parameters which is passed using the
442:46 - command line to this script so let's see
442:50 - how we can parse those parameters
442:53 - so first of all i'm going to declare a
442:56 - variable called parser and then i'm
442:59 - going to use this arg parse keyword
443:02 - which we have imported and there is a
443:04 - special class here which is called
443:07 - argument parser which we are going to
443:09 - use now this argument parcel class takes
443:13 - an optional parameter which is the
443:16 - description which we will see little bit
443:18 - later so the first step is to initialize
443:21 - your parser
443:23 - the second step is to add the parameters
443:27 - which you want to parse so this we will
443:30 - see in a bit but let's see the next step
443:34 - which is actually parsing the arguments
443:37 - which is passed
443:38 - using the command line so let me declare
443:41 - one more variable which will be our
443:43 - arguments which we want to parse and
443:46 - then we will use this parser variable
443:48 - which we have created and call the
443:51 - method called parse arg so now once you
443:54 - have used this method pass args with
443:58 - this parser variable then you will have
444:01 - all your arguments
444:03 - into this odds variable so let's run
444:06 - this script and let's see what happens
444:08 - when we run this script so in order to
444:11 - open the terminal in pycharm you can
444:14 - just click on this option which says
444:16 - terminal and this is going to open the
444:18 - terminal in the pie charm ide now it
444:21 - depends in which project you are working
444:23 - in so if you see some other location
444:26 - which is opened using this terminal you
444:29 - just need to provide the path where your
444:31 - project is so i'm going to right click
444:34 - on my file and then i'm going to copy
444:37 - the path of this file so right click and
444:39 - copy path and i will just do cd and i
444:43 - will paste this path which i have copied
444:46 - and i will remove the name of the file
444:48 - because i just want to cd to the
444:50 - directory in which i'm working in
444:53 - so now i'm in the directory in which
444:56 - this
444:57 - myparser.py file is present now in order
445:00 - to run this python script i can use this
445:02 - python keyword and then the name of my
445:06 - file which is my parser dot py file now
445:09 - whenever you import the arg pass module
445:12 - and you initialize this module there is
445:15 - a special help parameter which is
445:17 - available so you can
445:19 - write minus h here and then press enter
445:22 - and you will see
445:24 - that this help parameter is
445:26 - automatically present whenever you
445:29 - import this arg pass module and
445:32 - initialize it so this is one way of
445:34 - running your script you can also run
445:36 - your script on your windows or linux
445:39 - terminal the process is same so you need
445:42 - to cd to the directory in which you are
445:44 - working in so i'm going to once again
445:46 - copy the path and paste it here
445:50 - and once i'm in this directory i will
445:53 - just write python and the name of the
445:56 - script which is my parser and then
445:59 - hyphen
446:00 - h which is for help and it's going to
446:02 - give me the same kind of result so you
446:05 - can run your python script either on the
446:07 - windows command prompt or in the pie
446:10 - charm the choice is totally yours so i'm
446:12 - going to use this
446:14 - pie charm terminal so let me minimize
446:16 - this terminal for now now as i said you
446:19 - can pass some argument
446:21 - here in the argument parser class so the
446:25 - argument which you can provide here is
446:27 - that description which is the
446:28 - description you want to give whenever
446:31 - somebody runs this script so this is
446:33 - going to be the description whenever you
446:35 - run your file on the terminal so i'm
446:38 - going to once again run this python file
446:42 - and you can see the description is
446:44 - printed here now now how to pass the
446:46 - command line arguments
446:48 - so you can pass two kinds of arguments
446:52 - as the command line arguments one are
446:54 - called positional arguments and other
446:58 - are called optional arguments so first
447:01 - of all we will see how to pass the
447:02 - positional arguments so in order to pass
447:05 - the positional argument you use your
447:07 - parser variable and then call a method
447:11 - called add argument here
447:14 - and first of all inside the add argument
447:16 - you give the name of your argument for
447:19 - example i want the user to provide two
447:21 - numbers and i want to perform some
447:23 - mathematical operations on these two
447:25 - numbers so i can store these two numbers
447:28 - into some variables and these variables
447:31 - i can define here so the first variable
447:33 - name i want to provide here is
447:36 - num1 and then as the second argument you
447:39 - provide the help parameter so in the
447:42 - help what you do is you provide some
447:45 - help about the argument which you want
447:48 - to receive
447:49 - from the user in a same way i can
447:52 - provide the number 2 argument and i can
447:55 - just change the name of the argument 2
447:58 - and the help description of argument two
448:01 - now the third parameter or argument
448:04 - which i want to provide using command
448:06 - line is the operation so let's say we
448:09 - want that user should provide some kind
448:12 - of mathematical operations to work with
448:15 - so in the help i can just write provide
448:18 - operator so these are the three
448:20 - arguments which i want the user to
448:22 - provide now once these three arguments
448:25 - are provided by the users these three
448:27 - arguments will be parsed using this
448:30 - function and then all these three
448:32 - argument list will be assigned to this
448:35 - args variable so we can just print the
448:37 - value of this arg
448:39 - variable and let's see what is the
448:42 - content inside the args so i'm going to
448:44 - open the terminal once again so after
448:47 - the python keyword and the name of your
448:49 - script you provide the first number
448:52 - which is let's say 84 the second number
448:56 - let's say it's
448:58 - 41 and the operator so let's say i want
449:01 - to provide the operator plus to add
449:03 - these two numbers and then i'm going to
449:05 - press enter
449:06 - and you will see
449:08 - this print statement is going to print
449:11 - the value of number 1 which is 84 the
449:15 - value of number 2 which is 41 and the
449:19 - value of operation which is plus here
449:23 - you will also observe that all these
449:26 - three numbers are present in the form of
449:29 - string so in order to work on these
449:31 - numbers we need to convert these numbers
449:35 - first into a float value or the integer
449:38 - value and then only we will be able to
449:40 - work on these numbers so how we can
449:44 - provide the type of these two numbers so
449:47 - that our script understands that these
449:50 - are the numbers and not the strings so
449:53 - the way in which you provide the type of
449:55 - the argument is using the type keyword
449:59 - here and then you provide whatever type
450:02 - you want for your
450:04 - argument or the parameter so here i have
450:07 - written type is equal to float and in
450:10 - the second argument also i have written
450:12 - type is equal to float and by default
450:15 - the type is string so if you don't
450:17 - provide any type it's a string so now we
450:19 - have provided a type to our first two
450:22 - numbers and let's run the script once
450:24 - again
450:25 - so now you will see that these values
450:28 - are no longer string values but now they
450:32 - are some float values also whenever you
450:36 - run the script with
450:38 - minus h keyword which is the help
450:40 - keyword it's going to show
450:42 - that these are the positional arguments
450:46 - which is required by the script which is
450:48 - number one number two and operation and
450:52 - also we can use minus h as the help and
450:56 - also it's going to give us the
450:57 - description of this script which we have
451:00 - provided here so now we can perform some
451:02 - mathematical operations on the arguments
451:05 - so let's perform some mathematical
451:07 - operations on the arguments so we can
451:10 - extract these argument using the args
451:13 - keyword and then calling the name of the
451:15 - variable which we have provided so args
451:18 - dot number one is going to give you the
451:21 - value of number one so what i want to do
451:23 - here is i want to know the operation
451:26 - first of all so args dot operation and
451:29 - if this operation is equal to plus then
451:33 - i will just add these two numbers so i'm
451:36 - going to just say args dot num 1 plus
451:40 - args dot num 2. now after adding these
451:43 - two numbers i need to save these numbers
451:45 - into a variable so let's create a
451:47 - variable called
451:49 - result here and i will initialize this
451:51 - result by none so initial value of
451:54 - result is none
451:55 - and then we will assign the addition of
451:58 - the two numbers to the result parameter
452:00 - and then at the end we will just print
452:03 - the value of the result and the same i
452:06 - will do for the other operations also so
452:08 - let's define some more operations
452:11 - second operation i want to provide here
452:13 - is the subtraction third operation i
452:16 - want to provide here is the
452:17 - multiplication and let's say fourth
452:19 - argument i want to provide here is the
452:22 - power of operation so here i can use a
452:26 - inbuilt function which is p o w and then
452:29 - i will just pass the first number as the
452:32 - first parameter so args dot num one and
452:36 - the second number as the second
452:38 - parameter so now let's run the script
452:40 - once again and let's see what happens
452:42 - when we run this script once again so
452:45 - i'm going to provide the same parameters
452:47 - 84 41 and operation plus here and then
452:51 - press enter and you will see
452:54 - the result here is the addition of these
452:57 - two numbers because our plus condition
453:00 - is mat for the operation and then it's
453:03 - going to just add these two numbers and
453:05 - print the result we can make this result
453:09 - little bit more sensible by just saying
453:12 - this is our result so i'm going to just
453:14 - say
453:15 - result colon and then provide the comma
453:17 - here and once again let's run the same
453:20 - script with the minus operation this
453:23 - time so i'm going to provide the minus
453:25 - operation now and then press enter and
453:27 - it's going to still give me the addition
453:29 - this is strange because i think i have
453:32 - done some mistake here which is i
453:35 - haven't provided or changed these
453:38 - operators from here so in the case of
453:41 - minus i need to provide the hyphen here
453:44 - and in the case of multiplication i need
453:46 - to provide the s tricks here
453:48 - so let's run the code or script once
453:50 - again with minus and now you will see
453:54 - as a result you will see the subtraction
453:57 - of these two numbers let's run this
453:59 - script with pow and then press enter
454:03 - it's going to give me the power of
454:04 - operation of these two numbers so this
454:07 - is how you can provide the positional
454:09 - parameters now as the name suggests
454:12 - these are the positional parameters that
454:15 - means every parameter have its own
454:18 - position
454:19 - and this position is defined by the
454:22 - declaration here so the first position
454:25 - is for the number one second position is
454:27 - for number two and the third position is
454:30 - for
454:31 - this operation parameter so if you
454:34 - change the position for example i will
454:36 - provide the
454:38 - plus operator
454:39 - first and then these two numbers this
454:42 - will give me an error and it will say
454:45 - that i was expecting a number as the
454:48 - first argument but you have provided
454:51 - some string parameter here also if you
454:54 - don't provide any parameter so i'm going
454:56 - to just say
454:58 - first two numbers i will provide but
455:00 - operations i haven't defined then also
455:03 - it's going to give me an error and this
455:06 - will say that operation is not defined
455:08 - because we haven't defined any operation
455:11 - here so it's going to give us an error
455:14 - so there is one way of solving this
455:16 - error which is by providing the default
455:18 - value and in order to provide the
455:20 - default value you use the keyword
455:22 - default and then provide the value of it
455:25 - so let's say by default the operation is
455:29 - plus always and when i run this code
455:31 - once again it's going to still give me
455:34 - this error
455:35 - because these are the positional
455:37 - arguments we cannot change the position
455:41 - of this argument and we cannot provide
455:43 - the optional values here and that's
455:46 - where the optional parameters comes in
455:49 - so using these optional parameters you
455:52 - can provide the optional values so let
455:55 - me show you how you can provide the
455:56 - optional parameters so the way you
455:59 - provide the optional parameters is by
456:02 - simply adding double hyphen symbol in
456:05 - front of your parameters so i have
456:08 - provided double hyphen symbol in front
456:10 - of each and every argument which is
456:13 - provided to the script and let's go to
456:16 - the terminal once again
456:17 - and this time
456:19 - we need to provide the name of the
456:22 - parameter which is hyphen hyphen num
456:25 - 1 space the value of it for example 80
456:29 - and then we need to provide the second
456:31 - number which is hyphen hyphen
456:33 - num
456:34 - 2 and then after the space the value of
456:36 - number 2 and let's say i don't want to
456:38 - provide the operation now and when i
456:41 - press enter here it's still going to
456:43 - give me the result which is plus because
456:47 - now we have the default value of
456:49 - operation which is plus and if i don't
456:53 - provide the value using these command
456:56 - line arguments then the default value of
456:59 - this operation will be taken which is
457:02 - plus if we provide any argument here so
457:06 - hyphen hyphen let's say operation and we
457:09 - will provide the value of operation
457:11 - let's say
457:12 - minus here that is going to give us the
457:14 - subtraction of these two values so
457:18 - whatever argument you will provide here
457:20 - the default value is overwritten by that
457:24 - value so this is how you can use the
457:26 - optional parameters and in order to use
457:28 - the optional parameters you also need to
457:31 - give the name of your optional
457:33 - parameters
457:35 - now whenever you use the optional
457:36 - parameters it depends upon you at which
457:40 - position you want to use these optional
457:43 - parameters so i can use for example num
457:47 - one at first position operation at the
457:50 - second position let's say operation is
457:53 - multiply now and then i will provide the
457:56 - num2 at the third position it doesn't
458:00 - matter now because the position is
458:03 - irrelevant here because we are providing
458:07 - the name of the variable and then the
458:09 - value so value will be passed using the
458:13 - name variable and not by the position
458:16 - now there is one more notation which you
458:17 - can use with these optional parameters
458:21 - and this is the short form of whatever
458:25 - parameter name you want to give so let's
458:28 - say i want to give n
458:30 - as the number one and let's say i want
458:32 - to give i as number two and for
458:35 - operation i want to provide this letter
458:38 - o so this is the short form of these
458:42 - three values so n
458:44 - is for number one i is for number two
458:47 - and o is for operation and also in front
458:50 - of each and every letter here we need to
458:52 - provide a single hyphen so either you
458:56 - can provide this kind of notation with
458:58 - uh explanatory keyword and double hyphen
459:02 - or a single letter and a single hyphen
459:05 - in front of it so now in order to use
459:08 - this kind of notation what i can do here
459:11 - is first of all let me call python and
459:13 - the name of my script and let's say
459:15 - first of all we call the help and you
459:18 - will see
459:19 - this help shows this letter also which
459:22 - is minus h or help and for our
459:26 - parameters we have minus n or the number
459:29 - one minus i or number two or minus o or
459:34 - operation so the way we provide these
459:37 - shorthand notation is we just need to
459:39 - write the name of the notation which is
459:41 - minus n for number one let's provide the
459:45 - value of number one and minus i for
459:48 - number two so you use this equal to
459:50 - symbol
459:51 - in between the value and your shorthand
459:55 - notation not the space so this time i'm
459:57 - using the equals to symbol so i equals
460:01 - 70 and the value of minus o is equal to
460:06 - let's say plus this time and then press
460:08 - enter
460:09 - and it's going to give you the addition
460:11 - of these two numbers so for this
460:13 - shorthand notation you use the equal to
460:16 - symbol not the space in between the name
460:19 - and the value so this is how you can
460:21 - provide the command line arguments to
460:24 - your python script in this video i'm
460:26 - going to show you how to use lambda
460:28 - functions in python
460:30 - in addition i'm going to show you how to
460:33 - use lambda functions with functions like
460:36 - map reduce and filter
460:39 - so let's get started
460:41 - so as we all know that python is a
460:44 - multi-paradigm language and it also
460:47 - supports functional programming
460:50 - and the lambda functions falls into
460:53 - functional programming paradigm so what
460:56 - are lambda functions and how to use
460:59 - lambda functions
461:01 - so lambda functions in python are also
461:04 - called anonymous functions because they
461:07 - don't have any name
461:10 - sometimes they are also called one line
461:13 - functions because they can be written in
461:16 - a single line of code
461:19 - so let's see how we can define a lambda
461:21 - function so as you can see here i have
461:24 - three normal function defined here one
461:27 - is the double functions which doubles
461:30 - whatever arguments you provide here
461:33 - second is a simple addition function and
461:36 - third function is the function which
461:38 - takes three arguments and provide the
461:40 - product of the three arguments which are
461:44 - provided so let's see how we can convert
461:46 - these three functions into the lambda
461:49 - functions so the first function which we
461:51 - have is the double function so i'm going
461:54 - to once again write double as a variable
461:57 - and then i can use a special keyword
461:59 - called lambda to create a lambda
462:02 - function so as you can see here this
462:04 - double takes one argument which is x
462:07 - so to provide an argument in the lambda
462:10 - function you just write the name of the
462:14 - argument
462:15 - and then after the colon you write the
462:18 - body of the function so in our case this
462:22 - double function have this body which is
462:26 - return x multiplied by 2. so in lambda
462:30 - function if you want to return some
462:32 - value you don't need to use this return
462:36 - keyword you can directly write x
462:39 - multiplied by 2 here
462:42 - so this lambda function is equivalent to
462:46 - this double function which is a normal
462:49 - function so this double function takes
462:51 - one argument which is x which we are
462:54 - providing here and it returns the
462:56 - multiplication of x by 2
462:59 - which we are writing after the colon
463:03 - now let's write the add function using
463:06 - lambda function so i'm going to once
463:09 - again declare
463:10 - a variable called add and once again use
463:13 - lambda
463:14 - and this time this add takes two
463:17 - arguments so i can provide multiple
463:20 - arguments in lambda functions by comma
463:23 - as you do with the normal functions so i
463:26 - will provide two arguments and then
463:28 - after the colon you just write
463:31 - whatever you want to return so we want
463:34 - to return x plus y so we can simply
463:37 - write x plus y here and that's it so in
463:40 - a single line we can define the lambda
463:43 - function
463:44 - now the third
463:46 - function we want to provide here is the
463:48 - product function so i will declare a
463:51 - variable product and this time i just
463:53 - need to provide three arguments using
463:55 - the comma separator
463:57 - and after the colon i just provide the
464:01 - multiplication of these three values
464:04 - which is x multiplied by y multiplied by
464:08 - z so all these three normal functions is
464:12 - equivalent to these lambda functions so
464:16 - i'm going to just comment these three
464:17 - functions out by pressing ctrl and
464:20 - forward slash and now let's see how to
464:23 - use these lambda functions
464:25 - so you create a lambda function and then
464:28 - assign the result into some variable and
464:31 - then you use these variable as you use
464:34 - the normal functions so i'm going to
464:36 - just use print to call the double
464:40 - variable
464:41 - and then using the parentheses i just
464:44 - provide the argument which this lambda
464:47 - function takes so this lambda function
464:49 - takes one argument which is x so i can
464:52 - provide the value of x here so let's say
464:54 - i want to provide 10
464:56 - as the value of x same i will do with
465:00 - the add function and the product
465:02 - function so add a function takes two
465:05 - argument
465:06 - and the product function takes three
465:09 - argument so i can simply write these
465:12 - functions like this like a normal
465:14 - function and then i can just run my
465:17 - script
465:18 - and you will see it's going to give us
465:20 - the same result as the normal function
465:24 - gives us
465:25 - so the first is the double of 10 second
465:28 - is the addition of these two numbers and
465:31 - third is the product of these three
465:33 - numbers now you might ask a question
465:36 - that these functions which we have
465:38 - defined normally we can also define
465:41 - these function in a single line because
465:44 - there is not much logic
465:46 - inside these functions so we can declare
465:49 - these functions like this and they are
465:52 - also the single line functions so why do
465:56 - we use lambda functions so the lambda
465:59 - functions are generally used with the
466:02 - functions which takes function as an
466:05 - argument
466:06 - or returns function
466:09 - as the result so in functional
466:12 - programming functions are the first
466:14 - class citizens that means we can pass
466:18 - the functions as the normal argument so
466:21 - as you can see here we have passed some
466:24 - static or constant value as an argument
466:27 - here but we can also pass the functions
466:31 - as in arguments and in addition
466:34 - you can also return a function
466:37 - from a function so instead of this
466:41 - multiplication
466:42 - you can create a function and return
466:45 - from a function
466:46 - and that's where
466:48 - these lambda functions are useful
466:51 - so let me give you some examples of
466:54 - where you can use
466:55 - lambda functions so as i said you can
466:58 - use lambda functions with the functions
467:01 - like filter reduce and map
467:04 - so let me illustrate how these functions
467:07 - work so i'm going to declare a list of
467:11 - some numbers so now i have created a
467:13 - list which have these six elements now
467:16 - let's see how to use a map function with
467:19 - a lambda function so there is a inbuilt
467:22 - function called map in python which
467:25 - takes two argument one is a function and
467:29 - second is an iteratable variable and we
467:33 - all know that collections like lists or
467:37 - tuples or the dictionaries are all
467:41 - iteratable collections so we can use map
467:44 - keyword and then here we can define a
467:48 - lambda function so let's say i want to
467:50 - double each and every element of this
467:53 - list
467:54 - so i can define a function which takes
467:57 - one argument x and then we are going to
468:00 - return
468:01 - the double of this value so this is the
468:04 - function which we have passed to this
468:07 - map function because the first argument
468:09 - which map expects is the function
468:14 - the second is the iteratable collection
468:17 - so we are going to pass this list as the
468:19 - second value let me define let's say my
468:24 - list here so it will be more clearer so
468:27 - i'm going to just pass this my list as
468:30 - the second variable so what this map
468:33 - function is going to do is it's going to
468:36 - apply this lambda function to each and
468:39 - every element of this list which is
468:43 - basically going to double the value of
468:45 - each and every element of the list now
468:48 - let's assign the result of this map
468:50 - function into a variable so i'm going to
468:53 - assign the result into some variable and
468:56 - then i'm going to print the result first
468:59 - of all
469:00 - so this
469:01 - variable contains the map function so
469:05 - let's see first of all what is the
469:07 - result and then i'm going to show you
469:10 - how to get the result which we are
469:12 - expecting so you can see here whenever
469:14 - you want to print the value of map it's
469:18 - going to just give you
469:20 - this kind of result so how we can get
469:23 - the list
469:24 - out of this map value
469:27 - in order to get the list out of this map
469:30 - value you need to cast this value into a
469:34 - list and how to convert this value into
469:37 - a list you use a list function and then
469:41 - pass the result of the map function
469:44 - as an argument of this list function
469:47 - let's run the program once again and you
469:50 - will see now
469:52 - that the result is a list and in the
469:55 - result every element of the list is
469:59 - doubled so basically what this map
470:01 - function has done is it has applied this
470:06 - function to each and every value of the
470:09 - list and this function just doubles each
470:13 - and every value of the list now you
470:15 - might say that this is a very simple
470:18 - function which we are applying to the
470:20 - list so let's make things little bit
470:23 - complex and let's say now i have two
470:27 - lists one is my list one and other is my
470:32 - list two and this other list contains
470:35 - some other set of elements so let me
470:39 - just change the values which this second
470:42 - list contains and let's say using this
470:45 - map function i want to add
470:48 - each and every element of these two
470:50 - lists and create a third list with the
470:54 - addition of let's say 2 and 1
470:57 - and 5 and 4
470:59 - 8 and 7 10 and 8 like this so how can i
471:03 - create a map function
471:06 - to achieve this so let's say this is a
471:08 - variable b
471:10 - and here inside the lambda function we
471:14 - give the second argument which is y so
471:16 - it takes two argument and then
471:19 - it adds the
471:21 - value of x and y so we can do like this
471:24 - and then as the second argument we are
471:27 - passing the first list and also as the
471:30 - third argument you can pass
471:32 - the second list here so now what this
471:35 - map function is going to do is it's
471:38 - going to take the first element of the
471:40 - first list and the first element of the
471:43 - second list and then it's going to apply
471:46 - this function to the first elements of
471:49 - both these list which is to add
471:52 - these two numbers
471:54 - so let's see what is the result which we
471:56 - get using this map function so i'm going
471:59 - to just convert the answer or the result
472:02 - into a list and then i'm going to just
472:04 - pass this b variable as an argument of
472:07 - this list and then we are just printing
472:09 - the result so let's run the code and
472:11 - let's see what happens
472:12 - so you can see we get the list which
472:15 - adds the value of these two lists
472:18 - and creates a new list so you can see 2
472:21 - plus 1 is 3 here 5 plus 4 is 9
472:25 - then 8 plus 7 is 15 and so on so this is
472:29 - how you can use lambda functions with
472:32 - map function now let's see how to use a
472:35 - filter function so i'm going to use this
472:37 - special function which is called filter
472:40 - and this filter functions takes two
472:43 - argument but what is special about this
472:45 - filter function is it takes a function
472:48 - as the first argument which gives us a
472:51 - boolean result so instead of adding two
472:55 - numbers and returning this filter
472:57 - function is expecting a function which
472:59 - gives us the boolean result so let me
473:02 - minimize this so let's say we want to
473:05 - filter the even values from this list so
473:08 - how we can achieve this using the filter
473:12 - function so as i said this takes a
473:14 - function as the first argument so you
473:17 - can use lambda and how to find out the
473:19 - even values you pass an argument and
473:22 - then you return x modulo 2 is equal to 0
473:28 - so this x modulo 2 is going to give us 0
473:32 - whenever the number is even otherwise is
473:35 - going to give us 1. so this is the first
473:37 - argument and the second argument we can
473:39 - pass here is
473:41 - for example the first list here and now
473:44 - i'm going to assign the result into a
473:47 - variable and let's print the value of c
473:51 - now using the list function so list and
473:54 - as an argument i'm going to pass c here
473:58 - let's run the code and let's see what's
473:59 - the result and you can see
474:02 - you just get the even values filtered
474:05 - out from this first list which is 2
474:08 - 8 and 10. now let me give you one more
474:12 - example of filter
474:14 - so let's say you want to filter out from
474:17 - the second list which values are greater
474:21 - than 5 so all the values which are
474:23 - greater than 5 we want to filter out so
474:27 - we will pass x as an argument and let's
474:30 - say this is the d variable so this
474:32 - lambda function takes x as an argument
474:35 - it's going to return true so let me just
474:38 - write the syntax here so it's going to
474:40 - return true if the value of x is greater
474:45 - than 5 else it's going to return the
474:49 - false so else we can just write false
474:52 - here so if you want to write if an else
474:54 - condition inside a lambda function you
474:58 - write something like this so this is the
475:00 - syntax of if and else so if the value of
475:04 - x is greater than 5 it's going to return
475:07 - true otherwise it's going to return
475:10 - false so let's run this code and let's
475:12 - see what happens let me just replace the
475:14 - c by d
475:16 - and i'm going to run this file
475:19 - and you will see the result here so in
475:22 - this list you will see 8 10 and 9 are
475:26 - greater than
475:28 - 5 that's why we got this result if we
475:31 - write here greater than and equal to and
475:35 - once again run the code it's going to
475:37 - give us four values including five here
475:40 - so this is how you can use filter
475:42 - function with the lambda functions
475:45 - now let's see how we can use one more
475:48 - function which is called the reduce
475:51 - function so in order to use the reduce
475:54 - function we need to import a special
475:57 - module which is fung tool so let's
476:00 - import this module and this module is
476:03 - called func
476:04 - tools so we are going to write from punk
476:07 - tool
476:08 - import reduce so what we are basically
476:11 - saying is we need a reduce function from
476:15 - this fung tool module and now you can
476:18 - use a reduce function so i'm going to
476:21 - declare a variable e
476:23 - and then i can use this reduce function
476:26 - which also takes two argument one is the
476:29 - function and other is the iteratable
476:32 - collection so let's define a function
476:34 - first of all which is the lambda
476:36 - function and this lambda function is
476:38 - going to take let's say two values
476:41 - x and y
476:42 - and what it's going to return is the sum
476:45 - of x plus y here now as the second
476:48 - argument i'm going to pass
476:49 - my list variable here so what reduce
476:52 - function does is it takes first to
476:55 - element of the list and then apply the
476:58 - function which you have written here
477:01 - which is going to add first to element
477:04 - and then it's going to store the result
477:06 - in x variable and take next element into
477:09 - the y variable so 7 plus
477:12 - y is going to give us whatever result
477:15 - and once again it's going to apply the
477:17 - result and then going to add the next
477:20 - number to the result so let's see what
477:23 - result we get using this reduce function
477:27 - so i'm going to once again use print and
477:29 - then we can directly print the value of
477:32 - the reduce function which is e so let's
477:35 - run this code once again
477:37 - and you will see
477:38 - this result which is 37 now 37 is the
477:42 - sum of all these elements inside this my
477:47 - list so let me explain you once again
477:49 - what this reduce function is doing
477:52 - so first of all because we are passing
477:54 - two arguments here in the lambda
477:57 - function it's going to take first two
477:59 - element of your collection which is two
478:01 - and five and then apply this
478:05 - code or statement to these two elements
478:08 - which is
478:09 - 2 plus 5 and we will get 7 as the result
478:13 - now once again it's going to take 7 as
478:15 - the first argument which is the sum of
478:17 - these two numbers
478:18 - and 8 as the second argument which is
478:22 - y here and then apply this logic once
478:26 - again 2 7 and 8 which gives us 15 and
478:31 - once again this 15 will be passed as x
478:34 - and 10 will be passed as y and once
478:38 - again the addition of 15 and 10 will
478:40 - happen which will make it 25 and so on
478:44 - so this is how you can use lambda
478:46 - functions in python and this is how you
478:50 - can use lambda functions with map filter
478:54 - and reduce functions in this video i'm
478:56 - going to show you how to use nested
478:58 - functions and closures in python
479:02 - so let's get started so we will start
479:05 - with the nested functions
479:07 - so in python we can define the nested
479:11 - function that means we can define a
479:13 - function inside a function so let me
479:16 - give you this example
479:18 - and in this example this function which
479:21 - is the outer function
479:22 - takes some text or message as the
479:26 - argument and i have defined one more
479:29 - function inside the outer function and i
479:32 - named it as inner function which prints
479:36 - the value of the text which we have
479:39 - passed in the outer function
479:41 - and we are just calling the inner
479:43 - function
479:44 - in the outer function scope so this
479:47 - function is declared locally
479:50 - inside the outer function and we are
479:53 - just calling this inner function inside
479:56 - this outer function now in other words
479:59 - we can also say that this outer function
480:01 - is an enclosing function and this inner
480:05 - function is the local function of this
480:10 - outer function and now when i call this
480:12 - outer function and let me run the code
480:14 - it is going to just print the value
480:17 - which we have passed as an argument so
480:20 - we have just passed this text argument
480:23 - which is once again passed to print
480:25 - statement of inner function and because
480:28 - we are calling this inner function
480:29 - inside this enclosing function it prints
480:32 - the value using this statement so when
480:35 - you declare one function inside the
480:38 - another function
480:40 - it's called the nesting of functions let
480:43 - me give you one more example of the
480:45 - nested function
480:46 - and i have defined this pop function
480:50 - which is our outer function or enclosing
480:53 - function
480:54 - and here i have defined a function
480:57 - called get last item
481:00 - which is our inner function or the local
481:03 - function to the pop function now this
481:06 - pop function takes a list as an argument
481:08 - and we have defined a local function
481:11 - inside this pop function and what this
481:13 - local function get last item does is
481:16 - whenever you pass a list as an argument
481:19 - to this local function it's going to
481:21 - find out the last element of the list
481:24 - and return the last value of this list
481:28 - so here this is the last index of the
481:32 - list and then it's going to return the
481:34 - last item of the list which is passed as
481:37 - an argument now you may already know
481:39 - that you can call a function called
481:41 - remove on your list
481:43 - which is used to remove some item from
481:48 - the list so i'm just calling remove
481:50 - function on the list and as an argument
481:52 - of the list i'm passing the function
481:55 - which finds out the last element of the
481:58 - list so this is going to give us the
482:01 - last element of the list and this last
482:04 - element will be removed from the list
482:07 - and at last i'm simply returning the
482:09 - list which is passed as an argument to
482:12 - the pop function so let's say this is
482:14 - the list on which we are working on
482:15 - which have five elements and we are
482:18 - calling pop function on this list again
482:21 - and again three times so let me run the
482:24 - code and let's see what happens so you
482:26 - can see when first pop is called it's
482:29 - going to remove the last element which
482:30 - is six from the list and then whenever
482:34 - the second pop is called it's going to
482:36 - remove the four
482:37 - and whenever the third pop method is
482:40 - called it's going to remove the three
482:42 - and so on so this is how you can use
482:45 - nested functions in python now let's
482:48 - talk about the closures
482:50 - so i'm going to use the same nested
482:53 - function example which i have shown you
482:55 - earlier so this is the nested function
482:58 - now in order to convert this nested
483:00 - function into a closure
483:02 - what we need to do here is we need to
483:05 - return
483:06 - the inner function
483:08 - without the parentheses so the thing to
483:12 - note here is we don't need to return
483:16 - this inner function with the parentheses
483:18 - we need to return this inner function
483:21 - without any parentheses and this is the
483:24 - simplest example of the closure
483:27 - so what is a closure so a closure is a
483:30 - function whose return value depends on
483:34 - the value of one or more variable
483:36 - which are declared outside the function
483:40 - so in this example this text variable is
483:43 - declared outside the inner function and
483:47 - the value of this inner function depends
483:50 - on this text variable which is declared
483:54 - outside this inner function and that
483:57 - makes it a closure and closure have a
484:00 - special property that this closure
484:03 - function object remembers the value in
484:07 - the enclosing scope even if they are not
484:11 - present in the memory so i will explain
484:13 - you that but let me just show you how to
484:16 - use this outer function which now uses
484:20 - the closure so i'm going to declare a
484:22 - variable a which means because this
484:25 - outer function is returning the inner
484:27 - function that means a contains now the
484:30 - inner function so we can use this a as
484:33 - the function so in order to use this a
484:36 - as the function we can just call this a
484:39 - using the parentheses because this
484:42 - function doesn't take any argument so we
484:44 - are not passing any argument here but we
484:47 - will just call it as a function because
484:49 - this outer function is just returning
484:52 - the inner function so let's run the code
484:55 - and let's see what happens when we run
484:57 - this code so you can see it prints hello
484:59 - which is printed using this print
485:01 - statement whenever we call this a
485:05 - function so if i just call this a
485:08 - function without the print method also
485:11 - it's going to print the hello because
485:14 - here we are just using the print to
485:17 - print the text which is passed using the
485:21 - outer function
485:22 - now as i said closure is a function
485:24 - object that remembers the value in the
485:27 - enclosing scope
485:29 - even if they are not present in the
485:32 - memory so our enclosing scope is the
485:35 - outer function so even if we delete the
485:38 - outer function after
485:40 - declaring the statement and if the a
485:43 - contains this inner function and now
485:47 - let's say i'm going to just delete the
485:50 - outer function so this statement is
485:52 - going to delete the outer function and
485:54 - let me call this outer function once
485:56 - again after the deletion of this
485:58 - function that means it's going to throw
486:00 - us an error which will say that this
486:04 - function is already deleted so we cannot
486:08 - call this function and now let's see the
486:10 - magic of the closure so even if we
486:13 - deleted the outer function and we cannot
486:16 - call the outer function but before
486:19 - deleting we have created a variable
486:22 - which contains the value of inner
486:25 - function and now i'm just calling the
486:27 - inner function with these parentheses
486:30 - and let's see what happens so i'm going
486:32 - to just run this code and it's going to
486:35 - print hello
486:36 - even after we have deleted the outer
486:39 - function so this means that this
486:41 - variable a
486:43 - is storing some kind of state of inner
486:46 - function even if the outer function is
486:49 - deleted and that is the magic of the
486:52 - closures so a closure function is able
486:55 - to remember the values which are
486:57 - declared outside the function also so
487:01 - this is our closure function and it's
487:03 - able to remember the value which are
487:05 - declared which is text outside the
487:08 - function and that's the beauty of
487:11 - closures now let me give you one more
487:13 - example of the closure so we will be
487:16 - able to understand it in a better way so
487:19 - here i have defined a function called
487:22 - nth power
487:24 - and i pass one argument here which is an
487:27 - exponent and inside this nth power
487:30 - function i have defined a local function
487:33 - which also takes one argument and then
487:37 - what it returns is is the power of
487:40 - whatever argument we pass here and this
487:43 - exponent is coming from the outer scope
487:46 - which is as an argument of the outer
487:49 - function which is nth power so base is
487:52 - coming from the inner local function
487:56 - and the exponent is coming from the
487:58 - outer scope and we are just returning
488:02 - this power of which is a local function
488:05 - without any parenthesis once again so
488:07 - this is very important you return the
488:10 - function without the parentheses now i
488:13 - can declare some variable first of all
488:15 - i'm going to declare a variable called
488:17 - square and then we will call this nth
488:20 - power function and we will just pass the
488:24 - value 2 so now this exponent becomes 2
488:27 - here which is also passed to the inner
488:30 - function or the local function so here
488:33 - the value of 2 is saved that means
488:37 - whenever we call the square function
488:40 - it's going to give us the square of
488:42 - whatever number we are going to pass as
488:46 - an argument to this square
488:48 - so let's try it once and let's see what
488:51 - happens so i'm going to just print and
488:54 - then call the square
488:56 - function which takes an argument and i'm
488:59 - going to first of all find out the
489:01 - square of 2 and i'm going to run this
489:04 - program and you can see it's going to
489:06 - give us the square of this 2 because now
489:10 - the square function is going to give us
489:14 - the square of the number which we will
489:16 - pass as an argument here so this 2 is
489:19 - passed to the inner function because
489:22 - this nth power gives us the inner
489:25 - function because it returns the inner
489:26 - function so now this 2 which we are
489:30 - passing in the square is passed as the
489:33 - base
489:34 - of this inner function and that's why we
489:37 - are getting the square of the number
489:40 - which we pass here so let's find out the
489:43 - square of some more numbers so i'm going
489:46 - to just pass 3 4 and 5 here and i'm
489:50 - going to run the code once again and you
489:53 - will see that it's going to give us the
489:55 - square of 2 3 4 and 5. so once again we
490:00 - have seen
490:01 - that the closure function
490:04 - is remembering the value which is
490:06 - declared outside the scope which is
490:08 - exponent now whenever i use this
490:12 - function once again so let me declare
490:13 - one more variable and this time i want
490:16 - to declare a cube here and once again
490:19 - i'm going to use the nth power
490:21 - to find out the cube of numbers so now
490:24 - this 3 is passed as an exponent here and
490:28 - this exponent is going to be passed
490:30 - inside the inner function so exponent
490:33 - value is 3 here that's why we are going
490:35 - to get the cube of the number which we
490:38 - are passing as the base argument of this
490:42 - inner function so now this is the inner
490:45 - function and we can once again call the
490:48 - print to call the cube method this
490:50 - should be cube not cure so cube and then
490:54 - we can find out the cube of 2
490:57 - and let's find out the
490:59 - cube of
491:00 - 3
491:01 - 4 and 5 also so let's run the code once
491:05 - again and now you will see here the cube
491:08 - of the numbers are printed whatever
491:10 - numbers we are passing as an argument of
491:13 - this cube function so in a way this cube
491:17 - or the square variable is holding the
491:20 - status of the inner function and that's
491:24 - something we have also seen in the case
491:26 - of classes the classes are able to
491:28 - remember the state of the variables and
491:31 - the methods which are declared inside
491:34 - the classes so closures are sometimes
491:36 - used in place of the classes which only
491:39 - have usually one
491:41 - method inside them because this one
491:44 - method we can already define in the
491:47 - closure also and it's able to remember
491:50 - the state so closures can be used in
491:53 - place of the classes which have fewer
491:56 - method generally one method inside them
492:00 - the closures are also used heavily in
492:03 - the case of decorators in python so
492:06 - decorators we are going to learn in the
492:09 - next video and i'm going to show you
492:11 - why
492:12 - decorator use closures and how to use
492:16 - closures with the decorators and the
492:19 - third advantage of closures are they are
492:23 - sometimes more efficient than the normal
492:27 - functions
492:28 - so the closures are sometimes also used
492:30 - for the code efficiency and the faster
492:34 - working off code so this is how you can
492:36 - use closures in python in this video i'm
492:39 - going to show you what are decorators in
492:42 - python and also i'm going to show you
492:44 - how to use decorators in python
492:47 - but before starting with this video i
492:49 - will suggest you to watch the last two
492:51 - videos in which i have talked about the
492:54 - basics of functional programming in
492:56 - python
492:58 - so let's get started with the decorators
493:01 - so first of all what are decorators
493:04 - so decorators
493:06 - wraps a function
493:08 - and modify its behavior in one way or
493:13 - the another
493:14 - without changing the source code of the
493:18 - actual function
493:20 - so let's see in practice how to declare
493:24 - and use decorators so first of all what
493:27 - i'm going to do is i'm going to define a
493:29 - very simple
493:31 - method and i'm going to name it as a say
493:35 - hello for example which doesn't take any
493:38 - argument and it just prints hello world
493:42 - let's say now let's say i want to
493:44 - decorate this function say hello and i
493:47 - want to print some kind of string before
493:50 - and after the printing of hello world
493:54 - without changing the code of
493:57 - the function
493:59 - so here
494:00 - we can declare the decorators
494:03 - so i'm going to declare a decoration
494:06 - function for this and i'm going to name
494:08 - it as decorator underscore func and this
494:12 - decorator function is going to take one
494:14 - argument and this argument will be a
494:17 - function now we have seen in the last
494:19 - video that we can return a function from
494:24 - a function or we can pass the function
494:27 - as an argument of another function so
494:30 - inside this function i'm going to
494:32 - declare one more function and i'm going
494:35 - to name it as
494:37 - wrapper function which takes no argument
494:40 - and inside this wrapper function what i
494:42 - want to do is i want to call a function
494:45 - which is passed as an argument of the
494:48 - decorator function and then at last i
494:51 - just want to return this function so i'm
494:53 - going to just call return and i'm going
494:55 - to return the wrapper function without
494:58 - the parentheses so in the case of
495:00 - closures we have seen that we can return
495:05 - the inner function without the
495:07 - parentheses and that makes them the
495:09 - closures now let's say we are going to
495:11 - pass this say hello function as an
495:14 - argument of this decorator function and
495:16 - this function will be called here so in
495:19 - order to print something before and
495:21 - after
495:22 - this string hello world we can print
495:26 - something here also so here we can just
495:30 - write
495:31 - let's say we want to print x and we want
495:34 - to print this x 20 times let's say so we
495:37 - can just write this kind of notation and
495:41 - after the execution of function
495:43 - i want to print let's say y 20 times so
495:47 - this is the simplest form of decorator
495:50 - which takes function as an argument now
495:53 - in order to call this say hello function
495:57 - with the decorator i'm going to declare
495:59 - one variable and i'm going to name it as
496:02 - hello and then i'm going to call the
496:06 - decorator function and i told you that
496:08 - this decorator function takes the
496:10 - function as an argument so we can pass
496:13 - the say hello function as an argument to
496:16 - this decorator function which will be
496:18 - passed here
496:20 - and it will be called here now in the
496:23 - last video in case of closures we have
496:25 - seen that because this decorator
496:28 - function is returning the inner function
496:31 - that means this variable will contain
496:35 - the inner function so we can call
496:38 - this hello with these parentheses and
496:41 - because this wrapper function doesn't
496:43 - take any argument so we can call it like
496:46 - this and let's run the code and let's
496:48 - see what happens so when we run the code
496:51 - you can see
496:52 - before the hello world string
496:55 - we have printed x 20 times and after the
497:00 - hello world we have printed y 20 times
497:04 - so this is a simple form of decorator
497:07 - and this is how you can use decorators
497:10 - in python but python also provides the
497:13 - simple way of declaring this kind of
497:17 - notation so instead of using this line
497:20 - of code i am going to comment this line
497:24 - of code and also this line of code
497:27 - because instead of doing this you can
497:30 - use this kind of notation so just above
497:33 - your function in which you want to apply
497:35 - the decorator you use at the rate symbol
497:39 - and then the name of the decorator which
497:42 - you want to apply to the function
497:44 - and this notation above the function is
497:47 - equivalent to this kind of notation and
497:50 - now we can directly use this function
497:52 - say hello without the use of these two
497:57 - lines of code so let me run the code
497:59 - once again and let's see what happens
498:02 - and the result is the same so this is
498:05 - how the decorator works
498:07 - so let's go through the definition once
498:09 - again so decorators
498:12 - wraps the function and modify
498:15 - its behavior in one way or another
498:19 - without changing the actual code
498:22 - of the function so this decorator have
498:25 - changed the behavior of this function
498:29 - without even changing the actual code of
498:33 - this function now one question which may
498:35 - arise here is can we use more than one
498:38 - decorator with the same function
498:42 - so let's try to declare two decorator
498:45 - functions so we are going to declare two
498:47 - decorator functions and this decorator
498:50 - function i'm going to name it as
498:52 - decorator x and the second function i'm
498:54 - going to name it as decorator y
498:57 - so the first decorator function is going
499:00 - to decorate your function with the x
499:04 - value and the second decorator is going
499:06 - to decorate your function with the value
499:09 - y so we are going to replace this by y
499:12 - now here above your function you can use
499:17 - the decorator x
499:19 - and then
499:20 - also you can use the decorator y above
499:23 - it so i'm going to just write at the
499:25 - rate decorator y
499:27 - and this notation is perfectly fine so
499:30 - you can use one or more decorators with
499:33 - a single function so let me run the code
499:36 - and let's see what happens i'm going to
499:37 - run this code
499:39 - and you can see what happens
499:41 - so first of all
499:42 - the y decorator
499:45 - has wrapped
499:46 - the function with y's and then after
499:49 - that comes the x decorator which have
499:52 - decorated the function with x values and
499:57 - then your actual string is printed which
500:00 - is hello world
500:01 - now one thing to note here is the order
500:04 - of the decorator in which they are used
500:08 - so now we will try to just
500:10 - exchange the places of the decorator x
500:14 - and y and now let's run the code and
500:16 - let's see what happens
500:18 - so before it was printing y first and
500:21 - then the x when this decorator was used
500:25 - at the top and then the x decorator was
500:27 - used and now when we run the code
500:30 - the opposite of that will happen now if
500:33 - you want to see the equivalent notation
500:35 - of this
500:36 - using decorators so i'm going to just
500:38 - comment
500:39 - these decorators from here and let's try
500:42 - to use this kind of notation with our
500:44 - decorators so i'm going to just
500:46 - uncomment this code
500:47 - and this time what i'm going to do is
500:49 - i'm going to use
500:51 - this decorator x with the say hello
500:55 - and i'm going to enclose
500:58 - this notation inside
501:00 - that decorator y so i can use this kind
501:03 - of notation which is equivalent to this
501:06 - kind of notation also so i'm going to
501:08 - run the code and you can see because
501:11 - decorator y is the outermost decorator
501:15 - here it's going to just print the value
501:18 - of y and then we have the decorator x
501:21 - which is going to print the value of x
501:23 - and then our actual string if we
501:26 - exchange the places of decorator x
501:29 - and decorator y
501:31 - then the order of
501:34 - the printing will also change so now
501:37 - this was the very basic decorator
501:39 - example so let me remove
501:42 - this example and let me give you one
501:44 - more example so instead of using this
501:47 - function let me give you one more
501:49 - example so i am going to declare a
501:51 - function called
501:53 - divide which is going to take two
501:55 - arguments
501:56 - let's say x and y and what it's going to
501:59 - do is it's going to return
502:01 - the value of the division of x divided
502:05 - by y and let me remove
502:08 - these decorators from here so in the
502:10 - last say hello example our say hello
502:13 - function was not taking any argument and
502:17 - now we are giving our divide function
502:20 - two arguments that means we need to
502:22 - change the wrapper function here also so
502:26 - i'm going to name my decorator as
502:27 - decorator divide which takes a function
502:30 - and i'm going to change
502:32 - the wrapper function and now this
502:35 - wrapper function is going to take two
502:37 - values which is the value of x and y you
502:39 - can also write a and b it doesn't matter
502:42 - it just takes two values and instead of
502:46 - this kind of notation let me print the
502:48 - values of a and b first of all so inside
502:51 - this print function i'm going to just
502:53 - write divide and then we are going to
502:57 - pass the value of a comma and comma b so
503:01 - we are going to print the value of a and
503:03 - b and then we are going to check if the
503:05 - value of b is 0 or not so i'm going to
503:09 - just say if
503:10 - b is equal to 0 then we are going to
503:13 - print the message that division
503:15 - with
503:17 - 0 is not
503:19 - allowed and also we are going to return
503:22 - immediately from this function otherwise
503:24 - if the value of b is not equal to 0 then
503:27 - we are going to return the division of a
503:30 - by
503:30 - b so once again without changing the
503:33 - actual function which is divide we have
503:35 - changed the behavior of this function
503:38 - which is divide using this decorator
503:41 - function and the last thing which we
503:44 - need to do here is to call our decorator
503:47 - function
503:48 - above our normal divide function and now
503:51 - i can use this divide function normally
503:53 - so i am going to just use this divide
503:56 - function inside
503:57 - the print and i'm going to pass two
504:00 - values here let's say
504:02 - 15
504:03 - and five and let's run the code and it's
504:06 - going to print first of all this line
504:08 - which is printed using this statement
504:10 - which says divide a and b which is
504:14 - divide 15 and 5
504:16 - and then because the value of b
504:18 - is not equal to 0 that means this
504:22 - value is returned with the result 3
504:25 - which is the division of 15 by 5. now
504:29 - let's change the value of b
504:31 - and we are going to just give 0 as the
504:34 - value of b or y here and i'm going to
504:38 - run the program once again and now you
504:40 - can see that this
504:43 - statement is printed which says division
504:45 - with 0 is not allowed and because this
504:49 - function is not returning anything or
504:52 - you can return 0 from here it doesn't
504:55 - matter and i'm going to run the code it
504:57 - prints 0 here so this is how you can use
505:00 - decorators with the function which takes
505:03 - some arguments and return some values
505:07 - now let me give you one more real-world
505:10 - example which we can use with decorators
505:13 - so instead of our divide function now
505:17 - let's say what i want to do is i want to
505:20 - declare
505:21 - a function i'm going to just name it as
505:24 - my func
505:25 - which takes one argument a number so
505:28 - this will be a number and then this
505:31 - function calculates the sum of the
505:34 - number from 1 to the number which we
505:37 - provide here so let's say we provide 10
505:39 - here so this function is going to give
505:42 - us the sum of the first 10 numbers and
505:45 - now i'm going to declare a variable
505:47 - called sum which i initialize it with 0
505:51 - and in the next line i'm going to use
505:53 - for
505:54 - i
505:55 - in
505:56 - some range and this range will be the
505:58 - number which is provided plus 1 because
506:01 - range starts from 0 and not from 1
506:04 - that's why i'm adding 1
506:06 - here in the range if i want to calculate
506:09 - the sum of first 10 numbers let's say
506:13 - and if i provide 10 here then range will
506:16 - give you until 9 that's why i'm adding 1
506:19 - here and then inside this for loop i'm
506:22 - going to just do sum
506:24 - plus equals i and at last i'm going to
506:28 - just return the value of the sum now
506:32 - till now we have seen how to create
506:33 - decorator functions for the functions
506:36 - which takes
506:38 - no argument or for the function which
506:40 - takes some argument and we want to use
506:43 - these argument inside the wrapper
506:46 - function but at times you need to write
506:49 - a decorator function which will be a
506:52 - generic decorator function which means
506:54 - the decorator function which i'm going
506:56 - to create here will be used with not
506:59 - only this function but the other
507:01 - function which can take
507:03 - this argument on multiple number of
507:05 - argument or no argument so let's see how
507:07 - we can write a generic decorator
507:09 - function
507:10 - so let's say i want to measure the
507:13 - timing of this function how much time
507:17 - this function
507:18 - takes in order to execute this code and
507:22 - timings we can measure with any function
507:25 - so it doesn't matter that we need to use
507:28 - this function to calculate the timing
507:31 - you can also use the decorator function
507:33 - which i'm going to create with the other
507:37 - functions also to measure the timing of
507:40 - those functions so because it's a timing
507:43 - decorator so i'm going to name it as
507:45 - timing and it takes once again the
507:48 - function as an argument and because we
507:50 - don't know which argument the function
507:54 - is going to take
507:55 - right now this function takes one
507:57 - argument but it doesn't matter you need
508:00 - to measure the time of the function
508:02 - which takes one argument or two argument
508:04 - or three argument or no argument so
508:06 - that's why in that case we can use this
508:09 - kind of notation astrix
508:11 - args here and then comma double less
508:14 - tricks kw args here and these two
508:18 - arguments makes your wrapper function
508:21 - independent of the number of argument
508:24 - which will be provided with this
508:26 - function and in order to calculate the
508:29 - timing of the function we need to import
508:32 - a module so let's import a module so i'm
508:34 - going to just write from
508:36 - time import time so there is an inbuilt
508:41 - time function which we can use to get
508:43 - the time and now under this wrapper what
508:46 - i'm going to do is i'm going to
508:48 - just declare a variable called start and
508:52 - i'm going to save the value of current
508:54 - time here so whenever you call this time
508:57 - with the parenthesis it's going to give
509:00 - you the current time now in the next
509:02 - line what i want to do is i want to just
509:04 - create a new variable which i will call
509:07 - it as
509:08 - result and i am going to assign the
509:12 - result of this function so let's call
509:14 - this function
509:16 - with the variables which we have
509:18 - provided into the wrapper function so
509:20 - because we don't know which argument
509:22 - comes with this function so we are going
509:25 - to just pass these argument as it is
509:28 - into the function
509:29 - argument which is passed as an argument
509:32 - of your decorator let's provide the
509:35 - indent here so this will be satisfied
509:38 - and then in the next line we are going
509:40 - to just print the time elapsed so i'm
509:43 - going to just say elapsed time and then
509:47 - this
509:48 - curly bracket and you already know we
509:50 - can call a format method on the string
509:55 - and here as an argument we just want to
509:57 - give the
509:58 - result of the start time and the end
510:01 - time so let's declare the end time also
510:04 - after the function execution is
510:06 - completed we are going to measure the
510:08 - current time once again
510:10 - and then we are going to just say and
510:13 - the time which is
510:15 - stored in the end variable minus the
510:17 - start time and it's going to give us the
510:20 - time elapsed in the execution of this
510:23 - function and at last because this
510:26 - function or the other function can also
510:28 - return some value at last we are going
510:30 - to return the result which we have
510:33 - calculated so i'm going to just write
510:35 - return this result so this is the
510:38 - generic timing function which you can
510:40 - use with any function whichever you like
510:44 - so i'm going to just
510:46 - decorate my function using at the rate
510:50 - the timing decorator and then i'm going
510:53 - to call this my function inside the
510:55 - print method so print my function and
510:59 - let's say i want to calculate
511:01 - the sum of
511:03 - first 20 000 values and i'm going to run
511:06 - the code
511:08 - and here in the result you will see
511:10 - 0.0 in the elapsed time because this
511:13 - value is very small and elapsed time is
511:16 - approximately equal to zero for the
511:19 - smaller values because we are just
511:22 - iterating over the smaller value but the
511:25 - sum is the exact sum so let's increase
511:29 - this value by two zeros and let's also
511:32 - print the value of start time and end
511:35 - time here so i'm going to just print the
511:38 - value of
511:39 - the end time and the start time so we
511:42 - know
511:42 - that what is the starting time and what
511:45 - is the ending time and i'm going to run
511:47 - the program once again
511:49 - and now you will be able to see
511:51 - that this is the starting time and this
511:54 - is the ending time
511:56 - and you will be able to see some time
511:59 - elapsed in the execution of this
512:02 - function
512:03 - and when i increase one zero here so you
512:05 - will be able to see
512:07 - two seconds is taken now for the
512:10 - calculation of the sum of this number so
512:13 - you can use this timing decorator in
512:16 - order to calculate
512:17 - the time of execution of any other
512:20 - function other than this also so this is
512:23 - how you can use decorators in python in
512:26 - this video we will talk about operator
512:29 - overloading in python
512:31 - now you might already know that
512:33 - everything is an object in python so
512:36 - when i want to know the type of this
512:38 - number 2 it's going to show this kind of
512:40 - output and this means that 2 is an
512:44 - object of the class end
512:47 - now when i once again want to know the
512:50 - type of let's say 2.0 it's an object of
512:55 - class float when i want to do
512:58 - the same operation with the string
513:01 - this string
513:02 - is an object of class string so
513:05 - everything is an object in python
513:09 - now have you ever wondered that when you
513:12 - do two plus two it's going to give us
513:15 - the addition of two numbers
513:18 - and when i add two strings let's say
513:22 - two and then i'm going to use the same
513:24 - operator which is plus operator with the
513:27 - other string it's going to give me the
513:30 - concatenation of these two string values
513:34 - so the same operator plus is working
513:37 - differently
513:38 - with different type of objects
513:42 - the same you might have observed with
513:44 - the
513:45 - multiplication operator which is this
513:48 - asterisk so when i use this asterisk or
513:50 - multiplication operator with a string
513:53 - and let's say i write three here it's
513:55 - going to print this given string three
513:58 - times but the same operator when i will
514:00 - use with the two numbers it's going to
514:03 - give me the different behavior which is
514:05 - the multiplication of these two numbers
514:08 - so the same operator astrix is
514:10 - functioning differently with different
514:13 - kind of data or in other words we can
514:16 - say that this asterix operator or this
514:20 - plus operator are
514:23 - overloaded for different kind of objects
514:27 - so whenever this plus operator is used
514:30 - with two numbers it's going to give us
514:33 - the sum of these two numbers and
514:34 - whenever this operator is used with the
514:37 - string it's going to give us the
514:39 - concatenation of these two strings so
514:42 - both these operators are overloaded for
514:45 - handling different kind of data so this
514:48 - is the overloading of the built-in
514:51 - operators
514:53 - now we might also think that if this is
514:56 - possible
514:57 - can we overload the operators by our
515:02 - custom classes so let me create a class
515:05 - and i'm going to name it as
515:07 - the number class which is going to
515:11 - take one argument so let me define a
515:13 - constructor here so underscore
515:15 - underscore init underscore underscore
515:18 - and this is going to take one argument
515:21 - which is the number and i'm going to
515:23 - just write self dot
515:26 - num
515:27 - is equal to num so this is the simple
515:29 - class which we have created and now i'm
515:32 - going to create two instance of the same
515:35 - class so
515:37 - number and i'm going to give the number
515:39 - one let's say here and then i'm going to
515:42 - create a second object of this class and
515:45 - this time i'm going to give the number
515:47 - two here
515:48 - so is it possible that we can use let's
515:51 - say and one plus and two so let's try
515:55 - this and it's going to give us this
515:57 - error which says unsupported operand
516:00 - type for plus number and number so
516:04 - because python doesn't know how to use
516:07 - this plus operator with your class
516:09 - objects it's going to give us this error
516:12 - which is unsupported operand type and
516:15 - whatever is the operator you are using
516:18 - so it turns out that we can overload
516:20 - these kind of operators in python by
516:23 - implementing some inbuilt methods in our
516:28 - class so we already know that whenever
516:30 - we want to implement a constructor in
516:33 - python we use this init method so i'm
516:37 - going to create a very simple class and
516:40 - i'm going to name it as a and this will
516:42 - be a blank class so this is a very
516:46 - simple class in python and when i use
516:49 - our dir function which is a built-in
516:53 - function with this class let's see what
516:56 - happens so i'm going to just press enter
516:58 - and it's going to print some methods
517:01 - here which are inbuilt method so here
517:04 - not all methods are visible
517:06 - so i'm going to assign
517:08 - this value of dir
517:11 - a to a variable
517:13 - a
517:14 - and then we will see in the right hand
517:17 - side in this inspector here and this is
517:19 - the a variable and you will see the list
517:22 - of all the inbuilt methods which are
517:25 - associated or which you can implement
517:28 - them so for example we have implemented
517:30 - the init method in order to have the
517:33 - functionality similar to constructor but
517:36 - there are other methods here too
517:39 - so there is a str method or le method
517:43 - which is less than method or n e method
517:46 - which is not equal to method and many
517:48 - other methods which we can implement
517:51 - here in our class so now i have given
517:55 - enough theory to you and let's try to
517:58 - see with an example
517:59 - how to overload an operator in python
518:04 - so here i have created a class which i
518:07 - call
518:08 - circle and this takes one argument which
518:11 - is the radius of the circle and i have
518:14 - created the setter and getter method for
518:17 - this radius variable
518:19 - and in the third method i'm just
518:22 - calculating the area of the circle using
518:25 - the radius and i have also used a
518:28 - inbuilt module which is math in order to
518:31 - get the value of pi so using this
518:34 - expression i'm just calculating the area
518:37 - of the circle now i have created two
518:40 - objects of this class with two different
518:43 - radiuses so in the first object i have
518:46 - given the radius 2 and in the second
518:49 - object i have given the radius 3 and
518:51 - from the theory which we have learned
518:53 - till now we already know that this
518:56 - expression will not work with these two
518:59 - objects so when i run this code it's
519:01 - going to give me the error which says
519:04 - unsupported operand error so now we are
519:07 - going to overload this plus operator in
519:10 - this circle class now in order to
519:13 - overload a particular operator let's say
519:15 - plus you need to implement a associated
519:19 - method in your class so with this plus
519:22 - operator there is a special
519:25 - method which we need to implement in our
519:27 - class and i have given the list of all
519:29 - the methods which is associated with the
519:32 - operators so with the plus operator you
519:35 - need to implement this special method
519:38 - which is underscore underscore add
519:40 - underscore underscore in order to
519:43 - overload minus you use this method in
519:46 - order to overload the
519:48 - multiplication you use this method so
519:50 - here is the operator which we want to
519:53 - overload and here i have given
519:57 - the method name which you need to
519:59 - implement in your class in order to
520:02 - overload this operator in python so
520:05 - there is this list which you can use
520:08 - with all these operators so you can
520:10 - overload the mathematical operators in
520:14 - python you can also overload the bitwise
520:17 - operators in python like and or or bit
520:21 - wise right shift or bitwise left shift
520:25 - and also you can overload the comparison
520:28 - operators in python using these
520:32 - associated methods with these operators
520:36 - so now we want to overload this plus
520:38 - operator so we will implement this add
520:41 - method into our class so let's implement
520:44 - this add method into our class and
520:47 - implementing this method is really
520:49 - simple you just need to define a special
520:53 - method which is underscore underscore
520:55 - add underscore underscore and this add
520:58 - method is going to take two arguments
521:00 - one is self you already know
521:03 - and the other is the object of the other
521:07 - instance so the second argument is the
521:09 - object of the circle class and now
521:13 - inside this method i'm going to just
521:15 - return first of all i will just use this
521:18 - circle as the constructor and what i
521:21 - want to do i want to add let's say the
521:24 - radius of the two objects which are
521:27 - provided one is the self object and
521:30 - other is the object which is provided
521:33 - using this argument so i'm going to just
521:36 - say self dot underscore underscore
521:39 - radius plus
521:41 - the circle object radius so let's use
521:44 - the circle object and then dot and then
521:47 - underscore underscore radius so
521:49 - basically i'm adding
521:51 - the radius of the two objects one is
521:55 - this circle object and other is the
521:57 - radius of the self which is the current
521:59 - class so as soon as you implement this
522:02 - method add
522:04 - using these two arguments then this
522:07 - operation is going to work in python so
522:11 - because we have overloaded the plus
522:14 - operator using this add method now this
522:17 - operation is going to work so let me
522:20 - just assign the addition of these two
522:23 - objects into a third variable and this
522:26 - variable i'm going to name it as c3 and
522:29 - using this c3 let's say i want to print
522:33 - the radius of
522:35 - the circle so i'm going to just use
522:38 - the print method and then i'm going to
522:41 - use the c3 object and i'm going to call
522:45 - a get radius method from this object and
522:49 - let's print the radius of c1 and c2 also
522:52 - so here i'm going to just write c1 and
522:55 - here i'm going to just write c2 so we
522:58 - are printing the radius of all these
523:00 - three objects and i'm going to run the
523:02 - program now and you can see here the
523:05 - radius of the first object is 2 because
523:08 - we have provided 2 as an argument here
523:10 - the second is 3 because we have provided
523:13 - 3 as an argument here and because we
523:16 - have created this third object using the
523:19 - overloading of this plus operator where
523:21 - we
523:22 - were just adding the radius of both the
523:25 - objects that's why we got 5 years so 2
523:29 - plus 3 is equal to 5 and this addition
523:32 - we have done using
523:34 - this expression so we have added the
523:36 - radius of the current class and the
523:40 - object which is passed using this
523:43 - argument so this is how you can overload
523:46 - the operators in python by implementing
523:49 - the associated methods which are
523:52 - available in python so let's say now
523:55 - we want to overload the less than and
523:59 - the greater than operator so for the
524:02 - less than operator we use this lt method
524:06 - and for the greater than operator we use
524:09 - this method called gt
524:11 - so let's implement these two
524:14 - method inside our classes so i'm going
524:17 - to just copy
524:19 - this add method two times and first of
524:22 - all i'm going to replace this by lt
524:25 - which is less than and the second method
524:28 - i'm going to replace by
524:30 - gt which is greater than
524:32 - and we want to see if the radius of the
524:35 - circle is greater than the second radius
524:38 - which is provided using this object or
524:40 - not so first is less than so we are
524:43 - going to provide this operator and
524:45 - second is greater than so we are going
524:47 - to provide the other operator which is
524:50 - greater than operator and now this less
524:52 - than and greater than function is going
524:54 - to give us the boolean value if this
524:58 - radius is less than this radius then
525:02 - it's going to return us true otherwise
525:04 - it's going to return us the false so i
525:06 - already have the two instance of two
525:09 - classes
525:10 - and if i want to compare these two
525:11 - classes i can just write c1 and i will
525:16 - use thus less than operator here and
525:19 - then c2 and also i'm going to use
525:23 - the greater than operator here
525:26 - and let's run the code and let's see
525:28 - what happens so now it's going to give
525:30 - us this value which is the constructor
525:32 - of the circle so how can we get the
525:35 - boolean value you just need to remove
525:38 - this
525:38 - constructor from here so you just need
525:40 - to remove the name
525:42 - of the class and now i'm going to run
525:44 - the code once again and now you will see
525:47 - true and false so we were checking if c1
525:50 - radius is less than c2 and it gives us
525:53 - true and once again we were checking if
525:55 - c1 radius is greater than c2 and it has
525:58 - given
525:59 - false to us also we can check the third
526:02 - object for example c3 here if c3 is
526:06 - greater than c2 or not and most probably
526:08 - it's going to give us true and it's
526:11 - correct here so you can see it's that
526:13 - simple to overload any operator in
526:16 - python using these built-in methods so
526:19 - you just need to
526:21 - find out the associated method related
526:24 - to that operator
526:26 - and then you just need to implement that
526:29 - method related to that operator in
526:32 - addition you can also implement some
526:34 - other methods which are available with
526:37 - the class so once again when i'm going
526:39 - to
526:40 - print the dir with any of the object
526:44 - let's say c1 and i'm going to run this
526:47 - program
526:48 - and you can see the list of the
526:50 - functions which you can implement inside
526:52 - your class so add is already there but
526:55 - you can also implement this dish method
526:58 - or dir method
527:00 - or
527:01 - any of these methods which are available
527:03 - here so repr method or str method any
527:08 - method you can implement inside your
527:10 - class in order to avail the
527:13 - functionality
527:14 - associated with that method so at last
527:18 - let's try to implement one of the method
527:20 - which are associated with the class so
527:24 - let's say we want to implement this
527:25 - method which is the str method so i'm
527:28 - going to just minimize this and i'm
527:31 - going to just copy this function and
527:33 - once again paste here and instead of
527:36 - greater than i am going to just
527:38 - implement now the str method now this
527:41 - str method only takes one argument which
527:43 - is self so i am going to just remove the
527:46 - second argument and here
527:48 - in the return value
527:50 - i can just return some string for
527:53 - example so i can just say circle
527:56 - area and i'm going to return the area of
527:59 - the circle so i'm going to use
528:01 - this concatenation operator and then i'm
528:04 - going to convert the area into the
528:07 - string and then i'm going to just use
528:09 - self dot area which is going to give us
528:12 - the area of that circle so once you have
528:15 - implemented this str method in your
528:18 - class you can simply use it like this
528:21 - dir method so i can just write str and
528:25 - then the name of your object which you
528:28 - have created and let's run the code and
528:30 - let's see what happens so i'm going to
528:32 - just see the result now and it prints
528:35 - circle area and it's going to print the
528:38 - area of the circle i just need to
528:41 - provide equals to symbol here so we will
528:44 - be able to see it in a prettier way so
528:47 - you can see the area of the circle is
528:49 - printed similarly you can print the area
528:52 - of the other two circle which is circle
528:56 - two and circle three and let's run the
528:58 - code once again it's going to print us
529:00 - the area of all these circles so this is
529:03 - how you can use operator overloading in
529:07 - python in this video we will talk about
529:10 - a command line tool which is called pdb
529:13 - which we use to debug our python script
529:18 - now pdb stands for python debugger
529:21 - and it is already installed whenever you
529:25 - install python on your operating system
529:28 - so you don't need to install pdb
529:31 - separately if you have python installed
529:34 - it will work on your terminal
529:37 - now you might wonder why i'm using pdb
529:42 - if i already have the pie charm ide and
529:46 - i can debug my code on the pycharm ide
529:50 - now in real life situations
529:53 - most probably you will run your python
529:56 - script on some kind of a server now
529:59 - generally on these servers you don't
530:02 - have the luxury of using an ide you will
530:06 - have to use the terminal in order to
530:09 - debug your python script and that's why
530:12 - i wanted to show you how to debug your
530:15 - python script using the command line
530:18 - tool which is pdb now to start with i
530:22 - have this simple python script which
530:24 - asks the user to input two numbers and
530:28 - these numbers will be saved in these two
530:31 - variables which is x and y
530:34 - now we are using a function called add
530:37 - to add these two values and then we are
530:40 - just transferring the result into this z
530:43 - variable and we are just printing the
530:46 - value of z
530:48 - now in order to open the terminal in the
530:50 - pycharm ide you just need to click on
530:53 - this option which says terminal
530:56 - and if you don't want to use this
530:58 - terminal you can also use a windows
531:02 - command prompt or linux terminal or if
531:05 - you are working on mac os you can also
531:07 - work on the mac terminal
531:10 - so what you need to do is you just need
531:12 - to copy the path of your file where you
531:17 - are working and then you just need to cd
531:20 - to the directory in which you are
531:22 - working in so i'm going to adjust
531:24 - cd to the directory in which my python
531:27 - script is there and then the command
531:29 - will be same to run and use pdb on your
531:33 - terminal so you can use the windows
531:35 - command prompt or this terminal which is
531:38 - available in the pycharm or any other
531:40 - terminal which is available on your
531:43 - operating system so i'm going to use
531:46 - this terminal which is available in the
531:48 - pi charm
531:49 - now i'm going to move this terminal to
531:52 - the right hand side so we will be able
531:54 - to see the code and the command terminal
531:58 - at the same time now in order to run
532:00 - your script you already know that you
532:02 - just need to give this command which is
532:04 - python and the name
532:07 - of your script in my case the name of my
532:09 - script is
532:11 - debugging dot py so i'm going to just
532:13 - press enter and then it's asked me to
532:17 - provide the first number i'm going to
532:19 - provide the first number and then i'm
532:21 - going to provide the second number which
532:23 - is going to give me the sum of these two
532:26 - numbers so here it prints 3 3 four which
532:30 - is not the addition of these two numbers
532:32 - now some of you might already know what
532:35 - is the problem with this code and how to
532:38 - solve it
532:39 - but we will use the debugger to find out
532:43 - what is the problem and how to solve
532:46 - this problem so that whenever we enter
532:49 - two numbers it's going to give us the
532:51 - proper sum of these two numbers and not
532:55 - the other answer now in order to start
532:57 - the debugging on your python script you
533:00 - can provide this command so you can give
533:03 - python
533:04 - hyphen m
533:05 - pdb and the name of your script so my
533:08 - script name is debugging dot py and then
533:11 - i'm going to press enter and now you
533:13 - will be able to see this kind of
533:15 - interface and you will be able to see
533:18 - pdb printed here and there is a cursor
533:22 - blinking here and this python debugger
533:24 - which is python pdb starts from the
533:28 - first line of code which you have on
533:31 - your script so we are on this line which
533:35 - is this line in our script which is the
533:38 - declaration of this add function now the
533:41 - first thing you need to know in order to
533:44 - work with this pdb interface is the help
533:47 - command so you can give this help
533:50 - command here or you can give the h
533:53 - keyword which means the help command so
533:56 - i'm going to give the full help keyword
533:58 - here and then press enter which is going
534:01 - to give us the list of each and every
534:03 - command which you can use with the pdb
534:07 - so these are all the commands which you
534:09 - can use with pdb
534:12 - the most important command which we will
534:14 - be using frequently is the next command
534:18 - or shortcut of the next is n or we will
534:21 - be using the step command or the s
534:24 - keyword for the step command
534:26 - otherwise we will be using the c keyword
534:30 - or the continue command these are the
534:32 - three most frequently used command to
534:36 - work with the pdb now you can see you
534:39 - can type help and the name of the
534:41 - command in order to know more about that
534:44 - command so i'm going to just write help
534:47 - here and the name of the command let's
534:49 - say i want to just know more about the
534:52 - next command so the next command
534:54 - continue execution until the next line
534:57 - in the current function is reached or it
535:00 - returns so in this way you can get the
535:02 - help about each and every command which
535:05 - you have here now once again we are
535:07 - going to find out at which position pdb
535:11 - is right now we already know that pdb is
535:14 - on this line but there is a command
535:17 - called
535:18 - where or you can also write w to find
535:22 - out where right now your pdb is so i'm
535:25 - going to just write where and it's going
535:28 - to show on which line your pdb is
535:31 - currently standing so now i'm going to
535:33 - give the end keyword you can also give
535:35 - the next command here and i'm going to
535:37 - press enter and it's going to go to the
535:40 - next
535:41 - line which is this line which is the if
535:45 - name is equal to main
535:48 - so now we are on this line right once
535:51 - again when i press enter it's going to
535:54 - execute the last executed command so we
535:57 - have executed last this next command so
536:01 - if you press enter directly without
536:03 - entering any command it's going to
536:05 - execute the last executed command so now
536:09 - we are on this line which is this one
536:13 - which takes the input from the user and
536:16 - you will also be able to see on which
536:18 - line this code is so this line is at the
536:21 - seventh line now once again i'm going to
536:24 - press help here and then press enter and
536:27 - now i want to use this continue command
536:30 - so this continue command is used to
536:32 - continue the execution of your script
536:35 - from the point where you are right now
536:39 - so we are right now at this line which
536:42 - is line number seven and if i press c
536:45 - or if i type continue which is this
536:48 - keyword and i press enter
536:51 - then my program is going to execute and
536:54 - it will ask me the first number so i'm
536:56 - going to provide the first number let's
536:58 - say 2
536:59 - and then i'm going to provide the second
537:01 - number which is 3
537:03 - and then when i press enter it's going
537:05 - to execute the program and it's going to
537:08 - print the result which is 23 in this
537:11 - case which is wrong and after the script
537:14 - is finished the pdb is going to restart
537:17 - the execution from the top so you can
537:20 - see this line the program is finished
537:23 - and will be restarted so once your
537:26 - program is finished the pdb is going to
537:28 - restart it from the starting point from
537:32 - where it has started so i'm going to
537:35 - quickly provide the n command for next
537:38 - and once again next and i'm going to
537:41 - once again press next and provide the
537:43 - number which is three this time so now
537:46 - we are on this line which is the line
537:48 - number eight which is this line so the
537:51 - execution of this line is finished now
537:54 - there is a print command in pdb so you
537:57 - can just write print and the name of the
538:00 - variable so i'm going to just write x
538:02 - here because this line is already
538:05 - finished and it's going to give me the
538:07 - value of x so when i press enter it's
538:10 - going to print 3 which is the value of x
538:13 - once again i'm going to press the n
538:16 - command or the next command and then i'm
538:18 - going to provide the second number which
538:21 - is 4 this time
538:23 - and i'm going to print the value of the
538:26 - y now so till now nothing seems to be
538:29 - wrong with this code so let me just
538:32 - press h for the help once again and we
538:35 - are going to see the list of commands
538:37 - once again
538:38 - and now i want to use this command which
538:40 - is
538:41 - what is
538:42 - so i'm going to just write
538:45 - what is and the name of the variable
538:49 - which is x okay so earlier we have
538:52 - printed the value of x which is three
538:55 - and now i'm writing what is x so we want
538:58 - to know what type of value is inside x
539:02 - so i'm going to just press enter now
539:04 - and once you do that you will see
539:07 - that x is an instance of class string
539:12 - and we wanted to enter the number right
539:16 - so now we know what is the problem so
539:18 - because
539:19 - input function is going to return the
539:21 - string value
539:23 - and this add function is just
539:25 - concatenate
539:27 - these two string values and it's not
539:29 - adding the two numbers so what is
539:32 - command is going to give you the
539:34 - information about the variable or the
539:37 - function but we will continue our
539:39 - debugging so you can see here right now
539:42 - we are on this line which is
539:44 - this line so now i want to go inside the
539:48 - add function in order to inspect if it's
539:51 - working fine or not so we are on this
539:53 - line where add function is called so i
539:56 - can use this command which is the step
540:00 - command or i can use the shortcut which
540:02 - is s in order to step into the function
540:06 - where we are right now so i'm going to
540:09 - just type step here and then press enter
540:12 - and you will see we are here
540:14 - on the declaration of add function once
540:18 - again and if we type
540:20 - n or next once again we will go to the
540:23 - next line of this function which is this
540:25 - line which we use to add
540:28 - the value of x and y so this command
540:31 - step or this letter s can be used to
540:35 - step into your function or step into
540:39 - your class if you are using class it's
540:41 - going to step into or inside that
540:44 - function so now i'm going to just press
540:47 - n to go to the next line and this is the
540:50 - return sum line and now we already know
540:52 - what's the problem so we can press c or
540:55 - continue in order to continue the
540:57 - execution of this program so i'm going
540:59 - to press c and then press enter which is
541:02 - going to continue the execution of the
541:04 - program and it has printed the result
541:07 - and also
541:08 - it has restarted the pdb once again from
541:12 - the starting of the script so now let's
541:15 - correct this code and in order to
541:17 - convert the input into int or the float
541:21 - you can just type cast the string to int
541:24 - using this end function so i'm going to
541:27 - just use this in function
541:29 - in front of both the input values so now
541:33 - we know that our script is most probably
541:36 - going to run fine so let's try to set
541:38 - the breakpoint at this line because both
541:41 - the values will be available at this
541:44 - point and we will know the values of x
541:47 - and y at this point so we will be able
541:49 - to see the type of both the values so
541:52 - first of all what is a break point so
541:55 - when you set a breakpoint at some line
541:58 - the program is going to stop exactly at
542:01 - this line so generally we have seen that
542:04 - if you start the pdb it's going to start
542:06 - from the beginning of your script but if
542:10 - you set the breakpoint the execution
542:12 - will only stop at the line where you
542:15 - have set the breakpoint so once again
542:17 - i'm going to press h to get the help and
542:20 - i will see which command can i use to
542:23 - set the breakpoint so there is this
542:26 - command called break which i can use to
542:29 - set the breakpoint so let me get the
542:31 - help about the break and it's going to
542:33 - give us the description about the break
542:36 - command so you can use the break keyword
542:39 - or the b letter in order to set the
542:41 - break point so you can see it takes
542:43 - these arguments so in order to set the
542:46 - breakpoint you just need to write break
542:48 - and then the line number on which you
542:50 - want to set the breakpoint so let's say
542:53 - i want to set the breakpoint on the line
542:55 - number nine so i can just write break
542:58 - and then
542:59 - 9 and then press enter which is going to
543:02 - set the breakpoint on line number 9. now
543:05 - i can give the continue command in order
543:08 - to continue the execution of the script
543:11 - and now when i press continue it's going
543:13 - to first ask for these two values so i'm
543:16 - going to quickly give the value of first
543:19 - number and the second number and then
543:21 - when i press enter it's going to stop at
543:24 - this line where we have set the break
543:27 - point right
543:28 - so right now we are on this line which
543:31 - is line number nine and now i can give
543:34 - this command which is what is
543:36 - x and once again it says that the type
543:39 - of this x is string
543:42 - so what might be the problem the problem
543:46 - is after changing our script we haven't
543:50 - restarted the pdb we haven't exited the
543:54 - pdb and restarted the pdb so this script
543:57 - is not loaded after we have edited the
544:00 - code right so in order to quit the pdb
544:04 - you give the quit command or the q
544:07 - letter so just press q and then press
544:10 - enter which will allow you to come out
544:12 - of pdb and let me run that debugging
544:15 - once again so you can once again give
544:17 - this command python hyphen m pdb
544:20 - debugging dot py and then press enter
544:22 - which is going to restart the debugging
544:25 - and now this script is loaded once again
544:29 - with the correct code which is end so
544:32 - now let me just
544:34 - put the break point on the line number
544:36 - 10 which is this line and now i'm going
544:39 - to press c to continue and i'm going to
544:41 - give these two numbers let's say and you
544:44 - can see the program is halted on the
544:46 - line on which we have set the break
544:48 - point on so once again i'm going to give
544:51 - the what is command and the name of the
544:54 - variable which is x and then press enter
544:56 - and now you will see the type of x is
544:58 - now
544:59 - int and we have solved the problem so we
545:02 - can simply press c to continue and see
545:05 - the result and you can see it prints the
545:07 - result which is eight which is the
545:09 - addition of three and five
545:11 - so our debugging was successful and we
545:14 - are now seeing the expected result which
545:17 - we wanted to see so this is how you can
545:20 - use pdb to debug your python script now
545:23 - there are few more ways of using pdb
545:26 - with your python script so let's see
545:28 - those other ways in which we can use the
545:31 - command pdb with our python script so
545:34 - i'm going to press q in order to exit
545:36 - out of the debugging so the second way
545:39 - of using pdb is to import the pdb inside
545:43 - your script so i can just import
545:46 - the pdb library inside our script and
545:50 - then in order to set the breakpoint i
545:53 - can use pdb dot
545:56 - set trace
545:57 - so this will set the break point on the
546:01 - next line after
546:03 - this line so i'm going to just clear the
546:05 - terminal by right clicking and then
546:07 - pressing clear buffer and once again to
546:09 - start the debugging i just need to give
546:12 - this python command and the name of my
546:14 - script so once you have this import
546:16 - inside your script and you have this
546:18 - code inside your script you don't need
546:21 - to give the pdb command you just need to
546:23 - run your script normally with the python
546:26 - command so my program execution is here
546:29 - which is running the program normally so
546:31 - i'm going to just script the value of
546:34 - x and y which is three and four
546:36 - and it's going to stop the execution
546:39 - at this line which is just after the set
546:42 - trace code okay so because we have set
546:46 - the breakpoint on this line
546:48 - using this line of code it's going to
546:50 - stop at this point and once again i'm
546:53 - going to use for example what is command
546:56 - and i want to see the value of x and
546:59 - it's going to show us the type of x
547:01 - which is in so this is the other way of
547:04 - using pdb in your script some people
547:07 - also like to use pdb
547:09 - directly at the point where they want to
547:12 - set the breakpoint and the benefit of
547:14 - using this type of code is if you are
547:17 - using any linting tool it's going to
547:19 - warn you
547:20 - on the same line so the developer will
547:23 - know that he needs to remove this line
547:26 - because linting will fail because there
547:29 - is a semicolon here and we are using two
547:32 - line of code in the same line so it's
547:35 - going to give us the warning and that's
547:37 - how the developer will know that he
547:39 - needs to remove this line so he is going
547:41 - to remove this line after the script is
547:44 - working fine so this was the second way
547:47 - i'm going to quit out of the pdb once
547:50 - again and let me show you the last way
547:52 - of debugging your code with the pdb
547:55 - command so i'm going to clear the
547:57 - terminal
547:58 - and now i'm going to just give this
548:00 - python command which is going to open
548:02 - the python shell and here you just need
548:04 - to import the script which you are
548:07 - working with so i'm working with the
548:09 - debugging
548:11 - script and then import
548:13 - the pdb and once you have imported your
548:16 - script and the pdb module you can just
548:20 - use
548:21 - pdb in order to start the debugging of
548:24 - your script so pdb dot run
548:27 - and under the brackets or under these
548:30 - parentheses you just need to give the
548:32 - name of your script so my script name is
548:36 - debuggings and then you need to provide
548:38 - at which point you need to start the
548:40 - debugging so let me enclose this code
548:43 - inside a new function so let me define a
548:46 - new function and i'm going to name it as
548:48 - main and this is going to be my main
548:50 - function and inside the main function
548:52 - i'm going to execute all this script and
548:55 - i'm going to just call this main
548:57 - function inside this if condition and
549:01 - here on the python shell i can just
549:03 - write debugging dot the function which i
549:06 - want to call so i'm going to just call
549:08 - the main function and then i'm going to
549:10 - press enter and once again it shows me
549:13 - that
549:14 - debugging doesn't have this main method
549:16 - because after saving i haven't restarted
549:19 - the pdb once again so let me just quit
549:22 - once again quickly and let me just
549:24 - quickly close this terminal and restart
549:26 - this terminal and once again i'm going
549:28 - to give the python command which is
549:30 - going to start the python shell and i'm
549:32 - going to import the pdb and the script
549:35 - once again and now i can just give the
549:37 - pdb dot run command and then give the
549:40 - name of the script on which i want to
549:43 - work on which is debugging and then i'm
549:45 - going to call the main
549:47 - method inside the debugging and then
549:49 - press enter and once again give the n
549:51 - command which is for the next which is
549:53 - going to start the debugging of your
549:55 - code so this is how you can use the pdb
549:58 - command in order to debug your python
550:00 - script in the last video we have seen
550:03 - how to debug our python script using
550:06 - python debugger or pdb
550:08 - now in this video i'm going to show you
550:10 - how you can debug your python script
550:12 - using pycharm ide so to start with i
550:15 - have this python script which takes two
550:18 - user input both numbers and i have
550:21 - created this add function which just add
550:25 - these two numbers and return the sum and
550:27 - using this print function i'm just
550:29 - printing the sum of these two numbers
550:31 - now let's run this code normally without
550:34 - any debugging and i'm going to just give
550:37 - two numbers here 44 and 55
550:41 - it's going to give me this kind of
550:43 - output which is wrong because the sum of
550:45 - 44 and 55 is not obviously 4 4 5 5. now
550:50 - some of you might already know the
550:52 - problem with this code but let's debug
550:55 - it with the help of the python debugger
550:58 - so in order to start the debugging in
551:00 - pycharm ide you just need to click this
551:03 - icon which looks like a bug and when you
551:06 - hover over it it will say debug
551:09 - so i'm going to click on this debug
551:10 - button which is going to start the
551:12 - debugging of my program so you can see
551:15 - here this debugging window is opened and
551:17 - this debugging window have two sections
551:20 - one is console section and other is
551:23 - debugger section so right now we are in
551:26 - the console section where we can provide
551:28 - the user inputs and see the output of
551:32 - our python script just like the normal
551:35 - output now there is also a debugger
551:37 - window where you will be able to analyze
551:40 - the variables and all the frames of your
551:44 - program so i'm going to go to the
551:46 - console window and here i'm going to
551:47 - provide the first number
551:50 - and the second number and i'm going to
551:52 - press enter and it prints the sum of
551:55 - these two numbers which is not correct
551:57 - but our python script is finished
551:59 - executing now in order to debug this
552:02 - python script we need to set the
552:04 - breakpoint at which the execution of the
552:07 - program will stop and we will go step by
552:10 - step after this point so i'm going to
552:13 - set the break point at this line which
552:15 - is line number 13 at which my main
552:18 - function is called and then click on
552:20 - this line where you want to set the set
552:22 - point and you will be able to see this
552:24 - red circle logo which means that we have
552:27 - set the breakpoint at this point so
552:30 - let's start the debugging once again and
552:32 - you will see because we have set the
552:34 - breakpoint here the program execution is
552:37 - stopped at the line number 13 and how
552:41 - you know that the execution is stopped
552:43 - at line number 13 you will be able to
552:46 - see under frames this line which is
552:49 - highlighted and you can see the line
552:51 - number is 13 so at this point the
552:54 - program execution is on the line number
552:57 - 13. also you will be able to see these
553:00 - kind of icon on top of this window so
553:04 - the first icon here is the step over
553:07 - icon which you can click to step over
553:10 - your code the second icon is step into
553:13 - icon using which you can step inside
553:17 - your function or a class on which you
553:20 - are currently on the third icon is step
553:23 - into my code so generally if you use
553:26 - this option which is step into and your
553:28 - program contains some
553:30 - inbuilt or built-in functions then it's
553:33 - going to go into those built-in function
553:36 - and this other option which says step
553:38 - into my code is going to only step
553:41 - inside your code and not into the
553:43 - built-in functions or the classes there
553:46 - are few more icons here one is four step
553:49 - into and other is step out which we are
553:52 - going to see later also under this
553:55 - variables section you will be able to
553:57 - see the values of your variables so
554:00 - first of all i'm going to click this
554:02 - button which says step over you can also
554:04 - press f8 to step over so i'm going to
554:07 - click this button and because my program
554:10 - asked the user to provide some input i
554:13 - will go to the console and provide those
554:16 - inputs so i'm going to just give 33 as
554:18 - the first number and 55 as the second
554:21 - number and then once again i'm going to
554:23 - press enter which is going to print the
554:25 - output and we come out of the debugging
554:28 - so now you know that this breakpoint is
554:32 - not helping us so we are going to remove
554:34 - this breakpoint and we are going to set
554:36 - our breakpoint here on the line number
554:39 - nine
554:40 - so here we will be able to see the
554:42 - values inside the variable x and y
554:46 - so that we know what's the problem
554:49 - inside our code so let me start the
554:51 - debugging once again
554:53 - and once again i'm going to give these
554:55 - two inputs
554:57 - 33 and 44 let's say and then you can see
555:00 - our program execution is stopped at this
555:03 - breakpoint and you will be able to see
555:05 - the values
555:07 - of your x variable and the y variable
555:11 - now immediately you will see that this x
555:14 - value is the string and also this y
555:17 - value is the string and whenever we use
555:19 - this plus operator with two strings it's
555:22 - going to give us the concatenation of
555:25 - those two strings
555:27 - also in the variables you will be able
555:29 - to see the list of variables and the
555:32 - type of those variables and the values
555:35 - inside those variables so you can see x
555:39 - has string type and the value is 33 and
555:42 - y has also the type string and the value
555:46 - is 44.
555:48 - now i told you that you can use this
555:50 - button to step into your code so i'm
555:52 - going to click on this button which says
555:55 - step into my code which is going to step
555:58 - inside this function so our program
556:01 - execution was on this line this was the
556:04 - break point we have set and when i
556:06 - clicked this step into my code it has
556:09 - stepped into
556:11 - the function
556:12 - add if i would have pressed the step
556:15 - over button then my program execution
556:17 - will go to the next line and not inside
556:20 - this add
556:21 - function
556:22 - so because i have pressed this button
556:24 - which says step into my code that's why
556:26 - it goes inside the function
556:29 - so here also you will be able to see the
556:32 - values of your x variable and y variable
556:35 - and also you will be able to see the
556:37 - value of the sum when you just click the
556:40 - step over button
556:42 - and here you will be able to see the
556:44 - value of sum which is three three four
556:46 - four which is the concatenation of these
556:49 - two numbers so immediately you will know
556:51 - that you are not adding these two
556:53 - numbers you are just concatenating two
556:56 - strings which gives you this kind of
556:58 - result so once you have pointed out the
557:01 - problem in your code we are going to
557:03 - stop our debugging so there is this red
557:06 - button here which is a square button i'm
557:08 - going to click on this which is going to
557:10 - stop that debugging now in order to fix
557:13 - this code i can just type cast this
557:15 - input which is a string into the integer
557:18 - and with the second variable also i'm
557:21 - going to do the same and now let's start
557:23 - the debugging once again
557:25 - and once again i'm going to give the two
557:27 - numbers 33
557:29 - and 44 and press enter
557:32 - and the program execution will stop at
557:35 - the breakpoint and now you will be able
557:37 - to see the values here which is 33 and
557:40 - 44 and under variables you will be able
557:43 - to see the type of these two numbers
557:46 - which is now end so both are int values
557:49 - i'm going to step over now so last time
557:52 - we have stepped into the function which
557:54 - is the add function this time i'm going
557:56 - to just press the step over button which
557:59 - is going to not go inside the add
558:01 - function but just step over to the next
558:04 - line and you will be able to see the
558:07 - value of z here which is 77 which is the
558:11 - correct sum of these two numbers so this
558:13 - is how you can use pi charm to debug
558:16 - your python script in this video we will
558:18 - talk about a special tool called python
558:21 - pip
558:22 - so we are going to see what is python
558:24 - pip and how to use python pip
558:27 - so let's get started
558:29 - so first of all what is python pip
558:32 - so pip is a command line tool for
558:36 - installing and managing python packages
558:40 - which are generally found on a special
558:42 - index called python package index now if
558:46 - you want to know more about python
558:47 - package index you can visit on a website
558:51 - called pipe.orgpypi.org
558:56 - and you will be able to get more
558:58 - information about python package index
559:01 - on this website so what is python
559:03 - package index
559:05 - python package index or pi pi is a
559:08 - repository of software
559:10 - for python programming language now pi
559:13 - pi helps you to find and install
559:15 - software developed and shared by the
559:19 - python community you can get more
559:22 - details about pi pi by clicking on this
559:25 - link or this link which are shown on the
559:29 - home page of pi pi and you can see at
559:32 - the time of making this video there are
559:35 - almost more than 150 000 project
559:38 - available on this index and if you want
559:42 - to search for any special project you
559:45 - can search it using this search text box
559:49 - so let's see how we can use python pip
559:52 - using command line
559:54 - so generally whenever you have installed
559:57 - python on your windows or any other
560:00 - operating system pip will be installed
560:03 - with the same installation of python so
560:06 - if you have installed python 3.4 or
560:09 - above
560:09 - most probably the python pip will be
560:13 - already installed on your operating
560:16 - system
560:17 - now to check which version of pip is
560:20 - installed on your system you can give
560:22 - this command python hyphen hyphen
560:25 - version
560:26 - and then press enter and it's going to
560:28 - show you the version of pip installed on
560:30 - your system so you can see
560:33 - pip
560:34 - 10.0.1 is installed on my windows
560:37 - operating system and the python version
560:39 - which it supports is
560:42 - 3.7 now the first thing which you need
560:44 - to know about this tool called pip
560:47 - is how to use this tool so to know more
560:51 - about this tool you can give this
560:53 - command python hyphen hyphen
560:56 - help and it's going to show
560:58 - you the commands which you can use with
561:01 - this command line tool so here you can
561:04 - see the usage you give the pip command
561:07 - and then one of these command either
561:09 - install
561:10 - download uninstall
561:12 - list show and all these other commands
561:15 - in order to install a package or
561:17 - uninstall a package or get to know more
561:20 - about a particular package also there
561:23 - are some general options here which you
561:25 - can read so for example if you want to
561:27 - get help you give these options or if
561:30 - you want to print the verbose output you
561:33 - can use these options and if you want to
561:36 - know the version you can use these
561:37 - option and all these other options are
561:40 - available with this command line tool
561:43 - which is pip so let me clear this
561:45 - command prompt with the command called
561:48 - cls and i'm going to first of all go
561:51 - into the python shell using python
561:53 - command and in here i'm going to import
561:56 - a special package called flask and i'm
561:59 - trying to see if it's already there or
562:02 - not so i'm going to press enter and it's
562:04 - going to show me this error which says
562:07 - module not found error so this module
562:10 - flask is not right now recognized by my
562:14 - python interpreter so let me just exit
562:17 - from this interpreter by just pressing
562:20 - exit and now i'm going to just give cls
562:24 - so in order to know more about a
562:26 - particular package you give this command
562:28 - python
562:30 - search and the name of the package so in
562:33 - my case i want to
562:35 - just search for a package called flask
562:38 - and i'm going to press enter and it's
562:40 - going to give me a big list of package
562:43 - which are related to flask so because
562:46 - flask is a popular package on python
562:49 - package index that's why you can see so
562:52 - many options for the flask package so
562:55 - i'm going to once again
562:57 - clear the terminal and i'm going to
562:59 - install this package which is flask so
563:03 - in order to install the package you give
563:06 - this command pip install and the name of
563:09 - the package and then press enter and
563:12 - it's going to start downloading this
563:14 - package so now you can see this package
563:17 - is successfully installed on my system
563:20 - and you can see the version which is
563:22 - installed is flask
563:25 - 1.0.2 now in order to know more about a
563:28 - particular package which you have
563:30 - already installed you can give this
563:33 - command so in order to
563:35 - know more about the package which you
563:37 - have already installed you give pip show
563:40 - and the package name and when i give
563:42 - this command you can see the name of the
563:44 - package is flask the version which is
563:46 - installed is 1.0.2
563:49 - and there is a brief summary of this
563:52 - package also which is available here and
563:54 - the home page for this project is also
563:57 - available here who is the author and all
564:00 - the other details about this package
564:02 - which you may find useful are given here
564:05 - using this command which is pip show and
564:08 - the package name now after installing a
564:10 - package i'm going to verify if this
564:13 - package is available using the python
564:16 - shell or not and once again i'm going to
564:19 - try to import this package which is
564:21 - flask and then press enter
564:23 - and you will be able to see now i don't
564:26 - see any error
564:28 - so if you don't see any error this means
564:31 - that this package is successfully
564:34 - installed and in future you will be able
564:36 - to import this package to use it on any
564:39 - of your python script which you create
564:42 - after installing this package so let me
564:44 - once again exit from the python shell
564:47 - and let me clear the
564:50 - command prompt once again now in order
564:52 - to list out all the packages which are
564:54 - installed on your system you can give
564:56 - this command which is pip list which is
564:59 - going to print the list of all the
565:00 - packages which is already installed on
565:03 - your system now in order to uninstall
565:06 - any package you just need to give this
565:08 - command pip uninstall and the name of
565:11 - the package for example i want to
565:13 - uninstall this package which we have
565:15 - installed which is flask and i'm going
565:18 - to press enter and you can see it says
565:20 - uninstalling flask and it will ask you
565:23 - whether you want to proceed or not so
565:25 - you just need to press y in order to
565:27 - proceed and once you press y it's going
565:30 - to just uninstall that package from your
565:33 - system and at the end you will see this
565:36 - message which says successfully
565:37 - uninstalled and the package name which
565:40 - you have uninstalled you can once again
565:43 - give this command pip list and now you
565:45 - can see flask is no more in the list of
565:48 - installed packages so this is how you
565:51 - can use python pip in order to install
565:54 - and manage your python packages in the
565:57 - last video i have shown you how you can
565:58 - install and manage your packages using
566:02 - python pip
566:04 - now in this video i'm going to show you
566:06 - how you can install and manage your pip
566:09 - packages using pycharm ide
566:13 - so here i have a very simple opencv
566:16 - python script which i used to load this
566:20 - image which is
566:21 - pythonlogo.png file
566:23 - now in order to run this script i need
566:26 - to import this package which is called
566:28 - cv2
566:30 - and this package is available on python
566:34 - package index so let me just open
566:38 - the pi pi dot org website and let me
566:41 - search for opencv here and when i search
566:44 - for opencv you will be able to see
566:47 - multiple opencv related packages but the
566:50 - one i want to install is this one which
566:53 - is opencv hyphen python so i'm going to
566:56 - click on this package to see more
566:58 - details about this package so you can
567:01 - see the latest version of this package
567:03 - at the time of making this video is
567:05 - 3.4.3.18
567:09 - and in order to install this package
567:11 - with pip you just need to run this
567:13 - command which is pip install opencv
567:16 - hyphen python
567:18 - now in order to import this opencv
567:21 - hyphen python
567:23 - on your pycharm ide
567:26 - what you need to do is just create your
567:28 - project and write your code and then go
567:32 - to the file and then go to the settings
567:36 - so just choose the settings option here
567:39 - and once the settings option is open you
567:41 - will be able to see
567:43 - different categories here
567:45 - you need to choose this category which
567:48 - says project colon the name of your
567:51 - project and then click on project
567:54 - interpreter now by default some packages
567:57 - are already available here which is pip
568:00 - and setup tools and we want to install a
568:04 - special package which is opencv hyphen
568:08 - python so in order to add this package
568:11 - you just need to click on this plus
568:14 - button so i'm going to click on this
568:16 - plus button and you will be able to see
568:19 - this search bar here so here you just
568:22 - need to search for the package you are
568:24 - looking for so i have just entered
568:27 - opencv hyphen python here and the first
568:31 - option which is available here i have
568:34 - just selected it and you can see this is
568:36 - the same package which we have seen on
568:39 - the python package index website so
568:42 - let's match this once again so here you
568:45 - can see the latest version is 3.4.3.18
568:49 - and here also the latest version is the
568:51 - same
568:52 - and the description is also same so
568:54 - wrapper package for opencv python
568:57 - bindings and here also the description
569:00 - is same so this is the package we want
569:03 - to install if you want to see the github
569:06 - repository also i'm going to just scroll
569:08 - here and then i'm going to open the
569:11 - github page from the pi pi website for
569:14 - this opencv hyphen python and this
569:17 - github
569:18 - url is also same which we are seeing on
569:22 - the pie charm ide so now we know that we
569:26 - need to install this package which is
569:28 - opencv hyphen python
569:30 - so we just need to click on this button
569:33 - which says install package which is
569:35 - going to install this package for your
569:38 - project and after some time you will be
569:41 - able to see this message which says
569:43 - package opencv hyphen python installed
569:46 - successfully so i'm going to just close
569:49 - this window
569:50 - and after closing this window you will
569:52 - be able to see
569:54 - that this opencv is now visible in your
569:57 - project interpreter and now we are going
570:00 - to click once again ok
570:02 - and once you click ok you will be able
570:05 - to see here at the bottom some processes
570:08 - are running which is the process of
570:11 - importing this library into your project
570:13 - and after some time you will see
570:16 - that this red squiggly line for the
570:18 - error has disappeared
570:21 - from the import cv line
570:24 - so now we will be able to run this code
570:27 - so let's run this code and let's verify
570:30 - if everything is working fine so i'm
570:32 - going to just right click and then click
570:35 - on run
570:36 - the project name on the file name and it
570:39 - has opened the picture which i want to
570:42 - open which is this python logo picture
570:45 - so this is how you can install and
570:47 - manage your pip packages using pycharm
570:51 - ide
570:52 - in this video we will talk about global
570:54 - variables local variables and non-local
570:57 - variables
570:59 - so let's get started so to start with i
571:02 - have a very simple function
571:04 - which is func and here it has one print
571:08 - statement which is printing the value of
571:11 - x
571:12 - but you can see here x is not defined
571:15 - locally inside the function instead i
571:18 - have declared x outside the function
571:21 - and i am just assigning the value to x
571:24 - just before calling the function here so
571:28 - what do you think will happen so let's
571:30 - run the code and let's see what happens
571:32 - so because
571:34 - this x is declared globally and it's in
571:38 - the global scope so first of all your
571:41 - function will search for the value of x
571:44 - inside the function in the local scope
571:46 - and if it doesn't find the value x
571:50 - inside the local scope it's going to see
571:52 - outside the local scope in the global
571:55 - scope for the value of x
571:57 - and we have defined this value of x
572:00 - outside the function in the global scope
572:03 - so this print statement will take the
572:04 - value of x from the global scope and
572:07 - that's why it's printing global using
572:10 - this print statement now let's modify
572:12 - this function little bit so i'm going to
572:14 - define a local x inside the function and
572:19 - i'm going to assign a new string to it
572:21 - so let's say this is a local value so i
572:24 - am going to assign
572:26 - the string to the x so now we have x
572:29 - variable inside the local scope of the
572:33 - function and also we have another x
572:36 - variable
572:37 - outside the function in the global scope
572:40 - so what do you think now will happen so
572:42 - let's run the code and let's see what
572:44 - happens so you can see here it's going
572:46 - to print local
572:48 - because the variable will take the local
572:51 - value or local value have more priority
572:55 - than the global value
572:58 - so whatever variable is declared nearer
573:02 - to the use
573:03 - of this variable that variable value
573:06 - will be used and that's why the local is
573:09 - printed because it's declared nearer to
573:12 - the use of this x which is inside the
573:16 - local scope of this function
573:19 - now let's print the value of x outside
573:22 - the function so in the global scope i
573:26 - want to print the value of x once again
573:29 - and let's run the code and let's see
573:30 - what happens
573:32 - so this local is printed using this
573:35 - print statement and the global is
573:37 - printed using the print statement which
573:40 - is outside the function so right now
573:42 - things are easy to understand when you
573:45 - declare this value x outside a function
573:48 - in the global scope and call the value
573:51 - of x using print then it's going to
573:53 - print the global
573:55 - and whenever you use the variable inside
573:59 - the function in the local scope it's
574:02 - going to print the local variable value
574:05 - which is
574:06 - local to the function so this means
574:09 - variable x which you have declared
574:11 - inside the function
574:12 - is the local variable and this variable
574:16 - x which you have declared outside the
574:19 - function is the global variable
574:22 - now let's make things little bit
574:24 - interesting and i want to just print the
574:27 - value of x before even assigning the
574:31 - value local to it so right now i want to
574:34 - do something like this so until this
574:37 - print statement i haven't declared the
574:39 - value of x locally so using this print
574:42 - statement the value of x
574:44 - is supposed to be taken from the global
574:47 - variable which is this variable and then
574:50 - once we have declared the value of x
574:54 - locally then this print statement is
574:57 - going to print the value of x using the
575:00 - local variable but when we run the code
575:03 - it's going to give us the error and it's
575:05 - going to say that this is unbound local
575:09 - error which is local variable x
575:12 - referenced before the assignment so
575:15 - right now what we are trying to do is we
575:17 - are trying to mix the global and the
575:20 - local variables and python is not able
575:24 - to understand whether x is a local
575:27 - variable or x is a global variable so to
575:31 - solve this problem we need to state
575:33 - explicitly that this x which we want to
575:36 - call using this
575:38 - print statement is the global
575:42 - value right so x here we want to take
575:45 - from the global value so to state that
575:49 - we can use
575:50 - a keyword called global and then the
575:54 - variable name so by writing this kind of
575:57 - expression we are telling python
575:59 - that x is declared
576:02 - globally outside the function
576:04 - and we want to take the value of x
576:07 - globally so using this statement we are
576:10 - just stating that use the value of x
576:14 - using the global scope
576:16 - now when we run the code it's going to
576:19 - run fine so now you can see it has
576:21 - printed global here so let me just
576:24 - change this print statement so we will
576:26 - be able to understand
576:27 - what's happening
576:29 - really here so i'm going to just assign
576:32 - some number to the print statement let's
576:35 - say this is number one print statement
576:38 - and then this is number
576:41 - two print statement
576:43 - and
576:44 - this is
576:45 - number three print statement so we are
576:47 - going to know which
576:49 - value is printed using which print
576:52 - statement so i'm going to run the code
576:54 - once again and now you can see first
576:56 - print statement which is this one
576:59 - is going to print global because until
577:01 - here the value of x is taken from the
577:04 - global scope so it's going to print the
577:06 - value of x which is global which is
577:09 - defined here now you can see here we are
577:12 - reassigning the value of x and we are
577:15 - just saying that now we want to assign
577:19 - local to this x variable but still this
577:23 - variable is the global variable because
577:26 - we have explicitly stated here that take
577:29 - the value of x from the global variable
577:32 - so this global variable value will be
577:36 - reassigned and now this global variable
577:39 - value is local because we have
577:42 - reassigned the new value inside the
577:45 - global variable x and in the third print
577:47 - statement because we have already
577:49 - changed the value of x here
577:52 - now the new value of x will be local and
577:56 - it will be
577:57 - accessible from the global scope also so
578:00 - this also prints local so once again
578:03 - when you use this expression you are
578:05 - telling your local function that use the
578:09 - value of x from the global scope so now
578:13 - whenever you reassign some other value
578:16 - to x this is not the local declaration
578:20 - you are just reassigning the value to
578:23 - the global variable which is x here okay
578:27 - so once you have changed the value of x
578:30 - to local it will stay there that's why
578:34 - here also it has printed the value of x
578:37 - is equal to local now let's talk about
578:39 - the non-local variables
578:42 - so non-local variables behave
578:45 - almost similar to global variables but
578:48 - they have some differences so let's say
578:51 - i will define instead of saying that
578:54 - this is a global variable i'm going to
578:56 - say that this is a non-local variable
579:00 - and when i run the code it's going to
579:01 - complain and this is going to say
579:04 - that this is a syntax error and no
579:07 - binding for non-local variable is found
579:11 - so non-local variable bindings you can
579:15 - only do inside the nested function so
579:18 - generally you use non-local variables
579:21 - inside the nested function you cannot
579:24 - use this non-local keyword instead of
579:27 - the global keyword so let's see how we
579:30 - can use the non-local variables inside
579:33 - the nested function so what i'm going to
579:36 - do here is let's say i'm going to define
579:39 - the value and let's say this time i want
579:42 - to just use the value of x as numbers so
579:47 - here i'm going to assign x is equal to
579:49 - 20 so this x is in the global scope and
579:53 - i'm assigning 20 to it and then i'm
579:55 - going to once again inside the function
579:58 - i'm going to declare a local x and i'm
580:00 - going to assign
580:02 - 50 to it and then i'm going to define
580:05 - one more function inside this function
580:08 - and i'm going to name it as let's say
580:11 - inner function and let me just add the
580:15 - def keyword and then inside this inner
580:18 - function what i am going to do is i am
580:20 - going to define a non-local variable
580:23 - once again x and then what i am going to
580:26 - do is i am going to reassign the value
580:29 - of x is equal to hundred so what i have
580:32 - done i have declared this x global
580:35 - variable and assigned 20 to it and
580:38 - inside the function also i have declared
580:40 - one local x variable and i have assigned
580:43 - 50 to it and inside the inner function
580:45 - of this function i have defined a
580:48 - non-local variable which is x and i have
580:50 - assigned the value 100 to it so now what
580:53 - we are going to do here is we are going
580:56 - to call
580:57 - this inner function inside our outer
581:00 - function which is the
581:02 - func function okay so this is the inner
581:06 - function and we are calling this inner
581:08 - function inside this function which we
581:11 - have declared so now what do you think
581:13 - will happen so let's run the code and
581:15 - let's see what happens
581:17 - so this first print statement which is
581:20 - this one
581:21 - it's going to print 50 because until now
581:24 - before calling the inner function the
581:28 - value of x will be taken from the local
581:31 - scope because we haven't
581:33 - stated here explicitly that x is a
581:37 - global variable so the value of x will
581:40 - be taken from the local scope right so
581:42 - we haven't written here that value of x
581:46 - is a global
581:48 - variable x value right so that's why the
581:52 - value of x will be taken from the local
581:54 - scope and that's why it's printing 50
581:57 - here using the first print statement
582:01 - now here we have called the inner
582:04 - function that means the value of
582:07 - non-local variable is assigned to 100
582:11 - and once again we are calling the value
582:13 - of x so here inside the inner function
582:16 - we have defined the non-local
582:18 - variable that means it's not a global
582:21 - variable so it's not changing the value
582:24 - of the global variable or it's not using
582:28 - x from the global scope but this x will
582:32 - be taken from the local scope so this x
582:36 - will be overwritten
582:38 - by 100 values this is the new value we
582:41 - are assigning to our local variable
582:43 - which is x right so that's why it's just
582:47 - giving us 100 using this print statement
582:51 - so this non-local keyword you generally
582:54 - define
582:55 - inside the nested functions to state
582:59 - that we want to take the value of x from
583:03 - the local scope of the outer function
583:07 - not the global scope so this x is
583:10 - essentially this x which is defined
583:13 - inside this function and we are just
583:15 - reassigning the value of x to hundred
583:19 - and that's why it's printing hundred
583:20 - here and also you can see this print
583:23 - statement which is printing the value of
583:26 - global
583:27 - x which is this one that's why it's
583:30 - printing 20. so because we are not using
583:33 - this global x inside the functions
583:36 - because we have just used the local
583:38 - variable x inside the function and then
583:40 - we have reassigned the value of 100 to
583:43 - this local variable this
583:45 - x is not going to change and that's why
583:48 - it's printing 20 here now let's see what
583:51 - will happen when we change this keyword
583:53 - non-local to global
583:56 - and once again i'm going to run the code
583:59 - so now let's go to the function
584:01 - and here we have defined the local x
584:05 - which is different from the global scope
584:07 - so until here
584:09 - the value of x will be taken from the
584:12 - local scope so this print statement
584:15 - because we haven't called the inner
584:17 - function before this so the value of x
584:21 - will be taken from the local scope so
584:23 - here
584:24 - it's going to print 50. now after this
584:27 - print statement we are just calling the
584:29 - inner function and inside this inner
584:31 - function we are just saying
584:33 - that take the value of x
584:35 - from the global scope not the local
584:38 - scope so using this expression we are
584:41 - saying that take the value of x from the
584:44 - global scope so this value will not be
584:48 - affected
584:49 - by
584:50 - this reassignment because now we are
584:53 - changing the value of the global x and
584:57 - not the local x so that's why when you
585:01 - call this print statement the value of x
585:04 - will be taken from the local scope so
585:06 - using this print statement when you call
585:09 - x it's going to take the local value of
585:12 - x because this inner function has no
585:15 - effect on this value of the local x and
585:20 - that's why it's printing 50 once again
585:24 - using this print statements so this x
585:26 - value will come from the local x and not
585:29 - from the global x and the last print
585:32 - statement is going to print hundred
585:34 - because
585:35 - this is the global x we are talking
585:38 - about and we have already changed the
585:41 - value of globalx 200 using this
585:45 - expression that's why it's printing 100
585:47 - here so there is our difference between
585:50 - non-local and the global variables if
585:54 - you write here non-local
585:56 - then here this value will be treated as
585:59 - the local variable so here we are
586:03 - changing the value of the local variable
586:06 - of x if you declare this as the global
586:10 - variable then we are changing this value
586:12 - which is in the global scope so this is
586:15 - how you can use global variables local
586:18 - variables and non-local variables in
586:22 - python i hope you've enjoyed this video
586:24 - i will see you in the next video
586:42 - hey guys welcome to this video on python
586:45 - unit testing tutorial for beginners
586:48 - using pi test
586:50 - so first of all what is unit testing so
586:54 - according to wikipedia unit testing is a
586:56 - software testing method by which
586:59 - individual units of source code are
587:03 - tested to determine whether they are fit
587:06 - to use or not so in unit testing we
587:09 - perform the lowest level of testing
587:12 - that is individual units of software are
587:16 - tested that means units like functions
587:19 - subroutines and classes are tested to
587:23 - verify if they are giving the desired
587:25 - result or not now let's discuss why
587:29 - should we unit test our code so when you
587:31 - write unit tests they reduces bug in the
587:35 - new features and existing features so
587:38 - let's say if you are writing a new
587:40 - feature in your code unit tests can help
587:44 - you to reduce the bugs
587:46 - which may appears during the execution
587:49 - of your code now if you write good unit
587:52 - tests this serves as a good
587:54 - documentation for the person who is
587:58 - using your code
587:59 - so because in unit test we are actually
588:02 - using
588:04 - the functions or the classes and testing
588:06 - them so if the person who wants to use
588:09 - your code he reads the test he will be
588:12 - able to understand how to use your code
588:16 - also when you write test for your code
588:19 - it reduces the cost of the change in the
588:22 - production
588:24 - so if some code goes to production
588:27 - without testing
588:29 - and you find the bug in the production
588:32 - stage then it's much costlier than
588:35 - fixing your code when
588:38 - you are developing your code next unit
588:41 - test helps in
588:43 - faster debugging and faster development
588:46 - of your program also because you have
588:49 - the idea of what should be the desired
588:52 - result that means you can develop your
588:55 - code in a manner which is perfect for
588:58 - your tests and at last but not the least
589:02 - unit test helps us to better design our
589:06 - program now let's talk about the unit
589:08 - testing frameworks which are available
589:11 - in python so i have listed here three
589:14 - top most unit testing frameworks which
589:16 - we can use to write our unit tests
589:19 - so first module is unit test module and
589:23 - this unit test module is present in your
589:26 - python standard library so you don't
589:30 - need to install any extra module in
589:32 - order to use this unit test module the
589:35 - next module is the nose module which is
589:38 - not there in the standard library
589:41 - but it's simpler to use than the unit
589:45 - test framework and at last you can use
589:48 - the pi test framework which is not in
589:50 - the python standard library but it's one
589:54 - of the most popular unit testing
589:56 - framework
589:57 - for python so we are going to use pi
590:00 - test for the unit testing of our python
590:02 - code so let's see how we can install pi
590:05 - test package on our operating system on
590:08 - which we are working on so you can
590:10 - install pi test using pip
590:13 - so we are going to just write pip
590:15 - install
590:17 - pi test and then press enter which is
590:19 - going to install this pi test package on
590:23 - our operating system so you can see pi
590:25 - test is now installed on my operating
590:27 - system so i'm going to give cls command
590:30 - to clear the terminal and then first of
590:32 - all i can give this pi test command and
590:35 - then hyphen h
590:37 - in order to get the help about pi test
590:40 - so just press enter which is going to
590:42 - give you all the
590:44 - flags or the commands which you can use
590:47 - with the pi test so the usage is given
590:51 - here you just need to use the pi test
590:53 - keyword and then you can give the
590:55 - options which are listed below and you
590:57 - can give the file or directory name or
591:00 - the list of files or directories so for
591:03 - example the general options are given
591:05 - here so when you give this flag minus k
591:08 - or hyphen k it's going to match the
591:10 - substring or the regular expression
591:13 - which you provide after this flag and
591:16 - when you use hyphen m this means that
591:19 - it's going to test the functions which
591:21 - have the name assigned directly to them
591:24 - that means only run the test which have
591:27 - a given mark expression so i'm going to
591:30 - try to show you all these options one by
591:33 - one but let's see how we can write the
591:35 - test to use them using pi test so in
591:39 - here i have a python script called math
591:42 - underscore func dot py file
591:45 - and inside this script i have two
591:47 - functions one is a simple add function
591:50 - which adds two values and other is the
591:54 - product function which returns the value
591:57 - of the multiplication of two values now
591:59 - in order to write the unit test for
592:01 - these functions i can create a new file
592:04 - so let me create a new python file and
592:07 - i'm going to name it as test underscore
592:10 - math underscore func so i have added
592:14 - this extra prefix here which is test
592:16 - underscore in front of the name of my
592:20 - file which is math func so i'm going to
592:23 - just create this file so this test
592:25 - underscore prefix which i have added in
592:27 - front of my python script name
592:30 - will help pi test to recognize that this
592:33 - is the file in which the unit testing
592:36 - functions are written so it's going to
592:38 - go to that file and here we can first of
592:41 - all import
592:43 - the math func
592:45 - python script and then we can define the
592:48 - test functions
592:50 - so the test function you can define
592:52 - simply as you define any other function
592:55 - in your python script so you write def
592:58 - and then just start the test name with
593:00 - the test prefix so test underscore and
593:03 - then whatever name you want to give to
593:06 - your test so first of all i want to test
593:08 - the add function here so i'm going to
593:10 - just write test underscore add and this
593:13 - function is not going to take any
593:15 - parameter and inside this function i can
593:17 - provide some assertion for my
593:20 - functions
593:21 - so i can use a special keyword which is
593:24 - assert and then you can call your
593:26 - function in your python script so
593:29 - mathfunc
593:30 - dot add function and here as an argument
593:33 - i'm going to provide two numbers let's
593:35 - say 7
593:36 - and 3 which is going to give us the
593:38 - result 10 so we are going to just check
593:41 - whether this function is returning 10 or
593:43 - not and this is called assertion
593:46 - assertion means you want to assert
593:49 - that the function is returning the
593:52 - desired result so we are expecting the
593:54 - result 10 when we provide 7 and 3 as an
593:58 - argument to this add function you can
594:01 - also provide multiple asserts here so
594:04 - let's say i just want to provide for
594:06 - example 7 here you can see that y is
594:10 - equal to 2 is the default value of y so
594:14 - here in the assert i can only give one
594:17 - argument and the value of second
594:19 - argument which is y will be taken from
594:22 - the default value which is two so seven
594:24 - plus two is nine so we can just say
594:27 - whenever you provide seven here it's
594:30 - going to give us nine
594:32 - once again whenever you provide five
594:34 - here it's going to give us seven so in
594:37 - this way you can provide multiple
594:39 - asserts
594:40 - inside your function whatever you think
594:43 - will come as an expected result of your
594:48 - function
594:49 - so i'm going to define the second
594:51 - function which is test
594:52 - product and once again i'm going to pass
594:55 - no argument here and once again i can
594:57 - just use this assert keyword and then
595:00 - the name of my library which is math
595:03 - func
595:04 - dot the function this time we are going
595:06 - to test the product function and let's
595:09 - say we just want to check the product of
595:11 - 5 and 5 and the expected result will be
595:16 - 25 in a same way whenever
595:19 - you provide here for example only one
595:23 - argument the default value of y is two
595:26 - right so when we provide only one
595:29 - argument which is 5 here we will be
595:31 - expecting 10 here in a similar way when
595:34 - i provide let's say 7 here we are
595:36 - expecting the result 14 here so once we
595:38 - have written our unit tests
595:41 - let's try to run these tests using pi
595:44 - test so first of all i need to go to the
595:47 - directory where this test script is
595:50 - there so i'm going to just copy the path
595:52 - and then go to the terminal and i'm
595:54 - going to cd to this path which i have
595:56 - copied and let me just remove the script
595:59 - name from here and then press enter so
596:02 - now i'm in the folder where my math func
596:04 - dot py is there and test underscore math
596:08 - underscore func dot py file is there so
596:12 - in order to run your unit test file you
596:14 - just need to give this command pi test
596:16 - and the name of your test file which is
596:20 - test underscore math underscore func dot
596:23 - py in my case and then i'm going to
596:26 - press enter
596:28 - and you can see it's going to give me
596:30 - two passed in whatever time it took to
596:33 - execute these two tests so because we
596:36 - have written two tests here
596:39 - for two functions it's going to show us
596:42 - this result which is two passed let's
596:44 - say we are going to expect some
596:46 - unexpected value so here we have written
596:49 - some wrong
596:51 - value which we are expecting and now
596:53 - when we run our test it's going to fail
596:56 - you can see one passed and one failed
596:59 - and pi test will also give you the
597:01 - information about the assertion failure
597:05 - so the assertion failure is happened
597:08 - at this assertion where you are just
597:11 - testing 10 is equal to 18 which is wrong
597:15 - here so once again we are going to
597:17 - correct this also let's say some
597:20 - developer has changed the function which
597:23 - you are testing so instead of returning
597:26 - the addition now i'm going to return the
597:29 - subtraction which is going to break that
597:31 - test now so i'm going to run the test
597:33 - once again and once again it's going to
597:36 - give you the error and this time it's
597:38 - going to show us that the result is 4
597:41 - but we are expecting 10 as the result
597:44 - and that's why it's failing so once
597:47 - again i'm going to just fix my code and
597:49 - then once again i'm going to run my test
597:52 - and once again the text will pass so let
597:56 - me just clear the terminal using cls
597:58 - command
597:59 - and you can also give a flag called
598:02 - minus v
598:03 - which stands for verbose in order to get
598:06 - the more detailed result so i'm going to
598:09 - press enter and you can see it's going
598:11 - to give us this flag passed or failed in
598:15 - front of your tests and both tests are
598:19 - right now passing that's why it's
598:20 - written passed in green here let's break
598:24 - the test once again so i'm going to just
598:26 - say minus here and once again run the
598:29 - code
598:30 - and now it will say this test is passing
598:34 - but the test add is failing due to this
598:37 - assertion so i'm going to once again fix
598:40 - the code and come to the terminal once
598:43 - again i'm going to just clear the
598:45 - terminal
598:46 - and you can also run your test using
598:48 - this command so you just need to write
598:50 - pi
598:51 - dot
598:52 - test without giving any name in front of
598:56 - this pi dot test and then press enter
598:58 - which is going to automatically
599:00 - recognize the test file because we have
599:03 - given the special prefix here test
599:06 - underscore this is how
599:08 - your pi test will recognize that this is
599:11 - the testing file so it's going to just
599:14 - run the test inside that file and once
599:17 - again you can see it runs and two tests
599:20 - are passing you can also give the
599:23 - verbose flag here which is going to give
599:26 - you the more information about
599:28 - your tests now let's say we are going to
599:30 - remove this prefix from our test so
599:33 - let's say we just write tes underscore
599:36 - add so there is no test prefix in front
599:39 - of your function and once again i'm
599:42 - going to give the same command and you
599:44 - will see only one test is recognized
599:47 - which is test underscore product and
599:50 - this is because we haven't provided that
599:53 - test prefix in front of the function so
599:56 - in order to recognize this function as a
599:58 - unit test you need to give the test
600:00 - keyword as the prefix of your unit test
600:03 - function also whenever you change the
600:05 - name of your test file so let's say i'm
600:08 - going to refactor the name and i'm going
600:11 - to just remove the
600:13 - t from test and then once again i'm
600:16 - going to press refactor which is going
600:18 - to change the name of this test file and
600:21 - now this test file name is tes
600:24 - underscore math underscore func and once
600:27 - again i'm going to try to run
600:29 - my test and it's going to say no test
600:33 - run in
600:34 - this much amount of time so again
600:36 - whenever you don't give the test keyword
600:39 - in front of your file name then pi test
600:42 - will not be able to recognize that this
600:45 - is your unit testing file let's go to
600:47 - the terminal and i'm going to just give
600:50 - the cls command in order to clear the
600:52 - terminal and let's give the second
600:55 - command now which we have used for
600:58 - running the test which is the pi test
601:00 - command and the name of the file so now
601:03 - my file name is tes underscore math
601:06 - underscore py and now i'm going to press
601:09 - enter
601:10 - and you will see
601:11 - now it's going to recognize because we
601:14 - are specifically giving the file name in
601:18 - which our tests are there so if you want
601:21 - to run your test inside some file which
601:24 - doesn't have the test prefix in front of
601:27 - it you can just use pi test command and
601:30 - then give the name of the file and pi
601:32 - test is going to recognize that this is
601:34 - the file in which your unit tests are
601:37 - there and it will run all the unit test
601:40 - in this file so so in the last video we
601:43 - have written two test functions
601:45 - for our add and product functions which
601:48 - were able to test those functions using
601:51 - these numbers
601:53 - now additionally i have added two more
601:56 - test functions here and these two test
601:58 - functions i have added to test the
602:01 - strings with the add function and the
602:04 - product function
602:06 - so using this plus operator we can also
602:09 - add two strings right so i have added
602:13 - the string test for the add function and
602:16 - the product function here now the first
602:18 - thing i want to show here is you can add
602:21 - any comparison operator here so it's not
602:24 - necessary that you need to use this
602:26 - equal to operator here you can also
602:29 - write for example greater than operator
602:32 - or greater than equals to operator or
602:34 - the less than operator or less than
602:37 - equals to operator or not equals to
602:39 - operator so you can use all these
602:41 - comparison operator with your assert
602:44 - statement additionally you can use this
602:47 - is keyword to test whether something is
602:51 - something so using this is keyword i am
602:53 - testing here that the result which i got
602:57 - using
602:58 - this add function over the strings
603:01 - is it a string or not so using this type
603:04 - i'm just finding out the type of the
603:07 - result and i'm checking if this result
603:10 - is a string or not you can also use in
603:13 - operator or not in operator so using
603:16 - this not in
603:17 - keyword we are checking whether the
603:20 - string is inside our result or not so
603:24 - this string or let's say this string is
603:26 - not inside our result so this assert is
603:30 - going to pass because this string is not
603:32 - present in our result
603:34 - additionally you can also use this in
603:37 - keyword and you can check whether some
603:41 - string is inside your result or not so i
603:44 - can also write hello in result which
603:47 - will check if this keyword is inside our
603:49 - result or not now the next thing which i
603:51 - want to show here is let's say you just
603:54 - want to run
603:56 - one test from here which is test add and
603:58 - you don't want to run any other test how
604:02 - you can do it using command line so you
604:04 - can just write pi test command and the
604:07 - name of your
604:09 - test file which is test underscore math
604:12 - underscore func in my case and then you
604:16 - can add double colon here and then give
604:18 - the name of your test so let's say i
604:21 - just want to run the test ad so i'm
604:24 - going to just run this test
604:27 - and you can see it's going to only run
604:29 - the first test let me just add minus v
604:33 - here which is going to show which test
604:36 - has passed and you can see this test has
604:39 - been passed which is test add and let me
604:42 - just clear the terminal now the next
604:44 - option which i want to show here is
604:47 - hyphen k
604:49 - so once again i'm going to just write pi
604:52 - test here and we will once again add the
604:55 - hyphen v for verbose and you can use a
604:59 - special option which is hyphen k
605:03 - and then you can give any expression
605:06 - which you want to match using this
605:08 - hyphen k option
605:10 - so let's say we only want to run the add
605:14 - test so we have to add test one is test
605:17 - underscore add and other is test
605:20 - underscore add underscore string so i
605:23 - just want to run the test
605:26 - for the add function
605:28 - so here inside the double quotes i can
605:32 - just write add and then press enter and
605:36 - it's going to run the test which
605:38 - contains add
605:39 - keyword or add string so you can see it
605:42 - ran test underscore ad
605:45 - and test underscore add underscore
605:48 - string
605:49 - you can also use
605:51 - or operator here so let's say you want
605:53 - to run the test which contains add
605:56 - or which contains
605:58 - string keyword
606:00 - and when i'm going to run the test it's
606:02 - going to run all those tests which
606:05 - contains either add or the string
606:08 - keyword so there are three tests which
606:10 - fulfills this condition and all those
606:13 - three tests are performed and other
606:16 - tests will be deselected so you can see
606:19 - four item and one item is deselected
606:22 - here also you can use the and instead of
606:25 - or so i'm going to just write end and
606:27 - then press enter and it's going to run
606:29 - only those tests which contains add and
606:34 - string both so there is only one
606:37 - test
606:38 - name which contains add and string both
606:41 - which is this one so only this will be
606:43 - executed and the other three test will
606:46 - be deselected let me once again clear
606:48 - the terminal now the next option which i
606:50 - want to show here is the hyphen m
606:54 - option
606:55 - so once again i'm going to just write
606:58 - here hyphen m
606:59 - and after this hyphen m you can provide
607:02 - any
607:03 - mark expression
607:05 - so let me go to my code and here i just
607:10 - need to import the pi test first of all
607:12 - so let me import
607:14 - pi test and here you will see that it's
607:17 - showing me the squiggly line because of
607:21 - my ide which is pie charm so because i
607:23 - have installed pi test using pip on the
607:27 - command line which is not recognized by
607:30 - my pycharm ide that's why it's showing
607:33 - me this squiggly line but i'm running my
607:35 - test using command line so this will
607:38 - work so don't worry about this squiggly
607:40 - line the import will work and after that
607:44 - what i can do here is i can add a
607:46 - decorator so i can just write pi test
607:49 - dot
607:50 - mark dot any expression which you want
607:52 - to give here so this test add and test
607:56 - product is for the numbers so we can
607:59 - write
608:00 - number here and also we can add the same
608:03 - decorator
608:04 - for the test product
608:06 - and for the other two tests we can just
608:09 - write that these tests are for the
608:12 - strings so this expression is upon u so
608:15 - you can give any expression here which
608:18 - you want to match later using hyphen m
608:21 - option so i'm going to also add this
608:23 - decorator over the other string function
608:26 - also so we have two markers now one is
608:30 - number and other is the string so now
608:34 - after hyphen m you can give the mark
608:36 - expression name so let's say i'm going
608:39 - to just write number here and then press
608:42 - enter
608:43 - and it's going to run all the tests
608:45 - which have the mark number which is
608:48 - the test add and test product now let's
608:51 - run the test which have the mark
608:55 - string so i'm going to just write string
608:57 - and then press enter and it's showing me
608:59 - 4d selected because i forgot this s
609:03 - after the string so let me just add this
609:06 - s and then press enter again and you can
609:09 - see it runs only those tests which have
609:13 - string mark on top of them so this is
609:16 - the string and this is the string mark
609:18 - so those two tests
609:19 - were executed and other to test were
609:22 - deselected let me just clear the
609:25 - terminal once again now the next option
609:27 - which i want to show here is hyphen x
609:30 - option so once again i'm going to just
609:33 - write pi test
609:34 - hyphen v and then hyphen x
609:38 - now this hyphen x means exist first so
609:41 - whenever first failure occurs in your
609:44 - test the pi test will exit from the
609:47 - execution of your test so let's just
609:51 - add some failure assertion here so i'm
609:54 - going to add the
609:57 - failure here so let's say i'm just
610:00 - checking the failed assertion here just
610:03 - to check whether this hyphen x works or
610:06 - not
610:07 - so i'm going to just press enter now
610:10 - and you can see first test was run which
610:13 - was passed
610:14 - but the other test failed so it has
610:17 - shown us
610:18 - the stack trace of the failed
610:21 - test and after that the text execution
610:24 - was stopped so after two tests because
610:27 - the failure occurred the other two tests
610:30 - which was supposed to be executed are
610:33 - not executed because of this hyphen x
610:37 - option
610:38 - so as soon as the first failure occurs
610:41 - your test will exit now let's say you
610:44 - don't want to see this tech trace after
610:47 - the failure of your test
610:49 - so this is all the information which is
610:52 - given to you
610:53 - about what assertion has failed or not
610:56 - so let's say we don't want to see this
610:59 - so how to
611:00 - just skip that stack trace you can add
611:04 - hyphen hyphen
611:05 - tb
611:06 - is equal to no and this is going to
611:09 - disable
611:10 - the stack trace and then press enter
611:13 - and you can see now this text trace is
611:16 - not printed only
611:17 - the success or the failure will be
611:20 - printed but not the stack trace let me
611:23 - clear the terminal once again and this
611:26 - time i want to show one more option
611:28 - which is max fail
611:30 - so here you can just write hyphen hyphen
611:33 - max
611:34 - fail option and then
611:37 - give the number in front of it after the
611:40 - equals 2 symbol so let's say we just
611:43 - write max fail 2 here
611:45 - then it's going to wait for the maximum
611:48 - number of failure and then it will exit
611:51 - so let me just run this test so you can
611:53 - see all four tests has been executed
611:56 - because maximum failure we were
611:58 - expecting
611:59 - is two that's why all four were executed
612:03 - because there was only one failure
612:06 - let's say i just make it one so now the
612:09 - value of max fail is one and then i
612:12 - press enter
612:13 - and you will see after the first failure
612:16 - it's going to exit because we have
612:18 - provided max fail one and this is the
612:21 - number of failures which we are
612:23 - expecting after that your test will be
612:25 - exited so let me just clear the terminal
612:28 - once again
612:29 - and let me show you one more option
612:32 - so this time i want to show you the skip
612:35 - option so let's say i just remove all
612:38 - these markers from here and
612:41 - and now i want to add a mark which is
612:44 - skip so just add this decorator on top
612:47 - of your test which is at the rate test
612:50 - dot mark dot
612:52 - skip
612:53 - and then inside the parenthesis you can
612:55 - give the reason for the skip so here you
612:58 - can just write
613:00 - reason equals and whatever reason you
613:03 - want to give here so i'm going to just
613:05 - write do not run number add
613:08 - test okay so this is the reason which
613:11 - will be printed and when i will just
613:15 - execute my test once again with
613:17 - hyphen v you can see this first test is
613:21 - kept so it's not executed it's skipped
613:24 - and all the other three tests were
613:26 - executed let me just
613:28 - fix
613:29 - this second test so it's going to pass
613:32 - and once again let me just run this
613:35 - test and you can see all other tests
613:38 - were passed and the first test is
613:41 - skipped because we have added this skip
613:44 - decorator on top of the test add
613:47 - function
613:52 - also there is a skip if option available
613:56 - so here instead of skip you can just
613:59 - write skip if so this skip if is going
614:03 - to check for some condition
614:05 - so let's say i'm going to import
614:08 - the sys module here which is going to
614:11 - give me the information about the python
614:14 - version i'm running and then as a first
614:17 - argument i can first of all give some
614:19 - condition so i'm going to just write sis
614:22 - dot version info which is going to give
614:24 - me the version of python available and
614:27 - i'm going to check if this version is
614:29 - less than let's say
614:31 - 3.3 then i want to skip this test so i'm
614:35 - going to once again let me clear the
614:38 - terminal and once again run the test and
614:41 - i see some failure here which is
614:44 - here i added
614:46 - dot instead of comma so you need to
614:49 - separate this major and minor version
614:51 - using comma so this means 3.3 python
614:55 - version and once again i'm going to run
614:58 - the test and then press enter and now
615:00 - you can see all four tests were executed
615:03 - because this condition was not met
615:07 - now let's say i want to just
615:10 - give the opposite condition of that
615:12 - which means i want to skip if i have the
615:15 - python version greater than 3.3 which i
615:18 - have i have the python version
615:21 - 3.7 let's check it using
615:24 - python command so i'm going to just
615:26 - write python hyphen hyphen
615:29 - version and then press enter and you can
615:31 - see i have
615:32 - 3.7.0 version
615:34 - and let's run the test once again
615:37 - and now you can see this test is skipped
615:40 - because this condition is met now the
615:43 - next option i want to show here is
615:45 - hyphen s options so let me just make
615:47 - this condition like this so this test
615:50 - will not be skipped and the next option
615:53 - we are going to see is
615:55 - the hyphen s option so let me
615:58 - clear the terminal and let's see which
616:00 - option i'm talking about which is hyphen
616:03 - s
616:04 - and this option you can use to print any
616:08 - output which you want to print using
616:11 - let's say
616:12 - print function so let's say i want to
616:14 - add a print statement here so i'm going
616:17 - to just add print
616:19 - and then
616:20 - let's say i want to
616:22 - just
616:23 - print the addition of 7 and 3
616:26 - and for just knowing whether this print
616:30 - statement has been executed i'm going to
616:32 - add this string here so we know that
616:35 - this print statement has been executed
616:38 - so now when i execute my pi test
616:40 - without the hyphen s option first you
616:44 - will see there is no print statement
616:47 - which is executed now if i just add
616:50 - hyphen s here which will allow this
616:53 - print statement to be executed and now
616:56 - you will see
616:57 - that this print statement has been
616:59 - executed and this line is printed using
617:03 - this print statement so if you want to
617:06 - print all the print statements then use
617:09 - hyphen s option or you can also use
617:13 - the option which is hyphen hyphen
617:15 - capture is equal to no and then press
617:18 - enter which is also going to do the same
617:22 - so either you can use hyphen s or you
617:24 - can use hyphen hyphen capture is equal
617:27 - to no
617:28 - so let me clear this terminal one last
617:31 - time and the last option which i want to
617:33 - show here is
617:35 - the hyphen q option which is the quiet
617:38 - mode so let me just execute this pi test
617:41 - once again and you can see all this
617:44 - information is printed
617:46 - and when i add minus q here which is the
617:49 - quiet mode you can see
617:52 - no information is printed here about the
617:54 - test which test is passed only the
617:57 - important information is printed which
617:59 - is for test passed in this much amount
618:02 - of seconds
618:03 - if i remove the hyphen v here from here
618:07 - you will see all the other output is
618:09 - gone and only four passed in whatever
618:11 - amount of seconds
618:13 - is printed so this is the quiet mode
618:16 - which will not print unnecessary
618:18 - information it's going to just show you
618:20 - how many tests passed and how many tests
618:23 - failed so this is how you can use some
618:26 - options with pi test command in this
618:28 - video i'm going to show you how to use a
618:30 - special decorator which is parameterize
618:34 - so here i have on the left hand side a
618:38 - simple function which is add
618:40 - and on the right hand side i have
618:42 - written the test for this function and i
618:45 - have written three test function for
618:48 - the add function the first test function
618:51 - here test the add function using the
618:55 - integer values
618:56 - the second test function i have written
618:59 - for the string values and the third test
619:02 - function i have written for the float
619:05 - values which i provide to the add
619:09 - function now one thing which you will
619:11 - notice here is i'm using the same add
619:14 - function three times here
619:17 - in all these three tests and there has
619:20 - to be a better way in which we just need
619:23 - to call this add function only once
619:26 - now you can say that why we need three
619:29 - functions i can just write three assert
619:34 - into the same function and i can just
619:36 - remove these two other test functions
619:39 - this is okay but still i have to call
619:41 - this add function three times to test it
619:45 - with numbers strings and the float
619:48 - values and in those type of situations
619:51 - you can use a special decorator which is
619:54 - parameterized in which you need to call
619:58 - our same function to test it with the
620:01 - different type of values
620:03 - so here i have imported this pi test
620:07 - module and then above my test function i
620:11 - will just call pi test first of all then
620:15 - dot
620:16 - mark dot parameterize so we are testing
620:19 - this add function which takes two
620:21 - arguments
620:22 - so here in the parameterize we just need
620:25 - to give the name of these two arguments
620:29 - you can just say that these two
620:31 - arguments will be x comma y because i
620:34 - have given x comma y here so i can just
620:37 - write into the single quotes x and then
620:41 - single quotes y which will be the name
620:44 - of these two arguments so this name
620:47 - depends upon you you can say this is
620:51 - num1 and the y is
620:54 - let's say num
620:56 - 2 or you can say this is arg1 or arg2 so
621:00 - these arguments names are user defined
621:03 - names you can give any names which you
621:06 - want to pass to
621:08 - your function so the number one variable
621:12 - name will be passed as the first
621:14 - argument and the number two variable
621:16 - name will be passed as the second
621:18 - argument now once again when you look
621:20 - closely to this assert you will see the
621:24 - variable values here are first argument
621:27 - second argument and the result
621:30 - so the same three values you need to
621:32 - give here so number one number two and
621:35 - the result so i'm going to just say that
621:37 - the third argument is
621:39 - result here and then as the fourth
621:42 - argument you give the iteratable list
621:45 - so the fourth argument will be a
621:48 - iteratable list
621:50 - where you can provide the values of
621:53 - argument 1 argument 2 and the result so
621:57 - inside this list we are going to
622:00 - give this argument 1 2 and the result
622:03 - values using a tuple so here in the
622:07 - first test i have given seven and three
622:09 - and the result is ten
622:11 - we can give the same values here so
622:13 - seven comma three
622:16 - and the result we are expecting is ten
622:19 - so the 7 will be passed to the number 1
622:23 - argument
622:24 - 3 will be passed to the number 2
622:26 - argument and 10 will be passed to the
622:29 - result in a same way we can define
622:31 - multiple tuple values here so the second
622:34 - test is for
622:36 - the string value so the first argument
622:39 - is hello
622:40 - second argument is world
622:42 - and the expected value is
622:45 - this one which is result and the third
622:49 - test case or test scenario is 10.5 for
622:54 - the floating values comma
622:56 - 25.5 and the expected value is 36. now
623:01 - once you have defined this parameterized
623:04 - decorator you don't need to call this
623:07 - add function multiple times
623:09 - what you need is you just need to define
623:12 - the same
623:13 - variable names which you have defined
623:16 - here in the parameterize so the first
623:19 - argument will be num1
623:21 - the second argument will be num2
623:24 - and the third argument will be
623:27 - the result
623:28 - and then you just need to pass these
623:31 - values to the add function so the first
623:34 - number is the first argument the num2 is
623:37 - the second argument and the result is
623:40 - the third argument now what's going to
623:43 - happen when you run the test is
623:46 - this
623:46 - list which you have given here will be
623:49 - iterated over by your parameterized
623:52 - function
623:53 - and these values one by one will be
623:56 - assigned to number one number two and
623:59 - the result and the same value will be
624:02 - passed here as the first argument and
624:05 - the second argument and as the result
624:09 - for this assert statement and one last
624:12 - thing which i'm doing wrong here is i
624:15 - think
624:16 - you need to give these
624:18 - arguments name as the string separated
624:22 - by commas
624:23 - so you just need to give this string
624:25 - separated by these commas so the first
624:28 - argument of this parameterize a string
624:31 - in which you define
624:32 - the arguments which are taken by your
624:35 - function to test so num1 and num2 and
624:38 - the result and
624:40 - these arguments are separated by commas
624:44 - and all these values are inside the
624:47 - string so this thing you need to keep in
624:49 - mind that this is a one argument string
624:53 - and inside the string you define those
624:56 - values separated by comma so let's run
624:58 - the code and let's see what happens
625:00 - so you can see now that three tests were
625:04 - run
625:05 - and this first test
625:07 - was with the value 7 and 3
625:10 - and the expected result was 10
625:13 - and it passed
625:15 - second you will also see which arguments
625:17 - were passed so in the second test hello
625:20 - and world were passed and the expected
625:23 - result was hello world and in the third
625:25 - test case 10.5 and 25.5
625:29 - was passed as the arguments and the
625:32 - expected result was 36. so by using this
625:36 - parameterized decorator you can just use
625:40 - or call your function which you want to
625:42 - test once and then pass
625:44 - different type of parameters into it
625:48 - using this parameterized decorator so
625:51 - that
625:52 - hey guys welcome to the next video on
625:53 - python unit testing tutorial for
625:55 - beginners using pi test
625:57 - in this video i'm going to show you how
625:59 - to use fixtures with pi test
626:02 - so let's get started so to start with on
626:05 - the left hand side i have this student
626:08 - db class now as you can see here in the
626:10 - init method i'm just initializing a
626:13 - member variable which is data is equal
626:16 - to none
626:17 - and then it has two methods one is
626:20 - connect method and other is get data
626:23 - method now this connect method takes one
626:26 - argument which is data file
626:28 - now if you can see on the right hand
626:31 - side i have written two tests
626:33 - for this student db
626:36 - and i have first of all
626:38 - imported this class and then i have
626:42 - initialized this class student db
626:44 - and then i'm calling the connect method
626:47 - here now in the connect method argument
626:50 - i'm giving this
626:52 - data.json
626:54 - as an argument so let me show you what
626:57 - this data.json contains
627:00 - so this data.json contains the data of
627:03 - the student so it has this element
627:06 - called students
627:08 - which contains this array which contains
627:12 - different data about different students
627:15 - so right now i have
627:17 - two
627:18 - student data here one is id one scot
627:22 - pass
627:22 - and other is id two mark and fail
627:26 - so using this connect method i'm just
627:29 - opening this data.json file
627:32 - and then i'm just loading this json file
627:37 - as the
627:38 - dictionary so as you can see here i'm
627:40 - using the json module which i have
627:42 - imported at the top and whenever i call
627:45 - json.load it's going to convert this
627:48 - json.file
627:50 - into the dictionary and then i have this
627:53 - method called getdata which takes one
627:55 - argument which is the name of the
627:57 - student
627:58 - now this name i'm going to search in the
628:02 - dictionary which i got using the connect
628:05 - method and if this name which is
628:07 - provided as an argument is contained in
628:11 - the students data then i'm going to just
628:14 - return this student dictionary so once
628:18 - again as you can see here i'm just
628:20 - importing
628:21 - the student dot db class and then i'm
628:24 - just initializing the student db and
628:26 - then i'm just calling the method called
628:29 - connect and in the connect method i'm
628:31 - giving the
628:32 - data.json
628:34 - as an argument which is this file which
628:36 - contains the student data
628:38 - and in the next step i'm just calling
628:40 - the get data method from the studentdb
628:44 - class and i'm giving the name of the
628:47 - students here so you can see the name of
628:50 - the student is caught that's why i'm
628:53 - giving scott here and in the next test
628:55 - i'm giving the mark name which is the
628:57 - second name here and then using these
629:00 - assert statement i'm just checking
629:03 - whether this id which i got using the
629:06 - scot data
629:08 - is equal to
629:09 - the id which is there in the json file
629:13 - or not same assert i have written for
629:15 - the student's name and the student's
629:18 - result
629:19 - and similar
629:20 - test i have written
629:22 - for the second
629:23 - name or second student which is mark now
629:27 - as you have already seen to make things
629:30 - simpler i have just used this json file
629:34 - as the database file but in real life
629:38 - situations you might be having some
629:40 - other databases like mysql or postgresql
629:43 - or mongodb or any other database and you
629:46 - might want to test your database so the
629:48 - same approach you can use whenever you
629:52 - are trying to use the real database so
629:55 - let's first of all run these tests and
629:58 - let's see what's the result here so i'm
630:00 - going to just run these tests and you
630:02 - can see both tests passed here
630:05 - now let's talk about the problems with
630:08 - these two test cases
630:10 - now you might have already guessed that
630:13 - we are repeating ourselves so we are
630:16 - initializing this database twice for the
630:18 - two tests but let's say we have
630:22 - thousands and thousands of tests
630:24 - then you have to initialize this
630:26 - database thousand times so the first
630:29 - problem is the code repetition the
630:32 - second problem is whenever you want to
630:35 - initialize your database for example
630:37 - thousand time
630:38 - these initializations are resource
630:40 - intensive so they will be costlier to
630:44 - your system on which you are running
630:46 - these test cases because they are
630:49 - consuming your resources so what can be
630:52 - the solution here so you can use two
630:55 - type of solutions in these type of cases
630:59 - the first approach is by using the setup
631:02 - and tear down methods now the setup and
631:05 - teardown method
631:06 - falls into the category of classic x
631:10 - unit style setup if you are familiar
631:13 - with other testing frameworks like unit
631:16 - test or nose
631:18 - these methods might be familiar to you
631:21 - so first of all we will see how to solve
631:24 - this problem using the setup and tear
631:27 - down methods and then we will see how to
631:30 - solve this problem using pi test
631:32 - fixtures
631:34 - so we already know the problem so to
631:36 - solve this
631:37 - there is a method called
631:40 - a setup and the teardown module method
631:43 - so i'm going to just write
631:46 - setup underscore
631:48 - module and this takes one argument which
631:51 - is module
631:53 - and then here inside this method you can
631:57 - initialize your resources
631:59 - so let me define a global db variable
632:04 - and i'm going to initialize it with none
632:07 - and then i'm going to just
632:10 - use
632:11 - this initialization inside this setup
632:13 - module so whenever you write the setup
632:16 - module as it is then pi test is going to
632:19 - understand that this is a setup
632:22 - method and it's going to execute this
632:25 - code before executing your tests so what
632:28 - i have done is i have defined the global
632:31 - db variable that means i need to
632:35 - indicate inside the setup method that
632:38 - this is the global variable
632:40 - and that means now inside this db
632:44 - we have our database instance so we
632:47 - don't need this initialization in these
632:49 - two test cases now and now we can use
632:52 - this db instance to call the get data
632:56 - method to get the data about particular
632:59 - student so this is the setup module
633:02 - method there is also a tear down method
633:04 - which we can define here so just write
633:07 - def teardown underscore module and then
633:10 - inside the parenthesis you give the
633:14 - module as an argument and inside this
633:17 - tear down module you can close your
633:20 - connections or free your resources
633:22 - whatever you want to do after your test
633:25 - you can
633:26 - do in the tear down module so i don't
633:29 - have any close method inside this
633:32 - database class so let me create some
633:36 - dummy close method here so i'm going to
633:39 - just say
633:40 - def
633:42 - close
633:43 - and then i'm going to just use pass here
633:46 - so it's just a blank method and let me
633:50 - just provide the parentheses here so
633:52 - let's say we want to use this close
633:53 - method to free our resources or close
633:56 - the connection with the database you can
633:58 - do this by just calling this method so
634:01 - db dot close
634:03 - and this is going to free your resources
634:06 - and let's just uh print something here
634:09 - so we know that these two methods are
634:12 - called so here i'm going to just say
634:16 - that this is a
634:18 - setup method
634:20 - and then inside the teardown module
634:23 - method we are going to just replace this
634:26 - setup by teardown so we know that when
634:29 - this setup method is called and when
634:32 - this teardown method is called so once
634:35 - again this setup module and teardown
634:38 - module will be recognized automatically
634:41 - by your pi test and then this code will
634:44 - be called at the starting of your pi
634:47 - test and this code will be called at the
634:50 - end after all your tests have been
634:52 - passed or failed then this teardown
634:55 - module test will be called so let's run
634:58 - the test once again
635:00 - and you will be able to see that
635:03 - this setup method is called first and
635:06 - after the execution of the tests this
635:09 - teardown method is called and we can
635:12 - recognize it by using this print
635:14 - statement now if you haven't already
635:16 - recognized i have used this minus s or
635:20 - hyphen s option to allow the print
635:22 - method to execute this print statements
635:25 - so if you want to allow your print
635:28 - statements to be printed on the console
635:31 - you need to use this hyphen s flag to be
635:35 - more clear i'm going to just remove the
635:37 - hyphen b from here so it will be more
635:40 - clear so you can see its setup is called
635:42 - first and then you will see two dots
635:45 - here which means two tests has been
635:48 - executed and at the end this tear down
635:51 - method has been called to free any of
635:53 - the resources which you might want to
635:56 - free or close the connection with the
635:58 - database so this is called the setup and
636:00 - teardown method now let's talk about the
636:04 - python fixtures
636:06 - so instead of using the setup and
636:08 - teardown methods pi test allows us to
636:11 - write the python fixtures which will
636:14 - automatically be called at the starting
636:17 - and the end of your test so instead of
636:21 - writing all this code what i can do here
636:24 - is i have first of all imported this pi
636:27 - test and then
636:28 - i'm going to define a method
636:31 - which i will call db because as you can
636:34 - see here all these tests are just using
636:37 - the db instance so we want to somehow
636:41 - pass this db instance to our tests and
636:44 - then i'm going to provide these
636:45 - parentheses and inside this method i
636:47 - want to do the same so i will just call
636:50 - this setup code here
636:52 - and let me just remove
636:55 - all this code from here and at the end
636:58 - what i want to do here is i want to just
637:00 - return this db instance which i got from
637:04 - the student tb class i don't need this
637:07 - global declaration here because there is
637:10 - no global variable and for now let's
637:12 - just comment this code so to declare a
637:15 - fixture you just need to add this
637:18 - decorator at the top of your method
637:22 - which is pi test dot fixture and now
637:24 - what i want to do here is i want to pass
637:27 - this db instance as an argument of both
637:31 - these test cases so now what will happen
637:33 - is pi test will recognize that this is
637:36 - your fixture
637:38 - and then whatever
637:39 - you return from your fixture will be
637:42 - passed using this argument to your test
637:46 - cases so let's run our test and let's
637:49 - see what will happen when we run those
637:52 - tests so you can see both these tests
637:56 - has been passed but you will also
637:58 - observe one more thing
638:00 - and this is that this setup is called
638:03 - twice which is a problem as we have
638:05 - discussed we don't want to call this
638:07 - setup twice we just want to call the
638:10 - setup at the beginning of our tests so
638:14 - how to solve this problem so to solve
638:16 - this problem we can tell pi test that
638:18 - this is a module
638:20 - wide fixture so we just want to call
638:23 - this fixture once at the starting
638:26 - so to do this we just need to write
638:29 - scope
638:30 - is equal to and then just write
638:33 - module here and then we are going to
638:35 - just run our test once again
638:38 - let's see what happens so now you can
638:40 - see the setup is called only once and
638:44 - that's what we wanted right we just
638:47 - wanted to call this setup at the
638:49 - beginning of our test and not at the
638:52 - beginning of each of the test now let's
638:55 - see how we can add the tear down
638:57 - functionality so i'm going to just
639:00 - use this code after this return
639:03 - and then i'm going to uncomment this
639:06 - code
639:07 - and then let's remove this commented
639:10 - code and to call this teardown code
639:13 - which is written here at the end of your
639:16 - test what you can do here is you can
639:18 - replace this return
639:20 - by yield so when your test will start
639:23 - it's going to execute the code until
639:26 - yield
639:27 - and at the end of your test this code
639:30 - will be executed so let's see what will
639:33 - happen when we run the code once again
639:35 - so
639:36 - let's
639:37 - just call the pi test once again and you
639:40 - can see
639:41 - setup has been called and at the end of
639:44 - your tests tear down has been called
639:48 - so let me just clear the terminal and
639:50 - let's run
639:51 - this pi test command once again without
639:54 - hyphen v verbose so we will be more
639:57 - clear and you can see first of all setup
640:00 - has been called and then your test has
640:02 - been executed which are indicated by
640:05 - these two dots and after your tests this
640:08 - tear down code has been executed so this
640:11 - is how you can use fixtures and setup
640:14 - and tear down methods with your pi test
640:18 - test cases
640:20 - hey guys welcome to the next video on
640:21 - python unit testing tutorial for
640:23 - beginners using pi test
640:25 - now in this video i'm going to show you
640:28 - how you can run your tests which you
640:31 - have written using pi test inside your
640:34 - pi charm ide
640:36 - so till now we have been running our
640:39 - tests which we have written using pi
640:42 - test on the command prompt or the
640:44 - terminal but using pycharm ide also we
640:48 - can run these tests
640:50 - inside the pycharm ide
640:53 - so let's see how we can run those tests
640:56 - which we have written using pi test
640:59 - using the pycharm ide
641:02 - so as you can see here on the left hand
641:04 - side i have a class
641:06 - and on the right hand side i have
641:09 - written some tests
641:10 - which are related to this class now i
641:14 - want to run these tests which i have
641:17 - written here
641:18 - using the pi test inside the pycharm ide
641:23 - so for doing this what i need to do is
641:25 - first of all i need to install pi test
641:29 - package inside the pi charm ide so you
641:33 - can see here when i try to import pi
641:36 - test inside the pycharm ide first of all
641:39 - it will give me this red squiggly line
641:42 - which means that pycharm is not
641:44 - recognizing this pie test package
641:48 - till now so let's first of all install
641:51 - this package so just click on file and
641:54 - then click on settings
641:56 - and then go to the section which says
641:59 - project and then your project name so
642:02 - project colon project name so i'm going
642:04 - to click on this and then go to the
642:07 - project interpreter now as you can see
642:10 - here there are some packages which are
642:12 - already here and we want to install a
642:15 - new package which is pi test so i'm
642:18 - going to click on this install or this
642:21 - plus icon here and then i will just
642:24 - search for
642:25 - pi test
642:26 - and the first option you will see here
642:28 - is pi test and you can see this will be
642:31 - the version which will be installed on
642:34 - our pycharm ide so what i'm going to do
642:37 - is i'm going to just click on this
642:39 - button let me just move it little bit
642:42 - above so you can see this button so i'm
642:44 - going to click on this install package
642:46 - button which is going to install pi test
642:49 - package inside my pycharm ide and once
642:53 - this pi test package is installed you
642:55 - will see this message which says package
642:57 - pi test installed successfully with
643:00 - the green highlighted text
643:03 - that means pi test is installed so you
643:05 - can close this window so i'm going to
643:07 - close this window and you will be able
643:09 - to see the spy test now is added to your
643:14 - project interpreter so now when i click
643:17 - on ok
643:19 - and i will wait for some time till this
643:22 - process is
643:23 - has been finished and then after some
643:25 - time you will see this red squiggly line
643:28 - under this pie test is gone so now our
643:32 - pycharm ide recognizes this pie test
643:35 - package and now we want to tell the
643:37 - pycharm ide that we want to run the pi
643:40 - tests
643:41 - so for doing that once again i will
643:44 - click on file and then go to the
643:46 - settings and then this time i will go to
643:49 - the tools so just click on tools option
643:53 - and when you scroll down you will be
643:55 - able to see this option which says
643:58 - python integrated tools so just click on
644:01 - this and on the right hand side you will
644:04 - be able to see under testing
644:06 - that default test runner by default is
644:08 - unit tests so we need to change this to
644:12 - pi test okay so just change this default
644:16 - test runner to pi test and then apply
644:20 - and then click ok
644:21 - which is going to tell
644:23 - pycharm ide that we want to run the pi
644:26 - tests now as soon as you are finished
644:29 - with the setting of pi test on your
644:32 - pycharm ide what you can do now is you
644:35 - can right click on the file
644:38 - where you want to run pi test so this is
644:41 - my test underscore math underscore func
644:44 - dot py file where all my tests are there
644:49 - so just right click on this file and
644:51 - then you will be able to see this option
644:53 - which says run pi test in the file you
644:56 - want to run the pi test so just click on
644:59 - this option which says run pi test in
645:01 - the file
645:02 - and as soon as you do this you will be
645:05 - able to see this window which is for the
645:08 - pi test and you will be able to see all
645:11 - the tests which have been passed on the
645:15 - left hand side and the terminal output
645:18 - on the right hand side so let me just
645:21 - maximize this window here and on the
645:24 - right hand side you will be able to see
645:27 - the output so we have run the test on
645:30 - this file and because i have some output
645:34 - which is a print output as you can see
645:36 - here
645:37 - print statement here which is
645:39 - responsible for printing this line
645:42 - and also i have this print statement for
645:44 - teardown so this
645:47 - teardown is printed using this print
645:50 - statement
645:51 - also you will be able to see two dots
645:52 - here which means we have two tests
645:55 - inside this file which ran successfully
645:59 - so let's add this verbose flag
646:02 - inside our pi test using pycharm ide so
646:07 - once you ran your pi test using pycharm
646:10 - ide you will be able to see this drop
646:13 - down menu here which says pi test in
646:17 - whatever file you are running your pi
646:19 - test on
646:20 - and just click on this file you will be
646:23 - able to see this added configuration
646:25 - option right away after
646:28 - first run of your test
646:31 - so just click on this option which says
646:33 - added configuration and then you can add
646:37 - the arguments which are additional
646:39 - arguments like verbose or hyphen s or
646:43 - whatever option you want to provide here
646:45 - using this additional arguments option
646:48 - so let's say i want to provide this
646:51 - hyphen v option which is for verbose and
646:54 - then i will say apply and then i will
646:56 - say ok
646:58 - and then i'm going to run the test once
647:00 - again either clicking on this button or
647:04 - right away from this button so let me
647:06 - click on this button
647:08 - and once you ran your test you will be
647:11 - able to see the verbose output on the
647:14 - right hand side let me just remove these
647:17 - print statements because they are just
647:20 - not looking good on the tests so i'm
647:23 - going to just remove the setup and tear
647:26 - down
647:27 - print statements from here and i'm going
647:29 - to run the tests once again and then you
647:32 - will be able to see the correct verbose
647:35 - output here now if you want to see all
647:38 - these tests which are passed or failed
647:40 - on the left hand side using these green
647:43 - or red
647:44 - circles then you can click on this green
647:47 - circle at the top here so once click on
647:50 - this green circle and you will be able
647:52 - to see the list of all tests which are
647:55 - there inside your file so this is the
647:59 - script name which is test underscore
648:01 - math underscore func and these are the
648:04 - two tests which are there inside this
648:07 - test script so you can see the first
648:10 - test is test code data which is this one
648:13 - and the second test is test mark data
648:16 - which is the second test here
648:18 - you can also run these tests
648:20 - individually so you can right click and
648:22 - then you can just say run test which is
648:25 - going to run only one test which you
648:28 - want to run so once you run this only
648:31 - one test you will be able to see on the
648:33 - top that only this test has been running
648:38 - so in order to run the whole
648:40 - python script for the test you can once
648:43 - again select this option which is pi
648:46 - test in whatever test script you have
648:49 - so just choose that and then run it once
648:52 - again it will run your all the tests
648:54 - once again and you will be able to see
648:57 - all the tests here
648:58 - so in order to run individual tests you
649:01 - can just right click and then run those
649:03 - tests but remember that you need to
649:06 - change this option again from here also
649:09 - if you want to run the test by just
649:11 - hovering over the test so this is the
649:13 - test let's say i want to run only this
649:15 - test so you can just hover over this
649:18 - test and then right click and then just
649:21 - click on this option run pi test for
649:25 - this test which is going to run only
649:27 - that test so once again i'm going to
649:29 - select this option for the whole file
649:32 - which is going to run all the tests once
649:34 - again
649:35 - for the pi test using pycharm ide so
649:39 - this is how you can run your tests which
649:41 - you have written using pi test
649:43 - using pycharm ide
649:46 - i hope you have enjoyed this video and i
649:48 - will see you in the next video
650:01 - hey guys welcome to the python thread
650:04 - tutorial for beginners so first of all
650:06 - what is a thread
650:08 - so a thread is an individual and
650:10 - separate unit of execution that is the
650:13 - part of a process
650:15 - now what is a process
650:17 - a process is simply a running program
650:22 - so for example if you run a browser it's
650:24 - a process if you run a video game it's a
650:27 - process
650:29 - now inside this process
650:31 - multiple threads can work together to
650:35 - accomplish a common goal and threads
650:38 - allows the program to run in parallel
650:41 - that is the single most important
650:44 - benefit of using threads so let me give
650:48 - you an example
650:50 - so when you play a video game it has to
650:53 - handle few tasks for example it has to
650:56 - handle the graphics and the user
650:58 - interface and if you are playing the
651:00 - multiplayer game it has to handle the
651:04 - networking and all those things it has
651:07 - to handle in parallel because it has to
651:11 - remain responsive at all the times so
651:15 - how does this video game handles those
651:18 - parallel tasks
651:20 - the simple answer is
651:22 - threads it can assign one thread for
651:24 - graphics one thread for user interface
651:27 - and other thread for networking so by
651:31 - using threads the video game can always
651:34 - remain responsive and it can run the
651:38 - task in a parallel way
651:41 - now let me explain threads using this
651:43 - diagram
651:45 - so you can see
651:46 - this whole blue box here is a process
651:51 - and the threads exist inside this
651:55 - process so in this process you can see
651:58 - three threads
652:00 - now inside those threads you can see
652:03 - there is a code and local variable
652:08 - so a thread is a light weight process
652:12 - that exists
652:13 - inside the process
652:16 - also a thread is a sequence of control
652:19 - flow the difference between the thread
652:22 - and the process is that the tread exists
652:27 - entirely inside the process and share
652:30 - its resources so let's say inside this
652:33 - gray box we have the global variables
652:36 - the each tread will be able to share
652:40 - those global variables and in addition
652:43 - each thread can have its own
652:47 - local variables and its own control flow
652:51 - to work with those local and global
652:54 - variables now a single process may have
652:58 - multiple threads of execution and as i
653:01 - already said that threads are useful
653:04 - when an application wants to perform
653:07 - many concurrent tasks
653:09 - on a shared data
653:12 - now let me give you one more example so
653:14 - think about a browser
653:17 - it has to handle
653:19 - the landing pages or the animations or
653:22 - if you want to open multiple website on
653:25 - different tabs and you want to
653:28 - run
653:29 - video in one tab and
653:31 - if you want to do another task in other
653:34 - tab most of the time the browser always
653:38 - remains responsive and the browser can
653:41 - handle multiple tasks at the same time
653:44 - so it uses threads to always remain
653:48 - responsive now there are two different
653:50 - kinds of threads
653:52 - one is a kernel thread and other is a
653:56 - user space thread or a user thread
654:00 - now kernel threads are the part of
654:03 - operating system
654:04 - while user space threads are not
654:08 - implemented in kernel
654:10 - the user space threads can be seen as an
654:13 - extension of function
654:15 - concepts in programming languages now
654:18 - each process have at least
654:21 - one
654:22 - thread and that is the main thread so if
654:25 - you don't even create a thread inside a
654:29 - process it has at least one thread and
654:32 - that is process itself now let's talk
654:35 - about the advantages of using threading
654:39 - so the first advantage is multi-threaded
654:41 - programs can run faster on computer
654:44 - systems with multiple cpus because these
654:47 - threads can be truly concurrent on
654:50 - multiple cpu computer systems the second
654:54 - advantage is the program can remain
654:57 - responsive to input at all the times
655:00 - this is true both for single and
655:03 - multiple cpu computer systems
655:07 - now the third advantage is threading
655:10 - allows to do something else
655:13 - while a thread is waiting for a i o task
655:17 - or any other task to complete so it
655:21 - always remains responsive the next
655:24 - advantage is some programs are easy to
655:27 - express using concurrency which leads to
655:31 - elegant solution and as a result they
655:34 - are easier to maintain and debug so some
655:37 - programs or some processes are
655:40 - inherently concurrent in nature and the
655:43 - next advantage is threads of process can
655:47 - share the memory of global variable so
655:50 - as i have already shown you in the
655:52 - diagram previously that multiple threads
655:55 - can share the memory of the global
655:57 - variables at the same time
656:00 - so if a global variable is changed in
656:03 - one thread this change is valid for all
656:06 - the threads
656:08 - a thread can have local variables also
656:11 - as we have seen in the diagram now let's
656:15 - talk about some of the issues or
656:17 - challenges you will face while
656:19 - programming threads
656:21 - for a program the first challenge is the
656:24 - scheduling so to execute a threaded
656:28 - program it must rapidly switch between
656:31 - threads so a program should be able to
656:34 - switch between threads efficiently and
656:37 - conveniently
656:38 - the second issue or challenge is the
656:42 - resource sharing so as i told you that
656:45 - multiple threads can share the same
656:49 - memory of the global variables
656:52 - so since threads share this memory and
656:56 - other resources it must be careful
656:59 - because operation performed in one
657:01 - thread could cause problem in another
657:04 - thread the next challenge you could face
657:07 - is of synchronizing of the threads
657:11 - so threads often need to coordinate
657:13 - their actions
657:15 - and as a software developer you may have
657:18 - heard about race condition of threads
657:22 - which means the outcome depends on the
657:24 - order of thread execution and often for
657:27 - synchronization
657:29 - we use
657:30 - locking primitives
657:32 - now that was the general description
657:34 - about threads now let's talk about the
657:37 - threads in python so in python a thread
657:41 - is an object like any other object that
657:44 - can hold data this object can also be
657:47 - used to run with methods the object also
657:51 - can be stored in the data structures and
657:54 - this object can also be passed as a
657:57 - parameters
657:58 - to the methods
658:00 - also in python a thread can also be
658:03 - executed as a process and during the
658:06 - lifetime of a thread it can have various
658:08 - states now in python there are two
658:11 - modules which supports the usage of
658:14 - threads and these two modules are thread
658:16 - module and threading module
658:19 - now there is one thing to note here is
658:22 - that the tread module has been
658:25 - considered as deprecated for quite a
658:28 - long time so often users are encouraged
658:32 - to use the threading module instead of
658:34 - the thread module so if you will see in
658:37 - python 3 the thread module is directly
658:40 - not available but indirectly you can use
658:44 - underscore thread to use the tread
658:47 - module and this is to remain backward
658:49 - compatible with the previous versions of
658:52 - the python now the difference between
658:55 - the thread module and the threading
658:56 - module is that the thread module tweets
659:00 - the tread as the function while the
659:03 - module threading is implemented in an
659:05 - object oriented way so in the next
659:08 - videos i will show you how to use these
659:10 - two modules in python to create threads
659:14 - and handle threads in python in the last
659:17 - video i have given you a brief
659:19 - introduction about threads and threads
659:22 - in python
659:23 - in this video we will discuss about a
659:26 - module called thread module
659:29 - now if you remember in the last video i
659:32 - have told you that thread module is
659:35 - considered as
659:37 - deprecated in python 3 but if we want to
659:40 - use thread module in python 3 we can
659:43 - still use thread module using
659:46 - a module called underscore thread and
659:50 - this is for backward compatibility
659:54 - so i just want to give you a brief demo
659:57 - about thread module in python 3 so you
660:00 - will have some idea about thread module
660:04 - in python 3.
660:05 - so let's get started so first of all in
660:08 - order
660:09 - to use thread module you need to import
660:12 - it and then generally you will write
660:15 - thread but in order to use the thread
660:18 - module in python 3 you need to use the
660:22 - underscore thread here okay so thread
660:25 - module is not directly available but
660:28 - it's available using this underscore
660:30 - thread module and for printing and
660:34 - giving some delay to our functions we
660:38 - are going to import a module called time
660:41 - now using thread module it's possible to
660:44 - use functions in separate threads
660:47 - so we are going to create a function and
660:50 - then we are going to execute this
660:53 - function in separate threads so let's
660:56 - define our functions and i'm going to
660:58 - name my function as print
661:00 - underscore
661:02 - epoch
661:03 - and if you don't know what is epoch
661:06 - epoch is the start of january 1st
661:11 - 1970 and we are going to try to print
661:14 - the number of seconds
661:16 - from epoch till now and inside this
661:19 - function we are going to provide two
661:22 - arguments first is
661:24 - the name of your thread so i'm going to
661:28 - just write name
661:30 - of thread and the second argument we are
661:34 - going to give is the delay okay so this
661:38 - is your custom function you can provide
661:42 - any name here and any number of
661:45 - arguments here and now inside this
661:47 - function first of all i'm going to
661:49 - create a counter so i'm going to just
661:52 - write
661:53 - count and i'm going to initialize this
661:55 - count with 0.
661:58 - now inside this function what i'm going
662:00 - to do is i'm going to loop around and
662:03 - inside the loop i'm going to provide
662:06 - some delay so we will be able to see the
662:09 - thread execution so let me just provide
662:12 - the while loop here and we are going to
662:15 - just check whether this count is less
662:18 - than three and inside this while loop we
662:20 - are going to sleep for some time using
662:23 - that time module so i'm going to just
662:26 - write time dot
662:29 - sleep and we are going to just pass this
662:31 - delay argument inside this sleep
662:34 - function so i'm going to just write
662:36 - delay here which will be the delay in
662:39 - seconds so for example if i provide the
662:42 - delay of one
662:43 - then our while loop will sleep for one
662:46 - second
662:47 - now after this we are going to increment
662:50 - our counter so i'm going to just write
662:52 - count and then plus
662:55 - equals one which is going to increment
662:57 - the value of counter by one
663:00 - now after this in order to see
663:02 - whether our thread is working or not we
663:05 - are going to print something so let's
663:08 - print something using the print function
663:11 - so what we want to print so let's say we
663:13 - want to print the name of the thread
663:16 - whatever name we will provide for the
663:18 - thread and then i'm going to just give
663:23 - some indicator here let's say this is
663:25 - some line
663:27 - and then we are going to print the time
663:29 - since epoch so in order to print time
663:32 - since epoch we will use this time module
663:36 - and then we just need to use the time
663:39 - function inside the time module so using
663:42 - this print function we will know which
663:44 - thread is executed and at what time it's
663:49 - executed so now we have our function and
663:52 - now this function we want to execute
663:55 - inside the thread so in order to execute
663:58 - this function inside the thread first of
664:00 - all i'm going to use this thread module
664:02 - and there is a special function inside
664:05 - this thread module which is called a
664:07 - start new thread function so i'm going
664:10 - to use that function so let's
664:13 - just call this function which is start
664:15 - underscore new underscore thread
664:18 - now if you hover over this function and
664:21 - when i press control on windows or
664:23 - command on mac and then i hover over
664:27 - this function you will be able to see
664:30 - the signature for this function so this
664:32 - function takes three arguments first
664:35 - argument is the function which we want
664:37 - to execute inside the thread second
664:40 - argument is args which we provide to our
664:44 - function as tuples so second argument we
664:47 - need to provide as tuple and inside this
664:50 - tuple we will provide the number of
664:53 - argument which we want to provide to our
664:55 - function and third argument is the kw
664:58 - args option and this kw arg is an
665:01 - optional dictionary for the keyword
665:04 - arguments
665:06 - so let's provide the function name first
665:08 - of all and our function name which we
665:10 - want to execute is print underscore
665:13 - epoch and you need to remember that you
665:16 - need to provide this function name
665:18 - without any parentheses okay so just
665:21 - provide the function name as the first
665:24 - argument
665:25 - second is
665:26 - the number of arguments so we have
665:29 - provided two arguments for this print
665:32 - epoch function so we need to give these
665:34 - two argument in the form of tuple so
665:37 - first argument let's say is the name of
665:40 - the thread so we are going to just say
665:43 - that this is the thread
665:45 - one which will be the name of this
665:47 - thread and the second argument is the
665:50 - delay in seconds so let's say i want to
665:53 - provide one second delay in the while
665:57 - loop so it will sleep for one second
666:00 - this delay we are providing in order to
666:02 - see the thread execution because thread
666:05 - execution is so fast that it will be
666:08 - difficult to see the execution of
666:10 - threads without this delay now i told
666:13 - you that the third argument is the
666:15 - optional argument so we will not provide
666:18 - the third argument to this start new
666:20 - thread so this statement is going to
666:22 - create a new thread and it's going to
666:25 - execute this function inside this new
666:28 - thread so till now we only have one
666:31 - thread so let's create the second thread
666:33 - and to create the second thread you need
666:35 - to repeat
666:36 - this function which is start new thread
666:39 - and then you need to give the name to
666:41 - your thread so i'm going to give the
666:43 - name thread 2 and let's just change the
666:46 - delay so here i'm going to provide the
666:48 - delay of 3 second to the thread 2 so now
666:52 - we have created two threads and this
666:55 - function will be executed in both the
666:59 - threads so let's see if this code works
667:02 - or not so i'm going to just run this
667:04 - script and you will see as soon as i run
667:07 - the script
667:08 - it exits without printing anything and
667:11 - this is because thread takes some time
667:14 - to be created and we need to wait for
667:17 - the thread creation so we need to
667:20 - provide some mechanism to wait for the
667:23 - thread creation and this weight we can
667:26 - provide in two ways one is we can just
667:29 - provide the blank input function which
667:32 - waits for the input so using this input
667:35 - function we will wait for some time
667:37 - until these threads are created and now
667:41 - we will see if this works or not so
667:43 - let's run this script once again and
667:45 - let's see what happens
667:47 - so you can see now you will be able to
667:49 - see
667:50 - these print statements and you will see
667:53 - that first of all thread one is executed
667:56 - and then thread one is executed once
667:59 - again because we have provided only one
668:02 - second delay between the loop inside
668:06 - this thread so thread one will be
668:08 - executed faster than thread two so first
668:12 - of all thread one is executed and the
668:14 - epoch time is printed and once again
668:17 - this thread one is executed because the
668:19 - delay time is less and then thread two
668:22 - is executed and the epoch time is
668:24 - printed here and then thread one is
668:27 - executed once again and at the end you
668:30 - will see that thread two is executed two
668:32 - times because you can see that here we
668:35 - have the counter limit which is less
668:38 - than three so let's try to increase this
668:40 - limit to five and let's see how many
668:43 - times this print statement is printed so
668:47 - let's run the program once again and
668:49 - let's see what happens so once again
668:52 - this thread one is executed two times
668:55 - and then thread two
668:56 - and then thread one is executed three
668:59 - times once again and then thread two
669:01 - comes and you can see rest of the
669:03 - threads are executed then so here you
669:06 - can see thread one is executed one two
669:09 - three four five times and thread two is
669:12 - executed also five times so in this way
669:15 - you can start multiple threads and
669:18 - execute different functions inside those
669:21 - threads
669:22 - now i told you there is another way of
669:25 - waiting and this is by providing
669:28 - the while loop so i'm going to just
669:31 - provide while one
669:33 - and inside this while loop i'm going to
669:36 - wait forever so i'm going to just say
669:39 - pass and this is an infinite loop which
669:43 - is like waiting so i'm going to just
669:47 - close this script first of all and then
669:50 - run the script once again
669:52 - and then you will see the same effect
669:54 - which you have seen in the case of input
669:57 - function also now here one more thing to
670:00 - consider is
670:02 - the return of this function so if this
670:05 - function which you want to execute
670:07 - inside the thread returns successfully
670:10 - the thread will silently exit but when
670:13 - your function terminate unexpectedly
670:16 - then
670:17 - unhandle exception will be thrown and
670:20 - the strike trace of that exception will
670:23 - be printed on the terminal so if this
670:26 - function throws then stack trace will be
670:29 - printed and this will be an unhandled
670:32 - exception so in order to avoid this
670:35 - unhandled exception you can also provide
670:38 - the try catch
670:40 - block here so here you can provide try
670:42 - and then i'm going to provide some space
670:45 - here and here also and after this code
670:48 - i'm going to just write
670:50 - accept and inside the accept you can
670:54 - provide any error so you can print that
670:57 - this is an error so inside this print
671:00 - function you can just write that this
671:03 - is
671:03 - an
671:04 - error or anything which you want to
671:06 - write inside this accept block you can
671:09 - write using the print function or
671:11 - whatever you want to do
671:13 - in order to handle this exception you
671:15 - can do inside the accept block so let's
671:18 - run this script once again and let's
671:20 - change the delay here so i'm going to
671:22 - provide the delay of two seconds and
671:25 - here i'm going to provide the delay of
671:28 - let's say four seconds and let's run the
671:30 - script once again
671:32 - and this script runs and you can see
671:34 - after two seconds
671:36 - the thread one print statement is
671:38 - executed and then after four second
671:41 - thread two
671:42 - print statement is executed and this
671:45 - thread execution you will be able to see
671:48 - in those intervals so this is how you
671:50 - can use thread module in python 3. in
671:54 - the last video we have seen how to use
671:56 - thread module in python
671:58 - now in this video i'm going to show you
672:00 - how to use threading module in python
672:03 - and i'm going to give you some
672:05 - introduction about threading module how
672:07 - to create threads using threading
672:10 - modules and how to use threading module
672:14 - now threading module is more powerful
672:16 - and it has more higher level support for
672:20 - creating threads in python
672:23 - so let's see how to use threading module
672:26 - in python so in order to use threading
672:28 - module first of all we need to import it
672:31 - so i'm going to just import threading
672:34 - module and
672:36 - once threading module is imported we
672:38 - will be able to use threading module the
672:41 - second module which i'm going to import
672:43 - here is the time module which we have
672:46 - also seen in the last video because we
672:49 - are going to create the same function
672:51 - and we are going to use this function
672:54 - using the threading module which we have
672:56 - seen in the last video now i'm going to
672:59 - create the same method which i have
673:00 - created in the last video also which is
673:03 - print epoch so i'm going to
673:05 - just copy this method in order to save
673:08 - time and then
673:10 - i'm going to just paste it here so now
673:13 - we have our function which we want to
673:15 - call using the threading module and we
673:18 - want to create some threads using this
673:20 - threading module and call this function
673:22 - inside those threads so first of all i'm
673:25 - going to
673:26 - write this condition which is for the
673:29 - main method which is if
673:32 - name
673:33 - is equal to underscore underscore main
673:36 - underscore underscore and under this
673:38 - condition what i'm going to do is i'm
673:40 - going to create two variables let's say
673:43 - first variable name is t1 for thread 1
673:47 - and then i'm going to call the threading
673:49 - module to create a thread now inside
673:52 - this threading module there is a class
673:54 - called thread which we will use to
673:56 - create threads
673:58 - so just call a thread class here and
674:01 - constructor of this class takes several
674:04 - argument when you hover over here inside
674:07 - the parenthesis you will see the
674:09 - signature of this thread class
674:12 - so it can take the target it can take
674:14 - the name of the thread and arguments
674:17 - also it can take in the form of tuple
674:19 - and it can also take the keyword
674:21 - argument in the form of dictionary
674:24 - so for our purpose we need to call
674:27 - the function which is print epoch so we
674:30 - need to provide a target so in order to
674:33 - provide the target we are going to just
674:36 - write target equals and the name of the
674:40 - function so the name of the function is
674:43 - print epoch which we are going to call
674:46 - and this you need to give without the
674:49 - parenthesis so just remove the
674:51 - parentheses in front of this method when
674:54 - you use it as the argument in front of
674:58 - target the second argument which we want
675:00 - to give here is the arguments which this
675:03 - function takes so this argument we can
675:05 - give using the args parameter so i'm
675:09 - going to just write
675:10 - args equals and then in the form of
675:14 - tuple i'm going to give the name of the
675:16 - thread and the delay to the thread so
675:20 - let's give the name to the thread let's
675:22 - say this is
675:24 - thread one and the delay which we want
675:26 - to give here is one so this statement is
675:29 - going to create one thread and let me
675:31 - create one more thread in order to
675:33 - create multiple threads and instead of
675:36 - t1 i'm going to change the name to t2 so
675:39 - we have t1 variable and t2 variable and
675:42 - in the args i'm going to change the name
675:44 - of the thread which is thread 2 and
675:48 - let's say i want to give this delay of 2
675:50 - second to the function
675:52 - using the thread 2. so now we have two
675:55 - variables t1 and t2 which is an instance
675:59 - of the thread class
676:01 - now using t1 and t2 we can call a method
676:05 - called start in order to start the
676:08 - thread so i'm going to just call t1
676:10 - variable and then call a method called
676:14 - start which is going to start the thread
676:17 - t1 similarly i'm going to call the
676:20 - instance t2 and i'm going to call the
676:22 - method start on this instance t2 also so
676:26 - start method we use to start the threads
676:31 - now if you remember in the last video
676:33 - when we have created the thread using
676:36 - the thread module we have given this
676:38 - condition which is the infinite loop and
676:41 - this infinite loop we have used to wait
676:44 - until the execution of thread is
676:47 - completed
676:48 - now in the threading module which is the
676:50 - new module this facility is available
676:54 - using a method called join
676:57 - so on t1 instance i can call a method
677:00 - called join and on t2 instance also i
677:05 - can call a method called join and this
677:08 - join method
677:09 - waits until thread 1 and thread 2 is
677:13 - completed it's execution
677:16 - and then at the end we can print
677:18 - something let's say we are going to
677:20 - print that everything is done so i'm
677:22 - going to print
677:23 - done here
677:25 - so let's rewind what we have done inside
677:27 - this script we have imported threading
677:30 - module and time module and then we have
677:33 - created the function which we want to
677:35 - call using the threads now in order to
677:39 - create the thread using threading module
677:41 - we need to call the class called thread
677:45 - inside the threading module
677:47 - now this class constructor takes several
677:50 - arguments and right now we have given
677:53 - two arguments to this thread constructor
677:56 - which is the target which takes the name
677:59 - of the function which we want to execute
678:01 - using this thread and second argument we
678:04 - have given here is the args which is the
678:07 - argument which we want to give to the
678:10 - function which we want to execute same
678:12 - we have done for the thread 2 also now
678:15 - the start method on these instances is
678:18 - going to start the thread
678:20 - for t1 and t2 and the join method we
678:23 - have used to wait until thread 1 and
678:26 - thread 2 is completed their execution so
678:30 - let's run this script and let's see what
678:33 - happens so i'm going to right click and
678:35 - then
678:36 - run the threading example python script
678:40 - and you can see straight away that this
678:43 - output is printed here similar output we
678:46 - have seen in the case of thread module
678:49 - also so in this output thread one is
678:52 - printed and the epoch time is printed
678:54 - and then thread two is printed which is
678:57 - printed using the thread two so this
679:00 - output is printed using the thread one
679:03 - and thread two output is printed using
679:05 - the thread two and because we have given
679:07 - different intervals for thread one and
679:10 - thread two that's why we can see that
679:13 - thread one is printed and then thread
679:15 - two and then thread one is printed two
679:17 - times and then thread two is printed and
679:20 - then thread
679:22 - one is printed once again two times and
679:25 - then rest of the thread two outputs are
679:28 - printed now let's take one more example
679:30 - and what we are going to do in this
679:32 - example is we are going to create two
679:34 - different functions and we are going to
679:37 - try to call these two functions using
679:39 - these two threads so the first function
679:42 - i'm going to create here is the print
679:45 - underscore cube which is going to print
679:48 - the value of cube of the number which we
679:51 - will provide as the argument to this
679:53 - function so i'm going to just write
679:57 - print here and then using this print
680:00 - statement i'm going to print the value
680:02 - of cube of the number so here i'm going
680:05 - to just write cube and then i'm going to
680:07 - provide these curly brackets and then
680:10 - i'm going to call the format method
680:13 - after
680:14 - this string so let's call the format
680:18 - method which we use in order to format a
680:21 - string
680:22 - now inside the string we want the cube
680:24 - of the number so we will just multiply
680:27 - this number three times so num asterix
680:30 - num asterix
680:32 - num which is going to print the
680:34 - cube of the number once again let me
680:38 - just uh copy this function and then i'm
680:42 - going to create one more function and
680:44 - this time i'm going to name my function
680:47 - as print square so i'm going to just
680:49 - write print square here and then i'm
680:52 - going to just write
680:54 - square is equal to and here i'm going to
680:56 - just print the square of the number now
680:59 - in this statement where we have created
681:01 - t1 and t2 instances the target we can
681:05 - change which is the name of the function
681:07 - so now our target is print cube and
681:11 - print square without the parenthesis we
681:15 - need to give the name of these function
681:17 - so print cube and print square and
681:20 - arguments have also changed so earlier
681:23 - print epoch used to take two argument
681:26 - and now we just want to give one
681:28 - argument to the function and let's say
681:30 - it's two and also the print q function
681:34 - takes one argument and let's say it's
681:37 - two also now let's run this uh script
681:40 - and let's see what happens
681:42 - so you will see that there is an
681:44 - exception here which is some kind of a
681:48 - weird exception which says
681:50 - that exception in thread two and this
681:54 - exception is this print square
681:57 - argument after asterisk must be
682:00 - iteratable right so the problem here is
682:05 - we need to give a comma here which tells
682:09 - this uh parenthesis that this is a tuple
682:13 - value okay that's why it's giving the
682:16 - exception so if your function takes one
682:18 - argument then you need to give the value
682:20 - of that argument and then give the comma
682:23 - so that it's able to understand that
682:26 - it's a tuple and then once again when
682:28 - you run this
682:29 - script you will see the value of cube is
682:32 - printed which is eight and square is
682:35 - printed which is four so this cube value
682:38 - is printed using tread one and square
682:41 - value is printed using the thread two so
682:44 - in this way you can also
682:46 - call a multiple function using multiple
682:50 - thread instances using threading module
682:53 - so this was a brief introduction about
682:56 - threading module in the last video we
682:58 - have seen how to use threading module to
683:01 - create threads in python
683:03 - now in this video also we are going to
683:05 - see how to create threads using
683:07 - threading module but we are going to see
683:10 - in this video how to sub class from the
683:13 - thread class which is available inside
683:15 - the threading module and then
683:18 - create threads out of that class
683:21 - instance
683:22 - so to start with i have the same method
683:25 - which is print a poc
683:27 - which i want to call inside the thread
683:31 - so now
683:32 - here
683:33 - after this method what i want to do is i
683:36 - want to create a class so i'm going to
683:38 - create a class and the name of the class
683:40 - i'm going to give the name as
683:44 - my
683:45 - thread for example
683:47 - and one thing we need to do here is we
683:50 - need to sub class
683:51 - from the thread class from the threading
683:55 - module so we are going to just call
683:57 - first of all
683:59 - threading
684:00 - dot thread
684:02 - so we are subclassing from the thread
684:04 - class
684:05 - now inside this my class first of all we
684:08 - are going to define the init method so
684:11 - let's uh define this init method
684:14 - and in this init method we are going to
684:17 - pass two arguments same as
684:19 - this print epoch function
684:22 - so first argument will be the name of
684:24 - the thread and the second argument will
684:27 - be the delay so let's provide these two
684:29 - arguments first is the name
684:32 - and second is the
684:35 - delay
684:36 - now after this inside this init method
684:40 - we need to call
684:42 - the parents init method which is
684:45 - threading.thread.init so we are going to
684:48 - just call threading
684:50 - dot thread dot underscore underscore
684:54 - init method which is going to call the
684:56 - parent
684:58 - init method which is threading dot
685:01 - thread right now once you have done that
685:04 - we can just simply
685:07 - define some local member variable for
685:10 - the name so first of all self dot name
685:13 - is equal to name
685:15 - and
685:16 - self
685:17 - dot
685:18 - delay
685:19 - is equal to delay
685:22 - so now once we have our member variables
685:24 - what we need to do next is we need to
685:27 - override a method called run
685:30 - which is available inside the thread
685:33 - class in a threading module so i'm going
685:36 - to just define
685:37 - a run method and we are going to
685:40 - overwrite this so first of all what does
685:43 - this one method do
685:45 - so the run method is the entry point for
685:48 - the thread now in the previous video if
685:51 - you remember we have called the start
685:53 - method on the thread class right so the
685:57 - start method starts the thread by
686:00 - calling this run method so under the
686:03 - hood start method calls this run method
686:07 - so if we override this one method that
686:10 - means when we call the start method from
686:13 - the thread class this run method is
686:17 - going to be called so now we can do some
686:19 - logging here so what i'm going to do is
686:21 - i'm going to print first of all
686:25 - start
686:26 - thread
686:27 - and then i'm going to print
686:31 - end thread now between the start thread
686:34 - and and thread logging i'm going to call
686:38 - the
686:39 - print apoc
686:40 - function and this print epoc function is
686:43 - going to take two
686:45 - arguments which is name so i'm going to
686:47 - just pass the self
686:49 - dot name which we have assigned to the
686:52 - member variable and second is the self
686:56 - dot delay so once again when we call
687:00 - the start method on the instance of this
687:03 - my thread class this run method is going
687:07 - to be called by the start method
687:10 - automatically because we are subclassing
687:13 - from the threading dot thread class
687:16 - now once we have our run method and we
687:20 - have created the init method we can
687:23 - create some instances of my class so i'm
687:26 - going to create some instances for
687:28 - example t1 is equal to
687:31 - my
687:32 - thread and then we are going to pass
687:34 - those two argument first is the name so
687:36 - let's say the name is
687:39 - thread
687:40 - one and the delay we want to provide
687:43 - here is let's say one second because
687:45 - this delay is going to go
687:47 - to the print epoch method which is this
687:50 - one right
687:51 - once again we are going to create the
687:54 - second instance let's say t2 and once
687:57 - again we are going to call the my thread
687:59 - class which we have subclassed from the
688:02 - thread class and once again we are going
688:04 - to give these two argument first is the
688:08 - thread so this time i'm going to name it
688:10 - as thread 2 and the delay i'm going to
688:14 - give here is 2 second let's say and now
688:16 - after the instance is created we can
688:20 - call the start method and the join
688:22 - method on these two instances so let me
688:25 - just call t1 dot
688:27 - start
688:29 - and then we are going to call the t2 dot
688:33 - start
688:34 - and once we have the start which is
688:36 - going to start the threads we are going
688:39 - to just call the join
688:41 - method and by now you already know what
688:44 - this join method do
688:46 - which is to wait for the thread to be
688:49 - completed so i'm going to just call the
688:53 - join method on key2 also and let's run
688:57 - this script and let's see what happens
688:59 - so i'm going to run the script and you
689:00 - can see first of all start thread has
689:04 - been called which is from the logging of
689:07 - this print method and then thread 1 is
689:11 - printed and the epoch time is printed
689:13 - and then thread 2 is printed and the
689:16 - epoch time is printed because we have
689:18 - given the one second delay for the
689:20 - thread one so thread one will be
689:22 - iterated faster than thread two because
689:25 - we have provided the delay of two
689:28 - seconds for thread two and one second
689:30 - for thread one as soon as the thread
689:33 - ends we can see this print statement
689:35 - which is end thread and after the end of
689:38 - the thread two we can see this print
689:41 - statement which is and thread two we can
689:44 - also print here so let's print
689:47 - some more things here so we can print
689:49 - the name of the thread so i'm going to
689:52 - just write self
689:54 - dot
689:55 - name
689:57 - and we are going to do the same for the
690:00 - end thread also so i'm going to
690:03 - just print here also self
690:05 - dot
690:06 - name so we will know which thread is
690:09 - starting and which thread is ending once
690:12 - again i'm going to run the program and
690:14 - now you can see start thread thread one
690:17 - so thread one is started and then thread
690:20 - two is started and you can see first of
690:22 - all thread one
690:24 - is ended and at last thread two is ended
690:28 - so this is how you can sub class from
690:30 - the thread class which is available
690:32 - inside the threading module
690:35 - now
690:35 - inside this threading module there are
690:37 - some special methods which we are going
690:40 - to see now so the first method is so let
690:44 - me
690:44 - just go after
690:47 - this start of the threads so here what
690:51 - i'm going to do is first of all i'm
690:52 - going to
690:53 - use the print function and inside this
690:56 - print function i'm going to call the
690:58 - threading module and there are some
691:00 - special methods for example first of all
691:04 - we are going to see what is the active
691:06 - count of threads so what are the number
691:09 - of threads which are there inside this
691:12 - program this is going to print the
691:15 - number of threads
691:16 - now the second method which i'm going to
691:19 - show you
691:20 - is the threading first of all let me
691:23 - just call the threading dot we are going
691:25 - to call the current
691:28 - thread so this is going to print the
691:30 - current thread which is active right now
691:34 - and third method which i want to show
691:36 - here is threading
691:39 - dot
691:40 - enumerate
691:41 - and this enumerate method is going to
691:44 - enumerate the number of threads which
691:46 - are active
691:48 - so let's run this program once again and
691:50 - let's see what happens so i'm going to
691:52 - just run this program and first of all
691:56 - you will see
691:57 - 3 is printed using this print statement
692:00 - which is threading dot active
692:04 - count so active count is going to give
692:06 - you the number of threads
692:08 - and you already know that we have
692:10 - created two threads and one main thread
692:13 - is already available so total number of
692:16 - threads are three here which is printed
692:19 - now the current thread here this print
692:21 - statement prints
692:23 - this
692:24 - output which is the main thread so right
692:26 - now at the time of this print statement
692:30 - main thread is active
692:32 - now this enumerate method as i said is
692:36 - going to enumerate over all the threads
692:38 - which are available so main thread is
692:41 - available and then we have created
692:43 - thread one which is this one this is the
692:45 - name of the thread one and then when i
692:49 - scroll
692:50 - here you can see thread two is available
692:53 - so total three threads are available
692:56 - main thread thread one and thread two so
692:59 - these method you can use to just find
693:02 - out how many threads are there
693:04 - what is the current thread thread and
693:06 - you can also enumerate over all the
693:09 - threads
693:10 - there is one more method so i'm going to
693:12 - call this method here and i'm going to
693:16 - print it inside the print function
693:19 - and this time i'm going to use the
693:21 - instances so t1
693:23 - dot and there is
693:26 - a method available here which is get
693:28 - name which comes from the thread class
693:31 - and because we are subclassing from the
693:34 - thread class this
693:37 - and because we are subclassing from the
693:39 - thread class this get name is available
693:41 - inside the my thread
693:44 - class also and same we are going to do
693:48 - here also so print
693:50 - and then t2
693:52 - dot get name so this is going to give
693:55 - you the name of the thread by default so
693:59 - i'm going to just run this
694:01 - script once again and you can see
694:04 - this is going to print thread 1 and this
694:06 - is going to print thread 2. now you
694:09 - might wonder why this name is thread 1
694:11 - and thread 2
694:13 - because this get name method is going to
694:17 - give the value of self.name which we
694:21 - have assigned using this name argument
694:24 - so this name is overwritten in the
694:27 - subclass which is my thread class and
694:29 - that's why it's giving us thread 1 and
694:32 - thread 2 name which we have provided if
694:35 - we change this name let's say
694:38 - t 1 and t2 and once again we run the
694:42 - code you can see the name also changes
694:45 - to t1 and t2
694:48 - so this is how you can sub class from
694:50 - the thread class which is available
694:52 - inside the threading module and we have
694:54 - also seen some of the method which are
694:57 - available inside the threading module
695:00 - which are useful to us
695:03 - in this video we will see how thread
695:05 - synchronization works in the case of
695:08 - multi-trading in python
695:10 - and we will talk about how to use locks
695:13 - in the case of thread synchronization
695:17 - so first of all what is thread
695:19 - synchronization so thread
695:21 - synchronization is defined as the
695:23 - mechanism which ensures that whenever
695:26 - two or more threads are executed in
695:30 - parallel or concurrently and if they are
695:34 - sharing the same resource in that case
695:37 - all the tread should not
695:40 - work simultaneously or parallelly on the
695:44 - same resource so let me explain the
695:47 - thread synchronization problem with the
695:49 - diagram
695:50 - so in this diagram you can see there are
695:52 - three threads
695:54 - and all these threads are sharing the
695:57 - same resource it can be a global
695:59 - variable for example so as long as all
696:02 - these threads are accessing this shared
696:05 - resource one by one not at the same time
696:09 - everything will work fine
696:11 - but the problem arises when two or more
696:14 - threads try to access the same global
696:17 - variable or shared resource
696:20 - at a particular time and this
696:23 - kind of situation is called the race
696:25 - condition
696:27 - so a race condition occurs when two or
696:30 - more threads can access the same shared
696:34 - data
696:35 - and they try to change the value of this
696:38 - same shared data at the same time and
696:41 - whenever this kind of race condition
696:43 - occurs the value of the variables may be
696:47 - unpredictable because if two threads are
696:51 - working on the same global variable at
696:53 - the same time you will never know which
696:56 - thread has worked on this variable so
696:59 - the result is the unpredictable value of
697:03 - a variable now let me explain this
697:05 - problem with an example
697:07 - so i have this sample code in which in
697:09 - the first line i'm importing threading
697:12 - module and in the second line i'm just
697:15 - declaring a global variable
697:17 - now i have two functions here one is
697:20 - thread task and other is main task now
697:24 - inside this thread task function i want
697:26 - to increment the value of x every time
697:29 - by 1 so this is the code for this and i
697:32 - want to increment this value by 1 10
697:35 - times so that's why i have used this for
697:38 - loop in the range 0 to 9 so it's going
697:42 - to increment the value of x 10 times
697:45 - inside this loop now because this x is a
697:48 - global variable i have just added this
697:52 - global keyword in front of x
697:54 - so our function knows that this x is not
697:58 - a local variable it's a global variable
698:01 - so this function is simple enough it
698:04 - just increments the value of x 10 times
698:07 - inside the loop and this x is this
698:11 - global variable which we have declared
698:14 - outside this function
698:16 - now in the main task what i'm doing is
698:19 - i'm creating two instances using the
698:21 - threading module with the help of thread
698:23 - class
698:24 - this we have already seen in the last
698:26 - video how to create threads using
698:29 - threading module so nothing new in this
698:32 - i have created two instances t1 and t2
698:35 - and i'm passing the target is equal to
698:38 - the function name which is this function
698:41 - which is thread task so both the threads
698:44 - will call the same function try task and
698:47 - then i'm just starting both the threads
698:50 - with the help of start function and then
698:53 - i'm just using the join methods on both
698:56 - of the instances now here inside our
698:59 - main if condition i'm just calling
699:03 - our main task in which our threads are
699:06 - created and executed and then at last i
699:09 - want to print the value of x when all
699:11 - the thread execution has been completed
699:14 - so let's run this script and let's see
699:16 - what happens so you can see here the
699:18 - result here is 20 which is expected
699:21 - because we are incrementing the value of
699:24 - x
699:25 - 10 times using two threads so the value
699:28 - of x will be incremented 10 times by 31
699:32 - and 10 times by 32 and as a result the
699:36 - value of x becomes 20 but as soon as i
699:40 - increment the value of
699:43 - this range let's say this is 10 000 and
699:46 - i want to
699:47 - just execute this program once again
699:50 - there is no problem until now we can
699:52 - just
699:53 - run this program again and again we will
699:56 - not see
699:57 - this problem because
699:59 - we are incrementing the value of x ten
700:02 - thousand times
700:04 - with a single thread so we have two
700:06 - threads and the result is twenty
700:08 - thousand which is absolutely fine now
700:11 - let's increment the value of range once
700:13 - again
700:14 - two hundred 000 and now
700:17 - i want to show you the problem
700:19 - so as soon as you do this
700:21 - you can see that the thread
700:24 - synchronization problem occurs so here
700:26 - you can see the result is not 200 000
700:29 - which we were expecting because for such
700:33 - large value the scenario of thread
700:36 - synchronization
700:37 - is happening
700:39 - so the two threads
700:41 - try to work on the same variable at the
700:44 - same time and as a result the value of x
700:48 - is unpredictable so this thread
700:50 - synchronization problem you will see
700:52 - when you try to work on a same variable
700:55 - multiple number of times so in this case
700:59 - we have a hundred thousand iterations
701:02 - and both the threads try to iterate over
701:05 - the same variable
701:07 - using two threads and the result is
701:10 - unpredictable let's try to execute this
701:13 - once again so you can see the result is
701:15 - always different every time i execute
701:19 - this program because the result is
701:22 - unpredictable so how to solve this
701:24 - problem so one way of solving this
701:27 - problem is by using the locks so first
701:30 - of all let me just change this program
701:33 - and try to use locks
701:35 - in this python script so to use locks
701:38 - what you can do is you can declare a
701:41 - local variable here for example lock
701:44 - is equal to
701:46 - threading dot
701:48 - class called lock so this is going to
701:51 - give you an instance of lock now this
701:54 - lock class have two method one is
701:56 - acquire and other is release
701:59 - now acquire method is used to lock
702:02 - and release method is
702:04 - used to release the lock
702:07 - so let me just
702:08 - complete this
702:09 - script and then i will explain
702:12 - what does these functions do so what i'm
702:15 - going to do is i'm going to pass this
702:16 - lock instance as an argument of the
702:19 - thread task function so i'm going to
702:21 - just write
702:23 - args is equal to and then we will just
702:26 - pass our lock instance as an argument of
702:30 - this tread task same we will do for
702:34 - the second thread and because we have
702:36 - passed this argument we need to add this
702:39 - argument here also so i'm going to just
702:41 - pass the lock instance as an argument of
702:44 - this function and now at last what we
702:47 - are going to do is
702:49 - just before we change the value of the
702:53 - global or the shared data we use this
702:57 - lock variable and call the method called
703:01 - acquires and just after you finished
703:04 - changing the resource or the shared data
703:08 - you use a method called lock dot release
703:12 - so once again we have passed this lock
703:14 - instance which we got from this lock
703:17 - class
703:18 - as an argument of this function so this
703:21 - is the lock instance and there are two
703:24 - main method inside this log class which
703:27 - are acquire and release this acquire
703:30 - method you use to acquire the lock this
703:33 - lock
703:34 - can be blocking or non-blocking so this
703:38 - acquire method takes one argument which
703:41 - is true or false by default the value of
703:44 - argument is true
703:46 - which means that this acquire is
703:50 - blocking by default so what does this
703:52 - lock dot acquire will do
703:55 - it locks the axis of the shared variable
703:58 - in our case this is x
704:01 - and at this time only one thread can
704:04 - work on this variable whatever thread
704:07 - have the access to this function at a
704:11 - particular time so until and unless one
704:14 - thread execution is completed on this
704:17 - variable after that this lock is
704:20 - released that means that the other
704:22 - thread can work on this variable using
704:26 - the lock once again so whenever second
704:29 - thread wants to
704:31 - try to access this variable it will just
704:33 - lock the access to this variable first
704:36 - of all and then work on this variable
704:38 - whatever you want to do you want to
704:40 - increment the value or change the value
704:42 - of x and then release the lock and
704:45 - releasing means that we
704:48 - once again want to allow
704:50 - the other thread to work on this shared
704:54 - resource so this mechanism will allow
704:56 - only one thread to access this shared
704:59 - resource
705:00 - at a particular time so the thread
705:03 - synchronization problem will not occur
705:07 - so now let's just run the program once
705:09 - again and let's see what's the result so
705:11 - you can see this problem and this
705:13 - problem is coming most likely because
705:16 - of
705:17 - this problem because we haven't provided
705:21 - args as the tuple so we need to provide
705:24 - this arg as a tuple so always remember
705:27 - whenever you want to pass any argument
705:29 - using this args keyword you need to pass
705:32 - them as tuple so once again i'm going to
705:35 - just try to run this program and you can
705:38 - see the result is whatever we expected
705:41 - so because we are incrementing the value
705:44 - of x
705:46 - hundred thousand times and there are two
705:48 - threads which are working on the same
705:50 - variable so we get the 200 000 result
705:54 - which is expected now let me run this
705:57 - program again and again and you can see
705:59 - every time now we get the expected
706:02 - result which is 200
706:05 - 000
706:06 - so this is how you can solve the thread
706:09 - synchronization problem
706:11 - using
706:12 - locks
706:14 - so this is how you can use locks to
706:17 - synchronize your threads in python i
706:20 - hope you have enjoyed this video and i
706:22 - will see you in the next video

Cleaned transcript:

hey guys welcome to this course on python programming for beginners so why learn python because using python you can build almost anything python can be used for web development game development computer vision robotics graphical user interface development and also python is the number one language of choice for machine learning data science and artificial intelligence so the goal of this course is to provide you the working knowledge of python programming we will start with the basics starting from the installation of python on your operating system and then we will learn all the basic concepts in python programming like variables data types operators control statements loops strings functions and also python collections like lists tuples sets and dictionaries then we will move to the object oriented programming concepts in python so in this section we will start with what is object oriented programming what are classes and objects and then we will cover the concepts like encapsulation inheritance polymorphism abstraction and access specifiers also we will see some advanced object oriented programming topics like abstract classes and compositions next we will see how we can handle exceptions using python programming then we will move towards some advanced topics like python iterators generators decorators and also we will cover some functional programming concepts using python i will also cover how you can debug your python code and also we will see how to use pip which is a python package management system to install and manage your software packages written in python next we will see multithreading in python also we will see pi test framework which is one of the most popular unit testing framework for python now if you want to see the whole list of topics which will be covered in this video course then you can see the description of this video and you will be able to see all the topics which will be covered in this video so what are you waiting for let's get started in this video i'm going to give you a brief introduction about python so let's get started so first of all what is python so python is a high level dynamically typed programming language python support multiple programming paradigms including object oriented imperative functional and procedural styles now python is a interpreted language so what do we mean by interpreted to understand this we need to understand the difference between the compiled languages and the interpreted languages so some languages like c c plus plus java are all translated by running the source code through our tool called compiler this compilation of source code results in a very efficient byte code that can be executed any number of times now interpreted languages like python in contrast must be parsed interpreted and executed each time the program is run thereby greatly adding the cost of running the program so a compiled language takes the entire program as a single input and converts it into machine code or byte code which is stored in a file called a binary file on the other hand interpreted languages like python takes the single instruction as single input and execute that instruction now compile languages run faster because compilation is done before the execution on the other hand interpreted programs run slower because compilation and execution takes place simultaneously in case of python even though it's a interpreted language but it's really fast now python supports dynamic data types and to understand this we need to understand the difference between statically typed programming languages and dynamically typed programming languages so at statically typed programming languages do the type checking at the compiled time as opposed to the real time and dynamically typed programming languages do type checking at run time as opposed to compile time so let's say you declare a variable x is equal to 9 in python python will do its type checking at runtime whether it's an integer or a string or a double value all will be done at the runtime now python is independent from platforms that means it's a cross platform programming language that means you can run your python code on windows linux mac or on any other unix operating system now python focuses on faster development time so python code has a very natural style to it which makes it easy to read and understand thanks to the lack of semicolons and braces so we don't use semicolons or braces in python that means faster development time especially when you are doing some prototyping work python is a highly readable language and has a clean visual layout so if a developer writes a very efficient python program it's like reading english language now python have high level internal object data types and have automatic memory management and at last python is free and open source that means you don't need to pay anything to start learning python now let's talk about some history about python so python was conceived in late 1980s and its implementation began in december 1989 by a developer called guido fan rossum in netherlands as a successor of a programming language called abc now guido fan rossum worked at google from 2005 to december 2012 where he spent half of his time in the development of python programming language and nowadays fan rusim is working in a company called dropbox and from where this python name come from russom chose the name python since he was a big fan of monty python's flying circus so python was first publicly released in february 1991 and python.org which is the official website of python was released in the time period between 1996 and 1997. in the year 2001 python software foundation was created and fan brewsim remained the principal author of python his continuing central role in python development is reflected in the title given to him by python community which is benevolent director of life now what is a benevolent director of life this is a title given to small number of open source software development leaders typically the project founders who retain the final say in the dispute or arguments within the community so why learn python because python is fun to use scripting language and as i said python is a multiparadigm programming language which supports object oriented imperative functional programming and procedural styles that means it's highly recommended for the educational purpose so majority of educational institutes use python as the first language which they teach to their students and why it's the first choice of educational institutes because it's very easy to learn and it runs on any platform now python is very powerful scalable and easy to maintain programming language which enables high productivity and it has lots and lots of inbuilt libraries which our developer can use python is also used as a glue language which acts as a interactive front end for the languages like c and c plus plus so when you develop in python it reduces the development time it reduces the code length it is easy to learn and use as a developer it is easy to understand codes it is easy to do team projects in python and it's really easy to extend to other languages if you are using python so where can you use python so because python is a general purpose programming language it is used in many web development framework for example django and flask recently became very popular for web development now python is also widely used in scientific computing data mining and machine learning and continued growth and demand for machine learning developers may be driving the popularity of python now as i said python is used as a scripting language that means if you are doing prototyping it's really efficient to use python python is also used in the development of graphical user interfaces embedded applications gaming and devops tools and at last as i said because python is really easy to learn it's used for educational purposes as the first programming language for teaching programming now the question arises which version of python should you learn python 3 or python 2. so i would recommend python 3 since it's more modern and it is a more popular option at this point of time so i will be teaching this course in python 3. so this was a brief introduction about python from the next video i'm going to show you how to install python and how to use python as a programming language in this video i'm going to show you how to install python 3 on your windows 10 operating system so let's get started so first of all open your favorite browser on your windows 10 operating system and then search for python and the first link which will appear here will be from python.org so we are going to click on that link and once this python.org website is open you just need to scroll down a little until you see this downloads section and you can see at the time of making this video python 3.7.0 is the latest version of python available so we are going to click on this link which says python 3.7.0 and you will be redirected to this page which says python 3.7.0 and now i'm going to scroll down until i see the files here and you will see there are various kinds of installer available here we are going to install the python using the executable installer so we are going to choose this option which says windows x86 hyphen 64 executable installer and now i will wait for this executable to be downloaded and once this executable is downloaded you just need to click on this exe file and i'm going to minimize the browser here so you can see python's 3.7.0 setup window has been started and on the first window you will see two options here one is install now and other is customize installation so what we are going to choose is this option which says customize installation because when you choose this install now option python will be installed at this part which i don't want to use you can see it's a long path which i don't want to remember so i will use this option which says customize installation and i will also check this option which says add python 3.7 to path so now let's click on customize installation and next you will see this optional feature window and you can see there are some optional feature which this python installer will install for example documentation pip it will install which is a python package manager idle ide python test suit and other feature it's going to install so i'm going to leave everything as default and then i'm going to click next and now this next window will open which says advanced option here i'm going to check this option which says install for all users and i'm going to leave other check boxes as checked and then you will see this section here which says customize install location so i want to install python on my c directory so what i'm going to do is i'm going to open the windows explorer and i'm going to go to the c directory here and once the c directory is open i'm going to right click here and i'm going to create a new directory and i'm going to name this directory as python and then i'm going to press enter and this path i'm going to give here in the customize install location so i'm going to just give this part which says see colon slash python and then backslash python 3 7 3 7 here means that we are going to install 3.7 version of python so now python will be installed at this location on my computer and then i'm going to click on the install button here and then you will see the installation will start and it will be finished in a few seconds so just wait for the installation to complete and after some time i can see this message which says setup was successful so i'm going to click on this close button which is going to close this installer so now in order to check whether python is installed on our windows operating system or not we are going to search for python here and you will see few options here one is this python 3.7 terminal other is idle ide so first of all we are going to click on this option which says python 3.7 64bit which is going to open this kind of terminal so this is a python terminal and here we can for example print something so i am going to just write print and in the parenthesis and in between the double quotes i can just write hello world and then press enter which is going to in return print hello world that means python 3.7 terminal is working so i'm going to close this terminal now and once again i'm going to search for python here and this time i'm going to select this option which says idle okay so just select this option which says idle and in the parenthesis python 3.7 64bit so this idle is an ide which comes with python installation at the time of installation we have chosen this option to install idle that's why we can see this option here and also this is an interactive shell so you can once again write a print and inside the parenthesis you can just write for example once again hello world and then press enter and it's going to give you this kind of output here so now python interactive shell is working and idle ide is also working so i'm going to close this idle ide and now i want to check whether python is working using my command prompt or not so i'm going to right click on this windows button and then i'm going to click on command prompt and here i'm going to first of all write python and then press enter and you can see this python option is working now even on your command prompt right so here also you can just write print and inside the parenthesis you can just print hello world and then press enter and it prints hello world in return so now we have successfully installed python on our windows 10 operating system in this video i'm going to show you how to use mathematical operators and how to do basic math in python so first of all we will open the idle ide so just search for python once again i have shown you this method in the last video also so just search for the python once again and in the last video i have shown you how to install a python and with the python installation this idle is also installed right so we are going to open this idle ide now some of you who are familiar with python and have some experience with python may think that why am i using this python idle ide because there are many better ides and editors available for the development of python so don't worry i'm going to show you everything how to install other ides which are preferred in the development of python step by step but for now we will start with this idle ide so the first thing which i want to do here is i want to increase the font size first of all in the idle ide because this may be not visible to some of you you can change the font size by just changing this number and i'm going to change it to for example 18 and bold so we will be able to see our fonts in a better way so now everything is set so let's get started with the programming so let's start with the basic math operations so let's say i want to add something so i can just write number plus which is a operator and the other number and then press enter and you will get the result of this expression now let's try the subtraction so let's say i want to subtract 60 minus 50 and then press enter and it gives the result let's do the negative subtraction so i'm going to just write 60 plus 50 and then press enter and it's going to return me the negative value now let's do the division so for example i want to divide 50 by 3 i'm going to press enter and you can see it gives me a float value or a decimal value and if you are familiar with other languages like java or c plus plus this may appear a little bit strange to you because when you do the same operation in java or c plus plus with this division operator you will get the different answer which is 16 and not these decimal float value so if you want to just get an integer value and not the decimal value out of the division then you can write this expression which is 50 double forward slash 3 okay and then press enter and now you get 16 which is a whole number or an integer this type of division is also called the floor division in which you get the whole number as the answer and the decimal value is truncated out of your answer so if you want to get the exact value out of the division in decimal values also then you can use this expression which is single forward slash operator and if you want to do the flow division then use these two forward slash symbols now it's also possible to divide two decimal values so decimal values in python and most of the other languages are called the float values so here instead of 50 i can just write 50.0 divided by 3.0 which is also valid or i can write 50.0 divided by 10 and then press enter which gives me 5.0 and when i write the integer which is 50 divided by 10 it will also give me this value which is 5.0 now let's try some multiplication so if you want to do multiplication in python you use a number and then this asterisk symbol and then second number and then press enter and this is going to multiply these two numbers so this is the multiplication operator which we can use to multiply two numbers now this is what we are doing here is for example uh multiplying two numbers or dividing two numbers or addition of two numbers or subtraction of two numbers in python it's called expression okay so 50 multiplied by 10 is an expression and i have already told you that these are symbols for multiplication or division are called operators now the number on which you are doing these mathematical operations are called operands so 50 here is an operand 10 here is an operand or 3 here is operand and 50 here is operand now here 50 and 10 are also called literals because they are constant values so what we have learned till now this is an expression this is an expression or 50 divided by 3 is an expression the number on which you operate on are called operands and these symbols which you can use to multiply divide add or subtract are called operators and these numbers are also called literals when they are constants now let's try some modulo operations so for example i'm going to just write 10 modulus 3 here what it's going to give us is the remainder of the division of these two values so 3 multiplied by 3 is 9 which leaves the remainder 1 and that's the result we are getting okay let's try it once again so for example i will divide 21 divided by 5 it will give me the answer 4.2 but when i do 21 modulo 5 and then press enter it's going to give me the remainder of the division of two values now there is an another interesting operator which is called exponent operator which you can use for the exponent values so for example i want to get the result of 2 to the power 5. how can i do it so i can just write 2 and then double as 6 and then 5 which means 2 to the power 5 and then when i press enter it's going to give me 32 or i can just write to 10 and then i can just write double asterisks and then for example 10 once again and then press enter it's going to give me the result of 10 to the power 10. now it's also possible to do these mathematical operations on more than one number so for example i can write 5 plus 5 plus 6 plus 9 and it will give me the result of the addition of these four numbers and it's also possible to use different type of operator in one expression so i can write 5 plus 9 minus 6 multiplied by 10 for example and it's going to give me the result of this expression now there is one question which may arise here is for example once again i'm going to do 5 plus 9 minus 6 multiplied by 10 and divided by 20 and press enter here it's going to give me this value but how this value is calculated what operation is executed first is the multiplication is done first or is the division done first or the addition took place first or the subtraction took place first so i have this table and here you can see the precedence of these operators so in this table highest precedence is at top and lowest is at bottom that means parenthesis have the highest priority and then the exponents have the priority and then the multiplication and division operators have the same priority here and at last the subtraction and addition have the same priority but whenever you use these operators which are in the same box in a same expression then whatever operator you use on the left have the highest priority and whatever operator you use on the right have the lower priority so in this table parenthesis have the highest priority and the addition and the subtraction have the lowest priority and for example if you use multiplication and division in the same expression then the priority is decided which operator is appearing on the left so if the operator is appearing on the left it has the highest priority then the operator which are on the right side so let's take an example of that so for example so first the addition of these two number will happen and then the division of these two numbers will happen because parentheses have the highest priority and then the result of these two numbers will be multiplied by 6 because multiplication have the highest priority out of these two operators which are minus and multiply so multiplication operator have the highest priority and at the end the subtraction of the result will take place so let's press enter and let's see what's the result so the result here is 11 and how we get this result here so 5 plus 9 is 14. and the division of these two number is 1 by 2 so 6 will be divided by 2 which is 3 and then at last 3 will be subtracted from this result which is 14 which will give you 11. once again for example you use 60 multiplied by 20 divided by 30 and then press enter it will give you 40 but in which order this calculation will happen first of all this multiplication will take place because in the table we have seen that multiplication operator and division operator have the same priority and that's why the priority will be decided from left to right now if you want to learn the order of precedence between the operators then you can use this keyword which is p e m d a s p stands for parentheses e stands for exponents m stands for multiplication d stands for division a stands for addition and s stands for subtraction okay so you can either remember this name which is pemdas or you can use this sentence which i have written here so please excuse my dear aunt sally and you need to remember the first letter of each word here and the first letter of every word for example p here stands for parenthesis is here stands for exponent m and d here stands for multiplication and division a and s here stands for addition and subtraction so for remembering you can either use this sentence or you can remember this keyword in this video we will talk about python variables and types so first of all what is a variable so according to wikipedia in computer programming a variable is a storage location paired with an associated symbolic name also known as variable name or identifier which contains some known or unknown quantity of information referred to as value now in simple words a variable is a named place in the memory where a programmer can store data and later retrieve this data using the variable name now the programmer get to choose the name of this variable which is declared and programmer can change the content of this variable in the later statements so let's see how we can define a variable in python so you can define a variable using any name for example you can give my int as a name and then using an assignment operator which is this equal to symbol you can assign some value to this variable for example 9 and when i press enter this value 9 is assigned to this variable which is my int and now on i can just get the value of this variable using the variable name so when i write my int and then press enter it gives me the value which is assigned to this variable now as i told you in the first introduction video of this course that python is completely object oriented and it's not statically typed so you do not need to declare the variables before using them or you do not need to declare the type of the variable and further every variable in python is an object so if you have learned some other languages like c c plus plus java or other statically typed languages you may have observed that before writing the variable name they give the type of the variable for example in other languages for defining integer they have to first define the data type of that variable and then they define the variable name and then they assign any value to it but in python you don't need to define this data type here and whenever you define a variable you need to assign some value to it so that python will be able to understand the type of data you want to store in this variable so this type of notation when i press enter here it's going to give me error which says invalid syntax because this type of variable declaration is not allowed in python now there are some rules which you need to follow in order to declare a variable in python and these rules are a variable must start with a letter or underscore okay so you cannot start the variable name with a number or some unknown symbol the second rule is a variable must consist of letters numbers and underscores and no other special symbol and the third rule is variables are case sensitive so let me show you the demo of all the rules which are related to declaration of variables in python so let's say we have defined this variable myint i cannot get the value of my end when i write for example my with capital letter and then int here and it's going to give me an error because variables in python are case sensitive so this variable name is different from this variable name now as i told you you can define a variable starting with the letter it's totally valid so let's define this variable age is equal to 10 which is valid you can also define a variable with the combination of letters and the numbers and it's also totally valid but a variable name cannot start with a number so when you write something like this and assign some value to it it's going to give you an error which is a syntax error so a variable name cannot start with a number a variable name can start with underscore and it's totally valid but apart from underscore when you use some special character for example hash age is equal to 10 it's not valid so whenever you try to get the value of age it's not going to give you the value which is stored inside this variable also you cannot use any other special symbol between the variable names so for example i can write h dot 22 here is equal to 22 which is not a valid syntax because we have used this dot symbol in between the variable declaration so these are some of the ground rule in order to declare a variable in python now apart from that there are some reserved words in python which also you cannot use in order to declare a variable for example these are some of the words which you cannot use in order to declare a variable for example and del for is raise you cannot use to declare a variable so let's say i'm going to go to idle once again and i declare a variable called for is equal to 10 it's not valid it says it's a invalid syntax because for is a reserved word in python so now we have learned some rule about declaring the variables so let's declare some variables in python so first of all i'm going to declare an integer variable which takes an integer and then i'm going to declare a float variable which takes a decimal value and then i can also declare in python a complex value for example my complex is equal to 1 j and then press enter and it's also totally valid where j in this value is the imaginary part of this complex number now you can also use e to indicate the power of something so for example i declare a variable my num and you can write this notation like this so 10 to the power 10 is totally valid okay and when you try to access this value of my num it's going to give you the value of 10 to the power 10. you can also write the capital e here so when i write my num is equal to 10 capital e 10 and then press enter and i try to access the value which is stored in this variable you can see it gives me the same result now in order to declare a string variable for example my string i can use double quotations for example i want to write some name here it's totally valid so i'm going to just get the value which i stored inside this my string variable and it gives me this name max i can also use single quotation in order to assign a string to the variable so i will use now single quotation and this time i just change the name to tom it's also totally valid so when i write my string once again it gives me the value tom now you may have noticed one more thing here is reassignment of the variable is possible so first i have assigned the value max to this variable my string and then i have reassigned some other value tom to the same variable my string so reassignment is possible so for example let's say what i'm going to do is i'm going to take my float variable and then what i'm going to do is i want to assign in this variable the value which is stored in my int variable so i'm going to just write my int here and then press enter and let's see what is the value inside my float now and you can see it gives us the value 10 but you may ask that we have declared this variable name as myfloat so we are expecting the float value inside this myfloat variable name but it's giving me the value 10 so in order to convert integer value into a float value you can use typecasting so i can just write my float here is equal to then you write a keyword float here and then inside the parentheses you can write the name of the variable which is myint and then when i access the value of my float here it's going to give me 10.0 which is a float value so in order to convert integers into float you can use this keyword float here now if you want to convert a float value into an integer you can just write for example my int is equal to int and then inside the parenthesis you can write the variable name for example my float here and then press enter and then i can see the value which is stored inside this mind variable and it's an integer now let me show you one last thing which is to find out the type of any variables so you use a keyword called type and in the parenthesis you use the variable name for example my int and then press enter and it will give me the type of the value which is stored inside this variable so you can see integer is stored inside this variable myint once again type and then parenthesis and now i want to know the type which is stored in the my float variable and you can see it will give me float as an answer so we know that in my float variable float value is stored once again we will see what value is stored in this mynum which is an exponent value right so i'm going to just write type and then i'm going to just write my num now and then press enter and it gives me a float value and at last i want to see what type is stored in this my string variable so i can just write my string here and then press enter and you can see the value which we get here is str which stands for string that means in my string string value is stored now it's totally possible to use the operators with variables so i want to add the value stored in my int plus my float here and this will give me 20 because my int have the value 10 and my float have the value 10.10 so the result is 20.0 here so this is how you can use variables and types in python in this video we will see how to use print function in order to print output on the console in various different ways and i'm also going to show you how to take user input using python so we have already seen that in python we can use this print function in order to print something and we have already printed hello world at the time of installation right and when i press enter it's going to print hello world on the console now some of you might wonder what is this print so print is a in built function in python so python has a number of inbuilt function and print is one of them so here print is a function and then inside the parenthesis what you give here is called a parameter or an argument okay so hello world is an argument which is a string argument right so let's try to give in this print an integer argument let's say i just provide 25 here and it will print this number once again let's say i'm going to write print and then i want to execute some expression 50 multiplied by 60 and then press enter print function is also able to do this now let's say i want to output some more complex formatted string so let's say i want to print on the console 50 multiplied by 10 is equal to 60. how can i do this so let's see how we can do it so i can write print here and then inside these double quotes you can write your string for example 50 multiplied by 10 and then in print function you can give multiple arguments using this comma separator so here i can just write 50 multiplied by 10 and let me put equals symbol here inside this string and then press enter and now it prints 50 multiplied by 10 equals 500 and you can also provide more than one argument to this print function so for example i can just write hello here and then in the second argument i will just provide the space between hello and world and in the third argument i will just say world here and this print function will concatenate all these string values and give you the output in this format now let's say you want to also provide this value here which is 50 and 10 instead of string you want to provide some value which you take from a variable so for example you declare a variable x is equal to 50 here and then y is equal to 10 and you want to use these two variables instead of this static string so how you can achieve this you can achieve this in various different ways so let me show you the first way so i can write print and then in the double quotes this is your string so whenever you use this double quotes and whenever you write something in between this double quotes it becomes a string so after this string i will provide a dot here and wait for some seconds and as soon as you do this you will be able to see various different hints here which are provided so these are all the inbuilt methods which you can use with the string so you can use find method you can use format method so for now we are going to use this format method with string so you can just click on this format method so let's say i will provide x as the first argument y as the second argument and i want to see the output of x multiplied by y in the third argument now how you can print the value of x y and the multiplication of x y using this blank string so it turns out that you can use these curly brackets inside this string and you can give some index here so index starts from 0. so this index is index 0 and then i'm going to provide space and then this asterisk symbol to provide this kind of format so we want to achieve this format here right so just write 0 in the curly bracket space asterix and once again curly bracket and this time we are going to provide the index 1 and the result will be transferred to index 2. why because here the index starts from 0 so x will be transferred to the index 0 y will be transferred to the index 1 and the multiplication of x and y will be transferred to index 2 here so let me press enter here and you can see it prints the string which we desire now once again i'm going to write this print function and once again i'm going to give this parenthesis and you can see the hint here so i want to use this scp keyword now inside the string so how can i use this so i will just close this parenthesis and once again i want to print hello world so i will just write hello and then i'm going to provide the comma and inside the double quotes i'm going to just write world here and then in the last argument you can provide this keyword scp is equal to and inside the double quotes you can provide some separator to separate the hello from world so i want to just give this string to separate hello from world and now i'm going to press enter and you can see this string is separating the keyword hello from the world now in python you can also use c style string formatting to create a new formatted string so let me show you how we can do it so i'm going to declare a variable called name and i'm going to assign some value to it for example max here and then press enter and now i'm going to just write print function and in the parenthesis i want to just greet this name so i can just write double quotes hello here and then if you are familiar with c style string formatting then you may know this modulo s symbol which is used to print strings right and then after this double quote you just need to provide once again this modulo symbol and then you need to provide the variable name which you want to replace instead of this modulo s so in our case we want to replace this modulo s by name variable and i'm going to press enter and you can see it prints hello max now let's say i also have the age of this person so the age is let's say 22 and once again i'm going to use this print function and inside the parenthesis i want to say hello to the name including the age so i can just write hello and then modulo s here and then i'm going to print the age of this person i can just write r u modulo d which is used to print the integer values and then i'm going to just write years old and after the double quotes i can just write modulo and this time i cannot simply provide this name argument like this i must provide the name in the form of a tuple and what is a tuple a tuple is a fixed size list and we are going to see in the future videos how to use tuples but for now just remember that a table is a fixed size list okay so inside these parentheses once again i can provide first of all the name and then as a second value in the tuple i can provide the age variable and now i'm going to press enter and now you can see it prints hello max are you 22 years old so this is how also you can use these c styled string formatting in python i want to give you one more example of float here so i can just write for example this person's marks so i'm going to just write marks is equal to and let's say i want to provide these marks in the floating point so i can give this modulo f here and then after this modulo i can just give the mark so 92.5 and then press enter and you can see it prints the marks now one more little thing which we can do here is we can limit the number of decimal values which we want to see after this point so we can write the same printf function and same argument and in order to limit the number of digits after the decimal you just need to write after f dot and some number for example 2. oops i don't want to see this output i wanted to see the output after the decimal value so once again i think this should be this point should be before f so i just need to write dot and 2 before f i think and then press enter and now it limits the number of digits after this decimal point now the last thing i want to show here is how you can allow the user to provide some input so for example i will declare a variable called value and then i can use equals and then i'm going to use a inbuilt function which is called input so input is also an inbuilt function which allows you to take user input so here i can just write as the first argument and then i will provide this colon here and that's it you just need to press enter here and now you can see this terminal is asking us the same question which we have written here so let's say i just provide 50 here and then press enter then what's going to happen is this 50 is going to be assigned to this variable which is value so now when you just use this value variable you can see this 50 is assigned to this value variable you will also see that this 50 is a string and not a number right because it's enclosed in single quotes so how you can assign 50 to this value using the user input so what we can do here is once again i'm going to use this value variable and what we can do here is we can type cast the output of input so you can just write int and then here inside the parenthesis you can just write and now when i press enter and provide 50 and then press enter and see the value now it's an integer right so you can typecast the output of this input function which provides us the string and this int method is going to convert the string into an integer and then give us the result instead of this int you can also use a float keyword here so let me show you uh this example also so i'm going to just copy this and paste it here and instead of using the int i'm going to just write float here okay and then press enter and i'm going to provide this time 100 here and then press enter and then i'm going to just print the value of the value variable and now it prints the answer in floating points so this is how you can use print function to print the output on the console and input function to take the input from the user in this video we will discuss about builtin functions and modules in python so the python interpreter has a number of builtin functions modules and type that are always available that means you can use them at any time and we have already used some of the builtin functions in python so first of all we have used the print builtin function we have already used the input builtin function we have already used the int which is used to type cast a float or a string into an integer right we have already used a builtin function called float which is used to convert an integer to a float value or a string to a float value now python has a list of these inbuilt function and you can find this list by going to the python.org website and then clicking on that docs section and you can choose the version you have installed so we have installed the latest version which is 3.7.0 and you can even choose your language which are available here now when you click on this link which says library references you will be able to see this page which says python standard library and then when you scroll down here you will be able to see the introduction about python and the second section here is about builtin functions so i'm going to click on this builtin function link and here you will be able to see all the builtin functions in python so this is the list of all the builtin functions which you can use in python and if you want to know more about these functions for example i want to know what this max function does i can click on this function and then you can get the help about this function so what this function does and how it can be used in python all the information is given here now let's go to the terminal and let's see how we can use some of these builtin functions so first of all how you can list out all these builtin functions and types in python there is a builtin function to list out all the builtin functions and types which is dir and then double underscore and then you write build ins and then once again double underscore and then close the parenthesis and then press enter and it's going to give you the list of all the builtins available in python so for example from this list we have already used this function called float print and then we have already used this function int and input also so let's use some more functions so in the previous videos i have shown you how to calculate the power of a number so you use these double asterisks in order to calculate the power of any number and you can see you get the power of 2 to the power 10. now python also have a builtin function called pow here you can give as a first argument the number and as the second argument you can provide the number which you want to use as a power and when i press enter it gives me the same result let's use some other built in function for example l e n l e n you can use to find out the length of any string so i can write l e n and inside the parenthesis i can just write any string here for example hello and it will give me the length of the string so this string hello have five letters inside it that's why it's giving me length five now there is a builtin function called help using which you can get some help about any function so i can write help here and inside the parenthesis i can just write the function name so for example i want to know what this max function does so i can just write max here and then press enter so it gives me the signature of max so how it's used and then it will provide me some description about the function so what it does so you can see here it returns the biggest item right so i can just write max here and inside the parenthesis i can give the list of items here for example 1 2 8 9 4 and 5 and when i press enter it's going to give me the maximum value out of this list so you can use this help builtin function in order to know more about all the other builtin functions now till now we have talked about the builtin functions which are available in python now let's talk about some of the builtin modules which are available in python now what is a module i'm going to describe in the later videos but for now let's see how to import a builtin module in python and how to use them so there is a builtin module called math and to import it you just use a keyword called import and then the module name for example math and press enter and it's going to import this module into our interpreter now you can use this math keyword and then you can write dot and wait for some seconds and you can see it gives me all the list which are available inside this math module so let's say i want to find out the square root of any number i can use a function called sqrt here and then this gives me the square root of a number so for example i want to find out the square root of 100 and then press enter it gives me the answer 10. now once again as i said you can use a builtin function called help in order to know the signature of this function so i can just write math dot sq rt and then press enter and it's going to give me some help about this function so you can see it returns the square root of x and the signature looks like this now if you want to print all the methods and types available inside this builtin module you can once again use this builtin function dir and then in the parenthesis write the name of the module so this time we will write math here and then press enter and it gives me the list of all the available functions available inside this math module and you can see all these functions which are available inside this module so you can just use a cos function from here pi function from here radians or tan function from here so this is how you can use builtin functions and modules in python in this video i'm going to show you how you can write your first python script in the form of dot py file and execute it but not just by idle but i'm going to show you various different ways you can execute this python file which you will create so let's get started so first of all i'm going to show you how you can create your python file using idle so first of all open your idle ide and just go to file here and you will be able to see this option here which says new file and then you will be able to see this kind of window opens which is a python file editor now first of all we are going to save this file so let's save this file you can save this file at any directory or any path wherever you want so for this first file i'm going to name it as hello dot py so dot p y is the python extension and hello is the name of our file so i'm going to save this file first of all and you can see it's saved at my desired location so in this file let's write some python code so let's say i want to create a program in which i will ask the user to input three numbers and as the output i want the maximum out of these three numbers which is inputted by the user so how can i do this so as we have already seen you can define a variable in python like this so i'm going to define a variable x is equal to and we also know that there is a inbuilt function in python called input to take the user input and then in the double quotes so we are going to ask the user that he needs to enter the first number so enter first number and in a similar way i am going to ask the user to enter the second number and the third number let me change the variable name here so instead of x this variable will be y and the last variable will be z and this is the third number and this is the second number but when i write the input like this this may give us some problem the problem is input function gives us a string and we need to convert the string into a integer or a float so let's convert this number into a float value so you can use another inbuilt function which is float and then this string will be converted to float so i'm going to do the same for other two numbers now in order to get the maximum numbers out of these three numbers we have seen there is a inbuilt function in python which is called max and we are going to use this max function but first of all we need to print something so we will just write the max value is and then we can calculate the maximum value and print it from here so we can use this comma and then we can use this inbuilt function which is max and then we will just pass these three values which is x y and z so will this program work let's see so first of all before doing anything you need to once again save this file okay so right now you can see there is a little asterisk symbol here in front of my file which means my file is not saved so you need to first of all save your file and then you will see this asterisk is gone that means our file is saved so let's run our code so if you want to run this python file using your idle ide you just need to click on the run button here and then choose the third option which says run module so i'm going to click on run module and after some time you will be able to see this output printed on the idle ide so it says enter the first number which we have written in our code you can see this line is executed first of all so we will enter some number i'm going to just write 50 here and then press enter and then it asks us to provide the second number so let's say this number is 90 and now we need to give the third number so i'm going to just give 1 0 1 here and then press enter and it says the max value is 1 0 1 which is correct but in real world you will not have this idle ide installed everywhere so how can i run my hello dot py file so i'm going to minimize this idle ide for now and i'm going to go to the location where i have saved this hello dot py file okay so just go to the location where you have saved your hello dot py file and now you just need to double click on this hello dot py file so i'm going to just double click on this hello dot py file and you can see as soon as i double click on hello dot py it opens this program in our terminal okay so once again i'm going to close this terminal and i'm going to double click on my hello dot py file and it opens our program in our terminal so once again i'm going to give three inputs here let's say one one zero enter 55 enter 200 and enter as soon as you press enter this window disappears so why this window disappears because after the execution of your program this terminal immediately closes so we need to provide something in our program in order to avoid the closing of this terminal and how we can do this we can do this using our input method which is a inbuilt method right and here we can just type press any key to exit so what will happen here is after printing the result your terminal will wait for the user input and once the input is given by the user then only the terminal will exit so let's test our program once again but before this don't forget to save this program so i'm going to just save my program and then i'm going to open the folder where i have saved this hello dot py file and once again i'm going to double click on this hello dot py and i'm going to give three numbers here and then i'm going to press enter and it prints 99 which is the maximum out of three numbers and at last it asks us to press any key so i'm going to press any key for example z and then press enter and this terminal disappears so now the question is how does this python file is executed without compiling this file so the answer of this question i have already given in the introduction video and the answer is python is a interpreted language and not the compiled language so what happens in normal languages like java c plus plus c you have a source code and this source code you need to compile in order to convert this source code into an executable file for example you have a hello.java file you need to compile this java file in order to convert it into a hello dot class file which is a executable file and when you run this hello dot class file hello world or whatever program you have written will be executed now in the case of python because it's a interpreted file you just need to create this hello dot py file and you just need to run it you don't need to compile this file and that is the difference between interpreted languages like python and the compiled language like java c plus plus or c now there is one more way using which you can run your python file and that is by using your command prompt so i'm going to open my command prompt i'm going to right click on this windows icon and then i'm going to open this command prompt from here so make sure that this command prompt is able to understand this python command so first of all type python on your command prompt and then press enter and if it shows you this output like python and the version of python then python is working on your command prompt so this command prompt is windows command prompt and not the python shell which we have installed so this is our windows command prompt right now let me make this terminal little bit bigger so we will be able to see what i'm typing so i'm going to change the font size to let's say 24 here so now we will be able to see what's happening you can just write quit and then these two parentheses and then press enter and you will come out of this command prompt so you need to come out of your command prompt in order to execute your python file now in here what you need to do is you need to copy the path of your python file so i'm going to right click here and then go to the properties and then in the securities i'm going to just copy full path of this python file up to dot python okay so i have copied full path of this python file and now what i need to do is i need to just write python here okay so just write python and then paste the path which you have copied so i'm going to just paste the path which i have copied and then press enter and you can see our program is executed so i'm going to just give quickly three numbers and it gives us the maximum of these three numbers now i will just type any letter here and then press enter and i will come out of this terminal there is one more way of executing your file and this is you need to just give this command which is cd and then your directory path so up to your directory you just need to copy this path from here okay so you just need to copy this path and then after cd you just need to give space and then paste this path without your hello dot py file okay so i haven't given the hello dot py file name here and now press enter which will change your directory to your python directory so now we are inside our python directory from here you can directly give python and the name of your file which is hello dot py and then press enter and once again the program opens so we can just give three inputs here and the result is shown once again i'm going to just type any key or any letter here with for example r and then press enter and now i'm out of this program so this is how you can run your python script on any terminal you don't need any ide or any other special software in order to run your python script you can run it on your terminal or directly click on the python file till now we have been using idle ide in order to develop our python code now the reason behind why i was showing to code in python using idle in the first few videos because i wanted that you get familiar first with python interpreter so now whenever you want to test some functionality in python you don't need to open any ide or any editor you can just open your terminal and then test that functionality until you wanted to test something terminal or python interpreter was okay but when you want to develop a big project using python we need to use some kind of ide ide stands for integrated development environment in order to develop such kind of projects so in this video i'm going to show you how to install pycharm on your windows 10 operating system which is the most popular ide today used by developers to develop python code so let's get started and let's see how we can install pycharm on our windows 10 operating system so open your favorite browser and search for pycharm and the first link which will appear here will be from jetbrains.com forward slash pycharm so jetbrains is the company behind this ide and this company which is jetbrains is famous for making very good ides so jetbrains has also created some other ides like android studio intellij idea webstorm and many other ides which are popular between developers nowadays so we are going to just click on this link so now we are inside this jetbrains.com website and here you will be able to see this logo pie charm and you will be able to see this download button here so i'm going to click on this button which says download now and then you will be redirected to this page which is for downloading pycharm so here you can select your platform whether you are working on windows or mac or linux and what we want to download is we want to download the community version of pycharm this community version you can see is free and open source so you can download and install it with no cost if you want to download the professional version then you need to pay some money to jetbrains in order to use it and as soon as you click on download button this download of pycharm community version dot exe file will start so i will wait for this file to be downloaded so now this exe file is downloaded on my windows operating system so i'm going to double click on this exe file and i'm going to minimize the browser and now you can see pycharm setup wizard has been started so here you just need to click next and this is the location where pycharm will be installed on your system so it will be installed inside your c directory then program files jet brains and then there will be a directory created which will be called pycharm community edition whatever version you have downloaded so i'm going to click next now on this next window you will see two options one is to create a shortcut so we are going to choose this option which says 64bit launcher now the second option here is create associations and i'm not going to check this checkbox because i don't want that on my computer every dot py file to be associated with the pycharm so i will leave this unchecked and the next option here is download and install the jre x 86 by jetbrains there is no harm in this so i'm going to check this box and i'm going to click next and now i'm going to click on the install button so this is going to start installing pycharm on my windows 10 operating system so i need to wait for some time until this installation is finished so now the installation of pycharm community edition is finished on my windows 10 operating system and you can also see there is a pycharm shortcut which is created on my desktop now i will check this checkbox which will start the pycharm ide and i'm going to click finish which is going to launch the pi charm ide now for the first time when pycharm starts it will ask you this question whether you want to import any settings from the previous installation of pycharm we don't have any previously installed pycharm so we are going to just leave this as default which says do not import setting and then click ok and then you will see this license terms and conditions window if you agree with all these license terms and conditions then just click accept and one more window appears here which is for data sharing so i'm going to just say don't send and now you can see pycharm ide has been launched so for the first time it will ask you which ui theme you want to use you want to use the darcula which is the dark theme or the intellij theme which is the light theme so i'm going to choose this light theme which is intellij theme and then i'm going to just click on next and on this next window you will see some featured plugin so for now i'm not going to install any of the plugin i'm going to just say start using pycharm which is going to start the pycharm so now pycharm ide has been started so let's create a new project here so i'm going to click on new project and now we need to give the title of this project and pycharm will ask you where you want to save this project so i'm going to just give the name to my project so let's name our project as hello world and then i'm going to just click on create button which is going to create our python project so now you can see pycharm ide has been started so you can see the first thing you will see here is tip of the day i'm going to just close this tip of the day and i'm going to maximize my ide window and you can see our project is shown on the left hand side so let's create a python file and we are going to just run some code using this python file so we need to just right click on our project and then click on new and then choose a python file from here and now we just need to give the name to our python file for example hello without any extension so you don't need to provide any extension when you choose this option which says python file and now click ok and now you can see on the left hand side that this file is created which is hello dot py this dot py extension is added by pi charm for us and now on this editor for example let's print hello world once again so i'm going to just print the hello world you already know how to print hello world right and once you have written your code you just need to save your code by pressing ctrl s and now you can just right click on your file and choose this option which says run hello so i'm going to just click on this option which says run hello and you can see this output is printed on this run window so this is how you can install pycharm on your windows 10 operating system in this video we will talk about using strings in python but before that i want to show you something and that is how to comment your code in python or how to write a comment in python so for example i have this line of code which is used to print hello world on terminal now for some reason i don't want to execute this line of code then i can convert this statement into a comment and how do i do this you can just add an asterisk in front of your code and this makes your statement a comment a comment means that now this line of code will not be executed by python so let's run our code and let's see what happens so you can see now it doesn't print hello world because now this is a comment now generally we use comments in order to provide some information about some functionality or what we'd want to do with our code so let me remove this line and because it's a python strings video we can just write after this hash symbol python strings right and this means that this is a comment and this line will not be executed by the python interpreter now there is one more way of giving a comment in python which is by writing the double quotes three times and this is also a comment so when you write for example python strings this is also a comment so this will also not be executed by python interpreter so what is the difference between this hash comment and the comment with these three double quotes so it turns out that using these double quotes you can write multiple line comments so for example i want to write a multiple line comment let's say i want to write python string tutorial i can write this multiple line comment using these triple double quotes so let's get started and let's see how we can use strings in python so i'm going to declare a variable and this variable i'm going to assign hello world here right and to print this hello world we can just write print and inside the parenthesis we can use this x variable and when we run the code it runs so we already know how to use this kind of string in python the second way of creating a string is you can use the single quotes instead of double quotes and this is also a valid string so this will also work so let me just print this also which is hello world using single quotes and when i am going to run this it's going to give me the result let me remove this spaces between the print and these parentheses so let's say you want to add a single quote into this hello world string so let's say i want to just write hello single quote s hellos world so this is totally possible in python so whenever you surround your string using double quotes you can just add the single quote without any problem but when you do the same with this string this will give you a problem because now python thinks that your string starts from here and ends at this place just after hello and this will be seen as some kind of garbage by python so in order to use these single quotes inside the string which uses single code you use a escape character and the escape character in python is backslash okay so when you add a backslash in front of a character python interpreter knows that it's a escape character so this will be treated as a valid string so let me just print the result and you can see it prints the same result now now let's say i want to use a double quote in this string which uses double quote already so i'm going to just give a double quote here and the same problem arises which we have seen in the string with single quote so to escape this you can also use backslash and the problem will be gone let's run the program and it gives us this hello world with double quotes so you can print this double quote using this escape character which is backslash now let's say you want to print a string with a backslash itself so i can add a backslash here and i want to add a backslash here and let's save the code and let's run it and let's see if it runs or not so it turns out that you can use this kind of notation in python also when you use double backslashes here and here let's see what happens so when we run the code it will give us the same result because one backslash is a escape character and other backslash is the part of the string so it will print the same result so you can use this for escaping this character or you can remove this the result will be same so now let me edit these two strings and i'm going to use hello here with the capital h and i'm also going to assign hello to the y variable with a small edge here now python provides us some inbuilt functions which you can use with strings so this is a string right so you can use some methods related to strings on the x and y variable so let's see what are these methods so after the x i can just press dot and you can see so many suggestions is given to us by pi charm and this is called intellisense which is provided by pi charm to us and intellisense means that whenever you type something pycharm will try to suggest you some supporting code for whatever you are typing so let's use some method which are suggested to us so i'm going to use this capitalize method so let's use this capitalize method with the x and y variable and let's see what happens so i'm going to run the code and you can see now the upper string is printed same but the lower string is printed with a capital h in front of it so this capitalize method capitalizes the first letter of the string now let's see what are some of the other method which we can use so there is a method called upper and also there is a method called dot lower so let me just rewrite this hello in all capitals and let's run the code now and you can see in the result the upper method has converted our string into all upper letters and the lower method has converted our string into all lower letters now in python everything is an object so using these square bracket you can extract each and every letter based upon their index so for example i write index 0 here and in the y i am going to use the same square bracket and i am going to write 1 here which is the index 1 and let me run the code and it prints the first character of the string because it's at index zero and here you can see the second character of the string which is at index one so always remember indexes starts from zero not from one now in python you can also get the sub string out of a string so here inside these square brackets i can just write that i want a substring out of this complete string first three letters of this string so i can just start from zero and i can just say i just want to stop at three that means we will get i think the first three character of the string also let me add some spaces into the second string here and in python there is a method called strip so i'm going to just use this trip method and let's run the code first of all and let's see what happens so you can see first of all this print has printed first tree letter of this string so you can see this notation means that we are telling python to give a substring starting from 0 until 2 until the index 2 okay and we are saying that we want to stop at index 2 that's why we write 3 here now if you want to just print hell we can write here 0 to 4 and then we can run the code and then we get hell if you want to get only e l l you can write 1 to 4 here and then it will give you e l l out of this string and this is how you can strip your string so strip means the spaces from the start and end will be stripped off this string now let me show some other method related to the strings so first method i want to show here is there is a method called is lower and then there is a method called is upper and then there is a method called dot replace which is used to replace some character inside the string so let's say i want to replace capital h by let's say j and the last method i want to show is how to split the string but that we will see in a moment so let's run this code and the first result says false because this string is not lower when we write all letters in lowercase then only it will give us true otherwise this method is lower will give us false now let's rerun the code and now it gives us true because now every letter in the string is lower second method gave us true because we were checking whether every letter in this string is capital or not the next method replace is used to replace the character if it's there in your string and replace it with this character if this character is found in your string so this capital h is not present in our string right so let's just add this capital h into our string and let's see what's the result so now the capital h is replaced by capital j here in the result the next method which you can use with the string is a split method so you can write y dot split and this is used to split your string using any character so i'm going to once again write hello comma world here and i want to split this string using this character which is comma so i can just write using single quote these comma and once i run the code you can see it gives us an array of two members one is hello and other is world with a space right because we have splitted our string using this character that's why the space is here right so that's why you can see this space here also in the second element of this array so there are number of methods which are associated with string which you can use and for knowing all these method you just need to write your variable which contains a string and then just write dot and you will be able to see the suggestions which you can use with the strings so you can use the title method for example or you can use the translate method or you can use all these method which are available here okay so just see all these suggestions and see what you can use from these method also if you don't have any variable in which you have assigned your string you can directly take your string for example hello and then you can just write dot after this hello and once again you will see all these suggestions because this hello is also a string let me show you one last thing which you can use with string very quickly so you can write print here and then if you want to print this hello for example 10 times how will you do this so you can just write for example x comma x comma x this is how you can do this let's say you want to print this hello hundred times how you can do this so there is a trick in python which you can use and this is using these asterisks you can print the string multiple times so for example i want to print this hello 10 times i can just write my string variable name asterix the number of time i want to iterate this string so let me run the code and you can see now this hello is printed 10 times let me provide the space here so there will be a space between the two hellos right let us say i want to print hello hundred times then i can just write hundred here and then run the code and it will print this hello hundred times on the terminal so this is how you can use strings in python in this video we will talk about the boolean values comparison operators and the logical operators in python so first of all what is a boolean value so in python boolean values are two constant objects which are true and false now for this demonstration i will be using a python interpreter and in pycharm you can open the python interpreter by going down at the bottom and you will be able to see this option which says python console so just click on this python console option which is going to open the python console and you can move this bar up and down in order to expand your console right so let me just clear this console so we will start from the top so in order to clear this console you can right click and then just say clear all and it's going to clear the console and let me resize this console up to the top and let me just minimize this section also so as i said boolean in python are two constants objects which are true and false so how you write true and false in python you write true with a capital t and press enter this is a true value and false you write with a capital false this is a false value now if you write true with small t this is not recognized by python also when you write false with small f this is also not recognized by python now generally we use boolean values in order to find out the result of some condition now let's say you have two numbers and you want to find out which number is greater out of these two numbers you can use a comparison operator to compare these two numbers and the result will be shown as a boolean value now the next question arises what is a comparison operator so in python these are some of the comparison operators you can use so you can use this double equals to check the equality between two values you have this not equal operator with this exclamation mark and equals which you can use to check the nonequality between two values there is a greater than operator and there is a less than operator and also there is a greater than equals operator and the less than equals operator now examples of each of these operators i have given here so how to use these operators as i said if you have two values let's say two integers x and y to compare these two integers whether they are equal or not you write on the left hand side first variable and on the left hand side second variable and in between you use the comparison operator it can be equal to operator or nonequality operator or greater than or less than or greater than equals or less than equals operator so let's see how we can use these operators in real python environment so let's say i want to check whether 10 is greater than 9 or not and when i press enter it's going to give me true because 10 is greater than 9. now once again let's check if 10 is less than 9 or not and it will give me a false value which is also a boolean result also we can check equality between two values so we can just write hundred is equal to 100 or not and it will give us true once again we can check if 100 is equal to 99 it will give us false in a same way you can also check for the nonequality so for nonequality you use this exclamation mark equals and then press enter it will say true because 100 is not equal to 99 the same operation you can also perform with some variable so let's say i have a variable called x whose value is 20 and i have a variable called y and i assign 30 to it and let's say i want to check whether the value in the x is greater than or equal to the value which is there in y then i can write this kind of a statement and when i press enter it's going to give me false because 30 is not greater than or equal to x so let's assign a value which is 30 into our variable x and now let's check whether x and now let's check whether x is less than or equal to y or not and when i press enter it's going to give me true because we know that x which is 30 is not less than y but it's equal to y and this condition is true now you can also compare two strings using these operators so let's say i have a string called hello and i want to check whether the hello value is equal to some other value for example hello in double quotes or not and it will return me true that means whether you write hello in single quote or hello in double quote both these values are same in python now also we have seen in the last video where we have seen how to use strings that whenever for example i write a string i can use this dot operator in order to call some functions related to strings so some of these functions returns a boolean value so for example we can check whether this hello all letters are in uppercase or not and once i press enter it says false or i can check whether in this hello all letters are in lowercase or not this will give me true or i can test whether in this hello string all letters are alphabet or not this is going to give me true because all letters are alphabets now if i check whether in the string whether there is a alpha numeric value or not i can use this method which says is al num and this will check whether in my string there is a alphanumeric value or not now the next question you may ask is for example i want to evaluate two conditions at the same time let's say i want to evaluate whether 10 is greater than 9 and i want to evaluate whether 20 is less than 15 or not so how can i evaluate these two conditions at the same time so for those type of comparison we use that logical operators and there are three logical operators which we can use in python an end operator an or operator and a not operator so this and operator you can use to evaluate two conditions and it will return true only if both conditions are true okay so let's say you have two conditions x condition and y condition then if you use this and operator then in order to get true out of these two conditions both conditions have to be true in the case of r it will return true if one of these conditions is true so whether x is true or y is true it doesn't matter but if only one condition is true this will give us true value and the not operator will return the opposite of what we have so if some condition returns us true then when we use not operator then not operator will make this false so let's try all these three operators in python so i said i can use an end operator to check whether this value is true as well as this value is true or not so when i press enter it returns us false because even though the first condition is true which is 10 is greater than 9 but the second condition is not true right so in case of end both condition should be true in order to get the true result once again when i use the same conditions and instead of end i use the or operator it will return me true because one of these conditions is true which is 10 is greater than 9 even though the other condition is false now let's say we make both conditions true and we use r and when we press enter it's going to still returns us true so the minimum requirement of or is there should be at least one condition which evaluates to true now let's see how we can use the not operator so i can write not and then i can check whether 10 is greater than 9 or not and when i press enter it returns us false because we know that 10 is greater than 9 and not makes it false so it returns us false once again if we check whether 10 is less than 9 or not it's going to return us true because 10 is not less than 9 and this condition will return false and not will make it opposite which is true so in this way you can use boolean values comparison operators and logical operators in python in this video we will learn how to use if else statements in python so first of all what is a if statement so a if statement is used to execute a statement or a block of code if and only if a condition is fulfilled so first of all let's see the syntax of if statement so let's say i declare a variable called x whose value is 100 and then i'm going to check whether the value in x is equal to 100 or not so i can use this keyword if and then if you have seen the last video in which i have shown you how to use comparison operators and logical operators then you will know that for equality we use a double equal symbol and then i'm going to just check it against hundred now after the condition you need to give this colon in order to tell python that this condition is finished and you need to press enter and you will see that there is a indent given to our code and you can see this cursor is here which is four spaces away from this start or one tab away from the start and here i can just for example print the value of x so i can just say x is equal to and then after the comma x and let me save this code and run this code and you can see on the run window here x is equal to 100 is printed because this condition which we are checking using the if statement is true which means whatever code or statement or block of code you will write under if it will be printed let's say this condition is not fulfilled so i'm going to just say that x is not equal to 100 which is a false condition and when i run the code now it doesn't print anything because this condition is not fulfilled and that's why this statement is not executed now let's talk about the indentation little bit so indentation in python is the way of marking a block of code so you can see i have given four spaces indentation here so one two three four or if you are using pie charm when you press enter after an if condition you will see that automatically this cursor is pointing here which is four spaces away from the starting point so this means that whatever you write after these four spaces or a tab is the part of this if statement now if you are familiar with c or c plus plus this indent acts like a curly bracket in c or c plus plus so in python you don't use the curly bracket to define a block of code you use indentation to define a block of code so i can write this statement like this also so i'm going to just say x is equal to and in the next line i can just give one more print function and i will print x from the next line and you can see here also i have given indentation after this starting point and this means that these two lines are the part of this if statement so let me change the value of x is equal to 99 and when i run the code it will print x is equal to and in the next line it prints 99 using this line of code so you may ask what happens when i will write this print function here and let's say we want to print finish here okay and let me run the code and let's see what happens so it prints finish now let me just change this condition and i'm going to just say 100 here and let's see what happens now so now only finish is printed because this line of code is not the part of if condition only statement which you write after four spaces will be the part of the if condition like this line and this line of code but if you don't give any indentation here that means that this line of code is not the part of the if statement now let's take another scenario and this time i want to check whether the value of x is a positive value or a negative value so i will start from here and i will give one more if statement here and i will just check whether x is greater than 0 or not and then give this colon to indicate python that i have finished this condition and then if it's greater than 0 then i'm going to print that x is positive now if x is not positive and if it has a negative value i need to somehow print that x is a negative value and for this you use a else statement so here you can write else and once again you need to give the colon here and then under this else statement once again you provide four spaces or a tab indent and you can once again write print and this time we can write x is negative this means whenever this condition is false and if and only if this condition is false then only the else part will be executed so whatever code or block of code you write under else that will be executed if and only if the condition here is false so seeing the value of x which is 100 which is obviously greater than 0 it's going to print that x is a positive value now when i change the value of x is equal to minus 100 here and once again i execute the code first of all it prints that x is minus 100 here because first of all this condition is checked and obviously minus 100 is not equal to 100 so this condition is true so these two lines of code are executed because this condition is true and here because this condition is false that's why this statement is not printed and the execution of code goes to the else condition and then this line of code will be executed which is x is negative and you can see here and this line of code is independent of both these if statements and that's why it will be printed always now as we have seen from our last video that we can provide multiple conditions using a logical operators so we can here also write that if x is not equal to 100 or if the value of x is less than 0 let's write here x is less than 0 then only we want to print this statement so once again when we run the code in this case both the conditions are true that's why this is printed if we write here that x should be greater than zero then also this will be executed because one of the condition is true and because in the case of r we only need to satisfy one condition out of multiple conditions in the case of end when i write end here and run the code now you can see this is not executed because one condition is true here and other is false and in the case of end we need to satisfy both the conditions and then only these two statements will be executed or this block of code will be executed so this is how you can use if else statements in python now in this video i'm going to show you how to use lf statement with if else statements and how to use nested if statements in python so let's get started so what i'm going to do is i'm going to declare a variable and i'm going to ask the user to enter some name so i'm going to just write enter a name here and when the user enters this name i want to compare this name with some predefined names so in the last video we have already seen how to use if statement so i can just write name is equal to and i can compare it with some name so let's compare it with a name called max here and i will give this colon here and once the name matches uh this name i'm going to print a name so i'm going to just write name entered is and whatever the name provided by the user so i will just use this name variable here this we have already seen in the last video now in python you can also use a l if statement and the signature of ls if statement is you can just write lf here and then you can provide some other condition which returns boolean so i can once again here write if the name matches some other name for example leo and once again i'm going to just print the name entered by the user and this lf condition i can use any number of time after the if let me match this name to some other different names for example roy and the last name will be ali so if the name matches max this statement will be executed if the name matches leo this statement will be executed if the name matches roy this statement will be executed and if the name matches ali this statement will be executed now if the name entered by the user does not matches any of these names then we can use a else statement so we can just write else here and we can just print a message here so the name entered is invalid so this message will be printed when the name entered by the user does not match any of the name i am checking here so let's run the code and let's see what happens so now my code is running and i'm going to give the name a max here for example and then press enter and it prints this message which says the name entered is max using this statement now once again when i run the program and this name matches let's say some other name ali and then when i press enter it prints the name entered is ali which means this statement is executed and let me run the program once again and when i give some random string here it prints the name entered is invalid now let's say the name entered by the user is max and this condition evaluates to true then this statement will be executed and the other conditions which we have given using lf statement will not be evaluated so let's say we will write max here also so this condition and this condition is same right checking for the same name and when i run the program and when i write max here only one statement is printed which is this one so we can see when this condition returns true only one statement is executed and none of the other conditions are even evaluated now the important thing to note here is you cannot start with a l if statement you need to start with the if statement so you need to write a if statement and check the condition first and then only you will be able to write l if condition now it's possible to use multiple if condition and then this lf will become the part of this if condition and this will be the separate if condition so when i run the code once again and when i write max here it's going to print two statements one is using this and other is using this because this if condition and this if condition are two different if conditions and once you use l if so i'm going to use alif here then this alif is the part of this if condition so this is how you can use if statement with lf statement and else statement now let's see how to use the nested if statement so i'm going to declare a variable called x and the value i will assign to x is 10 and then i'm going to write an if condition and here i'm going to just evaluate where the x is less than 0 and when x is less than 0 i'm going to just print that x is negative else if the value is not less than zero so i'm going to just write else then i'm going to just print x is positive now let's say i also want to evaluate if the x value is a even number or an odd number if the x value is positive so under the else i can once again write if and then we can just evaluate this condition that if x modulo 2 is equal to 0 which means that when x modulo 2 returns a 0 that means it's a even number so we can print x is even otherwise in the else condition i can just write else x is odd so in this if condition i'm checking if the value of x is less than 0 or not and if this condition is not satisfied then i'm checking whether x is up even number or x is an odd number so if you remember indentation here is very important so this if condition falls under the else condition right so this if condition and this else is the part of the else statement so because we have provided this four space indent here whatever code you write with this indent is a block of code and what we are essentially doing here is we are nesting one if else condition inside the other if else condition you can also reverse this condition checking and you can also say if x is greater than or equal to zero then the value of x is positive otherwise the value of x is negative and this statement you can write under the if condition also and this is also our nested if else statement and let me run this program and you can see x is a positive value because x is equal to 10 and x is a even value so once this condition is true this statement will be printed and whatever if condition is there inside the parent if statement that will also be executed and this condition is checked first of all and obviously this condition is true in this case when x is equal to 10 because when you do x modulo 2 it's going to give us the remainder 0 and that's why x is a even value and that's why it's printing x is even here so it's totally possible to use one if else statement inside the other if else statement and this type of if else statement are called nested if else statement in this video i'm going to show you how to use lists in python so first of all what are lists so list in python is a kind of collection which allows us to put many values in a single variable you can also say that list is an ordered set of values so let's define a list so i'm going to just say x is equal to and you can define a list inside these square brackets and inside the list you provide some values so for example i'm going to provide the values 3 comma 5 comma 4 comma 9 comma 7 comma 10. so this is how you can create a list in python and when i press enter it's going to create a list and when i just use x to get the list it's going to provide me all the values in the list now these values which are inside the list are called elements so 3 is an element or 5 is an element or all these values in this list are all called elements and all these elements are ordered by their index now index as i already said in the previous videos also always starts from zero so we can fetch the value which is at index 0 using this square bracket once again with the variable name and then when i write index 0 it's going to give me the element which is saved at index 0. so looking at this list 3 is at index 0 5 is at index 1 4 is at index 2 and so on so let's say i want to get the value which is at index 4 0 1 2 3 4 so i'm going to just write x square bracket 4 and it is going to give me 7 which is saved at index 4. now it's not necessary that list must contain all the same data type elements so for example i can also declare a variable called y and in this i can save some name for example max i can save integer let's say 1 i can save a decimal value let's say 15.5 i can save other list inside this list using these square brackets for example three comma two so one list can contain different type of data types with any number of elements so when i press enter and this time i want to get the value which is at index zero it's going to give me max and once i want to get the value which is saved at index 3 then it's going to give me this list which i have saved at index 3. now when you try to access the index which is not there so i'm going to just write y and then i'm going to say hundred and this value is not present in this list at this index so i'm going to press enter and it's going to give me the error which says list index out of range now if you want to get the length of the list you can use the inbuilt function in python which is len and then your list name so for example i want to find out the length of list x it's going to give me 6 it's going to give me 6 because you can see here this list contains 6 elements or i want to get the length of the second list which is y and it's going to give us four because this list contain four elements now it's also possible to insert and remove elements from the list so for example i'm going to use x which has six element till now and i'm going to insert the seventh element so i can use a method called insert and you can see this method takes an index and the object name so i'm going to choose this and the index at which i want to insert the value is at index 2 and the value i want to insert is some string for example tom and i'm going to press enter and i'm going to print the values inside the x list then you can see now this list has 7 elements and tom is inserted at the index 2 because we have inserted this value at the index 2. in a similar way you can remove something from a list also so to remove something you can use your variable name for example x dot remove and the value you want to remove so for example once again i want to remove this name which i have inserted at index 2 and once again when i print the value of x it's going to give me these values now let's say the list contains two element which are exactly the same so i am going to insert one more element at index 1 and this element will be 3 for example and now my list contain double 3 here and if i want to remove this 3 so i am going to just call this remove function once again and i will say three here and then press enter you can see only one three is removed from this list so you can see these three are at index zero and index one so this value is removed which is at index 0 and this will remain in this list so if a list contains duplicate values it's going to remove the value from the left and also remove is going to remove only one object which is found first in the list now if you try to remove the element which is not there in the list so i'm going to remove something which is not even there in this list then it's going to give us this error which says that this is a value error and it cannot remove this value from the list now there is one more function with the list which is a pop method and this we can use to remove the values from the last so you can see our list was previously having 6 elements and 10 was the last element and when you use this function which is pop it's going to pop this 10 from the list and now let's see the content of the list so now this list contain only five element and the last element is now removed once again when you use this pop method it's going to remove the seven and now our list only contains four elements now let's say you want to delete the whole list so i'm going to declare a list and this list will contain a few values and then i will press enter and you can see the values of list and now i can use a function called del and then the name of the list and this function is going to delete this list so i'm going to just press enter and then once again try to access the values inside this variable and now it says the name z is not defined because delete function has deleted this list now once again i'm going to create this list z and now there is a function called clear which is used to remove all the values from the list so i'm going to just press enter and then try to access the value of z and you can see this list is now empty because we have used the clear function which is used to empty the list let me show you a few more functions related to list so let's say i can use x and the values inside x are 3 5 4 9 and i can use a function called sort to sort all these integer values inside the list and once i press enter now now you can see all the values are sorted and you can see all the values are sorted in ascending order you can also use this method x dot reverse and it's going to reverse all the values so once i use the reverse function and then when i try to get all the values inside the list you can see all the values are now reversed there is also a function called append and here you can append anything to your list so i want to append 10 to my list and when i try to access this list you can see at last this 10 is appended in my list also if you want to copy one list into another you can use let's say i'm going to declare a variable called s here and i want to copy all the values from x list i can use x dot copy and this is going to copy all the content of my x list into this new variable called s so you can see all the values are copied into the variable s so let me append something into my list once again so i'm going to append the 10 once again and now my list looks like this and there is a function called count using which you can count the number of element which are there in the list so i want to find how many number of ten are there in the list is going to return me two and once again i want to count how many threes are there in the list it's going to return me one let's say i want to count how many hundreds are there in my list it's going to return 0. so this is how you can use lists in python you can also use the list name and then dot and see all the methods which are available related to list here and you can use these method which you see here in this video we are going to see how to use tuples in python so first of all what are tuples so tuples are very similar to lists that is they are used to store the collection of elements in a single variable but there is a very important difference between them and that difference is tuples are immutable immutable means once tuples are created they cannot be changed or the content in them cannot be changed so lets see how we can declare a tuple so i am going to declare a variable called x and i am going to assign some values to it now in case of list we have seen we used the square brackets in the case of tuples we use these parentheses in order to store the list of elements so i can just write 1 5 3 4 and 8 for example and then press enter and it's going to create a tuple now in order to print the tuple you can use x and it's going to print this tuple now as i said tuples are similar to lists in some ways and that means you can call a tuple element by a index in tuple so all the tuple elements are arranged by their index and when you want to for example get the first element here you give the index 0 and then press enter and it's going to give you the value which is saved at index 0. let's get the value which is saved at index 4 and am going to press enter and you can see it gives 8 which is saved at index 4. now when i try to give a index which is not there for example 100 it is going to give us error which says index error tuple index out of range now as i said tuples are immutable that is you cannot change the content of a tuple if they are initialized once so let's try to test this so i'm going to just assign the value at index 0 which is let's say 2 and i'm going to press enter and you can see it says type error tuple object does not support item assignment that is you cannot assign any other value to a tuple element if they are once initialized now that also means that you cannot use some of the functions which you used with lists in the tuples for example you cannot remove any element you cannot append any element you cannot change any element so for example when i write x here and then press dot you can see there are few methods which are available with the tuple and most important is this count method so let us try to use this count method and i want to know how many number of eight which are there in this tuple and it will give me 1 because 8 is only present once in this tuple if 8 is present twice in this tuple here you will see the result 2. now in order to get the length of the tuple you can use the in build function which is len and then the tuple name and then press enter and it's going to give you the length of the tuple now in the previous video i have told you that you can save multiple data type values in lists let's see if we can do the same with tuples or not so i am going to give the parenthesis i am going to give the first value as integer second value as a string third value as for example the decimal value and i am going to press enter and i am going to get the value of y and you can see its totally possible to save multiple data type values in our tuple so now i have declared two tuples one is x and other is y so let's print x and y once again very quickly and now what we want to do is we want to use a concatenation operators so as i said tuples are immutable but let me define a third tuple here and i want to add x tuple and y tuple here and i want to assign the value to z is it possible let's check so i am going to just once again see the contents in the z variable and you can see when you use this plus operator or concatenation operator it is going to join these two tuple and create a new tuple with the combination of the values of both these tuples now there is one interesting thing which you can do with a tuple which is you can declare a variable and let me define a tuple with only one element and i am going to just give hi here and then after this element i am going to provide comma here so this is important i have provided this comma and i haven't provided the second element in the tuple and i can use an asterisk here and i can use some value here so let's say i have provided five here and i'm going to press enter and then i am going to see the values inside this a variable and now you can see a high string is saved five times in a variable in the form of a tuple so you can once again get this value at index 2 for example and it is going to give you the value which is stored at index 2 which is high itself you can also use a inbuilt function called max here to get the maximum value out of a tuple so max and i have provided x tuple here and you will be able to see it will give us the maximum value stored in that tuple and you can see here 8 is the maximum value which is there inside the tuple we can also get the minimum value using min function and it's going to give you the minimum value which is stored inside the tuple and also you can use our del function to delete a tuple so let's say i want to delete this tuple which is z here so i can just write the name of the tuple after the e l and space and then press enter and now once again when i try to get the value of z it is going to give me error which says name z is not defined so in order to delete the tuple you can use that del function so this is how you can use tuples in python in this video we are going to learn how to use sets in python so first of all what are sets so a set is an unordered collection with no duplicate elements and no indexing so let's see how we can use sets in python so you can declare a variable and then is equal to and you define the elements in set in a curly bracket so you can define multiple values here for example 1 comma 2 comma 5 comma 4 comma 7 comma 9 but keep in mind that set cannot have duplicate values so each value in set must be a unique value so for example what happens when we define a set with some duplicate values so i'm going to just declare this set and press enter here and this set is created now whenever i try to access the values inside the set a then it's going to give me this set and you can see the 2 which was a duplicate which we have defined here is removed from this set so a set always have unique values and if you define a set with duplicate values it's going to remove the duplicate values and only save the unique values in the set so let's see some of the methods related to sets and the first method is as always l e n method and you can find the length of a set using this l e n method and the name of the set which returns the length of a set you can also use a add function so a dot add to add a element in a set so i want to add 10 for example into my set i can use this and then press enter and once again when i try to get the values inside the set a you can see 10 is added to this set but this 10 will only be added if it's already not there in the set if it's already there in the set nothing will happen so let's try to add once again 10 to this set which already have a set and once again you will see that nothing happens inside the set because 10 was already there now if you want to add multiple values in a set you can use a update method so you can call this method which is update and then inside the curly brackets you need to provide these multiple values so let's add some values into this set so i'm going to add 15 18 17 let's say and 14 okay and then press enter and now i will see the values inside the set and you can see all these values are added to the set you can also remove the values from the set so i can use a method called remove and let's say i want to remove 18 from the set i can just give the element and then press enter and once again i will try to access the set and you can see 18 is removed from this set now there is a method called discard also so let's see how we can use this method discard works similar to remove method so for example i want to remove this 17 from my set i can write 17 here and it works fine right so when i try to access the value of a 17 is removed so what is the difference between a discard method and a remove method so our remove method whenever you use a remove method and you try to remove an element which is not there in the set for example i will try to remove 100 which is not there in the set it's going to throw an exception and it says key error 100. now if you try to do the same thing using a discard method so i'm going to use a dot discard here and try to discard 100 from the set which is not there in the set it's not going to give me any error and that's the difference between this card and remove so remove throws an error when a element is not there but this card doesn't throw any error it's not going to do anything if the value is not there in the set now there is a pop method also you can use with uh set so i'm i can use this pop method and then press enter and what it's going to do is it's going to remove any random element from your set so it's not necessary that is going to remove the element from the left hand side or the right hand side it will remove any random element from the set also for example i will declare a set of names let's say and if you want to clear the set you can use a clear method so i can use this clear method in order to empty this set so now when i try to access the values inside the set you can see it's an empty set with no values if you want to delete a set you can use a del function and then the name of your set and then press enter and once you delete it when you try to access it it's going to give you an error that name is not defined now you can also create a set using a set constructor so instead of these curly brackets you can write set and in the double parenthesis so you need to provide the double parenthesis here in order to create a set using the set constructor so this is also going to create this set called name and when i try to access the values inside the set name you can see it has created this set of names also you can convert a list into a set so let me define a variable called z and then i can use a set constructor and inside these parentheses i can use the square brackets which we use generally with lists and then you can define your list here and then press enter and this list will be converted to a set and you can see the result here now similar to the mathematical set operations like union intersection difference symmetric difference you can also use these mathematical operations related to set on the python sets also so let's see how we can use this mathematical set operations on our python sets so let me once again define a set i have already one set which is a which contains these values for example and i will define a set b with some other set of values so i'm going to define a set with for example so that is the content of the set b okay so now i have two sets and on these two sets i want to perform some set operations which are also used in mathematics so you can find out the union of two sets using a operator called or okay so when i write a and this pipe symbol which is called r b it's going to give me the union of these two sets and what is the union so union of two sets contain all the elements that are there in the set a or in the set b so or here is important right so i'm going to press enter and you can see it's going to give me the union of a and b that means this set contains all the elements that are there in set a or in set b also i can use a method called union instead of this or operator so i can use a variable dot union there is a method called union and then you can write b here and then press enter which is going to give you the same answer okay so you can either use this union method or this or operator now let's see how we can find out the intersection between two sets so in order to find out the intersection you use a and this operator end and then your next set which is b here so what is an intersection of two sets so intersection of two sets contains all the elements that are there in both the set that means set a and set b okay so when i press enter you can see it gives me two elements inside the set and these two elements are there both in the a set and the b set that's why we get only two values because these two values are there in set a and set b also again you can use a method called intersection so a intersection and then b which is going to give me the same answer so either you can use this method or you can use this operator now let's find out the difference between two sets so what is a difference between two set a difference of two sets contains all the elements that are in a but not in b okay so you can find out the difference by this minus operator here so when you write a minus b you will be able to get the difference between these two sets and this result will contain all the elements that are in a but not in b you can also use b minus a and then is going to give you other result because this time it's going to give you a set which contains all the elements that are there in b and not in a so difference between set a minus b is totally different from b minus a and also you can use a difference method so a then you can call a difference method b and it's going to give you the same kind of answer you can see here and also you can call b dot difference a and it's going to give you the another answer of b minus a now you can also find out the symmetric difference between two sets and what is the symmetric difference between two sets a symmetric difference between two sets contains all the elements that are either in set a but not in set b or they are there in set b but not in set a so this is the symmetric difference and you can find out the symmetric difference using this cap symbol and then b so a cap b i don't know what is the exact name of this symbol you can find out by yourself and when you do this it's going to give you the symmetric difference between a and b and whenever you find out the symmetric difference then when you do for example b this cap symbol a it's going to give you the same answer because symmetric difference give you same answer whether you give a cap b or b cap a the answer will be always same also you can use a method symmetric difference so you can use this method called symmetric difference b and it's going to give you the same kind of result now one last thing i want to show here is sets are not indexed or ordered so whenever you want to find out for example a and the value at index 0 it's going to give you an error because there are no indexes in a set and they are not ordered by any index so sets are unordered collection of values now if you want to find out what all other methods you can use with sets you can create a set and then write the name of your set and then press dot here and you will be able to see this is the list of all the methods which you can use with the sets also if you want to list out all the methods which you can use with sets you can use this inbuilt function dir and then you can provide any set name here which is your variable name and then press enter and once again it's going to print the list of all the method which you can use with the sets so this is how you can use sets in python in this video i'm going to show you how to use dictionaries in python so first of all what are dictionaries so dictionaries in python are like associative lists or a map now you can think of dictionary as a list of pairs so let me show you how to define a dictionary so you can define any variable name and to define a dictionary first of all you use these curly brackets and inside these curly brackets you provide a list of key value pairs so let's provide the list of key value pairs so first key is name and the name is max the second key is for example age and the age of max is let's say 14 and we can also write here in which year he was born so we can just write here and he was born in 2000 for example and i'm going to press enter here and once again i'm going to just access the values inside this dictionary which is d and you can see our dictionary is created now so as i said dictionary is a list of key value pairs and all these values which you see here before this colon are called keys so name is a key here here is a key here and age is a key here and whatever values you see after the colon are called values so max is a value 2004 is a value and 14 is a value and you can access the values from a dictionary based upon their keys so for example i have this dictionary d i can use the square bracket and the key name for example i want to get the name value i can just give the name key here and then press enter and it's going to return me the associated value related to key name in the same way you can use other keys also for example age and i'm going to press enter and it's going to give me 14 which is the value so age is a key here and 14 is the value now what type of data types you can store in a dictionary so as key you can define any data type so let me define a new dictionary here and i'm going to give these curly brackets and as i said you can define a string value as key also you can define a number as a key for example 15 colon 15. let's try the float values so i'm going to just write 15.1 colon 15.1 this is also allowed in dictionary so you can use string values you can use integer values you can use decimal values as key and also let's try the boolean values so you can use the boolean values also as keys and you can use a tuple also as a key so i'm going to just give a tuple 2 comma 3 and then i'm going to assign a value of 5 to this key and as values also you can use string values or decimal values or integer values or boolean values or any kind of collection you can use as a value so i'm going to press enter here and now to access let's say we want to access the value for this key which is this tuple so i'm going to just enter this tuple inside these square brackets and it's going to return me 5 or i can just provide inside the square bracket true here and then press enter and it's going to return me the value which is associated with it which is true itself or i can just write here 15 it's going to return me 15 in turn because 15 is associated with this value which is also 15. now what happens when a key is not there and we try to access it so i'm going to just access hundred from this e dictionary it's going to give us error that this key is not present in the dictionary you can also use the len method to find out the number of items in the dictionary and you can see it says five items are there in the dictionary e and we can count this item so this is one item two item three item four item and the fifth item is here or in other words you can also say that ali and function is going to return you the number of key value pairs which are stored in a dictionary you can also use for example i'm going to use my d dictionary now and you can also use a method called get and then you can give the key name here in the parenthesis so let's say i want to get the value associated with the name key i can get it like this and it's going to give me the value associated with the name key you can also add a new key so this d dictionary you can see there are right now three key value pairs and i can add one more key value pair so to add a key value pair you need to just write d and in the square bracket you just need to give the name of the new key so i'm going to just write so name here which is the name of the new key in the dictionary d and then you need to give the value associated with that key so when i press enter and once again when i try to access the values inside the dictionary now you can see that surname is added to your dictionary now if you want to remove any key value pair from a list then you can use d dot pop method and then the name of the key which you want to remove let's say we want to remove the surname once again which we have added and you can just press enter and now you can just print the values inside d now you can see the surname key value pair is removed you can also use a clear function so let's see what's there in the e dictionary so these are the values inside e dictionary i can use e dot clear to clear the values inside the e dictionary so once again when i try to access e it will give me the empty dictionary also you can delete the dictionary using del function and the name of the dictionary and when i press enter and when i try to access this dictionary e once again it's going to say that this name is not defined you can also update the values in a dictionary so this is my dictionary and i want to update the name for example so i can use the dictionary name and then the key here for example name and the new name i want to associate with this key is let's say a new name here and when i try to access this dictionary once again you can see the name is changed you can also use a method called update to update this key value pair so once again i want to change the key value pair which is name so i can give this curly bracket and then give the key value pair which i want to change so name and the new name will be max once again and once again when i try to access the dictionary it will give me this dictionary and you can see the name is updated now now there is a function in dictionary called keys which is used to list out all the keys of that dictionary so you can see it will list out all the keys of the particular dictionary there is also a function called values which will list out all the values of that dictionary if you want to list out all the key value pairs you can use the function called items here and it will give you the key value pair list now the last function i want to show here is let me list out the content of the dictionary first of all so there is one more function which you can use here is which is pop item and you don't need to give any argument with this pop item when you press enter it's going to remove the last key value pair which you have added or updated so here we have updated this name key value pair that's why this is removed and now when you try to see the content of the dictionary this name key value pair is removed so this is how you can use dictionaries in python in this video we will talk about the slice function in python and also we will talk about how to use negative numbers with index in python so let's get started so first of all i'm going to declare a list so now we have three variables first is a list second is a tuple and third is a string now there is a function called slice which you can use with your list tuples and strings to slice something out of your collection so to use this slice i'm going to declare a variable and then i'm going to use this function which is slice and you can provide some parameters in the parenthesis here so the first parameter you can provide here is for example start the second parameter you can provide here is the end and the third parameter you can provide here is the step so let's say i want to get out of this list the numbers from 0 to 4 so as a first argument we can define our number 0 which is the first index and at the end index we can define 5 and then i'm going to press enter and once again i'm going to use my list variable and pass this x variable which contains the slice object which is returned by this function here and then press enter and you can see here it gives me the values from 0 to 4 so the first argument in the slice function is the index from where you want to start the next parameter is the index of the element before which you want to stop okay so if you want to stop at four you provide the index five if you want to stop at index five you will you will provide the stop value as six okay so it will be always one more than what you want now there is a short notation for achieving the same also and for that you can use your list and inside the square bracket you can provide the start value and the end value and then press enter and it's going to give you the answer but instead of comma i need to provide the colon here and then it will give me the answer okay so here you can use colon to give the start value and the end value and also an optional value which you can give as a third parameter which we will see in a moment okay so this is the short notation of creating slice in python so as i said this is the start value and this is the end value plus one okay so let me show you something i have a list here and you can see here i have written you have the variable a it can be a list it can be a tuple or it can be a string and inside the square brackets you give the start value and the end value separated by this colon symbol and what it's going to give you is the items from start to end minus 1 okay so whatever end value you will give here you will get the value n minus 1 you can also use this notation so start colon and without giving the end value and also reverse is possible so you can give only the end value and not the start value and also this notation is possible so we will see one by one how to use all these notations so first of all i will give once again i will use the tuple now and this time i'm going to just give the start value let's say i want to start from 4 here and then colon and then press enter and it's going to give me the result from index 4 until the end of this tuple once again let me give the end value so instead of using this value before colon this time i will give the value after the colon and i will leave the start value blank and here let's say i just want to go before 6 so i'm going to press enter and you can see it will give me the result from 0 to 5 that is end value minus 1 right so until 5 and also you can give this kind of notation so this time i'm going to use the string variable and you can use colon without giving the start and end value and when i press enter it's going to give me the whole string let's say with this string i want to provide the start and end value let's say 0 to 5 and then press enter it's going to give me a string from 0 to 4. so this slice functionality you can use with the tuples lists and also with the string or essentially whatever collection which have the indexes you can use this kind of slides notation with those kind of collections now in addition with the start and end value you can also give the step values so let me just print the value of a once again and you can see the values inside the a and let's say i want to get out of this list 0 2 4 6 8 okay so essentially i want the every second value from the list so what i can do here is i can give the variable name and then start to end so from zero to index nine and the third argument here you can give is the step so let's say i want to get the every second value so i can give two here and then press enter and it returns me 0 2 4 6 8. now let's say i want to get every third value so i can write 3 here and it's going to give me 0 3 6. okay in a similar manner if i want to get the every fourth value i can write 4 here and then press enter it gives me 0 4 8. also if you don't want to give this range from start to end you can leave the start and add in the value as blank and then press enter and it's going to give you the same result now in python you can use indexes with the negative numbers also so let me explain what i mean by negative number index so let's say i have a string called python it have these character p y t h o n you already know that you can access the p character or p letter using the index 0 and the y letter using the index 1 and the t letter using the index 2 so this is the positive index right you can also use the negative index which starts from the right hand side so it starts from n and the index you can give here is from minus one so the last index here will be minus one then minus two minus three minus 4 minus 5 and minus 6 here so let's use these kind of indexes and let's see how we can use them so we have this string here and let's say i want to get this value which is 9 which is the last letter of the string so i can use c and here inside the square bracket i can give minus 1 and then press enter and it's going to give me the last letter of the string if i give minus 2 here it will give me the second last letter okay so the negative index starts from the right hand side and it goes from minus 1 till the end of the string now let's use this negative number index with the list which we have so we have this a list and we can use a and then we can give a colon colon 1 which is going to give you all the numbers in the reverse order in the list so our list was starting from 0 to 9 it will give us 9 to 0 in the reverse order now let's say if you want to get the first two item in the reverse order so this is when you use this minus 1 as the third parameter it will give you everything in the reverse order okay so minus 1 as the step value is used to give everything in the reverse order so when you give for example one here and leave the end parameter empty it's going to give you you can see one zero so as you can see our list starts from zero one it's going to give us the reverse order values so it's going to give us one zeros because here we have given one and it's the end value for this reverse string because we have used the minus one here let's take some more examples so instead of this start value i can give minus three here and then press enter and you can see it gives us eight and nine which are the last two items of the list in the reverse format okay because our index in reverse starts from minus one minus two minus three and we we are skipping the minus three option because we have seen that we just take the end minus one right so minus one minus two and these will be given to us in the reverse order because we have used minus one here now you can also give for example minus 3 as the start value so i'm going to give the minus 3 as the start value and then press enter and it's going to give us 0 to 7 right so 0 to 7 except 8 and 9 in the reverse order so because 3 this time is the start value and end value is until thus so because 3 this time is the start value so we go from minus 1 minus 2 minus 3 so minus 3 is this index and this is the start value so we get 0 to 7 in the reverse order so this is how you can use slice function and negative values with indexes in python in this video i'm going to show you how to use loops in python and we will start with the while loop so first of all what is a loop so a loop allows us to repeat over some block of code again and again until and unless some condition is met now let's see how to use while loop in python so let's say i'm going to declare a variable called i and i'm going to initialize it with the value 0 and to use a while loop you use this keyword and then you provide some condition so let's say i want to check whether the value inside the i variable is less than 5 or not okay and as in the case of if also we have seen we provide after the condition this colon symbol and then in the next line we write the code which we want to perform again and again until this while loop condition is true so let's say we want to just print something and we will print that the value of i is and then we will print the value of i like this also i want to change the value of i with every step so i will change the value of i using this expression which is i plus equals one this essentially mean that we want to just add one every time whenever this code is executed also we can say that we want to perform this operation i is equal to i plus 1 so this statement is similar to this statement let me provide some spaces here now in here also you will observe that i have provided some indentation here and indentation means that these two lines of code is the part of while loop okay so when i want to write something outside the while loop i will start from here with no indentation and let's say i want to just print that we are finished and now let me run the code and let's see what's the result and you will see here first of all this string is executed which is the value of i is and then the value of i is printed which is 0 1 2 3 and 4. so as you can see here that we have initialized i is equal to 2 so the initial value of i is 0. now when we come to this code and when this condition is checked here the value of i is 0 which is less than 5 that means this condition is true and that means that these two lines of code which are under while loop will be executed so this line is executed where value of i is printed which is i is equal to 0 and this line of code increments the value of i by 1 so when this line of code is executed now the value of i becomes 1 because previously it was 0 and once again this program flow grows to the starting to evaluate this condition and this time the value of i is 1 which is less than 5 and the condition is true once again and again this line is of code is executed and this line of code is executed and the value of i is incremented by 1 once again and the value of i becomes 2 here and this will happen again and again until the value of i becomes 5 and when the value of i becomes 5 this condition will be false and that means this code will not be executed this code will only be executed when the while loop condition is true and then at last this line of code is printed which is finished while loop now let me give you one more example of while loop and i will start from the top once again and this time i will declare a variable called num and i will initialize this value by zero and also i will declare a variable called sum and initial value of sum is also zero now here first of all i will ask the user to enter a number so i'm going to just write and also i will ask the user if he or she wants to exit from the loop he can enter zeros and then in the next line i will start with my while loop and i will give the condition if the number so if the number i'm going to write number is not equals to 0 we want to perform some operations and what operation we want to perform we want to ask the user to provide any number and we will transfer this number into the variable num so here i will first of all write input and then i will ask the user to provide the number and when the user provides the number i want to convert it to a float value so i will just type cast this input to a float value and then this number will be assigned to the variable num now here don't forget to give the colon and in the next line what i will do is i will just use my sum variable and i will just add the number value to the sum so i can just write sum is equal to sum plus num and this means that initially the value of sum will be 0 and then this number will be added to the sum and until this loop runs we will get the sum of all the numbers which is entered by the user and at last i'm going to just print the value of sum so now what do you think will happen so in this condition we are evaluating that num should not be equal to 0 and then only this code will be executed and we have provided the initial value of number is equal to 0 so this condition will never be met and this statement will never be executed so we need to provide the initial value of num is equal to 1 and then whenever the user provides the value this 1 will be overwritten by the value which is provided by the user so this time when we run the code you can see first of all the program asks us to provide a number so i will provide 100 here and then press enter and you can see the sum is printed which is equal to 100 once again we will provide some number and then press enter and now you can see sum is equal to 150 once again we will provide one number and then press enter and now the sum is one zero five zero now let's say we provide a number is equal to zero and then press enter you can see that our while loop is finished because 0 is not equal to 0 that means a false condition and then the flow of program comes out of the loop and then the other while loop will be executed which is this while loop and that's why this output is printed we can also write that sum is equal to so we know that this is the sum so sum equals and then after the comma we will print the value of sum and once again when we execute the code and once i want to exit from the code i can use 0 to exit so 0 and then press enter and i come out of this loop now python also supports the else statement to be associated with the loop statement so what i mean by the else statement to be associated with the loop statement is that i can use after the end of this while loop condition i can use here else and after the colon i can provide some code which i want to execute once this loop is finished okay so i can write here that i want to print for example finished sum so let me run the code once again and i will quickly provide some numbers here and which will provide the sum and when i provide 0 here then we come out of the loop and you can see this finished some string is printed using this else so once your program comes out of the loop this else statement will be executed similarly we can go down and here also instead of writing this finished while loop we can also give else statement here so i'm going to just write else and after the colon here i need to provide the indentations so four space indentation one twos three four and everything will be okay and once i run the code and first of all i will provide zero here to see if this is executed and you can see this else condition is called once your while loop is finished now also you can provide some condition here which is always true so for example i can write true here and this means that while loop evaluates to true every time and this means that this statement will be executed forever so this is also possible but you need to think carefully what do you want to do do you want to execute this code infinitely or do you want at some time that this condition will be false so this is how you can use while loops in python in this video we are going to see how to use for loops in python so first of all what are for loops so a for loop is used to iterate over a sequence and that sequence can be a list or a tuple or a dictionary or a set or a string so for that i'm going to declare some variables and the first variable is a which is a list second variable is b which is a tuple third is c which is a set fourth is a string and fifth variable is e which is a dictionary now before seeing the syntax of for loop i'm going to show you how to use in operator in python because it's used in for loop so i'm going to first of all use print and then i'm going to use 0 and then use in operator and then i'm going to use this first variable which is a which is a list right and let's see what happens when i try to run this code so it prints true so in operator will give you true or false depending upon whether this value is present in your sequence or not so for example when i write hundred here which is not present in the list it's going to return us false so this you can use with the tuple also let me just use it with tuple and let's use one here and i'm going to run the program and it prints true once again also we can use in operator with strings so i can write d here but for that i need to convert this one into a string so now when i run the code it will give me true now let's see how to use a for loop in python so for loop as i said we can use with some sequence so let's use it with a which is a list so i can write x in a and a is a list in this case and then i can just print the value of x and let's see what happens first of all when we just write this kind of a for loop so we are going to run the program and what it does is it prints the values from 0 to 5 which is the element present inside the list so for loop is going to iterate over your list one by one and this in operator is going to check whether this value is there in your sequence or not in this case in our list or not so first of all when for loop start it will transfer the first value which is 0 into x and then it checks whether x is in this list a or not and then it's going to print the value of x which is 0. and once again program sequence goes here and once again the next value is transferred to x which is 1 and once again this condition is validated if 1 is in this list a or not and then the value of x is printed which is 1 and this iteration goes on and on until 5 is reached which is the last value in the list so 5 is printed and after that there is nothing inside x and then the program flow comes out of this loop you can also use this for loop with the tuple also so let's try it with tuple and let's see what happens and it's going to print the same values also with the set let's see what happens so i'm going to run the program once again and it prints 0 to 5 once again because these are the content of the set also once again let's try to use this for loop with the string and let's see what happens and it's going to print out the content of this string which is 0 1 2 3 4 5 and it prints them one by one now with the dictionary we use this for loop in a little bit different way so for example i will write the variable name which is a dictionary and then let's say i want to just print all the keys inside this dictionary then i can write e dot keys and then we have all the keys using this function and when i run the code it's going to print all the keys inside your dictionary also when you use the function called dot values it's going to print out all the values inside your dictionary you can see max and the age 20. now let's say you want to print out all the key value pairs which are there in your dictionary you can use a function called items and this is going to give you keys and values right so i can just write key comma value here and then i can print the value of key first of all key and let's provide some space here and then let's print out the variable value here okay and when i run the code it's going to give you first of all key and then the value once again key and then the value so in order to print out the keys and values from a dictionary you can use this kind of notation now you can also use a function called range so let me show you how to use this function which is range which returns us the values starting from zero so there is a function called range here and in here you can provide a number and this range is going to return the number starting from 0 to 5. so whatever number you write here the range rate will be returned from 0 until that number accept whatever number you write here okay so let me just try to print out the values which is there in the x and when i try to print this it's going to return me from 0 to 5 and you can see here 6 is not printed because the range will give us the value except that value which you write here you can also provide the start value here so let's say i want to start from 2 and i want to go until 5 i can write something like this and now you can see now it start printing from 2 to 5. also you can give a third parameter here which is a step parameter so i can give 3 here for example and let's say i want to write 30 here and let's run the code and now what is going to return is it starts from 2 because we have given the start value 2 here and it's going to go until 29 because we have given 30 value here right and this is the step so every third value will be printed after 2 here so 5 will be printed then 8 then 11 14 17 20 23 26 and 29 every third value right if you write here two then we will increment in the step of two so this is how you can use range function with your for loop also as i said in the last video you can use else statement with your loops so i can also write else here and then after the colon in the next line i can print something or i can execute some statement so for now i will just print finished and then i'm going to run the code and once the loop is finished you can see this else statement is executed which prints finished so else statement will be executed once your for loop is finished so in this way you can use for loops in python in this video i'm going to show you how you can use break and continue keywords with your python loops so to start with i have here two loops one is a for loop and other is a while loop now this for loop takes a list and then print every element out of this list using this print function in a similar way while loop evaluates the value of i if it's less than 5 then it's going to print the value of i and then increment the value of i by one now this is all normal and we have already seen this kind of code now you can use a break keyword with your loops in order to terminate the execution of loop immediately so let's see how we can use break keyword first and then we will see how to use continue keyword so here i'm going to give a condition inside my for loop and i'm going to just evaluate whether x is equal to 3 or not and if x is equal to 3 i'm going to use this break keyword in a same way i'm going to use this if condition inside my while loop also but instead this time i'm going to evaluate i is equal to 3 and if i is equal to 3 then i'm going to use this break inside this if condition so let's run the code and let's see what happens and you can see in the for loop it has only printed 0 1 2. even though this for loop is supposed to print from 0 to 5 it has printed until 2 from 0 because as soon as this x value becomes 3 and we call break here the loop is terminated immediately and our program will come out of the loop immediately as soon as this break keyword is called in the case of this while loop also as soon as this i value becomes 3 we are calling the break keyword and as soon as this break keyword is called our loop is broken and the execution of code will come out of this loop so until 2 everything was ok but as soon as the value becomes 3 this break is called and then we come out of the loop let me just print a line here in order to separate these two loops so we know that from where one is starting right so i'm going to once again run the code and you can see for loop prints from 0 to 2 and also while loop prints from 0 to 2. if you uh change the value here for example here you want to evaluate xz is equal to 2 or not and here you want to evaluate if x is equal to 4 or not and then you break out of the loop and once again when i run the code you can see the for loop runs only 2 iteration for 0 and 1 and as soon as the value of x becomes 2 we call the break keyword and we come out of this loop and in the case of while loop as soon as this value of i becomes 4 we come out of the loop so the value from 0 to 3 is printed now let's see how we can use a continue keyword instead of this break keyword so instead of this break keyword i will use a keyword called continue here and also in the while loop also i'm going to use this keyword called continue and i'm going to run the program and let's see what happens so now when you see here so you can see here for loop starts from printing 0 1 and as soon as the value of x becomes 2 this condition is met and this continue is called and as soon as this continue keyword is called everything whatever code comes after this continue keyword will be skipped and your program execution goes once again to a for loop for the next value so you can see in case where x is equal to 2 and continue is called this statement is not executed because as soon as we execute continue in our loop then that iteration is skipped and all the code after the continue will not be executed okay so we go to the next iteration so that's why 2 is not printed because this was skipped in case of 2 and then directly 3 is printed and then 4 and 5 is printed in case of while loop also as soon as the value of i becomes 4 you can see 4 is not printed here you can also change this value to 2 and then i'm going to run the program once again and you can see while loop prints 0 1 and y it prints 0 and 1 so because as soon as the value of i becomes 2 this continue keyword is called and after that this iteration is skipped and also because this iteration is skipped these two lines of code are not executed and because this line of code is not executed that's why the value of i is not incremented and the value of i always remains 2 and that's why this becomes our infinite loop right so instead of increment the value of i at the last line we can increment the value of i just after this condition check whether i is less than 5 or not and then we run the code now you can see it prints 1 3 4 and 5. so now what's happening here is initially the value of i is equal to 0 and this condition is evaluated and then we first increment the value by one and that's why it starts with the printing of one by using this print function and as soon as i is equal to two this continue is called and that's why here 2 is not printed because as soon as the value of i becomes 2 this continue is called and every code or every statement after the continue will be skipped for that iteration that's why 2 is not printed here so in this way you can use break and continue keywords with loop in this video i'm going to show you what is a function in python and how to use functions in python so first of all what is a function so a function is a group of statements within a program that performs a specific task now functions can be of two types one is builtin function and other is user defined function builtin function we have already seen that print is a builtin function or for example input is a builtin function or for example min is a builtin function and so on now usually function does one task at a time so you can see this print function only prints something whatever input you give here it's going to print it input function takes some input from the user min function finds out the minimum out of some values so a particular function do one task at a time now let's see how we can define a function so to define a function you use a keyword def and then you give the name of the function so name of function and after the name of the function you give these parentheses and you provide number of arguments or parameters so for example arg1 comma arg2 comma arg 3 and so on so you can give any number of arguments to your function now after this ending parenthesis you give this colon and then under this function signature you write some statements which you want to execute when this function is called so for example if you want to print something you can print something or if you want to calculate something for example the product of two or three variables or a sum of two or three variables you can do under this function declaration so let's take an example or function and let's see how we can define our real life function so i'm going to define a very simple function which is going to add two values so i'm going to name it as a sum and for example it takes two values one is let's say arg1 and other is arg2 and then after the colon i want to add these two values so i can just write print here and then i can write arg1 plus r2 so this is a very simple function which takes two arguments and then add these two arguments and print them so this is how you declare a user defined function now after declaring a function you need to also call this function so in order to call the function you just use the name of the function and then you provide the arguments which is required by the function so our function requires two argument right now arg1 and r2 so we are going to provide these two values let's say i want to provide 15 as the argument 1 and i will provide 60 as the second value now let's run the code and let's see what happens so when we run the code you can see our function prints 75 which is the sum of these two values which we have provided as an argument to this function now also if you remember this plus operator you can also use to concatenate two strings so i can use this sum function and this time i'm going to provide for example hello as the first parameter and then world as the second parameter and then i'm going to run the program and it's going to print hello world in addition we can provide to float numbers here for example i will provide 15.647 and the second argument i'm going to provide is 80.258 and this is also allowed so i'm going to just run this code and it gives us the sum of these two values so this function sum is doing one single task which is to add two values whether it's a string or it's a number or it's a float value now you may also observe that when i provide for example as a first argument i will provide a string and as a second argument i will provide a number here will this work let's see so it's going to give us an error and this error says can't convert into object to string implicitly so this is a problem so to solve this problem we can provide here a simple condition and we are going to check the type of both the arguments so if type arg 1 is not equal to type arg2 this should be arg arg1 not agr1 so let me just change this here and if the type of arg1 is not equal to r2 we are going to just use this keyword which is return so this return keyword is used to return something so you can return for example 0 here or any string here and when you write this return function without any value here it's going to return nothing but as soon as this return keyword is called nothing after that will be executed so even though you are returning nothing from here then also this statement will not be executed so whenever return is executed after that all the statements which are under the return will not be executed also we can print a message here that please give the args of same type okay and let's run the code now and you can see now it prints this message which says please give args of same type so if these arguments are not of same type whether it's a integer or a string or a float value if the user provides first argument which is a string type and the second argument which is a integer type then this condition will be true and this statement will be executed which is going to print this message and then return is called and after this whatever statements are there will not be executed so now as i said you can also return some values from a function and here when you don't give any values after this return keyword it's not going to return anything but let's return the addition of two arguments using our return keyword so i'm going to use this return keyword here which is going to return the addition of these two values using this sum function so now what will happen is let's run the code once again and you can see this sum is executed this sum is executed this sum is executed but the result is not printed so in order to get the result out of this function when it returns something we need to save this return value in a variable so let's save this value into a variable and then you can use this variable to print the value of the sum so i can do something like this also you can directly and close this sum function inside a print function and then also it's going to print the sum of these two strings so either you can assign the result of this sum function which is returning the result into a variable or you can use directly this print function to get the result and print it so i'm going to use print with other two functions also so first print and the second print here and let's run the code once again and now you can see what happens so first of all it prints 75 which is the addition of these two numbers which is returned by this sum function into a variable a and we are printing the sum using this print function here in the next result it prints hello world because this sum function now returns the concatenation of these two strings similarly this sum function is going to return the sum of these two float values and in the last result because the type of hello is not equal to the type of 15 then this message is printed because this condition is true in the last case and then return will be called and when this return is called we were printing whatever is returned from the sum function and you can see at last none is printed because at last this sum function is returning nothing because the type of these two arguments is not same so we were returning without any value and that's why none is printed here now there are few things to note here okay so the first thing is you can define a function using def keyword and then the name of the function and under these parentheses you provide the argument so these two are called arguments so this is argument one and this is an argument two also you can use alternatively the name parameters for these two arguments so this is a parameter 1 and this is the parameter 2. now it's possible to return from a function like you can return the addition of two values or it's also possible to return nothing from a function so when you use return without a value it's not going to return anything now when you use this function somewhere it's called calling a function now at last let's discuss about some of the benefits of using functions so the first benefit is function makes your code simpler because if you don't use function to execute this kind of code then you need to write this code again and again whenever you want to use this functionality at different places the second advantage is function makes your code reusable so the same code is used to add to integer values to concatenate two string values to add two float values and it's also used to give the error if you provide the arguments of different types so that means you write the code once and use it multiple times and that results in faster development of the code so if you use a function you can develop your code much faster than if you don't use a function and the last but not the least advantage is when you declare functions you can test and debug your code in a better way so this is how you can declare and use functions in python in the last video we have seen how to declare functions and how to use functions in python in this video also we will discuss some more properties which are related to functions in python so let's get started so to start with i have a function called student which takes two arguments one is name and other is age and inside the function we just simply print the value of name and age using the print function and when we call this function with the name and age it's going to print this kind of output now python allows us to set the default value of the arguments so after this name you can put equals to symbol and then put the default value whatever you want to set for the name for example if somebody doesn't provide any name then you can just say unknown name similarly we can set the default age here let's say default age is 0 if somebody doesn't provide any age with the student function then the default value will be 0. now instead of using this student function like this let's say i don't provide any argument to this student function and let's run the code and you can see if i don't provide any argument to this student function the default values are taken so the default values are used when you want to make sure that every argument in your function should have some value now let's say i just provide a name here and don't provide the age and let's run the program and now you can see the name is overwritten by the argument what we have provided here right so default value will be this one if no argument is provided similarly if we give the value of age and now we run the program the default age is replaced by the age which is provided using the arguments so this is how you can use default values with the arguments of the function so let me just remove these default values and i'm going to give you the next example which is variable length arguments so let's say with the name and age i want to provide the list of scores which this student has scored for different subjects so as a third argument i'm going to provide a argument called marks and somehow i want to provide a list of marks which is scored by this student and let me print the value of marks using this print function also now in python you can use asterix in front of your argument and this means that you can provide multiple arguments when you use this kind of notation so let's just provide for example we already provided the name and age here and let's provide different marks scored by the student so i can provide 95 for first subject then 70 for second subject then 80 for next subject then 50 for next subject and let's say we don't know how many subjects the student has taken we just have only the information about these four subjects which he has taken so we can provide the four values here and then let's run the code and now you can see name is tom age is 22 and the value of marks is shown as a tuple okay so whenever you provide this asterisk in front of an argument you can provide the values for that argument using normal arguments as you provide for normal argument so first two variables are associated with name and age and all the other variables which you provide here will be assigned to this marks variable because it has this asterisk in front of it so now you can also use a for loop in order to iterate over tuple so x in marks for example and then you can print every value or you can access every value inside this tuple and let me comment this print function and let's run the code once again and you can see for loop has printed all these marks which are there inside the list now if you want to use this type of variable length argument then i will suggest you to use this argument as the last argument of your function so that it will be clearer to the reader of the function that whatever you provide at the end will be the part of this last argument now you may ask that we have provided these marks for this student but for which subject these marks are given to the student now in python you can also use double as tricks in front of your function argument and this means that now you can provide the key value pairs as a marks arguments so instead of using 95 i can also say that 95 is scored in english let's say and then 70 is scored in math and then let's say 80 is scored in physics and the 50 marks is code in biology so now when you use these double asterisks in front of your function argument you can provide these kind of key value pairs which are separated by this equal to symbol and how you can access these values so let's run the code and let's see what happens and now you can see only keys are printed and not the values of these subjects are printed so let's first uncomment this print function and let's see what type of value we are getting so whenever you use these double asterisks the values are given to you in the form of a dictionary okay so if you use single asterisks the values are given to you in the form of tuple but whenever you use these double asterisks and whenever you try to access this variable then this variable will be of type dictionary and you already know how to print the values of dictionary so you can just write marks dot items here and then here you can just write key comma value and then you can print the value of key and value so i'm going to just print key first of all and then i'm going to just give a space here and then i'm going to print the value right and now when we run the code it will give me first of all the key for example english math physics or biology and the value which is 95 70 80 or 50. now before starting our object oriented programming journey in python let's discuss about what is the difference between the procedural programming and the object oriented programming so you will have the better idea why we use object oriented programming now traditional programming languages such as c or pascal were called procedural programming languages or structural programming languages where the basic unit was functions now programming in these type of procedural languages involves choosing a data structure and then designing the algorithm and then translating that algorithm into a code so if this sounds little bit confusing let me try to explain it with an example so let's say you have been given a task to create a program for a passenger who wants to travel from one place to the another place using a cab service so if we think from the point of view of procedural programming what we do in the procedural programming is we create some global data structure which holds the data so here for example we create some kind of data structure which can hold the data for example in case of a cab service which cab service is it or which type of cab is it and at what location this cab is standing all these kind of data we store in a data structure in our global environment now after storing the data we design an algorithm so let's see what kind of algorithm we can develop in the procedural programming language for our cab booking service so this is a pseudo code which i have written so first of all the passenger will open the app from which he can book a cab and then he will book the cab and once the cab is booked he will wait for the cab and then once cab arrives he will sit in the cab and then he will reach to his or her destination and at the end he will pay the fare of the cab and this is the pseudo code of that algorithm and then we will translate this algorithm into actual code in procedural programming language now in these type of procedural programming languages we concentrate on creating the functions and the major drawback of using these functions is that data and operations on the data are separated that means we need a methodology to send this data to these functions so here we need to send this data which we have saved globally into these functions and these functions take this data either as argument or as a global variable and then perform some actions on this data and give you some result now these kind of functions are passive what do i mean by passive here that is these kind of function cannot hold any information inside them so once you give the data they are able to give you the result back after performing some operations but they cannot save or hold the state or the data so that if you want to use that data in some other place in your code then it will be very difficult using these kind of functions which you use in procedural programming now let's look at the object oriented approach of doing things so in object oriented programming languages like c plus plus or java or python the basic unit is class now if we take the same example of a passenger who wants to travel from one place to another using a cab service using object oriented programming thinking which depends upon the creation of object we can create different kind of object for example for a cab we can create a class called cab and then we can create a class for cab driver and the third class we can create for a passenger okay so a class you can create for any real life object it can be a car it can be a motorbike it can be a book or employee or a person so object oriented programming allows us to create object so first of all what is a class so a class refers to a blueprint in which we can have data and methods okay so for example for our cab class what attributes this cab class can have for example a cab service which cab service we want to take what is the make of the cab it is it a toyota or a bmw or a volkswagen cab at which location this cab is right now what is the number plate of that cab so the passenger can recognize this cab so all these things which i have written here are called data because they can hold some kind of data number plate has number plate data location have geolocation data make have the make data cab service can have data like uber or any other cab service and the other thing which a class can have are called method so earlier we have seen that we can create functions and when these functions you use inside a class they are called method okay so functions inside a class are called method now the data inside this object or class is called attributes or the member variables which can hold some data and using this class we can create object of the cab class which means we can create different object using a same class and how to create object using classes we will see in the next video in the real life example so don't worry if you don't understand how these things works i will give you a real life example so you will be able to understand in a better way now what is an object an object is a software unit that combines data and methods okay so we have this data here and then we have the methods inside the class and object is able to combined both of them which is data with the methods now these objects for example a cab object and the passenger object can exchange the data between them also so data is interchangeable between for example the passenger object and a cab object so let's rewind once again what we have learned about object oriented programming so the basic unit in object oriented programming is a class and a class refers to a blueprint which can have the data and methods now using a class we can create objects and what is an object object is an instance of a class and each object can have its own data and method and an object is able to store the state of some kind so at which location this cab is right now so this is a state and an object is able to store that state now in procedural programming if you remember there is no relation between the data and the method right we need to provide the data to the method which are separate entities in the procedural programming language now these data members are called attributes or member variables and these functions which you define inside a class are called methods and what are some of the key differences between procedural programming language and object oriented programming language the first is the unit in procedural programming languages function and on the other hand in objectoriented programming the unit is class the second is the procedural programming concentrate on creating functions while objectoriented programming starts from isolating classes and then they can have data and methods inside it in procedural programming language the data and the functions are separate and in object oriented programming language data and methods are not separate they are the part of a single object of a class now if all this seems to be little confusing to you don't worry you are not alone and i will try to solve this confusion in the next video in which i will tell you how to create the classes and how to use classes in python in this video i am going to show you how you can create your first class in python now if you haven't seen my last video in which i have discussed what is object oriented programming and what are classes i will highly recommend you to watch that video because this will be a continuation of that video so let's create a class in python so for that i will create a new project so let's create a new project in pycharm so just click on file here and then click on new project and then the project name i'm going to give here is oops and then i will just click on create and i will choose this option which says open in current window and also this option which is added to currently opened project which is going to create this project in this window itself which is already open so now you can see we have our empty project here and inside this project let's create a python file so right click on the project and then new and then we are going to create a new file and let's create a class called car so i'm going to name the file name as car because we are going to create the car class now in order to create a class in python you use a keyword class and then you give the name to your class so the class name in our case is car and then you give this colon and for example i write here a keyword called pass now when you write this keyword after the declaration of a class this means that it is a empty class you can also use this pass keyword to create an empty method so this keyword pass is used to create an empty class or an empty method now here after the class declaration let's see how we can create an instance of a class so it's really easy to create an instance of a class so let's create a first object and i'm going to name it as ford which is a car brand and then you use your car class name and use these parentheses here okay so this here ford is an object or you can also say it's an instance of the class car in a similar way we can create multiple objects for example honda is another car brand and you can create the honda object using this class car once again you can create a new object for example audi and then you can once again use this car class to create this object so what we have done till now we have created three object from the class car now in the previous video i have told you that you can associate some data with your object so let's associate some data so for example ford we can associate uh attribute called speed right so we can assign the speed for example 200 here for honda we can assign speed let's say 220 and for audi we can assign the speed let's say 250 so speed here is called the attribute and whenever you create an empty class using this pass keyword you can add these attributes on the fly so you can see we have added these attribute after the declaration of the class and after the creation of the objects let's add some more attribute to these instances or the object so a car can have the color so i'm going to just write color and the food has let's say the red color and let me just copy and paste here and let's say the honda have the blue color and we have the audi of black color so once again color is an attribute here now if you want to print these attribute you can use this print method and then for example we want to print the speed off ford and the color of ford then we can do it like this and let's run the code so in order to run this code first of all when you create a new project and the new python file you need to right click on this file and then click on run the file name whatever is your file name my file name was car so you can see now the result is printed here first is the speed and second is the color of an instance ford similarly you can print the color and speed of honda and audi objects also now if you want to change some attribute it's also possible so let's say i want to change the speed of ford object so i'm going to use ford dot speed once again and this time i want to assign 300 speed to this attribute let's say we also want to change the color of the ford object so i'm going to just use four dot color and this time i want to use the color blue here and let's once again we will try to print the color and speed of the object ford and now you can see this result so before the speed was 200 and the new speed is 300 for the object ford and before the color was red and the new color is blue for this object ford now if you have followed the last video this speed and color is the data so speed and color are the variables which holds some data inside them but still we haven't added any behavior or methods to our class car and that we will do in the next video now let's create a new class because understanding classes in any language is difficult so let me give you another example so this time i'm going to create a new python class and i'm going to name this python class as a rectangle and then press ok which is going to create this class and to create a class you already know you use the keyword and the name of the class and then the colon and we will also make this class an empty class using this pass keyword and in order to create an instance i'm going to just write rect 1 which is the first object using the rectangle class and then i'm going to create rect 2 which is the second object using this rectangle class and now what are the attributes which we can relate to the rectangle a rectangle have a width and the height so let's add the width and height so let me use the first object and let's say height is 20 for the rectangle 1 and then we are going to use the second object and once again we are going to add the height for the second rectangle let's say the height of second rectangle is 30. similarly we can add the width to the rectangle so width is equal to let's say it's 40 and rect 2 object have the width let's say 10. so what we have done here we have created a rectangle class and then we have created two instances of the rectangle class rect one and rect two which are also called objects and then we have added some attributes to our objects which are height and width now let's say you want to calculate the area of these two rectangles i can use the print method and then what is the area of the rectangle it's the multiplication of the height and the width right so i can use this rectangle one object and then i can call the height and width of this object and this will give me the area of the rectangle 1 using this multiplication operator similarly i will do the same for the object 2 here and let's run the code and if you remember what we need to do if we create a new python file we need to right click on the file and then click on run right so once the file is running you can choose from here which file you want to run but at least once you need to right click on the file and just click on run whatever file name you have so you can see the area of rectangle 1 is 800 and the area of rectangle 2 is 300. so this is how you can create a very simple class in python in this video i'm going to show you how to use init method in python and how to use a keyword called self in python so i will continue with the class which i have created in the last video and this was the class which we have created and we have used this special keyword pass there and pass we were using to create an empty class now i'm going to remove this pass and i'm going to add a method called init here so i'm going to just write def and then underscore underscore init and then press enter and you can see this init method is created here so this is like a normal method with double underscore in front and back of this init keyword and you will also see the self keyword is already added as the first argument of this method now this init method serves as a constructor for the class so usually it is used to initialize some attributes or some functions because this is the first method which will be called when you create an instance of a class so here we are creating an instance of a class and this init method will be the first method which will be called when this object or instance will be created so let's check what i'm saying so let's say i want to print inside this init method that the underscore underscore init underscore underscore is called and let me run this code so i will change this to car and then run this code and now when i see this result you will see this line is called three times because we have created three instance from the same class okay so every time this instance is created this print is called and that's why this line is printed three times and everything else will be printed after that whatever we were printing for example speed or color of the car will be printed after that now one important thing to notice here is i said init serves as a constructor it's not a constructor although it would be tempting to call this init method as a constructor actually it's not a constructor but it behaves like a constructor because init is the closest thing we are going to get in python to a constructor because it is the first method which is called whenever an instance is created now if you are familiar with other object oriented programming languages like java and c plus plus there is a destructor also in those kind of languages with classes now python doesn't have any destructor because python has an automatic garbage collections so you don't need a destructor in python because python will take care of anything which should be taken care of now as i said usually init method is used to initialize something so instead of initializing the value of speed and initializing the value of color let me just comment this code first of all so i'm going to select whatever i want to comment and then i can press ctrl forward slash to comment all the line you can also go to code and then use this option which says comment with line comment and you can see the shortcut for that control plus forward slash okay so this is going to comment your lines of code and now i want to use the speed as the initialization value so after the self keyword i can give the next parameter which is speed here and then the third parameter is the color here and now to print the value of speed and color i can use once again print and then first of all i'm going to print the speed and then i'm going to print the color attribute and as soon as you do this and when you try to run this program it will give you an error so let me run the program and it will give me the error it says init missing to required positional argument which is speed and color okay so once you create an init method and provide any arguments other than self self is automatically provided by python whenever you create an instance of a class but other than self when you write for example speed and color arguments here you need to provide those argument at the initialization of your class so here first we will give the speed inside these parentheses for example 200 and then the color for example red here okay same we need to do for the other two instantiation of the car class so let me do it for the second instance and also for the third instance and now let's run the code once again and let's see what happens so now you can see everything works fine and no error is given to us and you will also see because this print is called first you can see the speed is printed first and then the color and then this line is printed after that and that means we will get the speed color and this line three times for every instance with different values whatever values you have provided for the instantiation of your car class now usually you provide these arguments because you want to initialize the value of speed so let's try to access the value of the ford object speed and color so let me just uncomment this code and let's run this code and it will give us an error you can see this says that car object has no attribute called speed right so what is the error because we have provided these attribute speed and color but we haven't assigned these values to any attribute inside this car class earlier what we have done is we have assigned the speed value to a speed attribute and the color value to the color attribute but we have already commented those codes so how can we assign the speed and color to the car object so it turns out that you can use the self keyword and then using the self keyword you can assign the value to the current object so self is essentially the current object okay it's similar to using this in c plus plus or java if you're familiar with those two languages so you use self dot and then the name of the attribute for example speed in our case is equal to whatever argument you provide for speed so we have provided the same argument which is speed is itself once again i can use self to set the value of color here so self.color is equal to color let me remove this semicolon because it's not required and now when i run this code you will see that there is no error now so because we have now used the self keyword to set the attributes of speed and color so we can easily access the values of the speed and color using any object of the car class so let me once again minimize this so now let's talk about the self keyword here so whenever you create a class the first argument of every method you need to provide this keyword yourself now it's not necessary to provide this same keyword which itself but it's a convention to write this self as the first parameter the first parameter can be for example abc it doesn't matter but you need to use this abc here also as self and it will be totally fine but it's a convention that we use the self keyword in order to indicate that this is the current object so every method you will create you need to give this self keyword as the first argument of your method inside a class now you may also observe that here when i am initializing this class instance i'm not providing any self keyword so even though in the init method i have provided three arguments i'm only providing two arguments here so it turns out that you don't need to provide the first argument which is self it will be automatically be provided to your class so you just need to give the next argument whatever argument you give after the cell so we have given speed and color after the self argument so we just need to provide those arguments after whatever you use after this keyword called self so let's do the same thing with our second class which is the rectangle class and here also we have created this empty class so let's remove this pass keyword and instead of this pass keyword we will use this init method which is def underscore underscore init underscore underscore and here after the self we will provide the height as the second argument and the width as the third argument okay and then we are going to initialize the attributes height and width using this self keyword so self dot height is equal to height self dot width is equal to width okay so this is how you can initialize your attribute using this init method and now when you do this you don't need to initialize these values like this you can directly initialize this height and width using these parentheses let me provide these values let's say 20 and 60 for the first rectangle and let's say 50 and 40 for the second rectangle and when we run this code let me just change the file here and then run the code and you will see it will print the area once again here so this init method is used to initialize your attributes or whatever you want to initialize at the start of your class you will do all those initializations inside this init method so this is how you can use init method and self keyword in python in this video also we will discuss more about init method and the self keyword so let's get started so here i have a very simple class called hello and in this class i have a method called init and i'm just instantiating this class and creating an object out of this hello class now the first question which may arise is what if i don't want to use this self keyword you can see directly that there is a red squiggly line appears here which means an error and this we can also see when we run the program so when we run the program it's going to give us this error which says init takes zero arguments but given one now you may ask why it's saying that we have given one argument to the initialization of this hello class so as i said in the last video that self is automatically passed when you initialize a class and that's why it says that one argument is given but init takes zero argument because here we haven't given any argument inside these parentheses so self is absolutely important so you need to give the self now the second question you may ask is can i create multiple init method inside a class so let's see if it's possible or not so here i'm going to give this pass keyword which means that this init method is an empty method and let me create a second init method and this time i want to add one more parameter here let's say name okay so we have provided two init methods here and let's see what happens so this is the instantiation of class where i haven't given any argument to this instantiation so i'm going to run the program and what it says it says init missing one required positional argument which is name so it turns out that it's not possible to provide multiple init methods in your python class if you provide multiple init method in your python class the init method which you define at last will be considered as the main init method and other will be overwritten okay so whatever init method you define at last that signature of init method will be valid and all the other init method which you will create will be overwritten by the last init method okay so let's provide the argument name here so i'm going to just provide one argument here and then run this code and it works perfectly fine okay let me just reverse this order so instead of using this init at the top i will use the init which doesn't take any parameter at the bottom now okay and we provide this argument and let's run the code and now once again we get the error which says init takes one positional argument but two were provided so one positional argument means that this init only takes the self argument and nothing else but here self is provided automatically but we are providing an extra parameter here which is not required and that means this in it which we have defined later is valid and this previous init is not valid so always remember it's not allowed to use multiple init method in the python class but if you do this the last init method will be a valid init method and all the other init method will be the invalid init method now one more question you may ask here what if i want to create both kind of instances one which takes no argument here and other which takes one argument or multiple arguments here so the answer is in my previous video in which i have shown you how to provide default value to your arguments so let's say i provide a default value to my argument here now i will create two instances of the same class one takes no argument and other takes one argument and when i run this code no error appears here okay so if you want to create a init method with multiple parameters you can either use this default value for your init method parameters or what you can do here is you can use this parameter which takes a tuple so in the previous video we have seen that we can provide an argument with asterisks in front of it and this means that we can provide multiple parameters to our method here and when we run the code it's also valid we can also provide multiple parameters here and it will also be totally valid so i am going to run the program once again and you can see it's totally valid so if you want to provide multiple parameters to your init method you can use this kind of notation or you can provide the default value to your parameter or the last thing you can use is you can use for example this type of argument which takes the keyword so kw args here okay and this also we have seen whenever you use this kind of notation that means you want to provide the dictionary right key value pair so let me provide some kind of key value pair let's say name is equal to some kind of name here and then let me run the code and it's totally valid it doesn't give us any error so even though multiple init methods are not allowed in python you can use these type of notations in order to give variable length argument in your init method now let me just remove all the parameters from here and this instantiation from here also and let's take the next question so let's say i want to remove this pass keyword from here and here i want to initialize some values so self dot name is equal to let's say we will provide some name so i'm going to provide a argument called name and self.name is equal to name here and then let's say self dot age here and we provide some value which is not taken from the argument but we provide some static value here is it allowed yes it's totally allowed right so if you want to provide some default value for your attribute you can absolutely provide that without even passing it as an argument so it's not necessary that all the attribute values you need to provide from this argument list you can provide any default or static value here which is not coming as an argument so i hope that clarifies some more details about this init method in this video we will learn how to use encapsulation in python encapsulation is one of the most important principle in object oriented programming so let's get started i will be using this car class and the rectangle class which we have been using in the previous videos also and let me remove these print statements because we don't want them right now now let's say we want to change the value of speed so if you want to change the value of speed you can simply take your object for example ford dot your attribute name for example speed and then you can directly change it for example 300 and when i run the program it's going to print the new speed which is 300 initially we have set the speed to 200 in here we can also put let's say the speed as string which is very stupid but will it work it works you can see here and this can break the function in which the speed is used so therefore it is very important that we protect our data and only give the access to our data to the other users so encapsulation is particularly important when you want to give your code to some other people because they might want to change your code so let's see how we can encapsulate our code so to encapsulate our code we create functions so let's create a first function which is to set the value of speed so i'm going to just say set underscore speed and inside the parentheses it's going to take self as the first argument which is the default and second is the value of speed so so i can say value here right and then once we have the value of speed we can just call self dot speed is equal to value similarly we can create a get method for the speed so right now we have created the set method to set the speed and now we are going to create a get method to get the speed and in order to get the speed we don't need to pass any argument we just need to return this speed which is already set so we can just write return and then self dot speed so we have created two functions set and get these are also called setter and getter for the attribute which is speed in our case so let's use these functions instead of this kind of setting of data so first of all i'm going to call this ford object dot set speed method out of this object and then i'm going to pass the new speed using this set method now in order to get the speed i can write instead of this forward dot speed i can just write the 4 dot get speed which is going to give me the speed of this forward object so i'm going to run the code and you can see it prints the speed which we have set using the set method but still will this protect your data let's see so i'm going to once again try to use ford dot speed and then i will try to set the new value of speed will it be a problem no so you can see when i try to get the speed the new speed is set and we want to prevent this kind of setting of data using this equals to symbol so we need to somehow make our attribute private now if you are familiar with other object oriented programming languages like java or c plus plus they use the keywords like public private or protected in order to mark their attributes or the member variables as the private or public or protected but python doesn't have any of these keywords so how we can make our data private so let me give you first of all an example so i'm going to go to this class which is hello and here i'm going to set some values so first value is for example self dot a is equal to 10 second value is self dot underscore b is equal to 20 and the third value is self dot underscore underscore c is equal to 30 so we have created three member variables in this hello class one is a second is underscore b and the c is with two underscores in front of it and let's try to access all these three values so i'm going to just use the print method and then the hello object dot a and similarly i will use this print to get the value of dot underscore b and also dot underscore underscore c and let's try to run this program and let's see what happens and you can see here the first value which is printed here is 10 which is the value inside the a variable so this code was executed successfully now we can see here that 20 is also printed that means this code is also executed successfully but at the time of underscore underscore c when we want to use this underscore underscore c outside the class it says hello object has no attribute called underscore underscore c and this is the point so underscore underscore you can use to make your attribute private okay so this is a convention there is no keywords like private in python that's why python uses this kind of convention in which whenever you use double underscores it makes your data private when you use single underscore that also means that it's a private variable but this is only a convention nothing stops you to change the value of underscore b or accessing the value of underscore b okay so if you truly want to make your data private then use double underscore in front of your variable when you use single underscore that means it's a partially private variable and it's only a convention okay so let's go to our car class once again and now we know that we can add double underscore in front of our variable name so we have two variables here one is speed so let's add double list underscore in front of speed and also let's add double underscore in front of this color variable to make both of them private so i'm going to change this value of speed in getter and setter also and now let's try to access this value using this ford object which is underscore underscore speed now let's try to run our program so i'm going to change the file and then run our program and you will see that it's going to give us an error and this error says the car object has no attribute called color because this variable color is private now also you will observe that the value of the speed is 300 which is set by this set function even though we have set the speed again to 400 using this underscore underscore speed but this speed is not changed right so we cannot change the speed using this underscore underscore variable because now it's a private variable and that means we cannot change the value using this variable we need to use this set function in order to change the value of the speed also if you want to use this underscore underscore color here and let's run the code this will also give you an error because this underscore underscore color is private so either you can remove this code or you can create the setter and get a method for the color also so let's create the setter and get a method for the color and now we can access the value of color using the get color method right so instead of this get speed we can just write 4 dot get color and it's going to give us the value of color and now you can see that there is no error and the speed here is 300 which we have set using the set speed method and the color is red which is the color we have given using this argument in the constructor and this type of restricting your data access using functions is called encapsulation let's do the same thing with our rectangle class also and let's create the setter and get a method inside the rectangle class so you already know we can use this define and then we can first of all set for example set the height first of all and then we can give the value of height here and then self dot height is equal to height right and don't forget you need to give double underscore in front of your attributes in order to make them private so i'm going to do just that and let's create the get height method also so now we have created the setter and getter for the height and let's do the same for the width also so now you have made the height and width as private and we have created setter and getter for the height and width and now in order to calculate the area we can define one more method here which is the area method so let's create the area method here and this area method is not going to take any argument we are just going to return the multiplication of the height so self dot height multiplied by self dot underscore underscore width okay which will give us the area of this rectangle and we can call this area method instead of using this kind of notation so rect 1 dot area and rect 2 dot area also let's run the code by changing the file name here and run this code and you can see the area is printed now so this is how you can use encapsulation in python in the last video we have seen how to use encapsulation in python and we have also seen how we can declare private member variables in python to declare a private member variable we use double underscore in front of your variable name and this variable becomes private but the question is what exactly is a private member variable so a private member variable is private to the class that means you can use this private member variable inside the class but as soon as you use it or access it outside the class it will give you an error so you cannot access a private member variable outside a class and the example we have already seen so here you can see i try to access this private member variable outside the class and when i run the code it says that there is no underscore underscore c attribute for this hello object why because whenever you create an instance and if the member variable is private this private member variable is invisible to your object so you cannot access the private member variable outside the class but can we use this private member variable inside the class let's see so i'm going to declare one more method here and i'm going to name it as public underscore method and this doesn't take any argument but what we have learned about the methods in a class that even though you don't pass any argument to the method you have to provide at least one argument which is the self argument and what is self self is the current object so let me just print something here quickly for example public here so can we use this private member variable inside this method let's see so i'm going to just write self dot underscore underscore c and then i'm going to run this code and let me comment this line because this was giving us an error and instead we can use this public method so i can use an instance of hello which is hello dot public method and let's run the code now and you can see there is no error that means you can use your private member variables inside the class or any method of the class now the other question is what is a public member variable like a here so a is a public member variable because it doesn't contain any underscore underscore in front of it and that means you can use this public member variable inside the class as well as outside the class so if i want to use this public member variable inside the class also i can just use self.a and then run the code and it's totally fine it doesn't give us any error let's print the value of those two member variables and once again run the code and it will print the value of a and c and then this message which we are printing here which is public here now the next question is how we can define a private method in the class so let's see how we can define a private method you already know most probably which is by using double underscore in front of your method name so for example underscore underscore private underscore method and then i'm going to just print something inside this method let's say private so this is a private method and how you can define a private method using these double underscore in front of the name of your private method and the restriction will be the same on the private methods also so let's try to access this private method outside the class so i have this hello instance and when i press dot here you will see there is no suggestion for this private method because pycharm already know that this is a private method so it doesn't show this method in the suggestion when you use this object outside the class but let's try the brute force and let's try to use this method outside the class and when i run this code you will see once again you will get an error which says hello object has no attribute underscore underscore private method so private methods also you cannot use outside the class but inside the class absolutely you can use your private methods so how to use your private methods inside the class so you can use your private method inside the class using once again a self keyword so you write self dot and then your method name for example private method and that's how you can call your private method inside the class using self so any method you want to call inside a class you do it once again using this self keyword as you do with your member variable and once again when i run the code now it prints private using this statement and this statement is executed when we call this private method from here so i hope this video will clarify some more doubts about the private member variables and private methods in python in this video we will talk about python inheritance so first of all what is inheritance in python so classes in python can be extended creating new classes which retains the characteristics of a base class and this process is known as inheritance now in simple words the idea behind the inheritance is that a new class can borrow the behaviors and methods from the another class now the inheritance involves two types of classes one is a super class and other is a sub class now the sub class inherit members of the super class on top of which it can add its own members for example any other member methods or variables so here subclass is the one who is doing the borrowing of the members and the superclass is one from which subclasses borrows these kind of member methods and variables now if this inheritance sounds to be a little bit confusing to you let me give you an example so i said in inheritance there are two type of classes one is a super class and other is a subclass now in this example i have taken polygon as a super class and two classes rectangle and triangle as the subclasses now if you see carefully what is the relationship between rectangle and polygon and triangle and polygon so rectangle is a polygon right and a triangle is also a polygon that means the rectangle can inherit some properties from the polygon class also triangle can inherit some properties from the polygon class and the relationship between the superclass and the subclass is defined by a relationship called is our relationship so rectangle is a polygon and triangle is a polygon also that means that rectangle and triangle can inherit from the polygon class so in inheritance the subclasses have uh is our relationship with the super classes so let me give you one more example so as a super class you can take an animal class and then as subclasses you can create a dog class cat class red class because all of them are animals so dog is an animal cat is an animal rat is an animal so always remember when you use inheritance there is a is our relationship between superclass and the subclass now let's take our real life example and let me try to explain you this concept with some code so i'm going to create a new project in my pycharm ide and this i'm going to name it as inheritance and i will choose this option open in current window and also this option which says add to the current opened project which is going to create the project in the same window so now this project is created so i'm going to go inside this project and i'm going to create a new python file here and i'm going to name this file as polygon because we are going to create a polygon class and inside this polygon dot py file let's first create a class called polygon and inside this polygon class what are the attributes which we want to add here so rectangle and triangle what are the common things which they both have they both have the width and the height so we are going to first of all create a variable called width and we will initialize it by a value none the none keyword is used whenever you want to assign nothing to your variables right in the same way i'm going to use height and i'm going to assign none to that also now what i'm going to do is i'm going to create a method here so let me define a method using def and i'm going to use this method to set the values of width and heights and this method is going to take two argument one is the width and the other is the height right now if you remember in the last video i have shown you how to make your variable private so you use double underscore in front of your variables to make them private so i'm going to add this double underscore in front of width and height that means these two variables are private now using the set values method i'm going to just set the values of the height and width so self dot underscore underscore width is equal to width and self dot underscore underscore height is equal to height so this is the polygon class which we have created and it's a super class in our case right and now let's define two subclasses one is a rectangle and other is a triangle so let's define other class called rectangle and inside this rectangle i'm going to define one method let's say this method is a area method and this area method is going to give us the area of the rectangle and what is the area of the rectangle the area of the rectangle is the multiplication of the width and the height similarly i'm going to define a triangle class also so let me define the triangle class here and let's say this triangle class also have this method which is area now what is the area of a triangle the area of the triangle is the multiplication of width and height divided by two so we are going to divide the multiplication of width and height by two this is the area of the triangle so now we have defined three different classes and we are saying that polygon is the superclass and rectangle and triangle is our subclasses now how we can inherit the properties of the super class which is polygon into our subclasses which is rectangle and triangle so in order to inherit from one class to another you use this parenthesis and inside the parenthesis you write the name of your super class and that means your rectangle is inheriting from the polygon class similarly when we write this parenthesis and the polygon class here that means triangle is inheriting from the polygon class now when a sub class inherits from a super class the super class member variables and methods are accessible also using the sub class also so let me give you an example so i'm going to create the instance of rectangle first of all so let me just write rectangle so this is the rectangle instance and let's create a triangle instance also and now once we have triangle and rectangle instance let's use this rectangle instance and when you write dot here you can see intellisense says that area is available for this object and set value is available for this object so when you use set value you can see we haven't defined the set value method inside the rectangle but because we are inheriting from the polygon class into our rectangle class all the members of the polygon class are available using the rectangle object also and what this method takes it takes the width and height so we are going to provide the width and let's say height 50 and 40 and once again we are going to use the triangle object and we use the set values and this time also let's say i'm going to provide the same values here and what does this set value method is doing it's just setting the values of width and height inside the polygon class now in order to calculate the area we can call the area method from the rectangle and the triangle class so let's just do that and i'm going to do this inside a print method and i'm going to just call the rectangle object dot area which doesn't take any argument and the same i'm going to do for the triangle object also so triangle dot area so what do you think will happen now so let's run the code and let's see what will happen so i'm going to right click on this file and i'm going to just choose run a polygon and it's going to run the program and you will see it gives us an error and what is the error the rectangle object has no attribute rectangle underscore underscore width that means because this width and height are private member variables of the polygon class they are not accessible from the subclass which is the rectangle class and the triangle class so you cannot inherit the private members from the super class into the subclass so what is the solution here so what we can do here is we can create the getter methods for the width and the height so i'm going to do exactly that so let's define a method called def get underscore width and it's going to take no argument and it's going to return the value of the width so using self we can access the value of underscore underscore width in a same way we can define a method called get underscore height here and it's also not going to take any argument but we are going to return the value of the height here so self dot underscore underscore high so now we have created the getter methods for the width and height and these getter methods are the public members why they are public because we haven't used the double underscore in front of these two methods and these two methods now we can use in place of these private member variables which we were trying to inherit in the subclass using the super class so instead of underscore underscore width we can write self dot get width and also here instead of underscore underscore height we can use get height similarly we will do the same for the triangle class so get width and the get height dot get height now let's run the program again and let's see what happens and now when i run the code it gives me the area of rectangle using this print line statement and then it's going to give me the area of triangle which is exactly the half using this line of statement so let me once again minimize this and let's recap what we have learned so we have created a super class and two sub classes super class is polygon and sub classes are rectangle and triangle and in order to inherit from the super class you just use parentheses and the name of your super class and that means in our example rectangle is inheriting from the polygon class next what we have learned is all the public member variables or the methods are accessible from the subclass from the super class so set value method and getvalue method is accessible because they are public methods but underscore underscore width and underscore underscore height are not accessible because they are the private member variables so you cannot inherit the private member variables into your sub classes now we have seen this example in which we have created two instance of the classes one is rectangle object from the rectangle class and the other is triangle object from the triangle class and first of all we have used the set method which is coming from the polygon class it's not the part of the rectangle or the triangle class to set the values of width and height and then we have just called the area method from these two classes in order to give us the area so this set method is used to set the value so it has set the value of width and height and using this get method get width and get height this value is returned and this value is returned into the sub classes and then the multiplication of these two values gives us the area here and the multiplication of these values divided by 2 gives the area of the triangle here so this is how you can use inheritance in python hey guys welcome to the next video on python tutorial for beginners in this video we will discuss how to create modules in python now in the previous videos i have already discussed briefly about builtin modules and how to import a builtin module you use an import keyword and then you use the name of the builtin module in python builtin means this module is already present in python so we can use these builtin module in order to perform some functionality so for example this math module helps us to perform some mathematical operations now first of all what is a module so it turns out that a module is nothing but a python file now to prove my point let me just hover over this math module and just press ctrl and then hover over it so right now i'm pressing ctrl and i'm hovering my mouse over this math on the pycharm ide and now i'm going to click it and when i click it you will see this module is nothing but a file right and inside this module we have a number of functions which we can use for example a cos function or a tan function or many different functions which we can use from this math module so a module is nothing but a python file now if a module is nothing but a python file why don't we create a module and it turns out that python allows us to create our own modules so let's create our own modules and let me show you how you can create your own module and right now you can see in my project there is only one file which is hello dot py and it's empty right now now to create a module i'm going to just create a new file so right click and then new python file and this module i'm going to name it as my functions and then press ok and this file is created so now i have two files in my project one is my functions and other is hello dot py so let's say i want to create some functions inside this my functions dot py file so let's create some function i'm going to very quickly create some very basic functions which you already know in python so so let's say add function which returns the addition of two numbers and also let's create let's say multiply functions so multiply and this is going to just give the product of two numbers so let's say this is our module and it has two functions now somehow i need to use these two functions from my functions dot py file into this hello dot py file now as you can see these two files are in the same directory right so i can import this my functions file using import and then the name of the file which is my functions and that's it so in order to import a module you just write a keyword called import and then you just write the name of the file without the extension py okay so you don't need to provide any extension here and then i can use this function so let's say i want to print my function which is the file name so whatever file name you give here you need to use the file name here dot you will see all the functions in the file are now visible in the other file which is hello dot py so let's use this add function and i'm going to just give two parameters here and also let's use the multiplier functions from the my functions files so the file name and the method name or the function name and let's give two parameters here also and that's it so it's that simple to create your own modules and import them into other files in python now when i run this program it's going to give me the addition and the product of these two arguments which i have provided here now let's say your my functions file is in some other directory so let me create a directory so i'm going to right click here and then i'm going to create a directory and i'm going to name it as dir and then click ok and now i'm going to move this my functions dot py file into the new directory so i'm going to just right click and cut from here this file and i'm going to just paste this file into the dir directory okay so let me just click ok here and as soon as i do this you will see here pycharm is intelligent enough to refactor this code and now it has given us the correct import okay so if this my functions file is in some directory then you use this type of notation so you write from and then your directory name and then import keyword and then your file name so you can see this is the directory name and this is the file name so i use from directory name import file name and when i run the code once again it's going to give me the same answer now there is one more way of writing the same notation and that is using the import so use import keyword and then write the name of your directory dot the name of your file so directory dot the file name and then you use this name in place of your my function name okay and once again when you run the code it runs fine now sometimes you might feel that this is a long name and python have the solution for it also so it turns out that you can rename your file using a keyword called as so after the import so import directory name dot file name as and then you can provide your name for example my functions i will just name it as mf okay and now i can use this mf name instead of this big name and this will also work fine so either you can import from your file which is inside the directory using this notation or you can use this notation you can also write as in front of this notation also so from directory name import file name as whatever name you want to give here and this you can use to call your function using this dot notation now this was the easy stuff and i have just written here the two functions and then imported these two functions into the other file but what if if i have multiple classes i haven't shown you how to import files which have classes in them so let's see how to import the python files which have classes inside them so i'm going to close these two files and in the last video i have shown you how to use inheritance in python and we have created this class polygon and two other classes which is triangle and the rectangle class and this might be right now the perfect candidate to import into some other file so i'm going to create two more file one is the rectangle file so i'm going to just right click and create a python file and i'm going to name it as rectangle and i'm going to create one more file with the name of triangle so right click new python file and the name is triangle.py and let me create the fourth file which i'm going to name it as main and this will be our main file in which we will import all these classes so in my polygon class i will just leave this polygon class and i will just transfer this rectangle class into the rectangle dot py file and this triangle class into triangle dot py file and also this was the instantiation of the rectangle and triangle class which we have done so i will transfer this code into our main dot py file okay so now we have a polygon dot py file in which we have the polygon class and then we have the rectangle class inside rectangle.py and also we have the triangle class into the triangle.py file and rest of the code we have inside the main dot py now when you go to the rectangle dot py you will see that it's inheriting from the polygon class that means we need to import polygon class into the rectangle dot py file so how to import it you can use from and then the file name which is polygon and then use import keyword and use the name of the class which is polygon and you will see that this error is gone and same we will do inside the triangle dot py file in order to import the polygon class into the triangle dot py file so this is the file name so from file name import the class name now when i go to the polygon class we don't need to import anything here because it's a super class and there is no import needed here let's go to the main dot py file and here you will see red squiggly line under rectangle and triangle class because we haven't imported this triangle dot py and the rectangle dot py into our main dot python file so the procedure is same from your file name which is first of all rectangle import the name of the class which is rectangle same we will do for the triangle class so from the triangle file name triangle.py and then import and then the name of the triangle class and you will see as soon as you do this the error is gone so now there is no red squiggly line under any of the code so now let's run the code so i'm going to just go to the main.py file and i'm going to right click on this main.py file and i'm going to just click on run main which is going to run the program and it's going to print the result which is the area of rectangle and the area of the triangle so in this way you can import the py file which have classes inside them so this is how you create your own modules in python and import them into other python files in this video we will talk about multiple inheritance in python so first of all what is multiple inheritance so the ability of a class to inherit from more than one class is called multiple inheritance and in python a class can inherit from more than one class so let's see an example which shows us how to inherit from multiple classes now i will be using this example which i have already shown you in the video where i have shown you inheritance in python so there is a class called polygon which is a super class and the other two classes are triangle class and the rectangle class which are the sub classes and these two classes are inheriting from the polygon class and i have also one more python file which is main dot py and in this main dot py i'm just importing these two rectangle and triangle class and creating an instance out of them and then setting the value of width and height and then we are printing the area of the rectangle and the triangle so if you haven't seen the last two videos just watch those videos because i will be using the same code in order to show you how to use multiple inheritance so let's get started so what i'm going to do is i'm going to create a new python file here and i'm going to name my file as a shape and i'm going to use this shape dot py to create a class called shape so let me create a class quickly and i'm going to name it as shape and this method i'm going to define a private variable called color and i'm going to initialize it with the value none and then i'm going to define the setter and getter for this color attribute so let's define those so now we have defined the setter and getter for this color attribute now if you remember what i told you about inheritance and that is whenever you want to do inheritance between a superclass and a subclass there is a is a relationship between the subclass and the super class so rectangle is a shape and triangle is also a shape so that means we can also use this shape class as the super class in rectangle and the triangle classes so let's use the shape class into the rectangle and triangle class as the super glass so first of all i'm going to import this shape class from the shape file so let's import this and same i will do in the triangle class also and now how to inherit from multiple classes into our subclasses so we have already inherited from the polygon class and in order to add one more class here you just need a comma separator and the name of your class so this is how you inherit from multiple classes you just use the parenthesis and then the name of your classes separated by the comma that means the triangle class is inheriting from the polygon class as well as the shape class the same we will do in the rectangle class i will just provide the comma here and then i will just write shape here and now i will go to the main dot py file and once you do the multiple inheritance that means all the public methods of the shape class is available in the sub classes which are triangle and the rectangle so i can use this kind of notation first of all i'm going to use rectangle class to call the method called set color so i'm going to set color from here and let's say the rectangle color is red and then i'm going to use the triangle object to call the set color method once again and the color i want to provide here is let's say blue okay and in order to get those two color values we can once again write print the instance name which is rectangle dot get color and same we will do for the triangle object also so print triangle dot get color and that's it so now all the public method of the shape class is also available in our rectangle and the triangle classes and we can use all the public methods of this shape class into the subclasses and let's run the code and let's see what happens so the code is running and you can see it prints red and blue using these two statements so this is how you can do multiple inheritance in python in this video i'm going to show you how you can use a builtin function called super in your python classes so let's get started so to start with i have two classes here one is the parent class and other is the child class and here parent class acts like a super class and the child class acts like a sub class which is inheriting from the parent class now both these classes have this init function and you already know what does this init function do it is the first function which is called when an instance of a class is created and here i'm just creating the object from the child class now what do you think will happen will this constructor will be called or this constructor will be called because we are inheriting from the parent class into the child class so let's find out so i'm going to run this code and it prints child in it that means this statement under the child class init method is executed and this method is not executed now in some cases you might want to pass some parameters also into your super class for example i'm just going to give this example let's say i want to pass a argument called name here and then i will just print the value of name how can i call this init function using this child class instance so it turns out that there is a function called super in python that allows us to refer to the super class implicitly now this super function is a builtin function which returns a proxy object that allows you to refer to your super class so let's try to use this super function so you just use the keyword super and then give these parentheses because this is a function and then this super function will return the proxy object of the super class that means i can use this dot operator to call the init method from the super class so this notation means super dot init means we are calling the init method from the parent class and that means we can pass the name from here so let's just pass this name i'm going to just write max here and now i'm going to run this code and now you will see that child init is printed using this statement first of all and then using the super function the init method of the parent class is called and then this name is passed here and it prints parent init and the name whatever name we have provided here so this super function allows us to refer to the super class now let me show you one more thing which is called the method resolution order and you can find this method resolution order by using your class name so child class name dot underscore underscore mro so just write underscore underscore mro underscore underscore and this statement i'm going to use inside the print function so we can see the result what it returns so i'm going to run the code now and you can see it returns this kind of order so as the name suggests mro stands for method resolution order and this is the order in which the methods are called inside your child class or the parent class and this order means that all the method in the child class will be executed first and then all the method in the parent class will be executed now there are some rules based upon which this order is calculated and these rules are the first rule is the method inside your subclass are always called first and then whatever the method inside the base class they will be called and the second rule is related to multiple inheritance so let me just create the second parent class and i'm going to name it as parent two and here also i'm going to just write parent two here and let me inherit from the parent to also in the child class right and let's run the code once again and now you will see this order so once again child is printed and then the parent and then parent two and then the object so the second thing on which the mro depends upon is the order in which you inherit from the parent class or the super class so in our example we were inheriting from the parent class first of all and then parent two and in the same order this mro also will be decided so all the method in the child class will be executed first and then all the methods inside the parent class whatever you use first here will be executed and then whatever superclass you write after that those method inside the class or superclass will be executed next and then at last this is the base object now let's try to just reverse this order and once again let's run the code and you will see that this order will be reversed so the method resolution order will tell you which class method will be executed first and then the order of all the methods from the super classes now one more interesting thing which you will observe here is this output so i said that this super function is used to refer to the super class and now we have two super classes that means multiple inheritance and you will see here that only one output is printed which is from the init method inside the parent two and this statement is not printed which is inside the init method inside the parent class so how to solve this problem so if you have multiple inheritance then you need to manually call these init function using the class name so let's say i want to call the init function first of all from the parent two class i will use parent two dot init and then you need to give also the self as the first parameter and the second which is the name in the same way you use the second class which is parent dot init function and then first parameter is the self and then you can pass any other name for example tom here and let me run the code and you will see it calls first of all paren2init function and we have passed max here as the name and then it calls the parent one init function with the name tom which is printed here also so this is how you can use super function in python in this video i'm going to show you what is composition and how to use class composition in python so to start with i have two classes here one is an employee class and other is the salary class now in the salary class i have this init method which takes two argument pay and bonus and it sets these two arguments to the member variables of this class also i have a method called annual salary which is used to calculate the salary now in the employee class i have this constructor which takes four arguments which is name age pay and bonus now what do you think can we apply inheritance here the answer is no because there is no is our relationship between salary and employee so employee is not a salary and salary is not an employee but somehow i want to delegate the responsibility of calculating the employee's salary to the salary class because calculating salary is in itself is a big task i have just simplified this class in the form of just calculating the annual salary but the employee can have his own taxes or he has taken some leaves or many factors affects the salary of an employee so this salary calculation let's say we want to delegate to the salary class but whose salary is this this salary is the employee's salary so we know that we cannot use inheritance here but we can use a concept called composition here and the composition means that we are just delegating some responsibility from one class to the another class so how to delegate this responsibility we can just create one more variable here for example self dot obj underscore salary which is the salary object we are going to create using the salary class okay and this salary class takes two parameters one is pay and other is bonus which we are already providing using the employee init method so i'm going to just pass this pay comma the bonus into the salary class so we are instantiating the salary class inside the employee class so here one class which is an employee class acts like a container of the other class which acts like a content okay so salary class is the content and the employee class is the container of this salary class now in order to calculate the total salary we can define one more method here and i'm going to just say total underscore salary and then what we are going to do is we are going to call our object salary member variable because this gives us the object of the salary so i'm going to just call object salary and we can call this method from the celery class which gives us the annual salary and now i'm going to just create the object of this employee class so let me just write emp is equal to employee which takes four parameter first is name second is the age third is the pay so let's say pay is 15 000 and the bonus is 10 000. and now i just want to print the total salary of this employee so i can just write print and then emp object dot the total salary which is total salary method and you can see here this total salary is returning let me just use the return keyword also because we are returning this annual salary from the salary class using this total salary method so let's run the code once again and let's see what happens and you can see annual salary is printed and this annual salary is calculated using the salary class so what this employee class has done it has delegated some responsibility to the other class which is the salary class which gives us the annual salary of an employee and this here is called composition now one interesting thing which you will notice here is we are not instantiating salary here we are just instantiating the salary inside an employee class so as soon as you delete an instance of an employee the salary class instance will be automatically deleted so whenever you want to delegate some responsibility of one class to the another class it's called composition one more example of composition can be a book class and a chapter class so a chapter is not a book and book is not a chapter but we can delegate some responsibility from a book class to the chapter class so this is how you can use composition in python in the last video we have seen how to use composition between classes in python in this video i'm going to show you how to use class aggregation between classes in python now if you haven't watched my last video in which i have shown you how to use class composition in python i will highly recommend you to watch that video because i will be using the same code to demonstrate how aggregation works in python so in the last video we have created two classes one is an employee class and other is the salary class and then we have used the celery class inside the employee class and we have seen how composition works in python so employee class is delegating some part of its responsibility to the salary class and that is called the composition now in composition the relationship between the classes which have some association is represented by a keyword part of so salary is the part of employee so the keyword we use in composition is part of now let's see how we can use aggregation instead of composition between these two classes so let's say i will not use this salary class inside the employee class but what i'm going to do is i'm going to pass an instance of salary here so i'm going to just write celery and this will be the object of celery class which i'm going to pass in the init method of the employee class so let's create an object of the salary so i'm going to just write salary here is equal to the celery class and we will instantiate the celery class by these two argument which we have given in the last video to the employee class so i'm going to just copy these two arguments and paste it here and i'm going to remove this comma here so now what we are doing here is we are first of all instantiating the salary class and now the salary class we can pass to the constructor of the employee class and this is the object which we have passed using the salary class object and then i'm going to take the salary class object and i'm going to assign the salary class object to the member variable of the employee class which is obj underscore salary now because we are passing the salary object that means this member variable is the salary member object and we can call any public method from the salary class using this member variable now so let's run the code and let's see what happens and we get the same result as we have seen in the last video in the composition example so what we have done differently here so instead of using the salary class inside the employee class we have first created an instance of the salary class and then we have passed this instance to the employee constructor which can be used inside the employee class and this type of relationship is called aggregation now let's see what are the special properties of the aggregation the first property is the relationship between the associated classes in aggregation is defined by the keyword has ah so employee has a salary because now we are first of all creating the salary object and then passing it to the employee so now we are not directly using salary inside the employee class the second property of aggregation is the associated classes have unidirectional association so we are just passing salary object to the employee class we are not passing employee object to the salary class so it's a unidirectional association only salary can be passed to employee not the other way around and the third property of aggregation is we have created the salary object and the employee object so both these objects are independent of each other so if one object dies the other survive so both the object are able to survive individually so these are the three properties of aggregation now let's see the difference between the composition and the aggregation so i'm going to split the screen so i'm going to just right click on this tab and i will say split vertically and here i'm going to open the example of the composition so on the right hand side i have the example of composition and on the left hand side i have the example of aggregation let me just maximize this so you can see it and now let's discuss about the differences between the composition and aggregation so the relationship in composition is defined by a keyword called part of so salary is the part of employee in aggregation there is no part of relationship but the relationship is defined by the keyword called has a so now in aggregation we are defining the instance of salary and then passing it to the employee class and salary is not the part of the employee class we are just passing it to the employee class so aggregation we use has our relationship and in composition we use part of relationship the second difference is when you delete the employee object the salary object will be automatically be deleted so salary object is dependent on the employee class but in aggregation the salary object and the employee object are individually independent so they can survive individually if one object dies then it doesn't matter that the other object dies because we have created these object individually now in composition both salary and employee are interdependent on each other but in aggregation the relationship is unidirectional so the association between the employee and the salary object is unidirectional we can only pass the salary to the employee class but we cannot pass the employee object to the salary class so these are the three major differences between composition and the aggregation in this video we will talk about creating abstract classes in python so let's get started so to start with i have here two classes one is a shape class another is a square class in shape class i have two empty methods one is area and other is parameter and i'm using shape as a super class and square as a subclass and square class is inheriting from the shape class now in this example i want to do two things one is i don't want to allow the other users to create an instance of a shape class because shape class acts like a template for the square class so i don't want to allow those users to create an instance of this shape class so let's see right now if we can create an instance of this shape class or not so i'm going to just write shape is equal to shape and when i run the code my code runs fine that means right now i'm able to create an instance of the shape class which i don't want the second thing is i want to make sure that both these methods which are there inside the shape class are implemented inside the square class so i want to make sure that whoever is using the shape class he or she must implement these two methods inside the subclass so how can i achieve these two things now it turns out that abstract classes are just made for that so how to create an abstract class in python the fact is python on its own doesn't provide any abstract class but don't worry there is a builtin module in python which we can use to create an abstract class so let's import this builtin module first so i'm going to just write from abc import capital abc comma abstract method so these are the two things we need to import from this module now this module abc stands for abstract base classes and this allows us to create the abstract classes so how we can create an abstract class using this abc module so what we need to do here is we need to inherit from the abc module into the shape class okay so shape class is inheriting from the abc module now once this shape class inherit from the abc module the second thing what we need to do here is we need to add a decorator here and how to add a decorator we just need to use at the rate and then the name of this abstract method which is like this and let me use this abstract method decorator on top of this parameter method also so what this abstract method decorator does is it makes these two methods abstract and what is an abstract method an abstract method is a method which you must implement in the sub class so when you run the code now it will give us this error which says can't instantiate abstract class shape with the abstract method so once you create any of your class method as abstract then your class becomes the abstract class and then you cannot instantiate this class like this so our first goal is achieved that we cannot instantiate this shape class now because this class is now an abstract class and how to create an abstract class you just need to import the abc module and then you just need to add this decorator on top of your method and if you do this even with one method in your class then your class becomes abstract so now we have removed the instantiation of this shape class but now when i try to instantiate this square object from the square class let's see what happens so this square class takes one argument which is the side of the square and let me run this code and once again it gives us an error and this error says can't instantiate abstract class square with abstract methods so that means that whenever you inherit from a class which is an abstract class and if this class contain any abstract methods then the sub class have to implement the methods which are abstract so this method area is an abstract method and this method parameter is also an abstract method that means we have to provide the implementation of these two method inside our sub class so i'm going to provide the implementation of area first of all into the subclass and area i'm going to just return as the multiplication of the sides right so self dot underscore underscore side multiplied by itself so self dot underscore underscore side and let's say for now i will remove this abstract decorator from the parameter method and let's run the code once again and you can see it runs fine so there is no error when we instantiate this class when we implement all the abstract method into your subclass so right now there is only one abstract method which is area into the shape class which we need to implement in the subclass and that we have done so we'd see no error here now let's add this decorator abstract method on top of this parameter method also and once again when i run the code it will give me once again this error it's going to give me the same error which says can't instantiate the abstract class square with the abstract method perimeter so we also need now to implement this method also so let's just implement this parameter method inside the subclass once again and what is the perimeter it's four times the size of your square so self dot underscore underscore size and now we have implemented both of them and once again when we run the code it runs fine let's also try to print the area and parameter of the square so i am going to just use this object to call the area method and in the next line i am going to just use print to once again call this object and this time i will call the perimeter method and let's run the code once again and it prints the area of the square and the perimeter of this square so let's rewind what we have learned till now so in python you can define an abstract class by importing this module and this abstract method and this abc stands for abstract based classes and you need to inherit from this abc into the class which you want to make abstract the second thing which you need to do is you need to provide this decorator at the rate abstract method on top of at least one of the methods inside your abstract class that makes your class abstract and what are the properties of the abstract class you cannot instantiate an abstract class so you cannot create an object of this abstract class and you need to implement all the abstract method into the sub class which is inheriting the abstract class so this abstract class acts like just a template for other classes which wants to inherit from this shape class so this is how you can use abstract classes in python in this video we will learn how to use exception handling in python so first of all what are exceptions so an exception is an event which occurs during the execution of a program that disrupts the normal flow of the program so basically exception is an unexpected event which disrupts the normal flow of the program so let me show you some examples of exceptions which may occur during the execution of a program so to start with i'm going to open the pie charm python consoles and then i'm going to maximize this pycharm python control and let me also just clear this terminal so we will start from the top so let's say we have a number and we divide this number by zero and when we press enter it's going to give us this exception which says zero division error so this zero division error is an exception when you divide anything by zero in python let me show you some more examples so let's say i want to add a number and a string let's say 10 plus 10 but this 10 is an integer and this 10 is a string and when i run the command it says type error unsupported types for int and string so we cannot add a number and a string in python so this type error is another kind of exception let's say i'm going to just use a variable name a b c which i haven't declared till now and when i press enter it's going to once again give me this exception which says name errors name abc is not defined which is true because we haven't defined the name abc but we are calling this variable which we haven't defined so we get this exception which says name error next let me define a variable and i'm going to assign some double values here one and two and now what i want to do is i want to call some method so you can see some methods are available for this tuple now let's call some random method using this double variable it'll give us an error which says attribute error tuple object has no attribute whatever attribute i have provided here so this attribute is not present in the tuple object also when you call a method let me call some other method which is not there and once again when i press enter once again i get this error which says attribute error because this function is not present in the tuple object so these are all exceptions in python attribute error or name error or type error or zero division error all are exceptions in python now if you want to see more exceptions you can use the help inbuilt method and then you can write builtins and then press enter it gives me the name error once again because i need to first of all import this builtin module so import builtins and i'm going to once again use help and inside the parentheses built in and then press enter which is going to give me this kind of output and when i go at the top of this output so let me just scroll at the top and here you will see under the classes there is an object class and under the object class there is a base exception class and under the base exception comes the exception class and under the exception there is a big list of exceptions which you can see here so zero division error we have already seen or when you scroll down name error we have already seen so all the exceptions which python may throw are all listed here so if you want to see the list of all the exceptions you can just give this method which is help built in but before that you need to import this builtin module and then it's going to show you this kind of output and you will also be able to see all these exceptions in python now let me show you a real life example of exceptions in python so what i'm going to do is i'm going to define some variables here so first variable is result and i'm going to initialize it with the value none and then i'm going to declare two variables let's say a which takes an input and we want to ask the user to provide some numbers so let's say number one using the variable a and in the same way i'm going to declare a variable b which also asks the user to provide a second number but you already know that this input will return the string so we can just convert this string into a float let's say so i'm going to just cast the output of this input string to a float value and then what i want to do is i want to save the division of the two numbers a and b into the result so a divided by b i want to save it into the result and then at last i would just want to print the value of the result let's run this program so right click run the file name and then let me provide some numbers here so 5 and 6 and press enter it's going to give me the result which is the division of these two numbers let me run the program once again and this time i will provide 10 and the second number is equal to 0 here and we know that when we divide some number by 0 we get this exception which says 0 division error and you will also observe that as soon as this error is thrown so this error comes from this line line five so when you click on this line it shows us that this error is coming from this line which is the division of these two numbers and as soon as this exception occurs all the code which we want to execute after that will not be executed so we were printing this result here but it's not printed let me print something else here so i'm going to just say end and once again i'm going to run the program i'm going to provide the same inputs here and you can see neither this statement is printed nor the end is printed so whenever an exception occurs python stops whatever it is doing so in our case whenever this exception is thrown at this line both these statements will not be executed and why these two lines of code will not be executed because we haven't handled this exception so python allows us to handle the exception which we are not doing right now that's why it stops everything whenever this exception occurs so how to handle these types of exceptions so you can handle these type of exceptions using a try accept keyword so just write try and then under the try you write whatever you want to test and then you write accept keyword here so just write accept and then under the accept you write some code which you perform when the exception is thrown so i'm going to just say this error which is float division error okay so this is what i'm going to print and don't forget to put colon in front of accept and try so let me run the code and let me give the same condition so 10 and second is 0 and this time you will see that this exception is not thrown and the result is also printed and the end line is also printed you can see here and also this line is executed which comes from the accept statement which says float division error so whenever you use try accept notation first of all your code under a try will be evaluated and if it throws some exception then whatever code you write under the accept will be executed and then all the other statements will be executed whatever comes after this try accept code so this time no error is thrown and we have handled this error and you can see clearly it says that float division by zero which means it comes to the accept condition so now we are handling this error which is 0 division error now in other condition when this error is not thrown so we will just give some valid value 10 and 5 so no zero division error will be thrown and when i press enter you will see that result will be printed and and will be printed by these two lines but no except statement will be printed so this statement is not executed because this code has not thrown any error because there is no error occurred now as i have shown you that all the exceptions are under exception class so we can also write here exception and then we can just write this notation exception as e and this will show us more details of the error okay so i'm going to just write here error is equal to and then i'm going to just print whatever the content of e is and once again when i run the code and i will give the number with the zero here and you will see it prints this error which says float division by zero so this is printed using this e keyword which shows us the correct error i have also shown you that this exception is the base class of zero division error so for example when i will try to know the type of this error e and when i run the code once again and let me provide this input once again you will see that this error is of type 0 division error so we know that this exception is thrown from this class so instead of writing this generic exception class we can also use this zero division error here and now whenever this specific error is thrown then only this will be printed here so let me run the code once again and let me give this input here and you will see once again this line of code is printed using this statement and that means zero division error is caught by this line of code and then the statement under that is printed now let's say this line of code throws some other kind of error other than zero division error so let me just remove this type casting of float here that means it's going to throw us some other kind of error which is not zero division error and let me run the code now and i will provide two numbers here once again and you will see that now this error is different which is type error which says unsupported type string and float so why is this happening we are catching the exception using this accept keyword but we are only catching the zero division exception we are not catching the type error exception that's why our program is stopped and these two lines of code is not executed so you need to either use the base class of the exception which is this one exception and when you run the code and when you write these input it will be handle and you can see this time type error is caught it's not a zero division error but the type error which comes because the type which we have provided here is string and we are dividing string by a float value which throws this error so if you want to catch all the exceptions you use this base class but it's not a good practice you need to have information about your exceptions so i'm going to once again write this zero exception error here and what i can do more here is i can add one more accept statement here and this time instead of zero division error i can say catch also type error okay so i'm going to just write type error and here zero division error so we know from where this error is coming and when i run the code once again and when i give the inputs you will see that this error is coming from this line of code so this accept statement is catching your exception which is type error now when i just add this typecast of float once again and when i run the code once again and when i provide 10 and 0 once again you will see this error is caught by the other accept statement which is this statement which is used to catch the zero division error so you can also provide multiple accept statement in order to catch multiple exceptions in python so this is how you can do exception handling in python there is more to exception handling which i will cover in the next video in the last video we have seen how to use exception handling in python and we have seen how to use this try accept statement in order to catch the exceptions now in this video also we will talk more about exception handling in python and we will talk about else and finally statement with this try accept statement so i will be using the same code which i have used in the last video so i will highly recommend you to watch the last video if you haven't seen that now to start with at the end of this try accept statement we can also use the else statement so you can just write else and for now i will just print here for example underscore underscore else underscore underscore and also we can use a keyword called finally with our try accept statement and here also i'm going to just print underscore underscore finally underscore underscore so what does this else and finally statement do let's see by running our program so i'm going to run the program and now i'm going to give some valid input so that our program will not throw any errors so i'm going to just divide 10 by 5 and then press enter and you will see what is printed here so first of all else is printed then finally is printed and then the result is printed using this print statement and then at the end this and string is printed so in this scenario there was no exception thrown by the code that's why none of these exception statements are printed so you can use else statement whenever your code does not throw any exception so whenever your code doesn't throw any exception else statement will be executed but when this finally statement is executed so let me give you one more scenario and then we will discuss about the final statement and this time i'm going to intentionally write 0 here which is going to throw the exception and i'm going to press enter and you can see zero division error is thrown which is caught here and this statement is printed first and then this finally keyword is printed using this statement and at the end these two lines of code are executed so once again let's talk about the else statement you can see whenever your code throws an exception then this else statement will not be executed the else statement will only be executed whenever your code doesn't throw any exception but what's with finally statement so we have seen in the case of exception this finally is printed and in the case of no exception also this finally is printed so this finally statement is guaranteed to be executed whether exception occurs or does not occurs so the only code which is guaranteed to be executed in all these lines is the finally statement finally statement is always executed whether your code throws any error or it doesn't throw any error now in which cases you might want to use this finally statement so sometimes whenever you use files you need to close these files after opening them whether the exception occurs or not it is mandatory to close your files and in those cases you can use this finally statement the next example is for example you are using any database and you are opening that database right and for some reason your connection is lost with your database then the exception is thrown and in the final statement you can reconnect to your database using the reconnect code of the database so in final statement you would want to execute that code which you think that have to be executed whether error happens or does not happens so in all those scenarios you can use the finally statement now the next question arises is whether we can use this else and the final statement without the accept statement the answer is you can already see here no so you cannot use this else statement without the accept statement so you have to use accept in order to use this else statement but when i remove the accept and the else statements you can see there is no error now so you can use the try and finally without the use of accept or the else statement because the code under finally will always be executed whether your code throws any error or not so it's independent of this accept statement or the else statement so this is how you can use else and finally statements with the try and accept keywords now in this video i'm going to show you how to raise an exception in python now raising an exception is similar to through an error or exception in the languages like java or c plus plus so python allows us to use a keyword called raise and that raise statement or keyword allows the programmer to force a specific exception to occur so let's get started and let's see this raise statement with an example so to start with i have created a class called coffee cup which have a init method which takes one argument which is the temperature and i'm just initializing the value of temperature using this init method and this coffee cup class also have one more method which is called drink coffee and inside this drink coffee method i have some conditions so if the temperature is greater than 85 then i print coffee is too hot if the temperature is less than 65 then i print coffee is too cold and if the temperature is between 65 and 85 then i print that coffee is okay and here i have created an instance of coffee cup class with an argument which is 75 to start with and i'm just calling this method drink coffee from this object so let's run the code and let's see what happens so because the 75 is neither satisfying this condition nor this condition so the answer which is printed here is coffee okay to drink now when i provide for example 101 temperature value here and when i run the code once again it will say coffee too hot if i say coffee temperature is 10 it says coffee too cold now in these two situations when the coffee is too hot or the coffee is too cold i can also throw an exception and show the user some kind of message so instead of printing that coffee is too hot i can use a keyword called raise and then i can use any class of exception so we can use the exception class or any sub class of exception and you can see this exception class comes in this builtin module so i'm going to just use this exception which is the base class and same i'm going to do here when the coffee is cold and i'm going to comment these two print statements and now when i run the code it throws an exception without any error so it throws an exception and after that the execution of program stops so right now temperature is 10 which satisfies this condition so this exception is thrown and that's why we see this exception so in python we can throw an exception using this keyword raise and this exception class or any subclass of this exception class now in the last video also i have shown you how to see all the sub classes which are under the exception class to see them you can just open your python console and in the python python console you just need to import builtins and then press enter and now you use a method called help and inside the help method you use this keyword builtins and then press enter which is going to give you a big list here and when you scroll up at the top you will see classes here and under the classes you will see base exception and we have used this class which is exception you can see here so to raise an exception you can use this exception class or any sub class under this exception so you can use arithmetic error or you can use resource division error buffer error whatever error is appropriate for your exception you can use from this list so right now i have just used the exception class which is the base class to throw an exception here instead of exception i can also use for example uh exception called value error which is also the sub class of this exception class and now when i run the code it will show me the value error so this is the one way of throwing an exception in python now with these exceptions you can also pass an argument inside the parenthesis so you can write exception and then in the parenthesis you can write the message whatever you want to show when this exception is thrown so here i can just write coffee is too hot and for the another exception i'm going to just say coffee too cold and when i run the code because it's a value exception which comes from this statement it shows the value error exception and then the message which we want to show so we are just showing coffee to cold so here it also prints the same message which we have given as the first argument of this exception error class so you can either raise an exception with the base class exception or the sub class of the base class exception for example value error and you can also give an optional argument here which is the message which will be displayed at the time when this exception is thrown so this is how you can raise or throw an exception in python in the last video we have seen how to raise an exception in python using this raise keyword and we have seen how to raise an exception using the base class which is exception or the subclasses of this exception class for example the value error or any other error which is the subclass of this exception now in this video i'm going to show you how you can create your custom exception classes and use them to raise exception in python so let's get started so i'm going to create a custom exception class here so let me create a class and i'm going to name it as coffee to hot exception and to create your own custom exception class you need to inherit from the exception class so you just need to provide exception as the superclassia inside the parentheses and then after the colon you can just define the init method to provide the message so it takes one argument for example msg which stands for message and now what we need to do is we need to pass this message to the constructor of this exception class and how to do that you can do that using the super function so you can use super and then call the init function here which means we are calling the init method of this exception class using this super function and we just need to pass the message which comes as an argument of your custom exception class to the super class which is the exception class and that's your custom exception class now i can pass this class instead of this base exception class similarly to create the coffee to cold class i can once again write coffee to cold here and instead of using this subclass of exception i can give here my own custom exception class so let's run this program and let's see what happens so because right now the temperature which we have provided here is 10 which means this falls in this condition which says coffee too cold so we are seeing this exception which says coffee too cold and then it's going to show us this message which says coffee too cold now we have made this exception class explanatory enough so that we don't require this coffee too cold message instead of this coffee too cold message we can give some more information for the user for example we can write here coffee temperature and then we can provide the information of the coffee temperature which the user has provided so self dot underscore underscore temperature and same we can provide in the coffee to hot exception message one more thing which we need to do here is we need to convert this temperature into a string so we can use this mesh third str to convert from the integer or the float value to the string value so this is just the type casting from the integer to the string and now we are going to run our program and see what's the result here so you can see now the result says coffee to cold exception and then it shows the temperature which is provided by the user let's say just temperature we change from 10 to 100 and once again run the code now it's going to say coffee too hot and it's going to display the temperature of coffee which is hundred here so let's rewind what we have learned about creating our own custom exception class so in order to create your own custom exception class you need to inherit from this exception base class or the super class and then you can create any custom class with any name and for passing the message which you provide as the first argument of your exception you can just create an init method which takes this message and pass it to the init method of your super class which is the exception class so this is how you can create your own custom exception classes and use them to raise the exception in python in this video we will talk about this special keyword which is underscore underscore name underscore underscore and we will see in which situations we use this keyword and why do we use this special if statement which is name is equal to underscore underscore main underscore underscore so let's get started so to start with you can see i have two files here one is mymath.py and other is test.py both the files are in the same directory in my project so now what i will do here is i will define a very simple method which is add which takes two argument a and b and it's going to return the sum of a and b so we have already seen how to create these kind of simple functions and now what i'm going to do is i'm going to use this print function to call this add function and here i'm going to just give two numbers here so nothing special about this code now what i'm going to do next is i'm going to import this file which is my math dot py file into the test dot py and now i'm going to just use print and then i'm going to use this module name which is my math to call this function which is there inside this mymath.py file and then i'm going to provide two values here once again into this add function so let's say 7 and 6. now let me run this test dot py file first in which i am importing this my math dot py file so right click and then run test which is going to run this program and what you will see here is it prints 26 which is the sum of 10 and 16 which is printed using this print statement and then you will see 13 which is printed using this print statement which is the sum of these two numbers which we have provided in test dot py now i have a simple question is this a correct response because i just want to call the add method from mymath.py file into the test dot py and i don't want to print any result which is coming from this print statement because i just want to use my math mymath.py as a module and we just want to use the functions inside this mymath.py file not any special code which is written here so that's where we use this special condition which is if underscore underscore name underscore underscore is equal to underscore underscore main underscore underscore and under this condition we use whatever code we want to execute and this name is a special builtin keyword in python whose value is equal to either the module name which is my math or its value is equal to underscore underscore main underscore underscore so under what condition the value of underscore underscore name becomes the module name and in what condition underscore underscore name underscore underscore contains this value which is mean so whenever you run this mymath.py file as the main python file so whenever i run this file which is my math dot py file then the value of name becomes this which is underscore underscore main underscore underscore let's print the value of this variable and then we will see how this value changes in different conditions so once again i'm going to run this code and you will see the value of this special variable becomes underscore underscore main underscore underscore so whenever you will run this mymath.py as the main file then only the value of this special keyword underscore underscore name underscore underscore becomes this main value now if i import this my math module into some other file for example test dot py and then use the functions from this module then let's see what happens so i'm going to just right click on the test dot py now and then i'm going to run it and you will see the value of this underscore underscore name underscore underscore is now is equal to the name of your module okay so my module name is mymath.py so here it just prints the module name and you will also see that because we have provided this condition this statement is not executed and only the statement which we have written here is executed because this condition checks for the name value which checks whether we are running this mymath.py file as the main file or we are importing this file into the other file and we are just using the functions inside that module so this condition is similar to for example main method in the c plus or the java programming language and what does the main method do in those two languages the main function is the main entry point of your program so this condition is performing the same operation we can run these two files using the terminal also so in python you can just click on this option which says terminal which opens the terminal in your pycharm ide in the same folder in which you are currently working in and then i can use this python command to call this mymath.py file first of all so i'm going to just use mymath.py which is going to run this math dot py and you can see if we run this mymath.py as the main file then the value of this special keyword name becomes main otherwise when we are going to run this test dot py file in which we are just importing this mymath.pi file and then when i press enter you will see that now the value of this name variable becomes the name of your module which is my math so in this way you can use this special condition in python in this video i'm going to show you how you can create a text file in python and write in it so let's get started so to start with we use a builtin function which is open and it takes two argument first is the name of the file which we want to create or read so let's say i want to just create a file which is demo dot txt in the same folder in which i am working in so you can see i'm working in my file handling project and there is only one file there which is test dot py and this demo dot txt file will be created in the same folder now the second argument which we want to give here is the mode so there are several types of modes which we can use with this open function to work with the files so let me show you the list of some of these modes so you can see on the left hand side i have listed the modes so you can use the r or r plus or w or w plus or a or b now r is used to read from the file and if you don't provide any mode to this function then the default mode is the read mode now if you want to write to a file you use this write mode with a keyword w so we are going to use this w keyword in order to write to the file so let's use this w keyword here and then this open function returns a file object so let's store this file object into a variable now generally we call this file object a file handler and using this file handler we can work with the file on which we are working on so this file handler will be used to work on this file which we want to create now in the next line i will just use this file handler and then i can call some methods here you can see there is a list of methods i can call on this file handler which is returned by this open function so to write into a file i can use the write function and here inside the write function you can provide any text whatever you want to write to the file so let's say i just want to write this line of string to my text file which i'm creating so i can just paste this text here and then after writing to a file when you are finished working with the file you use once again this fh and then call a method called close on it now what does this close function do so this close function is used to close the file and immediately free up any system resources used by your file handler which is fh and it's a good practice to use this whenever you are done with the handling of your file so always remember to use this close function after you are done with the handling of your file so this is a good practice but i would say you must call this function and that's it so this w mode if the file demo dot text doesn't exist it's going to create the file and then it's going to write this text into the file so wmod is responsible for creating the file also and if the file already exists it will overwrite the previous string by the string which you are writing using this write function so let me just run this code and you will keep eye on this project because this file will be created inside this project so i'm going to right click and then run this test file and you will see as soon as i run this test file there is one more file created here which is demo dot txt and when i click on this file you can see the same text appears here which we have written using the write function now if you want to provide the line breaks you can provide them using backslash n and i'm going to once again run the code so remember when the file doesn't exist the w mode is going to create the file and if the file already exists which it does now then it's going to overwrite it so i'm going to run the program once again and see the content of this demo.txt and you can see this string is split into two lines which is done by this backslash n so let me just split the screen so you will see the demo in the real time so on the right hand side i have my demo.txt file and on the left hand side i have this code on which i'm working on so let's write something else in this file so instead of writing this big line of text into the file what i want to do now is i want to use a for loop to print 10 lines into this demo.txt file so i'm going to use a for loop for that and i'm going to just write for i in range and let's say the range is 10 and then we will call our write function using this fh file handler and then what i want to write here is let's say this is line number modulus d and i will just replace this mod d with the line number and then i will just provide the line break after that and in the previous videos we have already seen that when you use this modulo symbol and then give some value here for example i then this mod d will be replaced by this i right so let's run the code and let's see what happens now so i'm going to run this code and now you will see that this code prints this is line number zero this is line number one because the range starts from zero so in order to print the line number from one what we can do here is we can use this parenthesis here let me just move this to the side so inside the parenthesis we can use i plus one so we can add one every time this value of i is printed so it will start from one so let's run the code once again and you can see now it prints this is line number one line number two three four up to ten now you might have already observed that whenever i run the code this demo dot txt file is overwritten every time when i run this code so the old text is overwritten by the new text now in order to avoid the overwriting of the text what we can do is we can use a special mode which is a here and a stands for append and this append mode is used to append the text to the file so let's replace this w mode with the a mode now okay and you can see this is the previous content of the demo.txt file and now when i run the code you will see the previous content is staying there and the new content is appended to the same file so a we use to append to the existing content of the file now let me go to the list of modes once again and you will see there is a special mode w plus also which means if you want to read and write at the same time you use this w plus mode and this mode is going to create a new file if the file doesn't exist otherwise if file already exists it's going to overwrite to the file which already exists also you will see a special mode b here which is used for the binary file such as images or other binary files this r and r plus mode we will see in the next video and i'm going to show you how to read from the file using these modes in python in the next video so let's go to our code once again and in the videos in which i have shown you how to use exception handling i told you we can use try with the finally keyword so try and we can enclose this for loop inside the try block and let's do this and then in the finally we can add the closing of this file and what does this finally do if you remember this finally block is always called in the case exception is thrown by this code or if exception is not thrown so this fh dot close is definitely will be called whenever we use this finally keyword in order to call the fh dot close function so you can either use this kind of code in order to work with your file handler and then use this close function with this file handler at the end of the handling of the file otherwise pythons provide the shorter form of writing the same type of notation and this notation is you use a keyword with and then you call open function and you can provide the same type of arguments here for example demo.txt and append and then you use as keyword and then you write the name of the file handler for example fh as you have done here and then you provide this colon and inside this with statement you work with your code for example we work with the file writing with this for loop so this whole code including the try and finally block is equivalent to this kind of code which is the shorter form of writing the same code so this with statement is going to always call this close method with your file handler when you are done with the handling of your file so you don't need to explicitly call this try finally block in order to work with your file this is enough to work with the file so either use this notation or this notation both are equivalent to each other now the last thing which i want to show here is let me just use the with statement in order to work with this demo.txt file is for example you don't want to create this demo.txt file into the current project instead you want to create this file into some folder on your computer so let's say i want to create this file inside this folder which is inside my c directory so i can just copy this whole path from here and then i can just paste this path with the backslash here and the important thing to note here is on windows you always need to use the double bag slashes in order to provide the file path okay so use these double backslashes to provide the file path so see inside the c directory i have these files folder and inside the file folder right now you can see this is empty and now when i run this code let me just change the mode to w which is for write mode and i'm going to run the code and as soon as i run the code this demo.txt file is created here and you can also see the content of the file on the right side which is this is line 1 up to this is line number 10. so this is how you can create a text file and write into it using python in the last video we have seen how to create a file in python and how to write content in that file in python now in this video i am going to show you how you can read the content of a text file using python now if you remember in the last video i have told you that you can use this open function to open any text file and this open function takes two argument first is the path of the file with the exact name of the file so because this demo.txt file is in the current folder in which i'm working in that's why i haven't provided any exact path i can just give the file name here but if you have the full path then you can provide for example c colon backslash and then whatever is the folder name and then the file name so either you can provide the exact path of this file with the file name or you can provide the file name if this file is present in the same directory in which your python script is there now the second argument which this open function takes is the mode of opening this file so we have seen in the last video when we write w here or a here that means we want to write or append to the file now in order to read from the file this mode here should be r which is the read mode in the last video we have seen this table in which we have seen that we can use this r or r plus mode in order to read the file or if you want to read and write at the same time you can use this r plus mode now if you see here i have also written here that r is the default mode so when i don't give any argument here as the second argument which is for the mode then also the default mode is the read mode so let's see how we can read this file which is demo.txt file and the content of file is shown here so in order to read the file you use the file handler and then use the function for example read which is used to read the whole file now in order to print the content of the file you need to use this print function so this fh dot read will provide the string and then using this print function we can print that string so let's run the code and let's see what happens so you can see it prints the whole content of the file now let me minimize this window once again now let's say if you provide some file path which doesn't exist so this file name doesn't exist in the current folder and when i try to read this file let's see what happens so it's going to throw an error and this error says that no such file or directory so if you try to open a file which doesn't exist it will throw an error so you need to give the exact name of the file in order to read it now here we can also be more specific and we can also say that this is a read mode in which i want to open this file and once again when i run the code is going to read the content of this file now let us say i just want to read the first word of first line here so let's say i want to just read the first four character of this line one then i can just write four here which will read the first four character of the line one now if we just want to read the first two words of this line one then you can see the number of character here four for this and then there is a space so five character and then i as is two character more so five plus two seven so when we write seven here then it's going to read the first two word of this line one now let's say i want to read the whole line so instead of some words or some characters i want to read the whole line then i can use a function called read line and this readline function is going to read the first line of the text which is present in my file so i'm going to just run the code and you can see it reads the first line of my text file now if you want to read the next line then you need to use this readline function once again and when i run the code once again it's going to print the second line and so on so if you want to print the three lines then you use this function three times now let's say you want to read some characters of the line one then you can once again write the number of character which you want to read and then run the code and it will print the first four character of the first line and you will observe that when i use this readline function once again the string starts from the ending of the first line so in the first line we have just used the first four characters of the first line now pointer will be set to the end of this first four characters so when you use the read line function once again it's going to start where the first line has ended so first line has ended at the end of the fourth character and then it's going to read the space and then all the line characters which are there so in the second read line statement it has printed this kind of text which is after the first four characters and in the third read line because we haven't provided any argument here so it has printed the whole line here so let me minimize this now let's say you want to read all the lines of this file in the form of the list so you want to read the 10 lines of this file in the form of list you can use a function called dot read lines so here you just need to write dot read lines and this function is going to give you the list of every line in the text so let me run the code first of all and you can see this is the list which starts from a square bracket and the first element of the list is the first line with the backslash n which is the line break comma the second element of the list is the second line of the text which we are reading from here so now we know that this read lines function returns the list so we can also call some index of this list so let's say i just want to read the fifth line of this text then i can just write index 4 because index starts from 0 right so let me run the code once again and it prints this line which is at the line 5. now let's say i want to read the last line i can just say 9 and it's going to print the line number 10 of your text file let me minimize this once again now let's say you want to read all the lines of this text one by one and do some operations on each and every line one by one so you can use a for loop for that to iterate over the lines one by one so for let's say line in your fh which is the file handler and then you can print the line one by one so you can call this variable which is line here and now let's run the code and it's going to iterate over this text line by line and every line is printed one by one using this print line statement so let's say you want to count the number of characters in every line you can use this function which is l e n function which is used to count the length of a string and when i run this code now it's just going to print the number of characters in every line now once again let's say you want to count the number of words in every line so we can use a function on this line variable which is a function called split so line dot split which is going to split your line on the basis of character you provide as an argument here so let's say i want to split the line on the basis of a space so let me run the code once again and now you will see that it's going to give me the list of each and every word of every line so this is the first element of the first list and then the second element third element and fourth element and the fifth element so if you want to count the number of words in every line then once again we can enclose this code into a function called len okay so this length is going to give you the length of this list and when i run the code once again it's going to print the number of words in every line of this text file so if you want to count the number of words in every line you can split the words using the space and then using this l e n function you can just find the length of the list which is returned by this split function or if you want to just see the list of words in every line then you can just use this function without the len function and it's going to give you the list of each and every word of every line of your text file and of course to make things easier you can also use this with notation which i've also told you in the last video so you can write with and then this open function and in the open function you give these two argument which is the name of the file and the mode and then you can use as fh for example and then you can execute whatever code you want to execute using this file handler for example once again i want to read the content of the file once again so using this with statement you don't need to use this fh.close function because this width function is going to take care of closing of this handler by itself so this whole code is equivalent to the code which you write whenever you use the try finally block with this code also so this is also possible so let me just remove this code and let's run the code once again it's going to give me the same result as we have seen earlier so in this way you can read the text files in python in this video i'm going to show you how to handle json values in python so first of all what is json so json is a text format which stands for javascript object notation and json is a syntax which is used for storing and exchanging data now if you want to know more about json what is json and how to create jsons and what value you can store in json then i have created a whole video about that so you can watch that video and understand more about json so let's get started with this tutorial and let's see how we can use json in python so to use json in python you use a in build package which is called json so you need to import this inbuilt package which is json now let's say i have a python dictionary so let me create a dictionary in python which have let's say so this is a dictionary in python so in order to convert this dictionary into json you use this json keyword which we have imported here and then call a method called dumps so this dumps method we can call here to convert some python values to a json value and we will pass this dictionary variable a here and in order to print the value of json we can use this print method so i'm going to enclose this json dot dumps method inside our print function now let's run this code and you will see that this json dot dumps function has converted your dictionary into a json value so this is a json text format now the next question which can arise here is what data types this dumps function takes as an argument so it takes a dictionary we already know now but what are the other data types which we can pass as an argument to this dumps function so it turns out that you can provide majority of your collections and your data types as an argument to this dumps function so you can provide dictionary here list tuple string int float or a boolean value any value you can provide here i think sets you cannot provide as an argument here but other than sets you can provide any other format as an argument to this dumbs methods so let me show you how you can provide all these values into this json.dumps function so here in the first print statement i have provided the dictionary in the second print statement i have provided the list in the third we have provided tuple in the fourth statement we have provided the string and then the integer and then float values and then we have provided the two boolean values false and true and at last we have provided this none keyword to this dumbs function so let's run the code and let's see what happens so everything runs fine so that means you can convert from this json.dumbs function a dictionary or a list or a tuple or a string or a decimal or a float or a boolean value into a json value and all these are valid json values now let me go once again to this dictionary method and here also as the json values you can provide any type of values which i have shown here so you can use inside this dictionary for example another dictionary so i can just write so we can also provide a tuple here so let's run this code and it's totally valid so you can see our dictionary is now converted to a json value now this dumps function also takes few other parameters also so we can also provide a parameter called indent here so you need to write indent is equal to and then after that you can write some number here so if you want to give the indent of 4 to each and every element of your json then you can write indent is equal to 4 and let me run the code once again and now you can see this json is printed into a pretty format and the indentation here indentation means this indentation is four spaces for each and every element of your json so if you want to print your json into a pretty format then you can just write indent is equal to and the number of indents you want to give so let us say i want to provide just two indents here and let me run the code once again and you will see now this only have the two indents for every element of this json also you can provide a parameter called separators and as the separators let's say first value i want to provide here is a dot value and the space here and the second value i want to provide here is this equals to symbol so what this separators argument does is it will replace your commas with this dot notation and your colons with this equals to notation and when i run the code you can see now the colon is replaced by the equals to symbol and the comma is replaced by this dot symbol so you can use separators like this also but i will not prefer to use these kind of notation the original notation is the one which i prefer to use which is with commas and these colons one more thing you can use here is the sort keys so you can just write sort keys here and whenever you write true here it's going to sort your json according to their alphabetical orders so you can see right now your keys are assembled in nonalphabetical order so they are assembled in a random manner but when you give sort keys is equal to true here and i am going to run the code you can see age comes first then the marks and then the name and then the object so now your keys are assembled or sorted in the alphabetical order when you use this kind of notation now let's try to save this json value into a json file so in the last video i have shown you you can use this with statement and then you can use open function and we can provide a file name here for example demo dot json so json file always have the extension dot json and the second value we will provide here is the mode so we want to write to the file so that's why we have used w here as fh and then using this fh we can write to this file which we have created so we can pass this json.dumps function here and now your dictionary a will be converted into a json and then this json will be saved into this demo.json file you can see here i'm working inside this file handling project and here i only have dot py file and when i run this code you will see there is one more file which will be created here which is demo.json so i can open this file here and here you will see all our json values are saved in this demo.json file so we have provided these values into the demo.json file let me just split the screen so you will be able to see it correctly so we have provided a name here so name is here age is here marks is here and then the object is here and also the pass is also here so this is how you can write your json values into a file now let's see how we can read the json values from a file so i'm going to remove this dictionary from here and instead of using this write mode i'm going to just use read mode which we used to read from the file and the file we already have so let's say we want to read all this data which we have written into this file and now instead of using this line i need to use fh dot read function here and to print the content what we have read from this file we can use the print function so i'm going to enclose this fh dot read into the print function and let's run the code first of all and when i run this code you can see it prints all the content of this json now one thing which you need to observe here is this fh dot read function is going to give you a string value so to confirm that we can just write type here and we will just see the type of this fh dot read function and i'm going to run the code let's see what's the answer so you can see this read replies you in the form of string so in order to convert the string into some possible format you use a function called json.loads so i'm going to save this string into uh let's say a variable json underscore str this is the variable name and we will assign whatever we read from the file into this variable and now what we can do here is we can convert the string into a json value using a method called json.loads so let me create a variable once again so json value is the variable name and then i can use this json keyword which we have imported dot loads function so just use the loads function and then pass the string as an argument of this loads function so this loads function takes a string and converts it into a json value so now let's print the type of the json values i'm going to just write print type and then we use the json value argument here and then once again run the code and you will see now the json value data type is the dictionary so because now it's a dictionary we can pass some values from it so let's say from this json value dictionary we want to get the name so name here we have stored is max so we can just give the key here name and then run the code it's going to give us the value associated with the name which is max so this json.loads function we use to convert from a json or a string value into a python dictionary so this is how you can handle json values in python in this video i'm going to show you what are iterators in python and how to use iterators in python and at the end i'm also going to show you how you can create your custom iterator class in python so let's get started and let's see first of all what is an iterator but before that we need to understand what is iteration so what is iteration an act of going over a collection is called iteration now what kind of collections we are talking about we have already seen some kind of collections like lists tuples dictionaries sets and other kind of collections and till now what we have seen is we can use a for loop to iterate over a collection so till now what we have learned is for example i'm going to declare a collection which is list in this case and i'm going to just add some values inside the list and once i declare the list i can iterate over this list using a for loop so let's say for i in the collection name and then you can just write print here to print each and every value of this collection a so this for loop iterate over each and every element in the collection and then print the value using this print statement now let's talk about the iterators so what is an iterator iterator is an object which can be used to iterate over our collection now this iterator object has two special methods first is underscore underscore iter underscore underscore and second is underscore underscore next underscore underscore so iterators have these two special methods one is eater and this iter method is going to get you the iterator and the next method is going to give you the next value using this iterator now collections like lists or dictionary or tuple are all iteratable collections that means we can iterate over them and all these collection objects have a special method called eater which is used to get the iterator from these collections so let me show you first of all these two methods inside a collection so when you use dir inbuilt function and give any collection as an argument here and when i press enter you will see a list of functions here and when i scroll little bit right here you will see a special function which is iter so all these collections like lists or dictionary or tuple have this iter method and we can call this itr method to get the object of the iterator and we can call this underscore underscore iter method using a special method called iter without underscore in front and back of it so let me just show you what i'm saying so i'm going to declare a variable id which stands for iterator and then i'm going to use a special method called iter without underscore and this iter method is used to get the iterator so i can just pass my collection here as an argument and this iterator method is going to give me the iterator object of this collection which i was talking about which is underscore underscore iter underscore underscore so let me just press enter and now we have the iterator object and this iterator object we can use to call all the values in the collection so let's once again print the values of our a list and this has these six values and now i can use a special method called next here to get the first value of this collection so i'm going to just pass the i t which is the iterator which we have got from this iter method and then press enter and you will see it will print the first value of your list now once again when you call this next using this i t variable is going to give you the next value of the list and when you call it again and again it's going to iterate over your list and give you the values of the list one by one so let's get all the values so this is the second last value which is nine and then at last it's going to print the last value which is seven now at this point iterator has iterated over all these six values after that when you call this next method once again over this it variable then it's going to give you this exception which says stop iteration so when your iterator is exhausted then it's going to give you the exception which is stop iteration now as i said the collections like list dictionary or tuple have this iteratable object that means we can use the for loop to iterate over these collections so for loop uses the same iterator mechanism to iterate over all these elements of the collection now many times in your programming development career you will have to write a class in order to iterate over some kind of collection so let me show you how you can create your custom iterator class so let me minimize this python console in the pycharm ide and i will just comment these two methods so as i said an iterator always have these two special methods one is underscore underscore iter underscore underscore and the second is underscore underscore next underscore underscore so in order to create your own iterator class you need to implement both these methods so let's create an iterator class and i'm going to just name my class as list iterator class and in this list iterator class first of all i'm going to define uh init method and this init method is going to take any type of list or any type of collection which is iteratable and then inside this init method i'm going to just call a self to create a member variable here and i'm going to name my member variable as dot underscore underscore list and i'm going to just pass the value of a let's name this a as list also so we will be clear so list is equal to list the second member variable which i want to create here is the index variable so the second variable is the index variable which is the index of the list or the collection and let's give the initial value of this index now as i said in order to create an iterator class you need to implement these two methods which are underscore underscore iter method first of all and in this method we are just going to return the value of self so this underscore underscore iter method is going to give you the iterator and let's also implement the method which is underscore underscore next now in this next method first of all when this next method is called what we want to do is we want to increase the value of index so let's call our index member variable and let's increase the value of index by one and the next thing which we want to do here is we want to send the value at this index so we can just return so let me call return first of all and then self dot your list name whatever is your list and then inside these square brackets we call the index which we have incremented by one so self dot underscore underscore index so this statement is going to give you the current value at this index right now and that's basically it so i'm going to just say my list is equal to list iterator and this list iterator takes an argument which is a collection right so let me create a list collection and i'm going to name my list as a and here i'm going to provide some values inside the list so let's say we have these six values inside the list and now we can just pass this list as an argument of our list iterator so once we have this list iterator object we can call our iter method in order to get the iterator object which is this one so let me create one more variable which is i t and then i'm going to call this iter method and i'm going to pass my my list object as an argument of this iter method so now i have the iterator object of this list using this list iterator class and now i can use the print methods let me call a print method and then i can call the next method to iterate over the list using the i t variable so let's run this code once again and you will see it's going to print the first value of the list which is one let's print it two more times and let's run the code once again and you can see it's going to give you the next two values of the list so now we know that this next is going to call every time the next value from this list so let's print all the values of the list using this next method and you can see it prints all the values of this list now when i want to go beyond this after the list iterator is exhausted and let's run the code you will see it's going to give me this error which says list index out of range but this is not the problem of the iterator is the problem of the list now what i have shown you when i have shown you the example of this list iterator in the python console whenever your iterator is exhausted it throws the stop iteration error or exception so let's raise the same kind of stop iteration exception using our class also so i will go to the next method of my class and here i can give a condition and this condition checks whether the value of index so self dot underscore underscore index is greater than or equal to the length of your list so length and the list name is self dot underscore underscore list and when this condition is true we are going to raise an exception so let's use the raise keyword and the exception which we want to raise here is the top iteration exception so let's throw this exception or raise this exception and what this condition is basically going to do is until the last index which is for example in this list the last index is five so under until the last index everything will be okay but as soon as this index becomes 6 which is the length of your list also so the length of the list which have 6 element is 6 but index will go up to five because the index starts from zero so as soon as this index becomes is equal to the length which means the iterator has been exhausted we can also write double equals to here as soon as the value of index becomes the length of the list we can throw this exception so let's run this code once again and you can see we have used this next method seven times so at the last print statement it's going to give us the error so first of all let me remove the last statement and let's run the code it's going to run fine so you can see everything is fine but as soon as i call this last next method and i know that my iterator is exhausted and when i run the code once again it's going to raise an exception which is stop iteration now one more thing which i said which you can use with your iterators is the for loop so let's try to use this for loop and i'm going to just write for i in your iterator which is i t which we have got using this iter method and let me comment this code also and now i can print each and every element inside the list a so i'm going to just write print i here and let me remove this code from here so you can see the list also and this for loop also and i'm going to run this code once again and you can see this for loop has iterated over our list which we have provided as an argument of this list iterator class and you can see all the values inside the list have been printed using this for loop so in this way you can create your own iterator class in python in the last video we have seen how to use iterators in python now in this video we are going to learn how to use generators in python so first of all what are generators so generators are the simple way of creating iterators now simply put a generator is a function that returns the iterator object on which we can iterate upon so let me give you an example of generators and then we will see why it's a simple way of creating iterators so what i'm going to do is i'm going to create a simple function my func and inside this function i will use a special keyword called yield instead of return now after this keyword yield let's say i want to return some values so i'm going to write first of all a and then once again i'm going to use yield and i'm going to use b here and once again i'm going to use this keyword yield and again i'm going to return c here so if your function contains at least one yield keyword then this function is called a generator function so how this yield keyword is different from the return so in the case of return the statement is immediately terminated entirely so after return you cannot do anything inside a function because after using this return keyword the statement is terminated entirely but the yield statement pauses the function and saving the state of that function so let me demonstrate what i said so i'm going to create a variable x and i'm going to just assign the value of my function to this variable x now on this x i can use a next function so as i said whenever you use at least one yield keyword inside your function it becomes a generator and i also said when you use a generator it returns the iterator object so this myfunc generator function returns the iterator object which we are saving inside the x variable and we can provide this x variable which is a iterator object as an argument of this next function which is going to give you the first value which you use with the yield keyword so let me just run the code so right click and then run the file and you will see it's going to give you the first value which you use with the yield keyword now after that let's say we use this next function two more times then it's going to give you the next value and once again when you use the next function it's going to give you the next value so it's like using the iterator on which you can use the next function but it's much simpler to use because you just need to use this yield keyword instead of implementing the iter method and the next method inside your class which we have done in the last video now after using next three times because we only have used this yield three time let's use the next function fourth time because now in the fourth time your iterator is already exhausted and let's see what happens so you will see it's going to give you this exception which says stop iteration which we have already seen in the case of iterators also which i have shown you in the last video so generators are similar to iterators but they are more simple to use and create so you don't need to throw any exception the generator will take care of throwing this exception by itself so what is the difference between iterators and generators so as we have seen in the last video that in order to create an iterator class we need to implement two methods which are iter method and the next method so if you haven't seen the last video i will recommend you to watch that last video in which i have shown you how to create the iterator class so whenever you need to implement the iterators they are more lengthy and sometimes counter intuitive now in the case of generators the methods like iter and next are automatically implemented so this generator which we have implemented here will return the iterator object on which we can iterate upon so now what's the role of this yield keyword so whatever value you will write after the yield keyword it's going to return that value and immediately after that it's going to save the status of your function so that means for example whenever we call this next function for the first time with this x value then it's going to return the first value which you use with the yield keyword as soon as you do that your function is going to save the status of this iterator that means the iterator is at a and then whenever you call the next method once again your generator is going to remember that last time it has returned the first value and now it's the time to return the next value and this will go on and on until you use this yield keyword so let me give you one more example let's say i will declare a variable n and the initial value of n is one and then i'm going to just yield this value n for the first time and also above the yield keyword i'm going to print the value of n so i'm going to just give this string and after this string i'm going to just print the value of n same print statement i'm going to use before the other yield keywords also and before using this n keyword with other yields statements i'm going to increase the value of n by 1 every time so before the next yield i'm going to increase the value of 1 once again and before the last yield also i'm going to increase the value of n once again so we have used yield three times and every time we are increasing the value of n and let's use the same initialization of my func and also i will use this print statement three times and when i will do this i'm going to run the program and you will see what happens let me use this next function only once and when i run the code it prints the print statement using this print statement and then gives you the value of n which is one at the first yield then we have increased the value of n by one so now the value becomes two so when we call the next method once again it's going to give you the value of n and also it's going to print the next print statement so let me just move this below this expression so we will see the increment here also and similar we will do with the third yield statement so when i use this next third time is going to print the third value so basically your yield keyword is saving the status after it returns the value associated with it and it resumes the status whenever you use the next next function now let me show you one more thing and that is how you can use this yield keyword with the for loop so let's say i will create a for loop and i will say for i in some range and let's say this range is up to 5 and after this i want to print the value of i for example so here i will print the value of i and then what i'm going to do is inside this for loop i'm going to return the value of i so now we don't need this n variable so every time from the for loop i'm just returning the value of i in each iteration and let's see what happens so let me use this next function only once and you will see it's going to first print the value of i which is 5 here which is little bit strange i thought i have written here range here but it was something else so let's rewrite range function here inside this we have provided 5 as the range and once again when we run the code it's going to print the value of i which is 0. now every time you use this next function it's going to give you the next value of i which is 0 1 2 until the 5. so let me just run this code once again and you will see it's going to give you the value until this for loop is valid and as soon as you go outside the range it's going to give you this exception which is stop iteration exception so everything in generator is working similar to the iterators which we have seen in the last video so how about we recreate the class which we have written in the last video when i have shown you the iterators example which is list iterator class so i'm going to write a similar code to iterate over this list of numbers so what i want to do is i want to rewrite this code using the generators so let me just split this editor so you will see iterators and generators side by side so i'm going to close this from here so on the left hand side we have a generators file and on the right hand side we have the iterators file so let me just remove this code from here and what i'm going to do is i'm going to create a new function and i'm going to name it as list iterator function with the smaller l and smaller i so this function takes a list as we have seen in the case of list iterators which was taking a list as the argument so here also we are going to give this argument which is list and inside this function what i'm going to do is i'm going to use a simple for loop for i in and i will iterate over the list which we have provided as an argument so we will iterate over this list using the for loop and then we are going to yield the value of i every time when we iterate over this list using this for loop and that's it so it's that simple to recreate the whole class of iterators using this generator so the biggest advantage here when we create the generator is we don't need to implement this iter method or this next method and we also don't need to raise this exception from our function or a class whenever we create the generator the generator function will take care of this top exception by itself so the only thing which remains now is we just need to create a list so we will use the same list as we have used with the list iterator class and instead of this class i will just replace it with this list iterator function and you don't need to do anything so you don't need to use this iter method to get the iterator object this function is going to return the iterator object by itself so now we just need to call the print function and the next function and inside the next function we just need to pass this variable which we have got from this generator function which we have created and when we run this code so i'm going to right click and run this code once again it's going to give you the first value of the list which is one and when you do this several time let's say we call this function six times which is the length of your list also is going to iterate over your list and print each and every value which we have inside the list now if you use this value seventh time that means our iterator is exhausted it's going to automatically throw the stop iteration error so we don't need to create or raise this top error by ourself generator function will take care of it by itself now as we have seen in the last video also we can use a for loop with the iterators so you can also write for x in your my list variable and then you can print the value of x every time and this is going to give you the same result and you can see it gives us the same result which is all the elements of your list which you have provided here so now this whole list class is performing the same operation as this small piece of code which we call generators so let's discuss the advantages of using generators first we have already seen that generators are easy to implement second is generators are more efficient if you want to perform the same logic with the normal function so let's say you want to perform the same functionality which is to iterate over the list of these numbers and let's say this list is big enough let's say this list length is 1 million then if you are using the normal function your normal function has to store all the one million values inside that list variable and that's not very memory efficient but whenever you use this kind of generators they are more memory efficient because they are not going to store one million values in the variable your generator function is going to work on the values one by one so let's say you want to stream some data let's say you want to stream a video and you don't know the length of the video then in those cases the generators are much efficient because they will work upon your stream in steps it's not going to wait for your stream to come entirely and then work upon it so generators are good to work with streams also so these are the few advantages of using generators in python so that's how you use and create generators in python in this video i'm going to show you how you can pass the command line arguments to your python script so to start with i have a script called myparser.py and in order to pass the command line arguments to this dot py file first of all we need to import a builtin module which is called arg parse module now using this arg parse module we can parse the parameters which is passed using the command line to this script so let's see how we can parse those parameters so first of all i'm going to declare a variable called parser and then i'm going to use this arg parse keyword which we have imported and there is a special class here which is called argument parser which we are going to use now this argument parcel class takes an optional parameter which is the description which we will see little bit later so the first step is to initialize your parser the second step is to add the parameters which you want to parse so this we will see in a bit but let's see the next step which is actually parsing the arguments which is passed using the command line so let me declare one more variable which will be our arguments which we want to parse and then we will use this parser variable which we have created and call the method called parse arg so now once you have used this method pass args with this parser variable then you will have all your arguments into this odds variable so let's run this script and let's see what happens when we run this script so in order to open the terminal in pycharm you can just click on this option which says terminal and this is going to open the terminal in the pie charm ide now it depends in which project you are working in so if you see some other location which is opened using this terminal you just need to provide the path where your project is so i'm going to right click on my file and then i'm going to copy the path of this file so right click and copy path and i will just do cd and i will paste this path which i have copied and i will remove the name of the file because i just want to cd to the directory in which i'm working in so now i'm in the directory in which this myparser.py file is present now in order to run this python script i can use this python keyword and then the name of my file which is my parser dot py file now whenever you import the arg pass module and you initialize this module there is a special help parameter which is available so you can write minus h here and then press enter and you will see that this help parameter is automatically present whenever you import this arg pass module and initialize it so this is one way of running your script you can also run your script on your windows or linux terminal the process is same so you need to cd to the directory in which you are working in so i'm going to once again copy the path and paste it here and once i'm in this directory i will just write python and the name of the script which is my parser and then hyphen h which is for help and it's going to give me the same kind of result so you can run your python script either on the windows command prompt or in the pie charm the choice is totally yours so i'm going to use this pie charm terminal so let me minimize this terminal for now now as i said you can pass some argument here in the argument parser class so the argument which you can provide here is that description which is the description you want to give whenever somebody runs this script so this is going to be the description whenever you run your file on the terminal so i'm going to once again run this python file and you can see the description is printed here now now how to pass the command line arguments so you can pass two kinds of arguments as the command line arguments one are called positional arguments and other are called optional arguments so first of all we will see how to pass the positional arguments so in order to pass the positional argument you use your parser variable and then call a method called add argument here and first of all inside the add argument you give the name of your argument for example i want the user to provide two numbers and i want to perform some mathematical operations on these two numbers so i can store these two numbers into some variables and these variables i can define here so the first variable name i want to provide here is num1 and then as the second argument you provide the help parameter so in the help what you do is you provide some help about the argument which you want to receive from the user in a same way i can provide the number 2 argument and i can just change the name of the argument 2 and the help description of argument two now the third parameter or argument which i want to provide using command line is the operation so let's say we want that user should provide some kind of mathematical operations to work with so in the help i can just write provide operator so these are the three arguments which i want the user to provide now once these three arguments are provided by the users these three arguments will be parsed using this function and then all these three argument list will be assigned to this args variable so we can just print the value of this arg variable and let's see what is the content inside the args so i'm going to open the terminal once again so after the python keyword and the name of your script you provide the first number which is let's say 84 the second number let's say it's 41 and the operator so let's say i want to provide the operator plus to add these two numbers and then i'm going to press enter and you will see this print statement is going to print the value of number 1 which is 84 the value of number 2 which is 41 and the value of operation which is plus here you will also observe that all these three numbers are present in the form of string so in order to work on these numbers we need to convert these numbers first into a float value or the integer value and then only we will be able to work on these numbers so how we can provide the type of these two numbers so that our script understands that these are the numbers and not the strings so the way in which you provide the type of the argument is using the type keyword here and then you provide whatever type you want for your argument or the parameter so here i have written type is equal to float and in the second argument also i have written type is equal to float and by default the type is string so if you don't provide any type it's a string so now we have provided a type to our first two numbers and let's run the script once again so now you will see that these values are no longer string values but now they are some float values also whenever you run the script with minus h keyword which is the help keyword it's going to show that these are the positional arguments which is required by the script which is number one number two and operation and also we can use minus h as the help and also it's going to give us the description of this script which we have provided here so now we can perform some mathematical operations on the arguments so let's perform some mathematical operations on the arguments so we can extract these argument using the args keyword and then calling the name of the variable which we have provided so args dot number one is going to give you the value of number one so what i want to do here is i want to know the operation first of all so args dot operation and if this operation is equal to plus then i will just add these two numbers so i'm going to just say args dot num 1 plus args dot num 2. now after adding these two numbers i need to save these numbers into a variable so let's create a variable called result here and i will initialize this result by none so initial value of result is none and then we will assign the addition of the two numbers to the result parameter and then at the end we will just print the value of the result and the same i will do for the other operations also so let's define some more operations second operation i want to provide here is the subtraction third operation i want to provide here is the multiplication and let's say fourth argument i want to provide here is the power of operation so here i can use a inbuilt function which is p o w and then i will just pass the first number as the first parameter so args dot num one and the second number as the second parameter so now let's run the script once again and let's see what happens when we run this script once again so i'm going to provide the same parameters 84 41 and operation plus here and then press enter and you will see the result here is the addition of these two numbers because our plus condition is mat for the operation and then it's going to just add these two numbers and print the result we can make this result little bit more sensible by just saying this is our result so i'm going to just say result colon and then provide the comma here and once again let's run the same script with the minus operation this time so i'm going to provide the minus operation now and then press enter and it's going to still give me the addition this is strange because i think i have done some mistake here which is i haven't provided or changed these operators from here so in the case of minus i need to provide the hyphen here and in the case of multiplication i need to provide the s tricks here so let's run the code or script once again with minus and now you will see as a result you will see the subtraction of these two numbers let's run this script with pow and then press enter it's going to give me the power of operation of these two numbers so this is how you can provide the positional parameters now as the name suggests these are the positional parameters that means every parameter have its own position and this position is defined by the declaration here so the first position is for the number one second position is for number two and the third position is for this operation parameter so if you change the position for example i will provide the plus operator first and then these two numbers this will give me an error and it will say that i was expecting a number as the first argument but you have provided some string parameter here also if you don't provide any parameter so i'm going to just say first two numbers i will provide but operations i haven't defined then also it's going to give me an error and this will say that operation is not defined because we haven't defined any operation here so it's going to give us an error so there is one way of solving this error which is by providing the default value and in order to provide the default value you use the keyword default and then provide the value of it so let's say by default the operation is plus always and when i run this code once again it's going to still give me this error because these are the positional arguments we cannot change the position of this argument and we cannot provide the optional values here and that's where the optional parameters comes in so using these optional parameters you can provide the optional values so let me show you how you can provide the optional parameters so the way you provide the optional parameters is by simply adding double hyphen symbol in front of your parameters so i have provided double hyphen symbol in front of each and every argument which is provided to the script and let's go to the terminal once again and this time we need to provide the name of the parameter which is hyphen hyphen num 1 space the value of it for example 80 and then we need to provide the second number which is hyphen hyphen num 2 and then after the space the value of number 2 and let's say i don't want to provide the operation now and when i press enter here it's still going to give me the result which is plus because now we have the default value of operation which is plus and if i don't provide the value using these command line arguments then the default value of this operation will be taken which is plus if we provide any argument here so hyphen hyphen let's say operation and we will provide the value of operation let's say minus here that is going to give us the subtraction of these two values so whatever argument you will provide here the default value is overwritten by that value so this is how you can use the optional parameters and in order to use the optional parameters you also need to give the name of your optional parameters now whenever you use the optional parameters it depends upon you at which position you want to use these optional parameters so i can use for example num one at first position operation at the second position let's say operation is multiply now and then i will provide the num2 at the third position it doesn't matter now because the position is irrelevant here because we are providing the name of the variable and then the value so value will be passed using the name variable and not by the position now there is one more notation which you can use with these optional parameters and this is the short form of whatever parameter name you want to give so let's say i want to give n as the number one and let's say i want to give i as number two and for operation i want to provide this letter o so this is the short form of these three values so n is for number one i is for number two and o is for operation and also in front of each and every letter here we need to provide a single hyphen so either you can provide this kind of notation with uh explanatory keyword and double hyphen or a single letter and a single hyphen in front of it so now in order to use this kind of notation what i can do here is first of all let me call python and the name of my script and let's say first of all we call the help and you will see this help shows this letter also which is minus h or help and for our parameters we have minus n or the number one minus i or number two or minus o or operation so the way we provide these shorthand notation is we just need to write the name of the notation which is minus n for number one let's provide the value of number one and minus i for number two so you use this equal to symbol in between the value and your shorthand notation not the space so this time i'm using the equals to symbol so i equals 70 and the value of minus o is equal to let's say plus this time and then press enter and it's going to give you the addition of these two numbers so for this shorthand notation you use the equal to symbol not the space in between the name and the value so this is how you can provide the command line arguments to your python script in this video i'm going to show you how to use lambda functions in python in addition i'm going to show you how to use lambda functions with functions like map reduce and filter so let's get started so as we all know that python is a multiparadigm language and it also supports functional programming and the lambda functions falls into functional programming paradigm so what are lambda functions and how to use lambda functions so lambda functions in python are also called anonymous functions because they don't have any name sometimes they are also called one line functions because they can be written in a single line of code so let's see how we can define a lambda function so as you can see here i have three normal function defined here one is the double functions which doubles whatever arguments you provide here second is a simple addition function and third function is the function which takes three arguments and provide the product of the three arguments which are provided so let's see how we can convert these three functions into the lambda functions so the first function which we have is the double function so i'm going to once again write double as a variable and then i can use a special keyword called lambda to create a lambda function so as you can see here this double takes one argument which is x so to provide an argument in the lambda function you just write the name of the argument and then after the colon you write the body of the function so in our case this double function have this body which is return x multiplied by 2. so in lambda function if you want to return some value you don't need to use this return keyword you can directly write x multiplied by 2 here so this lambda function is equivalent to this double function which is a normal function so this double function takes one argument which is x which we are providing here and it returns the multiplication of x by 2 which we are writing after the colon now let's write the add function using lambda function so i'm going to once again declare a variable called add and once again use lambda and this time this add takes two arguments so i can provide multiple arguments in lambda functions by comma as you do with the normal functions so i will provide two arguments and then after the colon you just write whatever you want to return so we want to return x plus y so we can simply write x plus y here and that's it so in a single line we can define the lambda function now the third function we want to provide here is the product function so i will declare a variable product and this time i just need to provide three arguments using the comma separator and after the colon i just provide the multiplication of these three values which is x multiplied by y multiplied by z so all these three normal functions is equivalent to these lambda functions so i'm going to just comment these three functions out by pressing ctrl and forward slash and now let's see how to use these lambda functions so you create a lambda function and then assign the result into some variable and then you use these variable as you use the normal functions so i'm going to just use print to call the double variable and then using the parentheses i just provide the argument which this lambda function takes so this lambda function takes one argument which is x so i can provide the value of x here so let's say i want to provide 10 as the value of x same i will do with the add function and the product function so add a function takes two argument and the product function takes three argument so i can simply write these functions like this like a normal function and then i can just run my script and you will see it's going to give us the same result as the normal function gives us so the first is the double of 10 second is the addition of these two numbers and third is the product of these three numbers now you might ask a question that these functions which we have defined normally we can also define these function in a single line because there is not much logic inside these functions so we can declare these functions like this and they are also the single line functions so why do we use lambda functions so the lambda functions are generally used with the functions which takes function as an argument or returns function as the result so in functional programming functions are the first class citizens that means we can pass the functions as the normal argument so as you can see here we have passed some static or constant value as an argument here but we can also pass the functions as in arguments and in addition you can also return a function from a function so instead of this multiplication you can create a function and return from a function and that's where these lambda functions are useful so let me give you some examples of where you can use lambda functions so as i said you can use lambda functions with the functions like filter reduce and map so let me illustrate how these functions work so i'm going to declare a list of some numbers so now i have created a list which have these six elements now let's see how to use a map function with a lambda function so there is a inbuilt function called map in python which takes two argument one is a function and second is an iteratable variable and we all know that collections like lists or tuples or the dictionaries are all iteratable collections so we can use map keyword and then here we can define a lambda function so let's say i want to double each and every element of this list so i can define a function which takes one argument x and then we are going to return the double of this value so this is the function which we have passed to this map function because the first argument which map expects is the function the second is the iteratable collection so we are going to pass this list as the second value let me define let's say my list here so it will be more clearer so i'm going to just pass this my list as the second variable so what this map function is going to do is it's going to apply this lambda function to each and every element of this list which is basically going to double the value of each and every element of the list now let's assign the result of this map function into a variable so i'm going to assign the result into some variable and then i'm going to print the result first of all so this variable contains the map function so let's see first of all what is the result and then i'm going to show you how to get the result which we are expecting so you can see here whenever you want to print the value of map it's going to just give you this kind of result so how we can get the list out of this map value in order to get the list out of this map value you need to cast this value into a list and how to convert this value into a list you use a list function and then pass the result of the map function as an argument of this list function let's run the program once again and you will see now that the result is a list and in the result every element of the list is doubled so basically what this map function has done is it has applied this function to each and every value of the list and this function just doubles each and every value of the list now you might say that this is a very simple function which we are applying to the list so let's make things little bit complex and let's say now i have two lists one is my list one and other is my list two and this other list contains some other set of elements so let me just change the values which this second list contains and let's say using this map function i want to add each and every element of these two lists and create a third list with the addition of let's say 2 and 1 and 5 and 4 8 and 7 10 and 8 like this so how can i create a map function to achieve this so let's say this is a variable b and here inside the lambda function we give the second argument which is y so it takes two argument and then it adds the value of x and y so we can do like this and then as the second argument we are passing the first list and also as the third argument you can pass the second list here so now what this map function is going to do is it's going to take the first element of the first list and the first element of the second list and then it's going to apply this function to the first elements of both these list which is to add these two numbers so let's see what is the result which we get using this map function so i'm going to just convert the answer or the result into a list and then i'm going to just pass this b variable as an argument of this list and then we are just printing the result so let's run the code and let's see what happens so you can see we get the list which adds the value of these two lists and creates a new list so you can see 2 plus 1 is 3 here 5 plus 4 is 9 then 8 plus 7 is 15 and so on so this is how you can use lambda functions with map function now let's see how to use a filter function so i'm going to use this special function which is called filter and this filter functions takes two argument but what is special about this filter function is it takes a function as the first argument which gives us a boolean result so instead of adding two numbers and returning this filter function is expecting a function which gives us the boolean result so let me minimize this so let's say we want to filter the even values from this list so how we can achieve this using the filter function so as i said this takes a function as the first argument so you can use lambda and how to find out the even values you pass an argument and then you return x modulo 2 is equal to 0 so this x modulo 2 is going to give us 0 whenever the number is even otherwise is going to give us 1. so this is the first argument and the second argument we can pass here is for example the first list here and now i'm going to assign the result into a variable and let's print the value of c now using the list function so list and as an argument i'm going to pass c here let's run the code and let's see what's the result and you can see you just get the even values filtered out from this first list which is 2 8 and 10. now let me give you one more example of filter so let's say you want to filter out from the second list which values are greater than 5 so all the values which are greater than 5 we want to filter out so we will pass x as an argument and let's say this is the d variable so this lambda function takes x as an argument it's going to return true so let me just write the syntax here so it's going to return true if the value of x is greater than 5 else it's going to return the false so else we can just write false here so if you want to write if an else condition inside a lambda function you write something like this so this is the syntax of if and else so if the value of x is greater than 5 it's going to return true otherwise it's going to return false so let's run this code and let's see what happens let me just replace the c by d and i'm going to run this file and you will see the result here so in this list you will see 8 10 and 9 are greater than 5 that's why we got this result if we write here greater than and equal to and once again run the code it's going to give us four values including five here so this is how you can use filter function with the lambda functions now let's see how we can use one more function which is called the reduce function so in order to use the reduce function we need to import a special module which is fung tool so let's import this module and this module is called func tools so we are going to write from punk tool import reduce so what we are basically saying is we need a reduce function from this fung tool module and now you can use a reduce function so i'm going to declare a variable e and then i can use this reduce function which also takes two argument one is the function and other is the iteratable collection so let's define a function first of all which is the lambda function and this lambda function is going to take let's say two values x and y and what it's going to return is the sum of x plus y here now as the second argument i'm going to pass my list variable here so what reduce function does is it takes first to element of the list and then apply the function which you have written here which is going to add first to element and then it's going to store the result in x variable and take next element into the y variable so 7 plus y is going to give us whatever result and once again it's going to apply the result and then going to add the next number to the result so let's see what result we get using this reduce function so i'm going to once again use print and then we can directly print the value of the reduce function which is e so let's run this code once again and you will see this result which is 37 now 37 is the sum of all these elements inside this my list so let me explain you once again what this reduce function is doing so first of all because we are passing two arguments here in the lambda function it's going to take first two element of your collection which is two and five and then apply this code or statement to these two elements which is 2 plus 5 and we will get 7 as the result now once again it's going to take 7 as the first argument which is the sum of these two numbers and 8 as the second argument which is y here and then apply this logic once again 2 7 and 8 which gives us 15 and once again this 15 will be passed as x and 10 will be passed as y and once again the addition of 15 and 10 will happen which will make it 25 and so on so this is how you can use lambda functions in python and this is how you can use lambda functions with map filter and reduce functions in this video i'm going to show you how to use nested functions and closures in python so let's get started so we will start with the nested functions so in python we can define the nested function that means we can define a function inside a function so let me give you this example and in this example this function which is the outer function takes some text or message as the argument and i have defined one more function inside the outer function and i named it as inner function which prints the value of the text which we have passed in the outer function and we are just calling the inner function in the outer function scope so this function is declared locally inside the outer function and we are just calling this inner function inside this outer function now in other words we can also say that this outer function is an enclosing function and this inner function is the local function of this outer function and now when i call this outer function and let me run the code it is going to just print the value which we have passed as an argument so we have just passed this text argument which is once again passed to print statement of inner function and because we are calling this inner function inside this enclosing function it prints the value using this statement so when you declare one function inside the another function it's called the nesting of functions let me give you one more example of the nested function and i have defined this pop function which is our outer function or enclosing function and here i have defined a function called get last item which is our inner function or the local function to the pop function now this pop function takes a list as an argument and we have defined a local function inside this pop function and what this local function get last item does is whenever you pass a list as an argument to this local function it's going to find out the last element of the list and return the last value of this list so here this is the last index of the list and then it's going to return the last item of the list which is passed as an argument now you may already know that you can call a function called remove on your list which is used to remove some item from the list so i'm just calling remove function on the list and as an argument of the list i'm passing the function which finds out the last element of the list so this is going to give us the last element of the list and this last element will be removed from the list and at last i'm simply returning the list which is passed as an argument to the pop function so let's say this is the list on which we are working on which have five elements and we are calling pop function on this list again and again three times so let me run the code and let's see what happens so you can see when first pop is called it's going to remove the last element which is six from the list and then whenever the second pop is called it's going to remove the four and whenever the third pop method is called it's going to remove the three and so on so this is how you can use nested functions in python now let's talk about the closures so i'm going to use the same nested function example which i have shown you earlier so this is the nested function now in order to convert this nested function into a closure what we need to do here is we need to return the inner function without the parentheses so the thing to note here is we don't need to return this inner function with the parentheses we need to return this inner function without any parentheses and this is the simplest example of the closure so what is a closure so a closure is a function whose return value depends on the value of one or more variable which are declared outside the function so in this example this text variable is declared outside the inner function and the value of this inner function depends on this text variable which is declared outside this inner function and that makes it a closure and closure have a special property that this closure function object remembers the value in the enclosing scope even if they are not present in the memory so i will explain you that but let me just show you how to use this outer function which now uses the closure so i'm going to declare a variable a which means because this outer function is returning the inner function that means a contains now the inner function so we can use this a as the function so in order to use this a as the function we can just call this a using the parentheses because this function doesn't take any argument so we are not passing any argument here but we will just call it as a function because this outer function is just returning the inner function so let's run the code and let's see what happens when we run this code so you can see it prints hello which is printed using this print statement whenever we call this a function so if i just call this a function without the print method also it's going to print the hello because here we are just using the print to print the text which is passed using the outer function now as i said closure is a function object that remembers the value in the enclosing scope even if they are not present in the memory so our enclosing scope is the outer function so even if we delete the outer function after declaring the statement and if the a contains this inner function and now let's say i'm going to just delete the outer function so this statement is going to delete the outer function and let me call this outer function once again after the deletion of this function that means it's going to throw us an error which will say that this function is already deleted so we cannot call this function and now let's see the magic of the closure so even if we deleted the outer function and we cannot call the outer function but before deleting we have created a variable which contains the value of inner function and now i'm just calling the inner function with these parentheses and let's see what happens so i'm going to just run this code and it's going to print hello even after we have deleted the outer function so this means that this variable a is storing some kind of state of inner function even if the outer function is deleted and that is the magic of the closures so a closure function is able to remember the values which are declared outside the function also so this is our closure function and it's able to remember the value which are declared which is text outside the function and that's the beauty of closures now let me give you one more example of the closure so we will be able to understand it in a better way so here i have defined a function called nth power and i pass one argument here which is an exponent and inside this nth power function i have defined a local function which also takes one argument and then what it returns is is the power of whatever argument we pass here and this exponent is coming from the outer scope which is as an argument of the outer function which is nth power so base is coming from the inner local function and the exponent is coming from the outer scope and we are just returning this power of which is a local function without any parenthesis once again so this is very important you return the function without the parentheses now i can declare some variable first of all i'm going to declare a variable called square and then we will call this nth power function and we will just pass the value 2 so now this exponent becomes 2 here which is also passed to the inner function or the local function so here the value of 2 is saved that means whenever we call the square function it's going to give us the square of whatever number we are going to pass as an argument to this square so let's try it once and let's see what happens so i'm going to just print and then call the square function which takes an argument and i'm going to first of all find out the square of 2 and i'm going to run this program and you can see it's going to give us the square of this 2 because now the square function is going to give us the square of the number which we will pass as an argument here so this 2 is passed to the inner function because this nth power gives us the inner function because it returns the inner function so now this 2 which we are passing in the square is passed as the base of this inner function and that's why we are getting the square of the number which we pass here so let's find out the square of some more numbers so i'm going to just pass 3 4 and 5 here and i'm going to run the code once again and you will see that it's going to give us the square of 2 3 4 and 5. so once again we have seen that the closure function is remembering the value which is declared outside the scope which is exponent now whenever i use this function once again so let me declare one more variable and this time i want to declare a cube here and once again i'm going to use the nth power to find out the cube of numbers so now this 3 is passed as an exponent here and this exponent is going to be passed inside the inner function so exponent value is 3 here that's why we are going to get the cube of the number which we are passing as the base argument of this inner function so now this is the inner function and we can once again call the print to call the cube method this should be cube not cure so cube and then we can find out the cube of 2 and let's find out the cube of 3 4 and 5 also so let's run the code once again and now you will see here the cube of the numbers are printed whatever numbers we are passing as an argument of this cube function so in a way this cube or the square variable is holding the status of the inner function and that's something we have also seen in the case of classes the classes are able to remember the state of the variables and the methods which are declared inside the classes so closures are sometimes used in place of the classes which only have usually one method inside them because this one method we can already define in the closure also and it's able to remember the state so closures can be used in place of the classes which have fewer method generally one method inside them the closures are also used heavily in the case of decorators in python so decorators we are going to learn in the next video and i'm going to show you why decorator use closures and how to use closures with the decorators and the third advantage of closures are they are sometimes more efficient than the normal functions so the closures are sometimes also used for the code efficiency and the faster working off code so this is how you can use closures in python in this video i'm going to show you what are decorators in python and also i'm going to show you how to use decorators in python but before starting with this video i will suggest you to watch the last two videos in which i have talked about the basics of functional programming in python so let's get started with the decorators so first of all what are decorators so decorators wraps a function and modify its behavior in one way or the another without changing the source code of the actual function so let's see in practice how to declare and use decorators so first of all what i'm going to do is i'm going to define a very simple method and i'm going to name it as a say hello for example which doesn't take any argument and it just prints hello world let's say now let's say i want to decorate this function say hello and i want to print some kind of string before and after the printing of hello world without changing the code of the function so here we can declare the decorators so i'm going to declare a decoration function for this and i'm going to name it as decorator underscore func and this decorator function is going to take one argument and this argument will be a function now we have seen in the last video that we can return a function from a function or we can pass the function as an argument of another function so inside this function i'm going to declare one more function and i'm going to name it as wrapper function which takes no argument and inside this wrapper function what i want to do is i want to call a function which is passed as an argument of the decorator function and then at last i just want to return this function so i'm going to just call return and i'm going to return the wrapper function without the parentheses so in the case of closures we have seen that we can return the inner function without the parentheses and that makes them the closures now let's say we are going to pass this say hello function as an argument of this decorator function and this function will be called here so in order to print something before and after this string hello world we can print something here also so here we can just write let's say we want to print x and we want to print this x 20 times let's say so we can just write this kind of notation and after the execution of function i want to print let's say y 20 times so this is the simplest form of decorator which takes function as an argument now in order to call this say hello function with the decorator i'm going to declare one variable and i'm going to name it as hello and then i'm going to call the decorator function and i told you that this decorator function takes the function as an argument so we can pass the say hello function as an argument to this decorator function which will be passed here and it will be called here now in the last video in case of closures we have seen that because this decorator function is returning the inner function that means this variable will contain the inner function so we can call this hello with these parentheses and because this wrapper function doesn't take any argument so we can call it like this and let's run the code and let's see what happens so when we run the code you can see before the hello world string we have printed x 20 times and after the hello world we have printed y 20 times so this is a simple form of decorator and this is how you can use decorators in python but python also provides the simple way of declaring this kind of notation so instead of using this line of code i am going to comment this line of code and also this line of code because instead of doing this you can use this kind of notation so just above your function in which you want to apply the decorator you use at the rate symbol and then the name of the decorator which you want to apply to the function and this notation above the function is equivalent to this kind of notation and now we can directly use this function say hello without the use of these two lines of code so let me run the code once again and let's see what happens and the result is the same so this is how the decorator works so let's go through the definition once again so decorators wraps the function and modify its behavior in one way or another without changing the actual code of the function so this decorator have changed the behavior of this function without even changing the actual code of this function now one question which may arise here is can we use more than one decorator with the same function so let's try to declare two decorator functions so we are going to declare two decorator functions and this decorator function i'm going to name it as decorator x and the second function i'm going to name it as decorator y so the first decorator function is going to decorate your function with the x value and the second decorator is going to decorate your function with the value y so we are going to replace this by y now here above your function you can use the decorator x and then also you can use the decorator y above it so i'm going to just write at the rate decorator y and this notation is perfectly fine so you can use one or more decorators with a single function so let me run the code and let's see what happens i'm going to run this code and you can see what happens so first of all the y decorator has wrapped the function with y's and then after that comes the x decorator which have decorated the function with x values and then your actual string is printed which is hello world now one thing to note here is the order of the decorator in which they are used so now we will try to just exchange the places of the decorator x and y and now let's run the code and let's see what happens so before it was printing y first and then the x when this decorator was used at the top and then the x decorator was used and now when we run the code the opposite of that will happen now if you want to see the equivalent notation of this using decorators so i'm going to just comment these decorators from here and let's try to use this kind of notation with our decorators so i'm going to just uncomment this code and this time what i'm going to do is i'm going to use this decorator x with the say hello and i'm going to enclose this notation inside that decorator y so i can use this kind of notation which is equivalent to this kind of notation also so i'm going to run the code and you can see because decorator y is the outermost decorator here it's going to just print the value of y and then we have the decorator x which is going to print the value of x and then our actual string if we exchange the places of decorator x and decorator y then the order of the printing will also change so now this was the very basic decorator example so let me remove this example and let me give you one more example so instead of using this function let me give you one more example so i am going to declare a function called divide which is going to take two arguments let's say x and y and what it's going to do is it's going to return the value of the division of x divided by y and let me remove these decorators from here so in the last say hello example our say hello function was not taking any argument and now we are giving our divide function two arguments that means we need to change the wrapper function here also so i'm going to name my decorator as decorator divide which takes a function and i'm going to change the wrapper function and now this wrapper function is going to take two values which is the value of x and y you can also write a and b it doesn't matter it just takes two values and instead of this kind of notation let me print the values of a and b first of all so inside this print function i'm going to just write divide and then we are going to pass the value of a comma and comma b so we are going to print the value of a and b and then we are going to check if the value of b is 0 or not so i'm going to just say if b is equal to 0 then we are going to print the message that division with 0 is not allowed and also we are going to return immediately from this function otherwise if the value of b is not equal to 0 then we are going to return the division of a by b so once again without changing the actual function which is divide we have changed the behavior of this function which is divide using this decorator function and the last thing which we need to do here is to call our decorator function above our normal divide function and now i can use this divide function normally so i am going to just use this divide function inside the print and i'm going to pass two values here let's say 15 and five and let's run the code and it's going to print first of all this line which is printed using this statement which says divide a and b which is divide 15 and 5 and then because the value of b is not equal to 0 that means this value is returned with the result 3 which is the division of 15 by 5. now let's change the value of b and we are going to just give 0 as the value of b or y here and i'm going to run the program once again and now you can see that this statement is printed which says division with 0 is not allowed and because this function is not returning anything or you can return 0 from here it doesn't matter and i'm going to run the code it prints 0 here so this is how you can use decorators with the function which takes some arguments and return some values now let me give you one more realworld example which we can use with decorators so instead of our divide function now let's say what i want to do is i want to declare a function i'm going to just name it as my func which takes one argument a number so this will be a number and then this function calculates the sum of the number from 1 to the number which we provide here so let's say we provide 10 here so this function is going to give us the sum of the first 10 numbers and now i'm going to declare a variable called sum which i initialize it with 0 and in the next line i'm going to use for i in some range and this range will be the number which is provided plus 1 because range starts from 0 and not from 1 that's why i'm adding 1 here in the range if i want to calculate the sum of first 10 numbers let's say and if i provide 10 here then range will give you until 9 that's why i'm adding 1 here and then inside this for loop i'm going to just do sum plus equals i and at last i'm going to just return the value of the sum now till now we have seen how to create decorator functions for the functions which takes no argument or for the function which takes some argument and we want to use these argument inside the wrapper function but at times you need to write a decorator function which will be a generic decorator function which means the decorator function which i'm going to create here will be used with not only this function but the other function which can take this argument on multiple number of argument or no argument so let's see how we can write a generic decorator function so let's say i want to measure the timing of this function how much time this function takes in order to execute this code and timings we can measure with any function so it doesn't matter that we need to use this function to calculate the timing you can also use the decorator function which i'm going to create with the other functions also to measure the timing of those functions so because it's a timing decorator so i'm going to name it as timing and it takes once again the function as an argument and because we don't know which argument the function is going to take right now this function takes one argument but it doesn't matter you need to measure the time of the function which takes one argument or two argument or three argument or no argument so that's why in that case we can use this kind of notation astrix args here and then comma double less tricks kw args here and these two arguments makes your wrapper function independent of the number of argument which will be provided with this function and in order to calculate the timing of the function we need to import a module so let's import a module so i'm going to just write from time import time so there is an inbuilt time function which we can use to get the time and now under this wrapper what i'm going to do is i'm going to just declare a variable called start and i'm going to save the value of current time here so whenever you call this time with the parenthesis it's going to give you the current time now in the next line what i want to do is i want to just create a new variable which i will call it as result and i am going to assign the result of this function so let's call this function with the variables which we have provided into the wrapper function so because we don't know which argument comes with this function so we are going to just pass these argument as it is into the function argument which is passed as an argument of your decorator let's provide the indent here so this will be satisfied and then in the next line we are going to just print the time elapsed so i'm going to just say elapsed time and then this curly bracket and you already know we can call a format method on the string and here as an argument we just want to give the result of the start time and the end time so let's declare the end time also after the function execution is completed we are going to measure the current time once again and then we are going to just say and the time which is stored in the end variable minus the start time and it's going to give us the time elapsed in the execution of this function and at last because this function or the other function can also return some value at last we are going to return the result which we have calculated so i'm going to just write return this result so this is the generic timing function which you can use with any function whichever you like so i'm going to just decorate my function using at the rate the timing decorator and then i'm going to call this my function inside the print method so print my function and let's say i want to calculate the sum of first 20 000 values and i'm going to run the code and here in the result you will see 0.0 in the elapsed time because this value is very small and elapsed time is approximately equal to zero for the smaller values because we are just iterating over the smaller value but the sum is the exact sum so let's increase this value by two zeros and let's also print the value of start time and end time here so i'm going to just print the value of the end time and the start time so we know that what is the starting time and what is the ending time and i'm going to run the program once again and now you will be able to see that this is the starting time and this is the ending time and you will be able to see some time elapsed in the execution of this function and when i increase one zero here so you will be able to see two seconds is taken now for the calculation of the sum of this number so you can use this timing decorator in order to calculate the time of execution of any other function other than this also so this is how you can use decorators in python in this video we will talk about operator overloading in python now you might already know that everything is an object in python so when i want to know the type of this number 2 it's going to show this kind of output and this means that 2 is an object of the class end now when i once again want to know the type of let's say 2.0 it's an object of class float when i want to do the same operation with the string this string is an object of class string so everything is an object in python now have you ever wondered that when you do two plus two it's going to give us the addition of two numbers and when i add two strings let's say two and then i'm going to use the same operator which is plus operator with the other string it's going to give me the concatenation of these two string values so the same operator plus is working differently with different type of objects the same you might have observed with the multiplication operator which is this asterisk so when i use this asterisk or multiplication operator with a string and let's say i write three here it's going to print this given string three times but the same operator when i will use with the two numbers it's going to give me the different behavior which is the multiplication of these two numbers so the same operator astrix is functioning differently with different kind of data or in other words we can say that this asterix operator or this plus operator are overloaded for different kind of objects so whenever this plus operator is used with two numbers it's going to give us the sum of these two numbers and whenever this operator is used with the string it's going to give us the concatenation of these two strings so both these operators are overloaded for handling different kind of data so this is the overloading of the builtin operators now we might also think that if this is possible can we overload the operators by our custom classes so let me create a class and i'm going to name it as the number class which is going to take one argument so let me define a constructor here so underscore underscore init underscore underscore and this is going to take one argument which is the number and i'm going to just write self dot num is equal to num so this is the simple class which we have created and now i'm going to create two instance of the same class so number and i'm going to give the number one let's say here and then i'm going to create a second object of this class and this time i'm going to give the number two here so is it possible that we can use let's say and one plus and two so let's try this and it's going to give us this error which says unsupported operand type for plus number and number so because python doesn't know how to use this plus operator with your class objects it's going to give us this error which is unsupported operand type and whatever is the operator you are using so it turns out that we can overload these kind of operators in python by implementing some inbuilt methods in our class so we already know that whenever we want to implement a constructor in python we use this init method so i'm going to create a very simple class and i'm going to name it as a and this will be a blank class so this is a very simple class in python and when i use our dir function which is a builtin function with this class let's see what happens so i'm going to just press enter and it's going to print some methods here which are inbuilt method so here not all methods are visible so i'm going to assign this value of dir a to a variable a and then we will see in the right hand side in this inspector here and this is the a variable and you will see the list of all the inbuilt methods which are associated or which you can implement them so for example we have implemented the init method in order to have the functionality similar to constructor but there are other methods here too so there is a str method or le method which is less than method or n e method which is not equal to method and many other methods which we can implement here in our class so now i have given enough theory to you and let's try to see with an example how to overload an operator in python so here i have created a class which i call circle and this takes one argument which is the radius of the circle and i have created the setter and getter method for this radius variable and in the third method i'm just calculating the area of the circle using the radius and i have also used a inbuilt module which is math in order to get the value of pi so using this expression i'm just calculating the area of the circle now i have created two objects of this class with two different radiuses so in the first object i have given the radius 2 and in the second object i have given the radius 3 and from the theory which we have learned till now we already know that this expression will not work with these two objects so when i run this code it's going to give me the error which says unsupported operand error so now we are going to overload this plus operator in this circle class now in order to overload a particular operator let's say plus you need to implement a associated method in your class so with this plus operator there is a special method which we need to implement in our class and i have given the list of all the methods which is associated with the operators so with the plus operator you need to implement this special method which is underscore underscore add underscore underscore in order to overload minus you use this method in order to overload the multiplication you use this method so here is the operator which we want to overload and here i have given the method name which you need to implement in your class in order to overload this operator in python so there is this list which you can use with all these operators so you can overload the mathematical operators in python you can also overload the bitwise operators in python like and or or bit wise right shift or bitwise left shift and also you can overload the comparison operators in python using these associated methods with these operators so now we want to overload this plus operator so we will implement this add method into our class so let's implement this add method into our class and implementing this method is really simple you just need to define a special method which is underscore underscore add underscore underscore and this add method is going to take two arguments one is self you already know and the other is the object of the other instance so the second argument is the object of the circle class and now inside this method i'm going to just return first of all i will just use this circle as the constructor and what i want to do i want to add let's say the radius of the two objects which are provided one is the self object and other is the object which is provided using this argument so i'm going to just say self dot underscore underscore radius plus the circle object radius so let's use the circle object and then dot and then underscore underscore radius so basically i'm adding the radius of the two objects one is this circle object and other is the radius of the self which is the current class so as soon as you implement this method add using these two arguments then this operation is going to work in python so because we have overloaded the plus operator using this add method now this operation is going to work so let me just assign the addition of these two objects into a third variable and this variable i'm going to name it as c3 and using this c3 let's say i want to print the radius of the circle so i'm going to just use the print method and then i'm going to use the c3 object and i'm going to call a get radius method from this object and let's print the radius of c1 and c2 also so here i'm going to just write c1 and here i'm going to just write c2 so we are printing the radius of all these three objects and i'm going to run the program now and you can see here the radius of the first object is 2 because we have provided 2 as an argument here the second is 3 because we have provided 3 as an argument here and because we have created this third object using the overloading of this plus operator where we were just adding the radius of both the objects that's why we got 5 years so 2 plus 3 is equal to 5 and this addition we have done using this expression so we have added the radius of the current class and the object which is passed using this argument so this is how you can overload the operators in python by implementing the associated methods which are available in python so let's say now we want to overload the less than and the greater than operator so for the less than operator we use this lt method and for the greater than operator we use this method called gt so let's implement these two method inside our classes so i'm going to just copy this add method two times and first of all i'm going to replace this by lt which is less than and the second method i'm going to replace by gt which is greater than and we want to see if the radius of the circle is greater than the second radius which is provided using this object or not so first is less than so we are going to provide this operator and second is greater than so we are going to provide the other operator which is greater than operator and now this less than and greater than function is going to give us the boolean value if this radius is less than this radius then it's going to return us true otherwise it's going to return us the false so i already have the two instance of two classes and if i want to compare these two classes i can just write c1 and i will use thus less than operator here and then c2 and also i'm going to use the greater than operator here and let's run the code and let's see what happens so now it's going to give us this value which is the constructor of the circle so how can we get the boolean value you just need to remove this constructor from here so you just need to remove the name of the class and now i'm going to run the code once again and now you will see true and false so we were checking if c1 radius is less than c2 and it gives us true and once again we were checking if c1 radius is greater than c2 and it has given false to us also we can check the third object for example c3 here if c3 is greater than c2 or not and most probably it's going to give us true and it's correct here so you can see it's that simple to overload any operator in python using these builtin methods so you just need to find out the associated method related to that operator and then you just need to implement that method related to that operator in addition you can also implement some other methods which are available with the class so once again when i'm going to print the dir with any of the object let's say c1 and i'm going to run this program and you can see the list of the functions which you can implement inside your class so add is already there but you can also implement this dish method or dir method or any of these methods which are available here so repr method or str method any method you can implement inside your class in order to avail the functionality associated with that method so at last let's try to implement one of the method which are associated with the class so let's say we want to implement this method which is the str method so i'm going to just minimize this and i'm going to just copy this function and once again paste here and instead of greater than i am going to just implement now the str method now this str method only takes one argument which is self so i am going to just remove the second argument and here in the return value i can just return some string for example so i can just say circle area and i'm going to return the area of the circle so i'm going to use this concatenation operator and then i'm going to convert the area into the string and then i'm going to just use self dot area which is going to give us the area of that circle so once you have implemented this str method in your class you can simply use it like this dir method so i can just write str and then the name of your object which you have created and let's run the code and let's see what happens so i'm going to just see the result now and it prints circle area and it's going to print the area of the circle i just need to provide equals to symbol here so we will be able to see it in a prettier way so you can see the area of the circle is printed similarly you can print the area of the other two circle which is circle two and circle three and let's run the code once again it's going to print us the area of all these circles so this is how you can use operator overloading in python in this video we will talk about a command line tool which is called pdb which we use to debug our python script now pdb stands for python debugger and it is already installed whenever you install python on your operating system so you don't need to install pdb separately if you have python installed it will work on your terminal now you might wonder why i'm using pdb if i already have the pie charm ide and i can debug my code on the pycharm ide now in real life situations most probably you will run your python script on some kind of a server now generally on these servers you don't have the luxury of using an ide you will have to use the terminal in order to debug your python script and that's why i wanted to show you how to debug your python script using the command line tool which is pdb now to start with i have this simple python script which asks the user to input two numbers and these numbers will be saved in these two variables which is x and y now we are using a function called add to add these two values and then we are just transferring the result into this z variable and we are just printing the value of z now in order to open the terminal in the pycharm ide you just need to click on this option which says terminal and if you don't want to use this terminal you can also use a windows command prompt or linux terminal or if you are working on mac os you can also work on the mac terminal so what you need to do is you just need to copy the path of your file where you are working and then you just need to cd to the directory in which you are working in so i'm going to adjust cd to the directory in which my python script is there and then the command will be same to run and use pdb on your terminal so you can use the windows command prompt or this terminal which is available in the pycharm or any other terminal which is available on your operating system so i'm going to use this terminal which is available in the pi charm now i'm going to move this terminal to the right hand side so we will be able to see the code and the command terminal at the same time now in order to run your script you already know that you just need to give this command which is python and the name of your script in my case the name of my script is debugging dot py so i'm going to just press enter and then it's asked me to provide the first number i'm going to provide the first number and then i'm going to provide the second number which is going to give me the sum of these two numbers so here it prints 3 3 four which is not the addition of these two numbers now some of you might already know what is the problem with this code and how to solve it but we will use the debugger to find out what is the problem and how to solve this problem so that whenever we enter two numbers it's going to give us the proper sum of these two numbers and not the other answer now in order to start the debugging on your python script you can provide this command so you can give python hyphen m pdb and the name of your script so my script name is debugging dot py and then i'm going to press enter and now you will be able to see this kind of interface and you will be able to see pdb printed here and there is a cursor blinking here and this python debugger which is python pdb starts from the first line of code which you have on your script so we are on this line which is this line in our script which is the declaration of this add function now the first thing you need to know in order to work with this pdb interface is the help command so you can give this help command here or you can give the h keyword which means the help command so i'm going to give the full help keyword here and then press enter which is going to give us the list of each and every command which you can use with the pdb so these are all the commands which you can use with pdb the most important command which we will be using frequently is the next command or shortcut of the next is n or we will be using the step command or the s keyword for the step command otherwise we will be using the c keyword or the continue command these are the three most frequently used command to work with the pdb now you can see you can type help and the name of the command in order to know more about that command so i'm going to just write help here and the name of the command let's say i want to just know more about the next command so the next command continue execution until the next line in the current function is reached or it returns so in this way you can get the help about each and every command which you have here now once again we are going to find out at which position pdb is right now we already know that pdb is on this line but there is a command called where or you can also write w to find out where right now your pdb is so i'm going to just write where and it's going to show on which line your pdb is currently standing so now i'm going to give the end keyword you can also give the next command here and i'm going to press enter and it's going to go to the next line which is this line which is the if name is equal to main so now we are on this line right once again when i press enter it's going to execute the last executed command so we have executed last this next command so if you press enter directly without entering any command it's going to execute the last executed command so now we are on this line which is this one which takes the input from the user and you will also be able to see on which line this code is so this line is at the seventh line now once again i'm going to press help here and then press enter and now i want to use this continue command so this continue command is used to continue the execution of your script from the point where you are right now so we are right now at this line which is line number seven and if i press c or if i type continue which is this keyword and i press enter then my program is going to execute and it will ask me the first number so i'm going to provide the first number let's say 2 and then i'm going to provide the second number which is 3 and then when i press enter it's going to execute the program and it's going to print the result which is 23 in this case which is wrong and after the script is finished the pdb is going to restart the execution from the top so you can see this line the program is finished and will be restarted so once your program is finished the pdb is going to restart it from the starting point from where it has started so i'm going to quickly provide the n command for next and once again next and i'm going to once again press next and provide the number which is three this time so now we are on this line which is the line number eight which is this line so the execution of this line is finished now there is a print command in pdb so you can just write print and the name of the variable so i'm going to just write x here because this line is already finished and it's going to give me the value of x so when i press enter it's going to print 3 which is the value of x once again i'm going to press the n command or the next command and then i'm going to provide the second number which is 4 this time and i'm going to print the value of the y now so till now nothing seems to be wrong with this code so let me just press h for the help once again and we are going to see the list of commands once again and now i want to use this command which is what is so i'm going to just write what is and the name of the variable which is x okay so earlier we have printed the value of x which is three and now i'm writing what is x so we want to know what type of value is inside x so i'm going to just press enter now and once you do that you will see that x is an instance of class string and we wanted to enter the number right so now we know what is the problem so because input function is going to return the string value and this add function is just concatenate these two string values and it's not adding the two numbers so what is command is going to give you the information about the variable or the function but we will continue our debugging so you can see here right now we are on this line which is this line so now i want to go inside the add function in order to inspect if it's working fine or not so we are on this line where add function is called so i can use this command which is the step command or i can use the shortcut which is s in order to step into the function where we are right now so i'm going to just type step here and then press enter and you will see we are here on the declaration of add function once again and if we type n or next once again we will go to the next line of this function which is this line which we use to add the value of x and y so this command step or this letter s can be used to step into your function or step into your class if you are using class it's going to step into or inside that function so now i'm going to just press n to go to the next line and this is the return sum line and now we already know what's the problem so we can press c or continue in order to continue the execution of this program so i'm going to press c and then press enter which is going to continue the execution of the program and it has printed the result and also it has restarted the pdb once again from the starting of the script so now let's correct this code and in order to convert the input into int or the float you can just type cast the string to int using this end function so i'm going to just use this in function in front of both the input values so now we know that our script is most probably going to run fine so let's try to set the breakpoint at this line because both the values will be available at this point and we will know the values of x and y at this point so we will be able to see the type of both the values so first of all what is a break point so when you set a breakpoint at some line the program is going to stop exactly at this line so generally we have seen that if you start the pdb it's going to start from the beginning of your script but if you set the breakpoint the execution will only stop at the line where you have set the breakpoint so once again i'm going to press h to get the help and i will see which command can i use to set the breakpoint so there is this command called break which i can use to set the breakpoint so let me get the help about the break and it's going to give us the description about the break command so you can use the break keyword or the b letter in order to set the break point so you can see it takes these arguments so in order to set the breakpoint you just need to write break and then the line number on which you want to set the breakpoint so let's say i want to set the breakpoint on the line number nine so i can just write break and then 9 and then press enter which is going to set the breakpoint on line number 9. now i can give the continue command in order to continue the execution of the script and now when i press continue it's going to first ask for these two values so i'm going to quickly give the value of first number and the second number and then when i press enter it's going to stop at this line where we have set the break point right so right now we are on this line which is line number nine and now i can give this command which is what is x and once again it says that the type of this x is string so what might be the problem the problem is after changing our script we haven't restarted the pdb we haven't exited the pdb and restarted the pdb so this script is not loaded after we have edited the code right so in order to quit the pdb you give the quit command or the q letter so just press q and then press enter which will allow you to come out of pdb and let me run that debugging once again so you can once again give this command python hyphen m pdb debugging dot py and then press enter which is going to restart the debugging and now this script is loaded once again with the correct code which is end so now let me just put the break point on the line number 10 which is this line and now i'm going to press c to continue and i'm going to give these two numbers let's say and you can see the program is halted on the line on which we have set the break point on so once again i'm going to give the what is command and the name of the variable which is x and then press enter and now you will see the type of x is now int and we have solved the problem so we can simply press c to continue and see the result and you can see it prints the result which is eight which is the addition of three and five so our debugging was successful and we are now seeing the expected result which we wanted to see so this is how you can use pdb to debug your python script now there are few more ways of using pdb with your python script so let's see those other ways in which we can use the command pdb with our python script so i'm going to press q in order to exit out of the debugging so the second way of using pdb is to import the pdb inside your script so i can just import the pdb library inside our script and then in order to set the breakpoint i can use pdb dot set trace so this will set the break point on the next line after this line so i'm going to just clear the terminal by right clicking and then pressing clear buffer and once again to start the debugging i just need to give this python command and the name of my script so once you have this import inside your script and you have this code inside your script you don't need to give the pdb command you just need to run your script normally with the python command so my program execution is here which is running the program normally so i'm going to just script the value of x and y which is three and four and it's going to stop the execution at this line which is just after the set trace code okay so because we have set the breakpoint on this line using this line of code it's going to stop at this point and once again i'm going to use for example what is command and i want to see the value of x and it's going to show us the type of x which is in so this is the other way of using pdb in your script some people also like to use pdb directly at the point where they want to set the breakpoint and the benefit of using this type of code is if you are using any linting tool it's going to warn you on the same line so the developer will know that he needs to remove this line because linting will fail because there is a semicolon here and we are using two line of code in the same line so it's going to give us the warning and that's how the developer will know that he needs to remove this line so he is going to remove this line after the script is working fine so this was the second way i'm going to quit out of the pdb once again and let me show you the last way of debugging your code with the pdb command so i'm going to clear the terminal and now i'm going to just give this python command which is going to open the python shell and here you just need to import the script which you are working with so i'm working with the debugging script and then import the pdb and once you have imported your script and the pdb module you can just use pdb in order to start the debugging of your script so pdb dot run and under the brackets or under these parentheses you just need to give the name of your script so my script name is debuggings and then you need to provide at which point you need to start the debugging so let me enclose this code inside a new function so let me define a new function and i'm going to name it as main and this is going to be my main function and inside the main function i'm going to execute all this script and i'm going to just call this main function inside this if condition and here on the python shell i can just write debugging dot the function which i want to call so i'm going to just call the main function and then i'm going to press enter and once again it shows me that debugging doesn't have this main method because after saving i haven't restarted the pdb once again so let me just quit once again quickly and let me just quickly close this terminal and restart this terminal and once again i'm going to give the python command which is going to start the python shell and i'm going to import the pdb and the script once again and now i can just give the pdb dot run command and then give the name of the script on which i want to work on which is debugging and then i'm going to call the main method inside the debugging and then press enter and once again give the n command which is for the next which is going to start the debugging of your code so this is how you can use the pdb command in order to debug your python script in the last video we have seen how to debug our python script using python debugger or pdb now in this video i'm going to show you how you can debug your python script using pycharm ide so to start with i have this python script which takes two user input both numbers and i have created this add function which just add these two numbers and return the sum and using this print function i'm just printing the sum of these two numbers now let's run this code normally without any debugging and i'm going to just give two numbers here 44 and 55 it's going to give me this kind of output which is wrong because the sum of 44 and 55 is not obviously 4 4 5 5. now some of you might already know the problem with this code but let's debug it with the help of the python debugger so in order to start the debugging in pycharm ide you just need to click this icon which looks like a bug and when you hover over it it will say debug so i'm going to click on this debug button which is going to start the debugging of my program so you can see here this debugging window is opened and this debugging window have two sections one is console section and other is debugger section so right now we are in the console section where we can provide the user inputs and see the output of our python script just like the normal output now there is also a debugger window where you will be able to analyze the variables and all the frames of your program so i'm going to go to the console window and here i'm going to provide the first number and the second number and i'm going to press enter and it prints the sum of these two numbers which is not correct but our python script is finished executing now in order to debug this python script we need to set the breakpoint at which the execution of the program will stop and we will go step by step after this point so i'm going to set the break point at this line which is line number 13 at which my main function is called and then click on this line where you want to set the set point and you will be able to see this red circle logo which means that we have set the breakpoint at this point so let's start the debugging once again and you will see because we have set the breakpoint here the program execution is stopped at the line number 13 and how you know that the execution is stopped at line number 13 you will be able to see under frames this line which is highlighted and you can see the line number is 13 so at this point the program execution is on the line number 13. also you will be able to see these kind of icon on top of this window so the first icon here is the step over icon which you can click to step over your code the second icon is step into icon using which you can step inside your function or a class on which you are currently on the third icon is step into my code so generally if you use this option which is step into and your program contains some inbuilt or builtin functions then it's going to go into those builtin function and this other option which says step into my code is going to only step inside your code and not into the builtin functions or the classes there are few more icons here one is four step into and other is step out which we are going to see later also under this variables section you will be able to see the values of your variables so first of all i'm going to click this button which says step over you can also press f8 to step over so i'm going to click this button and because my program asked the user to provide some input i will go to the console and provide those inputs so i'm going to just give 33 as the first number and 55 as the second number and then once again i'm going to press enter which is going to print the output and we come out of the debugging so now you know that this breakpoint is not helping us so we are going to remove this breakpoint and we are going to set our breakpoint here on the line number nine so here we will be able to see the values inside the variable x and y so that we know what's the problem inside our code so let me start the debugging once again and once again i'm going to give these two inputs 33 and 44 let's say and then you can see our program execution is stopped at this breakpoint and you will be able to see the values of your x variable and the y variable now immediately you will see that this x value is the string and also this y value is the string and whenever we use this plus operator with two strings it's going to give us the concatenation of those two strings also in the variables you will be able to see the list of variables and the type of those variables and the values inside those variables so you can see x has string type and the value is 33 and y has also the type string and the value is 44. now i told you that you can use this button to step into your code so i'm going to click on this button which says step into my code which is going to step inside this function so our program execution was on this line this was the break point we have set and when i clicked this step into my code it has stepped into the function add if i would have pressed the step over button then my program execution will go to the next line and not inside this add function so because i have pressed this button which says step into my code that's why it goes inside the function so here also you will be able to see the values of your x variable and y variable and also you will be able to see the value of the sum when you just click the step over button and here you will be able to see the value of sum which is three three four four which is the concatenation of these two numbers so immediately you will know that you are not adding these two numbers you are just concatenating two strings which gives you this kind of result so once you have pointed out the problem in your code we are going to stop our debugging so there is this red button here which is a square button i'm going to click on this which is going to stop that debugging now in order to fix this code i can just type cast this input which is a string into the integer and with the second variable also i'm going to do the same and now let's start the debugging once again and once again i'm going to give the two numbers 33 and 44 and press enter and the program execution will stop at the breakpoint and now you will be able to see the values here which is 33 and 44 and under variables you will be able to see the type of these two numbers which is now end so both are int values i'm going to step over now so last time we have stepped into the function which is the add function this time i'm going to just press the step over button which is going to not go inside the add function but just step over to the next line and you will be able to see the value of z here which is 77 which is the correct sum of these two numbers so this is how you can use pi charm to debug your python script in this video we will talk about a special tool called python pip so we are going to see what is python pip and how to use python pip so let's get started so first of all what is python pip so pip is a command line tool for installing and managing python packages which are generally found on a special index called python package index now if you want to know more about python package index you can visit on a website called pipe.orgpypi.org and you will be able to get more information about python package index on this website so what is python package index python package index or pi pi is a repository of software for python programming language now pi pi helps you to find and install software developed and shared by the python community you can get more details about pi pi by clicking on this link or this link which are shown on the home page of pi pi and you can see at the time of making this video there are almost more than 150 000 project available on this index and if you want to search for any special project you can search it using this search text box so let's see how we can use python pip using command line so generally whenever you have installed python on your windows or any other operating system pip will be installed with the same installation of python so if you have installed python 3.4 or above most probably the python pip will be already installed on your operating system now to check which version of pip is installed on your system you can give this command python hyphen hyphen version and then press enter and it's going to show you the version of pip installed on your system so you can see pip 10.0.1 is installed on my windows operating system and the python version which it supports is 3.7 now the first thing which you need to know about this tool called pip is how to use this tool so to know more about this tool you can give this command python hyphen hyphen help and it's going to show you the commands which you can use with this command line tool so here you can see the usage you give the pip command and then one of these command either install download uninstall list show and all these other commands in order to install a package or uninstall a package or get to know more about a particular package also there are some general options here which you can read so for example if you want to get help you give these options or if you want to print the verbose output you can use these options and if you want to know the version you can use these option and all these other options are available with this command line tool which is pip so let me clear this command prompt with the command called cls and i'm going to first of all go into the python shell using python command and in here i'm going to import a special package called flask and i'm trying to see if it's already there or not so i'm going to press enter and it's going to show me this error which says module not found error so this module flask is not right now recognized by my python interpreter so let me just exit from this interpreter by just pressing exit and now i'm going to just give cls so in order to know more about a particular package you give this command python search and the name of the package so in my case i want to just search for a package called flask and i'm going to press enter and it's going to give me a big list of package which are related to flask so because flask is a popular package on python package index that's why you can see so many options for the flask package so i'm going to once again clear the terminal and i'm going to install this package which is flask so in order to install the package you give this command pip install and the name of the package and then press enter and it's going to start downloading this package so now you can see this package is successfully installed on my system and you can see the version which is installed is flask 1.0.2 now in order to know more about a particular package which you have already installed you can give this command so in order to know more about the package which you have already installed you give pip show and the package name and when i give this command you can see the name of the package is flask the version which is installed is 1.0.2 and there is a brief summary of this package also which is available here and the home page for this project is also available here who is the author and all the other details about this package which you may find useful are given here using this command which is pip show and the package name now after installing a package i'm going to verify if this package is available using the python shell or not and once again i'm going to try to import this package which is flask and then press enter and you will be able to see now i don't see any error so if you don't see any error this means that this package is successfully installed and in future you will be able to import this package to use it on any of your python script which you create after installing this package so let me once again exit from the python shell and let me clear the command prompt once again now in order to list out all the packages which are installed on your system you can give this command which is pip list which is going to print the list of all the packages which is already installed on your system now in order to uninstall any package you just need to give this command pip uninstall and the name of the package for example i want to uninstall this package which we have installed which is flask and i'm going to press enter and you can see it says uninstalling flask and it will ask you whether you want to proceed or not so you just need to press y in order to proceed and once you press y it's going to just uninstall that package from your system and at the end you will see this message which says successfully uninstalled and the package name which you have uninstalled you can once again give this command pip list and now you can see flask is no more in the list of installed packages so this is how you can use python pip in order to install and manage your python packages in the last video i have shown you how you can install and manage your packages using python pip now in this video i'm going to show you how you can install and manage your pip packages using pycharm ide so here i have a very simple opencv python script which i used to load this image which is pythonlogo.png file now in order to run this script i need to import this package which is called cv2 and this package is available on python package index so let me just open the pi pi dot org website and let me search for opencv here and when i search for opencv you will be able to see multiple opencv related packages but the one i want to install is this one which is opencv hyphen python so i'm going to click on this package to see more details about this package so you can see the latest version of this package at the time of making this video is 3.4.3.18 and in order to install this package with pip you just need to run this command which is pip install opencv hyphen python now in order to import this opencv hyphen python on your pycharm ide what you need to do is just create your project and write your code and then go to the file and then go to the settings so just choose the settings option here and once the settings option is open you will be able to see different categories here you need to choose this category which says project colon the name of your project and then click on project interpreter now by default some packages are already available here which is pip and setup tools and we want to install a special package which is opencv hyphen python so in order to add this package you just need to click on this plus button so i'm going to click on this plus button and you will be able to see this search bar here so here you just need to search for the package you are looking for so i have just entered opencv hyphen python here and the first option which is available here i have just selected it and you can see this is the same package which we have seen on the python package index website so let's match this once again so here you can see the latest version is 3.4.3.18 and here also the latest version is the same and the description is also same so wrapper package for opencv python bindings and here also the description is same so this is the package we want to install if you want to see the github repository also i'm going to just scroll here and then i'm going to open the github page from the pi pi website for this opencv hyphen python and this github url is also same which we are seeing on the pie charm ide so now we know that we need to install this package which is opencv hyphen python so we just need to click on this button which says install package which is going to install this package for your project and after some time you will be able to see this message which says package opencv hyphen python installed successfully so i'm going to just close this window and after closing this window you will be able to see that this opencv is now visible in your project interpreter and now we are going to click once again ok and once you click ok you will be able to see here at the bottom some processes are running which is the process of importing this library into your project and after some time you will see that this red squiggly line for the error has disappeared from the import cv line so now we will be able to run this code so let's run this code and let's verify if everything is working fine so i'm going to just right click and then click on run the project name on the file name and it has opened the picture which i want to open which is this python logo picture so this is how you can install and manage your pip packages using pycharm ide in this video we will talk about global variables local variables and nonlocal variables so let's get started so to start with i have a very simple function which is func and here it has one print statement which is printing the value of x but you can see here x is not defined locally inside the function instead i have declared x outside the function and i am just assigning the value to x just before calling the function here so what do you think will happen so let's run the code and let's see what happens so because this x is declared globally and it's in the global scope so first of all your function will search for the value of x inside the function in the local scope and if it doesn't find the value x inside the local scope it's going to see outside the local scope in the global scope for the value of x and we have defined this value of x outside the function in the global scope so this print statement will take the value of x from the global scope and that's why it's printing global using this print statement now let's modify this function little bit so i'm going to define a local x inside the function and i'm going to assign a new string to it so let's say this is a local value so i am going to assign the string to the x so now we have x variable inside the local scope of the function and also we have another x variable outside the function in the global scope so what do you think now will happen so let's run the code and let's see what happens so you can see here it's going to print local because the variable will take the local value or local value have more priority than the global value so whatever variable is declared nearer to the use of this variable that variable value will be used and that's why the local is printed because it's declared nearer to the use of this x which is inside the local scope of this function now let's print the value of x outside the function so in the global scope i want to print the value of x once again and let's run the code and let's see what happens so this local is printed using this print statement and the global is printed using the print statement which is outside the function so right now things are easy to understand when you declare this value x outside a function in the global scope and call the value of x using print then it's going to print the global and whenever you use the variable inside the function in the local scope it's going to print the local variable value which is local to the function so this means variable x which you have declared inside the function is the local variable and this variable x which you have declared outside the function is the global variable now let's make things little bit interesting and i want to just print the value of x before even assigning the value local to it so right now i want to do something like this so until this print statement i haven't declared the value of x locally so using this print statement the value of x is supposed to be taken from the global variable which is this variable and then once we have declared the value of x locally then this print statement is going to print the value of x using the local variable but when we run the code it's going to give us the error and it's going to say that this is unbound local error which is local variable x referenced before the assignment so right now what we are trying to do is we are trying to mix the global and the local variables and python is not able to understand whether x is a local variable or x is a global variable so to solve this problem we need to state explicitly that this x which we want to call using this print statement is the global value right so x here we want to take from the global value so to state that we can use a keyword called global and then the variable name so by writing this kind of expression we are telling python that x is declared globally outside the function and we want to take the value of x globally so using this statement we are just stating that use the value of x using the global scope now when we run the code it's going to run fine so now you can see it has printed global here so let me just change this print statement so we will be able to understand what's happening really here so i'm going to just assign some number to the print statement let's say this is number one print statement and then this is number two print statement and this is number three print statement so we are going to know which value is printed using which print statement so i'm going to run the code once again and now you can see first print statement which is this one is going to print global because until here the value of x is taken from the global scope so it's going to print the value of x which is global which is defined here now you can see here we are reassigning the value of x and we are just saying that now we want to assign local to this x variable but still this variable is the global variable because we have explicitly stated here that take the value of x from the global variable so this global variable value will be reassigned and now this global variable value is local because we have reassigned the new value inside the global variable x and in the third print statement because we have already changed the value of x here now the new value of x will be local and it will be accessible from the global scope also so this also prints local so once again when you use this expression you are telling your local function that use the value of x from the global scope so now whenever you reassign some other value to x this is not the local declaration you are just reassigning the value to the global variable which is x here okay so once you have changed the value of x to local it will stay there that's why here also it has printed the value of x is equal to local now let's talk about the nonlocal variables so nonlocal variables behave almost similar to global variables but they have some differences so let's say i will define instead of saying that this is a global variable i'm going to say that this is a nonlocal variable and when i run the code it's going to complain and this is going to say that this is a syntax error and no binding for nonlocal variable is found so nonlocal variable bindings you can only do inside the nested function so generally you use nonlocal variables inside the nested function you cannot use this nonlocal keyword instead of the global keyword so let's see how we can use the nonlocal variables inside the nested function so what i'm going to do here is let's say i'm going to define the value and let's say this time i want to just use the value of x as numbers so here i'm going to assign x is equal to 20 so this x is in the global scope and i'm assigning 20 to it and then i'm going to once again inside the function i'm going to declare a local x and i'm going to assign 50 to it and then i'm going to define one more function inside this function and i'm going to name it as let's say inner function and let me just add the def keyword and then inside this inner function what i am going to do is i am going to define a nonlocal variable once again x and then what i am going to do is i am going to reassign the value of x is equal to hundred so what i have done i have declared this x global variable and assigned 20 to it and inside the function also i have declared one local x variable and i have assigned 50 to it and inside the inner function of this function i have defined a nonlocal variable which is x and i have assigned the value 100 to it so now what we are going to do here is we are going to call this inner function inside our outer function which is the func function okay so this is the inner function and we are calling this inner function inside this function which we have declared so now what do you think will happen so let's run the code and let's see what happens so this first print statement which is this one it's going to print 50 because until now before calling the inner function the value of x will be taken from the local scope because we haven't stated here explicitly that x is a global variable so the value of x will be taken from the local scope right so we haven't written here that value of x is a global variable x value right so that's why the value of x will be taken from the local scope and that's why it's printing 50 here using the first print statement now here we have called the inner function that means the value of nonlocal variable is assigned to 100 and once again we are calling the value of x so here inside the inner function we have defined the nonlocal variable that means it's not a global variable so it's not changing the value of the global variable or it's not using x from the global scope but this x will be taken from the local scope so this x will be overwritten by 100 values this is the new value we are assigning to our local variable which is x right so that's why it's just giving us 100 using this print statement so this nonlocal keyword you generally define inside the nested functions to state that we want to take the value of x from the local scope of the outer function not the global scope so this x is essentially this x which is defined inside this function and we are just reassigning the value of x to hundred and that's why it's printing hundred here and also you can see this print statement which is printing the value of global x which is this one that's why it's printing 20. so because we are not using this global x inside the functions because we have just used the local variable x inside the function and then we have reassigned the value of 100 to this local variable this x is not going to change and that's why it's printing 20 here now let's see what will happen when we change this keyword nonlocal to global and once again i'm going to run the code so now let's go to the function and here we have defined the local x which is different from the global scope so until here the value of x will be taken from the local scope so this print statement because we haven't called the inner function before this so the value of x will be taken from the local scope so here it's going to print 50. now after this print statement we are just calling the inner function and inside this inner function we are just saying that take the value of x from the global scope not the local scope so using this expression we are saying that take the value of x from the global scope so this value will not be affected by this reassignment because now we are changing the value of the global x and not the local x so that's why when you call this print statement the value of x will be taken from the local scope so using this print statement when you call x it's going to take the local value of x because this inner function has no effect on this value of the local x and that's why it's printing 50 once again using this print statements so this x value will come from the local x and not from the global x and the last print statement is going to print hundred because this is the global x we are talking about and we have already changed the value of globalx 200 using this expression that's why it's printing 100 here so there is our difference between nonlocal and the global variables if you write here nonlocal then here this value will be treated as the local variable so here we are changing the value of the local variable of x if you declare this as the global variable then we are changing this value which is in the global scope so this is how you can use global variables local variables and nonlocal variables in python i hope you've enjoyed this video i will see you in the next video hey guys welcome to this video on python unit testing tutorial for beginners using pi test so first of all what is unit testing so according to wikipedia unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit to use or not so in unit testing we perform the lowest level of testing that is individual units of software are tested that means units like functions subroutines and classes are tested to verify if they are giving the desired result or not now let's discuss why should we unit test our code so when you write unit tests they reduces bug in the new features and existing features so let's say if you are writing a new feature in your code unit tests can help you to reduce the bugs which may appears during the execution of your code now if you write good unit tests this serves as a good documentation for the person who is using your code so because in unit test we are actually using the functions or the classes and testing them so if the person who wants to use your code he reads the test he will be able to understand how to use your code also when you write test for your code it reduces the cost of the change in the production so if some code goes to production without testing and you find the bug in the production stage then it's much costlier than fixing your code when you are developing your code next unit test helps in faster debugging and faster development of your program also because you have the idea of what should be the desired result that means you can develop your code in a manner which is perfect for your tests and at last but not the least unit test helps us to better design our program now let's talk about the unit testing frameworks which are available in python so i have listed here three top most unit testing frameworks which we can use to write our unit tests so first module is unit test module and this unit test module is present in your python standard library so you don't need to install any extra module in order to use this unit test module the next module is the nose module which is not there in the standard library but it's simpler to use than the unit test framework and at last you can use the pi test framework which is not in the python standard library but it's one of the most popular unit testing framework for python so we are going to use pi test for the unit testing of our python code so let's see how we can install pi test package on our operating system on which we are working on so you can install pi test using pip so we are going to just write pip install pi test and then press enter which is going to install this pi test package on our operating system so you can see pi test is now installed on my operating system so i'm going to give cls command to clear the terminal and then first of all i can give this pi test command and then hyphen h in order to get the help about pi test so just press enter which is going to give you all the flags or the commands which you can use with the pi test so the usage is given here you just need to use the pi test keyword and then you can give the options which are listed below and you can give the file or directory name or the list of files or directories so for example the general options are given here so when you give this flag minus k or hyphen k it's going to match the substring or the regular expression which you provide after this flag and when you use hyphen m this means that it's going to test the functions which have the name assigned directly to them that means only run the test which have a given mark expression so i'm going to try to show you all these options one by one but let's see how we can write the test to use them using pi test so in here i have a python script called math underscore func dot py file and inside this script i have two functions one is a simple add function which adds two values and other is the product function which returns the value of the multiplication of two values now in order to write the unit test for these functions i can create a new file so let me create a new python file and i'm going to name it as test underscore math underscore func so i have added this extra prefix here which is test underscore in front of the name of my file which is math func so i'm going to just create this file so this test underscore prefix which i have added in front of my python script name will help pi test to recognize that this is the file in which the unit testing functions are written so it's going to go to that file and here we can first of all import the math func python script and then we can define the test functions so the test function you can define simply as you define any other function in your python script so you write def and then just start the test name with the test prefix so test underscore and then whatever name you want to give to your test so first of all i want to test the add function here so i'm going to just write test underscore add and this function is not going to take any parameter and inside this function i can provide some assertion for my functions so i can use a special keyword which is assert and then you can call your function in your python script so mathfunc dot add function and here as an argument i'm going to provide two numbers let's say 7 and 3 which is going to give us the result 10 so we are going to just check whether this function is returning 10 or not and this is called assertion assertion means you want to assert that the function is returning the desired result so we are expecting the result 10 when we provide 7 and 3 as an argument to this add function you can also provide multiple asserts here so let's say i just want to provide for example 7 here you can see that y is equal to 2 is the default value of y so here in the assert i can only give one argument and the value of second argument which is y will be taken from the default value which is two so seven plus two is nine so we can just say whenever you provide seven here it's going to give us nine once again whenever you provide five here it's going to give us seven so in this way you can provide multiple asserts inside your function whatever you think will come as an expected result of your function so i'm going to define the second function which is test product and once again i'm going to pass no argument here and once again i can just use this assert keyword and then the name of my library which is math func dot the function this time we are going to test the product function and let's say we just want to check the product of 5 and 5 and the expected result will be 25 in a same way whenever you provide here for example only one argument the default value of y is two right so when we provide only one argument which is 5 here we will be expecting 10 here in a similar way when i provide let's say 7 here we are expecting the result 14 here so once we have written our unit tests let's try to run these tests using pi test so first of all i need to go to the directory where this test script is there so i'm going to just copy the path and then go to the terminal and i'm going to cd to this path which i have copied and let me just remove the script name from here and then press enter so now i'm in the folder where my math func dot py is there and test underscore math underscore func dot py file is there so in order to run your unit test file you just need to give this command pi test and the name of your test file which is test underscore math underscore func dot py in my case and then i'm going to press enter and you can see it's going to give me two passed in whatever time it took to execute these two tests so because we have written two tests here for two functions it's going to show us this result which is two passed let's say we are going to expect some unexpected value so here we have written some wrong value which we are expecting and now when we run our test it's going to fail you can see one passed and one failed and pi test will also give you the information about the assertion failure so the assertion failure is happened at this assertion where you are just testing 10 is equal to 18 which is wrong here so once again we are going to correct this also let's say some developer has changed the function which you are testing so instead of returning the addition now i'm going to return the subtraction which is going to break that test now so i'm going to run the test once again and once again it's going to give you the error and this time it's going to show us that the result is 4 but we are expecting 10 as the result and that's why it's failing so once again i'm going to just fix my code and then once again i'm going to run my test and once again the text will pass so let me just clear the terminal using cls command and you can also give a flag called minus v which stands for verbose in order to get the more detailed result so i'm going to press enter and you can see it's going to give us this flag passed or failed in front of your tests and both tests are right now passing that's why it's written passed in green here let's break the test once again so i'm going to just say minus here and once again run the code and now it will say this test is passing but the test add is failing due to this assertion so i'm going to once again fix the code and come to the terminal once again i'm going to just clear the terminal and you can also run your test using this command so you just need to write pi dot test without giving any name in front of this pi dot test and then press enter which is going to automatically recognize the test file because we have given the special prefix here test underscore this is how your pi test will recognize that this is the testing file so it's going to just run the test inside that file and once again you can see it runs and two tests are passing you can also give the verbose flag here which is going to give you the more information about your tests now let's say we are going to remove this prefix from our test so let's say we just write tes underscore add so there is no test prefix in front of your function and once again i'm going to give the same command and you will see only one test is recognized which is test underscore product and this is because we haven't provided that test prefix in front of the function so in order to recognize this function as a unit test you need to give the test keyword as the prefix of your unit test function also whenever you change the name of your test file so let's say i'm going to refactor the name and i'm going to just remove the t from test and then once again i'm going to press refactor which is going to change the name of this test file and now this test file name is tes underscore math underscore func and once again i'm going to try to run my test and it's going to say no test run in this much amount of time so again whenever you don't give the test keyword in front of your file name then pi test will not be able to recognize that this is your unit testing file let's go to the terminal and i'm going to just give the cls command in order to clear the terminal and let's give the second command now which we have used for running the test which is the pi test command and the name of the file so now my file name is tes underscore math underscore py and now i'm going to press enter and you will see now it's going to recognize because we are specifically giving the file name in which our tests are there so if you want to run your test inside some file which doesn't have the test prefix in front of it you can just use pi test command and then give the name of the file and pi test is going to recognize that this is the file in which your unit tests are there and it will run all the unit test in this file so so in the last video we have written two test functions for our add and product functions which were able to test those functions using these numbers now additionally i have added two more test functions here and these two test functions i have added to test the strings with the add function and the product function so using this plus operator we can also add two strings right so i have added the string test for the add function and the product function here now the first thing i want to show here is you can add any comparison operator here so it's not necessary that you need to use this equal to operator here you can also write for example greater than operator or greater than equals to operator or the less than operator or less than equals to operator or not equals to operator so you can use all these comparison operator with your assert statement additionally you can use this is keyword to test whether something is something so using this is keyword i am testing here that the result which i got using this add function over the strings is it a string or not so using this type i'm just finding out the type of the result and i'm checking if this result is a string or not you can also use in operator or not in operator so using this not in keyword we are checking whether the string is inside our result or not so this string or let's say this string is not inside our result so this assert is going to pass because this string is not present in our result additionally you can also use this in keyword and you can check whether some string is inside your result or not so i can also write hello in result which will check if this keyword is inside our result or not now the next thing which i want to show here is let's say you just want to run one test from here which is test add and you don't want to run any other test how you can do it using command line so you can just write pi test command and the name of your test file which is test underscore math underscore func in my case and then you can add double colon here and then give the name of your test so let's say i just want to run the test ad so i'm going to just run this test and you can see it's going to only run the first test let me just add minus v here which is going to show which test has passed and you can see this test has been passed which is test add and let me just clear the terminal now the next option which i want to show here is hyphen k so once again i'm going to just write pi test here and we will once again add the hyphen v for verbose and you can use a special option which is hyphen k and then you can give any expression which you want to match using this hyphen k option so let's say we only want to run the add test so we have to add test one is test underscore add and other is test underscore add underscore string so i just want to run the test for the add function so here inside the double quotes i can just write add and then press enter and it's going to run the test which contains add keyword or add string so you can see it ran test underscore ad and test underscore add underscore string you can also use or operator here so let's say you want to run the test which contains add or which contains string keyword and when i'm going to run the test it's going to run all those tests which contains either add or the string keyword so there are three tests which fulfills this condition and all those three tests are performed and other tests will be deselected so you can see four item and one item is deselected here also you can use the and instead of or so i'm going to just write end and then press enter and it's going to run only those tests which contains add and string both so there is only one test name which contains add and string both which is this one so only this will be executed and the other three test will be deselected let me once again clear the terminal now the next option which i want to show here is the hyphen m option so once again i'm going to just write here hyphen m and after this hyphen m you can provide any mark expression so let me go to my code and here i just need to import the pi test first of all so let me import pi test and here you will see that it's showing me the squiggly line because of my ide which is pie charm so because i have installed pi test using pip on the command line which is not recognized by my pycharm ide that's why it's showing me this squiggly line but i'm running my test using command line so this will work so don't worry about this squiggly line the import will work and after that what i can do here is i can add a decorator so i can just write pi test dot mark dot any expression which you want to give here so this test add and test product is for the numbers so we can write number here and also we can add the same decorator for the test product and for the other two tests we can just write that these tests are for the strings so this expression is upon u so you can give any expression here which you want to match later using hyphen m option so i'm going to also add this decorator over the other string function also so we have two markers now one is number and other is the string so now after hyphen m you can give the mark expression name so let's say i'm going to just write number here and then press enter and it's going to run all the tests which have the mark number which is the test add and test product now let's run the test which have the mark string so i'm going to just write string and then press enter and it's showing me 4d selected because i forgot this s after the string so let me just add this s and then press enter again and you can see it runs only those tests which have string mark on top of them so this is the string and this is the string mark so those two tests were executed and other to test were deselected let me just clear the terminal once again now the next option which i want to show here is hyphen x option so once again i'm going to just write pi test hyphen v and then hyphen x now this hyphen x means exist first so whenever first failure occurs in your test the pi test will exit from the execution of your test so let's just add some failure assertion here so i'm going to add the failure here so let's say i'm just checking the failed assertion here just to check whether this hyphen x works or not so i'm going to just press enter now and you can see first test was run which was passed but the other test failed so it has shown us the stack trace of the failed test and after that the text execution was stopped so after two tests because the failure occurred the other two tests which was supposed to be executed are not executed because of this hyphen x option so as soon as the first failure occurs your test will exit now let's say you don't want to see this tech trace after the failure of your test so this is all the information which is given to you about what assertion has failed or not so let's say we don't want to see this so how to just skip that stack trace you can add hyphen hyphen tb is equal to no and this is going to disable the stack trace and then press enter and you can see now this text trace is not printed only the success or the failure will be printed but not the stack trace let me clear the terminal once again and this time i want to show one more option which is max fail so here you can just write hyphen hyphen max fail option and then give the number in front of it after the equals 2 symbol so let's say we just write max fail 2 here then it's going to wait for the maximum number of failure and then it will exit so let me just run this test so you can see all four tests has been executed because maximum failure we were expecting is two that's why all four were executed because there was only one failure let's say i just make it one so now the value of max fail is one and then i press enter and you will see after the first failure it's going to exit because we have provided max fail one and this is the number of failures which we are expecting after that your test will be exited so let me just clear the terminal once again and let me show you one more option so this time i want to show you the skip option so let's say i just remove all these markers from here and and now i want to add a mark which is skip so just add this decorator on top of your test which is at the rate test dot mark dot skip and then inside the parenthesis you can give the reason for the skip so here you can just write reason equals and whatever reason you want to give here so i'm going to just write do not run number add test okay so this is the reason which will be printed and when i will just execute my test once again with hyphen v you can see this first test is kept so it's not executed it's skipped and all the other three tests were executed let me just fix this second test so it's going to pass and once again let me just run this test and you can see all other tests were passed and the first test is skipped because we have added this skip decorator on top of the test add function also there is a skip if option available so here instead of skip you can just write skip if so this skip if is going to check for some condition so let's say i'm going to import the sys module here which is going to give me the information about the python version i'm running and then as a first argument i can first of all give some condition so i'm going to just write sis dot version info which is going to give me the version of python available and i'm going to check if this version is less than let's say 3.3 then i want to skip this test so i'm going to once again let me clear the terminal and once again run the test and i see some failure here which is here i added dot instead of comma so you need to separate this major and minor version using comma so this means 3.3 python version and once again i'm going to run the test and then press enter and now you can see all four tests were executed because this condition was not met now let's say i want to just give the opposite condition of that which means i want to skip if i have the python version greater than 3.3 which i have i have the python version 3.7 let's check it using python command so i'm going to just write python hyphen hyphen version and then press enter and you can see i have 3.7.0 version and let's run the test once again and now you can see this test is skipped because this condition is met now the next option i want to show here is hyphen s options so let me just make this condition like this so this test will not be skipped and the next option we are going to see is the hyphen s option so let me clear the terminal and let's see which option i'm talking about which is hyphen s and this option you can use to print any output which you want to print using let's say print function so let's say i want to add a print statement here so i'm going to just add print and then let's say i want to just print the addition of 7 and 3 and for just knowing whether this print statement has been executed i'm going to add this string here so we know that this print statement has been executed so now when i execute my pi test without the hyphen s option first you will see there is no print statement which is executed now if i just add hyphen s here which will allow this print statement to be executed and now you will see that this print statement has been executed and this line is printed using this print statement so if you want to print all the print statements then use hyphen s option or you can also use the option which is hyphen hyphen capture is equal to no and then press enter which is also going to do the same so either you can use hyphen s or you can use hyphen hyphen capture is equal to no so let me clear this terminal one last time and the last option which i want to show here is the hyphen q option which is the quiet mode so let me just execute this pi test once again and you can see all this information is printed and when i add minus q here which is the quiet mode you can see no information is printed here about the test which test is passed only the important information is printed which is for test passed in this much amount of seconds if i remove the hyphen v here from here you will see all the other output is gone and only four passed in whatever amount of seconds is printed so this is the quiet mode which will not print unnecessary information it's going to just show you how many tests passed and how many tests failed so this is how you can use some options with pi test command in this video i'm going to show you how to use a special decorator which is parameterize so here i have on the left hand side a simple function which is add and on the right hand side i have written the test for this function and i have written three test function for the add function the first test function here test the add function using the integer values the second test function i have written for the string values and the third test function i have written for the float values which i provide to the add function now one thing which you will notice here is i'm using the same add function three times here in all these three tests and there has to be a better way in which we just need to call this add function only once now you can say that why we need three functions i can just write three assert into the same function and i can just remove these two other test functions this is okay but still i have to call this add function three times to test it with numbers strings and the float values and in those type of situations you can use a special decorator which is parameterized in which you need to call our same function to test it with the different type of values so here i have imported this pi test module and then above my test function i will just call pi test first of all then dot mark dot parameterize so we are testing this add function which takes two arguments so here in the parameterize we just need to give the name of these two arguments you can just say that these two arguments will be x comma y because i have given x comma y here so i can just write into the single quotes x and then single quotes y which will be the name of these two arguments so this name depends upon you you can say this is num1 and the y is let's say num 2 or you can say this is arg1 or arg2 so these arguments names are user defined names you can give any names which you want to pass to your function so the number one variable name will be passed as the first argument and the number two variable name will be passed as the second argument now once again when you look closely to this assert you will see the variable values here are first argument second argument and the result so the same three values you need to give here so number one number two and the result so i'm going to just say that the third argument is result here and then as the fourth argument you give the iteratable list so the fourth argument will be a iteratable list where you can provide the values of argument 1 argument 2 and the result so inside this list we are going to give this argument 1 2 and the result values using a tuple so here in the first test i have given seven and three and the result is ten we can give the same values here so seven comma three and the result we are expecting is ten so the 7 will be passed to the number 1 argument 3 will be passed to the number 2 argument and 10 will be passed to the result in a same way we can define multiple tuple values here so the second test is for the string value so the first argument is hello second argument is world and the expected value is this one which is result and the third test case or test scenario is 10.5 for the floating values comma 25.5 and the expected value is 36. now once you have defined this parameterized decorator you don't need to call this add function multiple times what you need is you just need to define the same variable names which you have defined here in the parameterize so the first argument will be num1 the second argument will be num2 and the third argument will be the result and then you just need to pass these values to the add function so the first number is the first argument the num2 is the second argument and the result is the third argument now what's going to happen when you run the test is this list which you have given here will be iterated over by your parameterized function and these values one by one will be assigned to number one number two and the result and the same value will be passed here as the first argument and the second argument and as the result for this assert statement and one last thing which i'm doing wrong here is i think you need to give these arguments name as the string separated by commas so you just need to give this string separated by these commas so the first argument of this parameterize a string in which you define the arguments which are taken by your function to test so num1 and num2 and the result and these arguments are separated by commas and all these values are inside the string so this thing you need to keep in mind that this is a one argument string and inside the string you define those values separated by comma so let's run the code and let's see what happens so you can see now that three tests were run and this first test was with the value 7 and 3 and the expected result was 10 and it passed second you will also see which arguments were passed so in the second test hello and world were passed and the expected result was hello world and in the third test case 10.5 and 25.5 was passed as the arguments and the expected result was 36. so by using this parameterized decorator you can just use or call your function which you want to test once and then pass different type of parameters into it using this parameterized decorator so that hey guys welcome to the next video on python unit testing tutorial for beginners using pi test in this video i'm going to show you how to use fixtures with pi test so let's get started so to start with on the left hand side i have this student db class now as you can see here in the init method i'm just initializing a member variable which is data is equal to none and then it has two methods one is connect method and other is get data method now this connect method takes one argument which is data file now if you can see on the right hand side i have written two tests for this student db and i have first of all imported this class and then i have initialized this class student db and then i'm calling the connect method here now in the connect method argument i'm giving this data.json as an argument so let me show you what this data.json contains so this data.json contains the data of the student so it has this element called students which contains this array which contains different data about different students so right now i have two student data here one is id one scot pass and other is id two mark and fail so using this connect method i'm just opening this data.json file and then i'm just loading this json file as the dictionary so as you can see here i'm using the json module which i have imported at the top and whenever i call json.load it's going to convert this json.file into the dictionary and then i have this method called getdata which takes one argument which is the name of the student now this name i'm going to search in the dictionary which i got using the connect method and if this name which is provided as an argument is contained in the students data then i'm going to just return this student dictionary so once again as you can see here i'm just importing the student dot db class and then i'm just initializing the student db and then i'm just calling the method called connect and in the connect method i'm giving the data.json as an argument which is this file which contains the student data and in the next step i'm just calling the get data method from the studentdb class and i'm giving the name of the students here so you can see the name of the student is caught that's why i'm giving scott here and in the next test i'm giving the mark name which is the second name here and then using these assert statement i'm just checking whether this id which i got using the scot data is equal to the id which is there in the json file or not same assert i have written for the student's name and the student's result and similar test i have written for the second name or second student which is mark now as you have already seen to make things simpler i have just used this json file as the database file but in real life situations you might be having some other databases like mysql or postgresql or mongodb or any other database and you might want to test your database so the same approach you can use whenever you are trying to use the real database so let's first of all run these tests and let's see what's the result here so i'm going to just run these tests and you can see both tests passed here now let's talk about the problems with these two test cases now you might have already guessed that we are repeating ourselves so we are initializing this database twice for the two tests but let's say we have thousands and thousands of tests then you have to initialize this database thousand times so the first problem is the code repetition the second problem is whenever you want to initialize your database for example thousand time these initializations are resource intensive so they will be costlier to your system on which you are running these test cases because they are consuming your resources so what can be the solution here so you can use two type of solutions in these type of cases the first approach is by using the setup and tear down methods now the setup and teardown method falls into the category of classic x unit style setup if you are familiar with other testing frameworks like unit test or nose these methods might be familiar to you so first of all we will see how to solve this problem using the setup and tear down methods and then we will see how to solve this problem using pi test fixtures so we already know the problem so to solve this there is a method called a setup and the teardown module method so i'm going to just write setup underscore module and this takes one argument which is module and then here inside this method you can initialize your resources so let me define a global db variable and i'm going to initialize it with none and then i'm going to just use this initialization inside this setup module so whenever you write the setup module as it is then pi test is going to understand that this is a setup method and it's going to execute this code before executing your tests so what i have done is i have defined the global db variable that means i need to indicate inside the setup method that this is the global variable and that means now inside this db we have our database instance so we don't need this initialization in these two test cases now and now we can use this db instance to call the get data method to get the data about particular student so this is the setup module method there is also a tear down method which we can define here so just write def teardown underscore module and then inside the parenthesis you give the module as an argument and inside this tear down module you can close your connections or free your resources whatever you want to do after your test you can do in the tear down module so i don't have any close method inside this database class so let me create some dummy close method here so i'm going to just say def close and then i'm going to just use pass here so it's just a blank method and let me just provide the parentheses here so let's say we want to use this close method to free our resources or close the connection with the database you can do this by just calling this method so db dot close and this is going to free your resources and let's just uh print something here so we know that these two methods are called so here i'm going to just say that this is a setup method and then inside the teardown module method we are going to just replace this setup by teardown so we know that when this setup method is called and when this teardown method is called so once again this setup module and teardown module will be recognized automatically by your pi test and then this code will be called at the starting of your pi test and this code will be called at the end after all your tests have been passed or failed then this teardown module test will be called so let's run the test once again and you will be able to see that this setup method is called first and after the execution of the tests this teardown method is called and we can recognize it by using this print statement now if you haven't already recognized i have used this minus s or hyphen s option to allow the print method to execute this print statements so if you want to allow your print statements to be printed on the console you need to use this hyphen s flag to be more clear i'm going to just remove the hyphen b from here so it will be more clear so you can see its setup is called first and then you will see two dots here which means two tests has been executed and at the end this tear down method has been called to free any of the resources which you might want to free or close the connection with the database so this is called the setup and teardown method now let's talk about the python fixtures so instead of using the setup and teardown methods pi test allows us to write the python fixtures which will automatically be called at the starting and the end of your test so instead of writing all this code what i can do here is i have first of all imported this pi test and then i'm going to define a method which i will call db because as you can see here all these tests are just using the db instance so we want to somehow pass this db instance to our tests and then i'm going to provide these parentheses and inside this method i want to do the same so i will just call this setup code here and let me just remove all this code from here and at the end what i want to do here is i want to just return this db instance which i got from the student tb class i don't need this global declaration here because there is no global variable and for now let's just comment this code so to declare a fixture you just need to add this decorator at the top of your method which is pi test dot fixture and now what i want to do here is i want to pass this db instance as an argument of both these test cases so now what will happen is pi test will recognize that this is your fixture and then whatever you return from your fixture will be passed using this argument to your test cases so let's run our test and let's see what will happen when we run those tests so you can see both these tests has been passed but you will also observe one more thing and this is that this setup is called twice which is a problem as we have discussed we don't want to call this setup twice we just want to call the setup at the beginning of our tests so how to solve this problem so to solve this problem we can tell pi test that this is a module wide fixture so we just want to call this fixture once at the starting so to do this we just need to write scope is equal to and then just write module here and then we are going to just run our test once again let's see what happens so now you can see the setup is called only once and that's what we wanted right we just wanted to call this setup at the beginning of our test and not at the beginning of each of the test now let's see how we can add the tear down functionality so i'm going to just use this code after this return and then i'm going to uncomment this code and then let's remove this commented code and to call this teardown code which is written here at the end of your test what you can do here is you can replace this return by yield so when your test will start it's going to execute the code until yield and at the end of your test this code will be executed so let's see what will happen when we run the code once again so let's just call the pi test once again and you can see setup has been called and at the end of your tests tear down has been called so let me just clear the terminal and let's run this pi test command once again without hyphen v verbose so we will be more clear and you can see first of all setup has been called and then your test has been executed which are indicated by these two dots and after your tests this tear down code has been executed so this is how you can use fixtures and setup and tear down methods with your pi test test cases hey guys welcome to the next video on python unit testing tutorial for beginners using pi test now in this video i'm going to show you how you can run your tests which you have written using pi test inside your pi charm ide so till now we have been running our tests which we have written using pi test on the command prompt or the terminal but using pycharm ide also we can run these tests inside the pycharm ide so let's see how we can run those tests which we have written using pi test using the pycharm ide so as you can see here on the left hand side i have a class and on the right hand side i have written some tests which are related to this class now i want to run these tests which i have written here using the pi test inside the pycharm ide so for doing this what i need to do is first of all i need to install pi test package inside the pi charm ide so you can see here when i try to import pi test inside the pycharm ide first of all it will give me this red squiggly line which means that pycharm is not recognizing this pie test package till now so let's first of all install this package so just click on file and then click on settings and then go to the section which says project and then your project name so project colon project name so i'm going to click on this and then go to the project interpreter now as you can see here there are some packages which are already here and we want to install a new package which is pi test so i'm going to click on this install or this plus icon here and then i will just search for pi test and the first option you will see here is pi test and you can see this will be the version which will be installed on our pycharm ide so what i'm going to do is i'm going to just click on this button let me just move it little bit above so you can see this button so i'm going to click on this install package button which is going to install pi test package inside my pycharm ide and once this pi test package is installed you will see this message which says package pi test installed successfully with the green highlighted text that means pi test is installed so you can close this window so i'm going to close this window and you will be able to see the spy test now is added to your project interpreter so now when i click on ok and i will wait for some time till this process is has been finished and then after some time you will see this red squiggly line under this pie test is gone so now our pycharm ide recognizes this pie test package and now we want to tell the pycharm ide that we want to run the pi tests so for doing that once again i will click on file and then go to the settings and then this time i will go to the tools so just click on tools option and when you scroll down you will be able to see this option which says python integrated tools so just click on this and on the right hand side you will be able to see under testing that default test runner by default is unit tests so we need to change this to pi test okay so just change this default test runner to pi test and then apply and then click ok which is going to tell pycharm ide that we want to run the pi tests now as soon as you are finished with the setting of pi test on your pycharm ide what you can do now is you can right click on the file where you want to run pi test so this is my test underscore math underscore func dot py file where all my tests are there so just right click on this file and then you will be able to see this option which says run pi test in the file you want to run the pi test so just click on this option which says run pi test in the file and as soon as you do this you will be able to see this window which is for the pi test and you will be able to see all the tests which have been passed on the left hand side and the terminal output on the right hand side so let me just maximize this window here and on the right hand side you will be able to see the output so we have run the test on this file and because i have some output which is a print output as you can see here print statement here which is responsible for printing this line and also i have this print statement for teardown so this teardown is printed using this print statement also you will be able to see two dots here which means we have two tests inside this file which ran successfully so let's add this verbose flag inside our pi test using pycharm ide so once you ran your pi test using pycharm ide you will be able to see this drop down menu here which says pi test in whatever file you are running your pi test on and just click on this file you will be able to see this added configuration option right away after first run of your test so just click on this option which says added configuration and then you can add the arguments which are additional arguments like verbose or hyphen s or whatever option you want to provide here using this additional arguments option so let's say i want to provide this hyphen v option which is for verbose and then i will say apply and then i will say ok and then i'm going to run the test once again either clicking on this button or right away from this button so let me click on this button and once you ran your test you will be able to see the verbose output on the right hand side let me just remove these print statements because they are just not looking good on the tests so i'm going to just remove the setup and tear down print statements from here and i'm going to run the tests once again and then you will be able to see the correct verbose output here now if you want to see all these tests which are passed or failed on the left hand side using these green or red circles then you can click on this green circle at the top here so once click on this green circle and you will be able to see the list of all tests which are there inside your file so this is the script name which is test underscore math underscore func and these are the two tests which are there inside this test script so you can see the first test is test code data which is this one and the second test is test mark data which is the second test here you can also run these tests individually so you can right click and then you can just say run test which is going to run only one test which you want to run so once you run this only one test you will be able to see on the top that only this test has been running so in order to run the whole python script for the test you can once again select this option which is pi test in whatever test script you have so just choose that and then run it once again it will run your all the tests once again and you will be able to see all the tests here so in order to run individual tests you can just right click and then run those tests but remember that you need to change this option again from here also if you want to run the test by just hovering over the test so this is the test let's say i want to run only this test so you can just hover over this test and then right click and then just click on this option run pi test for this test which is going to run only that test so once again i'm going to select this option for the whole file which is going to run all the tests once again for the pi test using pycharm ide so this is how you can run your tests which you have written using pi test using pycharm ide i hope you have enjoyed this video and i will see you in the next video hey guys welcome to the python thread tutorial for beginners so first of all what is a thread so a thread is an individual and separate unit of execution that is the part of a process now what is a process a process is simply a running program so for example if you run a browser it's a process if you run a video game it's a process now inside this process multiple threads can work together to accomplish a common goal and threads allows the program to run in parallel that is the single most important benefit of using threads so let me give you an example so when you play a video game it has to handle few tasks for example it has to handle the graphics and the user interface and if you are playing the multiplayer game it has to handle the networking and all those things it has to handle in parallel because it has to remain responsive at all the times so how does this video game handles those parallel tasks the simple answer is threads it can assign one thread for graphics one thread for user interface and other thread for networking so by using threads the video game can always remain responsive and it can run the task in a parallel way now let me explain threads using this diagram so you can see this whole blue box here is a process and the threads exist inside this process so in this process you can see three threads now inside those threads you can see there is a code and local variable so a thread is a light weight process that exists inside the process also a thread is a sequence of control flow the difference between the thread and the process is that the tread exists entirely inside the process and share its resources so let's say inside this gray box we have the global variables the each tread will be able to share those global variables and in addition each thread can have its own local variables and its own control flow to work with those local and global variables now a single process may have multiple threads of execution and as i already said that threads are useful when an application wants to perform many concurrent tasks on a shared data now let me give you one more example so think about a browser it has to handle the landing pages or the animations or if you want to open multiple website on different tabs and you want to run video in one tab and if you want to do another task in other tab most of the time the browser always remains responsive and the browser can handle multiple tasks at the same time so it uses threads to always remain responsive now there are two different kinds of threads one is a kernel thread and other is a user space thread or a user thread now kernel threads are the part of operating system while user space threads are not implemented in kernel the user space threads can be seen as an extension of function concepts in programming languages now each process have at least one thread and that is the main thread so if you don't even create a thread inside a process it has at least one thread and that is process itself now let's talk about the advantages of using threading so the first advantage is multithreaded programs can run faster on computer systems with multiple cpus because these threads can be truly concurrent on multiple cpu computer systems the second advantage is the program can remain responsive to input at all the times this is true both for single and multiple cpu computer systems now the third advantage is threading allows to do something else while a thread is waiting for a i o task or any other task to complete so it always remains responsive the next advantage is some programs are easy to express using concurrency which leads to elegant solution and as a result they are easier to maintain and debug so some programs or some processes are inherently concurrent in nature and the next advantage is threads of process can share the memory of global variable so as i have already shown you in the diagram previously that multiple threads can share the memory of the global variables at the same time so if a global variable is changed in one thread this change is valid for all the threads a thread can have local variables also as we have seen in the diagram now let's talk about some of the issues or challenges you will face while programming threads for a program the first challenge is the scheduling so to execute a threaded program it must rapidly switch between threads so a program should be able to switch between threads efficiently and conveniently the second issue or challenge is the resource sharing so as i told you that multiple threads can share the same memory of the global variables so since threads share this memory and other resources it must be careful because operation performed in one thread could cause problem in another thread the next challenge you could face is of synchronizing of the threads so threads often need to coordinate their actions and as a software developer you may have heard about race condition of threads which means the outcome depends on the order of thread execution and often for synchronization we use locking primitives now that was the general description about threads now let's talk about the threads in python so in python a thread is an object like any other object that can hold data this object can also be used to run with methods the object also can be stored in the data structures and this object can also be passed as a parameters to the methods also in python a thread can also be executed as a process and during the lifetime of a thread it can have various states now in python there are two modules which supports the usage of threads and these two modules are thread module and threading module now there is one thing to note here is that the tread module has been considered as deprecated for quite a long time so often users are encouraged to use the threading module instead of the thread module so if you will see in python 3 the thread module is directly not available but indirectly you can use underscore thread to use the tread module and this is to remain backward compatible with the previous versions of the python now the difference between the thread module and the threading module is that the thread module tweets the tread as the function while the module threading is implemented in an object oriented way so in the next videos i will show you how to use these two modules in python to create threads and handle threads in python in the last video i have given you a brief introduction about threads and threads in python in this video we will discuss about a module called thread module now if you remember in the last video i have told you that thread module is considered as deprecated in python 3 but if we want to use thread module in python 3 we can still use thread module using a module called underscore thread and this is for backward compatibility so i just want to give you a brief demo about thread module in python 3 so you will have some idea about thread module in python 3. so let's get started so first of all in order to use thread module you need to import it and then generally you will write thread but in order to use the thread module in python 3 you need to use the underscore thread here okay so thread module is not directly available but it's available using this underscore thread module and for printing and giving some delay to our functions we are going to import a module called time now using thread module it's possible to use functions in separate threads so we are going to create a function and then we are going to execute this function in separate threads so let's define our functions and i'm going to name my function as print underscore epoch and if you don't know what is epoch epoch is the start of january 1st 1970 and we are going to try to print the number of seconds from epoch till now and inside this function we are going to provide two arguments first is the name of your thread so i'm going to just write name of thread and the second argument we are going to give is the delay okay so this is your custom function you can provide any name here and any number of arguments here and now inside this function first of all i'm going to create a counter so i'm going to just write count and i'm going to initialize this count with 0. now inside this function what i'm going to do is i'm going to loop around and inside the loop i'm going to provide some delay so we will be able to see the thread execution so let me just provide the while loop here and we are going to just check whether this count is less than three and inside this while loop we are going to sleep for some time using that time module so i'm going to just write time dot sleep and we are going to just pass this delay argument inside this sleep function so i'm going to just write delay here which will be the delay in seconds so for example if i provide the delay of one then our while loop will sleep for one second now after this we are going to increment our counter so i'm going to just write count and then plus equals one which is going to increment the value of counter by one now after this in order to see whether our thread is working or not we are going to print something so let's print something using the print function so what we want to print so let's say we want to print the name of the thread whatever name we will provide for the thread and then i'm going to just give some indicator here let's say this is some line and then we are going to print the time since epoch so in order to print time since epoch we will use this time module and then we just need to use the time function inside the time module so using this print function we will know which thread is executed and at what time it's executed so now we have our function and now this function we want to execute inside the thread so in order to execute this function inside the thread first of all i'm going to use this thread module and there is a special function inside this thread module which is called a start new thread function so i'm going to use that function so let's just call this function which is start underscore new underscore thread now if you hover over this function and when i press control on windows or command on mac and then i hover over this function you will be able to see the signature for this function so this function takes three arguments first argument is the function which we want to execute inside the thread second argument is args which we provide to our function as tuples so second argument we need to provide as tuple and inside this tuple we will provide the number of argument which we want to provide to our function and third argument is the kw args option and this kw arg is an optional dictionary for the keyword arguments so let's provide the function name first of all and our function name which we want to execute is print underscore epoch and you need to remember that you need to provide this function name without any parentheses okay so just provide the function name as the first argument second is the number of arguments so we have provided two arguments for this print epoch function so we need to give these two argument in the form of tuple so first argument let's say is the name of the thread so we are going to just say that this is the thread one which will be the name of this thread and the second argument is the delay in seconds so let's say i want to provide one second delay in the while loop so it will sleep for one second this delay we are providing in order to see the thread execution because thread execution is so fast that it will be difficult to see the execution of threads without this delay now i told you that the third argument is the optional argument so we will not provide the third argument to this start new thread so this statement is going to create a new thread and it's going to execute this function inside this new thread so till now we only have one thread so let's create the second thread and to create the second thread you need to repeat this function which is start new thread and then you need to give the name to your thread so i'm going to give the name thread 2 and let's just change the delay so here i'm going to provide the delay of 3 second to the thread 2 so now we have created two threads and this function will be executed in both the threads so let's see if this code works or not so i'm going to just run this script and you will see as soon as i run the script it exits without printing anything and this is because thread takes some time to be created and we need to wait for the thread creation so we need to provide some mechanism to wait for the thread creation and this weight we can provide in two ways one is we can just provide the blank input function which waits for the input so using this input function we will wait for some time until these threads are created and now we will see if this works or not so let's run this script once again and let's see what happens so you can see now you will be able to see these print statements and you will see that first of all thread one is executed and then thread one is executed once again because we have provided only one second delay between the loop inside this thread so thread one will be executed faster than thread two so first of all thread one is executed and the epoch time is printed and once again this thread one is executed because the delay time is less and then thread two is executed and the epoch time is printed here and then thread one is executed once again and at the end you will see that thread two is executed two times because you can see that here we have the counter limit which is less than three so let's try to increase this limit to five and let's see how many times this print statement is printed so let's run the program once again and let's see what happens so once again this thread one is executed two times and then thread two and then thread one is executed three times once again and then thread two comes and you can see rest of the threads are executed then so here you can see thread one is executed one two three four five times and thread two is executed also five times so in this way you can start multiple threads and execute different functions inside those threads now i told you there is another way of waiting and this is by providing the while loop so i'm going to just provide while one and inside this while loop i'm going to wait forever so i'm going to just say pass and this is an infinite loop which is like waiting so i'm going to just close this script first of all and then run the script once again and then you will see the same effect which you have seen in the case of input function also now here one more thing to consider is the return of this function so if this function which you want to execute inside the thread returns successfully the thread will silently exit but when your function terminate unexpectedly then unhandle exception will be thrown and the strike trace of that exception will be printed on the terminal so if this function throws then stack trace will be printed and this will be an unhandled exception so in order to avoid this unhandled exception you can also provide the try catch block here so here you can provide try and then i'm going to provide some space here and here also and after this code i'm going to just write accept and inside the accept you can provide any error so you can print that this is an error so inside this print function you can just write that this is an error or anything which you want to write inside this accept block you can write using the print function or whatever you want to do in order to handle this exception you can do inside the accept block so let's run this script once again and let's change the delay here so i'm going to provide the delay of two seconds and here i'm going to provide the delay of let's say four seconds and let's run the script once again and this script runs and you can see after two seconds the thread one print statement is executed and then after four second thread two print statement is executed and this thread execution you will be able to see in those intervals so this is how you can use thread module in python 3. in the last video we have seen how to use thread module in python now in this video i'm going to show you how to use threading module in python and i'm going to give you some introduction about threading module how to create threads using threading modules and how to use threading module now threading module is more powerful and it has more higher level support for creating threads in python so let's see how to use threading module in python so in order to use threading module first of all we need to import it so i'm going to just import threading module and once threading module is imported we will be able to use threading module the second module which i'm going to import here is the time module which we have also seen in the last video because we are going to create the same function and we are going to use this function using the threading module which we have seen in the last video now i'm going to create the same method which i have created in the last video also which is print epoch so i'm going to just copy this method in order to save time and then i'm going to just paste it here so now we have our function which we want to call using the threading module and we want to create some threads using this threading module and call this function inside those threads so first of all i'm going to write this condition which is for the main method which is if name is equal to underscore underscore main underscore underscore and under this condition what i'm going to do is i'm going to create two variables let's say first variable name is t1 for thread 1 and then i'm going to call the threading module to create a thread now inside this threading module there is a class called thread which we will use to create threads so just call a thread class here and constructor of this class takes several argument when you hover over here inside the parenthesis you will see the signature of this thread class so it can take the target it can take the name of the thread and arguments also it can take in the form of tuple and it can also take the keyword argument in the form of dictionary so for our purpose we need to call the function which is print epoch so we need to provide a target so in order to provide the target we are going to just write target equals and the name of the function so the name of the function is print epoch which we are going to call and this you need to give without the parenthesis so just remove the parentheses in front of this method when you use it as the argument in front of target the second argument which we want to give here is the arguments which this function takes so this argument we can give using the args parameter so i'm going to just write args equals and then in the form of tuple i'm going to give the name of the thread and the delay to the thread so let's give the name to the thread let's say this is thread one and the delay which we want to give here is one so this statement is going to create one thread and let me create one more thread in order to create multiple threads and instead of t1 i'm going to change the name to t2 so we have t1 variable and t2 variable and in the args i'm going to change the name of the thread which is thread 2 and let's say i want to give this delay of 2 second to the function using the thread 2. so now we have two variables t1 and t2 which is an instance of the thread class now using t1 and t2 we can call a method called start in order to start the thread so i'm going to just call t1 variable and then call a method called start which is going to start the thread t1 similarly i'm going to call the instance t2 and i'm going to call the method start on this instance t2 also so start method we use to start the threads now if you remember in the last video when we have created the thread using the thread module we have given this condition which is the infinite loop and this infinite loop we have used to wait until the execution of thread is completed now in the threading module which is the new module this facility is available using a method called join so on t1 instance i can call a method called join and on t2 instance also i can call a method called join and this join method waits until thread 1 and thread 2 is completed it's execution and then at the end we can print something let's say we are going to print that everything is done so i'm going to print done here so let's rewind what we have done inside this script we have imported threading module and time module and then we have created the function which we want to call using the threads now in order to create the thread using threading module we need to call the class called thread inside the threading module now this class constructor takes several arguments and right now we have given two arguments to this thread constructor which is the target which takes the name of the function which we want to execute using this thread and second argument we have given here is the args which is the argument which we want to give to the function which we want to execute same we have done for the thread 2 also now the start method on these instances is going to start the thread for t1 and t2 and the join method we have used to wait until thread 1 and thread 2 is completed their execution so let's run this script and let's see what happens so i'm going to right click and then run the threading example python script and you can see straight away that this output is printed here similar output we have seen in the case of thread module also so in this output thread one is printed and the epoch time is printed and then thread two is printed which is printed using the thread two so this output is printed using the thread one and thread two output is printed using the thread two and because we have given different intervals for thread one and thread two that's why we can see that thread one is printed and then thread two and then thread one is printed two times and then thread two is printed and then thread one is printed once again two times and then rest of the thread two outputs are printed now let's take one more example and what we are going to do in this example is we are going to create two different functions and we are going to try to call these two functions using these two threads so the first function i'm going to create here is the print underscore cube which is going to print the value of cube of the number which we will provide as the argument to this function so i'm going to just write print here and then using this print statement i'm going to print the value of cube of the number so here i'm going to just write cube and then i'm going to provide these curly brackets and then i'm going to call the format method after this string so let's call the format method which we use in order to format a string now inside the string we want the cube of the number so we will just multiply this number three times so num asterix num asterix num which is going to print the cube of the number once again let me just uh copy this function and then i'm going to create one more function and this time i'm going to name my function as print square so i'm going to just write print square here and then i'm going to just write square is equal to and here i'm going to just print the square of the number now in this statement where we have created t1 and t2 instances the target we can change which is the name of the function so now our target is print cube and print square without the parenthesis we need to give the name of these function so print cube and print square and arguments have also changed so earlier print epoch used to take two argument and now we just want to give one argument to the function and let's say it's two and also the print q function takes one argument and let's say it's two also now let's run this uh script and let's see what happens so you will see that there is an exception here which is some kind of a weird exception which says that exception in thread two and this exception is this print square argument after asterisk must be iteratable right so the problem here is we need to give a comma here which tells this uh parenthesis that this is a tuple value okay that's why it's giving the exception so if your function takes one argument then you need to give the value of that argument and then give the comma so that it's able to understand that it's a tuple and then once again when you run this script you will see the value of cube is printed which is eight and square is printed which is four so this cube value is printed using tread one and square value is printed using the thread two so in this way you can also call a multiple function using multiple thread instances using threading module so this was a brief introduction about threading module in the last video we have seen how to use threading module to create threads in python now in this video also we are going to see how to create threads using threading module but we are going to see in this video how to sub class from the thread class which is available inside the threading module and then create threads out of that class instance so to start with i have the same method which is print a poc which i want to call inside the thread so now here after this method what i want to do is i want to create a class so i'm going to create a class and the name of the class i'm going to give the name as my thread for example and one thing we need to do here is we need to sub class from the thread class from the threading module so we are going to just call first of all threading dot thread so we are subclassing from the thread class now inside this my class first of all we are going to define the init method so let's uh define this init method and in this init method we are going to pass two arguments same as this print epoch function so first argument will be the name of the thread and the second argument will be the delay so let's provide these two arguments first is the name and second is the delay now after this inside this init method we need to call the parents init method which is threading.thread.init so we are going to just call threading dot thread dot underscore underscore init method which is going to call the parent init method which is threading dot thread right now once you have done that we can just simply define some local member variable for the name so first of all self dot name is equal to name and self dot delay is equal to delay so now once we have our member variables what we need to do next is we need to override a method called run which is available inside the thread class in a threading module so i'm going to just define a run method and we are going to overwrite this so first of all what does this one method do so the run method is the entry point for the thread now in the previous video if you remember we have called the start method on the thread class right so the start method starts the thread by calling this run method so under the hood start method calls this run method so if we override this one method that means when we call the start method from the thread class this run method is going to be called so now we can do some logging here so what i'm going to do is i'm going to print first of all start thread and then i'm going to print end thread now between the start thread and and thread logging i'm going to call the print apoc function and this print epoc function is going to take two arguments which is name so i'm going to just pass the self dot name which we have assigned to the member variable and second is the self dot delay so once again when we call the start method on the instance of this my thread class this run method is going to be called by the start method automatically because we are subclassing from the threading dot thread class now once we have our run method and we have created the init method we can create some instances of my class so i'm going to create some instances for example t1 is equal to my thread and then we are going to pass those two argument first is the name so let's say the name is thread one and the delay we want to provide here is let's say one second because this delay is going to go to the print epoch method which is this one right once again we are going to create the second instance let's say t2 and once again we are going to call the my thread class which we have subclassed from the thread class and once again we are going to give these two argument first is the thread so this time i'm going to name it as thread 2 and the delay i'm going to give here is 2 second let's say and now after the instance is created we can call the start method and the join method on these two instances so let me just call t1 dot start and then we are going to call the t2 dot start and once we have the start which is going to start the threads we are going to just call the join method and by now you already know what this join method do which is to wait for the thread to be completed so i'm going to just call the join method on key2 also and let's run this script and let's see what happens so i'm going to run the script and you can see first of all start thread has been called which is from the logging of this print method and then thread 1 is printed and the epoch time is printed and then thread 2 is printed and the epoch time is printed because we have given the one second delay for the thread one so thread one will be iterated faster than thread two because we have provided the delay of two seconds for thread two and one second for thread one as soon as the thread ends we can see this print statement which is end thread and after the end of the thread two we can see this print statement which is and thread two we can also print here so let's print some more things here so we can print the name of the thread so i'm going to just write self dot name and we are going to do the same for the end thread also so i'm going to just print here also self dot name so we will know which thread is starting and which thread is ending once again i'm going to run the program and now you can see start thread thread one so thread one is started and then thread two is started and you can see first of all thread one is ended and at last thread two is ended so this is how you can sub class from the thread class which is available inside the threading module now inside this threading module there are some special methods which we are going to see now so the first method is so let me just go after this start of the threads so here what i'm going to do is first of all i'm going to use the print function and inside this print function i'm going to call the threading module and there are some special methods for example first of all we are going to see what is the active count of threads so what are the number of threads which are there inside this program this is going to print the number of threads now the second method which i'm going to show you is the threading first of all let me just call the threading dot we are going to call the current thread so this is going to print the current thread which is active right now and third method which i want to show here is threading dot enumerate and this enumerate method is going to enumerate the number of threads which are active so let's run this program once again and let's see what happens so i'm going to just run this program and first of all you will see 3 is printed using this print statement which is threading dot active count so active count is going to give you the number of threads and you already know that we have created two threads and one main thread is already available so total number of threads are three here which is printed now the current thread here this print statement prints this output which is the main thread so right now at the time of this print statement main thread is active now this enumerate method as i said is going to enumerate over all the threads which are available so main thread is available and then we have created thread one which is this one this is the name of the thread one and then when i scroll here you can see thread two is available so total three threads are available main thread thread one and thread two so these method you can use to just find out how many threads are there what is the current thread thread and you can also enumerate over all the threads there is one more method so i'm going to call this method here and i'm going to print it inside the print function and this time i'm going to use the instances so t1 dot and there is a method available here which is get name which comes from the thread class and because we are subclassing from the thread class this and because we are subclassing from the thread class this get name is available inside the my thread class also and same we are going to do here also so print and then t2 dot get name so this is going to give you the name of the thread by default so i'm going to just run this script once again and you can see this is going to print thread 1 and this is going to print thread 2. now you might wonder why this name is thread 1 and thread 2 because this get name method is going to give the value of self.name which we have assigned using this name argument so this name is overwritten in the subclass which is my thread class and that's why it's giving us thread 1 and thread 2 name which we have provided if we change this name let's say t 1 and t2 and once again we run the code you can see the name also changes to t1 and t2 so this is how you can sub class from the thread class which is available inside the threading module and we have also seen some of the method which are available inside the threading module which are useful to us in this video we will see how thread synchronization works in the case of multitrading in python and we will talk about how to use locks in the case of thread synchronization so first of all what is thread synchronization so thread synchronization is defined as the mechanism which ensures that whenever two or more threads are executed in parallel or concurrently and if they are sharing the same resource in that case all the tread should not work simultaneously or parallelly on the same resource so let me explain the thread synchronization problem with the diagram so in this diagram you can see there are three threads and all these threads are sharing the same resource it can be a global variable for example so as long as all these threads are accessing this shared resource one by one not at the same time everything will work fine but the problem arises when two or more threads try to access the same global variable or shared resource at a particular time and this kind of situation is called the race condition so a race condition occurs when two or more threads can access the same shared data and they try to change the value of this same shared data at the same time and whenever this kind of race condition occurs the value of the variables may be unpredictable because if two threads are working on the same global variable at the same time you will never know which thread has worked on this variable so the result is the unpredictable value of a variable now let me explain this problem with an example so i have this sample code in which in the first line i'm importing threading module and in the second line i'm just declaring a global variable now i have two functions here one is thread task and other is main task now inside this thread task function i want to increment the value of x every time by 1 so this is the code for this and i want to increment this value by 1 10 times so that's why i have used this for loop in the range 0 to 9 so it's going to increment the value of x 10 times inside this loop now because this x is a global variable i have just added this global keyword in front of x so our function knows that this x is not a local variable it's a global variable so this function is simple enough it just increments the value of x 10 times inside the loop and this x is this global variable which we have declared outside this function now in the main task what i'm doing is i'm creating two instances using the threading module with the help of thread class this we have already seen in the last video how to create threads using threading module so nothing new in this i have created two instances t1 and t2 and i'm passing the target is equal to the function name which is this function which is thread task so both the threads will call the same function try task and then i'm just starting both the threads with the help of start function and then i'm just using the join methods on both of the instances now here inside our main if condition i'm just calling our main task in which our threads are created and executed and then at last i want to print the value of x when all the thread execution has been completed so let's run this script and let's see what happens so you can see here the result here is 20 which is expected because we are incrementing the value of x 10 times using two threads so the value of x will be incremented 10 times by 31 and 10 times by 32 and as a result the value of x becomes 20 but as soon as i increment the value of this range let's say this is 10 000 and i want to just execute this program once again there is no problem until now we can just run this program again and again we will not see this problem because we are incrementing the value of x ten thousand times with a single thread so we have two threads and the result is twenty thousand which is absolutely fine now let's increment the value of range once again two hundred 000 and now i want to show you the problem so as soon as you do this you can see that the thread synchronization problem occurs so here you can see the result is not 200 000 which we were expecting because for such large value the scenario of thread synchronization is happening so the two threads try to work on the same variable at the same time and as a result the value of x is unpredictable so this thread synchronization problem you will see when you try to work on a same variable multiple number of times so in this case we have a hundred thousand iterations and both the threads try to iterate over the same variable using two threads and the result is unpredictable let's try to execute this once again so you can see the result is always different every time i execute this program because the result is unpredictable so how to solve this problem so one way of solving this problem is by using the locks so first of all let me just change this program and try to use locks in this python script so to use locks what you can do is you can declare a local variable here for example lock is equal to threading dot class called lock so this is going to give you an instance of lock now this lock class have two method one is acquire and other is release now acquire method is used to lock and release method is used to release the lock so let me just complete this script and then i will explain what does these functions do so what i'm going to do is i'm going to pass this lock instance as an argument of the thread task function so i'm going to just write args is equal to and then we will just pass our lock instance as an argument of this tread task same we will do for the second thread and because we have passed this argument we need to add this argument here also so i'm going to just pass the lock instance as an argument of this function and now at last what we are going to do is just before we change the value of the global or the shared data we use this lock variable and call the method called acquires and just after you finished changing the resource or the shared data you use a method called lock dot release so once again we have passed this lock instance which we got from this lock class as an argument of this function so this is the lock instance and there are two main method inside this log class which are acquire and release this acquire method you use to acquire the lock this lock can be blocking or nonblocking so this acquire method takes one argument which is true or false by default the value of argument is true which means that this acquire is blocking by default so what does this lock dot acquire will do it locks the axis of the shared variable in our case this is x and at this time only one thread can work on this variable whatever thread have the access to this function at a particular time so until and unless one thread execution is completed on this variable after that this lock is released that means that the other thread can work on this variable using the lock once again so whenever second thread wants to try to access this variable it will just lock the access to this variable first of all and then work on this variable whatever you want to do you want to increment the value or change the value of x and then release the lock and releasing means that we once again want to allow the other thread to work on this shared resource so this mechanism will allow only one thread to access this shared resource at a particular time so the thread synchronization problem will not occur so now let's just run the program once again and let's see what's the result so you can see this problem and this problem is coming most likely because of this problem because we haven't provided args as the tuple so we need to provide this arg as a tuple so always remember whenever you want to pass any argument using this args keyword you need to pass them as tuple so once again i'm going to just try to run this program and you can see the result is whatever we expected so because we are incrementing the value of x hundred thousand times and there are two threads which are working on the same variable so we get the 200 000 result which is expected now let me run this program again and again and you can see every time now we get the expected result which is 200 000 so this is how you can solve the thread synchronization problem using locks so this is how you can use locks to synchronize your threads in python i hope you have enjoyed this video and i will see you in the next video
