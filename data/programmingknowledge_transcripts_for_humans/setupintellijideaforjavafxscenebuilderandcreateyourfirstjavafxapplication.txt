With timestamps:

00:00 - hey guys in this video I'm going to show
00:01 - you how you can create your first javafx
00:04 - application on your IntelliJ IDEA IDE
00:08 - also I'm going to show you how you can
00:10 - use scene builder in your IntelliJ IDEA
00:14 - IDE to develop your javafx applications
00:19 - so let's get started let's start with
00:21 - the IntelliJ IDEA IDE
00:23 - so just open your Intel jid IDE and now
00:27 - we are going to create a new project so
00:29 - click on new project here
00:31 - and then click on javafx under new
00:35 - project
00:36 - and you can give the name to your
00:38 - project I'm going to name my project as
00:40 - my Java FX app for example
00:45 - and then you can choose the language
00:47 - language is Java by default build system
00:51 - is Maven which is ok and test framework
00:54 - is J unit which is also okay for me the
00:58 - project SDK is 17 which is Java jdk 17
01:01 - you can choose the version which you
01:04 - have on your Windows operating system
01:08 - click on next here so here you can
01:10 - choose from all these application I want
01:14 - to just select form FX and then I'm
01:17 - going to click on finish here which is
01:19 - going to create my javafx application
01:22 - so you can see my javafx application has
01:25 - been created
01:27 - here under my project I can see the
01:31 - source folder and then I have this main
01:33 - class under Java folder I have this
01:36 - moduleinfo.java
01:39 - and under resources I have this
01:42 - hello hyphen view dot fxml file so first
01:47 - of all let's build this project and run
01:51 - this and let's see how it looks like by
01:54 - default so I'm going to click on this
01:56 - build icon here
01:57 - we're just going to build my application
02:00 - you can see it's downloading some
02:03 - plugins for the javafx application and
02:06 - once those plugins are downloaded it's
02:09 - going to build that application
02:11 - so now I can see build complete
02:13 - successfully in 28 seconds and now I can
02:16 - run this application by just right
02:19 - clicking here and then I can click on
02:21 - run
02:21 - hello application dot main on this file
02:24 - itself hello application and you can see
02:27 - this kind of window which I have one
02:30 - button when I click on this button it
02:32 - shows welcome to Java FX application
02:35 - right
02:37 - so by default ah this code is already
02:40 - working now in terms of all these
02:44 - Imports you can see all these Imports
02:46 - are added to your hello application dot
02:51 - Java class
02:53 - in the main method what we are doing
02:56 - here is
02:58 - we are simply creating an instance of FX
03:02 - loader class and we are providing the
03:05 - path of our fxml file which is this file
03:09 - which is created by default which is
03:11 - hello hyphen view dot fxml you can see
03:14 - the same name here then we are creating
03:18 - a scene
03:19 - so scene is the main component in your
03:24 - Java FX application where everything
03:26 - loads right and then you create stage
03:29 - for your scene right so you create an
03:33 - instance of this stage which you have
03:36 - already added here and provide the title
03:39 - to your stage then you add the scene to
03:42 - your stage and then show that stage and
03:46 - then second method in your main method
03:49 - is this launch method which is called by
03:53 - default right so you always need to call
03:55 - this launch method now let's go to the
03:58 - hello underscore view dot fxml file
04:01 - and it looks like this right so as we
04:06 - have seen that our javafx application
04:09 - have a button which is here and it has a
04:13 - label which is here right now in order
04:16 - to uh view this file in a scene Builder
04:19 - you can right click here and then
04:22 - click on open in scene Builder once this
04:26 - window opens you can provide the
04:27 - executable file path of your scene
04:30 - Builder but right now I don't have scene
04:33 - Builder installed on my Windows
04:35 - operating system so I need to install it
04:37 - and then give the path to the scene
04:40 - Builder here right so what I'm going to
04:44 - do is I'm going to just go to my browser
04:46 - and search for javafx
04:49 - and the first link which will appear
04:50 - here will be from open uh jfx dot IO so
04:55 - I'm going to click on this open jfx.io
04:58 - website
05:00 - and here
05:01 - when I scroll down a little I should be
05:04 - able to see the scene Builder and there
05:07 - is the download button here so I'm going
05:10 - to click on this download button you can
05:12 - see this website is called Blue on
05:15 - hq.com so I'm going to just click on
05:18 - this download now button and then choose
05:21 - the windows option right so let's choose
05:24 - the windows install option which is this
05:26 - one
05:27 - I'm going to just download that and then
05:29 - you can see in some time this MSI file
05:32 - is going to be downloaded on your
05:35 - Windows operating system right so you
05:37 - can download the scene Builder from glue
05:41 - on hq.com and if you want to download
05:43 - the Java FX runtime you can separately
05:46 - download the javafx SDK also from this
05:50 - open jfx website for now I'm not going
05:53 - to do that I'm only going to download
05:56 - the scene Builder right so scene Builder
05:59 - MSI file is downloaded I'm going to
06:01 - click on this let me minimize this
06:03 - browser let me also minimize this
06:07 - IntelliJ IDEA IDE so when you click on
06:09 - scene build MSI file it's going to look
06:12 - like this I'm going to just click on
06:14 - next here
06:16 - and then I'm going to click on I accept
06:18 - the terms and conditions click on next
06:21 - and then click on next
06:23 - and then click on install
06:26 - so you can see the scene Builder setup
06:28 - has been started I'm going to click on
06:30 - next and then I will agree with license
06:33 - terms and conditions click on next
06:35 - this will be the location where scene
06:37 - Builder will be installed on your
06:40 - Windows operating system generally I
06:42 - would like to change this location
06:44 - because you can see it's hard to
06:46 - remember where we have installed our
06:48 - scene Builder so I can just simply
06:51 - change this location to my C directory
06:56 - itself so I will remove everything
06:59 - apart from C and then scene Builders so
07:03 - inside my C directory I will just create
07:06 - this directory called scene Builder and
07:10 - there it will be installed so I'm going
07:12 - to click on OK and then next and then
07:15 - click on install
07:17 - and it will be installed really fast
07:20 - and then I'm going to click on finish
07:22 - let's go to the location where scene
07:24 - Builder is installed so I'm going to go
07:26 - to my C drive
07:28 - and then you can see this scene Builder
07:30 - folder and here you can see the scene
07:33 - Builder exe file so now I'm going to go
07:36 - to IntelliJ IDEA and here I have already
07:39 - created my project once again I'm going
07:41 - to right click on my fxml file
07:44 - click on open in scene Builder
07:47 - and then I will browse for my uh scene
07:51 - Builder directory which is this one and
07:53 - then select
07:54 - scenebuilder.exe file click on OK
07:57 - and once you click on OK
08:00 - your scene Builder is going to be opened
08:05 - and inside the scene Builder you can see
08:09 - your Hello dot fxml file is opened right
08:13 - so what you see here is the content of
08:17 - your fxml file here you can see there is
08:21 - this label and there is this button in
08:24 - your scene Builder also you will be able
08:26 - to see this button and label is
08:29 - somewhere hidden here you can already
08:31 - see that under this V box we have this
08:34 - label and the button right so
08:38 - you can also increase or decrease the
08:42 - size of this
08:45 - V box here you can add different type of
08:49 - components here right so when I click on
08:53 - this V box I can add
08:57 - different controls I can add
09:01 - different gluons
09:03 - menus and different kind of components
09:07 - from here for now I want to just
09:10 - add few components so let me add a
09:13 - button so I will just drag and drop this
09:16 - button here
09:17 - now in order to use this button I can
09:20 - change the text of this button for
09:22 - example I can change the text to
09:26 - click
09:28 - me for example right and then when I
09:31 - press enter the text will be changed so
09:33 - when you select your button you have
09:36 - three sections here one is the property
09:39 - section other is the layout section
09:41 - where you can decide the layout of your
09:43 - button or any component and third one is
09:46 - the code section where you need to give
09:50 - some ID to your button for example I
09:53 - will give the ID button underscore
09:58 - click me so this will be the ID of this
10:01 - button and here on action
10:05 - you can see on hello button click
10:08 - function where this is coming from
10:11 - so this hello
10:14 - button click function is already defined
10:18 - in your hello controller.java file which
10:22 - is created by default in your IntelliJ
10:26 - IDEA IDE you can see on hello button
10:29 - click and in your scene Builder also on
10:33 - hello button click so whatever function
10:35 - you define here
10:37 - in your hello controller.java file you
10:41 - will be able to call that function in
10:44 - your scene Builder also for any
10:47 - component right so I am going to create
10:49 - a new method and because this is a
10:51 - button I can even copy this code so I
10:55 - can just copy this code and paste it
10:57 - once again but this time I'm going to
11:00 - change the name of this method so I'm
11:03 - going to just say on
11:07 - click me you can provide any name to
11:12 - your method right so it's not necessary
11:14 - that you need to provide the same name
11:16 - you can provide any name to your
11:18 - function right and then
11:21 - what this code is doing is it's just
11:25 - simply uh adding the text to your label
11:30 - my label name is welcome text right so
11:34 - when you go to the scene Builder when
11:37 - you click on label here which is the
11:40 - default label created by
11:42 - the IntelliJ IDEA IDE
11:45 - you can see this ID here FX ID and the
11:49 - ID is welcome text this ID you need to
11:52 - provide always ah
11:55 - in the scene Builder so whatever name
11:58 - you give to your label this is your ID
12:01 - right
12:02 - so
12:04 - welcome text is the ID of the label in
12:07 - the scene Builder and that's why we are
12:10 - always required to add the ID of any
12:14 - component right let me add a new label
12:18 - for example so
12:20 - I will just add this new label and let
12:25 - me add this label just below this click
12:27 - me button
12:28 - then I will provide the label or ID to
12:33 - the new label which I have created I
12:35 - will just name my ID as
12:39 - click me label for example okay
12:43 - so once you have created this new label
12:46 - you can also for example change the
12:49 - property to change the name for example
12:53 - click me
12:56 - label this will be the text which will
12:59 - be displayed on your label right so when
13:02 - you press enter this text is displayed
13:05 - on the label in the code section you
13:07 - provided the ID click me label right
13:10 - this ID you can use in your code and
13:13 - then
13:14 - reference it so for example I can just
13:18 - um
13:19 - use this ID go to my Java file right I
13:25 - can just create a new label so I can
13:29 - just copy the same code so whatever
13:33 - component you create you need to
13:36 - add at the rate fxml on top of that
13:39 - because how your Java code is going to
13:42 - understand that it's a fxml component
13:44 - using this
13:46 - decorate on top of your label and then
13:50 - we are creating a label and then the
13:52 - label name is Click me label because the
13:56 - ID of this label is Click me label right
13:58 - now you can use this label and instead
14:02 - of using the previous level I can use my
14:05 - new label and then
14:07 - change the text here for example
14:10 - hello
14:12 - world right
14:14 - and once this button is clicked it's
14:18 - going to display
14:19 - hello world now we have to add this on
14:23 - click me method in your scene builder
14:27 - for this button so click on this click
14:30 - me button
14:31 - go to the code section and then on
14:34 - action you will see that the new method
14:37 - will appear here right so I will select
14:40 - this new method on click me button click
14:42 - which is this method right
14:45 - once that's done
14:48 - you can just save
14:51 - your fxml file and once that's done you
14:55 - can run your application so let's run
14:57 - this application and let's see if it
14:59 - works or not so I'm going to run this
15:02 - application
15:04 - and hopefully it's going to work let's
15:06 - see so you can see this new button is
15:09 - visible here which we have added using
15:13 - scene Builder this new label is also
15:16 - visible here which we have added and
15:18 - when I click on click me it shows hello
15:21 - world so it changes the text in the
15:24 - label of this
15:27 - frame right
15:29 - so this is how you can use scene Builder
15:33 - with IntelliJ IDEA IDE you can add
15:37 - multiple components here
15:39 - and then use it with the code component
15:44 - so two most important sections here as I
15:47 - mentioned is the ID and the function
15:50 - right so if you want to do something
15:52 - with some element for example button add
15:56 - on action for that and then Define the
16:01 - same function in your
16:04 - Java code and it's going to work right
16:08 - so I hope you have enjoyed this video I
16:10 - will see you in the next video

Cleaned transcript:

hey guys in this video I'm going to show you how you can create your first javafx application on your IntelliJ IDEA IDE also I'm going to show you how you can use scene builder in your IntelliJ IDEA IDE to develop your javafx applications so let's get started let's start with the IntelliJ IDEA IDE so just open your Intel jid IDE and now we are going to create a new project so click on new project here and then click on javafx under new project and you can give the name to your project I'm going to name my project as my Java FX app for example and then you can choose the language language is Java by default build system is Maven which is ok and test framework is J unit which is also okay for me the project SDK is 17 which is Java jdk 17 you can choose the version which you have on your Windows operating system click on next here so here you can choose from all these application I want to just select form FX and then I'm going to click on finish here which is going to create my javafx application so you can see my javafx application has been created here under my project I can see the source folder and then I have this main class under Java folder I have this moduleinfo.java and under resources I have this hello hyphen view dot fxml file so first of all let's build this project and run this and let's see how it looks like by default so I'm going to click on this build icon here we're just going to build my application you can see it's downloading some plugins for the javafx application and once those plugins are downloaded it's going to build that application so now I can see build complete successfully in 28 seconds and now I can run this application by just right clicking here and then I can click on run hello application dot main on this file itself hello application and you can see this kind of window which I have one button when I click on this button it shows welcome to Java FX application right so by default ah this code is already working now in terms of all these Imports you can see all these Imports are added to your hello application dot Java class in the main method what we are doing here is we are simply creating an instance of FX loader class and we are providing the path of our fxml file which is this file which is created by default which is hello hyphen view dot fxml you can see the same name here then we are creating a scene so scene is the main component in your Java FX application where everything loads right and then you create stage for your scene right so you create an instance of this stage which you have already added here and provide the title to your stage then you add the scene to your stage and then show that stage and then second method in your main method is this launch method which is called by default right so you always need to call this launch method now let's go to the hello underscore view dot fxml file and it looks like this right so as we have seen that our javafx application have a button which is here and it has a label which is here right now in order to uh view this file in a scene Builder you can right click here and then click on open in scene Builder once this window opens you can provide the executable file path of your scene Builder but right now I don't have scene Builder installed on my Windows operating system so I need to install it and then give the path to the scene Builder here right so what I'm going to do is I'm going to just go to my browser and search for javafx and the first link which will appear here will be from open uh jfx dot IO so I'm going to click on this open jfx.io website and here when I scroll down a little I should be able to see the scene Builder and there is the download button here so I'm going to click on this download button you can see this website is called Blue on hq.com so I'm going to just click on this download now button and then choose the windows option right so let's choose the windows install option which is this one I'm going to just download that and then you can see in some time this MSI file is going to be downloaded on your Windows operating system right so you can download the scene Builder from glue on hq.com and if you want to download the Java FX runtime you can separately download the javafx SDK also from this open jfx website for now I'm not going to do that I'm only going to download the scene Builder right so scene Builder MSI file is downloaded I'm going to click on this let me minimize this browser let me also minimize this IntelliJ IDEA IDE so when you click on scene build MSI file it's going to look like this I'm going to just click on next here and then I'm going to click on I accept the terms and conditions click on next and then click on next and then click on install so you can see the scene Builder setup has been started I'm going to click on next and then I will agree with license terms and conditions click on next this will be the location where scene Builder will be installed on your Windows operating system generally I would like to change this location because you can see it's hard to remember where we have installed our scene Builder so I can just simply change this location to my C directory itself so I will remove everything apart from C and then scene Builders so inside my C directory I will just create this directory called scene Builder and there it will be installed so I'm going to click on OK and then next and then click on install and it will be installed really fast and then I'm going to click on finish let's go to the location where scene Builder is installed so I'm going to go to my C drive and then you can see this scene Builder folder and here you can see the scene Builder exe file so now I'm going to go to IntelliJ IDEA and here I have already created my project once again I'm going to right click on my fxml file click on open in scene Builder and then I will browse for my uh scene Builder directory which is this one and then select scenebuilder.exe file click on OK and once you click on OK your scene Builder is going to be opened and inside the scene Builder you can see your Hello dot fxml file is opened right so what you see here is the content of your fxml file here you can see there is this label and there is this button in your scene Builder also you will be able to see this button and label is somewhere hidden here you can already see that under this V box we have this label and the button right so you can also increase or decrease the size of this V box here you can add different type of components here right so when I click on this V box I can add different controls I can add different gluons menus and different kind of components from here for now I want to just add few components so let me add a button so I will just drag and drop this button here now in order to use this button I can change the text of this button for example I can change the text to click me for example right and then when I press enter the text will be changed so when you select your button you have three sections here one is the property section other is the layout section where you can decide the layout of your button or any component and third one is the code section where you need to give some ID to your button for example I will give the ID button underscore click me so this will be the ID of this button and here on action you can see on hello button click function where this is coming from so this hello button click function is already defined in your hello controller.java file which is created by default in your IntelliJ IDEA IDE you can see on hello button click and in your scene Builder also on hello button click so whatever function you define here in your hello controller.java file you will be able to call that function in your scene Builder also for any component right so I am going to create a new method and because this is a button I can even copy this code so I can just copy this code and paste it once again but this time I'm going to change the name of this method so I'm going to just say on click me you can provide any name to your method right so it's not necessary that you need to provide the same name you can provide any name to your function right and then what this code is doing is it's just simply uh adding the text to your label my label name is welcome text right so when you go to the scene Builder when you click on label here which is the default label created by the IntelliJ IDEA IDE you can see this ID here FX ID and the ID is welcome text this ID you need to provide always ah in the scene Builder so whatever name you give to your label this is your ID right so welcome text is the ID of the label in the scene Builder and that's why we are always required to add the ID of any component right let me add a new label for example so I will just add this new label and let me add this label just below this click me button then I will provide the label or ID to the new label which I have created I will just name my ID as click me label for example okay so once you have created this new label you can also for example change the property to change the name for example click me label this will be the text which will be displayed on your label right so when you press enter this text is displayed on the label in the code section you provided the ID click me label right this ID you can use in your code and then reference it so for example I can just um use this ID go to my Java file right I can just create a new label so I can just copy the same code so whatever component you create you need to add at the rate fxml on top of that because how your Java code is going to understand that it's a fxml component using this decorate on top of your label and then we are creating a label and then the label name is Click me label because the ID of this label is Click me label right now you can use this label and instead of using the previous level I can use my new label and then change the text here for example hello world right and once this button is clicked it's going to display hello world now we have to add this on click me method in your scene builder for this button so click on this click me button go to the code section and then on action you will see that the new method will appear here right so I will select this new method on click me button click which is this method right once that's done you can just save your fxml file and once that's done you can run your application so let's run this application and let's see if it works or not so I'm going to run this application and hopefully it's going to work let's see so you can see this new button is visible here which we have added using scene Builder this new label is also visible here which we have added and when I click on click me it shows hello world so it changes the text in the label of this frame right so this is how you can use scene Builder with IntelliJ IDEA IDE you can add multiple components here and then use it with the code component so two most important sections here as I mentioned is the ID and the function right so if you want to do something with some element for example button add on action for that and then Define the same function in your Java code and it's going to work right so I hope you have enjoyed this video I will see you in the next video
