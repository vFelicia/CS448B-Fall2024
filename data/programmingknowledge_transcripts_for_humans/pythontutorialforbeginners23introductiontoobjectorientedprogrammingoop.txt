With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - Python tutorial for beginners now before
00:04 - starting our object oriented programming
00:07 - journey in Python let's discuss about
00:09 - what is the difference between the
00:12 - procedural programming and the
00:15 - object-oriented programming so you will
00:18 - have the better idea why we use
00:21 - object-oriented programming now
00:23 - traditional programming languages such
00:25 - as C or Pascal were called procedural
00:30 - programming languages or structural
00:32 - programming languages where the basic
00:35 - unit was functions now programming in
00:39 - these type of procedural languages
00:42 - involves choosing a data structure and
00:45 - then designing the algorithm and then
00:50 - translating that algorithm into a code
00:53 - so if this sounds little bit confusing
00:55 - let me try to explain it with an example
00:59 - so let's say you have been given a task
01:01 - to create a program for a passenger who
01:06 - wants to travel from one place to the
01:09 - another place using a cab service so if
01:13 - we think from the point of view of
01:15 - procedural programming what we do in the
01:18 - procedural programming is we create some
01:22 - global data structure which holds the
01:26 - data so here for example we create some
01:29 - kind of data structure which can hold
01:32 - the data for example in case of a cab
01:35 - service which cab service is it or which
01:39 - type of cab is it and at what location
01:42 - this cab is standing all these kind of
01:45 - data we store in a desta structure in
01:48 - our global environment
01:51 - now after storing the data we design an
01:54 - algorithm so let's see what kind of
01:57 - algorithm we can develop in the
02:01 - procedural programming language for our
02:03 - cab booking service so this is a
02:06 - pseudocode which i have written so first
02:08 - of all the passenger will open the app
02:12 - from which he can
02:13 - book a cab and then he will book the cab
02:17 - and once the cab is booked he will wait
02:20 - for the cab and then once cab arrives he
02:24 - will sit in the cab and then he will
02:26 - reach to his or her destination and at
02:30 - the end he will pay the fare of the cab
02:33 - and this is the pseudocode of that
02:35 - algorithm and then we will translate
02:38 - this algorithm into actual code in
02:41 - procedural programming language now in
02:44 - these type of procedural programming
02:46 - languages we construct rate on creating
02:49 - the functions and the major drawback of
02:53 - using these functions is that data and
02:57 - operations on the data are separated
03:00 - that means we need a methodology to send
03:04 - this data to these functions so here we
03:09 - need to send this data which we have
03:12 - saved globally into these functions and
03:15 - these functions take this data either as
03:18 - argument or as a global variable and
03:21 - then perform some actions on this data
03:23 - and give you some result now these kind
03:27 - of functions are passive what do I mean
03:30 - by passive here that is these kind of
03:33 - function cannot hold any information
03:36 - inside them so once you give the data
03:39 - they are able to give you the result
03:41 - back after performing some operations
03:44 - but they cannot save or hold the state
03:49 - or the data so that if you want to use
03:52 - that data in some other place in your
03:55 - code then it will be very difficult
03:57 - using these kind of functions which you
04:00 - use in procedural programming now let's
04:03 - look at the object-oriented approach of
04:07 - doing things so in object-oriented
04:10 - programming languages like C++ or Java
04:13 - or Python the basic unit is class now if
04:18 - we take the same example of a passenger
04:21 - who wants to travel from one place to
04:25 - another using a cab service you
04:27 - using object-oriented programming
04:29 - thinking which depends upon the creation
04:32 - of object we can create different kind
04:36 - of object for example for a cab we can
04:40 - create a class called cab and then we
04:43 - can create a class for cab driver and
04:46 - the third class we can create for a
04:49 - passenger okay so a class you can create
04:52 - for any real-life object it can be a car
04:55 - it can be a motorbike it can be a book
04:58 - or employee or a person so
05:01 - object-oriented programming allows us to
05:03 - create object so first of all what is a
05:06 - class so a class refers to a blueprint
05:09 - in which we can have data and methods
05:14 - okay so for example for our cab class
05:18 - what attributes this cab class can have
05:22 - for example a cab service which cab
05:25 - service we want to take what is the make
05:28 - of the cab is it a Toyota or a BMW or a
05:32 - fox wagon cab at which location this cab
05:36 - is right now what is the number plate of
05:39 - that cab so the passenger can recognize
05:42 - this cab so all these things which I
05:46 - have written here are called data
05:49 - because they can hold some kind of data
05:53 - number plate has number plate data
05:55 - location have geolocation data may have
05:59 - the make data cap service can have data
06:03 - like uber or any other cab service and
06:06 - the other thing which at last can have
06:08 - are called method so earlier we have
06:12 - seen that we can create functions and
06:14 - when these functions you use inside a
06:17 - class they are called
06:19 - method ok so functions inside a class
06:22 - are called method now the data inside
06:26 - this object or class is called
06:29 - attributes or the member variables which
06:33 - can hold some data and using this class
06:37 - we can create object of the cab
06:41 - which means we can create different
06:44 - object using a same class and how to
06:47 - create object using classes we will see
06:50 - in the next video in the real-life
06:53 - example so don't worry if you don't
06:55 - understand how these things works I will
06:57 - give you a real-life example so you will
07:00 - be able to understand in a better way
07:02 - now what is an object an object is a
07:06 - software unit that combines data and
07:09 - methods okay so we have this data here
07:13 - and then we have the methods inside the
07:16 - class and object is able to combine both
07:20 - of them which is data with the methods
07:23 - now these object for example a cab
07:26 - object and the passenger object can
07:29 - exchange the data between them also so
07:32 - data is interchangeable between for
07:37 - example the passenger object and a cab
07:40 - object so let's rewind once again what
07:43 - we have learned about object-oriented
07:46 - programming so the basic unit in
07:49 - object-oriented programming is a class
07:52 - and at last refers to a blueprint which
07:56 - can have the data and methods now using
08:00 - a class we can create objects and what
08:04 - is the object object is an instance of a
08:08 - class and each object can have its own
08:11 - data and method and an object is able to
08:15 - store the state of some kind so at which
08:19 - location this cab is right now so this
08:23 - is a state and an object is able to
08:26 - store at that state now in procedural
08:28 - programming if you remember there is no
08:31 - relation between the data and the method
08:34 - right we need to provide the data to the
08:37 - method which are separate entities in
08:40 - the procedural programming language now
08:42 - these data members are called
08:45 - attributes or member variables and these
08:48 - functions which you define inside a
08:51 - class are called methods and what are
08:54 - some of the key differences between
08:55 - procedural programming language and
08:59 - object-oriented programming language the
09:01 - first is the unit in procedural
09:03 - programming language is function and on
09:06 - the other hand in object-oriented
09:08 - programming the unit is class the second
09:11 - is the procedural programming
09:12 - concentrate on creating functions while
09:16 - object-oriented programming starts from
09:19 - isolating classes and then they can have
09:23 - data and methods inside it in procedural
09:28 - programming language the data and the
09:30 - functions are separate and in
09:32 - object-oriented programming language
09:34 - data and methods are not separate they
09:37 - are on the part of a single object of
09:41 - Atlas now if all this seems to be little
09:44 - confusing to you don't worry you are not
09:48 - alone and I will try to solve this
09:51 - confusion in the next video in which I
09:54 - will tell you how to create the classes
09:57 - and how to use classes in Python so stay
10:01 - tuned and please keep watching these
10:04 - videos I will see you in the next video

Cleaned transcript:

hey guys welcome to the next video on Python tutorial for beginners now before starting our object oriented programming journey in Python let's discuss about what is the difference between the procedural programming and the objectoriented programming so you will have the better idea why we use objectoriented programming now traditional programming languages such as C or Pascal were called procedural programming languages or structural programming languages where the basic unit was functions now programming in these type of procedural languages involves choosing a data structure and then designing the algorithm and then translating that algorithm into a code so if this sounds little bit confusing let me try to explain it with an example so let's say you have been given a task to create a program for a passenger who wants to travel from one place to the another place using a cab service so if we think from the point of view of procedural programming what we do in the procedural programming is we create some global data structure which holds the data so here for example we create some kind of data structure which can hold the data for example in case of a cab service which cab service is it or which type of cab is it and at what location this cab is standing all these kind of data we store in a desta structure in our global environment now after storing the data we design an algorithm so let's see what kind of algorithm we can develop in the procedural programming language for our cab booking service so this is a pseudocode which i have written so first of all the passenger will open the app from which he can book a cab and then he will book the cab and once the cab is booked he will wait for the cab and then once cab arrives he will sit in the cab and then he will reach to his or her destination and at the end he will pay the fare of the cab and this is the pseudocode of that algorithm and then we will translate this algorithm into actual code in procedural programming language now in these type of procedural programming languages we construct rate on creating the functions and the major drawback of using these functions is that data and operations on the data are separated that means we need a methodology to send this data to these functions so here we need to send this data which we have saved globally into these functions and these functions take this data either as argument or as a global variable and then perform some actions on this data and give you some result now these kind of functions are passive what do I mean by passive here that is these kind of function cannot hold any information inside them so once you give the data they are able to give you the result back after performing some operations but they cannot save or hold the state or the data so that if you want to use that data in some other place in your code then it will be very difficult using these kind of functions which you use in procedural programming now let's look at the objectoriented approach of doing things so in objectoriented programming languages like C++ or Java or Python the basic unit is class now if we take the same example of a passenger who wants to travel from one place to another using a cab service you using objectoriented programming thinking which depends upon the creation of object we can create different kind of object for example for a cab we can create a class called cab and then we can create a class for cab driver and the third class we can create for a passenger okay so a class you can create for any reallife object it can be a car it can be a motorbike it can be a book or employee or a person so objectoriented programming allows us to create object so first of all what is a class so a class refers to a blueprint in which we can have data and methods okay so for example for our cab class what attributes this cab class can have for example a cab service which cab service we want to take what is the make of the cab is it a Toyota or a BMW or a fox wagon cab at which location this cab is right now what is the number plate of that cab so the passenger can recognize this cab so all these things which I have written here are called data because they can hold some kind of data number plate has number plate data location have geolocation data may have the make data cap service can have data like uber or any other cab service and the other thing which at last can have are called method so earlier we have seen that we can create functions and when these functions you use inside a class they are called method ok so functions inside a class are called method now the data inside this object or class is called attributes or the member variables which can hold some data and using this class we can create object of the cab which means we can create different object using a same class and how to create object using classes we will see in the next video in the reallife example so don't worry if you don't understand how these things works I will give you a reallife example so you will be able to understand in a better way now what is an object an object is a software unit that combines data and methods okay so we have this data here and then we have the methods inside the class and object is able to combine both of them which is data with the methods now these object for example a cab object and the passenger object can exchange the data between them also so data is interchangeable between for example the passenger object and a cab object so let's rewind once again what we have learned about objectoriented programming so the basic unit in objectoriented programming is a class and at last refers to a blueprint which can have the data and methods now using a class we can create objects and what is the object object is an instance of a class and each object can have its own data and method and an object is able to store the state of some kind so at which location this cab is right now so this is a state and an object is able to store at that state now in procedural programming if you remember there is no relation between the data and the method right we need to provide the data to the method which are separate entities in the procedural programming language now these data members are called attributes or member variables and these functions which you define inside a class are called methods and what are some of the key differences between procedural programming language and objectoriented programming language the first is the unit in procedural programming language is function and on the other hand in objectoriented programming the unit is class the second is the procedural programming concentrate on creating functions while objectoriented programming starts from isolating classes and then they can have data and methods inside it in procedural programming language the data and the functions are separate and in objectoriented programming language data and methods are not separate they are on the part of a single object of Atlas now if all this seems to be little confusing to you don't worry you are not alone and I will try to solve this confusion in the next video in which I will tell you how to create the classes and how to use classes in Python so stay tuned and please keep watching these videos I will see you in the next video
