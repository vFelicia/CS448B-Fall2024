With timestamps:

00:00 - so first of all what is docker
00:03 - so docker is an open source project that
00:07 - automates the deployment of applications
00:10 - inside software containers by providing
00:13 - an additional layer of abstraction and
00:15 - automation
00:17 - of operating system level virtualization
00:20 - on linux
00:22 - so that is the definition which is
00:24 - available on wikipedia
00:26 - but really what is docker so docker
00:30 - provides a uniformed wrapper around a
00:34 - software package and this wrapper is
00:37 - called docker container which you can
00:39 - ship or build and inside these
00:42 - containers you can run any app anywhere
00:46 - now docker containers are similar to
00:48 - shipping containers
00:50 - now as you all know
00:52 - in the shipping container the container
00:55 - size is always same regardless of the
01:00 - content inside the container so these
01:04 - container can fit on all trucks or ships
01:08 - or trains
01:10 - regardless of the content inside the
01:13 - container
01:14 - in a same way docker packages a software
01:18 - into standardized unit for development
01:22 - shipment and
01:24 - deployment so let me give you a real
01:28 - world example
01:29 - so let's say i developed a node.js
01:32 - application which depends upon some
01:34 - version of node.js and it uses
01:39 - some database and it's dependent on some
01:43 - shared library let's say
01:45 - and i want to give this software to the
01:49 - devops guy or let's say to my colleague
01:52 - to run it on his computer or on the qa
01:57 - system or on the cloud by devops or in
02:01 - the production system so i don't really
02:03 - care where it runs i just care that it
02:07 - should run when somebody tries to run my
02:10 - software
02:12 - now if docker is not present or any
02:15 - containerized system is not present
02:18 - the normal procedure will be that i give
02:22 - my software
02:23 - to my colleague or the devops guys and
02:27 - he has to install all the dependencies
02:30 - and for example node.js version and
02:34 - the
02:35 - database system exactly like a system on
02:38 - which i have tested
02:40 - my software now if you will just use
02:43 - docker to containerize your system you
02:46 - just need to package your system into a
02:50 - docker container and you can just
02:53 - give this docker container to your
02:56 - colleague or the devops guys and he will
03:00 - just run
03:01 - this docker container on the cloud or a
03:05 - qa machine or any other production
03:09 - system wherever he wants to run it and
03:12 - he can just run
03:13 - your software without worrying about all
03:16 - the
03:17 - dependencies or the environment setup
03:21 - which your software depends upon so
03:23 - nowadays docker is becoming more or less
03:27 - a standard for the containerizing
03:29 - systems and you can find the docker
03:31 - containers everywhere on linux operating
03:35 - system or windows operating system
03:38 - or in the data center cloud serverless
03:41 - application and so on now let's compare
03:44 - docker container versus virtual machines
03:48 - so containers and virtual machine have
03:51 - similar resource isolation and
03:54 - allocation benefits but docker
03:56 - containers and virtual machine functions
03:59 - differently because containers
04:02 - virtualize the operating system instead
04:04 - of hardware and containers are more
04:07 - portable and efficient so when you talk
04:10 - about virtual machines you can see this
04:13 - diagram on the right hand side so
04:15 - virtual machines or vms
04:17 - are an abstraction of physical hardware
04:21 - turning one server into many servers and
04:25 - it is made possible by the hypervisor
04:28 - which allows virtual machines to run on
04:32 - a single machine
04:34 - so each virtual machine or vm includes
04:37 - full copy of operating system so let's
04:40 - say this is your server and on this
04:43 - server you have
04:45 - your hypervisor and on top of your
04:48 - hypervisor you can run different virtual
04:52 - machines so this is virtual machine one
04:54 - virtual machine 2 virtual machine 3
04:58 - which have
04:59 - this operating system 1 operating system
05:03 - 2 and operating system 3 or you can have
05:06 - the similar operating system in all the
05:09 - three virtual machine let's say now the
05:12 - important thing to note here is each
05:15 - virtual machine includes full copy of
05:18 - operating system
05:19 - the application necessary binaries and
05:22 - the libraries which takes up to tens of
05:26 - gb's
05:27 - of memory and that is the reason that
05:31 - virtual machines can be slower
05:34 - now on the other hand in the container
05:36 - and you can see on the left hand side
05:40 - this diagram so containers are an
05:43 - abstraction on the app layer that
05:47 - packages the code and dependencies
05:49 - together
05:51 - so you have your server and then you
05:54 - have your host operating system
05:57 - and then on top of your host operating
05:59 - system you can run your docker engine
06:04 - and the containers are the abstraction
06:07 - at the app layer that packages the code
06:09 - and dependencies together
06:11 - so multiple containers can run on the
06:14 - same machine
06:16 - and
06:17 - share the same
06:19 - os kernel with other containers but each
06:23 - container runs as isolated process
06:27 - in the user space as a result container
06:30 - takes less space than virtual machine
06:33 - and usually container images typically
06:37 - takes tens of
06:38 - megabytes in size in comparison to the
06:41 - virtual machine which which can take up
06:43 - to let's say several gbs of memory also
06:48 - containers can handle more application
06:51 - and require fewer virtual machines and
06:54 - operating system now when we talk about
06:57 - docker containers versus virtual
06:59 - machines the idea is to use containers
07:02 - and virtual machines together so the
07:05 - containers and the virtual machines can
07:07 - be used together which provides a great
07:11 - deal of flexibility in deploying and
07:14 - managing your apps now let's talk about
07:17 - the docker architecture
07:19 - so whenever you will install docker
07:22 - the docker engine will be installed on
07:25 - your system so docker engine will
07:28 - contain docker cli
07:31 - docker daemon and the docker registry
07:35 - now there is something called docker hub
07:38 - which is a cloud based service where you
07:41 - can share your applications automate the
07:44 - workflow and assemble apps for the
07:48 - components now when you talk about
07:50 - docker
07:51 - two things are really important and
07:54 - these are docker images and docker
07:57 - containers
07:59 - so first of all what is docker container
08:02 - so a container is a standard unit of
08:05 - software that packages up your code and
08:08 - it's all dependencies
08:10 - so the application runs quickly and
08:13 - reliably from one environment to the
08:17 - other environment now when you create
08:19 - your docker container which is
08:21 - essentially a unit of
08:23 - your software it can run everywhere
08:27 - regardless of the kernel version
08:29 - regardless of the host distro the only
08:33 - condition is
08:34 - that the container and the host
08:37 - architecture must match and you can run
08:40 - anything inside your containerized
08:42 - solution so if it can run on your host
08:46 - then it can run on your container that
08:49 - is if it runs on a linux kernel it can
08:53 - run now let's talk about docker
08:55 - container images
08:57 - so a docker container image is a
09:00 - lightweight standalone executable
09:03 - package of software that includes
09:06 - everything needed to run the application
09:09 - that is code your runtime your system
09:13 - tools and the system libraries and the
09:16 - settings
09:17 - so the container images becomes
09:20 - container at run time and in case of
09:23 - docker containers images becomes
09:26 - containers when they run on docker
09:29 - engine so images
09:32 - turns into container when these images
09:36 - runs on your docker engine now it's
09:39 - important to note that
09:41 - your docker image is not
09:44 - a virtual hard disk or vhd it's not a
09:47 - file system
09:49 - it uses union file system and it's only
09:54 - a read only layer also the docker images
09:57 - doesn't have any state so when your
10:00 - docker images runs as docker container
10:03 - inside the docker engine
10:05 - and when you stop
10:07 - these running containers
10:09 - these images will not have or will not
10:12 - save any state so they are stateless so
10:16 - basically an image is a tar file which
10:20 - has a hierarchy and an arbitrary depth
10:24 - and that's how it fits into your docker
10:27 - registry for example docker hub or any
10:31 - private docker registry so this was a
10:34 - brief introduction about docker in this
10:36 - video we are going to see how we can
10:38 - download and install docker on our
10:40 - windows 10 operating system
10:43 - so let's get started first of all open
10:46 - your favorite browser and search for
10:48 - docker
10:49 - but before installing docker desktop
10:52 - application on our windows operating
10:54 - system
10:55 - let's see what are the system
10:56 - requirements for installing this
10:59 - application
11:00 - so before going to the docker.com
11:03 - website i'm going to search on my
11:06 - browser install docker windows which
11:09 - will open this link from
11:13 - dot docs.docker.com forward slash docker
11:15 - for windows
11:16 - and this link i'm going to put in the
11:19 - description of the video also so you can
11:21 - also
11:22 - see all the description here
11:25 - and
11:26 - from here you can click this button
11:28 - which is going to redirect you
11:31 - to the downloads page but before that
11:34 - let's see what are the system
11:35 - requirements for downloading this
11:38 - application so as you can see here for
11:41 - installing docker on your windows
11:42 - operating system you need to have at
11:45 - least windows 10 64-bit pro enterprise
11:49 - or education version
11:51 - and
11:52 - hyper-v and containers windows feature
11:55 - must be enabled and some other
11:58 - requirements are 64-bit processor with
12:01 - second level address
12:03 - translation 4gb system ram and bios
12:07 - level hardware virtualization system
12:09 - must be enabled
12:10 - in bios settings so if you don't have a
12:14 - windows 10 64-bit pro version or
12:16 - enterprise or education version
12:19 - then also you can install docker on your
12:22 - windows operating system
12:24 - but the procedure will be little
12:26 - different
12:27 - so for that you can go to suspended
12:31 - products and tools
12:33 - and then go to
12:35 - this
12:36 - tool which is called docker toolbox
12:38 - which is now a legacy for
12:41 - legacy operating systems so here you can
12:44 - just click on the install toolbox on
12:47 - windows button i'm going to just open
12:49 - this link in the next tab and here
12:53 - you can follow the procedure of
12:55 - installing docker toolbox on your
12:59 - other windows operating system for
13:02 - example if you have windows 10 home
13:04 - version or if you have windows 8 or
13:08 - windows 7 then you can install docker
13:11 - toolbox so first of all how to check
13:14 - which windows 10 version you have if you
13:18 - have windows 10 operating system running
13:21 - so for that what you can do is you can
13:24 - just right click on this windows button
13:26 - and then click on run
13:29 - and then just type win ver w i n v e r
13:34 - and then click ok which is going to open
13:38 - this kind of window and here you can
13:40 - find
13:41 - the windows
13:43 - 10 version you are running so as you can
13:46 - see here i'm running windows 10 pro
13:48 - version
13:50 - also the second requirement was let's
13:53 - see the second requirement which is
13:55 - hyper-v and containers windows features
13:58 - must be enabled so how to verify that so
14:03 - to check that the simple procedure is
14:05 - just right click on your toolbar windows
14:09 - toolbar and then
14:11 - click on task manager
14:14 - so once this task manager opens you just
14:17 - need to go to the performance section
14:20 - and then you need to verify
14:23 - this section which is called
14:25 - virtualization
14:26 - it needs to be enabled by default
14:30 - it is enabled on your windows 10
14:33 - operating system so you don't need to do
14:35 - any extra thing unless you have
14:38 - manually disabled this feature so now
14:42 - i'm going to click this button which
14:43 - says download from docker hub
14:46 - and here you will see
14:49 - this web page first so first of all you
14:51 - need to create a docker id if you
14:55 - haven't already have a docker id you can
14:58 - just click on this sign up link here
15:01 - which will open this kind of web page
15:03 - and here you can create your docker
15:06 - account which requires a docker id email
15:10 - address and password and you need to
15:12 - just agree these terms and conditions so
15:15 - once you have your docker id which i
15:18 - already have i'm going to sign into
15:21 - my docker account which is going to
15:23 - redirect me to this page which is the
15:28 - downloads page and from here i can just
15:30 - download this docker desktop application
15:33 - for windows also if you have searched
15:37 - for
15:38 - docker and if you have opened this main
15:40 - website from docker which is docker.com
15:44 - you can just click on get started
15:48 - and then click on download desktop for
15:50 - mac and windows which will also redirect
15:54 - you to the same page and you can see
15:57 - welcome my docker id is shown here
16:01 - so in order to download this desktop
16:03 - application you need to have your docker
16:07 - id you and you need to log in to the
16:10 - docker website in order to download this
16:13 - executable file so let's just
16:15 - click on this button which is going to
16:17 - start the
16:19 - download of this executable file i have
16:22 - already downloaded this executable file
16:25 - so i'm going to cancel this installation
16:27 - and you can see on my downloads folder i
16:31 - already have this docker desktop
16:33 - installer which is around
16:35 - megabytes so i'm going to just double
16:37 - click
16:38 - on this
16:39 - executable file and i'm going to just
16:43 - start the installation
16:44 - so i'm going to minimize this browser
16:49 - and you can see the installation has
16:51 - been started so the first window here is
16:54 - the configuration so i'm going to just
16:56 - leave everything as default
16:58 - and then click ok which is going to
17:02 - unpack all the files
17:04 - the installation procedure is
17:06 - straightforward i guess you just need to
17:08 - click some buttons
17:10 - and docker will be installed out of the
17:12 - box and now you can see
17:14 - after few seconds i can see this docker
17:17 - desktop icon on my desktop
17:21 - and you can see this message which says
17:23 - installation succeeded so i'm going to
17:26 - just uh
17:27 - click close and log out button
17:30 - which will log me out of windows 10
17:33 - operating system so i need to log in
17:35 - once again
17:37 - so now i have logged in to my windows 10
17:40 - operating system once again
17:42 - and immediately after logging into my
17:45 - windows 10 operating system i can see
17:48 - this window which says hyper-v and
17:50 - container features are not enabled do
17:53 - you want to enable them for docker to be
17:56 - able to work properly i will say ok
18:00 - which is going to enable all these
18:02 - features i thought they are already
18:05 - enabled somehow but
18:07 - according to docker
18:09 - it wants to enable them once again let's
18:12 - say and now i will click on this docker
18:15 - desktop icon from here which is going to
18:18 - start the docker desktop application and
18:21 - i can see this message which is hyper-v
18:24 - service vmm is not available
18:26 - if you have enabled hyper-v
18:30 - just restart your computer now
18:33 - so i'm going to restart my computer and
18:36 - i will then try to just start docker
18:39 - application once again so now i'm going
18:41 - to click on this docker icon once again
18:45 - and you will see on your tool bar here
18:48 - you can see
18:49 - docker is starting so it will take some
18:52 - time to start docker
18:57 - and i can see this message which says
18:59 - docker desktop is running
19:01 - so i can open powershell and start
19:05 - hacking with docker
19:07 - or docker compose also when you click on
19:10 - this docker icon here you can see bunch
19:12 - of options here
19:14 - for the documentation docker hub
19:17 - switch to windows containers and all
19:20 - other
19:21 - settings here
19:23 - so one thing i will recommend here
19:26 - is to sign in
19:28 - with your docker credentials which you
19:31 - have already created and i'm going to
19:33 - sign in with my docker credentials
19:36 - and after signing in
19:38 - you will be able to see your docker id
19:42 - and the sign out option
19:44 - so let's get started with docker so
19:47 - first of all you can start the command
19:49 - prompt i'm going to just type cmd which
19:52 - is going to
19:53 - show me this option which is
19:55 - command prompt
19:57 - and here you can just type
20:00 - docker
20:02 - hyphen version or hyphen v will also
20:05 - work
20:06 - and you can see the version which we
20:08 - have installed now let's also check if
20:11 - docker is working with the docker hub
20:14 - perfectly fine or not to test this you
20:18 - can just run
20:19 - docker
20:20 - run
20:21 - hello
20:23 - hyphen world okay so just run this
20:26 - command this is the most popular command
20:29 - to test
20:30 - whether docker is
20:32 - running or not or it's able to fetch all
20:35 - the images from docker hub or not so i'm
20:38 - going to just run this command and when
20:41 - i run this command you can see this kind
20:43 - of output
20:44 - so you can see on the first line it says
20:46 - unable to find image
20:48 - hello world latest locally so it didn't
20:51 - find this image locally so it has pulled
20:55 - this image from the docker hub
20:58 - repository so you can see in the next
21:01 - line latest pulling from library hello
21:04 - world and once the pull is complete and
21:09 - you can see the status downloaded the
21:11 - new image hello world and then the
21:14 - latest version of hello world and then
21:17 - it says hello from docker that means
21:20 - everything is working fine with your
21:22 - docker and it's able to run your docker
21:25 - images and this is the first docker
21:28 - image we have run which ran successfully
21:32 - few more commands i can show you here
21:35 - for example you can also
21:38 - say docker
21:40 - images
21:42 - and then press enter and you will see
21:45 - the list of all the images you have on
21:48 - your system so we have just downloaded
21:51 - this docker image which is hello world
21:54 - image so this is how you can download
21:56 - and install docker
21:58 - on your windows 10 operating system
22:01 - in this video we are going to see how we
22:03 - can download and install docker
22:05 - on our mac operating system
22:08 - so let's get started so first of all
22:10 - open your favorite browser and search
22:12 - for docker and the first link which will
22:14 - appear here will be from docker.com so
22:16 - we are going to click into
22:18 - this link
22:19 - and then straight away you can see this
22:22 - button gets started or this button gets
22:25 - started so you can
22:26 - click on one of these buttons
22:29 - and then you will be able to see
22:32 - this button which says download docker
22:35 - for mac and windows so i'm going to just
22:38 - click on this button which will be
22:40 - redirect me to the docker hub website
22:44 - now in order to download the docker
22:46 - binary you need to have a docker account
22:50 - so if you haven't created a docker
22:53 - account you can just click on this sign
22:56 - up link here
22:57 - and then just fill your basic details
23:00 - like docker id email and password and
23:04 - create your docker id and docker account
23:07 - and once you have your docker id and
23:09 - docker account
23:11 - you can just log in with your docker
23:14 - account here
23:15 - on this website so i'm going to just
23:18 - give
23:18 - my docker credentials first is the
23:21 - docker id and then second is
23:24 - the password
23:27 - and now i'm going to just sign into this
23:30 - docker hub website which will allow me
23:32 - to download this
23:34 - docker desktop for mac so i'm going to
23:37 - just click on this download
23:39 - link here which will start the
23:42 - download of the docker now once this
23:45 - docker dot dmg file is downloaded i'm
23:48 - going to just click on this
23:50 - docker.dmg file and i'm going to
23:53 - minimize the browser
23:55 - and you can see this dmg file is opening
23:58 - first of all and once this window opens
24:02 - you just need to drag this docker icon
24:04 - to your applications
24:06 - so it's that simple to install a docker
24:09 - on your mac operating system so once
24:12 - docker is copied into your applications
24:15 - folder you can close this window and
24:19 - open docker from here
24:21 - or you can just go to the launchpad
24:25 - and you will be able to see this docker
24:27 - icon here so you can just click on the
24:29 - docker icon which is going to start the
24:32 - docker on your mac operating system so
24:35 - just
24:36 - wait for few seconds and now you will
24:38 - see this message which says docker is
24:41 - an app downloaded from internet are you
24:44 - sure you want to open it so i'm going to
24:46 - just say open and in the next step i can
24:49 - see this window which asks me to give
24:52 - some privileged access so i'm going to
24:55 - just click on ok and then i'm going to
24:58 - give my max password
25:02 - and now you can see docker desktop is
25:05 - starting on my mac operating system
25:08 - and your you can see this docker icon
25:11 - on top of your mac desktop
25:15 - so i will wait for this docker desktop
25:18 - to start
25:20 - and once this docker's desktop starts we
25:23 - will start testing if everything is
25:26 - working fine
25:27 - in the meantime i can also give my
25:30 - docker id
25:31 - and password
25:33 - to login to
25:35 - the docker
25:37 - using this docker desktop application
25:40 - so let me give my
25:42 - docker id
25:44 - and the password and then i'm going to
25:46 - just say login and you can see i am
25:48 - logged in with my docker id
25:51 - into this docker desktop
25:54 - application and now i can see this
25:56 - message which says docker desktop is now
25:58 - up and running
26:00 - so what we are going to do next is we
26:02 - are going to just uh open the terminal
26:05 - so i'm going to just
26:07 - search for
26:09 - terminal and then i'm going to open the
26:11 - terminal and once my terminal is open i
26:15 - can just
26:16 - check the docker version by just giving
26:18 - this
26:19 - docker version
26:22 - command and then press enter and i can
26:24 - see this long message and here the
26:27 - version
26:29 - information is displayed and then the
26:31 - api version is displayed and all the
26:34 - other information about my docker is
26:38 - displayed here
26:40 - also
26:41 - when i
26:42 - give docker info command so let me just
26:45 - clear this terminal once again
26:47 - and then i'm going to just give
26:50 - docker
26:51 - info command
26:52 - and it's going to give me bunch of
26:54 - information about docker and docker
26:56 - engine and the status of
26:59 - docker engine let me clear
27:02 - this terminal once again
27:04 - and now i'm going to test a docker
27:07 - by giving this command so i'm going to
27:09 - just say
27:11 - docker
27:12 - run
27:14 - hello world and then press enter
27:17 - which is going to fetch this hello world
27:21 - image from docker hub if it's not
27:24 - already present on my mac locally
27:28 - and once this image is pulled it's going
27:31 - to just display
27:33 - hello from docker that means everything
27:36 - is working fine
27:37 - and you can start working with docker
27:40 - now one more command you can use here is
27:43 - this command which is docker
27:46 - images which is going to
27:48 - show you the list of images
27:50 - which
27:51 - are present on your mac operating system
27:55 - and you can see i only have one image
27:58 - right now which is hello world
28:00 - which i have fetched just a few seconds
28:04 - ago and you can see this docker icon
28:07 - here
28:08 - so when you click on this docker icon
28:10 - you can
28:11 - do lots of thing for example if you want
28:13 - to restart your
28:15 - docker then you can just click on this
28:18 - if you want to quick quit
28:20 - the docker desktop then you can click
28:23 - here and there are lots of settings and
28:26 - updates and preferences settings you can
28:29 - do from this
28:31 - docker
28:32 - desktop icon and there are lots of other
28:35 - settings you can do from
28:38 - this
28:39 - window or this menu from here
28:42 - so this is how you can download and
28:44 - install docker
28:45 - on your mac operating system in this
28:48 - video we are going to see how we can
28:50 - download and install docker on our
28:52 - ubuntu operating system
28:55 - so let's get started so what i'm going
28:57 - to do is i'm going to open my
29:00 - favorite browser
29:02 - and then i'm going to search here docker
29:05 - install ubuntu
29:07 - and the first link which will appear
29:08 - here will be from docs docs.docker.com
29:13 - i'm going to put the link in the
29:15 - description also so i'm going to click
29:18 - this link which is the official
29:20 - documentation
29:21 - of installing docker engine community
29:25 - edition on your ubuntu operating system
29:29 - so here you can see the prerequisite of
29:32 - installing docker on your ubuntu
29:35 - operating system so you can see the os
29:37 - requirements and right now i have this
29:40 - version which is
29:41 - 18.04 lts version
29:44 - and if you have the older version of
29:47 - docker or docker io or docker engine
29:51 - installed you can use this command to
29:54 - uninstall
29:55 - previous versions of docker
29:58 - now to install docker you can just
30:01 - scroll a little bit down and they have
30:04 - the
30:05 - very good documentation of installing
30:08 - docker on your ubuntu operating system
30:10 - so we are going to just copy these
30:12 - commands and paste it on our terminal
30:15 - and we will be good to go
30:17 - so the first command is sudo apt-get
30:20 - update so i'm going to just copy this
30:22 - command and i'm going to just open my
30:25 - terminal here
30:26 - and then just paste this command and
30:29 - then give my ubuntu's password and then
30:32 - just press enter it's going to update
30:36 - all the
30:37 - repositories and then
30:39 - i'm going to just copy
30:42 - the second command in a meanwhile so
30:45 - this is the second command and in the
30:46 - second command we install
30:48 - the packages to allow the apt to use the
30:52 - repository over https
30:55 - so let's just copy this command and go
30:58 - to our terminal
30:59 - and then let me just clear the terminal
31:03 - and now i'm going to just paste this
31:05 - command and then press enter which is
31:07 - going to start the installation i'm
31:10 - going to press y
31:12 - and then press enter
31:14 - and in the meantime we are going to
31:17 - copy the third command which is to add
31:19 - docker's official gpg key
31:22 - so for that you need to have curl and
31:25 - curl we are installing using the second
31:29 - command
31:30 - so when the second command is finished
31:33 - you will have curl on your system
31:35 - and then we can just
31:38 - give the third command
31:40 - so hopefully that is complete so let's
31:43 - clear the terminal
31:45 - once again and then paste
31:48 - the third command
31:51 - and it's okay so we will move to the
31:54 - next command which is to verify that you
31:58 - now have the key with the fingerprints
32:01 - so i'm going to just copy this
32:04 - and then paste it here
32:06 - and verify this and you will see the
32:09 - similar result which is also shown here
32:13 - when you give this command
32:15 - so now we will move to the next command
32:18 - which is to install the docker
32:20 - repository
32:21 - so for ubuntu you need
32:23 - the first option here which is x 8664.
32:27 - so i'm going to just copy this command
32:30 - once again
32:31 - and then go to the terminal
32:33 - clear
32:34 - this terminal and then paste this
32:37 - command and then press enter
32:39 - which is going to install the docker
32:41 - repository
32:43 - and then in the next step we are going
32:46 - to update the repositories once again
32:49 - before installing docker so
32:52 - here you can see the next command which
32:54 - is to update the repositories again
32:57 - and then we are going to
33:00 - just install the docker so after update
33:03 - we are going to install
33:05 - the latest version of docker engine
33:08 - which is the community version
33:10 - so for that we just need to give this
33:12 - command which is going to install docker
33:16 - ce
33:17 - and docker cecli and containered
33:21 - dot io so i'm going to just copy this
33:24 - last command and then paste it to the
33:26 - terminal so clear the terminal just
33:29 - paste this command
33:30 - and then
33:31 - just wait for the installation to
33:33 - complete
33:34 - so it's that easy to install docker
33:37 - community edition on your ubuntu
33:41 - operating system
33:42 - and if you want to install a specific
33:45 - version of
33:46 - these packages
33:48 - you can
33:49 - give
33:50 - these commands so when you give this
33:52 - command apt cache medicine docker
33:55 - minus ce
33:57 - you will see a different version of
33:59 - docker which are available for your
34:02 - ubuntu operating system
34:04 - so from here you just need to take the
34:06 - version and then replace this
34:08 - placeholder for the version string
34:11 - with the actual version of
34:14 - whatever tool you want to install so for
34:16 - example if you want to
34:18 - install the version of docker ce
34:22 - for example we need the latest version
34:24 - of uh the docker ce then you can
34:27 - just copy this and then just replace
34:31 - this placeholder string by
34:34 - this string okay same you can do for the
34:38 - docker cecli so once this command is
34:42 - finished i'm going to once again clear
34:44 - the terminal
34:45 - and we are going to run this command
34:47 - which is sudo docker run hello world in
34:51 - order to test whether everything is
34:53 - working fine or not and here i'm going
34:55 - to just write sudo
34:58 - docker
34:59 - run
35:01 - hello hyphen world and then press enter
35:05 - and i'm going to give my ubuntu's
35:07 - password and you can see when you run
35:09 - this command it prints hello from docker
35:13 - so first of all what happens is
35:15 - because we are running this docker
35:17 - command for the first time it's going to
35:20 - find the docker locally and if it's not
35:22 - found then it's going to pull your
35:26 - docker image from the docker hub and
35:29 - then execute this hello world image
35:32 - which is going to print this kind of
35:35 - output so if you see this kind of output
35:37 - that means docker is running on your
35:40 - system
35:41 - and also you can
35:43 - check the docker images now so you can
35:46 - just give this command
35:48 - sudo
35:50 - docker
35:51 - which is going to list out all the
35:53 - docker images you have on your ubuntu
35:56 - operating system so that's how you can
35:59 - install
36:00 - docker on your ubuntu operating system
36:04 - in this video we will talk about how
36:06 - does docker works and we will see some
36:09 - commands related to docker and docker
36:11 - images
36:13 - so as i have told you in the earlier
36:15 - videos also you can build your docker
36:17 - images that holds your applications
36:21 - using docker files
36:23 - and then you can create your docker
36:25 - containers from
36:27 - those docker images to run your
36:30 - applications
36:32 - and then you can share your docker
36:34 - images
36:36 - via docker hub or via your private
36:40 - registry
36:41 - now if you want to see this docker flow
36:44 - in the form of a diagram
36:47 - you can see this diagram here so you can
36:50 - create a docker file which we are going
36:53 - to see how we can create a docker file
36:56 - in the later videos
36:58 - so docker file is a file
37:00 - from which you can build your
37:03 - applications into
37:05 - docker images
37:07 - so what happens is you pull some images
37:11 - which are already there on the docker
37:13 - hub
37:14 - and you use those images
37:17 - with
37:18 - your application
37:19 - and you write all
37:22 - that uh code or that script inside your
37:26 - docker file so how will your application
37:29 - run inside
37:31 - a container you write everything in a
37:34 - docker file
37:36 - and then you build
37:38 - your docker file which will create a
37:41 - docker image
37:42 - and when you run your docker image it
37:45 - will be converted to a docker
37:48 - container now let's see some commands
37:51 - related to docker
37:53 - so the first command which i want to
37:55 - show you is the docker search command so
37:59 - you just write docker search and then
38:02 - you give your options for example
38:05 - whatever
38:06 - image you want to
38:09 - fetch from your docker hub you can just
38:14 - write that
38:15 - image name for example i just write
38:19 - ubuntu here so
38:21 - you can search
38:22 - all the images which are there
38:25 - related to ubuntu on docker hub using
38:29 - this command so docker search ubuntu so
38:32 - when you give docker search ubuntu you
38:35 - will see this kind of result in the form
38:38 - of a table
38:39 - and the first column here is the name
38:43 - the second column here is the
38:46 - description third is the number of stars
38:49 - and if the
38:51 - image have more number of stars then
38:53 - it's more popular
38:56 - also you have the column for
38:58 - official so if you see
39:02 - ok under official for
39:05 - a particular image so for example this
39:08 - first image with the name ubuntu is the
39:10 - official image
39:12 - on docker hub and you can also see some
39:15 - description here so clearly uh this
39:18 - first image which is an official image
39:21 - also is the most popular image
39:24 - on docker hub about ubuntu
39:28 - now let's see some options which are
39:30 - related to docker search so i'm going to
39:32 - just write docker
39:34 - search here and then i can give the
39:37 - filter option which we use to filter our
39:41 - results so i'm going to just write a
39:43 - filter here
39:45 - so let's say we want to filter our
39:47 - result on the basis of stars an image
39:51 - on the docker hub so i can just write
39:55 - stars here is equal to 3 and then the
39:59 - name of an image i'm searching for so
40:01 - for example i'm
40:02 - searching for ubuntu here so i will just
40:05 - write ubuntu
40:06 - and this example will display
40:09 - the images with the name ubuntu
40:12 - and which have at least three stars i'm
40:16 - going to just press enter
40:17 - so you can see all the result of the
40:20 - images which have at least
40:22 - three stars now if you give here let's
40:26 - say number of star is equal to 100
40:29 - so it's going to search for all the
40:32 - images
40:33 - which have at least 100 stars now if you
40:37 - want to give more than one filter you
40:39 - can add this filter option once again
40:43 - so you can just write hyphen hyphen
40:46 - filter
40:47 - and then the next filter
40:49 - so the first filter we have here is for
40:53 - the
40:54 - stars and the second filter i have added
40:57 - here
40:58 - is for
41:00 - the official image
41:01 - so i just want all the images which are
41:05 - official so that's why i have just given
41:09 - this filter which is is official is
41:11 - equal to true and then i'm going to just
41:13 - press enter
41:14 - and i will only see the official images
41:18 - which are present on the docker hub
41:21 - and which have more than
41:24 - 100 stars in a similar way i can also
41:28 - search for
41:29 - automated image which are not official
41:32 - but which are there by
41:34 - some users which are there on
41:38 - docker hub right so it's going to show
41:41 - you all the
41:42 - images which are not official but
41:45 - automated now there is this option which
41:48 - is called uh no trunk also which is
41:50 - going to show you the description
41:53 - without truncating uh this description
41:55 - so right now you can see
41:57 - in the description you see this
41:59 - description and these three dots
42:02 - so that means this description have
42:05 - more
42:06 - content in the description so i can just
42:10 - give this option which is no trunk which
42:13 - is not going to truncate this
42:15 - description it's going to show you
42:18 - the full description here
42:21 - so sometimes this
42:24 - option can get
42:25 - really messy if the description is
42:27 - really large
42:29 - so
42:30 - just use it wisely now instead of for
42:34 - this hyphen hyphen filter you can also
42:36 - simply write
42:38 - hyphen f for the filter option so either
42:42 - you can just give the full filter option
42:45 - or you can just give hyphen f for the
42:48 - filter and the result will be the same
42:52 - now the next command which i'm going to
42:53 - show you here is the docker
42:56 - images so i'm going to just write
42:59 - docker images
43:01 - and this command we use to list out
43:05 - all the local images you have on your
43:08 - host
43:10 - so when you give this command docker
43:11 - images it's going to give you all the
43:14 - images which you have on your host as i
43:17 - said
43:18 - and right now i only have
43:20 - one uh image which is
43:23 - hello world image which we have pulled
43:25 - in the previous videos when i have shown
43:28 - you how to install docker on your
43:32 - various operating system so right now i
43:35 - only have one docker image which is
43:37 - hello
43:38 - world now there are some options which
43:42 - are related to docker images
43:45 - so we are going to see all those options
43:48 - one by one
43:49 - so
43:50 - with this docker images option you can
43:53 - give the name of the image
43:56 - now let's say i give here
43:58 - the option java
44:01 - so you can list the images using the
44:04 - name or the tag
44:05 - so when you give this docker images java
44:08 - command it's going to search
44:11 - all the images related to java
44:14 - and you can see there is no image which
44:17 - is related to java
44:19 - on my host machine
44:22 - so let's pull the java image from the
44:25 - docker hub so i'm going to just write
44:29 - docker here and then
44:31 - pull
44:32 - so the pull command you can use to pull
44:34 - an image or a repository from docker hub
44:38 - or from your private repository so i'm
44:40 - going to just pull the java
44:44 - image from the docker hub so you can see
44:46 - when you give this docker pull
44:49 - java command it's going to pull always
44:52 - the latest tagged image from the docker
44:56 - hub and in the output also you can see
44:59 - using default tag so the default tag is
45:02 - always the latest tag that's why it's
45:05 - going to pull the
45:07 - latest java
45:09 - image so now you can see this java image
45:13 - with the latest tag
45:15 - is downloaded on my host
45:19 - so let me
45:20 - clear the terminal
45:23 - and now i'm going to give the docker
45:26 - images command once again so docker
45:30 - images and
45:33 - now i have
45:34 - the java image with the tag latest and
45:38 - the hello world image with the tag
45:41 - latest
45:42 - so now i can use
45:44 - the docker images and then the name of
45:48 - the image also so i can search uh
45:51 - based on the name of the image also so i
45:54 - can just write
45:55 - docker images java which is going to
45:58 - just give me the images which are
46:02 - related to java
46:04 - i can also
46:05 - search with the image name and the tag
46:08 - so let's say i want to search for the
46:12 - java image which have the tag
46:14 - let's say
46:15 - 8 which is not present on my
46:19 - host so it's going to give you
46:22 - the empty result without any image
46:26 - if you give the
46:28 - tag which is present so the latest tag
46:32 - is
46:33 - present
46:34 - on my host so it's going to give you
46:38 - the java image with the latest tag so
46:41 - let me give
46:42 - the docker images command once again
46:45 - and you can see by default in the result
46:47 - you will see the name of the repository
46:50 - or an image
46:51 - then the tag of
46:53 - that image and then the image id this id
46:57 - is very
46:58 - useful
46:59 - when you have a multiple
47:02 - image
47:03 - related to let's say java so you can use
47:06 - this image id to remove that image
47:09 - or work with that image
47:11 - so that's why this id is
47:14 - important
47:16 - also you can see when this image is
47:19 - created
47:20 - and the size of the image so the
47:23 - different images with different tag have
47:26 - different sizes so sometimes you want
47:29 - the images with
47:31 - the less
47:32 - size or sometimes you want the images
47:35 - which have
47:37 - the full feature so in that case you can
47:40 - use a different kind of
47:43 - image with different tag
47:45 - which suits your requirement for your
47:48 - application
47:49 - in this video we will talk about
47:51 - basics of docker file
47:54 - so first of all what is a docker file
47:57 - so docker can build images automatically
48:01 - by reading the instructions from the
48:03 - docker file
48:05 - and a docker file is a text document
48:08 - that contains all the commands a user
48:11 - could call on the command line to
48:14 - assemble an image now as i have
48:16 - previously told you you can use docker
48:19 - file
48:20 - and then once you write your
48:22 - instructions in the docker file you can
48:24 - build your docker file
48:26 - to produce a docker image and when you
48:30 - run the docker image it's called the
48:32 - docker container so let's see how we can
48:34 - create a docker file and then we will
48:38 - see how we can
48:39 - build our docker file to make an image
48:43 - so right now i'm in my home directory so
48:45 - here i'm going to create
48:47 - a directory called d1 let's say
48:50 - and then i'm going to cd in this d1
48:54 - directory
48:55 - and right now it doesn't contain any
48:58 - files or folders so let's create our
49:01 - docker file in this d1 folder so i'm
49:04 - going to
49:05 - just write
49:07 - touch and then
49:09 - docker file
49:11 - so by convention we usually
49:14 - name our docker file as docker file with
49:18 - the capital d and this docker file
49:21 - doesn't contain any extension so it's
49:24 - without any extension so let's create
49:26 - this file so now i have this docker file
49:30 - in my deven folder right
49:33 - so now i'm going to open this docker
49:36 - file in any editor you can use
49:39 - the editor of your choice right from the
49:42 - nano bim or any editor i like to use the
49:46 - visual studio code editor so i'm going
49:48 - to use that so i'm going to just write
49:51 - code and then i'm going to just write
49:54 - dot which is going to
49:56 - open the current directory
49:58 - in
49:59 - my visual studio code so here i have
50:01 - this docker file right
50:04 - now
50:05 - in visual studio code there are many
50:07 - extensions you can install related to
50:10 - docker that's why i like to use
50:13 - this visual studio code and straight
50:16 - away when i open this docker file in my
50:19 - visual studio code i can see this pop-up
50:22 - which says docker extension is
50:24 - recommended for this file
50:26 - so you can click on this install button
50:30 - or you can
50:31 - just install this docker extension
50:34 - from
50:35 - this
50:36 - extension option here also so you can
50:39 - just search for
50:40 - docker here and then it will give you
50:43 - the most popular docker extension right
50:46 - so just choose the most popular one from
50:49 - here and i'm going to just install this
50:51 - docker extension and once this extension
50:54 - is installed it's going to help you
50:57 - with your docker files and docker
51:01 - commands in general okay so there are
51:04 - bunch of keywords which you can use
51:07 - inside your docker file and each keyword
51:10 - means something so we will start with
51:14 - the arg keyword
51:16 - so this arg keyword we can use to
51:19 - provide any argument as the name
51:22 - suggests and i'm going to explain this
51:25 - arg in detail after
51:27 - the other keyword which is from so here
51:30 - what i'm going to do is i'm going to
51:32 - just write
51:34 - version here and
51:36 - version equals i'm going to give here is
51:40 - 20.04 so version here is the name of the
51:44 - argument
51:45 - and
51:46 - 20.04 is the value of the argument now
51:50 - after this we are going to use another
51:53 - keyword which is from now this from
51:56 - defines the base image used to start the
51:59 - build process so there are many base
52:02 - images which you can find on the docker
52:05 - hub and we are going to use one such
52:08 - base image which is
52:10 - ubuntu and then after colon you can
52:13 - choose which version of ubuntu base
52:17 - image you want to have
52:19 - so here uh as i have defined this arg is
52:23 - equal to 20.04 so we are going to fetch
52:26 - the ubuntu
52:27 - 20.04 from the docker hub as our base
52:32 - image
52:33 - so how we can use this argument with
52:36 - this from uh
52:38 - keyword you just need to use this dollar
52:42 - symbol and then inside these curly
52:45 - brackets you just need to pass your
52:47 - argument so my argument name is version
52:49 - so i'm passing uh this argument here
52:52 - this means
52:53 - that we want to fetch the ubuntu 20.04
52:58 - image from the docker hub now this from
53:02 - instruction supports variables that are
53:04 - declared by any arg instruction that
53:08 - occurs before the first from and an arg
53:14 - declared before the from keyword is
53:17 - outside of the build stage so it can't
53:20 - be used in any instruction after from so
53:24 - now once we have the image we are going
53:26 - to use one more
53:28 - keyword which is the run keyword so this
53:32 - run is the central executing directive
53:35 - for the docker file so this run you can
53:38 - use to run commands using the docker
53:42 - file so for now i want to run
53:46 - inside this ubuntu base image apt get
53:50 - update command and also i'm going to
53:52 - give the flag y for yes and now let's
53:55 - move to the next command so the next
53:57 - command i'm going to use here is the cm
54:01 - d command
54:02 - so the cmd command can be used for
54:05 - executing a specific command within a
54:09 - container so let's say i just want to
54:11 - run the bash inside the container so i'm
54:14 - going to just use these square brackets
54:17 - and
54:18 - with the double quotes i'm going to just
54:20 - write
54:22 - bash here
54:23 - so this is a very basic docker file
54:26 - now let's see how we can
54:28 - just use this docker file to build some
54:31 - image
54:32 - so i'm going to open the terminal inside
54:35 - my visual studio code editor
54:38 - and as i can see i'm in my d1 directory
54:42 - which i have created and here i have
54:45 - this docker file right so now let's list
54:48 - out what are the docker images we have
54:51 - on our system so i'm going to just write
54:55 - a sudo
54:56 - docker
54:58 - images command to list out all the
55:00 - images
55:01 - and now i want to
55:03 - run or build this docker file and
55:06 - create an image so right now we have
55:09 - hello world and i want to create one
55:11 - more image using this docker file
55:15 - so to
55:16 - build a docker file you can give a
55:20 - command build so just write sudo docker
55:25 - build
55:26 - and then dot
55:28 - so when you run this docker build
55:30 - command the current working directory is
55:33 - called
55:34 - the build context
55:36 - and by default the docker file is
55:39 - assumed to be located in this directory
55:43 - but you can also specify
55:46 - the directory path using
55:49 - a flag called hyphen f that we will see
55:52 - a little bit later but just give this
55:55 - command for now which is sudo docker
55:59 - build
56:00 - space dot so now you can see that when
56:03 - we run this docker build command the
56:07 - build is run by the docker daemon not by
56:11 - your cli
56:12 - so the first thing a build process does
56:15 - is to send the entire context to the
56:19 - docker demon and that we can see here
56:22 - sending build context to the docker
56:25 - demon now in most cases it's best to
56:28 - start with the empty directory and then
56:32 - you start adding your docker file in
56:35 - that directory now when you run this
56:38 - docker build command you will also see
56:41 - that
56:42 - these
56:43 - layers are fetched from
56:46 - your base image from the docker hub and
56:50 - also you will be able to see which step
56:53 - is executed so the step one out of four
56:56 - is this arg step step two is the from
57:00 - step and at this step it's going to pull
57:03 - the base image from the docker
57:05 - hub and you have some intermediate
57:08 - layers here which are created and then
57:11 - we have used this run command which in
57:13 - itself has created its own layer
57:17 - and it has
57:18 - installed the updates using this updates
57:21 - command and at last we have given this
57:24 - cmd command
57:25 - so now let's give the docker images
57:28 - command once again so i'm going to just
57:30 - give sudo docker images command
57:32 - and now you're going to see
57:35 - this ubuntu base image which is fetched
57:38 - from the docker hub and you have
57:42 - this image which doesn't have any name
57:45 - or tag because we haven't provided any
57:48 - name or tag to our
57:51 - docker image and this only have this
57:54 - image id which you can see here also
57:57 - which is successfully built this image
58:00 - id
58:01 - so using this image id you know that
58:03 - your image is created here now let's say
58:08 - you are in
58:09 - some other directory other than
58:12 - the directory in which your docker file
58:14 - is there
58:15 - so for building a docker file from some
58:19 - different directory you use the hyphen f
58:23 - flag so what you do here you just use
58:27 - sudo docker build and then hyphen f and
58:30 - then you just give the path to your
58:34 - docker file so when you give
58:37 - this command and then you need to
58:39 - provide the context also so you need to
58:42 - create this context inside this current
58:45 - directory so when you give this command
58:47 - it's also going to give you the same
58:50 - result so because we have effectively
58:52 - given the same command so
58:54 - we don't need to modify our image so
58:57 - once again when you give the docker
58:59 - images command it's going to show the
59:01 - same
59:02 - image because your image is not modified
59:06 - and you haven't changed your context
59:08 - which is your current directory
59:11 - now as you can see we don't have any
59:14 - name and tag
59:15 - to our
59:17 - image so if you want to provide the
59:19 - repository name and the tag
59:22 - for your image what you can do is you
59:25 - can give this docker
59:28 - build command and then give the hyphen t
59:32 - flag so using this hyphen t flag you can
59:36 - specify the repository and the tag at
59:39 - which you want to save your image so
59:42 - let's say i want to give the repository
59:44 - name as my underscore
59:47 - app and the tag which i want to give
59:51 - here is let's say one so after the colon
59:54 - you can provide the tag also here so
59:57 - when you run this command and don't
60:00 - forget to provide this context which is
60:02 - dot which is the current directory and
60:04 - then press enter it's going to just
60:08 - create the same image and you will see
60:11 - here an extra step
60:13 - is shown here which is tagged
60:16 - with my app colon one so at this step
60:20 - also you will observe that docker is
60:23 - smart enough to know that you want to
60:28 - create the same
60:30 - image from the same docker file and you
60:33 - haven't changed your docker files so
60:35 - it's not going to change your image or
60:38 - create or recreate your image once again
60:42 - because we haven't changed our docker
60:44 - file right we have just give the
60:46 - repository name and the tag
60:49 - so now when you give this command docker
60:52 - images then you will see that the
60:55 - repository name
60:57 - is my app and the tag associated with it
61:01 - is one so this is how you can give
61:04 - the repository name and the tag
61:07 - now
61:08 - if you will observe here we have
61:11 - our base image also here which is ubuntu
61:15 - 20.04
61:16 - so in future if you create different
61:19 - docker file and it requires the same
61:23 - ubuntu
61:24 - docker image and the same tag which is
61:27 - 20.04
61:28 - then
61:29 - your docker build command will be smart
61:33 - enough to know that and it's not going
61:35 - to pull this image from the docker hub
61:38 - again because you already have this
61:41 - image on your local pc so as i said we
61:45 - have fetched this ubuntu image and the
61:46 - version for it is
61:49 - 20.04 here in the version if you don't
61:53 - know the version you can always write
61:55 - the latest so just write
61:57 - latest here and it's going to just fetch
62:01 - the latest version of
62:03 - the base image you want to have
62:06 - so let me just save this file with the
62:09 - latest version
62:11 - and then run the same command with
62:12 - hyphen t my app and the tag will be the
62:16 - same and the context will be the same
62:19 - and now you will see
62:21 - that it's going to fetch the latest
62:24 - version of ubuntu here and now when i
62:28 - give this
62:30 - docker images command you will see the
62:32 - tag latest here instead of
62:35 - 20.04 which was this more specific
62:38 - version i wanted right so latest is the
62:42 - latest version which will be available
62:45 - on the docker hub for this base image so
62:49 - those are some of the basics of docker
62:52 - files we are going to learn about docker
62:54 - files in the upcoming videos also
62:57 - till now we have learned the basics of
63:00 - docker files and how we can create
63:03 - docker images using docker files
63:06 - now in this video we are going to learn
63:08 - about docker containers
63:11 - so as i have told you earlier when you
63:13 - run
63:14 - an image it's called a container
63:18 - so
63:19 - in the last video we have created this
63:21 - docker file and we have already built
63:24 - our docker file to
63:26 - produce an image so let's list out the
63:30 - docker images which we have created in
63:33 - the last video so just give the command
63:36 - docker images here
63:38 - and
63:39 - this
63:40 - was the image which we have created we
63:43 - have named our image as my app and the
63:48 - tag which we have given to our image is
63:51 - one here
63:52 - now this is the image id
63:55 - so let's see how we can run this image
63:58 - to create a container
64:01 - now in order to list out all the running
64:05 - containers
64:06 - you have the command which is called
64:09 - sudo docker ps
64:12 - which is going to give you the list of
64:14 - all the running containers
64:16 - so right now we don't have any running
64:18 - container
64:20 - now if you want to
64:22 - see the list of all the container
64:24 - including running or
64:26 - thus exited containers then you can give
64:31 - the command with the flag hyphen a and
64:34 - it's going to give you the list of all
64:36 - the containers
64:38 - you have on your system so it's going to
64:41 - give you the list of all the running
64:43 - container as well as if they are exited
64:46 - and if they are no more running then
64:49 - also it's going to give you the list of
64:51 - all the containers so you can see i have
64:54 - ran this hello world container
64:57 - two months ago right
64:59 - and right now the status of this
65:02 - container is exited that means it's not
65:05 - running so this is how you can see the
65:07 - list of all the containers
65:10 - now to run a container
65:12 - what you need is a command called run so
65:16 - you just write sudo
65:19 - docker run
65:21 - and then you can give with this run
65:23 - command some
65:25 - options for example
65:27 - and then you give the name of the image
65:30 - so it requires uh the image in order to
65:34 - run a container and then
65:37 - you can give some commands so
65:40 - you can give some commands with the
65:42 - docker round image and also you can give
65:45 - some
65:46 - args here okay so let me just write args
65:50 - right
65:51 - so this is the basic syntax of a docker
65:55 - run command
65:56 - so let's say we want to run
65:59 - our docker image which is
66:02 - my app right so let me just once again
66:07 - give this docker images command and i
66:10 - want to run this
66:11 - image so to run a container you just
66:14 - need one thing which is the docker image
66:18 - so you can just write sudo
66:21 - docker
66:22 - run
66:23 - and then the image id so this is the
66:26 - image id of
66:28 - this
66:29 - repository which is my app so let's say
66:32 - we want to run this image so i'm going
66:34 - to just take the image id
66:37 - of this image and then i'm going to just
66:41 - press enter
66:42 - and as soon as i press enter it's going
66:45 - to run the container and exits
66:49 - immediately so when i run this
66:52 - docker run
66:53 - image id command then it's going to run
66:56 - and it's going to exit immediately right
66:59 - so when you give this uh
67:02 - docker ps command so let's list out
67:06 - all the running containers right so all
67:09 - the running containers still you will
67:11 - see there is no running container
67:14 - but
67:15 - when you give this command with hyphen a
67:18 - flag which means we want to see all the
67:22 - containers then it's going to show you
67:25 - that
67:26 - it ran this uh container with this image
67:29 - so we uh ran the container with this
67:32 - image and this is the same image which
67:34 - we have used in this command right
67:37 - and it was exited about a minute ago
67:42 - right so it ran
67:44 - and it exited immediately
67:48 - now here one more interesting thing to
67:51 - note here is when you run
67:54 - the container with the run command dot
67:57 - co automatically generates a container
68:00 - name
68:01 - with a string of randomly selected
68:03 - numbers and letters
68:05 - so if you uh are wondering what this
68:09 - name is
68:10 - this is just
68:11 - a automatically generated name which is
68:15 - generated by docker for you
68:17 - now if you want to give a specific name
68:22 - to your docker container
68:24 - there is a flag for that
68:27 - so we are going to run the docker run
68:30 - command for the same image
68:33 - and this time what we are going to do is
68:35 - we are going to give some name to our
68:37 - container so before
68:39 - the image id i'm going to just provide
68:42 - this name flag
68:44 - and then i can give the name to my
68:47 - container so the name i have given here
68:50 - is my ubuntu container to my container
68:53 - and let's give the same command with
68:55 - this flag
68:57 - and once again you don't see any
69:00 - output here on the terminal but
69:03 - as i have told you it has just ran the
69:07 - container and exited immediately so when
69:10 - we give the docker ps hyphen a command
69:14 - once again
69:15 - you will see this time
69:17 - that
69:18 - now our container name is my ubuntu
69:21 - container right so this was the
69:24 - container which uh we ran earlier and
69:28 - this time
69:30 - with the last
69:32 - docker run command we have given the
69:34 - name to our container and the image was
69:37 - this one so image
69:39 - is
69:40 - unchanged but we have created a new
69:42 - container with the name
69:44 - my ubuntu container right and the
69:47 - command which we ran is badabash command
69:51 - which
69:52 - is coming from this
69:55 - line of docker file
69:58 - now when you run your docker containers
70:00 - it's run in two modes
70:03 - one is attached mode or in the
70:06 - foreground and other is in the detached
70:10 - mode or in the background and by default
70:13 - docker runs the container in the
70:15 - attached mode that means it's attached
70:19 - to the terminal session where it
70:22 - displays the output and the message so
70:24 - if this docker file
70:26 - has some
70:28 - commands or some output related to
70:32 - this docker file then it's going to show
70:36 - you the output in the terminal when you
70:39 - run the container with the docker run
70:41 - command but because we don't have any uh
70:44 - output associated with the docker file
70:47 - it
70:48 - doesn't show any output right now if you
70:51 - want to run your docker file in the
70:54 - detached mode what you can do here is
70:58 - you can give the hyphen d flag that
71:00 - means you want to run your container in
71:04 - the detached mode so just give hyphen d
71:07 - and then i'm going to give the same
71:09 - command here and let's see what happens
71:12 - and you can see it's going to give you
71:14 - this message which says error response
71:18 - from the daemon conflict the container
71:20 - name
71:21 - this is already in use right so this
71:25 - container we have already defined so you
71:28 - cannot create this container with the
71:30 - same name so you need to give the
71:33 - different name here so let's say i'm
71:36 - going to just give my ubuntu container 2
71:40 - now okay and then i have also given this
71:44 - hyphen d command to run it in the
71:47 - detached mode and now you will see
71:50 - that there is an output which is printed
71:54 - here and this is the container id of
71:59 - your container
72:01 - now if you have observed here
72:04 - in the previous command where it has
72:06 - should thrown
72:07 - this error
72:09 - it has this long container id
72:12 - now when you give the docker ps hyphen a
72:16 - command you will see in the container id
72:19 - some part of this container id is shown
72:22 - so for example i can see
72:25 - here up to this part of the container id
72:29 - is shown but in the background the
72:31 - container id is
72:33 - so much bigger right so now when i give
72:37 - the docker ps hyphen a command once
72:40 - again
72:41 - i can see one more container which is
72:44 - created and the container id you can see
72:48 - it's going to show you the starting few
72:52 - uh values of the container here until
72:57 - i think
72:58 - until d
72:59 - so
72:59 - using this id also you can
73:02 - delete or work with your container or
73:05 - you can take the full id of the
73:08 - container and work with your container
73:11 - okay so this
73:12 - id will also work or in the short form
73:16 - or the first few
73:18 - letters of the id will also work which
73:21 - is shown here now we have seen that how
73:24 - we can run our docker container in the
73:27 - detached mode and as i told you that by
73:30 - default docker runs the container in the
73:33 - attached mode or in the foreground right
73:37 - now let's see how we can run our
73:39 - container interactively
73:41 - so docker allows you to run the
73:43 - container in interactive mode that means
73:47 - you can execute commands inside the
73:50 - container while it's still running so
73:53 - let's see how we can run our docker
73:55 - container interactively so now what i'm
73:58 - going to do here is i'm going to just
74:01 - create a new container let's say
74:03 - it's container 3 my open to container
74:06 - underscore 3 and i don't want to run it
74:10 - in detached mode instead i want to run
74:14 - this container in the interactive mode
74:16 - so
74:18 - here i can give
74:19 - hyphen
74:20 - i t
74:22 - flag which means that we want to run our
74:26 - container in the interactive mode
74:29 - and the image
74:30 - name is same which we have created using
74:33 - this docker file so let's see what
74:35 - happens when i run this command like
74:38 - this so when i run this command like
74:40 - this
74:41 - you will see
74:42 - the bash shell which appears here
74:47 - and this
74:48 - is what i was expecting
74:51 - so
74:52 - now
74:53 - as you can see here in this docker file
74:56 - when we have created this image the last
74:59 - command which we wanted is this bash
75:02 - command and it has just given us this
75:06 - bash command shell in the last right so
75:10 - this is how you can run your container
75:12 - in the interactive mode
75:14 - now
75:15 - when i open the new terminal so let this
75:19 - terminal
75:20 - be like this and let me open the new
75:22 - terminal in the visual studio code you
75:24 - can open the new terminal by just
75:26 - clicking on this plus button or you can
75:29 - open your default terminal on your
75:31 - operating system also you can see i'm in
75:34 - the second terminal and here i'm going
75:37 - to give this sudo
75:39 - docker ps command without hyphenae that
75:42 - means i want to see only the running
75:45 - docker containers and then i'm going to
75:48 - provide my password of my operating
75:50 - system and this time you will observe
75:54 - that
75:55 - when i give this docker ps command it's
75:58 - going to give me some output because
76:01 - now the container which i have created
76:03 - which is my ubuntu container 3
76:06 - is still running in the other terminal
76:10 - as you can see we have uh
76:13 - running bash shell in the docker
76:16 - container so this bash shell is running
76:19 - inside our container right so
76:23 - when you uh just
76:25 - give some ls command you will see the
76:28 - file system
76:30 - directories here inside your container
76:33 - you can also give for example up
76:37 - time so as the name suggests the uptime
76:40 - command will give you the time for which
76:42 - the system
76:43 - has been up or running right and as we
76:47 - have
76:48 - seen in the last video we have
76:50 - only uh given this bash command so our
76:54 - container is not doing much it's just
76:56 - opening the bash a shell
76:59 - now there are many interesting things
77:01 - which you can do
77:02 - with your docker run command and that we
77:05 - are going to see in the next videos also
77:08 - i want to show you uh some more commands
77:12 - related to docker run and uh docker in
77:16 - general so now what i'm going to do is
77:19 - i'm going to switch to my terminal so
77:22 - i'm going to
77:23 - open my default terminal on my ubuntu
77:27 - operating system also i'm going to open
77:29 - my browser and i'm going to just search
77:31 - for docker hub i want to show you how
77:33 - this docker hub looks like so the first
77:37 - link here is hub.docker.com
77:40 - and when you click on this link you will
77:43 - see uh this web page here from where you
77:47 - can
77:47 - just sign in with your docker id which
77:51 - you have created earlier or you can
77:53 - search for some images so let's say i'm
77:56 - going to search for
77:59 - an image called
78:01 - busy
78:02 - box and then press enter
78:04 - and you will see an official image of
78:07 - busy box and as you can see uh you will
78:11 - see the tag here on the top which is
78:14 - going to show you if it's official it's
78:17 - going to show you it's an official image
78:19 - and otherwise it's going to show you
78:21 - verified or the other
78:25 - information associated with the image so
78:27 - the most popular one and the official
78:30 - one is this one so i'm going to just
78:31 - click on this
78:33 - base image and here i will see some more
78:37 - information related to this image so if
78:41 - i want to just pull this image on my pc
78:44 - i can just give this docker pull busy
78:47 - box command so let's do this
78:49 - and i'm going to show you how we can
78:53 - use the docker run command with the busy
78:56 - box uh image which we are going to pull
78:58 - so i'm going to just write
79:00 - docker
79:02 - pull busy box here and then press enter
79:05 - and i'm going to just give my ubuntu's
79:08 - password which is going to just pull the
79:10 - latest tag image of the busy box right
79:14 - so if you don't provide any tag after
79:17 - colon then it's going to pull the latest
79:20 - image
79:21 - so now let's
79:22 - run the docker images commands
79:26 - so i'm going to just give
79:28 - images and now you can see this busy box
79:31 - image is there
79:33 - so
79:34 - you can run the docker run command with
79:38 - the images you have in this list also so
79:41 - till now we have seen how we can run
79:44 - the docker run command with
79:47 - the container which we have created but
79:50 - you can also use this docker run command
79:53 - with the base images also for example
79:56 - busy box or ubuntu
79:58 - 20.04 or ubuntu latest version and i
80:02 - have pulled this busy box
80:04 - base image because it's very small in
80:07 - size you can see it's only around 1.22
80:12 - megabytes so if you want to quickly test
80:15 - something with
80:16 - some linux terminal or linux operating
80:20 - system busy box is the image to go so
80:24 - now as i told you you can use this
80:27 - docker
80:28 - run command with the images you have in
80:32 - your local pc so you can just give
80:36 - docker run and the name of your
80:40 - image which is busy box here
80:44 - and then you can do something with it so
80:49 - you can just
80:50 - write echo so it means
80:53 - that we want to run the echo command
80:57 - inside our busy box container when it
81:00 - runs
81:00 - and let's say we just want to print
81:03 - hello world here so i'm going to just
81:05 - write hello
81:06 - world and then press enter
81:08 - and it's going to run this busy box
81:12 - image as the container and it's going to
81:14 - print or execute whatever command you
81:17 - have given after
81:19 - this
81:20 - busy box command right so
81:23 - basically what this means is we are
81:25 - running echo inside our busy box
81:28 - container also when you give the docker
81:31 - ps hyphen a command so let's give this
81:34 - docker ps hyphen a
81:37 - and you will see this busy box command
81:40 - also so you can see this busy box and
81:43 - what command it has ran so we have we
81:46 - ran echo hello world and it was created
81:49 - 42 seconds ago and it was exited right
81:52 - so status is executed now let's say you
81:55 - just want to work with the busybox shell
81:59 - what you can do you can just give the
82:01 - same command but instead of
82:04 - giving this echo you can run it in the
82:07 - interactive
82:09 - manner using this i t flag
82:12 - and then you can just
82:14 - tell that you want to run the shell so
82:17 - just write sh which is going to run this
82:20 - container and open the shell inside the
82:23 - container right so let's give this
82:26 - command and when you give this run
82:28 - command with the id flag it attached us
82:31 - to the interactive tty in the container
82:35 - right so because we are running the
82:38 - sh command after this run command so
82:42 - it's going to open the shell inside your
82:44 - busy box container and here again you
82:47 - can run
82:48 - your basic commands or whatever you want
82:51 - to do inside the container so we are not
82:54 - working inside our
82:56 - operating system we are working inside
82:59 - our container now in order to exit from
83:02 - the container you can just give this
83:04 - exit command and you will come out of
83:07 - this container
83:09 - now the last thing
83:11 - which i want to show you before
83:13 - just finishing this video and that is
83:17 - how we can remove some containers so now
83:20 - we ran so many commands and we have so
83:23 - many containers
83:24 - and as you can see we have so many dead
83:28 - container that means all the containers
83:31 - are exited and they are not running
83:34 - anymore so when you give this docker ps
83:39 - command you can see only one container
83:41 - is running and all the other containers
83:45 - when you see using hyphen a are exited
83:48 - so let's say you want to remove some of
83:50 - these containers so let me clear the
83:53 - terminal
83:54 - and let me just give this docker ps
83:57 - hyphen a command so let's say i want to
83:59 - remove
84:01 - this container and this container so
84:03 - there is a very simple command which is
84:05 - called rm so you can just write sudo
84:09 - and then
84:10 - the
84:11 - docker command and then just give rm and
84:14 - then after that you can give the
84:16 - container id of the container so let's
84:18 - say i want to just give this container
84:20 - id of the container so just copy and
84:24 - paste this container id and then press
84:26 - enter and if you see the container id in
84:30 - return in the output that means this
84:33 - container is removed so once again when
84:36 - you give the docker ps hyphen a you will
84:38 - see that this container is already
84:41 - removed right
84:43 - in the same way you can remove multiple
84:46 - uh
84:47 - containers using this rm command so you
84:51 - can just give container id space
84:54 - container id to
84:56 - space you can give multiple container id
84:59 - in this manner and it's going to remove
85:01 - all the container ids which you have
85:03 - given after the rm command so so right
85:06 - now we want to remove two containers and
85:09 - as i said if you see
85:11 - the container id in the output that
85:13 - means that container is removed and in
85:17 - my case as i can see this container is
85:19 - removed but the container with
85:23 - this id is not removed means the
85:26 - container with this id is not removed
85:28 - because it's running right so if the
85:31 - container is running and if you want to
85:33 - remove it you need to stop this
85:35 - container first and then you can remove
85:39 - the container so as i have shown you
85:43 - this container is running here so i i
85:45 - can either just give this exit command
85:49 - or i can stop the container let's see
85:51 - how we can stop the container using a
85:54 - command called stop so let's say i want
85:57 - to just stop this container so i can
86:01 - just give the command docker stop
86:04 - just write docker stop and then the name
86:08 - of your container
86:09 - so my container name is this one so i
86:13 - want to stop this container and then
86:15 - press enter
86:16 - and if you see the container id in the
86:18 - output that means this container is
86:20 - stopped so when you give this docker ps
86:24 - without hyphen a you can see there is no
86:27 - container running anymore
86:29 - and now in the
86:32 - list of all containers
86:34 - you will see this container and now when
86:37 - you give this docker rm
86:40 - with this container id
86:43 - it's going to give you the output that
86:45 - means this container is successfully
86:47 - removed okay so you use top command to
86:51 - stop the container and then you can use
86:54 - rm command to remove the container in
86:56 - the last few videos we have seen the
86:58 - fundamentals of using docker files
87:02 - docker images and docker containers
87:05 - now in this video i want to give you a
87:07 - concrete example of using the docker
87:10 - container so i'm going to give you a
87:14 - real world example of how you can
87:17 - really use docker containers and how
87:21 - these docker containers are really
87:23 - useful
87:24 - in certain situations
87:26 - so we are going to
87:28 - compile and run a c plus program inside
87:31 - a docker container
87:33 - now you might say that uh compiling and
87:36 - building a c plus plus program
87:38 - on your host operating system is also
87:42 - easy so why do we need a container so
87:45 - consider a situation
87:47 - in which you have a c plus plus program
87:49 - and you want to compile a c plus program
87:53 - with different version of gcc let's say
87:57 - now it's really hard to maintain
87:59 - different version of gcc on your linux
88:04 - or windows operating system but using
88:07 - docker containers it's really easy to
88:12 - use and compile your program in
88:15 - different gcc versions using docker
88:18 - containers
88:20 - also let's say you want to develop a c
88:22 - plus program which works on multiple
88:24 - operating system or you want to compile
88:27 - your c plus plus program for a cross
88:30 - plate form
88:32 - application so docker containers are
88:34 - really useful for
88:36 - c plus plus cross platform development
88:39 - with containers with containers you can
88:42 - choose a target with a platform that
88:45 - runs completely different operating
88:47 - system other than
88:49 - your host operating system or the system
88:52 - on which you are developing so let's say
88:54 - you are just working on your windows
88:56 - operating system but you want to compile
88:58 - your c plus plus program on
89:01 - a linux operating system or any special
89:04 - version of linux operating system you
89:06 - can do it easily with the docker
89:09 - container so let's start with our
89:11 - example so as you can see on my visual
89:14 - studio code i have opened a docker
89:17 - folder and inside this docker folder i
89:19 - have this
89:20 - directory d1 which we have created in
89:22 - the previous video and now i'm going to
89:24 - create a new directory inside
89:27 - this
89:28 - docker directory and i'm going to
89:31 - name this directory as
89:33 - d2
89:35 - and now i'm going to just go inside this
89:38 - d2 directory so let's go inside this t2
89:41 - directory
89:43 - and here inside this d2 directory i'm
89:45 - going to create a new cpp file let's say
89:49 - so you can use touch on the terminal or
89:51 - you can just click on new file here and
89:54 - then just create a new cpp file with the
89:58 - extension
89:59 - cpp i'm going to name my file as main
90:02 - dot cpp and as soon as you create a cpp
90:06 - file inside your visual studio code
90:09 - editor it's going to give you the
90:11 - suggestion for the c plus plus extension
90:13 - so i'm going to install this c plus
90:15 - extension so now this c plus extension
90:18 - is installed
90:19 - and this c plus plus extension is going
90:21 - to help me to
90:23 - uh work with
90:24 - the c plus plus file inside my visual
90:27 - studio code editor
90:29 - so what i'm going to do here is inside
90:32 - my
90:32 - main.cpp file i'm going to just write a
90:35 - very simple
90:37 - program here which just prints hello
90:40 - docker container
90:42 - so normally what you will do on your
90:45 - host machine if you have a g plus plus
90:48 - or gcc
90:49 - you can compile your
90:51 - c plus program using the g plus plus
90:54 - right so
90:55 - you can see i have this main.cpp so i
90:59 - can compile this program using g plus
91:02 - plus hyphen
91:04 - o and then the executable file name
91:07 - which i want to create let's say i want
91:09 - to just give the name
91:11 - test to my file and then my main.cpp
91:16 - file right
91:17 - so i'm going to just uh press enter
91:20 - which is going to create this executable
91:22 - file you can see here also i'm going to
91:24 - do ls here also so you can see this
91:27 - executable file and now you can just run
91:30 - this test
91:32 - executable file or binary file
91:35 - using this command dot forward slash and
91:38 - the name of your binary file and it's
91:40 - going to print hello docker container
91:43 - and i want to create a docker container
91:46 - and i want to compile my
91:48 - c plus plus program inside my docker
91:50 - container and i want to run my
91:53 - c plus plus program inside my docker
91:56 - container this is what i have done
91:59 - in my host machine not inside my docker
92:01 - container right
92:03 - so let me just clear the terminal
92:06 - and inside my d2 directory where my c
92:10 - plus file is there or my cpp file is
92:13 - there
92:14 - i'm going to create a docker file so i'm
92:16 - going to just
92:18 - right click and i'm going to just create
92:20 - this
92:22 - docker file here and then press enter
92:26 - and i can remove this test
92:28 - binary file because i don't need it
92:31 - for
92:32 - my docker container now if you don't
92:35 - know which base image you want to use so
92:38 - for example if you want to use gcc to
92:41 - compile your c plus plus program
92:44 - you can go to docker hub and search for
92:47 - gcc here and when you search for gcc
92:51 - you will be able to
92:53 - find the official gcc image here you can
92:56 - see docker official image or let's just
93:00 - press enter and see what result it gives
93:04 - so you can see the official image is
93:07 - this one with this official image tag
93:10 - and it has more than 10 million
93:12 - downloads so i'm going to just click on
93:15 - this gcc
93:17 - link and you can see when you just
93:21 - scroll down what are the tags you can
93:23 - use with gcc also you can see how you
93:27 - can pull this gcc base image using
93:30 - docker so the name is really simple gcc
93:33 - so what we are going to do is we are
93:35 - going to just write
93:37 - from and then our base image i'm going
93:40 - to use here is gcc
93:43 - now the version or the tag i want to use
93:47 - here is the
93:49 - latest or you can choose the tags which
93:53 - are available here so you can choose
93:56 - 10.2.0 or 10.2
93:58 - or from all these
94:00 - tags which are available here you can
94:03 - also go to tags section and see
94:06 - the more specific tags
94:08 - you want to use for your c plus plus
94:11 - program so now once we have the base
94:13 - image the next step is to copy our
94:15 - current folder which contains our cpp
94:18 - code into the docker image under
94:22 - the file system where we want to copy
94:25 - this so for copying our
94:28 - local
94:29 - files into the docker image we use this
94:33 - copy command okay and as you can see it
94:36 - suggest us uh that we need to provide
94:39 - the source so source in our case is
94:42 - dot because we want to copy all the
94:44 - files from the current folder and the
94:47 - destination will be the destination
94:49 - inside
94:50 - the file system of your docker image in
94:53 - our case it's gcc so in gcc base image
94:57 - file system you will find
95:00 - this
95:01 - path which already exists there so you
95:04 - can just write user forward slash
95:07 - src which is already there inside the
95:11 - file system of gcc base image okay
95:15 - so
95:15 - as i said
95:17 - this command is going to copy all the
95:19 - files which are there in your local
95:22 - directory to
95:24 - this
95:25 - directory inside your docker image okay
95:29 - now if you want to copy some specific
95:31 - file then you can
95:33 - do this also you can just write main dot
95:36 - cpp and then you can copy a specific
95:40 - file into uh the folder which
95:44 - should already exist inside
95:47 - your
95:48 - image which you are using right so for
95:51 - now for simplicity i would just want to
95:53 - copy all the files from the color
95:55 - current directory to user forward slash
95:58 - source forward slash
96:00 - the directory which we are going to
96:02 - create so let's say we want to create
96:04 - this directory where we want to copy all
96:06 - the files cpp test let's say so this
96:09 - path already exists in the file system
96:12 - and this is the folder name which we
96:14 - want to create and copy our local files
96:18 - to this folder
96:19 - in the docker image right now we are
96:22 - going to define the work directory so
96:26 - we can just use this work there keyword
96:30 - to define
96:31 - the
96:32 - working directory in which you want to
96:35 - work now okay so because we want to
96:40 - work inside this directory because we
96:42 - are copying our c plus file inside this
96:45 - directory we are going to set our work
96:48 - directory as this one that means when
96:51 - you run any command it's going to run
96:55 - inside this directory which you set as
96:58 - work directory
96:59 - now in the next step i want to run
97:02 - the command which will compile the c
97:05 - plus plus program using this main.cpp
97:09 - so now i can just give the g plus plus
97:12 - command then hyphen o as the flag and
97:17 - let's say i want to name my binary as
97:19 - test
97:20 - and the file name which i want to
97:22 - compile is main
97:24 - dot cpp so this run command is going to
97:27 - compile my c plus program inside my cpp
97:31 - test directory under user source folder
97:35 - right
97:36 - now in the next step i'm going to give
97:38 - the command using cmd
97:41 - which will be the command which i want
97:42 - to run inside the container so
97:45 - this is going to run the program output
97:48 - from the previous step
97:50 - into our container so this works like
97:53 - this as you have already seen in the
97:55 - last video also so if you want to run
97:57 - your binary you can just give dot
97:59 - forward slash and the name of your
98:01 - binary which is test right so this
98:04 - binary is going to be uh run
98:07 - using this cmd command inside our
98:10 - container so that's it that's how you
98:12 - can create this docker file to compile
98:15 - your c plus program and run it now let's
98:18 - build our docker file to create an image
98:21 - for that you can just give sudo
98:24 - docker
98:25 - then your build command so
98:28 - build and then the build context and
98:31 - then you can provide hyphen t to provide
98:33 - the name of your image i am going to
98:36 - name my image as cpp underscore
98:40 - test for example and then you can also
98:43 - give the tag to your image let's say i
98:46 - want to provide the tag one to my image
98:49 - okay so this is going to create a docker
98:53 - image using the docker file so you can
98:55 - see it has pulled the base image in the
98:58 - first step then copied our files from
99:01 - the local directory to the directory
99:03 - which we have defined
99:05 - and then
99:06 - it has set the work directory and then
99:08 - in the next step it has compiled our c
99:10 - plus program and in the last step
99:14 - we
99:15 - have set the
99:17 - test binary to run when we run our
99:19 - container so now let's list out all the
99:22 - images you can just give
99:25 - docker images command for that and you
99:27 - will see that this repository is created
99:30 - about a minute ago
99:33 - and this is the image id for that image
99:36 - right
99:37 - so now we want to run our
99:40 - container using this image so for that
99:43 - we have seen in the last video we can
99:45 - give sudo
99:47 - docker
99:48 - run command
99:49 - and then i'm going to give the hyphen
99:51 - hyphen rm flag and this rm flag causes
99:56 - docker to remove automatically the
99:58 - container if it already exists so if the
100:01 - container which we are going to run
100:04 - already exists then it's going to remove
100:07 - that container and then it's going to
100:10 - re-run that container so this command is
100:13 - handy when you want to just run only one
100:16 - container at a time and then i'm going
100:19 - to give this i t flag with hyphen so i t
100:22 - flag
100:23 - for running this container in the
100:25 - interactive mode and then your
100:29 - image so you can give this image name
100:32 - cpp test here or image id also you can
100:35 - give so i am going to give the image
100:38 - name which is cpp underscore test with
100:41 - the tag so tag we have provided is one
100:45 - okay so here as i said you can give the
100:48 - image id or the repository name and the
100:52 - tag and then when you run this
100:54 - docker container it's going to print
100:57 - hello docker container that means we ran
101:00 - the test binary inside our docker
101:03 - container right now as i said you can
101:06 - change this tag instead of latest you
101:08 - can choose the version of gcc you want
101:12 - to use for compiling and running your c
101:14 - plus programs so that's why this docker
101:18 - and docker containers will help you to
101:21 - just cross compile in cross platform
101:23 - applications now let's say you want to
101:25 - compile your c plus plus program using
101:28 - the c lag compiler instead of gcc
101:32 - okay so we want to compile our program
101:35 - using c lag compiler instead of gcc so
101:38 - let me clear this terminal and let me go
101:42 - one
101:43 - directory up here and i'm going to
101:45 - create a new directory so i'm going to
101:47 - just write mkdir
101:49 - d3
101:51 - and inside this d3 directory what i want
101:54 - to do is i want to just have the same
101:58 - cpp file so i will just copy this cpp
102:01 - file into the d3 uh directory also
102:04 - and then we are going to create a docker
102:08 - file inside this d3 directory so let's
102:11 - create this docker file here
102:14 - so now let's move to the docker hub
102:17 - website and let's search for c lang if
102:19 - we have something related to c lang
102:23 - compiler on docker or not so i'm going
102:25 - to just write c lang here
102:27 - and
102:28 - as i remember there is no official a
102:31 - base image for c lang on the docker hub
102:35 - so what we can do
102:37 - we can use the base images we already
102:39 - have on our system and then we can
102:42 - install the c lang compiler on that
102:45 - base image so i'm going to just give
102:48 - this sudo
102:50 - docker images command and from
102:53 - these images let's say we will use this
102:56 - ubuntu latest or ubuntu 20.04 to compile
103:00 - our
103:01 - c plus program inside the ubuntu base
103:03 - image using the sealang compiler okay so
103:08 - what i'm going to do is i'm going to
103:10 - just
103:11 - write this kind of docker file i'm going
103:14 - to explain you all the steps one by one
103:17 - so we want the base image ubuntu with
103:20 - the tag latest because we already
103:22 - have downloaded or pulled this image in
103:26 - the previous videos so we don't need to
103:29 - pull it once again
103:30 - now in the next step i'm running apt get
103:34 - y update and app get install update to
103:39 - update apps on the base image so that's
103:42 - what you do when you want to install
103:45 - any
103:46 - software on your ubuntu operating system
103:49 - so this command is going to update the
103:52 - apps on the base image now in the next
103:54 - step using this apt get hyphen y install
103:58 - c lang command we want to install c lang
104:02 - on our base image which is ubuntu right
104:05 - the next step are relatively easier
104:08 - because we have seen these steps in the
104:12 - other docker files also so we want to
104:14 - copy
104:15 - all the files in the current directory
104:18 - into this directory
104:20 - inside our base image
104:23 - and then we want to set the work there
104:26 - which is the same where we have copied
104:29 - our c plus plus files
104:31 - and then
104:32 - to compile your c plus program using c
104:36 - lang you can just replace the gcc with c
104:39 - lang plus plus and the rest of the
104:43 - command will look like same as you have
104:45 - seen in the case of gcc also so you can
104:48 - see g plus plus hyphen node test main
104:51 - dot cpp and here also you can give this
104:55 - command the only thing i want to change
104:57 - here is the main dot cpp the file name
105:01 - here okay
105:02 - because our binary name is test we are
105:04 - going to just run this binary using this
105:07 - command so
105:09 - this is going to run inside our
105:11 - container okay in the d3 folder i have
105:14 - created this docker file to compile my c
105:17 - plus plus program using c lag and i'm
105:20 - going to run this now so let me clear
105:23 - the terminal once again so now let's
105:25 - build our docker image using this docker
105:28 - file so for that i need to go inside the
105:31 - d3 directory and then i'm going to give
105:34 - the
105:35 - docker
105:37 - build command with the context or in the
105:40 - current directory
105:42 - and then hyphen t to give the name of my
105:47 - image so let's say i want to give the
105:50 - name to my image as c lang
105:52 - underscore cpp and the version or the
105:55 - tag which i want to provide here is
105:57 - let's say 1.0.0
106:00 - okay
106:00 - so let's build our image using this
106:02 - command
106:04 - so now as you can see the build of this
106:06 - image is successful
106:08 - with the name c lang underscore cpp and
106:11 - the tag 1.0.0
106:14 - so let's run the container for this
106:16 - image using the docker run command so
106:18 - i'm going to just provide
106:21 - sudo
106:22 - docker
106:24 - run
106:25 - oops by mistake i pressed ctrl c that's
106:28 - why it break so let me just give this
106:31 - command once again and then give this
106:34 - image name with the tag
106:37 - 1.0.0 so we want to run our container
106:40 - using this image so let's press enter
106:43 - now
106:45 - and as expected we see hello docker
106:49 - container that means
106:51 - we successfully ran this binary file
106:56 - which is compiled using clang
106:59 - in our container and the output is
107:02 - printed
107:03 - now let's say you want to change
107:05 - something in the output so instead of
107:08 - let's say hello docker container i just
107:10 - want to print hello
107:12 - world here okay so i will just save this
107:17 - program and then i can just build it
107:20 - again but this time i will build it with
107:24 - the different tags so let's say i just
107:26 - did the miner change so i will just
107:29 - change the tag as
107:31 - 1.0.1 so let's build this image which is
107:35 - going to be built really fast and now
107:38 - let's run this image
107:40 - using this docker run command but don't
107:42 - forget to change the tag because i have
107:45 - changed the tag for the image also to
107:49 - 1.0.1 so here also i'm going to change
107:52 - the tag for the image and then press
107:54 - enter which is going to run this program
107:56 - and it prints hello world so how simple
108:00 - is this
108:01 - so this is how you can compile and run
108:04 - your c plus plus programs using docker
108:07 - containers
108:09 - so as i said i just wanted to give you a
108:12 - real world example same thing you can do
108:14 - for your
108:16 - java programs or any other programs
108:19 - which you want to run in different
108:21 - environments in this video we are going
108:23 - to see how we can
108:25 - do port mapping between your docker
108:27 - container and your host machine so let's
108:31 - say you have some kind of a server
108:34 - and that server listens on
108:37 - some particular port
108:39 - so
108:40 - you
108:41 - need to expose your
108:44 - port from your docker container so
108:47 - the outer world will be able to
108:50 - interact with your server
108:53 - so in this video we are going to take an
108:55 - example of a node js server the same
109:00 - concepts you can
109:02 - apply on any other kind of server it can
109:05 - be a nginx server it can be a python
109:08 - flask or django server or any other kind
109:12 - of server so let's start with our
109:14 - example of dockerizing our node.js web
109:18 - app
109:19 - so what i'm going to do is i'm going to
109:23 - just create a new directory for me so
109:26 - i'm going to just write mkdir
109:30 - d4
109:31 - and then i'm going to go inside that the
109:35 - 4 directory
109:36 - and here i'm going to create a new node
109:40 - js app so for initializing my app i'm
109:43 - going to just write npm
109:46 - init
109:47 - and then hyphen y and then press enter
109:50 - which is going to create
109:52 - a
109:53 - package.json file inside my d4 folder
109:57 - now for this node.js server i will be
110:01 - using express so i need to install
110:04 - express locally
110:06 - for this app
110:08 - so if you already know something about
110:11 - node.js or
110:13 - npm you can easily install
110:17 - the npm package using npm
110:20 - ins tall and the package name in our
110:24 - case it's uh express which is a very
110:27 - popular
110:28 - node.js package or npm package so i'm
110:32 - going to just write express here
110:35 - and then i'm going to give this save
110:38 - flag here so it's going to be installed
110:41 - inside my directory and
110:44 - this express will be added a as the
110:46 - dependency in my package.json file
110:50 - so let me uh press enter which is going
110:53 - to install this express
110:55 - package
110:57 - in my
110:58 - directory you can see this new directory
111:01 - is created which is node modules and
111:04 - this new dependency is added in my
111:09 - package.json which is express so now
111:11 - let's create our server.js file so if
111:15 - you can see in our
111:17 - package.json file uh the main entry
111:20 - point right now is the index.js you can
111:24 - change it to
111:26 - server.js
111:28 - and let's create this
111:30 - server.js
111:32 - file
111:34 - server.js here and then press enter
111:37 - which is going to create this
111:39 - server.js file so we are going to write
111:42 - a very simple
111:44 - node.js code which is going to use
111:47 - express
111:48 - and it's going to just print hello world
111:50 - whenever somebody uh will
111:54 - make a get request to this server
111:57 - so i'm going to just uh
112:00 - copying and pasting this code because
112:02 - this code
112:03 - is available everywhere and it's very
112:06 - simple so what i have done i have just
112:09 - imported
112:11 - this express
112:13 - and then i have created these two
112:14 - variables one is the port variable which
112:17 - will be exposed
112:20 - via a browser or
112:22 - via the rest request
112:25 - and then we have the
112:27 - host here which is basically the local
112:30 - host
112:31 - and we have one get request here so
112:34 - whenever somebody makes a get request to
112:37 - the server we are going to just send
112:39 - hello world so very simple uh node.js
112:42 - server code and we are going to run this
112:45 - code let me clear this terminal so i'm
112:48 - going to just write node and the name of
112:51 - my server file which is
112:54 - server.js and when i just run this
112:58 - server.js using node.js
113:00 - it's running like this and it's printing
113:03 - uh on which
113:05 - host and ports it's running so let's
113:08 - open our browser and we are going to
113:11 - just
113:12 - open this url which is
113:15 - 0.0.0.0
113:17 - colon the port number on which we have
113:19 - started this node.js server and i'm
113:23 - going to just press enter and it just
113:26 - prints hello world which is the expected
113:28 - result right
113:30 - so now we want to dockerize our node.js
113:35 - server
113:36 - so let's see how we can dockerize our
113:38 - node.js server so for that i'm going to
113:40 - just
113:42 - close this app or stop this app and now
113:46 - i'm going to create a new docker file so
113:49 - let's just create this docker file by
113:52 - just
113:53 - giving this command which is touch
113:55 - docker file
113:57 - now i'm going to go inside my docker
113:59 - file
113:59 - and here inside my docker file i'm going
114:03 - to use the node base image so when you
114:07 - go to the docker hub there is an
114:10 - official
114:12 - base image for node.js and that's what
114:14 - we are going to use so i am going to
114:16 - just write from
114:18 - and the base image will be node
114:20 - and the version of node we are going to
114:23 - use is version 12. so you can use the
114:27 - latest tag also here which is going to
114:30 - give you the latest version
114:32 - now in the next step i'm going to define
114:35 - the working directory using
114:37 - the
114:38 - work their
114:40 - keyword
114:41 - and we are going to
114:43 - define this work there in the
114:47 - user forward slash src for slash
114:51 - app folder
114:53 - and now this should be work data right
114:57 - so
114:58 - like
115:00 - this
115:01 - okay
115:02 - so we have defined our working directory
115:04 - inside this working directory we are
115:06 - going to uh copy our code and then we
115:10 - are going to do all the stuff
115:13 - now uh let's copy uh all the files which
115:17 - are there in our
115:19 - current folder
115:21 - to this docker image so we are going to
115:24 - use the copy keyword to copy uh all the
115:28 - files but first of all we need to copy
115:31 - the
115:32 - package.json
115:34 - to the container so that we will be able
115:37 - to run the npm install command and npm
115:41 - install command what it does it just
115:44 - installs all the dependencies
115:47 - into uh our container right so let's
115:51 - first of all copy
115:53 - the package dot json file so we are
115:56 - going to copy uh the package log dot
115:59 - json file and package dot json file so
116:03 - these two files are responsible for all
116:06 - the dependencies to this directory right
116:10 - so now we have copied the package
116:13 - json files
116:15 - so next step is to install all the
116:17 - dependencies using npm install so you
116:21 - can just give this command run npm
116:25 - ins tall
116:27 - now if you are uh
116:29 - working in the production environment
116:32 - this command can be a little bit
116:34 - different let me just write this in the
116:36 - form of comment so you can just write
116:39 - run
116:40 - and npm ci
116:43 - and then you can give this
116:46 - only production flag production okay so
116:50 - if you are working in the production
116:51 - environment you can give this command if
116:54 - you are working in the development
116:56 - environment then you can just do uh this
116:59 - command so npm install will install all
117:02 - the dependencies and in our case there
117:05 - is only one dependency which is
117:08 - express right so via this npm install
117:11 - this express npm package will be
117:14 - installed
117:15 - in our uh docker image
117:17 - now
117:19 - in the next step once uh all the
117:22 - dependencies will be installed we are
117:24 - going to just copy all the files uh
117:28 - which are there in our server code so we
117:31 - only have
117:32 - this one file which is server.js but
117:35 - let's say you have
117:37 - many modules and many files inside your
117:41 - node.js projects so i'm going to just
117:44 - write copy
117:45 - and then i'm going to
117:47 - copy all the
117:49 - files and folders which are there in the
117:51 - current directory okay
117:54 - now next step is important and this step
117:59 - is we are going to expose
118:02 - our port so i'm going to just write
118:05 - expose
118:07 - and we are going to expose the port
118:10 - which
118:11 - we are using in our server so we are
118:13 - using
118:14 - uh port 8080 in our server so we are
118:17 - going to expose this port this means
118:20 - that we want to expose port 8080
118:23 - into our docker container so this
118:27 - exposed keyword means that we want to
118:30 - expose port 8080 from our container to
118:34 - the outside world for example to our
118:37 - host machine
118:39 - and this expose is a way of documenting
118:42 - so it's not going to publish your port
118:47 - at runtime
118:48 - it's just a way of documenting in your
118:52 - docker file that you intend to expose
118:56 - this port 8080
118:58 - in
119:00 - your docker container so exposing port
119:04 - using this exposed keyword is a way of
119:07 - documenting
119:08 - which port are used but
119:11 - it does not actually map or open any
119:14 - port we are going to open
119:17 - and map the port using
119:19 - the docker run command and we are going
119:22 - to use a different flag for
119:25 - publishing our port or opening or
119:28 - mapping our port later when we just
119:32 - build and run our our
119:34 - docker con now the next step here will
119:38 - be to run our node.js application and we
119:42 - all know that we just need cmd
119:46 - and then inside our square brackets we
119:48 - will just write npm
119:50 - and then we are going to just give this
119:53 - comma and then we are going to give the
119:56 - name of our server.js file so
120:00 - this will be server
120:02 - dot
120:03 - js
120:04 - now here one interesting point to note
120:07 - here is when we are going to copy uh all
120:11 - the files
120:12 - and folders from our current directory
120:15 - uh
120:16 - to the docker image you can see i have
120:19 - used dot dot that means it's going to
120:22 - copy node modules also into your docker
120:27 - image and we have already installed our
120:30 - node packages using this npm install so
120:34 - this is going to overwrite
120:37 - this node modules folder from
120:40 - your
120:42 - image right so to avoid copying your
120:45 - node modules
120:47 - into your docker image you can create a
120:51 - docker ignore file so this docker ignore
120:54 - file is going to prevent your local node
120:57 - modules or your debug logs from being
121:01 - copied into your docker image so let's
121:04 - uh
121:05 - just create this docker ignore file so
121:09 - to create uh this docker ignore file you
121:12 - can just write
121:14 - touch
121:15 - dot docker ignore
121:18 - in the same format which i have used so
121:21 - this format is recognized by docker and
121:26 - whatever
121:27 - you
121:28 - write inside this docker ignore a file
121:30 - so let's create this docker ignore file
121:32 - first of all so we have created this
121:34 - docker ignore file and we want to
121:37 - exclude
121:38 - the
121:39 - npm
121:40 - modules and npm debug.log
121:45 - file
121:46 - from copying into our image so this
121:49 - means that we have added
121:51 - npm modules and the
121:54 - npm debug log file
121:56 - uh which will be excluded when we are
121:59 - going to copy the files
122:01 - from
122:02 - our local container to the docker image
122:05 - okay
122:06 - so this will avoid the overwriting of
122:08 - our
122:09 - npm modules now we are done and we can
122:13 - build our image so let me
122:16 - clear this terminal so now let's build
122:18 - our image
122:19 - by giving the docker build command so
122:22 - i'm going to just write sudo
122:24 - uh
122:25 - docker
122:27 - build
122:28 - hyphen t
122:30 - and then the image name so let's say i'm
122:33 - going to just give the name
122:35 - node underscore
122:37 - test
122:38 - colon the tag you can give any tag to
122:42 - your image so let's
122:43 - say i am going to give
122:46 - 1.0.0 or tag to my image
122:49 - and then the context and then press
122:52 - enter which is going to just build this
122:55 - image
122:56 - and in few seconds
122:58 - this image will be created so let me
123:02 - clear this terminal once again and let's
123:05 - list out all the images so sudo
123:09 - docker
123:11 - images
123:12 - and when you see here our
123:15 - docker image is created with the tag
123:18 - 1.0.0
123:20 - 15 seconds ago okay
123:23 - so now we are going to run our container
123:26 - so to run our container we can just use
123:30 - a sudo
123:31 - docker
123:32 - run
123:33 - so as i told you we want to expose this
123:35 - port 8080
123:37 - so that
123:39 - this server can listen to the request
123:41 - from
123:42 - the outside the container right so in
123:45 - order to map
123:47 - the port we use
123:49 - the flag which is called hyphen p which
123:52 - is also called publish
123:55 - and hyphen p is a way of mapping a host
123:59 - port to a running container port
124:03 - so this is our running container port
124:06 - and let's say we want to uh map
124:09 - this port which is running inside the
124:11 - container
124:13 - to
124:14 - our
124:14 - local
124:16 - host machine
124:17 - and we want to let's say give the
124:20 - port 3000 in our local host machine and
124:25 - which is going to be mapped to port 8080
124:29 - so if you specify this expose
124:33 - the port and if you specify this publish
124:36 - flag to map the ports then the service
124:39 - in the container is accessible from
124:42 - anywhere even outside the docker so this
124:46 - means that we want to expose port 8080
124:50 - from our container to the port 3000
124:54 - inside our
124:56 - host machine and now let's give the name
124:59 - of our
125:00 - image which we want to run which is node
125:03 - underscore test
125:05 - colon
125:07 - 1.0.0 okay and let's
125:10 - run this docker container and this gives
125:13 - me error and the error is obvious
125:16 - because instead of using npm i should
125:20 - have used node okay because we have
125:23 - started our server using node command
125:26 - not npm npm we used just for installing
125:30 - our packages and managing our packages
125:32 - right so let's rebuild our image once
125:35 - again
125:36 - and once our image is
125:38 - rebuilt we are going to just run our
125:41 - container
125:42 - so now our container is running and we
125:45 - can see the same output
125:47 - now
125:48 - we might be confused or you might be
125:51 - confused that we are exposing uh the
125:54 - port 8080 and when we
125:57 - go
125:58 - on this url
126:00 - on our browser so let's go to this url
126:03 - on our browser and let's see if it works
126:05 - or not so it's not going to work because
126:08 - we have mapped the port 8080 to the port
126:13 - 3000 on our local machine so this is
126:17 - the port
126:18 - on
126:19 - the container on your docker container
126:22 - and this is the port which uh it'll
126:25 - listen on your local machine so we want
126:28 - to listen
126:29 - on port 3000 on our
126:32 - host machine so instead of port 8080
126:36 - you can give
126:37 - port 3000 and it's going to print hello
126:40 - world
126:41 - right this is how this uh port mapping
126:44 - work so this will be the port
126:48 - which will be available on your local
126:51 - host and this is the port you have
126:54 - exposed inside your docker container so
126:58 - let me just stop this container so i'm
127:01 - going to go to the next terminal and i'm
127:04 - going to just write
127:06 - sudo
127:07 - docker ps to list out all the
127:11 - running
127:12 - containers and this container is running
127:15 - so i'm going to just use the
127:17 - container id from here just copy the
127:19 - container id and then sudo
127:22 - and then the container id which is going
127:25 - to stop this container now this
127:28 - container is stopped and you can see
127:32 - in this terminal also
127:34 - that we are out of the container right
127:38 - so now let's say let me just uh clear
127:40 - this terminal and now let's say we want
127:44 - to map to the port 8080 itself on our
127:48 - host machine also
127:50 - from our
127:51 - docker container so this is the port on
127:54 - the docker container
127:56 - and we want to map this port to the same
127:59 - port on our host machine if it's
128:01 - available then it's going to run fine so
128:04 - let's run this command
128:06 - and now this time
128:08 - when you go to the browser
128:10 - on port 3000 obviously you will not get
128:13 - anything because we have mapped uh the
128:16 - port 8080 to our
128:19 - host machine now
128:21 - and now when you give
128:23 - port 8080 it's going to give you hello
128:25 - world
128:26 - if you want to run this server in the
128:29 - detached mode as i have told you you can
128:32 - use hyphen d
128:33 - so that this node.js will run in the
128:36 - detached mode that means
128:38 - it will run in the background
128:40 - so this is how you can expose
128:43 - the http port you can also expose the
128:47 - tcp port and the udp port from your
128:51 - docker container so let me uh just stop
128:54 - this container so i'm going to just
128:58 - stop this container first of all
129:00 - and let me show you how you can expose
129:02 - the udp and the tcp
129:05 - ports so let's say you are running uh
129:09 - application
129:10 - and in this application you are doing
129:13 - some tcp communication or the udp
129:16 - communication so for mapping the tcp
129:19 - port
129:20 - and the udp port you uh can use
129:24 - the flag hyphen p
129:26 - and then
129:27 - you can use this kind of notation
129:30 - so the port which you want to expose
129:33 - from your container let's say i'm just
129:35 - exposing port 80 and forward slash tcp
129:39 - so in case you want to expose the tcp
129:42 - port you just need to uh write forward
129:45 - slash tcp after
129:48 - the port which you want to expose from
129:51 - your container and this will be the port
129:54 - uh you want to expose
129:56 - to the
129:57 - host machine so this port will be
129:59 - available on your host machine um from
130:04 - this port to your container so this is
130:06 - the mapping right for udp you just write
130:09 - forward slash udp right so the flag is
130:14 - hyphen p
130:15 - you just need to
130:16 - write forward slash
130:18 - tcp or forward slash udp to expose the
130:21 - udp or the
130:24 - tcp flag you can expose multiple ports
130:27 - also by using this hyphen
130:30 - p flag so it's not
130:33 - that you just can use only one
130:36 - hyphen p flag you can use multiple
130:39 - hyphen p flags to expose multiple
130:42 - ports from your container to the
130:46 - host machine
130:48 - so this is how port mapping works in a
130:51 - docker i hope you haven't understood
130:53 - this concept so in this video we are
130:56 - going to talk about docker hub
130:58 - so what is docker hub so docker hub is a
131:02 - service provided by docker for finding
131:04 - and sharing your container images with
131:07 - your teams or with the general public
131:11 - so as you can see i'm on this website
131:14 - which is hub.docker.com
131:17 - and here i can sign in at the time of
131:20 - downloading the docker on your operating
131:24 - system you might have created
131:26 - a docker id for you and the password for
131:30 - you so you can log in with that docker
131:32 - id and password so once you are signed
131:34 - in with your docker id and password you
131:38 - will be able to see this kind of
131:40 - web page here
131:41 - you have this explore option where you
131:44 - can explore
131:46 - all the
131:47 - other repositories you have this
131:50 - repository option and under this
131:52 - repository option you will be able to
131:55 - see and manage your repositories which
131:58 - you have created and which you have
132:01 - pushed into your docker registry here
132:05 - you also have the option for
132:06 - organization
132:08 - which we are not going to cover in this
132:10 - video and also you have all these
132:13 - general uh
132:15 - account related uh stuff here right
132:18 - now let's talk about the pricing a
132:21 - little bit
132:22 - so you can see uh for public repository
132:25 - docker hub is absolutely free and that's
132:28 - what we are going to uh be using
132:31 - but if you are working in an
132:33 - organization or you want to create some
132:36 - private
132:38 - repositories for your docker images then
132:41 - you can
132:42 - choose one of these options which are
132:45 - provided here
132:46 - also it's not necessary that you need to
132:49 - use docker hub
132:51 - as a docker registry
132:53 - you can create a docker registry you
132:56 - have this documentation which you can
132:58 - use to create a docker registry i know
133:02 - uh google cloud provide a docker
133:05 - registry or a github nowadays also
133:08 - provide these kind of docker registries
133:10 - so you can create your own registry if
133:12 - you want you don't need a docker hub for
133:16 - just managing your images right so right
133:19 - now you can see i don't have any image
133:22 - on my docker hub account so to start
133:25 - with i have this very simple uh docker
133:28 - file which i want to convert to the
133:31 - docker image and then i want to push
133:33 - that image to my docker hub registry
133:38 - so let me list all the docker images on
133:40 - my operating system right now i don't
133:42 - have any image so let's uh build one
133:46 - image so i'm going to just write
133:48 - pseudo docker
133:51 - build
133:52 - dot hyphen t and the name of the image
133:54 - i'm going to just name my image as hello
133:57 - and then press enter
133:59 - which is going to just create this image
134:04 - i have this hello world image which is
134:06 - created five seconds ago right
134:09 - so now let me just also quickly
134:12 - run this image to see everything is
134:14 - working so i'm going to once again write
134:18 - sudo docker
134:19 - run
134:20 - hyphen hyphen rm
134:23 - hyphen
134:24 - it and the name of the image which is
134:28 - hello and then press enter and it prints
134:31 - the content of my
134:34 - main.cpp that's what it's doing so
134:37 - that's a very basic minimal image the
134:40 - size is very small that's why i have
134:43 - done this
134:44 - and once you have all these images let
134:46 - me just clear the terminal
134:49 - and then let me just move this terminal
134:51 - a little bit up and let's just list all
134:54 - the images once again
134:56 - so now i have this image hello and i
134:59 - want to push this image to my docker hub
135:02 - registry so in order to push this image
135:05 - first of all you need to log in with
135:07 - your docker
135:09 - id into your
135:11 - docker terminal most probably you are
135:13 - already logged in but if you are not you
135:16 - can just give this command which is
135:19 - sudo
135:20 - docker login
135:23 - and if you want to log out then you can
135:25 - just write log out here right so let's
135:29 - give this command which is a pseudo
135:31 - docker login and then give your username
135:34 - here i'm going to provide my username
135:37 - and then you need to provide your
135:39 - password so let me quickly provide my
135:42 - password and then press enter
135:44 - which is going to log me in the docker
135:48 - so you can see login succeeded and now i
135:52 - can just push my images to my docker hub
135:55 - registry so first thing we generally do
135:58 - in order to push the
136:00 - image to the registry is we just tag it
136:03 - so we can give this command which is a
136:06 - docker and then tag
136:09 - and then the name of your image my image
136:12 - name is hello you can also take the
136:14 - image id
136:15 - and then give the space and then give
136:18 - some tag to your image
136:21 - so right now because i want to push my
136:25 - uh
136:26 - docker image to this docker hub account
136:29 - and which has the username codebind
136:32 - i will just first of all write code
136:35 - bind here and then forward slash and
136:38 - then you can give the name of your image
136:40 - i will just leave it as hello and then
136:43 - you can give the tag of your image so
136:46 - i'm going to just
136:47 - give the tag
136:49 - 1.0.0
136:50 - so this tag is useful whenever you want
136:54 - to just let's say keep working on your
136:57 - image and
136:58 - you want to update the image
137:01 - and want to just version your image
137:05 - into multiple versions so you have the
137:08 - track of all these versions
137:10 - right so i'm going to just tag my image
137:13 - i'm going to press enter and then i will
137:16 - once again list all the images and now
137:18 - you can see i have this
137:21 - image with the this name and i have the
137:24 - tag 1.0.0 right
137:27 - now once you do that you are ready to
137:29 - push your image to the docker registry
137:32 - the command is very simple sudo
137:35 - docker
137:36 - push and the name of your docker file
137:40 - which is
137:41 - codebind forward slash
137:43 - hello in my case you also need to give
137:46 - the tag here 1.0.0
137:50 - and then you can just press enter which
137:53 - is going to push your image to your
137:56 - docker hub registry
137:58 - so just wait for some seconds
138:03 - and you can see it's pushed so i'm going
138:06 - to go to my
138:09 - docker hub
138:10 - web page and then refresh this web page
138:14 - and now i can see this
138:17 - image which is available here and also
138:20 - you will be able to see that this image
138:22 - is a public image so
138:25 - it's not private so anybody on docker
138:28 - can see your image right
138:31 - also when you click on this image
138:34 - you will be able to see more information
138:37 - about the image so here you can give
138:39 - that little description for your image
138:42 - and also you can even write the readme
138:44 - for your image uh what it's doing and
138:48 - what's the purpose of this image right
138:51 - so here is the general information about
138:53 - the image you can also see this tags uh
138:57 - section where you will be able to see uh
139:00 - the tags related to your image i only
139:03 - have one tag here and the size of this
139:07 - image is around
139:09 - 746 kilobyte right
139:12 - and also you can see how you can pull
139:14 - this image so you can just pull this
139:16 - image using docker pull
139:18 - codebind forward slash hello and then
139:22 - you need to use this tag you can just
139:24 - copy this and then pull this image also
139:27 - also you have the build section this is
139:30 - for the automation so if you are using
139:32 - github or bitbucket
139:35 - automation system then you can directly
139:37 - push your image from the github or
139:40 - bitbucket into your docker registry you
139:43 - also have the collaborator tab and then
139:46 - webhooks also and then you have the
139:49 - settings related to your
139:52 - docker image right so you can make it
139:54 - private if you want
139:56 - and also you can delete your image from
140:00 - this section right so let's say i just
140:02 - want to pull this image i will just copy
140:04 - this text
140:06 - and then i will just uh write sudo and
140:09 - then paste uh this test text uh which i
140:12 - have copied which is uh docker pull and
140:15 - the
140:15 - name of my image with the tag and it's
140:18 - going to pull this image if it's already
140:21 - not there on your operating system so
140:25 - this was the simple demonstration using
140:27 - which you can
140:29 - create your images and then push your
140:31 - images to the docker hub and then manage
140:34 - your images using the docker hub
140:37 - so i hope you've enjoyed this video and
140:38 - i will see you in the next video

Cleaned transcript:

so first of all what is docker so docker is an open source project that automates the deployment of applications inside software containers by providing an additional layer of abstraction and automation of operating system level virtualization on linux so that is the definition which is available on wikipedia but really what is docker so docker provides a uniformed wrapper around a software package and this wrapper is called docker container which you can ship or build and inside these containers you can run any app anywhere now docker containers are similar to shipping containers now as you all know in the shipping container the container size is always same regardless of the content inside the container so these container can fit on all trucks or ships or trains regardless of the content inside the container in a same way docker packages a software into standardized unit for development shipment and deployment so let me give you a real world example so let's say i developed a node.js application which depends upon some version of node.js and it uses some database and it's dependent on some shared library let's say and i want to give this software to the devops guy or let's say to my colleague to run it on his computer or on the qa system or on the cloud by devops or in the production system so i don't really care where it runs i just care that it should run when somebody tries to run my software now if docker is not present or any containerized system is not present the normal procedure will be that i give my software to my colleague or the devops guys and he has to install all the dependencies and for example node.js version and the database system exactly like a system on which i have tested my software now if you will just use docker to containerize your system you just need to package your system into a docker container and you can just give this docker container to your colleague or the devops guys and he will just run this docker container on the cloud or a qa machine or any other production system wherever he wants to run it and he can just run your software without worrying about all the dependencies or the environment setup which your software depends upon so nowadays docker is becoming more or less a standard for the containerizing systems and you can find the docker containers everywhere on linux operating system or windows operating system or in the data center cloud serverless application and so on now let's compare docker container versus virtual machines so containers and virtual machine have similar resource isolation and allocation benefits but docker containers and virtual machine functions differently because containers virtualize the operating system instead of hardware and containers are more portable and efficient so when you talk about virtual machines you can see this diagram on the right hand side so virtual machines or vms are an abstraction of physical hardware turning one server into many servers and it is made possible by the hypervisor which allows virtual machines to run on a single machine so each virtual machine or vm includes full copy of operating system so let's say this is your server and on this server you have your hypervisor and on top of your hypervisor you can run different virtual machines so this is virtual machine one virtual machine 2 virtual machine 3 which have this operating system 1 operating system 2 and operating system 3 or you can have the similar operating system in all the three virtual machine let's say now the important thing to note here is each virtual machine includes full copy of operating system the application necessary binaries and the libraries which takes up to tens of gb's of memory and that is the reason that virtual machines can be slower now on the other hand in the container and you can see on the left hand side this diagram so containers are an abstraction on the app layer that packages the code and dependencies together so you have your server and then you have your host operating system and then on top of your host operating system you can run your docker engine and the containers are the abstraction at the app layer that packages the code and dependencies together so multiple containers can run on the same machine and share the same os kernel with other containers but each container runs as isolated process in the user space as a result container takes less space than virtual machine and usually container images typically takes tens of megabytes in size in comparison to the virtual machine which which can take up to let's say several gbs of memory also containers can handle more application and require fewer virtual machines and operating system now when we talk about docker containers versus virtual machines the idea is to use containers and virtual machines together so the containers and the virtual machines can be used together which provides a great deal of flexibility in deploying and managing your apps now let's talk about the docker architecture so whenever you will install docker the docker engine will be installed on your system so docker engine will contain docker cli docker daemon and the docker registry now there is something called docker hub which is a cloud based service where you can share your applications automate the workflow and assemble apps for the components now when you talk about docker two things are really important and these are docker images and docker containers so first of all what is docker container so a container is a standard unit of software that packages up your code and it's all dependencies so the application runs quickly and reliably from one environment to the other environment now when you create your docker container which is essentially a unit of your software it can run everywhere regardless of the kernel version regardless of the host distro the only condition is that the container and the host architecture must match and you can run anything inside your containerized solution so if it can run on your host then it can run on your container that is if it runs on a linux kernel it can run now let's talk about docker container images so a docker container image is a lightweight standalone executable package of software that includes everything needed to run the application that is code your runtime your system tools and the system libraries and the settings so the container images becomes container at run time and in case of docker containers images becomes containers when they run on docker engine so images turns into container when these images runs on your docker engine now it's important to note that your docker image is not a virtual hard disk or vhd it's not a file system it uses union file system and it's only a read only layer also the docker images doesn't have any state so when your docker images runs as docker container inside the docker engine and when you stop these running containers these images will not have or will not save any state so they are stateless so basically an image is a tar file which has a hierarchy and an arbitrary depth and that's how it fits into your docker registry for example docker hub or any private docker registry so this was a brief introduction about docker in this video we are going to see how we can download and install docker on our windows 10 operating system so let's get started first of all open your favorite browser and search for docker but before installing docker desktop application on our windows operating system let's see what are the system requirements for installing this application so before going to the docker.com website i'm going to search on my browser install docker windows which will open this link from dot docs.docker.com forward slash docker for windows and this link i'm going to put in the description of the video also so you can also see all the description here and from here you can click this button which is going to redirect you to the downloads page but before that let's see what are the system requirements for downloading this application so as you can see here for installing docker on your windows operating system you need to have at least windows 10 64bit pro enterprise or education version and hyperv and containers windows feature must be enabled and some other requirements are 64bit processor with second level address translation 4gb system ram and bios level hardware virtualization system must be enabled in bios settings so if you don't have a windows 10 64bit pro version or enterprise or education version then also you can install docker on your windows operating system but the procedure will be little different so for that you can go to suspended products and tools and then go to this tool which is called docker toolbox which is now a legacy for legacy operating systems so here you can just click on the install toolbox on windows button i'm going to just open this link in the next tab and here you can follow the procedure of installing docker toolbox on your other windows operating system for example if you have windows 10 home version or if you have windows 8 or windows 7 then you can install docker toolbox so first of all how to check which windows 10 version you have if you have windows 10 operating system running so for that what you can do is you can just right click on this windows button and then click on run and then just type win ver w i n v e r and then click ok which is going to open this kind of window and here you can find the windows 10 version you are running so as you can see here i'm running windows 10 pro version also the second requirement was let's see the second requirement which is hyperv and containers windows features must be enabled so how to verify that so to check that the simple procedure is just right click on your toolbar windows toolbar and then click on task manager so once this task manager opens you just need to go to the performance section and then you need to verify this section which is called virtualization it needs to be enabled by default it is enabled on your windows 10 operating system so you don't need to do any extra thing unless you have manually disabled this feature so now i'm going to click this button which says download from docker hub and here you will see this web page first so first of all you need to create a docker id if you haven't already have a docker id you can just click on this sign up link here which will open this kind of web page and here you can create your docker account which requires a docker id email address and password and you need to just agree these terms and conditions so once you have your docker id which i already have i'm going to sign into my docker account which is going to redirect me to this page which is the downloads page and from here i can just download this docker desktop application for windows also if you have searched for docker and if you have opened this main website from docker which is docker.com you can just click on get started and then click on download desktop for mac and windows which will also redirect you to the same page and you can see welcome my docker id is shown here so in order to download this desktop application you need to have your docker id you and you need to log in to the docker website in order to download this executable file so let's just click on this button which is going to start the download of this executable file i have already downloaded this executable file so i'm going to cancel this installation and you can see on my downloads folder i already have this docker desktop installer which is around megabytes so i'm going to just double click on this executable file and i'm going to just start the installation so i'm going to minimize this browser and you can see the installation has been started so the first window here is the configuration so i'm going to just leave everything as default and then click ok which is going to unpack all the files the installation procedure is straightforward i guess you just need to click some buttons and docker will be installed out of the box and now you can see after few seconds i can see this docker desktop icon on my desktop and you can see this message which says installation succeeded so i'm going to just uh click close and log out button which will log me out of windows 10 operating system so i need to log in once again so now i have logged in to my windows 10 operating system once again and immediately after logging into my windows 10 operating system i can see this window which says hyperv and container features are not enabled do you want to enable them for docker to be able to work properly i will say ok which is going to enable all these features i thought they are already enabled somehow but according to docker it wants to enable them once again let's say and now i will click on this docker desktop icon from here which is going to start the docker desktop application and i can see this message which is hyperv service vmm is not available if you have enabled hyperv just restart your computer now so i'm going to restart my computer and i will then try to just start docker application once again so now i'm going to click on this docker icon once again and you will see on your tool bar here you can see docker is starting so it will take some time to start docker and i can see this message which says docker desktop is running so i can open powershell and start hacking with docker or docker compose also when you click on this docker icon here you can see bunch of options here for the documentation docker hub switch to windows containers and all other settings here so one thing i will recommend here is to sign in with your docker credentials which you have already created and i'm going to sign in with my docker credentials and after signing in you will be able to see your docker id and the sign out option so let's get started with docker so first of all you can start the command prompt i'm going to just type cmd which is going to show me this option which is command prompt and here you can just type docker hyphen version or hyphen v will also work and you can see the version which we have installed now let's also check if docker is working with the docker hub perfectly fine or not to test this you can just run docker run hello hyphen world okay so just run this command this is the most popular command to test whether docker is running or not or it's able to fetch all the images from docker hub or not so i'm going to just run this command and when i run this command you can see this kind of output so you can see on the first line it says unable to find image hello world latest locally so it didn't find this image locally so it has pulled this image from the docker hub repository so you can see in the next line latest pulling from library hello world and once the pull is complete and you can see the status downloaded the new image hello world and then the latest version of hello world and then it says hello from docker that means everything is working fine with your docker and it's able to run your docker images and this is the first docker image we have run which ran successfully few more commands i can show you here for example you can also say docker images and then press enter and you will see the list of all the images you have on your system so we have just downloaded this docker image which is hello world image so this is how you can download and install docker on your windows 10 operating system in this video we are going to see how we can download and install docker on our mac operating system so let's get started so first of all open your favorite browser and search for docker and the first link which will appear here will be from docker.com so we are going to click into this link and then straight away you can see this button gets started or this button gets started so you can click on one of these buttons and then you will be able to see this button which says download docker for mac and windows so i'm going to just click on this button which will be redirect me to the docker hub website now in order to download the docker binary you need to have a docker account so if you haven't created a docker account you can just click on this sign up link here and then just fill your basic details like docker id email and password and create your docker id and docker account and once you have your docker id and docker account you can just log in with your docker account here on this website so i'm going to just give my docker credentials first is the docker id and then second is the password and now i'm going to just sign into this docker hub website which will allow me to download this docker desktop for mac so i'm going to just click on this download link here which will start the download of the docker now once this docker dot dmg file is downloaded i'm going to just click on this docker.dmg file and i'm going to minimize the browser and you can see this dmg file is opening first of all and once this window opens you just need to drag this docker icon to your applications so it's that simple to install a docker on your mac operating system so once docker is copied into your applications folder you can close this window and open docker from here or you can just go to the launchpad and you will be able to see this docker icon here so you can just click on the docker icon which is going to start the docker on your mac operating system so just wait for few seconds and now you will see this message which says docker is an app downloaded from internet are you sure you want to open it so i'm going to just say open and in the next step i can see this window which asks me to give some privileged access so i'm going to just click on ok and then i'm going to give my max password and now you can see docker desktop is starting on my mac operating system and your you can see this docker icon on top of your mac desktop so i will wait for this docker desktop to start and once this docker's desktop starts we will start testing if everything is working fine in the meantime i can also give my docker id and password to login to the docker using this docker desktop application so let me give my docker id and the password and then i'm going to just say login and you can see i am logged in with my docker id into this docker desktop application and now i can see this message which says docker desktop is now up and running so what we are going to do next is we are going to just uh open the terminal so i'm going to just search for terminal and then i'm going to open the terminal and once my terminal is open i can just check the docker version by just giving this docker version command and then press enter and i can see this long message and here the version information is displayed and then the api version is displayed and all the other information about my docker is displayed here also when i give docker info command so let me just clear this terminal once again and then i'm going to just give docker info command and it's going to give me bunch of information about docker and docker engine and the status of docker engine let me clear this terminal once again and now i'm going to test a docker by giving this command so i'm going to just say docker run hello world and then press enter which is going to fetch this hello world image from docker hub if it's not already present on my mac locally and once this image is pulled it's going to just display hello from docker that means everything is working fine and you can start working with docker now one more command you can use here is this command which is docker images which is going to show you the list of images which are present on your mac operating system and you can see i only have one image right now which is hello world which i have fetched just a few seconds ago and you can see this docker icon here so when you click on this docker icon you can do lots of thing for example if you want to restart your docker then you can just click on this if you want to quick quit the docker desktop then you can click here and there are lots of settings and updates and preferences settings you can do from this docker desktop icon and there are lots of other settings you can do from this window or this menu from here so this is how you can download and install docker on your mac operating system in this video we are going to see how we can download and install docker on our ubuntu operating system so let's get started so what i'm going to do is i'm going to open my favorite browser and then i'm going to search here docker install ubuntu and the first link which will appear here will be from docs docs.docker.com i'm going to put the link in the description also so i'm going to click this link which is the official documentation of installing docker engine community edition on your ubuntu operating system so here you can see the prerequisite of installing docker on your ubuntu operating system so you can see the os requirements and right now i have this version which is 18.04 lts version and if you have the older version of docker or docker io or docker engine installed you can use this command to uninstall previous versions of docker now to install docker you can just scroll a little bit down and they have the very good documentation of installing docker on your ubuntu operating system so we are going to just copy these commands and paste it on our terminal and we will be good to go so the first command is sudo aptget update so i'm going to just copy this command and i'm going to just open my terminal here and then just paste this command and then give my ubuntu's password and then just press enter it's going to update all the repositories and then i'm going to just copy the second command in a meanwhile so this is the second command and in the second command we install the packages to allow the apt to use the repository over https so let's just copy this command and go to our terminal and then let me just clear the terminal and now i'm going to just paste this command and then press enter which is going to start the installation i'm going to press y and then press enter and in the meantime we are going to copy the third command which is to add docker's official gpg key so for that you need to have curl and curl we are installing using the second command so when the second command is finished you will have curl on your system and then we can just give the third command so hopefully that is complete so let's clear the terminal once again and then paste the third command and it's okay so we will move to the next command which is to verify that you now have the key with the fingerprints so i'm going to just copy this and then paste it here and verify this and you will see the similar result which is also shown here when you give this command so now we will move to the next command which is to install the docker repository so for ubuntu you need the first option here which is x 8664. so i'm going to just copy this command once again and then go to the terminal clear this terminal and then paste this command and then press enter which is going to install the docker repository and then in the next step we are going to update the repositories once again before installing docker so here you can see the next command which is to update the repositories again and then we are going to just install the docker so after update we are going to install the latest version of docker engine which is the community version so for that we just need to give this command which is going to install docker ce and docker cecli and containered dot io so i'm going to just copy this last command and then paste it to the terminal so clear the terminal just paste this command and then just wait for the installation to complete so it's that easy to install docker community edition on your ubuntu operating system and if you want to install a specific version of these packages you can give these commands so when you give this command apt cache medicine docker minus ce you will see a different version of docker which are available for your ubuntu operating system so from here you just need to take the version and then replace this placeholder for the version string with the actual version of whatever tool you want to install so for example if you want to install the version of docker ce for example we need the latest version of uh the docker ce then you can just copy this and then just replace this placeholder string by this string okay same you can do for the docker cecli so once this command is finished i'm going to once again clear the terminal and we are going to run this command which is sudo docker run hello world in order to test whether everything is working fine or not and here i'm going to just write sudo docker run hello hyphen world and then press enter and i'm going to give my ubuntu's password and you can see when you run this command it prints hello from docker so first of all what happens is because we are running this docker command for the first time it's going to find the docker locally and if it's not found then it's going to pull your docker image from the docker hub and then execute this hello world image which is going to print this kind of output so if you see this kind of output that means docker is running on your system and also you can check the docker images now so you can just give this command sudo docker which is going to list out all the docker images you have on your ubuntu operating system so that's how you can install docker on your ubuntu operating system in this video we will talk about how does docker works and we will see some commands related to docker and docker images so as i have told you in the earlier videos also you can build your docker images that holds your applications using docker files and then you can create your docker containers from those docker images to run your applications and then you can share your docker images via docker hub or via your private registry now if you want to see this docker flow in the form of a diagram you can see this diagram here so you can create a docker file which we are going to see how we can create a docker file in the later videos so docker file is a file from which you can build your applications into docker images so what happens is you pull some images which are already there on the docker hub and you use those images with your application and you write all that uh code or that script inside your docker file so how will your application run inside a container you write everything in a docker file and then you build your docker file which will create a docker image and when you run your docker image it will be converted to a docker container now let's see some commands related to docker so the first command which i want to show you is the docker search command so you just write docker search and then you give your options for example whatever image you want to fetch from your docker hub you can just write that image name for example i just write ubuntu here so you can search all the images which are there related to ubuntu on docker hub using this command so docker search ubuntu so when you give docker search ubuntu you will see this kind of result in the form of a table and the first column here is the name the second column here is the description third is the number of stars and if the image have more number of stars then it's more popular also you have the column for official so if you see ok under official for a particular image so for example this first image with the name ubuntu is the official image on docker hub and you can also see some description here so clearly uh this first image which is an official image also is the most popular image on docker hub about ubuntu now let's see some options which are related to docker search so i'm going to just write docker search here and then i can give the filter option which we use to filter our results so i'm going to just write a filter here so let's say we want to filter our result on the basis of stars an image on the docker hub so i can just write stars here is equal to 3 and then the name of an image i'm searching for so for example i'm searching for ubuntu here so i will just write ubuntu and this example will display the images with the name ubuntu and which have at least three stars i'm going to just press enter so you can see all the result of the images which have at least three stars now if you give here let's say number of star is equal to 100 so it's going to search for all the images which have at least 100 stars now if you want to give more than one filter you can add this filter option once again so you can just write hyphen hyphen filter and then the next filter so the first filter we have here is for the stars and the second filter i have added here is for the official image so i just want all the images which are official so that's why i have just given this filter which is is official is equal to true and then i'm going to just press enter and i will only see the official images which are present on the docker hub and which have more than 100 stars in a similar way i can also search for automated image which are not official but which are there by some users which are there on docker hub right so it's going to show you all the images which are not official but automated now there is this option which is called uh no trunk also which is going to show you the description without truncating uh this description so right now you can see in the description you see this description and these three dots so that means this description have more content in the description so i can just give this option which is no trunk which is not going to truncate this description it's going to show you the full description here so sometimes this option can get really messy if the description is really large so just use it wisely now instead of for this hyphen hyphen filter you can also simply write hyphen f for the filter option so either you can just give the full filter option or you can just give hyphen f for the filter and the result will be the same now the next command which i'm going to show you here is the docker images so i'm going to just write docker images and this command we use to list out all the local images you have on your host so when you give this command docker images it's going to give you all the images which you have on your host as i said and right now i only have one uh image which is hello world image which we have pulled in the previous videos when i have shown you how to install docker on your various operating system so right now i only have one docker image which is hello world now there are some options which are related to docker images so we are going to see all those options one by one so with this docker images option you can give the name of the image now let's say i give here the option java so you can list the images using the name or the tag so when you give this docker images java command it's going to search all the images related to java and you can see there is no image which is related to java on my host machine so let's pull the java image from the docker hub so i'm going to just write docker here and then pull so the pull command you can use to pull an image or a repository from docker hub or from your private repository so i'm going to just pull the java image from the docker hub so you can see when you give this docker pull java command it's going to pull always the latest tagged image from the docker hub and in the output also you can see using default tag so the default tag is always the latest tag that's why it's going to pull the latest java image so now you can see this java image with the latest tag is downloaded on my host so let me clear the terminal and now i'm going to give the docker images command once again so docker images and now i have the java image with the tag latest and the hello world image with the tag latest so now i can use the docker images and then the name of the image also so i can search uh based on the name of the image also so i can just write docker images java which is going to just give me the images which are related to java i can also search with the image name and the tag so let's say i want to search for the java image which have the tag let's say 8 which is not present on my host so it's going to give you the empty result without any image if you give the tag which is present so the latest tag is present on my host so it's going to give you the java image with the latest tag so let me give the docker images command once again and you can see by default in the result you will see the name of the repository or an image then the tag of that image and then the image id this id is very useful when you have a multiple image related to let's say java so you can use this image id to remove that image or work with that image so that's why this id is important also you can see when this image is created and the size of the image so the different images with different tag have different sizes so sometimes you want the images with the less size or sometimes you want the images which have the full feature so in that case you can use a different kind of image with different tag which suits your requirement for your application in this video we will talk about basics of docker file so first of all what is a docker file so docker can build images automatically by reading the instructions from the docker file and a docker file is a text document that contains all the commands a user could call on the command line to assemble an image now as i have previously told you you can use docker file and then once you write your instructions in the docker file you can build your docker file to produce a docker image and when you run the docker image it's called the docker container so let's see how we can create a docker file and then we will see how we can build our docker file to make an image so right now i'm in my home directory so here i'm going to create a directory called d1 let's say and then i'm going to cd in this d1 directory and right now it doesn't contain any files or folders so let's create our docker file in this d1 folder so i'm going to just write touch and then docker file so by convention we usually name our docker file as docker file with the capital d and this docker file doesn't contain any extension so it's without any extension so let's create this file so now i have this docker file in my deven folder right so now i'm going to open this docker file in any editor you can use the editor of your choice right from the nano bim or any editor i like to use the visual studio code editor so i'm going to use that so i'm going to just write code and then i'm going to just write dot which is going to open the current directory in my visual studio code so here i have this docker file right now in visual studio code there are many extensions you can install related to docker that's why i like to use this visual studio code and straight away when i open this docker file in my visual studio code i can see this popup which says docker extension is recommended for this file so you can click on this install button or you can just install this docker extension from this extension option here also so you can just search for docker here and then it will give you the most popular docker extension right so just choose the most popular one from here and i'm going to just install this docker extension and once this extension is installed it's going to help you with your docker files and docker commands in general okay so there are bunch of keywords which you can use inside your docker file and each keyword means something so we will start with the arg keyword so this arg keyword we can use to provide any argument as the name suggests and i'm going to explain this arg in detail after the other keyword which is from so here what i'm going to do is i'm going to just write version here and version equals i'm going to give here is 20.04 so version here is the name of the argument and 20.04 is the value of the argument now after this we are going to use another keyword which is from now this from defines the base image used to start the build process so there are many base images which you can find on the docker hub and we are going to use one such base image which is ubuntu and then after colon you can choose which version of ubuntu base image you want to have so here uh as i have defined this arg is equal to 20.04 so we are going to fetch the ubuntu 20.04 from the docker hub as our base image so how we can use this argument with this from uh keyword you just need to use this dollar symbol and then inside these curly brackets you just need to pass your argument so my argument name is version so i'm passing uh this argument here this means that we want to fetch the ubuntu 20.04 image from the docker hub now this from instruction supports variables that are declared by any arg instruction that occurs before the first from and an arg declared before the from keyword is outside of the build stage so it can't be used in any instruction after from so now once we have the image we are going to use one more keyword which is the run keyword so this run is the central executing directive for the docker file so this run you can use to run commands using the docker file so for now i want to run inside this ubuntu base image apt get update command and also i'm going to give the flag y for yes and now let's move to the next command so the next command i'm going to use here is the cm d command so the cmd command can be used for executing a specific command within a container so let's say i just want to run the bash inside the container so i'm going to just use these square brackets and with the double quotes i'm going to just write bash here so this is a very basic docker file now let's see how we can just use this docker file to build some image so i'm going to open the terminal inside my visual studio code editor and as i can see i'm in my d1 directory which i have created and here i have this docker file right so now let's list out what are the docker images we have on our system so i'm going to just write a sudo docker images command to list out all the images and now i want to run or build this docker file and create an image so right now we have hello world and i want to create one more image using this docker file so to build a docker file you can give a command build so just write sudo docker build and then dot so when you run this docker build command the current working directory is called the build context and by default the docker file is assumed to be located in this directory but you can also specify the directory path using a flag called hyphen f that we will see a little bit later but just give this command for now which is sudo docker build space dot so now you can see that when we run this docker build command the build is run by the docker daemon not by your cli so the first thing a build process does is to send the entire context to the docker demon and that we can see here sending build context to the docker demon now in most cases it's best to start with the empty directory and then you start adding your docker file in that directory now when you run this docker build command you will also see that these layers are fetched from your base image from the docker hub and also you will be able to see which step is executed so the step one out of four is this arg step step two is the from step and at this step it's going to pull the base image from the docker hub and you have some intermediate layers here which are created and then we have used this run command which in itself has created its own layer and it has installed the updates using this updates command and at last we have given this cmd command so now let's give the docker images command once again so i'm going to just give sudo docker images command and now you're going to see this ubuntu base image which is fetched from the docker hub and you have this image which doesn't have any name or tag because we haven't provided any name or tag to our docker image and this only have this image id which you can see here also which is successfully built this image id so using this image id you know that your image is created here now let's say you are in some other directory other than the directory in which your docker file is there so for building a docker file from some different directory you use the hyphen f flag so what you do here you just use sudo docker build and then hyphen f and then you just give the path to your docker file so when you give this command and then you need to provide the context also so you need to create this context inside this current directory so when you give this command it's also going to give you the same result so because we have effectively given the same command so we don't need to modify our image so once again when you give the docker images command it's going to show the same image because your image is not modified and you haven't changed your context which is your current directory now as you can see we don't have any name and tag to our image so if you want to provide the repository name and the tag for your image what you can do is you can give this docker build command and then give the hyphen t flag so using this hyphen t flag you can specify the repository and the tag at which you want to save your image so let's say i want to give the repository name as my underscore app and the tag which i want to give here is let's say one so after the colon you can provide the tag also here so when you run this command and don't forget to provide this context which is dot which is the current directory and then press enter it's going to just create the same image and you will see here an extra step is shown here which is tagged with my app colon one so at this step also you will observe that docker is smart enough to know that you want to create the same image from the same docker file and you haven't changed your docker files so it's not going to change your image or create or recreate your image once again because we haven't changed our docker file right we have just give the repository name and the tag so now when you give this command docker images then you will see that the repository name is my app and the tag associated with it is one so this is how you can give the repository name and the tag now if you will observe here we have our base image also here which is ubuntu 20.04 so in future if you create different docker file and it requires the same ubuntu docker image and the same tag which is 20.04 then your docker build command will be smart enough to know that and it's not going to pull this image from the docker hub again because you already have this image on your local pc so as i said we have fetched this ubuntu image and the version for it is 20.04 here in the version if you don't know the version you can always write the latest so just write latest here and it's going to just fetch the latest version of the base image you want to have so let me just save this file with the latest version and then run the same command with hyphen t my app and the tag will be the same and the context will be the same and now you will see that it's going to fetch the latest version of ubuntu here and now when i give this docker images command you will see the tag latest here instead of 20.04 which was this more specific version i wanted right so latest is the latest version which will be available on the docker hub for this base image so those are some of the basics of docker files we are going to learn about docker files in the upcoming videos also till now we have learned the basics of docker files and how we can create docker images using docker files now in this video we are going to learn about docker containers so as i have told you earlier when you run an image it's called a container so in the last video we have created this docker file and we have already built our docker file to produce an image so let's list out the docker images which we have created in the last video so just give the command docker images here and this was the image which we have created we have named our image as my app and the tag which we have given to our image is one here now this is the image id so let's see how we can run this image to create a container now in order to list out all the running containers you have the command which is called sudo docker ps which is going to give you the list of all the running containers so right now we don't have any running container now if you want to see the list of all the container including running or thus exited containers then you can give the command with the flag hyphen a and it's going to give you the list of all the containers you have on your system so it's going to give you the list of all the running container as well as if they are exited and if they are no more running then also it's going to give you the list of all the containers so you can see i have ran this hello world container two months ago right and right now the status of this container is exited that means it's not running so this is how you can see the list of all the containers now to run a container what you need is a command called run so you just write sudo docker run and then you can give with this run command some options for example and then you give the name of the image so it requires uh the image in order to run a container and then you can give some commands so you can give some commands with the docker round image and also you can give some args here okay so let me just write args right so this is the basic syntax of a docker run command so let's say we want to run our docker image which is my app right so let me just once again give this docker images command and i want to run this image so to run a container you just need one thing which is the docker image so you can just write sudo docker run and then the image id so this is the image id of this repository which is my app so let's say we want to run this image so i'm going to just take the image id of this image and then i'm going to just press enter and as soon as i press enter it's going to run the container and exits immediately so when i run this docker run image id command then it's going to run and it's going to exit immediately right so when you give this uh docker ps command so let's list out all the running containers right so all the running containers still you will see there is no running container but when you give this command with hyphen a flag which means we want to see all the containers then it's going to show you that it ran this uh container with this image so we uh ran the container with this image and this is the same image which we have used in this command right and it was exited about a minute ago right so it ran and it exited immediately now here one more interesting thing to note here is when you run the container with the run command dot co automatically generates a container name with a string of randomly selected numbers and letters so if you uh are wondering what this name is this is just a automatically generated name which is generated by docker for you now if you want to give a specific name to your docker container there is a flag for that so we are going to run the docker run command for the same image and this time what we are going to do is we are going to give some name to our container so before the image id i'm going to just provide this name flag and then i can give the name to my container so the name i have given here is my ubuntu container to my container and let's give the same command with this flag and once again you don't see any output here on the terminal but as i have told you it has just ran the container and exited immediately so when we give the docker ps hyphen a command once again you will see this time that now our container name is my ubuntu container right so this was the container which uh we ran earlier and this time with the last docker run command we have given the name to our container and the image was this one so image is unchanged but we have created a new container with the name my ubuntu container right and the command which we ran is badabash command which is coming from this line of docker file now when you run your docker containers it's run in two modes one is attached mode or in the foreground and other is in the detached mode or in the background and by default docker runs the container in the attached mode that means it's attached to the terminal session where it displays the output and the message so if this docker file has some commands or some output related to this docker file then it's going to show you the output in the terminal when you run the container with the docker run command but because we don't have any uh output associated with the docker file it doesn't show any output right now if you want to run your docker file in the detached mode what you can do here is you can give the hyphen d flag that means you want to run your container in the detached mode so just give hyphen d and then i'm going to give the same command here and let's see what happens and you can see it's going to give you this message which says error response from the daemon conflict the container name this is already in use right so this container we have already defined so you cannot create this container with the same name so you need to give the different name here so let's say i'm going to just give my ubuntu container 2 now okay and then i have also given this hyphen d command to run it in the detached mode and now you will see that there is an output which is printed here and this is the container id of your container now if you have observed here in the previous command where it has should thrown this error it has this long container id now when you give the docker ps hyphen a command you will see in the container id some part of this container id is shown so for example i can see here up to this part of the container id is shown but in the background the container id is so much bigger right so now when i give the docker ps hyphen a command once again i can see one more container which is created and the container id you can see it's going to show you the starting few uh values of the container here until i think until d so using this id also you can delete or work with your container or you can take the full id of the container and work with your container okay so this id will also work or in the short form or the first few letters of the id will also work which is shown here now we have seen that how we can run our docker container in the detached mode and as i told you that by default docker runs the container in the attached mode or in the foreground right now let's see how we can run our container interactively so docker allows you to run the container in interactive mode that means you can execute commands inside the container while it's still running so let's see how we can run our docker container interactively so now what i'm going to do here is i'm going to just create a new container let's say it's container 3 my open to container underscore 3 and i don't want to run it in detached mode instead i want to run this container in the interactive mode so here i can give hyphen i t flag which means that we want to run our container in the interactive mode and the image name is same which we have created using this docker file so let's see what happens when i run this command like this so when i run this command like this you will see the bash shell which appears here and this is what i was expecting so now as you can see here in this docker file when we have created this image the last command which we wanted is this bash command and it has just given us this bash command shell in the last right so this is how you can run your container in the interactive mode now when i open the new terminal so let this terminal be like this and let me open the new terminal in the visual studio code you can open the new terminal by just clicking on this plus button or you can open your default terminal on your operating system also you can see i'm in the second terminal and here i'm going to give this sudo docker ps command without hyphenae that means i want to see only the running docker containers and then i'm going to provide my password of my operating system and this time you will observe that when i give this docker ps command it's going to give me some output because now the container which i have created which is my ubuntu container 3 is still running in the other terminal as you can see we have uh running bash shell in the docker container so this bash shell is running inside our container right so when you uh just give some ls command you will see the file system directories here inside your container you can also give for example up time so as the name suggests the uptime command will give you the time for which the system has been up or running right and as we have seen in the last video we have only uh given this bash command so our container is not doing much it's just opening the bash a shell now there are many interesting things which you can do with your docker run command and that we are going to see in the next videos also i want to show you uh some more commands related to docker run and uh docker in general so now what i'm going to do is i'm going to switch to my terminal so i'm going to open my default terminal on my ubuntu operating system also i'm going to open my browser and i'm going to just search for docker hub i want to show you how this docker hub looks like so the first link here is hub.docker.com and when you click on this link you will see uh this web page here from where you can just sign in with your docker id which you have created earlier or you can search for some images so let's say i'm going to search for an image called busy box and then press enter and you will see an official image of busy box and as you can see uh you will see the tag here on the top which is going to show you if it's official it's going to show you it's an official image and otherwise it's going to show you verified or the other information associated with the image so the most popular one and the official one is this one so i'm going to just click on this base image and here i will see some more information related to this image so if i want to just pull this image on my pc i can just give this docker pull busy box command so let's do this and i'm going to show you how we can use the docker run command with the busy box uh image which we are going to pull so i'm going to just write docker pull busy box here and then press enter and i'm going to just give my ubuntu's password which is going to just pull the latest tag image of the busy box right so if you don't provide any tag after colon then it's going to pull the latest image so now let's run the docker images commands so i'm going to just give images and now you can see this busy box image is there so you can run the docker run command with the images you have in this list also so till now we have seen how we can run the docker run command with the container which we have created but you can also use this docker run command with the base images also for example busy box or ubuntu 20.04 or ubuntu latest version and i have pulled this busy box base image because it's very small in size you can see it's only around 1.22 megabytes so if you want to quickly test something with some linux terminal or linux operating system busy box is the image to go so now as i told you you can use this docker run command with the images you have in your local pc so you can just give docker run and the name of your image which is busy box here and then you can do something with it so you can just write echo so it means that we want to run the echo command inside our busy box container when it runs and let's say we just want to print hello world here so i'm going to just write hello world and then press enter and it's going to run this busy box image as the container and it's going to print or execute whatever command you have given after this busy box command right so basically what this means is we are running echo inside our busy box container also when you give the docker ps hyphen a command so let's give this docker ps hyphen a and you will see this busy box command also so you can see this busy box and what command it has ran so we have we ran echo hello world and it was created 42 seconds ago and it was exited right so status is executed now let's say you just want to work with the busybox shell what you can do you can just give the same command but instead of giving this echo you can run it in the interactive manner using this i t flag and then you can just tell that you want to run the shell so just write sh which is going to run this container and open the shell inside the container right so let's give this command and when you give this run command with the id flag it attached us to the interactive tty in the container right so because we are running the sh command after this run command so it's going to open the shell inside your busy box container and here again you can run your basic commands or whatever you want to do inside the container so we are not working inside our operating system we are working inside our container now in order to exit from the container you can just give this exit command and you will come out of this container now the last thing which i want to show you before just finishing this video and that is how we can remove some containers so now we ran so many commands and we have so many containers and as you can see we have so many dead container that means all the containers are exited and they are not running anymore so when you give this docker ps command you can see only one container is running and all the other containers when you see using hyphen a are exited so let's say you want to remove some of these containers so let me clear the terminal and let me just give this docker ps hyphen a command so let's say i want to remove this container and this container so there is a very simple command which is called rm so you can just write sudo and then the docker command and then just give rm and then after that you can give the container id of the container so let's say i want to just give this container id of the container so just copy and paste this container id and then press enter and if you see the container id in return in the output that means this container is removed so once again when you give the docker ps hyphen a you will see that this container is already removed right in the same way you can remove multiple uh containers using this rm command so you can just give container id space container id to space you can give multiple container id in this manner and it's going to remove all the container ids which you have given after the rm command so so right now we want to remove two containers and as i said if you see the container id in the output that means that container is removed and in my case as i can see this container is removed but the container with this id is not removed means the container with this id is not removed because it's running right so if the container is running and if you want to remove it you need to stop this container first and then you can remove the container so as i have shown you this container is running here so i i can either just give this exit command or i can stop the container let's see how we can stop the container using a command called stop so let's say i want to just stop this container so i can just give the command docker stop just write docker stop and then the name of your container so my container name is this one so i want to stop this container and then press enter and if you see the container id in the output that means this container is stopped so when you give this docker ps without hyphen a you can see there is no container running anymore and now in the list of all containers you will see this container and now when you give this docker rm with this container id it's going to give you the output that means this container is successfully removed okay so you use top command to stop the container and then you can use rm command to remove the container in the last few videos we have seen the fundamentals of using docker files docker images and docker containers now in this video i want to give you a concrete example of using the docker container so i'm going to give you a real world example of how you can really use docker containers and how these docker containers are really useful in certain situations so we are going to compile and run a c plus program inside a docker container now you might say that uh compiling and building a c plus plus program on your host operating system is also easy so why do we need a container so consider a situation in which you have a c plus plus program and you want to compile a c plus program with different version of gcc let's say now it's really hard to maintain different version of gcc on your linux or windows operating system but using docker containers it's really easy to use and compile your program in different gcc versions using docker containers also let's say you want to develop a c plus program which works on multiple operating system or you want to compile your c plus plus program for a cross plate form application so docker containers are really useful for c plus plus cross platform development with containers with containers you can choose a target with a platform that runs completely different operating system other than your host operating system or the system on which you are developing so let's say you are just working on your windows operating system but you want to compile your c plus plus program on a linux operating system or any special version of linux operating system you can do it easily with the docker container so let's start with our example so as you can see on my visual studio code i have opened a docker folder and inside this docker folder i have this directory d1 which we have created in the previous video and now i'm going to create a new directory inside this docker directory and i'm going to name this directory as d2 and now i'm going to just go inside this d2 directory so let's go inside this t2 directory and here inside this d2 directory i'm going to create a new cpp file let's say so you can use touch on the terminal or you can just click on new file here and then just create a new cpp file with the extension cpp i'm going to name my file as main dot cpp and as soon as you create a cpp file inside your visual studio code editor it's going to give you the suggestion for the c plus plus extension so i'm going to install this c plus extension so now this c plus extension is installed and this c plus plus extension is going to help me to uh work with the c plus plus file inside my visual studio code editor so what i'm going to do here is inside my main.cpp file i'm going to just write a very simple program here which just prints hello docker container so normally what you will do on your host machine if you have a g plus plus or gcc you can compile your c plus program using the g plus plus right so you can see i have this main.cpp so i can compile this program using g plus plus hyphen o and then the executable file name which i want to create let's say i want to just give the name test to my file and then my main.cpp file right so i'm going to just uh press enter which is going to create this executable file you can see here also i'm going to do ls here also so you can see this executable file and now you can just run this test executable file or binary file using this command dot forward slash and the name of your binary file and it's going to print hello docker container and i want to create a docker container and i want to compile my c plus plus program inside my docker container and i want to run my c plus plus program inside my docker container this is what i have done in my host machine not inside my docker container right so let me just clear the terminal and inside my d2 directory where my c plus file is there or my cpp file is there i'm going to create a docker file so i'm going to just right click and i'm going to just create this docker file here and then press enter and i can remove this test binary file because i don't need it for my docker container now if you don't know which base image you want to use so for example if you want to use gcc to compile your c plus plus program you can go to docker hub and search for gcc here and when you search for gcc you will be able to find the official gcc image here you can see docker official image or let's just press enter and see what result it gives so you can see the official image is this one with this official image tag and it has more than 10 million downloads so i'm going to just click on this gcc link and you can see when you just scroll down what are the tags you can use with gcc also you can see how you can pull this gcc base image using docker so the name is really simple gcc so what we are going to do is we are going to just write from and then our base image i'm going to use here is gcc now the version or the tag i want to use here is the latest or you can choose the tags which are available here so you can choose 10.2.0 or 10.2 or from all these tags which are available here you can also go to tags section and see the more specific tags you want to use for your c plus plus program so now once we have the base image the next step is to copy our current folder which contains our cpp code into the docker image under the file system where we want to copy this so for copying our local files into the docker image we use this copy command okay and as you can see it suggest us uh that we need to provide the source so source in our case is dot because we want to copy all the files from the current folder and the destination will be the destination inside the file system of your docker image in our case it's gcc so in gcc base image file system you will find this path which already exists there so you can just write user forward slash src which is already there inside the file system of gcc base image okay so as i said this command is going to copy all the files which are there in your local directory to this directory inside your docker image okay now if you want to copy some specific file then you can do this also you can just write main dot cpp and then you can copy a specific file into uh the folder which should already exist inside your image which you are using right so for now for simplicity i would just want to copy all the files from the color current directory to user forward slash source forward slash the directory which we are going to create so let's say we want to create this directory where we want to copy all the files cpp test let's say so this path already exists in the file system and this is the folder name which we want to create and copy our local files to this folder in the docker image right now we are going to define the work directory so we can just use this work there keyword to define the working directory in which you want to work now okay so because we want to work inside this directory because we are copying our c plus file inside this directory we are going to set our work directory as this one that means when you run any command it's going to run inside this directory which you set as work directory now in the next step i want to run the command which will compile the c plus plus program using this main.cpp so now i can just give the g plus plus command then hyphen o as the flag and let's say i want to name my binary as test and the file name which i want to compile is main dot cpp so this run command is going to compile my c plus program inside my cpp test directory under user source folder right now in the next step i'm going to give the command using cmd which will be the command which i want to run inside the container so this is going to run the program output from the previous step into our container so this works like this as you have already seen in the last video also so if you want to run your binary you can just give dot forward slash and the name of your binary which is test right so this binary is going to be uh run using this cmd command inside our container so that's it that's how you can create this docker file to compile your c plus program and run it now let's build our docker file to create an image for that you can just give sudo docker then your build command so build and then the build context and then you can provide hyphen t to provide the name of your image i am going to name my image as cpp underscore test for example and then you can also give the tag to your image let's say i want to provide the tag one to my image okay so this is going to create a docker image using the docker file so you can see it has pulled the base image in the first step then copied our files from the local directory to the directory which we have defined and then it has set the work directory and then in the next step it has compiled our c plus program and in the last step we have set the test binary to run when we run our container so now let's list out all the images you can just give docker images command for that and you will see that this repository is created about a minute ago and this is the image id for that image right so now we want to run our container using this image so for that we have seen in the last video we can give sudo docker run command and then i'm going to give the hyphen hyphen rm flag and this rm flag causes docker to remove automatically the container if it already exists so if the container which we are going to run already exists then it's going to remove that container and then it's going to rerun that container so this command is handy when you want to just run only one container at a time and then i'm going to give this i t flag with hyphen so i t flag for running this container in the interactive mode and then your image so you can give this image name cpp test here or image id also you can give so i am going to give the image name which is cpp underscore test with the tag so tag we have provided is one okay so here as i said you can give the image id or the repository name and the tag and then when you run this docker container it's going to print hello docker container that means we ran the test binary inside our docker container right now as i said you can change this tag instead of latest you can choose the version of gcc you want to use for compiling and running your c plus programs so that's why this docker and docker containers will help you to just cross compile in cross platform applications now let's say you want to compile your c plus plus program using the c lag compiler instead of gcc okay so we want to compile our program using c lag compiler instead of gcc so let me clear this terminal and let me go one directory up here and i'm going to create a new directory so i'm going to just write mkdir d3 and inside this d3 directory what i want to do is i want to just have the same cpp file so i will just copy this cpp file into the d3 uh directory also and then we are going to create a docker file inside this d3 directory so let's create this docker file here so now let's move to the docker hub website and let's search for c lang if we have something related to c lang compiler on docker or not so i'm going to just write c lang here and as i remember there is no official a base image for c lang on the docker hub so what we can do we can use the base images we already have on our system and then we can install the c lang compiler on that base image so i'm going to just give this sudo docker images command and from these images let's say we will use this ubuntu latest or ubuntu 20.04 to compile our c plus program inside the ubuntu base image using the sealang compiler okay so what i'm going to do is i'm going to just write this kind of docker file i'm going to explain you all the steps one by one so we want the base image ubuntu with the tag latest because we already have downloaded or pulled this image in the previous videos so we don't need to pull it once again now in the next step i'm running apt get y update and app get install update to update apps on the base image so that's what you do when you want to install any software on your ubuntu operating system so this command is going to update the apps on the base image now in the next step using this apt get hyphen y install c lang command we want to install c lang on our base image which is ubuntu right the next step are relatively easier because we have seen these steps in the other docker files also so we want to copy all the files in the current directory into this directory inside our base image and then we want to set the work there which is the same where we have copied our c plus plus files and then to compile your c plus program using c lang you can just replace the gcc with c lang plus plus and the rest of the command will look like same as you have seen in the case of gcc also so you can see g plus plus hyphen node test main dot cpp and here also you can give this command the only thing i want to change here is the main dot cpp the file name here okay because our binary name is test we are going to just run this binary using this command so this is going to run inside our container okay in the d3 folder i have created this docker file to compile my c plus plus program using c lag and i'm going to run this now so let me clear the terminal once again so now let's build our docker image using this docker file so for that i need to go inside the d3 directory and then i'm going to give the docker build command with the context or in the current directory and then hyphen t to give the name of my image so let's say i want to give the name to my image as c lang underscore cpp and the version or the tag which i want to provide here is let's say 1.0.0 okay so let's build our image using this command so now as you can see the build of this image is successful with the name c lang underscore cpp and the tag 1.0.0 so let's run the container for this image using the docker run command so i'm going to just provide sudo docker run oops by mistake i pressed ctrl c that's why it break so let me just give this command once again and then give this image name with the tag 1.0.0 so we want to run our container using this image so let's press enter now and as expected we see hello docker container that means we successfully ran this binary file which is compiled using clang in our container and the output is printed now let's say you want to change something in the output so instead of let's say hello docker container i just want to print hello world here okay so i will just save this program and then i can just build it again but this time i will build it with the different tags so let's say i just did the miner change so i will just change the tag as 1.0.1 so let's build this image which is going to be built really fast and now let's run this image using this docker run command but don't forget to change the tag because i have changed the tag for the image also to 1.0.1 so here also i'm going to change the tag for the image and then press enter which is going to run this program and it prints hello world so how simple is this so this is how you can compile and run your c plus plus programs using docker containers so as i said i just wanted to give you a real world example same thing you can do for your java programs or any other programs which you want to run in different environments in this video we are going to see how we can do port mapping between your docker container and your host machine so let's say you have some kind of a server and that server listens on some particular port so you need to expose your port from your docker container so the outer world will be able to interact with your server so in this video we are going to take an example of a node js server the same concepts you can apply on any other kind of server it can be a nginx server it can be a python flask or django server or any other kind of server so let's start with our example of dockerizing our node.js web app so what i'm going to do is i'm going to just create a new directory for me so i'm going to just write mkdir d4 and then i'm going to go inside that the 4 directory and here i'm going to create a new node js app so for initializing my app i'm going to just write npm init and then hyphen y and then press enter which is going to create a package.json file inside my d4 folder now for this node.js server i will be using express so i need to install express locally for this app so if you already know something about node.js or npm you can easily install the npm package using npm ins tall and the package name in our case it's uh express which is a very popular node.js package or npm package so i'm going to just write express here and then i'm going to give this save flag here so it's going to be installed inside my directory and this express will be added a as the dependency in my package.json file so let me uh press enter which is going to install this express package in my directory you can see this new directory is created which is node modules and this new dependency is added in my package.json which is express so now let's create our server.js file so if you can see in our package.json file uh the main entry point right now is the index.js you can change it to server.js and let's create this server.js file server.js here and then press enter which is going to create this server.js file so we are going to write a very simple node.js code which is going to use express and it's going to just print hello world whenever somebody uh will make a get request to this server so i'm going to just uh copying and pasting this code because this code is available everywhere and it's very simple so what i have done i have just imported this express and then i have created these two variables one is the port variable which will be exposed via a browser or via the rest request and then we have the host here which is basically the local host and we have one get request here so whenever somebody makes a get request to the server we are going to just send hello world so very simple uh node.js server code and we are going to run this code let me clear this terminal so i'm going to just write node and the name of my server file which is server.js and when i just run this server.js using node.js it's running like this and it's printing uh on which host and ports it's running so let's open our browser and we are going to just open this url which is 0.0.0.0 colon the port number on which we have started this node.js server and i'm going to just press enter and it just prints hello world which is the expected result right so now we want to dockerize our node.js server so let's see how we can dockerize our node.js server so for that i'm going to just close this app or stop this app and now i'm going to create a new docker file so let's just create this docker file by just giving this command which is touch docker file now i'm going to go inside my docker file and here inside my docker file i'm going to use the node base image so when you go to the docker hub there is an official base image for node.js and that's what we are going to use so i am going to just write from and the base image will be node and the version of node we are going to use is version 12. so you can use the latest tag also here which is going to give you the latest version now in the next step i'm going to define the working directory using the work their keyword and we are going to define this work there in the user forward slash src for slash app folder and now this should be work data right so like this okay so we have defined our working directory inside this working directory we are going to uh copy our code and then we are going to do all the stuff now uh let's copy uh all the files which are there in our current folder to this docker image so we are going to use the copy keyword to copy uh all the files but first of all we need to copy the package.json to the container so that we will be able to run the npm install command and npm install command what it does it just installs all the dependencies into uh our container right so let's first of all copy the package dot json file so we are going to copy uh the package log dot json file and package dot json file so these two files are responsible for all the dependencies to this directory right so now we have copied the package json files so next step is to install all the dependencies using npm install so you can just give this command run npm ins tall now if you are uh working in the production environment this command can be a little bit different let me just write this in the form of comment so you can just write run and npm ci and then you can give this only production flag production okay so if you are working in the production environment you can give this command if you are working in the development environment then you can just do uh this command so npm install will install all the dependencies and in our case there is only one dependency which is express right so via this npm install this express npm package will be installed in our uh docker image now in the next step once uh all the dependencies will be installed we are going to just copy all the files uh which are there in our server code so we only have this one file which is server.js but let's say you have many modules and many files inside your node.js projects so i'm going to just write copy and then i'm going to copy all the files and folders which are there in the current directory okay now next step is important and this step is we are going to expose our port so i'm going to just write expose and we are going to expose the port which we are using in our server so we are using uh port 8080 in our server so we are going to expose this port this means that we want to expose port 8080 into our docker container so this exposed keyword means that we want to expose port 8080 from our container to the outside world for example to our host machine and this expose is a way of documenting so it's not going to publish your port at runtime it's just a way of documenting in your docker file that you intend to expose this port 8080 in your docker container so exposing port using this exposed keyword is a way of documenting which port are used but it does not actually map or open any port we are going to open and map the port using the docker run command and we are going to use a different flag for publishing our port or opening or mapping our port later when we just build and run our our docker con now the next step here will be to run our node.js application and we all know that we just need cmd and then inside our square brackets we will just write npm and then we are going to just give this comma and then we are going to give the name of our server.js file so this will be server dot js now here one interesting point to note here is when we are going to copy uh all the files and folders from our current directory uh to the docker image you can see i have used dot dot that means it's going to copy node modules also into your docker image and we have already installed our node packages using this npm install so this is going to overwrite this node modules folder from your image right so to avoid copying your node modules into your docker image you can create a docker ignore file so this docker ignore file is going to prevent your local node modules or your debug logs from being copied into your docker image so let's uh just create this docker ignore file so to create uh this docker ignore file you can just write touch dot docker ignore in the same format which i have used so this format is recognized by docker and whatever you write inside this docker ignore a file so let's create this docker ignore file first of all so we have created this docker ignore file and we want to exclude the npm modules and npm debug.log file from copying into our image so this means that we have added npm modules and the npm debug log file uh which will be excluded when we are going to copy the files from our local container to the docker image okay so this will avoid the overwriting of our npm modules now we are done and we can build our image so let me clear this terminal so now let's build our image by giving the docker build command so i'm going to just write sudo uh docker build hyphen t and then the image name so let's say i'm going to just give the name node underscore test colon the tag you can give any tag to your image so let's say i am going to give 1.0.0 or tag to my image and then the context and then press enter which is going to just build this image and in few seconds this image will be created so let me clear this terminal once again and let's list out all the images so sudo docker images and when you see here our docker image is created with the tag 1.0.0 15 seconds ago okay so now we are going to run our container so to run our container we can just use a sudo docker run so as i told you we want to expose this port 8080 so that this server can listen to the request from the outside the container right so in order to map the port we use the flag which is called hyphen p which is also called publish and hyphen p is a way of mapping a host port to a running container port so this is our running container port and let's say we want to uh map this port which is running inside the container to our local host machine and we want to let's say give the port 3000 in our local host machine and which is going to be mapped to port 8080 so if you specify this expose the port and if you specify this publish flag to map the ports then the service in the container is accessible from anywhere even outside the docker so this means that we want to expose port 8080 from our container to the port 3000 inside our host machine and now let's give the name of our image which we want to run which is node underscore test colon 1.0.0 okay and let's run this docker container and this gives me error and the error is obvious because instead of using npm i should have used node okay because we have started our server using node command not npm npm we used just for installing our packages and managing our packages right so let's rebuild our image once again and once our image is rebuilt we are going to just run our container so now our container is running and we can see the same output now we might be confused or you might be confused that we are exposing uh the port 8080 and when we go on this url on our browser so let's go to this url on our browser and let's see if it works or not so it's not going to work because we have mapped the port 8080 to the port 3000 on our local machine so this is the port on the container on your docker container and this is the port which uh it'll listen on your local machine so we want to listen on port 3000 on our host machine so instead of port 8080 you can give port 3000 and it's going to print hello world right this is how this uh port mapping work so this will be the port which will be available on your local host and this is the port you have exposed inside your docker container so let me just stop this container so i'm going to go to the next terminal and i'm going to just write sudo docker ps to list out all the running containers and this container is running so i'm going to just use the container id from here just copy the container id and then sudo and then the container id which is going to stop this container now this container is stopped and you can see in this terminal also that we are out of the container right so now let's say let me just uh clear this terminal and now let's say we want to map to the port 8080 itself on our host machine also from our docker container so this is the port on the docker container and we want to map this port to the same port on our host machine if it's available then it's going to run fine so let's run this command and now this time when you go to the browser on port 3000 obviously you will not get anything because we have mapped uh the port 8080 to our host machine now and now when you give port 8080 it's going to give you hello world if you want to run this server in the detached mode as i have told you you can use hyphen d so that this node.js will run in the detached mode that means it will run in the background so this is how you can expose the http port you can also expose the tcp port and the udp port from your docker container so let me uh just stop this container so i'm going to just stop this container first of all and let me show you how you can expose the udp and the tcp ports so let's say you are running uh application and in this application you are doing some tcp communication or the udp communication so for mapping the tcp port and the udp port you uh can use the flag hyphen p and then you can use this kind of notation so the port which you want to expose from your container let's say i'm just exposing port 80 and forward slash tcp so in case you want to expose the tcp port you just need to uh write forward slash tcp after the port which you want to expose from your container and this will be the port uh you want to expose to the host machine so this port will be available on your host machine um from this port to your container so this is the mapping right for udp you just write forward slash udp right so the flag is hyphen p you just need to write forward slash tcp or forward slash udp to expose the udp or the tcp flag you can expose multiple ports also by using this hyphen p flag so it's not that you just can use only one hyphen p flag you can use multiple hyphen p flags to expose multiple ports from your container to the host machine so this is how port mapping works in a docker i hope you haven't understood this concept so in this video we are going to talk about docker hub so what is docker hub so docker hub is a service provided by docker for finding and sharing your container images with your teams or with the general public so as you can see i'm on this website which is hub.docker.com and here i can sign in at the time of downloading the docker on your operating system you might have created a docker id for you and the password for you so you can log in with that docker id and password so once you are signed in with your docker id and password you will be able to see this kind of web page here you have this explore option where you can explore all the other repositories you have this repository option and under this repository option you will be able to see and manage your repositories which you have created and which you have pushed into your docker registry here you also have the option for organization which we are not going to cover in this video and also you have all these general uh account related uh stuff here right now let's talk about the pricing a little bit so you can see uh for public repository docker hub is absolutely free and that's what we are going to uh be using but if you are working in an organization or you want to create some private repositories for your docker images then you can choose one of these options which are provided here also it's not necessary that you need to use docker hub as a docker registry you can create a docker registry you have this documentation which you can use to create a docker registry i know uh google cloud provide a docker registry or a github nowadays also provide these kind of docker registries so you can create your own registry if you want you don't need a docker hub for just managing your images right so right now you can see i don't have any image on my docker hub account so to start with i have this very simple uh docker file which i want to convert to the docker image and then i want to push that image to my docker hub registry so let me list all the docker images on my operating system right now i don't have any image so let's uh build one image so i'm going to just write pseudo docker build dot hyphen t and the name of the image i'm going to just name my image as hello and then press enter which is going to just create this image i have this hello world image which is created five seconds ago right so now let me just also quickly run this image to see everything is working so i'm going to once again write sudo docker run hyphen hyphen rm hyphen it and the name of the image which is hello and then press enter and it prints the content of my main.cpp that's what it's doing so that's a very basic minimal image the size is very small that's why i have done this and once you have all these images let me just clear the terminal and then let me just move this terminal a little bit up and let's just list all the images once again so now i have this image hello and i want to push this image to my docker hub registry so in order to push this image first of all you need to log in with your docker id into your docker terminal most probably you are already logged in but if you are not you can just give this command which is sudo docker login and if you want to log out then you can just write log out here right so let's give this command which is a pseudo docker login and then give your username here i'm going to provide my username and then you need to provide your password so let me quickly provide my password and then press enter which is going to log me in the docker so you can see login succeeded and now i can just push my images to my docker hub registry so first thing we generally do in order to push the image to the registry is we just tag it so we can give this command which is a docker and then tag and then the name of your image my image name is hello you can also take the image id and then give the space and then give some tag to your image so right now because i want to push my uh docker image to this docker hub account and which has the username codebind i will just first of all write code bind here and then forward slash and then you can give the name of your image i will just leave it as hello and then you can give the tag of your image so i'm going to just give the tag 1.0.0 so this tag is useful whenever you want to just let's say keep working on your image and you want to update the image and want to just version your image into multiple versions so you have the track of all these versions right so i'm going to just tag my image i'm going to press enter and then i will once again list all the images and now you can see i have this image with the this name and i have the tag 1.0.0 right now once you do that you are ready to push your image to the docker registry the command is very simple sudo docker push and the name of your docker file which is codebind forward slash hello in my case you also need to give the tag here 1.0.0 and then you can just press enter which is going to push your image to your docker hub registry so just wait for some seconds and you can see it's pushed so i'm going to go to my docker hub web page and then refresh this web page and now i can see this image which is available here and also you will be able to see that this image is a public image so it's not private so anybody on docker can see your image right also when you click on this image you will be able to see more information about the image so here you can give that little description for your image and also you can even write the readme for your image uh what it's doing and what's the purpose of this image right so here is the general information about the image you can also see this tags uh section where you will be able to see uh the tags related to your image i only have one tag here and the size of this image is around 746 kilobyte right and also you can see how you can pull this image so you can just pull this image using docker pull codebind forward slash hello and then you need to use this tag you can just copy this and then pull this image also also you have the build section this is for the automation so if you are using github or bitbucket automation system then you can directly push your image from the github or bitbucket into your docker registry you also have the collaborator tab and then webhooks also and then you have the settings related to your docker image right so you can make it private if you want and also you can delete your image from this section right so let's say i just want to pull this image i will just copy this text and then i will just uh write sudo and then paste uh this test text uh which i have copied which is uh docker pull and the name of my image with the tag and it's going to pull this image if it's already not there on your operating system so this was the simple demonstration using which you can create your images and then push your images to the docker hub and then manage your images using the docker hub so i hope you've enjoyed this video and i will see you in the next video
