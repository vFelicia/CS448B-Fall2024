With timestamps:

00:01 - hey guys welcome to the next video on
00:02 - docker tutorial for beginners
00:04 - in this video we will talk about basics
00:07 - of
00:08 - docker file so first of all what is a
00:11 - docker file
00:13 - so docker can build images automatically
00:16 - by reading the instructions
00:18 - from the docker file and a docker file
00:22 - is a text
00:22 - document that contains all the commands
00:26 - a user could call on the command line
00:29 - to assemble an image now as i have
00:32 - previously told you
00:33 - you can use docker file and then
00:37 - once you write your instructions in the
00:39 - docker file you can build
00:40 - your docker file to produce a docker
00:44 - image
00:44 - and when you run the docker image it's
00:47 - called the docker container so let's see
00:49 - how we can create
00:50 - a docker file and then we will see how
00:54 - we can
00:55 - build our docker file to make an image
00:58 - so right now i'm in my home directory so
01:00 - here i'm going to
01:01 - create a directory called d1 let's say
01:06 - and then i'm going to cd in this
01:09 - d1 directory and right now
01:12 - it doesn't contain any files or folders
01:16 - so let's create our docker file in this
01:18 - d1 folder so i'm going to
01:21 - just write touch and then
01:24 - docker file so by convention
01:28 - we usually name our docker file
01:31 - as docker file with the capital d
01:35 - and this docker file doesn't contain any
01:38 - extension so it's without any extension
01:41 - so let's create this file so now i have
01:44 - this docker file
01:45 - in my deven folder right
01:49 - so now i'm going to open this docker
01:51 - file
01:52 - in any editor you can use
01:55 - the editor of your choice right from the
01:57 - nano
01:58 - vim or any editor i like to use
02:01 - the visual studio code editor so i'm
02:03 - going to use
02:04 - that so i'm going to just write code
02:07 - and then i'm going to just write dot
02:10 - which is going to
02:11 - open the current directory in
02:14 - my visual studio code so here i have
02:17 - this docker file
02:18 - right now in visual studio code there
02:22 - are many
02:23 - extensions you can install related to
02:26 - docker
02:26 - that's why i like to use this visual
02:29 - studio code
02:31 - and straight away when i open this
02:33 - docker file
02:34 - in my visual studio code i can see
02:37 - this pop-up which says docker extension
02:39 - is recommended for this file
02:42 - so you can click on this install button
02:45 - or you can just install this docker
02:48 - extension
02:50 - from this extension
02:53 - option here also so you can just search
02:55 - for
02:56 - docker here and then it will give you
02:59 - the most popular docker extension
03:01 - right so just choose the most popular
03:04 - one from here
03:05 - and i'm going to just install this
03:07 - docker extension
03:08 - and once this extension is installed
03:11 - it's going to help you
03:12 - with your docker files and
03:16 - docker commands in general okay
03:19 - so there are bunch of keywords which you
03:21 - can use
03:22 - inside your docker file and each keyword
03:26 - means something so we will start with
03:29 - the arg keyword so this arg
03:33 - keyword we can use to provide any
03:36 - argument as the name suggests and i'm
03:39 - going to explain
03:40 - this arg in detail after the
03:43 - other keyword which is from so here what
03:46 - i'm going to do is i'm going to
03:47 - just write version here and
03:51 - version equals i'm going to give here is
03:56 - 20.04 so version here is the name of the
03:59 - argument
04:00 - and 20.04 is the value of the argument
04:05 - now after this we are going to use
04:08 - another keyword
04:09 - which is from now this from defines the
04:12 - base image
04:13 - used to start the build process
04:16 - so there are many base images which you
04:19 - can
04:19 - find on the docker hub and we are going
04:22 - to
04:22 - use one such base image which is
04:26 - ubuntu and then after colon you can
04:29 - choose
04:29 - which version of ubuntu base image
04:33 - you want to have so here
04:36 - uh as i have defined this arg is equal
04:39 - to 20.04
04:40 - so we are going to fetch the ubuntu
04:43 - 20.04
04:44 - from the docker hub as our base image
04:48 - so how we can use this argument with
04:51 - this from uh keyword
04:54 - you just need to use this dollar symbol
04:58 - and then inside these curly brackets you
05:01 - just need to pass your argument so my
05:03 - argument name is version so
05:05 - i'm passing this argument here this
05:08 - means
05:09 - that we want to fetch the ubuntu 20.04
05:13 - image from the docker hub now this from
05:17 - instruction supports variable that are
05:20 - declared
05:21 - by any arg instruction that occurs
05:24 - before the first from and
05:28 - an arg declared before the from
05:31 - keyword is outside of the build stage
05:35 - so it can't be used in any instruction
05:38 - after from so now once we have the image
05:41 - we are going to use
05:43 - one more keyword which is the run
05:46 - keyword so this run is the central
05:49 - executing
05:50 - directive for the docker file so this
05:53 - run
05:53 - you can use to run commands using
05:57 - the docker file so for now i want to
06:00 - run inside this ubuntu base image
06:04 - apt get update command and also i'm
06:07 - going to give the flag
06:08 - y for yes and now let's move to the next
06:11 - command
06:12 - so the next command i'm going to use
06:14 - here is the cm
06:16 - d command so the cmd command can be
06:20 - used for executing a specific command
06:23 - within
06:24 - a container so let's say i just want to
06:27 - run the bash
06:28 - inside the container so i'm going to
06:30 - just use these
06:31 - square brackets and with the double
06:35 - quotes i'm going to just write
06:37 - bash here so this is a very basic docker
06:41 - file
06:42 - now let's see how we can just use this
06:45 - docker file to build
06:47 - some image so i'm going to open the
06:49 - terminal
06:50 - inside my visual studio code editor
06:54 - and as i can see i'm in my
06:57 - d1 directory which i have created and
07:00 - here i have this docker file
07:02 - right so now let's list out what are the
07:04 - docker images
07:05 - we have on our system so i'm going to
07:09 - just write a sudo docker
07:13 - images command to list out all the
07:15 - images
07:16 - and now i want to run or build this
07:20 - docker file
07:21 - and create an image so right now we have
07:24 - hello world and i want to create
07:27 - one more image using this docker file
07:30 - so to build a docker file
07:34 - you can give a command build
07:37 - so just write sudo docker
07:40 - build and then dot
07:43 - so when you run this docker build
07:46 - command
07:46 - the current working directory is called
07:49 - the build context and by default
07:53 - the docker file is assumed to be located
07:57 - in this directory but you can also
08:00 - specify
08:01 - the directory path using
08:04 - a flag called hyphen f that we will see
08:08 - a little bit later but just give this
08:10 - command
08:11 - for now which is sudo docker build
08:15 - space dot so now you can see
08:18 - that when we run this docker build
08:22 - command
08:22 - the build is run by the docker demon not
08:26 - by
08:26 - your cli so the first thing a build
08:30 - process does
08:30 - is to send the entire context
08:34 - to the docker daemon and that we can see
08:37 - here
08:37 - sending build context to the docker
08:40 - daemon now in most cases it's best
08:44 - to start with the empty directory
08:47 - and then you start adding your docker
08:50 - file
08:50 - in that directory now when you run this
08:53 - docker build command
08:55 - you will also see that these
08:58 - layers are fetched from
09:01 - your base image from the docker hub
09:05 - and also you will be able to see which
09:08 - step
09:08 - is executed so the step one out of four
09:12 - is this arg step step two
09:15 - is the from step and at this step it's
09:17 - going to pull the base image
09:19 - from the docker hub and you have some
09:23 - intermediate layers here
09:24 - which are created and then we have used
09:27 - this run command which
09:29 - in itself has created its own layer
09:32 - and it has installed the updates
09:36 - using this updates command and at last
09:38 - we have given this cmd command
09:41 - so now let's give the docker images
09:43 - command once again so i'm going to just
09:45 - give
09:46 - sudo docker images command and now
09:49 - you're going to see uh this ubuntu base
09:52 - image which is fetched
09:54 - from the docker hub and you have
09:58 - this image which doesn't have any name
10:00 - or
10:01 - tag because we haven't provided any name
10:04 - or tag to our docker image
10:08 - and this only have this image id which
10:11 - you can see
10:11 - here also which is successfully built
10:14 - this
10:15 - image id so using this image id you know
10:18 - that your image is created
10:22 - here now let's say you are in
10:25 - some other directory other than the
10:27 - directory in which your docker file is
10:30 - there
10:30 - so for building a docker file from
10:34 - some different directory you use
10:37 - the hyphen f flag so what you do here
10:41 - you just use sudo docker build and then
10:44 - hyphen f
10:46 - and then you just give the path to your
10:50 - docker file so when you give this
10:52 - command
10:53 - and then you need to provide the context
10:55 - also
10:56 - so you need to create this context
10:59 - inside
11:00 - this current directory so when you give
11:02 - this command
11:03 - it's also going to give you the same
11:05 - result so because we have effectively
11:07 - given the same command so
11:10 - we don't need to modify our image so
11:13 - once again when you give the docker
11:14 - images command it's going to show the
11:16 - same
11:17 - image because your image is not modified
11:21 - and you haven't changed your context
11:24 - which is your current
11:25 - directory now as you can see we don't
11:28 - have any name and tag to
11:31 - our image so if you want to provide
11:35 - the repository name and the tag for
11:38 - your image what you can do is you can
11:42 - give this docker build command
11:45 - and then give the hyphen t
11:48 - flag so using this hyphen t flag you can
11:51 - specify the repository
11:53 - and the tag at which you want to save
11:56 - your image
11:57 - so let's say i want to give the
11:58 - repository name as
12:00 - my underscore app
12:04 - and the tag which i want to give here is
12:07 - let's say one so after the colon you can
12:10 - provide the tag
12:11 - also here so when you run this command
12:15 - and don't forget to provide this context
12:17 - which is
12:18 - dot which is the current directory and
12:20 - then press enter
12:21 - it's going to just create the same
12:25 - image and you will see here an extra
12:27 - step
12:28 - is shown here which is tagged with
12:32 - my app colon 1. so at this step also
12:36 - you will observe that docker is smart
12:39 - enough
12:40 - to know that you want to create
12:44 - the same image from the same docker file
12:48 - and you haven't changed your docker
12:50 - files so it's not going to
12:52 - change your image or create or recreate
12:55 - your image once again because we haven't
12:58 - changed our docker file right
13:00 - we have just give the repository name
13:03 - and the tag
13:04 - so now when you give this command docker
13:08 - images
13:09 - then you will see that the repository
13:12 - name
13:13 - is my app and the tag associated with it
13:16 - is one so this is how you can give
13:20 - the repository name and the tag now
13:23 - if you will observe here we have
13:27 - our base image also here which is ubuntu
13:30 - 20.04
13:32 - so in future if you create different
13:35 - dockerfile and it requires the same
13:38 - ubuntu docker image and the same tag
13:42 - which is 20.04
13:44 - then your docker build command
13:47 - will be smart enough to know that and
13:50 - it's not going to pull
13:52 - this image from the docker hub again
13:55 - because you already have this image on
13:58 - your
13:58 - local pc so as i said we have fetched
14:01 - this ubuntu image
14:02 - and the version for it is 20.04
14:06 - here in the version if you don't know
14:09 - the version you can always
14:10 - write the latest so just write latest
14:14 - here
14:14 - and it's going to just fetch the latest
14:17 - version of
14:18 - the base image you want to have
14:21 - so let me just save this file with the
14:25 - latest
14:25 - version and then run the same command
14:28 - with hyphen t
14:29 - my app and the tag will be the same
14:32 - and the context will be the same and now
14:35 - you will see that it's going to
14:38 - fetch the latest version of ubuntu here
14:42 - and now when i give this
14:45 - docker images command you will see the
14:48 - tag
14:48 - latest here instead of 20.04 which was
14:52 - this
14:52 - more specific version i wanted
14:56 - right so latest is the latest version
14:59 - which will be available on the docker
15:02 - hub
15:02 - for this base image so those are some of
15:06 - the basics
15:07 - of docker files we are going to learn
15:09 - about docker files
15:10 - in the upcoming videos also so stay
15:13 - tuned
15:14 - and i will see you in the next video

Cleaned transcript:

hey guys welcome to the next video on docker tutorial for beginners in this video we will talk about basics of docker file so first of all what is a docker file so docker can build images automatically by reading the instructions from the docker file and a docker file is a text document that contains all the commands a user could call on the command line to assemble an image now as i have previously told you you can use docker file and then once you write your instructions in the docker file you can build your docker file to produce a docker image and when you run the docker image it's called the docker container so let's see how we can create a docker file and then we will see how we can build our docker file to make an image so right now i'm in my home directory so here i'm going to create a directory called d1 let's say and then i'm going to cd in this d1 directory and right now it doesn't contain any files or folders so let's create our docker file in this d1 folder so i'm going to just write touch and then docker file so by convention we usually name our docker file as docker file with the capital d and this docker file doesn't contain any extension so it's without any extension so let's create this file so now i have this docker file in my deven folder right so now i'm going to open this docker file in any editor you can use the editor of your choice right from the nano vim or any editor i like to use the visual studio code editor so i'm going to use that so i'm going to just write code and then i'm going to just write dot which is going to open the current directory in my visual studio code so here i have this docker file right now in visual studio code there are many extensions you can install related to docker that's why i like to use this visual studio code and straight away when i open this docker file in my visual studio code i can see this popup which says docker extension is recommended for this file so you can click on this install button or you can just install this docker extension from this extension option here also so you can just search for docker here and then it will give you the most popular docker extension right so just choose the most popular one from here and i'm going to just install this docker extension and once this extension is installed it's going to help you with your docker files and docker commands in general okay so there are bunch of keywords which you can use inside your docker file and each keyword means something so we will start with the arg keyword so this arg keyword we can use to provide any argument as the name suggests and i'm going to explain this arg in detail after the other keyword which is from so here what i'm going to do is i'm going to just write version here and version equals i'm going to give here is 20.04 so version here is the name of the argument and 20.04 is the value of the argument now after this we are going to use another keyword which is from now this from defines the base image used to start the build process so there are many base images which you can find on the docker hub and we are going to use one such base image which is ubuntu and then after colon you can choose which version of ubuntu base image you want to have so here uh as i have defined this arg is equal to 20.04 so we are going to fetch the ubuntu 20.04 from the docker hub as our base image so how we can use this argument with this from uh keyword you just need to use this dollar symbol and then inside these curly brackets you just need to pass your argument so my argument name is version so i'm passing this argument here this means that we want to fetch the ubuntu 20.04 image from the docker hub now this from instruction supports variable that are declared by any arg instruction that occurs before the first from and an arg declared before the from keyword is outside of the build stage so it can't be used in any instruction after from so now once we have the image we are going to use one more keyword which is the run keyword so this run is the central executing directive for the docker file so this run you can use to run commands using the docker file so for now i want to run inside this ubuntu base image apt get update command and also i'm going to give the flag y for yes and now let's move to the next command so the next command i'm going to use here is the cm d command so the cmd command can be used for executing a specific command within a container so let's say i just want to run the bash inside the container so i'm going to just use these square brackets and with the double quotes i'm going to just write bash here so this is a very basic docker file now let's see how we can just use this docker file to build some image so i'm going to open the terminal inside my visual studio code editor and as i can see i'm in my d1 directory which i have created and here i have this docker file right so now let's list out what are the docker images we have on our system so i'm going to just write a sudo docker images command to list out all the images and now i want to run or build this docker file and create an image so right now we have hello world and i want to create one more image using this docker file so to build a docker file you can give a command build so just write sudo docker build and then dot so when you run this docker build command the current working directory is called the build context and by default the docker file is assumed to be located in this directory but you can also specify the directory path using a flag called hyphen f that we will see a little bit later but just give this command for now which is sudo docker build space dot so now you can see that when we run this docker build command the build is run by the docker demon not by your cli so the first thing a build process does is to send the entire context to the docker daemon and that we can see here sending build context to the docker daemon now in most cases it's best to start with the empty directory and then you start adding your docker file in that directory now when you run this docker build command you will also see that these layers are fetched from your base image from the docker hub and also you will be able to see which step is executed so the step one out of four is this arg step step two is the from step and at this step it's going to pull the base image from the docker hub and you have some intermediate layers here which are created and then we have used this run command which in itself has created its own layer and it has installed the updates using this updates command and at last we have given this cmd command so now let's give the docker images command once again so i'm going to just give sudo docker images command and now you're going to see uh this ubuntu base image which is fetched from the docker hub and you have this image which doesn't have any name or tag because we haven't provided any name or tag to our docker image and this only have this image id which you can see here also which is successfully built this image id so using this image id you know that your image is created here now let's say you are in some other directory other than the directory in which your docker file is there so for building a docker file from some different directory you use the hyphen f flag so what you do here you just use sudo docker build and then hyphen f and then you just give the path to your docker file so when you give this command and then you need to provide the context also so you need to create this context inside this current directory so when you give this command it's also going to give you the same result so because we have effectively given the same command so we don't need to modify our image so once again when you give the docker images command it's going to show the same image because your image is not modified and you haven't changed your context which is your current directory now as you can see we don't have any name and tag to our image so if you want to provide the repository name and the tag for your image what you can do is you can give this docker build command and then give the hyphen t flag so using this hyphen t flag you can specify the repository and the tag at which you want to save your image so let's say i want to give the repository name as my underscore app and the tag which i want to give here is let's say one so after the colon you can provide the tag also here so when you run this command and don't forget to provide this context which is dot which is the current directory and then press enter it's going to just create the same image and you will see here an extra step is shown here which is tagged with my app colon 1. so at this step also you will observe that docker is smart enough to know that you want to create the same image from the same docker file and you haven't changed your docker files so it's not going to change your image or create or recreate your image once again because we haven't changed our docker file right we have just give the repository name and the tag so now when you give this command docker images then you will see that the repository name is my app and the tag associated with it is one so this is how you can give the repository name and the tag now if you will observe here we have our base image also here which is ubuntu 20.04 so in future if you create different dockerfile and it requires the same ubuntu docker image and the same tag which is 20.04 then your docker build command will be smart enough to know that and it's not going to pull this image from the docker hub again because you already have this image on your local pc so as i said we have fetched this ubuntu image and the version for it is 20.04 here in the version if you don't know the version you can always write the latest so just write latest here and it's going to just fetch the latest version of the base image you want to have so let me just save this file with the latest version and then run the same command with hyphen t my app and the tag will be the same and the context will be the same and now you will see that it's going to fetch the latest version of ubuntu here and now when i give this docker images command you will see the tag latest here instead of 20.04 which was this more specific version i wanted right so latest is the latest version which will be available on the docker hub for this base image so those are some of the basics of docker files we are going to learn about docker files in the upcoming videos also so stay tuned and i will see you in the next video
