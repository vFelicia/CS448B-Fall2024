With timestamps:

00:00 - hello guys in this video I'm going to
00:02 - show you what are abstract classes and
00:04 - how to use abstract classes in
00:07 - cop so generally or commonly you would
00:11 - like sometimes to make classes that only
00:16 - represent base classes and you don't
00:19 - want anyone to create the object of
00:21 - these classes so you can make these uh
00:26 - classes by using abstract classes so an
00:31 - abstract class means that no object of
00:35 - this class can be instantiated or
00:38 - created but they can be used as base
00:42 - classes so you can derive from these
00:44 - classes but they cannot be used as
00:47 - normal classes they can only be used as
00:50 - base classes okay so let's see how we
00:54 - can declare abstract classes first of
00:57 - all so for declaring abstract class you
01:00 - just declare a normal class so
01:04 - just public and with a keyword abstract
01:09 - abstract and then your class and the
01:14 - class name for
01:17 - example meter okay and then just close
01:22 - these curly braces and that's the
01:25 - Declaration of your class okay so you
01:28 - can declare a ract class by using the
01:31 - keyword
01:32 - abstract now whenever you create this
01:36 - abstract class it can contain abstract
01:40 - method like this so you can
01:45 - write abstract but first of all we will
01:48 - give exess
01:53 - modifier public
01:56 - abstract
01:58 - void of for
02:00 - [Music]
02:02 - example
02:04 - print meter one
02:07 - okay and whenever you declare a abstract
02:12 - method inside abstract class you cannot
02:15 - provide the definition to this method
02:18 - right so for example if you want to
02:21 - provide some definition to this method
02:23 - like this and when you compile your
02:26 - program it will not be compiled and it
02:29 - will show an error because abstract
02:32 - method inside abstract class cannot have
02:35 - definition this is just an declaration
02:39 - or you can only give a prototype of this
02:42 - method and not the actual definition but
02:46 - on the other hand abstract class can
02:49 - also contain normal method okay for
02:52 - example I want to declare some other
02:55 - method which is not abstract and this
02:58 - method is for example print meter 2 I
03:02 - can provide definition to this
03:06 - method okay and compile fine build
03:10 - solution build succeeded okay so if you
03:14 - provide abstract method inside the
03:16 - abstract class then you cannot provide
03:18 - definition to this class to this
03:20 - method on the other hand if you provide
03:23 - a normal method inside abstract class
03:26 - you can easily provide the definition to
03:28 - this class
03:30 - and it's not necessary that your
03:33 - abstract class has to contain some
03:36 - abstract method you can even use a
03:40 - abstract class which only has normal
03:43 - methods it's totally fine to use normal
03:47 - method inside your abstract class it's
03:49 - not necessary that you has to use
03:51 - abstract method inside abstract
03:54 - class now how can we do or how can we
03:58 - use this AB ract
04:01 - class in our program so I told you
04:05 - abstract classes can be used as a base
04:08 - class for example I have the class
04:11 - called example one in which I have a
04:13 - main method in here I can just derive
04:17 - from this meter class which is a base
04:21 - class and this base class or this
04:24 - example class is deriving this or is
04:29 - this
04:30 - is inheriting example one is inheriting
04:33 - this meter one class then what you can
04:37 - do for example you want to provide the
04:40 - definition of print one because print
04:42 - two definition is already there right so
04:46 - let me give this
04:48 - definition
04:52 - console
04:55 - dot wh
04:57 - line and I can give an any message here
05:01 - okay for example we are
05:08 - in
05:09 - meter print 2 okay but this we cannot
05:16 - define the definition of this method
05:18 - inside here so we can inherit this um
05:22 - class and then we can define the
05:24 - definition of this class how you can do
05:27 - this you can do it normally just use the
05:32 - signature of
05:34 - your method so just copy this
05:39 - here and instead of using abstract you
05:43 - need to use
05:45 - override override okay to give the
05:49 - definition to this method and now you
05:52 - can give the definition to this method
05:55 - like this
05:58 - console right Line This
06:01 - is meter print one okay and you can just
06:07 - use these abstract classes like
06:11 - this so go to your main method and you
06:15 - can define an object of this example one
06:20 - class
06:22 - ex one for example is equal
06:26 - to new example one
06:31 - and then you can use this ex1 object for
06:34 - example to print this message dot print
06:38 - one or print two right so you can print
06:43 - one like this and you can use print
06:49 - two like this print two okay and when I
06:55 - run the
06:56 - program you can see both the messages
06:59 - which I've written in method print one
07:01 - and print two
07:04 - okay
07:06 - so there are some properties related to
07:10 - abstract class and what are these
07:13 - properties first property is abstract
07:17 - class cannot be sealed class so there is
07:21 - a keyword called sealed so when I use
07:25 - this
07:27 - keyword sealed this sealed keyword means
07:33 - that
07:34 - this meter class or this class which is
07:37 - sealed cannot be used as a base class
07:41 - and that's not true you cannot use
07:43 - sealed and Abstract at the same time
07:47 - because on on the first hand this sealed
07:51 - means this meter cannot be used as a
07:53 - base class and the definition of
07:56 - abstract says the class can not can
07:59 - abstract class can only be used as a
08:02 - base class so this and this keyword will
08:06 - contradict so you Cann not use sealed
08:08 - keyword with this uh abstract class okay
08:14 - the second rule is you cannot have uh
08:19 - the method in abstract class which are
08:22 - private members so for example for for
08:25 - example you want to declare this method
08:28 - in some your abstract class as a private
08:33 - member
08:35 - private okay and let's compile this and
08:39 - see what happens it says virtual or
08:43 - abstract member cannot be private okay
08:46 - so you
08:47 - cannot have a private member inside your
08:51 - abstract class the third rule is an
08:55 - abstract method cannot have virtual
09:00 - ual method or modifier called virtual
09:04 - okay so for example we use uh when you
09:10 - when we have learned polymorphism we
09:13 - were using virtual keyword to declare a
09:18 - method prototype so that it can be
09:21 - defined somewhere else so for example I
09:25 - want to write something like
09:28 - this
09:30 - virtual public abstract virtual void
09:33 - it's not uh allowed when you use uh this
09:37 - abstract classes and when I run this
09:40 - program it will give me an error and
09:43 - which says this method cannot be virtual
09:47 - so abstract class method cannot be
09:50 - virtual
09:53 - okay and the last thing is you cannot
09:57 - Define a method in inside your abstract
10:00 - class as static okay so suppose you want
10:04 - to declare a method like this public
10:07 - static uh public
10:10 - abstract static then you cannot do this
10:14 - this is also not allowed okay so when
10:16 - you compile this program it will give
10:19 - you that your method you cannot declare
10:22 - this method as static so what are the
10:25 - conditions we have learned that P your
10:29 - abstract class cannot be sealed your
10:32 - abstract class method cannot be private
10:36 - and your you cannot use a modifier
10:39 - virtual in the definition of your or in
10:42 - the prototyping of your method in
10:44 - abstract class and you cannot even use
10:48 - the keyword static in the prototyping of
10:52 - your method inside your uh abstract
10:57 - class so in this F you can use abstract
11:00 - classes in C and just remember those uh
11:05 - properties of abstract classes which
11:07 - will be useful in your application so I
11:10 - hope you have enjoyed this video please
11:11 - rate comment and subscribe and bye for

Cleaned transcript:

hello guys in this video I'm going to show you what are abstract classes and how to use abstract classes in cop so generally or commonly you would like sometimes to make classes that only represent base classes and you don't want anyone to create the object of these classes so you can make these uh classes by using abstract classes so an abstract class means that no object of this class can be instantiated or created but they can be used as base classes so you can derive from these classes but they cannot be used as normal classes they can only be used as base classes okay so let's see how we can declare abstract classes first of all so for declaring abstract class you just declare a normal class so just public and with a keyword abstract abstract and then your class and the class name for example meter okay and then just close these curly braces and that's the Declaration of your class okay so you can declare a ract class by using the keyword abstract now whenever you create this abstract class it can contain abstract method like this so you can write abstract but first of all we will give exess modifier public abstract void of for example print meter one okay and whenever you declare a abstract method inside abstract class you cannot provide the definition to this method right so for example if you want to provide some definition to this method like this and when you compile your program it will not be compiled and it will show an error because abstract method inside abstract class cannot have definition this is just an declaration or you can only give a prototype of this method and not the actual definition but on the other hand abstract class can also contain normal method okay for example I want to declare some other method which is not abstract and this method is for example print meter 2 I can provide definition to this method okay and compile fine build solution build succeeded okay so if you provide abstract method inside the abstract class then you cannot provide definition to this class to this method on the other hand if you provide a normal method inside abstract class you can easily provide the definition to this class and it's not necessary that your abstract class has to contain some abstract method you can even use a abstract class which only has normal methods it's totally fine to use normal method inside your abstract class it's not necessary that you has to use abstract method inside abstract class now how can we do or how can we use this AB ract class in our program so I told you abstract classes can be used as a base class for example I have the class called example one in which I have a main method in here I can just derive from this meter class which is a base class and this base class or this example class is deriving this or is this is inheriting example one is inheriting this meter one class then what you can do for example you want to provide the definition of print one because print two definition is already there right so let me give this definition console dot wh line and I can give an any message here okay for example we are in meter print 2 okay but this we cannot define the definition of this method inside here so we can inherit this um class and then we can define the definition of this class how you can do this you can do it normally just use the signature of your method so just copy this here and instead of using abstract you need to use override override okay to give the definition to this method and now you can give the definition to this method like this console right Line This is meter print one okay and you can just use these abstract classes like this so go to your main method and you can define an object of this example one class ex one for example is equal to new example one and then you can use this ex1 object for example to print this message dot print one or print two right so you can print one like this and you can use print two like this print two okay and when I run the program you can see both the messages which I've written in method print one and print two okay so there are some properties related to abstract class and what are these properties first property is abstract class cannot be sealed class so there is a keyword called sealed so when I use this keyword sealed this sealed keyword means that this meter class or this class which is sealed cannot be used as a base class and that's not true you cannot use sealed and Abstract at the same time because on on the first hand this sealed means this meter cannot be used as a base class and the definition of abstract says the class can not can abstract class can only be used as a base class so this and this keyword will contradict so you Cann not use sealed keyword with this uh abstract class okay the second rule is you cannot have uh the method in abstract class which are private members so for example for for example you want to declare this method in some your abstract class as a private member private okay and let's compile this and see what happens it says virtual or abstract member cannot be private okay so you cannot have a private member inside your abstract class the third rule is an abstract method cannot have virtual ual method or modifier called virtual okay so for example we use uh when you when we have learned polymorphism we were using virtual keyword to declare a method prototype so that it can be defined somewhere else so for example I want to write something like this virtual public abstract virtual void it's not uh allowed when you use uh this abstract classes and when I run this program it will give me an error and which says this method cannot be virtual so abstract class method cannot be virtual okay and the last thing is you cannot Define a method in inside your abstract class as static okay so suppose you want to declare a method like this public static uh public abstract static then you cannot do this this is also not allowed okay so when you compile this program it will give you that your method you cannot declare this method as static so what are the conditions we have learned that P your abstract class cannot be sealed your abstract class method cannot be private and your you cannot use a modifier virtual in the definition of your or in the prototyping of your method in abstract class and you cannot even use the keyword static in the prototyping of your method inside your uh abstract class so in this F you can use abstract classes in C and just remember those uh properties of abstract classes which will be useful in your application so I hope you have enjoyed this video please rate comment and subscribe and bye for
