With timestamps:

00:01 - hello guys welcome to the next video on
00:02 - nodejs tutorial for beginners and in
00:05 - this video I'm going to show you how we
00:06 - can use file system module in nodejs
00:10 - which is a built-in module now node
00:14 - implements file IO using simple rapper
00:18 - around the standard posix functions and
00:22 - this is done using node file system
00:24 - module or simply FS module in nodejs
00:30 - now uh let's see first of all how we can
00:33 - add FS module so just write VAR FS is
00:37 - equal to
00:40 - require and then you just add FS okay
00:45 - and this is how you can add FS module
00:48 - now this FS module you can use for
00:52 - various uh input output uh functions
00:57 - related to file system in this uh video
01:00 - particularly we are going to re see how
01:03 - we can use this FS module to read and
01:06 - write to a file synchronously and
01:10 - asynchronously right so first of all we
01:13 - will use this uh file to uh read from a
01:17 - file synchronously but for that we need
01:20 - a file text file which we can read so
01:23 - I'm going to create a text file for
01:26 - example I will name it as test do
01:31 - txt and in this text file uh I'm going
01:36 - to write some things and let's uh you
01:40 - know copy and paste this line okay so
01:44 - this is what we want to read from our
01:48 - file system object which we have uh you
01:53 - know uh created using this file system
01:55 - module so for reading this file syn
02:00 - synchronously what we can do is we can
02:03 - just use uh file and first of all we
02:06 - need to assign this uh output which we
02:09 - read so we can just write uh VAR and
02:13 - then uh we can just
02:17 - say uh
02:21 - red string is equal to FS
02:26 - dot read file sync okay so just write
02:31 - read
02:33 - file
02:35 - sync and this method will allow us to
02:39 - read our file synchronously okay and
02:43 - then give the name of your file and
02:46 - because this file is in the same folder
02:49 - you just need to give the name of the
02:51 - file not the path because it's in the
02:53 - same folder so just write test.txt and
02:57 - the second argument which uh we want to
02:59 - pass pass here will be the encoding type
03:03 - so just write U for example
03:06 - utf8 and now let's try to print whatever
03:10 - we have uh you know read from the file
03:13 - to the console so just write
03:16 - uh console do log and we will just uh
03:23 - print this string here whatever we have
03:27 - read so it should be
03:30 - red string and then we are going to run
03:33 - it so open your terminal and just run it
03:37 - using node
03:39 - app.js and you can see uh our file is
03:44 - red so our file content let's see what
03:47 - was the file content and what the
03:50 - terminal is showing right so same
03:53 - content as the file so this file system
03:58 - module enables us to read the file
04:01 - synchronously and if you want to uh
04:03 - write this file to uh another file or
04:07 - write the content of uh the file which
04:10 - you have read to another file new file
04:13 - for example what we can do so we can
04:16 - just write FS do write file sync so just
04:21 - write write
04:24 - file sync and then just pass uh this uh
04:30 - result to the argument okay so right
04:36 - right file sync can be used to write to
04:39 - the file synchronously right and this fi
04:44 - write file uh method takes two uh
04:47 - argument the first will be the name of
04:50 - your file so let's create the name for
04:55 - example test
04:58 - 2.txt
05:00 - okay and the second argument is the
05:03 - content itself right and uh let's run
05:08 - our code and let's see what happens this
05:10 - time so just uh see here what happens
05:13 - here whenever we will run this code and
05:17 - you can see this text two is created
05:20 - when we run the code and the content of
05:23 - text 2 is same as test 1.txt or
05:28 - test.txt
05:30 - right so in this way you can uh use this
05:33 - to read and write to the file
05:37 - synchronously now FS module also have
05:40 - the async method and uh this will allow
05:44 - uh us to read or write to a file
05:48 - asynchronously right so this for this we
05:52 - just need to use the method called file
05:55 - name without sync so uh by default
06:01 - if you know about nodejs nodejs is a
06:05 - asynchronous uh you know program so
06:08 - whenever you write the program it runs
06:11 - asynchronously and what I mean by
06:14 - asynchronous uh is I'm going to show you
06:17 - in just a second so just uh write this
06:23 - once again we want to read the content
06:25 - of uh test. txt file and uh just just uh
06:30 - call a method read file and the first
06:32 - argument will be the same and the second
06:36 - argument we want to uh pass here is the
06:39 - call back method or let's
06:43 - say we can do it in the uh last argument
06:47 - also right so just write function and
06:51 - then just say error as a first argument
06:56 - and data as the second argument okay
07:00 - and then give a curly bracket here and
07:03 - press enter and in here for example if
07:08 - there is some problem in Reading we want
07:11 - to uh return error so just call this uh
07:16 - argument first argument which we have
07:18 - passed in the call back function which
07:19 - is this one and then we can console
07:23 - error right so just
07:27 - write return
07:31 - console
07:33 - dot error and then pass this error here
07:38 - as an argument okay otherwise if uh
07:42 - there is no error in Reading we can just
07:45 - console log the content so instead of uh
07:49 - console log outside the you know read
07:53 - file uh method we can just you know call
07:57 - it inside our call back okay okay
08:00 - something like
08:01 - this and the argument which it takes now
08:06 - is data because data will contain your
08:10 - content of your file which you have read
08:13 - okay for now let's uh remove this line
08:17 - of code and in here we will just
08:20 - call
08:22 - console log and let's say we just want
08:27 - to print the file
08:30 - is red for example okay and let's run
08:34 - the code once again and let's see what
08:36 - happens so what I'm going to do is I'm
08:39 - going to run the F program once again or
08:42 - code once again and you can see the
08:45 - output here it's little bit different
08:48 - from earlier that first of all the
08:53 - terminal prints or this program prints
08:56 - the file is red which is this line and
08:59 - then it prints all the content of the
09:02 - file which was there inside the file so
09:06 - this is done in asynchronous manner
09:09 - right so what's happening here is nodejs
09:14 - starts the server for example and this
09:18 - uh method is uh reading the file if the
09:22 - file is for example very big what
09:25 - happens then so you want to you know in
09:29 - real life situation when uh you are
09:32 - dealing with real data you need to do
09:35 - your stuff asynchronously right because
09:40 - otherwise your code will block uh this
09:44 - you know uh running of your uh server
09:47 - and other things cannot happens if one
09:51 - process or one uh you know uh file
09:54 - reading is taking very long time but
09:58 - this way of of uh you know uh executing
10:01 - your code asynchronously will help you
10:04 - to you know run you know your code in a
10:09 - very uh good manner because your code is
10:13 - not waiting for the reading of your file
10:16 - but it's executing the next step and the
10:19 - next step once again if there will be
10:23 - some more you know useful code below
10:26 - this also then it's going to execute it
10:29 - and and once the file is read it's going
10:32 - to print the content of the file using
10:35 - this console log so the call back
10:39 - function this function is called
10:41 - callback function and it is triggered
10:44 - whenever the you know file is read
10:49 - completely right so this is how uh
10:54 - asynchronous uh you know way of uh
10:57 - reading file works okay in the same way
11:01 - you can um write to the file
11:04 - asynchronously also and you just need to
11:08 - uh you know call fs. write file and then
11:13 - the you know name of the file in which
11:16 - you want to write to so let's do that
11:19 - and let's see what happens so FS
11:23 - do write file and the first argument
11:29 - will be this argument the second
11:32 - argument would be the content which we
11:34 - want to write for example we want to
11:36 - write uh this data which we are reading
11:39 - from the first file for example and the
11:42 - third argument will be the same as we
11:45 - have done here the call back right so
11:48 - you can just copy this much amount of
11:51 - code before uh the bracket and then pass
11:54 - it here and we can just add uh semicolon
12:00 - here okay and uh this is just checking
12:03 - whether your file is written and if it's
12:06 - not written it's going to uh you know
12:08 - console log the error and if uh it's
12:13 - written then we can uh say success for
12:17 - example we can just print
12:20 - success right something like this and
12:23 - when you run your code once again it's
12:27 - going to write it so let's run it and
12:32 - program is done and at last it prints
12:35 - success and you can see the file is also
12:38 - created test do uh text right so in this
12:43 - way you can use uh FS module in nodejs
12:48 - uh there is more you know functionality
12:51 - in this FS module which you can find um
12:54 - on the nodejs site so go to nodejs.org
13:00 - /i/ fs. HTML and in here you uh can go
13:07 - here file system or you will be able to
13:10 - uh you know find more method related to
13:13 - this FS module here and there are so
13:17 - many method which you can use so just go
13:21 - through uh this documentation and then
13:24 - you will be good to go so I hope you
13:26 - have enjoyed this video please RIT com
13:28 - And subscribe and bye not

Cleaned transcript:

hello guys welcome to the next video on nodejs tutorial for beginners and in this video I'm going to show you how we can use file system module in nodejs which is a builtin module now node implements file IO using simple rapper around the standard posix functions and this is done using node file system module or simply FS module in nodejs now uh let's see first of all how we can add FS module so just write VAR FS is equal to require and then you just add FS okay and this is how you can add FS module now this FS module you can use for various uh input output uh functions related to file system in this uh video particularly we are going to re see how we can use this FS module to read and write to a file synchronously and asynchronously right so first of all we will use this uh file to uh read from a file synchronously but for that we need a file text file which we can read so I'm going to create a text file for example I will name it as test do txt and in this text file uh I'm going to write some things and let's uh you know copy and paste this line okay so this is what we want to read from our file system object which we have uh you know uh created using this file system module so for reading this file syn synchronously what we can do is we can just use uh file and first of all we need to assign this uh output which we read so we can just write uh VAR and then uh we can just say uh red string is equal to FS dot read file sync okay so just write read file sync and this method will allow us to read our file synchronously okay and then give the name of your file and because this file is in the same folder you just need to give the name of the file not the path because it's in the same folder so just write test.txt and the second argument which uh we want to pass pass here will be the encoding type so just write U for example utf8 and now let's try to print whatever we have uh you know read from the file to the console so just write uh console do log and we will just uh print this string here whatever we have read so it should be red string and then we are going to run it so open your terminal and just run it using node app.js and you can see uh our file is red so our file content let's see what was the file content and what the terminal is showing right so same content as the file so this file system module enables us to read the file synchronously and if you want to uh write this file to uh another file or write the content of uh the file which you have read to another file new file for example what we can do so we can just write FS do write file sync so just write write file sync and then just pass uh this uh result to the argument okay so right right file sync can be used to write to the file synchronously right and this fi write file uh method takes two uh argument the first will be the name of your file so let's create the name for example test 2.txt okay and the second argument is the content itself right and uh let's run our code and let's see what happens this time so just uh see here what happens here whenever we will run this code and you can see this text two is created when we run the code and the content of text 2 is same as test 1.txt or test.txt right so in this way you can uh use this to read and write to the file synchronously now FS module also have the async method and uh this will allow uh us to read or write to a file asynchronously right so this for this we just need to use the method called file name without sync so uh by default if you know about nodejs nodejs is a asynchronous uh you know program so whenever you write the program it runs asynchronously and what I mean by asynchronous uh is I'm going to show you in just a second so just uh write this once again we want to read the content of uh test. txt file and uh just just uh call a method read file and the first argument will be the same and the second argument we want to uh pass here is the call back method or let's say we can do it in the uh last argument also right so just write function and then just say error as a first argument and data as the second argument okay and then give a curly bracket here and press enter and in here for example if there is some problem in Reading we want to uh return error so just call this uh argument first argument which we have passed in the call back function which is this one and then we can console error right so just write return console dot error and then pass this error here as an argument okay otherwise if uh there is no error in Reading we can just console log the content so instead of uh console log outside the you know read file uh method we can just you know call it inside our call back okay okay something like this and the argument which it takes now is data because data will contain your content of your file which you have read okay for now let's uh remove this line of code and in here we will just call console log and let's say we just want to print the file is red for example okay and let's run the code once again and let's see what happens so what I'm going to do is I'm going to run the F program once again or code once again and you can see the output here it's little bit different from earlier that first of all the terminal prints or this program prints the file is red which is this line and then it prints all the content of the file which was there inside the file so this is done in asynchronous manner right so what's happening here is nodejs starts the server for example and this uh method is uh reading the file if the file is for example very big what happens then so you want to you know in real life situation when uh you are dealing with real data you need to do your stuff asynchronously right because otherwise your code will block uh this you know uh running of your uh server and other things cannot happens if one process or one uh you know uh file reading is taking very long time but this way of of uh you know uh executing your code asynchronously will help you to you know run you know your code in a very uh good manner because your code is not waiting for the reading of your file but it's executing the next step and the next step once again if there will be some more you know useful code below this also then it's going to execute it and and once the file is read it's going to print the content of the file using this console log so the call back function this function is called callback function and it is triggered whenever the you know file is read completely right so this is how uh asynchronous uh you know way of uh reading file works okay in the same way you can um write to the file asynchronously also and you just need to uh you know call fs. write file and then the you know name of the file in which you want to write to so let's do that and let's see what happens so FS do write file and the first argument will be this argument the second argument would be the content which we want to write for example we want to write uh this data which we are reading from the first file for example and the third argument will be the same as we have done here the call back right so you can just copy this much amount of code before uh the bracket and then pass it here and we can just add uh semicolon here okay and uh this is just checking whether your file is written and if it's not written it's going to uh you know console log the error and if uh it's written then we can uh say success for example we can just print success right something like this and when you run your code once again it's going to write it so let's run it and program is done and at last it prints success and you can see the file is also created test do uh text right so in this way you can use uh FS module in nodejs uh there is more you know functionality in this FS module which you can find um on the nodejs site so go to nodejs.org /i/ fs. HTML and in here you uh can go here file system or you will be able to uh you know find more method related to this FS module here and there are so many method which you can use so just go through uh this documentation and then you will be good to go so I hope you have enjoyed this video please RIT com And subscribe and bye not
