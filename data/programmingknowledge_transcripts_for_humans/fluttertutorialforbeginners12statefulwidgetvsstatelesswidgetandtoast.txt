With timestamps:

00:00 - welcome to programming knowledge so in
00:03 - this video we are going to add some
00:05 - functionality to our application because
00:08 - till now what we have done is we have
00:10 - just added UI elements and we have seen
00:12 - different ways to add multiple UI
00:15 - elements but our application is not
00:17 - functional ok so to add functionality
00:21 - let's say that instead of print presses
00:25 - I want to display a toast
00:28 - ok so the first thing that toast is not
00:32 - prefabricated in flutter we need to add
00:34 - the extension okay and the place where
00:38 - you can find all the flutter extension
00:40 - is this path is this website pub dot de
00:45 - Vie and over here if you search for
00:47 - toast then you will find this toast is
00:50 - zero point one point five and there are
00:53 - other extensions also but I prefer to
00:56 - use this one okay so now you can see
00:59 - over here it is written how to use and
01:01 - then the first thing is this toast colon
01:05 - and then a sign then zero point one
01:09 - point five this is basically the line to
01:11 - install this dependency in our project
01:14 - now in most of the extensions how to
01:19 - download is not written over here so you
01:21 - can also find it in the installing
01:23 - section okay so I will just copy it from
01:26 - here and as we discussed earlier we need
01:32 - to add all the extensions in our pub
01:35 - spec dot the ML file so over there I'll
01:38 - add this file ok inside this the
01:42 - dependencies section and at the same
01:45 - line we have this flutter written okay
01:48 - now if I save this it will automatically
01:51 - start getting the extension in our file
01:54 - in our application ok so after this and
02:00 - now we can use that extension in our
02:03 - application so to use that extension
02:06 - again in my readme you can see the first
02:08 - thing that we need to
02:10 - we need to import this package so I will
02:13 - just copy it from here
02:15 - and I'll paste it below this so now this
02:19 - file is inside our application and now
02:25 - to use the now to display a toast we
02:28 - write toast dot show and then the text
02:31 - that is message then the context and we
02:35 - have the context that is build context
02:38 - okay that day we have in our every
02:40 - application okay then after that we have
02:43 - this duration then gravity then text
02:47 - color background color background radius
02:49 - and border okay so now you can see the
02:52 - background color has a default color of
02:54 - this so over here 0 X stands for
02:58 - hexadecimal that means the code is in
03:00 - hexadecimal the last six digits stands
03:04 - for the color code and then the first
03:07 - two digits after X stands for opacity
03:11 - okay so now to display our toast we'll
03:15 - use this line so instead of console
03:19 - logging I'll write toast
03:26 - not show and the message is close to
03:34 - demo okay so now let's try running this
03:38 - okay so once the application starts
03:41 - running if you click on this press so
03:44 - instead of showing anything it is giving
03:47 - me a list of errors over here okay and
03:50 - the main error is unimplemented handling
03:52 - of missing static target okay so this
03:56 - means that we are trying to add
03:59 - functionality in a stateless with jet
04:02 - class okay so that means that is because
04:05 - the basic functionality of stateless
04:07 - with jet is to just create a static page
04:11 - okay that means if this page is created
04:13 - like this then we can't change it while
04:16 - the application is running okay and if
04:18 - you want to display a toaster then that
04:20 - means the look of the page will change
04:23 - and the page will not be static and that
04:26 - will defy the functionality of stateless
04:28 - widget okay so to solve that problem we
04:32 - have another base class in our material
04:34 - dot dot and that is called stateful
04:37 - widget okay so you can see stateless and
04:39 - stateful they both are contrary and so
04:42 - is their features so to create a
04:44 - stateful widget we just write SDF or
04:48 - something like that and over here you
04:49 - get flutter stateful widget and then
04:52 - let's give this class on him so let's
04:55 - say my home app okay so now you can see
04:58 - a class my home app is created and it
05:01 - extends stateful with you then inside
05:04 - this we have my home app state that is
05:07 - the app state ok and it calls a method
05:10 - called create state then after that we
05:12 - have another class called my home app
05:14 - state and it extends state ok so this is
05:18 - the basic code that we need to write for
05:20 - every stateful with it and flutter and
05:23 - vs code helps us in writing this ok and
05:27 - if you want to know what what are the
05:30 - functionalities of these functions then
05:32 - you can simply go to flutter
05:38 - and open the first link and then over
05:43 - here go to Doc's okay so now instead of
05:48 - returning a container I want to return
05:50 - this scaffold that I have over here so
05:53 - I'll just cut it from here and paste it
05:59 - over here
06:07 - okay and now over here the home will be
06:10 - my this my home map class so I'll write
06:13 - mine Oh Mac
06:16 - okay now I'll again format this and try
06:21 - running this okay instead of running I
06:23 - will reload this okay once reloaded you
06:27 - can see everything is still the same
06:29 - and now I'll remove this to text okay
06:33 - just for now again run this okay so once
06:41 - the application starts running now if we
06:44 - click on press than we are able to see
06:46 - our toast so that means if we are inside
06:49 - a stateful with it we can change the
06:52 - state means the application is not
06:54 - static but it is suggested that when we
06:58 - don't need to change the state we should
07:00 - use stateless with it okay so now let's
07:04 - explore this toast of it so over here
07:07 - you can see the it also takes more
07:11 - parameters and the duration is toast dot
07:14 - length short that is the default
07:16 - parameter the gravity is toast dot bat
07:19 - bottom that is also default and we can
07:22 - override it okay so far let's overwrite
07:25 - the duration to length long so I'll
07:28 - write duration toast dot length long and
07:38 - now if I save this so now that text will
07:42 - be now the toast will be displayed for a
07:44 - longer period of time and you can see
07:48 - that okay similarly I can also override
07:52 - the gravity so I'll write a gravity
07:56 - toast not Center
08:01 - first formatted then save it and now if
08:08 - we will display that toast so it is in
08:10 - the center but as you can see we have
08:13 - kept the button also in centre and we
08:16 - are also displaying the toast in center
08:19 - so that means according to convention
08:21 - they both should overlap but when the
08:23 - toast is being displayed it is above
08:26 - this flat button so this is because the
08:29 - toast is being displayed at the centre
08:31 - of the entire screen and this press
08:34 - button is at the center of this scaffold
08:37 - part means the whole screen except the
08:39 - app bar ok so similarly there are other
08:43 - properties also that is background color
08:46 - and I can give it a different color
08:51 - let's say red
08:58 - so now that toast is ended I can also
09:01 - change it to different color means we
09:03 - can play around
09:09 - now that toast will means this color
09:13 - okay then we can also change the text
09:16 - color let's say colors dot black
09:30 - and now the text color isn't black okay
09:34 - so this is the difference between
09:36 - stateless and stateful widget like when
09:40 - we don't have any functionality in our
09:42 - application so it is suggested to use a
09:44 - stateless with it but when we need to
09:46 - add some functionality then we should go
09:48 - for stateful with it okay I hope
09:52 - everything was clear thank you

Cleaned transcript:

welcome to programming knowledge so in this video we are going to add some functionality to our application because till now what we have done is we have just added UI elements and we have seen different ways to add multiple UI elements but our application is not functional ok so to add functionality let's say that instead of print presses I want to display a toast ok so the first thing that toast is not prefabricated in flutter we need to add the extension okay and the place where you can find all the flutter extension is this path is this website pub dot de Vie and over here if you search for toast then you will find this toast is zero point one point five and there are other extensions also but I prefer to use this one okay so now you can see over here it is written how to use and then the first thing is this toast colon and then a sign then zero point one point five this is basically the line to install this dependency in our project now in most of the extensions how to download is not written over here so you can also find it in the installing section okay so I will just copy it from here and as we discussed earlier we need to add all the extensions in our pub spec dot the ML file so over there I'll add this file ok inside this the dependencies section and at the same line we have this flutter written okay now if I save this it will automatically start getting the extension in our file in our application ok so after this and now we can use that extension in our application so to use that extension again in my readme you can see the first thing that we need to we need to import this package so I will just copy it from here and I'll paste it below this so now this file is inside our application and now to use the now to display a toast we write toast dot show and then the text that is message then the context and we have the context that is build context okay that day we have in our every application okay then after that we have this duration then gravity then text color background color background radius and border okay so now you can see the background color has a default color of this so over here 0 X stands for hexadecimal that means the code is in hexadecimal the last six digits stands for the color code and then the first two digits after X stands for opacity okay so now to display our toast we'll use this line so instead of console logging I'll write toast not show and the message is close to demo okay so now let's try running this okay so once the application starts running if you click on this press so instead of showing anything it is giving me a list of errors over here okay and the main error is unimplemented handling of missing static target okay so this means that we are trying to add functionality in a stateless with jet class okay so that means that is because the basic functionality of stateless with jet is to just create a static page okay that means if this page is created like this then we can't change it while the application is running okay and if you want to display a toaster then that means the look of the page will change and the page will not be static and that will defy the functionality of stateless widget okay so to solve that problem we have another base class in our material dot dot and that is called stateful widget okay so you can see stateless and stateful they both are contrary and so is their features so to create a stateful widget we just write SDF or something like that and over here you get flutter stateful widget and then let's give this class on him so let's say my home app okay so now you can see a class my home app is created and it extends stateful with you then inside this we have my home app state that is the app state ok and it calls a method called create state then after that we have another class called my home app state and it extends state ok so this is the basic code that we need to write for every stateful with it and flutter and vs code helps us in writing this ok and if you want to know what what are the functionalities of these functions then you can simply go to flutter and open the first link and then over here go to Doc's okay so now instead of returning a container I want to return this scaffold that I have over here so I'll just cut it from here and paste it over here okay and now over here the home will be my this my home map class so I'll write mine Oh Mac okay now I'll again format this and try running this okay instead of running I will reload this okay once reloaded you can see everything is still the same and now I'll remove this to text okay just for now again run this okay so once the application starts running now if we click on press than we are able to see our toast so that means if we are inside a stateful with it we can change the state means the application is not static but it is suggested that when we don't need to change the state we should use stateless with it okay so now let's explore this toast of it so over here you can see the it also takes more parameters and the duration is toast dot length short that is the default parameter the gravity is toast dot bat bottom that is also default and we can override it okay so far let's overwrite the duration to length long so I'll write duration toast dot length long and now if I save this so now that text will be now the toast will be displayed for a longer period of time and you can see that okay similarly I can also override the gravity so I'll write a gravity toast not Center first formatted then save it and now if we will display that toast so it is in the center but as you can see we have kept the button also in centre and we are also displaying the toast in center so that means according to convention they both should overlap but when the toast is being displayed it is above this flat button so this is because the toast is being displayed at the centre of the entire screen and this press button is at the center of this scaffold part means the whole screen except the app bar ok so similarly there are other properties also that is background color and I can give it a different color let's say red so now that toast is ended I can also change it to different color means we can play around now that toast will means this color okay then we can also change the text color let's say colors dot black and now the text color isn't black okay so this is the difference between stateless and stateful widget like when we don't have any functionality in our application so it is suggested to use a stateless with it but when we need to add some functionality then we should go for stateful with it okay I hope everything was clear thank you
