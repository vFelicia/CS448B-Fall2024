With timestamps:

00:00 - hello guys welcome to the next video on
00:02 - nodejs tutorial for beginners in this
00:04 - video I'm going to show you how we can
00:06 - use streams in nodejs specifically we
00:10 - will talk about readable stream in this
00:12 - video and in the next video we will talk
00:15 - about writeable stream in
00:17 - nodejs so let's get started so first of
00:21 - all what are streams streams are Unix
00:24 - pipe that lets you read data from a
00:28 - source and write WR data to a
00:32 - destination right so for example you
00:36 - want to read a data from a very big file
00:39 - or from a source which has lots and lots
00:44 - of uh data and because you are running a
00:49 - server you don't want to block your
00:52 - server right so if you want to read this
00:55 - file you may want to or you would like
00:59 - to read this file in chunks or you know
01:04 - small portions and once this portion is
01:07 - read you want or you can do something
01:10 - right and streams allows us to do the
01:13 - same so streams allows us for example we
01:18 - want to read a big file streams allows
01:21 - us to read this file chunk by chunk and
01:25 - it will also give the information that
01:28 - this chunk is red and and uh if whole
01:32 - file is readed or not or we can do many
01:36 - uh you know events from this uh data
01:39 - right so let's see how we can use uh
01:43 - streams specifically readable streams
01:46 - right so to use streams we will use the
01:50 - fs module module and we have already
01:53 - seen how we can include uh this module
01:56 - in nodejs just use VAR FS is equal to
01:59 - require FS now we will create a variable
02:04 - called for example readable stream is
02:07 - equal to FS do create read stream and
02:14 - this takes uh argument which is the name
02:18 - of the source so for example I have uh
02:21 - this file whose name is file.txt and it
02:26 - has uh relatively big data so it has has
02:30 - around 500 5,200 lines of data I just
02:35 - copied a random data from some source
02:39 - and for example I want to read this data
02:42 - right now uh this file name uh here we
02:46 - will give as a argument so just give
02:49 - file.txt because it's in the same
02:52 - directory you can see here and now we
02:56 - can use this variable read stream let's
03:01 - name it read stream instead of readable
03:04 - stream okay so this read stream we can
03:10 - uh use to uh listen for some event so
03:15 - basically whenever you use create read
03:18 - stream it inherits from event emitter
03:23 - and we have already uh seen how to use
03:26 - event Metter in the previous videos so
03:30 - it inherits from Event Event emitter so
03:33 - we can call the method which are present
03:37 - in event emitter class also so we can uh
03:41 - you know trigger on event or emit U
03:44 - method using this read stream now there
03:48 - is a predefined uh event in uh create
03:53 - read stream which is called Data okay
03:57 - and which allows us to read our file in
04:02 - chunks so just write read stream and
04:06 - then we will just write on which we are
04:08 - inheriting from event emitter and we
04:12 - will listen for the event called data
04:16 - and then we will just create a Anonymous
04:19 - function here and this Anonymous
04:23 - function will read chunk of data so just
04:27 - write
04:28 - chunk and then we will just uh close our
04:34 - function okay so in this variable
04:38 - whenever this uh event is triggered then
04:42 - this chunk uh will contain some chunk of
04:47 - data from this file right this chunk
04:50 - variable will be full and then we will
04:54 - uh you know use this chunk of data from
04:56 - this file okay so for for example what I
05:00 - want to do is I want to just uh console
05:03 - log this data so I will just write
05:06 - console
05:07 - log chunk here okay and uh one chunk of
05:12 - data is red so we can uh just give a
05:17 - line kind of uh console log here so we
05:21 - know that this is one chunk okay after
05:24 - this line right so let's see how it
05:29 - works works so I'm going to just open
05:31 - the terminal and run my
05:34 - app and you can see there are few chunks
05:38 - which are read from this file okay so
05:42 - you can see um my first of all this line
05:46 - is uh you know printed on the terminal
05:49 - because of this console log and then we
05:53 - have the chunk of data and then again
05:57 - this uh line again and this chunk of
06:00 - data so it's uh reading the data in
06:03 - chunks and when uh all the file is read
06:07 - then uh we have the output but this is
06:10 - not familiar because uh this is uh
06:13 - reading in hacks right we haven't
06:16 - defined what type of uh data we are
06:19 - reading so you can see in the file. text
06:22 - we have a normal uh you know normal text
06:27 - and it's reading in uh hex data right so
06:32 - how we can tell uh this function or
06:36 - method to read in readable text you can
06:40 - guess I think you can just uh write here
06:44 - the type the second argument is utf8 for
06:49 - example and then just save it and then
06:52 - we will run it
06:54 - again and now you can see it's reading
06:58 - in the normal text so you can see this
07:01 - line and then the chunk of data which is
07:04 - red and once again we will see when we
07:08 - will go a little bit up so this is the
07:10 - next line and whenever you will go up
07:14 - you will see uh these uh this kind of
07:16 - line so now we are reading the normal
07:19 - text but in chunks again right so this
07:25 - uh event data will allow us to read uh
07:29 - the file for example in chunks right and
07:34 - whenever one chunk is readed you can do
07:37 - some logical you know stuff with this uh
07:40 - chunk of data right now there is one
07:44 - another uh event called end so you know
07:48 - that you have completed reading the file
07:52 - so instead of data whenever you use end
07:56 - and let's instead of uh this console log
07:59 - we just say end end here okay and let's
08:05 - read the file again or execute the
08:08 - program again and once this uh data is
08:11 - readed this line is printed which is due
08:15 - to this triggering of event called end
08:19 - event okay so once the file is read
08:22 - completely this event will be triggered
08:25 - and then this line will be printed or
08:28 - whatever code you will uh write here
08:31 - will be printed so for example I will uh
08:35 - create a variable here called data right
08:39 - and what I want to do is I want to store
08:42 - all the uh you know text of the file in
08:46 - this variable and once my data is uh
08:50 - read or once my file is read I want to
08:53 - print the content of this data so
08:57 - instead of uh this what I can do here is
09:01 - I can just write data plus equals uh
09:06 - chunk something like this so what it's
09:09 - going to do is it's going to concatenate
09:12 - this chunk into this data variable
09:16 - right and once uh all the file is read I
09:19 - want to print it so I will just do
09:23 - console log here and I will print this
09:26 - data variable so this essentially will
09:29 - contain all the file content okay and
09:34 - let's uh just comment this uh code out
09:38 - because we don't need it and let's run
09:41 - the program
09:43 - again so program is uh running so this
09:49 - time once the you know data is red then
09:54 - it's printed using this uh console log
09:58 - because we we are not you know printing
10:01 - using this we have already commented out
10:03 - right so this time it this uh line is
10:08 - printing this text all the text okay and
10:12 - once the text is uh printed this line of
10:15 - code will execute and it will print end
10:18 - here which is happening here okay so
10:22 - this is how basically you can uh use
10:26 - readable streams in uh not JS right now
10:31 - there are many options related to read
10:35 - stream and write streams so for example
10:39 - one of the option we have set here
10:41 - instead of setting the encoding from the
10:44 - second argument there is a special
10:46 - method which you can use to set this end
10:48 - coding which is uh the set end coding so
10:52 - instead of this you can even do this
10:55 - also and the code will run fine okay so
10:59 - let's run the code again and it's going
11:01 - to run it you know normally okay so just
11:06 - go to the nodejs documentation on its
11:10 - website and you will find many useful uh
11:14 - functions and methods there which you
11:16 - can use in your code according to your
11:20 - requirement this is just uh the
11:22 - introduction to you know streams and uh
11:25 - specifically the readable streams so I
11:28 - hope you have enjoyed this video please
11:29 - wait comment and subscribe and bye for
11:33 - now

Cleaned transcript:

hello guys welcome to the next video on nodejs tutorial for beginners in this video I'm going to show you how we can use streams in nodejs specifically we will talk about readable stream in this video and in the next video we will talk about writeable stream in nodejs so let's get started so first of all what are streams streams are Unix pipe that lets you read data from a source and write WR data to a destination right so for example you want to read a data from a very big file or from a source which has lots and lots of uh data and because you are running a server you don't want to block your server right so if you want to read this file you may want to or you would like to read this file in chunks or you know small portions and once this portion is read you want or you can do something right and streams allows us to do the same so streams allows us for example we want to read a big file streams allows us to read this file chunk by chunk and it will also give the information that this chunk is red and and uh if whole file is readed or not or we can do many uh you know events from this uh data right so let's see how we can use uh streams specifically readable streams right so to use streams we will use the fs module module and we have already seen how we can include uh this module in nodejs just use VAR FS is equal to require FS now we will create a variable called for example readable stream is equal to FS do create read stream and this takes uh argument which is the name of the source so for example I have uh this file whose name is file.txt and it has uh relatively big data so it has has around 500 5,200 lines of data I just copied a random data from some source and for example I want to read this data right now uh this file name uh here we will give as a argument so just give file.txt because it's in the same directory you can see here and now we can use this variable read stream let's name it read stream instead of readable stream okay so this read stream we can uh use to uh listen for some event so basically whenever you use create read stream it inherits from event emitter and we have already uh seen how to use event Metter in the previous videos so it inherits from Event Event emitter so we can call the method which are present in event emitter class also so we can uh you know trigger on event or emit U method using this read stream now there is a predefined uh event in uh create read stream which is called Data okay and which allows us to read our file in chunks so just write read stream and then we will just write on which we are inheriting from event emitter and we will listen for the event called data and then we will just create a Anonymous function here and this Anonymous function will read chunk of data so just write chunk and then we will just uh close our function okay so in this variable whenever this uh event is triggered then this chunk uh will contain some chunk of data from this file right this chunk variable will be full and then we will uh you know use this chunk of data from this file okay so for for example what I want to do is I want to just uh console log this data so I will just write console log chunk here okay and uh one chunk of data is red so we can uh just give a line kind of uh console log here so we know that this is one chunk okay after this line right so let's see how it works works so I'm going to just open the terminal and run my app and you can see there are few chunks which are read from this file okay so you can see um my first of all this line is uh you know printed on the terminal because of this console log and then we have the chunk of data and then again this uh line again and this chunk of data so it's uh reading the data in chunks and when uh all the file is read then uh we have the output but this is not familiar because uh this is uh reading in hacks right we haven't defined what type of uh data we are reading so you can see in the file. text we have a normal uh you know normal text and it's reading in uh hex data right so how we can tell uh this function or method to read in readable text you can guess I think you can just uh write here the type the second argument is utf8 for example and then just save it and then we will run it again and now you can see it's reading in the normal text so you can see this line and then the chunk of data which is red and once again we will see when we will go a little bit up so this is the next line and whenever you will go up you will see uh these uh this kind of line so now we are reading the normal text but in chunks again right so this uh event data will allow us to read uh the file for example in chunks right and whenever one chunk is readed you can do some logical you know stuff with this uh chunk of data right now there is one another uh event called end so you know that you have completed reading the file so instead of data whenever you use end and let's instead of uh this console log we just say end end here okay and let's read the file again or execute the program again and once this uh data is readed this line is printed which is due to this triggering of event called end event okay so once the file is read completely this event will be triggered and then this line will be printed or whatever code you will uh write here will be printed so for example I will uh create a variable here called data right and what I want to do is I want to store all the uh you know text of the file in this variable and once my data is uh read or once my file is read I want to print the content of this data so instead of uh this what I can do here is I can just write data plus equals uh chunk something like this so what it's going to do is it's going to concatenate this chunk into this data variable right and once uh all the file is read I want to print it so I will just do console log here and I will print this data variable so this essentially will contain all the file content okay and let's uh just comment this uh code out because we don't need it and let's run the program again so program is uh running so this time once the you know data is red then it's printed using this uh console log because we we are not you know printing using this we have already commented out right so this time it this uh line is printing this text all the text okay and once the text is uh printed this line of code will execute and it will print end here which is happening here okay so this is how basically you can uh use readable streams in uh not JS right now there are many options related to read stream and write streams so for example one of the option we have set here instead of setting the encoding from the second argument there is a special method which you can use to set this end coding which is uh the set end coding so instead of this you can even do this also and the code will run fine okay so let's run the code again and it's going to run it you know normally okay so just go to the nodejs documentation on its website and you will find many useful uh functions and methods there which you can use in your code according to your requirement this is just uh the introduction to you know streams and uh specifically the readable streams so I hope you have enjoyed this video please wait comment and subscribe and bye for now
