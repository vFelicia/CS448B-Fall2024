With timestamps:

00:00 - hello everyone this is varsha and
00:02 - welcome to programming knowledge
00:09 - so in today's tutorial we're going to
00:11 - learn how to create a repository
00:13 - how to add files to a repository how to
00:16 - commit files
00:17 - and how do we push files in the remote
00:18 - repository after pushing the files you
00:21 - will also learn how to delete a
00:22 - particular repository and also at the
00:24 - end i will be providing you with a git
00:27 - cheat sheet in which you will get all
00:29 - the git commands so that you get hang of
00:31 - all the git commands easily
00:33 - so let's get started so here you can see
00:36 - this is the github profile that we had
00:38 - created in the previous tutorial that is
00:40 - a tutorials git
00:41 - how to create a github profile how to
00:45 - install the git bash i have explained in
00:47 - the previous tutorial so you can have a
00:49 - look at it first
00:50 - now uh here this is the github profile
00:53 - that you have
00:54 - now to create a repository here you can
00:56 - see there is a plus sign you simply need
00:58 - to click over here
01:00 - and here you have a option which says
01:01 - new repository
01:03 - click on new repository now over here
01:06 - it says that you have to enter your
01:08 - repository name so in this case i will
01:10 - name it as
01:11 - test repo you can name it anything for
01:13 - example if your project name is
01:15 - e-commerce you can name it as
01:17 - e-commerce repository the repository
01:19 - name can be e-commerce or if you have
01:21 - any other project like library
01:23 - management or anything you can name it
01:24 - that way
01:25 - so in my case i will just write test
01:27 - repo
01:29 - now the next option that here you can
01:31 - see is the description
01:32 - box description box means here you can
01:35 - add
01:36 - a little bit description about the
01:37 - repository so here i will write
01:40 - this is a
01:44 - demo tutorial of
01:47 - get get up
01:50 - on programming
01:54 - knowledge okay so i have added a little
01:57 - bit of description about this repository
02:00 - now comes an option for public or
02:02 - private
02:03 - now public means anyone on the internet
02:05 - can see this repository
02:07 - but you choose who can commit it whereas
02:09 - private means
02:10 - you choose who can see and commit this
02:12 - repository it is totally private
02:14 - so in my case i would name it as i will
02:16 - put it as public
02:18 - now initialize this repository with add
02:21 - a readme file
02:22 - a git ignore file or choose a license
02:25 - now you must be thinking what is this
02:27 - readme file
02:28 - now this is where you can write your
02:30 - long descriptions of your project you
02:32 - can tell what how to initialize a
02:33 - particular project what are the
02:35 - prerequisites
02:36 - for the project so it is a detailed
02:38 - version of
02:39 - the project that you have put on away
02:42 - then you have the dot getting drawer in
02:45 - which you can choose which files not to
02:47 - track from a list of templates like here
02:49 - you are given a list of templates and
02:50 - you need to choose
02:51 - which files you don't want to track then
02:54 - you have choose a license now a license
02:56 - tells that
02:56 - others that what they can do and what
02:59 - they cannot do with your code
03:00 - so this is all up to you but since i
03:03 - don't want anything during the
03:04 - initialization i will not tick any of
03:06 - the button over here
03:08 - any of the check boxes over here so i'll
03:09 - just simply click on create repository
03:16 - now once i have already created a
03:18 - repository now its name is test repo
03:21 - we will add files in this repository
03:25 - how do we add that we will add it
03:26 - through git commands
03:28 - so what i want you to do is now so now i
03:31 - want you to create a folder over here so
03:33 - i have created a new folder
03:36 - and i will name it as git
03:39 - inside this kit again i will create a
03:41 - new folder and i will name it as
03:43 - git demo
03:49 - now in this git demo right click
03:52 - and here you get an option which says
03:54 - git bash here
03:55 - now if you have installed your git bash
03:57 - properly which i explained in the
03:59 - previous tutorial
04:00 - you will get this option and if not then
04:02 - please go to the previous tutorial and
04:03 - install your git bash again
04:08 - so this is the git bash that we have now
04:10 - what we're going to do is first
04:12 - we're going to initialize this is the
04:15 - first step that you need to do
04:17 - whenever you have a new github account
04:20 - okay
04:20 - now i have already created a repository
04:23 - named
04:24 - as test repo on our github that is a
04:27 - tourist github
04:28 - if you have uh if you have an old github
04:32 - account where you have already added
04:33 - your files and stuff then you don't need
04:35 - to follow this step
04:37 - but if it is new if it is a new account
04:40 - and you're learning github for the first
04:41 - time you need to initialize your
04:43 - username and user email
04:45 - so the very first command that you need
04:46 - to write is get
04:48 - config global
04:53 - user name
04:57 - and after this you need to write your
04:58 - username so in my case it's
05:00 - tutorials
05:03 - get and i will simply
05:07 - enter okay
05:10 - so uh here it says that my username has
05:12 - been initialized as tutorials kit
05:15 - now if i write uh git config
05:20 - global and i'll write user dot
05:25 - email and here i will write my email and
05:28 - my email is
05:30 - and here i will press enter
05:34 - so my username and email has been
05:36 - initialized over here
05:39 - so to check here i will simply write git
05:42 - config
05:48 - dash list
05:52 - and here you press enter enter enter
05:54 - enter and here you can see your
05:56 - user.name is tutorialskit and here your
05:58 - user.email is
06:00 - been set okay so our username
06:04 - and email has been set over here okay
06:07 - so now the next thing that we're going
06:09 - to do is we're going to create
06:10 - files in this folder that is the git
06:12 - demo folder
06:14 - we need to add files to the repository
06:16 - right for that we need to create a file
06:18 - for that we're going to write touch
06:22 - and file dot txt
06:26 - press enter and there you can see that
06:28 - there is file
06:30 - dot txt in my git demo folder again i
06:33 - will create a new file i'll write touch
06:36 - file one dot txt and there you see you
06:39 - can see another file
06:41 - file one in git demo folder now
06:44 - one of the most important thing that we
06:46 - need to understand is that
06:48 - to add these files in our repository
06:51 - that is the test
06:52 - repository test repo this repository
06:56 - we need to make this git demo folder a
06:58 - repository
07:00 - for that we are going to write
07:04 - get status
07:08 - now you must be thinking what is the git
07:10 - status means
07:11 - so git status is one of the most
07:13 - important and the frequent use git
07:15 - command
07:15 - it basically means that it displays the
07:17 - state of the working directory and it is
07:19 - one of the most important command also
07:22 - so here it says fatal not a git
07:24 - repository
07:25 - as i said this git demo is not a git
07:28 - repository right now and we need to make
07:30 - it as a git repository to add files in
07:32 - the test repo repository
07:35 - for that we need to write git init
07:40 - and press enter
07:43 - so here it says initialize empty git
07:46 - repository
07:47 - in and the location has been given over
07:49 - here so
07:50 - this basically command creates a new git
07:53 - repository
07:54 - now once a repository is created what
07:56 - you can do is you can
07:58 - go and view and here you can select the
08:01 - hidden items
08:02 - and here you can see that you have a
08:04 - folder dot git
08:05 - so once your folder your git demo has
08:08 - become a repository
08:10 - it will create a hidden folder dot git
08:12 - you don't need to delete this folder
08:14 - just let it be hidden if you want to
08:17 - verify if your folder is a repository or
08:19 - not
08:19 - you can simply go on view and click on
08:21 - hidden items and here you can see
08:23 - that there is a dot get folder present
08:25 - over here
08:27 - so now uh we have created this
08:30 - git demo a git repository
08:34 - now what we want to do is we want to
08:36 - track the status so let's
08:37 - write git status and let's see it says
08:41 - that
08:42 - on branch master no commits here there
08:44 - are untracked files
08:45 - that is the file.txt and the file1.txt
08:49 - nothing added to commit but untracked
08:51 - files are present
08:53 - now see there are two types of file in
08:56 - git
08:57 - that is the tracked files and the
08:59 - untracked files
09:00 - now you must be thinking what attract
09:02 - files or what or what is untracked files
09:05 - so let's first understand what is
09:07 - untracked files untracked files are the
09:09 - files that
09:10 - exist locally but they are not the part
09:14 - of the git repository
09:16 - in untracked files the file change
09:18 - history will not be recorded
09:20 - and it will not be pushed into the
09:22 - report copies of your repository
09:24 - so when you run a git push command it
09:27 - cannot run because it
09:28 - is not tracked whereas chat files
09:31 - are the files that stores the change
09:34 - history
09:35 - and it can be pushed to the remote
09:36 - repository whenever we run a git
09:38 - push command okay so this is the basic
09:42 - difference between the tracked and the
09:43 - untracked files
09:45 - now how to convert these untracked files
09:47 - to track files
09:49 - for that we need to write git
09:52 - add and the file name so in my case
09:55 - first i will write
09:56 - file dot txt
10:02 - and here it's added so i'll write git
10:04 - status so that i get to know the status
10:06 - of the working directory
10:10 - and here you can see that the file dot
10:12 - txt is
10:14 - in green color whereas file one dot tst
10:16 - is in red color because
10:18 - file.txt is a tracked file now whereas
10:21 - file1.txt is untracked file
10:25 - so now we need to add file1.txt to track
10:30 - also
10:30 - there there's a shortcut for it just
10:32 - i'll write git add
10:34 - and a dot which means that it will add
10:36 - all the files that are present
10:38 - in this git demo folder will be dragged
10:44 - so here you can see i'll write git
10:47 - status
10:49 - and here you can see that both the files
10:51 - are tracked now
10:53 - now to keep it in the repository that we
10:55 - have on our github profile tutorials kit
10:58 - we need to commit these files for that i
11:01 - will write a command
11:02 - git commit m
11:05 - and a get message so let me write
11:08 - first commit
11:13 - and here i'll press enter
11:16 - and here it says that the commit has
11:20 - been done
11:20 - there are two files changed there is
11:22 - zero insertions there are zero deletions
11:25 - okay now after this just write git
11:28 - status so that we get to know the status
11:30 - of the current working directory
11:32 - and here it says on branch master and
11:34 - nothing to commit working freely
11:36 - now here you must be thinking what is
11:38 - the meaning of branch master
11:41 - so the default branch name in git is
11:44 - master and that is why your ad is
11:46 - written on branch master
11:48 - so as you start making commits you are
11:50 - given a branch master that points to the
11:52 - last commit you made
11:54 - and every time you commit the master
11:57 - branch pointer keeps moving forward
11:59 - automatically basically in short it is
12:01 - just a default branch
12:03 - name in git okay so now uh
12:06 - let's do one thing let's make some
12:08 - changes in this file
12:10 - since we have not written anything so
12:12 - i'll just click over here and write
12:13 - hi i am versa
12:18 - replied and i'll just save this
12:22 - similarly in file one here i will write
12:25 - welcome to programming
12:30 - knowledge and
12:33 - please like share
12:37 - and subscribe
12:42 - this video
12:46 - and i will save this
12:51 - now we have made some changes over here
12:54 - okay so since we have made it some
12:57 - changes over here we will write git
12:59 - status so that we get to know some
13:03 - changes that we have done and here it
13:05 - says that it is in red color and it is
13:07 - said modified
13:08 - since we have added some lines that's
13:11 - the reason why it is saying modified
13:13 - okay so now what we have to do is we
13:16 - need to write git
13:18 - add again so all the files are added
13:23 - then after that let's write git status
13:27 - and here it says that the files are
13:30 - being tracked now
13:31 - all are the modified files have been
13:33 - tracked right now now here i will write
13:35 - the commit statement git commit
13:38 - and minus m and here i will write
13:42 - after changes
13:48 - and let's press enter
13:52 - okay so your our files have been uh
13:57 - committed after the changes so here it
13:59 - says two files changed and there are
14:00 - three insertions over here
14:02 - now we have to add these files to our
14:06 - repository
14:07 - this repository test repo repository
14:10 - what to do
14:11 - for that we need to write git
14:14 - remote add
14:18 - origin and here we will paste the url
14:21 - that is this url that is the https url i
14:26 - simply copy this
14:28 - and i will paste it over here
14:31 - and press enter okay so if i write git
14:37 - remote so here if i write git remote i
14:41 - get
14:42 - origin now you must be thinking what is
14:43 - this origin
14:45 - we have given a short name as origin to
14:48 - this
14:48 - entire url so when i write git remote we
14:51 - get origin
14:52 - the origin means this http url okay
14:56 - so now if i want to push my code i need
15:00 - to push my code
15:01 - so that it so that the files are added
15:04 - in the repository
15:05 - so what i do is i write get push
15:09 - minus u origin
15:12 - master
15:19 - and it will take some time
15:24 - so here it says enumerating object 7
15:27 - done
15:28 - and get the files have been pushed
15:32 - now you can go on this
15:36 - repository refresh
15:39 - and here you can see your two files that
15:41 - is the file1.txt
15:44 - so this is how you can add your files to
15:46 - the git repository
15:49 - now let's understand how to delete a
15:52 - particular repository
15:53 - so in this case you can just go here go
15:56 - on your repositories
16:02 - and click on test repo
16:05 - and here you have a settings bar
16:08 - just click on settings
16:13 - go a little down scroll down and there
16:15 - you can see there is a danger zone
16:17 - written over here
16:18 - so the first option in danger zone is
16:21 - changed repository visibility you can
16:23 - change it to public or private
16:25 - then you have transfer ownership you
16:28 - have are keep this repository and then
16:30 - you have delete this repository
16:32 - so once you delete this repository there
16:34 - is no there is no going back okay so you
16:36 - need to be very certain about this that
16:38 - you want to delete this repository or no
16:40 - so i simply click on delete this
16:42 - repository
16:43 - now here it says that this action cannot
16:46 - be undone this will be permanently
16:48 - deleted
16:48 - from the tutorials git and if it's
16:51 - permanently
16:52 - deleted it will not be back so you need
16:54 - to be very certain that do you want to
16:56 - delete this repository or no
16:58 - and here it says please type tutorials
17:01 - git test report to confirm so i will
17:03 - write tutorials
17:05 - and here i have written the entire uh
17:08 - thing that were given over here
17:09 - and you have to click on i understand
17:11 - the consequences and delete this
17:13 - repository
17:14 - i'll click on this so it says that
17:17 - confirm your access you need to enter
17:19 - your password
17:31 - and your your repository has been
17:33 - deleted so if i go on your profile
17:37 - and here it says you don't have any
17:39 - public repositories yet
17:41 - so there is no repositories now so this
17:43 - is how you can create a repository you
17:45 - can
17:46 - push your files to the repository you
17:48 - can create a new file
17:49 - also and you can delete a repository now
17:52 - coming to the cheat sheet which i was
17:54 - saying to you
17:55 - so this is a simple cheat sheet that i
17:58 - found on internet and it is very precise
18:00 - and very easy to understand also
18:03 - here it says all the installations that
18:05 - we need before
18:06 - starting with github also the setup that
18:08 - we have seen that is the git config the
18:10 - user name the user email
18:12 - and how to set it all these uh
18:14 - configurations we have seen also how to
18:17 - write git dot init
18:18 - and the commands that we used today that
18:20 - is the git add and the file name
18:22 - and the get add dot or the git status
18:25 - file so that it shows
18:26 - uh the modified files in the working
18:28 - directory also it is staged for your
18:30 - next commit or not all these different
18:32 - commands have been given over here
18:34 - we will be using these commands for the
18:36 - entire tutorial
18:37 - and these are quite simple and that's
18:39 - the reason why i'm putting the link in
18:41 - the description so that it's easier for
18:43 - you to
18:44 - download this cheat sheet so this is the
18:47 - oil for today and in the next tutorial
18:49 - we're going to learn about the three
18:50 - staged architecture of
18:52 - kit for this you need to have a good
18:54 - hang about the git
18:56 - commands that we learnt today because we
18:58 - are going to use these git commands to
19:00 - understand the architecture of
19:02 - git so this is all for now we will meet
19:04 - in the next tutorial
19:06 - please like share and subscribe this
19:08 - video and please ring the bell icon so
19:10 - that you don't miss out the next video
19:12 - thank you

Cleaned transcript:

hello everyone this is varsha and welcome to programming knowledge so in today's tutorial we're going to learn how to create a repository how to add files to a repository how to commit files and how do we push files in the remote repository after pushing the files you will also learn how to delete a particular repository and also at the end i will be providing you with a git cheat sheet in which you will get all the git commands so that you get hang of all the git commands easily so let's get started so here you can see this is the github profile that we had created in the previous tutorial that is a tutorials git how to create a github profile how to install the git bash i have explained in the previous tutorial so you can have a look at it first now uh here this is the github profile that you have now to create a repository here you can see there is a plus sign you simply need to click over here and here you have a option which says new repository click on new repository now over here it says that you have to enter your repository name so in this case i will name it as test repo you can name it anything for example if your project name is ecommerce you can name it as ecommerce repository the repository name can be ecommerce or if you have any other project like library management or anything you can name it that way so in my case i will just write test repo now the next option that here you can see is the description box description box means here you can add a little bit description about the repository so here i will write this is a demo tutorial of get get up on programming knowledge okay so i have added a little bit of description about this repository now comes an option for public or private now public means anyone on the internet can see this repository but you choose who can commit it whereas private means you choose who can see and commit this repository it is totally private so in my case i would name it as i will put it as public now initialize this repository with add a readme file a git ignore file or choose a license now you must be thinking what is this readme file now this is where you can write your long descriptions of your project you can tell what how to initialize a particular project what are the prerequisites for the project so it is a detailed version of the project that you have put on away then you have the dot getting drawer in which you can choose which files not to track from a list of templates like here you are given a list of templates and you need to choose which files you don't want to track then you have choose a license now a license tells that others that what they can do and what they cannot do with your code so this is all up to you but since i don't want anything during the initialization i will not tick any of the button over here any of the check boxes over here so i'll just simply click on create repository now once i have already created a repository now its name is test repo we will add files in this repository how do we add that we will add it through git commands so what i want you to do is now so now i want you to create a folder over here so i have created a new folder and i will name it as git inside this kit again i will create a new folder and i will name it as git demo now in this git demo right click and here you get an option which says git bash here now if you have installed your git bash properly which i explained in the previous tutorial you will get this option and if not then please go to the previous tutorial and install your git bash again so this is the git bash that we have now what we're going to do is first we're going to initialize this is the first step that you need to do whenever you have a new github account okay now i have already created a repository named as test repo on our github that is a tourist github if you have uh if you have an old github account where you have already added your files and stuff then you don't need to follow this step but if it is new if it is a new account and you're learning github for the first time you need to initialize your username and user email so the very first command that you need to write is get config global user name and after this you need to write your username so in my case it's tutorials get and i will simply enter okay so uh here it says that my username has been initialized as tutorials kit now if i write uh git config global and i'll write user dot email and here i will write my email and my email is and here i will press enter so my username and email has been initialized over here so to check here i will simply write git config dash list and here you press enter enter enter enter and here you can see your user.name is tutorialskit and here your user.email is been set okay so our username and email has been set over here okay so now the next thing that we're going to do is we're going to create files in this folder that is the git demo folder we need to add files to the repository right for that we need to create a file for that we're going to write touch and file dot txt press enter and there you can see that there is file dot txt in my git demo folder again i will create a new file i'll write touch file one dot txt and there you see you can see another file file one in git demo folder now one of the most important thing that we need to understand is that to add these files in our repository that is the test repository test repo this repository we need to make this git demo folder a repository for that we are going to write get status now you must be thinking what is the git status means so git status is one of the most important and the frequent use git command it basically means that it displays the state of the working directory and it is one of the most important command also so here it says fatal not a git repository as i said this git demo is not a git repository right now and we need to make it as a git repository to add files in the test repo repository for that we need to write git init and press enter so here it says initialize empty git repository in and the location has been given over here so this basically command creates a new git repository now once a repository is created what you can do is you can go and view and here you can select the hidden items and here you can see that you have a folder dot git so once your folder your git demo has become a repository it will create a hidden folder dot git you don't need to delete this folder just let it be hidden if you want to verify if your folder is a repository or not you can simply go on view and click on hidden items and here you can see that there is a dot get folder present over here so now uh we have created this git demo a git repository now what we want to do is we want to track the status so let's write git status and let's see it says that on branch master no commits here there are untracked files that is the file.txt and the file1.txt nothing added to commit but untracked files are present now see there are two types of file in git that is the tracked files and the untracked files now you must be thinking what attract files or what or what is untracked files so let's first understand what is untracked files untracked files are the files that exist locally but they are not the part of the git repository in untracked files the file change history will not be recorded and it will not be pushed into the report copies of your repository so when you run a git push command it cannot run because it is not tracked whereas chat files are the files that stores the change history and it can be pushed to the remote repository whenever we run a git push command okay so this is the basic difference between the tracked and the untracked files now how to convert these untracked files to track files for that we need to write git add and the file name so in my case first i will write file dot txt and here it's added so i'll write git status so that i get to know the status of the working directory and here you can see that the file dot txt is in green color whereas file one dot tst is in red color because file.txt is a tracked file now whereas file1.txt is untracked file so now we need to add file1.txt to track also there there's a shortcut for it just i'll write git add and a dot which means that it will add all the files that are present in this git demo folder will be dragged so here you can see i'll write git status and here you can see that both the files are tracked now now to keep it in the repository that we have on our github profile tutorials kit we need to commit these files for that i will write a command git commit m and a get message so let me write first commit and here i'll press enter and here it says that the commit has been done there are two files changed there is zero insertions there are zero deletions okay now after this just write git status so that we get to know the status of the current working directory and here it says on branch master and nothing to commit working freely now here you must be thinking what is the meaning of branch master so the default branch name in git is master and that is why your ad is written on branch master so as you start making commits you are given a branch master that points to the last commit you made and every time you commit the master branch pointer keeps moving forward automatically basically in short it is just a default branch name in git okay so now uh let's do one thing let's make some changes in this file since we have not written anything so i'll just click over here and write hi i am versa replied and i'll just save this similarly in file one here i will write welcome to programming knowledge and please like share and subscribe this video and i will save this now we have made some changes over here okay so since we have made it some changes over here we will write git status so that we get to know some changes that we have done and here it says that it is in red color and it is said modified since we have added some lines that's the reason why it is saying modified okay so now what we have to do is we need to write git add again so all the files are added then after that let's write git status and here it says that the files are being tracked now all are the modified files have been tracked right now now here i will write the commit statement git commit and minus m and here i will write after changes and let's press enter okay so your our files have been uh committed after the changes so here it says two files changed and there are three insertions over here now we have to add these files to our repository this repository test repo repository what to do for that we need to write git remote add origin and here we will paste the url that is this url that is the https url i simply copy this and i will paste it over here and press enter okay so if i write git remote so here if i write git remote i get origin now you must be thinking what is this origin we have given a short name as origin to this entire url so when i write git remote we get origin the origin means this http url okay so now if i want to push my code i need to push my code so that it so that the files are added in the repository so what i do is i write get push minus u origin master and it will take some time so here it says enumerating object 7 done and get the files have been pushed now you can go on this repository refresh and here you can see your two files that is the file1.txt so this is how you can add your files to the git repository now let's understand how to delete a particular repository so in this case you can just go here go on your repositories and click on test repo and here you have a settings bar just click on settings go a little down scroll down and there you can see there is a danger zone written over here so the first option in danger zone is changed repository visibility you can change it to public or private then you have transfer ownership you have are keep this repository and then you have delete this repository so once you delete this repository there is no there is no going back okay so you need to be very certain about this that you want to delete this repository or no so i simply click on delete this repository now here it says that this action cannot be undone this will be permanently deleted from the tutorials git and if it's permanently deleted it will not be back so you need to be very certain that do you want to delete this repository or no and here it says please type tutorials git test report to confirm so i will write tutorials and here i have written the entire uh thing that were given over here and you have to click on i understand the consequences and delete this repository i'll click on this so it says that confirm your access you need to enter your password and your your repository has been deleted so if i go on your profile and here it says you don't have any public repositories yet so there is no repositories now so this is how you can create a repository you can push your files to the repository you can create a new file also and you can delete a repository now coming to the cheat sheet which i was saying to you so this is a simple cheat sheet that i found on internet and it is very precise and very easy to understand also here it says all the installations that we need before starting with github also the setup that we have seen that is the git config the user name the user email and how to set it all these uh configurations we have seen also how to write git dot init and the commands that we used today that is the git add and the file name and the get add dot or the git status file so that it shows uh the modified files in the working directory also it is staged for your next commit or not all these different commands have been given over here we will be using these commands for the entire tutorial and these are quite simple and that's the reason why i'm putting the link in the description so that it's easier for you to download this cheat sheet so this is the oil for today and in the next tutorial we're going to learn about the three staged architecture of kit for this you need to have a good hang about the git commands that we learnt today because we are going to use these git commands to understand the architecture of git so this is all for now we will meet in the next tutorial please like share and subscribe this video and please ring the bell icon so that you don't miss out the next video thank you
