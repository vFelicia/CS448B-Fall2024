With timestamps:

00:00 - so let's get started no js' was
00:02 - originally written in 2009 by Rhian del
00:06 - the initial release was supported only
00:09 - Linux but in the later years of node.js
00:13 - it also started supporting Windows
00:16 - operating system and Mac OS also now its
00:22 - development was led by of course R and L
00:27 - and later the development and
00:30 - maintenance was sponsored by Joe and Joe
00:34 - and was his employer now let's see what
00:41 - is node.js so nodejs
00:44 - is an open source cross-platform runtime
00:48 - environment for developing server-side
00:51 - web application so normally you would
00:55 - link JavaScript with client-side web
01:00 - applications but with node.js you can
01:03 - develop server-side applications also
01:07 - now node.js is an event at i/o and this
01:12 - evented IO we will learn in the later
01:15 - videos what is a vented IO and how we
01:18 - can use it okay so although node.js is
01:22 - not a JavaScript framework many of its
01:26 - basic modules were written in JavaScript
01:29 - and developers can write new modules in
01:32 - JavaScript the runtime environment
01:35 - interprets JavaScript using Google's v8
01:39 - JavaScript engine which is also the
01:43 - JavaScript engine behind Chrome which is
01:47 - a web browser which makes it really fast
01:51 - now no GF is released under MIT license
01:56 - so it's a cross-platform open-source you
02:00 - know framework so let's go next now what
02:06 - no Jeff is not so as I already told you
02:11 - node.js is not
02:13 - web framework it's a server-side web
02:17 - application right so you can write
02:20 - server-side web applications with
02:22 - node.js not the client-side right
02:25 - node.js is not for beginners so whenever
02:29 - you are you know starting node.js you
02:33 - need to have basic understanding how you
02:37 - know JavaScript works mainly object
02:40 - oriented JavaScript and event did
02:43 - JavaScript so you need to have some
02:45 - knowledge of JavaScript but don't worry
02:48 - I will you know start with very basic
02:51 - levels so you will be able to understand
02:53 - and mostly most of them are you know
02:57 - servers if you think about service you
03:00 - may link servers as a multi-threaded
03:03 - application but node.js is not a
03:06 - multi-threaded application it uses the
03:10 - concept of asynchronous IO
03:13 - which we will also see in the later
03:16 - videos now what is unique about node.js
03:20 - so javascript is used in client-side but
03:26 - no J's puts JavaScript on the server
03:28 - side as I have already told you thus
03:32 - making a communication between client
03:35 - and server will happen in the same
03:37 - language so the learning curve for you
03:40 - will not be you know so steep because if
03:45 - you know JavaScript you can write the
03:48 - front end and the back end of your web
03:51 - application both in JavaScript right now
03:56 - servers are normally a thread based as I
03:59 - have already told you but node.js is
04:03 - event based node.js serves each request
04:08 - in a invented loop that can able to
04:11 - handle simultaneous requests so nodejs
04:15 - is not a multi-threaded application okay
04:19 - so it only have one thread which uses
04:23 - event and the last that
04:26 - is also I've already told you that JA
04:29 - nodejs
04:29 - program are executed by v8 JavaScript
04:33 - engine the same engine behind the Google
04:37 - Chrome browser also now why you want to
04:42 - learn no J's because no js' is really
04:47 - fast it can handle tons of concurrent
04:50 - requests and it's written in JavaScript
04:53 - which means you can use the same code on
04:57 - server-side and client-side so this is
04:59 - the brief introduction about node.js and
05:02 - from the next video I will start
05:04 - explaining how you can install node.js
05:06 - and how we can you know write our first
05:10 - code for creating our first node.js
05:13 - server hello guys welcome to the next
05:16 - video on node.js tutorial for beginners
05:18 - in this video we will see how we can
05:21 - download and install node.js on our
05:23 - Windows operating system so let's get
05:26 - started first of all open your favorite
05:28 - browser and search for node.js download
05:34 - and the first link which will appear
05:36 - here will be no GS dot o-r-g which is
05:40 - the official link so you can just click
05:43 - this link here ok and in here you will
05:47 - be able to see different kind of
05:49 - installations but on the node.js home
05:53 - base so when you click this icon here
05:55 - you will see the two versions for
06:00 - Windows
06:00 - one is the LTS version which is long
06:06 - term service version right and one is
06:10 - the current version so we are interested
06:13 - in current version so I'm going to
06:15 - install this one but if you want to
06:18 - install this long-term version which
06:20 - will be available for a long time then
06:23 - you can just install this one so I'm
06:26 - going to click this option and the file
06:30 - will be downloaded which is about 12
06:33 - megabytes so I am going to save it
06:36 - and let's save it somewhere okay so once
06:39 - this file is saved we are going to just
06:42 - install it so just click your MSI file
06:46 - so the extension of this file will be a
06:49 - dot MSI so just click this and then
06:52 - start installing the node.js right now
06:57 - nodes J's installation on Windows is
07:00 - really easy and you know you cannot get
07:04 - an easy installation than this
07:07 - installation so first of all this kind
07:10 - of wizard will start you just need to
07:13 - click Next here and accept terms license
07:17 - and conditions and then click Next this
07:20 - is the location where node.js will be
07:22 - installed so if you don't have any good
07:25 - reason to change it just leave it as
07:27 - default and then click Next now in here
07:30 - these are the things that will be
07:33 - installed in with the node gf so the
07:38 - node.js runtime NPM package manager
07:41 - which is really important for developing
07:45 - node.js applications online
07:47 - documentation and the path so this
07:52 - node.js path will be is tall or
07:54 - configured on your Windows operating
07:56 - system so you can you know start node.js
08:00 - using your command line ok so just click
08:03 - Next here and once you click Next you
08:08 - just need to click this install button
08:10 - to start the installation now the
08:12 - installation may take few seconds to few
08:16 - minutes depending upon the configuration
08:18 - of your Windows operating system so just
08:21 - wait for this process to complete and
08:24 - once the installation will complete we
08:26 - will go to the next step ok so now the
08:31 - installation of node.js is successfully
08:34 - completed on my Windows operating system
08:37 - and I just need to click this finish
08:39 - button now to know whether node.js is
08:44 - successfully installed on your system or
08:46 - not you need to
08:47 - open your command prompt so just search
08:49 - for command prompt and open your command
08:52 - prompt and in here you just need to type
08:55 - node - V which is going to give you the
08:59 - version of node.js installed right so
09:03 - just press enter and it will give you
09:06 - the version of node.js which you have
09:07 - installed so it's giving v6 point 5.0
09:11 - this is the same version you can see
09:13 - here when we have downloaded it from the
09:16 - node.js website v6 point 5.0 right so we
09:20 - know that node.js is successfully
09:22 - installed on our system now we have also
09:25 - installed NPM which is node package
09:28 - manager which with this node.js
09:31 - installer and node package manager is
09:36 - really important in developing you know
09:38 - know the applications and I will you
09:42 - know
09:42 - illustrate what NPM is and how it works
09:46 - in details in the later videos but in
09:49 - this video we will just check whether it
09:52 - successfully installed or not so just
09:54 - write NPM for node package manager
09:58 - - v4 knowing the version of it right so
10:02 - NPM - V and hopefully it will also give
10:06 - you the version of NPM install okay so
10:10 - now we know that node is installed
10:13 - successfully on our system and NPM is
10:16 - also installed on our system so now we
10:18 - can start building our you know for
10:22 - example hello world application so just
10:25 - to check you just need to write node in
10:28 - order to start working with nodes just
10:30 - write node and press Enter which will
10:33 - give you this kind of command line
10:35 - interface and in here you can just write
10:38 - for example console dot log and in the
10:45 - brackets so in the brackets you just
10:49 - need to write for example
10:50 - hello node so just write hello
10:56 - okay and now you can press ENTER and
11:00 - it's going to print out hello node and
11:03 - then this undefined message and then you
11:07 - know that node is perfectly working on
11:10 - your system now let's check this node in
11:15 - now little bit better way so what we
11:18 - want to do now is I'm going to just
11:20 - close this command prompt and I will
11:23 - once again go to the node js website and
11:26 - now this time I'm going to go here which
11:29 - says about tab so just click about tab
11:32 - here and in here you will see the basic
11:36 - barebone code to you know get started
11:40 - with node which is this code okay so
11:43 - what I'm going to do here is I'm going
11:46 - to go to folder just go and create any
11:50 - folder in which you want to you know
11:53 - create your node.js project for example
11:55 - and then here I'm going to create our
11:59 - JavaScript file so I'm going to let's
12:03 - create our javascript file and I'm going
12:05 - to name it as app dot J's for example so
12:09 - just write app dot J F and press Enter
12:13 - we are going to you know see how we can
12:18 - build our node.js application using some
12:22 - editor better than for example normal
12:26 - editor on Windows or Linux so this we
12:30 - will see in the later videos but for now
12:32 - let's use for example I have notepad
12:35 - plus plus for JavaScript so I will open
12:38 - this app dot J's file in notepad plus
12:43 - plus but you can use any editor of your
12:46 - choice for now right and then I'm going
12:49 - to once again go to this page and I will
12:52 - just copy all the code from here just
12:54 - copy all the code and then I'm going to
12:57 - paste it here okay and then just save
13:00 - this code okay so just copy and paste
13:03 - this code and save this code and
13:05 - and I'm going to minimize everything
13:07 - once again so my code is saved and now I
13:11 - want to open the command prompt in this
13:16 - folder and the easiest way to do is you
13:20 - can do CD to you know this part and it
13:24 - will be okay but the easiest way is to
13:27 - just press your shift button so just
13:30 - press shift button and then right click
13:33 - on this folder and then you will see
13:36 - this option which says open command
13:41 - window here so just click this option
13:43 - and you can see we are directly in this
13:47 - directory in the command line so we are
13:51 - in the samples directory which is here
13:54 - itself right now in here what we can do
13:58 - is we just need to give this command so
14:01 - just give node command and then the file
14:05 - name so file name is app dot J's in our
14:08 - case so this while we have created right
14:10 - now right so just write app dot J's here
14:14 - and press enter
14:16 - okay now if you will notice here it's
14:20 - giving this message that we can open
14:25 - 127.0.0.1 which is the local host on our
14:30 - pc : this port so on port 3000 of the
14:37 - local host we can see this server
14:40 - running so i'm going to open my browser
14:43 - once again and in here i will just give
14:46 - the same address which was printed here
14:48 - so 127.0.0.1 and then port 3000 right
14:56 - which is the same address which is
14:58 - printed here this address okay and then
15:01 - press enter and you can see hello world
15:06 - is printed here so you know that your
15:09 - node.js server is working perfectly fine
15:13 - on your Windows operating system and you
15:16 - know that you have you know
15:18 - stall nodejs perfectly on your Windows
15:21 - operating system hello guys in this
15:23 - video I'm going to show you how we can
15:25 - download and install Visual Studio code
15:27 - on our Windows operating system Visual
15:30 - Studio code is a code editor on which
15:34 - you can you know edit or write different
15:37 - kind of codes for example PHP JavaScript
15:42 - HTML C++ or and many other languages so
15:46 - let's see how we can download and
15:47 - install Visual Studio code so just open
15:50 - your favorite browser and search for
15:52 - Visual Studio code or vs code and the
15:55 - first link which will appear here will
15:56 - be code Visual Studio com just click
15:59 - this link and then you will be able to
16:04 - see this kind of green button here you
16:05 - just need to click download Visual
16:08 - Studio code and then you will be able to
16:11 - you know save this kind of executable
16:14 - file which is vs core setup - tables dot
16:18 - exe file and you can save it anywhere
16:22 - wherever you want in your computer and
16:25 - depending upon the speed of your
16:28 - internet you can see it can take a
16:31 - minute or so because it's a thirty
16:35 - megabyte file so just wait for the
16:38 - download to complete and then we will
16:40 - start installing it ok so now the
16:43 - executable file is downloaded on my
16:46 - system so I can just run it so just
16:48 - click the exe file which you have
16:52 - downloaded and then start installing
16:54 - Visual Studio code now installing Visual
16:56 - Studio code is really easy so you just
16:59 - need to click Next accept license terms
17:01 - and condition click Next this is the
17:03 - location where code will be installed on
17:05 - your system click Next and then you know
17:09 - it's a star select Start menu folder so
17:13 - this is the Start menu folder and if you
17:16 - don't have the you know correct reason
17:18 - to change it don't change it and leave
17:20 - it as default and click Next and here
17:24 - you can see it will create a desktop
17:26 - icon for you register code as an editor
17:29 - for support for files
17:31 - and add to the path so environment
17:34 - variables also you can you know it will
17:37 - be able to set by itself okay and then
17:40 - click Next and click install it will be
17:44 - really fast installation so it will not
17:47 - take much time to install Visual Studio
17:49 - code and you can see it's installing and
17:53 - extracting all the files and then in few
17:55 - seconds it will be installed on your
17:57 - system
17:58 - now it's also going to set the
18:00 - environment path variables so whenever
18:03 - you want to open visual studio code
18:06 - using your for example command line it
18:09 - will be able to do it so now you can see
18:12 - the code is installed on my system so I
18:15 - can just leave this checkbox checked
18:18 - which will launch the Visual Studio code
18:20 - and click finish and now the Visual
18:23 - Studio code will be launched on my you
18:26 - know on my system now I will also see
18:30 - this welcome screen and getting started
18:33 - so if you are interested in learning
18:35 - more you can see this ton of information
18:39 - given on their website so you see top
18:43 - extension for c-sharp Python C++
18:46 - debugger for Chrome and many other
18:50 - options are here right now let's see how
18:54 - we can you know open the Visual Studio
18:57 - code from the command line so here you
19:00 - can create any file for example I will
19:04 - create a new file you can see it will
19:07 - create a new file or if I want to save
19:10 - this file I can just save it by going to
19:13 - the file and then save as or save so for
19:17 - example I will do save as and I will say
19:20 - for example test dot HTML right and now
19:25 - I can just type so it's a really good
19:28 - editor which has intelligence so I can
19:31 - just say HTML and press double tab and
19:35 - it's going to complete the you know tags
19:38 - for me right once again for example head
19:43 - and double tab and
19:45 - going to complete this once again the
19:47 - body for example so I can just write
19:50 - body and double tab and you know it's
19:54 - completing my you know tags for me okay
19:58 - and then you have the option to format
20:02 - your quotes right click and then just
20:04 - click format code and it's going to
20:06 - format your code for you also right out
20:09 - of the box now if you want so I'm going
20:12 - to close my code editor and for example
20:17 - I can just open a command line and here
20:20 - when I type code it's going to open the
20:23 - code for me so you can see it's going to
20:26 - open the code right and for example if
20:29 - you want to open the code or and you
20:33 - know open your project using code you
20:36 - just need to go to the folder in which
20:38 - your project is for example you have
20:40 - some node.js project just browse to this
20:43 - project and then you can just type code
20:46 - and the dot and it's going to open the
20:49 - folder for you hello guys welcome to the
20:52 - next video on node.js tutorial for
20:54 - beginners now in this video I'm going to
20:57 - show you how you can create your first
20:59 - hello world project using node.js from
21:02 - start to end so when we were installing
21:06 - node.js we have seen how we can you know
21:08 - just copy and paste the code and create
21:10 - a simple node.js project but we will see
21:13 - in this video what this code means and
21:16 - how we can create a very simple hello
21:19 - world node.js server so let's get
21:23 - started I will be using windows for this
21:26 - but you can you know do this same on
21:29 - your Linux operating system or Mac OS
21:32 - plus I'm using the Visual Studio code
21:36 - for editing my code or as an editor but
21:41 - you are free to use any other code
21:43 - editor which you please to use so what
21:46 - I'm going to do first is I will just
21:49 - open the you know folder in which I want
21:52 - to create my project so for example this
21:55 - is the folder where I want to create a
21:57 - project on Windows simple
21:59 - you know thing is you can just press the
22:02 - shift button and right-click on it and
22:05 - you can open the command line in this
22:07 - folder by this method so just press
22:10 - shift right click and just press this
22:13 - option which says open command window
22:15 - here which is going to open the command
22:18 - window in this folder right now here
22:21 - what we need to do is we will create
22:24 - first of all our for example up folder
22:27 - which will we will name it as HelloWorld
22:30 - for example so I will just write mkdir
22:33 - HelloWorld or let it be hello right and
22:38 - press Enter
22:39 - is going to create this folder right and
22:42 - then we will go inside this folder so CD
22:46 - hello and we are inside this folder so
22:49 - let's go inside this folder and in here
22:52 - what we will do is we are going to
22:55 - create a file javascript file for
22:58 - example so i will do this by using
23:03 - visual studio code so if you have
23:06 - followed my last video in which i have
23:07 - shown you how to install visual studio
23:09 - code you can just type code here and
23:12 - then type dot and press enter
23:15 - which is going to open visual studio
23:18 - code in this folder so it's going to
23:20 - open visual studio code inside it will
23:24 - be you know opening this folder also for
23:26 - you right now inside this folder let's
23:29 - create a file so i'm going to create a
23:31 - new file here and i'm going to name it
23:35 - as so let me save this file as for
23:38 - example app dot JS file okay press enter
23:42 - and it's going to create your app dot JS
23:45 - file now let's start writing some code
23:48 - so first thing here we need here is war
23:53 - HTTP is equal to require so just write
23:59 - require and we need to require a module
24:03 - so i will tell you what the module is so
24:06 - we just need to write HTTP here and a
24:10 - module is something like a library so
24:13 - it does what classes do in
24:16 - object-oriented programming is so it's
24:18 - for example whatever you do in C++ you
24:22 - just include a library inbuilt library
24:25 - for example
24:27 - iostream or some other libraries or what
24:30 - you import in Java you import some
24:33 - libraries in order to work with those
24:35 - libraries in Java
24:37 - similarly mod node modules are the way
24:41 - to import some already built code in
24:44 - nodejs and we can use this code so
24:48 - there's such module in node.js which is
24:52 - already inbuilt module which is HTTP and
24:55 - we need to create the instance instance
24:58 - of for this module using requires so
25:02 - require is like include in C++ or import
25:06 - in for example Java right so after
25:09 - requiring this HTTP module we created an
25:14 - instance of HTTP right now the next step
25:17 - is we use the created instance and we
25:23 - will call a method called create server
25:25 - or to create an instance of this server
25:28 - right so just use for example HTTP and
25:32 - then we will call a method called create
25:36 - server so just write create and so
25:40 - something like this okay and inside
25:43 - these brackets we pass one function now
25:48 - in JavaScript if you know we can make a
25:52 - anonymous function let's create a
25:55 - function here and then we will see what
25:57 - is an anonymous function so for example
26:00 - I will just write var and for example I
26:04 - will just write the name of the function
26:06 - so if you move for example right and
26:10 - then I will just write function and we
26:15 - don't need to give any name to this
26:17 - function because we want this function
26:19 - to be anonymous and we will pass two
26:22 - arguments here response and request so
26:25 - first will be
26:26 - if requests for example and second
26:30 - argument is the response so you can give
26:32 - any name to these argument I'm giving it
26:35 - according to the usage which we will
26:38 - pass here as an argument so you can do
26:41 - something like this or you can you know
26:44 - use a full name for example request or
26:46 - response it doesn't really matter right
26:48 - and then you can just create this
26:52 - function so this kind of function
26:53 - doesn't have any name so they are called
26:56 - anonymous function and then you can pass
26:58 - these functions here right so this will
27:02 - be your function you are passing or
27:04 - instance of function you're passing
27:06 - inside this creates over method now most
27:09 - common are you know usage of this kind
27:13 - of anonymous function we don't do it
27:16 - something like this but instead of this
27:18 - passing the instance you can directly
27:22 - paste it something like this so you will
27:24 - mostly see this kind of code in node.js
27:27 - so just pass this anonymous function
27:29 - inside these brackets and you will be
27:33 - good to go so there are both the ways
27:36 - are correct for you right now inside
27:39 - this function we will just take a
27:41 - request and the simple thing is to send
27:46 - the response right so first of all on
27:49 - which port or on you know on which IP
27:53 - you are going to run your server for
27:57 - example so there is a function so just
28:00 - go outside this you know function and
28:03 - just call a function called listen so
28:07 - just write listen function and whatever
28:11 - number you will write here this will be
28:13 - your port for example you write 3000
28:16 - here this will be the port on which your
28:19 - you know server will run so it will run
28:23 - on localhost obviously and it will run
28:25 - localhost 3000 port okay just listen on
28:29 - 3000 foot port you can do something like
28:32 - 80 81 you know whatever port is
28:35 - available on your you know
28:37 - computer you can use this for sport so
28:40 - for example I use three thousand and the
28:43 - next thing here is we will take our
28:47 - response variable so just use this
28:50 - response variable and then call a method
28:53 - called end here okay and this is the
28:57 - basic you know thing you need to do in
29:00 - order to you know reply whatever client
29:04 - is recommendable client is you know
29:06 - requesting from a get request HTTP
29:09 - request for example right so we will
29:11 - send for example hello world here so
29:14 - just write hello or hello node will be
29:18 - more appropriate right and if you want
29:20 - you can just give this line break here
29:22 - also so this is it this is the simplest
29:26 - server you can make using Noches and if
29:30 - you want you can just log you know show
29:33 - the user that you have you know created
29:37 - this server on this port so you can just
29:40 - write for example console dot log and
29:44 - then you can give the information so for
29:49 - example I can write server is running on
29:58 - for example 127.0.0.1 port 3000 okay and
30:05 - it will run on this port and obviously
30:09 - you need to write HTTP I hope you know
30:13 - what this is so HTTP colon slash slash
30:16 - something like this right and if you
30:19 - want you can do something like this also
30:20 - and then save your code and open your
30:24 - command line once again and you can see
30:27 - it has this file and you can run this
30:29 - file using node and then the file name
30:32 - which is AB dot J s press ENTER and you
30:35 - can see it will give you this kind of
30:38 - alert you can just allow on your windows
30:41 - operating system which is OK and it
30:44 - shows this message which we want to
30:46 - display from here so it's showing this
30:49 - message that
30:50 - the server is running on this board so
30:53 - let's see let's open our browser and
30:56 - let's see if it opens or not so you can
30:58 - see here this code is running so our
31:03 - server is running on 127.0.0.1 and it's
31:10 - printing hello node right so this is the
31:13 - basic you know code for the server so
31:17 - what we need to create a server and
31:19 - instance of HTTP module and then this
31:22 - method which takes our anonymous
31:24 - function which have two argument request
31:26 - and reply or response recursion response
31:30 - and whenever request comes on this port
31:34 - you just reply with this message which
31:37 - is hello node for example now to inspect
31:42 - this code you can just right click here
31:45 - and you can just click inspect element
31:48 - here on Chrome also I think this is the
31:52 - same thing and you go to network here so
31:56 - something like this here Network and
31:59 - then when we reload our server for
32:02 - example you can see there is a request
32:05 - get request and it's requesting this IP
32:11 - and this port is sending get request and
32:13 - in the reply we are getting the status
32:16 - code 200 which is okay whenever you are
32:20 - you know request on cat you are supposed
32:24 - to you know get the 200 okay reply which
32:28 - is a correct reply from the server right
32:30 - now this is the default so this reply
32:35 - 200 will be sent automatically but if
32:38 - you want to be sure you can just write
32:40 - response dot write head so just write
32:45 - write head and then it takes a few
32:49 - arguments so first is the reply code
32:52 - which is 200 which is also a status code
32:55 - or n HTTP if you don't know what is this
32:58 - 200 just search for HTTP status codes
33:02 - right and
33:03 - you will see what this means is and then
33:06 - the next argument will be an object
33:09 - which contains two argument once one is
33:13 - the content type so just write the
33:15 - content - type and content type will be
33:21 - what kind of you know replies you want
33:25 - or you want the client to receive so
33:28 - content type let's say it's a text and
33:33 - plain so something like this not this
33:38 - first plane okay and then close it okay
33:42 - and then once again we will kill our
33:44 - server and once again we will run our
33:46 - server and then we will refresh our you
33:51 - know request and it's the same no change
33:53 - here but this time we are making sure
33:56 - that we are sending 200 on the client
33:59 - from the server using this code if you
34:02 - for example send 201 from here and save
34:06 - it and once again run your server so
34:10 - let's kill and run our server once again
34:13 - and once again refresh our code you see
34:16 - you get the status code to zero one but
34:19 - this means different so this is not a
34:21 - good practice whenever you are using get
34:24 - requests you don't want to send to zero
34:27 - one but because the meaning of two zero
34:30 - one is little bit different which is
34:31 - generally used in post requests so you
34:35 - know just search for HTTP status codes
34:38 - and you will be you know good to go okay
34:42 - so this is how you can write a basic
34:44 - server using node.js
34:46 - hello guys in this video I'm going to
34:48 - show you how you can download and
34:51 - install a command line tool for Windows
34:53 - which is better than the native Windows
34:57 - command line tool which is called
34:59 - commander now if you have you know used
35:03 - command line tool on Windows ever it
35:06 - looks like this so I'm using Windows 8
35:09 - and it looks like this and if you are a
35:12 - developer or if you want to you
35:16 - use a command line for your work then
35:21 - using this command line tool is not you
35:24 - know satisfactory I would say for
35:27 - example you are building a node
35:29 - application and you need to run node
35:32 - commands here and this works fine but
35:35 - for a developer they want more than this
35:40 - kind of boring command line tool now you
35:44 - can say Windows 10 has already been
35:47 - there and their command line tool is
35:50 - little bit better but it's not so much
35:53 - better that we can love it for example
35:58 - so let's see what command line tool I'm
36:01 - going to show you and let's see what's
36:04 - the difference between them so what we
36:07 - are going to do is we are going to
36:08 - download and install a free command line
36:11 - tool which is called CMD ER and we say
36:15 - it command tool okay so just I type CMD
36:20 - ER
36:20 - commander and the first link which will
36:23 - appear here will be commander dotnet
36:27 - right so just click this link and this
36:30 - tool is free come online tools so you
36:33 - can use it for free and in here you can
36:37 - see the first look of it it will look
36:41 - like this and to download it you can
36:44 - just click this download button now
36:47 - there are two you know versions of it
36:50 - one is the download mini version which
36:53 - is six megabyte and if you are
36:56 - interested in the whole functionality
36:58 - then you can you know download this 80
37:01 - megabyte download installable file okay
37:06 - so it's a zip file so it's not an
37:10 - installer it's a zip file so you just
37:11 - need to extract it and you just need to
37:15 - you know run the command line tool from
37:18 - there okay so let me save this zip file
37:23 - and once this zip file will be
37:25 - downloaded it will take around 1 minute
37:28 - on my PC it can
37:29 - take more or less time depending upon
37:31 - the speed of your computer and once it's
37:34 - downloaded we will see how it works okay
37:37 - so now the download of this zip file is
37:41 - complete and I have already extracted
37:43 - this zip file this file will look like
37:46 - this so you just need to extract it in
37:49 - the folder of your choice okay after
37:52 - extracting it you will see this
37:54 - executable file which says commander dot
37:58 - exe you just need to double click it
38:00 - very simple stuff and I'm going to
38:03 - minimize everything and by the mean time
38:05 - it will start okay now here you can see
38:10 - unlock and continue command and visit
38:13 - home page and exit and it says that some
38:19 - of the deals are missing you don't need
38:22 - to worry about them you can just say
38:24 - ignore and continue for now okay and
38:27 - then just skip this version for now okay
38:31 - and now it will open this command line
38:34 - too and you can see when you you know
38:38 - start this command line tool the
38:40 - difference between these two command
38:42 - line tools right so you know when at the
38:47 - time when you open it it will look like
38:49 - this very sleek and you know you will
38:53 - love it from the first step itself you
38:57 - can you know follow or execute any
39:01 - command which you can run on windows and
39:05 - even which you can run on your Linux or
39:09 - UNIX command line tool for example LS
39:13 - minus L and list all the you know piles
39:19 - and the permissions of your files and
39:22 - folders right or a CD or mkdir or many
39:28 - command line commands it can execute and
39:32 - the best thing what I like about this
39:36 - command line tool is for example if you
39:38 - want to open two command line
39:42 - command line or command prompts what you
39:45 - need to do is you need to open the
39:48 - command prompt - or you know two
39:51 - terminals for to command line
39:54 - you know commands if you want to run in
39:56 - parallel right for example in case of
39:59 -  you need to run the daemon
40:03 - in background and then you need to
40:05 - execute the shell itself right and
40:08 - in that case you need to open two
40:11 - terminals at the same time and it's not
40:14 - I mean very elegant in case of commander
40:20 - what you need to do is you can just
40:22 - right click on this icon at the top and
40:24 - you can just say new console it will
40:27 - give you this option you can say start
40:29 - and we'll start a new terminal you can
40:33 - see side by side right so you can
40:36 - navigate between them like this you just
40:40 - need to press these tabs and you can
40:43 - open multiple terminals like this on
40:46 - commander this is the feature which I
40:49 - like this command-line tool also comes
40:52 - with SSH so if you want to you know
40:57 - control a remote PC or a Linux operating
41:02 - system it will help you so just FF edge
41:05 - and whatever is the IP address of your
41:08 - PC then you will be able to you know
41:13 - access this that PC so you can see when
41:15 - I press SSH and it gives me one bunch of
41:20 - the options right and yeah so you can
41:25 - see you can just use it and see if it's
41:29 - good for you or you want to stick with
41:32 - the old command-line tool it's on your
41:36 - you know choice but I am is you know
41:39 - lately using this command line tool and
41:41 - I'm loving it so I wanted to share with
41:43 - you so hello guys welcome to the next
41:46 - video on node.js tutorials for beginners
41:47 - in the last video we have seen how we
41:50 - can write a small
41:53 - so using no chairs now in this video I'm
41:57 - going to show you how you can use node
42:00 - debugger to debug any problem in node.js
42:04 - so what I have done here is in the last
42:08 - video I've shown you how you can use
42:11 - this create server and what I have done
42:16 - is I have edited this code a little so I
42:19 - have created our variable called body
42:22 - and I have provided some value to this
42:25 - body right and then I have created one
42:28 - more variable called content length and
42:31 - this content length is equal to the
42:34 - length of the body so just take the body
42:37 - variable and call a method called length
42:40 - on it and we give you the length of this
42:44 - body variable which contains this text
42:47 - right and in the response dot write had
42:51 - I have the status code and last video I
42:55 - have shown you this header which is
42:59 - content type and there is one more
43:02 - header called content length and Here I
43:06 - am but just passing as a value of the
43:08 - body length so content length I'm
43:11 - passing here this variable here okay so
43:15 - basically what it's going to do is it's
43:17 - going to just print the header and in
43:22 - the header we are going to see the
43:24 - content length also now I'm going to
43:28 - just run my app by the way I'm using
43:31 - this different terminal this time this
43:34 - terminal is for Windows which is called
43:37 - commander CMD ER if you want you can
43:40 - download it for free from its website so
43:44 - just search for commander download and
43:46 - you will be good to go so node and then
43:49 - just run your app and press ENTER and
43:52 - then I'm going to open my browser and
43:55 - just run this URL which I'm running
44:01 - and when I will go here so first of all
44:05 - I will just click this option here in
44:09 - the network which is this one and there
44:12 - is a variable called content length and
44:15 - length is 28 right now right so this
44:20 - content length is due to this variable
44:23 - right now let's see how we can use node
44:27 - debugger so for example what I want to
44:31 - do is I want to for example my mistake
44:36 - I called a wrong method on this body
44:39 - variable for example instead of typing
44:42 - length
44:43 - I typed a wrong spelling of length for
44:48 - example right now this is a mistake so
44:52 - when I run my code once again and i
44:56 - refresh my browser once again you can
45:00 - see I don't get any response here and
45:04 - when I click here I also don't get the
45:09 - value of for this content length so
45:11 - right now I can see content length is
45:14 - undefined right so this is basically an
45:18 - error which is coming from this but we
45:22 - know that we intentionally you know type
45:25 - this length wrong but sometimes you
45:27 - don't know where where the error is
45:30 - coming so for this we can use node
45:33 - debugger so right now instead of running
45:36 - node ab dot j s you just need to write
45:40 - node debug and then app dot j s so just
45:45 - add debug in between node and your file
45:49 - name right so note debug half dot j s
45:53 - and press enter and then it's going to
45:56 - open your code in the node debugger now
46:01 - the first thing it will show you is some
46:05 - lines of code so you I can say first
46:08 - three line of my code in the debugger
46:12 - right now too
46:14 - you know the more options about this
46:18 - debuggers you can always type help here
46:21 - and press enter is going to give you the
46:25 - basic command so R is for run cont or
46:30 - it's shortcut if c is for continue and
46:34 - NEX T you can type or n for the next or
46:39 - step or out or back trace or set break
46:42 - point and many other you know commands
46:45 - right now for example somehow I know
46:49 - that some the error is coming from here
46:55 - because we are not able to see the body
46:58 - right so here we want to set the break
47:01 - point so this is the line for right so
47:04 - what we can do here is we can call a
47:11 - method called set break point which is
47:13 - this one right so just call this method
47:17 - set break point and then in here in the
47:23 - brackets you just give the line number
47:26 - so line number we are interested in here
47:29 - is line number four right which is the
47:33 - Declaration of body tag just right for
47:36 - here and then press enter and our
47:40 - debugger is stopped here right now in
47:43 - order to continue this program you can
47:48 - just type cont or directly C to continue
47:53 - and press ENTER and the program will
47:56 - continue for example okay and then when
47:59 - I just refresh my browser once again I
48:03 - can see the breakpoint is met so our
48:09 - break point is at four so we are on our
48:11 - break point right now in order to go
48:15 - further you can you know type as to step
48:19 - into or if you want to go next
48:22 - then you can type any exp
48:26 - okay so for example I will just type N
48:29 - for the next command because for next
48:33 - command you can either use N or next
48:36 - itself right and press ENTER and we are
48:39 - on the next line right once again you
48:43 - when you press ENTER it will execute the
48:46 - last command you have executed so if I
48:50 - don't type anything here you just
48:53 - continue you know implementing or
48:57 - executing the last command you have you
48:59 - know executed which is next right and
49:02 - let's check the values of for this these
49:06 - variables right so to know the value of
49:10 - these variables I can type our EPL which
49:15 - is read a well print line for example or
49:20 - and then press ENTER and then we can
49:25 - just type body and then press ENTER and
49:30 - it gives the value of the body which is
49:33 - correct in our case because the body
49:36 - value was this which is matching in the
49:40 - debugger so we know that this variable
49:43 - is perfectly fine now we go to the next
49:47 - variable which is content length and
49:50 - press ENTER and it doesn't give any
49:54 - value so I know that something is wrong
49:56 - here and then I I can see here the
50:00 - spelling mistake is here and I know the
50:05 - problem is coming from this place so I
50:07 - can correct this problem and I can go
50:11 - out of my debugger by typing exit so
50:14 - press control C first and then dot exit
50:19 - just press dot exit and you are out of
50:22 - your debugger okay and then if you want
50:25 - you can run your node application
50:28 - normally and then just refresh your page
50:31 - and you will see this response once
50:35 - again right now if you are using the
50:39 - witch
50:40 - studio Visual Studio code also have the
50:44 - option of debugging right so if you want
50:47 - to debug using this Visual Studio code
50:51 - editor you can go to view and in the
50:56 - view you can just press debug so you
50:59 - will be in the debug menu you can see
51:03 - here there is a green button which is
51:06 - for debug right and if you want to start
51:10 - debugging you just need to press this
51:12 - green button here and you can see your
51:15 - debugger is running right and in here
51:19 - you can even set the breakpoints so for
51:22 - example I want to set the breakpoint
51:24 - here on the line for you can see this
51:27 - red dot you just need to click here and
51:29 - for example I just refresh my webpage
51:32 - for example you can see this breakpoint
51:36 - is reached when I press the you know
51:40 - this refresh button right so for example
51:45 - I will just break this debugging once
51:49 - again and once again I can for example I
51:52 - can do this spelling mistake and once
51:56 - again I can start the debugger and once
51:59 - again I will refresh my page for example
52:02 - and we are here and then to step to the
52:07 - next step you can just press this button
52:10 - which will go to the next step
52:12 - and if you want to see the value you
52:14 - just need to hover over this variable it
52:16 - will show you the value of body and in
52:19 - here you can see content length is
52:21 - undefined right so we know the error is
52:25 - coming from this point right and this is
52:29 - how you can debug from Visual Studio
52:32 - code also and to break everything from
52:35 - the debugging option you just need to
52:36 - press this red button okay so this is
52:40 - how you can debug your problems in
52:44 - node.js hey guys welcome to the next
52:48 - video on node.js tutorial for beginners
52:51 - in this video we will see how we can use
52:54 - the node.js documentation effectively
52:57 - and we will see how to use global
53:01 - objects in node.js so let's get started
53:05 - first of all let's see how to use
53:08 - documentation and where to find
53:09 - documentation so just open your favorite
53:13 - browser and we will go to the node.js
53:16 - website which is no JSTOR G and in
53:21 - node.js dot o-r-g website there is a
53:24 - section called docks so just click this
53:27 - tab here and here you will find the
53:30 - various documentation on node.js so
53:35 - different motions of node.js and
53:38 - recently the newer version of javascript
53:42 - is also released which is es6 and beyond
53:45 - and some of the new concepts are also
53:50 - you know released under this new version
53:54 - so you may want to use or see at least
53:58 - these newer concepts and if you want to
54:02 - adopt them you can do it but for now
54:06 - I want to show you the node.js
54:08 - documentation so in here for example I
54:11 - will go to this version which is LTS
54:15 - which is long term version so I will
54:18 - click this version which is 6.9 2.1 at
54:21 - the time of making this video and in
54:24 - here you can see there's a lot of
54:27 - documentation here on the left-hand side
54:29 - you can see different modules and
54:33 - different type of sections here so what
54:36 - we have done till now is we have used
54:38 - this HTTP module which is a built in
54:42 - module right and you can find
54:44 - documentation on this here under HTTP
54:48 - right and when you click this and go
54:52 - down a little first of all these are all
54:55 - the functions which you can use with
54:59 - this HTTP module and when you go down
55:04 - you can see the stability so stability
55:07 - is the thing which you may want to see
55:10 - before going inside the documentation
55:12 - and if you see that this module and this
55:16 - documentation is stable then you can
55:20 - proceed further so first look at this
55:22 - thing if it's stable or not for the
55:25 - documentation and then go down and see
55:28 - whatever you want to see for example how
55:31 - to use this gap function with HTTP or
55:37 - how to use even this HTTP module how to
55:41 - require and then a lot of documentation
55:44 - you can find here right so whenever you
55:48 - are in doubt just come here and see the
55:51 - documentation now let's talk about the
55:54 - global objects now in this documentation
55:58 - when you go to this section which says
56:00 - Global's and click here you will see
56:04 - Java Script or in particular node.js
56:08 - have some global objects so if you are
56:12 - coming from front-end JavaScript on the
56:15 - browser side you may know that there is
56:19 - a global object in JavaScript which is
56:22 - called window object and under this you
56:26 - may have seen console object or set
56:32 - interval or other you know functions
56:36 - related to this window object something
56:39 - like a lot or different kind of global
56:42 - object in a same way node.js also have
56:45 - these global objects which you can use
56:49 - in your node.js code and let's see how
56:54 - we can use them so I will go to my code
56:59 - editor here and I will remove everything
57:02 - and let's start from the beginning for
57:04 - example and let's see which function we
57:09 - want to use so for example I will use
57:11 - the set timeout function here okay and
57:15 - as the name suggests
57:17 - it is used to set some time out and it
57:21 - has a argument which is a callback
57:23 - function and a delay whatever delay we
57:27 - want to give here okay so we can just
57:31 - write set timeout and then we can call a
57:37 - function so just write function and this
57:42 - will be anonymous function so just write
57:46 - this blank bracket and then the curly
57:51 - braces something like this okay so this
57:54 - is our anonymous function here and then
57:57 - the time out for example I want to give
57:59 - the timeout 300 milliseconds so you can
58:02 - give the timeout in milliseconds here
58:04 - second argument is the millisecond or
58:07 - timeout right and inside this function I
58:11 - can perform some tasks for example
58:14 - printing on the console so I can use
58:18 - console.log function for this you have
58:21 - already used this console log in our
58:24 - previous program and we will do the same
58:27 - here also right so what we can do we can
58:32 - just print for example three seconds
58:36 - have passed for example something like
58:40 - this okay and then save your program and
58:44 - I will open the console and in here I
58:48 - will just run my app for example node
58:51 - app dot J's and run it and when you run
58:55 - it it is just wait for three seconds and
58:59 - then it will print this message which we
59:02 - are printing using console.log okay so
59:05 - once again run the program wait for the
59:08 - three seconds and then it will print the
59:11 - message and then it will come out of the
59:15 - event view for example and it will close
59:18 - the program right in the same way you
59:22 - can use a save or set interval function
59:26 - to set some interval so instead of set
59:30 - timeout you
59:31 - can use this function which is used set
59:34 - interval now for this set interval what
59:38 - we can do is we can define a variable
59:41 - for example and we will say this is our
59:44 - time variable and we will assign the
59:47 - value of zero to it right and then what
59:50 - we can do here is inside this set
59:54 - interval function we can just use time
59:57 - plus equals two because our time timeout
60:02 - or time interval we are using here is
60:04 - two thousand milliseconds right and for
60:07 - example we can just print the value of
60:11 - this time here and we can say this much
60:15 - amount of time has passed or second half
60:19 - passed
60:20 - okay and save your code and run your
60:24 - code once again and let's see what
60:27 - happens here so two seconds have passed
60:30 - four seconds have passed six seconds
60:33 - have passed so it will increase the time
60:37 - the value of this variable by two again
60:40 - and again and this function will enable
60:45 - your node shares program to run in a
60:49 - loop kind of thing so it will never end
60:53 - until you have some condition to end it
60:55 - okay so what you can do to end it you
60:59 - can just press control C to come out of
61:03 - the program okay
61:05 - so let's say we want to come out of the
61:09 - set interval function when some
61:11 - condition is met so for this we can
61:14 - define a variable called some other
61:17 - variable for example timer which is
61:21 - equal to set interval and then we can
61:25 - see here this timer when some condition
61:28 - is met so for example if the value of
61:33 - time so if the value of time is greater
61:37 - than for example 7 then we want to clear
61:42 - the interval so just
61:44 - use a global object called clearinterval
61:49 - and then we can pass this timer variable
61:54 - here and it's going to clear this
61:57 - interval okay and then let's run the
62:01 - program once again and let's see what
62:04 - happens so two seconds have passed four
62:07 - seconds have passed six second have
62:09 - passed and then when the value has
62:12 - become eight at this time it is going to
62:16 - clear the interval because when this
62:19 - condition is met
62:20 - this function is called which is going
62:22 - to clear the timer and it's going to
62:24 - come out of this function right now I'm
62:29 - going to also show you some of the other
62:33 - important objects which you can use in
62:37 - node.js which is their name and file
62:42 - name so we know that we can use a
62:45 - console log to print anything on the
62:49 - console and there is a global object
62:52 - called their name so just write double
62:55 - underscore and then write their name
62:59 - here it's going to give you the
63:01 - directory name you are currently in so
63:05 - I'm just going to once again run the
63:07 - program and you can see it's going to
63:09 - print the directory name right now for
63:13 - example I want to print the file name I
63:16 - am currently in you can just write
63:19 - underscore underscore file name right
63:24 - and then you can run your program once
63:27 - again and now it first prints the
63:31 - directory name which is by this object
63:36 - their name and then we have the file
63:38 - name here you can see AB dot J's file
63:42 - right and you can go through this
63:47 - documentation once again how they work
63:49 - so for you apply go to their name it's
63:53 - basically showing the same example which
63:55 - I have shown you
63:57 - and here also file name and the
63:59 - explanation of this function or object
64:04 - you can find in this documentation so
64:07 - this documentation is going to help you
64:09 - a lot whenever you are developing in
64:12 - node.js so please keep in mind whenever
64:15 - you are developing your server or any
64:18 - node.js application just go through the
64:21 - documentation whenever required hello
64:25 - guys welcome to the next video on
64:26 - node.js to troll for beginners in this
64:28 - video we will learn how we can create
64:30 - custom modules in nodejs now in the
64:34 - previous videos we have already seen how
64:37 - we can use built-in modules in node.js
64:39 - and the example of that was using the
64:45 - module called HTTP so in the previous
64:48 - videos we have used a built in module
64:51 - which was already built in no chairs
64:55 - which was called HTTP and the way we
64:59 - have used it is like this so we have
65:02 - used this require keyword and then use
65:06 - the name of the module which we wanted
65:08 - to use right and we have assigned this
65:11 - module to our variables so that it has
65:17 - created an instance of this module and
65:21 - using this variable we can call any
65:24 - method inside this module which it
65:29 - contains right in a similar way in
65:33 - node.js we can also define our own
65:36 - custom module now for example we want to
65:40 - define a module which says hello in
65:44 - different language so we can define our
65:47 - custom module now for that what we can
65:51 - do is we just need to create a new file
65:54 - for every module we want to create so
65:58 - let me go to the command line and let's
66:01 - see what are the files which are there
66:04 - in inside and my project right now so as
66:09 - I can see I have right now
66:11 - only am not chairs which is my main file
66:14 - you can see here also the same right and
66:17 - now I'm going to create a new file for
66:20 - example I'm going to say that it's a
66:24 - hello dot J's for example and in this
66:28 - new file you want to create a function
66:32 - for example I'll create a function and
66:36 - first of all let me create a variable
66:39 - which has the name save hello in English
66:46 - for example right and to this variable I
66:49 - will assign a value which is returned by
66:53 - a anonymous function so we can define an
66:56 - anonymous function like this we have
66:58 - already seen in the previous video and
67:00 - then this function returns for example
67:05 - let's see what it returns so it returns
67:09 - hello in English something like this
67:13 - right and the way we can use this
67:18 - function in our main Abdur chair is we
67:23 - just need to use a keyword called
67:26 - exports right so here we have defined
67:30 - this variable and if you use instead of
67:34 - this war if you use exports something
67:40 - like this then you can use all the
67:44 - content of for this file in the other
67:49 - file for example right now you can use
67:54 - this file content into the main file for
67:59 - example we use the same construct we
68:03 - just use var and let's say our variable
68:07 - name we want to give here is hello right
68:11 - is equal to require just use require and
68:16 - as we have done in the built-in module
68:20 - we have just called the name of
68:23 - module for example we was using HTTP we
68:26 - have called the name of the module so
68:28 - the rule in node.js is whenever you are
68:32 - using a built in module which is not
68:36 - created by you then you can use
68:40 - something like name of the module only
68:43 - otherwise if you want to use a custom
68:46 - module you can just write something like
68:50 - this so you can just write dot and then
68:53 - forward slash and then for example the
68:56 - name of the file so hello dot J is
68:59 - something like this okay and now using
69:04 - this variable you can call a function so
69:08 - I will just use semicolon here and then
69:11 - for example I will just console.log the
69:16 - value which is returned by that function
69:19 - right and then what I want to do I will
69:23 - just use this variable and then call a
69:26 - method which I have defined here which
69:29 - is this one so whenever you you know
69:33 - require any file for example all the
69:36 - method inside that file are available in
69:40 - this file which in which you have
69:43 - required this file right so we can just
69:46 - write something like this and then don't
69:49 - forget these brackets because this
69:51 - function have these brackets right
69:53 - without any argument right and then save
69:58 - your code and then go to the command
70:00 - line and then just run your app so just
70:04 - write node app dot cheers and it gives
70:08 - me error so let's see what what the
70:11 - error is the spelling of export is wrong
70:14 - so just write exp so RTS right so just
70:20 - write exports pod say hello right and
70:24 - then once again run your code and now it
70:27 - prints hello okay so in order to you
70:32 - know use the
70:33 - content of one file into other you need
70:38 - to use the keyword before your function
70:42 - name for example right now if you want
70:46 - to use multiple functions you can just
70:51 - write something like this so for example
70:54 - first function is say hello in English
70:57 - then the second function is say hello in
71:04 - Spanish for example and it says hola
71:10 - something like this right now this
71:13 - method is also available so both the
71:17 - methods are available now in the m dot
71:21 - JS file so instead of using say hello in
71:24 - English we can just say say hello in
71:27 - Spanish and then we can run our code
71:30 - once again ad prints hola right so this
71:36 - is one way of for you know using a
71:39 - module custom module right the other way
71:43 - is you can just use something like this
71:48 - so what you can do here is you define
71:52 - your functions or these variables remove
71:57 - the export from here something like this
72:00 - and then you just use these colons here
72:07 - and then here you just write module dot
72:15 - exports and in the curly braces just
72:19 - include both the functions something
72:23 - like this okay and just use comma m and
72:30 - also don't forget to assign this value
72:33 - here okay so just write module dot
72:37 - export and then you have these object
72:41 - inside these curly braces for example
72:45 - say hello
72:46 - in English and say hello in Spanish and
72:49 - this is also this kind of you know
72:53 - export can also be used so let's see
72:56 - what's the result now I hope it will be
72:59 - same it's the same result right so this
73:04 - is the second way of exporting your you
73:08 - know methods right
73:10 - the third way of using modules is for
73:15 - example you have these object and
73:19 - elements here right and then you can
73:24 - assign this to some new object for
73:29 - example who are hello right and then you
73:35 - can just use module export and can
73:40 - assign the value of hello here right and
73:45 - we are not doing anything special here
73:47 - you see we were using this module dot
73:52 - export here right and what we have done
73:54 - is instead of using this we have
73:57 - assigned the value of for this object to
74:01 - a variable for example var hello and
74:07 - then we have just assigned the value of
74:11 - hello and we have exported this module
74:15 - right so essentially the same but this
74:18 - is more readable so this is that this is
74:22 - our hello module and it have two
74:25 - functions inside it right and it's also
74:29 - going to give the same result so once
74:32 - again run the code says the same let's
74:36 - use both the function so say hello in
74:40 - Spanish and say hello in English and
74:43 - then we can just run our code ad prints
74:48 - hello and hello Jolla right so in this
74:53 - way you can define a custom module Zen
74:55 - node.js hello guys I go to the next
74:59 - video on node.js
75:00 - to roll for beginners and in this video
75:02 - I'm going to show you how we can use
75:04 - file system module in node.js which is a
75:07 - built-in module now note implements file
75:11 - i/o using a simple wrapper around the
75:15 - standard POSIX functions and this is
75:19 - done using node file system module or
75:22 - simply FS module in no chairs now let's
75:28 - see first of all how we can add FS
75:30 - module so just write VAR FS is equal to
75:35 - require and then you just add FS okay
75:42 - and this is how you can add FS module
75:44 - now this FS module you can use for
75:49 - various input/output functions related
75:54 - to file system in this video
75:56 - particularly we are going to read see
75:59 - how we can use this FF module to read
76:02 - and write to a file synchronously and
76:06 - asynchronously right so first of all we
76:10 - will use this file to read from a file
76:14 - synchronously but for that we need a
76:17 - file txt file which we can read so I'm
76:20 - going to create a text file for example
76:23 - I will name it as test dot txt and in
76:29 - this text file I'm going to write some
76:34 - things and let's you know copy and paste
76:38 - this line ok so then what we want to
76:42 - read from our file system object which
76:48 - we have you know created using this file
76:52 - system module so for reading this file
76:55 - synchronously what we can do is we can
76:59 - just use file and first of all we need
77:03 - to assign this output which we read so
77:06 - we can just write a bar and then we can
77:12 - just say
77:13 - a red string is equal to F F dot read
77:24 - file sync ok so just write read file
77:30 - sync and this method will allow us to
77:35 - read our files synchronously ok and then
77:40 - give the name of your file and because
77:43 - this file is in the same folder you just
77:46 - need to give the name of the file not
77:48 - the path because it's in the same folder
77:50 - so just write test dot txt and the
77:54 - second argument which we want to pass
77:56 - here will be the encoding type so just
78:00 - write for example utf-8 and now let's
78:05 - try to print whatever we have you know
78:09 - read from the file to the console so
78:11 - just write console dot log and we will
78:18 - just print this string here whatever we
78:23 - have read so it could be red string and
78:28 - then we are going to run it so open your
78:31 - terminal and just run it using node app
78:35 - dot J's and you can see our file is
78:40 - ready so our file content let's see what
78:43 - was the file content and what the
78:47 - terminal is showing right so same
78:49 - content as the file so this file system
78:54 - module enables us to read the file
78:57 - synchronously and if you want to write
79:00 - this file to another file or write the
79:04 - content of the file which you have read
79:07 - to another file new file for example
79:10 - what we can do so we can just write F F
79:14 - dot write file sync so just write write
79:20 - file sync and then just pass this
79:26 - result to the argument okay
79:31 - so right for right file sync can be used
79:34 - to write to the file synchronously right
79:39 - and this file right file method takes
79:43 - two arguments the first will be the name
79:47 - of your file so let's create the name
79:50 - for example test 2 dot txt
79:56 - and the second argument is the content
80:00 - itself right and let's run our code and
80:05 - let's see what happens this time so just
80:08 - see here what happens here whenever we
80:12 - will run this code and you can see the
80:14 - text 2 is created when we run the code
80:18 - and the content of text 2 is same as
80:22 - test1 dot txt or test dot txt right so
80:27 - in this way you can use this to read and
80:30 - write to the file synchronously now FS
80:35 - mod you'll also have the async method
80:37 - and this will allow us to read or write
80:43 - to a file a synchronously right so this
80:47 - for this we just need to use the method
80:51 - called file name without sync so by
80:55 - default if you know about node.js nodejs
81:00 - is a if and Kronus you know program so
81:05 - whenever you write the program
81:06 - it runs asynchronously and what I mean
81:10 - by asynchronous is I'm going to show you
81:13 - in just a second so just write this once
81:20 - again we want to read the content of
81:23 - testify and just call a method read file
81:28 - and the first argument will be the same
81:30 - and the second argument we want to pass
81:35 - here is the callback method well let's
81:39 - say
81:40 - we can do it in the last argument also
81:44 - right so just write function and then
81:48 - just say error at the first argument and
81:52 - the data as the second argument okay and
81:56 - then give a curly bracket here and press
82:00 - ENTER and in here for example if there
82:05 - is some problem in weeding we want to
82:08 - return error so just call this argument
82:13 - first argument which we have passed in
82:15 - the callback function which is this one
82:17 - and then we can console error right so
82:22 - just write return console dot error and
82:31 - then pass this error
82:34 - here as an argument okay otherwise if
82:38 - there is no error in reading we can just
82:42 - console.log the content so instead of
82:45 - console.log outside the you know read
82:49 - file method we can just you know call it
82:53 - inside or call back okay something like
82:57 - this and this argument which it takes
83:02 - now is data because data will contain
83:06 - your content of your file which you have
83:09 - read okay for now let's remove this line
83:13 - of code and in here we will just call
83:19 - console.log and let's say we just want
83:24 - to print the file is read for example
83:28 - okay and let us run the code once again
83:32 - and let's see what happens so what I'm
83:35 - going to do is I'm going to run the
83:37 - program once again or code once again
83:40 - and you can see the output here it's a
83:43 - little bit different from earlier that
83:47 - first of all the terminal prints or this
83:51 - program prints the file is read
83:53 - which is this line and then it trends
83:57 - all the content of the pile which was
84:00 - there inside the file so this is done in
84:03 - a synchronous manner right so what's
84:07 - happening here is no J starts the server
84:12 - for example and this method is reading
84:17 - the file if the file is for example very
84:20 - big what happens then so you want to you
84:25 - know in a real-life situation when you
84:29 - are dealing with real data you need to
84:31 - do your stuff
84:33 - a synchronously right because otherwise
84:37 - your code will block this you know
84:41 - running of your server and other things
84:45 - cannot happen if one process or one you
84:49 - know file reading is taking very long
84:53 - time but this way of you know executing
84:58 - your code asynchronously will help you
85:01 - to you know run you know your code in a
85:05 - very good manner because your code is
85:09 - not waiting for the reading of your file
85:12 - but it's executing the next step and the
85:16 - next step once again if there will be
85:19 - some more you know useful code below
85:22 - this also then it's going to execute it
85:25 - and once the file is read it's going to
85:29 - print the content of the file using this
85:32 - console log so the callback function
85:35 - this function is called callback
85:38 - function and it is triggered whenever
85:41 - the you know a file is read completely
85:46 - right so this is how asynchronous you
85:52 - know way of reading file box okay in the
85:57 - same way you can write to the file
86:00 - asynchronously also and you just need to
86:05 - you know call FF dot right file and then
86:09 - the you know name of the file ways in
86:12 - which you want to write to so let's do
86:15 - that and let's see what's happened so FS
86:18 - dot right file and the first argument
86:25 - will be this argument the second
86:29 - argument would be the content which we
86:31 - want to write for example we want to
86:33 - write this data which we are reading
86:35 - from the first file for example and the
86:38 - third argument will be the same as we
86:42 - have done here the callback right so you
86:45 - can just copy this much amount of code
86:48 - before the bracket and then pass it here
86:51 - and we can just add a semicolon here
86:56 - okay
86:57 - and this is just checking whether your
87:01 - file is written and if it's not written
87:03 - it's going to you know console.log the
87:07 - error and if it's written then we can
87:12 - say success for example we can just
87:15 - print success right something like this
87:19 - and when you run your code once again
87:23 - it's going to write it so let's run it
87:26 - and program is done and at last it print
87:32 - success and you can see the file is also
87:35 - created text dot txt right so in this
87:39 - way you can use FS module in nodejs
87:44 - there is more you know functionality in
87:47 - this FS module which you can find on the
87:51 - node.js sites or go to node J dot o-r-g
87:55 - /a API / FF dot HTML and in here you can
88:02 - go here filesystem or you will be able
88:06 - to you know find more method related to
88:10 - this FS module here and there are so
88:14 - many method which you can use so just to
88:17 - go through
88:18 - this documentation and then you will be
88:22 - good to go
88:23 - hello guys welcome to the next video on
88:25 - noisiest atoll for beginners in the last
88:27 - video we have seen how we can use the FS
88:30 - module to create file read from file and
88:35 - write to a file now in this video we
88:39 - will see some more functionality of this
88:42 - module and we will see how we can delete
88:45 - a file and how we can create and remove
88:48 - directories in no chairs using FS module
88:54 - so the first requirement is this one you
88:58 - need to you know require this module
89:01 - which is a inbuilt module right now
89:03 - first functionality your first thing we
89:06 - will see here is how we can remove a
89:08 - file so in the last video I have created
89:12 - this test type txt file right and for
89:16 - example I want to remove this file so I
89:19 - can just write F F dot on link and then
89:24 - I can just give the path of the file
89:27 - with its name so my file is in the
89:31 - current directory so I don't need to
89:32 - give the part but I just need to give
89:35 - the name of the file which is test dot
89:38 - txt right and when I run this app let's
89:44 - run it and what happens is this text dot
89:50 - txt file is gone right so this unlink
89:54 - method you can use to remove a file but
89:58 - be careful here whenever you will you
90:02 - know run the code if the file does not
90:05 - exist then let's see what happens now
90:08 - this time it shows an error which will
90:11 - be due to the file not existing okay so
90:17 - in FS module you can also go to the
90:20 - documentation and check how you can
90:23 - first check for the file if it exists or
90:26 - not
90:26 - and then delete it so this can be your
90:29 - home or just search for
90:32 - how to check if the file exists and then
90:34 - try to delete it okay now let's move
90:38 - ahead and let's see how we can first of
90:41 - all for example create a directory so to
90:45 - create a directory first we will see how
90:47 - we can create a directory synchronously
90:49 - so if you are a little bit familiar with
90:53 - command line you know terminal commands
90:57 - then you know how to you know create a
91:01 - directly so in terminal whenever you
91:04 - type mkdir then it creates a directory
91:09 - right and in node also whenever you just
91:14 - call them method called mkdir after FS
91:18 - and then gave the name of the directory
91:21 - for example the name of the directory I
91:24 - want to give here is for example node
91:26 - itself okay so know directly I want to
91:30 - create and here I want to create it
91:32 - synchronously so don't forget to write
91:36 - sync here right and save your code and
91:39 - I'm going to run my code again and let's
91:43 - see what happens so I just run my code
91:47 - and you can see there is a new directory
91:50 - created which is called mode right now
91:53 - in order to remove a directory you just
91:57 - need to replace MK by RM so RM dir is
92:03 - going to remove the directory so
92:06 - synchronously was synchronous removal
92:09 - you just need to add this suffix like FY
92:14 - NC sync right and save the code run it
92:18 - again and just see here the directory
92:23 - will be in the book so this directory is
92:26 - removed right now in order to create a
92:30 - file asynchronously what we can do here
92:33 - is for example instead of using this
92:39 - sync we can just write something like
92:42 - this so FF dot and K
92:45 - they are and then the name of the
92:48 - directory once again for example node
92:51 - and then you can create a callback
92:55 - function here so I am just going to
92:58 - write function and then inside the
93:03 - callback function I can do whatever I
93:05 - want to do after the directory is
93:07 - created right so for example I want to
93:12 - create a file after I have created or
93:17 - directly something like this okay
93:19 - so inside my callback function what I
93:22 - can do is I can just write FS dot right
93:27 - pile right with a capital F and the name
93:33 - of the file so for example I want to
93:35 - create this file inside my new directory
93:38 - which is created which is node now in
93:40 - order to you know create this file
93:44 - inside the snow directory you just need
93:46 - to write dot slash to indicate that you
93:49 - need to go inside this node directory
93:52 - and then the name of the file for
93:55 - example my node dot txt okay so this
94:02 - will be the name of the directory and
94:04 - for example you want to write something
94:06 - I'm going to just write random text here
94:10 - and this is going to you know write this
94:14 - text to this file for example right so
94:17 - just save your code and run it again and
94:22 - let's see what happens so on the code
94:25 - the directory is created inside the
94:28 - directory the file is created and inside
94:31 - the file this random text comes okay so
94:35 - this is how you can make a directory now
94:40 - let us say that you want to delete this
94:42 - directory once again which also have
94:45 - some file inside it so I'm going to just
94:48 - remove it and I will just write F F dot
94:50 - the RM dir and the name of the directory
94:55 - so the name of the web directory is node
94:57 - right
94:59 - and if you do this it's not going to
95:02 - delete this directory because you
95:05 - already have some file inside it so
95:07 - whenever we run this code what it gives
95:11 - is it gives the error because you cannot
95:13 - remove a directory if it contains a file
95:17 - inside it so what we will do here is we
95:21 - will first remove the file and then
95:23 - remove a directory and this is very
95:26 - simple we have already seen it so just
95:28 - right FF dot on link and then you just
95:35 - need to give the path of the file you
95:38 - want to remove so this is because it's
95:41 - gonna know the folder so you will just
95:44 - write dot forward slash node and then
95:48 - you just need to give the name of the
95:50 - file so the file name is my node dot txt
95:55 - and then we can add a callback function
95:59 - here so just add a callback function and
96:03 - inside a callback function once this
96:06 - file is removed we want to remove the
96:10 - directory right so you inside the
96:12 - callback function you can call a method
96:15 - to you know remove the directory right
96:18 - and just save your code and let's run it
96:21 - again and let's see what happens so I'm
96:23 - going to just run my code again and you
96:27 - can see the file is deleted first and
96:30 - once the file is deleted this callback
96:33 - function is called and then the
96:35 - directory is removed ok so in this way
96:38 - you can use FS module to create
96:42 - directories and remove directories and
96:45 - remove files also hello guys welcome to
96:48 - the next video on a node.js to tol for
96:50 - beginners in this video we will talk
96:52 - about events module in node.js and how
96:56 - we can use event emitter in node.js we
96:59 - will also see so much of the node.js
97:03 - core API is built around event-driven
97:07 - architecture which means that because we
97:12 - that nodejs runs itself in an
97:16 - asynchronous manner so it's necessary to
97:19 - have some kind of event-driven
97:22 - architecture because so for example you
97:25 - if you are reading a data from a
97:29 - database so once your data is read from
97:33 - a database you need to trigger some
97:37 - event
97:37 - otherwise if your code is blocking and
97:41 - it's not you know a synchronous then
97:44 - your so execution will be blocked until
97:48 - the data is fetched from the database
97:51 - right so we have event in node API which
97:58 - helped us to you know for example same
98:02 - example you want to fetch a data from
98:05 - the database you write a function for
98:07 - this and as soon as you you know you are
98:11 - done with reading of the data from the
98:14 - database the code triggers an event so
98:18 - your code will run asynchronously and
98:21 - it's not spot stopping and as soon as
98:24 - the some function is done an event can
98:27 - be triggered and the execution can be
98:30 - done or it can be you know the data can
98:33 - be sent to the client for example right
98:35 - so let's see how we can use events and
98:39 - events emitter in known chairs
98:41 - so to use events just write VAR events
98:47 - is equal to require this keyword events
98:51 - right now in order to create emitter you
98:55 - need to call a method called event
98:58 - emitter right so you need to create an
99:00 - instance of new event emitter object
99:04 - okay
99:06 - so just write our event emitter is equal
99:10 - to new events and then call an event
99:14 - emitter on this object right so with a
99:20 - capital e right so this will create an
99:23 - instance of four
99:25 - event emitter okay and using this event
99:29 - emitter you can create an event or
99:33 - listener for the event and then you can
99:36 - also emit an event and the listener will
99:39 - listen to the event so how you can
99:41 - create a listener
99:43 - you can just write event emitter object
99:45 - and then there is a method called on and
99:48 - for example of you if you are writing a
99:53 - UI something clicked for example some
99:57 - button is clicked this is like a
100:01 - listener to your you know button click
100:04 - so you can hear write a keyword for
100:08 - example click so this will be the
100:12 - listener and whenever this keyword
100:15 - called clicked is emitted then this
100:18 - method which is a callback function here
100:23 - will be called and whatever code inside
100:26 - this callback function will be executed
100:29 - so this is kind of a listener so let's
100:33 - say there is a you know the keyboard
100:38 - clicked and we will omit this keyword
100:41 - using event emitter once again so just
100:44 - use event emitter dot emit and simply
100:50 - you can just call this keyword which
100:53 - means that this event is triggered for
100:57 - example click is triggered and here you
101:00 - can use any keyword so for example if
101:02 - you are fetching data from the database
101:04 - you can just write the query here or if
101:07 - you want to add some data you can just
101:09 - write add the keyboard depend upon you
101:12 - so whatever keyword you want to use here
101:16 - as a first argument it is such a word
101:18 - and whatever keyword you know you omit
101:22 - if it's the same as the listener keyword
101:26 - then this code inside this callback
101:30 - function will be triggered so let's see
101:32 - how we can use it so for example I will
101:36 - just console.log some things
101:39 - oh just right console dot log and I will
101:46 - say something is clicked okay so let's
101:56 - try to run our code now if you are using
101:59 - visual to the code there is a trick to
102:01 - open a terminal inside your visual
102:04 - studio code editor itself and the way
102:07 - you can do it you can just press control
102:09 - shift P and you give you this kind of a
102:12 - box and here just type it toggle
102:15 - integrated terminal and here you can run
102:23 - your code again and you can see we are
102:28 - already in the same folder in this
102:31 - terminal so we just need to write the
102:33 - node up thought j/s and run it and you
102:38 - can see something is clicked so
102:42 - basically what's happening here is
102:45 - whenever you omit this keyword then this
102:50 - listener then listen for this keyword
102:52 - and then the method or callback function
102:56 - will be called and whatever code you
102:58 - will write here will be executed okay so
103:02 - this is the basic functionality of event
103:06 - emitters now in here you can also pass
103:09 - some argument with this emit method so
103:13 - for example you want to pass some text
103:16 - so you can just pass for example button
103:21 - one okay and instead of for this you can
103:25 - just pass a function for example button
103:30 - and then you can just call button here
103:34 - plus and then instead of something we
103:38 - will call button one is clicked okay so
103:43 - this is an argument which will be passed
103:46 - here you can pass any number of argument
103:49 - you want here and just
103:52 - I pause the same argument here this you
103:56 - know value will be passed to this button
103:58 - right if it has the second argument then
104:01 - the second value will be passed to the
104:03 - second argument so you can pass some
104:06 - argument also like this and once again
104:09 - when you run the code it says button one
104:12 - is clicked okay so you can also pass
104:15 - arguments here now let's take a little
104:18 - bit more advanced example now for this
104:22 - example we will then need for example
104:25 - our utils module which is also a core
104:29 - module here so just write util here is
104:33 - equal to require YouTube and using util
104:41 - it has so many functionality and the
104:45 - functionality which we are going to use
104:48 - from this util is the inherit function
104:52 - awesome heads you know method from it so
104:56 - there is a method and util so just write
105:00 - you two and then call a method call
105:03 - inherit so and then it takes two
105:07 - argument first is the class which you
105:12 - want to inherit in so first is the class
105:15 - which is inheriting right so we need to
105:18 - create some for example object in order
105:22 - to inherit from event emitter so let's
105:26 - create an object so we will just create
105:30 - an object called students and the
105:33 - student have this function which will
105:38 - take the name of the student
105:40 - and then it will assign this name to the
105:44 - student itself so just write this dot
105:47 - name which is the name or the member of
105:52 - the student and it will be assigned by
105:56 - this name which is passed to this
106:00 - function right now as I said utils have
106:05 - this method called
106:06 - inherit and it takes two argument first
106:09 - is the class or the object of the class
106:13 - which wants to inherit so this is like a
106:19 - class which is inheriting and the second
106:23 - is the object which is the base class
106:28 - for example so from the class which you
106:31 - want to inherit so we want to inherit
106:32 - from this event emitter okay now this is
106:37 - really good thing about m and the
106:40 - emitter we don't need this bracket here
106:42 - and we also need this here right so now
106:47 - if you know the concept of inheritance
106:50 - what happens when inheritance is the
106:53 - class which is inheriting have the
106:57 - access to the methods and the members of
107:00 - the class from which it's inheriting so
107:04 - student have the access to for example
107:06 - on method or emit method or whatever
107:10 - method public method which are there in
107:13 - this event emitter class for example
107:15 - right so now what we can do here is we
107:21 - can create some student for example
107:23 - student one can be max is equal to new
107:29 - student and we can give the name here
107:34 - max okay so this argument is max in this
107:39 - first case right now whenever we call
107:44 - this object now this object also have
107:49 - the access to a method called on right
107:52 - which we have called using this event
107:56 - emitter instance because students is
107:59 - inheriting this event emitter therefore
108:03 - this object of the student also have the
108:08 - access to this method and you can simply
108:10 - use this
108:13 - you know method as we have done earlier
108:14 - so this students for example we can just
108:21 - get the keyword scored and then we can
108:26 - just pass the anonymous function or call
108:30 - back here and we can just pass some
108:35 - something like marks here right and we
108:40 - can control log it so just write
108:41 - console.log and then we can console.log
108:47 - for example first of all the name of the
108:52 - object for example max dot name and then
108:56 - we can just write here scores and the
109:03 - muskie score so the marks are here okay
109:07 - we can print this and then we can omit
109:11 - this event right in real-life situation
109:13 - you can do this Emmit on for example
109:17 - receiving the some data from the
109:19 - database or connected correct connecting
109:22 - to a client whenever connection is
109:24 - successful something like this but here
109:27 - for example i can just write max dot
109:31 - commit and then this keyword called
109:37 - score and the second will be if you
109:41 - remember the argument here can be the
109:45 - value of argument this argument can be
109:48 - passed from here right so we can just
109:51 - say 95 marks okay and let's run our code
109:58 - again to save the program and run the
110:01 - code again and here it says max scores
110:05 - 95 right or and you can just write
110:10 - something like marks also here so we
110:15 - know that he scores this much amount of
110:18 - mark and once again run the code and now
110:21 - it says max codes 95 marks right
110:26 - in the same way you can create a second
110:30 - second event something like this so
110:34 - instead of 4 max you can just say the
110:38 - second student is Tom right and the name
110:42 - you pass here also and instead of max
110:45 - you just essentially replace max by Tom
110:50 - this is our second student right and
110:53 - this time Tom scores for example 60
110:58 - marks okay so once again when you run
111:01 - the code you can just see math scores 95
111:06 - marks and Tom scores 60 marks okay so in
111:10 - this way you can use events and event
111:14 - emitters in no Jeff hello guys welcome
111:18 - to the next video on node.js tutorial
111:20 - for beginners in this video I'm going to
111:22 - show you how we can use streams in
111:25 - node.js specifically we will talk about
111:28 - readable stream in this video and in the
111:31 - next video we will talk about writable
111:33 - stream in Mochis so let's get started so
111:37 - first of all what are streams
111:39 - streams are UNIX pipe that lets you read
111:44 - data from a source and write data to a
111:48 - destination right so for example you
111:53 - want to read a data from a very big file
111:56 - or from a source which has the lots and
112:00 - lots of data and because you are running
112:05 - a server you don't want to block your
112:09 - server right so if you want to read this
112:12 - file you may want to or you would like
112:16 - to read this file in chunks or you know
112:20 - smaller portions and once this portion
112:24 - is read you want or you can do something
112:27 - right and streams allows us to do the
112:30 - same so streams allows us for example we
112:35 - want to read a big file streams allows
112:38 - us to
112:38 - read this file chunk by chunk and it
112:42 - will also give the information that this
112:45 - chunk is red and if whole file is read
112:49 - or not or we can do many you know events
112:54 - from this data right so let's see how we
112:58 - can use streams specifically readable
113:02 - streams right so to use streams we will
113:06 - use the FS module module and we have
113:09 - already seen how we can include this
113:12 - module in node.js just use var FS is
113:16 - equal to require FS now we will create a
113:20 - variable call for example readable
113:23 - stream is equal to F F dot create read
113:28 - stream and this takes a achievement
113:33 - which is the name of the source so for
113:37 - example I have this file whose name is
113:41 - file dot txt and it's a relatively big
113:45 - data so it has around the 500 5000 200
113:50 - lines of data I just copied a random
113:54 - data from some source and for example I
113:57 - want to read this data right now this
114:01 - filename here we will give as argument
114:04 - so just give file dot txt because it's
114:08 - in the same a directory you can see here
114:10 - and now we can use this variable read
114:17 - stream let's name it read the screen
114:20 - instead of readable stream okay so this
114:24 - read extreme we can use to listen for
114:30 - some event so basically whenever you use
114:34 - create read stream it inherits from
114:38 - event emitter and we have already seen
114:42 - how to use event emitters in the
114:45 - previous videos so it inherits from MN
114:48 - event emitter so we can call the
114:52 - method which are present in event
114:55 - emitter class also so we can you know
114:58 - trigger on event or emit method using
115:03 - this read stream now there is a
115:06 - predefined the event in create read
115:11 - stream which is called data okay and
115:14 - which allows us to read our pile in
115:19 - chunks so just write read stream and
115:22 - then we will just write on which we are
115:25 - inheriting from MN event emitter and we
115:29 - will listen for the event called data
115:32 - and then we will just create a anonymous
115:36 - function here and this anonymous
115:40 - function will read chunk of data so just
115:44 - write chunk and then we will just choose
115:50 - our function okay so in this variable
115:55 - whenever this event is triggered then
115:59 - this chunk will contain some chunk of
116:04 - data from this file right this chunk
116:07 - variable will be full and then we will
116:10 - you know use this chunk of data from
116:13 - this file okay so for example what I
116:17 - want to do is I want to just console.log
116:21 - this data so I will just write
116:23 - console.log chunk here okay and one
116:29 - chunk of data is read so we can just
116:32 - give a line kind of a console.log here
116:37 - so we know that this is one chunk okay
116:41 - after this line right so let's see how
116:45 - it works so I am going to just open the
116:48 - terminal and run my app and you can see
116:53 - there are few chunks which are read from
116:56 - this file okay so you can see my first
117:01 - of all this line is
117:04 - you know printed on the terminal because
117:07 - of this console.log and then we have the
117:10 - chunk of data and then again this line
117:15 - again and this chunk of data so it's
117:18 - reading the data in chunks and when all
117:22 - the file is wet then we have the output
117:26 - but this is not familiar because this is
117:30 - reading in hacks right we haven't
117:33 - defined what type of data we are reading
117:37 - so you can see in the file dot txt we
117:40 - have normal you know normal text it's
117:44 - reading in hex data right so how we can
117:49 - tell this functional method to read in
117:54 - readable text you can guess I think you
117:59 - can just write here the type the second
118:03 - argument is utf-8 for example and then
118:07 - just save it and then we will run it
118:10 - again and now you can see it's reading
118:14 - in the normal text so you can see this
118:17 - line and then judge chunk of data which
118:21 - is red and once again we will see when
118:24 - we will go a little bit up so this is
118:27 - the next line and whenever you will go
118:30 - up you will see these this kind of line
118:33 - so now we are reading the normal text
118:37 - but in chunks again right so this event
118:42 - data will allow us to read the file for
118:48 - example in chunks right and whenever one
118:52 - chunk is read you can do some logical
118:55 - you know stuff with this chunk of data
118:59 - right now there is one another event
119:03 - called end so you know that you have
119:07 - completed reading the file so instead of
119:10 - data whenever you use N and let's
119:14 - instead of for this console log you just
119:17 - say
119:18 - and end here okay and let's read the
119:22 - file again or execute the program again
119:25 - and once this data is read this line is
119:30 - printed which is due to this triggering
119:34 - of event called end event okay so once
119:38 - the file is read completely this event
119:41 - will be triggered and then this line
119:44 - will be printed or whatever code you
119:46 - will write here will be printed so for
119:50 - example I will create a variable here
119:54 - called add data right and what I want to
119:57 - do is I want to store all the you know
120:01 - text of the pile in this variable and
120:04 - once my data is read or once my file is
120:09 - read I want to print the content off for
120:12 - this data so instead of this what I can
120:17 - do here is I can just write data plus
120:21 - equals chunk something like this so what
120:26 - it's going to do is it's going to
120:28 - concatenate this chunk into this data
120:31 - variable right and once all the file is
120:35 - read I want to print it so I will just
120:38 - do console.log here and I will print
120:42 - this data variable so this
120:45 - differentially will contain all the file
120:49 - content okay and let's just comment this
120:53 - code out because we don't need it and
120:57 - let's run the program again so program
121:02 - is running so this time once the you
121:08 - know data is wet then it's printed using
121:12 - this console logs because we are not you
121:17 - know printing using this we have already
121:19 - commented out right so this time it this
121:23 - line is printing this text all the text
121:27 - okay
121:28 - and once the text is printed
121:32 - this line of code will execute and into
121:34 - print and here which is happening here
121:38 - okay so this is how basically you can
121:41 - use readable streams in node.js right
121:47 - now there are many options or related to
121:50 - read extreme and write streams so for
121:55 - example one of the option we have set
121:57 - here stead of setting the encoding from
122:00 - the second argument there is a special
122:03 - method which you can use to set this
122:05 - encoding which is the set encoding so
122:09 - instead of for this you can even do this
122:12 - also and code will run fine okay so
122:16 - let's run the code again and it's going
122:18 - to run it you know normally okay so just
122:23 - go to the node jeff's documentation on
122:27 - its website and you will find many
122:29 - useful functions and methods there which
122:33 - you can use in your code according to
122:36 - your requirement this is just the
122:39 - introduction to you know streams and
122:42 - specifically the readable stream hello
122:46 - guys welcome to the next video on
122:47 - node.js too tall for beginners in the
122:49 - last video we have seen how we can use a
122:51 - readable stream in nodes here and we
122:55 - have used this method called create
122:58 - restreams to create an object of read
123:02 - streams and then we have called that
123:04 - this method on this readable stream
123:07 - object which on data event was you know
123:13 - reading a chunk of the data from a file
123:15 - which we had created last time yeah and
123:19 - whenever a chunk of file is read then
123:23 - it's going to be used using this
123:25 - variable chunk in this anonymous
123:28 - function right so if you are not sure
123:31 - what I'm talking about just see the last
123:34 - video to be clear now in this video we
123:37 - will see how we can use the writable
123:39 - streams in node chairs so for example
123:43 - you have some
123:45 - vaso stream coming from somewhere for
123:48 - example from this file itself whatever
123:51 - we read from a big file we have we have
123:56 - created last time you want to write this
123:59 - data which we are reading in chunks to
124:02 - another file in chunks so we are not
124:05 - reading the whole file and then writing
124:08 - to a new file we are reading chunks and
124:12 - also writing chunks so it's not going to
124:15 - block your code okay so let's see how we
124:18 - can create a writable streams in no
124:21 - chairs now to create a writable streams
124:24 - I am going to use this code which I have
124:27 - written in the last video to read the
124:29 - file right and now we will create a
124:31 - writable streams just write var write
124:34 - stream is equal to F F dot create write
124:38 - stream and then we can give the name of
124:41 - the file in which we want to you know
124:44 - send our stream to so for example I can
124:48 - name my file as write file dot txt okay
124:56 - this will be the file in which we want
124:58 - to write our data now to use this write
125:03 - stream is really easy whenever you read
125:06 - this data so here on the data event here
125:10 - we were reading the data right so in
125:13 - order to write it to a file you can just
125:15 - call this write stream object and then
125:20 - you can call a method called
125:23 - write on it so just simply call a method
125:26 - called write and then it takes a chunk
125:29 - as an argument so you can just pass this
125:33 - argument here and this you know chunk
125:37 - will be written to the white stream
125:40 - object and in turn it will be written to
125:43 - the right file dot txt okay so let's run
125:48 - the code and let's see how it works so
125:51 - I'm going to open a terminal and run my
125:53 - code and it has just printed these
125:59 - which indicates chunk of data read you
126:02 - can see and then we can see a file is
126:06 - created here with the name right file it
126:09 - has the same content as our file dot txt
126:13 - have ok so this is essentially just
126:18 - writing the chunk of data as it reads
126:23 - the data from of file now in the
126:26 - previous videos we have also seen how we
126:29 - can write the data using the right file
126:33 - function right now the difference
126:35 - between this right stream dot right and
126:38 - the right file function is in the right
126:42 - file function we were just you know
126:45 - flushing all the data which we have in
126:49 - the buffer and it's not you know going
126:52 - to the file in which we want to write
126:55 - chunk by chunk but we were writing it in
126:58 - in a single shot right but using this
127:02 - method you can you know write the data
127:05 - to a file in chunks whenever you have
127:08 - data right so this is the benefit of
127:11 - this method and right streams over the
127:16 - right file method hello guys welcome to
127:19 - the next video on node.js troll for
127:21 - beginners in the last two videos we have
127:23 - been seeing how to use readable streams
127:26 - and writable streams in no chairs and in
127:29 - this video we will learn an important
127:32 - concept called piping in no chairs with
127:35 - readable streams and writable streams
127:38 - now in node.js or any server application
127:44 - writing and reading streams is so
127:47 - important and frequently use thing that
127:52 - nodejs has provided a back better
127:56 - mechanism for us to use which is called
127:59 - piping so if you think about a website
128:03 - for example what it basically does is it
128:07 - takes the HTML page for example and
128:11 - just giving a very simple example so a
128:15 - server takes a SD ml page and it first
128:20 - of all reads this HTML page and create a
128:23 - for example write table stream and send
128:25 - it to a browser in which we can see this
128:29 - HTML page content right so this
128:33 - operation is really basic to a server
128:36 - whenever you are making a website for
128:40 - example so first of all let's see what
128:43 - is piping or what are pipes so a piping
128:47 - is a great mechanism in which you can
128:50 - read data from a source and write to a
128:53 - destination without managing the flow
128:56 - yourself right so in the previous video
129:00 - we have seen that we had to create a
129:03 - readable stream first from a file and
129:06 - then we have created a writable stream
129:08 - and then we were you know listening for
129:13 - the data event to write it to a file
129:17 - using the writable stream and here also
129:21 - we can handle the ending of the reading
129:25 - right now
129:26 - the piping makes it really easy and it
129:30 - manages all these things by itself so a
129:35 - pipe method listens for the data event
129:39 - by itself and it automatically you know
129:42 - sends this you know chunk of data which
129:45 - we are reading to the file we want so
129:49 - how we can create a pipe so we still
129:53 - need here are readable stream and also
129:56 - writable stream so we will leave these
129:59 - two lines of code here now in order to
130:02 - use pipe you can use pipe only with
130:06 - readable stream so you need to have an
130:08 - object of readable stream and then call
130:10 - a method called pipe okay and this pipe
130:14 - takes an argument which is a writable
130:17 - stream so you can just give this object
130:20 - here and then it's going to do the stop
130:24 - autumn
130:25 - take a listen it's going to listen for
130:27 - the data event and it's not going to
130:31 - worry about or we don't have to worry
130:33 - about if the you know data is read
130:35 - slowly or fast or or handling the chunks
130:38 - of quad data right
130:40 - this pipe method is going to do it by
130:43 - itself so let's run our port and first
130:47 - of all I'm going to delete this right
130:49 - file because it's already existing I'm
130:51 - just going to delete this and now I'm
130:54 - going to save my code and I'm going to
130:56 - run it so let's run it so the code has
131:00 - run and you can see it has created this
131:03 - file again which is writable stream and
131:05 - which has the same content as the input
131:09 - file which we have okay so this makes
131:14 - things really simple for us right now in
131:19 - server so in the previous videos we have
131:22 - created a node.js server right so let's
131:26 - use the server code again to send this
131:30 - file stream or this data of the file
131:34 - using stream two of that browser okay so
131:38 - let's use first of all this HTTP module
131:42 - which is an inbuilt module which we have
131:45 - also seen in the previous videos right
131:48 - so require and then you can just write
131:52 - HTTP okay and then we have created a
131:56 - server in the previous video so I'm
131:59 - going to just take that code which we
132:02 - have written in the previous videos for
132:04 - creating a server and we will just use
132:09 - this code okay so if you don't know how
132:12 - we can use this code just see the
132:16 - previous videos where I have shown you
132:18 - how to use this HTTP module right now in
132:22 - here what we want to do basically is
132:25 - whatever we read from the file or input
132:31 - file we want to send it to a browser
132:33 - right so let's first remove this code
132:37 - first of all
132:39 - right and let's run this code for the
132:43 - first time and it's going to print hello
132:46 - world for us right so I'm going to run
132:48 - this code and I'm going to open the
132:51 - browser and it's going to just print
132:55 - hello world which is the basic
132:57 - functionality of this code right now in
133:00 - order to send the content of this file
133:03 - we don't need a writable stream right
133:06 - because we are going to directly send
133:09 - the you know file content to the browser
133:14 - okay so what we are going to do is we
133:17 - will just take this readable stream and
133:20 - we will create it inside this server
133:24 - okay
133:24 - and using this read stream object
133:27 - instead of for using this response dot
133:32 - end which was sending this data to the
133:35 - browser we can just use this read stream
133:39 - dot pipe and then we can just add this
133:44 - argument called ref or response argument
133:48 - here and everything will be done by
133:51 - itself and we are going to just remove
133:54 - this code here okay so what we have
133:59 - basically done is we have created a
134:01 - readable stream and then using pipe we
134:05 - are sending this stream to the response
134:09 - okay and let's run the code and let's
134:12 - see if it runs or not so I'm going to
134:14 - just stop myself and run it once again
134:16 - and I'm going to refresh my browser and
134:19 - you can see all the content of the file
134:22 - is on our browser page okay so let's
134:28 - repeat what we have done here so in the
134:31 - server we have created a really small
134:35 - server which relations on local host on
134:38 - port 3000 you can see here and what it's
134:43 - going to do is it's going to just write
134:46 - to the you know whenever a request come
134:50 - it's going to write or give the response
134:52 - in a plain text so this content type is
134:57 - playing text it's not HTML because we
135:00 - are sending the plain text okay and if
135:03 - you want to send the HTML page you may
135:06 - you know rightly guess that we just need
135:09 - a HTML text or HTML over here right and
135:14 - this we are going to see in the next
135:16 - video to send the HTML to the browser
135:19 - using this code but right now we are
135:23 - using the plain text that's why the
135:25 - content type is text slash plain and
135:27 - then we are reading the file using the
135:30 - file stream and then we are just piping
135:33 - it to the browser using this response
135:37 - variable okay piping makes it really
135:40 - easy for us to serve the you know
135:44 - whatever we are reading as a stream
135:48 - hello guys welcome to the next video on
135:50 - no JS to troll for beginners in the last
135:52 - video we have seen how to use pipes to
135:55 - serve your text which you are reading
135:58 - from our text file to a browser for
136:00 - example and we have learned some
136:03 - concepts about pipes now let's use this
136:07 - concept to serve a HTML page to a
136:10 - browser for example so let's get started
136:13 - and first of all we are going to create
136:15 - an HTML page so I am going to right
136:17 - click and I'm going to name my HTML page
136:21 - as index dot HTML ok so just create a
136:25 - page called index dot HTML and in here
136:30 - we are going to write our HTML code okay
136:33 - so let's add our HTML tag first of all
136:37 - and then we are going to add head and
136:41 - body elements so just add head first and
136:48 - let's add a body element also and inside
136:57 - this body let's write something so
137:00 - inside the body for example I want to
137:02 - add h1 tag and
137:06 - in this Ashwin text let's write
137:08 - something so for example our first
137:15 - node.js HTML page for example okay and
137:22 - let's give some style to this page for
137:26 - example let's add first of all the style
137:29 - element here instead of this just write
137:33 - style and then inside the style let's
137:37 - change the background color of our
137:40 - webpage so we can just do it by just
137:44 - changing the background color of the
137:48 - body so just add body here and we will
137:54 - change the background color right so
137:57 - just choose background color and which
138:03 - color we want for example light green or
138:06 - something like this so let's use light
138:10 - green is there any light green here here
138:14 - this okay right so this is essentially
138:20 - changing the background color of your
138:22 - HTML page and it has one h1 element
138:26 - which has some text here okay now
138:29 - because it's in the same folder as our
138:31 - project files we don't need to worry
138:34 - about any path here and instead of this
138:37 - file dot txt we can just write index dot
138:41 - HTML okay so just write index dot HTML
138:45 - and instead of plain text slash plain
138:49 - here now we are sending the HTML content
138:52 - to the browser so just replace this
138:55 - plane by HTML here okay and we will be
138:59 - good to go so let's rerun our saga so
139:04 - I'm going to rerun our server and let's
139:07 - refresh our page and now we have our
139:11 - first HTML page solved using our node.js
139:16 - over to the browser right
139:19 - so this is not really complicated and if
139:23 - you want to make a static website you
139:27 - can add multiple you know static HTML
139:30 - page pages and serve it using this
139:34 - technique but notice is much more
139:37 - advanced and the complex technology and
139:40 - it can be used to you know do more
139:43 - complex stuff right so this is the
139:47 - simple way of just catering and HTML
139:50 - page to other browser in the further
139:52 - videos we will see how we can use some
139:55 - more complex functionality with no dear
139:57 - hello guys welcome to the next video one
140:00 - more chance to do em for beginners in
140:01 - the last videos we've seen how we can
140:03 - find the HTML page moving readable
140:07 - strings and writable screens in no
140:10 - chairs now in this video I'm going to
140:12 - show you how we can send our Chasen to
140:16 - the browser using an old chair right so
140:20 - Jason know you know most of the you know
140:23 - server application uses Jason as our
140:27 - data to send it to the browser and this
140:30 - data can be passed on the browser side
140:33 - for example and then it can be used for
140:37 - you know multiple purposes so it's also
140:40 - a popular technique that Jason is sent
140:45 - from the server to the browser and then
140:48 - with this juicy data some useful things
140:52 - can be done so let's get started and see
140:55 - how we can use Jason and you can
140:58 - penetrate into the browser so I'm using
141:01 - the code from the previous example I
141:03 - will remove there are the readable
141:05 - strings and writable streams code from
141:08 - here because we are not going to move
141:11 - them in this code and we are going to
141:14 - directly use this response variable to
141:18 - send the data using response dot and
141:21 - okay so first of all we to change the
141:24 - content type right so here previously we
141:28 - were sending the text / slash HTML
141:32 - because you want to send them all the
141:35 - JSON data so you just need to write
141:38 - application /j sir
141:41 - okay and then this means that we want to
141:46 - send the JSON data and browser will be
141:48 - able to pass this JSON data
141:51 - appropriately right now in the next step
141:54 - we will create our JSON object so you
141:58 - can use a JSON file for that or you can
142:02 - create a JSON object using the code also
142:06 - so I'm going to create my JSON object
142:09 - using the code but this can be done also
142:13 - using the JSON file so you can create a
142:16 - JSON file here and read the JSON file
142:19 - and then convert it to for example
142:22 - stream and then send it to the browser
142:24 - right so let's create our JSON so far
142:28 - for example Jason obj for JSON object
142:33 - and inside this brackets we can add some
142:38 - elements to the Chasen so what elements
142:41 - we want for example we want the name
142:44 - some name and then can we max and then
142:49 - the for name for example and this can be
142:55 - something and the age for example age
143:04 - can be 26 okay so this is our JSON
143:09 - object and this we want to send it to
143:11 - the browser so we can simply use this
143:14 - response variable and then call our
143:18 - method call n which we have been using
143:22 - in the previous video also so just right
143:25 - hand and then you just pass your JSON
143:29 - object here but this code will not work
143:34 - because the browser or whatever you want
143:38 - to send
143:39 - this method it only takes the strings or
143:43 - the string as an argument and this is
143:45 - our object so we want to convert this
143:48 - JSON object to our stream and how we can
143:52 - do this we can do this so using our
143:55 - method called JSON dot stringify which
143:59 - will convert our JSON to our string okay
144:03 - so this is the method json dot stringify
144:06 - which takes our argument you can see the
144:10 - details here so it takes object-- as an
144:14 - alternate which can be achieved right so
144:18 - this is our code and this object may be
144:21 - converted to a string and then using
144:23 - this method it's going to be sent to the
144:26 - browser let's say one hour server first
144:30 - of all and it has some error so let's
144:33 - see what the error is so the error is
144:38 - instead of equal to I need to use the
144:41 - colon yeah and once again run the code
144:44 - and then use the browser to see the
144:48 - response and you can see our response
144:50 - Jason is here right I'm going to make it
144:53 - a little bit bigger so this is our
144:55 - response Jason now in order to impact
144:59 - this you can just right-click on your
145:01 - browser
145:02 - and then click inspect in boom boom I
145:05 - think this is the same option inspect
145:07 - element or inspect right so click this
145:10 - and then go to a tab called the network
145:15 - okay so go to network here and we need
145:18 - to reload our page so you can click this
145:21 - regalo button and you can see our it has
145:25 - the status 200 which we are sending from
145:28 - the code this code right and then the
145:31 - content type also so just click on this
145:34 - you know get method and you can see here
145:39 - the content type is application for
145:43 - slash JSON so this is send using this
145:46 - code
145:48 - and then then go to the response here
145:52 - response tab the tab you can see the
145:55 - Tizen is passed and shown in our
145:58 - commented way right so in this way you
146:02 - can send a Jason to the browser using
146:06 - more chairs
146:07 - ok and this is also a very useful
146:09 - technique whenever you want to you know
146:13 - send some dynamic data to the browser
146:16 - for example you want to pin from our
146:18 - table using the JSON data then you can
146:21 - do this right because you can pass this
146:25 - JSON data based upon the elements and
146:27 - values right
146:29 - hello guys I go to the next video on
146:31 - nausea scroll for beginners in the last
146:33 - video we have seen how can I send the
146:36 - JSON data to the browser from node.js
146:40 - right and this was the code I have in
146:44 - the last video now in this video we will
146:46 - talk something about the routing talk
146:51 - how we can you know route our data and
146:56 - get our different responses for
147:00 - different requests right so let's get
147:05 - started what I'm going to do is I have
147:08 - taken the last video code here and I
147:12 - have added one more line here which is
147:14 - walking the requested URL ok just this
147:20 - IQ dot URL I have added this code extra
147:24 - and everything is same from the last
147:28 - video example ok and now what I want to
147:32 - do here is I want to first of all run
147:34 - this app and I want to just open my
147:38 - browser and refresh my browser so the
147:41 - base URL here is the forward slash right
147:45 - this is the URL now for example I want
147:49 - to request some
147:51 - like a pi/4 in my url I want to add
147:55 - forward clash API and I want to liquid
147:59 - some data when I request or I extend my
148:02 - URL with this forward slash API and then
148:06 - I do this you can see the request is
148:10 - gone with the different URL but the
148:15 - response is same right and for example I
148:19 - want to add about page and I will press
148:22 - Enter it gives always the same response
148:26 - whatever the requested URL it is you can
148:31 - see I have requested the four slash API
148:34 - URL or four slash about URL or for
148:39 - example let's say the you know response
148:44 - is always the same so how we can route
148:48 - these different URLs according to the
148:52 - request we want to spend the response so
148:54 - let's see how we can do it so I am going
148:57 - to go to the code once again here and
149:01 - first of all I will use this URL to pass
149:06 - which kind of power you know request it
149:09 - coming to us and then on the basis of
149:12 - this request we can like it as a result
149:15 - right so you can see I have already made
149:21 - index dot HTML in the previous videos
149:24 - right so this is just a sample HTML
149:28 - which I have created in the previous
149:30 - video so for example I would say this is
149:33 - my home page okay so I will just add
149:36 - home page and when somebody you know
149:42 - requests either they jor-el power slash
149:47 - home or just the forward slash there
149:51 - then I want to cater this saw index dot
149:54 - HTML or home page there so what I'm
149:58 - going to do here is first of all
150:01 - so just take the space here let's make
150:07 - the space here first of all you will add
150:09 - the code to bars that you are also just
150:11 - write request which is the first
150:15 - argument here it was point or dot URL is
150:20 - going to give us the URL and then get
150:22 - triple equals R remember on using triple
150:25 - equals because it's always a good
150:27 - practice to use triple equals instead of
150:31 - double equals so try always think the
150:34 - triple equals right and then I want to
150:37 - match it with for example /home or if
150:44 - it's only a forward slash okay so I'm
150:48 - just going to copy this and place it
150:50 - here and if it's a forward slash then
150:54 - what I want to do here is I want to give
150:58 - the text response so I will just copy
151:01 - this line of code but this is HTML right
151:05 - so instead of this I can just a text or
151:09 - slash HTML right now in the next line we
151:13 - are going to create the stream of our
151:16 - HTML page and then we will send it this
151:20 - will be HTML here so FS dot create read
151:26 - stream and you want to create the link
151:32 - stream from our index dot HTML so you
151:35 - can just directly give index dot HTML
151:39 - which is already present right and we
151:44 - will pipe it to the response so we just
151:47 - write 2 pi and then just write response
151:52 - or our es okay so this is going to just
151:56 - send the index dot HTML when ever this
151:59 - home is requested or as the base URL is
152:02 - requested or else you can just write if
152:07 - or in better right as right so just
152:11 - right
152:13 - else if and if the request URL is for
152:21 - example the chase and objects I will
152:24 - just say triple equals API so this is
152:29 - just kind of hot API and whenever the
152:33 - API is requested then you want to give
152:38 - this JSON object so you just create
152:42 - information and inside my explanation I
152:45 - want to send all this JSON data like
152:49 - something like this okay so what will
152:52 - happen now I'm going to just forward
152:54 - format it just right click on your
152:56 - visions to decode and just click format
152:59 - it's going to format your code right and
153:01 - let's saw reason our code once again so
153:04 - close the code and we run it once again
153:07 - and now when I do for example just a
153:11 - base URL press Enter is going to show us
153:14 - the home page which is the index of HTML
153:17 - extending phone so or whenever we write
153:21 - here power slash home you see the same
153:24 - response the home page but whenever we
153:27 - invite here API for example API then it
153:31 - gives us the JSON response right and in
153:35 - the same way we can you know give a
153:39 - different response on the different
153:42 - requests so let's add one more response
153:46 - for example for example I want to have a
153:48 - about page so I'm going to create about
153:51 - dot HTML so I will just say about dot
153:55 - HTML and it hits about dot HTML and
154:00 - you're just going to copy the code from
154:01 - index dot HTML and I was just saying
154:04 - here about page ok this is my about page
154:09 - and in my app don't chase I can just
154:14 - copy a tip code from here I'll just say
154:18 - else and my code
154:22 - of course which I've copied which is
154:24 - this code and instead of home I will
154:28 - just add about here and I will just
154:33 - remove this right and instead of index
154:37 - dot HTML I will just replace it by about
154:41 - dot HTML right and let's run the code
154:45 - again and let's see if it works or not
154:47 - so I'm going to open the browser and
154:49 - this time I will just ask for about and
154:54 - gives us the about page right or no and
154:58 - it gives us the main page right now
155:01 - for example let's say I'm just a
155:06 - crossing from random URL once again
155:09 - we're going to you know request it but
155:13 - it's not never gap going to get any
155:16 - response from the server because server
155:18 - cannot resolve this URL right now in
155:22 - this case so whenever server cannot
155:26 - resolve the URL ideally we want to send
155:29 - the response hole 0 4 which is not
155:32 - formed right so let's add this response
155:35 - so in the last condition I will just add
155:39 - else condition which is the last
155:41 - condition for us and let's create a 4 0
155:44 - for HTML page so I'm going to right
155:47 - click and I'll just this wire for the
155:50 - aforethought HTML page right and once
155:54 - again I'm going to just copy the HTML
155:57 - content from index dot HTML or about the
156:01 - HTML and paste it here and I will just
156:04 - write here 4:04 and I will just write
156:08 - not found right
156:14 - and now I will just add the conditioning
156:17 - ancestor as condition I'll just copy
156:19 - these two lines once again and here I
156:23 - will just try the force
156:25 - single for dot html' and instead of
156:28 - giving 200 response this response
156:31 - I will eclipse by putting your core
156:34 - right which is not found status code and
156:38 - let's run the code again and in the
156:43 - browser let's try this record URL again
156:46 - and now it gives the port Singapore
156:49 - responds to us okay so home and we have
156:56 - about and we have our API it gives us
157:02 - the JSON response or any other random
157:05 - URL will give the 4:04 response right so
157:11 - in this way you can you know route your
157:14 - request and give the response according
157:17 - to the you know you already requested
157:20 - now there are much better ways of
157:24 - routing your requests using some extra
157:29 - modules or a third-party modules and
157:32 - this is what we are going to see
157:34 - whenever we will learn how to use NPM
157:38 - modules right so there are you know
157:41 - thousands and thousands of third-party
157:44 - modules available to perform a different
157:47 - functionality so you can use these
157:50 - ammonia using NPM and this is what he
157:54 - able to see in the future how can
157:57 - module so all these things can be done
157:59 - in much easier and professional way
158:03 - hello guys welcome to the next video on
158:05 - Moody's tutorial for beginners in the
158:08 - last video we have seen how we can now
158:10 - perform basic routing using your chips
158:13 - now if you want to do more routing stop
158:18 - and other stuff if you think of this it
158:21 - can become really difficult whenever you
158:24 - want to add a few more files here you
158:27 - need to write the lots and lots of cool
158:30 - here in order to stop and this can be
158:35 - easily done by third-party modules and
158:39 - there is a repository called NPM or more
158:44 - package manager which allows us to
158:48 - include third-party modules which are
158:51 - created by experienced developers and
158:54 - they have already invested their time to
159:00 - create these modules and these are
159:02 - publically available so similar to these
159:06 - modules poison HTTP or FS module these
159:11 - are built a new module in no chairs now
159:14 - these third-party modules can be
159:17 - included in your project music mode
159:20 - package manager or entity so let's go to
159:25 - the NPM website and let's see um what's
159:29 - there so whenever you will sort NPM on a
159:34 - browser you will see the first result
159:38 - here will be you PHAs comm just click
159:43 - this link and game is calm and in here
159:48 - find the movie package modules or node
159:53 - modules so which you can use in your
159:56 - project so approximately there around I
160:02 - am not read that there are around
160:06 - 280,000 are
160:09 - available in this song you know robotics
160:13 - move all the three right so you can
160:16 - search this module for example if you
160:21 - know the package name for example this
160:23 - kind of routing can be done using
160:26 - express mode right to insult your
160:30 - Express here you can see the
160:35 - intelligence here and you know you can
160:39 - see various options on yesterday so just
160:44 - search for example Express and search
160:48 - for it and the first option here comes
160:51 - is expressed red flash but doing one
160:55 - extra splash media point expert so you
160:58 - can just search for express once again
161:01 - and here you can see the first option
161:05 - here is expert bytes to click the thing
161:08 - and here you can see documentation for
161:14 - that module so it's a fast uh no because
161:17 - it a web framework you know Express to
161:24 - do exactly we are trying to do in our
161:28 - stop
161:29 - for example the routing stop and you
161:33 - know let's pull API if you want to
161:35 - create you can do it using Express on
161:38 - the right hand side you can see the
161:41 - stats also so stats here you can see
161:45 - over 300,000 installs or downloads of
161:51 - this module are done previously for the
161:55 - yesterday locksmith or 300,000 and this
162:00 - month itself have 1.8 million I think
162:04 - downloads here so from these download
162:07 - you can already recognize that this
162:09 - module is wave officer
162:12 - this is the one one of the most popular
162:15 - among youth in Georgia I can tell you
162:18 - right now how you can install this
162:23 - Express or any other module although
162:26 - part 280 house modules are in water so
162:32 - you can do it using come online and
162:35 - let's open the command line in order to
162:38 - see how we can install it so first of
162:41 - all you need to in your directory
162:44 - wherever your project is and then you
162:47 - can use NPM command to install so
162:52 - whenever you have installed the load
162:55 - course the second video I have shown
162:57 - your hobby
162:58 - install node with that and p.m. module
163:01 - has also gone so you can just know the
163:04 - woman of this by just writing NP minus V
163:10 - in order to install this Express module
163:14 - we just need to do NPM install just
163:17 - write NPM install Express right which is
163:23 - exactly you know documented here also so
163:26 - installation and BM install Express
163:30 - right so whenever you find a module
163:33 - consolation procedure of this module
163:36 - will be given here the documentation of
163:39 - this module is given here and QuickStart
163:43 - also so you can come to this website to
163:49 - know more about right
163:55 - so I have just given the install Express
163:59 - and I'm just press ENTER which is going
164:03 - to take some time to download and
164:05 - install this Express model and you can
164:09 - also hear there will be a directory
164:12 - created the name board under school
164:16 - modules so this module is downloaded in
164:19 - our code
164:23 - now there is a folder called more the
164:26 - modules and created here and when you
164:29 - open this someone modules can see many
164:32 - modules are downloaded folder but we're
164:40 - in package we have installed in this
164:43 - Express module and all the other modules
164:48 - which are coming with the next first
164:51 - module are its dependencies okay so for
164:57 - example movie Bob or destroy or any
165:00 - other module which is installed with
165:03 - this Express module is its dependency so
165:07 - it will also be stored with press for
165:11 - example ok now this is the way to
165:17 - install any module in your project but
165:20 - this is not the preferred video for
165:22 - doing it we will do it using a package
165:25 - manager including her you know NPM
165:28 - command which is the standard command
165:30 - which is like this and yep in it and
165:34 - this we will see in the next video but
165:38 - for now I want to uninstall this model
165:41 - so don't worry if you want to uninstall
165:43 - a module also you can do it moving and
165:47 - p.m. come on so let's uninstall and that
165:50 - command is really simple and game
165:51 - uninstalling setup for install you just
165:54 - need to write move your hands install
165:56 - and the package name and then press
165:59 - Enter is going to uninstall the modules
166:02 - so you can see the process is going on
166:05 - and then whenever go to your node models
166:08 - folder there is only a start then call
166:11 - the left here and every other modules is
166:15 - deleted because we have installed this
166:18 - Express module right so using these
166:23 - modules is also simpler than just ah you
166:27 - know add
166:29 - like this so far HDPE require then once
166:34 - your model is installed you can just
166:36 - give the me more money right so this is
166:40 - just the introduction of four more
166:43 - chairs
166:43 - ah the standard way of using NPM is
166:48 - moving package job Jason file which is
166:51 - kind of a you know a file which have all
166:55 - the records whatever modules are there
166:58 - in your project and the disk and given
167:03 - to other developers also can use this
167:06 - project that's your packet of chips file
167:10 - and then we can install the modules and
167:13 - you know which version of you know
167:16 - anymore installed in this package dot
167:20 - Jason pipe so this is exactly we are
167:23 - going to see in the next you house
167:25 - package got chase file create and
167:29 - maintain your coaching so this was the
167:31 - brief introduction about engine and you
167:34 - will see how we can use and be a master
167:37 - third-party move you from the next PD
167:40 - hello guys welcome to the next video on
167:42 - node.js to dole for beginners in this
167:45 - video I'm going to show you how you can
167:46 - create your project using NPM from
167:50 - scratch and you will also see what is
167:52 - packaged of Jason and why it's required
167:55 - so let's get start it and I want to
167:58 - create a new project so right now we
168:00 - have been was working on this hello
168:02 - project and still we are in this project
168:07 - using Visual Studio code right so I want
168:10 - to change this project or I want to
168:13 - create a new project and for example
168:16 - this project is in my samples folder
168:18 - right so in the samples folder I am
168:21 - going to create one more directory so I
168:23 - am going to open the command line and
168:25 - right now I'm in the hello folder which
168:29 - is this one right so I will go one
168:32 - folder back you can also use this folder
168:36 - Explorer to
168:37 - the painting which I'm going to do from
168:40 - command line so right now I'm in samples
168:42 - folder which is this one right so I'm
168:44 - going to create a directory for example
168:47 - so I will just give NK dir command and
168:50 - the name of the type for example first
168:54 - NPM so because we are in creating our
168:58 - first NPM you know the project or the
169:02 - project using NPM or first air towards
169:05 - it using NPM so I am going to name it as
169:08 - force and p.m. right and I will just
169:10 - press Enter which is going to create
169:12 - this folder here right first NPM right
169:15 - now this is a blank folder and the way
169:18 - you can open this folder in envisions to
169:21 - be code is just go to the file open
169:24 - folder and then just choose this folder
169:26 - which is right now blank and which is
169:29 - totally fine okay
169:30 - it's going to open this folder in your
169:33 - Visual Studio code now in order to
169:35 - initialize your project and you know
169:40 - configure your project give the name
169:42 - version and the you know other
169:45 - properties to your project you can give
169:47 - the command called NPM in it okay you
169:51 - just kind of initialize your closing
169:54 - okay just give NPM in it and then press
169:57 - Enter which is going to ask you some
170:00 - questions so first of all right now I'm
170:04 - in samples folder which I don't want I
170:07 - want to go to the first NPM folder so
170:11 - I'm going to just cancel this NPM
170:14 - command and let me go to the first of
170:16 - all this first NPM folder right now now
170:22 - I'm in the fourth NPM folder I was in
170:25 - samples folder so I changes to force 10
170:29 - p.m. right now I'm going to kill
170:32 - everything for now and then I will give
170:35 - NPM init come on okay so just go inside
170:41 - your folder in which you want to create
170:42 - your project and give
170:43 - be a minute command and press the press
170:45 - enter which is going to ask you some
170:48 - questions and the first question is the
170:51 - project name I'm going to leave it as
170:53 - default super enter then the version
170:56 - this is the default version then
170:58 - whenever you make a major change to your
171:02 - project you can change the version also
171:04 - but in the later stages right so I'm
171:08 - going to leave it as default and then
171:09 - press Enter
171:10 - this is a description to your project we
171:13 - can give any description to your project
171:15 - for example first NPM project for
171:21 - example and then press ENTER and then
171:24 - it's going to ask the entry point and
171:27 - this will be the entry point javascript
171:31 - file for your project so index dot JS
171:33 - file so I'm going to leave it as default
171:35 - and then it's going to also ask you if
171:39 - you have any test commands or not I
171:42 - don't have any test because I haven't
171:44 - even written any code yet so I will
171:47 - leave it as default and press Enter and
171:49 - if you have any git repository it's
171:52 - going to ask you I don't have any so I'm
171:54 - going to just pop it here you can give
171:57 - any keywords to your project for example
171:59 - both NPM or any keywords related to your
172:05 - project right and then press enter and
172:08 - then the author name you can give your
172:11 - name I'm going to just say me and then
172:15 - the license I'm going to leave it as
172:17 - default and then it's going to confirm
172:21 - that if you want to you know give me the
172:24 - information these are the information
172:26 - which will be saved in your project and
172:28 - if you are sure you can just press yes
172:33 - and then press enter ok so you can see
172:38 - there is a package dot JSON file created
172:41 - inside your folder so let's open this
172:44 - package dot JSON file and here whatever
172:48 - information you have given the
172:51 - in it come on it's all there so it's a
172:53 - JSON file the name of your project is
172:56 - first IBM the version is 1.0.0 which is
173:02 - the default version and we have also
173:04 - given the description this is the entry
173:06 - point so this file will be the main file
173:10 - which you know NPM is going to speak so
173:14 - let's create this file first of all so
173:17 - I'm going to just right click here
173:20 - create new index dot JSP my entry point
173:25 - now if you have some test you can give
173:29 - some test commands here but right now we
173:31 - don't have any tests so we are skipping
173:33 - it we have given leave to keyword here
173:36 - but you can give your keywords and then
173:38 - you have the author name and license
173:40 - right now in the last video we have
173:45 - talks about the Express module so
173:48 - whenever you want to install any package
173:52 - or load module in your project what you
173:55 - do is you can just use npm install right
173:59 - so npm install and then the name of your
174:04 - package so for example Express but this
174:09 - time instead of pressing enter you just
174:11 - need to just give a save for example so
174:15 - just give - save or - same here and what
174:20 - this command is going to do is or what
174:23 - this save flag is going to do is it's
174:25 - going to add this Express to your
174:28 - package dog chasing so let's give this
174:31 - come on and let's see what happens so I
174:33 - am going to press ENTER with this -
174:35 - saved flag right so it's going to
174:38 - install this Express package and we will
174:41 - see this node modules directory created
174:44 - and in your package dot jason you can
174:47 - see our element is added which is the
174:50 - expert and here is the version ox of
174:53 - express which is installed right so
174:57 - whenever you give this command for
175:01 - example any come
175:02 - install command which this favor flag is
175:06 - going to add it your package dot jason
175:09 - with the package install and the version
175:12 - of package installed right so now
175:15 - whenever you write some code in your
175:18 - project and whenever you want to give it
175:20 - to your colleague to run it you can just
175:24 - give this kind of project and you give
175:29 - your project without you know these are
175:33 - npm module installed right because these
175:36 - directories are so many directories and
175:38 - they take lots and lots of memory so the
175:41 - ideal practice is to give your project
175:45 - file with your package or jason without
175:48 - node modules folder and whenever
175:51 - somebody of the use npm install command
175:56 - this whatever is listed here is
175:59 - automatically will be installed in your
176:02 - you know project so let's say i want to
176:06 - uninstall this express now so i'm going
176:09 - to uninstall it and press enter they're
176:15 - going to uninstall the express module
176:17 - and you will see you every module will
176:21 - be deleted from the node modules folder
176:24 - but you can observe that by giving this
176:28 - uninstall command this dependency is not
176:31 - deleted here
176:32 - right so if this dependency is there and
176:36 - now so you can see right now node
176:39 - modules doesn't have any Express model
176:43 - because we have uninstalled it and this
176:45 - kind of you know project give it to your
176:48 - colleague and what he does is this
176:51 - colleague has just run npm install
176:54 - without any package name so he can just
176:58 - do npm install and they say npm install
177:00 - is going to go through your package dot
177:04 - JSON file i will see which package is
177:08 - there in your package dot JSON for
177:11 - example express package and the version
177:13 - of package
177:14 - is there in your Jason file package or
177:17 - Jason file so it's going to install
177:19 - automatically this package in your
177:22 - project so let's get NPR installed
177:24 - without any package name and it's going
177:28 - to go through your package dot jason
177:30 - it's automatically going to install in
177:34 - some moment you are going to see here
177:36 - Express will be installed so you can see
177:39 - Express is installed in your project
177:43 - just with this dependency right so this
177:49 - is my package George Jason is important
177:51 - so whenever you want to distribute your
177:54 - project the package George Jason is the
177:56 - for example entry point for NPM to
177:59 - recognize which modules are there in
178:01 - your project which packages are there
178:04 - and which version of packages are
178:06 - installed what are the test commands
178:08 - what is the entry point for your project
178:11 - and some description of your project and
178:14 - even the version right so you can see
178:17 - this is the expression which is
178:20 - installed and for example whenever you
178:22 - develop your project and somebody want
178:24 - to install your you know project as a
178:27 - module this will be the version which is
178:30 - going to be installed so this is a
178:32 - version same as this version right now
178:36 - you can go to node modules so go inside
178:40 - as it's more modules and we are going to
178:42 - go inside this Express folder here
178:45 - inside node module and you can see this
178:48 - expressed module will also have its own
178:51 - package of JSON file so let's open this
178:54 - package or JSON file and you can see
178:56 - there are a bunch of elements here when
179:00 - you go down you can see you can add to
179:04 - your package on different contributors
179:06 - and then you can see the dependencies of
179:10 - this express in accept for example so
179:14 - you can see accept modules is installed
179:16 - then array and this module is installed
179:20 - then this content description content
179:24 - type so one by one every module will be
179:28 - or whatever is listed as a dependency in
179:31 - the packaged on chasing pile okay so
179:34 - this is the importance of packaged on
179:36 - Jason we can go down and yes there is
179:41 - one element called dev dependencies
179:43 - which we are going to talk about in
179:46 - later and you can see many on
179:49 - compositional elements here so whenever
179:52 - you want to distribute your project you
179:54 - can see this is MIT license for express
180:00 - module and the maintenance of this
180:03 - modules with the name and the email ID
180:06 - of the those persons who are maintaining
180:09 - this money and there are some scripts so
180:12 - if you want to test your you know
180:15 - Express module they fail the command to
180:18 - test right so whenever we will write
180:20 - some more text for our module we will
180:23 - write this kind of command to our
180:25 - package dot JSON file also okay hello
180:30 - guys welcome to the next video on
180:31 - node.js tutorial for beginners in this
180:34 - video I'm going to show you how you can
180:35 - install and download node modules
180:39 - globally on your operating system right
180:42 - so till now what we have seen is how to
180:45 - you know install node modules locally so
180:49 - whenever you install a module a
180:52 - directory called node module is created
180:55 - and then your you know module is
180:58 - installed inside this directory right
181:00 - but if you want to use the node module
181:04 - in different project the same node
181:06 - module you want to use in different
181:08 - projects then you need to install a node
181:12 - module flow believe this is not a good
181:15 - practice unless it's you know a module
181:19 - which helps you to develop your you know
181:22 - project but sometimes some modules when
181:26 - you install globally helps you in the
181:29 - development and one such module is node
181:32 - mall right so first of all I am going to
181:36 - open the terminal inside my
181:39 - the studio ports so I will just write
181:42 - top the integrated terminal and it's
181:47 - going to open it and I'm going to run my
181:50 - app first of all so I will just write a
181:52 - note app dot Cheers right and this is
181:57 - the app we were making in the previous
182:01 - videos for routing yeah different
182:04 - requests okay so what is known one first
182:08 - of all so note one you can go to the NPM
182:12 - website and search for node 1 and node 1
182:15 - allows you to you know develop your
182:19 - project in such a way that whenever you
182:22 - run your project with node Mon command
182:26 - after installing mode Mon it'll watch
182:29 - your file so it whenever you change your
182:33 - stuff in your project is going to you
182:36 - know watch for the changes and as soon
182:39 - as you press the Save button it's going
182:42 - to restart your server so right now what
182:45 - we do is when we make some changes for
182:48 - example I add a comma here I need to
182:50 - stop my server from here and save my
182:54 - code and we start myself in order to you
182:57 - know let the changes happen right but in
183:00 - the development this can be really I
183:03 - mean tiring to restart and stop and
183:06 - restart your server so node Mon whenever
183:10 - you install it globally will help you to
183:13 - watch your files if you change your file
183:16 - is going to restart the node server
183:20 - automatically so first of all let's see
183:23 - how we can install node Mon ok so the
183:27 - command to install a node 1 is npm
183:30 - install so just write npm install and
183:34 - then node mall and then give up flag - g
183:41 - now flag - g stands for global flag so
183:46 - whatever command or whatever module
183:50 - will you install with - G flag it will
183:53 - be installed globally so it's not going
183:56 - to installed in your node module folder
183:59 - inside your you know project it's not
184:02 - going to install here but it's going to
184:06 - install globally on your operating
184:08 - system so whenever you want to use this
184:12 - node Mon module from other project also
184:15 - you can use it right so it's not going
184:18 - to be installed locally but globally so
184:21 - just keep this come on NPM install node
184:23 - Mon - tree and press Enter which is
184:26 - going to install this node Mon if you
184:29 - are on Linux operating system you may
184:32 - have to give sudo command sudo access to
184:36 - install this because the directory where
184:39 - this global module will be installed is
184:43 - protected for the root user right so if
184:47 - you are on Linux operating system just
184:49 - run this command with sudo okay so one
184:52 - this you know module is installed you
184:56 - can see here it's not installed here
184:58 - nothing is here in my node modules right
185:00 - but it's installed at a specific
185:03 - location on Windows this location is
185:07 - this one so I'm going to just paste this
185:11 - command in the description so just copy
185:14 - this command and open your folder
185:16 - Explorer
185:17 - and then just paste this command like
185:20 - this okay in here and then press Enter
185:24 - it will be you know showing you the
185:28 - location where your global module is
185:31 - install so you can see node 1 is already
185:34 - there
185:35 - I have other global module called node
185:38 - inspector which I have already
185:39 - previously installed right so this is
185:42 - the global location your user name and
185:45 - in app data roaming there will be a
185:49 - folder called NPM slash node modules so
185:53 - this is a global location of node
185:55 - modules and every project you will make
185:58 - will be able to see this module right so
186:02 - I am going to give this
186:03 - command in the description so you can
186:05 - also see this okay so once the node one
186:09 - is you know installed you can see in the
186:13 - documentation also you can install it
186:15 - globally like this then you just need to
186:18 - write node one and the name of your app
186:21 - dot JS file so just write instead of
186:24 - node just write node Mon here okay so
186:28 - let me just clear it a little bit so you
186:32 - can see it clearly so here we are going
186:36 - to give node Mon command instead of node
186:40 - give node Mon this command node Mon and
186:44 - then the app dot JS file name so AB dot
186:48 - Cheers right and then press enter and
186:51 - you can see your server on the browser
186:55 - which we have made so we are right now
186:58 - in the home page and for example I want
187:01 - to change this routing instead of about
187:05 - us I want to use for example instead of
187:08 - about I want to just write about us here
187:11 - so I want to show the about page on this
187:15 - URL about - us okay I'm going to save it
187:20 - and as soon as I save it you can see the
187:24 - node Mon server sees that I have saved a
187:28 - file so it has restarted the server
187:31 - again so you can see we starting due to
187:34 - changes starting node AB dot Cheers
187:38 - right so the server is restarted
187:41 - whenever I press the Save button right
187:43 - or for example I will just go here file
187:47 - and I will just press save right and you
187:50 - can see it's restart when I you know
187:53 - save my code ok and then I can go to my
187:57 - browser and when I just say about here
188:04 - instead of this about and it's going to
188:08 - give me 4 0 4 because I have already
188:10 - changed the URL to about us so I will
188:13 - just give up out of this
188:16 - it should be about up up I have given
188:21 - here right so I will just say about up
188:24 - and I can see the about page right
188:27 - ideally it should be like about us and I
188:31 - will just say save it's going to restart
188:34 - and this time when i refresh it now it
188:38 - shows me a four zero four and when I say
188:41 - about us it gives me about page right so
188:45 - this makes your development really easy
188:47 - when ever you want to you know
188:49 - frequently change your code on your
188:52 - project right so in this way you can
188:55 - install global modules on your operating
188:58 - system and in this way you can use known
189:00 - one with your node GS server and I would
189:05 - like of the WebEx video or no just at
189:07 - all for beginners and from this video we
189:09 - will start learning Express j/s x plus
189:13 - GS is one of the most popular and widely
189:15 - used web framework in node.js
189:17 - development and expressjs
189:20 - allows you to handle routing servers and
189:23 - iOS stuff really easily so let's dive
189:27 - into the world of Express GS so what I
189:31 - have done is I have created this empty
189:33 - folder called Express on the score test
189:36 - and first of all I'm going to you know
189:41 - initialize a empty project inside this
189:44 - expressed test folder so I will just CD
189:48 - to this folder wherever this folder is
189:50 - and then I am going to just use NPM in
189:53 - it to initialize the project right so
189:57 - just write npm init which is going to
189:59 - initialize my little champion project
190:02 - and I am going to leave everything as
190:04 - the default time I am going to press
190:06 - ENTER for everything it is which is
190:09 - going to create this package dot JSON
190:11 - for us which is really basic right
190:15 - everything is default now let's create
190:17 - this index dot gif file because we have
190:22 - defined here in the package giorgia from
190:26 - that index of GS is our main file right
190:30 - I can do it from here or I can even do
190:32 - it from the terminal all so now the next
190:34 - thing we are going to do is we are going
190:36 - to install NPM module for experts right
190:39 - so I'm going to just open the terminal
190:43 - once again and I will just write and
190:45 - game install Express right you already
190:50 - know this command right and I'm going to
190:52 - also add the flag save so it will be
190:55 - saved in my package dog chasing file
190:58 - right so I'm going to press ENTER and
191:00 - wait for the installation for Dantean
191:03 - module and in some times you will also
191:06 - see this dependency added to our package
191:09 - dot jason as well as the npm module
191:12 - created here the folder named MDM bodies
191:16 - right so you can see Express is
191:18 - installed now right so now let's start
191:22 - writing some code so to start and xpress
191:26 - we need to you know require this Express
191:31 - module so you can just write bar and
191:33 - then press and then Squier and you can
191:39 - require the express mobile right like
191:43 - this so this is really basic and to
191:46 - create an Express app you need call this
191:51 - expressed method which is going to give
191:54 - you the access to the instance which you
191:57 - can use to listen on any code right so
192:02 - I'm going to just create an app variable
192:06 - this is the common convention to you
192:09 - know use this name for Express app and
192:14 - then you just take this variable and
192:18 - call a function called Express comment
192:21 - okay so this app you know instance is
192:25 - going to allow you to create and listen
192:29 - on some port so you can just use app dot
192:34 - listen and then you can listen on any
192:38 - port for example I want to listen on
192:41 - or 3,000 it's same like using HTTP
192:45 - module right and then I'm going to
192:48 - create an anonymous function so let's
192:51 - create a anonymous function here and
192:54 - then the curly brackets and in here I
192:58 - can console.log something so just
193:01 - console dot log and let's say our server
193:08 - is live on port or 3000 right and then
193:13 - cable semicolon here and save your code
193:16 - and let's run our server so I'm going to
193:20 - just write node and then index table
193:24 - chairs and then press Enter
193:26 - is going to run our server and if you
193:30 - remember we have installed the node moon
193:32 - right so we can use node 1 here but for
193:35 - the first time let's just use node here
193:38 - and then I'm going to refresh this page
193:40 - and it starts listening now if you can
193:43 - see here it says cannot get now get is a
193:48 - default HTTP method the Express is going
193:53 - to use right now there can be 4 type of
193:57 - HTTP method which can be used for
194:01 - requesting from the client to the server
194:04 - and that are for example I'm going to
194:07 - just comment here and I'm going to just
194:10 - write the name of the methods right the
194:13 - first method is get second method is
194:17 - post third method is put and the fourth
194:24 - HTTP method is delete right so express
194:30 - is capable of using or doing everything
194:33 - get post post and delete obviously and
194:37 - the way we can you do it using routing
194:42 - is you can use you know the app instance
194:45 - and it's going to allow you or allow us
194:49 - to use a different kind of macro
194:51 - and the name itself can be used to you
194:56 - know do gulping but for this video
194:59 - because it's the introductions we are
195:01 - going to just use the get HTTP method
195:05 - using this app instance and later we are
195:08 - going to be the much complex stuff like
195:11 - post 410 delete request so just write up
195:14 - and then the name of the method for
195:17 - example will get and then we provide
195:19 - basic routing for example the basic
195:23 - routing is our home page for example and
195:26 - then we will use a anonymous function
195:30 - which will allow us to send us the
195:33 - response right so first argument here
195:36 - will be the request and second argument
195:39 - is the response so I will just say
195:43 - little I and then I'm going to just
195:47 - complete this anonymous function like
195:50 - this right and from here I can just use
195:54 - reply argument come here and then dot
195:58 - send and then send any our reply to the
196:04 - client which is requesting this get
196:07 - request right so this is the body you
196:10 - are sending so I am just going to say
196:12 - this is home page okay and in the same
196:18 - way we can you know provide multiple
196:20 - routes as we have done with HTTP module
196:24 - so let's create some more routing so the
196:28 - next route thing I want to create here
196:30 - is about and the next routing is for
196:35 - example for the contact and now I'm
196:38 - going to just write so here instead of
196:41 - home about and here contact okay
196:45 - and save and rerun my project this time
196:50 - I'm going to use node man so just write
196:53 - node Mon because the in the last video
196:56 - we have installed node one right and
196:58 - then index dot chase
197:01 - so we will save the time in restarting
197:05 - with all right and then I'm going to
197:08 - refresh here which is going to give me
197:10 - the supply which says this is homepage
197:13 - and let's request this IP address and
197:18 - about route and then it says this is
197:23 - about page and then contact page and now
197:27 - it says contact page right so everything
197:30 - is working and when we give any you know
197:35 - faulty routing it says cannot get this
197:39 - kind of request right so let's summarize
197:41 - what we have done so what we have done
197:44 - in this code we have installed first of
197:45 - all Express NPM module and then we have
197:49 - required this NPM module and then using
197:52 - this express method we have created an
197:54 - instance called app which can we can use
197:57 - to call different methods like get post
198:01 - put or delete and we can listen on any
198:05 - port using the list method and the name
198:09 - of the port or the number of the port
198:11 - which you want to on which you want to
198:14 - listen on right now if you can see here
198:19 - you may ask that we haven't provided any
198:23 - content typed here in the reply so the
198:27 - answer for this question is Express is
198:29 - intelligent enough to you know recognize
198:32 - the content type which is you know
198:35 - replied as a response to the client so
198:40 - if you pass string here Express is
198:42 - intelligent enough to recognize that
198:44 - this is a string so you don't need to
198:47 - provide the explicit content type like
198:51 - plain text or something like this with
198:54 - this reply right so in this way you have
198:58 - saved some lines of code so this was the
199:01 - brief introduction to experts and in the
199:04 - further videos we will learn more
199:06 - functionality about Express hello guys
199:10 - welcome to the next video on node.js
199:12 - toll for beginners and in this video we
199:14 - will
199:14 - learn how we can pass parameters and
199:18 - parse parameters in the URL routes using
199:23 - Express so in the last video we have
199:26 - seen how we can you know pass these kind
199:29 - of rules out and you know whenever you
199:33 - ask or whenever you give this kind of
199:37 - URL for example your IP address and the
199:41 - port and then whatever route you give
199:44 - according to this you know you see the
199:47 - response right but for example you want
199:51 - to give the dynamic route so for example
199:55 - you have some database right now we
199:57 - don't have database but in the future
199:59 - you will be using a database and you
200:02 - wanted to you know query the database so
200:06 - you want to want to pass some parameter
200:09 - for example you have the student
200:12 - database and you want the student data
200:16 - using his ID or his roll number or any
200:20 - other thing for example right so how we
200:23 - can pass parameters in the URL you will
200:27 - see in this video using it Express so
200:30 - what we do is we are going to I'm just
200:33 - going to copy the code which I've
200:37 - written the last video for this so just
200:40 - copy and paste the same code but instead
200:43 - of this route for example you want a
200:45 - student route so I'm just going to write
200:50 - students here and then we want to get
200:54 - the student according to the ID which is
200:57 - given in the URL okay so whenever you
201:01 - want to pass any parameter you give this
201:06 - colum before the parameter name okay so
201:11 - just gave the : this kind of : and then
201:15 - any you know ID or name whatever you
201:18 - want to give so you can give for example
201:20 - name here or surname or ate anything
201:24 - whatever parameter you want to pass and
201:28 - we'll be able to parse that parameter
201:31 - and then according to this we can give
201:34 - the response so for example we want to
201:37 - just pass this ID one which is passed
201:41 - using the URL route okay so in the
201:46 - response for example I am going to write
201:48 - that you have quested to see the student
201:52 - ID and then I am going to just give the
201:57 - ID now in order to pass this ID we need
202:01 - to take this request and then dot param
202:08 - and then the name of the ID for example
202:13 - ID itself okay and let's say the code or
202:19 - my node is running using the node one so
202:22 - I don't need to rerun it and I'm going
202:24 - to just go to the browser and Here I am
202:28 - going to just give student and then the
202:33 - student ID for example 12 right and you
202:37 - can see I think it's too dense not
202:40 - student so I must give here students
202:43 - route and you can see it gives me the
202:47 - response you have requested to see the
202:49 - student ID 12 because I have passed 12
202:51 - here right I can pass any number here
202:54 - and it will give me that number right so
202:58 - once again any number and I can see this
203:01 - number here right in the same way I can
203:04 - pass the name also so instead of ID I
203:08 - can use name and here also name and here
203:14 - also name right so name name and must
203:21 - write name here and must save my code
203:24 - and then refresh my page using some name
203:28 - so for example mark and then refresh and
203:32 - now it says you are requested to see
203:35 - student named mark now if you will be
203:37 - using some kind of a database then you
203:41 - can
203:41 - you know take this name which is passed
203:45 - using the URL and then you can query the
203:49 - database on the basis of this name and
203:51 - then you can give your response so we
203:56 - will take a little example for example
203:58 - we have a Jason you know data so I'm
204:03 - going to just write for you improve our
204:06 - students and then this is adjacent so we
204:11 - have a student data Jason and then I am
204:14 - going to just write one and one is so
204:18 - roll number one or ID one so ID one is
204:21 - Mark for example then I D 2 is Tom and
204:29 - then ID 3 is for example John ok and
204:38 - then I'm going to just replace here name
204:42 - with ID and here also ID and here also
204:46 - ID right but we want to you know reply
204:50 - on the basis of the ID requested we want
204:53 - to gave the name right so here I will
204:56 - write name and the way you can do this
204:59 - is you can just take the students
205:02 - because it's it's a kind of an
205:04 - associative array you can take the
205:07 - student and then using square bracket
205:09 - you can you know get the value on the
205:14 - basis of key passed here right so I'm
205:18 - going to save it and then I'm going to
205:20 - refresh it and I'm going to just give
205:23 - the ID 1 for exam right it's going to
205:26 - give me mark right because in our Jason
205:31 - we have the name mark as ID 1 right
205:35 - for example 2 it gives me Tom
205:39 - and then for example right 3
205:42 - it gives me John right so in this way
205:46 - you can pass parameters as a URL routing
205:50 - in Express and that's it for this video
205:54 - in the next video and
205:55 - to give you some more insights about
205:59 - Express so hey guys welcome to the next
206:03 - video on node.js troll for beginners and
206:05 - in this video we will talk about
206:07 - templating engines so so far what we
206:11 - have learned is how we can pass these
206:14 - kind of parameters to the client using
206:17 - express chairs so before starting
206:21 - templating engines I wanted to show you
206:23 - how we can you know transfer or show the
206:26 - HTML file on the browser using express
206:29 - chair so let's get started with that and
206:33 - then we will start with the templating
206:35 - engines so I have these two files about
206:40 - dot HTML and HTML or index dot HTML
206:44 - right so these two HTML files I have so
206:48 - what I am going to do is in the root
206:51 - flout what I want to do is I want to
206:55 - send the index dot HTML file right so
207:00 - the way you do it is you take this reply
207:03 - argument and then call a method called
207:07 - send file ok so just call a method
207:11 - called send file and then the name of
207:15 - the file which you want to send so
207:17 - because we are in the current directory
207:19 - so I am going to take the their name
207:22 - plus the file name so the file name I
207:26 - want to send is index dot HTML right in
207:31 - the same way you can just send the
207:34 - contact dot HTML or above dot HTML which
207:38 - we have here right so here I want to
207:42 - send about dot HTML and I'm going to
207:49 - save my code and my Norman is already
207:53 - running so I don't need to rerun it once
207:55 - again and I'm going to open my browser
207:57 - and I am going to refresh this and it
208:02 - says this doesn't exist yeah I forgot to
208:06 - give the four
208:08 - / here so I just need to give forward
208:11 - slash and once again I will save and I
208:14 - will refresh the page once again and now
208:17 - it says home page and let's call the
208:21 - about page also so just write about
208:24 - essays about page so this is how you can
208:28 - send any file to the browser using the
208:32 - send file method right now this is how
208:36 - you can send the static files but for
208:39 - example you want to send some parameters
208:41 - with the HTML file or you want to inject
208:45 - some parameter in your HTML file then
208:49 - what will you do so for that we use the
208:52 - templating engines and there are many
208:55 - engines which you can use with Express
208:58 - gf for example Jade or Chaz or some
209:05 - other engines like underscore or toffee
209:08 - but what we are going to use is the
209:12 - templating engine called ejs or embedded
209:16 - Jas so let's get started with ejs so
209:20 - what I am going to do is first of all I
209:22 - am going to open the website on which we
209:26 - can find more documentation on ejs or
209:30 - embedded jf so just open this website
209:33 - which is called embedded JS comm whose
209:36 - short form is ejs right and then you
209:40 - will scroll down you will see how you
209:43 - can use this EGS with your HTML and how
209:49 - you can embed the parameters in your
209:52 - HTML text or file right so for that
209:57 - first of all we need to add a package
210:00 - EGS in our project so ejs is a node
210:07 - package so i am going to first of all
210:09 - install egx package using NPM so let me
210:13 - clear the terminal and I will just write
210:16 - NPM install and I will just give the
210:20 - flag
210:21 - save also so it will be added to our
210:24 - package dot JSON file also and then just
210:28 - by the ejs ok and then press enter which
210:31 - is going to add this package to our
210:34 - project and once it's done you will be
210:37 - able to see this EGS is added to your
210:41 - package dot jason and you will also see
210:43 - EGF is added to your node modules also
210:47 - right so I'm going to just close this
210:50 - and close the HTML files and now the way
210:54 - you you know add this EGS or to use this
210:58 - EGF we need to add the view engine
211:04 - property of you need to set the view
211:06 - engine property to your express app so
211:10 - you take this app variable and then call
211:14 - a method call set and then we will set a
211:18 - property which is called view engine so
211:22 - just give single code and just write
211:25 - view engine and the next property is the
211:29 - name of the engine so in this case we
211:32 - are using ejs right so the property name
211:36 - is new engine and the value is ejs okay
211:41 - now we can use EGF in our project now by
211:47 - default when Express sees that the
211:51 - engine view engine is EDF it looks in
211:55 - the directory called the view ok by
212:00 - default it is going to look in a
212:02 - directory called view for the ejs files
212:05 - so we are going to make a directory
212:07 - called view so just create a directory
212:10 - and name it as view and inside this
212:14 - directory all our you know EGS files
212:17 - will go right so what we want is for
212:21 - example in the last video we have
212:24 - created this route for students and
212:27 - whenever some ID is you know passed for
212:31 - the student then his name is
212:34 - return to the for example client or to
212:38 - the browser right so we are going to
212:41 - take the same route but this time what
212:44 - we are going to do is we are going to
212:46 - you know transfer this data to the HTML
212:52 - file and inject in this parameter to the
212:55 - HTML file and then present it to the
212:58 - client for example okay so what I am
213:02 - going to do is I am going to just create
213:04 - a new file inside my view folder so this
213:07 - is my view folder and I'm going to
213:09 - create a student file because there is a
213:12 - student route so I am going to create a
213:15 - students dot ejs while okay so it's not
213:19 - going to be a HTML file but it is going
213:22 - to be a ejs file right but the content
213:26 - which you will give inside this EGS file
213:29 - will be the same as your normal HTML
213:33 - file have so for example I am going to
213:36 - just copy this code oh my is index dot
213:39 - HTML which doesn't have much it just
213:41 - have the body of HTML page and the main
213:46 - h1 tag right so I'm just going to copy
213:50 - and then in the student or ejs file I am
213:54 - going to just paste this code right now
213:57 - the way EGS work is we need to go to
214:03 - index ought GF and instead of saw using
214:07 - this kind of code reply or re P dot sin
214:12 - instead of this what we are going to do
214:15 - is we are going to just write re p dot
214:18 - render okay so here we are going to use
214:23 - re P dot render and then it takes two
214:29 - parameters so the first parameter here
214:33 - will be the name of your view file so in
214:38 - this case or view file name is students
214:40 - rights you can see here students dot ejs
214:44 - so we can just pass the
214:47 - you file name which is student and the
214:50 - extension you don't need to give it here
214:52 - okay just the name of the file and the
214:55 - second parameter it takes is the object
214:58 - now this object is at evil you pair so
215:02 - the first is the key for example we want
215:05 - to send the student name so I'm going to
215:08 - just name the key as name itself because
215:12 - it's a student name right and the value
215:16 - for it is the value which we have here
215:20 - so in the last video we had at this kind
215:23 - of you know small object and this has
215:29 - the key value pair so for example we
215:32 - requested student 1 then it's going to
215:34 - give us the result by returning its name
215:39 - student's name right so this is how you
215:42 - can get the student name by ID so I'm
215:46 - going to pass it here okay and then we
215:49 - don't need this thing here because you
215:53 - are already sending our you know
215:55 - parameter using this render method and
215:58 - to the student file now the way you add
216:05 - this name of parameter to your ejs file
216:09 - is so I'm going to go to h1 tag here and
216:14 - if you have seen inside in the embedded
216:18 - J Escom you do it something like this so
216:22 - you take this angle bracket start your
216:26 - angle bracket then this mod sine then
216:29 - equals and then the parameter name and
216:31 - then end with mod and then closing angle
216:36 - bracket so I can just copy this from
216:39 - here and I will do the same here so in
216:42 - your h1 tag or any tag for example it's
216:45 - a paragraph tag or it's any other h2 tag
216:50 - or other tags you can do the same so
216:53 - just use a tag and inside your tag just
216:57 - start angle bracket mod equals and then
217:00 - the parameter names
217:01 - Permenter name is name itself right so
217:05 - we want to pass in our Aegis fide this
217:08 - parameter name right so that's why I
217:12 - have written name here okay and then I'm
217:15 - going to just say everything and I'm
217:19 - going to rerun my app so I'm going to
217:22 - just use node Mon dot index dot jf and
217:26 - then I'm going to go to my browser and
217:29 - in here I am going to ask for the
217:34 - students file because here we have the
217:38 - students dot ejs right and we will give
217:42 - the student route here and then the ID
217:45 - of the students so ID of the student for
217:47 - example I want to give one here right
217:50 - and then press enter and it gives me
217:53 - some errors which I am going to see what
217:55 - the error is
217:56 - so the error which I can see here is it
217:59 - says fail to look up view students in
218:02 - views directory and I named my directly
218:06 - as view not views so this is the error
218:09 - you will see if you do anything wrong
218:12 - and by the message it looks like my
218:15 - directory name view is wrong we need to
218:18 - name it as views okay so my directory
218:22 - name views must be I am going to rename
218:26 - it as muse
218:27 - instead of view okay and then I'm going
218:31 - to refresh my page once again and
218:35 - hopefully this time I can see this
218:38 - message mark because student ID one is
218:42 - for mark right so we can just edit our
218:46 - student or EJ's file for example you
218:50 - have requested the student name name and
219:02 - then you give the student name and for
219:06 - for example I want to add the ID also I
219:09 - want to show the ID on my student a HTML
219:13 - file also so I will
219:15 - just add the parameter tag here and I
219:18 - will say ID and then the colon and then
219:23 - I will use the same method like this
219:26 - here and here I will just rename it as
219:30 - ID and I need to pass this ID parameter
219:33 - from here right so let's go to the index
219:37 - dot JS file and then here in the second
219:42 - element in the JSON you can just add ID
219:45 - and then just pass this ID there so the
219:50 - ID will be request dot parents dot ID
219:53 - right so just give colon here and then
219:56 - pass your ID here okay so first element
220:00 - of the JSON or object is name and second
220:03 - element of the JSON object is ID right
220:06 - in the same way you can add multiple
220:08 - object in your second parameters right
220:12 - so just save your code and then rerun it
220:16 - once again so I am going to just ask for
220:20 - the student one once again now it says
220:23 - you have a requested the student named
220:25 - mark and the ID is one for example I
220:28 - will just add two here and press Enter
220:32 - this time I have Tom and then the ID is
220:36 - two and once again for example for three
220:39 - then the song name and ID is three here
220:43 - okay so this is just the starting for
220:47 - the templating engine in the future
220:49 - videos we will see some more concepts on
220:51 - ejf alright welcome to the next video on
220:55 - node.js tutorial for beginners in the
220:57 - last video we have seen how we can use
220:59 - ejs with Express and node chest now in
221:04 - this video I'm going to give you some
221:06 - more information about EGF and I'm going
221:09 - to show you how we can use some control
221:12 - flows with your EGF templating engine
221:17 - and let's see how we can use it for
221:20 - example you want to use a for loop which
221:23 - we normally use on the client site using
221:26 - for loop we can literally
221:29 - any re or something like that how you
221:32 - can use with the help of EGS let's see
221:35 - so for that I'm going to modify this
221:39 - data structure which we have so we have
221:42 - the students Jason and earlier I have
221:48 - created something like that that it's
221:51 - like a key value pair but in a more
221:55 - complex application a student can have a
221:58 - name surname age or many other things
222:02 - right if you are querying with in the
222:05 - database it can have many you know data
222:09 - data columns and then I will you know
222:13 - try to emulate that thing with this
222:17 - Jason so what I'm going to do now is I'm
222:22 - going to just modify this array like
222:25 - this and for the student ID one I'm
222:30 - going to first of all add the students
222:33 - name here and then I'm going to add the
222:36 - students name so for example mark and
222:40 - then for example let's say what subject
222:44 - he has taken so I'm going to just write
222:46 - subjects here and then this was going to
222:49 - be an array okay so re you can do with
222:54 - square brackets and let's say this
222:57 - student is of some computer class or
223:01 - programming class so he has taken C++
223:05 - Java for example and let's say he has
223:09 - taken see also and same we are going to
223:12 - do with other two students so instead of
223:15 - this I'm just going to copy and paste
223:18 - this code here and here also okay and
223:22 - then the student name was Tom here and
223:25 - the student name for the third ID is for
223:29 - example John Wright and the penguin
223:34 - language let's change the programming
223:36 - language so for example second student
223:39 - like c-sharp Python
223:43 - and let's say he likes some database
223:46 - MySQL and called for example he likes a
223:50 - Java Script and he likes so for example
223:54 - let's you light database and he likes
223:59 - itself ok so we have this kind of four
224:02 - data structure now for the students
224:04 - right now this we want to show on our
224:08 - client how we can do it so for that in
224:11 - the last video we have created this kind
224:13 - of you know render method and we have
224:16 - injected this kind of JSON there right
224:20 - now because we have modified our JSON
224:23 - data structure so here we will take the
224:27 - student Jason and then we will first of
224:30 - all find its ID so this will be this one
224:34 - and then dot mome is going to give you
224:39 - the name of the student okay and then ID
224:43 - will be same and let's say we want to
224:46 - add one more field which is subjects
224:49 - okay so I'm just going to copy here this
224:52 - it here and then subjects how we can
224:55 - extract the subjects let's see so I'm
224:59 - just going to just give the line break
225:01 - here and subjects will be the same as
225:04 - the name but instead of subjects instead
225:08 - of name we will just replace the name
225:11 - with the subject so you can do something
225:14 - like this now this is going to be sent
225:19 - as an array to the client so the client
225:23 - EGS file has to you know pass it or
225:27 - iterate over this array and then you
225:30 - know show the output right so here what
225:34 - I'm going to do is I'm going to just add
225:36 - a h1 tag and then I'm going to just
225:41 - right here for example subjects and then
225:45 - I'm going to add unordered list or
225:49 - ordered list whatever you want so for
225:52 - example I am going to add a unordered
225:54 - left here so let's add an unordered list
225:57 - so ul for unordered list and then we can
226:02 - inject a for example some JavaScript
226:06 - code for parsing this subjects array
226:10 - right so what we are going to do is we
226:13 - are going to write the name of the array
226:18 - so this time the element name is subject
226:21 - we want to pass this element right so we
226:25 - will take this element subjects and then
226:27 - we will iterate over it so there are
226:29 - many ways of iterating over array in
226:32 - JavaScript we are going to just use for
226:35 - each for example okay so just write for
226:38 - each and then we will just write a
226:43 - callback function so just write the
226:46 - function and then just write for example
226:51 - item and then just we will iterate over
226:55 - all the subjects and we will print it
226:57 - okay and don't forget to give the ending
227:01 - bracket and the semicolon here now the
227:04 - way you you know show this using ejf is
227:09 - the same way you used in the last video
227:13 - so you use this starting angle bracket
227:16 - and then mod symbol but for the
227:20 - JavaScript it won't use this kind of
227:23 - equals for the code right so you just
227:26 - need to use the for example this
227:30 - starting and go back at a mod and in the
227:33 - end the mod and then closing angle
227:36 - bracket right and then you need to do
227:39 - the same here also with the next line
227:44 - like this okay
227:46 - so you don't need to use equals here
227:49 - whenever you are using for example a
227:51 - JavaScript function and then you can
227:54 - normally you know add our HTML tag once
227:59 - again so for example this is a list item
228:02 - for us so I'm going to just write a list
228:04 - item
228:05 - and then we are going to just print that
228:09 - item so however you can now print it we
228:13 - just need to print the item because this
228:17 - item contains our you know data for
228:21 - example subject right so the way you do
228:24 - it using EGF you just need to do this
228:29 - angle bracket percentage equals as we
228:32 - have done in the last video like this
228:34 - right and then this would be the item
228:38 - right so all the items will be iterated
228:41 - so let's save our code and let's run it
228:44 - and let's see what's the result so I'm
228:46 - going to ask for the student one so
228:49 - student and then one and then refresh
228:51 - the page so we got the error and let's
228:54 - see what the error is
228:55 - so it says syntax unexpected token than
228:59 - this Colly bracket so we need to search
229:02 - for this kind of bracket and let's see
229:06 - where it is so in our function yeah so I
229:11 - have closed this anonymous function here
229:14 - become need this extra bracket here
229:17 - because we are closing this bracket for
229:20 - this function here right and this curly
229:23 - break is this is with this one and this
229:27 - is the item right there was a extra
229:30 - bracket here so that's why
229:33 - Tanner was coming let's refresh the page
229:36 - once again and now we see the output
229:39 - right let's see the output for student 2
229:43 - and now he has different subjects right
229:46 - and let's see it output first student 3
229:49 - and he has the different subjects right
229:52 - so in this way you can use arrays and
229:54 - JavaScript code with ejs so I hope you
229:58 - have enjoyed this video please recommend
229:59 - subscribe and bye for now

Cleaned transcript:

so let's get started no js' was originally written in 2009 by Rhian del the initial release was supported only Linux but in the later years of node.js it also started supporting Windows operating system and Mac OS also now its development was led by of course R and L and later the development and maintenance was sponsored by Joe and Joe and was his employer now let's see what is node.js so nodejs is an open source crossplatform runtime environment for developing serverside web application so normally you would link JavaScript with clientside web applications but with node.js you can develop serverside applications also now node.js is an event at i/o and this evented IO we will learn in the later videos what is a vented IO and how we can use it okay so although node.js is not a JavaScript framework many of its basic modules were written in JavaScript and developers can write new modules in JavaScript the runtime environment interprets JavaScript using Google's v8 JavaScript engine which is also the JavaScript engine behind Chrome which is a web browser which makes it really fast now no GF is released under MIT license so it's a crossplatform opensource you know framework so let's go next now what no Jeff is not so as I already told you node.js is not web framework it's a serverside web application right so you can write serverside web applications with node.js not the clientside right node.js is not for beginners so whenever you are you know starting node.js you need to have basic understanding how you know JavaScript works mainly object oriented JavaScript and event did JavaScript so you need to have some knowledge of JavaScript but don't worry I will you know start with very basic levels so you will be able to understand and mostly most of them are you know servers if you think about service you may link servers as a multithreaded application but node.js is not a multithreaded application it uses the concept of asynchronous IO which we will also see in the later videos now what is unique about node.js so javascript is used in clientside but no J's puts JavaScript on the server side as I have already told you thus making a communication between client and server will happen in the same language so the learning curve for you will not be you know so steep because if you know JavaScript you can write the front end and the back end of your web application both in JavaScript right now servers are normally a thread based as I have already told you but node.js is event based node.js serves each request in a invented loop that can able to handle simultaneous requests so nodejs is not a multithreaded application okay so it only have one thread which uses event and the last that is also I've already told you that JA nodejs program are executed by v8 JavaScript engine the same engine behind the Google Chrome browser also now why you want to learn no J's because no js' is really fast it can handle tons of concurrent requests and it's written in JavaScript which means you can use the same code on serverside and clientside so this is the brief introduction about node.js and from the next video I will start explaining how you can install node.js and how we can you know write our first code for creating our first node.js server hello guys welcome to the next video on node.js tutorial for beginners in this video we will see how we can download and install node.js on our Windows operating system so let's get started first of all open your favorite browser and search for node.js download and the first link which will appear here will be no GS dot org which is the official link so you can just click this link here ok and in here you will be able to see different kind of installations but on the node.js home base so when you click this icon here you will see the two versions for Windows one is the LTS version which is long term service version right and one is the current version so we are interested in current version so I'm going to install this one but if you want to install this longterm version which will be available for a long time then you can just install this one so I'm going to click this option and the file will be downloaded which is about 12 megabytes so I am going to save it and let's save it somewhere okay so once this file is saved we are going to just install it so just click your MSI file so the extension of this file will be a dot MSI so just click this and then start installing the node.js right now nodes J's installation on Windows is really easy and you know you cannot get an easy installation than this installation so first of all this kind of wizard will start you just need to click Next here and accept terms license and conditions and then click Next this is the location where node.js will be installed so if you don't have any good reason to change it just leave it as default and then click Next now in here these are the things that will be installed in with the node gf so the node.js runtime NPM package manager which is really important for developing node.js applications online documentation and the path so this node.js path will be is tall or configured on your Windows operating system so you can you know start node.js using your command line ok so just click Next here and once you click Next you just need to click this install button to start the installation now the installation may take few seconds to few minutes depending upon the configuration of your Windows operating system so just wait for this process to complete and once the installation will complete we will go to the next step ok so now the installation of node.js is successfully completed on my Windows operating system and I just need to click this finish button now to know whether node.js is successfully installed on your system or not you need to open your command prompt so just search for command prompt and open your command prompt and in here you just need to type node V which is going to give you the version of node.js installed right so just press enter and it will give you the version of node.js which you have installed so it's giving v6 point 5.0 this is the same version you can see here when we have downloaded it from the node.js website v6 point 5.0 right so we know that node.js is successfully installed on our system now we have also installed NPM which is node package manager which with this node.js installer and node package manager is really important in developing you know know the applications and I will you know illustrate what NPM is and how it works in details in the later videos but in this video we will just check whether it successfully installed or not so just write NPM for node package manager v4 knowing the version of it right so NPM V and hopefully it will also give you the version of NPM install okay so now we know that node is installed successfully on our system and NPM is also installed on our system so now we can start building our you know for example hello world application so just to check you just need to write node in order to start working with nodes just write node and press Enter which will give you this kind of command line interface and in here you can just write for example console dot log and in the brackets so in the brackets you just need to write for example hello node so just write hello okay and now you can press ENTER and it's going to print out hello node and then this undefined message and then you know that node is perfectly working on your system now let's check this node in now little bit better way so what we want to do now is I'm going to just close this command prompt and I will once again go to the node js website and now this time I'm going to go here which says about tab so just click about tab here and in here you will see the basic barebone code to you know get started with node which is this code okay so what I'm going to do here is I'm going to go to folder just go and create any folder in which you want to you know create your node.js project for example and then here I'm going to create our JavaScript file so I'm going to let's create our javascript file and I'm going to name it as app dot J's for example so just write app dot J F and press Enter we are going to you know see how we can build our node.js application using some editor better than for example normal editor on Windows or Linux so this we will see in the later videos but for now let's use for example I have notepad plus plus for JavaScript so I will open this app dot J's file in notepad plus plus but you can use any editor of your choice for now right and then I'm going to once again go to this page and I will just copy all the code from here just copy all the code and then I'm going to paste it here okay and then just save this code okay so just copy and paste this code and save this code and and I'm going to minimize everything once again so my code is saved and now I want to open the command prompt in this folder and the easiest way to do is you can do CD to you know this part and it will be okay but the easiest way is to just press your shift button so just press shift button and then right click on this folder and then you will see this option which says open command window here so just click this option and you can see we are directly in this directory in the command line so we are in the samples directory which is here itself right now in here what we can do is we just need to give this command so just give node command and then the file name so file name is app dot J's in our case so this while we have created right now right so just write app dot J's here and press enter okay now if you will notice here it's giving this message that we can open 127.0.0.1 which is the local host on our pc this port so on port 3000 of the local host we can see this server running so i'm going to open my browser once again and in here i will just give the same address which was printed here so 127.0.0.1 and then port 3000 right which is the same address which is printed here this address okay and then press enter and you can see hello world is printed here so you know that your node.js server is working perfectly fine on your Windows operating system and you know that you have you know stall nodejs perfectly on your Windows operating system hello guys in this video I'm going to show you how we can download and install Visual Studio code on our Windows operating system Visual Studio code is a code editor on which you can you know edit or write different kind of codes for example PHP JavaScript HTML C++ or and many other languages so let's see how we can download and install Visual Studio code so just open your favorite browser and search for Visual Studio code or vs code and the first link which will appear here will be code Visual Studio com just click this link and then you will be able to see this kind of green button here you just need to click download Visual Studio code and then you will be able to you know save this kind of executable file which is vs core setup tables dot exe file and you can save it anywhere wherever you want in your computer and depending upon the speed of your internet you can see it can take a minute or so because it's a thirty megabyte file so just wait for the download to complete and then we will start installing it ok so now the executable file is downloaded on my system so I can just run it so just click the exe file which you have downloaded and then start installing Visual Studio code now installing Visual Studio code is really easy so you just need to click Next accept license terms and condition click Next this is the location where code will be installed on your system click Next and then you know it's a star select Start menu folder so this is the Start menu folder and if you don't have the you know correct reason to change it don't change it and leave it as default and click Next and here you can see it will create a desktop icon for you register code as an editor for support for files and add to the path so environment variables also you can you know it will be able to set by itself okay and then click Next and click install it will be really fast installation so it will not take much time to install Visual Studio code and you can see it's installing and extracting all the files and then in few seconds it will be installed on your system now it's also going to set the environment path variables so whenever you want to open visual studio code using your for example command line it will be able to do it so now you can see the code is installed on my system so I can just leave this checkbox checked which will launch the Visual Studio code and click finish and now the Visual Studio code will be launched on my you know on my system now I will also see this welcome screen and getting started so if you are interested in learning more you can see this ton of information given on their website so you see top extension for csharp Python C++ debugger for Chrome and many other options are here right now let's see how we can you know open the Visual Studio code from the command line so here you can create any file for example I will create a new file you can see it will create a new file or if I want to save this file I can just save it by going to the file and then save as or save so for example I will do save as and I will say for example test dot HTML right and now I can just type so it's a really good editor which has intelligence so I can just say HTML and press double tab and it's going to complete the you know tags for me right once again for example head and double tab and going to complete this once again the body for example so I can just write body and double tab and you know it's completing my you know tags for me okay and then you have the option to format your quotes right click and then just click format code and it's going to format your code for you also right out of the box now if you want so I'm going to close my code editor and for example I can just open a command line and here when I type code it's going to open the code for me so you can see it's going to open the code right and for example if you want to open the code or and you know open your project using code you just need to go to the folder in which your project is for example you have some node.js project just browse to this project and then you can just type code and the dot and it's going to open the folder for you hello guys welcome to the next video on node.js tutorial for beginners now in this video I'm going to show you how you can create your first hello world project using node.js from start to end so when we were installing node.js we have seen how we can you know just copy and paste the code and create a simple node.js project but we will see in this video what this code means and how we can create a very simple hello world node.js server so let's get started I will be using windows for this but you can you know do this same on your Linux operating system or Mac OS plus I'm using the Visual Studio code for editing my code or as an editor but you are free to use any other code editor which you please to use so what I'm going to do first is I will just open the you know folder in which I want to create my project so for example this is the folder where I want to create a project on Windows simple you know thing is you can just press the shift button and rightclick on it and you can open the command line in this folder by this method so just press shift right click and just press this option which says open command window here which is going to open the command window in this folder right now here what we need to do is we will create first of all our for example up folder which will we will name it as HelloWorld for example so I will just write mkdir HelloWorld or let it be hello right and press Enter is going to create this folder right and then we will go inside this folder so CD hello and we are inside this folder so let's go inside this folder and in here what we will do is we are going to create a file javascript file for example so i will do this by using visual studio code so if you have followed my last video in which i have shown you how to install visual studio code you can just type code here and then type dot and press enter which is going to open visual studio code in this folder so it's going to open visual studio code inside it will be you know opening this folder also for you right now inside this folder let's create a file so i'm going to create a new file here and i'm going to name it as so let me save this file as for example app dot JS file okay press enter and it's going to create your app dot JS file now let's start writing some code so first thing here we need here is war HTTP is equal to require so just write require and we need to require a module so i will tell you what the module is so we just need to write HTTP here and a module is something like a library so it does what classes do in objectoriented programming is so it's for example whatever you do in C++ you just include a library inbuilt library for example iostream or some other libraries or what you import in Java you import some libraries in order to work with those libraries in Java similarly mod node modules are the way to import some already built code in nodejs and we can use this code so there's such module in node.js which is already inbuilt module which is HTTP and we need to create the instance instance of for this module using requires so require is like include in C++ or import in for example Java right so after requiring this HTTP module we created an instance of HTTP right now the next step is we use the created instance and we will call a method called create server or to create an instance of this server right so just use for example HTTP and then we will call a method called create server so just write create and so something like this okay and inside these brackets we pass one function now in JavaScript if you know we can make a anonymous function let's create a function here and then we will see what is an anonymous function so for example I will just write var and for example I will just write the name of the function so if you move for example right and then I will just write function and we don't need to give any name to this function because we want this function to be anonymous and we will pass two arguments here response and request so first will be if requests for example and second argument is the response so you can give any name to these argument I'm giving it according to the usage which we will pass here as an argument so you can do something like this or you can you know use a full name for example request or response it doesn't really matter right and then you can just create this function so this kind of function doesn't have any name so they are called anonymous function and then you can pass these functions here right so this will be your function you are passing or instance of function you're passing inside this creates over method now most common are you know usage of this kind of anonymous function we don't do it something like this but instead of this passing the instance you can directly paste it something like this so you will mostly see this kind of code in node.js so just pass this anonymous function inside these brackets and you will be good to go so there are both the ways are correct for you right now inside this function we will just take a request and the simple thing is to send the response right so first of all on which port or on you know on which IP you are going to run your server for example so there is a function so just go outside this you know function and just call a function called listen so just write listen function and whatever number you will write here this will be your port for example you write 3000 here this will be the port on which your you know server will run so it will run on localhost obviously and it will run localhost 3000 port okay just listen on 3000 foot port you can do something like 80 81 you know whatever port is available on your you know computer you can use this for sport so for example I use three thousand and the next thing here is we will take our response variable so just use this response variable and then call a method called end here okay and this is the basic you know thing you need to do in order to you know reply whatever client is recommendable client is you know requesting from a get request HTTP request for example right so we will send for example hello world here so just write hello or hello node will be more appropriate right and if you want you can just give this line break here also so this is it this is the simplest server you can make using Noches and if you want you can just log you know show the user that you have you know created this server on this port so you can just write for example console dot log and then you can give the information so for example I can write server is running on for example 127.0.0.1 port 3000 okay and it will run on this port and obviously you need to write HTTP I hope you know what this is so HTTP colon slash slash something like this right and if you want you can do something like this also and then save your code and open your command line once again and you can see it has this file and you can run this file using node and then the file name which is AB dot J s press ENTER and you can see it will give you this kind of alert you can just allow on your windows operating system which is OK and it shows this message which we want to display from here so it's showing this message that the server is running on this board so let's see let's open our browser and let's see if it opens or not so you can see here this code is running so our server is running on 127.0.0.1 and it's printing hello node right so this is the basic you know code for the server so what we need to create a server and instance of HTTP module and then this method which takes our anonymous function which have two argument request and reply or response recursion response and whenever request comes on this port you just reply with this message which is hello node for example now to inspect this code you can just right click here and you can just click inspect element here on Chrome also I think this is the same thing and you go to network here so something like this here Network and then when we reload our server for example you can see there is a request get request and it's requesting this IP and this port is sending get request and in the reply we are getting the status code 200 which is okay whenever you are you know request on cat you are supposed to you know get the 200 okay reply which is a correct reply from the server right now this is the default so this reply 200 will be sent automatically but if you want to be sure you can just write response dot write head so just write write head and then it takes a few arguments so first is the reply code which is 200 which is also a status code or n HTTP if you don't know what is this 200 just search for HTTP status codes right and you will see what this means is and then the next argument will be an object which contains two argument once one is the content type so just write the content type and content type will be what kind of you know replies you want or you want the client to receive so content type let's say it's a text and plain so something like this not this first plane okay and then close it okay and then once again we will kill our server and once again we will run our server and then we will refresh our you know request and it's the same no change here but this time we are making sure that we are sending 200 on the client from the server using this code if you for example send 201 from here and save it and once again run your server so let's kill and run our server once again and once again refresh our code you see you get the status code to zero one but this means different so this is not a good practice whenever you are using get requests you don't want to send to zero one but because the meaning of two zero one is little bit different which is generally used in post requests so you know just search for HTTP status codes and you will be you know good to go okay so this is how you can write a basic server using node.js hello guys in this video I'm going to show you how you can download and install a command line tool for Windows which is better than the native Windows command line tool which is called commander now if you have you know used command line tool on Windows ever it looks like this so I'm using Windows 8 and it looks like this and if you are a developer or if you want to you use a command line for your work then using this command line tool is not you know satisfactory I would say for example you are building a node application and you need to run node commands here and this works fine but for a developer they want more than this kind of boring command line tool now you can say Windows 10 has already been there and their command line tool is little bit better but it's not so much better that we can love it for example so let's see what command line tool I'm going to show you and let's see what's the difference between them so what we are going to do is we are going to download and install a free command line tool which is called CMD ER and we say it command tool okay so just I type CMD ER commander and the first link which will appear here will be commander dotnet right so just click this link and this tool is free come online tools so you can use it for free and in here you can see the first look of it it will look like this and to download it you can just click this download button now there are two you know versions of it one is the download mini version which is six megabyte and if you are interested in the whole functionality then you can you know download this 80 megabyte download installable file okay so it's a zip file so it's not an installer it's a zip file so you just need to extract it and you just need to you know run the command line tool from there okay so let me save this zip file and once this zip file will be downloaded it will take around 1 minute on my PC it can take more or less time depending upon the speed of your computer and once it's downloaded we will see how it works okay so now the download of this zip file is complete and I have already extracted this zip file this file will look like this so you just need to extract it in the folder of your choice okay after extracting it you will see this executable file which says commander dot exe you just need to double click it very simple stuff and I'm going to minimize everything and by the mean time it will start okay now here you can see unlock and continue command and visit home page and exit and it says that some of the deals are missing you don't need to worry about them you can just say ignore and continue for now okay and then just skip this version for now okay and now it will open this command line too and you can see when you you know start this command line tool the difference between these two command line tools right so you know when at the time when you open it it will look like this very sleek and you know you will love it from the first step itself you can you know follow or execute any command which you can run on windows and even which you can run on your Linux or UNIX command line tool for example LS minus L and list all the you know piles and the permissions of your files and folders right or a CD or mkdir or many command line commands it can execute and the best thing what I like about this command line tool is for example if you want to open two command line command line or command prompts what you need to do is you need to open the command prompt or you know two terminals for to command line you know commands if you want to run in parallel right for example in case of you need to run the daemon in background and then you need to execute the shell itself right and in that case you need to open two terminals at the same time and it's not I mean very elegant in case of commander what you need to do is you can just right click on this icon at the top and you can just say new console it will give you this option you can say start and we'll start a new terminal you can see side by side right so you can navigate between them like this you just need to press these tabs and you can open multiple terminals like this on commander this is the feature which I like this commandline tool also comes with SSH so if you want to you know control a remote PC or a Linux operating system it will help you so just FF edge and whatever is the IP address of your PC then you will be able to you know access this that PC so you can see when I press SSH and it gives me one bunch of the options right and yeah so you can see you can just use it and see if it's good for you or you want to stick with the old commandline tool it's on your you know choice but I am is you know lately using this command line tool and I'm loving it so I wanted to share with you so hello guys welcome to the next video on node.js tutorials for beginners in the last video we have seen how we can write a small so using no chairs now in this video I'm going to show you how you can use node debugger to debug any problem in node.js so what I have done here is in the last video I've shown you how you can use this create server and what I have done is I have edited this code a little so I have created our variable called body and I have provided some value to this body right and then I have created one more variable called content length and this content length is equal to the length of the body so just take the body variable and call a method called length on it and we give you the length of this body variable which contains this text right and in the response dot write had I have the status code and last video I have shown you this header which is content type and there is one more header called content length and Here I am but just passing as a value of the body length so content length I'm passing here this variable here okay so basically what it's going to do is it's going to just print the header and in the header we are going to see the content length also now I'm going to just run my app by the way I'm using this different terminal this time this terminal is for Windows which is called commander CMD ER if you want you can download it for free from its website so just search for commander download and you will be good to go so node and then just run your app and press ENTER and then I'm going to open my browser and just run this URL which I'm running and when I will go here so first of all I will just click this option here in the network which is this one and there is a variable called content length and length is 28 right now right so this content length is due to this variable right now let's see how we can use node debugger so for example what I want to do is I want to for example my mistake I called a wrong method on this body variable for example instead of typing length I typed a wrong spelling of length for example right now this is a mistake so when I run my code once again and i refresh my browser once again you can see I don't get any response here and when I click here I also don't get the value of for this content length so right now I can see content length is undefined right so this is basically an error which is coming from this but we know that we intentionally you know type this length wrong but sometimes you don't know where where the error is coming so for this we can use node debugger so right now instead of running node ab dot j s you just need to write node debug and then app dot j s so just add debug in between node and your file name right so note debug half dot j s and press enter and then it's going to open your code in the node debugger now the first thing it will show you is some lines of code so you I can say first three line of my code in the debugger right now too you know the more options about this debuggers you can always type help here and press enter is going to give you the basic command so R is for run cont or it's shortcut if c is for continue and NEX T you can type or n for the next or step or out or back trace or set break point and many other you know commands right now for example somehow I know that some the error is coming from here because we are not able to see the body right so here we want to set the break point so this is the line for right so what we can do here is we can call a method called set break point which is this one right so just call this method set break point and then in here in the brackets you just give the line number so line number we are interested in here is line number four right which is the Declaration of body tag just right for here and then press enter and our debugger is stopped here right now in order to continue this program you can just type cont or directly C to continue and press ENTER and the program will continue for example okay and then when I just refresh my browser once again I can see the breakpoint is met so our break point is at four so we are on our break point right now in order to go further you can you know type as to step into or if you want to go next then you can type any exp okay so for example I will just type N for the next command because for next command you can either use N or next itself right and press ENTER and we are on the next line right once again you when you press ENTER it will execute the last command you have executed so if I don't type anything here you just continue you know implementing or executing the last command you have you know executed which is next right and let's check the values of for this these variables right so to know the value of these variables I can type our EPL which is read a well print line for example or and then press ENTER and then we can just type body and then press ENTER and it gives the value of the body which is correct in our case because the body value was this which is matching in the debugger so we know that this variable is perfectly fine now we go to the next variable which is content length and press ENTER and it doesn't give any value so I know that something is wrong here and then I I can see here the spelling mistake is here and I know the problem is coming from this place so I can correct this problem and I can go out of my debugger by typing exit so press control C first and then dot exit just press dot exit and you are out of your debugger okay and then if you want you can run your node application normally and then just refresh your page and you will see this response once again right now if you are using the witch studio Visual Studio code also have the option of debugging right so if you want to debug using this Visual Studio code editor you can go to view and in the view you can just press debug so you will be in the debug menu you can see here there is a green button which is for debug right and if you want to start debugging you just need to press this green button here and you can see your debugger is running right and in here you can even set the breakpoints so for example I want to set the breakpoint here on the line for you can see this red dot you just need to click here and for example I just refresh my webpage for example you can see this breakpoint is reached when I press the you know this refresh button right so for example I will just break this debugging once again and once again I can for example I can do this spelling mistake and once again I can start the debugger and once again I will refresh my page for example and we are here and then to step to the next step you can just press this button which will go to the next step and if you want to see the value you just need to hover over this variable it will show you the value of body and in here you can see content length is undefined right so we know the error is coming from this point right and this is how you can debug from Visual Studio code also and to break everything from the debugging option you just need to press this red button okay so this is how you can debug your problems in node.js hey guys welcome to the next video on node.js tutorial for beginners in this video we will see how we can use the node.js documentation effectively and we will see how to use global objects in node.js so let's get started first of all let's see how to use documentation and where to find documentation so just open your favorite browser and we will go to the node.js website which is no JSTOR G and in node.js dot org website there is a section called docks so just click this tab here and here you will find the various documentation on node.js so different motions of node.js and recently the newer version of javascript is also released which is es6 and beyond and some of the new concepts are also you know released under this new version so you may want to use or see at least these newer concepts and if you want to adopt them you can do it but for now I want to show you the node.js documentation so in here for example I will go to this version which is LTS which is long term version so I will click this version which is 6.9 2.1 at the time of making this video and in here you can see there's a lot of documentation here on the lefthand side you can see different modules and different type of sections here so what we have done till now is we have used this HTTP module which is a built in module right and you can find documentation on this here under HTTP right and when you click this and go down a little first of all these are all the functions which you can use with this HTTP module and when you go down you can see the stability so stability is the thing which you may want to see before going inside the documentation and if you see that this module and this documentation is stable then you can proceed further so first look at this thing if it's stable or not for the documentation and then go down and see whatever you want to see for example how to use this gap function with HTTP or how to use even this HTTP module how to require and then a lot of documentation you can find here right so whenever you are in doubt just come here and see the documentation now let's talk about the global objects now in this documentation when you go to this section which says Global's and click here you will see Java Script or in particular node.js have some global objects so if you are coming from frontend JavaScript on the browser side you may know that there is a global object in JavaScript which is called window object and under this you may have seen console object or set interval or other you know functions related to this window object something like a lot or different kind of global object in a same way node.js also have these global objects which you can use in your node.js code and let's see how we can use them so I will go to my code editor here and I will remove everything and let's start from the beginning for example and let's see which function we want to use so for example I will use the set timeout function here okay and as the name suggests it is used to set some time out and it has a argument which is a callback function and a delay whatever delay we want to give here okay so we can just write set timeout and then we can call a function so just write function and this will be anonymous function so just write this blank bracket and then the curly braces something like this okay so this is our anonymous function here and then the time out for example I want to give the timeout 300 milliseconds so you can give the timeout in milliseconds here second argument is the millisecond or timeout right and inside this function I can perform some tasks for example printing on the console so I can use console.log function for this you have already used this console log in our previous program and we will do the same here also right so what we can do we can just print for example three seconds have passed for example something like this okay and then save your program and I will open the console and in here I will just run my app for example node app dot J's and run it and when you run it it is just wait for three seconds and then it will print this message which we are printing using console.log okay so once again run the program wait for the three seconds and then it will print the message and then it will come out of the event view for example and it will close the program right in the same way you can use a save or set interval function to set some interval so instead of set timeout you can use this function which is used set interval now for this set interval what we can do is we can define a variable for example and we will say this is our time variable and we will assign the value of zero to it right and then what we can do here is inside this set interval function we can just use time plus equals two because our time timeout or time interval we are using here is two thousand milliseconds right and for example we can just print the value of this time here and we can say this much amount of time has passed or second half passed okay and save your code and run your code once again and let's see what happens here so two seconds have passed four seconds have passed six seconds have passed so it will increase the time the value of this variable by two again and again and this function will enable your node shares program to run in a loop kind of thing so it will never end until you have some condition to end it okay so what you can do to end it you can just press control C to come out of the program okay so let's say we want to come out of the set interval function when some condition is met so for this we can define a variable called some other variable for example timer which is equal to set interval and then we can see here this timer when some condition is met so for example if the value of time so if the value of time is greater than for example 7 then we want to clear the interval so just use a global object called clearinterval and then we can pass this timer variable here and it's going to clear this interval okay and then let's run the program once again and let's see what happens so two seconds have passed four seconds have passed six second have passed and then when the value has become eight at this time it is going to clear the interval because when this condition is met this function is called which is going to clear the timer and it's going to come out of this function right now I'm going to also show you some of the other important objects which you can use in node.js which is their name and file name so we know that we can use a console log to print anything on the console and there is a global object called their name so just write double underscore and then write their name here it's going to give you the directory name you are currently in so I'm just going to once again run the program and you can see it's going to print the directory name right now for example I want to print the file name I am currently in you can just write underscore underscore file name right and then you can run your program once again and now it first prints the directory name which is by this object their name and then we have the file name here you can see AB dot J's file right and you can go through this documentation once again how they work so for you apply go to their name it's basically showing the same example which I have shown you and here also file name and the explanation of this function or object you can find in this documentation so this documentation is going to help you a lot whenever you are developing in node.js so please keep in mind whenever you are developing your server or any node.js application just go through the documentation whenever required hello guys welcome to the next video on node.js to troll for beginners in this video we will learn how we can create custom modules in nodejs now in the previous videos we have already seen how we can use builtin modules in node.js and the example of that was using the module called HTTP so in the previous videos we have used a built in module which was already built in no chairs which was called HTTP and the way we have used it is like this so we have used this require keyword and then use the name of the module which we wanted to use right and we have assigned this module to our variables so that it has created an instance of this module and using this variable we can call any method inside this module which it contains right in a similar way in node.js we can also define our own custom module now for example we want to define a module which says hello in different language so we can define our custom module now for that what we can do is we just need to create a new file for every module we want to create so let me go to the command line and let's see what are the files which are there in inside and my project right now so as I can see I have right now only am not chairs which is my main file you can see here also the same right and now I'm going to create a new file for example I'm going to say that it's a hello dot J's for example and in this new file you want to create a function for example I'll create a function and first of all let me create a variable which has the name save hello in English for example right and to this variable I will assign a value which is returned by a anonymous function so we can define an anonymous function like this we have already seen in the previous video and then this function returns for example let's see what it returns so it returns hello in English something like this right and the way we can use this function in our main Abdur chair is we just need to use a keyword called exports right so here we have defined this variable and if you use instead of this war if you use exports something like this then you can use all the content of for this file in the other file for example right now you can use this file content into the main file for example we use the same construct we just use var and let's say our variable name we want to give here is hello right is equal to require just use require and as we have done in the builtin module we have just called the name of module for example we was using HTTP we have called the name of the module so the rule in node.js is whenever you are using a built in module which is not created by you then you can use something like name of the module only otherwise if you want to use a custom module you can just write something like this so you can just write dot and then forward slash and then for example the name of the file so hello dot J is something like this okay and now using this variable you can call a function so I will just use semicolon here and then for example I will just console.log the value which is returned by that function right and then what I want to do I will just use this variable and then call a method which I have defined here which is this one so whenever you you know require any file for example all the method inside that file are available in this file which in which you have required this file right so we can just write something like this and then don't forget these brackets because this function have these brackets right without any argument right and then save your code and then go to the command line and then just run your app so just write node app dot cheers and it gives me error so let's see what what the error is the spelling of export is wrong so just write exp so RTS right so just write exports pod say hello right and then once again run your code and now it prints hello okay so in order to you know use the content of one file into other you need to use the keyword before your function name for example right now if you want to use multiple functions you can just write something like this so for example first function is say hello in English then the second function is say hello in Spanish for example and it says hola something like this right now this method is also available so both the methods are available now in the m dot JS file so instead of using say hello in English we can just say say hello in Spanish and then we can run our code once again ad prints hola right so this is one way of for you know using a module custom module right the other way is you can just use something like this so what you can do here is you define your functions or these variables remove the export from here something like this and then you just use these colons here and then here you just write module dot exports and in the curly braces just include both the functions something like this okay and just use comma m and also don't forget to assign this value here okay so just write module dot export and then you have these object inside these curly braces for example say hello in English and say hello in Spanish and this is also this kind of you know export can also be used so let's see what's the result now I hope it will be same it's the same result right so this is the second way of exporting your you know methods right the third way of using modules is for example you have these object and elements here right and then you can assign this to some new object for example who are hello right and then you can just use module export and can assign the value of hello here right and we are not doing anything special here you see we were using this module dot export here right and what we have done is instead of using this we have assigned the value of for this object to a variable for example var hello and then we have just assigned the value of hello and we have exported this module right so essentially the same but this is more readable so this is that this is our hello module and it have two functions inside it right and it's also going to give the same result so once again run the code says the same let's use both the function so say hello in Spanish and say hello in English and then we can just run our code ad prints hello and hello Jolla right so in this way you can define a custom module Zen node.js hello guys I go to the next video on node.js to roll for beginners and in this video I'm going to show you how we can use file system module in node.js which is a builtin module now note implements file i/o using a simple wrapper around the standard POSIX functions and this is done using node file system module or simply FS module in no chairs now let's see first of all how we can add FS module so just write VAR FS is equal to require and then you just add FS okay and this is how you can add FS module now this FS module you can use for various input/output functions related to file system in this video particularly we are going to read see how we can use this FF module to read and write to a file synchronously and asynchronously right so first of all we will use this file to read from a file synchronously but for that we need a file txt file which we can read so I'm going to create a text file for example I will name it as test dot txt and in this text file I'm going to write some things and let's you know copy and paste this line ok so then what we want to read from our file system object which we have you know created using this file system module so for reading this file synchronously what we can do is we can just use file and first of all we need to assign this output which we read so we can just write a bar and then we can just say a red string is equal to F F dot read file sync ok so just write read file sync and this method will allow us to read our files synchronously ok and then give the name of your file and because this file is in the same folder you just need to give the name of the file not the path because it's in the same folder so just write test dot txt and the second argument which we want to pass here will be the encoding type so just write for example utf8 and now let's try to print whatever we have you know read from the file to the console so just write console dot log and we will just print this string here whatever we have read so it could be red string and then we are going to run it so open your terminal and just run it using node app dot J's and you can see our file is ready so our file content let's see what was the file content and what the terminal is showing right so same content as the file so this file system module enables us to read the file synchronously and if you want to write this file to another file or write the content of the file which you have read to another file new file for example what we can do so we can just write F F dot write file sync so just write write file sync and then just pass this result to the argument okay so right for right file sync can be used to write to the file synchronously right and this file right file method takes two arguments the first will be the name of your file so let's create the name for example test 2 dot txt and the second argument is the content itself right and let's run our code and let's see what happens this time so just see here what happens here whenever we will run this code and you can see the text 2 is created when we run the code and the content of text 2 is same as test1 dot txt or test dot txt right so in this way you can use this to read and write to the file synchronously now FS mod you'll also have the async method and this will allow us to read or write to a file a synchronously right so this for this we just need to use the method called file name without sync so by default if you know about node.js nodejs is a if and Kronus you know program so whenever you write the program it runs asynchronously and what I mean by asynchronous is I'm going to show you in just a second so just write this once again we want to read the content of testify and just call a method read file and the first argument will be the same and the second argument we want to pass here is the callback method well let's say we can do it in the last argument also right so just write function and then just say error at the first argument and the data as the second argument okay and then give a curly bracket here and press ENTER and in here for example if there is some problem in weeding we want to return error so just call this argument first argument which we have passed in the callback function which is this one and then we can console error right so just write return console dot error and then pass this error here as an argument okay otherwise if there is no error in reading we can just console.log the content so instead of console.log outside the you know read file method we can just you know call it inside or call back okay something like this and this argument which it takes now is data because data will contain your content of your file which you have read okay for now let's remove this line of code and in here we will just call console.log and let's say we just want to print the file is read for example okay and let us run the code once again and let's see what happens so what I'm going to do is I'm going to run the program once again or code once again and you can see the output here it's a little bit different from earlier that first of all the terminal prints or this program prints the file is read which is this line and then it trends all the content of the pile which was there inside the file so this is done in a synchronous manner right so what's happening here is no J starts the server for example and this method is reading the file if the file is for example very big what happens then so you want to you know in a reallife situation when you are dealing with real data you need to do your stuff a synchronously right because otherwise your code will block this you know running of your server and other things cannot happen if one process or one you know file reading is taking very long time but this way of you know executing your code asynchronously will help you to you know run you know your code in a very good manner because your code is not waiting for the reading of your file but it's executing the next step and the next step once again if there will be some more you know useful code below this also then it's going to execute it and once the file is read it's going to print the content of the file using this console log so the callback function this function is called callback function and it is triggered whenever the you know a file is read completely right so this is how asynchronous you know way of reading file box okay in the same way you can write to the file asynchronously also and you just need to you know call FF dot right file and then the you know name of the file ways in which you want to write to so let's do that and let's see what's happened so FS dot right file and the first argument will be this argument the second argument would be the content which we want to write for example we want to write this data which we are reading from the first file for example and the third argument will be the same as we have done here the callback right so you can just copy this much amount of code before the bracket and then pass it here and we can just add a semicolon here okay and this is just checking whether your file is written and if it's not written it's going to you know console.log the error and if it's written then we can say success for example we can just print success right something like this and when you run your code once again it's going to write it so let's run it and program is done and at last it print success and you can see the file is also created text dot txt right so in this way you can use FS module in nodejs there is more you know functionality in this FS module which you can find on the node.js sites or go to node J dot org /a API / FF dot HTML and in here you can go here filesystem or you will be able to you know find more method related to this FS module here and there are so many method which you can use so just to go through this documentation and then you will be good to go hello guys welcome to the next video on noisiest atoll for beginners in the last video we have seen how we can use the FS module to create file read from file and write to a file now in this video we will see some more functionality of this module and we will see how we can delete a file and how we can create and remove directories in no chairs using FS module so the first requirement is this one you need to you know require this module which is a inbuilt module right now first functionality your first thing we will see here is how we can remove a file so in the last video I have created this test type txt file right and for example I want to remove this file so I can just write F F dot on link and then I can just give the path of the file with its name so my file is in the current directory so I don't need to give the part but I just need to give the name of the file which is test dot txt right and when I run this app let's run it and what happens is this text dot txt file is gone right so this unlink method you can use to remove a file but be careful here whenever you will you know run the code if the file does not exist then let's see what happens now this time it shows an error which will be due to the file not existing okay so in FS module you can also go to the documentation and check how you can first check for the file if it exists or not and then delete it so this can be your home or just search for how to check if the file exists and then try to delete it okay now let's move ahead and let's see how we can first of all for example create a directory so to create a directory first we will see how we can create a directory synchronously so if you are a little bit familiar with command line you know terminal commands then you know how to you know create a directly so in terminal whenever you type mkdir then it creates a directory right and in node also whenever you just call them method called mkdir after FS and then gave the name of the directory for example the name of the directory I want to give here is for example node itself okay so know directly I want to create and here I want to create it synchronously so don't forget to write sync here right and save your code and I'm going to run my code again and let's see what happens so I just run my code and you can see there is a new directory created which is called mode right now in order to remove a directory you just need to replace MK by RM so RM dir is going to remove the directory so synchronously was synchronous removal you just need to add this suffix like FY NC sync right and save the code run it again and just see here the directory will be in the book so this directory is removed right now in order to create a file asynchronously what we can do here is for example instead of using this sync we can just write something like this so FF dot and K they are and then the name of the directory once again for example node and then you can create a callback function here so I am just going to write function and then inside the callback function I can do whatever I want to do after the directory is created right so for example I want to create a file after I have created or directly something like this okay so inside my callback function what I can do is I can just write FS dot right pile right with a capital F and the name of the file so for example I want to create this file inside my new directory which is created which is node now in order to you know create this file inside the snow directory you just need to write dot slash to indicate that you need to go inside this node directory and then the name of the file for example my node dot txt okay so this will be the name of the directory and for example you want to write something I'm going to just write random text here and this is going to you know write this text to this file for example right so just save your code and run it again and let's see what happens so on the code the directory is created inside the directory the file is created and inside the file this random text comes okay so this is how you can make a directory now let us say that you want to delete this directory once again which also have some file inside it so I'm going to just remove it and I will just write F F dot the RM dir and the name of the directory so the name of the web directory is node right and if you do this it's not going to delete this directory because you already have some file inside it so whenever we run this code what it gives is it gives the error because you cannot remove a directory if it contains a file inside it so what we will do here is we will first remove the file and then remove a directory and this is very simple we have already seen it so just right FF dot on link and then you just need to give the path of the file you want to remove so this is because it's gonna know the folder so you will just write dot forward slash node and then you just need to give the name of the file so the file name is my node dot txt and then we can add a callback function here so just add a callback function and inside a callback function once this file is removed we want to remove the directory right so you inside the callback function you can call a method to you know remove the directory right and just save your code and let's run it again and let's see what happens so I'm going to just run my code again and you can see the file is deleted first and once the file is deleted this callback function is called and then the directory is removed ok so in this way you can use FS module to create directories and remove directories and remove files also hello guys welcome to the next video on a node.js to tol for beginners in this video we will talk about events module in node.js and how we can use event emitter in node.js we will also see so much of the node.js core API is built around eventdriven architecture which means that because we that nodejs runs itself in an asynchronous manner so it's necessary to have some kind of eventdriven architecture because so for example you if you are reading a data from a database so once your data is read from a database you need to trigger some event otherwise if your code is blocking and it's not you know a synchronous then your so execution will be blocked until the data is fetched from the database right so we have event in node API which helped us to you know for example same example you want to fetch a data from the database you write a function for this and as soon as you you know you are done with reading of the data from the database the code triggers an event so your code will run asynchronously and it's not spot stopping and as soon as the some function is done an event can be triggered and the execution can be done or it can be you know the data can be sent to the client for example right so let's see how we can use events and events emitter in known chairs so to use events just write VAR events is equal to require this keyword events right now in order to create emitter you need to call a method called event emitter right so you need to create an instance of new event emitter object okay so just write our event emitter is equal to new events and then call an event emitter on this object right so with a capital e right so this will create an instance of four event emitter okay and using this event emitter you can create an event or listener for the event and then you can also emit an event and the listener will listen to the event so how you can create a listener you can just write event emitter object and then there is a method called on and for example of you if you are writing a UI something clicked for example some button is clicked this is like a listener to your you know button click so you can hear write a keyword for example click so this will be the listener and whenever this keyword called clicked is emitted then this method which is a callback function here will be called and whatever code inside this callback function will be executed so this is kind of a listener so let's say there is a you know the keyboard clicked and we will omit this keyword using event emitter once again so just use event emitter dot emit and simply you can just call this keyword which means that this event is triggered for example click is triggered and here you can use any keyword so for example if you are fetching data from the database you can just write the query here or if you want to add some data you can just write add the keyboard depend upon you so whatever keyword you want to use here as a first argument it is such a word and whatever keyword you know you omit if it's the same as the listener keyword then this code inside this callback function will be triggered so let's see how we can use it so for example I will just console.log some things oh just right console dot log and I will say something is clicked okay so let's try to run our code now if you are using visual to the code there is a trick to open a terminal inside your visual studio code editor itself and the way you can do it you can just press control shift P and you give you this kind of a box and here just type it toggle integrated terminal and here you can run your code again and you can see we are already in the same folder in this terminal so we just need to write the node up thought j/s and run it and you can see something is clicked so basically what's happening here is whenever you omit this keyword then this listener then listen for this keyword and then the method or callback function will be called and whatever code you will write here will be executed okay so this is the basic functionality of event emitters now in here you can also pass some argument with this emit method so for example you want to pass some text so you can just pass for example button one okay and instead of for this you can just pass a function for example button and then you can just call button here plus and then instead of something we will call button one is clicked okay so this is an argument which will be passed here you can pass any number of argument you want here and just I pause the same argument here this you know value will be passed to this button right if it has the second argument then the second value will be passed to the second argument so you can pass some argument also like this and once again when you run the code it says button one is clicked okay so you can also pass arguments here now let's take a little bit more advanced example now for this example we will then need for example our utils module which is also a core module here so just write util here is equal to require YouTube and using util it has so many functionality and the functionality which we are going to use from this util is the inherit function awesome heads you know method from it so there is a method and util so just write you two and then call a method call inherit so and then it takes two argument first is the class which you want to inherit in so first is the class which is inheriting right so we need to create some for example object in order to inherit from event emitter so let's create an object so we will just create an object called students and the student have this function which will take the name of the student and then it will assign this name to the student itself so just write this dot name which is the name or the member of the student and it will be assigned by this name which is passed to this function right now as I said utils have this method called inherit and it takes two argument first is the class or the object of the class which wants to inherit so this is like a class which is inheriting and the second is the object which is the base class for example so from the class which you want to inherit so we want to inherit from this event emitter okay now this is really good thing about m and the emitter we don't need this bracket here and we also need this here right so now if you know the concept of inheritance what happens when inheritance is the class which is inheriting have the access to the methods and the members of the class from which it's inheriting so student have the access to for example on method or emit method or whatever method public method which are there in this event emitter class for example right so now what we can do here is we can create some student for example student one can be max is equal to new student and we can give the name here max okay so this argument is max in this first case right now whenever we call this object now this object also have the access to a method called on right which we have called using this event emitter instance because students is inheriting this event emitter therefore this object of the student also have the access to this method and you can simply use this you know method as we have done earlier so this students for example we can just get the keyword scored and then we can just pass the anonymous function or call back here and we can just pass some something like marks here right and we can control log it so just write console.log and then we can console.log for example first of all the name of the object for example max dot name and then we can just write here scores and the muskie score so the marks are here okay we can print this and then we can omit this event right in reallife situation you can do this Emmit on for example receiving the some data from the database or connected correct connecting to a client whenever connection is successful something like this but here for example i can just write max dot commit and then this keyword called score and the second will be if you remember the argument here can be the value of argument this argument can be passed from here right so we can just say 95 marks okay and let's run our code again to save the program and run the code again and here it says max scores 95 right or and you can just write something like marks also here so we know that he scores this much amount of mark and once again run the code and now it says max codes 95 marks right in the same way you can create a second second event something like this so instead of 4 max you can just say the second student is Tom right and the name you pass here also and instead of max you just essentially replace max by Tom this is our second student right and this time Tom scores for example 60 marks okay so once again when you run the code you can just see math scores 95 marks and Tom scores 60 marks okay so in this way you can use events and event emitters in no Jeff hello guys welcome to the next video on node.js tutorial for beginners in this video I'm going to show you how we can use streams in node.js specifically we will talk about readable stream in this video and in the next video we will talk about writable stream in Mochis so let's get started so first of all what are streams streams are UNIX pipe that lets you read data from a source and write data to a destination right so for example you want to read a data from a very big file or from a source which has the lots and lots of data and because you are running a server you don't want to block your server right so if you want to read this file you may want to or you would like to read this file in chunks or you know smaller portions and once this portion is read you want or you can do something right and streams allows us to do the same so streams allows us for example we want to read a big file streams allows us to read this file chunk by chunk and it will also give the information that this chunk is red and if whole file is read or not or we can do many you know events from this data right so let's see how we can use streams specifically readable streams right so to use streams we will use the FS module module and we have already seen how we can include this module in node.js just use var FS is equal to require FS now we will create a variable call for example readable stream is equal to F F dot create read stream and this takes a achievement which is the name of the source so for example I have this file whose name is file dot txt and it's a relatively big data so it has around the 500 5000 200 lines of data I just copied a random data from some source and for example I want to read this data right now this filename here we will give as argument so just give file dot txt because it's in the same a directory you can see here and now we can use this variable read stream let's name it read the screen instead of readable stream okay so this read extreme we can use to listen for some event so basically whenever you use create read stream it inherits from event emitter and we have already seen how to use event emitters in the previous videos so it inherits from MN event emitter so we can call the method which are present in event emitter class also so we can you know trigger on event or emit method using this read stream now there is a predefined the event in create read stream which is called data okay and which allows us to read our pile in chunks so just write read stream and then we will just write on which we are inheriting from MN event emitter and we will listen for the event called data and then we will just create a anonymous function here and this anonymous function will read chunk of data so just write chunk and then we will just choose our function okay so in this variable whenever this event is triggered then this chunk will contain some chunk of data from this file right this chunk variable will be full and then we will you know use this chunk of data from this file okay so for example what I want to do is I want to just console.log this data so I will just write console.log chunk here okay and one chunk of data is read so we can just give a line kind of a console.log here so we know that this is one chunk okay after this line right so let's see how it works so I am going to just open the terminal and run my app and you can see there are few chunks which are read from this file okay so you can see my first of all this line is you know printed on the terminal because of this console.log and then we have the chunk of data and then again this line again and this chunk of data so it's reading the data in chunks and when all the file is wet then we have the output but this is not familiar because this is reading in hacks right we haven't defined what type of data we are reading so you can see in the file dot txt we have normal you know normal text it's reading in hex data right so how we can tell this functional method to read in readable text you can guess I think you can just write here the type the second argument is utf8 for example and then just save it and then we will run it again and now you can see it's reading in the normal text so you can see this line and then judge chunk of data which is red and once again we will see when we will go a little bit up so this is the next line and whenever you will go up you will see these this kind of line so now we are reading the normal text but in chunks again right so this event data will allow us to read the file for example in chunks right and whenever one chunk is read you can do some logical you know stuff with this chunk of data right now there is one another event called end so you know that you have completed reading the file so instead of data whenever you use N and let's instead of for this console log you just say and end here okay and let's read the file again or execute the program again and once this data is read this line is printed which is due to this triggering of event called end event okay so once the file is read completely this event will be triggered and then this line will be printed or whatever code you will write here will be printed so for example I will create a variable here called add data right and what I want to do is I want to store all the you know text of the pile in this variable and once my data is read or once my file is read I want to print the content off for this data so instead of this what I can do here is I can just write data plus equals chunk something like this so what it's going to do is it's going to concatenate this chunk into this data variable right and once all the file is read I want to print it so I will just do console.log here and I will print this data variable so this differentially will contain all the file content okay and let's just comment this code out because we don't need it and let's run the program again so program is running so this time once the you know data is wet then it's printed using this console logs because we are not you know printing using this we have already commented out right so this time it this line is printing this text all the text okay and once the text is printed this line of code will execute and into print and here which is happening here okay so this is how basically you can use readable streams in node.js right now there are many options or related to read extreme and write streams so for example one of the option we have set here stead of setting the encoding from the second argument there is a special method which you can use to set this encoding which is the set encoding so instead of for this you can even do this also and code will run fine okay so let's run the code again and it's going to run it you know normally okay so just go to the node jeff's documentation on its website and you will find many useful functions and methods there which you can use in your code according to your requirement this is just the introduction to you know streams and specifically the readable stream hello guys welcome to the next video on node.js too tall for beginners in the last video we have seen how we can use a readable stream in nodes here and we have used this method called create restreams to create an object of read streams and then we have called that this method on this readable stream object which on data event was you know reading a chunk of the data from a file which we had created last time yeah and whenever a chunk of file is read then it's going to be used using this variable chunk in this anonymous function right so if you are not sure what I'm talking about just see the last video to be clear now in this video we will see how we can use the writable streams in node chairs so for example you have some vaso stream coming from somewhere for example from this file itself whatever we read from a big file we have we have created last time you want to write this data which we are reading in chunks to another file in chunks so we are not reading the whole file and then writing to a new file we are reading chunks and also writing chunks so it's not going to block your code okay so let's see how we can create a writable streams in no chairs now to create a writable streams I am going to use this code which I have written in the last video to read the file right and now we will create a writable streams just write var write stream is equal to F F dot create write stream and then we can give the name of the file in which we want to you know send our stream to so for example I can name my file as write file dot txt okay this will be the file in which we want to write our data now to use this write stream is really easy whenever you read this data so here on the data event here we were reading the data right so in order to write it to a file you can just call this write stream object and then you can call a method called write on it so just simply call a method called write and then it takes a chunk as an argument so you can just pass this argument here and this you know chunk will be written to the white stream object and in turn it will be written to the right file dot txt okay so let's run the code and let's see how it works so I'm going to open a terminal and run my code and it has just printed these which indicates chunk of data read you can see and then we can see a file is created here with the name right file it has the same content as our file dot txt have ok so this is essentially just writing the chunk of data as it reads the data from of file now in the previous videos we have also seen how we can write the data using the right file function right now the difference between this right stream dot right and the right file function is in the right file function we were just you know flushing all the data which we have in the buffer and it's not you know going to the file in which we want to write chunk by chunk but we were writing it in in a single shot right but using this method you can you know write the data to a file in chunks whenever you have data right so this is the benefit of this method and right streams over the right file method hello guys welcome to the next video on node.js troll for beginners in the last two videos we have been seeing how to use readable streams and writable streams in no chairs and in this video we will learn an important concept called piping in no chairs with readable streams and writable streams now in node.js or any server application writing and reading streams is so important and frequently use thing that nodejs has provided a back better mechanism for us to use which is called piping so if you think about a website for example what it basically does is it takes the HTML page for example and just giving a very simple example so a server takes a SD ml page and it first of all reads this HTML page and create a for example write table stream and send it to a browser in which we can see this HTML page content right so this operation is really basic to a server whenever you are making a website for example so first of all let's see what is piping or what are pipes so a piping is a great mechanism in which you can read data from a source and write to a destination without managing the flow yourself right so in the previous video we have seen that we had to create a readable stream first from a file and then we have created a writable stream and then we were you know listening for the data event to write it to a file using the writable stream and here also we can handle the ending of the reading right now the piping makes it really easy and it manages all these things by itself so a pipe method listens for the data event by itself and it automatically you know sends this you know chunk of data which we are reading to the file we want so how we can create a pipe so we still need here are readable stream and also writable stream so we will leave these two lines of code here now in order to use pipe you can use pipe only with readable stream so you need to have an object of readable stream and then call a method called pipe okay and this pipe takes an argument which is a writable stream so you can just give this object here and then it's going to do the stop autumn take a listen it's going to listen for the data event and it's not going to worry about or we don't have to worry about if the you know data is read slowly or fast or or handling the chunks of quad data right this pipe method is going to do it by itself so let's run our port and first of all I'm going to delete this right file because it's already existing I'm just going to delete this and now I'm going to save my code and I'm going to run it so let's run it so the code has run and you can see it has created this file again which is writable stream and which has the same content as the input file which we have okay so this makes things really simple for us right now in server so in the previous videos we have created a node.js server right so let's use the server code again to send this file stream or this data of the file using stream two of that browser okay so let's use first of all this HTTP module which is an inbuilt module which we have also seen in the previous videos right so require and then you can just write HTTP okay and then we have created a server in the previous video so I'm going to just take that code which we have written in the previous videos for creating a server and we will just use this code okay so if you don't know how we can use this code just see the previous videos where I have shown you how to use this HTTP module right now in here what we want to do basically is whatever we read from the file or input file we want to send it to a browser right so let's first remove this code first of all right and let's run this code for the first time and it's going to print hello world for us right so I'm going to run this code and I'm going to open the browser and it's going to just print hello world which is the basic functionality of this code right now in order to send the content of this file we don't need a writable stream right because we are going to directly send the you know file content to the browser okay so what we are going to do is we will just take this readable stream and we will create it inside this server okay and using this read stream object instead of for using this response dot end which was sending this data to the browser we can just use this read stream dot pipe and then we can just add this argument called ref or response argument here and everything will be done by itself and we are going to just remove this code here okay so what we have basically done is we have created a readable stream and then using pipe we are sending this stream to the response okay and let's run the code and let's see if it runs or not so I'm going to just stop myself and run it once again and I'm going to refresh my browser and you can see all the content of the file is on our browser page okay so let's repeat what we have done here so in the server we have created a really small server which relations on local host on port 3000 you can see here and what it's going to do is it's going to just write to the you know whenever a request come it's going to write or give the response in a plain text so this content type is playing text it's not HTML because we are sending the plain text okay and if you want to send the HTML page you may you know rightly guess that we just need a HTML text or HTML over here right and this we are going to see in the next video to send the HTML to the browser using this code but right now we are using the plain text that's why the content type is text slash plain and then we are reading the file using the file stream and then we are just piping it to the browser using this response variable okay piping makes it really easy for us to serve the you know whatever we are reading as a stream hello guys welcome to the next video on no JS to troll for beginners in the last video we have seen how to use pipes to serve your text which you are reading from our text file to a browser for example and we have learned some concepts about pipes now let's use this concept to serve a HTML page to a browser for example so let's get started and first of all we are going to create an HTML page so I am going to right click and I'm going to name my HTML page as index dot HTML ok so just create a page called index dot HTML and in here we are going to write our HTML code okay so let's add our HTML tag first of all and then we are going to add head and body elements so just add head first and let's add a body element also and inside this body let's write something so inside the body for example I want to add h1 tag and in this Ashwin text let's write something so for example our first node.js HTML page for example okay and let's give some style to this page for example let's add first of all the style element here instead of this just write style and then inside the style let's change the background color of our webpage so we can just do it by just changing the background color of the body so just add body here and we will change the background color right so just choose background color and which color we want for example light green or something like this so let's use light green is there any light green here here this okay right so this is essentially changing the background color of your HTML page and it has one h1 element which has some text here okay now because it's in the same folder as our project files we don't need to worry about any path here and instead of this file dot txt we can just write index dot HTML okay so just write index dot HTML and instead of plain text slash plain here now we are sending the HTML content to the browser so just replace this plane by HTML here okay and we will be good to go so let's rerun our saga so I'm going to rerun our server and let's refresh our page and now we have our first HTML page solved using our node.js over to the browser right so this is not really complicated and if you want to make a static website you can add multiple you know static HTML page pages and serve it using this technique but notice is much more advanced and the complex technology and it can be used to you know do more complex stuff right so this is the simple way of just catering and HTML page to other browser in the further videos we will see how we can use some more complex functionality with no dear hello guys welcome to the next video one more chance to do em for beginners in the last videos we've seen how we can find the HTML page moving readable strings and writable screens in no chairs now in this video I'm going to show you how we can send our Chasen to the browser using an old chair right so Jason know you know most of the you know server application uses Jason as our data to send it to the browser and this data can be passed on the browser side for example and then it can be used for you know multiple purposes so it's also a popular technique that Jason is sent from the server to the browser and then with this juicy data some useful things can be done so let's get started and see how we can use Jason and you can penetrate into the browser so I'm using the code from the previous example I will remove there are the readable strings and writable streams code from here because we are not going to move them in this code and we are going to directly use this response variable to send the data using response dot and okay so first of all we to change the content type right so here previously we were sending the text / slash HTML because you want to send them all the JSON data so you just need to write application /j sir okay and then this means that we want to send the JSON data and browser will be able to pass this JSON data appropriately right now in the next step we will create our JSON object so you can use a JSON file for that or you can create a JSON object using the code also so I'm going to create my JSON object using the code but this can be done also using the JSON file so you can create a JSON file here and read the JSON file and then convert it to for example stream and then send it to the browser right so let's create our JSON so far for example Jason obj for JSON object and inside this brackets we can add some elements to the Chasen so what elements we want for example we want the name some name and then can we max and then the for name for example and this can be something and the age for example age can be 26 okay so this is our JSON object and this we want to send it to the browser so we can simply use this response variable and then call our method call n which we have been using in the previous video also so just right hand and then you just pass your JSON object here but this code will not work because the browser or whatever you want to send this method it only takes the strings or the string as an argument and this is our object so we want to convert this JSON object to our stream and how we can do this we can do this so using our method called JSON dot stringify which will convert our JSON to our string okay so this is the method json dot stringify which takes our argument you can see the details here so it takes object as an alternate which can be achieved right so this is our code and this object may be converted to a string and then using this method it's going to be sent to the browser let's say one hour server first of all and it has some error so let's see what the error is so the error is instead of equal to I need to use the colon yeah and once again run the code and then use the browser to see the response and you can see our response Jason is here right I'm going to make it a little bit bigger so this is our response Jason now in order to impact this you can just rightclick on your browser and then click inspect in boom boom I think this is the same option inspect element or inspect right so click this and then go to a tab called the network okay so go to network here and we need to reload our page so you can click this regalo button and you can see our it has the status 200 which we are sending from the code this code right and then the content type also so just click on this you know get method and you can see here the content type is application for slash JSON so this is send using this code and then then go to the response here response tab the tab you can see the Tizen is passed and shown in our commented way right so in this way you can send a Jason to the browser using more chairs ok and this is also a very useful technique whenever you want to you know send some dynamic data to the browser for example you want to pin from our table using the JSON data then you can do this right because you can pass this JSON data based upon the elements and values right hello guys I go to the next video on nausea scroll for beginners in the last video we have seen how can I send the JSON data to the browser from node.js right and this was the code I have in the last video now in this video we will talk something about the routing talk how we can you know route our data and get our different responses for different requests right so let's get started what I'm going to do is I have taken the last video code here and I have added one more line here which is walking the requested URL ok just this IQ dot URL I have added this code extra and everything is same from the last video example ok and now what I want to do here is I want to first of all run this app and I want to just open my browser and refresh my browser so the base URL here is the forward slash right this is the URL now for example I want to request some like a pi/4 in my url I want to add forward clash API and I want to liquid some data when I request or I extend my URL with this forward slash API and then I do this you can see the request is gone with the different URL but the response is same right and for example I want to add about page and I will press Enter it gives always the same response whatever the requested URL it is you can see I have requested the four slash API URL or four slash about URL or for example let's say the you know response is always the same so how we can route these different URLs according to the request we want to spend the response so let's see how we can do it so I am going to go to the code once again here and first of all I will use this URL to pass which kind of power you know request it coming to us and then on the basis of this request we can like it as a result right so you can see I have already made index dot HTML in the previous videos right so this is just a sample HTML which I have created in the previous video so for example I would say this is my home page okay so I will just add home page and when somebody you know requests either they jorel power slash home or just the forward slash there then I want to cater this saw index dot HTML or home page there so what I'm going to do here is first of all so just take the space here let's make the space here first of all you will add the code to bars that you are also just write request which is the first argument here it was point or dot URL is going to give us the URL and then get triple equals R remember on using triple equals because it's always a good practice to use triple equals instead of double equals so try always think the triple equals right and then I want to match it with for example /home or if it's only a forward slash okay so I'm just going to copy this and place it here and if it's a forward slash then what I want to do here is I want to give the text response so I will just copy this line of code but this is HTML right so instead of this I can just a text or slash HTML right now in the next line we are going to create the stream of our HTML page and then we will send it this will be HTML here so FS dot create read stream and you want to create the link stream from our index dot HTML so you can just directly give index dot HTML which is already present right and we will pipe it to the response so we just write 2 pi and then just write response or our es okay so this is going to just send the index dot HTML when ever this home is requested or as the base URL is requested or else you can just write if or in better right as right so just right else if and if the request URL is for example the chase and objects I will just say triple equals API so this is just kind of hot API and whenever the API is requested then you want to give this JSON object so you just create information and inside my explanation I want to send all this JSON data like something like this okay so what will happen now I'm going to just forward format it just right click on your visions to decode and just click format it's going to format your code right and let's saw reason our code once again so close the code and we run it once again and now when I do for example just a base URL press Enter is going to show us the home page which is the index of HTML extending phone so or whenever we write here power slash home you see the same response the home page but whenever we invite here API for example API then it gives us the JSON response right and in the same way we can you know give a different response on the different requests so let's add one more response for example for example I want to have a about page so I'm going to create about dot HTML so I will just say about dot HTML and it hits about dot HTML and you're just going to copy the code from index dot HTML and I was just saying here about page ok this is my about page and in my app don't chase I can just copy a tip code from here I'll just say else and my code of course which I've copied which is this code and instead of home I will just add about here and I will just remove this right and instead of index dot HTML I will just replace it by about dot HTML right and let's run the code again and let's see if it works or not so I'm going to open the browser and this time I will just ask for about and gives us the about page right or no and it gives us the main page right now for example let's say I'm just a crossing from random URL once again we're going to you know request it but it's not never gap going to get any response from the server because server cannot resolve this URL right now in this case so whenever server cannot resolve the URL ideally we want to send the response hole 0 4 which is not formed right so let's add this response so in the last condition I will just add else condition which is the last condition for us and let's create a 4 0 for HTML page so I'm going to right click and I'll just this wire for the aforethought HTML page right and once again I'm going to just copy the HTML content from index dot HTML or about the HTML and paste it here and I will just write here 404 and I will just write not found right and now I will just add the conditioning ancestor as condition I'll just copy these two lines once again and here I will just try the force single for dot html' and instead of giving 200 response this response I will eclipse by putting your core right which is not found status code and let's run the code again and in the browser let's try this record URL again and now it gives the port Singapore responds to us okay so home and we have about and we have our API it gives us the JSON response or any other random URL will give the 404 response right so in this way you can you know route your request and give the response according to the you know you already requested now there are much better ways of routing your requests using some extra modules or a thirdparty modules and this is what we are going to see whenever we will learn how to use NPM modules right so there are you know thousands and thousands of thirdparty modules available to perform a different functionality so you can use these ammonia using NPM and this is what he able to see in the future how can module so all these things can be done in much easier and professional way hello guys welcome to the next video on Moody's tutorial for beginners in the last video we have seen how we can now perform basic routing using your chips now if you want to do more routing stop and other stuff if you think of this it can become really difficult whenever you want to add a few more files here you need to write the lots and lots of cool here in order to stop and this can be easily done by thirdparty modules and there is a repository called NPM or more package manager which allows us to include thirdparty modules which are created by experienced developers and they have already invested their time to create these modules and these are publically available so similar to these modules poison HTTP or FS module these are built a new module in no chairs now these thirdparty modules can be included in your project music mode package manager or entity so let's go to the NPM website and let's see um what's there so whenever you will sort NPM on a browser you will see the first result here will be you PHAs comm just click this link and game is calm and in here find the movie package modules or node modules so which you can use in your project so approximately there around I am not read that there are around 280,000 are available in this song you know robotics move all the three right so you can search this module for example if you know the package name for example this kind of routing can be done using express mode right to insult your Express here you can see the intelligence here and you know you can see various options on yesterday so just search for example Express and search for it and the first option here comes is expressed red flash but doing one extra splash media point expert so you can just search for express once again and here you can see the first option here is expert bytes to click the thing and here you can see documentation for that module so it's a fast uh no because it a web framework you know Express to do exactly we are trying to do in our stop for example the routing stop and you know let's pull API if you want to create you can do it using Express on the right hand side you can see the stats also so stats here you can see over 300,000 installs or downloads of this module are done previously for the yesterday locksmith or 300,000 and this month itself have 1.8 million I think downloads here so from these download you can already recognize that this module is wave officer this is the one one of the most popular among youth in Georgia I can tell you right now how you can install this Express or any other module although part 280 house modules are in water so you can do it using come online and let's open the command line in order to see how we can install it so first of all you need to in your directory wherever your project is and then you can use NPM command to install so whenever you have installed the load course the second video I have shown your hobby install node with that and p.m. module has also gone so you can just know the woman of this by just writing NP minus V in order to install this Express module we just need to do NPM install just write NPM install Express right which is exactly you know documented here also so installation and BM install Express right so whenever you find a module consolation procedure of this module will be given here the documentation of this module is given here and QuickStart also so you can come to this website to know more about right so I have just given the install Express and I'm just press ENTER which is going to take some time to download and install this Express model and you can also hear there will be a directory created the name board under school modules so this module is downloaded in our code now there is a folder called more the modules and created here and when you open this someone modules can see many modules are downloaded folder but we're in package we have installed in this Express module and all the other modules which are coming with the next first module are its dependencies okay so for example movie Bob or destroy or any other module which is installed with this Express module is its dependency so it will also be stored with press for example ok now this is the way to install any module in your project but this is not the preferred video for doing it we will do it using a package manager including her you know NPM command which is the standard command which is like this and yep in it and this we will see in the next video but for now I want to uninstall this model so don't worry if you want to uninstall a module also you can do it moving and p.m. come on so let's uninstall and that command is really simple and game uninstalling setup for install you just need to write move your hands install and the package name and then press Enter is going to uninstall the modules so you can see the process is going on and then whenever go to your node models folder there is only a start then call the left here and every other modules is deleted because we have installed this Express module right so using these modules is also simpler than just ah you know add like this so far HDPE require then once your model is installed you can just give the me more money right so this is just the introduction of four more chairs ah the standard way of using NPM is moving package job Jason file which is kind of a you know a file which have all the records whatever modules are there in your project and the disk and given to other developers also can use this project that's your packet of chips file and then we can install the modules and you know which version of you know anymore installed in this package dot Jason pipe so this is exactly we are going to see in the next you house package got chase file create and maintain your coaching so this was the brief introduction about engine and you will see how we can use and be a master thirdparty move you from the next PD hello guys welcome to the next video on node.js to dole for beginners in this video I'm going to show you how you can create your project using NPM from scratch and you will also see what is packaged of Jason and why it's required so let's get start it and I want to create a new project so right now we have been was working on this hello project and still we are in this project using Visual Studio code right so I want to change this project or I want to create a new project and for example this project is in my samples folder right so in the samples folder I am going to create one more directory so I am going to open the command line and right now I'm in the hello folder which is this one right so I will go one folder back you can also use this folder Explorer to the painting which I'm going to do from command line so right now I'm in samples folder which is this one right so I'm going to create a directory for example so I will just give NK dir command and the name of the type for example first NPM so because we are in creating our first NPM you know the project or the project using NPM or first air towards it using NPM so I am going to name it as force and p.m. right and I will just press Enter which is going to create this folder here right first NPM right now this is a blank folder and the way you can open this folder in envisions to be code is just go to the file open folder and then just choose this folder which is right now blank and which is totally fine okay it's going to open this folder in your Visual Studio code now in order to initialize your project and you know configure your project give the name version and the you know other properties to your project you can give the command called NPM in it okay you just kind of initialize your closing okay just give NPM in it and then press Enter which is going to ask you some questions so first of all right now I'm in samples folder which I don't want I want to go to the first NPM folder so I'm going to just cancel this NPM command and let me go to the first of all this first NPM folder right now now I'm in the fourth NPM folder I was in samples folder so I changes to force 10 p.m. right now I'm going to kill everything for now and then I will give NPM init come on okay so just go inside your folder in which you want to create your project and give be a minute command and press the press enter which is going to ask you some questions and the first question is the project name I'm going to leave it as default super enter then the version this is the default version then whenever you make a major change to your project you can change the version also but in the later stages right so I'm going to leave it as default and then press Enter this is a description to your project we can give any description to your project for example first NPM project for example and then press ENTER and then it's going to ask the entry point and this will be the entry point javascript file for your project so index dot JS file so I'm going to leave it as default and then it's going to also ask you if you have any test commands or not I don't have any test because I haven't even written any code yet so I will leave it as default and press Enter and if you have any git repository it's going to ask you I don't have any so I'm going to just pop it here you can give any keywords to your project for example both NPM or any keywords related to your project right and then press enter and then the author name you can give your name I'm going to just say me and then the license I'm going to leave it as default and then it's going to confirm that if you want to you know give me the information these are the information which will be saved in your project and if you are sure you can just press yes and then press enter ok so you can see there is a package dot JSON file created inside your folder so let's open this package dot JSON file and here whatever information you have given the in it come on it's all there so it's a JSON file the name of your project is first IBM the version is 1.0.0 which is the default version and we have also given the description this is the entry point so this file will be the main file which you know NPM is going to speak so let's create this file first of all so I'm going to just right click here create new index dot JSP my entry point now if you have some test you can give some test commands here but right now we don't have any tests so we are skipping it we have given leave to keyword here but you can give your keywords and then you have the author name and license right now in the last video we have talks about the Express module so whenever you want to install any package or load module in your project what you do is you can just use npm install right so npm install and then the name of your package so for example Express but this time instead of pressing enter you just need to just give a save for example so just give save or same here and what this command is going to do is or what this save flag is going to do is it's going to add this Express to your package dog chasing so let's give this come on and let's see what happens so I am going to press ENTER with this saved flag right so it's going to install this Express package and we will see this node modules directory created and in your package dot jason you can see our element is added which is the expert and here is the version ox of express which is installed right so whenever you give this command for example any come install command which this favor flag is going to add it your package dot jason with the package install and the version of package installed right so now whenever you write some code in your project and whenever you want to give it to your colleague to run it you can just give this kind of project and you give your project without you know these are npm module installed right because these directories are so many directories and they take lots and lots of memory so the ideal practice is to give your project file with your package or jason without node modules folder and whenever somebody of the use npm install command this whatever is listed here is automatically will be installed in your you know project so let's say i want to uninstall this express now so i'm going to uninstall it and press enter they're going to uninstall the express module and you will see you every module will be deleted from the node modules folder but you can observe that by giving this uninstall command this dependency is not deleted here right so if this dependency is there and now so you can see right now node modules doesn't have any Express model because we have uninstalled it and this kind of you know project give it to your colleague and what he does is this colleague has just run npm install without any package name so he can just do npm install and they say npm install is going to go through your package dot JSON file i will see which package is there in your package dot JSON for example express package and the version of package is there in your Jason file package or Jason file so it's going to install automatically this package in your project so let's get NPR installed without any package name and it's going to go through your package dot jason it's automatically going to install in some moment you are going to see here Express will be installed so you can see Express is installed in your project just with this dependency right so this is my package George Jason is important so whenever you want to distribute your project the package George Jason is the for example entry point for NPM to recognize which modules are there in your project which packages are there and which version of packages are installed what are the test commands what is the entry point for your project and some description of your project and even the version right so you can see this is the expression which is installed and for example whenever you develop your project and somebody want to install your you know project as a module this will be the version which is going to be installed so this is a version same as this version right now you can go to node modules so go inside as it's more modules and we are going to go inside this Express folder here inside node module and you can see this expressed module will also have its own package of JSON file so let's open this package or JSON file and you can see there are a bunch of elements here when you go down you can see you can add to your package on different contributors and then you can see the dependencies of this express in accept for example so you can see accept modules is installed then array and this module is installed then this content description content type so one by one every module will be or whatever is listed as a dependency in the packaged on chasing pile okay so this is the importance of packaged on Jason we can go down and yes there is one element called dev dependencies which we are going to talk about in later and you can see many on compositional elements here so whenever you want to distribute your project you can see this is MIT license for express module and the maintenance of this modules with the name and the email ID of the those persons who are maintaining this money and there are some scripts so if you want to test your you know Express module they fail the command to test right so whenever we will write some more text for our module we will write this kind of command to our package dot JSON file also okay hello guys welcome to the next video on node.js tutorial for beginners in this video I'm going to show you how you can install and download node modules globally on your operating system right so till now what we have seen is how to you know install node modules locally so whenever you install a module a directory called node module is created and then your you know module is installed inside this directory right but if you want to use the node module in different project the same node module you want to use in different projects then you need to install a node module flow believe this is not a good practice unless it's you know a module which helps you to develop your you know project but sometimes some modules when you install globally helps you in the development and one such module is node mall right so first of all I am going to open the terminal inside my the studio ports so I will just write top the integrated terminal and it's going to open it and I'm going to run my app first of all so I will just write a note app dot Cheers right and this is the app we were making in the previous videos for routing yeah different requests okay so what is known one first of all so note one you can go to the NPM website and search for node 1 and node 1 allows you to you know develop your project in such a way that whenever you run your project with node Mon command after installing mode Mon it'll watch your file so it whenever you change your stuff in your project is going to you know watch for the changes and as soon as you press the Save button it's going to restart your server so right now what we do is when we make some changes for example I add a comma here I need to stop my server from here and save my code and we start myself in order to you know let the changes happen right but in the development this can be really I mean tiring to restart and stop and restart your server so node Mon whenever you install it globally will help you to watch your files if you change your file is going to restart the node server automatically so first of all let's see how we can install node Mon ok so the command to install a node 1 is npm install so just write npm install and then node mall and then give up flag g now flag g stands for global flag so whatever command or whatever module will you install with G flag it will be installed globally so it's not going to installed in your node module folder inside your you know project it's not going to install here but it's going to install globally on your operating system so whenever you want to use this node Mon module from other project also you can use it right so it's not going to be installed locally but globally so just keep this come on NPM install node Mon tree and press Enter which is going to install this node Mon if you are on Linux operating system you may have to give sudo command sudo access to install this because the directory where this global module will be installed is protected for the root user right so if you are on Linux operating system just run this command with sudo okay so one this you know module is installed you can see here it's not installed here nothing is here in my node modules right but it's installed at a specific location on Windows this location is this one so I'm going to just paste this command in the description so just copy this command and open your folder Explorer and then just paste this command like this okay in here and then press Enter it will be you know showing you the location where your global module is install so you can see node 1 is already there I have other global module called node inspector which I have already previously installed right so this is the global location your user name and in app data roaming there will be a folder called NPM slash node modules so this is a global location of node modules and every project you will make will be able to see this module right so I am going to give this command in the description so you can also see this okay so once the node one is you know installed you can see in the documentation also you can install it globally like this then you just need to write node one and the name of your app dot JS file so just write instead of node just write node Mon here okay so let me just clear it a little bit so you can see it clearly so here we are going to give node Mon command instead of node give node Mon this command node Mon and then the app dot JS file name so AB dot Cheers right and then press enter and you can see your server on the browser which we have made so we are right now in the home page and for example I want to change this routing instead of about us I want to use for example instead of about I want to just write about us here so I want to show the about page on this URL about us okay I'm going to save it and as soon as I save it you can see the node Mon server sees that I have saved a file so it has restarted the server again so you can see we starting due to changes starting node AB dot Cheers right so the server is restarted whenever I press the Save button right or for example I will just go here file and I will just press save right and you can see it's restart when I you know save my code ok and then I can go to my browser and when I just say about here instead of this about and it's going to give me 4 0 4 because I have already changed the URL to about us so I will just give up out of this it should be about up up I have given here right so I will just say about up and I can see the about page right ideally it should be like about us and I will just say save it's going to restart and this time when i refresh it now it shows me a four zero four and when I say about us it gives me about page right so this makes your development really easy when ever you want to you know frequently change your code on your project right so in this way you can install global modules on your operating system and in this way you can use known one with your node GS server and I would like of the WebEx video or no just at all for beginners and from this video we will start learning Express j/s x plus GS is one of the most popular and widely used web framework in node.js development and expressjs allows you to handle routing servers and iOS stuff really easily so let's dive into the world of Express GS so what I have done is I have created this empty folder called Express on the score test and first of all I'm going to you know initialize a empty project inside this expressed test folder so I will just CD to this folder wherever this folder is and then I am going to just use NPM in it to initialize the project right so just write npm init which is going to initialize my little champion project and I am going to leave everything as the default time I am going to press ENTER for everything it is which is going to create this package dot JSON for us which is really basic right everything is default now let's create this index dot gif file because we have defined here in the package giorgia from that index of GS is our main file right I can do it from here or I can even do it from the terminal all so now the next thing we are going to do is we are going to install NPM module for experts right so I'm going to just open the terminal once again and I will just write and game install Express right you already know this command right and I'm going to also add the flag save so it will be saved in my package dog chasing file right so I'm going to press ENTER and wait for the installation for Dantean module and in some times you will also see this dependency added to our package dot jason as well as the npm module created here the folder named MDM bodies right so you can see Express is installed now right so now let's start writing some code so to start and xpress we need to you know require this Express module so you can just write bar and then press and then Squier and you can require the express mobile right like this so this is really basic and to create an Express app you need call this expressed method which is going to give you the access to the instance which you can use to listen on any code right so I'm going to just create an app variable this is the common convention to you know use this name for Express app and then you just take this variable and call a function called Express comment okay so this app you know instance is going to allow you to create and listen on some port so you can just use app dot listen and then you can listen on any port for example I want to listen on or 3,000 it's same like using HTTP module right and then I'm going to create an anonymous function so let's create a anonymous function here and then the curly brackets and in here I can console.log something so just console dot log and let's say our server is live on port or 3000 right and then cable semicolon here and save your code and let's run our server so I'm going to just write node and then index table chairs and then press Enter is going to run our server and if you remember we have installed the node moon right so we can use node 1 here but for the first time let's just use node here and then I'm going to refresh this page and it starts listening now if you can see here it says cannot get now get is a default HTTP method the Express is going to use right now there can be 4 type of HTTP method which can be used for requesting from the client to the server and that are for example I'm going to just comment here and I'm going to just write the name of the methods right the first method is get second method is post third method is put and the fourth HTTP method is delete right so express is capable of using or doing everything get post post and delete obviously and the way we can you do it using routing is you can use you know the app instance and it's going to allow you or allow us to use a different kind of macro and the name itself can be used to you know do gulping but for this video because it's the introductions we are going to just use the get HTTP method using this app instance and later we are going to be the much complex stuff like post 410 delete request so just write up and then the name of the method for example will get and then we provide basic routing for example the basic routing is our home page for example and then we will use a anonymous function which will allow us to send us the response right so first argument here will be the request and second argument is the response so I will just say little I and then I'm going to just complete this anonymous function like this right and from here I can just use reply argument come here and then dot send and then send any our reply to the client which is requesting this get request right so this is the body you are sending so I am just going to say this is home page okay and in the same way we can you know provide multiple routes as we have done with HTTP module so let's create some more routing so the next route thing I want to create here is about and the next routing is for example for the contact and now I'm going to just write so here instead of home about and here contact okay and save and rerun my project this time I'm going to use node man so just write node Mon because the in the last video we have installed node one right and then index dot chase so we will save the time in restarting with all right and then I'm going to refresh here which is going to give me the supply which says this is homepage and let's request this IP address and about route and then it says this is about page and then contact page and now it says contact page right so everything is working and when we give any you know faulty routing it says cannot get this kind of request right so let's summarize what we have done so what we have done in this code we have installed first of all Express NPM module and then we have required this NPM module and then using this express method we have created an instance called app which can we can use to call different methods like get post put or delete and we can listen on any port using the list method and the name of the port or the number of the port which you want to on which you want to listen on right now if you can see here you may ask that we haven't provided any content typed here in the reply so the answer for this question is Express is intelligent enough to you know recognize the content type which is you know replied as a response to the client so if you pass string here Express is intelligent enough to recognize that this is a string so you don't need to provide the explicit content type like plain text or something like this with this reply right so in this way you have saved some lines of code so this was the brief introduction to experts and in the further videos we will learn more functionality about Express hello guys welcome to the next video on node.js toll for beginners and in this video we will learn how we can pass parameters and parse parameters in the URL routes using Express so in the last video we have seen how we can you know pass these kind of rules out and you know whenever you ask or whenever you give this kind of URL for example your IP address and the port and then whatever route you give according to this you know you see the response right but for example you want to give the dynamic route so for example you have some database right now we don't have database but in the future you will be using a database and you wanted to you know query the database so you want to want to pass some parameter for example you have the student database and you want the student data using his ID or his roll number or any other thing for example right so how we can pass parameters in the URL you will see in this video using it Express so what we do is we are going to I'm just going to copy the code which I've written the last video for this so just copy and paste the same code but instead of this route for example you want a student route so I'm just going to write students here and then we want to get the student according to the ID which is given in the URL okay so whenever you want to pass any parameter you give this colum before the parameter name okay so just gave the this kind of and then any you know ID or name whatever you want to give so you can give for example name here or surname or ate anything whatever parameter you want to pass and we'll be able to parse that parameter and then according to this we can give the response so for example we want to just pass this ID one which is passed using the URL route okay so in the response for example I am going to write that you have quested to see the student ID and then I am going to just give the ID now in order to pass this ID we need to take this request and then dot param and then the name of the ID for example ID itself okay and let's say the code or my node is running using the node one so I don't need to rerun it and I'm going to just go to the browser and Here I am going to just give student and then the student ID for example 12 right and you can see I think it's too dense not student so I must give here students route and you can see it gives me the response you have requested to see the student ID 12 because I have passed 12 here right I can pass any number here and it will give me that number right so once again any number and I can see this number here right in the same way I can pass the name also so instead of ID I can use name and here also name and here also name right so name name and must write name here and must save my code and then refresh my page using some name so for example mark and then refresh and now it says you are requested to see student named mark now if you will be using some kind of a database then you can you know take this name which is passed using the URL and then you can query the database on the basis of this name and then you can give your response so we will take a little example for example we have a Jason you know data so I'm going to just write for you improve our students and then this is adjacent so we have a student data Jason and then I am going to just write one and one is so roll number one or ID one so ID one is Mark for example then I D 2 is Tom and then ID 3 is for example John ok and then I'm going to just replace here name with ID and here also ID and here also ID right but we want to you know reply on the basis of the ID requested we want to gave the name right so here I will write name and the way you can do this is you can just take the students because it's it's a kind of an associative array you can take the student and then using square bracket you can you know get the value on the basis of key passed here right so I'm going to save it and then I'm going to refresh it and I'm going to just give the ID 1 for exam right it's going to give me mark right because in our Jason we have the name mark as ID 1 right for example 2 it gives me Tom and then for example right 3 it gives me John right so in this way you can pass parameters as a URL routing in Express and that's it for this video in the next video and to give you some more insights about Express so hey guys welcome to the next video on node.js troll for beginners and in this video we will talk about templating engines so so far what we have learned is how we can pass these kind of parameters to the client using express chairs so before starting templating engines I wanted to show you how we can you know transfer or show the HTML file on the browser using express chair so let's get started with that and then we will start with the templating engines so I have these two files about dot HTML and HTML or index dot HTML right so these two HTML files I have so what I am going to do is in the root flout what I want to do is I want to send the index dot HTML file right so the way you do it is you take this reply argument and then call a method called send file ok so just call a method called send file and then the name of the file which you want to send so because we are in the current directory so I am going to take the their name plus the file name so the file name I want to send is index dot HTML right in the same way you can just send the contact dot HTML or above dot HTML which we have here right so here I want to send about dot HTML and I'm going to save my code and my Norman is already running so I don't need to rerun it once again and I'm going to open my browser and I am going to refresh this and it says this doesn't exist yeah I forgot to give the four / here so I just need to give forward slash and once again I will save and I will refresh the page once again and now it says home page and let's call the about page also so just write about essays about page so this is how you can send any file to the browser using the send file method right now this is how you can send the static files but for example you want to send some parameters with the HTML file or you want to inject some parameter in your HTML file then what will you do so for that we use the templating engines and there are many engines which you can use with Express gf for example Jade or Chaz or some other engines like underscore or toffee but what we are going to use is the templating engine called ejs or embedded Jas so let's get started with ejs so what I am going to do is first of all I am going to open the website on which we can find more documentation on ejs or embedded jf so just open this website which is called embedded JS comm whose short form is ejs right and then you will scroll down you will see how you can use this EGS with your HTML and how you can embed the parameters in your HTML text or file right so for that first of all we need to add a package EGS in our project so ejs is a node package so i am going to first of all install egx package using NPM so let me clear the terminal and I will just write NPM install and I will just give the flag save also so it will be added to our package dot JSON file also and then just by the ejs ok and then press enter which is going to add this package to our project and once it's done you will be able to see this EGS is added to your package dot jason and you will also see EGF is added to your node modules also right so I'm going to just close this and close the HTML files and now the way you you know add this EGS or to use this EGF we need to add the view engine property of you need to set the view engine property to your express app so you take this app variable and then call a method call set and then we will set a property which is called view engine so just give single code and just write view engine and the next property is the name of the engine so in this case we are using ejs right so the property name is new engine and the value is ejs okay now we can use EGF in our project now by default when Express sees that the engine view engine is EDF it looks in the directory called the view ok by default it is going to look in a directory called view for the ejs files so we are going to make a directory called view so just create a directory and name it as view and inside this directory all our you know EGS files will go right so what we want is for example in the last video we have created this route for students and whenever some ID is you know passed for the student then his name is return to the for example client or to the browser right so we are going to take the same route but this time what we are going to do is we are going to you know transfer this data to the HTML file and inject in this parameter to the HTML file and then present it to the client for example okay so what I am going to do is I am going to just create a new file inside my view folder so this is my view folder and I'm going to create a student file because there is a student route so I am going to create a students dot ejs while okay so it's not going to be a HTML file but it is going to be a ejs file right but the content which you will give inside this EGS file will be the same as your normal HTML file have so for example I am going to just copy this code oh my is index dot HTML which doesn't have much it just have the body of HTML page and the main h1 tag right so I'm just going to copy and then in the student or ejs file I am going to just paste this code right now the way EGS work is we need to go to index ought GF and instead of saw using this kind of code reply or re P dot sin instead of this what we are going to do is we are going to just write re p dot render okay so here we are going to use re P dot render and then it takes two parameters so the first parameter here will be the name of your view file so in this case or view file name is students rights you can see here students dot ejs so we can just pass the you file name which is student and the extension you don't need to give it here okay just the name of the file and the second parameter it takes is the object now this object is at evil you pair so the first is the key for example we want to send the student name so I'm going to just name the key as name itself because it's a student name right and the value for it is the value which we have here so in the last video we had at this kind of you know small object and this has the key value pair so for example we requested student 1 then it's going to give us the result by returning its name student's name right so this is how you can get the student name by ID so I'm going to pass it here okay and then we don't need this thing here because you are already sending our you know parameter using this render method and to the student file now the way you add this name of parameter to your ejs file is so I'm going to go to h1 tag here and if you have seen inside in the embedded J Escom you do it something like this so you take this angle bracket start your angle bracket then this mod sine then equals and then the parameter name and then end with mod and then closing angle bracket so I can just copy this from here and I will do the same here so in your h1 tag or any tag for example it's a paragraph tag or it's any other h2 tag or other tags you can do the same so just use a tag and inside your tag just start angle bracket mod equals and then the parameter names Permenter name is name itself right so we want to pass in our Aegis fide this parameter name right so that's why I have written name here okay and then I'm going to just say everything and I'm going to rerun my app so I'm going to just use node Mon dot index dot jf and then I'm going to go to my browser and in here I am going to ask for the students file because here we have the students dot ejs right and we will give the student route here and then the ID of the students so ID of the student for example I want to give one here right and then press enter and it gives me some errors which I am going to see what the error is so the error which I can see here is it says fail to look up view students in views directory and I named my directly as view not views so this is the error you will see if you do anything wrong and by the message it looks like my directory name view is wrong we need to name it as views okay so my directory name views must be I am going to rename it as muse instead of view okay and then I'm going to refresh my page once again and hopefully this time I can see this message mark because student ID one is for mark right so we can just edit our student or EJ's file for example you have requested the student name name and then you give the student name and for for example I want to add the ID also I want to show the ID on my student a HTML file also so I will just add the parameter tag here and I will say ID and then the colon and then I will use the same method like this here and here I will just rename it as ID and I need to pass this ID parameter from here right so let's go to the index dot JS file and then here in the second element in the JSON you can just add ID and then just pass this ID there so the ID will be request dot parents dot ID right so just give colon here and then pass your ID here okay so first element of the JSON or object is name and second element of the JSON object is ID right in the same way you can add multiple object in your second parameters right so just save your code and then rerun it once again so I am going to just ask for the student one once again now it says you have a requested the student named mark and the ID is one for example I will just add two here and press Enter this time I have Tom and then the ID is two and once again for example for three then the song name and ID is three here okay so this is just the starting for the templating engine in the future videos we will see some more concepts on ejf alright welcome to the next video on node.js tutorial for beginners in the last video we have seen how we can use ejs with Express and node chest now in this video I'm going to give you some more information about EGF and I'm going to show you how we can use some control flows with your EGF templating engine and let's see how we can use it for example you want to use a for loop which we normally use on the client site using for loop we can literally any re or something like that how you can use with the help of EGS let's see so for that I'm going to modify this data structure which we have so we have the students Jason and earlier I have created something like that that it's like a key value pair but in a more complex application a student can have a name surname age or many other things right if you are querying with in the database it can have many you know data data columns and then I will you know try to emulate that thing with this Jason so what I'm going to do now is I'm going to just modify this array like this and for the student ID one I'm going to first of all add the students name here and then I'm going to add the students name so for example mark and then for example let's say what subject he has taken so I'm going to just write subjects here and then this was going to be an array okay so re you can do with square brackets and let's say this student is of some computer class or programming class so he has taken C++ Java for example and let's say he has taken see also and same we are going to do with other two students so instead of this I'm just going to copy and paste this code here and here also okay and then the student name was Tom here and the student name for the third ID is for example John Wright and the penguin language let's change the programming language so for example second student like csharp Python and let's say he likes some database MySQL and called for example he likes a Java Script and he likes so for example let's you light database and he likes itself ok so we have this kind of four data structure now for the students right now this we want to show on our client how we can do it so for that in the last video we have created this kind of you know render method and we have injected this kind of JSON there right now because we have modified our JSON data structure so here we will take the student Jason and then we will first of all find its ID so this will be this one and then dot mome is going to give you the name of the student okay and then ID will be same and let's say we want to add one more field which is subjects okay so I'm just going to copy here this it here and then subjects how we can extract the subjects let's see so I'm just going to just give the line break here and subjects will be the same as the name but instead of subjects instead of name we will just replace the name with the subject so you can do something like this now this is going to be sent as an array to the client so the client EGS file has to you know pass it or iterate over this array and then you know show the output right so here what I'm going to do is I'm going to just add a h1 tag and then I'm going to just right here for example subjects and then I'm going to add unordered list or ordered list whatever you want so for example I am going to add a unordered left here so let's add an unordered list so ul for unordered list and then we can inject a for example some JavaScript code for parsing this subjects array right so what we are going to do is we are going to write the name of the array so this time the element name is subject we want to pass this element right so we will take this element subjects and then we will iterate over it so there are many ways of iterating over array in JavaScript we are going to just use for each for example okay so just write for each and then we will just write a callback function so just write the function and then just write for example item and then just we will iterate over all the subjects and we will print it okay and don't forget to give the ending bracket and the semicolon here now the way you you know show this using ejf is the same way you used in the last video so you use this starting angle bracket and then mod symbol but for the JavaScript it won't use this kind of equals for the code right so you just need to use the for example this starting and go back at a mod and in the end the mod and then closing angle bracket right and then you need to do the same here also with the next line like this okay so you don't need to use equals here whenever you are using for example a JavaScript function and then you can normally you know add our HTML tag once again so for example this is a list item for us so I'm going to just write a list item and then we are going to just print that item so however you can now print it we just need to print the item because this item contains our you know data for example subject right so the way you do it using EGF you just need to do this angle bracket percentage equals as we have done in the last video like this right and then this would be the item right so all the items will be iterated so let's save our code and let's run it and let's see what's the result so I'm going to ask for the student one so student and then one and then refresh the page so we got the error and let's see what the error is so it says syntax unexpected token than this Colly bracket so we need to search for this kind of bracket and let's see where it is so in our function yeah so I have closed this anonymous function here become need this extra bracket here because we are closing this bracket for this function here right and this curly break is this is with this one and this is the item right there was a extra bracket here so that's why Tanner was coming let's refresh the page once again and now we see the output right let's see the output for student 2 and now he has different subjects right and let's see it output first student 3 and he has the different subjects right so in this way you can use arrays and JavaScript code with ejs so I hope you have enjoyed this video please recommend subscribe and bye for now
