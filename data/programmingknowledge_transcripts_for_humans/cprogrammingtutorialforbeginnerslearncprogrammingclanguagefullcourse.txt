With timestamps:

00:00 - c programming language is considered as
00:02 - the mother of all programming languages
00:04 - present in the software industry
00:07 - anywhere you go
00:08 - c programming language is the most basic
00:10 - and very important aspect
00:12 - which the recruiters are looking for hi
00:15 - this is john from programming knowledge
00:16 - and welcome to this video tutorial
00:18 - series
00:19 - where you will learn how to go about
00:21 - programming in c
00:22 - language in this tutorial we will
00:24 - discuss mostly the important parts of c
00:27 - programming language so these are the
00:29 - topics that are included in our c
00:31 - programming language tutorial series so
00:34 - firstly we're going to discuss the
00:35 - history of
00:36 - c and then to be followed by the
00:38 - installation of c so
00:40 - i'm going to guide you through all the
00:41 - steps needed to start about
00:44 - programming in c programming language
00:47 - to be followed by data types and
00:48 - variables of course we're going to
00:50 - discuss
00:50 - the importance of data types and
00:52 - variables in c
00:54 - and to be followed by c tokens
00:58 - to be followed by preprocessor
01:00 - directives and of course we're going to
01:02 - learn
01:03 - the how to write our first program in c
01:05 - programming language
01:06 - and of course to be followed by control
01:09 - structures
01:10 - so as we all know if you are coming from
01:13 - other
01:13 - programming language you already have
01:16 - knowledge on control structures
01:18 - so we're going to discuss that right
01:20 - here and then of course loops
01:23 - we're going to discuss loops and then
01:25 - pointers
01:27 - and to be followed by functions and then
01:30 - we're going to learn about escape
01:33 - sequence in c
01:35 - and after that one will be the data
01:37 - structures
01:38 - and of course we're going to discuss
01:41 - strings
01:43 - followed by structures and union to be
01:45 - followed by memory allocation
01:48 - and lastly is the sorting algorithms
01:51 - so we're going to discuss that also in
01:53 - this particular tutorial series
01:56 - so now let's talk about the history of c
01:59 - language
02:00 - so history of c language is interesting
02:02 - to know
02:03 - here we are going to discuss a brief
02:05 - history of the c language
02:07 - c programming language was developed in
02:09 - 1972 by dennis ricci
02:11 - at bell laboratories of acnt or american
02:15 - telephone and telegraph located in the
02:18 - usa
02:19 - dennis ricci is known as the founder of
02:21 - the c language
02:23 - it was developed to overcome the
02:24 - problems of previous languages such as b
02:27 - dcpl and other languages initially
02:31 - c language was developed to be used in
02:32 - unix operating system
02:34 - it inherits many feature of previous
02:36 - languages such as
02:37 - b and bcpl
02:41 - c was originally first implemented on
02:43 - the dec pdp 11 computer
02:46 - so pdp 11 is a series of 16 bit mini
02:49 - computers
02:50 - sold by digital equipment corporation
02:52 - from 1970
02:54 - into the 1990s c programming language
02:57 - is known for its flexibility and
02:59 - versatility
03:00 - allowing maximum control with minimal
03:03 - commands
03:05 - so now let's talk about the features of
03:07 - c language
03:09 - c programming language is the widely
03:11 - used language
03:13 - and it provides many features that we're
03:14 - going to discuss in this particular
03:17 - video number one it is simple
03:20 - c is a simple language in a sense that
03:22 - it provides a structured approach
03:24 - to break the problems into parts
03:28 - number two machine independent or
03:30 - portable so unlike assembly language
03:33 - c programs can be executed on different
03:36 - machines
03:36 - with some machine specific changes
03:39 - therefore
03:40 - c is a machine independent language
03:43 - three mid-level programming language
03:46 - although c is intended to do a low-level
03:49 - programming
03:50 - it is used to develop system
03:51 - applications such as kernel driver
03:53 - and others it also supports the features
03:56 - of high programming language that is why
03:58 - it is known as
03:59 - mid-level language number four
04:03 - structured programming language c is a
04:05 - structural programming language in a
04:07 - sense that we can break the program into
04:09 - parts using functions
04:10 - so it is easy to understand and modify
04:13 - functions also provide
04:14 - good reusability
04:17 - number five reach library see language
04:20 - provides a lot of built-in functions
04:23 - that make the development faster number
04:26 - six
04:26 - memory management it supports the
04:29 - feature of dynamic memory allocation
04:31 - in c language we can freely allocate the
04:34 - memory at any time by calling the free
04:36 - function
04:37 - number 7 speed the compilation time and
04:41 - execution time of c language is fast
04:44 - since there are lesser built in
04:45 - functions and hence
04:47 - the lesser overhead number eight
04:50 - pointer c provides the feature pointers
04:53 - we can directly interact with the memory
04:56 - by using the pointers we can use
04:58 - pointers for memory
05:00 - structures functions array and
05:03 - others number nine recursion
05:07 - in c we can call the function within the
05:09 - function
05:10 - it provides code reusability for every
05:13 - function
05:14 - recursion enables us to use the approach
05:16 - of backtracking
05:18 - number 10 extensible
05:22 - c language is extensible because it can
05:24 - easily adapt
05:25 - new features now that we're done talking
05:28 - about the features
05:30 - and history of c programming language we
05:32 - can now go to the installation
05:34 - of c in windows operating system
05:37 - now there are multiple ways we can
05:39 - install c programming language in our
05:42 - computer system
05:43 - so the most basic way is to install
05:46 - turbuc
05:47 - in our computer system also if you're
05:50 - familiar with the eclipse
05:52 - ide you can directly download gcc
05:55 - compiler
05:56 - and include c nature to our eclipse ide
06:00 - and continue working on executing c
06:03 - programs
06:04 - as i've said guys there are multiple
06:05 - ways of installing c program into our
06:08 - computer system
06:09 - and one way of doing it is to install
06:11 - torb turbo c plus plus
06:13 - or you can use the eclipse ide and then
06:17 - include the gcc compiler and also you
06:20 - can do it online there are more
06:22 - there are many platforms that can help
06:24 - you develop c
06:25 - program online and then one way of doing
06:29 - it
06:29 - is also installing
06:32 - code blocks so if you go to your browser
06:35 - and try to search for code blocks
06:37 - and then this is the first link that you
06:40 - will get
06:42 - and it will redirect you to
06:44 - codeblocks.org
06:45 - and code blocks is an ide
06:49 - that will help us to write programs
06:51 - especially
06:52 - for c c plus plus and fortran
06:55 - ide the good thing about code locks is
06:58 - it is a
06:59 - cross platform in open source meaning we
07:02 - can use it freely
07:04 - to develop our c programs so the first
07:07 - thing that we're going to need guys
07:08 - is to download this of course in order
07:11 - for us to install
07:12 - and start writing or see programs so
07:16 - there are two options here we can
07:18 - download it from this
07:20 - link and of course we can also download
07:22 - it from this particular
07:25 - link here so let's just try this one the
07:28 - upper one
07:29 - and then there are options to
07:32 - download the binary release we can
07:35 - download the source code
07:37 - and we can also retrieve source code
07:39 - from svn
07:41 - okay the first thing that we're going to
07:42 - need now is to download the binary
07:44 - release okay you could click on that
07:47 - and here we can see that we can install
07:50 - it on windows xp
07:52 - vista windows 7 windows 8 and
07:55 - windows 10 and we can install it also in
07:59 - linux operating system be it 32 or 64
08:03 - bit
08:04 - and also you can use it on mac os
08:07 - x and because we're using windows
08:10 - operating system
08:11 - for now so let's just click on that
08:14 - and then here we can see all the options
08:16 - or all the links
08:18 - that we can download the
08:22 - code blocks we can download only the
08:24 - setup we can only
08:26 - or we can also download the nand admin
08:29 - no setup and then we can also code
08:32 - blocks with
08:33 - this main w setup so
08:36 - if you want you can download this
08:38 - particular one
08:40 - code blocks and then the current version
08:42 - is 17 point child
08:43 - bing w dash setup that xesa
08:47 - and then we can download it from
08:49 - sourceforge or
08:51 - fast hub so try that
08:55 - and then let's just wait for the
08:57 - download to complete
08:59 - in order for us to install this
09:00 - particular ide
09:02 - and then after installation of course we
09:04 - can write
09:05 - our first program in c
09:09 - programming language so currently it is
09:11 - 86.2 mb and then we're just going to
09:14 - wait for a few seconds
09:15 - for the download to complete and i think
09:19 - it won't take that much time
09:22 - and we're halfway there there you go
09:26 - so we can just install this particular
09:28 - ide so
09:30 - click on this
09:37 - and yes
09:44 - next i agree
09:47 - and then we don't want to touch anything
09:50 - here
09:51 - if you are an advanced user you can try
09:55 - to modify the installation but for now
09:57 - since we're
09:58 - beginners let's try to click on next and
10:01 - then install this is the
10:02 - destination folder and then install
10:17 - so there you go installation is complete
10:20 - so do you want to run code blocks now
10:22 - of course yes
10:28 - so gnu's gcc compiler has been detected
10:32 - so that's okay
10:38 - and file associations we are being asked
10:41 - here if you want to associate
10:43 - cnc plus plus files for this particular
10:46 - ide so
10:48 - yes associate code blocks with c or c
10:50 - plus plus files and then
10:52 - okay so there you have it we now have
10:54 - the installation of code blocks and
10:57 - so for this particular video guys we're
10:59 - going to
11:00 - talk about our first
11:03 - [Music]
11:04 - program or c program so basically we
11:08 - also discuss
11:08 - how to install code blocks and here you
11:11 - can see
11:12 - i'm using code codeblocks to create our
11:15 - c
11:15 - program okay so here we have the
11:19 - basic basic program or basic c program
11:24 - okay and before that we
11:27 - or i'm going to show you how to create
11:28 - project here
11:30 - in codeblocks ide so the first thing
11:33 - that we're going to need
11:34 - is to create a project so instead of
11:37 - using this particular
11:40 - file test that c we're going to close
11:43 - that
11:43 - and then create our new project so
11:47 - let's go to file and then new
11:50 - and then there's an option here for
11:52 - creating our project
11:54 - so basically all we have to do is select
11:58 - here the type of application that we
12:01 - want so
12:02 - for example we're going to just
12:05 - create a basic
12:08 - application or basic c program so let's
12:10 - try
12:11 - to find that here in this options
12:15 - so we're going to select the first one
12:17 - which is the console application
12:20 - because we're going to start with a very
12:23 - basic application
12:25 - say go and then x
12:29 - so it should be c
12:32 - project title will be programming
12:36 - knowledge tutorials
12:40 - and then let's just uh select
12:43 - the actual directory to you a directory
12:46 - to use
12:47 - so let's just say the documents and then
12:50 - we're going to
12:51 - um create a new file here
12:54 - or a new directory see projects
12:59 - then okay and then next
13:02 - and then we don't want to mess around
13:05 - here
13:06 - so just basically finish the
13:09 - research for now so finish so we have
13:12 - here our project
13:13 - programming knowledge tutorials and we
13:16 - have here the sources
13:17 - and by default it created
13:20 - this particular file main.c
13:24 - so as you can see we have here some
13:26 - parts
13:27 - or pre-populated code for us
13:31 - so we have the very basic structure of
13:35 - a basic c application so if you try to
13:38 - run this
13:40 - let's just let's just try to run this
13:42 - first before we go any further with our
13:45 - tutorial so let's just run and then it
13:49 - uh it will ask to build
13:52 - our project so of course yes
13:55 - and then there you go you can see here
13:58 - uh the hello world
14:00 - tax so basically what this program
14:04 - is doing is just printing hello world
14:06 - string or text
14:07 - into our uh monitor or this particular
14:10 - console
14:11 - so press any key to continue
14:16 - or you can just close this particular
14:19 - command prompt
14:20 - okay so uh let's
14:24 - uh if you want to make the text or the
14:26 - code bigger
14:28 - you can just control scroll by using
14:31 - your keyboard and your mouse of course
14:34 - so i'm just going to make it bigger so
14:36 - that you will uh you will be able to see
14:38 - what uh what i am doing here with our
14:42 - project so first i'm going to discuss
14:45 - first the
14:46 - [Music]
14:47 - parts of this particular program or
14:49 - basic program
14:50 - c so basically we have the lines
14:54 - one and two so basically it is the
14:58 - like import statement of this particular
15:02 - program
15:03 - so it is basically uh saying that we
15:05 - need
15:06 - this files and we need to include this
15:09 - in our
15:10 - new program or new file main.c
15:14 - so we have here the include
15:18 - and then stdio.h
15:21 - and include std
15:24 - lib.h so basically these are
15:27 - header files okay so these are files and
15:31 - we need
15:32 - uh functions from those files so for
15:34 - example we have here
15:35 - the functions printf here
15:39 - so this particular function is inside
15:42 - or can be found in stdio.h
15:46 - file okay and
15:50 - here we also have the uh in
15:53 - main as you can see here so the in
15:56 - main is the main function this is the
15:59 - entry point
16:01 - of every program in c language so
16:04 - in normal terms it is basically
16:07 - the entrance and every time we run our
16:10 - project
16:11 - it will try to find the main function
16:14 - of our uh
16:17 - project so it should have like
16:20 - one main function for in in order for us
16:24 - to
16:24 - run our program so in main
16:28 - so basically it says that the return
16:31 - type is an
16:32 - int and then everything inside this
16:35 - curly braces open and
16:37 - close curly braces is part of this
16:40 - particular function
16:41 - main and we have two lines here so
16:44 - printf
16:45 - and then semicolon and then return zero
16:50 - and then semicolon so these are the
16:52 - lines of
16:53 - our uh in main function
16:57 - so in order to terminate a line you need
17:01 - to add semicolon at the end of that
17:03 - particular line
17:04 - so just like this here and of course
17:07 - just like right after this return
17:10 - zero so now i'm going to explain
17:13 - what this function does so the printf
17:16 - is a function used to print data on the
17:19 - console
17:21 - so basically we're just selling our
17:23 - program to
17:24 - output hello world and then
17:27 - it should return zero so
17:31 - return zero statement uh it means that
17:34 - the return execution status of this
17:38 - particular program
17:40 - and the zero value is used for
17:43 - successful
17:43 - execution and one for unsuccessful
17:47 - execution so let's try to
17:51 - run this again anyway you can just
17:55 - run or build and run your project or you
17:58 - can
17:58 - just run it by pressing this particular
18:02 - run button
18:03 - okay so as you can see here we have this
18:06 - particular
18:09 - string or output hello world and if you
18:11 - try to
18:12 - add a new line for our program
18:16 - printf and then
18:19 - everything that we want to display it
18:21 - should be inside the
18:22 - double quotes okay c
18:26 - programming is awesome
18:30 - okay and then of course we need to
18:34 - end this uh and this particular line by
18:36 - adding the semicolon at the end
18:39 - and then save you can just build and run
18:44 - so as you can see here hello world and
18:47 - then
18:47 - ce programming is awesome so
18:51 - notice that we have added this
18:53 - particular character here backslash
18:56 - n so we're just telling the program to
18:59 - add
19:00 - another line or to go on to a new line
19:03 - after printing the hello world or the
19:05 - hello world
19:06 - string this one and let's try this
19:10 - also for this particular second line
19:14 - and build and run okay so as you can see
19:18 - after uh printing the c programming is
19:21 - awesome it added a new line
19:23 - here which you can see as a space
19:26 - between c programming awesome text and
19:28 - process return
19:30 - zero so there are others
19:34 - there are other texts or other
19:37 - keywords also for this instead of using
19:42 - slash or backslash n you can use
19:45 - box slash t for tab
19:48 - or for tabbing so let's try that save
19:52 - and then build and run so as you can see
19:56 - there is a significant space between
19:59 - programming
20:00 - word and the word is
20:03 - so this will come in handy if you're
20:05 - trying to work with like
20:06 - uh tabular data so
20:10 - uh backslash t will be uh like
20:13 - very useful for you because it will
20:15 - format the
20:16 - columns for you and
20:20 - as i've said it will be a great help so
20:24 - the next uh thing that we want to talk
20:26 - about is the order of execution
20:29 - in every c program so basically if we
20:32 - have like
20:33 - four lines here to print something
20:37 - in our screen like this
20:41 - so as i've said in c
20:44 - program it is executing in order
20:48 - line by line so this will be the first
20:51 - one
20:51 - or the first line to be executed and
20:54 - then the second line to be executed
20:56 - the third line to be executed and the
20:59 - fourth line to be
21:00 - executed so so for example try to
21:04 - make this two
21:07 - and then three where i mean three
21:12 - and then four let's try to build and run
21:15 - this
21:18 - so we have the output as um
21:21 - hello world hello to hello number three
21:25 - and hello number
21:26 - four so basically all the statements are
21:30 - executed in order line by
21:33 - line so so for example we have or
21:36 - we want to draw something in the screen
21:40 - so like we want to draw a
21:43 - triangle
21:48 - so here and then another one here
21:55 - and then another one just to
21:58 - show you these uh sequence of execution
22:02 - of this particular c program
22:05 - so right here another
22:09 - [Music]
22:10 - slash and then here
22:16 - and maybe here
22:20 - and another one another line or
22:23 - vertical line and also here
22:26 - and we need to add the
22:30 - new line or line break for this
22:34 - print statements and we can make
22:37 - this or i'd like the
22:41 - underscore and let's try to build and
22:44 - run this
22:45 - and you can see we have the triangle
22:47 - displayed
22:48 - in our screen and that means that the
22:51 - lines
22:52 - has been printed or has been executed in
22:55 - order
22:56 - line per line so if we try to
22:59 - make changes and instead of placing it
23:03 - here let's space it
23:06 - before printing the first line so
23:10 - the output will be like this a funky
23:12 - looking
23:13 - shape that's because we
23:16 - execute the first statement to have like
23:20 - the
23:20 - forward slash the underscore and then
23:23 - the vertical
23:24 - and that's why we have an output like
23:26 - this
23:27 - so just bear in mind that in every
23:30 - program
23:31 - it is executing line per line
23:34 - okay so now let's try to discuss
23:37 - placeholders okay
23:40 - placeholders for different data types
23:44 - so there are in programming there are
23:46 - types or data types that we want to work
23:48 - with
23:49 - so for example string we have characters
23:52 - we have integer we have float and
23:55 - other data types so for example you want
23:59 - to display
24:01 - string you just have to like say hello
24:04 - world
24:06 - and this is this is a string
24:13 - let's just remove this okay save and
24:17 - run and build so we now have like
24:20 - the output of our programming low world
24:23 - this is a string
24:25 - but if you want to try or if you want to
24:28 - print a number so so for example
24:33 - 32 so let's try this
24:40 - run and build and as you can see
24:44 - we have um return negative 10
24:47 - 7 3 4 8 1 or
24:51 - 1 8 and 1 9. so basically what this
24:54 - means is that there's
24:56 - something wrong with our program because
24:58 - as i've said before
25:00 - zero it should be the standard or the
25:03 - return if the program
25:07 - uh runs smoothly or there's no there's
25:10 - no problem
25:11 - while running our program so basically
25:14 - here we have negative so it means we
25:16 - have problems
25:18 - right and we can see here that
25:21 - um note expected constant char
25:24 - but argument is of type in as you can
25:27 - see here
25:28 - so uh basically we cannot directly
25:31 - display number by using this so we can
25:35 - use placehold a placeholder for that
25:38 - so this will be for our placeholder
25:42 - so instead of using directly 32 here
25:46 - we can say
25:49 - percent and then d
25:53 - so d is for integer
25:57 - so if you want to display integer you
25:59 - might want to
26:00 - uh use the percent d placeholder
26:04 - and then inside this printf statement
26:06 - you need to add
26:07 - the comma and then of course the value
26:10 - that
26:11 - you want to be printed so percent d
26:15 - and then comma and then
26:18 - the actual value that you want to be
26:20 - printed so let's try that
26:23 - build and print or build and run and as
26:26 - you can see here
26:27 - process return 0 and then we have here
26:30 - the value
26:31 - 32 so let's try
26:35 - this one more time backslash n
26:38 - build and run and here we can see uh we
26:41 - can see clearly
26:42 - what is happening here so hello world
26:45 - this is a string
26:46 - and the value 32
26:49 - so that's the purpose of percent d
26:52 - is a placeholder for an integer value
26:56 - another one we have for
27:00 - large integers so for example there are
27:02 - like
27:03 - a very large number a very large integer
27:07 - the keyword for that or the placeholder
27:10 - for that
27:10 - is ld which stands for
27:15 - large integer okay
27:18 - so for example we have like um
27:22 - very big integer right here okay so
27:26 - that's the placeholder percent ld
27:28 - and then of course we also have four
27:32 - decimal values or float values
27:35 - so for example you want to say 32.5
27:40 - or yeah 32.5 this is for
27:44 - again decimal or
27:48 - float value okay
27:53 - let's just say float value here so
27:56 - percent
27:57 - f percent d for integer percent
28:00 - ld for large integer percent f for float
28:04 - number
28:05 - and another one for
28:09 - large float
28:12 - okay so this will be for large
28:16 - float and then another one for
28:20 - so for example you want to display a
28:22 - character
28:24 - and you want
28:27 - to display like letter a
28:31 - so the placeholder for that is percent c
28:35 - and then the actual value that should be
28:39 - uh type in inside the single code
28:43 - characters so this will be for a char or
28:46 - character
28:48 - and then another one is for the string
28:51 - so so for example you want to display
28:53 - hello world
28:54 - this is a string and then
28:58 - you want to display that you can also
29:00 - use percent
29:01 - s for the placeholder for that
29:04 - so you can say
29:08 - hello from printf
29:12 - okay so this will be for our
29:15 - string so basically string is just a
29:19 - series of characters meaning uh string
29:22 - is just composed of several characters
29:24 - so for example this one
29:26 - h-e-l-l-o and
29:28 - f-r-o from and so on so you get the idea
29:33 - but basically all these placeholders can
29:36 - be used to display
29:37 - different values or different types of
29:40 - values
29:41 - the integer large integer float
29:45 - large float character and string
29:48 - so let's try to display this and maybe
29:52 - add
29:52 - the backslash n here and here
29:55 - also here here
29:59 - here and here so
30:04 - build and run there you go
30:07 - you can see here the output of our
30:10 - program
30:12 - and we did not
30:15 - specify directly the values of this um
30:19 - figures so instead we're using printf
30:22 - and then the placeholder
30:23 - so for example percent d for integer
30:26 - percent d for large integer and so on
30:29 - and in this tutorial guys i want to talk
30:31 - to you guys about
30:32 - variables in c now when we're using c
30:35 - programming
30:36 - language a lot of times we're going to
30:38 - be dealing with data
30:40 - so there's going to be different data
30:41 - values or different
30:43 - information that we're going to want to
30:44 - keep track
30:46 - and use inside of our programs
30:49 - and sometimes it can be difficult to
30:51 - maintain and keep track
30:53 - of all that data and that's where
30:55 - variables come in
30:57 - so basically variable is essentially a
30:59 - container
31:00 - where we can store different pieces of
31:02 - information
31:04 - so different data values we could sort
31:06 - of things like
31:07 - numbers or texts or characters
31:10 - and these variables make it a lot easier
31:13 - for us to keep track
31:14 - and manage all the data in our c program
31:18 - so i'm going to show you guys basically
31:19 - how variables work
31:21 - or how variables can be useful and how
31:24 - we can use them
31:25 - in rc programs but down here i have a
31:28 - very basic
31:29 - program so i'm basically
31:33 - just printing out a little story so it
31:35 - says there once was
31:37 - a man named mike he was 50 years old
31:41 - he really liked the name mike but did
31:43 - not like being
31:45 - 50. so this is a simple program we're
31:48 - just printing out a bunch of different
31:49 - lines of text
31:50 - and then when i run this program
31:56 - you'll see we print out the actual story
31:58 - so over here we have the actual
32:01 - uh story and this is great okay
32:05 - but let's say that i'm reading through
32:08 - my story
32:09 - and i'm reading through my program and
32:11 - i'm thinking to myself
32:14 - i think i want to change the character's
32:16 - name
32:17 - so instead of calling the character mike
32:19 - why don't we call him like
32:21 - john in order to make that change so i'm
32:24 - gonna have to look through my entire
32:26 - program
32:26 - and find every place where we mention
32:30 - the character's name
32:31 - so right here is one so change
32:35 - it to john
32:41 - and remember keep looking here and
32:44 - there is another one
32:49 - so we'll change this to jen right so i
32:51 - had to manually go through and change
32:53 - every instance of the character's name
32:55 - to
32:56 - john so let's say that's okay that's uh
32:59 - that sounds
33:00 - pretty good but maybe i'm thinking i
33:03 - want to make the character
33:05 - a little bit younger so instead of like
33:08 - 50 years old so
33:11 - let's change it to maybe 30
33:15 - 30 years old instead of 50 years old
33:18 - okay we're going to change hit here
33:21 - he was 30 years old and also
33:25 - in here last line of our story
33:29 - so that's 30 instead of 50.
33:32 - if i was to run this program then all
33:35 - that information will be updated
33:37 - and will now have new story
33:41 - okay so here's the problem though i'm
33:44 - dealing with a very short story so i
33:46 - mean this is
33:46 - four lines we only mentioned the
33:49 - characters
33:49 - age and name only twice
33:53 - but imagine if i have if i was writing
33:56 - out
33:56 - a huge c program that had hundreds of
34:00 - lines in the story
34:02 - so story had hundreds of lines and maybe
34:04 - we mentioned the characters
34:06 - name hundreds of times they mentioned
34:08 - their age
34:09 - hundreds of times and if we wanted to
34:13 - change the character's
34:15 - age or name i would have to go through
34:18 - and manually change it every single
34:20 - location
34:21 - and that would take forever and it would
34:24 - be a huge
34:25 - job for us to change all the instances
34:28 - of
34:29 - the name of our character and also for
34:31 - our
34:32 - for the age of our character so
34:34 - basically that's not a good way for us
34:36 - to manage and maintain the data for our
34:37 - programs
34:38 - okay uh basically we have two pieces of
34:40 - data that we're working with
34:42 - and consistently in this program the
34:45 - characters
34:46 - age and the characters name
34:49 - what i want to show you guys now is how
34:51 - we can use variables to better keep
34:53 - track
34:54 - i mean manage these pieces of
34:56 - information
34:57 - so remember a variable is basically just
34:59 - a container
35:00 - where we can store some data so i want
35:03 - to create two variables which will store
35:05 - the character's name
35:06 - in the character's age and i'll show you
35:09 - guys
35:10 - how this can make our program a lot
35:12 - easier to manage
35:14 - up here before the print statement
35:18 - i'm just going to make a new line and
35:21 - i'm going
35:22 - i'm going to come over here and i'm
35:23 - going to create a variable now whenever
35:25 - we create a variable in c we have to
35:27 - see a couple of a couple pieces of
35:29 - information the first thing we have to
35:31 - tell see
35:32 - is that what type of information we want
35:35 - this variable to store
35:37 - now i'm going to get into the different
35:39 - data types that we can represent and see
35:41 - more in the next tutorial
35:43 - but for now just know that there's a
35:44 - bunch of different types of data
35:46 - that we can store and see can see
35:50 - we can sort things like numbers
35:52 - characters
35:53 - we can store text we can start decimal
35:55 - numbers all sort of
35:56 - all sorts of stuff like that in our case
35:59 - i'm going to store the character's name
36:01 - in the characters
36:02 - uh age basically just a collection of
36:05 - characters so in order to create this
36:07 - variable the first thing
36:08 - that i have to see that i want to create
36:12 - a variable that's going to store
36:14 - some characters and to do that i'm just
36:17 - going to type
36:18 - out char here just like that
36:22 - and basically telling c
36:25 - we're going to store characters in inst
36:27 - inside of this variable
36:29 - so after we type out chart i want to
36:32 - type the name of the variable that i
36:34 - want to create
36:35 - remember that a variable is a container
36:38 - and
36:38 - it's a good idea for us to give these
36:40 - containers
36:42 - descriptive names and those names will
36:45 - basically let us know
36:47 - what that variable is storing inside of
36:49 - it so i'm going to call this
36:51 - character name
36:56 - now what i want to do is basically i
36:59 - want to store multiple characters
37:01 - so over here we're telling c that
37:04 - i want to store a character but in c we
37:07 - can also store instead of just like uh
37:10 - instead of just storing like one single
37:12 - character we can store a bunch of
37:14 - characters
37:15 - and that would be kind of like you know
37:18 - name
37:19 - so there's like four characters in here
37:23 - so in order for us to store a bunch of
37:25 - characters inside of this particular
37:27 - variable
37:28 - after we type the character variable
37:30 - name
37:31 - we're gonna have to make an open and
37:33 - close square brackets
37:35 - and that's gonna tell c that we want to
37:38 - store a bunch of characters
37:40 - inside of this part particular variable
37:43 - so char character name open and close
37:46 - square brackets
37:48 - um i'm gonna set this equal to something
37:50 - so i'm i am essentially assigning a
37:52 - value to this particular variable
37:54 - and i'm just gonna make an open close
37:57 - quotation marks
37:58 - so equals and then quotation marks and
38:01 - inside of here we're gonna type out the
38:03 - value that we want to store
38:05 - so in my case i'm just going to store
38:07 - the character's name
38:08 - which is john and then as always in c
38:12 - we're going to have to end this off with
38:14 - a semicolon
38:16 - so all right uh basically what i did
38:19 - here was i created a variable and i told
38:23 - c that i want to store
38:24 - in the variable i wanted to store a
38:27 - character and i
38:28 - gave this variable a name character name
38:32 - and then i use this open and close
38:34 - square brackets
38:37 - to tell c that i wanted to store
38:40 - a bunch of characters not just one
38:44 - now what we can do is we can make
38:46 - another variable to store
38:47 - the character's age so in this case
38:52 - we're gonna do something similar but
38:54 - we're gonna want to store a number
38:56 - and there's a bunch of different ways
38:58 - that we can store numbers in c
39:00 - but for our purposes we're starting age
39:03 - so we're going to use something called
39:05 - an integer
39:06 - and an integer is basically just a whole
39:10 - number so i'm just going to type out
39:12 - in here in and that basically stands for
39:16 - integer
39:18 - and now we're going to give this name
39:21 - so i'm going to call this character age
39:28 - and i'm gonna set this equal to a number
39:30 - so
39:31 - in our story the age is 35 so i'm just
39:34 - gonna
39:35 - type out 35 there and now we can again
39:39 - end this off with a semicolon
39:42 - so i have here two variables this one
39:45 - storing the
39:46 - character name and
39:49 - this one is for our age
39:53 - now the question becomes how we can use
39:56 - this inside our program
39:58 - well basically what we can do is we can
40:01 - print them out alongside with
40:03 - with this text and we can actually use
40:05 - this printf function
40:07 - in order to do that so i'm going to show
40:09 - you guys how to do this
40:10 - and then we're going to talk about it so
40:12 - basically i'm going to go over here
40:15 - and as you can see we have here the
40:17 - character name which is john
40:20 - okay so we can replace this with percent
40:23 - s so percent s is basically
40:26 - a placeholder so after this
40:30 - um we're going to add comma here
40:33 - and then we're gonna add the character
40:37 - name variable so basically we're telling
40:40 - c
40:41 - that we're going to print this
40:44 - particular text
40:45 - and percent s is just a placeholder
40:48 - that will auto automatically be replaced
40:52 - by the value of our variable character
40:54 - name
40:55 - so we have uh the
40:59 - first instance of the character name
41:02 - and then right here we also
41:06 - have we also need to replace this with
41:09 - percent s and then add comma and then
41:12 - character name because we want to
41:14 - replace that with our
41:16 - value of our variable character name
41:18 - which is john
41:20 - and of course like
41:23 - here we also need to replace this
41:27 - with the actual value of our character
41:31 - age
41:31 - so what we can do here is just we can
41:35 - add percent d so percent t is also a
41:38 - placeholder for
41:40 - printing the integer
41:43 - uh so this is like integer
41:47 - integer character h equals 35 and then
41:49 - percent d
41:51 - and then we're gonna add comma here
41:55 - so and then character h
41:58 - the same thing here character age
42:03 - and then we're going to replace this
42:05 - with percent
42:07 - the placeholder for integers so if we
42:10 - try to run our program
42:11 - so let's do that build and run and
42:16 - we will we should have the
42:21 - so we have a process return so i think
42:23 - we
42:24 - have something where we have an error
42:27 - with our program so let's try to debug
42:29 - this
42:31 - so warning format as expects per uh
42:34 - argument type of character
42:37 - but argument two was typed in that's
42:41 - basically because we didn't add the
42:44 - square brackets there so build and run
42:49 - so there you go uh we have now the
42:52 - output there one
42:53 - other ones was a man named john he was
42:56 - 35
42:57 - years old he really liked the name john
43:00 - but did not like being 35
43:01 - and of course every time you can if you
43:03 - want to change something with
43:05 - this story so for example instead of
43:08 - john we
43:09 - will say michael
43:12 - and we can change also the age
43:16 - like 40 and then
43:22 - exceed that and then build and run
43:25 - so as you can see here we now have the
43:28 - updated
43:29 - um story so michael and then 40 years
43:32 - old
43:33 - so the good thing about variable is that
43:35 - we can reuse this
43:37 - into our entire program so we have
43:41 - every time we have changes here all the
43:43 - variables or all the value
43:46 - should be reflected in our the rest
43:49 - on our program so in in our
43:53 - case we have updated all the values for
43:56 - our story
43:57 - and in this video guys we're gonna talk
43:59 - about variables
44:01 - and of course we will have a deeper
44:04 - um discussion on how to declare
44:07 - initialize
44:08 - and assign values to our variables
44:12 - so basically guys like most programming
44:15 - languages c
44:16 - uses in processes variables and
44:19 - in c variables are just like human
44:22 - readable names
44:23 - for the computer's memory addresses used
44:26 - by a running
44:27 - program so basically guys the advantage
44:30 - of using variable
44:32 - is it is making our life easier to store
44:37 - read and change the data within the
44:40 - computer's memory
44:41 - by allowing the or by allowing us to
44:45 - associate easy to remember labels for
44:47 - that particular
44:49 - memory addresses so at first
44:53 - it is easier to imagine that variables
44:58 - are just placeholders for values
45:01 - much like in mathematics so you can
45:04 - think of a variable as
45:06 - a as being equivalent to its assigned
45:08 - value
45:09 - so for example if you have a variable
45:12 - that is i
45:13 - and then initialize or set equal
45:17 - to for example four so
45:21 - by that you can say that i
45:25 - plus one will be equal to
45:29 - five so there you go so
45:34 - uh now let's talk about how to
45:37 - declare a certain variable in rc program
45:41 - so basically all we have to do guys so
45:43 - for example
45:45 - if we try to declare an int
45:48 - or is it for example in and then
45:52 - some number okay
45:55 - and then you have to end it with a
45:57 - semicolon that
45:59 - signifies that it is the end of this
46:02 - particular
46:03 - line so this statement
46:08 - tells the compiler to create a variable
46:11 - called sum number and associate
46:14 - it with a memory location on the
46:17 - computer
46:18 - so we we're also telling the compiler
46:20 - that the type of data that will be
46:22 - stored
46:23 - at that address and in this case it is
46:25 - the int
46:27 - we have to remember also that in c we
46:30 - must specify the type of data that a
46:32 - variable will store because
46:34 - it will tell the computer like how much
46:37 - the total memory to set aside for that
46:39 - particular
46:41 - variable or set of data something like
46:43 - that now
46:44 - you can also declare
46:48 - multi variables in one statement just
46:51 - say for example
46:52 - in n1 and then you have like
46:56 - n2 and then n3
46:59 - and then end it with a semicolon
47:03 - to signify that it is the end of this
47:06 - particular
47:07 - line so that's basically how to declare
47:10 - a
47:10 - variable so you can do it like this and
47:13 - if you have like multiple variables to
47:15 - declare you can just do it like this for
47:17 - as long as it is the same type
47:20 - okay so in n1 and then n2
47:23 - and n3 so we're just telling the
47:25 - compiler to declare this particular
47:27 - variable
47:28 - and all of this variable um
47:32 - the type is int okay and
47:35 - of course you can assign a value to that
47:39 - particular variable later on using a
47:41 - statement like
47:42 - so for example sum
47:47 - some number equals to 3
47:50 - okay so basically this is the
47:53 - declaration
47:54 - of our variable sum number but this this
47:57 - is the assigning of
47:58 - value so we're just basically assigning
48:02 - value three to our variable
48:05 - sum underscore number so the assignment
48:09 - of a value to a variable is called
48:11 - initialization so we're just basically
48:13 - initializing the value of this
48:15 - variable some number equal to 3
48:19 - or something like that and of course you
48:20 - can just maybe
48:23 - you you can uh declare
48:26 - initialize and assign value
48:30 - at the or in one line or something
48:33 - in the same time so in age equals to
48:37 - 4 something like that so you can declare
48:40 - the
48:41 - value or the variable and then assign
48:43 - value to that particular
48:45 - value variable so okay
48:49 - and of course you can assign variables
48:52 - to the value of
48:53 - another variable so it means say for
48:56 - example
48:57 - n1 you can assign
49:00 - the value of age into this by just using
49:02 - the variable age
49:03 - something like that or you have to
49:06 - modify
49:06 - it with like add 10 okay so
49:10 - age and then plus 10 or something like
49:13 - that
49:14 - and if you want to display this all you
49:16 - have to do is
49:17 - use the function printf and then
49:21 - you can
49:23 - [Music]
49:24 - say the age
49:27 - is percent d and as you can remember
49:30 - this is the
49:32 - placeholder for in
49:35 - so percent d and then you have to
49:37 - specify
49:38 - the variable so for example n1
49:42 - so let's try this add semicolon to this
49:46 - so compile and run
49:49 - so the age is 14 so that's because
49:53 - the n1 now holds the value of age
49:57 - plus the value 10 so it makes it 14.
50:01 - okay and of course you can
50:05 - assign multiple variables to the same
50:07 - value with one assignment so so for
50:09 - example n1 and 2n3
50:12 - you can assign it like
50:15 - this so i'm just showing you guys
50:18 - how to assign values to this particular
50:22 - variable so say for example n1
50:24 - equals n2 equals n3
50:28 - and this should equal to
50:32 - 8 okay so let's try this and
50:37 - and as you can see the value is
50:40 - eight okay but if you try to display
50:44 - also n2 and
50:45 - entry it will get also the value eight
50:48 - so you can
50:49 - assign multiple variables to the same
50:52 - value with
50:53 - one statement so now i'm going to talk
50:56 - about
50:57 - naming the variables because they're in
51:00 - naming
51:01 - or i mean in c we have to
51:05 - remember that there are naming rules
51:08 - that we
51:09 - have to follow so one
51:12 - of the rules that we have to
51:15 - remember is that
51:19 - the variable name
51:23 - must not start with
51:27 - a digit so basically you can you cannot
51:31 - say in and then one age you cannot do
51:34 - that because
51:35 - as a general rule you cannot start your
51:39 - variable name with a digit okay
51:43 - and of course the second one is
51:48 - spaces
51:50 - not allowed in names
51:54 - so you can say in and then space
51:57 - my a you can't do that because that's
52:01 - not allowed in c
52:03 - and a dollar sign
52:07 - not allowed
52:10 - so or any special characters for that
52:14 - matter so
52:16 - only letters
52:21 - digits and of course semicolon allowed
52:25 - in our variable name
52:28 - and of course the last one will be the
52:34 - reserved keywords you can't use
52:39 - reserve keywords
52:42 - so that's basically so for example you
52:45 - you want to name
52:46 - a variable in main something like that
52:50 - you can't use this variable name because
52:52 - this is a
52:53 - reserved keyword meaning it is a primary
52:56 - keyword used by c as you can see
53:00 - here so now let's talk about the
53:03 - four major uh of
53:06 - four basic data types in c
53:09 - so there are four basic data types in c
53:12 - that's um
53:14 - int and then we have
53:17 - jar or characters and then float
53:21 - and then we have the
53:25 - double type okay so in
53:28 - is a type that stores integers in the
53:31 - form of
53:33 - whole numbers so any number
53:36 - that is whole so you can um
53:40 - say it like in age equals
53:45 - um 10 or
53:50 - maybe 11
53:54 - um 20 for as long as
53:57 - it is a whole number so
54:00 - it should be a whole number between
54:03 - 2 billion 147
54:08 - million 400 or 648 something
54:14 - it's negative and
54:17 - that's inclusive um
54:21 - positive for 2 billion
54:25 - 147 million and 483
54:28 - thousand six hundred forty-seven so
54:31 - that's the
54:33 - um length of the in
54:36 - if you to use this particular type
54:39 - in so that's the in should be between
54:43 - that number or those numbers
54:46 - so the next one is the
54:49 - chart type so char is just a series of
54:53 - character or a single character so the
54:56 - first
54:56 - the the way of declaring a character
55:00 - or a char is you have to use star
55:03 - keyword
55:05 - and then so for example letter one
55:09 - equals a there you go
55:12 - you have to enclose it with single code
55:15 - and it signifies that it is a single
55:18 - character or something like that
55:20 - and of course you can have like a series
55:24 - of
55:24 - characters so for example like what we
55:27 - have previously
55:28 - char and then character name
55:33 - and then you have to use the uh
55:36 - square brackets for that motor and
55:40 - so for example john
55:44 - okay so that's basically how to declare
55:48 - or how to use the char keyword
55:52 - okay and the next one
55:55 - is float so basically float is a short
55:58 - for floating point
56:00 - and it stores
56:03 - representations of real numbers both
56:06 - integer
56:06 - and non-integer values and the way
56:10 - on how to declare that is by using
56:15 - the keyword float
56:19 - and then maybe you can
56:22 - declare it as
56:24 - [Music]
56:28 - float pi equals 3.14
56:33 - something like that so you can declare
56:35 - your float values by using
56:37 - uh that keyword float and then followed
56:40 - by
56:41 - the keyword or the variable
56:45 - name which is for example in this case
56:48 - the
56:49 - pi which is 3.14
56:53 - okay and of course we can use also
56:56 - the data type
57:00 - double if you want so double is
57:04 - so for example um salary
57:07 - equals ten thousand
57:11 - ten thousand something like that
57:14 - and basically if you want to use double
57:16 - you all you have to do is
57:17 - use this key keyword double and then the
57:20 - name of your
57:21 - variable name in this case salary and
57:24 - then
57:24 - click declare or initialize it with a
57:27 - double
57:28 - value something like that okay and
57:32 - if you have any doubts to the amount of
57:34 - memory actual
57:36 - actually used by any variable you can
57:39 - use the the size of operator to find
57:42 - out for sure so you can like
57:45 - uh use the
57:49 - keyword size of
57:53 - and then um the
57:56 - variable age okay so
58:00 - so for example for that um
58:03 - you can get the actual amount of memory
58:07 - allocated in that particular variable
58:11 - and in this video guys we're going to
58:12 - talk about the scope
58:14 - of a variable and of course we're going
58:17 - to talk about
58:18 - the operators in c and how we can use
58:21 - them
58:22 - so let's go ahead and talk about the
58:24 - scope of a variable so basically
58:27 - a scope is a region of the program
58:30 - and the scope of variable refers to the
58:33 - area
58:34 - of the program where the variables can
58:36 - be accessed
58:37 - after its declaration so basically in
58:40 - the c program we have like three
58:43 - um different um scope or different
58:47 - location that we can declare our
58:50 - variables
58:51 - so the first one is inside the function
58:54 - or a block
58:55 - so we have the first one will be
58:58 - the local variable
59:01 - there we go we can declare
59:05 - um a variable inside our function
59:08 - the second one the second one will be
59:10 - the global variable
59:13 - okay and of course we can also
59:16 - declare a variable inside
59:20 - the function parameter so function
59:23 - parameters okay so
59:27 - that's all the area that we can like
59:30 - declare the variables
59:32 - and set the values to it so
59:35 - but basically we do have like only
59:39 - the two that is most common although we
59:42 - are most of the time um setting the
59:47 - function parameters and declaring
59:50 - variables to it
59:51 - like almost every function
59:54 - but yeah the most common way of
59:58 - you know declaring a variable is the
60:00 - local and global
60:02 - uh local and global variable so
60:05 - again when we say global or local
60:08 - variable it is
60:09 - a a variable that is declared
60:13 - inside a particular function or a block
60:16 - of function
60:17 - so a variables that are declared within
60:19 - the function block and can be used only
60:22 - within the function is called local
60:24 - variable so
60:26 - uh this is how we can um
60:29 - implement this in our c program so so
60:33 - for example
60:34 - in here we're going to
60:38 - declare by the way guys this is a
60:42 - [Music]
60:43 - comment and the way to make comment in c
60:47 - program is by using the domain slash so
60:50 - this means this is
60:51 - this is a single line comment and of
60:53 - course we do have
60:54 - the slash and then
60:57 - the asterisk and then asterisk and then
61:01 - forward slash so this is multi-line
61:04 - comment
61:05 - so we can like add comments in between
61:08 - these lines
61:09 - and uh this doubles double slash
61:13 - will be the single line comment okay so
61:16 - i hope you
61:17 - um get the idea of this comments and
61:20 - basically guys these comments
61:22 - will not be interpreted by rc program
61:25 - okay so as i've said we're going to
61:28 - discuss or we're going to
61:29 - declare a local variable here
61:33 - local variable definition
61:37 - in initialization
61:40 - initialization right there i'm just
61:43 - going to remove this
61:44 - single line comment okay so in
61:48 - the the way to declare a variable in
61:52 - c is like in
61:56 - or this is the type of information that
61:59 - we want to save
62:00 - so in and then so for example the
62:03 - variable name
62:03 - is x and we can do it like this
62:07 - y and then z so basically what we're
62:11 - doing here is
62:12 - declaring three variables of in type
62:15 - okay so this is the variable
62:19 - definition and of course we can
62:22 - initialize it by saying x
62:25 - equals to 10 okay
62:28 - x equals to 10 and
62:31 - y equals
62:35 - x plus five
62:38 - and then we can also say z equals
62:42 - y y variable plus
62:46 - one okay so that's how we can
62:50 - um declare a variable and initialize the
62:54 - value into the variable so
62:56 - this is the definition
63:00 - in x y z and then of course the actual
63:03 - initialization
63:04 - initialization which is uh right here
63:07 - x equals to 10 y equals x plus five
63:10 - and then z equals y plus
63:14 - one okay so of course you can always
63:17 - print this
63:18 - so for example print print f
63:21 - and then value of
63:25 - so for example z
63:29 - equals percent
63:32 - d remember percent d is just the
63:35 - placeholder for our
63:37 - integer value so the value of z equals
63:41 - the c variable okay
63:44 - and then save and of course you can
63:46 - compile
63:48 - and or build and run your c program so
63:51 - let's try that
63:54 - okay so we need to add the same column
63:58 - at the end of the line
63:59 - to mark that it is ending in this
64:02 - particular line so
64:03 - build and run
64:07 - and there you go the value of z
64:10 - equals 16 because we set the x equals to
64:13 - 10
64:14 - and then d y equals to x plus 5
64:18 - and of course z equals
64:21 - y plus 1 that will result to 16 okay
64:26 - so that's how you declare and initialize
64:29 - a local variable
64:30 - now let's go on with the global variable
64:34 - or global scope
64:35 - of a variable so variables that are
64:38 - declared outside of
64:40 - a function can and can be accessed
64:42 - inside the function is called
64:44 - global variables so so for example you
64:47 - want
64:47 - to declare a global variable all you
64:50 - have to do
64:51 - is before the in main function
64:54 - okay right here we can declare
64:58 - the global
65:02 - variable okay
65:06 - and we can declare it like int
65:10 - age and then we have
65:13 - like the semicolon at the end of the
65:16 - declaration
65:17 - okay in age and then semicolon
65:21 - so global variable initialization so
65:24 - after the um after defining a local
65:28 - variable
65:29 - the system or the compiler won't
65:32 - initialize the value
65:36 - or any value to our local variable so we
65:38 - have to
65:40 - initialize it by by ourselves like
65:43 - this so if we try to
65:46 - define the variables right here it won't
65:49 - have any initial i or initial value
65:52 - so we have to declare it like this
65:55 - x equals to 10 y equals x plus five
65:59 - z equals uh y plus one
66:02 - but uh global variables get initialized
66:06 - automatically by the computer um or as
66:09 - uh by the compiler and
66:13 - um so for example if we declare the the
66:16 - variable type as in then the initial
66:19 - default value will be
66:21 - zero okay remember you have to remember
66:24 - that
66:24 - so the difference between global and
66:26 - local variable
66:27 - is whenever we declare
66:31 - the variable in our local
66:35 - scope it won't get any initial value
66:39 - so we have to initialize it by ourselves
66:41 - but the global
66:42 - variable is initialized by default
66:46 - depending on the type of value that we
66:49 - have saved in our variable so for
66:51 - example it in
66:53 - then it will default or initial
66:56 - default value will be zero and
67:00 - if char so for example
67:03 - char t so the default value will be
67:08 - um single code and then backslash
67:11 - um zero and then backslash i am in
67:14 - single code
67:16 - of course when we say float
67:22 - load m so the initial value of that
67:25 - is equal to zero when we say
67:28 - double the initial
67:31 - value of that is also zero
67:35 - and when we say pointer
67:41 - uh the initial value of this is equal to
67:45 - null okay so you have to
67:48 - remember that whenever you declare a
67:51 - global variable
67:53 - there is a default value for our
67:55 - variables
67:56 - okay so as i've said global variables
68:00 - can be accessed inside our main function
68:02 - or any function
68:04 - so because this is a global variable
68:06 - right
68:07 - in this video guys we're going to talk
68:08 - about the input and
68:10 - output in c programming language before
68:13 - we dive in
68:15 - into operators and how we can use
68:19 - operators in c programming language so
68:21 - basically
68:22 - we can use the function printf to
68:24 - display something in our screen
68:26 - just like what we have before so printf
68:30 - and then we can say hello world
68:34 - okay and then we can
68:38 - build and run this program and we can
68:40 - get
68:41 - the hello world string right here
68:44 - we use the printf function for that and
68:48 - now we're going to talk about the
68:51 - input because we're we're trying to
68:54 - focus on the input
68:56 - because we're already familiar with the
69:00 - output side of c programming so we have
69:03 - used the printf to output something in
69:05 - our screen and then of course
69:07 - in order for us to ask input from the
69:10 - user
69:11 - we're going to use the scanf function
69:14 - okay
69:15 - so the way to use scan a function
69:19 - we can say here we can ask for a
69:22 - particular number so
69:23 - please enter a number
69:27 - okay and then we can um add the escape
69:30 - character here for a new line and we can
69:34 - declare
69:35 - a variable here so for example in a
69:39 - and then we can get
69:43 - the value from the user by using the
69:45 - scan f function
69:47 - and then format specifier for our
69:52 - in variable or in value and
69:55 - comma and then of course
69:59 - the n symbol and the name of our
70:02 - of our variable a so basically what this
70:06 - means is that we're taking the address
70:08 - of variable a and then assign
70:11 - a value to that address um whatever the
70:14 - the user has inputted okay so
70:18 - and then we're going to end this with
70:20 - the semicolon and let's try this
70:22 - uh let's try to display the
70:26 - value that uh comes from the user okay
70:30 - so number
70:34 - the number is
70:37 - um percent
70:40 - d format specifier for our uh in
70:44 - value and then comma and then and then
70:46 - the name of our variable which is a
70:49 - okay and then semicolon so i remember to
70:53 - end
70:54 - every time or end every line with a
70:58 - semicolon okay and then we can build and
71:02 - run this
71:03 - application so there you go
71:07 - uh the program tried uh is trying to
71:10 - prompt
71:10 - us to input a number so so for example
71:14 - number five so number five
71:18 - is or the number is column and then the
71:21 - value five which is
71:23 - coming from the user itself
71:26 - okay and now we can actually
71:29 - um ask two numbers in the same line
71:33 - by using also the scanf function so in
71:36 - here we have like
71:37 - uh as for a single number but what we
71:41 - can do
71:41 - is we can ask for
71:45 - um two numbers just like
71:48 - please enter any two
71:52 - numbers okay
71:56 - and then we're just going to use the
71:58 - same function percent
72:00 - i scan f and then percent d percent
72:05 - another percent d because we're asking
72:08 - two numbers
72:09 - and then in here we can say
72:13 - uh n symbol and then the
72:16 - value or the variable b which
72:19 - we will declare here on the top
72:23 - okay b and then we can declare another
72:26 - variable c
72:28 - and we can add the
72:31 - values or the numbers coming from the
72:33 - user
72:34 - so the number
72:39 - for the value c or the variable c we can
72:43 - assign a value to that which is the
72:46 - total of
72:47 - the two numbers a and
72:50 - b so that will be c equals
72:54 - a plus b so what we're doing here is
72:58 - that
72:59 - we're assign we're just assigning the
73:00 - value of the total
73:03 - of a and b into our c variable
73:06 - okay so the total
73:09 - the total number is
73:13 - and then percent d and of course the
73:16 - value of
73:17 - rc okay which is again the total of our
73:21 - variables
73:22 - a and b okay so
73:25 - save this and then we can build and run
73:28 - our application so please enter
73:32 - any two numbers
73:36 - for example um
73:38 - [Music]
73:41 - one and two so the total number
73:46 - is three okay so again
73:51 - like five and
73:54 - um three
73:59 - so the total is eight okay
74:02 - so as you can see we are getting the two
74:06 - numbers
74:07 - five and three and then we're displaying
74:10 - the total
74:11 - which is eight okay so basically that's
74:15 - how you can
74:16 - ask or you know input something into our
74:19 - program
74:20 - because our program right now is asking
74:22 - for a uh for an
74:24 - input from our user okay
74:27 - and that's where we can you know
74:31 - apply the operators
74:34 - in our c program and we have
74:38 - different operators or type of operators
74:41 - in c
74:43 - so c programming language offers various
74:46 - types of operators
74:47 - having different functioning
74:50 - capabilities
74:51 - so the first one is the
74:56 - arithmetic operators
75:00 - so we have used the addition
75:03 - operator right there by you know
75:06 - assigning the value of a plus b into c
75:10 - okay and then we also have the
75:13 - relational relational
75:17 - operators
75:20 - okay let me resize this so you can
75:25 - clearly see it arithmetic operators
75:28 - and then we have relational operators
75:33 - and the third one will be
75:35 - logical operators
75:38 - the fourth one is assignment operators
75:46 - and fifth one will be increment
75:52 - increment and decrement operators
75:57 - i'm just going to list it here so you
75:59 - can see all the
76:00 - type of operators in rc programming
76:03 - language
76:04 - so decrement operators and then we also
76:07 - have the conditional
76:10 - conditional uh operator
76:14 - we also have bitwise operators
76:18 - and then we have special
76:23 - operators so these are all the types of
76:27 - operators that we can use inside our c
76:30 - programming language
76:31 - and of course the first one is
76:33 - arithmetic so arithmetic operators
76:36 - include
76:37 - um it includes addition
76:41 - of course of course the symbol for that
76:43 - is the plus
76:45 - right and then we also have subtraction
76:49 - symbol for that is dash
76:52 - we also have multiplication and we can
76:54 - use the asterisk for that
76:56 - to multiply two numbers in our inside rc
76:59 - program
77:00 - and then of course we do have the
77:02 - division
77:03 - which is the forward slash forward slash
77:06 - symbol and of course we have the
77:10 - mujulu and we can use the percent sign
77:14 - to um like operate
77:17 - by using modulus okay now
77:20 - uh let's talk about the operators or
77:22 - arithmetic operators so for example
77:25 - you know addition
77:29 - so we can also
77:32 - like um in
77:35 - b equals um
77:38 - [Music]
77:39 - a minus b
77:43 - okay and then we can like
77:47 - have of course not we cannot
77:50 - really declare it uh the b because we
77:53 - already declared it there
77:55 - so we can say it d equals a
77:58 - minus b and then we can see
78:02 - e and then a
78:06 - times b
78:10 - and of course we can have the division
78:14 - and we're going to have like
78:17 - um use the float or we can use the
78:19 - double for that
78:21 - double um f equals
78:25 - one or a divided by b okay
78:28 - so these are the are all arithmetic
78:30 - operators that we can use
78:32 - inside our c program so basically
78:36 - you can add you can subtract you can
78:38 - multiply
78:40 - and you can divide
78:44 - two numbers inside your
78:47 - c program so um so for example we're
78:51 - going to
78:52 - test this okay
78:55 - so in d
78:59 - in the equals a minus b
79:03 - okay so we can display
79:07 - the total number is percent d
79:10 - and then the difference
79:15 - difference of the two numbers
79:21 - the difference uh the difference
79:24 - is of course we're going to use the
79:28 - different
79:30 - or the variable d for the
79:34 - difference and then we can use another
79:37 - one
79:38 - which is the product the product
79:43 - is percent
79:47 - [Music]
79:48 - d and the next one
79:51 - is the quotient
79:55 - okay the quotient of two numbers
79:58 - is of course the uh
80:02 - variable f and then we can use the
80:05 - format specifier which is lf
80:09 - okay and then of course the variable
80:13 - f something like this so let's
80:16 - run our program okay
80:19 - and we can enter two variables here or
80:22 - two numbers which is
80:23 - for example five and three
80:28 - okay so the difference or the total
80:31 - number
80:32 - is the total number
80:35 - is eight the difference is two
80:38 - and we need to format this so we can see
80:40 - clearly
80:42 - so we can add percent or i mean
80:44 - backslash n
80:48 - for each line the difference the
80:50 - quotient
80:51 - and of course we need to
80:54 - have the product the product
80:58 - is percent d and then of course
81:02 - the variable e okay so again run a
81:05 - program
81:06 - build and run and then five and then
81:09 - three so the total is eight
81:13 - or five plus three is eight and then the
81:15 - difference is
81:16 - five minus two or five minus three is
81:18 - two and then the product
81:20 - is um fifteen five five times three is
81:24 - fifteen and then the quotient
81:25 - is uh one okay
81:28 - so there's only num or there's only one
81:32 - three
81:32 - in the value five okay
81:36 - and in this video guys we're gonna talk
81:38 - about how to use
81:39 - increment and decrement operators in a c
81:43 - program and later on if you still have
81:45 - time
81:46 - we're going to discuss or we're going to
81:48 - start discussing
81:50 - relational operators and how we can use
81:53 - inside
81:54 - or how we can use it inside our c
81:56 - program okay
81:57 - so basically guys increment and
81:59 - decrement operators
82:01 - are useful operators
82:04 - and it is generally used to minimize the
82:06 - calculation
82:08 - so let me show you an example
82:12 - so in order to increment a value inside
82:15 - ac program
82:17 - we do it like this plus plus and then
82:20 - the name of
82:21 - the variable let me
82:24 - do it here so you can see it clearly
82:27 - plus plus and then the variable okay
82:31 - plus plus and then the variable so it
82:33 - means
82:34 - that x equals
82:38 - x plus one okay
82:42 - remember plus plus x means
82:45 - x equals uh x
82:48 - plus one and of course in the same
82:50 - manner
82:52 - when we say minus minus x it means
82:56 - that x equals x
83:00 - minus one okay so this is how you
83:04 - increment
83:05 - and decrement a value inside the c
83:07 - program
83:08 - but there is also a way
83:13 - it is called the post fix it is post
83:17 - fixed because
83:18 - we place the operator or the plus symbol
83:22 - after the variable x plus plus
83:25 - but it it also means that
83:28 - [Music]
83:31 - x equals x plus
83:34 - one and of course when you say x minus
83:37 - minus
83:38 - still it means x equals x minus one
83:42 - okay so you get the idea this is how you
83:45 - increment
83:46 - and decrement um inside
83:50 - a c program okay now
83:54 - there's a difference or a slight
83:55 - difference between
83:57 - having plus plus x instead of x plus
84:00 - plus
84:02 - or minus minus x instead of
84:05 - minus x minus minus okay so i'm going to
84:08 - show you that
84:10 - in a simple program so basically what
84:13 - we're going to do here
84:14 - is we will have a two variable
84:18 - so two variable which is a
84:21 - which is equal to five and then
84:24 - b which is equal to five also so i'm
84:28 - going to show you the effect
84:30 - of post fix and pre
84:33 - fix okay so again
84:37 - this one is the prefix
84:41 - okay and then this is
84:44 - post fix okay
84:48 - so let's comment this out
84:51 - so i'm going to show you the effect of
84:54 - postfix
84:55 - and prefix in this particular example
84:58 - so in a equals 5 and b equals 5
85:02 - also and then
85:03 - [Music]
85:05 - in here we set we set the
85:10 - value of a and b
85:14 - equal to five okay so basically what we
85:18 - can do
85:19 - right now is
85:23 - print and
85:26 - decrement decrement
85:32 - each time okay and then
85:35 - [Music]
85:37 - we can use the variable a
85:40 - for our postfix use a for
85:44 - postfix and
85:47 - use b or variable b for
85:51 - pre fix okay so
85:54 - we can do this by abusing the printf
85:58 - method and then um
86:02 - [Music]
86:03 - uh backslash n and then percent d
86:08 - okay and then percent d because we
86:11 - were having to display or we we're going
86:13 - to display
86:15 - both the value of a and b okay
86:20 - so we're going to use the
86:23 - postfix here a minus minus and then
86:28 - this one is 4 minus minus b
86:31 - so again this is postfix and this is
86:34 - prefix
86:35 - and then they are set uh or the value of
86:38 - this two variables
86:40 - are set uh a equals to five and b equals
86:44 - to five
86:45 - and then we can end this with a
86:47 - semicolon
86:49 - and of course we can do the same
86:53 - you can do the same we can do another
86:55 - one
86:57 - and uh
87:00 - one two three four five
87:05 - six there are six lines so we we only
87:08 - need
87:08 - five and i'm going to show you
87:12 - and demonstrate what is the effect of
87:15 - postfix and prefix
87:17 - so for you to understand here
87:20 - we have taken the value of
87:24 - a and then of course the taken the value
87:27 - of b
87:28 - and then we apply postfix and prefix so
87:31 - if you try to run
87:32 - this build and run
87:36 - as you can see the value is
87:40 - 5 4 3
87:43 - 2 1 and
87:46 - the value of b is 4 3
87:50 - 2 1 0. so it means that
87:54 - if we use the prefix
87:58 - okay which is the case here minus minus
88:01 - b
88:02 - so it automatically um
88:04 - [Music]
88:07 - decrease the value of our variable by
88:10 - one
88:10 - whereas here it
88:14 - displays the value of a still five
88:17 - and then later on four and then in the
88:20 - third line
88:21 - three the fourth line two and the fifth
88:24 - line is
88:26 - uh one okay and then of course
88:30 - in the prefix it decrease
88:33 - the value by one and then four
88:36 - three two one and zero okay
88:40 - so that's how you uh do it
88:43 - the increment and decrement in a c
88:46 - program
88:47 - and this is quite useful if
88:50 - you know if you are working with for
88:52 - loops which we will discuss later on
88:55 - in this particular series okay now
88:58 - let's move on to the next operator which
89:00 - is the
89:01 - relational operators if we have
89:05 - increment and decrement we also have the
89:08 - relational operators
89:10 - relational operators so basically there
89:14 - are like
89:15 - one two three four five six
89:20 - six um relational operators
89:23 - and the the first one is equal
89:26 - equal okay so basically we're just
89:30 - checking if
89:31 - something is equal to or
89:34 - a variable is equal to some variable
89:37 - okay
89:39 - is equal to and then we have the
89:43 - exclamation point and then equal
89:47 - so it means is not equal
89:53 - so basically by this we're just checking
89:56 - if a certain value
89:58 - is not equal to another value
90:02 - and then of course we do have the
90:05 - greater than
90:08 - okay greater than and then we have less
90:11 - than
90:14 - and then of course we have the greater
90:17 - than or equal to so greater than
90:22 - greater than or equal to
90:26 - and less than or equal to
90:34 - okay so basically um
90:38 - we're just checking the relationship or
90:42 - like the relation between two values if
90:46 - it is
90:46 - equal if it is not equal if it is
90:49 - greater than
90:50 - less than or this two
90:54 - comparison or relation or a relational
90:56 - operator
90:57 - um greater than or equal to or less than
91:00 - or equal to
91:01 - a certain value okay and then of course
91:05 - um we can use this especially in a
91:09 - if statement in and we're going to
91:12 - discuss that
91:14 - later on in this particular series so
91:17 - basically if you want to check if
91:20 - something is
91:21 - equal or not equal or greater than
91:25 - then we can use the relational operators
91:27 - so we have to remember this
91:29 - this is one of the most important
91:31 - concept in programming
91:34 - so the relational operators
91:37 - okay and in this video guys we're going
91:39 - to discuss about
91:40 - the logical operators and of course
91:44 - the assignment operators so previously
91:47 - we have discussed this
91:48 - relational operators so we have like
91:52 - six relational operators the equal
91:56 - or checking if a value is equal to some
91:59 - value also
92:00 - and then not equal we have also greater
92:03 - than
92:04 - less than and then we also have greater
92:07 - than or equal to
92:09 - and we also have less than or equal to
92:11 - some
92:12 - value so this is quite useful guys if
92:15 - you are using
92:16 - the control statement in c so for
92:19 - example
92:19 - if statement and then you want to check
92:23 - if a certain value is
92:27 - equal or not equal to some value so for
92:30 - example if
92:32 - a variable x is equal
92:35 - equal to two so basically we're just
92:37 - checking if this particular variable
92:40 - or the value of this x is equal to
92:43 - two or we can reverse that we can check
92:46 - if
92:47 - this particular variable uh variable is
92:50 - not
92:50 - equal to two and of course you can use
92:52 - other
92:54 - operation or operators like greater than
92:58 - um less than or
93:01 - you could also double check for greater
93:04 - than or equal to or less than or equal
93:06 - to so basically guys
93:07 - this operators is like just checking
93:11 - the relationship or if the
93:14 - certain value is greater than another
93:16 - value
93:17 - or it is equal to another value okay
93:21 - now let's move on to the next one which
93:23 - is the assignment operators
93:25 - so basically you guys there are a lot of
93:28 - assignment operators
93:30 - in c programming language
93:33 - okay so the first one will be the equal
93:36 - sign
93:37 - okay this is one of the most uh common
93:40 - assignment operators in c programming
93:44 - so so for example you want to assign
93:47 - so as i've said guys this is for
93:49 - assignment operators
93:53 - assignment operators okay so basically
93:56 - this is useful if you want to
93:58 - set a value to a variable okay so for
94:01 - example
94:02 - x and then if you want to make this like
94:05 - 5 or the value of x is equal to 5 you
94:07 - can do that
94:08 - by using this particular assignment
94:10 - operator equal
94:11 - symbol okay that's easy and the second
94:14 - one
94:15 - is plus equal
94:19 - so we have this also plus equal and then
94:22 - um it basically means guys that it
94:25 - increments the value
94:27 - and then assign it to the
94:30 - um the variable okay
94:33 - so for example you want to make this
94:35 - like x
94:37 - and then plus equal
94:41 - to two so basically
94:44 - let's try this we can remove this code
94:47 - right here
94:50 - we can use the increment
94:54 - then assign so basically
94:57 - like we set a value for
95:01 - x we set it to 5 and then we can
95:04 - have it like x plus and then equals
95:08 - 2 3 and then we can
95:12 - use the printf function and we can
95:16 - display
95:17 - the result further so for example
95:21 - the value is
95:26 - the uh format specifier
95:30 - and then of course the comma
95:34 - and then the x variable okay and then
95:37 - semicolon at the end of this line
95:39 - save this and then compile and build or
95:42 - build and run
95:44 - our application so basically
95:48 - as you can see here the value
95:51 - is eight so this is the doing of the
95:56 - plus
95:56 - equals to 3 so big basically what it
96:00 - means that
96:01 - it add 3 to the
96:04 - variable x and then of course it the
96:06 - result of that
96:07 - is assigned to variable x also okay
96:11 - so this is basically uh just
96:13 - incrementing the value of our
96:15 - variable and of course we also have the
96:18 - x
96:18 - minus equals to
96:22 - for example one okay so basically it is
96:25 - the complete opposite of
96:27 - this one because this is for
96:29 - incrementing
96:31 - and this is for bickerman okay
96:34 - and of course we do have other operators
96:38 - for this particular
96:40 - topic which is the assignment operators
96:43 - we also have x for example times or
96:47 - multiply
96:48 - equal to 2 you can also do that
96:52 - and basically the division also
96:55 - okay you can do also the modular part
97:02 - modulo symbol and then equal and then
97:06 - so for example two and there are others
97:10 - for example um
97:13 - [Music]
97:14 - percent or i mean x and then
97:18 - and um
97:22 - and symbol and equal uh
97:25 - symbol and then of course the value that
97:28 - you want to
97:29 - assign so this is basically a bit bit
97:31 - wise
97:32 - and um assign assignment so
97:36 - we're not going to use that for now so
97:38 - basically our
97:39 - currently concern is this
97:42 - operations we can have the increment
97:46 - uh the first one is equal and then of
97:48 - course the increment the decrement and
97:49 - then multiply
97:50 - multiplication then assign and we also
97:53 - have
97:53 - divide and assign we also have modulu
97:56 - and assign so that's basically how the
98:00 - assignment operators word so the last
98:05 - thing that we want to discuss here is
98:07 - all about the logical operators
98:10 - so logical operators provides
98:13 - three mechanism that we can test
98:17 - more than one condition to make a
98:19 - particular decision
98:21 - so these are the
98:24 - end and symbol so meaning it is
98:28 - a logical end okay logical and
98:34 - let me show you that later on
98:37 - what uh what this means logical end
98:41 - and of course we also have this bar bar
98:45 - and this is a logical
98:49 - operator or logical or
98:52 - and then of course we have the negation
98:54 - or
98:55 - not symbol okay
98:59 - so logical or and then this
99:02 - is in and of course logical
99:06 - not okay so let me show you how this
99:09 - works
99:10 - this three logical operators now let's
99:13 - try to use the logical operators so for
99:16 - example the first one
99:18 - the logical and operator so we have here
99:21 - variable x
99:22 - which is set to eight or the value is
99:24 - eight
99:25 - and then we can check if this particular
99:27 - value is or the
99:29 - particular val variable x is
99:33 - um greater than five so we can do that
99:35 - by using the if statement
99:37 - and then x is it less than
99:41 - or greater than 5 so if
99:45 - x is greater than 5 then we can
99:49 - display something in our
99:52 - in our screen or output something so we
99:55 - can do
99:56 - print f and of course the value
99:59 - is greater than greater than
100:03 - five okay so we could uh build and run
100:06 - this
100:07 - and see the output of our program and of
100:10 - course
100:10 - it's gonna display uh the value is
100:13 - greater
100:14 - than five okay so what if the
100:17 - value is four okay
100:21 - so obviously there will be no
100:24 - output because uh this the condition
100:28 - right here
100:29 - uh turns to be false because the actual
100:32 - value of
100:33 - x is now uh four
100:36 - so no statement has been executed for
100:38 - this particular program
100:40 - now we can use logical operators
100:45 - and in this particular scenario so for
100:46 - example you want to check
100:48 - that the value of x should be
100:52 - um greater than 5 but less than
100:57 - 10 okay so we could check if
101:00 - the variable x is greater than 5 but
101:04 - less than 10
101:05 - and we can do that by
101:08 - using the logical and operator
101:12 - so double ampersand and x
101:15 - and then less than 10 okay we could do
101:18 - that
101:19 - and of course
101:22 - if we try to
101:25 - run this
101:30 - still there is no output because
101:34 - the value of x is four
101:37 - so we can try six here build and run our
101:40 - application
101:44 - so the value is greater than 5
101:47 - and we should add here that the value
101:51 - is less than
101:55 - 10 okay build and run our application
101:59 - so the value is greater than 5 and it is
102:02 - less than
102:03 - 10. now what if it is
102:07 - 11 so obviously it's going to
102:11 - display nothing in our screen because
102:14 - the conditions
102:15 - of this particular statements is not met
102:18 - okay so that's how you can use the
102:21 - logical and operator
102:23 - and of course when we say and
102:28 - um basically it means that it should be
102:32 - the both of the statement or both of
102:34 - this condition should be
102:36 - true in order for this statement to be
102:39 - executed
102:40 - okay and you can also use the logical
102:43 - operator or
102:45 - in this particular scenario
102:49 - so it doesn't matter if the um
102:54 - x is greater than 5 or x is less than 10
102:58 - um it should you know execute the
103:01 - statement that we have here
103:02 - okay so for example you run this
103:09 - okay so we have the value is greater
103:11 - than 5
103:12 - and less than 10 and
103:15 - we can try like
103:19 - 20 or maybe uh use the
103:22 - value 20 in rx so let's try this
103:26 - save and then build and run
103:33 - okay and as you can see we still have or
103:36 - we still get
103:36 - the output the value is greater than 5
103:39 - and less than 10
103:40 - that's because this particular statement
103:43 - here
103:44 - returns true so it doesn't matter if
103:46 - this particular statement here
103:48 - is false so as long as there's a
103:52 - true returns either of this
103:55 - statement so there's there should be
103:57 - statement
103:58 - printed or executed inside this
104:00 - particular if
104:02 - statement in this video guys i'm going
104:04 - to show you
104:05 - and teach you how to use if statements
104:09 - in c programming language so i think
104:12 - from the previous video we have like
104:14 - touch
104:14 - the basic usage of if statement
104:18 - so we have tried if statement with the
104:21 - logical operators
104:23 - so the end the
104:27 - relational operators the you know
104:30 - greater than less than or less than or
104:33 - equal to in other
104:35 - relational operators okay but in this
104:38 - particular video guys i'm going to
104:40 - go deeper with the if statement and how
104:43 - we can apply
104:44 - um if statement in our c program
104:48 - and of course guys i want to show you
104:49 - the practical approach
104:51 - on how to how you can implement if
104:53 - statement in a c program
104:55 - so basically guys if statements in c
104:59 - is used to control the program flow
105:02 - based on some conditions so it is used
105:05 - to execute
105:06 - some statement code block if the
105:08 - expression is evaluated to
105:10 - true so otherwise uh it will get skipped
105:14 - and we will try to
105:17 - implement a simple or basic program
105:21 - um utilizing the if statement so
105:23 - actually guys there are four different
105:24 - types of
105:25 - if statement in c so these are
105:29 - you know simple if statement we also
105:31 - have
105:32 - if else statement we also have
105:35 - nested if else statement and we also
105:38 - have
105:40 - else if ladder in c programming
105:43 - language but for now let's just focus on
105:46 - the simple if statement
105:48 - so basically the structure
105:52 - of if statement is just like this
105:57 - so we have this particular
106:00 - format or basic format of if statement
106:03 - in c we have
106:05 - if keyword and then open and close
106:08 - parenthesis and then inside of this
106:11 - open and close parenthesis is the test
106:15 - expression okay or the condition
106:19 - and then of course we should
106:22 - you know add curly braces open and close
106:25 - curly braces
106:26 - and then of course the statement to
106:30 - execute whenever the test expression or
106:32 - condition
106:33 - is met or in this particular case if
106:36 - this particular condition is evaluated
106:40 - into
106:41 - true okay so now let's try to
106:44 - implement a practical approach of an if
106:47 - statement
106:48 - so say for example you are developing a
106:51 - program
106:52 - or a software for a particular bar
106:56 - okay and then that particular bar only
106:59 - accepts
107:01 - customers that are over 18 years old and
107:05 - those customers that are below 18 years
107:07 - old are not allowed to enter the
107:09 - establishment or the bar itself
107:12 - and we can create a very simple program
107:14 - for that and our program will accept
107:17 - the age of the customer and then it will
107:20 - evaluate the age
107:21 - and it will display a message based on
107:24 - that particular
107:25 - age so the first thing that we're going
107:27 - to declare here
107:28 - is the variable age which has the type
107:32 - of int
107:33 - and of course we need to display
107:35 - something on
107:36 - to the screen that says to input a
107:40 - number
107:40 - that pertains to the age of the
107:44 - customer so in order for us to do that
107:47 - we need to
107:48 - use the method printf and then
107:51 - in here we can say enter the customers
107:58 - the customer or enter the
108:01 - age of the customer
108:04 - then we can add column and then space so
108:07 - we can have
108:08 - like the space for our input
108:11 - age now we have this
108:14 - output and we need something to
108:18 - accept a number from our user so we can
108:21 - use
108:22 - the method i think we already used this
108:25 - before
108:26 - the scan f right so in here we need to
108:30 - specify
108:31 - the format specifier for our age
108:34 - which is um uh
108:37 - percent d with uh which pertains to
108:41 - the values that are of
108:44 - type in okay and then of course
108:48 - after this we need to add the comma
108:51 - and of course the variable age
108:54 - and of course we need to end this line
108:57 - with a similar column
108:58 - but the proper way of doing this is to
109:01 - add
109:02 - an a person a person symbol
109:05 - okay so basically what we're doing here
109:07 - is just we're getting the address of
109:09 - age and assigned value of that
109:12 - particular address
109:14 - using the value that has been inputted
109:18 - by the user
109:19 - okay and of course we can now apply
109:23 - our if statement with this particular
109:25 - age
109:26 - so the first thing that we're going to
109:29 - check
109:29 - if the age is greater than 18
109:33 - okay so we can just copy and paste this
109:36 - age variable and then we can add the
109:42 - logical operator greater than so
109:45 - basically what we're doing here is to
109:48 - check
109:48 - if the age is greater than 18 okay
109:53 - so there you go and then of course the
109:56 - statements statements
110:00 - to execute if
110:03 - condition is true
110:06 - okay so basically what we can do here is
110:09 - to
110:11 - print the
110:14 - age the age
110:19 - is greater
110:24 - than 18 okay
110:27 - and basically it pre uh it says or it
110:30 - means that the
110:31 - customer can enter the premises
110:34 - or the bar itself okay and of course we
110:37 - can also
110:38 - check if um
110:40 - [Music]
110:41 - the user or the age of the customer
110:45 - is equal to 18. okay we could also check
110:49 - that by using the logical operator
110:52 - or the relational operator equals n
110:56 - equal equal symbol so this is just um
111:00 - testing the age if it is equal to the
111:03 - value
111:03 - 18. so the first one is we're testing
111:07 - the value h
111:08 - if it is greater than 18 in the second
111:10 - one if it is equal to 18
111:12 - and then of course we need to uh display
111:15 - the corresponding
111:16 - [Music]
111:18 - output so the age is equal to
111:24 - 18 okay and then of course we can add
111:27 - another one for this
111:29 - so we can just copy and paste for
111:32 - this one we need to check if the age
111:35 - is less than 18. so this is another
111:39 - logical operator
111:41 - that we have discussed from the previous
111:43 - videos okay
111:44 - so greater than equal and then of course
111:47 - less than
111:49 - 18 and of course we can output here like
111:54 - minor is not allowed
111:57 - okay that's because the age of the
112:01 - customer is
112:02 - less than 18. and the general rule
112:06 - when it comes to bar as minors are not
112:10 - allowed so basically what we're doing
112:11 - here is very simple program
112:13 - for that particular bar okay
112:16 - now we can try to run our program we can
112:19 - just you know
112:21 - build okay
112:24 - and then we can run our program
112:27 - and we have we can enter the age of the
112:31 - customer so for example the age of the
112:33 - customer is
112:34 - 18 so the age
112:38 - is equal to 18 okay
112:41 - so as you can see this is the only
112:45 - output or this this is the only
112:47 - statement that has been executed the age
112:49 - equal to 18
112:51 - because the other one the other
112:54 - condition is not being met or not
112:57 - evaluated to true
112:59 - okay because uh the
113:02 - age is equal to 18 and of course
113:06 - this is um greater than 18 and of course
113:11 - this is
113:11 - less than 18. so we can try another one
113:15 - so for example the age is
113:18 - 19. so the age is greater than
113:23 - 18 and of course again
113:26 - this is the only uh statement that that
113:30 - has been executed
113:31 - because it the condition
113:34 - evaluated to true this is evaluated to
113:39 - false because the age is not equal to 18
113:43 - and this one is evaluated to false also
113:46 - because
113:47 - the age is not less than 18 okay
113:51 - so you can try this one more time
113:55 - to check for the for example the age of
113:58 - the customer is 16.
114:04 - so the output is the minor is
114:07 - not allowed okay that's the
114:10 - practical way of using if statement in c
114:13 - programming language in this video guys
114:16 - we're going to talk about
114:17 - if else statements and of course we're
114:20 - going to
114:22 - discuss also the nested if-else
114:24 - statements
114:25 - in c programming language now from the
114:28 - previous video we have created a simple
114:31 - application so we have assumed to create
114:34 - an application for a bar
114:37 - or establishment and then that
114:40 - particular program will
114:41 - ask for the age of the customer that is
114:44 - trying to enter the premises of
114:46 - the bar and of course we
114:50 - ask for the age right and we check for
114:53 - the age if it is greater than 18 then
114:55 - we display the age is greater than 18.
114:59 - and if the age is equal to 18 and
115:02 - we also displayed the age is equal to 18
115:06 - but
115:06 - um in case that the age is less than 18
115:10 - then we print that minor
115:13 - is not allowed so basically guys this is
115:15 - a good
115:16 - um program but we can you know upgrade
115:20 - this
115:20 - this is not uh when it comes to
115:24 - code readability and um
115:28 - code maintainability this is not a good
115:30 - practice when it comes to
115:33 - you know checking a variable or a
115:35 - certain value of a variable so now let's
115:38 - just remove this lines okay
115:43 - and of course we have this first
115:45 - condition if
115:46 - and then we check for the
115:49 - age of the customer which is you know
115:53 - 18.
115:54 - so if the age is greater than 18 we
115:56 - display
115:58 - the age is greater than 18. so i as i've
116:00 - said
116:01 - we can take this further by
116:04 - uh adding else statement right here so
116:07 - basically the
116:08 - if else statements in c is also used
116:13 - to control the program flow based on
116:16 - some condition
116:17 - and the only difference is it used to
116:21 - execute
116:22 - some statement code block if
116:25 - the expression is evaluated to true
116:28 - so it will try to execute this
116:31 - particular
116:33 - statement if this particular condition
116:35 - is true otherwise it will try to execute
116:38 - the statement of this particular
116:42 - else code block okay
116:46 - so in here we can try to display
116:49 - printf the age
116:57 - less than or equal
117:01 - to 18 okay so as you can see
117:05 - um if we try to evaluate this
117:09 - so if age is greater than 18
117:12 - so for example you have like 19 or you
117:15 - input
117:16 - 19 then of course automatically it will
117:20 - execute the statement that the age is
117:22 - greater than 18
117:24 - right now basically if we try to input
117:27 - 18
117:28 - so 18 is not greater than 18
117:31 - so it will try to
117:35 - execute the code block or the code
117:38 - or the statements inside this else code
117:41 - block
117:42 - because the condition right here
117:45 - returns false okay
117:48 - because 18 is not greater than 18
117:53 - and there you go it returns
117:57 - false okay now we can also add another
118:00 - condition right here
118:02 - so for example we want to check if the
118:06 - age is equal to 18
118:09 - okay we can check if the age is greater
118:12 - than 18
118:12 - and of course we can also check if the
118:15 - user or the age
118:16 - is equal to 15 and then otherwise
118:20 - it's it is less than 18 and
118:24 - we can add another else statement right
118:27 - here
118:27 - but for now let's just you know add the
118:31 - another condition or condition
118:33 - evaluation
118:35 - test expression if the user or the age
118:39 - is
118:40 - equal to 18.
118:43 - okay so basically this particular
118:45 - statement
118:48 - if this particular condition right here
118:50 - is
118:51 - false then it will try to evaluate
118:54 - one more time with this particular
118:56 - condition
118:57 - is the age equal to 18. so if that
119:00 - particular age is equal to 18
119:02 - then we can display the age
119:06 - is equal to
119:09 - 18 right there but in case
119:13 - if the age is less than 18 we can also
119:19 - add the else statement right here
119:23 - and we can display that the age
119:28 - is less than 18.
119:31 - okay so as you can see we have you know
119:33 - implemented a practical implementation
119:35 - of if else statement and we can add
119:39 - you know the first if uh condition
119:42 - and then we can add another condition
119:45 - else if
119:47 - and then we can test this condition
119:49 - right here otherwise if these
119:51 - two conditions are returning false then
119:54 - we can
119:55 - you know execute the statements in this
119:59 - particular as
120:01 - block okay so we can try this we can run
120:03 - our program
120:07 - build and run so let's try
120:13 - first the possibilities so for example
120:16 - the customer or the enter the age of
120:18 - customer
120:19 - for example 25 so the age is greater
120:23 - than 18.
120:24 - so let's try to run this once again
120:29 - and we can try to input 18
120:34 - so the age is equal to 18
120:37 - okay so this particular condition right
120:40 - here
120:41 - returns true now we can also try
120:44 - to uh input the value which is you know
120:49 - less than 18 so for example 16
120:51 - and then of course the age is less than
120:54 - 18. okay so as you can see in this
120:57 - particular example there will be only
121:00 - one um block of code that will be
121:03 - executed
121:05 - so so for example this one if this will
121:07 - uh return true
121:09 - the age is greater than 18 then it will
121:12 - execute this statement right here or
121:14 - inside this
121:14 - if's block then it will ignore the other
121:19 - like the else if and the else now if it
121:21 - will return
121:23 - false then it will try to evaluate
121:26 - the expression inside here and if it is
121:29 - true or it will return true
121:31 - then it will execute this statement and
121:34 - ignore the else
121:36 - if all of this statements or conditions
121:41 - here will return false then
121:44 - the else statement will be executed
121:48 - okay and it will you know try to print
121:51 - the age is less than
121:53 - 18. now there are cases that we need
121:57 - to check also for example inside this
122:01 - if statement we want to check if
122:05 - um the age is less than 25
122:09 - okay less than 25 uh although
122:13 - we have like the age is greater than 18
122:15 - we want to check also if the age is
122:19 - less than 25 so we could add also
122:22 - um if statement right here so this is
122:26 - like
122:26 - what we call nested
122:29 - if else statements
122:35 - okay nested if else statement so we can
122:38 - also check here
122:39 - if age is less than
122:43 - 25 okay and then we can
122:47 - display here printf
122:51 - and then the age
122:54 - is
122:56 - [Music]
122:58 - greater than
123:01 - 18 but less than
123:04 - [Music]
123:07 - 25 right
123:10 - less than 25 and of course we can
123:14 - also add else statement here or else if
123:17 - like for example else if
123:20 - the age is greater than 25
123:28 - then we can say here printf
123:32 - the age is greater than
123:36 - [Music]
123:37 - 18 and greater than
123:41 - 25 so there are cases that you want to
123:44 - check
123:45 - this you know um
123:48 - if you want to like in the future you
123:51 - want to implement
123:52 - an application and you will try
123:56 - to check the values and
123:59 - somewhere in your code you need to check
124:01 - uh like
124:02 - the value age here and also you can also
124:06 - check if the value is less than 25
124:09 - or greater than 25 so
124:12 - it is very useful when it comes to
124:15 - programming this particular nested if
124:17 - else
124:17 - statement so let's try to run this and
124:19 - before that i'm just going to add a
124:23 - backslash n right here
124:26 - so that we will have a new line
124:30 - after this particular code execution
124:34 - so let's try to build and run our app
124:36 - first
124:38 - and try to input
124:42 - a value that is over 18 so for example
124:45 - 23. so the h is greater than 18
124:51 - and there's another statement that has
124:53 - been executed right here
124:54 - the age is greater than 18 but less than
124:57 - 25
124:58 - we can also you know run this once again
125:02 - and input 26
125:06 - so the age is greater than 18 and
125:08 - there's also
125:09 - a statement here the age is greater than
125:12 - 18
125:13 - and um greater than 25
125:17 - okay and that's how you use the
125:20 - if else statement or um
125:24 - yeah if else statements in c and then of
125:27 - course if you have like
125:28 - many conditions that you want to check
125:30 - so you can also add
125:33 - another conditions right here
125:36 - okay and then another condition
125:41 - and um otherwise if there
125:45 - if these conditions are not met then you
125:47 - can
125:49 - display or execute the statement inside
125:52 - this
125:53 - else code block okay now
125:57 - the nested if else statement requires
126:00 - only one
126:01 - if okay so you can't use like
126:04 - uh two ifs here
126:07 - because it will try to separate the
126:10 - uh chain of if else if you use
126:14 - another if so what you can do is
126:17 - uh one if and then else if
126:20 - else if and also one else
126:24 - statement so it doesn't matter how many
126:27 - else if
126:28 - statement that you can add okay
126:31 - for as long as it is like has one
126:34 - if and has one uh
126:37 - else statement okay so and in this video
126:41 - guys we're going to
126:42 - learn how to use ternary operators
126:45 - in c so basically guys the
126:48 - ternary operator is used to execute code
126:52 - based on the result of a binary
126:56 - condition
126:57 - so when we say ternary operators it is
127:00 - used to execute
127:02 - code based on binary condition
127:05 - okay and it takes in a binary condition
127:09 - as input
127:10 - and which makes it similar to an
127:14 - else control flow block so so for
127:17 - example guys
127:18 - from our previous tutorial
127:22 - we have discussed how to use if else
127:25 - statement okay
127:29 - so we have this kind of structure so for
127:31 - example we want to use
127:32 - this structure or code to
127:36 - get the maximum two
127:40 - values or two variables
127:45 - so if you want to like return the max
127:48 - value all you have to do is
127:50 - compare the two variables a and b
127:55 - so so for example if a is
127:58 - greater than b then of course
128:01 - a or max will be assigned
128:05 - to a otherwise the max number will be
128:10 - the value of variable
128:13 - b okay so
128:16 - the ternary operator guys instead of
128:18 - using if else
128:20 - like this is too long for a simple
128:25 - you know checking of value condition
128:29 - so the binary or ternary operator
128:32 - uses only single line or we can use the
128:35 - ternary
128:36 - operators in a single line and
128:39 - it returns a value so behaving
128:42 - similar to a function okay so let's
128:45 - try to see the syntax of
128:48 - the ternary operators in c so basically
128:51 - the syntax is like this
128:56 - result and then binary condition and
128:58 - then you have to add the
129:01 - question mark and then you have
129:04 - like the value when the binary condition
129:08 - is true otherwise the value
129:11 - of uh you know value
129:15 - to be returned if the binary condition
129:18 - is false so we have to
129:21 - take note guys that the ternary cannot
129:23 - be used to execute code
129:26 - so it must be either returned in the
129:30 - function
129:32 - or set equal to a variable so you cannot
129:36 - use this
129:37 - something like this so you cannot leave
129:39 - your ternary operator like this
129:42 - so it should be equal to or be set equal
129:45 - to a variable
129:47 - okay something like this or you can use
129:50 - it as a return in a particular
129:53 - function okay so let's try
129:57 - to implement a ternary operator
130:02 - so for example you want to check the max
130:05 - value so the long version is this
130:08 - if a is greater than b then assign
130:12 - the value of a to d max
130:15 - and then otherwise assign the value of b
130:18 - to the max variable so as i've said
130:22 - we can you know make this a little
130:25 - shorter by using the ternary operators
130:28 - so in order for us to do that we just
130:30 - need to
130:31 - um so for example get the variable max
130:35 - and then the binary condition is
130:39 - a is a greater than b
130:43 - okay so we can add
130:46 - the question mark there you go
130:49 - question mark and then the value to be
130:52 - returned
130:53 - if the binary condition
130:57 - is true so of course if a is greater
131:00 - than b
131:01 - then the max value is a
131:04 - right otherwise
131:08 - the value is b or the return
131:12 - or the max value is the value of
131:16 - variable b as i've said guys
131:20 - this is the
131:23 - explanation of conditional ordinary
131:26 - operators
131:28 - in c so we have this variable
131:32 - and then we have the expression or the
131:34 - condition
131:36 - and then you have to add the question
131:38 - mark
131:39 - and then the value if true so it will
131:42 - return
131:43 - the resultant value into the variable
131:46 - and it will assign
131:47 - this value to this variable otherwise uh
131:52 - if the expression is false then the
131:54 - resultant value of
131:56 - uh you know the false then it will be
131:59 - returned
132:00 - as the value of the variable that we
132:02 - have added
132:03 - okay so we can check this right now we
132:06 - can remove this this is
132:08 - the long version
132:12 - and we can try to print this
132:16 - display the result the max
132:20 - value is and then format specifier which
132:25 - is
132:25 - we're using in so percent b and then of
132:29 - course
132:30 - the maps variable okay
132:36 - let's just remove this
132:41 - so clean and build or build and run our
132:46 - application
132:48 - so let's try this uh
132:52 - oh um we don't have
132:55 - like the value for a
132:59 - and b so let's try to assign values to
133:02 - this
133:04 - variable so for example a equals
133:07 - 15 and b equals
133:10 - 16 okay so clean and build our
133:14 - application
133:17 - and we'll try to
133:21 - [Music]
133:23 - get the output so the max
133:26 - value is 16 okay
133:30 - so we have here
133:33 - the b variable 16
133:36 - so that's the value of
133:40 - max variable that is being assigned
133:43 - because this particular condition
133:46 - returns false so that's why the value of
133:50 - b
133:50 - variable is being assigned to the max
133:53 - variable so we can also try this with
133:57 - the other
133:59 - you know if the a is greater than b so
134:02 - like
134:04 - 20 so obviously
134:08 - a is greater than b so let's try this
134:11 - exit this right now and then
134:15 - build and run our application
134:20 - so let's try this so there you go
134:24 - the max value is 20.
134:28 - so this condition returns true
134:32 - because a which is the value is 20
134:37 - and that's greater than b because
134:40 - b is the value is 16.
134:44 - so it returns the value of a so like
134:47 - this
134:49 - so it ignores the second part
134:53 - which is the b because it returns
134:56 - true and then of course after
134:59 - after evaluation the value of a is being
135:03 - assigned to the max
135:05 - variable that we have here so it printed
135:08 - out
135:08 - that the max value is percent d
135:11 - and then which is 20 so let's try
135:14 - let's try this one more time
135:20 - just so you can see the output so the
135:22 - max value
135:23 - is 20. okay so this is quite useful
135:27 - if we only want to um
135:31 - check a certain value so like
135:34 - if you're planning to use if else then
135:37 - you might want to use the ternary
135:40 - operators which is like this
135:42 - so it will just save you time it will
135:46 - save you of
135:48 - code space and i think it's clear
135:53 - rather than using the f and else
135:57 - statement so this is pretty straight
136:00 - forward
136:01 - when it comes to checking the value and
136:02 - assigning the value to
136:04 - the max variable okay
136:07 - so you just have to remember that it
136:09 - cannot be
136:10 - used to execute code you just have to
136:14 - set this equal to a variable or you can
136:17 - use this as
136:18 - a return value of a function
136:22 - okay and in this video guys we're gonna
136:24 - talk about the
136:25 - c go to statement okay
136:29 - so so far we have discussed the if
136:31 - statements and
136:32 - how it is used in c to control
136:35 - statement execution based on some
136:38 - conditions
136:39 - or decisions now the flow of execution
136:43 - also depends on other statements
136:46 - which are not based on conditions that
136:48 - can you know control the flow
136:51 - and of course c supports a unique form
136:54 - of a statement that is you know go to go
136:57 - to statement
136:59 - which is used to branch unconditionally
137:02 - within
137:02 - a program from one point to another
137:05 - point inside our c
137:06 - program so although this is not a good
137:09 - habit to use you know
137:10 - go to statement in c but there may be
137:13 - some situations
137:15 - where we can use the go to statement
137:19 - and it might be you know desirable to to
137:21 - make use of
137:22 - the capability of the go to statement
137:26 - so the go-to statement is used by
137:29 - programmers
137:30 - to you know change the sequence of
137:32 - execution
137:34 - of ec program by shifting the control
137:37 - to a different part of the same program
137:40 - so i think i have mentioned
137:42 - this before in our you know tutorial
137:45 - series
137:46 - that the execution of a c program is
137:48 - sequential
137:50 - you know uh like if you have statements
137:53 - from
137:54 - line six here seven and eight and nine
137:57 - so it will try
137:58 - to execute from line six seven
138:02 - eight nine ten sequentially
138:05 - okay but you know we have this uh
138:09 - go to statement to control that
138:11 - particular flow we can
138:12 - go to the a certain point of our program
138:16 - by using the go to statement
138:17 - so basically this basic syntax of go to
138:20 - statement
138:21 - is like this
138:24 - we have uh this particular syntax of
138:27 - our go to statement so we have this
138:31 - keyword goto
138:32 - and label okay
138:35 - and then of course we need to add label
138:37 - at some point in our program
138:39 - okay and of course the
138:42 - long version of this syntax is like this
138:46 - let me show you uh real quick so we have
138:49 - like
138:50 - a few lines and then we have the
138:53 - label and then we have the statement
138:58 - okay and every time the program
139:01 - meets or found the go to statement
139:04 - so it will try to find the label
139:07 - that has been specified in this
139:09 - particular line so go to label and then
139:11 - it will skip the lines or statements
139:14 - between
139:15 - or other you know other statements and
139:18 - it will go directly to the label
139:21 - and it will execute the
139:24 - statements below the label
139:27 - in our c program now we can
139:31 - implement this and of course guys
139:35 - it can also be used to this is
139:38 - a forward uh jump in our program
139:42 - because we have specified the go to
139:44 - statement and then it forwarded to the
139:46 - label
139:47 - statements below okay but it could be
139:51 - also the
139:52 - backward jump of a program so for
139:54 - example
139:55 - after execute execution of some lines
140:00 - it will jump into this particular um
140:03 - label so after execution it will jump to
140:05 - this
140:06 - label that's why it is called the
140:08 - backward jump in
140:09 - our c program so so for example if you
140:12 - have like
140:13 - no other label available here so it will
140:16 - jump
140:17 - the program execution from here and then
140:19 - go back to line nine
140:21 - so that's how the backward jump inside
140:24 - our c program so let me just
140:28 - clarify this uh it is called
140:32 - backward if you know the go to label
140:35 - is here and then it will try to jump
140:38 - on top or the lines before that i'll go
140:41 - to label
140:42 - and it will uh execute all the
140:45 - statements under this
140:46 - okay and it is called forward jump
140:50 - if the label is here
140:53 - so after this
140:57 - or after execution of this line it will
140:59 - try to go
141:00 - to this particular um line
141:04 - label and it will execute the statements
141:07 - under this partic particular label so
141:10 - now let's try this
141:11 - and let's just build a practical or
141:15 - simple
141:16 - implementation of this go to
141:19 - statement so let's just remove this
141:23 - and then we can try to ask for an
141:26 - age just like what we have from the
141:28 - previous video
141:29 - and then we can try to add the labels
141:32 - for example g and this will be
141:36 - the label name okay and then of course
141:39 - we have
141:40 - a statement under this particular label
141:43 - so printf so so for example
141:47 - we will try to execute this
141:50 - if the age is
141:54 - 18 so like you are
141:57 - eligible or something okay
142:01 - then we can try to add the new line here
142:05 - and then of course we can try to add
142:08 - another label
142:10 - so another label name and we can print
142:15 - um you are not eligible
142:18 - okay something like this and we can
142:22 - also add the new line here
142:27 - okay and then of course
142:30 - we do have the statement to ask for
142:34 - the age so enter your age
142:37 - okay and then semicolon
142:41 - and then we can use the scan f function
142:44 - to get the actual value from the user
142:48 - so percent d which which is the form of
142:50 - specifier again
142:52 - and then ampersand and the variable
142:55 - name which is age and of course we can
142:58 - have the condition right here
143:00 - like if the variable age is greater than
143:05 - or equal to 18 then
143:09 - um you can use the statement go to
143:13 - uh the label g okay
143:16 - and else we can go to the
143:21 - label s okay now
143:24 - as you can probably observe here we are
143:27 - using
143:28 - if else but we don't have the curly
143:30 - braces
143:31 - right so you can do the if an else
143:34 - statement
143:35 - like this without the curly braces
143:38 - because we don't
143:38 - we only have one line in this particular
143:41 - or
143:42 - after the condition we have only one
143:44 - line
143:45 - and always also uh else we only have one
143:49 - line but if you have like
143:51 - five lines here you have to add the
143:53 - curly braces
143:54 - okay so in c programming it like
143:58 - understood if there's like one line to
144:01 - execute so there's no need to use the
144:03 - curly braces
144:04 - okay now we can
144:07 - try to run this and see how it works so
144:11 - for example
144:12 - build and run our application
144:15 - and try to evaluate
144:19 - and see how this particular program
144:22 - works
144:23 - so basically it
144:26 - executed line g and line
144:29 - s right so you are eligible and you are
144:32 - not
144:33 - eligible now if we try to go or
144:36 - input number 18 right here
144:39 - so it will try to
144:44 - execute again the line
144:47 - 9 10 11
144:51 - and of course it's gonna you know ask
144:54 - for the age again
144:55 - right so it starts from this particular
144:58 - line 9 which is the
145:00 - label g because we have specified
145:04 - if the age is greater than or equal to
145:06 - 18
145:07 - then it will try to go to label g
145:10 - now if you try to go to or input
145:14 - 16 so it will try to go
145:18 - to label or yeah line 11 which has the
145:22 - label
145:23 - s right and it will just display
145:27 - you are not eligible and it
145:30 - it did not execute the statement from
145:33 - line 9
145:35 - or line 10 it directly
145:38 - i'll go to 11
145:41 - line or line 11 which has the label s
145:44 - and then it printed out the
145:48 - statement you are not eligible and also
145:51 - uh it also adds the or i mean asked
145:54 - the h again and then it asks for the
145:59 - uh input from the user okay
146:03 - we can try this one more time so for
146:04 - example 15
146:06 - so it's going to execute
146:10 - all the lines starting from line
146:13 - 11 with the label
146:17 - name s okay so guys
146:20 - um as i've mentioned uh earlier
146:24 - that the the go to statement is a unique
146:28 - form of statement
146:29 - okay and sometimes uh it is not
146:33 - advisable to use go to statement in your
146:35 - c program but there are situations
146:37 - or conditions that you might want to use
146:40 - this particular go to statement
146:42 - so for example um
146:45 - if the you uh if you want to skip
146:48 - some of the lines in your program so
146:51 - let's try that
146:53 - okay so like for example you have
146:58 - statements like this
147:03 - printf and then
147:07 - this is
147:10 - the end of the program
147:13 - okay and then
147:18 - we can go like
147:23 - instead of using s we can add a label
147:25 - here
147:26 - e and then it will execute
147:30 - you know e instead of
147:34 - s so basically
147:38 - after this condition returns
147:41 - false then it will execute this and it
147:44 - will call the label
147:45 - e and then execute that this is the end
147:48 - of
147:49 - our program so let's try that
147:52 - execute or exit our program first and
147:55 - then
147:56 - build and run
148:01 - so let's try to input first 18
148:06 - so it's going to you know
148:11 - execute from line 9 until
148:14 - line 15 and then if if we try to
148:17 - input 10 then it's gonna say
148:20 - this is the end of the program
148:24 - okay so i think um that's all there is
148:28 - to it
148:28 - in this tutorial guys and i hope that's
148:30 - clear on how to use
148:32 - the go to statement in c so
148:35 - again this is quite useful in some
148:36 - situations and in this video guys we're
148:39 - gonna talk about
148:40 - loops in c programming so sometimes it
148:43 - is necessary for the program
148:45 - to execute the statement several times
148:49 - and c loops execute a block of commands
148:52 - in a specified number of times until
148:55 - a condition is met so in this video
148:57 - tutorial
148:58 - you will learn about all the looping
149:01 - statements of c programming
149:04 - and along with their use so as you can
149:07 - see computer is the most
149:09 - um suitable machine to perform
149:11 - repetitive test
149:13 - and it can tirelessly do a task tens of
149:16 - thousands of times
149:18 - okay and basically like every
149:21 - programming language has this particular
149:22 - feature
149:23 - to instruct to do such repetitive tests
149:26 - with the help of certain form of
149:29 - statements
149:30 - so that's why we have this loops and
149:32 - then of course guys
149:33 - in c the c programming language supports
149:37 - like three types of loops so
149:40 - we're going to discuss first while loops
149:43 - okay
149:44 - so we have while loops we have do while
149:50 - and of course we also have the for loops
149:53 - okay so we're going to dissect
149:56 - each type of loop so that we could you
149:59 - know
150:00 - better understand how it works and
150:03 - how we can use these loops in in a
150:05 - certain situation
150:07 - so basically guys when we say
150:10 - loop i'm just going to show you a simple
150:13 - flowchart
150:15 - so we have here a simple flowchart that
150:18 - describes
150:19 - the nature of loop
150:22 - or loops in general so we have like
150:25 - start
150:26 - and then we can declare a counter or a
150:28 - variable counter
150:30 - and then our program will try to
150:31 - evaluate the condition
150:33 - and then if the condition is you know
150:36 - returns true
150:37 - it could execute statements
150:40 - and then increment the counter and then
150:44 - again evaluate the condition if the like
150:47 - for example the increment counter
150:50 - is equal or you know greater than
150:53 - something and then execute statements
150:56 - uh increment counter and then
150:59 - evaluate condition and lastly
151:03 - if the condition is met then it will
151:05 - stop the
151:06 - execution of that particular loop
151:09 - so basically guys a loop is just you
151:11 - know doing or executing
151:14 - repetitive statements inside
151:17 - our c program so there are like
151:21 - control statements we have statements
151:24 - that we can use
151:26 - so we have a break
151:29 - we can have like um continue
151:33 - and then of course we have the go to
151:36 - statement that we have discussed
151:38 - previously
151:39 - in our video tutorial series okay so as
151:42 - i've
151:42 - as i've said we will discuss
151:46 - first the while loops in c programming
151:50 - okay so see while loops statement allows
151:53 - to repeatedly
151:54 - run the same block of code until the
151:56 - condition is met
151:58 - and of course while loop is the most
152:01 - basic
152:02 - loop in c programming and while
152:05 - a while loop has one condition and it
152:08 - contains
152:10 - uh or it executes as long as the
152:13 - condition is true and then
152:15 - the condition of the loop is tested
152:17 - before the body of the loop is
152:19 - executed so
152:20 - [Music]
152:22 - uh the syntax for our while loop is like
152:25 - this
152:26 - so we have the keyword while
152:30 - and then a condition so
152:34 - like a test expression and then if this
152:37 - condition
152:38 - is like true then it will try to
152:42 - execute the statements
152:45 - inside this particular while loop
152:48 - okay now we have like we can
152:52 - have a very simple application for this
152:56 - so for example we will try
152:59 - to implement this
153:05 - okay so we can declare like
153:09 - a variable so int n
153:12 - equals one and then
153:16 - times plus five and then of course we
153:20 - can
153:21 - declare the while loop for our program
153:24 - like this
153:25 - and then open and close parenthesis and
153:28 - then we can say
153:29 - n is less than or equal to
153:34 - times okay so we have to add the
153:38 - curly braces for that and then inside
153:41 - this curly braces
153:43 - uh these are the statements that will be
153:45 - executed if this particular condition
153:48 - is true okay
153:51 - so it will try to print like
153:55 - c while loops
154:00 - and then we can add the percent or
154:04 - yeah percent d which is the format
154:06 - specifier for our
154:08 - in variable and then we can display the
154:11 - n okay and then of course we can
154:17 - we can increment the var uh the value of
154:20 - n by using the increment that we have
154:23 - discussed before
154:24 - which is n plus plus so basically this
154:27 - is just
154:27 - you know basically saying n
154:31 - equals n plus one okay i think
154:34 - uh we have already discussed that the n
154:37 - plus plus increment
154:38 - in our video previous videos okay
154:42 - now we have set the value
154:45 - n equals to one okay and then we have
154:48 - set the number of times the loop should
154:50 - be
154:50 - executed so that's basically five
154:54 - uh there should be five execution and
154:57 - then we
154:59 - added the while statement and then check
155:01 - the condition
155:02 - if n is less than or equal to
155:06 - times then execute this
155:10 - statements right here so we can try to
155:12 - check this
155:13 - build and run our application
155:19 - and try to see the output of our program
155:23 - and i'm going to you know slowly explain
155:25 - to you
155:27 - what happens in this particular program
155:30 - so you can see the output uh right here
155:33 - cuy loops one see while loops two
155:36 - and then three four and five
155:40 - and after uh five it no longer
155:44 - executed because it you know ended
155:48 - the loop okay so
155:52 - i'm going to explain to you how we got
155:55 - this
155:56 - output so first thing as i've said we
156:00 - declare
156:01 - n equals to 1 so in this condition 1
156:04 - is less than or equal to 5 which is the
156:06 - value
156:07 - of times so basically and of course it
156:10 - is true
156:11 - that one is less than or equal to five
156:14 - so
156:14 - that's why it executed this particular
156:16 - statement
156:17 - c while loops and then it displays
156:20 - the value one right here okay
156:24 - and then it incremented the value n
156:28 - so now the end becomes two
156:31 - okay and then it will go
156:34 - here in our condition once again so two
156:37 - is less than or equal to
156:39 - five so that's true because obviously
156:43 - two is less than or equal to five
156:47 - so that's uh it executes this statement
156:50 - right here
156:51 - cy loops and then the value of our n
156:54 - which is
156:55 - two again it incremented the
156:59 - n variable so uh
157:02 - the n now becomes three so after that
157:05 - one
157:07 - we will go back here in the condition is
157:10 - three
157:12 - equals or i mean less than or equal to
157:16 - five
157:17 - so that's true because 3 is equal to
157:20 - or i mean less than 2 5 so that's why it
157:23 - printed the output right here
157:27 - c while loops and then the value of our
157:29 - n equals to 3.
157:31 - and now after that it incremented
157:34 - another time the
157:35 - n and the end becomes 4 now and
157:38 - it go back to the condition s 4 less
157:42 - than 5.
157:44 - so basically four is less than
157:47 - five obviously so that's why it printed
157:50 - out
157:51 - the c while loops and then uh four
157:54 - the value of our n and again incremented
157:58 - added one to the end variable and then
158:02 - the n now becomes five and then go back
158:05 - here and the condition
158:07 - is five less than or equal to
158:10 - five so it uh it
158:13 - uh true again because 5 is equal to 5
158:17 - so it printed out c while loops and then
158:21 - the value of of our n which is 5.
158:24 - now it incremented another time the n
158:28 - variable and now the the end variable
158:31 - becomes six
158:32 - and it will go directly here in our
158:35 - condition
158:36 - is six less than or equal to five
158:41 - so it returns false because six is not
158:44 - less than
158:44 - or not even equal to five that's why it
158:48 - uh ended the loop and it never
158:51 - executed the uh
158:54 - this particular statements right here
158:56 - once again because 6 is not
158:58 - less than or equal to 5 which is the
159:02 - value of our times variable so in this
159:04 - video guys we're going to discuss
159:06 - another type of loop which is the do
159:08 - while
159:09 - so from the previous tutorial we already
159:11 - have discussed the while loop
159:13 - okay and then we implemented a simple
159:16 - iteration program
159:18 - where we can see the value of the
159:20 - variable
159:21 - each of the iteration of our wine loop
159:24 - now the difference between while loop
159:26 - and do while is that the while
159:29 - loop will try to evaluate first the
159:31 - condition
159:32 - and then if this condition is you know
159:35 - return true
159:36 - then it will execute the statement
159:39 - inside this particular
159:40 - while loop whereas when we are trying to
159:43 - use the do while loop
159:45 - then the statements inside the loop
159:48 - will you know execute at least once
159:51 - before the condition is being evaluated
159:55 - so
159:55 - the syntax for that is like this we will
159:58 - just remove this for now
160:00 - all these lines of the while from the
160:03 - previous tutorial
160:09 - okay so this is the format or basic
160:11 - format of the do while statement
160:14 - or do i loop in c so basically we have
160:18 - the do
160:19 - keyword and then open and close curly
160:21 - braces
160:22 - and then the statements or group of
160:25 - statements okay
160:27 - now after the curly braces
160:30 - then it will have this the while keyword
160:35 - and then open and close parenthesis with
160:37 - the condition
160:38 - inside it so as i've said earlier guys
160:41 - that this particular loop will try to
160:44 - execute
160:45 - at least once before the condition is
160:48 - being
160:49 - evaluated okay so as you can see if you
160:52 - wanna
160:53 - like execute first some statements
160:55 - before you could
160:56 - evaluate the condition so
161:00 - so the dual loop is the way to go
161:03 - so we will try to create another program
161:06 - guys
161:07 - showcasing how this particular do while
161:10 - statement or do while loop
161:12 - looks like or how it works so basically
161:15 - guys we could
161:17 - um initialize some variables here so for
161:20 - example the
161:21 - n so int n equals 1
161:26 - and then we could also declare
161:30 - another variable which is times
161:34 - so basically what we are doing here or
161:36 - what we are declaring here is two
161:38 - variables
161:40 - for our do while and the
161:43 - n represents the
161:46 - number i mean the value of the iteration
161:49 - or
161:50 - the value of the variable each iteration
161:53 - and then of course the
161:54 - times is the number of times the
161:57 - loop should execute okay
162:00 - now inside our do while or do
162:03 - statement we could
162:07 - add a printf statement here
162:11 - and then you could say c
162:15 - do while loops and then the
162:18 - format specifier
162:22 - percent d backslash n and
162:26 - of course uh the n
162:29 - variable okay so we have this
162:32 - uh printf statement so basically what
162:34 - what we're trying here is
162:36 - we're trying to display the value of
162:39 - n every um you know execution
162:43 - of this particular statements okay
162:47 - and in here below this printf statement
162:50 - we could
162:51 - increment the n
162:55 - by you know using this statement n
162:58 - equals
162:59 - n plus one or you can simply use
163:03 - the n plus plus version
163:06 - of this particular statement so n equals
163:09 - n plus one so again every iteration
163:12 - we would try to increment the value of
163:15 - our n plus
163:16 - one and then inside here um
163:20 - the while and then open close
163:21 - parenthesis we could
163:24 - add the condition so for our condition
163:27 - you can
163:28 - add the n and then less than
163:31 - or equal to the number of times
163:35 - we want this while or do while to be
163:39 - you know executed okay so i think that's
163:43 - all for this um do while statement
163:47 - so we could try to run our program
163:50 - and then build and run
163:54 - and see how this particular program
163:56 - works
163:57 - okay so basically guys i will try to
164:01 - explain it to you how this or how we got
164:04 - this
164:07 - output so from the initial
164:12 - value of rn we have
164:15 - [Music]
164:17 - executed the do statement right here
164:20 - so we printed out like the value is
164:24 - c do y loops then percent t
164:27 - and then the value of our n is one
164:31 - okay so after this iteration
164:34 - we um increment the value of our n
164:38 - by one so that's n equals
164:41 - n plus two okay or i mean one
164:45 - n plus one and then the semicolon
164:48 - and then of course we will try to
164:50 - evaluate this in our condition
164:52 - so two is less than or equal to times
164:56 - which is five so of course two
164:59 - is less than 5 so that makes sense
165:02 - and then it will try to execute
165:06 - the statements inside the
165:09 - uh this curly braces okay then printf
165:13 - c do while loops and then of course it
165:16 - will try to
165:17 - to output the value two okay
165:20 - after this the n will be incremented
165:24 - again by
165:25 - one so n equals n plus one so the value
165:28 - now or the
165:29 - n value now becomes um
165:32 - three and then evaluate it in our
165:36 - uh open and close parenthesis so
165:40 - three less than or equal to five
165:43 - so obviously three is less than
165:46 - five so it will try to implement or
165:49 - execute
165:50 - again the statement inside our current
165:52 - basis
165:54 - and then display three
165:58 - this will be the line uh three
166:01 - and then of course it will increment
166:03 - again the value n and it
166:05 - the end becomes four now and then uh
166:08 - evaluated once again is four
166:11 - less than or equal to five
166:14 - so um basically four
166:17 - is uh you know less than five so it will
166:20 - execute the statement printf again
166:23 - display the value 4 and then
166:28 - increment again the n
166:31 - it becomes 5
166:34 - and then after that it will try to
166:37 - evaluate the statement is less or n is
166:40 - less than equal to five
166:42 - so we have set now the value to five so
166:45 - five
166:46 - is equal to five so it will try to
166:51 - execute the statement once again and if
166:54 - the
166:54 - five value now becomes or the end value
166:57 - now becomes six because we
166:59 - try to increment it here so six will be
167:02 - evaluated inside
167:03 - our while statement then
167:06 - six is less than or equal to five so
167:10 - that's basically
167:11 - not true because of course obviously
167:14 - six cannot be less than or cannot even
167:17 - be
167:18 - equal to five so that's why it will try
167:22 - to
167:23 - end the loop because
167:27 - the condition returns false
167:30 - already okay so that's how the do while
167:33 - statement works
167:35 - and guys make sure that um
167:39 - there's like infinite
167:42 - um end of your loop because there are
167:44 - cases
167:45 - that you know the condition will not be
167:48 - evaluated uh into false at some point in
167:52 - our program so
167:53 - that will make it like the infinite loop
167:57 - so the concept of infinite infinite loop
168:01 - so be careful to place a
168:05 - condition here that will try to or like
168:08 - will be evaluated false at some point in
168:10 - our program
168:11 - because you don't want to have the
168:13 - infinite loop because
168:16 - uh the program will run
168:19 - infinitely and you don't want that it
168:21 - would you know consume the memory of
168:23 - your computer
168:24 - so that's why you you need to be
168:27 - careful with the infinite loop so make
168:30 - sure again
168:32 - to add a condition that will be
168:34 - evaluated as false at some point in your
168:36 - program
168:37 - and in this video guys we're going to
168:39 - discuss another type of loop
168:42 - which is a for loop so from the previous
168:45 - tutorials we have like
168:47 - um discuss already what is white loop
168:50 - what is do while and how it can be used
168:52 - in rc programming or c programs
168:56 - so as i've said guys in this video we're
168:58 - going to discuss for loops and of course
169:00 - we're going to describe the syntax of
169:02 - for loops
169:03 - okay so the syntax for for loops guys
169:07 - is like this i'm going to copy and paste
169:10 - this here
169:14 - so we have here the four keyword
169:18 - and then we have the open and close
169:20 - parenthesis
169:21 - in which we have we can you know there
169:24 - uh there are like three um statements
169:28 - that are available for us so
169:31 - the first one is the init
169:34 - or initialize and then the second
169:38 - um statement is the condition
169:42 - and the third one is increment
169:45 - or it could be also decrement
169:48 - okay so this three statements inside
169:51 - this
169:52 - open and close parenthesis is separated
169:54 - by semicolon
169:56 - okay and of course guys each of this
170:00 - statement plays you know a big role
170:03 - in our for loop okay now we can try to
170:08 - implement our very simple for loop so
170:10 - for example
170:11 - let's um declare a variable
170:14 - for our for loop um inside the
170:18 - initialize
170:19 - statement we could you know initialize a
170:23 - variable right here like for example int
170:26 - x equals zero
170:29 - so we could do that here we could
170:32 - initialize our variable
170:34 - into something like zero or it could be
170:37 - one if you want to start um
170:39 - [Music]
170:41 - one so basically guys it is the
170:44 - uh the same as declaring the variable
170:47 - here so
170:47 - index 0 so you could also
170:50 - do that here
170:54 - initialize the value to x so
170:57 - this 2 is just the same so basically
171:00 - we're just declaring the variable
171:01 - and setting the initial value say for
171:04 - example 0 or
171:06 - 1. now the second statement
171:10 - for this particular for loop
171:13 - um we could you know add the condition
171:17 - so the condition is something like this
171:20 - we could check if the
171:24 - x variable is less than or equal to
171:28 - 5 just like what we have from the while
171:31 - loop
171:32 - and do y loop so we're checking if
171:35 - the value of the variable is less than
171:38 - or equal to five
171:39 - and of course the last part or the last
171:41 - statement for this particular open and
171:44 - closed parenthesis for loop you could
171:45 - you know
171:47 - add the increment or it could be the
171:50 - decrement depending on
171:51 - the initialize the condition of course
171:55 - in your for loop so for example you want
171:57 - for now is to increment
171:59 - so you could actually do this like this
172:01 - x
172:02 - equals x plus
172:05 - one inside the for loop and then of
172:08 - course guys
172:09 - the statements inside the
172:12 - curly braces so the statements you know
172:15 - you could
172:16 - execute statements right here so for
172:18 - example printf
172:22 - the value of x column
172:25 - and then the format specifier percent d
172:30 - backslash n to have a new line
172:34 - then specify our variable x and then
172:38 - end this off with each semicolon just
172:41 - like this
172:43 - so guys basically what we're trying is
172:44 - to display the value of the variable x
172:47 - each iteration of this particular loop
172:51 - so we could you know
172:52 - build and run this application and
172:56 - see how it works now we have this output
172:59 - the value
173:00 - is one the value is two
173:03 - the value is three the value is four
173:06 - and five so guys i'm going to explain to
173:09 - you
173:10 - how we come up with this output
173:13 - so at first guys you know we declare the
173:17 - variable x and initialize the value into
173:22 - one so now the value for our x is
173:25 - one okay so value of
173:29 - rx is what um
173:32 - [Music]
173:34 - one okay and then
173:38 - um let me
173:42 - write first is equal or x is equal
173:45 - or less than or equal to five and then
173:49 - uh increment
173:52 - okay so so for example
173:55 - at the first iteration of this for loop
173:58 - we have
173:59 - initialized the value into one or yeah
174:02 - the value of x into one
174:05 - and then we try to evaluate the
174:07 - statement is
174:08 - x is less than or equal to five
174:11 - so of course x is
174:14 - less than uh five since
174:18 - the value of x equals to 5 so this
174:20 - returns
174:22 - true then it will
174:25 - execute the statement the value
174:31 - the value of x it should be x right
174:35 - there
174:37 - is one okay
174:40 - and after this after execution of this
174:42 - particular statement it will increment
174:44 - the value of
174:45 - our x so at the second iteration
174:49 - it will be two okay so
174:52 - of course two is less than five so
174:55 - that's basically
174:56 - the um condition will return true
175:02 - and then of course it will display
175:05 - the value of x is
175:09 - 2 and then another iteration 3
175:13 - so 3 is less than or equal to five
175:17 - right
175:20 - and obviously the
175:24 - three is less than two five so basically
175:27 - uh it will return
175:29 - true and then display
175:32 - this statement
175:35 - and until
175:38 - the x will become 6. okay
175:44 - six and then it will evaluate is
175:47 - six less than
175:51 - or equal to five so basically this
175:54 - is false and then it will terminate
175:59 - the loop or it will end the loop itself
176:02 - so that's how we got this
176:05 - um output the value is one two three
176:08 - four and five so this particular output
176:11 - guys
176:12 - is incremented so the value of our x is
176:15 - increment
176:16 - like one two three four and five but
176:19 - anyway guys we could you know make it
176:21 - like five
176:21 - four three two one and we will
176:24 - initialize our variable
176:26 - x differently so for example
176:30 - let's try to revise our for loop
176:34 - and we will start from five
176:37 - okay so the initial value of our x is
176:40 - equal to five
176:41 - and of course we will check if
176:45 - so for example is x is
176:48 - greater than or equal to one so
176:51 - now we're doing the reverse of the
176:54 - increment
176:56 - and of course guys you can you know add
176:59 - the increment statement just like this
177:02 - x equals to x minus one and of course
177:05 - you can use
177:06 - the post increment that we have
177:09 - discussed from earlier videos in this
177:11 - particular
177:12 - uh series so you could do it like this
177:16 - x minus minus and then we could you know
177:19 - display the value of our
177:22 - x okay so let's try this once again
177:26 - and build and run our application and of
177:29 - course we're going to get
177:31 - the reverse output
177:34 - okay so we have here the initial value
177:37 - five and then four
177:38 - and then three and then two and then one
177:42 - okay so guys
177:45 - of course you can always try to you know
177:48 - add
177:49 - another for loop inside this loop
177:52 - so as what we have from the previous
177:56 - tutorials we have like
177:57 - the nested if and else statement and of
177:59 - course guys you could always uh you
178:01 - could also
178:02 - have nested for loops or nested while
178:05 - loops
178:06 - in your program so for example like this
178:08 - you could you know
178:10 - um add another for loop here so for
178:13 - example
178:13 - in y um
178:17 - is we will set the initial value to
178:22 - one okay initial value into one
178:26 - and then we could um
178:29 - [Music]
178:30 - try to evaluate the statement say for
178:33 - example
178:34 - is y um
178:37 - less than or equal to x something like
178:40 - this
178:41 - and then we could add the increment
178:45 - y plus plus okay
178:48 - and then open and open and close curly
178:50 - braces and then of course we could
178:52 - display
178:53 - the value of our x
178:56 - and y so the value of x for example
179:01 - percent d and value of
179:04 - y
179:07 - is something like this
179:11 - the value of x is percent d and then the
179:14 - value of
179:16 - y is percent b
179:19 - again okay and then we could
179:23 - also specify the value of our y
179:26 - okay so we could you know build and run
179:28 - our application
179:30 - and of course we will get this
179:32 - particular
179:33 - output so the value of x from
179:37 - uh
179:38 - [Music]
179:40 - initial value of our x is five right so
179:44 - it will try to run five times
179:46 - and then it will try to display one two
179:49 - and
179:50 - uh one two three four and five for our
179:52 - value of
179:53 - our y okay and then of course
179:57 - we have the
180:01 - um four and then we also have three
180:05 - and then we also have one and uh two and
180:09 - one so you could do that guys as i've
180:12 - said you can do
180:13 - um nested for loops or nested loops in
180:16 - your
180:17 - c program so you could increment you
180:21 - could use decrement
180:22 - inside your loops okay so
180:26 - and guys if you want to practice more
180:28 - about using loops you could you know
180:31 - try to print different patterns for
180:33 - example you want to print
180:34 - a rectangle or um triangle you could
180:38 - uh display uh inverted triangle by using
180:41 - the um asterisk symbol so you could do
180:45 - that by using your
180:47 - loops and in this video guys we're going
180:50 - to discuss how we can use
180:52 - switch multiple selection statement
180:54 - inside
180:55 - our c program so from the previous
180:57 - tutorials guys we have learned how to
180:59 - use
180:59 - if you also have learned how to use if
181:02 - else
181:03 - and of course how to use the nested if
181:06 - else statement
181:07 - inside rc program now occasionally
181:10 - there will be an algorithm that you know
181:14 - will contain a series of decisions
181:16 - in which a variable or expression is
181:18 - tested separately
181:20 - and the output or the statement
181:24 - or the actions that could be taken
181:26 - depends on the
181:27 - series of decisions this is what we call
181:30 - multiple selection and c provides the
181:32 - switch multiple selection statement
181:34 - to handle such decision making so now
181:37 - let's try to look at the basic syntax
181:40 - of switch statement so
181:43 - the switch statement guy starts with the
181:45 - keyword switch
181:47 - and then open close parenthesis and
181:50 - open close curly braces and inside
181:53 - this open close parenthesis is the
181:57 - variable so variable
182:00 - of interest so the output guys or the
182:04 - statements that are executed
182:06 - depends on the value of this particular
182:09 - variable here
182:11 - so we have here switch statement or
182:13 - switch keyword and then open close
182:15 - parenthesis
182:16 - and then the variable or expression and
182:18 - then of course
182:19 - open close parenthesis and inside this
182:22 - open close parenthesis guys
182:24 - are the case label okay
182:27 - so so for example you want to check for
182:31 - the value of one and then
182:34 - it should be followed by the break
182:37 - keyword
182:38 - which means that it signifies the end of
182:41 - this particular case
182:43 - one okay and then you could you know add
182:46 - several case label here so for example
182:48 - case two
182:49 - and then you could add the break
182:51 - statement you could also add
182:54 - another case label three and then the
182:57 - break
182:58 - statement and of course you need to add
183:02 - the default
183:03 - case so the default case guys
183:06 - will serve or will be executed if
183:10 - there's no case label that satisfies the
183:13 - var
183:13 - uh the value of our variable or
183:16 - expression
183:17 - so so for example we have here one two
183:18 - and three and the
183:20 - input is four so it's gonna you know
183:23 - uh execute the default value or the
183:26 - default
183:27 - uh statement default case now you could
183:31 - inside this particular case we could
183:34 - execute some statements for example
183:37 - you have chosen
183:41 - case one so we could end this with a
183:44 - semicolon so we could do the same for
183:46 - the other cases
183:48 - so like this
183:52 - so in this particular case you have
183:55 - chosen
183:57 - case 2 and you have johnson 3
184:02 - and the default is
184:08 - you haven't
184:11 - you have not chosen from
184:15 - the uh
184:18 - values one and two and three so one two
184:25 - you have not chosen a value
184:33 - in one two three
184:39 - okay so we could try this guys and of
184:41 - course we need to add a variable here
184:44 - so in input
184:47 - and then we could you know
184:50 - scan f or ask the input from the user so
184:54 - percent d
184:58 - and then the variable input
185:02 - ampersand and then input
185:05 - okay and then guys we could
185:08 - print please
185:12 - choose a number
185:17 - number one
185:21 - two
185:24 - or three okay so let's try this
185:33 - okay so let's try to build and run our
185:36 - application
185:39 - so we have uh we have to update this so
185:42 - variable of interest
185:43 - is of course the input okay so
185:46 - let's replace this with the input and
185:48 - then
185:50 - build and run our application so
185:53 - as you can see it's going to
185:56 - run and we need to input
186:01 - a number here
186:05 - so please choose a number between one
186:07 - two and three so so for example we
186:09 - choose
186:10 - where we input one so you have chosen
186:14 - case one okay and then let's try
186:18 - um another one so for example three
186:23 - so you have chosen case three
186:26 - so basically guys it executed
186:29 - the statement under this particular case
186:32 - label
186:33 - okay and so for example you have
186:36 - inputted or you have
186:38 - uh selected number four
186:42 - instead of the values one two and three
186:45 - so it's going to
186:47 - uh execute the statement under the
186:50 - default case
186:51 - okay so you have not chosen a value
186:54 - in 1 to n this is should be 3.
186:59 - and we could also use letters and
187:00 - characters inside our switch case
187:03 - statement and basically here in our
187:06 - example we're using the in type
187:08 - as the data type for our variable of
187:11 - interest input
187:12 - and then we're setting the um
187:15 - case labels into int one and then
187:18 - into and then in three and then we're
187:20 - executing
187:21 - statement based on the value of our
187:24 - input
187:25 - okay but as i've said we could use
187:28 - characters or letters and so for example
187:31 - you want your user to input letter a
187:34 - you want your user to input letter b and
187:36 - then you could execute
187:38 - statement based on that particular
187:40 - letter
187:41 - so for for now let's try to implement
187:44 - this
187:44 - inside our program we want our user to
187:47 - input
187:48 - letters a b or c and then we could
187:51 - you know output uh different statements
187:54 - based on that particular character
187:57 - so now we could display instead of
187:59 - please choose a number we could you know
188:02 - um say here enter
188:05 - a letter you could select a
188:08 - b or c and then
188:12 - based on this particular letter we could
188:15 - output
188:16 - or execute commands or execute statement
188:21 - okay and then we're going to use the
188:24 - method um get
188:29 - get char okay so this will return the
188:34 - in equivalent of the
188:37 - letter or the character that the user
188:39 - has inputted okay
188:41 - and then we could try this inside our
188:43 - switch statement
188:45 - so instead of using case one we could
188:48 - say
188:48 - here case a
188:52 - and then here we could use
188:56 - case b and of course here we could
189:00 - choose or set the case
189:04 - c so every time the user types in the a
189:07 - so it should print you have chosen
189:10 - option
189:14 - a so we could copy and paste this
189:20 - so b and then of course
189:23 - uh you have chosen option c
189:29 - and in our default wrong
189:33 - option okay so we could try this
189:37 - let's try to run or build and run our
189:41 - program
189:43 - so enter a letter a
189:46 - for example we type in a
189:49 - so you have chosen option a
189:53 - so let's try this once again so for
189:56 - example the letter
189:58 - that has been or the user inputted is
190:01 - b you have chosen uh
190:04 - b let's try this once again
190:08 - so for example the user types in d
190:11 - and then it will display wrong
190:14 - option okay and then of course guys you
190:17 - can make it this way also
190:19 - so for example you want to
190:22 - add also the lower case of letter
190:26 - a so case and then the
190:29 - lowercase version of a so you could do
190:32 - it like this
190:33 - so you have case a and then case
190:36 - with the lowercase a and then you could
190:40 - also
190:40 - do the same with the b
190:44 - and then you could add the lowercase
190:47 - uh b here and of course you could also
190:51 - do the same for your c so
190:55 - lowercase c lowercase b lowercase
190:59 - um a so it's going to you know
191:04 - execute base on this
191:07 - it doesn't matter if it is uppercase a
191:10 - or lowercase
191:11 - a so let's try this once again
191:15 - so for example you want b
191:18 - so you have chosen option b
191:22 - okay let's try this another time
191:27 - and then c lowercase c so you have
191:30 - chosen
191:31 - option c okay so
191:34 - i think it is clear to you how to use
191:37 - the switch case statement
191:38 - in c programming and in this video guys
191:41 - we're going to discuss
191:42 - and i'm gonna teach you how to implement
191:44 - functions in our c program
191:47 - so basically guys a c function is a
191:50 - self-contained block of statements
191:52 - that can be executed repeatedly whenever
191:55 - we need it
191:55 - so um if you think about it it is just
191:59 - you know a group of statements that we
192:01 - could
192:02 - um call and we can use repeatedly
192:05 - within our c program so in this
192:08 - particular video guys we're going to
192:09 - discuss the benefits of using
192:11 - the functions in c program we will also
192:16 - discuss two types of functions in c
192:20 - um also the parts of function
192:23 - the function prototype the function
192:26 - definition
192:27 - and of course we're going to discuss
192:30 - also how to call
192:32 - a function inside our c program and
192:35 - lastly we will implement a basic program
192:37 - to illustrate
192:38 - the addition of two numbers using user
192:42 - defined
192:43 - function so if you're excited guys
192:45 - please make sure to watch the full video
192:47 - uh you will learn more in this
192:49 - particular uh video tutorial
192:51 - and by the way guys if you are new here
192:53 - in our youtube channel and
192:55 - you like content about programming so go
192:58 - ahead
192:58 - make sure to subscribe and press the
193:00 - notification bell
193:01 - so you'll get updated whenever we have a
193:04 - new upload regarding
193:05 - different programmings or different
193:06 - topics so we have topics python
193:09 - java javafx c programming and
193:13 - many many other topics regarding
193:16 - programming
193:16 - so now let's try to talk about benefits
193:19 - of using
193:20 - function in c so there are a lot of
193:23 - functions
193:24 - that you know we could associate in
193:27 - using function inside rc program so the
193:30 - first one is modularity
193:34 - so when we are using functions it could
193:36 - provide modularity
193:38 - in our code so it means that we could
193:42 - you know define different functions we
193:43 - could
193:44 - uh really call our functions and
193:48 - um we could call this particular
193:50 - function
193:51 - if we need it or we need to execute
193:54 - certain statements
193:56 - and of course guys the function also
193:58 - provides you reusable call me
194:01 - uh it will save us a lot of space
194:04 - and you know it could be our code could
194:08 - be you know
194:09 - more readable by using this particular
194:13 - function feature
194:15 - so that's readable or usable code
194:21 - and then in large programs debugging and
194:25 - editing tasks is easy with the use of
194:28 - functions so
194:29 - functions make it easy
194:33 - for us to implement our programs so
194:36 - the program can be modularized into
194:38 - smaller parts that's what
194:40 - i have said earlier that we could you
194:42 - know develop
194:44 - a certain module inside our c program
194:47 - and then we can call that particular
194:48 - module or statements
194:50 - or group statements if we need in a
194:53 - particular situation
194:55 - and number um the next one is
194:58 - separate function independently can be
195:01 - developed
195:02 - according to the need so so for example
195:04 - guess we could group our statements
195:06 - depending on the need or you know
195:08 - depending on the
195:10 - the function or or the purpose of that
195:13 - statement so we could group that
195:15 - statements
195:16 - and place it inside our c function
195:19 - so actually guys there are two types of
195:21 - functions in c
195:23 - so the first one is um
195:26 - let me type it here type of functions
195:32 - we have the first one built-in
195:35 - function
195:39 - okay so built-in function um
195:42 - of course the system provided these
195:44 - functions and stored in the library
195:47 - therefore it is called um library
195:50 - functions
195:51 - so we have like we are using scanf
195:54 - printf uh str uh strc py
195:59 - um cr s t r c
196:02 - m p c r then str cut
196:06 - and many more functions that are already
196:09 - available for us
196:10 - whenever we try to run a program so from
196:13 - the
196:14 - previous tutorials we have used the
196:15 - printf
196:17 - so as you can see this particular
196:18 - function we did not
196:20 - um implement this the system provided
196:24 - it for us the printf and this particular
196:26 - function will let
196:27 - us display certain
196:32 - objects or statements that we want is we
196:34 - want to display
196:36 - inside our c program so to use this
196:39 - functions
196:40 - you just need to include the appropriate
196:43 - c header file so that's why we have here
196:46 - the include statement at the top of
196:50 - our program so basically we're including
196:52 - all the
196:53 - necessary function that we could use
196:56 - inside
196:56 - our c program and of course
197:00 - guys the the second type of
197:03 - um method is what we called
197:06 - the user defined functions
197:11 - user-defined functions
197:14 - okay so user-defined user-defined
197:17 - functions these are the functions that
197:19 - are defined by the user
197:21 - at the time of writing the program so
197:24 - that's basically us
197:25 - or the programmer um that you know
197:28 - define
197:29 - the functions
197:32 - okay and then of course the same with
197:34 - the
197:36 - built-in function we could you know
197:37 - really use this particular functions
197:40 - inside rc program now there are there
197:43 - are
197:43 - also parts of our function
197:46 - in c programming language we have the
197:50 - function declaration
197:54 - we also have the definition
197:58 - and we also have the function call
198:02 - so this is basically the actual flow
198:06 - of the function we have the function
198:09 - declaration declaration
198:12 - and then we have the definition we have
198:14 - of course the function called
198:16 - if you want to use that particular
198:19 - function so we have here for example
198:23 - syntax for function declaration
198:27 - so we could um this will be
198:30 - the function declaration
198:36 - this is just an example guys on how you
198:38 - could
198:39 - declare a certain function so the syntax
198:43 - for that
198:43 - is data type and then
198:47 - function name and then of course
198:51 - open and close parenthesis and then in
198:53 - here we can specify
198:55 - the parameter list okay or
198:58 - the variables that we want to use inside
199:01 - this particular function
199:05 - so our example of that is like this
199:08 - in which is the data type and of course
199:11 - addition
199:12 - which is the name of our function
199:16 - so addition and then the return type is
199:19 - int
199:20 - and then of course the list of
199:22 - parameters
199:23 - and in this case we don't have any
199:26 - parameter in this particular function
199:28 - addition so we also have the function
199:31 - definition
199:32 - this is actually what the
199:35 - actual function would look like
199:39 - so this will be function declaration or
199:41 - i mean function
199:43 - definition okay
199:46 - so we could uh this the basic syntax to
199:49 - this is
199:51 - return type
199:55 - and then the function name
199:58 - and then function arguments
200:04 - and then curly braces
200:08 - so it should include the close or open
200:11 - and close curly braces
200:12 - and then inside here is the body of the
200:15 - function
200:16 - or simply the statements that we want to
200:19 - execute inside this particular function
200:21 - so whenever
200:22 - we want to call this function this will
200:25 - be
200:26 - the statements that that you know
200:29 - would be executed inside this particular
200:32 - function so in order for us to call a
200:35 - function
200:35 - inside our c program we just need to
200:39 - specify the method
200:42 - name and of course we need to supply
200:45 - parameters
200:46 - if there's a if there are any and
200:49 - we would also need to specify the return
200:52 - type of our function
200:54 - so now let's try to implement a simple
200:57 - program that
200:58 - you know that could ex uh illustrate
201:01 - the addition of two numbers um using
201:04 - user defined function
201:05 - so we have here the main function right
201:08 - and then
201:09 - in here after the main or after the
201:12 - closing curly brace of our main function
201:15 - we could create we could create
201:18 - our own function right here
201:21 - let me close this first so you can you
201:24 - know see better
201:27 - so we could add a function here
201:30 - returning the total
201:34 - of two numbers okay
201:37 - so we could declare it like this in and
201:39 - then
201:40 - addition
201:44 - open and close cur uh parenthesis and
201:47 - then open and close curly braces and
201:49 - of course guys as i've said this is this
201:51 - will be the body of our function
201:53 - so in here we could um
201:57 - define local variables
202:01 - okay so local variables
202:08 - so for example we we have in num
202:11 - 1 equals 10
202:14 - and then num 2 equals 5
202:18 - right so these are local variables
202:21 - meaning these are the variables that are
202:24 - declared
202:25 - and defined inside the addition method
202:28 - or function
202:29 - okay so we can say here return
202:33 - and then num1 plus
202:36 - num 2 okay so that's the statement that
202:40 - we want to execute
202:41 - when whenever we try to call the
202:44 - addition
202:45 - method where i mean function so inside
202:48 - our main function we could call this
202:50 - um method addition so we could
202:54 - declare a variable here in answer
202:58 - and then we could say answer equals
203:02 - and then the addition so basically
203:06 - whatever the
203:07 - return value of this addition
203:10 - method it will be assigned into our
203:12 - answer
203:13 - variable and of course we could print
203:17 - or display this particular value so we
203:20 - could
203:21 - say the total of
203:24 - two numbers yes
203:28 - and then in the format specify over just
203:31 - you know percent d
203:33 - and then the answer
203:36 - which is the answer variable
203:40 - okay so we could you know build and run
203:43 - our application
203:44 - application and then we have here the
203:48 - output
203:49 - the total of two numbers is
203:52 - 15 okay so that's how the function works
203:56 - and as you can see here we have defined
204:00 - our function with the statements
204:03 - inside our c function to return the
204:05 - total of the
204:07 - number one in number two and then inside
204:10 - our main function we have declared the
204:13 - answer
204:14 - and then the type is in of course
204:16 - because the in
204:17 - is should correspond to the return type
204:21 - of this particular function and then
204:23 - answer
204:24 - equals the addition and then the last
204:27 - thing
204:28 - that we did here is to display
204:31 - the total of two numbers and in this
204:34 - case
204:35 - 10 and 5 which makes it you know
204:40 - the value or the output is 15.
204:43 - so and in this video guys we're going to
204:45 - learn how to use
204:46 - c function arguments or parameters
204:49 - inside
204:50 - our function so from the previous
204:53 - tutorial
204:54 - we have learned how to define and
204:56 - declare
204:57 - our function inside our c program and of
204:59 - course we have learned how to use the
205:01 - basic syntax
205:02 - to create a function and implemented a
205:06 - simple
205:06 - function that could add two numbers
205:10 - okay so as i've said guys in this video
205:12 - we're going to focus on
205:13 - the function arguments or function
205:15 - parameters
205:16 - so while calling a function the
205:18 - arguments can be passed
205:20 - to a function in two ways so there
205:23 - there are two ways on how we could
205:26 - pass the parameters or the arguments
205:30 - into the
205:30 - function so the first one will be call
205:34 - by value and the second one
205:37 - is called by reference
205:41 - okay so in call by value
205:44 - way the actual parameter is pass the
205:47 - function
205:48 - and then new memory area created for
205:51 - that particular past parameters
205:53 - and then it can be used only within that
205:56 - function
205:57 - and the actual parameters cannot be
205:59 - modified
206:00 - in the call by value
206:03 - way of you know passing the the argument
206:06 - into our function
206:08 - while call by reference so instead of
206:10 - copying a variable
206:12 - an address is passed to a function as
206:15 - parameter
206:16 - and then we could use the address
206:19 - operator
206:20 - which is the ampersand symbol i know if
206:23 - you're already familiar with this so
206:25 - address operator
206:27 - is used in the parameter of the called
206:30 - function
206:31 - and of course the changes in the
206:33 - function reflect the change
206:35 - of the original values so we could
206:39 - understand this better if we try to
206:41 - implement our
206:42 - function by you know creating a simple
206:45 - project or simple
206:47 - application that could demonstrate the
206:50 - call by value or
206:51 - call by reference so first let's try to
206:55 - create a program
206:59 - that would pass the argument as or
207:02 - it could call by value so the first
207:05 - thing that we're going to need
207:06 - is of course to it's actually the same
207:10 - with the program or i mean function that
207:14 - we have created
207:15 - from the previous tutorial but the
207:18 - difference is that
207:19 - in this particular video we're going to
207:21 - use parameter
207:22 - or argument so the first um variable
207:26 - that we're going to declare here is
207:29 - the answer so the type is in
207:33 - and then we have the variable
207:37 - name num1 so the value is 5
207:42 - and then in num2 and then the value is
207:48 - 10 okay and of course
207:51 - guys we could declare the function so
207:54 - for example
207:56 - we could um create
207:59 - the function right after this
208:02 - closing curly brace of our main function
208:06 - so the first thing of course is the
208:08 - return type
208:10 - and in this case in and then the name of
208:13 - our function which is addition
208:16 - and we could say here in a
208:19 - and in b basically
208:22 - it means that this particular function
208:25 - would accept
208:26 - two parameter in b and
208:30 - uh a okay and then in here we could
208:33 - return the value or
208:35 - the total value of this two parameters
208:37 - so a
208:38 - plus b okay and of course guys
208:42 - we could declare the function right here
208:45 - so we could you know
208:48 - add the function declaration here
208:50 - function
208:51 - declaration so you could say here
208:55 - in addition and then this particular
208:58 - function
208:59 - is going to take two parameters in num1
209:02 - and in num2 so as you can see here guys
209:06 - this is only the function declaration
209:08 - okay and this is the function
209:12 - definition function definition
209:20 - again this is function declaration
209:23 - declaration
209:25 - and function definition so
209:29 - now we could try to call our function by
209:33 - value so for example you can say here
209:37 - [Music]
209:39 - answer and then equals
209:43 - addition which is the method or the
209:46 - function
209:46 - that we have created here and then we
209:50 - could
209:50 - pass along the values of num1
209:54 - and num2 okay so let me explain this
209:58 - first for you so it would be clear for
210:00 - you
210:01 - so we have here the parameter num1 num2
210:04 - as i've said in call by value
210:07 - the actual parameters cannot be modified
210:11 - because num1
210:12 - and num2 is it won't change
210:16 - um even if we you know change the
210:19 - parameters here but in a and b so the
210:22 - value of num1 and num2
210:24 - would not change even if we try to
210:27 - modify this in
210:28 - a and b inside our addition function
210:32 - so the actual parameter is passed to a
210:34 - function
210:35 - and then new memory will be created for
210:38 - our parameters e
210:40 - uh in a and in
210:44 - okay and of course
210:47 - um we could display here the result so
210:50 - printf and then of course
210:54 - the statement the addition
210:58 - or you could say the total
211:01 - of two numbers is
211:06 - and then the format specifier percent d
211:09 - and then the variable answer
211:12 - okay and then you could you know clean
211:15 - and build
211:16 - our application or build and run
211:19 - and it should display the output
211:22 - something like this the total
211:23 - of two numbers is 15
211:27 - okay so you get the point this is the
211:30 - calling of function by value
211:33 - okay now if we want to try to
211:37 - call the function by reference as i've
211:39 - said
211:40 - we're going to use the
211:43 - ampersand symbol so ampersand symbol
211:48 - or it is the address operator
211:51 - and we're going to use that in our
211:53 - parameter
211:54 - of the called function so let's
211:57 - let's try to implement a function that
212:00 - you know could call by reference and you
212:04 - should see by now
212:05 - how you how the call by reference and
212:08 - call by value
212:09 - is different so the same thing
212:13 - we're going to declare the
212:16 - method here the return type is in and
212:19 - then the name is
212:21 - addition and then it's going to take two
212:23 - parameters
212:24 - with type in okay and then we could
212:28 - uh also use this in answer and then
212:31 - the same value for example
212:34 - and now guys instead of just using this
212:38 - num1 and num2 we could add the address
212:41 - operator
212:45 - the ampersand symbol or the address
212:46 - operator in c programming
212:48 - so basically guys uh we're sending
212:52 - or we're passing the address
212:55 - of this particular variable into our
212:57 - function so
212:59 - so whenever we change this value inside
213:02 - our function it's going to reflect
213:04 - the value of our num1 and num2
213:08 - okay so um
213:11 - we have here the ampersand or address
213:15 - operator
213:16 - and then we call the function
213:19 - right here and then display the answer
213:23 - and of course we need to add the
213:26 - asterisk symbol
213:30 - for this variable here
213:34 - or the argument and then um
213:38 - one for the other variable b so this
213:41 - means that
213:42 - it is the operator that is used as a
213:44 - pointer to a variable
213:46 - so it's going to point the address to
213:50 - that particular
213:51 - value of num1 or num2
213:54 - so of course we need to add this also in
213:56 - here
213:58 - and of course for our variable num
214:02 - okay and then as i've said if we want to
214:06 - change the value of num
214:08 - to here inside our function we could do
214:11 - that
214:12 - and it's going to reflect the changes of
214:15 - this num2num1
214:16 - variable okay and then of course we
214:19 - could
214:20 - still use the asterisk symbol here
214:24 - and let's try to run our program for now
214:28 - so build and run and it's going to
214:30 - answer or it's going to the output this
214:32 - way
214:33 - the total of two numbers is 15.
214:37 - okay so let's try to modify the um
214:42 - num1 and num2 okay
214:46 - for example inside this
214:49 - particular function we're going to
214:52 - change
214:52 - the value of our
214:56 - variable a so instead of
214:59 - five it's going to like maybe six
215:02 - okay so we could do that
215:06 - by using this particular
215:11 - variable argument we could
215:14 - add here the um
215:18 - variable a and then we could say six
215:22 - then semicolon semicolon at the end and
215:25 - we could try to display the value of our
215:29 - a
215:29 - so the value
215:33 - of a and then percent d
215:36 - and it should you know the variable a
215:39 - correspond to the variable num1 right so
215:43 - we could
215:43 - copy and paste this so notice that num1
215:46 - equals to 5 here
215:48 - okay so let's see what's the output of
215:51 - this so
215:52 - build and run or program
215:55 - so as you can see we have here the the
215:57 - output
215:59 - the total of two numbers is 16
216:02 - and the value of a is
216:05 - six but as you can see here a
216:08 - corresponds to the num one right num one
216:11 - so we have here num one equals to five
216:14 - and then we change the value of num1 by
216:17 - using the
216:18 - the reference of variable a and then we
216:21 - set it to six that's why we're getting
216:23 - six here
216:24 - and then the total of our addition is
216:26 - six
216:27 - okay so and in this video guys we're
216:29 - going to learn how to use
216:30 - arrays inside our c program so basically
216:34 - guys we can declare variables the whole
216:37 - single element or a single value
216:39 - inside our c program so for example like
216:41 - this
216:43 - age or ink age and then we could
216:47 - assign it to a value 5 for example like
216:50 - this
216:51 - so this particular variable will hold
216:54 - the value 5 for a single value 5
216:58 - and then it's going to assign to the
217:02 - variable age now what if you want to
217:05 - store
217:05 - like 50 um series of
217:09 - values like there are um
217:12 - 50 each that what uh that we want to
217:16 - save for example there are like 50
217:19 - percents that we want to save the ages
217:21 - then uh this particular declaration
217:25 - and statement will not suffice because
217:28 - we're going to like declare it one by
217:31 - one so for example in
217:32 - age two and then six and then in
217:36 - age three equals seven
217:41 - and in uh age
217:44 - 4 was like 10
217:48 - and so on so basically guys this is not
217:51 - a good
217:51 - programming practice to declare
217:54 - multiple variables or yeah multiple
217:57 - variables to hold
217:59 - a single set or a single type of data
218:02 - so that's why we need the capability of
218:06 - an array so basically guys the array is
218:09 - a
218:09 - data structure in c programming which
218:12 - can store
218:12 - a fixed size uh sequential collection of
218:16 - elements
218:16 - of the same data type so in this case
218:20 - guys we're just
218:21 - you know collecting and saving um
218:24 - the same data type of data which is in
218:27 - now what we can do here is we can
218:31 - define an array and then we could set
218:34 - the lens say for example we want to save
218:37 - 50 ages right
218:40 - and then we could save the age into that
218:43 - particular array so let me show you an
218:45 - example
218:46 - so this is how you can create an array
218:49 - inside your c
218:50 - program so basically the first
218:54 - thing is you have to specify the type of
218:57 - your
218:58 - data that you want to save in that
218:59 - particular array and then
219:01 - the array name so basically this is just
219:04 - like the
219:05 - variable name so you have to label your
219:09 - container
219:10 - and then of course you have to specify
219:12 - specify the type of data that you want
219:14 - to save in this particular array
219:16 - and then you have to add the square
219:18 - brackets
219:20 - and this signifies that this particular
219:23 - variable
219:24 - is an array and then inside uh this
219:27 - particular square bracket you can
219:29 - uh declare the size or you know specify
219:32 - the size or how many
219:34 - um values that this particular variable
219:37 - could hold okay so in
219:41 - a typical c program you can do it like
219:44 - this so for example
219:46 - the type is in right and then you can
219:48 - say
219:49 - aegis or age right so this is the iron
219:52 - name
219:53 - and then this uh square brackets
219:56 - and then you have to specify the
220:00 - size for example 5 so you want to
220:02 - collect
220:03 - five values or five age of five
220:07 - persons okay so again this is the type
220:10 - in you have to specify the type
220:12 - and then you have to specify the array
220:14 - name the
220:15 - the variable name and then of course
220:17 - square brackets
220:19 - and then the size of your array
220:23 - or basically the amount
220:26 - of values that this particular array
220:28 - could hold
220:29 - so after this you can say equals
220:32 - and then you can specify the array or
220:34 - the elements of your array
220:36 - so for example we could take all these
220:39 - values 5 6 7 and 10 so
220:43 - 5 6
220:47 - 7 and 10 and for example because our
220:51 - array contains or should contain five
220:53 - elements
220:54 - you could add another one here for
220:56 - example
220:58 - um eight or something okay
221:01 - so again this is how you can create an
221:04 - array of
221:06 - um values so in
221:09 - is the data type and then of course we
221:11 - have the r name
221:12 - and then square brackets with the size
221:16 - 5 for example your
221:20 - array should be 5 and then equals
221:23 - and then the curly braces open and close
221:26 - curly braces
221:27 - and not
221:36 - [Music]
221:40 - in available program now you can
221:45 - access this particular um
221:48 - or this elements or these values by
221:51 - using
221:52 - what we called index so in c programming
221:55 - or any other programming
221:57 - with um arrays you could
222:00 - access the values by using index
222:04 - so this index is zero
222:07 - based zero base it means that it will
222:10 - start
222:12 - it will start with zero okay
222:16 - so meaning uh if you want to access the
222:19 - value five so you you have to use um
222:23 - 0 index a
222:27 - this will be
222:31 - 0 and then this will be
222:34 - 1 this will be 2 this will be
222:38 - 3 and this will be
222:41 - 4. so again if you want to access or get
222:45 - the value of this particular element you
222:48 - have to use
222:48 - the zero value of your index and then
222:52 - one for the six two four seven
222:55 - three four ten and um four
222:59 - four eight so let me show you that how
223:02 - that works
223:04 - so for example you want to display the
223:06 - value uh
223:08 - six okay so all you have to do is use
223:11 - the printf statement and then
223:14 - um google quotes and then percent
223:18 - d the format specifier for our
223:21 - um integer values and then comma of
223:24 - course and then we could use
223:26 - the name of our um
223:28 - [Music]
223:30 - uh what do we call this array so ages
223:34 - and then we can specify the square
223:38 - bracket
223:39 - and then index of the element that we
223:42 - want to use
223:42 - for example six so we want to use the
223:46 - index one for that to be able to get the
223:49 - value of six so let's try this
223:52 - uh build and rhino program
223:56 - so as you can see the output is
223:59 - six as you can see here 6 right
224:03 - now if you want to get the value 10
224:06 - you have to use the um
224:10 - index 3 for that because as i said
224:13 - the value is equivalent to the
224:16 - index 3 of our particular array
224:20 - so build and run a program and it should
224:24 - output the value 10 which
224:27 - sits on the index three of our array
224:30 - so that's how you can access the value
224:33 - from our array
224:34 - now say for example you want to change
224:37 - the value of this array
224:39 - right so we have year five six seven
224:41 - eight or five six seven ten and eight
224:43 - and then if
224:44 - if you want to change the value of so
224:47 - for example this one
224:48 - find the first element all you have to
224:50 - do is specify
224:51 - the index also sorry yes
225:11 - so for example we want to display this
225:14 - what will be the
225:15 - um value of our uh index zero so we
225:19 - could
225:20 - test that by using the printf statement
225:23 - and then instead of
225:24 - three you could specify the value
225:27 - 0 or index 0 here so let's try this
225:30 - build and run and as you can see here
225:34 - instead of 5 the initial value of our
225:39 - index 0 it returns 11
225:42 - because we assign it or we modify it by
225:46 - using
225:46 - the element or index 0 equal to the
225:51 - 11 which is that's why we are getting
225:55 - the 11 value here now this is
225:57 - particularly useful guys
225:59 - or if you want to work with the array
226:03 - um one of the best structure or the best
226:06 - statement that you could
226:08 - use to iterate the array is by using the
226:12 - for loops or loops inside our c program
226:14 - so we could say this
226:16 - here for example four
226:20 - so we're going to use the for loop
226:22 - statement here
226:23 - and we can specify for example um
226:28 - index equals to zero we want to start
226:32 - with zero because
226:33 - as i said the index of our array is zero
226:36 - base
226:37 - it will start with the zero
226:40 - number okay so index equals zero
226:43 - and then semicolon and we're going to
226:46 - say here
226:47 - uh here index um
226:50 - less than the uh actual
226:54 - value of our array or i mean size of our
226:56 - array
226:57 - so five less than five
227:01 - so another semicolon and then
227:04 - index lastplus
227:08 - and inside the for loop we could display
227:12 - the element of our array so we could use
227:15 - this
227:15 - printf statement and then
227:18 - we could use the index variable here
227:23 - and then change this
227:27 - we could say index
227:30 - equals percent d
227:34 - the format specifier and then
227:37 - um we could say
227:40 - equal to percent b
227:44 - and then of course the actual value of
227:47 - our
227:48 - array index so in here we could specify
227:52 - the index
227:53 - okay so it should display the index
227:57 - current index and then it should display
228:00 - the actual
228:01 - value of that particular index
228:04 - so we could build and run our program
228:09 - let me add first the backslash
228:12 - n or new line state sequence
228:16 - new line and then it should display
228:20 - this particular output so at index 0
228:24 - we have the value 11 at index 1 we have
228:27 - the value 6
228:29 - right index 0
228:32 - is 11 because we already modified our
228:35 - array specifying the array
228:38 - or index 0 should be equal to 11 and
228:41 - then at
228:42 - index one equal to six right here
228:45 - uh index two should be equal to seven
228:48 - index three is ten index four is eight
228:52 - okay so that's how easy for us to access
228:55 - and change the value
228:56 - of our array and that's how we can
229:00 - define our multi i mean single
229:04 - dimension or one dimension array
229:07 - inside our c program and in this video
229:09 - guys we're going to talk about
229:10 - multi-dimensional arrays in
229:13 - our c program so from the previous
229:15 - tutorial we have learned
229:17 - how to use the basic array so
229:20 - we have implemented one dimensional
229:22 - array
229:23 - we are trying to display
229:26 - the contents of an array by using the
229:28 - for loop
229:29 - and of course we declare and initialize
229:32 - one dimensional array
229:34 - from the previous tutorial now as i've
229:36 - said from this tutorial we're
229:38 - going to learn how to work with
229:40 - multi-dimensional array
229:41 - so basically guys multi-dimensional
229:43 - array um
229:45 - works like the same with the
229:47 - one-dimensional array
229:48 - but the difference is that it contains
229:51 - the array contains a set of arrays so
229:55 - in c programming language it will allow
229:58 - us
229:58 - or it allows us to use multi-dimensional
230:01 - arrays and
230:02 - the declaration or multi-dimensional
230:05 - declaration
230:06 - for that is by using the type of force
230:09 - as i've said from the previous tutorial
230:11 - if you want to
230:13 - store multiple values you have to use
230:17 - arrays and in order for you to declare
230:20 - an array you have to specify
230:22 - the type of that particular array so
230:26 - you have to specify the type and then of
230:28 - course the name
230:30 - of the array and then you have to
230:32 - specify
230:33 - the size here so for example size
230:38 - now this is um good for
230:42 - a one dimensional array so you have to
230:44 - specify the type the name
230:46 - and of course the size of your array
230:50 - now comes the multi-dimensional array or
230:53 - two-dimensional array
230:54 - so you could do it like this
230:57 - so size two and then this is the size
231:00 - one so this is how you
231:04 - declare multi-dimensional array or
231:07 - two-dimensional array inside our c
231:08 - program
231:09 - so the type of course you don't
231:12 - you know you don't want to forget that
231:14 - the size of or i mean
231:16 - the type of the value that you want to
231:19 - save in this particular array
231:21 - so and then the name and then of course
231:25 - the size one and then the
231:29 - size two now if you want to create
231:32 - three-dimensional array you could do it
231:34 - like this
231:37 - size two i'm in size three
231:40 - so you have square brackets for your
231:42 - size 1
231:44 - square brackets for your size 2 and
231:46 - square brackets for your
231:48 - size 3. so again this is how you can
231:51 - declare your multi-dimensional array
231:55 - but you know the simplest form of
231:56 - multi-dimensional array is by just
231:58 - specifying two sizes
232:03 - and basically guys this this will
232:05 - represent
232:06 - the columns and rows
232:09 - of your array or multi-dimensional array
232:13 - because multi-dimensionally works like a
232:15 - table
232:16 - so size 1 will be your
232:19 - number of rows and the
232:22 - size 2 will represent the
232:26 - number of columns so let's try this
232:29 - let's try to declare and initialize
232:33 - a multi-dimensional array so following
232:36 - this particular declaration type
232:39 - so the first thing is of course the type
232:42 - so in and then we could say here
232:45 - a or a variable name a this is the name
232:48 - of
232:49 - our array multi-dimensional array and
232:51 - then of course we could specify
232:53 - the size for our rows for example
232:56 - three right there and then the size of
233:00 - our columns or number of columns
233:03 - so that's basically like four and then
233:06 - you could
233:07 - you know initialize this by using the
233:09 - equal sign
233:10 - and then open and close curly braces
233:13 - so in this uh inside this curly braces
233:16 - we could
233:17 - declare or initialize the values for our
233:21 - uh rows and columns as i've said
233:25 - multi-dimensional arrays are you know
233:28 - composed of
233:29 - um arrays right there okay
233:32 - so you could add array of values right
233:35 - here
233:36 - this will represent the row one
233:40 - of our array so like for example
233:44 - zero um one
233:48 - and then two
233:52 - and then three okay
233:55 - so again this is for uh
233:58 - initializing
234:03 - the row
234:07 - initializing the row index by
234:10 - zero okay so we could
234:14 - access this by using the index zero
234:17 - okay and for example
234:21 - uh basically uh we declare it here like
234:25 - three so we need to add more
234:28 - um arrays to this so open and close
234:32 - curly braces
234:35 - and another one to make it
234:38 - you know the length is three
234:42 - so in here we could display or add four
234:46 - and then five and then six and then
234:49 - um seven okay
234:52 - and then the other row will have
234:56 - eight then nine and then 10
235:00 - and then 11 okay so basically
235:04 - we now have uh declared initialize our
235:08 - multi-dimensional array so the three
235:11 - here represent
235:13 - this rows three rows
235:16 - and as you can see here we have declared
235:18 - four
235:19 - columns so it should um count
235:22 - or i mean you know the columns start
235:24 - from this zero
235:26 - four eight and then um one
235:29 - five nine two six ten three
235:32 - seven eleven so this will
235:35 - the four the the eight and the zero
235:39 - represents the column
235:42 - zero and then one five and nine
235:45 - represents column
235:46 - uh one so why this is
235:50 - uh representing column zero that's
235:53 - because our
235:53 - index is you know
235:58 - is zero base or meaning it will start
236:01 - counting from zero so this will be the
236:04 - column zero
236:05 - the column one the column two and the
236:08 - column three okay and
236:12 - of course we could
236:17 - try to display the value of this
236:20 - we could access the values of our
236:21 - multi-dimensional arrays
236:23 - by using the indexes of the columns and
236:26 - rows
236:27 - so for example we want to change the
236:31 - value of
236:36 - the values that we could get from
236:39 - the row 2 and
236:44 - column 3. so basically the value
236:48 - of or the value that we could get from
236:52 - our array index 2 and 3
236:55 - is 11 because
236:59 - this is the row 2 and this is column
237:02 - 3. so 0 1 2 3
237:06 - so we get the 11 or the value 11.
237:10 - so if you want to change this to
237:12 - something like
237:14 - 8 so we could do it or assign a value to
237:16 - this by 8
237:18 - so it should display 11 or i mean 8
237:21 - instead
237:21 - of 11 so we could try that so
237:24 - printf and then
237:27 - percent d which is the format format
237:30 - specifier for our in
237:32 - value so we could specify the array
237:36 - index 2 and then index
237:40 - 3. so if we try to
237:43 - compile and run our program we should
237:45 - get now the
237:46 - value 8
237:50 - value 8 as you can see here that's
237:53 - because we already modified
237:55 - the value inside the
237:58 - array of index 2 and 3 so
238:02 - let's try to comment this
238:05 - and then compile and build our
238:08 - program and as you can see we're getting
238:11 - 11
238:12 - that's because that's the initial value
238:14 - of
238:15 - the array index 2 n 3.
238:18 - now we could use array or i mean
238:22 - like we could use loops here
238:25 - to access and change the value of our
238:30 - array or multi-dimensional array and of
238:32 - course because we're using
238:33 - multi-dimensional array
238:34 - we could also use nested loops
238:37 - to change and access the values of our
238:41 - array so so for example
238:44 - we could declare for loop here and this
238:48 - is for example int and then
238:51 - row equals zero
238:54 - and then our row is less
238:58 - than or yeah rho is less than
239:02 - um like for example
239:07 - um two or or three
239:11 - okay and then row plus plus so basically
239:15 - we're iterating from zero one
239:19 - and two because we're we only have
239:23 - like three rows but we starting we're
239:27 - starting from zero so let's make
239:29 - uh let's making it like
239:32 - the value of our row should only be
239:36 - within two not three that's why we're
239:39 - using
239:40 - single or i mean um less than
239:43 - three right here and then of course we
239:46 - could
239:47 - make another loop for our column
239:51 - so int column and then equals to zero
239:56 - and then column
240:02 - is less than four and then
240:07 - um we're going to say here column
240:13 - plus plus okay and then of course we
240:15 - could use this particular pin
240:17 - printf statement to display the values
240:21 - of
240:21 - our um array
240:24 - so percent d we could use here
240:28 - the uh array name
240:31 - which is a because we're using the array
240:33 - name a
240:34 - so a and then um
240:39 - we're going to specify here the columns
240:42 - and
240:42 - rows so percent d
240:45 - and then here percent d
240:48 - equals percent d
240:52 - so inside here we could specify
240:55 - the row and then the column
240:59 - and of course the value
241:03 - of that particular row and column
241:06 - okay so this will be row and of course
241:09 - this will be
241:10 - column okay so again we're just trying
241:13 - to get
241:13 - the value of inside our array
241:17 - represented by
241:18 - this particular row and column okay so
241:21 - these are the indexes the row and column
241:24 - so let's try to
241:25 - build or compile and run our program and
241:28 - we're getting this particular output
241:30 - right here but we don't want that
241:32 - let's try to add a backslash
241:36 - n to add a new line every
241:39 - uh execution so as you can see here we
241:42 - have all the values
241:44 - coming from our array so array and then
241:47 - we have index 0
241:48 - 0 so the value is
241:51 - 0 right there as you can see and then
241:55 - a 0 1 so the value is 1
241:59 - a 0 2 is 2 a
242:02 - 0 3 is 3 and a
242:06 - 1 and a 1 0 is 4
242:09 - and so on so that's how you can uh
242:12 - that's how you can use the
242:15 - multi-dimensional array inside our c
242:17 - program okay and i think that's clear
242:20 - enough
242:21 - how you could iterate and modify
242:25 - your multi-dimensional array by using
242:28 - for loops
242:29 - and in this video guys we're going to
242:30 - learn how to use
242:32 - array as a function parameter so from
242:35 - the previous tutorials
242:37 - we already implemented functions that
242:39 - could take
242:40 - few parameters and then return a value
242:44 - based on the parameter that we have
242:46 - passed
242:47 - um to the function now in this
242:50 - particular video guys we're going to
242:51 - learn
242:52 - how to pass the array as a function
242:55 - parameter
242:56 - and of course we already know how the
242:59 - array works inside our c program
243:02 - we already implemented a
243:05 - simple program that demonstrates the
243:09 - capability of using
243:11 - array we already implemented a
243:14 - multi-dimensional array
243:16 - and even uh iterated the
243:19 - content or the elements of our array now
243:22 - we could take that further by using a
243:25 - function
243:26 - and in this video guys i'm going to show
243:28 - you how you can
243:29 - sum up the values of your array and then
243:32 - we're going to
243:34 - use a function for that so as i've said
243:36 - we're gonna
243:37 - pass the array as a function parameter
243:40 - so here inside our c program we could um
243:44 - declare a new variable or
243:47 - a new array so so for example
243:50 - in and then my
243:54 - number array okay
243:58 - so my um my number array is the name of
244:01 - our array and then it should
244:05 - take in or has the size of
244:08 - say for example six so the number of
244:11 - elements
244:12 - is six right we could
244:15 - specify the values inside our
244:18 - curly braces now we could
244:23 - specify the values 23 30
244:28 - 21 18.
244:33 - um let's say 17
244:37 - one two three four five and another one
244:40 - for our
244:41 - last element say for example 25 so these
244:45 - are all the elements of
244:47 - our array and then we're we're going to
244:51 - sum up the value of this by using
244:54 - a function so what we can do here is to
244:57 - add
244:58 - a function above
245:01 - the main function or whatever we could
245:04 - also insert function right after
245:06 - the main function so for example
245:10 - uh the function will return the total so
245:14 - it should say
245:15 - int this is the return type and then the
245:19 - name
245:19 - of our array so total value of
245:22 - array so this will be in the name of our
245:26 - function
245:26 - total value of array so again this is
245:30 - the return type and this will represent
245:33 - the total value of the elements that we
245:36 - have here
245:37 - so total value of array and then of
245:40 - course we need to specify
245:42 - the argument or the parameters
245:46 - and because we're trying to
245:49 - sum up the value of our of our array we
245:52 - could
245:53 - um specify that the first parameter
245:56 - is an array okay so so for example
246:00 - int and then number array
246:04 - and this is the first parameter
246:07 - and represents the my number
246:10 - right here okay and then we could
246:13 - also specify the size of the array
246:17 - so basically we have six here so
246:20 - we could say here in and then size
246:24 - and again this will represent the size
246:27 - of our
246:28 - my number array and of course we need to
246:31 - add curly braces
246:32 - inside and inside this function
246:37 - we could add the logic to add all the
246:39 - elements
246:40 - of our array and then return
246:44 - the sum or the total so
246:47 - we could say here in total
246:50 - equals zero
246:54 - okay that that's the initial value of
246:56 - our total variable
246:58 - and then we could um
247:02 - try to iterate the elements of our array
247:05 - by using the for loop statement uh
247:07 - statement
247:08 - the same for loop that we have
247:12 - implemented from the previous tutorials
247:15 - okay
247:15 - so for loop so we can say here in
247:19 - i was the zero and then i
247:22 - is less than the size
247:25 - of our array and then
247:29 - i plus plus and then inside the for loop
247:33 - we could say
247:35 - sum or total equals
247:40 - total plus the
247:43 - number array right there and then
247:47 - we could specify the index
247:51 - which is we're going to use i so this is
247:54 - the
247:55 - variable i that we have declared inside
247:58 - our
247:58 - for loop so number array and then the
248:02 - index i okay and of course guys
248:06 - this is the same uh the same with
248:09 - this particular line we could write
248:12 - it with this particular
248:15 - line total equals
248:19 - our plus equals and then a number array
248:24 - and then of course specify the index of
248:26 - that particular number array
248:28 - so again this particular line is the
248:31 - same
248:31 - with this line all we are all we are
248:34 - doing here is
248:35 - trying to accumulate the total
248:39 - of our number array right here
248:43 - so after the total plus equals number
248:46 - array
248:47 - we could return the value of
248:50 - the total so by using the return
248:53 - statement
248:54 - and then of course the variable total
248:57 - okay
248:58 - okay so i think our function or our
249:01 - function total value of array is already
249:03 - set
249:04 - we could now call this particular
249:06 - function
249:07 - uh inside our main function right here
249:11 - so basically for us to call that
249:14 - particular function
249:15 - all we have to do is use the
249:18 - name which is total value of array
249:21 - so total value of array
249:25 - right there and then open and close
249:29 - and then we're going to supply the
249:32 - parameters
249:33 - which is the first one is the array
249:37 - or the my number of uh my number array
249:41 - so
249:41 - my number array and then of course the
249:45 - second parameter
249:46 - is the size of the
249:49 - um array which is six
249:53 - right there and then of course this
249:55 - particular function returns
249:56 - in which is the total we could
250:00 - catch the value by using also in and
250:03 - then
250:03 - you could say here sum equals the
250:07 - return of this function that has the
250:10 - parameters
250:11 - array and the size of the array and then
250:14 - right after that one we could print
250:15 - the sum of all the elements
250:18 - so printf and then we can say here the
250:22 - total
250:25 - value is you can
250:28 - use the percent d and then
250:32 - backslash n and then comma
250:36 - and then of course specifying the sum
250:38 - variable
250:39 - okay and now we could compile and run
250:42 - our program
250:46 - so i think we have an error here because
250:49 - we use
250:49 - the comma so we need to remove that
250:53 - and compile and run again our program
250:56 - so it should say here the total value is
251:01 - 134 which is
251:03 - the total of this particular value uh
251:06 - elements here
251:07 - from our my number array
251:10 - okay so we could also add function
251:14 - i mean add element to this particular
251:17 - array so it should say after 25 we could
251:21 - add
251:21 - like for example 50 and then another one
251:26 - um 25 so basically the
251:30 - length of our array or the size of our
251:33 - array should be
251:34 - eight because we already added two
251:36 - elements
251:37 - the 50 and 25 and of course
251:40 - we need also to change this particular
251:44 - uh parameter here it should say also 8
251:48 - okay so let's try to compile and run our
251:52 - program
251:53 - and as you can see here the value
251:57 - is now 205
252:00 - okay so let me explain to you in details
252:03 - how this works
252:05 - so first we define the elements of
252:09 - our my number array and the size of this
252:13 - or the number of elements of this
252:15 - particular array is
252:16 - eight right there and then right after
252:18 - that
252:19 - we call the function total value of
252:22 - array
252:23 - and then we pass in the my number array
252:26 - as the
252:27 - parameter and of course the second
252:29 - parameter is
252:30 - eight which is the size of our number
252:33 - array now for the total value of array
252:36 - function
252:38 - as you can see here it takes two
252:40 - parameters
252:42 - the array and of course the size of
252:45 - the array and then inside here
252:48 - we initialize and declare the total
252:52 - variable
252:53 - equal to zero and then we
252:56 - iterate the my number array or number
253:00 - array by using
253:01 - the for loop and then we use the i as
253:04 - the index variable
253:06 - so i equals to zero and then i
253:09 - is less than to the size that we have
253:12 - specified
253:13 - and then i plus plus and then of course
253:15 - uh
253:16 - in order to get the total of the
253:18 - elements
253:19 - we're using total equals
253:23 - total plus number array so
253:26 - basically this is the same with this
253:29 - line total plus
253:30 - equals number array and then specify
253:35 - the i index so
253:39 - so for example this particular i
253:42 - um the value of i is 0
253:45 - then it's going to get the value 23
253:49 - and then i value 1 it should get the 30
253:52 - i value 2 is 21 i value
253:57 - 3 is 18 and so on so you get the idea
254:01 - and then of course after that we get the
254:05 - total value and then of course return
254:08 - that to this particular
254:10 - variable sum and the last thing is we
254:13 - display that the total value is
254:17 - and then specify the sum of all the
254:19 - elements that we have from this
254:22 - number array okay in this video guys
254:25 - we're going to discuss what is pointers
254:27 - and how we can use pointers inside our c
254:30 - program
254:31 - okay so if you're excited guys please
254:32 - make sure to watch the full video
254:34 - we're going to be learning a lot in this
254:36 - particular video and in the succeeding
254:38 - videos
254:39 - about pointers so basically pointers in
254:42 - c
254:43 - are you know easy and fun to learn
254:46 - so there are some c programming tasks
254:48 - that are performed
254:50 - more easily with pointers and there are
254:53 - other also tasks such as dynamic memory
254:56 - allocation
254:57 - cannot be performed without using
255:00 - pointers
255:01 - so it becomes necessary to learn
255:03 - pointers to become
255:05 - a perfect c programmer
255:09 - so if you want to be like almost perfect
255:12 - c programmer
255:13 - so it is necessary for us to learn
255:16 - pointers okay and let's start learning
255:19 - them
255:19 - in simple and easy steps
255:22 - so as you know every variable is a
255:25 - memory location
255:26 - and every memory location
255:29 - has its own address defined which can be
255:33 - accessed
255:34 - using the ampersand symbol so i think we
255:37 - already
255:38 - used this particular symbol before in
255:40 - our previous tutorials
255:42 - but we're going to you know tackle
255:44 - deeper what is
255:46 - this particular symbol and how we can
255:48 - use this
255:49 - in um you know working with pointers
255:53 - and it is you know denoting an address
255:57 - in memory meaning the ampersand
256:00 - and for example we're going to define
256:03 - here or create a program
256:05 - that could um showcase the capability of
256:09 - this operator
256:11 - and um the basic
256:15 - access to or basic you know access to
256:19 - the pointer
256:20 - address so for example we have a
256:21 - variable in
256:23 - var one and then we have
256:26 - char var2 which is the length
256:30 - for example is 10 so basically guess
256:35 - as i've said these particular variables
256:38 - these variables has location or has a
256:41 - specific location in our memory
256:43 - and every memory location has its own
256:46 - address
256:47 - so in order for us to verify that we
256:49 - could try
256:50 - to print the address or memory address
256:53 - of this variables
256:55 - so we're going to use printf
256:58 - function and then in here we're going to
257:02 - say
257:02 - address of var 1
257:08 - is
257:11 - percent x so this is the format space of
257:14 - uh performance specifier when we're
257:17 - trying to display the address
257:19 - of the variable so percent
257:23 - x and then we're going to specify
257:26 - a new line here and then comma and then
257:29 - of course
257:30 - we need to use the ampersand symbol
257:33 - and of course the name of our variable
257:36 - say for example the
257:37 - var one so the address of var1
257:41 - column and then percent x the format
257:43 - specific specifier
257:45 - and then of course specifying ampersand
257:47 - and the name of our variable
257:50 - one and um we could
257:53 - do also the same for the second one or
257:56 - second variable var2
257:58 - so percent x and then this will be
258:01 - var two so this is basically guys trying
258:04 - to test
258:06 - if this particular variables has you
258:08 - know
258:09 - we will just display the um address of
258:13 - this variable okay so before we run our
258:16 - program let's change first this
258:18 - because i have forget to type
258:22 - number one because this is uh this is
258:25 - suppose saying
258:26 - that this particular variable has the
258:28 - length of
258:29 - 10 okay so that's char var2
258:33 - and then open and close square brackets
258:36 - and then 10 okay
258:39 - so let's try to build and run our
258:41 - program
258:42 - and as you can see it's going to display
258:45 - the address of one is six one
258:48 - uh fe1c and the second one will be
258:52 - fe one two so that's basically the
258:56 - address of the variables var1
258:59 - and the var two
259:02 - so a pointer variable is a variable
259:05 - whose value
259:06 - is the address of another variable
259:09 - okay so for example direct access of the
259:13 - memory location
259:14 - now like any variable or constant you
259:17 - must declare
259:18 - a pointer before using it to store
259:21 - a variable address so the
259:24 - typical or you know the general form of
259:27 - pointer variable declaration is just
259:28 - like this we need to specify the type
259:31 - and then the asterisk or star symbol or
259:36 - asterisk in other
259:37 - other terms and then of course the
259:41 - variable name so that's how
259:44 - to declare a pointer variable so again
259:48 - we need to specify the type and then
259:51 - asterisk symbol
259:53 - and then the variable name
259:57 - so um here
260:00 - the type or type is the pointers base
260:03 - type okay and it must be a valid
260:06 - c data type and of course the variable
260:10 - name or the var name
260:11 - is the name of the pointer variable and
260:15 - as you can see guys this particular
260:17 - symbol asterisk symbol
260:19 - is sometimes used to declare
260:22 - or use for multiplication process or
260:25 - multiplication
260:27 - operation right but in this particular
260:29 - case it is
260:30 - being used as to declare a pointer
260:33 - variable okay now
260:37 - in order for us to declare
260:41 - pointer variable based on this
260:44 - particular declaration
260:45 - form so we could say something like in
260:48 - and then percent or i mean the asterisk
260:51 - symbol
260:52 - and then the name of our variable so
260:55 - this will be
260:59 - pointer
261:02 - pointer to an integer
261:06 - okay and then we have for example double
261:10 - and then the asterisk symbol dp
261:15 - and this is basically the pointer
261:19 - to a double
261:22 - we also have like float and then
261:26 - fp this will be obviously
261:30 - pointer pointer
261:33 - to a float
261:36 - and another thing ch
261:40 - and then this will be a pointer
261:44 - obviously to a car regular
261:47 - so the actual data type of the value of
261:49 - all pointers
261:51 - is you know a long hexadecimal number
261:54 - that represents the memory address
261:57 - so whether we declare it as in we
261:59 - declare
262:00 - it as double we declare it as float or
262:03 - character so it's going to do it's going
262:06 - to return
262:08 - a long hexadecimal number that
262:10 - represents
262:11 - the memory address now the only
262:14 - difference between pointers of different
262:16 - data types
262:18 - or data types is the data type of the
262:20 - variable
262:21 - or constant that the pointer points to
262:25 - so for example this particular variable
262:28 - points to
262:29 - this variable one then it's going to be
262:32 - a bit different because we are
262:34 - referencing
262:35 - to an in variable so let me
262:39 - show you that how you can you know use
262:41 - pointers
262:42 - we could remove this lines
262:46 - okay in var1 we could
262:50 - assign a value to this like 20 and then
262:54 - this this will be the actual
262:59 - actual variable declaration
263:02 - so this particular variable
263:06 - has the value 20 and then
263:09 - we could declare
263:12 - a pointer variable so in
263:16 - and then asterisk ip
263:20 - so this is pointer
263:26 - variable declaration
263:29 - so you get to see the difference between
263:31 - this declaration
263:34 - the pointer variable uses the symbol
263:37 - asterisk okay
263:39 - and then of course in order for us to
263:41 - store the address
263:42 - of the variable one into
263:45 - the pointer variable ip we could
263:49 - use ip variable equals
263:53 - the ampersand symbol and of course
263:57 - the var okay so basically guys
264:01 - we're just passing the memory address of
264:04 - this particular variable one
264:06 - into the pointer variable ip okay
264:10 - so for example we could print the
264:12 - address of our
264:13 - var one so printf
264:21 - address of var
264:24 - one we could use percent
264:28 - um x as the format specifier
264:32 - and then box slash n for new line and
264:35 - then
264:37 - use the ampersand symbol and then var1
264:41 - so let's try to declare or i mean
264:43 - display first
264:44 - the address of the var1
264:48 - and then we could also just do the same
264:50 - print the address
264:53 - or the value of the
264:56 - pointer variable ip
265:00 - so the value of ip
265:04 - and then percent x
265:08 - backslash n and then the
265:12 - variable ip so let's try this
265:15 - clean and build our program and it
265:18 - should
265:19 - you know display the same hexad
265:21 - hexadecimal value
265:23 - so address of var one is six one
265:26 - f e one four and then the value of i p
265:30 - is you know six one f e
265:33 - 1 4. so basically we're just trying to
265:36 - display or i mean store
265:38 - the memory address of var1 into
265:42 - the pointer variable ip
265:45 - okay and of course if you want to access
265:48 - the value using a pointer
265:53 - um you could
265:57 - try to modify our program to access
266:00 - the value
266:06 - access the value using the pointer
266:09 - variable
266:11 - so printf and then
266:15 - value of
266:18 - pointer variable ip
266:25 - so for example percent
266:29 - d backslash n
266:33 - and then asterisk ip
266:37 - so basically we're just trying to access
266:38 - the value of this particular
266:41 - pointer variable so let's try this
266:46 - clean and build our program and
266:49 - as you can see here we have the address
266:52 - of var 1
266:53 - 6 1 fe 1 4 and the value of
266:56 - the pointer variable or i mean the
266:58 - address
266:59 - of ip or you know the pointer variable
267:03 - ip61fe14
267:05 - and also here we could say that the
267:07 - value
267:08 - of this is 20 which is also the same
267:12 - with our variable one so that's how
267:16 - easy for us to you know use the pointers
267:19 - inside our c program in this video guys
267:22 - we're going to be discussing what is
267:23 - string cnc
267:24 - and how we can take advantage of the
267:27 - usage of this particular strings
267:30 - and then of course we're going to be
267:31 - dealing with the different functions
267:34 - that we could use in order to work with
267:37 - our
267:38 - strings in rc programming language now
267:41 - if you are new here in our youtube
267:43 - uh youtube channel and you want content
267:45 - about programming i am inviting you to
267:47 - subscribe
267:49 - and press the notification bell so
267:51 - you'll get updated whenever we have a
267:52 - new upload
267:53 - so without further ado let's dive right
267:56 - into our topic which is the strings
267:59 - in c programming so basically you guys
268:01 - when we
268:02 - say string in c programming it is the
268:05 - one dimensional array of characters
268:08 - this is called strings in other terms
268:11 - this is just you know a group of
268:14 - characters
268:16 - um logically grouped together and then
268:19 - and then
268:19 - there should be a sense why we're
268:22 - grouping these characters together
268:24 - and this is terminated by null
268:28 - character backslash zero
268:31 - so actually guess there are two types of
268:33 - or two ways to declare
268:35 - string in c programming okay
268:39 - so we could declare it like this
268:42 - basically guys we have here the basic
268:44 - structure of our
268:48 - starter program so hello world program
268:50 - so i'm just going to delete that
268:52 - and we're going to initialize
268:56 - or declare string in c
268:59 - programming so you could do it like this
269:01 - you could
269:02 - um specify the type as char or car
269:07 - and then of course the name of your
269:10 - variable so you could name it something
269:12 - like this name
269:14 - and then you could specify here the
269:18 - um length of your
269:22 - array of characters so for example six
269:25 - and then in here we could um
269:30 - add the different characters
269:33 - for this particular string so we could
269:37 - say here for example h
269:41 - comma and then we're going to specify
269:44 - another character
269:46 - so first you have to specify single code
269:49 - and then the character and then single
269:52 - code to close that particular
269:54 - literal string and then another
269:58 - comma and then single quote
270:01 - the character again single code comma
270:04 - and then single code
270:08 - another character okay
270:12 - so you get the idea on how you could you
270:14 - know
270:15 - declare your string
270:18 - variable in c programming so i'm just
270:21 - going to continue working
270:23 - with this so we have um
270:27 - declared six so as i've said from the
270:30 - beginning
270:30 - you have to or the string it is the
270:34 - one-dimensional array of characters and
270:37 - it should be terminated by a null
270:38 - character
270:39 - so null character in c is backslash
270:43 - zero okay so basically now we now
270:46 - uh we do have the string name
270:49 - and then we need to close this one up
270:52 - so this is how we could
270:56 - declare our string in c
270:59 - programming language and actually guys
271:02 - you could
271:03 - do it also like this so for example
271:07 - you don't need to specify the len so
271:10 - char
271:11 - and then you could say here last name
271:15 - and then all you have to do is um
271:18 - declare it as an array but you don't
271:21 - have to specify
271:22 - the length here for example 5 or 6
271:25 - or something like that so all you have
271:28 - to do is
271:31 - initialize this with a with an actual
271:34 - value for example
271:36 - hopkins
271:39 - something like this okay and then close
271:43 - it with semicolon so basically guys it
271:46 - means the same thing if we declare the
271:49 - string like this
271:50 - or if you want to declare the string
271:53 - like this
271:54 - and of course we could try to display
271:58 - this
271:59 - all we have to do is print
272:01 - [Music]
272:03 - and print f and then we could say here
272:08 - the name is and then we need to
272:12 - add the format specifiers so percent s
272:15 - for string
272:17 - and then the new line specifier
272:20 - and then comma and then the actual value
272:23 - or string or
272:24 - the variable that we want to display
272:26 - which is the
272:27 - name something like this and then
272:29 - semicolon
272:31 - and we could also do the same for the
272:33 - last name so printf
272:35 - and then open and close parenthesis the
272:38 - last name
272:39 - is percent again percent as
272:44 - the format specifier for string and then
272:47 - newline
272:48 - and comma
272:51 - then the actual variable which is last
272:54 - name
272:55 - so we could try this at this the the
272:58 - semicolon at the end of the line
273:00 - that denotes that this is the end of
273:03 - this particular
273:04 - line okay so make sure you do that
273:07 - because
273:08 - the compiler would complain if you did
273:11 - not
273:11 - specify the end of a certain line
273:14 - so now we could build and run our
273:17 - program
273:18 - and it should display your string
273:21 - like this the name is hello as we have
273:25 - specified in our
273:27 - variable name and then the last name
273:31 - is hopkins as you can see here okay
273:34 - so that's a good start on how we could
273:38 - start working with our string in c
273:41 - programming language now there are
273:44 - functions as i've said there are
273:45 - functions that we could use
273:47 - uh if we want to work with
273:51 - our string more so so for example
273:54 - what if you want to copy a string
273:58 - concatenate the string get the length of
274:02 - the string
274:03 - so we could do that we could also
274:05 - compare strings if you
274:07 - uh if you like to compare strings so all
274:09 - we have to do guys
274:10 - we need to include
274:14 - a header file which is string.h
274:18 - so this header file
274:23 - contains all the functions that we need
274:25 - if you we
274:26 - want to work with string
274:30 - in you know deeper
274:33 - sense so string
274:37 - and then h as i've said this will
274:39 - contain all the functions that we need
274:41 - um like for example the sdr copy
274:45 - str concatenate str land
274:49 - or if you want to get the length of a
274:51 - certain variable
274:53 - so for now let's just try this
274:56 - this is for display display
275:00 - the value of our string right
275:04 - and then of course here we could
275:08 - use functions to our
275:13 - string okay so perhaps the first
275:16 - function that we could use is the sdr
275:19 - copy
275:20 - so the keyword for that is str
275:24 - sdr and then c p
275:28 - y so as you can see here we have the
275:31 - other
275:31 - suggestions um the sdr copy
275:35 - right here so we could click on that and
275:38 - then in here we could specify
275:40 - the string so let me explain first
275:43 - what this means
275:47 - so the sdr copy function takes in two
275:50 - parameters
275:51 - so the first one will be the destination
275:54 - or the string that
275:57 - the copy of a value will be stored in
276:02 - and then the second function i mean the
276:04 - second argument will be
276:06 - the source of um
276:09 - or i mean the source string okay so
276:12 - again
276:13 - it will take two parameter this strcpy
276:18 - the first parameter will be the
276:19 - destination string
276:22 - the second parameter will be the source
276:25 - string okay so for example in this
276:30 - program i'm going to declare another
276:33 - string here
276:34 - and then we can say here
276:38 - s t r
276:42 - and then full name
276:45 - example this is just for a sake for the
276:48 - sake of example
276:50 - okay so for example this will be
276:58 - maybe
277:00 - i don't know maybe 13
277:04 - okay so we don't set the value for this
277:07 - for now
277:08 - and all we have to do is use our sdr
277:11 - copy function and then we need to
277:14 - specify
277:15 - the destination string so for now
277:19 - let's use this sdr full name as the
277:22 - destination string
277:23 - right there and then comma
277:27 - and then of course we need to specify
277:29 - the source string
277:31 - okay and then the source string
277:36 - will be um
277:40 - maybe the the last name
277:43 - okay
277:47 - now if we want to display the value of
277:50 - set or sdr full name then we could
277:54 - use the printf statement and then
277:57 - we can say here the full name
278:01 - is and then percent s again
278:04 - backslash n for the new line and comma
278:09 - for um the actual value
278:13 - str full name right there
278:16 - and then end this up with the semicolon
278:20 - okay and then we could clean and build
278:22 - this just to see the result of
278:24 - our program and in here
278:28 - we have an error
278:32 - okay so we copied the actual value of
278:36 - our
278:38 - variable instead of using last name
278:41 - so let's just
278:43 - [Music]
278:45 - modify this so
278:48 - instead of hopkins it should be last
278:50 - name here
278:51 - okay so clean and build our program and
278:55 - it should be okay for now
278:57 - and as you can see here we have the
279:00 - display
279:01 - so the last name or the name is hello as
279:04 - you can see
279:06 - and then the last name is hopkins and
279:09 - the full name is hopkins and
279:12 - these two is identical that's because
279:15 - we already we just copied the value of
279:19 - last name and assign the value to the
279:23 - str full name okay so that's how easy
279:26 - for us to copy
279:27 - strings inside our c program so there
279:30 - are
279:31 - there are other functions as well if you
279:33 - want to explore more about this
279:35 - so for example the other function that
279:38 - we could use
279:39 - is str
279:43 - say a t or c sdr cut so this will
279:47 - concatenate
279:49 - the string or two string so basically it
279:53 - will just
279:53 - takes two parameters the
279:57 - the first one and the second parameter
280:00 - and then
280:00 - it should you know combine this two
280:03 - string to
280:04 - to to form a new string so let me show
280:07 - you that
280:07 - so let's just use this sdr
280:11 - cut and then maybe we'll just use the
280:15 - name and then the last name
280:18 - so the first string will be name
280:21 - okay and comma and then we need to
280:24 - specify
280:24 - also d um
280:28 - but they call this the
280:33 - string or the second string which is the
280:37 - sdr
280:38 - full name okay
280:42 - and then
280:45 - semicolon okay
280:49 - and then after this we could
280:52 - display the value of our name
280:57 - so all we have to do now is copy this
281:00 - and paste it this here
281:03 - and let's clean and build our program so
281:06 - first now
281:07 - let's just
281:10 - close this close the output
281:14 - the output first and then clean and
281:17 - build
281:18 - our program and it should
281:21 - display here what we have done so far so
281:25 - the name
281:26 - is hello the last name is hopkins the
281:28 - full name is hopkins
281:30 - and as you can see here the name is
281:33 - hello hopkins so as you can see
281:37 - it concatenated the name and then
281:40 - the last name so the the name got the
281:43 - value of hello
281:44 - and then the last name got the value of
281:46 - hopkins
281:48 - okay so i think that's all there is to
281:50 - it for this tutorial and
281:52 - if you want to learn more about strings
281:54 - all the functions
281:55 - you could explore the documentation
281:58 - so if you want to know more about
282:02 - the different functions available
282:06 - in this string
282:09 - that h header file you could
282:13 - visit this website and then you can
282:17 - see here the commonly used
282:21 - string functions so we already have
282:24 - [Music]
282:26 - used the str cpy
282:29 - sdr cat and of course
282:32 - the other most common you commonly use
282:36 - string function
282:37 - is getting the length of your string
282:40 - okay and in this video guys we're going
282:42 - to be learning
282:43 - structures in c so
282:46 - we're going to explore what is
282:49 - structures
282:50 - and how we could you know use structures
282:53 - inside our c program so basically guys
282:56 - when we say
282:57 - structure it is a user user defined data
283:01 - type
283:02 - it is used to store a collection of
283:05 - different kinds of
283:07 - data so in a sense it could be
283:11 - something similar to an array so
283:14 - basically it is like
283:15 - a collection the only difference is that
283:18 - an array is used to store the same data
283:21 - types
283:22 - so in an array if you want to save an
283:25 - integer value
283:26 - so you have to make sure that all the
283:29 - elements of that particular array is
283:31 - also int or integer and if you want to
283:35 - store
283:35 - double so it should have
283:39 - double or it should you know contain all
283:42 - double elements while
283:45 - if you want to use structure you could
283:49 - declare multiple
283:53 - data type inside this particular
283:56 - collection
283:57 - so in order for us to use
284:01 - structure in c we're going to be using
284:03 - this particular keyword
284:05 - strut okay
284:08 - so this is how we could create a
284:11 - structure in c programming so struct so
284:15 - variables
284:15 - inside the structure are called members
284:19 - of the structure okay
284:22 - so now let's try to define a structure
284:25 - in c
284:26 - so say for example we want to
284:29 - um try to declare
284:33 - a struck courses so all we have to do is
284:37 - specify the keyword
284:38 - strap okay and then
284:42 - this is going to you know make sense
284:44 - later on
284:45 - if we want to access the members of this
284:48 - particular
284:48 - struct so for now let's just stick to
284:51 - this
284:52 - um strap is the keyword that we could
284:55 - use to you know declare or define
284:57 - a structure in c so
285:00 - again that's the keyword struct and then
285:03 - we could specify
285:04 - the structure name
285:08 - so this could be any any name that you
285:11 - want so for example we could name this
285:13 - courses okay
285:18 - so this particular courses uh this will
285:21 - contain
285:22 - different variables okay so as you can
285:25 - see here we have added curly braces
285:28 - opening and closing curly braces
285:31 - and then at the end of the closing curly
285:33 - brace the semicolon
285:36 - that signifies the end of this
285:37 - particular line okay
285:40 - and then inside here as i've said we
285:42 - could have
285:43 - multiple variable type okay
285:47 - so for example number
285:51 - one will be
285:54 - char or car and then we could name this
285:58 - for example website and then
286:01 - the length is 50
286:04 - okay and then semicolon
286:08 - and another one car
286:12 - for char and then subject will be
286:16 - the length 50.
286:20 - then the last one the last one will be
286:23 - about price
286:25 - okay so as you can see here guys we have
286:29 - these
286:29 - trap courses and then
286:32 - it contains three different data types
286:37 - uh of variables so we have here website
286:40 - with lan 50 subject
286:42 - lan 50 and then price which is
286:45 - an in or of type in okay
286:49 - that's how easy for us to you know
286:51 - define a structure
286:52 - in c now we could um
286:57 - access this the strap
287:01 - courses but basically we need to move
287:05 - this
287:05 - outside of our main function
287:09 - so we have to move this
287:12 - i'll just have to cut and paste this
287:16 - so it should be outside our main
287:18 - function
287:19 - because we're going to declare or i mean
287:22 - access the struct
287:26 - from this main function right here
287:29 - okay so you could think of this
287:33 - uh if you are into object oriented
287:36 - programming
287:37 - you could think of this as a class for
287:38 - now but this is
287:40 - different because this is a structure
287:43 - which is collection of
287:45 - you know different variables or
287:47 - different data types
287:49 - but you could think of this as you know
287:53 - an object or a class for now and then we
287:55 - could access this
287:56 - inside our main function so in order for
287:59 - us to
288:00 - access that we just need to
288:03 - specify the name of
288:06 - our strap inside our main function
288:10 - so all we have to do is use again the
288:12 - struct keyword
288:16 - like this and then the name of this trap
288:20 - which is courses okay and then
288:25 - we could assign an alias to this for
288:28 - example
288:31 - course or maybe c a big letter c
288:34 - okay big letter c okay
288:38 - and then semicolon so that's how we
288:40 - could um
288:42 - access this courses struct inside our
288:46 - main function so all we have to do is
288:48 - like
288:50 - um use the struct keyword and then name
288:53 - of our struct which is courses
288:55 - and then assign assign an alias to this
288:58 - uh
288:58 - strap okay and then after that one
289:02 - we could initialize
289:06 - perhaps our variables
289:10 - okay or members of this struct
289:14 - so all we have to do is we could say
289:16 - here
289:17 - initialization we could now
289:20 - access the members of the strat courses
289:24 - by using this alias so initialization
289:27 - for example
289:30 - um sdr copy okay so i believe i
289:34 - i have already showed you how you could
289:37 - um assign a value to a string because
289:40 - we're going to be assigning value to
289:42 - this
289:42 - website so this is a string collection
289:44 - of
289:46 - characters so str cpy
289:50 - and then we're going to say here c
289:56 - and then website so as you can see here
289:59 - we have
290:00 - the access to all the
290:03 - members of the courses
290:06 - struck so we're going to use the website
290:09 - first
290:09 - and then we're going to assign a value
290:12 - here
290:13 - for example triple w
290:18 - programming knowledge something like
290:21 - that
290:22 - so basically what we're doing here dot
290:25 - com
290:26 - we're just doing here is we're just
290:31 - getting the website
290:36 - member and then assign a value to that
290:38 - which is the
290:41 - www.programmingknowledge.com and
290:43 - after this we could you know access the
290:46 - this
290:46 - value by using this
290:49 - member of struck so later on we will try
290:53 - that
290:53 - but for now let's just move to the next
290:56 - member
290:57 - so again we're going to use sdr copy
291:02 - strcpy and then
291:05 - now we're going to use the
291:08 - subject subject
291:13 - so the the subject will be
291:16 - introduction to c programming
291:23 - so that will be the subject for this
291:25 - particular course
291:26 - so again we're just doing here um
291:30 - we're just getting the subject member
291:33 - of our strap and then assign a value to
291:36 - that
291:36 - which is this string introduction
291:40 - to see programming okay and
291:44 - of course the other one or the last one
291:46 - will be the price
291:49 - so what we do here is use the c alias
291:53 - that and then price
291:57 - and then we could assign a value here
291:59 - for example we want to
292:01 - um specify a value or a price here like
292:05 - 15 or something and then
292:09 - after that after initialization of
292:10 - course we can use the
292:12 - these values right here
292:15 - so all we have to do is we can say here
292:18 - print
292:19 - so we could use printf statement
292:22 - and then we could say here website
292:27 - percent um semicolon our column
292:30 - and then percent s
292:33 - and then we're going to add new line
292:36 - here
292:38 - comma and then the member of our
292:42 - strap so c dot and then
292:46 - website okay and then semicolon at the
292:49 - end
292:50 - so we're going to do the same for the
292:52 - other members
292:54 - so uh the next
292:58 - one is the subject
293:01 - so percent s
293:05 - and then backslash n and then
293:10 - we're going to access the subject
293:13 - member of strap and then the last one
293:16 - will be
293:16 - wind f i mean the price
293:21 - so price we're going to do the same here
293:25 - percent um d that's the format specifier
293:29 - for our
293:31 - uh integer values so
293:34 - c that price okay and then semicolon at
293:38 - the end of this line
293:40 - to denote that this ends with this
293:44 - semicolon okay so now let's try this
293:47 - let's uh build and run our program and
293:50 - we are we're having an error here
293:54 - i respected because expected
293:58 - that's because um we didn't
294:01 - we did not add the semicolon here
294:04 - okay rookie mistake build and run
294:07 - and as you can see here we now have
294:11 - the values displayed here in our console
294:15 - so the website is www.programming.com
294:19 - and then subject is introduction to c
294:21 - programming
294:22 - and the price is 15
294:26 - so that's how easy for us to use struck
294:28 - in c and then we could
294:30 - you know make this um
294:34 - collection of different variables and
294:37 - then we could assign values initialize
294:39 - and then we could also change if we want
294:41 - to change the values
294:43 - after initialization and then after that
294:45 - we could display the values or the
294:47 - actual values
294:48 - of the members of our struct
294:52 - and in this video guys we're going to
294:53 - learn how to use
294:55 - unions insider c program so from the
294:58 - previous tutorial
294:59 - we learned how to define and use
295:03 - structure and then we also implemented
295:07 - different methods or different functions
295:09 - that we could use
295:10 - whenever we are working with structure
295:13 - right so at this point in time
295:16 - we will be learning how to use union
295:19 - also
295:20 - so basically union and structure is
295:23 - almost the same
295:24 - but there's a significant difference
295:26 - that we will discuss later on
295:28 - so the thing about struck is or the
295:31 - thing about structure is that
295:32 - we can store different data types in
295:35 - different
295:36 - memory location but when we say union we
295:40 - can store
295:40 - different data types in the same memory
295:43 - location
295:44 - so that being said if we try to define
295:48 - union
295:49 - a union is a special data type available
295:52 - in c
295:53 - that will allow us to store different
295:55 - data types in this
295:57 - in the same memory location so you can
296:00 - define
296:00 - a union with many members but only
296:04 - one member can contain a value at any
296:07 - given time that's because
296:10 - we store the data inside
296:13 - the same memory location so in other
296:16 - words
296:16 - all the members of the union share
296:20 - the same memory location that's why
296:23 - every time we set a value to a
296:25 - particular member of the union
296:27 - other values will be over um
296:31 - will be erased and then replaced with
296:33 - the
296:34 - new value of a particular
296:37 - member so to define a union
296:41 - you must use the union statement so
296:45 - from the previous tutorial we use struct
296:48 - for this structure
296:49 - but in the case of defining a union we
296:52 - will define a union by using
296:54 - the union statement in the same way as
296:57 - you did
296:58 - while defining the structure and
297:01 - the union statement defines a new data
297:04 - type
297:04 - with more than one member for your
297:06 - program
297:08 - so basically it looks like this
297:12 - but instead of strap you're gonna use
297:16 - union okay so that's union
297:22 - and then of course the name of your
297:25 - union for example data
297:27 - right there and then you have to
297:30 - add open and close curly braces that
297:33 - signifies
297:34 - that all the variable inside this curly
297:38 - braces
297:39 - is a member of the
297:43 - union data okay and then of course we
297:46 - can
297:48 - define the members here so the same
297:51 - thing with
297:51 - our structure so that being said we can
297:55 - say here int i okay
297:59 - and then we could also um add
298:02 - float f
298:06 - and then say for example char sdr
298:11 - and basically for example the length for
298:13 - this
298:14 - is like 10 okay
298:17 - so let me show you first how this
298:20 - particular
298:20 - union works so
298:24 - the union tag is optional actually and
298:28 - each member definition is a normal
298:31 - variable definition so such as
298:33 - i or in i or float
298:37 - f or any other valid variable definition
298:40 - and at the end of the union's definition
298:43 - before the
298:44 - final semicolon you can specify
298:48 - one or more union variables but is
298:51 - but it is optional so you can also say
298:55 - here
298:56 - the name of your union is like
299:00 - um data okay so you can refer
299:04 - to this data and then you can now
299:07 - you now have the access to the members
299:09 - of your
299:10 - union by using this reference okay
299:14 - now a variable of data type
299:17 - can store integer
299:21 - float or string of characters
299:25 - so it means a single variable and then
299:28 - same memory location can be used to
299:30 - store multiple types of
299:33 - data so you can use any built-in or
299:36 - user-defined data types inside a union
299:38 - based on your requirement
299:39 - so it depends on you so the memory
299:42 - occupied by your
299:43 - uh union will be large enough to hold
299:46 - the largest
299:47 - member of the union so for example in
299:51 - this particular
299:52 - code data type will occupy
299:56 - 20 by or i mean 10 bytes of memory space
300:00 - because
300:00 - this is the maximum space which can be
300:03 - occupied
300:04 - by a character string now we can
300:07 - display the values
300:10 - uh of this union so for example we try
300:13 - to
300:14 - display all the uh i mean
300:17 - any value coming from this union so
300:20 - at first we could you know refer to
300:24 - the members by using this reference so
300:27 - data
300:29 - dot and then we could say here
300:32 - i then we could initialize this value
300:35 - into
300:35 - for example um five like that
300:39 - and then we could print the value of i
300:43 - so here we could say the
300:46 - value of i is
300:50 - and then of course we need to have the
300:53 - format specifier for our
300:56 - i okay so
301:00 - d and then we could add also the
301:03 - new line and then
301:05 - [Music]
301:06 - comma and then of course data
301:10 - dot i okay
301:14 - and then semicolon so let's try to run
301:17 - our program
301:17 - so basically let's hope that
301:21 - we won't have problems so build and run
301:24 - or program and as you can see here
301:28 - the value of i is 5.
301:31 - so we were able to set the value of
301:35 - our data i member
301:39 - and initialize it to
301:42 - 5. now take a look at this
301:46 - for example we set the value of float
301:49 - into
301:50 - a something into some value for example
301:54 - data
301:55 - that f equals
301:58 - to for example let's say 22
302:02 - or maybe like eight
302:04 - [Music]
302:07 - okay and then um
302:11 - we could try to
302:14 - maybe add 8.5 here just to
302:18 - make sure that it is kind like float
302:20 - value
302:21 - so we set the value of our
302:24 - f into 8.5
302:28 - so we could you know build and run our
302:31 - application
302:34 - and as you can see here we're getting
302:38 - the value of i is something
302:41 - like this okay
302:45 - so the value of i is something like this
302:49 - that's because the value has been you
302:53 - know corrupted
302:54 - when we try to set
302:57 - the member f into something like
303:01 - 8.5 and as you can probably
303:04 - remember that the members
303:07 - of the union share the same memory
303:10 - location
303:11 - so that's why if we try to change the
303:14 - value of a certain member
303:16 - then it will override the
303:19 - value of the other member so that's why
303:22 - it's
303:22 - somehow corrupted our value of i here
303:26 - and we're getting this random number
303:29 - like this
303:30 - but the purpose of using union actually
303:33 - is
303:34 - to have a some sort of
303:37 - a value at a certain point of time so
303:40 - for example if we want to
303:42 - make use of the union we could try to
303:45 - display the value of
303:47 - i right here after
303:50 - the initialization so the value of i is
303:53 - and then we're getting
303:54 - the the value of i
303:58 - remember here and then also if you want
304:00 - to
304:01 - you know display the value of the float
304:04 - f
304:05 - value or remember from this union
304:09 - then we could what we could do here is
304:11 - change this into f
304:14 - that's the formal specifier for a
304:17 - float value and then we could say here
304:20 - the we want to display the
304:23 - member f from the data
304:26 - union so we could actually get the
304:29 - correct value
304:30 - right after this so let's try to
304:33 - run this so build and run our
304:36 - application
304:37 - and as you can see here that
304:41 - we're getting the value of our i is 5 so
304:44 - let's
304:44 - change this instead of i this is
304:48 - member f
304:52 - and this is member
304:55 - i because this is a member of this
304:58 - union so let's build and run our
305:00 - application
305:02 - and we're getting this output the value
305:04 - of member i
305:05 - is equal to 5 and then the value of
305:08 - member
305:09 - f is equal to 8.5 so that's basically
305:13 - the correct value
305:14 - that we're getting or we're setting here
305:16 - in our
305:17 - main function okay so i think that's all
305:20 - there is to it for this tutorial
305:22 - and a sort as a sort of summary or
305:24 - review
305:25 - we have learned how to use union insider
305:28 - c
305:28 - program and then we learn
305:31 - that we can store different data types
305:33 - in the same memory location
305:35 - by using this union keyword and then
305:39 - store different variables with different
305:41 - data types
305:42 - and um yeah we also set
305:46 - and initialize the value of the members
305:49 - of our union
305:50 - and then also display the values
305:54 - individually
305:55 - right here in our c program and in this
305:58 - video guys we're going to be discussing
306:00 - type def
306:01 - in c programming so as a sort of
306:05 - review in the previous tutorial we have
306:07 - learned
306:08 - how to use unions and how to implement
306:11 - unions
306:12 - inside our c program
306:15 - and we also have implemented a simple
306:18 - solution or simple program
306:20 - that implements the
306:24 - capability of unions and c
306:27 - so as i've said in this video we're
306:28 - going to be discussing type def
306:30 - and yeah i'm going to show you how you
306:32 - can use typedef
306:34 - inside your program or c
306:37 - program so basically guys c is such a
306:40 - dominant language
306:41 - of its time and even now that even
306:45 - uh you can name those
306:48 - primary data type of your own and can
306:51 - create
306:52 - your own name data type
306:55 - by blending data type and its qualifier
306:59 - so
306:59 - it means that we could create our custom
307:02 - name for our qualifier or custom
307:06 - name for our primary data type and then
307:10 - we can use the keyword type def right
307:13 - here
307:14 - and this is a
307:17 - keyword implemented to tell the compiler
307:22 - for assigning an alternative name to the
307:25 - existing
307:27 - data types this keyword
307:30 - type def typically employed in
307:33 - association with
307:34 - user-defined data types in cases
307:38 - if the names of data types turn out to
307:40 - be
307:41 - a little complicated or intricate
307:45 - for a programmer to to get or
307:48 - to use within a program so there are
307:50 - cases that
307:52 - a particular data type or a name of a
307:55 - particular
307:56 - data type is like complicated
307:59 - and it's not easy to be used inside a
308:02 - program so that's
308:03 - where the type def comes in so it
308:07 - can be used to make the naming of our
308:10 - data types or
308:12 - variables in c a lot a lot easier
308:16 - so the typical format for implementing
308:18 - this type dev keyword
308:20 - is like this we can
308:25 - use the typedef keyword
308:30 - just like that and then we could um
308:32 - specify
308:33 - the existing
308:37 - names of
308:41 - data types or data type
308:45 - data type okay and then of course right
308:49 - after that is the alias
308:53 - user given name
308:57 - so again we're going to use the type dev
309:01 - keyword
309:02 - and then of course the existing names of
309:05 - data types so there are like int signed
309:08 - in
309:09 - unsigned char
309:14 - and other permitted data types inside
309:16 - our c program
309:17 - and then of course we're going to add
309:20 - the
309:20 - user given name which is
309:24 - uh the custom name that we want to name
309:27 - this particular um existing name
309:32 - data type so this is going to
309:35 - make sense later on if you try to
309:37 - implement this inside rc program
309:39 - so for now just think of this as the
309:42 - syntax
309:43 - of defining or how to name
309:47 - our existing data types so type def
309:50 - and then existing names of of data type
309:53 - and then alias
309:55 - or the user given name so
309:58 - we could um add here a sample snippet
310:03 - so like this type def okay
310:06 - and then sign
310:10 - long okay
310:13 - and we're going to give this
310:18 - um user given name as s long
310:21 - okay so basically guys if you have or if
310:25 - you are trying to define
310:27 - sign long um data type
310:31 - so it's going to be uh complicated or
310:34 - like it's going to have a long
310:38 - name because you can do it like this
310:41 - sign
310:43 - long and then say for example var
310:46 - variable 1 and then sign long
310:50 - var2 signed
310:53 - long var 3 and so on
310:57 - so as you can see the name of this
310:59 - particular variable or the
311:00 - data type has like
311:04 - signed and then long keyword so it's
311:06 - going to
311:07 - take up more space take more uh
311:10 - we're going to type more text inside our
311:13 - program instead of just using it like
311:17 - this so all we have to do is
311:20 - define it like type def and then
311:23 - sign long and then as long and then
311:26 - we could implement this
311:31 - said of like that we could implement
311:34 - that by using something
311:36 - s long and then g
311:40 - okay so basically what we're doing here
311:44 - is that we're we're just getting this
311:46 - alias
311:47 - from there and then um
311:50 - it's going to include all the data types
311:53 - or
311:53 - existing names of data type here so
311:56 - the s long is associated with this right
311:59 - here
312:00 - so work we can declare or
312:04 - yeah create a variable with the signed
312:06 - long
312:07 - data type something like that and then
312:09 - of course we could
312:11 - add a variable just like this
312:15 - it will allow us to create two variables
312:17 - name
312:19 - g and d which will be of
312:22 - type signed long
312:26 - and this quality of cyan long is getting
312:28 - detected from
312:29 - s long okay which already defined the
312:33 - meaning of
312:34 - islam or as long in your program which
312:37 - is
312:37 - this particular meaning signed
312:41 - long okay and right after that
312:44 - we could make this or the concept of
312:47 - type type def can be implemented
312:50 - for defining a user defined data type
312:54 - with a specific name and type
312:58 - and this type def can also be used
313:01 - with structure um of c language
313:05 - and of course we already have um
313:08 - tackle demonstrated how we can use strap
313:12 - insider c program so basically what we
313:15 - could do
313:16 - here as i've said we could
313:19 - add or use this a keyword type
313:22 - def in our structure so
313:26 - the syntax is like this all we have to
313:29 - do
313:29 - is type in
313:32 - type def and then struct
313:38 - then say for example student
313:41 - so this particular struct is named a
313:44 - student
313:45 - and then it has like
313:48 - the members of this
313:52 - truck is of type char
313:56 - and then say for example s name
313:59 - which is the name of the student
314:02 - okay and then we could say here
314:06 - in s h
314:10 - okay so this particular strat saved
314:14 - um a
314:17 - data which is the name and the age of
314:20 - the
314:20 - student and of course we could
314:24 - add an alias store struck so for example
314:27 - stood
314:29 - okay so just like that and then of
314:33 - course we could use this truck inside
314:35 - our main
314:36 - so for now let's get rid of this
314:40 - so what we could do here is we could say
314:44 - stood and then
314:47 - st something like that and then we can
314:50 - see
314:50 - here printf
314:55 - and then enter student details
314:59 - okay you could add a new line here
315:06 - see me collin and then we could copy and
315:09 - paste this
315:13 - you can see here
315:18 - enter student name
315:23 - and we're going to
315:26 - add a tab slash t
315:29 - and then we could what we could do here
315:31 - is use the scanf function
315:35 - so percent s and then we're going to be
315:38 - passing the st that
315:42 - last name so all we're doing here
315:46 - is just assigning a value
315:49 - of this sds name coming from
315:53 - our user okay and then
315:56 - second line or the second information
315:59 - that we need
316:00 - is all about the age of the student
316:03 - so enter the
316:06 - age
316:09 - okay so we should add backslash n right
316:12 - here
316:13 - to add a new line
316:16 - okay so what we could do here
316:20 - is scan f and then
316:24 - percent d
316:28 - okay and then we could say here
316:32 - st dot h
316:35 - okay and then printf
316:39 - um just like this
316:45 - backslash n for a new line and then we
316:48 - can say here
316:48 - input done okay
316:54 - of course we could display this if we
316:56 - want
316:57 - to you know to get all the information
317:00 - that
317:00 - we have entered the name and the age of
317:04 - the student okay but for now let's
317:07 - let's ju uh let's just try this build
317:10 - and run our program
317:13 - okay so we have here the output enters
317:17 - student details
317:18 - so the first name or the the first
317:21 - option will be the name
317:22 - so we can say here john and then
317:26 - the second option is the age
317:29 - so enter the age of the student so for
317:32 - example the age of the student is
317:35 - and then yeah we
317:39 - need to add um it says here
317:43 - that the main.xc has stopped working
317:46 - we need to add the
317:51 - um ampersand here and then
317:54 - build and run our program once again so
317:57 - i hope this would
317:58 - this would work right now so john
318:01 - and then the age of the student will be
318:03 - 18.
318:05 - so input done okay
318:08 - so basically guys we could um
318:12 - define our struck with the use of type
318:15 - def
318:16 - um keyword
318:19 - just like this and as a as you can see
318:22 - here
318:23 - we define our um
318:25 - [Music]
318:27 - stud alias right here
318:31 - and then we use that stud
318:34 - alias right here to
318:37 - name our variable st and then from that
318:41 - our sd we could access the members
318:45 - by using the dot symbol so st
318:48 - that and then the members of our struck
318:51 - student
318:52 - okay and in this video guys we're going
318:55 - to discuss
318:56 - what is file handling in c
319:00 - and then i'm going to give you a basic
319:03 - example
319:03 - we're going to create a program on how
319:06 - to
319:07 - handle files inside our c program so
319:10 - basically guys
319:11 - c files input or output functions
319:15 - handle data on our secondary storage
319:17 - devices such as
319:19 - our hard disk and c
319:22 - can handle files as stream oriented data
319:27 - or
319:28 - system oriented data or binary files
319:32 - so again guys we're going to focus on
319:35 - this
319:36 - so the first one will be stream
319:40 - oriented
319:43 - data files and the second one will be
319:47 - system oriented
319:51 - data files okay so when we say
319:54 - stream oriented data files the data
319:58 - is the data
320:02 - is stored in the same
320:05 - [Music]
320:06 - manner as it appears
320:11 - on the screen okay so i i hope you can
320:14 - see that
320:16 - the input output operations like
320:19 - buffering
320:20 - data conversions take place
320:22 - automatically
320:24 - while system oriented data files
320:28 - the data files are more
320:31 - closely associated
320:37 - with the operating system
320:40 - and data stored in memory without
320:43 - converting
320:44 - into text format so this
320:47 - is going to make sense later on when we
320:49 - try to implement our very
320:51 - simple file handling insider c
320:54 - program now there are five major
320:58 - operations that can be performed
321:01 - on files so
321:04 - this will be again i'm just going to
321:07 - list it
321:08 - listed here just for you to see because
321:11 - i think it would be
321:12 - much clearer if you can see all the
321:15 - details
321:17 - all the things that i'm talking
321:20 - here so c file
321:24 - operations
321:27 - so first one will be creation
321:30 - of a new file the second will be opening
321:36 - the third one will be reading
321:39 - the fourth yeah fourth one will be
321:43 - writing data
321:48 - you know file and last
321:52 - will be closing a
321:55 - file so these are the
321:58 - five major file operations the first one
322:02 - is great again
322:03 - creation the second is opening so
322:06 - we could open an existing file
322:09 - and then we could read the contents
322:13 - and then write data into a file so for
322:15 - example in your program you want to save
322:17 - an information
322:19 - so you could write data into a file
322:22 - okay and then of course whenever we are
322:25 - opening a file we need to close it
322:28 - after using it inside our program okay
322:32 - so the steps
322:35 - there will be steps for us to set up the
322:38 - file operations so these are
322:41 - the steps for
322:45 - processing a file
322:49 - so number one will be
322:52 - declare a file pointer
322:56 - so this is important so we need to
322:59 - declare a file pointer variable
323:03 - and then this will be our variable that
323:06 - we
323:07 - were going to use whenever we want to
323:09 - work with our files
323:11 - and then after that one we need to open
323:15 - a file using
323:19 - f open
323:22 - method or function okay so
323:26 - after that we're going to process
323:30 - this will be number three process
323:34 - the file using the
323:37 - suitable function right here
323:41 - and number four will be closing
323:46 - close the file using f
323:49 - close function also
323:52 - so if we want to work with
323:55 - files inside our c program we
323:58 - want or we we might want to check
324:01 - this steps for processing
324:05 - our files so we need to declare a file
324:08 - pointer variable
324:09 - and then we're going to open the file
324:12 - using the
324:13 - f open function right here and then
324:17 - process the file using the suitable
324:20 - function
324:21 - so for example we want to
324:24 - iterate through the lines inside the
324:27 - file
324:28 - if you want to save or maybe write
324:31 - information
324:32 - into the file you can do that here in
324:33 - step three
324:35 - meaning you could process the entire
324:37 - content
324:38 - of that particular file and then right
324:40 - after processing
324:42 - maybe uh you need to close the file or
324:45 - not maybe you must
324:48 - close the file after closing or
324:51 - after processing it inside our c program
324:54 - so basically guys there are a lot of
324:57 - functions that we could use when when we
324:59 - say
325:00 - um we're processing a file so to handle
325:03 - files in c um file input or
325:07 - output functions available in the
325:10 - stdio library are the following
325:13 - so i'm just gonna list it also here for
325:16 - you to see
325:18 - so we also we already discussed
325:21 - the the the two functions
325:25 - the first one will be f open and the
325:28 - second one be
325:29 - uh the second one will be f close
325:32 - there are also uh functions such as
325:35 - get c which means
325:39 - um we read a character from a file
325:43 - and then we also have put c
325:46 - so this function put c
325:49 - writes a character into a file and then
325:52 - also we
325:53 - have get w which means
325:57 - we need to read an integer from
326:00 - a file and then we also have put w
326:04 - so write an integer and
326:07 - we're going to use this later on this
326:09 - particular functions okay
326:11 - so you need to be familiar with this
326:14 - again
326:14 - if you want to read characters from a
326:17 - file you need to use this
326:19 - get c and then if you want to write
326:22 - character into a file you you need to
326:26 - use put c
326:27 - and get w gets the integer and put w
326:32 - write an integer into a file and then we
326:34 - also have
326:36 - f printf so
326:39 - f printf prints formatted
326:42 - output into a file and we also have
326:47 - f scanf so reads
326:50 - formatted input from a file
326:54 - we also have f gets right here
326:58 - so f gets a read string of characters
327:02 - from a file and we also have
327:08 - the next one will be f puts
327:11 - and then uh the last one is f
327:15 - e o f so f puts
327:18 - right string of characters into a file
327:21 - and then we also have
327:22 - f eof so it will detects
327:26 - end of file marker in a single
327:30 - file okay now
327:33 - as a sort of example we're going to
327:37 - implement a simple opening in closing of
327:40 - a file and maybe writing
327:42 - a specific text or something into our
327:48 - file so we're going to do that right
327:50 - here so
327:51 - at first we need to remember the the
327:55 - the steps for processing a file we need
327:58 - to declare
327:59 - a file pointer so in order for us to do
328:01 - that we're going to
328:04 - have to follow this syntax
328:07 - right here i'm just going to copy and
328:09 - paste it here
328:10 - file open so as i've said we're going to
328:13 - use this function f
328:14 - open and these are the
328:18 - possible
328:21 - parameters that you could use okay so
328:25 - to put it simply we could use this
328:30 - we could declare a pointer variable
328:34 - so f p and then semicolon
328:38 - and then we're going to use that pointer
328:40 - variable
328:42 - and then use the f open function
328:46 - right here and then uh
328:49 - we could say here filename dot
328:53 - txt and then another
328:57 - uh parameter and then we're going to use
329:00 - here
329:00 - w so w means that the file is being
329:03 - opened
329:04 - for writing and if the file does not
329:07 - exist
329:08 - then uh there will be new file
329:12 - created okay so
329:16 - um let's just return zero for now
329:20 - okay after that
329:26 - we could close our file
329:30 - okay if
329:33 - we open the file we can also close this
329:36 - so what we
329:37 - what we need is to use the f close
329:40 - function
329:41 - and then pass in the
329:45 - pointer variable which is fp right here
329:49 - okay and right after opening the file
329:53 - and before
329:54 - closing the file this is where the
329:57 - processing
329:58 - of the pile uh processing of the file
330:00 - happens
330:02 - processing of the files right here
330:06 - process end of processing
330:10 - okay so inside of processing we could
330:12 - just
330:13 - simply if you remember we
330:16 - have different functions so get c
330:20 - put c uh f printf
330:23 - so we're going to use this so for now
330:26 - let's
330:27 - just say uh
330:30 - f printf okay then open and close
330:34 - and then semicolon and inside here we
330:38 - could specify
330:39 - the pointer variable which is fp and
330:42 - then of course
330:46 - percent s
330:50 - percent s where is it
330:55 - percent s there you go and then
330:59 - hello world
331:03 - where okay hello world
331:08 - there you go so after this
331:11 - we could save our
331:15 - file and then build and run
331:19 - okay so for now we're getting process
331:22 - return zero
331:24 - it means that the execution of
331:28 - the program is successful
331:31 - so we're going or we're trying uh we're
331:33 - going to try to open
331:35 - the
331:39 - file that we have created and as you can
331:42 - see here
331:43 - i have my
331:46 - project right here from documents code
331:49 - blocks projects and then programming
331:51 - knowledge
331:52 - and then if we try to open this we can
331:55 - see
331:56 - the text hello world okay
331:59 - so there you have it on how you can
332:01 - write files or write lines of
332:04 - strings into our file by using this
332:08 - simple program right here and
332:11 - i think that's all there is to it in
332:12 - this video in the next
332:14 - tutorial we're going to read
332:18 - text inside our
332:22 - files and then display it in our
332:25 - maybe console or we want to if we want
332:28 - to process
332:30 - the contents of the file insider c
332:32 - program in this video guys
332:34 - we're going to continue working and
332:37 - discussing file handling in
332:40 - c programming so from the previous
332:42 - tutorial so
332:43 - actually this is part two of the file
332:45 - handling video tutorial
332:47 - and in the previous tutorial we
332:50 - discussed the basics
332:51 - of file handling and also discuss the
332:55 - five major
332:55 - operations that can be performed
332:58 - on a file so for example the creation as
333:02 - the first operation
333:03 - and then opening reading writing
333:07 - and closing a file and
333:10 - also we discuss the steps for processing
333:13 - a file
333:14 - so basically if you want to
333:17 - handle files inside your c program
333:21 - you need to declare a file pointer
333:24 - variable
333:25 - as the first step and then the second
333:28 - step will be
333:29 - opening a file using the f open function
333:32 - and then right after that one process
333:35 - the file
333:36 - so for example you want to count the
333:38 - number of lines
333:40 - inside of that particular file or
333:43 - you want to add something to that file
333:46 - you can do that
333:47 - so that's the processes or processing of
333:50 - the file and then of course closing the
333:53 - file
333:54 - using the f close function and from the
333:57 - previous tutorial also
333:59 - we briefly uh discussed the different
334:02 - functions that we could use
334:03 - when we are handling files in c so for
334:06 - example the get c
334:08 - the put c um get w
334:11 - and put w and the other functions
334:14 - so in this video guys i'm just going to
334:16 - show you how you can
334:18 - uh read the content of a file
334:22 - and display it in your simple program
334:25 - so we're just going to use this main
334:27 - function right here
334:28 - so i have here the main.c um
334:31 - file and yeah main.ca file and then
334:35 - we're just going to use this main
334:36 - function
334:37 - right here just to get the contents
334:41 - of our file so as you can probably
334:44 - remember
334:44 - from the previous tutorial we already
334:46 - created the file
334:48 - inside our file system
334:51 - and let me show you that okay so i have
334:54 - here the file
334:56 - and then file name that text and it
334:58 - contains
335:00 - the text
335:03 - hello world as you can see here so this
335:05 - is written
335:07 - from our c program and in this video
335:10 - we're going to read this
335:12 - by using also our c program so
335:15 - in order for us to again if we want to
335:18 - handle files in
335:19 - rc the first step is to
335:22 - declare a pointer variable so the
335:25 - pointer variable
335:27 - goes like this so we need to
335:30 - call on this file class and then
335:35 - add the semicolon i mean the
335:38 - asterisk or star symbol as you can see
335:41 - here
335:41 - and then of course the name of your
335:44 - variable so i'm just going to name
335:46 - it filename and then semicolon at the
335:49 - end
335:50 - so this is our pointer variable
335:56 - as i've said this is the first step
336:00 - for handling files in
336:03 - c we have to declare a pointer
336:07 - variable and then uh the next
336:10 - step since we're getting the content of
336:14 - a file
336:15 - i just want to assign the content of a
336:18 - file into a single variable
336:19 - so for example i'm just going to declare
336:22 - here another variable
336:24 - car or char ch or the name of the
336:27 - variable is ch
336:29 - and then i'm just going to assume the
336:31 - length um
336:33 - 100 there you go and then semicolon so
336:36 - basically
336:37 - this particular variable will hold
336:41 - the contents of our file
336:44 - okay next line will be
336:49 - using the file name variable right here
336:51 - which is our pointer variable
336:54 - and then the second step in the process
336:57 - is of course open the file by using
337:00 - f open function we already use this
337:03 - function from the previous video
337:05 - so in here we're just going to specify
337:09 - specified the name of the file which is
337:12 - file name
337:13 - that text as you can see here so that
337:16 - will be
337:16 - file name that txt
337:19 - and then we're gonna use the
337:24 - r symbol okay that's
337:27 - basically um reading
337:30 - the file name or i mean the file coming
337:34 - from our file system
337:36 - and then the next step is of course
337:40 - if we want to print the contents of our
337:42 - file so
337:43 - we're just going to use the printf
337:45 - function right here
337:47 - and then specify
337:50 - the um
337:54 - format specifier percent s because we're
337:57 - going to display
337:59 - um character or strings of character
338:02 - here coming from our file and then comma
338:05 - and then
338:07 - we discuss the function
338:11 - in the previous tutorial f gets f
338:14 - gets okay so basically this function
338:20 - um string of characters
338:24 - from a file and this particular function
338:28 - takes uh a few parameters so for example
338:32 - we're just gonna
338:34 - um specify the
338:37 - parameters here so
338:40 - for example
338:45 - the variable ch that's the
338:49 - variable that will hold the contents of
338:51 - our file and then
338:52 - so for example 50 this is
338:56 - the count of characters that we're going
338:59 - to
339:00 - allow to be saved in our um
339:04 - char ch variable and then of course
339:08 - the file name okay
339:12 - and as always if you are working with
339:15 - file
339:15 - since we're opening the file here we
339:18 - need to
339:19 - use also the closing function which is
339:23 - f plus right here and then we're going
339:26 - to specify
339:28 - the file name right here okay
339:32 - so for example the file name
339:36 - and that's about it and we can
339:40 - run our program right now let's just
339:42 - save this
339:44 - and build and run
339:47 - so it's going to output hello
339:50 - world so for example
339:54 - just to show you a basic example let's
339:57 - just
339:57 - fill out our file
340:01 - in the world this
340:05 - is a string from
340:09 - a file so we're just
340:13 - going to test
340:16 - this so save and
340:19 - let's run again our program
340:23 - okay so as you can see here hello world
340:26 - comma and then this is a string coming
340:29 - from a
340:30 - file as you can see here so basically
340:33 - we successfully um read
340:36 - or get the contents of our
340:40 - file filename.txt file
340:44 - okay so now there are other operations
340:48 - that
340:48 - you may want to do in your
340:53 - [Music]
340:55 - file so for example you want to like
340:58 - count the number of lines
340:59 - that's possible again this particular
341:02 - symbol right here
341:04 - is uh like opening a file
341:07 - in a read mode okay so
341:11 - r that's basically what we use here
341:14 - so as i've said there are also other
341:17 - functions that we could use when trying
341:19 - to
341:20 - handle files in our c program and of
341:24 - course
341:24 - f gets is one of them but there are also
341:27 - so for example
341:29 - we have um
341:32 - get c so this
341:36 - reads a character from a file
341:41 - okay we also have um
341:44 - get w so this will be
341:48 - for reading an integer
341:52 - and we also have um f gets
341:56 - that's what we used here so f gets
342:00 - reads string
342:03 - um string of characters
342:07 - from a file okay and then
342:11 - of course there are other functions that
342:13 - you could use to write
342:16 - this is right ping
342:20 - into the file
342:24 - so we have put c
342:29 - um put w
342:33 - so basically put c writes a character a
342:37 - file
342:37 - and then put w write an integer to a
342:40 - file
342:41 - and then we have f print f
342:46 - for writing and we also have
342:49 - um f puts okay
342:53 - to write
342:56 - string of characters into a certain file
343:00 - so i hope you understand the basics of
343:04 - handling files
343:05 - in c and in this video we're going to be
343:08 - learning
343:08 - enumeration or enum in c
343:12 - so enumeration or enum is a user define
343:15 - or user-defined data type that we can
343:18 - use inside rc program so it works like
343:20 - almost the same with strap so as you can
343:23 - probably remember from our previous
343:25 - tutorials we
343:26 - already discussed and
343:29 - um strut inside our c program so as i've
343:32 - said in this video we're going to be
343:33 - learning enumeration so that's
343:35 - that's where our focus should be
343:38 - enumeration
343:39 - so enumeration is mainly used to
343:42 - assign names to integral constants and
343:46 - these names make program is
343:49 - easy to read and maintain so i'm going
343:52 - to be showing you a graphic right here
343:54 - on how we can declare instantiate
343:58 - and operate with enumeration insider c
344:02 - program
344:03 - so basically guys this is how we can
344:06 - um declare
344:10 - the enumeration right here so
344:12 - declaration we have
344:14 - this keyword enum and then the name of
344:17 - our enum variable so in this case
344:20 - days of wick okay and then we have
344:23 - different
344:24 - states we have seven different states
344:26 - here that starts from
344:28 - the value zero the second will be one
344:31 - and the last one will be six so
344:35 - um all of this states these are called
344:38 - enumerators so this is just the list of
344:41 - constants separated by
344:44 - commas so this will help us to make
344:47 - our program easy to read and maintain
344:49 - because all of these enumerators
344:51 - are already already listed here
344:54 - so we know what values to get what
344:57 - values to
344:59 - assign to a certain variable if we want
345:02 - to use this
345:03 - inside our c program now after that
345:06 - declaration
345:06 - we do have this insensation
345:10 - so in in sensation part we have also the
345:13 - name
345:13 - or the keyword enum right here and then
345:16 - of course
345:17 - the enum variable that we have declared
345:22 - on tab say for example this one days of
345:25 - week
345:25 - as you can see here and then of course
345:27 - we need to assign
345:28 - an object of enum days of week so
345:31 - basically guys
345:32 - this day is just an object
345:36 - of our days of week
345:39 - in um as you can see okay and then
345:42 - right after that instantiation we can
345:44 - now use that in
345:45 - enumeration or enum um here in operation
345:49 - so for example you want to
345:51 - like assign a value to our object
345:55 - so they equals and then the value of our
346:01 - enum that we want to use so for example
346:03 - this one in this case
346:04 - we specify that it should be
346:09 - wednesday right here okay
346:13 - so we could assign the
346:16 - value just like that now
346:19 - we can use this insider c program as
346:21 - i've said because
346:22 - we're dealing with enumeration or
346:24 - e-nominc
346:25 - so we can
346:29 - use our ide to create
346:32 - our simple program implementing the
346:35 - enumeration or enum in c
346:39 - so for example we want to
346:42 - like implement the days
346:46 - of a week so as i've said
346:49 - in our declaration we can use the
346:52 - enum keyword right here
346:55 - by the way guys you can declare enum
346:59 - locally you can declare
347:04 - enum locally
347:08 - or inside a function
347:13 - right here or you can do it here
347:16 - before our main function
347:20 - globally declare
347:24 - our enum okay
347:28 - so for example we want to do this
347:31 - globally so our keyword enum right here
347:35 - and then the name of our
347:38 - for example in this declaration we have
347:42 - the enum keyword and then the name of
347:44 - our variable so days of week
347:47 - so for example in our case we're just
347:49 - going to use the
347:51 - weak variable name
347:54 - and then inside here we can declare
347:56 - inside the curly braces
347:57 - so make sure you use curly braces and
348:00 - then
348:00 - semicolon at the end of this particular
348:04 - line to
348:05 - to signifi signify that it is the end
348:08 - of this particular line so
348:12 - inside here we can declare for example
348:15 - for monday tuesday
348:19 - wednesday thursday
348:26 - uh friday saturday
348:34 - and sunday so that's how we can declare
348:39 - our enum variable
348:42 - again you have to use the enum keyword
348:45 - and then the name of our enum which is
348:46 - in
348:47 - our case here week and then
348:50 - open and close curly braces and you can
348:53 - declare the enumerators here
348:55 - and of course you have to specify the
348:57 - semicolon at the end of this particular
348:59 - line
349:00 - now in using this particular enum we can
349:04 - do it here inside our main function so
349:06 - we can
349:07 - again i use the enum keyword and then
349:11 - our name of our enum which is weak
349:14 - as you can see here so take note of that
349:17 - that we use the enum keyword and then
349:20 - the name of our enum
349:22 - and we can assign an object to this for
349:24 - example they
349:26 - okay so that's how you can
349:31 - specify our enum object
349:34 - so enum keyword the name of our enum
349:38 - and then an object of our enum which is
349:41 - they so for example you want to assign
349:44 - a value to this so they
349:47 - equals for example wednesday
349:52 - so you can just use
349:55 - wed and
350:01 - just three letters if you want but
350:04 - anyway you can use
350:05 - also the full um names of your constants
350:09 - but in our case we're just gonna use the
350:11 - three letters to have like a uniform
350:15 - constant names
350:17 - okay so here we can use so for example
350:20 - wednesday and then of course you can
350:23 - print this
350:24 - you can specify the
350:29 - percent the here and of course
350:32 - the object of our enum okay so let's try
350:36 - to run this
350:36 - and see how our uh
350:40 - what the output of our program so
350:44 - as you can see here we're getting two
350:47 - the value of our object is two
350:51 - because as you can see um
350:55 - our enumerators or the state of our
350:57 - numerator
350:58 - starts from zero so zero
351:02 - one and two so that's why we're getting
351:05 - the value of
351:06 - our object here as two but if
351:09 - we wanna change this for example
351:13 - sun for sunday then run on
351:16 - build our program so the output will be
351:20 - six so by default guys um
351:23 - the value of our enumerators will be
351:27 - if we we did not assign a value to our
351:31 - enumerators the default value of this
351:34 - will be
351:35 - zero this one will be one
351:39 - this will be two as you can see if we
351:43 - try to hover over our
351:45 - mouse here in our constant so we're
351:47 - getting two
351:49 - um this is obviously three but we're not
351:54 - getting the
351:55 - um like the hover over display
352:01 - four this is five and
352:04 - this is six so that's how our state
352:08 - is being initialized by the compiler
352:12 - so it is getting like the uh getting
352:15 - default values
352:16 - 0 until to the last
352:20 - state minus one of our
352:24 - enumerators okay so if
352:27 - we try to initialize
352:31 - our states
352:34 - for example we want to make this
352:38 - one we could do that so monday will be
352:41 - one
352:43 - tuesday is two wednesday is
352:46 - three um
352:50 - thursday is four friday will be
352:53 - five saturday will be six
352:56 - and sunday will be seven
353:00 - so remember earlier
353:04 - we are getting two coming from wednesday
353:08 - because that's the default state of our
353:10 - constant
353:11 - wednesday but if we try to assign the
353:14 - value to our enum
353:16 - object here into wednesday let's try to
353:20 - see the output okay
353:24 - so instead of 2 now we're getting the
353:28 - value 3 because
353:31 - we initialize already our
353:34 - variable and it's not assigning a
353:37 - default
353:38 - value to our states
353:43 - now here's an interesting facts about
353:45 - initialization
353:46 - of enum so if there are like two enum
353:50 - names
353:53 - we can declare same value
353:57 - for example you want to declare value
353:59 - for monday tuesday
354:01 - we can like make this
354:04 - value one and one so it doesn't matter
354:08 - for this particular example because
354:12 - this is um allowed in c programming so
354:16 - we can have two
354:17 - uh enum names with the same
354:21 - value okay so for example
354:25 - we can
354:28 - comment this one out and we can try to
354:31 - display the value of
354:33 - our constant so percent
354:38 - percent d instead of day
354:42 - we can use monday
354:46 - and um tuesday there you go
354:50 - so bill and runner program and we're
354:54 - getting this
354:56 - error right here okay
355:00 - we're getting that output because we
355:02 - have
355:03 - specified our pdf statement like this
355:06 - but
355:06 - if we wanna have uh we want to display
355:10 - the correct value then we're going to
355:12 - use this percent the percent d
355:14 - and then comma in between and then we're
355:17 - just gonna
355:18 - um specify the two variable monday
355:21 - tuesday and click and build and run our
355:24 - program
355:25 - and as you can see here we're getting
355:28 - values one and one
355:32 - so that's one of the interesting fact
355:34 - about declaring our
355:36 - inum variable we can use the same state
355:39 - or the same value
355:41 - for our constant so it doesn't matter in
355:43 - c that's because
355:45 - it is allowable in c okay

Cleaned transcript:

c programming language is considered as the mother of all programming languages present in the software industry anywhere you go c programming language is the most basic and very important aspect which the recruiters are looking for hi this is john from programming knowledge and welcome to this video tutorial series where you will learn how to go about programming in c language in this tutorial we will discuss mostly the important parts of c programming language so these are the topics that are included in our c programming language tutorial series so firstly we're going to discuss the history of c and then to be followed by the installation of c so i'm going to guide you through all the steps needed to start about programming in c programming language to be followed by data types and variables of course we're going to discuss the importance of data types and variables in c and to be followed by c tokens to be followed by preprocessor directives and of course we're going to learn the how to write our first program in c programming language and of course to be followed by control structures so as we all know if you are coming from other programming language you already have knowledge on control structures so we're going to discuss that right here and then of course loops we're going to discuss loops and then pointers and to be followed by functions and then we're going to learn about escape sequence in c and after that one will be the data structures and of course we're going to discuss strings followed by structures and union to be followed by memory allocation and lastly is the sorting algorithms so we're going to discuss that also in this particular tutorial series so now let's talk about the history of c language so history of c language is interesting to know here we are going to discuss a brief history of the c language c programming language was developed in 1972 by dennis ricci at bell laboratories of acnt or american telephone and telegraph located in the usa dennis ricci is known as the founder of the c language it was developed to overcome the problems of previous languages such as b dcpl and other languages initially c language was developed to be used in unix operating system it inherits many feature of previous languages such as b and bcpl c was originally first implemented on the dec pdp 11 computer so pdp 11 is a series of 16 bit mini computers sold by digital equipment corporation from 1970 into the 1990s c programming language is known for its flexibility and versatility allowing maximum control with minimal commands so now let's talk about the features of c language c programming language is the widely used language and it provides many features that we're going to discuss in this particular video number one it is simple c is a simple language in a sense that it provides a structured approach to break the problems into parts number two machine independent or portable so unlike assembly language c programs can be executed on different machines with some machine specific changes therefore c is a machine independent language three midlevel programming language although c is intended to do a lowlevel programming it is used to develop system applications such as kernel driver and others it also supports the features of high programming language that is why it is known as midlevel language number four structured programming language c is a structural programming language in a sense that we can break the program into parts using functions so it is easy to understand and modify functions also provide good reusability number five reach library see language provides a lot of builtin functions that make the development faster number six memory management it supports the feature of dynamic memory allocation in c language we can freely allocate the memory at any time by calling the free function number 7 speed the compilation time and execution time of c language is fast since there are lesser built in functions and hence the lesser overhead number eight pointer c provides the feature pointers we can directly interact with the memory by using the pointers we can use pointers for memory structures functions array and others number nine recursion in c we can call the function within the function it provides code reusability for every function recursion enables us to use the approach of backtracking number 10 extensible c language is extensible because it can easily adapt new features now that we're done talking about the features and history of c programming language we can now go to the installation of c in windows operating system now there are multiple ways we can install c programming language in our computer system so the most basic way is to install turbuc in our computer system also if you're familiar with the eclipse ide you can directly download gcc compiler and include c nature to our eclipse ide and continue working on executing c programs as i've said guys there are multiple ways of installing c program into our computer system and one way of doing it is to install torb turbo c plus plus or you can use the eclipse ide and then include the gcc compiler and also you can do it online there are more there are many platforms that can help you develop c program online and then one way of doing it is also installing code blocks so if you go to your browser and try to search for code blocks and then this is the first link that you will get and it will redirect you to codeblocks.org and code blocks is an ide that will help us to write programs especially for c c plus plus and fortran ide the good thing about code locks is it is a cross platform in open source meaning we can use it freely to develop our c programs so the first thing that we're going to need guys is to download this of course in order for us to install and start writing or see programs so there are two options here we can download it from this link and of course we can also download it from this particular link here so let's just try this one the upper one and then there are options to download the binary release we can download the source code and we can also retrieve source code from svn okay the first thing that we're going to need now is to download the binary release okay you could click on that and here we can see that we can install it on windows xp vista windows 7 windows 8 and windows 10 and we can install it also in linux operating system be it 32 or 64 bit and also you can use it on mac os x and because we're using windows operating system for now so let's just click on that and then here we can see all the options or all the links that we can download the code blocks we can download only the setup we can only or we can also download the nand admin no setup and then we can also code blocks with this main w setup so if you want you can download this particular one code blocks and then the current version is 17 point child bing w dash setup that xesa and then we can download it from sourceforge or fast hub so try that and then let's just wait for the download to complete in order for us to install this particular ide and then after installation of course we can write our first program in c programming language so currently it is 86.2 mb and then we're just going to wait for a few seconds for the download to complete and i think it won't take that much time and we're halfway there there you go so we can just install this particular ide so click on this and yes next i agree and then we don't want to touch anything here if you are an advanced user you can try to modify the installation but for now since we're beginners let's try to click on next and then install this is the destination folder and then install so there you go installation is complete so do you want to run code blocks now of course yes so gnu's gcc compiler has been detected so that's okay and file associations we are being asked here if you want to associate cnc plus plus files for this particular ide so yes associate code blocks with c or c plus plus files and then okay so there you have it we now have the installation of code blocks and so for this particular video guys we're going to talk about our first program or c program so basically we also discuss how to install code blocks and here you can see i'm using code codeblocks to create our c program okay so here we have the basic basic program or basic c program okay and before that we or i'm going to show you how to create project here in codeblocks ide so the first thing that we're going to need is to create a project so instead of using this particular file test that c we're going to close that and then create our new project so let's go to file and then new and then there's an option here for creating our project so basically all we have to do is select here the type of application that we want so for example we're going to just create a basic application or basic c program so let's try to find that here in this options so we're going to select the first one which is the console application because we're going to start with a very basic application say go and then x so it should be c project title will be programming knowledge tutorials and then let's just uh select the actual directory to you a directory to use so let's just say the documents and then we're going to um create a new file here or a new directory see projects then okay and then next and then we don't want to mess around here so just basically finish the research for now so finish so we have here our project programming knowledge tutorials and we have here the sources and by default it created this particular file main.c so as you can see we have here some parts or prepopulated code for us so we have the very basic structure of a basic c application so if you try to run this let's just let's just try to run this first before we go any further with our tutorial so let's just run and then it uh it will ask to build our project so of course yes and then there you go you can see here uh the hello world tax so basically what this program is doing is just printing hello world string or text into our uh monitor or this particular console so press any key to continue or you can just close this particular command prompt okay so uh let's uh if you want to make the text or the code bigger you can just control scroll by using your keyboard and your mouse of course so i'm just going to make it bigger so that you will uh you will be able to see what uh what i am doing here with our project so first i'm going to discuss first the parts of this particular program or basic program c so basically we have the lines one and two so basically it is the like import statement of this particular program so it is basically uh saying that we need this files and we need to include this in our new program or new file main.c so we have here the include and then stdio.h and include std lib.h so basically these are header files okay so these are files and we need uh functions from those files so for example we have here the functions printf here so this particular function is inside or can be found in stdio.h file okay and here we also have the uh in main as you can see here so the in main is the main function this is the entry point of every program in c language so in normal terms it is basically the entrance and every time we run our project it will try to find the main function of our uh project so it should have like one main function for in in order for us to run our program so in main so basically it says that the return type is an int and then everything inside this curly braces open and close curly braces is part of this particular function main and we have two lines here so printf and then semicolon and then return zero and then semicolon so these are the lines of our uh in main function so in order to terminate a line you need to add semicolon at the end of that particular line so just like this here and of course just like right after this return zero so now i'm going to explain what this function does so the printf is a function used to print data on the console so basically we're just selling our program to output hello world and then it should return zero so return zero statement uh it means that the return execution status of this particular program and the zero value is used for successful execution and one for unsuccessful execution so let's try to run this again anyway you can just run or build and run your project or you can just run it by pressing this particular run button okay so as you can see here we have this particular string or output hello world and if you try to add a new line for our program printf and then everything that we want to display it should be inside the double quotes okay c programming is awesome okay and then of course we need to end this uh and this particular line by adding the semicolon at the end and then save you can just build and run so as you can see here hello world and then ce programming is awesome so notice that we have added this particular character here backslash n so we're just telling the program to add another line or to go on to a new line after printing the hello world or the hello world string this one and let's try this also for this particular second line and build and run okay so as you can see after uh printing the c programming is awesome it added a new line here which you can see as a space between c programming awesome text and process return zero so there are others there are other texts or other keywords also for this instead of using slash or backslash n you can use box slash t for tab or for tabbing so let's try that save and then build and run so as you can see there is a significant space between programming word and the word is so this will come in handy if you're trying to work with like uh tabular data so uh backslash t will be uh like very useful for you because it will format the columns for you and as i've said it will be a great help so the next uh thing that we want to talk about is the order of execution in every c program so basically if we have like four lines here to print something in our screen like this so as i've said in c program it is executing in order line by line so this will be the first one or the first line to be executed and then the second line to be executed the third line to be executed and the fourth line to be executed so so for example try to make this two and then three where i mean three and then four let's try to build and run this so we have the output as um hello world hello to hello number three and hello number four so basically all the statements are executed in order line by line so so for example we have or we want to draw something in the screen so like we want to draw a triangle so here and then another one here and then another one just to show you these uh sequence of execution of this particular c program so right here another slash and then here and maybe here and another one another line or vertical line and also here and we need to add the new line or line break for this print statements and we can make this or i'd like the underscore and let's try to build and run this and you can see we have the triangle displayed in our screen and that means that the lines has been printed or has been executed in order line per line so if we try to make changes and instead of placing it here let's space it before printing the first line so the output will be like this a funky looking shape that's because we execute the first statement to have like the forward slash the underscore and then the vertical and that's why we have an output like this so just bear in mind that in every program it is executing line per line okay so now let's try to discuss placeholders okay placeholders for different data types so there are in programming there are types or data types that we want to work with so for example string we have characters we have integer we have float and other data types so for example you want to display string you just have to like say hello world and this is this is a string let's just remove this okay save and run and build so we now have like the output of our programming low world this is a string but if you want to try or if you want to print a number so so for example 32 so let's try this run and build and as you can see we have um return negative 10 7 3 4 8 1 or 1 8 and 1 9. so basically what this means is that there's something wrong with our program because as i've said before zero it should be the standard or the return if the program uh runs smoothly or there's no there's no problem while running our program so basically here we have negative so it means we have problems right and we can see here that um note expected constant char but argument is of type in as you can see here so uh basically we cannot directly display number by using this so we can use placehold a placeholder for that so this will be for our placeholder so instead of using directly 32 here we can say percent and then d so d is for integer so if you want to display integer you might want to uh use the percent d placeholder and then inside this printf statement you need to add the comma and then of course the value that you want to be printed so percent d and then comma and then the actual value that you want to be printed so let's try that build and print or build and run and as you can see here process return 0 and then we have here the value 32 so let's try this one more time backslash n build and run and here we can see uh we can see clearly what is happening here so hello world this is a string and the value 32 so that's the purpose of percent d is a placeholder for an integer value another one we have for large integers so for example there are like a very large number a very large integer the keyword for that or the placeholder for that is ld which stands for large integer okay so for example we have like um very big integer right here okay so that's the placeholder percent ld and then of course we also have four decimal values or float values so for example you want to say 32.5 or yeah 32.5 this is for again decimal or float value okay let's just say float value here so percent f percent d for integer percent ld for large integer percent f for float number and another one for large float okay so this will be for large float and then another one for so for example you want to display a character and you want to display like letter a so the placeholder for that is percent c and then the actual value that should be uh type in inside the single code characters so this will be for a char or character and then another one is for the string so so for example you want to display hello world this is a string and then you want to display that you can also use percent s for the placeholder for that so you can say hello from printf okay so this will be for our string so basically string is just a series of characters meaning uh string is just composed of several characters so for example this one hello and fro from and so on so you get the idea but basically all these placeholders can be used to display different values or different types of values the integer large integer float large float character and string so let's try to display this and maybe add the backslash n here and here also here here here and here so build and run there you go you can see here the output of our program and we did not specify directly the values of this um figures so instead we're using printf and then the placeholder so for example percent d for integer percent d for large integer and so on and in this tutorial guys i want to talk to you guys about variables in c now when we're using c programming language a lot of times we're going to be dealing with data so there's going to be different data values or different information that we're going to want to keep track and use inside of our programs and sometimes it can be difficult to maintain and keep track of all that data and that's where variables come in so basically variable is essentially a container where we can store different pieces of information so different data values we could sort of things like numbers or texts or characters and these variables make it a lot easier for us to keep track and manage all the data in our c program so i'm going to show you guys basically how variables work or how variables can be useful and how we can use them in rc programs but down here i have a very basic program so i'm basically just printing out a little story so it says there once was a man named mike he was 50 years old he really liked the name mike but did not like being 50. so this is a simple program we're just printing out a bunch of different lines of text and then when i run this program you'll see we print out the actual story so over here we have the actual uh story and this is great okay but let's say that i'm reading through my story and i'm reading through my program and i'm thinking to myself i think i want to change the character's name so instead of calling the character mike why don't we call him like john in order to make that change so i'm gonna have to look through my entire program and find every place where we mention the character's name so right here is one so change it to john and remember keep looking here and there is another one so we'll change this to jen right so i had to manually go through and change every instance of the character's name to john so let's say that's okay that's uh that sounds pretty good but maybe i'm thinking i want to make the character a little bit younger so instead of like 50 years old so let's change it to maybe 30 30 years old instead of 50 years old okay we're going to change hit here he was 30 years old and also in here last line of our story so that's 30 instead of 50. if i was to run this program then all that information will be updated and will now have new story okay so here's the problem though i'm dealing with a very short story so i mean this is four lines we only mentioned the characters age and name only twice but imagine if i have if i was writing out a huge c program that had hundreds of lines in the story so story had hundreds of lines and maybe we mentioned the characters name hundreds of times they mentioned their age hundreds of times and if we wanted to change the character's age or name i would have to go through and manually change it every single location and that would take forever and it would be a huge job for us to change all the instances of the name of our character and also for our for the age of our character so basically that's not a good way for us to manage and maintain the data for our programs okay uh basically we have two pieces of data that we're working with and consistently in this program the characters age and the characters name what i want to show you guys now is how we can use variables to better keep track i mean manage these pieces of information so remember a variable is basically just a container where we can store some data so i want to create two variables which will store the character's name in the character's age and i'll show you guys how this can make our program a lot easier to manage up here before the print statement i'm just going to make a new line and i'm going i'm going to come over here and i'm going to create a variable now whenever we create a variable in c we have to see a couple of a couple pieces of information the first thing we have to tell see is that what type of information we want this variable to store now i'm going to get into the different data types that we can represent and see more in the next tutorial but for now just know that there's a bunch of different types of data that we can store and see can see we can sort things like numbers characters we can store text we can start decimal numbers all sort of all sorts of stuff like that in our case i'm going to store the character's name in the characters uh age basically just a collection of characters so in order to create this variable the first thing that i have to see that i want to create a variable that's going to store some characters and to do that i'm just going to type out char here just like that and basically telling c we're going to store characters in inst inside of this variable so after we type out chart i want to type the name of the variable that i want to create remember that a variable is a container and it's a good idea for us to give these containers descriptive names and those names will basically let us know what that variable is storing inside of it so i'm going to call this character name now what i want to do is basically i want to store multiple characters so over here we're telling c that i want to store a character but in c we can also store instead of just like uh instead of just storing like one single character we can store a bunch of characters and that would be kind of like you know name so there's like four characters in here so in order for us to store a bunch of characters inside of this particular variable after we type the character variable name we're gonna have to make an open and close square brackets and that's gonna tell c that we want to store a bunch of characters inside of this part particular variable so char character name open and close square brackets um i'm gonna set this equal to something so i'm i am essentially assigning a value to this particular variable and i'm just gonna make an open close quotation marks so equals and then quotation marks and inside of here we're gonna type out the value that we want to store so in my case i'm just going to store the character's name which is john and then as always in c we're going to have to end this off with a semicolon so all right uh basically what i did here was i created a variable and i told c that i want to store in the variable i wanted to store a character and i gave this variable a name character name and then i use this open and close square brackets to tell c that i wanted to store a bunch of characters not just one now what we can do is we can make another variable to store the character's age so in this case we're gonna do something similar but we're gonna want to store a number and there's a bunch of different ways that we can store numbers in c but for our purposes we're starting age so we're going to use something called an integer and an integer is basically just a whole number so i'm just going to type out in here in and that basically stands for integer and now we're going to give this name so i'm going to call this character age and i'm gonna set this equal to a number so in our story the age is 35 so i'm just gonna type out 35 there and now we can again end this off with a semicolon so i have here two variables this one storing the character name and this one is for our age now the question becomes how we can use this inside our program well basically what we can do is we can print them out alongside with with this text and we can actually use this printf function in order to do that so i'm going to show you guys how to do this and then we're going to talk about it so basically i'm going to go over here and as you can see we have here the character name which is john okay so we can replace this with percent s so percent s is basically a placeholder so after this um we're going to add comma here and then we're gonna add the character name variable so basically we're telling c that we're going to print this particular text and percent s is just a placeholder that will auto automatically be replaced by the value of our variable character name so we have uh the first instance of the character name and then right here we also have we also need to replace this with percent s and then add comma and then character name because we want to replace that with our value of our variable character name which is john and of course like here we also need to replace this with the actual value of our character age so what we can do here is just we can add percent d so percent t is also a placeholder for printing the integer uh so this is like integer integer character h equals 35 and then percent d and then we're gonna add comma here so and then character h the same thing here character age and then we're going to replace this with percent the placeholder for integers so if we try to run our program so let's do that build and run and we will we should have the so we have a process return so i think we have something where we have an error with our program so let's try to debug this so warning format as expects per uh argument type of character but argument two was typed in that's basically because we didn't add the square brackets there so build and run so there you go uh we have now the output there one other ones was a man named john he was 35 years old he really liked the name john but did not like being 35 and of course every time you can if you want to change something with this story so for example instead of john we will say michael and we can change also the age like 40 and then exceed that and then build and run so as you can see here we now have the updated um story so michael and then 40 years old so the good thing about variable is that we can reuse this into our entire program so we have every time we have changes here all the variables or all the value should be reflected in our the rest on our program so in in our case we have updated all the values for our story and in this video guys we're gonna talk about variables and of course we will have a deeper um discussion on how to declare initialize and assign values to our variables so basically guys like most programming languages c uses in processes variables and in c variables are just like human readable names for the computer's memory addresses used by a running program so basically guys the advantage of using variable is it is making our life easier to store read and change the data within the computer's memory by allowing the or by allowing us to associate easy to remember labels for that particular memory addresses so at first it is easier to imagine that variables are just placeholders for values much like in mathematics so you can think of a variable as a as being equivalent to its assigned value so for example if you have a variable that is i and then initialize or set equal to for example four so by that you can say that i plus one will be equal to five so there you go so uh now let's talk about how to declare a certain variable in rc program so basically all we have to do guys so for example if we try to declare an int or is it for example in and then some number okay and then you have to end it with a semicolon that signifies that it is the end of this particular line so this statement tells the compiler to create a variable called sum number and associate it with a memory location on the computer so we we're also telling the compiler that the type of data that will be stored at that address and in this case it is the int we have to remember also that in c we must specify the type of data that a variable will store because it will tell the computer like how much the total memory to set aside for that particular variable or set of data something like that now you can also declare multi variables in one statement just say for example in n1 and then you have like n2 and then n3 and then end it with a semicolon to signify that it is the end of this particular line so that's basically how to declare a variable so you can do it like this and if you have like multiple variables to declare you can just do it like this for as long as it is the same type okay so in n1 and then n2 and n3 so we're just telling the compiler to declare this particular variable and all of this variable um the type is int okay and of course you can assign a value to that particular variable later on using a statement like so for example sum some number equals to 3 okay so basically this is the declaration of our variable sum number but this this is the assigning of value so we're just basically assigning value three to our variable sum underscore number so the assignment of a value to a variable is called initialization so we're just basically initializing the value of this variable some number equal to 3 or something like that and of course you can just maybe you you can uh declare initialize and assign value at the or in one line or something in the same time so in age equals to 4 something like that so you can declare the value or the variable and then assign value to that particular value variable so okay and of course you can assign variables to the value of another variable so it means say for example n1 you can assign the value of age into this by just using the variable age something like that or you have to modify it with like add 10 okay so age and then plus 10 or something like that and if you want to display this all you have to do is use the function printf and then you can say the age is percent d and as you can remember this is the placeholder for in so percent d and then you have to specify the variable so for example n1 so let's try this add semicolon to this so compile and run so the age is 14 so that's because the n1 now holds the value of age plus the value 10 so it makes it 14. okay and of course you can assign multiple variables to the same value with one assignment so so for example n1 and 2n3 you can assign it like this so i'm just showing you guys how to assign values to this particular variable so say for example n1 equals n2 equals n3 and this should equal to 8 okay so let's try this and and as you can see the value is eight okay but if you try to display also n2 and entry it will get also the value eight so you can assign multiple variables to the same value with one statement so now i'm going to talk about naming the variables because they're in naming or i mean in c we have to remember that there are naming rules that we have to follow so one of the rules that we have to remember is that the variable name must not start with a digit so basically you can you cannot say in and then one age you cannot do that because as a general rule you cannot start your variable name with a digit okay and of course the second one is spaces not allowed in names so you can say in and then space my a you can't do that because that's not allowed in c and a dollar sign not allowed so or any special characters for that matter so only letters digits and of course semicolon allowed in our variable name and of course the last one will be the reserved keywords you can't use reserve keywords so that's basically so for example you you want to name a variable in main something like that you can't use this variable name because this is a reserved keyword meaning it is a primary keyword used by c as you can see here so now let's talk about the four major uh of four basic data types in c so there are four basic data types in c that's um int and then we have jar or characters and then float and then we have the double type okay so in is a type that stores integers in the form of whole numbers so any number that is whole so you can um say it like in age equals um 10 or maybe 11 um 20 for as long as it is a whole number so it should be a whole number between 2 billion 147 million 400 or 648 something it's negative and that's inclusive um positive for 2 billion 147 million and 483 thousand six hundred fortyseven so that's the um length of the in if you to use this particular type in so that's the in should be between that number or those numbers so the next one is the chart type so char is just a series of character or a single character so the first the the way of declaring a character or a char is you have to use star keyword and then so for example letter one equals a there you go you have to enclose it with single code and it signifies that it is a single character or something like that and of course you can have like a series of characters so for example like what we have previously char and then character name and then you have to use the uh square brackets for that motor and so for example john okay so that's basically how to declare or how to use the char keyword okay and the next one is float so basically float is a short for floating point and it stores representations of real numbers both integer and noninteger values and the way on how to declare that is by using the keyword float and then maybe you can declare it as float pi equals 3.14 something like that so you can declare your float values by using uh that keyword float and then followed by the keyword or the variable name which is for example in this case the pi which is 3.14 okay and of course we can use also the data type double if you want so double is so for example um salary equals ten thousand ten thousand something like that and basically if you want to use double you all you have to do is use this key keyword double and then the name of your variable name in this case salary and then click declare or initialize it with a double value something like that okay and if you have any doubts to the amount of memory actual actually used by any variable you can use the the size of operator to find out for sure so you can like uh use the keyword size of and then um the variable age okay so so for example for that um you can get the actual amount of memory allocated in that particular variable and in this video guys we're going to talk about the scope of a variable and of course we're going to talk about the operators in c and how we can use them so let's go ahead and talk about the scope of a variable so basically a scope is a region of the program and the scope of variable refers to the area of the program where the variables can be accessed after its declaration so basically in the c program we have like three um different um scope or different location that we can declare our variables so the first one is inside the function or a block so we have the first one will be the local variable there we go we can declare um a variable inside our function the second one the second one will be the global variable okay and of course we can also declare a variable inside the function parameter so function parameters okay so that's all the area that we can like declare the variables and set the values to it so but basically we do have like only the two that is most common although we are most of the time um setting the function parameters and declaring variables to it like almost every function but yeah the most common way of you know declaring a variable is the local and global uh local and global variable so again when we say global or local variable it is a a variable that is declared inside a particular function or a block of function so a variables that are declared within the function block and can be used only within the function is called local variable so uh this is how we can um implement this in our c program so so for example in here we're going to declare by the way guys this is a comment and the way to make comment in c program is by using the domain slash so this means this is this is a single line comment and of course we do have the slash and then the asterisk and then asterisk and then forward slash so this is multiline comment so we can like add comments in between these lines and uh this doubles double slash will be the single line comment okay so i hope you um get the idea of this comments and basically guys these comments will not be interpreted by rc program okay so as i've said we're going to discuss or we're going to declare a local variable here local variable definition in initialization initialization right there i'm just going to remove this single line comment okay so in the the way to declare a variable in c is like in or this is the type of information that we want to save so in and then so for example the variable name is x and we can do it like this y and then z so basically what we're doing here is declaring three variables of in type okay so this is the variable definition and of course we can initialize it by saying x equals to 10 okay x equals to 10 and y equals x plus five and then we can also say z equals y y variable plus one okay so that's how we can um declare a variable and initialize the value into the variable so this is the definition in x y z and then of course the actual initialization initialization which is uh right here x equals to 10 y equals x plus five and then z equals y plus one okay so of course you can always print this so for example print print f and then value of so for example z equals percent d remember percent d is just the placeholder for our integer value so the value of z equals the c variable okay and then save and of course you can compile and or build and run your c program so let's try that okay so we need to add the same column at the end of the line to mark that it is ending in this particular line so build and run and there you go the value of z equals 16 because we set the x equals to 10 and then d y equals to x plus 5 and of course z equals y plus 1 that will result to 16 okay so that's how you declare and initialize a local variable now let's go on with the global variable or global scope of a variable so variables that are declared outside of a function can and can be accessed inside the function is called global variables so so for example you want to declare a global variable all you have to do is before the in main function okay right here we can declare the global variable okay and we can declare it like int age and then we have like the semicolon at the end of the declaration okay in age and then semicolon so global variable initialization so after the um after defining a local variable the system or the compiler won't initialize the value or any value to our local variable so we have to initialize it by by ourselves like this so if we try to define the variables right here it won't have any initial i or initial value so we have to declare it like this x equals to 10 y equals x plus five z equals uh y plus one but uh global variables get initialized automatically by the computer um or as uh by the compiler and um so for example if we declare the the variable type as in then the initial default value will be zero okay remember you have to remember that so the difference between global and local variable is whenever we declare the variable in our local scope it won't get any initial value so we have to initialize it by ourselves but the global variable is initialized by default depending on the type of value that we have saved in our variable so for example it in then it will default or initial default value will be zero and if char so for example char t so the default value will be um single code and then backslash um zero and then backslash i am in single code of course when we say float load m so the initial value of that is equal to zero when we say double the initial value of that is also zero and when we say pointer uh the initial value of this is equal to null okay so you have to remember that whenever you declare a global variable there is a default value for our variables okay so as i've said global variables can be accessed inside our main function or any function so because this is a global variable right in this video guys we're going to talk about the input and output in c programming language before we dive in into operators and how we can use operators in c programming language so basically we can use the function printf to display something in our screen just like what we have before so printf and then we can say hello world okay and then we can build and run this program and we can get the hello world string right here we use the printf function for that and now we're going to talk about the input because we're we're trying to focus on the input because we're already familiar with the output side of c programming so we have used the printf to output something in our screen and then of course in order for us to ask input from the user we're going to use the scanf function okay so the way to use scan a function we can say here we can ask for a particular number so please enter a number okay and then we can um add the escape character here for a new line and we can declare a variable here so for example in a and then we can get the value from the user by using the scan f function and then format specifier for our in variable or in value and comma and then of course the n symbol and the name of our of our variable a so basically what this means is that we're taking the address of variable a and then assign a value to that address um whatever the the user has inputted okay so and then we're going to end this with the semicolon and let's try this uh let's try to display the value that uh comes from the user okay so number the number is um percent d format specifier for our uh in value and then comma and then and then the name of our variable which is a okay and then semicolon so i remember to end every time or end every line with a semicolon okay and then we can build and run this application so there you go uh the program tried uh is trying to prompt us to input a number so so for example number five so number five is or the number is column and then the value five which is coming from the user itself okay and now we can actually um ask two numbers in the same line by using also the scanf function so in here we have like uh as for a single number but what we can do is we can ask for um two numbers just like please enter any two numbers okay and then we're just going to use the same function percent i scan f and then percent d percent another percent d because we're asking two numbers and then in here we can say uh n symbol and then the value or the variable b which we will declare here on the top okay b and then we can declare another variable c and we can add the values or the numbers coming from the user so the number for the value c or the variable c we can assign a value to that which is the total of the two numbers a and b so that will be c equals a plus b so what we're doing here is that we're assign we're just assigning the value of the total of a and b into our c variable okay so the total the total number is and then percent d and of course the value of rc okay which is again the total of our variables a and b okay so save this and then we can build and run our application so please enter any two numbers for example um one and two so the total number is three okay so again like five and um three so the total is eight okay so as you can see we are getting the two numbers five and three and then we're displaying the total which is eight okay so basically that's how you can ask or you know input something into our program because our program right now is asking for a uh for an input from our user okay and that's where we can you know apply the operators in our c program and we have different operators or type of operators in c so c programming language offers various types of operators having different functioning capabilities so the first one is the arithmetic operators so we have used the addition operator right there by you know assigning the value of a plus b into c okay and then we also have the relational relational operators okay let me resize this so you can clearly see it arithmetic operators and then we have relational operators and the third one will be logical operators the fourth one is assignment operators and fifth one will be increment increment and decrement operators i'm just going to list it here so you can see all the type of operators in rc programming language so decrement operators and then we also have the conditional conditional uh operator we also have bitwise operators and then we have special operators so these are all the types of operators that we can use inside our c programming language and of course the first one is arithmetic so arithmetic operators include um it includes addition of course of course the symbol for that is the plus right and then we also have subtraction symbol for that is dash we also have multiplication and we can use the asterisk for that to multiply two numbers in our inside rc program and then of course we do have the division which is the forward slash forward slash symbol and of course we have the mujulu and we can use the percent sign to um like operate by using modulus okay now uh let's talk about the operators or arithmetic operators so for example you know addition so we can also like um in b equals um a minus b okay and then we can like have of course not we cannot really declare it uh the b because we already declared it there so we can say it d equals a minus b and then we can see e and then a times b and of course we can have the division and we're going to have like um use the float or we can use the double for that double um f equals one or a divided by b okay so these are the are all arithmetic operators that we can use inside our c program so basically you can add you can subtract you can multiply and you can divide two numbers inside your c program so um so for example we're going to test this okay so in d in the equals a minus b okay so we can display the total number is percent d and then the difference difference of the two numbers the difference uh the difference is of course we're going to use the different or the variable d for the difference and then we can use another one which is the product the product is percent d and the next one is the quotient okay the quotient of two numbers is of course the uh variable f and then we can use the format specifier which is lf okay and then of course the variable f something like this so let's run our program okay and we can enter two variables here or two numbers which is for example five and three okay so the difference or the total number is the total number is eight the difference is two and we need to format this so we can see clearly so we can add percent or i mean backslash n for each line the difference the quotient and of course we need to have the product the product is percent d and then of course the variable e okay so again run a program build and run and then five and then three so the total is eight or five plus three is eight and then the difference is five minus two or five minus three is two and then the product is um fifteen five five times three is fifteen and then the quotient is uh one okay so there's only num or there's only one three in the value five okay and in this video guys we're gonna talk about how to use increment and decrement operators in a c program and later on if you still have time we're going to discuss or we're going to start discussing relational operators and how we can use inside or how we can use it inside our c program okay so basically guys increment and decrement operators are useful operators and it is generally used to minimize the calculation so let me show you an example so in order to increment a value inside ac program we do it like this plus plus and then the name of the variable let me do it here so you can see it clearly plus plus and then the variable okay plus plus and then the variable so it means that x equals x plus one okay remember plus plus x means x equals uh x plus one and of course in the same manner when we say minus minus x it means that x equals x minus one okay so this is how you increment and decrement a value inside the c program but there is also a way it is called the post fix it is post fixed because we place the operator or the plus symbol after the variable x plus plus but it it also means that x equals x plus one and of course when you say x minus minus still it means x equals x minus one okay so you get the idea this is how you increment and decrement um inside a c program okay now there's a difference or a slight difference between having plus plus x instead of x plus plus or minus minus x instead of minus x minus minus okay so i'm going to show you that in a simple program so basically what we're going to do here is we will have a two variable so two variable which is a which is equal to five and then b which is equal to five also so i'm going to show you the effect of post fix and pre fix okay so again this one is the prefix okay and then this is post fix okay so let's comment this out so i'm going to show you the effect of postfix and prefix in this particular example so in a equals 5 and b equals 5 also and then in here we set we set the value of a and b equal to five okay so basically what we can do right now is print and decrement decrement each time okay and then we can use the variable a for our postfix use a for postfix and use b or variable b for pre fix okay so we can do this by abusing the printf method and then um uh backslash n and then percent d okay and then percent d because we were having to display or we we're going to display both the value of a and b okay so we're going to use the postfix here a minus minus and then this one is 4 minus minus b so again this is postfix and this is prefix and then they are set uh or the value of this two variables are set uh a equals to five and b equals to five and then we can end this with a semicolon and of course we can do the same you can do the same we can do another one and uh one two three four five six there are six lines so we we only need five and i'm going to show you and demonstrate what is the effect of postfix and prefix so for you to understand here we have taken the value of a and then of course the taken the value of b and then we apply postfix and prefix so if you try to run this build and run as you can see the value is 5 4 3 2 1 and the value of b is 4 3 2 1 0. so it means that if we use the prefix okay which is the case here minus minus b so it automatically um decrease the value of our variable by one whereas here it displays the value of a still five and then later on four and then in the third line three the fourth line two and the fifth line is uh one okay and then of course in the prefix it decrease the value by one and then four three two one and zero okay so that's how you uh do it the increment and decrement in a c program and this is quite useful if you know if you are working with for loops which we will discuss later on in this particular series okay now let's move on to the next operator which is the relational operators if we have increment and decrement we also have the relational operators relational operators so basically there are like one two three four five six six um relational operators and the the first one is equal equal okay so basically we're just checking if something is equal to or a variable is equal to some variable okay is equal to and then we have the exclamation point and then equal so it means is not equal so basically by this we're just checking if a certain value is not equal to another value and then of course we do have the greater than okay greater than and then we have less than and then of course we have the greater than or equal to so greater than greater than or equal to and less than or equal to okay so basically um we're just checking the relationship or like the relation between two values if it is equal if it is not equal if it is greater than less than or this two comparison or relation or a relational operator um greater than or equal to or less than or equal to a certain value okay and then of course um we can use this especially in a if statement in and we're going to discuss that later on in this particular series so basically if you want to check if something is equal or not equal or greater than then we can use the relational operators so we have to remember this this is one of the most important concept in programming so the relational operators okay and in this video guys we're going to discuss about the logical operators and of course the assignment operators so previously we have discussed this relational operators so we have like six relational operators the equal or checking if a value is equal to some value also and then not equal we have also greater than less than and then we also have greater than or equal to and we also have less than or equal to some value so this is quite useful guys if you are using the control statement in c so for example if statement and then you want to check if a certain value is equal or not equal to some value so for example if a variable x is equal equal to two so basically we're just checking if this particular variable or the value of this x is equal to two or we can reverse that we can check if this particular variable uh variable is not equal to two and of course you can use other operation or operators like greater than um less than or you could also double check for greater than or equal to or less than or equal to so basically guys this operators is like just checking the relationship or if the certain value is greater than another value or it is equal to another value okay now let's move on to the next one which is the assignment operators so basically you guys there are a lot of assignment operators in c programming language okay so the first one will be the equal sign okay this is one of the most uh common assignment operators in c programming so so for example you want to assign so as i've said guys this is for assignment operators assignment operators okay so basically this is useful if you want to set a value to a variable okay so for example x and then if you want to make this like 5 or the value of x is equal to 5 you can do that by using this particular assignment operator equal symbol okay that's easy and the second one is plus equal so we have this also plus equal and then um it basically means guys that it increments the value and then assign it to the um the variable okay so for example you want to make this like x and then plus equal to two so basically let's try this we can remove this code right here we can use the increment then assign so basically like we set a value for x we set it to 5 and then we can have it like x plus and then equals 2 3 and then we can use the printf function and we can display the result further so for example the value is the uh format specifier and then of course the comma and then the x variable okay and then semicolon at the end of this line save this and then compile and build or build and run our application so basically as you can see here the value is eight so this is the doing of the plus equals to 3 so big basically what it means that it add 3 to the variable x and then of course it the result of that is assigned to variable x also okay so this is basically uh just incrementing the value of our variable and of course we also have the x minus equals to for example one okay so basically it is the complete opposite of this one because this is for incrementing and this is for bickerman okay and of course we do have other operators for this particular topic which is the assignment operators we also have x for example times or multiply equal to 2 you can also do that and basically the division also okay you can do also the modular part modulo symbol and then equal and then so for example two and there are others for example um percent or i mean x and then and um and symbol and equal uh symbol and then of course the value that you want to assign so this is basically a bit bit wise and um assign assignment so we're not going to use that for now so basically our currently concern is this operations we can have the increment uh the first one is equal and then of course the increment the decrement and then multiply multiplication then assign and we also have divide and assign we also have modulu and assign so that's basically how the assignment operators word so the last thing that we want to discuss here is all about the logical operators so logical operators provides three mechanism that we can test more than one condition to make a particular decision so these are the end and symbol so meaning it is a logical end okay logical and let me show you that later on what uh what this means logical end and of course we also have this bar bar and this is a logical operator or logical or and then of course we have the negation or not symbol okay so logical or and then this is in and of course logical not okay so let me show you how this works this three logical operators now let's try to use the logical operators so for example the first one the logical and operator so we have here variable x which is set to eight or the value is eight and then we can check if this particular value is or the particular val variable x is um greater than five so we can do that by using the if statement and then x is it less than or greater than 5 so if x is greater than 5 then we can display something in our in our screen or output something so we can do print f and of course the value is greater than greater than five okay so we could uh build and run this and see the output of our program and of course it's gonna display uh the value is greater than five okay so what if the value is four okay so obviously there will be no output because uh this the condition right here uh turns to be false because the actual value of x is now uh four so no statement has been executed for this particular program now we can use logical operators and in this particular scenario so for example you want to check that the value of x should be um greater than 5 but less than 10 okay so we could check if the variable x is greater than 5 but less than 10 and we can do that by using the logical and operator so double ampersand and x and then less than 10 okay we could do that and of course if we try to run this still there is no output because the value of x is four so we can try six here build and run our application so the value is greater than 5 and we should add here that the value is less than 10 okay build and run our application so the value is greater than 5 and it is less than 10. now what if it is 11 so obviously it's going to display nothing in our screen because the conditions of this particular statements is not met okay so that's how you can use the logical and operator and of course when we say and um basically it means that it should be the both of the statement or both of this condition should be true in order for this statement to be executed okay and you can also use the logical operator or in this particular scenario so it doesn't matter if the um x is greater than 5 or x is less than 10 um it should you know execute the statement that we have here okay so for example you run this okay so we have the value is greater than 5 and less than 10 and we can try like 20 or maybe uh use the value 20 in rx so let's try this save and then build and run okay and as you can see we still have or we still get the output the value is greater than 5 and less than 10 that's because this particular statement here returns true so it doesn't matter if this particular statement here is false so as long as there's a true returns either of this statement so there's there should be statement printed or executed inside this particular if statement in this video guys i'm going to show you and teach you how to use if statements in c programming language so i think from the previous video we have like touch the basic usage of if statement so we have tried if statement with the logical operators so the end the relational operators the you know greater than less than or less than or equal to in other relational operators okay but in this particular video guys i'm going to go deeper with the if statement and how we can apply um if statement in our c program and of course guys i want to show you the practical approach on how to how you can implement if statement in a c program so basically guys if statements in c is used to control the program flow based on some conditions so it is used to execute some statement code block if the expression is evaluated to true so otherwise uh it will get skipped and we will try to implement a simple or basic program um utilizing the if statement so actually guys there are four different types of if statement in c so these are you know simple if statement we also have if else statement we also have nested if else statement and we also have else if ladder in c programming language but for now let's just focus on the simple if statement so basically the structure of if statement is just like this so we have this particular format or basic format of if statement in c we have if keyword and then open and close parenthesis and then inside of this open and close parenthesis is the test expression okay or the condition and then of course we should you know add curly braces open and close curly braces and then of course the statement to execute whenever the test expression or condition is met or in this particular case if this particular condition is evaluated into true okay so now let's try to implement a practical approach of an if statement so say for example you are developing a program or a software for a particular bar okay and then that particular bar only accepts customers that are over 18 years old and those customers that are below 18 years old are not allowed to enter the establishment or the bar itself and we can create a very simple program for that and our program will accept the age of the customer and then it will evaluate the age and it will display a message based on that particular age so the first thing that we're going to declare here is the variable age which has the type of int and of course we need to display something on to the screen that says to input a number that pertains to the age of the customer so in order for us to do that we need to use the method printf and then in here we can say enter the customers the customer or enter the age of the customer then we can add column and then space so we can have like the space for our input age now we have this output and we need something to accept a number from our user so we can use the method i think we already used this before the scan f right so in here we need to specify the format specifier for our age which is um uh percent d with uh which pertains to the values that are of type in okay and then of course after this we need to add the comma and of course the variable age and of course we need to end this line with a similar column but the proper way of doing this is to add an a person a person symbol okay so basically what we're doing here is just we're getting the address of age and assigned value of that particular address using the value that has been inputted by the user okay and of course we can now apply our if statement with this particular age so the first thing that we're going to check if the age is greater than 18 okay so we can just copy and paste this age variable and then we can add the logical operator greater than so basically what we're doing here is to check if the age is greater than 18 okay so there you go and then of course the statements statements to execute if condition is true okay so basically what we can do here is to print the age the age is greater than 18 okay and basically it pre uh it says or it means that the customer can enter the premises or the bar itself okay and of course we can also check if um the user or the age of the customer is equal to 18. okay we could also check that by using the logical operator or the relational operator equals n equal equal symbol so this is just um testing the age if it is equal to the value 18. so the first one is we're testing the value h if it is greater than 18 in the second one if it is equal to 18 and then of course we need to uh display the corresponding output so the age is equal to 18 okay and then of course we can add another one for this so we can just copy and paste for this one we need to check if the age is less than 18. so this is another logical operator that we have discussed from the previous videos okay so greater than equal and then of course less than 18 and of course we can output here like minor is not allowed okay that's because the age of the customer is less than 18. and the general rule when it comes to bar as minors are not allowed so basically what we're doing here is very simple program for that particular bar okay now we can try to run our program we can just you know build okay and then we can run our program and we have we can enter the age of the customer so for example the age of the customer is 18 so the age is equal to 18 okay so as you can see this is the only output or this this is the only statement that has been executed the age equal to 18 because the other one the other condition is not being met or not evaluated to true okay because uh the age is equal to 18 and of course this is um greater than 18 and of course this is less than 18. so we can try another one so for example the age is 19. so the age is greater than 18 and of course again this is the only uh statement that that has been executed because it the condition evaluated to true this is evaluated to false because the age is not equal to 18 and this one is evaluated to false also because the age is not less than 18 okay so you can try this one more time to check for the for example the age of the customer is 16. so the output is the minor is not allowed okay that's the practical way of using if statement in c programming language in this video guys we're going to talk about if else statements and of course we're going to discuss also the nested ifelse statements in c programming language now from the previous video we have created a simple application so we have assumed to create an application for a bar or establishment and then that particular program will ask for the age of the customer that is trying to enter the premises of the bar and of course we ask for the age right and we check for the age if it is greater than 18 then we display the age is greater than 18. and if the age is equal to 18 and we also displayed the age is equal to 18 but um in case that the age is less than 18 then we print that minor is not allowed so basically guys this is a good um program but we can you know upgrade this this is not uh when it comes to code readability and um code maintainability this is not a good practice when it comes to you know checking a variable or a certain value of a variable so now let's just remove this lines okay and of course we have this first condition if and then we check for the age of the customer which is you know 18. so if the age is greater than 18 we display the age is greater than 18. so i as i've said we can take this further by uh adding else statement right here so basically the if else statements in c is also used to control the program flow based on some condition and the only difference is it used to execute some statement code block if the expression is evaluated to true so it will try to execute this particular statement if this particular condition is true otherwise it will try to execute the statement of this particular else code block okay so in here we can try to display printf the age less than or equal to 18 okay so as you can see um if we try to evaluate this so if age is greater than 18 so for example you have like 19 or you input 19 then of course automatically it will execute the statement that the age is greater than 18 right now basically if we try to input 18 so 18 is not greater than 18 so it will try to execute the code block or the code or the statements inside this else code block because the condition right here returns false okay because 18 is not greater than 18 and there you go it returns false okay now we can also add another condition right here so for example we want to check if the age is equal to 18 okay we can check if the age is greater than 18 and of course we can also check if the user or the age is equal to 15 and then otherwise it's it is less than 18 and we can add another else statement right here but for now let's just you know add the another condition or condition evaluation test expression if the user or the age is equal to 18. okay so basically this particular statement if this particular condition right here is false then it will try to evaluate one more time with this particular condition is the age equal to 18. so if that particular age is equal to 18 then we can display the age is equal to 18 right there but in case if the age is less than 18 we can also add the else statement right here and we can display that the age is less than 18. okay so as you can see we have you know implemented a practical implementation of if else statement and we can add you know the first if uh condition and then we can add another condition else if and then we can test this condition right here otherwise if these two conditions are returning false then we can you know execute the statements in this particular as block okay so we can try this we can run our program build and run so let's try first the possibilities so for example the customer or the enter the age of customer for example 25 so the age is greater than 18. so let's try to run this once again and we can try to input 18 so the age is equal to 18 okay so this particular condition right here returns true now we can also try to uh input the value which is you know less than 18 so for example 16 and then of course the age is less than 18. okay so as you can see in this particular example there will be only one um block of code that will be executed so so for example this one if this will uh return true the age is greater than 18 then it will execute this statement right here or inside this if's block then it will ignore the other like the else if and the else now if it will return false then it will try to evaluate the expression inside here and if it is true or it will return true then it will execute this statement and ignore the else if all of this statements or conditions here will return false then the else statement will be executed okay and it will you know try to print the age is less than 18. now there are cases that we need to check also for example inside this if statement we want to check if um the age is less than 25 okay less than 25 uh although we have like the age is greater than 18 we want to check also if the age is less than 25 so we could add also um if statement right here so this is like what we call nested if else statements okay nested if else statement so we can also check here if age is less than 25 okay and then we can display here printf and then the age is greater than 18 but less than 25 right less than 25 and of course we can also add else statement here or else if like for example else if the age is greater than 25 then we can say here printf the age is greater than 18 and greater than 25 so there are cases that you want to check this you know um if you want to like in the future you want to implement an application and you will try to check the values and somewhere in your code you need to check uh like the value age here and also you can also check if the value is less than 25 or greater than 25 so it is very useful when it comes to programming this particular nested if else statement so let's try to run this and before that i'm just going to add a backslash n right here so that we will have a new line after this particular code execution so let's try to build and run our app first and try to input a value that is over 18 so for example 23. so the h is greater than 18 and there's another statement that has been executed right here the age is greater than 18 but less than 25 we can also you know run this once again and input 26 so the age is greater than 18 and there's also a statement here the age is greater than 18 and um greater than 25 okay and that's how you use the if else statement or um yeah if else statements in c and then of course if you have like many conditions that you want to check so you can also add another conditions right here okay and then another condition and um otherwise if there if these conditions are not met then you can display or execute the statement inside this else code block okay now the nested if else statement requires only one if okay so you can't use like uh two ifs here because it will try to separate the uh chain of if else if you use another if so what you can do is uh one if and then else if else if and also one else statement so it doesn't matter how many else if statement that you can add okay for as long as it is like has one if and has one uh else statement okay so and in this video guys we're going to learn how to use ternary operators in c so basically guys the ternary operator is used to execute code based on the result of a binary condition so when we say ternary operators it is used to execute code based on binary condition okay and it takes in a binary condition as input and which makes it similar to an else control flow block so so for example guys from our previous tutorial we have discussed how to use if else statement okay so we have this kind of structure so for example we want to use this structure or code to get the maximum two values or two variables so if you want to like return the max value all you have to do is compare the two variables a and b so so for example if a is greater than b then of course a or max will be assigned to a otherwise the max number will be the value of variable b okay so the ternary operator guys instead of using if else like this is too long for a simple you know checking of value condition so the binary or ternary operator uses only single line or we can use the ternary operators in a single line and it returns a value so behaving similar to a function okay so let's try to see the syntax of the ternary operators in c so basically the syntax is like this result and then binary condition and then you have to add the question mark and then you have like the value when the binary condition is true otherwise the value of uh you know value to be returned if the binary condition is false so we have to take note guys that the ternary cannot be used to execute code so it must be either returned in the function or set equal to a variable so you cannot use this something like this so you cannot leave your ternary operator like this so it should be equal to or be set equal to a variable okay something like this or you can use it as a return in a particular function okay so let's try to implement a ternary operator so for example you want to check the max value so the long version is this if a is greater than b then assign the value of a to d max and then otherwise assign the value of b to the max variable so as i've said we can you know make this a little shorter by using the ternary operators so in order for us to do that we just need to um so for example get the variable max and then the binary condition is a is a greater than b okay so we can add the question mark there you go question mark and then the value to be returned if the binary condition is true so of course if a is greater than b then the max value is a right otherwise the value is b or the return or the max value is the value of variable b as i've said guys this is the explanation of conditional ordinary operators in c so we have this variable and then we have the expression or the condition and then you have to add the question mark and then the value if true so it will return the resultant value into the variable and it will assign this value to this variable otherwise uh if the expression is false then the resultant value of uh you know the false then it will be returned as the value of the variable that we have added okay so we can check this right now we can remove this this is the long version and we can try to print this display the result the max value is and then format specifier which is we're using in so percent b and then of course the maps variable okay let's just remove this so clean and build or build and run our application so let's try this uh oh um we don't have like the value for a and b so let's try to assign values to this variable so for example a equals 15 and b equals 16 okay so clean and build our application and we'll try to get the output so the max value is 16 okay so we have here the b variable 16 so that's the value of max variable that is being assigned because this particular condition returns false so that's why the value of b variable is being assigned to the max variable so we can also try this with the other you know if the a is greater than b so like 20 so obviously a is greater than b so let's try this exit this right now and then build and run our application so let's try this so there you go the max value is 20. so this condition returns true because a which is the value is 20 and that's greater than b because b is the value is 16. so it returns the value of a so like this so it ignores the second part which is the b because it returns true and then of course after after evaluation the value of a is being assigned to the max variable that we have here so it printed out that the max value is percent d and then which is 20 so let's try let's try this one more time just so you can see the output so the max value is 20. okay so this is quite useful if we only want to um check a certain value so like if you're planning to use if else then you might want to use the ternary operators which is like this so it will just save you time it will save you of code space and i think it's clear rather than using the f and else statement so this is pretty straight forward when it comes to checking the value and assigning the value to the max variable okay so you just have to remember that it cannot be used to execute code you just have to set this equal to a variable or you can use this as a return value of a function okay and in this video guys we're gonna talk about the c go to statement okay so so far we have discussed the if statements and how it is used in c to control statement execution based on some conditions or decisions now the flow of execution also depends on other statements which are not based on conditions that can you know control the flow and of course c supports a unique form of a statement that is you know go to go to statement which is used to branch unconditionally within a program from one point to another point inside our c program so although this is not a good habit to use you know go to statement in c but there may be some situations where we can use the go to statement and it might be you know desirable to to make use of the capability of the go to statement so the goto statement is used by programmers to you know change the sequence of execution of ec program by shifting the control to a different part of the same program so i think i have mentioned this before in our you know tutorial series that the execution of a c program is sequential you know uh like if you have statements from line six here seven and eight and nine so it will try to execute from line six seven eight nine ten sequentially okay but you know we have this uh go to statement to control that particular flow we can go to the a certain point of our program by using the go to statement so basically this basic syntax of go to statement is like this we have uh this particular syntax of our go to statement so we have this keyword goto and label okay and then of course we need to add label at some point in our program okay and of course the long version of this syntax is like this let me show you uh real quick so we have like a few lines and then we have the label and then we have the statement okay and every time the program meets or found the go to statement so it will try to find the label that has been specified in this particular line so go to label and then it will skip the lines or statements between or other you know other statements and it will go directly to the label and it will execute the statements below the label in our c program now we can implement this and of course guys it can also be used to this is a forward uh jump in our program because we have specified the go to statement and then it forwarded to the label statements below okay but it could be also the backward jump of a program so for example after execute execution of some lines it will jump into this particular um label so after execution it will jump to this label that's why it is called the backward jump in our c program so so for example if you have like no other label available here so it will jump the program execution from here and then go back to line nine so that's how the backward jump inside our c program so let me just clarify this uh it is called backward if you know the go to label is here and then it will try to jump on top or the lines before that i'll go to label and it will uh execute all the statements under this okay and it is called forward jump if the label is here so after this or after execution of this line it will try to go to this particular um line label and it will execute the statements under this partic particular label so now let's try this and let's just build a practical or simple implementation of this go to statement so let's just remove this and then we can try to ask for an age just like what we have from the previous video and then we can try to add the labels for example g and this will be the label name okay and then of course we have a statement under this particular label so printf so so for example we will try to execute this if the age is 18 so like you are eligible or something okay then we can try to add the new line here and then of course we can try to add another label so another label name and we can print um you are not eligible okay something like this and we can also add the new line here okay and then of course we do have the statement to ask for the age so enter your age okay and then semicolon and then we can use the scan f function to get the actual value from the user so percent d which which is the form of specifier again and then ampersand and the variable name which is age and of course we can have the condition right here like if the variable age is greater than or equal to 18 then um you can use the statement go to uh the label g okay and else we can go to the label s okay now as you can probably observe here we are using if else but we don't have the curly braces right so you can do the if an else statement like this without the curly braces because we don't we only have one line in this particular or after the condition we have only one line and always also uh else we only have one line but if you have like five lines here you have to add the curly braces okay so in c programming it like understood if there's like one line to execute so there's no need to use the curly braces okay now we can try to run this and see how it works so for example build and run our application and try to evaluate and see how this particular program works so basically it executed line g and line s right so you are eligible and you are not eligible now if we try to go or input number 18 right here so it will try to execute again the line 9 10 11 and of course it's gonna you know ask for the age again right so it starts from this particular line 9 which is the label g because we have specified if the age is greater than or equal to 18 then it will try to go to label g now if you try to go to or input 16 so it will try to go to label or yeah line 11 which has the label s right and it will just display you are not eligible and it it did not execute the statement from line 9 or line 10 it directly i'll go to 11 line or line 11 which has the label s and then it printed out the statement you are not eligible and also uh it also adds the or i mean asked the h again and then it asks for the uh input from the user okay we can try this one more time so for example 15 so it's going to execute all the lines starting from line 11 with the label name s okay so guys um as i've mentioned uh earlier that the the go to statement is a unique form of statement okay and sometimes uh it is not advisable to use go to statement in your c program but there are situations or conditions that you might want to use this particular go to statement so for example um if the you uh if you want to skip some of the lines in your program so let's try that okay so like for example you have statements like this printf and then this is the end of the program okay and then we can go like instead of using s we can add a label here e and then it will execute you know e instead of s so basically after this condition returns false then it will execute this and it will call the label e and then execute that this is the end of our program so let's try that execute or exit our program first and then build and run so let's try to input first 18 so it's going to you know execute from line 9 until line 15 and then if if we try to input 10 then it's gonna say this is the end of the program okay so i think um that's all there is to it in this tutorial guys and i hope that's clear on how to use the go to statement in c so again this is quite useful in some situations and in this video guys we're gonna talk about loops in c programming so sometimes it is necessary for the program to execute the statement several times and c loops execute a block of commands in a specified number of times until a condition is met so in this video tutorial you will learn about all the looping statements of c programming and along with their use so as you can see computer is the most um suitable machine to perform repetitive test and it can tirelessly do a task tens of thousands of times okay and basically like every programming language has this particular feature to instruct to do such repetitive tests with the help of certain form of statements so that's why we have this loops and then of course guys in c the c programming language supports like three types of loops so we're going to discuss first while loops okay so we have while loops we have do while and of course we also have the for loops okay so we're going to dissect each type of loop so that we could you know better understand how it works and how we can use these loops in in a certain situation so basically guys when we say loop i'm just going to show you a simple flowchart so we have here a simple flowchart that describes the nature of loop or loops in general so we have like start and then we can declare a counter or a variable counter and then our program will try to evaluate the condition and then if the condition is you know returns true it could execute statements and then increment the counter and then again evaluate the condition if the like for example the increment counter is equal or you know greater than something and then execute statements uh increment counter and then evaluate condition and lastly if the condition is met then it will stop the execution of that particular loop so basically guys a loop is just you know doing or executing repetitive statements inside our c program so there are like control statements we have statements that we can use so we have a break we can have like um continue and then of course we have the go to statement that we have discussed previously in our video tutorial series okay so as i've as i've said we will discuss first the while loops in c programming okay so see while loops statement allows to repeatedly run the same block of code until the condition is met and of course while loop is the most basic loop in c programming and while a while loop has one condition and it contains uh or it executes as long as the condition is true and then the condition of the loop is tested before the body of the loop is executed so uh the syntax for our while loop is like this so we have the keyword while and then a condition so like a test expression and then if this condition is like true then it will try to execute the statements inside this particular while loop okay now we have like we can have a very simple application for this so for example we will try to implement this okay so we can declare like a variable so int n equals one and then times plus five and then of course we can declare the while loop for our program like this and then open and close parenthesis and then we can say n is less than or equal to times okay so we have to add the curly braces for that and then inside this curly braces uh these are the statements that will be executed if this particular condition is true okay so it will try to print like c while loops and then we can add the percent or yeah percent d which is the format specifier for our in variable and then we can display the n okay and then of course we can we can increment the var uh the value of n by using the increment that we have discussed before which is n plus plus so basically this is just you know basically saying n equals n plus one okay i think uh we have already discussed that the n plus plus increment in our video previous videos okay now we have set the value n equals to one okay and then we have set the number of times the loop should be executed so that's basically five uh there should be five execution and then we added the while statement and then check the condition if n is less than or equal to times then execute this statements right here so we can try to check this build and run our application and try to see the output of our program and i'm going to you know slowly explain to you what happens in this particular program so you can see the output uh right here cuy loops one see while loops two and then three four and five and after uh five it no longer executed because it you know ended the loop okay so i'm going to explain to you how we got this output so first thing as i've said we declare n equals to 1 so in this condition 1 is less than or equal to 5 which is the value of times so basically and of course it is true that one is less than or equal to five so that's why it executed this particular statement c while loops and then it displays the value one right here okay and then it incremented the value n so now the end becomes two okay and then it will go here in our condition once again so two is less than or equal to five so that's true because obviously two is less than or equal to five so that's uh it executes this statement right here cy loops and then the value of our n which is two again it incremented the n variable so uh the n now becomes three so after that one we will go back here in the condition is three equals or i mean less than or equal to five so that's true because 3 is equal to or i mean less than 2 5 so that's why it printed the output right here c while loops and then the value of our n equals to 3. and now after that it incremented another time the n and the end becomes 4 now and it go back to the condition s 4 less than 5. so basically four is less than five obviously so that's why it printed out the c while loops and then uh four the value of our n and again incremented added one to the end variable and then the n now becomes five and then go back here and the condition is five less than or equal to five so it uh it uh true again because 5 is equal to 5 so it printed out c while loops and then the value of of our n which is 5. now it incremented another time the n variable and now the the end variable becomes six and it will go directly here in our condition is six less than or equal to five so it returns false because six is not less than or not even equal to five that's why it uh ended the loop and it never executed the uh this particular statements right here once again because 6 is not less than or equal to 5 which is the value of our times variable so in this video guys we're going to discuss another type of loop which is the do while so from the previous tutorial we already have discussed the while loop okay and then we implemented a simple iteration program where we can see the value of the variable each of the iteration of our wine loop now the difference between while loop and do while is that the while loop will try to evaluate first the condition and then if this condition is you know return true then it will execute the statement inside this particular while loop whereas when we are trying to use the do while loop then the statements inside the loop will you know execute at least once before the condition is being evaluated so the syntax for that is like this we will just remove this for now all these lines of the while from the previous tutorial okay so this is the format or basic format of the do while statement or do i loop in c so basically we have the do keyword and then open and close curly braces and then the statements or group of statements okay now after the curly braces then it will have this the while keyword and then open and close parenthesis with the condition inside it so as i've said earlier guys that this particular loop will try to execute at least once before the condition is being evaluated okay so as you can see if you wanna like execute first some statements before you could evaluate the condition so so the dual loop is the way to go so we will try to create another program guys showcasing how this particular do while statement or do while loop looks like or how it works so basically guys we could um initialize some variables here so for example the n so int n equals 1 and then we could also declare another variable which is times so basically what we are doing here or what we are declaring here is two variables for our do while and the n represents the number i mean the value of the iteration or the value of the variable each iteration and then of course the times is the number of times the loop should execute okay now inside our do while or do statement we could add a printf statement here and then you could say c do while loops and then the format specifier percent d backslash n and of course uh the n variable okay so we have this uh printf statement so basically what what we're trying here is we're trying to display the value of n every um you know execution of this particular statements okay and in here below this printf statement we could increment the n by you know using this statement n equals n plus one or you can simply use the n plus plus version of this particular statement so n equals n plus one so again every iteration we would try to increment the value of our n plus one and then inside here um the while and then open close parenthesis we could add the condition so for our condition you can add the n and then less than or equal to the number of times we want this while or do while to be you know executed okay so i think that's all for this um do while statement so we could try to run our program and then build and run and see how this particular program works okay so basically guys i will try to explain it to you how this or how we got this output so from the initial value of rn we have executed the do statement right here so we printed out like the value is c do y loops then percent t and then the value of our n is one okay so after this iteration we um increment the value of our n by one so that's n equals n plus two okay or i mean one n plus one and then the semicolon and then of course we will try to evaluate this in our condition so two is less than or equal to times which is five so of course two is less than 5 so that makes sense and then it will try to execute the statements inside the uh this curly braces okay then printf c do while loops and then of course it will try to to output the value two okay after this the n will be incremented again by one so n equals n plus one so the value now or the n value now becomes um three and then evaluate it in our uh open and close parenthesis so three less than or equal to five so obviously three is less than five so it will try to implement or execute again the statement inside our current basis and then display three this will be the line uh three and then of course it will increment again the value n and it the end becomes four now and then uh evaluated once again is four less than or equal to five so um basically four is uh you know less than five so it will execute the statement printf again display the value 4 and then increment again the n it becomes 5 and then after that it will try to evaluate the statement is less or n is less than equal to five so we have set now the value to five so five is equal to five so it will try to execute the statement once again and if the five value now becomes or the end value now becomes six because we try to increment it here so six will be evaluated inside our while statement then six is less than or equal to five so that's basically not true because of course obviously six cannot be less than or cannot even be equal to five so that's why it will try to end the loop because the condition returns false already okay so that's how the do while statement works and guys make sure that um there's like infinite um end of your loop because there are cases that you know the condition will not be evaluated uh into false at some point in our program so that will make it like the infinite loop so the concept of infinite infinite loop so be careful to place a condition here that will try to or like will be evaluated false at some point in our program because you don't want to have the infinite loop because uh the program will run infinitely and you don't want that it would you know consume the memory of your computer so that's why you you need to be careful with the infinite loop so make sure again to add a condition that will be evaluated as false at some point in your program and in this video guys we're going to discuss another type of loop which is a for loop so from the previous tutorials we have like um discuss already what is white loop what is do while and how it can be used in rc programming or c programs so as i've said guys in this video we're going to discuss for loops and of course we're going to describe the syntax of for loops okay so the syntax for for loops guys is like this i'm going to copy and paste this here so we have here the four keyword and then we have the open and close parenthesis in which we have we can you know there uh there are like three um statements that are available for us so the first one is the init or initialize and then the second um statement is the condition and the third one is increment or it could be also decrement okay so this three statements inside this open and close parenthesis is separated by semicolon okay and of course guys each of this statement plays you know a big role in our for loop okay now we can try to implement our very simple for loop so for example let's um declare a variable for our for loop um inside the initialize statement we could you know initialize a variable right here like for example int x equals zero so we could do that here we could initialize our variable into something like zero or it could be one if you want to start um one so basically guys it is the uh the same as declaring the variable here so index 0 so you could also do that here initialize the value to x so this 2 is just the same so basically we're just declaring the variable and setting the initial value say for example 0 or 1. now the second statement for this particular for loop um we could you know add the condition so the condition is something like this we could check if the x variable is less than or equal to 5 just like what we have from the while loop and do y loop so we're checking if the value of the variable is less than or equal to five and of course the last part or the last statement for this particular open and closed parenthesis for loop you could you know add the increment or it could be the decrement depending on the initialize the condition of course in your for loop so for example you want for now is to increment so you could actually do this like this x equals x plus one inside the for loop and then of course guys the statements inside the curly braces so the statements you know you could execute statements right here so for example printf the value of x column and then the format specifier percent d backslash n to have a new line then specify our variable x and then end this off with each semicolon just like this so guys basically what we're trying is to display the value of the variable x each iteration of this particular loop so we could you know build and run this application and see how it works now we have this output the value is one the value is two the value is three the value is four and five so guys i'm going to explain to you how we come up with this output so at first guys you know we declare the variable x and initialize the value into one so now the value for our x is one okay so value of rx is what um one okay and then um let me write first is equal or x is equal or less than or equal to five and then uh increment okay so so for example at the first iteration of this for loop we have initialized the value into one or yeah the value of x into one and then we try to evaluate the statement is x is less than or equal to five so of course x is less than uh five since the value of x equals to 5 so this returns true then it will execute the statement the value the value of x it should be x right there is one okay and after this after execution of this particular statement it will increment the value of our x so at the second iteration it will be two okay so of course two is less than five so that's basically the um condition will return true and then of course it will display the value of x is 2 and then another iteration 3 so 3 is less than or equal to five right and obviously the three is less than two five so basically uh it will return true and then display this statement and until the x will become 6. okay six and then it will evaluate is six less than or equal to five so basically this is false and then it will terminate the loop or it will end the loop itself so that's how we got this um output the value is one two three four and five so this particular output guys is incremented so the value of our x is increment like one two three four and five but anyway guys we could you know make it like five four three two one and we will initialize our variable x differently so for example let's try to revise our for loop and we will start from five okay so the initial value of our x is equal to five and of course we will check if so for example is x is greater than or equal to one so now we're doing the reverse of the increment and of course guys you can you know add the increment statement just like this x equals to x minus one and of course you can use the post increment that we have discussed from earlier videos in this particular uh series so you could do it like this x minus minus and then we could you know display the value of our x okay so let's try this once again and build and run our application and of course we're going to get the reverse output okay so we have here the initial value five and then four and then three and then two and then one okay so guys of course you can always try to you know add another for loop inside this loop so as what we have from the previous tutorials we have like the nested if and else statement and of course guys you could always uh you could also have nested for loops or nested while loops in your program so for example like this you could you know um add another for loop here so for example in y um is we will set the initial value to one okay initial value into one and then we could um try to evaluate the statement say for example is y um less than or equal to x something like this and then we could add the increment y plus plus okay and then open and open and close curly braces and then of course we could display the value of our x and y so the value of x for example percent d and value of y is something like this the value of x is percent d and then the value of y is percent b again okay and then we could also specify the value of our y okay so we could you know build and run our application and of course we will get this particular output so the value of x from uh initial value of our x is five right so it will try to run five times and then it will try to display one two and uh one two three four and five for our value of our y okay and then of course we have the um four and then we also have three and then we also have one and uh two and one so you could do that guys as i've said you can do um nested for loops or nested loops in your c program so you could increment you could use decrement inside your loops okay so and guys if you want to practice more about using loops you could you know try to print different patterns for example you want to print a rectangle or um triangle you could uh display uh inverted triangle by using the um asterisk symbol so you could do that by using your loops and in this video guys we're going to discuss how we can use switch multiple selection statement inside our c program so from the previous tutorials guys we have learned how to use if you also have learned how to use if else and of course how to use the nested if else statement inside rc program now occasionally there will be an algorithm that you know will contain a series of decisions in which a variable or expression is tested separately and the output or the statement or the actions that could be taken depends on the series of decisions this is what we call multiple selection and c provides the switch multiple selection statement to handle such decision making so now let's try to look at the basic syntax of switch statement so the switch statement guy starts with the keyword switch and then open close parenthesis and open close curly braces and inside this open close parenthesis is the variable so variable of interest so the output guys or the statements that are executed depends on the value of this particular variable here so we have here switch statement or switch keyword and then open close parenthesis and then the variable or expression and then of course open close parenthesis and inside this open close parenthesis guys are the case label okay so so for example you want to check for the value of one and then it should be followed by the break keyword which means that it signifies the end of this particular case one okay and then you could you know add several case label here so for example case two and then you could add the break statement you could also add another case label three and then the break statement and of course you need to add the default case so the default case guys will serve or will be executed if there's no case label that satisfies the var uh the value of our variable or expression so so for example we have here one two and three and the input is four so it's gonna you know uh execute the default value or the default uh statement default case now you could inside this particular case we could execute some statements for example you have chosen case one so we could end this with a semicolon so we could do the same for the other cases so like this so in this particular case you have chosen case 2 and you have johnson 3 and the default is you haven't you have not chosen from the uh values one and two and three so one two you have not chosen a value in one two three okay so we could try this guys and of course we need to add a variable here so in input and then we could you know scan f or ask the input from the user so percent d and then the variable input ampersand and then input okay and then guys we could print please choose a number number one two or three okay so let's try this okay so let's try to build and run our application so we have uh we have to update this so variable of interest is of course the input okay so let's replace this with the input and then build and run our application so as you can see it's going to run and we need to input a number here so please choose a number between one two and three so so for example we choose where we input one so you have chosen case one okay and then let's try um another one so for example three so you have chosen case three so basically guys it executed the statement under this particular case label okay and so for example you have inputted or you have uh selected number four instead of the values one two and three so it's going to uh execute the statement under the default case okay so you have not chosen a value in 1 to n this is should be 3. and we could also use letters and characters inside our switch case statement and basically here in our example we're using the in type as the data type for our variable of interest input and then we're setting the um case labels into int one and then into and then in three and then we're executing statement based on the value of our input okay but as i've said we could use characters or letters and so for example you want your user to input letter a you want your user to input letter b and then you could execute statement based on that particular letter so for for now let's try to implement this inside our program we want our user to input letters a b or c and then we could you know output uh different statements based on that particular character so now we could display instead of please choose a number we could you know um say here enter a letter you could select a b or c and then based on this particular letter we could output or execute commands or execute statement okay and then we're going to use the method um get get char okay so this will return the in equivalent of the letter or the character that the user has inputted okay and then we could try this inside our switch statement so instead of using case one we could say here case a and then here we could use case b and of course here we could choose or set the case c so every time the user types in the a so it should print you have chosen option a so we could copy and paste this so b and then of course uh you have chosen option c and in our default wrong option okay so we could try this let's try to run or build and run our program so enter a letter a for example we type in a so you have chosen option a so let's try this once again so for example the letter that has been or the user inputted is b you have chosen uh b let's try this once again so for example the user types in d and then it will display wrong option okay and then of course guys you can make it this way also so for example you want to add also the lower case of letter a so case and then the lowercase version of a so you could do it like this so you have case a and then case with the lowercase a and then you could also do the same with the b and then you could add the lowercase uh b here and of course you could also do the same for your c so lowercase c lowercase b lowercase um a so it's going to you know execute base on this it doesn't matter if it is uppercase a or lowercase a so let's try this once again so for example you want b so you have chosen option b okay let's try this another time and then c lowercase c so you have chosen option c okay so i think it is clear to you how to use the switch case statement in c programming and in this video guys we're going to discuss and i'm gonna teach you how to implement functions in our c program so basically guys a c function is a selfcontained block of statements that can be executed repeatedly whenever we need it so um if you think about it it is just you know a group of statements that we could um call and we can use repeatedly within our c program so in this particular video guys we're going to discuss the benefits of using the functions in c program we will also discuss two types of functions in c um also the parts of function the function prototype the function definition and of course we're going to discuss also how to call a function inside our c program and lastly we will implement a basic program to illustrate the addition of two numbers using user defined function so if you're excited guys please make sure to watch the full video uh you will learn more in this particular uh video tutorial and by the way guys if you are new here in our youtube channel and you like content about programming so go ahead make sure to subscribe and press the notification bell so you'll get updated whenever we have a new upload regarding different programmings or different topics so we have topics python java javafx c programming and many many other topics regarding programming so now let's try to talk about benefits of using function in c so there are a lot of functions that you know we could associate in using function inside rc program so the first one is modularity so when we are using functions it could provide modularity in our code so it means that we could you know define different functions we could uh really call our functions and um we could call this particular function if we need it or we need to execute certain statements and of course guys the function also provides you reusable call me uh it will save us a lot of space and you know it could be our code could be you know more readable by using this particular function feature so that's readable or usable code and then in large programs debugging and editing tasks is easy with the use of functions so functions make it easy for us to implement our programs so the program can be modularized into smaller parts that's what i have said earlier that we could you know develop a certain module inside our c program and then we can call that particular module or statements or group statements if we need in a particular situation and number um the next one is separate function independently can be developed according to the need so so for example guess we could group our statements depending on the need or you know depending on the the function or or the purpose of that statement so we could group that statements and place it inside our c function so actually guys there are two types of functions in c so the first one is um let me type it here type of functions we have the first one builtin function okay so builtin function um of course the system provided these functions and stored in the library therefore it is called um library functions so we have like we are using scanf printf uh str uh strc py um cr s t r c m p c r then str cut and many more functions that are already available for us whenever we try to run a program so from the previous tutorials we have used the printf so as you can see this particular function we did not um implement this the system provided it for us the printf and this particular function will let us display certain objects or statements that we want is we want to display inside our c program so to use this functions you just need to include the appropriate c header file so that's why we have here the include statement at the top of our program so basically we're including all the necessary function that we could use inside our c program and of course guys the the second type of um method is what we called the user defined functions userdefined functions okay so userdefined userdefined functions these are the functions that are defined by the user at the time of writing the program so that's basically us or the programmer um that you know define the functions okay and then of course the same with the builtin function we could you know really use this particular functions inside rc program now there are there are also parts of our function in c programming language we have the function declaration we also have the definition and we also have the function call so this is basically the actual flow of the function we have the function declaration declaration and then we have the definition we have of course the function called if you want to use that particular function so we have here for example syntax for function declaration so we could um this will be the function declaration this is just an example guys on how you could declare a certain function so the syntax for that is data type and then function name and then of course open and close parenthesis and then in here we can specify the parameter list okay or the variables that we want to use inside this particular function so our example of that is like this in which is the data type and of course addition which is the name of our function so addition and then the return type is int and then of course the list of parameters and in this case we don't have any parameter in this particular function addition so we also have the function definition this is actually what the actual function would look like so this will be function declaration or i mean function definition okay so we could uh this the basic syntax to this is return type and then the function name and then function arguments and then curly braces so it should include the close or open and close curly braces and then inside here is the body of the function or simply the statements that we want to execute inside this particular function so whenever we want to call this function this will be the statements that that you know would be executed inside this particular function so in order for us to call a function inside our c program we just need to specify the method name and of course we need to supply parameters if there's a if there are any and we would also need to specify the return type of our function so now let's try to implement a simple program that you know that could ex uh illustrate the addition of two numbers um using user defined function so we have here the main function right and then in here after the main or after the closing curly brace of our main function we could create we could create our own function right here let me close this first so you can you know see better so we could add a function here returning the total of two numbers okay so we could declare it like this in and then addition open and close cur uh parenthesis and then open and close curly braces and of course guys as i've said this is this will be the body of our function so in here we could um define local variables okay so local variables so for example we we have in num 1 equals 10 and then num 2 equals 5 right so these are local variables meaning these are the variables that are declared and defined inside the addition method or function okay so we can say here return and then num1 plus num 2 okay so that's the statement that we want to execute when whenever we try to call the addition method where i mean function so inside our main function we could call this um method addition so we could declare a variable here in answer and then we could say answer equals and then the addition so basically whatever the return value of this addition method it will be assigned into our answer variable and of course we could print or display this particular value so we could say the total of two numbers yes and then in the format specify over just you know percent d and then the answer which is the answer variable okay so we could you know build and run our application application and then we have here the output the total of two numbers is 15 okay so that's how the function works and as you can see here we have defined our function with the statements inside our c function to return the total of the number one in number two and then inside our main function we have declared the answer and then the type is in of course because the in is should correspond to the return type of this particular function and then answer equals the addition and then the last thing that we did here is to display the total of two numbers and in this case 10 and 5 which makes it you know the value or the output is 15. so and in this video guys we're going to learn how to use c function arguments or parameters inside our function so from the previous tutorial we have learned how to define and declare our function inside our c program and of course we have learned how to use the basic syntax to create a function and implemented a simple function that could add two numbers okay so as i've said guys in this video we're going to focus on the function arguments or function parameters so while calling a function the arguments can be passed to a function in two ways so there there are two ways on how we could pass the parameters or the arguments into the function so the first one will be call by value and the second one is called by reference okay so in call by value way the actual parameter is pass the function and then new memory area created for that particular past parameters and then it can be used only within that function and the actual parameters cannot be modified in the call by value way of you know passing the the argument into our function while call by reference so instead of copying a variable an address is passed to a function as parameter and then we could use the address operator which is the ampersand symbol i know if you're already familiar with this so address operator is used in the parameter of the called function and of course the changes in the function reflect the change of the original values so we could understand this better if we try to implement our function by you know creating a simple project or simple application that could demonstrate the call by value or call by reference so first let's try to create a program that would pass the argument as or it could call by value so the first thing that we're going to need is of course to it's actually the same with the program or i mean function that we have created from the previous tutorial but the difference is that in this particular video we're going to use parameter or argument so the first um variable that we're going to declare here is the answer so the type is in and then we have the variable name num1 so the value is 5 and then in num2 and then the value is 10 okay and of course guys we could declare the function so for example we could um create the function right after this closing curly brace of our main function so the first thing of course is the return type and in this case in and then the name of our function which is addition and we could say here in a and in b basically it means that this particular function would accept two parameter in b and uh a okay and then in here we could return the value or the total value of this two parameters so a plus b okay and of course guys we could declare the function right here so we could you know add the function declaration here function declaration so you could say here in addition and then this particular function is going to take two parameters in num1 and in num2 so as you can see here guys this is only the function declaration okay and this is the function definition function definition again this is function declaration declaration and function definition so now we could try to call our function by value so for example you can say here answer and then equals addition which is the method or the function that we have created here and then we could pass along the values of num1 and num2 okay so let me explain this first for you so it would be clear for you so we have here the parameter num1 num2 as i've said in call by value the actual parameters cannot be modified because num1 and num2 is it won't change um even if we you know change the parameters here but in a and b so the value of num1 and num2 would not change even if we try to modify this in a and b inside our addition function so the actual parameter is passed to a function and then new memory will be created for our parameters e uh in a and in okay and of course um we could display here the result so printf and then of course the statement the addition or you could say the total of two numbers is and then the format specifier percent d and then the variable answer okay and then you could you know clean and build our application or build and run and it should display the output something like this the total of two numbers is 15 okay so you get the point this is the calling of function by value okay now if we want to try to call the function by reference as i've said we're going to use the ampersand symbol so ampersand symbol or it is the address operator and we're going to use that in our parameter of the called function so let's let's try to implement a function that you know could call by reference and you should see by now how you how the call by reference and call by value is different so the same thing we're going to declare the method here the return type is in and then the name is addition and then it's going to take two parameters with type in okay and then we could uh also use this in answer and then the same value for example and now guys instead of just using this num1 and num2 we could add the address operator the ampersand symbol or the address operator in c programming so basically guys uh we're sending or we're passing the address of this particular variable into our function so so whenever we change this value inside our function it's going to reflect the value of our num1 and num2 okay so um we have here the ampersand or address operator and then we call the function right here and then display the answer and of course we need to add the asterisk symbol for this variable here or the argument and then um one for the other variable b so this means that it is the operator that is used as a pointer to a variable so it's going to point the address to that particular value of num1 or num2 so of course we need to add this also in here and of course for our variable num okay and then as i've said if we want to change the value of num to here inside our function we could do that and it's going to reflect the changes of this num2num1 variable okay and then of course we could still use the asterisk symbol here and let's try to run our program for now so build and run and it's going to answer or it's going to the output this way the total of two numbers is 15. okay so let's try to modify the um num1 and num2 okay for example inside this particular function we're going to change the value of our variable a so instead of five it's going to like maybe six okay so we could do that by using this particular variable argument we could add here the um variable a and then we could say six then semicolon semicolon at the end and we could try to display the value of our a so the value of a and then percent d and it should you know the variable a correspond to the variable num1 right so we could copy and paste this so notice that num1 equals to 5 here okay so let's see what's the output of this so build and run or program so as you can see we have here the the output the total of two numbers is 16 and the value of a is six but as you can see here a corresponds to the num one right num one so we have here num one equals to five and then we change the value of num1 by using the the reference of variable a and then we set it to six that's why we're getting six here and then the total of our addition is six okay so and in this video guys we're going to learn how to use arrays inside our c program so basically guys we can declare variables the whole single element or a single value inside our c program so for example like this age or ink age and then we could assign it to a value 5 for example like this so this particular variable will hold the value 5 for a single value 5 and then it's going to assign to the variable age now what if you want to store like 50 um series of values like there are um 50 each that what uh that we want to save for example there are like 50 percents that we want to save the ages then uh this particular declaration and statement will not suffice because we're going to like declare it one by one so for example in age two and then six and then in age three equals seven and in uh age 4 was like 10 and so on so basically guys this is not a good programming practice to declare multiple variables or yeah multiple variables to hold a single set or a single type of data so that's why we need the capability of an array so basically guys the array is a data structure in c programming which can store a fixed size uh sequential collection of elements of the same data type so in this case guys we're just you know collecting and saving um the same data type of data which is in now what we can do here is we can define an array and then we could set the lens say for example we want to save 50 ages right and then we could save the age into that particular array so let me show you an example so this is how you can create an array inside your c program so basically the first thing is you have to specify the type of your data that you want to save in that particular array and then the array name so basically this is just like the variable name so you have to label your container and then of course you have to specify specify the type of data that you want to save in this particular array and then you have to add the square brackets and this signifies that this particular variable is an array and then inside uh this particular square bracket you can uh declare the size or you know specify the size or how many um values that this particular variable could hold okay so in a typical c program you can do it like this so for example the type is in right and then you can say aegis or age right so this is the iron name and then this uh square brackets and then you have to specify the size for example 5 so you want to collect five values or five age of five persons okay so again this is the type in you have to specify the type and then you have to specify the array name the the variable name and then of course square brackets and then the size of your array or basically the amount of values that this particular array could hold so after this you can say equals and then you can specify the array or the elements of your array so for example we could take all these values 5 6 7 and 10 so 5 6 7 and 10 and for example because our array contains or should contain five elements you could add another one here for example um eight or something okay so again this is how you can create an array of um values so in is the data type and then of course we have the r name and then square brackets with the size 5 for example your array should be 5 and then equals and then the curly braces open and close curly braces and not in available program now you can access this particular um or this elements or these values by using what we called index so in c programming or any other programming with um arrays you could access the values by using index so this index is zero based zero base it means that it will start it will start with zero okay so meaning uh if you want to access the value five so you you have to use um 0 index a this will be 0 and then this will be 1 this will be 2 this will be 3 and this will be 4. so again if you want to access or get the value of this particular element you have to use the zero value of your index and then one for the six two four seven three four ten and um four four eight so let me show you that how that works so for example you want to display the value uh six okay so all you have to do is use the printf statement and then um google quotes and then percent d the format specifier for our um integer values and then comma of course and then we could use the name of our um uh what do we call this array so ages and then we can specify the square bracket and then index of the element that we want to use for example six so we want to use the index one for that to be able to get the value of six so let's try this uh build and rhino program so as you can see the output is six as you can see here 6 right now if you want to get the value 10 you have to use the um index 3 for that because as i said the value is equivalent to the index 3 of our particular array so build and run a program and it should output the value 10 which sits on the index three of our array so that's how you can access the value from our array now say for example you want to change the value of this array right so we have year five six seven eight or five six seven ten and eight and then if if you want to change the value of so for example this one find the first element all you have to do is specify the index also sorry yes so for example we want to display this what will be the um value of our uh index zero so we could test that by using the printf statement and then instead of three you could specify the value 0 or index 0 here so let's try this build and run and as you can see here instead of 5 the initial value of our index 0 it returns 11 because we assign it or we modify it by using the element or index 0 equal to the 11 which is that's why we are getting the 11 value here now this is particularly useful guys or if you want to work with the array um one of the best structure or the best statement that you could use to iterate the array is by using the for loops or loops inside our c program so we could say this here for example four so we're going to use the for loop statement here and we can specify for example um index equals to zero we want to start with zero because as i said the index of our array is zero base it will start with the zero number okay so index equals zero and then semicolon and we're going to say here uh here index um less than the uh actual value of our array or i mean size of our array so five less than five so another semicolon and then index lastplus and inside the for loop we could display the element of our array so we could use this printf statement and then we could use the index variable here and then change this we could say index equals percent d the format specifier and then um we could say equal to percent b and then of course the actual value of our array index so in here we could specify the index okay so it should display the index current index and then it should display the actual value of that particular index so we could build and run our program let me add first the backslash n or new line state sequence new line and then it should display this particular output so at index 0 we have the value 11 at index 1 we have the value 6 right index 0 is 11 because we already modified our array specifying the array or index 0 should be equal to 11 and then at index one equal to six right here uh index two should be equal to seven index three is ten index four is eight okay so that's how easy for us to access and change the value of our array and that's how we can define our multi i mean single dimension or one dimension array inside our c program and in this video guys we're going to talk about multidimensional arrays in our c program so from the previous tutorial we have learned how to use the basic array so we have implemented one dimensional array we are trying to display the contents of an array by using the for loop and of course we declare and initialize one dimensional array from the previous tutorial now as i've said from this tutorial we're going to learn how to work with multidimensional array so basically guys multidimensional array um works like the same with the onedimensional array but the difference is that it contains the array contains a set of arrays so in c programming language it will allow us or it allows us to use multidimensional arrays and the declaration or multidimensional declaration for that is by using the type of force as i've said from the previous tutorial if you want to store multiple values you have to use arrays and in order for you to declare an array you have to specify the type of that particular array so you have to specify the type and then of course the name of the array and then you have to specify the size here so for example size now this is um good for a one dimensional array so you have to specify the type the name and of course the size of your array now comes the multidimensional array or twodimensional array so you could do it like this so size two and then this is the size one so this is how you declare multidimensional array or twodimensional array inside our c program so the type of course you don't you know you don't want to forget that the size of or i mean the type of the value that you want to save in this particular array so and then the name and then of course the size one and then the size two now if you want to create threedimensional array you could do it like this size two i'm in size three so you have square brackets for your size 1 square brackets for your size 2 and square brackets for your size 3. so again this is how you can declare your multidimensional array but you know the simplest form of multidimensional array is by just specifying two sizes and basically guys this this will represent the columns and rows of your array or multidimensional array because multidimensionally works like a table so size 1 will be your number of rows and the size 2 will represent the number of columns so let's try this let's try to declare and initialize a multidimensional array so following this particular declaration type so the first thing is of course the type so in and then we could say here a or a variable name a this is the name of our array multidimensional array and then of course we could specify the size for our rows for example three right there and then the size of our columns or number of columns so that's basically like four and then you could you know initialize this by using the equal sign and then open and close curly braces so in this uh inside this curly braces we could declare or initialize the values for our uh rows and columns as i've said multidimensional arrays are you know composed of um arrays right there okay so you could add array of values right here this will represent the row one of our array so like for example zero um one and then two and then three okay so again this is for uh initializing the row initializing the row index by zero okay so we could access this by using the index zero okay and for example uh basically uh we declare it here like three so we need to add more um arrays to this so open and close curly braces and another one to make it you know the length is three so in here we could display or add four and then five and then six and then um seven okay and then the other row will have eight then nine and then 10 and then 11 okay so basically we now have uh declared initialize our multidimensional array so the three here represent this rows three rows and as you can see here we have declared four columns so it should um count or i mean you know the columns start from this zero four eight and then um one five nine two six ten three seven eleven so this will the four the the eight and the zero represents the column zero and then one five and nine represents column uh one so why this is uh representing column zero that's because our index is you know is zero base or meaning it will start counting from zero so this will be the column zero the column one the column two and the column three okay and of course we could try to display the value of this we could access the values of our multidimensional arrays by using the indexes of the columns and rows so for example we want to change the value of the values that we could get from the row 2 and column 3. so basically the value of or the value that we could get from our array index 2 and 3 is 11 because this is the row 2 and this is column 3. so 0 1 2 3 so we get the 11 or the value 11. so if you want to change this to something like 8 so we could do it or assign a value to this by 8 so it should display 11 or i mean 8 instead of 11 so we could try that so printf and then percent d which is the format format specifier for our in value so we could specify the array index 2 and then index 3. so if we try to compile and run our program we should get now the value 8 value 8 as you can see here that's because we already modified the value inside the array of index 2 and 3 so let's try to comment this and then compile and build our program and as you can see we're getting 11 that's because that's the initial value of the array index 2 n 3. now we could use array or i mean like we could use loops here to access and change the value of our array or multidimensional array and of course because we're using multidimensional array we could also use nested loops to change and access the values of our array so so for example we could declare for loop here and this is for example int and then row equals zero and then our row is less than or yeah rho is less than um like for example um two or or three okay and then row plus plus so basically we're iterating from zero one and two because we're we only have like three rows but we starting we're starting from zero so let's make uh let's making it like the value of our row should only be within two not three that's why we're using single or i mean um less than three right here and then of course we could make another loop for our column so int column and then equals to zero and then column is less than four and then um we're going to say here column plus plus okay and then of course we could use this particular pin printf statement to display the values of our um array so percent d we could use here the uh array name which is a because we're using the array name a so a and then um we're going to specify here the columns and rows so percent d and then here percent d equals percent d so inside here we could specify the row and then the column and of course the value of that particular row and column okay so this will be row and of course this will be column okay so again we're just trying to get the value of inside our array represented by this particular row and column okay so these are the indexes the row and column so let's try to build or compile and run our program and we're getting this particular output right here but we don't want that let's try to add a backslash n to add a new line every uh execution so as you can see here we have all the values coming from our array so array and then we have index 0 0 so the value is 0 right there as you can see and then a 0 1 so the value is 1 a 0 2 is 2 a 0 3 is 3 and a 1 and a 1 0 is 4 and so on so that's how you can uh that's how you can use the multidimensional array inside our c program okay and i think that's clear enough how you could iterate and modify your multidimensional array by using for loops and in this video guys we're going to learn how to use array as a function parameter so from the previous tutorials we already implemented functions that could take few parameters and then return a value based on the parameter that we have passed um to the function now in this particular video guys we're going to learn how to pass the array as a function parameter and of course we already know how the array works inside our c program we already implemented a simple program that demonstrates the capability of using array we already implemented a multidimensional array and even uh iterated the content or the elements of our array now we could take that further by using a function and in this video guys i'm going to show you how you can sum up the values of your array and then we're going to use a function for that so as i've said we're gonna pass the array as a function parameter so here inside our c program we could um declare a new variable or a new array so so for example in and then my number array okay so my um my number array is the name of our array and then it should take in or has the size of say for example six so the number of elements is six right we could specify the values inside our curly braces now we could specify the values 23 30 21 18. um let's say 17 one two three four five and another one for our last element say for example 25 so these are all the elements of our array and then we're we're going to sum up the value of this by using a function so what we can do here is to add a function above the main function or whatever we could also insert function right after the main function so for example uh the function will return the total so it should say int this is the return type and then the name of our array so total value of array so this will be in the name of our function total value of array so again this is the return type and this will represent the total value of the elements that we have here so total value of array and then of course we need to specify the argument or the parameters and because we're trying to sum up the value of our of our array we could um specify that the first parameter is an array okay so so for example int and then number array and this is the first parameter and represents the my number right here okay and then we could also specify the size of the array so basically we have six here so we could say here in and then size and again this will represent the size of our my number array and of course we need to add curly braces inside and inside this function we could add the logic to add all the elements of our array and then return the sum or the total so we could say here in total equals zero okay that that's the initial value of our total variable and then we could um try to iterate the elements of our array by using the for loop statement uh statement the same for loop that we have implemented from the previous tutorials okay so for loop so we can say here in i was the zero and then i is less than the size of our array and then i plus plus and then inside the for loop we could say sum or total equals total plus the number array right there and then we could specify the index which is we're going to use i so this is the variable i that we have declared inside our for loop so number array and then the index i okay and of course guys this is the same uh the same with this particular line we could write it with this particular line total equals our plus equals and then a number array and then of course specify the index of that particular number array so again this particular line is the same with this line all we are all we are doing here is trying to accumulate the total of our number array right here so after the total plus equals number array we could return the value of the total so by using the return statement and then of course the variable total okay okay so i think our function or our function total value of array is already set we could now call this particular function uh inside our main function right here so basically for us to call that particular function all we have to do is use the name which is total value of array so total value of array right there and then open and close and then we're going to supply the parameters which is the first one is the array or the my number of uh my number array so my number array and then of course the second parameter is the size of the um array which is six right there and then of course this particular function returns in which is the total we could catch the value by using also in and then you could say here sum equals the return of this function that has the parameters array and the size of the array and then right after that one we could print the sum of all the elements so printf and then we can say here the total value is you can use the percent d and then backslash n and then comma and then of course specifying the sum variable okay and now we could compile and run our program so i think we have an error here because we use the comma so we need to remove that and compile and run again our program so it should say here the total value is 134 which is the total of this particular value uh elements here from our my number array okay so we could also add function i mean add element to this particular array so it should say after 25 we could add like for example 50 and then another one um 25 so basically the length of our array or the size of our array should be eight because we already added two elements the 50 and 25 and of course we need also to change this particular uh parameter here it should say also 8 okay so let's try to compile and run our program and as you can see here the value is now 205 okay so let me explain to you in details how this works so first we define the elements of our my number array and the size of this or the number of elements of this particular array is eight right there and then right after that we call the function total value of array and then we pass in the my number array as the parameter and of course the second parameter is eight which is the size of our number array now for the total value of array function as you can see here it takes two parameters the array and of course the size of the array and then inside here we initialize and declare the total variable equal to zero and then we iterate the my number array or number array by using the for loop and then we use the i as the index variable so i equals to zero and then i is less than to the size that we have specified and then i plus plus and then of course uh in order to get the total of the elements we're using total equals total plus number array so basically this is the same with this line total plus equals number array and then specify the i index so so for example this particular i um the value of i is 0 then it's going to get the value 23 and then i value 1 it should get the 30 i value 2 is 21 i value 3 is 18 and so on so you get the idea and then of course after that we get the total value and then of course return that to this particular variable sum and the last thing is we display that the total value is and then specify the sum of all the elements that we have from this number array okay in this video guys we're going to discuss what is pointers and how we can use pointers inside our c program okay so if you're excited guys please make sure to watch the full video we're going to be learning a lot in this particular video and in the succeeding videos about pointers so basically pointers in c are you know easy and fun to learn so there are some c programming tasks that are performed more easily with pointers and there are other also tasks such as dynamic memory allocation cannot be performed without using pointers so it becomes necessary to learn pointers to become a perfect c programmer so if you want to be like almost perfect c programmer so it is necessary for us to learn pointers okay and let's start learning them in simple and easy steps so as you know every variable is a memory location and every memory location has its own address defined which can be accessed using the ampersand symbol so i think we already used this particular symbol before in our previous tutorials but we're going to you know tackle deeper what is this particular symbol and how we can use this in um you know working with pointers and it is you know denoting an address in memory meaning the ampersand and for example we're going to define here or create a program that could um showcase the capability of this operator and um the basic access to or basic you know access to the pointer address so for example we have a variable in var one and then we have char var2 which is the length for example is 10 so basically guess as i've said these particular variables these variables has location or has a specific location in our memory and every memory location has its own address so in order for us to verify that we could try to print the address or memory address of this variables so we're going to use printf function and then in here we're going to say address of var 1 is percent x so this is the format space of uh performance specifier when we're trying to display the address of the variable so percent x and then we're going to specify a new line here and then comma and then of course we need to use the ampersand symbol and of course the name of our variable say for example the var one so the address of var1 column and then percent x the format specific specifier and then of course specifying ampersand and the name of our variable one and um we could do also the same for the second one or second variable var2 so percent x and then this will be var two so this is basically guys trying to test if this particular variables has you know we will just display the um address of this variable okay so before we run our program let's change first this because i have forget to type number one because this is uh this is suppose saying that this particular variable has the length of 10 okay so that's char var2 and then open and close square brackets and then 10 okay so let's try to build and run our program and as you can see it's going to display the address of one is six one uh fe1c and the second one will be fe one two so that's basically the address of the variables var1 and the var two so a pointer variable is a variable whose value is the address of another variable okay so for example direct access of the memory location now like any variable or constant you must declare a pointer before using it to store a variable address so the typical or you know the general form of pointer variable declaration is just like this we need to specify the type and then the asterisk or star symbol or asterisk in other other terms and then of course the variable name so that's how to declare a pointer variable so again we need to specify the type and then asterisk symbol and then the variable name so um here the type or type is the pointers base type okay and it must be a valid c data type and of course the variable name or the var name is the name of the pointer variable and as you can see guys this particular symbol asterisk symbol is sometimes used to declare or use for multiplication process or multiplication operation right but in this particular case it is being used as to declare a pointer variable okay now in order for us to declare pointer variable based on this particular declaration form so we could say something like in and then percent or i mean the asterisk symbol and then the name of our variable so this will be pointer pointer to an integer okay and then we have for example double and then the asterisk symbol dp and this is basically the pointer to a double we also have like float and then fp this will be obviously pointer pointer to a float and another thing ch and then this will be a pointer obviously to a car regular so the actual data type of the value of all pointers is you know a long hexadecimal number that represents the memory address so whether we declare it as in we declare it as double we declare it as float or character so it's going to do it's going to return a long hexadecimal number that represents the memory address now the only difference between pointers of different data types or data types is the data type of the variable or constant that the pointer points to so for example this particular variable points to this variable one then it's going to be a bit different because we are referencing to an in variable so let me show you that how you can you know use pointers we could remove this lines okay in var1 we could assign a value to this like 20 and then this this will be the actual actual variable declaration so this particular variable has the value 20 and then we could declare a pointer variable so in and then asterisk ip so this is pointer variable declaration so you get to see the difference between this declaration the pointer variable uses the symbol asterisk okay and then of course in order for us to store the address of the variable one into the pointer variable ip we could use ip variable equals the ampersand symbol and of course the var okay so basically guys we're just passing the memory address of this particular variable one into the pointer variable ip okay so for example we could print the address of our var one so printf address of var one we could use percent um x as the format specifier and then box slash n for new line and then use the ampersand symbol and then var1 so let's try to declare or i mean display first the address of the var1 and then we could also just do the same print the address or the value of the pointer variable ip so the value of ip and then percent x backslash n and then the variable ip so let's try this clean and build our program and it should you know display the same hexad hexadecimal value so address of var one is six one f e one four and then the value of i p is you know six one f e 1 4. so basically we're just trying to display or i mean store the memory address of var1 into the pointer variable ip okay and of course if you want to access the value using a pointer um you could try to modify our program to access the value access the value using the pointer variable so printf and then value of pointer variable ip so for example percent d backslash n and then asterisk ip so basically we're just trying to access the value of this particular pointer variable so let's try this clean and build our program and as you can see here we have the address of var 1 6 1 fe 1 4 and the value of the pointer variable or i mean the address of ip or you know the pointer variable ip61fe14 and also here we could say that the value of this is 20 which is also the same with our variable one so that's how easy for us to you know use the pointers inside our c program in this video guys we're going to be discussing what is string cnc and how we can take advantage of the usage of this particular strings and then of course we're going to be dealing with the different functions that we could use in order to work with our strings in rc programming language now if you are new here in our youtube uh youtube channel and you want content about programming i am inviting you to subscribe and press the notification bell so you'll get updated whenever we have a new upload so without further ado let's dive right into our topic which is the strings in c programming so basically you guys when we say string in c programming it is the one dimensional array of characters this is called strings in other terms this is just you know a group of characters um logically grouped together and then and then there should be a sense why we're grouping these characters together and this is terminated by null character backslash zero so actually guess there are two types of or two ways to declare string in c programming okay so we could declare it like this basically guys we have here the basic structure of our starter program so hello world program so i'm just going to delete that and we're going to initialize or declare string in c programming so you could do it like this you could um specify the type as char or car and then of course the name of your variable so you could name it something like this name and then you could specify here the um length of your array of characters so for example six and then in here we could um add the different characters for this particular string so we could say here for example h comma and then we're going to specify another character so first you have to specify single code and then the character and then single code to close that particular literal string and then another comma and then single quote the character again single code comma and then single code another character okay so you get the idea on how you could you know declare your string variable in c programming so i'm just going to continue working with this so we have um declared six so as i've said from the beginning you have to or the string it is the onedimensional array of characters and it should be terminated by a null character so null character in c is backslash zero okay so basically now we now uh we do have the string name and then we need to close this one up so this is how we could declare our string in c programming language and actually guys you could do it also like this so for example you don't need to specify the len so char and then you could say here last name and then all you have to do is um declare it as an array but you don't have to specify the length here for example 5 or 6 or something like that so all you have to do is initialize this with a with an actual value for example hopkins something like this okay and then close it with semicolon so basically guys it means the same thing if we declare the string like this or if you want to declare the string like this and of course we could try to display this all we have to do is print and print f and then we could say here the name is and then we need to add the format specifiers so percent s for string and then the new line specifier and then comma and then the actual value or string or the variable that we want to display which is the name something like this and then semicolon and we could also do the same for the last name so printf and then open and close parenthesis the last name is percent again percent as the format specifier for string and then newline and comma then the actual variable which is last name so we could try this at this the the semicolon at the end of the line that denotes that this is the end of this particular line okay so make sure you do that because the compiler would complain if you did not specify the end of a certain line so now we could build and run our program and it should display your string like this the name is hello as we have specified in our variable name and then the last name is hopkins as you can see here okay so that's a good start on how we could start working with our string in c programming language now there are functions as i've said there are functions that we could use uh if we want to work with our string more so so for example what if you want to copy a string concatenate the string get the length of the string so we could do that we could also compare strings if you uh if you like to compare strings so all we have to do guys we need to include a header file which is string.h so this header file contains all the functions that we need if you we want to work with string in you know deeper sense so string and then h as i've said this will contain all the functions that we need um like for example the sdr copy str concatenate str land or if you want to get the length of a certain variable so for now let's just try this this is for display display the value of our string right and then of course here we could use functions to our string okay so perhaps the first function that we could use is the sdr copy so the keyword for that is str sdr and then c p y so as you can see here we have the other suggestions um the sdr copy right here so we could click on that and then in here we could specify the string so let me explain first what this means so the sdr copy function takes in two parameters so the first one will be the destination or the string that the copy of a value will be stored in and then the second function i mean the second argument will be the source of um or i mean the source string okay so again it will take two parameter this strcpy the first parameter will be the destination string the second parameter will be the source string okay so for example in this program i'm going to declare another string here and then we can say here s t r and then full name example this is just for a sake for the sake of example okay so for example this will be maybe i don't know maybe 13 okay so we don't set the value for this for now and all we have to do is use our sdr copy function and then we need to specify the destination string so for now let's use this sdr full name as the destination string right there and then comma and then of course we need to specify the source string okay and then the source string will be um maybe the the last name okay now if we want to display the value of set or sdr full name then we could use the printf statement and then we can say here the full name is and then percent s again backslash n for the new line and comma for um the actual value str full name right there and then end this up with the semicolon okay and then we could clean and build this just to see the result of our program and in here we have an error okay so we copied the actual value of our variable instead of using last name so let's just modify this so instead of hopkins it should be last name here okay so clean and build our program and it should be okay for now and as you can see here we have the display so the last name or the name is hello as you can see and then the last name is hopkins and the full name is hopkins and these two is identical that's because we already we just copied the value of last name and assign the value to the str full name okay so that's how easy for us to copy strings inside our c program so there are there are other functions as well if you want to explore more about this so for example the other function that we could use is str say a t or c sdr cut so this will concatenate the string or two string so basically it will just takes two parameters the the first one and the second parameter and then it should you know combine this two string to to to form a new string so let me show you that so let's just use this sdr cut and then maybe we'll just use the name and then the last name so the first string will be name okay and comma and then we need to specify also d um but they call this the string or the second string which is the sdr full name okay and then semicolon okay and then after this we could display the value of our name so all we have to do now is copy this and paste it this here and let's clean and build our program so first now let's just close this close the output the output first and then clean and build our program and it should display here what we have done so far so the name is hello the last name is hopkins the full name is hopkins and as you can see here the name is hello hopkins so as you can see it concatenated the name and then the last name so the the name got the value of hello and then the last name got the value of hopkins okay so i think that's all there is to it for this tutorial and if you want to learn more about strings all the functions you could explore the documentation so if you want to know more about the different functions available in this string that h header file you could visit this website and then you can see here the commonly used string functions so we already have used the str cpy sdr cat and of course the other most common you commonly use string function is getting the length of your string okay and in this video guys we're going to be learning structures in c so we're going to explore what is structures and how we could you know use structures inside our c program so basically guys when we say structure it is a user user defined data type it is used to store a collection of different kinds of data so in a sense it could be something similar to an array so basically it is like a collection the only difference is that an array is used to store the same data types so in an array if you want to save an integer value so you have to make sure that all the elements of that particular array is also int or integer and if you want to store double so it should have double or it should you know contain all double elements while if you want to use structure you could declare multiple data type inside this particular collection so in order for us to use structure in c we're going to be using this particular keyword strut okay so this is how we could create a structure in c programming so struct so variables inside the structure are called members of the structure okay so now let's try to define a structure in c so say for example we want to um try to declare a struck courses so all we have to do is specify the keyword strap okay and then this is going to you know make sense later on if we want to access the members of this particular struct so for now let's just stick to this um strap is the keyword that we could use to you know declare or define a structure in c so again that's the keyword struct and then we could specify the structure name so this could be any any name that you want so for example we could name this courses okay so this particular courses uh this will contain different variables okay so as you can see here we have added curly braces opening and closing curly braces and then at the end of the closing curly brace the semicolon that signifies the end of this particular line okay and then inside here as i've said we could have multiple variable type okay so for example number one will be char or car and then we could name this for example website and then the length is 50 okay and then semicolon and another one car for char and then subject will be the length 50. then the last one the last one will be about price okay so as you can see here guys we have these trap courses and then it contains three different data types uh of variables so we have here website with lan 50 subject lan 50 and then price which is an in or of type in okay that's how easy for us to you know define a structure in c now we could um access this the strap courses but basically we need to move this outside of our main function so we have to move this i'll just have to cut and paste this so it should be outside our main function because we're going to declare or i mean access the struct from this main function right here okay so you could think of this uh if you are into object oriented programming you could think of this as a class for now but this is different because this is a structure which is collection of you know different variables or different data types but you could think of this as you know an object or a class for now and then we could access this inside our main function so in order for us to access that we just need to specify the name of our strap inside our main function so all we have to do is use again the struct keyword like this and then the name of this trap which is courses okay and then we could assign an alias to this for example course or maybe c a big letter c okay big letter c okay and then semicolon so that's how we could um access this courses struct inside our main function so all we have to do is like um use the struct keyword and then name of our struct which is courses and then assign assign an alias to this uh strap okay and then after that one we could initialize perhaps our variables okay or members of this struct so all we have to do is we could say here initialization we could now access the members of the strat courses by using this alias so initialization for example um sdr copy okay so i believe i i have already showed you how you could um assign a value to a string because we're going to be assigning value to this website so this is a string collection of characters so str cpy and then we're going to say here c and then website so as you can see here we have the access to all the members of the courses struck so we're going to use the website first and then we're going to assign a value here for example triple w programming knowledge something like that so basically what we're doing here dot com we're just doing here is we're just getting the website member and then assign a value to that which is the www.programmingknowledge.com and after this we could you know access the this value by using this member of struck so later on we will try that but for now let's just move to the next member so again we're going to use sdr copy strcpy and then now we're going to use the subject subject so the the subject will be introduction to c programming so that will be the subject for this particular course so again we're just doing here um we're just getting the subject member of our strap and then assign a value to that which is this string introduction to see programming okay and of course the other one or the last one will be the price so what we do here is use the c alias that and then price and then we could assign a value here for example we want to um specify a value or a price here like 15 or something and then after that after initialization of course we can use the these values right here so all we have to do is we can say here print so we could use printf statement and then we could say here website percent um semicolon our column and then percent s and then we're going to add new line here comma and then the member of our strap so c dot and then website okay and then semicolon at the end so we're going to do the same for the other members so uh the next one is the subject so percent s and then backslash n and then we're going to access the subject member of strap and then the last one will be wind f i mean the price so price we're going to do the same here percent um d that's the format specifier for our uh integer values so c that price okay and then semicolon at the end of this line to denote that this ends with this semicolon okay so now let's try this let's uh build and run our program and we are we're having an error here i respected because expected that's because um we didn't we did not add the semicolon here okay rookie mistake build and run and as you can see here we now have the values displayed here in our console so the website is www.programming.com and then subject is introduction to c programming and the price is 15 so that's how easy for us to use struck in c and then we could you know make this um collection of different variables and then we could assign values initialize and then we could also change if we want to change the values after initialization and then after that we could display the values or the actual values of the members of our struct and in this video guys we're going to learn how to use unions insider c program so from the previous tutorial we learned how to define and use structure and then we also implemented different methods or different functions that we could use whenever we are working with structure right so at this point in time we will be learning how to use union also so basically union and structure is almost the same but there's a significant difference that we will discuss later on so the thing about struck is or the thing about structure is that we can store different data types in different memory location but when we say union we can store different data types in the same memory location so that being said if we try to define union a union is a special data type available in c that will allow us to store different data types in this in the same memory location so you can define a union with many members but only one member can contain a value at any given time that's because we store the data inside the same memory location so in other words all the members of the union share the same memory location that's why every time we set a value to a particular member of the union other values will be over um will be erased and then replaced with the new value of a particular member so to define a union you must use the union statement so from the previous tutorial we use struct for this structure but in the case of defining a union we will define a union by using the union statement in the same way as you did while defining the structure and the union statement defines a new data type with more than one member for your program so basically it looks like this but instead of strap you're gonna use union okay so that's union and then of course the name of your union for example data right there and then you have to add open and close curly braces that signifies that all the variable inside this curly braces is a member of the union data okay and then of course we can define the members here so the same thing with our structure so that being said we can say here int i okay and then we could also um add float f and then say for example char sdr and basically for example the length for this is like 10 okay so let me show you first how this particular union works so the union tag is optional actually and each member definition is a normal variable definition so such as i or in i or float f or any other valid variable definition and at the end of the union's definition before the final semicolon you can specify one or more union variables but is but it is optional so you can also say here the name of your union is like um data okay so you can refer to this data and then you can now you now have the access to the members of your union by using this reference okay now a variable of data type can store integer float or string of characters so it means a single variable and then same memory location can be used to store multiple types of data so you can use any builtin or userdefined data types inside a union based on your requirement so it depends on you so the memory occupied by your uh union will be large enough to hold the largest member of the union so for example in this particular code data type will occupy 20 by or i mean 10 bytes of memory space because this is the maximum space which can be occupied by a character string now we can display the values uh of this union so for example we try to display all the uh i mean any value coming from this union so at first we could you know refer to the members by using this reference so data dot and then we could say here i then we could initialize this value into for example um five like that and then we could print the value of i so here we could say the value of i is and then of course we need to have the format specifier for our i okay so d and then we could add also the new line and then comma and then of course data dot i okay and then semicolon so let's try to run our program so basically let's hope that we won't have problems so build and run or program and as you can see here the value of i is 5. so we were able to set the value of our data i member and initialize it to 5. now take a look at this for example we set the value of float into a something into some value for example data that f equals to for example let's say 22 or maybe like eight okay and then um we could try to maybe add 8.5 here just to make sure that it is kind like float value so we set the value of our f into 8.5 so we could you know build and run our application and as you can see here we're getting the value of i is something like this okay so the value of i is something like this that's because the value has been you know corrupted when we try to set the member f into something like 8.5 and as you can probably remember that the members of the union share the same memory location so that's why if we try to change the value of a certain member then it will override the value of the other member so that's why it's somehow corrupted our value of i here and we're getting this random number like this but the purpose of using union actually is to have a some sort of a value at a certain point of time so for example if we want to make use of the union we could try to display the value of i right here after the initialization so the value of i is and then we're getting the the value of i remember here and then also if you want to you know display the value of the float f value or remember from this union then we could what we could do here is change this into f that's the formal specifier for a float value and then we could say here the we want to display the member f from the data union so we could actually get the correct value right after this so let's try to run this so build and run our application and as you can see here that we're getting the value of our i is 5 so let's change this instead of i this is member f and this is member i because this is a member of this union so let's build and run our application and we're getting this output the value of member i is equal to 5 and then the value of member f is equal to 8.5 so that's basically the correct value that we're getting or we're setting here in our main function okay so i think that's all there is to it for this tutorial and a sort as a sort of summary or review we have learned how to use union insider c program and then we learn that we can store different data types in the same memory location by using this union keyword and then store different variables with different data types and um yeah we also set and initialize the value of the members of our union and then also display the values individually right here in our c program and in this video guys we're going to be discussing type def in c programming so as a sort of review in the previous tutorial we have learned how to use unions and how to implement unions inside our c program and we also have implemented a simple solution or simple program that implements the capability of unions and c so as i've said in this video we're going to be discussing type def and yeah i'm going to show you how you can use typedef inside your program or c program so basically guys c is such a dominant language of its time and even now that even uh you can name those primary data type of your own and can create your own name data type by blending data type and its qualifier so it means that we could create our custom name for our qualifier or custom name for our primary data type and then we can use the keyword type def right here and this is a keyword implemented to tell the compiler for assigning an alternative name to the existing data types this keyword type def typically employed in association with userdefined data types in cases if the names of data types turn out to be a little complicated or intricate for a programmer to to get or to use within a program so there are cases that a particular data type or a name of a particular data type is like complicated and it's not easy to be used inside a program so that's where the type def comes in so it can be used to make the naming of our data types or variables in c a lot a lot easier so the typical format for implementing this type dev keyword is like this we can use the typedef keyword just like that and then we could um specify the existing names of data types or data type data type okay and then of course right after that is the alias user given name so again we're going to use the type dev keyword and then of course the existing names of data types so there are like int signed in unsigned char and other permitted data types inside our c program and then of course we're going to add the user given name which is uh the custom name that we want to name this particular um existing name data type so this is going to make sense later on if you try to implement this inside rc program so for now just think of this as the syntax of defining or how to name our existing data types so type def and then existing names of of data type and then alias or the user given name so we could um add here a sample snippet so like this type def okay and then sign long okay and we're going to give this um user given name as s long okay so basically guys if you have or if you are trying to define sign long um data type so it's going to be uh complicated or like it's going to have a long name because you can do it like this sign long and then say for example var variable 1 and then sign long var2 signed long var 3 and so on so as you can see the name of this particular variable or the data type has like signed and then long keyword so it's going to take up more space take more uh we're going to type more text inside our program instead of just using it like this so all we have to do is define it like type def and then sign long and then as long and then we could implement this said of like that we could implement that by using something s long and then g okay so basically what we're doing here is that we're we're just getting this alias from there and then um it's going to include all the data types or existing names of data type here so the s long is associated with this right here so work we can declare or yeah create a variable with the signed long data type something like that and then of course we could add a variable just like this it will allow us to create two variables name g and d which will be of type signed long and this quality of cyan long is getting detected from s long okay which already defined the meaning of islam or as long in your program which is this particular meaning signed long okay and right after that we could make this or the concept of type type def can be implemented for defining a user defined data type with a specific name and type and this type def can also be used with structure um of c language and of course we already have um tackle demonstrated how we can use strap insider c program so basically what we could do here as i've said we could add or use this a keyword type def in our structure so the syntax is like this all we have to do is type in type def and then struct then say for example student so this particular struct is named a student and then it has like the members of this truck is of type char and then say for example s name which is the name of the student okay and then we could say here in s h okay so this particular strat saved um a data which is the name and the age of the student and of course we could add an alias store struck so for example stood okay so just like that and then of course we could use this truck inside our main so for now let's get rid of this so what we could do here is we could say stood and then st something like that and then we can see here printf and then enter student details okay you could add a new line here see me collin and then we could copy and paste this you can see here enter student name and we're going to add a tab slash t and then we could what we could do here is use the scanf function so percent s and then we're going to be passing the st that last name so all we're doing here is just assigning a value of this sds name coming from our user okay and then second line or the second information that we need is all about the age of the student so enter the age okay so we should add backslash n right here to add a new line okay so what we could do here is scan f and then percent d okay and then we could say here st dot h okay and then printf um just like this backslash n for a new line and then we can say here input done okay of course we could display this if we want to you know to get all the information that we have entered the name and the age of the student okay but for now let's let's ju uh let's just try this build and run our program okay so we have here the output enters student details so the first name or the the first option will be the name so we can say here john and then the second option is the age so enter the age of the student so for example the age of the student is and then yeah we need to add um it says here that the main.xc has stopped working we need to add the um ampersand here and then build and run our program once again so i hope this would this would work right now so john and then the age of the student will be 18. so input done okay so basically guys we could um define our struck with the use of type def um keyword just like this and as a as you can see here we define our um stud alias right here and then we use that stud alias right here to name our variable st and then from that our sd we could access the members by using the dot symbol so st that and then the members of our struck student okay and in this video guys we're going to discuss what is file handling in c and then i'm going to give you a basic example we're going to create a program on how to handle files inside our c program so basically guys c files input or output functions handle data on our secondary storage devices such as our hard disk and c can handle files as stream oriented data or system oriented data or binary files so again guys we're going to focus on this so the first one will be stream oriented data files and the second one will be system oriented data files okay so when we say stream oriented data files the data is the data is stored in the same manner as it appears on the screen okay so i i hope you can see that the input output operations like buffering data conversions take place automatically while system oriented data files the data files are more closely associated with the operating system and data stored in memory without converting into text format so this is going to make sense later on when we try to implement our very simple file handling insider c program now there are five major operations that can be performed on files so this will be again i'm just going to list it listed here just for you to see because i think it would be much clearer if you can see all the details all the things that i'm talking here so c file operations so first one will be creation of a new file the second will be opening the third one will be reading the fourth yeah fourth one will be writing data you know file and last will be closing a file so these are the five major file operations the first one is great again creation the second is opening so we could open an existing file and then we could read the contents and then write data into a file so for example in your program you want to save an information so you could write data into a file okay and then of course whenever we are opening a file we need to close it after using it inside our program okay so the steps there will be steps for us to set up the file operations so these are the steps for processing a file so number one will be declare a file pointer so this is important so we need to declare a file pointer variable and then this will be our variable that we were going to use whenever we want to work with our files and then after that one we need to open a file using f open method or function okay so after that we're going to process this will be number three process the file using the suitable function right here and number four will be closing close the file using f close function also so if we want to work with files inside our c program we want or we we might want to check this steps for processing our files so we need to declare a file pointer variable and then we're going to open the file using the f open function right here and then process the file using the suitable function so for example we want to iterate through the lines inside the file if you want to save or maybe write information into the file you can do that here in step three meaning you could process the entire content of that particular file and then right after processing maybe uh you need to close the file or not maybe you must close the file after closing or after processing it inside our c program so basically guys there are a lot of functions that we could use when when we say um we're processing a file so to handle files in c um file input or output functions available in the stdio library are the following so i'm just gonna list it also here for you to see so we also we already discussed the the the two functions the first one will be f open and the second one be uh the second one will be f close there are also uh functions such as get c which means um we read a character from a file and then we also have put c so this function put c writes a character into a file and then also we have get w which means we need to read an integer from a file and then we also have put w so write an integer and we're going to use this later on this particular functions okay so you need to be familiar with this again if you want to read characters from a file you need to use this get c and then if you want to write character into a file you you need to use put c and get w gets the integer and put w write an integer into a file and then we also have f printf so f printf prints formatted output into a file and we also have f scanf so reads formatted input from a file we also have f gets right here so f gets a read string of characters from a file and we also have the next one will be f puts and then uh the last one is f e o f so f puts right string of characters into a file and then we also have f eof so it will detects end of file marker in a single file okay now as a sort of example we're going to implement a simple opening in closing of a file and maybe writing a specific text or something into our file so we're going to do that right here so at first we need to remember the the the steps for processing a file we need to declare a file pointer so in order for us to do that we're going to have to follow this syntax right here i'm just going to copy and paste it here file open so as i've said we're going to use this function f open and these are the possible parameters that you could use okay so to put it simply we could use this we could declare a pointer variable so f p and then semicolon and then we're going to use that pointer variable and then use the f open function right here and then uh we could say here filename dot txt and then another uh parameter and then we're going to use here w so w means that the file is being opened for writing and if the file does not exist then uh there will be new file created okay so um let's just return zero for now okay after that we could close our file okay if we open the file we can also close this so what we what we need is to use the f close function and then pass in the pointer variable which is fp right here okay and right after opening the file and before closing the file this is where the processing of the pile uh processing of the file happens processing of the files right here process end of processing okay so inside of processing we could just simply if you remember we have different functions so get c put c uh f printf so we're going to use this so for now let's just say uh f printf okay then open and close and then semicolon and inside here we could specify the pointer variable which is fp and then of course percent s percent s where is it percent s there you go and then hello world where okay hello world there you go so after this we could save our file and then build and run okay so for now we're getting process return zero it means that the execution of the program is successful so we're going or we're trying uh we're going to try to open the file that we have created and as you can see here i have my project right here from documents code blocks projects and then programming knowledge and then if we try to open this we can see the text hello world okay so there you have it on how you can write files or write lines of strings into our file by using this simple program right here and i think that's all there is to it in this video in the next tutorial we're going to read text inside our files and then display it in our maybe console or we want to if we want to process the contents of the file insider c program in this video guys we're going to continue working and discussing file handling in c programming so from the previous tutorial so actually this is part two of the file handling video tutorial and in the previous tutorial we discussed the basics of file handling and also discuss the five major operations that can be performed on a file so for example the creation as the first operation and then opening reading writing and closing a file and also we discuss the steps for processing a file so basically if you want to handle files inside your c program you need to declare a file pointer variable as the first step and then the second step will be opening a file using the f open function and then right after that one process the file so for example you want to count the number of lines inside of that particular file or you want to add something to that file you can do that so that's the processes or processing of the file and then of course closing the file using the f close function and from the previous tutorial also we briefly uh discussed the different functions that we could use when we are handling files in c so for example the get c the put c um get w and put w and the other functions so in this video guys i'm just going to show you how you can uh read the content of a file and display it in your simple program so we're just going to use this main function right here so i have here the main.c um file and yeah main.ca file and then we're just going to use this main function right here just to get the contents of our file so as you can probably remember from the previous tutorial we already created the file inside our file system and let me show you that okay so i have here the file and then file name that text and it contains the text hello world as you can see here so this is written from our c program and in this video we're going to read this by using also our c program so in order for us to again if we want to handle files in rc the first step is to declare a pointer variable so the pointer variable goes like this so we need to call on this file class and then add the semicolon i mean the asterisk or star symbol as you can see here and then of course the name of your variable so i'm just going to name it filename and then semicolon at the end so this is our pointer variable as i've said this is the first step for handling files in c we have to declare a pointer variable and then uh the next step since we're getting the content of a file i just want to assign the content of a file into a single variable so for example i'm just going to declare here another variable car or char ch or the name of the variable is ch and then i'm just going to assume the length um 100 there you go and then semicolon so basically this particular variable will hold the contents of our file okay next line will be using the file name variable right here which is our pointer variable and then the second step in the process is of course open the file by using f open function we already use this function from the previous video so in here we're just going to specify specified the name of the file which is file name that text as you can see here so that will be file name that txt and then we're gonna use the r symbol okay that's basically um reading the file name or i mean the file coming from our file system and then the next step is of course if we want to print the contents of our file so we're just going to use the printf function right here and then specify the um format specifier percent s because we're going to display um character or strings of character here coming from our file and then comma and then we discuss the function in the previous tutorial f gets f gets okay so basically this function um string of characters from a file and this particular function takes uh a few parameters so for example we're just gonna um specify the parameters here so for example the variable ch that's the variable that will hold the contents of our file and then so for example 50 this is the count of characters that we're going to allow to be saved in our um char ch variable and then of course the file name okay and as always if you are working with file since we're opening the file here we need to use also the closing function which is f plus right here and then we're going to specify the file name right here okay so for example the file name and that's about it and we can run our program right now let's just save this and build and run so it's going to output hello world so for example just to show you a basic example let's just fill out our file in the world this is a string from a file so we're just going to test this so save and let's run again our program okay so as you can see here hello world comma and then this is a string coming from a file as you can see here so basically we successfully um read or get the contents of our file filename.txt file okay so now there are other operations that you may want to do in your file so for example you want to like count the number of lines that's possible again this particular symbol right here is uh like opening a file in a read mode okay so r that's basically what we use here so as i've said there are also other functions that we could use when trying to handle files in our c program and of course f gets is one of them but there are also so for example we have um get c so this reads a character from a file okay we also have um get w so this will be for reading an integer and we also have um f gets that's what we used here so f gets reads string um string of characters from a file okay and then of course there are other functions that you could use to write this is right ping into the file so we have put c um put w so basically put c writes a character a file and then put w write an integer to a file and then we have f print f for writing and we also have um f puts okay to write string of characters into a certain file so i hope you understand the basics of handling files in c and in this video we're going to be learning enumeration or enum in c so enumeration or enum is a user define or userdefined data type that we can use inside rc program so it works like almost the same with strap so as you can probably remember from our previous tutorials we already discussed and um strut inside our c program so as i've said in this video we're going to be learning enumeration so that's that's where our focus should be enumeration so enumeration is mainly used to assign names to integral constants and these names make program is easy to read and maintain so i'm going to be showing you a graphic right here on how we can declare instantiate and operate with enumeration insider c program so basically guys this is how we can um declare the enumeration right here so declaration we have this keyword enum and then the name of our enum variable so in this case days of wick okay and then we have different states we have seven different states here that starts from the value zero the second will be one and the last one will be six so um all of this states these are called enumerators so this is just the list of constants separated by commas so this will help us to make our program easy to read and maintain because all of these enumerators are already already listed here so we know what values to get what values to assign to a certain variable if we want to use this inside our c program now after that declaration we do have this insensation so in in sensation part we have also the name or the keyword enum right here and then of course the enum variable that we have declared on tab say for example this one days of week as you can see here and then of course we need to assign an object of enum days of week so basically guys this day is just an object of our days of week in um as you can see okay and then right after that instantiation we can now use that in enumeration or enum um here in operation so for example you want to like assign a value to our object so they equals and then the value of our enum that we want to use so for example this one in this case we specify that it should be wednesday right here okay so we could assign the value just like that now we can use this insider c program as i've said because we're dealing with enumeration or enominc so we can use our ide to create our simple program implementing the enumeration or enum in c so for example we want to like implement the days of a week so as i've said in our declaration we can use the enum keyword right here by the way guys you can declare enum locally you can declare enum locally or inside a function right here or you can do it here before our main function globally declare our enum okay so for example we want to do this globally so our keyword enum right here and then the name of our for example in this declaration we have the enum keyword and then the name of our variable so days of week so for example in our case we're just going to use the weak variable name and then inside here we can declare inside the curly braces so make sure you use curly braces and then semicolon at the end of this particular line to to signifi signify that it is the end of this particular line so inside here we can declare for example for monday tuesday wednesday thursday uh friday saturday and sunday so that's how we can declare our enum variable again you have to use the enum keyword and then the name of our enum which is in our case here week and then open and close curly braces and you can declare the enumerators here and of course you have to specify the semicolon at the end of this particular line now in using this particular enum we can do it here inside our main function so we can again i use the enum keyword and then our name of our enum which is weak as you can see here so take note of that that we use the enum keyword and then the name of our enum and we can assign an object to this for example they okay so that's how you can specify our enum object so enum keyword the name of our enum and then an object of our enum which is they so for example you want to assign a value to this so they equals for example wednesday so you can just use wed and just three letters if you want but anyway you can use also the full um names of your constants but in our case we're just gonna use the three letters to have like a uniform constant names okay so here we can use so for example wednesday and then of course you can print this you can specify the percent the here and of course the object of our enum okay so let's try to run this and see how our uh what the output of our program so as you can see here we're getting two the value of our object is two because as you can see um our enumerators or the state of our numerator starts from zero so zero one and two so that's why we're getting the value of our object here as two but if we wanna change this for example sun for sunday then run on build our program so the output will be six so by default guys um the value of our enumerators will be if we we did not assign a value to our enumerators the default value of this will be zero this one will be one this will be two as you can see if we try to hover over our mouse here in our constant so we're getting two um this is obviously three but we're not getting the um like the hover over display four this is five and this is six so that's how our state is being initialized by the compiler so it is getting like the uh getting default values 0 until to the last state minus one of our enumerators okay so if we try to initialize our states for example we want to make this one we could do that so monday will be one tuesday is two wednesday is three um thursday is four friday will be five saturday will be six and sunday will be seven so remember earlier we are getting two coming from wednesday because that's the default state of our constant wednesday but if we try to assign the value to our enum object here into wednesday let's try to see the output okay so instead of 2 now we're getting the value 3 because we initialize already our variable and it's not assigning a default value to our states now here's an interesting facts about initialization of enum so if there are like two enum names we can declare same value for example you want to declare value for monday tuesday we can like make this value one and one so it doesn't matter for this particular example because this is um allowed in c programming so we can have two uh enum names with the same value okay so for example we can comment this one out and we can try to display the value of our constant so percent percent d instead of day we can use monday and um tuesday there you go so bill and runner program and we're getting this error right here okay we're getting that output because we have specified our pdf statement like this but if we wanna have uh we want to display the correct value then we're going to use this percent the percent d and then comma in between and then we're just gonna um specify the two variable monday tuesday and click and build and run our program and as you can see here we're getting values one and one so that's one of the interesting fact about declaring our inum variable we can use the same state or the same value for our constant so it doesn't matter in c that's because it is allowable in c okay
