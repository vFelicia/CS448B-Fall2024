With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we are going to
00:07 - discuss about morphological
00:09 - transformations in open CV so we will
00:13 - discuss different morphological
00:15 - operations like erosion dilation opening
00:19 - and closing methods etc but first of all
00:23 - what are morphological transformations
00:27 - so morphological transformations are
00:30 - some simple operations based on the
00:34 - image shape now morphological
00:37 - transformation is normally performed on
00:40 - a binary image and when we perform
00:44 - morphological transformation there are
00:47 - two things which are required first is
00:50 - the original image and second is called
00:53 - a structuring element or a kernel which
00:57 - decides the nature of the operation now
01:02 - there are different type of
01:03 - morphological transformations and we are
01:06 - going to see them one by one now to
01:09 - start with I have this simple code which
01:11 - reads the image using open CV I am read
01:15 - method and we are just loading or
01:19 - showing this image using matplotlib now
01:22 - if you are unfamiliar with matplotlib
01:24 - and how to use matplotlib to show images
01:28 - in the last video I have explained this
01:31 - topic in details so if you want to see
01:35 - that video about matplotlib you can see
01:39 - it and this is the code I have used in
01:42 - the last video also and and I have
01:44 - explained this code in details in the
01:47 - last video so if you are confused what
01:51 - this code is doing just see the last
01:54 - video now there is one important thing
01:56 - to notice here is I am reading this
02:00 - image in a grayscale mode okay so either
02:04 - you can provide here as the second
02:07 - argument of I am read CV 2 dot I am read
02:10 - underscore grayscale or you can provide
02:13 - simply zero here in order to read this
02:16 - image in grayscale so let's run this
02:18 - code and let's see what it does so as
02:21 - expected it's just opening the image in
02:25 - the grayscale mode using matplotlib now
02:30 - as I said normally we perform the
02:33 - morphological transformations on the
02:36 - binary images so that's why we need to
02:39 - provide a mask to our image using the
02:43 - simple thresholding so let's just do
02:46 - that
02:47 - so I'm going to just write underscore
02:50 - comma the mask so I'm going to name my
02:54 - variable as mask here and then I'm going
02:58 - to just write cb2 dot threshold and this
03:02 - threshold take few argument as you might
03:05 - already guess first is the image itself
03:09 - second argument is the value of the
03:11 - threshold so for now I'm going to just
03:14 - provide the threshold of 220 here the
03:18 - maximum value of threshold will be 255
03:22 - then the next argument here is the type
03:26 - of the threshold so we are going to
03:28 - provide C v2 dot thrash binary inverse
03:33 - so this is our mask so let's load the
03:37 - mask in the matplotlib window so I'm
03:41 - going to just provide in this titles
03:43 - array one more title which is mask and
03:48 - then we are going to see how this image
03:52 - looks like after the mask okay and here
03:56 - the range I'm going to increase it to
03:58 - two because now the array is of two
04:01 - elements and the subplot is also let's
04:05 - say 1 by 2 so we want to show two images
04:09 - and I'm going to just run this code and
04:11 - you can see this was the image which was
04:15 - a grayscale image and the second image
04:17 - is the masked image now if you see this
04:22 - image carefully let me just just
04:25 - increase the size of this
04:27 - and if you see this image carefully
04:30 - after masking there are some black dots
04:35 - here on the balls and let's say we want
04:39 - to remove these dots which are there in
04:43 - between this white area this black dot
04:46 - or this black dot or you can see some
04:49 - black dots are there inside your ball in
04:54 - the bite area and we want to remove
04:57 - these dots from the balls for this we
05:01 - are going to use the dilation
05:05 - transformation so first of all what we
05:08 - are going to do is we are going to just
05:10 - write dilation which will be our
05:14 - variable name and then we are going to
05:17 - use this method called CB to dot dilate
05:23 - okay so this method uses the source
05:28 - which is mask in our case and then the
05:34 - second thing is the kernel okay so let
05:38 - me explain what the kernel is so a
05:41 - kernel is normally a square or some
05:45 - shape which we want to apply on the
05:49 - image so we are going to define a kernel
05:52 - of numpy once which means we want to
05:56 - apply white square on our balls so you
06:01 - can see when we run our code once again
06:04 - it shows us error because this kernel is
06:07 - undefined so let me define this kernel
06:10 - first of all so I'm going to just say
06:12 - kernel is equal to and P dot once and
06:17 - then we are going to define the shape of
06:22 - this kernel let's say this is of 2 comma
06:26 - 2 size and then we will just say NP dot
06:31 - u int 8 so this is our colonel and
06:35 - colonel in this case is nothing but a
06:38 - 2x2 square
06:41 - sheep and this square shape kernel is
06:44 - going to be applied on our image
06:48 - wherever these black dots are there so
06:51 - now we have defined this kernel so let's
06:54 - see after this kernel is applied on our
06:58 - masked image how it looks like so I'm
07:02 - going to just add one more title here
07:05 - which is dilation and then I'm going to
07:08 - add the image after the dilation is
07:11 - applied on our image and then we are
07:16 - just going to increase the range to
07:18 - three because now we have three images
07:20 - and let's say this plot contains images
07:25 - one by three so one row and three
07:29 - columns right so I'm going to just run
07:32 - this code once again and now you can see
07:35 - all these three images first was the
07:38 - original image second is the masked
07:41 - image and the third one is the image
07:44 - which we got after we applied the
07:48 - dilation let me just increase the size
07:51 - of this image somehow so now you can see
07:55 - that for example here there was a black
08:00 - dot and now it's reduced right the size
08:04 - of this black dot is reduced here also
08:07 - there was a black dot but its size also
08:10 - is reduced but still we can see these
08:14 - black dots here right so how we can
08:17 - remove these black dots completely so
08:21 - there is a third parameter which we can
08:25 - provide to this dilate method it's
08:28 - called iteration so number of iterations
08:32 - so we can just provide iterations is
08:35 - equal to whatever the number of times we
08:39 - want to perform dilation on our image by
08:42 - default it's 1 and you can provide let's
08:46 - say 2 here and let's see what is the
08:49 - result now so I'm going to just run this
08:51 - code again and now you can see
08:55 - those black dots which we can see here
08:58 - on the masked image are now gradually
09:02 - gone but still I can see some little
09:07 - dots on the images the small dots are
09:10 - already gone right so now what we can do
09:15 - here is we can increase the size of the
09:17 - rectangle so this rectangle is applied
09:20 - to our area which have these spots so we
09:26 - can increase the size of the rectangle
09:30 - and the bigger the rectangle is the
09:34 - better the result will be but there will
09:37 - be a problem which I'm going to show you
09:39 - so let's run this code and you can see
09:42 - now all the black dots from our image is
09:48 - gone so there was a black dot here which
09:51 - you don't see anymore and there was a
09:54 - black dot here here here and here and we
09:58 - don't see these black dots here but you
10:01 - might also observe that the size of this
10:06 - white area is also increased after we
10:10 - applied the dilation on this masked
10:14 - image so now this ball and this ball in
10:17 - the result after the dilation is merging
10:21 - here right so you can see it's merging
10:24 - because the size of our kernel is a big
10:27 - and when we apply dilation the pixel
10:30 - element is one if at least one pixel
10:34 - under the kernel is one that's why the
10:37 - shape of these balls are increasing so
10:42 - let's see how our next morphological
10:45 - transformation works which is called
10:47 - erosion and after that I'm going to
10:50 - explain you how this erosion works and
10:54 - what is erosion so I'm going to just
10:56 - declare a variable called erosion and
10:58 - I'm going to just call a method called C
11:01 - v2 dot erode so the method name is a
11:06 - road and the first argument here is the
11:09 - source
11:10 - the second argument here is the kernel
11:13 - as we have seen in dilate method and the
11:17 - third argument is the optional argument
11:19 - which is the iterations so for now we
11:24 - just apply one iteration which is by
11:28 - default also one and now we are going to
11:31 - just add this image to our matplotlib
11:34 - window so I'm going to add the title and
11:38 - the image and now I will increase the
11:41 - range of the array to four and let's say
11:44 - now we want two by two matrix of these
11:50 - images right so let's run this code and
11:53 - let's see what happens so now you can
11:56 - see four results here and first was the
12:02 - original image second was the masked
12:04 - image third was the dilation so all the
12:08 - spots in the balls which are black are
12:12 - gone
12:13 - using the dilation but the size was
12:16 - increased and using the erosion you can
12:21 - see the sides of the ball eroded so the
12:26 - basic idea of erosion is just like soil
12:30 - erosion
12:31 - it erodes away the boundary of the
12:34 - foreground object so when this erosion
12:38 - is applied the kernel which we have
12:40 - defined slides through all the image and
12:44 - a pixel in the original image either 1
12:49 - or 0 will be considered as 1 only if all
12:53 - the pixels under the kernel is 1
12:56 - otherwise it is eroded and this means
13:00 - this value will be set to 0 which means
13:03 - this will be a black area so let's
13:07 - increase the number of iterations here
13:10 - so let's say we want to
13:12 - like the erosion two times on the same
13:16 - image and I'm going to just run this
13:19 - code once again and you can see now
13:22 - these balls are eroded more let's say we
13:26 - want to increase this to five times and
13:29 - then run the code and you can see now
13:32 - these balls are really small because we
13:35 - have applied this erosion multiple
13:38 - number of times so let's say this is one
13:42 - once again and let's make this size of
13:47 - our kernel small two-by-two rectangle
13:50 - size right so you can see now our result
13:53 - is better because all the spots from
13:57 - these balls are gone and these balls are
14:00 - not so much eroded now there are two
14:04 - more morphological transformation
14:06 - methods which are called opening and
14:08 - closing so we are going to first of all
14:11 - see how opening works I'm going to
14:14 - define a variable called opening and
14:17 - then I will call CB to dot more for logy
14:23 - X okay and then we will provide the
14:27 - source which is mask the second method
14:30 - is the type of morphological operation
14:34 - which we want to perform so in this we
14:38 - are going to just call C v2 dot and then
14:41 - we can specify which type of
14:43 - morphological operation we want to
14:46 - perform on the image so just right morph
14:49 - and then the type of operation so we
14:53 - want to perform the morph open for the
14:56 - opening right and then the third
14:59 - argument here is the kernel which we
15:01 - have defined and now we are going to
15:04 - just add this opening to our matplotlib
15:10 - window let's add this and then let's do
15:15 - five here and then let's say our my plot
15:20 - lab is going to show these images in two
15:23 - by three format
15:25 - so let's run this code and let's see
15:28 - what happens and let me increase the
15:30 - size of this image
15:32 - now and this is the result of the
15:37 - opening so what is opening in
15:40 - morphological transformations so opening
15:44 - is just another name of erosion followed
15:47 - by dilation so when you perform this
15:50 - opening morphological operation first of
15:53 - all erosion is performed on the image
15:57 - and then the dilation will be performed
16:00 - on the image so you can see the effect
16:04 - of the erosion followed by the dilation
16:08 - still you see some spots here which can
16:11 - go if you can just increase the size of
16:17 - this block so let's rerun the code let's
16:22 - see what happens so now this image
16:27 - somehow looks better than the older
16:30 - image so opening is the erosion followed
16:34 - by dilation now there is a closing
16:39 - method also which is just the opposite
16:41 - of opening in the closing morphological
16:45 - transformation dilation is performed
16:49 - first on the image and then it is
16:52 - followed by the erosion so let's see if
16:55 - we get the better result when we perform
16:58 - the closing morphological operations and
17:02 - the morphological operation here will be
17:05 - close
17:12 - and run this code and now you can see
17:17 - the result here so in closing as I said
17:20 - first of all that dilation is applied
17:23 - and then the erosion is applied in the
17:27 - opening first of all erosion is applied
17:29 - and then the dilation will be applied
17:32 - now there are different type of
17:34 - morphological operations you can apply
17:37 - using this morphology X so for example
17:41 - I'm going to just use some of them so
17:45 - the main morphological operations other
17:50 - than opening and closing is let's say
17:53 - morphological gradient so I'm going to
17:56 - just say M G form of logical gradient
18:00 - and you just need to change the second
18:04 - argument here so CV to mauve
18:06 - underscore morphological gradient so we
18:11 - are going to just call this morph
18:14 - gradient and it's going to apply the
18:16 - morphological gradient and then the next
18:19 - is the top hat and the black hat so
18:23 - there are different morphological
18:27 - techniques you can apply so I'm going to
18:30 - show you one more and then I will leave
18:33 - you with the other techniques so th for
18:38 - top hat and here also the second
18:41 - argument you just need to change it to
18:43 - top hat
18:44 - right otherwise you can see there are so
18:48 - many number of techniques you can apply
18:51 - on your image so there is gradient close
18:55 - open we have already seen black hat
18:57 - cross dilate ellipse erode hit miss rect
19:04 - and then top hat which is we are going
19:08 - to use right now right and then we can
19:12 - just add these two things to our list of
19:15 - titles and list of images so M G and
19:20 - then we have th for top hat
19:26 - and now we have eight images so range is
19:29 - increased to eight and let's say we just
19:34 - want to show them in two by four matrix
19:39 - here in the matplotlib window so you can
19:46 - see this is the result of morphological
19:49 - gradient so morphological gradient is
19:53 - the difference between the dilation and
19:55 - erosion of an image and this is the
19:59 - result of top-hat that means it is the
20:04 - difference between the image and the
20:05 - opening of an image so this is how you
20:08 - can perform some of the morphological
20:11 - operations on the images now I will show
20:16 - you one more example I have a image
20:19 - called J dot PNG so I'm going to just
20:24 - load this image also and because this J
20:28 - dot PNG is already a binary image I
20:31 - don't need to apply this mask here so
20:34 - instead of this mask I can just directly
20:37 - use our image variable so I'm going to
20:41 - just write this now let's load this
20:43 - image two times because we already have
20:47 - defined this mask variable inside our
20:51 - Titleist and image list and now I'm
20:54 - going to just run this code so the
20:56 - original image of this J dot PNG looks
21:00 - like this and after we applied the
21:05 - dilation you can see the dilation
21:07 - increases the area of this J the erosion
21:12 - just erodes away the corners of this J
21:16 - right opening is going to apply the
21:21 - erosion first followed by the dilation
21:25 - and closing is going to first of all
21:28 - perform the dilation followed by the
21:30 - erosion this morphological gradient is
21:34 - going to give you the difference between
21:37 - the dilation and erosion of the
21:39 - image so it's going to give you this
21:41 - kind of result and you can see the top
21:44 - hat result here which is the difference
21:47 - between the input image and the opening
21:50 - of the image so this is how you can use
21:53 - different type of morphological
21:55 - transformations on your images using
21:59 - open CV I hope you've enjoyed this video
22:01 - and I will see you in the next video
22:12 - you

Cleaned transcript:

hey guys welcome to the next video on open CV tutorial for beginners using Python in this video we are going to discuss about morphological transformations in open CV so we will discuss different morphological operations like erosion dilation opening and closing methods etc but first of all what are morphological transformations so morphological transformations are some simple operations based on the image shape now morphological transformation is normally performed on a binary image and when we perform morphological transformation there are two things which are required first is the original image and second is called a structuring element or a kernel which decides the nature of the operation now there are different type of morphological transformations and we are going to see them one by one now to start with I have this simple code which reads the image using open CV I am read method and we are just loading or showing this image using matplotlib now if you are unfamiliar with matplotlib and how to use matplotlib to show images in the last video I have explained this topic in details so if you want to see that video about matplotlib you can see it and this is the code I have used in the last video also and and I have explained this code in details in the last video so if you are confused what this code is doing just see the last video now there is one important thing to notice here is I am reading this image in a grayscale mode okay so either you can provide here as the second argument of I am read CV 2 dot I am read underscore grayscale or you can provide simply zero here in order to read this image in grayscale so let's run this code and let's see what it does so as expected it's just opening the image in the grayscale mode using matplotlib now as I said normally we perform the morphological transformations on the binary images so that's why we need to provide a mask to our image using the simple thresholding so let's just do that so I'm going to just write underscore comma the mask so I'm going to name my variable as mask here and then I'm going to just write cb2 dot threshold and this threshold take few argument as you might already guess first is the image itself second argument is the value of the threshold so for now I'm going to just provide the threshold of 220 here the maximum value of threshold will be 255 then the next argument here is the type of the threshold so we are going to provide C v2 dot thrash binary inverse so this is our mask so let's load the mask in the matplotlib window so I'm going to just provide in this titles array one more title which is mask and then we are going to see how this image looks like after the mask okay and here the range I'm going to increase it to two because now the array is of two elements and the subplot is also let's say 1 by 2 so we want to show two images and I'm going to just run this code and you can see this was the image which was a grayscale image and the second image is the masked image now if you see this image carefully let me just just increase the size of this and if you see this image carefully after masking there are some black dots here on the balls and let's say we want to remove these dots which are there in between this white area this black dot or this black dot or you can see some black dots are there inside your ball in the bite area and we want to remove these dots from the balls for this we are going to use the dilation transformation so first of all what we are going to do is we are going to just write dilation which will be our variable name and then we are going to use this method called CB to dot dilate okay so this method uses the source which is mask in our case and then the second thing is the kernel okay so let me explain what the kernel is so a kernel is normally a square or some shape which we want to apply on the image so we are going to define a kernel of numpy once which means we want to apply white square on our balls so you can see when we run our code once again it shows us error because this kernel is undefined so let me define this kernel first of all so I'm going to just say kernel is equal to and P dot once and then we are going to define the shape of this kernel let's say this is of 2 comma 2 size and then we will just say NP dot u int 8 so this is our colonel and colonel in this case is nothing but a 2x2 square sheep and this square shape kernel is going to be applied on our image wherever these black dots are there so now we have defined this kernel so let's see after this kernel is applied on our masked image how it looks like so I'm going to just add one more title here which is dilation and then I'm going to add the image after the dilation is applied on our image and then we are just going to increase the range to three because now we have three images and let's say this plot contains images one by three so one row and three columns right so I'm going to just run this code once again and now you can see all these three images first was the original image second is the masked image and the third one is the image which we got after we applied the dilation let me just increase the size of this image somehow so now you can see that for example here there was a black dot and now it's reduced right the size of this black dot is reduced here also there was a black dot but its size also is reduced but still we can see these black dots here right so how we can remove these black dots completely so there is a third parameter which we can provide to this dilate method it's called iteration so number of iterations so we can just provide iterations is equal to whatever the number of times we want to perform dilation on our image by default it's 1 and you can provide let's say 2 here and let's see what is the result now so I'm going to just run this code again and now you can see those black dots which we can see here on the masked image are now gradually gone but still I can see some little dots on the images the small dots are already gone right so now what we can do here is we can increase the size of the rectangle so this rectangle is applied to our area which have these spots so we can increase the size of the rectangle and the bigger the rectangle is the better the result will be but there will be a problem which I'm going to show you so let's run this code and you can see now all the black dots from our image is gone so there was a black dot here which you don't see anymore and there was a black dot here here here and here and we don't see these black dots here but you might also observe that the size of this white area is also increased after we applied the dilation on this masked image so now this ball and this ball in the result after the dilation is merging here right so you can see it's merging because the size of our kernel is a big and when we apply dilation the pixel element is one if at least one pixel under the kernel is one that's why the shape of these balls are increasing so let's see how our next morphological transformation works which is called erosion and after that I'm going to explain you how this erosion works and what is erosion so I'm going to just declare a variable called erosion and I'm going to just call a method called C v2 dot erode so the method name is a road and the first argument here is the source the second argument here is the kernel as we have seen in dilate method and the third argument is the optional argument which is the iterations so for now we just apply one iteration which is by default also one and now we are going to just add this image to our matplotlib window so I'm going to add the title and the image and now I will increase the range of the array to four and let's say now we want two by two matrix of these images right so let's run this code and let's see what happens so now you can see four results here and first was the original image second was the masked image third was the dilation so all the spots in the balls which are black are gone using the dilation but the size was increased and using the erosion you can see the sides of the ball eroded so the basic idea of erosion is just like soil erosion it erodes away the boundary of the foreground object so when this erosion is applied the kernel which we have defined slides through all the image and a pixel in the original image either 1 or 0 will be considered as 1 only if all the pixels under the kernel is 1 otherwise it is eroded and this means this value will be set to 0 which means this will be a black area so let's increase the number of iterations here so let's say we want to like the erosion two times on the same image and I'm going to just run this code once again and you can see now these balls are eroded more let's say we want to increase this to five times and then run the code and you can see now these balls are really small because we have applied this erosion multiple number of times so let's say this is one once again and let's make this size of our kernel small twobytwo rectangle size right so you can see now our result is better because all the spots from these balls are gone and these balls are not so much eroded now there are two more morphological transformation methods which are called opening and closing so we are going to first of all see how opening works I'm going to define a variable called opening and then I will call CB to dot more for logy X okay and then we will provide the source which is mask the second method is the type of morphological operation which we want to perform so in this we are going to just call C v2 dot and then we can specify which type of morphological operation we want to perform on the image so just right morph and then the type of operation so we want to perform the morph open for the opening right and then the third argument here is the kernel which we have defined and now we are going to just add this opening to our matplotlib window let's add this and then let's do five here and then let's say our my plot lab is going to show these images in two by three format so let's run this code and let's see what happens and let me increase the size of this image now and this is the result of the opening so what is opening in morphological transformations so opening is just another name of erosion followed by dilation so when you perform this opening morphological operation first of all erosion is performed on the image and then the dilation will be performed on the image so you can see the effect of the erosion followed by the dilation still you see some spots here which can go if you can just increase the size of this block so let's rerun the code let's see what happens so now this image somehow looks better than the older image so opening is the erosion followed by dilation now there is a closing method also which is just the opposite of opening in the closing morphological transformation dilation is performed first on the image and then it is followed by the erosion so let's see if we get the better result when we perform the closing morphological operations and the morphological operation here will be close and run this code and now you can see the result here so in closing as I said first of all that dilation is applied and then the erosion is applied in the opening first of all erosion is applied and then the dilation will be applied now there are different type of morphological operations you can apply using this morphology X so for example I'm going to just use some of them so the main morphological operations other than opening and closing is let's say morphological gradient so I'm going to just say M G form of logical gradient and you just need to change the second argument here so CV to mauve underscore morphological gradient so we are going to just call this morph gradient and it's going to apply the morphological gradient and then the next is the top hat and the black hat so there are different morphological techniques you can apply so I'm going to show you one more and then I will leave you with the other techniques so th for top hat and here also the second argument you just need to change it to top hat right otherwise you can see there are so many number of techniques you can apply on your image so there is gradient close open we have already seen black hat cross dilate ellipse erode hit miss rect and then top hat which is we are going to use right now right and then we can just add these two things to our list of titles and list of images so M G and then we have th for top hat and now we have eight images so range is increased to eight and let's say we just want to show them in two by four matrix here in the matplotlib window so you can see this is the result of morphological gradient so morphological gradient is the difference between the dilation and erosion of an image and this is the result of tophat that means it is the difference between the image and the opening of an image so this is how you can perform some of the morphological operations on the images now I will show you one more example I have a image called J dot PNG so I'm going to just load this image also and because this J dot PNG is already a binary image I don't need to apply this mask here so instead of this mask I can just directly use our image variable so I'm going to just write this now let's load this image two times because we already have defined this mask variable inside our Titleist and image list and now I'm going to just run this code so the original image of this J dot PNG looks like this and after we applied the dilation you can see the dilation increases the area of this J the erosion just erodes away the corners of this J right opening is going to apply the erosion first followed by the dilation and closing is going to first of all perform the dilation followed by the erosion this morphological gradient is going to give you the difference between the dilation and erosion of the image so it's going to give you this kind of result and you can see the top hat result here which is the difference between the input image and the opening of the image so this is how you can use different type of morphological transformations on your images using open CV I hope you've enjoyed this video and I will see you in the next video you
