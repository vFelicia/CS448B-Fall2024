With timestamps:

00:07 - hey everyone in the last video we made
00:09 - the snake game it comprised of various
00:11 - modules by pie game this time we would
00:13 - make the tic-tac-toe
00:15 - it would be a little bit more complex
00:17 - than the snake game but don't worry if
00:19 - you're clear with the basic modules of
00:20 - fire game you won't have a problem
00:22 - dealing with this
00:24 - let me discuss what all functionalities
00:26 - we need to put in to make this
00:28 - tic-tac-toe so you need to draw a board
00:31 - right
00:32 - you know tic-tac-toe is played on a 3x3
00:35 - grid so for that you need to draw that
00:38 - board
00:39 - you also need to get the images loaded
00:41 - what images i'm talking about i'm
00:43 - talking about x and o symbols we won't
00:45 - be sketching anything manually
00:47 - we would just be rendering the images of
00:49 - x and o symbols at the place we want to
00:51 - we would also need to print the results
00:53 - on the screen
00:54 - we would also need to check which row or
00:57 - column has similar
00:59 - symbols so that we can strike that out
01:01 - and
01:02 - declare a win okay we would also need to
01:05 - declare a function where we can get the
01:07 - coordinates
01:08 - of our mouse click
01:10 - and put our picture over there paste our
01:12 - picture over there so to get all this i
01:15 - have defined five functions
01:17 - and we would put them together to make
01:19 - this detector cool so what the five
01:22 - functions are we would draw the board
01:24 - one
01:25 - we would get the results printed two we
01:27 - would check the winning cases we would
01:29 - check all the rows and columns if there
01:31 - is a win
01:33 - we would also need to get the
01:34 - coordinates of the mouse click we would
01:36 - use the mouse module that's a new thing
01:38 - for you and we would put the pictures at
01:41 - these coordinates that would be the
01:42 - measure engineering part cool let's get
01:44 - to the code
01:46 - so i'd be importing pi game initializing
01:49 - it then i'd be declaring some basic
01:51 - variables
01:52 - okay so don't worry if you don't
01:54 - understand their
01:56 - purpose
01:57 - you will understand it once we start
01:59 - manipulating them in the code further
02:01 - cool so i have this xo it would hold the
02:04 - current value
02:06 - of the symbol whatever symbol we are
02:08 - working
02:09 - on whoever whose ever turn it is okay
02:12 - then we have a winner it would store the
02:15 - winner x or o and declare and print the
02:18 - message
02:19 - then we have draw it is initialized to
02:21 - none right now but if it is a draw it
02:24 - would be
02:25 - true okay it's a boolean basically then
02:28 - i have this board it's initialized as a
02:31 - 2d matrix with no values none values
02:34 - and it's a base
02:36 - matrix basically
02:38 - of 3 cross 3
02:40 - of size 3 cross 3 then we have this
02:42 - clock
02:43 - object
02:44 - and then i have the screen
02:47 - then i have set the caption
02:49 - then i have rendered the images i have
02:52 - this in the tic-tac-toe files so
02:54 - accordingly i have
02:56 - mentioned the path okay
02:59 - then i have scaled the images because
03:02 - i want them in a block okay we have this
03:04 - nine these nine blocks and i want it in
03:07 - the
03:08 - same shape okay
03:10 - i want it in the same size basically of
03:12 - the block
03:14 - okay then we have our first function the
03:16 - draw grid we would be drawing the board
03:18 - with lines i'll fill the screen with
03:20 - some color
03:21 - then i have drawn the lines i would need
03:23 - two two vertical and two horizontal
03:25 - lines i hope you can get that because i
03:28 - need to draw
03:29 - three parts okay
03:32 - so i'll be drawing the vertical lines
03:33 - first so i have used the line function
03:36 - by draw module
03:37 - the screen is the surface i would need
03:40 - to
03:40 - make this
03:42 - make this lines on then i have given the
03:44 - color of the line then i have the start
03:46 - and the end positions okay so the start
03:49 - and
03:50 - end positions need to be visualized by
03:52 - you uh just like you would visualize a
03:54 - point on a coordinate axis
03:56 - okay so 400 by 3 comma 0 would be a
03:59 - point on the x axis right
04:01 - so 400 by 3 by 400 by 3 it's because i
04:05 - am making three parts of
04:07 - the complete board and what is the
04:08 - length of my uh
04:10 - screen that is 400 and by 3 gives you
04:14 - the one one third part of it okay
04:16 - similarly 400 by 3 comma 400 gives you
04:19 - the last point okay
04:22 - on the x axis but at the bottom cool and
04:25 - 6 is the size of the line similarly for
04:28 - the second line i've multiplied the same
04:29 - thing by two so that
04:31 - is just
04:33 - an interval ahead of the previous line
04:35 - okay
04:36 - i hope that makes sense to you then to
04:38 - draw the horizontal lines i have just
04:40 - flipped the coordinates because now i'd
04:43 - be taking coordinates on the y-axis just
04:45 - like i took coordinates on the x-axis to
04:48 - draw the vertical line i take points on
04:50 - the y-axis to draw the horizontal lines
04:53 - okay it should not
04:54 - be problematic at all if you can
04:57 - visualize a coordinate plane cool
05:00 - then i'd be
05:01 - defining the result function
05:04 - just for printing the result on the
05:05 - screen so i have made the draw and
05:08 - winner variables global
05:11 - so that i can work with the same
05:12 - variables throughout
05:14 - now if i have a winner x or o a message
05:16 - would be printed like i would have a
05:18 - message that would be a string and that
05:21 - would would be the winner's name and one
05:24 - okay similarly if draw is true my
05:26 - message would be game draw
05:28 - now just like we would display a simple
05:30 - text on the screen i have done that i
05:33 - want my message to be rendered on the
05:35 - screen to be displayed on the screen
05:37 - it's the same code that we used in the
05:40 - display text nothing is different
05:42 - then i have the spin cases function to
05:45 - check if all the symbols along a row or
05:47 - column are same okay we would check it
05:49 - nine times right after every
05:52 - image is rendered okay
05:54 - now just as i said we would check along
05:56 - all the rows the columns and diagonals
05:59 - so to take a longer row we would run a
06:02 - for loop so that we can change
06:04 - the value of the row zero one and two
06:07 - and we would check if all the symbols
06:09 - along that row are same
06:11 - that's what the if condition does and
06:13 - the element we are checking should not
06:15 - be none okay if it's not so and all the
06:19 - symbols are same then we would anna we
06:21 - would assign the winner to be that
06:24 - element okay and we would draw a line
06:27 - across that
06:28 - row
06:29 - how we would do that
06:31 - we would use the line function from the
06:34 - draw module
06:35 - and since we want to draw a horizontal
06:37 - line
06:39 - please know that we would need to take
06:42 - coordinates of the y axis so we have the
06:44 - start point to be 0 comma row plus 1
06:47 - into 400 by 3 minus 400 by 6.
06:50 - now rho plus 1 is because
06:53 - the indexing starts from 0 and we cannot
06:55 - take 0 to be something
06:58 - and i have subtracted it by 400 with 400
07:01 - by 6 because i want the line to be the
07:05 - half of it okay half of the block
07:08 - and so is the case with the end point
07:10 - okay
07:11 - and then i'd call to the result function
07:13 - because i wanna if there is a winner
07:15 - then i want to call the result function
07:17 - so that the result is printed and no
07:19 - further game has been played okay
07:22 - similarly for the column
07:24 - i will have a loop to traverse through
07:26 - all the columns and i'd check
07:28 - accordingly if along a column the
07:31 - symbols are same then i'd assign that
07:33 - value that element to the winner
07:36 - variable and then i draw the line along
07:39 - that column since i want a vertical line
07:41 - now
07:42 - i would be taking points on the x
07:44 - coordinate okay x axis sorry
07:47 - and this start and end point again
07:50 - should make sense to you
07:52 - just as we did above i want the line to
07:55 - be at the half of the block again there
07:58 - is a factor of 400 by f6 subtracted from
08:01 - that value cool then again i'd be
08:04 - calling out to the result because i want
08:05 - to want the results to be printed if
08:07 - there's a winner and i'd break this loop
08:10 - cool
08:11 - then to check along the diagonals i
08:13 - would have two diagonals in a matrix
08:15 - there are two diagonals the principal
08:16 - diagonal and the other diagonal the
08:18 - principal diagram runs from left to
08:21 - right whereas the other diagonal runs
08:23 - from
08:24 - right to left and
08:27 - it's the conditions are very similar you
08:29 - check
08:30 - along the principal diagonal
08:32 - if the symbols are same
08:34 - if they are assign winner that value
08:37 - that symbol and draw a line along it
08:40 - and call on to the result function again
08:43 - to print the result similarly for the
08:45 - other diagonal that runs from right to
08:47 - left
08:48 - now if there is a draw then how would
08:51 - you check that for all rows if all is
08:54 - true that means all the blocks are
08:57 - filled now and the winner is still none
08:59 - then it's a draw okay the draw boolean
09:02 - is now true and you'd call on to the
09:04 - result function what the result function
09:06 - would do is it would check the condition
09:08 - for draw and the message would become
09:10 - game draw and the
09:13 - text displayed on the screen would be
09:15 - true cool
09:16 - now i have this get image function which
09:19 - takes an arguments row and column but
09:20 - you would not understand this until you
09:22 - understand this input to block function
09:25 - so let's get to the input of block
09:27 - function
09:28 - what it does is it gives you the
09:30 - position of the coordinates you clicked
09:33 - so basically it is to find out which
09:35 - block is clicked on board there are
09:37 - several blocks and
09:40 - once you have clicked inside that block
09:42 - you would get the row and column as a
09:45 - result of this function cool
09:47 - then to get the coordinates of the mouse
09:49 - click we have this mouse function
09:52 - by pygame we have this mouse module by
09:54 - pytheme that has a function getposition
09:57 - we get the x and y coordinates of that
10:00 - mouse click and if
10:02 - the x coordinate is less than 4 by 400
10:05 - by 3 the first vertical line the first
10:08 - part then it is column 1.
10:10 - else if the value of the x coordinate is
10:13 - less than 400 by 3 into 2 that means
10:16 - it's less than the second partition but
10:19 - greater than the
10:20 - first partition the first vertical line
10:22 - then
10:23 - it would be column two please note that
10:26 - i have used the else of condition for
10:27 - doing the same thing and not if because
10:32 - i want to check the second condition
10:33 - only if the first one is not satisfied
10:36 - and then there's another else if that is
10:39 - the x coordinate is less than 400 which
10:41 - would be the last column the third
10:44 - column cool
10:45 - similarly for assigning the row i have
10:48 - checked the y coordinates accordingly
10:50 - now if the row and column are assigned
10:52 - some value and that port position is
10:56 - empty it's none
10:57 - i would call on to the get image
10:59 - function
11:01 - please see to the indexing part row and
11:03 - column are normal numberings
11:06 - when you're using them for indexing you
11:08 - need to decrease them by one cool now
11:10 - let's check out what the get image
11:12 - function does so i'll pass on the row
11:14 - and columns i got from here
11:17 - and use them to get my image rendered at
11:19 - that position but there is a problem
11:22 - to render my image i would use the blit
11:24 - function but the blip function does not
11:27 - identify the row and column positions
11:29 - but it identifies the
11:31 - destination coordinates so we again need
11:33 - to convert this row and column to a
11:36 - position okay to a coordinate
11:39 - these coordinates would be same for all
11:42 - the images for all the positions clicked
11:45 - to have a uniformity i would need to
11:48 - again convert this row one column to a
11:50 - single position
11:52 - the mouse
11:54 - coordinates would be very random and i
11:56 - don't want my images to be overlapping
11:58 - and that's why i have to do this i have
12:01 - to declare another function to get the
12:03 - coordinates from row one column okay
12:06 - so if the row is one row number is one i
12:09 - want a margin of 30 so the quarter would
12:12 - be 30 x coordinate would be 30.
12:15 - and similar if the similarly if the
12:17 - column is 1 the position y would be 30.
12:20 - i want a margin of 30. if it is row 2
12:23 - then i'd be adding
12:25 - 30 the margin of 30 with 400 by 3
12:28 - because i want the
12:30 - image to be rendered
12:31 - right after the second line with a
12:33 - margin of 30 okay 30 units cool
12:37 - and similarly there are conditions for
12:39 - the third row and the third column
12:41 - now i would assign the current symbol
12:44 - stored by xo to the board position that
12:46 - we got from the input to block function
12:49 - and if xo was x
12:52 - it change xo to o because the turn
12:55 - should be changed now to o
12:57 - and i and before that i would render the
13:00 - image at the given position
13:01 - the x image and if i have xo as o
13:06 - then there is this vice versa condition
13:08 - i'd be pasting o's picture and now xo
13:12 - would be changed to x
13:14 - now after calling the get image function
13:17 - in the input to block function i'd call
13:19 - on to the win cases function
13:22 - which would check if
13:23 - the
13:24 - there is an even in any row or column or
13:28 - along any diagonal
13:30 - so you should get that after pasting or
13:33 - rendering each image we would check if
13:35 - there is any win case okay
13:37 - now we are done with the five basic
13:39 - functions the five parts of the
13:41 - tic-tac-toe game
13:43 - now we can move on to the main part of
13:45 - the program i'd be calling the draw grid
13:47 - function
13:48 - and then i'll have my game loop cool in
13:51 - the game loop i have that events loop
13:54 - where one event is to quit and the other
13:57 - event is to check if there has been any
14:00 - click on the mouse for that we have the
14:02 - mouse button down
14:03 - method
14:05 - if there has been a click on the mouse
14:07 - then i'd call on to the input to block
14:09 - function
14:10 - don't worry we would just get to the
14:12 - flow of
14:13 - the program if you don't understand how
14:16 - the program is interconnected
14:19 - and then i would be updating the entire
14:22 - display
14:23 - and i've set up the refresh rate using
14:26 - the
14:27 - clock object
14:28 - now let's quickly see how the program
14:31 - flows into each other i have just called
14:33 - on to the draw grid function in the main
14:35 - part so if i call on to the draw grid
14:37 - function
14:38 - what i'd see is i'd see
14:41 - a board getting rendered okay i'd see a
14:44 - board with lines
14:46 - and if i click onto the mouse i would
14:48 - call on to the input to block function
14:51 - which would
14:52 - give me the row and column and call on
14:55 - to the get image function which would
14:57 - help me paste my picture and then i
14:59 - would call on to the win cases which
15:01 - would check if there is an event along
15:04 - any row or column or diagonal and then
15:06 - add from the win cases function i'd call
15:08 - on to the result function which would
15:10 - print my result if it is a draw or a
15:13 - win if there is no such win if there if
15:16 - no win cases are satisfied my
15:19 - tic-tac-toe game would take an inputs
15:22 - until
15:22 - all the blocks are filled with some
15:24 - image so now if i run this i'll play it
15:28 - twice
15:30 - just so i can check both the cases for x
15:33 - when or o spin and to check a draw
15:44 - so this game is a draw
15:47 - and if i play it again
15:54 - i have x1 message printed
15:57 - so everything is working fine
15:59 - and if i quit
16:01 - the screen simply goes away cool
16:03 - everything worked as we wanted it to
16:05 - work
16:06 - and this was all about the tic-tac-toe
16:08 - game hope you understood whatever we did
16:11 - in this program in the program
16:14 - thank you

Cleaned transcript:

hey everyone in the last video we made the snake game it comprised of various modules by pie game this time we would make the tictactoe it would be a little bit more complex than the snake game but don't worry if you're clear with the basic modules of fire game you won't have a problem dealing with this let me discuss what all functionalities we need to put in to make this tictactoe so you need to draw a board right you know tictactoe is played on a 3x3 grid so for that you need to draw that board you also need to get the images loaded what images i'm talking about i'm talking about x and o symbols we won't be sketching anything manually we would just be rendering the images of x and o symbols at the place we want to we would also need to print the results on the screen we would also need to check which row or column has similar symbols so that we can strike that out and declare a win okay we would also need to declare a function where we can get the coordinates of our mouse click and put our picture over there paste our picture over there so to get all this i have defined five functions and we would put them together to make this detector cool so what the five functions are we would draw the board one we would get the results printed two we would check the winning cases we would check all the rows and columns if there is a win we would also need to get the coordinates of the mouse click we would use the mouse module that's a new thing for you and we would put the pictures at these coordinates that would be the measure engineering part cool let's get to the code so i'd be importing pi game initializing it then i'd be declaring some basic variables okay so don't worry if you don't understand their purpose you will understand it once we start manipulating them in the code further cool so i have this xo it would hold the current value of the symbol whatever symbol we are working on whoever whose ever turn it is okay then we have a winner it would store the winner x or o and declare and print the message then we have draw it is initialized to none right now but if it is a draw it would be true okay it's a boolean basically then i have this board it's initialized as a 2d matrix with no values none values and it's a base matrix basically of 3 cross 3 of size 3 cross 3 then we have this clock object and then i have the screen then i have set the caption then i have rendered the images i have this in the tictactoe files so accordingly i have mentioned the path okay then i have scaled the images because i want them in a block okay we have this nine these nine blocks and i want it in the same shape okay i want it in the same size basically of the block okay then we have our first function the draw grid we would be drawing the board with lines i'll fill the screen with some color then i have drawn the lines i would need two two vertical and two horizontal lines i hope you can get that because i need to draw three parts okay so i'll be drawing the vertical lines first so i have used the line function by draw module the screen is the surface i would need to make this make this lines on then i have given the color of the line then i have the start and the end positions okay so the start and end positions need to be visualized by you uh just like you would visualize a point on a coordinate axis okay so 400 by 3 comma 0 would be a point on the x axis right so 400 by 3 by 400 by 3 it's because i am making three parts of the complete board and what is the length of my uh screen that is 400 and by 3 gives you the one one third part of it okay similarly 400 by 3 comma 400 gives you the last point okay on the x axis but at the bottom cool and 6 is the size of the line similarly for the second line i've multiplied the same thing by two so that is just an interval ahead of the previous line okay i hope that makes sense to you then to draw the horizontal lines i have just flipped the coordinates because now i'd be taking coordinates on the yaxis just like i took coordinates on the xaxis to draw the vertical line i take points on the yaxis to draw the horizontal lines okay it should not be problematic at all if you can visualize a coordinate plane cool then i'd be defining the result function just for printing the result on the screen so i have made the draw and winner variables global so that i can work with the same variables throughout now if i have a winner x or o a message would be printed like i would have a message that would be a string and that would would be the winner's name and one okay similarly if draw is true my message would be game draw now just like we would display a simple text on the screen i have done that i want my message to be rendered on the screen to be displayed on the screen it's the same code that we used in the display text nothing is different then i have the spin cases function to check if all the symbols along a row or column are same okay we would check it nine times right after every image is rendered okay now just as i said we would check along all the rows the columns and diagonals so to take a longer row we would run a for loop so that we can change the value of the row zero one and two and we would check if all the symbols along that row are same that's what the if condition does and the element we are checking should not be none okay if it's not so and all the symbols are same then we would anna we would assign the winner to be that element okay and we would draw a line across that row how we would do that we would use the line function from the draw module and since we want to draw a horizontal line please know that we would need to take coordinates of the y axis so we have the start point to be 0 comma row plus 1 into 400 by 3 minus 400 by 6. now rho plus 1 is because the indexing starts from 0 and we cannot take 0 to be something and i have subtracted it by 400 with 400 by 6 because i want the line to be the half of it okay half of the block and so is the case with the end point okay and then i'd call to the result function because i wanna if there is a winner then i want to call the result function so that the result is printed and no further game has been played okay similarly for the column i will have a loop to traverse through all the columns and i'd check accordingly if along a column the symbols are same then i'd assign that value that element to the winner variable and then i draw the line along that column since i want a vertical line now i would be taking points on the x coordinate okay x axis sorry and this start and end point again should make sense to you just as we did above i want the line to be at the half of the block again there is a factor of 400 by f6 subtracted from that value cool then again i'd be calling out to the result because i want to want the results to be printed if there's a winner and i'd break this loop cool then to check along the diagonals i would have two diagonals in a matrix there are two diagonals the principal diagonal and the other diagonal the principal diagram runs from left to right whereas the other diagonal runs from right to left and it's the conditions are very similar you check along the principal diagonal if the symbols are same if they are assign winner that value that symbol and draw a line along it and call on to the result function again to print the result similarly for the other diagonal that runs from right to left now if there is a draw then how would you check that for all rows if all is true that means all the blocks are filled now and the winner is still none then it's a draw okay the draw boolean is now true and you'd call on to the result function what the result function would do is it would check the condition for draw and the message would become game draw and the text displayed on the screen would be true cool now i have this get image function which takes an arguments row and column but you would not understand this until you understand this input to block function so let's get to the input of block function what it does is it gives you the position of the coordinates you clicked so basically it is to find out which block is clicked on board there are several blocks and once you have clicked inside that block you would get the row and column as a result of this function cool then to get the coordinates of the mouse click we have this mouse function by pygame we have this mouse module by pytheme that has a function getposition we get the x and y coordinates of that mouse click and if the x coordinate is less than 4 by 400 by 3 the first vertical line the first part then it is column 1. else if the value of the x coordinate is less than 400 by 3 into 2 that means it's less than the second partition but greater than the first partition the first vertical line then it would be column two please note that i have used the else of condition for doing the same thing and not if because i want to check the second condition only if the first one is not satisfied and then there's another else if that is the x coordinate is less than 400 which would be the last column the third column cool similarly for assigning the row i have checked the y coordinates accordingly now if the row and column are assigned some value and that port position is empty it's none i would call on to the get image function please see to the indexing part row and column are normal numberings when you're using them for indexing you need to decrease them by one cool now let's check out what the get image function does so i'll pass on the row and columns i got from here and use them to get my image rendered at that position but there is a problem to render my image i would use the blit function but the blip function does not identify the row and column positions but it identifies the destination coordinates so we again need to convert this row and column to a position okay to a coordinate these coordinates would be same for all the images for all the positions clicked to have a uniformity i would need to again convert this row one column to a single position the mouse coordinates would be very random and i don't want my images to be overlapping and that's why i have to do this i have to declare another function to get the coordinates from row one column okay so if the row is one row number is one i want a margin of 30 so the quarter would be 30 x coordinate would be 30. and similar if the similarly if the column is 1 the position y would be 30. i want a margin of 30. if it is row 2 then i'd be adding 30 the margin of 30 with 400 by 3 because i want the image to be rendered right after the second line with a margin of 30 okay 30 units cool and similarly there are conditions for the third row and the third column now i would assign the current symbol stored by xo to the board position that we got from the input to block function and if xo was x it change xo to o because the turn should be changed now to o and i and before that i would render the image at the given position the x image and if i have xo as o then there is this vice versa condition i'd be pasting o's picture and now xo would be changed to x now after calling the get image function in the input to block function i'd call on to the win cases function which would check if the there is an even in any row or column or along any diagonal so you should get that after pasting or rendering each image we would check if there is any win case okay now we are done with the five basic functions the five parts of the tictactoe game now we can move on to the main part of the program i'd be calling the draw grid function and then i'll have my game loop cool in the game loop i have that events loop where one event is to quit and the other event is to check if there has been any click on the mouse for that we have the mouse button down method if there has been a click on the mouse then i'd call on to the input to block function don't worry we would just get to the flow of the program if you don't understand how the program is interconnected and then i would be updating the entire display and i've set up the refresh rate using the clock object now let's quickly see how the program flows into each other i have just called on to the draw grid function in the main part so if i call on to the draw grid function what i'd see is i'd see a board getting rendered okay i'd see a board with lines and if i click onto the mouse i would call on to the input to block function which would give me the row and column and call on to the get image function which would help me paste my picture and then i would call on to the win cases which would check if there is an event along any row or column or diagonal and then add from the win cases function i'd call on to the result function which would print my result if it is a draw or a win if there is no such win if there if no win cases are satisfied my tictactoe game would take an inputs until all the blocks are filled with some image so now if i run this i'll play it twice just so i can check both the cases for x when or o spin and to check a draw so this game is a draw and if i play it again i have x1 message printed so everything is working fine and if i quit the screen simply goes away cool everything worked as we wanted it to work and this was all about the tictactoe game hope you understood whatever we did in this program in the program thank you
