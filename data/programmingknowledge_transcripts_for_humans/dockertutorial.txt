With timestamps:

00:00 - so first of all what is Docker so Docker
00:05 - is an open source project that automates
00:08 - the deployment of applications inside
00:10 - software containers by providing an
00:14 - additional layer of abstraction and
00:16 - automation of operating system level
00:19 - virtualization on Linux so that is the
00:23 - definition which is available on
00:25 - Wikipedia but really what is docker so
00:30 - Docker provides a uniformed wrapper
00:33 - around a software package and this
00:36 - wrapper is called Docker container which
00:39 - you can ship or build and inside these
00:42 - containers you can run any app anywhere
00:46 - now Docker containers are similar to
00:49 - shipping containers now as you all know
00:52 - in the shipping container the container
00:55 - size is always same regardless of the
01:00 - content inside the container so these
01:04 - container can fit on all trucks or ships
01:08 - or trains regardless of the content
01:12 - inside the container in the same way
01:15 - Docker packages a software into
01:19 - standardized unit for development
01:22 - shipment and deployment so let me give
01:26 - you a real world example so let us say I
01:30 - developed a node.js application which
01:33 - depends upon some version of node.js and
01:37 - it uses some database and it's dependent
01:42 - on some shared Library let's say and I
01:46 - want to give this software to the devops
01:50 - guy or let's say to my colleague to run
01:53 - it on his computer or on the QA system
01:58 - or on the cloud by devops or in the
02:01 - production system so I don't really care
02:04 - where it runs I just care that it should
02:08 - run when somebody tries to run my
02:11 - software
02:12 - now if Docker is not present or any
02:16 - containerized system is not present the
02:19 - normal procedure will be that I give my
02:22 - software to my colleague or the devops
02:26 - guys and he has to install all the
02:29 - dependencies and for example node.js
02:33 - version and the database system exactly
02:37 - like a system on which I have tested my
02:41 - software now if you will just use Docker
02:44 - to containerize your system you just
02:46 - need to package your system into a
02:50 - Docker container and you can just give
02:54 - this Docker container to your colleague
02:56 - or the devops guys and he will just run
03:01 - this Docker container on the cloud or a
03:05 - QA machine or any other production
03:09 - system wherever he wants to run it and
03:12 - he can just run your software without
03:15 - worrying about all the dependencies or
03:19 - the environment setup which your
03:22 - software depends upon so nowadays Docker
03:25 - is becoming more or less a standard for
03:28 - the containerizing systems and you can
03:31 - find Docker containers everywhere on
03:34 - Linux operating system or Windows
03:36 - operating system or in the data center
03:39 - clouds serverless application and so on
03:43 - now let's compare Docker container
03:45 - versus virtual machines
03:48 - so containers and virtual machine have
03:51 - similar resource isolation and
03:54 - allocation benefits but Docker
03:56 - containers and virtual machine functions
03:59 - differently because containers
04:02 - virtualize the operating system instead
04:05 - of hardware and containers are more
04:07 - portable and efficient so when you talk
04:10 - about virtual machines you can see this
04:13 - diagram on the right hand side so
04:15 - virtual machines or VMS are an
04:18 - abstraction of physical Hardware turning
04:21 - one server into many servers and it is
04:25 - made possible by the hypervisor which
04:29 - allows virtual machines to run on a
04:32 - single machine so each virtual machine
04:35 - or VM includes full copy of operating
04:39 - system so let us say this is your server
04:42 - and on the server you have your
04:45 - hypervisor and on top of your hypervisor
04:50 - you can run different virtual machines
04:52 - so this is virtual machine one Virtual
04:55 - Machine 2 virtual machine 3 which have
04:59 - this operating system one operating
05:02 - system two and operating system three or
05:06 - you can have the similar operating
05:07 - system in all the three virtual machine
05:10 - let's say now the important thing to
05:13 - note here is each virtual machine
05:16 - includes full copy of operating system
05:19 - the application necessary binaries and
05:23 - the libraries which takes up to tens of
05:26 - GBS of memory and that is the reason
05:30 - that virtual machines can be slower
05:34 - now on the other hand in the container
05:36 - and you can see on the left hand side
05:39 - this diagram so containers are an
05:43 - abstraction on the app layer that
05:47 - packages the code and dependencies
05:49 - together so you have your server and
05:53 - then you have your host operating system
05:56 - and then on top of your host operating
05:59 - system you can run your Docker engine
06:03 - and the containers are the abstraction
06:06 - at the app layer that packages the code
06:09 - and dependencies together so multiple
06:12 - containers can run on the same machine
06:16 - and share the same OS kernel with other
06:21 - containers but each container runs as
06:25 - isolated process in the user space as a
06:29 - result container takes less space than
06:32 - virtual machine
06:34 - and usually container images typically
06:37 - takes tense of megabytes in size in
06:41 - comparison to the virtual machine which
06:43 - which can take up to let's say several
06:45 - GBS of memory also containers can handle
06:49 - more application and require fewer
06:52 - virtual machines and operating system
06:55 - now when we talk about Docker containers
06:58 - versus virtual machines the idea is to
07:02 - use containers and virtual machines
07:04 - together so the containers and the
07:06 - virtual machines can be used together
07:08 - which provides a great deal of
07:11 - flexibility in deploying and managing
07:14 - your apps now let's talk about the
07:17 - docker architecture
07:19 - so whenever you will install Docker the
07:23 - docker engine will be installed on your
07:25 - system so Docker engine will contain
07:29 - Docker CLI Docker Daemon and the docker
07:34 - registry now there is something called
07:37 - Docker Hub which is a cloud-based
07:40 - service where you can share your
07:42 - applications automate the workflow and
07:46 - assemble apps for the components now
07:49 - when you talk about Docker two things
07:52 - are really important and these are
07:55 - Docker images and Docker containers so
07:59 - first of all what is Docker container so
08:03 - a container is a standard unit of
08:05 - software that packages up your code and
08:08 - it's all dependencies so the application
08:12 - runs quickly and reliably from one
08:15 - environment to the other environment now
08:19 - when you create your Docker container
08:21 - which is essentially a unit of your
08:24 - software it can run everywhere
08:27 - regardless of the kernel version
08:29 - regardless of the host distro the only
08:33 - condition is that the container and the
08:37 - host architecture must match and you can
08:40 - run anything inside your containerized
08:43 - solution so if it can run on your host
08:46 - then it can run on your container that
08:49 - is if it runs on a Linux kernel it can
08:53 - run now let's talk about Docker
08:56 - container images
08:57 - so a Docker container image is a
09:01 - lightweight Standalone executable
09:03 - package of software that includes
09:06 - everything needed to run the application
09:09 - that is code your runtime your system
09:13 - tools and the system libraries and the
09:16 - settings so the container images becomes
09:20 - container at run time and in case of
09:24 - Docker containers images becomes
09:26 - containers when they run on Docker
09:30 - engine so images turns into container
09:34 - when these images runs on your Docker
09:38 - engine now it's important to note that
09:41 - your Docker image is not a virtual hard
09:45 - disk or vhd it's not a file system it
09:49 - uses Union file system and it's only a
09:54 - read-only layer also the docker images
09:57 - does doesn't have any state so when your
10:00 - Docker images runs as Docker container
10:03 - inside the docker engine and when you
10:06 - stop these running containers these
10:10 - images will not have or will not save
10:13 - any state so they are stateless so
10:16 - basically an image is a tar file which
10:20 - has a hierarchy and an arbitrary depth
10:24 - and that's how it fits into your Docker
10:27 - registry for example Docker Hub or any
10:31 - private Docker registry so this was a
10:34 - brief introduction about Docker in this
10:36 - video we are going to see how we can
10:38 - download and install Docker on our
10:41 - Windows 10 operating system
10:43 - so let us get started first of all open
10:46 - your favorite browser and search for
10:48 - Docker but before installing Docker
10:51 - desktop application on our Windows
10:54 - operating system let's see what are the
10:56 - system requirements for installing this
10:59 - application
11:00 - so before going to the docker doc to com
11:03 - website I'm going to search on my
11:06 - browser install Docker Windows which
11:09 - will open this link from docs dot
11:12 - docker.com forward slash Docker for
11:15 - Windows and this link I'm going to put
11:19 - in the description of the video also so
11:21 - you can also see all the description
11:24 - here and from here you can click this
11:28 - button which is going to redirect you to
11:31 - the downloads page but before that let's
11:34 - see what are the system requirements for
11:37 - downloading this application so as you
11:39 - can see here for installing Docker on
11:42 - your Windows operating system you need
11:44 - to have at least Windows 10 64-bit Pro
11:49 - Enterprise or education version and
11:52 - hyper-v and containers Windows feature
11:55 - must be enabled and some other
11:58 - requirements are 64-bit processor with
12:01 - second level address translation 4GB
12:05 - system RAM and bios level hardware
12:08 - virtualization system must be enabled in
12:11 - BIOS settings so if you don't have
12:14 - Windows 10 64-bit pro version or
12:16 - Enterprise or education version then
12:19 - also you can install Docker on your
12:22 - Windows operating system but the
12:25 - procedure will be little different so
12:28 - for that you can go to suspended
12:31 - products and tools and then go to this
12:35 - tool which is called Docker toolbox
12:38 - which is now a legacy for legacy
12:42 - operating systems so here you can just
12:45 - click on the install toolbox on Windows
12:47 - button I'm going to just open this link
12:50 - in the next Tab and here you can follow
12:54 - the procedure of installing Docker
12:57 - toolbox on your other window Windows
13:01 - operating system for example if you have
13:03 - Windows 10 home version or if you have
13:06 - Windows 8 or Windows 7 then you can
13:10 - install Docker toolbox so first of all
13:13 - how to check which Windows 10 version
13:16 - you have if you have Windows 10
13:19 - operating system running so for that
13:22 - what you can do is you can just right
13:25 - click on this Windows button and then
13:27 - click on run and then just type when
13:31 - were w i n v e r and then click OK which
13:36 - is going to open this kind of window and
13:40 - here you can find the Windows 10 version
13:44 - you are running so as you can see here
13:46 - I'm running Windows 10 pro version also
13:50 - the second requirement was so let's see
13:53 - the second requirement which is hyper-v
13:56 - and containers Windows features must be
13:59 - enabled so how to verify that so to
14:03 - check that the simple procedure is just
14:06 - right click on your toolbar Windows
14:09 - toolbar and then click on task manager
14:13 - so once this task manager opens you just
14:17 - need to go to the performance section
14:20 - and then you need to verify this section
14:24 - which is called virtualization it needs
14:27 - to be enabled by default it is enabled
14:32 - on your Windows 10 operating system so
14:34 - you don't need to do any extra thing
14:37 - unless you have manually disabled this
14:41 - feature so now I am going to click this
14:43 - button which says download from Docker
14:45 - Hub and here you will see this web page
14:50 - first so first of all you need to create
14:52 - a Docker ID if you haven't already have
14:56 - a Docker ID you can just click on this
14:59 - sign up a link here which will open this
15:02 - kind of web page and here you can create
15:05 - your Docker account which requires a
15:08 - Docker ID email address and password and
15:12 - you need to just agree these terms and
15:14 - conditions so once you have your Docker
15:17 - ID which I already have I'm going to
15:20 - sign into my Docker account which is
15:23 - going to redirect me to this page which
15:27 - is the downloads page and from here I
15:30 - can just download this Docker desktop
15:32 - application for Windows also if you have
15:36 - searched for Docker and if you have
15:39 - opened this main website from Docker
15:42 - which is docker.com you can just click
15:45 - on get started and then click on
15:49 - download desktop for mac and windows
15:52 - which will also redirect you to the same
15:55 - page and you can see welcome my Docker
15:59 - ID is shown here so in order to download
16:02 - this desktop application you need to
16:05 - have your Docker ID you and you need to
16:09 - log in to the docker website in order to
16:12 - download this executable file so let's
16:14 - just click on this button which is going
16:17 - to start the download of this executable
16:21 - file I have already downloaded this
16:23 - executable file so I'm going to cancel
16:26 - this installation and you can see on my
16:30 - downloads folder I already have this
16:32 - Docker desktop installer which is around
16:34 - 856 megabytes so I'm going to just
16:37 - double click on this executable file and
16:41 - I'm going to just start the installation
16:44 - so I'm going to minimize this browser
16:49 - and you can see the installation has
16:51 - been started so the first window here is
16:54 - the configuration so I'm going to just
16:56 - leave everything as default and then
17:00 - click OK which is going to unpack all
17:03 - the files the installation procedure is
17:06 - straightforward I guess you just need to
17:08 - click some buttons and Docker will be
17:11 - installed out of the box and now you can
17:14 - see after few seconds I can see this
17:17 - Docker desktop icon on my desktop and
17:21 - you can see this message which says
17:23 - installation succeeded so I am going to
17:26 - just click close And log out button
17:30 - which will log me out of Windows 10
17:34 - operating system so I need to log in
17:36 - once again so now I have logged in to my
17:40 - Windows 10 operating system once again
17:42 - and immediately after logging into my
17:45 - Windows 10 operating system I can see
17:48 - this window which says hyper-v and
17:50 - container features are not enabled do
17:54 - you want to enable them for Docker to be
17:57 - able to work properly I will say OK
18:00 - which is going to enable all these
18:02 - features I thought they are already
18:05 - enabled somehow but according to Docker
18:08 - it wants to enable them once again let's
18:12 - say and now I will click on this Docker
18:15 - desktop icon from here which is going to
18:18 - start the docker desktop application and
18:21 - I can see this message which is hyper-v
18:24 - service vmm is not available if you have
18:27 - enabled hyper-v
18:29 - just restart your computer now so I'm
18:33 - going to restart my computer and I will
18:37 - then try to just start Docker
18:39 - application once again so now I'm going
18:42 - to click on this Docker icon once again
18:45 - and you will see on your toolbar here
18:48 - you can see Docker is starting so it
18:52 - will take some time to start docker
18:57 - and I can see this message which says
18:59 - Docker desktop is running so I can open
19:03 - Powershell and start hacking with Docker
19:07 - or Docker compose also when you click on
19:10 - this Docker icon here you can see bunch
19:12 - of options here for the documentation
19:16 - Docker Hub Switch to Windows containers
19:19 - and all other settings here
19:23 - so one thing I will recommend here is to
19:27 - sign in with your Docker credentials
19:30 - which you have already created and I'm
19:33 - going to sign in with my Docker
19:35 - credentials and after signing in you
19:39 - will be able to see your Docker ID and
19:42 - the sign out option so let's get started
19:46 - with Docker so first of all you can
19:48 - start the command prompt I'm going to
19:50 - just type CMD which is going to show me
19:54 - this option which is command prompt and
19:57 - here you can just type docker
20:01 - hyphen version or hyphen V will also
20:06 - work and you can see the version which
20:08 - we have installed now let's also check
20:11 - if Docker is working with the docker Hub
20:14 - perfectly fine or not to test this you
20:18 - can just run Docker run hello hyphen
20:23 - World okay so just run this command this
20:27 - is the most popular command to test
20:30 - whether Docker is running or not or it's
20:34 - able to fetch all the images from Docker
20:37 - Hub or not so I'm going to just run this
20:40 - command and when I run this command you
20:42 - can see this kind of output so you can
20:45 - see on the first line it says unable to
20:47 - find image hello world latest locally so
20:51 - it didn't find this image locally so it
20:54 - has pulled this image from the docker
20:58 - Hub repository so you can see in the
21:01 - next line latest pulling from library
21:04 - hello world and once the pull is
21:07 - complete and you can see the status
21:10 - downloaded the new image hello world and
21:14 - then the latest version of hello world
21:16 - and then it says hello from Docker that
21:20 - means everything is working fine with
21:22 - your Docker and it's able to run your
21:25 - Docker images and this is the first
21:28 - Docker image we have run which ran
21:31 - successfully few more commands I can
21:34 - show you here for example you can also
21:38 - say docker
21:40 - images
21:42 - and then press enter and you will see
21:45 - the list of all the images you have on
21:48 - your system so we have just downloaded
21:51 - this Docker image which is hello world
21:54 - image so this is how you can download
21:56 - and install Docker on your Windows 10
21:59 - operating system in this video we are
22:02 - going to see how we can download and
22:04 - install Docker on our Mac operating
22:07 - system so let's get started so first of
22:10 - all open your favorite browser and
22:12 - search for Docker and the first link
22:13 - which will appear here will be from
22:15 - docker.com so we are going to click into
22:17 - this link and then straight away you can
22:22 - see this button get started or this
22:25 - button gets started so you can click on
22:27 - one of these buttons and then you will
22:30 - be able to see this button which says
22:34 - download Docker for mac and windows so
22:37 - I'm going to just click on this button
22:39 - which will redirect me to the docker Hub
22:43 - website
22:44 - now in order to download the docker
22:46 - binary you need to have a Docker account
22:50 - so if you haven't created a Docker
22:53 - account you can just click on this sign
22:56 - up link here and then just fill your
22:59 - basic details like Docker ID email and
23:03 - password and create your Docker ID and
23:06 - Docker account and once you have your
23:09 - Docker ID and Docker account you can
23:12 - just log in with your Docker account
23:14 - here on this website so I'm going to
23:17 - just give my Docker credentials first is
23:21 - the docker ID and then second is the
23:25 - password
23:27 - and now I'm going to just sign into this
23:30 - Docker Hub website which will allow me
23:32 - to download this Docker desktop for Mac
23:36 - so I'm going to just click on this
23:38 - download link here which will start the
23:42 - download of the docker now once this
23:46 - docker.dmg file is downloaded I'm going
23:48 - to just click on this
23:50 - docker.dmg file and I'm going to
23:53 - minimize the browser
23:55 - and you can see this DMG file is opening
23:58 - first of all and once this window opens
24:01 - you just need to drag this Docker icon
24:04 - to your applications so it's that simple
24:07 - to install a Docker on your Mac
24:10 - operating system so once Docker is
24:13 - copied into your applications folder you
24:17 - can close this window and open Docker
24:20 - from here or you can just go to the
24:24 - launch pad and you will be able to see
24:26 - this Docker icon here so you can just
24:28 - click on the docker icon which is going
24:31 - to start the docker on your Mac
24:34 - operating system so just wait for few
24:37 - seconds and now you will see this
24:39 - message which says Docker is an app
24:42 - downloaded from internet are you sure
24:44 - you want to open it so I'm going to just
24:46 - say open and in the next step I can see
24:49 - this window which asks me to give some
24:53 - privileged access so I'm going going to
24:55 - just click on OK and then I'm going to
24:58 - give my Max password
25:02 - and now you can see Docker desktop is
25:05 - starting on my Mac operating system and
25:09 - you know you can see this Docker icon on
25:12 - top of your Mac desktop
25:15 - so I will wait for this Docker desktop
25:18 - to start and once this Dockers desktop
25:22 - starts we will start testing if
25:25 - everything is working fine in the
25:28 - meantime I can also give my Docker ID
25:31 - and password to login to the docker
25:36 - using this Docker desktop application so
25:40 - let me give my Docker ID and the
25:44 - password and then I'm going to just say
25:46 - login and you can see I am logged in
25:49 - with my Docker ID into this Docker
25:53 - desktop application and now I can see
25:56 - this message which says Docker desktop
25:58 - is now up and running so what we are
26:01 - going to do next is we are going to just
26:03 - open the terminal so I'm going to just
26:06 - search for terminal and then I'm going
26:10 - to open the terminal and once my
26:13 - terminal is open I can just just check
26:16 - the docker version by just giving this
26:19 - Docker version command and then press
26:23 - enter and I can see this long message
26:26 - and here the version information is
26:30 - displayed and then the API version is
26:33 - displayed and all the other information
26:35 - about my Docker is displayed here
26:39 - also when I give Docker info command so
26:44 - let me just clear this terminal once
26:46 - again
26:47 - and then I'm going to just give Docker
26:51 - info command and it's going to give me
26:53 - bunch of information about Docker and
26:56 - Docker engine and the status of Docker
27:00 - engine let me clear this terminal once
27:03 - again and now I'm going to test a Docker
27:07 - by giving this command so I'm going to
27:09 - just say
27:11 - Docker run
27:14 - hello world and then press enter
27:17 - which is going to fetch this hello world
27:21 - image from Docker Hub if it's not
27:24 - already present on my Mac locally and
27:28 - once this image is pulled it's going to
27:31 - just display hello from Docker that
27:35 - means everything is working fine and you
27:38 - can start working with Docker now one
27:41 - more command you can use here is this
27:44 - command which is Docker images which is
27:47 - going to show you the list of images
27:50 - which are present on your Mac operating
27:55 - system and you can see I only have one
27:58 - image right now which is Hello World
28:00 - which I have fetched just a few seconds
28:04 - ago and you can see this Docker icon
28:07 - here so when you click on this Docker
28:10 - icon you can do lots of thing for
28:13 - example if you want to restart your
28:15 - Docker then you can just click on on
28:18 - this if you want to Quick Quit the
28:21 - docker desktop then you can click here
28:23 - and there are lots of settings and
28:26 - updates and references settings you can
28:29 - do from this Docker desktop icon and
28:34 - there are lots of other settings you can
28:36 - do from this window or this menu from
28:41 - here
28:42 - so this is how you can download and
28:44 - install Docker on your Mac operating
28:47 - system in this video we are going to see
28:49 - how we can download and install Docker
28:52 - on our Ubuntu operating system so let's
28:55 - get started so what I'm going to do is
28:58 - I'm going to open my favorite browser
29:01 - and then I'm going to search here Docker
29:05 - install Ubuntu and the first link which
29:08 - will appear here will be from
29:11 - docs.docker.com I'm going to put the
29:15 - link in the description also so I'm
29:17 - going to click this link which is the
29:19 - official documentation of installing
29:23 - Docker engine Community Edition on your
29:26 - Ubuntu operating system
29:29 - so here you can see the prerequisite of
29:32 - installing Docker on your Ubuntu
29:35 - operating system so you can see the OS
29:37 - requirements and right now I have this
29:40 - version which is 18.04 LTS version
29:44 - and if you have the older version of
29:48 - Docker or Docker IO or Docker engine
29:51 - installed you can use this command to
29:54 - uninstall previous versions of docker
29:58 - now to install Docker you can just
30:01 - scroll little bit down and they have the
30:05 - very good documentation of installing
30:08 - Docker on your Ubuntu operating system
30:10 - so we are going to just copy these
30:12 - commands and paste it on our terminal
30:15 - and will be will be good to go so the
30:18 - first command is sudo apticate update so
30:21 - I'm going to just copy this command and
30:23 - I'm going to just open my terminal here
30:26 - and then just paste this command and
30:30 - then give my ubuntu's password and then
30:32 - just press enter which is going to
30:35 - update all the repositories and then I'm
30:40 - going to just copy the second command in
30:44 - a meanwhile so this is the second
30:46 - command and in the second command we
30:48 - install the packages to allow the app to
30:51 - use the repository over https so let's
30:55 - just copy this command and go to a
30:58 - terminal and then let me just clear the
31:02 - terminal and now I'm going to just paste
31:05 - this command and then press enter which
31:07 - is going to start the installation I'm
31:10 - going to press Y and then press enter
31:14 - and in the meantime we are going to copy
31:18 - the third command which is to add
31:19 - docker's official gpg key so for that
31:24 - you need to have curl and curl we are
31:27 - installing using this second command so
31:31 - when the second command is finished you
31:33 - will have curl on your system and then
31:36 - we can just give the third command so
31:41 - hopefully that is complete so let's
31:43 - clear the terminal once again and then
31:47 - paste the third command
31:51 - and its ok so we will move to the next
31:55 - command which is to verify that you now
31:59 - have the key with the fingerprints so
32:02 - I'm going to just copy this
32:04 - and then paste it here
32:07 - and verify this and you will see the
32:09 - similar result which is also shown here
32:13 - when you give this command so now we
32:16 - will move to the next command which is
32:19 - to install the docker Repository
32:21 - so for Ubuntu you need the first option
32:24 - here which is x8664 so I'm going to just
32:29 - copy this command once again and then go
32:32 - to the terminal
32:33 - clear this terminal and then paste this
32:37 - command and then press enter
32:39 - which is going to install the docker
32:42 - repository and then in the next step we
32:46 - are going to update the repositories
32:48 - once again before installing Docker so
32:52 - here you can see the next command which
32:54 - is to update the repositories again
32:57 - and then we are going to just install
33:01 - the docker so after update we are going
33:04 - to install the latest version of Docker
33:07 - engine which is the community version so
33:10 - for that we just need to give this
33:13 - command which is going to install docker
33:16 - CE and Docker cecli and containerd Dot
33:22 - IO so I'm going to just copy this last
33:24 - command and then paste it to the
33:27 - terminal so clear the terminal just
33:29 - paste this command and then just wait
33:32 - for the installation to complete so it's
33:35 - that easy to install Docker Community
33:38 - Edition on your Ubuntu operating system
33:42 - and if you want to install a specific
33:45 - version of these packages you can give
33:50 - these commands so when you give this
33:52 - command apt cache medicine Docker minus
33:56 - CE you will see a different version of
34:00 - Docker which are available for your
34:02 - Ubuntu operating system so from here you
34:05 - just need to take the version and then
34:08 - replace this placeholder for the version
34:10 - string with the actual version of
34:14 - whatever tool you want to install so for
34:16 - example if you want to install the
34:19 - version of Docker CE for example we need
34:24 - the latest version of the docker CE then
34:27 - you can just copy this and then just
34:30 - replace this place all the string by ah
34:34 - this string okay same you can do for the
34:39 - docker cecli so once this command is
34:42 - finished I'm going to once again clear
34:44 - the terminal and we are going to run
34:47 - this command which is sudo Docker run
34:49 - hello world in order to test whether
34:52 - everything is working fine or not and
34:55 - here I'm going to just write sudo
34:58 - Docker run
35:00 - hello hyphen world and then press enter
35:04 - and I'm going to give my ubuntu's
35:07 - password and you can see when you run
35:09 - this command it prints hello from Docker
35:12 - so first of all what happens is because
35:16 - we are running this Docker command for
35:18 - the first time it's going to find the
35:20 - docker locally and if it's not found
35:23 - then it's going to pull your Docker
35:27 - image from the docker Hub and then
35:30 - execute this hello world image which is
35:33 - going to print this kind of output so if
35:36 - you see this kind of output that means
35:38 - Docker is running on your system and
35:41 - also you can check the docker images now
35:45 - so you can just give this command sudo
35:50 - docker which is going to list out all
35:53 - the docker images you have on your
35:56 - Ubuntu operating system
35:58 - so that's how you can install Docker on
36:01 - your Ubuntu operating system in this
36:04 - video we will talk about how does Docker
36:07 - works and we will see some commands
36:10 - related to Docker and Docker images
36:13 - so as I have told you in the earlier
36:15 - videos also you can build your Docker
36:18 - images that holds your applications
36:20 - using Docker files and then you can
36:24 - create your Docker containers from those
36:28 - Docker images to run your applications
36:32 - and then you can share your Docker
36:35 - images via Docker Hub or via your
36:39 - private registry
36:41 - now if you want to see this Docker flow
36:44 - in the form of a diagram you can see
36:49 - this diagram here so you can create a
36:52 - Docker file which we are going to see
36:54 - how we can create a Docker file in the
36:56 - later videos so Docker file is a file
37:00 - from which you can build your
37:03 - applications into Docker images
37:07 - so what happens is you pull some images
37:11 - which are already there on the docker
37:14 - Hub and you use those images with your
37:18 - application and you write all that code
37:24 - or that script inside your Docker file
37:27 - so how will your application run inside
37:31 - a container you write everything in a
37:34 - Docker file and then you build your
37:39 - Docker file which will create a Docker
37:42 - image and when you run your Docker image
37:45 - it will be converted to a Docker
37:48 - container now let's see some commands
37:52 - related to Docker so the First Command
37:55 - which I want to show you is the docker
37:58 - search command so you just write Docker
38:01 - search and then you give your options
38:04 - for example whatever
38:06 - image you want to
38:09 - fetch from your Docker Hub you can just
38:14 - write that image name for example I just
38:17 - write
38:19 - Ubuntu here so you can search all the
38:23 - images which are there
38:25 - related to Ubuntu on Docker hub using
38:29 - this command so Docker search Ubuntu
38:32 - so when you give Docker search Ubuntu
38:35 - you will see this kind of result in the
38:37 - form of a table and the First Column
38:41 - here is the name the second column here
38:46 - is the description third is the number
38:48 - of stars and if the image have more
38:52 - number of stars then its more popular
38:56 - also you have the column for official
39:00 - so if you see uh ok under official for a
39:05 - particular image so for example this
39:08 - first image with the name Ubuntu is the
39:10 - official image on Docker hub
39:14 - and you can also see some description
39:16 - here so clearly this first image which
39:20 - is an official image also is the most
39:22 - popular image on Docker Hub about Ubuntu
39:27 - now let's see some options which are
39:30 - related to Docker search so I'm going to
39:32 - just write docker
39:34 - search here and then I can give the
39:38 - filter option which we use to filter our
39:41 - results so I'm going to just write a
39:43 - filter here
39:45 - so let's say we want to filter our
39:47 - result on the basis of stars and image
39:50 - have on the docker Hub so I can just
39:54 - write
39:55 - Stars here is equal to 3 and then the
39:59 - name of an image I am searching for so
40:01 - for example I'm searching for Ubuntu
40:04 - here so I will just write Ubuntu
40:06 - and this example will display the images
40:10 - with the name Ubuntu and which have at
40:14 - least three stars so I'm going to just
40:16 - press enter so you can see all the
40:19 - result of the images which have at least
40:22 - three stars now if you give here let's
40:26 - say number of star is equal to 100
40:29 - so it's going to search for all the
40:32 - images which have at least 100 stars now
40:37 - if you want to give more than one filter
40:39 - you can add this this filter option once
40:42 - again so you can just write hyphen
40:45 - hyphen filter and then the next filter
40:49 - so the first filter we have here is for
40:53 - the stars and the second filter I have
40:57 - added here is for the official image so
41:02 - I just want all the images which are
41:06 - official so that's why I have just given
41:09 - this filter which is is official is
41:11 - equal to true and then I am going to
41:13 - just press enter
41:14 - and I will only see the official images
41:18 - which are present on the docker Hub and
41:22 - which have more than 100 stars in a
41:26 - similar way I can also search for
41:29 - automated image which are not official
41:31 - but which are there by some users which
41:36 - are there on Docker Hub right so it's
41:40 - going to show you all the images which
41:43 - are not official but automated now there
41:46 - is this option which is called No trunk
41:50 - also which is going to show you the
41:52 - description without truncating this
41:55 - description so right now you can see in
41:57 - the description you see this description
42:00 - and these three dots so that means this
42:03 - description have more content in the
42:07 - description so I can just give this
42:10 - option which is no trunk which is not
42:14 - going to try truncate there's a
42:15 - description it's going to show you the
42:19 - full description here so sometimes this
42:23 - ah option can get really messy if the
42:27 - description is really large
42:29 - so just use it wisely now instead of
42:34 - this hyphen hyphen filter you can also
42:36 - simply write hyphen f for the filter
42:40 - option so either you can just give the
42:44 - full filter option or you can just give
42:46 - hyphen f for the filter and the result
42:49 - will be the same
42:52 - now the next command which I'm going to
42:54 - show you here is the docker images so
42:57 - I'm going to just write
42:59 - Docker images
43:01 - and this command we use to list out all
43:05 - the local images you have on your host
43:09 - so when you give this command Docker
43:12 - images it's going to give you all the
43:14 - images which you have on your host as I
43:17 - said and right now I only have one image
43:22 - which is hello world image which we have
43:25 - pulled in the previous videos when I
43:28 - have shown you how to install Docker on
43:30 - your various operating system so right
43:34 - now I only have one Docker image which
43:37 - is hello world
43:39 - now there are some options which are
43:42 - related to Docker images so we are going
43:46 - to see all those options one by one
43:49 - so with this Docker images option you
43:53 - can give the name of the image
43:55 - now let's say I give here the option
43:59 - Java
44:01 - so you can list the images using the
44:04 - name or the tag so when you give this
44:07 - Docker images Java command it's going to
44:10 - search all the images related to Java
44:13 - and you can see there is no image which
44:17 - is related to Java on my host machine so
44:22 - let's pull the Java image from the
44:25 - docker Hub so I'm going to just write
44:28 - Docker here and then pull
44:32 - so the pull command you can use to pull
44:34 - an image or a repository from Docker Hub
44:38 - or from your private repository so I'm
44:41 - going to just pull the Java
44:44 - image from the docker Hub so you can see
44:47 - when you give this Docker pull Java
44:50 - command it's going to pull always the
44:52 - latest tagged image from the docker Hub
44:56 - and in the output also you can see using
44:59 - default tag so the default tag is always
45:02 - the list test tag that's why it's going
45:06 - to pull the latest Java image so now you
45:10 - can see this Java image with the latest
45:14 - tag is downloaded on my host so let me
45:20 - clear the terminal and now I'm going to
45:25 - give the docker images command once
45:28 - again so docker
45:30 - images and now I have the Java image
45:36 - with the tag latest and the hello world
45:39 - image with the tag latest so now I can
45:43 - use the docker images and then the name
45:48 - of the image also so I can search
45:51 - based on the name of the image also so I
45:54 - can just write Docker images Java which
45:57 - is going to just give me the images
46:01 - which are related to Java I can also
46:05 - search with the image name and the tag
46:09 - so let's say I want to search for the
46:12 - Java image which have the tag let's say
46:15 - 8 which is not present on my host so
46:20 - it's going to give you the empty result
46:23 - without any image if you give the
46:28 - tag which is present so the latest tag
46:32 - is present on my host so it's going to
46:37 - give you the Java image with the latest
46:40 - tag so let me give the docker images
46:44 - command once again
46:45 - and you can see by default in the result
46:47 - you will see the name of the repository
46:50 - or an image then the tag of that image
46:54 - and then the image ID this ID is very
46:58 - useful when you have a multiple image
47:02 - related to let's say Java so you can use
47:06 - this image ID to remove that image or
47:09 - work with that image so that's why this
47:13 - ID is important also you can see when
47:18 - this image is created and the size of
47:22 - the image so the different images with
47:24 - different tag have different sizes so
47:28 - sometimes you want the images with the
47:31 - less size or sometimes you want the
47:35 - images which have the full feature so in
47:39 - that case you can use different kind of
47:42 - image with different tag which suits
47:46 - your requirement for your application in
47:49 - this video we will talk about basics of
47:52 - Docker file
47:54 - so first of all what is a Docker file
47:57 - so Docker can build images automatically
48:01 - by reading the instructions from the
48:03 - docker file and a Docker file is a text
48:07 - document that contains all the commands
48:10 - a user could call on the command line to
48:14 - assemble an image now as I have
48:16 - previously told you you can use Docker
48:20 - file and then once you write your
48:22 - instructions in the dockup file you can
48:25 - build your Docker file to produce a
48:28 - Docker image and when you run the docker
48:31 - image it's called the docker container
48:33 - so let's see how we can create a Docker
48:36 - file and then we will see how we can
48:39 - build our Docker file to make an image
48:43 - so right now I'm in my home directory so
48:45 - here I'm going to create
48:47 - a directory called D1 let us say and
48:51 - then I am going to CD in this D1
48:54 - directory and right now it does not
48:57 - contain any files or folders so let's
49:01 - create our Docker file in this D1 folder
49:04 - so I'm going to just write touch and
49:08 - then
49:09 - Docker file so by convention we usually
49:13 - name our Docker file as Docker file with
49:18 - the capital D and this Docker file does
49:21 - not contain any extension so it's
49:24 - without any extension so let's create
49:27 - this file so now I have this Docker file
49:30 - in my D1 folder right
49:33 - so now I'm going to open this Docker
49:36 - file in any editor you can use the
49:40 - editor of your choice right from the
49:42 - Nano Bim or any editor I like to use the
49:46 - visual studio code editor so I'm going
49:48 - to use that so I'm going to just write
49:50 - code and then I'm going to just write
49:54 - dot which is going to open the current
49:57 - directory in my visual studio code so
50:01 - here I have this Docker file right now
50:04 - in Visual Studio code there are many
50:07 - extensions you can install related to
50:10 - Docker that's why I like to use this
50:14 - Visual Studio code and straight away
50:16 - when I open this Docker file in my
50:19 - visual studio code I can see this pop-up
50:23 - which says Docker extension is
50:24 - recommended for this file so you can
50:27 - click on this install button or you can
50:31 - just install this Docker extend
50:33 - attention from this extension option
50:38 - here also so you can just search for
50:40 - Docker here and then it will give you
50:43 - the most popular Docker extension right
50:46 - so just choose the most popular one from
50:49 - here and I'm going to just install this
50:51 - Docker extension and once this extension
50:54 - is installed it's going to help you with
50:57 - your Docker files and Docker commands in
51:02 - general okay so there are bunch of
51:05 - keywords which you can use inside your
51:08 - Docker file and each keyword means
51:11 - something so we will start with the ARG
51:15 - keyword so this ARG keyword we can use
51:19 - to provide any argument as the name
51:22 - suggests and I'm going to explain this
51:25 - ARG in detail after the other keyword
51:29 - which is from so here what I'm going to
51:31 - do is I'm going to just write the
51:34 - version here and version equals I'm
51:37 - going to give here is
51:41 - 20.04 so version here is the name of the
51:44 - argument and
51:47 - 20.04 is the value of the argument now
51:50 - after this we are going to use another
51:53 - keyword which is from now this from
51:56 - defines the base image used to start the
51:59 - build process so there are many base
52:02 - images which you can find on the docker
52:05 - Hub and we are going to use one such
52:09 - base image which is Ubuntu and then
52:12 - after colon you can choose which version
52:15 - of Ubuntu base image you want to have so
52:20 - here as I have defined this ARG is equal
52:24 - to 20.04 so we are going to fetch the
52:26 - Ubuntu
52:27 - 20.04 from the docker Hub as our base
52:32 - image so how how we can use this
52:34 - argument with this from a keyword you
52:39 - just need to use this dollar symbol and
52:43 - then inside these curly brackets you
52:46 - just need to pass your argument so my
52:48 - argument name is version so I'm passing
52:51 - this argument here this means that we
52:54 - want to fetch the Ubuntu
52:57 - 20.04 image from the docker Hub now this
53:01 - from instruction supports variable that
53:05 - are declared by any ARG instruction that
53:09 - occurs before the first from and an ARG
53:14 - declared before the from keyword is
53:17 - outside of the build stage so it can't
53:20 - be used in any instruction after from so
53:24 - now once we have the image we are going
53:26 - to use one more keyword which is the Run
53:31 - keyword so this run is the send Central
53:34 - executing directive for the docker file
53:37 - so this run you can use to run commands
53:41 - using the docker file so for now I want
53:44 - to run inside this Ubuntu base image
53:49 - apt-get update commands and also I'm
53:51 - going to give the flag y for yes and now
53:55 - let's move to the next command so the
53:57 - next command I'm going to use here is
54:00 - the CMD command so the CMD command can
54:04 - be used for executing a specific command
54:08 - within a container so let us say I just
54:11 - want to run the bash inside the
54:14 - container so I am going to just use
54:15 - these square brackets and with the
54:19 - double quotes I am going to just write
54:21 - bash here
54:23 - so this is a very basic Docker file now
54:27 - let's see how we can just use this
54:30 - Docker file to build some image so I'm
54:33 - going to open the terminal inside my
54:35 - visual studio code editor and as I can
54:40 - see I'm in my D1 directory which I have
54:43 - created and here I have this Docker file
54:46 - right so now let's list out what are the
54:49 - docker images we have on our system so
54:53 - I'm going to just write a sudo
54:56 - docker images command to list out all
55:00 - the images and now I want to run or
55:04 - build this Docker file and create an
55:08 - image so right now we have hello world
55:10 - and I want to create one more image
55:12 - using this Docker file
55:15 - so to build a Docker file you can give a
55:20 - command build so just write sudo Docker
55:24 - build and then dot so when you run this
55:29 - Docker build command the current working
55:32 - directory is called the build context
55:36 - and by default the docker file is
55:39 - assumed to be located in this directory
55:42 - but you can also specify the directory
55:47 - path using a flag called hyphen f that
55:52 - we will see a little bit later but just
55:54 - give this command for now which is sudo
55:58 - Docker build space dot so now you can
56:02 - see that when we run this Docker build
56:06 - command the build is run by the docker
56:10 - Daemon not by your CLI so the first
56:13 - thing a build process does is to send
56:17 - the entire context to the docker Daemon
56:20 - and that we can see here sending build
56:23 - context to the docker Daemon now in most
56:27 - cases it's best to start with the empty
56:30 - directory and then you start adding your
56:34 - Docker file in that directory now when
56:37 - you run this Docker build command you
56:40 - will also see that these layers are
56:45 - fetched from your base image from the
56:49 - docker Hub and also you will be able to
56:51 - see which step is executed so the step
56:55 - one out of four is this ARG step step 2
56:59 - is the from step and at this step it's
57:02 - going to pull the base image from the
57:05 - docker Hub and you have some
57:07 - intermediate layers here which are
57:10 - created and then we have used this run
57:12 - command which in itself has create
57:15 - created its own layer and its has
57:18 - installed the updates using this updates
57:22 - command and at last we have given this
57:24 - CMD command so now let's give the docker
57:27 - images command once again so I'm going
57:29 - to just give sudo Docker images command
57:32 - and now you're going to see this Ubuntu
57:36 - base image which is fetched from the
57:40 - docker Hub and you have this image which
57:43 - doesn't have any name or tag because we
57:47 - haven't provided any name or tag to our
57:51 - Docker image and this only have this
57:54 - image ID which you can see here also
57:57 - which is successfully build this image
58:00 - ID so using this image ID you know that
58:04 - your image is created here now let's say
58:08 - you are in some other directory other
58:11 - than the directory in which your Docker
58:14 - file is there
58:15 - so for building a Docker file from some
58:19 - different directory you use the hyphen f
58:23 - flag so what you do here you just use
58:27 - sudo Docker build and then hyphen f and
58:31 - then you just give the path to your
58:34 - Docker file so when you give this
58:37 - command and then you need to provide the
58:40 - context also so you need to create this
58:43 - context inside this current directory so
58:46 - when you give this command it is also
58:48 - going to give you the same result so
58:51 - because we have effectively given the
58:53 - same command so we don't need to modify
58:56 - our image so once again when you give
58:59 - the docker images command it's going to
59:00 - show the same image because your image
59:04 - is not modified and you haven't changed
59:07 - your context which is your current
59:09 - directory now as you can see we don't
59:13 - have any name and tag to our image so if
59:18 - you want to provide the repository name
59:20 - and the tag for your image what you can
59:24 - do is you can give this Docker build
59:29 - command and then give the hyphen T flag
59:33 - so using this hyphen T flag you can
59:36 - specify the repository and the tag at
59:39 - which you want to save your image so
59:42 - let's say I want to give the repository
59:44 - name as my underscore app and the tag
59:50 - which I want to give here is let's say
59:53 - one so after the colon you can provide
59:55 - the tag also here so when you run this
59:58 - command and don't forget to provide this
60:01 - context which is dot which is the
60:03 - current directory and then press enter
60:05 - it's going to just create the same image
60:10 - and you will see here an extra step is
60:13 - shown here which is tagged with my app
60:17 - colon 1. so at this step also you will
60:21 - observe that Docker is smart enough to
60:25 - know that you want to create the same
60:29 - image from the same Docker file and you
60:33 - haven't changed your Docker file so it's
60:35 - not going to change your image or create
60:39 - or recreate your image once again
60:41 - because we haven't changed our Docker
60:44 - file right we have just gave the
60:46 - repository name and the tag so now when
60:50 - you give this command Docker images then
60:54 - you will see that the repository name is
60:58 - my app and the tag associated with it is
61:01 - one so this is how you can give the
61:05 - repository name and the tag now if you
61:09 - will observe here we have our base image
61:13 - also here which is Ubuntu 20 3.04 so in
61:18 - future if you create different Docker
61:20 - file and it requires the same Ubuntu
61:24 - Docker image and the same tag which is
61:27 - 20.04 then your Docker build command
61:31 - will be smart enough to know that and
61:35 - it's not going to pull this image from
61:38 - the docker Hub again because you already
61:40 - have this image on your local PC so as I
61:45 - said we have fetched this Ubuntu image
61:46 - and the version for it is
61:49 - 20.04 here in the version if you don't
61:53 - know the version you can always write
61:55 - the latest so just try it latest here
61:58 - and it's going to just fetch the latest
62:01 - version of the base image you want to
62:05 - have so let me just save this file with
62:09 - the latest version and then run the same
62:12 - command with hyphen T my app and the tag
62:15 - will be the same and the context will be
62:18 - the same and now you will see that it is
62:22 - going to fetch the latest version of
62:25 - Ubuntu here and now when I give this
62:29 - Docker images command you will see the
62:33 - tag latest here instead of 20.04 which
62:36 - was this more specific version I wanted
62:40 - right so latest is the latest version
62:43 - which will be available on the docker
62:46 - hub for this base image so those are
62:50 - some of the basics of Docker files we
62:53 - are going to learn about Docker files in
62:55 - the upcoming videos also till now we
62:58 - have learned the basics of Docker files
63:01 - and how we can create Docker images
63:04 - using Docker files now in this video we
63:07 - are going to learn about Docker
63:09 - containers
63:11 - so as I have told you earlier when you
63:14 - run an image it's called a container
63:18 - so in the last video we have created
63:21 - this Docker file and we have already
63:23 - built our Docker file to produce an
63:27 - image so let's list out the docker
63:30 - images which we have created in the last
63:33 - video so just give the command Docker
63:37 - images here and this was the image which
63:42 - we have created we have named our image
63:45 - as my app and the tag which we have
63:49 - given to our image is one here now this
63:53 - is the image ID so let's see how we can
63:57 - run this image to create a container
64:01 - now in order to list out all the running
64:05 - containers you have the command which is
64:09 - called sudo Docker PS which is going to
64:13 - give you the list of all the running
64:15 - containers so right now we don't have
64:18 - any running container now if you want to
64:21 - see the list of all the container
64:24 - including running or thus exited
64:28 - containers then you can give the command
64:31 - with the flag hyphen a and it's going to
64:35 - give you the list of all the containers
64:37 - you have on your system so it is going
64:41 - to give you the list of all the running
64:43 - container as well as if they are exited
64:46 - and if they are no more running then
64:50 - also it is going to give you the list of
64:51 - all the containers so you can see I have
64:55 - ran this hello world container two
64:58 - months ago right and right now the state
65:01 - status of this container is exited that
65:04 - means it's not running so this is how
65:07 - you can see the list of all the
65:09 - containers
65:10 - now to run a container what you need is
65:14 - a command called run so you just write
65:17 - sudo Docker run and then you can give
65:22 - with this run command some options for
65:26 - example and then you give the name of
65:29 - the image so it requires the image in
65:33 - order to run a container and then you
65:37 - can give some commands so
65:40 - you can give some commands with the
65:42 - docker run image and also you can give
65:45 - some args here okay so let me just write
65:49 - args right so this is the basic syntax
65:53 - of a Docker run command so let's say we
65:58 - want to run our Docker image which is my
66:03 - app right so let me just once again give
66:08 - this Docker images command and I want to
66:10 - run this image so to run a container you
66:14 - just need one thing which is the docker
66:17 - image so you can just write sudo Docker
66:22 - run and then the image ID so this is the
66:26 - image ID of this repository which is my
66:31 - app so let's say we want to run this
66:34 - image so I'm going to just take the
66:36 - image ID of this image and then I'm
66:40 - going to just press enter and as soon as
66:44 - I press enter it's going to run the
66:46 - container and exits immediately so when
66:50 - I run this Docker run image ID command
66:55 - then it's going to run and it's going to
66:57 - exit immediately right so when you give
67:01 - this Docker PS command so let's list out
67:06 - all the running containers right so all
67:09 - the running containers still you will
67:11 - see there is no running container but
67:15 - when you give this command with hyphen a
67:18 - flag which means we want to see all the
67:22 - containers then it's going to show you
67:25 - that it ran this container with this
67:29 - image so we ran the container with this
67:32 - image and this is the same image which
67:35 - we have used in this Command right and
67:38 - it was exited about a minute ago right
67:42 - so it ran and it exited immediately
67:48 - now here one more interesting thing to
67:51 - note here is when you run the container
67:55 - with the Run command dot automatically
67:58 - generates a container name with a string
68:02 - of randomly selected numbers and letters
68:05 - so if you are wondering what this name
68:09 - is this is just a automatically
68:13 - generated name which is generated by
68:16 - Docker for you now if you want to give a
68:21 - specific name to your Docker container
68:24 - there is a flag for that so we are going
68:28 - to run the docker run command for the
68:32 - same image and this time what we are
68:34 - going to do is we are going to give some
68:37 - name to our container so before the
68:40 - image ID I'm going to just provide this
68:43 - name flag and then I can give the name
68:47 - to my container so the name I have given
68:50 - here is my Ubuntu container to my
68:52 - container and let's give the same
68:55 - command with this flag and once again
68:58 - you don't see any output here on the
69:01 - terminal but as I have told you it has
69:05 - just ran the container and exited
69:08 - immediately so when we give the docker
69:12 - PS hyphen a command once again you will
69:15 - see this time that now our container
69:20 - name is my Ubuntu container right so
69:24 - this was the container which ah we ran
69:27 - earlier and this time ah with the last
69:31 - Docker run command we have given the
69:34 - name to our container and the image was
69:37 - this one so image is unchanged but we
69:41 - have created a new container with the
69:44 - name my Ubuntu container right and the
69:47 - command which we ran is bada bash
69:50 - command which is coming from this line
69:56 - of Docker file
69:58 - now when you run your Docker containers
70:00 - it's run in two modes one is attached
70:05 - mode or in the foreground and other is
70:08 - in the detached mode or in the
70:11 - background and by default Docker runs
70:14 - the container in the attached mode that
70:18 - means it's attached to the terminal
70:20 - session where it displays the output and
70:23 - the message so if this Docker file has
70:27 - some commands or some output related to
70:32 - this Docker file then it is going to
70:35 - show you the output in the terminal when
70:39 - you run the container with the docker
70:41 - run command but because we don't have
70:44 - any output associated with the docker
70:47 - file it doesn't show any output right
70:50 - now if you want to run your Docker file
70:53 - in the detached mode what you can do
70:57 - here is you can give the hyphen D flag
71:00 - that means you want to run your
71:03 - container in the detached mode so just
71:06 - give hyphen D and then I'm going to give
71:08 - the same command here and let's see what
71:11 - happens and you can see it's going to
71:14 - give you this message which says error
71:17 - response from the demon conflict the
71:20 - container name this is already in use
71:23 - right so this container we have already
71:27 - defined so you cannot create this
71:29 - container with the same name so you need
71:33 - to give the different name here so let's
71:35 - say I am going to just give my Ubuntu
71:39 - container 2 now okay and then I have
71:43 - also given this hyphen D command to run
71:46 - it in the detached mode and now you will
71:50 - see that there is an output which is
71:53 - printed here and this is the container
71:57 - ID ID of your container now if you have
72:02 - observed here in the previous command
72:05 - where it has thrown this error
72:09 - it has this long container ID now when
72:13 - you give the docker PS hyphen a command
72:16 - you will see in the container ID some
72:19 - part of this container ID is shown so
72:23 - for example I can see here up to this
72:27 - part of the container ID is shown but in
72:30 - the background the container ID is so
72:34 - much bigger right so now when I give the
72:38 - docker p s hyphen a command once again I
72:42 - can see one more container which is
72:45 - created and the container ID you can see
72:48 - it is going to
72:49 - show you the starting few values of the
72:54 - container here until I think until D so
72:59 - using this ID also you can delete or
73:04 - work with your container or you can take
73:07 - the full ID of the container and work
73:09 - with your container okay so this ID will
73:13 - also work or in the short form or the
73:16 - first few uh
73:18 - letters of the ID will also work which
73:22 - is shown here now we have seen that how
73:24 - we can run our Docker container in the
73:27 - detached mode and as I told you that by
73:30 - default Docker runs the container in the
73:33 - attached mode or in the foreground right
73:36 - now let's see how we can run our
73:39 - container interactively so Docker allows
73:42 - you to run the container in interactive
73:46 - mode that means you can execute commands
73:49 - inside the the container while it's
73:51 - still running so let's see how we can
73:54 - run our Docker container interactively
73:57 - so now what I'm going to do here is I'm
74:00 - going to just create a new container
74:02 - let's say it's container 3 my Ubuntu
74:06 - container underscore 3 and I don't want
74:09 - to run it in detached mode instead I
74:13 - want to run this container in the
74:15 - interactive mode so here I can give
74:19 - hyphen i t flag which means that we want
74:25 - to run our container in the interactive
74:28 - mode and the image name is same which we
74:33 - have created using this Docker file so
74:35 - let's see what happens when I run this
74:37 - command like this so when I run this
74:40 - command like this you will see the bash
74:44 - shell which appears here and this is
74:49 - what I was expecting so now as you can
74:54 - see here in this Docker file when we
74:57 - have created this image the last command
74:59 - which we wanted is this bash command and
75:04 - it has just given us this bash command
75:07 - shell in the last right so this is how
75:10 - you can run your container in the
75:13 - interactive mode now when I open the new
75:17 - terminal so let this terminal be like
75:21 - this and let me open the new terminal in
75:23 - the visual studio code you can open the
75:25 - new terminal by just clicking on this
75:27 - plus button or you can open your default
75:30 - terminal on your operating system also
75:33 - you can see I'm in the second terminal
75:35 - and here I'm going to give this sudo
75:39 - Docker PS command without hyphen a that
75:42 - means I want to see only the running
75:45 - Docker containers and then I'm going to
75:48 - provide my pass word of my operating
75:51 - system and this time you will observe
75:54 - that
75:55 - when I give this Docker PS command is
75:58 - going to give me some output because now
76:01 - the container which I have created which
76:04 - is my Ubuntu container 3 is still
76:07 - running in the other terminal as you can
76:10 - see we have
76:12 - running bash shell in the docker
76:17 - container so this bash shell is running
76:19 - inside our container right so when you
76:24 - uh just give some LS command you will
76:27 - see the file system
76:30 - directories here inside your containers
76:34 - you can also give for example up time so
76:38 - as the name suggests the uptime command
76:40 - will give you the time for which the
76:43 - system has been up or running right and
76:47 - as we have seen in the last video we
76:50 - have only given this bash command so our
76:54 - container is not doing much it's just
76:57 - opening The Bash shell now there are
77:00 - many interesting things which you can do
77:02 - with your Docker run command and that we
77:06 - are going to see in the next videos also
77:08 - I want to show you uh some more commands
77:11 - related to Docker run and Docker in
77:16 - general so now what I am going to do is
77:19 - I'm going to switch to my terminal so
77:22 - I'm going to open my default terminal on
77:26 - my Ubuntu operating system also I'm
77:29 - going to open my browser and I'm going
77:30 - to just search for Docker Hub I want to
77:33 - show you how this Docker Hub looks like
77:36 - so the first link here is hub.docker.com
77:39 - and when you click on this link you will
77:43 - see this webpage here from where you can
77:47 - just sign in with your Docker ID which
77:51 - you have created earlier or you can
77:54 - search for some images so let's say I'm
77:56 - going to search for an image called busy
78:01 - box and then press enter and you will
78:05 - see an official image of busy box and as
78:09 - you can see you will see the tag here on
78:13 - the top which is going to show you if
78:15 - it's official it's going to show you
78:17 - it's an official image and otherwise
78:20 - it's going to show you verified or the
78:24 - other information associated with the
78:27 - image so the most popular one and the
78:29 - official one is this one so I'm going to
78:31 - just click on this
78:33 - base image and here I will see some more
78:37 - information related to this image so if
78:41 - I want to just pull this image on my PC
78:44 - I can just give this Docker pull busy
78:47 - box command so let's do this and I'm
78:51 - going to show you how we can use the
78:54 - docker run command with the busy box
78:56 - image which we are going to pull so I'm
78:59 - going to just write docker
79:01 - pull busy box here and then press enter
79:05 - and I'm going to just give my ubuntu's
79:08 - password which is going to just pull the
79:11 - latest tag image of the busy box right
79:14 - so if you don't provide any tag after
79:17 - colon then it's going to pull the latest
79:20 - image so now let's run the docker images
79:24 - commands
79:26 - so I'm going to just give images and now
79:30 - you can see this busy box image is there
79:33 - so you can run the docker run command
79:37 - with the images you have in this list
79:41 - also so till now we have seen how we can
79:43 - run the docker run command with the
79:47 - container which we have created but you
79:50 - can also use this Docker run command
79:53 - with the base images also for example
79:56 - busy box or Ubuntu
79:58 - 20.04 or Ubuntu latest version and I
80:02 - have pulled this busy box base image
80:05 - because it's very small in size you can
80:09 - see it's only around 1.22 megabytes so
80:13 - if you want to quickly test something
80:15 - with some Linux terminal or Linux
80:19 - operating system busy box is the image
80:23 - to go so now as I told you you can use
80:26 - this Docker run command with the images
80:31 - you have in your local PC so you can
80:35 - just give a Docker run and the name of
80:39 - your image which is busy box here
80:44 - and then you can do something with it so
80:49 - you can just write Echo so it means that
80:54 - we want to run the echo command inside
80:57 - our busy box container when it runs and
81:01 - let's say we just want to print hello
81:04 - world here so I'm going to just write
81:05 - hello world and then press enter and
81:09 - it's going to run this busy box image as
81:13 - the container and it's going to print or
81:16 - execute whatever command you have given
81:18 - after this busy box command right so
81:23 - basically what this means is we are
81:25 - running Echo inside our busy box
81:28 - container also when you give the docker
81:31 - PS hyphen a commands so let's give this
81:34 - Docker PS hyphen a and you will see this
81:39 - busy box command also so you can see
81:42 - this busy box and what command it has
81:45 - Ran So we have we ran Echo hello world
81:48 - and it was created 42 seconds ago and it
81:51 - was exited right so status is existed
81:54 - now let's say you just want to work with
81:57 - the BusyBox shell what you can do you
82:00 - can just give the same command but
82:03 - instead of giving this Echo you can run
82:06 - it in the interactive manner using this
82:11 - i t flag and then you can just tell that
82:15 - you want to run the shell so just write
82:18 - sh which is going to run this container
82:21 - and open the shell inside the container
82:24 - right so let's give this command and
82:27 - when you give this run command with the
82:29 - ID flag it attachs us to the interactive
82:33 - TTY in the container right so because we
82:37 - are running the sh command after this
82:40 - run command so it's going to open the
82:43 - shell inside your or busy box container
82:46 - and here again you can run your basic
82:50 - commands or whatever you want to do
82:52 - inside the container so we are not
82:54 - working inside our
82:56 - operating system we are working inside
82:59 - our container now in order to exit from
83:02 - the container you can just give this
83:04 - exit command and you will come out of
83:07 - this container now the last thing which
83:11 - I want to show you before just finishing
83:14 - this video and that is how we can remove
83:18 - some container so now we ran so many
83:22 - commands and we have so many containers
83:24 - and as you can see we have so many dead
83:28 - container that means all the containers
83:31 - are exited and they are not running
83:34 - anymore so when you give this Docker PS
83:38 - command you can see only one container
83:42 - is running and all the other containers
83:45 - when you see using hyphen a are exited
83:48 - so let's say you want to remove some of
83:51 - these containers so let me clear the
83:53 - terminal and let me just give this
83:56 - Docker PS hyphen a command so let's say
83:59 - I want to remove
84:01 - this container and this container so
84:04 - there is a very simple command which is
84:06 - called RM so you can just write sudo and
84:09 - then the docker command and then just
84:13 - give RM and then after that you can give
84:16 - the container ID of the container so
84:18 - let's say I want to just give this
84:20 - container ID of the container so just
84:23 - copy and paste this container ID and
84:26 - then press enter and if you see the
84:29 - container ID in return in the output
84:32 - that means this container is removed so
84:35 - once again when you give the docker PS
84:37 - hyphen a you will see that this
84:40 - container is already removed right so in
84:43 - the same way you can remove multiple
84:47 - containers using this RM command so you
84:51 - can just give container ID space
84:54 - container ID 2 space you can give
84:57 - multiple container ID in this manner and
85:00 - it's going to remove all the container
85:03 - IDs which you have given after the RM
85:05 - command so so right now we want to
85:07 - remove two containers and as I said if
85:10 - you see the container ID in the output
85:13 - that means that container is removed and
85:16 - in my case as I can see this container
85:20 - is removed but the container with this
85:24 - ID is not removed means the container
85:26 - with this ID is not removed because it's
85:29 - running right so if the container is
85:32 - running and if you want to remove it you
85:35 - need to stop this container first and
85:37 - then you can remove the container so as
85:42 - I have shown you this container is
85:44 - running here so I I can either just give
85:47 - this exit command or I can stop the
85:50 - container let's see how we can stop the
85:53 - container using a command called stop so
85:57 - let's say I want to just stop this
85:59 - container so I can just give the command
86:02 - Docker stop just write Docker stop and
86:07 - then the name of your container so my
86:11 - container name is this one so I want to
86:13 - stop this container and then press enter
86:15 - and if you see the container ID in the
86:19 - output that means this container is
86:21 - stopped so when you give this Docker PS
86:24 - without hyphen a you can see there is no
86:27 - container running anymore and now in the
86:31 - list of all containers you will see this
86:35 - container and now when you give this
86:38 - Docker RM with this container ID it is
86:43 - going to give you the output that means
86:46 - this container is successfully removed
86:48 - okay so you use stop command to stop the
86:51 - container and then you can use RM
86:54 - command to remove the container in the
86:57 - last few videos we have seen the
86:59 - fundamentals of using Docker files
87:02 - Docker images and Docker containers now
87:05 - in this video I want to give you a
87:07 - concrete example of using the docker
87:11 - container so I'm going to give you a
87:14 - real world example of how you can really
87:18 - use Docker containers and how these
87:21 - Docker containers are really useful in
87:24 - certain situations so we are going to
87:27 - compile and run a C plus plus program
87:30 - inside a Docker container now you might
87:34 - say that compiling and building a C plus
87:37 - plus program on your host operating
87:40 - system is also easy so why do we need a
87:44 - container so consider a situation in
87:47 - which you have a seek plus program and
87:50 - you want to compile a C plus plus
87:52 - program with different version of GCC
87:56 - let's say now it's really hard to
87:59 - maintain different version of GCC on
88:03 - your Linux or Windows operating system
88:06 - but using Docker containers it's really
88:10 - easy to use and compile your program in
88:15 - different GCC versions using Docker
88:19 - containers Also let's say you want to
88:21 - develop a c plus program which works on
88:24 - multiple operating system or you want to
88:27 - compile your C plus program for a cross
88:30 - platform application so Docker
88:33 - containers are really useful for C plus
88:36 - plus cross platform development with
88:39 - containers with containers you can
88:42 - choose a target with a platform that
88:45 - runs completely different operating
88:47 - system other than your host operating
88:51 - system or the system on which you are
88:53 - developing so let's say you are just
88:55 - working on your Windows operating system
88:57 - but you want to compile your C plus plus
88:59 - program on a LX operating system or any
89:04 - special version of Linux operating
89:06 - system you can do it easily with the
89:09 - docker container so let's start with our
89:11 - example so as you can see on my visual
89:14 - studio code I have opened a Docker
89:17 - folder and inside this Docker folder I
89:19 - have this directory D1 which we have
89:22 - created in the previous video and now I
89:24 - am going to create a new directory
89:26 - inside this Docker directory and I'm
89:30 - going to name this directory as D2 and
89:35 - now I'm going to just go inside this D2
89:39 - directory so let us go inside this T2
89:42 - directory and here inside this D2
89:44 - directory I am going to create a new CPP
89:48 - file let's say so you can use Touch on
89:51 - the terminal or you can just click on
89:53 - new file here and then just create a new
89:56 - CPP file with the extension
89:59 - CPP I am going to name my file as main
90:02 - dot CPP and as soon as you create a CPP
90:06 - file inside your Visual Studio code
90:09 - editor it's going to give you the
90:11 - suggestion for the C plus plus extension
90:13 - so I am going to install this C plus
90:15 - plus extension so now this C plus plus
90:17 - extension is installed and this C plus
90:20 - plus extension is going to help me to
90:23 - work with the C plus plus file inside my
90:27 - visual studio code editor so what I am
90:30 - going to do here is inside my uh
90:33 - main.cpb file I am going to just write a
90:36 - very simple program here with just
90:39 - prints hello Docker container so
90:43 - normally what you will do on your host
90:46 - machine if you have a g plus plus or GCC
90:48 - you can compile your C plus plus program
90:52 - using G plus plus right so you can see I
90:57 - have this main.cpp so I can compile this
91:00 - program using G plus plus hyphen o and
91:05 - then the executable file name which I
91:08 - want to create let's say I want to just
91:10 - give the name test to my file and then
91:14 - my main dot CPP file right so I'm going
91:18 - to just press enter which is going to
91:21 - create this executable file you can see
91:23 - here also I am going to do LS here also
91:26 - so you can see this executable file and
91:29 - now you can just run this test
91:32 - executable file or binary file using
91:36 - this command dot forward slash and the
91:38 - name of your binary file and it's going
91:40 - to print hello Docker container and I
91:44 - want to create a Docker container and I
91:46 - want to compile my C plus program inside
91:50 - my Docker container and I want to run my
91:53 - C plus plus program inside my Docker
91:56 - container this is what I have done in my
92:00 - host machine not inside my Docker
92:02 - container right so let me just clear the
92:05 - terminal and inside my D2 directory
92:09 - where my C plus plus file is there or my
92:12 - CPP file is there I am going to create a
92:15 - Docker file so I am going to just right
92:18 - click and I'm going to just create this
92:22 - talk a file here and then press enter
92:25 - and I can remove this test
92:28 - binary file because I do not need it for
92:32 - my Docker container now if you don't
92:35 - know which base image you want to use so
92:38 - for example if you want to use GCC to
92:41 - compile your C plus program you can go
92:45 - to Docker Hub and search for GCC here
92:48 - and when you search for GCC you will be
92:52 - able to find the official GCC image here
92:56 - you can see Docker official image or let
92:59 - us just press enter and see what result
93:03 - it gives so you can see the official
93:06 - image is this one with this official
93:09 - image tag and it has more than 10
93:12 - million downloads so I'm going to just
93:14 - click on this GCC
93:17 - link and you can see when you just
93:21 - scroll down what are the tags you can
93:23 - use with gccu also you can see how you
93:27 - can pull this GCC base image using
93:30 - Docker so the name is really simple GCC
93:33 - so what we are going to do is we are
93:35 - going to just write
93:37 - from and then our base image I'm going
93:40 - to use here is GCC now the version or
93:45 - the tag I want to use here is the latest
93:49 - or you can choose the tags which are
93:53 - available here so you can choose
93:56 - 10.2.0 or 10.2 or from all these tags
94:01 - which are available here you can also go
94:04 - to tags section and see the more
94:07 - specific tags you want to use for your C
94:10 - plus plus program so now once we have
94:13 - the base image the next step is to copy
94:15 - our current folder which contains our
94:18 - CPP code into the docker image under the
94:22 - file system where we want to copy this
94:26 - so for copying our local files into the
94:31 - docker image we use this copy command OK
94:35 - and as you can see it suggests us ah
94:38 - that we need to provide the source so
94:40 - Source in our case is dot because we
94:44 - want to copy all the files from the
94:46 - current folder and the destination will
94:48 - be the destination inside the file
94:51 - system of your Docker image in our case
94:54 - it's GCC so in GCC base image file
94:58 - system you will find this path which
95:02 - already exists there so you can just
95:05 - write user forward slash SRC which is
95:09 - already there inside the file system of
95:12 - GCC base image okay so as I said this
95:17 - command is going to copy all the files
95:19 - which are there in your local directory
95:23 - to this directory inside your Docker
95:27 - image okay now if you want to copy some
95:31 - specific file then you can do this also
95:35 - you can just write main dot CPP and then
95:38 - you can copy a specific file into the
95:43 - folder which should already exist inside
95:47 - your image which you are using right so
95:51 - for now for Simplicity I would just want
95:53 - to copy all the files from the color
95:55 - current directory to user forward slash
95:58 - Source forward slash the directory which
96:02 - we are going to create so let's say we
96:03 - want to create this directory where we
96:06 - want to copy all the file CPP test let
96:08 - us say so this path already exists in
96:11 - the file system and this is the folder
96:13 - name which we want to create and copy
96:16 - our local files to this folder in the
96:20 - docker image right now we are going to
96:23 - define the work directory so we can just
96:27 - use this work dir keyword to define the
96:32 - working directory in which you want to
96:35 - work now okay so because because we want
96:39 - to work inside this directory because we
96:43 - are copying our C plus plus file inside
96:45 - this directory we are going to set our
96:47 - work directory as this one that means
96:51 - when you run any command it's going to
96:54 - run inside this directory which you set
96:57 - as work directory now in the next step I
97:01 - want to run the command which will
97:04 - compile the C plus plus program using
97:07 - this main dot CPP so now I can just give
97:11 - the G plus plus command then hyphen o as
97:15 - the flag and let's say I want to name my
97:18 - binary as test and the file name which I
97:22 - want to compile is mean dot CPP so this
97:26 - run command is going to compile my C
97:29 - plus program inside my CPP test
97:32 - directory under user Source folder right
97:35 - now in the next step I am going going to
97:38 - give the command using CMD which will be
97:42 - the command which I want to run inside
97:43 - the container so this is going to run
97:47 - the program output from the previous
97:49 - step into our container so this works
97:53 - like this as you have already seen in
97:55 - the last video also so if you want to
97:57 - run your binary you can just give dot
97:59 - forward slash and the name of your
98:01 - binary which is test right so this
98:04 - binary is going to be run using this CMD
98:09 - command inside our container so that's
98:11 - it that's how you can create this Docker
98:14 - file to compile your C plus program and
98:17 - run it now let's build our Docker file
98:20 - to create an image for that you can just
98:22 - give sudo
98:24 - Docker than your build commands so build
98:29 - and then the build context and then you
98:32 - can provide hyphen T to provide the name
98:34 - of your image I'm going to name my image
98:37 - as CPP underscore test for example and
98:42 - then you can also give the tag to your
98:45 - image let's say I want to provide the
98:47 - tag one to my image okay so this is
98:50 - going to create a Docker of image using
98:54 - the docker file so you can see it has
98:56 - pulled the base image in the first step
98:58 - then copied our files from the local
99:02 - directory to the directory which we have
99:04 - defined and then it has set the work
99:07 - directory and then in the next step it
99:09 - has compiled our C plus plus program and
99:12 - in the last step we have set the test
99:17 - binary to run when we run our container
99:20 - so now let's list out all the images you
99:23 - can just give Docker images command for
99:27 - that and you will see that this
99:29 - repository is created about a minute ago
99:32 - and this is the image ID for that image
99:36 - right so now we want to run our
99:40 - container using this image so for that
99:43 - we have seen in the last video we can
99:45 - give sudo
99:46 - Docker run command and then I'm going to
99:50 - give the hyphen hyphen RM flag and this
99:54 - RM flag causes Docker to remove
99:58 - automatically the container if it
100:00 - already exists so if the container which
100:03 - we are going to run already exists then
100:06 - it's going to remove that container and
100:09 - then it's going to rerun that container
100:12 - so this command is handy when you want
100:14 - to just run only one container at a time
100:18 - and then I'm going to give this i t flag
100:20 - with hyphen so I T flag for running this
100:24 - container in the interactive mode and
100:27 - then your image so you can give this
100:31 - image name CPP test here or image ID
100:34 - also you can give so I am going to give
100:37 - the image name which is CPP underscore
100:40 - test with the tag so tag we have
100:44 - provided is one okay so here as I said
100:47 - you can give the image ID or the
100:50 - repository name and the tag and then
100:53 - when you run this Docker container it's
100:56 - going to print hello Docker container
100:59 - that means we ran the test binary inside
101:02 - our Docker container right now as I said
101:05 - you can change this tag instead of
101:08 - latest you can choose the version of GCC
101:11 - you want to use for compiling and
101:14 - running your C plus programs so that's
101:16 - why this Docker and Docker containers
101:19 - will help you to just cross compile in
101:23 - cross platform applications now let's
101:25 - say you want to compile your C plus plus
101:27 - program using the C language compiler
101:31 - instead of GCC okay so we want to
101:34 - compile our program using C language
101:36 - compiler instead of GCC so let me clear
101:39 - this terminal and let me go One
101:43 - Directory up here and I'm going to
101:45 - create a new directory so I am going to
101:47 - just write I am kdir ah D 3 and inside
101:52 - this D3 directory what I want to do is I
101:55 - want to just have the same CPP file so I
101:59 - will just copy this cpv file into the D3
102:03 - directory also and then we are going to
102:06 - create a Docker file inside this D3
102:10 - directory so let us create this Docker
102:13 - file here
102:15 - so now let's move to the docker Hub
102:17 - website and let's search for C Lang if
102:20 - we have something related to C language
102:22 - compiler on Docker or not so I am going
102:25 - to just write C Lang here
102:27 - and
102:28 - as I remember there is no official a
102:32 - base image for C language on the docker
102:35 - Hub so what we can do we can use the
102:38 - base images we already have on our
102:40 - system and then we can install the C
102:43 - language compiler on that base image so
102:47 - I'm going to just give this sudo ah
102:50 - Docker images command and from these
102:54 - images let's say we will use this Ubuntu
102:57 - latest or Ubuntu 20.04 to compile our C
103:01 - plus plus program inside the Ubuntu base
103:04 - image using the C language compiler okay
103:07 - so what I am going to do is I am going
103:10 - to just write this kind of Docker file I
103:14 - am going to explain you all the steps
103:16 - one by one so we want the base image
103:19 - Ubuntu with the tag latest because we
103:22 - already have downloaded or pulled this
103:26 - image in the previous videos so we do
103:28 - not need to pull it once again now in
103:31 - the next step I am running apt get Y
103:34 - update and apt get install update to
103:39 - update apps on the base image so that's
103:42 - what you do when you want to install any
103:46 - software on your Ubuntu operating system
103:49 - so this command is going to update the
103:52 - apps on the base image now in The Next
103:55 - Step using this apt get hyphen y install
103:58 - C language command we want to install C
104:01 - language on our base image which is
104:04 - Ubuntu right The Next Step are
104:07 - relatively easier because we have seen
104:10 - these steps in the other Docker files
104:13 - also so we want to copy all the files in
104:17 - the current directory into this
104:19 - directory inside our base image and then
104:23 - we want to set the work there which is
104:27 - the same where we have copied our c plus
104:30 - files and then to compile your C plus
104:34 - plus program using C language you can
104:37 - just replace the GCC with C language
104:40 - plus plus and the rest of the command
104:43 - will look like same as you have seen in
104:46 - the case of GCC also so you can see G
104:49 - plus plus hyphen node test main dot CPP
104:52 - and here also you can give this command
104:55 - the only thing I want to change here is
104:58 - the main dot CPP the file name here okay
105:02 - because our binary name is test we are
105:05 - going to just run this binary using this
105:08 - command so this is going to run inside
105:10 - or container okay in the D3 folder I
105:14 - have created this Docker file to compile
105:16 - my C plus plus program using C language
105:19 - and I'm going to run this now so let me
105:23 - clear the terminal once again so now
105:25 - let's build our Docker image using this
105:28 - Docker file file so for that I need to
105:30 - go inside the D3 directory and then I'm
105:34 - going to give the docker
105:37 - build command with the context or in the
105:41 - current directory and then hyphen T to
105:44 - give the name of my
105:47 - image so let's say I want to give the
105:50 - name to my image as C language
105:52 - underscore CPP and the version or the
105:55 - tag which I want to provide here is let
105:57 - us say
105:58 - 1.0.0 okay so let's build our image
106:02 - using this command
106:04 - so now as you can see the build of this
106:06 - image is successful with the name c
106:10 - language underscore CPP and the tag
106:13 - 1.0.0 so let's run the container for
106:16 - this image using the docker run command
106:18 - so I'm going to just provide
106:21 - sudo
106:22 - docker
106:24 - run
106:25 - oops by mistake I pressed Ctrl C that's
106:28 - why it breaked so let me just give this
106:31 - command once again and then give this
106:34 - image name with the tag
106:37 - 1.0.0 so we want to run our container
106:40 - using this image so let's press enter
106:43 - now
106:45 - and as expected we see Hello Docker
106:50 - container that means we successfully ran
106:53 - this binary file which is compiled using
106:57 - C Lang in our container and the output
107:01 - is printed
107:03 - now let us say you want to change
107:05 - something in the output so instead of
107:08 - let us say hello Docker container I just
107:10 - want to print hello
107:12 - World here okay so I will just save this
107:16 - program and then I can just build it
107:20 - again but this time I will build it with
107:24 - the different tag so let's say I just
107:27 - did the minor change so I will just
107:29 - change the tag as
107:31 - 1.0.1 so let's build this image which is
107:35 - going to be built really fast and now
107:38 - let's run this image using this Docker
107:41 - run command but don't forget to change
107:44 - the tag because I have changed the tag
107:47 - for the image also to
107:49 - 1.0.1 so here also I am going to change
107:52 - the tag for the image and then press
107:54 - enter which is going to run this program
107:56 - and it prints hello world so how simple
108:00 - is this
108:01 - so this is how you can compile and run
108:04 - your C plus plus programs using Docker
108:07 - containers
108:09 - so as I said I just wanted to give you a
108:12 - real world example same thing you can do
108:14 - for your Java programs or any other
108:18 - programs which you want to run in
108:20 - different environments in this video we
108:23 - are going to see how we can do Port
108:26 - mapping between your Docker container
108:28 - and your host machine so let's say you
108:31 - have some kind of a server and that
108:35 - server listens on some particular Port
108:39 - so you need to expose your Port from
108:45 - your Docker container so the outer world
108:49 - will be able to interact with your
108:52 - server so in this video we are going to
108:55 - take an example of a node.js server the
109:00 - same Concepts you can apply on any other
109:04 - kind of server it can be a nginx server
109:07 - it can be a python flask or our Django
109:10 - server or any other kind of server so
109:13 - let's start with our example of
109:16 - dockerizing our node.js web app so what
109:21 - I'm going to do is I'm going to just
109:23 - create a new directory for me so I'm
109:27 - going to just write mkdir
109:29 - D4 and then I'm going to go inside that
109:34 - the for directory and here I'm going to
109:38 - create a new node.js app so for
109:42 - initializing my app I'm going to just
109:44 - write npm init and then hyphen Y and
109:49 - then press enter which is going to
109:51 - create
109:52 - uh package dot Json file inside my D4
109:56 - folder
109:57 - now for This node.js Server I will be
110:01 - using Express so I need to install
110:04 - Express locally for this app so if you
110:09 - already know something about node.js or
110:13 - npm you can easily install the npm
110:18 - package using npm install
110:21 - and the package name in our case X its
110:25 - Express which is a very popular
110:28 - node.js package or npm package so I am
110:32 - going to just write Express here and
110:35 - then I am going to give this save flag
110:38 - here so it is going to be installed
110:41 - inside my directory and this Express
110:44 - will be added as the dependency in my
110:48 - package.json file so let me press enter
110:52 - which is going to install this Express
110:54 - package
110:57 - in my directory you can see this new
111:01 - directory is created which is node
111:03 - modules and this new dependency is added
111:07 - in my
111:09 - packet.json which is Express so now
111:12 - let's create our
111:13 - server.js file so if you can see in our
111:16 - packet dot Json file the main entry
111:20 - point right now is the index.js you can
111:24 - change it to a server dot JS and let us
111:29 - create this
111:31 - server.js file server dot JS here and
111:36 - then press enter which is going to
111:38 - create this
111:39 - server.js file so we are going to write
111:42 - a very simple
111:44 - node.js code which is going to use
111:47 - express and it's going to just print
111:49 - hello world whenever somebody will make
111:54 - a get request to This Server so I'm
111:58 - going to just uh
112:00 - copying and pasting this code because
112:02 - this code is available everywhere and
112:06 - it's very simple so what I have done I
112:09 - have just imported ah this Express and
112:13 - then I have created these two variables
112:15 - one is the port variable which will be
112:18 - exposed via a browser or a via the rest
112:24 - request and then we have the host here
112:28 - which is basically the local host and we
112:32 - have one get request here so whenever
112:35 - somebody makes a get request to the
112:37 - server we are going to just send hello
112:40 - world so very simple node.js server code
112:43 - and we are going to run this code let me
112:46 - clear this terminal so I'm going to just
112:49 - write node and the name of my server
112:53 - file which is server.js and when I just
112:57 - run this server.js using node.js is it's
113:01 - running like this and it's printing on
113:04 - which host and ports it's running so
113:07 - let's open our browser and we are going
113:10 - to just uh open this URL which is
113:15 - 0.0.0.0 uh colon the port number on
113:19 - which we have started this node.js
113:21 - server and I I'm going to just press
113:24 - enter and it just prints hello world
113:27 - which is the expected result right
113:30 - so now we want to dockerize our node.js
113:35 - server so let's see how we can dockerize
113:38 - our node.js server so for that I'm going
113:40 - to just close this app or stop this app
113:45 - and now I'm going to create a new Docker
113:48 - file so let's just create this Docker
113:51 - file by just giving this command which
113:54 - is touch Docker file now I'm going to go
113:58 - inside my Docker file and here inside my
114:02 - Docker file I'm going to use the node
114:05 - base image so when you go to the docker
114:08 - Hub there is an official base image for
114:13 - node.js and that is what we are going to
114:15 - use so I am going to just try it from
114:17 - and the base image will be node and the
114:21 - version of node we are going to use is a
114:24 - version 12 so you can use the latest tag
114:28 - also here which is going to give you the
114:30 - the latest version
114:32 - now in the next step I am going to
114:34 - define the working directory using the
114:38 - work their keyword and we are going to
114:43 - Define this work there in the
114:47 - user forward slash SRC for slash app
114:52 - folder
114:53 - and now this should be work data right
114:57 - so
114:58 - like this okay so we have defined our
115:03 - working directory inside this working
115:06 - directory we are going to ah copy our
115:08 - code and then we are going to do all the
115:12 - stuff
115:13 - now ah let us copy uh all the files
115:16 - which are there in our current folder to
115:21 - this Docker image so we are going to use
115:25 - the copy keyword to copy uh all the
115:28 - files but first of all we need to copy
115:31 - the
115:33 - package.json to The Container so that we
115:36 - will be able to run the npm install
115:39 - command and npm install command what it
115:43 - does it just installs all the
115:46 - dependencies into our container right so
115:50 - let's first of all copy the package dot
115:55 - Json file so we are going to copy the
115:57 - package log dot Json file and package
116:01 - dot Json file so these two files are
116:05 - responsible for all the dependencies to
116:08 - this directory right so now we have
116:11 - copied the package Json files so next
116:16 - step is to install all the dependencies
116:18 - using npm install so you can just give
116:22 - this command run npm
116:25 - install
116:26 - now if you are working in the production
116:31 - environment this command can be little
116:34 - bit different let me just write this in
116:37 - the form of comment so you can just
116:39 - write run npm CI and then you can give
116:44 - this only production flag production
116:48 - okay so if you are working in the
116:51 - production environment you can give this
116:53 - command if you are working in the
116:55 - development environment then you can
116:58 - just do this command so npm install will
117:02 - install all the dependencies and in our
117:04 - case there is only one dependency which
117:07 - is Express right so via this npm install
117:11 - this Express npm package will be
117:14 - installed in our Docker image now
117:19 - in The Next Step once all the
117:22 - dependencies will be installed we are
117:25 - going to just copy all the files which
117:28 - are there in our server code so we only
117:32 - have this one file which is server.js
117:35 - but let's say you have many modules and
117:39 - many files inside your node.js projects
117:42 - so I'm going to just write copy and then
117:46 - I'm going to copy all the files and
117:50 - folders which are there in the current
117:52 - directory okay now next step is
117:56 - important and this step is we are going
118:00 - to expose our Port so I'm going to just
118:04 - write expose
118:07 - and we are going to expose the port
118:10 - which we are using in our server so we
118:14 - are using uh port 8080 in our server so
118:17 - we are going to expose this port that
118:19 - means that we want to expose port 8080
118:23 - into our Docker container so this
118:27 - exposed keyword means that we want to
118:30 - expose port 8080 from our container to
118:34 - the outside world for example to our
118:37 - host machine and this expose is a way of
118:42 - documenting so it's not going to publish
118:45 - your port at runtime it's just a way of
118:50 - documenting in your Docker file that you
118:54 - intend to expose this port 8080 in your
119:00 - Docker container so exposing Port using
119:04 - this expose keyword is a way of
119:07 - documenting which Port are used but it
119:12 - does not actually map or open any port
119:15 - we are going to open and map the port
119:18 - using the docker run command and we are
119:22 - going to use a different flag for
119:25 - publishing our port or opening or
119:28 - mapping our Port later when we just
119:32 - build and run our our Docker now the
119:36 - next step here will be to run our
119:39 - node.js application and we all know that
119:43 - we just need CMD
119:46 - and then inside our square brackets we
119:48 - will just write npm and then we are
119:52 - going to just give this comma and then
119:55 - we are going to give the name of our
119:58 - server.js file so this will be server
120:02 - dot JS now here one interesting point to
120:07 - note here is when we are going to copy
120:10 - uh all the files and folders from our
120:14 - current directory
120:16 - to the docker image you can see I have
120:19 - used dot dot that means it is going to
120:22 - copy node modules also into your Docker
120:27 - image and we have already installed our
120:30 - node packages using this npm install so
120:34 - this is going to override this node
120:38 - modules folder from your image right so
120:43 - to avoid copying your node modules ah
120:47 - into your Docker image you can create a
120:51 - Docker ignore file so this Docker ignore
120:54 - file is going to prevent your local node
120:57 - modules or your debug logs from being
121:01 - copied into your Docker image so let's
121:04 - uh just create this Docker ignore file
121:08 - so to create this Docker ignore file you
121:13 - can just write touch dot Docker ignore
121:17 - in the same format which I have used so
121:21 - this format is recognized by Docker and
121:26 - whatever you write inside this Docker
121:29 - ignore file so let us create this Docker
121:32 - ignore file first of all so we have
121:34 - created this Docker ignore file and we
121:37 - want to exclude the npm modules and npm
121:43 - debug DOT log file
121:46 - from copying into our image so this
121:49 - means that we have added npm modules and
121:54 - the npm debug log file ah which will be
121:58 - excluded when we are going to copy the
122:01 - files from our local container to the
122:04 - docker image okay so this will avoid the
122:08 - overwriting of our npm modules now we
122:12 - are done and we can build our image so
122:15 - let me clear this terminal so now let's
122:18 - build our image by giving the docker
122:22 - build command so I'm going to just write
122:23 - sudo ah docker
122:27 - build hyphen T and then the image name
122:32 - so let us say I am going to just give
122:34 - the name node underscore
122:37 - test
122:38 - colon the tag you can give any tag to
122:42 - your image so let's say I am going to
122:45 - give
122:46 - 1.0.0 or tag to my image and then the
122:50 - context and then press enter which is
122:53 - going to just build this image
122:56 - and in few seconds this image will be
123:00 - created so let me clear this terminal
123:03 - once again and let's list out all the
123:06 - images so sudo
123:09 - docker
123:10 - images
123:12 - and when you see here our Docker image
123:16 - is created with the tag
123:18 - 1.0.0 15 seconds ago okay so now we are
123:24 - going to run our container so to run our
123:27 - container we can just use sudo
123:31 - Docker run so as I told you we want to
123:35 - expose this port 8080 so that ah this
123:39 - server can listen to the request from
123:42 - the outside the container right so in
123:46 - order to map the port we use the flag
123:50 - which is called hyphen P which is also
123:53 - called publish and hyphen p is a way of
123:57 - mapping a host port to a running
124:01 - container Port so this is our running
124:05 - container port and let's say we want to
124:07 - map this port which is running inside
124:11 - the container to our Local Host machine
124:17 - and we want to let us say give the port
124:21 - 3000 in our Local Host machine and which
124:25 - is going to be mapped to port 8080 so if
124:30 - you specify this expose the port and if
124:35 - you specify this publish flag to map the
124:38 - ports then the service in the container
124:40 - is accessible from anywhere even outside
124:44 - the docker so this means that we want to
124:48 - expose port 8080 from our container to
124:52 - the port 3000 inside our host machine
124:57 - and now let's give the name of our image
125:01 - which we want to run which is node
125:03 - underscore test colon
125:07 - 1.0.0 okay and let us ah run this Docker
125:12 - container and this gives me error and
125:15 - the error is obvious because instead of
125:18 - using npm I should have used node okay
125:22 - because we have started our server using
125:25 - node command not npm npm we used just
125:28 - for installing our packages and man
125:31 - managing our packages right so let's
125:33 - rebuild our image once again and once
125:37 - our image is rebuilt we are going to
125:40 - just run our container so now our
125:43 - container is running and we can see the
125:45 - same output now we might be confused or
125:50 - you might be confused that we are
125:53 - exposing the port 8080 and when we go on
125:58 - this URL on our browser so let's go to
126:02 - this URL on our browser and let's see if
126:05 - it works or not so it's not going to
126:07 - work because we have mapped the port
126:10 - 8080 to the port
126:13 - 3000 on our local machine so this is the
126:17 - port
126:18 - on the container on your Docker
126:21 - container and this is the port which it
126:25 - will listen on your local machine so we
126:28 - want to listen on Port 3000 on our host
126:32 - machine so instead of port 8080 you can
126:37 - give Port 3000 and it's going to print
126:40 - hello world
126:41 - right so this is how this port mapping
126:44 - work so this will be the port
126:48 - which will be available on your local
126:51 - host and this is the port you have
126:54 - exposed inside your Docker container so
126:59 - let me just stop this container so I am
127:02 - going to go to the next terminal and I'm
127:04 - going to just write sudo
127:07 - Docker PS to list out all the running
127:12 - containers and this container is running
127:15 - so I'm going to just use the container
127:18 - ID from here just copy the container ID
127:20 - and then sudo
127:22 - and then the container ID which is going
127:25 - to stop this container so now this
127:28 - container is stopped and you can see uh
127:32 - in this terminal also that we are out of
127:36 - the container right so now let us say
127:39 - let me just ah clear this terminal and
127:42 - now let us say we want to map to the
127:45 - port 8080 itself on our host machine
127:49 - also from our Docker container so this
127:54 - is the port on the docker container and
127:56 - we want to map this port to the same
127:59 - port on our host machine if it's
128:01 - available then it's going to run fine so
128:04 - let's run this command and now this time
128:08 - when you go to the browser
128:10 - on Port 3000 obviously you will not get
128:14 - anything because we have mapped uh the
128:17 - port 8080 to our host machine now and
128:21 - now uh when you give port 8080 it's
128:24 - going to give you hello world if you
128:27 - want to run this server in the detached
128:30 - mode as I have told you you can use
128:32 - hyphen D so that this node just will run
128:35 - in the detached mode that means it will
128:38 - run in the background so this is how you
128:42 - can expose the HTTP Port you can also
128:45 - expose the TCP port and the UDP Port
128:49 - from your Docker container so let me ah
128:54 - just stop this container so I am going
128:56 - to just stop this container first of all
129:00 - and let me show you how you can expose
129:02 - the UDP and the TCP ports so let us say
129:07 - you are running a application and and in
129:11 - this application you are doing some TCP
129:14 - communication or the UDP communication
129:17 - so for mapping the TCP port and the UDP
129:22 - Port you uh can use the flag hyphen p
129:26 - and then you can use this kind of
129:29 - notation so the port which you want to
129:32 - expose from your container let's say I'm
129:35 - just exposing Port 80 and forward slash
129:38 - TCP so in case you want to expose the
129:42 - TCP Port you just need to write forward
129:45 - slash TCP after the port which you want
129:50 - to expose from your container and this
129:52 - will be the port you want to expose to
129:56 - the host machine so this port will be
130:00 - available on your host machine
130:03 - from this port to your container so this
130:06 - is the mapping right for UDP you just
130:09 - write forward slash UD P right so the
130:13 - flag is hyphen P you just need to write
130:17 - forward slash TCP or forward slash UDP
130:20 - to expose the UDP or the TCP flag you
130:26 - can expose multiple ports also by using
130:29 - this hyphen P flag so its not that you
130:34 - just can use only one hyphen P flag you
130:38 - can use multiple hyphen P Flags to
130:41 - expose multiple ports from your
130:43 - container to the host machine
130:48 - so this is how ah put mapping Works in a
130:51 - Docker I hope you have understood this
130:54 - concept so in this video we are going to
130:57 - talk about Docker Hub so what is Docker
131:00 - Hub so Docker Hub is a service provided
131:03 - by Docker for finding and sharing your
131:06 - container images with your teams or with
131:09 - the general public so as you can see I'm
131:13 - on this website which is Hub Dot
131:16 - docker.com and here I can sign in at the
131:20 - time of downloading the docker on your
131:23 - operating system you might have created
131:25 - a Docker ID for you and the password for
131:30 - you so you can log in with that Docker
131:32 - ID and password so once you are signed
131:34 - in with your Docker ID and password you
131:38 - will be able to see this kind of web
131:40 - page here you have this explore option
131:43 - where you can explore all the other rep
131:48 - repositories you have this repository
131:51 - option
131:51 - and under this repository option you
131:54 - will be able to see and manage your
131:57 - repositories which you have created and
132:00 - which you have pushed into your Docker
132:03 - registry here you also have the option
132:06 - for organization which we are not going
132:09 - to cover in this video and also you have
132:12 - all these General uh account related
132:16 - stuff here right now let's talk about
132:19 - the pricing a little bit so you can see
132:23 - uh for public repository Docker Hub is
132:26 - absolutely free and that's what we are
132:29 - going to be using but if you are working
132:33 - in an organization or you want to create
132:36 - some private
132:38 - repositories for your Docker images then
132:42 - you can choose one of these options
132:44 - which are provided here also it's not
132:47 - necessary that you need to use Docker
132:50 - Hub as a Docker registry you can create
132:55 - a Docker registry you have this
132:57 - documentation which you can use to
133:00 - create a Docker registry I know Google
133:03 - Cloud provide a Docker registry or a
133:06 - GitHub or nowadays also provide these
133:09 - kind of Docker Registries so you can
133:11 - create your own registry if you want you
133:14 - don't need a Docker hub for just
133:17 - managing your images right so right now
133:19 - you can see I don't have any image on my
133:23 - Docker Hub account so to start with I
133:26 - have this very simple Docker file which
133:29 - I want to convert to the docker image
133:32 - and then I want to push that image to my
133:35 - Docker Hub registry
133:38 - so let me list all the docker images on
133:41 - my operating system right now I don't
133:43 - have any image so let's build one image
133:46 - so I'm going to just write
133:48 - sudo Docker build dot hyphen T and the
133:54 - name of the image I'm going to just name
133:56 - my image as hello and then press enter
133:58 - which is going to just create this image
134:04 - I have this hello world image which is
134:06 - created five seconds ago right so now
134:09 - let me just also quickly run this image
134:13 - to see everything is working so I'm
134:15 - going to once again write sudo Docker
134:19 - run hyphen hyphen RM hyphen i t and the
134:26 - name of the image which is hello and
134:28 - then press enter and it prints the
134:32 - content of my main dot CPP that's what
134:36 - it's doing so that's a very basic
134:39 - minimal image the size is very small
134:42 - that's why I have done this and once you
134:45 - have all these images let me just clear
134:48 - the terminal and then let me just move
134:51 - this terminal little bit up and let's
134:53 - just list all the images once again
134:56 - so now I have this image hello and I
134:59 - want to push this image to my Docker Hub
135:02 - registry so in order to push this image
135:05 - first of all you need to log in with
135:07 - your Docker ID into your Docker terminal
135:12 - most probably you are already logged in
135:15 - but if you are not you can just give
135:17 - this command which is a sudo docker
135:22 - login
135:23 - and if you want to log out then you can
135:26 - just write log out here right so let's
135:29 - give this command which is a sudo Docker
135:32 - login and then give your username here
135:35 - I'm going to provide my username and
135:37 - then you need to provide your password
135:40 - so let me quickly provide my password
135:42 - and then press enter
135:44 - which is going to log me in the docker
135:49 - so you can see login succeeded and now I
135:52 - can just push my images to my Docker Hub
135:56 - registry so first thing we generally do
135:58 - in order to push the image to the
136:01 - registry is we just tag it so we can
136:04 - give this command which is a Docker and
136:08 - then tag and then the name of your image
136:11 - my image name is hello you can also take
136:14 - the image ID and then give the space and
136:17 - then give some tag to your image so
136:21 - right now because I want to push my
136:26 - Docker image to this Docker Hub account
136:29 - and which has the username code bind I
136:32 - will just first of all write code bind
136:36 - here and then forward slash and then you
136:39 - can give the name of your image I will
136:41 - just leave it as hello and then you can
136:44 - give the tag of your image so I'm going
136:46 - to just give the tag one 0.0.0 so this
136:51 - tag is useful whenever you want to just
136:55 - let us say keep working on your image
136:57 - and you want to update the image and
137:02 - want to adjust version your image into
137:05 - multiple versions so you have the track
137:08 - of all these versions right so I'm going
137:12 - to just tag my image I'm going to press
137:14 - enter and then I will once again list
137:17 - all the images and now you can see I
137:20 - have this image which the this name and
137:24 - I have the tag 1.0.0 right now once you
137:27 - do that you are ready to push your image
137:30 - to the docker registry the command is
137:33 - very simple sudo
137:35 - Docker push and the name of your Docker
137:40 - file which is codebind forward slash
137:43 - hello in my case you also need to give
137:46 - the tag here
137:48 - 1.0.0 and then you can just press enter
137:52 - which is going to push your image to
137:55 - your Docker Hub registry so just wait
137:58 - for some seconds
138:03 - and you can see it's pushed so I am
138:06 - going to go to my Docker Hub webpage and
138:11 - then refresh this web page
138:14 - and now I can see this image which is
138:18 - available here and also you will be able
138:21 - to see that this image is a Public Image
138:24 - so it's not private so anybody on Docker
138:28 - can see your image right
138:31 - also when you click on this image you
138:34 - will be able to see more information
138:36 - about the image so here you can give the
138:39 - little description for your image and
138:42 - also you can even write the readme for
138:45 - your image what it is doing and what's
138:48 - the purpose of this image right so here
138:51 - is the general information about the
138:53 - image you can also see this tags ah
138:57 - section where you will be able to see
139:00 - the tags related to your image I only
139:03 - have one tag here and the size of this
139:07 - image is around
139:09 - 746 kilobyte right and also you can see
139:13 - how you can pull this image so you can
139:16 - just pull this image using Docker pull
139:18 - code bind forward slash hello and then
139:22 - you need to use this tag you can just
139:24 - copy this and then pull this image also
139:27 - also you have the build section this is
139:30 - for the auto automation so if you are
139:32 - using GitHub or bitbucket automation
139:36 - system then you can directly push your
139:38 - image from the GitHub or bitbucket into
139:41 - your Docker registry you also have the
139:44 - collaborator Tab and then web hooks also
139:47 - and then you have the settings related
139:50 - to your Docker image right so you can
139:54 - make it private if you want
139:57 - and also you can delete your image from
140:00 - this section right so let's say I just
140:03 - want to pull this image I will just copy
140:05 - this text and then I will just write
140:08 - sudo and then paste this test text which
140:12 - I have copied which is a Docker pull and
140:15 - the name of my image with the tag and
140:18 - it's going to pull this image if it's
140:21 - already not there on your operating
140:24 - system so this was the simple
140:26 - demonstration using which you can create
140:29 - your images and then push your images to
140:32 - the docker Hub and then manage your
140:34 - images using the docker Hub so I hope
140:37 - you've enjoyed this video and I will see
140:39 - you in the next video

Cleaned transcript:

so first of all what is Docker so Docker is an open source project that automates the deployment of applications inside software containers by providing an additional layer of abstraction and automation of operating system level virtualization on Linux so that is the definition which is available on Wikipedia but really what is docker so Docker provides a uniformed wrapper around a software package and this wrapper is called Docker container which you can ship or build and inside these containers you can run any app anywhere now Docker containers are similar to shipping containers now as you all know in the shipping container the container size is always same regardless of the content inside the container so these container can fit on all trucks or ships or trains regardless of the content inside the container in the same way Docker packages a software into standardized unit for development shipment and deployment so let me give you a real world example so let us say I developed a node.js application which depends upon some version of node.js and it uses some database and it's dependent on some shared Library let's say and I want to give this software to the devops guy or let's say to my colleague to run it on his computer or on the QA system or on the cloud by devops or in the production system so I don't really care where it runs I just care that it should run when somebody tries to run my software now if Docker is not present or any containerized system is not present the normal procedure will be that I give my software to my colleague or the devops guys and he has to install all the dependencies and for example node.js version and the database system exactly like a system on which I have tested my software now if you will just use Docker to containerize your system you just need to package your system into a Docker container and you can just give this Docker container to your colleague or the devops guys and he will just run this Docker container on the cloud or a QA machine or any other production system wherever he wants to run it and he can just run your software without worrying about all the dependencies or the environment setup which your software depends upon so nowadays Docker is becoming more or less a standard for the containerizing systems and you can find Docker containers everywhere on Linux operating system or Windows operating system or in the data center clouds serverless application and so on now let's compare Docker container versus virtual machines so containers and virtual machine have similar resource isolation and allocation benefits but Docker containers and virtual machine functions differently because containers virtualize the operating system instead of hardware and containers are more portable and efficient so when you talk about virtual machines you can see this diagram on the right hand side so virtual machines or VMS are an abstraction of physical Hardware turning one server into many servers and it is made possible by the hypervisor which allows virtual machines to run on a single machine so each virtual machine or VM includes full copy of operating system so let us say this is your server and on the server you have your hypervisor and on top of your hypervisor you can run different virtual machines so this is virtual machine one Virtual Machine 2 virtual machine 3 which have this operating system one operating system two and operating system three or you can have the similar operating system in all the three virtual machine let's say now the important thing to note here is each virtual machine includes full copy of operating system the application necessary binaries and the libraries which takes up to tens of GBS of memory and that is the reason that virtual machines can be slower now on the other hand in the container and you can see on the left hand side this diagram so containers are an abstraction on the app layer that packages the code and dependencies together so you have your server and then you have your host operating system and then on top of your host operating system you can run your Docker engine and the containers are the abstraction at the app layer that packages the code and dependencies together so multiple containers can run on the same machine and share the same OS kernel with other containers but each container runs as isolated process in the user space as a result container takes less space than virtual machine and usually container images typically takes tense of megabytes in size in comparison to the virtual machine which which can take up to let's say several GBS of memory also containers can handle more application and require fewer virtual machines and operating system now when we talk about Docker containers versus virtual machines the idea is to use containers and virtual machines together so the containers and the virtual machines can be used together which provides a great deal of flexibility in deploying and managing your apps now let's talk about the docker architecture so whenever you will install Docker the docker engine will be installed on your system so Docker engine will contain Docker CLI Docker Daemon and the docker registry now there is something called Docker Hub which is a cloudbased service where you can share your applications automate the workflow and assemble apps for the components now when you talk about Docker two things are really important and these are Docker images and Docker containers so first of all what is Docker container so a container is a standard unit of software that packages up your code and it's all dependencies so the application runs quickly and reliably from one environment to the other environment now when you create your Docker container which is essentially a unit of your software it can run everywhere regardless of the kernel version regardless of the host distro the only condition is that the container and the host architecture must match and you can run anything inside your containerized solution so if it can run on your host then it can run on your container that is if it runs on a Linux kernel it can run now let's talk about Docker container images so a Docker container image is a lightweight Standalone executable package of software that includes everything needed to run the application that is code your runtime your system tools and the system libraries and the settings so the container images becomes container at run time and in case of Docker containers images becomes containers when they run on Docker engine so images turns into container when these images runs on your Docker engine now it's important to note that your Docker image is not a virtual hard disk or vhd it's not a file system it uses Union file system and it's only a readonly layer also the docker images does doesn't have any state so when your Docker images runs as Docker container inside the docker engine and when you stop these running containers these images will not have or will not save any state so they are stateless so basically an image is a tar file which has a hierarchy and an arbitrary depth and that's how it fits into your Docker registry for example Docker Hub or any private Docker registry so this was a brief introduction about Docker in this video we are going to see how we can download and install Docker on our Windows 10 operating system so let us get started first of all open your favorite browser and search for Docker but before installing Docker desktop application on our Windows operating system let's see what are the system requirements for installing this application so before going to the docker doc to com website I'm going to search on my browser install Docker Windows which will open this link from docs dot docker.com forward slash Docker for Windows and this link I'm going to put in the description of the video also so you can also see all the description here and from here you can click this button which is going to redirect you to the downloads page but before that let's see what are the system requirements for downloading this application so as you can see here for installing Docker on your Windows operating system you need to have at least Windows 10 64bit Pro Enterprise or education version and hyperv and containers Windows feature must be enabled and some other requirements are 64bit processor with second level address translation 4GB system RAM and bios level hardware virtualization system must be enabled in BIOS settings so if you don't have Windows 10 64bit pro version or Enterprise or education version then also you can install Docker on your Windows operating system but the procedure will be little different so for that you can go to suspended products and tools and then go to this tool which is called Docker toolbox which is now a legacy for legacy operating systems so here you can just click on the install toolbox on Windows button I'm going to just open this link in the next Tab and here you can follow the procedure of installing Docker toolbox on your other window Windows operating system for example if you have Windows 10 home version or if you have Windows 8 or Windows 7 then you can install Docker toolbox so first of all how to check which Windows 10 version you have if you have Windows 10 operating system running so for that what you can do is you can just right click on this Windows button and then click on run and then just type when were w i n v e r and then click OK which is going to open this kind of window and here you can find the Windows 10 version you are running so as you can see here I'm running Windows 10 pro version also the second requirement was so let's see the second requirement which is hyperv and containers Windows features must be enabled so how to verify that so to check that the simple procedure is just right click on your toolbar Windows toolbar and then click on task manager so once this task manager opens you just need to go to the performance section and then you need to verify this section which is called virtualization it needs to be enabled by default it is enabled on your Windows 10 operating system so you don't need to do any extra thing unless you have manually disabled this feature so now I am going to click this button which says download from Docker Hub and here you will see this web page first so first of all you need to create a Docker ID if you haven't already have a Docker ID you can just click on this sign up a link here which will open this kind of web page and here you can create your Docker account which requires a Docker ID email address and password and you need to just agree these terms and conditions so once you have your Docker ID which I already have I'm going to sign into my Docker account which is going to redirect me to this page which is the downloads page and from here I can just download this Docker desktop application for Windows also if you have searched for Docker and if you have opened this main website from Docker which is docker.com you can just click on get started and then click on download desktop for mac and windows which will also redirect you to the same page and you can see welcome my Docker ID is shown here so in order to download this desktop application you need to have your Docker ID you and you need to log in to the docker website in order to download this executable file so let's just click on this button which is going to start the download of this executable file I have already downloaded this executable file so I'm going to cancel this installation and you can see on my downloads folder I already have this Docker desktop installer which is around 856 megabytes so I'm going to just double click on this executable file and I'm going to just start the installation so I'm going to minimize this browser and you can see the installation has been started so the first window here is the configuration so I'm going to just leave everything as default and then click OK which is going to unpack all the files the installation procedure is straightforward I guess you just need to click some buttons and Docker will be installed out of the box and now you can see after few seconds I can see this Docker desktop icon on my desktop and you can see this message which says installation succeeded so I am going to just click close And log out button which will log me out of Windows 10 operating system so I need to log in once again so now I have logged in to my Windows 10 operating system once again and immediately after logging into my Windows 10 operating system I can see this window which says hyperv and container features are not enabled do you want to enable them for Docker to be able to work properly I will say OK which is going to enable all these features I thought they are already enabled somehow but according to Docker it wants to enable them once again let's say and now I will click on this Docker desktop icon from here which is going to start the docker desktop application and I can see this message which is hyperv service vmm is not available if you have enabled hyperv just restart your computer now so I'm going to restart my computer and I will then try to just start Docker application once again so now I'm going to click on this Docker icon once again and you will see on your toolbar here you can see Docker is starting so it will take some time to start docker and I can see this message which says Docker desktop is running so I can open Powershell and start hacking with Docker or Docker compose also when you click on this Docker icon here you can see bunch of options here for the documentation Docker Hub Switch to Windows containers and all other settings here so one thing I will recommend here is to sign in with your Docker credentials which you have already created and I'm going to sign in with my Docker credentials and after signing in you will be able to see your Docker ID and the sign out option so let's get started with Docker so first of all you can start the command prompt I'm going to just type CMD which is going to show me this option which is command prompt and here you can just type docker hyphen version or hyphen V will also work and you can see the version which we have installed now let's also check if Docker is working with the docker Hub perfectly fine or not to test this you can just run Docker run hello hyphen World okay so just run this command this is the most popular command to test whether Docker is running or not or it's able to fetch all the images from Docker Hub or not so I'm going to just run this command and when I run this command you can see this kind of output so you can see on the first line it says unable to find image hello world latest locally so it didn't find this image locally so it has pulled this image from the docker Hub repository so you can see in the next line latest pulling from library hello world and once the pull is complete and you can see the status downloaded the new image hello world and then the latest version of hello world and then it says hello from Docker that means everything is working fine with your Docker and it's able to run your Docker images and this is the first Docker image we have run which ran successfully few more commands I can show you here for example you can also say docker images and then press enter and you will see the list of all the images you have on your system so we have just downloaded this Docker image which is hello world image so this is how you can download and install Docker on your Windows 10 operating system in this video we are going to see how we can download and install Docker on our Mac operating system so let's get started so first of all open your favorite browser and search for Docker and the first link which will appear here will be from docker.com so we are going to click into this link and then straight away you can see this button get started or this button gets started so you can click on one of these buttons and then you will be able to see this button which says download Docker for mac and windows so I'm going to just click on this button which will redirect me to the docker Hub website now in order to download the docker binary you need to have a Docker account so if you haven't created a Docker account you can just click on this sign up link here and then just fill your basic details like Docker ID email and password and create your Docker ID and Docker account and once you have your Docker ID and Docker account you can just log in with your Docker account here on this website so I'm going to just give my Docker credentials first is the docker ID and then second is the password and now I'm going to just sign into this Docker Hub website which will allow me to download this Docker desktop for Mac so I'm going to just click on this download link here which will start the download of the docker now once this docker.dmg file is downloaded I'm going to just click on this docker.dmg file and I'm going to minimize the browser and you can see this DMG file is opening first of all and once this window opens you just need to drag this Docker icon to your applications so it's that simple to install a Docker on your Mac operating system so once Docker is copied into your applications folder you can close this window and open Docker from here or you can just go to the launch pad and you will be able to see this Docker icon here so you can just click on the docker icon which is going to start the docker on your Mac operating system so just wait for few seconds and now you will see this message which says Docker is an app downloaded from internet are you sure you want to open it so I'm going to just say open and in the next step I can see this window which asks me to give some privileged access so I'm going going to just click on OK and then I'm going to give my Max password and now you can see Docker desktop is starting on my Mac operating system and you know you can see this Docker icon on top of your Mac desktop so I will wait for this Docker desktop to start and once this Dockers desktop starts we will start testing if everything is working fine in the meantime I can also give my Docker ID and password to login to the docker using this Docker desktop application so let me give my Docker ID and the password and then I'm going to just say login and you can see I am logged in with my Docker ID into this Docker desktop application and now I can see this message which says Docker desktop is now up and running so what we are going to do next is we are going to just open the terminal so I'm going to just search for terminal and then I'm going to open the terminal and once my terminal is open I can just just check the docker version by just giving this Docker version command and then press enter and I can see this long message and here the version information is displayed and then the API version is displayed and all the other information about my Docker is displayed here also when I give Docker info command so let me just clear this terminal once again and then I'm going to just give Docker info command and it's going to give me bunch of information about Docker and Docker engine and the status of Docker engine let me clear this terminal once again and now I'm going to test a Docker by giving this command so I'm going to just say Docker run hello world and then press enter which is going to fetch this hello world image from Docker Hub if it's not already present on my Mac locally and once this image is pulled it's going to just display hello from Docker that means everything is working fine and you can start working with Docker now one more command you can use here is this command which is Docker images which is going to show you the list of images which are present on your Mac operating system and you can see I only have one image right now which is Hello World which I have fetched just a few seconds ago and you can see this Docker icon here so when you click on this Docker icon you can do lots of thing for example if you want to restart your Docker then you can just click on on this if you want to Quick Quit the docker desktop then you can click here and there are lots of settings and updates and references settings you can do from this Docker desktop icon and there are lots of other settings you can do from this window or this menu from here so this is how you can download and install Docker on your Mac operating system in this video we are going to see how we can download and install Docker on our Ubuntu operating system so let's get started so what I'm going to do is I'm going to open my favorite browser and then I'm going to search here Docker install Ubuntu and the first link which will appear here will be from docs.docker.com I'm going to put the link in the description also so I'm going to click this link which is the official documentation of installing Docker engine Community Edition on your Ubuntu operating system so here you can see the prerequisite of installing Docker on your Ubuntu operating system so you can see the OS requirements and right now I have this version which is 18.04 LTS version and if you have the older version of Docker or Docker IO or Docker engine installed you can use this command to uninstall previous versions of docker now to install Docker you can just scroll little bit down and they have the very good documentation of installing Docker on your Ubuntu operating system so we are going to just copy these commands and paste it on our terminal and will be will be good to go so the first command is sudo apticate update so I'm going to just copy this command and I'm going to just open my terminal here and then just paste this command and then give my ubuntu's password and then just press enter which is going to update all the repositories and then I'm going to just copy the second command in a meanwhile so this is the second command and in the second command we install the packages to allow the app to use the repository over https so let's just copy this command and go to a terminal and then let me just clear the terminal and now I'm going to just paste this command and then press enter which is going to start the installation I'm going to press Y and then press enter and in the meantime we are going to copy the third command which is to add docker's official gpg key so for that you need to have curl and curl we are installing using this second command so when the second command is finished you will have curl on your system and then we can just give the third command so hopefully that is complete so let's clear the terminal once again and then paste the third command and its ok so we will move to the next command which is to verify that you now have the key with the fingerprints so I'm going to just copy this and then paste it here and verify this and you will see the similar result which is also shown here when you give this command so now we will move to the next command which is to install the docker Repository so for Ubuntu you need the first option here which is x8664 so I'm going to just copy this command once again and then go to the terminal clear this terminal and then paste this command and then press enter which is going to install the docker repository and then in the next step we are going to update the repositories once again before installing Docker so here you can see the next command which is to update the repositories again and then we are going to just install the docker so after update we are going to install the latest version of Docker engine which is the community version so for that we just need to give this command which is going to install docker CE and Docker cecli and containerd Dot IO so I'm going to just copy this last command and then paste it to the terminal so clear the terminal just paste this command and then just wait for the installation to complete so it's that easy to install Docker Community Edition on your Ubuntu operating system and if you want to install a specific version of these packages you can give these commands so when you give this command apt cache medicine Docker minus CE you will see a different version of Docker which are available for your Ubuntu operating system so from here you just need to take the version and then replace this placeholder for the version string with the actual version of whatever tool you want to install so for example if you want to install the version of Docker CE for example we need the latest version of the docker CE then you can just copy this and then just replace this place all the string by ah this string okay same you can do for the docker cecli so once this command is finished I'm going to once again clear the terminal and we are going to run this command which is sudo Docker run hello world in order to test whether everything is working fine or not and here I'm going to just write sudo Docker run hello hyphen world and then press enter and I'm going to give my ubuntu's password and you can see when you run this command it prints hello from Docker so first of all what happens is because we are running this Docker command for the first time it's going to find the docker locally and if it's not found then it's going to pull your Docker image from the docker Hub and then execute this hello world image which is going to print this kind of output so if you see this kind of output that means Docker is running on your system and also you can check the docker images now so you can just give this command sudo docker which is going to list out all the docker images you have on your Ubuntu operating system so that's how you can install Docker on your Ubuntu operating system in this video we will talk about how does Docker works and we will see some commands related to Docker and Docker images so as I have told you in the earlier videos also you can build your Docker images that holds your applications using Docker files and then you can create your Docker containers from those Docker images to run your applications and then you can share your Docker images via Docker Hub or via your private registry now if you want to see this Docker flow in the form of a diagram you can see this diagram here so you can create a Docker file which we are going to see how we can create a Docker file in the later videos so Docker file is a file from which you can build your applications into Docker images so what happens is you pull some images which are already there on the docker Hub and you use those images with your application and you write all that code or that script inside your Docker file so how will your application run inside a container you write everything in a Docker file and then you build your Docker file which will create a Docker image and when you run your Docker image it will be converted to a Docker container now let's see some commands related to Docker so the First Command which I want to show you is the docker search command so you just write Docker search and then you give your options for example whatever image you want to fetch from your Docker Hub you can just write that image name for example I just write Ubuntu here so you can search all the images which are there related to Ubuntu on Docker hub using this command so Docker search Ubuntu so when you give Docker search Ubuntu you will see this kind of result in the form of a table and the First Column here is the name the second column here is the description third is the number of stars and if the image have more number of stars then its more popular also you have the column for official so if you see uh ok under official for a particular image so for example this first image with the name Ubuntu is the official image on Docker hub and you can also see some description here so clearly this first image which is an official image also is the most popular image on Docker Hub about Ubuntu now let's see some options which are related to Docker search so I'm going to just write docker search here and then I can give the filter option which we use to filter our results so I'm going to just write a filter here so let's say we want to filter our result on the basis of stars and image have on the docker Hub so I can just write Stars here is equal to 3 and then the name of an image I am searching for so for example I'm searching for Ubuntu here so I will just write Ubuntu and this example will display the images with the name Ubuntu and which have at least three stars so I'm going to just press enter so you can see all the result of the images which have at least three stars now if you give here let's say number of star is equal to 100 so it's going to search for all the images which have at least 100 stars now if you want to give more than one filter you can add this this filter option once again so you can just write hyphen hyphen filter and then the next filter so the first filter we have here is for the stars and the second filter I have added here is for the official image so I just want all the images which are official so that's why I have just given this filter which is is official is equal to true and then I am going to just press enter and I will only see the official images which are present on the docker Hub and which have more than 100 stars in a similar way I can also search for automated image which are not official but which are there by some users which are there on Docker Hub right so it's going to show you all the images which are not official but automated now there is this option which is called No trunk also which is going to show you the description without truncating this description so right now you can see in the description you see this description and these three dots so that means this description have more content in the description so I can just give this option which is no trunk which is not going to try truncate there's a description it's going to show you the full description here so sometimes this ah option can get really messy if the description is really large so just use it wisely now instead of this hyphen hyphen filter you can also simply write hyphen f for the filter option so either you can just give the full filter option or you can just give hyphen f for the filter and the result will be the same now the next command which I'm going to show you here is the docker images so I'm going to just write Docker images and this command we use to list out all the local images you have on your host so when you give this command Docker images it's going to give you all the images which you have on your host as I said and right now I only have one image which is hello world image which we have pulled in the previous videos when I have shown you how to install Docker on your various operating system so right now I only have one Docker image which is hello world now there are some options which are related to Docker images so we are going to see all those options one by one so with this Docker images option you can give the name of the image now let's say I give here the option Java so you can list the images using the name or the tag so when you give this Docker images Java command it's going to search all the images related to Java and you can see there is no image which is related to Java on my host machine so let's pull the Java image from the docker Hub so I'm going to just write Docker here and then pull so the pull command you can use to pull an image or a repository from Docker Hub or from your private repository so I'm going to just pull the Java image from the docker Hub so you can see when you give this Docker pull Java command it's going to pull always the latest tagged image from the docker Hub and in the output also you can see using default tag so the default tag is always the list test tag that's why it's going to pull the latest Java image so now you can see this Java image with the latest tag is downloaded on my host so let me clear the terminal and now I'm going to give the docker images command once again so docker images and now I have the Java image with the tag latest and the hello world image with the tag latest so now I can use the docker images and then the name of the image also so I can search based on the name of the image also so I can just write Docker images Java which is going to just give me the images which are related to Java I can also search with the image name and the tag so let's say I want to search for the Java image which have the tag let's say 8 which is not present on my host so it's going to give you the empty result without any image if you give the tag which is present so the latest tag is present on my host so it's going to give you the Java image with the latest tag so let me give the docker images command once again and you can see by default in the result you will see the name of the repository or an image then the tag of that image and then the image ID this ID is very useful when you have a multiple image related to let's say Java so you can use this image ID to remove that image or work with that image so that's why this ID is important also you can see when this image is created and the size of the image so the different images with different tag have different sizes so sometimes you want the images with the less size or sometimes you want the images which have the full feature so in that case you can use different kind of image with different tag which suits your requirement for your application in this video we will talk about basics of Docker file so first of all what is a Docker file so Docker can build images automatically by reading the instructions from the docker file and a Docker file is a text document that contains all the commands a user could call on the command line to assemble an image now as I have previously told you you can use Docker file and then once you write your instructions in the dockup file you can build your Docker file to produce a Docker image and when you run the docker image it's called the docker container so let's see how we can create a Docker file and then we will see how we can build our Docker file to make an image so right now I'm in my home directory so here I'm going to create a directory called D1 let us say and then I am going to CD in this D1 directory and right now it does not contain any files or folders so let's create our Docker file in this D1 folder so I'm going to just write touch and then Docker file so by convention we usually name our Docker file as Docker file with the capital D and this Docker file does not contain any extension so it's without any extension so let's create this file so now I have this Docker file in my D1 folder right so now I'm going to open this Docker file in any editor you can use the editor of your choice right from the Nano Bim or any editor I like to use the visual studio code editor so I'm going to use that so I'm going to just write code and then I'm going to just write dot which is going to open the current directory in my visual studio code so here I have this Docker file right now in Visual Studio code there are many extensions you can install related to Docker that's why I like to use this Visual Studio code and straight away when I open this Docker file in my visual studio code I can see this popup which says Docker extension is recommended for this file so you can click on this install button or you can just install this Docker extend attention from this extension option here also so you can just search for Docker here and then it will give you the most popular Docker extension right so just choose the most popular one from here and I'm going to just install this Docker extension and once this extension is installed it's going to help you with your Docker files and Docker commands in general okay so there are bunch of keywords which you can use inside your Docker file and each keyword means something so we will start with the ARG keyword so this ARG keyword we can use to provide any argument as the name suggests and I'm going to explain this ARG in detail after the other keyword which is from so here what I'm going to do is I'm going to just write the version here and version equals I'm going to give here is 20.04 so version here is the name of the argument and 20.04 is the value of the argument now after this we are going to use another keyword which is from now this from defines the base image used to start the build process so there are many base images which you can find on the docker Hub and we are going to use one such base image which is Ubuntu and then after colon you can choose which version of Ubuntu base image you want to have so here as I have defined this ARG is equal to 20.04 so we are going to fetch the Ubuntu 20.04 from the docker Hub as our base image so how how we can use this argument with this from a keyword you just need to use this dollar symbol and then inside these curly brackets you just need to pass your argument so my argument name is version so I'm passing this argument here this means that we want to fetch the Ubuntu 20.04 image from the docker Hub now this from instruction supports variable that are declared by any ARG instruction that occurs before the first from and an ARG declared before the from keyword is outside of the build stage so it can't be used in any instruction after from so now once we have the image we are going to use one more keyword which is the Run keyword so this run is the send Central executing directive for the docker file so this run you can use to run commands using the docker file so for now I want to run inside this Ubuntu base image aptget update commands and also I'm going to give the flag y for yes and now let's move to the next command so the next command I'm going to use here is the CMD command so the CMD command can be used for executing a specific command within a container so let us say I just want to run the bash inside the container so I am going to just use these square brackets and with the double quotes I am going to just write bash here so this is a very basic Docker file now let's see how we can just use this Docker file to build some image so I'm going to open the terminal inside my visual studio code editor and as I can see I'm in my D1 directory which I have created and here I have this Docker file right so now let's list out what are the docker images we have on our system so I'm going to just write a sudo docker images command to list out all the images and now I want to run or build this Docker file and create an image so right now we have hello world and I want to create one more image using this Docker file so to build a Docker file you can give a command build so just write sudo Docker build and then dot so when you run this Docker build command the current working directory is called the build context and by default the docker file is assumed to be located in this directory but you can also specify the directory path using a flag called hyphen f that we will see a little bit later but just give this command for now which is sudo Docker build space dot so now you can see that when we run this Docker build command the build is run by the docker Daemon not by your CLI so the first thing a build process does is to send the entire context to the docker Daemon and that we can see here sending build context to the docker Daemon now in most cases it's best to start with the empty directory and then you start adding your Docker file in that directory now when you run this Docker build command you will also see that these layers are fetched from your base image from the docker Hub and also you will be able to see which step is executed so the step one out of four is this ARG step step 2 is the from step and at this step it's going to pull the base image from the docker Hub and you have some intermediate layers here which are created and then we have used this run command which in itself has create created its own layer and its has installed the updates using this updates command and at last we have given this CMD command so now let's give the docker images command once again so I'm going to just give sudo Docker images command and now you're going to see this Ubuntu base image which is fetched from the docker Hub and you have this image which doesn't have any name or tag because we haven't provided any name or tag to our Docker image and this only have this image ID which you can see here also which is successfully build this image ID so using this image ID you know that your image is created here now let's say you are in some other directory other than the directory in which your Docker file is there so for building a Docker file from some different directory you use the hyphen f flag so what you do here you just use sudo Docker build and then hyphen f and then you just give the path to your Docker file so when you give this command and then you need to provide the context also so you need to create this context inside this current directory so when you give this command it is also going to give you the same result so because we have effectively given the same command so we don't need to modify our image so once again when you give the docker images command it's going to show the same image because your image is not modified and you haven't changed your context which is your current directory now as you can see we don't have any name and tag to our image so if you want to provide the repository name and the tag for your image what you can do is you can give this Docker build command and then give the hyphen T flag so using this hyphen T flag you can specify the repository and the tag at which you want to save your image so let's say I want to give the repository name as my underscore app and the tag which I want to give here is let's say one so after the colon you can provide the tag also here so when you run this command and don't forget to provide this context which is dot which is the current directory and then press enter it's going to just create the same image and you will see here an extra step is shown here which is tagged with my app colon 1. so at this step also you will observe that Docker is smart enough to know that you want to create the same image from the same Docker file and you haven't changed your Docker file so it's not going to change your image or create or recreate your image once again because we haven't changed our Docker file right we have just gave the repository name and the tag so now when you give this command Docker images then you will see that the repository name is my app and the tag associated with it is one so this is how you can give the repository name and the tag now if you will observe here we have our base image also here which is Ubuntu 20 3.04 so in future if you create different Docker file and it requires the same Ubuntu Docker image and the same tag which is 20.04 then your Docker build command will be smart enough to know that and it's not going to pull this image from the docker Hub again because you already have this image on your local PC so as I said we have fetched this Ubuntu image and the version for it is 20.04 here in the version if you don't know the version you can always write the latest so just try it latest here and it's going to just fetch the latest version of the base image you want to have so let me just save this file with the latest version and then run the same command with hyphen T my app and the tag will be the same and the context will be the same and now you will see that it is going to fetch the latest version of Ubuntu here and now when I give this Docker images command you will see the tag latest here instead of 20.04 which was this more specific version I wanted right so latest is the latest version which will be available on the docker hub for this base image so those are some of the basics of Docker files we are going to learn about Docker files in the upcoming videos also till now we have learned the basics of Docker files and how we can create Docker images using Docker files now in this video we are going to learn about Docker containers so as I have told you earlier when you run an image it's called a container so in the last video we have created this Docker file and we have already built our Docker file to produce an image so let's list out the docker images which we have created in the last video so just give the command Docker images here and this was the image which we have created we have named our image as my app and the tag which we have given to our image is one here now this is the image ID so let's see how we can run this image to create a container now in order to list out all the running containers you have the command which is called sudo Docker PS which is going to give you the list of all the running containers so right now we don't have any running container now if you want to see the list of all the container including running or thus exited containers then you can give the command with the flag hyphen a and it's going to give you the list of all the containers you have on your system so it is going to give you the list of all the running container as well as if they are exited and if they are no more running then also it is going to give you the list of all the containers so you can see I have ran this hello world container two months ago right and right now the state status of this container is exited that means it's not running so this is how you can see the list of all the containers now to run a container what you need is a command called run so you just write sudo Docker run and then you can give with this run command some options for example and then you give the name of the image so it requires the image in order to run a container and then you can give some commands so you can give some commands with the docker run image and also you can give some args here okay so let me just write args right so this is the basic syntax of a Docker run command so let's say we want to run our Docker image which is my app right so let me just once again give this Docker images command and I want to run this image so to run a container you just need one thing which is the docker image so you can just write sudo Docker run and then the image ID so this is the image ID of this repository which is my app so let's say we want to run this image so I'm going to just take the image ID of this image and then I'm going to just press enter and as soon as I press enter it's going to run the container and exits immediately so when I run this Docker run image ID command then it's going to run and it's going to exit immediately right so when you give this Docker PS command so let's list out all the running containers right so all the running containers still you will see there is no running container but when you give this command with hyphen a flag which means we want to see all the containers then it's going to show you that it ran this container with this image so we ran the container with this image and this is the same image which we have used in this Command right and it was exited about a minute ago right so it ran and it exited immediately now here one more interesting thing to note here is when you run the container with the Run command dot automatically generates a container name with a string of randomly selected numbers and letters so if you are wondering what this name is this is just a automatically generated name which is generated by Docker for you now if you want to give a specific name to your Docker container there is a flag for that so we are going to run the docker run command for the same image and this time what we are going to do is we are going to give some name to our container so before the image ID I'm going to just provide this name flag and then I can give the name to my container so the name I have given here is my Ubuntu container to my container and let's give the same command with this flag and once again you don't see any output here on the terminal but as I have told you it has just ran the container and exited immediately so when we give the docker PS hyphen a command once again you will see this time that now our container name is my Ubuntu container right so this was the container which ah we ran earlier and this time ah with the last Docker run command we have given the name to our container and the image was this one so image is unchanged but we have created a new container with the name my Ubuntu container right and the command which we ran is bada bash command which is coming from this line of Docker file now when you run your Docker containers it's run in two modes one is attached mode or in the foreground and other is in the detached mode or in the background and by default Docker runs the container in the attached mode that means it's attached to the terminal session where it displays the output and the message so if this Docker file has some commands or some output related to this Docker file then it is going to show you the output in the terminal when you run the container with the docker run command but because we don't have any output associated with the docker file it doesn't show any output right now if you want to run your Docker file in the detached mode what you can do here is you can give the hyphen D flag that means you want to run your container in the detached mode so just give hyphen D and then I'm going to give the same command here and let's see what happens and you can see it's going to give you this message which says error response from the demon conflict the container name this is already in use right so this container we have already defined so you cannot create this container with the same name so you need to give the different name here so let's say I am going to just give my Ubuntu container 2 now okay and then I have also given this hyphen D command to run it in the detached mode and now you will see that there is an output which is printed here and this is the container ID ID of your container now if you have observed here in the previous command where it has thrown this error it has this long container ID now when you give the docker PS hyphen a command you will see in the container ID some part of this container ID is shown so for example I can see here up to this part of the container ID is shown but in the background the container ID is so much bigger right so now when I give the docker p s hyphen a command once again I can see one more container which is created and the container ID you can see it is going to show you the starting few values of the container here until I think until D so using this ID also you can delete or work with your container or you can take the full ID of the container and work with your container okay so this ID will also work or in the short form or the first few uh letters of the ID will also work which is shown here now we have seen that how we can run our Docker container in the detached mode and as I told you that by default Docker runs the container in the attached mode or in the foreground right now let's see how we can run our container interactively so Docker allows you to run the container in interactive mode that means you can execute commands inside the the container while it's still running so let's see how we can run our Docker container interactively so now what I'm going to do here is I'm going to just create a new container let's say it's container 3 my Ubuntu container underscore 3 and I don't want to run it in detached mode instead I want to run this container in the interactive mode so here I can give hyphen i t flag which means that we want to run our container in the interactive mode and the image name is same which we have created using this Docker file so let's see what happens when I run this command like this so when I run this command like this you will see the bash shell which appears here and this is what I was expecting so now as you can see here in this Docker file when we have created this image the last command which we wanted is this bash command and it has just given us this bash command shell in the last right so this is how you can run your container in the interactive mode now when I open the new terminal so let this terminal be like this and let me open the new terminal in the visual studio code you can open the new terminal by just clicking on this plus button or you can open your default terminal on your operating system also you can see I'm in the second terminal and here I'm going to give this sudo Docker PS command without hyphen a that means I want to see only the running Docker containers and then I'm going to provide my pass word of my operating system and this time you will observe that when I give this Docker PS command is going to give me some output because now the container which I have created which is my Ubuntu container 3 is still running in the other terminal as you can see we have running bash shell in the docker container so this bash shell is running inside our container right so when you uh just give some LS command you will see the file system directories here inside your containers you can also give for example up time so as the name suggests the uptime command will give you the time for which the system has been up or running right and as we have seen in the last video we have only given this bash command so our container is not doing much it's just opening The Bash shell now there are many interesting things which you can do with your Docker run command and that we are going to see in the next videos also I want to show you uh some more commands related to Docker run and Docker in general so now what I am going to do is I'm going to switch to my terminal so I'm going to open my default terminal on my Ubuntu operating system also I'm going to open my browser and I'm going to just search for Docker Hub I want to show you how this Docker Hub looks like so the first link here is hub.docker.com and when you click on this link you will see this webpage here from where you can just sign in with your Docker ID which you have created earlier or you can search for some images so let's say I'm going to search for an image called busy box and then press enter and you will see an official image of busy box and as you can see you will see the tag here on the top which is going to show you if it's official it's going to show you it's an official image and otherwise it's going to show you verified or the other information associated with the image so the most popular one and the official one is this one so I'm going to just click on this base image and here I will see some more information related to this image so if I want to just pull this image on my PC I can just give this Docker pull busy box command so let's do this and I'm going to show you how we can use the docker run command with the busy box image which we are going to pull so I'm going to just write docker pull busy box here and then press enter and I'm going to just give my ubuntu's password which is going to just pull the latest tag image of the busy box right so if you don't provide any tag after colon then it's going to pull the latest image so now let's run the docker images commands so I'm going to just give images and now you can see this busy box image is there so you can run the docker run command with the images you have in this list also so till now we have seen how we can run the docker run command with the container which we have created but you can also use this Docker run command with the base images also for example busy box or Ubuntu 20.04 or Ubuntu latest version and I have pulled this busy box base image because it's very small in size you can see it's only around 1.22 megabytes so if you want to quickly test something with some Linux terminal or Linux operating system busy box is the image to go so now as I told you you can use this Docker run command with the images you have in your local PC so you can just give a Docker run and the name of your image which is busy box here and then you can do something with it so you can just write Echo so it means that we want to run the echo command inside our busy box container when it runs and let's say we just want to print hello world here so I'm going to just write hello world and then press enter and it's going to run this busy box image as the container and it's going to print or execute whatever command you have given after this busy box command right so basically what this means is we are running Echo inside our busy box container also when you give the docker PS hyphen a commands so let's give this Docker PS hyphen a and you will see this busy box command also so you can see this busy box and what command it has Ran So we have we ran Echo hello world and it was created 42 seconds ago and it was exited right so status is existed now let's say you just want to work with the BusyBox shell what you can do you can just give the same command but instead of giving this Echo you can run it in the interactive manner using this i t flag and then you can just tell that you want to run the shell so just write sh which is going to run this container and open the shell inside the container right so let's give this command and when you give this run command with the ID flag it attachs us to the interactive TTY in the container right so because we are running the sh command after this run command so it's going to open the shell inside your or busy box container and here again you can run your basic commands or whatever you want to do inside the container so we are not working inside our operating system we are working inside our container now in order to exit from the container you can just give this exit command and you will come out of this container now the last thing which I want to show you before just finishing this video and that is how we can remove some container so now we ran so many commands and we have so many containers and as you can see we have so many dead container that means all the containers are exited and they are not running anymore so when you give this Docker PS command you can see only one container is running and all the other containers when you see using hyphen a are exited so let's say you want to remove some of these containers so let me clear the terminal and let me just give this Docker PS hyphen a command so let's say I want to remove this container and this container so there is a very simple command which is called RM so you can just write sudo and then the docker command and then just give RM and then after that you can give the container ID of the container so let's say I want to just give this container ID of the container so just copy and paste this container ID and then press enter and if you see the container ID in return in the output that means this container is removed so once again when you give the docker PS hyphen a you will see that this container is already removed right so in the same way you can remove multiple containers using this RM command so you can just give container ID space container ID 2 space you can give multiple container ID in this manner and it's going to remove all the container IDs which you have given after the RM command so so right now we want to remove two containers and as I said if you see the container ID in the output that means that container is removed and in my case as I can see this container is removed but the container with this ID is not removed means the container with this ID is not removed because it's running right so if the container is running and if you want to remove it you need to stop this container first and then you can remove the container so as I have shown you this container is running here so I I can either just give this exit command or I can stop the container let's see how we can stop the container using a command called stop so let's say I want to just stop this container so I can just give the command Docker stop just write Docker stop and then the name of your container so my container name is this one so I want to stop this container and then press enter and if you see the container ID in the output that means this container is stopped so when you give this Docker PS without hyphen a you can see there is no container running anymore and now in the list of all containers you will see this container and now when you give this Docker RM with this container ID it is going to give you the output that means this container is successfully removed okay so you use stop command to stop the container and then you can use RM command to remove the container in the last few videos we have seen the fundamentals of using Docker files Docker images and Docker containers now in this video I want to give you a concrete example of using the docker container so I'm going to give you a real world example of how you can really use Docker containers and how these Docker containers are really useful in certain situations so we are going to compile and run a C plus plus program inside a Docker container now you might say that compiling and building a C plus plus program on your host operating system is also easy so why do we need a container so consider a situation in which you have a seek plus program and you want to compile a C plus plus program with different version of GCC let's say now it's really hard to maintain different version of GCC on your Linux or Windows operating system but using Docker containers it's really easy to use and compile your program in different GCC versions using Docker containers Also let's say you want to develop a c plus program which works on multiple operating system or you want to compile your C plus program for a cross platform application so Docker containers are really useful for C plus plus cross platform development with containers with containers you can choose a target with a platform that runs completely different operating system other than your host operating system or the system on which you are developing so let's say you are just working on your Windows operating system but you want to compile your C plus plus program on a LX operating system or any special version of Linux operating system you can do it easily with the docker container so let's start with our example so as you can see on my visual studio code I have opened a Docker folder and inside this Docker folder I have this directory D1 which we have created in the previous video and now I am going to create a new directory inside this Docker directory and I'm going to name this directory as D2 and now I'm going to just go inside this D2 directory so let us go inside this T2 directory and here inside this D2 directory I am going to create a new CPP file let's say so you can use Touch on the terminal or you can just click on new file here and then just create a new CPP file with the extension CPP I am going to name my file as main dot CPP and as soon as you create a CPP file inside your Visual Studio code editor it's going to give you the suggestion for the C plus plus extension so I am going to install this C plus plus extension so now this C plus plus extension is installed and this C plus plus extension is going to help me to work with the C plus plus file inside my visual studio code editor so what I am going to do here is inside my uh main.cpb file I am going to just write a very simple program here with just prints hello Docker container so normally what you will do on your host machine if you have a g plus plus or GCC you can compile your C plus plus program using G plus plus right so you can see I have this main.cpp so I can compile this program using G plus plus hyphen o and then the executable file name which I want to create let's say I want to just give the name test to my file and then my main dot CPP file right so I'm going to just press enter which is going to create this executable file you can see here also I am going to do LS here also so you can see this executable file and now you can just run this test executable file or binary file using this command dot forward slash and the name of your binary file and it's going to print hello Docker container and I want to create a Docker container and I want to compile my C plus program inside my Docker container and I want to run my C plus plus program inside my Docker container this is what I have done in my host machine not inside my Docker container right so let me just clear the terminal and inside my D2 directory where my C plus plus file is there or my CPP file is there I am going to create a Docker file so I am going to just right click and I'm going to just create this talk a file here and then press enter and I can remove this test binary file because I do not need it for my Docker container now if you don't know which base image you want to use so for example if you want to use GCC to compile your C plus program you can go to Docker Hub and search for GCC here and when you search for GCC you will be able to find the official GCC image here you can see Docker official image or let us just press enter and see what result it gives so you can see the official image is this one with this official image tag and it has more than 10 million downloads so I'm going to just click on this GCC link and you can see when you just scroll down what are the tags you can use with gccu also you can see how you can pull this GCC base image using Docker so the name is really simple GCC so what we are going to do is we are going to just write from and then our base image I'm going to use here is GCC now the version or the tag I want to use here is the latest or you can choose the tags which are available here so you can choose 10.2.0 or 10.2 or from all these tags which are available here you can also go to tags section and see the more specific tags you want to use for your C plus plus program so now once we have the base image the next step is to copy our current folder which contains our CPP code into the docker image under the file system where we want to copy this so for copying our local files into the docker image we use this copy command OK and as you can see it suggests us ah that we need to provide the source so Source in our case is dot because we want to copy all the files from the current folder and the destination will be the destination inside the file system of your Docker image in our case it's GCC so in GCC base image file system you will find this path which already exists there so you can just write user forward slash SRC which is already there inside the file system of GCC base image okay so as I said this command is going to copy all the files which are there in your local directory to this directory inside your Docker image okay now if you want to copy some specific file then you can do this also you can just write main dot CPP and then you can copy a specific file into the folder which should already exist inside your image which you are using right so for now for Simplicity I would just want to copy all the files from the color current directory to user forward slash Source forward slash the directory which we are going to create so let's say we want to create this directory where we want to copy all the file CPP test let us say so this path already exists in the file system and this is the folder name which we want to create and copy our local files to this folder in the docker image right now we are going to define the work directory so we can just use this work dir keyword to define the working directory in which you want to work now okay so because because we want to work inside this directory because we are copying our C plus plus file inside this directory we are going to set our work directory as this one that means when you run any command it's going to run inside this directory which you set as work directory now in the next step I want to run the command which will compile the C plus plus program using this main dot CPP so now I can just give the G plus plus command then hyphen o as the flag and let's say I want to name my binary as test and the file name which I want to compile is mean dot CPP so this run command is going to compile my C plus program inside my CPP test directory under user Source folder right now in the next step I am going going to give the command using CMD which will be the command which I want to run inside the container so this is going to run the program output from the previous step into our container so this works like this as you have already seen in the last video also so if you want to run your binary you can just give dot forward slash and the name of your binary which is test right so this binary is going to be run using this CMD command inside our container so that's it that's how you can create this Docker file to compile your C plus program and run it now let's build our Docker file to create an image for that you can just give sudo Docker than your build commands so build and then the build context and then you can provide hyphen T to provide the name of your image I'm going to name my image as CPP underscore test for example and then you can also give the tag to your image let's say I want to provide the tag one to my image okay so this is going to create a Docker of image using the docker file so you can see it has pulled the base image in the first step then copied our files from the local directory to the directory which we have defined and then it has set the work directory and then in the next step it has compiled our C plus plus program and in the last step we have set the test binary to run when we run our container so now let's list out all the images you can just give Docker images command for that and you will see that this repository is created about a minute ago and this is the image ID for that image right so now we want to run our container using this image so for that we have seen in the last video we can give sudo Docker run command and then I'm going to give the hyphen hyphen RM flag and this RM flag causes Docker to remove automatically the container if it already exists so if the container which we are going to run already exists then it's going to remove that container and then it's going to rerun that container so this command is handy when you want to just run only one container at a time and then I'm going to give this i t flag with hyphen so I T flag for running this container in the interactive mode and then your image so you can give this image name CPP test here or image ID also you can give so I am going to give the image name which is CPP underscore test with the tag so tag we have provided is one okay so here as I said you can give the image ID or the repository name and the tag and then when you run this Docker container it's going to print hello Docker container that means we ran the test binary inside our Docker container right now as I said you can change this tag instead of latest you can choose the version of GCC you want to use for compiling and running your C plus programs so that's why this Docker and Docker containers will help you to just cross compile in cross platform applications now let's say you want to compile your C plus plus program using the C language compiler instead of GCC okay so we want to compile our program using C language compiler instead of GCC so let me clear this terminal and let me go One Directory up here and I'm going to create a new directory so I am going to just write I am kdir ah D 3 and inside this D3 directory what I want to do is I want to just have the same CPP file so I will just copy this cpv file into the D3 directory also and then we are going to create a Docker file inside this D3 directory so let us create this Docker file here so now let's move to the docker Hub website and let's search for C Lang if we have something related to C language compiler on Docker or not so I am going to just write C Lang here and as I remember there is no official a base image for C language on the docker Hub so what we can do we can use the base images we already have on our system and then we can install the C language compiler on that base image so I'm going to just give this sudo ah Docker images command and from these images let's say we will use this Ubuntu latest or Ubuntu 20.04 to compile our C plus plus program inside the Ubuntu base image using the C language compiler okay so what I am going to do is I am going to just write this kind of Docker file I am going to explain you all the steps one by one so we want the base image Ubuntu with the tag latest because we already have downloaded or pulled this image in the previous videos so we do not need to pull it once again now in the next step I am running apt get Y update and apt get install update to update apps on the base image so that's what you do when you want to install any software on your Ubuntu operating system so this command is going to update the apps on the base image now in The Next Step using this apt get hyphen y install C language command we want to install C language on our base image which is Ubuntu right The Next Step are relatively easier because we have seen these steps in the other Docker files also so we want to copy all the files in the current directory into this directory inside our base image and then we want to set the work there which is the same where we have copied our c plus files and then to compile your C plus plus program using C language you can just replace the GCC with C language plus plus and the rest of the command will look like same as you have seen in the case of GCC also so you can see G plus plus hyphen node test main dot CPP and here also you can give this command the only thing I want to change here is the main dot CPP the file name here okay because our binary name is test we are going to just run this binary using this command so this is going to run inside or container okay in the D3 folder I have created this Docker file to compile my C plus plus program using C language and I'm going to run this now so let me clear the terminal once again so now let's build our Docker image using this Docker file file so for that I need to go inside the D3 directory and then I'm going to give the docker build command with the context or in the current directory and then hyphen T to give the name of my image so let's say I want to give the name to my image as C language underscore CPP and the version or the tag which I want to provide here is let us say 1.0.0 okay so let's build our image using this command so now as you can see the build of this image is successful with the name c language underscore CPP and the tag 1.0.0 so let's run the container for this image using the docker run command so I'm going to just provide sudo docker run oops by mistake I pressed Ctrl C that's why it breaked so let me just give this command once again and then give this image name with the tag 1.0.0 so we want to run our container using this image so let's press enter now and as expected we see Hello Docker container that means we successfully ran this binary file which is compiled using C Lang in our container and the output is printed now let us say you want to change something in the output so instead of let us say hello Docker container I just want to print hello World here okay so I will just save this program and then I can just build it again but this time I will build it with the different tag so let's say I just did the minor change so I will just change the tag as 1.0.1 so let's build this image which is going to be built really fast and now let's run this image using this Docker run command but don't forget to change the tag because I have changed the tag for the image also to 1.0.1 so here also I am going to change the tag for the image and then press enter which is going to run this program and it prints hello world so how simple is this so this is how you can compile and run your C plus plus programs using Docker containers so as I said I just wanted to give you a real world example same thing you can do for your Java programs or any other programs which you want to run in different environments in this video we are going to see how we can do Port mapping between your Docker container and your host machine so let's say you have some kind of a server and that server listens on some particular Port so you need to expose your Port from your Docker container so the outer world will be able to interact with your server so in this video we are going to take an example of a node.js server the same Concepts you can apply on any other kind of server it can be a nginx server it can be a python flask or our Django server or any other kind of server so let's start with our example of dockerizing our node.js web app so what I'm going to do is I'm going to just create a new directory for me so I'm going to just write mkdir D4 and then I'm going to go inside that the for directory and here I'm going to create a new node.js app so for initializing my app I'm going to just write npm init and then hyphen Y and then press enter which is going to create uh package dot Json file inside my D4 folder now for This node.js Server I will be using Express so I need to install Express locally for this app so if you already know something about node.js or npm you can easily install the npm package using npm install and the package name in our case X its Express which is a very popular node.js package or npm package so I am going to just write Express here and then I am going to give this save flag here so it is going to be installed inside my directory and this Express will be added as the dependency in my package.json file so let me press enter which is going to install this Express package in my directory you can see this new directory is created which is node modules and this new dependency is added in my packet.json which is Express so now let's create our server.js file so if you can see in our packet dot Json file the main entry point right now is the index.js you can change it to a server dot JS and let us create this server.js file server dot JS here and then press enter which is going to create this server.js file so we are going to write a very simple node.js code which is going to use express and it's going to just print hello world whenever somebody will make a get request to This Server so I'm going to just uh copying and pasting this code because this code is available everywhere and it's very simple so what I have done I have just imported ah this Express and then I have created these two variables one is the port variable which will be exposed via a browser or a via the rest request and then we have the host here which is basically the local host and we have one get request here so whenever somebody makes a get request to the server we are going to just send hello world so very simple node.js server code and we are going to run this code let me clear this terminal so I'm going to just write node and the name of my server file which is server.js and when I just run this server.js using node.js is it's running like this and it's printing on which host and ports it's running so let's open our browser and we are going to just uh open this URL which is 0.0.0.0 uh colon the port number on which we have started this node.js server and I I'm going to just press enter and it just prints hello world which is the expected result right so now we want to dockerize our node.js server so let's see how we can dockerize our node.js server so for that I'm going to just close this app or stop this app and now I'm going to create a new Docker file so let's just create this Docker file by just giving this command which is touch Docker file now I'm going to go inside my Docker file and here inside my Docker file I'm going to use the node base image so when you go to the docker Hub there is an official base image for node.js and that is what we are going to use so I am going to just try it from and the base image will be node and the version of node we are going to use is a version 12 so you can use the latest tag also here which is going to give you the the latest version now in the next step I am going to define the working directory using the work their keyword and we are going to Define this work there in the user forward slash SRC for slash app folder and now this should be work data right so like this okay so we have defined our working directory inside this working directory we are going to ah copy our code and then we are going to do all the stuff now ah let us copy uh all the files which are there in our current folder to this Docker image so we are going to use the copy keyword to copy uh all the files but first of all we need to copy the package.json to The Container so that we will be able to run the npm install command and npm install command what it does it just installs all the dependencies into our container right so let's first of all copy the package dot Json file so we are going to copy the package log dot Json file and package dot Json file so these two files are responsible for all the dependencies to this directory right so now we have copied the package Json files so next step is to install all the dependencies using npm install so you can just give this command run npm install now if you are working in the production environment this command can be little bit different let me just write this in the form of comment so you can just write run npm CI and then you can give this only production flag production okay so if you are working in the production environment you can give this command if you are working in the development environment then you can just do this command so npm install will install all the dependencies and in our case there is only one dependency which is Express right so via this npm install this Express npm package will be installed in our Docker image now in The Next Step once all the dependencies will be installed we are going to just copy all the files which are there in our server code so we only have this one file which is server.js but let's say you have many modules and many files inside your node.js projects so I'm going to just write copy and then I'm going to copy all the files and folders which are there in the current directory okay now next step is important and this step is we are going to expose our Port so I'm going to just write expose and we are going to expose the port which we are using in our server so we are using uh port 8080 in our server so we are going to expose this port that means that we want to expose port 8080 into our Docker container so this exposed keyword means that we want to expose port 8080 from our container to the outside world for example to our host machine and this expose is a way of documenting so it's not going to publish your port at runtime it's just a way of documenting in your Docker file that you intend to expose this port 8080 in your Docker container so exposing Port using this expose keyword is a way of documenting which Port are used but it does not actually map or open any port we are going to open and map the port using the docker run command and we are going to use a different flag for publishing our port or opening or mapping our Port later when we just build and run our our Docker now the next step here will be to run our node.js application and we all know that we just need CMD and then inside our square brackets we will just write npm and then we are going to just give this comma and then we are going to give the name of our server.js file so this will be server dot JS now here one interesting point to note here is when we are going to copy uh all the files and folders from our current directory to the docker image you can see I have used dot dot that means it is going to copy node modules also into your Docker image and we have already installed our node packages using this npm install so this is going to override this node modules folder from your image right so to avoid copying your node modules ah into your Docker image you can create a Docker ignore file so this Docker ignore file is going to prevent your local node modules or your debug logs from being copied into your Docker image so let's uh just create this Docker ignore file so to create this Docker ignore file you can just write touch dot Docker ignore in the same format which I have used so this format is recognized by Docker and whatever you write inside this Docker ignore file so let us create this Docker ignore file first of all so we have created this Docker ignore file and we want to exclude the npm modules and npm debug DOT log file from copying into our image so this means that we have added npm modules and the npm debug log file ah which will be excluded when we are going to copy the files from our local container to the docker image okay so this will avoid the overwriting of our npm modules now we are done and we can build our image so let me clear this terminal so now let's build our image by giving the docker build command so I'm going to just write sudo ah docker build hyphen T and then the image name so let us say I am going to just give the name node underscore test colon the tag you can give any tag to your image so let's say I am going to give 1.0.0 or tag to my image and then the context and then press enter which is going to just build this image and in few seconds this image will be created so let me clear this terminal once again and let's list out all the images so sudo docker images and when you see here our Docker image is created with the tag 1.0.0 15 seconds ago okay so now we are going to run our container so to run our container we can just use sudo Docker run so as I told you we want to expose this port 8080 so that ah this server can listen to the request from the outside the container right so in order to map the port we use the flag which is called hyphen P which is also called publish and hyphen p is a way of mapping a host port to a running container Port so this is our running container port and let's say we want to map this port which is running inside the container to our Local Host machine and we want to let us say give the port 3000 in our Local Host machine and which is going to be mapped to port 8080 so if you specify this expose the port and if you specify this publish flag to map the ports then the service in the container is accessible from anywhere even outside the docker so this means that we want to expose port 8080 from our container to the port 3000 inside our host machine and now let's give the name of our image which we want to run which is node underscore test colon 1.0.0 okay and let us ah run this Docker container and this gives me error and the error is obvious because instead of using npm I should have used node okay because we have started our server using node command not npm npm we used just for installing our packages and man managing our packages right so let's rebuild our image once again and once our image is rebuilt we are going to just run our container so now our container is running and we can see the same output now we might be confused or you might be confused that we are exposing the port 8080 and when we go on this URL on our browser so let's go to this URL on our browser and let's see if it works or not so it's not going to work because we have mapped the port 8080 to the port 3000 on our local machine so this is the port on the container on your Docker container and this is the port which it will listen on your local machine so we want to listen on Port 3000 on our host machine so instead of port 8080 you can give Port 3000 and it's going to print hello world right so this is how this port mapping work so this will be the port which will be available on your local host and this is the port you have exposed inside your Docker container so let me just stop this container so I am going to go to the next terminal and I'm going to just write sudo Docker PS to list out all the running containers and this container is running so I'm going to just use the container ID from here just copy the container ID and then sudo and then the container ID which is going to stop this container so now this container is stopped and you can see uh in this terminal also that we are out of the container right so now let us say let me just ah clear this terminal and now let us say we want to map to the port 8080 itself on our host machine also from our Docker container so this is the port on the docker container and we want to map this port to the same port on our host machine if it's available then it's going to run fine so let's run this command and now this time when you go to the browser on Port 3000 obviously you will not get anything because we have mapped uh the port 8080 to our host machine now and now uh when you give port 8080 it's going to give you hello world if you want to run this server in the detached mode as I have told you you can use hyphen D so that this node just will run in the detached mode that means it will run in the background so this is how you can expose the HTTP Port you can also expose the TCP port and the UDP Port from your Docker container so let me ah just stop this container so I am going to just stop this container first of all and let me show you how you can expose the UDP and the TCP ports so let us say you are running a application and and in this application you are doing some TCP communication or the UDP communication so for mapping the TCP port and the UDP Port you uh can use the flag hyphen p and then you can use this kind of notation so the port which you want to expose from your container let's say I'm just exposing Port 80 and forward slash TCP so in case you want to expose the TCP Port you just need to write forward slash TCP after the port which you want to expose from your container and this will be the port you want to expose to the host machine so this port will be available on your host machine from this port to your container so this is the mapping right for UDP you just write forward slash UD P right so the flag is hyphen P you just need to write forward slash TCP or forward slash UDP to expose the UDP or the TCP flag you can expose multiple ports also by using this hyphen P flag so its not that you just can use only one hyphen P flag you can use multiple hyphen P Flags to expose multiple ports from your container to the host machine so this is how ah put mapping Works in a Docker I hope you have understood this concept so in this video we are going to talk about Docker Hub so what is Docker Hub so Docker Hub is a service provided by Docker for finding and sharing your container images with your teams or with the general public so as you can see I'm on this website which is Hub Dot docker.com and here I can sign in at the time of downloading the docker on your operating system you might have created a Docker ID for you and the password for you so you can log in with that Docker ID and password so once you are signed in with your Docker ID and password you will be able to see this kind of web page here you have this explore option where you can explore all the other rep repositories you have this repository option and under this repository option you will be able to see and manage your repositories which you have created and which you have pushed into your Docker registry here you also have the option for organization which we are not going to cover in this video and also you have all these General uh account related stuff here right now let's talk about the pricing a little bit so you can see uh for public repository Docker Hub is absolutely free and that's what we are going to be using but if you are working in an organization or you want to create some private repositories for your Docker images then you can choose one of these options which are provided here also it's not necessary that you need to use Docker Hub as a Docker registry you can create a Docker registry you have this documentation which you can use to create a Docker registry I know Google Cloud provide a Docker registry or a GitHub or nowadays also provide these kind of Docker Registries so you can create your own registry if you want you don't need a Docker hub for just managing your images right so right now you can see I don't have any image on my Docker Hub account so to start with I have this very simple Docker file which I want to convert to the docker image and then I want to push that image to my Docker Hub registry so let me list all the docker images on my operating system right now I don't have any image so let's build one image so I'm going to just write sudo Docker build dot hyphen T and the name of the image I'm going to just name my image as hello and then press enter which is going to just create this image I have this hello world image which is created five seconds ago right so now let me just also quickly run this image to see everything is working so I'm going to once again write sudo Docker run hyphen hyphen RM hyphen i t and the name of the image which is hello and then press enter and it prints the content of my main dot CPP that's what it's doing so that's a very basic minimal image the size is very small that's why I have done this and once you have all these images let me just clear the terminal and then let me just move this terminal little bit up and let's just list all the images once again so now I have this image hello and I want to push this image to my Docker Hub registry so in order to push this image first of all you need to log in with your Docker ID into your Docker terminal most probably you are already logged in but if you are not you can just give this command which is a sudo docker login and if you want to log out then you can just write log out here right so let's give this command which is a sudo Docker login and then give your username here I'm going to provide my username and then you need to provide your password so let me quickly provide my password and then press enter which is going to log me in the docker so you can see login succeeded and now I can just push my images to my Docker Hub registry so first thing we generally do in order to push the image to the registry is we just tag it so we can give this command which is a Docker and then tag and then the name of your image my image name is hello you can also take the image ID and then give the space and then give some tag to your image so right now because I want to push my Docker image to this Docker Hub account and which has the username code bind I will just first of all write code bind here and then forward slash and then you can give the name of your image I will just leave it as hello and then you can give the tag of your image so I'm going to just give the tag one 0.0.0 so this tag is useful whenever you want to just let us say keep working on your image and you want to update the image and want to adjust version your image into multiple versions so you have the track of all these versions right so I'm going to just tag my image I'm going to press enter and then I will once again list all the images and now you can see I have this image which the this name and I have the tag 1.0.0 right now once you do that you are ready to push your image to the docker registry the command is very simple sudo Docker push and the name of your Docker file which is codebind forward slash hello in my case you also need to give the tag here 1.0.0 and then you can just press enter which is going to push your image to your Docker Hub registry so just wait for some seconds and you can see it's pushed so I am going to go to my Docker Hub webpage and then refresh this web page and now I can see this image which is available here and also you will be able to see that this image is a Public Image so it's not private so anybody on Docker can see your image right also when you click on this image you will be able to see more information about the image so here you can give the little description for your image and also you can even write the readme for your image what it is doing and what's the purpose of this image right so here is the general information about the image you can also see this tags ah section where you will be able to see the tags related to your image I only have one tag here and the size of this image is around 746 kilobyte right and also you can see how you can pull this image so you can just pull this image using Docker pull code bind forward slash hello and then you need to use this tag you can just copy this and then pull this image also also you have the build section this is for the auto automation so if you are using GitHub or bitbucket automation system then you can directly push your image from the GitHub or bitbucket into your Docker registry you also have the collaborator Tab and then web hooks also and then you have the settings related to your Docker image right so you can make it private if you want and also you can delete your image from this section right so let's say I just want to pull this image I will just copy this text and then I will just write sudo and then paste this test text which I have copied which is a Docker pull and the name of my image with the tag and it's going to pull this image if it's already not there on your operating system so this was the simple demonstration using which you can create your images and then push your images to the docker Hub and then manage your images using the docker Hub so I hope you've enjoyed this video and I will see you in the next video
