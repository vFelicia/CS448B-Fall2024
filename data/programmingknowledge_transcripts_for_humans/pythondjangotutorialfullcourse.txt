With timestamps:

00:00 - in this tutorial we would talk about
00:02 - Django so Django is in a python based
00:04 - web framework so in this tutorial we
00:06 - will learn about what requirements we
00:09 - need to have on our machine to run
00:11 - Django so what tools and code editors we
00:14 - require to have so that we can run
00:16 - Django on your local machine so before I
00:19 - start I would like to show the content
00:21 - we are going to be covering in this
00:23 - video so first we will discuss about
00:24 - Django uh by the official documentation
00:27 - of the Django then we will talk about
00:29 - the tools and code editors what we
00:31 - require them and why we need them and
00:33 - then we will talk about how the steps to
00:35 - install Django so these are the steps
00:37 - how we can install Django and how we can
00:39 - start or create a Django project and a
00:41 - Django app on our local machine so
00:43 - Django is a high level python web
00:46 - framework that encourages rapid
00:48 - development and clean pragmatic design
00:50 - so it was built by experienced
00:52 - developers it takes care of much of the
00:55 - hassle of web development so you can
00:57 - focus on writing your app without
00:59 - needing to reinvent in the beat it's
01:01 - free and open source in that Django is
01:03 - usually based on MBT pattern model view
01:06 - template so this I'm referring to the
01:09 - official documentation of the Django so
01:12 - it says there is a model layer so model
01:16 - layer if it is used for structuring and
01:18 - manipulating the data of your web
01:20 - application
01:21 - so the m stands for model and this model
01:25 - layer is used for structuring and
01:26 - manipulating the data of the web
01:28 - application the next we have is the view
01:30 - layer and the view is is responsible to
01:33 - encapsulate the logic responsible for
01:36 - processing a user's request and for
01:37 - returning the response so all the
01:40 - business logic is is encapsulated inside
01:42 - the view layer and it is responsible for
01:45 - building the logic and how the user can
01:48 - request and how you response to that
01:50 - particular request so this is all about
01:52 - in The View layer so next we have is the
01:55 - template layer so template layer
01:56 - provides a designer friendly syntax for
01:58 - rendering the informations how you want
02:00 - to present the data to the user so the
02:03 - all the front-end part that is htmlc is
02:05 - the JavaScript is is there in the
02:08 - template layer so how you can design
02:09 - your front-end Parts how you can want to
02:12 - show that the data or you should show
02:14 - that design your page to the user is all
02:16 - defined inside the template layer before
02:18 - we create a Django server on a local
02:20 - machine and we run it on and open
02:21 - machine you can go to the official
02:24 - website of the Python you can move to
02:26 - downloads and according to your
02:27 - operating system you can download Python
02:29 - and uh when uh please make sure one
02:32 - thing here that when you have downloaded
02:34 - the python and when you run the
02:36 - installer what you have to do is you
02:38 - will get a window like this on your
02:41 - screen and it says like install python
02:43 - 3.6.2 a 64-bit version what you need to
02:46 - do is make sure to enable this option
02:48 - that add python 3.62 to power so because
02:52 - this would add Python 3 point any
02:55 - version you are using that is type
02:57 - python 3.x the X could be 3.5 3.6 3.7
03:00 - 3.8 to the path and you can access
03:02 - python via command line I will show this
03:04 - you yeah I would open the command line
03:07 - yeah this looks better with a good font
03:09 - size so what I want you to do is now
03:12 - when you have installed python on your
03:14 - local machine you just need to type
03:16 - python it says yeah it says python 3.8.1
03:21 - after it's downloading downloading
03:23 - installing python to your path and
03:24 - running python from the command line you
03:26 - can move to sqlite studio and the sqlite
03:29 - studio is used to interact with the sqli
03:31 - database where initially we are going to
03:33 - work with sqli database in Django so you
03:35 - can this is this provides you a
03:37 - graphical user interference so you can
03:39 - click on this link download Windows
03:41 - binary open and Link so I'm opening this
03:44 - link in the new tab so what you can do
03:46 - according to your operating system you
03:49 - can download the file from here and
03:51 - install it on your machine next what you
03:53 - can do is install visual studio so
03:56 - visual studio code is the code editor we
03:59 - are going to use for this series we are
04:01 - going to use visual core Studio because
04:03 - the best part of this is that it has an
04:05 - integrated terminal inside it so I can
04:07 - show you this thing like we this is the
04:09 - virtual Studio code and like we if we
04:12 - are doing some projects so we can
04:13 - interact with the visual studio code as
04:15 - well now the the third part like we have
04:18 - the A and the B part and in the third
04:20 - third part we are going to see steps to
04:22 - install Django so what you can do is
04:24 - open your command line I would recommend
04:27 - you to run this command paper and python
04:30 - base package manager so it helps you to
04:32 - install packages and libraries
04:34 - externally a y command name so what you
04:36 - need to type is pipe install Django
04:39 - so this will install Django new machine
04:41 - but like I have already installed Django
04:43 - on my machine so it might tell me the
04:45 - requirement already satisfied because I
04:47 - have already installed Django on my
04:49 - local machine so to check this what you
04:52 - can do I would recommend you to type
04:55 - python
04:56 - so python has been run by a command line
04:59 - and now type import Django
05:02 - then next you can type Django Dot
05:06 - version
05:08 - so this will return with the Django
05:09 - version which has been sold successfully
05:11 - on my machine so that this look great
05:13 - that the angle has been installed on my
05:15 - machine so first what you need to do is
05:17 - type install Django and you need to run
05:19 - this command so next time we are going
05:21 - to work with Visual Studio code in with
05:22 - the integrated terminal so
05:25 - after opening your terminal what you
05:27 - need to do is move to desktop
05:32 - then move to the that folder CD
05:34 - programming uh knowledge so I am inside
05:37 - this folder and now I am going to run
05:40 - directly command so it shows me that
05:41 - hello.py file has been and the folder
05:43 - called notes are given there so what I
05:45 - need to do is Django
05:48 - admin
05:51 - start project
05:54 - this could be any
05:56 - project name you want to give in my
05:58 - project
06:00 - now I would run the directory command so
06:03 - this says my project has there is a
06:06 - folder called my project which has been
06:08 - has been installed on in the current
06:10 - directory and this is due to this
06:12 - command Django admin start project my
06:14 - project so oh yeah you can see that my
06:17 - project has been sold successfully now
06:19 - the Django project has been created and
06:22 - when if you want to
06:25 - start a app so as I mentioned earlier
06:29 - the inside this there is a manage.p
06:32 - Wi-Fi
06:33 - so you can run this file via command
06:36 - line if you specify python as a prefix
06:40 - to this file name so in the same way we
06:42 - can run this manual.py file by command
06:45 - line if you use python as a prefix so
06:47 - what I'm trying to say is
06:50 - like you move to the oh sorry you move
06:54 - to the inside the Django project folder
06:57 - which is my project named here CD my
07:00 - project
07:03 - now what you need to do is run the
07:05 - directory command so there is file
07:06 - called manage.py you can
07:08 - run this file if python manage Dot py
07:13 - so you are able to run this file but any
07:16 - addition to this uh this I'm also
07:19 - specify something start app
07:22 - and you it could be my app so let me
07:26 - clear one thing here here so it's a bit
07:28 - so first I created a I I was inside my
07:32 - programming knowledge directory then I
07:34 - created a folder called my project
07:37 - so this is a Django project so inside a
07:39 - Django project I created an app which
07:42 - I'm specifying like this python
07:45 - manage.py inside the project folder I am
07:49 - trying to create an app with the name my
07:51 - app I want to tell you one thing that
07:53 - inside a Django project there can be
07:55 - multiple apps so or you can say like
07:58 - there can be multiple apps inside a
08:00 - single jungle project okay so like by
08:02 - using this command we are going to
08:04 - create a app so I would say python
08:06 - manage.py start app my app
08:09 - so when I move to my folder I would say
08:13 - my app so then my app has been created
08:15 - inside my my project folder in the same
08:18 - way I can do one thing extra
08:20 - I can do my app
08:22 - to
08:25 - oh so this also works so like what I
08:28 - told you that inside my Django project
08:30 - single Django project I have created two
08:33 - apps one is my app and another is my app
08:36 - too so what I wanted to tell you that
08:38 - inside a single Django tutorial you can
08:40 - create multiple apps so far we have
08:42 - moved to this now in the last one what
08:45 - you are going to run if you want to run
08:47 - the Django server on our local machine
08:48 - what you need to do is you should be
08:51 - inside your project folder and type
08:53 - python
08:55 - manage
08:58 - dot py run server
09:05 - so
09:06 - so this says
09:07 - Django version 3.0.1 using settings my
09:10 - product of settings starting developer
09:12 - somewhere at this and this is
09:16 - 127.0.0.1 and this is the 8000 is the
09:18 - port number so I want to tell you that
09:20 - this is your local host address till
09:24 - 127.0.0.1 and 8000 is your port number
09:27 - so either you can copy this address or
09:29 - you can one simply do one thing since
09:32 - 127.0.0.01 is your localhost address
09:34 - what you can type is simply type
09:36 - localhost and specify the port number
09:40 - and port number was 8 000 so this would
09:43 - okay now you can see the this page is
09:47 - being loaded here so what we can do we
09:50 - can quit the server with the control
09:51 - breaks break command I think this is any
09:54 - issue with this
10:00 - I would again run this command
10:04 - okay so this shows that this has been
10:06 - now it has been started on my machine so
10:09 - like so now this is so this is the so
10:11 - you have to use this command
10:13 - python manage.py run server so this has
10:16 - has started the server on my local
10:19 - machine with the address
10:21 - 127.0.0.1 colon 8000 so this means that
10:24 - that address was localhost and the port
10:26 - number was 8 000 I had simply type
10:28 - localhost column uh colon 8000 so uh the
10:32 - server is running successfully so the
10:34 - install Works successfully
10:36 - congratulations so though this review
10:38 - from here you can refer to Django
10:39 - documentation tutorial for polling app
10:41 - Django Community I wanted to tell you
10:44 - that uh uh like uh in the previous
10:47 - tutorial I told you like we were going
10:49 - to move with the request and the
10:51 - response part but uh before this I
10:53 - wanted to show you that uh I like I want
10:56 - to discuss a very important topic with
10:57 - you and that was about virtual
10:58 - environment so and to only want to only
11:02 - want to focus on this topic only in this
11:05 - lecture because this topic has its own
11:08 - unique importance and value because it
11:11 - has a it has a good Concept in itself
11:14 - and you need to have a good knowledge
11:16 - about virtual environment how you can
11:18 - work with virtual environment variables
11:20 - so because uh this would really help you
11:23 - like suppose you can have two cases here
11:25 - uh like I'm just giving you two
11:27 - scenarios why you need to learn about
11:28 - Workshop environment suppose you have
11:31 - made your Django project and you want to
11:33 - deploy the Django Project online so in
11:36 - order to deploy the Django pro project
11:38 - online you're on a server you need to
11:41 - have a have a record all the external
11:44 - libraries dependencies and packages you
11:47 - have used in this project in a file
11:49 - called requirements.txt so that the
11:52 - server can install those dependencies
11:55 - packages and libraries on on the server
11:58 - on the cloud I mean the server can
12:00 - install install that dependencies
12:02 - packages and libraries on the cloud then
12:04 - the server will install your application
12:06 - on the cloud and with the help of both
12:08 - the things and both the things gets
12:10 - installed then you are only able to run
12:12 - this application or second case you can
12:14 - have that when you are working in a team
12:17 - and there might be a possibility you
12:18 - want to share this code with someone
12:20 - else you want to share this whole
12:21 - project with someone else and they want
12:24 - to run this project on their machine or
12:26 - server as well but if they want to run
12:28 - this project or on their machine or this
12:30 - server server they need to have the list
12:34 - of those external libraries packages and
12:36 - dependencies you have mentioned in your
12:38 - project
12:39 - so that they can get get those
12:41 - dependency installed on either on their
12:43 - machine or on the server in order to run
12:46 - this particular application
12:48 - so uh without any further delay I again
12:52 - welcome you all to programming knowledge
12:54 - and so I my first step would be uh I
12:58 - have created a folder uh on my desktop
13:00 - with the name programming knowledge and
13:02 - the very first step I am going to do is
13:04 - create a Django project Django
13:07 - admin
13:08 - start
13:10 - project
13:13 - my first
13:17 - project
13:19 - so when I run this command so I am able
13:23 - to create a project inside this
13:25 - directory here you can see this you can
13:28 - even run the directory command as well
13:31 - so this would make sure that you have
13:33 - created the project now when you have
13:35 - made the project you would move into the
13:38 - project folder with the command CD my
13:41 - first
13:44 - project so I am inside the uh my project
13:47 - directory now
13:49 - so now I would create a simple I rather
13:53 - I would say that I would initialize a
13:55 - tab inside this project folder so in the
13:58 - you can get familiar with this command
14:00 - lines in my previous tutorial with the
14:02 - name python
14:05 - manage
14:07 - dot p y start app and you can name
14:12 - anything with your first app I would
14:15 - name this as my
14:17 - first
14:24 - so this looks good
14:27 - so this has created a app inside my
14:31 - project directory so to ensure this I
14:34 - would again run the directory command
14:36 - and it says my first have been installed
14:38 - so I'm going to slow with this because
14:41 - this has a very important concept now
14:43 - now I would run python
14:49 - manage
14:52 - Dot py
14:54 - bruh sir were
14:59 - now I hope the server gets started okay
15:02 - now it's running so either you can copy
15:04 - this address or you can say
15:08 - localhost is same as 127.2.1
15:12 - I mean
15:14 - 127.4.4.1 now it is with the port number
15:16 - eight thousand
15:19 - so the localhost colon 8000 is same as
15:21 - this address
15:25 - so this is the same as localhost colon
15:27 - 8000 now
15:28 - I would want you to terminate this kill
15:33 - this for kill This Server so I would
15:35 - cross this
15:36 - and now I would open the command line
15:38 - again
15:41 - now I want to tell you how why I'm going
15:44 - to show this I am going I'm going to
15:46 - slow with this because this is a very
15:47 - important concept so uh now I would move
15:51 - to my desktop
15:55 - and I would move to the programming
15:58 - knowledge folder then I would go to the
16:00 - my project folder
16:03 - foreign
16:08 - folder so now
16:16 - so I start started the server and it was
16:19 - running fine so I would refresh this
16:21 - trade so the server won't run now I
16:23 - guess so it's not running so because uh
16:27 - I had terminated the process so okay now
16:30 - it looks fine so now I what I want to
16:33 - tell you is
16:34 - uh you can uh open up your command line
16:41 - and type
16:44 - install
16:45 - virtual world
16:48 - PNP this is new this packet is
16:50 - particularly needed to create a virtual
16:52 - environment
16:53 - so
16:54 - so this is requirement already satisfied
16:57 - because I already installed this and now
16:59 - I would move to my project directory I
17:02 - am wait create a virtual environment
17:04 - variable with virtual e and V e now you
17:09 - can give any name to this it could be my
17:12 - environment my first environment Django
17:14 - environment variable it could be any
17:16 - name so you can have a name of your
17:18 - phone so I will give it my e and V
17:23 - so this this process takes a minute or
17:25 - so so this would create a virtual
17:28 - environment variable so by the time it
17:30 - gets installed I would like to tell you
17:32 - something like we till now we have
17:35 - created uh our environment variable name
17:38 - now we need to in order to use this
17:42 - environment variable name we need to
17:44 - activate this and why we are doing so
17:47 - because this would help us to keep track
17:53 - record of all those dependencies and
17:56 - packages required in order to be
17:58 - mentioned in requirements.txt file so we
18:01 - can use them so this is a very good
18:04 - process uh so now
18:07 - so this environment has been installed
18:10 - and I I would activate so I would type
18:13 - so before this I would show you
18:16 - that I'm in the full program in
18:18 - knowledge now I am in the project ID
18:19 - this my EnV variable has been
18:21 - rationalized with the folder so you can
18:24 - have a look at this folder my in the
18:26 - scripts then there is activate so in
18:28 - order to activate this variable so what
18:32 - I need to do is I would go so this is
18:34 - the same as I would go my e and B
18:40 - slash
18:41 - Scripts
18:43 - slash
18:45 - activate
18:47 - uh activate please make sure the
18:49 - direction of a slash sign so you should
18:53 - please make a note of it so this would
18:56 - activate the virtual environment
18:59 - inside of quality yeah this looks pretty
19:01 - good so the Mind e and V is now working
19:05 - here as a virtual environment variable
19:08 - which will help us to keep a tracked all
19:10 - of our things so what I want you to do
19:12 - is the first thing I want to do that
19:15 - earlier we ran the command python manage
19:18 - dot p y run server and the server had
19:21 - started on our machine so that looked
19:24 - pretty simple now I would type this same
19:27 - command again
19:29 - python sorry for this
19:32 - python manage
19:35 - dot p y
19:37 - run
19:39 - server
19:42 - so now you see this process doesn't get
19:46 - started
19:47 - so it says couldn't import Django are
19:51 - you sure it is it's installed and
19:53 - available on your python environment
19:55 - variable so uh the environment uh
19:59 - variable did you forget to activate a
20:02 - virtual environment but I'm sure pretty
20:03 - sure the virtual environment is is
20:06 - activated and I
20:09 - I this I this time I wanted to show you
20:12 - this because uh I would again run this
20:15 - command and it would give me the same
20:16 - error because
20:18 - I want to tell you
20:20 - that a Django has been installed on my
20:24 - machine so I want to tell you one thing
20:26 - that Django has installed on my machine
20:28 - but not inside my virtual environment
20:32 - so I would repeat this the Django
20:34 - earlier had installed inside my my local
20:37 - machine but not inside my virtual
20:41 - environment so this is the same case
20:43 - when you might want to work with uh you
20:46 - when you work in a team and you might
20:48 - share the code with someone and he might
20:51 - the somebody might add an external
20:53 - dependency so how you can keep track
20:56 - that externally depends dependency has
20:58 - been added on your project so how will
21:00 - you keep a track record of those things
21:02 - so you will keep a track record of those
21:04 - things via environment variable and
21:06 - requirement on DxD the very next command
21:08 - I would tell you to install
21:11 - Django inside my virtual environment I
21:14 - would simply type pip
21:16 - install
21:18 - Django
21:22 - so this would install Django inside my
21:24 - virtual environment so I would want to
21:27 - repeat you so this one installed Django
21:29 - on my uh inside my virtual environment
21:33 - so yeah great so Django has been
21:35 - installed on a machine
21:36 - then the first thing you need to type is
21:39 - so I would like to tell you that I'm
21:43 - inside my project directory so Django
21:45 - has been installed so in order to make
21:47 - sure this I would type this command tip
21:50 - freeze
21:52 - requirement Dot
21:55 - txt
21:57 - so I would write direct one now you can
21:59 - see a file called requirements.txt has
22:01 - been created and I will open that file
22:04 - now this is the point I want to show you
22:07 - that in order to run this project I need
22:10 - Django as an external because jamungo is
22:14 - a python based web framework so it is an
22:16 - external packages or you can say
22:17 - dependency which python uses to make web
22:21 - applications so this python package
22:24 - Django is it needed with the version
22:26 - 3.0.2 in order to run this application
22:29 - so suppose I want to tell you so this is
22:33 - the now I will run the command because
22:35 - now I have made sure that inside my
22:38 - requirement PhD Django has been
22:39 - installed on inside my virtual
22:41 - environment I specified those
22:43 - environment variables packages depends
22:45 - dependency inside the file
22:47 - requirements.txt now I I made sure that
22:50 - Django has been installed my uh inside
22:53 - my virtual environment now I would run
22:55 - the command
22:57 - python
22:59 - manage dot py run server
23:06 - so this would start the server now you
23:08 - can see that inside my environment
23:10 - variable I ran this command and this
23:12 - worked
23:14 - so I would go to this I would refresh
23:17 - this page
23:19 - now the server has started successfully
23:22 - so until now we have covered till this
23:25 - part sorry for this
23:27 - so what I mean with this command suppose
23:29 - I want to tell you that
23:32 - suppose uh we are working uh on project
23:36 - and someone
23:39 - like I want to show you an example of
23:41 - this
23:42 - so these are the suppose you are working
23:44 - on a data science project uh and you are
23:46 - working on a platform like Django and
23:49 - someone might have come with three uh
23:51 - must have added these three dependencies
23:54 - so what you can do is
23:57 - you can add those dependencies
23:59 - suppose I'm just for an example someone
24:02 - was working within and added those
24:04 - dependencies on your project as well so
24:07 - you can utilize this by you can install
24:10 - those these dependencies your packages
24:13 - or by running a command I will tell you
24:16 - so I would first terminate this process
24:19 - so I would open my command line
24:22 - so I would go to the desktop folder
24:26 - then programming knowledge so now I will
24:29 - run the directory command so yes
24:31 - requirement.txt is here and I can read
24:34 - this file so I would type the command
24:37 - pip install minus r
24:41 - requirements.tase this so this line mean
24:44 - that install all those dependencies
24:46 - which are present inside the file
24:49 - requirements.txt in order to get working
24:52 - with this project so this would install
24:54 - all those dependencies so this might
24:57 - happen that already few of those
24:59 - dependencies might be already satisfied
25:01 - like I said this dependency is already
25:03 - satisfied and this might be upgraded
25:06 - into something or so so this is
25:09 - requirement already satisfied now when I
25:12 - came to mat plot live so it started with
25:16 - the process of installing those Library
25:18 - so what I mentioned you so they might be
25:21 - a case that someone might come and add a
25:23 - new uh package your dependency to it so
25:26 - you might need this in order to run the
25:28 - full application whole application so to
25:31 - keep a track record of the dependencies
25:33 - required you need to specify them in a
25:36 - file code requirement or TFT and the
25:38 - server does the same very same thing
25:40 - when you deploy your application and the
25:43 - server in order to run the application
25:46 - on cloud you need to define those
25:49 - dependencies which are needed to run the
25:51 - application so this is a very important
25:53 - concept and to install those you can run
25:55 - this command pip install minus r
25:58 - requirements.txt in order to run all
26:01 - those application so uh thank you very
26:04 - much so like uh I would like to show you
26:08 - one thing that from now we are going to
26:10 - work on vs code and this is my project
26:12 - structure and I would like to show you a
26:14 - graphical view of my project as well so
26:16 - this is my project with the name my
26:19 - first project I have an app named my
26:21 - first app and I have created my EnV and
26:24 - here you can see I have activated my
26:26 - virtual environment variable and I have
26:29 - created a requirements.txt file as well
26:31 - so if you have any doubt regarding this
26:35 - one if this thing seems new to you so
26:37 - you can refer to my previous two videos
26:39 - so what I'm going to show you so this is
26:42 - going to be very interesting tutorial
26:44 - from now we are going to be learning uh
26:47 - this is going to be very Hands-On
26:48 - tutorial so and it's going to be very
26:51 - interesting also so what I'm going to
26:53 - show is you is that first you define a
26:55 - URLs key and then we will generate a
26:57 - response to it so what we need to do is
27:00 - I would like to have a a brief overview
27:03 - of my structure as well so this is I'm
27:05 - inside my first project folder so there
27:07 - are various files with extension.py
27:09 - files so one of the bonus file here is
27:11 - urls.py file so like in this tutorial we
27:14 - are going to be working with this file
27:15 - so
27:17 - so before and the second file is
27:19 - settings.py file so first thing you need
27:22 - to do is move to your settings.py file
27:27 - and inside the installed apps you have
27:31 - to mention the app you have created
27:34 - with the name
27:35 - like this is the app which I made so you
27:37 - have to mention your app name inside
27:40 - settings.py file my first
27:43 - app
27:44 - okay and now what I'm telling you the
27:48 - second thing you need to do is uh like
27:51 - there is a your rls.py file in this in
27:54 - this directory so what you need to do is
27:57 - create one another url.py file so like
28:01 - this is there are two my first project
28:03 - so there is our holiday New York file
28:06 - inside the project directory because I
28:08 - told you that inside a single Django
28:10 - project there can be multiple apps so
28:12 - you need to create a urls.viewer file
28:14 - for this app as well so what you need to
28:16 - do click here
28:17 - new file URL
28:21 - urls.py
28:25 - so I have created this file and now what
28:28 - I'm going to tell you that there are now
28:30 - two urls.py file one is inside my
28:32 - directory my first app and one is inside
28:35 - my direct in my first project so I would
28:37 - also have graphical view to it so I'm
28:39 - inside my first project folder and
28:42 - there's you already your short pivot
28:43 - file inside it and now there is a URL
28:47 - dot py file in this folder as well
28:50 - okay so so you can see that now there
28:54 - are two URL dot Piva file one is inside
28:55 - this folder
28:58 - and one is inside this folder
29:00 - so what I need to mention my Django
29:03 - project that you need to include usg.py
29:06 - file which is inside my folder called my
29:08 - first app so first you need to to
29:10 - include this you would type here include
29:14 - and second
29:15 - path
29:19 - include
29:22 - and you have to mention here my first
29:26 - app dot urls
29:30 - so this is the that I mentioned that
29:32 - under the root directory you have to
29:34 - include my first app.urls so this looks
29:36 - pretty fine now
29:38 - I would Define the urls
29:41 - here
29:43 - so uh you from there you can use the
29:45 - first line you need to add this from
29:47 - django.urls import path
29:50 - so I would move to there from Django
29:54 - dot urls
29:57 - import
29:58 - path
30:00 - and then you need to define a list of
30:02 - URL patterns
30:09 - okay so this looks pretty same as this
30:11 - also because here you can see they have
30:13 - included this from django.urs import
30:15 - path as well and URL patterns is the
30:18 - list so this looks pretty fine here now
30:22 - I would Define the first path
30:26 - to be this but before I want to tell you
30:29 - that the URL will only work when there
30:32 - is a function call defined to that
30:33 - particular URL so for that what you need
30:37 - to do is
30:38 - for you what I'm going to tell you you
30:40 - need to add this line
30:43 - because this url.py is present here so
30:45 - you type
30:47 - from Dot from current directory
30:51 - import
30:53 - views
30:55 - so what is the importance of these two
30:57 - lines is that
30:59 - the you have to create your views here
31:01 - so what they mean by is that for this
31:04 - particular URL you have to mention a
31:06 - function call
31:08 - so
31:09 - I would do one thing that I would
31:13 - mention this path
31:16 - and called views Dot
31:20 - my function called
31:24 - okay and I would name this as
31:28 - index so Nim index is used to refer the
31:32 - path name so I would tell you the
31:35 - importance of an index uh sorry if I
31:37 - would tell you the importance of name
31:38 - how why we mentioned names on what when
31:40 - they are used when you and how can we
31:43 - use them in a blade how can we use them
31:45 - in the templates Okay so
31:49 - uh in what I'm telling you that this pad
31:53 - path to call fuse dot my function code
31:56 - this could be any function name with the
31:59 - name and I have given this name this url
32:02 - url has a specific name called index
32:05 - okay so now you would move to views dot
32:08 - POI file and Define a function my
32:10 - function call
32:16 - and
32:18 - this takes a request as a parameter so
32:21 - this is this is you have to Define this
32:23 - because you you are making a request to
32:25 - this function call
32:26 - and now to generate a response what you
32:30 - need to type is you need to type you
32:32 - need to import to there are two types of
32:34 - responses one is HTTP response and other
32:36 - is Json response so what you need to
32:38 - type is
32:39 - from Django
32:42 - dot HTTP import
32:47 - HTTP response
32:50 - as well as Json
32:54 - response
32:57 - so
32:58 - I think now it should work pretty fine
33:00 - and I have a generate a response return
33:05 - HTTP response of hello
33:09 - sorry hello
33:12 - world
33:13 - so now I would so I would first have a
33:16 - quick recap of this that I have first
33:19 - included URL dot py file first thing I
33:23 - did is include my app inside this then I
33:27 - have included the myfirst app.urf inside
33:29 - the my your.po file of my first project
33:32 - then I mentioned this path and I made a
33:36 - function code to this path using the
33:39 - views file because in the views file
33:41 - views.pify value you mentioned you
33:43 - mentioned your function call so I meant
33:45 - my function call and I named this
33:47 - particular URL as index and inside my
33:51 - first function called
33:53 - I generated a HTTP response so I think
33:55 - this should this should work fine now so
33:59 - I would say python
34:01 - manage
34:02 - dot py run
34:05 - server
34:09 - so this should work fine
34:11 - okay the server has started so I would
34:14 - okay yeah this looks pretty good so you
34:17 - can see
34:19 - you can see
34:21 - because I didn't mention something and I
34:24 - I didn't mention any any word here so it
34:26 - mentioned as there is a root directory
34:28 - so when I passed on this URL
34:31 - it like when I got my URL this
34:35 - particular URL the root directory so it
34:37 - called my function call inside my
34:39 - views.py file and I when I went to the
34:42 - views.py file so it had a request as a
34:45 - parameter and it generated HTTP response
34:48 - of this hello world so so this was the
34:50 - first thing now what you can do what you
34:52 - can do you can pass parameters as well
34:54 - so what you need to do uh I I will show
34:57 - you uh one thing uh for sure another
35:00 - thing what you can do is
35:03 - you can copy this line
35:10 - and you can name this as about
35:15 - and you can call this my function about
35:19 - and you can give this as about
35:23 - okay and now I'm making a path called
35:26 - about and Google dot my function about
35:28 - so it says my first app dot views has no
35:32 - attribute my function about so I need to
35:34 - Define that
35:35 - so I would Define this as well okay
35:38 - for quick or quick I'll overview I would
35:41 - copy this and I would generate
35:46 - about response
35:52 - okay and I would now
35:54 - call this function my function about so
35:57 - what I did here is uh I made a request
36:01 - to slash about from my root directory
36:03 - and it got my function about and I've
36:06 - given I gave this URL a particular name
36:08 - about and it went to q.py file and
36:11 - called this particular function
36:14 - and I would go back to my server so
36:17 - right now on the root it is generating
36:19 - hello world but as soon as I as I made a
36:23 - request to the about page so it says
36:25 - about response so this is pretty good so
36:28 - now you can understand the theory so you
36:31 - can also do one thing
36:34 - now uh what you can do is
36:38 - copy this line as well
36:43 - and name this as ADD
36:46 - my function or you can uh
36:50 - add int
36:53 - or you can send this simply as a views
36:55 - dot add
36:57 - now I am telling this route uh what I
37:02 - can mention showed you like you can also
37:04 - pass parameters as well
37:06 - so to pass integer I would type like
37:09 - this
37:11 - so I would move back to this and type
37:14 - and
37:18 - like you have to mention the end then a
37:21 - colon then h
37:22 - so this is going to be int a
37:29 - then into B
37:33 - okay
37:35 - and now I have to define the views dot
37:38 - add so uh I would go to Dev add not
37:43 - force parameter which is going to be
37:44 - request the second paragraph is going to
37:47 - the integer which I'm taking which was
37:49 - suppose I'm here 8 gaming as X or you
37:52 - can for Simplicity to use a
37:55 - then B
37:57 - so what you need to do is
38:01 - return
38:03 - HTTP response of
38:07 - a plus b
38:10 - so I think it should work now
38:14 - what I'm telling you to add
38:18 - two integer first one is going to be 1
38:20 - and second one is going to be 2 so it
38:22 - should work yeah now it has it has given
38:25 - me two integers of one and two and it's
38:28 - returned in the state repeat responses
38:30 - in output three the one thing I wanted
38:32 - to show you uh will this work if I
38:35 - change this a Comm B to X comma y
38:39 - X Plus y
38:42 - so this is all a part of learning
38:44 - process
38:45 - so I should make sure the graph server
38:47 - is running yes the server is running
38:49 - so first test thing is I will move to
38:52 - this here it's working
38:54 - now I would move to this
38:56 - about yes working now I would move to
38:59 - add part add
39:01 - 4 comma 5.
39:05 - so this doesn't work
39:07 - okay so why this didn't work because
39:12 - I had mentioned here in the urls.py file
39:17 - this is I'm going to get a as a
39:20 - parameter then b as a parameter so what
39:23 - I need to be mention here that inside my
39:27 - views.py file I had to strictly mention
39:29 - this as a comma B
39:31 - so so make sure you be careful about
39:35 - this now
39:37 - now I will restart the server
39:39 - and then refresh this page now this
39:43 - works because I wanted to make sure
39:45 - because this that inside I mentioned
39:48 - here as a an insured mention here as
39:50 - quick V so input parameters to my
39:52 - request part would be a comma b as well
39:55 - so then I generated HTTP response of a
39:57 - plus b okay so this was look good now
40:01 - the first second thing you need to do
40:02 - you can do you create a URL
40:06 - so I would click quickly create this
40:08 - path
40:10 - intro
40:13 - the first item is going to string name
40:17 - and the second one
40:19 - is going to end
40:21 - with an H
40:24 - and I would call views Dot intro
40:29 - with the name particular name to this
40:31 - URL as intro
40:34 - so this looks good
40:35 - so this would throw because I have not
40:37 - defined intro in my views.vis file so I
40:40 - wouldn't move back to my so this time
40:42 - I'm going to show you a Json respawn
40:44 - Define intro as a function taking first
40:47 - parameter as a request the second as
40:50 - name so let me check what I have defined
40:53 - first so I have defined name as first
40:54 - and age as second the name is going to
40:57 - be first and age is going to be second
40:59 - now
41:01 - I would Define return a Json response so
41:06 - to generate it is just on a small I need
41:08 - to define a dictionary so dictionaries
41:11 - are basically key value pairs so could
41:14 - be my dictionary
41:19 - is going to be variable so with this
41:22 - name
41:23 - is going to be named
41:25 - here and age sorry
41:30 - uh age
41:32 - is going to be an age here
41:35 - and
41:38 - I would return a Json response here so I
41:41 - wanted to show you difference between
41:42 - the Json response so
41:46 - Chrome is an error because uh I think
41:49 - that it's an uh because I have defined
41:51 - views.intro now it should work
41:53 - particularly fine
41:55 - now it has started so what I am showing
41:58 - you
41:59 - I will move to intro
42:03 - name as
42:06 - Jack
42:07 - and age as 25 so will this work
42:10 - so yeah you here you can see that now it
42:13 - returned me and Json response and I am
42:15 - showing you particular like here it
42:17 - shows that this is a Json response with
42:19 - the name and age and for the you can uh
42:22 - show show the raw data as well so this
42:25 - is another this shows you how a Json
42:27 - object looks like and and in the Json
42:30 - format you have just for uh you can hear
42:32 - the name is Jack and the age is 25 and
42:35 - this is a Json object so like in this
42:38 - way you can create a more more URLs so
42:41 - basically here I covered the HTTP
42:43 - response as well as the Json response so
42:46 - so like so to generate any if we
42:50 - generate a request so via a URL so we
42:54 - generate a response to it as well so
42:56 - like in this tutorial we are going to
42:58 - basically work with templates and before
43:01 - I start with this tutorial I will show
43:03 - you that you can go to our GitHub
43:06 - repository and you can have the Look at
43:08 - Full Source Code that we were working
43:10 - with the previous three tutorials so you
43:12 - can move to this link GitHub github.com
43:15 - pro software development and the learn
43:18 - Django is the repository name so I you
43:21 - can have a look at the full source code
43:23 - you can either you can even download
43:25 - this repository you can download this
43:27 - full source code and I have mentioned
43:29 - below how you can run this project so
43:31 - like what you need to do you can either
43:33 - clone or clone this project or download
43:35 - the project extract the files then move
43:38 - into the project directory and then
43:40 - there's a file called requirements.txt I
43:43 - showed you in the previous tutorial in
43:44 - the like in the previous tutorials how
43:46 - you can create a requirements.txt file
43:48 - and why is it created so you need to
43:51 - install the all the packages necessary
43:53 - to work with the project so I would open
43:55 - the requirements or thp file this is
43:57 - these are the package required and after
44:01 - uh installing these packages you can
44:03 - type the command python match.py run
44:05 - server and this would run this project
44:07 - on your local machine so we would be
44:10 - working on this repository as well so
44:13 - after the video I'm going to push the
44:15 - source code you can have a look at the
44:17 - source code as well what changes what
44:19 - changes were done so this would help
44:21 - help you to track the code as well and
44:25 - you can run this project on your local
44:27 - machine as well so uh in this tutorial
44:30 - we are going to work with templates and
44:34 - basically I told you the Django is based
44:37 - on MBT pattern model view and templates
44:40 - so models are based with your database
44:44 - and Views are based on your business
44:46 - logic part and templates are based on
44:50 - like uh on front end so models are based
44:52 - on your database views on business logic
44:54 - and templates for front-end part so what
44:58 - you can I want to tell you that for
45:00 - front-end part basically we are going to
45:02 - use bootstrap so bootstrap is a
45:06 - is a
45:08 - world's most popular framework for
45:11 - building responses mobile first sites so
45:14 - I will show you the responsive nature of
45:16 - bootstrap as well because if you are
45:18 - making a web application and what you
45:20 - want to you want to Target an audience
45:22 - so what you want to do is that if
45:24 - someone is using a web application on a
45:26 - desktop then some other day might
45:28 - someone it might use on a laptop as well
45:30 - tablet mobile phone uh and like there
45:34 - are various screen sizes so you want
45:36 - your application to adapt that screen
45:38 - size
45:39 - to show that to adapt that screen size
45:42 - bootstrap is used so this would make
45:44 - your content responsive in nature and it
45:47 - would adapt to the particular screen
45:49 - size of the user and this will help you
45:51 - too for a faster development as well so
45:54 - it has all the predefined CSS HTML
45:57 - JavaScript libraries and we will be
45:59 - using these templates and I will show
46:01 - you how you can use uh how you can use
46:04 - Chrome developer tools to edit your your
46:07 - pages and you can you can be sure about
46:11 - how you can create your pages as well so
46:14 - the first thing you need to do
46:16 - uh like first thing you need to do like
46:20 - this I this as I mentioned how you can
46:22 - uh go with the repository and the second
46:24 - thing you said a second thing you need
46:27 - to do you need to move into your
46:28 - settings.p by file and uh before this
46:31 - you need to create a two folder one with
46:33 - the name templates
46:35 - another with the name static
46:37 - so templates and static are the two
46:40 - folders you need to do so first I would
46:44 - move to the my project artery so this
46:46 - directory same as the GitHub repository
46:48 - so I would create a new folder
46:51 - name temp
46:53 - lates
46:56 - so this is the first folder I've created
46:58 - templates and the second one which I'm
46:59 - going to create is the static so static
47:02 - basically
47:04 - is working with your static file it
47:06 - could be any static file so basically
47:08 - just for an example you have an image
47:10 - which is in raw image and you need to
47:12 - use it multiple times so you can store a
47:14 - raw image in your static folder so in
47:17 - order to display in your web page as
47:19 - well so two folder templates will be
47:21 - having your HTML files and static is
47:24 - going to have your raw files it could be
47:27 - in any form so after creating these two
47:30 - folders what you need to do is to add
47:34 - them in your directory so the first
47:37 - thing you need to do is
47:39 - you need to move to your settings.py
47:42 - file and
47:43 - one shortcut I would show you that
47:46 - inside vs code you can type Control Plus
47:48 - p and move to any file suppose I have to
47:51 - move to this urls.per file or models.p5
47:55 - models.py file that this will be file so
47:57 - I would type
47:59 - models.poi and then take uh have give me
48:02 - some recommendation about and I would
48:05 - click on it and I would move to this
48:06 - file so in this way again back move to
48:08 - settings.wi file so this is a very
48:10 - interesting shortcut
48:12 - so under the installed apps I have
48:14 - mentioned my app
48:16 - and
48:18 - under the directories templates what I
48:22 - need to do I have to mention my current
48:25 - path where my templates are sold because
48:27 - this all this list is basically
48:29 - associated with the templates directly
48:32 - so I would type OS dot path
48:36 - dot join
48:41 - base directory
48:43 - comma templates
48:48 - so this would join my folder that I am
48:51 - telling that it could be any OS
48:53 - environment uh I would join this from
48:57 - base directory to the templates so this
48:59 - would connect with this folder so my
49:01 - projector is now connected with this
49:03 - folder the second thing I need to do is
49:06 - uh the same thing I need to do for the
49:08 - static files but this is little
49:10 - different so I have to first mention the
49:12 - list
49:14 - static
49:17 - files underscore diet quiz
49:22 - so this is the list and I would be using
49:26 - this so you can see that these are
49:28 - almost same thing
49:29 - overs.part.join based directly
49:31 - underscore templates and another is OS
49:33 - dot part dot join based directory
49:36 - comma static so what I can do is OS
49:41 - sorry
49:43 - OS dot path
49:45 - dot joint
49:48 - base directory
49:51 - comma static
49:53 - okay so this looks good so I will run my
49:56 - server
49:57 - so till the time uh I would show you one
50:01 - thing that the message was working fine
50:04 - and I had made some URLs like in the
50:06 - previous tutorial I showed you how you
50:08 - can make the request in the response
50:10 - part so uh like uh just for uh just for
50:14 - uh to be sure about this uh I would move
50:18 - to localhost
50:20 - colon 8000
50:23 - okay so it says hello world uh and I
50:27 - showed you like you can create an uh
50:29 - URLs as well so like in this we are
50:32 - going to create a URL so so first thing
50:34 - you need to do is move to your templates
50:36 - folder so these are the two folders
50:38 - which I made templates and static so
50:41 - inside your templates folder you you
50:43 - will create a new file
50:45 - and name it as index dot HTML
50:51 - and you would you can you make this file
50:54 - and open this file and what you are
50:56 - going to do this inside your index
50:59 - index.html file you are basically create
51:02 - your first HTML page
51:04 - and
51:05 - what you are going to do is
51:07 - you you will move the bootstrap website
51:10 - and you would go to the getting started
51:13 - then introduction getting started an
51:16 - introduction and now
51:18 - you will first pick the starter template
51:20 - because this would be very helpful you
51:22 - would you can copy this
51:24 - foreign
51:25 - HTML
51:28 - so like you can see that it has the
51:31 - whole HTML structure
51:33 - and it has all the JavaScript libraries
51:35 - predefined as well as the CSS libraries
51:38 - as well
51:40 - and one thing that these uh CSS files as
51:43 - well as the JavaScript files has been
51:45 - kept online so anyone can use this uh
51:49 - CSS and JavaScript files because these
51:51 - are predefined in bootstrap and anyone
51:53 - can use bootstrap to make your web
51:55 - application responsive okay I would
51:57 - change this title
52:00 - to learn
52:04 - Django
52:06 - and basically I would save this file and
52:10 - basically the title is this what you can
52:12 - see above here the like introduction
52:15 - bootstrap GitHub dashboard software
52:17 - developer that this is it your title so
52:21 - learn Django and I would say change this
52:24 - hello world
52:27 - Django
52:29 - project
52:31 - okay okay so what you can do is
52:36 - you can move to your urls.py file
52:40 - and you can define a URL to render your
52:44 - page so just for example I would Define
52:47 - path
52:49 - my first
52:51 - page
52:54 - and I would call views Dot
52:57 - my first name
53:00 - so in my first page
53:01 - see
53:03 - and I would give this a name
53:08 - my first
53:12 - page
53:14 - so I have created a path called my first
53:17 - page you and I would call the function
53:19 - my first page from views and I have just
53:23 - given a short name to this URL as my
53:26 - first page so this is showing me an
53:27 - error and why is it because I have did
53:29 - not Define my first page function inside
53:33 - the views so I will move to My Views dot
53:35 - py file
53:38 - so
53:41 - the my first
53:45 - page
53:46 - it is taking a request as a parameter
53:50 - and this time like in the previous two
53:52 - tutorials I showed you is that I they
53:55 - can be various type of responses one is
53:56 - HTTP response Json response but this
54:00 - time I'm uh I'm going to render HTML
54:03 - page so I would say return return
54:06 - render
54:09 - request
54:12 - comma index.html
54:17 - so
54:18 - so this would render the HTML page and
54:22 - when I will move to this URL so this
54:24 - would show me that page
54:26 - so I am inside my localhost and I would
54:29 - say slash my first
54:33 - page
54:36 - okay so yeah so it's fantastic so what
54:40 - you can see that it has rendered the
54:41 - first page now I am showing you two
54:44 - shortcuts the first one is Control Plus
54:46 - U
54:48 - so this would show me the whole
54:50 - front-end core so this is the first
54:52 - shortcut you can use the uh I will
54:54 - repeat Control Plus U okay and the
54:57 - second one is you can use inspect
55:00 - element
55:01 - okay and you can see now the responsive
55:04 - nature of this I can show you that uh
55:06 - this is like Chrome developers tool and
55:08 - you can use this to work with the
55:10 - front-end part of your project it is
55:13 - very good okay Galaxy S5 iPhone 5 okay
55:17 - this shows a responsive nature laptop
55:20 - laptop screen so this will be laptop so
55:22 - what I can do is uh move to Galaxy S5 uh
55:26 - and I would inspect this
55:29 - and I would element dot Styles I would
55:33 - change color is equal to Red so this
55:36 - changes the color of this heading to red
55:38 - but this is uh to only to have a view of
55:42 - your project but as soon as I refresh it
55:44 - because this is temporary you do this uh
55:46 - you can do some temporary changes to
55:48 - have a look but as soon as I refresh
55:50 - this page
55:52 - this is this is vanished so and so you
55:56 - can use Chrome developer tools uh to
55:59 - have a change look at your front-end
56:01 - part we are going to work with templates
56:03 - so basically templates are HTML files
56:07 - and we can reuse them to render the
56:10 - backend logic into the front-end part
56:14 - so first thing I'm going to show you
56:17 - that the in previous tutorial we created
56:19 - a page so this is the page we created in
56:23 - the previous tutorial so I would type
56:25 - control U
56:26 - and this would uh this is a shortcut to
56:29 - see the front-end code so this is the
56:31 - whole front-end code and what noticeable
56:34 - we can notice from this is that this
56:37 - front end code will always
56:40 - like the same HTML structure we are
56:43 - going to use it in a different file as
56:46 - well the so we are going to like suppose
56:49 - in order like I will give you a
56:51 - practical example like uh this is an app
56:54 - bar
56:55 - and like this nav bar is going to be
56:59 - common in all the pages so when we move
57:03 - to another page so this number will
57:06 - remain common and this HTML structure
57:09 - will also remain common so what can be
57:11 - different the content of that page might
57:14 - be different from the another page and
57:16 - it will be different and the title can
57:19 - be different as well but the basic HTML
57:22 - structure and the nav bar and the footer
57:24 - will always remain common to every page
57:27 - because navbar is something you would
57:30 - help your application from to navigate
57:32 - from one page to another and you won't
57:35 - copy the narc or every time you make a
57:37 - new page so that
57:39 - so that front-end code will always be
57:43 - common to all the pages and we can make
57:47 - this with the help of these things which
57:49 - are extends block title block content
57:51 - and block I will give you a practical
57:53 - example how you can use it and what what
57:55 - is the importance of it so first inside
57:59 - my templates folder I would create a new
58:01 - file
58:04 - that is the first one is index.html is
58:06 - already there then I would create second
58:09 - dot HTML
58:12 - okay now I have created second dot HTML
58:16 - uh uh to I have to provide a URL to
58:19 - access this page as well so I would copy
58:22 - this path
58:24 - and paste it here and instead of this uh
58:28 - first page I would do this as
58:31 - second
58:33 - page this is my second page and I would
58:37 - also second page
58:41 - and this is I would also change this
58:43 - second
58:45 - page so to be just quick I did this so I
58:49 - have provided a New Paths my second page
58:51 - used on my second page and have the name
58:53 - this URL as my second page so it is
58:55 - showing me an error because why is it
58:57 - doing an error because till now I have
59:00 - not defined my second page Inside My
59:02 - Views so I would go back to my views.py
59:05 - so like the previous there was one of my
59:09 - post page which used to render an
59:11 - index.html I would create a second page
59:13 - as well my for my
59:15 - second
59:17 - page which would take request
59:21 - as an input parameter and would return
59:25 - render
59:28 - request
59:31 - comma
59:32 - second
59:34 - dot HTML
59:37 - so
59:39 - so I told you like this would I have
59:41 - created a second.html page in my
59:43 - template folder then I provided a URL
59:45 - then a view function to that URL as well
59:48 - so when I move to my page my second page
59:54 - okay so I'm I'm to my page but till now
59:57 - it's blank nothing is there in that page
59:59 - but what I wanted to tell you if you
60:03 - view the source code of the front end
60:05 - part uh it's still not blank so this
60:08 - shortcut goes by control pursue and this
60:11 - is the source code of the first page so
60:13 - you want all this thing to be common in
60:16 - that page as well uh okay before I do
60:19 - this I would uh show you one thing as
60:21 - well I would copy the snap bar
60:24 - okay I've copied the snap bar and I
60:27 - would paste this
60:29 - in my index.html okay uh please make
60:33 - sure this is index.html
60:36 - okay this is index.html uh and when I
60:40 - move to the my first page
60:44 - okay I will move to my first page
60:48 - my first
60:52 - page
60:54 - so this is the cutter source code of my
60:56 - first page and this has been uh updated
60:59 - uh because it has a nav bar in it as
61:02 - well and when I move to this page
61:07 - okay now this looks pretty cool okay so
61:11 - what I told you that inside my first
61:13 - page uh I have given uh a nav bar and uh
61:19 - what I will do one thing also I would
61:22 - change the title as well
61:24 - to make sure
61:26 - there is no confusion my
61:28 - first
61:30 - page
61:33 - okay so this looks pretty fine and
61:36 - pretty cool till now okay and this would
61:40 - this this is my first page and what I
61:44 - need to do this is my first page now I
61:46 - would move to this second.html file as
61:49 - well
61:50 - and inside my second dot HTML file what
61:53 - I will do I would type percent
61:59 - extends
62:02 - index.html
62:09 - and I would give this as a person
62:11 - command Okay so this would
62:15 - when I move to the second page
62:20 - so yeah this is this my second page as
62:23 - well and you can see this has cloned all
62:27 - the things which were there in the first
62:29 - page as well but I need to take care
62:32 - about one thing that my title should be
62:34 - different so I would move back to my
62:37 - index.html and inside this I have to
62:41 - mention the title in this way
62:44 - block title and because uh when I might
62:48 - move to another page so I would type
62:51 - percent block
62:54 - title
62:59 - and
63:01 - percent and
63:04 - block
63:09 - okay and inside my
63:13 - second dot HTML I would repeat this as
63:17 - well so just to be quick I would copy
63:20 - this
63:24 - foreign
63:32 - I would copy this
63:41 - okay this looks pretty fine
63:43 - so uh I would open both the pages
63:47 - this is my second page
63:51 - okay
63:53 - and I will open the first page as well
63:59 - so this is my first page and this is my
64:02 - second page so you can feel the
64:05 - difference here that within within two
64:07 - lines of code I cloned all the HTML
64:12 - structure as well as the nav bar from
64:14 - index.html to second one HTML and I
64:18 - provided two routes to them one was my
64:20 - first page with the name
64:22 - with the title my first page and another
64:24 - one with the title my second page so
64:27 - this looks pretty good and what you can
64:30 - do now is
64:32 - you want to change the content so inside
64:35 - index.html
64:38 - I would move this H1 directory inside a
64:43 - Content so the I would uh name that
64:46 - first page as well
64:48 - so uh I would type
64:53 - percent block
64:56 - content
65:03 - percent and
65:05 - block
65:11 - so when I reload my page so this is my
65:13 - first page
65:15 - so it says hello world Django project
65:17 - first page and when I refresh this page
65:20 - this is also says hello world Django
65:23 - project first page but I want to change
65:25 - this content this particular content
65:28 - block content so I would do one thing I
65:33 - would move back to the second dot HTML
65:35 - and I would type
65:39 - percent block content
65:48 - and again end block
65:53 - and I would type this given head actual
65:57 - heading
66:00 - second
66:02 - page
66:04 - extends
66:06 - first
66:08 - foreign
66:16 - nav bar
66:19 - this should work fine
66:22 - so see the magic now the second page
66:25 - extends first page with a common nav bar
66:28 - and this is my first page
66:30 - okay and this is my second page so you
66:33 - can feel the difference like inside my
66:36 - first index.html for the only thing what
66:40 - was the driving force uh I would open
66:43 - this the and show you that
66:47 - content of this page is here this is the
66:51 - actual line and this was the content of
66:53 - the first page and inside the second
66:55 - page this was the content
66:59 - okay but you can see the all other
67:02 - things are common with the title being
67:04 - different and the content being
67:06 - different everything is common so what I
67:10 - wanted to tell you show you that when
67:13 - you use the extent functionality of the
67:17 - template with the I think with the three
67:20 - or four lines of code you can clone the
67:23 - first page all the HTML nav bar from the
67:26 - first page to an another page and this
67:29 - will reduce your HTML code as well and
67:32 - this will help you to make Dynamic HTML
67:36 - pages in for future so what you need to
67:39 - do is you need to create index.html uh
67:42 - then uh you need to define a dynamic
67:45 - block title to it so okay this looks
67:48 - fine then you need a dynamic block
67:50 - content to it as well and you need to
67:53 - extend this in the second page as well
67:55 - with the help of this line okay so with
67:58 - the help of only four to five lines of
68:00 - code we were able to extend to the
68:02 - uh first page 2 on a second page and in
68:05 - this we are going to work with how you
68:07 - can work with how you can work with the
68:10 - Django templates in order to render
68:14 - more things on your front-end
68:16 - application part but this time we are
68:18 - going to use two things one is going to
68:20 - be the for Loop and one is going to be
68:23 - FS part and before this I will show you
68:26 - how you can pass variables to your
68:28 - front-end application front-end part of
68:30 - your application using the context
68:33 - function and how you render your
68:36 - variables using a dictionary so you will
68:38 - get to know this all this in this
68:40 - tutorial so let's get started with it so
68:43 - first thing I am going to do
68:46 - is going to define a path so this is
68:48 - basically I'm going to define a URL my
68:51 - third
68:53 - page
68:54 - and I would call a function views Dot
68:58 - my third page and I would name this as a
69:02 - my Third Way third page as well
69:05 - so I am using this naming convention so
69:10 - that in order you you get a you don't so
69:12 - you get a brief overview like this is
69:15 - the third page we are working on so I of
69:18 - course I would run my server on my
69:19 - machine so this is showing an error why
69:22 - is it so because still no I have not
69:24 - defined my third page function in My
69:27 - Views so what I'm going to do I'm going
69:31 - to move to my views.py file and Define
69:35 - my
69:37 - third
69:39 - page
69:40 - mistake request as a parameter
69:44 - and basically it is going to return
69:47 - and render
69:51 - requests
69:53 - and third dot HTML
69:56 - so basically till now I have not defined
69:59 - third.html yet so what I'm going to do
70:02 - is going to my templates folder and uh
70:06 - inside I'll go to second.html so I would
70:10 - quickly copy this
70:12 - and create a new file I'll paste this
70:15 - and I'll change this as
70:17 - third
70:19 - and even I'll change this also as third
70:27 - now I'll save this as
70:30 - third dot HTML
70:35 - and a hi ho this will work
70:38 - and I'll move to my localhost okay this
70:41 - server has started
70:43 - my third page so you can here see the
70:48 - title is my third page so third page
70:51 - extends first paid to the common nav bar
70:53 - so I told you how you can quickly extend
70:55 - one page to another another using an
70:59 - extent function
71:00 - so now I will tell you how you can
71:03 - extend variables uh actually you are
71:06 - going to extend variables to the
71:09 - front-end application using the context
71:11 - function this is going to be very pretty
71:14 - good and pretty easy also so what you
71:17 - can do you can
71:19 - simply create a variable I'll create a
71:22 - variable of a data type string with the
71:24 - name hello world
71:28 - now what I am going to do
71:31 - I am going to Define my dictionary
71:36 - and what
71:38 - what variable you want to pass okay just
71:42 - for it just to be on an easy way I'll
71:45 - this is a key value pay so basically
71:49 - basically you are passing the variable
71:52 - where
71:54 - with the name also as where so what I'm
71:57 - going to do I'll you have a quick
72:01 - overview of this so you will type
72:03 - context
72:05 - is equal to my dictionary now
72:08 - you are passing a new variable where so
72:11 - this is your variable basically this has
72:13 - a data on the right side
72:15 - value and on the key side you are naming
72:18 - the name which is going to be rendered
72:20 - on the front-end part and now
72:23 - what I'm going to do I am going to
72:25 - declare H1 heading
72:27 - and to initialize the value of the
72:30 - variable I am going to type where
72:33 - okay this looks good now I will refresh
72:36 - this page now it says hello world so
72:39 - this is pretty cool
72:40 - now what I can do also I'll have another
72:44 - variable
72:47 - great greeting
72:51 - and I am saying
72:53 - hey
72:56 - how are you
72:59 - so this would greet the user
73:02 - but this time I am going to pass with
73:05 - the name
73:06 - message
73:09 - so
73:10 - so this would help you to understand so
73:13 - this can be in any so what I'm telling
73:15 - greeting is unvariable of data type
73:18 - string
73:19 - so this is the value greeting and what
73:22 - name I'm going to pass it with the
73:23 - message name
73:24 - so when I move to the third dot HTML
73:28 - what I'm going to do
73:30 - I'm going to use message
73:34 - here and now this message basically has
73:37 - the greeting variable inside it
73:41 - so this would print the value on the
73:44 - front-end application part so say it
73:46 - says hey how are you so this looks
73:48 - pretty cool now
73:53 - I'm going to define a list of fruits
73:57 - basically Apple
74:01 - mango
74:05 - and banana
74:08 - and
74:11 - I am going to pass these fruits using
74:14 - key value pair
74:15 - so basically
74:18 - I am going to pass it with the name my
74:20 - fuse
74:22 - so this would
74:24 - pass these fruits which has a data type
74:27 - of list or array you can say
74:31 - and
74:32 - I am going to pass it with the name my
74:35 - fruits on the front end part
74:37 - and when I move here
74:39 - I'll create an unordered list using a
74:42 - simple for Loop so I would type
74:45 - okay before this I would type for
74:48 - each
74:50 - fruit
74:51 - and
74:53 - my
74:55 - fruits
75:00 - I'll team please simply end this Loop
75:03 - using this template and for
75:06 - and
75:08 - I am going to type type the list
75:10 - parameter
75:13 - and basically each foot is the value I'm
75:17 - going to print
75:21 - and you can see the magic here you can
75:24 - see apple mango banana is here and
75:28 - simply maybe sometime you have a large
75:31 - list in your back end part and you want
75:34 - to print it you can simply print it
75:35 - using a for Loop so even this you can
75:39 - you you could do this like this most of
75:41 - you we do it like for I in my fruits you
75:46 - can simply print
75:48 - I as well so this would also work
75:53 - okay so you can see here even this also
75:55 - works so this looks pretty cool we are
75:58 - done with the for loop as well now
76:01 - we are going to work with the if else
76:03 - part
76:04 - so
76:05 - in the views Dot py
76:07 - you can see
76:09 - I'll decree
76:12 - a variable it could be of any type
76:15 - and basically
76:18 - uh it could be of any type what you can
76:21 - do is like you can I can have a big
76:23 - overview
76:25 - this is how we use like if
76:28 - LF
76:30 - else
76:32 - and an F so in order to end anything you
76:36 - need to type if Alice else and end if
76:39 - so what we can do
76:42 - okay okay we are going to take two
76:46 - numbers
76:47 - num one
76:50 - comma num 2 is equal to
76:54 - 3 and 5.
76:57 - so what we are going to do
76:59 - and we are going to take a variable
77:02 - answer
77:05 - and that answer is going to be
77:11 - what we can do is
77:14 - answer is going to be num1
77:17 - is greater than num2
77:20 - so before this I would print the answer
77:23 - on my console
77:27 - so what I'm going to do is going to
77:30 - refresh this page
77:31 - this would this URL will call that
77:35 - views.views.py and it says false so you
77:38 - can here see it says false because num1
77:42 - has the value 3 and the num2 has a value
77:44 - 5 and
77:45 - is 3 greater than five no so this gets
77:49 - the value as false and it this prints
77:52 - the answer on my consoles I would
77:54 - comment this out
77:56 - and
77:57 - I would
77:59 - render
78:00 - answer
78:02 - as answer
78:04 - and
78:07 - num1
78:10 - as num1
78:14 - okay
78:16 - and also
78:19 - numb to
78:22 - as num2
78:25 - so this should work
78:27 - I'll see
78:30 - okay now you can see so okay this is
78:34 - going to be rendered so num1 is being
78:36 - passed as num one num2 answer now
78:40 - I am what I'm going to do
78:42 - I'm going to use an if condition
78:51 - if
78:53 - answer
78:58 - and I'm going to use an else part as
79:01 - well else
79:07 - and
79:08 - and if
79:11 - okay so you can see this is the same
79:13 - syntax I'm using so this time I'm only
79:16 - using an F
79:18 - else and and if only
79:22 - if answer
79:25 - if an answer is right this means what I
79:29 - mean meant in my views.py file that
79:33 - if this is true the num1 is greater if
79:38 - else it's false then num2 is greater
79:40 - then you will type
79:49 - num1 is greater
79:56 - than
79:58 - okay we can even do this like this also
80:01 - what we can do we'll use curly braces
80:04 - num1 is greater than
80:09 - num
80:11 - two
80:12 - so this looks good
80:16 - or and else part we are going to the
80:19 - reciprocal of it
80:20 - I'll change this as num
80:23 - two
80:24 - is greater than
80:26 - now one
80:28 - okay so this is my FS part
80:31 - and I'll move to my page
80:34 - and if this says 5 is greater than 3
80:38 - because
80:40 - I had mentioned in the juice.py file
80:42 - okay if I change these two numbers as
80:44 - any random numbers I'll take such to 10
80:48 - and I'll take this as
80:50 - seven so this will work
80:52 - maybe this should work but okay yeah it
80:55 - says 10 is greater than 7. because
80:59 - because uh I have created a backend
81:03 - logic and I'm using that backlogic in my
81:06 - front end part as well so in the
81:09 - previous I showed you 5 is greater than
81:12 - 3 now I'm showing you 10 of greater than
81:15 - 7 so you can use this backend Logic on
81:18 - the views.py part to render it and show
81:21 - it in a Content part so first thing I
81:24 - need to do you need to move to your
81:26 - settings.py file so I'll move to
81:28 - settings.py file
81:30 - and inside my settings.py file uh what
81:33 - you need to do you need to define a
81:35 - static URL which is going to be static
81:37 - and you need to define static files
81:40 - directory is equal to OS dot path dot
81:42 - join base directory with the static
81:45 - folder so what here I'm actually
81:48 - mentioning that I have made a static
81:50 - folder and here it is and inside my
81:53 - static folder I have two images
81:55 - django.png and python.png so I would be
81:58 - using these two images
81:59 - and what I'm going to show you what you
82:02 - need to do so this is the static folder
82:05 - which I'm referring which I also showed
82:07 - you into vs code I am showing here for a
82:10 - better experience for a view for view
82:12 - for it and inside my static folder I
82:15 - have two images one is Django and
82:16 - another is python so I'm referring to
82:19 - this particular static folder and to
82:22 - refer this particular static folder you
82:24 - need to move your move into your
82:25 - settings.v by file and you need to
82:27 - Define this heading so this piece of
82:29 - code okay so first I'll create a route
82:33 - so I'll move to my urls.py file and
82:38 - I am going to Define path
82:41 - my
82:43 - image
82:45 - page okay
82:47 - and I'm going to define a views dot my
82:53 - my image
82:55 - page
82:56 - and I'll give this a name
82:59 - is equal to
83:01 - my image
83:04 - page
83:05 - so this is going to be interesting okay
83:07 - now my image page I've defined my image
83:11 - page here okay and I'll Define a
83:14 - function inside my views my image when I
83:16 - have given a name here it is on my image
83:18 - page also so what I'm going to do
83:22 - I'm going to define a view
83:26 - okay I'll Define a view Define
83:29 - my image page which takes request
83:34 - as a parameter good
83:37 - and it will return and render an HTML
83:39 - page request
83:41 - and that's name is going to be image
83:43 - page
83:45 - dot HTML so this is pretty fine
83:48 - okay the server has been reloaded okay
83:51 - so this looks pretty fine till now and
83:54 - inside my templates folder I'll create a
83:56 - new template I'll click here new file
84:00 - image
84:01 - page dot HTML
84:05 - okay this is fine now
84:07 - okay now to create a image page.html
84:10 - what I'm going to do I am going to take
84:13 - a any of the pages here
84:16 - okay and I'll copy this quickly okay now
84:21 - what you need to do
84:23 - I'll Define this as
84:26 - uh okay sorry for this
84:28 - I'll Define this as
84:31 - you can Define any name image
84:35 - page Okay so and what you need to do
84:39 - I'll open this text file so this is the
84:43 - syntax
84:44 - how you can load an static image so what
84:48 - you need to Define you need to Define
84:49 - percent load static inside your Builder
84:52 - template so below this line I'll Define
84:54 - percent load static
84:58 - percent load
85:01 - static
85:03 - and I'll refer to this image okay I'll
85:10 - remove this okay from here what I'm
85:13 - going to tell you that this is a
85:15 - bootstrap and here what you need to do
85:18 - you will learn about images so here I'll
85:21 - type images
85:25 - so this is the responsive class of
85:27 - bootstrap we are going to use which will
85:29 - help us to make our image responsive so
85:33 - this is going to be very interesting so
85:35 - what you can do
85:37 - you can Define
85:39 - diff
85:40 - class is equal to container
85:44 - container fluid
85:46 - okay and what are you going what I'm
85:50 - going to do next
85:51 - uh I'll Define a row we we will be
85:54 - learning bootstrap in the upcoming
85:56 - lectures as well so this I'll give a
85:59 - short idea how you can create a
86:01 - responsive page so this is going to be
86:03 - interesting uh diff class is equal to
86:05 - row and inside a row I have a container
86:07 - then a row inside my container then
86:09 - inside my row I have a column
86:11 - diff class is equal to call
86:14 - MD
86:15 - 6
86:17 - okay now I'm going to
86:21 - quickly copy this so how you can use
86:26 - this class so
86:29 - so this class image fluid response to
86:31 - this refers to the uh
86:33 - responsive CSS which has been already
86:36 - written inside the bootstrap to make our
86:38 - image responsive on multiple devices and
86:41 - to define the image source I'll use a
86:43 - curly brace
86:45 - that percent sign then again a person's
86:48 - side
86:48 - and inside my percent sign I'll space
86:51 - give space tactic and I'll Define the
86:54 - image name using single quotes
86:57 - so let me Define
86:58 - Django
87:00 - dot PNG so this look this looks pretty
87:03 - fine here
87:05 - django.png and you can Define you can
87:08 - give any name here okay so uh I'll just
87:12 - close the server then restart my server
87:15 - okay the server has started and as I
87:18 - have no issue here so I'll go to my
87:20 - localhost here it's running
87:22 - and I'll give my image
87:26 - page
87:28 - okay so this is throwing an error which
87:32 - says
87:33 - current path let me check my URL
87:36 - oh I didn't save this okay
87:40 - yes now okay now it's okay
87:44 - yeah here you can see so you can see the
87:46 - image has been successfully loaded so
87:48 - this looks pretty good you can also use
87:51 - uh in your HTML page what you can do
87:56 - you can also use python.png
88:04 - so this also works so this looks pretty
88:06 - fine and now what I'm going to show you
88:09 - Django dot PNG
88:11 - so I'll move to django.png and so I'll
88:14 - give you a brief interview so now you'll
88:17 - right click on this and click inspect
88:20 - and when you click on inspect
88:23 - uh so this is a container fluid then
88:26 - this is a row inside there is a column
88:29 - of width medium six that on the multiple
88:32 - on the medium devices it will have a
88:34 - width of 6 the bootstrap has a total
88:37 - width of 12 so we are going to learn
88:39 - that and this image source is this
88:41 - particular image so we can play with the
88:43 - inspector tools what we can do we can
88:46 - use background is equal to red
88:50 - let me uh sorry for this okay like this
88:54 - is our row so I'll type background
88:56 - [Music]
88:58 - is equal to Red now you can see a row
89:01 - which was also equivalent to The
89:03 - Container fluid as a background red and
89:05 - what we can do this is a column we'll
89:08 - align this image in the center and type
89:10 - margin
89:12 - 0 Auto okay so now you can see the image
89:16 - has been aligned to the center so let me
89:19 - check okay there might be some uh not
89:22 - exactly but might be some issue but
89:24 - we'll Rectify this in the upcoming
89:27 - lecture how we can resolve this so now
89:29 - the point is
89:31 - when I move to a different devices since
89:33 - I had used image fluid as a class I
89:36 - moved to Galaxy S5 you can see the nav
89:38 - bar collapses itself and the image is
89:40 - being responsive I can move to iPhone x
89:43 - image being responsive so this this is
89:45 - going to be very helpful in the
89:47 - responsive device design the iPhone 5
89:50 - and I close this and the best part is
89:53 - when I refresh this page it's all gone
89:56 - so because that was temporary to make
89:59 - this permanent you need to define the
90:01 - CSS in your HTML page and I'll Define as
90:04 - margin 0
90:07 - Auto
90:08 - okay so when I go to space refresh now
90:12 - this is permanent so this this is pretty
90:15 - cool so so today we are going to work
90:18 - with images so in the previous tutorial
90:20 - I showed you uh how to show an image and
90:23 - I applied some bootstrap classes uh to
90:26 - show that image on the HTML page so
90:28 - today uh before we start we are going to
90:31 - basically have an overview of the
90:32 - bootstrap grid system
90:34 - so in this grid system I I will show you
90:37 - that there are some predefined classes
90:40 - with extra small small medium large and
90:43 - extra large and this is the Syntax for
90:46 - them call SM call MD call LG and call
90:50 - Excel for respective classes and for
90:52 - extra extras all we only need to we
90:55 - don't need to Define anything with the
90:57 - Practical implementation we'll get to
90:59 - know
90:59 - one thing you need to observe in this
91:02 - that the bootstrap container has a
91:05 - column width of total 12 columns so what
91:08 - you need to do you can Define columns
91:10 - either in the multiple uh you need to
91:13 - Define them in the multiple of 12 like
91:15 - either uh you can Define for an example
91:18 - a column of width 4 then again 4 then
91:22 - again 4 or then 6 and again 6 because 4
91:25 - plus 4 plus 4 is equal to 12 and again 6
91:28 - plus 6 is equal to 12 also or if you if
91:31 - you want to Define any other ratio you
91:34 - can define a column of the width 10 and
91:36 - the next with the 2 because 10 plus 2 is
91:38 - equal to 12. and this way you can define
91:41 - a column width of 12 columns by defining
91:44 - them and giving a proportion with your
91:46 - with your desire what you want to give
91:50 - to your front-end application so this is
91:52 - a syntax how you can make columns plus
91:56 - rows so we will have some idea yeah this
91:59 - was a what I was explaining that the
92:01 - total width of the column is 12 so what
92:04 - you can do do like here it has been
92:06 - mentioned the first is of column 8 and
92:09 - another is of column four so this was
92:11 - total about 12 and this was a total
92:14 - width of 12 and this would help you and
92:16 - bootstrap manages you to help have
92:18 - responsive design of your application
92:21 - like in the previous tutorial I showed
92:23 - you how you can render an image using
92:25 - bootstrap and sorry with how you can
92:28 - render an image with Django then with
92:30 - the help of bootstrap classes how you
92:32 - can make it responsive
92:33 - so let's get started with this tutorial
92:36 - so I would tell you first I would go to
92:40 - my vs code editor then I would run my
92:42 - server with the command python
92:45 - manage
92:48 - dot p y
92:50 - run server
92:53 - so this would start the server on my
92:55 - local machine and what we can do till
92:59 - the times I can show you one thing so
93:02 - this is our template which we had made
93:05 - it yesterday so I would move to the
93:07 - local server so what you can do
93:12 - you uh so this is my local server so uh
93:17 - I would move to a route with the name I
93:20 - had defined in the previous two so I
93:22 - would go to move to my usuals.py file
93:25 - and my image page I had defined
93:28 - so I would move to that route
93:30 - my image
93:33 - page
93:34 - okay you can see an image had been
93:37 - already uploaded on this route and on
93:41 - this page so basically I showed you how
93:43 - you can see the responsive design you
93:45 - can uh press Ctrl shift I or you can
93:49 - right click and go to inspect so this
93:52 - will lead you to Chrome developer tools
93:54 - and from here you can see the responsive
93:57 - device design of your application like
93:59 - iPhone x shows this way and iPhone 6
94:01 - then pixel 2 XL then Galaxy S5 so this
94:06 - shows the responsive design so one thing
94:09 - you notice as soon as I was on on a big
94:12 - screen the nav bar used to had expanded
94:15 - view but as soon as I moved to a small
94:18 - screen so you can see the nav bar had
94:21 - been collapsed so this is a beautiful
94:22 - nature of bootstrap so this would help
94:24 - you in designing your front-end
94:26 - application so uh today what I'm going
94:30 - to do
94:31 - I am going to define a path
94:34 - my image page to
94:38 - and in views.py file I also Define views
94:41 - dot my image
94:44 - page 2 with the name
94:47 - is equal to my image page 2 Okay so this
94:53 - looks pretty fine so inside my boost.py
94:56 - file
94:58 - I'll Define
94:59 - I'll quickly copy this
95:04 - and I'll paste it here and one changes I
95:07 - need to make my image page too
95:10 - and it will have image page 2.html as
95:13 - well so inside my templates I need to
95:16 - Define image page 2.html okay I will
95:20 - move to my templates folder okay so this
95:23 - here so this is my image.html I'll
95:26 - quickly copy this
95:29 - Ctrl I'll paste it here and image page
95:33 - 2. okay this looks pretty fine
95:36 - okay so uh till the time what I'll do
95:39 - I'll remove this code
95:45 - and I'll save it as
95:48 - my image
95:53 - page 2 dot HTML
95:57 - so this looks pretty fine and I will
96:00 - move to my image page 2
96:05 - okay so it says my image page 2.html
96:09 - does not exist oh oh I made a mistake
96:12 - here so I'll renate it as image page
96:16 - to
96:18 - sorry for the error
96:20 - now I'll quickly refresh this page okay
96:22 - here it is so this is image page two so
96:25 - what I'm going to show you the beautiful
96:27 - nature of bootstrap here so this is a
96:29 - container fluid which you'll always
96:31 - mentioned then inside this container
96:33 - fluid I have a row then now I'm telling
96:37 - my bootstrap to divide this row into two
96:39 - columns
96:41 - div class
96:43 - okay
96:44 - and div class is equal to call
96:48 - MD
96:50 - 6
96:52 - and I'm also defining another column of
96:57 - which six because I told you the
96:58 - bootstrap will have 6 plus 6 is equal to
97:01 - 12 as a column width so I'll also Define
97:04 - another column diff class
97:07 - this is going to call
97:09 - MD
97:11 - 6
97:13 - and this would now this you can see it
97:16 - now I have a column of 2 6 6 width each
97:20 - and this would sum up to 12 now uh I
97:24 - told you yesterday that this is the
97:25 - syntax you are going to use because I
97:28 - told you that I have a static folder
97:29 - inside there there are two images so in
97:31 - order to load load images from the
97:34 - static folder first you will Define
97:35 - person load static and then you need to
97:38 - define the syntax with the person's
97:40 - static side this per person static with
97:43 - the image name and person again with the
97:45 - curly brace so I'll quickly copy this
97:47 - and this image fluid is in bootstrap
97:49 - class which helps you to make a
97:51 - responsive page okay in this first line
97:53 - I would I would put this image
97:58 - okay so this is the image I am going to
98:02 - put and one shortcut you can see I can
98:06 - right click here and click format
98:09 - document with
98:11 - HTML language features so what will it
98:13 - do it will format my source code and it
98:15 - will help you to better maintain the
98:17 - indentation of the code and in the next
98:20 - I'll copy this
98:22 - so since I'm showing you a demo uh we
98:25 - had done this in the previous tutorial
98:27 - how to load and starting image so let me
98:30 - give an another image that was
98:32 - python.png so I'll give this a name as a
98:35 - python
98:38 - dot PNG and I will move to my page and
98:43 - and refresh this page so you can see now
98:46 - I'll quickly uh I'll click inspect and
98:50 - I'll show you
98:52 - let me do this uh
98:54 - okay so you can see here I'll have
98:58 - expansion view this is my row on okay
99:01 - this is now you this would pretty help
99:04 - you to have a clear understanding
99:07 - understanding how bootstrap works this
99:09 - is my container and this is my nav bar
99:11 - okay this is a nav bar this is the
99:14 - container I go inside a row so this was
99:17 - my row then a column of width 6 you can
99:20 - the left portion is my column of 6 then
99:24 - this is the image okay okay this is the
99:27 - column of width 6 okay then I move to
99:30 - the second column of bit six here it is
99:32 - this was the second column on West 6 and
99:35 - this is the first column of bit six
99:37 - first second and that was the image but
99:41 - now as soon as I change my display I
99:43 - move to a Galaxy S5
99:45 - see the magic yeah it automatically
99:48 - collapses the image and it helps you to
99:51 - make much design much responsive so you
99:54 - need to inspect element in order to
99:56 - learn about this so this is again called
99:58 - md6
100:00 - width and this is the sixth of called
100:03 - md6 in the another so we are going to
100:05 - continue with this so so I will tell you
100:09 - that in this tutorial I've already
100:11 - defined a path with my image page 3 and
100:15 - already defined a function in which dot
100:17 - py file and only did you find an HTML
100:20 - page so I would directly operate on this
100:23 - so you can check out the code on the
100:25 - GitHub repository as well so what we are
100:27 - going to do here you can see here you
100:29 - can see my This Is My Views dot py file
100:31 - and I have already defined my image page
100:34 - to page 3 page four so what we are going
100:37 - to do we are going to start our local
100:39 - server which already started and inside
100:42 - my local server I would move to this
100:45 - route my image page 3 so I'll show you
100:48 - some interesting fact about this so this
100:51 - is our image page and here you can see
100:53 - that I have defined a row
100:56 - okay I have defined a row and above that
100:59 - I have defined a container fluid with
101:01 - the heading image page 3 and inside the
101:05 - row there are four Columns of width
101:08 - medium three each
101:10 - so here you can see three
101:13 - plus three
101:14 - plus three plus three is equal to 12 and
101:18 - this satisfies our basic requirement of
101:20 - the bootstrap column query so here it
101:24 - shows 12 columns so here you can see
101:27 - three
101:29 - three three is equal to 12 and as soon
101:32 - as I press Ctrl shift I you can see
101:38 - you can see okay okay and here you can
101:41 - see so this is the source code okay and
101:44 - let me click right click and click
101:45 - inspect yeah here it is row column width
101:50 - of 3 3 3 3 3 and this is on medium
101:54 - device as soon as I click on Galaxy S5
101:57 - it will all collapse and will move up to
102:00 - a scrolled View and this would bring the
102:02 - response in nature okay let me move to
102:05 - the m image page four dot HTML this is
102:09 - we're going to be very interesting here
102:10 - you can see the key difference uh you
102:13 - need to observe a key difference here
102:15 - that here I had defined medium three MD
102:18 - I defined a class inside the bootstrap
102:21 - which was defined in the grid system as
102:23 - well I'll show you in the grid system
102:25 - yeah here it is this was small SM MD LG
102:30 - XL when I have not defined any class
102:34 - whether it is medium MD SM small Excel
102:38 - extra large I have all uh I'll I'll move
102:41 - to this here you can see I've defined
102:43 - medium in this my image page 3.html but
102:46 - now when I move to my image page 4 dot
102:49 - HTML I have not defined any class so
102:51 - here you can see the Gap so they are
102:54 - there I have not defined any class here
102:56 - so you can have a view for it so this is
103:00 - called md3
103:02 - and this is only called four you can
103:06 - make it as three as well this is called
103:08 - 4 or okay so when here 4 plus 4 plus 4
103:13 - is equal to 12 and now when I move to my
103:18 - image page 4
103:19 - okay this is my image page four
103:26 - here you can see this is four I'll click
103:29 - on inspect
103:31 - okay uh okay I'll show you one thing
103:33 - this is row or
103:36 - four four okay but I told you that I
103:40 - have not defined any class here whether
103:42 - it is a medium small extra large now
103:46 - when I move to Galaxy S5 here you can
103:48 - see the magic now you here it also stays
103:52 - as four
103:54 - 4 and 4 so this wizard up to 12 and this
103:59 - was the difference I wanted to show you
104:02 - in the my image
104:04 - page4.html then here I have not defined
104:07 - like this is Page Three I have not
104:10 - defined any class here sorry in this I
104:13 - have defined a class in my image page
104:15 - 3.html I have defined a class but image
104:18 - page 4 dot HTML I have not defined any
104:20 - class and when I move to my
104:24 - image page 4.html this is 4 plus 4 plus
104:27 - 4 but as soon I move to a smaller device
104:30 - it Still Remains
104:32 - it Still Remains four four four it does
104:35 - not collapse so this says that if for
104:38 - every device we want this structure then
104:40 - you don't define a class then it
104:42 - bootstrap will automatically maintain
104:44 - this structure okay now we are going to
104:48 - do one thing one small exercise uh this
104:51 - is going to be a quick okay I'll Define
104:54 - my image page
104:56 - 5
104:59 - okay I'll be quick with this
105:01 - image page 5
105:06 - okay now I'll move to my templates
105:10 - okay I'll move to my templates this is
105:12 - my template I'll quickly copy this
105:17 - uh paste it here
105:21 - image page
105:24 - 5 dot HTML
105:27 - this is image page 5.html
105:30 - I'll quickly wrap up this content
105:34 - inside the row I'm already okay and I'm
105:38 - already left with the row and Inside My
105:41 - Views dot py file
105:46 - okay now inside my wish.pui file I'll
105:49 - Define my image page five I'll copy this
105:59 - and here you can see and this is going
106:02 - to be five
106:05 - and this is 4 okay
106:10 - and this is going to be 5 and I'll
106:13 - change the heading here
106:14 - so this here you can see this is the
106:16 - benefit of using blade template engine
106:18 - you can quickly Define your templates
106:20 - okay now I'll move to five
106:23 - okay now this looks fine this is this is
106:25 - an empty page okay but now inside my
106:29 - urls.py file I will be taking
106:33 - a string parameter
106:36 - with the image name
106:39 - okay I'll be taking a string parameter
106:42 - with the image name image name and
106:46 - inside my views.py file
106:50 - you know if you have any doubt regarding
106:52 - how you take parameter inside URL you
106:54 - can refer to my previous tutorial so
106:56 - image name
106:59 - is going to be in my new parameter okay
107:02 - and what I'm going to do I'll Define a
107:06 - variable image name will take this
107:08 - parameter image name
107:09 - okay let me Define this as my image my
107:13 - image name okay
107:16 - and
107:19 - if okay and I'll perform another
107:23 - operation my image
107:26 - name this is a simple python
107:29 - python function I'm using my image name
107:34 - DOT first what I'll do is is going I'm
107:39 - going to type cast this as a string
107:40 - parameter
107:43 - and use my image state name dot lore
107:48 - and I'll first print this my image name
107:52 - okay this is pretty fine
107:55 - okay this looks pretty fine okay now
107:57 - I'll move to my image page five and I'll
107:59 - type Django
108:04 - okay so here you can see I have print
108:07 - printed Django on my local machine
108:10 - and what I'm going to do I'm going to
108:12 - define a dictionary
108:15 - okay before this or maybe what we can do
108:18 - okay
108:21 - I'll take a variable
108:24 - where
108:26 - and I'll give it a default value or we
108:29 - can do one thing
108:31 - if my image name
108:34 - is equal to Django
108:37 - then where is equal to
108:41 - true
108:45 - LF
108:47 - my image
108:49 - name is equal to
108:51 - python
108:55 - where
108:58 - is equal to
109:00 - false
109:01 - okay however you can do or maybe uh or
109:06 - let me you can do one thing where is
109:09 - equal to false and now
109:13 - what I'm going to do I'm going to create
109:16 - a my dictionary my dictionary
109:20 - and I'll password as well
109:24 - okay
109:26 - now context is equal to my dictionary
109:31 - okay this looks pretty fine till here
109:33 - and I'll save this so my server is
109:36 - running
109:37 - okay now
109:40 - when
109:41 - I'll move to my image page 5.html
109:45 - so what I'm going to do is I'll quickly
109:49 - copy the image syntax here what I'm
109:52 - going to trying to do I'll show you that
109:54 - this is
109:56 - uh you can copy this
110:04 - okay okay yeah that's fine this is fine
110:08 - and I'll Define as 12.
110:12 - okay uh for your convenience you can use
110:15 - it as fall md12
110:17 - and in another one
110:21 - but before this I'll type
110:26 - percent f r
110:30 - I'll use this block
110:32 - else
110:40 - I'll use this block
110:43 - and I'll end this with the NF
110:48 - person and if
110:52 - okay this looks pretty fine
110:55 - and I'll copy this
111:00 - and quickly paste it here okay first I
111:03 - need to check my backend part what was
111:05 - it uh
111:07 - I'll move my usual by Ubi file if bar is
111:10 - equal to true then I need to be true
111:14 - then I need to get the Django image if
111:16 - that is a good false I need to get a
111:18 - python image okay so this is fine and
111:21 - this would be python.em python.png
111:25 - okay so this looks pretty fine and looks
111:28 - interesting as well
111:30 - okay now I would type Django so here you
111:34 - can see I got the Django image
111:38 - and
111:41 - python yeah I go to python image so this
111:44 - looks pretty fine and uh here what I'm
111:48 - going to show you that this is the magic
111:50 - I want to tell you that
111:52 - I can render two images on a single
111:55 - route maybe I'll type Django with the
111:57 - capital letters
112:00 - okay here it is come because I had used
112:02 - the functions lower I'll move to my
112:05 - quiz.py file
112:06 - okay I I'll close other things and open
112:11 - my views.py file okay
112:14 - uh I had used the lower function okay if
112:18 - my image name is equal to Django where
112:19 - is equal to True else it's false okay so
112:23 - maybe uh when I type python with capital
112:26 - letters
112:29 - I'll get this so this looks pretty
112:31 - awesome you can maybe I can do also type
112:35 - this as capital D small Django and
112:38 - capital G and small o Django this also
112:41 - works so this is great so here I told
112:43 - you that with simple backend logic you
112:46 - can render multiple images on your
112:47 - front-end application today we are
112:49 - working we are going to work with the
112:51 - forms so this is a 10 tutorial if you
112:53 - have any doubt regarding the
112:55 - architecture structure of Django you can
112:57 - refer to our previous tutorials as well
112:59 - so first thing along let's get started
113:02 - with this so forms are made to for the
113:07 - user input so forms are usually made
113:09 - according to your demand and requirement
113:11 - today we will create a form and then
113:14 - we'll use forms uh and then what we are
113:18 - going to do we are going to integrate
113:20 - the front end part of our form we'll
113:22 - today we'll create a responsive form
113:24 - layout and then we'll integrate the back
113:26 - end part of of a logic with the
113:29 - front-end part so we are going to create
113:31 - a we'll see how we can integrate forms
113:34 - then we'll see how do we can submit
113:37 - forms using the one with the request
113:39 - method and one with post method then we
113:42 - will figure out the difference what the
113:43 - difference between the two so let's get
113:46 - started with this so today so this is my
113:49 - project so first I will run my server so
113:53 - I'll type python manage.pui run server
113:55 - and uh you I will move to my localhost
113:59 - so I'll refresh this page
114:01 - so the server will get started so here
114:04 - you here you can see the server has
114:06 - started so what we are going to do today
114:09 - so what we are going to do first I'll
114:11 - create a path
114:13 - the UR path path
114:17 - I'll create my form
114:21 - okay
114:23 - and I'll create
114:26 - a view with the name views Dot
114:29 - my form
114:31 - and I'll give this URL a name
114:35 - is equal to my form
114:37 - as well okay that's looks pretty fine
114:40 - so first I will create a form and so
114:45 - I'll move to my views.py file
114:49 - okay so here's my views dot py file
114:52 - so what I'm going to do so what I'm
114:55 - going to do and I'll Define a view
114:58 - Define
115:01 - my phone
115:03 - and it'll take a request as a parameter
115:08 - and I'll render an HTML page and what
115:12 - I'm going to do I'm going to type
115:14 - return
115:17 - okay return
115:21 - render
115:23 - request
115:25 - and I'll make an HTML page
115:29 - my form
115:31 - dot HTML
115:34 - so this looks pretty fine so what I need
115:37 - to do so I need to define a
115:41 - myform.html inside my template page
115:45 - okay I'll move to my templates so I'll
115:49 - create a new file
115:52 - my form
115:55 - dot HTML so this looks pretty fine
115:59 - so what we are going to do today
116:02 - what you are going to do so this is a
116:04 - form dot are myform.html page so I have
116:07 - defined a few links we can move to this
116:10 - link
116:12 - and what we can do we'll move to this
116:16 - line and what we can do uh we'll look
116:19 - how we can create responsive forms using
116:21 - bootstrap so this is going to be very
116:23 - good so we can see how we can create
116:26 - responsive form using bootstrap and what
116:28 - we are going to do
116:30 - so this is like a box container with an
116:33 - email address and a password then check
116:36 - me out submit we can create a form like
116:38 - this only and this is another one email
116:42 - address example select so this is a
116:45 - select option with the drop down
116:47 - Behavior so this is a text area
116:51 - and this is a form with an input type is
116:54 - equal to file so you here you can see
116:56 - this is input type is equal to file so
116:59 - why I'm telling you all this because
117:00 - this will make you habitual with how
117:03 - what kind of widgets we have to work
117:06 - with the form then this is all about
117:08 - sizing and this is uh what this uh this
117:11 - is Select and this is read only you can
117:15 - read this only note edit allowed here
117:18 - then
117:19 - read only plain text so this is how we
117:22 - do so this is one of the range inputs uh
117:27 - this is a works and with the slider
117:28 - Behavior then others are check box
117:32 - and this is disabled checkbox then
117:34 - default radio second default radio
117:36 - disabled radio and inline so we are very
117:40 - much decent type amount of parameters to
117:42 - work with and then uh this is a form
117:45 - group so of this form grid the form row
117:49 - uh I'll I'll just explain all this how
117:52 - you can make a form
117:53 - and we'll start this from scratch
117:56 - because this is what is going to be very
117:58 - one of the important parts uh and let's
118:01 - get uh started with designing our
118:03 - front-end part so first I'll do what
118:05 - I'll do
118:06 - help just simply pick any template
118:11 - and I'll paste this because I have to
118:14 - extend my index.html to my form page so
118:17 - I'll change this name
118:19 - my form okay now
118:23 - okay I'll remove this line
118:25 - okay and I'll give a heading H1 let me
118:29 - give an heading
118:31 - my
118:33 - form
118:35 - and what I'm going to do
118:38 - I'm going to go to my localhost and type
118:41 - slash my form
118:45 - okay so this looks the this is my form
118:48 - so I've defined the heading to make sure
118:50 - that the template is working so what I
118:53 - can do next is
118:56 - and move to this page and what you can
118:59 - do
119:01 - you can have a simple layout
119:04 - okay
119:07 - you can have any of the simplest layout
119:09 - let's get start with a simple one
119:12 - so
119:14 - we'll pick this
119:16 - okay or if you want me to I'll we'll
119:20 - make this from scratch okay first what
119:21 - you need to Define you need to define a
119:23 - form group
119:25 - so we'll Define a form group
119:27 - so for first we will Define the div
119:30 - class is equal to container
119:33 - fluid
119:35 - okay this is a container then inside
119:37 - this we we need to define a row
119:42 - then I'll Define a column
119:48 - called medium of size 6 or you can say
119:52 - with six then I need to define a form
119:56 - okay so this will pretty fine now what
119:59 - you need to Define inside of you need to
120:01 - define a diff classes you will form
120:02 - group so I'll use this
120:05 - div
120:06 - class is equal to form
120:08 - group
120:13 - okay so what do you need to do so uh
120:16 - I'll use an another okay uh I'll let's
120:19 - get a proceed with this so you can see
120:22 - that for two inputs there are one div
120:24 - classes Reform Group and another is also
120:27 - div classical form group so suppose we
120:29 - are having two inputs
120:32 - div class is going to form group
120:38 - so here you can see I have a container
120:40 - then a row then a call column of uh of
120:46 - medium with six then a form then I have
120:49 - two form groups this means I'm going to
120:51 - Define two inputs so one is input type
120:55 - is equal to text
120:58 - I'll give this ID as my text
121:01 - and name is equal to my text as well
121:06 - and I'll Define
121:09 - what you can see
121:11 - uh they have defined input type is about
121:13 - image email class is equal to form
121:15 - control so I'll Define this class to
121:19 - this
121:20 - because this class is necessary
121:24 - form
121:26 - control
121:29 - Okay so
121:32 - this looks pretty fine
121:34 - and I'll Define a label
121:39 - format form
121:41 - so here you can see there must Define a
121:43 - label label four so I'll Define a label
121:47 - my text
121:52 - my text
121:55 - okay this looks pretty fine
121:56 - and what we can do I'll go to this page
122:01 - okay so here it is a form so but the
122:03 - right now there is no such Enlightenment
122:05 - so I'll go to inspect
122:07 - okay when I move to my inspect I'll go
122:10 - to div class with core md6 and I'll try
122:13 - some CSS out here so I'll do
122:17 - margin 0 Auto so this looks pretty fine
122:21 - my forms just to the center
122:23 - okay I'll do this
122:28 - style is equal to margin 0 Auto
122:32 - and with the same I'll do
122:35 - with the heading as well so I'll try the
122:38 - CSS on this as well this is my heading
122:40 - so let's do something text align is able
122:43 - to Center okay this looks pretty fine
122:44 - and I'll give a little bit of a margin
122:48 - sorry I'll get margin
122:51 - top
122:54 - and I'll I'll use a relative unit and
122:57 - this is in terms of ram so you can
122:59 - simply either you can copy the CSS
123:03 - and this is a key shortcut you can work
123:06 - with this and I I'll put a style tag
123:08 - here
123:09 - and I'll paste the CSS here so this
123:12 - looks pretty fine so
123:14 - and I'll I'll right click here and I'll
123:17 - say format document
123:19 - okay this uh
123:22 - format document oh this is is this isn't
123:25 - working I'll check if something is okay
123:28 - and I have defined a heading and I'll do
123:33 - some changes okay I'm having some issue
123:35 - with this okay now I know this is fine
123:37 - right yes so I have a heading
123:43 - okay now this looks pretty fine and you
123:45 - can see I have a form with my text and
123:49 - I'll do the same
123:51 - okay I'll copy this quickly
123:56 - okay well I will Define some uh a text
123:59 - area
124:01 - so this is a text area so what we can do
124:03 - so this is a text area and we have
124:07 - defined rows for it for how much rows we
124:09 - want so we'll quickly do this
124:11 - okay let's do this text area
124:16 - class is equal to form control
124:22 - okay rules is equal to 3
124:26 - okay before this I'll give an ID to it
124:29 - ID
124:31 - sorry
124:33 - ID my
124:36 - text area
124:38 - and as well as a name to it name is
124:40 - equal to
124:45 - I'll give this a name as well my text
124:48 - area
124:50 - okay this looks pretty fine and I'll
124:54 - close this text area so it automatically
124:57 - closes it and I'll Define
125:00 - a label for
125:03 - my
125:05 - text area
125:08 - and this was going to be my text
125:14 - okay I'll use the capital M and capital
125:18 - T So this looks pretty fine and when I
125:22 - move to my page
125:25 - okay this looks pretty fine so this is
125:27 - the form we have made and we'll now test
125:30 - the responsiveness of this form so what
125:32 - we are going to do we are going to
125:34 - so press Ctrl shift I or you can simply
125:37 - press inspect
125:39 - right click inspect then we'll use a
125:41 - layout okay now you can see the beauty
125:43 - of bootstrap so you can see iPhone 5 a
125:46 - responsive form is a hair iPhone 6 iPad
125:50 - okay this Galaxy S5 so this is
125:54 - responsive nature of a form so and this
125:57 - is you can see pixel 2 and here you can
126:00 - see this is our form being responsive so
126:02 - this is a beautiful nature of uh
126:03 - bootstrap so uh I'll move to my server
126:07 - here so I had defined a form using my
126:11 - form
126:13 - so this is the form we had made in the
126:15 - previous lecture so today what I'm going
126:17 - to do uh what I'm going to do so this is
126:21 - a I'll create a button in this form
126:23 - first so I'll type
126:26 - div
126:27 - class is equal to form group here you
126:30 - can see I have defined a form group for
126:31 - each input element
126:33 - so form
126:35 - group okay now uh I'll Define a button
126:40 - so this button should be type is equal
126:42 - to submit because I'm going to submit
126:45 - this form and uh and what I'll define a
126:49 - class is equal to button button primary
126:52 - and this would give me the default color
126:55 - of the button and I'll
126:59 - I'll type this submit
127:02 - as the button value
127:04 - to shown on the fronted part so I'll go
127:07 - move to this page and so this is my
127:09 - button I'll right click here quickly to
127:12 - inspect what changes I can do to make
127:14 - this is more responsive and better so uh
127:17 - I'll do margin
127:19 - 0 or 2 so this is the margin 0x auto
127:22 - used is done to Center the element so
127:25 - this doesn't work I'll type display
127:27 - block yeah this works so I'll copy this
127:29 - CSS quickly and uh I'll create a style
127:34 - element here
127:35 - Style
127:37 - and I'll quickly copy this and paste it
127:40 - here and this looks pretty fine so I'll
127:42 - refresh this page
127:43 - uh yeah now the button
127:46 - okay now yeah now the button is in the
127:49 - center and now uh till now I have only
127:53 - Define the form and two things I am
127:55 - missing in this form is one is the path
127:57 - method and another is the action
128:01 - so uh how you can work with these two
128:04 - things so we are going to cover in this
128:07 - tutorial first I'll go to my views.py
128:09 - file and then yours dot py so I'll
128:11 - Define a path
128:13 - here path
128:16 - submit
128:18 - my
128:20 - form
128:22 - and I'll what I'm going to do
128:25 - uh submit my form is going to be URL
128:28 - where I'm going to submit the form and
128:30 - Views Dot
128:32 - submit my form and name is equal to
128:35 - submit my form okay now this looks
128:38 - pretty fine so I have not defined a uh
128:41 - I'll Define a submit my form in method
128:45 - in my view file so I'll go to quickly
128:48 - quickly go go here Dev
128:52 - submit
128:55 - request
128:57 - I take request as a parameter and first
128:59 - I'll do return HTTP response or let me
129:04 - do one thing uh okay
129:08 - okay I'll Define my dictionary here
129:13 - and
129:15 - where one I'll Define a very one where
129:18 - two
129:19 - wire three
129:22 - uh what I'll do request
129:27 - Dot
129:29 - method
129:31 - this would be the value of my wire 3
129:33 - okay uh and okay I'll do one thing I'll
129:38 - keep this as
129:40 - method
129:43 - and this would be request dot method
129:45 - okay so and I'll Define a Json response
129:51 - of my dictionary I'll quickly cover all
129:54 - this thing so what I'm going to do uh
129:57 - this was my form so I'll Define first
129:59 - action I'll Define a method here and
130:03 - that method first we will work with the
130:05 - get method and then the post method okay
130:07 - guys so this is the get method here and
130:11 - get method and post method have a
130:13 - difference so we'll get this in our
130:16 - tutorial what's the difference between
130:18 - the two first is the get and I'll Define
130:21 - an action so what I'm going to do I'm
130:24 - going to use the shorthand property to
130:26 - how to specify a URL I'll Define person
130:30 - URL okay a person URL
130:34 - and then a percent sign
130:36 - so you can be a little bit familiar with
130:39 - this so I've defined a shorthand
130:40 - notation first caliber is this person
130:43 - URL then I'll Define a name between this
130:46 - single quotes this is person sign then
130:48 - the curly braces okay I need to define
130:51 - the name
130:53 - where I have to
130:55 - submit and pass this form and the name
130:58 - should be this
131:01 - name is able to submit my form and I'll
131:04 - I need to submit my form to this route
131:07 - which has having the name submit my form
131:10 - okay so I'll go here
131:14 - so now I think this is pretty fine so I
131:17 - have defined a URL to submit my form and
131:20 - this form will be submitted to that okay
131:22 - that route
131:23 - now I have method defined the method as
131:26 - get an action is this okay now what I am
131:30 - having uh I'm having uh an error and
131:33 - that is I've not defined the value of my
131:36 - keys in my dictionary so
131:39 - what you can do okay first what I'll do
131:43 - I'll comment this out and comment this
131:46 - out okay so first I'll tell you show you
131:50 - one thing
131:51 - okay line and having an error
131:55 - viewers.py line 2.
132:00 - [Music]
132:04 - okay I'm having some error let me check
132:10 - okay no no okay now it's pretty fine
132:12 - sorry sorry so okay now it's fine fine
132:15 - okay so my form is ready to be submit so
132:19 - what I'm going to do first I've only
132:20 - made a request on method so what I'm
132:23 - going to do
132:25 - I'll make a test
132:30 - test
132:31 - okay I'll make a different value test
132:33 - debug
132:35 - now I'll submit my form
132:38 - now what you can see here okay uh let me
132:44 - I'm having some issue in my form okay
132:49 - depth submit my URL has been defined and
132:52 - Method has been get
132:54 - okay
133:01 - okay
133:06 - I Define the URL
133:09 - okay
133:11 - submit my form
133:17 - I'll do first space test
133:20 - debug
133:23 - yeah now this is a free Divine okay so
133:25 - now this is fine totally fine okay I I
133:28 - had some issues so I restarted my server
133:31 - now it's pretty fine okay so what I'm
133:33 - going to tell you that I'll quickly
133:35 - cover up the things I defined a URL
133:37 - submit my phone then uh this is my uh
133:40 - your URL and now I have defined the
133:43 - action to this URL so I'm referring here
133:46 - and method was get so as soon as I went
133:50 - to this URL a views just submit my
133:52 - firmware score so when I went here what
133:55 - I saw I returned a dictionary a Json
133:58 - respond only mentioning the method so
134:00 - this method was
134:01 - uh basically get method so what I got
134:04 - here the method is get okay so how you
134:07 - can derive the values
134:09 - so this is the weird one and required
134:12 - two so whatever okay so the main
134:16 - important thing what I'm going to do so
134:18 - what you can see in the get method you
134:21 - can see the name of the response okay uh
134:24 - sorry the parameters parameters which
134:26 - are being password so I had my text
134:28 - which I had put the data as test and I
134:31 - had my text area which I put the data's
134:34 - debug okay so you here you can see the
134:38 - name of the variables so these variables
134:40 - are being separated by a question mark
134:41 - and the route is being submit my form
134:43 - okay so what I'm going to do
134:47 - how you can use these values requests
134:51 - dot get
134:53 - and the first is my text
134:56 - okay and this is the variable I'm being
135:00 - referred
135:01 - and another is my text area
135:05 - okay now I'll do one thing so
135:10 - so I'm missing a comma sign so that's
135:13 - why it's showing me an error now this is
135:14 - pretty fine okay
135:16 - request dot okay I'm also missing a
135:19 - comma sign here okay now it's fine okay
135:22 - now I'll move to my form
135:28 - mind on
135:31 - and I'll type new data
135:35 - new
135:36 - debug
135:38 - now
135:40 - here you can see
135:41 - where one is not defined
135:45 - where one is not defined
135:49 - okay why is it throwing an error okay
135:53 - okay okay okay so this this is
136:01 - here
136:03 - uh okay I'll find new data and new debug
136:06 - and I'll submit this form yeah now this
136:08 - is pretty fine okay so uh I apologize
136:12 - for all the errors okay now this is
136:14 - pretty fine so here you can see I moved
136:17 - to this route submit my form and the
136:19 - parameters being my text which has this
136:22 - data new data you can see here okay this
136:26 - this now this is cool and then I had
136:29 - another parameter my text area here you
136:32 - can see with the values new debug now
136:35 - here you can see this is new debug okay
136:37 - and the method is get okay
136:39 - so so this is the difference here you
136:42 - can see the parameters on the upper hand
136:44 - so so here you can see on the route the
136:46 - parameters are being visible to you so
136:48 - this is the first property of the get
136:50 - method so now another thing we are going
136:52 - to do we are going to change this method
136:54 - to post
136:57 - okay so this is post okay now what I'm
137:00 - going to do request dot post
137:04 - so this would be post
137:08 - request
137:10 - dot post okay so this is the another
137:15 - change I'm going to do now the
137:16 - difference between the two first the
137:18 - method gets changed and now the
137:20 - variables on this route won't be visible
137:22 - on the post method okay so I go
137:27 - my phone
137:30 - okay I'll type some python here
137:35 - python Django
137:38 - framework
137:41 - now I'll submit this form
137:44 - okay now it says CRF verification failed
137:49 - because when you submit a form with the
137:53 - post method you need to define a CRF
137:55 - token so I'd quickly type percent CRF
138:03 - underscore token
138:09 - and this looks now this is fine okay
138:12 - so uh
138:14 - I'll make a submission here
138:17 - okay I'm in a fusing error okay a person
138:21 - CRF token okay uh uh I made a mistake
138:24 - sorry I made a mistake with the two
138:26 - curly braces sorry I'm very sorry for
138:28 - this so now this looks pretty fine so
138:31 - I'll go go back to my phone uh this is
138:33 - python python Django framework
138:36 - okay now this is the 20 minute error
138:50 - okay I'll refresh this
138:54 - python
138:56 - python jungle
139:00 - and now I'll submit this
139:02 - okay now this is fine sorry uh so here
139:06 - you can see uh now the variables are
139:10 - being not there on the route so the
139:12 - variable parameters are not there so
139:15 - that's being hidden in the post method
139:17 - plus you have a CRF token here here okay
139:20 - uh so I had some issues I restarted my
139:23 - server this is where one with the python
139:25 - vat 2 with the python Django so these
139:28 - are some uh what we call them as hidden
139:32 - characters so we'll I'll tell you how
139:34 - you can clean this data and this method
139:37 - is post so basically we work with the
139:39 - get method and the post method in this
139:41 - tutorial so guys in this tutorial we are
139:44 - going to work with the form but and we
139:47 - are going to work with the backend part
139:49 - only but today we are going to create a
139:52 - different instance of form how we can
139:54 - create a separate file uh forms.py file
139:57 - and we can store all the forms in that
140:00 - file and we can render the form whenever
140:03 - required whenever required without
140:05 - writing the repetition of the HTML code
140:08 - code so that brings some kind of a
140:11 - alternative solution how we can create a
140:14 - form and how we can submit them so let's
140:17 - get started with this so uh I have few
140:20 - links so you can have a look at these
140:23 - links so I've opened this links on my
140:26 - browser as well so this first one is
140:28 - this
140:29 - so today the we are basically going to
140:32 - work in something this kind we are going
140:34 - to create a form in this such way and I
140:37 - have defined below how we can fetch the
140:39 - clean data from the form uh that this
140:42 - will remove the special characters any
140:43 - special characters and this is the
140:47 - wickets widgets in the form so basically
140:49 - there are different types of widgets one
140:51 - is a text input number input email URL
140:54 - password hidden input date input date
140:56 - time time input text area then some
140:59 - other also check box uh radio select so
141:02 - there are file input so these are some
141:05 - like many options in the form and how
141:09 - you can render the form on your
141:12 - front-end part using uh today you are
141:14 - going to work with a different
141:15 - alternative solution so let's get
141:18 - started with this so what we'll do first
141:21 - uh I'll have a quick recap of the last
141:24 - lecture uh like we the first I'll open
141:27 - my file your story WiFi so like in the
141:30 - previous tutorial I showed you that we
141:32 - created you with two URLs one to render
141:35 - the form that was my form and another
141:37 - was the URL to submit the form so I used
141:42 - to render a form using my form then I
141:44 - used to submit that form and uh and and
141:47 - we used to move to this URL then we used
141:50 - then we had a backend logic then we had
141:53 - we can process the form data at this URL
141:57 - okay
141:58 - so today what we are going to do uh we
142:00 - are only going to create only one URL
142:02 - and we'll only create a one URL and work
142:06 - well in such a way that it will uh help
142:10 - us out to do both the things so first
142:12 - what I'll do okay okay I'll create a URL
142:17 - path
142:19 - I'll Define my form
142:22 - to
142:23 - and I'll call A View function use dot my
142:27 - form to
142:30 - and I'll Define the name to it name is
142:33 - equal to
142:34 - my form two okay so I've defined this so
142:39 - in such a way that you don't get
142:41 - confused with the previous one so today
142:43 - we are going to work with my form two
142:45 - okay now what I will going to do okay
142:48 - this is my app file
142:51 - and inside my app I'll create a new file
142:55 - with the name forms Dot
142:59 - py okay
143:01 - so this looks pretty fine and what we
143:04 - are going to do so I'm inside my
143:05 - forms.py file
143:07 - and uh I'll move to this link okay so
143:11 - today the very first line you need to
143:14 - type is from Django import forms okay so
143:19 - what you need to do
143:21 - from Django
143:24 - import
143:27 - forms
143:30 - okay so why I'm doing this uh I will uh
143:34 - this will help and first I would run my
143:36 - server
143:37 - python manage Dot py
143:41 - run server so this would help me to get
143:44 - know if there's any such error okay the
143:47 - server will tell me okay so from Django
143:50 - import forms and now you'll create a
143:52 - class for your form which will Define
143:55 - okay I I'll create a class
143:58 - class is equal to
144:01 - feedback
144:04 - uh with feedback form okay I'll have a
144:07 - small B
144:08 - sorry feedback form
144:11 - and what I'm going to do I'm going to do
144:14 - forms Dot form
144:17 - okay so this is the syntax you need to
144:19 - follow okay now you're we are done with
144:21 - this okay now I'll Define two Fields
144:24 - here
144:26 - one is the title
144:30 - okay and another one is subject
144:34 - okay so I'm going to Define and what I'm
144:38 - going to do
144:39 - I'll create a cad field since
144:42 - forms Dot card field
144:47 - okay and forms Dot card field this looks
144:53 - predefined
144:54 - okay I have defined two cat Fields here
144:56 - so I'll give a name sorry I'll give a
144:59 - label with the max length I defined
145:02 - label is equal to
145:06 - tighter
145:07 - okay
145:10 - now this is fine label
145:13 - is equal to
145:15 - we can call it as subject
145:21 - description
145:27 - [Music]
145:29 - subject description and I'll Define a
145:31 - Max
145:33 - underscore length is equal to 50 for
145:35 - this
145:36 - and in the same way
145:38 - I'll Define
145:42 - Max in the underscore length is equal to
145:44 - 200 for this okay
145:46 - now
145:48 - what I'm going to do I'm also going to
145:50 - add a different attribute here here you
145:52 - can see
145:54 - that uh I can also Define Wicket is
145:57 - equal to forms.txt input Okay so
146:01 - uh I'll copy this
146:04 - and in this way you are going to text
146:06 - input here for this
146:10 - and for this one what I'll do I'll
146:12 - change this to as text area
146:16 - okay so if I'm not wrong I'm correct
146:19 - with the spelling okay this is text area
146:22 - right so here you can see this is text
146:23 - area this is text input okay
146:25 - so I have created the form successfully
146:28 - so this is the uh form
146:32 - uh what you need to do from Django
146:33 - import forms class feedback form forms
146:35 - dot form then title with the both of
146:37 - them having a label of title subject
146:39 - decision Max lenses and the widget being
146:41 - the text input and the text area
146:43 - respectively now I'll move to my
146:46 - views.py file
146:48 - and I'll Define define
146:51 - my form
146:55 - to will take a request as a parameter
146:59 - and uh before uh using this what I'll do
147:03 - I'll type from dot forms
147:08 - so basically I'm referring to this file
147:10 - from uh forms.py
147:13 - import Star so you can put every form
147:17 - you want okay
147:18 - now what I am going to do
147:21 - I'll put a if condition if request dot
147:25 - method
147:28 - is equal to
147:30 - post
147:32 - okay
147:33 - LS
147:35 - just for the basic understanding I'm
147:37 - doing this request dot method is equal
147:40 - to get
147:41 - so for the same route we are going to
147:43 - check if the if the request method was
147:45 - get opposed Okay so
147:49 - uh if it was a get method so what I'll
147:53 - do I'll create form I create a form and
147:57 - that form was
147:59 - this was the name of my form feedback
148:01 - form okay so I have a feedback form
148:06 - and okay so basically this is equivalent
148:10 - to
148:12 - this okay so this is just for uh having
148:17 - just for and having a this is equivalent
148:19 - to this
148:20 - and what I'm going to do now
148:23 - I'll exit execute a pass statement here
148:26 - uh just uh I'm giving a pass statement
148:29 - till now that it doesn't show me an
148:30 - error and I'll have a form
148:33 - and what I'll do I'll return render
148:39 - request
148:42 - uh and
148:44 - I'll first Define in my dictionary
148:48 - is equal to form
148:50 - okay and I'll pass this form
148:54 - and I'll learn request and I'll make up
148:57 - my form
148:58 - 2 dot HTML
149:01 - okay and context is equal to my
149:06 - dictionary okay uh sorry I'm wrong with
149:10 - the syntax
149:12 - now this is fine but right now I have
149:15 - not defined my form 2.html okay so I'll
149:19 - go to my templates folder
149:21 - and I'll create a new file my form two
149:25 - dot HTML
149:27 - okay now what I'll do uh I'll extend my
149:31 - template so I'll have any page
149:35 - uh suppose uh I'll have this this is a
149:38 - second.html okay I'll have this page
149:41 - so basically right now what I'm doing
149:48 - okay so I'll change the title my form
149:54 - two okay
149:57 - uh what I'll do I'll create a form
150:02 - now that's it I'll create a form
150:04 - and now what I'm going to do
150:07 - basically I had rendered the form so
150:12 - I'll just what I'm doing uh I'll Define
150:15 - the logic when I get to the post method
150:17 - so Define my form two so if the request
150:20 - or method is going to post till now I've
150:21 - defined a path statement we'll Define
150:22 - the logic but if the method is get we'll
150:25 - create the form okay we will get the
150:29 - form from that class and then we will
150:31 - render that form to myform2.html using
150:34 - the dictionary and now Tim same simply
150:38 - will move to my form and simply type
150:41 - form dot as underscore p
150:45 - okay so
150:47 - I'll restart my server
150:50 - okay now this looks pretty fine so this
150:52 - should work now
150:54 - now I'll go to my localhost
150:57 - so the server has started and I'll go to
150:59 - my form
151:00 - two
151:03 - oh now you can see like the form has
151:06 - been made so I didn't write the HTML
151:10 - code so what I did I'll move to my
151:13 - forms.py file
151:16 - uh I had defined a title and subject
151:18 - I've already defined the text input as
151:21 - well as the text area then I went to My
151:25 - Views dot Pi views.py file if the
151:28 - request method was get so I had
151:30 - initialized the form then I had rendered
151:33 - on the page okay and
151:36 - then when I went to my HTML page then I
151:40 - had without writing the HTML I was able
151:43 - to successfully add the form using the
151:45 - HTML sorry using this uh by rendering
151:49 - the form okay so what you can see so as
151:52 - underscore p means as paragraphs okay so
151:56 - when when I move to my page so I'll uh
152:00 - simply click on Control Plus U so this
152:03 - will give me a source code so what here
152:06 - you can see here the form has paragraph
152:09 - tags p p p okay so this means form was
152:13 - rendered using the paragraph okay now
152:15 - what you can do I will type form
152:18 - cast table
152:21 - home as stable so when I move to my page
152:27 - now here you can see
152:30 - the form has been rendered using a table
152:33 - so table row table heading table data
152:35 - then table row respectively okay so this
152:38 - is fine right
152:39 - okay I'll Zoom this
152:42 - okay this is here you can see this had
152:44 - been rendered using a table okay and
152:47 - when I did
152:48 - form underscore as P so this mean it was
152:52 - paragraph so I'll also do this I'll
152:54 - refresh this page then control U
152:57 - so here you can see the source paragraph
152:59 - okay here you can see pivot paragraph
153:02 - and another now also one you can uh undo
153:06 - you can say form as UL so this would
153:09 - give unordered list
153:11 - so I'll refresh this page or say so you
153:14 - can here bullet marks this represents
153:16 - the unordered list so I simply Control
153:19 - Plus U now and you can see uh here you
153:24 - can see here is the form yes yeah here's
153:27 - the form you can see list has been
153:29 - declared list list item list item when
153:31 - the form has been rendered using a list
153:34 - so in the next tutorial we are going to
153:37 - continue with this and then I will tell
153:41 - you the basic part where we if the
153:44 - request method had been the post so what
153:46 - I'm going to tell you if the form will
153:49 - be submitted on so what will happen so
153:52 - next we will add see uh try to style up
153:55 - this form as well as how we can render
153:57 - the errors and how we can fetch the
153:59 - clean data and how when you can check
154:01 - the validity of the form so so like in
154:04 - the previous tutorial we were working on
154:06 - forms so we had made a form using of uh
154:09 - using a form template engine and Django
154:12 - so uh I had made a file name forms.py
154:16 - and then I had made a form so this is
154:19 - the look of our home then in views.py
154:22 - file I defined two method one was a
154:24 - request method is equal to post and one
154:27 - was the get so basically I'll give a
154:30 - quick overview of what we were going to
154:32 - do so like when I refresh this page so
154:36 - basically upon this URL I am making a
154:39 - get request and on having the get
154:42 - request so basically this block of code
154:44 - gets executed
154:46 - and this block of wood gets executed and
154:48 - this tells that I had imported the form
154:52 - on the top of the file from dot form
154:54 - import Star you can import any form so
154:57 - when you use star symbol so I use form
155:01 - is equal to feedback form so this was
155:04 - the feedback form which I was referring
155:05 - to
155:06 - and then I was able to render this form
155:08 - on my on the front-end part of my
155:11 - application okay so basically what we
155:14 - are going to do first thing we are going
155:15 - to do is add bootstrap class to this
155:18 - form so what you are going to do
155:19 - wherever your input is defined inside
155:22 - forms.py file so you need to define a
155:25 - dictionary which has key value pair so
155:28 - basically this dictionary is redefined
155:31 - by attributes so ATT RS is equal to this
155:35 - is a symbol for dictionary so it has a
155:38 - key pair okay basically at the left it
155:41 - will have a keep a key and then on the
155:43 - right it will have a value so basically
155:45 - these attributes could be anything which
155:47 - could be Name ID class which refers to
155:50 - the basic HTML syntax you follow so what
155:53 - I'll do I'll Define a attribute class
155:56 - and I'll uh give it a value of form
156:00 - control
156:02 - form control so uh most of us would be
156:05 - thinking why only form control as the
156:07 - class because this is the default class
156:09 - present in the bootstrap so this will
156:11 - make a form responsive and for the uh
156:14 - another text area I'll do the same
156:16 - okay I'll basically quickly copy this
156:20 - uh yes
156:21 - and yeah now that's fine so when I move
156:25 - to my page I'll uh I would see a
156:28 - bootstrap has been added to my form yeah
156:30 - here you can see the bootstrap has been
156:32 - added to a form but this is this isn't
156:34 - responsive so what we are going to do
156:37 - I'll go to my my form dot to HTML and
156:40 - I'll add a div
156:42 - plus it will call medium six
156:48 - and I'll put this form inside a div
156:53 - okay and and what I'm going to do okay
156:58 - uh to get the form on the middle of the
157:00 - page I'll Define a style
157:03 - is equal to margin 0 or 2
157:06 - okay now this is fine okay
157:10 - yeah now this form is is in the center
157:13 - of the page now this is good to check
157:15 - the responsiveness I'll press Ctrl shift
157:18 - I
157:19 - and yeah now this looks good
157:22 - okay there is some issue okay yeah it's
157:24 - fine okay now this is formally
157:26 - responsive okay so this was uh till the
157:28 - front end part now for the back end part
157:31 - what if I want to submit this form to
157:33 - submit this form the method should be
157:36 - post method okay and uh I'll generate a
157:40 - token for this
157:42 - which says person CRF underscore token
157:47 - so a token is necessary when I uh when
157:50 - you submit the form via post method okay
157:53 - and uh this is a form which I I had
157:56 - rendered and additionally I need a
157:59 - button also button type is going to
158:02 - submit class is equal to ptn so this is
158:07 - a short form button primary
158:11 - this is a default bootstrap class and
158:14 - I'll give the submit
158:16 - okay
158:17 - okay now this is fine and I'll when uh
158:22 - okay so here comes the button so I'll
158:25 - give a bit a little bit of style to this
158:26 - button style is equal to
158:29 - margin 0 or 2
158:33 - yes okay
158:36 - okay
158:37 - it is it it is it is not in the center
158:40 - so I'll add display
158:44 - block okay and what I can do okay margin
158:49 - 0 or 2
158:51 - and 0 for the bottom so uh what I'm
158:55 - going to do so this is the uh uh fold
158:59 - hand notation which says uh on the top
159:01 - I'll give one ram and on the left and
159:04 - the right Auto and on the bottom I'll
159:07 - give zero so this would give
159:09 - yeah so it gives a margin top of one rep
159:12 - and on the left and right width was Auto
159:13 - and the bottom it was Zero okay left and
159:16 - right Auto top is one and the bottom is
159:18 - zero so this is pretty fine now so I'll
159:21 - make uh now I'll move to the backend
159:24 - card
159:25 - and what I told you uh when I refresh
159:30 - this page okay so I was making a get
159:32 - request on this route so when I made a
159:35 - get request on this router you can sit
159:37 - on get request on this URL so the form
159:40 - had rendered but what if I make a post
159:42 - request when I would be making a post
159:44 - request basically I would be submitting
159:46 - the form
159:47 - okay so when I'm going to submit the
159:49 - form so what I'm going to do
159:51 - I'll make form is equal to feedback form
159:54 - request
159:56 - dot post
159:59 - okay uh sorry request dot post so I'll
160:03 - get all the values when the form has
160:05 - been submitted using a post method okay
160:08 - okay but still I'll make a if condition
160:10 - to check form
160:13 - dot is underscore valid
160:18 - uh is underscore valid to make sure the
160:21 - form is valid and I'll make title
160:25 - is equal to request dot post
160:29 - and title
160:34 - okay and subject
160:37 - so I'll make again a same request for
160:40 - the subject subject
160:42 - is equal to request
160:44 - dot post
160:46 - and subject
160:49 - okay now this file is fine and I would
160:52 - print
160:56 - Title Here
160:58 - add print
161:01 - subject here okay and I'll return an
161:04 - HTTP response
161:07 - okay but still I'll make a VAR is equal
161:11 - to
161:12 - Str
161:15 - om submitted
161:21 - and I'll give plus Str
161:25 - request
161:27 - Dot
161:28 - methods okay so this is fine till here
161:33 - yeah now I'll return an HTTP response of
161:35 - where
161:38 - okay
161:39 - if this form is not valid
161:43 - what I'm going to do
161:45 - so
161:47 - what I'm going to do I'm going to render
161:48 - the form again but okay
161:51 - and I Define my dictionary is equal to
161:55 - this dictionary is going to be same as
161:57 - this one here you can see
162:01 - form
162:03 - and
162:05 - form okay and this is this and I'll
162:11 - quickly copy this
162:14 - okay else
162:17 - okay now this looks fine this code I
162:20 - I'll quickly uh give a quick overview
162:26 - is the request dot method was get to
162:29 - this code of this block of code gets
162:31 - executed in which it says I'll render
162:34 - the form on the front end part okay when
162:37 - I submit this form so this block of code
162:39 - gets executed which says request dot
162:42 - method is equal is equal to post so form
162:45 - is go to feedback form I'll get all the
162:47 - values using request dot post if the
162:50 - form is valid then I'll get the two
162:52 - values that is subject and title then
162:54 - I'll print the title print the subject
162:56 - and I have given a name variable which
162:59 - says form submitted by request dot
163:01 - method and I will return the HTTP
163:02 - response of where else in the form was
163:06 - not valid so you need to uh check the uh
163:11 - that if the form was not valid so I
163:14 - would render the form on the fronted
163:15 - part again okay if the foremost not
163:18 - valid so what I'm going to do
163:22 - it says
163:24 - I'll test
163:28 - app
163:30 - debug
163:33 - okay but uh okay before this I'll
163:35 - restart my server
163:40 - okay
163:41 - yeah now it's fine
163:43 - okay I'll refresh this page okay I now
163:47 - when I refresh this page I made a get
163:48 - request
163:49 - uh so I rendered the form of the front
163:51 - end part so test I'll give a title and
163:54 - say app
163:55 - debug
163:57 - and I'll make now submit this form
164:02 - okay so I have submitted the form yeah
164:05 - now it says form submitted post so this
164:08 - was a method which I had defined so when
164:11 - I submit that is the form so this block
164:13 - of 4 gets executed and here you can see
164:16 - that I had executed two print statement
164:20 - here one was a title and one was a
164:22 - subject so title corresponds to test and
164:25 - this here you can see test was title and
164:28 - app debug was there in my subject part
164:30 - so so thank you guys thank you so much
164:33 - I'll catch up in the next tutorial so uh
164:36 - you need to be very careful by the
164:38 - writing this code you need to be very
164:40 - careful about writing which if condition
164:41 - is coming inside which if then else then
164:44 - L If part so you need to have a quick uh
164:47 - you need to have a good uh overview on
164:50 - this so like in this tutorial we are
164:52 - going to work with the alerts in Django
164:54 - form so basically alert handling in
164:57 - forms so in this tutorial we are going
165:00 - to handle alerts in Django there are two
165:02 - types of alert one is for error and
165:04 - another is Success so we will fail the
165:07 - form so we will fill the form
165:10 - we will form the validate and check form
165:12 - for both the cases use bootstrap on the
165:15 - front end to render and display messages
165:16 - so let's get started with this so till
165:19 - now we had a we had made a form so this
165:22 - one this was our form okay on the
165:25 - request method and the on the uh
165:27 - basically
165:29 - uh here you can see uh on the get
165:33 - request we used to render the form and
165:35 - the post request we used to submit the
165:37 - form so we would apply the error
165:40 - handling on the post method part so
165:42 - basically before this I will show you
165:43 - some process uh the process here is
165:47 - about that we have alerts in bootstrap
165:49 - so uh
165:51 - what we can see alerts provide
165:54 - contextual feedback messages for typical
165:57 - user actions with the handful of
165:59 - available and flexible alert messages
166:02 - so there are basically many types of
166:04 - alert so this is a primary alert uh
166:07 - secondary success so be here so here you
166:10 - can see the primary alert is in blue
166:13 - color success is in green color
166:16 - danger is in red color and uh a warning
166:20 - is in yellow color so uh another type of
166:22 - alert here you can see is like uh which
166:25 - are dismissable in nature so here you
166:28 - can see the alerts which are
166:30 - indismissible in nature uh have a cross
166:32 - button on the right hand side which can
166:35 - be clicked and on the refer uh on the
166:39 - refreshment or when when I refresh this
166:41 - page so here you can see this alert
166:44 - message comes it comes up again so
166:46 - basically you can cross the button and
166:48 - dismiss the message uh for that purpose
166:50 - only
166:51 - so let's get started with this so first
166:54 - we will keep try to keep it simple so if
166:57 - the form is valid title is equal to
166:59 - request.post it is subject is due to
167:01 - request.post subject
167:02 - uh what I'll do
167:06 - I'll create my dictionary
167:10 - and irrespective of the result my
167:13 - dictionary is going to have the form
167:16 - feedback form okay irrespective of the
167:18 - result I'll make condition okay then my
167:23 - dictionary
167:24 - of success
167:31 - is equal to true
167:34 - and in the same way my dictionary
167:36 - of success
167:40 - message
167:41 - is going to form
167:45 - submitted
167:47 - okay and then
167:49 - what I'm going to do I'm going to return
167:52 - this page so I'll take request as a
167:56 - parameter my form.2.html context is
167:59 - equal to my dictionary
168:02 - and here you can see now I have returned
168:05 - the my form Dot myform2.html and context
168:08 - will do my dictionary so basically I
168:11 - would move to this part uh we we would
168:14 - use this
168:16 - and here you can see the its Alert
168:19 - warning so it earlier just just I told
168:21 - you you can have a quick remember that
168:24 - warning is for yellow uh dangerous for
168:27 - red and green is for Success okay uh
168:30 - what you can do
168:32 - alert alert success
168:39 - and this would
168:44 - okay
168:49 - and I will display the success
168:52 - message here
168:54 - but only I would display the success
168:57 - message only on one condition that is
169:00 - percent if success is equal to is equal
169:05 - to true then only I will display this so
169:08 - I would uh this is the end of the div
169:11 - block and I would end the condition
169:12 - person and if okay there's a slight
169:17 - error here
169:21 - all right uh uh I hope now it's
169:25 - right so I would Python manage.pyr and
169:28 - server okay so I will move to my phone
169:31 - on the get request I uh I get request I
169:35 - render the form and but on the post I
169:37 - will check the error handling so what we
169:40 - can do here I will type test
169:45 - uh title
169:48 - test
169:50 - subject
169:52 - and here you can see it says form
169:55 - submitted okay
169:57 - so
169:58 - uh
169:59 - okay okay uh there was a slight error
170:02 - because I missed the single s here alert
170:04 - alert success so it could not display
170:06 - the background color but I would refresh
170:09 - this page it says the form resubmission
170:11 - okay okay now it's pretty fine it says
170:14 - form submitted so we can add a margin
170:17 - top to this
170:18 - so basically this would help us out side
170:21 - is equal to margin top is equal to 1 Ram
170:30 - okay I'm not I know it's pretty fine uh
170:33 - we have a margin top and on the cross
170:34 - button it is dissipate so this is pretty
170:37 - cool uh with this for the same part we
170:39 - can do for the error also okay but for
170:42 - this but what we can do uh you've moved
170:46 - our music.py file this would be on else
170:48 - condition
170:49 - so first we will check the error uh I
170:53 - did this uh first because I wanted to
170:55 - have a quick idea of how this works
170:58 - okay but if title is not okay what we
171:03 - can do
171:05 - and this is our form
171:06 - okay
171:07 - uh and we can here add
171:15 - P class is equal to text
171:19 - muted
171:21 - note
171:28 - title
171:30 - should be
171:33 - capital
171:35 - okay
171:36 - so this says note title should be
171:39 - capital okay
171:41 - okay so when we move to our form okay
171:45 - now uh okay
171:48 - I'll save it here
171:50 - no no no this time I would make a get
171:53 - request and render the form
171:56 - okay I think
171:58 - it is throwing an error okay okay okay
172:01 - okay
172:03 - let me for the timing if one pass
172:12 - okay now I would render the form on get
172:15 - request now this is fine okay so it says
172:17 - title should be capital okay this was
172:19 - just so the case I am taking here okay
172:22 - now if
172:25 - title
172:27 - is not is equal to
172:30 - title Dot Upper so this is the string
172:34 - class in Python which which can be
172:35 - checked if title is going to write upper
172:38 - then
172:40 - uh we can uh what we can do we would do
172:43 - the same thing my dictionary
172:45 - of error
172:48 - is equal to true
172:52 - my dictionary of
172:55 - error message
172:58 - is equal to
173:01 - title
173:04 - title should be
173:08 - in
173:10 - capital
173:13 - letters okay title should be in capital
173:15 - okay I hope this is fine
173:18 - I have a Capital C here title should be
173:20 - in capital and then I would uh render
173:24 - the page
173:25 - on the same part okay my form dot will
173:27 - do HTML okay but I would only show the
173:31 - error only on one condition that would
173:33 - be if
173:35 - error should be
173:37 - true
173:39 - and this then I would show a error
173:42 - message
173:45 - okay and this should be my
173:48 - danger class okay so I hope now you have
173:52 - a clear idea what's happening so I would
173:55 - make a get request
173:59 - test
174:00 - title
174:02 - test
174:03 - subject
174:07 - okay now it says title should be in
174:09 - capital okay and if I make a uh okay um
174:13 - I'll make a test Title Here like in
174:15 - capital
174:17 - test subject or we can have this in
174:21 - small letters no issue test subject
174:25 - okay so it's a form submitted now I hope
174:28 - guys this is very clear to you okay
174:30 - basically in this one what we are going
174:32 - to do uh
174:34 - we are going to then there can be
174:36 - multiple errors in the form so like
174:38 - suppose I'll add a new entry to this
174:42 - and the entry would be emailed
174:47 - okay so here it I'll give it as a title
174:51 - as email
174:57 - yeah so email is a new title to my form
174:59 - uh sorry uh email is the new uh field
175:02 - added to my form okay now uh in goose.py
175:06 - file I'll also request
175:10 - email
175:13 - is equal to request
175:15 - dot post
175:20 - and I'll take email as a parameter
175:25 - so here you can see that in my forms.py
175:28 - I added a new field email a forms.carab
175:31 - field link is able to email
175:32 - and in in in the very same way it was a
175:36 - text input okay then I requested for
175:39 - email okay now what I'll do uh here we
175:44 - were trying to see that there can be
175:46 - multiple errors on the page so what we
175:48 - are going to do I will define an error
175:50 - flag
175:53 - error flag which should be false
175:56 - in the beginning
175:58 - so what we are going to do so first if
176:02 - title is not equal to title Dot Upper so
176:05 - I'll quickly remove all this
176:08 - uh so what we are trying to basically
176:12 - try to convey the idea that there can be
176:13 - multiple errors so if title is not equal
176:15 - to title or upper then error flag is
176:18 - equal to true that error is there okay
176:21 - and errors
176:23 - error message
176:26 - is equal to
176:28 - title
176:32 - should be
176:34 - in
176:35 - capital
176:38 - but this time one thing I'm going to
176:40 - change that errors isn't is an array or
176:43 - what you say list
176:45 - dot append
176:47 - error
176:49 - message okay so this is fine
176:51 - in the same way what I'm going to try to
176:54 - do that uh
176:56 - so here you can see that this is an
176:59 - extension to the previous tutorial so
177:01 - what I'm trying to Define here I'll
177:03 - Define a regular expression
177:08 - drag X okay
177:10 - and so basically this array X is used to
177:14 - define the email address so here you can
177:17 - see a DOT symbol with the add delete
177:18 - symbols uh so what I'm going to do Rec X
177:21 - okay so basically I have my email
177:25 - if not
177:28 - so before this I need to Define and
177:32 - import
177:35 - re so this is a default library in
177:38 - Python to use a regular expression
177:42 - so what I'm going to do I have my I have
177:46 - imported the library records the email
177:48 - is there so
177:51 - if not
177:54 - drag X sorry re dot search
177:59 - so search is used to determine the match
178:01 - the regex pattern regex
178:05 - comma email
178:07 - okay if this happens then what I'm going
178:10 - to do
178:11 - yes error flag will remain true error
178:15 - flag will remain too and uh errors dot
178:19 - append error message will come
178:22 - but this time the error message will
178:23 - change the error message would be error
178:26 - message is equal to not a valid
178:32 - email
178:34 - address
178:36 - okay
178:38 - so basically I'm trying to convey the
178:40 - idea that uh
178:42 - there's an error sorry so I'll remove
178:45 - this line if not re
178:48 - okay so basically I'm trying to convey
178:51 - that idea that if the
178:53 - if title is not right or offer that
178:55 - error flag remains true error message
178:57 - would be this and this will be dependent
178:59 - this would be appended in the errors
179:01 - list okay yeah good then I made a
179:05 - logical uh I made a if condition which
179:09 - state logically that uh if this is not a
179:13 - match or a search then error flag will
179:15 - remain true correct an error message
179:17 - will be not a valid email address and
179:19 - that would be this would be appended in
179:20 - the errors list okay
179:22 - okay new condition would be next
179:25 - condition
179:27 - if
179:29 - if
179:31 - error error flag
179:35 - is not
179:38 - equal to true
179:41 - if error flag is not equal to 2 so this
179:44 - is the third if conditional but this all
179:46 - is if else condition depends on your
179:49 - logic part how you can make them uh to
179:52 - be on Easy by making in such a way if
179:54 - error flag is not equal to true that
179:56 - there was no error means error fact
179:59 - is not equal to true then
180:02 - successes will do true and success
180:04 - messages is equal to form submitted
180:07 - okay so now
180:10 - what I'm going to do I would render this
180:13 - to
180:14 - myform2.txtml okay but I'll I'll give a
180:17 - quick overview
180:19 - if title is not equal to title Dot Upper
180:21 - then then if not register search if
180:25 - error flag is not equal to true
180:28 - then this return render request my form
180:31 - dot to dot HTML context is go to my
180:34 - dictionary
180:35 - so this would help me out in this so uh
180:39 - but before this I need to update my
180:42 - dictionary
180:42 - by dictionary
180:45 - is equal to I'll update my dictionary my
180:47 - dictionary
180:49 - of error
180:53 - is equal to error flag
180:55 - and my dictionary
180:59 - of
181:00 - errors
181:04 - is equal to errors so
181:06 - okay so this is fine so uh
181:12 - so I would make a uh I would so now this
181:16 - would render uh my dictionary to
181:19 - myform2.html okay
181:21 - okay uh before this what we can do
181:30 - now I will move to my form.2.html
181:33 - so basically yeah in advance I have done
181:36 - this if
181:38 - uh
181:40 - if error is equal to True yes for error
181:43 - in errors you need to print this error
181:47 - and this for Loop will end and this if
181:49 - condition would end okay
181:51 - so I would restart my server
182:01 - python manage.prm server so when I make
182:04 - a get request to my form
182:07 - so here you can see an email has been
182:09 - added
182:10 - okay uh I'll make a title
182:14 - test okay I'll keep keep this in
182:17 - lowercase test title
182:20 - test subject
182:25 - test mail
182:27 - but this is not an valid email address
182:30 - so here you can see title should be in
182:33 - capital and not a valid email address
182:35 - okay
182:36 - I'll make this test title so I'll make
182:40 - this in capital
182:43 - test
182:45 - title
182:48 - test
182:52 - subject
182:55 - and test me but this time the title is
182:58 - valid but the email is not valid so it
183:00 - should return me only this error let's
183:03 - submit this form yes it says not a valid
183:05 - email address only
183:08 - so test title
183:10 - test subject
183:15 - as the user
183:18 - at the red mail.com
183:23 - so it's a form submitted so I I have
183:26 - gone through all the test cases my form
183:28 - has passed so with this you can see that
183:32 - how the logic works so basically uh in
183:34 - the template part what I'm trying to do
183:36 - was if error is equal to true for for
183:39 - error it errors so basically I'll move
183:42 - to my views.py file here you can see my
183:45 - errors was this error arrays which I had
183:47 - made and this was the error flag so
183:50 - basically even what you can do also
183:52 - print
183:54 - my dictionary
183:57 - so this would help you to get a better
183:59 - idea
184:00 - test title test
184:04 - and test mail
184:06 - so so it says not a valid email address
184:09 - okay and uh what it says yeah here you
184:13 - can see the dictionary is like this the
184:15 - errors has not available
185:08 - so I'll move to my server I'll make a
185:10 - request okay now we can see that on
185:13 - request our server has started
185:15 - okay so I'll move to the urls.py file uh
185:20 - I'll go to this about page
185:23 - yes so it says about response absolutely
185:26 - working fine now in the same way I'll
185:30 - move to my form
185:34 - now I can see
185:36 - that on making a get request to this
185:38 - route a valid page should render so a
185:43 - valid page should render and it says
185:45 - yeah here you can see yeah my phone okay
185:48 - now I'll again make a request to an
185:52 - my form two
185:55 - okay I'll simply type 2 okay yeah now
185:58 - here we can see a page has come okay so
186:01 - uh until now I've been making a request
186:03 - to one valid route so there was no issue
186:05 - but as soon as as I make an invalid
186:08 - route let me type something my any page
186:14 - any page
186:16 - so it says page not found because this
186:19 - URL never existed by any page uh my any
186:23 - page new page
186:24 - even this not existed okay let me type
186:28 - something like some random characters
186:32 - uh even this random character URL does
186:34 - not existed so but we can simply see
186:37 - here you are seeing this error because
186:39 - you have debug result true in your
186:41 - English settings file change that to
186:44 - that change that to force and Django
186:47 - will display a standard
186:48 - 4040404 page so basically what I
186:51 - mentioned here so we will be seeing how
186:54 - we are able to integrate our own 404
186:56 - page on debug 0 to 4 so basically uh
187:00 - again I'll give you a use case which
187:02 - will help us help us to have a better
187:05 - understanding
187:06 - so what we can do deep exclude Force
187:10 - so here you can see don't run with debug
187:13 - turned on in production so like when if
187:16 - we are changing debug is into Force this
187:19 - means that we are going to be in
187:21 - deployment mode so our application isn't
187:23 - deploying the application is in
187:26 - deployment mode so like uh it clearly
187:29 - says don't run with debug turned on in
187:31 - production so debug is not turned on so
187:34 - debug is false so it says so we are are
187:39 - actually trying to be in deployment mode
187:41 - so if you are in deployment mode you
187:43 - have to define the host so right now I
187:46 - have defined star which works on all the
187:48 - hosts okay so I'll run my server
187:52 - now this is fine I'll make a request to
187:56 - my server yeah this is Hello World
187:58 - absolutely working fine in the same way
188:00 - about
188:02 - absolutely working fine uh
188:05 - my my first page yeah or my home to any
188:09 - of the pages yeah absolutely working
188:10 - fine but now
188:13 - if I'm types of random characters and
188:16 - move to a URL it says not from the
188:18 - request resource was not found in This
188:19 - Server let me type something as my any
188:23 - page new page something like this even
188:27 - not found so now our application was in
188:30 - deployment mode but as soon uh so what
188:34 - we can do we can create our own four
188:36 - zero four page so basically what we are
188:39 - going to do
188:40 - we are going to move uh to move this
188:42 - side bootstrap we are going to work with
188:44 - the Jumbotron this time so like we are
188:47 - going to go to templates quickly create
188:49 - a 404.html
188:52 - okay absolutely fine uh and what I can
188:56 - do I'll copy this
188:58 - paste it here
189:01 - change the setting to 404 error
189:06 - page okay absolutely fine I'll move this
189:11 - heading good
189:13 - I'll copy this code word and part I'll
189:16 - paste it here good yes so as page not
189:25 - found
189:26 - so I'll give a heading that the page is
189:29 - not found and uh I'll give a URL which
189:34 - says okay so what I'll do
189:38 - this page something I'll give give a
189:41 - message
189:43 - a page
189:46 - does not uh something we can give any
189:49 - message this page is missing
189:54 - or does
189:56 - not exist
190:00 - something like uh we can give it as uh
190:03 - sorry
190:05 - this page is missing or does not exist
190:08 - okay so this is absolutely fine uh
190:12 - exists
190:16 - okay this page is missing or does not
190:18 - exist and what we are going to do
190:21 - go to
190:24 - r
190:27 - home
190:28 - page
190:30 - yeah this is fine and I should Define
190:35 - percent URL single quotes
190:40 - percent sign so basically we have to
190:42 - Define in this single course which route
190:44 - we want to move and we'll move to your
190:46 - short POI file yeah and the name would
190:48 - be index okay
190:52 - okay so this is fine okay and how we
190:55 - would render this page so basically your
190:59 - this is the europe.py file of your my
191:02 - first app now I'll move to urs.pify of
191:05 - first project okay so please don't
191:07 - concluse yourself with these two file
191:09 - this is my first project this is my
191:10 - first app and you need to define a 404
191:14 - Handler so Handler 404 says I'll quickly
191:18 - copy this or even you can type
191:21 - Handler
191:22 - 404
191:24 - which says
191:26 - uh you have to Define my app name so
191:30 - basically our app name is here
191:33 - my first
191:35 - app dot views so basically I'm referring
191:38 - to the views.py file and I've defined
191:41 - the function error underscore four zero
191:43 - underscore view okay error
191:45 - underscore 404 underscore View
191:50 - so this is working fine uh so it says
191:54 - that my first app.views.era underscore
191:57 - 404 underscore view does not exist
191:58 - because I have not defined it so I'll
192:00 - move to use.viewer file and I Define
192:05 - error
192:06 - underscore 404 underscore View
192:11 - which takes request as a parameter
192:15 - and even new parameter as exception here
192:18 - you can see okay
192:20 - exception
192:23 - and it will return
192:25 - render
192:29 - four zero four dot HTML okay
192:33 - so this is working fine okay now here
192:36 - you can see let me have a quick check
192:37 - handle four zero four this is fine
192:41 - and my first app dot views dot error
192:44 - underscores and review yeah this is fine
192:46 - yeah yeah absolutely fine okay now what
192:50 - I'll do
192:52 - I'll move to my page
192:57 - yeah this is my server absolutely
192:59 - working fine I'll move to an about page
193:01 - absolutely working fine now let me move
193:04 - to a random URL
193:06 - okay it says server error for 500.
193:12 - nothing is missing
193:20 - okay
193:24 - something has been deleted friend
193:27 - request okay okay I'm really sorry for
193:29 - this I had missed the request parameter
193:31 - here
193:32 - okay the uh this is absolutely normal
193:36 - you return render request then HTML page
193:38 - so you return render request and HTML
193:40 - page okay I'll then uh the re restart my
193:44 - server
193:48 - this is working fine and I'll make a
193:51 - random URL request
193:54 - so yeah now this is absolutely fine so
193:57 - it says uh page not found sorry this
194:00 - page is missing or does not exist and go
194:02 - to our home page so yeah if we go to our
194:04 - home page and you can see this time
194:08 - settings dot py file debug is due to
194:10 - force and uh and here that's how you can
194:13 - render our own 404 page so one thing I
194:16 - would like to mention here here that uh
194:18 - like this this is a GitHub link and we
194:21 - will this is the report should we are
194:23 - used to work like we used to learn new
194:25 - Concepts but from this from now on we're
194:27 - going to work with on this repository
194:29 - that's a Django projects uh like on like
194:32 - in this repository Django projects we
194:34 - are going to start building some
194:35 - projects initially this repository is
194:37 - empty but as soon as we start making
194:39 - projects I'll commit the changes okay so
194:41 - guys this is the the link okay I'll
194:44 - comment the changes as soon as you build
194:46 - projects and I'll update the file as
194:48 - well uh readme file so you can
194:51 - instructions I'll Define the
194:52 - instructions how you can run the project
194:53 - on your local machine as well okay so
194:56 - let's get started with this so basically
194:58 - today we are going to start with the
194:59 - calculator app of our Django so we are
195:02 - going to make a calculator app so the
195:05 - very I'll go to my repository so I'm
195:07 - inside my Repository so I'll click on
195:09 - new terminal so what you need to do so
195:12 - the very first command we are going to
195:13 - type is Django
195:16 - admin
195:18 - start
195:20 - project
195:21 - Django
195:23 - projects so in the end you define your
195:25 - Project's name so I've defined the
195:27 - Django project as my projects so here
195:29 - you can see the Django products folder
195:30 - has been created so I'll move inside my
195:33 - Django projects okay fine so I'll have a
195:36 - manage.py file inside this okay yeah
195:38 - this is absolutely fine so I'll I'll do
195:43 - uh
195:44 - okay one thing we can do uh what I can
195:46 - do do if I type python manage
195:50 - dot py okay run server I'll do first run
195:53 - server
195:55 - so this should start the server on my
195:57 - local machine yes the server has started
195:59 - so I'll type localhost
196:02 - colon
196:03 - okay so sorry to the mistake localhost
196:07 - colon 8000 okay yeah here you can see
196:10 - the server has started localhost
196:12 - colonies of eight thousand uh or you can
196:15 - move to this as well
196:17 - 127.0.0.1 colon 8000 okay so yeah now I
196:21 - type python
196:22 - manage Dot py
196:25 - start app calculator
196:30 - app data app okay I hope I'm correct
196:34 - with the spelling yes calculator app
196:37 - okay so the calculator app is created
196:40 - okay so uh what you can do okay Django
196:44 - projects here you can see that our app
196:46 - is is at the same directory level with
196:49 - the management.p Wi-Fi okay now uh one
196:53 - thing you can do I'll create a virtual
196:55 - environment here so uh you need to uh
196:57 - you might have to install a virtual
197:00 - environment package as well yeah uh so
197:03 - I'll type virtual
197:05 - A and B
197:06 - my EnV so this would create an
197:10 - environment variable uh inside the
197:13 - project so yes the I hope the
197:16 - environment variable has been created
197:18 - okay uh for this virtual new A and B I
197:21 - would uh in case it throws an error so
197:24 - you might have to install a virtual
197:25 - environment packet using pip I guess
197:27 - it's pip install virtual EnV it's
197:29 - simpler or maybe I'll update this in
197:32 - next video okay if it throws an error
197:34 - okay so you can even check out or check
197:37 - out on the documentation as well okay so
197:40 - I have created a virtual EnV so
197:43 - uh uh what I need to do so so now uh
197:48 - I'll have to activate my virtual
197:50 - environment
197:52 - my A and B slash
197:55 - scripts slash activate Okay you please
197:59 - make sure of of the direction in the
198:01 - slash symbol is defined okay now you can
198:03 - see the virtual EnV has been activated
198:05 - now I'll type python
198:08 - manage dot Pui
198:11 - uh uh oh sorry okay I'm really sorry for
198:14 - this uh what you need to do uh now uh
198:19 - I'll if I start my start my server it
198:22 - won't start so I need to Define even I
198:25 - can try this out
198:27 - python manage.us start out okay start
198:30 - app sorry run server so what you can see
198:34 - you see it could not import Django
198:36 - because inside my environment Django is
198:37 - not installed so I'll just quickly
198:39 - install the Django inside my environment
198:41 - variable pipe installed
198:43 - Django
198:45 - okay so the Django will be installed uh
198:49 - in the uh like it would be installed in
198:52 - the environment variable so by the time
198:53 - it I'll give you a brief overview so
198:56 - like basically we are going to define
198:58 - the template directory static files uh
199:01 - like now we have created the project we
199:03 - have created the app now we are going to
199:05 - create a requirements.txt file as well
199:06 - so this is this will be all about
199:09 - develop environment then like in the
199:12 - upcoming we are going to work with front
199:14 - end
199:16 - front end part then back end part
199:19 - then a error handling so basically some
199:24 - new some new designs as well to how we
199:27 - can make our app beautiful like in the
199:30 - front-end part responsive so we're going
199:32 - to cover them as well okay so let's move
199:34 - to this okay it's getting installed okay
199:37 - uh so basically uh what we we are going
199:40 - to do we are take the input from the
199:42 - user it will help us to uh we will take
199:45 - input from the user then we will like
199:47 - even the mathematical inputs can have
199:50 - some error we'll check check errors as
199:53 - like like division by zero error we
199:55 - check some error handing and this at
199:58 - that at level at that level as well okay
200:00 - so yeah now here you can see your uh
200:04 - environment has been installed and I'll
200:07 - type please
200:10 - requirements requirements
200:14 - Dot txt
200:17 - okay yeah here you can see the
200:18 - requirement.txt has been created so I'll
200:20 - move to commercial txt now here you can
200:23 - see it's like now if you want to do we
200:25 - can also do one thing uh like uh you can
200:28 - try Ctrl f
200:30 - and you can simply type quick equal
200:32 - equal to uh I have tried this thing like
200:36 - you can replace with this with greater
200:38 - than equal to sign like this would help
200:40 - you like in if if in any uh like in any
200:44 - other uh uh like in upcoming uh if
200:48 - there's any another version like 3.0.0
200:51 - 3.0.4 so like 3.0.4 3.0.4 so like in uh
200:57 - like in any future if you have a new
200:59 - version so this would update to that
201:01 - version because it has a greater than
201:03 - equal to sign so any version greater
201:05 - than equal to 3.0.4 will be updated so
201:08 - you can apply this to your
201:10 - requirements.txt file to get get updated
201:13 - or uh if it's if it might throw error
201:15 - you can revert back to this uh with the
201:18 - equal equal to sign okay you can simply
201:21 - do greater than equal to
201:23 - then replace with the recruit design
201:25 - okay you can try this out okay
201:28 - so because uh I have tried this one as
201:31 - once okay so now uh the requirement with
201:34 - txt file has been created now we will
201:36 - move to our settings.py file quickly
201:42 - okay this is the settings.py file okay
201:45 - so one thing you need to Define OS dot
201:48 - path
201:49 - dot join
201:55 - okay I'll Define base directory
201:58 - yeah good and templates okay
202:03 - okay yeah good and I'll Define a static
202:07 - URL is go to URL and you need to find
202:09 - static file directory
202:11 - as
202:13 - os.part.joinbase.static folder I'm going
202:14 - to copy this yes good yes so I'll do
202:19 - this I'll move into my Django projects
202:21 - okay so what you need to do so at this
202:24 - level you need to Define two folders one
202:26 - is
202:27 - templates
202:29 - good another is
202:33 - static
202:36 - okay so this is good okay and what we
202:39 - are going to do uh now what we can do we
202:41 - do like we are going to move to our uh
202:45 - uh
202:48 - urls.pui file Okay so
202:51 - you are yeah so this is include path
202:55 - comma include
202:57 - okay and you can define a path to here
203:00 - as
203:02 - calculator
203:04 - app
203:06 - include
203:10 - child school later
203:13 - see you later
203:18 - Okay calculator app dot URS
203:24 - okay so I'll run my server but
203:33 - okay now I'm inside my calculator app so
203:36 - I'll create a new file urh dot py file
203:38 - here
203:39 - so basically okay I'll do one thing
203:43 - yes new file URLs Dot py
203:48 - fine absolutely fine and from here what
203:52 - I can do
203:54 - I'll quickly copy this
203:56 - paste it here good
203:58 - and I'll Define URL patterns as well
204:04 - okay
204:06 - okay
204:08 - okay uh okay I'll Define
204:11 - from Dot
204:14 - sorry
204:16 - from dot import views so this would bind
204:20 - my urls.piva file to views and I'll give
204:27 - to use
204:30 - views dot index
204:33 - name
204:34 - is equal to index
204:37 - yes
204:39 - okay but I have to go to my views.py
204:42 - file as well
204:46 - yes that's why I'll Define def index
204:52 - request
204:55 - okay
204:56 - and
204:59 - Value Point from Django dot HTTP import
205:04 - http
205:08 - response athlete
205:12 - response yes good
205:16 - and
205:17 - return
205:18 - HTTP response
205:21 - server
205:26 - started
205:28 - okay so this should work now
205:32 - pythonman.py run server
205:35 - I hope there's no error yes
205:38 - okay and I'll move to calculator
205:46 - yeah good absolutely fine so we are
205:49 - right now I have created the development
205:51 - environment so like just for the last
205:54 - last few seconds I was like why I was
205:56 - doing something uh I was implementing it
205:58 - so like I'll give quick quick overview
206:01 - settings.viewer file you're done you all
206:03 - do it so what I try to do that uh like
206:06 - uh on the calculator app
206:09 - okay so basically I used to uh like in
206:12 - the previous tutorial I used to keep it
206:13 - as a blank but right right now I've done
206:15 - this as localhost calculator app because
206:17 - there might be a personality that we
206:19 - might be creating many apps into this
206:21 - single project okay so like on this
206:23 - calculated app route uh like if I go to
206:26 - this route
206:27 - like I here you can see character app
206:30 - server started but if I move to this so
206:32 - this is the okay
206:34 - okay okay slash admin
206:38 - okay
206:40 - we will be discussing about Django admin
206:42 - as well so I'll try to fix this error in
206:45 - the next tutorial uh till then you can
206:48 - move to Cal localhost colon 8000
206:50 - calculator app so like here you can see
206:52 - the server has started so uh like in
206:54 - this uh it included the calculator
206:57 - app.urs and now like in this path
207:00 - views.index of squad and I return an
207:02 - HTTP response of server started okay so
207:05 - so like in the previous the previous
207:06 - lecture what we did uh we uh I will run
207:10 - my server python manage.py run server so
207:13 - basically I'll move to local rows colon
207:16 - 8000 yeah good so I was uh like uh now
207:20 - what what I'm trying to show that our
207:22 - project can has multiple apps so this is
207:24 - the root uh root app of our project so
207:28 - I'll clarify this like as soon as I move
207:31 - to Calculator app uh it says the
207:34 - calculator app is running so like in the
207:36 - last in the end of the video last video
207:39 - I was having some I was having error at
207:42 - this point like when I used to do
207:44 - localhost colon 8000 induced to throw me
207:46 - an error that it could not find the PATH
207:49 - okay something like 404 error page so
207:52 - like now what I how did I solve this I
207:54 - uh like a local host colon 8000 shows me
207:58 - the uh so the server has started and a
208:01 - calculator app shows the calculator app
208:03 - is running at this route we are going to
208:05 - make an app so what I did uh what I did
208:08 - so I'll move to my urls.py file of the
208:12 - Django projects good so like in this you
208:16 - can see uh what I did uh like uh I
208:20 - created a like this is my calculator app
208:23 - okay good now I created a new app with
208:26 - the name root app dot with the name root
208:29 - app and I link the default path to the
208:33 - root app.urls and I'll open the root
208:36 - app.url so it says path like views Dot
208:39 - root m is equal to root and I'll move
208:42 - and it returned an HTTP respond the rule
208:44 - the server has started so this basically
208:47 - this corresponder root app so I made a
208:50 - root app to make sure that it doesn't
208:52 - throw me an error on the main round okay
208:54 - so basically I uh why I did this because
208:57 - we were going to we are going to get
208:59 - multiple apps on this single project so
209:01 - when I move to my app calculator apps it
209:03 - says calculator app is running so
209:05 - absolutely fine okay now one thing we
209:08 - are going to do so what we can do I'll
209:10 - close uh close to the right yeah good
209:13 - okay I'll close this as well and close
209:16 - this as well okay but now I'm inside my
209:19 - settings.pify so uh I did OS dot part
209:22 - dot join page directory and templates
209:24 - basically we are going to refer to the
209:26 - calculator app template so I'll give a
209:29 - slash calculator
209:31 - calculator app okay so this is final
209:36 - calculator app is a folder which I am
209:38 - going to Define in templates okay so
209:41 - yeah here you you can see what I uh was
209:44 - uh what I was talking about that I
209:47 - created a root app and then a calculator
209:50 - app so this is absolutely fine now taken
209:52 - okay uh now I'll move inside my
209:54 - templates and create a new folder
209:58 - with the name calculator app you're good
210:01 - and I'll create okay so I'll I moved
210:05 - inside my calculator app templates now
210:07 - I'll move to that folder
210:10 - templates
210:11 - oh
210:14 - what I'm going to do I'll move to the
210:17 - templates folder
210:27 - templates yeah here it is yeah templates
210:30 - okay and now I'll do my inside the
210:32 - templates okay good
210:34 - and I'll create new file
210:38 - and type index
210:40 - Dot
210:42 - HTML okay
210:44 - this is fine yeah
210:48 - okay
210:49 - so I'm inside my templates calculator
210:52 - app index.html you're good so what I can
210:56 - do now is uh what I'll do
211:00 - I go to I'll go to the bootstrap website
211:03 - okay I'll go to the documentation
211:06 - getting started so I'll copy the base
211:08 - template here I'll quickly copy this
211:12 - paste it in my indicator HTML I'll save
211:15 - this file as well
211:17 - okay now the server has restarted so
211:20 - I'll go to my page and okay okay but I
211:23 - forgot to do one thing what I need to do
211:24 - I'll move to use dot py file of the
211:27 - calculator app and instead of this I'll
211:29 - return a page
211:32 - return render request
211:36 - and then index dot HTML
211:41 - so I'll refresh this page
211:43 - okay is there any error okay okay
211:49 - I'll refresh this page
211:51 - yeah it says hello word so basically
211:53 - it's all working fine now what we have
211:56 - to do like uh we have to create a footer
211:58 - uh like nav bar uh we have to do a
212:01 - responsive design as well so we'll
212:03 - quickly now do the work so what we can
212:06 - do is quickly search out for navbar
212:10 - okay yeah here's the navbar
212:14 - okay I can copy this
212:17 - I'll move to my index.html and remove
212:20 - the heading
212:22 - okay first I'll give a title as
212:24 - Django
212:26 - calculator
212:30 - app so this is going to be a single page
212:33 - application so uh okay uh so this is
212:37 - going to be a single page application
212:39 - which I can copy this so we don't need a
212:41 - form I'll cut this even I don't listen
212:45 - okay okay okay okay
212:49 - so basically I don't need the knock down
212:52 - also so I can cut this
212:55 - okay
212:57 - uh this uh okay first I'll type
213:03 - Django
213:05 - calculator
213:09 - app good and
213:15 - basically when I don't need this also
213:22 - um not even okay
213:26 - okay Django calculator app
213:33 - okay I can save this then refresh my
213:36 - page to see what's happening yeah uh now
213:39 - it's absolutely fine uh instead of this
213:42 - I'll give an about
213:44 - about
213:50 - okay and I'll give this an about
213:54 - foreign
213:58 - pressing Ctrl shift I yes this is
214:01 - absolutely working fine okay so so yeah
214:03 - uh we'll try to improve the uh or we
214:08 - will try to improve uh on this as well
214:10 - so uh basically for footer what we can
214:13 - do
214:15 - okay
214:18 - okay so okay I I went to cards okay okay
214:22 - we'll do one thing okay what we can do
214:26 - uh if classes with card card body
214:30 - yeah
214:31 - good so we are inside uh okay now we'll
214:35 - move to that as well so we are inside
214:37 - our body div class is equal to card
214:40 - okay so before this I need to define a
214:43 - container as well if class is equal to
214:46 - container
214:48 - fluid
214:51 - good and that class is equal to row
214:56 - div class
214:58 - is going to call md6
215:03 - and then uh
215:05 - div class equal to yeah card then a card
215:10 - body would do yes
215:17 - card body as well
215:21 - okay and I'll go to the page
215:26 - yes entirely working fine and I'll give
215:30 - a style is equal to margin 0
215:34 - Auto okay so this is absolutely fine
215:37 - I'll give us I'll give a style equal to
215:39 - margin 0 and auto I'll give a style as
215:43 - style is good margin 0 Auto so the style
215:45 - is in the would be in the middle
215:48 - and
215:49 - here you can see I'll Define a form
215:51 - inside it inside it uh
215:58 - and in this
216:01 - I quickly Define the forms
216:07 - okay div Clause is going to form group
216:09 - so basically we have to define a div
216:11 - class is able to form
216:13 - group
216:17 - good now we have to Define inside the
216:20 - and label okay so a class of form
216:23 - control has to be defined here
216:26 - so input
216:30 - basically I'm going to type input type
216:31 - is going to search because our class is
216:34 - equal to uh okay sorry for this
216:37 - class is going to form control name is
216:40 - equal to I'll Define this as
216:44 - query
216:46 - ID is equal to query as well
216:52 - okay and I hope this is and I have to
216:55 - define a method here method is going to
216:57 - get
216:59 - action
217:00 - is equal to I'll Define the action as
217:03 - well Okay so until the time you can keep
217:06 - a hash here
217:10 - okay I have refreshed the page and yeah
217:13 - so so even I have to define a margin top
217:17 - as well so uh this is
217:20 - one ram then Auto
217:23 - then bottom is zero so this is the
217:25 - forehand rotation top uh this this go
217:29 - then top left is the bottom then again
217:32 - right
217:36 - yeah now this is fine okay so I I have
217:41 - to Define two input so basically in this
217:44 - I'm going to Define button group
217:51 - button group so basically the button
217:54 - group would work in this way
217:59 - or we can do what we can do I am inside
218:03 - my form
218:05 - card body
218:07 - so what I can do
218:08 - [Music]
218:14 - input type is equal to submit
218:18 - sorry
218:19 - submit
218:21 - class is equal to form
218:24 - button button primary
218:30 - okay and I have to Define off as new
218:33 - input also because if the user input
218:35 - type is equal to reset
218:42 - okay okay
218:46 - class will go to button
218:50 - button
218:52 - primary
218:58 - so what we can do refresh the page okay
219:01 - yeah this is absolutely working fine we
219:03 - will try to give different colors to the
219:04 - butter okay and now we will add the
219:07 - footer
219:12 - okay the photo would be in the same way
219:14 - we are going to do this
219:15 - Dev class is equal to container fluid
219:23 - [Music]
219:25 - if class is equal to row
219:30 - depth
219:31 - def class is going to roll then uh well
219:34 - to div class we will do
219:39 - all
219:42 - 12
219:45 - okay and I'll give this as
219:51 - I'll Define this as bucket let me do one
219:53 - thing I'll Define this as photo
219:57 - class is able to fixed bottom because I
220:00 - want this to be remain at the bottom of
220:02 - the screen
220:05 - okay and I'll Define as a p
220:09 - okay
220:10 - put it
220:13 - yes
220:17 - okay here you can see the footer is
220:19 - being displayed but the what I can do
220:22 - background light
220:26 - will this work
220:30 - okay okay okay okay let me check one
220:32 - thing now is go to background right yes
220:34 - number light
220:40 - I'm trying to give the same color to the
220:42 - footer as I have but
220:45 - okay
220:49 - okay I'll check this out but like we
220:52 - have made a raw structure to our
220:54 - application so now we would we would be
220:56 - completing it so like the first thing I
220:58 - would like to show you about the photo
221:00 - uh we had some issues in the footer like
221:03 - in the last tutorial so like uh right
221:06 - click here click on X inspect and try to
221:08 - do something like this is our footer so
221:11 - what I can do I can add a background of
221:13 - black
221:16 - uh oh no sorry
221:18 - black yeah now it's absolutely working
221:21 - fine uh the text color should be
221:24 - white yeah it's good and text align
221:28 - should be
221:29 - Center yeah that's really working right
221:31 - so we will comment the changes here so I
221:34 - I'll add a style here
221:36 - back row
221:38 - is equal to Black
221:39 - good
221:41 - and we'll make
221:44 - color is equal to White the hair color
221:46 - will represent a text color white good
221:49 - and the text align should be
221:53 - uh Center good
221:55 - good so what I want to do uh we have
221:58 - this class is container fluid and I'll
222:00 - give a margin bottom
222:03 - here margin bottom of at least 20 Ram to
222:07 - be uh to give uh like okay this would
222:11 - help me out like to have a screwable
222:12 - view downside okay so like uh now it's
222:16 - working fine so I'll move to the
222:19 - container for fluid okay
222:22 - this is the container fluid yes
222:25 - yes so like here you can see I have
222:28 - given a margin of 29 22 Ram 24 Ram
222:31 - so uh like uh
222:36 - I'll yeah okay I'll look into this okay
222:38 - uh so next thing we can do uh what we
222:41 - can do is uh we have about so like uh we
222:46 - want a image here
222:48 - so
222:49 - we'll add image
222:52 - class is equal to image fluid
222:56 - okay now I I Define a source to it
223:00 - source is equal to
223:02 - percent
223:03 - static
223:06 - okay and then a person sign an end
223:08 - symbol
223:10 - then logo Dot jpg
223:14 - I think this should be fine
223:17 - okay it is showing an error
223:21 - okay yeah at the top of the template you
223:24 - need to Define percent load static
223:27 - foreign
223:29 - load
223:33 - static
223:35 - yeah
223:38 - so
223:40 - it is three okay okay let me see like
223:43 - I'm in my templates
223:45 - static folder or the name is main.jpj
223:48 - sorry
223:51 - okay I'll move to the link and this is
223:53 - main Dot
223:56 - JP
223:58 - okay
224:00 - so we have an image here also good so
224:04 - like it's fine so what we can do uh like
224:08 - uh I'll align this button to the center
224:10 - and what we can do uh like uh
224:14 - this is button button primary so I'll
224:17 - give success button success and this is
224:21 - as button Danger
224:24 - okay and I'll give a style is equal to
224:27 - this day
224:30 - block
224:31 - okay so this would uh I'll try to uh
224:34 - margin
224:37 - 0 Auto
224:41 - and I'll apply the same setting
224:43 - to the another button as well okay
224:49 - so I'll refresh this page yeah okay okay
224:53 - what we can do
224:59 - okay and
225:03 - we give this as another road div class
225:06 - is equal to row
225:09 - good and there
225:15 - class is going to call
225:17 - md6
225:22 - and what I'll do okay I'll press
225:25 - continue next we
225:27 - and
225:33 - the class is going to call md6
225:41 - foreign
225:55 - [Music]
226:09 - okay
226:11 - um
226:12 - what we can do is
226:18 - we will inspect it here
226:23 - you can see the this is a row which is
226:25 - showing okay
226:37 - okay the problem was that my call wasn't
226:39 - inside the row okay so this uh now this
226:43 - this is fine okay my call wasn't inside
226:45 - the row so now it is inside the row
226:48 - yeah no it's absolutely working fine
226:50 - okay so we have two buttons submit and
226:52 - reset okay what why was it using the
226:55 - reset okay if I top I type n equation
226:57 - two plus three plus five okay something
227:00 - so the reset button would reset the text
227:03 - okay okay so this is absolutely we can
227:05 - find okay what we can do here uh we can
227:08 - provide uh like uh what we can
227:13 - provide some text at the footer
227:22 - thanks
227:23 - for using
227:25 - our
227:27 - app okay we can provide this and in the
227:31 - same way what we can do we'll move to
227:34 - the body part
227:36 - uh what you we can right click here
227:40 - so this is looks good and here you can
227:43 - see
227:44 - for the prefronted part you need to be
227:46 - do some like inspect and do something
227:48 - because unite might not be accurate at
227:50 - the first time okay so okay what you can
227:53 - do uh
227:56 - I'll give a class and inside my body so
228:00 - I'll give it here I am inside my body
228:02 - I'll give a whole class a background
228:04 - light
228:06 - this should work so this would
228:10 - yeah here you can see my body has the
228:12 - same color as the nav path okay so this
228:15 - gives me a glossy interference okay uh
228:18 - it might be just I want to tell you that
228:20 - you can give any color you want you can
228:22 - right click here so here you can see the
228:24 - background color and this you can do
228:26 - color inspector and try to give any
228:28 - color of your choice okay what you want
228:31 - you can give any color so this this one
228:33 - I am trying to keep things basic it's up
228:35 - to you you want to make any changes okay
228:37 - and now what can we can do I'll refresh
228:41 - this page yeah good so what we can do uh
228:45 - so we have basically done with this so
228:48 - I'll try to give a
228:52 - one thing I had mentioned about the
228:54 - margin bottom here so let me check with
228:57 - this
229:00 - okay yes
229:05 - this is the margin bottom yeah
229:12 - yeah I have increased
229:14 - yeah uh that's why I was saying I was
229:16 - increased to trying to increase the
229:17 - margin bottom like it would give you a
229:19 - flexible view down there as well because
229:21 - next we are going to create the about
229:23 - part so like uh we'll give up about
229:27 - block
229:30 - and Dev class is called md6 again I was
229:33 - inside my form then inside my this is
229:36 - the row end of the row okay then I'll
229:39 - have again after wrote this class is
229:41 - equal to row
229:44 - and they have class is going to call md6
229:51 - I'll give a style is equal to margin
229:55 - 0 Auto
229:59 - something a good like we'll use some
230:03 - typography here
230:06 - typo
230:07 - graphy so we can have various things
230:11 - that is one thing you can use here is a
230:13 - display port
230:14 - or maybe lead as well what kind you want
230:17 - to use so like maybe you can use what I
230:21 - can do
230:22 - use
230:24 - P class is equal to
230:26 - display
230:30 - we can use display for
230:37 - about
230:38 - then we can give an HR tag
230:41 - it will create a line
230:43 - and in there we can use
230:47 - P class is equal to lead
231:04 - our calculator
231:07 - app can perform
231:12 - mathematical
231:16 - operations
231:18 - okay now I'll refresh this page
231:24 - yeah now okay it's it's uh like it's
231:27 - fine uh what we can do uh
231:34 - I'll give a margin top of one ram
231:37 - one ram then Auto
231:40 - zero then Auto okay
231:45 - and one thing I wanted to show you here
231:48 - that I'll give
231:50 - this
231:52 - row or maybe you can say
231:54 - column ID is equal to about
231:59 - maybe name is about as well
232:02 - name is equal to about
232:06 - and when at the top of my nav bar if I
232:09 - come here I'll give it a hash about
232:12 - because hash depends to the ID
232:15 - okay
232:16 - so basically even in the even the vs
232:19 - code says like I click on here I get to
232:22 - this ID okay so this is absolutely
232:24 - working fine
232:25 - okay and uh when I'm here I click on
232:28 - about I get down to here so basically
232:30 - this is this was an example how you can
232:31 - use ID with the reference tag okay okay
232:35 - now if I come to Ctrl shift I okay okay
232:39 - uh and I click on about I get to the
232:41 - about part okay if it can be in lengthy
232:43 - paragraph as well okay uh it's up to you
232:46 - uh
232:48 - uh and I'll give as a style is equal to
232:51 - text line is equal to Center
232:57 - okay uh even to The Heading also
233:02 - X line is equal to Center yeah good
233:08 - good so like we we are like almost uh
233:12 - done with the front end so this was the
233:14 - layout of our app so this was responsive
233:17 - you can press Ctrl shift I or you can
233:20 - simply right click and click inspect so
233:22 - this is the responsive nature of of our
233:24 - app so basically we can type anything
233:26 - two plus three and we are going to reset
233:29 - so this uh we we are able to implement
233:31 - this functionality the next part we are
233:33 - going to do basically we are going to
233:35 - add instructions block as well as Define
233:38 - a form submission URL to the page and
233:41 - then we will build the backend logic
233:42 - with exception handling as well okay so
233:45 - let's get started with this tutorial
233:47 - so basically what we can do uh so this
233:51 - will we can define a list Li class is
233:54 - equal to nav item
233:57 - okay then uh same way a anchor tag uh
234:01 - which is represented presented by a nav
234:03 - link
234:06 - good and hrf is equal to Hash
234:08 - instructions
234:11 - instructions okay and uh instructions
234:16 - instructions
234:19 - yeah look so this works fine so we can
234:22 - uh I would uh
234:25 - we can move to the page and see this
234:28 - uh okay I'll uh yes we can see here
234:32 - instruction has come but as soon as
234:34 - click because I have not defined
234:35 - instructions ID so uh what we can do we
234:40 - can move to this and we can see this row
234:42 - which represents the about block so I'll
234:45 - copy this row
234:46 - Ctrl C and then I press Ctrl V so I'll
234:51 - do this as instructions instructions
234:55 - okay good and I have to define a
234:57 - instruction ID here as well
234:59 - because
235:01 - hash instructions
235:04 - yeah good so I have defined the hash
235:07 - instructions so
235:09 - so I can uh so we can Define some
235:12 - instructions so how we can Define them
235:14 - what we can do we can move to bootstrap
235:16 - and use list
235:18 - list group so in this way we can run a
235:21 - new thing also this is a list Group
235:22 - which also have list group item in it so
235:25 - here are many you can choose any style
235:27 - of your uh so I'll use this one
235:31 - okay so what I can do uh
235:35 - I'll move this HR sorry paragraph and
235:39 - put this disk group and I'll move to the
235:42 - page
235:45 - and yeah here you can see here the
235:46 - instructions are defined so when I click
235:48 - on instructions
235:50 - instructions okay there might be some
235:52 - issues hash instructions
235:57 - okay there is an issue hash okay okay
236:01 - you don't need to define a hash inside
236:03 - because when I was referring here okay
236:05 - let me go over yeah hash instructions
236:07 - when I click on this I'll move to this
236:09 - because this ID is only instructions so
236:11 - there was by mistake and hash
236:13 - instructions so uh okay okay I'll
236:15 - refresh this page yeah good now I click
236:18 - on instructions I move to this block
236:19 - okay this is uh now this is working fine
236:21 - so we can Define some instructions here
236:23 - like uh
236:27 - plus sign
236:28 - we can Define uh like we can Define some
236:32 - instructions Plus for addition
236:37 - okay
236:38 - and simply something like
236:42 - star for multiplication
236:47 - okay uh something like uh
236:50 - and uh
236:54 - we can Define
236:56 - this for division
237:00 - okay and basically we're working in
237:02 - Python so we might be using a Python and
237:05 - this is for uh flow division
237:08 - floor
237:12 - division
237:14 - yeah and
237:16 - we can cry
237:18 - uh also like this four minus okay
237:28 - okay so basically we have defined some
237:31 - instruction like Plus for addition minus
237:32 - multiplication division flow division we
237:35 - can under under Define
237:37 - like
237:38 - uh something like this also
237:42 - uh
237:45 - parenthesis also we can Define
237:49 - okay we can Define or we can Define as
237:51 - brackets
237:54 - brackets
237:56 - okay or we can simply type parenthesis
238:00 - I think
238:01 - parenthesis
238:03 - okay so basically parentheses are used
238:06 - to define a priority like if you want to
238:09 - evaluate first that parenthesis then
238:12 - next so we would move to the page and
238:14 - I'll refresh this page okay so this
238:17 - looks good Plus for addition minus
238:18 - multiplication division flow Division
238:21 - and parenthesis okay so this looks fine
238:23 - so what we can do Define we can define a
238:26 - new URL here so we will try now we'll
238:29 - move to some backend part so so I'll
238:32 - move to urge.py file so I'll Define a
238:35 - path
238:36 - is equal to submit
238:39 - query
238:40 - okay
238:42 - and Views Dot
238:43 - submit query and I'll give this a name
238:47 - as equal to submit
238:49 - query okay so I will Define some single
238:52 - quotes here
238:54 - submit query okay now now this is fine
238:56 - now uh I'm referring to the submit query
238:59 - in use folder so I go to views so this
239:02 - is showing me an error because since I
239:04 - have not defined a view a submit query
239:06 - in My Views so they have to Define
239:08 - submit
239:10 - submit query
239:14 - okay and I'll take a request as a
239:17 - parameter
239:20 - and what I can do
239:23 - uh
239:24 - till now I will find past statement here
239:27 - okay so this looks fine and now in my
239:32 - HTML page
239:34 - I would move to my HTML page and what I
239:37 - can do I have an action here yes
239:42 - percent URL is equal to submit
239:47 - query
239:51 - yes this looks fine
239:54 - okay so this looks fine uh uh yeah this
239:58 - is submit query fine now I would move to
240:00 - my submit query block
240:03 - use dot submit query yes okay
240:06 - uh and I'll return
240:12 - uh what I can do I'll take Q as a
240:16 - parameter a queue as a parameter and
240:19 - request
240:20 - Dot
240:21 - get
240:24 - query
240:28 - because I would show one thing that
240:30 - inside my form I can move to the form
240:33 - uh
240:34 - yeah uh yeah here you can see that input
240:38 - type is going to text form control and
240:39 - here the name is query so you should
240:42 - have the same name
240:44 - for the get parameter as well so in my
240:47 - view dot UI file I'm that's why I'm so
240:50 - type request dot query because this
240:53 - refers to the same name in the form
240:55 - viewer referring to so what we can do
240:58 - so I will return
241:02 - an HTTP response
241:05 - of Q
241:07 - okay so this would uh this should work
241:10 - fine now I'll move to the page
241:13 - and I'll refresh this
241:17 - okay this is still now find two plus
241:19 - three
241:20 - star five so I should submit this
241:24 - yeah now this is working fine here you
241:26 - can see that uh I went to the route as
241:29 - so I'll quick quickly give a overview of
241:32 - this what I did so here you can see that
241:36 - uh first
241:37 - uh I defined a inside my number I give
241:41 - hash instructions and defined
241:42 - instructions block so basically you can
241:45 - this this one instruction Plus for
241:47 - addition minus multiplication division
241:49 - flow division parenthesis okay now then
241:52 - I went to urs.py file then I defined a
241:54 - path submit query which equals the
241:56 - function views.submit query the name is
241:58 - going to submit query then I went to the
242:00 - views.py file then I did request dot get
242:04 - query and Q is equal to this okay so
242:07 - return HTTP response response of Q okay
242:10 - so this is fine what can do also in the
242:13 - same way we can return a Json response
242:15 - as well
242:16 - uh for this you have to import Json
242:18 - response Json
242:20 - response
242:23 - and you can do
242:25 - Json response of Q
242:27 - so I'll make a get request
242:33 - okay uh
242:35 - what for this what do you need to do you
242:37 - need to define a Json
242:40 - dictionary
242:42 - and here you can Define q is equal to Q
242:46 - and uh and then I have to return a Json
242:49 - dictionary
242:52 - yeah here you can see now this isn't
242:55 - working as a Json object which says
242:57 - queue parameter and then two plus three
242:59 - star five okay so uh for a Json response
243:02 - you have to define a dictionary because
243:04 - then it works like a Json Json object
243:07 - okay so in this way we can uh Define an
243:10 - HTTP response as well
243:13 - so
243:14 - yeah no this is fine so we can I'll
243:17 - quickly do this yeah this is working
243:19 - fine okay so I'll move to the page
243:21 - okay I'll type something else minus 2
243:24 - then reset button I'll copy this reset
243:28 - button reset button works fine I'll
243:30 - paste it here and submit yeah now this
243:32 - is working fine so basically what we are
243:34 - going to do we would in this tutorial
243:36 - what we are going to do the evaluation
243:38 - of query and adding a try accept Block
243:40 - in this tutorial this continuation of
243:42 - tutorial number 20 in this we would
243:44 - evaluate query as well as ADD try accept
243:47 - block so we will Implement evaluation
243:49 - try accept block and render to front-end
243:51 - part so this is going to be an
243:53 - interesting tutorial so let's get
243:54 - started with this so basically till now
243:56 - we had defined a submit query route and
243:59 - we were taking request.equate query and
244:01 - Q then we returned an HTT response of
244:03 - queue so basically what we can do I can
244:05 - type any method mathematical equation
244:07 - that is two plus three so I would submit
244:09 - this and it returns me two plus three so
244:12 - this looks good so we can move to the
244:15 - back back page home page index page so
244:17 - basically this we are making a
244:18 - application so basically about
244:21 - then instructions so you can check check
244:25 - response in nature as well Ctrl shift I
244:27 - okay and this is the nav bar and then
244:30 - instruction on this so uh what we can
244:33 - also try like if you scroll down the
244:35 - page what you see the nav bar is navbar
244:39 - we cannot see the number on the top if
244:40 - we scroll down the page like we are on
244:42 - the top of the page as soon as you
244:44 - scroll down the page we don't see the
244:46 - number on the top so this is like what
244:49 - you can do on the number class we can
244:52 - move to the navbar class and try type
244:55 - fixed
244:57 - talk so what would it do like I'll
245:00 - refresh this page
245:02 - so like a refresh this page and you can
245:05 - see here's a number okay and when you
245:08 - press Ctrl shift I so when you scroll
245:10 - down the page you see the number is
245:12 - fixed on the top so this is an
245:13 - additional utility off to your front end
245:15 - part if you want to carry on with this
245:17 - then is absolutely fine so I just showed
245:19 - you like you can fix the number on top
245:22 - when you scroll down the page so as soon
245:24 - as I remove this fixed top fix top so
245:27 - what I observe when I refresh this okay
245:30 - so number is looking on the top but as
245:33 - soon as I scroll it disappears so you
245:35 - can choose the functionality to your
245:37 - part if you want to use the fixed top
245:39 - additional utility of number okay so now
245:42 - we move to use dot py file so we would
245:45 - add a try except block
245:47 - try
245:48 - if this is successful and accept
245:52 - okay so this is fine so what we are
245:54 - going to do we are taking an answer is
245:57 - equal to eval
245:59 - a Val is an inbred is an inbuilt
246:03 - function in Python which takes a string
246:05 - as a string as a mathematical equation
246:09 - then evaluates it and returns an uh
246:12 - basically uh uh answer to that
246:15 - mathematical equation okay so what you
246:18 - can do answer is equal to a Val Q then I
246:23 - would Define my dictionary
246:25 - my dictionary
246:29 - so basically the queue would remain the
246:31 - queue
246:32 - okay and the uh answer would be the
246:35 - answer
246:37 - and if this operation is successfully if
246:39 - this tribe block gets executed so I
246:42 - would say error
246:45 - is false
246:47 - okay so this should work fine till now
246:50 - and if uh if uh uh what I can do if if
246:57 - this is true like what I mean to say if
247:00 - this operation is successful then I
247:03 - would return
247:04 - so render
247:06 - return render request
247:11 - then index.html
247:16 - and then I would context
247:20 - is equal to my dictionary
247:22 - okay if this is true then uh till till
247:27 - the time being I would say pass is equal
247:29 - to uh I would try to add a pass
247:32 - statement to the accept block because it
247:33 - was showing an error because uh so this
247:36 - should work fine okay uh now what I can
247:39 - do if this is true then this should
247:43 - work fine okay then uh like I'll move to
247:46 - my index.html this is a navbar navbar
247:50 - okay fine yeah so this is the container
247:52 - fluid so Dave
247:54 - plus is equal to rho
247:57 - then div class is equal to call MD
248:02 - six
248:05 - uh style would be margin Auto zero style
248:09 - will be margin
248:12 - 0 Auto
248:14 - okay so if this okay what I can do
248:19 - percent if error so basically
248:24 - per person if error because I am trying
248:27 - to say if error means if error was true
248:29 - so it would show the error okay so if
248:32 - true then I would do something else if
248:35 - it error is fault I mean there is no
248:37 - error then I would use else part
248:41 - to show the result then
248:43 - I would end this end if I would end this
248:48 - if else equation with NF tag
248:51 - okay this is uh this looks good okay so
248:55 - person end if if error percent else okay
248:58 - good so
249:00 - what I can do uh alert I'll move to the
249:03 - alert and I'll copy this and if this
249:06 - isn't
249:07 - error okay
249:09 - so what I can do I'll quickly
249:13 - if error
249:17 - sorry
249:20 - there is an error yes
249:22 - or you can simply type sorry error error
249:26 - is fine
249:27 - strong
249:29 - and to do this uh you would use Alert
249:32 - warning not alert Danger
249:35 - okay
249:36 - and in the else part you need to show
249:39 - that if that result was successfully so
249:43 - I'll copy this
249:47 - okay and I'll use alert alert success
249:54 - so first we are going to test our
249:56 - application
249:57 - so uh we'll move to the page I'll
250:01 - refresh this
250:02 - okay so first
250:06 - okay so there is some issue here with
250:09 - the
250:10 - okay
250:17 - div class is equal to
250:20 - alert
250:22 - okay that class is able to call md6
250:31 - okay I need to check this like if error
250:37 - yes
250:39 - yes okay I'll move this equation here
250:48 - okay there if Clause will call md6 yes
250:52 - and here is the row yes
251:00 - yeah now this is absolutely working fine
251:02 - and error is showing me in green color
251:04 - let me check this
251:07 - okay yeah okay okay okay because this
251:10 - was answer okay
251:17 - yeah okay
251:20 - okay so let me go with this two plus
251:22 - three
251:24 - yeah two plus three is five so this
251:27 - looks fine okay so yes uh two plus three
251:30 - is equal to five so let me do perform
251:32 - some mathematical equation two plus
251:33 - three star four
251:37 - teen okay yeah this is good
251:40 - good and let me Define some equation uh
251:44 - let me do 2 plus
251:46 - 3
251:48 - divided by
251:50 - 2 like this would divide it to 5 then 5
251:52 - divided by 2 2.5 this should return 2.5
251:54 - yes but if I do the same equation with
251:57 - the flow division
252:00 - that is 2. okay uh we can try some more
252:04 - mathematical operations like 2 to the
252:07 - power
252:08 - three
252:10 - yeah this is eight so what you can do so
252:13 - like here you can add
252:16 - add this like double star
252:20 - for exponential
252:23 - exponential
252:27 - like you can add this
252:30 - double star for exponential
252:33 - okay and in the same way you can add
252:40 - modernist
252:42 - modulus as well
252:46 - mod
252:47 - so this would uh like this sort of mod
252:50 - operation okay uh so basically mod
252:54 - operation is to to get a uh you can I'll
252:57 - quickly perform more operation like this
252:59 - is
253:03 - 10 modulus
253:06 - three so it should give one I guess yes
253:09 - this is one so absolutely correct so
253:11 - like I would quickly explain this uh so
253:14 - uh like we added exponential operator as
253:16 - well quickly explain uh five double star
253:20 - five
253:21 - so and then minus 2.
253:25 - so this is 25 uh okay I'll pack it
253:30 - quickly put places here
253:33 - so this is 25 minus 23
253:36 - huh
253:37 - now there might be some error
253:41 - 5
253:44 - okay okay I made a mistake I'm really
253:45 - sorry for that that was 5 to the power
253:48 - five if I'm not wrong that is 5 to the
253:50 - power 5 then minus 2 okay so the 5 to
253:53 - the power 5 was
253:56 - 3125 then minus two return three one two
253:58 - three basically what I meant was 5
254:00 - Square so that was 5 put a double star
254:03 - two
254:04 - minus 2 that is 5 square is 25 minus 2
254:07 - is 23. so basically we are tested with
254:09 - the application and one thing I would
254:10 - show then as soon as I type 1 divided by
254:13 - 0
254:14 - uh this is an error so it should return
254:16 - me an error so it returned then return
254:20 - an HTTP response object so we'll go to
254:22 - the use.py file so so we'll continue
254:25 - this my dictionary
254:29 - have error
254:32 - is equal to
254:33 - true
254:35 - okay and in the same way
254:39 - my dictionary of error
254:42 - is equal to true
254:44 - so what you can do
254:46 - or you can define a new dictionary here
254:49 - error
254:51 - is true
254:53 - and I should return the same page with
254:56 - the context result to my dictionary
254:59 - yes so I have now now I will go back to
255:02 - the page now 1 divided by 0 yeah now
255:05 - this works absolutely fine that 1
255:07 - divided by 0 was an error so it wrote
255:10 - threw me an error okay then again there
255:13 - is an issue with the front end part so
255:15 - let me check
255:19 - if plus is equal to yes
255:25 - new class if error
255:32 - okay if error there's an error on this
255:35 - front end
255:36 - on the front end part let me check
255:58 - okay
256:04 - then I will show this is a div
256:08 - okay
256:12 - so this difficult to call MD and this
256:14 - due to ends to row
256:16 - okay if this error then you display this
256:19 - row
256:19 - else on the else part what we can do
256:25 - div class is equal to row
256:29 - okay good
256:32 - then again I'll Define
256:36 - sorry sorry
256:39 - Dev class is equal to call md6 yes
256:46 - yes now I would close this day
256:49 - okay this is a div
256:51 - now this is a div to the call and
256:54 - another tip to the row
256:58 - and this is the container
257:01 - this should not be true container fluid
257:05 - yes now I will move to the page
257:09 - yeah now this is absolutely looking fine
257:11 - now one divided by zero so we'll quickly
257:13 - test the application
257:16 - one divided by 0 error yeah down the
257:18 - front end is good uh and quickly two
257:20 - plus three is equal to five
257:23 - yeah two plus three is equal to five
257:25 - and this is on the left okay let me
257:28 - check
257:29 - let me check
257:30 - this is a call md6
257:33 - hit error
257:35 - okay
257:37 - okay
257:40 - let me move this
257:50 - okay let me click on inspect
257:52 - inspect I I am this call md6 margin 0
257:57 - Auto
257:59 - okay let me change the view
258:06 - edit
258:07 - I'll add a laptop screen
258:14 - yeah this is working fine this is now
258:16 - this is I'm inside the row call is root
258:17 - mb6
258:19 - child is equal to margin 0 Auto
258:25 - yes
258:26 - okay okay okay okay yes
258:28 - type is equal to margin 0
258:32 - Auto
258:33 - so
258:35 - yes now this should work okay we'll
258:37 - quickly two plus three is equal to 5
258:39 - well we'll type uh two plus three star
258:42 - four
258:43 - 14 are good now 1 divided by 0
258:46 - error so basically you need to tackle
258:49 - errors when the because now we are
258:51 - completely done with the application
258:52 - here you can see like we get a error on
258:55 - evaluating on when we put 0 as an input
258:58 - uh let me type 1 minus 1
259:01 - uh this should yeah return zero now
259:03 - absolutely absolutely fine so let me
259:06 - type some random words like something
259:08 - something has random and what does it
259:11 - show so that shows an error as well okay
259:13 - on random input so basically you can put
259:16 - numbers like uh you can put Google put
259:18 - numbers then reset it okay then again
259:21 - put numbers then submit here then 14
259:24 - then 1 0 it will show error yeah on
259:27 - random text on random text it would also
259:31 - show error so guys you are completely
259:33 - done with our application so thank you
259:34 - guys thank you so much I'll catch up in
259:37 - the next lecture so basically the error
259:39 - on the front end part how I resolved it
259:41 - I'll quickly if there was an error so I
259:44 - made a new row particular Row for that
259:47 - okay so it and the call md6 was on the
259:50 - margin 0 Auto Center and if there is no
259:53 - error so I would return the answer and
259:56 - in the same way
259:57 - what you can do you can simply add
260:01 - Q
260:03 - is equal to this so basically this would
260:05 - return the query as well so so we can do
260:09 - two plus three
260:11 - yes so here it says 2 plus 3 is equal to
260:13 - 5 so so this is absolutely correct so
260:17 - yeah now this looks application looks
260:20 - pretty good so you can try out the front
260:22 - end part so just just try to will also
260:25 - try the responsive nature of this app as
260:27 - well so I have now Ctrl shift I uh okay
260:31 - so basically I'll try something
260:33 - 2 double star 3
260:37 - okay
260:38 - so 2 double star is equal to 8 yeah so
260:41 - guys this is absolutely fine so thank
260:42 - you guys thank you so much I'll catch up
260:44 - in the next lecture so I have to uh
260:46 - added some exponential as modulus
260:48 - operator you can try out some modulus
260:50 - operator that 10 mod 5
260:53 - 10 mod 5 so this should be zero
260:56 - yes so thank you guys thank you so much
260:58 - I'll catch you in the next lecture so
261:00 - thank you so much
261:02 - hello everyone so like uh hello everyone
261:04 - I saw an error in this application like
261:06 - when we go to the index page without any
261:09 - query submission I see a equal to sign
261:11 - so actually this equal to sign is
261:13 - basically to do to this else part so we
261:16 - need to create a just a little bit
261:17 - different logic so what you can do uh we
261:20 - can do we will move to views dot POI
261:22 - file and here we can do result
261:25 - result
261:27 - is equal to true
261:30 - okay yes and I'll quickly copy this and
261:33 - in this part I will do result if if the
261:36 - error the error is false then resulted
261:38 - should true it will error is true then
261:40 - result should be false okay good now I
261:43 - would move to my index.html page so I
261:46 - would
261:47 - if this condition with an end a person
261:49 - end if
261:51 - and I would give this else part as if
261:55 - result okay
261:57 - so this is this looks good and this
261:59 - would a wider error so I'll quickly test
262:02 - my application when I move to the index
262:04 - page
262:05 - yes now the equal to sign has gone now I
262:08 - would query two plus three is Rule to
262:09 - submit yes 5 is good then 1 plus 0 then
262:13 - error should be there yeah but when I
262:15 - move to the index page
262:18 - when I move to the index page so there
262:20 - is no equal to sign so so this is the
262:22 - GitHub link of our repository you can
262:24 - move to this project download this
262:25 - project uh uh I've defined all the
262:28 - instructions and I would be updating the
262:30 - instructions soon because now we are
262:31 - going to working on a new app and
262:34 - basically we are going to work in the
262:35 - same repository so basically I wanted to
262:37 - do this because we are going to make
262:39 - inside a single Django project we are
262:41 - basically going to develop two apps so I
262:44 - would Define few changes how you can use
262:46 - two apps inside a single project so main
262:50 - motive would be it because we would be
262:51 - using the same template and I would tell
262:53 - you how you can use the same template
262:55 - and defining the other backend part so
262:58 - this how this way how you can use the
263:00 - basic template which we used in our
263:03 - previous app in this app as well and I
263:04 - would defining which changes you have to
263:06 - do so this would help you out so let's
263:09 - get started so basically in this we are
263:11 - going to design a Django voting app so
263:13 - in this app we have a a list of
263:16 - programming programming languages which
263:19 - the user in in that we would provide
263:22 - real-time suggestions under the search
263:24 - like suppose any user
263:27 - attacks the letter J then we would
263:30 - provide them suggestions the programming
263:32 - languages starting with the letter j
263:33 - such as Java or JavaScript or same in
263:36 - the if we type P then we would have p is
263:39 - the like Perl programming or programming
263:41 - language python so in this like COC
263:44 - stands for C and C plus plus so we will
263:46 - be providing suggestions like in the P
263:49 - we could also Define a suggestion under
263:50 - PHP as well so like in this tutorial we
263:53 - are going to create a voting app we are
263:55 - going to start with this and we vote for
263:57 - each programming language then we use a
263:59 - progress bar that how many words they
264:01 - have got and we then would return or
264:04 - render a progress progress bar on the
264:07 - front end part and we would update the
264:09 - vote for each language if we vote for
264:11 - more okay
264:12 - so let's get started with this so
264:15 - basically uh this is my server so the
264:18 - server has started okay because I have
264:20 - so basically I would Define some some
264:22 - few changes like this is my settings.py
264:26 - file so uh earlier it was template slash
264:29 - calculator app but now it is voting app
264:31 - because we would be referring to the
264:33 - templates folder so I would move to the
264:35 - templates folder yeah this is the
264:38 - templates folder so it it has two
264:40 - folders the one is this for calculator
264:41 - app and another is for voting app so we
264:44 - are referring to the voting app folder
264:47 - inside the templates so uh for the
264:49 - earlier app we used to refer calculator
264:51 - app so you need to define a change
264:53 - calculator app if you are using
264:54 - calculator app and then if you are using
264:56 - voting app then you need to win voting
264:58 - app so basically what we did we created
265:01 - the same HTML page okay now uh then for
265:05 - calculator app if you want to use then
265:07 - we need to define template slash
265:09 - calculator app if we are going to run
265:12 - the calculator app okay and if you want
265:14 - to run the voting app we need to define
265:16 - template slash voting app okay so this
265:19 - is the main uh change we need to Define
265:22 - so the please take care about it and I
265:24 - will Define this in in the repository
265:26 - instructions as well okay and then next
265:28 - okay now we'll move to urls.py file okay
265:32 - uh let me do one thing urls.py file of
265:36 - Django projects
265:37 - okay so basically uh when I do okay uh
265:43 - uh so uh this is calculator app so
265:46 - include calculator app dot URLs so for
265:49 - voting app we will do voting app include
265:51 - voting app dot URLs this is very simple
265:54 - okay so basically in the same way I'll
265:56 - give give a quick overview for templates
265:58 - we have templates folder let me again
266:01 - show you the templates folder yes
266:02 - templates for calculator app templates
266:04 - for voting app then urls.py file for
266:07 - calculator app as well and voting app as
266:09 - well okay
266:10 - now we will move to urls.py file so
266:14 - basically I'm clicking on new rs.pi file
266:16 - voting app okay so this is very similar
266:19 - we have done this as earlier as well so
266:21 - like we have uh like URL pattern path
266:25 - views dot index name is equal to index
266:27 - now if I go to views dot py file so I'll
266:30 - move to the views.py file or voting app
266:32 - okay
266:33 - so you uh this is a backend logic group
266:36 - to also working on okay uh so before
266:39 - this what we can do so this is the index
266:42 - so we can uh what we can do
266:45 - uh we need to generate a let me do one
266:49 - thing or we can do what we can do I'll
266:52 - run the server okay
266:57 - and then I'll move to voting
267:01 - app
267:04 - yeah here you can see uh like this is
267:07 - Django voting app Okay and like I've
267:11 - defined few changes I'll move to
267:13 - index.html file so basically when I'm
267:15 - moving to index.html file I'm moving to
267:18 - the voting app okay so this looks fine
267:21 - okay so I changed the title Django
267:23 - voting app I will find as Django voting
267:26 - app
267:32 - I'll move to the about and instructions
267:34 - so pick your favorite language okay
267:37 - so you need to Define in this and pick
267:40 - your favorite favorite language and vote
267:42 - okay
267:43 - and vote
267:45 - okay this is very simple then select
267:47 - your language and see result this is a
267:49 - basic instructions okay in the Napper I
267:52 - Define some changes you can see like in
267:55 - the nav class navbar Doc and background
267:57 - is dark so here you can see this navbar
268:00 - dock refers to this and background
268:01 - diagram and show this color so here you
268:03 - can see the number has been dark in
268:05 - color so to see the response in nature
268:08 - we can press Ctrl shift I okay
268:11 - okay so here you can see it's good okay
268:13 - we have the nav bar so it's working fine
268:16 - so in the about pick your favorite
268:17 - language select your language and see
268:19 - results okay so in this next like uh so
268:23 - basically uh we are going to Define uh
268:26 - and one thing we need to make sure that
268:28 - uh that in the form
268:31 - uh I had defined uh the image like I'm
268:34 - referring to the static folder okay let
268:36 - me go to the static folder this is
268:37 - main.jpg okay and this is main2.jpg okay
268:42 - so
268:43 - so basically in main.jpg this was
268:46 - referring to the calculator app and this
268:48 - is main2.jpg and this is referring to
268:51 - this coding background structure okay so
268:54 - basically so like uh and the good part
268:57 - is that index.html still exists
269:01 - so this is the index.html of calculator
269:03 - app so this is uh this is the index.html
269:07 - of calculator app and this is the all
269:08 - logic we had written if error if and
269:10 - result okay and here you can see here
269:13 - you can see the nav bar is equal to I
269:16 - can show you one thing the navbar light
269:18 - and never background is light that this
269:20 - is for the calculator app Okay and like
269:22 - in this uh uh even the image we had made
269:27 - also that was main.jpg so here I can try
269:30 - to show the similarities between that
269:32 - under the same rank of project we are
269:34 - making two apps and basically I wanted
269:36 - to show you one thing that we are using
269:38 - the same template for both the apps
269:40 - without writing the code as much and
269:43 - just making the modification Necessities
269:44 - we need it okay so this is also good so
269:47 - basically I'll just a quick hint like if
269:50 - we want to use calculator app you need
269:51 - to define template slash calculator app
269:54 - here okay so very quick overview the
269:56 - templates calculator app is there and uh
269:59 - the same way templates voting app is
270:00 - there and then both of them have
270:02 - index.html index.html one has a
270:04 - different image one has another image
270:06 - and background dark and background light
270:08 - for different respective nav bars what I
270:11 - have defined so in order to run the
270:13 - respective ad what you need to do uh you
270:15 - need to define template slash calculator
270:17 - app when you are going to run the
270:18 - calculator app and templates are
270:20 - floating app when you are going to run
270:21 - the voting app so let me very clear with
270:23 - this so it doesn't create an issue
270:26 - okay so basically what I wanted to do is
270:29 - I want you to solve uh to get uh further
270:34 - like a move on with the back end part
270:37 - also because we are going to use this
270:39 - ready-made template which is help us in
270:40 - the front end time I want you to solve
270:42 - one coding problem here because this
270:44 - will help you to make a backend logic so
270:47 - I'll type Ctrl n like you have an array
270:50 - okay and it has all the elements uh like
270:54 - it can be any elements one two two comma
270:59 - three comma three comma three or
271:01 - something like mixed numbers as well or
271:03 - like four comma four comma four
271:06 - okay okay it might not be necessary it
271:10 - is sorted I'll I'll give the seven two
271:12 - one three four five six okay okay uh
271:17 - what I can do this is the array okay
271:20 - I'll copy this
271:22 - okay I'll open the page
271:27 - okay sorry sorry
271:29 - I'll open the ideally yes okay so this
271:32 - is the array so what I want you to do
271:34 - like uh I want you to uh get the uh
271:38 - frequency of each element okay so like
271:42 - uh what I want to tell you that if I do
271:44 - array
271:45 - dot count
271:48 - one okay so it returns three like three
271:51 - one is three times this is a one this is
271:54 - a one this is a one so three times three
271:56 - so like but I want you to do like uh uh
271:59 - like what I want you to do like
272:01 - basically I want you to design a data
272:03 - structure in such a way because this
272:05 - this is very necessary which sources
272:08 - frequency of each element in like a
272:12 - frequency of each element of the array
272:14 - it stores in itself so you want to
272:16 - design a data structure so so I would
272:20 - give you a hint
272:21 - like in this tutorial what you can do
272:23 - you can define a dictionary as a data
272:26 - structure in which a key
272:30 - will be
272:32 - element
272:35 - of array okay good and the value
272:40 - will be
272:42 - frequency
272:45 - okay so it might not be necessary that
272:48 - array should be sorted or unsorted it
272:50 - could be anything random number sorted
272:52 - unsorted that is not the case of and if
272:55 - a new element is added to the array you
272:58 - should update the frequency okay so then
273:01 - update the frequency
273:06 - update the frequency okay so you need to
273:08 - Define like uh when you Traverse the
273:10 - array for or till the time you can do
273:12 - one thing you can uh you can be like
273:15 - familiar with this or this is your array
273:18 - you need to define a data structure
273:20 - which would I am giving you a hint that
273:21 - you need to define a dictionary
273:23 - okay dictionary okay so dictionary is
273:26 - the data structure you are going to use
273:27 - so so basically key will be the element
273:30 - of the array and value will be the
273:32 - frequency so you need to find in such a
273:33 - way okay so you can think on this
273:36 - problem because this problem is very
273:38 - necessary for us to think on the back
273:40 - end part okay until time what we have
273:43 - seen like uh like images being changed
273:45 - about change and information okay I'll
273:48 - update the information part ahead okay
273:50 - like when I click on instruction this or
273:52 - instructions part I'll move to this and
273:54 - about working fine okay and uh I've
273:57 - changed the image as well as number so
273:59 - uh one instruction important instruction
274:02 - in order to use a calculator app you
274:05 - need to change here template starch
274:07 - calculator app and temperature template
274:09 - slash calculator app for calculate app
274:11 - and template slash voting app for the
274:13 - voting app okay in order to run the
274:15 - respective apps okay so till now we are
274:17 - working on voting app so we have defined
274:18 - temperature slash voting app so I'll
274:20 - catch up you in the next tutorial so
274:22 - like in the previous this tutorial we
274:24 - were working on uh like uh we were going
274:27 - to make a voting app so basically I gave
274:30 - a coding problem in the end so basically
274:32 - in this we are going to solve a coding
274:33 - problem and adding list uh list of
274:36 - programming languages and batches to our
274:39 - front end so we will check this out so
274:41 - just uh let's get started with this so
274:44 - basically I told you that you can work
274:46 - with the uh basically I gave you a
274:51 - coding problem in which I told you that
274:53 - you can create a like in which I told
274:56 - you that you can find the frequency of
274:58 - each each element in the array so let's
275:01 - solve that problem because I told you
275:03 - that's very necessary to solve the
275:04 - problem because it will help you to
275:06 - create a uh backend logic so basically
275:09 - let's start with this so basically I
275:11 - have an array so what you can do I have
275:15 - elements in it like Let It Be random
275:17 - elements 56 89 1 2
275:21 - 7 9 6 6 2 3 1 4 5 6
275:29 - 8 9 9 9 then 5 54 then again 56 then
275:35 - again 89 let it be a wrong array because
275:37 - it will help you to get the logic clear
275:39 - then seven then one again two okay so
275:43 - this fine this is fine so what I need to
275:45 - Define I need to find the like in the
275:48 - key part I I told you that we will be
275:50 - designing a data structure such that the
275:52 - key would be having the element the key
275:55 - should be
275:56 - element
275:59 - and the value
276:02 - should be
276:04 - frequency
276:07 - frequency of element
276:10 - frequency of element so basically uh
276:13 - what I mean by frequency of element that
276:16 - in this you need to find the frequency
276:19 - of each element okay so the the K should
276:22 - be element and the value should be
276:24 - frequency of of element
276:27 - present
276:29 - present
276:30 - in that array okay
276:34 - so I'll Define a dictionary first so
276:37 - my dictionary
276:42 - so so I can initialize the dictionary
276:45 - with this infrastructure you can
276:46 - initialize any data structure let it be
276:48 - a list
276:50 - set
276:51 - Str you can Define any data structure
276:54 - like this so this is very helpful so
276:56 - this is a dictionary my dictionary okay
276:59 - then I would Traverse the array
277:02 - part
277:03 - element
277:06 - in Array okay
277:09 - okay if
277:11 - if element
277:14 - not in
277:17 - my dictionary okay
277:19 - dictionary
277:22 - then you would initialize that frequency
277:26 - of like you have found that element and
277:30 - now that is not in dictionary then you
277:32 - need to initialize the first two
277:33 - frequency that the very first frequency
277:37 - you get that element okay okay then if
277:40 - element not in my dictionary then my
277:43 - dictionary
277:46 - my dictionary then here the key would be
277:49 - the I told you I told you as earlier the
277:52 - key would be element
277:55 - is equal to 1 else
278:00 - now as as soon as you keep on getting
278:03 - the element you need to update the
278:04 - frequency
278:06 - my dictionary this will be plus equal to
278:09 - 1 okay this is absolute line for element
278:11 - and array if element not in my
278:13 - dictionary if you uh if you find the
278:16 - first occurrence of that element you
278:18 - need to initialize the frequency with
278:19 - one
278:20 - else my dictionary of element plus is
278:23 - equal to one uh in this I would add a
278:27 - comment okay
278:28 - first
278:30 - occurrence
278:32 - initialize
278:35 - frequency
278:37 - with
278:39 - one
278:41 - okay
278:42 - as
278:43 - put every
278:46 - next
278:48 - occurrence
278:51 - update
278:52 - frequency
278:55 - I hope this is very clear for every next
278:57 - occurrence update frequency okay so this
278:59 - is good now
279:01 - now what you need to Define
279:04 - then what you need to Define then I will
279:06 - Define print
279:08 - star
279:09 - array so this is a very short notation
279:11 - by prints are arrogant print the
279:15 - elements of the array space separated
279:17 - okay
279:19 - and then
279:21 - uh well I'll do one thing I'll do
279:24 - one thing
279:26 - one thing I'll do one thing or to have a
279:28 - better View
279:31 - I'll print
279:32 - array dot sort as well Harry dot sort
279:36 - okay good and print my dictionary
279:42 - I hope there is no error so I can run
279:45 - this
279:47 - okay and now this is awesome okay uh let
279:50 - me do one thing uh let me do one thing I
279:53 - check uh let me do one thing I'll print
279:55 - the array again but this time I'll do
279:58 - add a DOT sort
280:00 - okay so what you can do so I'll press F5
280:04 - so here you can see so I have my array
280:09 - here
280:10 - okay
280:11 - and now
280:13 - sorry for the interruption okay okay
280:16 - there's some issue yeah no it's fine
280:19 - okay so this was our array so then when
280:23 - I sorted the array it looked this so
280:25 - like here you can see the one has
280:27 - frequency three so here you can see the
280:29 - one has frequency three okay good okay
280:32 - now this is this is fine one has
280:34 - frequency three then two has frequency
280:37 - three times so let me check two two
280:39 - where is the two two as frequency three
280:42 - good let me take a very random element
280:44 - so here it is nine so let me check the
280:47 - frequency of nine nine one time then
280:50 - second time third time fourth time okay
280:54 - I hope nine is four times okay now when
280:57 - I see the sorted list because I have
280:59 - defined a sorted list in order that you
281:01 - grab easily nine nine nine nine nine the
281:04 - nine is four times so 9 is occurring
281:07 - four times so this is fine okay so this
281:10 - was your many main very good backend
281:12 - logic this is a very same same
281:14 - background logic we are going to do when
281:16 - we are working on the backend part so
281:19 - basically I totally like here you can
281:20 - take any array okay and uh you can
281:23 - Define the frequency like five is
281:25 - occurring two times yes five is
281:26 - happening two here one is this time 5
281:28 - and 5 that means she's checking sorted
281:31 - array yes five is happening two times F5
281:33 - is two times so this was our RF data
281:36 - structure we made to in which the
281:38 - frequency is updated and we store the
281:41 - frequency so like here we have this time
281:43 - we have used the area of integer next
281:45 - time we are using an array of
281:46 - programming languages okay so this would
281:48 - help us to make a back-end part or logic
281:51 - so what we can do so I have moved to my
281:54 - server so we are done with the coding
281:56 - problem I hope you all all have got this
281:59 - so basically I hope you can change any
282:02 - values in the array okay and uh try out
282:05 - uh try this out okay this would
282:07 - basically help you out okay so so good
282:10 - so so
282:12 - then again we can see any answer then
282:15 - suppose like we can look for 89 which is
282:18 - occurring twice yeah 89 here it is twice
282:21 - occurring twice and we can see in the
282:23 - original RS 89 and 18. so absolutely
282:27 - works fine so let's get to our server so
282:30 - I'll do python manage.py run server yes
282:33 - okay so I'll move to my voting app I'll
282:37 - refresh this page okay so what we can do
282:40 - uh
282:42 - we can add batches here so here you can
282:44 - see there are basically different kind
282:46 - of batches so one is batch batch primary
282:48 - one you can use any batches so let me do
282:51 - this one batch batch success okay so
282:56 - I'll move to the about the section
282:57 - index.html so basically uh the I'll
283:01 - close the uh okay index.html or reverse
283:04 - or calculator app now now this was the
283:05 - voting app so let me be very clear with
283:07 - this so we can Define and here what you
283:10 - can do
283:12 - instead of class display flow display
283:14 - for 4 you can paste this
283:18 - and go to our
283:21 - yeah here you can see this is working
283:23 - fine and let me do some editing here
283:27 - so let me do add text is equal to margin
283:30 - zero Auto yes
283:34 - command zero Auto display
283:37 - block yeah good
283:41 - so here you can see the about has been
283:43 - uh I will try to make it a more
283:46 - intuitive so here you can try what I can
283:49 - do what I'll do I'll move to Style part
283:52 - and display
283:55 - is able to block
283:57 - okay and I'll add some font size
284:01 - font size is equal to 2 RAM
284:05 - I think this should be good
284:08 - yes good yeah here I've added about so
284:12 - so here you can see even in our app you
284:14 - can see about okay in the same way I can
284:16 - use the uh like something very good uh
284:20 - with any batch on a color batch I can
284:22 - use Danger
284:25 - good okay but what I need to do
284:28 - I'll Define
284:31 - P class is equal to
284:35 - okay select your select your language
284:38 - and see results so basically I will
284:40 - display
284:47 - uh what I can do I'll quickly copy this
284:49 - instead
284:51 - and yeah word
284:54 - batch batch Danger
284:58 - okay uh this just for the uh
285:01 - instructions I'm doing the ins this was
285:04 - instruction parts so let me go to the
285:06 - page
285:07 - yeah awesome pretty good so this is like
285:10 - about instructions so we are getting
285:12 - giving some more uh intuitive UI design
285:15 - to our app so basically and one thing
285:18 - you can do one that I have created a
285:20 - list of programming languages I'll give
285:22 - it a name as any this is a list till now
285:26 - so I have declared this list and uh I'll
285:28 - next time what you can do I'll find this
285:31 - as array okay good so this is a very
285:34 - long list of programming languages and
285:37 - I'll render them okay so I quickly show
285:41 - you how you can render then my
285:42 - dictionary
285:45 - foreign
285:55 - context
285:58 - is equal to my dictionary good
286:00 - dictionary absolute spelling is right so
286:04 - what I'll do on the top of the page uh
286:06 - just below the body I'll print this
286:09 - array
286:12 - okay so I'll move to my page desktop
286:15 - view Control Star
286:19 - okay let me check some yeah here you can
286:21 - see on the top of the page here you can
286:23 - see the array is there so next time we
286:25 - will so just I wanted to show you that
286:26 - we can render this array and next we
286:28 - would be working on the uh suggestions
286:31 - or also how we can provide real term
286:33 - real-time suggestions so we will like
286:35 - either we are going to provide on the
286:37 - front-end part or on the back end part
286:39 - so we'll try to what we will figure it
286:41 - out what we how we can provide
286:42 - suggestion so I've defined all the
286:44 - instructions uh but today I would like
286:46 - to make this instructions very clear
286:47 - like you can download or clone this
286:50 - project uh on by clicking on this button
286:52 - then you can run the command pip install
286:55 - minus r requirements.txt make sure you
286:58 - you have installed python on your
286:59 - machine and it has to be added to the
287:01 - path Okay then if you move to the
287:03 - requirements.txt file so here you get
287:06 - get this requirements these are very
287:08 - basic requirements you get it installed
287:10 - on a machine then you can then then what
287:12 - you can do then you can run that one
287:14 - python manage.py run server so this is
287:17 - the management.py file you need to be in
287:18 - this Direct tree to run the project okay
287:20 - good then basically there are two apps
287:23 - in this so basically if you want to run
287:26 - the calculator app you need to open this
287:27 - link but you need to make a simple
287:29 - change in the settings.py file I'll
287:32 - Define what you need to make a change
287:34 - basically you need to go to the
287:36 - settings.py file the Django projects and
287:39 - again Chango projects this is the
287:41 - settings.pify file and
287:43 - there is a templates yeah templates so
287:46 - inside the templates you need to change
287:47 - this line directory is OS dot dot part
287:50 - dot join page directory template slash
287:52 - voting app if you want to use the voting
287:54 - app then or or calculator app that is
287:58 - template slash calculator app if you
288:00 - want to use the calculator app okay so
288:02 - this look this looks good so yeah uh so
288:06 - these are the instructions you need to
288:07 - do okay so calculator app a voting app
288:10 - okay basically you need to change that
288:12 - line according to this then you can
288:15 - start with the app okay uh now uh today
288:18 - in today's tutorial what we are going to
288:20 - learn so basically we are going to
288:22 - adding uh adding suggestions during the
288:24 - search bar okay in this tutorial we will
288:27 - add list of programming language as
288:30 - suggestions a list of programming
288:32 - languages okay as suggestions to a
288:35 - search bar we will be we will implement
288:37 - this both statically and dynamically so
288:40 - in today's tutorial we are going to
288:41 - first do it static then we'll also do it
288:45 - dynamically also so so I'll show you the
288:48 - difference why we need to uh do this
288:51 - okay so this is the viewers.py file make
288:54 - sure you uh get this line from
288:57 - django.http import Json response or HTTP
289:00 - response okay so let me Define a
289:05 - function get query Define get query
289:10 - which takes a request as a parameter
289:13 - request
289:15 - as a parameter then Q is equal to
289:18 - request
289:20 - Dot
289:22 - get
289:26 - request.get yes then return
289:31 - HTTP response of queue so I have left
289:35 - this blank okay so what you need to do
289:38 - well what you need to do you can move to
289:41 - the us.py file
289:44 - and Define path
289:46 - is equal to get
289:49 - query
289:51 - then views Dot
289:54 - get query
289:55 - and the name is equal to get query
290:00 - so basically you will Define get query
290:03 - okay good so now this this is our form
290:07 - okay so we have not defined the action
290:10 - we can Define the action
290:13 - percent URL
290:15 - get query
290:18 - so this looks good so
290:21 - yes good so uh yeah now this is our form
290:26 - so basically we need to find suggestions
290:28 - during the search so we'll Define a list
290:31 - first we'll Define we'll do it
290:32 - statically so I'll tell you how uh how
290:36 - this works what the what is the function
290:38 - then uh then we will implement this
290:40 - dynamically so I'll tell you the
290:42 - difference why we should what is the
290:44 - difference of doing it statistically and
290:46 - dynamically so yeah here you can define
290:49 - a data list okay and you can give ID if
290:54 - you go to languages
290:57 - I hope this is fine so you can Define
291:00 - option
291:01 - value is equal to python
291:05 - okay uh
291:07 - okay you can have a option uh for the
291:11 - Simplicity I'll have a single right now
291:14 - I'll do this way option value is equal
291:16 - to python then
291:18 - what we can do
291:20 - option
291:23 - values go to python uh we can do
291:27 - PHP as well
291:29 - good right
291:31 - then
291:33 - uh we can do option option values would
291:36 - PHP then option value is equal to perl
291:39 - good
291:41 - then option value is going to pull then
291:44 - optional values will do let me have a
291:45 - programming
291:48 - okay good
291:50 - uh then
291:52 - I'll do one thing option value is equal
291:54 - to C
291:58 - C
292:00 - good
292:03 - then in the same way I'll do C plus plus
292:06 - okay
292:07 - uh then you can click on format document
292:10 - so you can right click on format
292:12 - document to get the HTML page on the
292:14 - right track
292:15 - okay then so this is the option value is
292:18 - equal to C plus plus
292:20 - uh
292:21 - and then uh I'll show you one thing let
292:24 - me type one more option as well the Java
292:28 - JavaScript
292:33 - JavaScript you're good
292:35 - and one more option I'll do that is Java
292:40 - yeah good so format document yeah good
292:43 - so basically uh this is the data list we
292:47 - have to Define but we need to track this
292:49 - data list to an input so we'll Define
292:51 - input
292:53 - list
292:56 - is equal to languages
292:59 - okay
293:01 - so basically yeah uh and we can Define
293:05 - class is equal to form
293:09 - control so this is a bootstrap class
293:11 - okay and I'll refresh this page
293:14 - yeah good so this looks good and we can
293:18 - do what we can do
293:19 - uh
293:22 - let me try this style the style works on
293:26 - this let me do one and bottom is only
293:29 - one ram
293:32 - uh let me check if the style bottom one
293:36 - ram
293:37 - good
293:40 - yes the the yes the style tags works on
293:42 - the input okay so we have a list here
293:44 - let me type J here so as soon as I type
293:47 - J I get JavaScript and Java then uh I'll
293:51 - I'll let the caps lock on let me have a
293:53 - capsule then here this works fine Java
293:56 - no s
293:57 - okay uh as I type j a v a s JavaScript
294:02 - is there but Java is in there okay so
294:05 - actually this data list Works in all the
294:07 - ways like a prefix suffix of substring
294:11 - match so let me type P here here I have
294:14 - got python PHP Pearl programming but you
294:17 - must be thinking why I've got a
294:18 - JavaScript this makes a substring match
294:20 - okay so let me type
294:22 - PR I get programming pH PHP py python
294:27 - okay because there was a single p in the
294:30 - end so it makes a substring match okay
294:32 - so to make this clear what I can do I'll
294:35 - show you one example okay let me do with
294:37 - c
294:38 - C C plus plus okay let me do with this
294:40 - with the small C
294:42 - a small C matches both the C C plus plus
294:44 - okay JavaScript as well okay so this
294:47 - looks good okay
294:49 - uh so
294:51 - if the user want to select uh if it
294:54 - doesn't if they don't write anything
294:56 - they can simply click on this drop down
294:59 - arrow they'll get all the options here
295:01 - okay so let me give you one example
295:03 - option value is equal to
295:10 - Django
295:12 - python
295:14 - python yes okay
295:17 - and uh
295:24 - and one option I would give you
295:28 - machine learning
295:33 - okay so this is using python as well so
295:37 - I format the document and I'll refresh
295:40 - this page
295:41 - so I'll type python
295:43 - so okay you can see here the python
295:45 - isn't starting and here it is in the end
295:47 - so it matches the subject the substring
295:50 - prefix or suffix so here you can see the
295:54 - python Django python machine learning
295:55 - python okay so I'll click on python I'll
295:58 - click submit okay uh
296:01 - I have not defined a get query voting
296:04 - app get query
296:05 - so okay good so here
296:10 - you need to Define
296:14 - name is equal to
296:16 - languages
296:23 - okay so I'll do python
296:26 - yes language is sold to python then
296:31 - I'll Define languages here
296:35 - so this should work now this should work
296:37 - I hope
296:37 - yes now it works perfectly fine so I
296:40 - have written a HTTP response so this is
296:43 - the GitHub GitHub link of our repository
296:45 - you can clone or download this project I
296:48 - have defined below the instructions how
296:49 - you can run the project I'll quickly
296:51 - give you overview uh you can move inside
296:54 - this directory Django projects
296:57 - uh then what you can do you can prep
296:59 - install minus r requirements.txt and
297:02 - then you can run the server by python
297:04 - manage.py file run server then when you
297:07 - think you need to make sure that inside
297:09 - Django projects there is a settings.py
297:12 - file
297:13 - and you need to take care of this line
297:15 - I'll show you yes this OS dot part dot
297:19 - OS dot path dot joinbase directly page
297:22 - directory templates slash voting app for
297:25 - the voting app and if you want to run
297:26 - the calculator app you need to type
297:28 - templates slash calculator app okay so
297:32 - this like this line need to be taken
297:34 - care of and I have defined those I have
297:37 - defined these instructions uh on the on
297:40 - the uh era as well so you can have a
297:44 - look okay so let's get started with the
297:46 - today's tutorial so like till the
297:49 - previous tutorial uh we made a list of
297:51 - languages but that was starting but now
297:55 - we are going to make it Dynamic so very
297:57 - first thing we are going to do we will
297:58 - move to our views dot py file
298:01 - and uh here you can see I have made this
298:04 - array Global so that this array can be
298:07 - rendered at any context so
298:11 - we will also do that so uh first what we
298:15 - were trying to do that we have an array
298:16 - of languages and Indus index functions
298:19 - renders the array with the name array as
298:22 - well okay so we'll move to our
298:25 - index.html and there we see that when we
298:30 - move to our index.html we have a input
298:32 - list 0 to languages and data list ID is
298:35 - equal to languages so that's perfectly
298:37 - fine so what we are going to do we are
298:40 - going to use ginger template so I'll
298:42 - show you one thing
298:44 - foreign
298:46 - language
298:52 - in Array
298:55 - okay
298:56 - then we would end this for Loop
299:00 - and
299:02 - for
299:04 - okay uh the what we are going to define
299:07 - a option
299:09 - option
299:11 - value
299:12 - is equal to
299:14 - each
299:16 - language
299:18 - language uh yeah
299:22 - good so I told you that we take only a
299:25 - single option tag
299:28 - okay then we'll move to our view.py file
299:32 - and then here we would return an HTTP
299:35 - response
299:37 - of Q
299:38 - good so let me check
299:41 - uh
299:43 - Now we move to our page then we type
299:46 - Ctrl shift r
299:48 - okay uh
299:51 - we would move to the index page
299:54 - yeah this is the index page so yeah here
299:57 - you can see that we have a list of
299:59 - programming languages
300:01 - good and we take anyone like let's
300:05 - suppose we take python and then we
300:07 - submit a we get a HTTP response of
300:10 - python so that's perfectly fine so what
300:13 - we can do the so this works pretty fine
300:16 - so we can test for anyone one more
300:18 - language Let me see
300:21 - okay
300:24 - okay let me see
300:29 - C plus plus okay good so C plus plus
300:33 - also works fine
300:35 - okay and let me do one thing
300:38 - when I type P I get a PHP per Delphi we
300:42 - already discussed how this search engine
300:43 - works so uh PHP good so this even works
300:47 - okay so uh till now we were trying to
300:50 - get the HTTP response uh but now we can
300:54 - do one thing what we can do we can make
300:56 - a uh we can what we can do we want to
300:59 - store each count of the what we do so
301:04 - what we can do we can make a global
301:07 - count then we can render that Global
301:10 - count uh dictionary that Global count is
301:13 - a data structure I already will
301:14 - discussed that part in the coding
301:16 - question also as well so I would quickly
301:19 - given a a overview how this would work
301:22 - so let me define global count
301:30 - uh this was going to be a dictionary
301:32 - data structure
301:34 - okay so what I'm trying to do so this
301:38 - this is very uh this is very this works
301:41 - perfectly fine okay one thing uh I would
301:44 - like to show you before I proceed that
301:46 - uh if I press Ctrl U
301:50 - so here you can see so the the the that
301:54 - uh when we used a input let's equal to
301:57 - languages data data list ID is equal to
302:00 - languages so this was the for Loop we we
302:03 - had used here for each language and
302:06 - array option value is equal to each
302:08 - language and for so here you can see
302:10 - with the how with the with the help of
302:12 - dynamic uh template uh basically we use
302:16 - Django template so uh so what we used uh
302:21 - we got a list of option values so this
302:24 - is perfectly fine so here you can see
302:26 - that with the help of a single for Loop
302:28 - we were able to generate a much more
302:30 - better way of generating the option
302:33 - values okay so this way we could
302:35 - generate them dynamically okay so what
302:38 - we can do now we'll move to a views.vi
302:40 - file
302:42 - so if
302:46 - we'll make if condition if Q in
302:50 - Global count
302:53 - then Global count of Q
302:57 - is equal to Global count of Q
303:00 - Plus
303:01 - 1.
303:03 - okay
303:05 - else
303:07 - uh if if the queue is already in global
303:11 - round then Global count of Q is equal to
303:12 - Global count of Q Plus 1 else for the
303:15 - first occurrence okay so we already also
303:18 - discussed this in the coding question
303:20 - the way we solved it or solved it first
303:23 - occurrence
303:24 - okay
303:25 - so
303:27 - so this was this for the first
303:29 - occurrence then Global count of Q should
303:33 - be initialized with one good
303:36 - so if it's already already there then we
303:38 - plus increment the value of the of the
303:40 - word else we what we do we initialize
303:44 - for the first time we initialize it for
303:46 - four one okay so this is very good so
303:51 - let me do one thing I'll move to the
303:53 - index.html
303:54 - and here
303:57 - what we can do
304:00 - we can print this till now uh okay okay
304:05 - but we need to do one thing okay uh what
304:08 - we need to do for Q and Global count
304:10 - Global account of Q is going to go over
304:12 - count of Q Plus 1 s for the first
304:14 - sequence Global ground of Q is equal to
304:16 - one okay so here you knew that we are
304:18 - working for the first suppress and
304:21 - if already
304:25 - exist
304:28 - then
304:30 - increment the value
304:35 - if already exists then increment the
304:37 - value okay and this was the first
304:39 - occurrence okay so
304:41 - what we can do
304:43 - uh we'll create a my dictionary
304:47 - so array would be the array
304:51 - and Global count
304:55 - Global count would be the Global count
304:58 - okay good so
305:02 - so then return
305:04 - we're going to render this way in the
305:07 - same way so I could click what we are
305:09 - going to do return
305:11 - render
305:14 - requests
305:18 - index.html
305:21 - so this is index.html we are going to
305:24 - render
305:25 - and the text
305:28 - is equal to my dictionary okay
305:31 - and here
305:34 - now we have already rendered This Global
305:37 - count
305:39 - so I hope this should work now fine
305:41 - pretty fine so I would refresh this page
305:46 - so let me do a single vote so let me
305:51 - choose PHP
305:53 - so here you can see the the dictionary
305:56 - has a one count of PHP so let me vote
305:58 - for PHP again
306:00 - so we are going to test this yes the
306:03 - quote found this to
306:04 - okay let me check any other languages
306:07 - so python is there yes python now PHP is
306:11 - to python one so let me to uh uh another
306:14 - Ruby
306:16 - yes by php2 python one Ruby one so in
306:21 - the same with C plus plus
306:23 - yes good absolutely fine then then uh C
306:28 - yes good so here you can uh let me do
306:32 - then again PHP so it should be three now
306:35 - yeah now it's absolutely three okay so
306:38 - uh this is but this uh I'll quick give
306:42 - quickly give an overview of this so for
306:45 - the first reference we used to
306:47 - initialize with one then we would
306:49 - increment the value okay so this is this
306:51 - works perfectly fine but we are noticing
306:54 - that we are only printing the raw
306:57 - dictionary here but next time we would
306:58 - add try to add for Progress bar with the
307:01 - table so I would open my project so till
307:04 - now we had made uh the search bar with
307:08 - suggestions dynamically then we used to
307:11 - submit the option value and then we used
307:15 - to store the results in the global
307:17 - global dictionary so this is the global
307:19 - dictionary we have defined here and uh I
307:23 - can have a quick overview or of this so
307:27 - here you can see this is an app bar so
307:30 - what we can do
307:32 - I'll Define a global dictionary here
307:35 - global
307:38 - count
307:39 - yes so here it is global count so when I
307:42 - run my budget I'll finish this page
307:45 - and let me check yes oh my server is
307:48 - running so I'll start my server find
307:51 - then manager.py run server
307:54 - I'll refresh this page
307:57 - so here you can see my C language has
307:59 - one vote
308:00 - then Perl uh uh like PHP
308:06 - here it has one word then
308:09 - python
308:10 - one word okay
308:12 - in the same way I'll give SQL
308:16 - one vote then I'll give vote to an SQL
308:19 - another word so here it is two volts so
308:22 - in the same way we can keep on going
308:24 - with the server so this is python I'll
308:27 - submit with the so here it is two votes
308:31 - so uh this uh so this works absolutely
308:35 - fine so the next part we are going to do
308:37 - is add tables with progress bar so
308:40 - basically what we are going to cover in
308:42 - this tutorial I show you here so we are
308:45 - going to add uh add adding a table with
308:47 - progress bar now we are going to render
308:49 - the backend data to the front end with
308:51 - the table and a progress bar for every
308:53 - language we will add a progress bar as a
308:56 - measure of counter vote so the progress
308:59 - bar is going to show the measure of
309:01 - count of what so like the key will have
309:05 - a table so then the key of the
309:09 - dictionary would be the uh like the name
309:11 - of the language and the value would be
309:12 - in terms of the progress bar so let's
309:15 - get started with this
309:17 - so in the nav bar the first thing we are
309:20 - going to do is
309:22 - we are going to put a li
309:25 - class
309:26 - is equal to nav item
309:30 - okay
309:31 - and
309:32 - here
309:33 - anchor class
309:36 - is equal to nav link
309:42 - and uh what what you are going to Define
309:44 - result
309:47 - okay
309:48 - and
309:49 - we are going to Define hrf tag refresh
309:53 - tag to the width hash result
309:55 - okay so we will Define a result block
309:58 - below
310:00 - so this is the uh about tag and
310:04 - and here you can see
310:06 - uh you can also add HR tag here
310:10 - which was missing
310:13 - okay now
310:15 - what we are going to do is this is a row
310:18 - okay so we have to Define
310:21 - in the same way
310:23 - we have to Define and this is a call md6
310:25 - okay so in the same we have to Define
310:28 - this so what we can do
310:30 - so we can do in the same way div
310:34 - plus is equal to rho
310:38 - and then div
310:40 - class is able to call
310:43 - MD
310:44 - this time I will send it to the table so
310:47 - I would Define call md12
310:50 - and now what you can do so we have a div
310:54 - of class called md12 so other things can
310:59 - be same so
311:01 - I'll move copy this and quickly paste it
311:04 - here and ID will be
311:06 - result
311:08 - and name will be result
311:13 - so and this would be result
311:17 - okay
311:18 - and
311:21 - Okay so
311:24 - what we can type here we can type here
311:27 - result in terms of progress bar Okay so
311:32 - result table
311:34 - so
311:35 - so
311:37 - let me check let's first check this if
311:40 - this uh
311:42 - so here you can see here we have a
311:44 - result table so okay and we'll give it a
311:47 - different color
311:49 - and this is bad bad success so we'll
311:52 - Define batch warning
311:55 - okay
311:57 - so yeah now it's absolutely works fine
311:59 - and we would give a style as well to uh
312:04 - we can give
312:06 - style is equal to margin
312:09 - top
312:10 - of one ram
312:13 - so we can give a margin top of one ram
312:16 - so yeah now this looks perfectly fine so
312:19 - basically what I wanted to show you that
312:21 - resulted table is going to be a big one
312:23 - so we will add a responsive table so we
312:26 - can we will also work on this or maybe
312:28 - okay we can do one thing let this view
312:31 - of 6 column
312:36 - and we have to Define this in the center
312:40 - and
312:42 - we can copy the settings this settings
312:44 - so that would work fine
312:48 - so this would give a margin top frame
312:50 - and this would align in the center as
312:52 - well
312:53 - okay then there is some issue
312:57 - okay
312:59 - uh
313:01 - style okay this should be in the column
313:03 - okay sorry they should go in the column
313:06 - then I would fit now this looks
313:07 - absolutely works fine so what we are
313:10 - going to do so first we are going to uh
313:13 - render the dictionary to the front end
313:15 - part so I'll show you how you can do
313:17 - this so this is a dictionary so what we
313:21 - can do
313:22 - we I would use a for Loop
313:24 - for
313:27 - key
313:28 - comma value
313:31 - in
313:32 - global count dot items
313:35 - so basically I'm referring to both the
313:37 - items that is p and the value
313:40 - and then I would end this for Loop
313:45 - by a person sign
313:51 - and again a person sign
313:56 - and now I would end the for Loop
313:58 - and
314:00 - for
314:02 - okay person sign then I can do
314:07 - I'll do a let's suppose
314:11 - this is the key
314:14 - then
314:16 - value
314:19 - value
314:21 - and then I would give a break
314:24 - so here you can see in the in this way
314:26 - we I can print the dictionary
314:29 - so here you can see this is my key Dash
314:32 - value then key Dash value then key Dash
314:34 - value so here I've got the key value
314:37 - pairs so we are going to work on this so
314:40 - I'll give you uh first then this these
314:43 - are the tables these are the tables
314:44 - which were in the bootstrap so we have a
314:47 - responsive table
314:49 - so I'll show you
314:55 - responsive
315:01 - yeah so here it is responsive tables so
315:04 - these are the responsive tables so we
315:07 - have this class diff classes or table
315:09 - table responsive then uh this is the
315:12 - table classes your table so this gives
315:14 - us a responsive table
315:16 - so uh we'll I'll add a table
315:21 - let me check one
315:23 - we will add the simplest one
315:25 - so this is the simplest table we can
315:27 - have
315:28 - uh okay so let me check where we are
315:31 - where we have to add this so this this
315:34 - is the result table
315:36 - okay
315:37 - now
315:38 - what we can do
315:42 - uh
315:44 - okay we can Define
315:47 - okay we can Define div class is equal to
315:49 - rho
315:52 - then if class is going to call md12
315:58 - so I'm defining another grid for the
316:00 - table to keep it uh responsive so I've
316:04 - copy paste the table now I'll go to go
316:07 - back to my page
316:10 - and I'll refresh this
316:12 - so here you can see I've added the table
316:15 - and uh one class I have to add
316:18 - in the responsive table is
316:21 - this one that is this should be above
316:23 - the table classes rule to table so I'll
316:26 - move to the page so
316:28 - this is the table classes table and I
316:31 - have to add
316:32 - div
316:34 - class
316:36 - is equal to table responsive
316:40 - table
316:43 - responsive
316:46 - okay
316:47 - so this is this one is I have to add
316:50 - and I have to add add this div
316:53 - after the table tag
316:58 - so I have now what we can do we can do
317:01 - format document
317:02 - yeah this looks absolutely fine so I
317:05 - would refresh this page
317:07 - okay so here you can see the table is
317:09 - responsive when I press Ctrl shift I
317:12 - so here you can see we can scroll the
317:15 - table so if a table gets mixed so we can
317:19 - scroll the table so here we can see the
317:21 - scroll bar so let's get started with the
317:23 - tutorial so we basically uh first uh
317:26 - what we are going to do so
317:30 - uh first I'll clear this
317:33 - okay so first I'll run my server python
317:39 - manage Dot py
317:42 - run server
317:44 - okay so basically we are we were working
317:47 - on progress bar and we were supposed to
317:49 - add progress bar so in this tutorial
317:51 - today we are going to add a dynamic
317:52 - progress bar uh like it till the
317:55 - previous tutorial we had uh we are added
317:57 - the added a responsive table now we are
317:59 - going to add a progress bar so in this
318:01 - tutorial we are going to add a dynamic
318:03 - progress bar and see how we generate
318:05 - count of votes using progress bar so
318:07 - this is what we are going to do in this
318:09 - tutorial so let's get started with it
318:11 - so basically so I'll move to my server
318:15 - I'll run my server
318:16 - okay so uh to to navigate to the voting
318:21 - app I'll type slash voting app okay
318:26 - so so here's our app so we have a result
318:29 - table so what we can do we will make a
318:33 - first first let's uh add a complete a
318:37 - table then we will move to the progress
318:38 - bar quickly so this is a table
318:41 - okay so uh so we have to add a scope so
318:47 - basically we have added a table so we
318:49 - have to uh we have to add a scope so we
318:52 - shall do table header so basically we
318:55 - are first going to define the table
318:56 - header so this is the table header we
318:59 - are going to Define then we are going to
319:01 - define the table body
319:02 - okay so this is or this all is the
319:05 - header part
319:06 - and this all is the body part okay so
319:09 - let's get started so we have put that we
319:12 - have to add a class called uh in the
319:15 - scope then we'll make the header okay so
319:18 - let's this is so uh make sure this is
319:22 - uh here you can see uh there is a single
319:25 - row so I'll quickly explain this this is
319:28 - table then header then a row now we have
319:30 - to define the all the
319:32 - so this is table header is scope
319:37 - is going to call
319:40 - then ID or you can
319:44 - say anything Ash ID number related with
319:48 - this
319:49 - then again table head scope is equal to
319:51 - call
319:53 - then language
319:56 - okay
319:58 - language
320:00 - then what we are going to find table
320:04 - header scope is going to call then
320:08 - pound of words okay
320:11 - simply I'll type count here
320:13 - and uh
320:15 - so now I'll refresh the page here
320:21 - so here you can see I have a language
320:24 - number language and count so I'll press
320:27 - Ctrl shift I
320:28 - so here you can see it is responsible in
320:31 - nature okay so I have a number language
320:35 - and
320:37 - okay so this works fine so what we are
320:41 - going to do so first uh now next we are
320:44 - going to do is uh uh add data
320:49 - okay so we are going to add data row
320:51 - wise so particularly what we are going
320:53 - to do this is the table row okay so so
320:57 - first is the table data
321:01 - this again a table data
321:05 - so this corresponds to the first number
321:08 - then language then this is going to
321:11 - progress bar okay
321:14 - so so for this foreign so basically we
321:18 - have to add this all this dynamically so
321:22 - what I'm going to do and for
321:26 - so basically I'm going to add a for Loop
321:28 - here
321:29 - so follow percent
321:32 - for okay so basically I'll move to my
321:35 - views.py file
321:37 - uh so we are rendering a
321:40 - index.html using Global count okay so
321:44 - Global account here is a dictionary type
321:45 - data structure so basically what we have
321:48 - to do for key comma value this could be
321:51 - any variable name for T comma value in
321:54 - global count dot items okay so this
321:58 - would iterate in this way that first you
322:01 - are going to have the key
322:03 - then the value in global count dot items
322:06 - so this would do okay and now uh I'll do
322:10 - key
322:13 - then
322:14 - for this one value
322:17 - okay and for this I say for Loop dot
322:22 - counter so this way I'll add for Loop
322:26 - or Loop
322:31 - dot counter
322:40 - so I'll refresh the page
322:43 - okay so this works fine so let me test
322:46 - this I'll make a language PHP
322:50 - so here you can see number one language
322:53 - count one okay so let me do Java
322:57 - and I have
322:59 - okay uh I have some issue here
323:01 - the row is not coming properly
323:08 - okay I had to put all this inside a
323:10 - table row
323:12 - okay so now this should work fine
323:19 - when I refresh this page so I I hit the
323:21 - this URL Java so the found should become
323:24 - two
323:25 - okay
323:27 - yeah now it's perfectly fine now I have
323:30 - language PHP count one Java and count
323:32 - two let me add python here
323:35 - okay so here you can see even the
323:37 - dictionary is updated here uh I'll hit
323:40 - the route again
323:42 - python is three here you can see three
323:45 - then four
323:47 - so here you can see here the python is
323:49 - four so this looks good so we'll now add
323:52 - the progress bar
323:54 - so for the progress bar what we need to
323:57 - do
324:01 - okay so we can like these are the
324:05 - progress bar so we can I'll quickly give
324:08 - an overview on the progress bar so so
324:11 - here you can see
324:13 - uh there's a background multiple bars
324:16 - track bars
324:17 - animated so you can use the uh like use
324:21 - any so even here you can see toggle
324:24 - animation okay so here it is moving a
324:27 - little bit of moving stripes
324:29 - okay uh here you can see this is again a
324:32 - class subscribed colors in which you
324:35 - have blue green warning danger so here
324:38 - you can see like uh
324:40 - and we I get the same classes on on the
324:42 - button as well danger warning info
324:45 - corresponding through colors okay so
324:47 - let's add a progress bar here so let's
324:51 - take this one
324:55 - okay so to basically in the part of
324:59 - value we are going to add a progress bar
325:01 - so I'll split this uh TD table data now
325:05 - I'll paste the code here yeah so now uh
325:09 - so uh basically I'll refresh the page
325:14 - but right now there is no such Dynamic
325:15 - count so everything is full so I'll make
325:18 - it Dynamic so what you need to do so to
325:22 - uh like uh so basically here you can see
325:25 - I have a diff Class View to progress uh
325:28 - I'll quickly show you one thing and
325:29 - press Ctrl U
325:31 - so it would show how I rendered the code
325:34 - so this shows it where is the table bar
325:36 - yes here it is the table bar so here is
325:39 - here the data is being coming
325:40 - dynamically table data is one then
325:42 - language PHP table data PHP then
325:45 - progress bar and
325:47 - uh like this is the again coming
325:49 - dynamically so I would show you one
325:51 - thing if I inspect element
325:53 - okay
325:54 - and let me show you another group
325:57 - another view laptop okay so here you can
326:01 - see
326:03 - foreign
326:11 - the width has been reduced okay
326:14 - specifically I'm referring to the where
326:16 - my cursor is pointer so when I reduce to
326:19 - 50
326:20 - it almost becomes half yes it is half
326:22 - now uh then again the way I am reducing
326:26 - the width the progress also reduces
326:28 - itself okay
326:30 - okay so this is good so now what we can
326:32 - do
326:33 - so so basically what I want to tell you
326:36 - that style should have the value here
326:39 - value
326:42 - okay
326:44 - and even here you can type value so this
326:48 - should show the value in numbers at the
326:51 - progress bar
326:54 - okay so let me refresh this page
326:57 - so here you can see I have one count two
327:00 - count six okay so let me add few more in
327:03 - PHP PHP okay so basically now you can
327:07 - see two okay and now I repeatedly hit
327:09 - hit this URL okay so here you can see
327:13 - this this has become three
327:15 - okay
327:18 - now five six
327:21 - then again right
327:24 - then just seven yeah same in the same
327:26 - way okay the same goes for the python
327:28 - I'll make a submission
327:31 - yeah here you can see the python has
327:32 - seven now
327:34 - okay so now eight
327:37 - nine ten eleven twelve thirteen fourteen
327:40 - fifteen sixteen Seventeen okay so this
327:43 - looks pretty good so even uh next
327:46 - functionality will try to uh we'll try
327:49 - to add that if you like if you know you
327:51 - are seeing like these are the count of
327:53 - words and that if there are so many
327:54 - languages let me add some another this C
327:57 - so c will have one count of vote okay
328:00 - then uh again uh let me do python again
328:04 - or Java PHP
328:06 - C plus plus
328:09 - if you want to compare these languages
328:11 - and if you want to sort them according
328:14 - to the account like if you want to see
328:15 - among among there are 10 languages and
328:18 - if you want to see top three so how we
328:20 - can sort them so I'll tell you how we
328:22 - can sort them so basically in today's
328:24 - tutorial what we are going to learn we
328:26 - are going to sorting the data by count
328:28 - of words in this tutorial we are going
328:30 - to sort the data by values in order to
328:32 - see the data from highest number of
328:33 - votes to lowest number of words okay
328:36 - basically we are going to see uh we are
328:38 - going to going to sort the data by
328:40 - values in order to see data from highest
328:42 - number of words to lowest number of
328:43 - votes so basically we will Implement our
328:45 - algorithm and we will learn how we can
328:47 - imply apply this on a Django project so
328:51 - basically we will uh before this
328:54 - we can uh learn something on this
328:57 - suppose we take a random string hello
328:59 - world
329:01 - python
329:03 - python
329:04 - programming
329:06 - Python Programming I hope this is fine
329:08 - okay so we would create a data structure
329:12 - dictionary uh which would store to store
329:16 - the frequency
329:19 - okay
329:20 - frequency of characters
329:23 - I hope this is fine
329:25 - so so what we can do for
329:28 - CH and S
329:31 - I hope this is fine if c h n d if the
329:35 - character is already in dictionary then
329:37 - I would do T of c h is equal to D of CH
329:41 - plus 1 so I would increase the frequency
329:46 - increase
329:48 - frequency
329:51 - okay
329:53 - else d of c h is equal to 1.
329:58 - okay initialize
330:00 - for first
330:02 - occurrence okay we have done this before
330:04 - okay so this was pretty easy so uh let
330:08 - me do one thing uh let me create a
330:10 - function
330:11 - defined print
330:13 - data
330:15 - d so here I will be key
330:19 - I will this key and D of I is
330:23 - value
330:25 - okay and I would do for I in D
330:28 - print
330:29 - I
330:30 - comma D of I
330:33 - and here's the end okay so this is a
330:35 - separate function and let me here
330:38 - print
330:40 - D I hope this file
330:42 - okay here you can see uh uh okay okay uh
330:46 - I made a mistake let me do print data
330:48 - here
330:50 - so I had made a function for this
330:52 - purpose only yes here you can see I have
330:54 - different characters so let me I have
330:56 - different characters okay H has a
330:58 - frequency to e one but this data seems
331:00 - to very unsorted data so we will sort
331:02 - the data okay so how do we do that so we
331:05 - will carry on this okay let me do one
331:08 - thing let me remove this
331:11 - I have created variable a okay so a
331:17 - because sort by key
331:20 - in ascending
331:23 - order okay
331:24 - so a is equal to sorted
331:28 - D dot items
331:30 - K is equal to Lambda we have to make a
331:33 - comparator function Lambda
331:36 - x and x of 0. so here I mean to say that
331:41 - I would sort by key okay
331:44 - and I have to Typecast this as
331:46 - dictionary
331:49 - okay sorry for this
331:50 - I have to type as this back to
331:52 - dictionary and do print data
331:55 - a
331:57 - I hope this should work
332:00 - so yeah now here you can see that I had
332:02 - shot this is this is for a uh
332:06 - empty space okay so this is what uh this
332:08 - is in ascending order by keys please
332:11 - check this is by Keys a is a key B is a
332:14 - key e is a key G is a key H is a key I
332:17 - is equal to key L is equal to K M N O P
332:21 - Q R and W Y all here are Keys it is
332:24 - sorted by Keys okay I hope this is fine
332:26 - okay let me do another thing
332:30 - uh let me do
332:33 - a sort by key
332:36 - in descending
332:39 - okay so this is going to be very much
332:41 - same
332:43 - uh I would comment this out so what I
332:46 - can do I can copy this
332:51 - and do this as we
332:55 - and print
332:57 - data
332:58 - B so any change I have to make here yes
333:02 - uh this is a reverse
333:06 - is equal to true
333:09 - I hope this is fine okay reverse is
333:11 - equal to true
333:13 - now here you can see it has sorted by
333:16 - keys in reverse order by key Y is a key
333:19 - W is equal to Key T is equal to r p o n
333:22 - m l all are here keys but has been
333:26 - sorted in reverse order okay now uh
333:29 - we'll do the we'll do the same
333:31 - uh what we can do now sort by
333:37 - sort by value
333:39 - okay
333:40 - so we would do the same
333:45 - uh we would do the same okay sorry for
333:48 - this
333:50 - I would do this as C here as C
333:54 - and here
333:56 - 2 by values what we can do I'll remove
333:59 - this so here one means XOXO 1 means I'll
334:03 - sort by values here okay so let me do
334:06 - run this okay I'll comment this out also
334:12 - so here you can see that now I have
334:15 - sorted my values 1 1 1 1 1 2 2 2 2 3 3 4
334:20 - this is why values okay this is by
334:23 - values in ascending order now the very
334:26 - much same thing in descending order
334:30 - this was an ascending
334:33 - okay
334:34 - and this is now
334:36 - D I would copy this
334:42 - and in the very much same thing reverse
334:45 - is equal to true
334:49 - and I'll do print data
334:52 - d
334:54 - now here you can see that yes sorted by
334:57 - values in reverse order so this is what
334:59 - same thing we are going to implement on
335:00 - Django service sorry Django server okay
335:03 - so what we can do we would do we'll move
335:06 - to our page
335:07 - okay this is a result table
335:09 - and what we can do
335:11 - h a RF
335:13 - okay class is equal to button
335:17 - button primary
335:20 - any any button you can choose
335:22 - sort
335:24 - data
335:26 - okay we are going to sort data okay so
335:31 - sort data
335:34 - okay
335:37 - okay uh let me say descending
335:42 - sort data
335:44 - in descending order okay
335:49 - now we'll Define a URL
335:52 - path
335:54 - sort data I'll Implement a function
335:58 - views dot sort
336:01 - data and name is equal to
336:03 - sort
336:05 - data okay
336:07 - so I hope this is fine
336:08 - uh and I'll have to define a URL here
336:13 - percent URL
336:16 - sort
336:18 - sort data I hope this is fine and then
336:21 - again a percent URL and close the
336:23 - bracket okay so I hope this is fine and
336:26 - let me check check it on my server with
336:29 - this won't work right now actually this
336:31 - is throwing an error Dev sort data
336:34 - the request is a parameter
336:37 - and
336:39 - return
336:41 - pass okay let me check if uh till now is
336:44 - it working or not okay so I hope this
336:46 - should work now
336:48 - okay return okay
336:50 - okay I've made a mistake sorry I should
336:54 - this should be passed okay so M uh now
336:58 - what I I can do
337:01 - uh okay
337:03 - I'll move to the link
337:05 - localhost colon 8000.
337:09 - okay and now to the voting app slash
337:12 - voting app
337:14 - okay
337:15 - so here you can see sort data in
337:17 - descending order order I hope this is
337:19 - fine
337:20 - so what you can do
337:22 - uh this two what the so we are going to
337:25 - implement this very much same logic okay
337:27 - to the rendering part this should be
337:29 - same I guess okay
337:31 - this should be same so I will copy the
337:34 - code
337:35 - okay I hope this is fine
337:37 - and
337:38 - Global count
337:43 - is equal to
337:45 - Global count I hope this is fine now
337:48 - okay but we need to implement the uh so
337:51 - access the global count since uh don't
337:53 - confuse uh don't confuse yourself the
337:56 - undefining keyword Global so this is a
337:58 - keyword global global count so I'm
338:01 - accessing a variable that is global okay
338:05 - so global global count so what I will do
338:09 - I'll do Global count
338:11 - is equal to dictionary then again sorted
338:16 - okay Global count dot items
338:21 - okay and then we are going to sort by
338:24 - value key
338:25 - is equal to Lambda
338:29 - X
338:31 - of 1
338:34 - then reverse
338:37 - is equal to true
338:40 - I hope this is fine okay
338:43 - okay we will test now I will test we
338:46 - will test this application this is
338:47 - python I'll submit here
338:49 - so python has one more
338:50 - two three four five six seven eight nine
338:56 - ten okay eleven twelve okay here you can
338:59 - see the python is 11 volts let me to see
339:01 - okay okay till now what we have not
339:03 - clicked on this button Okay C is three
339:07 - four five six okay some Java
339:10 - let me submit here
339:12 - one two three four five six okay uh Java
339:16 - has 10 words so we might uh soon
339:18 - JavaScript
339:21 - okay
339:22 - so JavaScript has nine volts okay now
339:24 - I'll correct sort data and descending
339:25 - orders
339:26 - okay now you can see the magic the data
339:29 - has been sorted when in descending order
339:30 - 12 10 9 7 okay so because we were able
339:34 - to increment the logic on the server
339:36 - side and get it rendered on the front
339:38 - end part so data has been
339:40 - has been sorted by values okay so uh so
339:45 - you can try out more in such a way okay
339:48 - we can do anything suppose uh I'll do
339:51 - Java here okay okay Java has 11 votes
339:55 - okay let me introduce a new plan with
339:57 - SQL
339:58 - okay SQL has one vote
340:01 - now SQL has four four five six twelve
340:04 - okay 15 17 now SQL has more votes than
340:07 - python so I'll do sort data in
340:09 - descending order
340:11 - again you can see the SQL is now on top
340:13 - since it has 17 volts so you can
340:16 - Implement your Logics on your server
340:18 - size and get it them on front end so
340:20 - that's a good part of the application so
340:22 - in the next tutorial what we are going
340:24 - to do so what we are going to do uh you
340:27 - can try out any of the applications so
340:28 - let me do another check python here as
340:32 - 13
340:33 - so 14 15 16 17 18 19 20 so python has 23
340:37 - votes so I'll do short data and
340:38 - descending order again python is back on
340:41 - top so in this uh I've created the new
340:44 - link of my repository that is Django to
340:46 - do app so now we are going to make app
340:48 - which means we will work on the database
340:50 - the most probably the database we are
340:51 - going to work is sqlite so today we will
340:54 - start with the to-do app how we can save
340:55 - a data in the S uh sqlite database then
340:59 - how we can manipulate the data so
341:00 - basically we have many operations to
341:02 - perform like sqli database you do app
341:05 - create read update delete operations and
341:08 - moreover we can do search plus sort
341:11 - we can sort the data as well so we'll
341:14 - perform a regex search and even sort the
341:17 - data so in this tutorial we are going to
341:18 - start with the sqlite database and a
341:20 - to-do app so so let's get started with
341:23 - this tutorial so I again welcome you to
341:25 - programming knowledge so let's get
341:26 - started so please make sure that this
341:28 - this is the new GitHub link or
341:30 - repository so you you get updated with
341:32 - the repository as well okay so
341:34 - uh this is my link so I I've already
341:38 - created a app okay uh because this is we
341:41 - we have already learned all this how to
341:43 - create a form so basically it has a
341:45 - to-do writer to do description and a
341:47 - to-do priority then I have an add button
341:48 - here uh before we add this uh we make a
341:52 - request to save the data we have to
341:54 - define a schema to how we want to add
341:57 - our database okay so actually there is a
342:00 - file called models.py file in uh so what
342:04 - you need to do so this is a model.py
342:06 - file so initially I created a class to
342:08 - do uh so it has model sort model so
342:11 - basically I need to define the schema
342:13 - okay so so basically uh like if in the
342:17 - front end of my part I have a title
342:19 - description and a priority so I would
342:21 - Define the same at the back end part so
342:23 - I can save my data uh on the backend
342:26 - part as well okay so let's get started
342:28 - with it so first you need to add create
342:30 - title
342:31 - title is equal to models
342:35 - Dot cadfield
342:38 - Okay so
342:40 - and I'll give max length
342:43 - is equal to 255 okay then description
342:49 - is going to model short
342:52 - text feed
342:54 - because this is a text field
342:56 - and I would give uh there's no one
342:59 - necessary to give a text sheet because
343:00 - it can have many characters as well so
343:03 - then the next would be title description
343:06 - then priority
343:09 - priority
343:11 - is equal to model short
343:14 - integer field because this is this is
343:17 - going to be integer which priority what
343:18 - you want to give and then create it at
343:22 - okay this is equal to Model start
343:26 - models Dot
343:28 - date time field
343:30 - date time field so this would keep the
343:33 - date time field this would keep the
343:34 - track record of whichever date you want
343:36 - and I want you to add one parameter Auto
343:40 - underscore add underscore now
343:44 - is equal to true
343:46 - okay so you can do this so my the server
343:50 - my server gets restarted okay there is
343:53 - an auto uh
343:55 - maybe uh Auto Now underscore ad
344:02 - okay let me let me restart
344:08 - uh models created model dot date time
344:10 - field
344:12 - no Auto now let me check
344:17 - uh okay got an unexpected keyword
344:20 - argument Auto underscore add underscope
344:22 - now
344:24 - uh did it uh did my server restart after
344:27 - this let me check
344:31 - okay yeah now it's working fine okay so
344:33 - it's good so Auto underscore now
344:35 - underscore add is equal to True okay so
344:38 - what we can do
344:39 - so we can we have created the database
344:45 - and now like we have created our
344:47 - database schema so what we can do we can
344:49 - proceed with the form okay so we'll move
344:52 - to the front end part
344:54 - index.html so I'll Define a form action
344:57 - here quickly form action or maybe a URL
345:00 - first or let me check view shot okay
345:04 - this is a submit okay so what we can do
345:07 - so uh okay okay this is your file to do
345:11 - app okay yeah so here's I'm making
345:13 - making a request this is the index page
345:15 - then I'll submit the data then in my
345:17 - views.pv file okay I'll create a object
345:21 - so make sure you import this line okay
345:22 - from dot models import Star okay so this
345:25 - would import all the database model okay
345:27 - uh okay let me do one thing uh okay
345:31 - before you create a model then you need
345:33 - to migrate as well so you need to type
345:35 - python manage
345:37 - dot p y make migrations
345:42 - okay
345:44 - so python manage.py so it says create
345:47 - model to do so I hope you can see the
345:49 - model has been created okay now I would
345:52 - do python this was the earlier command I
345:54 - did python manager make migrations now I
345:57 - would do python manager py migrate
346:00 - so this would uh this would migrate my
346:03 - data so here you can see this has been
346:05 - migrated so even I have my sqlite studio
346:08 - on so I'll refresh this data uh tables
346:12 - so here you can see the tables has been
346:14 - created so I'll quickly give you an
346:15 - overview so here you can see this one so
346:19 - this one has a to-do app underscore
346:21 - which has five columns okay so which is
346:24 - ID title description priority and
346:27 - created ad so this was a schema which I
346:30 - was telling you so and these are the
346:31 - default Django schemas uh which are
346:34 - which I'll also explain in the other
346:37 - videos so ID title so for each object
346:40 - you have ID then I titled and
346:42 - description and a priorities and created
346:43 - ad okay so so what you can do you can
346:47 - move to to do app then what you can do
346:50 - now uh these are the following options
346:53 - so edit table delete table okay remove
346:56 - the database edit the database database
346:58 - and the you can look at the following
347:01 - options so next thing you need to do so
347:04 - we'll move to the form
347:08 - okay now we will move to the form and
347:12 - then submit the form quickly and save
347:14 - the data data like our to-do uh item
347:17 - into our database okay so let's get uh
347:20 - let's get done with this so first you
347:23 - need to do object
347:24 - is equal to to do
347:27 - because yeah I had created then
347:30 - object dot title
347:32 - it is equal to request dot get
347:36 - I hope this is fine title
347:38 - okay and object dot description
347:43 - description
347:45 - is going to request
347:48 - dot get
347:50 - description description
347:53 - okay then object
347:56 - object dot priority
347:59 - okay I'll show you one thing that in my
348:01 - index.html the Sprite is the input type
348:03 - 0 to number okay that's why I Define the
348:05 - integer field corresponding to that okay
348:07 - object dot priority is equal to request
348:11 - dot get
348:15 - priority
348:18 - priority okay fine
348:21 - then the date will be automatically
348:23 - added to it corresponding to the time
348:25 - and the even the also the ID will be
348:28 - correspondingly added and I'll do object
348:31 - dot save okay fine then I would return
348:35 - the same thing
348:37 - object dot save
348:38 - turn request index.html or uh uh okay
348:42 - then now I must restart my server
348:45 - python manual.pui run server okay and in
348:49 - my index.html file I'll make a action
348:55 - percent URL submit
349:01 - okay now I'll make a percentage send
349:05 - okay so I hope I hope this is working
349:07 - fine
349:08 - okay uh let me do one thing uh what we
349:11 - can do
349:13 - okay now I should make a request test
349:20 - data
349:22 - let this be a priority number one okay
349:24 - so I have made a request
349:28 - so
349:30 - okay reverse is equal to
349:33 - okay let me check there's some issue
349:35 - uh
349:37 - person URL
349:42 - okay it says that this URL is not
349:44 - matched okay let me check
349:49 - okay uh by mistake I had to do this
349:52 - submit
349:53 - okay
349:55 - so I hope now it's fine
349:57 - so I'll uh
349:59 - make I'll make the request again
350:01 - test
350:03 - test data
350:05 - I'll make a test data
350:09 - okay
350:10 - and then priority is equal to one okay I
350:13 - hope this is fine
350:15 - so I made a request and then in the the
350:17 - page Got Loaded again so let me check if
350:20 - it's in my data or not so
350:23 - I'll refresh the data
350:28 - okay
350:30 - so let me check
350:34 - so
350:36 - uh like uh here you can see
350:43 - [Music]
350:45 - so
350:46 - yeah now here you can see when you click
350:48 - on double click on here then I have the
350:50 - structure then the data so this was the
350:52 - data has been added one ID is one title
350:56 - is test description is test data
350:58 - priority is one created at this time
350:59 - okay I hope this is fine so you can uh
351:03 - okay now I'll make another request to
351:05 - make sure this is absolutely okay so
351:07 - I'll make test
351:08 - data to
351:11 - testing application
351:16 - and I'll give priority to it as like
351:19 - suppose 100
351:21 - uh one zero one three one one zero I'll
351:23 - give one one zero something you can give
351:25 - anything okay
351:26 - one one two something anything and I'll
351:28 - add so I here you can see the API has
351:31 - been hit now and I'll check my database
351:34 - so I'll uh what I'll do I'll refresh
351:36 - this
351:37 - okay and
351:39 - okay let me double click it to do app
351:43 - okay here oh okay so here is the refresh
351:46 - button okay now it works fine okay so
351:48 - here is it uh uh like uh you can get
351:51 - familiar with the SQL shooter even I uh
351:53 - so here you can see here is the refresh
351:55 - button also refresh selected database
351:58 - schema and this is the refresh table
351:59 - data so when I click refresh table data
352:01 - so here you can see the second test data
352:04 - to testing application with priority one
352:05 - one two has been added to the database
352:07 - so basically uh in this today's tutorial
352:10 - we are going to implement the list and
352:12 - delete operation
352:14 - okay list and delete operation uh on the
352:18 - to-do app okay so so basically uh uh
352:22 - till the previous video we had made a
352:24 - small app so I'll give you a small
352:27 - overview so my server is running okay so
352:30 - I'll give you a small overview so where
352:33 - uh I told you so uh like where I told
352:36 - you like we can add a data so I'll make
352:39 - tests
352:40 - new okay I'll do a to-do title uh uh
352:45 - let's
352:46 - new
352:48 - let me add something new title
352:52 - new title
352:54 - new description
352:58 - and uh to do practice five okay so I'll
353:01 - add this to this and when I move to my
353:04 - database so I'll move to the to do app
353:08 - underscope to do so and here I can see
353:11 - new title new description priority and
353:13 - credit has been added with id4 uh
353:15 - basically uh uh and the the ones which I
353:19 - added in last video video so I had
353:21 - deleted them just to try out something
353:23 - new on this so let's get started with
353:26 - this today's tutorial so today we'll be
353:28 - implemented delete operation okay so
353:30 - before this I will make a list page so
353:33 - so I'll list all to-do's here list
353:38 - all to-do's
353:41 - okay
353:46 - so you can give any title you want list
353:49 - to all to-do's okay so basically uh what
353:52 - you can do so we'll move use bootstrap
353:55 - here so uh we'll move to this URL uh so
353:59 - this would give us the components here
354:02 - so here you can see
354:05 - so we'll quickly move to the URL and uh
354:07 - we can do what we can use uh either we
354:10 - can use card okay we can use card here
354:14 - okay so this looks good so
354:17 - so I'll copy this okay but before that
354:21 - what we need to do okay uh we use this
354:24 - was our form which worked fine so it
354:27 - will move to the views.py file okay till
354:30 - here viewer it's fine so I'll do a
354:32 - digital my dictionary I'll create my
354:34 - dictionary
354:35 - my dictionary
354:39 - and uh
354:41 - for all to Do's okay
354:46 - I'll render them to the page to do
354:49 - T objects
354:53 - dot or
354:55 - so I hope this is fine
354:57 - so so to do Dot object.org and I'll do
355:01 - list dot HTML
355:04 - and I'll give context
355:08 - is equal to
355:10 - my dictionary I hope this is fine okay
355:12 - so let me add a new to do and check uh
355:17 - new data
355:20 - new
355:22 - data new
355:23 - and I'll give a priority as six
355:26 - and I'll submit this so yes yes uh
355:32 - but uh
355:34 - okay let me check one thing
355:39 - I made a mistake uh okay I had in this
355:43 - my index.html
355:45 - uh I had to put this all under the block
355:48 - content block
355:51 - content
355:53 - okay
355:55 - and here's the form
355:59 - and I'll end this with
356:03 - percent and block
356:07 - this is why I hope this is fine percent
356:08 - and block will do uh okay now uh and
356:12 - here
356:13 - what can I do uh in this page list.html
356:20 - uh which name I had made that is all
356:23 - to-do's so I'll do it like this all
356:27 - to do's
356:29 - okay so I hope this should work fine now
356:33 - the to-do title is
356:34 - new title
356:36 - three
356:38 - new okay let me give S7
356:43 - okay so here you can see I have it is
356:46 - showing me query set which says uh to do
356:49 - object four five six and let me check in
356:52 - my data which are this four five six so
356:54 - these are the three which I had uh which
356:57 - I had recently added these are the three
356:59 - okay so we would uh use a list or a card
357:03 - so so what you can do we can use the a
357:06 - for Loop here
357:07 - percent for each
357:10 - to do foreign
357:33 - Okay so
357:35 - so this is fine
357:37 - this has got title so I'll give
357:42 - each to do
357:44 - dot title
357:49 - and in the same way
357:54 - I'll give each to to do dot description
357:57 - okay
357:59 - each
358:00 - to do Dot description
358:04 - so this would give me the description
358:08 - okay and
358:10 - one thing I can do
358:12 - also
358:16 - let me check
358:21 - okay uh uh what I can do I'll give a
358:23 - space here and type each to do
358:27 - T priority
358:30 - I hope this is fine
358:32 - this this would give the priority
358:34 - and uh I will come to this uh refresh
358:38 - tag we'll create a delete operation here
358:40 - so I'll refresh this page so here you
358:43 - can see new title new description new
358:45 - data 6 data new new title three seven
358:48 - new new title threesome okay so uh
358:52 - so I hope uh maybe I refreshed this page
358:55 - so I had I hit this query twice so
358:57 - that's why I have to twice this data
358:59 - okay because I had refreshed this page
359:01 - so this had made another operation add
359:04 - operation here okay so we'll now do
359:06 - something uh width is this okay margin
359:11 - uh I'll give a margin top
359:14 - of one ram
359:16 - okay
359:17 - and
359:19 - div
359:22 - plus is equal to row
359:25 - okay Dave
359:27 - class is going to call MD
359:30 - 6
359:33 - so I hope this is fine now I'll paste
359:35 - the card here
359:36 - so here you can see here I'll paste the
359:38 - card now and here you can see
359:45 - okay
359:46 - uh
359:48 - let me do this uh okay yeah and I'll
359:51 - give a style is going to margin
359:56 - I'll give a margin here margin 0 or 2.
360:01 - okay so I'll again replace this page so
360:05 - I'll
360:06 - so yeah now it looks uh fine okay but uh
360:11 - let me check something uh so
360:17 - so this is called md6
360:19 - yeah so
360:22 - here what you can do
360:24 - if you want to increase the width you
360:26 - can give anything you want uh
360:29 - maybe uh what you can do
360:34 - uh I'll give classes to card
360:37 - and container fluid
360:44 - so this would take the whole width of
360:46 - the container okay so I hope this is
360:48 - fine now okay so and now we have to
360:52 - create a delete operation so uh I'll uh
360:57 - so like till now let me do one thing so
361:00 - I add a new title
361:02 - new title delete
361:05 - operation
361:10 - okay delete task
361:13 - something like this priority I'll give
361:15 - it as
361:16 - 78
361:17 - when I add this I get this at the end
361:20 - okay so one thing we are missing here
361:23 - that is the we had made model short py
361:26 - we had created add operations we will
361:28 - even add this also so
361:32 - so I'll
361:34 - copy this
361:36 - and now I'll do each to do
361:40 - created
361:42 - add okay
361:44 - so
361:45 - so I'll refresh this page
361:49 - now here you can see I have all the
361:51 - created options with the timings okay so
361:54 - okay so today we are going to continue
361:56 - with the delete operation so basically
361:58 - we will continue delete search and sort
362:00 - operation on the to-do app and even even
362:02 - in the end we'll do the update operation
362:04 - okay
362:05 - so basically we will also perform the
362:08 - update operation as well so uh okay in
362:11 - this tutorial we are going to implement
362:12 - and continue with delete operation and
362:14 - look for the other useful query set
362:15 - features so that is going to be very
362:17 - easy uh so that's going to be very
362:19 - interesting how we perform the create
362:20 - operation so basically
362:23 - first we will move to urls.to your file
362:25 - and need a delete route with ID as a
362:29 - parameter okay when we are done with
362:32 - this so we'll call views dot delete
362:36 - and name is equal to delete
362:40 - okay I hope this is fine
362:43 - okay uh
362:45 - uh so what we need uh what we need to do
362:48 - uh we'll move to our views dot py file
362:52 - okay it is throwing an error because
362:55 - since I have not defined a delete a
362:57 - function in my views.py file so what we
363:00 - will move to view short Piva file and
363:01 - find the delete function
363:03 - if I delete
363:07 - okay uh what parameter is going to take
363:09 - and it is going to take a request
363:11 - parameter request
363:12 - and uh basically uh
363:16 - this part is going to be same
363:19 - okay
363:20 - so this is going to be very much same
363:22 - part
363:23 - I'll quickly copy this so only one thing
363:26 - we are going to do uh since we were
363:28 - going to get a ID
363:30 - okay
363:31 - so object
363:33 - is equal to 2 2
363:35 - dot objects
363:38 - dot get so with this ID basically this
363:43 - uh I'll open my table so basically match
363:47 - this ID okay with ID sorry for this with
363:51 - ID you get okay basically I'm trying to
363:54 - tell that match the ID
363:57 - here in the table with the ID you get
364:00 - why the URL okay by the route so
364:04 - basically you get the get get this
364:06 - object then same clip from object dot
364:09 - delete
364:11 - okay so I hope this is fine so this
364:15 - should work okay uh let me do one thing
364:18 - okay uh
364:22 - okay let me check
364:24 - yes okay so let's do one thing
364:28 - uh
364:29 - we'll move to our server okay
364:32 - and what we need to do
364:34 - okay you can copy this
364:39 - okay we can copy this
364:43 - and so this is our local server
364:47 - so basically what we are going to do we
364:49 - will move to the delete
364:52 - okay and we are let me check if the if
364:56 - they're already let me delete this one
364:57 - with the id4
364:59 - so I'll move to my page and do
365:03 - delete four
365:05 - so maybe the fourth one should have been
365:08 - deleted so let me check
365:11 - so here is my database database so I'll
365:14 - refresh the table data
365:16 - so here you can see the uh the object
365:19 - with the id4 has been deleted so let me
365:22 - check uh let me check one thing uh let's
365:24 - uh take this one new title delete
365:28 - operation 78 okay so what id does it
365:31 - have so let me uh
365:35 - okay new title delete operation so 10
365:38 - and 11. so I'll delete both of them so
365:40 - how you can how can I delete delete one
365:43 - with ID 10
365:45 - okay done and delete a one with the ID
365:48 - 11 as well
365:49 - so that was pretty quick so let me move
365:52 - to my table and refresh this page so
365:54 - here you can see the 10 and 11 has been
365:55 - deleted but you want this operation to
365:58 - be performed by a button not by a direct
366:00 - URL so what you can do so you can move
366:04 - to the index.html
366:06 - okay
366:07 - uh and what we can you can do uh
366:13 - since
366:15 - uh sorry uh we'll move to the list.html
366:20 - since we all have all the buttons there
366:22 - so
366:24 - uh let me do this button button Danger
366:30 - okay
366:32 - and we have to Define this as
366:35 - delete
366:38 - okay
366:40 - and then object
366:43 - so basically uh we are going to Define
366:46 - this as delete each to do Dot ID
366:51 - okay
366:53 - so
366:55 - and I'll do this as delete
366:59 - okay so this should work fine let me
367:02 - refresh this page
367:06 - uh
367:08 - okay okay I should not have refresh this
367:12 - page let me open this list all to do's
367:18 - okay okay okay okay there's some issue
367:21 - let me check
367:26 - you are a zero to do app
367:31 - okay
367:33 - so let me add a to-do new to do
367:36 - I quickly even do this also
367:38 - uh or maybe I have not defined in I'll
367:41 - move to my index.html page and inside
367:44 - here
367:48 - okay uh I have not defined let me do one
367:50 - thing so uh
367:54 - I'll Define a path
367:58 - list
367:59 - okay
368:00 - now use dot list
368:04 - okay and name is equal to list
368:10 - so this would list all my pages okay now
368:14 - I'll Define my inside my views.py file
368:17 - I'll quickly do this
368:20 - Define list
368:23 - and it will take requests as a parameter
368:27 - and do this thing okay
368:32 - and inside index.html I'll do
368:37 - percent URL
368:42 - list okay
368:46 - so this would list all to those okay let
368:49 - me click this
368:55 - okay
368:57 - so here you can see I have got all the
368:59 - to-do's so let me do this
369:02 - uh each to do dot ID
369:06 - okay I made a mistake little mistake uh
369:09 - this should have been
369:11 - actually uh this should have been a
369:12 - value so I hope this is fine now
369:15 - this should have been a value I I I
369:18 - forgot to put curly braces since this
369:22 - should have been an uh value okay so
369:25 - this now this this would work fine so
369:27 - let me move to my uh okay I'll show you
369:30 - one example and you add a new to do
369:33 - to do
369:35 - added
369:38 - now
369:39 - okay
369:40 - delete
369:42 - this
369:44 - okay I'll give this a priority as 500
369:47 - okay so when what happens so let me
369:50 - check so I have added a to do added now
369:53 - delete this so when I click on delete
369:55 - so here you can see delete 12 has been
369:58 - hit so it has been deleted now okay so
370:02 - this works fine okay so this works
370:04 - absolutely fine where you can delete
370:06 - this I can delete this one delete this
370:08 - one this one this one this one this one
370:10 - and I empty my to-do list okay so even a
370:13 - list to do uh uh now I can add one okay
370:17 - uh so so uh you can move to the index
370:21 - page here I'll quickly quickly add the
370:24 - index URL as well on the add Button as
370:26 - well so you can add any so to do added
370:30 - Now new okay okay delete
370:35 - test
370:36 - and give this variety as anything and
370:38 - you will able to be able to delete this
370:40 - so I hope this works fine so basically
370:42 - in today's tutorial we are going to uh
370:44 - we have all like we have implemented the
370:46 - create operation read operation uh
370:49 - Delete operation we are left with the
370:50 - update operation but before the update
370:53 - operation I want you to have a bit
370:54 - familiar with this query set features on
370:56 - Django so basically they have this query
370:59 - set features are very useful to
371:01 - implement the backend functionality like
371:04 - suppose I can show you that this is the
371:06 - all feature we use so it returns all the
371:08 - objects of that database class which we
371:11 - have defined which we also say as model
371:14 - database model so it returns all the
371:16 - objects of the that particular class or
371:18 - model and uh in the same way we have
371:21 - also have particular things like uh
371:24 - filter uh values date times all Union
371:27 - intersection uh one thing uh one of them
371:30 - I would like to show you this order by
371:33 - so here you can see order
371:39 - uh yeah yeah here you can see the query
371:41 - set is for its it has an order by Clause
371:43 - like uh it will uh give you the order if
371:46 - you want to sort the data by a
371:48 - particular value you can use order by so
371:50 - that's pretty helpful uh so you can use
371:53 - order by so like uh uh what I can show
371:56 - you one thing like uh one is order by
371:59 - another is uh contains
372:02 - contains
372:04 - contains this one here yeah so this one
372:07 - is used to search this is particularly
372:09 - for for searching the data so uh what
372:14 - kind of data you want so this this one
372:16 - is contains so like if you want to uh
372:19 - like this is this query is particularly
372:21 - uh get headline where it contains this
372:25 - keyword so basically this is equal to
372:27 - this SQL equally query select where
372:30 - headline like this is this so basically
372:32 - uh you can form the search operation y
372:35 - contains so we are left with the update
372:37 - operation we'll quickly uh complete that
372:40 - also but before that we'll uh try to
372:42 - implement our uh
372:45 - sorting the data and searching the data
372:47 - by order by feature and contains by
372:49 - feature so this is a GitHub link and
372:52 - here I have defined Brothers uh so I
372:54 - will open a project so basically this is
372:57 - server title but it's uh right now it's
373:00 - not functional we'll Implement that so
373:01 - we can add a new to-do
373:05 - like we can do order by
373:10 - order by feature
373:13 - feature
373:14 - to be done
373:17 - so this is the title
373:19 - okay so I'll quickly copy this and give
373:22 - this a priority of thousand
373:26 - so here you can see that particularly I
373:28 - have called the like uh basically I have
373:31 - uh this is the one I have added order my
373:34 - feature and this is like coming and it
373:37 - it has a basic functionality of delete
373:39 - operation as well so it has been deleted
373:41 - with the id19 okay so it must have been
373:43 - deleted so quickly I'll add in another
373:45 - uh order by feature to be done yeah and
373:49 - I I'll add this and I'll give this as a
373:51 - number 500
373:53 - okay yeah it should find okay one thing
373:57 - you can see that if we have made a like
373:58 - it is a we have made a query to draw uh
374:01 - so so here you can see we have made a
374:03 - route where we have uh uh where it's
374:06 - working like an API so somewhere uh so
374:10 - let me do this 500 as
374:13 - 6 000.
374:15 - and let me and uh when I submit this so
374:19 - I will find one with the sixth option as
374:22 - well okay and this one is 500. so now I
374:25 - now I want to uh like we have the
374:27 - priority numbers so these are our
374:28 - priority numbers this one is 500 500 89
374:31 - 800 500 6000 and we want to be order the
374:34 - data according to the priority numbers
374:36 - so we can use order by feature so that's
374:38 - going to be pretty fine so what you need
374:40 - to do you need to Define uh in urls.pri
374:44 - file of to do app so what you can do you
374:46 - move to the path
374:48 - okay okay sorry for this I need my caps
374:52 - locks to be off uh so uh I'll Define
374:56 - path
374:58 - sort
375:00 - by
375:01 - priority or something or let me do sort
375:04 - data this would be fine yeah so sort by
375:07 - sort data
375:09 - sort data
375:11 - now I'll call a views function
375:13 - views.short data
375:16 - use dot sort data and name is equal to
375:20 - sort data okay
375:23 - sort data yeah I hope this is fine so
375:26 - I'll move to my use.py file
375:29 - Define
375:30 - sort
375:32 - data which will take a request as a
375:36 - parameter
375:37 - okay and uh so basically what I'm going
375:41 - to do I am going to return
375:44 - render
375:45 - request
375:47 - then left dot HTML
375:50 - okay and context is equal to
375:53 - context would be my dictionary okay and
375:56 - uh now I'll Define my dictionary okay so
376:00 - here you can see that when I Define my
376:02 - dictionary so here you can see that I
376:05 - would Define uh like uh all to do's
376:08 - all
376:09 - to Do's okay and now what I would be
376:13 - doing I would be saying to do
376:17 - to do dot objects dot all
376:22 - dot order
376:24 - underscope by
376:27 - and let me do this by uh I'll move to my
376:30 - models.qifi file so here you can see
376:33 - that I have list of parameter one is
376:36 - title description Priority Credit ad so
376:38 - let me uh first do it by
376:41 - uh created at okay created
376:45 - underscope add okay so I hope this is
376:49 - fine now
376:50 - uh This is My URL okay and now I'll move
376:55 - to my index.html so basically uh
377:00 - so uh to do description no no I have
377:04 - yeah so I have made a page uh let me do
377:07 - this as sort by uh sort data
377:11 - okay
377:13 - sort data and
377:16 - the URL would be
377:18 - percent URL link so I'll Define the URL
377:22 - then give me a percent sign then again
377:24 - and uh I would Define this as sort
377:27 - sort
377:29 - data okay so I hope this is fine I have
377:33 - done short data so let me go to my app
377:37 - and uh let me click on ADD and let me
377:41 - click on sort data so object has no
377:45 - function order by
377:47 - okay okay that means the
377:52 - let me see something I've made an error
377:55 - let me move to my views.vi file okay
377:58 - okay I made a braces here so no I think
378:01 - this is fine
378:02 - okay so let me refresh this page yeah
378:06 - now you can see that I have been ordered
378:08 - the data by date and that will uh
378:12 - ascending order so that is an increasing
378:15 - order okay so first 7th May 7th May 7th
378:18 - May then comes the your tenth way okay
378:20 - now if I want to change this feature
378:22 - simply I'll move to view dot py file and
378:26 - uh uh I'll put a negative sign here and
378:29 - this would be in decreasing order so now
378:33 - when I refresh this page here you can
378:34 - see 10th May 10th May 10th May 10th May
378:37 - is there then seventh my seventh place
378:39 - in the same way
378:42 - uh you can do with the priority number
378:44 - as well okay so here you can see
378:48 - uh I'll do the priority number so for
378:51 - that you need to move to your
378:52 - models.pophile you should be very
378:54 - familiar with this very same keyword now
378:57 - I'll give a priority here
378:58 - okay and now when I refresh my page my
379:04 - all the priorities would be increasing
379:06 - that is 89 500 500 500 800 6000 and this
379:09 - uh do a large number now when I put a
379:13 - negative sign here now I can see that
379:16 - now this would be in a decreasing order
379:17 - okay so I hope this is where you you are
379:20 - pretty much fine with this that now this
379:22 - is in decreasing order now it's helpful
379:24 - to you okay so like in this way you can
379:28 - uh you can uh create such operations and
379:33 - uh like in the next tutorial so
379:36 - basically I have made this by sort by
379:38 - priority now so you can uh change this
379:42 - to sort
379:44 - by priority
379:46 - okay so I hope this is uh fine now even
379:51 - list all to Do's you can list any of
379:53 - them and then then click on sort by
379:55 - priority you return a number within
379:58 - priority okay so and this is your delete
380:01 - operation which works absolutely fine
380:03 - you can delete any okay so I have
380:06 - deleted this one so basically in the
380:08 - today's tutorial we are going to
380:09 - continue with our to-do app so basically
380:11 - we will perform a search query based on
380:13 - title so title of this uh video search
380:16 - data so basically what the data we have
380:19 - in the all to do app so basically I'll
380:21 - show my app so we have ADD list all to
380:24 - do and this is for priority so basically
380:27 - in list all through the Section we have
380:28 - all the to-do's so basically I can add
380:30 - few more as well so let me do some like
380:34 - uh I added on uh let me do Django
380:39 - so I have it on Django and then Django
380:42 - priority I'll give it to number one
380:44 - topmost priority so here you can see I
380:46 - have on Django then or I'll do another
380:49 - one add another one python
380:52 - and I'll add on python
380:54 - again python I'll add priority again to
380:58 - number two okay or maybe one also so
381:01 - here I have added python also so
381:03 - basically if you want to search our
381:04 - to-do's so we confirm search query so
381:08 - for that I'll refer to the query set so
381:10 - the one I told you which is going to be
381:12 - very important for this is going to be
381:15 - contains so I'll move to that contains
381:19 - contains uh contains I'll move to
381:23 - contains
381:25 - okay sorry for this
381:27 - contains
381:30 - yeah
381:31 - okay I am having some issue okay okay
381:34 - now it's fine okay so basically we have
381:37 - contains so
381:40 - yeah here you can see this one yes so
381:43 - object dot filter and this is the this
381:46 - is it this contains me this this keyword
381:49 - is being looked uh in this headline okay
381:52 - so so for if even we'll design the same
381:56 - thing for the title one so let's get
381:59 - started with this so what we can do
382:01 - we'll move to urs.py file and then we'll
382:05 - Define a path
382:07 - then search data
382:10 - then I'll Define views Dot
382:14 - search data
382:17 - okay
382:18 - and name is going to search data
382:23 - so basically I'll Define search data now
382:26 - what I can do
382:27 - so while defined in My Views
382:30 - Define search data
382:34 - and it will take a request as a
382:36 - parameter and we'll do what I'll try to
382:39 - uh then we'll perform the operation so
382:42 - till time I can do the path so basically
382:44 - people if you want to do attach the
382:46 - query then I'll move to my index.html
382:48 - page
382:50 - so this is Sorry by title okay so I'll
382:54 - give it to person URL okay search
382:59 - data okay so this would uh perform my
383:02 - query to that
383:04 - and then
383:06 - uh this is the form
383:08 - so here you can see
383:12 - so here you can see this uh I want to
383:14 - show you one thing okay let me do right
383:17 - click
383:18 - inspect
383:19 - so basically I what I'm trying to show
383:23 - here that uh this thing is a form okay
383:27 - and this
383:29 - whole thing
383:32 - you can see
383:35 - yeah so E Yeah so here you can see uh
383:39 - yeah this is a form which is being
383:42 - highlighted now this to do title
383:44 - to do title to do discussion to do
383:46 - priority this is a formula in itself so
383:49 - for that form to submit this we refer to
383:51 - the add button and for this form
383:55 - uh it has no buttons we will create a
383:57 - button for this form okay so sorry my
384:00 - title is a form in itself plus this is
384:02 - in a form itself in itself okay so for
384:05 - that what we can do we will move to that
384:08 - search by title search data and we'll
384:10 - create a button
384:13 - button
384:15 - type
384:16 - is going to submit
384:19 - a name is equal to for that we do a
384:23 - button type so to submit and we'll do
384:26 - submit
384:27 - or search so let me do search query okay
384:30 - search
384:31 - by search okay and now for that we can
384:35 - do
384:36 - uh
384:37 - class is equal to button
384:41 - button primary
384:44 - okay for that will and style and Define
384:47 - a style as you would display
384:49 - block
384:51 - and margin
384:54 - zero order okay so this would
384:57 - Define a button to the center
384:59 - okay let me do one name so it would also
385:03 - give a top margin here
385:04 - so when I refresh this page here you can
385:07 - see I have a search button fine
385:09 - now when uh when I move here so to
385:14 - search the to initially see see if it's
385:18 - working fine uh I'll Define a queue he
385:22 - did go to request sorry request
385:25 - dot get
385:29 - query
385:32 - and I'll Define a HTTP response of queue
385:35 - so let me move to my page I'll refresh
385:37 - this and I'll type cricket
385:41 - crime type CR so yes it gives me a HTTP
385:46 - forms of CRC it works fine okay now we
385:49 - would render the uh these two do objects
385:52 - uh or not uh uh front end so basically
385:57 - uh we can do what we can do uh we'll
386:01 - okay uh I want to show you one thing
386:03 - also uh we have contains so basically
386:07 - this is equal to uh even uh last time I
386:11 - showed you
386:12 - contains
386:15 - this one this one this one this one
386:20 - here okay
386:24 - yeah yeah I wanted to show you this
386:26 - thing so case sensitive containment this
386:30 - is contains uh so basically there is a
386:34 - difference slight difference between uh
386:36 - this this uh contains an i contains so
386:42 - basically here I stands for insensitive
386:46 - so this is case sensitive and this one
386:49 - is case insensitive so this this one I
386:51 - wanted to show you and this is equal to
386:54 - this SQL query where headline is percent
386:57 - this keyword so okay so basically this
387:00 - is where this is a small difference I
387:01 - wanted to show you between the contains
387:03 - and uh
387:04 - insensitive contains so basically there
387:07 - is a difference of this keyword I so we
387:09 - can move to our application now
387:12 - so what we can do
387:14 - so I'll Define
387:19 - my dictionary I'll Define a dictionary
387:22 - then I will return
387:26 - render
387:29 - okay then request
387:33 - then list dot HTML
387:37 - okay if you want to show the result in
387:39 - the list itself so basically we are
387:41 - referring to the same template again and
387:43 - again then context is equal to my
387:46 - dictionary this is pretty much same as
387:48 - above but here a difference will be so
387:51 - what we have all to do's
387:54 - okay for that we have to do dot objects
387:59 - dot filter
388:02 - okay
388:04 - then uh what we are going to do filter
388:09 - and now
388:11 - we are going to Define
388:14 - title so basically we'll move to
388:16 - models.py file so this is the title
388:18 - world we are going to use title
388:23 - double underscore we will Define double
388:25 - underscope contains
388:28 - is equal to Q
388:30 - okay so I hope this should work fine so
388:33 - this is we are referring to title to
388:36 - have this okay so let me do one thing uh
388:39 - I'll make a search query so if I type CR
388:43 - then we have Cricket okay so it match my
388:45 - query so let me do under list all to do
388:48 - so Cricket 89 so I'll Define a cricket
388:52 - so see this cricket
388:57 - cricket cricket and then 90. so this is
389:01 - a different form working okay absolutely
389:03 - fine so so this is cricket 90.
389:06 - then I'll Define another one
389:09 - click it then 91.
389:13 - so when I should type CR so it should
389:17 - return all the Crickets with 89 90 and
389:20 - 91 then even I have to sort by priority
389:23 - book okay okay okay uh sorry for this uh
389:27 - okay we'll work on this but uh till now
389:31 - we can uh this is the uh I'll clear this
389:34 - so basically this was short data so it
389:37 - referred to all to Do's so it has no
389:39 - filter yet okay but when we just search
389:42 - data so I'll do do this again
389:45 - uh
389:47 - I'll Define cricket and now I have 89
389:50 - 1991 okay uh so we will next time we'll
389:56 - try for the update operation so hey okay
389:59 - we will check enough for another one
390:00 - then let me take a type B A so
390:04 - basketball would be
390:07 - so this is basketball okay and this is
390:10 - ba refers to here as well so it is a
390:13 - reference to the ba in the basketball
390:15 - and football okay ba so we will Define
390:19 - let me do another
390:21 - okay you can uh type the query here as
390:24 - well Foo
390:26 - football so this would return you
390:28 - football only and let me type O R so
390:32 - this would match this regular order by
390:34 - order by so this works absolutely fine
390:37 - so uh we can do for another as well let
390:41 - me do DJ so it would return with Django
390:44 - and Pui this would return me python it's
390:47 - absolutely working fine so in this soap
390:49 - video we are going to implement the
390:50 - update operation so let's get started
390:53 - with this so basically uh I have my
390:56 - to-do app so we click on list all to
390:58 - Do's so we have a uh all to-do's list so
391:02 - basically we want to have a update
391:04 - operation here or edit operation so for
391:06 - that what we what we can do we can talk
391:09 - we can move to our list.html and copy
391:12 - this
391:13 - and click here edit
391:16 - and change this button to button warning
391:22 - and and here we can have the edit
391:25 - operation
391:27 - so for that I'll repeat this page so
391:30 - I'll have the edit operation okay fine
391:31 - uh for this edit operation to have the
391:34 - happen we have to have a url.py so
391:37 - basically like for the delete one we
391:40 - will have for that for edit edit so
391:43 - basically I tell you the difference
391:44 - between the edit and update so basically
391:46 - uh right now we're implementing the edit
391:48 - operation
391:49 - reviews dot edit and name is able to
391:52 - edit
391:53 - I hope this is fine
391:55 - so and in views then we'll move to use
391:58 - dot py file so here we mentioned
392:01 - views.edit so we'll Implement edit
392:03 - operation here so for that we'll Define
392:06 - edit Define edit
392:09 - I'll give requests
392:11 - and ID okay
392:14 - so and what we'll do
392:17 - so I'll copy this line
392:20 - so basically we are going to render a
392:23 - new HTML file known as edit.html
392:26 - but before that we need to find the
392:29 - object which we are going to do so
392:31 - object is going to
392:33 - to do so basically like in the delete
392:35 - operation we read this we did this uh we
392:38 - got the object which we have to delete
392:40 - so in the same way we are going to find
392:42 - the object which we have to edit so then
392:46 - my dictionary is equal to this which
392:49 - would give title
392:51 - is equal to object dot title
392:56 - object dot title
392:58 - then description
393:00 - description
393:04 - is a good object Dot
393:07 - description
393:09 - then priority
393:13 - is equal to
393:15 - object Dot
393:17 - priority okay so then if you want to so
393:21 - basically the object we want to edit
393:23 - will get the object then these are the
393:26 - properties or attributes referring to
393:28 - the that object and then we'll pass to
393:31 - edit.html okay I'll tell you why you
393:33 - will pass to editor HTML before that
393:35 - we'll move to index.html so this form
393:37 - was for the this form was for the submit
393:41 - part so we will copy this form
393:44 - okay then I'll copy this form I have
393:47 - created a new file edit.html okay okay
393:51 - I'll not directly copy this I'll do one
393:53 - thing first I'll copy the extend
393:55 - template
393:56 - so this would get me the extent template
393:59 - then I would remove this
394:02 - okay then I will do edit
394:08 - edit
394:10 - to do
394:11 - okay we added data whatever you want
394:14 - then now I'll move to index.html I'll
394:18 - copy this form
394:19 - okay then I'll copy this form and paste
394:22 - it here okay so I have this
394:25 - so I'll complete two divs
394:28 - so this would yeah now I've already know
394:32 - I'll show you one thing when I refuse
394:34 - this page I click on edit so I'll move
394:36 - to this form but still know this form is
394:38 - empty
394:39 - okay first I'll change this add button
394:44 - to update okay
394:48 - first thing I'll do this second thing
394:50 - I'll do this I'll change this the URL
394:53 - submit to URL
394:55 - update
394:57 - uh okay and let it be submit now I'll
395:01 - tell you one thing so I have a title
395:04 - here so I'll give a value is equal to
395:07 - title which we had rendered using the
395:09 - dictionary
395:11 - so this would I'll refresh this page so
395:13 - I have basketball here okay so perfectly
395:16 - fine in the same way I'll have the
395:18 - description
395:22 - and in the same way I'll have the
395:24 - priority as well
395:28 - priority as well to perfectly fine it
395:31 - would work so I'll have a priority as
395:33 - there okay so now what we are going to
395:37 - do so we have this so basically we want
395:40 - to update this so we can update this
395:43 - very easily so what we can do uh we'll
395:47 - move to
395:48 - urls.py file
395:51 - and Define an update operation
395:56 - update and I'll take an integer ID here
396:00 - again
396:00 - then again so I was telling you there's
396:03 - a difference between an edit and update
396:04 - so now we'll update this update and name
396:07 - is go to
396:09 - update
396:14 - okay
396:15 - so what we'll do
396:17 - uh
396:18 - so we will move to views.py file
396:25 - Define update request ID so this is
396:30 - particularly same this would be very
396:31 - much same as the submit operation
396:34 - okay but there would be a minute change
396:36 - I'll tell you
396:38 - so first we are not going to create a
396:41 - new object we are going to update the
396:42 - object with the given ID so this is fine
396:45 - second uh we'll need to create a import
396:51 - date time
396:53 - okay and updated
396:57 - add underscope will go to date time dot
397:00 - date time dot now
397:02 - okay and then
397:06 - object dot created at
397:10 - created add is equal to updated as
397:15 - so this would work fine
397:17 - so this is telling you that we need to
397:20 - First find the object we are going to
397:21 - update then title is title description
397:24 - priority then date time we will create a
397:27 - new date that is updated at and will
397:29 - assign it to the cater ad then we'll
397:31 - save it and then we're going to return
397:33 - the list.html and one thing we are going
397:36 - to change here is that we are going to
397:39 - change this to update
397:42 - that is ID but still uh one thing I'm
397:45 - missing that I have not rendered the ID
397:47 - from use dot previous file so I will do
397:49 - this
397:50 - now this should work fine this is by the
397:54 - object dot ID
397:57 - okay and in my edit.html this should be
398:01 - with curly braces
398:04 - so this should work fine
398:06 - so let me create a new to do
398:10 - new to do new to do now
398:15 - okay
398:17 - uh give me a priority number of 500 I'll
398:20 - submit here so it has been created now
398:23 - click on edit
398:25 - so new to do now is new to do now now
398:28 - again
398:30 - okay
398:31 - new again
398:34 - so
398:36 - hopefully we check let me check the this
398:38 - is yeah new to do now new to do now so
398:42 - yeah so now what we are going to do
398:46 - let me edit this and I'll type new to do
398:51 - now again
398:53 - then again
398:55 - okay another priority number of 505
399:00 - so it throws me an error
399:06 - okay page not found
399:12 - okay let me check to in my urls.com
399:16 - okay this was having an issue
399:21 - yeah so yeah I've got a handmade so here
399:25 - you can see this has been changed okay
399:27 - new to do now again 505 had been changed
399:31 - so basically in the same way let me edit
399:34 - anyone this is Cricket 89 so I'll click
399:37 - on edit so this is a cricket cricket
399:39 - okay I'll change it to
399:42 - football
399:45 - football again
399:47 - new something like that so Cricket new
399:52 - and I'll give a priority number of 8.99
399:54 - so let me check
399:56 - so yeah here you can see this has been
399:58 - updated football again new 899 Cricket
400:01 - new and the time had been updated
400:04 - accordingly so this works perfectly fine
400:06 - so we are almost done with the to-do app
400:10 - so we'll catch up in the next tutorial
400:14 - so what we can Implement next so
400:16 - basically we are done with the uh all
400:18 - operations so basically uh uh okay
400:23 - because one thing I noticed here
400:25 - something let me check that this is
400:28 - basketball new 0.02 so I had only one
400:31 - word
400:34 - edit.html title
400:36 - description
400:41 - okay even I'll try to check up in this
400:43 - tutorial next tutorial uh there's just
400:46 - some minute uh so basically I'll try to
400:48 - update this football football
400:51 - uh
400:58 - a very huge number so this is this has
401:02 - been successfully updated it works
401:03 - perfectly fine so I'll delete this again
401:05 - so even the delete operation also works
401:07 - fine so delete delete delete delete
401:09 - works fine we can carry and uh we'll uh
401:14 - we'll do to search then
401:16 - uh football
401:20 - no not yet
401:22 - maybe we are not matching with oh yeah
401:24 - we don't have anyone so let me type DJ
401:28 - yeah so it works out perfectly fine so
401:30 - almost our operations work to perfectly
401:32 - fine so basically in today's tutorial we
401:35 - are going to connect the Django with
401:37 - mongodb and I will illustrate all the
401:40 - process how you can uh create a mongodb
401:42 - database and how you can connect that
401:44 - model DB database with your Django
401:46 - application so let's get started with
401:49 - today's tutorial the first thing we need
401:51 - to do we can open our code editor and
401:54 - then we need to type the command pip
401:57 - install
402:00 - Django so this would install the Django
402:03 - on a local machine and with this command
402:05 - we can create a Django project as well
402:08 - as a Django app on our machine
402:10 - then then I would like to tell you that
402:13 - till the time this is being installed on
402:15 - my machine what you can do yeah here you
402:18 - can see that it is installed in Django
402:20 - on my machine and you can install Django
402:23 - with this simple command pip install
402:24 - Django and then we have a mongodb plus I
402:28 - will show you how the we can go here you
402:30 - can refer to this website uh first this
402:33 - is the website for Django I have already
402:35 - told you how you can solve Django then
402:37 - this is the website from here you can
402:39 - install the mongodb Community Edition
402:41 - and this works as a interface with you
402:44 - uh with the Mongol DB database as a user
402:47 - interface uh very similar to phpmyadmin
402:51 - which is used for SQL then this is the
402:55 - package we are going to use this package
402:57 - as a very similar name jongwo the word
403:00 - jungle is derived from uh like uh this
403:03 - is used to connect Django with mongodb
403:05 - so jongo is the package we are going to
403:07 - use so let's get back to our code editor
403:10 - so first
403:11 - what you can do you can connect you to
403:14 - the uh connect to the Local Host server
403:17 - using this mongodb Compass Community
403:20 - Edition and you can click on the connect
403:22 - button then this would connect to the
403:24 - localhost now here you can see that it
403:27 - has been connected to the Local Host now
403:29 - what you can do
403:30 - you can create your own database so
403:33 - let's click on here uh so first okay
403:36 - let's continue with installation part so
403:38 - after installing uh after installing
403:41 - Django you can install if
403:44 - install
403:46 - jungle so this is the command we are
403:48 - going to use to connect with the package
403:51 - this is the package we are going to use
403:53 - to connect Django with the mongodb
403:54 - database so it's very easy so uh till
403:58 - the time it's being installed yeah it's
404:00 - a very easy process and next what we can
404:03 - do
404:04 - then we can create a Django project and
404:07 - then we would I will show you how you
404:09 - can make a migration in your app then
404:11 - how the how we when you can change see
404:13 - the changes reflected in the mongodb
404:16 - database so let's what we what we can do
404:19 - uh next what I have so then we have to
404:23 - make some changes in your settings.py
404:25 - file I'll also come to that then you can
404:28 - see the changes on the mongodb compass
404:31 - so that's very easy so let's create our
404:33 - Django project so I'll type Django admin
404:38 - start
404:40 - project
404:41 - a demo project
404:45 - so
404:46 - I'll create a project
404:48 - then what you can do you can open a
404:51 - folder
404:52 - and I've created this project on my
404:54 - desktop
404:55 - so here I can open it
404:58 - so now the project is open in my vs code
405:02 - so next thing you can do
405:04 - you will I'll navigate you to the
405:06 - settings.py file so you can press Ctrl
405:09 - dot p and if settings.pi file so this
405:14 - would simply directly to the settings.pr
405:16 - file and here you can see that there is
405:19 - a section for databases so we would be
405:22 - doing this and I will open my terminal
405:24 - as well so we would be connecting this
405:27 - so what we can do first since we have
405:31 - installed Django now what we can do
405:34 - first we'll create a database I will
405:36 - show you like from here you can
405:39 - disconnect and connect so I'll show you
405:41 - again very first you disconnect then you
405:44 - can click on connect so this would you
405:46 - connect you to the local news database
405:47 - and now click on create database and
405:50 - type demo
405:52 - database
405:55 - remote database and you can give a
405:57 - collection name a demo collection
406:02 - so I would click on create database
406:05 - so here you can just copy the you can
406:08 - keep this as a referral demo database so
406:11 - and demo collection so I'll click on
406:13 - create database so here you can see a
406:15 - database has been created and which is
406:18 - having a just a demo collection right
406:20 - now but what we can do uh we will
406:24 - connect to the our project and then run
406:27 - the app so I'll sorry run the migration
406:29 - so what you can do you can simply copy
406:32 - this
406:32 - and you can paste this code I'll comment
406:36 - this out databases so I'll put triple
406:38 - quotes here
406:39 - so this would basically comment this
406:41 - section
406:42 - typical quotes and now I would paste
406:45 - this you can do one thing you can remove
406:48 - this client part because you are right
406:50 - now dealing with the localhost and by
406:52 - default it would detect this
406:54 - so now you need to find your database
406:57 - name
406:58 - so I would Define my database oh sorry
407:01 - so my database name is this this is my
407:05 - database demo database so I'll move to
407:08 - this here and I'll type demo data
407:12 - base
407:14 - okay so this looks perfect now uh since
407:18 - I'm my connection is on so I type
407:22 - python
407:24 - manage
407:27 - dot UI
407:29 - make migrations
407:33 - and this would make the migrations in my
407:37 - database so so it says no change is
407:40 - detected so now I can type python
407:44 - manage.py
407:45 - migrate
407:48 - so here you can see the all the
407:50 - migrations are being applied so here you
407:54 - can see the migration has been applied
407:55 - now I would move to my database and I'll
407:57 - click on the refresh button
407:59 - and here you can see and I click on the
408:01 - demo database perfect so I have got all
408:04 - the migrations of the Django here in my
408:07 - mongodb database
408:08 - so this looks perfectly fine
408:12 - so you can create your models and then
408:15 - run the previous two command that is
408:17 - migrate and migrations and then you will
408:19 - get to go with this a project running so
408:23 - thank you guys for watching this video
408:25 - so I'll catch up in the next tutorial so
408:27 - here you can see I have made the project
408:29 - uh you can also do one thing you can
408:32 - type python manage
408:35 - dot UI
408:37 - run server
408:40 - so this would run the app on your local
408:43 - machine so you can simply copy this
408:48 - and
408:50 - you can paste this on your browser
408:54 - and here you can see your Django project
408:56 - is perfectly running so everything looks
408:58 - perfect so this is how I made the
409:00 - settings in my database this is the
409:03 - mongodb collections what I've got and
409:05 - this the project is already running but
409:08 - now we are trying to implement crowd
409:10 - operations so basically there are four
409:12 - card operations that is create read
409:13 - update and read and we are going to
409:15 - implement this using more ODB so first
409:17 - thing you can do is you can open this
409:19 - mongodb Compass community in addition
409:21 - and you can click on connect when you
409:23 - click on connect you can last in the
409:25 - last video I showed you how we created a
409:27 - demo database here then you can open the
409:29 - demo database and here you can see all
409:32 - the migrations the demo database has all
409:34 - the migrations we have done so you can
409:36 - refer to the previous tutorial how we
409:38 - connected mongodb to Django it's very
409:40 - simple and it's very quick enough so I
409:43 - can also give you a quick view uh in
409:46 - settings.py file you need to go into
409:49 - settings.py file and what you need to do
409:51 - here you need to make sure that this
409:54 - database engine is jungle and you have
409:57 - to install a demo you have to make a
409:58 - demo database and the name of that
410:01 - database is very much the same demo
410:03 - database and you have to install a
410:05 - package called jongo so it can be easily
410:07 - installed by the by attacking the
410:10 - command PIV install Yahoo uh for a what
410:12 - uh for any like if you want to see it as
410:14 - a demo purpose you can refer to the
410:16 - previous video uh now what we are going
410:18 - to prevent the crowd operations so we
410:20 - will go step by step
410:22 - and we will see how we can upgrade a app
410:26 - and then how we can implement the uh how
410:28 - we can implement the product operation
410:31 - in that app so what you can do you can
410:33 - simply copy this or you can type on your
410:36 - vs code python
410:39 - manage
410:40 - dot py start app
410:43 - demo app so this would uh start a demo
410:48 - app inside your current project
410:51 - directory and now what you can do uh
410:54 - insert uh because the time it's being
410:57 - created creating a demo app I can show
410:59 - you frozen commands uh this is the one
411:02 - like uh I'll show you we are going to
411:05 - implement a database model so this is
411:08 - how we make a database model we will
411:10 - make then we will create a super user
411:12 - and this is a Administration I will show
411:16 - you that and I'll simply show you so uh
411:21 - okay so let's get back to our tutorial
411:25 - see the demo app has been created you
411:27 - can see the folder here demo app and it
411:29 - has a file called models.py file since I
411:32 - have created an app demo app I need to
411:34 - make sure that add this application here
411:37 - demo app
411:38 - okay now what you need to do I've
411:40 - already connected to my database and the
411:43 - next thing I'm going to do I'll move to
411:44 - models.pi file and I need to create my
411:47 - models here so simply I'll create a
411:49 - model and I'll make create a basic model
411:52 - see this one
411:54 - uh I'll copy this and paste it here
411:58 - instead of this I'll do class to do
412:01 - uh and this is the this is instead of
412:04 - first name I'll type task
412:07 - and instead of the second last name I'll
412:10 - do this to description this script
412:13 - shun so this is the description I'm
412:15 - going to have task zero models.cathy and
412:18 - this is the description here I can
412:20 - increase the description to 100
412:23 - perfect
412:25 - uh yeah perfect now I have increased the
412:27 - description to 100 and now what we can
412:30 - do uh inside my admin dot py file I can
412:33 - register this and for that I know to do
412:37 - what I need to do I need to uh first
412:39 - import models from dot models import
412:42 - everything so I from dot models import
412:44 - Star and here you can see that I have
412:48 - registered I can register a model here
412:50 - so I can copy this and paste it here
412:53 - uh yeah so here you can see uh I can uh
412:57 - you know import that model and register
412:59 - here as an admin so I can implement the
413:02 - credit operations so I'll simply type to
413:04 - do
413:05 - so to do is the model which I have to
413:08 - register
413:09 - and I will create a super user at the
413:12 - same time python manage dot py create
413:16 - super
413:18 - user
413:19 - so this is the type of command I have to
413:21 - type to create the super user so it
413:24 - could ask me to like the username so
413:27 - here you can give a username as admin
413:30 - you can leave this email address
413:32 - password you have to be give a very
413:34 - simple one and then again you can give a
413:37 - password the make sure it's an easy one
413:39 - just for the demo purpose and you can
413:41 - continue that and now so this password
413:44 - it seems to be too common but you type y
413:47 - that is yes and it will create the super
413:49 - user now since I created the model
413:52 - database model and I also registered
413:54 - that so now what I will do I will
413:57 - migrate this database python
414:00 - manage
414:01 - sorry
414:03 - python manage
414:05 - dot py make migrations
414:10 - and now what I'll do so here you can see
414:12 - it shows that create model to do now
414:15 - I'll migrate this python manage Dot py
414:19 - sorry
414:20 - python manage dot py
414:23 - migrate now I will migrate this database
414:26 - so yeah here you can see
414:29 - so I have made this and now what I am
414:33 - going to do I'll go to My Demo database
414:36 - and I'll refresh this
414:38 - okay
414:39 - so here you can see
414:41 - that I have got a demo app to do here
414:44 - here you can see demo app to do now what
414:48 - I'll do I'll run this app
414:51 - python manage.py
414:55 - manage dot py run server
415:00 - okay now the app will start at start at
415:03 - the Local Host so I'll move to my
415:05 - localhost so like we have created the
415:07 - model perfect we have registered it as
415:09 - admin perfect and now uh okay this seems
415:13 - to be something else sorry uh yeah now I
415:16 - have created an app which I told you
415:18 - that and then we registered the app
415:20 - inside and installed apps directory as
415:22 - well so we are going in the right
415:23 - direction now I'm at a localhost I'll
415:25 - refresh this and you can see that I have
415:28 - the my app successfully running now I
415:30 - will go to the admin
415:32 - slash admin
415:36 - so simply we refer to the documentation
415:38 - for the quick illustration of this and
415:40 - the you need to type in the username and
415:43 - password you had set
415:44 - and what you need to do then you can log
415:47 - in here and here you can see I have to
415:50 - Do's so you can add a to-do here simply
415:54 - we are going to implement the cloud
415:55 - operation so to do
415:58 - number one
416:00 - so
416:02 - a hello world I'll type simply Type
416:04 - Hello World anything you can give
416:07 - hello world now I'll save this uh let me
416:11 - I'll either I'll do save and add another
416:13 - or I can save this yeah
416:15 - so this has been saved and here you can
416:18 - see the object says yeah this is I have
416:20 - the object okay so I I'm clicking on
416:22 - Save again yeah but now when I move to
416:25 - my database I click on this demo I have
416:27 - to do
416:27 - and here
416:30 - you can see that you have this data in
416:32 - the Json format so perfectly fine so
416:35 - here you can see that I have the data in
416:37 - the Json format uh since it's Momo DB
416:41 - okay uh I'll quickly show you yeah you
416:44 - can see this in the Json format so and
416:48 - this register you can also click on this
416:50 - button so this would show you in the
416:51 - tabular form and this will show you in
416:53 - the Json form so perfectly fine so let's
416:55 - Implement some few operations on that
416:57 - again now I click the to-do app project
417:00 - and I get Google number one edited
417:04 - so I can save
417:06 - so this has been edited so when I move
417:09 - to my database I'll click on refresh
417:12 - I'll click here refresh button yeah now
417:14 - it says to do number one edited now
417:17 - simply I can add another review so
417:20 - to do number two
417:24 - number two and I'll give the same
417:26 - description yeah and then I can move to
417:29 - my database refresh I'll get another one
417:31 - and now I can delete one so that makes a
417:35 - last purpose of our project I'll delete
417:37 - this yes I'm sure I'll delete this and
417:40 - when I move to my database I found it
417:42 - deleted so that's perfectly for how we
417:45 - implement the create operations so thank
417:47 - you guys thank you so much for joining
417:49 - us in this tutorial so this was a quick
417:51 - purpose you can simply create a to-do
417:53 - app and with the database

Cleaned transcript:

in this tutorial we would talk about Django so Django is in a python based web framework so in this tutorial we will learn about what requirements we need to have on our machine to run Django so what tools and code editors we require to have so that we can run Django on your local machine so before I start I would like to show the content we are going to be covering in this video so first we will discuss about Django uh by the official documentation of the Django then we will talk about the tools and code editors what we require them and why we need them and then we will talk about how the steps to install Django so these are the steps how we can install Django and how we can start or create a Django project and a Django app on our local machine so Django is a high level python web framework that encourages rapid development and clean pragmatic design so it was built by experienced developers it takes care of much of the hassle of web development so you can focus on writing your app without needing to reinvent in the beat it's free and open source in that Django is usually based on MBT pattern model view template so this I'm referring to the official documentation of the Django so it says there is a model layer so model layer if it is used for structuring and manipulating the data of your web application so the m stands for model and this model layer is used for structuring and manipulating the data of the web application the next we have is the view layer and the view is is responsible to encapsulate the logic responsible for processing a user's request and for returning the response so all the business logic is is encapsulated inside the view layer and it is responsible for building the logic and how the user can request and how you response to that particular request so this is all about in The View layer so next we have is the template layer so template layer provides a designer friendly syntax for rendering the informations how you want to present the data to the user so the all the frontend part that is htmlc is the JavaScript is is there in the template layer so how you can design your frontend Parts how you can want to show that the data or you should show that design your page to the user is all defined inside the template layer before we create a Django server on a local machine and we run it on and open machine you can go to the official website of the Python you can move to downloads and according to your operating system you can download Python and uh when uh please make sure one thing here that when you have downloaded the python and when you run the installer what you have to do is you will get a window like this on your screen and it says like install python 3.6.2 a 64bit version what you need to do is make sure to enable this option that add python 3.62 to power so because this would add Python 3 point any version you are using that is type python 3.x the X could be 3.5 3.6 3.7 3.8 to the path and you can access python via command line I will show this you yeah I would open the command line yeah this looks better with a good font size so what I want you to do is now when you have installed python on your local machine you just need to type python it says yeah it says python 3.8.1 after it's downloading downloading installing python to your path and running python from the command line you can move to sqlite studio and the sqlite studio is used to interact with the sqli database where initially we are going to work with sqli database in Django so you can this is this provides you a graphical user interference so you can click on this link download Windows binary open and Link so I'm opening this link in the new tab so what you can do according to your operating system you can download the file from here and install it on your machine next what you can do is install visual studio so visual studio code is the code editor we are going to use for this series we are going to use visual core Studio because the best part of this is that it has an integrated terminal inside it so I can show you this thing like we this is the virtual Studio code and like we if we are doing some projects so we can interact with the visual studio code as well now the the third part like we have the A and the B part and in the third third part we are going to see steps to install Django so what you can do is open your command line I would recommend you to run this command paper and python base package manager so it helps you to install packages and libraries externally a y command name so what you need to type is pipe install Django so this will install Django new machine but like I have already installed Django on my machine so it might tell me the requirement already satisfied because I have already installed Django on my local machine so to check this what you can do I would recommend you to type python so python has been run by a command line and now type import Django then next you can type Django Dot version so this will return with the Django version which has been sold successfully on my machine so that this look great that the angle has been installed on my machine so first what you need to do is type install Django and you need to run this command so next time we are going to work with Visual Studio code in with the integrated terminal so after opening your terminal what you need to do is move to desktop then move to the that folder CD programming uh knowledge so I am inside this folder and now I am going to run directly command so it shows me that hello.py file has been and the folder called notes are given there so what I need to do is Django admin start project this could be any project name you want to give in my project now I would run the directory command so this says my project has there is a folder called my project which has been has been installed on in the current directory and this is due to this command Django admin start project my project so oh yeah you can see that my project has been sold successfully now the Django project has been created and when if you want to start a app so as I mentioned earlier the inside this there is a manage.p WiFi so you can run this file via command line if you specify python as a prefix to this file name so in the same way we can run this manual.py file by command line if you use python as a prefix so what I'm trying to say is like you move to the oh sorry you move to the inside the Django project folder which is my project named here CD my project now what you need to do is run the directory command so there is file called manage.py you can run this file if python manage Dot py so you are able to run this file but any addition to this uh this I'm also specify something start app and you it could be my app so let me clear one thing here here so it's a bit so first I created a I I was inside my programming knowledge directory then I created a folder called my project so this is a Django project so inside a Django project I created an app which I'm specifying like this python manage.py inside the project folder I am trying to create an app with the name my app I want to tell you one thing that inside a Django project there can be multiple apps so or you can say like there can be multiple apps inside a single jungle project okay so like by using this command we are going to create a app so I would say python manage.py start app my app so when I move to my folder I would say my app so then my app has been created inside my my project folder in the same way I can do one thing extra I can do my app to oh so this also works so like what I told you that inside my Django project single Django project I have created two apps one is my app and another is my app too so what I wanted to tell you that inside a single Django tutorial you can create multiple apps so far we have moved to this now in the last one what you are going to run if you want to run the Django server on our local machine what you need to do is you should be inside your project folder and type python manage dot py run server so so this says Django version 3.0.1 using settings my product of settings starting developer somewhere at this and this is 127.0.0.1 and this is the 8000 is the port number so I want to tell you that this is your local host address till 127.0.0.1 and 8000 is your port number so either you can copy this address or you can one simply do one thing since 127.0.0.01 is your localhost address what you can type is simply type localhost and specify the port number and port number was 8 000 so this would okay now you can see the this page is being loaded here so what we can do we can quit the server with the control breaks break command I think this is any issue with this I would again run this command okay so this shows that this has been now it has been started on my machine so like so now this is so this is the so you have to use this command python manage.py run server so this has has started the server on my local machine with the address 127.0.0.1 colon 8000 so this means that that address was localhost and the port number was 8 000 I had simply type localhost column uh colon 8000 so uh the server is running successfully so the install Works successfully congratulations so though this review from here you can refer to Django documentation tutorial for polling app Django Community I wanted to tell you that uh uh like uh in the previous tutorial I told you like we were going to move with the request and the response part but uh before this I wanted to show you that uh I like I want to discuss a very important topic with you and that was about virtual environment so and to only want to only want to focus on this topic only in this lecture because this topic has its own unique importance and value because it has a it has a good Concept in itself and you need to have a good knowledge about virtual environment how you can work with virtual environment variables so because uh this would really help you like suppose you can have two cases here uh like I'm just giving you two scenarios why you need to learn about Workshop environment suppose you have made your Django project and you want to deploy the Django Project online so in order to deploy the Django pro project online you're on a server you need to have a have a record all the external libraries dependencies and packages you have used in this project in a file called requirements.txt so that the server can install those dependencies packages and libraries on on the server on the cloud I mean the server can install install that dependencies packages and libraries on the cloud then the server will install your application on the cloud and with the help of both the things and both the things gets installed then you are only able to run this application or second case you can have that when you are working in a team and there might be a possibility you want to share this code with someone else you want to share this whole project with someone else and they want to run this project on their machine or server as well but if they want to run this project or on their machine or this server server they need to have the list of those external libraries packages and dependencies you have mentioned in your project so that they can get get those dependency installed on either on their machine or on the server in order to run this particular application so uh without any further delay I again welcome you all to programming knowledge and so I my first step would be uh I have created a folder uh on my desktop with the name programming knowledge and the very first step I am going to do is create a Django project Django admin start project my first project so when I run this command so I am able to create a project inside this directory here you can see this you can even run the directory command as well so this would make sure that you have created the project now when you have made the project you would move into the project folder with the command CD my first project so I am inside the uh my project directory now so now I would create a simple I rather I would say that I would initialize a tab inside this project folder so in the you can get familiar with this command lines in my previous tutorial with the name python manage dot p y start app and you can name anything with your first app I would name this as my first so this looks good so this has created a app inside my project directory so to ensure this I would again run the directory command and it says my first have been installed so I'm going to slow with this because this has a very important concept now now I would run python manage Dot py bruh sir were now I hope the server gets started okay now it's running so either you can copy this address or you can say localhost is same as 127.2.1 I mean 127.4.4.1 now it is with the port number eight thousand so the localhost colon 8000 is same as this address so this is the same as localhost colon 8000 now I would want you to terminate this kill this for kill This Server so I would cross this and now I would open the command line again now I want to tell you how why I'm going to show this I am going I'm going to slow with this because this is a very important concept so uh now I would move to my desktop and I would move to the programming knowledge folder then I would go to the my project folder foreign folder so now so I start started the server and it was running fine so I would refresh this trade so the server won't run now I guess so it's not running so because uh I had terminated the process so okay now it looks fine so now I what I want to tell you is uh you can uh open up your command line and type install virtual world PNP this is new this packet is particularly needed to create a virtual environment so so this is requirement already satisfied because I already installed this and now I would move to my project directory I am wait create a virtual environment variable with virtual e and V e now you can give any name to this it could be my environment my first environment Django environment variable it could be any name so you can have a name of your phone so I will give it my e and V so this this process takes a minute or so so this would create a virtual environment variable so by the time it gets installed I would like to tell you something like we till now we have created uh our environment variable name now we need to in order to use this environment variable name we need to activate this and why we are doing so because this would help us to keep track record of all those dependencies and packages required in order to be mentioned in requirements.txt file so we can use them so this is a very good process uh so now so this environment has been installed and I I would activate so I would type so before this I would show you that I'm in the full program in knowledge now I am in the project ID this my EnV variable has been rationalized with the folder so you can have a look at this folder my in the scripts then there is activate so in order to activate this variable so what I need to do is I would go so this is the same as I would go my e and B slash Scripts slash activate uh activate please make sure the direction of a slash sign so you should please make a note of it so this would activate the virtual environment inside of quality yeah this looks pretty good so the Mind e and V is now working here as a virtual environment variable which will help us to keep a tracked all of our things so what I want you to do is the first thing I want to do that earlier we ran the command python manage dot p y run server and the server had started on our machine so that looked pretty simple now I would type this same command again python sorry for this python manage dot p y run server so now you see this process doesn't get started so it says couldn't import Django are you sure it is it's installed and available on your python environment variable so uh the environment uh variable did you forget to activate a virtual environment but I'm sure pretty sure the virtual environment is is activated and I I this I this time I wanted to show you this because uh I would again run this command and it would give me the same error because I want to tell you that a Django has been installed on my machine so I want to tell you one thing that Django has installed on my machine but not inside my virtual environment so I would repeat this the Django earlier had installed inside my my local machine but not inside my virtual environment so this is the same case when you might want to work with uh you when you work in a team and you might share the code with someone and he might the somebody might add an external dependency so how you can keep track that externally depends dependency has been added on your project so how will you keep a track record of those things so you will keep a track record of those things via environment variable and requirement on DxD the very next command I would tell you to install Django inside my virtual environment I would simply type pip install Django so this would install Django inside my virtual environment so I would want to repeat you so this one installed Django on my uh inside my virtual environment so yeah great so Django has been installed on a machine then the first thing you need to type is so I would like to tell you that I'm inside my project directory so Django has been installed so in order to make sure this I would type this command tip freeze requirement Dot txt so I would write direct one now you can see a file called requirements.txt has been created and I will open that file now this is the point I want to show you that in order to run this project I need Django as an external because jamungo is a python based web framework so it is an external packages or you can say dependency which python uses to make web applications so this python package Django is it needed with the version 3.0.2 in order to run this application so suppose I want to tell you so this is the now I will run the command because now I have made sure that inside my requirement PhD Django has been installed on inside my virtual environment I specified those environment variables packages depends dependency inside the file requirements.txt now I I made sure that Django has been installed my uh inside my virtual environment now I would run the command python manage dot py run server so this would start the server now you can see that inside my environment variable I ran this command and this worked so I would go to this I would refresh this page now the server has started successfully so until now we have covered till this part sorry for this so what I mean with this command suppose I want to tell you that suppose uh we are working uh on project and someone like I want to show you an example of this so these are the suppose you are working on a data science project uh and you are working on a platform like Django and someone might have come with three uh must have added these three dependencies so what you can do is you can add those dependencies suppose I'm just for an example someone was working within and added those dependencies on your project as well so you can utilize this by you can install those these dependencies your packages or by running a command I will tell you so I would first terminate this process so I would open my command line so I would go to the desktop folder then programming knowledge so now I will run the directory command so yes requirement.txt is here and I can read this file so I would type the command pip install minus r requirements.tase this so this line mean that install all those dependencies which are present inside the file requirements.txt in order to get working with this project so this would install all those dependencies so this might happen that already few of those dependencies might be already satisfied like I said this dependency is already satisfied and this might be upgraded into something or so so this is requirement already satisfied now when I came to mat plot live so it started with the process of installing those Library so what I mentioned you so they might be a case that someone might come and add a new uh package your dependency to it so you might need this in order to run the full application whole application so to keep a track record of the dependencies required you need to specify them in a file code requirement or TFT and the server does the same very same thing when you deploy your application and the server in order to run the application on cloud you need to define those dependencies which are needed to run the application so this is a very important concept and to install those you can run this command pip install minus r requirements.txt in order to run all those application so uh thank you very much so like uh I would like to show you one thing that from now we are going to work on vs code and this is my project structure and I would like to show you a graphical view of my project as well so this is my project with the name my first project I have an app named my first app and I have created my EnV and here you can see I have activated my virtual environment variable and I have created a requirements.txt file as well so if you have any doubt regarding this one if this thing seems new to you so you can refer to my previous two videos so what I'm going to show you so this is going to be very interesting tutorial from now we are going to be learning uh this is going to be very HandsOn tutorial so and it's going to be very interesting also so what I'm going to show is you is that first you define a URLs key and then we will generate a response to it so what we need to do is I would like to have a a brief overview of my structure as well so this is I'm inside my first project folder so there are various files with extension.py files so one of the bonus file here is urls.py file so like in this tutorial we are going to be working with this file so so before and the second file is settings.py file so first thing you need to do is move to your settings.py file and inside the installed apps you have to mention the app you have created with the name like this is the app which I made so you have to mention your app name inside settings.py file my first app okay and now what I'm telling you the second thing you need to do is uh like there is a your rls.py file in this in this directory so what you need to do is create one another url.py file so like this is there are two my first project so there is our holiday New York file inside the project directory because I told you that inside a single Django project there can be multiple apps so you need to create a urls.viewer file for this app as well so what you need to do click here new file URL urls.py so I have created this file and now what I'm going to tell you that there are now two urls.py file one is inside my directory my first app and one is inside my direct in my first project so I would also have graphical view to it so I'm inside my first project folder and there's you already your short pivot file inside it and now there is a URL dot py file in this folder as well okay so so you can see that now there are two URL dot Piva file one is inside this folder and one is inside this folder so what I need to mention my Django project that you need to include usg.py file which is inside my folder called my first app so first you need to to include this you would type here include and second path include and you have to mention here my first app dot urls so this is the that I mentioned that under the root directory you have to include my first app.urls so this looks pretty fine now I would Define the urls here so uh you from there you can use the first line you need to add this from django.urls import path so I would move to there from Django dot urls import path and then you need to define a list of URL patterns okay so this looks pretty same as this also because here you can see they have included this from django.urs import path as well and URL patterns is the list so this looks pretty fine here now I would Define the first path to be this but before I want to tell you that the URL will only work when there is a function call defined to that particular URL so for that what you need to do is for you what I'm going to tell you you need to add this line because this url.py is present here so you type from Dot from current directory import views so what is the importance of these two lines is that the you have to create your views here so what they mean by is that for this particular URL you have to mention a function call so I would do one thing that I would mention this path and called views Dot my function called okay and I would name this as index so Nim index is used to refer the path name so I would tell you the importance of an index uh sorry if I would tell you the importance of name how why we mentioned names on what when they are used when you and how can we use them in a blade how can we use them in the templates Okay so uh in what I'm telling you that this pad path to call fuse dot my function code this could be any function name with the name and I have given this name this url url has a specific name called index okay so now you would move to views dot POI file and Define a function my function call and this takes a request as a parameter so this is this is you have to Define this because you you are making a request to this function call and now to generate a response what you need to type is you need to type you need to import to there are two types of responses one is HTTP response and other is Json response so what you need to type is from Django dot HTTP import HTTP response as well as Json response so I think now it should work pretty fine and I have a generate a response return HTTP response of hello sorry hello world so now I would so I would first have a quick recap of this that I have first included URL dot py file first thing I did is include my app inside this then I have included the myfirst app.urf inside the my your.po file of my first project then I mentioned this path and I made a function code to this path using the views file because in the views file views.pify value you mentioned you mentioned your function call so I meant my function call and I named this particular URL as index and inside my first function called I generated a HTTP response so I think this should this should work fine now so I would say python manage dot py run server so this should work fine okay the server has started so I would okay yeah this looks pretty good so you can see you can see because I didn't mention something and I I didn't mention any any word here so it mentioned as there is a root directory so when I passed on this URL it like when I got my URL this particular URL the root directory so it called my function call inside my views.py file and I when I went to the views.py file so it had a request as a parameter and it generated HTTP response of this hello world so so this was the first thing now what you can do what you can do you can pass parameters as well so what you need to do uh I I will show you uh one thing uh for sure another thing what you can do is you can copy this line and you can name this as about and you can call this my function about and you can give this as about okay and now I'm making a path called about and Google dot my function about so it says my first app dot views has no attribute my function about so I need to Define that so I would Define this as well okay for quick or quick I'll overview I would copy this and I would generate about response okay and I would now call this function my function about so what I did here is uh I made a request to slash about from my root directory and it got my function about and I've given I gave this URL a particular name about and it went to q.py file and called this particular function and I would go back to my server so right now on the root it is generating hello world but as soon as I as I made a request to the about page so it says about response so this is pretty good so now you can understand the theory so you can also do one thing now uh what you can do is copy this line as well and name this as ADD my function or you can uh add int or you can send this simply as a views dot add now I am telling this route uh what I can mention showed you like you can also pass parameters as well so to pass integer I would type like this so I would move back to this and type and like you have to mention the end then a colon then h so this is going to be int a then into B okay and now I have to define the views dot add so uh I would go to Dev add not force parameter which is going to be request the second paragraph is going to the integer which I'm taking which was suppose I'm here 8 gaming as X or you can for Simplicity to use a then B so what you need to do is return HTTP response of a plus b so I think it should work now what I'm telling you to add two integer first one is going to be 1 and second one is going to be 2 so it should work yeah now it has it has given me two integers of one and two and it's returned in the state repeat responses in output three the one thing I wanted to show you uh will this work if I change this a Comm B to X comma y X Plus y so this is all a part of learning process so I should make sure the graph server is running yes the server is running so first test thing is I will move to this here it's working now I would move to this about yes working now I would move to add part add 4 comma 5. so this doesn't work okay so why this didn't work because I had mentioned here in the urls.py file this is I'm going to get a as a parameter then b as a parameter so what I need to be mention here that inside my views.py file I had to strictly mention this as a comma B so so make sure you be careful about this now now I will restart the server and then refresh this page now this works because I wanted to make sure because this that inside I mentioned here as a an insured mention here as quick V so input parameters to my request part would be a comma b as well so then I generated HTTP response of a plus b okay so this was look good now the first second thing you need to do you can do you create a URL so I would click quickly create this path intro the first item is going to string name and the second one is going to end with an H and I would call views Dot intro with the name particular name to this URL as intro so this looks good so this would throw because I have not defined intro in my views.vis file so I wouldn't move back to my so this time I'm going to show you a Json respawn Define intro as a function taking first parameter as a request the second as name so let me check what I have defined first so I have defined name as first and age as second the name is going to be first and age is going to be second now I would Define return a Json response so to generate it is just on a small I need to define a dictionary so dictionaries are basically key value pairs so could be my dictionary is going to be variable so with this name is going to be named here and age sorry uh age is going to be an age here and I would return a Json response here so I wanted to show you difference between the Json response so Chrome is an error because uh I think that it's an uh because I have defined views.intro now it should work particularly fine now it has started so what I am showing you I will move to intro name as Jack and age as 25 so will this work so yeah you here you can see that now it returned me and Json response and I am showing you particular like here it shows that this is a Json response with the name and age and for the you can uh show show the raw data as well so this is another this shows you how a Json object looks like and and in the Json format you have just for uh you can hear the name is Jack and the age is 25 and this is a Json object so like in this way you can create a more more URLs so basically here I covered the HTTP response as well as the Json response so so like so to generate any if we generate a request so via a URL so we generate a response to it as well so like in this tutorial we are going to basically work with templates and before I start with this tutorial I will show you that you can go to our GitHub repository and you can have the Look at Full Source Code that we were working with the previous three tutorials so you can move to this link GitHub github.com pro software development and the learn Django is the repository name so I you can have a look at the full source code you can either you can even download this repository you can download this full source code and I have mentioned below how you can run this project so like what you need to do you can either clone or clone this project or download the project extract the files then move into the project directory and then there's a file called requirements.txt I showed you in the previous tutorial in the like in the previous tutorials how you can create a requirements.txt file and why is it created so you need to install the all the packages necessary to work with the project so I would open the requirements or thp file this is these are the package required and after uh installing these packages you can type the command python match.py run server and this would run this project on your local machine so we would be working on this repository as well so after the video I'm going to push the source code you can have a look at the source code as well what changes what changes were done so this would help help you to track the code as well and you can run this project on your local machine as well so uh in this tutorial we are going to work with templates and basically I told you the Django is based on MBT pattern model view and templates so models are based with your database and Views are based on your business logic part and templates are based on like uh on front end so models are based on your database views on business logic and templates for frontend part so what you can I want to tell you that for frontend part basically we are going to use bootstrap so bootstrap is a is a world's most popular framework for building responses mobile first sites so I will show you the responsive nature of bootstrap as well because if you are making a web application and what you want to you want to Target an audience so what you want to do is that if someone is using a web application on a desktop then some other day might someone it might use on a laptop as well tablet mobile phone uh and like there are various screen sizes so you want your application to adapt that screen size to show that to adapt that screen size bootstrap is used so this would make your content responsive in nature and it would adapt to the particular screen size of the user and this will help you too for a faster development as well so it has all the predefined CSS HTML JavaScript libraries and we will be using these templates and I will show you how you can use uh how you can use Chrome developer tools to edit your your pages and you can you can be sure about how you can create your pages as well so the first thing you need to do uh like first thing you need to do like this I this as I mentioned how you can uh go with the repository and the second thing you said a second thing you need to do you need to move into your settings.p by file and uh before this you need to create a two folder one with the name templates another with the name static so templates and static are the two folders you need to do so first I would move to the my project artery so this directory same as the GitHub repository so I would create a new folder name temp lates so this is the first folder I've created templates and the second one which I'm going to create is the static so static basically is working with your static file it could be any static file so basically just for an example you have an image which is in raw image and you need to use it multiple times so you can store a raw image in your static folder so in order to display in your web page as well so two folder templates will be having your HTML files and static is going to have your raw files it could be in any form so after creating these two folders what you need to do is to add them in your directory so the first thing you need to do is you need to move to your settings.py file and one shortcut I would show you that inside vs code you can type Control Plus p and move to any file suppose I have to move to this urls.per file or models.p5 models.py file that this will be file so I would type models.poi and then take uh have give me some recommendation about and I would click on it and I would move to this file so in this way again back move to settings.wi file so this is a very interesting shortcut so under the installed apps I have mentioned my app and under the directories templates what I need to do I have to mention my current path where my templates are sold because this all this list is basically associated with the templates directly so I would type OS dot path dot join base directory comma templates so this would join my folder that I am telling that it could be any OS environment uh I would join this from base directory to the templates so this would connect with this folder so my projector is now connected with this folder the second thing I need to do is uh the same thing I need to do for the static files but this is little different so I have to first mention the list static files underscore diet quiz so this is the list and I would be using this so you can see that these are almost same thing overs.part.join based directly underscore templates and another is OS dot part dot join based directory comma static so what I can do is OS sorry OS dot path dot joint base directory comma static okay so this looks good so I will run my server so till the time uh I would show you one thing that the message was working fine and I had made some URLs like in the previous tutorial I showed you how you can make the request in the response part so uh like uh just for uh just for uh to be sure about this uh I would move to localhost colon 8000 okay so it says hello world uh and I showed you like you can create an uh URLs as well so like in this we are going to create a URL so so first thing you need to do is move to your templates folder so these are the two folders which I made templates and static so inside your templates folder you you will create a new file and name it as index dot HTML and you would you can you make this file and open this file and what you are going to do this inside your index index.html file you are basically create your first HTML page and what you are going to do is you you will move the bootstrap website and you would go to the getting started then introduction getting started an introduction and now you will first pick the starter template because this would be very helpful you would you can copy this foreign HTML so like you can see that it has the whole HTML structure and it has all the JavaScript libraries predefined as well as the CSS libraries as well and one thing that these uh CSS files as well as the JavaScript files has been kept online so anyone can use this uh CSS and JavaScript files because these are predefined in bootstrap and anyone can use bootstrap to make your web application responsive okay I would change this title to learn Django and basically I would save this file and basically the title is this what you can see above here the like introduction bootstrap GitHub dashboard software developer that this is it your title so learn Django and I would say change this hello world Django project okay okay so what you can do is you can move to your urls.py file and you can define a URL to render your page so just for example I would Define path my first page and I would call views Dot my first name so in my first page see and I would give this a name my first page so I have created a path called my first page you and I would call the function my first page from views and I have just given a short name to this URL as my first page so this is showing me an error and why is it because I have did not Define my first page function inside the views so I will move to My Views dot py file so the my first page it is taking a request as a parameter and this time like in the previous two tutorials I showed you is that I they can be various type of responses one is HTTP response Json response but this time I'm uh I'm going to render HTML page so I would say return return render request comma index.html so so this would render the HTML page and when I will move to this URL so this would show me that page so I am inside my localhost and I would say slash my first page okay so yeah so it's fantastic so what you can see that it has rendered the first page now I am showing you two shortcuts the first one is Control Plus U so this would show me the whole frontend core so this is the first shortcut you can use the uh I will repeat Control Plus U okay and the second one is you can use inspect element okay and you can see now the responsive nature of this I can show you that uh this is like Chrome developers tool and you can use this to work with the frontend part of your project it is very good okay Galaxy S5 iPhone 5 okay this shows a responsive nature laptop laptop screen so this will be laptop so what I can do is uh move to Galaxy S5 uh and I would inspect this and I would element dot Styles I would change color is equal to Red so this changes the color of this heading to red but this is uh to only to have a view of your project but as soon as I refresh it because this is temporary you do this uh you can do some temporary changes to have a look but as soon as I refresh this page this is this is vanished so and so you can use Chrome developer tools uh to have a change look at your frontend part we are going to work with templates so basically templates are HTML files and we can reuse them to render the backend logic into the frontend part so first thing I'm going to show you that the in previous tutorial we created a page so this is the page we created in the previous tutorial so I would type control U and this would uh this is a shortcut to see the frontend code so this is the whole frontend code and what noticeable we can notice from this is that this front end code will always like the same HTML structure we are going to use it in a different file as well the so we are going to like suppose in order like I will give you a practical example like uh this is an app bar and like this nav bar is going to be common in all the pages so when we move to another page so this number will remain common and this HTML structure will also remain common so what can be different the content of that page might be different from the another page and it will be different and the title can be different as well but the basic HTML structure and the nav bar and the footer will always remain common to every page because navbar is something you would help your application from to navigate from one page to another and you won't copy the narc or every time you make a new page so that so that frontend code will always be common to all the pages and we can make this with the help of these things which are extends block title block content and block I will give you a practical example how you can use it and what what is the importance of it so first inside my templates folder I would create a new file that is the first one is index.html is already there then I would create second dot HTML okay now I have created second dot HTML uh uh to I have to provide a URL to access this page as well so I would copy this path and paste it here and instead of this uh first page I would do this as second page this is my second page and I would also second page and this is I would also change this second page so to be just quick I did this so I have provided a New Paths my second page used on my second page and have the name this URL as my second page so it is showing me an error because why is it doing an error because till now I have not defined my second page Inside My Views so I would go back to my views.py so like the previous there was one of my post page which used to render an index.html I would create a second page as well my for my second page which would take request as an input parameter and would return render request comma second dot HTML so so I told you like this would I have created a second.html page in my template folder then I provided a URL then a view function to that URL as well so when I move to my page my second page okay so I'm I'm to my page but till now it's blank nothing is there in that page but what I wanted to tell you if you view the source code of the front end part uh it's still not blank so this shortcut goes by control pursue and this is the source code of the first page so you want all this thing to be common in that page as well uh okay before I do this I would uh show you one thing as well I would copy the snap bar okay I've copied the snap bar and I would paste this in my index.html okay uh please make sure this is index.html okay this is index.html uh and when I move to the my first page okay I will move to my first page my first page so this is the cutter source code of my first page and this has been uh updated uh because it has a nav bar in it as well and when I move to this page okay now this looks pretty cool okay so what I told you that inside my first page uh I have given uh a nav bar and uh what I will do one thing also I would change the title as well to make sure there is no confusion my first page okay so this looks pretty fine and pretty cool till now okay and this would this this is my first page and what I need to do this is my first page now I would move to this second.html file as well and inside my second dot HTML file what I will do I would type percent extends index.html and I would give this as a person command Okay so this would when I move to the second page so yeah this is this my second page as well and you can see this has cloned all the things which were there in the first page as well but I need to take care about one thing that my title should be different so I would move back to my index.html and inside this I have to mention the title in this way block title and because uh when I might move to another page so I would type percent block title and percent and block okay and inside my second dot HTML I would repeat this as well so just to be quick I would copy this foreign I would copy this okay this looks pretty fine so uh I would open both the pages this is my second page okay and I will open the first page as well so this is my first page and this is my second page so you can feel the difference here that within within two lines of code I cloned all the HTML structure as well as the nav bar from index.html to second one HTML and I provided two routes to them one was my first page with the name with the title my first page and another one with the title my second page so this looks pretty good and what you can do now is you want to change the content so inside index.html I would move this H1 directory inside a Content so the I would uh name that first page as well so uh I would type percent block content percent and block so when I reload my page so this is my first page so it says hello world Django project first page and when I refresh this page this is also says hello world Django project first page but I want to change this content this particular content block content so I would do one thing I would move back to the second dot HTML and I would type percent block content and again end block and I would type this given head actual heading second page extends first foreign nav bar this should work fine so see the magic now the second page extends first page with a common nav bar and this is my first page okay and this is my second page so you can feel the difference like inside my first index.html for the only thing what was the driving force uh I would open this the and show you that content of this page is here this is the actual line and this was the content of the first page and inside the second page this was the content okay but you can see the all other things are common with the title being different and the content being different everything is common so what I wanted to tell you show you that when you use the extent functionality of the template with the I think with the three or four lines of code you can clone the first page all the HTML nav bar from the first page to an another page and this will reduce your HTML code as well and this will help you to make Dynamic HTML pages in for future so what you need to do is you need to create index.html uh then uh you need to define a dynamic block title to it so okay this looks fine then you need a dynamic block content to it as well and you need to extend this in the second page as well with the help of this line okay so with the help of only four to five lines of code we were able to extend to the uh first page 2 on a second page and in this we are going to work with how you can work with how you can work with the Django templates in order to render more things on your frontend application part but this time we are going to use two things one is going to be the for Loop and one is going to be FS part and before this I will show you how you can pass variables to your frontend application frontend part of your application using the context function and how you render your variables using a dictionary so you will get to know this all this in this tutorial so let's get started with it so first thing I am going to do is going to define a path so this is basically I'm going to define a URL my third page and I would call a function views Dot my third page and I would name this as a my Third Way third page as well so I am using this naming convention so that in order you you get a you don't so you get a brief overview like this is the third page we are working on so I of course I would run my server on my machine so this is showing an error why is it so because still no I have not defined my third page function in My Views so what I'm going to do I'm going to move to my views.py file and Define my third page mistake request as a parameter and basically it is going to return and render requests and third dot HTML so basically till now I have not defined third.html yet so what I'm going to do is going to my templates folder and uh inside I'll go to second.html so I would quickly copy this and create a new file I'll paste this and I'll change this as third and even I'll change this also as third now I'll save this as third dot HTML and a hi ho this will work and I'll move to my localhost okay this server has started my third page so you can here see the title is my third page so third page extends first paid to the common nav bar so I told you how you can quickly extend one page to another another using an extent function so now I will tell you how you can extend variables uh actually you are going to extend variables to the frontend application using the context function this is going to be very pretty good and pretty easy also so what you can do you can simply create a variable I'll create a variable of a data type string with the name hello world now what I am going to do I am going to Define my dictionary and what what variable you want to pass okay just for it just to be on an easy way I'll this is a key value pay so basically basically you are passing the variable where with the name also as where so what I'm going to do I'll you have a quick overview of this so you will type context is equal to my dictionary now you are passing a new variable where so this is your variable basically this has a data on the right side value and on the key side you are naming the name which is going to be rendered on the frontend part and now what I'm going to do I am going to declare H1 heading and to initialize the value of the variable I am going to type where okay this looks good now I will refresh this page now it says hello world so this is pretty cool now what I can do also I'll have another variable great greeting and I am saying hey how are you so this would greet the user but this time I am going to pass with the name message so so this would help you to understand so this can be in any so what I'm telling greeting is unvariable of data type string so this is the value greeting and what name I'm going to pass it with the message name so when I move to the third dot HTML what I'm going to do I'm going to use message here and now this message basically has the greeting variable inside it so this would print the value on the frontend application part so say it says hey how are you so this looks pretty cool now I'm going to define a list of fruits basically Apple mango and banana and I am going to pass these fruits using key value pair so basically I am going to pass it with the name my fuse so this would pass these fruits which has a data type of list or array you can say and I am going to pass it with the name my fruits on the front end part and when I move here I'll create an unordered list using a simple for Loop so I would type okay before this I would type for each fruit and my fruits I'll team please simply end this Loop using this template and for and I am going to type type the list parameter and basically each foot is the value I'm going to print and you can see the magic here you can see apple mango banana is here and simply maybe sometime you have a large list in your back end part and you want to print it you can simply print it using a for Loop so even this you can you you could do this like this most of you we do it like for I in my fruits you can simply print I as well so this would also work okay so you can see here even this also works so this looks pretty cool we are done with the for loop as well now we are going to work with the if else part so in the views Dot py you can see I'll decree a variable it could be of any type and basically uh it could be of any type what you can do is like you can I can have a big overview this is how we use like if LF else and an F so in order to end anything you need to type if Alice else and end if so what we can do okay okay we are going to take two numbers num one comma num 2 is equal to 3 and 5. so what we are going to do and we are going to take a variable answer and that answer is going to be what we can do is answer is going to be num1 is greater than num2 so before this I would print the answer on my console so what I'm going to do is going to refresh this page this would this URL will call that views.views.py and it says false so you can here see it says false because num1 has the value 3 and the num2 has a value 5 and is 3 greater than five no so this gets the value as false and it this prints the answer on my consoles I would comment this out and I would render answer as answer and num1 as num1 okay and also numb to as num2 so this should work I'll see okay now you can see so okay this is going to be rendered so num1 is being passed as num one num2 answer now I am what I'm going to do I'm going to use an if condition if answer and I'm going to use an else part as well else and and if okay so you can see this is the same syntax I'm using so this time I'm only using an F else and and if only if answer if an answer is right this means what I mean meant in my views.py file that if this is true the num1 is greater if else it's false then num2 is greater then you will type num1 is greater than okay we can even do this like this also what we can do we'll use curly braces num1 is greater than num two so this looks good or and else part we are going to the reciprocal of it I'll change this as num two is greater than now one okay so this is my FS part and I'll move to my page and if this says 5 is greater than 3 because I had mentioned in the juice.py file okay if I change these two numbers as any random numbers I'll take such to 10 and I'll take this as seven so this will work maybe this should work but okay yeah it says 10 is greater than 7. because because uh I have created a backend logic and I'm using that backlogic in my front end part as well so in the previous I showed you 5 is greater than 3 now I'm showing you 10 of greater than 7 so you can use this backend Logic on the views.py part to render it and show it in a Content part so first thing I need to do you need to move to your settings.py file so I'll move to settings.py file and inside my settings.py file uh what you need to do you need to define a static URL which is going to be static and you need to define static files directory is equal to OS dot path dot join base directory with the static folder so what here I'm actually mentioning that I have made a static folder and here it is and inside my static folder I have two images django.png and python.png so I would be using these two images and what I'm going to show you what you need to do so this is the static folder which I'm referring which I also showed you into vs code I am showing here for a better experience for a view for view for it and inside my static folder I have two images one is Django and another is python so I'm referring to this particular static folder and to refer this particular static folder you need to move your move into your settings.v by file and you need to Define this heading so this piece of code okay so first I'll create a route so I'll move to my urls.py file and I am going to Define path my image page okay and I'm going to define a views dot my my image page and I'll give this a name is equal to my image page so this is going to be interesting okay now my image page I've defined my image page here okay and I'll Define a function inside my views my image when I have given a name here it is on my image page also so what I'm going to do I'm going to define a view okay I'll Define a view Define my image page which takes request as a parameter good and it will return and render an HTML page request and that's name is going to be image page dot HTML so this is pretty fine okay the server has been reloaded okay so this looks pretty fine till now and inside my templates folder I'll create a new template I'll click here new file image page dot HTML okay this is fine now okay now to create a image page.html what I'm going to do I am going to take a any of the pages here okay and I'll copy this quickly okay now what you need to do I'll Define this as uh okay sorry for this I'll Define this as you can Define any name image page Okay so and what you need to do I'll open this text file so this is the syntax how you can load an static image so what you need to Define you need to Define percent load static inside your Builder template so below this line I'll Define percent load static percent load static and I'll refer to this image okay I'll remove this okay from here what I'm going to tell you that this is a bootstrap and here what you need to do you will learn about images so here I'll type images so this is the responsive class of bootstrap we are going to use which will help us to make our image responsive so this is going to be very interesting so what you can do you can Define diff class is equal to container container fluid okay and what are you going what I'm going to do next uh I'll Define a row we we will be learning bootstrap in the upcoming lectures as well so this I'll give a short idea how you can create a responsive page so this is going to be interesting uh diff class is equal to row and inside a row I have a container then a row inside my container then inside my row I have a column diff class is equal to call MD 6 okay now I'm going to quickly copy this so how you can use this class so so this class image fluid response to this refers to the uh responsive CSS which has been already written inside the bootstrap to make our image responsive on multiple devices and to define the image source I'll use a curly brace that percent sign then again a person's side and inside my percent sign I'll space give space tactic and I'll Define the image name using single quotes so let me Define Django dot PNG so this look this looks pretty fine here django.png and you can Define you can give any name here okay so uh I'll just close the server then restart my server okay the server has started and as I have no issue here so I'll go to my localhost here it's running and I'll give my image page okay so this is throwing an error which says current path let me check my URL oh I didn't save this okay yes now okay now it's okay yeah here you can see so you can see the image has been successfully loaded so this looks pretty good you can also use uh in your HTML page what you can do you can also use python.png so this also works so this looks pretty fine and now what I'm going to show you Django dot PNG so I'll move to django.png and so I'll give you a brief interview so now you'll right click on this and click inspect and when you click on inspect uh so this is a container fluid then this is a row inside there is a column of width medium six that on the multiple on the medium devices it will have a width of 6 the bootstrap has a total width of 12 so we are going to learn that and this image source is this particular image so we can play with the inspector tools what we can do we can use background is equal to red let me uh sorry for this okay like this is our row so I'll type background is equal to Red now you can see a row which was also equivalent to The Container fluid as a background red and what we can do this is a column we'll align this image in the center and type margin 0 Auto okay so now you can see the image has been aligned to the center so let me check okay there might be some uh not exactly but might be some issue but we'll Rectify this in the upcoming lecture how we can resolve this so now the point is when I move to a different devices since I had used image fluid as a class I moved to Galaxy S5 you can see the nav bar collapses itself and the image is being responsive I can move to iPhone x image being responsive so this this is going to be very helpful in the responsive device design the iPhone 5 and I close this and the best part is when I refresh this page it's all gone so because that was temporary to make this permanent you need to define the CSS in your HTML page and I'll Define as margin 0 Auto okay so when I go to space refresh now this is permanent so this this is pretty cool so so today we are going to work with images so in the previous tutorial I showed you uh how to show an image and I applied some bootstrap classes uh to show that image on the HTML page so today uh before we start we are going to basically have an overview of the bootstrap grid system so in this grid system I I will show you that there are some predefined classes with extra small small medium large and extra large and this is the Syntax for them call SM call MD call LG and call Excel for respective classes and for extra extras all we only need to we don't need to Define anything with the Practical implementation we'll get to know one thing you need to observe in this that the bootstrap container has a column width of total 12 columns so what you need to do you can Define columns either in the multiple uh you need to Define them in the multiple of 12 like either uh you can Define for an example a column of width 4 then again 4 then again 4 or then 6 and again 6 because 4 plus 4 plus 4 is equal to 12 and again 6 plus 6 is equal to 12 also or if you if you want to Define any other ratio you can define a column of the width 10 and the next with the 2 because 10 plus 2 is equal to 12. and this way you can define a column width of 12 columns by defining them and giving a proportion with your with your desire what you want to give to your frontend application so this is a syntax how you can make columns plus rows so we will have some idea yeah this was a what I was explaining that the total width of the column is 12 so what you can do do like here it has been mentioned the first is of column 8 and another is of column four so this was total about 12 and this was a total width of 12 and this would help you and bootstrap manages you to help have responsive design of your application like in the previous tutorial I showed you how you can render an image using bootstrap and sorry with how you can render an image with Django then with the help of bootstrap classes how you can make it responsive so let's get started with this tutorial so I would tell you first I would go to my vs code editor then I would run my server with the command python manage dot p y run server so this would start the server on my local machine and what we can do till the times I can show you one thing so this is our template which we had made it yesterday so I would move to the local server so what you can do you uh so this is my local server so uh I would move to a route with the name I had defined in the previous two so I would go to move to my usuals.py file and my image page I had defined so I would move to that route my image page okay you can see an image had been already uploaded on this route and on this page so basically I showed you how you can see the responsive design you can uh press Ctrl shift I or you can right click and go to inspect so this will lead you to Chrome developer tools and from here you can see the responsive device design of your application like iPhone x shows this way and iPhone 6 then pixel 2 XL then Galaxy S5 so this shows the responsive design so one thing you notice as soon as I was on on a big screen the nav bar used to had expanded view but as soon as I moved to a small screen so you can see the nav bar had been collapsed so this is a beautiful nature of bootstrap so this would help you in designing your frontend application so uh today what I'm going to do I am going to define a path my image page to and in views.py file I also Define views dot my image page 2 with the name is equal to my image page 2 Okay so this looks pretty fine so inside my boost.py file I'll Define I'll quickly copy this and I'll paste it here and one changes I need to make my image page too and it will have image page 2.html as well so inside my templates I need to Define image page 2.html okay I will move to my templates folder okay so this here so this is my image.html I'll quickly copy this Ctrl I'll paste it here and image page 2. okay this looks pretty fine okay so uh till the time what I'll do I'll remove this code and I'll save it as my image page 2 dot HTML so this looks pretty fine and I will move to my image page 2 okay so it says my image page 2.html does not exist oh oh I made a mistake here so I'll renate it as image page to sorry for the error now I'll quickly refresh this page okay here it is so this is image page two so what I'm going to show you the beautiful nature of bootstrap here so this is a container fluid which you'll always mentioned then inside this container fluid I have a row then now I'm telling my bootstrap to divide this row into two columns div class okay and div class is equal to call MD 6 and I'm also defining another column of which six because I told you the bootstrap will have 6 plus 6 is equal to 12 as a column width so I'll also Define another column diff class this is going to call MD 6 and this would now this you can see it now I have a column of 2 6 6 width each and this would sum up to 12 now uh I told you yesterday that this is the syntax you are going to use because I told you that I have a static folder inside there there are two images so in order to load load images from the static folder first you will Define person load static and then you need to define the syntax with the person's static side this per person static with the image name and person again with the curly brace so I'll quickly copy this and this image fluid is in bootstrap class which helps you to make a responsive page okay in this first line I would I would put this image okay so this is the image I am going to put and one shortcut you can see I can right click here and click format document with HTML language features so what will it do it will format my source code and it will help you to better maintain the indentation of the code and in the next I'll copy this so since I'm showing you a demo uh we had done this in the previous tutorial how to load and starting image so let me give an another image that was python.png so I'll give this a name as a python dot PNG and I will move to my page and and refresh this page so you can see now I'll quickly uh I'll click inspect and I'll show you let me do this uh okay so you can see here I'll have expansion view this is my row on okay this is now you this would pretty help you to have a clear understanding understanding how bootstrap works this is my container and this is my nav bar okay this is a nav bar this is the container I go inside a row so this was my row then a column of width 6 you can the left portion is my column of 6 then this is the image okay okay this is the column of width 6 okay then I move to the second column of bit six here it is this was the second column on West 6 and this is the first column of bit six first second and that was the image but now as soon as I change my display I move to a Galaxy S5 see the magic yeah it automatically collapses the image and it helps you to make much design much responsive so you need to inspect element in order to learn about this so this is again called md6 width and this is the sixth of called md6 in the another so we are going to continue with this so so I will tell you that in this tutorial I've already defined a path with my image page 3 and already defined a function in which dot py file and only did you find an HTML page so I would directly operate on this so you can check out the code on the GitHub repository as well so what we are going to do here you can see here you can see my This Is My Views dot py file and I have already defined my image page to page 3 page four so what we are going to do we are going to start our local server which already started and inside my local server I would move to this route my image page 3 so I'll show you some interesting fact about this so this is our image page and here you can see that I have defined a row okay I have defined a row and above that I have defined a container fluid with the heading image page 3 and inside the row there are four Columns of width medium three each so here you can see three plus three plus three plus three is equal to 12 and this satisfies our basic requirement of the bootstrap column query so here it shows 12 columns so here you can see three three three is equal to 12 and as soon as I press Ctrl shift I you can see you can see okay okay and here you can see so this is the source code okay and let me click right click and click inspect yeah here it is row column width of 3 3 3 3 3 and this is on medium device as soon as I click on Galaxy S5 it will all collapse and will move up to a scrolled View and this would bring the response in nature okay let me move to the m image page four dot HTML this is we're going to be very interesting here you can see the key difference uh you need to observe a key difference here that here I had defined medium three MD I defined a class inside the bootstrap which was defined in the grid system as well I'll show you in the grid system yeah here it is this was small SM MD LG XL when I have not defined any class whether it is medium MD SM small Excel extra large I have all uh I'll I'll move to this here you can see I've defined medium in this my image page 3.html but now when I move to my image page 4 dot HTML I have not defined any class so here you can see the Gap so they are there I have not defined any class here so you can have a view for it so this is called md3 and this is only called four you can make it as three as well this is called 4 or okay so when here 4 plus 4 plus 4 is equal to 12 and now when I move to my image page 4 okay this is my image page four here you can see this is four I'll click on inspect okay uh okay I'll show you one thing this is row or four four okay but I told you that I have not defined any class here whether it is a medium small extra large now when I move to Galaxy S5 here you can see the magic now you here it also stays as four 4 and 4 so this wizard up to 12 and this was the difference I wanted to show you in the my image page4.html then here I have not defined like this is Page Three I have not defined any class here sorry in this I have defined a class in my image page 3.html I have defined a class but image page 4 dot HTML I have not defined any class and when I move to my image page 4.html this is 4 plus 4 plus 4 but as soon I move to a smaller device it Still Remains it Still Remains four four four it does not collapse so this says that if for every device we want this structure then you don't define a class then it bootstrap will automatically maintain this structure okay now we are going to do one thing one small exercise uh this is going to be a quick okay I'll Define my image page 5 okay I'll be quick with this image page 5 okay now I'll move to my templates okay I'll move to my templates this is my template I'll quickly copy this uh paste it here image page 5 dot HTML this is image page 5.html I'll quickly wrap up this content inside the row I'm already okay and I'm already left with the row and Inside My Views dot py file okay now inside my wish.pui file I'll Define my image page five I'll copy this and here you can see and this is going to be five and this is 4 okay and this is going to be 5 and I'll change the heading here so this here you can see this is the benefit of using blade template engine you can quickly Define your templates okay now I'll move to five okay now this looks fine this is this is an empty page okay but now inside my urls.py file I will be taking a string parameter with the image name okay I'll be taking a string parameter with the image name image name and inside my views.py file you know if you have any doubt regarding how you take parameter inside URL you can refer to my previous tutorial so image name is going to be in my new parameter okay and what I'm going to do I'll Define a variable image name will take this parameter image name okay let me Define this as my image my image name okay and if okay and I'll perform another operation my image name this is a simple python python function I'm using my image name DOT first what I'll do is is going I'm going to type cast this as a string parameter and use my image state name dot lore and I'll first print this my image name okay this is pretty fine okay this looks pretty fine okay now I'll move to my image page five and I'll type Django okay so here you can see I have print printed Django on my local machine and what I'm going to do I'm going to define a dictionary okay before this or maybe what we can do okay I'll take a variable where and I'll give it a default value or we can do one thing if my image name is equal to Django then where is equal to true LF my image name is equal to python where is equal to false okay however you can do or maybe uh or let me you can do one thing where is equal to false and now what I'm going to do I'm going to create a my dictionary my dictionary and I'll password as well okay now context is equal to my dictionary okay this looks pretty fine till here and I'll save this so my server is running okay now when I'll move to my image page 5.html so what I'm going to do is I'll quickly copy the image syntax here what I'm going to trying to do I'll show you that this is uh you can copy this okay okay yeah that's fine this is fine and I'll Define as 12. okay uh for your convenience you can use it as fall md12 and in another one but before this I'll type percent f r I'll use this block else I'll use this block and I'll end this with the NF person and if okay this looks pretty fine and I'll copy this and quickly paste it here okay first I need to check my backend part what was it uh I'll move my usual by Ubi file if bar is equal to true then I need to be true then I need to get the Django image if that is a good false I need to get a python image okay so this is fine and this would be python.em python.png okay so this looks pretty fine and looks interesting as well okay now I would type Django so here you can see I got the Django image and python yeah I go to python image so this looks pretty fine and uh here what I'm going to show you that this is the magic I want to tell you that I can render two images on a single route maybe I'll type Django with the capital letters okay here it is come because I had used the functions lower I'll move to my quiz.py file okay I I'll close other things and open my views.py file okay uh I had used the lower function okay if my image name is equal to Django where is equal to True else it's false okay so maybe uh when I type python with capital letters I'll get this so this looks pretty awesome you can maybe I can do also type this as capital D small Django and capital G and small o Django this also works so this is great so here I told you that with simple backend logic you can render multiple images on your frontend application today we are working we are going to work with the forms so this is a 10 tutorial if you have any doubt regarding the architecture structure of Django you can refer to our previous tutorials as well so first thing along let's get started with this so forms are made to for the user input so forms are usually made according to your demand and requirement today we will create a form and then we'll use forms uh and then what we are going to do we are going to integrate the front end part of our form we'll today we'll create a responsive form layout and then we'll integrate the back end part of of a logic with the frontend part so we are going to create a we'll see how we can integrate forms then we'll see how do we can submit forms using the one with the request method and one with post method then we will figure out the difference what the difference between the two so let's get started with this so today so this is my project so first I will run my server so I'll type python manage.pui run server and uh you I will move to my localhost so I'll refresh this page so the server will get started so here you here you can see the server has started so what we are going to do today so what we are going to do first I'll create a path the UR path path I'll create my form okay and I'll create a view with the name views Dot my form and I'll give this URL a name is equal to my form as well okay that's looks pretty fine so first I will create a form and so I'll move to my views.py file okay so here's my views dot py file so what I'm going to do so what I'm going to do and I'll Define a view Define my phone and it'll take a request as a parameter and I'll render an HTML page and what I'm going to do I'm going to type return okay return render request and I'll make an HTML page my form dot HTML so this looks pretty fine so what I need to do so I need to define a myform.html inside my template page okay I'll move to my templates so I'll create a new file my form dot HTML so this looks pretty fine so what we are going to do today what you are going to do so this is a form dot are myform.html page so I have defined a few links we can move to this link and what we can do we'll move to this line and what we can do uh we'll look how we can create responsive forms using bootstrap so this is going to be very good so we can see how we can create responsive form using bootstrap and what we are going to do so this is like a box container with an email address and a password then check me out submit we can create a form like this only and this is another one email address example select so this is a select option with the drop down Behavior so this is a text area and this is a form with an input type is equal to file so you here you can see this is input type is equal to file so why I'm telling you all this because this will make you habitual with how what kind of widgets we have to work with the form then this is all about sizing and this is uh what this uh this is Select and this is read only you can read this only note edit allowed here then read only plain text so this is how we do so this is one of the range inputs uh this is a works and with the slider Behavior then others are check box and this is disabled checkbox then default radio second default radio disabled radio and inline so we are very much decent type amount of parameters to work with and then uh this is a form group so of this form grid the form row uh I'll I'll just explain all this how you can make a form and we'll start this from scratch because this is what is going to be very one of the important parts uh and let's get uh started with designing our frontend part so first I'll do what I'll do help just simply pick any template and I'll paste this because I have to extend my index.html to my form page so I'll change this name my form okay now okay I'll remove this line okay and I'll give a heading H1 let me give an heading my form and what I'm going to do I'm going to go to my localhost and type slash my form okay so this looks the this is my form so I've defined the heading to make sure that the template is working so what I can do next is and move to this page and what you can do you can have a simple layout okay you can have any of the simplest layout let's get start with a simple one so we'll pick this okay or if you want me to I'll we'll make this from scratch okay first what you need to Define you need to define a form group so we'll Define a form group so for first we will Define the div class is equal to container fluid okay this is a container then inside this we we need to define a row then I'll Define a column called medium of size 6 or you can say with six then I need to define a form okay so this will pretty fine now what you need to Define inside of you need to define a diff classes you will form group so I'll use this div class is equal to form group okay so what do you need to do so uh I'll use an another okay uh I'll let's get a proceed with this so you can see that for two inputs there are one div classes Reform Group and another is also div classical form group so suppose we are having two inputs div class is going to form group so here you can see I have a container then a row then a call column of uh of medium with six then a form then I have two form groups this means I'm going to Define two inputs so one is input type is equal to text I'll give this ID as my text and name is equal to my text as well and I'll Define what you can see uh they have defined input type is about image email class is equal to form control so I'll Define this class to this because this class is necessary form control Okay so this looks pretty fine and I'll Define a label format form so here you can see there must Define a label label four so I'll Define a label my text my text okay this looks pretty fine and what we can do I'll go to this page okay so here it is a form so but the right now there is no such Enlightenment so I'll go to inspect okay when I move to my inspect I'll go to div class with core md6 and I'll try some CSS out here so I'll do margin 0 Auto so this looks pretty fine my forms just to the center okay I'll do this style is equal to margin 0 Auto and with the same I'll do with the heading as well so I'll try the CSS on this as well this is my heading so let's do something text align is able to Center okay this looks pretty fine and I'll give a little bit of a margin sorry I'll get margin top and I'll I'll use a relative unit and this is in terms of ram so you can simply either you can copy the CSS and this is a key shortcut you can work with this and I I'll put a style tag here and I'll paste the CSS here so this looks pretty fine so and I'll I'll right click here and I'll say format document okay this uh format document oh this is is this isn't working I'll check if something is okay and I have defined a heading and I'll do some changes okay I'm having some issue with this okay now I know this is fine right yes so I have a heading okay now this looks pretty fine and you can see I have a form with my text and I'll do the same okay I'll copy this quickly okay well I will Define some uh a text area so this is a text area so what we can do so this is a text area and we have defined rows for it for how much rows we want so we'll quickly do this okay let's do this text area class is equal to form control okay rules is equal to 3 okay before this I'll give an ID to it ID sorry ID my text area and as well as a name to it name is equal to I'll give this a name as well my text area okay this looks pretty fine and I'll close this text area so it automatically closes it and I'll Define a label for my text area and this was going to be my text okay I'll use the capital M and capital T So this looks pretty fine and when I move to my page okay this looks pretty fine so this is the form we have made and we'll now test the responsiveness of this form so what we are going to do we are going to so press Ctrl shift I or you can simply press inspect right click inspect then we'll use a layout okay now you can see the beauty of bootstrap so you can see iPhone 5 a responsive form is a hair iPhone 6 iPad okay this Galaxy S5 so this is responsive nature of a form so and this is you can see pixel 2 and here you can see this is our form being responsive so this is a beautiful nature of uh bootstrap so uh I'll move to my server here so I had defined a form using my form so this is the form we had made in the previous lecture so today what I'm going to do uh what I'm going to do so this is a I'll create a button in this form first so I'll type div class is equal to form group here you can see I have defined a form group for each input element so form group okay now uh I'll Define a button so this button should be type is equal to submit because I'm going to submit this form and uh and what I'll define a class is equal to button button primary and this would give me the default color of the button and I'll I'll type this submit as the button value to shown on the fronted part so I'll go move to this page and so this is my button I'll right click here quickly to inspect what changes I can do to make this is more responsive and better so uh I'll do margin 0 or 2 so this is the margin 0x auto used is done to Center the element so this doesn't work I'll type display block yeah this works so I'll copy this CSS quickly and uh I'll create a style element here Style and I'll quickly copy this and paste it here and this looks pretty fine so I'll refresh this page uh yeah now the button okay now yeah now the button is in the center and now uh till now I have only Define the form and two things I am missing in this form is one is the path method and another is the action so uh how you can work with these two things so we are going to cover in this tutorial first I'll go to my views.py file and then yours dot py so I'll Define a path here path submit my form and I'll what I'm going to do uh submit my form is going to be URL where I'm going to submit the form and Views Dot submit my form and name is equal to submit my form okay now this looks pretty fine so I have not defined a uh I'll Define a submit my form in method in my view file so I'll go to quickly quickly go go here Dev submit request I take request as a parameter and first I'll do return HTTP response or let me do one thing uh okay okay I'll Define my dictionary here and where one I'll Define a very one where two wire three uh what I'll do request Dot method this would be the value of my wire 3 okay uh and okay I'll do one thing I'll keep this as method and this would be request dot method okay so and I'll Define a Json response of my dictionary I'll quickly cover all this thing so what I'm going to do uh this was my form so I'll Define first action I'll Define a method here and that method first we will work with the get method and then the post method okay guys so this is the get method here and get method and post method have a difference so we'll get this in our tutorial what's the difference between the two first is the get and I'll Define an action so what I'm going to do I'm going to use the shorthand property to how to specify a URL I'll Define person URL okay a person URL and then a percent sign so you can be a little bit familiar with this so I've defined a shorthand notation first caliber is this person URL then I'll Define a name between this single quotes this is person sign then the curly braces okay I need to define the name where I have to submit and pass this form and the name should be this name is able to submit my form and I'll I need to submit my form to this route which has having the name submit my form okay so I'll go here so now I think this is pretty fine so I have defined a URL to submit my form and this form will be submitted to that okay that route now I have method defined the method as get an action is this okay now what I am having uh I'm having uh an error and that is I've not defined the value of my keys in my dictionary so what you can do okay first what I'll do I'll comment this out and comment this out okay so first I'll tell you show you one thing okay line and having an error viewers.py line 2. okay I'm having some error let me check okay no no okay now it's pretty fine sorry sorry so okay now it's fine fine okay so my form is ready to be submit so what I'm going to do first I've only made a request on method so what I'm going to do I'll make a test test okay I'll make a different value test debug now I'll submit my form now what you can see here okay uh let me I'm having some issue in my form okay depth submit my URL has been defined and Method has been get okay okay I Define the URL okay submit my form I'll do first space test debug yeah now this is a free Divine okay so now this is fine totally fine okay I I had some issues so I restarted my server now it's pretty fine okay so what I'm going to tell you that I'll quickly cover up the things I defined a URL submit my phone then uh this is my uh your URL and now I have defined the action to this URL so I'm referring here and method was get so as soon as I went to this URL a views just submit my firmware score so when I went here what I saw I returned a dictionary a Json respond only mentioning the method so this method was uh basically get method so what I got here the method is get okay so how you can derive the values so this is the weird one and required two so whatever okay so the main important thing what I'm going to do so what you can see in the get method you can see the name of the response okay uh sorry the parameters parameters which are being password so I had my text which I had put the data as test and I had my text area which I put the data's debug okay so you here you can see the name of the variables so these variables are being separated by a question mark and the route is being submit my form okay so what I'm going to do how you can use these values requests dot get and the first is my text okay and this is the variable I'm being referred and another is my text area okay now I'll do one thing so so I'm missing a comma sign so that's why it's showing me an error now this is pretty fine okay request dot okay I'm also missing a comma sign here okay now it's fine okay now I'll move to my form mind on and I'll type new data new debug now here you can see where one is not defined where one is not defined okay why is it throwing an error okay okay okay okay so this this is here uh okay I'll find new data and new debug and I'll submit this form yeah now this is pretty fine okay so uh I apologize for all the errors okay now this is pretty fine so here you can see I moved to this route submit my form and the parameters being my text which has this data new data you can see here okay this this now this is cool and then I had another parameter my text area here you can see with the values new debug now here you can see this is new debug okay and the method is get okay so so this is the difference here you can see the parameters on the upper hand so so here you can see on the route the parameters are being visible to you so this is the first property of the get method so now another thing we are going to do we are going to change this method to post okay so this is post okay now what I'm going to do request dot post so this would be post request dot post okay so this is the another change I'm going to do now the difference between the two first the method gets changed and now the variables on this route won't be visible on the post method okay so I go my phone okay I'll type some python here python Django framework now I'll submit this form okay now it says CRF verification failed because when you submit a form with the post method you need to define a CRF token so I'd quickly type percent CRF underscore token and this looks now this is fine okay so uh I'll make a submission here okay I'm in a fusing error okay a person CRF token okay uh uh I made a mistake sorry I made a mistake with the two curly braces sorry I'm very sorry for this so now this looks pretty fine so I'll go go back to my phone uh this is python python Django framework okay now this is the 20 minute error okay I'll refresh this python python jungle and now I'll submit this okay now this is fine sorry uh so here you can see uh now the variables are being not there on the route so the variable parameters are not there so that's being hidden in the post method plus you have a CRF token here here okay uh so I had some issues I restarted my server this is where one with the python vat 2 with the python Django so these are some uh what we call them as hidden characters so we'll I'll tell you how you can clean this data and this method is post so basically we work with the get method and the post method in this tutorial so guys in this tutorial we are going to work with the form but and we are going to work with the backend part only but today we are going to create a different instance of form how we can create a separate file uh forms.py file and we can store all the forms in that file and we can render the form whenever required whenever required without writing the repetition of the HTML code code so that brings some kind of a alternative solution how we can create a form and how we can submit them so let's get started with this so uh I have few links so you can have a look at these links so I've opened this links on my browser as well so this first one is this so today the we are basically going to work in something this kind we are going to create a form in this such way and I have defined below how we can fetch the clean data from the form uh that this will remove the special characters any special characters and this is the wickets widgets in the form so basically there are different types of widgets one is a text input number input email URL password hidden input date input date time time input text area then some other also check box uh radio select so there are file input so these are some like many options in the form and how you can render the form on your frontend part using uh today you are going to work with a different alternative solution so let's get started with this so what we'll do first uh I'll have a quick recap of the last lecture uh like we the first I'll open my file your story WiFi so like in the previous tutorial I showed you that we created you with two URLs one to render the form that was my form and another was the URL to submit the form so I used to render a form using my form then I used to submit that form and uh and and we used to move to this URL then we used then we had a backend logic then we had we can process the form data at this URL okay so today what we are going to do uh we are only going to create only one URL and we'll only create a one URL and work well in such a way that it will uh help us out to do both the things so first what I'll do okay okay I'll create a URL path I'll Define my form to and I'll call A View function use dot my form to and I'll Define the name to it name is equal to my form two okay so I've defined this so in such a way that you don't get confused with the previous one so today we are going to work with my form two okay now what I will going to do okay this is my app file and inside my app I'll create a new file with the name forms Dot py okay so this looks pretty fine and what we are going to do so I'm inside my forms.py file and uh I'll move to this link okay so today the very first line you need to type is from Django import forms okay so what you need to do from Django import forms okay so why I'm doing this uh I will uh this will help and first I would run my server python manage Dot py run server so this would help me to get know if there's any such error okay the server will tell me okay so from Django import forms and now you'll create a class for your form which will Define okay I I'll create a class class is equal to feedback uh with feedback form okay I'll have a small B sorry feedback form and what I'm going to do I'm going to do forms Dot form okay so this is the syntax you need to follow okay now you're we are done with this okay now I'll Define two Fields here one is the title okay and another one is subject okay so I'm going to Define and what I'm going to do I'll create a cad field since forms Dot card field okay and forms Dot card field this looks predefined okay I have defined two cat Fields here so I'll give a name sorry I'll give a label with the max length I defined label is equal to tighter okay now this is fine label is equal to we can call it as subject description subject description and I'll Define a Max underscore length is equal to 50 for this and in the same way I'll Define Max in the underscore length is equal to 200 for this okay now what I'm going to do I'm also going to add a different attribute here here you can see that uh I can also Define Wicket is equal to forms.txt input Okay so uh I'll copy this and in this way you are going to text input here for this and for this one what I'll do I'll change this to as text area okay so if I'm not wrong I'm correct with the spelling okay this is text area right so here you can see this is text area this is text input okay so I have created the form successfully so this is the uh form uh what you need to do from Django import forms class feedback form forms dot form then title with the both of them having a label of title subject decision Max lenses and the widget being the text input and the text area respectively now I'll move to my views.py file and I'll Define define my form to will take a request as a parameter and uh before uh using this what I'll do I'll type from dot forms so basically I'm referring to this file from uh forms.py import Star so you can put every form you want okay now what I am going to do I'll put a if condition if request dot method is equal to post okay LS just for the basic understanding I'm doing this request dot method is equal to get so for the same route we are going to check if the if the request method was get opposed Okay so uh if it was a get method so what I'll do I'll create form I create a form and that form was this was the name of my form feedback form okay so I have a feedback form and okay so basically this is equivalent to this okay so this is just for uh having just for and having a this is equivalent to this and what I'm going to do now I'll exit execute a pass statement here uh just uh I'm giving a pass statement till now that it doesn't show me an error and I'll have a form and what I'll do I'll return render request uh and I'll first Define in my dictionary is equal to form okay and I'll pass this form and I'll learn request and I'll make up my form 2 dot HTML okay and context is equal to my dictionary okay uh sorry I'm wrong with the syntax now this is fine but right now I have not defined my form 2.html okay so I'll go to my templates folder and I'll create a new file my form two dot HTML okay now what I'll do uh I'll extend my template so I'll have any page uh suppose uh I'll have this this is a second.html okay I'll have this page so basically right now what I'm doing okay so I'll change the title my form two okay uh what I'll do I'll create a form now that's it I'll create a form and now what I'm going to do basically I had rendered the form so I'll just what I'm doing uh I'll Define the logic when I get to the post method so Define my form two so if the request or method is going to post till now I've defined a path statement we'll Define the logic but if the method is get we'll create the form okay we will get the form from that class and then we will render that form to myform2.html using the dictionary and now Tim same simply will move to my form and simply type form dot as underscore p okay so I'll restart my server okay now this looks pretty fine so this should work now now I'll go to my localhost so the server has started and I'll go to my form two oh now you can see like the form has been made so I didn't write the HTML code so what I did I'll move to my forms.py file uh I had defined a title and subject I've already defined the text input as well as the text area then I went to My Views dot Pi views.py file if the request method was get so I had initialized the form then I had rendered on the page okay and then when I went to my HTML page then I had without writing the HTML I was able to successfully add the form using the HTML sorry using this uh by rendering the form okay so what you can see so as underscore p means as paragraphs okay so when when I move to my page so I'll uh simply click on Control Plus U so this will give me a source code so what here you can see here the form has paragraph tags p p p okay so this means form was rendered using the paragraph okay now what you can do I will type form cast table home as stable so when I move to my page now here you can see the form has been rendered using a table so table row table heading table data then table row respectively okay so this is fine right okay I'll Zoom this okay this is here you can see this had been rendered using a table okay and when I did form underscore as P so this mean it was paragraph so I'll also do this I'll refresh this page then control U so here you can see the source paragraph okay here you can see pivot paragraph and another now also one you can uh undo you can say form as UL so this would give unordered list so I'll refresh this page or say so you can here bullet marks this represents the unordered list so I simply Control Plus U now and you can see uh here you can see here is the form yes yeah here's the form you can see list has been declared list list item list item when the form has been rendered using a list so in the next tutorial we are going to continue with this and then I will tell you the basic part where we if the request method had been the post so what I'm going to tell you if the form will be submitted on so what will happen so next we will add see uh try to style up this form as well as how we can render the errors and how we can fetch the clean data and how when you can check the validity of the form so so like in the previous tutorial we were working on forms so we had made a form using of uh using a form template engine and Django so uh I had made a file name forms.py and then I had made a form so this is the look of our home then in views.py file I defined two method one was a request method is equal to post and one was the get so basically I'll give a quick overview of what we were going to do so like when I refresh this page so basically upon this URL I am making a get request and on having the get request so basically this block of code gets executed and this block of wood gets executed and this tells that I had imported the form on the top of the file from dot form import Star you can import any form so when you use star symbol so I use form is equal to feedback form so this was the feedback form which I was referring to and then I was able to render this form on my on the frontend part of my application okay so basically what we are going to do first thing we are going to do is add bootstrap class to this form so what you are going to do wherever your input is defined inside forms.py file so you need to define a dictionary which has key value pair so basically this dictionary is redefined by attributes so ATT RS is equal to this is a symbol for dictionary so it has a key pair okay basically at the left it will have a keep a key and then on the right it will have a value so basically these attributes could be anything which could be Name ID class which refers to the basic HTML syntax you follow so what I'll do I'll Define a attribute class and I'll uh give it a value of form control form control so uh most of us would be thinking why only form control as the class because this is the default class present in the bootstrap so this will make a form responsive and for the uh another text area I'll do the same okay I'll basically quickly copy this uh yes and yeah now that's fine so when I move to my page I'll uh I would see a bootstrap has been added to my form yeah here you can see the bootstrap has been added to a form but this is this isn't responsive so what we are going to do I'll go to my my form dot to HTML and I'll add a div plus it will call medium six and I'll put this form inside a div okay and and what I'm going to do okay uh to get the form on the middle of the page I'll Define a style is equal to margin 0 or 2 okay now this is fine okay yeah now this form is is in the center of the page now this is good to check the responsiveness I'll press Ctrl shift I and yeah now this looks good okay there is some issue okay yeah it's fine okay now this is formally responsive okay so this was uh till the front end part now for the back end part what if I want to submit this form to submit this form the method should be post method okay and uh I'll generate a token for this which says person CRF underscore token so a token is necessary when I uh when you submit the form via post method okay and uh this is a form which I I had rendered and additionally I need a button also button type is going to submit class is equal to ptn so this is a short form button primary this is a default bootstrap class and I'll give the submit okay okay now this is fine and I'll when uh okay so here comes the button so I'll give a bit a little bit of style to this button style is equal to margin 0 or 2 yes okay okay it is it it is it is not in the center so I'll add display block okay and what I can do okay margin 0 or 2 and 0 for the bottom so uh what I'm going to do so this is the uh uh fold hand notation which says uh on the top I'll give one ram and on the left and the right Auto and on the bottom I'll give zero so this would give yeah so it gives a margin top of one rep and on the left and right width was Auto and the bottom it was Zero okay left and right Auto top is one and the bottom is zero so this is pretty fine now so I'll make uh now I'll move to the backend card and what I told you uh when I refresh this page okay so I was making a get request on this route so when I made a get request on this router you can sit on get request on this URL so the form had rendered but what if I make a post request when I would be making a post request basically I would be submitting the form okay so when I'm going to submit the form so what I'm going to do I'll make form is equal to feedback form request dot post okay uh sorry request dot post so I'll get all the values when the form has been submitted using a post method okay okay but still I'll make a if condition to check form dot is underscore valid uh is underscore valid to make sure the form is valid and I'll make title is equal to request dot post and title okay and subject so I'll make again a same request for the subject subject is equal to request dot post and subject okay now this file is fine and I would print Title Here add print subject here okay and I'll return an HTTP response okay but still I'll make a VAR is equal to Str om submitted and I'll give plus Str request Dot methods okay so this is fine till here yeah now I'll return an HTTP response of where okay if this form is not valid what I'm going to do so what I'm going to do I'm going to render the form again but okay and I Define my dictionary is equal to this dictionary is going to be same as this one here you can see form and form okay and this is this and I'll quickly copy this okay else okay now this looks fine this code I I'll quickly uh give a quick overview is the request dot method was get to this code of this block of code gets executed in which it says I'll render the form on the front end part okay when I submit this form so this block of code gets executed which says request dot method is equal is equal to post so form is go to feedback form I'll get all the values using request dot post if the form is valid then I'll get the two values that is subject and title then I'll print the title print the subject and I have given a name variable which says form submitted by request dot method and I will return the HTTP response of where else in the form was not valid so you need to uh check the uh that if the form was not valid so I would render the form on the fronted part again okay if the foremost not valid so what I'm going to do it says I'll test app debug okay but uh okay before this I'll restart my server okay yeah now it's fine okay I'll refresh this page okay I now when I refresh this page I made a get request uh so I rendered the form of the front end part so test I'll give a title and say app debug and I'll make now submit this form okay so I have submitted the form yeah now it says form submitted post so this was a method which I had defined so when I submit that is the form so this block of 4 gets executed and here you can see that I had executed two print statement here one was a title and one was a subject so title corresponds to test and this here you can see test was title and app debug was there in my subject part so so thank you guys thank you so much I'll catch up in the next tutorial so uh you need to be very careful by the writing this code you need to be very careful about writing which if condition is coming inside which if then else then L If part so you need to have a quick uh you need to have a good uh overview on this so like in this tutorial we are going to work with the alerts in Django form so basically alert handling in forms so in this tutorial we are going to handle alerts in Django there are two types of alert one is for error and another is Success so we will fail the form so we will fill the form we will form the validate and check form for both the cases use bootstrap on the front end to render and display messages so let's get started with this so till now we had a we had made a form so this one this was our form okay on the request method and the on the uh basically uh here you can see uh on the get request we used to render the form and the post request we used to submit the form so we would apply the error handling on the post method part so basically before this I will show you some process uh the process here is about that we have alerts in bootstrap so uh what we can see alerts provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages so there are basically many types of alert so this is a primary alert uh secondary success so be here so here you can see the primary alert is in blue color success is in green color danger is in red color and uh a warning is in yellow color so uh another type of alert here you can see is like uh which are dismissable in nature so here you can see the alerts which are indismissible in nature uh have a cross button on the right hand side which can be clicked and on the refer uh on the refreshment or when when I refresh this page so here you can see this alert message comes it comes up again so basically you can cross the button and dismiss the message uh for that purpose only so let's get started with this so first we will keep try to keep it simple so if the form is valid title is equal to request.post it is subject is due to request.post subject uh what I'll do I'll create my dictionary and irrespective of the result my dictionary is going to have the form feedback form okay irrespective of the result I'll make condition okay then my dictionary of success is equal to true and in the same way my dictionary of success message is going to form submitted okay and then what I'm going to do I'm going to return this page so I'll take request as a parameter my form.2.html context is equal to my dictionary and here you can see now I have returned the my form Dot myform2.html and context will do my dictionary so basically I would move to this part uh we we would use this and here you can see the its Alert warning so it earlier just just I told you you can have a quick remember that warning is for yellow uh dangerous for red and green is for Success okay uh what you can do alert alert success and this would okay and I will display the success message here but only I would display the success message only on one condition that is percent if success is equal to is equal to true then only I will display this so I would uh this is the end of the div block and I would end the condition person and if okay there's a slight error here all right uh uh I hope now it's right so I would Python manage.pyr and server okay so I will move to my phone on the get request I uh I get request I render the form and but on the post I will check the error handling so what we can do here I will type test uh title test subject and here you can see it says form submitted okay so uh okay okay uh there was a slight error because I missed the single s here alert alert success so it could not display the background color but I would refresh this page it says the form resubmission okay okay now it's pretty fine it says form submitted so we can add a margin top to this so basically this would help us out side is equal to margin top is equal to 1 Ram okay I'm not I know it's pretty fine uh we have a margin top and on the cross button it is dissipate so this is pretty cool uh with this for the same part we can do for the error also okay but for this but what we can do uh you've moved our music.py file this would be on else condition so first we will check the error uh I did this uh first because I wanted to have a quick idea of how this works okay but if title is not okay what we can do and this is our form okay uh and we can here add P class is equal to text muted note title should be capital okay so this says note title should be capital okay okay so when we move to our form okay now uh okay I'll save it here no no no this time I would make a get request and render the form okay I think it is throwing an error okay okay okay okay let me for the timing if one pass okay now I would render the form on get request now this is fine okay so it says title should be capital okay this was just so the case I am taking here okay now if title is not is equal to title Dot Upper so this is the string class in Python which which can be checked if title is going to write upper then uh we can uh what we can do we would do the same thing my dictionary of error is equal to true my dictionary of error message is equal to title title should be in capital letters okay title should be in capital okay I hope this is fine I have a Capital C here title should be in capital and then I would uh render the page on the same part okay my form dot will do HTML okay but I would only show the error only on one condition that would be if error should be true and this then I would show a error message okay and this should be my danger class okay so I hope now you have a clear idea what's happening so I would make a get request test title test subject okay now it says title should be in capital okay and if I make a uh okay um I'll make a test Title Here like in capital test subject or we can have this in small letters no issue test subject okay so it's a form submitted now I hope guys this is very clear to you okay basically in this one what we are going to do uh we are going to then there can be multiple errors in the form so like suppose I'll add a new entry to this and the entry would be emailed okay so here it I'll give it as a title as email yeah so email is a new title to my form uh sorry uh email is the new uh field added to my form okay now uh in goose.py file I'll also request email is equal to request dot post and I'll take email as a parameter so here you can see that in my forms.py I added a new field email a forms.carab field link is able to email and in in in the very same way it was a text input okay then I requested for email okay now what I'll do uh here we were trying to see that there can be multiple errors on the page so what we are going to do I will define an error flag error flag which should be false in the beginning so what we are going to do so first if title is not equal to title Dot Upper so I'll quickly remove all this uh so what we are trying to basically try to convey the idea that there can be multiple errors so if title is not equal to title or upper then error flag is equal to true that error is there okay and errors error message is equal to title should be in capital but this time one thing I'm going to change that errors isn't is an array or what you say list dot append error message okay so this is fine in the same way what I'm going to try to do that uh so here you can see that this is an extension to the previous tutorial so what I'm trying to Define here I'll Define a regular expression drag X okay and so basically this array X is used to define the email address so here you can see a DOT symbol with the add delete symbols uh so what I'm going to do Rec X okay so basically I have my email if not so before this I need to Define and import re so this is a default library in Python to use a regular expression so what I'm going to do I have my I have imported the library records the email is there so if not drag X sorry re dot search so search is used to determine the match the regex pattern regex comma email okay if this happens then what I'm going to do yes error flag will remain true error flag will remain too and uh errors dot append error message will come but this time the error message will change the error message would be error message is equal to not a valid email address okay so basically I'm trying to convey the idea that uh there's an error sorry so I'll remove this line if not re okay so basically I'm trying to convey that idea that if the if title is not right or offer that error flag remains true error message would be this and this will be dependent this would be appended in the errors list okay yeah good then I made a logical uh I made a if condition which state logically that uh if this is not a match or a search then error flag will remain true correct an error message will be not a valid email address and that would be this would be appended in the errors list okay okay new condition would be next condition if if error error flag is not equal to true if error flag is not equal to 2 so this is the third if conditional but this all is if else condition depends on your logic part how you can make them uh to be on Easy by making in such a way if error flag is not equal to true that there was no error means error fact is not equal to true then successes will do true and success messages is equal to form submitted okay so now what I'm going to do I would render this to myform2.txtml okay but I'll I'll give a quick overview if title is not equal to title Dot Upper then then if not register search if error flag is not equal to true then this return render request my form dot to dot HTML context is go to my dictionary so this would help me out in this so uh but before this I need to update my dictionary by dictionary is equal to I'll update my dictionary my dictionary of error is equal to error flag and my dictionary of errors is equal to errors so okay so this is fine so uh so I would make a uh I would so now this would render uh my dictionary to myform2.html okay okay uh before this what we can do now I will move to my form.2.html so basically yeah in advance I have done this if uh if error is equal to True yes for error in errors you need to print this error and this for Loop will end and this if condition would end okay so I would restart my server python manage.prm server so when I make a get request to my form so here you can see an email has been added okay uh I'll make a title test okay I'll keep keep this in lowercase test title test subject test mail but this is not an valid email address so here you can see title should be in capital and not a valid email address okay I'll make this test title so I'll make this in capital test title test subject and test me but this time the title is valid but the email is not valid so it should return me only this error let's submit this form yes it says not a valid email address only so test title test subject as the user at the red mail.com so it's a form submitted so I I have gone through all the test cases my form has passed so with this you can see that how the logic works so basically uh in the template part what I'm trying to do was if error is equal to true for for error it errors so basically I'll move to my views.py file here you can see my errors was this error arrays which I had made and this was the error flag so basically even what you can do also print my dictionary so this would help you to get a better idea test title test and test mail so so it says not a valid email address okay and uh what it says yeah here you can see the dictionary is like this the errors has not available so I'll move to my server I'll make a request okay now we can see that on request our server has started okay so I'll move to the urls.py file uh I'll go to this about page yes so it says about response absolutely working fine now in the same way I'll move to my form now I can see that on making a get request to this route a valid page should render so a valid page should render and it says yeah here you can see yeah my phone okay now I'll again make a request to an my form two okay I'll simply type 2 okay yeah now here we can see a page has come okay so uh until now I've been making a request to one valid route so there was no issue but as soon as as I make an invalid route let me type something my any page any page so it says page not found because this URL never existed by any page uh my any page new page even this not existed okay let me type something like some random characters uh even this random character URL does not existed so but we can simply see here you are seeing this error because you have debug result true in your English settings file change that to that change that to force and Django will display a standard 4040404 page so basically what I mentioned here so we will be seeing how we are able to integrate our own 404 page on debug 0 to 4 so basically uh again I'll give you a use case which will help us help us to have a better understanding so what we can do deep exclude Force so here you can see don't run with debug turned on in production so like when if we are changing debug is into Force this means that we are going to be in deployment mode so our application isn't deploying the application is in deployment mode so like uh it clearly says don't run with debug turned on in production so debug is not turned on so debug is false so it says so we are are actually trying to be in deployment mode so if you are in deployment mode you have to define the host so right now I have defined star which works on all the hosts okay so I'll run my server now this is fine I'll make a request to my server yeah this is Hello World absolutely working fine in the same way about absolutely working fine uh my my first page yeah or my home to any of the pages yeah absolutely working fine but now if I'm types of random characters and move to a URL it says not from the request resource was not found in This Server let me type something as my any page new page something like this even not found so now our application was in deployment mode but as soon uh so what we can do we can create our own four zero four page so basically what we are going to do we are going to move uh to move this side bootstrap we are going to work with the Jumbotron this time so like we are going to go to templates quickly create a 404.html okay absolutely fine uh and what I can do I'll copy this paste it here change the setting to 404 error page okay absolutely fine I'll move this heading good I'll copy this code word and part I'll paste it here good yes so as page not found so I'll give a heading that the page is not found and uh I'll give a URL which says okay so what I'll do this page something I'll give give a message a page does not uh something we can give any message this page is missing or does not exist something like uh we can give it as uh sorry this page is missing or does not exist okay so this is absolutely fine uh exists okay this page is missing or does not exist and what we are going to do go to r home page yeah this is fine and I should Define percent URL single quotes percent sign so basically we have to Define in this single course which route we want to move and we'll move to your short POI file yeah and the name would be index okay okay so this is fine okay and how we would render this page so basically your this is the europe.py file of your my first app now I'll move to urs.pify of first project okay so please don't concluse yourself with these two file this is my first project this is my first app and you need to define a 404 Handler so Handler 404 says I'll quickly copy this or even you can type Handler 404 which says uh you have to Define my app name so basically our app name is here my first app dot views so basically I'm referring to the views.py file and I've defined the function error underscore four zero underscore view okay error underscore 404 underscore View so this is working fine uh so it says that my first app.views.era underscore 404 underscore view does not exist because I have not defined it so I'll move to use.viewer file and I Define error underscore 404 underscore View which takes request as a parameter and even new parameter as exception here you can see okay exception and it will return render four zero four dot HTML okay so this is working fine okay now here you can see let me have a quick check handle four zero four this is fine and my first app dot views dot error underscores and review yeah this is fine yeah yeah absolutely fine okay now what I'll do I'll move to my page yeah this is my server absolutely working fine I'll move to an about page absolutely working fine now let me move to a random URL okay it says server error for 500. nothing is missing okay something has been deleted friend request okay okay I'm really sorry for this I had missed the request parameter here okay the uh this is absolutely normal you return render request then HTML page so you return render request and HTML page okay I'll then uh the re restart my server this is working fine and I'll make a random URL request so yeah now this is absolutely fine so it says uh page not found sorry this page is missing or does not exist and go to our home page so yeah if we go to our home page and you can see this time settings dot py file debug is due to force and uh and here that's how you can render our own 404 page so one thing I would like to mention here here that uh like this this is a GitHub link and we will this is the report should we are used to work like we used to learn new Concepts but from this from now on we're going to work with on this repository that's a Django projects uh like on like in this repository Django projects we are going to start building some projects initially this repository is empty but as soon as we start making projects I'll commit the changes okay so guys this is the the link okay I'll comment the changes as soon as you build projects and I'll update the file as well uh readme file so you can instructions I'll Define the instructions how you can run the project on your local machine as well okay so let's get started with this so basically today we are going to start with the calculator app of our Django so we are going to make a calculator app so the very I'll go to my repository so I'm inside my Repository so I'll click on new terminal so what you need to do so the very first command we are going to type is Django admin start project Django projects so in the end you define your Project's name so I've defined the Django project as my projects so here you can see the Django products folder has been created so I'll move inside my Django projects okay fine so I'll have a manage.py file inside this okay yeah this is absolutely fine so I'll I'll do uh okay one thing we can do uh what I can do do if I type python manage dot py okay run server I'll do first run server so this should start the server on my local machine yes the server has started so I'll type localhost colon okay so sorry to the mistake localhost colon 8000 okay yeah here you can see the server has started localhost colonies of eight thousand uh or you can move to this as well 127.0.0.1 colon 8000 okay so yeah now I type python manage Dot py start app calculator app data app okay I hope I'm correct with the spelling yes calculator app okay so the calculator app is created okay so uh what you can do okay Django projects here you can see that our app is is at the same directory level with the management.p WiFi okay now uh one thing you can do I'll create a virtual environment here so uh you need to uh you might have to install a virtual environment package as well yeah uh so I'll type virtual A and B my EnV so this would create an environment variable uh inside the project so yes the I hope the environment variable has been created okay uh for this virtual new A and B I would uh in case it throws an error so you might have to install a virtual environment packet using pip I guess it's pip install virtual EnV it's simpler or maybe I'll update this in next video okay if it throws an error okay so you can even check out or check out on the documentation as well okay so I have created a virtual EnV so uh uh what I need to do so so now uh I'll have to activate my virtual environment my A and B slash scripts slash activate Okay you please make sure of of the direction in the slash symbol is defined okay now you can see the virtual EnV has been activated now I'll type python manage dot Pui uh uh oh sorry okay I'm really sorry for this uh what you need to do uh now uh I'll if I start my start my server it won't start so I need to Define even I can try this out python manage.us start out okay start app sorry run server so what you can see you see it could not import Django because inside my environment Django is not installed so I'll just quickly install the Django inside my environment variable pipe installed Django okay so the Django will be installed uh in the uh like it would be installed in the environment variable so by the time it I'll give you a brief overview so like basically we are going to define the template directory static files uh like now we have created the project we have created the app now we are going to create a requirements.txt file as well so this is this will be all about develop environment then like in the upcoming we are going to work with front end front end part then back end part then a error handling so basically some new some new designs as well to how we can make our app beautiful like in the frontend part responsive so we're going to cover them as well okay so let's move to this okay it's getting installed okay uh so basically uh what we we are going to do we are take the input from the user it will help us to uh we will take input from the user then we will like even the mathematical inputs can have some error we'll check check errors as like like division by zero error we check some error handing and this at that at level at that level as well okay so yeah now here you can see your uh environment has been installed and I'll type please requirements requirements Dot txt okay yeah here you can see the requirement.txt has been created so I'll move to commercial txt now here you can see it's like now if you want to do we can also do one thing uh like uh you can try Ctrl f and you can simply type quick equal equal to uh I have tried this thing like you can replace with this with greater than equal to sign like this would help you like in if if in any uh like in any other uh uh like in upcoming uh if there's any another version like 3.0.0 3.0.4 so like 3.0.4 3.0.4 so like in uh like in any future if you have a new version so this would update to that version because it has a greater than equal to sign so any version greater than equal to 3.0.4 will be updated so you can apply this to your requirements.txt file to get get updated or uh if it's if it might throw error you can revert back to this uh with the equal equal to sign okay you can simply do greater than equal to then replace with the recruit design okay you can try this out okay so because uh I have tried this one as once okay so now uh the requirement with txt file has been created now we will move to our settings.py file quickly okay this is the settings.py file okay so one thing you need to Define OS dot path dot join okay I'll Define base directory yeah good and templates okay okay yeah good and I'll Define a static URL is go to URL and you need to find static file directory as os.part.joinbase.static folder I'm going to copy this yes good yes so I'll do this I'll move into my Django projects okay so what you need to do so at this level you need to Define two folders one is templates good another is static okay so this is good okay and what we are going to do uh now what we can do we do like we are going to move to our uh uh urls.pui file Okay so you are yeah so this is include path comma include okay and you can define a path to here as calculator app include child school later see you later Okay calculator app dot URS okay so I'll run my server but okay now I'm inside my calculator app so I'll create a new file urh dot py file here so basically okay I'll do one thing yes new file URLs Dot py fine absolutely fine and from here what I can do I'll quickly copy this paste it here good and I'll Define URL patterns as well okay okay okay uh okay I'll Define from Dot sorry from dot import views so this would bind my urls.piva file to views and I'll give to use views dot index name is equal to index yes okay but I have to go to my views.py file as well yes that's why I'll Define def index request okay and Value Point from Django dot HTTP import http response athlete response yes good and return HTTP response server started okay so this should work now pythonman.py run server I hope there's no error yes okay and I'll move to calculator yeah good absolutely fine so we are right now I have created the development environment so like just for the last last few seconds I was like why I was doing something uh I was implementing it so like I'll give quick quick overview settings.viewer file you're done you all do it so what I try to do that uh like uh on the calculator app okay so basically I used to uh like in the previous tutorial I used to keep it as a blank but right right now I've done this as localhost calculator app because there might be a personality that we might be creating many apps into this single project okay so like on this calculated app route uh like if I go to this route like I here you can see character app server started but if I move to this so this is the okay okay okay slash admin okay we will be discussing about Django admin as well so I'll try to fix this error in the next tutorial uh till then you can move to Cal localhost colon 8000 calculator app so like here you can see the server has started so uh like in this uh it included the calculator app.urs and now like in this path views.index of squad and I return an HTTP response of server started okay so so like in the previous the previous lecture what we did uh we uh I will run my server python manage.py run server so basically I'll move to local rows colon 8000 yeah good so I was uh like uh now what what I'm trying to show that our project can has multiple apps so this is the root uh root app of our project so I'll clarify this like as soon as I move to Calculator app uh it says the calculator app is running so like in the last in the end of the video last video I was having some I was having error at this point like when I used to do localhost colon 8000 induced to throw me an error that it could not find the PATH okay something like 404 error page so like now what I how did I solve this I uh like a local host colon 8000 shows me the uh so the server has started and a calculator app shows the calculator app is running at this route we are going to make an app so what I did uh what I did so I'll move to my urls.py file of the Django projects good so like in this you can see uh what I did uh like uh I created a like this is my calculator app okay good now I created a new app with the name root app dot with the name root app and I link the default path to the root app.urls and I'll open the root app.url so it says path like views Dot root m is equal to root and I'll move and it returned an HTTP respond the rule the server has started so this basically this corresponder root app so I made a root app to make sure that it doesn't throw me an error on the main round okay so basically I uh why I did this because we were going to we are going to get multiple apps on this single project so when I move to my app calculator apps it says calculator app is running so absolutely fine okay now one thing we are going to do so what we can do I'll close uh close to the right yeah good okay I'll close this as well and close this as well okay but now I'm inside my settings.pify so uh I did OS dot part dot join page directory and templates basically we are going to refer to the calculator app template so I'll give a slash calculator calculator app okay so this is final calculator app is a folder which I am going to Define in templates okay so yeah here you you can see what I uh was uh what I was talking about that I created a root app and then a calculator app so this is absolutely fine now taken okay uh now I'll move inside my templates and create a new folder with the name calculator app you're good and I'll create okay so I'll I moved inside my calculator app templates now I'll move to that folder templates oh what I'm going to do I'll move to the templates folder templates yeah here it is yeah templates okay and now I'll do my inside the templates okay good and I'll create new file and type index Dot HTML okay this is fine yeah okay so I'm inside my templates calculator app index.html you're good so what I can do now is uh what I'll do I go to I'll go to the bootstrap website okay I'll go to the documentation getting started so I'll copy the base template here I'll quickly copy this paste it in my indicator HTML I'll save this file as well okay now the server has restarted so I'll go to my page and okay okay but I forgot to do one thing what I need to do I'll move to use dot py file of the calculator app and instead of this I'll return a page return render request and then index dot HTML so I'll refresh this page okay is there any error okay okay I'll refresh this page yeah it says hello word so basically it's all working fine now what we have to do like uh we have to create a footer uh like nav bar uh we have to do a responsive design as well so we'll quickly now do the work so what we can do is quickly search out for navbar okay yeah here's the navbar okay I can copy this I'll move to my index.html and remove the heading okay first I'll give a title as Django calculator app so this is going to be a single page application so uh okay uh so this is going to be a single page application which I can copy this so we don't need a form I'll cut this even I don't listen okay okay okay okay so basically I don't need the knock down also so I can cut this okay uh this uh okay first I'll type Django calculator app good and basically when I don't need this also um not even okay okay Django calculator app okay I can save this then refresh my page to see what's happening yeah uh now it's absolutely fine uh instead of this I'll give an about about okay and I'll give this an about foreign pressing Ctrl shift I yes this is absolutely working fine okay so so yeah uh we'll try to improve the uh or we will try to improve uh on this as well so uh basically for footer what we can do okay okay so okay I I went to cards okay okay we'll do one thing okay what we can do uh if classes with card card body yeah good so we are inside uh okay now we'll move to that as well so we are inside our body div class is equal to card okay so before this I need to define a container as well if class is equal to container fluid good and that class is equal to row div class is going to call md6 and then uh div class equal to yeah card then a card body would do yes card body as well okay and I'll go to the page yes entirely working fine and I'll give a style is equal to margin 0 Auto okay so this is absolutely fine I'll give us I'll give a style equal to margin 0 and auto I'll give a style as style is good margin 0 Auto so the style is in the would be in the middle and here you can see I'll Define a form inside it inside it uh and in this I quickly Define the forms okay div Clause is going to form group so basically we have to define a div class is able to form group good now we have to Define inside the and label okay so a class of form control has to be defined here so input basically I'm going to type input type is going to search because our class is equal to uh okay sorry for this class is going to form control name is equal to I'll Define this as query ID is equal to query as well okay and I hope this is and I have to define a method here method is going to get action is equal to I'll Define the action as well Okay so until the time you can keep a hash here okay I have refreshed the page and yeah so so even I have to define a margin top as well so uh this is one ram then Auto then bottom is zero so this is the forehand rotation top uh this this go then top left is the bottom then again right yeah now this is fine okay so I I have to Define two input so basically in this I'm going to Define button group button group so basically the button group would work in this way or we can do what we can do I am inside my form card body so what I can do input type is equal to submit sorry submit class is equal to form button button primary okay and I have to Define off as new input also because if the user input type is equal to reset okay okay class will go to button button primary so what we can do refresh the page okay yeah this is absolutely working fine we will try to give different colors to the butter okay and now we will add the footer okay the photo would be in the same way we are going to do this Dev class is equal to container fluid if class is equal to row depth def class is going to roll then uh well to div class we will do all 12 okay and I'll give this as I'll Define this as bucket let me do one thing I'll Define this as photo class is able to fixed bottom because I want this to be remain at the bottom of the screen okay and I'll Define as a p okay put it yes okay here you can see the footer is being displayed but the what I can do background light will this work okay okay okay okay let me check one thing now is go to background right yes number light I'm trying to give the same color to the footer as I have but okay okay I'll check this out but like we have made a raw structure to our application so now we would we would be completing it so like the first thing I would like to show you about the photo uh we had some issues in the footer like in the last tutorial so like uh right click here click on X inspect and try to do something like this is our footer so what I can do I can add a background of black uh oh no sorry black yeah now it's absolutely working fine uh the text color should be white yeah it's good and text align should be Center yeah that's really working right so we will comment the changes here so I I'll add a style here back row is equal to Black good and we'll make color is equal to White the hair color will represent a text color white good and the text align should be uh Center good good so what I want to do uh we have this class is container fluid and I'll give a margin bottom here margin bottom of at least 20 Ram to be uh to give uh like okay this would help me out like to have a screwable view downside okay so like uh now it's working fine so I'll move to the container for fluid okay this is the container fluid yes yes so like here you can see I have given a margin of 29 22 Ram 24 Ram so uh like uh I'll yeah okay I'll look into this okay uh so next thing we can do uh what we can do is uh we have about so like uh we want a image here so we'll add image class is equal to image fluid okay now I I Define a source to it source is equal to percent static okay and then a person sign an end symbol then logo Dot jpg I think this should be fine okay it is showing an error okay yeah at the top of the template you need to Define percent load static foreign load static yeah so it is three okay okay let me see like I'm in my templates static folder or the name is main.jpj sorry okay I'll move to the link and this is main Dot JP okay so we have an image here also good so like it's fine so what we can do uh like uh I'll align this button to the center and what we can do uh like uh this is button button primary so I'll give success button success and this is as button Danger okay and I'll give a style is equal to this day block okay so this would uh I'll try to uh margin 0 Auto and I'll apply the same setting to the another button as well okay so I'll refresh this page yeah okay okay what we can do okay and we give this as another road div class is equal to row good and there class is going to call md6 and what I'll do okay I'll press continue next we and the class is going to call md6 foreign okay um what we can do is we will inspect it here you can see the this is a row which is showing okay okay the problem was that my call wasn't inside the row okay so this uh now this this is fine okay my call wasn't inside the row so now it is inside the row yeah no it's absolutely working fine okay so we have two buttons submit and reset okay what why was it using the reset okay if I top I type n equation two plus three plus five okay something so the reset button would reset the text okay okay so this is absolutely we can find okay what we can do here uh we can provide uh like uh what we can provide some text at the footer thanks for using our app okay we can provide this and in the same way what we can do we'll move to the body part uh what you we can right click here so this is looks good and here you can see for the prefronted part you need to be do some like inspect and do something because unite might not be accurate at the first time okay so okay what you can do uh I'll give a class and inside my body so I'll give it here I am inside my body I'll give a whole class a background light this should work so this would yeah here you can see my body has the same color as the nav path okay so this gives me a glossy interference okay uh it might be just I want to tell you that you can give any color you want you can right click here so here you can see the background color and this you can do color inspector and try to give any color of your choice okay what you want you can give any color so this this one I am trying to keep things basic it's up to you you want to make any changes okay and now what can we can do I'll refresh this page yeah good so what we can do uh so we have basically done with this so I'll try to give a one thing I had mentioned about the margin bottom here so let me check with this okay yes this is the margin bottom yeah yeah I have increased yeah uh that's why I was saying I was increased to trying to increase the margin bottom like it would give you a flexible view down there as well because next we are going to create the about part so like uh we'll give up about block and Dev class is called md6 again I was inside my form then inside my this is the row end of the row okay then I'll have again after wrote this class is equal to row and they have class is going to call md6 I'll give a style is equal to margin 0 Auto something a good like we'll use some typography here typo graphy so we can have various things that is one thing you can use here is a display port or maybe lead as well what kind you want to use so like maybe you can use what I can do use P class is equal to display we can use display for about then we can give an HR tag it will create a line and in there we can use P class is equal to lead our calculator app can perform mathematical operations okay now I'll refresh this page yeah now okay it's it's uh like it's fine uh what we can do uh I'll give a margin top of one ram one ram then Auto zero then Auto okay and one thing I wanted to show you here that I'll give this row or maybe you can say column ID is equal to about maybe name is about as well name is equal to about and when at the top of my nav bar if I come here I'll give it a hash about because hash depends to the ID okay so basically even in the even the vs code says like I click on here I get to this ID okay so this is absolutely working fine okay and uh when I'm here I click on about I get down to here so basically this is this was an example how you can use ID with the reference tag okay okay now if I come to Ctrl shift I okay okay uh and I click on about I get to the about part okay if it can be in lengthy paragraph as well okay uh it's up to you uh uh and I'll give as a style is equal to text line is equal to Center okay uh even to The Heading also X line is equal to Center yeah good good so like we we are like almost uh done with the front end so this was the layout of our app so this was responsive you can press Ctrl shift I or you can simply right click and click inspect so this is the responsive nature of of our app so basically we can type anything two plus three and we are going to reset so this uh we we are able to implement this functionality the next part we are going to do basically we are going to add instructions block as well as Define a form submission URL to the page and then we will build the backend logic with exception handling as well okay so let's get started with this tutorial so basically what we can do uh so this will we can define a list Li class is equal to nav item okay then uh same way a anchor tag uh which is represented presented by a nav link good and hrf is equal to Hash instructions instructions okay and uh instructions instructions yeah look so this works fine so we can uh I would uh we can move to the page and see this uh okay I'll uh yes we can see here instruction has come but as soon as click because I have not defined instructions ID so uh what we can do we can move to this and we can see this row which represents the about block so I'll copy this row Ctrl C and then I press Ctrl V so I'll do this as instructions instructions okay good and I have to define a instruction ID here as well because hash instructions yeah good so I have defined the hash instructions so so I can uh so we can Define some instructions so how we can Define them what we can do we can move to bootstrap and use list list group so in this way we can run a new thing also this is a list Group which also have list group item in it so here are many you can choose any style of your uh so I'll use this one okay so what I can do uh I'll move this HR sorry paragraph and put this disk group and I'll move to the page and yeah here you can see here the instructions are defined so when I click on instructions instructions okay there might be some issues hash instructions okay there is an issue hash okay okay you don't need to define a hash inside because when I was referring here okay let me go over yeah hash instructions when I click on this I'll move to this because this ID is only instructions so there was by mistake and hash instructions so uh okay okay I'll refresh this page yeah good now I click on instructions I move to this block okay this is uh now this is working fine so we can Define some instructions here like uh plus sign we can Define uh like we can Define some instructions Plus for addition okay and simply something like star for multiplication okay uh something like uh and uh we can Define this for division okay and basically we're working in Python so we might be using a Python and this is for uh flow division floor division yeah and we can cry uh also like this four minus okay okay so basically we have defined some instruction like Plus for addition minus multiplication division flow division we can under under Define like uh something like this also uh parenthesis also we can Define okay we can Define or we can Define as brackets brackets okay or we can simply type parenthesis I think parenthesis okay so basically parentheses are used to define a priority like if you want to evaluate first that parenthesis then next so we would move to the page and I'll refresh this page okay so this looks good Plus for addition minus multiplication division flow Division and parenthesis okay so this looks fine so what we can do Define we can define a new URL here so we will try now we'll move to some backend part so so I'll move to urge.py file so I'll Define a path is equal to submit query okay and Views Dot submit query and I'll give this a name as equal to submit query okay so I will Define some single quotes here submit query okay now now this is fine now uh I'm referring to the submit query in use folder so I go to views so this is showing me an error because since I have not defined a view a submit query in My Views so they have to Define submit submit query okay and I'll take a request as a parameter and what I can do uh till now I will find past statement here okay so this looks fine and now in my HTML page I would move to my HTML page and what I can do I have an action here yes percent URL is equal to submit query yes this looks fine okay so this looks fine uh uh yeah this is submit query fine now I would move to my submit query block use dot submit query yes okay uh and I'll return uh what I can do I'll take Q as a parameter a queue as a parameter and request Dot get query because I would show one thing that inside my form I can move to the form uh yeah uh yeah here you can see that input type is going to text form control and here the name is query so you should have the same name for the get parameter as well so in my view dot UI file I'm that's why I'm so type request dot query because this refers to the same name in the form viewer referring to so what we can do so I will return an HTTP response of Q okay so this would uh this should work fine now I'll move to the page and I'll refresh this okay this is still now find two plus three star five so I should submit this yeah now this is working fine here you can see that uh I went to the route as so I'll quick quickly give a overview of this what I did so here you can see that uh first uh I defined a inside my number I give hash instructions and defined instructions block so basically you can this this one instruction Plus for addition minus multiplication division flow division parenthesis okay now then I went to urs.py file then I defined a path submit query which equals the function views.submit query the name is going to submit query then I went to the views.py file then I did request dot get query and Q is equal to this okay so return HTTP response response of Q okay so this is fine what can do also in the same way we can return a Json response as well uh for this you have to import Json response Json response and you can do Json response of Q so I'll make a get request okay uh what for this what do you need to do you need to define a Json dictionary and here you can Define q is equal to Q and uh and then I have to return a Json dictionary yeah here you can see now this isn't working as a Json object which says queue parameter and then two plus three star five okay so uh for a Json response you have to define a dictionary because then it works like a Json Json object okay so in this way we can uh Define an HTTP response as well so yeah no this is fine so we can I'll quickly do this yeah this is working fine okay so I'll move to the page okay I'll type something else minus 2 then reset button I'll copy this reset button reset button works fine I'll paste it here and submit yeah now this is working fine so basically what we are going to do we would in this tutorial what we are going to do the evaluation of query and adding a try accept Block in this tutorial this continuation of tutorial number 20 in this we would evaluate query as well as ADD try accept block so we will Implement evaluation try accept block and render to frontend part so this is going to be an interesting tutorial so let's get started with this so basically till now we had defined a submit query route and we were taking request.equate query and Q then we returned an HTT response of queue so basically what we can do I can type any method mathematical equation that is two plus three so I would submit this and it returns me two plus three so this looks good so we can move to the back back page home page index page so basically this we are making a application so basically about then instructions so you can check check response in nature as well Ctrl shift I okay and this is the nav bar and then instruction on this so uh what we can also try like if you scroll down the page what you see the nav bar is navbar we cannot see the number on the top if we scroll down the page like we are on the top of the page as soon as you scroll down the page we don't see the number on the top so this is like what you can do on the number class we can move to the navbar class and try type fixed talk so what would it do like I'll refresh this page so like a refresh this page and you can see here's a number okay and when you press Ctrl shift I so when you scroll down the page you see the number is fixed on the top so this is an additional utility off to your front end part if you want to carry on with this then is absolutely fine so I just showed you like you can fix the number on top when you scroll down the page so as soon as I remove this fixed top fix top so what I observe when I refresh this okay so number is looking on the top but as soon as I scroll it disappears so you can choose the functionality to your part if you want to use the fixed top additional utility of number okay so now we move to use dot py file so we would add a try except block try if this is successful and accept okay so this is fine so what we are going to do we are taking an answer is equal to eval a Val is an inbred is an inbuilt function in Python which takes a string as a string as a mathematical equation then evaluates it and returns an uh basically uh uh answer to that mathematical equation okay so what you can do answer is equal to a Val Q then I would Define my dictionary my dictionary so basically the queue would remain the queue okay and the uh answer would be the answer and if this operation is successfully if this tribe block gets executed so I would say error is false okay so this should work fine till now and if uh if uh uh what I can do if if this is true like what I mean to say if this operation is successful then I would return so render return render request then index.html and then I would context is equal to my dictionary okay if this is true then uh till till the time being I would say pass is equal to uh I would try to add a pass statement to the accept block because it was showing an error because uh so this should work fine okay uh now what I can do if this is true then this should work fine okay then uh like I'll move to my index.html this is a navbar navbar okay fine yeah so this is the container fluid so Dave plus is equal to rho then div class is equal to call MD six uh style would be margin Auto zero style will be margin 0 Auto okay so if this okay what I can do percent if error so basically per person if error because I am trying to say if error means if error was true so it would show the error okay so if true then I would do something else if it error is fault I mean there is no error then I would use else part to show the result then I would end this end if I would end this if else equation with NF tag okay this is uh this looks good okay so person end if if error percent else okay good so what I can do uh alert I'll move to the alert and I'll copy this and if this isn't error okay so what I can do I'll quickly if error sorry there is an error yes or you can simply type sorry error error is fine strong and to do this uh you would use Alert warning not alert Danger okay and in the else part you need to show that if that result was successfully so I'll copy this okay and I'll use alert alert success so first we are going to test our application so uh we'll move to the page I'll refresh this okay so first okay so there is some issue here with the okay div class is equal to alert okay that class is able to call md6 okay I need to check this like if error yes yes okay I'll move this equation here okay there if Clause will call md6 yes and here is the row yes yeah now this is absolutely working fine and error is showing me in green color let me check this okay yeah okay okay okay because this was answer okay yeah okay okay so let me go with this two plus three yeah two plus three is five so this looks fine okay so yes uh two plus three is equal to five so let me do perform some mathematical equation two plus three star four teen okay yeah this is good good and let me Define some equation uh let me do 2 plus 3 divided by 2 like this would divide it to 5 then 5 divided by 2 2.5 this should return 2.5 yes but if I do the same equation with the flow division that is 2. okay uh we can try some more mathematical operations like 2 to the power three yeah this is eight so what you can do so like here you can add add this like double star for exponential exponential like you can add this double star for exponential okay and in the same way you can add modernist modulus as well mod so this would uh like this sort of mod operation okay uh so basically mod operation is to to get a uh you can I'll quickly perform more operation like this is 10 modulus three so it should give one I guess yes this is one so absolutely correct so like I would quickly explain this uh so uh like we added exponential operator as well quickly explain uh five double star five so and then minus 2. so this is 25 uh okay I'll pack it quickly put places here so this is 25 minus 23 huh now there might be some error 5 okay okay I made a mistake I'm really sorry for that that was 5 to the power five if I'm not wrong that is 5 to the power 5 then minus 2 okay so the 5 to the power 5 was 3125 then minus two return three one two three basically what I meant was 5 Square so that was 5 put a double star two minus 2 that is 5 square is 25 minus 2 is 23. so basically we are tested with the application and one thing I would show then as soon as I type 1 divided by 0 uh this is an error so it should return me an error so it returned then return an HTTP response object so we'll go to the use.py file so so we'll continue this my dictionary have error is equal to true okay and in the same way my dictionary of error is equal to true so what you can do or you can define a new dictionary here error is true and I should return the same page with the context result to my dictionary yes so I have now now I will go back to the page now 1 divided by 0 yeah now this works absolutely fine that 1 divided by 0 was an error so it wrote threw me an error okay then again there is an issue with the front end part so let me check if plus is equal to yes new class if error okay if error there's an error on this front end on the front end part let me check okay then I will show this is a div okay so this difficult to call MD and this due to ends to row okay if this error then you display this row else on the else part what we can do div class is equal to row okay good then again I'll Define sorry sorry Dev class is equal to call md6 yes yes now I would close this day okay this is a div now this is a div to the call and another tip to the row and this is the container this should not be true container fluid yes now I will move to the page yeah now this is absolutely looking fine now one divided by zero so we'll quickly test the application one divided by 0 error yeah down the front end is good uh and quickly two plus three is equal to five yeah two plus three is equal to five and this is on the left okay let me check let me check this is a call md6 hit error okay okay let me move this okay let me click on inspect inspect I I am this call md6 margin 0 Auto okay let me change the view edit I'll add a laptop screen yeah this is working fine this is now this is I'm inside the row call is root mb6 child is equal to margin 0 Auto yes okay okay okay okay yes type is equal to margin 0 Auto so yes now this should work okay we'll quickly two plus three is equal to 5 well we'll type uh two plus three star four 14 are good now 1 divided by 0 error so basically you need to tackle errors when the because now we are completely done with the application here you can see like we get a error on evaluating on when we put 0 as an input uh let me type 1 minus 1 uh this should yeah return zero now absolutely absolutely fine so let me type some random words like something something has random and what does it show so that shows an error as well okay on random input so basically you can put numbers like uh you can put Google put numbers then reset it okay then again put numbers then submit here then 14 then 1 0 it will show error yeah on random text on random text it would also show error so guys you are completely done with our application so thank you guys thank you so much I'll catch up in the next lecture so basically the error on the front end part how I resolved it I'll quickly if there was an error so I made a new row particular Row for that okay so it and the call md6 was on the margin 0 Auto Center and if there is no error so I would return the answer and in the same way what you can do you can simply add Q is equal to this so basically this would return the query as well so so we can do two plus three yes so here it says 2 plus 3 is equal to 5 so so this is absolutely correct so yeah now this looks application looks pretty good so you can try out the front end part so just just try to will also try the responsive nature of this app as well so I have now Ctrl shift I uh okay so basically I'll try something 2 double star 3 okay so 2 double star is equal to 8 yeah so guys this is absolutely fine so thank you guys thank you so much I'll catch up in the next lecture so I have to uh added some exponential as modulus operator you can try out some modulus operator that 10 mod 5 10 mod 5 so this should be zero yes so thank you guys thank you so much I'll catch you in the next lecture so thank you so much hello everyone so like uh hello everyone I saw an error in this application like when we go to the index page without any query submission I see a equal to sign so actually this equal to sign is basically to do to this else part so we need to create a just a little bit different logic so what you can do uh we can do we will move to views dot POI file and here we can do result result is equal to true okay yes and I'll quickly copy this and in this part I will do result if if the error the error is false then resulted should true it will error is true then result should be false okay good now I would move to my index.html page so I would if this condition with an end a person end if and I would give this else part as if result okay so this is this looks good and this would a wider error so I'll quickly test my application when I move to the index page yes now the equal to sign has gone now I would query two plus three is Rule to submit yes 5 is good then 1 plus 0 then error should be there yeah but when I move to the index page when I move to the index page so there is no equal to sign so so this is the GitHub link of our repository you can move to this project download this project uh uh I've defined all the instructions and I would be updating the instructions soon because now we are going to working on a new app and basically we are going to work in the same repository so basically I wanted to do this because we are going to make inside a single Django project we are basically going to develop two apps so I would Define few changes how you can use two apps inside a single project so main motive would be it because we would be using the same template and I would tell you how you can use the same template and defining the other backend part so this how this way how you can use the basic template which we used in our previous app in this app as well and I would defining which changes you have to do so this would help you out so let's get started so basically in this we are going to design a Django voting app so in this app we have a a list of programming programming languages which the user in in that we would provide realtime suggestions under the search like suppose any user attacks the letter J then we would provide them suggestions the programming languages starting with the letter j such as Java or JavaScript or same in the if we type P then we would have p is the like Perl programming or programming language python so in this like COC stands for C and C plus plus so we will be providing suggestions like in the P we could also Define a suggestion under PHP as well so like in this tutorial we are going to create a voting app we are going to start with this and we vote for each programming language then we use a progress bar that how many words they have got and we then would return or render a progress progress bar on the front end part and we would update the vote for each language if we vote for more okay so let's get started with this so basically uh this is my server so the server has started okay because I have so basically I would Define some some few changes like this is my settings.py file so uh earlier it was template slash calculator app but now it is voting app because we would be referring to the templates folder so I would move to the templates folder yeah this is the templates folder so it it has two folders the one is this for calculator app and another is for voting app so we are referring to the voting app folder inside the templates so uh for the earlier app we used to refer calculator app so you need to define a change calculator app if you are using calculator app and then if you are using voting app then you need to win voting app so basically what we did we created the same HTML page okay now uh then for calculator app if you want to use then we need to define template slash calculator app if we are going to run the calculator app okay and if you want to run the voting app we need to define template slash voting app okay so this is the main uh change we need to Define so the please take care about it and I will Define this in in the repository instructions as well okay and then next okay now we'll move to urls.py file okay uh let me do one thing urls.py file of Django projects okay so basically uh when I do okay uh uh so uh this is calculator app so include calculator app dot URLs so for voting app we will do voting app include voting app dot URLs this is very simple okay so basically in the same way I'll give give a quick overview for templates we have templates folder let me again show you the templates folder yes templates for calculator app templates for voting app then urls.py file for calculator app as well and voting app as well okay now we will move to urls.py file so basically I'm clicking on new rs.pi file voting app okay so this is very similar we have done this as earlier as well so like we have uh like URL pattern path views dot index name is equal to index now if I go to views dot py file so I'll move to the views.py file or voting app okay so you uh this is a backend logic group to also working on okay uh so before this what we can do so this is the index so we can uh what we can do uh we need to generate a let me do one thing or we can do what we can do I'll run the server okay and then I'll move to voting app yeah here you can see uh like this is Django voting app Okay and like I've defined few changes I'll move to index.html file so basically when I'm moving to index.html file I'm moving to the voting app okay so this looks fine okay so I changed the title Django voting app I will find as Django voting app I'll move to the about and instructions so pick your favorite language okay so you need to Define in this and pick your favorite favorite language and vote okay and vote okay this is very simple then select your language and see result this is a basic instructions okay in the Napper I Define some changes you can see like in the nav class navbar Doc and background is dark so here you can see this navbar dock refers to this and background diagram and show this color so here you can see the number has been dark in color so to see the response in nature we can press Ctrl shift I okay okay so here you can see it's good okay we have the nav bar so it's working fine so in the about pick your favorite language select your language and see results okay so in this next like uh so basically uh we are going to Define uh and one thing we need to make sure that uh that in the form uh I had defined uh the image like I'm referring to the static folder okay let me go to the static folder this is main.jpg okay and this is main2.jpg okay so so basically in main.jpg this was referring to the calculator app and this is main2.jpg and this is referring to this coding background structure okay so basically so like uh and the good part is that index.html still exists so this is the index.html of calculator app so this is uh this is the index.html of calculator app and this is the all logic we had written if error if and result okay and here you can see here you can see the nav bar is equal to I can show you one thing the navbar light and never background is light that this is for the calculator app Okay and like in this uh uh even the image we had made also that was main.jpg so here I can try to show the similarities between that under the same rank of project we are making two apps and basically I wanted to show you one thing that we are using the same template for both the apps without writing the code as much and just making the modification Necessities we need it okay so this is also good so basically I'll just a quick hint like if we want to use calculator app you need to define template slash calculator app here okay so very quick overview the templates calculator app is there and uh the same way templates voting app is there and then both of them have index.html index.html one has a different image one has another image and background dark and background light for different respective nav bars what I have defined so in order to run the respective ad what you need to do uh you need to define template slash calculator app when you are going to run the calculator app and templates are floating app when you are going to run the voting app so let me very clear with this so it doesn't create an issue okay so basically what I wanted to do is I want you to solve uh to get uh further like a move on with the back end part also because we are going to use this readymade template which is help us in the front end time I want you to solve one coding problem here because this will help you to make a backend logic so I'll type Ctrl n like you have an array okay and it has all the elements uh like it can be any elements one two two comma three comma three comma three or something like mixed numbers as well or like four comma four comma four okay okay it might not be necessary it is sorted I'll I'll give the seven two one three four five six okay okay uh what I can do this is the array okay I'll copy this okay I'll open the page okay sorry sorry I'll open the ideally yes okay so this is the array so what I want you to do like uh I want you to uh get the uh frequency of each element okay so like uh what I want to tell you that if I do array dot count one okay so it returns three like three one is three times this is a one this is a one this is a one so three times three so like but I want you to do like uh uh like what I want you to do like basically I want you to design a data structure in such a way because this this is very necessary which sources frequency of each element in like a frequency of each element of the array it stores in itself so you want to design a data structure so so I would give you a hint like in this tutorial what you can do you can define a dictionary as a data structure in which a key will be element of array okay good and the value will be frequency okay so it might not be necessary that array should be sorted or unsorted it could be anything random number sorted unsorted that is not the case of and if a new element is added to the array you should update the frequency okay so then update the frequency update the frequency okay so you need to Define like uh when you Traverse the array for or till the time you can do one thing you can uh you can be like familiar with this or this is your array you need to define a data structure which would I am giving you a hint that you need to define a dictionary okay dictionary okay so dictionary is the data structure you are going to use so so basically key will be the element of the array and value will be the frequency so you need to find in such a way okay so you can think on this problem because this problem is very necessary for us to think on the back end part okay until time what we have seen like uh like images being changed about change and information okay I'll update the information part ahead okay like when I click on instruction this or instructions part I'll move to this and about working fine okay and uh I've changed the image as well as number so uh one instruction important instruction in order to use a calculator app you need to change here template starch calculator app and temperature template slash calculator app for calculate app and template slash voting app for the voting app okay in order to run the respective apps okay so till now we are working on voting app so we have defined temperature slash voting app so I'll catch up you in the next tutorial so like in the previous this tutorial we were working on uh like uh we were going to make a voting app so basically I gave a coding problem in the end so basically in this we are going to solve a coding problem and adding list uh list of programming languages and batches to our front end so we will check this out so just uh let's get started with this so basically I told you that you can work with the uh basically I gave you a coding problem in which I told you that you can create a like in which I told you that you can find the frequency of each each element in the array so let's solve that problem because I told you that's very necessary to solve the problem because it will help you to create a uh backend logic so basically let's start with this so basically I have an array so what you can do I have elements in it like Let It Be random elements 56 89 1 2 7 9 6 6 2 3 1 4 5 6 8 9 9 9 then 5 54 then again 56 then again 89 let it be a wrong array because it will help you to get the logic clear then seven then one again two okay so this fine this is fine so what I need to Define I need to find the like in the key part I I told you that we will be designing a data structure such that the key would be having the element the key should be element and the value should be frequency frequency of element frequency of element so basically uh what I mean by frequency of element that in this you need to find the frequency of each element okay so the the K should be element and the value should be frequency of of element present present in that array okay so I'll Define a dictionary first so my dictionary so so I can initialize the dictionary with this infrastructure you can initialize any data structure let it be a list set Str you can Define any data structure like this so this is very helpful so this is a dictionary my dictionary okay then I would Traverse the array part element in Array okay okay if if element not in my dictionary okay dictionary then you would initialize that frequency of like you have found that element and now that is not in dictionary then you need to initialize the first two frequency that the very first frequency you get that element okay okay then if element not in my dictionary then my dictionary my dictionary then here the key would be the I told you I told you as earlier the key would be element is equal to 1 else now as as soon as you keep on getting the element you need to update the frequency my dictionary this will be plus equal to 1 okay this is absolute line for element and array if element not in my dictionary if you uh if you find the first occurrence of that element you need to initialize the frequency with one else my dictionary of element plus is equal to one uh in this I would add a comment okay first occurrence initialize frequency with one okay as put every next occurrence update frequency I hope this is very clear for every next occurrence update frequency okay so this is good now now what you need to Define then what you need to Define then I will Define print star array so this is a very short notation by prints are arrogant print the elements of the array space separated okay and then uh well I'll do one thing I'll do one thing one thing I'll do one thing or to have a better View I'll print array dot sort as well Harry dot sort okay good and print my dictionary I hope there is no error so I can run this okay and now this is awesome okay uh let me do one thing uh let me do one thing I check uh let me do one thing I'll print the array again but this time I'll do add a DOT sort okay so what you can do so I'll press F5 so here you can see so I have my array here okay and now sorry for the interruption okay okay there's some issue yeah no it's fine okay so this was our array so then when I sorted the array it looked this so like here you can see the one has frequency three so here you can see the one has frequency three okay good okay now this is this is fine one has frequency three then two has frequency three times so let me check two two where is the two two as frequency three good let me take a very random element so here it is nine so let me check the frequency of nine nine one time then second time third time fourth time okay I hope nine is four times okay now when I see the sorted list because I have defined a sorted list in order that you grab easily nine nine nine nine nine the nine is four times so 9 is occurring four times so this is fine okay so this was your many main very good backend logic this is a very same same background logic we are going to do when we are working on the backend part so basically I totally like here you can take any array okay and uh you can Define the frequency like five is occurring two times yes five is happening two here one is this time 5 and 5 that means she's checking sorted array yes five is happening two times F5 is two times so this was our RF data structure we made to in which the frequency is updated and we store the frequency so like here we have this time we have used the area of integer next time we are using an array of programming languages okay so this would help us to make a backend part or logic so what we can do so I have moved to my server so we are done with the coding problem I hope you all all have got this so basically I hope you can change any values in the array okay and uh try out uh try this out okay this would basically help you out okay so so good so so then again we can see any answer then suppose like we can look for 89 which is occurring twice yeah 89 here it is twice occurring twice and we can see in the original RS 89 and 18. so absolutely works fine so let's get to our server so I'll do python manage.py run server yes okay so I'll move to my voting app I'll refresh this page okay so what we can do uh we can add batches here so here you can see there are basically different kind of batches so one is batch batch primary one you can use any batches so let me do this one batch batch success okay so I'll move to the about the section index.html so basically uh the I'll close the uh okay index.html or reverse or calculator app now now this was the voting app so let me be very clear with this so we can Define and here what you can do instead of class display flow display for 4 you can paste this and go to our yeah here you can see this is working fine and let me do some editing here so let me do add text is equal to margin zero Auto yes command zero Auto display block yeah good so here you can see the about has been uh I will try to make it a more intuitive so here you can try what I can do what I'll do I'll move to Style part and display is able to block okay and I'll add some font size font size is equal to 2 RAM I think this should be good yes good yeah here I've added about so so here you can see even in our app you can see about okay in the same way I can use the uh like something very good uh with any batch on a color batch I can use Danger good okay but what I need to do I'll Define P class is equal to okay select your select your language and see results so basically I will display uh what I can do I'll quickly copy this instead and yeah word batch batch Danger okay uh this just for the uh instructions I'm doing the ins this was instruction parts so let me go to the page yeah awesome pretty good so this is like about instructions so we are getting giving some more uh intuitive UI design to our app so basically and one thing you can do one that I have created a list of programming languages I'll give it a name as any this is a list till now so I have declared this list and uh I'll next time what you can do I'll find this as array okay good so this is a very long list of programming languages and I'll render them okay so I quickly show you how you can render then my dictionary foreign context is equal to my dictionary good dictionary absolute spelling is right so what I'll do on the top of the page uh just below the body I'll print this array okay so I'll move to my page desktop view Control Star okay let me check some yeah here you can see on the top of the page here you can see the array is there so next time we will so just I wanted to show you that we can render this array and next we would be working on the uh suggestions or also how we can provide real term realtime suggestions so we will like either we are going to provide on the frontend part or on the back end part so we'll try to what we will figure it out what we how we can provide suggestion so I've defined all the instructions uh but today I would like to make this instructions very clear like you can download or clone this project uh on by clicking on this button then you can run the command pip install minus r requirements.txt make sure you you have installed python on your machine and it has to be added to the path Okay then if you move to the requirements.txt file so here you get get this requirements these are very basic requirements you get it installed on a machine then you can then then what you can do then you can run that one python manage.py run server so this is the management.py file you need to be in this Direct tree to run the project okay good then basically there are two apps in this so basically if you want to run the calculator app you need to open this link but you need to make a simple change in the settings.py file I'll Define what you need to make a change basically you need to go to the settings.py file the Django projects and again Chango projects this is the settings.pify file and there is a templates yeah templates so inside the templates you need to change this line directory is OS dot dot part dot join page directory template slash voting app if you want to use the voting app then or or calculator app that is template slash calculator app if you want to use the calculator app okay so this look this looks good so yeah uh so these are the instructions you need to do okay so calculator app a voting app okay basically you need to change that line according to this then you can start with the app okay uh now uh today in today's tutorial what we are going to learn so basically we are going to adding uh adding suggestions during the search bar okay in this tutorial we will add list of programming language as suggestions a list of programming languages okay as suggestions to a search bar we will be we will implement this both statically and dynamically so in today's tutorial we are going to first do it static then we'll also do it dynamically also so so I'll show you the difference why we need to uh do this okay so this is the viewers.py file make sure you uh get this line from django.http import Json response or HTTP response okay so let me Define a function get query Define get query which takes a request as a parameter request as a parameter then Q is equal to request Dot get request.get yes then return HTTP response of queue so I have left this blank okay so what you need to do well what you need to do you can move to the us.py file and Define path is equal to get query then views Dot get query and the name is equal to get query so basically you will Define get query okay good so now this this is our form okay so we have not defined the action we can Define the action percent URL get query so this looks good so yes good so uh yeah now this is our form so basically we need to find suggestions during the search so we'll Define a list first we'll Define we'll do it statically so I'll tell you how uh how this works what the what is the function then uh then we will implement this dynamically so I'll tell you the difference why we should what is the difference of doing it statistically and dynamically so yeah here you can define a data list okay and you can give ID if you go to languages I hope this is fine so you can Define option value is equal to python okay uh okay you can have a option uh for the Simplicity I'll have a single right now I'll do this way option value is equal to python then what we can do option values go to python uh we can do PHP as well good right then uh we can do option option values would PHP then option value is equal to perl good then option value is going to pull then optional values will do let me have a programming okay good uh then I'll do one thing option value is equal to C C good then in the same way I'll do C plus plus okay uh then you can click on format document so you can right click on format document to get the HTML page on the right track okay then so this is the option value is equal to C plus plus uh and then uh I'll show you one thing let me type one more option as well the Java JavaScript JavaScript you're good and one more option I'll do that is Java yeah good so format document yeah good so basically uh this is the data list we have to Define but we need to track this data list to an input so we'll Define input list is equal to languages okay so basically yeah uh and we can Define class is equal to form control so this is a bootstrap class okay and I'll refresh this page yeah good so this looks good and we can do what we can do uh let me try this style the style works on this let me do one and bottom is only one ram uh let me check if the style bottom one ram good yes the the yes the style tags works on the input okay so we have a list here let me type J here so as soon as I type J I get JavaScript and Java then uh I'll I'll let the caps lock on let me have a capsule then here this works fine Java no s okay uh as I type j a v a s JavaScript is there but Java is in there okay so actually this data list Works in all the ways like a prefix suffix of substring match so let me type P here here I have got python PHP Pearl programming but you must be thinking why I've got a JavaScript this makes a substring match okay so let me type PR I get programming pH PHP py python okay because there was a single p in the end so it makes a substring match okay so to make this clear what I can do I'll show you one example okay let me do with c C C plus plus okay let me do with this with the small C a small C matches both the C C plus plus okay JavaScript as well okay so this looks good okay uh so if the user want to select uh if it doesn't if they don't write anything they can simply click on this drop down arrow they'll get all the options here okay so let me give you one example option value is equal to Django python python yes okay and uh and one option I would give you machine learning okay so this is using python as well so I format the document and I'll refresh this page so I'll type python so okay you can see here the python isn't starting and here it is in the end so it matches the subject the substring prefix or suffix so here you can see the python Django python machine learning python okay so I'll click on python I'll click submit okay uh I have not defined a get query voting app get query so okay good so here you need to Define name is equal to languages okay so I'll do python yes language is sold to python then I'll Define languages here so this should work now this should work I hope yes now it works perfectly fine so I have written a HTTP response so this is the GitHub GitHub link of our repository you can clone or download this project I have defined below the instructions how you can run the project I'll quickly give you overview uh you can move inside this directory Django projects uh then what you can do you can prep install minus r requirements.txt and then you can run the server by python manage.py file run server then when you think you need to make sure that inside Django projects there is a settings.py file and you need to take care of this line I'll show you yes this OS dot part dot OS dot path dot joinbase directly page directory templates slash voting app for the voting app and if you want to run the calculator app you need to type templates slash calculator app okay so this like this line need to be taken care of and I have defined those I have defined these instructions uh on the on the uh era as well so you can have a look okay so let's get started with the today's tutorial so like till the previous tutorial uh we made a list of languages but that was starting but now we are going to make it Dynamic so very first thing we are going to do we will move to our views dot py file and uh here you can see I have made this array Global so that this array can be rendered at any context so we will also do that so uh first what we were trying to do that we have an array of languages and Indus index functions renders the array with the name array as well okay so we'll move to our index.html and there we see that when we move to our index.html we have a input list 0 to languages and data list ID is equal to languages so that's perfectly fine so what we are going to do we are going to use ginger template so I'll show you one thing foreign language in Array okay then we would end this for Loop and for okay uh the what we are going to define a option option value is equal to each language language uh yeah good so I told you that we take only a single option tag okay then we'll move to our view.py file and then here we would return an HTTP response of Q good so let me check uh Now we move to our page then we type Ctrl shift r okay uh we would move to the index page yeah this is the index page so yeah here you can see that we have a list of programming languages good and we take anyone like let's suppose we take python and then we submit a we get a HTTP response of python so that's perfectly fine so what we can do the so this works pretty fine so we can test for anyone one more language Let me see okay okay let me see C plus plus okay good so C plus plus also works fine okay and let me do one thing when I type P I get a PHP per Delphi we already discussed how this search engine works so uh PHP good so this even works okay so uh till now we were trying to get the HTTP response uh but now we can do one thing what we can do we can make a uh we can what we can do we want to store each count of the what we do so what we can do we can make a global count then we can render that Global count uh dictionary that Global count is a data structure I already will discussed that part in the coding question also as well so I would quickly given a a overview how this would work so let me define global count uh this was going to be a dictionary data structure okay so what I'm trying to do so this this is very uh this is very this works perfectly fine okay one thing uh I would like to show you before I proceed that uh if I press Ctrl U so here you can see so the the the that uh when we used a input let's equal to languages data data list ID is equal to languages so this was the for Loop we we had used here for each language and array option value is equal to each language and for so here you can see with the how with the with the help of dynamic uh template uh basically we use Django template so uh so what we used uh we got a list of option values so this is perfectly fine so here you can see that with the help of a single for Loop we were able to generate a much more better way of generating the option values okay so this way we could generate them dynamically okay so what we can do now we'll move to a views.vi file so if we'll make if condition if Q in Global count then Global count of Q is equal to Global count of Q Plus 1. okay else uh if if the queue is already in global round then Global count of Q is equal to Global count of Q Plus 1 else for the first occurrence okay so we already also discussed this in the coding question the way we solved it or solved it first occurrence okay so so this was this for the first occurrence then Global count of Q should be initialized with one good so if it's already already there then we plus increment the value of the of the word else we what we do we initialize for the first time we initialize it for four one okay so this is very good so let me do one thing I'll move to the index.html and here what we can do we can print this till now uh okay okay but we need to do one thing okay uh what we need to do for Q and Global count Global account of Q is going to go over count of Q Plus 1 s for the first sequence Global ground of Q is equal to one okay so here you knew that we are working for the first suppress and if already exist then increment the value if already exists then increment the value okay and this was the first occurrence okay so what we can do uh we'll create a my dictionary so array would be the array and Global count Global count would be the Global count okay good so so then return we're going to render this way in the same way so I could click what we are going to do return render requests index.html so this is index.html we are going to render and the text is equal to my dictionary okay and here now we have already rendered This Global count so I hope this should work now fine pretty fine so I would refresh this page so let me do a single vote so let me choose PHP so here you can see the the dictionary has a one count of PHP so let me vote for PHP again so we are going to test this yes the quote found this to okay let me check any other languages so python is there yes python now PHP is to python one so let me to uh uh another Ruby yes by php2 python one Ruby one so in the same with C plus plus yes good absolutely fine then then uh C yes good so here you can uh let me do then again PHP so it should be three now yeah now it's absolutely three okay so uh this is but this uh I'll quick give quickly give an overview of this so for the first reference we used to initialize with one then we would increment the value okay so this is this works perfectly fine but we are noticing that we are only printing the raw dictionary here but next time we would add try to add for Progress bar with the table so I would open my project so till now we had made uh the search bar with suggestions dynamically then we used to submit the option value and then we used to store the results in the global global dictionary so this is the global dictionary we have defined here and uh I can have a quick overview or of this so here you can see this is an app bar so what we can do I'll Define a global dictionary here global count yes so here it is global count so when I run my budget I'll finish this page and let me check yes oh my server is running so I'll start my server find then manager.py run server I'll refresh this page so here you can see my C language has one vote then Perl uh uh like PHP here it has one word then python one word okay in the same way I'll give SQL one vote then I'll give vote to an SQL another word so here it is two volts so in the same way we can keep on going with the server so this is python I'll submit with the so here it is two votes so uh this uh so this works absolutely fine so the next part we are going to do is add tables with progress bar so basically what we are going to cover in this tutorial I show you here so we are going to add uh add adding a table with progress bar now we are going to render the backend data to the front end with the table and a progress bar for every language we will add a progress bar as a measure of counter vote so the progress bar is going to show the measure of count of what so like the key will have a table so then the key of the dictionary would be the uh like the name of the language and the value would be in terms of the progress bar so let's get started with this so in the nav bar the first thing we are going to do is we are going to put a li class is equal to nav item okay and here anchor class is equal to nav link and uh what what you are going to Define result okay and we are going to Define hrf tag refresh tag to the width hash result okay so we will Define a result block below so this is the uh about tag and and here you can see uh you can also add HR tag here which was missing okay now what we are going to do is this is a row okay so we have to Define in the same way we have to Define and this is a call md6 okay so in the same we have to Define this so what we can do so we can do in the same way div plus is equal to rho and then div class is able to call MD this time I will send it to the table so I would Define call md12 and now what you can do so we have a div of class called md12 so other things can be same so I'll move copy this and quickly paste it here and ID will be result and name will be result so and this would be result okay and Okay so what we can type here we can type here result in terms of progress bar Okay so result table so so let me check let's first check this if this uh so here you can see here we have a result table so okay and we'll give it a different color and this is bad bad success so we'll Define batch warning okay so yeah now it's absolutely works fine and we would give a style as well to uh we can give style is equal to margin top of one ram so we can give a margin top of one ram so yeah now this looks perfectly fine so basically what I wanted to show you that resulted table is going to be a big one so we will add a responsive table so we can we will also work on this or maybe okay we can do one thing let this view of 6 column and we have to Define this in the center and we can copy the settings this settings so that would work fine so this would give a margin top frame and this would align in the center as well okay then there is some issue okay uh style okay this should be in the column okay sorry they should go in the column then I would fit now this looks absolutely works fine so what we are going to do so first we are going to uh render the dictionary to the front end part so I'll show you how you can do this so this is a dictionary so what we can do we I would use a for Loop for key comma value in global count dot items so basically I'm referring to both the items that is p and the value and then I would end this for Loop by a person sign and again a person sign and now I would end the for Loop and for okay person sign then I can do I'll do a let's suppose this is the key then value value and then I would give a break so here you can see in the in this way we I can print the dictionary so here you can see this is my key Dash value then key Dash value then key Dash value so here I've got the key value pairs so we are going to work on this so I'll give you uh first then this these are the tables these are the tables which were in the bootstrap so we have a responsive table so I'll show you responsive yeah so here it is responsive tables so these are the responsive tables so we have this class diff classes or table table responsive then uh this is the table classes your table so this gives us a responsive table so uh we'll I'll add a table let me check one we will add the simplest one so this is the simplest table we can have uh okay so let me check where we are where we have to add this so this this is the result table okay now what we can do uh okay we can Define okay we can Define div class is equal to rho then if class is going to call md12 so I'm defining another grid for the table to keep it uh responsive so I've copy paste the table now I'll go to go back to my page and I'll refresh this so here you can see I've added the table and uh one class I have to add in the responsive table is this one that is this should be above the table classes rule to table so I'll move to the page so this is the table classes table and I have to add div class is equal to table responsive table responsive okay so this is this one is I have to add and I have to add add this div after the table tag so I have now what we can do we can do format document yeah this looks absolutely fine so I would refresh this page okay so here you can see the table is responsive when I press Ctrl shift I so here you can see we can scroll the table so if a table gets mixed so we can scroll the table so here we can see the scroll bar so let's get started with the tutorial so we basically uh first uh what we are going to do so uh first I'll clear this okay so first I'll run my server python manage Dot py run server okay so basically we are we were working on progress bar and we were supposed to add progress bar so in this tutorial today we are going to add a dynamic progress bar uh like it till the previous tutorial we had uh we are added the added a responsive table now we are going to add a progress bar so in this tutorial we are going to add a dynamic progress bar and see how we generate count of votes using progress bar so this is what we are going to do in this tutorial so let's get started with it so basically so I'll move to my server I'll run my server okay so uh to to navigate to the voting app I'll type slash voting app okay so so here's our app so we have a result table so what we can do we will make a first first let's uh add a complete a table then we will move to the progress bar quickly so this is a table okay so uh so we have to add a scope so basically we have added a table so we have to uh we have to add a scope so we shall do table header so basically we are first going to define the table header so this is the table header we are going to Define then we are going to define the table body okay so this is or this all is the header part and this all is the body part okay so let's get started so we have put that we have to add a class called uh in the scope then we'll make the header okay so let's this is so uh make sure this is uh here you can see uh there is a single row so I'll quickly explain this this is table then header then a row now we have to define the all the so this is table header is scope is going to call then ID or you can say anything Ash ID number related with this then again table head scope is equal to call then language okay language then what we are going to find table header scope is going to call then pound of words okay simply I'll type count here and uh so now I'll refresh the page here so here you can see I have a language number language and count so I'll press Ctrl shift I so here you can see it is responsible in nature okay so I have a number language and okay so this works fine so what we are going to do so first uh now next we are going to do is uh uh add data okay so we are going to add data row wise so particularly what we are going to do this is the table row okay so so first is the table data this again a table data so this corresponds to the first number then language then this is going to progress bar okay so so for this foreign so basically we have to add this all this dynamically so what I'm going to do and for so basically I'm going to add a for Loop here so follow percent for okay so basically I'll move to my views.py file uh so we are rendering a index.html using Global count okay so Global account here is a dictionary type data structure so basically what we have to do for key comma value this could be any variable name for T comma value in global count dot items okay so this would iterate in this way that first you are going to have the key then the value in global count dot items so this would do okay and now uh I'll do key then for this one value okay and for this I say for Loop dot counter so this way I'll add for Loop or Loop dot counter so I'll refresh the page okay so this works fine so let me test this I'll make a language PHP so here you can see number one language count one okay so let me do Java and I have okay uh I have some issue here the row is not coming properly okay I had to put all this inside a table row okay so now this should work fine when I refresh this page so I I hit the this URL Java so the found should become two okay yeah now it's perfectly fine now I have language PHP count one Java and count two let me add python here okay so here you can see even the dictionary is updated here uh I'll hit the route again python is three here you can see three then four so here you can see here the python is four so this looks good so we'll now add the progress bar so for the progress bar what we need to do okay so we can like these are the progress bar so we can I'll quickly give an overview on the progress bar so so here you can see uh there's a background multiple bars track bars animated so you can use the uh like use any so even here you can see toggle animation okay so here it is moving a little bit of moving stripes okay uh here you can see this is again a class subscribed colors in which you have blue green warning danger so here you can see like uh and we I get the same classes on on the button as well danger warning info corresponding through colors okay so let's add a progress bar here so let's take this one okay so to basically in the part of value we are going to add a progress bar so I'll split this uh TD table data now I'll paste the code here yeah so now uh so uh basically I'll refresh the page but right now there is no such Dynamic count so everything is full so I'll make it Dynamic so what you need to do so to uh like uh so basically here you can see I have a diff Class View to progress uh I'll quickly show you one thing and press Ctrl U so it would show how I rendered the code so this shows it where is the table bar yes here it is the table bar so here is here the data is being coming dynamically table data is one then language PHP table data PHP then progress bar and uh like this is the again coming dynamically so I would show you one thing if I inspect element okay and let me show you another group another view laptop okay so here you can see foreign the width has been reduced okay specifically I'm referring to the where my cursor is pointer so when I reduce to 50 it almost becomes half yes it is half now uh then again the way I am reducing the width the progress also reduces itself okay okay so this is good so now what we can do so so basically what I want to tell you that style should have the value here value okay and even here you can type value so this should show the value in numbers at the progress bar okay so let me refresh this page so here you can see I have one count two count six okay so let me add few more in PHP PHP okay so basically now you can see two okay and now I repeatedly hit hit this URL okay so here you can see this this has become three okay now five six then again right then just seven yeah same in the same way okay the same goes for the python I'll make a submission yeah here you can see the python has seven now okay so now eight nine ten eleven twelve thirteen fourteen fifteen sixteen Seventeen okay so this looks pretty good so even uh next functionality will try to uh we'll try to add that if you like if you know you are seeing like these are the count of words and that if there are so many languages let me add some another this C so c will have one count of vote okay then uh again uh let me do python again or Java PHP C plus plus if you want to compare these languages and if you want to sort them according to the account like if you want to see among among there are 10 languages and if you want to see top three so how we can sort them so I'll tell you how we can sort them so basically in today's tutorial what we are going to learn we are going to sorting the data by count of words in this tutorial we are going to sort the data by values in order to see the data from highest number of votes to lowest number of words okay basically we are going to see uh we are going to going to sort the data by values in order to see data from highest number of words to lowest number of votes so basically we will Implement our algorithm and we will learn how we can imply apply this on a Django project so basically we will uh before this we can uh learn something on this suppose we take a random string hello world python python programming Python Programming I hope this is fine okay so we would create a data structure dictionary uh which would store to store the frequency okay frequency of characters I hope this is fine so so what we can do for CH and S I hope this is fine if c h n d if the character is already in dictionary then I would do T of c h is equal to D of CH plus 1 so I would increase the frequency increase frequency okay else d of c h is equal to 1. okay initialize for first occurrence okay we have done this before okay so this was pretty easy so uh let me do one thing uh let me create a function defined print data d so here I will be key I will this key and D of I is value okay and I would do for I in D print I comma D of I and here's the end okay so this is a separate function and let me here print D I hope this file okay here you can see uh uh okay okay uh I made a mistake let me do print data here so I had made a function for this purpose only yes here you can see I have different characters so let me I have different characters okay H has a frequency to e one but this data seems to very unsorted data so we will sort the data okay so how do we do that so we will carry on this okay let me do one thing let me remove this I have created variable a okay so a because sort by key in ascending order okay so a is equal to sorted D dot items K is equal to Lambda we have to make a comparator function Lambda x and x of 0. so here I mean to say that I would sort by key okay and I have to Typecast this as dictionary okay sorry for this I have to type as this back to dictionary and do print data a I hope this should work so yeah now here you can see that I had shot this is this is for a uh empty space okay so this is what uh this is in ascending order by keys please check this is by Keys a is a key B is a key e is a key G is a key H is a key I is equal to key L is equal to K M N O P Q R and W Y all here are Keys it is sorted by Keys okay I hope this is fine okay let me do another thing uh let me do a sort by key in descending okay so this is going to be very much same uh I would comment this out so what I can do I can copy this and do this as we and print data B so any change I have to make here yes uh this is a reverse is equal to true I hope this is fine okay reverse is equal to true now here you can see it has sorted by keys in reverse order by key Y is a key W is equal to Key T is equal to r p o n m l all are here keys but has been sorted in reverse order okay now uh we'll do the we'll do the same uh what we can do now sort by sort by value okay so we would do the same uh we would do the same okay sorry for this I would do this as C here as C and here 2 by values what we can do I'll remove this so here one means XOXO 1 means I'll sort by values here okay so let me do run this okay I'll comment this out also so here you can see that now I have sorted my values 1 1 1 1 1 2 2 2 2 3 3 4 this is why values okay this is by values in ascending order now the very much same thing in descending order this was an ascending okay and this is now D I would copy this and in the very much same thing reverse is equal to true and I'll do print data d now here you can see that yes sorted by values in reverse order so this is what same thing we are going to implement on Django service sorry Django server okay so what we can do we would do we'll move to our page okay this is a result table and what we can do h a RF okay class is equal to button button primary any any button you can choose sort data okay we are going to sort data okay so sort data okay okay uh let me say descending sort data in descending order okay now we'll Define a URL path sort data I'll Implement a function views dot sort data and name is equal to sort data okay so I hope this is fine uh and I'll have to define a URL here percent URL sort sort data I hope this is fine and then again a percent URL and close the bracket okay so I hope this is fine and let me check check it on my server with this won't work right now actually this is throwing an error Dev sort data the request is a parameter and return pass okay let me check if uh till now is it working or not okay so I hope this should work now okay return okay okay I've made a mistake sorry I should this should be passed okay so M uh now what I I can do uh okay I'll move to the link localhost colon 8000. okay and now to the voting app slash voting app okay so here you can see sort data in descending order order I hope this is fine so what you can do uh this two what the so we are going to implement this very much same logic okay to the rendering part this should be same I guess okay this should be same so I will copy the code okay I hope this is fine and Global count is equal to Global count I hope this is fine now okay but we need to implement the uh so access the global count since uh don't confuse uh don't confuse yourself the undefining keyword Global so this is a keyword global global count so I'm accessing a variable that is global okay so global global count so what I will do I'll do Global count is equal to dictionary then again sorted okay Global count dot items okay and then we are going to sort by value key is equal to Lambda X of 1 then reverse is equal to true I hope this is fine okay okay we will test now I will test we will test this application this is python I'll submit here so python has one more two three four five six seven eight nine ten okay eleven twelve okay here you can see the python is 11 volts let me to see okay okay till now what we have not clicked on this button Okay C is three four five six okay some Java let me submit here one two three four five six okay uh Java has 10 words so we might uh soon JavaScript okay so JavaScript has nine volts okay now I'll correct sort data and descending orders okay now you can see the magic the data has been sorted when in descending order 12 10 9 7 okay so because we were able to increment the logic on the server side and get it rendered on the front end part so data has been has been sorted by values okay so uh so you can try out more in such a way okay we can do anything suppose uh I'll do Java here okay okay Java has 11 votes okay let me introduce a new plan with SQL okay SQL has one vote now SQL has four four five six twelve okay 15 17 now SQL has more votes than python so I'll do sort data in descending order again you can see the SQL is now on top since it has 17 volts so you can Implement your Logics on your server size and get it them on front end so that's a good part of the application so in the next tutorial what we are going to do so what we are going to do uh you can try out any of the applications so let me do another check python here as 13 so 14 15 16 17 18 19 20 so python has 23 votes so I'll do short data and descending order again python is back on top so in this uh I've created the new link of my repository that is Django to do app so now we are going to make app which means we will work on the database the most probably the database we are going to work is sqlite so today we will start with the todo app how we can save a data in the S uh sqlite database then how we can manipulate the data so basically we have many operations to perform like sqli database you do app create read update delete operations and moreover we can do search plus sort we can sort the data as well so we'll perform a regex search and even sort the data so in this tutorial we are going to start with the sqlite database and a todo app so so let's get started with this tutorial so I again welcome you to programming knowledge so let's get started so please make sure that this this is the new GitHub link or repository so you you get updated with the repository as well okay so uh this is my link so I I've already created a app okay uh because this is we we have already learned all this how to create a form so basically it has a todo writer to do description and a todo priority then I have an add button here uh before we add this uh we make a request to save the data we have to define a schema to how we want to add our database okay so actually there is a file called models.py file in uh so what you need to do so this is a model.py file so initially I created a class to do uh so it has model sort model so basically I need to define the schema okay so so basically uh like if in the front end of my part I have a title description and a priority so I would Define the same at the back end part so I can save my data uh on the backend part as well okay so let's get started with it so first you need to add create title title is equal to models Dot cadfield Okay so and I'll give max length is equal to 255 okay then description is going to model short text feed because this is a text field and I would give uh there's no one necessary to give a text sheet because it can have many characters as well so then the next would be title description then priority priority is equal to model short integer field because this is this is going to be integer which priority what you want to give and then create it at okay this is equal to Model start models Dot date time field date time field so this would keep the date time field this would keep the track record of whichever date you want and I want you to add one parameter Auto underscore add underscore now is equal to true okay so you can do this so my the server my server gets restarted okay there is an auto uh maybe uh Auto Now underscore ad okay let me let me restart uh models created model dot date time field no Auto now let me check uh okay got an unexpected keyword argument Auto underscore add underscope now uh did it uh did my server restart after this let me check okay yeah now it's working fine okay so it's good so Auto underscore now underscore add is equal to True okay so what we can do so we can we have created the database and now like we have created our database schema so what we can do we can proceed with the form okay so we'll move to the front end part index.html so I'll Define a form action here quickly form action or maybe a URL first or let me check view shot okay this is a submit okay so what we can do so uh okay okay this is your file to do app okay yeah so here's I'm making making a request this is the index page then I'll submit the data then in my views.pv file okay I'll create a object so make sure you import this line okay from dot models import Star okay so this would import all the database model okay uh okay let me do one thing uh okay before you create a model then you need to migrate as well so you need to type python manage dot p y make migrations okay so python manage.py so it says create model to do so I hope you can see the model has been created okay now I would do python this was the earlier command I did python manager make migrations now I would do python manager py migrate so this would uh this would migrate my data so here you can see this has been migrated so even I have my sqlite studio on so I'll refresh this data uh tables so here you can see the tables has been created so I'll quickly give you an overview so here you can see this one so this one has a todo app underscore which has five columns okay so which is ID title description priority and created ad so this was a schema which I was telling you so and these are the default Django schemas uh which are which I'll also explain in the other videos so ID title so for each object you have ID then I titled and description and a priorities and created ad okay so so what you can do you can move to to do app then what you can do now uh these are the following options so edit table delete table okay remove the database edit the database database and the you can look at the following options so next thing you need to do so we'll move to the form okay now we will move to the form and then submit the form quickly and save the data data like our todo uh item into our database okay so let's get uh let's get done with this so first you need to do object is equal to to do because yeah I had created then object dot title it is equal to request dot get I hope this is fine title okay and object dot description description is going to request dot get description description okay then object object dot priority okay I'll show you one thing that in my index.html the Sprite is the input type 0 to number okay that's why I Define the integer field corresponding to that okay object dot priority is equal to request dot get priority priority okay fine then the date will be automatically added to it corresponding to the time and the even the also the ID will be correspondingly added and I'll do object dot save okay fine then I would return the same thing object dot save turn request index.html or uh uh okay then now I must restart my server python manual.pui run server okay and in my index.html file I'll make a action percent URL submit okay now I'll make a percentage send okay so I hope I hope this is working fine okay uh let me do one thing uh what we can do okay now I should make a request test data let this be a priority number one okay so I have made a request so okay reverse is equal to okay let me check there's some issue uh person URL okay it says that this URL is not matched okay let me check okay uh by mistake I had to do this submit okay so I hope now it's fine so I'll uh make I'll make the request again test test data I'll make a test data okay and then priority is equal to one okay I hope this is fine so I made a request and then in the the page Got Loaded again so let me check if it's in my data or not so I'll refresh the data okay so let me check so uh like uh here you can see so yeah now here you can see when you click on double click on here then I have the structure then the data so this was the data has been added one ID is one title is test description is test data priority is one created at this time okay I hope this is fine so you can uh okay now I'll make another request to make sure this is absolutely okay so I'll make test data to testing application and I'll give priority to it as like suppose 100 uh one zero one three one one zero I'll give one one zero something you can give anything okay one one two something anything and I'll add so I here you can see the API has been hit now and I'll check my database so I'll uh what I'll do I'll refresh this okay and okay let me double click it to do app okay here oh okay so here is the refresh button okay now it works fine okay so here is it uh uh like uh you can get familiar with the SQL shooter even I uh so here you can see here is the refresh button also refresh selected database schema and this is the refresh table data so when I click refresh table data so here you can see the second test data to testing application with priority one one two has been added to the database so basically uh in this today's tutorial we are going to implement the list and delete operation okay list and delete operation uh on the todo app okay so so basically uh uh till the previous video we had made a small app so I'll give you a small overview so my server is running okay so I'll give you a small overview so where uh I told you so uh like where I told you like we can add a data so I'll make tests new okay I'll do a todo title uh uh let's new let me add something new title new title new description and uh to do practice five okay so I'll add this to this and when I move to my database so I'll move to the to do app underscope to do so and here I can see new title new description priority and credit has been added with id4 uh basically uh uh and the the ones which I added in last video video so I had deleted them just to try out something new on this so let's get started with this today's tutorial so today we'll be implemented delete operation okay so before this I will make a list page so so I'll list all todo's here list all todo's okay so you can give any title you want list to all todo's okay so basically uh what you can do so we'll move use bootstrap here so uh we'll move to this URL uh so this would give us the components here so here you can see so we'll quickly move to the URL and uh we can do what we can use uh either we can use card okay we can use card here okay so this looks good so so I'll copy this okay but before that what we need to do okay uh we use this was our form which worked fine so it will move to the views.py file okay till here viewer it's fine so I'll do a digital my dictionary I'll create my dictionary my dictionary and uh for all to Do's okay I'll render them to the page to do T objects dot or so I hope this is fine so so to do Dot object.org and I'll do list dot HTML and I'll give context is equal to my dictionary I hope this is fine okay so let me add a new to do and check uh new data new data new and I'll give a priority as six and I'll submit this so yes yes uh but uh okay let me check one thing I made a mistake uh okay I had in this my index.html uh I had to put this all under the block content block content okay and here's the form and I'll end this with percent and block this is why I hope this is fine percent and block will do uh okay now uh and here what can I do uh in this page list.html uh which name I had made that is all todo's so I'll do it like this all to do's okay so I hope this should work fine now the todo title is new title three new okay let me give S7 okay so here you can see I have it is showing me query set which says uh to do object four five six and let me check in my data which are this four five six so these are the three which I had uh which I had recently added these are the three okay so we would uh use a list or a card so so what you can do we can use the a for Loop here percent for each to do foreign Okay so so this is fine this has got title so I'll give each to do dot title and in the same way I'll give each to to do dot description okay each to do Dot description so this would give me the description okay and one thing I can do also let me check okay uh uh what I can do I'll give a space here and type each to do T priority I hope this is fine this this would give the priority and uh I will come to this uh refresh tag we'll create a delete operation here so I'll refresh this page so here you can see new title new description new data 6 data new new title three seven new new title threesome okay so uh so I hope uh maybe I refreshed this page so I had I hit this query twice so that's why I have to twice this data okay because I had refreshed this page so this had made another operation add operation here okay so we'll now do something uh width is this okay margin uh I'll give a margin top of one ram okay and div plus is equal to row okay Dave class is going to call MD 6 so I hope this is fine now I'll paste the card here so here you can see here I'll paste the card now and here you can see okay uh let me do this uh okay yeah and I'll give a style is going to margin I'll give a margin here margin 0 or 2. okay so I'll again replace this page so I'll so yeah now it looks uh fine okay but uh let me check something uh so so this is called md6 yeah so here what you can do if you want to increase the width you can give anything you want uh maybe uh what you can do uh I'll give classes to card and container fluid so this would take the whole width of the container okay so I hope this is fine now okay so and now we have to create a delete operation so uh I'll uh so like till now let me do one thing so I add a new title new title delete operation okay delete task something like this priority I'll give it as 78 when I add this I get this at the end okay so one thing we are missing here that is the we had made model short py we had created add operations we will even add this also so so I'll copy this and now I'll do each to do created add okay so so I'll refresh this page now here you can see I have all the created options with the timings okay so okay so today we are going to continue with the delete operation so basically we will continue delete search and sort operation on the todo app and even even in the end we'll do the update operation okay so basically we will also perform the update operation as well so uh okay in this tutorial we are going to implement and continue with delete operation and look for the other useful query set features so that is going to be very easy uh so that's going to be very interesting how we perform the create operation so basically first we will move to urls.to your file and need a delete route with ID as a parameter okay when we are done with this so we'll call views dot delete and name is equal to delete okay I hope this is fine okay uh uh so what we need uh what we need to do uh we'll move to our views dot py file okay it is throwing an error because since I have not defined a delete a function in my views.py file so what we will move to view short Piva file and find the delete function if I delete okay uh what parameter is going to take and it is going to take a request parameter request and uh basically uh this part is going to be same okay so this is going to be very much same part I'll quickly copy this so only one thing we are going to do uh since we were going to get a ID okay so object is equal to 2 2 dot objects dot get so with this ID basically this uh I'll open my table so basically match this ID okay with ID sorry for this with ID you get okay basically I'm trying to tell that match the ID here in the table with the ID you get why the URL okay by the route so basically you get the get get this object then same clip from object dot delete okay so I hope this is fine so this should work okay uh let me do one thing okay uh okay let me check yes okay so let's do one thing uh we'll move to our server okay and what we need to do okay you can copy this okay we can copy this and so this is our local server so basically what we are going to do we will move to the delete okay and we are let me check if the if they're already let me delete this one with the id4 so I'll move to my page and do delete four so maybe the fourth one should have been deleted so let me check so here is my database database so I'll refresh the table data so here you can see the uh the object with the id4 has been deleted so let me check uh let me check one thing uh let's uh take this one new title delete operation 78 okay so what id does it have so let me uh okay new title delete operation so 10 and 11. so I'll delete both of them so how you can how can I delete delete one with ID 10 okay done and delete a one with the ID 11 as well so that was pretty quick so let me move to my table and refresh this page so here you can see the 10 and 11 has been deleted but you want this operation to be performed by a button not by a direct URL so what you can do so you can move to the index.html okay uh and what we can you can do uh since uh sorry uh we'll move to the list.html since we all have all the buttons there so uh let me do this button button Danger okay and we have to Define this as delete okay and then object so basically uh we are going to Define this as delete each to do Dot ID okay so and I'll do this as delete okay so this should work fine let me refresh this page uh okay okay I should not have refresh this page let me open this list all to do's okay okay okay okay there's some issue let me check you are a zero to do app okay so let me add a todo new to do I quickly even do this also uh or maybe I have not defined in I'll move to my index.html page and inside here okay uh I have not defined let me do one thing so uh I'll Define a path list okay now use dot list okay and name is equal to list so this would list all my pages okay now I'll Define my inside my views.py file I'll quickly do this Define list and it will take requests as a parameter and do this thing okay and inside index.html I'll do percent URL list okay so this would list all to those okay let me click this okay so here you can see I have got all the todo's so let me do this uh each to do dot ID okay I made a mistake little mistake uh this should have been actually uh this should have been a value so I hope this is fine now this should have been a value I I I forgot to put curly braces since this should have been an uh value okay so this now this this would work fine so let me move to my uh okay I'll show you one example and you add a new to do to do added now okay delete this okay I'll give this a priority as 500 okay so when what happens so let me check so I have added a to do added now delete this so when I click on delete so here you can see delete 12 has been hit so it has been deleted now okay so this works fine okay so this works absolutely fine where you can delete this I can delete this one delete this one this one this one this one this one and I empty my todo list okay so even a list to do uh uh now I can add one okay uh so so uh you can move to the index page here I'll quickly quickly add the index URL as well on the add Button as well so you can add any so to do added Now new okay okay delete test and give this variety as anything and you will able to be able to delete this so I hope this works fine so basically in today's tutorial we are going to uh we have all like we have implemented the create operation read operation uh Delete operation we are left with the update operation but before the update operation I want you to have a bit familiar with this query set features on Django so basically they have this query set features are very useful to implement the backend functionality like suppose I can show you that this is the all feature we use so it returns all the objects of that database class which we have defined which we also say as model database model so it returns all the objects of the that particular class or model and uh in the same way we have also have particular things like uh filter uh values date times all Union intersection uh one thing uh one of them I would like to show you this order by so here you can see order uh yeah yeah here you can see the query set is for its it has an order by Clause like uh it will uh give you the order if you want to sort the data by a particular value you can use order by so that's pretty helpful uh so you can use order by so like uh uh what I can show you one thing like uh one is order by another is uh contains contains contains this one here yeah so this one is used to search this is particularly for for searching the data so uh what kind of data you want so this this one is contains so like if you want to uh like this is this query is particularly uh get headline where it contains this keyword so basically this is equal to this SQL equally query select where headline like this is this so basically uh you can form the search operation y contains so we are left with the update operation we'll quickly uh complete that also but before that we'll uh try to implement our uh sorting the data and searching the data by order by feature and contains by feature so this is a GitHub link and here I have defined Brothers uh so I will open a project so basically this is server title but it's uh right now it's not functional we'll Implement that so we can add a new todo like we can do order by order by feature feature to be done so this is the title okay so I'll quickly copy this and give this a priority of thousand so here you can see that particularly I have called the like uh basically I have uh this is the one I have added order my feature and this is like coming and it it has a basic functionality of delete operation as well so it has been deleted with the id19 okay so it must have been deleted so quickly I'll add in another uh order by feature to be done yeah and I I'll add this and I'll give this as a number 500 okay yeah it should find okay one thing you can see that if we have made a like it is a we have made a query to draw uh so so here you can see we have made a route where we have uh uh where it's working like an API so somewhere uh so let me do this 500 as 6 000. and let me and uh when I submit this so I will find one with the sixth option as well okay and this one is 500. so now I now I want to uh like we have the priority numbers so these are our priority numbers this one is 500 500 89 800 500 6000 and we want to be order the data according to the priority numbers so we can use order by feature so that's going to be pretty fine so what you need to do you need to Define uh in urls.pri file of to do app so what you can do you move to the path okay okay sorry for this I need my caps locks to be off uh so uh I'll Define path sort by priority or something or let me do sort data this would be fine yeah so sort by sort data sort data now I'll call a views function views.short data use dot sort data and name is equal to sort data okay sort data yeah I hope this is fine so I'll move to my use.py file Define sort data which will take a request as a parameter okay and uh so basically what I'm going to do I am going to return render request then left dot HTML okay and context is equal to context would be my dictionary okay and uh now I'll Define my dictionary okay so here you can see that when I Define my dictionary so here you can see that I would Define uh like uh all to do's all to Do's okay and now what I would be doing I would be saying to do to do dot objects dot all dot order underscope by and let me do this by uh I'll move to my models.qifi file so here you can see that I have list of parameter one is title description Priority Credit ad so let me uh first do it by uh created at okay created underscope add okay so I hope this is fine now uh This is My URL okay and now I'll move to my index.html so basically uh so uh to do description no no I have yeah so I have made a page uh let me do this as sort by uh sort data okay sort data and the URL would be percent URL link so I'll Define the URL then give me a percent sign then again and uh I would Define this as sort sort data okay so I hope this is fine I have done short data so let me go to my app and uh let me click on ADD and let me click on sort data so object has no function order by okay okay that means the let me see something I've made an error let me move to my views.vi file okay okay I made a braces here so no I think this is fine okay so let me refresh this page yeah now you can see that I have been ordered the data by date and that will uh ascending order so that is an increasing order okay so first 7th May 7th May 7th May then comes the your tenth way okay now if I want to change this feature simply I'll move to view dot py file and uh uh I'll put a negative sign here and this would be in decreasing order so now when I refresh this page here you can see 10th May 10th May 10th May 10th May is there then seventh my seventh place in the same way uh you can do with the priority number as well okay so here you can see uh I'll do the priority number so for that you need to move to your models.pophile you should be very familiar with this very same keyword now I'll give a priority here okay and now when I refresh my page my all the priorities would be increasing that is 89 500 500 500 800 6000 and this uh do a large number now when I put a negative sign here now I can see that now this would be in a decreasing order okay so I hope this is where you you are pretty much fine with this that now this is in decreasing order now it's helpful to you okay so like in this way you can uh you can uh create such operations and uh like in the next tutorial so basically I have made this by sort by priority now so you can uh change this to sort by priority okay so I hope this is uh fine now even list all to Do's you can list any of them and then then click on sort by priority you return a number within priority okay so and this is your delete operation which works absolutely fine you can delete any okay so I have deleted this one so basically in the today's tutorial we are going to continue with our todo app so basically we will perform a search query based on title so title of this uh video search data so basically what the data we have in the all to do app so basically I'll show my app so we have ADD list all to do and this is for priority so basically in list all through the Section we have all the todo's so basically I can add few more as well so let me do some like uh I added on uh let me do Django so I have it on Django and then Django priority I'll give it to number one topmost priority so here you can see I have on Django then or I'll do another one add another one python and I'll add on python again python I'll add priority again to number two okay or maybe one also so here I have added python also so basically if you want to search our todo's so we confirm search query so for that I'll refer to the query set so the one I told you which is going to be very important for this is going to be contains so I'll move to that contains contains uh contains I'll move to contains okay sorry for this contains yeah okay I am having some issue okay okay now it's fine okay so basically we have contains so yeah here you can see this one yes so object dot filter and this is the this is it this contains me this this keyword is being looked uh in this headline okay so so for if even we'll design the same thing for the title one so let's get started with this so what we can do we'll move to urs.py file and then we'll Define a path then search data then I'll Define views Dot search data okay and name is going to search data so basically I'll Define search data now what I can do so while defined in My Views Define search data and it will take a request as a parameter and we'll do what I'll try to uh then we'll perform the operation so till time I can do the path so basically people if you want to do attach the query then I'll move to my index.html page so this is Sorry by title okay so I'll give it to person URL okay search data okay so this would uh perform my query to that and then uh this is the form so here you can see so here you can see this uh I want to show you one thing okay let me do right click inspect so basically I what I'm trying to show here that uh this thing is a form okay and this whole thing you can see yeah so E Yeah so here you can see uh yeah this is a form which is being highlighted now this to do title to do title to do discussion to do priority this is a formula in itself so for that form to submit this we refer to the add button and for this form uh it has no buttons we will create a button for this form okay so sorry my title is a form in itself plus this is in a form itself in itself okay so for that what we can do we will move to that search by title search data and we'll create a button button type is going to submit a name is equal to for that we do a button type so to submit and we'll do submit or search so let me do search query okay search by search okay and now for that we can do uh class is equal to button button primary okay for that will and style and Define a style as you would display block and margin zero order okay so this would Define a button to the center okay let me do one name so it would also give a top margin here so when I refresh this page here you can see I have a search button fine now when uh when I move here so to search the to initially see see if it's working fine uh I'll Define a queue he did go to request sorry request dot get query and I'll Define a HTTP response of queue so let me move to my page I'll refresh this and I'll type cricket crime type CR so yes it gives me a HTTP forms of CRC it works fine okay now we would render the uh these two do objects uh or not uh uh front end so basically uh we can do what we can do uh we'll okay uh I want to show you one thing also uh we have contains so basically this is equal to uh even uh last time I showed you contains this one this one this one this one here okay yeah yeah I wanted to show you this thing so case sensitive containment this is contains uh so basically there is a difference slight difference between uh this this uh contains an i contains so basically here I stands for insensitive so this is case sensitive and this one is case insensitive so this this one I wanted to show you and this is equal to this SQL query where headline is percent this keyword so okay so basically this is where this is a small difference I wanted to show you between the contains and uh insensitive contains so basically there is a difference of this keyword I so we can move to our application now so what we can do so I'll Define my dictionary I'll Define a dictionary then I will return render okay then request then list dot HTML okay if you want to show the result in the list itself so basically we are referring to the same template again and again then context is equal to my dictionary this is pretty much same as above but here a difference will be so what we have all to do's okay for that we have to do dot objects dot filter okay then uh what we are going to do filter and now we are going to Define title so basically we'll move to models.py file so this is the title world we are going to use title double underscore we will Define double underscope contains is equal to Q okay so I hope this should work fine so this is we are referring to title to have this okay so let me do one thing uh I'll make a search query so if I type CR then we have Cricket okay so it match my query so let me do under list all to do so Cricket 89 so I'll Define a cricket so see this cricket cricket cricket and then 90. so this is a different form working okay absolutely fine so so this is cricket 90. then I'll Define another one click it then 91. so when I should type CR so it should return all the Crickets with 89 90 and 91 then even I have to sort by priority book okay okay okay uh sorry for this uh okay we'll work on this but uh till now we can uh this is the uh I'll clear this so basically this was short data so it referred to all to Do's so it has no filter yet okay but when we just search data so I'll do do this again uh I'll Define cricket and now I have 89 1991 okay uh so we will next time we'll try for the update operation so hey okay we will check enough for another one then let me take a type B A so basketball would be so this is basketball okay and this is ba refers to here as well so it is a reference to the ba in the basketball and football okay ba so we will Define let me do another okay you can uh type the query here as well Foo football so this would return you football only and let me type O R so this would match this regular order by order by so this works absolutely fine so uh we can do for another as well let me do DJ so it would return with Django and Pui this would return me python it's absolutely working fine so in this soap video we are going to implement the update operation so let's get started with this so basically uh I have my todo app so we click on list all to Do's so we have a uh all todo's list so basically we want to have a update operation here or edit operation so for that what we what we can do we can talk we can move to our list.html and copy this and click here edit and change this button to button warning and and here we can have the edit operation so for that I'll repeat this page so I'll have the edit operation okay fine uh for this edit operation to have the happen we have to have a url.py so basically like for the delete one we will have for that for edit edit so basically I tell you the difference between the edit and update so basically uh right now we're implementing the edit operation reviews dot edit and name is able to edit I hope this is fine so and in views then we'll move to use dot py file so here we mentioned views.edit so we'll Implement edit operation here so for that we'll Define edit Define edit I'll give requests and ID okay so and what we'll do so I'll copy this line so basically we are going to render a new HTML file known as edit.html but before that we need to find the object which we are going to do so object is going to to do so basically like in the delete operation we read this we did this uh we got the object which we have to delete so in the same way we are going to find the object which we have to edit so then my dictionary is equal to this which would give title is equal to object dot title object dot title then description description is a good object Dot description then priority is equal to object Dot priority okay so then if you want to so basically the object we want to edit will get the object then these are the properties or attributes referring to the that object and then we'll pass to edit.html okay I'll tell you why you will pass to editor HTML before that we'll move to index.html so this form was for the this form was for the submit part so we will copy this form okay then I'll copy this form I have created a new file edit.html okay okay I'll not directly copy this I'll do one thing first I'll copy the extend template so this would get me the extent template then I would remove this okay then I will do edit edit to do okay we added data whatever you want then now I'll move to index.html I'll copy this form okay then I'll copy this form and paste it here okay so I have this so I'll complete two divs so this would yeah now I've already know I'll show you one thing when I refuse this page I click on edit so I'll move to this form but still know this form is empty okay first I'll change this add button to update okay first thing I'll do this second thing I'll do this I'll change this the URL submit to URL update uh okay and let it be submit now I'll tell you one thing so I have a title here so I'll give a value is equal to title which we had rendered using the dictionary so this would I'll refresh this page so I have basketball here okay so perfectly fine in the same way I'll have the description and in the same way I'll have the priority as well priority as well to perfectly fine it would work so I'll have a priority as there okay so now what we are going to do so we have this so basically we want to update this so we can update this very easily so what we can do uh we'll move to urls.py file and Define an update operation update and I'll take an integer ID here again then again so I was telling you there's a difference between an edit and update so now we'll update this update and name is go to update okay so what we'll do uh so we will move to views.py file Define update request ID so this is particularly same this would be very much same as the submit operation okay but there would be a minute change I'll tell you so first we are not going to create a new object we are going to update the object with the given ID so this is fine second uh we'll need to create a import date time okay and updated add underscope will go to date time dot date time dot now okay and then object dot created at created add is equal to updated as so this would work fine so this is telling you that we need to First find the object we are going to update then title is title description priority then date time we will create a new date that is updated at and will assign it to the cater ad then we'll save it and then we're going to return the list.html and one thing we are going to change here is that we are going to change this to update that is ID but still uh one thing I'm missing that I have not rendered the ID from use dot previous file so I will do this now this should work fine this is by the object dot ID okay and in my edit.html this should be with curly braces so this should work fine so let me create a new to do new to do new to do now okay uh give me a priority number of 500 I'll submit here so it has been created now click on edit so new to do now is new to do now now again okay new again so hopefully we check let me check the this is yeah new to do now new to do now so yeah so now what we are going to do let me edit this and I'll type new to do now again then again okay another priority number of 505 so it throws me an error okay page not found okay let me check to in my urls.com okay this was having an issue yeah so yeah I've got a handmade so here you can see this has been changed okay new to do now again 505 had been changed so basically in the same way let me edit anyone this is Cricket 89 so I'll click on edit so this is a cricket cricket okay I'll change it to football football again new something like that so Cricket new and I'll give a priority number of 8.99 so let me check so yeah here you can see this has been updated football again new 899 Cricket new and the time had been updated accordingly so this works perfectly fine so we are almost done with the todo app so we'll catch up in the next tutorial so what we can Implement next so basically we are done with the uh all operations so basically uh uh okay because one thing I noticed here something let me check that this is basketball new 0.02 so I had only one word edit.html title description okay even I'll try to check up in this tutorial next tutorial uh there's just some minute uh so basically I'll try to update this football football uh a very huge number so this is this has been successfully updated it works perfectly fine so I'll delete this again so even the delete operation also works fine so delete delete delete delete works fine we can carry and uh we'll uh we'll do to search then uh football no not yet maybe we are not matching with oh yeah we don't have anyone so let me type DJ yeah so it works out perfectly fine so almost our operations work to perfectly fine so basically in today's tutorial we are going to connect the Django with mongodb and I will illustrate all the process how you can uh create a mongodb database and how you can connect that model DB database with your Django application so let's get started with today's tutorial the first thing we need to do we can open our code editor and then we need to type the command pip install Django so this would install the Django on a local machine and with this command we can create a Django project as well as a Django app on our machine then then I would like to tell you that till the time this is being installed on my machine what you can do yeah here you can see that it is installed in Django on my machine and you can install Django with this simple command pip install Django and then we have a mongodb plus I will show you how the we can go here you can refer to this website uh first this is the website for Django I have already told you how you can solve Django then this is the website from here you can install the mongodb Community Edition and this works as a interface with you uh with the Mongol DB database as a user interface uh very similar to phpmyadmin which is used for SQL then this is the package we are going to use this package as a very similar name jongwo the word jungle is derived from uh like uh this is used to connect Django with mongodb so jongo is the package we are going to use so let's get back to our code editor so first what you can do you can connect you to the uh connect to the Local Host server using this mongodb Compass Community Edition and you can click on the connect button then this would connect to the localhost now here you can see that it has been connected to the Local Host now what you can do you can create your own database so let's click on here uh so first okay let's continue with installation part so after installing uh after installing Django you can install if install jungle so this is the command we are going to use to connect with the package this is the package we are going to use to connect Django with the mongodb database so it's very easy so uh till the time it's being installed yeah it's a very easy process and next what we can do then we can create a Django project and then we would I will show you how you can make a migration in your app then how the how we when you can change see the changes reflected in the mongodb database so let's what we what we can do uh next what I have so then we have to make some changes in your settings.py file I'll also come to that then you can see the changes on the mongodb compass so that's very easy so let's create our Django project so I'll type Django admin start project a demo project so I'll create a project then what you can do you can open a folder and I've created this project on my desktop so here I can open it so now the project is open in my vs code so next thing you can do you will I'll navigate you to the settings.py file so you can press Ctrl dot p and if settings.pi file so this would simply directly to the settings.pr file and here you can see that there is a section for databases so we would be doing this and I will open my terminal as well so we would be connecting this so what we can do first since we have installed Django now what we can do first we'll create a database I will show you like from here you can disconnect and connect so I'll show you again very first you disconnect then you can click on connect so this would you connect you to the local news database and now click on create database and type demo database remote database and you can give a collection name a demo collection so I would click on create database so here you can just copy the you can keep this as a referral demo database so and demo collection so I'll click on create database so here you can see a database has been created and which is having a just a demo collection right now but what we can do uh we will connect to the our project and then run the app so I'll sorry run the migration so what you can do you can simply copy this and you can paste this code I'll comment this out databases so I'll put triple quotes here so this would basically comment this section typical quotes and now I would paste this you can do one thing you can remove this client part because you are right now dealing with the localhost and by default it would detect this so now you need to find your database name so I would Define my database oh sorry so my database name is this this is my database demo database so I'll move to this here and I'll type demo data base okay so this looks perfect now uh since I'm my connection is on so I type python manage dot UI make migrations and this would make the migrations in my database so so it says no change is detected so now I can type python manage.py migrate so here you can see the all the migrations are being applied so here you can see the migration has been applied now I would move to my database and I'll click on the refresh button and here you can see and I click on the demo database perfect so I have got all the migrations of the Django here in my mongodb database so this looks perfectly fine so you can create your models and then run the previous two command that is migrate and migrations and then you will get to go with this a project running so thank you guys for watching this video so I'll catch up in the next tutorial so here you can see I have made the project uh you can also do one thing you can type python manage dot UI run server so this would run the app on your local machine so you can simply copy this and you can paste this on your browser and here you can see your Django project is perfectly running so everything looks perfect so this is how I made the settings in my database this is the mongodb collections what I've got and this the project is already running but now we are trying to implement crowd operations so basically there are four card operations that is create read update and read and we are going to implement this using more ODB so first thing you can do is you can open this mongodb Compass community in addition and you can click on connect when you click on connect you can last in the last video I showed you how we created a demo database here then you can open the demo database and here you can see all the migrations the demo database has all the migrations we have done so you can refer to the previous tutorial how we connected mongodb to Django it's very simple and it's very quick enough so I can also give you a quick view uh in settings.py file you need to go into settings.py file and what you need to do here you need to make sure that this database engine is jungle and you have to install a demo you have to make a demo database and the name of that database is very much the same demo database and you have to install a package called jongo so it can be easily installed by the by attacking the command PIV install Yahoo uh for a what uh for any like if you want to see it as a demo purpose you can refer to the previous video uh now what we are going to prevent the crowd operations so we will go step by step and we will see how we can upgrade a app and then how we can implement the uh how we can implement the product operation in that app so what you can do you can simply copy this or you can type on your vs code python manage dot py start app demo app so this would uh start a demo app inside your current project directory and now what you can do uh insert uh because the time it's being created creating a demo app I can show you frozen commands uh this is the one like uh I'll show you we are going to implement a database model so this is how we make a database model we will make then we will create a super user and this is a Administration I will show you that and I'll simply show you so uh okay so let's get back to our tutorial see the demo app has been created you can see the folder here demo app and it has a file called models.py file since I have created an app demo app I need to make sure that add this application here demo app okay now what you need to do I've already connected to my database and the next thing I'm going to do I'll move to models.pi file and I need to create my models here so simply I'll create a model and I'll make create a basic model see this one uh I'll copy this and paste it here instead of this I'll do class to do uh and this is the this is instead of first name I'll type task and instead of the second last name I'll do this to description this script shun so this is the description I'm going to have task zero models.cathy and this is the description here I can increase the description to 100 perfect uh yeah perfect now I have increased the description to 100 and now what we can do uh inside my admin dot py file I can register this and for that I know to do what I need to do I need to uh first import models from dot models import everything so I from dot models import Star and here you can see that I have registered I can register a model here so I can copy this and paste it here uh yeah so here you can see uh I can uh you know import that model and register here as an admin so I can implement the credit operations so I'll simply type to do so to do is the model which I have to register and I will create a super user at the same time python manage dot py create super user so this is the type of command I have to type to create the super user so it could ask me to like the username so here you can give a username as admin you can leave this email address password you have to be give a very simple one and then again you can give a password the make sure it's an easy one just for the demo purpose and you can continue that and now so this password it seems to be too common but you type y that is yes and it will create the super user now since I created the model database model and I also registered that so now what I will do I will migrate this database python manage sorry python manage dot py make migrations and now what I'll do so here you can see it shows that create model to do now I'll migrate this python manage Dot py sorry python manage dot py migrate now I will migrate this database so yeah here you can see so I have made this and now what I am going to do I'll go to My Demo database and I'll refresh this okay so here you can see that I have got a demo app to do here here you can see demo app to do now what I'll do I'll run this app python manage.py manage dot py run server okay now the app will start at start at the Local Host so I'll move to my localhost so like we have created the model perfect we have registered it as admin perfect and now uh okay this seems to be something else sorry uh yeah now I have created an app which I told you that and then we registered the app inside and installed apps directory as well so we are going in the right direction now I'm at a localhost I'll refresh this and you can see that I have the my app successfully running now I will go to the admin slash admin so simply we refer to the documentation for the quick illustration of this and the you need to type in the username and password you had set and what you need to do then you can log in here and here you can see I have to Do's so you can add a todo here simply we are going to implement the cloud operation so to do number one so a hello world I'll type simply Type Hello World anything you can give hello world now I'll save this uh let me I'll either I'll do save and add another or I can save this yeah so this has been saved and here you can see the object says yeah this is I have the object okay so I I'm clicking on Save again yeah but now when I move to my database I click on this demo I have to do and here you can see that you have this data in the Json format so perfectly fine so here you can see that I have the data in the Json format uh since it's Momo DB okay uh I'll quickly show you yeah you can see this in the Json format so and this register you can also click on this button so this would show you in the tabular form and this will show you in the Json form so perfectly fine so let's Implement some few operations on that again now I click the todo app project and I get Google number one edited so I can save so this has been edited so when I move to my database I'll click on refresh I'll click here refresh button yeah now it says to do number one edited now simply I can add another review so to do number two number two and I'll give the same description yeah and then I can move to my database refresh I'll get another one and now I can delete one so that makes a last purpose of our project I'll delete this yes I'm sure I'll delete this and when I move to my database I found it deleted so that's perfectly for how we implement the create operations so thank you guys thank you so much for joining us in this tutorial so this was a quick purpose you can simply create a todo app and with the database
