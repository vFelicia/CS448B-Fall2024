With timestamps:

00:00 - now let me add a very simple python
00:02 - script here which have two numbers and
00:05 - I'm just comparing them using if
00:08 - statement so once you have your script
00:11 - you have multiple options to run your
00:13 - script so you can right click on the
00:16 - same editor in which you are writing
00:18 - your code and then you can see you have
00:21 - this option to run a python file in the
00:24 - terminal you also have the Run current
00:27 - file in the interactive window so you
00:30 - have all these options here also you
00:32 - have this run button which is which is
00:35 - going to run your python file or if you
00:38 - are a fan of command prompt or terminal
00:40 - then you can directly type your command
00:43 - for example Python and then the name of
00:46 - the file which is going to run your
00:48 - python script in this terminal so let's
00:52 - say I'm going to choose this option to
00:54 - run my python script I'm going to press
00:56 - this button you can see my python script
00:59 - is execute muted and the result is here
01:03 - right so it's going to just select the
01:07 - interpreter from here and then the
01:09 - complete path of the file and it's going
01:12 - to run this file and then give you the
01:15 - out let's say I want to just run this
01:17 - script using terminal I can just type
01:20 - python here and then the name of the
01:22 - file which is test Dot py and it's going
01:25 - to give me the output which is lot
01:27 - cleaner than using this terminal because
01:31 - it's going to show you all the complete
01:34 - parts of the Python executable and your
01:37 - file right so whatever option seems to
01:40 - be useful for you you can use that
01:42 - option now let's say you ran your python
01:44 - script and let's say you want to debug
01:46 - your python script so you can just go to
01:51 - your script and then at the break point
01:53 - on your python script using these red
01:58 - dots right so you can just hover over
02:00 - the line on which you want to set the
02:02 - breakpoint and then just click there and
02:05 - you will see this kind of Red Dot here
02:09 - that means the breakpoint is set on the
02:11 - third line
02:13 - now on the left hand side you have this
02:16 - debug and run Icon here so you can click
02:19 - on debug and run
02:21 - and here at the bottom you will be able
02:24 - to see all break points you have set so
02:27 - right now I only have one breakpoint I
02:30 - can set multiple breakpoints here and I
02:32 - will be able to see the list of all the
02:34 - breakpoints here
02:35 - from here I can disable all the
02:38 - breakpoints by just clicking on this
02:40 - icon which means all the breakpoints are
02:43 - there but they are disabled right if I
02:46 - want to remove all the breakpoints I can
02:48 - click on the remove all breakpoints icon
02:51 - here and it's going to remove all the
02:53 - breakpoints so let me add the breakpoint
02:55 - once again
02:57 - now for the first time when you are
03:00 - debugging your python script when you
03:04 - click on the debug
03:06 - icon gear you will see this run and
03:09 - debug button here and also you will see
03:12 - uh this option which says to customize
03:14 - run and debug you can create a launch
03:19 - dot Json file so here you will be able
03:22 - to customize your debug file for example
03:25 - which debugger you want to use for your
03:28 - debugging which python interpreter you
03:31 - want to use which file you want to
03:34 - use for debugging so all these options
03:37 - you can give in the launch.json file let
03:42 - me just click on run and debug option
03:44 - which is going to give me all these
03:47 - options I want to choose the first
03:48 - option which is python file
03:51 - and once I click on that I will be able
03:54 - to see that my debugger is running
03:57 - and my program execution will stop at
04:01 - the break point here so you can see
04:03 - my execution is stopped at the break
04:06 - point I can see all the debugging
04:09 - related options here so when I click on
04:11 - this continue button my program will run
04:15 - normally
04:16 - I can just
04:18 - step over I can step into a function I
04:22 - can come out of the function and I can
04:24 - rerun my debugger using this option and
04:27 - I can stop this debugger using this icon
04:30 - here right
04:31 - when you see this pink kind of bar here
04:36 - that means your debugger is running
04:38 - right if you stop it
04:41 - you will see that this pink bar is gone
04:45 - right so this is kind of a trick to
04:50 - observe when your debugger is running or
04:53 - not right so let me rerun it once again
04:56 - you can see the debugger is running
04:59 - program execution is stopped at this
05:02 - breakpoint
05:03 - I will be able to see the list of all
05:05 - the local variables on the left hand
05:07 - side I can watch some variables let's
05:10 - say I want to watch a variable B I can
05:13 - just type B and then press enter and
05:15 - it's going to give me the value of the
05:18 - variable which I want to watch here
05:22 - I can also see the globals here so you
05:25 - can see all the global variable values
05:28 - are here
05:29 - and I can just tap over right so I can
05:34 - just go to the next execution point and
05:38 - see what's happening in my script
05:40 - so this is how you can debug your script
05:43 - let me just stop the debugger I can once
05:47 - again go to my folder Explorer now once
05:49 - you have added the python extension you
05:52 - will be able to see that the python
05:56 - intellisense is also there so when you
05:59 - type some letters of a method let's say
06:03 - it's going to show you all the methods
06:06 - which you can use related to what you
06:10 - have typed in your editor so when I type
06:13 - PRI it's going to show me all the print
06:16 - related options right I can also when I
06:20 - just write one parenthesis it's going to
06:23 - complete that I can print the value of
06:27 - let's say B right so all the
06:29 - intellisense options are available for
06:32 - me once I have installed my python
06:36 - extension I can just save my script by
06:39 - just pressing Ctrl s which is going to
06:41 - save my script now let's say you are an
06:44 - advanced user and you want to use a
06:46 - python virtual and in your project right
06:49 - so normally let's say whenever you want
06:52 - to install a python pip package you can
06:55 - do it directly but if you want to create
06:57 - a virtual end for your project you can
07:00 - also do it easily in Visual Studio code
07:03 - so let me create a new test file let me
07:06 - name it as test2 Dot py and here in my
07:10 - test2.py I have this very simple
07:14 - python script which uses a package
07:17 - called bcrypt right right now you can
07:21 - see this yellow squiggly a line here
07:24 - which says import bcrypt could not be
07:27 - resolved because we haven't installed
07:30 - this package using pip on our
07:33 - project so let me just close all these
07:36 - terminals I just want to use one
07:39 - terminal which is the command prompt and
07:41 - let me clear this command prompt here
07:44 - right so in order to create a new
07:46 - virtual environment you can type this
07:49 - command so python hyphen M then v n and
07:55 - then n and then press enter which is
07:58 - going to create a new virtual end for us
08:01 - and you will be able to see this warning
08:03 - which says we noticed a new virtual
08:06 - environment has been created do you want
08:09 - to select it for the workspace folder
08:12 - so when I choose yes here see what
08:15 - happens when I choose yes you will be
08:18 - able to see this virtual end is listed
08:21 - here so with my python interpreter this
08:24 - end is also visible you can see and we
08:29 - end right so now I can choose between
08:32 - the virtual and also from this
08:35 - interpreter list okay so you can choose
08:38 - your virtual and also so to activate
08:41 - this virtual and I can give this command
08:43 - and then press enter which is going to
08:46 - activate my virtual amp and you will be
08:50 - able to recognize using this so if you
08:52 - see the name end here then you have
08:57 - activated the virtual end so if you see
08:59 - the name of your virtual environment
09:01 - that means it's activated and then we
09:04 - can just install this package here so I
09:08 - can just write pip space hyphen Q
09:11 - install bcrypt which is my package Edge
09:13 - which I want to install and once I have
09:15 - installed this package you can see the
09:18 - squiggly line is gone that means I can
09:21 - just use this B crypto package in my
09:25 - script easily now right so now I can
09:28 - just type python command and then the
09:31 - name of the file which is test2 dot Piva
09:35 - py right so that is test2 Dot py and
09:38 - then press enter which is going to run
09:41 - this script and it runs successfully
09:43 - also when you are done you can just type
09:46 - deactivate which is going to deactivate
09:49 - your virtual environment so I can type
09:51 - deactivate and then press enter and now
09:54 - I'm in my normal command prompt also
09:56 - once you have created the virtual
09:59 - environment you will be able to see this
10:01 - directory here and right so all the
10:04 - configuration you will be able to see
10:06 - here and of course you will have the
10:08 - track of your files in your Version
10:10 - Control inside your Visual Studio code
10:12 - editor using the source control option
10:14 - so if you have installed git it's going
10:17 - to show you what changes you have made
10:19 - and it's going to help you to commit
10:22 - your code push your code pull your code
10:24 - from GitHub or any other repository
10:26 - easily inside the visual studio code
10:30 - the last option which I want to show
10:32 - here is let's say you don't want to just
10:34 - run and debug you want to create a
10:36 - launch dot Json file for debugging you
10:39 - can click on the Creator launch.json
10:42 - file and then click on python file and
10:46 - it's going to create this launch.json
10:48 - file so as I said so as I said you have
10:51 - the information about the console here
10:54 - the program which you want to run
10:56 - and then the request is here the type is
11:00 - python the name will be python current
11:03 - file and if you have created multiple
11:06 - debug files you will be able to choose
11:10 - those files or configurations using this
11:14 - list right and when you go to the
11:17 - Explorer you will be able to see this
11:20 - launch.json file which is created under
11:23 - dot vs code
11:25 - folder so this is a hidden directory and
11:28 - you will be able to change the content
11:31 - inside it using this launch dot Json
11:34 - file

Cleaned transcript:

now let me add a very simple python script here which have two numbers and I'm just comparing them using if statement so once you have your script you have multiple options to run your script so you can right click on the same editor in which you are writing your code and then you can see you have this option to run a python file in the terminal you also have the Run current file in the interactive window so you have all these options here also you have this run button which is which is going to run your python file or if you are a fan of command prompt or terminal then you can directly type your command for example Python and then the name of the file which is going to run your python script in this terminal so let's say I'm going to choose this option to run my python script I'm going to press this button you can see my python script is execute muted and the result is here right so it's going to just select the interpreter from here and then the complete path of the file and it's going to run this file and then give you the out let's say I want to just run this script using terminal I can just type python here and then the name of the file which is test Dot py and it's going to give me the output which is lot cleaner than using this terminal because it's going to show you all the complete parts of the Python executable and your file right so whatever option seems to be useful for you you can use that option now let's say you ran your python script and let's say you want to debug your python script so you can just go to your script and then at the break point on your python script using these red dots right so you can just hover over the line on which you want to set the breakpoint and then just click there and you will see this kind of Red Dot here that means the breakpoint is set on the third line now on the left hand side you have this debug and run Icon here so you can click on debug and run and here at the bottom you will be able to see all break points you have set so right now I only have one breakpoint I can set multiple breakpoints here and I will be able to see the list of all the breakpoints here from here I can disable all the breakpoints by just clicking on this icon which means all the breakpoints are there but they are disabled right if I want to remove all the breakpoints I can click on the remove all breakpoints icon here and it's going to remove all the breakpoints so let me add the breakpoint once again now for the first time when you are debugging your python script when you click on the debug icon gear you will see this run and debug button here and also you will see uh this option which says to customize run and debug you can create a launch dot Json file so here you will be able to customize your debug file for example which debugger you want to use for your debugging which python interpreter you want to use which file you want to use for debugging so all these options you can give in the launch.json file let me just click on run and debug option which is going to give me all these options I want to choose the first option which is python file and once I click on that I will be able to see that my debugger is running and my program execution will stop at the break point here so you can see my execution is stopped at the break point I can see all the debugging related options here so when I click on this continue button my program will run normally I can just step over I can step into a function I can come out of the function and I can rerun my debugger using this option and I can stop this debugger using this icon here right when you see this pink kind of bar here that means your debugger is running right if you stop it you will see that this pink bar is gone right so this is kind of a trick to observe when your debugger is running or not right so let me rerun it once again you can see the debugger is running program execution is stopped at this breakpoint I will be able to see the list of all the local variables on the left hand side I can watch some variables let's say I want to watch a variable B I can just type B and then press enter and it's going to give me the value of the variable which I want to watch here I can also see the globals here so you can see all the global variable values are here and I can just tap over right so I can just go to the next execution point and see what's happening in my script so this is how you can debug your script let me just stop the debugger I can once again go to my folder Explorer now once you have added the python extension you will be able to see that the python intellisense is also there so when you type some letters of a method let's say it's going to show you all the methods which you can use related to what you have typed in your editor so when I type PRI it's going to show me all the print related options right I can also when I just write one parenthesis it's going to complete that I can print the value of let's say B right so all the intellisense options are available for me once I have installed my python extension I can just save my script by just pressing Ctrl s which is going to save my script now let's say you are an advanced user and you want to use a python virtual and in your project right so normally let's say whenever you want to install a python pip package you can do it directly but if you want to create a virtual end for your project you can also do it easily in Visual Studio code so let me create a new test file let me name it as test2 Dot py and here in my test2.py I have this very simple python script which uses a package called bcrypt right right now you can see this yellow squiggly a line here which says import bcrypt could not be resolved because we haven't installed this package using pip on our project so let me just close all these terminals I just want to use one terminal which is the command prompt and let me clear this command prompt here right so in order to create a new virtual environment you can type this command so python hyphen M then v n and then n and then press enter which is going to create a new virtual end for us and you will be able to see this warning which says we noticed a new virtual environment has been created do you want to select it for the workspace folder so when I choose yes here see what happens when I choose yes you will be able to see this virtual end is listed here so with my python interpreter this end is also visible you can see and we end right so now I can choose between the virtual and also from this interpreter list okay so you can choose your virtual and also so to activate this virtual and I can give this command and then press enter which is going to activate my virtual amp and you will be able to recognize using this so if you see the name end here then you have activated the virtual end so if you see the name of your virtual environment that means it's activated and then we can just install this package here so I can just write pip space hyphen Q install bcrypt which is my package Edge which I want to install and once I have installed this package you can see the squiggly line is gone that means I can just use this B crypto package in my script easily now right so now I can just type python command and then the name of the file which is test2 dot Piva py right so that is test2 Dot py and then press enter which is going to run this script and it runs successfully also when you are done you can just type deactivate which is going to deactivate your virtual environment so I can type deactivate and then press enter and now I'm in my normal command prompt also once you have created the virtual environment you will be able to see this directory here and right so all the configuration you will be able to see here and of course you will have the track of your files in your Version Control inside your Visual Studio code editor using the source control option so if you have installed git it's going to show you what changes you have made and it's going to help you to commit your code push your code pull your code from GitHub or any other repository easily inside the visual studio code the last option which I want to show here is let's say you don't want to just run and debug you want to create a launch dot Json file for debugging you can click on the Creator launch.json file and then click on python file and it's going to create this launch.json file so as I said so as I said you have the information about the console here the program which you want to run and then the request is here the type is python the name will be python current file and if you have created multiple debug files you will be able to choose those files or configurations using this list right and when you go to the Explorer you will be able to see this launch.json file which is created under dot vs code folder so this is a hidden directory and you will be able to change the content inside it using this launch dot Json file
