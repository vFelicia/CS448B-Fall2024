With timestamps:

00:00 - hello guys welcome to the next video on
00:02 - node.js tutorial for beginners now in
00:04 - this video I'm going to show you how you
00:07 - can create your first hello world
00:09 - project using node.js from start to end
00:12 - so when we were installing node.js we
00:15 - have seen how we can you know just copy
00:17 - and paste the code and create a simple
00:20 - node.js project but we will see in this
00:22 - video what this code means and how we
00:25 - can create a very simple hello world
00:28 - node.js server so let's get started I
00:33 - will be using Windows for this but you
00:36 - can you know do this same on your Linux
00:39 - operating system or Mac OS plus I'm
00:42 - using the Visual Studio code for editing
00:47 - my code or as an editor but you are free
00:51 - to use any other code editor which you
00:53 - please to use so what I'm going to do
00:56 - first is I will just open the you know
01:00 - folder in which I want to create my
01:02 - project so for example this is the
01:04 - folder where I want to create a project
01:06 - on Windows simple
01:08 - you know thing is you can just press the
01:11 - shift button and right click on it and
01:14 - you can open the command line in this
01:16 - folder by this method so just press
01:19 - shift right click and just press this
01:22 - option which says open command window
01:24 - here which is going to open the command
01:27 - window in this folder right now here
01:30 - what we need to do is we will create
01:33 - first of all our for example up folder
01:36 - which will we will name it as HelloWorld
01:38 - for example so I will just write mkdir
01:42 - HelloWorld now or let it be Hello right
01:47 - and press Enter
01:48 - this is going to create this folder
01:50 - right and then we will go inside this
01:54 - folder so CD hello and we are inside
01:57 - this folder so let's go inside this
02:00 - folder and in here what we will do is we
02:03 - are going to create a file javascript
02:06 - file for example so I will
02:09 - do this by using Visual Studio code so
02:14 - if you have followed my last video in
02:16 - which I have shown you how to install
02:17 - Visual Studio code you can just type
02:20 - code here and then type dot and press
02:23 - Enter
02:24 - which is going to open visual studio
02:26 - code in this folder so it's going to
02:29 - open visual studio code inside it will
02:33 - be you know opening this folder also for
02:35 - you right now inside this folder let's
02:38 - create a file so I'm going to create a
02:40 - new file here and I'm going to name it
02:44 - as so let me save this file as for
02:47 - example app dot J's file okay press
02:50 - enter and this is going to create your
02:53 - app dot JS file now let's start writing
02:56 - some code so first thing here we need
03:00 - here is wire HTTP is equal to require so
03:07 - just write require and we need to
03:10 - require a module so I will tell you what
03:14 - the module is so we just need to write
03:17 - HTTP here and a module is something like
03:21 - a library so it does what classes do in
03:25 - object-oriented programming is so it's
03:27 - for example whatever you do in C++ you
03:32 - just include a library inbuilt library
03:34 - for example iostream or some other
03:37 - libraries or you what you import in Java
03:40 - you import some libraries in order to
03:43 - work with those libraries in Java
03:45 - similarly modern node modules are the
03:49 - way to import some already built code in
03:53 - nodejs and we can use this code so
03:57 - there's such a module in node.js which
04:01 - is already inbuilt module which is HTTP
04:04 - and we need to create the instance
04:06 - instance of this module using require so
04:11 - require is like include MC plus plus or
04:14 - import in for example Java right so
04:18 - after requiring the
04:20 - some HTTP module we created an instance
04:24 - of HTTP right now the next step is we
04:28 - use the creating instance and we will
04:32 - call a method called create server or to
04:35 - create an instance of this server right
04:38 - so just use for example HTTP and then we
04:42 - will call a method called create server
04:46 - so just write create and so something
04:50 - like this okay and inside these brackets
04:53 - we pass one function now in JavaScript
04:59 - if you know we can make a anonymous
05:02 - function let's create a function here
05:04 - and then we will see what is an
05:07 - anonymous function so for example I will
05:09 - just write var and for example I will
05:13 - just write the name of the function so
05:16 - if you foo for example right and then I
05:20 - will just write function and we don't
05:24 - need to give any name to this function
05:26 - because we want this function to be
05:28 - anonymous and we will pass two arguments
05:31 - here response and request so first will
05:35 - be for request for example and second
05:39 - argument is the response so you can give
05:41 - any name to these argument I'm giving it
05:44 - according to the usage which we will
05:47 - pass here as an argument so you can do
05:50 - something like this or you can you know
05:53 - use a full name for example request or
05:55 - response it doesn't really matter right
05:58 - and then you can just create this
06:01 - function so this kind of function
06:02 - doesn't have any name so they are called
06:04 - anonymous function and then you can pass
06:07 - these functions here right so this will
06:11 - be your function you are passing or
06:13 - instance of function you're passing
06:15 - inside this creates over method now most
06:18 - common you know usage of this kind of
06:22 - anonymous function we don't do it
06:25 - something like this but instead of this
06:27 - passing the instance you can directly
06:31 - paste it something like this so you will
06:33 - most
06:33 - see this kind of code in node.js so just
06:37 - pass this anonymous function inside
06:39 - these brackets and you will be good to
06:43 - go so there are both the ways are
06:45 - correct for you right now inside this
06:48 - function we will just take a request and
06:51 - the simple thing is to send the response
06:56 - right so first of all on which port or
07:00 - on you know on which IP you are going to
07:04 - run your server for example so there is
07:08 - a function so just go I outside this you
07:12 - know function and just call a function
07:15 - called listen so just write listen
07:18 - function and whatever number you will
07:21 - write here this will be your port for
07:23 - example you write 3000 here this will be
07:26 - the port on which your you know serval
07:29 - will run so it will run on localhost
07:32 - obviously and it will run localhost 3000
07:36 - port ok listen on 3000 for port you can
07:40 - do something like 80 81 in you know
07:43 - whatever port is available on your you
07:46 - know computer you can use this for sport
07:48 - so for example I use 3000 and the next
07:53 - thing here is we will take our response
07:57 - variable so just use this response
08:00 - variable and then call a method called
08:03 - end here okay and this is the basic you
08:07 - know thing you need to do in order to
08:09 - you know reply whatever client is
08:13 - recommendable client is you know
08:15 - requesting from a get request HTTP
08:18 - request for example right so we will
08:20 - send for example hello world here so
08:23 - just write hello or hallo node will be
08:27 - more appropriate right and if you want
08:29 - you can just give this line break here
08:31 - also so this is it this is the simplest
08:35 - server you can make using no cheers and
08:38 - if you want you can just log you know
08:42 - show the user that you have
08:45 - created this server on this board so you
08:48 - can just write for example console dot
08:52 - log and then you can give the
08:56 - information so for example I can write
09:00 - server is running on for example
09:09 - 127.0.0.1 port 3000 okay and it will run
09:16 - on this port and obviously you need to
09:19 - write HTTP I hope you know what this is
09:23 - so HTTP colon slash slash something like
09:26 - this
09:26 - right and if you want you can do
09:28 - something like this also and then save
09:31 - your code and open your command line
09:33 - once again and you can see it has this
09:37 - file and you can run this file using
09:39 - node and then the file name which is app
09:42 - dot J's press ENTER and you can see it
09:45 - will give you this kind of alert you can
09:48 - just allow on your Windows operating
09:50 - system which is okay and it shows this
09:54 - message which we want to display from
09:56 - here so it's showing this message that
09:59 - the server is running on this port so
10:02 - let's see let's open our browser and
10:05 - let's see if it opens or not so you can
10:07 - see here this code is running so our
10:12 - service is running on 127.0.0.1 and it's
10:19 - printing hello node right so this is the
10:22 - basic you know code for the server so
10:25 - what we need to create a server and
10:28 - instance of HTTP module and then this
10:31 - method which takes our anonymous
10:33 - function which have two argument request
10:35 - and reply or response request in
10:39 - response and whenever request comes on
10:42 - this port you just reply with this
10:46 - message which is hello node for example
10:49 - now to inspect this code you can just
10:53 - right click here and you can just click
10:56 - inspect element
10:58 - here on Chrome also I think this is the
11:01 - same thing and you go to network here so
11:05 - something like this here network and
11:07 - then when we reload our server for
11:11 - example you can see there is a request
11:14 - get request and it's requesting this IP
11:20 - and this port is sending get request and
11:22 - in the reply we are getting the status
11:25 - code 200 which is okay whenever you are
11:29 - you know request on cat you are supposed
11:33 - to you know get the 200 okay reply which
11:37 - is a correct reply from the server right
11:39 - now this is the default so this reply
11:44 - 200 will be sent automatically but if
11:47 - you want to be sure you can just write
11:49 - response dot right head so just write
11:54 - write head and then it takes a few
11:58 - arguments so first is the reply code
12:00 - which is 200 which is also a status code
12:04 - or an HTTP if you don't know what is
12:07 - this 200 just search for HTTP status
12:10 - codes right and you will see what this
12:14 - means is and then the next argument will
12:17 - be an object which contains two argument
12:21 - once one is the content type so just
12:23 - write content - type and content type
12:29 - will be what kind of you know reply you
12:33 - want or you want that client to receive
12:36 - so content type let's say it's a text
12:41 - and plain so something like this not
12:46 - this first plain okay and then close it
12:50 - okay and then once again we will kill
12:53 - our server and once again we will run
12:55 - our server and then we will refresh our
12:59 - you know request and it's the same no
13:02 - change here but this time we are making
13:05 - sure that we are sending 200 on the
13:08 - client
13:09 - from the server using this code if you
13:11 - for example send 201 from here and save
13:15 - it and once again run your server so
13:19 - let's kill and run our server once again
13:21 - and once again refresh our code you see
13:25 - you get the status code to 0 1 but this
13:29 - means different so this is not a good
13:31 - practice whenever you are using get
13:33 - requests you don't want to send to 0 1
13:36 - but because the meaning of 2 0 1 is
13:39 - little bit different which is generally
13:41 - used in post requests so you know just
13:45 - search for HTTP status codes and you
13:48 - will be you know good to go ok so this
13:51 - is how you can write a basic server
13:54 - using node.js in the next video we will
13:57 - move forward and so please rate comment
14:00 - subscribe and bye for now

Cleaned transcript:

hello guys welcome to the next video on node.js tutorial for beginners now in this video I'm going to show you how you can create your first hello world project using node.js from start to end so when we were installing node.js we have seen how we can you know just copy and paste the code and create a simple node.js project but we will see in this video what this code means and how we can create a very simple hello world node.js server so let's get started I will be using Windows for this but you can you know do this same on your Linux operating system or Mac OS plus I'm using the Visual Studio code for editing my code or as an editor but you are free to use any other code editor which you please to use so what I'm going to do first is I will just open the you know folder in which I want to create my project so for example this is the folder where I want to create a project on Windows simple you know thing is you can just press the shift button and right click on it and you can open the command line in this folder by this method so just press shift right click and just press this option which says open command window here which is going to open the command window in this folder right now here what we need to do is we will create first of all our for example up folder which will we will name it as HelloWorld for example so I will just write mkdir HelloWorld now or let it be Hello right and press Enter this is going to create this folder right and then we will go inside this folder so CD hello and we are inside this folder so let's go inside this folder and in here what we will do is we are going to create a file javascript file for example so I will do this by using Visual Studio code so if you have followed my last video in which I have shown you how to install Visual Studio code you can just type code here and then type dot and press Enter which is going to open visual studio code in this folder so it's going to open visual studio code inside it will be you know opening this folder also for you right now inside this folder let's create a file so I'm going to create a new file here and I'm going to name it as so let me save this file as for example app dot J's file okay press enter and this is going to create your app dot JS file now let's start writing some code so first thing here we need here is wire HTTP is equal to require so just write require and we need to require a module so I will tell you what the module is so we just need to write HTTP here and a module is something like a library so it does what classes do in objectoriented programming is so it's for example whatever you do in C++ you just include a library inbuilt library for example iostream or some other libraries or you what you import in Java you import some libraries in order to work with those libraries in Java similarly modern node modules are the way to import some already built code in nodejs and we can use this code so there's such a module in node.js which is already inbuilt module which is HTTP and we need to create the instance instance of this module using require so require is like include MC plus plus or import in for example Java right so after requiring the some HTTP module we created an instance of HTTP right now the next step is we use the creating instance and we will call a method called create server or to create an instance of this server right so just use for example HTTP and then we will call a method called create server so just write create and so something like this okay and inside these brackets we pass one function now in JavaScript if you know we can make a anonymous function let's create a function here and then we will see what is an anonymous function so for example I will just write var and for example I will just write the name of the function so if you foo for example right and then I will just write function and we don't need to give any name to this function because we want this function to be anonymous and we will pass two arguments here response and request so first will be for request for example and second argument is the response so you can give any name to these argument I'm giving it according to the usage which we will pass here as an argument so you can do something like this or you can you know use a full name for example request or response it doesn't really matter right and then you can just create this function so this kind of function doesn't have any name so they are called anonymous function and then you can pass these functions here right so this will be your function you are passing or instance of function you're passing inside this creates over method now most common you know usage of this kind of anonymous function we don't do it something like this but instead of this passing the instance you can directly paste it something like this so you will most see this kind of code in node.js so just pass this anonymous function inside these brackets and you will be good to go so there are both the ways are correct for you right now inside this function we will just take a request and the simple thing is to send the response right so first of all on which port or on you know on which IP you are going to run your server for example so there is a function so just go I outside this you know function and just call a function called listen so just write listen function and whatever number you will write here this will be your port for example you write 3000 here this will be the port on which your you know serval will run so it will run on localhost obviously and it will run localhost 3000 port ok listen on 3000 for port you can do something like 80 81 in you know whatever port is available on your you know computer you can use this for sport so for example I use 3000 and the next thing here is we will take our response variable so just use this response variable and then call a method called end here okay and this is the basic you know thing you need to do in order to you know reply whatever client is recommendable client is you know requesting from a get request HTTP request for example right so we will send for example hello world here so just write hello or hallo node will be more appropriate right and if you want you can just give this line break here also so this is it this is the simplest server you can make using no cheers and if you want you can just log you know show the user that you have created this server on this board so you can just write for example console dot log and then you can give the information so for example I can write server is running on for example 127.0.0.1 port 3000 okay and it will run on this port and obviously you need to write HTTP I hope you know what this is so HTTP colon slash slash something like this right and if you want you can do something like this also and then save your code and open your command line once again and you can see it has this file and you can run this file using node and then the file name which is app dot J's press ENTER and you can see it will give you this kind of alert you can just allow on your Windows operating system which is okay and it shows this message which we want to display from here so it's showing this message that the server is running on this port so let's see let's open our browser and let's see if it opens or not so you can see here this code is running so our service is running on 127.0.0.1 and it's printing hello node right so this is the basic you know code for the server so what we need to create a server and instance of HTTP module and then this method which takes our anonymous function which have two argument request and reply or response request in response and whenever request comes on this port you just reply with this message which is hello node for example now to inspect this code you can just right click here and you can just click inspect element here on Chrome also I think this is the same thing and you go to network here so something like this here network and then when we reload our server for example you can see there is a request get request and it's requesting this IP and this port is sending get request and in the reply we are getting the status code 200 which is okay whenever you are you know request on cat you are supposed to you know get the 200 okay reply which is a correct reply from the server right now this is the default so this reply 200 will be sent automatically but if you want to be sure you can just write response dot right head so just write write head and then it takes a few arguments so first is the reply code which is 200 which is also a status code or an HTTP if you don't know what is this 200 just search for HTTP status codes right and you will see what this means is and then the next argument will be an object which contains two argument once one is the content type so just write content type and content type will be what kind of you know reply you want or you want that client to receive so content type let's say it's a text and plain so something like this not this first plain okay and then close it okay and then once again we will kill our server and once again we will run our server and then we will refresh our you know request and it's the same no change here but this time we are making sure that we are sending 200 on the client from the server using this code if you for example send 201 from here and save it and once again run your server so let's kill and run our server once again and once again refresh our code you see you get the status code to 0 1 but this means different so this is not a good practice whenever you are using get requests you don't want to send to 0 1 but because the meaning of 2 0 1 is little bit different which is generally used in post requests so you know just search for HTTP status codes and you will be you know good to go ok so this is how you can write a basic server using node.js in the next video we will move forward and so please rate comment subscribe and bye for now
