With timestamps:

00:00 - hey everyone in today's video we will be
00:02 - discussing some basic terms and methods
00:04 - in pi game module also we'll see some
00:07 - related examples
00:09 - so let's get started first up we have
00:12 - initialization of the module so we write
00:14 - import pi game and then we initialize it
00:17 - by writing pygame dot init
00:20 - we can also
00:22 - initialize a module in pi game
00:24 - separately like here i've written
00:27 - pygame.display.init
00:29 - we have separately called upon display
00:31 - we have separately initialized display
00:33 - module uh
00:35 - but if we do this
00:37 - you would not be able to work with other
00:39 - submodules you have to
00:42 - initialize them separately then so that
00:44 - would be a little bit tedious
00:46 - rather uh we do this by game dot init
00:50 - this initializes all the subclasses and
00:53 - sub modules of pygame okay
00:56 - now to quit or uninitialize any module
01:01 - we use dot quit method we have already
01:04 - used it
01:05 - in a game loop
01:08 - once we are done with
01:10 - working with pi game we do this pie game
01:12 - dot quit and this is how it is
01:14 - uninitialized and we can move out of
01:17 - pyking okay
01:19 - then i hope you remember in the first
01:22 - video i told you that any pi game code
01:25 - would be divided into
01:26 - three parts and that is
01:28 - initializing
01:30 - setting up the screen
01:32 - and the game loop then so the second
01:36 - part we have that is
01:38 - setting up the screen so the setting
01:41 - above screen is done using the display
01:44 - module okay so
01:46 - please listen clear carefully
01:49 - display module creates a new surface
01:52 - object which helps us visualize whatever
01:54 - we have created a text a drawing or an
01:58 - image it can be anything okay
02:02 - and display method
02:04 - helps us
02:06 - visualize
02:07 - what we have created on the screen we
02:10 - set using the set mode okay so the 600
02:13 - comma 600 is the size of the screen okay
02:16 - last time also we saw this
02:18 - and
02:20 - it is not just confined to setting up
02:22 - the screen
02:23 - giving sizes
02:25 - it has methods like get in it get in it
02:29 - gives us a boolean response returns a
02:32 - boolean response which tells us if the
02:34 - display module is initialized or not
02:38 - it has quit of course
02:41 - it has in it to initialize
02:43 - and
02:45 - it has get surface
02:47 - method which gives reference to the
02:49 - current window window okay so if you
02:52 - don't get this right now it's all right
02:54 - because
02:55 - uh we have not seen any example related
02:57 - once we see that you'd be a little bit
03:00 - clear with it
03:01 - we have flip
03:03 - and update there's a difference between
03:06 - flip and update although they are
03:08 - a little bit safe similar
03:10 - what does flip do it updates the entire
03:13 - video a window okay
03:16 - but update
03:18 - updates only portions of the window okay
03:23 - uh which are specified
03:25 - and
03:26 - whereas flip doesn't do it so you can
03:29 - say that a date is an optimized version
03:31 - of flip so we usually use update so that
03:34 - less memory is used okay
03:36 - then we have fill method which fills up
03:39 - the screen with some color okay
03:42 - so
03:44 - we are done with the second step let's
03:46 - move on to the third part that would be
03:50 - um
03:51 - rect like
03:53 - i would discuss uh direct module
04:00 - direct class in pygame is used to
04:02 - manipulate rectangular surfaces and
04:04 - store those objects
04:06 - we can make copies of those objects move
04:08 - them across the screen and do a lot of
04:11 - things
04:12 - to manipulate them edit them okay we
04:15 - always you use rect if you want to work
04:18 - with something that requires another
04:20 - surface or layer while writing a text
04:22 - while working with an image for example
04:25 - here
04:26 - we are working with an image okay i have
04:27 - loaded the image
04:30 - okay
04:31 - uh don't worry this is another subclass
04:33 - image is another subclass in pi game and
04:36 - i have loaded it okay
04:37 - uh simple
04:39 - and then what i have done is i have made
04:41 - another variable which is
04:44 - been declared
04:47 - a direct class object okay
04:50 - ball dot catrice this is how i have
04:52 - declared it as a red class object and
04:56 - what it does it
04:58 - is it
05:01 - loads this image on a rectangular
05:03 - surface okay so that we can view it on
05:05 - the screen
05:06 - fine
05:08 - so
05:09 - this is one functionality of correct
05:12 - uh red class okay we can even copy uh
05:16 - this
05:18 - object ball object
05:20 - or ball rect and
05:23 - use it otherwise we can move it we can
05:26 - move it in place we can change the size
05:28 - by using plate we can
05:31 - update its positions we can change its
05:34 - where it is located on the screen
05:37 - we can clip it we can crop it
05:39 - we can resize it
05:41 - and uh
05:43 - much more rect involves much more
05:45 - functionalities but these are some basic
05:48 - ones so
05:50 - uh which we would require right now okay
05:52 - so
05:53 - yeah let's move on to the very important
05:56 - part of pi game code that is the gaming
06:00 - loop okay and the gaming loop involves
06:03 - events
06:04 - every action in pi game is named through
06:07 - a queue okay
06:09 - a queue is a list which follows uh first
06:12 - in and first out principle
06:14 - uh
06:15 - i don't know if you know about queue or
06:17 - not it's a data structure and it follows
06:20 - first and then first out principle
06:22 - and
06:25 - it's it's just a simple list where
06:27 - insertion
06:28 - and deletion on are done from different
06:30 - ends okay so just treat it like a list
06:33 - and
06:35 - all the events are stored into a queue
06:37 - okay so
06:40 - every time we call if pygame.event
06:43 - uh
06:44 - an action or an event from the queue is
06:47 - popped out and been carried out okay it
06:49 - has been handled
06:50 - the instructions have been carried out
06:53 - so that we do not face any loss of event
06:56 - as the queue might get filled over
06:59 - over time okay and
07:04 - following this
07:05 - an event can also be an input from the
07:08 - keyboard
07:10 - so to do it deal with keyboard inputs we
07:13 - have a different subclass that is key
07:16 - okay
07:17 - so
07:19 - whenever we call this pygame dot key
07:22 - down and key up
07:24 - whenever a key is pressed these are
07:27 - automatically called up
07:30 - and
07:34 - this then helps by game dot event to
07:37 - carry out the definite
07:39 - or whatever
07:41 - event is said to be carried out for
07:43 - example i have written down a little bit
07:45 - of code for you
07:47 - which is
07:49 - talking about
07:51 - how
07:52 - key down and key up works
07:54 - so
07:55 - here um
07:57 - i have just written pygame dot key down
07:59 - because key down and key up are
08:03 - simultaneous processes as you
08:06 - press a key
08:07 - first key down is called and then you
08:09 - release it then key up is called okay
08:12 - so you don't need to write it uh like
08:14 - separately pi game dot key down or key
08:17 - up i have just written key down okay and
08:20 - uh if
08:21 - the event of
08:23 - even dot key okay is k a this is the way
08:27 - of uh telling
08:28 - that
08:29 - the key pressed is a okay
08:32 - and this is the way of telling
08:34 - the key press to zero you can have it
08:36 - for all the
08:39 - keys on the keyboard okay
08:42 - so
08:43 - or else if not something else is pressed
08:46 - you output a key which press so let's
08:49 - run this and let's see how it works
08:52 - run this and yeah
08:54 - uh so now i'd press a
08:57 - so a was pressed it outputs a was
09:00 - pressed i hope you can see it
09:02 - okay
09:03 - then
09:05 - when i when i press 0 it shows 0 is
09:08 - pressed if i press e
09:10 - a key was pressed because i did not
09:12 - mention anything for e okay so yeah
09:15 - let's
09:16 - stop this
09:17 - and let's go back to our initial
09:21 - page
09:22 - uh this is how we work with keys and
09:25 - keys have a lot of other methods uh like
09:28 - get focus is there if we to check if we
09:32 - are receiving keyboard inputs properly
09:34 - from the system
09:37 - we have get pressed like to get the
09:39 - state of all the keyboard buttons
09:41 - then we have name
09:43 - each of these keys have
09:45 - an identifier so
09:47 - we get that identifier from this we get
09:50 - the key code we can get the key code
09:51 - from the name
09:53 - this takes an argument and from the name
09:55 - we can get the identifier okay
09:58 - and so and so we have in other methods
10:01 - also
10:03 - we'd see them once we use them in
10:06 - further examples
10:08 - okay
10:09 - uh so coming back to
10:11 - the game code
10:13 - um
10:14 - that was
10:17 - we had initialized the ball uh image and
10:21 - then we have we are
10:25 - working with
10:26 - uh
10:27 - getting it on the
10:29 - rect class okay that we have got it on a
10:32 - red class object
10:34 - and i have mentioned the speed
10:37 - which is one comma one it works as an
10:39 - argument of rect class
10:42 - uh
10:43 - method move okay
10:45 - so what i've done is i've given it i've
10:48 - given speed as an argument so it shows
10:51 - that
10:52 - the x-axis with respect to the x-axis
10:55 - the object would be moving one um
11:00 - one units and with y-axis it would be
11:03 - also moving one okay so
11:07 - so rectangle would always have on on a
11:10 - plane it would always have four points
11:13 - left right top and bottom i hope you can
11:15 - imagine it and when the left
11:19 - point is less than zero the speed is the
11:24 - zeroth coordinate like this one
11:27 - is changed to minus one because we need
11:29 - to oppose the motion now okay
11:32 - or even when uh this happens when it's
11:35 - to the extreme right like it is more
11:37 - than the size of the screen
11:40 - similarly for top and bottom we are
11:43 - changing the y-axis okay motion of the
11:45 - y-axis and we will fill the screen with
11:48 - some color that is white right now and
11:51 - we'll do
11:53 - blit
11:54 - which
11:55 - is
11:57 - loading the ball object ball variable
12:00 - the image on the ball rect okay uh and
12:04 - then
12:05 - we are displaying it but and updating
12:08 - the complete thing okay
12:10 - complete
12:11 - screen let's see how this works
12:19 - we
12:20 - this is the random motion if we
12:24 - make
12:24 - 0 comma 1
12:26 - so it should only move
12:28 - along the y axis let's see if it does so
12:31 - yeah it is moving along the y axis okay
12:33 - it's not traveling anymore
12:35 - and what if we make this
12:39 - happen
12:41 - it should just move along the y-axis but
12:43 - with more speed
12:45 - yeah it does
12:48 - okay
12:48 - so
12:51 - that's pretty much it
12:58 - so next up we have some
13:00 - more definitions
13:02 - uh
13:03 - or more
13:04 - subclasses
13:06 - the first one is font we'll be
13:08 - discussing these in very brief because
13:10 - we'd be working with them further and
13:12 - we'll be discussing them
13:14 - more deeply in the next upcoming videos
13:18 - we have font when we'd be working with
13:20 - text uh printing getting a text on the
13:23 - screen
13:24 - with work with font we can
13:28 - like see what the default font is what
13:32 - all fonts are there we can create a new
13:34 - object from a file
13:35 - we can
13:37 - change the
13:40 - edit the
13:42 - text the style of the text we can style
13:44 - it we can make it bold we can make it
13:46 - italic we can underline it we can see
13:49 - what the size it we can see the essence
13:51 - and the scent of the text
13:53 - and we can do a lot more
13:55 - then when we'd be working with images
13:58 - we'd be
13:59 - using this image class
14:01 - and
14:02 - image module and we can load and unload
14:05 - an image we can change its format we can
14:07 - save the image we can crop it
14:10 - then we have time we can keep a track of
14:14 - for how long the
14:15 - program has been running we can change
14:17 - the frame rates
14:19 - then we have music uh module to work
14:22 - with
14:24 - audios and we can rewind we can stop we
14:27 - can play the new uh audio and
14:31 - we have
14:33 - even the draw module to draw shapes like
14:36 - circles polygons we can even draw a line
14:39 - and curves
14:40 - and so this is pretty much about the
14:44 - very basic uh and startup
14:49 - things and the startup modules that are
14:52 - available in pi game there are many more
14:54 - pie game modules and
14:57 - we would be seeing them later on but
15:00 - let's get our hands on to these
15:03 - some of these modules
15:05 - and work with them in the upcoming
15:07 - videos
15:09 - and see
15:10 - the examples of them

Cleaned transcript:

hey everyone in today's video we will be discussing some basic terms and methods in pi game module also we'll see some related examples so let's get started first up we have initialization of the module so we write import pi game and then we initialize it by writing pygame dot init we can also initialize a module in pi game separately like here i've written pygame.display.init we have separately called upon display we have separately initialized display module uh but if we do this you would not be able to work with other submodules you have to initialize them separately then so that would be a little bit tedious rather uh we do this by game dot init this initializes all the subclasses and sub modules of pygame okay now to quit or uninitialize any module we use dot quit method we have already used it in a game loop once we are done with working with pi game we do this pie game dot quit and this is how it is uninitialized and we can move out of pyking okay then i hope you remember in the first video i told you that any pi game code would be divided into three parts and that is initializing setting up the screen and the game loop then so the second part we have that is setting up the screen so the setting above screen is done using the display module okay so please listen clear carefully display module creates a new surface object which helps us visualize whatever we have created a text a drawing or an image it can be anything okay and display method helps us visualize what we have created on the screen we set using the set mode okay so the 600 comma 600 is the size of the screen okay last time also we saw this and it is not just confined to setting up the screen giving sizes it has methods like get in it get in it gives us a boolean response returns a boolean response which tells us if the display module is initialized or not it has quit of course it has in it to initialize and it has get surface method which gives reference to the current window window okay so if you don't get this right now it's all right because uh we have not seen any example related once we see that you'd be a little bit clear with it we have flip and update there's a difference between flip and update although they are a little bit safe similar what does flip do it updates the entire video a window okay but update updates only portions of the window okay uh which are specified and whereas flip doesn't do it so you can say that a date is an optimized version of flip so we usually use update so that less memory is used okay then we have fill method which fills up the screen with some color okay so we are done with the second step let's move on to the third part that would be um rect like i would discuss uh direct module direct class in pygame is used to manipulate rectangular surfaces and store those objects we can make copies of those objects move them across the screen and do a lot of things to manipulate them edit them okay we always you use rect if you want to work with something that requires another surface or layer while writing a text while working with an image for example here we are working with an image okay i have loaded the image okay uh don't worry this is another subclass image is another subclass in pi game and i have loaded it okay uh simple and then what i have done is i have made another variable which is been declared a direct class object okay ball dot catrice this is how i have declared it as a red class object and what it does it is it loads this image on a rectangular surface okay so that we can view it on the screen fine so this is one functionality of correct uh red class okay we can even copy uh this object ball object or ball rect and use it otherwise we can move it we can move it in place we can change the size by using plate we can update its positions we can change its where it is located on the screen we can clip it we can crop it we can resize it and uh much more rect involves much more functionalities but these are some basic ones so uh which we would require right now okay so yeah let's move on to the very important part of pi game code that is the gaming loop okay and the gaming loop involves events every action in pi game is named through a queue okay a queue is a list which follows uh first in and first out principle uh i don't know if you know about queue or not it's a data structure and it follows first and then first out principle and it's it's just a simple list where insertion and deletion on are done from different ends okay so just treat it like a list and all the events are stored into a queue okay so every time we call if pygame.event uh an action or an event from the queue is popped out and been carried out okay it has been handled the instructions have been carried out so that we do not face any loss of event as the queue might get filled over over time okay and following this an event can also be an input from the keyboard so to do it deal with keyboard inputs we have a different subclass that is key okay so whenever we call this pygame dot key down and key up whenever a key is pressed these are automatically called up and this then helps by game dot event to carry out the definite or whatever event is said to be carried out for example i have written down a little bit of code for you which is talking about how key down and key up works so here um i have just written pygame dot key down because key down and key up are simultaneous processes as you press a key first key down is called and then you release it then key up is called okay so you don't need to write it uh like separately pi game dot key down or key up i have just written key down okay and uh if the event of even dot key okay is k a this is the way of uh telling that the key pressed is a okay and this is the way of telling the key press to zero you can have it for all the keys on the keyboard okay so or else if not something else is pressed you output a key which press so let's run this and let's see how it works run this and yeah uh so now i'd press a so a was pressed it outputs a was pressed i hope you can see it okay then when i when i press 0 it shows 0 is pressed if i press e a key was pressed because i did not mention anything for e okay so yeah let's stop this and let's go back to our initial page uh this is how we work with keys and keys have a lot of other methods uh like get focus is there if we to check if we are receiving keyboard inputs properly from the system we have get pressed like to get the state of all the keyboard buttons then we have name each of these keys have an identifier so we get that identifier from this we get the key code we can get the key code from the name this takes an argument and from the name we can get the identifier okay and so and so we have in other methods also we'd see them once we use them in further examples okay uh so coming back to the game code um that was we had initialized the ball uh image and then we have we are working with uh getting it on the rect class okay that we have got it on a red class object and i have mentioned the speed which is one comma one it works as an argument of rect class uh method move okay so what i've done is i've given it i've given speed as an argument so it shows that the xaxis with respect to the xaxis the object would be moving one um one units and with yaxis it would be also moving one okay so so rectangle would always have on on a plane it would always have four points left right top and bottom i hope you can imagine it and when the left point is less than zero the speed is the zeroth coordinate like this one is changed to minus one because we need to oppose the motion now okay or even when uh this happens when it's to the extreme right like it is more than the size of the screen similarly for top and bottom we are changing the yaxis okay motion of the yaxis and we will fill the screen with some color that is white right now and we'll do blit which is loading the ball object ball variable the image on the ball rect okay uh and then we are displaying it but and updating the complete thing okay complete screen let's see how this works we this is the random motion if we make 0 comma 1 so it should only move along the y axis let's see if it does so yeah it is moving along the y axis okay it's not traveling anymore and what if we make this happen it should just move along the yaxis but with more speed yeah it does okay so that's pretty much it so next up we have some more definitions uh or more subclasses the first one is font we'll be discussing these in very brief because we'd be working with them further and we'll be discussing them more deeply in the next upcoming videos we have font when we'd be working with text uh printing getting a text on the screen with work with font we can like see what the default font is what all fonts are there we can create a new object from a file we can change the edit the text the style of the text we can style it we can make it bold we can make it italic we can underline it we can see what the size it we can see the essence and the scent of the text and we can do a lot more then when we'd be working with images we'd be using this image class and image module and we can load and unload an image we can change its format we can save the image we can crop it then we have time we can keep a track of for how long the program has been running we can change the frame rates then we have music uh module to work with audios and we can rewind we can stop we can play the new uh audio and we have even the draw module to draw shapes like circles polygons we can even draw a line and curves and so this is pretty much about the very basic uh and startup things and the startup modules that are available in pi game there are many more pie game modules and we would be seeing them later on but let's get our hands on to these some of these modules and work with them in the upcoming videos and see the examples of them
