With timestamps:

00:00 - so today we are going to work on
00:03 - uh like daytime in ruby so and i'm going
00:06 - to
00:06 - take you forward with some like little
00:09 - bit good concepts in
00:10 - day time because you might be working
00:12 - like get to work in back end
00:14 - on the rails part so you might like
00:17 - query on some date time part in your
00:19 - like um
00:20 - database and your like logic so it would
00:22 - help you how you can manipulate
00:24 - because when you keep the like a record
00:27 - of things so you usually manage with
00:29 - date and time
00:30 - so i'll tell you how you can achieve the
00:32 - same using like in ruby
00:34 - so let's start with our tutorial so the
00:37 - basic thing you need to first type
00:39 - you need to type require
00:42 - required is like is is it is like uh you
00:45 - will get to like
00:46 - learn new things from this so require is
00:48 - used to like
00:49 - get this is required so it is like an
00:51 - import statement required date
00:54 - so required date would help you to like
00:58 - manipulate the date the date date
01:01 - records
01:01 - in ruby so now you can create a variable
01:05 - my date
01:06 - okay so you can get create variable my
01:09 - date bar
01:11 - so basically this would stay store a
01:13 - date
01:14 - and you need to store date dot ours
01:17 - and now you can put like
01:21 - in a string you can put 10
01:24 - december uh 2021
01:28 - so this is a very futuristic date and
01:30 - now what you're going to
01:31 - do you can like carry out few operations
01:35 - on this
01:35 - such as put as my date back so
01:38 - then put s so okay first we will do this
01:42 - so let's run this and we can type
01:46 - clear oh sorry click clear statement
01:50 - and now this would clear our console now
01:52 - ruby
01:53 - date time dot rb so when you print this
01:56 - so you get an output
01:57 - 20 21 12 so basically so this is how it
02:00 - depends this gives the year format
02:03 - now this is the month and this is the
02:05 - day so
02:06 - 2021 2021-12-10
02:10 - so this is a good output on what you can
02:12 - do
02:13 - now you can do different things like
02:16 - s my date wire
02:19 - dot gear okay so
02:22 - basically now we can comment this so
02:25 - this would usually print out the
02:27 - year okay and in the same way
02:30 - you can approach for okay so i'll show
02:33 - you one by one so basically this would
02:34 - help you to have a clear
02:36 - approach so i do clear
02:40 - and ruby datetime.rb yes
02:43 - 2021 is like is this the like output of
02:46 - this
02:47 - so next you can do put as
02:50 - my date where dot month so basically
02:54 - this would either give you the month
02:57 - now this is 12 okay
03:01 - and now what you can do you can simply
03:04 - comment this out
03:05 - or you can do put as my date where
03:08 - dot month day so month day is given by m
03:12 - day okay and now you can
03:16 - run this so i'm going a little slow
03:19 - because this should help you here
03:20 - because this is the 10th day of the
03:22 - month
03:22 - okay now you can do protest my
03:25 - date where dot weekly so this would tell
03:29 - you that which
03:29 - day of the week yes so basically now you
03:32 - can
03:33 - following make the operations like
03:35 - weekdays five if
03:37 - it was six or seven then you can refer
03:39 - that this was the weekend okay
03:40 - so this is how it goes good so now you
03:44 - can do clear and now you can
03:47 - type so which day of the year it is
03:50 - it is put as my date where dot y day
03:53 - so this will basically give you the year
03:55 - day so
03:56 - which day of the year it is okay so
03:59 - let's
04:00 - run this and it is a 344 day of the year
04:03 - okay
04:04 - so good to do good to go now what you
04:06 - can do you can shift this
04:08 - date my date were plus equal to five
04:12 - which is equivalent to like uh basically
04:15 - this is equal to my
04:17 - eight bar is equal to my data plus five
04:20 - okay
04:21 - so you can use either of this i'll use
04:23 - this notation the second one
04:25 - to have clarity now what you can do
04:28 - you can do put s my date where
04:33 - my date where dot you can string format
04:37 - time
04:38 - so this is strf time
04:41 - okay so basically your form for
04:44 - formatting
04:44 - and now i'll type you to do
04:48 - percent a person d
04:52 - person b and percent y okay
04:56 - so so this is capital yeah
04:59 - so let's run this
05:04 - so now it basically you can see by the
05:07 - notations
05:08 - it says though day is wednesday
05:11 - the day numeric the week terms of week
05:14 - is wednesday in terms of month is 15
05:17 - december 21
05:19 - so this is like a very used notation
05:23 - to keep the track of the like date okay
05:26 - so let's comment this and okay one thing
05:29 - i told you that i
05:30 - initialized as 10th december and now it
05:33 - did this plus five
05:34 - which turned incremented it by five days
05:37 - for this really
05:38 - like you can implement a good logic so
05:40 - like just by putting five you can
05:42 - increase the whole date
05:43 - so and get all the other details so like
05:45 - this was 10th i think uh
05:47 - sorry this was 10th december now i
05:50 - incremented by five here
05:52 - and then when i put it out this at this
05:55 - line
05:56 - oh it works like magic okay now
05:59 - now you can comment this okay
06:02 - so now what you can do you can
06:05 - create another variable time okay for
06:08 - that you require required time
06:12 - okay and let's comment this
06:16 - so let's pick some space
06:19 - so that it gives a clear view so
06:22 - you can give my time where
06:26 - is equal to time dot new
06:30 - 2021 year 10th
06:34 - a 12th this is december
06:38 - 6 5
06:42 - and this is the notation basically which
06:44 - tells you plus
06:46 - make sure you put a 0 5 0 0 though don't
06:49 - put
06:50 - directly like this 5 0 0 so
06:53 - put 0 5 0 0 okay now
06:56 - in the same way what you can do you can
06:59 - do put s
07:01 - my time where
07:04 - okay and you can repeat this put as my
07:08 - time
07:08 - dot dot r this would give you the
07:12 - r now this would give you the minute and
07:14 - this would give you the second
07:16 - okay so let's run this
07:21 - yeah so here you can see so the r is
07:23 - sixth
07:24 - minutes is five then the second is ten
07:27 - okay
07:28 - uh you can like
07:31 - also do something put
07:34 - s time dot
07:37 - now so this would like
07:41 - bring you that current time okay good to
07:43 - go now
07:45 - we can clear the screen and we can also
07:48 - print
07:48 - this now let's uh move on with some
07:51 - additional topic so basically
07:54 - i'll give you like there's a very like a
07:57 - small quick topic
07:58 - you should really help you so
08:02 - directory
08:05 - uh and exceptions
08:08 - so basically okay i'll give you
08:11 - directory dot rb
08:13 - so basically this is a new topic so
08:15 - let's do this
08:16 - basically what you can do you can do put
08:19 - s
08:20 - run the directory command directory dot
08:22 - print
08:23 - pwd stand so print working directory now
08:26 - like
08:27 - the this your current working directory
08:29 - so this is print working directory
08:32 - now i'll give ruby directory.rb
08:35 - and this would print the current looking
08:37 - directory okay so this is the working
08:38 - directory i'm usually in
08:40 - and this can be confirmed now then you
08:43 - can do
08:44 - run a command directory
08:49 - dot make directory so basically these
08:52 - are all the like commands you do
08:54 - a folder here
08:58 - and then you can also check put as
09:02 - directory dot exists
09:08 - exists let's see this this exists folder
09:11 - here
09:12 - so when i run this file now
09:15 - you will see yes this directory exists
09:19 - and it does create a directory to my
09:20 - left okay
09:21 - now let's create another file
09:25 - exceptions.rb so this is another topic
09:29 - so now to create a try catch statement
09:32 - ruby
09:33 - basically you you can give a begin
09:35 - statement
09:36 - now in this begin statement you have
09:38 - three things
09:40 - rescue so one is
09:43 - rescue okay other
09:47 - is else other is ensure
09:51 - so begin is put s
09:53 - [Applause]
09:55 - begin so basically okay and then i'll do
09:59 - put s three by zero basically this is an
10:03 - error to catch this error i'll do
10:07 - put s error
10:12 - error catched
10:15 - okay so this would
10:18 - like this is like a like input
10:22 - the error is not cached if the error is
10:24 - not catch
10:25 - then you can do this yes looks
10:30 - good okay ensure this put s
10:33 - this should always run always run
10:37 - respect of
10:40 - above irrespective of so always run
10:44 - inspector let's run this
10:45 - ruby exception.rb
10:49 - so here you can see begin there is cash
10:52 - because 3 divided by 0 is a division
10:54 - division by 0 error so it's an error
10:57 - and it says here cash always run
11:00 - respective above
11:01 - let's change to one this is not an error
11:03 - now because this is valid three by
11:05 - divided by one so let's see it see again
11:08 - it does good p is done because yes it
11:11 - does put three out
11:12 - it is not an error looks good or always
11:14 - run irrespective about
11:16 - so this is how you deal with error
11:19 - handling in ruby
11:20 - so i'll continue with like classes and
11:23 - object oriented programming next
11:24 - tutorial so thank you for watching for
11:26 - this tutorial thank you everyone
11:27 - bye

Cleaned transcript:

so today we are going to work on uh like daytime in ruby so and i'm going to take you forward with some like little bit good concepts in day time because you might be working like get to work in back end on the rails part so you might like query on some date time part in your like um database and your like logic so it would help you how you can manipulate because when you keep the like a record of things so you usually manage with date and time so i'll tell you how you can achieve the same using like in ruby so let's start with our tutorial so the basic thing you need to first type you need to type require required is like is is it is like uh you will get to like learn new things from this so require is used to like get this is required so it is like an import statement required date so required date would help you to like manipulate the date the date date records in ruby so now you can create a variable my date okay so you can get create variable my date bar so basically this would stay store a date and you need to store date dot ours and now you can put like in a string you can put 10 december uh 2021 so this is a very futuristic date and now what you're going to do you can like carry out few operations on this such as put as my date back so then put s so okay first we will do this so let's run this and we can type clear oh sorry click clear statement and now this would clear our console now ruby date time dot rb so when you print this so you get an output 20 21 12 so basically so this is how it depends this gives the year format now this is the month and this is the day so 2021 20211210 so this is a good output on what you can do now you can do different things like s my date wire dot gear okay so basically now we can comment this so this would usually print out the year okay and in the same way you can approach for okay so i'll show you one by one so basically this would help you to have a clear approach so i do clear and ruby datetime.rb yes 2021 is like is this the like output of this so next you can do put as my date where dot month so basically this would either give you the month now this is 12 okay and now what you can do you can simply comment this out or you can do put as my date where dot month day so month day is given by m day okay and now you can run this so i'm going a little slow because this should help you here because this is the 10th day of the month okay now you can do protest my date where dot weekly so this would tell you that which day of the week yes so basically now you can following make the operations like weekdays five if it was six or seven then you can refer that this was the weekend okay so this is how it goes good so now you can do clear and now you can type so which day of the year it is it is put as my date where dot y day so this will basically give you the year day so which day of the year it is okay so let's run this and it is a 344 day of the year okay so good to do good to go now what you can do you can shift this date my date were plus equal to five which is equivalent to like uh basically this is equal to my eight bar is equal to my data plus five okay so you can use either of this i'll use this notation the second one to have clarity now what you can do you can do put s my date where my date where dot you can string format time so this is strf time okay so basically your form for formatting and now i'll type you to do percent a person d person b and percent y okay so so this is capital yeah so let's run this so now it basically you can see by the notations it says though day is wednesday the day numeric the week terms of week is wednesday in terms of month is 15 december 21 so this is like a very used notation to keep the track of the like date okay so let's comment this and okay one thing i told you that i initialized as 10th december and now it did this plus five which turned incremented it by five days for this really like you can implement a good logic so like just by putting five you can increase the whole date so and get all the other details so like this was 10th i think uh sorry this was 10th december now i incremented by five here and then when i put it out this at this line oh it works like magic okay now now you can comment this okay so now what you can do you can create another variable time okay for that you require required time okay and let's comment this so let's pick some space so that it gives a clear view so you can give my time where is equal to time dot new 2021 year 10th a 12th this is december 6 5 and this is the notation basically which tells you plus make sure you put a 0 5 0 0 though don't put directly like this 5 0 0 so put 0 5 0 0 okay now in the same way what you can do you can do put s my time where okay and you can repeat this put as my time dot dot r this would give you the r now this would give you the minute and this would give you the second okay so let's run this yeah so here you can see so the r is sixth minutes is five then the second is ten okay uh you can like also do something put s time dot now so this would like bring you that current time okay good to go now we can clear the screen and we can also print this now let's uh move on with some additional topic so basically i'll give you like there's a very like a small quick topic you should really help you so directory uh and exceptions so basically okay i'll give you directory dot rb so basically this is a new topic so let's do this basically what you can do you can do put s run the directory command directory dot print pwd stand so print working directory now like the this your current working directory so this is print working directory now i'll give ruby directory.rb and this would print the current looking directory okay so this is the working directory i'm usually in and this can be confirmed now then you can do run a command directory dot make directory so basically these are all the like commands you do a folder here and then you can also check put as directory dot exists exists let's see this this exists folder here so when i run this file now you will see yes this directory exists and it does create a directory to my left okay now let's create another file exceptions.rb so this is another topic so now to create a try catch statement ruby basically you you can give a begin statement now in this begin statement you have three things rescue so one is rescue okay other is else other is ensure so begin is put s begin so basically okay and then i'll do put s three by zero basically this is an error to catch this error i'll do put s error error catched okay so this would like this is like a like input the error is not cached if the error is not catch then you can do this yes looks good okay ensure this put s this should always run always run respect of above irrespective of so always run inspector let's run this ruby exception.rb so here you can see begin there is cash because 3 divided by 0 is a division division by 0 error so it's an error and it says here cash always run respective above let's change to one this is not an error now because this is valid three by divided by one so let's see it see again it does good p is done because yes it does put three out it is not an error looks good or always run irrespective about so this is how you deal with error handling in ruby so i'll continue with like classes and object oriented programming next tutorial so thank you for watching for this tutorial thank you everyone bye
