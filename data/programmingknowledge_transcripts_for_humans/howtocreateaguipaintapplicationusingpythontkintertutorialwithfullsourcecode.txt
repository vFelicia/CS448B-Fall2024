With timestamps:

00:01 - hey everyone in this video we would make
00:03 - a simple paint application using tincter
00:06 - we would use many new methods and a lot
00:09 - would be from the canvas class obviously
00:12 - as we are working with paint don't worry
00:14 - it would be very easy so to make this
00:16 - application we would use the color
00:18 - Chooser module and just to make things
00:21 - more organized I would make main class
00:24 - that would be later called onto the
00:26 - screen
00:27 - let's get started so from Tinker
00:31 - import Star
00:34 - and separately from thinker
00:38 - import
00:40 - color chooser
00:41 - and ttk
00:44 - ttk you'll get the use of it later
00:47 - now the window declare plus its title
00:51 - so we have
00:53 - win equals TK and for the title I'll
00:57 - write win dot title
01:00 - create up
01:05 - then I'll call on to the main Loop
01:08 - so when dot main Loop
01:11 - so I have the basic structure now the
01:15 - class main where I would be defining the
01:17 - functionalities of the paint app
01:20 - so let's get started I'll get the class
01:22 - I'll write class Main
01:28 - and
01:30 - first the init function def init
01:38 - for argument itself and master so this
01:42 - master is the window
01:44 - that when that would be passed on later
01:47 - the main class
01:50 - and then I'll write self dot master
01:57 - equals master
02:00 - for initializing the window
02:03 - now I need to initialize a lot of
02:05 - variables to start doodling on screen
02:07 - like the color of my pen it's with maybe
02:10 - the screen background the starting
02:12 - position of the pen Etc so let's
02:15 - initialize the variables one by one
02:18 - so first is self dot color
02:23 - underscore foreground equals
02:27 - black so the pen color becomes black
02:29 - initially you can change it later
02:33 - and then self
02:35 - dot color underscore background equals
02:39 - White
02:41 - cool then also the initial positions so
02:44 - I'll have self taught
02:46 - old underscore X
02:49 - equals
02:51 - none
02:53 - and similarly
02:55 - self thought
02:57 - old underscore y equals none
03:03 - also the pen width self taught pen
03:07 - width
03:09 - equals five
03:12 - I will call this draw with its function
03:15 - that is yet to be defined which would
03:17 - describe the layout and Main functioning
03:19 - of my paint app
03:21 - so I'll just write self dot raw widget
03:25 - and brackets
03:27 - you'll just understand why I call this
03:29 - here later on when I Define the draw
03:31 - Wizards
03:33 - function
03:35 - now I'll write
03:37 - self.c dot find
03:40 - now here I have started using event
03:42 - handlers the bind function called for
03:45 - the canvas c c would be declared in the
03:48 - draw with its function now the argument
03:51 - for this given tangler bind
03:54 - put p p 1 motion which is the mouse
03:57 - being moved while the left Mouse button
03:59 - is held down and the function called the
04:02 - other argument of the bind function
04:04 - would be self dot paint
04:07 - this would be another function in the
04:09 - main class and
04:11 - it would be used to draw the lines on
04:14 - the canvas
04:15 - so I'll write self dot C dot bind
04:20 - P1 motion
04:25 - self-taught paint
04:29 - okay
04:31 - now similarly I'll have another event
04:35 - for the button release to specify the
04:38 - button release of Left Mouse button I'll
04:41 - use button release 1 event and for the
04:45 - function of this event I will call the
04:47 - self reset it is another function in the
04:50 - main class I have to declare it
04:52 - it will indicate the end of one curved
04:55 - drawn okay so I'll write down cell
04:59 - dot C
05:01 - Dot
05:02 - bind and
05:05 - button release
05:12 - one
05:13 - self dot preset
05:21 - now I'll Define the paint function so
05:23 - I'll write that paint
05:27 - self comma e so e would be the
05:31 - coordinates of the current Mouse
05:33 - position
05:34 - I would fetch that repeatedly in order
05:37 - to draw a curve and if self dot old
05:43 - underscore X
05:44 - and self-taught
05:47 - fold underscore Y is true
05:50 - it's if it's available then I'll create
05:53 - line I'll use the canvas
05:55 - function create line and I'll write self
05:58 - Dot
05:59 - C dot create line
06:04 - and as argument I'll given the Four
06:07 - Points four coordinates so self dot old
06:11 - X
06:13 - and cell dot old y and e dot X and E dot
06:18 - y the current events the current Mouse
06:21 - positions X and Y coordinates
06:24 - the width of my curve would be given by
06:27 - self dot pen width as I have defined it
06:30 - in the initial
06:31 - function
06:33 - and
06:35 - fill equals self dot color foreground
06:39 - and cap style would be round it's just
06:41 - the style of the curve the line and I
06:45 - can do smooth equals true
06:48 - so we have already used create line in
06:51 - the previous videos
06:53 - and so I hope you don't need any
06:55 - explanation for the arguments given
06:57 - and I'll replace the value of old X
07:01 - with e dot X and cell dot old underscore
07:05 - y equals e dot y
07:08 - this would let me draw a continuous line
07:11 - and then I'll have the reset function
07:14 - again itself and E the current position
07:19 - of the cursor
07:21 - and I'll have self-taught old underscore
07:24 - x equals none
07:29 - and self-taught old underscore y equals
07:32 - none
07:33 - because basically I have
07:36 - ended one curve
07:38 - so that's what reset means
07:43 - now I'll start defining some options
07:45 - available some functionalities available
07:47 - with the paint app
07:49 - now the first one in the functions would
07:52 - be def changed width
07:55 - and
07:56 - I'll give self comma width so this would
08:00 - be used to change the width of the pen
08:03 - fit off the line and I'll have self dot
08:07 - pinwidth equals width
08:09 - okay
08:11 - and I have
08:13 - clear canvas so I'll write def clear
08:17 - canvas
08:19 - self
08:20 - and I'll use the delete function from
08:23 - canvas self.c dot delete
08:27 - and argument would be all
08:30 - that would just actually clear the
08:32 - canvas completely
08:34 - I'll also have the functionalities of
08:36 - changing the foreground and the
08:38 - background of the screen
08:39 - so first for the foreground changing
08:42 - I'll write def
08:45 - change underscore ft
08:48 - and self
08:51 - so self dot color underscore FC equals
08:56 - color chooser
09:01 - dot ask color
09:03 - color equals self dot color underscore
09:07 - FC
09:08 - and
09:10 - one
09:12 - so color Chooser dot ask color returns a
09:16 - tuple that contains two values that
09:18 - represents the selected color the one at
09:21 - the zeroth index is the RGB value and
09:24 - the second element of this Tuple is the
09:26 - hexadecimal color value
09:28 - and since our color uses hexadecimal
09:31 - values
09:32 - I have given the first element of this
09:35 - double as the argument okay and
09:39 - similarly I can Define for background
09:42 - color
09:43 - I'll write Def
09:47 - change
09:48 - underscore PG and self
09:53 - and self dot color
09:56 - underscore PT equals color chooser
10:01 - dot ask color
10:04 - and color
10:06 - equals self
10:07 - color underscore PG
10:11 - and in square brackets one
10:14 - fine
10:15 - also I need to write self dot C
10:20 - PC and inverted commas
10:24 - equals self dot color
10:27 - riscore BG cool
10:30 - now it's the turn of draw widgets
10:33 - function so this would be like the real
10:36 - layout of the frame of the entire canvas
10:39 - of the entire screen
10:41 - so I'll write Def
10:45 - draw widgets
10:49 - self
10:51 - and now the screen should have the
10:54 - controls in one part and the canvas on
10:57 - the other so we need to divide the space
10:59 - available
11:01 - for that we use frames
11:03 - so I'll write self dot controls
11:07 - equals frame
11:10 - self taught master
11:13 - I hope you remember the master variable
11:15 - it was the screen itself
11:18 - the window and
11:20 - I'll give some padding I'll Write Pad X
11:24 - equals 5. part y
11:28 - equals 5.
11:31 - now on the left side I would need the
11:33 - controls like the pen color the
11:35 - background color let me put these in a
11:37 - menu also the clear canvas and exit
11:40 - option should be available there then to
11:42 - adjust the size of the pen that is the
11:44 - width
11:45 - I would use a slider let's get all this
11:48 - on the screen first so starting with the
11:51 - label of the pen width controller
11:54 - I'll write text PW
11:57 - equals label
12:01 - self dot controls
12:05 - text equals pen width
12:08 - font equals Georgia 16.
12:12 - now I got this on the frame and not the
12:15 - window itself please note that
12:18 - and I'll
12:20 - put it in a grid I'll write text PW dot
12:23 - grid
12:26 - row equals 0 column equals 0.
12:30 - then I'll have the slider
12:32 - I'll write self thought slider equals
12:35 - ttk dot scale
12:38 - this is where ttk is used I'll have
12:41 - different kind of slider
12:43 - it would not show me the numbers on the
12:46 - scale and
12:48 - so for the argument I'll write self
12:50 - thought controls
12:53 - comma from equals five
12:57 - two hundred
13:00 - to equals hundred command is self dot
13:04 - change w
13:05 - so just to recall what changed W did
13:09 - it change the width of the pen
13:13 - it assigned a new value to the pen width
13:16 - and the orientation of the scale of the
13:19 - slider would be vertical
13:22 - fine now we'll set the pen value
13:25 - bandwidth
13:27 - so I'll write self.slider dot set in
13:31 - Brackets
13:33 - self dot pen width
13:36 - okay
13:37 - now self dot slider dot quit
13:40 - row equals zero
13:43 - column equals one
13:46 - now I'll park my frame I'll write
13:49 - self.controls.pack
13:51 - and side equals left
13:55 - fine now here I'll declare my canvas so
13:59 - self.c equals canvas
14:02 - self dot Master where do I want my
14:05 - canvas on the screen on master
14:08 - so self dot Master width equals 500 and
14:11 - height equals 400.
14:14 - background color equals self dot color
14:16 - underscore PG it was there in the init
14:19 - function
14:20 - so that is where from we pick the
14:22 - background color
14:25 - then I'll pack this canvas I'll write
14:27 - cell.c
14:29 - dot pack
14:31 - fill equals both
14:34 - expand equals true
14:37 - we've already worked with canvas and
14:39 - frames and labels a lot of times so I
14:42 - hope you're getting what is going on
14:45 - it's just the assembling of all that we
14:48 - observed it's nothing difficult
14:52 - and now I need to get the menu
14:55 - so I'll simply have this menu variable
14:58 - equals menu
15:01 - cell dot master
15:03 - and
15:05 - self.master.config menu equals menu
15:09 - and
15:10 - I'll have my option menu to which I'll
15:13 - be adding all the options available
15:16 - so
15:18 - option menu equals menu
15:21 - in Brackets menu
15:23 - it's in the menu of the main menu okay I
15:27 - hope it is not confusing now to menu
15:29 - I'll be adding the option menu
15:32 - variable
15:34 - so how would I do that I'll write menu
15:36 - dot at Cascade
15:38 - label equals menu
15:40 - equals option menu
15:43 - now let's add the options to the option
15:46 - menu so I'll write option menu Dot
15:49 - add underscore command
15:53 - label equals brush color
15:58 - command equals self.change underscore
16:02 - foreground
16:06 - similarly
16:08 - or the other functions
16:10 - I'll write option menu Dot
16:14 - add command
16:18 - label equals background color
16:23 - command
16:25 - equals self Dot
16:27 - change background
16:33 - then option menu
16:36 - dot add command
16:44 - label equals
16:47 - Square canvas
16:54 - command
16:57 - equals self.clear
17:03 - again
17:04 - option menu
17:08 - dot add command
17:12 - label equals exit
17:18 - command equals self
17:21 - dot master dot destroy
17:25 - so we have four options one for changing
17:28 - the pen color the foreground one
17:31 - for the background changing color
17:35 - one for clearing the canvas
17:37 - and one for exiting the canvas okay
17:41 - so we are good to go okay but we need to
17:45 - call in this main class
17:47 - so I'll write Main
17:50 - and in Brackets when
17:53 - fine
17:54 - now we're good to go
17:56 - and let's run this
18:02 - so I have my window and I can see this
18:05 - menu and Pen width so so I'll
18:09 - start right away doodling on the screen
18:12 - and I can see the line I've drawn
18:17 - and I can change the brush color
18:20 - I can pick any color let me pick this
18:25 - and I have different color pen now
18:27 - let me change the width once
18:31 - so it has a better width now
18:35 - brush is thicker and I can change the
18:37 - background color too
18:40 - so here it is the background color is
18:43 - different again I can clear the canvas
18:45 - everything is gone
18:47 - and if I click on the exit option
18:50 - the screen goes away so the paint
18:53 - application is working pretty much fine
18:56 - this was it for the program thank you

Cleaned transcript:

hey everyone in this video we would make a simple paint application using tincter we would use many new methods and a lot would be from the canvas class obviously as we are working with paint don't worry it would be very easy so to make this application we would use the color Chooser module and just to make things more organized I would make main class that would be later called onto the screen let's get started so from Tinker import Star and separately from thinker import color chooser and ttk ttk you'll get the use of it later now the window declare plus its title so we have win equals TK and for the title I'll write win dot title create up then I'll call on to the main Loop so when dot main Loop so I have the basic structure now the class main where I would be defining the functionalities of the paint app so let's get started I'll get the class I'll write class Main and first the init function def init for argument itself and master so this master is the window that when that would be passed on later the main class and then I'll write self dot master equals master for initializing the window now I need to initialize a lot of variables to start doodling on screen like the color of my pen it's with maybe the screen background the starting position of the pen Etc so let's initialize the variables one by one so first is self dot color underscore foreground equals black so the pen color becomes black initially you can change it later and then self dot color underscore background equals White cool then also the initial positions so I'll have self taught old underscore X equals none and similarly self thought old underscore y equals none also the pen width self taught pen width equals five I will call this draw with its function that is yet to be defined which would describe the layout and Main functioning of my paint app so I'll just write self dot raw widget and brackets you'll just understand why I call this here later on when I Define the draw Wizards function now I'll write self.c dot find now here I have started using event handlers the bind function called for the canvas c c would be declared in the draw with its function now the argument for this given tangler bind put p p 1 motion which is the mouse being moved while the left Mouse button is held down and the function called the other argument of the bind function would be self dot paint this would be another function in the main class and it would be used to draw the lines on the canvas so I'll write self dot C dot bind P1 motion selftaught paint okay now similarly I'll have another event for the button release to specify the button release of Left Mouse button I'll use button release 1 event and for the function of this event I will call the self reset it is another function in the main class I have to declare it it will indicate the end of one curved drawn okay so I'll write down cell dot C Dot bind and button release one self dot preset now I'll Define the paint function so I'll write that paint self comma e so e would be the coordinates of the current Mouse position I would fetch that repeatedly in order to draw a curve and if self dot old underscore X and selftaught fold underscore Y is true it's if it's available then I'll create line I'll use the canvas function create line and I'll write self Dot C dot create line and as argument I'll given the Four Points four coordinates so self dot old X and cell dot old y and e dot X and E dot y the current events the current Mouse positions X and Y coordinates the width of my curve would be given by self dot pen width as I have defined it in the initial function and fill equals self dot color foreground and cap style would be round it's just the style of the curve the line and I can do smooth equals true so we have already used create line in the previous videos and so I hope you don't need any explanation for the arguments given and I'll replace the value of old X with e dot X and cell dot old underscore y equals e dot y this would let me draw a continuous line and then I'll have the reset function again itself and E the current position of the cursor and I'll have selftaught old underscore x equals none and selftaught old underscore y equals none because basically I have ended one curve so that's what reset means now I'll start defining some options available some functionalities available with the paint app now the first one in the functions would be def changed width and I'll give self comma width so this would be used to change the width of the pen fit off the line and I'll have self dot pinwidth equals width okay and I have clear canvas so I'll write def clear canvas self and I'll use the delete function from canvas self.c dot delete and argument would be all that would just actually clear the canvas completely I'll also have the functionalities of changing the foreground and the background of the screen so first for the foreground changing I'll write def change underscore ft and self so self dot color underscore FC equals color chooser dot ask color color equals self dot color underscore FC and one so color Chooser dot ask color returns a tuple that contains two values that represents the selected color the one at the zeroth index is the RGB value and the second element of this Tuple is the hexadecimal color value and since our color uses hexadecimal values I have given the first element of this double as the argument okay and similarly I can Define for background color I'll write Def change underscore PG and self and self dot color underscore PT equals color chooser dot ask color and color equals self color underscore PG and in square brackets one fine also I need to write self dot C PC and inverted commas equals self dot color riscore BG cool now it's the turn of draw widgets function so this would be like the real layout of the frame of the entire canvas of the entire screen so I'll write Def draw widgets self and now the screen should have the controls in one part and the canvas on the other so we need to divide the space available for that we use frames so I'll write self dot controls equals frame self taught master I hope you remember the master variable it was the screen itself the window and I'll give some padding I'll Write Pad X equals 5. part y equals 5. now on the left side I would need the controls like the pen color the background color let me put these in a menu also the clear canvas and exit option should be available there then to adjust the size of the pen that is the width I would use a slider let's get all this on the screen first so starting with the label of the pen width controller I'll write text PW equals label self dot controls text equals pen width font equals Georgia 16. now I got this on the frame and not the window itself please note that and I'll put it in a grid I'll write text PW dot grid row equals 0 column equals 0. then I'll have the slider I'll write self thought slider equals ttk dot scale this is where ttk is used I'll have different kind of slider it would not show me the numbers on the scale and so for the argument I'll write self thought controls comma from equals five two hundred to equals hundred command is self dot change w so just to recall what changed W did it change the width of the pen it assigned a new value to the pen width and the orientation of the scale of the slider would be vertical fine now we'll set the pen value bandwidth so I'll write self.slider dot set in Brackets self dot pen width okay now self dot slider dot quit row equals zero column equals one now I'll park my frame I'll write self.controls.pack and side equals left fine now here I'll declare my canvas so self.c equals canvas self dot Master where do I want my canvas on the screen on master so self dot Master width equals 500 and height equals 400. background color equals self dot color underscore PG it was there in the init function so that is where from we pick the background color then I'll pack this canvas I'll write cell.c dot pack fill equals both expand equals true we've already worked with canvas and frames and labels a lot of times so I hope you're getting what is going on it's just the assembling of all that we observed it's nothing difficult and now I need to get the menu so I'll simply have this menu variable equals menu cell dot master and self.master.config menu equals menu and I'll have my option menu to which I'll be adding all the options available so option menu equals menu in Brackets menu it's in the menu of the main menu okay I hope it is not confusing now to menu I'll be adding the option menu variable so how would I do that I'll write menu dot at Cascade label equals menu equals option menu now let's add the options to the option menu so I'll write option menu Dot add underscore command label equals brush color command equals self.change underscore foreground similarly or the other functions I'll write option menu Dot add command label equals background color command equals self Dot change background then option menu dot add command label equals Square canvas command equals self.clear again option menu dot add command label equals exit command equals self dot master dot destroy so we have four options one for changing the pen color the foreground one for the background changing color one for clearing the canvas and one for exiting the canvas okay so we are good to go okay but we need to call in this main class so I'll write Main and in Brackets when fine now we're good to go and let's run this so I have my window and I can see this menu and Pen width so so I'll start right away doodling on the screen and I can see the line I've drawn and I can change the brush color I can pick any color let me pick this and I have different color pen now let me change the width once so it has a better width now brush is thicker and I can change the background color too so here it is the background color is different again I can clear the canvas everything is gone and if I click on the exit option the screen goes away so the paint application is working pretty much fine this was it for the program thank you
