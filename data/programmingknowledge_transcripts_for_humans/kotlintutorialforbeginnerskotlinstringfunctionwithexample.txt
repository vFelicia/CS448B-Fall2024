With timestamps:

00:00 - uh in the previous video we have covered
00:02 - about
00:03 - string and string function in this video
00:05 - we are going to
00:07 - learn about more string functions such
00:09 - as the length function we discussed
00:11 - about in the previous video okay so
00:14 - the string functions are the function
00:16 - which will be implemented on string as
00:18 - the name suggest
00:20 - so the first function is the length
00:22 - function i have discussed it in the last
00:24 - video but still i will discuss it in
00:26 - this video also so i'll go ahead and
00:30 - create a function main
00:33 - in which i'll define a
00:35 - string
00:38 - of value a is equals to
00:42 - hello
00:46 - okay
00:48 - i'll not leave space
00:50 - and
00:52 - value b is equals to
00:55 - this
00:57 - is a
00:59 - coder
01:01 - and i'll define another
01:05 - value c
01:08 - and another string with
01:10 - a value and my
01:14 - age is
01:16 - and i'll define another value
01:19 - d and
01:21 - it is an integer which is with the value
01:23 - of 90
01:24 - okay
01:25 - so i have
01:26 - three strings and a
01:29 - uh integer
01:30 - so uh firstly i am going to discuss the
01:33 - length function okay
01:35 - so uh
01:37 - what about what if i have to get the
01:40 - length of
01:41 - the
01:43 - the value of the
01:45 - string b or the string a
01:47 - okay
01:48 - so i'll just go ahead and write the
01:50 - print statement
01:52 - okay so the
01:54 - value
01:56 - the
01:58 - length of
02:03 - a is
02:05 - and i have discussed about the
02:07 - string
02:08 - template in the previous video so i i am
02:11 - going to use that here okay and the
02:13 - length of a is a dot length
02:18 - okay
02:19 - so
02:20 - the length function is used here as a
02:22 - dot length so whatever i have to
02:25 - see the length of b whatever i have to
02:28 - see the length of c
02:29 - so just i am going to
02:35 - copy this
02:36 - and paste and instead of b
02:39 - i'll do c so uh when i run this program
02:43 - i should find the length of a b and c
02:48 - as the output
02:51 - okay
02:52 - so this is the use of the length
02:54 - function
02:55 - so as in the output we can see the
02:57 - length of a is 5 the length of a is 15
02:59 - okay so i here did not change
03:02 - the values okay so length of a is 5 the
03:06 - length of b is 15
03:09 - and the length of c is 13
03:11 - we can verify from here also but
03:15 - uh yeah
03:16 - i guess you are you have now a clarity
03:19 - about the length function the second
03:21 - function we are going to talk about is
03:23 - the get index function so get index
03:25 - function returns the character at the
03:27 - specific index within the bracket
03:30 - now uh i've already told about you the
03:32 - index
03:34 - so in this hello string i'll just
03:36 - mention
03:37 - h e
03:38 - l l o so uh the h here has an index 0
03:44 - the e has index one the l has a index
03:46 - two and another hell has a has an index
03:49 - three and the o has an index four
03:52 - okay so what the get index function does
03:56 - it returns the character at a specific
03:59 - at a specific index specified within the
04:02 - bracket
04:03 - so uh i'll just
04:05 - mention a print function and i have to
04:08 - get what is the
04:11 - character at
04:12 - index 4 of
04:14 - b
04:16 - string
04:18 - so
04:18 - the
04:19 - character
04:22 - the character at
04:24 - index
04:26 - 4
04:26 - of b is what i'll do is i'll just go b
04:31 - uh
04:31 - okay so i'll first use string template
04:34 - and the
04:37 - the function is get in bracket index so
04:40 - i'll use the string template and i'll
04:43 - just mention the string that is b
04:45 - and
04:46 - the function that is get index
04:49 - okay and then the index so i have to
04:52 - find the index at 4
04:54 - okay so when i run this program
04:58 - what is the expected output so at 4
05:02 - it has a space
05:04 - okay so it gives a space
05:06 - so i'll just go ahead and change it to 5
05:11 - and when i run this program
05:14 - we can see that
05:16 - the output is the character at index 4
05:19 - of b is
05:20 - index 5 of b is
05:23 - i
05:24 - so
05:25 - yeah it
05:26 - is pretty clear from here that
05:29 - the index at index 4
05:31 - of string b
05:33 - is i so
05:36 - here it is underlined by a
05:38 - yellow line so what i'll do is i'll go
05:41 - here and hit alt plus enter
05:43 - and it suggests that replace get
05:46 - call with indexing operator so what is
05:48 - an indexing operator
05:50 - so i'll just show you that
05:52 - okay so instead of doing this
05:55 - what i can do is i can just
05:58 - uh mention b and that and then in the
06:01 - bracket i'll square bracket i'll mention
06:04 - five
06:05 - okay so when i run this program i will
06:07 - get the same output
06:09 - so instead of using get function or a
06:12 - bigger code i'll just do is what is what
06:16 - b square bracket and the index okay it
06:19 - gives us the same result so i guess
06:23 - the get index function is also pretty
06:24 - clear
06:26 - now what about the subsequence so as the
06:28 - name suggests it provides a sequence
06:31 - which is a part of the
06:32 - mainstream okay so the
06:36 - the function
06:37 - goes like sub sequence start index and n
06:40 - index so between start index and end
06:42 - index it prints all the uh the string
06:45 - okay so it returns the sub string
06:47 - between the start index and the end
06:49 - index but excluding the index in n index
06:52 - it is a main point one of the main point
06:54 - okay so it excludes the end index so uh
06:57 - what if i uh
06:59 - i go
07:00 - and say uh put the
07:03 - print the substring from 1 to 3
07:06 - of a so i have to mention 1 to 4
07:11 - okay because it excludes the end index
07:14 - so i'll just go ahead and print for the
07:18 - better understanding
07:20 - so println
07:22 - the sub string
07:25 - is
07:27 - i'll
07:28 - go with the string template and
07:32 - for a i have to mention
07:35 - and the function is sub sequence
07:37 - and the start index is
07:41 - 1
07:42 - and the end index is 4
07:45 - okay
07:45 - so what happens when i run this program
07:48 - what will be the output
07:52 - so when i run this program it gives e ll
07:56 - but at the fourth index there is oh
08:00 - so why is all the is why o is not
08:02 - printed because it excludes the
08:06 - excludes the character at the index last
08:08 - index mentioned here okay so keeping
08:11 - that in mind uh
08:13 - just
08:14 - predict the result
08:16 - uh
08:17 - after pausing the video of the substring
08:21 - uh
08:22 - of b
08:24 - 2 to 7
08:26 - okay
08:27 - so what will be the substring of b
08:30 - dot subsequence
08:33 - 2 comma 7 just pause the video and
08:36 - think about it and write it on a paper
08:39 - or something okay and then now you can
08:41 - play the video and check so it is is
08:44 - space is
08:46 - now we will go ahead and check so uh
08:51 - this so the second is here second uh
08:54 - index is here okay third index is here
08:57 - and fourth fifth sixth seventh so
08:59 - seventh is a space
09:01 - so uh it is not clearly visible here but
09:03 - the space is not printed here okay it
09:06 - stopped at the
09:07 - s
09:08 - okay i'll just go ahead and make that
09:10 - nine
09:11 - so it would be more clear
09:14 - okay so not nine i'll make
09:17 - that 11.
09:22 - so uh
09:23 - we can see that at the 11th index the
09:27 - letter the character o is there but in
09:29 - the output we cannot see oh because the
09:33 - last index is not printed there so i
09:35 - hope the subsequence
09:37 - function is also clear to you
09:40 - okay so we have now till now covered the
09:42 - three
09:43 - functions which are mostly usable now uh
09:46 - we will we will be moving to some less
09:48 - usable function okay so there is a
09:49 - comparative function so the comparative
09:52 - function compares
09:53 - the object
09:55 - with the specified object of order
09:59 - okay
10:00 - so it just compare two strings it
10:02 - returns zero if the object is equal it
10:05 - returns a negative number if it is less
10:07 - than the other okay so uh like what will
10:10 - be the um
10:12 - uh
10:12 - i have to compare
10:14 - the okay what will be what will it be
10:16 - comparing it will be comparing the
10:18 - length of the two strings
10:20 - so uh
10:21 - what i'll do is i'll just print ln and
10:25 - print
10:26 - a dot compared to b
10:28 - okay so i am comparing here a to b
10:33 - so
10:34 - uh
10:35 - like it is the specified other object is
10:38 - b here the specified other object is b
10:40 - and the object our main object is
10:43 - uh
10:44 - a
10:45 - okay so
10:46 - if it is less than the other it gives a
10:48 - negative number and if it is greater
10:51 - than the other it gives a positive
10:52 - number so you can guess the output here
10:55 - and
10:55 - while i run the program
10:58 - so
10:59 - when a is compared to b it provides a
11:01 - negative number that means that a is
11:04 - lesser than yeah smaller than b okay it
11:06 - is pretty clear from here that b is a
11:09 - larger string
11:12 - so i'll just go ahead and compare uh
11:15 - also compare
11:18 - b from
11:21 - c
11:23 - okay
11:24 - so you can guess the
11:26 - output here
11:28 - has
11:30 - b is a larger string so it gives a
11:32 - positive
11:34 - okay and
11:36 - what i'll do is i'll just create for
11:40 - the sake of just come comparing the
11:42 - function
11:43 - uh
11:44 - a variable a value
11:46 - f and
11:48 - just change some characters in it
11:54 - and okay and now i'll
11:59 - do is what i'll do is i'll just compare
12:04 - c
12:05 - compared to
12:07 - f
12:08 - and now i'll run the program
12:10 - and the expected output is 0 because the
12:13 - two strings are of equal length
12:19 - okay
12:23 - but it gives a a positive number why so
12:27 - because it it just not
12:30 - compares the length okay it compares the
12:34 - object specified within the string
12:39 - so
12:39 - the object the object f is
12:42 - [Music]
12:44 - greater than the object c
12:47 - okay
12:48 - so
12:49 - if i have the same string here then it
12:53 - will be zero but if i have the purpose
12:56 - of me stating that was just that uh if i
12:59 - have the same string then only it will
13:01 - be zero if i don't have the same string
13:03 - then the output could be
13:06 - positive or negative we cannot define
13:07 - that as per as of now okay so thank you
13:10 - for watching this video in the next
13:12 - video we will be covering more string
13:14 - temp string functions okay

Cleaned transcript:

uh in the previous video we have covered about string and string function in this video we are going to learn about more string functions such as the length function we discussed about in the previous video okay so the string functions are the function which will be implemented on string as the name suggest so the first function is the length function i have discussed it in the last video but still i will discuss it in this video also so i'll go ahead and create a function main in which i'll define a string of value a is equals to hello okay i'll not leave space and value b is equals to this is a coder and i'll define another value c and another string with a value and my age is and i'll define another value d and it is an integer which is with the value of 90 okay so i have three strings and a uh integer so uh firstly i am going to discuss the length function okay so uh what about what if i have to get the length of the the value of the string b or the string a okay so i'll just go ahead and write the print statement okay so the value the length of a is and i have discussed about the string template in the previous video so i i am going to use that here okay and the length of a is a dot length okay so the length function is used here as a dot length so whatever i have to see the length of b whatever i have to see the length of c so just i am going to copy this and paste and instead of b i'll do c so uh when i run this program i should find the length of a b and c as the output okay so this is the use of the length function so as in the output we can see the length of a is 5 the length of a is 15 okay so i here did not change the values okay so length of a is 5 the length of b is 15 and the length of c is 13 we can verify from here also but uh yeah i guess you are you have now a clarity about the length function the second function we are going to talk about is the get index function so get index function returns the character at the specific index within the bracket now uh i've already told about you the index so in this hello string i'll just mention h e l l o so uh the h here has an index 0 the e has index one the l has a index two and another hell has a has an index three and the o has an index four okay so what the get index function does it returns the character at a specific at a specific index specified within the bracket so uh i'll just mention a print function and i have to get what is the character at index 4 of b string so the character the character at index 4 of b is what i'll do is i'll just go b uh okay so i'll first use string template and the the function is get in bracket index so i'll use the string template and i'll just mention the string that is b and the function that is get index okay and then the index so i have to find the index at 4 okay so when i run this program what is the expected output so at 4 it has a space okay so it gives a space so i'll just go ahead and change it to 5 and when i run this program we can see that the output is the character at index 4 of b is index 5 of b is i so yeah it is pretty clear from here that the index at index 4 of string b is i so here it is underlined by a yellow line so what i'll do is i'll go here and hit alt plus enter and it suggests that replace get call with indexing operator so what is an indexing operator so i'll just show you that okay so instead of doing this what i can do is i can just uh mention b and that and then in the bracket i'll square bracket i'll mention five okay so when i run this program i will get the same output so instead of using get function or a bigger code i'll just do is what is what b square bracket and the index okay it gives us the same result so i guess the get index function is also pretty clear now what about the subsequence so as the name suggests it provides a sequence which is a part of the mainstream okay so the the function goes like sub sequence start index and n index so between start index and end index it prints all the uh the string okay so it returns the sub string between the start index and the end index but excluding the index in n index it is a main point one of the main point okay so it excludes the end index so uh what if i uh i go and say uh put the print the substring from 1 to 3 of a so i have to mention 1 to 4 okay because it excludes the end index so i'll just go ahead and print for the better understanding so println the sub string is i'll go with the string template and for a i have to mention and the function is sub sequence and the start index is 1 and the end index is 4 okay so what happens when i run this program what will be the output so when i run this program it gives e ll but at the fourth index there is oh so why is all the is why o is not printed because it excludes the excludes the character at the index last index mentioned here okay so keeping that in mind uh just predict the result uh after pausing the video of the substring uh of b 2 to 7 okay so what will be the substring of b dot subsequence 2 comma 7 just pause the video and think about it and write it on a paper or something okay and then now you can play the video and check so it is is space is now we will go ahead and check so uh this so the second is here second uh index is here okay third index is here and fourth fifth sixth seventh so seventh is a space so uh it is not clearly visible here but the space is not printed here okay it stopped at the s okay i'll just go ahead and make that nine so it would be more clear okay so not nine i'll make that 11. so uh we can see that at the 11th index the letter the character o is there but in the output we cannot see oh because the last index is not printed there so i hope the subsequence function is also clear to you okay so we have now till now covered the three functions which are mostly usable now uh we will we will be moving to some less usable function okay so there is a comparative function so the comparative function compares the object with the specified object of order okay so it just compare two strings it returns zero if the object is equal it returns a negative number if it is less than the other okay so uh like what will be the um uh i have to compare the okay what will be what will it be comparing it will be comparing the length of the two strings so uh what i'll do is i'll just print ln and print a dot compared to b okay so i am comparing here a to b so uh like it is the specified other object is b here the specified other object is b and the object our main object is uh a okay so if it is less than the other it gives a negative number and if it is greater than the other it gives a positive number so you can guess the output here and while i run the program so when a is compared to b it provides a negative number that means that a is lesser than yeah smaller than b okay it is pretty clear from here that b is a larger string so i'll just go ahead and compare uh also compare b from c okay so you can guess the output here has b is a larger string so it gives a positive okay and what i'll do is i'll just create for the sake of just come comparing the function uh a variable a value f and just change some characters in it and okay and now i'll do is what i'll do is i'll just compare c compared to f and now i'll run the program and the expected output is 0 because the two strings are of equal length okay but it gives a a positive number why so because it it just not compares the length okay it compares the object specified within the string so the object the object f is greater than the object c okay so if i have the same string here then it will be zero but if i have the purpose of me stating that was just that uh if i have the same string then only it will be zero if i don't have the same string then the output could be positive or negative we cannot define that as per as of now okay so thank you for watching this video in the next video we will be covering more string temp string functions okay
