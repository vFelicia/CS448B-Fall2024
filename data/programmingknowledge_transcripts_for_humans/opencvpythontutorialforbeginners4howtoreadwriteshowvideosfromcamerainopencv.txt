With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CBT tool for beginners using peyten
00:05 - in this video we will see how to read
00:08 - display and save videos using cameras so
00:12 - often we have to capture livestream from
00:16 - camera so first of all we will see how
00:18 - we can capture the live stream from the
00:20 - camera the same method you can use to
00:23 - display the video from a video file so
00:27 - let's get started and let's see how we
00:29 - can capture the live stream from your
00:31 - default camera so I'm going to just
00:34 - create a variable called cap and then
00:37 - inside your CV to package there is a
00:39 - class called video capture we are going
00:43 - to take this class and create an object
00:45 - of it and as an argument here you can
00:48 - provide either the input file name so
00:52 - for example if you want to just read the
00:55 - video from a particular file you can
00:58 - give the file name for example my file
01:02 - dot avi or mp4 or you need to provide
01:06 - the device index of your camera from
01:09 - which you want to read so by default
01:11 - this index will be either 0 or in many
01:16 - devices it's also minus 1 so first of
01:20 - all we are going to try with 0 device
01:23 - index which in most cases works so if
01:27 - this device index 0 doesn't work try
01:29 - with minus 1 now if you have multiple
01:33 - cameras and if you want to use the other
01:37 - camera then you can also try one for the
01:40 - second camera or two for the third
01:42 - camera and so on so we are going to use
01:45 - the default camera which is add device
01:48 - index 0 so this is the argument we need
01:52 - to provide here and then we are going to
01:54 - create a while loop in order to capture
01:57 - the frame continuously so let's create a
02:01 - while loop here and this loop we are
02:05 - going to run indefinitely so we are
02:08 - going to just say that while this loop
02:12 - is true we
02:13 - want to capture the frames so we are
02:16 - going to just define these variable ret
02:21 - and frame and then using this cap
02:25 - instance we are going to call a method
02:28 - called read now this read method is
02:32 - going to return true if the frame is
02:35 - available and this frame will be saved
02:38 - into this frame variable so here the
02:43 - true or false will be saved if the frame
02:46 - is available this ret will be true
02:49 - otherwise it will be false and this
02:51 - frame variable will actually capture or
02:54 - save the frame now in order to show this
02:57 - captured frame we can use I am sure so
03:01 - I'm going to just use a CB to dot I am
03:07 - sure which is going to show this frame
03:09 - inside the window first of all you can
03:13 - give the name to your window for example
03:16 - frame and then second argument will be
03:20 - the frame which you are reading which is
03:22 - this variable here now in the next step
03:26 - we have seen in the last video also we
03:28 - are going to use the C v2 dot weight key
03:32 - in order to wait for the user input and
03:36 - if this input will be Q we will quit the
03:41 - window and destroy all windows so we are
03:44 - going to just say C v2 dot weight key
03:46 - and the argument here will be 1 and I
03:49 - have told you you need to provide this
03:52 - mask for 64-bit machines so you can
03:57 - provide this mask and then we are going
04:00 - to just see if this key which is pressed
04:04 - is Q or not so we are going to use the
04:07 - Ord method for this and we will just
04:11 - check if the Q key is pressed and if
04:14 - this Q key is pressed we are going to
04:17 - break from the loop and we will come out
04:20 - of the loop and after we come out of the
04:23 - loop the first thing we need to do is to
04:26 - actually release
04:27 - is the capture variable so this is
04:30 - important after reading your video you
04:33 - need to release the resources so you
04:35 - need to just call this method cap dot
04:38 - release and then we will just destroy
04:42 - all windows so let's run this script and
04:44 - let's see what is the output so I'm
04:46 - going to run the script and you can see
04:48 - in this window the input from my default
04:52 - webcam of my laptop right now I'm just
04:56 - showing some book in front of this
04:59 - camera that's why you will see this book
05:02 - and as soon as I press Q key our window
05:07 - will be destroyed and we come out of
05:09 - this script now let's say you want to
05:11 - change the frames to gray so we want to
05:14 - convert our video input from the colored
05:18 - image to the greyscale image for that
05:21 - what you can do is you can define a
05:23 - variable called gray or anything else
05:26 - and then there is a method called C v2
05:31 - dot C V T color which is to convert
05:35 - color and the first argument which it
05:37 - takes is the source so in our case the
05:40 - source is the frame which we are
05:43 - capturing from the CA P dot read method
05:47 - the second argument is actually the
05:51 - conversion what we want to do so we will
05:54 - just call C v2 dot color underscore and
05:59 - by default the default colored image is
06:03 - captured as BG our image that means blue
06:08 - green red channel images and we want to
06:12 - convert it to a grayscale image so we
06:15 - will just write BG our two gray this
06:20 - means we want to capture the BG our
06:22 - image to the grayscale image and now
06:25 - this is going to give us the grayscale
06:28 - image and this input we can just
06:31 - transfer to the I am show method as the
06:34 - second argument of this I am show method
06:37 - so let's run the script once again and
06:40 - let's see what
06:41 - the output of the script and now you can
06:43 - see the video captured is in greyscale
06:47 - image and as soon as I press Q it's
06:51 - going to release all the captured
06:53 - resources and then destroy all windows
06:56 - now as I said if you want to display the
06:59 - image from a video file you just need to
07:03 - give the name of the video file for
07:05 - example name and then the extension
07:08 - which is let's say a Evi or mp4 or any
07:11 - other format now using this cap instance
07:15 - you can read few properties about the
07:17 - video which is captured and the first
07:20 - property is if the video is open or not
07:25 - so in case whenever you provide the
07:27 - filename and the file path is wrong then
07:30 - this is going to give you false so there
07:34 - is a method called is opened and this
07:38 - means if the filename of the video which
07:40 - you want to provide here is correct this
07:43 - is going to give us true otherwise this
07:46 - is opened is going to give us false in
07:49 - case the file path is wrong or the index
07:52 - which you give here for the device is
07:55 - wrong so let's give any random index
07:58 - here and then let's see what happens so
08:01 - I'm going to run the script and you will
08:03 - see nothing will happen because this is
08:07 - opened is going to give you false let's
08:10 - print that also and let's verify with
08:14 - the print statement the same thing so
08:16 - I'm going to just use this and then run
08:20 - the program once again and you can see
08:21 - it prints false that means you cannot
08:26 - capture the video using this index so my
08:29 - device is at index 0 by default so I
08:32 - need to give this index name otherwise
08:36 - for example I provide the wrong file
08:38 - name here also it's going to give us the
08:42 - false value there is a method called cap
08:45 - dot open also so if this gap is open
08:48 - gives you false you can try opening your
08:52 - capture video using cap dot
08:55 - open also now there are other properties
08:57 - which you can read using this cap
08:59 - instance and the property you can read
09:02 - using a method called gat so you can
09:05 - just write cap dot get and as an
09:09 - argument of this get method you can
09:11 - provide the prop ID so there are
09:14 - different prop IDs which you can read so
09:17 - let's say we want to read the property
09:20 - which is called a frame width and frame
09:23 - height which is going to give you the
09:26 - height and width of your frame so for
09:30 - this you just need to write CB 2 dot cap
09:33 - underscore prop underscore frame
09:36 - underscore width this is going to give
09:39 - you the width of your frame and if you
09:42 - want to get the height of your frame you
09:44 - can use Gap underscore prop underscore
09:47 - frame underscore height and this whole
09:49 - list you can find on the official
09:52 - documentation of OpenCV so I will
09:55 - provide you this link where you can see
09:59 - different values of the prop ID so right
10:02 - now I have used this ID and this ID but
10:06 - there are several number of IDs
10:08 - available here which you can use to read
10:11 - the property of your frame so let's use
10:16 - print method to just print out what
10:19 - property we are reading and let's once
10:22 - again run the script and here you can
10:25 - see in the output you can see the value
10:28 - 640 and 480 which is the width and
10:31 - height of your frame by d4 now let's see
10:35 - how we can save the image which we have
10:37 - captured from our webcam or the default
10:41 - camera so as we already know that we
10:45 - read a frame by frame when we capture
10:48 - the videos from your default camera so
10:52 - for creating the capture you have used
10:54 - video capture class and for saving the
10:57 - video we are going to create the video
11:00 - writer class so I'm going to first of
11:03 - all create a variable called out for
11:06 - output and then I'm going
11:08 - to call a class called video writer so
11:12 - let's call this class which is video
11:15 - writer and now this class takes few
11:18 - argument the first argument is the name
11:21 - of your output file so for example I can
11:25 - just give the name output dot avi the
11:29 - extension of the file
11:31 - the second argument here is the for cc
11:34 - code now for CC is a four byte code
11:37 - which is used to specify the video codec
11:40 - and if you want to know more about for
11:43 - cc code you can visit this website which
11:46 - is for CC dot o-r-g forward slash kodak
11:49 - dot PHP and here you can find several
11:52 - for CC codes so for now what we are
11:56 - going to do is we are going to just get
11:59 - the four CC code using a class called
12:02 - video writer underscore for cc so I'm
12:05 - going to declare a variable for cc and
12:07 - then I'm going to use CB to to call at
12:10 - last called video writer for cc so as an
12:15 - argument of this class you just need to
12:17 - provide the four cc code so for example
12:20 - I can give this kind of code so you can
12:23 - provide this argument which is X tricks
12:26 - and then your four CC code which is X
12:29 - weight in this case or otherwise what
12:32 - you can do here is you can also give
12:35 - this code in this format so for example
12:39 - X comma then second argument is V and
12:43 - then third argument is I and the fourth
12:48 - argument is D so you can either give
12:52 - this type of notation or you can just
12:55 - use asterisks and then in single quotes
12:58 - you can just write x fade or any other
13:01 - code here and then this force is e code
13:04 - we are going to pass as the second
13:06 - argument the third argument is the
13:08 - number of frames per second so let's say
13:11 - we you just want to use 20 frames per
13:14 - second and the fourth argument is the
13:17 - size so we already know that the size in
13:20 - which we are capturing is
13:22 - 640 by 480 so we are going to provide
13:26 - this in the form of tupple so 640 comma
13:30 - 480 so this will be the size of the
13:34 - video which will be saved in this file
13:37 - now inside our loop as we have seen we
13:41 - are just reading the frame here in the
13:43 - frame variable and this is the boolean
13:46 - variable if the frame is available it's
13:48 - true otherwise it's false right so first
13:51 - of all we are going to check if its
13:53 - value is true or false so we can just
13:57 - write if ret is equal to true then only
14:02 - we are going to just save this file into
14:05 - the output file so I'm going to just put
14:08 - everything inside this if condition
14:12 - otherwise we are going to break out of
14:15 - this loop so I'm going I'm going to just
14:17 - say else break now inside this if
14:21 - condition we can just write this frame
14:25 - into a file using a method called out
14:29 - dot right so out is the instance of
14:32 - video writer so I'm going to just use
14:34 - out dot write and then we are going to
14:39 - just pass the frame which we have
14:41 - captured which is inside the frame
14:45 - variable and now at last we are going to
14:48 - release all the resources using the out
14:52 - instance which is the instance of video
14:55 - writer so I'm going to just write out
14:57 - dot release and then let's run the
15:01 - script and let's see what happens so one
15:04 - thing to note here is our video will be
15:07 - saved as it is that is in the BGR mode
15:11 - that is in the colored mode so let's run
15:14 - the code and let's see what happens so
15:17 - I'm going to just start my script once
15:19 - again and now I'm going to just press Q
15:24 - so you can see here our video is shown
15:26 - in the grayscale and our video will be
15:29 - saved in the original from format
15:32 - because we are saving every frame before
15:35 - conversion so it will be saved in the
15:38 - original format so I'm going to just
15:40 - close this script and as soon as I close
15:45 - the script you can see the output dot
15:48 - avi file and in order to verify this
15:50 - file I'm going to go to the project and
15:52 - here I'm going to start this file using
15:56 - let's say VLC media player and you can
15:59 - see it shows the output of the output
16:02 - dot avi file so this is how you can read
16:05 - videos display and save videos using the
16:08 - default camera or the video file I hope
16:12 - you have enjoyed this video and I will
16:14 - see you in the next video
16:23 - you

Cleaned transcript:

hey guys welcome to the next video on open CBT tool for beginners using peyten in this video we will see how to read display and save videos using cameras so often we have to capture livestream from camera so first of all we will see how we can capture the live stream from the camera the same method you can use to display the video from a video file so let's get started and let's see how we can capture the live stream from your default camera so I'm going to just create a variable called cap and then inside your CV to package there is a class called video capture we are going to take this class and create an object of it and as an argument here you can provide either the input file name so for example if you want to just read the video from a particular file you can give the file name for example my file dot avi or mp4 or you need to provide the device index of your camera from which you want to read so by default this index will be either 0 or in many devices it's also minus 1 so first of all we are going to try with 0 device index which in most cases works so if this device index 0 doesn't work try with minus 1 now if you have multiple cameras and if you want to use the other camera then you can also try one for the second camera or two for the third camera and so on so we are going to use the default camera which is add device index 0 so this is the argument we need to provide here and then we are going to create a while loop in order to capture the frame continuously so let's create a while loop here and this loop we are going to run indefinitely so we are going to just say that while this loop is true we want to capture the frames so we are going to just define these variable ret and frame and then using this cap instance we are going to call a method called read now this read method is going to return true if the frame is available and this frame will be saved into this frame variable so here the true or false will be saved if the frame is available this ret will be true otherwise it will be false and this frame variable will actually capture or save the frame now in order to show this captured frame we can use I am sure so I'm going to just use a CB to dot I am sure which is going to show this frame inside the window first of all you can give the name to your window for example frame and then second argument will be the frame which you are reading which is this variable here now in the next step we have seen in the last video also we are going to use the C v2 dot weight key in order to wait for the user input and if this input will be Q we will quit the window and destroy all windows so we are going to just say C v2 dot weight key and the argument here will be 1 and I have told you you need to provide this mask for 64bit machines so you can provide this mask and then we are going to just see if this key which is pressed is Q or not so we are going to use the Ord method for this and we will just check if the Q key is pressed and if this Q key is pressed we are going to break from the loop and we will come out of the loop and after we come out of the loop the first thing we need to do is to actually release is the capture variable so this is important after reading your video you need to release the resources so you need to just call this method cap dot release and then we will just destroy all windows so let's run this script and let's see what is the output so I'm going to run the script and you can see in this window the input from my default webcam of my laptop right now I'm just showing some book in front of this camera that's why you will see this book and as soon as I press Q key our window will be destroyed and we come out of this script now let's say you want to change the frames to gray so we want to convert our video input from the colored image to the greyscale image for that what you can do is you can define a variable called gray or anything else and then there is a method called C v2 dot C V T color which is to convert color and the first argument which it takes is the source so in our case the source is the frame which we are capturing from the CA P dot read method the second argument is actually the conversion what we want to do so we will just call C v2 dot color underscore and by default the default colored image is captured as BG our image that means blue green red channel images and we want to convert it to a grayscale image so we will just write BG our two gray this means we want to capture the BG our image to the grayscale image and now this is going to give us the grayscale image and this input we can just transfer to the I am show method as the second argument of this I am show method so let's run the script once again and let's see what the output of the script and now you can see the video captured is in greyscale image and as soon as I press Q it's going to release all the captured resources and then destroy all windows now as I said if you want to display the image from a video file you just need to give the name of the video file for example name and then the extension which is let's say a Evi or mp4 or any other format now using this cap instance you can read few properties about the video which is captured and the first property is if the video is open or not so in case whenever you provide the filename and the file path is wrong then this is going to give you false so there is a method called is opened and this means if the filename of the video which you want to provide here is correct this is going to give us true otherwise this is opened is going to give us false in case the file path is wrong or the index which you give here for the device is wrong so let's give any random index here and then let's see what happens so I'm going to run the script and you will see nothing will happen because this is opened is going to give you false let's print that also and let's verify with the print statement the same thing so I'm going to just use this and then run the program once again and you can see it prints false that means you cannot capture the video using this index so my device is at index 0 by default so I need to give this index name otherwise for example I provide the wrong file name here also it's going to give us the false value there is a method called cap dot open also so if this gap is open gives you false you can try opening your capture video using cap dot open also now there are other properties which you can read using this cap instance and the property you can read using a method called gat so you can just write cap dot get and as an argument of this get method you can provide the prop ID so there are different prop IDs which you can read so let's say we want to read the property which is called a frame width and frame height which is going to give you the height and width of your frame so for this you just need to write CB 2 dot cap underscore prop underscore frame underscore width this is going to give you the width of your frame and if you want to get the height of your frame you can use Gap underscore prop underscore frame underscore height and this whole list you can find on the official documentation of OpenCV so I will provide you this link where you can see different values of the prop ID so right now I have used this ID and this ID but there are several number of IDs available here which you can use to read the property of your frame so let's use print method to just print out what property we are reading and let's once again run the script and here you can see in the output you can see the value 640 and 480 which is the width and height of your frame by d4 now let's see how we can save the image which we have captured from our webcam or the default camera so as we already know that we read a frame by frame when we capture the videos from your default camera so for creating the capture you have used video capture class and for saving the video we are going to create the video writer class so I'm going to first of all create a variable called out for output and then I'm going to call a class called video writer so let's call this class which is video writer and now this class takes few argument the first argument is the name of your output file so for example I can just give the name output dot avi the extension of the file the second argument here is the for cc code now for CC is a four byte code which is used to specify the video codec and if you want to know more about for cc code you can visit this website which is for CC dot org forward slash kodak dot PHP and here you can find several for CC codes so for now what we are going to do is we are going to just get the four CC code using a class called video writer underscore for cc so I'm going to declare a variable for cc and then I'm going to use CB to to call at last called video writer for cc so as an argument of this class you just need to provide the four cc code so for example I can give this kind of code so you can provide this argument which is X tricks and then your four CC code which is X weight in this case or otherwise what you can do here is you can also give this code in this format so for example X comma then second argument is V and then third argument is I and the fourth argument is D so you can either give this type of notation or you can just use asterisks and then in single quotes you can just write x fade or any other code here and then this force is e code we are going to pass as the second argument the third argument is the number of frames per second so let's say we you just want to use 20 frames per second and the fourth argument is the size so we already know that the size in which we are capturing is 640 by 480 so we are going to provide this in the form of tupple so 640 comma 480 so this will be the size of the video which will be saved in this file now inside our loop as we have seen we are just reading the frame here in the frame variable and this is the boolean variable if the frame is available it's true otherwise it's false right so first of all we are going to check if its value is true or false so we can just write if ret is equal to true then only we are going to just save this file into the output file so I'm going to just put everything inside this if condition otherwise we are going to break out of this loop so I'm going I'm going to just say else break now inside this if condition we can just write this frame into a file using a method called out dot right so out is the instance of video writer so I'm going to just use out dot write and then we are going to just pass the frame which we have captured which is inside the frame variable and now at last we are going to release all the resources using the out instance which is the instance of video writer so I'm going to just write out dot release and then let's run the script and let's see what happens so one thing to note here is our video will be saved as it is that is in the BGR mode that is in the colored mode so let's run the code and let's see what happens so I'm going to just start my script once again and now I'm going to just press Q so you can see here our video is shown in the grayscale and our video will be saved in the original from format because we are saving every frame before conversion so it will be saved in the original format so I'm going to just close this script and as soon as I close the script you can see the output dot avi file and in order to verify this file I'm going to go to the project and here I'm going to start this file using let's say VLC media player and you can see it shows the output of the output dot avi file so this is how you can read videos display and save videos using the default camera or the video file I hope you have enjoyed this video and I will see you in the next video you
