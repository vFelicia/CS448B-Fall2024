With timestamps:

00:00 - in this video i'm going to show you what
00:02 - are iterators in python
00:04 - and how to use iterators in python
00:07 - and at the end i'm also going to show
00:09 - you how you can create your custom
00:12 - iterator class in python
00:15 - so let's get started and let's see first
00:17 - of all
00:18 - what is an iterator but before that we
00:22 - need to understand what is iteration
00:24 - so what is iteration an act of
00:28 - going over a collection is called
00:31 - iteration now what kind of collections
00:34 - we are talking about
00:35 - we have already seen some kind of
00:37 - collections like lists
00:39 - tuples dictionaries sets and other kind
00:43 - of collections
00:44 - and till now what we have seen is we can
00:47 - use a for loop
00:49 - to iterate over a collection so till now
00:52 - what we have learned is for example i'm
00:53 - going to declare a collection
00:56 - which is list in this case and i'm going
00:59 - to just add
01:00 - some values inside the list and once i
01:03 - declare the list
01:05 - i can iterate over this list using a for
01:08 - loop so
01:08 - let's say for i in the collection name
01:12 - and then you can just write print here
01:16 - to print each and every value of this
01:18 - collection a
01:19 - so this for loop iterate over each and
01:22 - every element
01:23 - in the collection and then print
01:26 - the value using this print statement now
01:29 - let's talk about the iterators
01:32 - so what is an iterator iterator is an
01:36 - object which can be used to iterate over
01:40 - a collection now this iterator object
01:43 - has
01:43 - two special methods first is
01:47 - underscore underscore iter underscore
01:50 - underscore
01:51 - and second is underscore underscore next
01:54 - underscore underscore so iterators have
01:57 - these two special methods one is eater
02:01 - and this iter method is going to get you
02:03 - the iterator
02:05 - and the next method is going to give you
02:08 - the next
02:09 - value using this iterator now
02:12 - collections like lists
02:14 - or dictionary or tuple are all
02:17 - iteratable collections that means we can
02:21 - iterate over them and all these
02:23 - collection objects
02:25 - have a special method called eater
02:28 - which is used to get the iterator
02:31 - from these collections so let me show
02:34 - you first of all these two methods
02:36 - inside a collection so when you use dir
02:40 - inbuilt function and give any collection
02:44 - as an argument here
02:45 - and when i press enter you will see a
02:47 - list of functions here
02:49 - and when i scroll little bit right here
02:53 - you will see a special function which is
02:55 - iter
02:57 - so all these collections like lists or
02:59 - dictionary or tuple
03:01 - have this iter method and we can
03:04 - call this itr method to get the object
03:08 - of the iterator and we can call this
03:11 - underscore underscore iter method
03:14 - using a special method called iter
03:17 - without
03:18 - underscore in front and back of it
03:21 - so let me just show you what i'm saying
03:24 - so i'm going to
03:25 - declare a variable id which stands for
03:28 - iterator
03:29 - and then i'm going to use a special
03:31 - method called
03:32 - iter without underscore and this iter
03:36 - method
03:37 - is used to get the iterator
03:40 - so i can just pass my collection
03:44 - here as an argument and this iterator
03:46 - method
03:47 - is going to give me the iterator object
03:50 - of this collection which i was talking
03:53 - about which is
03:53 - underscore underscore iter underscore
03:57 - underscore so let me just press enter
03:59 - and now we have the iterator object
04:02 - and this iterator object we can use to
04:05 - call all the values
04:07 - in the collection so let's once again
04:09 - print the values of
04:11 - our a list and this has
04:14 - these six values and now i can use a
04:17 - special method called
04:18 - next here to get the first value of this
04:22 - collection
04:23 - so i'm going to just pass the i t
04:26 - which is the iterator which we have got
04:29 - from
04:29 - this iter method and then press enter
04:33 - and you will see it will print the first
04:35 - value
04:36 - of your list now once again when you
04:39 - call
04:40 - this next using this i t variable
04:44 - is going to give you the next value of
04:47 - the list
04:48 - and when you call it again and again
04:51 - it's going to iterate over your list
04:53 - and give you the values of the list
04:56 - one by one so let's get all the values
05:00 - so this is the second last value which
05:02 - is nine
05:02 - and then at last it's going to print the
05:05 - last value which is seven now at this
05:07 - point iterator has
05:08 - iterated over all these six
05:11 - values after that when you call this
05:14 - next method once again over this it
05:16 - variable
05:17 - then it's going to give you this
05:20 - exception
05:21 - which says stop iteration so when
05:24 - your iterator is exhausted then it's
05:27 - going to give you
05:28 - the exception which is stop iteration
05:31 - now as i said
05:32 - the collections like list dictionary or
05:34 - tuple
05:35 - have this iteratable object that means
05:39 - we can use
05:40 - the for loop to iterate over these
05:43 - collections so for loop uses the same
05:47 - iterator mechanism to iterate over
05:50 - all these elements of the collection now
05:53 - many a
05:53 - times in your programming development
05:55 - career you will have to write a class
05:59 - in order to iterate over some kind of
06:02 - collection
06:03 - so let me show you how you can create
06:05 - your custom iterator class
06:07 - so let me minimize this python console
06:10 - in the pycharm ide and i will just
06:14 - comment
06:14 - these two methods so as i said an
06:18 - iterator
06:19 - always have these two special methods
06:22 - one is underscore underscore eta
06:24 - underscore underscore
06:26 - and the second is underscore underscore
06:28 - next
06:29 - underscore underscore so in order to
06:32 - create your own
06:33 - iterator class you need to implement
06:36 - both
06:36 - these methods so let's create an
06:39 - iterator class
06:40 - and i'm going to just name my class as
06:43 - list iterator class and in this list
06:46 - iterator class first of all i'm going to
06:48 - define uh init method
06:51 - and this init method is going to take
06:54 - any type of
06:55 - list or any type of collection which is
06:57 - iteratable
06:58 - and then inside this init method i'm
07:00 - going to just call
07:02 - a self to create a member variable here
07:06 - and i'm going to name my member variable
07:08 - as dot
07:09 - underscore underscore list and i'm going
07:13 - to just
07:13 - pass the value of a let's name this a as
07:16 - list also so we will be clear so list
07:20 - is equal to list the second member
07:22 - variable which i want to create here
07:24 - is the index variable so the second
07:27 - variable is
07:28 - the index variable which is the index of
07:32 - the list or the collection
07:33 - and let's give the initial value of this
07:36 - index now as i said in order to create
07:38 - an iterator class
07:39 - you need to implement these two methods
07:42 - which are
07:43 - underscore underscore iter method first
07:46 - of all and in this method we are just
07:48 - going to
07:49 - return the value of self so this
07:52 - underscore underscore iter method is
07:55 - going to give you
07:56 - the iterator and let's also implement
07:59 - the method which is underscore
08:02 - underscore
08:03 - next now in this next method first of
08:06 - all
08:06 - when this next method is called what we
08:09 - want to do is we want to increase the
08:11 - value
08:12 - of index so let's call our index member
08:15 - variable
08:16 - and let's increase the value of index by
08:19 - 1
08:19 - and the next thing which we want to do
08:21 - here is we want to send
08:23 - the value at this index so we can
08:26 - just return so let me call return first
08:29 - of all and then
08:30 - self dot your list name whatever is your
08:34 - list
08:34 - and then inside these square brackets we
08:37 - call
08:38 - the index which we have incremented by
08:40 - one
08:41 - so self dot underscore underscore index
08:44 - so this statement is going to give you
08:47 - the current
08:47 - value at this index right now
08:50 - and that's basically it so i'm going to
08:53 - just say my
08:54 - list is equal to list iterator
08:58 - and this list iterator takes an argument
09:00 - which is
09:01 - a collection right so let me create a
09:03 - list collection
09:04 - and i'm going to name my list as a
09:08 - and here i'm going to provide some
09:10 - values
09:11 - inside the list so
09:14 - let's say we have these six values
09:16 - inside the list
09:17 - and now we can just pass this list
09:20 - as an argument of our list iterator so
09:24 - once we have
09:25 - this list iterator object we can call
09:28 - our iter method in order to get
09:32 - the iterator object which is this one so
09:35 - let me create
09:36 - one more variable which is i t and then
09:39 - i'm going to call
09:40 - this iter method and i'm going to pass
09:43 - my my list
09:44 - object as an argument of this iter
09:47 - method
09:48 - so now i have the iterator object of
09:50 - this list
09:51 - using this list iterator class and
09:54 - now i can use the print method so let me
09:57 - call a print method
09:59 - and then i can call the next method
10:02 - to iterate over the list using the
10:05 - i t variable so let's run this code once
10:08 - again
10:09 - and you will see it's going to print the
10:12 - first
10:12 - value of the list which is one let's
10:15 - print it two more times and let's run
10:18 - the code once again
10:20 - and you can see it's going to give you
10:21 - the next two values of the list so now
10:23 - we know that this next is going to call
10:26 - every time the next value from this list
10:30 - so let's print all the values of the
10:32 - list using
10:33 - this next method and you can see it
10:36 - prints
10:37 - all the values of this list now when i
10:40 - want to go
10:41 - beyond this after the list iterator is
10:44 - exhausted and let's run the code
10:47 - you will see it's going to give me this
10:49 - error which says
10:50 - list index out of range but this is not
10:54 - the problem
10:55 - of the iterator is the problem of the
10:58 - list now what i have shown you when i
11:00 - have shown you
11:01 - the example of this list
11:04 - iterator in the python console
11:07 - whenever your iterator is exhausted it
11:10 - throws the stop
11:11 - iteration error or exception so let's
11:14 - raise the same kind of stop iteration
11:16 - exception using our class also
11:20 - so i will go to the next method of my
11:22 - class
11:23 - and here i can give a condition
11:26 - and this condition checks whether the
11:29 - value of
11:30 - index so self dot underscore underscore
11:33 - index
11:34 - is greater than or equal to the length
11:37 - of your list so length and the list
11:41 - name is self dot underscore underscore
11:44 - list and when this condition is true
11:48 - we are going to raise an exception so
11:50 - let's
11:51 - use the raise keyword and the exception
11:53 - which we want to raise here is the top
11:56 - iteration exception so let's throw this
11:58 - exception or
11:59 - raise this exception and what this
12:01 - condition is basically going to do is
12:04 - until the last index which is for
12:06 - example in this list
12:08 - the last index is five so under until
12:11 - the last index
12:12 - everything will be okay but as soon as
12:15 - this index becomes
12:16 - six which is the length of your list
12:20 - also so the length of the list which
12:22 - have six
12:23 - element is six but index will go up to
12:27 - five because the index starts from zero
12:30 - so as soon as this
12:31 - index becomes is equal to the length
12:34 - which means
12:34 - the iterator has been exhausted we can
12:37 - also
12:38 - write double equals to here as soon as
12:40 - the value of index becomes the length
12:42 - of the list we can throw this exception
12:46 - so let's run this code once again and
12:49 - you can see we have used
12:50 - this next method seven times so at the
12:53 - last print statement
12:55 - it's going to give us the error so first
12:57 - of all let me remove the last statement
13:00 - and let's run the code and it's going to
13:02 - run fine so you can see everything is
13:04 - fine
13:05 - but as soon as i call this last next
13:08 - method
13:09 - and i know that my iterator is exhausted
13:12 - and when i run the code once again it's
13:14 - going to raise an
13:15 - exception which is stop iteration now
13:18 - one more thing which i
13:20 - said which you can use with your
13:22 - iterators
13:24 - is the for loop so let's try to use this
13:27 - for loop
13:28 - and i'm going to just write for i in
13:31 - your iterator which is i t which we have
13:34 - got using this iter method
13:36 - and let me comment this code also and
13:39 - now
13:40 - i can print each and every element
13:42 - inside the
13:43 - list a so i'm going to just write print
13:46 - i here
13:47 - and let me remove this code from here so
13:50 - you can see
13:51 - the list also and this for loop also and
13:54 - i'm going to run this code once again
13:56 - and you can see this for loop has
13:58 - iterated over
14:00 - our list which we have provided as an
14:03 - argument
14:03 - of this list iterator class and you can
14:06 - see all the
14:08 - values inside the list have been printed
14:11 - using this for loop so in this way you
14:14 - can create your own iterator
14:16 - class in python i hope you have enjoyed
14:19 - this video
14:20 - and i will see you in the next video

Cleaned transcript:

in this video i'm going to show you what are iterators in python and how to use iterators in python and at the end i'm also going to show you how you can create your custom iterator class in python so let's get started and let's see first of all what is an iterator but before that we need to understand what is iteration so what is iteration an act of going over a collection is called iteration now what kind of collections we are talking about we have already seen some kind of collections like lists tuples dictionaries sets and other kind of collections and till now what we have seen is we can use a for loop to iterate over a collection so till now what we have learned is for example i'm going to declare a collection which is list in this case and i'm going to just add some values inside the list and once i declare the list i can iterate over this list using a for loop so let's say for i in the collection name and then you can just write print here to print each and every value of this collection a so this for loop iterate over each and every element in the collection and then print the value using this print statement now let's talk about the iterators so what is an iterator iterator is an object which can be used to iterate over a collection now this iterator object has two special methods first is underscore underscore iter underscore underscore and second is underscore underscore next underscore underscore so iterators have these two special methods one is eater and this iter method is going to get you the iterator and the next method is going to give you the next value using this iterator now collections like lists or dictionary or tuple are all iteratable collections that means we can iterate over them and all these collection objects have a special method called eater which is used to get the iterator from these collections so let me show you first of all these two methods inside a collection so when you use dir inbuilt function and give any collection as an argument here and when i press enter you will see a list of functions here and when i scroll little bit right here you will see a special function which is iter so all these collections like lists or dictionary or tuple have this iter method and we can call this itr method to get the object of the iterator and we can call this underscore underscore iter method using a special method called iter without underscore in front and back of it so let me just show you what i'm saying so i'm going to declare a variable id which stands for iterator and then i'm going to use a special method called iter without underscore and this iter method is used to get the iterator so i can just pass my collection here as an argument and this iterator method is going to give me the iterator object of this collection which i was talking about which is underscore underscore iter underscore underscore so let me just press enter and now we have the iterator object and this iterator object we can use to call all the values in the collection so let's once again print the values of our a list and this has these six values and now i can use a special method called next here to get the first value of this collection so i'm going to just pass the i t which is the iterator which we have got from this iter method and then press enter and you will see it will print the first value of your list now once again when you call this next using this i t variable is going to give you the next value of the list and when you call it again and again it's going to iterate over your list and give you the values of the list one by one so let's get all the values so this is the second last value which is nine and then at last it's going to print the last value which is seven now at this point iterator has iterated over all these six values after that when you call this next method once again over this it variable then it's going to give you this exception which says stop iteration so when your iterator is exhausted then it's going to give you the exception which is stop iteration now as i said the collections like list dictionary or tuple have this iteratable object that means we can use the for loop to iterate over these collections so for loop uses the same iterator mechanism to iterate over all these elements of the collection now many a times in your programming development career you will have to write a class in order to iterate over some kind of collection so let me show you how you can create your custom iterator class so let me minimize this python console in the pycharm ide and i will just comment these two methods so as i said an iterator always have these two special methods one is underscore underscore eta underscore underscore and the second is underscore underscore next underscore underscore so in order to create your own iterator class you need to implement both these methods so let's create an iterator class and i'm going to just name my class as list iterator class and in this list iterator class first of all i'm going to define uh init method and this init method is going to take any type of list or any type of collection which is iteratable and then inside this init method i'm going to just call a self to create a member variable here and i'm going to name my member variable as dot underscore underscore list and i'm going to just pass the value of a let's name this a as list also so we will be clear so list is equal to list the second member variable which i want to create here is the index variable so the second variable is the index variable which is the index of the list or the collection and let's give the initial value of this index now as i said in order to create an iterator class you need to implement these two methods which are underscore underscore iter method first of all and in this method we are just going to return the value of self so this underscore underscore iter method is going to give you the iterator and let's also implement the method which is underscore underscore next now in this next method first of all when this next method is called what we want to do is we want to increase the value of index so let's call our index member variable and let's increase the value of index by 1 and the next thing which we want to do here is we want to send the value at this index so we can just return so let me call return first of all and then self dot your list name whatever is your list and then inside these square brackets we call the index which we have incremented by one so self dot underscore underscore index so this statement is going to give you the current value at this index right now and that's basically it so i'm going to just say my list is equal to list iterator and this list iterator takes an argument which is a collection right so let me create a list collection and i'm going to name my list as a and here i'm going to provide some values inside the list so let's say we have these six values inside the list and now we can just pass this list as an argument of our list iterator so once we have this list iterator object we can call our iter method in order to get the iterator object which is this one so let me create one more variable which is i t and then i'm going to call this iter method and i'm going to pass my my list object as an argument of this iter method so now i have the iterator object of this list using this list iterator class and now i can use the print method so let me call a print method and then i can call the next method to iterate over the list using the i t variable so let's run this code once again and you will see it's going to print the first value of the list which is one let's print it two more times and let's run the code once again and you can see it's going to give you the next two values of the list so now we know that this next is going to call every time the next value from this list so let's print all the values of the list using this next method and you can see it prints all the values of this list now when i want to go beyond this after the list iterator is exhausted and let's run the code you will see it's going to give me this error which says list index out of range but this is not the problem of the iterator is the problem of the list now what i have shown you when i have shown you the example of this list iterator in the python console whenever your iterator is exhausted it throws the stop iteration error or exception so let's raise the same kind of stop iteration exception using our class also so i will go to the next method of my class and here i can give a condition and this condition checks whether the value of index so self dot underscore underscore index is greater than or equal to the length of your list so length and the list name is self dot underscore underscore list and when this condition is true we are going to raise an exception so let's use the raise keyword and the exception which we want to raise here is the top iteration exception so let's throw this exception or raise this exception and what this condition is basically going to do is until the last index which is for example in this list the last index is five so under until the last index everything will be okay but as soon as this index becomes six which is the length of your list also so the length of the list which have six element is six but index will go up to five because the index starts from zero so as soon as this index becomes is equal to the length which means the iterator has been exhausted we can also write double equals to here as soon as the value of index becomes the length of the list we can throw this exception so let's run this code once again and you can see we have used this next method seven times so at the last print statement it's going to give us the error so first of all let me remove the last statement and let's run the code and it's going to run fine so you can see everything is fine but as soon as i call this last next method and i know that my iterator is exhausted and when i run the code once again it's going to raise an exception which is stop iteration now one more thing which i said which you can use with your iterators is the for loop so let's try to use this for loop and i'm going to just write for i in your iterator which is i t which we have got using this iter method and let me comment this code also and now i can print each and every element inside the list a so i'm going to just write print i here and let me remove this code from here so you can see the list also and this for loop also and i'm going to run this code once again and you can see this for loop has iterated over our list which we have provided as an argument of this list iterator class and you can see all the values inside the list have been printed using this for loop so in this way you can create your own iterator class in python i hope you have enjoyed this video and i will see you in the next video
