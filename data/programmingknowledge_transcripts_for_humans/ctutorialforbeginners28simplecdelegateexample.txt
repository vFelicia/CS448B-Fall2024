With timestamps:

00:00 - hello guys welcome once again in the
00:02 - last video I have shown you what are
00:04 - delegates and how to declare delegates
00:07 - in C shop in this video I'm going to
00:10 - give you a little example which uh makes
00:13 - this delegate concept a little bit much
00:17 - uh clearer so let's get started in the
00:21 - last video I have shown you how to
00:23 - declare uh delegate signature and I have
00:26 - shown you whatever method you want to
00:29 - point to from from a delegate you your
00:32 - method or your delegate signature will
00:34 - look like the same as
00:37 - method only change is you need to have
00:40 - this delegate right now for example I
00:44 - create I want to create a delegate which
00:48 - will be a general purpose delegate to
00:51 - perform some action or to perform some
00:53 - operation for example I want to perform
00:57 - uh addition subtraction or and
01:00 - multiplication and division from a same
01:04 - delegate how can I do it so for example
01:07 - this method we have written it for the
01:11 - addition of two numbers I can just make
01:15 - a similar method
01:18 - to substract two numbers I will just say
01:22 - Subs number for subtracting number and
01:25 - will just give us the subtraction of two
01:29 - numbers
01:30 - and once again we will copy this method
01:33 - and we will paste it here and then this
01:36 - third method we will uh use it to get
01:41 - the product of two
01:44 - numbers Rod two numbers so this will
01:47 - give us the product
01:49 - okay so for an example I have these
01:52 - three method and I want to use the same
01:55 - delegate to use them I can name my the
01:58 - delegate as
02:01 - a operation Delegate for
02:05 - example operation delegate which
02:07 - performs some operation on these two
02:10 - numbers right now what I what can I do
02:14 - is or what I can do is I can perform
02:18 - this uh addition subtraction or product
02:21 - product of these two number uh by using
02:24 - the single delegate so I will just copy
02:27 - the name of this delegate and I can
02:30 - declare the object of the this delegate
02:32 - I have told you last time that delegates
02:36 - are similar to the classes in a way that
02:39 - you can instantiate or you can create an
02:42 - instance of this class or this delegate
02:45 - right and in the Constructor you need to
02:48 - give the name of the function you want
02:50 - to point to so for example first object
02:53 - I create Del one to add these two
02:57 - numbers right
03:00 - and I can say the
03:02 - result
03:05 - uh
03:07 - the
03:12 - add result is equal to whatever is the
03:17 - result right this should
03:20 - be is equal to and the
03:24 - result
03:26 - okay so and in a similar way I can
03:31 - declare the another instance of this
03:33 - delegate I will just copy and paste it
03:35 - here and I will name this delegate as
03:37 - delegate two and this in this delegate
03:42 - instance I will pass this function which
03:44 - is subtracting two numbers okay and this
03:48 - result I will say this result is result
03:51 - one for me this so for example we say
03:55 - this is a result one and this is a
03:58 - result two for me and I will pass two
04:02 - different numbers for example
04:05 - th000
04:08 - minus
04:10 - 789 okay and I
04:13 - can instantiate a third delegate
04:17 - object
04:19 - del3 and I will pass this product
04:22 - function to
04:23 - this and now this delegate will point to
04:26 - the product and this result I will store
04:28 - in the third variable called result
04:31 - three and
04:33 - then I can say sub result is or sub
04:38 - result is
04:41 - and product result is this one so in a
04:45 - way I have used a single delegate to
04:49 - perform these three methods right so
04:53 - this delegate can be used as a general
04:55 - purpose uh method for performing three
04:59 - three different tasks right and I will
05:02 - run the
05:03 - program and it shows me the result of
05:07 - all these three right so in this way you
05:12 - can create a
05:15 - delegate which will show you uh which
05:17 - will give you the result of all these
05:22 - uh this should be once one
05:26 - second okay so there there is something
05:29 - which I forgot this delegate comes here
05:33 - when we pass these two arguments this
05:35 - delegate will come here and this
05:38 - delegate will come here right now this
05:42 - declaration is complete so we create an
05:44 - instance of the uh delegate and in the
05:47 - construct as a Constructor we give the
05:50 - function name which will point point to
05:53 - this function so our delegate object
05:55 - will point to this function and whatever
05:58 - this uh function is it is pointing to it
06:02 - will take the argument same argument as
06:05 - that function and using the this
06:07 - instance right the same you will do it
06:10 - for this and this and now probably you
06:13 - will see the right result so addition of
06:17 - these two number is this subtraction of
06:19 - these two number is this and
06:21 - multiplication of these two number is
06:23 - this okay so in a way you can use
06:28 - delegate for three purposes first is to
06:32 - encapsulate the methods call from caller
06:37 - second is effective use of delegate
06:39 - improves the performance of the
06:41 - application right so if you use this uh
06:45 - these delegates effectively it will
06:47 - increase the performance of your
06:50 - application in a way that your
06:53 - application will be much flexible if you
06:55 - use delegates because you can perform
07:01 - different tasks using the same delegate
07:03 - right and the third is um delegates are
07:08 - used to call method asynchronously right
07:12 - so you can call this method and at the
07:15 - different time you can call other method
07:18 - so you can call them asynchronously
07:20 - right so in this way you can use
07:24 - delegates this is a small example I want
07:26 - to give you and I hope you learn
07:29 - something new this time please WR
07:31 - comment and subscribe and bye for now

Cleaned transcript:

hello guys welcome once again in the last video I have shown you what are delegates and how to declare delegates in C shop in this video I'm going to give you a little example which uh makes this delegate concept a little bit much uh clearer so let's get started in the last video I have shown you how to declare uh delegate signature and I have shown you whatever method you want to point to from from a delegate you your method or your delegate signature will look like the same as method only change is you need to have this delegate right now for example I create I want to create a delegate which will be a general purpose delegate to perform some action or to perform some operation for example I want to perform uh addition subtraction or and multiplication and division from a same delegate how can I do it so for example this method we have written it for the addition of two numbers I can just make a similar method to substract two numbers I will just say Subs number for subtracting number and will just give us the subtraction of two numbers and once again we will copy this method and we will paste it here and then this third method we will uh use it to get the product of two numbers Rod two numbers so this will give us the product okay so for an example I have these three method and I want to use the same delegate to use them I can name my the delegate as a operation Delegate for example operation delegate which performs some operation on these two numbers right now what I what can I do is or what I can do is I can perform this uh addition subtraction or product product of these two number uh by using the single delegate so I will just copy the name of this delegate and I can declare the object of the this delegate I have told you last time that delegates are similar to the classes in a way that you can instantiate or you can create an instance of this class or this delegate right and in the Constructor you need to give the name of the function you want to point to so for example first object I create Del one to add these two numbers right and I can say the result uh the add result is equal to whatever is the result right this should be is equal to and the result okay so and in a similar way I can declare the another instance of this delegate I will just copy and paste it here and I will name this delegate as delegate two and this in this delegate instance I will pass this function which is subtracting two numbers okay and this result I will say this result is result one for me this so for example we say this is a result one and this is a result two for me and I will pass two different numbers for example th000 minus 789 okay and I can instantiate a third delegate object del3 and I will pass this product function to this and now this delegate will point to the product and this result I will store in the third variable called result three and then I can say sub result is or sub result is and product result is this one so in a way I have used a single delegate to perform these three methods right so this delegate can be used as a general purpose uh method for performing three three different tasks right and I will run the program and it shows me the result of all these three right so in this way you can create a delegate which will show you uh which will give you the result of all these uh this should be once one second okay so there there is something which I forgot this delegate comes here when we pass these two arguments this delegate will come here and this delegate will come here right now this declaration is complete so we create an instance of the uh delegate and in the construct as a Constructor we give the function name which will point point to this function so our delegate object will point to this function and whatever this uh function is it is pointing to it will take the argument same argument as that function and using the this instance right the same you will do it for this and this and now probably you will see the right result so addition of these two number is this subtraction of these two number is this and multiplication of these two number is this okay so in a way you can use delegate for three purposes first is to encapsulate the methods call from caller second is effective use of delegate improves the performance of the application right so if you use this uh these delegates effectively it will increase the performance of your application in a way that your application will be much flexible if you use delegates because you can perform different tasks using the same delegate right and the third is um delegates are used to call method asynchronously right so you can call this method and at the different time you can call other method so you can call them asynchronously right so in this way you can use delegates this is a small example I want to give you and I hope you learn something new this time please WR comment and subscribe and bye for now
