With timestamps:

00:00 - hi in this video we are going to add new
00:03 - security rules and authenticate the user
00:06 - so for now the password field is filled
00:09 - with the plain text so they are going to
00:12 - change it into the random set of values
00:15 - for doing this we are going to use a new
00:18 - library that is called NPM that is
00:22 - called big crib chairs so I have already
00:24 - installed it using NPM I big crypt Jas
00:30 - big crib chairs and here I have also
00:36 - used pip crypt is equal to require big
00:40 - trip chairs so in here we are going to
00:43 - use a schema method that it provide non
00:46 - whisper behind that is user schema dot
00:49 - free it means that and whenever a new
00:53 - method is to be called it will be called
00:56 - p4h that is whenever we use the save
00:59 - matter it will be called before it and
01:01 - it's a synchronous process so we are
01:04 - going to use a sink process and it uses
01:08 - es before es6 function syntax so we are
01:16 - going to use async function and in here
01:19 - we are going to use the parameter next
01:22 - which is called whenever the upper
01:27 - whenever the upward functionality will
01:30 - be done so in here we are going to use
01:35 - the cost user is equal to this it dis
01:39 - provides the document that is going to
01:41 - be saved in here so in here a user has a
01:45 - password so whenever a user pothole is
01:49 - being changed then we are going to run
01:51 - this if statement so in here if user dot
01:57 - is modified in the in here we are going
02:01 - to just say the field that is password
02:06 - any here we are going to use the bcrypt
02:09 - so what's pink change that is the
02:12 - password being changed
02:13 - so user dot password is equal to it's a
02:18 - synchronous process so we willingly
02:20 - acquaint you with await and in here we
02:23 - are going to use big crypt method that
02:27 - is has a name here the string that is
02:33 - the request or password that we are
02:36 - going to change and how many times we
02:39 - are going to run this algorithm that is
02:41 - like it's a stable that is very aware if
02:44 - you are going to use eight times so now
02:48 - that's it by doing this we can see if
02:52 - the password is being saved as a random
02:55 - set of values so for looking for saying
03:00 - this we are going to use the postman in
03:02 - here
03:03 - and we are going to create a new new
03:08 - fire profile that is Jesse Capen
03:10 - and now if we run this file we can see
03:15 - in here that the password is being
03:17 - stored as a random set of values now
03:21 - that's being done now we have to login
03:24 - with the credentials that is being given
03:26 - like email and password
03:29 - and now we are going to log in with this
03:31 - email and password but the password is
03:34 - being as a random set of values that has
03:37 - been provided by the bakery chairs so
03:40 - for doing this we are going to create a
03:42 - new endpoint in here in app tortious so
03:50 - in here we are going to create a new
03:51 - endpoint and here AB dot post because we
03:56 - are sending the user's body in here
04:00 - users and login and it's going to be a
04:05 - synchronous process and we are going to
04:08 - use request response and now in here we
04:16 - are going to create out on it if an
04:18 - undefined
04:19 - user-defined method in here so for this
04:22 - we are going to use Const user
04:27 - first we're going to use its a
04:28 - synchronous plus also await we are going
04:32 - to perform on the user matter and also
04:36 - the matter that we are going to call
04:37 - it's a predefined method and we insert a
04:40 - user-defined mention we are going to
04:42 - define it let's say find my credentials
04:45 - and in here we are going to use two
04:49 - thing that is a Chris start body dot
04:54 - email and also the request dot Fadi the
05:01 - password so what it will return it will
05:06 - return a user so we are going to use the
05:10 - same thing corns future and in here and
05:16 - that's it and then we are going to
05:18 - create a catch block and provide
05:23 - response let's say response status for
05:30 - hundred percent so now we have to define
05:36 - this new function or a method so in here
05:39 - we are in the dividual chairs we are
05:42 - going to defining so in here user schema
05:46 - as we are defining it into a model or an
05:51 - kima so we have to use the statics and
05:56 - the method name that is find by creating
06:03 - seals and in here it's an a synchronous
06:08 - process oh thank you
06:10 - sink and in here we are going to provide
06:13 - email and password and now we are going
06:21 - to give form so in here we are going to
06:25 - find a user by the find one method so we
06:30 - are going to use try and catch block so
06:32 - in here when you use Const user
06:36 - a bit user dot find one and the object
06:50 - it is email in the condition so now if
06:54 - there is a user if no if there is no
06:57 - user then we are going to throw and add
06:59 - it so and edit or new error and if there
07:09 - is and like if there is an user we're
07:14 - simply going to check or compare the
07:17 - password that is given by the user with
07:20 - possibilities being stored in the read
07:23 - time in the Normandy B so in here we are
07:27 - going to use following it's in a
07:32 - synchronous function that is a wait big
07:36 - crypt taught to verify no dot compared
07:41 - and in here we are going to provide the
07:44 - request sorry password and the user dot
07:54 - password for wanting more that yeah
07:58 - that's it user dot password and in here
08:03 - it's provide its return true and false
08:07 - for it's a boolean so is match so if it
08:14 - is not match if not is match then we are
08:20 - again going to try an error and if it is
08:30 - it is make it is being matched and we
08:32 - are going to return the user so in here
08:38 - in the catch block we are going to
08:39 - simply write at worst an error it is
08:46 - return
08:49 - unable to login in this file we are
09:00 - going to symbol like response back
09:04 - responds back with the status 200 and
09:09 - the user that is the user and yeah
09:16 - that's it now we are going to check our
09:20 - function so let's move on to the postman
09:25 - and we are going to create a new request
09:29 - in here we can create a new request at
09:32 - request in here log in usage and it's
09:38 - going to be saving and it's it is going
09:44 - to be a post request so we are going to
09:47 - arrive first and it's the localhost 3000
09:52 - users log in and then we are going to
09:55 - simply copy it from here
09:58 - I'm sorry you copy it from here email
10:03 - and classroom and just paste into our
10:08 - foot 40 we're going to select it raw and
10:12 - also the Chasen and in here we are going
10:16 - to provide email and password now let's
10:19 - look at we are going to get the music
10:25 - back or not
10:26 - yeah we can see that we are got the user
10:29 - back now if we like if we rung out our
10:35 - encrypt our passwords now if we same
10:37 - that we can see unable to log in so it's
10:41 - very easy to do but there is a caveat in
10:45 - this that is in here in the postman if
10:48 - we like create the user with the same
10:51 - email we can see that it will it is
10:54 - going to create the same user but it
10:58 - will also give the message
11:00 - Oh once again maybe yeah maybe do Cheers
11:07 - and a mail yeah it will handle the if we
11:15 - save the user with the same email and it
11:19 - will be handled by the MongoDB
11:20 - that it will give the Arabs so it's like
11:23 - three it's very helpful or a handful so
11:27 - now we are going to see one is one thing
11:30 - that is called JWT data JSON web token
11:33 - so now in here for getting the profile
11:37 - or it will be changed with getting a
11:40 - profile so whenever the user is going
11:43 - going to like create a user or log in
11:46 - with the user then they can see the dear
11:50 - profile not like whenever we click on
11:53 - when we will be like click on this
11:56 - endpoint hit on this endpoint and they
11:59 - can say it or yeah this functionality is
12:03 - going to be changed in here
12:05 - so for using this or for understanding a
12:08 - whole point of this video we are going
12:10 - to install NPM install chase and wave
12:16 - token so what it will do like whenever
12:21 - we like whenever we create a user it is
12:25 - going to be like save a token it will be
12:30 - saved a token in the MongoDB and it will
12:35 - be sent back to the client and whenever
12:38 - the client is going to use any
12:42 - functionality then they are going to use
12:44 - the same token that is being here in the
12:47 - client side and get authenticated to
12:51 - perform any functionality so for
12:54 - understanding this whole thing we are
12:56 - going to like see how it can be done so
13:02 - now as the tokens is going to be save
13:07 - into our module so we are going to
13:09 - create a new property that is tokens and
13:14 - going to be a aerator because a user can
13:18 - get more than one token at the different
13:23 - point of time or whenever they uses
13:26 - different devices so it's an token of
13:30 - tokens of an array and it's going to be
13:33 - in token and in here it's going to be
13:37 - like type of string and it is required
13:52 - so now in here whenever we save it like
13:56 - now we are going to use and like for
13:59 - this user only a new method or a user
14:04 - different method we are going to create
14:06 - it is like any any name that you can do
14:09 - it like it generate a token in here in
14:13 - this function we're going to generate
14:14 - and you token for this particular user
14:17 - so I am going to copy this name from
14:21 - here and we are going to define it into
14:23 - our Thibodeau chairs so in here let's
14:29 - say here I am going to create it like
14:31 - user schema but we are not going to use
14:35 - the schema method or aesthetics we are
14:38 - going to use for Ted particular user so
14:41 - in here we are we have given the user
14:43 - schema dot methods and the name our
14:49 - token and it's going to be in a
14:53 - synchronous process and now we can
14:58 - define it here so in here we are going
15:02 - to take the user that is cost usually is
15:05 - equal to this it provides a document
15:08 - that we are going to perform the
15:10 - functionality and now if we are going to
15:14 - use the big guy in the JSON web token so
15:18 - in here we are going to create a new
15:21 - cause let's say JWT
15:23 - and we are going to require it
15:26 - from JSON web token and now we are going
15:33 - to define how we are going to use a
15:35 - method of JSON web token so await it's a
15:39 - synchronous puzzles so have a JWT and we
15:44 - are going to sign because this method
15:46 - will provide a token so JWT dot sign and
15:52 - it still need to or like arguments
15:58 - parameters first parameter is the
16:00 - payload so the payload will be the ID so
16:06 - the ID of the user so we can get from
16:09 - the user dot ID but the user that ID is
16:16 - an object ID so we are going to change
16:18 - it and convert it into the to string
16:22 - method now the second parameter will be
16:29 - the one second the second parameter will
16:35 - be the secret or private key can be
16:38 - anything but I'm going to use this is it
16:41 - is going to be like it is going to be a
16:43 - private 14 here I'm going to simply
16:45 - write it this is my new course so the
16:52 - next argument can be the expires in yeah
17:03 - that's it so now it's going to return a
17:06 - token
17:08 - so let's write int with this from it
17:12 - like it's going to return a token now in
17:15 - here we are going to save it or the
17:19 - concatenate in the user dot tokens so
17:23 - user dot tokens user
17:26 - tokens tot contact the token
17:35 - and now just we are going to user in
17:38 - here so the await user dot save and
17:45 - return the token because it is going to
17:49 - be like response back to the plain sight
17:52 - so that's it yeah this function is
17:56 - completely it is right but we are going
17:59 - to look into it
18:01 - so in here it's going to like return our
18:06 - token through cons token of eight and in
18:11 - here we are going to perform all the
18:13 - response back with two teens the user
18:16 - and token yeah now let's see that in
18:23 - action so in here we are going to see
18:28 - login create user and all if we use
18:34 - Jessica and we are going to change the
18:39 - email to Jessica to Alex and name - Alex
18:42 - no if we save it
18:47 - yeah it's giving an error because now we
18:51 - have changed mortally in here so in here
18:54 - first we have like till eight our user
18:57 - in here from here then we can see that
19:01 - it is required result you can see now
19:06 - that user is being saved with like
19:10 - tokens and we are going to give back to
19:15 - the token token also now same thing we
19:19 - are going to provide to the login also
19:22 - because in here also the token will be
19:25 - generated and send back to the client
19:27 - so in here we are going to use cost
19:29 - token is equal to the weight and we are
19:35 - going to use in the user user dot
19:39 - generate auth token and we are sending
19:44 - that fit user and talk
19:52 - now if we login with this email and
19:55 - password so we can see in the X in X M
20:00 - so in here we are going to provide email
20:03 - password now if we send it back we are
20:07 - going to see that two tokens is ancient
20:11 - rated in here and and the latest token
20:17 - that is this one is going to send back
20:20 - to the client side now one thing is here
20:24 - that we are giving the plying so much
20:27 - information e we are going to provide
20:29 - like password and tokens of all the
20:32 - tokens that are being there in tauranga
20:35 - TV so we are going to let sort in the
20:39 - like hide the values or hide the
20:42 - information from the user because it's
20:47 - for the security purpose so for doing
20:48 - this we are going to use another method
20:51 - but it is a predefined we can say
20:54 - because in here we are going to use the
20:58 - user schema dot methods because we are
21:02 - going to use the method into a
21:04 - particular user and that's how the
21:08 - writing that I'm going to do is the same
21:10 - thing you have to use to it to Jason
21:14 - because this means that whenever we
21:18 - response back to the client in here it
21:23 - is being converted into Jason dot
21:26 - stringify so in here we are just going
21:30 - to like performed an additional
21:32 - functionality in here because it is same
21:35 - as a json stringify but we are adding
21:38 - some more functionality into this so for
21:42 - using this we are going to just use the
21:46 - following it is you user means function
21:52 - shift user function and now in here
22:00 - we are going to the say cast user is
22:05 - equal to this dot we are going to change
22:09 - into an object so for doing this this
22:12 - dot to object and in here we are going
22:16 - to delete delete user dot faso that
22:20 - because that that don't really need it
22:22 - and also delete the tokens and and just
22:31 - return the user yeah now if we go into
22:39 - our postman and run it again this
22:44 - endpoint we can see that it's going to
22:49 - like just like give the user's name as
22:53 - an email and let its token that is being
22:57 - generated now we are going to use the
23:00 - tokens that are being saved in the mu mu
23:03 - DV and use into the another endpoints
23:06 - like in here users start users info but
23:10 - the user don't want to see another user
23:12 - profile so it's going to be a user
23:16 - profile matter so we are going to change
23:19 - the endpoint user slash me and now for
23:25 - looking into a user's profile we are
23:28 - going to use that token specifically so
23:32 - we are going to use a term that is
23:35 - called a middleware so that means it
23:39 - let's say the new function or method
23:43 - that we named art is going to run before
23:47 - this functionality so for doing this we
23:53 - are going to create a new like for you
23:56 - got again we are going to create a new
23:58 - folder let's say mitigation and in here
24:04 - we are going to create a new file let's
24:07 - say art
24:08 - torches so in here what can we do so
24:15 - let's say we are going to create a Const
24:18 - art and it's going to be nothingness
24:22 - processed and also we are going to
24:26 - export fact with a file so we are going
24:29 - to use module dot exports the odd
24:34 - function and we are going to use in this
24:41 - file so we're going to use Const art
24:47 - sequel to require it from chart chart
24:51 - slash dot slash middleware and art yeah
25:01 - so what's to be done in this method so
25:07 - now in here
25:08 - it's a middleware but it's used same
25:11 - functionality as the request/response
25:14 - and also the next because the next is
25:18 - used for like for going to another
25:20 - elephant yeah now in here first we are
25:25 - going to get token from here so for
25:29 - getting the token we are going to use
25:31 - cons token and it's going to be in the
25:35 - request dot header and we are going to
25:40 - talk about this later
25:41 - authorization and also one thing called
25:47 - replace because thought radiation is
25:50 - being used as a stream so we are going
25:54 - to replace a barrier barrier space
25:59 - string with nothing
26:03 - yeah that's it the token is fin
26:06 - generated here no we are going to verify
26:10 - this token verify this token and
26:13 - generate the ID so Const decode
26:20 - and in here we are going to use the JWT
26:26 - method so we are going to require it
26:28 - from JWT require it from JSON web token
26:36 - so when you hear the JWT verify verify
26:43 - and token touches of token and also the
26:48 - segreto public key that is this is my
26:54 - new course
26:57 - now in this decode there is the ID of
27:02 - the user so from here we can see if
27:07 - there is a user not so for looking into
27:11 - the user we are going to simply say like
27:13 - we are going to use a weight matter and
27:16 - also we are going to use your model so
27:18 - for this again we are going to use a
27:23 - user model or import it from the TV file
27:29 - so require it from require it from dot
27:35 - slash dot dot slash utils DB yeah now we
27:50 - get the usage and after getting user we
27:52 - can use find one method in here we are
27:56 - going to provide ID that is ID is - the
28:03 - token decode dot ID and also we are
28:10 - going to verify with the tokens that is
28:13 - paying here in the mumbles normal TV so
28:17 - for that we are going to use tokens dot
28:23 - token and token
28:29 - yeah that's it
28:32 - now if there is a user then it will
28:35 - perform the operations or return back
28:38 - with the user now if there is no user
28:44 - then we are say safely to say like it is
28:48 - going to be a try an adder and thrown
28:53 - you added so requests throughout user is
28:59 - equal to users now there will be a catch
29:05 - block and here we are going to response
29:08 - back response that with status
29:16 - fluorophore and send back wait error 14
29:32 - erin added in authentication
29:43 - it's going to be in string so we are
29:46 - going to say with like this now if it is
29:49 - run then we are going to use the next
29:51 - method so it will go to the end point
29:54 - after there so now in here in Epcot
29:59 - chairs in here - all in this one we are
30:07 - getting the user if is right so there is
30:11 - no need of this if we are going to
30:14 - simply like right request dot users yeah
30:20 - that's it now if we go to our postman we
30:32 - are going to use the end point of this
30:37 - gate users but also we are going to use
30:41 - a chooses the profile it will want to so
30:45 - let's say we are going to use clips so
30:47 - any headers is one thing called uh try
30:51 - this and at the same thing that we have
30:52 - written in the port but in this key it
30:56 - is a value so the value will be the new
31:03 - one that we have used latest like
31:06 - request this token is going to be used
31:08 - in here and it's going to be written for
31:13 - the bearer and like this that's why we
31:18 - have used that to replace the fader with
31:21 - nothing at all so now if we run days we
31:27 - are going to get back the users or a
31:29 - profile so finger plus yeah we get the
31:35 - profile back yeah that's it that's how
31:39 - we can do the getting the profile of any
31:43 - user so now one more thing remaining
31:47 - that is how can we log out from a system
31:51 - so for logging what we are going to
31:53 - create a new
31:55 - a new what new endpoint that is users
32:03 - and lava so in here we are going to use
32:10 - the quest and response and also we are
32:13 - going to use the odds middleware because
32:15 - after authenticating then we are going
32:18 - to remove it from the from the they can
32:23 - be lowered from the devices so in here
32:26 - we are going to see how it can be done
32:29 - so for this it's going to return a token
32:34 - so that they can be logout from the
32:37 - system so for this we are also going to
32:42 - request dot token is equal to token so
32:50 - now in here we are going to see how it
32:54 - can be done so in here we are going to
32:57 - simply say like request no first thing
33:00 - we are going to also use a try and catch
33:04 - block and in here if it is right and it
33:09 - is like response dot status of 500 and
33:14 - send back so in here we are going to use
33:19 - request dot users our user dot tokens
33:25 - and now we are going to use request
33:30 - towards user to our tokens dot filter
33:38 - because it's an error and it's going to
33:41 - read take token it's really wise and if
33:46 - we're going to see a token talk talking
33:50 - is not equal to 30 quiz token then it's
34:00 - going to return all the tokens that is
34:02 - not in the request or token now we are
34:06 - going to save it again
34:08 - request await request sorry await big
34:12 - waste dot user dot save and response
34:22 - tech with the status of 200 and send
34:29 - back with request dot user yeah that's
34:36 - it I have already created a new logout
34:42 - user get endpoint and you can see that I
34:45 - have provided the authorization and also
34:48 - we can see that we can get the alex at
34:51 - gmail.com like the user that we are
34:54 - going to get and we can see in here in
34:57 - our mongoose
34:59 - plus we have to replace it and now you
35:03 - can see to only few objects are there
35:06 - now if we run again this file and we
35:11 - have to also change this token so let's
35:14 - say i'm going to take this token from
35:17 - here and just take yeah now if I copied
35:28 - from here and paste it in here and again
35:35 - send it back we get the user and if we
35:41 - refresh it here again you can see that
35:45 - we will get only one object yeah it's
35:49 - how we can logout from any devices we
35:54 - can also use the like Netflix users like
35:58 - if we want to logout from different
36:02 - devices we can simply write in here same
36:06 - thing but we can change here like
36:09 - request dot user dot tokens is equal to
36:17 - an array so it will for the same thing
36:20 - but it will
36:22 - logout from all the devices yeah so
36:25 - that's it
36:26 - in this video in this video we have seen
36:28 - how can we add the security and also
36:32 - authenticate the user and how can we see
36:37 - that any other functionality can be
36:38 - generally to the authentication yeah
36:42 - that's it thank you

Cleaned transcript:

hi in this video we are going to add new security rules and authenticate the user so for now the password field is filled with the plain text so they are going to change it into the random set of values for doing this we are going to use a new library that is called NPM that is called big crib chairs so I have already installed it using NPM I big crypt Jas big crib chairs and here I have also used pip crypt is equal to require big trip chairs so in here we are going to use a schema method that it provide non whisper behind that is user schema dot free it means that and whenever a new method is to be called it will be called p4h that is whenever we use the save matter it will be called before it and it's a synchronous process so we are going to use a sink process and it uses es before es6 function syntax so we are going to use async function and in here we are going to use the parameter next which is called whenever the upper whenever the upward functionality will be done so in here we are going to use the cost user is equal to this it dis provides the document that is going to be saved in here so in here a user has a password so whenever a user pothole is being changed then we are going to run this if statement so in here if user dot is modified in the in here we are going to just say the field that is password any here we are going to use the bcrypt so what's pink change that is the password being changed so user dot password is equal to it's a synchronous process so we willingly acquaint you with await and in here we are going to use big crypt method that is has a name here the string that is the request or password that we are going to change and how many times we are going to run this algorithm that is like it's a stable that is very aware if you are going to use eight times so now that's it by doing this we can see if the password is being saved as a random set of values so for looking for saying this we are going to use the postman in here and we are going to create a new new fire profile that is Jesse Capen and now if we run this file we can see in here that the password is being stored as a random set of values now that's being done now we have to login with the credentials that is being given like email and password and now we are going to log in with this email and password but the password is being as a random set of values that has been provided by the bakery chairs so for doing this we are going to create a new endpoint in here in app tortious so in here we are going to create a new endpoint and here AB dot post because we are sending the user's body in here users and login and it's going to be a synchronous process and we are going to use request response and now in here we are going to create out on it if an undefined userdefined method in here so for this we are going to use Const user first we're going to use its a synchronous plus also await we are going to perform on the user matter and also the matter that we are going to call it's a predefined method and we insert a userdefined mention we are going to define it let's say find my credentials and in here we are going to use two thing that is a Chris start body dot email and also the request dot Fadi the password so what it will return it will return a user so we are going to use the same thing corns future and in here and that's it and then we are going to create a catch block and provide response let's say response status for hundred percent so now we have to define this new function or a method so in here we are in the dividual chairs we are going to defining so in here user schema as we are defining it into a model or an kima so we have to use the statics and the method name that is find by creating seals and in here it's an a synchronous process oh thank you sink and in here we are going to provide email and password and now we are going to give form so in here we are going to find a user by the find one method so we are going to use try and catch block so in here when you use Const user a bit user dot find one and the object it is email in the condition so now if there is a user if no if there is no user then we are going to throw and add it so and edit or new error and if there is and like if there is an user we're simply going to check or compare the password that is given by the user with possibilities being stored in the read time in the Normandy B so in here we are going to use following it's in a synchronous function that is a wait big crypt taught to verify no dot compared and in here we are going to provide the request sorry password and the user dot password for wanting more that yeah that's it user dot password and in here it's provide its return true and false for it's a boolean so is match so if it is not match if not is match then we are again going to try an error and if it is it is make it is being matched and we are going to return the user so in here in the catch block we are going to simply write at worst an error it is return unable to login in this file we are going to symbol like response back responds back with the status 200 and the user that is the user and yeah that's it now we are going to check our function so let's move on to the postman and we are going to create a new request in here we can create a new request at request in here log in usage and it's going to be saving and it's it is going to be a post request so we are going to arrive first and it's the localhost 3000 users log in and then we are going to simply copy it from here I'm sorry you copy it from here email and classroom and just paste into our foot 40 we're going to select it raw and also the Chasen and in here we are going to provide email and password now let's look at we are going to get the music back or not yeah we can see that we are got the user back now if we like if we rung out our encrypt our passwords now if we same that we can see unable to log in so it's very easy to do but there is a caveat in this that is in here in the postman if we like create the user with the same email we can see that it will it is going to create the same user but it will also give the message Oh once again maybe yeah maybe do Cheers and a mail yeah it will handle the if we save the user with the same email and it will be handled by the MongoDB that it will give the Arabs so it's like three it's very helpful or a handful so now we are going to see one is one thing that is called JWT data JSON web token so now in here for getting the profile or it will be changed with getting a profile so whenever the user is going going to like create a user or log in with the user then they can see the dear profile not like whenever we click on when we will be like click on this endpoint hit on this endpoint and they can say it or yeah this functionality is going to be changed in here so for using this or for understanding a whole point of this video we are going to install NPM install chase and wave token so what it will do like whenever we like whenever we create a user it is going to be like save a token it will be saved a token in the MongoDB and it will be sent back to the client and whenever the client is going to use any functionality then they are going to use the same token that is being here in the client side and get authenticated to perform any functionality so for understanding this whole thing we are going to like see how it can be done so now as the tokens is going to be save into our module so we are going to create a new property that is tokens and going to be a aerator because a user can get more than one token at the different point of time or whenever they uses different devices so it's an token of tokens of an array and it's going to be in token and in here it's going to be like type of string and it is required so now in here whenever we save it like now we are going to use and like for this user only a new method or a user different method we are going to create it is like any any name that you can do it like it generate a token in here in this function we're going to generate and you token for this particular user so I am going to copy this name from here and we are going to define it into our Thibodeau chairs so in here let's say here I am going to create it like user schema but we are not going to use the schema method or aesthetics we are going to use for Ted particular user so in here we are we have given the user schema dot methods and the name our token and it's going to be in a synchronous process and now we can define it here so in here we are going to take the user that is cost usually is equal to this it provides a document that we are going to perform the functionality and now if we are going to use the big guy in the JSON web token so in here we are going to create a new cause let's say JWT and we are going to require it from JSON web token and now we are going to define how we are going to use a method of JSON web token so await it's a synchronous puzzles so have a JWT and we are going to sign because this method will provide a token so JWT dot sign and it still need to or like arguments parameters first parameter is the payload so the payload will be the ID so the ID of the user so we can get from the user dot ID but the user that ID is an object ID so we are going to change it and convert it into the to string method now the second parameter will be the one second the second parameter will be the secret or private key can be anything but I'm going to use this is it is going to be like it is going to be a private 14 here I'm going to simply write it this is my new course so the next argument can be the expires in yeah that's it so now it's going to return a token so let's write int with this from it like it's going to return a token now in here we are going to save it or the concatenate in the user dot tokens so user dot tokens user tokens tot contact the token and now just we are going to user in here so the await user dot save and return the token because it is going to be like response back to the plain sight so that's it yeah this function is completely it is right but we are going to look into it so in here it's going to like return our token through cons token of eight and in here we are going to perform all the response back with two teens the user and token yeah now let's see that in action so in here we are going to see login create user and all if we use Jessica and we are going to change the email to Jessica to Alex and name Alex no if we save it yeah it's giving an error because now we have changed mortally in here so in here first we have like till eight our user in here from here then we can see that it is required result you can see now that user is being saved with like tokens and we are going to give back to the token token also now same thing we are going to provide to the login also because in here also the token will be generated and send back to the client so in here we are going to use cost token is equal to the weight and we are going to use in the user user dot generate auth token and we are sending that fit user and talk now if we login with this email and password so we can see in the X in X M so in here we are going to provide email password now if we send it back we are going to see that two tokens is ancient rated in here and and the latest token that is this one is going to send back to the client side now one thing is here that we are giving the plying so much information e we are going to provide like password and tokens of all the tokens that are being there in tauranga TV so we are going to let sort in the like hide the values or hide the information from the user because it's for the security purpose so for doing this we are going to use another method but it is a predefined we can say because in here we are going to use the user schema dot methods because we are going to use the method into a particular user and that's how the writing that I'm going to do is the same thing you have to use to it to Jason because this means that whenever we response back to the client in here it is being converted into Jason dot stringify so in here we are just going to like performed an additional functionality in here because it is same as a json stringify but we are adding some more functionality into this so for using this we are going to just use the following it is you user means function shift user function and now in here we are going to the say cast user is equal to this dot we are going to change into an object so for doing this this dot to object and in here we are going to delete delete user dot faso that because that that don't really need it and also delete the tokens and and just return the user yeah now if we go into our postman and run it again this endpoint we can see that it's going to like just like give the user's name as an email and let its token that is being generated now we are going to use the tokens that are being saved in the mu mu DV and use into the another endpoints like in here users start users info but the user don't want to see another user profile so it's going to be a user profile matter so we are going to change the endpoint user slash me and now for looking into a user's profile we are going to use that token specifically so we are going to use a term that is called a middleware so that means it let's say the new function or method that we named art is going to run before this functionality so for doing this we are going to create a new like for you got again we are going to create a new folder let's say mitigation and in here we are going to create a new file let's say art torches so in here what can we do so let's say we are going to create a Const art and it's going to be nothingness processed and also we are going to export fact with a file so we are going to use module dot exports the odd function and we are going to use in this file so we're going to use Const art sequel to require it from chart chart slash dot slash middleware and art yeah so what's to be done in this method so now in here it's a middleware but it's used same functionality as the request/response and also the next because the next is used for like for going to another elephant yeah now in here first we are going to get token from here so for getting the token we are going to use cons token and it's going to be in the request dot header and we are going to talk about this later authorization and also one thing called replace because thought radiation is being used as a stream so we are going to replace a barrier barrier space string with nothing yeah that's it the token is fin generated here no we are going to verify this token verify this token and generate the ID so Const decode and in here we are going to use the JWT method so we are going to require it from JWT require it from JSON web token so when you hear the JWT verify verify and token touches of token and also the segreto public key that is this is my new course now in this decode there is the ID of the user so from here we can see if there is a user not so for looking into the user we are going to simply say like we are going to use a weight matter and also we are going to use your model so for this again we are going to use a user model or import it from the TV file so require it from require it from dot slash dot dot slash utils DB yeah now we get the usage and after getting user we can use find one method in here we are going to provide ID that is ID is the token decode dot ID and also we are going to verify with the tokens that is paying here in the mumbles normal TV so for that we are going to use tokens dot token and token yeah that's it now if there is a user then it will perform the operations or return back with the user now if there is no user then we are say safely to say like it is going to be a try an adder and thrown you added so requests throughout user is equal to users now there will be a catch block and here we are going to response back response that with status fluorophore and send back wait error 14 erin added in authentication it's going to be in string so we are going to say with like this now if it is run then we are going to use the next method so it will go to the end point after there so now in here in Epcot chairs in here all in this one we are getting the user if is right so there is no need of this if we are going to simply like right request dot users yeah that's it now if we go to our postman we are going to use the end point of this gate users but also we are going to use a chooses the profile it will want to so let's say we are going to use clips so any headers is one thing called uh try this and at the same thing that we have written in the port but in this key it is a value so the value will be the new one that we have used latest like request this token is going to be used in here and it's going to be written for the bearer and like this that's why we have used that to replace the fader with nothing at all so now if we run days we are going to get back the users or a profile so finger plus yeah we get the profile back yeah that's it that's how we can do the getting the profile of any user so now one more thing remaining that is how can we log out from a system so for logging what we are going to create a new a new what new endpoint that is users and lava so in here we are going to use the quest and response and also we are going to use the odds middleware because after authenticating then we are going to remove it from the from the they can be lowered from the devices so in here we are going to see how it can be done so for this it's going to return a token so that they can be logout from the system so for this we are also going to request dot token is equal to token so now in here we are going to see how it can be done so in here we are going to simply say like request no first thing we are going to also use a try and catch block and in here if it is right and it is like response dot status of 500 and send back so in here we are going to use request dot users our user dot tokens and now we are going to use request towards user to our tokens dot filter because it's an error and it's going to read take token it's really wise and if we're going to see a token talk talking is not equal to 30 quiz token then it's going to return all the tokens that is not in the request or token now we are going to save it again request await request sorry await big waste dot user dot save and response tech with the status of 200 and send back with request dot user yeah that's it I have already created a new logout user get endpoint and you can see that I have provided the authorization and also we can see that we can get the alex at gmail.com like the user that we are going to get and we can see in here in our mongoose plus we have to replace it and now you can see to only few objects are there now if we run again this file and we have to also change this token so let's say i'm going to take this token from here and just take yeah now if I copied from here and paste it in here and again send it back we get the user and if we refresh it here again you can see that we will get only one object yeah it's how we can logout from any devices we can also use the like Netflix users like if we want to logout from different devices we can simply write in here same thing but we can change here like request dot user dot tokens is equal to an array so it will for the same thing but it will logout from all the devices yeah so that's it in this video in this video we have seen how can we add the security and also authenticate the user and how can we see that any other functionality can be generally to the authentication yeah that's it thank you
