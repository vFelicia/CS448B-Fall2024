With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - shell scripting tutorial for beginners
00:04 - in this video we will talk about
00:06 - debugging our script using bash right so
00:10 - sometimes when things don't go according
00:12 - to the plan you need to determine what
00:15 - exactly causes the script to fail and
00:18 - bash provides extensive debugging
00:21 - feature the most common is to start up
00:25 - the sub shell with the minus X option
00:29 - okay so there are some you know options
00:33 - we can use to debug our script now this
00:38 - is the script I have written in the last
00:40 - video and this is nothing but just
00:45 - looping around a while loop and printing
00:49 - the value of count right and if any
00:52 - error occurs if the error is - and if
00:56 - the script run successfully
00:58 - we are trapping this thing right this
01:02 - signal right so this was the previous
01:05 - script we were running now normally when
01:09 - you run the script you can just run it
01:11 - like this and it will execute you know
01:15 - perfectly fine and you need don't need
01:18 - to do anything but sometimes sometimes
01:21 - you forgot for example this parenthesis
01:26 - and when I run the script once again I
01:29 - can see the error right so this time
01:34 - it's pretty straightforward and it's a
01:36 - syntax error so it's a syntax error near
01:40 - unexpected token done which is on line
01:44 - 11 so 11 is here right and the problem
01:49 - is here but we are pretty close because
01:52 - the problem is in the while loop right
01:56 - so it's pretty close so bash will give
02:00 - you the you know error and even line
02:03 - number where the problem is coming but
02:05 - if you want to debug more you
02:08 - and use this minus X option so you can
02:13 - run the script with this and then you
02:15 - just need to give for example bash - X
02:21 - option right so just write bash - X and
02:25 - the name of your script and then press
02:27 - Enter
02:28 - and now you will be able to you know see
02:32 - more both operations so you can see what
02:37 - happens first
02:38 - the file is declared and then the trap
02:41 - is set and then the pre ID is created so
02:45 - PID is printed so whatever you know
02:48 - steps or commands are executed in
02:51 - sequence is going to print all of it
02:54 - right so you can see now we are in the
02:59 - you know this while loop and then the
03:04 - sleep of 10 second comes and then you
03:08 - know the counter is increased and then
03:11 - the you know value of count is printed
03:14 - right so whatever steps are happening
03:17 - it's printing everything so in this way
03:20 - whenever some problems occurs you will
03:24 - be straightaway be aware that your
03:27 - script is not working according to the
03:30 - plan and the problem is coming from here
03:33 - okay so this is one option you can use
03:36 - to debug your script so what is the
03:40 - option option is let me clear the
03:43 - terminal and the option is bash - X and
03:48 - then the name of your script so it will
03:50 - run your script with this debug option
03:53 - and it's going to give you step by step
03:56 - what's happening in your script okay now
04:00 - there is the similar option in your bash
04:03 - script also you can apply here so
04:06 - instead of writing minus X here for
04:09 - example you want to run this script like
04:11 - this and you don't want to use in the
04:13 - command line minus X right so how you
04:17 - can use this debugging inside your
04:20 - script so
04:21 - what you need to do is you need to use
04:23 - the set option okay
04:25 - so set option can be given like this so
04:29 - first of all you can write minus X at
04:34 - the top here also so after this
04:37 - hash-bang bin bash when you write minus
04:42 - X here then when you run the script it
04:46 - will give you the similar you know
04:48 - output okay
04:49 - so you can use minus X option at the top
04:53 - here also okay so this is one way of
04:57 - using minus X the other way was using
05:01 - the terminal right and let me show you
05:04 - the another way of using this minus X
05:09 - which is by using the set option so you
05:12 - can do set minus X and then it will
05:17 - start your debugging from the point
05:20 - where you set minus X okay so what is
05:25 - set minus X so set minus at X activates
05:31 - debugging from the point it's written
05:35 - right so from here
05:38 - activate debugging now there is one more
05:41 - option which is set loss X so you can
05:45 - just write set plus X at any point in
05:49 - the script so just try it like this and
05:51 - it deactivates or stop your debugging
05:55 - from this point wherever plus X is set
06:00 - okay so let me run the script once again
06:03 - and let's see what happens so you can
06:05 - see for two lines until the line six we
06:10 - saw this kind of you know debugging and
06:14 - then the script is running normally okay
06:18 - so it's not going to show you the you
06:21 - know debugging output kind of a thing
06:23 - okay so this is also how you can debug
06:27 - your script so there are basically three
06:31 - ways I have shown you one is by
06:34 - using Bosch minus X and then the script
06:37 - name of your script you can directly
06:39 - give in the terminal debugging option
06:42 - and then it will run fine other is by
06:45 - just adding minus X at the top after
06:49 - shabang bin forward slash bash and then
06:54 - this option then the editing option will
06:57 - be activated and by using the set minus
07:01 - X which starts the debugging from this
07:04 - point and set plus X which stop the
07:08 - debugging at the point where it's
07:10 - written okay so these are some of the
07:13 - debugging options you can use in your
07:17 - bash scripting I hope you have enjoyed
07:19 - this video please recommend subscribe
07:20 - and bye for now

Cleaned transcript:

hey guys welcome to the next video on shell scripting tutorial for beginners in this video we will talk about debugging our script using bash right so sometimes when things don't go according to the plan you need to determine what exactly causes the script to fail and bash provides extensive debugging feature the most common is to start up the sub shell with the minus X option okay so there are some you know options we can use to debug our script now this is the script I have written in the last video and this is nothing but just looping around a while loop and printing the value of count right and if any error occurs if the error is and if the script run successfully we are trapping this thing right this signal right so this was the previous script we were running now normally when you run the script you can just run it like this and it will execute you know perfectly fine and you need don't need to do anything but sometimes sometimes you forgot for example this parenthesis and when I run the script once again I can see the error right so this time it's pretty straightforward and it's a syntax error so it's a syntax error near unexpected token done which is on line 11 so 11 is here right and the problem is here but we are pretty close because the problem is in the while loop right so it's pretty close so bash will give you the you know error and even line number where the problem is coming but if you want to debug more you and use this minus X option so you can run the script with this and then you just need to give for example bash X option right so just write bash X and the name of your script and then press Enter and now you will be able to you know see more both operations so you can see what happens first the file is declared and then the trap is set and then the pre ID is created so PID is printed so whatever you know steps or commands are executed in sequence is going to print all of it right so you can see now we are in the you know this while loop and then the sleep of 10 second comes and then you know the counter is increased and then the you know value of count is printed right so whatever steps are happening it's printing everything so in this way whenever some problems occurs you will be straightaway be aware that your script is not working according to the plan and the problem is coming from here okay so this is one option you can use to debug your script so what is the option option is let me clear the terminal and the option is bash X and then the name of your script so it will run your script with this debug option and it's going to give you step by step what's happening in your script okay now there is the similar option in your bash script also you can apply here so instead of writing minus X here for example you want to run this script like this and you don't want to use in the command line minus X right so how you can use this debugging inside your script so what you need to do is you need to use the set option okay so set option can be given like this so first of all you can write minus X at the top here also so after this hashbang bin bash when you write minus X here then when you run the script it will give you the similar you know output okay so you can use minus X option at the top here also okay so this is one way of using minus X the other way was using the terminal right and let me show you the another way of using this minus X which is by using the set option so you can do set minus X and then it will start your debugging from the point where you set minus X okay so what is set minus X so set minus at X activates debugging from the point it's written right so from here activate debugging now there is one more option which is set loss X so you can just write set plus X at any point in the script so just try it like this and it deactivates or stop your debugging from this point wherever plus X is set okay so let me run the script once again and let's see what happens so you can see for two lines until the line six we saw this kind of you know debugging and then the script is running normally okay so it's not going to show you the you know debugging output kind of a thing okay so this is also how you can debug your script so there are basically three ways I have shown you one is by using Bosch minus X and then the script name of your script you can directly give in the terminal debugging option and then it will run fine other is by just adding minus X at the top after shabang bin forward slash bash and then this option then the editing option will be activated and by using the set minus X which starts the debugging from this point and set plus X which stop the debugging at the point where it's written okay so these are some of the debugging options you can use in your bash scripting I hope you have enjoyed this video please recommend subscribe and bye for now
