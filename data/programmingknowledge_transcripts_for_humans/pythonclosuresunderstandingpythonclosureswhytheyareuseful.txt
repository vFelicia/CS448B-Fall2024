With timestamps:

00:00 - in this video I'm going to show you how
00:02 - to use nested functions and closures in
00:05 - Python so let's get started
00:08 - so we will start with the nested
00:10 - functions so in Python we can define the
00:14 - nested function that means we can define
00:17 - a function inside a function so let me
00:20 - give you this example and in this
00:23 - example this function which is an outer
00:25 - function takes some text or message as
00:29 - the argument and I have defined one more
00:33 - function inside the outer function and I
00:36 - named it as inner function which prints
00:40 - the value of the text which we have
00:43 - passed in the outer function and we are
00:46 - just calling the inner function in the
00:49 - outer function scope so this function is
00:52 - declared locally inside the outer
00:55 - function and we are just calling this
00:58 - inner function inside this outer
01:01 - function now in other words we can also
01:03 - say that this outer function is an
01:06 - enclosing function and this inner
01:09 - function is the local function of this
01:14 - outer function and now when I call this
01:16 - outer function and let me run the code
01:18 - it's going to just print the value which
01:21 - we have passed as an argument so we have
01:24 - just passed this text argument which is
01:27 - once again passed to print statement of
01:30 - inner function and because we are
01:32 - calling this inner function inside this
01:34 - enclosing function it prints the value
01:37 - using this statement so when you declare
01:40 - one function inside the another function
01:43 - it's called the nesting of functions let
01:47 - me give you one more example of the
01:49 - nested function and I have defined this
01:52 - pop function which is our outer function
01:56 - or enclosing function and here I have
02:00 - defined a function called
02:02 - get last item which is our inner
02:06 - function or the local function to the
02:08 - pop function now this pop function takes
02:11 - the list as an argument
02:13 - we have defined a local function inside
02:15 - this pop function and what this local
02:18 - function get last item does is whenever
02:21 - you pass a list as an argument to this
02:23 - local function it's going to find out
02:26 - the last element of the list and return
02:30 - the last value of this list so here this
02:34 - is the last index of the list and then
02:37 - it's going to return the last item of
02:39 - the list which is passed as an argument
02:42 - now you may already know that you can
02:44 - call a function called remove on your
02:47 - lists which is used to remove some item
02:51 - from the list so I'm just calling remove
02:54 - function on the list and as an argument
02:56 - of the list I am passing the function
02:59 - which finds out the last element of the
03:02 - list so this is going to give us the
03:05 - last element of the list and this last
03:08 - element will be removed from the list
03:11 - and at last I am simply returning the
03:13 - list which is passed as an argument to
03:16 - the pop function so let's say this is
03:18 - the list on which we are working on
03:20 - which have five elements and we are
03:22 - calling pop function on this list again
03:25 - and again three times so let me run the
03:28 - code and let's see what happens
03:30 - so you can see when first pop is called
03:32 - it's going to remove the last element
03:34 - which is six from the list and then
03:37 - whenever the second pop is called it's
03:40 - going to remove the four and whenever
03:42 - the third pop method is called it's
03:45 - going to remove the three and so on so
03:48 - this is how you can use nested functions
03:50 - in Python now let's talk about the
03:53 - closures so I'm going to use the same
03:56 - nested function example which I have
03:59 - shown you earlier so this is the nested
04:01 - function now in order to convert this
04:04 - nested function into a closure what we
04:07 - need to do here is we need to return the
04:11 - inner function without the parentheses
04:14 - so the thing to note here is we don't
04:18 - need to return this inner function with
04:22 - the parentheses we need to return this
04:24 - inner function without any
04:27 - and this is the simplest example of the
04:30 - closure so what is a closure so a
04:33 - closure is a function whose return value
04:37 - depends on the value of one or more
04:40 - variable which are declared outside the
04:43 - function so in this example this text
04:46 - variable is declared outside the inner
04:49 - function and the value of this inner
04:53 - function depends on this text variable
04:56 - which is declared outside this inner
05:00 - function and that makes it a closure and
05:03 - closure have a special property that
05:06 - this closure function object remembers
05:09 - the value in the enclosing scope even if
05:14 - they are not present in the memory so I
05:17 - will explain you that but let me just
05:19 - show you how to use this outer function
05:22 - which now uses that closure so I'm going
05:25 - to declare a variable a which means
05:28 - because this outer function is returning
05:30 - the inner function that means a contains
05:33 - now the inner function so we can use
05:36 - this a as the function so in order to
05:39 - use this a as the function we can just
05:42 - call this a using the parentheses
05:45 - because this function doesn't take any
05:48 - arguments so we are not passing any
05:49 - argument here but we will just call it
05:52 - as a function because this outer
05:54 - function is just returning the inner
05:57 - function so let's run the code and let's
05:59 - see what happens when we run this code
06:02 - so you can see it prints hello which is
06:04 - printed using this print statement
06:06 - whenever we call this a function so if I
06:11 - just call this a function without the
06:13 - print method also it's going to print
06:16 - the hollow because here we are just
06:19 - using the print to print the text which
06:22 - is passed using the outer function now
06:26 - as I said closure is a function object
06:29 - that remembers the value in the
06:31 - enclosing scope even if they are not
06:35 - present in the memory so our enclosing
06:38 - scope is the outer function
06:40 - so even if we delete the outer function
06:42 - after declaring the statement and if the
06:47 - a contains this inner function and now
06:50 - let's say I'm going to just delete the
06:54 - outer function so this statement is
06:57 - going to delete the outer function and
06:58 - let me call this outer function once
07:00 - again after the deletion of this
07:02 - function that means it's going to throw
07:04 - us an error which will say that this
07:08 - function is already deleted so we cannot
07:11 - call at this function and now let's see
07:14 - the magic of the closure so even if we
07:18 - deleted the outer function and we cannot
07:20 - call the outer function but before
07:24 - deleting we have created a variable
07:26 - which contains the value of inner
07:29 - function and now I'm just calling the
07:31 - inner function with these parentheses
07:34 - and let's see what happens so I'm going
07:36 - to just run this code and it's going to
07:39 - print hello
07:40 - even after we have deleted the outer
07:43 - function so this means that this
07:45 - variable a is storing some kind of state
07:49 - of inner function even if the outer
07:52 - function is deleted and that is the
07:55 - magic of the closures so a closure
07:58 - function is able to remember the values
08:00 - which are declared outside the function
08:04 - also so this is our closure function and
08:07 - it's able to remember the value which
08:09 - are declared which is text outside the
08:12 - function and that's the beauty of
08:15 - closures now let me give you one more
08:17 - example of the closure so we will be
08:20 - able to understand it in a better way so
08:23 - here I have defined a function called
08:26 - nth power and I pass one argument here
08:30 - which is an exponent and inside this nth
08:34 - power function I have defined a local
08:36 - function which also takes one argument
08:39 - and then what it returns is is the power
08:44 - of whatever argument we pass here and
08:47 - this exponent is coming from the outer
08:50 - scope which is as an argument of the
08:53 - outer function
08:54 - and power so base is coming from the
08:58 - inner local function and the exponent is
09:01 - coming from the outer scope and we are
09:05 - just returning this power off which is a
09:08 - local function without any parentheses
09:11 - once again so this is very important you
09:13 - return the function without the
09:16 - parentheses now I can declare some
09:19 - variable first of all I'm going to
09:20 - declare a variable called square and
09:22 - then we will call this nth power
09:25 - function and we will just pass the value
09:28 - to so now this exponent becomes 2 here
09:32 - which is also passed to the inner
09:34 - function or the local function so here
09:37 - the value of 2 is saved that means
09:40 - whenever we call the square function
09:43 - it's going to give us the square of
09:46 - whatever number we are going to pass as
09:50 - an argument to this square so let's try
09:53 - eight months and let's see what happens
09:56 - so I'm going to just print and then call
09:59 - this square function which takes an
10:02 - argument and I'm going to first of all
10:05 - find out the square of two and I'm going
10:07 - to run this program and you can see it's
10:10 - going to give us the square of this two
10:13 - because now the square function is going
10:17 - to give us the square of the number
10:20 - which we will pass as an argument here
10:22 - so this 2 is passed to the inner
10:25 - function because this nth power gives us
10:28 - the inner function because it returns
10:30 - the inner function so now this to which
10:34 - we are passing in the square is passed
10:37 - as the base of this inner function and
10:40 - that's why we are getting the square of
10:43 - the number which we pass here so let's
10:46 - find out the square of some more numbers
10:49 - so I'm going to just pass 3 4 and 5 here
10:54 - and I'm going to run the code once again
10:56 - and you will see that it's going to give
10:59 - us the square of 2 3 4 and 5 so once
11:03 - again we have seen that the closure
11:06 - function
11:08 - is remembering the value which is
11:10 - declared outside the scope which is
11:12 - exponent now whenever I use this
11:16 - function once again so let me declare
11:17 - one more variable and this time I want
11:20 - to declare a cube here and once again
11:23 - I'm going to use the nth power to find
11:26 - out the cube of numbers so now this 3 is
11:29 - passed as an exponent here and this
11:32 - exponent is going to be passed inside
11:34 - the inner function so exponent value is
11:37 - 3 here that's why we are going to get
11:40 - the cube of the number which we are
11:42 - passing as the base argument of this
11:46 - inner function so now this is the inner
11:49 - function and we can once again call the
11:52 - print to call the cube method this
11:55 - should be cubed not cure so cube and
11:58 - then we can find out the cube of 2 and
12:01 - let's find out the cube of 3 4 and 5
12:06 - also so let's run the code once again
12:09 - and now you will see here the cube of
12:12 - the numbers are printed whatever numbers
12:15 - we are passing as an argument of this
12:18 - cube function so in a way this cube or
12:21 - the square variable is holding the
12:24 - status of the inner function and that's
12:28 - something we have also seen in the case
12:30 - of classes the classes are able to
12:32 - remember the state of the variables and
12:35 - the methods which are declared inside
12:38 - that losses so closures are sometimes
12:40 - used in place of the classes which only
12:44 - have usually one method inside them
12:47 - because this one method we can already
12:50 - define in the closure also and it's able
12:53 - to remember the state so closures can be
12:57 - used in place of the classes which have
12:59 - fewer method generally one method inside
13:03 - them the closures are also used heavily
13:06 - in the case of decorators in Python so
13:10 - decorators we are going to learn in the
13:13 - next video and I'm going to show you why
13:16 - decorator use closures and how to use
13:20 - closures we
13:21 - that decorators and the third advantage
13:24 - of closures are they are sometimes more
13:28 - efficient than the normal functions so
13:32 - the closures are sometime also used for
13:35 - the code efficiency and the faster
13:38 - working of code so this is how you can
13:41 - use closures in Python I hope you've
13:43 - enjoyed this video and I will see you in
13:46 - the next video

Cleaned transcript:

in this video I'm going to show you how to use nested functions and closures in Python so let's get started so we will start with the nested functions so in Python we can define the nested function that means we can define a function inside a function so let me give you this example and in this example this function which is an outer function takes some text or message as the argument and I have defined one more function inside the outer function and I named it as inner function which prints the value of the text which we have passed in the outer function and we are just calling the inner function in the outer function scope so this function is declared locally inside the outer function and we are just calling this inner function inside this outer function now in other words we can also say that this outer function is an enclosing function and this inner function is the local function of this outer function and now when I call this outer function and let me run the code it's going to just print the value which we have passed as an argument so we have just passed this text argument which is once again passed to print statement of inner function and because we are calling this inner function inside this enclosing function it prints the value using this statement so when you declare one function inside the another function it's called the nesting of functions let me give you one more example of the nested function and I have defined this pop function which is our outer function or enclosing function and here I have defined a function called get last item which is our inner function or the local function to the pop function now this pop function takes the list as an argument we have defined a local function inside this pop function and what this local function get last item does is whenever you pass a list as an argument to this local function it's going to find out the last element of the list and return the last value of this list so here this is the last index of the list and then it's going to return the last item of the list which is passed as an argument now you may already know that you can call a function called remove on your lists which is used to remove some item from the list so I'm just calling remove function on the list and as an argument of the list I am passing the function which finds out the last element of the list so this is going to give us the last element of the list and this last element will be removed from the list and at last I am simply returning the list which is passed as an argument to the pop function so let's say this is the list on which we are working on which have five elements and we are calling pop function on this list again and again three times so let me run the code and let's see what happens so you can see when first pop is called it's going to remove the last element which is six from the list and then whenever the second pop is called it's going to remove the four and whenever the third pop method is called it's going to remove the three and so on so this is how you can use nested functions in Python now let's talk about the closures so I'm going to use the same nested function example which I have shown you earlier so this is the nested function now in order to convert this nested function into a closure what we need to do here is we need to return the inner function without the parentheses so the thing to note here is we don't need to return this inner function with the parentheses we need to return this inner function without any and this is the simplest example of the closure so what is a closure so a closure is a function whose return value depends on the value of one or more variable which are declared outside the function so in this example this text variable is declared outside the inner function and the value of this inner function depends on this text variable which is declared outside this inner function and that makes it a closure and closure have a special property that this closure function object remembers the value in the enclosing scope even if they are not present in the memory so I will explain you that but let me just show you how to use this outer function which now uses that closure so I'm going to declare a variable a which means because this outer function is returning the inner function that means a contains now the inner function so we can use this a as the function so in order to use this a as the function we can just call this a using the parentheses because this function doesn't take any arguments so we are not passing any argument here but we will just call it as a function because this outer function is just returning the inner function so let's run the code and let's see what happens when we run this code so you can see it prints hello which is printed using this print statement whenever we call this a function so if I just call this a function without the print method also it's going to print the hollow because here we are just using the print to print the text which is passed using the outer function now as I said closure is a function object that remembers the value in the enclosing scope even if they are not present in the memory so our enclosing scope is the outer function so even if we delete the outer function after declaring the statement and if the a contains this inner function and now let's say I'm going to just delete the outer function so this statement is going to delete the outer function and let me call this outer function once again after the deletion of this function that means it's going to throw us an error which will say that this function is already deleted so we cannot call at this function and now let's see the magic of the closure so even if we deleted the outer function and we cannot call the outer function but before deleting we have created a variable which contains the value of inner function and now I'm just calling the inner function with these parentheses and let's see what happens so I'm going to just run this code and it's going to print hello even after we have deleted the outer function so this means that this variable a is storing some kind of state of inner function even if the outer function is deleted and that is the magic of the closures so a closure function is able to remember the values which are declared outside the function also so this is our closure function and it's able to remember the value which are declared which is text outside the function and that's the beauty of closures now let me give you one more example of the closure so we will be able to understand it in a better way so here I have defined a function called nth power and I pass one argument here which is an exponent and inside this nth power function I have defined a local function which also takes one argument and then what it returns is is the power of whatever argument we pass here and this exponent is coming from the outer scope which is as an argument of the outer function and power so base is coming from the inner local function and the exponent is coming from the outer scope and we are just returning this power off which is a local function without any parentheses once again so this is very important you return the function without the parentheses now I can declare some variable first of all I'm going to declare a variable called square and then we will call this nth power function and we will just pass the value to so now this exponent becomes 2 here which is also passed to the inner function or the local function so here the value of 2 is saved that means whenever we call the square function it's going to give us the square of whatever number we are going to pass as an argument to this square so let's try eight months and let's see what happens so I'm going to just print and then call this square function which takes an argument and I'm going to first of all find out the square of two and I'm going to run this program and you can see it's going to give us the square of this two because now the square function is going to give us the square of the number which we will pass as an argument here so this 2 is passed to the inner function because this nth power gives us the inner function because it returns the inner function so now this to which we are passing in the square is passed as the base of this inner function and that's why we are getting the square of the number which we pass here so let's find out the square of some more numbers so I'm going to just pass 3 4 and 5 here and I'm going to run the code once again and you will see that it's going to give us the square of 2 3 4 and 5 so once again we have seen that the closure function is remembering the value which is declared outside the scope which is exponent now whenever I use this function once again so let me declare one more variable and this time I want to declare a cube here and once again I'm going to use the nth power to find out the cube of numbers so now this 3 is passed as an exponent here and this exponent is going to be passed inside the inner function so exponent value is 3 here that's why we are going to get the cube of the number which we are passing as the base argument of this inner function so now this is the inner function and we can once again call the print to call the cube method this should be cubed not cure so cube and then we can find out the cube of 2 and let's find out the cube of 3 4 and 5 also so let's run the code once again and now you will see here the cube of the numbers are printed whatever numbers we are passing as an argument of this cube function so in a way this cube or the square variable is holding the status of the inner function and that's something we have also seen in the case of classes the classes are able to remember the state of the variables and the methods which are declared inside that losses so closures are sometimes used in place of the classes which only have usually one method inside them because this one method we can already define in the closure also and it's able to remember the state so closures can be used in place of the classes which have fewer method generally one method inside them the closures are also used heavily in the case of decorators in Python so decorators we are going to learn in the next video and I'm going to show you why decorator use closures and how to use closures we that decorators and the third advantage of closures are they are sometimes more efficient than the normal functions so the closures are sometime also used for the code efficiency and the faster working of code so this is how you can use closures in Python I hope you've enjoyed this video and I will see you in the next video
