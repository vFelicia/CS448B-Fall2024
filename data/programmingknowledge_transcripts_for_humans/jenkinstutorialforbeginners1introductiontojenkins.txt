With timestamps:

00:00 - Haggai is valuable discourse on Jenkins
00:03 - to troll for beginners in this first
00:05 - video I'm going to give you a brief
00:07 - introduction about Jenkins so let's get
00:10 - started so first of all what is Jenkins
00:13 - so Jenkins is an open source automation
00:17 - server written in Java one can also say
00:20 - that Jenkins is a CI server where CI
00:24 - stands for continuous integration and
00:26 - what is CI we are going to see in
00:29 - details in the next slide
00:31 - now what Jenkins does so Jenkins is used
00:36 - to detect the changes whatever you
00:39 - commit using your version control
00:41 - systems such as subversion or gate or
00:44 - any other versioning system and it
00:47 - performs some tasks on your code when it
00:51 - detects some changes in your code so
00:55 - what tasks Jenkins can perform
00:57 - repeatedly so Jenkins can perform for
01:01 - example if you have a code it can build
01:03 - your code it can test your code it can
01:06 - even deploy your code and even package
01:10 - or integrate your code whenever it
01:13 - detects some changes in your version
01:16 - control system or in your code now let's
01:20 - talk about some of the history behind
01:23 - the Jenkins
01:24 - so Jenkins is a fork of original Hudson
01:29 - project and it was under development
01:32 - since 2005
01:35 - now Hudson was the first release by a
01:38 - developer called kohsuke kawaguchi of
01:43 - Sun Microsystems and in 2010 Oracle
01:47 - bought Sun Microsystems due to this some
01:51 - naming dispute occurred and Hudson was
01:54 - renamed to Jenkins
01:57 - now Oracle continued the development of
02:00 - Hudson as a branch of the original and
02:04 - the Jenkins became the folk of Hudson
02:07 - now you can find more about Jenkins on
02:09 - Jenkins - CI dot o-r-g
02:13 - but nowadays this website is transferred
02:16 - to a website called Jenkins dot IO so if
02:20 - you enter this URL on your browser it
02:24 - will be redirected to Jenkins dot IO now
02:28 - before diving deep into Jenkins we need
02:31 - to understand what is CI or continuous
02:34 - integration so the basic concept of CI
02:38 - is a CI server continuously integrates
02:42 - newly checked in code into a build that
02:46 - we have already discussed so Jenkins
02:49 - detects those changes using the version
02:52 - control system and perform some tasks on
02:56 - them for example building or testing or
02:59 - integration tests or deploying those
03:01 - bills and so on so you can see in the
03:05 - second step of continuous integration I
03:08 - have written it runs unit tests and
03:11 - rejects the bill if they fail so a
03:14 - continuous integration system detects
03:17 - and runs the unit tests and it detects
03:21 - the failure and if a failure occurs
03:24 - during the unit text or integration
03:27 - tests or any kind of test it's going to
03:30 - reject that build and it's going to send
03:33 - the information to the developer or the
03:35 - maintainer of that code now for example
03:39 - your unit tests or whatever tests or you
03:42 - whatever build you are making is
03:45 - successful then a continuous integration
03:48 - system is going to deploy your build to
03:52 - other servers so continuous integration
03:55 - is also referred as build automation so
04:00 - you may ask what does this really mean
04:03 - so at regular interval or regular
04:07 - frequency ideally every commit you do in
04:11 - your version control system your
04:13 - continuous integration system is going
04:15 - to integrate your system that means all
04:19 - changes up until that point are combined
04:22 - into that project it's going to build
04:25 - your code so the code is come
04:27 - piled into executable or a package it's
04:31 - going to test your code so you can
04:34 - automate your test and you can write
04:36 - your test suit which is going to be run
04:38 - by your continuous integration system
04:41 - and if all the previous steps are
04:44 - successful your code will be deployed
04:48 - that means it will be loaded onto a
04:51 - system where the developer can interact
04:54 - with it so now let's talk about some of
04:57 - the benefits or the advantages of a CI
05:02 - system so CI system enables us in
05:06 - immediate but detection so bug will be
05:09 - detected if some test fails or your
05:13 - build fails and then the CA system is
05:15 - going to deploy your code if your test
05:19 - and your build passes so at any given
05:22 - point you have a deployable system now
05:26 - next is you have the record of
05:28 - evaluation of your project so for
05:30 - example how many times your build
05:33 - succeeded or your test succeeded and at
05:36 - what change or at what point your build
05:39 - failed or your unit tests failed it's
05:42 - going to you know get the record of
05:45 - everything so you can see it later and
05:48 - you can just view the quality of your
05:53 - code now the next benefit of a CI system
05:56 - is it's going to detect the system
05:59 - development problem at very early stage
06:02 - so because you can run Jenkins
06:06 - repeatedly for example our developer
06:09 - Jackson his code using gate or
06:12 - subversion or any versioning system it's
06:15 - going to run every job which you have
06:18 - made for example for building your code
06:21 - or your integration test or your unit
06:25 - test or any other test is going to run
06:28 - immediately and if anything fails you
06:33 - can even get the report of that using an
06:35 - email or it will generate some kind of
06:39 - message
06:40 - to your server so everybody will know
06:43 - some error has occurred during the build
06:46 - or the test of your code so everybody
06:50 - will be able to take the action at the
06:53 - earliest as a result you have the
06:56 - reduced risks of cost schedule and
06:59 - budget okay so when you detect the
07:02 - problem earlier obviously you are going
07:05 - to save on cost and your a time and your
07:08 - budget and the last but not the least is
07:11 - the measurable and visible code quality
07:14 - so using a Jenkins or any other CI
07:18 - system you will be able to you know
07:21 - visibly see the code quality of your
07:25 - project now let's see using some picture
07:28 - how does it all happens so you can see
07:33 - here are your developers which are going
07:36 - to develop some code and they are going
07:39 - to commit their code into the code
07:42 - repositories such as mercurial or gate
07:46 - or subversion and this commit of changes
07:51 - of code will be automatically detected
07:55 - by Jenkins so whenever developer commits
07:59 - his code is going to automatically be
08:03 - detected by the Jenkins and what Jenkins
08:07 - will do is going to run some tests
08:10 - whatever test you have created to run on
08:14 - Jenkins for example the unit test or
08:17 - integration test or system test or any
08:20 - other kind of test is going to just run
08:23 - those tests and give you the test
08:25 - results and if the build is successful
08:29 - and tests are successful it's going to
08:32 - just you know transfer your executable
08:37 - file into some artifact repository or
08:40 - it's going to deploy your software onto
08:43 - some other server for examples on some
08:47 - cloud server where you want to use it so
08:51 - here the code is committed
08:54 - and then at our regular interval
08:57 - the Jenkins tests the repository and
09:00 - then it runs the test on those codes
09:03 - using your repository and if everything
09:06 - is successful is going to create the
09:09 - executable and then it will save those
09:13 - executable in your artifact repository
09:15 - or it will deploy your code onto some
09:20 - other server so now let's talk about why
09:23 - Jenkins and not any other CI system
09:27 - there are many other CI system available
09:29 - but why Jenkins
09:31 - so in Jenkins you can create plugins so
09:35 - these plugins are very modular and
09:37 - Jenkins plugin extensively makes Jenkins
09:41 - to adopt too many systems so you can
09:45 - install Jenkins on many systems for
09:49 - example Linux or Windows or Mac
09:51 - operating operating system or any other
09:54 - system and it's plug-in system is really
09:58 - modular so you can install whatever
10:00 - plug-in you want to support that kind of
10:04 - build or that kind of functionality
10:06 - whatever you want now the second is
10:09 - Jenkins provide everything for a robust
10:13 - continuous integration system which
10:16 - helps a lot for team that practice agile
10:20 - now agile is software development
10:24 - techniques which are used widely across
10:28 - many companies and many are teams in
10:32 - order to coordinate their work so this
10:35 - is completely another topic agile
10:38 - methodology but if you are a software
10:41 - developer you may not know what agile is
10:45 - the next is Jenkins continuously
10:47 - provides access to the working copies of
10:50 - the software which supports the agile
10:53 - principle once again so if your team is
10:56 - working in an agile environment such as
10:59 - sprints or you have scrum or any other
11:04 - agile mythology then Jenkins will fit
11:07 - perfectly in your system the next is
11:11 - Jenkins is released under MIT license so
11:16 - it's an open-source CI system that means
11:21 - you can use it freely
11:23 - the next is there is a large support of
11:26 - community and thorough documentation so
11:30 - whatever you need to know about Jenkins
11:33 - most probably it will be answered by the
11:36 - support community or you will find it in
11:40 - the documentation of Jenkins and the
11:43 - last point is as I already stated that
11:46 - it's really easy to write a plug-in in
11:49 - Jenkins and if you write a plug-in in
11:52 - jenkin it can be used by other community
11:54 - members or everyone who will use Jenkins
11:57 - that makes Jenkins really powerful in a
12:00 - way that community members creates those
12:04 - plugins and they can be used by
12:06 - everybody who wants to use them and last
12:10 - point I want to add here is if anything
12:13 - goes wrong you can fix it so it's so
12:16 - modular Jenkins is so modular that you
12:19 - can fix your problem by yourself
12:22 - so what Jenkins can do Jenkins can
12:25 - generate reports it can integrate with
12:28 - many different version control systems
12:31 - it can push to various artifact
12:35 - repositories it can deploy directly to
12:39 - your production or test environment it
12:42 - will notify the stakeholders of the
12:44 - build status using email or any other
12:48 - messaging system and many more so this
12:52 - is the brief introduction about Jenkins
12:55 - and in the next video we will see how we
12:58 - can install the Jenkins on different
13:00 - operating systems and then we will go
13:03 - for them so I hope you've enjoyed this
13:06 - video please rate comment subscribe and
13:07 - bye for now

Cleaned transcript:

Haggai is valuable discourse on Jenkins to troll for beginners in this first video I'm going to give you a brief introduction about Jenkins so let's get started so first of all what is Jenkins so Jenkins is an open source automation server written in Java one can also say that Jenkins is a CI server where CI stands for continuous integration and what is CI we are going to see in details in the next slide now what Jenkins does so Jenkins is used to detect the changes whatever you commit using your version control systems such as subversion or gate or any other versioning system and it performs some tasks on your code when it detects some changes in your code so what tasks Jenkins can perform repeatedly so Jenkins can perform for example if you have a code it can build your code it can test your code it can even deploy your code and even package or integrate your code whenever it detects some changes in your version control system or in your code now let's talk about some of the history behind the Jenkins so Jenkins is a fork of original Hudson project and it was under development since 2005 now Hudson was the first release by a developer called kohsuke kawaguchi of Sun Microsystems and in 2010 Oracle bought Sun Microsystems due to this some naming dispute occurred and Hudson was renamed to Jenkins now Oracle continued the development of Hudson as a branch of the original and the Jenkins became the folk of Hudson now you can find more about Jenkins on Jenkins CI dot org but nowadays this website is transferred to a website called Jenkins dot IO so if you enter this URL on your browser it will be redirected to Jenkins dot IO now before diving deep into Jenkins we need to understand what is CI or continuous integration so the basic concept of CI is a CI server continuously integrates newly checked in code into a build that we have already discussed so Jenkins detects those changes using the version control system and perform some tasks on them for example building or testing or integration tests or deploying those bills and so on so you can see in the second step of continuous integration I have written it runs unit tests and rejects the bill if they fail so a continuous integration system detects and runs the unit tests and it detects the failure and if a failure occurs during the unit text or integration tests or any kind of test it's going to reject that build and it's going to send the information to the developer or the maintainer of that code now for example your unit tests or whatever tests or you whatever build you are making is successful then a continuous integration system is going to deploy your build to other servers so continuous integration is also referred as build automation so you may ask what does this really mean so at regular interval or regular frequency ideally every commit you do in your version control system your continuous integration system is going to integrate your system that means all changes up until that point are combined into that project it's going to build your code so the code is come piled into executable or a package it's going to test your code so you can automate your test and you can write your test suit which is going to be run by your continuous integration system and if all the previous steps are successful your code will be deployed that means it will be loaded onto a system where the developer can interact with it so now let's talk about some of the benefits or the advantages of a CI system so CI system enables us in immediate but detection so bug will be detected if some test fails or your build fails and then the CA system is going to deploy your code if your test and your build passes so at any given point you have a deployable system now next is you have the record of evaluation of your project so for example how many times your build succeeded or your test succeeded and at what change or at what point your build failed or your unit tests failed it's going to you know get the record of everything so you can see it later and you can just view the quality of your code now the next benefit of a CI system is it's going to detect the system development problem at very early stage so because you can run Jenkins repeatedly for example our developer Jackson his code using gate or subversion or any versioning system it's going to run every job which you have made for example for building your code or your integration test or your unit test or any other test is going to run immediately and if anything fails you can even get the report of that using an email or it will generate some kind of message to your server so everybody will know some error has occurred during the build or the test of your code so everybody will be able to take the action at the earliest as a result you have the reduced risks of cost schedule and budget okay so when you detect the problem earlier obviously you are going to save on cost and your a time and your budget and the last but not the least is the measurable and visible code quality so using a Jenkins or any other CI system you will be able to you know visibly see the code quality of your project now let's see using some picture how does it all happens so you can see here are your developers which are going to develop some code and they are going to commit their code into the code repositories such as mercurial or gate or subversion and this commit of changes of code will be automatically detected by Jenkins so whenever developer commits his code is going to automatically be detected by the Jenkins and what Jenkins will do is going to run some tests whatever test you have created to run on Jenkins for example the unit test or integration test or system test or any other kind of test is going to just run those tests and give you the test results and if the build is successful and tests are successful it's going to just you know transfer your executable file into some artifact repository or it's going to deploy your software onto some other server for examples on some cloud server where you want to use it so here the code is committed and then at our regular interval the Jenkins tests the repository and then it runs the test on those codes using your repository and if everything is successful is going to create the executable and then it will save those executable in your artifact repository or it will deploy your code onto some other server so now let's talk about why Jenkins and not any other CI system there are many other CI system available but why Jenkins so in Jenkins you can create plugins so these plugins are very modular and Jenkins plugin extensively makes Jenkins to adopt too many systems so you can install Jenkins on many systems for example Linux or Windows or Mac operating operating system or any other system and it's plugin system is really modular so you can install whatever plugin you want to support that kind of build or that kind of functionality whatever you want now the second is Jenkins provide everything for a robust continuous integration system which helps a lot for team that practice agile now agile is software development techniques which are used widely across many companies and many are teams in order to coordinate their work so this is completely another topic agile methodology but if you are a software developer you may not know what agile is the next is Jenkins continuously provides access to the working copies of the software which supports the agile principle once again so if your team is working in an agile environment such as sprints or you have scrum or any other agile mythology then Jenkins will fit perfectly in your system the next is Jenkins is released under MIT license so it's an opensource CI system that means you can use it freely the next is there is a large support of community and thorough documentation so whatever you need to know about Jenkins most probably it will be answered by the support community or you will find it in the documentation of Jenkins and the last point is as I already stated that it's really easy to write a plugin in Jenkins and if you write a plugin in jenkin it can be used by other community members or everyone who will use Jenkins that makes Jenkins really powerful in a way that community members creates those plugins and they can be used by everybody who wants to use them and last point I want to add here is if anything goes wrong you can fix it so it's so modular Jenkins is so modular that you can fix your problem by yourself so what Jenkins can do Jenkins can generate reports it can integrate with many different version control systems it can push to various artifact repositories it can deploy directly to your production or test environment it will notify the stakeholders of the build status using email or any other messaging system and many more so this is the brief introduction about Jenkins and in the next video we will see how we can install the Jenkins on different operating systems and then we will go for them so I hope you've enjoyed this video please rate comment subscribe and bye for now
