With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - Python tutorial for beginners in the
00:04 - last video we have seen how to use init
00:06 - method and self keyword in Python in
00:09 - this video also we will discuss more
00:12 - about init method and the self keyword
00:15 - so let's get started so here I have a
00:18 - very simple class called hello and in
00:21 - this class I have a method called in it
00:24 - and I'm just instantiating this class
00:27 - and creating an object out of this hello
00:30 - class now the first question which may
00:33 - arise is what if I don't want to use
00:37 - this self keyword you can see directly
00:40 - that there is a red squiggly line
00:43 - appears here which means an error and
00:45 - this we can also see when we run the
00:48 - program so when we run the program it's
00:50 - going to give us this error it says in
00:52 - it takes zero arguments but given one
00:56 - now you may ask why it's saying that we
01:00 - have given one argument to the
01:03 - initialization of this hello class so as
01:06 - I said in the last video that self is
01:09 - automatically passed when you initialize
01:12 - a class and that's why it says that one
01:15 - argument is given but in it takes zero
01:19 - argument because here we haven't given
01:22 - any argument inside these parentheses so
01:25 - self is absolutely important so you need
01:30 - to give the self now the second question
01:32 - you may ask is can I create multiple
01:35 - init method inside a class so let's see
01:38 - if it's possible or not so here I'm
01:40 - going to give this pass keyword which
01:43 - means that this init method is an empty
01:46 - method and let me create a second init
01:49 - method and this time I want to add one
01:53 - more parameter here let's say name ok so
01:58 - we have provided two init methods here
02:01 - and let's see what happens so this is
02:04 - the instantiation of class where I
02:06 - haven't given any argument to this
02:10 - instantiation so I'm going to run the
02:12 - program
02:13 - and what it says it says in it missing
02:16 - one required positional argument which
02:20 - is named so it turns out that it's not
02:24 - possible to provide multiple init
02:27 - methods in your Python class if you
02:32 - provide multiple init method in your
02:34 - Python class the init method which you
02:37 - define at last will be considered as the
02:40 - main init method and other will be
02:44 - overwritten okay so whatever init method
02:48 - you define at last that signature of
02:52 - init method will be valid and all the
02:55 - other init method which you will create
02:57 - will be overwritten by the last init
03:00 - method okay so let's provide the
03:03 - argument name here so I'm going to just
03:06 - provide one argument here and then run
03:09 - this code and it works perfectly fine
03:12 - okay let me just reverse this order so
03:16 - instead of using this init at the top I
03:19 - will use the init which doesn't take any
03:21 - parameter at the bottom now okay and we
03:25 - provided this argument and let's run the
03:29 - code and now once again we get the error
03:32 - which says in it takes one a positional
03:36 - argument but two were provided so one
03:39 - positional argument means that this in
03:42 - it only takes the self argument and
03:45 - nothing else but here self is provided
03:49 - automatically but we are providing an
03:51 - extra parameter here which is not
03:54 - required and that means this init which
03:57 - we have defined later is valid and this
04:01 - previous init is not valid so always
04:04 - remember it's not allowed to use
04:06 - multiple init method in the Python class
04:10 - but if you do this the last init method
04:13 - will be a valid init method and all the
04:17 - other init method will be the invalid
04:20 - init method now one more question you
04:22 - may ask here what if I want to create
04:26 - both kind of instances one which takes
04:29 - no argument here
04:31 - and other which takes one argument or
04:34 - multiple arguments here so the answer is
04:37 - in my previous video in which I have
04:40 - shown you how to provide default value
04:43 - to your arguments so let's say I provide
04:47 - a default value to my argument here now
04:51 - I will create two instances of the same
04:55 - class one takes no argument and other
04:59 - takes one argument and when I run this
05:02 - code no error appears here okay
05:05 - so if you want to create an init method
05:07 - with multiple parameters you can either
05:10 - use this default value for your init
05:15 - method parameters or what you can do
05:18 - here is you can use this parameter which
05:20 - takes a couple so in the previous video
05:23 - we have seen that we can provide an
05:26 - argument with Asterix in front of it and
05:29 - this means that we can provide multiple
05:32 - parameters to our method here and when
05:36 - we run the code it's also valid we can
05:39 - also provide multiple parameters here
05:42 - and it will also be totally valid so I'm
05:46 - going to run the program once again and
05:48 - you can see it's totally valid so if you
05:50 - want to provide multiple parameters to
05:53 - your init method you can use this kind
05:56 - of notation or you can provide the
05:58 - default value to your parameter or the
06:03 - last thing you can use is you can use
06:05 - for example this type of argument which
06:08 - takes the keywords so kW args here okay
06:13 - and this also we have seen whenever you
06:16 - use this kind of notation that means you
06:19 - want to provide the dictionary right key
06:22 - value pair so let me provide some kind
06:25 - of key value pair let's say name is
06:28 - equal to some kind of name here and then
06:31 - let me run the code and it's totally
06:34 - valid it doesn't give us any error so
06:36 - even though multiple init methods are
06:38 - not allowed
06:40 - Python you can use these type of
06:42 - notations in order to give variable
06:45 - length argument in your init method now
06:48 - let me just remove all the parameters
06:51 - from here and this instantiation from
06:54 - here also and let's take the next
06:57 - question so let's say I want to remove
07:01 - this pass keyword from here and here I
07:04 - want to initialize some values so self
07:08 - dot name is equal to let's say we will
07:12 - provide some name so I'm going to
07:14 - provide argument called name and self
07:19 - dot name is equal to name here and then
07:22 - let's say self dot age here and we
07:25 - provide some value which is not taken
07:29 - from the argument but we provide some
07:32 - static value here is it allowed yes it's
07:36 - totally allowed right so if you want to
07:39 - provide some default value for your
07:42 - attribute you can absolutely provide
07:44 - that without even passing it as an
07:47 - argument so it's not necessary that all
07:50 - the attribute values you need to provide
07:53 - from this argument list you can provide
07:56 - any default or static value here which
07:59 - is not coming as an argument so I hope
08:01 - that clarifies some more details about
08:04 - this init method thanks for watching I
08:07 - will see you in the next video

Cleaned transcript:

hey guys welcome to the next video on Python tutorial for beginners in the last video we have seen how to use init method and self keyword in Python in this video also we will discuss more about init method and the self keyword so let's get started so here I have a very simple class called hello and in this class I have a method called in it and I'm just instantiating this class and creating an object out of this hello class now the first question which may arise is what if I don't want to use this self keyword you can see directly that there is a red squiggly line appears here which means an error and this we can also see when we run the program so when we run the program it's going to give us this error it says in it takes zero arguments but given one now you may ask why it's saying that we have given one argument to the initialization of this hello class so as I said in the last video that self is automatically passed when you initialize a class and that's why it says that one argument is given but in it takes zero argument because here we haven't given any argument inside these parentheses so self is absolutely important so you need to give the self now the second question you may ask is can I create multiple init method inside a class so let's see if it's possible or not so here I'm going to give this pass keyword which means that this init method is an empty method and let me create a second init method and this time I want to add one more parameter here let's say name ok so we have provided two init methods here and let's see what happens so this is the instantiation of class where I haven't given any argument to this instantiation so I'm going to run the program and what it says it says in it missing one required positional argument which is named so it turns out that it's not possible to provide multiple init methods in your Python class if you provide multiple init method in your Python class the init method which you define at last will be considered as the main init method and other will be overwritten okay so whatever init method you define at last that signature of init method will be valid and all the other init method which you will create will be overwritten by the last init method okay so let's provide the argument name here so I'm going to just provide one argument here and then run this code and it works perfectly fine okay let me just reverse this order so instead of using this init at the top I will use the init which doesn't take any parameter at the bottom now okay and we provided this argument and let's run the code and now once again we get the error which says in it takes one a positional argument but two were provided so one positional argument means that this in it only takes the self argument and nothing else but here self is provided automatically but we are providing an extra parameter here which is not required and that means this init which we have defined later is valid and this previous init is not valid so always remember it's not allowed to use multiple init method in the Python class but if you do this the last init method will be a valid init method and all the other init method will be the invalid init method now one more question you may ask here what if I want to create both kind of instances one which takes no argument here and other which takes one argument or multiple arguments here so the answer is in my previous video in which I have shown you how to provide default value to your arguments so let's say I provide a default value to my argument here now I will create two instances of the same class one takes no argument and other takes one argument and when I run this code no error appears here okay so if you want to create an init method with multiple parameters you can either use this default value for your init method parameters or what you can do here is you can use this parameter which takes a couple so in the previous video we have seen that we can provide an argument with Asterix in front of it and this means that we can provide multiple parameters to our method here and when we run the code it's also valid we can also provide multiple parameters here and it will also be totally valid so I'm going to run the program once again and you can see it's totally valid so if you want to provide multiple parameters to your init method you can use this kind of notation or you can provide the default value to your parameter or the last thing you can use is you can use for example this type of argument which takes the keywords so kW args here okay and this also we have seen whenever you use this kind of notation that means you want to provide the dictionary right key value pair so let me provide some kind of key value pair let's say name is equal to some kind of name here and then let me run the code and it's totally valid it doesn't give us any error so even though multiple init methods are not allowed Python you can use these type of notations in order to give variable length argument in your init method now let me just remove all the parameters from here and this instantiation from here also and let's take the next question so let's say I want to remove this pass keyword from here and here I want to initialize some values so self dot name is equal to let's say we will provide some name so I'm going to provide argument called name and self dot name is equal to name here and then let's say self dot age here and we provide some value which is not taken from the argument but we provide some static value here is it allowed yes it's totally allowed right so if you want to provide some default value for your attribute you can absolutely provide that without even passing it as an argument so it's not necessary that all the attribute values you need to provide from this argument list you can provide any default or static value here which is not coming as an argument so I hope that clarifies some more details about this init method thanks for watching I will see you in the next video
