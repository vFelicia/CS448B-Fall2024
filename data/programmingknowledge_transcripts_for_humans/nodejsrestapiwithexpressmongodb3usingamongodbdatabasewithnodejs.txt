With timestamps:

00:00 - hi in this video we are going to learn
00:02 - about Mumbai TV so before getting
00:05 - started with MongoDB we have to know
00:07 - what is wrong Gordini well momo DB is a
00:11 - general-purpose document based
00:14 - distributed database built for modern
00:17 - application developers and for the cloud
00:20 - era and the data that is being here
00:26 - stored is stored as a JSON like
00:29 - documents and it's called as a non
00:33 - sequel database there is no schemas
00:36 - there is no structure here so it's very
00:40 - flexible compared to as a sequel
00:43 - database so let's start with signing up
00:49 - here or registering here so we are going
00:54 - to click on the Trifield button and here
00:59 - you can get started free after signing
01:03 - up you will go to the Atlas Base Cloud
01:08 - Atlas base server because we are going
01:12 - to use as a life as a production
01:16 - deployment basis so when you start free
01:23 - you have already sign up and after
01:27 - signing up after sign Emma signing up
01:31 - you will go to this space where you have
01:33 - to create a new project so let's say our
01:38 - project name is TV demo after that
01:47 - you will be redirected to the this space
01:52 - which called to give your member that's
01:55 - just not necessary we can create your
01:58 - create project after that you will be on
02:04 - this space where you have to select
02:06 - build a cluster here we are going to use
02:09 - create a cluster it is a free
02:13 - and we are going to use this cloud
02:17 - provider AWS and wherever you are
02:21 - select the nearest server after that in
02:28 - the cluster tier we are going to use
02:30 - free forever and there is no need you
02:36 - can change the name of your cluster if
02:38 - you want to now we are going to create a
02:41 - cluster it will take some time to create
02:47 - the cluster so now we are here and now
02:51 - we are going to see how can we get
02:53 - started with the Mumba Devi in our app
02:56 - well for app we have to use the Modi
02:59 - with driver that is very built and that
03:04 - he is being used here so in here we are
03:08 - going to use MongoDB driver so let's
03:11 - open our project now we are going to
03:18 - create a new project let's say let's say
03:26 - MongoDB demo now we are going to go to
03:29 - this MongoDB demo folder one sec yeah
03:37 - MongoDB demo now we are going to
03:41 - initialize the NPM using NPM any test
03:45 - one and now we are going to open our
03:53 - editor the Visual Studio code so for
04:02 - using the mumbo DB here we are going to
04:05 - install two things first one is MongoDB
04:15 - Express
04:21 - here you can see that the MongoDB and
04:24 - Express has been installed here so for
04:28 - starting this starting the project we
04:31 - are going to use in M node node app the
04:37 - file data I have not created right now
04:39 - and for their part we are going to
04:42 - create we are going to use Northmen
04:45 - Nordmann app so for Nordmann we are
04:51 - going to install it in the day of
04:56 - dependency part using NPM install test
05:03 - as safe tester safe test they're not
05:09 - moon now here we can see that in this
05:13 - page the connection has been made so for
05:16 - connecting it into the our app we are
05:19 - going to click on the connect and here
05:24 - you will see that there are some
05:28 - connection requirements are needed so
05:32 - first of all we are going to go to the
05:34 - database access here we are going to
05:40 - create a new user let's say instrument
05:45 - and let also generate a secure password
05:50 - and we are going to select read and
05:52 - write to any database now we are going
05:57 - to select the network access here we are
06:01 - going to add the IP address which is
06:05 - either add current IP address which is
06:07 - help to give the secure authentication
06:15 - now if we go to the our cluster section
06:22 - now we are going to connect now we are
06:27 - going to connect to the cluster
06:30 - for connection we are going to use the
06:32 - connector application here we are going
06:36 - to use this connection string so let's
06:41 - copy it let's copy it after copying it
06:46 - we are going to now into our app we are
06:52 - going to create a new file let's say app
06:54 - torches in here we are create the
07:00 - Express module or take the Express
07:04 - module from the Express and we are going
07:10 - to use the app and requiring the Express
07:16 - as a function and it will listen to the
07:23 - port 3000 for restarting the server so
07:29 - it's complete the server can be started
07:33 - but here we are going to use how to get
07:38 - started with the MongoDB so we are going
07:43 - to let's say we are going to create a
07:45 - new folder let's say utils in here we
07:51 - are going to create a new file let's say
07:53 - DB torches in here
07:59 - we have installed the MongoDB driver
08:03 - into our process so we are going to
08:05 - require it from the MongoDB and say
08:10 - MongoDB this is equal to require MongoDB
08:19 - in here there is some called
08:22 - client this we are going to require from
08:26 - it which is which is of property of it
08:33 - which is a file of it here which is a
08:36 - field of it
08:37 - so in here we are going to connect to it
08:45 - as a client for connecting we are going
08:49 - to use manga climb dot connect in here
08:53 - we are going to pass the URL so for
08:58 - passing it here we have used a password
09:03 - but as I have forgotten the password we
09:07 - only have to again require the passport
09:13 - for requiring it here we are going to
09:15 - edit it and edit the password here we
09:21 - are going to auto-generate it from here
09:24 - and we are going to require it from here
09:30 - let's update the user now in here there
09:39 - will be a URL so let's say here is the
09:41 - password and we are going to get a savvy
09:48 - string from the connection so here we
09:53 - are going to again copying it and let's
09:58 - say here Const URL is equal to this one
10:06 - so here we are going to cut from here
10:09 - and paste into it here the password
10:14 - after doing this we are going to use the
10:18 - URL as a parameter here and that's it we
10:28 - are going to connect from here it will
10:33 - take a callback function and it will
10:36 - take two arguments first one is error if
10:39 - there is and second one is the client
10:48 - and now if we say if there is error then
10:55 - return if there is no order let's
10:59 - consult our client base point now that's
11:06 - it if we start here from NPM run dev so
11:15 - if we run it it will say nothing
11:18 - what gives nothing that's because we
11:23 - have started that add file but we
11:25 - haven't connected with the dot DV dot
11:28 - J's file so for connecting it we have to
11:31 - like say all the code is here so before
11:38 - cutting or pasting it from here to here
11:42 - we can do this like we are going to
11:44 - require it from tor teutuls
11:51 - and get a DB file so if we run this now
11:59 - we can see that it will give the client
12:04 - back so here it returns the manga client
12:09 - all the things all the fields that are
12:12 - here now here we are going to see how
12:16 - can we deploy operation that is create
12:19 - read update and delete so for doing the
12:25 - crud operation we are going to use we
12:30 - are going to use the client and by
12:33 - client means we are going to create a
12:37 - new Const TV which take a client and TB
12:45 - and let's say our database name is the
12:49 - test so test is a database for the
12:55 - collection means for a table in the
12:58 - sequel eyes
12:59 - database we are here we are going to use
13:01 - the collection as a table so let's say
13:07 - the name is user users in here we are
13:12 - going to first use the insert means
13:15 - Korea how can we create a document and
13:19 - not let some so let's see if we are
13:22 - clear going to create a one document we
13:26 - are going to use the insert one method
13:29 - in this we are going to give an object
13:34 - let's say name and simile is 21 after
13:45 - that these returns are promised
13:47 - so for handling the promised we are
13:50 - going to use a 10 which takes a result
13:55 - which gives a result and we are going to
13:58 - console dot log the object it we have
14:02 - sent using result raised dot ops
14:06 - and if there is an error you can see it
14:09 - from here
14:09 - like e console dot log error now if we
14:19 - save it and see that there is one
14:26 - document that we have inserted it is
14:28 - this one and if we see in to our more
14:34 - atlas we are going to see in the
14:37 - collection and here we are going to see
14:42 - that there is a database it is called
14:44 - test and the document for a collection
14:50 - that is called users when talks
14:55 - huntsmen in between and the is so we can
15:00 - also use how can we insert more than one
15:05 - document you can do that by using
15:09 - another matter let's say
15:12 - do this by using a DB dot collection
15:15 - users users start insert many here we
15:27 - are going to use the array because we
15:31 - are sending more than one document so by
15:35 - doing this you can send more than one
15:38 - document let's say here we name is 21 or
15:50 - let's say twenty seven and another user
15:56 - let's say uncle is 25 so it will be a
16:08 - number so here also will be number so we
16:14 - have inserted two documents here now
16:17 - it's a promise so we have to use the
16:21 - promise sequence we are going to use 10
16:24 - and console.log the result that we have
16:30 - sent we will be using response dot ops
16:34 - and also we can catch data by using
16:38 - catch matter and let's say if there
16:41 - isn't any other you can console it now
16:45 - if we send it back we will see that we
16:53 - have sent two documents
16:55 - Renee and uncle now if we refresh it we
17:01 - will see that there is two documents
17:04 - winnie and uncle now we are going to see
17:12 - how can we find our wait any data so for
17:19 - reading a document we can do so by
17:25 - using another metric that is used it is
17:30 - T V dot collection users dot point if we
17:37 - are going to find one means we are going
17:39 - to find only one document we have to use
17:42 - find one matter and let's say we are
17:45 - going to find we are going to filter out
17:48 - the document that you are going to use
17:50 - let's say s will be the 27 that means we
17:54 - are going to find the document that is
17:57 - win a No let's take a call back so we
18:02 - can use the dollar 10 response and it
18:07 - will load out result by using response
18:13 - and if also if there is an error we can
18:17 - catch it using console dot log error now
18:25 - if we save it and use it you can see
18:29 - that we have we have been returned with
18:31 - the name Binet and there is 27 now we
18:35 - can also find all the documents by using
18:41 - another method that's that's called T V
18:47 - dot collection users dot find well fine
18:54 - is being is we're different from other
18:57 - Demeter's well it's not it gives a
19:01 - pointer so it gives a concept pack so we
19:07 - are going to use to air a yes it will
19:12 - return the file as an array and now we
19:16 - can use the response
19:24 - and response back and if there is an
19:28 - error we can error it with by using
19:33 - console dot log error
19:38 - now if we save it we will see it returns
19:42 - all the documents because we have same
19:44 - nothing so it returns all the linesman
19:47 - Vinayaka
19:49 - now if i send like something called is
19:52 - is equal to 25 or 24 here we see there
20:00 - is no documents like this now if we save
20:03 - this it will not give an error it will
20:06 - just send back an error yes it's another
20:10 - so it's not an error if we send the send
20:15 - out a filter value that is not being
20:17 - there now collections so the our
20:23 - operation is completed now we are going
20:25 - to see how can we use the you are plus
20:28 - and it is update so for updating our
20:33 - document we are going to use update 1
20:40 - and update many update is being
20:44 - duplicated from the newer version so we
20:47 - are going to use update 1 and update
20:49 - many for updating only one document we
20:52 - are going to use update 1 by sending one
20:57 - parameter that is the s21 and updating
21:04 - it with some value and it also is a
21:10 - different from how can we set it so for
21:16 - setting it we are going to use the other
21:17 - set and we are going to send back the
21:24 - updation value is 59 no
21:32 - it's complete now it's a promise so we
21:37 - are going to send dot ten response and
21:41 - if we see if we console it in our
21:45 - command prompt we will see that it
21:49 - returns a very big heavy object and
21:57 - let's save it and we will see that it
22:02 - keeps a heavy object now if we see you
22:06 - that we have updated the value of the
22:11 - s21 that is that is unsummon so if we
22:19 - see here and if we refresh it here we
22:27 - will see that the SE is different as is
22:31 - 59 so that's how update is done and here
22:38 - gives the response gives a very big
22:40 - heavy load and we only want do main
22:44 - fields like matched count and modified
22:47 - count so for updating more than one file
22:52 - we can use like we are going to use
22:56 - another method that's called
22:57 - that is David odde collection users
23:02 - start update many and if we send it here
23:06 - like nothing so it will be updated all
23:09 - in all documents so let's say we are
23:14 - going to implement all the A's by one so
23:22 - if for it we are going to use one that
23:24 - means we are going to increment by plus
23:27 - one or if we are going to decrease we
23:30 - can use minus one so we are going to use
23:33 - plus one so it's some response its
23:38 - sensor it's as promised
23:40 - so we are going to also again using you
23:44 - ten method and it's going to send the
23:49 - response and we are going to use one
23:52 - need one thing that is called modified
23:53 - count and if there is an error we can
23:58 - use catch matter and we are going to
24:03 - console it here now if we see it and if
24:07 - we say everything's and we will see that
24:10 - all the documents are being modified and
24:14 - the modified count is three now I feel a
24:17 - flare sitting on to all the cloud
24:19 - service space MongoDB we will see that
24:23 - I'm saman AZ 16 Rene's age is 28 and
24:28 - huncle's is is 26 no you have or we have
24:35 - done the new operation that is update
24:40 - operation now we are going to see how
24:43 - can we use the last operation D that is
24:46 - delete so for deleting any document we
24:52 - can use T V dot collection dot delete
24:58 - one or many
25:00 - so if we use the lift one it will take
25:04 - out the filter that we are going to use
25:06 - let's say we are going to delete the
25:09 - document and zoomin and so we can use
25:14 - the edge method or we can use in a
25:17 - matter let's see here is on cement now
25:22 - for deleting here that's it now if we
25:28 - it's a promise and if we responses back
25:32 - it will give that document that we have
25:34 - deleted know if we responds back and if
25:41 - there is an error we can see it in here
25:46 - and sorry it will be e
25:56 - and if we stay with you we will see that
25:59 - - oh it will give a holder document
26:03 - because I haven't used it response start
26:06 - the late count about it way if we see
26:09 - here in our MongoDB database we will see
26:14 - that huntsmen document has been
26:16 - triggered
26:18 - now if we are going to delete whole file
26:21 - this whole document we can use the
26:25 - method that's called
26:27 - that is called till it many and it's
26:36 - very easy to delete many we are going to
26:40 - send the empty air an empty object now
26:44 - if we dot 10 and response back and we
26:51 - are going to see how many how many
26:56 - documents have been written so willing
26:59 - to use deleted count and if there is an
27:02 - error we can use catch matter and it
27:08 - will give the error if there isn't now
27:11 - we have saved it now if we see in here
27:16 - it will give two only one tells me oh
27:21 - sorry man because we have used only
27:23 - delete one if we use drift many you can
27:26 - see in here no it will not keep the
27:31 - quiet thing that we want but it will -
27:35 - it will be - so yeah that's it
27:45 - so in this video we have seen how can we
27:49 - use the MongoDB library or at native
27:51 - travel - how can we select or edit or
27:56 - update or delete or insert into our
28:00 - database
28:02 - thank you

Cleaned transcript:

hi in this video we are going to learn about Mumbai TV so before getting started with MongoDB we have to know what is wrong Gordini well momo DB is a generalpurpose document based distributed database built for modern application developers and for the cloud era and the data that is being here stored is stored as a JSON like documents and it's called as a non sequel database there is no schemas there is no structure here so it's very flexible compared to as a sequel database so let's start with signing up here or registering here so we are going to click on the Trifield button and here you can get started free after signing up you will go to the Atlas Base Cloud Atlas base server because we are going to use as a life as a production deployment basis so when you start free you have already sign up and after signing up after sign Emma signing up you will go to this space where you have to create a new project so let's say our project name is TV demo after that you will be redirected to the this space which called to give your member that's just not necessary we can create your create project after that you will be on this space where you have to select build a cluster here we are going to use create a cluster it is a free and we are going to use this cloud provider AWS and wherever you are select the nearest server after that in the cluster tier we are going to use free forever and there is no need you can change the name of your cluster if you want to now we are going to create a cluster it will take some time to create the cluster so now we are here and now we are going to see how can we get started with the Mumba Devi in our app well for app we have to use the Modi with driver that is very built and that he is being used here so in here we are going to use MongoDB driver so let's open our project now we are going to create a new project let's say let's say MongoDB demo now we are going to go to this MongoDB demo folder one sec yeah MongoDB demo now we are going to initialize the NPM using NPM any test one and now we are going to open our editor the Visual Studio code so for using the mumbo DB here we are going to install two things first one is MongoDB Express here you can see that the MongoDB and Express has been installed here so for starting this starting the project we are going to use in M node node app the file data I have not created right now and for their part we are going to create we are going to use Northmen Nordmann app so for Nordmann we are going to install it in the day of dependency part using NPM install test as safe tester safe test they're not moon now here we can see that in this page the connection has been made so for connecting it into the our app we are going to click on the connect and here you will see that there are some connection requirements are needed so first of all we are going to go to the database access here we are going to create a new user let's say instrument and let also generate a secure password and we are going to select read and write to any database now we are going to select the network access here we are going to add the IP address which is either add current IP address which is help to give the secure authentication now if we go to the our cluster section now we are going to connect now we are going to connect to the cluster for connection we are going to use the connector application here we are going to use this connection string so let's copy it let's copy it after copying it we are going to now into our app we are going to create a new file let's say app torches in here we are create the Express module or take the Express module from the Express and we are going to use the app and requiring the Express as a function and it will listen to the port 3000 for restarting the server so it's complete the server can be started but here we are going to use how to get started with the MongoDB so we are going to let's say we are going to create a new folder let's say utils in here we are going to create a new file let's say DB torches in here we have installed the MongoDB driver into our process so we are going to require it from the MongoDB and say MongoDB this is equal to require MongoDB in here there is some called client this we are going to require from it which is which is of property of it which is a file of it here which is a field of it so in here we are going to connect to it as a client for connecting we are going to use manga climb dot connect in here we are going to pass the URL so for passing it here we have used a password but as I have forgotten the password we only have to again require the passport for requiring it here we are going to edit it and edit the password here we are going to autogenerate it from here and we are going to require it from here let's update the user now in here there will be a URL so let's say here is the password and we are going to get a savvy string from the connection so here we are going to again copying it and let's say here Const URL is equal to this one so here we are going to cut from here and paste into it here the password after doing this we are going to use the URL as a parameter here and that's it we are going to connect from here it will take a callback function and it will take two arguments first one is error if there is and second one is the client and now if we say if there is error then return if there is no order let's consult our client base point now that's it if we start here from NPM run dev so if we run it it will say nothing what gives nothing that's because we have started that add file but we haven't connected with the dot DV dot J's file so for connecting it we have to like say all the code is here so before cutting or pasting it from here to here we can do this like we are going to require it from tor teutuls and get a DB file so if we run this now we can see that it will give the client back so here it returns the manga client all the things all the fields that are here now here we are going to see how can we deploy operation that is create read update and delete so for doing the crud operation we are going to use we are going to use the client and by client means we are going to create a new Const TV which take a client and TB and let's say our database name is the test so test is a database for the collection means for a table in the sequel eyes database we are here we are going to use the collection as a table so let's say the name is user users in here we are going to first use the insert means Korea how can we create a document and not let some so let's see if we are clear going to create a one document we are going to use the insert one method in this we are going to give an object let's say name and simile is 21 after that these returns are promised so for handling the promised we are going to use a 10 which takes a result which gives a result and we are going to console dot log the object it we have sent using result raised dot ops and if there is an error you can see it from here like e console dot log error now if we save it and see that there is one document that we have inserted it is this one and if we see in to our more atlas we are going to see in the collection and here we are going to see that there is a database it is called test and the document for a collection that is called users when talks huntsmen in between and the is so we can also use how can we insert more than one document you can do that by using another matter let's say do this by using a DB dot collection users users start insert many here we are going to use the array because we are sending more than one document so by doing this you can send more than one document let's say here we name is 21 or let's say twenty seven and another user let's say uncle is 25 so it will be a number so here also will be number so we have inserted two documents here now it's a promise so we have to use the promise sequence we are going to use 10 and console.log the result that we have sent we will be using response dot ops and also we can catch data by using catch matter and let's say if there isn't any other you can console it now if we send it back we will see that we have sent two documents Renee and uncle now if we refresh it we will see that there is two documents winnie and uncle now we are going to see how can we find our wait any data so for reading a document we can do so by using another metric that is used it is T V dot collection users dot point if we are going to find one means we are going to find only one document we have to use find one matter and let's say we are going to find we are going to filter out the document that you are going to use let's say s will be the 27 that means we are going to find the document that is win a No let's take a call back so we can use the dollar 10 response and it will load out result by using response and if also if there is an error we can catch it using console dot log error now if we save it and use it you can see that we have we have been returned with the name Binet and there is 27 now we can also find all the documents by using another method that's that's called T V dot collection users dot find well fine is being is we're different from other Demeter's well it's not it gives a pointer so it gives a concept pack so we are going to use to air a yes it will return the file as an array and now we can use the response and response back and if there is an error we can error it with by using console dot log error now if we save it we will see it returns all the documents because we have same nothing so it returns all the linesman Vinayaka now if i send like something called is is equal to 25 or 24 here we see there is no documents like this now if we save this it will not give an error it will just send back an error yes it's another so it's not an error if we send the send out a filter value that is not being there now collections so the our operation is completed now we are going to see how can we use the you are plus and it is update so for updating our document we are going to use update 1 and update many update is being duplicated from the newer version so we are going to use update 1 and update many for updating only one document we are going to use update 1 by sending one parameter that is the s21 and updating it with some value and it also is a different from how can we set it so for setting it we are going to use the other set and we are going to send back the updation value is 59 no it's complete now it's a promise so we are going to send dot ten response and if we see if we console it in our command prompt we will see that it returns a very big heavy object and let's save it and we will see that it keeps a heavy object now if we see you that we have updated the value of the s21 that is that is unsummon so if we see here and if we refresh it here we will see that the SE is different as is 59 so that's how update is done and here gives the response gives a very big heavy load and we only want do main fields like matched count and modified count so for updating more than one file we can use like we are going to use another method that's called that is David odde collection users start update many and if we send it here like nothing so it will be updated all in all documents so let's say we are going to implement all the A's by one so if for it we are going to use one that means we are going to increment by plus one or if we are going to decrease we can use minus one so we are going to use plus one so it's some response its sensor it's as promised so we are going to also again using you ten method and it's going to send the response and we are going to use one need one thing that is called modified count and if there is an error we can use catch matter and we are going to console it here now if we see it and if we say everything's and we will see that all the documents are being modified and the modified count is three now I feel a flare sitting on to all the cloud service space MongoDB we will see that I'm saman AZ 16 Rene's age is 28 and huncle's is is 26 no you have or we have done the new operation that is update operation now we are going to see how can we use the last operation D that is delete so for deleting any document we can use T V dot collection dot delete one or many so if we use the lift one it will take out the filter that we are going to use let's say we are going to delete the document and zoomin and so we can use the edge method or we can use in a matter let's see here is on cement now for deleting here that's it now if we it's a promise and if we responses back it will give that document that we have deleted know if we responds back and if there is an error we can see it in here and sorry it will be e and if we stay with you we will see that oh it will give a holder document because I haven't used it response start the late count about it way if we see here in our MongoDB database we will see that huntsmen document has been triggered now if we are going to delete whole file this whole document we can use the method that's called that is called till it many and it's very easy to delete many we are going to send the empty air an empty object now if we dot 10 and response back and we are going to see how many how many documents have been written so willing to use deleted count and if there is an error we can use catch matter and it will give the error if there isn't now we have saved it now if we see in here it will give two only one tells me oh sorry man because we have used only delete one if we use drift many you can see in here no it will not keep the quiet thing that we want but it will it will be so yeah that's it so in this video we have seen how can we use the MongoDB library or at native travel how can we select or edit or update or delete or insert into our database thank you
