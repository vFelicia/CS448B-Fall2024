With timestamps:

00:01 - hello and welcome back to the another
00:02 - video the Java tutorial Series so this
00:04 - is the uh continuation to our project uh
00:07 - banking application and this is the
00:09 - third video I guess of the series
00:12 - of the project okay so in this video
00:15 - we'll be discussing about the
00:17 - functionality which is withdraw and the
00:20 - get previous transaction so we will be
00:21 - implementing the two methods so for the
00:23 - one method is for the Vedra and one
00:25 - method is for the previous transactions
00:26 - okay
00:27 - so I hope you have watched the previous
00:30 - videos where you will be implemented our
00:32 - deposit function method and now in this
00:36 - video we'll be covering our withdraw and
00:38 - get previous transaction functionality
00:40 - okay
00:41 - so okay before we get in code think
00:45 - about it
00:46 - whenever I want to withdraw some money
00:48 - from my account what changes and first
00:51 - of all what I have required as the input
00:54 - to this method okay so let's think about
00:56 - it so for this I will be requiring one
01:00 - amount that is the amount of money that
01:02 - I want to withdraw from my account so
01:05 - the amount is the parameter which will
01:09 - be passing through the withdrawal
01:10 - functions and again one base condition
01:13 - should be there okay so think about it
01:15 - one what what will be the best condition
01:17 - again the same base condition uh like we
01:21 - have done for the deposit method that is
01:23 - amount should not be equal to the zero
01:24 - because deposit depositing the zero
01:26 - rupees or the zero dollars from an
01:28 - account
01:29 - doesn't make any sense okay so we'll be
01:32 - implementing that also
01:33 - and I guess this is a bit pretty much
01:37 - stuff that we have we want to do inside
01:39 - the withdrawal function okay so let's
01:41 - just get and implement this
01:43 - withdraw method okay
01:47 - since our method is doesn't returning
01:50 - anything that's why the return type
01:52 - should be avoid uh void void is the
01:55 - return type there are many different
01:57 - types such as int uh care strings are
02:00 - there so method is doesn't returning
02:02 - anything it it is just performing some
02:05 - basic math calculation and it will
02:07 - returning some value to the user okay
02:10 - not value it is performing some task
02:13 - okay
02:14 - so withdraw I will name this as withdraw
02:18 - and as we have discussed it will accept
02:22 - one parameter name as amount amount of
02:24 - money that we have to withdraw from our
02:27 - account okay and again one of the base
02:29 - condition should be base condition
02:31 - should be there that my amount should
02:33 - not
02:34 - be equals to the
02:37 - zero if it is equal to zero that doesn't
02:39 - make any sense okay and inside this uh I
02:43 - will update my balance because after
02:45 - withdrawing some money my when that
02:48 - amount that much amount of money should
02:49 - be deducted from a balance that for my
02:52 - account
02:53 - balance okay so balance
02:56 - minus amount
03:00 - okay and now after that I I also have to
03:03 - update my previous transaction
03:06 - as amount
03:10 - okay and minus amount okay
03:14 - so I guess this is pretty much that we
03:17 - have to do
03:18 - inside the withdrawal functionality and
03:22 - after that we will be performing
03:26 - another functionality that is get
03:29 - previous transaction so
03:31 - this I have writing the previous
03:33 - generation previous transaction we have
03:35 - to implement that method inside this
03:38 - class name as bank account okay and so
03:42 - since
03:43 - previous get previous transaction it
03:45 - doesn't uh return anything so that's why
03:49 - I will write void as the return type and
03:52 - I will write get
03:55 - previous
03:57 - transaction
04:02 - wait guys
04:06 - okay so sorry for the introduction guys
04:08 - okay so where we are avoid get previous
04:11 - transaction okay so this method uh
04:14 - doesn't require any parameters
04:16 - and it doesn't return anything okay so
04:20 - inside this I will write one if
04:21 - condition
04:23 - if my previous and the action value
04:26 - is greater than zero
04:29 - okay when the value will be will have
04:32 - the present previous election will be
04:34 - greater than uh
04:36 - zero when we have done any deposit uh in
04:40 - our account okay so in that case I will
04:43 - print
04:46 - deposited
04:51 - and I will concat it with
04:53 - previous interactions value okay and uh
04:58 - again
04:59 - one else if condition should be there to
05:02 - check
05:03 - else if
05:06 - my the value of the previous transaction
05:10 - is less than zero in that case when we
05:15 - draw uh means one withdrawal should be
05:18 - there for my account so in that case I
05:21 - will write
05:24 - sorry
05:26 - withdrawn
05:30 - withdrawn
05:33 - the amount should be there and one thing
05:37 - I will do here is math Dot abstract
05:43 - okay and I will pass it the value of the
05:46 - previous transaction
05:47 - so you'll ask me what we have done here
05:50 - what is this math dot apps right and we
05:52 - are passing uh three ways of the action
05:55 - value to it okay
05:56 - so this is the in inbuilt class inside
06:00 - the Java uh so here you can if you hover
06:03 - over the cursor over here you can see
06:06 - java.lang is a package inside which math
06:10 - class is there and one abs abs method
06:13 - should be there inside that math class
06:15 - if you right click here and here you can
06:17 - see public static in areas so what this
06:21 - uh method does it will accept one
06:24 - parameter
06:25 - okay so as you here you can see it is
06:28 - accepting one parameter which is integer
06:30 - a and it is returning something uh
06:33 - in in format okay so what it does is uh
06:38 - since the value of the application
06:40 - reaction is less than zero that is the
06:42 - negative one uh like minus something
06:45 - known as minus 50 or yes minus 400 so we
06:51 - don't want this values to be reflected
06:53 - in our console because negative values
06:56 - should not be there inside any account
06:57 - okay so we are doing this match dot
07:00 - abstract function and it will convert
07:02 - that negative value inside the positive
07:04 - to its corresponding positive value that
07:07 - is equal to it will convert the minus 50
07:09 - x 50 and uh minus 400 as 400 okay so
07:14 - this is the work of the max dot
07:16 - abstracts abstract function okay or
07:18 - method oh then here I will write else
07:23 - if both the condition will not get
07:26 - satisfied in that case I will write
07:30 - no transaction is occurred
07:33 - no transaction
07:37 - it's
07:39 - occurred
07:42 - okay
07:44 - so I guess this is pretty much about the
07:46 - previous transaction method where we
07:49 - will checking if the value is greater
07:50 - than 0 that is a deposit deposit method
07:54 - is getting run inside our application
07:56 - and if the value is less than zero that
07:58 - is withdraw is done inside our bank
08:02 - account and if nothing none of this
08:05 - statement get executed then else will
08:07 - execute and it will show that no
08:09 - transaction is acquired inside our
08:11 - account okay
08:12 - so this is pretty much about the
08:14 - withdraw and get previous function over
08:16 - the method
08:18 - I will see you in the next video well
08:19 - wearing will be covering the next
08:21 - functionality that is the show menu for
08:23 - our project so thank you guys for
08:24 - watching this video

Cleaned transcript:

hello and welcome back to the another video the Java tutorial Series so this is the uh continuation to our project uh banking application and this is the third video I guess of the series of the project okay so in this video we'll be discussing about the functionality which is withdraw and the get previous transaction so we will be implementing the two methods so for the one method is for the Vedra and one method is for the previous transactions okay so I hope you have watched the previous videos where you will be implemented our deposit function method and now in this video we'll be covering our withdraw and get previous transaction functionality okay so okay before we get in code think about it whenever I want to withdraw some money from my account what changes and first of all what I have required as the input to this method okay so let's think about it so for this I will be requiring one amount that is the amount of money that I want to withdraw from my account so the amount is the parameter which will be passing through the withdrawal functions and again one base condition should be there okay so think about it one what what will be the best condition again the same base condition uh like we have done for the deposit method that is amount should not be equal to the zero because deposit depositing the zero rupees or the zero dollars from an account doesn't make any sense okay so we'll be implementing that also and I guess this is a bit pretty much stuff that we have we want to do inside the withdrawal function okay so let's just get and implement this withdraw method okay since our method is doesn't returning anything that's why the return type should be avoid uh void void is the return type there are many different types such as int uh care strings are there so method is doesn't returning anything it it is just performing some basic math calculation and it will returning some value to the user okay not value it is performing some task okay so withdraw I will name this as withdraw and as we have discussed it will accept one parameter name as amount amount of money that we have to withdraw from our account okay and again one of the base condition should be base condition should be there that my amount should not be equals to the zero if it is equal to zero that doesn't make any sense okay and inside this uh I will update my balance because after withdrawing some money my when that amount that much amount of money should be deducted from a balance that for my account balance okay so balance minus amount okay and now after that I I also have to update my previous transaction as amount okay and minus amount okay so I guess this is pretty much that we have to do inside the withdrawal functionality and after that we will be performing another functionality that is get previous transaction so this I have writing the previous generation previous transaction we have to implement that method inside this class name as bank account okay and so since previous get previous transaction it doesn't uh return anything so that's why I will write void as the return type and I will write get previous transaction wait guys okay so sorry for the introduction guys okay so where we are avoid get previous transaction okay so this method uh doesn't require any parameters and it doesn't return anything okay so inside this I will write one if condition if my previous and the action value is greater than zero okay when the value will be will have the present previous election will be greater than uh zero when we have done any deposit uh in our account okay so in that case I will print deposited and I will concat it with previous interactions value okay and uh again one else if condition should be there to check else if my the value of the previous transaction is less than zero in that case when we draw uh means one withdrawal should be there for my account so in that case I will write sorry withdrawn withdrawn the amount should be there and one thing I will do here is math Dot abstract okay and I will pass it the value of the previous transaction so you'll ask me what we have done here what is this math dot apps right and we are passing uh three ways of the action value to it okay so this is the in inbuilt class inside the Java uh so here you can if you hover over the cursor over here you can see java.lang is a package inside which math class is there and one abs abs method should be there inside that math class if you right click here and here you can see public static in areas so what this uh method does it will accept one parameter okay so as you here you can see it is accepting one parameter which is integer a and it is returning something uh in in format okay so what it does is uh since the value of the application reaction is less than zero that is the negative one uh like minus something known as minus 50 or yes minus 400 so we don't want this values to be reflected in our console because negative values should not be there inside any account okay so we are doing this match dot abstract function and it will convert that negative value inside the positive to its corresponding positive value that is equal to it will convert the minus 50 x 50 and uh minus 400 as 400 okay so this is the work of the max dot abstracts abstract function okay or method oh then here I will write else if both the condition will not get satisfied in that case I will write no transaction is occurred no transaction it's occurred okay so I guess this is pretty much about the previous transaction method where we will checking if the value is greater than 0 that is a deposit deposit method is getting run inside our application and if the value is less than zero that is withdraw is done inside our bank account and if nothing none of this statement get executed then else will execute and it will show that no transaction is acquired inside our account okay so this is pretty much about the withdraw and get previous function over the method I will see you in the next video well wearing will be covering the next functionality that is the show menu for our project so thank you guys for watching this video
