With timestamps:

00:00 - hey guys welcome to the next video in
00:02 - Python tutorial for beginners in this
00:04 - video I'm going to show you how you can
00:06 - use a built-in function called super in
00:10 - your Python classes so let's get started
00:13 - so to start with I have two classes here
00:16 - one is the parent class and other is the
00:19 - child class and here parent class acts
00:23 - like a superclass and the child class
00:25 - acts like a subclass which is inheriting
00:28 - from the parent class now both these
00:31 - classes have this init function and you
00:35 - already know what does this init
00:37 - function do it is the first function
00:39 - which is called when an instance of a
00:42 - class is created and here I'm just
00:44 - creating the object from the child class
00:47 - now what do you think will happen well
00:51 - that this constructor will be called or
00:53 - this constructor will be called because
00:55 - we are inheriting from the parent class
00:58 - into the child class so let's find out
01:01 - so I'm going to run this code and it
01:03 - prints child in it that means this
01:06 - statement under the child class init
01:09 - method is executed and this method is
01:13 - not executed now in some cases you might
01:16 - want to pass some parameters also into
01:20 - your superclass for example I'm just
01:23 - going to give this example let's say I
01:26 - want to pass a argument called name here
01:29 - and then I will just print the value of
01:33 - name how can I call this init function
01:37 - using this child class instance so it
01:41 - turns out that there is a function
01:43 - called super in Python that allows us to
01:47 - refer to the superclass implicitly now
01:52 - this super function is a built-in
01:55 - function which returns a proxy object
01:58 - that allows you to refer to your
02:02 - superclass so let's try to use this
02:05 - super function so you just use the
02:07 - keyword super and then give these
02:10 - parentheses because this is a function
02:12 - and then this
02:13 - per function will return the proxy
02:15 - object of the superclass that means I
02:18 - can use this dot operator to call the
02:21 - init method from the superclass so this
02:25 - notation means super dot in it means we
02:29 - are calling the init method from the
02:31 - parent class and that means we can pass
02:34 - the name from here so let's just pass
02:36 - this now I am going to just write max
02:38 - here and now I'm going to run this code
02:41 - and now you will see that child in it is
02:45 - printed using this statement first of
02:47 - all and then using the super function
02:51 - the init method of the parent class is
02:53 - called and then this name is passed here
02:58 - and it prints parent in it and the name
03:01 - whatever name we have provided here so
03:03 - this super function allows us to refer
03:06 - to the superclass now let me show you
03:09 - one more thing which is called the
03:10 - method resolution order and you can find
03:14 - this method resolution order by using
03:17 - your class names or child last name dot
03:20 - underscore underscore mro so just write
03:24 - underscore underscore Amaro underscore
03:26 - underscore and this statement I'm going
03:28 - to use inside the print function so you
03:31 - can see the result what it returns so
03:34 - I'm going to run the code now and you
03:36 - can see it returns this kind of order so
03:40 - as the name suggests mr o stands for
03:42 - method resolution order and this is the
03:46 - order in which the methods are called
03:50 - inside your child class or the parent
03:53 - class and this order means that all the
03:56 - method in the child class will be
03:59 - executed first and then all the method
04:02 - in the parent class will be executed now
04:06 - there are some rules based upon which
04:09 - this order is calculated and these rules
04:13 - are the first rule is the method inside
04:16 - your subclass are always called first
04:19 - and then whatever the method inside the
04:23 - base class they will be called and the
04:26 - second rule
04:27 - is related to multiple inheritance so
04:30 - let me just create the second parent
04:32 - class and I'm going to name it as parent
04:34 - two and here also I'm going to just
04:37 - write parent two here and let me inherit
04:40 - from the parent two also in the child
04:44 - class right and let's run the code once
04:46 - again and now you will see this order so
04:50 - once again child is printed and then the
04:53 - parent and then prayer in two and then
04:57 - the object so the second thing on which
04:59 - the amaro depends upon is the order in
05:02 - which you inherit from the parent class
05:06 - or the superclass so in our example we
05:09 - were inheriting from the parent class
05:11 - first of all and then parent too
05:14 - and in the same order this amaro
05:17 - also will be decided so all the method
05:19 - in the child class will be executed
05:22 - first and then all the methods inside
05:25 - the parent class whatever you use first
05:28 - here will be executed and then whatever
05:31 - superclass you right after that those
05:34 - method inside the class or superclass
05:37 - will be executed next and then at last
05:40 - this is the base object now let's try to
05:42 - just reverse this order and once again
05:46 - let's run the code and you will see that
05:49 - this order will be reversed so the
05:52 - method resolution order will tell you
05:54 - which class method will be executed
05:57 - first and then the order of all the
06:00 - methods from the super classes now one
06:04 - more interesting thing which you will
06:06 - observe here is this output so I said
06:10 - that this super function is used to
06:12 - refer to the superclass and now we have
06:16 - two super classes that means multiple
06:19 - inheritance and you will see here that
06:22 - only one output is printed which is from
06:26 - the init method inside the parent two
06:30 - and this statement is not printed which
06:34 - is inside the init method inside the
06:37 - parent class so how to solve this
06:39 - problem so
06:41 - if you have multiple inheritance then
06:44 - you need to manually call these init
06:48 - function using the class name so let's
06:52 - say I want to call the init function
06:54 - first fall from the parent to class I
06:57 - will use parent to dot in it and then
07:00 - you need to give also the self as the
07:04 - first parameter and the second which is
07:06 - the name in the same way you use the
07:10 - second class which is parent dot init
07:13 - function and then first parameter is the
07:17 - self and then you can pass any other
07:19 - name for example Tom here and let me run
07:22 - the code and you will see it calls first
07:24 - of all parent to init function and we
07:27 - have passed max here as the name and
07:30 - then it calls the parent one init
07:32 - function with the name Tom which is
07:35 - printed here also so this is how you can
07:38 - use super function in Python I hope you
07:42 - have enjoyed this video and I will see
07:43 - you in the next video

Cleaned transcript:

hey guys welcome to the next video in Python tutorial for beginners in this video I'm going to show you how you can use a builtin function called super in your Python classes so let's get started so to start with I have two classes here one is the parent class and other is the child class and here parent class acts like a superclass and the child class acts like a subclass which is inheriting from the parent class now both these classes have this init function and you already know what does this init function do it is the first function which is called when an instance of a class is created and here I'm just creating the object from the child class now what do you think will happen well that this constructor will be called or this constructor will be called because we are inheriting from the parent class into the child class so let's find out so I'm going to run this code and it prints child in it that means this statement under the child class init method is executed and this method is not executed now in some cases you might want to pass some parameters also into your superclass for example I'm just going to give this example let's say I want to pass a argument called name here and then I will just print the value of name how can I call this init function using this child class instance so it turns out that there is a function called super in Python that allows us to refer to the superclass implicitly now this super function is a builtin function which returns a proxy object that allows you to refer to your superclass so let's try to use this super function so you just use the keyword super and then give these parentheses because this is a function and then this per function will return the proxy object of the superclass that means I can use this dot operator to call the init method from the superclass so this notation means super dot in it means we are calling the init method from the parent class and that means we can pass the name from here so let's just pass this now I am going to just write max here and now I'm going to run this code and now you will see that child in it is printed using this statement first of all and then using the super function the init method of the parent class is called and then this name is passed here and it prints parent in it and the name whatever name we have provided here so this super function allows us to refer to the superclass now let me show you one more thing which is called the method resolution order and you can find this method resolution order by using your class names or child last name dot underscore underscore mro so just write underscore underscore Amaro underscore underscore and this statement I'm going to use inside the print function so you can see the result what it returns so I'm going to run the code now and you can see it returns this kind of order so as the name suggests mr o stands for method resolution order and this is the order in which the methods are called inside your child class or the parent class and this order means that all the method in the child class will be executed first and then all the method in the parent class will be executed now there are some rules based upon which this order is calculated and these rules are the first rule is the method inside your subclass are always called first and then whatever the method inside the base class they will be called and the second rule is related to multiple inheritance so let me just create the second parent class and I'm going to name it as parent two and here also I'm going to just write parent two here and let me inherit from the parent two also in the child class right and let's run the code once again and now you will see this order so once again child is printed and then the parent and then prayer in two and then the object so the second thing on which the amaro depends upon is the order in which you inherit from the parent class or the superclass so in our example we were inheriting from the parent class first of all and then parent too and in the same order this amaro also will be decided so all the method in the child class will be executed first and then all the methods inside the parent class whatever you use first here will be executed and then whatever superclass you right after that those method inside the class or superclass will be executed next and then at last this is the base object now let's try to just reverse this order and once again let's run the code and you will see that this order will be reversed so the method resolution order will tell you which class method will be executed first and then the order of all the methods from the super classes now one more interesting thing which you will observe here is this output so I said that this super function is used to refer to the superclass and now we have two super classes that means multiple inheritance and you will see here that only one output is printed which is from the init method inside the parent two and this statement is not printed which is inside the init method inside the parent class so how to solve this problem so if you have multiple inheritance then you need to manually call these init function using the class name so let's say I want to call the init function first fall from the parent to class I will use parent to dot in it and then you need to give also the self as the first parameter and the second which is the name in the same way you use the second class which is parent dot init function and then first parameter is the self and then you can pass any other name for example Tom here and let me run the code and you will see it calls first of all parent to init function and we have passed max here as the name and then it calls the parent one init function with the name Tom which is printed here also so this is how you can use super function in Python I hope you have enjoyed this video and I will see you in the next video
