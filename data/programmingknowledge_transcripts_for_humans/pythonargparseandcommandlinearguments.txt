With timestamps:

00:00 - in this video i'm going to show you how
00:01 - you can pass the command line arguments
00:04 - to your python script so to start with
00:07 - i have a script called myparser.py
00:11 - and in order to pass the command line
00:14 - arguments
00:14 - to this dot py file first of all
00:18 - we need to import a built-in module
00:21 - which is called arg parse module
00:24 - now using this arg parse module we can
00:27 - parse the parameters which is passed
00:31 - using the command line to this script
00:35 - so let's see how we can pass those
00:38 - parameters
00:39 - so first of all i'm going to declare a
00:42 - variable
00:43 - called parser and then i'm going to use
00:46 - this
00:46 - arg parse keyword which we have imported
00:49 - and there is a special
00:51 - class here which is called argument
00:53 - parser
00:54 - which we are going to use now this
00:56 - argument parcel class
00:58 - takes an optional parameter
01:01 - which is the description which we will
01:03 - see little bit later
01:05 - so the first step is to initialize your
01:07 - parser
01:09 - the second step is to add the parameters
01:13 - which you want to parse so this we will
01:16 - see
01:17 - in a bit but let's see the next step
01:20 - which is
01:20 - actually parsing the arguments which is
01:23 - passed
01:24 - using the command line so let me declare
01:27 - one more variable which will be our
01:29 - arguments which we want to parse and
01:31 - then we will use this
01:33 - parser variable which we have created
01:35 - and call
01:36 - the method called parse arg so now once
01:40 - you have used
01:41 - this method parse args with this parser
01:44 - variable
01:45 - then you will have all your arguments
01:48 - into this odds variable so let's run the
01:52 - script and let's see what happens
01:54 - when we run this script so in order to
01:57 - open the terminal
01:58 - in pycharm you can just click on this
02:00 - option which says terminal
02:02 - and this is going to open the terminal
02:05 - in the pie charm ide
02:07 - now it depends in which project you are
02:09 - working in
02:10 - so if you see some other location which
02:12 - is opened
02:13 - using this terminal you just need to
02:15 - provide the path
02:16 - where your project is so i'm going to
02:18 - right click on
02:20 - my file and then i'm going to copy the
02:22 - path
02:23 - of this file so right click and copy
02:25 - path and i will just
02:27 - do cd and i will paste this path
02:30 - which i have copied and i will remove
02:32 - the name of the file because i just want
02:34 - to
02:35 - cd to the directory in which i'm working
02:38 - in
02:39 - so now i'm in the directory in which
02:42 - this
02:42 - myparser.py file is present now in order
02:45 - to run this python script
02:47 - i can use this python keyword and then
02:50 - the name of my file which is my parser
02:53 - dot py file now whenever you
02:55 - import the arg pass module and you
02:58 - initialize this module
03:00 - there is a special help parameter which
03:03 - is available
03:04 - so you can write minus h here and then
03:07 - press
03:07 - enter and you will see that this
03:11 - help parameter is automatically present
03:14 - whenever
03:15 - you import this arg pass module and
03:18 - initialize it so this is one way of
03:20 - running your script
03:21 - you can also run your script on your
03:24 - windows or
03:25 - linux terminal the process is same so
03:27 - you need to cd to the directory in which
03:29 - you are working in so
03:31 - i'm going to once again copy the path
03:33 - and paste it
03:34 - here and once i'm in this
03:38 - directory i will just write python and
03:41 - the name of the script which is my
03:42 - parser
03:43 - and then hyphen h which is for help
03:47 - and it's going to give me the same kind
03:49 - of result so you can run your python
03:51 - script either
03:52 - on the windows command prompt or in the
03:55 - pycharm
03:56 - the choice is totally yours so i'm going
03:58 - to use this
04:00 - pie charm terminal so let me minimize
04:02 - this terminal for now
04:03 - now as i said you can pass some argument
04:07 - here in the argument parser class
04:10 - so the argument which you can provide
04:12 - here is that description
04:14 - which is the description you want to
04:16 - give whenever somebody runs
04:18 - this script so this is going to be the
04:20 - description whenever you run
04:22 - your file on the terminal so i'm going
04:24 - to once again
04:25 - run this python file and you can see
04:29 - the description is printed here now now
04:31 - how to pass the command line
04:33 - arguments so you can pass two kinds of
04:36 - arguments as the command line arguments
04:40 - one are called positional arguments and
04:43 - other
04:43 - are called optional arguments so first
04:46 - of all we will see how to pass the
04:48 - positional arguments
04:50 - so in order to pass the positional
04:52 - argument you use your parser variable
04:55 - and then call a method called add
04:58 - argument here and first of all inside
05:01 - the add argument you give the name of
05:03 - your argument
05:04 - for example i want the user to provide
05:06 - two numbers
05:07 - and i want to perform some mathematical
05:09 - operations on these two numbers so i can
05:12 - store these two numbers into some
05:14 - variables
05:15 - and these variables i can define here so
05:18 - the first variable name
05:20 - i want to provide here is num1 and then
05:24 - as the second argument you provide the
05:26 - help parameter
05:27 - so in the help what you do is you
05:30 - provide
05:30 - some help about the argument which you
05:33 - want to receive
05:35 - from the user in the same way i can
05:37 - provide
05:38 - the number 2 argument and i can just
05:41 - change the name of the argument 2 and
05:44 - the
05:44 - help description of argument 2. now the
05:47 - third
05:48 - parameter or argument which i want to
05:50 - provide using command line
05:52 - is the operation so let's say we want
05:55 - that user should provide some kind of
05:58 - mathematical operations
06:00 - to work with so in the help i can just
06:03 - write provide
06:04 - operator so these are the three
06:06 - arguments which i want the user to
06:08 - provide
06:09 - now once these three arguments are
06:11 - provided by the users
06:12 - these three arguments will be passed
06:15 - using this function
06:16 - and then all these three argument lists
06:19 - will be assigned
06:20 - to this args variable so we can just
06:23 - print the value of this arg
06:25 - variable and let's see what is the
06:28 - content
06:28 - inside the args so i'm going to open the
06:31 - terminal once again
06:32 - so after the python keyword and the name
06:34 - of your script
06:36 - you provide the first number which is
06:39 - let's say 84 the second number let's say
06:42 - it's 41 and the operator so let's say i
06:46 - want to provide the operator
06:48 - plus to add these two numbers and then
06:50 - i'm going to press
06:51 - enter and you will see this print
06:54 - statement
06:55 - is going to print the value of number 1
06:58 - which is 84 the value of
07:02 - number 2 which is 41 and the value
07:05 - of operation which is plus here
07:09 - you will also observe that all these
07:11 - three numbers
07:13 - are present in the form of string so in
07:15 - order to work
07:16 - on these numbers we need to convert
07:19 - these numbers
07:20 - first into a float value or the integer
07:24 - value
07:24 - and then only we will be able to work on
07:27 - these numbers
07:28 - so how we can provide the type
07:31 - of these two numbers so that our script
07:34 - understands
07:35 - that these are the numbers and not the
07:38 - strings
07:38 - so the way in which you provide the type
07:41 - of the argument
07:42 - is using the type keyword here
07:45 - and then you provide whatever type you
07:48 - want
07:49 - for your argument or the parameter
07:52 - so here i have written type is equal to
07:54 - float and
07:55 - in the second argument also i have
07:57 - written type is equal to
07:59 - float and by default the type is string
08:02 - so if you don't provide any type it's a
08:04 - string so now we have provided a type
08:06 - to our first two numbers and let's run
08:09 - the script once again
08:11 - so now you will see that these values
08:14 - are no longer
08:15 - string values but now they are
08:18 - some float values also whenever you run
08:22 - the script with minus h keyword which is
08:25 - the
08:26 - help keyword it's going to show that
08:29 - these are the positional arguments which
08:32 - is required by the script which is
08:34 - number one
08:35 - number two and operation and
08:38 - also we can use minus h as the help
08:41 - and also it's going to give us the
08:43 - description of this script
08:45 - which we have provided here so now we
08:47 - can perform some mathematical operations
08:50 - on the arguments so let's perform some
08:52 - mathematical operations on the arguments
08:55 - so we can extract these argument using
08:58 - the args
08:59 - keyword and then calling the name of the
09:01 - variable which we have provided so args
09:04 - dot number one is going to give you the
09:06 - value of number one so what i want to do
09:09 - here is i want to
09:11 - know the operation first of all so args
09:13 - dot
09:14 - operation and if this operation is equal
09:17 - to
09:17 - plus then i will just add these two
09:21 - numbers so i'm going to just say args
09:23 - dot num 1 plus args dot
09:27 - num 2. now after adding these two
09:29 - numbers i need to save
09:30 - these numbers into a variable so let's
09:32 - create a variable called
09:35 - result here and i will initialize this
09:37 - result by
09:38 - none so initial value of result is none
09:41 - and then we will assign the addition of
09:43 - the two numbers to the result parameter
09:46 - and then at the end we will just print
09:49 - the value
09:50 - of the result and the same i will do for
09:52 - the other operations also so let's
09:54 - define
09:55 - some more operations second operation i
09:58 - want to provide here is the subtraction
10:00 - third operation i want to provide here
10:02 - is the multiplication
10:04 - and let's say fourth argument i want to
10:06 - provide here is the
10:07 - power of operation so here i can use
10:11 - a inbuilt function which is p o w
10:15 - and then i will just pass the first
10:17 - number as the first parameter
10:19 - so args dot num one and the second
10:22 - number
10:23 - as the second parameter so now let's run
10:26 - the script once again
10:27 - and let's see what happens when we run
10:29 - this script once again
10:31 - so i'm going to provide the same
10:32 - parameters 84 41 and operation
10:35 - plus here and then press enter
10:39 - and you will see the result here is the
10:42 - addition of these two numbers
10:44 - because our plus condition is matte
10:47 - for the operation and then it's going to
10:49 - just add these two numbers
10:51 - and print the result we can make this uh
10:54 - result
10:55 - little bit more sensible by just saying
10:58 - this is our result so i'm going to just
11:00 - say result
11:01 - colon and then provide the comma here
11:04 - and once again let's
11:05 - run the same script with the minus
11:08 - operation this time so i'm going to
11:10 - provide the minus operation now
11:12 - and then press enter and it's going to
11:14 - still give me the addition this is
11:15 - strange
11:16 - because i think i have done some mistake
11:19 - here
11:20 - which is i haven't provided or changed
11:23 - these operators from here so in the case
11:26 - of minus i need to
11:28 - provide the hyphen here and in the case
11:30 - of multiplication i need to provide the
11:32 - s tricks here
11:33 - so let's run the code or script once
11:36 - again
11:37 - with minus and now you will see as a
11:40 - result
11:41 - you will see the subtraction of these
11:43 - two numbers
11:44 - let's run this script with pow and then
11:47 - press enter
11:48 - and it's going to give me the power of
11:50 - operation of these two numbers
11:52 - so this is how you can provide the
11:54 - positional parameters
11:56 - now as the name suggests these are the
11:59 - positional parameters
12:00 - that means every parameter have its own
12:04 - position
12:05 - and this position is defined by the
12:08 - declaration here
12:09 - so the first position is for the number
12:12 - one
12:12 - second position is for number two and
12:14 - the third position
12:16 - is for this operation parameter
12:19 - so if you change the position for
12:21 - example i will provide
12:23 - the plus operator first
12:26 - and then these two numbers this will
12:28 - give me an
12:29 - error and it will say that i was
12:32 - expecting a number
12:34 - as the first argument but you have
12:36 - provided some string parameter here
12:39 - also if you don't provide any parameter
12:41 - so i'm going to just
12:43 - say first two numbers i will provide
12:46 - but operations i haven't defined then
12:48 - also it's going to give me an error
12:51 - and this will say that operation is not
12:53 - defined because we haven't
12:55 - defined any operation here so it's going
12:58 - to give
12:59 - us an error so there is one way of
13:01 - solving this error
13:02 - which is by providing the default value
13:05 - and in order
13:06 - to provide the default value you use the
13:08 - keyword default
13:09 - and then provide the value of it so
13:11 - let's say
13:12 - by default the operation is plus
13:15 - always and when i run this code once
13:17 - again it's going to still give me this
13:20 - error
13:21 - because these are the positional
13:23 - arguments
13:24 - we cannot change the position of this
13:27 - argument
13:28 - and we cannot provide the optional
13:30 - values here
13:31 - and that's where the optional parameters
13:34 - comes in
13:35 - so using these optional parameters you
13:38 - can provide the optional values
13:40 - so let me show you how you can provide
13:42 - the optional parameters
13:44 - so the way you provide the optional
13:45 - parameters is
13:47 - by simply adding double hyphen symbol
13:50 - in front of your parameters
13:54 - so i have provided double hyphen symbol
13:56 - in front of
13:57 - each and every argument which is
13:59 - provided to
14:00 - the script and let's go to the terminal
14:02 - once again
14:03 - and this time we need to provide
14:06 - the name of the parameter which is
14:09 - hyphen hyphen num 1 space the value of
14:13 - it for example 80
14:15 - and then we need to provide the second
14:16 - number which is hyphen hyphen
14:18 - num 2 and then after the space the value
14:21 - of number 2
14:23 - and let's say i don't want to provide
14:24 - the operation now
14:26 - and when i press enter here it's still
14:28 - going to give me
14:30 - the result which is plus because
14:33 - now we have the default value of
14:35 - operation
14:36 - which is plus and if i don't provide
14:39 - the value using these command line
14:42 - arguments
14:43 - then the default value of this operation
14:46 - will be taken
14:47 - which is plus if we provide any
14:50 - argument here so hyphen hyphen let's say
14:53 - operation and we will provide the value
14:56 - of operation let's say
14:57 - minus here that is going to give us the
15:00 - subtraction
15:01 - of these two values so whatever argument
15:05 - you will provide here
15:06 - the default value is overwritten by that
15:09 - value so this is how you can use the
15:11 - optional parameters
15:13 - and in order to use the optional
15:15 - parameters you also need to give
15:18 - the name of your optional parameters now
15:21 - whenever you use the optional parameters
15:23 - it depends upon you at which position
15:26 - you want to use
15:28 - these optional parameters so i can use
15:31 - for example num one at first position
15:34 - operation at the second position let's
15:37 - say operation
15:38 - is multiply now and then i will provide
15:42 - the num2
15:43 - at the third position it doesn't matter
15:46 - now because the position is irrelevant
15:50 - here
15:50 - because we are providing the name of the
15:53 - variable
15:54 - and then the value so value will be
15:57 - passed
15:58 - using the name variable and not by the
16:00 - position
16:01 - now there is one more notation which you
16:03 - can use with
16:04 - these optional parameters and this
16:08 - is the short form of whatever parameter
16:12 - name you want to give
16:13 - so let's say i want to give n as the
16:16 - number one
16:17 - and let's say i want to give i as number
16:20 - two
16:21 - and for operation i want to provide this
16:23 - letter
16:24 - o so this is the short form of these
16:27 - three values so n is for number one
16:31 - i is for number two and o is for
16:33 - operation
16:34 - and also in front of each and every
16:37 - letter here we need to provide
16:39 - a single hyphen so either you can
16:42 - provide this kind of notation
16:44 - with a explanatory keyword and double
16:47 - hyphen
16:48 - or a single letter and a single hyphen
16:51 - in front of it so now in order to use
16:54 - this kind of notation
16:55 - what i can do here is first of all let
16:58 - me call python and the name of my script
17:00 - and let's say first of all we call the
17:03 - help
17:04 - and you will see this help shows this
17:07 - letter also
17:08 - which is minus h or help and for our
17:12 - parameters
17:13 - we have minus n or the number 1
17:16 - minus i or number two or minus o
17:20 - or operation so the way we provide these
17:22 - shorthand notation
17:24 - is we just need to write the name of the
17:26 - notation which is minus n for number one
17:29 - let's provide the value of number one
17:32 - and minus i for number two so you use
17:35 - this equal to symbol
17:37 - in between the value and your shorthand
17:40 - notation
17:41 - not the space so this time i'm using the
17:44 - equals to symbol
17:45 - so i equals 70 and
17:48 - the value of minus o is equal to
17:52 - let's say plus this time and then press
17:54 - enter
17:55 - and it's going to give you the addition
17:57 - of these two numbers
17:58 - so for this shorthand notation you use
18:01 - the equal to symbol
18:02 - not the space in between the name and
18:05 - the value
18:06 - so this is how you can provide the
18:08 - command line arguments
18:09 - to your python script

Cleaned transcript:

in this video i'm going to show you how you can pass the command line arguments to your python script so to start with i have a script called myparser.py and in order to pass the command line arguments to this dot py file first of all we need to import a builtin module which is called arg parse module now using this arg parse module we can parse the parameters which is passed using the command line to this script so let's see how we can pass those parameters so first of all i'm going to declare a variable called parser and then i'm going to use this arg parse keyword which we have imported and there is a special class here which is called argument parser which we are going to use now this argument parcel class takes an optional parameter which is the description which we will see little bit later so the first step is to initialize your parser the second step is to add the parameters which you want to parse so this we will see in a bit but let's see the next step which is actually parsing the arguments which is passed using the command line so let me declare one more variable which will be our arguments which we want to parse and then we will use this parser variable which we have created and call the method called parse arg so now once you have used this method parse args with this parser variable then you will have all your arguments into this odds variable so let's run the script and let's see what happens when we run this script so in order to open the terminal in pycharm you can just click on this option which says terminal and this is going to open the terminal in the pie charm ide now it depends in which project you are working in so if you see some other location which is opened using this terminal you just need to provide the path where your project is so i'm going to right click on my file and then i'm going to copy the path of this file so right click and copy path and i will just do cd and i will paste this path which i have copied and i will remove the name of the file because i just want to cd to the directory in which i'm working in so now i'm in the directory in which this myparser.py file is present now in order to run this python script i can use this python keyword and then the name of my file which is my parser dot py file now whenever you import the arg pass module and you initialize this module there is a special help parameter which is available so you can write minus h here and then press enter and you will see that this help parameter is automatically present whenever you import this arg pass module and initialize it so this is one way of running your script you can also run your script on your windows or linux terminal the process is same so you need to cd to the directory in which you are working in so i'm going to once again copy the path and paste it here and once i'm in this directory i will just write python and the name of the script which is my parser and then hyphen h which is for help and it's going to give me the same kind of result so you can run your python script either on the windows command prompt or in the pycharm the choice is totally yours so i'm going to use this pie charm terminal so let me minimize this terminal for now now as i said you can pass some argument here in the argument parser class so the argument which you can provide here is that description which is the description you want to give whenever somebody runs this script so this is going to be the description whenever you run your file on the terminal so i'm going to once again run this python file and you can see the description is printed here now now how to pass the command line arguments so you can pass two kinds of arguments as the command line arguments one are called positional arguments and other are called optional arguments so first of all we will see how to pass the positional arguments so in order to pass the positional argument you use your parser variable and then call a method called add argument here and first of all inside the add argument you give the name of your argument for example i want the user to provide two numbers and i want to perform some mathematical operations on these two numbers so i can store these two numbers into some variables and these variables i can define here so the first variable name i want to provide here is num1 and then as the second argument you provide the help parameter so in the help what you do is you provide some help about the argument which you want to receive from the user in the same way i can provide the number 2 argument and i can just change the name of the argument 2 and the help description of argument 2. now the third parameter or argument which i want to provide using command line is the operation so let's say we want that user should provide some kind of mathematical operations to work with so in the help i can just write provide operator so these are the three arguments which i want the user to provide now once these three arguments are provided by the users these three arguments will be passed using this function and then all these three argument lists will be assigned to this args variable so we can just print the value of this arg variable and let's see what is the content inside the args so i'm going to open the terminal once again so after the python keyword and the name of your script you provide the first number which is let's say 84 the second number let's say it's 41 and the operator so let's say i want to provide the operator plus to add these two numbers and then i'm going to press enter and you will see this print statement is going to print the value of number 1 which is 84 the value of number 2 which is 41 and the value of operation which is plus here you will also observe that all these three numbers are present in the form of string so in order to work on these numbers we need to convert these numbers first into a float value or the integer value and then only we will be able to work on these numbers so how we can provide the type of these two numbers so that our script understands that these are the numbers and not the strings so the way in which you provide the type of the argument is using the type keyword here and then you provide whatever type you want for your argument or the parameter so here i have written type is equal to float and in the second argument also i have written type is equal to float and by default the type is string so if you don't provide any type it's a string so now we have provided a type to our first two numbers and let's run the script once again so now you will see that these values are no longer string values but now they are some float values also whenever you run the script with minus h keyword which is the help keyword it's going to show that these are the positional arguments which is required by the script which is number one number two and operation and also we can use minus h as the help and also it's going to give us the description of this script which we have provided here so now we can perform some mathematical operations on the arguments so let's perform some mathematical operations on the arguments so we can extract these argument using the args keyword and then calling the name of the variable which we have provided so args dot number one is going to give you the value of number one so what i want to do here is i want to know the operation first of all so args dot operation and if this operation is equal to plus then i will just add these two numbers so i'm going to just say args dot num 1 plus args dot num 2. now after adding these two numbers i need to save these numbers into a variable so let's create a variable called result here and i will initialize this result by none so initial value of result is none and then we will assign the addition of the two numbers to the result parameter and then at the end we will just print the value of the result and the same i will do for the other operations also so let's define some more operations second operation i want to provide here is the subtraction third operation i want to provide here is the multiplication and let's say fourth argument i want to provide here is the power of operation so here i can use a inbuilt function which is p o w and then i will just pass the first number as the first parameter so args dot num one and the second number as the second parameter so now let's run the script once again and let's see what happens when we run this script once again so i'm going to provide the same parameters 84 41 and operation plus here and then press enter and you will see the result here is the addition of these two numbers because our plus condition is matte for the operation and then it's going to just add these two numbers and print the result we can make this uh result little bit more sensible by just saying this is our result so i'm going to just say result colon and then provide the comma here and once again let's run the same script with the minus operation this time so i'm going to provide the minus operation now and then press enter and it's going to still give me the addition this is strange because i think i have done some mistake here which is i haven't provided or changed these operators from here so in the case of minus i need to provide the hyphen here and in the case of multiplication i need to provide the s tricks here so let's run the code or script once again with minus and now you will see as a result you will see the subtraction of these two numbers let's run this script with pow and then press enter and it's going to give me the power of operation of these two numbers so this is how you can provide the positional parameters now as the name suggests these are the positional parameters that means every parameter have its own position and this position is defined by the declaration here so the first position is for the number one second position is for number two and the third position is for this operation parameter so if you change the position for example i will provide the plus operator first and then these two numbers this will give me an error and it will say that i was expecting a number as the first argument but you have provided some string parameter here also if you don't provide any parameter so i'm going to just say first two numbers i will provide but operations i haven't defined then also it's going to give me an error and this will say that operation is not defined because we haven't defined any operation here so it's going to give us an error so there is one way of solving this error which is by providing the default value and in order to provide the default value you use the keyword default and then provide the value of it so let's say by default the operation is plus always and when i run this code once again it's going to still give me this error because these are the positional arguments we cannot change the position of this argument and we cannot provide the optional values here and that's where the optional parameters comes in so using these optional parameters you can provide the optional values so let me show you how you can provide the optional parameters so the way you provide the optional parameters is by simply adding double hyphen symbol in front of your parameters so i have provided double hyphen symbol in front of each and every argument which is provided to the script and let's go to the terminal once again and this time we need to provide the name of the parameter which is hyphen hyphen num 1 space the value of it for example 80 and then we need to provide the second number which is hyphen hyphen num 2 and then after the space the value of number 2 and let's say i don't want to provide the operation now and when i press enter here it's still going to give me the result which is plus because now we have the default value of operation which is plus and if i don't provide the value using these command line arguments then the default value of this operation will be taken which is plus if we provide any argument here so hyphen hyphen let's say operation and we will provide the value of operation let's say minus here that is going to give us the subtraction of these two values so whatever argument you will provide here the default value is overwritten by that value so this is how you can use the optional parameters and in order to use the optional parameters you also need to give the name of your optional parameters now whenever you use the optional parameters it depends upon you at which position you want to use these optional parameters so i can use for example num one at first position operation at the second position let's say operation is multiply now and then i will provide the num2 at the third position it doesn't matter now because the position is irrelevant here because we are providing the name of the variable and then the value so value will be passed using the name variable and not by the position now there is one more notation which you can use with these optional parameters and this is the short form of whatever parameter name you want to give so let's say i want to give n as the number one and let's say i want to give i as number two and for operation i want to provide this letter o so this is the short form of these three values so n is for number one i is for number two and o is for operation and also in front of each and every letter here we need to provide a single hyphen so either you can provide this kind of notation with a explanatory keyword and double hyphen or a single letter and a single hyphen in front of it so now in order to use this kind of notation what i can do here is first of all let me call python and the name of my script and let's say first of all we call the help and you will see this help shows this letter also which is minus h or help and for our parameters we have minus n or the number 1 minus i or number two or minus o or operation so the way we provide these shorthand notation is we just need to write the name of the notation which is minus n for number one let's provide the value of number one and minus i for number two so you use this equal to symbol in between the value and your shorthand notation not the space so this time i'm using the equals to symbol so i equals 70 and the value of minus o is equal to let's say plus this time and then press enter and it's going to give you the addition of these two numbers so for this shorthand notation you use the equal to symbol not the space in between the name and the value so this is how you can provide the command line arguments to your python script
