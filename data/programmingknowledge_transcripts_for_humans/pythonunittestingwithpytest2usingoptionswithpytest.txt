With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - Python unit testing tutorial for
00:04 - beginners using PI test in the last
00:06 - video we were able to create our unit
00:10 - test and run them using PI test now in
00:14 - the last video I have created two tests
00:17 - and these were the tests I have written
00:20 - for these two simple functions which
00:24 - were product and the add function so in
00:28 - the last video we have written two test
00:30 - functions for our ad and product
00:33 - functions which were able to test those
00:36 - functions using these numbers now
00:39 - additionally I have added two more test
00:42 - functions here and these two test
00:44 - functions I have added to test the
00:47 - strings with the add function and the
00:50 - product function so using this plus
00:53 - operator we can also add two strings
00:57 - right so I have added the string test
01:00 - for the add function and the product
01:03 - function here now the first thing I want
01:05 - to show here is you can add any
01:08 - comparison operator here so it's not
01:10 - necessary that you need to use this
01:12 - equal to operator here you can also
01:14 - write for example greater than operator
01:17 - or greater than equals to operator or
01:20 - the less than operator or less than
01:23 - equals to operator or not equals to
01:25 - operator so you can use all these
01:27 - comparison operator with your assert
01:30 - statement additionally you can use this
01:33 - is keyword to test whether something is
01:36 - something so using this is keyword I am
01:39 - testing here that the result which I got
01:43 - using this ad function over the strings
01:46 - is it a string or not
01:49 - so using this type I am just finding out
01:52 - the type of the result and I'm checking
01:54 - if this result is a string or not you
01:58 - can also use in operator or not in
02:01 - operator so using this not in keyword we
02:05 - are checking whether the string is
02:07 - inside our result or not so this string
02:10 - or let's say this string is not inside
02:13 - our result so this assert is going to
02:16 - pass because this string is not present
02:18 - in our result additionally you can also
02:21 - use this in keyword and you can check
02:25 - whether some string is inside your
02:29 - result or not so i can also write hello
02:31 - in result which will check if this
02:33 - keyboard is inside our result or not now
02:36 - the next thing which i want to show here
02:38 - is let's say you just want to run one
02:42 - test from here which is test ad and you
02:44 - don't want to run any other tests how
02:48 - you can do it using command line so you
02:50 - can just write pi test command and the
02:53 - name of your test file which is test
02:57 - underscore math underscore func in my
03:00 - case and then you can add double colon
03:03 - here and then gave the name of your test
03:05 - so let's say I just want to run that
03:08 - test ad so I'm going to just run this
03:11 - test and you can see it's going to only
03:14 - run the first test
03:16 - let me just add minus V here which is
03:20 - going to show which test has passed and
03:23 - you can see this test has been passed
03:25 - which is test ad and let me just clear
03:29 - the terminal now the next option which I
03:31 - want to show here is - key so once again
03:35 - I'm going to just write PI test here and
03:39 - we will once again add the - V for
03:42 - bobo's and you can use a special option
03:46 - which is - k and then you can give any
03:50 - expression which you want to match using
03:54 - this - K option so let's say we only
03:57 - want to run the ad test so we have to
04:01 - add test one is test underscore ad and
04:04 - other is test underscore ad underscore
04:08 - string so I just want to run the test
04:11 - for the add a function so here inside
04:16 - the double quotes I can just write ad
04:19 - and then press ENTER and it's going to
04:22 - run the test which contains ad keyword
04:26 - or ad
04:27 - Tring so you can see it ran test
04:29 - underscore ad and test underscore ad
04:32 - underscore string you can also use or
04:37 - operator here so let's say you want to
04:39 - run the test which contains ad or which
04:43 - contains string keyword and when I am
04:46 - going to run the test it's going to run
04:49 - all those tests which contains either
04:52 - add or the string keyword so there are
04:55 - three tests which fulfills this
04:57 - condition and all those three tests are
05:00 - performed and other tests will be D
05:03 - selected so you can see for item and one
05:06 - item is D selected here also you can use
05:09 - the and instead of or so I'm going to
05:11 - just write and and then press ENTER and
05:14 - it's going to run only those tests which
05:17 - contains ad and string both so there is
05:21 - only one test name which contains ad and
05:26 - string both which is this one so only
05:28 - this will be executed and the other
05:30 - three tests will be deselected let me
05:33 - once again clear the terminal now the
05:35 - next option which I want to show here is
05:37 - the - Emma
05:39 - option so once again I'm going to just
05:43 - write here - M and after this - M you
05:47 - can provide any mark expression so let
05:52 - me go to my code and here I just need to
05:56 - import the PI test first of all so let
05:58 - me import PI test and here you will see
06:02 - that it's showing me the squiggly line
06:05 - because of my IDE which is PyCharm
06:08 - so because I have installed a PI test
06:11 - using pip on the command line which is
06:14 - not recognized by my pycharm IDE that's
06:17 - why it's showing me the squiggly line
06:20 - but I am running my tests using command
06:22 - line so this will work so don't worry
06:25 - about this squiggly line the import will
06:27 - work and after that what I can do here
06:30 - is I can add a decorator so I can just
06:33 - write PI test dot mark dot any
06:37 - expression which you want to give here
06:38 - so this test
06:41 - and test product is for the numbers so
06:44 - we can write number here and also we can
06:47 - add the same decorator for that test
06:51 - product and for the other two tests we
06:54 - can just write that these tests are for
06:57 - the strings so this expression is upon
07:00 - you so you can give any expression here
07:03 - which you want to match later using - M
07:07 - option so I'm going to also add this
07:09 - decorator over the other string function
07:12 - also so we have two markers now one is
07:16 - number and other is the string so now
07:19 - after - M you can give the mark
07:22 - expression name so let's say I'm going
07:25 - to just write number here and then press
07:27 - ENTER and it's going to run all the
07:30 - tests which have the mark number which
07:33 - is the test add and test product now
07:36 - let's run the test which have the mark
07:40 - string so I'm going to just write string
07:42 - and then press ENTER and it's showing me
07:45 - four D selected because I forgot this s
07:48 - after the string so let me just add this
07:52 - s and then press I can enter again and
07:55 - you can see it runs only those tests
07:58 - which have string mark on top of them so
08:01 - this is the string and this is the
08:03 - string mark so those two tests were
08:05 - executed and other two tests were D
08:08 - selected let me just clear the terminal
08:11 - once again now the next option which I
08:13 - want to show here is - X option so once
08:17 - again I'm going to just write PI test -
08:20 - V and then - X now this - X means exist
08:25 - first
08:26 - so whenever first failure occurs in your
08:30 - test the PI test will exit from the
08:32 - execution of your test so let's just add
08:36 - some failure assertion here so I'm going
08:40 - to add the failure here so let's say I'm
08:44 - just checking the failed assertion here
08:48 - just to check whether this - X works or
08:52 - not so I'm going to just press Enter
08:54 - now and you can see first test was run
08:58 - which was passed but the other test
09:01 - failed so it has shown us the stack
09:04 - trace of the failed test and after that
09:08 - the text execution was stopped so after
09:11 - two tests because the failure occurred
09:13 - the other two tests which was supposed
09:17 - to be executed are not executed because
09:20 - of this - X option so as soon as the
09:24 - first failure occurs your test will exit
09:28 - now let's say you don't want to see this
09:31 - tech trace after the failure of your
09:33 - test so this is all the information
09:36 - which is given to you about what
09:39 - assertion has failed or not so let's say
09:42 - we don't want to see this so how to just
09:46 - skip that stack trace you can add - - TB
09:51 - is equal to no and this is going to
09:54 - disable the stack trace and then press
09:57 - Enter and you can see now this text
10:00 - trace is not printed only the success or
10:04 - the failure will be printed but not the
10:07 - stack trace let me clear the terminal
10:10 - once again
10:10 - and this time I want to show one more
10:13 - option which is max fail so here you can
10:16 - just write - - max fail option and then
10:22 - gave the number in front of it after the
10:25 - equals to symbol so let's say we just
10:28 - write max fail to here then it's going
10:31 - to wait for the maximum number of
10:34 - failure and then it will exit so let me
10:37 - just run this test so you can see all
10:39 - four tests has been executed because
10:41 - maximum failure we were expecting is two
10:45 - that's why all four were executed
10:48 - because there was only one failure let's
10:51 - say I just make it one so now the value
10:55 - of max fail is 1 and then I press Enter
10:58 - and you will see after the first failure
11:01 - it's going to exit because we have
11:04 - provided max field one and this is the
11:07 - number of failures
11:08 - which we are expecting after that your
11:10 - test will be exited so let me just clear
11:13 - the terminal once again and let me show
11:15 - you one more option so this time I want
11:19 - to show you the skip option so let's say
11:21 - I just remove all these markers from
11:24 - here and and now I want to add a mark
11:28 - which is skip so just add this decorator
11:31 - on top of your test which is at the rate
11:35 - test dot mark dot skip and then inside
11:39 - the parenthesis you can give the reason
11:42 - for the skip so here you can just write
11:45 - reason equals and whatever reason you
11:49 - want to give here so I'm going to just
11:50 - write do not run number add test ok so
11:55 - this is the reason which will be printed
11:57 - and when I will just execute my test
12:01 - once again with - V you can see this
12:05 - first test is kept so it's not executed
12:08 - it skipped and all the other three tests
12:11 - were executed let me just fix this
12:14 - second test so it's going to pass and
12:17 - once again let me just run this test and
12:21 - you can see all other tests were passed
12:24 - and the first test is skipped because we
12:27 - have added this skip decorator on top of
12:31 - the test add function also there is a
12:39 - skip if option available so here instead
12:42 - of skip you can just write skip if so
12:46 - this skip if is going to check for some
12:49 - condition so let's say I'm going to
12:52 - import the sis
12:54 - module here which is going to give me
12:57 - the information about the Python version
13:00 - I'm running and then as a first argument
13:02 - I can first of all give some condition
13:05 - so I'm going to just write this dot
13:07 - version info which is going to give me
13:10 - the version of Python available and I'm
13:12 - going to check if this version is less
13:14 - than let's say 3.3 then I want to skip
13:19 - this test so I'm going to once again
13:22 - let me clear the terminal and once again
13:25 - run the test and I see some failure here
13:28 - which is here I added dot instead of
13:33 - comma so you need to separate this major
13:35 - and minor version using comma so this
13:38 - means three point three python version
13:41 - and once again I'm going to run the test
13:43 - and then press ENTER and now you can see
13:46 - all four tests were executed because
13:49 - this condition was not mad now let's say
13:53 - I want to just give the opposite
13:56 - condition of that which means I want to
13:58 - skip if I have the Python version
14:01 - greater than three point three which I
14:03 - have I have the Python version three
14:07 - point seven let's check it using Python
14:10 - command so I'm going to just write
14:11 - Python - - version and then press ENTER
14:15 - and you can see I have 3.7.0 version and
14:19 - let's run the test once again and now
14:22 - you can see this test is skipped because
14:25 - this condition is met now the next
14:28 - option I want to show here is - as
14:31 - options so let me just make this
14:32 - condition like this so this test will
14:36 - not be skipped and the next option we
14:38 - are going to see is the hyphen s option
14:41 - so let me clear the terminal and let's
14:45 - see which option I am talking about
14:47 - which is - s and this option you can use
14:51 - to print any output which you want to
14:54 - print using let's say print function so
14:58 - let's say I want to add a print
15:00 - statement here so I'm going to just add
15:03 - print and then let's say I want to just
15:07 - print the addition of seven and three
15:11 - and four
15:12 - just knowing whether this print
15:15 - statement has been executed I'm going to
15:17 - add this string here so we know that
15:20 - this print statement has been executed
15:23 - so now when I execute my PI test without
15:26 - the hyphen s option first you will see
15:29 - there is no print statement which is
15:32 - executed now if I just add - s
15:36 - yeah which will allow this print
15:38 - statement to be executed and now you
15:41 - will see that this print statement has
15:44 - been executed and this line is printed
15:47 - using this print statement so if you
15:51 - want to print all the print statements
15:53 - then use hyphen s option or you can also
15:57 - use the option which is - - capture is
16:01 - equal to no and then press ENTER which
16:04 - is also going to do the same so either
16:07 - you can use hyphen s or you can use - -
16:11 - capture is equal to no so let me clear
16:14 - this terminal one last time and the last
16:17 - option which I want to show here is the
16:20 - - queue option which is the quiet mode
16:24 - so let me just execute this pie test
16:26 - once again and you can see all this
16:28 - information is printed and when I add -
16:33 - queue here which is the quiet mode you
16:35 - can see no information is printed here
16:39 - about the test which test is passed only
16:41 - the important information is printed
16:44 - which is for test passed in this much
16:46 - amount of seconds if I remove the - V
16:50 - here from here you will see all the
16:52 - other output is gone and only for passed
16:55 - in whatever amount of seconds is printed
16:58 - so this is the quiet mode which will not
17:01 - print unnecessary information it's going
17:04 - to just show you how many tests passed
17:06 - and how many tests failed so this is how
17:09 - you can use some options with pi test
17:12 - command I hope you have enjoyed this
17:14 - video and I will see you in the next
17:16 - video

Cleaned transcript:

hey guys welcome to the next video on Python unit testing tutorial for beginners using PI test in the last video we were able to create our unit test and run them using PI test now in the last video I have created two tests and these were the tests I have written for these two simple functions which were product and the add function so in the last video we have written two test functions for our ad and product functions which were able to test those functions using these numbers now additionally I have added two more test functions here and these two test functions I have added to test the strings with the add function and the product function so using this plus operator we can also add two strings right so I have added the string test for the add function and the product function here now the first thing I want to show here is you can add any comparison operator here so it's not necessary that you need to use this equal to operator here you can also write for example greater than operator or greater than equals to operator or the less than operator or less than equals to operator or not equals to operator so you can use all these comparison operator with your assert statement additionally you can use this is keyword to test whether something is something so using this is keyword I am testing here that the result which I got using this ad function over the strings is it a string or not so using this type I am just finding out the type of the result and I'm checking if this result is a string or not you can also use in operator or not in operator so using this not in keyword we are checking whether the string is inside our result or not so this string or let's say this string is not inside our result so this assert is going to pass because this string is not present in our result additionally you can also use this in keyword and you can check whether some string is inside your result or not so i can also write hello in result which will check if this keyboard is inside our result or not now the next thing which i want to show here is let's say you just want to run one test from here which is test ad and you don't want to run any other tests how you can do it using command line so you can just write pi test command and the name of your test file which is test underscore math underscore func in my case and then you can add double colon here and then gave the name of your test so let's say I just want to run that test ad so I'm going to just run this test and you can see it's going to only run the first test let me just add minus V here which is going to show which test has passed and you can see this test has been passed which is test ad and let me just clear the terminal now the next option which I want to show here is key so once again I'm going to just write PI test here and we will once again add the V for bobo's and you can use a special option which is k and then you can give any expression which you want to match using this K option so let's say we only want to run the ad test so we have to add test one is test underscore ad and other is test underscore ad underscore string so I just want to run the test for the add a function so here inside the double quotes I can just write ad and then press ENTER and it's going to run the test which contains ad keyword or ad Tring so you can see it ran test underscore ad and test underscore ad underscore string you can also use or operator here so let's say you want to run the test which contains ad or which contains string keyword and when I am going to run the test it's going to run all those tests which contains either add or the string keyword so there are three tests which fulfills this condition and all those three tests are performed and other tests will be D selected so you can see for item and one item is D selected here also you can use the and instead of or so I'm going to just write and and then press ENTER and it's going to run only those tests which contains ad and string both so there is only one test name which contains ad and string both which is this one so only this will be executed and the other three tests will be deselected let me once again clear the terminal now the next option which I want to show here is the Emma option so once again I'm going to just write here M and after this M you can provide any mark expression so let me go to my code and here I just need to import the PI test first of all so let me import PI test and here you will see that it's showing me the squiggly line because of my IDE which is PyCharm so because I have installed a PI test using pip on the command line which is not recognized by my pycharm IDE that's why it's showing me the squiggly line but I am running my tests using command line so this will work so don't worry about this squiggly line the import will work and after that what I can do here is I can add a decorator so I can just write PI test dot mark dot any expression which you want to give here so this test and test product is for the numbers so we can write number here and also we can add the same decorator for that test product and for the other two tests we can just write that these tests are for the strings so this expression is upon you so you can give any expression here which you want to match later using M option so I'm going to also add this decorator over the other string function also so we have two markers now one is number and other is the string so now after M you can give the mark expression name so let's say I'm going to just write number here and then press ENTER and it's going to run all the tests which have the mark number which is the test add and test product now let's run the test which have the mark string so I'm going to just write string and then press ENTER and it's showing me four D selected because I forgot this s after the string so let me just add this s and then press I can enter again and you can see it runs only those tests which have string mark on top of them so this is the string and this is the string mark so those two tests were executed and other two tests were D selected let me just clear the terminal once again now the next option which I want to show here is X option so once again I'm going to just write PI test V and then X now this X means exist first so whenever first failure occurs in your test the PI test will exit from the execution of your test so let's just add some failure assertion here so I'm going to add the failure here so let's say I'm just checking the failed assertion here just to check whether this X works or not so I'm going to just press Enter now and you can see first test was run which was passed but the other test failed so it has shown us the stack trace of the failed test and after that the text execution was stopped so after two tests because the failure occurred the other two tests which was supposed to be executed are not executed because of this X option so as soon as the first failure occurs your test will exit now let's say you don't want to see this tech trace after the failure of your test so this is all the information which is given to you about what assertion has failed or not so let's say we don't want to see this so how to just skip that stack trace you can add TB is equal to no and this is going to disable the stack trace and then press Enter and you can see now this text trace is not printed only the success or the failure will be printed but not the stack trace let me clear the terminal once again and this time I want to show one more option which is max fail so here you can just write max fail option and then gave the number in front of it after the equals to symbol so let's say we just write max fail to here then it's going to wait for the maximum number of failure and then it will exit so let me just run this test so you can see all four tests has been executed because maximum failure we were expecting is two that's why all four were executed because there was only one failure let's say I just make it one so now the value of max fail is 1 and then I press Enter and you will see after the first failure it's going to exit because we have provided max field one and this is the number of failures which we are expecting after that your test will be exited so let me just clear the terminal once again and let me show you one more option so this time I want to show you the skip option so let's say I just remove all these markers from here and and now I want to add a mark which is skip so just add this decorator on top of your test which is at the rate test dot mark dot skip and then inside the parenthesis you can give the reason for the skip so here you can just write reason equals and whatever reason you want to give here so I'm going to just write do not run number add test ok so this is the reason which will be printed and when I will just execute my test once again with V you can see this first test is kept so it's not executed it skipped and all the other three tests were executed let me just fix this second test so it's going to pass and once again let me just run this test and you can see all other tests were passed and the first test is skipped because we have added this skip decorator on top of the test add function also there is a skip if option available so here instead of skip you can just write skip if so this skip if is going to check for some condition so let's say I'm going to import the sis module here which is going to give me the information about the Python version I'm running and then as a first argument I can first of all give some condition so I'm going to just write this dot version info which is going to give me the version of Python available and I'm going to check if this version is less than let's say 3.3 then I want to skip this test so I'm going to once again let me clear the terminal and once again run the test and I see some failure here which is here I added dot instead of comma so you need to separate this major and minor version using comma so this means three point three python version and once again I'm going to run the test and then press ENTER and now you can see all four tests were executed because this condition was not mad now let's say I want to just give the opposite condition of that which means I want to skip if I have the Python version greater than three point three which I have I have the Python version three point seven let's check it using Python command so I'm going to just write Python version and then press ENTER and you can see I have 3.7.0 version and let's run the test once again and now you can see this test is skipped because this condition is met now the next option I want to show here is as options so let me just make this condition like this so this test will not be skipped and the next option we are going to see is the hyphen s option so let me clear the terminal and let's see which option I am talking about which is s and this option you can use to print any output which you want to print using let's say print function so let's say I want to add a print statement here so I'm going to just add print and then let's say I want to just print the addition of seven and three and four just knowing whether this print statement has been executed I'm going to add this string here so we know that this print statement has been executed so now when I execute my PI test without the hyphen s option first you will see there is no print statement which is executed now if I just add s yeah which will allow this print statement to be executed and now you will see that this print statement has been executed and this line is printed using this print statement so if you want to print all the print statements then use hyphen s option or you can also use the option which is capture is equal to no and then press ENTER which is also going to do the same so either you can use hyphen s or you can use capture is equal to no so let me clear this terminal one last time and the last option which I want to show here is the queue option which is the quiet mode so let me just execute this pie test once again and you can see all this information is printed and when I add queue here which is the quiet mode you can see no information is printed here about the test which test is passed only the important information is printed which is for test passed in this much amount of seconds if I remove the V here from here you will see all the other output is gone and only for passed in whatever amount of seconds is printed so this is the quiet mode which will not print unnecessary information it's going to just show you how many tests passed and how many tests failed so this is how you can use some options with pi test command I hope you have enjoyed this video and I will see you in the next video
