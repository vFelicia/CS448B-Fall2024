With timestamps:

00:00 - hey what's going on guys welcome back to
00:01 - our YouTube channel this is John from
00:03 - programming knowledge and in this video
00:05 - guys we're going to discuss another type
00:07 - of loop which is the do-while so from
00:10 - the previous tutorial we already have
00:12 - discussed the while loop okay and then
00:14 - we implemented a simple iteration
00:17 - program where we can see the value of
00:20 - the variable each of the iteration of
00:23 - our while loop now the difference
00:25 - between while loop and dowhile is that
00:27 - the while loop will try to evaluate
00:31 - first the condition and then if this
00:34 - condition is you know to return true
00:36 - then it will execute the statement
00:39 - inside this particular while loop
00:42 - whereas when we are trying to use the
00:44 - do-while loop then the statements inside
00:48 - the loop will you know execute at least
00:51 - once before the condition is being
00:54 - evaluated so the syntax for that is like
00:58 - this we will just remove this for now on
01:00 - this lines of the window from the
01:04 - previous tutorial okay so this is the
01:11 - format or basic format of the do-while
01:13 - statement or do-while loop in C so
01:17 - basically we have the do keyword and
01:20 - then opening closed curly braces and
01:22 - then the statements or group of
01:25 - statements okay now after the curly
01:30 - braces then it will have this the yn
01:34 - keyword and then open and close
01:37 - parentheses with the condition inside it
01:39 - so as I've said earlier guys that this
01:42 - particular loop will try to execute at
01:45 - least once before the condition is being
01:48 - evaluated
01:50 - okay so as you can see if you wanna like
01:54 - execute first some statements before you
01:56 - can evaluate the condition so so the
02:01 - Doyle loop is the way to go so we will
02:05 - try to create another program guys
02:07 - showcasing how this particular do-while
02:10 - statement or do I know looks like
02:13 - how it works so basically guess we could
02:18 - initialize some variables in so for
02:21 - example the N so int N equals 1 and then
02:27 - we can also declare another variable
02:31 - which is x so basically what we are
02:35 - doing here or what we are declaring here
02:38 - is two variables for our do-while and
02:42 - the n represents the number I mean the
02:48 - value of the ith on or the value of the
02:51 - variable each iteration and then of
02:54 - course the x is the number of times the
02:57 - loop should execute okay now inside our
03:02 - dowhile or do statement we could add a
03:08 - printf statement here and then could say
03:13 - see do-while loops and then the format
03:19 - specifier percent d backslash end and of
03:26 - course the end variable ok so we have
03:32 - this printf statement so basically what
03:35 - what we're trying here is we're trying
03:37 - to display the value of n every you know
03:43 - execution of this particular statements
03:46 - okay and in here below the spin of
03:50 - statement we could increment the n by
03:55 - you know using this statement and it was
03:59 - n plus 1 or you could simply use the n
04:04 - plus plus version of this particular
04:08 - statement so N equals n plus 1 so again
04:11 - every iteration we would try to
04:14 - increment the value of or n plus 1 and
04:17 - then inside here the while and then open
04:22 - close parenthesis we could add the
04:25 - condition so for
04:27 - condition you can add the end and then
04:30 - less than or equal to the number of
04:35 - times we want this wine or do-while to
04:39 - be you know executed fake so I think
04:43 - that's all for this new wine statement
04:46 - so we could try to run our program and
04:50 - then build and run and see how this
04:55 - particular program works okay so
04:58 - basically guys I will try to explain it
05:02 - to you how this or how we cut this
05:07 - output so from the initial value of our
05:13 - n we have executed the do statement
05:19 - right here so we printed out like the
05:23 - value SC do-while loops 10% t and then
05:28 - the value of our n is 1 okay so after
05:32 - this iteration we increment the value of
05:38 - our n by 1 so that's n equals n plus 2
05:43 - okay
05:43 - or I mean 1 and plus 1 semicolon and
05:49 - then of course we will try to evaluate
05:51 - this in our condition so 2 is less than
05:54 - or equal to x which is 5 so of course 2
05:59 - is less than 5 so that makes sense and
06:02 - then it will try to execute the
06:06 - statements inside the dense curly braces
06:11 - okay then printf see do-while loops and
06:15 - then of course it will try to output the
06:18 - value 2 okay after this the N will be
06:24 - incremented again by 1 so N equals n
06:27 - plus 1 so the value now or the n value
06:30 - now becomes 3 and then evaluate it in
06:35 - our open and close parenthesis so 3
06:41 - less than or equal to 5 so obviously 3
06:45 - is less than 5 so it will try to
06:49 - implement or execute again
06:51 - the statement inside alternative basis
06:53 - and then display 3 this will be the line
07:00 - 3 and then of course it will increment
07:03 - again the value N and it the n becomes 4
07:06 - now and then evaluated once again is 4
07:11 - less than or equal to 5 so basically
07:17 - four is you know less than 5 so it will
07:21 - execute the statement printf again
07:23 - display the value 4 and then increment
07:29 - again the end it becomes 5 and then
07:35 - after that it will try to evaluate the
07:39 - statement is less or n is less than
07:41 - equal to 5 so we have set now the value
07:45 - to 5 so 5 is equal to 5 so it will try
07:50 - to execute the statement once again and
07:54 - if the 5 value now becomes or the end
07:58 - value now becomes 6 because we try to
08:00 - increment it here so 6 will be evaluated
08:03 - inside our while statement then 6 is
08:07 - less than or equal to 5
08:10 - so that's basically not true because of
08:13 - course obviously 6 cannot be less than
08:16 - or can it even be equal to 5 so that's
08:20 - why it will try to end the loop because
08:26 - the condition returns false already ok
08:32 - so that's how the do n statement works
08:35 - and guys make sure that there is like if
08:40 - in it n of your look because there are
08:45 - cases that you know the condition will
08:48 - not be evaluated into false at some
08:52 - point in your program so that we may
08:54 - it like the infinite loop so the concept
08:58 - of infinite or infinite loop so be
09:02 - careful to place a condition here that
09:06 - will try to or like will be evaluated
09:10 - falls at some point in our program
09:11 - because you don't want to have the
09:13 - infinite loop because the program will
09:17 - run infinitely and you don't want that
09:21 - it would you know consume the memory of
09:23 - your computer so that's why you need to
09:26 - be careful with the infinite loop so
09:31 - make sure again to add a condition that
09:34 - will be evaluated as false at some point
09:36 - in your program so guys if you have more
09:39 - questions about doing do-while please
09:42 - comment down below so I am happy to
09:44 - answer your questions and guys in the
09:47 - next video we're going to try to
09:49 - implement the for loops the another type
09:53 - of loop in C okay so I think that's a
09:55 - test for this video and see in the next
09:57 - video

Cleaned transcript:

hey what's going on guys welcome back to our YouTube channel this is John from programming knowledge and in this video guys we're going to discuss another type of loop which is the dowhile so from the previous tutorial we already have discussed the while loop okay and then we implemented a simple iteration program where we can see the value of the variable each of the iteration of our while loop now the difference between while loop and dowhile is that the while loop will try to evaluate first the condition and then if this condition is you know to return true then it will execute the statement inside this particular while loop whereas when we are trying to use the dowhile loop then the statements inside the loop will you know execute at least once before the condition is being evaluated so the syntax for that is like this we will just remove this for now on this lines of the window from the previous tutorial okay so this is the format or basic format of the dowhile statement or dowhile loop in C so basically we have the do keyword and then opening closed curly braces and then the statements or group of statements okay now after the curly braces then it will have this the yn keyword and then open and close parentheses with the condition inside it so as I've said earlier guys that this particular loop will try to execute at least once before the condition is being evaluated okay so as you can see if you wanna like execute first some statements before you can evaluate the condition so so the Doyle loop is the way to go so we will try to create another program guys showcasing how this particular dowhile statement or do I know looks like how it works so basically guess we could initialize some variables in so for example the N so int N equals 1 and then we can also declare another variable which is x so basically what we are doing here or what we are declaring here is two variables for our dowhile and the n represents the number I mean the value of the ith on or the value of the variable each iteration and then of course the x is the number of times the loop should execute okay now inside our dowhile or do statement we could add a printf statement here and then could say see dowhile loops and then the format specifier percent d backslash end and of course the end variable ok so we have this printf statement so basically what what we're trying here is we're trying to display the value of n every you know execution of this particular statements okay and in here below the spin of statement we could increment the n by you know using this statement and it was n plus 1 or you could simply use the n plus plus version of this particular statement so N equals n plus 1 so again every iteration we would try to increment the value of or n plus 1 and then inside here the while and then open close parenthesis we could add the condition so for condition you can add the end and then less than or equal to the number of times we want this wine or dowhile to be you know executed fake so I think that's all for this new wine statement so we could try to run our program and then build and run and see how this particular program works okay so basically guys I will try to explain it to you how this or how we cut this output so from the initial value of our n we have executed the do statement right here so we printed out like the value SC dowhile loops 10% t and then the value of our n is 1 okay so after this iteration we increment the value of our n by 1 so that's n equals n plus 2 okay or I mean 1 and plus 1 semicolon and then of course we will try to evaluate this in our condition so 2 is less than or equal to x which is 5 so of course 2 is less than 5 so that makes sense and then it will try to execute the statements inside the dense curly braces okay then printf see dowhile loops and then of course it will try to output the value 2 okay after this the N will be incremented again by 1 so N equals n plus 1 so the value now or the n value now becomes 3 and then evaluate it in our open and close parenthesis so 3 less than or equal to 5 so obviously 3 is less than 5 so it will try to implement or execute again the statement inside alternative basis and then display 3 this will be the line 3 and then of course it will increment again the value N and it the n becomes 4 now and then evaluated once again is 4 less than or equal to 5 so basically four is you know less than 5 so it will execute the statement printf again display the value 4 and then increment again the end it becomes 5 and then after that it will try to evaluate the statement is less or n is less than equal to 5 so we have set now the value to 5 so 5 is equal to 5 so it will try to execute the statement once again and if the 5 value now becomes or the end value now becomes 6 because we try to increment it here so 6 will be evaluated inside our while statement then 6 is less than or equal to 5 so that's basically not true because of course obviously 6 cannot be less than or can it even be equal to 5 so that's why it will try to end the loop because the condition returns false already ok so that's how the do n statement works and guys make sure that there is like if in it n of your look because there are cases that you know the condition will not be evaluated into false at some point in your program so that we may it like the infinite loop so the concept of infinite or infinite loop so be careful to place a condition here that will try to or like will be evaluated falls at some point in our program because you don't want to have the infinite loop because the program will run infinitely and you don't want that it would you know consume the memory of your computer so that's why you need to be careful with the infinite loop so make sure again to add a condition that will be evaluated as false at some point in your program so guys if you have more questions about doing dowhile please comment down below so I am happy to answer your questions and guys in the next video we're going to try to implement the for loops the another type of loop in C okay so I think that's a test for this video and see in the next video
