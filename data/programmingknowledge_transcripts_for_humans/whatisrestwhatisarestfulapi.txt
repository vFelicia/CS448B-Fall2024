With timestamps:

00:00 - hey guys in this video I'm going to try
00:02 - to explain you what is rest and what is
00:05 - our REST API so let's get started
00:08 - so first of all what is rest rest is an
00:12 - architectural style which is based on
00:15 - web standards and HTTP protocol this
00:18 - style was initially described by Roy
00:21 - fielding in the year 2000 Roy fielding
00:25 - was also one of the principal author of
00:28 - HTTP specifications now rest is an
00:31 - acronym standing for representational
00:33 - state transfer so as I said that rest is
00:37 - an architectural style of web but what
00:41 - does this even mean
00:42 - so rest is a set of design criteria and
00:44 - not the physical structure or
00:47 - architecture of the system so it's just
00:49 - a design criteria right so rest is not
00:53 - tied to web that is it doesn't depend on
00:58 - the mechanics of HTTP now in rest based
01:01 - architecture everything is a resource
01:03 - and what is a resource a rest resource
01:08 - is a data on which we want to perform
01:10 - operations so this data can be present
01:13 - on the database on the server side for
01:17 - example some employee data which have
01:21 - some unique identification for example
01:23 - employee ID now this resource is
01:26 - accessed via a common interface based on
01:29 - HTTP standard methods which we will
01:33 - learn a little bit later so let me give
01:35 - you a more concrete example so in
01:39 - rest-based architecture you have a rest
01:43 - server which provides the access to the
01:46 - resource so for example this is our rest
01:48 - server which provides the access to the
01:51 - resource
01:52 - which is there in the database or in
01:55 - some form of Records now on the other
01:58 - hand we have a rest client which is used
02:01 - to access and modify the rest resource
02:05 - now in rest architecture every resource
02:08 - should support the HTTP common operation
02:12 - so let me give you
02:13 - a more concrete example so let's say we
02:17 - want to create a weather app now weather
02:21 - app is dependent on the weather data now
02:26 - let's say this weather data is saved
02:28 - every day or every hour in some database
02:32 - which can be accessed from a rest server
02:36 - for example so in a rest-based
02:38 - architecture you have a rest server
02:41 - which provides an access to the resource
02:45 - in our case it's a weather data of some
02:48 - city for example and you have a rest
02:51 - client rest client can access or modify
02:55 - the rest resource ok now every resource
02:58 - should support the HTTP common operation
03:02 - now how this resource is identified so
03:05 - resources are identified by a global ID
03:09 - which are typically called you are eyes
03:12 - which stands for Uniform Resource
03:13 - identifier and in some cases it's called
03:16 - URL which stands for Uniform Resource
03:19 - locator so you can consider this URI as
03:22 - an address of the resource so for
03:24 - example we want to access the
03:26 - temperature of City London now this
03:29 - request can be sent from a client in the
03:32 - form of URI you can see here so for
03:35 - example first of all this resource is
03:39 - under the country name UK for example
03:42 - and then the resource name London now if
03:45 - we think logically our resource must
03:48 - have at least one URI right so if the
03:53 - resource doesn't have any URI
03:55 - how will you access this resource so in
03:58 - rest architecture you must have a URI to
04:03 - access or modify this report for example
04:05 - if you don't have this URI UK forward
04:10 - slash London how will you identify this
04:13 - resource in the rest server and these
04:17 - URI should be descriptive
04:19 - that is human possible and have some
04:23 - structure so for example in our example
04:26 - I have given this URI UK which is a
04:28 - country name and then the city name for
04:32 - example now if we want to know the
04:35 - temperature of some other city in some
04:38 - other country for example we want to
04:40 - know the temperature of city munich then
04:44 - you can write germany as a country here
04:46 - and then forward-slash you can write the
04:48 - city name which is munich in our case
04:50 - now rest allows the resource to have
04:53 - different representations right so for
04:57 - example this request is sent to a rest
05:00 - server and on the request this rest
05:03 - server accesses the London's temperature
05:07 - report and then how or in which
05:10 - representation it should send the result
05:13 - and in which format this data is
05:15 - returned to the client is called a
05:18 - representation right and rest allows
05:21 - this resource to have different
05:23 - representation it can send an XML
05:26 - representation of the result or it can
05:29 - send JSON representation of the result
05:32 - or in most of the cases it can also send
05:36 - HTML as a representation now in rest
05:40 - clients decide which kind of
05:42 - representation it want to have so for
05:46 - example client sends this information
05:48 - that I want this result in the
05:51 - representation of Jason right so client
05:55 - send this request to the server that
05:57 - which form of its presentation of result
06:00 - it wants so let's go to the rest
06:02 - definition once again so why rest is
06:06 - called representational state transfer
06:09 - so representational state transfer
06:12 - refers to transferring representation in
06:16 - our case we have seen the representation
06:18 - can be sent in the form of JSON or text
06:21 - or HTML or XML in any representation so
06:26 - we are using the representation of
06:28 - resource to transfer this resource state
06:31 - which lives on the server into the
06:35 - application state which is on the client
06:38 - ok so
06:39 - presentation because client possesses
06:42 - the information necessary to identify
06:44 - modify or delete a web resource and
06:48 - client decide which form of
06:51 - representation of the result now the
06:53 - word state comes in rest because all
06:56 - resource state information is stored on
06:58 - the client side so you can say that your
07:01 - server or your stress server is
07:04 - stateless it doesn't have any state all
07:07 - the states are stored on the client side
07:10 - and transfer because client state is
07:13 - passed from the client to the server
07:17 - through HTTP now let's discuss about
07:20 - HTTP methods supported by a rest so
07:24 - these are some of the most important
07:26 - methods which are supported by rest
07:30 - architecture so you have GATT which is
07:33 - used to retrieve representation of
07:35 - resource you have put method to update
07:38 - or modify existing resources and in some
07:42 - special cases we use put to create a new
07:45 - resource also now we have post to create
07:49 - a new resource and delete method to
07:52 - delete an existing resource now rest
07:55 - have to another less commonly used
07:58 - methods which are had and option so had
08:02 - method fetches the metadata of
08:05 - representation only so it doesn't have
08:08 - any body and the method options checks
08:12 - which HTTP method are particularly
08:14 - resource supports so most of the time
08:17 - when you are designing your rest
08:19 - architecture you will be using these
08:22 - four method which are frequently used
08:25 - when you design your rest architecture
08:28 - which are get put post and delete now
08:32 - there are five basic software
08:34 - architectural style principle in rest so
08:38 - the principle one is everything is a
08:40 - resource so in rest are contextual style
08:44 - data and functionality are considered as
08:47 - resource and are accessed using a URI
08:51 - now the second principle is
08:53 - resource is identified by a unique
08:56 - identifier using URIs
08:59 - now the third principle is you have to
09:01 - use simple and uniform interfaces so use
09:06 - simple and standard interfaces to define
09:09 - your rest architecture so for example in
09:11 - our temperature or weather information
09:14 - example we have defined a very simple
09:17 - and uniform interface so we have defined
09:20 - a country name and then inside a country
09:24 - name there is a city names so whenever
09:26 - we provide the country name and then a
09:29 - city name and for example we want to
09:31 - access the temperature of some
09:35 - particular area of that city we can even
09:38 - request that temperature using this URI
09:42 - so use simple and standard interfaces
09:45 - for defining your rest architecture now
09:49 - the fourth principle is communication is
09:51 - done by representation so for example
09:55 - rests over can send a representation in
09:58 - the form of XML or JSON or text or any
10:02 - other form on the clients request and
10:05 - the last principle is be stateless that
10:08 - means every request happens in complete
10:11 - isolation now the next question arises
10:14 - is what is a REST API so first of all we
10:18 - need to understand what is API so API
10:21 - stands for application programming
10:23 - interface and an API is a set of
10:26 - subroutine definitions protocols and
10:29 - tools for building applications software
10:32 - now our REST API is an application
10:34 - program interface that uses HTTP request
10:38 - to get put post and delete some
10:42 - resources now let me give you a simple
10:44 - example to explain a REST API so let's
10:49 - say we have a resource for example some
10:54 - dishes inside a kitchen so these can be
10:57 - considered as resources right now a
11:01 - client comes and he wants to order some
11:05 - dishes
11:07 - the kitchen but he cannot directly go to
11:09 - the kitchen and then take whatever he
11:12 - wants so the user uses some intermediate
11:16 - service to access this resource and this
11:19 - is the job of an API which is waiter in
11:23 - our case so a REST API accesses this
11:27 - resource on the clients request and then
11:30 - responds this representation of the
11:34 - result to the client so we can say that
11:37 - our REST API is intermediate service to
11:41 - access some resources now a real-world
11:43 - example of that can be a Twitter API or
11:47 - a google map API or for example
11:51 - Facebook's graph API is so for example
11:54 - we want to make an app which uses for
11:58 - example Facebook's graph API to know who
12:01 - have the most popular page on Facebook
12:04 - you can use Facebook's graph API for
12:07 - that or for example if you want to post
12:09 - something on Twitter using the Twitter's
12:14 - REST API you can do that also so let me
12:18 - give you this real world example so open
12:20 - your browser and search for API key
12:24 - console ok so search for API geek and
12:28 - soul and you will be able to see this
12:30 - website which is API key com forward
12:33 - slash console so when you go inside this
12:36 - website you will be able to see
12:39 - different API is here ok and you will be
12:42 - able to see for example Facebook's API
12:45 - Yahoo weather API and so many different
12:49 - kind of API is so for example we want to
12:52 - use a Twitter API which is already
12:55 - selected here or you can even select it
12:57 - from here so for example let's say I
12:59 - want to do a tweet on my Twitter account
13:02 - using this API how can I do it so I will
13:07 - select this Twitter API and you can see
13:10 - this is the service which is API dot
13:12 - Twitter comment one point one and I need
13:17 - to give some authentication so I need to
13:20 - give
13:20 - some credentials from my side to login
13:23 - to my Twitter account and then only I
13:26 - will be able to do some tweet right so
13:29 - for authentication I will choose out one
13:33 - here so just choose this option out one
13:35 - and then just select sign in with
13:38 - Twitter who is going to ask for your
13:40 - permission I will just say authorize app
13:42 - and now this app is logged in with my
13:47 - credentials right and now I can do some
13:51 - tweet and on the left hand side I will
13:53 - search for the tweets section here and
13:57 - then I will just select this option
13:59 - which says statuses update dot JSON
14:03 - which uses this HTTP POST method right
14:07 - so I will select this option from here
14:09 - which is going to give you this kind of
14:12 - URL so you can see the resource we want
14:16 - to access here is statuses and then
14:19 - update dot JSON and this is the status
14:24 - we want to post so for example here from
14:26 - here I'm going to just delete this data
14:29 - which is the default status and I will
14:31 - just write here rest stands for
14:33 - representational state transfer and now
14:37 - I'm going to just send this tweet and I
14:40 - receive the status code 200 that means
14:43 - my tweet has been tweeted and you can
14:48 - see this response here right and I can
14:50 - see here that this tweet is posted on my
14:54 - Twitter account you can sees rest tents
14:57 - for representational state transfer
14:59 - which I have done using this Twitter's
15:02 - REST API now the last example I want to
15:05 - give here is the rest server I created
15:08 - using noches
15:10 - so this is a very basic reservoir which
15:12 - is used to create update delete or get
15:16 - the blog posts so a blog can have post
15:20 - and then the post can have some comments
15:23 - and you can have also a profile of the
15:27 - person who is posting this blog post
15:30 - right now this is a rest server and I
15:34 - need to have a rest client in order to
15:37 - interact with this rest server so
15:40 - generally in development we use a tool
15:43 - called postman rest client which is used
15:46 - to send rest-based request from a client
15:50 - to a server so open your web browser and
15:53 - search for postman rest client and the
15:56 - first link which will appear here will
15:57 - be from get postman calm and then you
16:01 - can directly download this for your
16:03 - operating system and once you download
16:05 - and install it it'll look like this okay
16:08 - so this is a simple user interface of
16:12 - postman client from here you can send
16:15 - any request to your server so my server
16:19 - is running on localhost port 3000 so I'm
16:22 - going to just write here HTTP colon
16:24 - double forward slash localhost port 3000
16:28 - and for example I want to just send the
16:31 - get request from here and let's see on
16:34 - the server side I'm using this DB dot
16:37 - JSON as my database so for example you
16:41 - can see there is only one post existing
16:44 - in this JSON database and I want to
16:47 - access this post resource right so what
16:51 - I can do here is I can just send a
16:53 - request on post so this is my resource
16:57 - posts is my resource and let's say I
16:59 - want to just get the post whose ID is
17:01 - one so I'm going to just write one here
17:04 - right and then I will just send this
17:06 - request and then you can see I get this
17:10 - response so for example ID is equal to
17:13 - one title is JSON server and author is
17:16 - code mine which is also there on my JSON
17:20 - database
17:21 - now let's say I want to just retrieve
17:23 - the comments for post one then I can
17:26 - just write instead of post I can just
17:29 - access the comment resource from here
17:33 - right so I can just send this request
17:36 - and this time I can just get the
17:39 - comments resources from this rest server
17:43 - now let's say I want to post a new post
17:46 - so I will just send
17:48 - this request so I will just use this
17:50 - resource post su post some data and the
17:53 - method here I will use is post because I
17:56 - want to create a new blog post and
17:59 - format of this will be same as this one
18:02 - so I'm going to just copy this format
18:05 - and then in the body I'm going to send
18:09 - this request so just click on body and
18:12 - then I will just say bulk add it and I
18:16 - will send this request so this time the
18:18 - ID of the post will be to the title this
18:22 - will be for example rest api and the
18:26 - author i want to leave it as same so i
18:29 - will leave it as code bind so this is my
18:31 - request body for the post right and then
18:35 - in the header you can even write the
18:37 - content type but by default the postman
18:40 - sends the application JSON content type
18:43 - to the rest server so i will leave it as
18:46 - default and I will just say send and you
18:49 - can see here the status I get here is
18:52 - two zero one created that means my post
18:55 - is successful and I receive the ID of
18:58 - the created post now in order to delete
19:01 - the post I can choose the delete method
19:03 - from here and whatever post I want to
19:06 - delete so for example I will just write
19:08 - resource name posts and I want to delete
19:11 - the post too so I will write the ID of
19:14 - the post too and then send the request
19:16 - and then you can see I get 200 response
19:20 - that means okay and then this ID is
19:23 - deleted and then when I do the get
19:25 - request for the post ID - I will not
19:29 - receive any data about this and when I
19:32 - request all the posts then I will only
19:35 - get the post ID 1 because post ID - I
19:39 - have already deleted so that's it for
19:42 - this video I hope you enjoyed this video
19:43 - please rate comment subscribe and bye
19:45 - for now

Cleaned transcript:

hey guys in this video I'm going to try to explain you what is rest and what is our REST API so let's get started so first of all what is rest rest is an architectural style which is based on web standards and HTTP protocol this style was initially described by Roy fielding in the year 2000 Roy fielding was also one of the principal author of HTTP specifications now rest is an acronym standing for representational state transfer so as I said that rest is an architectural style of web but what does this even mean so rest is a set of design criteria and not the physical structure or architecture of the system so it's just a design criteria right so rest is not tied to web that is it doesn't depend on the mechanics of HTTP now in rest based architecture everything is a resource and what is a resource a rest resource is a data on which we want to perform operations so this data can be present on the database on the server side for example some employee data which have some unique identification for example employee ID now this resource is accessed via a common interface based on HTTP standard methods which we will learn a little bit later so let me give you a more concrete example so in restbased architecture you have a rest server which provides the access to the resource so for example this is our rest server which provides the access to the resource which is there in the database or in some form of Records now on the other hand we have a rest client which is used to access and modify the rest resource now in rest architecture every resource should support the HTTP common operation so let me give you a more concrete example so let's say we want to create a weather app now weather app is dependent on the weather data now let's say this weather data is saved every day or every hour in some database which can be accessed from a rest server for example so in a restbased architecture you have a rest server which provides an access to the resource in our case it's a weather data of some city for example and you have a rest client rest client can access or modify the rest resource ok now every resource should support the HTTP common operation now how this resource is identified so resources are identified by a global ID which are typically called you are eyes which stands for Uniform Resource identifier and in some cases it's called URL which stands for Uniform Resource locator so you can consider this URI as an address of the resource so for example we want to access the temperature of City London now this request can be sent from a client in the form of URI you can see here so for example first of all this resource is under the country name UK for example and then the resource name London now if we think logically our resource must have at least one URI right so if the resource doesn't have any URI how will you access this resource so in rest architecture you must have a URI to access or modify this report for example if you don't have this URI UK forward slash London how will you identify this resource in the rest server and these URI should be descriptive that is human possible and have some structure so for example in our example I have given this URI UK which is a country name and then the city name for example now if we want to know the temperature of some other city in some other country for example we want to know the temperature of city munich then you can write germany as a country here and then forwardslash you can write the city name which is munich in our case now rest allows the resource to have different representations right so for example this request is sent to a rest server and on the request this rest server accesses the London's temperature report and then how or in which representation it should send the result and in which format this data is returned to the client is called a representation right and rest allows this resource to have different representation it can send an XML representation of the result or it can send JSON representation of the result or in most of the cases it can also send HTML as a representation now in rest clients decide which kind of representation it want to have so for example client sends this information that I want this result in the representation of Jason right so client send this request to the server that which form of its presentation of result it wants so let's go to the rest definition once again so why rest is called representational state transfer so representational state transfer refers to transferring representation in our case we have seen the representation can be sent in the form of JSON or text or HTML or XML in any representation so we are using the representation of resource to transfer this resource state which lives on the server into the application state which is on the client ok so presentation because client possesses the information necessary to identify modify or delete a web resource and client decide which form of representation of the result now the word state comes in rest because all resource state information is stored on the client side so you can say that your server or your stress server is stateless it doesn't have any state all the states are stored on the client side and transfer because client state is passed from the client to the server through HTTP now let's discuss about HTTP methods supported by a rest so these are some of the most important methods which are supported by rest architecture so you have GATT which is used to retrieve representation of resource you have put method to update or modify existing resources and in some special cases we use put to create a new resource also now we have post to create a new resource and delete method to delete an existing resource now rest have to another less commonly used methods which are had and option so had method fetches the metadata of representation only so it doesn't have any body and the method options checks which HTTP method are particularly resource supports so most of the time when you are designing your rest architecture you will be using these four method which are frequently used when you design your rest architecture which are get put post and delete now there are five basic software architectural style principle in rest so the principle one is everything is a resource so in rest are contextual style data and functionality are considered as resource and are accessed using a URI now the second principle is resource is identified by a unique identifier using URIs now the third principle is you have to use simple and uniform interfaces so use simple and standard interfaces to define your rest architecture so for example in our temperature or weather information example we have defined a very simple and uniform interface so we have defined a country name and then inside a country name there is a city names so whenever we provide the country name and then a city name and for example we want to access the temperature of some particular area of that city we can even request that temperature using this URI so use simple and standard interfaces for defining your rest architecture now the fourth principle is communication is done by representation so for example rests over can send a representation in the form of XML or JSON or text or any other form on the clients request and the last principle is be stateless that means every request happens in complete isolation now the next question arises is what is a REST API so first of all we need to understand what is API so API stands for application programming interface and an API is a set of subroutine definitions protocols and tools for building applications software now our REST API is an application program interface that uses HTTP request to get put post and delete some resources now let me give you a simple example to explain a REST API so let's say we have a resource for example some dishes inside a kitchen so these can be considered as resources right now a client comes and he wants to order some dishes the kitchen but he cannot directly go to the kitchen and then take whatever he wants so the user uses some intermediate service to access this resource and this is the job of an API which is waiter in our case so a REST API accesses this resource on the clients request and then responds this representation of the result to the client so we can say that our REST API is intermediate service to access some resources now a realworld example of that can be a Twitter API or a google map API or for example Facebook's graph API is so for example we want to make an app which uses for example Facebook's graph API to know who have the most popular page on Facebook you can use Facebook's graph API for that or for example if you want to post something on Twitter using the Twitter's REST API you can do that also so let me give you this real world example so open your browser and search for API key console ok so search for API geek and soul and you will be able to see this website which is API key com forward slash console so when you go inside this website you will be able to see different API is here ok and you will be able to see for example Facebook's API Yahoo weather API and so many different kind of API is so for example we want to use a Twitter API which is already selected here or you can even select it from here so for example let's say I want to do a tweet on my Twitter account using this API how can I do it so I will select this Twitter API and you can see this is the service which is API dot Twitter comment one point one and I need to give some authentication so I need to give some credentials from my side to login to my Twitter account and then only I will be able to do some tweet right so for authentication I will choose out one here so just choose this option out one and then just select sign in with Twitter who is going to ask for your permission I will just say authorize app and now this app is logged in with my credentials right and now I can do some tweet and on the left hand side I will search for the tweets section here and then I will just select this option which says statuses update dot JSON which uses this HTTP POST method right so I will select this option from here which is going to give you this kind of URL so you can see the resource we want to access here is statuses and then update dot JSON and this is the status we want to post so for example here from here I'm going to just delete this data which is the default status and I will just write here rest stands for representational state transfer and now I'm going to just send this tweet and I receive the status code 200 that means my tweet has been tweeted and you can see this response here right and I can see here that this tweet is posted on my Twitter account you can sees rest tents for representational state transfer which I have done using this Twitter's REST API now the last example I want to give here is the rest server I created using noches so this is a very basic reservoir which is used to create update delete or get the blog posts so a blog can have post and then the post can have some comments and you can have also a profile of the person who is posting this blog post right now this is a rest server and I need to have a rest client in order to interact with this rest server so generally in development we use a tool called postman rest client which is used to send restbased request from a client to a server so open your web browser and search for postman rest client and the first link which will appear here will be from get postman calm and then you can directly download this for your operating system and once you download and install it it'll look like this okay so this is a simple user interface of postman client from here you can send any request to your server so my server is running on localhost port 3000 so I'm going to just write here HTTP colon double forward slash localhost port 3000 and for example I want to just send the get request from here and let's see on the server side I'm using this DB dot JSON as my database so for example you can see there is only one post existing in this JSON database and I want to access this post resource right so what I can do here is I can just send a request on post so this is my resource posts is my resource and let's say I want to just get the post whose ID is one so I'm going to just write one here right and then I will just send this request and then you can see I get this response so for example ID is equal to one title is JSON server and author is code mine which is also there on my JSON database now let's say I want to just retrieve the comments for post one then I can just write instead of post I can just access the comment resource from here right so I can just send this request and this time I can just get the comments resources from this rest server now let's say I want to post a new post so I will just send this request so I will just use this resource post su post some data and the method here I will use is post because I want to create a new blog post and format of this will be same as this one so I'm going to just copy this format and then in the body I'm going to send this request so just click on body and then I will just say bulk add it and I will send this request so this time the ID of the post will be to the title this will be for example rest api and the author i want to leave it as same so i will leave it as code bind so this is my request body for the post right and then in the header you can even write the content type but by default the postman sends the application JSON content type to the rest server so i will leave it as default and I will just say send and you can see here the status I get here is two zero one created that means my post is successful and I receive the ID of the created post now in order to delete the post I can choose the delete method from here and whatever post I want to delete so for example I will just write resource name posts and I want to delete the post too so I will write the ID of the post too and then send the request and then you can see I get 200 response that means okay and then this ID is deleted and then when I do the get request for the post ID I will not receive any data about this and when I request all the posts then I will only get the post ID 1 because post ID I have already deleted so that's it for this video I hope you enjoyed this video please rate comment subscribe and bye for now
