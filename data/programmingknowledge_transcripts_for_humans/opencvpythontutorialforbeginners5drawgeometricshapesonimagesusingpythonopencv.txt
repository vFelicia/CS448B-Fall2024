With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CBT tool for beginners using Python
00:05 - in this video we will learn how to draw
00:07 - different geometric shapes using open CV
00:11 - so to start with I have this code and I
00:14 - have already explained what this code
00:16 - does so this I am read is used to read
00:20 - an image and then we are just showing
00:23 - this image into a window using this I am
00:27 - show method and then using the weight
00:30 - key we will wait for the closing event
00:34 - and the destroy all window will destroy
00:37 - all the windows which we have created so
00:41 - this we have already seen now let's say
00:44 - we want to draw some geometric shapes on
00:47 - this image so to start with let's learn
00:51 - how to draw a line on our image which we
00:55 - have read from this read function so
00:59 - what we are going to do is we will
01:01 - overwrite this image so we have already
01:06 - created this image variable so what we
01:09 - are going to do is we will draw a line
01:12 - on the same image so I'm going to just
01:15 - write I am G is equal to C v2 dot lines
01:20 - and you can see in the suggestion this
01:23 - line method takes few arguments so the
01:26 - first argument is the image itself the
01:29 - second argument is the starting
01:31 - coordinates of point 1 the third
01:34 - argument is the ending coordinates of
01:37 - point two and then the fourth argument
01:40 - is the color and fifth argument is the
01:43 - thickness so let's use this line method
01:47 - and then give these arguments one by one
01:51 - so we want to write to the image which
01:55 - we have read using this file so the
01:59 - first argument is the image variable and
02:01 - the second argument is the coordinates
02:04 - so the coordinates should be given in
02:07 - the form of tuple so let's say we start
02:09 - with 0 comma 0 coordinate and
02:13 - ending coordinates will be lets say 255
02:18 - , 255 okay the fourth argument will be
02:22 - the color and the color you need to give
02:25 - in the BGR format so if you want to give
02:30 - the blue color then you can just write
02:32 - 255 comma zero comma zero because first
02:37 - is the blue color second is the green
02:42 - color and third is the red Channel color
02:46 - so if you specify here 255 in the first
02:50 - channel that means the blue Channel then
02:52 - it's going to draw the blue line if you
02:56 - give here 255 and then you make other
03:00 - channels zero then it's going to draw
03:03 - the Green Line and if this 255 comes at
03:07 - last and the other channels are zero
03:10 - then it's going to draw the red line so
03:13 - let's say we want to draw the red line
03:15 - that's why I have given 255 here and the
03:19 - next argument is the thickness so the
03:22 - thickness you provide in the numbers so
03:27 - starting from 1 1 is the lowest
03:30 - thickness you can increase the thickness
03:31 - 2 or 3 or let's say 5 or 10 so it's
03:37 - going to increase the thickness based
03:38 - upon this number so let's say we want to
03:41 - give the thickness to our line 5 so this
03:45 - is going to draw a red line on our image
03:49 - so let's run the code and let's see what
03:51 - happens so you can see our image is
03:54 - loaded in the grayscale that's why you
03:57 - don't see any color on the line but our
04:00 - line is created here so let's load this
04:04 - image in the colored format by changing
04:07 - this argument to 1 and let's run the
04:11 - code once again and you will see the
04:13 - image is loaded in the colored format
04:15 - and the line color is red now if you
04:19 - want to change the thickness of this
04:21 - line you can just increase this number
04:23 - and if you want to change the color of
04:25 - this line
04:27 - you can change it using these color
04:29 - channels so let's change the line color
04:32 - to green let's say and I'm going to run
04:36 - the code and you can see the thickness
04:38 - of the line is increased and now the
04:41 - color of the line is green now if you
04:44 - want to draw the line with any other
04:46 - color you can just go to your favorite
04:50 - browser and search for arch BG color
04:53 - picker but always remember our image
04:56 - will be loaded in the BG R from it so in
05:00 - the reverse order so blue green and then
05:03 - the red channel so let's say we want
05:07 - this color here and it's draw our BG
05:11 - channels are this so I'm going to just
05:14 - copy all these channels and then I'm
05:16 - going to give these channels in the
05:19 - reverse order so first of all 147
05:23 - then 96 and then third channel is the 44
05:29 - and then I'm going to run my code and
05:32 - you can see you get the same color which
05:35 - you have chosen here so this is how you
05:38 - can change the color of your lines now
05:42 - there is a function called erode line
05:45 - let's say we want to use this function
05:49 - which is called erode line and this is
05:54 - going to draw the arrowed line as it
05:56 - says so let's say we want to just draw
06:01 - this arrow line in blue color so I'm
06:04 - going to just give the color channels
06:07 - here and then run the code and this
06:09 - arrowed line is overlapping on the
06:12 - previous line that's why you don't see
06:14 - the previous line so let's change the
06:17 - coordinate of this line so let's draw
06:22 - this line in this coordinate which is
06:25 - going to draw the straight line in my
06:27 - opinion let's see what happens when I
06:29 - run the code and you can see it draws
06:32 - the straight line from left to right
06:35 - which is the arrowed line and this was
06:38 - our original
06:40 - line now let's see how to draw the
06:42 - rectangle so to draw the rectangle we
06:46 - will do the same we will just overwrite
06:49 - on the same image so we will just say
06:52 - image is equal to C v2 dot rectangle
06:56 - which is a method and you can see what
07:00 - are the argument it takes so the first
07:02 - argument is the image itself the second
07:05 - argument is the point 1 and point 2 this
07:08 - point 1 and point 2 coordinate I'm going
07:10 - to explain in a bit the third argument
07:13 - is the color which is same as line and
07:16 - the fourth argument is the thickness so
07:20 - let's use this rectangle function to
07:24 - draw the rectangle so first of all I'm
07:26 - going to just pass the image variable
07:29 - here the second argument is the top left
07:33 - vertex coordinates so let me just draw
07:38 - something here so you will be able to
07:40 - understand in a better way
07:42 - so when you want to draw a rectangle
07:44 - using OpenCV this here is a top left
07:48 - vertex coordinates which is x1 and y1
07:51 - and this is here the lower right vertex
07:56 - coordinates so the top left vertex
07:58 - coordinates you give in the second
08:01 - argument so let's give some coordinates
08:04 - here so 384 comma 0 and the lower right
08:09 - coordinates I want to give here is let's
08:12 - say 510 comma 128 so let's say we want
08:17 - to give the red color so I'm going to
08:19 - just write 0 comma 0 comma 255 and the
08:24 - thickness I want to give here is 5 and
08:26 - I'm going to just remove this because
08:28 - it'll just create problems and now let's
08:33 - run the code and you can see the
08:35 - rectangle is drawn with the red color of
08:38 - thickness 5 you can change the thickness
08:41 - of this rectangle by changing the value
08:47 - of the thickness and then you can run
08:50 - the code and now the thickness of this
08:53 - rectangle
08:54 - line is increased now one more thing you
08:57 - can provide here is instead of giving
09:00 - the thickness value if you write here
09:03 - minus 1 then it's going to fill the
09:06 - rectangle with the color which you
09:09 - provide here so when we give minus 1
09:12 - here let's see what happens so now we
09:15 - get the filled rectangle because we have
09:18 - provided minus 1 option here so if you
09:22 - provide minus 1 then your rectangle or
09:25 - whatever shape you are creating will be
09:29 - filled with the color which you specify
09:31 - here so let me just change the thickness
09:34 - to 10 once again and now let's see how
09:37 - we can draw the circle so to draw the
09:41 - circle we once again you see B 2 dot
09:44 - circle function and once again you can
09:48 - see what are the argument which it takes
09:50 - so the first argument is the image the
09:53 - second argument is the center of the
09:55 - circle the third argument is the radius
09:58 - of the circle and the fourth and fifth
10:01 - argument is the color and the thickness
10:03 - once again so once again we will provide
10:05 - the image the second argument is the
10:09 - center of the circle so let's give the
10:13 - center of the circle which is the
10:15 - coordinate on which you want to give the
10:19 - center so I'm going to provide let's say
10:22 - 447 comma 63 here and the third argument
10:28 - is the radius so radius we want to
10:31 - provide here is let's say 63 and the
10:34 - fourth argument is the color so let's
10:36 - use 0 comma 255 comma 0 which is going
10:43 - to draw the green color and then let's
10:46 - give minus 1 here so our circle will be
10:49 - filled with green color and let's run
10:53 - the code and let's see what happens so
10:55 - you can see this circle is drawn here
10:57 - and this circle is filled with the green
11:02 - color now let's see how we can put some
11:05 - text into the image
11:08 - so to put the text on our image we will
11:10 - once again use the image variable and
11:13 - overwrite on it and then we will use a
11:16 - method called put text so this is the
11:20 - method which we are going to use the
11:22 - first argument is the image the second
11:25 - argument here is the text which we want
11:28 - to put so let's say we want to just
11:30 - print OpenCV on our image so we can just
11:34 - write OpenCV as the second argument the
11:38 - third argument is the starting point of
11:41 - your text so you need to give the
11:44 - coordinates where you want to start your
11:47 - text from so the coordinates I want to
11:49 - give here is let's say 10 comma 500 and
11:53 - then the next argument is the font face
11:57 - so the font face you need to give here
12:00 - using a variable so I'm going to create
12:04 - a variable let's say font and then there
12:07 - are many font faces available using CV
12:11 - too so you can just write cb2 dot font
12:15 - in capital and you can see what are the
12:18 - options available here I'm going to
12:20 - choose the first one itself which is
12:23 - font Hershey simplex font and then we
12:27 - are going to pass this font as the
12:30 - fourth argument the fifth argument here
12:33 - will be the font size so let's say I
12:36 - want to give the font size for here the
12:39 - sixth argument here is the color of your
12:42 - font so let's say I want to just draw
12:47 - 255 255 255 which is going to give us a
12:53 - whitish kind of color the next argument
12:56 - we will give here is the thickness so
12:58 - let's say I want to provide the
13:00 - thickness 10 here and the next argument
13:02 - you can give here is the line type so
13:06 - let's say I want to give the line type
13:09 - cb2 dot capital line underscore a and
13:15 - now let's run our script and let's see
13:17 - what happens so you can see here OpenCV
13:21 - is printed in the white color of
13:24 - thickness 10 and if you want to change
13:28 - this color you can change it from here
13:30 - so I'm going to just put the first
13:32 - channel as zero and now this color is
13:35 - changed to yellow color now one more
13:39 - thing I want to show here is how you can
13:42 - create an image using numpy zeros method
13:46 - so either you can use a image which you
13:49 - read from I am read method or what you
13:53 - can do here is I'm going to just comment
13:55 - this code and we can create an image
13:59 - using the numpy zeroes method so I'm
14:03 - going to create this I am G variable and
14:06 - then I'm going to use the numpy module
14:10 - so just import this number as import
14:12 - numpy as NP and then we are going to use
14:15 - this MP to call the zeros method now in
14:20 - order to create a black image using this
14:22 - zeros method you need to give the first
14:25 - argument in the form of list and inside
14:29 - this list the first element will be the
14:32 - height second will be the width and
14:34 - third will be three so let's say we want
14:37 - to provide the height 512 we want to
14:40 - provide the width also 512 and the third
14:44 - argument will be 3 and the next argument
14:48 - you give here is the D type or data type
14:51 - so you can just write NP dot you int 8
14:57 - here so this method is going to give you
15:00 - a black image of the size 512 by 512 so
15:06 - let's run our code and let's see what
15:07 - happens so you can see now you can see
15:10 - the black image and on our black image
15:14 - the line is drawn the arrowed line is
15:17 - drawn and the text and the circle and
15:19 - the rectangle are drawn here so this is
15:23 - how you can draw different geometric
15:25 - shapes on your image there are several
15:29 - other methods you can use for example c
15:32 - v2 dot polyline method
15:34 - or CV to dot Eclipse method to draw
15:37 - eclipses and polygons on your image so
15:40 - just try those method to draw different
15:44 - shapes on your image so that's it for
15:46 - this video and I will see you in the
15:49 - next video
15:57 - you

Cleaned transcript:

hey guys welcome to the next video on open CBT tool for beginners using Python in this video we will learn how to draw different geometric shapes using open CV so to start with I have this code and I have already explained what this code does so this I am read is used to read an image and then we are just showing this image into a window using this I am show method and then using the weight key we will wait for the closing event and the destroy all window will destroy all the windows which we have created so this we have already seen now let's say we want to draw some geometric shapes on this image so to start with let's learn how to draw a line on our image which we have read from this read function so what we are going to do is we will overwrite this image so we have already created this image variable so what we are going to do is we will draw a line on the same image so I'm going to just write I am G is equal to C v2 dot lines and you can see in the suggestion this line method takes few arguments so the first argument is the image itself the second argument is the starting coordinates of point 1 the third argument is the ending coordinates of point two and then the fourth argument is the color and fifth argument is the thickness so let's use this line method and then give these arguments one by one so we want to write to the image which we have read using this file so the first argument is the image variable and the second argument is the coordinates so the coordinates should be given in the form of tuple so let's say we start with 0 comma 0 coordinate and ending coordinates will be lets say 255 , 255 okay the fourth argument will be the color and the color you need to give in the BGR format so if you want to give the blue color then you can just write 255 comma zero comma zero because first is the blue color second is the green color and third is the red Channel color so if you specify here 255 in the first channel that means the blue Channel then it's going to draw the blue line if you give here 255 and then you make other channels zero then it's going to draw the Green Line and if this 255 comes at last and the other channels are zero then it's going to draw the red line so let's say we want to draw the red line that's why I have given 255 here and the next argument is the thickness so the thickness you provide in the numbers so starting from 1 1 is the lowest thickness you can increase the thickness 2 or 3 or let's say 5 or 10 so it's going to increase the thickness based upon this number so let's say we want to give the thickness to our line 5 so this is going to draw a red line on our image so let's run the code and let's see what happens so you can see our image is loaded in the grayscale that's why you don't see any color on the line but our line is created here so let's load this image in the colored format by changing this argument to 1 and let's run the code once again and you will see the image is loaded in the colored format and the line color is red now if you want to change the thickness of this line you can just increase this number and if you want to change the color of this line you can change it using these color channels so let's change the line color to green let's say and I'm going to run the code and you can see the thickness of the line is increased and now the color of the line is green now if you want to draw the line with any other color you can just go to your favorite browser and search for arch BG color picker but always remember our image will be loaded in the BG R from it so in the reverse order so blue green and then the red channel so let's say we want this color here and it's draw our BG channels are this so I'm going to just copy all these channels and then I'm going to give these channels in the reverse order so first of all 147 then 96 and then third channel is the 44 and then I'm going to run my code and you can see you get the same color which you have chosen here so this is how you can change the color of your lines now there is a function called erode line let's say we want to use this function which is called erode line and this is going to draw the arrowed line as it says so let's say we want to just draw this arrow line in blue color so I'm going to just give the color channels here and then run the code and this arrowed line is overlapping on the previous line that's why you don't see the previous line so let's change the coordinate of this line so let's draw this line in this coordinate which is going to draw the straight line in my opinion let's see what happens when I run the code and you can see it draws the straight line from left to right which is the arrowed line and this was our original line now let's see how to draw the rectangle so to draw the rectangle we will do the same we will just overwrite on the same image so we will just say image is equal to C v2 dot rectangle which is a method and you can see what are the argument it takes so the first argument is the image itself the second argument is the point 1 and point 2 this point 1 and point 2 coordinate I'm going to explain in a bit the third argument is the color which is same as line and the fourth argument is the thickness so let's use this rectangle function to draw the rectangle so first of all I'm going to just pass the image variable here the second argument is the top left vertex coordinates so let me just draw something here so you will be able to understand in a better way so when you want to draw a rectangle using OpenCV this here is a top left vertex coordinates which is x1 and y1 and this is here the lower right vertex coordinates so the top left vertex coordinates you give in the second argument so let's give some coordinates here so 384 comma 0 and the lower right coordinates I want to give here is let's say 510 comma 128 so let's say we want to give the red color so I'm going to just write 0 comma 0 comma 255 and the thickness I want to give here is 5 and I'm going to just remove this because it'll just create problems and now let's run the code and you can see the rectangle is drawn with the red color of thickness 5 you can change the thickness of this rectangle by changing the value of the thickness and then you can run the code and now the thickness of this rectangle line is increased now one more thing you can provide here is instead of giving the thickness value if you write here minus 1 then it's going to fill the rectangle with the color which you provide here so when we give minus 1 here let's see what happens so now we get the filled rectangle because we have provided minus 1 option here so if you provide minus 1 then your rectangle or whatever shape you are creating will be filled with the color which you specify here so let me just change the thickness to 10 once again and now let's see how we can draw the circle so to draw the circle we once again you see B 2 dot circle function and once again you can see what are the argument which it takes so the first argument is the image the second argument is the center of the circle the third argument is the radius of the circle and the fourth and fifth argument is the color and the thickness once again so once again we will provide the image the second argument is the center of the circle so let's give the center of the circle which is the coordinate on which you want to give the center so I'm going to provide let's say 447 comma 63 here and the third argument is the radius so radius we want to provide here is let's say 63 and the fourth argument is the color so let's use 0 comma 255 comma 0 which is going to draw the green color and then let's give minus 1 here so our circle will be filled with green color and let's run the code and let's see what happens so you can see this circle is drawn here and this circle is filled with the green color now let's see how we can put some text into the image so to put the text on our image we will once again use the image variable and overwrite on it and then we will use a method called put text so this is the method which we are going to use the first argument is the image the second argument here is the text which we want to put so let's say we want to just print OpenCV on our image so we can just write OpenCV as the second argument the third argument is the starting point of your text so you need to give the coordinates where you want to start your text from so the coordinates I want to give here is let's say 10 comma 500 and then the next argument is the font face so the font face you need to give here using a variable so I'm going to create a variable let's say font and then there are many font faces available using CV too so you can just write cb2 dot font in capital and you can see what are the options available here I'm going to choose the first one itself which is font Hershey simplex font and then we are going to pass this font as the fourth argument the fifth argument here will be the font size so let's say I want to give the font size for here the sixth argument here is the color of your font so let's say I want to just draw 255 255 255 which is going to give us a whitish kind of color the next argument we will give here is the thickness so let's say I want to provide the thickness 10 here and the next argument you can give here is the line type so let's say I want to give the line type cb2 dot capital line underscore a and now let's run our script and let's see what happens so you can see here OpenCV is printed in the white color of thickness 10 and if you want to change this color you can change it from here so I'm going to just put the first channel as zero and now this color is changed to yellow color now one more thing I want to show here is how you can create an image using numpy zeros method so either you can use a image which you read from I am read method or what you can do here is I'm going to just comment this code and we can create an image using the numpy zeroes method so I'm going to create this I am G variable and then I'm going to use the numpy module so just import this number as import numpy as NP and then we are going to use this MP to call the zeros method now in order to create a black image using this zeros method you need to give the first argument in the form of list and inside this list the first element will be the height second will be the width and third will be three so let's say we want to provide the height 512 we want to provide the width also 512 and the third argument will be 3 and the next argument you give here is the D type or data type so you can just write NP dot you int 8 here so this method is going to give you a black image of the size 512 by 512 so let's run our code and let's see what happens so you can see now you can see the black image and on our black image the line is drawn the arrowed line is drawn and the text and the circle and the rectangle are drawn here so this is how you can draw different geometric shapes on your image there are several other methods you can use for example c v2 dot polyline method or CV to dot Eclipse method to draw eclipses and polygons on your image so just try those method to draw different shapes on your image so that's it for this video and I will see you in the next video you
