With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video I'm going to show
00:07 - you how you can create a very basic and
00:09 - simple motion detection and tracking
00:12 - system using Python and open CV so let
00:16 - me show you what we are going to achieve
00:18 - at the end of this video so I have this
00:23 - video which is a sample video and you
00:26 - can see some people are walking around
00:29 - inside this video now what I want to do
00:33 - here is I want to show these rectangles
00:36 - around these moving people or persons so
00:42 - this is cracking and when some movement
00:45 - occurs I also want to show this kind of
00:48 - status that status is movement because
00:51 - somebody is moving inside the video so
00:54 - if nobody is moving the status will be
00:57 - blank and if somebody is moving then
01:01 - this status will be movement so this is
01:05 - what we are going to achieve at the end
01:07 - of this video so we are going to try to
01:12 - track each and every person and also we
01:16 - are going to track this person with this
01:20 - rectangle and also we will show the
01:24 - status as movement when somebody moves
01:27 - inside the video so let's get started so
01:31 - to start with I have this basic code
01:35 - which just reads a video using video
01:39 - capture class and then if this video is
01:43 - valid then I'm going to just show this
01:46 - frame by frame inside I'm show window
01:50 - and I am sure you might be knowing all
01:54 - this code because I've shown you
01:56 - step-by-step how to capture the video or
02:00 - how you can read the video frames using
02:04 - video capture method ok so this is just
02:09 - to load this video and show it frame by
02:12 - frame
02:13 - using I am show methods so let me run
02:15 - this code first of all to start with so
02:19 - our original video looks like this so
02:22 - some people are moving but we want to
02:25 - track the movement of each and every
02:27 - person and also we want to show
02:29 - rectangles around them whoever is moving
02:33 - so let's get started so under this video
02:37 - capture code line what I'm going to do
02:41 - is first of all I want to read two
02:44 - frames from the cap instance so I'm
02:49 - going to just copy this code and paste
02:52 - it here so this will be our frame one
02:57 - let's say and similarly I'm going to
03:00 - just read the second frame so simply we
03:05 - are just declaring two frame or one
03:08 - after another okay and we don't need
03:11 - this code anymore so first of all I'm
03:15 - going to declare a variable diff and
03:18 - using CB to dot a B as diff method so
03:24 - absolute difference we are going to find
03:27 - out the difference between the first
03:29 - frame and the second frame so this
03:33 - method ABS diff is for finding out the
03:37 - absolute difference between the first
03:40 - frame and the second frame now once we
03:43 - have the difference then we are going to
03:46 - convert this difference into a grayscale
03:50 - mode so we are going to just say gray is
03:55 - equal to C v2 dot convert color so CVT
04:01 - color and the first parameter here will
04:05 - be our difference which we have found
04:08 - between the two frames so I'm going to
04:10 - just pass diff as the first argument and
04:13 - the second argument will be CB - dot we
04:17 - are going to convert this BG our color
04:20 - to the grayscale mode and why we are
04:24 - finding out the grayscale mode of this
04:27 - deaf because we are going to find out
04:30 - the contour in the later stages and in
04:33 - the last video we have learned that it's
04:35 - easier to find out the contours in this
04:39 - grayscale mode as compared to the
04:42 - coloured mode or the B gr mode so once
04:47 - we have this grayscale mode we are going
04:49 - to just blur our grayscale frame so we
04:55 - are going to just declare a variable
04:57 - called blur and then we are going to
05:01 - apply the Gaussian blur on our gray
05:05 - variable so see v2 dot Gaussian blur the
05:11 - first parameter here will be gray so
05:15 - let's give this grape parameter which we
05:18 - have divided defined here
05:20 - the second parameter here is the case
05:22 - eyes or the kernel sight so let's say we
05:25 - want to provide the kernel size 5 comma
05:27 - 5 and the third parameter here will be
05:32 - the Sigma X value so we are going to
05:34 - just pass 0 here as the Sigma X value
05:38 - now we are going to find out the
05:41 - threshold so we are going to just say
05:44 - underscore because we don't need this
05:47 - first variable and then the second
05:51 - variable will be trash is equal to CB 2
05:55 - dot threshold and the first parameter
05:58 - which it takes is the source so we are
06:02 - going to pass our blurred image as the
06:06 - source and then the second parameter
06:09 - here will be the threshold value so we
06:13 - are going to just provide 20 here then
06:16 - the maximum threshold value will be 255
06:20 - then the type will be CV to dot
06:26 - Tresh binary so in the next step what we
06:28 - are going to do is we are going to
06:29 - dilate the thresholded image to fill in
06:32 - all the holes this will help us to find
06:36 - out the better contours so there is a
06:39 - method called CV to dot
06:41 - late so we are going to just declare a
06:43 - variable called dilated and then we are
06:46 - going to apply this method so CB 2 dot
06:50 - dilate which takes few argument the
06:53 - first argument will be our threshold
06:56 - date the version of the image
06:59 - the second argument here will be the
07:01 - kernel so kernel let's say for now we
07:04 - are going to provide none here okay so
07:06 - the kernel size will be none and then
07:10 - third parameter will be the number of
07:14 - iterations so let's provide the number
07:16 - of iterations and the number of
07:18 - iterations we are going to provide here
07:20 - will be three so if it doesn't work we
07:24 - can increase or decrease the number of
07:26 - iterations now in the next step what we
07:28 - are going to do is we are going to find
07:30 - out the contour so as you all know that
07:33 - contour or fine contour method is going
07:35 - to give you two result one is the
07:38 - contours and other is the hierarchy so
07:41 - we are going to just say contour and the
07:44 - second result we are going to just say
07:46 - underscore because we are not going to
07:48 - use this second result and then we are
07:52 - going to just say CV to dot find
07:57 - contours and we are going to find the
08:00 - contours on this dilated image so we are
08:04 - going to say dilated now the next
08:06 - argument here will be the mode so the
08:09 - mode which we are going to use here will
08:12 - be writer underscore tree so I'm going
08:15 - to just write our ETR underscore tree
08:19 - which is most commonly used and then the
08:23 - next argument here will be the method so
08:26 - the method here will be C v2 dot chain
08:31 - aprox simple and once we have our
08:34 - contours we are going to just draw the
08:37 - contours because we already found out
08:40 - the contours so we are going to just say
08:43 - draw contours and the first argument
08:46 - here will be frame one because we want
08:49 - to apply all the contours on the
08:52 - original frame right so
08:55 - we are going to apply all the contours
08:57 - which we have found using all these
08:59 - method on the frame one and then the
09:03 - second argument here will be the contour
09:07 - so you can just give the contours here
09:12 - and the third argument here will be the
09:16 - contour I D
09:17 - I can just say minus one which is going
09:20 - to apply all the contours and the third
09:24 - and the next argument will be the color
09:26 - so let's say we want to provide the
09:29 - green color so I'm going to just say 0
09:32 - comma 255 comma 0 and the next will be
09:37 - the thickness so let's say we want to
09:39 - provide the thickness of 2 here so now
09:42 - it's going to draw all the contours
09:44 - which we have found with the difference
09:47 - of frame 1 and frame 2 right and then we
09:51 - are going to just display this frame 1
09:55 - so we can just say this is our feed and
09:59 - the result after applying the contour
10:03 - will be saved in the frame 1 which we
10:06 - will display now in the next step what
10:09 - we are going to do is we are going to
10:11 - assign the value inside frame 2 into
10:16 - frame 1 so we are going to just say
10:18 - frame 1 is equal to stream 2 and then
10:22 - inside our frame 2 we are going to read
10:25 - a new value so we are going to just say
10:28 - re T comma frame 2 is equal to cap dot
10:35 - read ok so we are reading the new frame
10:39 - in the variable frame 2 and before
10:43 - reading the new frame we are assigning
10:45 - the value inside the frame 2 to the
10:49 - frame 1 in this way we are reading the
10:52 - two frames and finding out the
10:54 - difference between the two frames so
10:57 - let's run this code and let's see if it
10:59 - works or not let's test this so you can
11:02 - see now there are these contours which
11:06 - are drawn around
11:08 - all the moving persons also there are
11:13 - some contours which are drawn around
11:16 - this rope which is also moving right so
11:19 - we have successfully determined the
11:23 - contours and we have already drawn these
11:26 - contours on the frame 1 but this was not
11:31 - the result we are looking for we want to
11:34 - draw the rectangle around these moving
11:36 - persons and also we want some noises to
11:41 - be removed so we don't want to draw the
11:45 - contour on the moving rope let's say
11:49 - okay so how to remove these noises and
11:53 - how to draw these rectangles let's see
11:55 - so now in the next step what we are
11:58 - going to do is under or before we are
12:02 - drawing these contours we don't want to
12:05 - draw the contours now we want to draw
12:08 - the rectangles right so what we are
12:12 - going to do is we are going to iterate
12:14 - over all the controls so we are going to
12:16 - just say for contour
12:20 - so from contours we are going to find
12:23 - out contour in contours right so this is
12:28 - the list and we are iterating over this
12:32 - list so inside this for loop the first
12:34 - step will be to save all the coordinates
12:38 - of the found contours ok so we are going
12:43 - to define the x coordinate then the y
12:48 - coordinate and then we are going to just
12:51 - say width comma height and there is a
12:55 - method called bounding rekt which we are
12:59 - going to apply on the contour so we are
13:01 - going to just say is equal to CB 2 dot
13:05 - bounding rekt this is the method which
13:08 - we are going to apply this is going to
13:10 - give us the X&Y coordinate and the width
13:15 - and height right and we are going to
13:17 - apply this bounding rekt method on the
13:21 - contour
13:22 - we are getting using this con twos list
13:25 - now in the next step we are going to
13:28 - find out the area of the contour and we
13:31 - are going to just say if this area is
13:34 - less than certain value then we don't
13:37 - want to do anything we don't want to
13:39 - draw a rectangle or anything we just
13:42 - want to continue otherwise if this
13:46 - contour area is greater then let's say
13:50 - some kind of a person's area then we
13:54 - want to draw a rectangle on it so inside
13:57 - this for loop we are going to just
13:59 - define if condition so we can say if CB
14:03 - 2 dot contour area so there is a method
14:08 - called contour area which is this one
14:13 - where we can pass our contour so we are
14:17 - going to pass our contour and if the
14:20 - area of this contour let's say is less
14:23 - than 700 then we are going to just say
14:28 - continue so this code essentially mean
14:31 - that if the area of the contour is less
14:34 - than 700 then we are going to do nothing
14:38 - we don't want to draw any rectangle
14:40 - otherwise if the area is greater than
14:43 - 700 then we want to draw the rectangle
14:46 - so we are going to just say CB 2 dot
14:50 - rectangle we have already learned how to
14:53 - draw a rectangle on an image using the
14:57 - rectangle method the first argument here
15:00 - will be the source which will be frame 1
15:04 - the second argument will be the point 1
15:07 - so we are going to just say point 1 will
15:11 - be X comma Y the third argument will be
15:15 - point 2 so we are going to just say X
15:18 - plus W comma y plus h the next argument
15:24 - will be the color so let's say the color
15:27 - will be the same 0 comma 255 comma 0 the
15:33 - next argument will be
15:35 - the thickness let's say we want to give
15:38 - the thickness to as we have done with
15:41 - the draw contour we have provided the
15:44 - thickness of two here right now in the
15:48 - next step we are going to just print
15:51 - some text on the image if some movement
15:55 - is observed so we can just say CV to dot
15:58 - put text this also we have seen in the
16:01 - previous videos how to put text on an
16:04 - image so this time the source will be
16:07 - our frame one the second will be the
16:10 - text so we will just say status let's
16:14 - say and if there is some movement we are
16:19 - going to just say : in the curly
16:23 - brackets we are going to just use the
16:26 - format method so this is just formatting
16:30 - the result using the string and we are
16:33 - going to just say movement the next
16:37 - argument here will be the origin so
16:40 - where we want to put this text let's say
16:42 - we want to put this text on 10 comma 20
16:46 - coordinate and then the next argument
16:49 - will be the font face so we are going to
16:52 - just say font face will be CV 2.4 font
16:56 - Hershey simplex let's say so we are
16:59 - going to use this font and the next
17:02 - argument will be the font scale so let
17:05 - me just do this on the next line so one
17:10 - scale will be let's say 1 the next will
17:15 - be the color of the font so let's say
17:18 - the color will be 0 comma 0 comma 255
17:23 - and then the last argument will be the
17:26 - thickness so let's say the thickness
17:28 - will be 3 and this code is going to put
17:31 - the rectangle around your moving
17:33 - persons if the area of that contour is
17:38 - greater than 700 okay
17:41 - so let's run this code and let's see if
17:44 - it works or not so I'm going to just run
17:47 - this code and you can see
17:49 - that status is movement because all the
17:54 - persons here are moving and you can see
17:56 - these rectangles which are drawn around
17:58 - the moving persons and this noise which
18:02 - we were seeing in the previous result is
18:06 - also gone around the movement of this
18:09 - rope okay
18:10 - sometimes this rectangle is drawn on the
18:14 - movement of the rope also so in this
18:17 - case you can also increase the expected
18:21 - area let's say we just want to find out
18:24 - the contours which are greater than 900
18:27 - and we can now you can see these
18:31 - rectangles are drawn around these moving
18:35 - persons with the area which have the
18:38 - contour area more than 900 so you can
18:42 - remove these kind of noises from the
18:46 - frame using this area so this was a very
18:51 - basic example how you can detect the
18:55 - motion and track your moving object
18:58 - inside your video using Python and
19:02 - OpenCV I hope you enjoyed this video and
19:04 - I will see you in the next video

Cleaned transcript:

hey guys welcome to the next video on open CV tutorial for beginners using Python in this video I'm going to show you how you can create a very basic and simple motion detection and tracking system using Python and open CV so let me show you what we are going to achieve at the end of this video so I have this video which is a sample video and you can see some people are walking around inside this video now what I want to do here is I want to show these rectangles around these moving people or persons so this is cracking and when some movement occurs I also want to show this kind of status that status is movement because somebody is moving inside the video so if nobody is moving the status will be blank and if somebody is moving then this status will be movement so this is what we are going to achieve at the end of this video so we are going to try to track each and every person and also we are going to track this person with this rectangle and also we will show the status as movement when somebody moves inside the video so let's get started so to start with I have this basic code which just reads a video using video capture class and then if this video is valid then I'm going to just show this frame by frame inside I'm show window and I am sure you might be knowing all this code because I've shown you stepbystep how to capture the video or how you can read the video frames using video capture method ok so this is just to load this video and show it frame by frame using I am show methods so let me run this code first of all to start with so our original video looks like this so some people are moving but we want to track the movement of each and every person and also we want to show rectangles around them whoever is moving so let's get started so under this video capture code line what I'm going to do is first of all I want to read two frames from the cap instance so I'm going to just copy this code and paste it here so this will be our frame one let's say and similarly I'm going to just read the second frame so simply we are just declaring two frame or one after another okay and we don't need this code anymore so first of all I'm going to declare a variable diff and using CB to dot a B as diff method so absolute difference we are going to find out the difference between the first frame and the second frame so this method ABS diff is for finding out the absolute difference between the first frame and the second frame now once we have the difference then we are going to convert this difference into a grayscale mode so we are going to just say gray is equal to C v2 dot convert color so CVT color and the first parameter here will be our difference which we have found between the two frames so I'm going to just pass diff as the first argument and the second argument will be CB dot we are going to convert this BG our color to the grayscale mode and why we are finding out the grayscale mode of this deaf because we are going to find out the contour in the later stages and in the last video we have learned that it's easier to find out the contours in this grayscale mode as compared to the coloured mode or the B gr mode so once we have this grayscale mode we are going to just blur our grayscale frame so we are going to just declare a variable called blur and then we are going to apply the Gaussian blur on our gray variable so see v2 dot Gaussian blur the first parameter here will be gray so let's give this grape parameter which we have divided defined here the second parameter here is the case eyes or the kernel sight so let's say we want to provide the kernel size 5 comma 5 and the third parameter here will be the Sigma X value so we are going to just pass 0 here as the Sigma X value now we are going to find out the threshold so we are going to just say underscore because we don't need this first variable and then the second variable will be trash is equal to CB 2 dot threshold and the first parameter which it takes is the source so we are going to pass our blurred image as the source and then the second parameter here will be the threshold value so we are going to just provide 20 here then the maximum threshold value will be 255 then the type will be CV to dot Tresh binary so in the next step what we are going to do is we are going to dilate the thresholded image to fill in all the holes this will help us to find out the better contours so there is a method called CV to dot late so we are going to just declare a variable called dilated and then we are going to apply this method so CB 2 dot dilate which takes few argument the first argument will be our threshold date the version of the image the second argument here will be the kernel so kernel let's say for now we are going to provide none here okay so the kernel size will be none and then third parameter will be the number of iterations so let's provide the number of iterations and the number of iterations we are going to provide here will be three so if it doesn't work we can increase or decrease the number of iterations now in the next step what we are going to do is we are going to find out the contour so as you all know that contour or fine contour method is going to give you two result one is the contours and other is the hierarchy so we are going to just say contour and the second result we are going to just say underscore because we are not going to use this second result and then we are going to just say CV to dot find contours and we are going to find the contours on this dilated image so we are going to say dilated now the next argument here will be the mode so the mode which we are going to use here will be writer underscore tree so I'm going to just write our ETR underscore tree which is most commonly used and then the next argument here will be the method so the method here will be C v2 dot chain aprox simple and once we have our contours we are going to just draw the contours because we already found out the contours so we are going to just say draw contours and the first argument here will be frame one because we want to apply all the contours on the original frame right so we are going to apply all the contours which we have found using all these method on the frame one and then the second argument here will be the contour so you can just give the contours here and the third argument here will be the contour I D I can just say minus one which is going to apply all the contours and the third and the next argument will be the color so let's say we want to provide the green color so I'm going to just say 0 comma 255 comma 0 and the next will be the thickness so let's say we want to provide the thickness of 2 here so now it's going to draw all the contours which we have found with the difference of frame 1 and frame 2 right and then we are going to just display this frame 1 so we can just say this is our feed and the result after applying the contour will be saved in the frame 1 which we will display now in the next step what we are going to do is we are going to assign the value inside frame 2 into frame 1 so we are going to just say frame 1 is equal to stream 2 and then inside our frame 2 we are going to read a new value so we are going to just say re T comma frame 2 is equal to cap dot read ok so we are reading the new frame in the variable frame 2 and before reading the new frame we are assigning the value inside the frame 2 to the frame 1 in this way we are reading the two frames and finding out the difference between the two frames so let's run this code and let's see if it works or not let's test this so you can see now there are these contours which are drawn around all the moving persons also there are some contours which are drawn around this rope which is also moving right so we have successfully determined the contours and we have already drawn these contours on the frame 1 but this was not the result we are looking for we want to draw the rectangle around these moving persons and also we want some noises to be removed so we don't want to draw the contour on the moving rope let's say okay so how to remove these noises and how to draw these rectangles let's see so now in the next step what we are going to do is under or before we are drawing these contours we don't want to draw the contours now we want to draw the rectangles right so what we are going to do is we are going to iterate over all the controls so we are going to just say for contour so from contours we are going to find out contour in contours right so this is the list and we are iterating over this list so inside this for loop the first step will be to save all the coordinates of the found contours ok so we are going to define the x coordinate then the y coordinate and then we are going to just say width comma height and there is a method called bounding rekt which we are going to apply on the contour so we are going to just say is equal to CB 2 dot bounding rekt this is the method which we are going to apply this is going to give us the X&Y coordinate and the width and height right and we are going to apply this bounding rekt method on the contour we are getting using this con twos list now in the next step we are going to find out the area of the contour and we are going to just say if this area is less than certain value then we don't want to do anything we don't want to draw a rectangle or anything we just want to continue otherwise if this contour area is greater then let's say some kind of a person's area then we want to draw a rectangle on it so inside this for loop we are going to just define if condition so we can say if CB 2 dot contour area so there is a method called contour area which is this one where we can pass our contour so we are going to pass our contour and if the area of this contour let's say is less than 700 then we are going to just say continue so this code essentially mean that if the area of the contour is less than 700 then we are going to do nothing we don't want to draw any rectangle otherwise if the area is greater than 700 then we want to draw the rectangle so we are going to just say CB 2 dot rectangle we have already learned how to draw a rectangle on an image using the rectangle method the first argument here will be the source which will be frame 1 the second argument will be the point 1 so we are going to just say point 1 will be X comma Y the third argument will be point 2 so we are going to just say X plus W comma y plus h the next argument will be the color so let's say the color will be the same 0 comma 255 comma 0 the next argument will be the thickness let's say we want to give the thickness to as we have done with the draw contour we have provided the thickness of two here right now in the next step we are going to just print some text on the image if some movement is observed so we can just say CV to dot put text this also we have seen in the previous videos how to put text on an image so this time the source will be our frame one the second will be the text so we will just say status let's say and if there is some movement we are going to just say in the curly brackets we are going to just use the format method so this is just formatting the result using the string and we are going to just say movement the next argument here will be the origin so where we want to put this text let's say we want to put this text on 10 comma 20 coordinate and then the next argument will be the font face so we are going to just say font face will be CV 2.4 font Hershey simplex let's say so we are going to use this font and the next argument will be the font scale so let me just do this on the next line so one scale will be let's say 1 the next will be the color of the font so let's say the color will be 0 comma 0 comma 255 and then the last argument will be the thickness so let's say the thickness will be 3 and this code is going to put the rectangle around your moving persons if the area of that contour is greater than 700 okay so let's run this code and let's see if it works or not so I'm going to just run this code and you can see that status is movement because all the persons here are moving and you can see these rectangles which are drawn around the moving persons and this noise which we were seeing in the previous result is also gone around the movement of this rope okay sometimes this rectangle is drawn on the movement of the rope also so in this case you can also increase the expected area let's say we just want to find out the contours which are greater than 900 and we can now you can see these rectangles are drawn around these moving persons with the area which have the contour area more than 900 so you can remove these kind of noises from the frame using this area so this was a very basic example how you can detect the motion and track your moving object inside your video using Python and OpenCV I hope you enjoyed this video and I will see you in the next video
