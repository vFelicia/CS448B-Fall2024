With timestamps:

00:00 - in this video we will learn how to use
00:02 - exception handling in Python so first of
00:06 - all what are exceptions so an exception
00:09 - is an event which occurs during the
00:13 - execution of a program that disrupts the
00:17 - normal flow of the program
00:19 - so basically exception is an unexpected
00:24 - event which disrupts the normal flow of
00:29 - the program so let me show you some
00:31 - examples of exceptions which may occur
00:35 - during the execution of a program so to
00:38 - start with I'm going to open the PyCharm
00:40 - Python consoles and then I'm going to
00:43 - maximize this pycharm Python control and
00:46 - let me also just clear this terminal so
00:51 - we will start from the top so let's say
00:53 - we have a number and we divide this
00:55 - number by 0 and when we press ENTER it's
00:59 - going to give us this exception which
01:02 - says zero division error so this 0
01:05 - division error is an exception when you
01:09 - divide anything by 0 in python let me
01:13 - show you some more examples so let's say
01:15 - I want to add a number and a string
01:19 - let's say 10 plus 10
01:22 - but this 10 is an integer and this 10 is
01:25 - a string and when I run the command it
01:29 - says type error unsupported operand
01:32 - types for INT and string so we cannot
01:35 - add a number and a string in Python so
01:39 - this type error is another kind of
01:42 - exception let's say I'm going to just
01:45 - use a variable name a b c which i
01:50 - haven't declared till now and when i
01:53 - press enter it's going to once again
01:55 - give me this exception which says name
01:58 - error named ABC is not defined which is
02:02 - true because we haven't defined the name
02:04 - ABC but we are calling this variable
02:07 - which we haven't defined so we get this
02:10 - exception which says name error next let
02:13 - define a variable and I'm going to
02:15 - assign some couple values here one in
02:19 - two and now what I want to do is I want
02:22 - to call some methods so you can see some
02:25 - methods are available for this double
02:28 - now let's call some random method using
02:32 - this double variable it will give us an
02:35 - error which says attribute error double
02:38 - object has no attribute whatever
02:40 - attribute I have provided here so this
02:42 - attribute is not present in the tupple
02:45 - object also when you call a method
02:49 - let me call some other method which is
02:52 - not there and once again when I press
02:54 - ENTER once again I get this error which
02:58 - says attribute error because this
03:00 - function is not present in the tupple
03:03 - object so these are all exceptions in
03:06 - Python attribute error or name error or
03:10 - type error or zero division error all
03:13 - are exceptions in Python now if you want
03:16 - to see more exceptions you can use the
03:20 - help
03:20 - inbuilt method and then you can write
03:23 - built-ins and then press ENTER it gives
03:26 - me the name error once again because I
03:29 - need to first of all import this
03:32 - built-in module so import built-ins and
03:35 - I'm going to once again use help and
03:37 - inside the parentheses built-in and then
03:40 - press Enter which is going to give me
03:43 - this kind of output and when I go at the
03:46 - top of this output so let me just scroll
03:49 - at the top and here you will see under
03:52 - the classes there is an object class and
03:56 - under the object class there is a base
03:58 - exception class and under the base
04:00 - exception comes the exception class and
04:02 - under the exception there is a big list
04:05 - of exceptions which you can see here so
04:08 - zero division error we have already seen
04:11 - or when you scroll down name error we
04:14 - have already seen so all the exceptions
04:16 - which Python may throw are all listed
04:20 - here so if you want to see the list of
04:22 - all the exceptions
04:23 - you can just give this method which is
04:26 - help
04:27 - built-in but before that you need to
04:29 - import this built-in module and then
04:32 - it's going to show you this kind of
04:34 - output and you will also be able to see
04:36 - all these exceptions in Python now let
04:40 - me show you a real life example of
04:43 - exceptions in Python so what I'm going
04:46 - to do is I'm going to define some
04:48 - variables here so first variable is
04:50 - result and I'm going to initialize it
04:53 - with the value none and then I'm going
04:56 - to declare two variables let's say a
04:59 - which takes an input and we want to ask
05:03 - the user to provide some numbers so
05:06 - let's say number one using the variable
05:10 - a and in the same way I'm going to going
05:12 - to declare a variable B which also asked
05:15 - the user to provide a second number but
05:18 - you already know that this input will
05:20 - return the string so we can just convert
05:24 - this string into a float let's say so
05:27 - I'm going to just cast the output output
05:29 - of this input string to a float value
05:34 - and then what I want to do is I want to
05:36 - save the division of the two numbers a
05:39 - and B into the result so a divided by B
05:43 - I want to save it into the result and
05:46 - then at last I would just want to print
05:49 - the value of the result now let's run
05:52 - this program so right-click run the
05:55 - filename and then let me provide some
05:57 - numbers here so 5 and 6 and press ENTER
06:03 - it's going to give me the result which
06:06 - is the division of these two numbers let
06:08 - me run the program once again and this
06:11 - time I will provide 10 and the second
06:14 - number is equal to 0 here and we know
06:17 - that when we divide some number y 0 we
06:20 - get this exception which says zero
06:23 - division error and you will also observe
06:26 - that as soon as this error is thrown so
06:30 - this error comes from this line line 5
06:32 - so when you click on this line it shows
06:35 - us that this error is coming from this
06:37 - line which is the division of these two
06:40 - numbers
06:41 - and as soon as this exception occurs all
06:43 - the code which we want to execute after
06:47 - that will not be executed so we were
06:50 - printing this result here but it's not
06:53 - printed let me print something else here
06:55 - so I'm going to just say end and once
06:59 - again I'm going to run the program and
07:01 - I'm going to provide the same inputs
07:03 - here and you can see neither this
07:07 - statement is printed nor the end is
07:10 - printed so whenever an exception occurs
07:13 - Pythian stops whatever it is doing so in
07:17 - our case whenever this exception is
07:20 - thrown at this line both these
07:22 - statements will not be executed and why
07:26 - these two lines of code will not be
07:28 - executed because we haven't handled this
07:32 - exception so Python allows us to handle
07:35 - the exception which we are not doing
07:38 - right now that's why it stops everything
07:41 - whenever this exception occurs so how to
07:44 - handle these types of exceptions so you
07:47 - can handle these type of exceptions
07:49 - using a try accept keyword so just write
07:55 - try and then under the try you write
07:57 - whatever you want to test and then you
08:00 - write accept keyword here so just write
08:03 - accept and then under the accept you
08:05 - write some code which you perform when
08:09 - the exception is thrown so I'm going to
08:12 - just say this error which is float
08:15 - division error okay so this is what I'm
08:18 - going to print and don't forget to put
08:21 - colon in front of accept and try so let
08:24 - me run the code and let me give the same
08:27 - condition so 10 and second is 0 and this
08:30 - time you will see that this exception is
08:33 - not thrown and the result is also
08:36 - printed and the end line is also printed
08:39 - you can see here and also this line is
08:43 - executed which comes from the accept
08:47 - statement which says float division
08:50 - error so whenever you use try accept
08:52 - notation first of all
08:54 - code under a tribe will be evaluated and
08:57 - if it throws some exception then
09:00 - whatever code you write under the accept
09:02 - will be executed and then all the other
09:05 - statements will be executed whatever
09:08 - comes after this try accept code so this
09:12 - time no error is thrown and we have
09:15 - handled this error and you can see
09:18 - clearly it says that flow division by
09:21 - zero which means it comes to the except
09:24 - condition so now we are handling this
09:27 - error which is zero division error now
09:30 - in other condition when this error is
09:33 - not thrown so we will just give some
09:35 - valid value ten and five so no zero
09:39 - division error will be thrown and when I
09:42 - press enter you will see that result
09:45 - will be printed and and will be printed
09:47 - by these two lines but no except
09:51 - statement will be printed so this
09:53 - statement is not executed because this
09:57 - code has not thrown any error because
10:00 - there is no error occurred now as I have
10:02 - shown you that all the exceptions are
10:06 - under exception class so we can also
10:10 - write here exception and then we can
10:13 - just write this notation exception as e
10:17 - and this will show us more details of
10:21 - the error okay so I'm going to just
10:24 - write here error is equal to and then
10:29 - I'm going to just print whatever the
10:31 - content of e is and once again when I
10:34 - run the code and I will give the number
10:38 - with the zero here and you will see it
10:42 - prints this error which says float
10:45 - division by zero so this is printed
10:48 - using this iki word which shows us the
10:51 - correct error I have also shown you that
10:54 - this exception is the base class of zero
10:57 - division error for example when I will
11:00 - try to know the type of this error e and
11:05 - when I run the code once again and
11:08 - we provide this input once again you
11:11 - will see that this error is of type 0
11:14 - division error so we know that this
11:16 - exception is thrown from this class so
11:19 - instead of writing this generic
11:21 - exception class we can also use this 0
11:25 - division error here and now whenever
11:27 - this specific error is thrown then only
11:31 - this will be printed here so let me run
11:34 - the code once again and let me give this
11:37 - input here and you will see once again
11:40 - this line of code is printed using this
11:42 - statement and that means zero division
11:44 - error is caught by this line of code and
11:49 - then the statement under that is printed
11:51 - now let's say this line of code throws
11:54 - some other kind of error other than zero
11:58 - division error so let me just remove
12:00 - this typecasting or float here that
12:03 - means it's going to throw us some other
12:06 - kind of error which is not zero division
12:08 - error and let me run the code now and I
12:12 - will provide two numbers here once again
12:14 - and you will see that now this error is
12:19 - different which is type error which says
12:22 - unsupported type string and float so why
12:26 - is this happening we are catching the
12:29 - exception using this except keyword but
12:32 - we are only catching the zero division
12:35 - exception we are not catching that type
12:38 - error exception that's why our program
12:41 - is stopped and these two lines of code
12:44 - is not executed so you need to either
12:48 - use the base class of the exception
12:51 - which is this one exception and when you
12:53 - run the code and when you write these
12:56 - input it will be handle and you can see
12:59 - this time type error is caught it's not
13:03 - a zero division error but the type error
13:05 - which comes because the type which we
13:09 - have provided here is string and we are
13:11 - dividing string by a float value which
13:15 - throws this error so if you want to
13:17 - catch all the exceptions you use this
13:20 - base class but it's not
13:22 - good practice you need to have
13:24 - information about your exceptions so I'm
13:26 - going to once again write this zero
13:28 - exception error here and what I can do
13:31 - more here is I can add one more except
13:35 - statement here and this time instead of
13:38 - zero division error I can say catch also
13:41 - type error okay so I'm going to just
13:45 - write type error and here zero division
13:49 - error so we know from where this error
13:51 - is coming and when I run the code once
13:54 - again and when I give the inputs you
13:57 - will see that this error is coming from
14:01 - this line of code
14:03 - so this accept statement is catching
14:07 - your exception which is type error now
14:10 - when I just add this typecast of float
14:14 - once again and when I run the code once
14:16 - again and when I provide ten and zero
14:19 - once again you will see this error is
14:21 - caught by the other accept statement
14:25 - which is this statement which is used to
14:29 - catch the zero division error so you can
14:33 - also provide multiple accept statement
14:36 - in order to catch multiple exceptions in
14:40 - Python we will talk about else
14:43 - and finally statement with this try
14:47 - accept statement now to start with at
14:49 - the end of this try accept statement we
14:53 - can also use the else statement so you
14:56 - can just write else and for now I will
15:00 - just print here for example underscore
15:03 - underscore else underscore underscore
15:06 - and also we can use a keyword called
15:10 - finally with our try accept statement
15:14 - and here also I am going to just print
15:18 - underscore underscore finally underscore
15:22 - underscore so what does this else and
15:24 - finally statement do let's see by
15:27 - running our program so I'm going to run
15:29 - the program and now I'm going to give
15:32 - some valid input so that our program
15:35 - will
15:35 - not throw any errors so I'm going to
15:38 - just divide 10 by 5 and then press ENTER
15:41 - and you will see what is printed here so
15:44 - first of all else is printed then
15:46 - finally is printed and then the result
15:49 - is printed using this print statement
15:52 - and then at the end this and string is
15:56 - printed so in this scenario there was no
15:58 - exception thrown by the code that's why
16:02 - none of these exception statements are
16:05 - printed so you can use L statement
16:07 - whenever your code does not throw any
16:11 - exception so whenever your code doesn't
16:14 - throw any exception else statement will
16:17 - be executed but when this finally
16:21 - statement is executed so let me give you
16:24 - one more scenario and then we will
16:27 - discuss about the finally statement and
16:29 - this time I'm going to intentionally
16:31 - write 0 here which is going to throw the
16:34 - exception and I'm going to press ENTER
16:37 - and you can see 0 division error is
16:40 - thrown which is caught here and this
16:44 - statement is printed first and then this
16:47 - finally keyword is printed using this
16:50 - statement and at the end these two lines
16:52 - of code are executed so once again let's
16:55 - talk about the else statement you can
16:58 - see whenever your code throws an
17:01 - exception then this else statement will
17:05 - not be executed the else statement will
17:08 - only be executed whenever your code
17:11 - doesn't throw any exception but what's
17:14 - with finally statement so we have seen
17:17 - in the case of exception this finally is
17:20 - printed and in the case of no exception
17:23 - also this finally is printed so this
17:25 - finally statement is guaranteed to be
17:28 - executed whether exception occurs or it
17:32 - does not occurs so the only code which
17:35 - is guaranteed to be executed in all
17:38 - these lines is the finally statement
17:42 - finally statement is always executed
17:44 - whether your code throws any error or it
17:49 - does
17:49 - through any error now in which cases you
17:53 - might want to use this finally statement
17:56 - so sometimes whenever you use files you
18:00 - need to close these files after opening
18:04 - them whether the exception occurs or not
18:07 - it is mandatory to close your files and
18:11 - in those cases you can use this finally
18:13 - statement the next example is for
18:16 - example you are using any database and
18:20 - you are opening that database right and
18:24 - for some reason your connection is lost
18:26 - with your database then the exception is
18:31 - thrown and in the final statement you
18:33 - can reconnect to your database using the
18:37 - reconnect code of the database so in
18:40 - finally statement you would want to
18:43 - execute that code which you think that
18:46 - have to be executed whether error
18:48 - happens or does not happens so in all
18:52 - those scenarios you can use the finally
18:55 - statement now the next question arises
18:57 - is whether we can use this else and the
19:01 - finally statement without the accept
19:04 - statement the answer is you can already
19:07 - see here no so you cannot use this else
19:11 - statement without the accept statement
19:14 - so you have to use accept in order to
19:17 - use this else statement but when I
19:21 - remove the accept and else statements
19:24 - you can see there is no error now so you
19:27 - can use the try and finally without the
19:31 - use of accept or the else statement
19:35 - because the code under finally will
19:37 - always be executed whether your code
19:40 - throws any error or not so it's
19:43 - independent of this accept statement or
19:47 - the else statement so this is how you
19:50 - can use else
19:51 - and finally statements with the try and
19:55 - accept key words now in this video I am
19:57 - going to show you how to raise an
20:00 - exception in Python now
20:03 - an exception is similar to through an
20:06 - error or exception in the languages like
20:09 - Java or C++ so Python allows us to use a
20:14 - keyword called raise and that raised
20:18 - statement or keyword allows the
20:21 - programmer to force a specific exception
20:25 - to occur so let's get started and let's
20:28 - see this raised statement with an
20:30 - example so to start with I have created
20:33 - a class called coffee cup which have a
20:36 - init method which takes one argument
20:39 - which is the temperature and I'm just
20:42 - initializing the value of temperature
20:44 - using this init method and this coffee
20:46 - cup class also have one more method
20:49 - which is called drink coffee and inside
20:52 - this drink coffee method I have some
20:54 - conditions so if the temperature is
20:57 - greater than 85 then I print coffee is
21:01 - too hot if the temperature is less than
21:03 - 65 then I print coffee is too cold and
21:07 - if the temperature is between 65 and 85
21:12 - then I print that coffee is okay and
21:17 - here I have created an instance of
21:19 - coffee cup class with an argument which
21:22 - is 75 to start with and I'm just calling
21:25 - this method drink coffee from this
21:27 - object so let's run the code and let's
21:30 - see what happens so because this 75 is
21:32 - neither satisfying this condition nor
21:35 - this condition so the answer which is
21:38 - printed here is coffee okay to drink now
21:42 - when I provide for example 101
21:45 - temperature value here and when I run
21:48 - the code once again it will say coffee
21:50 - too hot if I say coffee temperature is
21:54 - 10 it says coffee too cold now in these
21:58 - two situations when the coffee is too
22:01 - hot or the coffee is too cold I can also
22:05 - throw an exception and show the user
22:08 - some kind of message so instead of
22:11 - printing that coffee is too hot I can
22:14 - use our keyword called
22:16 - raise and then I can use any class of
22:21 - exception so we can use the exception
22:24 - class or any subclass of exception and
22:27 - you can see this exception class comes
22:29 - in this built in module so I'm going to
22:33 - just use this exception which is the
22:35 - base class and same I'm going to do here
22:40 - when the coffee is cold and I'm going to
22:44 - comment these two print statements and
22:47 - now when I run the code it throws an
22:50 - exception without any error so it throws
22:53 - an exception and after that the
22:55 - execution of program stops so right now
22:59 - temperature is 10 which satisfies this
23:02 - condition so this exception is thrown
23:05 - and that's why we see this exception so
23:08 - in Python we can throw an exception
23:11 - using this keyword race and this
23:14 - exception class or any subclass of this
23:18 - exception class now in the last video
23:19 - also I have shown you how to see all the
23:22 - subclasses which are under the exception
23:24 - class to see them you can just open your
23:28 - Python console and in the Python Python
23:31 - console you just need to import
23:34 - militants and then press enter and now
23:37 - you use a method called help and inside
23:42 - the help method you use this keyword
23:45 - built-ins and then press Enter which is
23:47 - going to give you a big list here and
23:50 - when you scroll up at the top you will
23:53 - see classes here and under the classes
23:55 - you will see base exception and we have
23:58 - used this class which is exception you
24:01 - can see here so to raise an exception
24:03 - you can use this exception class or any
24:07 - subclass under this exception so you can
24:10 - use automatic error or you can use reads
24:13 - or division error buffer error whatever
24:15 - error is appropriate for your exception
24:20 - you can use from this list so right now
24:24 - I have just used the exception class
24:27 - which is the base class to throw an
24:29 - exception here instead of
24:30 - exception I can also use for example
24:33 - exception called value error which is
24:36 - also the subclass of this exception
24:39 - class and now when I run the code it
24:43 - will show me the value error so this is
24:45 - the one way of throwing an exception in
24:48 - Python now with these exceptions you can
24:51 - also pass an argument inside the
24:54 - parentheses so you can write exception
24:56 - and then in the parentheses you can
24:59 - write the message whatever you want to
25:01 - show when this exception is thrown so
25:04 - here I can just write coffee is too hot
25:07 - and for the another exception I'm going
25:11 - to just say coffee too cold and when I
25:14 - run the code because it's a value
25:17 - exception which comes from this
25:20 - statement it shows the value error
25:22 - exception and then the message which we
25:25 - want to show so we are just showing
25:27 - coffee too cold so here it also prints
25:31 - the same message which we have given as
25:33 - the first argument of this exception
25:37 - error class so you can either raise an
25:39 - exception with the base class exception
25:41 - or the subclass of the base class
25:44 - exception for example value error and
25:46 - you can also give an optional argument
25:49 - here which is the message which will be
25:51 - displayed at the time when this
25:53 - exception is thrown so this is how you
25:56 - can raise or throw an exception in
25:58 - Python now in this video I'm going to
26:00 - show you how you can create your custom
26:02 - exception classes and use them to raise
26:06 - exception in Python so let's get started
26:09 - so I'm going to create a custom
26:12 - exception class here so let me create a
26:15 - class and I'm going to name it as coffee
26:18 - too hot exception and to create your own
26:21 - custom exception class you need to
26:24 - inherit from the exception class so you
26:28 - just need to provide exception as the
26:31 - superclass here inside the parentheses
26:33 - and then after the colon you can just
26:36 - define the init method to provide the
26:40 - message so it takes one argument for
26:43 - example
26:44 - MSG which stands for our message and now
26:47 - what we need to do is we need to pass
26:49 - this message to the constructor of this
26:53 - exception class and how to do that you
26:56 - can do that using the super function so
26:59 - you can use super and then call the init
27:03 - function here which means we are calling
27:06 - the init method of this exception class
27:09 - using this super function and we just
27:12 - need to pass the message which comes as
27:15 - an argument of your custom exception
27:18 - class to the super class which is the
27:20 - exception class and that's your custom
27:24 - exception class now I can pass this
27:27 - class instead of this base exception
27:30 - class similarly to create the coffee too
27:35 - cold class I can once again write coffee
27:39 - too cold here and instead of using the
27:42 - subclass of exception I can give here my
27:45 - own custom exception class so let's run
27:48 - this program and let's see what happens
27:50 - so because right now the temperature
27:52 - which we have provided here is 10 which
27:55 - means this falls in this condition which
27:58 - says coffee too cold so we are seeing
28:01 - this exception which says coffee too
28:04 - cold and then it's going to show us this
28:07 - message which says coffee too cold now
28:10 - we have made this exception class
28:12 - explanatory enough so that we don't
28:15 - require this coffee too cold message
28:17 - instead of this coffee too cold message
28:20 - we can give some more information for
28:23 - the user for example we can write here
28:26 - coffee temperature and then we can
28:29 - provide the information of the coffee
28:32 - temperature which the user has provided
28:34 - so self dot underscore underscore
28:36 - temperature and same we can provide in
28:41 - the coffee too hot exception message one
28:45 - more thing which we need to do here is
28:47 - we need to convert this temperature into
28:49 - a string so we can use this mastered STR
28:53 - to convert from the integer or the float
28:57 - value
28:58 - to the string value so this is just the
29:00 - typecasting from the integer to the
29:04 - string and now we are going to run our
29:06 - program and see what's the result here
29:09 - so you can see now the result says
29:11 - coffee too cold exception and then it
29:15 - shows the temperature which is provided
29:17 - by the user let's say this temperature
29:20 - we change from ten to hundred and once
29:22 - again run the code now it's going to say
29:25 - coffee too hot and it's going to display
29:27 - the temperature of coffee which is
29:30 - hundred here so let's rewind what we
29:32 - have learned about creating our own
29:35 - custom exception class so in order to
29:39 - create your own custom exception class
29:41 - you need to inherit from this exception
29:44 - base class or the superclass and then
29:47 - you can create any custom class with any
29:50 - name and for passing the message which
29:53 - you provide as the first argument of
29:55 - your exception you can just create an
29:58 - init method which takes this message and
30:01 - pass it to the init method of your
30:05 - superclass which is the exception class
30:07 - so this is how you can create your own
30:10 - custom exception classes and use them to
30:13 - raise the exception in Python I hope you
30:17 - have enjoyed this video and I will see
30:19 - you in the next video

Cleaned transcript:

in this video we will learn how to use exception handling in Python so first of all what are exceptions so an exception is an event which occurs during the execution of a program that disrupts the normal flow of the program so basically exception is an unexpected event which disrupts the normal flow of the program so let me show you some examples of exceptions which may occur during the execution of a program so to start with I'm going to open the PyCharm Python consoles and then I'm going to maximize this pycharm Python control and let me also just clear this terminal so we will start from the top so let's say we have a number and we divide this number by 0 and when we press ENTER it's going to give us this exception which says zero division error so this 0 division error is an exception when you divide anything by 0 in python let me show you some more examples so let's say I want to add a number and a string let's say 10 plus 10 but this 10 is an integer and this 10 is a string and when I run the command it says type error unsupported operand types for INT and string so we cannot add a number and a string in Python so this type error is another kind of exception let's say I'm going to just use a variable name a b c which i haven't declared till now and when i press enter it's going to once again give me this exception which says name error named ABC is not defined which is true because we haven't defined the name ABC but we are calling this variable which we haven't defined so we get this exception which says name error next let define a variable and I'm going to assign some couple values here one in two and now what I want to do is I want to call some methods so you can see some methods are available for this double now let's call some random method using this double variable it will give us an error which says attribute error double object has no attribute whatever attribute I have provided here so this attribute is not present in the tupple object also when you call a method let me call some other method which is not there and once again when I press ENTER once again I get this error which says attribute error because this function is not present in the tupple object so these are all exceptions in Python attribute error or name error or type error or zero division error all are exceptions in Python now if you want to see more exceptions you can use the help inbuilt method and then you can write builtins and then press ENTER it gives me the name error once again because I need to first of all import this builtin module so import builtins and I'm going to once again use help and inside the parentheses builtin and then press Enter which is going to give me this kind of output and when I go at the top of this output so let me just scroll at the top and here you will see under the classes there is an object class and under the object class there is a base exception class and under the base exception comes the exception class and under the exception there is a big list of exceptions which you can see here so zero division error we have already seen or when you scroll down name error we have already seen so all the exceptions which Python may throw are all listed here so if you want to see the list of all the exceptions you can just give this method which is help builtin but before that you need to import this builtin module and then it's going to show you this kind of output and you will also be able to see all these exceptions in Python now let me show you a real life example of exceptions in Python so what I'm going to do is I'm going to define some variables here so first variable is result and I'm going to initialize it with the value none and then I'm going to declare two variables let's say a which takes an input and we want to ask the user to provide some numbers so let's say number one using the variable a and in the same way I'm going to going to declare a variable B which also asked the user to provide a second number but you already know that this input will return the string so we can just convert this string into a float let's say so I'm going to just cast the output output of this input string to a float value and then what I want to do is I want to save the division of the two numbers a and B into the result so a divided by B I want to save it into the result and then at last I would just want to print the value of the result now let's run this program so rightclick run the filename and then let me provide some numbers here so 5 and 6 and press ENTER it's going to give me the result which is the division of these two numbers let me run the program once again and this time I will provide 10 and the second number is equal to 0 here and we know that when we divide some number y 0 we get this exception which says zero division error and you will also observe that as soon as this error is thrown so this error comes from this line line 5 so when you click on this line it shows us that this error is coming from this line which is the division of these two numbers and as soon as this exception occurs all the code which we want to execute after that will not be executed so we were printing this result here but it's not printed let me print something else here so I'm going to just say end and once again I'm going to run the program and I'm going to provide the same inputs here and you can see neither this statement is printed nor the end is printed so whenever an exception occurs Pythian stops whatever it is doing so in our case whenever this exception is thrown at this line both these statements will not be executed and why these two lines of code will not be executed because we haven't handled this exception so Python allows us to handle the exception which we are not doing right now that's why it stops everything whenever this exception occurs so how to handle these types of exceptions so you can handle these type of exceptions using a try accept keyword so just write try and then under the try you write whatever you want to test and then you write accept keyword here so just write accept and then under the accept you write some code which you perform when the exception is thrown so I'm going to just say this error which is float division error okay so this is what I'm going to print and don't forget to put colon in front of accept and try so let me run the code and let me give the same condition so 10 and second is 0 and this time you will see that this exception is not thrown and the result is also printed and the end line is also printed you can see here and also this line is executed which comes from the accept statement which says float division error so whenever you use try accept notation first of all code under a tribe will be evaluated and if it throws some exception then whatever code you write under the accept will be executed and then all the other statements will be executed whatever comes after this try accept code so this time no error is thrown and we have handled this error and you can see clearly it says that flow division by zero which means it comes to the except condition so now we are handling this error which is zero division error now in other condition when this error is not thrown so we will just give some valid value ten and five so no zero division error will be thrown and when I press enter you will see that result will be printed and and will be printed by these two lines but no except statement will be printed so this statement is not executed because this code has not thrown any error because there is no error occurred now as I have shown you that all the exceptions are under exception class so we can also write here exception and then we can just write this notation exception as e and this will show us more details of the error okay so I'm going to just write here error is equal to and then I'm going to just print whatever the content of e is and once again when I run the code and I will give the number with the zero here and you will see it prints this error which says float division by zero so this is printed using this iki word which shows us the correct error I have also shown you that this exception is the base class of zero division error for example when I will try to know the type of this error e and when I run the code once again and we provide this input once again you will see that this error is of type 0 division error so we know that this exception is thrown from this class so instead of writing this generic exception class we can also use this 0 division error here and now whenever this specific error is thrown then only this will be printed here so let me run the code once again and let me give this input here and you will see once again this line of code is printed using this statement and that means zero division error is caught by this line of code and then the statement under that is printed now let's say this line of code throws some other kind of error other than zero division error so let me just remove this typecasting or float here that means it's going to throw us some other kind of error which is not zero division error and let me run the code now and I will provide two numbers here once again and you will see that now this error is different which is type error which says unsupported type string and float so why is this happening we are catching the exception using this except keyword but we are only catching the zero division exception we are not catching that type error exception that's why our program is stopped and these two lines of code is not executed so you need to either use the base class of the exception which is this one exception and when you run the code and when you write these input it will be handle and you can see this time type error is caught it's not a zero division error but the type error which comes because the type which we have provided here is string and we are dividing string by a float value which throws this error so if you want to catch all the exceptions you use this base class but it's not good practice you need to have information about your exceptions so I'm going to once again write this zero exception error here and what I can do more here is I can add one more except statement here and this time instead of zero division error I can say catch also type error okay so I'm going to just write type error and here zero division error so we know from where this error is coming and when I run the code once again and when I give the inputs you will see that this error is coming from this line of code so this accept statement is catching your exception which is type error now when I just add this typecast of float once again and when I run the code once again and when I provide ten and zero once again you will see this error is caught by the other accept statement which is this statement which is used to catch the zero division error so you can also provide multiple accept statement in order to catch multiple exceptions in Python we will talk about else and finally statement with this try accept statement now to start with at the end of this try accept statement we can also use the else statement so you can just write else and for now I will just print here for example underscore underscore else underscore underscore and also we can use a keyword called finally with our try accept statement and here also I am going to just print underscore underscore finally underscore underscore so what does this else and finally statement do let's see by running our program so I'm going to run the program and now I'm going to give some valid input so that our program will not throw any errors so I'm going to just divide 10 by 5 and then press ENTER and you will see what is printed here so first of all else is printed then finally is printed and then the result is printed using this print statement and then at the end this and string is printed so in this scenario there was no exception thrown by the code that's why none of these exception statements are printed so you can use L statement whenever your code does not throw any exception so whenever your code doesn't throw any exception else statement will be executed but when this finally statement is executed so let me give you one more scenario and then we will discuss about the finally statement and this time I'm going to intentionally write 0 here which is going to throw the exception and I'm going to press ENTER and you can see 0 division error is thrown which is caught here and this statement is printed first and then this finally keyword is printed using this statement and at the end these two lines of code are executed so once again let's talk about the else statement you can see whenever your code throws an exception then this else statement will not be executed the else statement will only be executed whenever your code doesn't throw any exception but what's with finally statement so we have seen in the case of exception this finally is printed and in the case of no exception also this finally is printed so this finally statement is guaranteed to be executed whether exception occurs or it does not occurs so the only code which is guaranteed to be executed in all these lines is the finally statement finally statement is always executed whether your code throws any error or it does through any error now in which cases you might want to use this finally statement so sometimes whenever you use files you need to close these files after opening them whether the exception occurs or not it is mandatory to close your files and in those cases you can use this finally statement the next example is for example you are using any database and you are opening that database right and for some reason your connection is lost with your database then the exception is thrown and in the final statement you can reconnect to your database using the reconnect code of the database so in finally statement you would want to execute that code which you think that have to be executed whether error happens or does not happens so in all those scenarios you can use the finally statement now the next question arises is whether we can use this else and the finally statement without the accept statement the answer is you can already see here no so you cannot use this else statement without the accept statement so you have to use accept in order to use this else statement but when I remove the accept and else statements you can see there is no error now so you can use the try and finally without the use of accept or the else statement because the code under finally will always be executed whether your code throws any error or not so it's independent of this accept statement or the else statement so this is how you can use else and finally statements with the try and accept key words now in this video I am going to show you how to raise an exception in Python now an exception is similar to through an error or exception in the languages like Java or C++ so Python allows us to use a keyword called raise and that raised statement or keyword allows the programmer to force a specific exception to occur so let's get started and let's see this raised statement with an example so to start with I have created a class called coffee cup which have a init method which takes one argument which is the temperature and I'm just initializing the value of temperature using this init method and this coffee cup class also have one more method which is called drink coffee and inside this drink coffee method I have some conditions so if the temperature is greater than 85 then I print coffee is too hot if the temperature is less than 65 then I print coffee is too cold and if the temperature is between 65 and 85 then I print that coffee is okay and here I have created an instance of coffee cup class with an argument which is 75 to start with and I'm just calling this method drink coffee from this object so let's run the code and let's see what happens so because this 75 is neither satisfying this condition nor this condition so the answer which is printed here is coffee okay to drink now when I provide for example 101 temperature value here and when I run the code once again it will say coffee too hot if I say coffee temperature is 10 it says coffee too cold now in these two situations when the coffee is too hot or the coffee is too cold I can also throw an exception and show the user some kind of message so instead of printing that coffee is too hot I can use our keyword called raise and then I can use any class of exception so we can use the exception class or any subclass of exception and you can see this exception class comes in this built in module so I'm going to just use this exception which is the base class and same I'm going to do here when the coffee is cold and I'm going to comment these two print statements and now when I run the code it throws an exception without any error so it throws an exception and after that the execution of program stops so right now temperature is 10 which satisfies this condition so this exception is thrown and that's why we see this exception so in Python we can throw an exception using this keyword race and this exception class or any subclass of this exception class now in the last video also I have shown you how to see all the subclasses which are under the exception class to see them you can just open your Python console and in the Python Python console you just need to import militants and then press enter and now you use a method called help and inside the help method you use this keyword builtins and then press Enter which is going to give you a big list here and when you scroll up at the top you will see classes here and under the classes you will see base exception and we have used this class which is exception you can see here so to raise an exception you can use this exception class or any subclass under this exception so you can use automatic error or you can use reads or division error buffer error whatever error is appropriate for your exception you can use from this list so right now I have just used the exception class which is the base class to throw an exception here instead of exception I can also use for example exception called value error which is also the subclass of this exception class and now when I run the code it will show me the value error so this is the one way of throwing an exception in Python now with these exceptions you can also pass an argument inside the parentheses so you can write exception and then in the parentheses you can write the message whatever you want to show when this exception is thrown so here I can just write coffee is too hot and for the another exception I'm going to just say coffee too cold and when I run the code because it's a value exception which comes from this statement it shows the value error exception and then the message which we want to show so we are just showing coffee too cold so here it also prints the same message which we have given as the first argument of this exception error class so you can either raise an exception with the base class exception or the subclass of the base class exception for example value error and you can also give an optional argument here which is the message which will be displayed at the time when this exception is thrown so this is how you can raise or throw an exception in Python now in this video I'm going to show you how you can create your custom exception classes and use them to raise exception in Python so let's get started so I'm going to create a custom exception class here so let me create a class and I'm going to name it as coffee too hot exception and to create your own custom exception class you need to inherit from the exception class so you just need to provide exception as the superclass here inside the parentheses and then after the colon you can just define the init method to provide the message so it takes one argument for example MSG which stands for our message and now what we need to do is we need to pass this message to the constructor of this exception class and how to do that you can do that using the super function so you can use super and then call the init function here which means we are calling the init method of this exception class using this super function and we just need to pass the message which comes as an argument of your custom exception class to the super class which is the exception class and that's your custom exception class now I can pass this class instead of this base exception class similarly to create the coffee too cold class I can once again write coffee too cold here and instead of using the subclass of exception I can give here my own custom exception class so let's run this program and let's see what happens so because right now the temperature which we have provided here is 10 which means this falls in this condition which says coffee too cold so we are seeing this exception which says coffee too cold and then it's going to show us this message which says coffee too cold now we have made this exception class explanatory enough so that we don't require this coffee too cold message instead of this coffee too cold message we can give some more information for the user for example we can write here coffee temperature and then we can provide the information of the coffee temperature which the user has provided so self dot underscore underscore temperature and same we can provide in the coffee too hot exception message one more thing which we need to do here is we need to convert this temperature into a string so we can use this mastered STR to convert from the integer or the float value to the string value so this is just the typecasting from the integer to the string and now we are going to run our program and see what's the result here so you can see now the result says coffee too cold exception and then it shows the temperature which is provided by the user let's say this temperature we change from ten to hundred and once again run the code now it's going to say coffee too hot and it's going to display the temperature of coffee which is hundred here so let's rewind what we have learned about creating our own custom exception class so in order to create your own custom exception class you need to inherit from this exception base class or the superclass and then you can create any custom class with any name and for passing the message which you provide as the first argument of your exception you can just create an init method which takes this message and pass it to the init method of your superclass which is the exception class so this is how you can create your own custom exception classes and use them to raise the exception in Python I hope you have enjoyed this video and I will see you in the next video
