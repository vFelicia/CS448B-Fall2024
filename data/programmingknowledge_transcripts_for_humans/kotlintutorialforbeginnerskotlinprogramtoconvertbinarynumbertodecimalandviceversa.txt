With timestamps:

00:00 - in this video we will write a kotlin
00:01 - program to convert binary number to
00:03 - decimal and vice versa okay
00:07 - convert
00:08 - binary
00:11 - to
00:12 - decimal
00:13 - and
00:14 - device
00:17 - okay so uh if you don't know
00:20 - uh binary is the uh the language that we
00:23 - talked to computers about and decimal is
00:26 - the like is the number system we
00:27 - generally use okay so uh the binaries
00:31 - are the are is the number system of
00:33 - zeros and ones
00:35 - okay
00:36 - so in this program you will learn to
00:38 - convert binary number to a decimal
00:39 - number
00:40 - so firstly uh we will write a program to
00:43 - convert binary to decimal now uh let me
00:46 - create a main function
00:50 - now what we have to do when we have to
00:51 - convert a
00:53 - binary number to decimal number so
00:55 - binary number let's say there is one one
00:58 - so uh the one at the uh
01:01 - least significant bit has the power to
01:04 - keep power to the power zero and at the
01:06 - most significant bit has two to the
01:08 - power one so it is two to the power one
01:11 - into 1 plus 2 to the power 0 into 1
01:14 - and it is equals to 3 okay
01:17 - so
01:18 - let's say i have a binary number
01:21 - i will declare a binary number
01:25 - num
01:26 - and
01:28 - i'll declare its data type as long
01:30 - because it could be as long as one one
01:33 - zero one one zero one one one
01:36 - okay
01:36 - now i'll decrease a decimal number so
01:40 - i'll declare a value decimal
01:42 - and
01:43 - what i'll do is
01:45 - before this
01:47 - i'll
01:48 - instead of doing all the calculations
01:50 - here
01:52 - outside the main function i will make a
01:54 - function which to to convert
01:58 - a binary
02:00 - binary
02:04 - to
02:06 - decimal
02:10 - okay
02:11 - now
02:12 - this function has to
02:14 - take something as an input okay so let's
02:16 - say it's it takes input
02:19 - num and its data type is long
02:22 - okay now after that we have to declare
02:24 - its output output is end
02:26 - okay
02:28 - output type now we start the code block
02:31 - okay now uh
02:33 - inside the code block
02:34 - we have to
02:36 - what convert the binary to the decimal
02:39 - okay
02:40 - now uh
02:42 - so we have to use loop
02:45 - okay and
02:47 - um
02:48 - like we have to
02:55 - okay so uh the decimal
02:57 - uh base 10 and number system has
03:00 - possible value zero to nine for each
03:02 - place value okay in contrast the binary
03:05 - base two number system has uh two
03:08 - possible values zero and one okay
03:10 - so uh
03:13 - how to con so for converting this
03:17 - now converting decimal to binary is like
03:19 - i have
03:20 - okay i have to show
03:22 - like this okay i have 1 1 0 1 1 0 1 1 ok
03:31 - so the least significant bit here is uh
03:34 - this
03:35 - uh
03:35 - the most significant bit here is the
03:37 - first one and this is the least
03:39 - significant pair uh significant bit so
03:41 - the least significant bit holds 2 to the
03:43 - power 0 to the power 0 is one okay and
03:46 - then the next bit holds the value two
03:49 - okay and again the next bit holds the
03:51 - value of four
03:53 - okay and so on it holds the value eight
03:58 - now it holds the value
04:00 - 16
04:03 - okay
04:08 - and
04:10 - this bit holds the value 32 this bit
04:12 - holds the value uh 64. so for
04:16 - calculating so for converting this into
04:19 - the decimal i have to multiply these two
04:22 - so i have to multiply 1 into 1
04:24 - and then multiply 2 into 1 and then
04:26 - multiply 4 into 1 and then multiply 8
04:28 - into 0 and then multiply 16 into 1 and
04:31 - then add the whole thing okay
04:33 - so i i guess this is pretty clear how to
04:36 - convert a
04:38 - decimal number to binary okay
04:41 - so now we will move forward to how to
04:43 - write the code okay
04:45 - so uh
04:47 - firstly i'll declare declare the
04:49 - variable
04:51 - uh
04:52 - num
04:53 - which is equals to the num input that we
04:54 - have
04:55 - introduced okay
04:57 - now i have i i'll declare a decimal
04:59 - number which will be our output
05:02 - decimal
05:03 - number
05:05 - and for starting we will declare it as 0
05:08 - because we have to add all the numbers
05:11 - okay i have
05:12 - introduced early that when we have to
05:14 - add all those number we will initialize
05:16 - it as 0 and we have when we have to
05:18 - multiply all
05:19 - all some numbers we will initialize it
05:21 - as 1 okay
05:23 - now uh i'll
05:26 - introduce an iterator
05:27 - and
05:28 - that would be zero for starting
05:31 - now i'll introduce a variable remainder
05:41 - remainder
05:44 - and
05:47 - it data type as its data type as log
05:53 - okay
06:06 - just a second
06:12 - so continuing with the
06:14 - the problem
06:16 - for converting binary okay so it is
06:18 - clear that how to how we can convert um
06:23 - binary to decimal okay
06:25 - so uh after
06:27 - declaring the remainder uh i i will run
06:30 - a loop okay
06:32 - so running
06:34 - okay
06:37 - a while loop so while
06:39 - uh now
06:40 - the number the number is binary okay
06:44 - so
06:48 - okay so number is long okay so i'll
06:50 - convert the
06:51 - uh long to end
06:54 - and then i'll
06:57 - num to end
06:59 - and then when it is not equal to zero
07:02 - till then i have to run this loop
07:05 - now inside this loop uh so i have i'll
07:08 - divide the the uh
07:10 - the binary number by 10 okay so what
07:13 - will happen is
07:14 - no yeah and the remainder uh that will
07:18 - be uh
07:21 - so when i divide this number by 10 the
07:23 - remainder is the last digit okay
07:25 - so
07:26 - i'll
07:28 - collect the last digit by dividing this
07:31 - number okay so
07:33 - uh the remainder
07:41 - is equals to
07:42 - uh the
07:45 - remainder when the number is divided to
07:47 - 10 okay
07:49 - so now we have the last digit
07:51 - and
07:52 - for continuation
07:54 - i'll
07:55 - divide the num and
07:57 - provide it
07:58 - to the
08:00 - okay so as we did in the previous video
08:02 - we will do and the decimal number
08:05 - decimal number would now be equal to
08:08 - uh the old decimal number
08:10 - so i'll equal i'll
08:13 - give it plus equals to
08:14 - and it will be equal to old decimal
08:16 - number plus remainder
08:19 - uh remainder
08:21 - into
08:24 - into uh
08:26 - math dot pow
08:30 - i'll have to
08:31 - do the power
08:33 - and
08:34 - power of 2 2 is the base
08:36 - 2.0
08:38 - and the iterator
08:41 - what is happening okay and the iterator
08:44 - that is i
08:47 - and i'll convert it to double
08:54 - [Music]
08:58 - two double and
09:00 - then uh i have to convert this whole to
09:03 - end because uh the decimal number is an
09:05 - integer so to end
09:09 - now i have to increase the iterator
09:14 - and then at the end of this
09:16 - loop i have to return the
09:20 - decimal number
09:23 - okay so
09:25 - what we did in this
09:28 - part of code is
09:29 - uh
09:30 - while the
09:32 - the decim the binary number
09:35 - is not equal to 0 because we have we are
09:37 - dividing the
09:38 - binary number by 10 in every iteration
09:40 - okay so while this is not equal to 0
09:43 - the number
09:45 - the remainder is calculated and the
09:47 - remainder into 2 to the power
09:50 - 0 to the power 1 to the power 2
09:53 - is then calculated and then multiplied
09:56 - to the remainder
09:57 - and then added to the decimal number
09:59 - okay
10:01 - so as i have explained this how to con
10:03 - the conversion of this
10:04 - and then i have to call this function
10:06 - okay so
10:08 - calling this function i i'll introduce a
10:11 - value
10:12 - decimal
10:14 - decimal uh that would be equals to
10:17 - convert
10:21 - convert
10:26 - binary
10:29 - to
10:31 - the
10:34 - decimal
10:36 - and then the input would be num
10:44 - okay what happened here is
10:57 - okay
10:59 - no it is it would be correct yeah
11:02 - okay
11:04 - and then i i'll print
11:08 - print
11:10 - that
11:13 - number
11:14 - in
11:17 - binary
11:19 - is equals to
11:22 - decimal
11:26 - in this
11:32 - okay so when i go ahead and run this
11:33 - program
11:36 - oh i can see the output
11:41 - okay the grid is building
11:59 - so i can see here the output is
12:01 - one one zero one one zero one one in
12:03 - binary is 439 in uh decimal okay so you
12:07 - can also check that this is correct now
12:10 - instead of doing this whole thing there
12:13 - is uh there is a
12:15 - integer to binary string method to
12:17 - convert a decimal number into binary
12:19 - okay
12:20 - so what we can do is inside the main
12:23 - function uh
12:26 - for converting decimal to binary okay so
12:29 - binary decimal uh this is only the way
12:31 - okay
12:32 - so if if i have to convert
12:36 - decimal to binary
12:38 - i'll create a main function
12:41 - and then inside the main function there
12:44 - would be a
12:45 - number
12:46 - let's say 19
12:48 - and then
12:49 - i will
12:50 - convert
12:52 - decimal
12:55 - to
12:56 - binary
12:58 - now uh
12:59 - value
13:01 - binary
13:03 - is equals to
13:05 - integer
13:08 - dot
13:09 - to
13:10 - binary string
13:11 - and then i'll place here num
13:15 - okay now if i print
13:20 - that
13:23 - num in
13:25 - decimal
13:29 - is equals to
13:31 - binary
13:33 - in binary
13:35 - okay so when i run this program
13:46 - i can see that 19 decimal is 1 0 0 1 1
13:50 - in binary
13:51 - okay so that is all for this video
13:53 - stay tuned

Cleaned transcript:

in this video we will write a kotlin program to convert binary number to decimal and vice versa okay convert binary to decimal and device okay so uh if you don't know uh binary is the uh the language that we talked to computers about and decimal is the like is the number system we generally use okay so uh the binaries are the are is the number system of zeros and ones okay so in this program you will learn to convert binary number to a decimal number so firstly uh we will write a program to convert binary to decimal now uh let me create a main function now what we have to do when we have to convert a binary number to decimal number so binary number let's say there is one one so uh the one at the uh least significant bit has the power to keep power to the power zero and at the most significant bit has two to the power one so it is two to the power one into 1 plus 2 to the power 0 into 1 and it is equals to 3 okay so let's say i have a binary number i will declare a binary number num and i'll declare its data type as long because it could be as long as one one zero one one zero one one one okay now i'll decrease a decimal number so i'll declare a value decimal and what i'll do is before this i'll instead of doing all the calculations here outside the main function i will make a function which to to convert a binary binary to decimal okay now this function has to take something as an input okay so let's say it's it takes input num and its data type is long okay now after that we have to declare its output output is end okay output type now we start the code block okay now uh inside the code block we have to what convert the binary to the decimal okay now uh so we have to use loop okay and um like we have to okay so uh the decimal uh base 10 and number system has possible value zero to nine for each place value okay in contrast the binary base two number system has uh two possible values zero and one okay so uh how to con so for converting this now converting decimal to binary is like i have okay i have to show like this okay i have 1 1 0 1 1 0 1 1 ok so the least significant bit here is uh this uh the most significant bit here is the first one and this is the least significant pair uh significant bit so the least significant bit holds 2 to the power 0 to the power 0 is one okay and then the next bit holds the value two okay and again the next bit holds the value of four okay and so on it holds the value eight now it holds the value 16 okay and this bit holds the value 32 this bit holds the value uh 64. so for calculating so for converting this into the decimal i have to multiply these two so i have to multiply 1 into 1 and then multiply 2 into 1 and then multiply 4 into 1 and then multiply 8 into 0 and then multiply 16 into 1 and then add the whole thing okay so i i guess this is pretty clear how to convert a decimal number to binary okay so now we will move forward to how to write the code okay so uh firstly i'll declare declare the variable uh num which is equals to the num input that we have introduced okay now i have i i'll declare a decimal number which will be our output decimal number and for starting we will declare it as 0 because we have to add all the numbers okay i have introduced early that when we have to add all those number we will initialize it as 0 and we have when we have to multiply all all some numbers we will initialize it as 1 okay now uh i'll introduce an iterator and that would be zero for starting now i'll introduce a variable remainder remainder and it data type as its data type as log okay just a second so continuing with the the problem for converting binary okay so it is clear that how to how we can convert um binary to decimal okay so uh after declaring the remainder uh i i will run a loop okay so running okay a while loop so while uh now the number the number is binary okay so okay so number is long okay so i'll convert the uh long to end and then i'll num to end and then when it is not equal to zero till then i have to run this loop now inside this loop uh so i have i'll divide the the uh the binary number by 10 okay so what will happen is no yeah and the remainder uh that will be uh so when i divide this number by 10 the remainder is the last digit okay so i'll collect the last digit by dividing this number okay so uh the remainder is equals to uh the remainder when the number is divided to 10 okay so now we have the last digit and for continuation i'll divide the num and provide it to the okay so as we did in the previous video we will do and the decimal number decimal number would now be equal to uh the old decimal number so i'll equal i'll give it plus equals to and it will be equal to old decimal number plus remainder uh remainder into into uh math dot pow i'll have to do the power and power of 2 2 is the base 2.0 and the iterator what is happening okay and the iterator that is i and i'll convert it to double two double and then uh i have to convert this whole to end because uh the decimal number is an integer so to end now i have to increase the iterator and then at the end of this loop i have to return the decimal number okay so what we did in this part of code is uh while the the decim the binary number is not equal to 0 because we have we are dividing the binary number by 10 in every iteration okay so while this is not equal to 0 the number the remainder is calculated and the remainder into 2 to the power 0 to the power 1 to the power 2 is then calculated and then multiplied to the remainder and then added to the decimal number okay so as i have explained this how to con the conversion of this and then i have to call this function okay so calling this function i i'll introduce a value decimal decimal uh that would be equals to convert convert binary to the decimal and then the input would be num okay what happened here is okay no it is it would be correct yeah okay and then i i'll print print that number in binary is equals to decimal in this okay so when i go ahead and run this program oh i can see the output okay the grid is building so i can see here the output is one one zero one one zero one one in binary is 439 in uh decimal okay so you can also check that this is correct now instead of doing this whole thing there is uh there is a integer to binary string method to convert a decimal number into binary okay so what we can do is inside the main function uh for converting decimal to binary okay so binary decimal uh this is only the way okay so if if i have to convert decimal to binary i'll create a main function and then inside the main function there would be a number let's say 19 and then i will convert decimal to binary now uh value binary is equals to integer dot to binary string and then i'll place here num okay now if i print that num in decimal is equals to binary in binary okay so when i run this program i can see that 19 decimal is 1 0 0 1 1 in binary okay so that is all for this video stay tuned
