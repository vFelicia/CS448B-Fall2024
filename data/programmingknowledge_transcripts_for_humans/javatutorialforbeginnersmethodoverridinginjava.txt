With timestamps:

00:00 - hi and welcome back to the new video of
00:02 - the jar tutorial Series so today we will
00:04 - be covering method overriding in Java so
00:07 - what is Method overriding if subclass
00:09 - that means a child class has the same
00:11 - name the same method name as declared in
00:14 - the parent class and it is known as a
00:16 - method overriding in Java in other words
00:18 - if a subclass provides the specific
00:20 - implementation of the method that has
00:22 - been declared by one of its parent class
00:24 - then it is known as method overriding we
00:27 - will see what it is by
00:30 - getting one real life example and next
00:34 - we will see usage of the method
00:35 - overriding so method overriding is used
00:37 - to provide the specific implementation
00:39 - of a method which is already provided by
00:42 - its superclass for example one method is
00:44 - there which will declared in the parent
00:46 - class and in some implementation part is
00:49 - also declared in the parent class and
00:50 - you just need to you have to get that
00:53 - method inside our subclass so you simply
00:56 - write extends that parent class and
00:58 - keyword to inherit the properties of the
01:01 - parent class and you can use that same
01:03 - method name inside the subclass and get
01:06 - that implementation in our subclass so
01:09 - method overriding is used for the
01:11 - runtime polymorphism and next up we will
01:15 - see rules
01:16 - for Java method overriding the method
01:19 - overriding must have the same name as in
01:22 - the parent class so the the name of the
01:24 - method should be same in both the
01:26 - classes one is parent class and the
01:28 - subclass
01:30 - the method must have the same parameters
01:32 - as in the parent class so the number of
01:35 - the parameters that the method is
01:37 - accepting in the parent class should be
01:38 - same as that of the number of the
01:40 - parameters it was accepting in the
01:42 - subclass and there must be a is a is a
01:45 - relationship which represents the
01:47 - inheritance in Java
01:49 - okay and let's understand the problem
01:52 - without method over a method overriding
01:54 - and we will see how how it fixes by
01:57 - using the method overriding so let me
01:59 - open my IDE
02:07 - okay it's opening weight
02:11 - we'll see one example uh how method
02:14 - overriding fixes one problem
02:17 - okay we'll see first problem uh
02:20 - okay so let me
02:23 - create my new Java class
02:27 - method
02:30 - over
02:33 - riding
02:36 - okay let me increase the font size
02:43 - okay uh now suppose let me declare one
02:48 - more class
02:49 - so that I can Define differentiate
02:52 - between the parent class and subclass I
02:54 - will create one class
02:55 - a vehicle
03:02 - okay and inside that I will declare one
03:05 - method which isn't written anything
03:07 - that's why right why it has a return
03:09 - type and inside that
03:13 - I will simply print
03:18 - vehicle is running
03:24 - and now this public class method
03:28 - overriding is extending that
03:31 - vehicle class
03:33 - so I will write extend
03:37 - vehicle
03:40 - and now
03:42 - insert this I will write my main method
03:45 - and inside that I will create the object
03:49 - of the disk method overriding class in
03:52 - method overriding obj1
03:58 - new method overriding
04:00 - and using this object obj1 obj1 I am
04:05 - calling the run method
04:08 - and now if I
04:10 - run this class
04:14 - the expected output should be vehicle is
04:17 - running
04:19 - yes vehicle is running and now now you
04:21 - see the problem is that I have to
04:23 - provide a specific implementation of the
04:24 - run method in the subclass that is that
04:27 - is why we use the method overriding okay
04:28 - so here also
04:31 - now you'll see uh how it eliminates this
04:34 - problem
04:35 - okay let me comment this out
04:43 - one more class I required
04:47 - with the same name
04:51 - again inside this I will write the same
04:54 - method first void run
05:01 - and inside this I will simply print
05:05 - because
05:09 - running
05:11 - okay and now uh one more class public
05:15 - class I will just copy this code
05:21 - foreign
05:28 - extending the vehicle class and now
05:32 - inside this
05:34 - I will write the same method that I have
05:37 - written only avoid run
05:44 - and inside this
05:47 - and simply print
05:51 - my kids
05:53 - running okay
05:56 - now I will declare my main method
06:00 - and inside this I will create the object
06:04 - of the method overriding class that is
06:05 - obj1 is equals to new
06:09 - method overriding
06:11 - and using this object obj1
06:14 - and call obj1 Dot run
06:18 - now you'll see uh how method overriding
06:21 - eliminates this problem okay
06:24 - and here you can see bike is running
06:26 - okay now uh this run method is also
06:28 - declared inside this uh vehicle method
06:31 - uh vehicle class sorry and which is
06:33 - printing vehicle is running and same
06:35 - method by the same name we have written
06:37 - inside this public class method
06:39 - overriding which is extending the
06:40 - vehicle class so vehicle class is the
06:42 - parent class and this method overriding
06:44 - is a child class and inside this run
06:47 - method I have written a bike is running
06:49 - and when when we call this obj1 dot run
06:52 - it will call the subclass method which
06:55 - is this and we'll see how to call if
06:59 - there is the same two methods are there
07:01 - where the same name and you are trying
07:03 - to achieve the method overriding and if
07:05 - you want to call the method which is
07:07 - declared inside the parent class then we
07:09 - will we will use some one specific
07:12 - keyword is there super keyword we will
07:13 - see what is it what it is in our
07:16 - upcoming videos uh super keyword is used
07:18 - to call the method which is declared
07:21 - inside the parent class
07:22 - now you now we will see when real life
07:27 - example of method overriding so that you
07:30 - can understand it clearly
07:32 - okay and let me just comment this out
07:39 - wait
07:42 - okay
07:45 - Let Me Clear My terminal okay now we are
07:48 - here uh
07:50 - now you see I will create one
07:55 - class name as bank and we as we know we
07:59 - have every bank has their interest rate
08:02 - okay so I will write one
08:06 - variable get
08:11 - weight of
08:15 - interest okay
08:18 - get rate of interest
08:20 - so this is the My Method name and this
08:23 - method is simply returning
08:25 - zero
08:27 - okay
08:30 - okay I have declared one method get rate
08:32 - of interest and it doesn't accepting any
08:34 - parameters and the return type of the
08:37 - method is zero okay it returns nothing
08:40 - it returns zero and I will now I create
08:44 - a one more class
08:46 - let's suppose any Bank SBI
08:50 - which is extending
08:53 - the bank class
08:57 - and now inside this I will write int
09:03 - get
09:06 - weight of
09:09 - the interest and I will pass
09:13 - and I will return
09:16 - eight
09:18 - uh similarly I will create one more one
09:21 - more Bank class okay
09:23 - any Bank you want let's suppose ICICI
09:28 - which is extending the bank class
09:33 - inside this I will write
09:36 - again the I will generate the override
09:39 - the same
09:40 - method which is declared inside the bank
09:42 - class
09:43 - get rid of
09:47 - interest
09:49 - now I will return inside this
09:53 - return let's suppose seven
09:57 - okay and now we will declare our public
10:01 - class I will just copy the
10:04 - this Lane
10:06 - and I'll paste it over here
10:11 - and yes
10:16 - okay and now in this class is extending
10:21 - okay nothing okay now if I get inside my
10:27 - public class I will declare my main
10:29 - method and inside my main method I will
10:31 - create the object of the SBI class SBI
10:36 - obj1
10:39 - is equal to new SBI
10:42 - and I will create
10:46 - object of the ICICI Bank also obj2 is
10:50 - equals to new
10:52 - Cici okay I have created
10:55 - all the object and now I will simply
10:57 - print
11:00 - I will print
11:02 - SBI
11:07 - interest is
11:09 - and I will concatenate it with
11:13 - obj1 dot get rid of interest and I will
11:18 - simply copy this because same code will
11:21 - require for ICICI Bank also I will paste
11:24 - it over here and change the bank name
11:28 - okay and object name also because object
11:31 - for ICICI Bank is object 2 and now if I
11:35 - run this
11:40 - and here you can see SB interest is 8
11:42 - and ICICI Bank interest is zero why so
11:47 - all right sorry I'm I've written
11:50 - interest spelling wrong
11:53 - interest
11:59 - okay now it's okay if I don't run run
12:01 - this class again
12:03 - should print SBA interest is 8 and ICS
12:06 - interest is seven okay now it's correct
12:07 - now here you can see uh one base
12:11 - implementation of the rate of interest
12:12 - for every bank is there we will just
12:15 - inheriting uh extend overriding this
12:18 - methods each each and every time for the
12:20 - different banks you can create n number
12:23 - of the bank Banks over here and you will
12:25 - simply overwrite this method get get rid
12:28 - of interest and return the particular
12:31 - rate of interest for that bank okay and
12:34 - now we will see some popular questions
12:37 - which are asked for method overriding
12:41 - that is can we override a static method
12:44 - the simple answer is no a static method
12:46 - cannot be overwritten it can be proved
12:48 - by runtime polymorphism so we can learn
12:51 - it later on our upcoming videos and why
12:55 - why can we not override the static
12:57 - method uh it is because the static
12:59 - method is bound with the class whereas
13:01 - the instant method is bound with an
13:03 - object okay
13:05 - what I what it means is this style which
13:09 - method a static method is always bind
13:13 - with the class not with the object now
13:15 - whenever whenever you run this run this
13:17 - class the static the method which are
13:19 - declared as a static binds with that
13:21 - class itself not with the object here
13:23 - obj1 obj2 okay
13:26 - and static static belongs to the class
13:29 - area and instance belongs to the hip
13:30 - area we'll see what is uh he parents
13:33 - stack area in upcoming videos and can we
13:35 - override the Java main method no because
13:37 - the main method is the static method and
13:40 - we cannot override them which are
13:42 - methods which are declared as a static
13:44 - okay I hope you got the concept of the
13:46 - method over like overriding in Java and
13:49 - thank you for watching this video

Cleaned transcript:

hi and welcome back to the new video of the jar tutorial Series so today we will be covering method overriding in Java so what is Method overriding if subclass that means a child class has the same name the same method name as declared in the parent class and it is known as a method overriding in Java in other words if a subclass provides the specific implementation of the method that has been declared by one of its parent class then it is known as method overriding we will see what it is by getting one real life example and next we will see usage of the method overriding so method overriding is used to provide the specific implementation of a method which is already provided by its superclass for example one method is there which will declared in the parent class and in some implementation part is also declared in the parent class and you just need to you have to get that method inside our subclass so you simply write extends that parent class and keyword to inherit the properties of the parent class and you can use that same method name inside the subclass and get that implementation in our subclass so method overriding is used for the runtime polymorphism and next up we will see rules for Java method overriding the method overriding must have the same name as in the parent class so the the name of the method should be same in both the classes one is parent class and the subclass the method must have the same parameters as in the parent class so the number of the parameters that the method is accepting in the parent class should be same as that of the number of the parameters it was accepting in the subclass and there must be a is a is a relationship which represents the inheritance in Java okay and let's understand the problem without method over a method overriding and we will see how how it fixes by using the method overriding so let me open my IDE okay it's opening weight we'll see one example uh how method overriding fixes one problem okay we'll see first problem uh okay so let me create my new Java class method over riding okay let me increase the font size okay uh now suppose let me declare one more class so that I can Define differentiate between the parent class and subclass I will create one class a vehicle okay and inside that I will declare one method which isn't written anything that's why right why it has a return type and inside that I will simply print vehicle is running and now this public class method overriding is extending that vehicle class so I will write extend vehicle and now insert this I will write my main method and inside that I will create the object of the disk method overriding class in method overriding obj1 new method overriding and using this object obj1 obj1 I am calling the run method and now if I run this class the expected output should be vehicle is running yes vehicle is running and now now you see the problem is that I have to provide a specific implementation of the run method in the subclass that is that is why we use the method overriding okay so here also now you'll see uh how it eliminates this problem okay let me comment this out one more class I required with the same name again inside this I will write the same method first void run and inside this I will simply print because running okay and now uh one more class public class I will just copy this code foreign extending the vehicle class and now inside this I will write the same method that I have written only avoid run and inside this and simply print my kids running okay now I will declare my main method and inside this I will create the object of the method overriding class that is obj1 is equals to new method overriding and using this object obj1 and call obj1 Dot run now you'll see uh how method overriding eliminates this problem okay and here you can see bike is running okay now uh this run method is also declared inside this uh vehicle method uh vehicle class sorry and which is printing vehicle is running and same method by the same name we have written inside this public class method overriding which is extending the vehicle class so vehicle class is the parent class and this method overriding is a child class and inside this run method I have written a bike is running and when when we call this obj1 dot run it will call the subclass method which is this and we'll see how to call if there is the same two methods are there where the same name and you are trying to achieve the method overriding and if you want to call the method which is declared inside the parent class then we will we will use some one specific keyword is there super keyword we will see what is it what it is in our upcoming videos uh super keyword is used to call the method which is declared inside the parent class now you now we will see when real life example of method overriding so that you can understand it clearly okay and let me just comment this out wait okay Let Me Clear My terminal okay now we are here uh now you see I will create one class name as bank and we as we know we have every bank has their interest rate okay so I will write one variable get weight of interest okay get rate of interest so this is the My Method name and this method is simply returning zero okay okay I have declared one method get rate of interest and it doesn't accepting any parameters and the return type of the method is zero okay it returns nothing it returns zero and I will now I create a one more class let's suppose any Bank SBI which is extending the bank class and now inside this I will write int get weight of the interest and I will pass and I will return eight uh similarly I will create one more one more Bank class okay any Bank you want let's suppose ICICI which is extending the bank class inside this I will write again the I will generate the override the same method which is declared inside the bank class get rid of interest now I will return inside this return let's suppose seven okay and now we will declare our public class I will just copy the this Lane and I'll paste it over here and yes okay and now in this class is extending okay nothing okay now if I get inside my public class I will declare my main method and inside my main method I will create the object of the SBI class SBI obj1 is equal to new SBI and I will create object of the ICICI Bank also obj2 is equals to new Cici okay I have created all the object and now I will simply print I will print SBI interest is and I will concatenate it with obj1 dot get rid of interest and I will simply copy this because same code will require for ICICI Bank also I will paste it over here and change the bank name okay and object name also because object for ICICI Bank is object 2 and now if I run this and here you can see SB interest is 8 and ICICI Bank interest is zero why so all right sorry I'm I've written interest spelling wrong interest okay now it's okay if I don't run run this class again should print SBA interest is 8 and ICS interest is seven okay now it's correct now here you can see uh one base implementation of the rate of interest for every bank is there we will just inheriting uh extend overriding this methods each each and every time for the different banks you can create n number of the bank Banks over here and you will simply overwrite this method get get rid of interest and return the particular rate of interest for that bank okay and now we will see some popular questions which are asked for method overriding that is can we override a static method the simple answer is no a static method cannot be overwritten it can be proved by runtime polymorphism so we can learn it later on our upcoming videos and why why can we not override the static method uh it is because the static method is bound with the class whereas the instant method is bound with an object okay what I what it means is this style which method a static method is always bind with the class not with the object now whenever whenever you run this run this class the static the method which are declared as a static binds with that class itself not with the object here obj1 obj2 okay and static static belongs to the class area and instance belongs to the hip area we'll see what is uh he parents stack area in upcoming videos and can we override the Java main method no because the main method is the static method and we cannot override them which are methods which are declared as a static okay I hope you got the concept of the method over like overriding in Java and thank you for watching this video
