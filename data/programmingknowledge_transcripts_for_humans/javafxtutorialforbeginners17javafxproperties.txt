With timestamps:

00:00 - hello guys welcome to the next video on
00:02 - JavaFX tutorial for beginners in this
00:04 - video we will learn about Java effects
00:07 - properties so first of all let's see
00:10 - what our Java effects properties Java FX
00:14 - properties store the inner state of a
00:18 - control and allows us to listen to the
00:21 - state change from Java effects UI
00:24 - controls that means you will be able to
00:27 - perform an action when the value is
00:30 - changed in the property right now there
00:34 - are two kind of properties in Java
00:37 - effects one is read write property and
00:41 - other is read-only properties right now
00:46 - to add a property in Java effects you
00:49 - need to import this library which is
00:52 - Java FX dot beans dot property dot
00:56 - whatever property you want okay
00:59 - now the example of readwrite properties
01:03 - are these so you just need to add for
01:07 - example Java FX dot bean dot property
01:09 - dot simple string property this is for
01:13 - declaring a string property in the same
01:15 - way you can declare an integer property
01:18 - or a boolean property or double property
01:21 - like this so you just need to add simple
01:24 - and then what kind of property for
01:27 - example double and then the property
01:31 - okay so simple double property simple
01:34 - integer property or simple boolean
01:36 - property okay in the case of read-only
01:39 - property you declare it something like
01:41 - this so you just write Java FX dot bean
01:45 - store property dot read-only boolean
01:48 - wrapper for example or read-only integer
01:51 - wrapper or read-only double wrapper or
01:54 - read-only string wrapper okay now these
02:00 - are the examples of the readwrite
02:04 - property and read-only property so how
02:07 - you can define a readwrite property in
02:10 - Java FX so for example you want to
02:13 - define
02:13 - a string property you can use this
02:17 - keyword called string property value is
02:20 - equal to new simple string property and
02:22 - in the constructor you can give some
02:25 - initial value to this string property it
02:29 - will work same as string but it has more
02:33 - functionality than string okay
02:36 - now because it's a read/write property
02:40 - you can call the set method on your
02:44 - simple string property and change the
02:47 - value of it okay so the initial value we
02:50 - have assigned here is JavaFX and using
02:53 - set method on the value object you can
02:56 - change the value 2 for example JavaFX
02:58 - tutorial ok and to access the value you
03:03 - call a get method on your object right
03:07 - so for example you want to print the
03:10 - value of this value object then you can
03:15 - use a system out print line and you can
03:19 - call get method on this value property
03:22 - and what will be the output the output
03:25 - will be the Java Effects tutorial
03:29 - because initially the value we have
03:32 - assigned was Java FX but we have change
03:35 - this value using the set method so the
03:39 - new value which will be printed is this
03:43 - value ok not this value now in the case
03:46 - of read-only you can define a read-only
03:49 - property in two steps first is defining
03:53 - an object of read-only whatever wrapper
03:57 - for example read-only string wrapper and
04:00 - then the object name is equal to
04:02 - read-only string wrapper and same as
04:06 - readwrite property you can assign some
04:08 - value using the constructor for example
04:12 - JavaFX and then you can make a read-only
04:16 - string property out of this using a
04:20 - method called get read-only property ok
04:23 - so you can define read-only string
04:25 - property and your
04:27 - object name for example read-only value
04:29 - is equal to value dot get read-only
04:33 - property now let's take an example to
04:37 - understand fully how these properties
04:40 - work so i have created a java FX project
04:45 - here in which i have this main
04:48 - controller or java class main dot java
04:52 - class in which i am just opening us
04:55 - primary stage and i think you know this
04:59 - code by now if you are following my
05:01 - video right and i have this blank F XML
05:05 - file
05:06 - okay now I'm going to create a new class
05:09 - here in the application package and I'm
05:12 - going to name it as for example my
05:16 - number okay and to add a property what I
05:22 - have told you you need to import this
05:25 - Java dot beans dot property dot Asterix
05:30 - right and now we are going to declare
05:33 - for example in normal condition you will
05:36 - declare a private variable and for
05:38 - example you want to declare a double
05:41 - data type variable and I will say this
05:45 - is our number variable okay and then to
05:48 - get and set the number value you can
05:51 - make two method which are getter and
05:54 - setter for this number so for example I
05:57 - will right click on this code and I will
06:00 - go to the source and I can just call
06:03 - generate getters and setters okay and I
06:08 - will click OK and it's going to give me
06:10 - this getters and setters but in the case
06:13 - of property you declare this property
06:16 - with the knee double property here okay
06:19 - and in the Gator what you will do is
06:22 - first of all we will check if our number
06:26 - property for example so this is our
06:29 - number property if it's null or not so
06:33 - for example it's not equal to null then
06:37 - what I told you you can call a get
06:40 - method
06:41 - on it so just call get numbered get
06:44 - otherwise you can return a zero value
06:47 - okay so just return zero this is the
06:52 - default value we are returning in the
06:55 - case of setter
06:56 - you cannot set it directly right you
06:59 - need to have this simple double property
07:03 - and then using this you need to then set
07:08 - the property using the set method so
07:11 - first of all we will create this
07:13 - property using a method and I'm going to
07:16 - create this method called public final
07:19 - double property which returns double
07:22 - property and then I will name my
07:25 - property as number property and first of
07:29 - all I will check if it's null and if
07:32 - it's null then I'm going to initialize
07:34 - it okay so in a way first of all we need
07:39 - to initialize this property using new
07:42 - simple double property and the default
07:45 - value I am giving here is zero or if
07:48 - it's already initialized then I will
07:51 - just return this double property which
07:54 - is number in our case right now every
07:58 - method you are define here should be
08:01 - final here okay now to set the number
08:06 - what you can do is instead of using this
08:09 - dot number you can use this function
08:11 - which we have created which returns the
08:14 - double property and then call a set
08:17 - method on it so using set and then set
08:22 - this number here which we are passing
08:24 - from the argument okay so this is how
08:28 - you can define a property in Java
08:30 - effects you have a class and then you
08:33 - have a property variable and then you
08:37 - declare setter and getter for this
08:40 - property and this whole class is called
08:44 - a Java Bean it's a concept in Java for
08:50 - declaring the properties right now let's
08:53 - go to the control
08:54 - dot Java class which is our main dot
08:57 - controller dot Java class and right now
08:59 - it's plank so let's implement initialize
09:02 - able interface first so just call
09:06 - initialize able and implement the
09:08 - unimplemented method here so just use
09:11 - add unimplemented method and it's going
09:13 - to create this method called initialize
09:15 - okay and now we are going to create our
09:19 - instance of this my number class which
09:24 - we have created so just write my number
09:27 - for example my num is equal to new my
09:32 - number okay and first of all let's set
09:35 - the default value inside this initialize
09:38 - method to it so my number dot for
09:42 - example set number and default value
09:45 - let's give it zero and now let's declare
09:48 - a label here so this we are going to use
09:52 - to set the value okay so just declare
09:56 - this at the rate effects ml private
09:59 - label and then label status and don't
10:03 - forget that this should be final here so
10:06 - just add this keyword final before
10:09 - initialization of your object now just
10:12 - take your my number object from here and
10:15 - go to your initialize method and then we
10:18 - are going to call this number property
10:21 - method which we have declared inside
10:23 - this my number dot Java class right so
10:27 - we have declared this number property
10:29 - method right so we are calling this
10:32 - method here and then we will add a
10:35 - listener
10:36 - to it so just use add listener method
10:40 - and inside the argument you need to add
10:44 - new change listener
10:47 - okay so just add change listener and it
10:53 - takes object so just pass this object
10:57 - here and now just click this bulb which
11:01 - shows the error and it will tell you to
11:04 - implement the unimplemented method so
11:06 - just click this
11:08 - a implemented method button and it's
11:10 - going to implement this change method
11:14 - now inside this changed method what we
11:17 - are going to do is we are going to take
11:18 - this label and set on this label the
11:22 - value of the number okay
11:24 - so just take this label and then dot set
11:28 - text and because we want to set a text
11:32 - and we have a number so we need to
11:35 - convert this or cast it so just write
11:38 - new double and then you take your my
11:44 - number object and get the value of it so
11:47 - we have declared a getter for its get
11:50 - number so just call this method and then
11:53 - just call to string to convert it to the
11:57 - string so what we have done here we have
11:59 - added a listener to our property so
12:03 - whenever the number is changed using a
12:07 - set method then the label is also set
12:12 - with the new value
12:13 - okay now let's declare our method which
12:18 - we can call using a button click so just
12:22 - add a public method and the return type
12:26 - would be void and the name of this
12:29 - function will be for example BTN click
12:33 - OK and just add this argument which is
12:37 - action event and give the variable name
12:42 - event and inside this button click
12:46 - function what we are going to do is we
12:49 - are going to change the value of number
12:52 - using this my number object so take this
12:55 - my number object and then we will call
12:59 - the setter method which was set number
13:02 - which we have declared and once again
13:04 - for example take this object and we will
13:07 - call a getter to get the current value
13:10 - of the number and then we will just add
13:13 - 1 to it so in a way we are increasing
13:17 - the value one by one now observe here
13:21 - we are not directly setting the value to
13:25 - the label we are just changing the value
13:29 - of the number using the number class
13:32 - okay and when this set method is called
13:35 - and the property is changed it's going
13:38 - to call this listener on this property
13:41 - and it's going to set this number to
13:44 - this label using this add a listener
13:47 - method okay
13:49 - now let's add some design using F XML
13:53 - file so just right click you're on your
13:55 - main dot F XML and open with scene
13:58 - builder and I have already given this
14:01 - default size to the anchor pane so pref
14:04 - width is 300 and pref height is 300 and
14:07 - now I'm going to take some controls from
14:11 - here so take a button from here which we
14:14 - will use for the button click event and
14:18 - take a label from here okay and this we
14:23 - will connect it from the label which we
14:26 - have declared right now first thing
14:30 - which we are going to do is we are going
14:32 - to connect our controller class to this
14:35 - F XML file so just go here at the
14:39 - controller and then choose your
14:41 - application dot main controller class
14:43 - and then we will give the ID to this
14:47 - label should go to the code and the ID
14:50 - will be the ID which we have declared
14:53 - which is label status from here okay so
14:57 - just give the same ID here and select
14:59 - your button and go to on action method
15:04 - here and then choose the method which
15:07 - you have declared so just copy the name
15:10 - of this method button click and paste it
15:14 - here okay and now save your code and now
15:19 - refresh your projects right click and
15:21 - refresh the project and now save your
15:23 - code and run it and now our app is
15:28 - running and when I click this button see
15:32 - what happens here so I click the button
15:35 - once and the value becomes 1.0 we click
15:39 - the button again and again and the value
15:43 - increases by one every time when I click
15:45 - the button ok now this is happening due
15:49 - to the change of the property so if you
15:52 - can see here in the method button click
15:55 - we are not setting the value to the
15:59 - label right we are just setting the
16:01 - value to the property and this property
16:05 - triggers this ad listener method which
16:09 - sets the value to the label okay so this
16:13 - is how the properties work so whenever
16:16 - you change the property value you can
16:20 - trigger some event for example setting
16:23 - some value or doing some other tasks and
16:26 - by the way in the main method just
16:29 - called application slash main dot F XML
16:33 - file right so in this way you can use
16:35 - properties in Java effects I hope you
16:37 - have enjoyed this video please rate
16:39 - comment subscribe and bye for now

Cleaned transcript:

hello guys welcome to the next video on JavaFX tutorial for beginners in this video we will learn about Java effects properties so first of all let's see what our Java effects properties Java FX properties store the inner state of a control and allows us to listen to the state change from Java effects UI controls that means you will be able to perform an action when the value is changed in the property right now there are two kind of properties in Java effects one is read write property and other is readonly properties right now to add a property in Java effects you need to import this library which is Java FX dot beans dot property dot whatever property you want okay now the example of readwrite properties are these so you just need to add for example Java FX dot bean dot property dot simple string property this is for declaring a string property in the same way you can declare an integer property or a boolean property or double property like this so you just need to add simple and then what kind of property for example double and then the property okay so simple double property simple integer property or simple boolean property okay in the case of readonly property you declare it something like this so you just write Java FX dot bean store property dot readonly boolean wrapper for example or readonly integer wrapper or readonly double wrapper or readonly string wrapper okay now these are the examples of the readwrite property and readonly property so how you can define a readwrite property in Java FX so for example you want to define a string property you can use this keyword called string property value is equal to new simple string property and in the constructor you can give some initial value to this string property it will work same as string but it has more functionality than string okay now because it's a read/write property you can call the set method on your simple string property and change the value of it okay so the initial value we have assigned here is JavaFX and using set method on the value object you can change the value 2 for example JavaFX tutorial ok and to access the value you call a get method on your object right so for example you want to print the value of this value object then you can use a system out print line and you can call get method on this value property and what will be the output the output will be the Java Effects tutorial because initially the value we have assigned was Java FX but we have change this value using the set method so the new value which will be printed is this value ok not this value now in the case of readonly you can define a readonly property in two steps first is defining an object of readonly whatever wrapper for example readonly string wrapper and then the object name is equal to readonly string wrapper and same as readwrite property you can assign some value using the constructor for example JavaFX and then you can make a readonly string property out of this using a method called get readonly property ok so you can define readonly string property and your object name for example readonly value is equal to value dot get readonly property now let's take an example to understand fully how these properties work so i have created a java FX project here in which i have this main controller or java class main dot java class in which i am just opening us primary stage and i think you know this code by now if you are following my video right and i have this blank F XML file okay now I'm going to create a new class here in the application package and I'm going to name it as for example my number okay and to add a property what I have told you you need to import this Java dot beans dot property dot Asterix right and now we are going to declare for example in normal condition you will declare a private variable and for example you want to declare a double data type variable and I will say this is our number variable okay and then to get and set the number value you can make two method which are getter and setter for this number so for example I will right click on this code and I will go to the source and I can just call generate getters and setters okay and I will click OK and it's going to give me this getters and setters but in the case of property you declare this property with the knee double property here okay and in the Gator what you will do is first of all we will check if our number property for example so this is our number property if it's null or not so for example it's not equal to null then what I told you you can call a get method on it so just call get numbered get otherwise you can return a zero value okay so just return zero this is the default value we are returning in the case of setter you cannot set it directly right you need to have this simple double property and then using this you need to then set the property using the set method so first of all we will create this property using a method and I'm going to create this method called public final double property which returns double property and then I will name my property as number property and first of all I will check if it's null and if it's null then I'm going to initialize it okay so in a way first of all we need to initialize this property using new simple double property and the default value I am giving here is zero or if it's already initialized then I will just return this double property which is number in our case right now every method you are define here should be final here okay now to set the number what you can do is instead of using this dot number you can use this function which we have created which returns the double property and then call a set method on it so using set and then set this number here which we are passing from the argument okay so this is how you can define a property in Java effects you have a class and then you have a property variable and then you declare setter and getter for this property and this whole class is called a Java Bean it's a concept in Java for declaring the properties right now let's go to the control dot Java class which is our main dot controller dot Java class and right now it's plank so let's implement initialize able interface first so just call initialize able and implement the unimplemented method here so just use add unimplemented method and it's going to create this method called initialize okay and now we are going to create our instance of this my number class which we have created so just write my number for example my num is equal to new my number okay and first of all let's set the default value inside this initialize method to it so my number dot for example set number and default value let's give it zero and now let's declare a label here so this we are going to use to set the value okay so just declare this at the rate effects ml private label and then label status and don't forget that this should be final here so just add this keyword final before initialization of your object now just take your my number object from here and go to your initialize method and then we are going to call this number property method which we have declared inside this my number dot Java class right so we have declared this number property method right so we are calling this method here and then we will add a listener to it so just use add listener method and inside the argument you need to add new change listener okay so just add change listener and it takes object so just pass this object here and now just click this bulb which shows the error and it will tell you to implement the unimplemented method so just click this a implemented method button and it's going to implement this change method now inside this changed method what we are going to do is we are going to take this label and set on this label the value of the number okay so just take this label and then dot set text and because we want to set a text and we have a number so we need to convert this or cast it so just write new double and then you take your my number object and get the value of it so we have declared a getter for its get number so just call this method and then just call to string to convert it to the string so what we have done here we have added a listener to our property so whenever the number is changed using a set method then the label is also set with the new value okay now let's declare our method which we can call using a button click so just add a public method and the return type would be void and the name of this function will be for example BTN click OK and just add this argument which is action event and give the variable name event and inside this button click function what we are going to do is we are going to change the value of number using this my number object so take this my number object and then we will call the setter method which was set number which we have declared and once again for example take this object and we will call a getter to get the current value of the number and then we will just add 1 to it so in a way we are increasing the value one by one now observe here we are not directly setting the value to the label we are just changing the value of the number using the number class okay and when this set method is called and the property is changed it's going to call this listener on this property and it's going to set this number to this label using this add a listener method okay now let's add some design using F XML file so just right click you're on your main dot F XML and open with scene builder and I have already given this default size to the anchor pane so pref width is 300 and pref height is 300 and now I'm going to take some controls from here so take a button from here which we will use for the button click event and take a label from here okay and this we will connect it from the label which we have declared right now first thing which we are going to do is we are going to connect our controller class to this F XML file so just go here at the controller and then choose your application dot main controller class and then we will give the ID to this label should go to the code and the ID will be the ID which we have declared which is label status from here okay so just give the same ID here and select your button and go to on action method here and then choose the method which you have declared so just copy the name of this method button click and paste it here okay and now save your code and now refresh your projects right click and refresh the project and now save your code and run it and now our app is running and when I click this button see what happens here so I click the button once and the value becomes 1.0 we click the button again and again and the value increases by one every time when I click the button ok now this is happening due to the change of the property so if you can see here in the method button click we are not setting the value to the label right we are just setting the value to the property and this property triggers this ad listener method which sets the value to the label okay so this is how the properties work so whenever you change the property value you can trigger some event for example setting some value or doing some other tasks and by the way in the main method just called application slash main dot F XML file right so in this way you can use properties in Java effects I hope you have enjoyed this video please rate comment subscribe and bye for now
