welcome back students in this video lesson we will learn encapsulation and access specifiers we know two main things which are in the class our data members which contains informations and functions are methods that performs operations sometimes we may need to access our manipulate the data inside the class there may be unauthorized access and misuse also then to keep it safe from unauthorized access Java uses mechanism of binding both data members and functions called encapsulation encapsulation ensures that a user cannot access the data of an application without using its functions so the encapsulation is defined as the wrapping up of data under a single unit it is the mechanism that binds together code and the data it manipulates as per the requirement variables and functions of a class can be made to be hidden from other classes therefore this is also known as data hiding to remember encapsulation we can think of capsule where data variables and methods are happy as a class let us know how to achieve encapsulation to restrict the unauthorized access Java has three keywords can access specifiers first one is public next is protected and private while declaring data members any one of these keywords is specified with data members our method prototype let us learn the access level of these access specifiers if public is given as access specifier then it is accessible by any class it may be inside the package or even outside the package subclass our class of other package if protected is indicated it may have access inside the package and also outside the package that inherit the class if private is given then it can be accessed only within the class even in the same package other class also won't be able to access this and not even by inheritors when we don't give any access specifier then it becomes public within a package that means it cannot be accessed outside the package and this is defined as default if we need a example for encapsulation we can consider this an employee may have access to know a salary but he cannot change the salary no management only can have an authorisation to change the salary of that employee so where the method displays there it may have public access specifier so that any one of the employee can see the salary part but access to data members and function cannot be given as public it can be as private so that management only will have the authorization to change the salary of that employee I will demonstrate encapsulation using program which we have already done earlier I will give just few examples we learnt packages in our 23rd video so the basic operation was a package which I created then here is a class which I called a class from this packet that is outside of this package this class is available let us check this see here there are two classes inside this package one is called sum so here I have calculated sum of two variables and printed here you can see I am given public as the access specifier then if we see this difference so here also I am given public as the access specifier let us come out of this so here I have a class can import Bo pack where I have called the some dot mein and diff dot main which is inside that basic operation package as some and if both are having public as access specifier we can call that outside the package so we can run this and check so some is also given difference is also given here so here 45 plus 55 was the argument here 83 and 78 if you have the difference let us once again go to the package now here in the class called live I will call the sub so that is the suyong dot main was the method and then I am giving the parameter value for example I knew 6 & 7 I will compile this see there is no syntax error because the sum was having public 1 and then this is inside the package let us run this so for difference I am giving 100 and 150 so it will show differences 50 and the sum it will go and run from there so it will give the result so it has given the result sum is 13 so we can see if public is given as access specified it can be accessed from anywhere now I will change this access specifier this public into protector so let me compile this so you could see here error found in class so let us see what is the error so modify a protractor not allowed here so now let us do without this so that it becomes default here I have not specified any public or private our prototype so company this no syntax error so I have already in difference I have called it so it is here you can see there will it work or not it will work because it is in the same package so I give 200 over number so the difference is hundred sum is 13 now let us go outside the package and then I will run this node you can see here it shows a error because when we don't specify anything that becomes default it will be available only in the package not outside the package so let us close this now I will have a subclass here I will create class product X turns some so extent is a keyword which is used to inherit the property of the main class so I will write no public static wide P Ryu and then I you into X comma int Y now I will have yes is equal to accede to quite so I wanted to use the variable yes which is in the sum class so I will give as a class variable here static in PS as the functions are static I have given as a static variable so let us compile this so no syntax error so the variable which is given the main class could be accessed in derived class now let us change this into private let us see which is outside the class so you can see that it is showing error message so you can see main int comma int has private accessing basic operation dot sum so we won't be able to access some here even in a same packet from another class we won't be able to access it students I hope now it is very clear how this public protected and private access specifier works here public doesn't have any restriction the private is fully restricted it is available only within the class when we don't give anything as a specifier and then only inside the package it acts like a public students keep watching my channel learn and share thank you students