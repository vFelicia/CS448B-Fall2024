hello students in the previous classes we have seen keywords identifiers and literals in this class we are going to see operators and also delimiters in the programming context operators are backbone of any operation or function what are operators they trigger some computation when it has been applied to the variable or constant when we talk about operators we also need to know about operands operands are nothing but variables or values here for example a plus b we will take a plus symbol is the operator which operates a and two both operands similarly if we take 7 multiplied by 5 and the multiplication symbol is operator and then 7 and 5 are operands there are different types of operators arithmetic operators assignment operators relational operators identity operators membership operators shift operators logical operators and bitwise operators we will see one by one with examples arithmetic operators are nothing but the operators which we normally use in mathematics first here we are having plus that is addition for example 5 plus 20 results 25 similarly minus that is subtraction 11 minus 1 which gives 10 here instead of multiplication symbol in mathematics in computers always we use star symbol so 100 multiplied by 5 results 500 and then exponent exponent is nothing but the power so to get the power we will be having 2 times the star symbol for example 5 star star 2 that is 5 to the power 2 so that is 5 into 5 25 it will be resulting division first operand divided by second operand here we should note that the result is given with decimal places for example here 44 divided by 8 when we divide we get 5.5 addition subtraction multiplication all these it depends how we give the input if we are giving input with the decimal place and then output also will be with a decimal place here next we are having modulus which is percentage symbol this percentage symbol is an operator which returns the remainder when first number is divided by the second number for example 62 mod 6 that means 62 10 times it goes and then 2 is the remainder it doesn't take a decimal form and then it returns 2 as the result next we are having floor division flow division is nothing but it divides and then leaves the decimal places and then gives only the integer value for example 58 floor division by 10 actually if it is normal division it will be 5.8 it will not take 0.8 and then it gives only 5 as the result here all the operators used two operands python also provides an operator where one operand can be used that is called unary operator so there are two unary operators that is plus and minus when we say plus that is also a binary operator so we always call it as unary plus for example a is equal to 10 then plus a that results plus 10 but we cannot differentiate it but at the same time unary minus so if a is 10 if we say minus a see now it negates the value that means it becomes 10 all the arithmetic operators are also binary operators that means all these requires two operands to operate next we will see relational or comparison operators relational operator determines the relation between two operands and results as boolean literal that means it will produce a result as true or false as it compares two operands it is also called comparison operator we are having totally six operators here first one it is lesser than this symbol in the keyboard you can find just above the space bar in the right side see the point is facing left side the first operand that is left side operand should be smaller and the right side operand should be greater it checks whether the left operand is smaller than the right operand for example 6 lesser than 25 so it is correct so it will produce true as a result next we are having greater than symbol the left side operand should be greater than the right side operand for example 102 is greater than 50 this is also correct so it results true then here we are having lesser than or equal to it should be lesser than r equal for example 35 is lesser than or equal to 30 it is not correct so it will be resulting in false next one greater than or equal to 71 is greater than or equal to 75 so this is also not correct so it produces false and then equal to equal to 2 times v u it checks whether both the operands are equal for example 100 is equal to equal to 100 video so it is correct so it produces true as the result see here you need to remember if you are giving one single time equal to mark it assigns the value to the variable two times you give equal to together and then it becomes the relational operator it checks whether both the operands are equal or not next we are having not equal to this is written using the exclamatory symbol and then equal to mark it checks whether both the operands are not equal to 18 is not equal to 20 that is true now let us go to python ideally let us check all the arithmetic operators first we will have addition first operand i give 20 and the operator plus i give 30. see we are having two operands so this is binary operator so 50 is the result similarly subtraction and multiplication then we'll check the exponent that is 5 2 times star i give that is 5 to the power and then 3 i give so 5 into 5 into 5 125 we will get as a result next we will have the division operator for example i give 40 divided by 10 unlike others we will have with decimal place next modulus so that is a percentage symbol for example if i give 12 modulus 10 it will produce 2 as the result as it is going to give the remainder now floor division 59 two times division symbol i give and then i give five normally if it is ordinary division and then it will say with the point that is 11.8 but here we will get only 11. all these are using two operands so binary operators now we will see the unary operator where it will use only one single operand to operate i say a is equal to 20 and then i say plus a we will have 20 only but as plus 20 the plus is not shown in the result so we can't see the difference here at the same time if we give minus a we will be able to see the difference it will show minus 20 as the result so as we are using only single operand it is called unary operator we call it as unary plus and unary minus next we will see some examples for relational operators 5 is greater than 10 is it true or false it is not correct so it will be false 65 is lesser than 100 is true 70 is greater than or equal to 70 so it checks even the equality so it is true 83 is lesser than or equal to 100 so this is also true and then checking only the equality 22 is equal to equal to 22 so it is true right at the same time 23 is equal to equal to 21 if i give it is not true then not equal to is using exclamatory mark i give 10 is not equal to 10 so it is false assignment operators assignment operator is equal to symbol this always assigns the value to the variable which is left side to the operator for example we are having m is equal to 5 value 5 is assigned to variable called m assignment operator equal to can be combined with other operators which assigns new result to the same variable for example here m plus equal to 2 the meaning of this is m is equal to m plus 2 so what happens 5 plus 2 is assigned to the variable m similarly we can also combine with other operators like subtraction multiplication and then also exponent and division modulus and then floor division this assignment operator can also be combined with other operators that is other than arithmetic operators let us understand by executing it now let me consider m is equal to 25 so if i give m plus equal to 20 then the new value of m will be 45 so the value is over written as 45 here let us have the same value let me give m minus equal to 10 so now m will be 35 similarly m divided by equal to 5 so 35 divided by 5 is 7 now let us get the exponent m star star equal to 2 so 7 7's are 49 will be the answer no see as before i told 7.0 is there 7.0 into 7.0 it gives 49.0 if it is only 7 without a decimal point there then it will give 49 alone without 0.0 let us assign some other value to m m is equal to 100 now m floor division equal to 22 if i give the result will be only the integer part not the fractional part logical operators there are three logical operators the first one is and the second one is r and the other one is not these logical operators works on relational expressions as well as numbers or strings are sequence if we check with the relational expressions the end operator evaluates true if both the conditions are true for example i have two expressions with logical operator and 5 is greater than 1 and 10 is lesser than 50. see if you take 5 greater than 1 that is true and 10 is lesser than 15 that is also true so if both the expressions are true then this end logical operator results with true next r operator either one of the expression is true then it will be evaluating as true so for example 5 is equal to equal to 6 see actually this is not correct so that means false 5 is lesser than 15 that is true so false or true it gives true as the output not operator see not operator complements the operand not operator works with only single operand 5 equal to equal to 6 it checks whether 5 is equal to equal to 6 or not so this is false so not false that is complements its it becomes true we will see all the combinations as truth table for and here false and false results false false and true is false true and false is also false true and true only becomes true so either one of the expression is false it gives false only as the output so this is and operator now if you see r operator either one of that is true and then it results true false and false both are false so it is false false and true so there is one true so it is true true and false again one true is there so it is true true and true also true not operator so if a is false and then it gives true as a result if a is true and then false is the result now next we will see how it works on numbers strings and sequence see here numbers are strings or sequence has either it is true value or false value don't take it as a literal as a constant true or false you consider here as that value which is true value or false value to represent it i have given true and false completely in the small letters known type you know that is always false boolean false letter is there that is also false value if you take number so that is 0 or 0.0 otherwise imaginary number that is 0j if you take any of this is false value any empty sequence that is false value any empty mapping so that is dictionary we will see later about that just you remember now that empty mapping also falls all values other than these are considered as true values you please remember this now let us check how it works on and operator if a is false and b is false both are having as false value and then a is returned as output false value and true value so that is if a is false and b is true and then the value a is returned if a is true and b is false and then b is returned if a is true and b also true and then b is written see remember here false and false gives a means whatever is residing in false that only false and true it gives false as a result because we already learned false and true is false right so the value in a question will be returning similarly true and false it is there it gives false only as the result if true and true then be as a result you also need to remember that if first value is true then only it will evaluate the second value whether it is true or not even the syntax is wrong it will not check at all if false is found as the first value it returns immediately as false it will not check whether the second value is true or false now let us check r if a is false and b is false the value b is returned if a is false and b is true either one of this true is true to be returned so automatically b is returned if a is true and b is false a is been returned that is true value and then a and b both are true and then a is been written not it automatically complements so false values there it gives the true as a literal you remember this is not as the value it gives as a literal similarly if true value is available there and then it gives false if you are not clear still by these examples you will get to know how it works take this example open and close single quotations so that means nothing is inside it is an empty sequence and operator and pin is inside the single quotation that means it has some value so it is true value false value and true value so false and true means it will be returning false that is yes value so yes values single quotation open and close it returns that in output the second example here something given inside the quotation that is true value here also it is true value true value and operator true value true and true it evaluates b's value so b's value here whatever is there is python there so python has been returned here you can see open and close curly brackets which denotes a dictionary empty dictionary so that means it is false value similarly 0.0 is also false value it is false are false so both are false it returns the value which is b so that is 0.0 is been returned now not 10 so 10 is some value so that is true value right so not true that becomes false let us also execute and check so that it sets in your mind very clearly now let me take 10 which is true value and i have book as a string so this is also true value true value and true value will be returning the value which is at position b that is book is going to be the output now i am having 0.0 and 75 so end operator has been used this is false value and then 75 is true value when it is false it will not care about what is their next operand so automatically it gives 0.0 as the value and then now 100 and i have empty quotation so which is true if in case it is true and then it goes to the second operand to check whether it is true value or not so now it is false value it will be returning the false value i have here 0 j that is false value and then r 25 which is true value here r operator is there the second value which is 25 is true so automatically it will be returning 25 as output now i am having 1000 r i have empty sequence so this is true value our false value it will be returning the true value that is thousand next i have computer in the quotation which is true value r and then i have mobile here so true value or true value it gives a s value that is computer next not i have not 50 50 is some value so that is true value so not true will become false next we are having bitwise operators bitwise operators are similar like logical operators but here we are having four operators these operators works on binary first we are having and we call it as bitwise and for example if a is equal to 1 and b is equal to 0 a and bitwise b gives false that is 0 that is a and b true and false gives false but as binary output that is 0 next we are having bitwise inclusive r normally we call it as bitwise r if a is equal to 1 and b is equal to 0 same value we will retain here also a r b will result in 1 next bit wise exclusive r that is xr here if both the operands are same and then it results 0 otherwise it gives 1 here a xr b 1 xr 0 this will result in 1. next we are having bitwise complement it is also called bitwise ones operator for a the output will be minus of a plus 1 here bitwise complement operator b is given that is 0 it will be resulting in minus 1. here i have a truth table for you first let us see for and if a is 0 and b is 0 a and b is 0 0 and 1 results in 0 1 and 0 also results in 0 1 and 1 that is true and true will be giving true that is one next a is 0 b 0 then a r b is going to be 0 0 and 1 is 1 1 and 0 is 1 1 and 1 also 1 next x are 0 and 0 so that is both are similar it results in 0 0 and 1 it is 1 1 0 again 1 1 and 1 is similar so it returns 0 bitwise complement 0 complements as 1 1 is complemented as 0 next we are having identity operators there are two identity operators one is ease and other one is e is not is if both the operands are pointing same memory location returns true for example let us have a is equal to 5 b is also 5 and then now a is b so both are having same value that is same memory location it denotes so it will result as true is not is opposite to that if both the operands are not pointing the same location and then it will be giving false as output next we are having membership operators here also we are having two operators one is in and then other one is not in in checks whether the variable is in sequence if it is there and then it will be giving true as output see here app that is a string in application see if you check app is a part of application string so that is true next we are having not in it checks whether the variable is not in the sequence for example text not in textbook see actually text is a part of textbook so it is false next we are having shift operators this also works with the binary two angle brackets together mention the operand which is left side is been moved to the right by the number of bits specified by the right operand for example i have 1 0 0 1 binary number right shift operator and then 2 this 2 says how many digits the number moves right side so here it will move 2 digits that means 0 and 1 last 2 digits will be moved so no further places available there so it is been removed actually then it becomes only one zero similarly lift shift operator shifts the binary number to the left side by number of digits specified in the right side for example same 1 0 0 1 but it shifts 3 digits to the left side that means 1 0 zero one is moved three digits so where the empty places are there zeros are filled so now if you see automatically the value changes like one zero zero one zero zero 0 i will demonstrate all these operators using python ideally now bitwise and operator it works on binary numbers we know so first operand iq using 0 b and then 1 and operator 0 b and 1 so 1 and 1 will be resulting in 1 the output is with decimal number system let us see one more example 0 b 0 and 0 b 1 so it should be result in 0 now let us see r operator 0 b 0 r 0 b 1 it will be resulting in 1 0 b 1 r 0 b 0 so it will be resulting in 1 again let us see now x r if it is similar and then 0 is the output so 0b 1 xr then 0 b 1 so it will be resulting in 0 if it is 0 and 1 let us check 0 b 0 bitwise xr 0 b 1 so both are different now it will be resulting in 1. now let us see bitwise complement if i see bitwise complement of 0 it will be 1 next we will see identity operators that is ease and e is not if address of the memory locations are same and then it will be resulting in true i said instead of putting the value in the variable it denotes the address this i will explain you in the future classes in detail for now i just say a is equal to 10 and also b is equal to 10 now the address of a and b both the variable will be pointing to the same memory location so it will be resulting in true if i give a is b so that is true similarly if i say a is not b then it will be giving false next we are having membership operators it is nothing but in and not in python in python textbook see python is there right so it will be giving true now if i say py not in python so it is false shift operators this also works on binary 0 b 1 0 0 1 0 i give and then shift operator right side shifting two digits so at last one and zero will be removed only one zero zero will be there but it will be showing the output in the decimal integer we will just convert into binary and check binary of 4 so it is 1 0 0 you can see 1 0 0 before that 0 b denotes binary number now left shift operator 0 b i say 1 1 1 1 again 0 1 shifting three digits so three zeros are added to the right side that means it moves three digits left side the empty spaces are filled with zeros so now the answer is 488 if we check what is the equivalent binary then we will come to know binary of 488 the previous number with that three zeros added in the right side so that means the number moved to the left side three digits at last the tokens we have delimiters delimiters are also known as punctuators or separators most of the time they give the structure to the programming language the most commonly used delimiters of python programming language are parenthesis square brackets curly brackets all these used for grouping and then dot comma semicolon colon at the rate all these are punctuation marks even arithmetic operators and assignment operators even bitwise assignment operators all these are also delimiters usage of these delimiters will understand better when we are doing the programming students i hope you understood all the topics clearly keep watching my channel learn more thank you