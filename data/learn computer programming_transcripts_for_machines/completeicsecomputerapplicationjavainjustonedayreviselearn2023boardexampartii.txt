wrapper classes we know in the object oriented programming language everything exists in the form of classes and objects but the primitive data types are not as objects because they have defined in the language itself sometimes we may require to convert primitive data types into objects for this purpose we can use wrapper classes so wrapper classes are used when we require to convert primitive data types into objects wrapper class wraps the data type and gives the appearance of an object we know that we have eight primitive data types for all the primitive data types we have corresponding wrapper classes let us see the corresponding wrapper classes for byte data type we have wrapper class byte but b letter will be capital same like that for short short with capital s for ind we have fully the word integer with capital i for long capital l long for float capital f float for double capital d double and for character we have fully the word character with capital c boolean type we have capital b boolean wrapper classes are in java dot lang package so we already know java.lang package is a default package we don't need to import it so for byte we have java dot lang dot byte and then for short java dot lang dot shot and so on let us see the method with the example for integer we have integer dot parse inter and the value of the string example if n is the variable and then integer dot parse into 36 so here 36 36n object which is a string object this will be converted into integer value then we will be able to perform some operations same like that integer dot value of that string will convert that into integer value if it is an integer then we can convert into string integer dot to string of the value of integer so it get converted into string same like that we have for all other data types also here we will see mainly integer and character type so in character type we have few things which are more important in programming if we need to convert a small letter into capital letter then we may use this character dot to uppercase of that character so here for example i have given small a this will be converted into capital a same like that character dot to lower case of that character so that is being converted into lower case so output of these two functions are character type but all other are boolean type see character dot is upper case so that means it is like a question we can just remember like that so it says whether it is uppercase or lowercase that means is uppercase means if it is true it will say true otherwise it is going to give false so here i have given is upper case of r so r small r which i have given the value is not capital letter so it gives false same like that character dot is upper case that is h i have given here it is true it is h is upper case so it is true same like that whether it is letter or digit also we can get character dot is letter that means it will give whether it is true or false so j i have given which is true and then if i give digit then the 5 is a digit so again it says true let us have an example program press wrapper i will create the variables needed in number and then character type c i create then boolean type b to give the output so let me have number is equal to integer dot parse in that is i with capital and then i give here just 23 so the value which i have given inside the quotation will be a string type isn't it so that will be converted into number type which is integer type so just let me print this system dot out dot print line of string to number we have converted just for reference i am giving this so plus the variable is number i create a string variable string s to convert integer to string so i give integer dot 2 string off so the value which i give may be just 45 it get converted into string type so let me print this system dot out dot print line off here i am going to print number two string plus that is yes i already mentioned that is declared c as a character type let me give some value for it c is equal to just i give i so the character type always be mentioned inside the single quotation so c is equal to character dot 2 upper case of c so the c is value is i that is going to be converted into capital i let me print after converting it system dot out dot print line of upper case of i plus that is c here c is value has been changed to uppercase of that again i just change the value of c here c is equal to c is equal to i just give capital m here capital m and then let me change this c is equal to character dot to lower case of c so let me print again just copy this this is lowercase lowercase of m i have given that msc now let me check whether it is uppercase or lowercase so we have already given boolean data type so b is equal to the value of c let it be like that the output value of this function going to be boolean type so b is equal to character dot is upper case of c system dot out dot print line off so let me just give a reference here whether m is upper case let's see same like that let me change this b is equal to character dot is lawyer case of c system dot out dot print lineup by that m is lawyer case plus c same like that let us check whether digit or not so b is equal to character dot is digit the value that is c so whether m is digit or not it will say whether m is digital let us also check whether it is letter later plus uh we supposed to give b so we have changed that value right as b boolean so we supposed to give for all these b let us change this b so this is lowercase of m is going to be c both are c and these are all b okay here we have to change this simple let us compile this no syntax error so string to number number to string this value we cannot identify whether it is string or number in case of number we will be able to make operations like addition subtraction on string we can just contact uppercase of i is capital i lower case of m is small m whether m is upper case false see the last value it is changed already capital m to small m so it is given as false then where it is lower case it is true because we have already changed the value of c there as small m so that is true so whether m is digit it is false whether m is later true auto boxing and auto unboxing automatic conversion of a primitive value into an object of the corresponding wrapper class is referred as auto boxing similar way but in opposite conversion of an object into its corresponding primitive data type is referred as auto unboxing let us understand with few examples now i initialize a variable of integer data type called h value 16 this is ordinary primitive data type now if i want to convert this into an object which is corresponding to its wrapper class we know now what is wrapper class corresponding wrapper classes integer i capital integer now i give the object name let me have obj h is equal to new integer of h so the primitive data type here it is getting converted into its object this is called boxing let us check by printing it i say here object just for reference plus object h obj h you can see the object is printed here now let me tell you what is auto boxing instead of giving the new keyword and then integer of age we directly say here as h so this statement is taken care by the compiler automatically it is being done so it is converted into its object called obj is of its corresponding wrapper class integer this is auto boxing let us run this also you can see the second time the output has come now let us understand what is unboxing unboxing is nothing but again converting this object into its ordinary primitive data type so let me give in now i use some other variable say a is equal to obj h see this is an object that object is been converted into ordinary data type so this is auto unboxing let me print this this is unboxing okay you could you could see that unboxing you may have a question what is the need of this as object oriented programming everything resides as object and class so even you store the primitive data type it is automatically converted or wrapped into its object you may have some situation in advanced programming where you need all the data as object not as primitive data so that is the reason why concept of boxing and auto unboxing is introduced in java sometimes we need to convert one data type into another data type right for example integer to string at that time the object only will be helpful see let us check i am trying to convert string str is equal to obj h dot 2 string okay now this will be converted as string now let me print this so i will be printing here string you could see that it is printed 16 that is a string now if this is not an object okay so let us give a r h let me give h itself i am trying to convert this age that is primitive data type to string will it accept see that is an error so this is the purpose of having the object how we can say class as user defined data type we know java provides eight primitive data types these are fundamental data types java also allows to create own data types using primitive data types and these are known as composite data types as composite data types are defined by user these are also called user defined data types creating user defined data types sometimes some logically related elements needed to be used under a single unit to handle and serve to such situations we create own data type through classes for example we may need to have the following data of an cuboid it may have length breadth and height let us consider class called volume here instance variable l b and h are available here is an constructor without any parameter that is default constructor is available the values of i b and h are initialized as default values next one more constructor is there with parameter that is all three are integer type length breadth and height here l b and h are initialized once we create volume of that becomes a composite data type object of this can be declared whenever is needed there may be some more method and then main method also here another statement we can see which creates an object or instance called v and then some more statements may be there and then class get closed creating objects we know a class provides the blueprint for objects creating object has three parts first one is declaration declaration declares a variable with a name referring an object of the program and this will be left side of the assignment operator for example volume v here v is an object of class called volume the next one is instantiation right side to the assignment operator new operator is used to create object and allocate space for the object for example new volume of creating object is creating instance of a class so it is named as instantiating the third step is initialization new operator is followed by a call to a constructor this initializes the attributes of the new object for example v is equal to new volume of name of the class and the constructor are same here it is volume we combine this and then we write volume v is equal to new volume of and then we terminate let us now learn how to use this object to access variables and functions to access the variable of an object or to call function we can use dot operator that is a dot syntax to access variable is object name dot variable name and then we terminate example v is the object name and then dot l is the variable name we terminate this syntax to call the function object name dot function name and then if any parameters are available will be given inside the brackets and then we terminate for example v dot display off then we terminate as there is no parameter it is empty here let us learn how to create objects access variables and functions through the object using a program i create a class user defined class class udc i create class variables static in l comma b comma h and also vol now public wide value of a method i create here and then here i pass reference data type so i will be giving udc space i give rd so now i can initialize the variable using rd dot l is equal to 4 rd dot b is equal to 3 rd dot h is equal to 2 then now i create one more method public wide calc before calculating i need the values of variables to get the variable values i will create the object and i will call the method value udc rd is equal to nu udc now i will call it value of rd here after calling i can just calculate the volume v yl is equal to length into breadth into height now i will have a method wide display off here i will simply print the volume system dot out dot print lineup volume of cuboid is equal to plus v yn now i will create a main method public static y main of string of arguments so again i have to create a object and call other two methods so udc i give obj is equal to new udc of obj dot calc obj dot display off let us compile no syntax header will run this so you can see volume of keyboard 24 is displayed class has user defined data type now a class is a collection of objects we already know now that contains a set of data items and related functions therefore we can say that a class is a data type that creates its object classes are defined by the user where programmer can declare certain characteristics and behavior so we can say that a class is a user defined data type of a composite data type let us see the difference between primitive and user defined data types primitive data types are inbuilt in java user defined data types are created by user primitive data types can hold single value user defined data types can hold set of values primitive data types are available in all parts of java program here the availability of user defined data type will be upon their scope size of primitive data types are fixed the size of user defined data types depend on their constituent members encapsulation and access specifiers we know two main things which are in the class are data members which contains informations and functions or methods that performs operations sometimes we may need to access or manipulate the data inside the class there may be unauthorized access and misuse also then to keep it safe from unauthorized access java uses mechanism of binding both data members and functions called encapsulation encapsulation ensures that a user cannot access the data of an application without using its functions so encapsulation is defined as the wrapping up of data under a single unit it is the mechanism that binds together code and the data it manipulates as per the requirement variables and functions of a class can be made to be hidden from other classes therefore this is also known as data hiding to remember encapsulation we can think of capsule where data variables and methods are wrapped as a class let us know how to achieve encapsulation to restrict the unauthorized access java has three keywords called access specifiers first one is public next is protected and private while declaring data members any one of these keywords is specified with data members or method prototype let us learn the access level of these access specifiers if public is given as access specifier then it is accessible by any class it may be inside the package or even outside the package sub class are class of other package if protected is indicated it may have access inside the package and also outside the package that inherit the class if private is given then it can be accessed only within the class even in the same package other class also won't be able to access this and not even by inheritors when we don't give any access specifier then it becomes public within a package that means it cannot be accessed outside the package and this is defined as default if we need an example for encapsulation we can consider this an employee may have access to his salary but he cannot change the cell you know management only can have an authorization to change the salary of that employee so where the method display is there it may have public access specifier so that any one of the employee can see the salary part but access to data members and function cannot be given as public it can be as private so that management only will have the authorization to change the salary of the templates i will demonstrate encapsulation using program which we have already done earlier i will give just few examples we learned packages in our 23rd video so the basic operation was a package which i created then here is a class which i called a class from this package that is outside of this package this class is available let us check this see here there are two classes inside this package one is called sum so here i have calculated sum of two variables and printed here you can see i have given public as the access specifier then if we see this diff so here also i have given public as the access specifier let us come out of this so here i have a class called import bo pack where i have called the sum dot main and diff dot main which is inside that basic operation package as some and if both are having public as access specifier we can call that outside the package so we can run this and check so sum is also given difference is also given here so here 45 plus 55 was the argument here 83 and 78 it gave the difference let us once again go to the package now here in the class called diff i will call the sub so that is sum dot main was the method and then i am giving the parameter value for example i give 6 and 7. i will compile this see there is no syntax error because the sum was having public one and then this is inside the package let us run this so for difference i am giving 100 and 150 so it will show difference as 50 and the sum it will go and run from there so it will give the result so it has given the result sum is 13. so we can see if public is given as access specifier it can be accessed from anywhere now i will change this access specifier this public into protector so let me compile this so you could see here error found in class so let us see what is the error so modifier protractor not allowed here so now let us do without this so that will becomes default here i have not specified any public or private or protected so compile this no syntax error so i have already in difference i have called it so it is here you can see that will it work or not it will work because it is in the same package so i give 200 100 so the difference is 100 sum is 13. now let us go outside the package then i will run this now you can see here it shows a error because when we don't specify anything that becomes default it will be available only in the package not outside the package so let us close this now i will have a sub class here i will create class product extends sum so extends is a keyword which is used to inherit the property of the main class so i will write now public static wide try u and then i u into x comma in y now i will have s is equal to x into y so i wanted to use the variable s which is in the sum class so i will give as a class variable here static in ps as the functions are static i have given as static variable here so let us compile this so no syntax error so the variable which is given in the main class could be accessed in derived class now let us change this into private let us see which is outside the class so you can see that it is showing an error message so you can see main in command has private access in basic operation dot sum so we won't be able to access some here even in a same package from another class we won't be able to access it students i hope now it is very clear how this public protected and private access specifier works here public doesn't have any restriction the private is fully restricted it is available only within the class when we don't give anything as a access specifier and then only inside the package it acts like a public scope and visibility of variables the scope of variable refers in which part of program the variable can be used visibility of variables in a program depends on the type of variables we use so there are three types of variables available class variables instance variables and local variables that is including parameters let us see what is class variables variables that declared inside the class and outside all the blocks and also mentioned as static are called class variables these are visible in any part of the class i will explain through a simple program so i am creating a class called basic calc i will import java. util dot scanner class basic calc class variables are declared inside the class but outside the methods are any block it is also mentioned as static so i will give static in x comma y to numbers i take and then sum my calculate and then also product i calculate so now we can declare the method public static void input of iq so i will take input for x and y scanner sc is equal to new scanner of system dotting system dot out dot print off i say enter first number for that i take x is equal to sc dot next in tough then again i need to take the second number we copy and paste it here i make it this is y and then this is second number so now we have taken the input let me create one more method called calcaf are some we will do wide sum of so here simply i create sum of two numbers s is equal to x plus y so now i wanted to print this now i will create one more method white pro of so now i give p is equal to x into y then i also print this so i am giving here product then here it has p now i will create a main method i wanted to call all the methods for that i need to create a object the class name is basic calc obj i give as a object name is equal to new basic calculus then now the object name that is obj dot input of then obj dot sum of obj dot pro f so let me compile this enter first number 87 23 so you can see the result is there so now it is clear that when we give as a class variable it can be in any part of the program so x is there in this method and y also there this s is in sum method p is in some other method so here you can see this is a static method these two are not static method again here main method is static method so let us read once again variables that declared inside the class and outside all the blocks and also mentioned as static so all this we have done then it is visible any part of the program next instance variable variables that declared inside a class and outside all the methods and blocks is called as an instance variable so here the difference is we are not giving us static scope of an instance variable is throughout the class except in static methods so let us see this so now i have static here i just remove this study here let me compile so you can see errors found in the class let us see what and all the error so nonstatic variable x cannot be referenced from a static context the next one again y also the same way here s is there this is in the nonstatic method so it can allow same like that the p also can be allowed in this method which is nonstatic method so here we are not using any variables directly we have printed here itself so if we remove this static from this method then we can compile this no syntax error so now this will run without a problem so let us run this one first number then second number so we get the result here so the variable which is inside the class but outside the blocks without static then it is called instance variable next one local variables all other variables which are not instance and class variables are treated as local variables including the parameters of a local variable is until the control leaves the block in which it is declared if we declare a variable inside the method it will not be available in other methods if there are some blocks inside the block if we declare then interior blocks are not visible outside if we have variable outside the blocks the interior blocks can have the variable so let us go back to the program now what i do i remove this x and y from here then i make it inside this method in x comma y see here it is inside this input off so you can see here there is no error in this block so here already it is showing as an error here because x and y is outside this method so that is in another method cannot find symbol variable y even cannot find symbol variable x even here in the next method also we won't be able to get the variable so whenever we use many methods where we are using common variables then it should be static variable that is a class variable inside the class but before all the methods itself we will declare so that will be the best one in case if we have these two in input itself so i will cancel this method itself i delete the method and then put it inside this here s is equal to x plus y also been calculated here itself it is printed so there won't be any problem because s and p are instance variable here it can be allowed inside this input of and then x and y are local variables so let us have this as a comment line i just hide this so now compile there won't be any problem it will print it will print the sum of that number so first number is 5 second number is 10 so 15 is the answer here now i will show how it works inside the blocks and outside the blocks for that in this method itself i create a for loop for i say x is equal to 5 when x is lesser than or equal to 10 x plus plus now simply i print x x so that is in print line next next line it will print we have already declared x inside the method so it is taking for this for loop now compile this there won't be any syntax error in case i declare here one more into m then m is equal to m plus 1 so i will have ms 25 just for example see i come out of this for loop and i say system dot out dot print line of iqm see inner loop i have declared m it is outside the loop so here it will not work so interior variables will not work outside the block of the code compile so cannot find symbol variable m but at the same time x is in the method it is used inside that for loop so that is inner block so it is available here so now let us see as a parameter so here i will not have this import statement then i will not have all these into x comma into y so i have given s is equal to x plus y so let us not have this for loop and all so this is a very simple one s is equal to x plus y will be done without any error no error here so let us have this now so i delete this then i remove this also so x and y are parameter here it is the next method which is called this x and y see here you can see cannot find symbol variable y so the parameter also a local variable only all other variables which are not instance and class variables are treated as local variables including parameters scope of a variable is until the control leaves the block in which it is declared variables declared in interior blocks are not visible outside of that block variables declared in exterior blocks are visible to the interior blocks string handling let us now see string class creating string a string is a reference data type so the variable yes i have taken string s is equal to keyboard inside the double quotation and i terminate so this is the way of initializing the string variable string object string str here str is the object name that is a valid identifier can be anything equal to new keyword we use and then string of mouse i have given inside the double quotation where the mouse is stored in the string object called str next string buffer class creating string buffer object string buffer sb1 is equal to new string buffer off here sb1 string buffer object has been created nothing be stored in this next string buffer sb2 is equal to new string buffer of joystick i have given in the double quotation where in the sb2 object joystick has been stored the third way sb3 is equal to new string buffer of 20. here 20 is the integer number it creates a object where it can store 20 characters in java there are many functions for the string let us see one by one the function here length of so what will be the output data type always it will be integer the length says how many characters are available in the string including the special character r space so here output data type is in for example i have given here key chain there is a space between key and chain which is in the double quotation dot length of so here it will count all the characters available in it three four five six seven eight nine so nine will be the output next to upper case of here the output data type will be string only the function example here drive dot to upper case of see here d is already there capital r i v is in small letter so which are all in small going to be converted into upper case so then the output will be drive in all in capital letters next to lower case of the output of this also be string type for example i have taken monitor here to lower case off it will be giving this monitor in the lower case the next one replace of old character dot new character that means we are going to give a character which is available in the string and then we are going to change into the new character which we want to replace so again the output data type will be string itself here for example i have given store dot replace o comma a see o is a letter here that is a character so it is been in single quotation same like that a is also given in the single quotation so the output will be o is been replaced with a so it will be star next trim off here the output data type again is string type for example i have given some space i love java then again some more space what it does it will cut all the extra spaces before and after the string so that means it starts from i and then it ends with a the extra space before and after the string going to be trimmed next concat off concat is going to be string type output here for example key which is given inside the double quotation that is first string and then concat of board i have given again in the double quotation here these two are going to be added together which is going to display nearby so keyboard will be the output then value of so this is also going to be string type the function here example string dot value of 32 so 32 is a integer number here please note that o is capital value all in small and then o is capital f is in small letter so the integer value going to be converted into string value that is just 3 2 as the object here there are many string functions in this class we will see only this much we will continue that in the next class now i will demonstrate all these string functions through a java program string str is equal to i just give here mirror ah let me take a length of this so i need a variable integer variable so that is in l is equal to str dot length of so let me print this plus l sorry here now let me also convert into upper case so i can store this in the new variable after converting into upper case otherwise directly i can print so let me assign to a new variable string str 2iq is equal to str dot 2 u is in capital upper and then case c is in capital so now str2 becomes upper case of mirror let me print this also in upper case this just for reference i am giving so that is str to after converting into upper case it is going to print let me convert one more string into lower case system dot out dot print line up i am just giving here this is my book dot to lower case of l should be capital then c should be capital lowercase of so now this is going to convert this is my book into lower cases here this is in small all other things are in capital so let us compile then run this so you can see here length of the string is 6 in upper case so mirror became in uppercase this is my book so this has already in the small letters all others were in big letters so it has been converted into small letters the next we are going to see here is replace of so let us replace any of the string with the other letter what i will do here system dot out dot print line off i will give here snow snow dot replace of a old character to be given here yes i change this here in single quote yes and then comma instead of that i change it to k so capital k so now the s letter has been changed into k so it is going to be printed we don't need all these things let me remove this so compile this so you can see that s n o w become k and o w so let us learn about trim function now i will give here string str is equal to with some space i give snow now system dot out dot printline off i am going to print str next let me take this without space that is trimming it i'll paste that same here then i here i give dot trim off so what it will do first it is going to print the original string here with the space and the next it is going to print after trimming it if i give space after this we cannot understand but we can understand whether there is space previous to the string or not let us compile this so you can see that the extra space here has been cut let us give a lengthy string snow is cool so it is going to cut only the space after and before not which is in between so in between whatever is there it is going to stay like that next let us see the concat function i will add one more string with the str so let me do like this system dot out dot print line of str dot concat with if we take it in the hand let me cut this i'll take this also so with this str1 it is going to add if we take it in the hand compile this so snow is cool if we take it in the hand it is displayed together now let us learn value of function let me take in n is equal to 45 so let me print this system dot out dot print line off after converting into string so that is string dot value of that is n now this is going to be converted into string value it is not going to be integer value how we can know this after converting this we won't be able to add any number with this for example i add just 10 with this if it is a number then it is going to be 55 if it has been converted into string 10 is going to appear nearby let us compile and check see here it has been converted into string so it has been displayed and the nearby 10 is been displayed index number of a string each character in a string will have its index number so here i have given exhibition e is having 0 as index number so always the index number starts with 0 and then it will keep on continuing until the last character so here last character we have 9 as the index number if we see the length of this is going to be 10 so the last index of the character is going to be one lesser than the total length of the string so we can say index of last character is equal to length of string minus 1 in case if we see the position of the character it is going to be one more than the index number so that is for example if we take this b here one two three four five so this is the fifth character in the string but it will have four as index so if we wanted to know the position what we do we can add one with the index so position of the character is equal to index of the character plus 1 here we have index off so it is going to give the index of particular character output will be integer type for example i have application dot index of p so it is going to give the index of p so that is the first occurrence of p it is going to be displayed so it will be 1 so that is 0 and then 1 next we have last inductor so here again the index is going to be integer data type then same application we say application dot last index of p here the last occurrence of p is going to be taken so it is going to be this p so that is 0 1 2 so 2 is going to be the output next we are having character so we will give the index number output is going to be character type so for example i have computer dot character at 6 so the index which we are going to give is inside the bracket here so it will take the character at index 6 so 0 1 2 3 4 5 6 so e is going to be the output next we have ends with so it is going to check whether the string ends with the particular string so output data type is going to be true or false so that is boolean so phone dot ends with o so it is going to be false next i have starts with so again it is going to say whether it is true or not so again boolean data type cell dot starts with c which is given inside the quotation here so it is true c is right one so next we are having equals this will check whether given strings two strings are equal or not and then give the output as true or false so again it is going to be boolean data type so here we give first string here dot equals of the second string inside the bracket so it is false because pin is not equal to capital pen here next we have equals ignore case of it is going to check whether both the strings given are equal or not by ignoring the case whether it is in upper case or lower case it is going to ignore so it is boolean type again pin dot equals ignore case of pin so both are equal if you ignore the case so it is going to be true we have few more functions we will see that in the next class let us know how to run all these using a program i will create the class i will copy the codes from the previous one let me copy all these codes then change the name of the class instead of number we are going to have a string enter a string so string str is equal to br dot field line off we are going to get the index of a letter so we need integer variable in i is equal to so here string variable str dot index off so let us give just letter o let us print this right let us close the method close the class compile this no syntax error let us run this so i say here book so index of o that is first occurrence of o so it is going to be 1 0 and 1. let us check the last index so let us copy again the same code then modify this i am going to have here last index so last index of o so let me change here last index last index of letter o it is going to be digitally last index then we are going to print also last index i'll give computer application so you can see index of voice one from the beginning the last index of o is 18. now let us delete all this we will see character function for that we need character data type output so character c is equal to str dot character at maybe just i am giving 6. so it is going to give the character at index 6 let us print this so character at index six is e next we will see starts with and ends with so for that we need boolean data type so we will change here boolean for starts with siu s is equal to str dot starts w is in capital with so we are giving here inside the double quotation so i just give here a and then boolean ends with str dot ends let me give r so let me change this yes and then same we will just copy here whether ends with then whether it is with r then this is e compile this i say number so whether it starts with a false whether it ends with r it is true here not only a single character we can give a word also or a string we can give if the same string occurs then it will say whether it starts whether it ends for example let me give here function here i give java so let us change here also and here java compile this and your string function so you can see starts with function false but ends with java it is true next we are going to learn equals and equals ignore casa so i will copy this again let me have here another string so here str1 now i have taken two string type let me check booed in check is equal to str dot equals off i'm giving here str1 the next boolean checks ignoring case str dot ignore case of this str1 so now it is going to check whether str1 whatever we have given whether it is equal to the next string which is given by the user same like that after ignoring the case it is going to check let us print the result so let me copy this and change for ignore case whether both the strings are equal that is check i see no syntax error enter the string pencil another string pin in small then c c i l in capital so whether both the strings are equal false whether both the strings are equal after ignoring the case it is true so it ignored whether capital r in small sub string and compare to functions we are going to see substring will accept two integer arguments or a single integer argument integer value they are given is the index number here it accepts one single integer value that is index number of the character present in the string this is taken as starting index and the remaining all the index characters will get displayed so the output data type will be string type for example we have cupboard dot substring of 3 here we have 0 1 2 and then 3 is the argument given so from starting 3 that is b remaining everything it is going to be taken so output here will be board next we have here two integer argument that is two index number this is a starting index number and this is ending index number so again output type is going to be string type for example if we take cupboard dot substring of 0 comma 3 so the starting is 0 so the 3 is not included in the output so it is going to take 0 1 and 2 so it will have 0 c u p p is 2 b that is 3 is excluded here so you will have output as cup first let us check this through a program and then we will learn compare to function these codes already you know i have taken input from the user the variable name given to the string is s1 so i am going to take the output i give string s2 is equal to so the string value that is s1 given by the user dot substring of the value i give for example i give 5 then i terminate so i will print this so that is s2 now let us consider string s3 is equal to s1 dot substring of 6 comma 9 so let me print this again 6 and till 9 is s3 is the answer so i give here dictionary so what is going to be the output we have given substring as 5 here so 0 1 2 3 4 5 so the fifth index starts from o so o n a r y is going to be the first output and the next output going to be 6 to 9 so it is going to be n a r so y is 9 that is excluded before learning comparative let us learn about ascii code of characters compare to function going to compare two strings using ascii value of the character so here we have the ascii value of each character from zero to nine 48 is the ascii value for 149 and then so on so for 9 it is 57 then for capital a it starts from 65 66 67 like that and then up to z it is 90 same like that a small letter a has 97 as its value and then z has 122 as its value compared to function going to compare two strings lexicographically that means as in the dictionary it is going to compare so here we have compared to t is in capital here the output is going to be integer type after comparing this function not only compares lexicographically but also compares the length of the string i will explain with some examples here we use the first string dot compared to the second string inside the bracket example i have mouse is the first string value dot compared to the second string value here as book here see the first letter of this is m and the first letter is b here so the ascii value of m is 109 and ascii value of b is 98 so the difference between this going to be given so that is 109 minus 98 is going to be 11. in case here it is book and here it is mouse it is going to do 98 minus 109 so that is going to be minus 11 the next example here i have money bag and then money pass so as per the dictionary money until that both are same so b here it starts a different letter here it is p is different letter so it is going to consider the ascii value of b minus ascii value of p so here b has 98 as its value p has 112 as its value so 98 minus 112 is minus 14 next here i have pencil dot compared to pin so it is going to compare these two see here pin is already there in the pencil later whatever the character is available in pencil is not there here it is going to compare the length so that is pencils length is 6 and the pin length is 3 so 6 minus 3 it is going to be 3 is the output next i have here record compare to record so both are same the output is going to be zero let us do all this through a program let me delete all these so here i will change as user input that is br dot read line off so here i have two inputs before this i will prompt so enter another string another string so user gives s 1 s 1 string and s 2 s other string i am just comparing directly i give in the printing statement so that is i am giving here s 1 dot compared to that is s2 let us compile this no syntax error as we have seen in the example i give mouse then book so 11 was the answer there you got this next let me give the other type of input let me give money back then money purse so you can see minus 14 as we have seen in the example so now i give pencil and then pin so it is length now 6 minus 3 is 3 next let us give the same input for example mouse mouse so it is 0 so here i have c80 compared to a and t so it is totally different the first letter it is going to be c and then here a the difference going to be these 2 is 2 the next one here cell phone dot compare to cell pouch cr minus 7 is answer so until cel p it is same and then here h and here o is compared so here h is having smaller value o is having bigger value so it is in minus value so minus seven and then here i am comparing pencil and pin we have already seen so it is three and then here block and block so both are same it is going to be zero how to apply these string functions in a program we will learn how to reverse a word and we will check whether the given word is palindrome or not palindrome word is a word that does not change even if we read in reverse also next we will see how to reverse a sentence before going to a program let us learn the technique of reversing a word different people will have different level of thinking skills you may think differently than i think so here i am explaining two ways to reverse a string here i have a string called photo which is stored in variable called s1 so if i wanted to reverse it i should take character by character and then i should add it in reverse order for that we have to extract each character we already know the index number of strings so that is p will have 0 h will have 1 o2 and then at last it is going to be 4 to extract each character and put it in reverse order i use loop that is for loop so here this i is for index so index starts from 0 so i initialized as 0 and then it is going to end when it is lesser than the length so the length will be 5 lesser than length that is length minus 1 so instead of that i used lesser than so it is not going to take 5 but it will take up to 4 which is lesser than 5 and then it is in ascending order so i have used i plus plus every time i want to take one letter and then put it in reverse order and then i have to store that in a new string for that i need one more string i already initialized as s2 here so here i have s2 is equal to character i plus s2 initially s2 is not having any value here so character at i in the beginning when i is equal to 0 it will be p so p plus no value so that s 2 is added here and then you are getting the result as s to sp and then when i value increased to 1 s 2 will have character at i that is h here so h plus p then when i is equal to 2 the character we are going to take is o and then o plus hp so it becomes ohp so like that it is going to reverse one by one until i is equal to four at last it becomes o plus t o h p so that is in reverse p h o t o it is reversed now when i is five then it becomes false then it stops this is one method the other method is using for loop in reverse order what i do here i i initialize as length minus 1 so that is 5 minus 1 will be 4 initially it starts from 4 and then what i do until greater than or equal to 0 so i go in reverse order so it is i minus minus first it takes s2 which is nothing plus character at i so that is character at 4 it is going to take and then it is going to add with s2 so you will have s2s0 and then when i is 3 it is going to take t so already s 2's values o plus t it becomes o 1 t when i is 2 then s 2 is ot plus o it becomes oto then i is equal to one it becomes oto plus h then i is equal to zero s2 is equal to oto h plus p so this is also reversed you can use any one of these method to reverse a word so here when you go in ascending order you will be using character i plus s2 so you are adding the characters before s2 in case you are going backwards that is from the last you are coming you will have length minus 1 and then you will add that character type after s2 these are main difference between these two but however the answer is same let us go to a program and execute this these codes i have readmedly copied to take the input from the user so now i have to give new string variable with the value nothing in it now i will have for loop i have used here first method the new string s2 is equal to dot character at i plus s2 so this loop will reverse the word just after completing the loop we will print this plus s2 so close the method close the class compile this so i give here laptop so you can see l a p t o p it is in reverse order if s 1 and s 2 are equal then we say palindrome word so we don't need to print this let us simply check this if s1 dot equals ignore case of s2 see if we don't give this equals ignore case of then if the user gives a mixed characters with uppercase and lowercase then java will not show as palindrome though it is paren wrong word this is boolean type so we are checking whether it is true or not if this is true we say this is palindrome otherwise we can say here yes one plus is palindrome else we will say not a palindrome so i give here 11 l e v e l so your level is a parent rule in case if we give l e v l uppercase first letter then also it will say level is parent rom because we ignore the case while checking if we don't give this see let us cancel this equals so now it is only equals compile this i give here madam madam see i mixed m is capital all others are small so madam is not a palindrome so to avoid this we supposed to give here equals ignore case we will change the for loop here as we saw in the second method so unit i is equal to s1 dot length of minus 1 and then i is greater than or equal to 0 i minus minus so it is going to come in reverse so we are going to take this out and then put that in the ending so let us compile this also now i give radar so radar is valid let me check with some other word which is not a palindrome key is not a palindrome let us do a program to reverse a sentence now reversing word and reversing sentence is different if we reverse the sentence using the same technique what it is going to happen so every alphabet in a sentence will change to its opposite position every word will get reversed so to straighten the word we will use this in the beginning so it will not reverse the word so i cut this here and then put it here plus s2 so now we should identify a word so when it can identify as a word means if there is space with that word so from the ending it starts coming backwards when it finds the space and then let us stop and print the word and then again let us go to the next word and then when it comes to the first word there will not be a space given by the user for that we supposed to add one space with the input so we will do it here yes 1 is equal to c single space plus s1 so the new string s1 is with the space in the beginning so here we will have the condition s1 dot character at i is equal to equal to space so this is a character data type here so we will put it in single quotation to check so we give one space then what it will do it will print the word and then s2 becomes again nothing so that is for a new word again so s2 is equal to so these are remaining codes which we used for palindrome just i delete this let us compile this no syntax error so i give this is a book okay we have given print line so it has printed in next next line let us give here print so you can see here it is reversed dear students to print number of digits present before and after the decimal point of a double type number first i will explain the idea of finding digits before and after decimal point of a number so here the number is given as double type for example i have 345.6721 so here the output should be the number of digits available before the decimal point so that is 3 here and then after the decimal point that is 4 in this example for this we take a double type number and then what we do is convert into a string type we already learnt about wrapper class using wrapper class we will convert this double type into string type so if we write this string function this double type number will get converted into string type now we can easily find how many characters are there before this decimal point using the index value and also we can find the number of characters after this decimal point this number i will take it as an example number one so here we have the index for this string now see number of digits before decimal point after decimal point index always start from zero so 0 1 2 2 will be the index number of ones place so later that you will get a dot that is a decimal point as it is starting from 0 if we take the index of this point that is dot then we will have the number of digits before the decimal point so we can extract the index of dot there but if we want to know the number of digits after this decimal point then what we can do total number of digits present here minus digits present before the decimal point otherwise we can do last index minus index of point instead of this we say length minus 1 minus index of point so that we can get the result so that is 8 minus 1 that is the 7 is the last index here then 7 minus index of this dot is 3 so 7 minus 3 becomes 4 c 1 2 3 4 digits are there so here in this first example i have index of dot is three so three characters are three digits are present before the decimal point and for number of digits after the decimal point we take the total length of this that is 8 minus 1 is the last index that is 7 minus the index of this dot that is 3 so we get 4 see there there are 4 decimal places let us check with another example here i have another number so index of this dot is 5 so 1 2 3 4 5 numbers are present there before the decimal point and then here there are three digits after the point so what we do the total length of this is 9 minus 1 is the last index we get 9 minus 1 that is 8 minus index of dot is 5 so we get 3 as the answer so this is the logic of extracting the number of digits present before and after the decimal point this is a good example program how to convert from double type to a string type let us go to the program now i will have double type input double d is equal to double dot parse double of br dot read line off as we are having io dot star here we will have throws io exception so whatever we have taken the number as d we will convert into string so we will give string let us have s is equal to the wrapper class double dot 2 string of the d which we have used to store the value of digits before the decimal point i will have integer variable called b in b that is before s dot index of the character dot to store after the decimal point i have in a is equal to last index we are arriving by 1 lesser than the length so s dot length of minus 1 minus b let us print both the results so before i have b plus digits every single so digit i put s in the bracket digits before the decimal point compile this i give some number so three digits before the decimal point four digits after the decimal point count the number of words in a sentence and print the initial of the name to take the input let us import the package we are going to write the program to count the number of words in the sentence so class rows io exception let us create the variables we need string variable str to take the sentence from the user then to count we need into count when we need to count we have to give the initial value as 0 so that counting always starts from 0 let us create the object for the buffer reader class instead of creating object for the input stream reader and then buffer reader object we can also create in this way so that is buffer reader br is equal to new buffered reader of new input stream feeder off then system dot in so again we close this so we can do it in two statement differently otherwise we can also do using this type of statement we have given a space here that should not be there so let us prompt the user to give the input sentence so we can give print instead of print line so now assigning the input str is equal to vr dot you know that each word is separated by the space so after a word there will be a space if we count the space then this word is being counted same like that we will keep on counting the number of space but at last when we see there won't be a space given by the user so at that time what we do we add one more space after getting the input from the user but by mistake user also gives the space after the full stop then what we can do we can trim it using trim function so that the extra spaces before and after the sentence will get trimmed so let us give here dot trim off now what we do str is equal to str plus one space we add now we go to the condition inside the form we will create the for loop for in i is equal to 0 i is lesser than str dot length of i plus plus so if character at that is str dot str dot character at i is equal to equal to so character type should be given in c single quotation so we check for one single space then what we do we increase the count count plus plus we increase by one so until the last index it will keep on doing after it becomes false it will come out of the for loop so we will print the number of count here plus count in case if we give this inside this for loop then it will print every time it counts we don't need that let us compile this no syntax error java is very interesting so we have four words here so number of words in a sentence four let us create another class initials i will copy the codes from the previous one so this is program to print the initials of the given name so here i change the class name we are not going to count anything here so let me delete this and then enter a name with first middle and last name so we don't need to trim here so here we want to print the first character of every name given so first character means we can count the space after that the next character we can take but when the user gives the input there will not be space in the beginning what we do here is going to add the space before the string so let us delete this and then i am going to add here now the character after the space we are going to extract and then take it as a new word so for the new word i give a new variable string variable st r1 so initially it should be without any value so now i give the for loop i is lesser than s t r dot length of the i plus plus so i am going to give the condition if str dot character at i is equal to equal to i am checking for space so one single quote then one space i have given so if it is so then i am going to add to the next letter to the string one str1 is equal to str dot character at i plus 1 so i is space the plus one is the next character so it will extract the next character here this is added with the new string str1 now let us print the new string initials of given name you can say of given name plus str1 so let us close the method and close the class compile this no syntax error so i give kamshi krishna see vkg it has come we have not given any extra character that so we can assign here the full stop there so we can add with this plus a dot otherwise one space so compile this right computer let us understand why we need array think about we need to store 50 students details that is 50 students name their subject marks for 10 subjects and we are also storing the average of each student how many variables we require to store names 50 variables we require to store 10 subject marks of 50 students then 10 into 50 we require 500 variables to store average again we need 50 variables so totally we may require 600 variables can you remember all these variables can you handle these variables easily no so we use arrays if we use arrays just we need to have three array variables one is for storing the names second is to the marks of the subjects and then third is for to store average let us understand more how it is going to store these variables think about sets are matrix in mathematics same like that when i declare an array i store same type of elements here i have names as array so i will be storing all the string variables just for example name one name to up to name 10 i can have one more array to store the marks of the students here i store 10 marks of a student in a first row and then the second student's mark will be in the second row like that i keep on storing all the 10 students marks of 10 subjects each so now you can imagine this as matrices mathematics to store the average i have one more array here i store average of these first row as first element of this array and then the second rows average i store here like that again i have 10 elements of the array say here the first array is having only single row so then this is called single dimensional array here i have 10 rows and 10 columns this is called double dimensional array again to store average i have single dimensional array this is to just visualize about how array values are stored in the array let us learn how to create an array we have two steps to declare an array first we give data type and the name of the array and then array symbol we terminate if it is an ordinary variable then we won't have this array symbol this is only the difference to declare an array and ordinary variable this will create only array to allocate the memory for that array again we have the next step that is name of the array whatever we have given here will be given equal to new keyword is used one space and then the data type already which we have done here same data type we will have and then the size of the array is given the size of the array means how many elements we are going to store in that particular array that is also called length of that array here is an example to store temperature i create an array that is integer type so in one space and then temp then array symbol i give i terminate this this is the first step the next step i have temp is equal to new space integer type that is in and then the size is given inside the array symbol that is 20. so here now i will have array to store 20 elements these two steps can be combined in a single statement like this that is data type space name of the array then open the square bracket close the square bracket is equal to new data type again the size or i also can have data type the array symbol can be here and then again array name equal to new data type of size whether the array symbol is here or here that doesn't make any difference both are right so here in a single line i have int space temp array symbol is equal to new int of 20 total number of elements an array can store is called length of that array so this is the length of that array now let us understand how we can store the values in that array if we have integer type of array of size 10 array allows you to store 10 integer values continuously so every block is addressed with unique address this addresses index number so to refer each block of memory index number is used here i have an integer array which can store 10 integer value here each block is allocated with size of integer variable so that is 4 bytes for integer so each block is given with a unique address that is index number so the index number always will start from zero first block will have index number as zero then second block will have index number as one third will have two so on like that we will have up to 9 so if we have an array of 10 in size the last index number will be 9 so that is one lesser than the array length now how do we store the value in that particular block to store the value in first block that is which is having index number as 0 we will indicate inside this symbol so that means address of that index for example we have arr of 0 so that is the index number and then i have given 84s value so 84 goes and stores in this place same like that if i give a r of 1 and then 70 is the value 70 will get stored like this so all other values i just stored so at last the 9th index that is 10th memory allocation 62 is been stored even this address so that is index number can also be used to retrieve the data from that block so remember index number always starts from zero index number is also called subscript so the index number what we have here is also called subscript then the last index is always one lesser than the size of the array that is last index is equal to length minus 1 let us learn how to calculate memory size of an array so total allocated memory of an array depends on its data type and number of elements present in it we know the data types memory size byte will have 1 byte short 2 byte integer will have 4 long 8 bytes float 4 bytes double 8 bytes and then character 2 bits if we have an array of integer the size of that array is 5 then how do we calculate the memory of an array number of elements that is 5 into size in bytes so that is 4 here so 5 into 4 is equal to 20 bytes let us see another example here we have character array which is having 8 elements so 8 into 2 is equal to 16 bytes is the memory size of that array let us learn how to create array in a program creating array as a class name class creating array so now let me declare an array of integer type in let me have the name of the array is height so i am going to store the height of students is equal to so after height we supposed to give array symbol open square bracket close the square bracket and then we should give new keyword and then again the data type that is int of the size we are going to say here is as 20 now array is declared how to store the value in that array we can have name of the array inside the square bracket we will give 0 as first index so that is the address of that array is equal to i am storing 156 same like that index 1 is equal to 165 now third element 2 is equal to 1 43 right off so here fourth element index will be 3 is equal to 172 then fifth element that is address will be 4 that is index number is 4 is equal to 180 so let us have just 5 instead of 20 let us reduce this so i have 5 so i have store all the values let us print and check how to print this we can print it in single statement so we will be giving the address of the element which is like this i'll copy this paste it here so plus i give one space otherwise we won't be able to identify i give space or even we can give comma let me give comma so like this i will give all five elements to print so here it is one then here it is 2 this is 3 here 4. so we have given all the address to print let us compile this no syntax error so we will run and check whether it is printing or not so you can say it is printed so here instead of giving like this one by one all the elements in different statement to store we can also use a for loop for this see let us delete all this i will have far so the index always starts from 0 so int i is equal to 0 iq then i is lesser than or equal to 4 because the index is 4 at last otherwise just directly we can give lesser than 5 that is lesser than the length of the turret and then terminate i plus plus so now i am going to take input for this from the user so i will have here import java.util.scanner so i will create an object for that obj is equal to new scanner of system dot in now we will prompt the user five integer elements so this is going to be given only once so it is not inside the for loop this scanner class i have already taught you in the uh third video tutorial so you can watch and learn if you are not familiar with this so here you open and close the bracket inside i write name of the array is here height height off see instead of giving the index 1 2 3 like that i am going to give i so it starts from 0 and then up to 4 is equal to the object name obj dot next in top so it will store the values given by the user in each block now let us compile this no syntax error so directly we can give the values now enter the integer elements now so i just give 150 145 175 185 165 so you can see that all these are printed and then again when we give the output this also can be done using for loop it will be easy instead of giving this many times so what i do here again i create a for loop into i is equal to 0 again we can give i because scope of this i get over when this for get closed is equal to i is lesser than 5. i plus plus so what i do here i will just print only this much and then here i say i if this is a single statement even we don't need to open and close the bracket so let us compile this nose inductor so enter the elements so you can see that again it has been printed we have given print line so it is printed in next next line if we give here print and then it will print in the same line so you can see that it is given if we take user input like that then we need to create and declare array like this instead of this if it is a fixed number of elements and the elements are also given inside the program we have another way to give so let us cancel which are all are not needed delete this and then we are not taking any of this even this i am not going to have only printing statement i have so how we can give here we can have flower bracket inside this we can give the details of array for example 1 45 comma 1 49 1 five four one four nine one more comma 155 this is directly initializing the array so again if we need to print we can give it in a for loop and then we can print compile this no syntax error so you can say this it is printed let us revise definition array is a named collection of similar elements that holds a fixed number of elements so we cannot change the length of the array once if it is declared and then all the elements will be the same data type we cannot have different data type in a single array total number of elements an array can store is called the length of that array every block of memory within the array has unique address which is called index number we can use index number to assign values to particular block of memory and also we can retrieve the values for that particular block of memory once an array is declared it can be initialized anytime by assigning the value to that array index number always starts from zero so we know length of the array is one greater than the last index otherwise last index is one lesser than the length index number is also called subscripts the total allocated memory of an array depends on its data type and the number of elements present in it we will learn passing array as an argument getting length of an array and out of bounds exception in array i will demonstrate passing array as an argument through a program passing ariu class passing array i create a method static void passing as array name and then i will give the integer array to pass so in name of the array i give as a and array symbol here i am not supposed to give size of the array because when it receives array elements automatically it will assign the length of the array we can give the array values in the arguments itself so after giving the values let us sum up all the values in that array so i need a variable to sum in sum is equal to 0 as initial value so we need to take each and every element from that array so what we can do we can give a for loop for from 0th index whatever is stored up to the last index we have to take all the elements to sum so in i is equal to 0 i assume we are going to give 5 elements i is lesser than 5 so that is 0 1 2 3 and 4 i plus plus get the sum i give sum is equal to sum plus a of i i terminate this so it will take element from zeroth element to the last element that is fourth element then i will print the sum after the loop plus sum let me compile this no syntax error when i give the value for that array i must give inside the flower bracket so as i assigned five elements so i will give one two three four five each separated with commas okay here i have given loop variable will go up to 5 iterations but in case user gives less or more what happens let us see again let us run this now i give just three elements one two three okay so you can see it has come back to the program and it shows java.lang.arrayindex out of bounds exception this error happens when the loop tries to get the element which is not available in the array so that means we have given only three elements that is 0 1 and 2 when it is trying to get the third element from the array it is not available so automatically it shows out of bounds exception so we should match number of iterations in the loop to the last index of that array in this case we were not knowing the length of that array so at that time we can take the length of array by using length function to find the length of array we write name of the array dot length and we terminate for example if we have array called arr then we initialize the value like this to find the length of this we can write a rr dot length and then we terminate if we wanted to store this length in a variable then we can initialize the variable int l is equal to because the length is in integer arr dot length so automatically length of that array will be stored in variable called l here in the example we have eight elements so l will be eight let us go back to the program so now here we can have one more variable called length and then we initialize this as l is equal to a is the name of the array dot l e n g d h then we term it so automatically the length of the array given is stored in l so we will give instead of ah constant here we will give l so now no matter how much every element is given there in the argument it is taken so let us run this now i give six elements one two three four five and six okay so it could show the result now i will demonstrate another program where we take the input from the user for the array and then we pass that array to the other method may be the same method so to take the input i will have import java dot io dot star and then determinate so i will have another method static wide input off as we have imported io class i will give throws io exception so let me declare first a integer array variable i will take it as class variable static int array called b so is equal to new int off may be size 10. now to take input let us create the buffer reader object of new input stream reader of system dot in then we close terminate we will prompt the user system dot out dot twin lineup we say input then integer array element to take 10 elements i will have for loop if i is equal to 0 i is lesser than we can give lesser than 10 otherwise lesser than b dot length then i plus plus now even if we change the value of this also not a problem so i give now 4 so again we don't need to change here as lesser than 400 so better always we will say the length here in the for loop so let us assign the value b of i is equal to integer dot parse into of br dot read lineup so now this method takes the elements for the array called b now we will pass this value to this method how we will write the main method public static void main of string of arguments then we will say throws io exception so we have to create object for that class so class name passing array and then object name object obj is equal to new pa ssing passing array off so now i will call the methods first i will call the method which is input method so that we will take the input for that array b so i will write obj dot input off now i will call passing method so obj dot passing off see here i have taken values for array b i will pass this value to the method here so i write here b then terminate let us again change this to 10 itself now compile this no syntax error we have to run the main method so it is asking 10 inputs 1 2 3 4 5 6 7 8 9 and then 10 we already know it will be 55 so let us check whether it is right or wrong so sum of all the elements given array is 55 to print only even elements from an array to print sum of even elements and odd elements to print the count of even and odd elements to print smallest number and largest number from an array let us create a program print even import java dot io dot star class print even let me declare an array integer type name of the array arr of is equal to new in tough i will give size as 10. prompt the user to take 10 elements i will give a for loop in i is equal to 0 i is lesser than we can say a r r dot length then i plus plus so arr of i is equal to integer dot pass into br dot we line up then we terminate this so now we have taken input for that array so that is 10 elements we have taken now let us give a line outside the loop saying following are even elements so system dot outdoor print lineup so now we have to check the elements one by one whether the element is even or not to access each element again we will give a for loop let us copy the same for loop we already know how to find even numbers if the number is divisible by 2 that is without reminder then we say the number is even number so to get the remainder we will use percentage symbol that is modulus let us give that in the condition arr of i modulus 2 equal to equal to 0 so it divides by 2 and gets the remainder if remainder is 0 then what we will do we will print the element so system dot out dot print line of we say af sorry a rrf i think if we need the elements to be printed in the same line we can cancel this and then we can add one comma or space with this so i will add one space here so let us compile this no syntax error so enter 10 elements 45 3 7 84 96 12 15 17 21 18 so we can see here only even numbers are printed now program 2 get the sum of even number and sum of odd number so i will give some even odd as a class name so before this i will import java.io dot star rest of the code i will copy from the previous program so even we can copy from here to here we don't need this line let us delete this so after entering all the numbers we will again have a far low if it is even number we will add it to even sum so for that we need a variable even for odd sum we need a variable so let us give int sum of e1 equal to zero initially then sum of odd also zero initially now we have already checked whether it is even or not if it is even we will add with this sum of even so se equal to se plus arr of i otherwise we can also give plus c equal to here plus equal to and then else otherwise sum of odd plus equal to arr of i so then we close this for see if it is true that is even number then it will add with the sum of even otherwise it should be odd number automatically it will add with this variable so now we have to print the sum of e1 and sum of r sum of even numbers from given array plus s e so here odd number so this will be s o now we will close the method and then class just compile this no syntax error to check the right result i will give the sequence of number just i will give one two three only one two three four five six seven eight nine and ten so even numbers total is 30 and odd numbers total is 25 you can check next we will learn counting number of even elements and number of odd elements so count even odd iq i will copy whole program from the previous program here instead of taking the sum of even numbers and sum of odd numbers just we are going to count so let us change the variable name count even number then count odd number so initially the count is 0 for both so if this is true then what we will do we will just increase the count of even number c e plus plus else what we will do we will increase the count of odd number co plus plus so now we are going to print number of even numbers of given array that is co sorry ce here number of odd numbers of given array that is ceo let us change the class name and give count compile this no syntax editor let us run this any number let us give 11 15 18 20 48 65 71 0 3 minus 11 minus 32 let us count 1 2 3 4 5 6 are odd numbers so remaining 4 will be even numbers next program to find the smallest and largest element of that array i will copy again the code from the previous one i will copy until this i will change the class name largest smallest let us have double type of array so i will change this double again here also double so instead of counting here i will have the smallest element and the largest element so again i will change even the data type of the smallest also will be smallest or largest also will be double type itself so double instead of ce largest and then here smallest so we cannot initiate as zero in case the user gives negative numbers so it cannot be zero so i will take a element from array itself so let us take just first element itself this arr of 0 that is index same like that smallest also let us take first elements itself arr of 0. now i will give the condition to find the largest element of that array it takes all the element of that array that is a r r of i and then if it is greater than largest sometimes it is also possible to be same number so we will give greater than or equal to also so if this is true i will assign the element to the variable largest so largest is equal to arr of i now i close the for loop so now i will search for smallest one so again we will have the same loop now we are going to find the smallest one so we will have lesser than or equal to smallest so if it is true the element will go to smallest now let us print the largest and smallest elements so i copy this largest element is plus largest so here smallest element is smallest let us close the method close the class compile this uh we have done a mistake here while typing the variable it should be capital l here also should be capital n let us check here we have given capital so here also should be capital so we should be very careful while writing this then okay so here we have given double but in the previous program it was integer so let us change this double here also double any other error let us compile and check no syntax error now so enter 10 elements 31.01 minus 63.12 45 39.47 zero zero two eighty five point zero zero four five eleven point one one one one one thirty seven 48.23 0.4 so we can see here the largest number which i have given at the last the least number is minus 63.12 so it is right searching elements in an array let us know what is search the process of checking a particular value in an array refers to such if the value is present in the array then index number of that element will be displayed for example we have array called a and then these are the elements if we search for value 7 and then it is available in 0 1 2 3 4 and fifth index number so we will print it is available at index number five if we see search techniques we have commonly used two techniques that is linear search and binary search linear search each element of the array is compared one by one with the given value to be searched this will be done until the value is found otherwise this will continue until the last index this technique is also called sequential search technique let us learn the linear search technique before starting the search we will initialize a variable as false that is boolean type variable so boolean flag i have given the variable name here and then i initialized as false flag is the common variable name which we use in the search technique for example if i have an array like this for your better understanding i have also displayed index number here let us imagine that we are searching for value 54 here linear search will search by comparing the element of first index to the last index so value in index number 0 will be compared with the given value then it is false here it will go to the next index number that is 1 and then it is comparing again it is false so it will keep on comparing like this it becomes false third one it is false fourth one again it will be false fifth one also it is false now sixth one it is true when the search is successful then we print the index number of the element which is available and then we assign that flag as true when search is successful and then we don't need to check for the rest of the elements so what we do we break using the break statement if no elements are matched with the given value value of flag will be false it never get changed into true so if it is false then we print element not found this is how linear search technique works let us create a program i will demonstrate let us create a class before that i will keep ready copying the codes from the previous program so i copied the codes until we take the input i'll change the class name here then we are taking the double type of array okay let it be as double type then we don't need to have this variable instead of that we need a boolean variable which is initialized as false so boolean flag is equal to false after taking the input we have to start searching for the element before that we have to get the element which we are searching for so let us prompt the user to give the input for the element which we are searching so let me have only print elements are double type so we give double s is the variable we store the value to be searched is equal to double dot parse double of br dot read line off when we terminate now we give the photo in i is equal to 0 i is lesser than the length of the array so we can give a r dot length i plus plus so from the index number 0 until the last index it will keep on searching so we give the condition here if the element that is arr of i is equal to equal to the value which we are searching for that is yes so it will search one by one until it gets if this is true we will print system dot out dot print line of element found at index equal to plus index will be i then turn the flag as true flag is equal to true then we will break it so we don't need to search anymore this is when it finds the element which we are searching for if it is not finding it will keep on searching until the end but still the flag will remain false itself so after completing the search we will say if it is not found if flag is equal to equal to false if it remains same then we say system dot out dot printline of element not found then we will close the method close the class will compile this no syntax error value 10 values so let me give the value which is available here 5457.65 let me check before 0 1 2 3 4 5 6 7 so 7th is the index number of this number so i give enter so element found at index 7 let me run once again so i am searching which is not available element not form if we are having string elements so let us change this and learn so i am having string type of array so array length i give just 5. and then here when we check this we will not have equal to equal to instead of that we will check dot equals dot equals of s if we need to ignore the case we can give equals ignore case of and then here we will not have all this so we have only br dot read line up to take the input and also searching element this is string so let us compile this no syntax error so let us run this so i will be giving keyboard mouse pen drive laptop and i give printer enter the value to be searched i give mouse so element found at index 1 0 1 binary searching array binary search works only for sorted array it may be sorted by ascending order or descending order in this type of search search value is compared with middle element of array if the value matches with the middle element then search gets completed if the match is not found at the middle element again it will search with middle element of first half otherwise second half it depends on the searching value or sorting of the array for example if the value being searched is lesser than the middle element then it gets performed only in the first half this is in the ascending order array if the value being searched is greater then it will perform in the second half of the array this process will keep on repeating until the element is found are until search get completed if element is not found then search will get completed when first index number is equal to the last index number we will understand this by few examples later once again we will come to this and then we will read so i have array integer array having the values like this let us search for element 23 so for your reference i have given index numbers starts from 0 and the last index number here is 11. now it should find the middle index number and then for that whichever element is there it will compare with that element how the middle element is found is like mathematics we will take the first index and the last index we add both and divide by 2 automatically we will get the mean so that is the middle index we will get for your better understanding i have matched first index last index even the middle index with the colors please follow the colors also so that it will be easy for you to understand for the first time the search will be in the whole array so it takes the first index as 0 last index as 11 here and then we will add first index and last index divided by 2 so we will be getting 5.5 index number cannot be 5.5 so we leave the decimal part and then take only the integer part here in the program also it will do automatically implicit conversion that is integer divided by integer it gives only the integer value as quotient now in the middle element 37 is there so we are searching for 23 it is lesser than 37 so when it is sorted array there is no meaning in searching this second half because what we are searching will be in the first half only because search element is lesser than the middle element so it will not search in the second half now the middle element is already compared so remaining segment that is index from 0 to 4 only we have to search so here first index remains as 0 itself but the last index instead of 11 it should be 4. we already found middle element as 5 so what we do middle element minus 1 we will give the next last index so in round 2 we will have first index as 0 last index is 4 so 0 plus 4 divided by 2 we will get 2 as the result so in 2 23 is available which is equal to which we are searching so what happens search becomes successful and then it will print the index number of that element let us see next example i have a new array here after removing the last element of the previous array so let us search for element 51 i have the index number from 1 to 10 so at round 1 the first index number will be 0 and the last index number will be 10. so middle element we find 0 plus 10 divided by 2 we get exact 5 at index number 5 i have 37 so 51 is greater than 37 so no meaning in the searching first half so automatically it will search in the second half first index of the new segment is arrived by adding one with the middle element so it becomes 6 last index remains unchanged so now we get 6 plus 10 divided by 2 that is 16 divided by 2 we get 8 as middle element of this segment at index 8 54 is available 51 is lesser than 54 so it is not necessary to search the second half again now the first index remains same the last index will be middle index minus 1 that is 8 minus 1 so now for round 3 the new value of middle index will be 6 plus 7 divided by 2 that is 6.5 here again we will take only the integer part that is 6x index so at index 6 45 is available so 51 is greater than 45 first half we don't need to search to get the first index we add middle index plus 1 we get 7. the last index is also 7 see now first index is also say 7 last index is also 7 if the element is not found at this index then search also will stop let us check 7 plus 7 divided by 2 will be 7 itself so we get 51 here 51 which is we are looking for it becomes successful if some other element is at that place and then it becomes unsuccessful as first element and last element both are same index let us go to one more example index number of this array is 0 to 11 so let me search for element 11 at round 1 first index is 0 and last index is 11 so we will have middle element as 0 plus 11 by 2 as 5.5 only integer part of this we will take so we will take 5 at 5 33 is the value available 11 is lesser than 33 so greater than the middle element index numbers we don't need to search the first index of new segment of array will be 0 the last index will be middle index minus 1 that is 4 so at round 2 0 plus 4 divided by 2 is equal to 2 element at index number 2 is 23 which is again lesser than 11 so the first half will be searched second off we don't need to search first index remains the same last index is middle index minus 1 so that becomes 1 so at round 3 0 plus 1 divided by 2 it will be 0.5 so we take only 0 at 0 11 is available which is equal to the element which we are searching for so search becomes successful i will give you the last example where the search element is not available so example 4 i am searching for 53 which is not available in this article so here the first index is 0 last index is 10 so we get 5 s answer at 5 we have 37 53 is greater than 37 so it will not search in the first half first element becomes middle element plus 1 last index remains same now at round 2 6 plus 10 by 2 it becomes 8 again at index 8 54 is available 53 is lesser than 54 so the second half will not get searched now the first index remains same last index is middle index minus 1 so that is 7. so at round 3 6 plus 7 divided by 2 it is 6.5 so it will take only integer that is 6 at 6 45 is available 45 is lesser than 53 so we don't need to search in the first half so index number of first element will be middle index plus 1 that is 6 plus 1 is equal to 7 and the last index also 7 so at round 4 7 plus 7 divided by 2 is equal to 7 so at index 7 51 is available again which is not correct being first index and last index are same search stops then it becomes unsuccessful students when we do manually we will do like this but when we do a program all this round 1 round 2 round 3 round four all will be done in the loop so it will be very easy to write the program just we need to understand how we change the first induction last index and which segment to be searched let us do a program as usual i will copy codes from the previous program until we take the input i'll create a new class called binary search i change the name of the class here we need three variables instead of this we will have first index is zero as default and then last index in the beginning it will be one lesser than the length of array that is arr dot length minus 1 and also we need middle index that is m here we take the input after taking the input user will also give the element to be searched so for that then i assign the value hint s is equal to integer dot parse into vr dot d lineup now we need a loop to perform but we don't know the exact number of iterations it is going to happen so we cannot use for loop instead of that we will use while loop what condition here we can give the first index always will be lesser than last index and it will search until first index becomes last index that is both the index becomes same so we will give the condition here first index is lesser than or equal to last index first we need to find the middle index so middle index is equal to first index plus last index divided by 2 do not forget to put this first index plus last index inside the bracket otherwise it will give other meaning that is l divided by 2 and then it will add with the first index then it will not work after finding the middle element we will compare element of that index for that we will give if condition if so which we are searching is s equal to equal to arr of that middle index m so if this is true we can print the index number where it is available so system dot out dot print line of element is available at index that is m is the index so m we will print and then we should have boolean type variable so we have not given that we will give here boolean flag is equal to false as default value so now it will become true flag is equal to true and then we can break the loop else if condition if search is greater than arr of m then what we do we will not search in the first part of that array so first index will become f is equal to middle index plus 1 else automatically it will be s will be lesser than a or r of m so now what we do last index will be middle index minus 1 so this will keep on repeating until f is equal to l so if it is false then it comes out of the loop now we can print if flag is equal to equal to false otherwise this we can also write flag is not equal to false so not we can write here then we will print system dot out dot printline of element not form so now we will close the method close the class let us compile no syntax error we will run this i will give 1 6 9 23 it should be sorted so we should give the greatest value only 67 86 90 12 1 56 178 so which we are looking for maybe six so element is available at index 1. let us run once again 1 5 9 23 56 4 78 5 98 6 34 7 100 841 so let us search for 841 so element is available at index nine so that is one lesser than the length last index so in case it is in descending order how we can do it instead of s is greater than a or r of m we will just change into lesser than a r of m so automatically the whole process reverses let us check no syntax error i give 987 eight seven six six five four five four three four three two two one zero one one two one one zero or not eight ninety five so let us search for four thirty two so it is at index 4 0 1 2 3 4. let us run once again 10 9 8 7 5 3 1 minus 10 minus 12 minus 15 so let me check minus 12 it is available at index 8. so students it is clear now let us learn how to search in string type of array so i will change the array type so let me change this as six then when we take the input we will have only br dot read line up and then even this will be string type then taking the input will be br dot lead line off here in the condition instead of equal to equal to we will use dot compare to which gives the integer type output checks lexicographically string functions i have already explained in the previous lessons you can check there s dot compare to then this will be inside the bracket which is equal to equal to zero here again we will have the same thing when it is greater than 0 greater than 0 is for ascending order of that array that is ascii value of first letter of the string which we are comparing is greater than the middle element so we will get the positive value which is greater than 0 so at that time we will not compare the first half of the array so it becomes first index will be middle index plus one in case it is descending order array then we will change the symbol to lesser than 0 let us compile this let me give anant is joshua so we will search for issuer it is available at index 4 so 0 1 2 3 and 4 5 is the last index in case it is in descending order we change this into lesser than symbol compile i give windows unix office microsoft excel dos let me check for unix so element is available at index one here we have given ten elements it remained we didn't change at all so it was six right we can give six i should give in the descending order so let me give hp logitech lenova epson del acer let me check for del so element is available at index 4 it is right students let us revise the points once again thank you students