hello everyone today i have a topic to discuss is the variable is a container of data in python it is confusing right if you already learn other languages if a is equal to 1 then a is a variable which reserves some space to store the value the space is the size of the data type which a is declared so now one is stored in that particular space similarly if i have b is equal to 5 and then b is a space reserved where 5 is been stored so now a and b both are space allocated to store the values if i change the value of b as 1 and then 5 is overwritten as 1. my question is is this in python also the answer is no in python variable is address of memory location variables of python are not storage containers like other languages they refer to the memory location of values or objects for example here the values are there in a memory if i say a is equal to 1 this will have some reference to refer one where it is stored that references here this reference will change from one computer to other computer from one operating system to other operating system and then one session to even other session it will be changing it is not always a constant so now this has been referred to a if i say b is equal to 5 the address of 5 is been referred to b if i change b as 1 then the address of 1 is being only referred by the variable b so again again the value is not been stored only the address of the value is been referred by the variables in python come let us check with the python ideally to get the memory address of the variable which it is referencing we use id off that means if i am giving 1 here see this is the reference given for 1 if i am storing this in x so x is equal to 1 so if i am taking id of x it should be similar so you can see both are same now if i am changing the value for x i am telling x is equal to 20 then if i am taking id of x now see the reference has been changed again we will confirm whether the 20 has the same reference so id of 20 see it is same now i give y also as 20 now id of y also should be the same see you can see it is same now if i say x is equal to equal to y then it is checking whether both are equal or not so then it gives true one thing i would like to point out here which is very much important if we are having higher precision numbers for example i give here m is equal to 0.1 plus 0.2 and 0.3 then what should be the answer it should be 0.6 but here if we check m the answer is very slightly changed 15 digits precisions are allowed in python in float data type we know anything is to be stored it is stored in the binary form so here the approximation takes place which gives us unexpected result sometimes so we should be very careful that when we are having the floating point expressions to check with relational operator it may fail so please avoid it m we know the value we got here if i am comparing m is equal to 0.6 then answer is going to be false but actually we know it is right i would like to recall now when we discussed about identity operators that is ease and e is not i said if both the operands are pointing the same object to the same memory location then it will be returning true otherwise it will be returning false so same example we will see m is 0.6 say it is false we will also check one string object i have s1 is equal to note iq and then i also give s2 also as note now i am checking s1 is s2 so it is true now i have s3 is equal to notebook i will also take s4 as same notebook only now i am checking s3 is s4 can you see false there that means both the variables are not pointing to the same address of that memory so let us check the id of both id of s3 and then id of s4 see both are not same so if memory locations are same then it is going to return as true i hope you are very clear now whenever the value of a variable is been changed only the memory address get changed see few examples i have shown you can also practice more and clarify yourself if you are having any doubt on this topic you can write it on the comment box and then i will surely reply to it thank you