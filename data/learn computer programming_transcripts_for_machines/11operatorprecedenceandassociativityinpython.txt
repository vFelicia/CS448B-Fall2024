hello everyone we have already learnt about operators in this class we are going to learn about operators precedence this has been followed when an expression is evaluated let me explain first with one example consider the following values assigned to the variables a is equal to 1 b is equal to 2 c and d both are having 10 s value and then e as 5. just consider the following expression which you would like to evaluate in the order it appears here then the result you expect to be calculated as a plus b that is 1 plus 2 as 3 and then this result is being multiplied with c which is 10 so you will be getting 30 as the result this result is being added again with value d that is 10 it becomes 40. so now this 40 to be divided by each value that is 5 and then totally you get 8.0 as the answer at last but when you are writing this expression the computer calculates in different way and then it produces 23 as result it will be evaluating first b into c that is 2 into 10 as 20 and then d divided by e that is 10 divided by 5 as 2 here 1 plus 20 21 and then 21 plus 2 at last it gets 23.0 in both the way step by step calculations are correct but the order of operation which has taken place is different that is the reason why the answers are different here as you learned in mathematics board mass is the rule which determines which operation to be taken in prior similarly in computer language we have operator precedence if you expect that 8 to be given as the answer and then this expression would have been written using the brackets the innermost values in the brackets are done first as a plus b and then the next outer one into c and the next outer one as plus d and then at last the answer is divided by e and then which produces 8.0 as the result so when there are different operators present in the expression the order of expression of operation at the time of resolving the expression is called operator precedence sometimes different operators may also contain the same order of precedence operator associativity is used to determine the priority of execution this can be from left to right or right to lift all the operators have lift to right except exponentiation you will understand better when i demonstrate it now let us see the operator precedence of python the topmost is the highest prioritized operator and the lower one is below it the highest priority is given to parenthesis in the expression that means grouping so whatever is inside the parenthesis will be evaluated giving top most priority next function called slicing and then subscription these three you have not learned still but just remember the order of the precedence here next exponentiation next we are having bitwise not and then unary plus and unary minus see here two operators are at the same level so in this case the associativity will determine whether from left to right or right to left except exponentiation everything will be from left to right so this is from left to right similarly we are having multiplication division floor division and then modulus that is remainder all these operators at the same level so if many are in the expression it will be evaluated from left to right next addition and subtraction then bitwise shift operators bitwise and bitwise x are bitwise are and then membership operators identity operators comparison operators so all these are having same precedence next boolean not boolean and boolean are let us check some expressions using python i have first example as 10 plus 6 divided by 2. see there are two operators division operator is having higher priority so 6 divided by 2 it will be 3.0 10 plus 3.0 13.0 next i have 5 plus 4 into 3 plus 6 minus 3 see here multiplication will have higher order precedence so 4 into 3 12 is done first and then from left to right it will be coming 5 plus 12 will be 17 plus 6 is 23 minus 3 is 20. next i have 2 into 8 4 division by 3 so here both are having same operator precedence so it will be coming from left to right 2 8 are 16 divided by 3 5 will be answer next example for exponentiation 2 to the power 2 to the power 3 it will be done from right to left that means 2 to the power 3 will be done first 2 into 2 into 2 is 8 then 2 to the power 8 that means 256 will be the answer in other words if we would have done 2 into 2 that means 2 to the power 2 4 4 to the power 3 means it would have been 64. that is not the answer here so when it is an exponentiation it will be from right to left next example 2 plus 5 greater than 4 into 2 so here higher priority is 4 into 2 it is done first 8 and then 2 plus 5 7 7 is greater than 8 will be false next i have 2 plus 1 r 4 and 0 see 2 plus 1 is having the higher priority so 3 are 4 and 0. next and will be done 4 and 0 will return 0 so 3 or 0 now will be 3 now i have 20 is greater than 100 and see something i have given it will be giving false as the first statement before and there is a false statement if it is false it is not going to check the second expression at all now i give 20 is lesser than 50 this is true and i am giving now which is not correct syntax see now you can see the syntax error shown when the first expression is right and then only it checks the next expression with the end next i have not x and 6 it will be giving false not x will be calculated first x is something which is in the code that means some value so not x is false so false and 6 will be false you can create plenty of examples like this and then calculate the output yourself and also confirm using the python keep watching my channel thank you