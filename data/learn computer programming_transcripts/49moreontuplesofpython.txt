00:04 - [Laughter]
00:13 - hello everyone welcome back in this
00:16 - class we are going to
00:18 - see tle
00:20 - operations copying and deleting a tle
00:24 - inputting a tle in tle operations we
00:27 - will see joining
00:31 - replicating relational operators and
00:33 - tles membership
00:36 - operators and then
00:39 - slicing we will learn all these directly
00:42 - from
00:44 - idle let us
00:48 - open let us have a tle called
00:58 - books the we have Library I give Li is
01:01 - equal
01:09 - to now coming to addition
01:14 - operator books plus Li see
01:18 - there this will add all the elements
01:21 - together and then display a new
01:25 - tle there will not be any change in
01:27 - books or Library however
01:30 - the tle cannot be changed as it is
01:33 - immutable so it returns a new tle having
01:37 - all the elements of both the
01:39 - tles now books into two this will be
01:44 - replicating all the elements two
01:49 - times even it may also be two into books
01:53 - R2 into Li IB it replicates two
01:58 - times
02:00 - but we cannot
02:02 - have books into
02:05 - Li this will give you
02:09 - error let me create a tle called ET 2 4
02:13 - 6 8 okay so similar way
02:17 - OT I have
02:20 - here 1 3
02:25 - 57 now if I give e is greater than o
02:30 - see the first element it is going to
02:32 - check it is greater right so it will
02:36 - give
02:38 - true in case now ET one I create with
02:43 - using zero there 0 2 4 6 8 then if I
02:50 - give e 1 is greater
02:53 - than OT it is going to be false as ET is
02:58 - having lesser value value than
03:01 - OT similar way it can also compare the
03:05 - string
03:06 - members but it cannot compare string and
03:09 - values let us check let me have St is
03:14 - equal to I simply give
03:18 - here Python and then here Java
03:22 - okay now let me check e is greater than
03:27 - St it will give you
03:31 - error this is similar like list so if
03:34 - you want to learn elaborately please
03:38 - visit my old video which is list
03:40 - operations and then come back so that
03:42 - you can learn this
03:46 - quickly now membership operator in will
03:49 - check whether the element is there in
03:51 - the tle if is there then it returns true
03:55 - otherwise it will be returning false for
03:58 - example
04:00 - six in E I give so it is there so it
04:04 - will give true similar way 10 in OT is
04:10 - not there it will be giving you
04:13 - false now next coming to slicing slicing
04:16 - is very much similar to string or list
04:19 - again you can go and watch from there to
04:22 - no elaborately otherwise just simply I
04:25 - will give one or two examples here we
04:27 - will be having three arguments here with
04:31 - the slicing slicing is always given in
04:34 - the square bracket beside the name of
04:37 - the tle I have here e in the square
04:41 - bracket I
04:43 - give 2 comma sorry 2 is to we use 2 is
04:48 - to 4 step is not there so we will have 6
04:54 - and 8 there similarly o t in the square
04:59 - bracket I give is to 3 so 0 1 2 it means
05:04 - 1 3 5 will be
05:07 - there copying and deleting a
05:12 - t let me
05:14 - create books is equal
05:20 - to when I want to make a copy of this I
05:24 - can give a new name called B1 is equal
05:28 - to books so this tle is copied also to
05:32 - B1 if I check B1 it is
05:36 - same if we compare the
05:38 - list when we change the element of B1
05:42 - then the elements of books also shows
05:45 - the same it means idea of both the names
05:49 - are same but here being tle is immutable
05:54 - we won't be able to change the elements
05:57 - but however the IDS are same let me
05:59 - check ID of
06:02 - B1 and then ID
06:05 - of
06:07 - books both are same if we don't need any
06:11 - one of this we can also delete
06:15 - it so to delete we use DL space the name
06:21 - of the tle so B1 I give B1 is gone there
06:26 - now it will not be there but now
06:30 - books will be
06:34 - available inputting a
06:37 - tle in the previous classes we have
06:39 - already discussed about eval function we
06:42 - can also use the V Val function to input
06:45 - the
06:46 - tle for example if I need to input a
06:50 - tuple I give T is equal to I
06:55 - write eal of input of
07:00 - I give a message to the user saying
07:04 - input a
07:06 - tle so now the user will be able to give
07:11 - the input and then this stores in
07:15 - tup now let us print and check dup it
07:20 - will be returning the same tle so just
07:23 - execute
07:26 - this I'm giving a tle here one 2
07:30 - 3 so it has return the same thing we can
07:35 - also input without
07:38 - having a tle symbol automatically it
07:41 - will take this as
07:45 - tle the right way to take input from the
07:49 - user for a tle is using a loop accepting
07:52 - all the elements so we cannot add the
07:56 - elements to tle directly so we will
07:58 - create a list and then the list will be
08:01 - converted to a tle so let me have list
08:05 - is equal to Mt and then for I in range
08:10 - so this is number of elements we need
08:12 - from the user it can be a user input as
08:14 - n otherwise we can give here a
08:17 - particular number I give four here right
08:21 - so now I will be taking the element from
08:24 - the user e is equal to maybe int or uh
08:28 - string
08:30 - I take
08:32 - integer once the loop is done then we
08:36 - will
08:38 - be changing the data type that
08:42 - means T is equal
08:45 - to tle of L so L get converted to tle
08:51 - now just we will print the tle which is
08:54 - given there
08:56 - t let us execute this
08:59 - so four inputs it will take I give five
09:03 - 10
09:05 - 20
09:07 - 100 so you could see the
09:11 - tle hope this is very clear to you let
09:15 - us meet in next
09:18 - class thank
09:20 - you