00:02 - welcome back students
00:05 - in this class we are going to learn auto
00:07 - boxing and auto unboxing
00:13 - automatic conversion of a primitive
00:16 - value into an object of the
00:17 - corresponding wrapper class
00:19 - is referred as auto boxing
00:23 - similar way but in opposite conversion
00:27 - of an object into its corresponding
00:29 - primitive data type is referred as auto
00:32 - unboxing
00:36 - let us understand with few examples
00:41 - now i initialize a variable of integer
00:45 - data type
00:46 - called h
00:49 - having value 16
00:51 - this is ordinary primitive data type
00:54 - now if i want to convert this into an
00:57 - object which is corresponding to its
00:59 - wrapper class
01:00 - we know now what is wrapper class
01:02 - corresponding wrapper classes
01:04 - integer i capital
01:08 - integer now i give the object name
01:12 - let me have obj h
01:15 - is equal to
01:17 - new
01:18 - integer of
01:20 - h
01:21 - so the primitive data type here it is
01:24 - getting converted into its object
01:30 - this is called boxing
01:34 - let us check by printing it
01:40 - i say here object
01:43 - just for reference
01:45 - plus
01:48 - object h obj h
02:03 - you can see
02:04 - the object is printed here
02:09 - now let me tell you what is
02:12 - auto boxing
02:15 - instead of giving the new keyword and
02:17 - then integer
02:19 - of age
02:20 - we directly say here as
02:22 - h
02:24 - so this statement is taken care by the
02:26 - compiler
02:28 - automatically it is being done
02:31 - so it is converted into its object
02:33 - called objh
02:34 - of its corresponding wrapper class
02:37 - integer
02:38 - this is auto boxing
02:44 - let us run this also
02:51 - you can see the second time the output
02:53 - has come
02:56 - now let us understand what is
02:58 - unboxing
03:01 - unboxing is nothing but
03:03 - again converting this object
03:05 - into its ordinary primitive data type
03:08 - so let me give in
03:11 - now i use some other variable say a
03:15 - is equal
03:16 - to obj
03:19 - h
03:20 - see this is an
03:22 - object
03:23 - that object is being converted into
03:25 - ordinary data type so this is
03:28 - auto unboxing
03:36 - let me print this
03:41 - this is
03:43 - unboxing
03:49 - okay
03:58 - you could
03:59 - you could see that unboxing
04:04 - you may have a question
04:07 - what is the need of this
04:10 - as object oriented programming
04:13 - everything resides as object and class
04:17 - so even you store the primitive data
04:20 - type it is automatically converted or
04:23 - wrapped into its
04:25 - object
04:26 - you may have some situation
04:29 - in advanced programming where you need
04:31 - all the data as object not as primitive
04:35 - data
04:37 - so that is the reason why
04:39 - concept of boxing and auto unboxing is
04:42 - introduced in java
04:44 - sometimes we need to convert one data
04:46 - type into another data type
04:48 - right for example integer to string
04:51 - at that time the object only will be
04:54 - helpful see let us check
04:57 - i am trying to convert string
05:00 - str
05:02 - is equal to
05:03 - obj
05:05 - h
05:06 - dot 2 string
05:11 - okay now this will be converted as
05:13 - string
05:18 - now let me print this
05:25 - so i will be printing here string
05:38 - you could see that it is printed 16
05:41 - that is a string
05:44 - now
05:46 - if this is not an object
05:49 - okay so let us give a r h
05:53 - let me give h itself
05:56 - i am trying to convert this age that is
05:59 - primitive data type to string will it
06:02 - accept
06:04 - see
06:05 - that is an error
06:08 - so this is the purpose of
06:10 - having the
06:12 - object
06:13 - students hope concept is clear
06:16 - keep watching
06:17 - keep learning and
06:19 - keep sharing
06:21 - thank you