00:00 - welcome back students we have already
00:04 - learned linear search in previous class
00:07 - today we will learn binary search in our
00:10 - a binary search works only for sorted
00:14 - array
00:15 - it may be sorted by ascending order or
00:18 - descending order in this type of search
00:22 - search value is compared with middle
00:25 - element of array if the value matches
00:28 - with the middle element then search gets
00:31 - completed if the match is not found at
00:35 - the middle element again it will search
00:37 - with middle element of first half
00:41 - otherwise second half it depends on the
00:44 - searching value our sorting of the array
00:48 - for example if the value being searched
00:51 - is lesser than the middle element then
00:54 - it gets performed only in the first half
00:57 - this is in the ascending order array if
01:01 - the value being searched is greater then
01:04 - it will perform in the second half of
01:06 - the array this process will keep on
01:09 - repeating until the element is found our
01:14 - until search get completed
01:17 - if element is not found then search will
01:21 - get completed when first index number is
01:24 - equal to the last index number we will
01:27 - understand this by few examples later
01:30 - once again we will come to this and then
01:32 - we will read so I have array
01:35 - integer array having the values like
01:38 - this let us search for element 23 so for
01:46 - your reference I have given index
01:48 - numbers starts from 0 and the last index
01:51 - number here is 11 now it should find the
01:54 - middle index number and then for that
01:57 - whichever element is there it will
02:00 - compare with that element how the middle
02:03 - element is found is like mathematics we
02:06 - will take the first index and the last
02:09 - index we add both and divide by 2 or
02:12 - time
02:13 - we will get that mean so that is the
02:15 - middle index we will get for your better
02:17 - understanding I have matched first index
02:20 - last index even the middle index with
02:22 - the colors please follow the colors also
02:25 - so that it will be easy for you to
02:26 - understand for the first time the certs
02:31 - will be in the whole array so it takes
02:35 - the first index as 0 last index as 11
02:40 - here and then we will add first index
02:43 - and last index divided by 2 so we will
02:47 - be getting 5.5 index number cannot be
02:53 - 5.5 so we leave the decimal part and
02:57 - then take only the integer part here in
03:01 - the program also it will do
03:02 - automatically implicit conversion that
03:05 - is integer divided by integer it gives
03:08 - only the integer value as quotient now
03:12 - in the middle element 37 is there so we
03:19 - are searching for 23 it is lesser than
03:23 - 37 so when it is sorted array there is
03:26 - no meaning in searching this second half
03:30 - because what we are searching will be in
03:33 - the first half only because search
03:36 - element is lesser than the middle
03:39 - element so it will not search in the
03:42 - second half now the middle element is
03:45 - already compared so remaining segment
03:49 - that is index from 0 to 4 only we have
03:53 - to search so here first index remains as
03:57 - 0 itself but the last index instead of
04:01 - 11 it should be 4 we already found
04:04 - middle in element as 5 so what we do
04:06 - middle element minus 1 you will use the
04:10 - next last index so in round 2 we will
04:14 - have first index as 0 last index as 4 so
04:19 - 0 plus 4 divided by 2 we will get to as
04:23 - the result so in 2
04:26 - 23 is available which is equal to which
04:30 - we are searching so what happens search
04:34 - becomes successful and then it will
04:36 - print the index number of that element
04:39 - let us see next example I have a new
04:44 - array here
04:45 - after removing the last element of that
04:48 - previous array so let us search for
04:53 - element 51 I have the index number from
04:58 - 1 to 10 so at round 1 the first index
05:03 - number will be 0 and the last index
05:06 - number will be 10 so middle element we
05:09 - find 0 plus 10 divided by 2 we get exact
05:15 - 5 at index number 5 I have 37 so 51 is
05:22 - greater than 37 so no meaning in the
05:25 - searching first half so automatically it
05:30 - will search in the second half first
05:32 - index of the new segment is arrived by
05:35 - adding 1 with the middle element so it
05:38 - becomes 6 last index remains unchanged
05:42 - so now we get 6 plus 10 divided by 2
05:49 - that is 16 divided by 2 we get 8 as
05:53 - middle element of this segment
05:57 - at index 8 54 is available 51 is lesser
06:04 - than 54 so it is not necessary to search
06:09 - the second half again
06:13 - now the first index remains same the
06:17 - last index will be middle index minus 1
06:21 - that is 8 minus 1 so now for round 3 the
06:27 - new value of middle index will be 6 plus
06:32 - 7 divided by 2 that is 6 point 5 here
06:36 - again we will take only the integer part
06:38 - that is 6 lakhs
06:40 - index so at index 6:45 is available so
06:45 - 51 is greater than 45 first half we
06:49 - don't need to search to get the first
06:51 - index we add middle index plus 1 we get
06:55 - 7 in the last index is also 7c now first
07:01 - index is also a say 7 last index is also
07:04 - 7 if the element is not found at this
07:08 - index then search also will stop let us
07:13 - check 7 plus 7 divided by 2 will be 7 X
07:18 - n so we get 51 here 51 which is we are
07:24 - looking for it becomes successful if
07:28 - some other element is at that place and
07:30 - then it becomes unsuccessful as first
07:33 - element and last element both are same
07:36 - index let us go to one more example
07:43 - index number of this array is 0 to 11 so
07:48 - let me search for the element 11 at
07:52 - round one first index is 0 and last
07:57 - index is level so we will have middle
08:01 - element as 0 plus 11 by 2 as 5 point 5
08:05 - only integer part of this we will take
08:08 - so we will take 5 at 5:33 is the value
08:13 - available 11 is lesser than 33 so
08:19 - greater than the middle element index
08:22 - numbers we don't need to search the
08:25 - first index of new segment of array will
08:27 - be zero the last index will be middle
08:31 - index minus 1 that is 4 so at round to 0
08:37 - plus 4 divided by 2 is equal to 2
08:40 - element at index number 2 is 23 which is
08:45 - again lesser than 11 so the first half
08:49 - will be searched
08:50 - Sakina we don't need to search
08:53 - first index remains the same last two
08:56 - indexes middle index minus 1 so that
08:59 - becomes 1 so at round 3 0 plus 1 divided
09:05 - by 2 it will be 0.5 so we take only 0 at
09:09 - 0 11 is available which is equal to the
09:14 - element which we are searching for so
09:16 - search becomes successful I will give
09:19 - you the last example where the search
09:22 - element is not available so example for
09:26 - I am searching for 53 which is not
09:34 - available in this I think so here the
09:38 - first index is 0 last index is 10 so we
09:43 - get 5s answer at 5 we have 37 53 is
09:49 - greater than 37 so it will not search in
09:53 - the first half first element becomes
09:57 - middle element plus one last index
10:00 - remains same
10:02 - now it round to 6 plus 10 by 2 it
10:06 - becomes a eat again at index 8 54 is
10:11 - available 53 is lesser than 54 so the
10:16 - second half will not get searched
10:19 - now the first index remains same last
10:23 - index is middle index minus 1 so that is
10:27 - 7 so at round 3 6 plus 7 divided by 2 is
10:32 - 6 point 5 so it will take only integer
10:35 - that is 6 at 6:45 is available 45 is
10:41 - lesser than 53 so we don't need to
10:45 - certainly first half so index number our
10:49 - first element will be middle index plus
10:52 - 1 that is 6 plus 1 is equal to 7 from
10:56 - the last index also 7 so drowned 4 7
11:02 - plus 7 divided by 2 is equal to 7
11:06 - so at index 751 is available again which
11:10 - is not correct being first index and
11:13 - last index our same search stops then it
11:17 - becomes unsuccessful students when we do
11:21 - manually we will do like this
11:23 - but when we do your program all this
11:26 - round 1 round 2 round 3 round 4 all will
11:29 - be done in the loop so it will be very
11:32 - easy to write the program just we need
11:35 - to understand how we change the first
11:38 - induction last index and which segment
11:40 - to be searched let us do a program as
11:44 - usual I will copy codes from the
11:47 - previous program until we take the input
11:50 - I will create a new class called binary
11:56 - search I change the name of the class
12:07 - here we need 3 variables instead of this
12:11 - we will have first index 0 as default
12:17 - and then last index in the beginning it
12:22 - will be 1 lesser than the length of
12:25 - array that is a RR dot length minus 1
12:32 - and also we need middle index the DCM
12:37 - here we take the input after taking the
12:41 - input user will also give the element to
12:44 - be searched so for that
12:56 - [Applause]
13:03 - then I assign the value in s is equal to
13:09 - integer dot parse in Tov BR dot readline
13:17 - now now we need a loop to perform but we
13:24 - don't know the exact number of
13:26 - iterations it is going to happen so we
13:29 - cannot use farlow
13:31 - instead of that we will use while loop
13:36 - what condition here we can give the
13:39 - first index always will be lesser than
13:42 - last index and it will search until
13:46 - first index becomes last index that is
13:49 - both index becomes same so we will give
13:51 - the condition here first index is lesser
13:55 - than or equal to last index first we
14:02 - need to find the middle index so middle
14:05 - index is equal to first index plus last
14:11 - index divided by 2
14:14 - do not forget to put this first index
14:17 - plus last index inside the bracket
14:19 - otherwise it will give other meaning
14:22 - that is L divided by 2 and then it will
14:24 - add with the first index then it will
14:28 - not work after finding the middle
14:31 - element we will compare the element of
14:34 - that index for that we will you if
14:36 - condition if so which we are searching
14:40 - is yes equal to equal to AR AR of that
14:46 - middle index yeah so if this is true we
14:53 - can print the index number where it is
14:55 - available so system dot out dot print
15:01 - line of
15:06 - element is available at index that is M
15:14 - is the index so young we will print and
15:17 - then we should have boolean type
15:20 - variable so we have not given that we
15:23 - will give here bull in flag is equal to
15:29 - false as default value so now it will
15:33 - become true flag is equal to two and
15:39 - then we can break the loop else if
15:45 - condition if search is greater than ARR
15:53 - of Y M then what we do we will not
16:00 - search in the first part of that array
16:03 - so first index will become F is equal to
16:07 - middle index plus one yells
16:14 - automatically it will be yes will be
16:17 - lesser than ARR of M so now what we do
16:22 - last index will be middle index minus
16:29 - one so this will keep on repeating until
16:33 - F is equal to L so if it is false then
16:38 - it comes out of the loop now we can
16:42 - print if flag is equal to equal to false
16:48 - otherwise this we can also write flag is
16:52 - not equal to false so not we can write
16:55 - here then we will print system dot out
17:01 - dot print line of the element now
17:09 - formed so now we will close the with
17:16 - that close the class
17:19 - let us compile no syntax error we will
17:25 - run this I will give 1 6 9 23 it should
17:33 - be sorted so we should give the greatest
17:36 - value only 67 86-90 112 156 178 so which
17:54 - we are looking for maybe six so element
18:00 - is available at index one let us run
18:06 - once again 1 5 9
18:17 - 23:56 478 598 634 700 841
18:36 - so let us search for 841 so element is
18:45 - available at index 9 so that is one
18:47 - lesser than the length last index so in
18:51 - case it is in descending order how we
18:58 - can do it in stuff yes is greater than
19:02 - ARR of M we will just change into lesser
19:07 - than air RM so ultimately the whole
19:11 - process reverses let us check no syntax
19:17 - error
19:21 - are you 9 8 7 8 7 6 6 5 4 5 4 3 4 3 2 2
19:35 - 1 0 1 1 2 1 1 0 4 not 895 so let us
19:47 - search for 432 so it is at index 4 0 1 2
19:57 - 3 4 let us turn once again 10 9 8 7 5 3
20:16 - 1 - 10 - 12 - 15 so let me check - twirl
20:33 - it is available at index 8 so students
20:38 - it is clear now let us learn how to
20:42 - search in string type of array so I will
20:45 - change the array type so let me change
20:55 - this as 6 then when we take the input we
21:02 - will have only BR dot readline off and
21:06 - then even this will be string type then
21:13 - taking the input will be we are not real
21:15 - enough here in the condition instead of
21:20 - equal to equal to we will use dot
21:24 - compare 2 which gives the integer type
21:28 - output 6 lexico
21:31 - and string functions I have already
21:34 - explained in the previous lessons you
21:37 - can check their yes dot compared to then
21:46 - this will be in chilly bracket which is
21:51 - equal to equal to zero here away we will
21:57 - have the same thing when it is greater
22:01 - than 0 greater than 0 is fine ascending
22:06 - order of that array that is ASCII value
22:10 - of first letter of the string which we
22:12 - are comparing is greater than the middle
22:16 - element so we will get the positive
22:19 - value which is greater than 0 so at that
22:22 - time we will not compare the first half
22:27 - of the array so it becomes first index
22:31 - will be middle index plus 1 in case it
22:35 - is descending order array then we will
22:37 - change the symbol to lesser than 0 let
22:41 - us compile this let me you
22:52 - Ament
22:54 - bolu chapin turn of all issuer joschwa
23:13 - so we will search for issue it is
23:20 - available at index 4 so 0 1 2 3 & 4 5 is
23:26 - the last index in case it is in
23:33 - descending order we change this into
23:35 - lesser brand symbol compile are you
23:42 - Windows UNIX office Microsoft Excel Doss
24:01 - let me check for Unix so element is
24:07 - available at index 1 here we are had
24:10 - given 10 elements it remained we didn't
24:13 - change at all so it was 6 right we can
24:15 - use 6 I should give in the descending
24:21 - order so let me you HP logitech lenovo
24:35 - epson Dell yessir let me check for Dell
24:47 - so element is available at index 4 it is
24:50 - right students let us revise the points
24:54 - once again
25:34 - I hope it is very clear for you please
25:38 - keep on watching my videos and learn
25:41 - more thank you students