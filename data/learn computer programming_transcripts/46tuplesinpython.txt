00:04 - [Laughter]
00:13 - hello everyone in this class we are
00:16 - going to start tles in
00:18 - Python tles in Python are type of
00:22 - sequence which may have any type of data
00:25 - in it and then these are mentioned
00:28 - inside the p parenthesis that is round
00:31 - brackets and each element is bated with
00:35 - comma tles are ordered that means order
00:40 - of the elements cannot be changed
00:43 - elements are referenced using index
00:46 - numbers tles are immutable that means
00:50 - once the tle is initialized we cannot
00:53 - change or add new or delete the element
00:57 - from tle these are some examples here
01:02 - first one having all the integer numbers
01:05 - as its members second one having mixed
01:09 - data
01:11 - type we can also have another sequence
01:15 - inside this tle or again one more tle
01:19 - may be inside the
01:21 - tle let us create tle and learn how to
01:25 - access the members of the tle let us go
01:28 - to python directly
01:30 - let me create a tle called
01:33 - I where I'm going to give all the
01:36 - integer numbers as its
01:38 - members 1 2 3 4 7 8
01:45 - 9 so if you want to know what is stored
01:49 - in it I can again give itup and then I
01:53 - get displayed now with multiple data
01:57 - types Mt is equal
02:02 - to
02:05 - cap
02:07 - roll 60 40 3 + 10 J this is a complex
02:14 - data type and then
02:16 - 34.7 so again Mt if you give we get the
02:22 - doule let me also have with sequences s
02:26 - t is equal to as I am having
02:32 - here
02:33 - 40
02:35 - 80
02:37 - 120 and then this is a sequence and the
02:39 - next one I am having here cooling as a
02:43 - string and then I am having a tle here
02:46 - again inside a tle that is
02:51 - 678 and then I close
02:54 - this so s tup is again a tle if you want
02:59 - to know know the data type we already
03:01 - know that type of name of the variable
03:05 - you you we will be getting
03:09 - stup so it will say class tle now let us
03:12 - learn how to access the members m
03:16 - t of that is a square bracket I give
03:20 - here one and then it will be giving role
03:24 - as the answer as cap is having as zero
03:27 - as its index and then role is having one
03:29 - as its index similar way s
03:34 - t of I'm giving here zero that is the
03:38 - first element here you should understand
03:41 - that totally one list is one Element it
03:45 - is not only the 40 is the element so it
03:49 - will be giving the complete
03:53 - list in case if we want to access the
03:57 - elements inside the list then we shall
04:01 - give once again the index number of the
04:04 - list that means we can give stup of zero
04:09 - is the list and then from that if I want
04:12 - to have the index number two that is
04:18 - 120 similar way if I want to get seven
04:21 - from this tle then I shall give
04:26 - Stu of that is two is the index number
04:29 - number of the tle and from there it
04:32 - is one is the index number of seven in
04:36 - the tle so we got this
04:41 - seven we know now tle is immutable let
04:45 - us check St U of say one that is cooling
04:51 - I want to change this with some other
04:54 - element called
04:55 - cool which is UN like again a string but
04:59 - I want want to replace that it is not
05:02 - possible because see it shows tle object
05:05 - does not support item assignment that
05:07 - means we cannot change any of the
05:10 - element from the
05:12 - tle but if you are having a scenario
05:15 - where you want to change the tles
05:19 - value we shall do in this way we can
05:23 - change that to a list then make the
05:26 - modification required then again change
05:29 - it back to the tle that is possible let
05:32 - me change the tle to list yes list is
05:38 - equal to list of so any sequence is
05:43 - going to be converted into
05:45 - list now I am giving stup so this is a
05:49 - tle changed into list and put in the
05:52 - variable called yes
05:55 - list now yes list is a
05:58 - list
06:00 - now I can make the modification as lists
06:03 - are mutable so now I change yes
06:07 - list of
06:10 - 1 equal
06:12 - to cool now s list if you see it is
06:17 - changed now again I can convert this
06:20 - list into tle so yes
06:23 - T is equal
06:26 - to tle of s
06:31 - so the previous tle will be replaced as
06:34 - I have given the same name here in case
06:37 - you need to keep the original tle as it
06:39 - is you can change the name of the tle
06:43 - say for example I can say here two so
06:47 - here it
06:48 - becomes S 2 as a modified one the
06:52 - original remains as it is stup 2 is
06:56 - modified
06:57 - one stup is
07:00 - same in case you want to replace again
07:03 - you can do that St U is equal to tle of
07:10 - s
07:11 - list see now St is Chang
07:17 - now with
07:19 - cool creating empty tle
07:22 - eup is equal to empty parenthesis I give
07:26 - then it is empty so now e T
07:30 - is empty here is a small challenge see
07:35 - any number we put inside the parenthesis
07:39 - becomes a number type only for example m
07:43 - is equal
07:44 - to in the parenthesis I give here 10 so
07:49 - what is the type of M you may think that
07:51 - it is a tle because it is mentioned
07:53 - inside the parenthesis but it is not so
07:57 - let us
07:58 - see type of
08:01 - M this is integer similar way other data
08:06 - type for example if I give n is equal
08:11 - to White sorry I need to put it inside
08:14 - the parenthesis let me rewrite n is
08:17 - equal to in the
08:22 - parenthesis
08:25 - right so now type of n if I give and
08:29 - then it is string only it is not a
08:32 - tle so how do we create a tle with
08:37 - single element tle with single element
08:40 - proceeding with
08:43 - comma see now I give n is equal
08:50 - to new and then I put here one comma
08:55 - then it understands as a tle it is not a
08:58 - string anymore
08:59 - so type of n if you see it is a
09:04 - tle so similar way m is equal to I put
09:09 - 20 here and then comma it becomes a
09:14 - tle type of M is not integer it is a
09:21 - tle slicing is also applicable as we do
09:25 - using string and lists we can use square
09:30 - brackets with the name of the Tuple let
09:33 - us create one Tuple called
09:36 - xtup I'm giving here 7 a b n 42 20 40 80
09:45 - 30 10 and also a list here saying 1 2 3
09:51 - 4 5 now let me give x t of 2 is 4 so
09:58 - that means here start and stop is there
10:01 - two is B and then 3 is n and then four
10:05 - is 42 here which we mentioned four as
10:09 - stop is not included so it will be index
10:13 - number two and three only so we will get
10:16 - B and N here you can see that a new tle
10:20 - is returned after getting sliced x
10:25 - p off we can also have the negative
10:29 - index number in
10:30 - tles from right side to left side so if
10:34 - I start from Min -2 is to - 5 and then
10:40 - the step must be there as minus1 or
10:43 - minus steps Min - one only I give and
10:45 - then I close Min - 2 is the big tle
10:50 - which is given and then minus 3 is 42 -
10:54 - 4 is n - 5 is B but - 5 is not in
10:59 - included so it will be giving the tle 42
11:02 - and n as sliced sorry I supposed to give
11:06 - the square bracket so let me give
11:10 - XD of -2 is to - 5 is to minus1 so I
11:17 - will be getting the tle 42 and
11:21 - N this slicing is similar to list I
11:24 - already said if you want to know more
11:26 - about the slicing you can visit my
11:28 - previous videos strings are lists to
11:32 - learn the slicing of sequence here one
11:35 - more thing I wanted to tell you that we
11:38 - can also create the two-dimensional tle
11:41 - similar like list that is also called as
11:44 - nested tle so n t i give is equal to 1 2
11:50 - 3 comma 4 this is a tle inside the
11:54 - another
11:55 - tle having one more tle inside
11:59 - 5
12:01 - 10 15 20 now I close the main tle
12:07 - there it is called Nest tle no hope you
12:11 - understood well let me recap
12:17 - Once empty tle can be created mentioning
12:20 - only parenthesis without any value tle
12:23 - with single element shall be created
12:25 - mentioning a value followed by
12:27 - comma tle shall be
12:31 - nested index numbers are mentioned
12:34 - inside the square brackets with tle to
12:36 - access the element slicing of tle can be
12:39 - done similar to Strings or lists hope
12:42 - the concept is very clear to you let us
12:45 - meet in the next
12:47 - class thank
12:52 - you