00:00 - welcome back students in this video
00:02 - lesson we will learn encapsulation and
00:05 - access specifiers we know two main
00:08 - things which are in the class our data
00:11 - members which contains informations and
00:14 - functions are methods that performs
00:17 - operations sometimes we may need to
00:20 - access our manipulate the data inside
00:23 - the class there may be unauthorized
00:27 - access and misuse also then to keep it
00:30 - safe from unauthorized access Java uses
00:34 - mechanism of binding both data members
00:37 - and functions called encapsulation
00:41 - encapsulation ensures that a user cannot
00:45 - access the data of an application
00:46 - without using its functions so the
00:51 - encapsulation is defined as the wrapping
00:54 - up of data under a single unit it is the
00:57 - mechanism that binds together code and
01:00 - the data it manipulates as per the
01:03 - requirement variables and functions of a
01:06 - class can be made to be hidden from
01:09 - other classes therefore this is also
01:12 - known as data hiding to remember
01:15 - encapsulation we can think of capsule
01:18 - where data variables and methods are
01:21 - happy as a class let us know how to
01:24 - achieve encapsulation to restrict the
01:28 - unauthorized access Java has three
01:32 - keywords can access specifiers first one
01:36 - is public next is protected and private
01:40 - while declaring data members any one of
01:44 - these keywords is specified with data
01:47 - members our method prototype let us
01:50 - learn the access level of these access
01:53 - specifiers if public is given as access
01:56 - specifier then it is accessible by any
01:59 - class it may be inside the package or
02:02 - even outside the package subclass our
02:05 - class of other package if protected is
02:09 - indicated it may have access inside the
02:13 - package
02:13 - and also outside the package that
02:17 - inherit the class if private is given
02:21 - then it can be accessed only within the
02:25 - class even in the same package other
02:28 - class also won't be able to access this
02:30 - and not even by inheritors when we don't
02:36 - give any access specifier then it
02:38 - becomes public within a package that
02:40 - means it cannot be accessed outside the
02:44 - package and this is defined as default
02:46 - if we need a example for encapsulation
02:50 - we can consider this an employee may
02:52 - have access to know a salary but he
02:56 - cannot change the salary no management
02:59 - only can have an authorisation to change
03:02 - the salary of that employee so where the
03:05 - method displays there it may have public
03:09 - access specifier so that any one of the
03:12 - employee can see the salary part but
03:16 - access to data members and function
03:18 - cannot be given as public it can be as
03:22 - private so that management only will
03:26 - have the authorization to change the
03:28 - salary of that employee I will
03:31 - demonstrate encapsulation using program
03:34 - which we have already done earlier I
03:37 - will give just few examples we learnt
03:41 - packages in our 23rd video so the basic
03:46 - operation was a package which I created
03:49 - then here is a class which I called a
03:53 - class from this packet that is outside
03:55 - of this package this class is available
03:57 - let us check this see here there are two
04:02 - classes inside this package one is
04:06 - called sum so here I have calculated sum
04:11 - of two variables and printed here you
04:15 - can see I am given public as the access
04:18 - specifier then if we see this difference
04:21 - so here also I am given public as the
04:24 - access specifier
04:25 - let us come out of this so here I have a
04:31 - class can import Bo pack where I have
04:37 - called the some dot mein and diff dot
04:42 - main which is inside that basic
04:45 - operation package as some and if both
04:48 - are having public as access specifier we
04:52 - can call that outside the package so we
04:54 - can run this and check so some is also
05:02 - given difference is also given here so
05:05 - here 45 plus 55 was the argument here 83
05:10 - and 78 if you have the difference let us
05:13 - once again go to the package now here in
05:20 - the class called live I will call the
05:24 - sub so that is the su-yong dot main was
05:29 - the method and then I am giving the
05:31 - parameter value for example I knew 6 & 7
05:36 - I will compile this see there is no
05:41 - syntax error because the sum was having
05:45 - public 1 and then this is inside the
05:48 - package let us run this so for
05:56 - difference I am giving 100 and 150 so it
06:01 - will show differences 50 and the sum it
06:04 - will go and run from there so it will
06:06 - give the result so it has given the
06:09 - result sum is 13 so we can see if public
06:14 - is given as access specified it can be
06:17 - accessed from anywhere now I will change
06:20 - this access specifier this public into
06:24 - protector so let me compile this so you
06:33 - could see here error found in class
06:37 - so let us see what is the error so
06:40 - modify a protractor not allowed here
06:43 - so now let us do without this so that it
06:48 - becomes default here I have not
06:51 - specified any public or private our
06:53 - prototype so company this no syntax
06:57 - error so I have already in difference I
07:01 - have called it so it is here you can see
07:05 - there will it work or not it will work
07:08 - because it is in the same package so I
07:12 - give 200 over number so the difference
07:19 - is hundred sum is 13 now let us go
07:27 - outside the package and then I will run
07:29 - this node you can see here it shows a
07:35 - error because when we don't specify
07:38 - anything that becomes default it will be
07:41 - available only in the package not
07:43 - outside the package so let us close this
07:54 - now I will have a subclass here I will
07:58 - create class product X turns some so
08:10 - extent is a keyword which is used to
08:13 - inherit the property of the main class
08:16 - so I will write no public static wide P
08:29 - Ryu and then I you into X comma int Y
08:40 - now I will have yes is equal to accede
08:44 - to quite so I wanted to use the variable
08:48 - yes which is in the sum class so I will
08:55 - give as a class variable here static in
09:01 - PS as the functions are static I have
09:06 - given as a static variable so let us
09:12 - compile this
09:13 - so no syntax error so the variable which
09:17 - is given the main class could be
09:19 - accessed in derived class now let us
09:23 - change this into private let us see
09:28 - which is outside the class so you can
09:37 - see that it is showing error message so
09:42 - you can see main int comma int has
09:44 - private accessing basic operation dot
09:47 - sum so we won't be able to access some
09:51 - here even in a same packet from another
09:54 - class we won't be able to access it
09:57 - students I hope now it is very clear how
10:01 - this public protected and private access
10:04 - specifier works here public doesn't have
10:08 - any restriction the private is fully
10:11 - restricted it is available only within
10:14 - the class when we don't give anything as
10:19 - a specifier and then only inside the
10:21 - package it acts like a public students
10:25 - keep watching my channel learn and share
10:28 - thank you students