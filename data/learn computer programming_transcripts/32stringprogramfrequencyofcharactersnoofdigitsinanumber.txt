00:01 - welcome back students today we are going
00:06 - to discuss about two more programs where
00:09 - we use string functions the first one is
00:13 - to print number of digits present before
00:17 - and after the decimal point of a double
00:23 - type number the next one is finding
00:27 - frequency of a character in a string
00:31 - first I will explain the idea of find
00:35 - the digits before and after decimal
00:38 - point of a number so here the number is
00:41 - given as double type for example I have
00:45 - three hundred and forty five point six
00:47 - seven two one so here the output should
00:51 - be the number of digits available before
00:55 - the decimal point so that is three here
00:57 - and then after the decimal point that is
01:00 - for this example for this we take a
01:04 - double type number and then what we do
01:07 - is convert into a string type we already
01:11 - learnt about wrapper class using wrapper
01:14 - class we will convert this double type
01:17 - into string type so if we write this
01:20 - string function this double type number
01:23 - will get converted into string type now
01:27 - we can easily find how many characters
01:30 - are there before this decimal point
01:33 - using the index well and also we can
01:37 - find the number of characters after this
01:40 - decimal point this number I will take it
01:43 - as an example number one so here we have
01:48 - the index for this string now say number
01:54 - of digits before decimal point after
01:57 - decimal point index always start from 0
02:01 - so 0 1 to 2 will be the index number of
02:06 - once placed so later that you will get a
02:10 - dot that is a decimal point
02:13 - as it is starting from zero if we take
02:16 - the index of this point that is dot then
02:20 - we will have the number of digits before
02:23 - the decimal point so we can extract the
02:26 - index of dot there but if we want to
02:31 - know the number of digits after this
02:34 - decimal point then what we can do total
02:38 - number of digits present here
02:40 - - digits present before the decimal
02:45 - point otherwise we can do last index -
02:49 - index of point instead of this we say
02:54 - length minus one - index of point so
02:58 - that we can get the result
03:00 - so that is 8 minus 1 that is the 7 is
03:04 - the last index here then 7 minus index
03:08 - of this dot is 3 so 7 minus 3 becomes 4
03:12 - see one two three four digits are there
03:15 - so here in this first example I have
03:19 - index of dot is three so three
03:22 - characters are three digits are present
03:27 - before the decimal point and for number
03:30 - of digits after the decimal point we
03:33 - take the total length of this that is 8
03:36 - minus 1 is the last index that is 7
03:40 - minus the index of this dot that is 3 so
03:46 - we get 4 see there there are 4 decimal
03:49 - places let us check with another example
03:54 - here I have another number so index of
03:58 - this dot is 5 so 1 2 3 4 5 numbers are
04:04 - present there before the decimal point
04:06 - and then here there are 3 digits after
04:11 - the point so what we do the total length
04:15 - of this is 9 minus 1 is the last index
04:19 - we get 9 minus 1 that is 8 minus index
04:23 - of dot is 5 so we get 3 as
04:26 - answer so this is the logic of
04:29 - extracting the number of digits present
04:33 - before and after the decimal point this
04:37 - is an good example program how to
04:40 - convert from double type to a string
04:43 - type let us go to the program now I will
04:53 - have double type input double D is equal
04:59 - to double dot parse double of BR dot
05:08 - treat line up as we are having I wa dot
05:15 - star here we will have throws
05:17 - ioexception so whatever we have taken
05:22 - the number as d we will convert it into
05:25 - string so we will give string let us
05:29 - have yes is equal to the wrapper class
05:33 - double dot to string of that B which we
05:39 - have used to store the value of digits
05:44 - before the decimal point I will have
05:47 - integer variable called B in B that is
05:51 - before yes dot index of the character
06:00 - dot to store after the decimal point
06:06 - I have int a is equal to last index we
06:11 - are arriving by one lesser than the
06:14 - length so yes dot length of minus 1
06:19 - minus B let us print both the results
06:25 - so before I have B plus digits every
06:35 - single so digit I put s in the black
06:40 - digits before the decimal point compile
07:02 - this
07:02 - I give some number so three digits
07:14 - before the decimal point four digits
07:16 - after the decimal point let us do the
07:23 - next program that is counting the
07:26 - occurrence of character in a string that
07:29 - means how many time a particular
07:32 - character has appeared in the given
07:35 - string I copy the course from the
07:37 - previous program here
07:40 - program to class name as frequency enter
08:05 - a string so string s is equal to BR dot
08:16 - readline half
08:19 - let us discuss first how we will take
08:22 - the occurrence of each character for
08:25 - example we will take a so we will count
08:28 - how many years are there in this string
08:30 - and then we will count for the next
08:33 - character that is next alphabet B like
08:37 - that we will keep on doing approach that
08:40 - if mixed characters that is upper case
08:43 - and lower case both are given we have to
08:46 - check for both the upper case and lower
08:48 - case so instead of that what we are
08:51 - going to do is we are going to
08:53 - change to uppercase or lowercase and
08:56 - then we will check for the occurrence of
08:59 - the uppercase or lowercase here we will
09:03 - convert into uppercase so s is equal to
09:08 - s dot to upper case off we need an
09:16 - integer variable to count so we will
09:18 - have int count so default value is zero
09:23 - there
09:24 - first let us check only for J for the
09:29 - given string so we need a far loop to go
09:33 - from the beginning of the string to the
09:36 - ending of the string so we write here
09:40 - far in is equal to 0 I is lesser than
09:49 - yes dot length off then I plus plus it
09:58 - will go once from the beginning to the
10:00 - end of the string here we will check
10:07 - just only for the first alphabet a if
10:13 - yes dot character at I is equal to equal
10:20 - to a if this is true we are going to
10:30 - increase the count by one so count plus
10:33 - plus let us print the result of this
10:46 - count ow
10:49 - yeah plus count close main attack across
11:04 - the dress compare this this is counting
11:17 - character way see that it is converted
11:24 - into uppercase and then it is counting
11:26 - here we have done only for checking
11:29 - character a like this if we want to
11:35 - check all the characters that is from A
11:37 - to Z we need one more follow far so let
11:41 - us take character type character J is
11:46 - equal to that is a when J is lesser than
11:54 - or equal to Z J plus plus so let us open
12:08 - the bracket here
12:19 - then close it here so now we are not
12:23 - only checking for a we are every time
12:26 - checking for character J so we will
12:29 - queue here J so now what it happens it
12:36 - takes a and then it takes whether
12:39 - character at every index is equal to J
12:43 - or not then if it is true then count
12:45 - will get increased by 1 so until the
12:49 - last it will check and then prints the
12:52 - count of not a count off we will put
12:57 - here one more thing J so after a get
13:12 - counter and then when it becomes B it
13:15 - should become 0 then only it will again
13:18 - count for B so what we do here count is
13:23 - equal to 0 so we reset that to 0 me
13:27 - shall be supposed to give 1 plus let us
13:32 - compile this you know stream program see
13:47 - it has counted all the alphabet from A
13:50 - to Z so few alphabets are not available
13:53 - that so the occurrence of that is 0 so
13:56 - if we don't need this to be printer we
13:58 - will give one more condition here when
14:03 - this will get printed means if count is
14:10 - not equal to 0 so let us compile this
14:24 - string handling is challenging so you
14:32 - can see that whichever alphabet is
14:35 - available only occurrence of that has
14:38 - been counted and printer students these
14:42 - many programs what we have see where the
14:45 - example for string handling programs
14:47 - this would have been very helpful to
14:50 - learn the string functions
14:53 - after completing the syllabus I will
14:55 - give more programs so let us start new
14:59 - topic in the next discussion until then
15:02 - thank you students