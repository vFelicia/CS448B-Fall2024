00:00 - [Music]
00:08 - foreign
00:14 - welcome back in this class we are going
00:17 - to see how operators behave on this
00:21 - for joining we use addition symbol
00:25 - for replicating we use multiplication
00:28 - symbol we can also have relational
00:30 - operators to compare the lists and also
00:33 - membership operator which is in and not
00:35 - in also works on lists let us see those
00:39 - in detail
00:42 - addition operator is used to join two or
00:46 - more than two lists
00:47 - all the elements of lists are added to a
00:51 - single list and being returned
00:53 - for example if we are having different
00:56 - lists one is called City other own State
01:00 - other one is called pin
01:02 - so now if I give CT plus State plus pin
01:06 - then I will be able to see a new list
01:09 - which is having all the lists together
01:10 - like this
01:14 - next replication
01:17 - so multiplication operator is used to
01:20 - replicate the elements of the list
01:23 - if n is the integer given with the list
01:26 - elements are replicated n times and a
01:30 - new list will be returned for example
01:34 - Tech is
01:36 - the list here
01:37 - if take into 2 is given and then all the
01:41 - elements are repeated twice
01:45 - next relation operator
01:49 - we can use any relational operators
01:51 - within two lists to compare
01:54 - after comparing it will return whether
01:57 - it is true or false
02:00 - for example here I have two lists
02:03 - compared with greater than symbol
02:06 - see it will compare the first element
02:09 - and the first element
02:11 - if both are different and then whichever
02:14 - is having the bigger value is greater
02:18 - so here 6 is greater than 1 so it is
02:21 - true next I have some strings here and
02:26 - then the same ring in small letter it
02:28 - starts with second list now when the
02:31 - strings are there it will check the
02:33 - ASCII value the first string
02:35 - first character
02:37 - capital A is 65 and small a is 97. so 97
02:42 - is greater but here it is given as
02:46 - capital A that is 65 is greater there so
02:49 - it is false
02:55 - if the characters in the beginning are
02:57 - same
02:58 - wherever the character differs it will
03:01 - be comparing those characters
03:04 - if complete element is same and then it
03:07 - will check with the second element so
03:09 - similar way it will be returning whether
03:11 - true or false we will see this in detail
03:13 - with many examples
03:15 - while we run an ideally
03:18 - now again 630 is greater than 6 comma 5
03:22 - see that first element in both the lists
03:25 - are same
03:27 - so the second element it checks
03:29 - 3 is smaller 5 is bigger so this is
03:33 - going to be false
03:38 - membership operators unlist
03:41 - in takes value and the sequence
03:44 - if the value is available in the list it
03:48 - will be returning true otherwise false
03:51 - similar way not in checks whether it is
03:54 - not there that means if it is not found
03:56 - in the list it will be returning true
03:59 - otherwise it will be false
04:01 - for example 5 in
04:04 - 1 2 3 4 5 6 that is a list so 5 is
04:08 - available there this will return true
04:12 - now ml not in e i m l n n d l see ml is
04:17 - available there here the operator used
04:19 - is not in so it is going to give false
04:25 - next one 8 in 5 10 15 20 is the list
04:30 - here so it is not available so it will
04:33 - be giving false
04:35 - let us execute everything
04:37 - in ideally
04:39 - so that we are very clear about all
04:41 - these
04:42 - I have a list here called L1
04:45 - I will be giving some numbers here
04:50 - and then let me have L2
04:54 - equal to some more numbers here
05:01 - let me give L1
05:03 - plus L2
05:05 - so it will be returning the list having
05:09 - all the values of both the lists
05:13 - if I want to store and this new list
05:16 - into another variable I can do that
05:19 - for that I can give L3 is equal to
05:22 - L1
05:24 - plus L2
05:27 - so now L3 will be the same list
05:32 - so now L2 multiplied with
05:35 - 3 so 3 times all the elements group of
05:39 - elements will be repeated that means 10
05:41 - 20 30 40 again 10 20 30 40 one more time
05:45 - 10 20 30 40.
05:49 - right
05:53 - now relational operators L1 is greater
05:57 - than l two see there
06:00 - l1's first value is 1
06:03 - L 2's first value is 10.
06:05 - so L1 cannot be greater so it will be
06:08 - giving false
06:11 - now let me change the value of this to
06:15 - 10. you know how to change L1
06:20 - of 0 is the index of 1 right so just I
06:25 - give that let me have 60 there
06:28 - okay so it will become 60 so if I see L1
06:33 - 6234 okay now I am giving L1 is greater
06:39 - than
06:40 - L2
06:43 - so it is true 60 is greater than 10
06:47 - right
06:49 - now let me give some string values in
06:52 - the list
06:53 - s is equal to
06:57 - a b c d
06:59 - m n o
07:00 - p q r
07:04 - now I have S1
07:06 - is equal to
07:10 - a b
07:14 - C
07:16 - now if I compare
07:18 - s is greater than S1
07:22 - see here it will be true as
07:24 - the first string both are different and
07:27 - then the first two letters are same but
07:30 - third letter is here C is there here it
07:33 - ends with B itself
07:34 - so definitely this is going to be
07:37 - greater so s is going to be greater than
07:39 - S1 it is going to be true
07:42 - let me insert one new value there in S1
07:46 - S1
07:48 - dot insert off I'll use 0 as the index
07:51 - number to insert and I will add here
07:53 - ABCD
07:58 - now if I see S1
08:00 - a b c d a b so here a b c d
08:04 - and then s here ABCD both are
08:08 - same elements
08:10 - now it will check with this
08:13 - M and A so both are different right so a
08:17 - is smaller
08:18 - it will give
08:20 - yes one is smaller than
08:23 - yes so it is going to be true now let me
08:26 - add
08:27 - S1 first index
08:29 - insert of 1 comma x y z Now S1 is
08:35 - a b c d x y z
08:37 - s a b c d m n o so now here it is going
08:41 - to check with this
08:43 - and this so definitely X has the
08:47 - higher ASCII value than m
08:50 - so if I give s is greater than S1 it is
08:55 - going to be false now if both lists are
08:58 - same
09:00 - let me create S2 is equal to
09:06 - let me copy all the elements here
09:16 - so yes also same
09:20 - S2 also same
09:23 - now if I say yes 2 is greater than yes
09:26 - it is going to be false as both are
09:28 - equal
09:30 - now if I say yes to
09:32 - equality operator I use and then yes it
09:36 - is going to be true
09:39 - S1 is not equal to S is true
09:43 - now let us check S2 is not equal to yes
09:47 - but both are same right so it will be
09:49 - giving false
09:52 - so now let us check the membership
09:54 - operator
09:56 - S1 is here it is
09:59 - I give a value here
10:03 - x y z
10:05 - in
10:07 - S1
10:09 - so it is available so it will be giving
10:12 - true
10:14 - if an element is not available in S1
10:18 - say here
10:21 - op
10:23 - in S1 it is going to say false
10:27 - now I give
10:30 - PQ which is not available
10:33 - not in S1 so it is not there in S1 so it
10:37 - will be giving true
10:40 - this is how the membership operator
10:42 - works
10:45 - hope all the operators how it behaves in
10:47 - the
10:48 - lists of python are very clear
10:51 - let us meet in the next class we will
10:54 - discuss about the slicing in lists
10:57 - until then thank you bye