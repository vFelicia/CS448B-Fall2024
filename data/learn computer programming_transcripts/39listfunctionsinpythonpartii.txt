00:00 - [Music]
00:08 - foreign
00:15 - in this class we are going to continue
00:18 - functions of list
00:23 - .player is a function which will remove
00:27 - all the elements from the list
00:29 - and then it will be empty
00:35 - for example if we are having a list
00:37 - called num and then we are giving num
00:40 - dot clear off
00:43 - nothing will be there it will be empty
00:49 - list dot count of item
00:52 - is a method which will give you the
00:55 - frequency of an item that means if any
00:59 - element is repeated in the list it will
01:02 - count number of times if it is not
01:04 - repeated absolutely it will be 1
01:07 - for example if we are having num is
01:10 - equal to these numbers stored in a list
01:15 - you can notice that
01:17 - 15 is repeated three times here
01:20 - so now I wanted to count
01:24 - I just give num dot count of 50. so how
01:29 - many occurrence of 15 happens it will
01:32 - count on
01:33 - get back it is 3 now
01:38 - list dot reverse of
01:41 - it will completely reverse the list
01:47 - so if this is the list I will be giving
01:50 - num dot reverse of
01:53 - the first element will become the last
01:56 - element last element will become first
01:59 - so until that it will be reversed
02:03 - you can notice that completely it is
02:06 - reversed 15 40 20 80 in reverse order it
02:10 - is the next method sort of
02:14 - this will sort the elements in ascending
02:18 - order
02:19 - for example if I have the same list
02:22 - which is shown in the previous slide and
02:26 - then I give
02:27 - num dot sort of it will sort the
02:31 - elements
02:32 - remember this will modify the previous
02:36 - list
02:37 - the original list will get modified and
02:41 - then the current sorted list is only
02:43 - available there original list you will
02:46 - not be able to get back
02:49 - if we want to sort
02:51 - the items in descending order
02:54 - we can give
02:56 - the list dot sort of as argument reverse
03:01 - is equal to true
03:02 - so this is an optional one so I have put
03:05 - it in the square bracket to know that
03:09 - so now
03:10 - for example if we are having the word
03:13 - list here
03:14 - I give
03:16 - num dot sort of
03:18 - reverse is equal to true
03:21 - now the biggest value will be in the
03:24 - beginning
03:26 - and the least value at the end
03:31 - sorted off list
03:34 - in the previous one list get modified
03:36 - into the new list it is sorted
03:40 - but if we give sorted off list the
03:44 - original list will remain as it is
03:47 - but the elements are sorted and then it
03:50 - is being returned as a new list
03:54 - for example
03:56 - if we have the word list which is not
03:58 - sorted and then I give sorted off num
04:03 - this will return I will show you when I
04:06 - execute but this art will not return it
04:09 - will just reverse and keep it in the
04:11 - list next one we are having extend in
04:17 - case if we want to add all the items of
04:20 - the second list to the first list we
04:23 - shall give like this
04:25 - list one dot extend of list two
04:29 - that means all the values of list 2 will
04:33 - be added to list one and then list one
04:37 - get modified for example I have two
04:39 - lists
04:41 - one is num one is ch
04:44 - if I give num dot extend of ch
04:49 - um get modified into a new list where
04:53 - all the values of num and then all the
04:56 - values are characters are followed there
04:59 - now I am creating a list called
05:02 - l i
05:03 - which has some integer values say 1 2 3
05:07 - 4 5 6.
05:10 - now if I see what is Li it will return
05:12 - the list I am going to give l i Dot
05:16 - clear off
05:18 - so that means it will remove all the
05:20 - elements in it it becomes empty now if I
05:23 - see a line it is empty
05:27 - let me create
05:29 - one more list called Li underscore one
05:33 - again I am giving some values one three
05:36 - five six two three four five six
05:41 - one two three
05:44 - I have repeated few values here
05:47 - now I will show you how the count works
05:51 - Li underscore one dot
05:55 - count of value I wanted to count so if I
06:00 - give 3 how many repetitions of three are
06:03 - there it will count 1 2 and then three
06:06 - three repeated three times so it will
06:08 - give three as its result
06:11 - let me check Ally
06:14 - underscore one dot count of
06:18 - 1 so 1 is repeating two times it will
06:21 - show two as the result let me give
06:25 - Li underscore one dot reverse of
06:29 - so you will be able to see now all the
06:33 - elements reversed
06:35 - l i underscore one
06:39 - see it is not returning that you need to
06:41 - remember it will just modify the list
06:45 - and store it in the memory
06:47 - so when I call it the reverse one you
06:50 - can see that three two one has come here
06:52 - and then six all other things reversed
06:55 - completely
06:57 - now same list I will use to sort the
07:00 - elements
07:02 - sort of will sort in
07:04 - ascending order
07:06 - this is also not returning it will
07:09 - modify the list Li underscore one if I
07:12 - you it will show the list now see there
07:15 - one one two two three three three four
07:17 - five five six six so most of the
07:19 - elements are repeated here
07:21 - so as it is repeated it is sorted now if
07:25 - I give l i
07:27 - underscore 1
07:29 - Dot
07:31 - sort of
07:33 - reverse equal to true
07:36 - is a Boolean value
07:38 - so it will be in descending order
07:42 - Li underscore one
07:45 - is in descending order
07:48 - now let me copy the word list and store
07:51 - it again
07:54 - sorted off
07:57 - Eli underscore one see now
08:01 - this will be sorting and returning the
08:04 - new list the old list remains as it is
08:08 - you could see that new list is being
08:10 - returned
08:12 - and then if I see l i underscore 1 it is
08:15 - not changed it remains as it is
08:19 - similar way
08:20 - sorted off
08:23 - Li underscore one
08:25 - comma
08:27 - reverse is equal to true now this will
08:30 - start in descending order
08:33 - let me have a list with strings
08:38 - l i S I U okay is equal to
08:43 - I have here A B
08:46 - a
08:48 - x y z
08:49 - hello
08:51 - if I sort this Li yes Dot
08:56 - sort of
08:57 - this get started
08:59 - according to the
09:01 - ASCII value of this string
09:04 - if the starting characters are same then
09:08 - it will compare the next one
09:14 - so l i s is here
09:18 - a a b hello and then x y z if I mix both
09:22 - that means the numeric value as well as
09:25 - the string value in the list
09:28 - it will not sort out
09:30 - before that let me add all these values
09:34 - to the l i underscore one
09:37 - so for that we are having extend method
09:39 - right
09:41 - l i underscore 1 Dot
09:44 - extent of
09:47 - l i s
09:49 - so if I see l i underscore 1 it is
09:53 - having both the elements now let me sort
09:56 - this
09:58 - Li underscore one
10:01 - dot sort of
10:04 - this will be having error here
10:10 - so purely numerical values can be sorted
10:13 - otherwise purely
10:15 - strings can be sorted out so what is the
10:19 - difference between sort and sorted
10:22 - sort does not return the list
10:26 - starter Returns the list
10:30 - insert
10:31 - the original list is modified
10:34 - and word list never be available
10:38 - but in sorted
10:40 - the world released remains as it is a
10:43 - new list is written after sorting out
10:46 - extend also modifies the list
10:51 - hope all these functions are very clear
10:53 - to you
10:54 - we will continue more about lists in
10:57 - next class until then thank you bye