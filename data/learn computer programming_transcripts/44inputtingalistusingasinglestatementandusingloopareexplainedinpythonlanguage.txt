00:00 - [Music]
00:08 - foreign
00:15 - in this class we are going to see how to
00:18 - input elements for the list
00:21 - there are different methods One is using
00:24 - Loop
00:25 - we can use either for Loop or while loop
00:29 - that depends on the programmer's choice
00:31 - other one is taking input using a single
00:35 - statements both we will see in this
00:37 - class now normally if you want to take a
00:40 - input using the loop then we need to
00:43 - have the list initialized as empty there
00:46 - in the beginning so I have L1 as empty
00:50 - list there and then number of elements
00:52 - whatever is needed that we will be
00:54 - giving in the range function so for I in
00:57 - range 5 I need five elements here I have
01:00 - given five there now I will be writing
01:03 - the input statement n is equal to input
01:06 - of entering element so every time the
01:08 - for Loop runs it takes one element and
01:10 - then we will be appending the to the
01:12 - list
01:13 - so L one dot append of n this is one
01:16 - method where it will take five elements
01:18 - for the list after that it stops
01:22 - similar way we can also use while loop
01:24 - for using while loop we will be having
01:27 - one more variable
01:28 - to ask the user whether to continue or
01:31 - not I give a condition here while c 1 is
01:35 - equal to Y so similar in the for loop I
01:39 - write here n is equal to input enter an
01:41 - element it will be taking the element
01:43 - and then it will be appending to the
01:45 - list and then it will ask whether to
01:47 - continue or not in case the user gives
01:50 - any other than y it will be stopping
01:54 - so either one of this you can use if you
01:57 - want to get the input from the user this
02:01 - is the proper way to get the input of
02:03 - our list or even Tuple even for the
02:06 - dictionary we can use this
02:08 - the other way is using eval function
02:12 - we will learn what is eval function and
02:14 - will come back here
02:16 - eval function has the capacity to
02:19 - evaluate the expression even if it is a
02:22 - string so for this reason we can also
02:26 - use for inputting the
02:28 - list our Tuple even for the dictionary
02:32 - for example eval of
02:35 - 50 minus 30 which is inside the code
02:39 - that means it is a string still it will
02:42 - understand that as a expression and
02:44 - gives the value after evaluation so that
02:47 - means it is 20 now
02:50 - similar way
02:53 - if e value of 1 2 3 as a list in as a
02:57 - string
02:58 - then it will take that as a list
03:03 - we can also use this for Tuple
03:07 - this also means a tuple here
03:11 - we know that input statement always
03:14 - takes input as a string
03:17 - if we add e well to that automatically
03:20 - whatever input is given by the user will
03:24 - be evaluated as required and then taken
03:27 - as input
03:30 - so we can give L1 is equal to e value of
03:33 - input of
03:35 - then the message to the user so the user
03:39 - now can give a list a tuple or even a
03:42 - dictionary there
03:44 - please note that using eval function has
03:47 - some disadvantages so it is not
03:49 - increased
03:51 - now let us run the code on Python and
03:53 - understand better
03:55 - let us create a small program which
03:57 - takes input for the list and then again
03:59 - it displays it I need an empty list to
04:01 - be initialized before
04:03 - I give L1 is equal to MT
04:08 - for I in
04:10 - range 4 x is equal to
04:14 - input of
04:17 - message to the user
04:20 - enter the element
04:27 - now I will be appending this to the list
04:29 - so L1
04:30 - Dot
04:32 - append of x
04:36 - so it takes four input for the list and
04:39 - after that it stops
04:41 - it will be saved in the L1 I will be
04:45 - printing this statement to be outside
04:47 - the loop so just say you print L1
04:51 - let us run this
04:55 - I say here
04:57 - python
05:00 - C plus plus
05:02 - Java C you could see the output as a
05:06 - list similar way if we need a while loop
05:09 - we can take continuous input or else
05:12 - even n number of input we can give
05:15 - let us change this program to
05:18 - have n number of input until user says
05:20 - no I need to get the input every time
05:23 - whether to continue or not for that
05:25 - purpose I need one variable I give C is
05:28 - equal to
05:29 - initially I give the test
05:32 - capital Y now while
05:36 - C is equal to equal to
05:39 - y I don't need this for Loop so input is
05:42 - taken then that is being appended
05:46 - and then I will ask the user to continue
05:48 - or not for that purpose I will be giving
05:52 - C is equal to
05:54 - input of
05:56 - the message I give here is to continue
05:59 - enter y
06:02 - sometimes user may give in lower case
06:06 - to avoid the error there I convert that
06:09 - to uppercase
06:12 - aparaf
06:14 - so either the user used in lower case or
06:17 - uppercase it works C plus plus it asks
06:21 - whether to continue or not I give y
06:25 - Java so again why
06:28 - python again y
06:31 - Perl again y
06:34 - like you see see now I have given five
06:36 - inputs all five will be in the
06:39 - list if I give any other simply I press
06:42 - enter also it will stop
06:47 - now let us use the eval function
06:50 - I need nothing here
06:54 - one single statement that is eval of
06:59 - input of message to the user enter the
07:03 - list
07:07 - so just I am going to print that list
07:17 - so you could see that
07:19 - it has taken as a list and then it is
07:21 - printed back
07:25 - simply I give here input
07:29 - [Music]
07:31 - I am giving here 5 into 3 it will give
07:35 - the result
07:40 - so we can also use eval for
07:43 - this type of inputs
07:46 - hope now it is very clear to you
07:49 - keep practicing keep learning
07:51 - keep sharing this video to others so
07:54 - that they also learn well
07:57 - let us meet in the next class until then
08:00 - thank you and bye