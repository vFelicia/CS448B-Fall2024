00:00 - so in the series of learning C
00:01 - programming we are discussing types of
00:03 - storage class in C there are four
00:05 - storage class three we have already
00:06 - discussed autost static and register now
00:09 - in this video we'll discuss extern
00:11 - stories class so this would be a little
00:12 - bit you know confusing or you can say
00:14 - tricky uh not tricky but you know more
00:18 - specifically if I say then application
00:19 - of this extern modifier or this extern
00:21 - keyword or you can say this extern
00:23 - storage class the application the use
00:25 - where we should use and how we should
00:26 - use this how we can use this that thing
00:29 - is little bit tricky so that also I'll
00:31 - discuss everything about this stories
00:33 - class we are going to discuss this video
00:34 - with the help of a program also not one
00:38 - although I'll know show you two programs
00:41 - how to use this external storage class
00:43 - and where to use the application with
00:45 - the help of two programs I'll show you
00:47 - on my laptop also practically now let's
00:49 - see what is an external storage class
00:52 - now you remember I guess storage class
00:54 - will tell four things about the variable
00:56 - default value default value of this
00:58 - external storage class would be zero
01:02 - location where that variable would be
01:03 - stored in Ram or you can say in memory
01:06 - the scope scope is very important up for
01:08 - this extern stories class that is scope
01:11 - would be
01:12 - Global now what does that mean that I'll
01:15 - show show you with the help of a program
01:16 - we'll you know discuss everything and
01:19 - lifetime is till the end of the program
01:23 - right scope is global right you can use
01:28 - this variable through throughout the
01:30 - program as well as between two files
01:34 - also suppose you are working on a
01:36 - project right means you in your team you
01:40 - have two members and you are working on
01:42 - a project on Project we have multiple
01:44 - files like one file is you can see this
01:47 - uh file one and file two two file we are
01:50 - having right in one file on one file you
01:53 - are working on another file your know
01:57 - another team member is working so
01:59 - suppose you have
02:03 - defined any variable or any function see
02:06 - this this external
02:08 - keyword this CL first of all let me just
02:10 - clear you one thing all the global
02:13 - variables comes under this category
02:16 - under this external storage class not
02:18 - local variables only Global variables
02:20 - outside of any function or outside of
02:22 - any no block only Global variables will
02:25 - come under this category no local
02:27 - variable right second thing see
02:32 - now this this is the case in one on one
02:35 - file you are working another file your
02:37 - team member is working so in one file
02:40 - suppose you have some you have declared
02:43 - a variable you have defined a variable x
02:45 - equal to
02:46 - 10 right and also this extern this uh
02:51 - extern keyword can be used with a
02:53 - variable as well as with the with the
02:56 - function a function can also be extern
02:59 - external a variable can also be external
03:03 - right now this variable this is what I
03:06 - have declared and defined see let me
03:09 - just clear first of all the difference
03:10 - between declaration and definition
03:13 - declaration means we have just know told
03:17 - the compiler the data type of that
03:19 - variable that's it no space allocation
03:22 - no memory allocation that is
03:24 - declaration and definition means
03:27 - declaration plus space space allocation
03:31 - here we have declared like we have told
03:33 - like data type would be int and we have
03:35 - defined also memory would be allocated
03:38 - and there we have in X we have value 10
03:41 - so we have defined as well as
03:44 - declared and if we use something like
03:47 - this XT turn int
03:52 - X this is just just a declaration just a
03:57 - declaration
04:01 - means no space allocation no memory
04:04 - allocation for this x right so I hope
04:07 - this is clear to you guys fine now how
04:10 - to use this extern keyword we we will
04:12 - use extern the data type and simple the
04:15 - name of the variable or in with the help
04:17 - of you know with function also you can
04:19 - use this thing that also I'll show you
04:21 - now what does this line
04:22 - means now in this file I have some
04:26 - variable I want to use this variable in
04:29 - another file or you can say reuse this
04:32 - is what
04:35 - reuse so better not to Define this
04:38 - variable here right simply use extern
04:42 - int X it means here here no memory would
04:46 - be allocated to this x right so it is
04:49 - what you can say saving of memory and
04:53 - I'm using this x this value in second
04:55 - file also right so extern keyword
04:59 - basically we use when we want to access
05:02 - a variable from another
05:04 - file right so it will tell the compiler
05:08 - this extern keyword will tell the
05:10 - compiler that this X is not being
05:16 - defined here in this
05:18 - block this x is defined maybe in another
05:22 - file or
05:23 - maybe in the same program in the same
05:26 - file but in different not in the same
05:29 - block BL not in the same
05:32 - block
05:34 - right this I'll show you with the help
05:36 - of a program and it is just a
05:38 - declaration so it will tell that X is a
05:40 - global variable which has been defined
05:44 - already in another file maybe in another
05:47 - file or maybe in another blog and you
05:50 - just I just want to use that that X
05:55 - right so it will just give a reference
05:57 - to that Global variable
06:00 - so in second file if you will print a
06:03 - value print f x is equal to percentage d
06:06 - x so it will print
06:11 - 10 or obviously these files would be
06:13 - under same project like if you are
06:15 - working in code blocks so you'll create
06:17 - an project and under that project only
06:19 - you will create file one file
06:21 - two and in that only you can access you
06:25 - can access this thing so this is what
06:27 - you can say it's a type of linking link
06:29 - linking of two files with the help of
06:31 - extern keyword we are linking two files
06:34 - that would be done with the help of
06:35 - linker not compiler with the help of
06:37 - linker right I hope you know the
06:39 - execution process of C program
06:44 - right now same with the help of function
06:47 - if we have defined a function in this
06:49 - file you can use that function you can
06:52 - call that function in this file with the
06:54 - help of extern you just have to tell the
06:56 - compiler with the help of this extern
06:59 - that yes this X is not defined here this
07:03 - x has been defined somewhere else maybe
07:06 - in another file in the same project or
07:09 - maybe not maybe within the same file but
07:11 - in different block right not not in this
07:15 - block and I want to use that
07:18 - X so Linker will link that file and we
07:22 - can access this X in this file also
07:25 - right so basically it's reusing of this
07:28 - x again we are not not allocating memory
07:30 - to this so it is also saving the memory
07:33 - we are saving the memory
07:35 - right but as extern this is what only
07:39 - Global variable comes under this storage
07:42 - class extern storage class so this X in
07:45 - this file this x should be Global not
07:47 - local so this x can be accessed between
07:51 - multiple files maybe two or more files
07:53 - or in multiple blocks so all the
07:56 - files can modify this x right right so
08:00 - we have to use it properly so better to
08:02 - use better to minimize the use of this
08:05 - extern keyword right or use of these
08:09 - Global
08:11 - variables so extern keyword is basically
08:14 - used to declare not Define just to
08:17 - declare a global variable or a function
08:20 - if with a function you want to use that
08:22 - also you can use simply write X turn and
08:24 - then simply write the data type of the
08:26 - function and name of the function
08:27 - suppose I'm taking a function display
08:29 - that's it so it is just used to declare
08:32 - a global variable or a function right
08:35 - which will provide reference to the
08:38 - variable or the function which is
08:40 - already been defined in another file or
08:42 - maybe in different
08:44 - block right so it is just going to
08:47 - declare the variable or the function
08:49 - right in another file in a separate file
08:53 - so how to use this practically how to
08:55 - use this let me just uh show you with
08:57 - the help of a program I know it's a
08:59 - little bit confusing but I hope you are
09:02 - getting my points if not you can tell me
09:04 - in comment box right so let's take the
09:07 - simple example one type of example I'm
09:10 - taking where we will use xtern with
09:12 - within the same file within the same
09:14 - program right so we have a global
09:16 - variable a I have initialized it it with
09:21 - 10 if you not initialize this then by
09:23 - default Global variable would be
09:24 - initialized with zero and Global
09:26 - variable comes under which category
09:28 - external storage class but here I'm
09:30 - initializing it with 10 so in main I'm
09:33 - just printing a so which a it will exess
09:35 - obviously in main we don't have any
09:37 - local variable so it will exess this a
09:38 - so 10 would be printed now it will call
09:40 - function one and then function two
09:42 - function one we have a local variable a
09:45 - two and then A++ it becomes three and it
09:47 - will print here three in function two if
09:50 - it'll call it will just print hello from
09:52 - function two that's it right now suppose
09:56 - if I don't write here in a is equal to
10:00 - this this
10:02 - thing so this a would be it will give
10:04 - error this a is Undeclared
10:07 - a
10:08 - right and if I write here like something
10:11 - like this extern
10:13 - int a and here I'm same I'm writing in a
10:17 - is equal to 10 so this line will tell it
10:20 - is definition also declaration plus
10:22 - definition right this line is just a
10:25 - declaration it will declare a global
10:26 - variable a and it will tell the compiler
10:28 - that I want to use use a a which is
10:31 - defined somewhere else not within this
10:34 - block but somewhere else so where this a
10:36 - is defined here so it will print
10:39 - 10 right but what is the difference if
10:42 - you not write this thing then also it
10:45 - can access the global variable yes yeah
10:47 - the difference is if I not write a here
10:51 - and I'm writing after these functions
10:54 - after these two functions the definition
10:55 - of these function I'm writing in a equal
10:57 - to 10
11:00 - now this program if you will not write
11:02 - this this thing extern in
11:04 - a and you will compile you will run this
11:07 - code so print F A although we have a
11:11 - global variable a not here but after
11:15 - these definition of these functions but
11:17 - we are using here so it will give error
11:20 - like Undeclared a we are using a but
11:24 - before this line we haven't declared or
11:26 - we haven't defined this a right and if
11:30 - we write this
11:32 - line see before using so uh same as
11:35 - before calling the function either you
11:37 - have to define the function or you have
11:38 - to give the Prototype of the that
11:40 - function so before using a variable also
11:42 - you have to declare that variable first
11:44 - but if we are using this line extern int
11:47 - a means we are telling the
11:49 - compiler yes a is somewhere else we have
11:53 - defined a not within the same blog but
11:57 - yes somewhere else we have defined out
11:59 - of this block and I want to use that a
12:04 - only so this time it will not give
12:07 - error now yeah compiler know that a is
12:10 - somewhere else in this program right now
12:13 - A is after this so it's okay it will
12:15 - link this a with this and it will print
12:18 - 10 at this point of time it will not
12:20 - give any
12:21 - error so it it will just give a
12:23 - reference to the global variable within
12:26 - the same file you can use this thing but
12:29 - if we are using two files mainly we use
12:32 - extern keyword when we want to access a
12:35 - variable or a function from another file
12:37 - right that is I guess uh the main use
12:40 - it's not main use of this thing so it is
12:43 - simple example let me just take that
12:45 - example so now here we are having these
12:48 - two files one is file 1. C and one is
12:50 - support.
12:51 - C in file one we are having a global
12:54 - variable index is equal to 10 this comes
12:57 - under external storage class CL and I
13:00 - have a function and I'm using that
13:02 - function with the keyword extern means
13:05 - this is just a declaration we are
13:07 - telling the compiler that this function
13:10 - has been defined maybe in another file
13:13 - or in another block not within this
13:16 - block see we have defined this function
13:19 - in another file here and in main we are
13:24 - just calling this function display right
13:27 - now in support do c we have defined this
13:30 - function display and here in this
13:33 - function I want to use this x so just
13:36 - use xter int X means we are telling the
13:39 - compiler that this
13:41 - x this x has been defined or this x has
13:44 - been initialized in another file or in
13:47 - another block not within this block so
13:50 - where we have defined this x here and
13:53 - this must be Global variable then only
13:56 - we can access this x here if you write
13:58 - this X in any function or in any block
14:02 - then we cannot access right so this x
14:06 - this extern keyword can only be used
14:08 - with the global variable this x is
14:09 - global variable so now here we can
14:11 - access this value 10 directly from here
14:14 - here we are just declaring this x no
14:16 - memory allocation for this x so this is
14:18 - a kind of reusability of this x memory
14:21 - Saving right and here we can also modify
14:24 - the value of x if we write x++ means x
14:27 - value becomes now 11 so it will print
14:30 - hello from support file and the value
14:32 - would be 11 so we are calling this
14:35 - display here right but we are not
14:38 - defining this display here but we have
14:40 - already told the compiler that with the
14:43 - help of this extern keyword that this
14:45 - function has been defined in another
14:48 - file not in this file or not in this
14:50 - block in another block so yes Linker
14:53 - will link these two files at the after
14:55 - the compilation right these two object
14:57 - files object file would be created and
14:59 - then Linker will link these files right
15:02 - and then yeah obviously it will go from
15:05 - here so it will print hello from support
15:07 - file and 11 so these two files must be
15:11 - under single project if in uh vs code
15:15 - Studio I'm I'll create two separate
15:17 - files so in that case I'm not creating
15:20 - one project and under one project I'm
15:21 - creating these two file no I'm I'll
15:23 - create two separate C file so in that
15:26 - case what I will do I'll just include
15:28 - the content of this file after this line
15:30 - I'll simply write
15:31 - hash include and what is the name of the
15:36 - file support. C in double codes support.
15:40 - C if you want to include another file so
15:43 - just write that file in double codes so
15:45 - whatever the content of this file that
15:47 - would be included
15:49 - here
15:51 - right so I hope now you are aware about
15:55 - that this extern keyword how to use this
15:59 - I hope this is not confusing I know a
16:01 - little bit it is but I hope I have
16:05 - defined I have you know explained it in
16:07 - a neat way if not you can tell me in
16:10 - comment box maybe we can uh create a
16:13 - another video with the help of some
16:15 - better examples right now let me just
16:18 - show you practical of this thing with
16:20 - the help of these programs see we have
16:22 - already created this file extern do c
16:24 - and here I'm using that one type of uh
16:27 - example that is two function fun we are
16:29 - taking in main I'm writing xter in X and
16:34 - I haven't declared I haven't initialized
16:36 - this x I haven't declared it before
16:38 - using it in print F I'm just printing X
16:41 - and I'm calling function one and
16:42 - function two this is definition of
16:44 - function one again a local variable for
16:46 - this x sorry this function X this
16:49 - function uh Function One X is equal to 1
16:52 - and I'm just adding in x uh five I'm
16:55 - just printing in function two I'm taking
16:57 - y y ++ and Y I'm printing
16:59 - and in last I'm declaring this x I'm
17:02 - initializing this x in x is equal to 10
17:04 - although this is global variable right
17:06 - because it is not within any
17:08 - function so this x will print what this
17:13 - 10 let me just save it and run this see
17:17 - first of all X is equal to 10 this x 10
17:20 - then x 6 and uh in function one
17:25 - obviously X would be six because X was
17:28 - one we have added five in function two
17:30 - I'm printing in function two and then Y
17:33 - is equal to Y value y value would be
17:35 - five y value would be five and if if I
17:39 - don't write here this
17:42 - line so the same thing maybe you will
17:44 - say this x what this will exess the
17:47 - global variable and yeah we have a
17:48 - global
17:49 - variable right but this time it will
17:51 - give error we are using this x we
17:54 - haven't declared it before see it will
17:56 - give error this time right
18:05 - see it is giving what error X is
18:07 - Undeclared first use in this function
18:09 - but this is
18:10 - Undeclared but we have taken a global X
18:13 - also so it should take this value but it
18:15 - is not taking it will only take that
18:18 - when we will use extern keyword and we
18:21 - declare we tell the compiler with help
18:23 - of this line that yes we have a value of
18:27 - x we have already defined this X X but
18:29 - not within this block but somewhere in
18:32 - this program we have defined this x so
18:34 - it will search where this x is and it
18:36 - will access that value right now second
18:40 - example is this is a second file right
18:44 - and this is my support. C file in
18:46 - support do c I'm just writing extern int
18:49 - X and display function I'm defining this
18:52 - display function right and in this
18:54 - extern
18:56 - file I'm just taking I'm including this
18:58 - file support. C file because these are
19:01 - two separate files in my these are not
19:03 - under same project but these are two
19:05 - separate file that's why I'm using this
19:07 - including this file external word
19:10 - display we are telling the compiler that
19:12 - display function has been defined
19:14 - somewhere else maybe in another file so
19:16 - you have to link that file with this
19:19 - right not in this file in another file
19:21 - we are taking Global variable X and I'm
19:23 - just calling the function display right
19:26 - so this x when we will call call this
19:29 - function display this function would be
19:31 - called here hello from support class
19:34 - would be printed and this x what this X
19:37 - from where from extern from extern one
19:40 - file because here we have Global
19:42 - variable X and we have already told that
19:44 - extern index so this line we can also
19:47 - use within
19:50 - this display function right now let me
19:53 - just run this and show you see we are
19:56 - getting hello from support class and X
19:58 - is equal to 10 but if you don't take
20:01 - this x AS Global
20:02 - variable right and I'm taking this local
20:06 - variable int xal to
20:09 - 10 this time what error you will get see
20:14 - first of all let me just you know this
20:16 - is an error we haven't put semicolon
20:17 - here now let me run this and what it
20:20 - will give see undefined reference to
20:23 - this
20:24 - x right undefined reference to this
20:29 - X
20:30 - because this x is yes we have told this
20:34 - compiler that this x has been defined in
20:37 - another file but that X should be Global
20:39 - variable in another file but here we
20:41 - don't have any Global variable X we have
20:43 - local variable so this extern will not
20:46 - work with local variables it will only
20:48 - work with global variable so this x
20:50 - would be Global here that time only we
20:54 - can access uh in this file in another
20:57 - file right
20:59 - so now we have taken this as Global
21:01 - variable and let me just run this and
21:03 - show you this time we are getting same
21:05 - output now in second file we can we can
21:09 - do
21:12 - what we can modify this XX
21:16 - ++ right and now let me just run this
21:19 - file again and show you at this time it
21:21 - will print X is equal to 11 although
21:24 - this x is in this file but we have
21:27 - updated this X in another file except
21:29 - Plus+ right so that is also possible so
21:32 - I hope now you are clear with this
21:34 - extern
21:35 - keyword so I hope everything about
21:37 - extern is uh know clear to you why we
21:39 - use this extern keyword or external
21:42 - storage class or this modifier when we
21:44 - have a project large project and within
21:46 - that we have multiple files and I want
21:48 - to you know share the variables and the
21:50 - functions between those files between
21:52 - two or three or four files right at that
21:55 - time we use exter rather than defining
21:58 - the same you know variable or the same
22:00 - function in two three four files just
22:04 - Define that in one file and use that
22:06 - file only with the help of extern
22:08 - keyword just use that file or that
22:10 - function or that variable how to use
22:12 - that I have told you right so that's it
22:15 - for this video now I'll see in the next
22:16 - video till then bye-bye take care