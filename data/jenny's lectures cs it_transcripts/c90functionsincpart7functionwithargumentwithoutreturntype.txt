00:00 - so in the series of learning c
00:01 - programming we are discussing
00:02 - classification of functions in c we have
00:04 - discussed two classification like a
00:06 - function with no argument no return type
00:08 - a function with no argument but with
00:11 - return type so here we will discuss the
00:12 - third classification of the function
00:14 - that is a function with with argument
00:17 - but no return type means without return
00:19 - type that will discuss in this video
00:21 - right we will take the same example
00:22 - addition of two number i am taking the
00:24 - same example in all the four categories
00:27 - why because you will get a better
00:28 - understanding if i take the same example
00:30 - you will get to know the difference
00:32 - clearly
00:33 - uh with these you know with one example
00:35 - same example
00:36 - the difference between the four
00:37 - classifications otherwise you can take
00:39 - different different example and you can
00:40 - try out different different program also
00:42 - like addition subtraction uh number is
00:44 - prime or note these kind of programs
00:46 - i'll give you some assignment also after
00:48 - this this video so that thing will
00:50 - discuss here with proper program and
00:51 - i'll show you practical also on my
00:52 - laptop right but before that just want
00:54 - to tell you one thing if you are looking
00:56 - for a great career in software
00:57 - development then you must think about
00:59 - the aspects like what's trending in the
01:01 - industry the question being asked in the
01:03 - interview
01:04 - what's the thought process behind the
01:05 - great application like amazon zometo ola
01:08 - how to improve your course ranking so an
01:10 - academy brings you a platform where you
01:12 - can watch weekly shows which you can
01:14 - watch live and the host of these shows
01:16 - are seven star coders from courtship and
01:18 - are working in some of the top companies
01:20 - like linkedin google amazon flipkart and
01:23 - having years of experience
01:25 - so they'll be covering the content which
01:26 - would be really helpful for you like in
01:29 - the live episodes you get an opportunity
01:31 - to ask take a charge about the top 20
01:34 - questions
01:35 - and the industry leaders about the
01:36 - recruitment process in top startups and
01:38 - mncs what is the eligibility criteria
01:40 - and how to apply for them and how they
01:42 - build the great products not only this
01:44 - you can also participate in two mock
01:45 - interviews and you can learn courses on
01:47 - programming languages cloud computing
01:49 - blockchain and crypto tech aspects of
01:51 - digital marketing data analytics
01:53 - and there is one more show where on
01:55 - weekly basis puneet will host an
01:57 - interesting story like a show that takes
01:59 - the learner on an entire design process
02:01 - journey from user to building a solution
02:03 - he'll conduct practical activities as
02:05 - well as take learners through the
02:07 - process of building great design
02:09 - products like unacademy zomato and
02:11 - google in a storytelling format so
02:13 - everyone wants to get into designing
02:15 - this show is definitely for you so the
02:17 - detail all the details of the show and
02:19 - the badge you will find in the link that
02:21 - i'll put in the description box of this
02:23 - video and don't forget to use my code jk
02:25 - 10 to get 10 percent extra discount on
02:26 - your subscription
02:28 - so now let's discuss this classification
02:30 - of function with argument without return
02:32 - type so in general what you will write
02:34 - suppose fun in a function name with
02:36 - argument so argument we are going to
02:38 - pass here in these brackets
02:40 - so how many number of arguments you want
02:41 - to pass you have to just give
02:44 - in declaration see if you are declaring
02:47 - a function
02:51 - in declaration what you will write you
02:53 - just have to specify the
02:55 - data type of the one those arguments
02:58 - suppose i am doing sum of two number i
03:00 - want
03:01 - to know i want to write a function of
03:03 - doing sum of two number
03:05 - so i want to pass two argument and data
03:07 - type i know
03:08 - data should be integer or maybe i can
03:10 - take one isn't one this float or maybe i
03:12 - can take both should be float that's up
03:14 - to you so suppose i am taking in
03:16 - data type so here you can write down
03:18 - data type in comma
03:19 - into data type in declaration no need to
03:22 - specify the variable in a into b that is
03:24 - in declaration only right and here
03:27 - without return type means return type is
03:30 - nothing it is not going to return
03:31 - anything so nothing means
03:34 - void
03:35 - that's it
03:36 - this is what a declaration in
03:37 - declaration
03:39 - here you just have to specify
03:41 - the data type of the arguments and how
03:43 - many arguments
03:44 - just separate out the arguments by comma
03:46 - if three argument comma
03:48 - int
03:49 - and both are of data type in
03:52 - that's it
03:54 - in definition part what you will do
03:56 - suppose
03:58 - this is the declaration so when you are
03:59 - defining return type is void function
04:02 - name is fun now in definition
04:06 - the data type should match int and here
04:08 - you have to specify the name of the
04:09 - variable a b x y m n
04:12 - up to you you can take any variable name
04:14 - so i am taking here x comma int
04:17 - y and here you can write down the
04:20 - logic
04:21 - right and have you call this function
04:24 - no return type while calling only the
04:26 - function name and the number of argument
04:28 - you want to pass
04:30 - suppose i want to pass directly value 5
04:32 - 7
04:33 - that is also fine or here you want to
04:35 - pass like
04:36 - some variable a b
04:38 - and a b values
04:41 - you have specified like in main function
04:43 - in a is equal to 5 b is equal to 7 or
04:45 - you can ask from the user also
04:47 - right that will discuss with the proper
04:48 - program so that is function calling a
04:51 - simple pass the argument sorry maybe the
04:53 - variable name or
04:55 - the number if you are passing the
04:56 - variable name no need to specify here
04:58 - the data type
05:00 - but you have to specify the name of the
05:01 - variable here data type is must
05:04 - name of the variable is optional here
05:06 - data type both data type and name of the
05:08 - variable are must in definition so i
05:11 - hope this
05:12 - difference is clear now let's take that
05:14 - example
05:15 - sum of two number
05:20 - so first of all what
05:22 - better after writing directly the header
05:24 - file
05:25 - whatever function you want to use first
05:27 - of all it's a good practice to always
05:29 - declare that function first
05:32 - in that program
05:33 - right it's a good practice always so
05:36 - nothing it would return
05:38 - name is sum i am taking and i want to do
05:40 - a sum of two numbers of float type
05:46 - so that is declaration you have to
05:48 - specify the data type only right now
05:50 - suppose in main function
05:53 - i am calling this
05:55 - i am calling
05:56 - sum
05:58 - and
05:59 - this this thing will discuss later first
06:01 - of all let me write down the definition
06:04 - part here
06:05 - this pro this this will write down later
06:08 - so i am writing here
06:10 - in definition return type is same sum
06:13 - and here
06:14 - sorry it should be float and float
06:17 - float
06:18 - x coma
06:21 - float
06:22 - y no semicolon here
06:24 - right or you can take int float but if
06:27 - you take here in and hair float then
06:29 - here also the odor should match the
06:32 - first parameter should be in second
06:34 - should be float if you will take first
06:36 - float second end then it will give it
06:38 - so this ordering should match
06:40 - right
06:42 - now and
06:43 - in the definition and here in the
06:44 - declaration these are known as parameter
06:47 - in the function calling these are known
06:48 - as argument parameters are also known as
06:51 - formal parameter arguments are also
06:52 - known as actual parameter right these
06:55 - terms are very important very confusing
06:58 - so now
06:59 - see
07:00 - is it necessary here to
07:03 - take two variable like in a b and ask
07:05 - from the user printf enter value of a
07:07 - and b and scanf
07:09 - no need why
07:11 - because
07:12 - already we are accepting two argument
07:14 - means whenever we call the function
07:17 - there we will pass the argument and the
07:19 - value would be received here we have to
07:21 - do some of these two numbers so we don't
07:24 - have to take from the user so no need to
07:26 - declare any variable here
07:28 - because we have already taken the value
07:31 - so here what you will write just the
07:32 - logic logic is what
07:36 - i am taking suppose
07:38 - variable s s is equal to
07:41 - variable m r x plus y
07:43 - but here s is what local variable so
07:45 - here s you have to declare s is equal to
07:48 - 0 s means sum
07:49 - and it is not returning anything without
07:51 - return type
07:53 - so here only we are going to print
07:57 - sum is equal to percentage d sorry not
07:59 - percentage d
08:01 - both are both should be float so some
08:03 - should be
08:04 - float so here we should write
08:08 - float
08:09 - right so percentage f and
08:12 - name of the variable is s
08:16 - right
08:17 - and that's it
08:18 - so now how to pull this function here i
08:21 - want to pass
08:22 - two values either you can pass
08:24 - static values or you can you know
08:27 - you can declare the values here
08:29 - you can fix the values here like 2.1 3.1
08:34 - so in x what value would be
08:37 - there 2.1 whenever you call the function
08:39 - in y it should be 3.1
08:41 - so whatever the sum it will print but i
08:43 - don't want to fix these values i want
08:46 - the user should enter whenever we run
08:48 - the program it should ask enter two
08:50 - values
08:51 - so user should enter so here
08:54 - what you can say
08:57 - we can take
08:58 - two variables a comma
09:02 - b
09:04 - and here
09:06 - printf
09:09 - we can ask from the user enter values of
09:11 - a and b
09:12 - and with scanf what we can do percentage
09:14 - f percentage because both are float
09:16 - address of a address of
09:18 - b
09:19 - and here after this
09:22 - simply you can call the function
09:25 - sum
09:26 - and
09:27 - what argument you will pass here
09:29 - a and b a comma b the variable name
09:33 - right
09:35 - that's it and now see
09:37 - here here also you can take x y or both
09:40 - should both can be same a
09:43 - b here also here also
09:46 - it's not like you will get any error or
09:48 - any warning message why so because these
09:50 - a and b these variables are local to
09:52 - this function
09:53 - right and these a and b are local to
09:56 - this main
09:57 - right
09:58 - maybe see obviously
10:00 - this is your house
10:02 - this is your neighbor house in your
10:03 - house also maybe two kid having name
10:06 - uh rohan and mohan and your neighbor
10:08 - house also two kid rohan and mohan
10:11 - so
10:12 - is there any problem no because they are
10:16 - in your house and those two kids are in
10:17 - their house so there will be no problem
10:20 - scope is your house and means their
10:22 - house so that is you can say at the
10:24 - house of these two a and b are this and
10:26 - the house of these two variables are
10:28 - this
10:29 - but you have to you know be very careful
10:31 - why you know taking the same variable
10:33 - name you have to identify like these a b
10:36 - and b are
10:37 - uh we are using in this sum these a and
10:39 - b are for this mean so if you are i know
10:42 - learner if you have started programming
10:45 - then better to take different different
10:46 - variable name
10:48 - just to differentiate
10:50 - otherwise you can take same also right
10:53 - and now now see whenever you run this
10:56 - code then first of all function control
10:58 - will go to the main function in main
11:01 - memory would be allocated suppose this
11:03 - memory has been allocated to this main
11:05 - because in main also we will write some
11:07 - we will declare some variable and all so
11:09 - a and b two variable a and b
11:12 - some space has been allocated right
11:15 - enter a and b
11:16 - suppose i have entered float value 5.1
11:20 - and 1.1 so that should be stored here
11:23 - now
11:24 - here a value is 5.1 and b value is 1.1
11:29 - so now function calling so whenever
11:31 - control will go to here
11:33 - now it is function call so it will
11:35 - search for the definition of the
11:36 - function now match with this declaration
11:38 - return type matching sum same number of
11:42 - argument two yes data type of the
11:45 - argument float float float flow ps
11:46 - matching so now no problem now enter
11:49 - here so now some memory would be also
11:51 - located to this function sum this is
11:53 - what called function main is calling
11:55 - function now here we have float s so s
11:57 - is a variable
11:59 - having value 0 s is equal to x plus y
12:02 - now see whenever you call this function
12:04 - what value would be passed
12:06 - in a we have 5.1
12:08 - and b we have 1.1 so actually the values
12:11 - are going to pass so now in x we have
12:15 - here also in in in this also we have two
12:17 - variable these one is s and we have two
12:20 - variable also x and y so x and y x and y
12:24 - so in x we have 5.1
12:27 - and in y it is going to receive the
12:28 - value of b that is 1.1
12:31 - so now whatever the sum that would be
12:33 - stored in s sum is what
12:36 - 6.2 means six point
12:38 - two one two three four five
12:41 - because percentage f is going to you
12:43 - know print what how many digits after uh
12:46 - decimal six
12:47 - so it will it will print this thing
12:50 - printf this
12:52 - now control will reach the closing
12:54 - braces closing this this means
12:55 - back to the where you have called this
12:58 - function here we have called this
12:59 - function means it's written over return
13:02 - it's not returning anything but this
13:04 - will act as return statement means void
13:06 - return so here
13:09 - done
13:10 - now
13:11 - next statement is closing basis of main
13:13 - means once once control will go here
13:16 - this will be vanished
13:18 - this memory has been you know you know
13:20 - freed
13:21 - now this x and y we cannot use these x
13:24 - and y and sum
13:26 - within this main
13:28 - here you cannot write printf percentage
13:31 - f x or y we cannot print because out of
13:34 - this sum
13:36 - they are nothing now the
13:39 - these has been when is the memory has
13:41 - been freed
13:42 - so now
13:43 - control will reach here now exit from
13:44 - the program and this also freed memory
13:47 - has been freed
13:48 - right so this output you will get now
13:51 - maybe you are thinking how many
13:52 - arguments we should pass we don't know
13:54 - so it depends on the program
13:56 - if you are given that
13:58 - write down a program or write down a
13:59 - function which take one argument
14:03 - as input
14:05 - and check that number is
14:07 - even or old
14:09 - means in the program only they have
14:10 - specified you have to take one input as
14:13 - argument so there you have to just
14:16 - specify one argument so that is for
14:18 - assignment for you you have to write
14:20 - down a function right which take
14:23 - one
14:24 - number
14:25 - as input as argument only one number and
14:28 - you have to check that number is
14:30 - even or wrote
14:32 - you have to write down that function
14:33 - means you have to write down obviously
14:34 - the complete program
14:36 - that should fall in this category means
14:38 - it will accept argument but it should
14:40 - not return anything so that is
14:41 - assignment for you you have to write
14:43 - down that program right
14:45 - and see here if i suppose pass three
14:47 - argument then what will happen this
14:49 - thing i'll show you practically right so
14:51 - now let me create a file
14:53 - what we are discussing
14:55 - uh
14:57 - with argument
14:59 - and
15:01 - without return type
15:03 - right
15:10 - now here only after header file only i
15:12 - want to uh declare like void no return
15:15 - type means
15:16 - void and name is sum
15:19 - and suppose i want to pass to argument
15:21 - float
15:23 - and flow
15:32 - both should be return type should we
15:34 - should be float for both the
15:36 - you know
15:37 - argument you pass
15:39 - right now in main
15:43 - what
15:44 - just take
15:49 - two variable float x and y i am taking
15:54 - from the user i want to ask like enter
15:58 - accent
16:00 - why
16:10 - so here we are using specifier what
16:11 - percentage
16:13 - f
16:14 - because we are taking uh the data type
16:17 - float
16:18 - x and y and simply call
16:20 - some past argument x and y
16:23 - that's it
16:24 - now you have to define
16:27 - void sum and here what
16:30 - data type is float
16:32 - you have to specify data type as well as
16:36 - the name of the variable like in a b i
16:39 - am taking here you can take x y also
16:41 - right
16:42 - but i type should be float only because
16:44 - in declaration we have specified that
16:46 - the argument you will pass that should
16:48 - be of float type both the arguments so
16:50 - no need to take any local variables and
16:52 - ask from the user because we have
16:53 - already taken the value
16:55 - in in the form of argument arguments are
16:58 - function is what takes input so these
17:00 - arguments will act as input do some
17:02 - processing whatever logic we will do
17:03 - that is processing and return some
17:05 - output give you some output
17:07 - right so now here i am just taking
17:11 - one variable sum because in s what
17:16 - i want to do a plus
17:18 - b
17:21 - and simply printf you can write down sum
17:23 - is equal to percentage f
17:26 - and the variable name is
17:28 - s
17:29 - and that's it
17:30 - now let me run this and see what output
17:33 - you will get it should ask enter x and y
17:35 - so we have to first of all enter two
17:37 - values
17:38 - so i am taking float so i am entering
17:40 - here 1.1
17:42 - and 3.1
17:44 - so the sum is 4.2 and after that 5 0 you
17:47 - have
17:48 - right
17:49 - and here if you don't want to take any
17:51 - like
17:52 - variable so simply what you can do
17:56 - in printf you just write down
17:59 - what a plus b
18:03 - that is also fine see now let me run
18:05 - this again
18:06 - see enter value of x and y i am entering
18:08 - four point three and six
18:10 - point seven
18:12 - see eleven point zero zero zero you are
18:14 - getting so that is also fine
18:17 - right and here you if you will take x
18:19 - and y that is also fine here you can do
18:22 - x plus y
18:23 - right
18:25 - now here if you pass see here i am
18:27 - passing xy comma eight point one
18:30 - three argument i want to pass
18:33 - and let's run what is there see it
18:36 - giving error is what too many argument
18:38 - to function sum
18:39 - in line number
18:40 - ten in line number 10 i am calling this
18:43 - too many arguments
18:45 - arguments
18:47 - because in the declaration we have
18:49 - specified
18:50 - it will accept only two argument but
18:52 - actually we are passing three argument
18:54 - so it will give it right
18:58 - and if you pass only x
19:01 - see now that
19:03 - what will happen at that time
19:06 - i see
19:07 - error is too
19:08 - few argument to function
19:10 - some means
19:12 - it
19:13 - according to the logic it should pass
19:15 - two argument but you are passing only
19:17 - one it means few argument you are
19:18 - passing so here it is also giving error
19:21 - so
19:22 - how many argument you have to pass
19:23 - exactly what how many arguments you have
19:25 - declared in the uh in the function
19:27 - declaration two arguments x comma y
19:31 - rather than variable you can also pass
19:33 - here static value three point one
19:35 - comma four point one
19:39 - so see now what output you will get
19:43 - and here x it will ask enter x and y i
19:45 - mean
19:46 - and second argument i am passing suppose
19:49 - 10.3
19:50 - but it will give some 7.2
19:53 - why because you have passed static value
19:56 - 3.1 4.1 so in a and b a will accept 3.1
20:00 - b will receive 4.1 so that it will give
20:03 - some of a and b whatever value you pass
20:06 - here in x and you whatever value you
20:08 - will enter
20:09 - despite of that value it will give sum
20:11 - of 3.1 and 4.1 because you are passing
20:14 - static value that is why here better to
20:17 - write down the name of the variable x
20:18 - comma y
20:20 - right
20:21 - so now one assignment for you is another
20:23 - assignment is what i have declared this
20:25 - some something like this int and float
20:28 - so now according to this you have to
20:30 - write down this function
20:31 - some function you have to modify this
20:33 - function you have to try this at your
20:34 - own so now that's it for this video now
20:37 - so now we are left with the one
20:38 - classification that is a function with
20:40 - argument and with return type that will
20:42 - discuss in next video so now i'll see in
20:43 - the next video till then bye take care