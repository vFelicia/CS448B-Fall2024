00:00 - so in the series of learning c plus plus
00:02 - programming language in the previous
00:03 - video we have discussed basic structure
00:05 - of a c plus plus program
00:07 - right
00:08 - now why we write programs like simple
00:11 - programs you will write it starting at
00:13 - two numbers and these kind of things
00:15 - ultimately we learn programming to build
00:17 - some software you can say right and what
00:20 - software generally do they manage the
00:22 - information
00:23 - the information can be in any form like
00:25 - the data
00:26 - in integer data it can be in text form
00:29 - it can be images videos sounds
00:33 - you know the numbers names anything but
00:36 - ultimately software is used to manage
00:37 - that information
00:39 - right
00:40 - now to store that information in the
00:42 - program what you will use
00:44 - sometimes different different you know
00:46 - types of variables and constants we use
00:49 - these kind of things we use many things
00:52 - we use we will discuss these things one
00:53 - by one in detail so in this video we'll
00:55 - talk about
00:56 - constants and variables
00:58 - in c plus plus that we we you know
01:01 - generally use while we write programs so
01:03 - what are constants and what are
01:05 - variables with the help of example with
01:06 - the help of program practical also will
01:09 - see on my laptop right
01:11 - so first is
01:13 - as the name suggests what is constant
01:15 - these are you can say fixed values
01:18 - right
01:20 - or you can see the values that
01:23 - cannot be changed during the execution
01:26 - of a program
01:27 - once you have defined a constant you
01:29 - cannot change
01:31 - that constant you cannot change the
01:32 - value of that constant during the
01:34 - execution of the program you cannot
01:36 - modify that thing these are fixed values
01:39 - right
01:41 - and constant can be
01:43 - integer constant
01:46 - real constant or you can say floating
01:48 - constant floating point
01:52 - character constant and strings
01:56 - right
01:57 - these you can say numeric constant these
01:59 - are character constant
02:01 - so
02:02 - integer constant simple numbers like 1 1
02:05 - 1 -1 0 these are integer constant right
02:10 - 1 2 3
02:11 - these kind of thing 34 54
02:14 - right
02:16 - but
02:17 - it is not an integer con these are valid
02:19 - but if you write something like this
02:22 - dollar 1 2 3 this is not valid
02:25 - special symbol is not allowed if you
02:27 - write like something like this
02:29 - 1 1 comma 1 1 2
02:31 - this number this is also not a constant
02:33 - valid integer constant if you write like
02:35 - something 1 2 space 1 2 3
02:38 - this is not
02:39 - a valid constant right
02:42 - and
02:43 - real or floating point constant are what
02:45 - they have that decimal point like if i
02:48 - write 11.11
02:50 - so this is integer part this is what
02:52 - fractional part and this is decimal if
02:54 - you write something like one one
02:57 - point zero
02:58 - this also comes under floating point
03:00 - constant right
03:01 - you can also write minus 0.1 this is
03:05 - also valid
03:07 - or if you write point
03:09 - 3 4
03:10 - this is also valid
03:12 - right
03:13 - so these are floating point constant now
03:15 - character constant simple anything you
03:18 - write a single character you write in
03:20 - single quote that is
03:22 - named as character constant like if i
03:24 - write this thing a
03:27 - in single quote that is character
03:29 - constant if i write 3
03:32 - in
03:33 - single quote that is also character
03:35 - constant see this
03:37 - 3 is different from this 3 this is
03:40 - integer constant decimal 1 decimal
03:42 - constant right integer constant and this
03:45 - is character constant so character
03:46 - constant
03:48 - we store generally we stored in the
03:50 - computer memory by the
03:53 - in which form sky call
03:55 - american standard code for information
03:57 - interchange right so in sky value of
04:00 - this small a is 97
04:03 - right
04:04 - and
04:05 - this 3 is sky value of 0 is 1 is 49 2 is
04:10 - 50 and 3 is 51 so sky value of this 3 is
04:13 - 51 and this 3 is single integer simple
04:17 - integer constant so this this and this
04:19 - are different thing right but this is
04:21 - not a character constant if you write
04:22 - something like a b
04:24 - no
04:25 - here you have two characters
04:28 - it this under single quote there can be
04:31 - only single character or a symbol like
04:32 - symbol
04:33 - dollar this is also character constant
04:36 - we have space this is also character
04:38 - constant we have comma this is also
04:40 - character constant in single code
04:42 - we have hash in single code this is also
04:44 - considered as character constant right
04:47 - and these things abc
04:50 - capital a b c the special symbols
04:52 - numbers they all have their
04:54 - no corresponding sky value
04:56 - so in sky value they are stored right so
04:59 - this is character constant now string
05:02 - string
05:03 - as we know it's like sequence of
05:04 - characters so
05:06 - in double quotes we write like a b c
05:09 - or in double quotes if in double quote
05:11 - you will write a
05:12 - this is a single character but you write
05:14 - in double quotes so this would be string
05:17 - constant string literally it is not
05:18 - character constant
05:20 - this is different from this this is
05:21 - character this is considered as string
05:25 - by default compiler will add a null
05:28 - you know that
05:30 - null character
05:32 - this
05:33 - just to show the termination of the
05:35 - string so the string would be stored in
05:37 - memory like a and null and this would be
05:39 - stored simply by a
05:41 - no null character because this is a
05:42 - single character character constant
05:45 - right
05:47 - so i guess these constant are clear to
05:49 - you see these are same as we have
05:51 - discussed in c language so if you want a
05:53 - detailed video in this detailed
05:55 - explanation you can go to that video the
05:57 - link of that video i'll put in this ipad
05:58 - you can check out that i think the
06:00 - basics like what is constant that is
06:02 - clear to you now how to declare constant
06:04 - and why we declare constant let's see
06:06 - that thing
06:07 - and see
06:08 - this is also a string one two three four
06:10 - double quotes this would also be
06:12 - considered as a string it's not like
06:14 - that only characters
06:15 - sequence of characteristic character can
06:17 - be like any alphabet also special symbol
06:20 - like
06:23 - this would also be a string
06:25 - right
06:26 - so i hope now string is clear to you now
06:28 - let's see how to declare
06:30 - constants two methods are there you can
06:33 - use a const keyword
06:35 - something like this in a program i can
06:37 - write
06:39 - const keyword
06:42 - data type
06:44 - primitive data although we'll discuss
06:46 - data type in this series later but i
06:48 - hope they type simple data is clear to
06:50 - you that we have discussed in uh you
06:51 - know c programming language int the name
06:54 - of the variable a and just the value 10.
06:58 - this is the correct
07:00 - definition you can say
07:03 - of constant how you can
07:05 - write a constant or you can define a
07:07 - constant right
07:08 - if you write something like this
07:10 - const int a and then a is equal to 10
07:14 - that is not valid this would be valid
07:17 - right
07:18 - now
07:19 - this a is having constant value now you
07:21 - cannot change this value in your program
07:23 - suppose i'll print c out
07:26 - a
07:27 - so this line will print 10
07:29 - and after that i want to change the
07:30 - value a is equal to 15
07:32 - and again i will print c out a so this
07:36 - line will give error
07:37 - because this is what read-only value you
07:40 - cannot modify it and you are you want to
07:42 - modify the only value so that would be
07:44 - an error because this is a constant a
07:48 - right
07:49 - so
07:50 - and see this a is what
07:53 - now how to store this value in memory
07:56 - like this
07:57 - whenever your program will run
08:00 - in your program we have some
08:02 - instructions we have some variables like
08:04 - we have data and instruction
08:07 - like add two numbers so data would be
08:09 - the numbers like 5 and 4
08:11 - and the instruction would be
08:14 - add two numbers like
08:15 - we are supposed to add two numbers you
08:17 - write down the logic that thing
08:19 - so for that when your program will run
08:21 - some memory would be located in ram main
08:23 - memory
08:24 - right so some memory would be for your
08:28 - instruction
08:30 - the data some memory would be for your
08:32 - instructions and some memory would be
08:33 - for your data so how you will store this
08:36 - data like five
08:38 - and four in memory obviously you have to
08:40 - store
08:41 - in zeros and one one forms it would be
08:43 - stored not directly five and four
08:45 - it is just for your understanding
08:46 - purpose so we have to name this memory
08:49 - location
08:51 - because how you will store or how you
08:52 - will access that memory location
08:54 - if you don't have any name suppose i
08:56 - don't have any name then how you will
08:57 - call me
08:59 - right
09:01 - hey hi hey girl that is not a correct
09:04 - way
09:05 - name like jenny that is fine
09:08 - yes i have some space i occupy some
09:11 - space on this planet earth and i have a
09:13 - name
09:14 - right so same the data is there that is
09:17 - occupying some space in memory and that
09:18 - data is having some name under some
09:20 - memory named memory location the data is
09:22 - there so this suppose memory location
09:25 - name is a this is b
09:27 - so this a and b are
09:28 - just variables
09:31 - variables
09:32 - so variable is not like where we store
09:34 - data no we store data in memory but
09:36 - variable is
09:37 - the name of the memory location where we
09:40 - store the data so it's just a named
09:43 - memory location that's it it's a
09:45 - container for the data that's it
09:47 - name of the memory location right so
09:50 - these are variables and variables as the
09:52 - name suggests
09:53 - simple variables
09:54 - uh these well the value of the variable
09:56 - can be modified during the execution of
09:58 - a program the value of the constant
10:00 - cannot be modified
10:01 - right so i hope variable is clear to you
10:04 - right
10:05 - so now let's see the difference
10:07 - this value you cannot modify but if you
10:09 - don't write here const
10:11 - now in a this is now simple variable a
10:13 - is name of the variable integer type and
10:15 - this is the value
10:16 - now print
10:19 - you can print you can
10:20 - print the value using c out object and
10:23 - after that you can change it is equal to
10:25 - 15 and this line will print now 15. now
10:28 - this program will work fine i'll show
10:29 - you this on my laptop also because this
10:32 - is not constant this is variable
10:34 - right
10:35 - now yeah i think variable is clear to
10:38 - you
10:39 - uh just a named memory location of the
10:41 - name of the memory location where we
10:42 - store
10:44 - the
10:44 - data our data right so data can be
10:47 - integer floating type of data character
10:50 - or string type of data any data can be
10:52 - there right according to that we take
10:53 - the name of the variable there are some
10:55 - rules to define name of the variables
10:57 - right suppose that should be meaningful
11:00 - like if you want to calculate sum of two
11:03 - numbers
11:04 - so
11:05 - the variable you can take like sum
11:08 - in sum you will print if you want to
11:10 - calculate average so just take the name
11:13 - of the variable avg or average that
11:16 - should be meaningful it's not like that
11:18 - i'm taking x
11:20 - here i'll store some of two numbers yeah
11:23 - you can take this it's not compulsory to
11:25 - take sum
11:26 - in sum is equal to a plus b i'll store
11:29 - the sum it's not compulsory you can take
11:31 - x also x is equal to a plus b that is
11:33 - also fine
11:35 - but sum is more meaningful to you
11:37 - so it would
11:38 - increase the readability of your program
11:40 - right
11:42 - and see name of the variable always
11:45 - contains the letters
11:46 - a to z or a to z or the
11:50 - that android underscore
11:54 - and numbers zero to nine no special
11:56 - characters are allowed right like uh
12:00 - and the name of the variable always we
12:02 - started
12:03 - from a
12:04 - letter
12:05 - like s u m sum or underscore
12:09 - this is also fine
12:10 - but 1 s um this is not allowed
12:14 - but sum
12:15 - sum 1 this is allowed
12:18 - always started from either a letter
12:20 - capital or small or underscore that's it
12:24 - dollar s-u-m this is not allowed
12:27 - any special symbol in this is not
12:29 - allowed like or you can say avg dollar
12:32 - this is not allowed
12:34 - or you can say
12:36 - abe average
12:38 - underscore
12:39 - or sum this is allowed
12:42 - underscore is allowed
12:44 - i hope these rules are clear to you now
12:48 - now second method let's see the second
12:49 - method to define constant second method
12:52 - is
12:53 - use this line hash define
12:56 - macro
12:58 - before
12:59 - obviously see you can write down this
13:01 - line anywhere in your program generally
13:02 - we write
13:04 - just uh after the header files
13:07 - right
13:08 - this is the correct
13:10 - you can say location to use hash defined
13:12 - type of things otherwise you can use it
13:14 - in anywhere in the program that is it's
13:17 - not a rule it's not compulsory that you
13:18 - have to define you know after header
13:21 - file only has to find just name of the
13:23 - constant i am taking suppose by
13:25 - 3.14
13:27 - that's it
13:29 - or hash define
13:32 - any name of the variable like n 50
13:35 - or hash define
13:38 - max
13:39 - 100
13:42 - right
13:43 - so
13:45 - this pi like why we define constant
13:49 - see constant is what the value cannot be
13:51 - changed in the program so generally
13:54 - if you want that this value should be
13:56 - fixed like pi value should be fixed
13:58 - 3.1415
14:00 - right
14:01 - because yeah it is fixed
14:03 - so if you define it as a constant no one
14:06 - can change it in your program
14:08 - see accidentally if someone by mistake
14:12 - change want to change the value of any
14:13 - constant want to change the value of pi
14:16 - that will give error
14:17 - right if you don't define it as a
14:19 - constant
14:20 - simple variable if you take it then
14:22 - anyone can change that thing
14:25 - maybe not
14:26 - intentionally but
14:27 - accidentally by default and that would
14:30 - give you
14:31 - error in the program or maybe not error
14:33 - but you will not get correct output
14:36 - right
14:37 - and if your program is large and you
14:40 - will not you are not getting correct
14:41 - output and you are not getting any error
14:43 - even so it would be very difficult for
14:45 - you to find out these kind of things
14:47 - like where what is the thing what where
14:50 - we have uh you know going wrong
14:52 - so better if you want that this value
14:54 - should be fixed in your program better
14:56 - to define that value as a constant
14:59 - either by using hash defined method or
15:01 - by using const method
15:03 - so now this value cannot be changed in
15:05 - the program this n value is also fixed m
15:07 - max value is also fixed now see here i
15:10 - am taking capital letters
15:12 - this as you can say naming convention
15:15 - when you define a constant using hash
15:16 - define using this line
15:18 - then
15:19 - all capital letters we take generally
15:23 - because when we define variables in our
15:25 - program we generally take small letters
15:28 - so
15:29 - just to avoid the confusion like this is
15:31 - a simple variable in a program or this
15:34 - is a macro type of thing
15:36 - to differentiate these kind of things
15:38 - we take like these things the macro
15:40 - constant
15:42 - in capital letters but it is not a rule
15:44 - you can simply write small mix that is
15:46 - also fine
15:48 - right but it just
15:50 - for your convenience to differentiate
15:52 - these kind of things we take these uh as
15:56 - a in capital letters
15:59 - so now whenever you program you write
16:02 - the max or n or pi that would be
16:04 - replaced by these values before the
16:06 - compilation start
16:08 - by the preprocessor right i hope the
16:10 - working of the pre-processes
16:12 - preprocessor is clear to you because we
16:13 - have already uploaded a video in this
16:15 - thing
16:16 - you can find out that video in c
16:18 - programming playlist right
16:20 - so i think the difference between
16:22 - constant and variable is clear to you
16:23 - let me just show you with the help of a
16:25 - program
16:26 - so let's create a new program here i'm
16:29 - just taking the variable
16:32 - const and
16:34 - where
16:35 - dot cpp extension would be dot cpp right
16:38 - so first thing
16:40 - you have to
16:42 - include
16:44 - iostream header
16:45 - right
16:47 - then we simply write
16:49 - in domain
16:52 - and
16:53 - just taking a constant c o and s t const
16:57 - int
16:58 - a is equal to 89
17:01 - and i'm just
17:02 - printing a
17:05 - semicolon
17:06 - right sorry let's take e and d l
17:10 - so i have told you
17:11 - name spaces these are under name spaces
17:13 - these objects here out
17:15 - the stream objects e and dl these are
17:17 - under a name space the header file is a
17:20 - header is i o stream under this header
17:22 - there is a name space
17:24 - within those namespaces these are
17:26 - declare these things are there defined
17:29 - so you have to use
17:31 - std
17:33 - this namespace name std
17:36 - colon column scope resolution operator
17:38 - right
17:40 - now this is fine or after header file
17:42 - also you can write down something like
17:44 - this using
17:46 - namespace
17:48 - std
17:49 - rather than writing stdstd here but it
17:52 - is not a good practice to write this
17:53 - thing because in std namespace we have
17:56 - many things that we don't want to use
17:59 - right
18:01 - so better
18:02 - to use with the you know the things the
18:05 - objects the classes or the functions
18:08 - where from where these are from a study
18:10 - name space you want to use
18:12 - that should be you know you can say
18:14 - prefixed with std name space
18:17 - that also you can write or maybe it is
18:19 - like cumbersome for you guys so you can
18:21 - write down this thing using namespace sd
18:23 - that is also fine
18:25 - right
18:28 - or the next thing is you can use
18:30 - something like this using std
18:34 - c out
18:37 - using
18:38 - std
18:42 - endl
18:44 - and generally we also use like this
18:46 - using s
18:48 - t d
18:49 - c and also generally we use in a program
18:52 - so three you can define something like
18:54 - this now you don't need no need to write
18:55 - down this std again and again
18:58 - now anytime
19:00 - you can write c out in your program and
19:01 - you need to write down study colon colon
19:04 - cl
19:05 - because you have used this using
19:08 - so now you can use this thing throughout
19:09 - your program okay now
19:11 - this is constant let me just first run
19:14 - this and see what output you are getting
19:16 - whether it's printing the value of a or
19:17 - not
19:24 - see it is 89 right now i want to modify
19:27 - this a is equal to 78
19:31 - and again i want to print c out
19:33 - a
19:34 - endl
19:36 - now see already there is a red mark
19:40 - under the say and you can the expression
19:42 - must be a modifiable l value
19:44 - because it is a constant so you can
19:47 - modify it
19:49 - error is there assignment of read-only
19:51 - variable a the variable is read only
19:54 - right if you take simple
19:56 - variable
19:58 - in a89
20:00 - and this thing
20:01 - now that is fine now first time it is
20:03 - printing 89 next time it is printing 78
20:07 - right
20:08 - so that is how you can define constants
20:10 - right
20:11 - so now
20:14 - let me just write down here const
20:17 - here you can write down float
20:19 - any character constant you can take
20:21 - string constant you can take if you take
20:23 - string see if i take string constant
20:25 - here
20:26 - so how you will write const
20:30 - if i write like string
20:32 - name of the variable is str i'm taking
20:36 - equal to i'm assigning
20:38 - jenny
20:40 - khatri
20:41 - right
20:46 - semicolon see now string identifier
20:49 - string is undefined
20:51 - so
20:52 - string here is
20:54 - as a class
20:56 - you know in c plus plus
20:58 - so that is in a header known as string
21:02 - and in that header we also have multiple
21:05 - predefined functions
21:07 - which you can perform with string so to
21:09 - use this string you have to include
21:13 - str ing string this header
21:18 - right
21:18 - and this still
21:21 - this string is what
21:23 - undefined because see header is fine but
21:26 - under which name space this string is
21:28 - under std so either you can write down
21:31 - here std colon colon
21:34 - now there will be no error
21:36 - right
21:36 - and c out
21:38 - just name of this variable
21:40 - string
21:42 - right
21:44 - or you can use
21:46 - here also using std colon colon string
21:48 - that is also fine right
21:50 - now let me just run this and show you
21:52 - what output you will get here
21:54 - okay see it is printing
21:56 - jenny
21:58 - now if you want to change this
22:01 - str equal to high
22:04 - it will give error
22:06 - you cannot change it see
22:09 - you cannot change let me just show you
22:11 - what you will get let me just run this
22:12 - and show you
22:14 - see it you will
22:16 - get an error right so you cannot change
22:19 - it
22:20 - now it will work fine and it will print
22:24 - simply what is the string janika three
22:26 - see it is printing janikatri here
22:29 - right
22:30 - so i think this is clear to you guys now
22:34 - see in string we have what just press
22:36 - ctrl and click to this string
22:44 - it is components for manipulating
22:45 - sequence of characters
22:50 - so you can see this is standard c plus
22:52 - library header include string this is
22:55 - the header so that's why we include this
22:57 - hash include
22:58 - uh
23:00 - string right right
23:04 - and they have defined these these system
23:06 - headers here we have right
23:08 - in these system headers you can click on
23:11 - any header and there you will get many
23:14 - things defined in namespace std like
23:17 - just basic string if i
23:20 - click then
23:23 - you will find here
23:24 - see
23:27 - see this is the namespace std
23:31 - right so this namespace std is in many
23:33 - headers iostream also in string also in
23:37 - all other headers also this is named and
23:39 - standards all the standard things are
23:41 - within this namespace std right so
23:44 - that's why we have to include std so now
23:46 - you can try out the different method of
23:48 - defining constant like hash define you
23:50 - can take a constant name n or max and
23:53 - the value and you try to change that
23:55 - value in your program and see what
23:57 - output you are getting that is for your
23:59 - assignment
24:00 - right you have to try out this thing at
24:02 - your home