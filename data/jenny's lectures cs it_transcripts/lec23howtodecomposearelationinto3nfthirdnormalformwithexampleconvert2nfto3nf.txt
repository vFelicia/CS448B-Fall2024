00:00 - in the previous video we have discussed
00:02 - how to decompose a relation into second
00:05 - NF means second normal form right in
00:07 - this video we are going to see how to
00:09 - decompose a relation into third normal
00:11 - form right
00:13 - I mean suppose a relation is given which
00:14 - is in second normal form then how you
00:17 - are going to convert it into third
00:19 - normal form right maybe a relation is
00:21 - given which is in first normal form and
00:23 - you are supposed to convert it into
00:24 - third normal form same steps would be
00:26 - repeated right but here I am taking
00:28 - relation is in second normal form this
00:30 - is the relation these are the functional
00:32 - dependencies right this is in second
00:34 - normal form means there is no partial
00:36 - dependency there but this is not in
00:39 - third normal form now you have to
00:40 - decompose it into third normal form
00:43 - right to remove the anomaly's fine we
00:47 - have already discussed all the things
00:49 - about why we do normalization and all
00:51 - right in the previous videos you can
00:53 - check out the DBMS playlist link in the
00:55 - description box right so now it is in it
00:59 - is not in third normal form because
01:00 - there is transitive dependency in this
01:03 - relation transitive dependency means C
01:06 - if either the left-hand side is super
01:11 - key or the right-hand side is prime
01:14 - attribute then you can say that this is
01:16 - not a transitive dependency right if any
01:20 - of these two condition is satisfied it
01:22 - means either left hand side in super key
01:24 - or right hand side is prime attribute
01:26 - right then this is not transitive
01:29 - dependency otherwise that would be
01:31 - transitive dependency and that would
01:32 - violate the third normal form rules now
01:36 - first of all you have to identify which
01:38 - functional dependency is creating a
01:40 - problem which functional dependency is
01:42 - violating the third normal form rule
01:45 - right so for that you have to find out
01:48 - the candidate key right how to find
01:49 - candidate key that also we have already
01:51 - discussed in the previous videos right
01:53 - take all that Reb use find out the
01:56 - closer try to discard as many elements
01:58 - as you can right using a I can drive B
02:01 - so if you have a you can discard be
02:04 - using transitive property using a I can
02:08 - drive C so I have a I can discard C
02:12 - and now seek and drive D so using a I
02:16 - can drive C and using C I can drive D so
02:19 - by transitivity property a can also
02:22 - drive D so if you have a you can drive D
02:25 - also not only is remaining we have
02:28 - discarded all the elements try to
02:29 - discard as many attributes as you can
02:32 - see find out a closer a using I can try
02:36 - be using B I can drive C using say I can
02:39 - drive do all that my goods are there so
02:41 - is what a super key now right now is
02:44 - there any proper subset no proper subset
02:46 - so you can say that this is also
02:47 - candidate one candidate here we have got
02:51 - prime attributes huh a right because the
02:57 - attributes which are consisting in the
02:59 - candidate key which are known as prime
03:01 - attribute now find out this prime
03:04 - attribute is on the right hand side of
03:05 - any functional dependency or node
03:07 - no it means there is no more candidate
03:10 - he exists here means only one candidate
03:12 - key for this relation that is a if
03:15 - candidate key is simple that is it is
03:18 - having only one attribute then
03:20 - definitely that would be in second
03:22 - normal form because there is no chance
03:23 - of partial dependency now which is
03:27 - transitive dependency C for that you
03:31 - have to check either left hand side is
03:34 - super V for that a left hand side is
03:38 - super cure you can say candidate key yes
03:40 - so this is not transitive dependency
03:42 - right now B is B super key or candidate
03:46 - key you can say no right okay fine
03:50 - now check the right hand side is right
03:52 - hand side any Prime attribute no Prime
03:55 - attribute is only C so this is not
03:58 - satisfying you know neither the first
04:00 - property nor the second property right
04:02 - so this is transitive dependency this is
04:05 - creating a problem now see C is not
04:07 - candidate key or you can say super key
04:09 - yes right hand side B is not prime
04:11 - attribute so this is also transitive
04:13 - dependency see I have already discussed
04:15 - this is thus transitive dependency in
04:17 - detail in the previous video so you must
04:21 - check out those videos first in this
04:23 - video I am NOT going into detail right
04:26 - just going to see the steps of
04:28 - conversion now these two functional
04:30 - dependencies are creating problem right
04:33 - now this first of all take out this one
04:37 - find out be closer right take out this
04:40 - functional dependency and find out
04:42 - though be closer means take the
04:43 - left-hand side be closer means we can
04:47 - drive be using be I can do see using see
04:49 - I can brave be to create a separate
04:53 - relation having B C D attributes right
04:58 - now again this one find out C closer
05:03 - using seek I can drive C then D so
05:07 - create a second relation containing C D
05:11 - right two sub relations are there and
05:14 - the remaining would be in third sub
05:18 - relation now remaining is only a right
05:23 - but it's not like that we are going to
05:25 - put a only in that relation right now
05:28 - see we have to put something common
05:31 - suppose I'm taking first of all the join
05:35 - of r1 and r3 so what I can put common
05:39 - either B or C or B right it's up to you
05:44 - but the problem is what this
05:46 - decomposition should be what dependency
05:49 - preserving a lossless now for lossless
05:52 - join decomposition the common attribute
05:54 - must be super key of at least one sub
05:58 - relation means either this one or this
06:01 - one
06:02 - right so it's better to put that
06:06 - attribute common which is super key for
06:08 - at least one sub relation see now I can
06:10 - see that B is driving BCD all the
06:13 - attributes means all the attribute of
06:15 - this relation we can drive see also and
06:17 - D also means being super key for this
06:19 - relation definitely you can say right so
06:21 - better to put B common now here you can
06:25 - put C common suppose I am taking R 3 is
06:28 - AC so now you have to practice it if I
06:33 - am taking C as a common attribute then
06:36 - it is lossless or lossy right in my
06:39 - opinion
06:40 - actually it would be lossy right but you
06:43 - try it that is why we are taking here be
06:47 - common you can try it and you can tell
06:49 - me in the comment box is it possible or
06:50 - not right now we will see it is
06:52 - dependency preserving or Nadia
06:54 - definitely it is lost less now for
06:55 - dependency preserving you have to find
06:57 - out dependency set for this one f1 right
07:00 - how to find out find out be closer see
07:02 - closer D closer first of all BC B B 2 B
07:07 - is trivial so using B I can drive CD C
07:12 - closer is only CD this is trivial so I
07:15 - can write this C can drive D D closer is
07:18 - only B this is free with right now we
07:21 - take B C but C B is determining all that
07:25 - reduce remaining attributes right so no
07:27 - need to check for B C and B D because
07:31 - that would be what duplicate right
07:33 - because using only bi can drive all that
07:36 - the dudes then what's the need to check
07:37 - B C and B D right definitely they can
07:40 - drive all the attributes right so check
07:42 - for CD CD closer would be only CD and
07:47 - this is trivial so no need to take this
07:48 - one so only functional dependencies are
07:50 - these 2 and f2 would be see closer D
07:56 - closer this is trivial so C can drive D
08:01 - right now if 3 would be a closer and be
08:07 - closer a closer would be what C using
08:10 - this functional dependency you have to
08:11 - find out a closer would be a B C and D
08:15 - so a 2 a struggle C and D are not part
08:18 - of the sub relation so we are not going
08:20 - to take this B is only part of the sub
08:22 - relation so it would be a can drive B be
08:28 - closer would be B C and D B 2 B is
08:32 - trivial and CD are not part of the sub
08:35 - relation so we are going to take this
08:36 - right so f 3 is having only one
08:40 - functional dependency this is 1 and this
08:42 - is having two functional dependencies
08:44 - now check we are supposed to convert
08:47 - this decomposing into third normal form
08:50 - but it is not compulsory that after this
08:52 - decomposition this all the sub
08:54 - are in third normal form right you have
08:57 - to check it again right this is very
09:00 - important
09:01 - now check see this is containing only
09:04 - two attributed to so definitely this
09:06 - would be in bcnf and this would be in
09:08 - bcnf you can check out this thing
09:12 - because we have already discussed the
09:14 - rule of bcnf the left-hand side of every
09:16 - functional dependency must be super key
09:19 - so find out super key for this one and
09:21 - this one using the this method and check
09:23 - out the left-hand side this would be
09:25 - definitely been busier but check out for
09:26 - this one
09:27 - so for checking that it is in third
09:29 - normal form or not we have to find out
09:31 - that there is any transitive dependency
09:33 - exist or rule for that you have to find
09:34 - out candidate you have to find out
09:36 - candidate he using this process right so
09:41 - discard be using the I can drive CD so I
09:44 - can discard CD so B is what only be
09:47 - closed are using B I can find out all
09:50 - that tribute so B is super kick right so
09:53 - B is definitely candidate he because
09:55 - there would be no proper subset
09:57 - now check bees on the right hand side of
10:00 - any functional dependency or not no so
10:02 - there would be only one candidate key
10:03 - that is be only so prime attribute is
10:05 - only B now check see ya this is the left
10:09 - hand side is candidate key what you can
10:12 - say super giving us B is super key also
10:13 - right now this is not transitive
10:18 - dependency not check for this one is C a
10:22 - super key or candidate key know is be a
10:25 - prime attribute no this is still
10:30 - transitive dependency right so this is
10:34 - still in second normal form after
10:38 - decomposition still it is in second
10:40 - normal form it is not in third normal
10:42 - form yeah it isn't be seen if it isn't
10:45 - be seen in but we have to take the
10:47 - lowest one lowest one is among all three
10:51 - second so this decomposition is still in
10:54 - second normal form again you have to
10:57 - apply decomposition again you have to
10:58 - apply the same steps now we are going to
11:02 - decompose only this relation we already
11:06 - got two sub relation now
11:08 - how to decompose the sub relation right
11:11 - so now check which functional dependency
11:14 - is creating a problem this functional
11:16 - dependency is creating a problem because
11:18 - this is not transitive dependency so
11:20 - take out this one and find out see
11:22 - closer see now I am decomposing this one
11:26 - so take this functional dependency we
11:28 - are not going to consider now this one
11:30 - right we are on this relation so you
11:33 - didn't see I can write the only nothing
11:35 - else see two now suppose next sub
11:38 - relation is our 1 1 suppose I am taking
11:41 - sub relation and that will consider that
11:46 - will take a tribute CD remaining
11:49 - attribute would be suppose r1 to the sub
11:52 - relation remaining is only B now we have
11:56 - to put something common to make it
11:57 - lossless common attribute should be what
12:01 - super key any at least 1 sub relation to
12:04 - make it lossless and we know that C can
12:07 - drive CD means all that repute of the
12:09 - sub sub relation so C is what candidate
12:12 - key or you can say super key for the sub
12:14 - relation definitely we know right so we
12:17 - put C common here so this is definitely
12:20 - lossless because the common attribute is
12:22 - super Q at least one sub relation now it
12:25 - is dependency preserving or not check
12:27 - this one also you have to check now also
12:29 - this is in this is containing two
12:31 - attribute into attribute so definitely
12:33 - that would be in bcnf and bcnf right my
12:36 - dear ultimately right so check out it is
12:39 - dependency preserving or not find out
12:41 - dependency set of r11 same find out see
12:46 - closer be closer I think that would be
12:49 - only seek and drive D now we will
12:52 - consider this functional dependency said
12:55 - because we are now decomposing this sub
12:57 - relation not this one so do not consider
13:00 - this one consider now this functional
13:03 - dependency said so only one would be
13:05 - there and f2 in f2 we would have find
13:09 - out be closer that would be B C and D
13:14 - right so d is not part of this one so
13:17 - bacon
13:18 - I see and using you can say see closer I
13:23 - can drive C and E C to say story well D
13:27 - is not part of this one so we are going
13:28 - to take this one so one is this one and
13:32 - one is this one so now we have
13:35 - decomposed this original one into four
13:38 - sub relation one is this one R 1 1 1 is
13:41 - R 1 2 we are not going to take this R 1
13:44 - because we have what decomposed it into
13:47 - these two one is this R 2 and one is
13:50 - this R 3 4 right now if you check
13:55 - carefully see R 1 1 is also C D and R 2
13:59 - is also C D so you can discard either
14:01 - this one or this one
14:02 - these are the click 'add right so that
14:05 - the composition is what suppose I am
14:07 - discarding this R 1 1 right I'm not
14:10 - taking this one because this is Syria
14:11 - I'm taking I 2 so that the composition
14:14 - would be R 1 to having bc r 2 having C D
14:20 - and R 3 having a B and as we know this
14:27 - is having only two attribute so this
14:30 - would be in bcnf this is also in bcnf
14:32 - this was also in bcnf this is also in
14:33 - bcnf so we wanted to convert it into 3/3
14:37 - and F but by default to be how converted
14:40 - into bcnf so that is also possible and
14:42 - the decomposition is lossless as well as
14:45 - dependency preserving how to check
14:47 - dependency preserving see you you know
14:51 - this this this and this is it equivalent
14:55 - of this F or not means a is driving B is
15:00 - this exists here in this for yes this is
15:03 - there we can drive C yes this is there C
15:06 - can drive D yes this is there so all the
15:10 - functional dependency original
15:11 - functional dependencies are there after
15:13 - decomposition so it is dependency
15:16 - preserving also and lossless join
15:18 - decomposition as well right so you have
15:20 - to take care of these two properties
15:22 - also with this decomposition right so
15:27 - maybe sometimes they can ask you they
15:29 - can give you this relation
15:30 - functional dependencies Annika take an
15:32 - ask you how many sub relations are
15:34 - required to convert it into bcnf or to
15:37 - convert it into third normal form right
15:40 - so how many sub relations would be
15:42 - required 1 2 & 3 not 4 1 2 3 4
15:47 - no because these end this is what same
15:51 - means to placate out there CD and CD so
15:54 - we will take only 1 so 3 sub relations
15:56 - would be required right this type of
15:58 - questions can also be asked right so I
16:01 - hope you got the steps now sometimes
16:04 - when a relation is in 2/3 and 1/2 and
16:06 - when you are going to convert it into
16:07 - bcnf that sometimes dependency
16:11 - preserving bcnf decomposition is not
16:14 - possible sometimes right but up to third
16:18 - normal form
16:19 - it is also always possible lossless Plus
16:22 - dependency preserving right so in that
16:25 - that exceptional case we will discuss in
16:28 - next video with the help of an example
16:30 - right so now in the next video till then
16:33 - bye take care