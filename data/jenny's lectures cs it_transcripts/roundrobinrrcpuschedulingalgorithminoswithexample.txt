00:00 - the topic is round-robin scheduling
00:02 - algorithm so we'll discuss first of all
00:04 - the theory about this two or three
00:06 - points important points and then we'll
00:07 - discuss this with the help of one
00:08 - numerical see this type of scheduling
00:11 - algorithm is used in multitasking
00:13 - operating system or you can say time
00:14 - sharing operating system we have
00:16 - discussed many types of operating
00:18 - systems the there in the that video we
00:20 - have discussed what is multitasking
00:21 - operating system see let us take an
00:24 - example when you are working on your
00:25 - laptop then at same time you're you know
00:28 - maybe listening songs and the same time
00:31 - they are surfing on internet and as well
00:34 - as some background processes are also
00:35 - running at the same time so many
00:37 - processes are running and it seems that
00:39 - all the processes are running parallel
00:41 - but it is not true it is based on that
00:44 - time quantum every process the operating
00:48 - system will allocate some unit of time
00:51 - to each process maybe 2 millisecond ok
00:54 - maybe for 2 millisecond the CPU will be
00:57 - allocated to that your process which is
01:01 - running your Windows Media Player and
01:03 - another 2 for 2 unit or for 2 unit of
01:06 - time or 2 millisecond some background
01:08 - processes running may be that
01:09 - maintaining the system clock of your
01:11 - laptop something like this ok and this
01:15 - is the switching between these processes
01:17 - see and this switching is so fast that
01:22 - it looks like that all the processes are
01:24 - running parallel xr4 sorry processor
01:27 - inori but i sending you there that is
01:29 - not actually true
01:30 - this is what the multitasking operating
01:32 - system or you can say time sharing
01:34 - operating system so in those kind of
01:35 - operating system this for sure dueling
01:38 - the processes which kind of scheduling
01:40 - algorithm is use that is a round-robin
01:42 - scheduling algorithm ok so this
01:44 - algorithm is similar to first-come
01:47 - first-serve but with some time quantum
01:50 - one extra thing is what with some time
01:53 - quantum and this algorithm is what the
01:55 - mode of this algorithm is what it is
01:57 - always pre-emptive scheduling algorithm
02:00 - okay now what is this time quantum you
02:05 - can say time quantum is the time or the
02:08 - period of time for which a process is
02:11 - allowed
02:13 - to run uninterrupted in a pre-emptive
02:16 - multitasking operating system in one go
02:19 - okay in this case it is not like that we
02:23 - pick one process based may be based on
02:25 - some may be the criteria of arrival time
02:28 - or burst time and will complete that
02:30 - process and after that another process
02:32 - will be pegged and completed sex
02:34 - equation it's not like that we pick one
02:37 - process the criteria is what the time
02:40 - quantum plus arrival time also okay
02:42 - arrival time plus time quantum the
02:45 - criteria fine we'll pick one process
02:48 - which has been arrived in the ready
02:50 - queue will control the CPU da locator to
02:53 - that process that process will continue
02:54 - its execution
02:55 - till the time quantum expires maybe it's
02:59 - too unit of time three unit of time four
03:01 - unit of time okay for that time quantum
03:04 - that process will continue its execution
03:06 - and after that if that process has been
03:10 - completed then it's fine it will go to
03:11 - the terminated state terminated state
03:14 - but still after the expire of the time
03:16 - quantum still it needs some time to
03:20 - complete it its execution then again
03:22 - that process will go to the ready queue
03:25 - and another process will be picked and
03:28 - CPU would be elevated to that process
03:30 - okay so this would be done in a in a
03:33 - round robin fashion or you can say
03:35 - circular fashion so in this case we will
03:37 - also maintain one ready queue and then
03:39 - we will draw the Gantt chart right so
03:42 - main advantage of this algorithm is what
03:44 - it would give you the deterministic
03:47 - response time to each process or you can
03:51 - say in case of the average response time
03:52 - it is one of the best algorithm now let
03:57 - us take this example we are given five
03:59 - processes arrival time of these five
04:01 - processes and this is the burst time of
04:03 - these processes we are just considering
04:05 - the CPU bound processes none of the
04:07 - process will go for any i/o device doing
04:10 - its execution okay see now we will also
04:15 - maintain a ready queue if you will
04:17 - maintain our ready queue also in this
04:19 - case along with the Gantt chart then
04:22 - there will
04:23 - very less chance that you will get it
04:26 - you will get the answer wrong okay so I
04:29 - highly recommend you to maintain already
04:32 - q in this case in town dropping by
04:35 - solving the numerical zone round-robin
04:37 - scheduling
04:38 - okay now the Gantt chart would be
04:41 - started I assume that would be started
04:44 - from the time so along with this Gantt
04:46 - chart will maintain a ready queue also
04:50 - fine so at first in the ready queue see
04:54 - the criteria is what arrival time
04:57 - arrival time plus time quantum it's not
05:01 - like check out the time quantum only and
05:03 - just draw the game shot you have to
05:06 - check that I will time also now suppose
05:08 - in this case the arrival time known you
05:10 - can see the time quantum or time slice
05:12 - which is given is that is three unit of
05:14 - time so here time quantum given is three
05:19 - unit of time and arrival time is given
05:22 - this one now at first at 0 p1 has
05:27 - arrived in ready queue now suppose in
05:31 - ready queue we have p1 okay at time 0
05:36 - now only one process is there at time 0
05:39 - in ready queue will delete this process
05:41 - from ready queue and this would be CP
05:44 - would be located to this process for how
05:47 - much unit of time now the criteria is
05:49 - arrival time we have checked plus time
05:51 - quantum l toy time point ms 3 unit of
05:53 - time so in a locate the cpu to p1 for
05:56 - only 3 unit of time also take the burst
06:00 - time of this process the total burst
06:02 - time of P 1 is 5
06:04 - still this process require 5 unit of
06:09 - time to complete its execution fine
06:12 - because CPUs are located for only 3 unit
06:15 - of time ok now at 3 this P 1 would be
06:21 - removed from the CPU and again go to the
06:25 - ready queue but before putting this p1
06:29 - again to the ready queue you have to
06:32 - check maybe there would be another
06:35 - process
06:36 - their processes which have been arrived
06:38 - so fine
06:40 - while this p1 was running so check out
06:43 - the rival time of another processes see
06:46 - arrival time of p2 is 5 so this one is
06:49 - not there in ready queue now arrival
06:52 - time of p3 is 1
06:54 - so while p1 was running so sometime at 1
06:58 - p3 has arrived
07:00 - so p3 is now in ready queue now this
07:04 - would come at 6 and this would come at 8
07:07 - so before 3 only one process has arrived
07:12 - and went into the predicate now at 3 P 1
07:18 - would be removed from the CPU and again
07:21 - P 1 will go to ready now check out the
07:26 - ready queue next processes p3 will
07:28 - remove the process p3 and allocate CPU
07:31 - to p3 for how many unit of time check
07:35 - out the time for no.43 unit of time
07:37 - now it's not like that after p1 p2 is
07:40 - there so we'll write p2 here you have to
07:42 - check out arrival time also maybe
07:44 - sometimes they can give you they will
07:46 - not always give you the time arrival
07:48 - time any increasing order like 0 1 2 3 4
07:50 - 5 4 0 5 6 7 8 something like this maybe
07:53 - the arrival time of p2 is C 5 and P 3 is
07:55 - 1 so P 3 will come before p2 this is
07:58 - this an example ok now see P 3 P 3 will
08:03 - require 7 unit of time but we can
08:05 - allocate CPU to p3 for only 3 unit of
08:09 - time in one go after that you can remove
08:12 - this process forcefully because the
08:14 - version is what pre-emptive version so 3
08:16 - 4 3 4 3 note of time that is 6 so the
08:21 - remaining burst time of this one is 7
08:23 - minus 3 that is 4 p 3 still needs 4 unit
08:26 - of time for completing for completing
08:28 - its execution now update the ready queue
08:32 - also now it's not like that at 6 we'll
08:35 - remove the speed 3 and we put the p3 in
08:37 - ready queue maybe before this p3 while
08:40 - p3 was running maybe
08:42 - another process would have come in the
08:44 - ready queue so check out that also
08:45 - before 6:00 see ya at 5:00
08:51 - people came at 5:00 now see at 6:00
08:55 - p4 came and at 6:00 this would be
08:58 - preempted so say this maybe you can have
09:02 - you can say that first of all you'll
09:04 - write P 3 and then we'll write P 4 well
09:08 - another option is first write P 4 then
09:10 - write P 3 because time is same at 6 new
09:15 - process game and then 6 also we
09:17 - preempted this process from the cpu so
09:21 - the funda is what if this kind of
09:24 - situation is there then we'll always put
09:28 - the newly-arrived process in the ready
09:31 - queue first this is the condition fine
09:34 - so we'll put P 4 here and then we'll
09:38 - preempt this P 3 and again this P 3
09:40 - would be in the predicate this process
09:43 - will commit it so this is not in the
09:46 - ready queue now now next P 1 will be
09:49 - removed from ready queue and CP would be
09:52 - allocated to P 1 P 1 would need 5 minute
09:56 - of time but we can allocate CPU for 3
09:58 - unit of time so 6 plus 3 is 9 and the
10:03 - remaining is what to the net of time
10:06 - right now at 9 P 1 will go and again
10:12 - we'll be there in the ready queue but
10:14 - before putting this P 1 in this ready
10:17 - queue we will check is there any process
10:20 - who has come while the Steven was
10:24 - running yes we have one process while
10:26 - the time was 8p v came in the ready
10:31 - queue and now P 1 will go and P 1 will
10:35 - be in the ready queue now next is P 2 in
10:39 - the ready queue will delete P 2 and CPU
10:41 - would be located to P 2 check out the
10:44 - burst time for P 2 is 3 sorry - so we
10:48 - cannot say that 9 + 3 we will allocate
10:51 - this CPU for 3 unit of time 9 plus 3 is
10:54 - 12
10:56 - you have to check also the first time p2
10:58 - will require only that's 2 unit of time
11:00 - so we'll allocate CPU to p2 for 2 unit
11:03 - of time ok then
11:06 - now p2 s then will not put p2 again in
11:09 - the ready queue because Peter is done
11:11 - with its execution and it's now
11:13 - culminated now next is will run this p4
11:18 - for how many unit of time for 3 unit of
11:21 - time because time quantum is 3 as well
11:23 - as check the both time CP 4 would need
11:25 - only 3 unit of time for completing its
11:28 - execution
11:28 - ok so 11 plus 3 is 14 now p4 will not go
11:33 - back to the ready queue why so because
11:34 - p4 has completed beaver before got
11:37 - completed because it required only 3
11:40 - unit of time for its execution ok now
11:43 - next process is p3 not J the burst time
11:49 - for p3 is still it need 4 unit of time
11:53 - but we can allocate CPU for only 3 unit
11:56 - of time because time quantum is 340 in
11:58 - plus 3 is 17 still it will need one more
12:03 - unit of time for completing its
12:05 - execution now it will go back to the
12:07 - ready queue because it is still left
12:10 - with 1 unit of time ok p3 will go back
12:14 - to the ready queue now while p3 was
12:18 - running we didn't check any process has
12:21 - come to the ready queue why so because
12:23 - all the processes all the processors
12:26 - have come till the time it ok so no
12:30 - process will come now now PCL are going
12:33 - again back to the ready queue no next
12:35 - processes p5 delete this p5 if allocate
12:39 - CPU to this p5 the required burst time
12:42 - is 5 so 4 3 unit of time will execute
12:45 - this and then when again put this 2 into
12:47 - 2 and again put the p5 into ready
12:50 - through 17 plus 3 is 20 now p5 will
12:54 - again back to ready queue
12:58 - now next is p1 now the remaining time of
13:06 - p1 is what only 2 unit of time
13:08 - will require so we'll continue will run
13:11 - the speed 404 only to you need to frame
13:13 - 20 tell 22 now p1 is also done now next
13:19 - is p3 now p3 would require only one unit
13:28 - of time okay now we'll run this p3 for
13:31 - only one unit of time 22 + 2 + 123 now
13:35 - p3 is also done and the remaining is p5
13:39 - so p5 see now you have to update this
13:43 - burst time also p-51 CP was allocated to
13:47 - P 5 4 3 unit of time so remaining time
13:49 - was 2 and now it will it need only 2
13:53 - unit of time that is why I will run this
13:55 - for - you need to find 23 + 2 is 25 so
14:01 - no process is there in the ready queue
14:02 - now ready queue is empty so we'll stop
14:04 - this round-robin
14:05 - algorithm so this is what the gain chart
14:08 - of round-robin algorithm now you have to
14:10 - find out the average waiting time tongue
14:12 - wrong time and response time also
14:14 - now the completion time for each process
14:17 - is what check out for p1 for completion
14:22 - time you can check out from the right
14:23 - side of the Gantt chart see at last we
14:26 - have a p1 here only so to the right size
14:29 - check out the time to the right of this
14:31 - p1 that is 20 to completion time of p1
14:33 - is 22 now for p2 here we have P 2 that
14:38 - is 11 for p3 here we have p3 that is 23
14:43 - completion time for p4 here we have P
14:47 - for completion time is 14 for p5 it's 25
14:51 - now what is the turnaround time turn
14:53 - around I would be what completion time -
14:55 - arrival time completion time 22 arrival
14:58 - time 0 20 2-0 11 - 5 6 23 - 120 240
15:05 - minus 6 that is 825 minus 8 that is 17
15:12 - now next is waiting time now waiting
15:16 - time would be what turnaround time -
15:19 - births time
15:21 - turnaround time is 22 - births time see
15:25 - births time will not check the updated
15:27 - births time you have to take you have to
15:29 - check the the total burst I'm the
15:31 - original burst time which was given in
15:33 - the question that was 8 so 22 - and that
15:37 - would be 14 6 - 2 for 22 minus 7 that
15:43 - would be 15 8 minus 3 that is 5 + 17
15:47 - minus 5 that is 12 now response time
15:51 - would be check out for p1 at what time
15:55 - cpus are located first time to p1 after
15:58 - the arrival at a 0 only an arrival time
16:01 - is 0 0 - 0 0 p2 c at 9
16:06 - cpu was allocated to p2 so we cannot say
16:10 - nine - minus zero and that is nine you
16:12 - have to check out arrival time of that
16:14 - process also arrival time of p2 is what
16:17 - five so nine minus five right that is
16:21 - four for p3 the first time CP was
16:25 - allocated at time three arrival time of
16:28 - P 3 is 1 3 minus 1 that is 2 for P for
16:32 - first time CPUs are located at time 11
16:35 - arrival time is 6 11 minus 6 that is 5
16:40 - for p5 first time at 17 CP was allocated
16:45 - to p5 17 minus arrival time is 8 so that
16:49 - would be 9 and if you want to calculate
16:53 - the average then do the total of days
16:55 - and divide by the number of processes
16:57 - that is 5 so the answer would be so I
17:00 - guess the average turnaround turnaround
17:02 - time would be 15 average waiting time
17:03 - would be 10 and average the response
17:05 - time would be 4 so if I talk about the
17:09 - advantages and drawbacks of this round
17:10 - draw my algorithm so in advantages you
17:12 - can write that it would give the
17:14 - deterministic response time but you can
17:17 - say in case of the average response time
17:18 - it is one of the best algorithm okay in
17:22 - case of response time but drawback is
17:24 - what we cannot say it is better than
17:27 - FCFS see when the case is if time
17:30 - quantum is very large suppose time
17:32 - quantum in
17:33 - Kees is 10 then in that case this
17:37 - algorithm round-robin will work as
17:39 - first-come first so same as first-come
17:42 - first-serve you can apply this
17:45 - round-robin taking the time quantum 3 on
17:47 - this numerical and then you will solve
17:49 - you solve this numerically the first
17:50 - confessor you will get the same answer
17:53 - same turnaround time and waiting time
17:55 - and response time so if you say that we
17:57 - take the time quantum very small we say
18:00 - that would take it 1 so that response
18:02 - time would be increased so you you can
18:05 - say that more and more processes would
18:07 - get the CPU very soon if time quantum is
18:10 - 1 but in that case tropic is what number
18:13 - of context switching would be increased
18:16 - because when pure the CP would be
18:19 - allocated to p1 suppose time quantum is
18:21 - 1 for one unit of time then again p1
18:23 - will go to the ready queue so this is
18:25 - known as context switching so here you
18:28 - can say context switch one context
18:30 - switch like this so if time quantum is
18:32 - very less then this number of context
18:35 - switching would be increased and number
18:36 - of context switches will also take some
18:38 - time well also you know in the context
18:41 - switching means what you have to store
18:43 - the you have to store the current
18:45 - position of this currently running
18:47 - process and load the you know status of
18:50 - the next process so this will also take
18:52 - some time and in that case average
18:55 - waiting time but also increased so we
18:57 - cannot take very large time quantum and
18:59 - we cannot take very less time quantum
19:01 - but yeah advantage is that it gives you
19:03 - the deterministic response time so
19:06 - somewhere it is written as that idle
19:09 - time quantum is between 10 200
19:13 - milliseconds it should not be greater
19:17 - than 100 it should not be less than 10
19:20 - milliseconds note seconds right so I'll
19:24 - see in the next video till then bye bye
19:26 - take care
19:34 - you