00:00 - in the series of learning programming in
00:01 - c in the previous video i have discussed
00:03 - unformatted input functions in c
00:07 - and we now we are left with unformatted
00:09 - output functions in c what are
00:10 - unformatted input functions get ch get
00:13 - care get chu and
00:15 - get s and unformatted output functions
00:18 - are what put care put ch and put s
00:22 - more functions are also there one is get
00:24 - c unformatted input function and one is
00:28 - put c unformatted output function but
00:30 - those are having some different concepts
00:32 - so both gate c and put c i'll be
00:34 - discussing in a separate video right in
00:37 - this video i'll be talking about
00:38 - unformatted output functions in c all
00:40 - the three functions with examples and
00:42 - how you can use those functions in your
00:44 - program and
00:45 - when you use those functions in your
00:47 - program then what kind of output you
00:49 - will get so everything will be
00:50 - discussing in this video i hope now you
00:52 - are clear with
00:53 - formatted and unformatted input means
00:56 - difference between formatted input and
00:57 - unformatted input if difference between
00:59 - a formatted output and unformatted
01:01 - output i hope you are aware about this
01:03 - thing because we have discussed
01:04 - formatted input output functions and
01:06 - unformatted input output functions
01:08 - output functions will be covering this
01:10 - video right so if you are clear with
01:12 - formatted and unformatted input and
01:14 - output then please let me know in
01:16 - comment box what do you mean by
01:18 - formatted input what do you mean by
01:19 - unformatted input what do you mean by
01:21 - for formatted output what do you mean by
01:23 - unformatted output right and if you have
01:25 - any doubt you can ask me in comment box
01:27 - or maybe i can make a separate video to
01:29 - get you clear about the difference
01:31 - between these right now let us discuss
01:33 - unformatted output functions
01:35 - we are having put care
01:37 - put ch
01:39 - and
01:41 - one is potence
01:43 - these two are for
01:44 - two print means these are output
01:46 - functions means to give you output
01:49 - they'll give output a single character
01:51 - and this will give output
01:53 - complete the complete string the
01:54 - complete line right now how to use this
01:57 - this foot care function see in a program
02:00 - suppose i am writing the same program
02:01 - that we have discussed in the previous
02:02 - video and in that program i am also
02:04 - using that get care function and also
02:06 - that you can revise those functions
02:08 - right i'm just declaring a character
02:10 - variable
02:11 - and
02:13 - basically majorly they act on that
02:15 - character type or string data
02:17 - these are for character and this is for
02:19 - string let us take this example here i
02:21 - am taking one variable that is of
02:23 - character type the name variable is ch i
02:25 - am using printf functions
02:27 - printf means to take output output means
02:30 - i just want to put a message on the
02:31 - screen whenever you will run a message
02:32 - would be printed on the screen that is
02:34 - enter a character like suppose this is
02:36 - your screen output screen so whenever
02:38 - you run
02:40 - enter a character this would be
02:43 - the output first whatever you will print
02:44 - within these quotation marks that would
02:46 - be on the screen as it is right now i'm
02:49 - getting a character input using get care
02:51 - function right i can take a single
02:53 - character that would be stored in ch now
02:55 - i'm going to print the ch value here i'm
02:57 - using printf function to print the value
02:59 - slash n means
03:01 - next line next line that would be
03:02 - printed character is so the output would
03:05 - be
03:06 - character is
03:08 - equal to this is what format specifier
03:10 - or you can say placeholder now at this
03:13 - place the value would be replaced which
03:15 - value
03:16 - it would it will uh check the the after
03:19 - the coma the first argument
03:21 - right and that should be a character
03:23 - so ch in cs we have whatever character
03:25 - you have entered suppose here i have
03:27 - entered j
03:28 - then j would be printed right and get 6
03:30 - is what just to hold your screen means i
03:33 - hope you know the meaning of get ch why
03:35 - i'm saying this because i have discussed
03:36 - my previous video that thing
03:38 - now rather than the sprint f you can use
03:40 - what you can also use this put care
03:43 - function
03:45 - print
03:46 - single character it will print only
03:48 - single character not more than that
03:50 - so at the place of this printer what you
03:53 - can use
03:56 - put care
03:58 - and what value you are printing you have
04:00 - to pass that variable name here means
04:03 - it will take argument one single
04:05 - argument so the name of that variable is
04:07 - ch
04:09 - or general syntax of foot care would be
04:11 - just here you will write the function
04:13 - name put care and here
04:15 - variable name that is the general syntax
04:18 - so variable name is here ch
04:20 - so rather than this printf
04:22 - if you write here put care ch
04:26 - then also what output you will get
04:29 - obviously here you will not get this
04:30 - output this line character is equal to
04:33 - because only printf can print this this
04:35 - thing that is why we are saying this is
04:38 - what formatted output because we can
04:39 - format our output according to our cell
04:42 - whatever you want right but here if you
04:44 - write this put care then this would not
04:46 - be printed
04:48 - only the character suppose i am entering
04:50 - j so j would be printed here
04:52 - and cursor would be in same line
04:54 - right if you want the cursor should be
04:57 - should move after printing j in the next
04:59 - line then what you can do after writing
05:01 - this put care here what you can do you
05:03 - can write put cat
05:05 - slash n
05:06 - slash and this is what escape sequence
05:08 - many escape sequences are there that
05:10 - also discuss
05:11 - so this is also considered as a
05:13 - character
05:14 - but you have to put this in single
05:16 - quotes slashing means new line so cursor
05:18 - would be automatically after printing
05:19 - this j in this new line
05:21 - right
05:22 - so this is one form to write put care
05:24 - function
05:25 - another thing is directly you can write
05:28 - like this
05:29 - put care any character you want to print
05:31 - suppose after slash and again writing a
05:34 - function put care and here i am printing
05:36 - k
05:38 - single character so what what output you
05:40 - will get at this time
05:42 - this printf is not there in this program
05:44 - at the time of this ah the place of the
05:46 - sprinter we have these three lines after
05:48 - that we have get ch and try character
05:50 - suppose i am entering j j after that
05:53 - slash and cursor would be in this line
05:54 - after that put care k so here you will
05:56 - get k in this one
05:59 - and cursor would be here only right if
06:01 - you want to move the cursor in next
06:02 - lines after that you can again i put
06:04 - care slash in
06:05 - right so this is how you can write down
06:08 - here you cannot use any string like
06:10 - multiple character you cannot use that
06:12 - will give error so it is just to print a
06:14 - single character on the screen and it is
06:16 - declared anywhere defined in what header
06:18 - file stdio.h standard input output now
06:22 - next is this put ch function right
06:25 - this is what this is defined in this co
06:27 - new rotation this header file right
06:30 - now
06:31 - functioning of this and this is same
06:33 - this is also used to print
06:35 - to give you output a single character so
06:37 - here rather than this put care if you
06:40 - don't write put care then what you can
06:41 - write you can also write put ch and same
06:45 - you will pass the variable name ch so
06:48 - now if you are writing like this then
06:50 - also same output you will get that is
06:52 - whatever enter
06:53 - character you are entering j that you
06:55 - will get j right and again
06:59 - this also you can also write that slash
07:02 - n
07:02 - here you can also write put ch
07:05 - just to want to print any character
07:06 - suppose i am writing k here so that k
07:08 - would be printed here right
07:10 - these are having same functioning just
07:12 - this is defined in stdr dot h and this
07:14 - is defined in
07:15 - this corner rotate now next is what
07:18 - put s suppose i want to print a complete
07:22 - string output as a complete string
07:24 - here just like that enter a character
07:26 - this is what a string it is not only
07:28 - single character so we cannot use here
07:30 - put care or put ch to print this one
07:32 - yeah we can use put care
07:34 - how
07:35 - in a loop
07:37 - if you write put care in a loop
07:38 - obviously one by one it will
07:41 - you know accept the character still the
07:42 - loop ends right so you can also try that
07:45 - out but without loop if you want to use
07:48 - this put s if you want to print the
07:50 - complete string then you can use what
07:52 - this function put is so now in the same
07:55 - program i'm going to change
07:57 - suppose in at the time of this
07:59 - printf
08:01 - what i am writing
08:02 - simply you can write here
08:06 - put s
08:07 - and whatever you want to print
08:09 - that you can write in double quotes like
08:11 - here you can write enter a character
08:14 - that would be printed here one ah method
08:17 - is this thing
08:18 - second is what
08:20 - it is going to print a complete string
08:22 - means a character array right so here
08:24 - suppose i am declaring a character array
08:26 - ch having
08:28 - size 10
08:30 - right or maybe having size 20
08:33 - enter a character or enter a string here
08:35 - i am writing here enter a
08:37 - string
08:38 - so
08:38 - to get input the string input we use
08:41 - what which unformatted input function
08:43 - get s
08:44 - not get care it is for single character
08:46 - so here i am writing what
08:50 - get s and what argument you will pass
08:53 - here
08:54 - that name ch
08:58 - fine
08:59 - now
09:00 - suppose here i am writing string is
09:04 - what you will print percentage s for
09:06 - string in printf if you are using printf
09:08 - you have to use format specifier it is
09:10 - for my hit output percentage s and then
09:13 - ch you will print right so whatever you
09:15 - will enter that string would be printed
09:17 - but suppose if you are not using this
09:19 - printf rather than the sprinter what you
09:21 - can use you can write here
09:25 - put s
09:26 - simply name of that character array that
09:28 - is
09:30 - ch
09:31 - that's it at the place of the sprint f
09:33 - you can write down this thing
09:35 - now here what output you will get
09:39 - enter a string because i am writing this
09:41 - in printf or you can write down in this
09:43 - input s enter a string here you can
09:46 - print anything suppose i am entering
09:48 - what that is uh jenny's lectures
09:51 - now
09:52 - next
09:52 - get us
09:54 - through this line we are taking the
09:56 - input that that is jenny's lectures
09:58 - right
09:59 - and now what you can do after this i'm
10:01 - printing this using this footage so same
10:04 - what output you will get
10:06 - jenny's
10:07 - lectures one more thing here the new
10:10 - line operator is built in this function
10:13 - means after executing this cursor would
10:15 - not be in the same line
10:17 - as we have discussed input cap
10:19 - cursor would automatically be in second
10:21 - line
10:22 - means no need to give any slash and to
10:25 - move cursor in next line slash n is
10:28 - already built in in this footage
10:29 - function right so i hope you got the
10:32 - working of these three functions
10:34 - so all the three function
10:35 - what except only one argument here here
10:38 - variable name here also variable name
10:40 - here put s if you write down the general
10:42 - syntax put care variable name put ch
10:45 - variable name
10:46 - put s here you will write string str
10:49 - that is a you know the string you are
10:51 - taking it's you are not taking a single
10:53 - variable name you are not taking a
10:54 - single character you are taking string
10:56 - right in the another video i will be
10:58 - discussing about two functions
11:00 - that is get c and put c
11:02 - this is unformatted input function this
11:04 - is unformatted output function
11:06 - right but they are dealing with those
11:08 - files or you can say that streams so
11:10 - that are having some different concepts
11:12 - and uh one more thing this put put is
11:14 - this has been defined in this
11:16 - stdi rotation put care is also in this
11:18 - and this puts here in this header file
11:21 - that is conjured
11:22 - right so now assignment for you is you
11:24 - have one you have to tell me difference
11:26 - between formatted and unformatted input
11:28 - and output right second is
11:30 - if suppose i write something in a
11:32 - program i write something like this put
11:34 - s a single character that is
11:37 - a
11:38 - what output you will get
11:39 - that you have to tell me a or any
11:41 - character it's up to you right so what
11:43 - output you will get you have to tell me
11:45 - in comment box so i think that's it for
11:47 - this video now i'll see you in the next
11:49 - video till then bye take care