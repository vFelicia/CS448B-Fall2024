00:00 - welcome back today's topic is type of
00:02 - types of hashing okay so let me tell you
00:06 - something about hashing hashing is
00:07 - basically what it is a searching
00:09 - technique okay and in searching of some
00:13 - data if you use it this hashing
00:15 - technique then the time taken is that is
00:18 - a constant time but you can say order of
00:20 - one time taken is order of one see for
00:25 - storing some data obviously some data
00:27 - structure would be used may be array may
00:29 - be linked list may be tree okay and the
00:31 - main thing is in data processing is the
00:34 - main or the common paradigm is to store
00:36 - the data and after that to retrieve that
00:38 - data okay a post or we can now rock or a
00:40 - tree with a knife or some processing
00:42 - okay so for searching some date our for
00:46 - retrieving the data two types of
00:49 - searching technique I guess a possible
00:51 - path other one is linear search and one
00:53 - is binary search in linear search time
00:55 - taken is in the worst case the time
00:57 - taken is order of and and is that number
01:02 - of keys stored in that array or some
01:05 - data structure and in binary search if
01:08 - you use then order of log n time taken
01:13 - is order of log n so this time depends
01:17 - on the value of n means how many keys or
01:19 - how many you know a number of data you
01:22 - are supposed to you have inserted and
01:24 - you're supposed to retrieve from that
01:26 - data structure okay but we want some
01:29 - technique where the searching is you
01:32 - know searching takes takes constant time
01:35 - it does not depend on this number of
01:37 - keys and that technique is hashing
01:40 - technique okay the main concept is in
01:43 - this hashing technique we use some hash
01:45 - table and hash function using some hash
01:48 - function for storing some data we will
01:51 - calculate some hash value or you can say
01:53 - that address and that address we can
01:56 - store that key okay or that data in that
02:00 - hash table okay fine now suppose some
02:05 - policing occurs collision means if you
02:08 - see let us take an example we have six
02:09 - and twenty six these two keys we have
02:11 - and
02:13 - have their table of sorry the size of
02:15 - hash table is 10 we can store 10 values
02:18 - in that hash table and the hash function
02:22 - you are given is this you are supposed
02:25 - to use that division method three
02:28 - methods are there to calculate the hash
02:31 - function hash function that is division
02:33 - method one is folding method and one is
02:35 - mid square method and also another one
02:38 - is that modulo multiplication method
02:40 - also there okay so you are asked to use
02:43 - that division method division method
02:44 - McKevitt aapke hash function will be
02:47 - like this key whatever the key mode mm
02:51 - is size of hash table okay whether it is
02:55 - eight whether it is ten or eleven or
02:57 - fifteen whatever it is here in this
02:59 - example i am taking the size of hash
03:01 - table is ten now if you calculate the
03:04 - address to store this key value six
03:07 - using the hash function okay then what
03:10 - should be the value C K value is now six
03:14 - then six mod M value is in this example
03:18 - am value I am taking and it is just an
03:21 - example then the value would be six you
03:26 - can store the six where at six location
03:32 - or you can say the index should be six
03:35 - like this here we will have one hash
03:38 - table and from zero to nine because the
03:42 - size of hash table is what n so at some
03:45 - point we will have this index X and we
03:48 - can store this X at this place but
03:50 - suppose we have 26 another case 26 and
03:53 - the using the same method you are
03:55 - supposed to calculate the hash function
03:57 - or you can say the address for this 26
03:59 - now this address for 26 would be 26 mode
04:04 - mm value is 10 and this is also 6 okay
04:09 - but at sixth place we cannot store this
04:12 - 26 because already 6 is there so this is
04:15 - known as policing when you know when you
04:18 - calculate some hash function or the
04:21 - location or you can say address for 2
04:23 - keys and using that same hash from
04:26 - that hash function will give you the
04:28 - same result same index but we cannot
04:32 - store two values at this place like 6
04:34 - and 26 this is the collision so to
04:37 - resolve these collision we have some
04:40 - techniques today I am going to discuss
04:41 - with you those techniques see and you
04:44 - can see types of hashing one is open
04:47 - hashing and one is closed hashing open
04:49 - hashing is also known as closed
04:51 - addressing and this closed hashing is
04:55 - also known as open addressing okay so in
04:59 - this method in first one this open
05:02 - hashing the method to resolve these type
05:05 - of collision okay is what that is
05:09 - chaining method but you can see separate
05:11 - chaining okay in this case the method
05:16 - would be to resolve the collision that
05:19 - is chaining method fine and in closed
05:23 - hashing three methods are there to
05:27 - resolve the collision see you cannot
05:31 - remove the collision you can only
05:33 - minimize the collision okay so three
05:38 - techniques are one is linear probing one
05:42 - is quadratic probing and the third one
05:49 - is double hashing technique right I'll
05:56 - discuss all these techniques with the
05:58 - help of example so in this video I am
06:00 - going to discuss with you this chaining
06:02 - method how to use this chaining method
06:04 - to resolve the collision okay through
06:08 - let us take one example now let us take
06:15 - one question suppose you are given these
06:18 - key values this one is suppose any and
06:20 - these key values are there three two
06:22 - nine six eleven thirteen seven twelve
06:24 - and you are supposed to store these key
06:27 - values and put into the hash table the
06:29 - size of hash table is given is N and the
06:34 - hash function vs. which is given is h
06:36 - case 2 k plus 3 in
06:40 - this question and you are asked to use
06:43 - division method and closed addressing
06:47 - technique to store these values now
06:50 - before you know solving these this
06:53 - question you must have the idea what is
06:57 - this division method and what is closed
06:59 - addressing do is in method we have
07:01 - already discussed how this method is to
07:03 - be used how the hash function hash
07:06 - values would be calculated the key and
07:10 - mod of a mode of size of hash table and
07:15 - what is closed addressing this is also
07:17 - known as open hashing and in this case
07:19 - what method is used to resolve the
07:21 - collision that is chaining method okay
07:23 - okay now let us we have one hash table
07:28 - this hash table and this hash table is
07:32 - of size 10
07:41 - zero two one two three four five six
07:45 - seven eight nine
07:47 - okay this is up to zero to nine okay
07:56 - this is our hash table of size and hash
08:00 - function is 2k plus three and you are
08:03 - supposed to use this division method now
08:06 - calculate the location proper position
08:10 - or you can say the address for these key
08:13 - values here we'll write down the
08:16 - location first key value is three find
08:21 - out the proper place to store this three
08:23 - in this hash table and how you will
08:27 - calculate that using hash function and
08:29 - hash function is given plus a which
08:31 - method you will use the division method
08:32 - or folding mat method or mid square
08:34 - method you are asked to use division
08:36 - method okay now calculate H for a method
08:41 - obviously you know ko5 mode M this is
08:47 - the method okay but here function has
08:50 - from a hash function is given to k plus
08:52 - 3 so we cannot directly calculate that
08:56 - three more 10 and the value is 3 no we
09:00 - cannot directly put if this is not given
09:03 - to you then you can directly use this
09:05 - one okay if you are asked to use
09:07 - division method but here you are given
09:09 - this HK value 2 k plus 3 then how will
09:12 - calculate this value this would be like
09:16 - this 2 into the what is value of K here
09:22 - we have 3 okay plus 3 and then mod 10
09:32 - fine
09:33 - now here that a K is this one because
09:37 - hash function is given to k plus 3 now
09:40 - what is the value 6 plus 3 is 9 9 mod 10
09:44 - years 9 only because the result would be
09:48 - the remainder only so the location is 9
09:51 - at 9th index you can store this 3
09:55 - okay now find out the position for value
09:58 - to 2 into 2 plus 3 and now mod 10 4 plus
10:08 - 3 7 & 7 more 10 is 7 only the where you
10:13 - can store this too at 7th place here we
10:16 - can store this too
10:18 - now find out this 1 4 9 have you'll find
10:23 - out the same method 2 into 9 plus 3 and
10:27 - then mode then what is the value 9 18 18
10:33 - plus 3 is 21 21 more 10 is 1 here at one
10:39 - position at one index you can store this
10:42 - 9 now for 6 say method 2 into 6 plus 3
10:48 - more 10 what is the value 12 plus 3 is
10:53 - 15 15 more 10 is 5 at fifth place you
10:58 - can store this value given you six now
11:02 - for 11 2 into 11 plus 3 mod 10 see for
11:13 - this one is 11 to 22 22 plus 3 is 25 25
11:18 - mod 10 is 5 now check what is the
11:25 - position for to store this 11 is 5 go to
11:27 - 5 but here we have already the 6 this is
11:31 - the case of keynesian now in question
11:35 - you are given use closed addressing
11:38 - technique and enclosed addressing what
11:41 - is the technique you will use chaining
11:42 - method separate chaining method in
11:44 - chaining method what is there go to the
11:47 - fifth place already 6 is there then a
11:50 - linked list will be used like this fine
11:54 - and here 11 would be stored a chain
12:01 - would be created like this okay
12:04 - this is you can say linked list would be
12:06 - used to store
12:08 - the values in case of collision okay now
12:14 - for 13 what is the value two into 13
12:19 - plus 3 mod n 13 into 2 is 26 26 plus 3
12:29 - is 27 28 29 29 mode 10 is 9 now here
12:35 - also we have one collision go to the
12:37 - ninth place but we have already three at
12:40 - the space you cannot store 13 what
12:42 - method you use chaining method and
12:44 - chaining method making of the separate
12:46 - linked list would be used and here we
12:48 - will store what 30 now next is 7 2 into
12:55 - 7 plus 3 mode and what is the value 1414
13:03 - plus 3 is 17 17 mode 10 is 7 he rolls
13:11 - will happily then go to the seventh
13:12 - place but here we have already what is
13:15 - stored that is 2 we cannot store the 7
13:18 - what is the method chaining method the
13:20 - chaining method making our separate link
13:22 - list will be created and the 7 would be
13:25 - stored at this place this is linked list
13:28 - link lachemann basically 1 node is
13:31 - having two part one is that information
13:32 - part and one is that address part that
13:35 - this link will or this pointer will
13:37 - contain the address of next node ok you
13:42 - can denote like this only now next is 12
13:47 - 2 into 12 plus 3 mod 10 and what does
13:56 - this value 12 into 2 is 24 24 plus 3 is
14:00 - 27 27 mod 10 is again 7 now go to
14:07 - seventh place find out this is not free
14:11 - you cannot store here go to the linked
14:14 - list part here also you cannot store we
14:16 - have 1 linked list
14:17 - now again 1 linked list or one node
14:19 - would be created fine
14:22 - and 12 would be stored at this place and
14:25 - this this you know this one this link or
14:28 - this pointer will contain the address of
14:30 - this node and this pointer would contain
14:33 - now this is also not this is not also
14:35 - not fine so this is the chaining method
14:39 - how the staining method can be used to
14:42 - resolve the collision the next video I'm
14:45 - going to discuss with you what does that
14:46 - how the linear probing method will be
14:49 - used to resolve the or to minimize the
14:52 - collision
14:53 - okay now let's kiss the linear probing
14:56 - method with the help of same question
14:58 - the same question is there these are the
15:00 - keys same hash function is there to k
15:02 - plus 3 same you have to use division
15:04 - method only the changes you're supposed
15:06 - to use open addressing fine to store
15:10 - these elements okay and size of hash
15:12 - table is 10 now whenever you are asked
15:15 - to use open addressing then by default
15:18 - you will use linear probing to resolve
15:20 - the or to minimize the collision okay
15:24 - then that is the tool if you are because
15:27 - this the open addressing few techniques
15:29 - are there linear probing quadratic
15:31 - probing and double hashing but by
15:32 - default you will use linear probing in
15:35 - case of say Putrajaya use quadratic
15:37 - probing in that case when you lose that
15:39 - one in case you're asked to use double
15:41 - hashing then you will use double hashing
15:43 - but by default you will use what linear
15:45 - probing okay now check the only changes
15:50 - the hair is we have open addressing same
15:53 - question is there okay for this three
15:56 - you have calculated the value that is
15:59 - nine okay I'm just going to write these
16:03 - values at ninth place we will use will
16:05 - store this three now what is the place
16:08 - for this key second this key value two
16:12 - here is seventh here you can store this
16:15 - to nine co-op can store Ikaruga here at
16:19 - one occasion here you can store nine six
16:22 - Co you can store at index fifth or fifth
16:26 - location here you can store six now
16:29 - problem comes in the case of eleven same
16:33 - hash
16:34 - hash value is being generated using this
16:38 - hash function okay that is five when you
16:41 - go to five but it is already there six
16:43 - is already there so collision is there
16:45 - now use linear probing what is C probing
16:49 - means what in simple English term
16:51 - probing means you know a synonymous
16:53 - searching or a coach karna so it will
16:57 - search the free place now where you can
16:59 - it can store the value okay now at fifth
17:03 - place we cannot store because already
17:05 - six is their Pelini linear probing
17:07 - linearly hamaji building it at the next
17:11 - place this is a simple technique okay
17:13 - next place
17:15 - check out this is free yes this is free
17:17 - throw you can store 11 at this place
17:21 - fine and sometime in question you are
17:24 - asked if we at last to store these
17:28 - elements using open addressing total
17:31 - props of kupatana how many total probes
17:33 - was there okay so such SATA maybe
17:36 - discuss contain four key to store this
17:39 - key three how many props are there
17:40 - obviously one probe is there now
17:42 - ix big they have omni search here ninth
17:45 - who searched or Nikki Anaya bar then one
17:49 - probe is there for two also one probe
17:52 - for nine also one province for six also
17:54 - one prom but to store this 11 how many
17:58 - probes you required one probe is encase
18:02 - them up to five Milla search five but
18:06 - this is already filled one probe is
18:07 - already there now again search the next
18:10 - location this is free yes this is free
18:12 - fine so two probes are there one is for
18:15 - this fifth one original one and next is
18:17 - for the next one so here two props for
18:22 - 13 go to 9th but this is already filled
18:26 - then what you will do find out linearly
18:31 - the next place and next place would be
18:33 - this one zero okay because we have
18:37 - already say the size of this hash table
18:40 - is 0 to 9 then go backward and this one
18:42 - is 0 now where you can store this 13
18:47 - here we can store this 13 next is how
18:51 - many prompts for 32 probes 1 9 p ji apne
18:55 - search here 9 who then happening next
18:57 - place search here 13 then two proms are
18:59 - there for storing the seven go to the
19:02 - seventh place but this is already filled
19:05 - then the next place yes this is free we
19:08 - can store seven at this place and total
19:10 - number of probes are due for storing
19:13 - this 12 go to the seventh place this one
19:16 - is already filled we cannot store go to
19:19 - the next place this is already filled we
19:21 - cannot store go to the next place this
19:24 - is already filled we cannot cannot store
19:26 - the next place is this 1 0 0 this
19:31 - location but this was already filled the
19:33 - next go to the next place that isn't one
19:37 - that index 1 that is already filled we
19:40 - cannot store go to the next yes say
19:44 - linearly we are we are searching the
19:47 - free place linearly one by one we are
19:49 - not jumping like this I got a free Nieto
19:52 - will jump towards three locations no
19:54 - linearly up Azam canal that is why it is
19:56 - known as linear probing here we can
19:58 - store this to L okay now how many props
20:03 - for this - L 1 is we go to 7 7 company
20:07 - search here one probe one is for this
20:09 - one - one is for this 3 4 5 and finally
20:14 - 6 6 problems now total Pro for this - LS
20:20 - 6 pro now total Pro bhai hope calculate
20:26 - cursor go in case if you are asked to
20:28 - total prop give me way sometimes in net
20:30 - exam they are also asked he just find
20:34 - out just tell the order of the elements
20:38 - in the hash table after inserting all
20:41 - the elements what is the order of
20:42 - elements you are supposed to give the
20:46 - for multiple you know that choices the
20:49 - order of element is this this this or
20:51 - this this this now in this case what is
20:53 - the order of element in the hash table
20:55 - if you are asked then the order of
20:57 - element would be you has applicant start
20:59 - over from 0
21:00 - zero - please 13 then 9 then 12 then you
21:06 - will not write the sex directly one in
21:09 - two places are free one and two these
21:12 - are blank then six then 11 then two then
21:16 - seven and then three this is the order
21:20 - of element okay so in linear this was a
21:25 - shortcut
21:26 - yup just look out the hash table and
21:29 - finally next by next by search for
21:31 - Karenia if you write the proper you know
21:34 - definition of that linear probing then
21:37 - what is that that one is this is what
21:43 - happens in linear problem throbbing
21:45 - properly if you'll write insert ki like
21:50 - k1 k2 k3 these are keys at the first
21:54 - free location from you plus I both mode
22:00 - M where I will range from 0 to M minus 1
22:04 - now here is a path I bogan 0 to M minus
22:07 - 1 M question media Haga that is 10 then
22:11 - that I would be 0 to 9
22:13 - what is this you you is what this
22:16 - address so you can say this location
22:18 - whatever whatever you have calculated
22:20 - this 9 7 1 using this hash function that
22:23 - would be the you now check out see if
22:28 - directly a poisoning knife you use this
22:31 - method or this definition and then check
22:34 - out for 11 will check out okay 11 Kelly
22:42 - in case of collision you will use this
22:44 - one insert kind of a pokey I acquired
22:46 - the very at the first free location from
22:49 - this one fine for 11 what is the value
22:52 - of U u plus I more 10 what is value of U
22:55 - for 11 what is value of u whatever what
22:57 - you have calculated that is 5 then 5
23:01 - plus I I will range from 0 to M minus 1
23:06 - of starting my Q value is 0 0 fine
23:11 - more mm value is
23:14 - ten and this would be five more ten that
23:17 - is five but this is not free place okay
23:21 - now increase value of Phi I is now 1
23:23 - then 5 plus 1 mod n 6 more and that is 6
23:31 - find out sixth place how many insert
23:34 - copy our key copy ksi 6 3 because sixth
23:36 - was free so here we have inserted this
23:38 - 11 so this is the same definition insert
23:42 - key I add the first free location from
23:45 - this one first free location yeha say
23:49 - the very first free location was this
23:52 - one sixth okay in case of this 12 check
23:56 - out sea fort well what is when you of
23:58 - you the value of you is 7 calculate 7
24:04 - plus in starting value of I is 0 mod n 7
24:11 - would 10 is 7 7 this one is not free ok
24:16 - now 7 plus 1 mod 10 8 plus 8 more tennis
24:24 - 8 more pen that is 8 this one is also
24:27 - not free because 7 is already there now
24:30 - 7 plus increase IQ value 0 to M minus 1
24:35 - that is 0 to 9 7 plus 2 mode and that is
24:39 - nine nine more 10 is 9 this is also not
24:42 - free 7 then now I Q value is 3 7 plus 3
24:46 - mode 10 that is 10 more 10 10 more 10 is
24:51 - 0 remainder would be 0 go to the zeroth
24:54 - place but this one is also not free
24:55 - because 13 is also there again check out
24:58 - the next location 7 plus 4 more 10 11
25:02 - more 10 that is 1 but 1 is also note
25:05 - free now 7 plus 5 more 10 that is 12
25:10 - mode n is 2 now go to the index - this
25:15 - one was free okay and here we have we
25:17 - can insert this 12 okay so using this
25:21 - formula formula also you can calculate
25:23 - these indexes or well you are same
25:27 - linear probing me up cohosh deviled egg
25:29 - nyan simply just look over the next
25:30 - place is free and free then insert it
25:33 - other nail top next Nick Nick Nick said
25:34 - y'all grab circle together so this is
25:38 - the basic idea of linear probing and
25:41 - next video I'll discuss how to use
25:42 - quadratic probing to find out that or
25:46 - you can see the to dissolve the
25:48 - collision till then bye bye
25:49 - take care