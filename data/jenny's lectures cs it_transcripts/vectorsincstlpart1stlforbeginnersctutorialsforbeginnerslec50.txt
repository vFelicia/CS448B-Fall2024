00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language we have
00:05 - discussed arrays in C++ 1D array 2D AR
00:08 - and with some coding exercises as well
00:12 - right now next important topic is
00:15 - vectors so I'm not feeling well so
00:19 - please tolerate with me especially my
00:21 - voice so now next topic is vectors in
00:24 - C++ right I hope you have heard a tomm
00:27 - STL standard template Library
00:30 - vectors are part of this thing STL don't
00:32 - worry we'll see what is STL first then
00:34 - we'll come to vectors right but these
00:36 - are extremely important and useful if
00:38 - you are working in C++ or learning C++
00:41 - right because see if you want to solve
00:45 - those lead code problems and if you have
00:47 - tried one or two then in the solution
00:49 - panel in this case solution side you see
00:52 - a term vector and almost everywhere you
00:54 - see this Vector so what is Vector we'll
00:58 - see in this video how vectors are
01:00 - different from aray if we have aray then
01:02 - why we are using vectors right how to
01:04 - declare a vector how to initialize
01:06 - vectors these things we'll see in this
01:07 - video right so first thing what is stn
01:11 - standard template Library as the name
01:15 - suggest template library right so like
01:18 - in your college or school also you have
01:20 - a library there we have some books right
01:23 - you go to that Library if you you know
01:25 - if you want some book then you get the B
01:27 - book issued from the librarian and you
01:29 - just read read that book or take notes
01:31 - and then return the book to library
01:32 - again right or maybe if you sit in the
01:34 - library and read any book and then you
01:37 - know you can't bring that book to home
01:39 - without get issued from the librarian
01:41 - right right so there are many
01:44 - books anyone you know any student from
01:47 - that University or college can access
01:49 - that book or there are public libraries
01:52 - as well so anyone can go there and
01:53 - access any book right you don't need to
01:57 - purchase each and every book you want
01:59 - right
02:00 - so it is going to save your money as
02:02 - well so same thing in programming
02:06 - also is this this Library this library
02:09 - is a you can say collection of some data
02:12 - structures algorithms and some other
02:14 - components as well that can be
02:18 - used to simplify the development of C++
02:21 - programs that you can use those
02:23 - functions those algorithms those data
02:25 - structures those are already implemented
02:28 - and stored in that library that we can
02:30 - use to wrer program to wrer project it
02:33 - will save our time as well right so this
02:37 - is what STL basic the main idea of using
02:40 - STL is to reuse the code so that you
02:43 - don't have to write the code again and
02:44 - again suppose if you want to sort
02:46 - something so if you want to
02:49 - write uh um sort something so you will
02:52 - write that complete code of sorting
02:54 - maybe merge sort quick sort or any sort
02:56 - right so rather than writing the
02:58 - complete code of sort in in this Library
03:01 - we have a
03:03 - function for sorting so directly we can
03:06 - use that function right so in one line
03:09 - we
03:10 - can apply sorting in our our program
03:13 - rather than writing the complete code
03:15 - because this complete code code is
03:16 - already written in STL so we can
03:18 - directly use it so obviously it is going
03:21 - to simplify our life right it is going
03:24 - to save our time and our program
03:27 - efficiency would be more because these
03:29 - algorithms these data structures has
03:31 - been implemented with some optimized
03:34 - algorithms so if you use these things
03:37 - already prebuilt know these prebuilt
03:39 - things in our program then definitely it
03:42 - is going to speed up the execution of
03:44 - our program right so there are always
03:48 - you know many plus points or you can say
03:50 - many advantages of using this STL that
03:53 - is why we are now learning STL
03:55 - especially one part is Vector now Vector
03:57 - is part of STL Vector is a class
04:00 - actually so whenever we are going to
04:01 - create or declare a vector you can say
04:03 - we are we are creating an object of that
04:07 - vector class right so it is basically a
04:09 - class like arrow is a derived data type
04:13 - we say a data structure same like vector
04:16 - is we can say it's a class or it's like
04:18 - a container right in STL we have like
04:23 - it's a set of container like vectors
04:25 - list map many data structur stack Q many
04:29 - things we are having in STL that we can
04:32 - use right I hope now you got the basic
04:35 - idea of STL maybe if you are not getting
04:39 - a complete video on STL what is STL we
04:41 - can make a separate video but for this
04:43 - video I hope you got the idea what is
04:45 - STL right and vectors are part of STL
04:49 - right so if you're going to use this STL
04:52 - in our program when you write your
04:53 - program then definitely it is going to
04:55 - save your time and effort right now what
04:58 - are vectors see what are arrays arrays
05:00 - are collection of homogeneous State
05:02 - items like I have an AR array a so here
05:06 - we can store five data items of type
05:10 - integer only same vector vector is also
05:13 - a container it's like a container or
05:15 - collection container means a box like
05:17 - like this is a
05:19 - container like a box so here in this box
05:23 - I have my marker My Ink my pen and
05:26 - everything right mix but we canot say it
05:29 - is a vector because
05:31 - Vector is a collection of in that
05:34 - container Vector container we can store
05:35 - similar type of data items so if this is
05:38 - a vector then I can store only same type
05:42 - of data items like I can store only
05:44 - maybe markers only no ink no pen same
05:48 - data item so this is what a container or
05:50 - a vector if I am storing same type of
05:52 - data item I hope you can relate this
05:55 - kind of thing so now vectors are how
05:59 - vectors are different from arrays now
06:02 - because vectors are Dynamic arrays now
06:05 - what does that mean here I can store
06:08 - five elements I want to store suppose 10
06:10 - elements then what you have to do just
06:13 - you can declare another array a b of 10
06:17 - elements right or maybe you have to just
06:20 - resize it 10 so in this case first the
06:24 - aray size was 1 2 3 4 5 next next array
06:30 - would be another array would be created
06:33 - and having 10 size right it's not like
06:36 - that within the same array another five
06:39 - blocks would be allocated no another
06:42 - array would be created so manually you
06:43 - have to change the size of array is
06:45 - fixed it's not
06:47 - Dynamic array size cannot be increased
06:49 - or decreased at run time right but
06:52 - Dynamic array is is what the size of
06:55 - that array or that Vector is like a
06:58 - dynamic array that is used to store the
07:00 - elements and manipulate those elements
07:02 - right and the size of vectors can be
07:05 - automatically increased and decreased at
07:07 - run time while you are inserting an
07:11 - element and deleting an element if you
07:12 - want to insert an element a vector will
07:14 - automatically increase with
07:16 - size right if you delete then
07:19 - automatically will shrink the size we
07:21 - have a function like shrink to fit that
07:24 - function we can apply right that is why
07:26 - vectors are known as Dynamic arrays
07:30 - Vector can change their size at run time
07:32 - automatically means they can increase or
07:34 - decrease their size automatically but
07:36 - how I told you Vector is like a
07:39 - container sequence container sequence
07:41 - means because all the elements of
07:43 - vectors are in a strict linear sequence
07:47 - right like this in a strict sequence
07:51 - suppose this is the vector I to 1 2 3 0
07:54 - 1 5 like this and can be
07:56 - accessed with the help of their position
08:00 - same with array index start from 0 1 2 3
08:04 - 4 something like this and last element
08:07 - is at size minus one and first element
08:09 - is at zero same as ARS right and if this
08:14 - like it is a container so in container
08:17 - like we have a allocator object I mean
08:21 - the container container uses allocator
08:24 - objects to handle the storage needs
08:28 - automatically
08:30 - right so they have an allocator object
08:33 - that is why we are saying like the
08:35 - vectors can increase and decrease their
08:37 - size at
08:38 - runtime right so that a locator object
08:40 - will handle these things the storage
08:42 - needs at run time right now same in
08:46 - arrays these elements are stored in
08:49 - contigous memory location same with
08:50 - vectors these elements are stored in
08:52 - contigous memory locations index start
08:54 - from zero and like this same data type
08:57 - of same kind of element same type of
08:59 - element we can store in one vector these
09:01 - are same with same character character
09:03 - characteristics of arrays only
09:06 - difference is vectors are Dynamic are
09:08 - means they can s change their size at
09:10 - run time automatically automatically
09:13 - right how these are changing how the
09:15 - size is to be increased and like this
09:17 - those things we'll be discussing one by
09:18 - one in coming videos right now I hope
09:23 - the basic idea of vectors are clear to
09:25 - you guys one thing that also different
09:28 - Vector from AR is
09:30 - vectors can also provide bound checking
09:32 - in Array there is no bound checking
09:35 - means if this is an array if suppose
09:37 - this is an array of name a and here if I
09:42 - want to access element 10 so it will
09:44 - give some garve value but ideally it
09:46 - should give an error like the array size
09:48 - is only 1 2 3 4 5 six elements so we
09:51 - cannot access this this is out of bound
09:53 - but it will not give any error so there
09:55 - is no bound checking arrays but vectors
09:57 - provide you bound checking right there
09:59 - are some functions that provide you
10:01 - bound checking right but same if this is
10:05 - Vector suppose this is Vector not AR
10:07 - this is vector vector a right same if
10:11 - you use this these
10:14 - subscript and if you want to access the
10:17 - index 10 then it will not provide you
10:20 - bound checking it will give some garbage
10:22 - value but there are certain functions
10:24 - that do bound checking those functions
10:27 - also we'll see because they are many
10:29 - ways to access elements in a vector
10:32 - either we can use this subscript kind
10:33 - kind of thing or we can use add function
10:36 - right so some in some other function it
10:39 - proide it provide bound checking but if
10:41 - you use this thing to access any element
10:44 - in this case vectors also do not pro
10:46 - provide bound checking so please note
10:48 - these points right now how to declare
10:51 - vectors we use same the vector here we
10:56 - use the type data type or we can say
10:58 - object type because Vector I told you is
11:01 - a class when you are creating a vector
11:03 - means we are creating an object of that
11:05 - class right so object type here we write
11:09 - the vector
11:11 - name right and if you are using using
11:15 - names space STD then it's fine if you're
11:17 - not using that thing then STD here and
11:22 - these this operator scope resolution
11:25 - operator STD scope resolution operator
11:27 - this STD this Vector this is what you
11:29 - can say it's a name space for vectors
11:33 - right okay object type Vector name and
11:36 - size is optional here I'm writing the
11:40 - complete syntax so I'm writing here size
11:42 - as well in bracket in this
11:45 - bracket right so the size is optional
11:48 - you don't need to give size if you don't
11:50 - want to it's okay and if you want to
11:52 - declare a vector with size then you can
11:54 - give right so Vector here the type here
11:58 - Vector names so for example STD vector
12:03 - and I'm taking a vector of type int
12:07 - and numbers that's it I'm not giving any
12:11 - size take another example also s
12:15 - DD
12:17 - Vector like
12:20 - C and
12:22 - WS any data type you can take here it's
12:26 - fine right so these are example of
12:29 - vectors or if you want to declare a
12:31 - vector with size if you want to give
12:33 - size you can give let's take this
12:35 - example I want to modify this thing so
12:38 - here in these brackets five
12:41 - sorry bracket would be these round
12:45 - bracket this is we have declared a
12:47 - vector with size these are with no size
12:51 - so here if there is no size then it
12:53 - would be an numbers it would be an empty
12:55 - Vector right now we cannot store any
12:57 - number but
13:00 - the size can be increased according to
13:02 - our need if you want to store any
13:04 - element then size would be automatically
13:06 - increased
13:08 - automatically here also this is also an
13:10 - empty Vector we cannot store any element
13:12 - right now here
13:14 - but if you want to store something then
13:18 - you can initialize this vector and size
13:20 - would be automatically allocated
13:21 - automatically
13:22 - increased right so these thing would be
13:25 - handled by Vector automatically because
13:27 - this is not array this is dynamic array
13:29 - so like we can say Vector is a array
13:31 - that can shrink and increase its size at
13:35 - execution time automatically right one
13:38 - more thing if you're using this class
13:40 - this Vector then obviously you have to
13:43 - include that vector class Vector Library
13:47 - above like this hash
13:50 - include
13:52 - Vector like this right you cannot
13:57 - directly use this Vector from from
13:59 - standard template Library without using
14:01 - this it's like you have to get issued
14:03 - Vector from STL right because if you
14:05 - want to book any book from that Library
14:07 - you have to get that book issued from
14:09 - librarian you cannot take the book and
14:11 - just bring that book to your home no
14:14 - that is not allowed right so same this
14:17 - thing you have to include this Library
14:19 - Vector then you can use this Vector
14:21 - create your vector and whatever function
14:23 - with the vector we can do in our program
14:25 - so this is simple declaration now how to
14:27 - initialize vectors see there are many
14:29 - methods to initialize vectors right one
14:31 - by one we'll see practically those
14:33 - methods right so now we'll see with help
14:36 - of programs I hope theory part is clear
14:38 - to you guys if you have any doubt you
14:40 - can let me know in comment section so
14:42 - let's create a new
14:44 - file Vector intro. CPP right so first
14:50 - you have to include that have iio stream
14:54 - and then if you're using Vector then
14:56 - Vector right okay
15:00 - now first declare a
15:02 - vector do yourself first any Vector you
15:06 - can declare so here I'm not using that
15:11 - using namespace STD let's use
15:17 - that because rather than writing again
15:20 - again again and again like STD and STD
15:22 - STD in a program simple one time I'll
15:24 - use using namespace STD right although
15:28 - it's not a very good practice to use
15:30 - this line using namespace
15:33 - STD but we are using so let's declare a
15:38 - vector
15:43 - here the type we are taking int and
15:47 - Vector name
15:51 - numbers right sem so this is how we have
15:54 - declared a vector successfully but this
15:56 - is empty vector vector it is not holding
15:58 - any value it cannot hold actually any
16:00 - value right now but it can automatically
16:02 - increase its size if we initialize this
16:04 - Vector so first
16:07 - thing see if you not include let me just
16:10 - show you if you do not include this
16:13 - thing then it will give error see below
16:17 - this line you have a red line identifier
16:19 - Vector is undefined because the compiler
16:22 - doesn't know what is this
16:24 - Vector so you have to include this
16:27 - library because this is the here in this
16:30 - Library this class is in this Library
16:32 - Vector STL standard template Library so
16:36 - now how to initialize declaration is
16:40 - fine first ways we'll discuss three or
16:43 - four ways first way we have a function
16:45 - push back so one by one we can insert
16:49 - element in vectors one element at a time
16:52 - if you want to insert okay now how to
16:54 - use that thing the name of that vector
16:58 - first in which you want to put the value
17:01 - insert the element right so numbers dot
17:05 - we
17:06 - have this push back this method and in
17:09 - bracket just put the value so two same
17:14 - one more suppose
17:17 - element three element I want to
17:20 - initialize like 21
17:22 - 23 right so this is how you can
17:25 - initialize using push back method I hope
17:28 - you got this this is the synx synx would
17:31 - be if you want to write first you will
17:33 - write the vector name dot push back and
17:36 - in bracket you just write
17:38 - value right okay same I told you like we
17:41 - can access the element of vector with
17:43 - using uh index also from 0 to size minus
17:46 - one so if you want to print if you want
17:49 - to print see out at zeroth location what
17:52 - is the value so s same as arrays the
17:55 - vector name uh that is
18:00 - numbers and if you use this bracket I'm
18:03 - simply using this bracket right now but
18:05 - it will not provide you bound checking
18:07 - I'll show you numbers
18:11 - zero it will print two because at zero
18:15 - index we have two so 0 1 2 if I want to
18:20 - access at index 5 so it will not do now
18:24 - bound checking it will give any garbage
18:26 - value see any garb value you will get
18:29 - here right 250 4 1 no bound checking is
18:33 - there but there are certain functions if
18:35 - you use those functions to XIs values
18:38 - that will give you bound check these
18:39 - thing we'll see in next video so right
18:41 - now this is one method of initializing
18:43 - you can put this line in four Loop
18:45 - also right rather than writing three
18:47 - times what we can do is we can just take
18:49 - a four Loop like in I is equal to0
18:54 - till I less than suppose
19:00 - less than
19:02 - three and I
19:06 - Plus+ every time it will ask like it
19:08 - will enter in this Loop and enter value
19:11 - whatever value you will insert it will
19:13 - insert that value into that Vector right
19:16 - so three times it is going to continue 0
19:18 - 1 2 three
19:20 - times see enter value I'm entering first
19:23 - two then again 34 again
19:26 - 56 so I'm accessing element value at
19:30 - index first so at one we have 34 so it
19:32 - is giving you 34 right so this is how
19:35 - you can put this and push back in like
19:36 - Loop also so this is one method right
19:40 - now second way is if you want to you
19:43 - know populate the vector with the same
19:46 - value multiple times then we can use
19:49 - overload Constructor now how you will do
19:52 - that thing
19:55 - see let's just comment out these things
19:59 - and I have just uh declared a vector
20:04 - without any size so right now right now
20:06 - if you want to know the size of this
20:08 - Vector then how to to uh you know
20:13 - calculate the size we have a function
20:16 - size we have a method size you can just
20:20 - do Vector name do size and it will give
20:22 - the size of this Vector right so right
20:25 - now comment out this line and let me
20:27 - just run this for
20:30 - you the size of the number this Vector
20:33 - is
20:34 - zero right but if you push back any
20:37 - value here it will automatically
20:39 - increase its size double its size
20:43 - right see there are two things size plus
20:46 - capacity these are different thing if I
20:50 - right now if I print same capacity here
20:53 - so for that also we have a method right
20:55 - let me just show you what output you
20:56 - will get here see
20:58 - size is zero capacity is also zero right
21:01 - now right because we haven't give any
21:03 - size okay
21:08 - if if I enter a value one then what do
21:12 - you think what is size what is capacity
21:15 - okay let me show you size is one
21:17 - capacity is also one fine if I
21:22 - insert now see let me I'm going to show
21:24 - you a interesting thing please
21:27 - concentrate here
21:28 - suppose two here two element are there
21:32 - now let me just run this and I'll show
21:34 - you what output you will get here size
21:36 - is two capacity of number is also two
21:38 - okay same now the twist is right now if
21:42 - I insert one more element push back
21:45 - suppose
21:46 - three
21:48 - right okay let's see now now size is
21:52 - three but capacity of numbers is
21:56 - four why so
21:59 - see I'm inserting one value so the size
22:03 - and capacity it's one one element is
22:05 - storing so now one size is one now again
22:08 - I want to insert another element so it
22:10 - is going to double its size so first
22:13 - size was one now one more element so
22:15 - size becomes two means capacity actually
22:18 - becomes two it is going to double it
22:20 - size so capacity is two size also two
22:22 - now third
22:24 - element now it is going to double its
22:26 - size first it was 2 2 into two double
22:29 - means it becomes now four so actually
22:32 - capacity is four but size is because
22:35 - actually we have inserted only three
22:36 - elements so size is three but capacity
22:38 - is four means it can hold four numbers
22:41 - right now right so if I insert one more
22:46 - item
22:49 - see suppose
22:52 - 34 what do you think pause the video and
22:55 - let me know in comment section what
22:56 - should be the size what should be the
22:57 - capacity you right
22:59 - now see this thing is this point is very
23:02 - important you have to clear this point
23:05 - capacity is four size is four okay but
23:08 - now one more thing one more element I
23:11 - want to
23:13 - insert suppose it's
23:15 - 37 now again pause the video and try
23:18 - this out write down in comment section
23:20 - like what is the size what is the
23:21 - capacity so size is 1 2 3 4 5 but
23:25 - capacity this time is 1 2 3 4 four was
23:29 - capacity but I'm inserting Fifth Element
23:32 - so it is going to now double its
23:34 - capacity so capacity becomes eight but
23:37 - actual size is
23:38 - four right
23:42 - see size is five so size is five sorry
23:45 - and capacity is
23:46 - eight so how many element this Vector
23:49 - can store right now eight elements right
23:51 - but actual element we have stored only
23:53 - five if you have stored right now eight
23:55 - elements all the the vector is full and
23:58 - I want to insert ninth element so now it
24:00 - is going to double its size like 16 it
24:03 - becomes right so this is the case
24:05 - capacity is different size is different
24:07 - this is how it is going to handle it is
24:09 - going to you know uh increase its size
24:11 - automatically going to double its size
24:14 - right so to maintain this kind of thing
24:18 - it needs extra
24:21 - memory than array right more memory than
24:24 - array to handle these kind of things so
24:27 - it is going to double
24:28 - like it is going to create another
24:30 - Vector of double capacity and it is
24:33 - going to dump the previous Vector delete
24:35 - or destroy the previous Vector right
24:38 - this is how it going to work okay this
24:40 - is one method of initializing next
24:43 - is if you want to initialize populate
24:46 - the vector with same value multiple
24:49 - times then we can use overloaded
24:51 - Constructor so here what we can do is
24:54 - while declaring same Vector the type
24:57 - vector Vector name and here in bracket
25:00 - we can write down how many number of
25:02 - times that element you want in that
25:04 - Vector suppose 10 times 10 times I want
25:08 - five in this V so if you will print this
25:10 - Vector all the 10 here the number of
25:14 - repetion First argument number of
25:15 - repetion here the value you want to
25:18 - store in this Vector how many times 10 *
25:21 - 5 so uh we can do something like this
25:25 - using Loop we
25:30 - can and I should be less than the size
25:34 - of vector so you don't need to give any
25:35 - hard value how to we have a function
25:37 - size so just give the
25:40 - that Vector dot Vector name dot size it
25:44 - will automatically calculate the size
25:45 - until then it is going to repeat the
25:47 - loop I ++ and you just want to print see
25:51 - out the values so same I'm using this
25:54 - thing to
25:56 - access
26:01 - the values so let me run run this and
26:04 - see it will okay let me just uh write
26:07 - down here new line also endl or slash
26:10 - and you can write let's run this and
26:13 - this five time sorry 10 Time 5 5 5 5
26:16 - five in the vector so same value if you
26:19 - want
26:20 - to repeat multiple times another thing
26:24 - we have a fill also you can use that
26:27 - fill algorithm also right now same
26:32 - multiple many times same value if you
26:34 - want to put in that Vector you can just
26:36 - use fill algorithm rather than this
26:38 - thing how to use that thing let me show
26:39 - you we have a vector here you have to
26:42 - give size
26:43 - like size of vector is 10 10 value I
26:47 - want to store right so here we
26:52 - have this fill
26:56 - and
26:58 - Vector you have to use some iterator
27:01 - like begin from begin to
27:05 - end numbers dot end and what value I
27:10 - want to give suppose five
27:19 - same and I want to print this thing so
27:24 - same it will give you 5555 10 times so
27:26 - this is how we can use that fill also
27:30 - fill algorithm fill function right we
27:33 - can use initializer list also like we
27:35 - use array in arrays let me show you that
27:38 - thing
27:39 - also rather than this fill I'm using
27:42 - here
27:43 - only no size vectors equal to just give
27:47 - initializer list that's it suppose
27:56 - one we are just giving initializer list
27:59 - and we are initializing Vector this is
28:01 - also one thing so same if you want to
28:04 - print we with for Loop we can print
28:07 - right here size will be automatically
28:09 - calculated and it will give you all the
28:11 - values so it will print all the values
28:13 - of this Vector right so this is another
28:16 - way or we have a vector and using that
28:19 - Vector we can initialize another Vector
28:22 - that is also a case so suppose I have
28:24 - this Vector numbers and another Vector
28:26 - I'm taking
28:29 - Vector in obviously same type we have to
28:32 - take because I want to initialize the
28:35 - second Vector with with these values
28:37 - only so Vector name I'm taking numbers
28:41 - two right and here what you have to give
28:44 - in these
28:46 - brackets this Vector name from because
28:49 - from this Vector I want to take values
28:51 - so numbers dot begin comma
28:58 - numbers dot end the these are the begin
29:01 - and these are iterator functions there
29:03 - are many more iterator functions also
29:05 - that also we'll see one by
29:06 - one whenever we use these functions
29:09 - you'll get it you know familiar with
29:10 - these functions no need to just learn or
29:12 - remember all the functions at first we
29:15 - use these function one by one and you
29:17 - will get these things right don't worry
29:20 - I hope you got the begin and
29:22 - end uh what is the meaning of these
29:25 - iterator why we use this begin means
29:27 - from here and and here right from here
29:30 - to here all the values I want to take
29:32 - and I want to initialize vect number two
29:34 - so here numbers I want to
29:38 - print the second Vector numbers two so
29:41 - same value it will give you 1 4 5 6 8 8
29:45 - 90 this is how with help of another
29:48 - Vector we can initialize our Vector
29:50 - right this is also one way and like this
29:52 - there are many more ways also but most
29:55 - commonly used methods I have told you
29:57 - this is how we can initialize vectors so
29:59 - it's up to you now you have to practice
30:01 - you just declare different different
30:02 - type of vectors initialize those vectors
30:04 - with these methods and all
30:14 - right so in the next video we'll see how
30:16 - to access values from a vector how to
30:18 - modify a vector and there are different
30:20 - different functions all so that we can
30:21 - use with vectors so those thing we'll
30:23 - see in next video right so now I'll see
30:26 - you in the next video till bye-bye take
30:35 - care