00:00 - I'm going to write down a piece of code
00:01 - for this linear search algorithm now
00:03 - first of all I'm going to take one
00:05 - example and we will see the working
00:07 - principle of this linear search see this
00:10 - is also known as sequential search fine
00:12 - now suppose this is our data this is our
00:16 - array having how many elements n is
00:18 - equal to 8 8 elements and indexes from 0
00:23 - to 7 right now suppose you want to
00:27 - search a data and value of this data or
00:34 - key or you can take any variable I am
00:36 - going to take here data a variable data
00:39 - suppose you want to search 42 you want
00:44 - to search is 42 present in this area or
00:46 - not
00:47 - now here two cases are there one is
00:51 - element is present in the list and
00:56 - second is not present right
01:01 - if element is present now in that case
01:05 - you want you want to print the location
01:10 - of that of that element where that
01:15 - element is present in this array
01:17 - maybe you can say at which index or you
01:20 - can say at which position this element
01:22 - is present so see here the index for
01:25 - this 42 is 5 right and position is what
01:29 - 6th position 1 2 3 4 5 6 6th position
01:32 - right so either you can print index or
01:35 - you can print location now see if
01:38 - element is not present then you want
01:41 - that your program should print element
01:43 - not found so now let us discuss the
01:45 - working of this linear search in this
01:48 - case we are going to start our search
01:51 - from starting of the era from the 0th
01:54 - index fine
01:55 - and we are going to access each element
01:58 - of the array one by one and see whether
02:02 - this is the desired data you want if yes
02:06 - then you are going to return that
02:08 - location if no then you are you
02:11 - next element then to the next element
02:14 - then next next next and like this now
02:17 - see 442 first of all we'll check HERE
02:21 - from the sway we are going to start from
02:23 - the starting of theory 15 is this
02:25 - element same you want know then move to
02:28 - next element this is not 42 next element
02:32 - this is also not 42 this is also not 42
02:35 - next and next now here you find what 42
02:40 - now where you are going to stop your
02:42 - search to two cases are there first
02:46 - cases first stopping condition is you
02:49 - found the element like 42 you have found
02:53 - the 42 here now we are going to stop
02:55 - your search algorithm here and now what
02:58 - does this algorithm will return the
03:00 - index 5 that 42 is present at index 5 or
03:04 - second cases if data is not present in
03:07 - there is let us suppose you want to
03:09 - search 41 now here is not 41 here not 41
03:15 - not 41 now next next is 1 you are going
03:20 - to stop here now because next we don't
03:22 - have any element so now second stopping
03:25 - condition is you have reached to the end
03:28 - of the array fine and the data is not
03:32 - present here so now you have to stop -
03:35 - stopping conditions are there either you
03:37 - find the data are you released till end
03:40 - of the air now how to write down the
03:43 - code for this C you can you can write
03:45 - down the iterative method using for loop
03:47 - or you can write down a function of
03:49 - linear search and you can call that
03:51 - function in your main function either
03:53 - method you can follow fine I'm going to
03:55 - follow here they try to approach I am
03:57 - going to write the for loop see we are
04:00 - going to start a loop from the Sun decks
04:02 - 0th index and the loop will go till end
04:06 - right now see here we have one for loop
04:11 - we will take one variable I I is equal
04:13 - to starting from 0 and I less than n and
04:20 - I plus plus because here n is 8
04:23 - so it should go till 7:00 less than
04:27 - eight that is from zero to seven fine
04:30 - now next next what you will do you have
04:33 - to find what 42 okay now you will check
04:37 - if if name of fare is a if area of I
04:44 - area of I value would be first of all I
04:48 - will you would be zero then I plus plus
04:50 - then 1 then 2 like this we are going to
04:53 - search now we are going to access each
04:54 - element of the array one by one and we
04:56 - are going to search and we are going to
04:58 - compare is this data we want to search
05:01 - right so if area Phi is equal to equal
05:04 - to data then what you will do you will
05:11 - return the location of that data you
05:14 - will print so here you will print printf
05:21 - you can write here element found add
05:25 - index percentage D and you want to print
05:30 - the index so here you will print what I
05:34 - write ad index so 42 would present at
05:39 - index v if you want to print the
05:41 - position you can say element found at
05:43 - position I plus 1 means at which
05:47 - position sixth position now suppose we
05:49 - are going to write this thing only this
05:51 - is closing of this if this is closing of
05:52 - this for now see let us trace out this
05:55 - code with for this 42 fine I will newest
06:00 - at starting I values 0 I is less than 80
06:03 - yes we will enter into this loop if a of
06:05 - I a of 0 a of 0 is 15 15 is equal to
06:08 - data data is 42 no so control will not
06:11 - go within this if statement
06:14 - now after if this if the control will go
06:17 - to I plus plus now I is equal to 1 if 1
06:20 - is equal to data no now I is equal to
06:22 - 2ei of 2 is equal to data no I is equal
06:25 - to 3ei of 3 is equal to this date and no
06:29 - I is equal to 4ei oh four is equal to
06:31 - data no a oh five now see a o5u 5 is 42
06:36 - 42
06:37 - equal to data is 42 yes now control will
06:40 - go within this loop now what control
06:42 - will print element found at index 5 fine
06:47 - now see the problem is here now again
06:51 - after this if control will go to I plus
06:54 - plus now I is equal to 6 and 6 is less
06:58 - than 8 right now again we are going to
07:02 - check if a of 6 a of 6 is equal to data
07:05 - right but that is not true again I plus
07:08 - plus I is equal to 7 again 7 a of 7
07:11 - equal to data no we are not going to
07:13 - enter into this loop now again is equal
07:15 - to 8 now 8 less than 8 no now control
07:18 - will go out from this for loop now here
07:21 - the drawback is what for this for
07:22 - drawback is what we have found the
07:25 - element at index v but still still this
07:29 - this cord is searching for 6th location
07:32 - also and for seventh index also now what
07:36 - is the point to search after finding the
07:39 - data right we have we have found the
07:41 - date Ana now at 5th index only we have
07:43 - found 42 now what should be done this
07:47 - this this algorithm or this code should
07:49 - have stopped at here on e but this is
07:52 - not stopping now you have to add one
07:54 - more condition here right
07:56 - you have to write right what break after
08:03 - this printf you'll write break and after
08:05 - you will close this if statement now say
08:08 - this break means what as soon as control
08:11 - will go to this break statement then
08:14 - then what the control will go out from
08:17 - the loop in which break statement is
08:20 - written now it break statement is
08:22 - written any which loop which for loop
08:24 - here so we found the data at index 5 at
08:29 - index 5 right again control will go to
08:32 - here only break break means the control
08:35 - will go out out from this loop out from
08:37 - this loop here only now if you write
08:41 - this break then we will not search for
08:44 - this location and for this location
08:47 - this is the stopping condition now so
08:49 - now next case is if element is not
08:51 - present in the list in the array then
08:54 - what you will do
08:55 - then you will print what element not
08:57 - found right now
08:59 - we are where to write that condition how
09:01 - to write that condition see if element
09:04 - is not present if suppose we are going
09:06 - to search data is equal to 41 and that
09:10 - 41 is not present now finally when I is
09:13 - equal to 7 I is equal to 7 7 is less
09:16 - than 8 data is 41 a of 7 is this 41 no
09:22 - now again I plus plus I is equal to 8
09:25 - and 8 is less than 8
09:27 - no now control will go out from this
09:30 - loop whatever you will write here fine
09:34 - it means if I when you has been raised
09:38 - to 8
09:39 - here it is what a number of element it
09:42 - means if I when nu becomes same as this
09:46 - n value number of elements in that case
09:49 - data is not present you can say right so
09:52 - what you will write here you write if if
09:56 - I evaluate to 2 and in that case you can
10:02 - write here printf element not found and
10:10 - if you don't write this condition if you
10:13 - don't write this 1 1 second method to
10:17 - print this statement is element not
10:19 - found s see you can take one variable
10:23 - here at the starting you can take either
10:26 - found or flower it's up to you I am
10:29 - taking found a variable found is equal
10:33 - to 0 in the program at starting and if
10:37 - you find the element in that case you
10:39 - will do what you and you'll convert this
10:41 - found value to 1 means found is equal to
10:44 - true now we have found the element right
10:46 - so before this break before this break
10:48 - here you will write what found is equal
10:52 - to 1 right
10:55 - here after this after this for if you
10:58 - don't write this condition then second
11:00 - case is this is case one you can write
11:02 - this also this is case two and you can
11:05 - write this also here you can write if
11:10 - found is equal to is equal to zero it
11:14 - means you can print F here data not
11:18 - found
11:21 - if found is equal to zero it means it
11:24 - means control has not entered into this
11:29 - if condition here means this condition
11:34 - never becomes true so that is why that
11:38 - is why after the for loop also still
11:41 - found is equal to 0 it means found is
11:43 - equal to false element is not present so
11:45 - you can write element you can say
11:47 - element not present so you can write
11:49 - this also you can write this also if you
11:51 - follow if you write this case then you
11:53 - do no need to declare this found
11:55 - variable see this is not the complete
11:57 - program so you have to write some
11:59 - another statement so this is just the
12:01 - main logic not the complete program so
12:03 - now what is time complexity first of all
12:05 - we are going to check in best case best
12:08 - case as well suppose this is our array
12:10 - and you want to find out data is equal
12:13 - to 15 by in linear search jewelry we are
12:17 - going to start from the initial point of
12:19 - the array from the 0th index find out
12:22 - check 15 first at first index at 0th
12:26 - index we have value 15 15 is equal to
12:29 - the state yes it means in one comparison
12:32 - only you have got the data so in the
12:36 - best case the time complexity would be
12:39 - order of 1 only
12:41 - what about worst is worst case means
12:47 - suppose you want to find out the data 17
12:51 - here how many comparisons you have to do
12:54 - first of all 15 then 5 then with 20 then
12:57 - 35 to 40 to 6 to 7 and then 17 and here
13:01 - you got the data means n N
13:05 - Parisians eight comparisons right so
13:09 - that is why here the time complexity in
13:11 - worst cases order up and the number of
13:13 - elements total number of elements and if
13:16 - you find out the time complexity you
13:17 - just you just do what check out where is
13:21 - the loop in this program here we have
13:23 - loop and find out the statements written
13:25 - in this loop how many times they are
13:27 - being executed that is the time
13:29 - complexity fine so see these statements
13:32 - printf and break are only one and one
13:34 - time so this is constant only this if
13:36 - statement this would be executed for how
13:38 - many times maximum this this would
13:41 - repeat for maximum how many times still
13:43 - in right so in worst case time
13:46 - complexity would be and now what about
13:48 - average case have to find out average
13:54 - see average means sum of all the cases
14:01 - divided by number of cases write sum of
14:08 - all the cases how many cases can be
14:10 - there see one case is the data is
14:12 - present in the 0th index only in that
14:14 - case how many time complexity is or how
14:17 - many comparisons are there one only plus
14:19 - if data is present at here only in that
14:21 - case how many comparisons are there two
14:23 - only plus third cases the data is
14:26 - present here only none in that case how
14:28 - many comparisons one two and three like
14:31 - that till n comparisons how many cases
14:36 - some of all the cases right divided by
14:40 - number of cases are n right and I hope
14:44 - you know the formula of this one 1 plus
14:47 - 2 Plus 3 up to n that is n into n plus 1
14:50 - divided by 2 and here we have n n n so
14:55 - the time complexity will be order of n
14:57 - plus 1 divided by 2 you can say so this
15:01 - is all about linear search in next video
15:03 - I am going to talk about binary search
15:05 - right so till then bye-bye take