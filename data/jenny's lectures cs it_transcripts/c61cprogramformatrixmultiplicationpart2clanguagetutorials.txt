00:00 - so in the series of learning programming
00:01 - in c we are discussing some programs on
00:03 - metrics in the previous video we have
00:05 - discussed the theory of this program how
00:08 - to do matrix multiplication like how to
00:10 - multiply two Matrix how the logic behind
00:13 - multiplication the rules and the
00:14 - conditions everything we have discussed
00:16 - in the previous video in this video we
00:17 - will write a program first of all I'll
00:19 - write a program here we will Wren that
00:21 - program step by step and then I'll show
00:23 - you output on my laptop practically you
00:25 - will also see
00:28 - right
00:31 - so now I'm taking these two Matrix we
00:33 - will be reading these Matrix first and
00:35 - then we'll print the final Matrix so the
00:39 - dimension would be size would be number
00:41 - of rows of first Matrix number of
00:43 - columns of second Matrix so that would
00:45 - be 3 into 2 Matrix that is for sure
00:47 - right can we multiply this check Columns
00:50 - of first Matrix three should be equal to
00:53 - number of rows of second Matrix number
00:55 - of rows three yes equal yes we can
00:57 - multiply these so I'm just writing
01:00 - writing down the logic here just for
01:03 - multiplication for reading purpose like
01:06 - nested loops and scanf I guess you can
01:08 - do we have read Matrix multiple times so
01:10 - that I'll show you directly on my laptop
01:13 - right here I'll just discuss the code to
01:15 - multiply these matrixes right I'm
01:18 - assuming that you have written the code
01:20 - to read these two Matrix and to print
01:22 - these two Matrix on the screen right now
01:25 - see the logic
01:28 - here I is0 see second this Matrix
01:31 - resultant Matrix is suppose C this is a
01:33 - this is B so dimension for C is 3 into 2
01:37 - means number of rows three two number of
01:39 - columns so outer loop would be for
01:41 - number of rows we know so that would be
01:43 - from 0 to
01:46 - three in that Loop would be for number
01:48 - of columns so that should run from 0 to
01:51 - two because here we are we will having
01:53 - we will be having two columns so
01:57 - j++ right now here what logic we have to
02:01 - implement see index is
02:04 - 012 012 012 please try to understand
02:08 - this one clearly first of all here if
02:11 - you get this logic you can directly you
02:13 - can easily write down the program at
02:15 - your own so first we will take this
02:19 - complete multiply with this
02:22 - column First Column of I mean column
02:26 - zero of second Matrix row zero first
02:28 - Matrix and we will access this and this
02:32 - and add this and this and add multiply
02:34 - this and this and add and whatever the
02:37 - value will get we will store here the
02:39 - sum we will store here right so now how
02:43 - you are getting
02:46 - C
02:48 - here I'm multiplying what I'm accessing
02:51 - and multiplying
02:53 - what a
02:56 - of I'm accessing
02:58 - these uh elements means index would be 0
03:03 - 0 0 1 02 means first index is
03:08 - 0o right and that is
03:11 - I for first iteration I would be zero
03:14 - for all the iterations then it would be
03:16 - one right so we are accessing this row
03:20 - so for this entire row I value is zero
03:23 - because row uh for handling row we are
03:27 - taking a variable I I this Loop is for
03:30 - row right so a of I now second subscript
03:34 - would be
03:36 - what I'm accessing second subscript is
03:38 - changing every time 0 1 and two First
03:42 - Time Zero then one then two right but we
03:45 - cannot write down here J because J would
03:48 - always be run from zero and one two
03:51 - times only once J becomes two out from
03:55 - the loop and I want this value 0 1 and 2
04:00 - and we cannot write I here obviously we
04:02 - have written I here we cannot write J so
04:05 - now what you will write we have only two
04:06 - variables I and J so here we will take
04:09 - another variable
04:11 - K and that value would run from 0 1 2
04:15 - right now
04:17 - into B of B of here in two subscript
04:22 - what you will
04:23 - write we are accessing this
04:26 - one right so index would be 0 1 for this
04:31 - 1 0 2 0 means the second index is same
04:35 - that is zero every time right and if you
04:38 - will access this one the second index
04:40 - would be one every time zero and one we
04:43 - are we are not having any other column
04:45 - we are having only two columns 0 and one
04:47 - so here we will write directly j 0 and
04:51 - one J would run from two uh would run 2
04:53 - * 0 and 1 so here you will write J but
04:56 - here what you will
04:58 - write because it's changing 0 0 1 0 2 0
05:03 - so here we will write K obviously we
05:06 - cannot write I here because I value is
05:09 - what for every iteration it's zero and
05:13 - this value is changing 0 1 2 we have
05:15 - simultaneously accessing this and this
05:17 - then multiply this and this multiply
05:20 - this and this multiply and then add also
05:22 - so we are going to multiply
05:25 - this right and also we are going to add
05:28 - in this one
05:30 - so we have to take another variable K
05:33 - and we will add in this we will take
05:35 - another variable like sum and whatever
05:38 - the value here we are going to store
05:40 - that into sum again right so before this
05:44 - another for Loop that is k k should be
05:47 - zero now upper bound of K would be
05:50 - what it is basically for the
05:52 - multiplication purpose right so K would
05:57 - be would run three times 1 2 3 and here
06:01 - also K is handling this or this three
06:03 - times so 0 to two it should run three
06:05 - times so K less than three or here what
06:09 - you can write upper bound uh must be
06:13 - either number of columns of first Matrix
06:18 - or number of rows of second Matrix here
06:21 - both are three and three so that is why
06:23 - it is 3 and K
06:27 - ++ and this you have to write down this
06:30 - line you will write down in this Loop
06:32 - okay and whatever the value in sum
06:35 - obviously we are going to store that
06:36 - value in this
06:38 - Matrix sum so at C of i j here we will
06:42 - store
06:43 - sum
06:45 - fine that's it right now for again what
06:51 - we will do this row but now this
06:55 - column right so sum you have to
06:57 - initialize again with zero
06:59 - otherwise it will take whatever the
07:02 - value in sum and it will add in that
07:04 - some value this and this so whatever you
07:06 - will get here that should not be correct
07:08 - so after this loop again we will
07:10 - initialize sum with zero so where we
07:12 - should initialize the sum zero outside
07:16 - of this four Loop so here we will
07:17 - initialize sum is equal to
07:20 - zero within this J Loop sum is equal to
07:23 - Zer we can initialize here and before
07:25 - initializing obviously we will declare
07:27 - this variable after function like where
07:30 - wherever we declare this igk variable
07:32 - there only we can declare this sum right
07:36 - so uh it's okay we have stored here
07:38 - right now we can close this for Loop and
07:42 - then this I
07:44 - Loop and now if you want to print
07:47 - this this i j sorry C Matrix next two
07:51 - Loops would be required I would be 0 to
07:53 - 3 J would be 0 to2 and directly you can
07:55 - print what print F percentage D c5j that
07:59 - that's it that is very simple here the
08:01 - main logic is this Loop the K
08:05 - Loop and what you will write here that
08:08 - is very important that's it otherwise
08:11 - there's nothing in this multiplication
08:13 - program so let me dry run this logic and
08:15 - then you will get it right
08:20 - see we have I variable we have J
08:23 - variable as well as we have K and also
08:25 - we have
08:26 - sum right so I is zero
08:29 - condition true enter J Z condition true
08:32 - enter now some would be initialized with
08:34 - zero here now here we have one for Loop
08:37 - k k would be initialized with zero
08:40 - condition true enter now see the
08:43 - statement Su is equal to Su plus this
08:45 - sum plus sum is what 0 0 plus now what
08:50 - we are accessing I value
08:55 - 0 K value zero K value 0 I value 0 so a
09:02 - of 0 0 means 0 B of 0 0 means 1 we are
09:06 - multiplying 0 into 1 that is 0 right so
09:10 - 0 plus here we have again the value is0
09:14 - and whatever the value that would be
09:16 - what stored in this sum so now sum is
09:20 - still zero right so now we haven't uh
09:24 - you know got the exact output whatever
09:26 - we want here because obviously we want
09:28 - to add this and this multiplication of
09:30 - this and this and this and this so now
09:32 - rather than storing some
09:35 - here better to store
09:37 - this in this K Loop we will only write
09:40 - this one line sum is equal to this and
09:42 - after closing the SC Loop then we will
09:45 - store the sum into C right so now see
09:49 - now the working is
09:51 - what see we have done this sum is equal
09:54 - to sum is still zero now k++ now K
09:58 - becomes one
10:00 - condition true yes again enter here 0 1
10:03 - 1 0 so now sum is equal to sum whatever
10:07 - value in sum still we have 0 0
10:10 - plus a of 01 we are going to access a of
10:14 - 01 a of 0 0 1 that is 5 so 5 into B of 1
10:20 - 0 B of 1 and zero that is zero so that
10:25 - is what 0o right 5 into 0 Z and sum is
10:30 - also zero so now still sum is zero again
10:33 - k++ K becomes 2 yes condition true again
10:37 - enter here now we will exess 02 and two
10:40 - 0 so sum is still 0 plus 02 a of 0 and
10:46 - two this one 2 into B of two 0 B of 2 0
10:52 - that is 3 3 into 2 6 now that that would
10:56 - be stored in sum so sum becomes now six
10:59 - now K becomes three condition true no
11:02 - condition is not true exit from the SC
11:04 - Loop and now we will will store this in
11:08 - at C of IJ I value is zero K value is
11:11 - zero sum sum is six so we'll store this
11:15 - at 0 0 so here we will store this six so
11:19 - first element we have got of the
11:21 - resultant Matrix that is six right and I
11:24 - hope it's correct fine now see after
11:29 - after this line what now still we are in
11:31 - this jth Loop so now what will be done
11:35 - j++ now J becomes
11:38 - one now condition true again enter here
11:41 - again some would be initialized with
11:43 - zero right if you will not initialize
11:45 - the sum with zero then by default what
11:49 - the value in sum is six so it will take
11:51 - six plus it will do what multiplication
11:54 - of this and this and it will store here
11:56 - so that would not be correct so now
11:57 - again we have to initialize some with
11:59 - zero I hope you're getting my point
12:01 - right now again K would be
12:05 - zero condition true yes enter here now
12:09 - see I value is still
12:11 - zero K value zero K value Z and I sorry
12:15 - j value is now see J value is now
12:19 - one right and that's exactly you want to
12:22 - access now sum is 0 0 + 0 0 means 0 into
12:29 - 0 1 0 1 exactly now we want to access
12:34 - this row but this column and we are
12:37 - going to multiply and add so 0 into 2
12:40 - but that is Zer only so that would be
12:42 - stored in sum sum is still zero now k ++
12:46 - k becomes 1 condition true again enter
12:48 - here now 0 1 and we will exess 1 1 so 0
12:52 - 1 is 5 5 into 1 1 that is 4 this is what
12:58 - 20
12:59 - so now 20 would be stored here right but
13:02 - K is what two condition true again enter
13:05 - here now K is 2 here K is 2 so we exess
13:08 - 02 02 means 2 so 20 + 2 into 2 1 2 and 1
13:15 - that is five 10 that is 30 so now sum
13:18 - becomes
13:20 - 30 right now k ++ k becomes three but
13:23 - condition is not true exit from the K
13:25 - Loop and now whatever the value in sum
13:27 - we are going to initialize is that value
13:29 - we are going to store that value in CI j
13:31 - i is zero but J is 1 so 0 1 this index
13:36 - zero
13:38 - row and one column so here we will store
13:41 - what
13:42 - 30 so we got this value second one 30
13:47 - right so now again j++ now J becomes two
13:52 - but condition is not true this time jth
13:54 - condition right so exit from this jth
13:58 - Loop and now now still we are in I Loop
14:00 - now I becomes
14:02 - one right condition true again enter
14:05 - here and again J would be initialized
14:07 - with
14:08 - zero obviously condition true and again
14:10 - the same process would be
14:12 - repeated right so now I is one now so we
14:16 - we will get this
14:18 - row and when I becomes two you will get
14:21 - this row and when I becomes three
14:24 - condition is not true exit from the loop
14:26 - so here we are getting three rows and
14:28 - two columns only right so I hope you got
14:31 - the working of this one
14:34 - right it's not confusing right so let me
14:38 - show you this thing
14:40 - practically so now let me show you
14:42 - practically see here I have already uh
14:46 - done this program matrix multiplication
14:48 - dot C because if I'll write the complete
14:50 - coding here then it would be very
14:51 - lengthy the video would very ly so I'll
14:53 - just explain the coding I'll show you
14:54 - the output here I'm using macro see hash
14:57 - Define n 50 I have just taken a size
15:01 - macro size 50 and here I'm declaring
15:04 - array like what I'm not giving any size
15:06 - I'm just writing n right so this is also
15:09 - another way to define to write to
15:12 - declare size of an array using macro
15:15 - that's exactly I want to show here right
15:18 - so that is fine now here I want that
15:20 - user should enter number of rows and
15:22 - columns for these matrics for first and
15:24 - second matrics right so that is why I'm
15:26 - ask I'm asking here rather than you know
15:30 - static declaration 3 into 3 and 3 into 2
15:32 - Matrix I ask from user right so print of
15:37 - enter number of rows and columns for
15:38 - first Matrix and for number of rows and
15:40 - columns for storing the value I'm taking
15:42 - what M and N so this you need to take
15:45 - care M and N M number of rows for first
15:49 - Matrix n number of columns for first
15:51 - Matrix p number of rows for second
15:53 - Matrix Q number of columns for second
15:56 - Matrix this you need to take care so
15:58 - address of M and N I'm just taking now
16:00 - I'm going to enter the first Matrix
16:03 - C two for Loops outer loop would be for
16:07 - number of rows that is why I'm writing
16:09 - here the upper bound is less than M
16:11 - rather than writing any three or two or
16:13 - any value I'm writing m in the loop
16:16 - would be till n because n would be
16:18 - number of columns so scanf address of a
16:20 - of right
16:22 - same second Matrix enter number of rows
16:26 - and columns for second Matrix we are
16:27 - taking variable p and Q enter second
16:30 - Matrix the loop would be from 0 to P
16:32 - inner loop would be from 0 to q and
16:34 - address of a of IG right now I'm
16:39 - printing first and second Matrix so
16:42 - print F first Matrix is here I'm just
16:45 - going to print whatever you have entered
16:46 - in Matrix form so obviously two for
16:49 - Loops outer would be from 0 to M inner
16:52 - would be from 0 to n and print F A of i
16:57 - j that's it and and same we are going to
16:59 - print second Matrix I hope this is clear
17:01 - to you because we have discussed this
17:03 - thing many times so now here also one
17:05 - more thing I'm adding I'm going to check
17:08 - if we can multiply The Matrix or not so
17:11 - what is the condition I have told you
17:13 - for multiplication number of columns of
17:16 - first Matrix must be equal to number of
17:18 - rows of second Matrix right if not equal
17:22 - you cannot multiply so here if n number
17:26 - of columns of first Matrix n not equal
17:30 - to p p is what number of rows
17:34 - of uh second Matrix if these are not
17:38 - equal means you cannot multiply means it
17:41 - should print you cannot multiply else we
17:44 - can multiply so in lse part we will
17:46 - write down the coding of multiplication
17:49 - this right see so the resultant Matrix
17:54 - would be of size M into Q I hope you got
17:59 - why I'm saying M into q m number of rows
18:02 - of first Matrix and Q number of columns
18:04 - of second Matrix so the resultant size
18:05 - would be M into Q so that is why Loop
18:08 - would be outer loop would be from 0 to M
18:10 - inner loop would be from 0 to q and in
18:13 - this Loop we are initializing sum is
18:15 - equal to Z and one more Loop that is K
18:18 - that is responsible for actual you know
18:20 - accessing the simultaneously the values
18:23 - and multiplying those values and adding
18:25 - right so same I'm writing some Plus a of
18:28 - i k into B of
18:31 - KJ and after this K Loop I'm going to
18:35 - store sum is equal to c5g that's it and
18:39 - here I'm printing the multiplication
18:41 - print printing is simple two for Loops
18:43 - only outer loop would be M 0 to M and
18:46 - inner loop would be from 0 to Q right
18:49 - because you you know number of rows and
18:51 - columns and I'm just printing
18:53 - CG right now let me just run this
18:56 - program for you
19:03 - see it is asking enter rows and Columns
19:04 - of first Matrix so I'm taking 3 and 3
19:08 - enter first Matrix so I'm entering the
19:10 - value now 0 5 2 -1 1
19:16 - 0 uh 3 7 and
19:20 - 5 now enter number of rows and columns
19:22 - for second Matrix so I'm taking 3 into
19:24 - two Matrix so enter second Matrix that
19:26 - is 1 2 0 0 1 5 4
19:32 - C this is first
19:35 - Matrix right this is second Matrix and
19:39 - this is the multiplication of these
19:41 - Matrix and see let me just run this
19:43 - again again and show you uh one more
19:46 - output like if you cannot multiply The
19:49 - Matrix that kind of thing so number of
19:51 - rows I'm taking three and three and
19:57 - Matrix
19:59 - and number of rows and Columns of second
20:01 - Matrix I'm taking uh what it is 5 into 4
20:08 - so second Matrix would
20:19 - be
20:20 - see just want to show you this output
20:23 - cannot
20:24 - multiply why because here number of of
20:28 - columns of first Matrix is not equal to
20:31 - number of rows of second Matrix number
20:33 - of columns in first Matrix I have
20:35 - entered that is three but number of rows
20:39 - in second Matrix are I guess 1 2 3 4 5
20:43 - and 3 is not equal to five so that is
20:44 - why it is showing we cannot multiply
20:46 - right so maybe this condition you can
20:49 - put where
20:51 - here after uh just know uh asking enter
20:55 - rows and Columns of second Matrix at
20:58 - that only you can check if the condition
21:00 - is true then only it will ask that enter
21:04 - second Matrix otherwise it will not ask
21:05 - it will just directly print uh it we
21:08 - cannot multiply these Matrix please
21:10 - enter the correct size right so I hope
21:13 - you got the program now so now I'll see
21:15 - you in the next video till then bye-bye
21:17 - take care