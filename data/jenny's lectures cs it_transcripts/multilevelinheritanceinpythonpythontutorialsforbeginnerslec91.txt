00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:03 - path programming language we are
00:05 - discussing in inheritance in Python so
00:07 - till now we have discussed single and
00:09 - multiple inheritance two types of
00:11 - inheritance third type is multi-level
00:13 - inheritance so this thing will see in
00:15 - this video what is multi-level
00:17 - inheritance how this is different from
00:19 - multiple inheritance with the help of
00:20 - proper example program
00:22 - you know we will see practical as well
00:24 - right so first let's see what is
00:27 - multiple inheritance single inheritance
00:29 - is what simple we have one parent class
00:33 - right and
00:35 - from there we can inherit one class that
00:40 - is child class right so this is single
00:43 - inheritance multiple inheritance is what
00:46 - more than one parent class
00:49 - suppose I am having parent two as well
00:51 - so parent two
00:53 - this child class is deriving or
00:56 - inheriting
00:57 - from more than one parent parent one
01:00 - parent two up to parent n a number of
01:03 - parents can be there so this is multiple
01:05 - inheritance now what is multi-level
01:07 - inheritance in multi-level inheritance
01:10 - we are not having more than one parent
01:12 - see
01:14 - from this parent we are deriving a class
01:16 - child class support child one
01:20 - this child as well you can derive one
01:23 - more child class child
01:25 - two from this also we can drive one more
01:29 - child through like this up to
01:32 - child
01:32 - [Music]
01:34 - n
01:36 - this is multi-level inheritance
01:39 - means we can derive or we can inherit
01:42 - from a derived class as well so this
01:46 - type of inheritance is known as
01:48 - multi-level in evidence right see this
01:51 - is derived class so you can say child
01:53 - class or we can say subclass this is
01:55 - parent or base or you can say a
01:58 - superclass right so
02:01 - we can derive or we can inherit from
02:04 - derived class as well so this is Drive
02:06 - class Drive class of this parent class
02:09 - and from this drive class we are driving
02:10 - another class
02:12 - so this kind of inheritance is known as
02:15 - multi-level like this uh like
02:18 - grandparent
02:20 - and then parent and then
02:23 - Center Road
02:26 - this is multi-level candidates right
02:32 - now this parent is
02:35 - this class is parent class of child one
02:37 - but Grand
02:39 - class of child two right this child one
02:44 - is you can say parent class for child
02:47 - two right and maybe grandparent for
02:51 - child three if there is any child three
02:53 - like this
02:55 - so we have this kind of relationship
02:56 - grandparent parent then we like
03:00 - your papa and you
03:03 - like this right now let's say this thing
03:07 - with the help of program
03:09 - and see now this child class is having
03:11 - properties all the properties where you
03:13 - can solve the attributes and methods of
03:15 - this parent class and this child class
03:18 - can access all the attributes and
03:22 - methods of parent class as well as child
03:24 - one class like this right if there is
03:28 - child three in that case the child is
03:31 - three class have access to all the
03:34 - attributes and methods of parent class
03:36 - child one class and child two class
03:39 - right I hope this idea of multi-level
03:42 - inheritance is clear to you guys and now
03:43 - you know the difference between multiple
03:45 - inheritance and multi-level inheritance
03:47 - right let's see this practical so let's
03:50 - create a new file here and
03:53 - the name is multi-level inheritance
03:58 - Dot py
04:02 - okay same example we'll take like we are
04:05 - taking that class human class and just
04:09 - defining a function suppose
04:12 - Heat
04:14 - and now I am taking a class
04:16 - mail
04:18 - and mail is inheriting from Human class
04:22 - right and its own function it is having
04:25 - so I am defining a function like maybe
04:27 - sleep
04:28 - and now we are having one more class
04:30 - that is maybe boy
04:33 - and this boy is inheriting from male
04:38 - as you can see the hierarchy boy is
04:40 - inheriting from male May originating
04:41 - from Human class so if I don't write
04:44 - anything in this boy class
04:46 - and let's create maybe boy underscore
04:50 - one
04:54 - one object for from this boy class
04:57 - now with help of this boy don't a boy
05:00 - object you can access
05:02 - see Sleep Method and eat method eat from
05:06 - Human class and sleep from male class
05:08 - right and in it
05:10 - in it from object class see what is this
05:12 - object uh object is in pythm we are
05:16 - having a root class means this human
05:17 - classes we know it is parent class but
05:20 - no it's not actually true
05:22 - the root class or the parent class of
05:24 - all the classes you create is what
05:26 - object class so we can also write
05:28 - something like this
05:30 - object
05:31 - see as when you write this object
05:34 - see you can see here C
05:36 - a small C in a blue circle and built in
05:40 - so this is built-in class object class
05:42 - this is parent class of whole pairing
05:45 - so this is also fine you can write out
05:46 - this thing when you create a new class
05:48 - and if you don't write object that is
05:51 - fine
05:52 - right
05:53 - so like automatically if you don't write
05:56 - object then we are going to inherit all
06:00 - the inbuilt thing whatever in this
06:02 - object class in this human class right
06:04 - that is why you see I'm not having
06:06 - Clinic functioning boy in male or in
06:08 - human class so that is why using boy dot
06:12 - this we can inherit init function
06:15 - from object class
06:17 - right means we are using init function
06:20 - from object class
06:21 - like this right so object class is root
06:24 - for all the classes a root cluster you
06:26 - can say Base Class for all the built-ins
06:28 - all the built-in
06:30 - built-in Smith Matlab all the classes as
06:33 - well as foreign
06:43 - functionalities of object class like C
06:46 - this attribute class
06:48 - date these are from object class
06:51 - right that mro is also from object class
06:54 - mro method so see from object we can use
06:58 - multiple things
07:00 - this is TRS method size of method and
07:02 - all
07:03 - right
07:05 - okay
07:07 - let's suppose I am not writing this
07:09 - object class I am simply writing this so
07:11 - in Python 3.x after three point x if you
07:15 - don't write this object it means
07:16 - automatically it is inheriting from
07:18 - object class no need to write right
07:22 - okay now
07:25 - let's
07:27 - for this heat function
07:30 - and let's run this you have to select
07:34 - first the current current file here
07:36 - and now let's run this see I can eat
07:40 - so using boy we can access this this
07:43 - class
07:45 - and if if supposing boy also I am having
07:48 - one function
07:55 - let's suppose we are having one one more
07:57 - function verb
08:02 - I can walk and in boy also I am having
08:07 - this function verb
08:10 - and this is having its own definition of
08:12 - this work function
08:15 - like I can
08:17 - code
08:19 - so if you want to access this work
08:22 - then first it will search in boy class
08:25 - in boy it will find this work function
08:27 - so it will call work from boy Class C I
08:31 - can code
08:32 - right
08:34 - if you want to like access the previous
08:36 - definition also as well as you want to
08:38 - add something extra so yes you can
08:40 - access this thing as I have told you
08:43 - with the help of super method or with
08:45 - the help of one second way is what from
08:47 - which class you want to access the
08:49 - method human class so you can just write
08:52 - down
08:52 - the name of the classroom and load which
08:54 - method you want to access wow
08:57 - right and then sell
09:01 - on which object obviously we are
09:03 - accessing this method from object of boy
09:05 - class so you need to pass sell here self
09:08 - means it is representing boy one so
09:10 - means you are basically passing here the
09:12 - object name boy one let's run this now
09:16 - see I can walk I can code
09:19 - right like this you can access previous
09:21 - functionality also or other than this
09:23 - what you can write down second base
09:25 - just call this super function super Dot
09:28 - and
09:30 - walk no need to pass the object name or
09:33 - anything noise to pass self and on right
09:35 - if I comment out this thing and if I run
09:39 - this see I can walk I can code
09:42 - right
09:46 - as well as from boy also we can inherit
09:48 - one more class if you want to inherit
09:50 - like this is multi-level
09:52 - capital
09:56 - this is our convention
09:59 - we follow Pascal case and in programmer
10:01 - I'm not passing anything or let's define
10:04 - depth and same function wow
10:10 - and here I can write like maybe I can
10:16 - write programs
10:20 - something like this
10:22 - now with the help of if you want to
10:25 - create this programmer object
10:27 - like maybe Pro 1 is equal to from
10:30 - programmer class I'm creating
10:34 - so with the help of probe one you can
10:37 - access now okay we cannot access
10:39 - anything
10:40 - except this work method from programmer
10:43 - because you haven't inherited anything
10:45 - means from boy I am going to
10:48 - inherit I'm going to derive this
10:51 - programmer class now with the help of
10:54 - program we can exercise sleep and work
10:57 - from programmer right so if you print
11:00 - this work from programmer then it will
11:02 - print I can write programs and this is
11:05 - from
11:06 - right
11:10 - same if you have like attributes
11:13 - I have a init function in human and I'm
11:17 - just passing maybe I like
11:21 - number five right so self don't suppose
11:25 - I'm taking eyes is equal to two for
11:28 - every human obviously and self load
11:31 - heart is equal to whatever you pass numb
11:34 - heart
11:36 - this energy
11:39 - now I'm not defining any attribute in
11:41 - any other class so if with the help of
11:44 - this programmer class
11:46 - or let us suppose just delete this
11:48 - programmer and we'll just take
11:51 - three classes only because now you got
11:54 - the idea how many classes or how many
11:56 - till how many levels you can have the
11:57 - scenariants multiple levels
11:59 - so with the help of boy one
12:03 - now if you want to access like number of
12:06 - files
12:10 - then what do you think let's print this
12:16 - you will get error or you will get
12:18 - number of files is equal to two so you
12:20 - can pause the video and you can write
12:22 - down the answer of this question in
12:24 - comment section let's run the Sensi
12:27 - so you are getting an error
12:29 - in line number 17 in line number 17 here
12:33 - while you are creating this
12:35 - object where you're recording the
12:37 - Constructor then human init missing one
12:39 - required positional argument numb heart
12:42 - now which init function it is falling
12:44 - because obviously init function if you
12:47 - don't have any init function in any of
12:48 - the class then it will call from object
12:50 - class that is fine
12:52 - but now we are having init function in
12:54 - word class you have no in mail class no
12:57 - then ultimately human class you have yes
12:59 - so this initial function we are calling
13:00 - right if you want to check out you can
13:02 - just write down here one init statement
13:06 - like you need to prom
13:09 - human class
13:11 - right and let's see this
13:13 - see okay it is not printing because
13:16 - still we have an error you have to pass
13:17 - one
13:19 - while calling you have to pass number
13:20 - for one parameter right now if you run
13:24 - this see calling in it from Human class
13:27 - and
13:28 - it's two number of eyes now you can
13:30 - access number of files number of fives
13:32 - are two
13:33 - number of eyes attribute of human class
13:35 - but you are accessing using object of
13:37 - boy class right if you want to print
13:40 - like the mro method resolution order
13:43 - then the class name boy Dot
13:46 - we have a function MRI
13:49 - see
13:51 - method resolution order for boy class is
13:53 - what first it will check whatever you
13:55 - will ask like maybe any any method or
13:57 - attribute in Goa class then in mail
14:00 - class
14:02 - boy because boy is inheriting from male
14:04 - then in human class then in human class
14:07 - and after that
14:09 - object class I have told you object
14:11 - class is root for all the classes right
14:14 - so this is built in
14:17 - class okay I hope you got the idea now
14:19 - so if if you want to overwrite like in
14:22 - mail also I want to Define my init
14:25 - function
14:26 - if I want to initialize human and heart
14:29 - and let's suppose I am writing like name
14:33 - because every male is having some name
14:35 - right and only self dot name is equal to
14:39 - I'm writing name
14:42 - okay
14:43 - now the problem is because this male is
14:46 - inheriting from Human so this every
14:49 - attribute and everything we are
14:50 - inheriting from human right
14:53 - so
14:56 - if you want to inherit this numb heart
14:58 - this attribute from Human class or the
15:01 - eyes attribute then you have to call
15:03 - this init function also in male class
15:07 - if I run something like this let's run
15:09 - the C now boy object has no attribute
15:12 - ions now it is giving error while you
15:14 - are calling eyes why so because boy
15:16 - object now this object of this boy
15:19 - classes in everything from male class
15:22 - so in main class we are having
15:24 - init function right so it will call init
15:28 - function from mail class this time
15:30 - if you want to check out you can just
15:32 - print the same line
15:39 - okay
15:41 - see calling in it from male class as you
15:43 - can see now this time it is calling in
15:45 - it from male class
15:46 - right
15:48 - select don't name means it has now it is
15:50 - having only one attribute if you want to
15:52 - print name like name then it can print
15:56 - but you have to pass here name boy name
16:00 - suppose like I'm passing Rahul that is
16:02 - fine it will not give any error like
16:04 - calling from mail class and Rahul right
16:08 - but now this point of time it is
16:11 - accessing in it from this mail class not
16:13 - from Human class
16:15 - so if you want to obviously call number
16:17 - of word every male every boy is having
16:19 - one heart number of eyes two so rather
16:21 - than defining again I just want to call
16:23 - the Senate function
16:25 - so just call this init function maybe
16:27 - you can call in this mail class on or
16:28 - maybe go a class in boy class if you are
16:31 - defining its phone init function like
16:34 - this that also we can say like depth
16:37 - in it and I'm just passing one argument
16:41 - here
16:44 - foreign
16:52 - taking
16:54 - no dancing
16:56 - not self underscore it's self taught
16:58 - right and
17:00 - from this parameter we are taking right
17:03 - so attribute name you can take different
17:04 - from this parameter You Can Dance right
17:07 - now for me boy obviously I want to
17:10 - access name as well as numb heart and
17:13 - eyes everything so rather than defining
17:16 - its own we can call init function from
17:18 - male and from Human class right because
17:21 - if you call from mail class only then
17:22 - you will you can have only access to
17:25 - this attribute name
17:27 - so for numb heart and For Eyes you have
17:29 - to call human class attribute as well in
17:32 - class in it function as well
17:34 - so I told you this thing human Dot
17:37 - in it and sell
17:40 - totna hard so if you are accessing
17:43 - everything then can dance or you can say
17:46 - first you can say
17:47 - first number of art attribute then name
17:51 - from male and its own it has can have so
17:54 - three parameter name you need to take in
17:55 - this in it so heart is from Human
18:00 - and from male class male wrote in it
18:04 - and self
18:05 - is like using this object boy object
18:09 - it is wrapping right now object of boy
18:12 - class
18:13 - and in it we have name
18:16 - and no dancing then it's fine so now at
18:19 - this point of time you need to pass
18:20 - number of art first heart then name is
18:24 - Rahul then comma and dance
18:26 - it is
18:28 - it should be to your poles so maybe like
18:32 - just pass here true
18:35 - now this point of time I want to print
18:40 - using this boy object boy one dot
18:43 - what is the attribute no dancing
18:47 - let's run this
18:49 - see calling in it from Human class
18:51 - calling it from male class
18:53 - then Rahul and true no dancing true and
18:57 - Mr also is printing boy then male then
18:59 - human then object
19:01 - right so first is calling from Human
19:03 - class
19:05 - it is printing this thing why so because
19:07 - whenever you create this object first it
19:10 - will call the Senate function right the
19:12 - first line in this unit function is
19:14 - human dot in need so the control will go
19:16 - to
19:18 - here
19:19 - here so first this line will be printing
19:21 - printed calling in it from even class
19:23 - then control will back to the next line
19:26 - here then from mail it will print so
19:28 - this one will be printed
19:30 - and that's it
19:32 - right so this is I hope now you got the
19:35 - idea of multi-level inheritance
19:38 - right
19:39 - now after boy also you can like you can
19:41 - create any classic programmer and that
19:43 - will be narrated from boys so ultimately
19:45 - it can hide all the properties of all
19:47 - the previous base classes from Human
19:49 - also from mail also from boy also right
19:53 - and suppose
19:54 - [Music]
19:57 - I am taking a variable
20:00 - class variable or you can say class
20:02 - object variable can breathe is equal to
20:04 - true true for human class so no need to
20:07 - write them self load can be because it
20:09 - is outside of the Senate this is class
20:10 - variable class object variable right
20:13 - so this also we can access in everything
20:16 - like using boy object if you want to
20:18 - print this variable like print
20:22 - boy one dot
20:24 - Cena can breathe this field also we can
20:27 - print from Human class sleep from male
20:30 - class heat from Human class now anything
20:32 - from boy class work from boy class like
20:35 - this no dancing field from boy class so
20:37 - let's success can breathe let's run this
20:41 - and see
20:42 - can breathe means that is true so we can
20:45 - access that class variable also right so
20:48 - this kind of thing also you can do it's
20:50 - not like that every attribute or
20:51 - everything you need to you know Define
20:53 - this in it
20:54 - in it Constructor a class variable also
20:57 - we can take can breathe or in mail also
20:59 - we can take in boy also you can take any
21:01 - class variable class object variable
21:02 - okay so in the next video we'll see
21:05 - hierarchical inheritance and Hybrid
21:06 - inheritance so now I'll see you in the
21:08 - next video take care