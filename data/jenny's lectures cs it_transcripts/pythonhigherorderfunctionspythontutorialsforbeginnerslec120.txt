00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:03 - Python programming language we were
00:05 - discussing Turtle graphics and python we
00:07 - have discussed I guess Turtle Graphics
00:10 - almost many methods I have shown you
00:13 - there from the python documentation
00:15 - Turtle documentation and Basics we have
00:17 - discussed some coding exercises we have
00:19 - done now it's up to you how you explore
00:21 - that thing right have you work on
00:24 - Project based on Turtle right okay now
00:28 - we'll be discussing some more advanced
00:30 - Concept in Python that is higher order
00:33 - function I hope now you know what is a
00:36 - function in Python how to define a
00:38 - function how a function is going to
00:40 - accept arguments how a function is going
00:41 - to return a value and all this thing we
00:44 - have discussed already so now this is
00:47 - some Advanced Concept in functions right
00:50 - that is higher order function this thing
00:52 - we'll see in Python and this is also
00:54 - very helpful when we were discussing
00:57 - later decorators or event listeners
01:00 - then we will be using higher order
01:01 - functions right so for let's first
01:04 - understand this thing this is the basic
01:06 - one for all further Advanced concept
01:09 - right so a higher order function is what
01:12 - it is a function that either accept a
01:18 - function as an argument or returns a
01:22 - function two things are there right I'm
01:25 - going to show you these two things with
01:27 - example okay let's see first example
01:30 - program then after this completing of
01:33 - this video completion of this video you
01:35 - will get the definition easily of that
01:38 - higher order function right so let's see
01:41 - so let's create a uh new file first
01:44 - higher order function do
01:46 - py simple function I hope you know let's
01:49 - see one simple example let's uh I'm
01:51 - taking one example add and X and Y this
01:55 - is simple function
01:57 - right and we have discussed this this
02:00 - thing before so if you want to execute
02:05 - this ad then you have to call this ad
02:06 - now you have to pass to these um
02:10 - arguments right so it is returning x +
02:13 - One X+ y so you have to store that value
02:16 - in some variable like I'm storing this
02:18 - in result or directly you can print this
02:21 - thing and now I'm printing this result
02:25 - right let's run this and I'll show you c
02:27 - three so add is a simple function which
02:31 - is which is accepting two argument
02:33 - simple variables are there X and Y it is
02:36 - returning some value that is x + y right
02:40 - and how to execute this function you
02:42 - have to call this function like this
02:44 - right if I
02:47 - simply print this
02:49 - ad okay so rather than see rather than
02:52 - this result if I simply print this add
02:55 - the name of the function just the name
02:57 - of the function no calling so let's run
02:59 - this
03:00 - see it is showing function add at this
03:04 - some address right so it is not giving
03:08 - any error actually so it is at some
03:11 - particular address right so in Python
03:14 - functions are Tre as
03:17 - objects right so we can assign this
03:23 - function to a particular variable as
03:25 - well see let me show you this thing also
03:27 - if I write something like this
03:30 - addition equal to add if I write
03:32 - something like this right and after that
03:37 - what I'm going to do I'm just calling
03:39 - addition passing 2 comma 1 let's just
03:44 - comment out this
03:45 - thing okay let's run this what you will
03:48 - get pause the video and write down your
03:51 - answer in comment
03:52 - section so yeah we are getting
03:55 - three because these are considered as
03:58 - objects so we can can assign these to
04:01 - any other variable as well so addition
04:02 - is simple another function name I'm just
04:06 - assigning the value without calling
04:08 - without these brackets and then I'm
04:09 - calling addition so by addition we are
04:12 - calling this and if you print if you
04:15 - print both this add and if you print
04:19 - both
04:20 - addition like this we not calling add
04:23 - and addition we are simply printing the
04:25 - name of the function see function add at
04:28 - this location function
04:30 - add
04:31 - at this location so as you have seen the
04:34 - location was same for both add and
04:36 - addition right so like this functions
04:38 - are treated as an object and we can
04:42 - assign that function to another variable
04:45 - also right so let's see now that part of
04:48 - the
04:49 - definition it high function except a
04:53 - function as an argument see here we are
04:55 - passing X and Y simple like variables or
04:58 - any values so rather other than this we
05:00 - can pass a function also as an argument
05:02 - right okay let me show you that example
05:05 - simple example we will take so let's
05:07 - take a function we'll take a function
05:09 - like GRE and simply print uh it is going
05:11 - to Simply print high let's take another
05:14 - function maybe like any other function
05:17 - display and within this function as an
05:20 - argument I'm
05:21 - passing sorry as a here now we are just
05:24 - defining it so it will be a parameter so
05:28 - it is taking a function
05:30 - right as a parameter it is accepting as
05:33 - a function
05:36 - so other defined
05:40 - function this variable name I'm going to
05:43 - take for now so
05:47 - let's this is simple I'm going to print
05:50 - display
05:54 - function sorry it
05:57 - is right
06:00 - now see let's call display function and
06:04 - what you have to pass some other defined
06:06 - function yeah we have in our programmer
06:08 - defined function greet so let's pass
06:10 - greet in this greet simply greet know
06:14 - these round brackets simply the name of
06:17 - the function because whenever you pass
06:20 - just the it is accepting any function so
06:24 - just pass the name of the
06:26 - function if you write down these bracket
06:28 - means we are calling that function right
06:32 - so just pass the name just
06:36 - greet okay let's run this what you will
06:39 - get this is display function this is
06:42 - display function but I want to execute
06:45 - this greet also because we are just
06:48 - passing greet here right
06:52 - so you have to call that function to
06:54 - execute that function so just write down
06:58 - here other function and with these round
07:01 - brackets so now this line means we are
07:03 - executing this function whatever you
07:05 - will pass let's run this time see this
07:09 - is display function and
07:11 - high because this line will be printed
07:14 - then the name is greet so greet and now
07:18 - the round bracket means this line is
07:20 - what we are executing the function we
07:21 - are calling the function so now control
07:23 - will go to here where the definition of
07:24 - this G here and it is printing high so
07:26 - it will print high right so see this fun
07:29 - function is accepting other function as
07:31 - an argument right so this is higher
07:34 - order function here display is higher
07:35 - order function G is not higher higher
07:38 - order function display is higher order
07:41 - function
07:42 - right if I uh like let's take another
07:47 - example if
07:49 - I Define two function and rather than
07:52 - see these the name of the function only
07:55 - we can pass simple other argument as
07:58 - well like any uh integer value a b sorry
08:03 - 1 2 3 4 like this or any string value
08:05 - also like name of any other person like
08:08 - this we can pass any other simple
08:10 - argument as well rather than functions
08:13 - right combination of these to also we
08:15 - can get so see I want if I say say
08:21 - louder suppose I'm passing my name j and
08:23 - I say say louder so that would be
08:26 - printed in capital letter if I say like
08:29 - say
08:30 - softer means in a low voice so it will
08:34 - print Jenny in small letter so this
08:36 - thing I want
08:37 - to uh execute this thing I want to do so
08:42 - let's make two function uh greet louder
08:46 - and here we'll be passing any name so
08:50 - whatever you will pass it will print
08:52 - high and the name in capital letter so
08:56 - using F string we are printing from name
08:59 - it will fetch but it will convert it
09:02 - into Upper Keys like this something like
09:05 - this right and
09:07 - same other
09:09 - function I'm going to Define but that
09:12 - would
09:13 - be sorry GRE louder it's like maybe what
09:18 - exact term we use I'm using just
09:20 - software GD software and name and high
09:24 - and that would be in printed in lower
09:28 - case so I'll be printing the converting
09:30 - the name into lower case right and now
09:34 - uh sorry rather than this suppose take
09:36 - like maybe hello name of function I'm
09:38 - taking hello so some other defined
09:40 - function I'll pass and as well as I'll
09:43 - pass here
09:45 - any name also so I'm just taking name
09:48 - any other thing any other um you can say
09:51 - variable name also you can take
09:52 - parameter name it's not like that you
09:54 - have to take name only
09:56 - okay okay
09:59 - now this is uh the display function and
10:03 - it will call the other defined function
10:05 - and it will pass whatever the parameter
10:08 - you will pass so the variable name is
10:10 - name so that is why this and this this
10:13 - and this name should be same so if I'm
10:16 - passing here name one it should be name
10:18 - one so let's pass name one now we are
10:22 - calling no display function we have now
10:25 - hello we are calling hello in hello what
10:28 - you need to pass other defined function
10:31 - so here we are passing the name of the
10:33 - other defined function greet
10:37 - louder greet louder Just the name no
10:41 - without these brackets comma and you
10:44 - have to pass any name also so I'm
10:46 - passing like
10:48 - Jen right now let's run this what you
10:51 - will
10:52 - get see it will print high and name of
10:57 - the Gen is a capital letter
11:00 - right because only name I have converted
11:02 - into upper and again I'm calling the
11:07 - second function I'm going to call now
11:09 - read
11:16 - sofware and same suppose I'm passing
11:20 - this Jenny now in capital
11:22 - letter so see first time in caps because
11:27 - that was louder second time we are
11:30 - calling software so hen is now in small
11:33 - letter so like this we are passing see
11:36 - the this uh in this function as an as an
11:40 - argument we are passing see the name of
11:43 - other defined function hello is a
11:45 - function and GD software is also a
11:46 - function so as a argument we are passing
11:48 - another function as well as some other
11:51 - argument also you can pass right so this
11:54 - hello is here higher order function
11:57 - right this thing will be very useful
11:59 - when we you know creating Event Event
12:02 - listeners I'll show you that thing also
12:04 - later now this is one part second part
12:08 - is it also returns it can also returns a
12:13 - function right so a return of function
12:17 - let's see this thing Al I show you in
12:20 - the previous case I told you I have
12:21 - shown you in add fun add was a function
12:23 - and that was returning X Plus y mean
12:25 - simple the value right addition but what
12:28 - if
12:29 - return and after that we are returning a
12:33 - proper
12:33 - function right let's see that thing
12:37 - also okay let's take one more example
12:41 - here and
12:42 - [Music]
12:44 - um in hello let's it's accepting name
12:49 - and we're just printing here this thing
12:53 - and within hello we have another
12:54 - function suppose we have a function
12:58 - greet
12:59 - within this hello to print har Krishna
13:03 - and we have one more function suppose
13:06 - that is welcome and the there we'll just
13:10 - print like
13:12 - maybe J
13:15 - sham okay now we are putting one
13:18 - condition
13:19 - if the name equal to equal to suppose
13:24 - Jenny then then return
13:30 - greet just the name of the function
13:33 - without these brackets
13:36 - otherwise
13:38 - else
13:42 - return
13:46 - welcome right so see this hello function
13:50 - is
13:51 - returning
13:52 - function it is returning a function
13:55 - either this or this so This hello is
13:56 - here also a higher order function so
13:59 - let's call this hello and what we will
14:02 - suppose we are going to pass Jan
14:07 - okay let's see what is
14:10 - happening hello has been executed
14:13 - nothing would be printed because the
14:15 - expected output was it should call
14:19 - greet because it is returning greet so
14:21 - it should print har Krishna as well the
14:23 - hello has been executed but no har
14:25 - Krishna will be printed why so because
14:28 - see we are not calling this greet or
14:30 - this welcome function anywhere in the
14:33 - program we are just returning the
14:36 - function as an object return greet
14:38 - simple the
14:40 - name to execute this greet actually you
14:43 - have to call this GRE proper with round
14:46 - bracket right so what should we do now
14:50 - see now this hello Jenny so it will pass
14:55 - here Jenny this line will be printed now
14:58 - this Dev this Dev okay now it will go to
15:01 - this line if name is equal to equal to
15:03 - gen yes this is satisfied so control
15:06 - will enter into this if block and return
15:09 - greet return greet greet is a function
15:12 - proper function right and it is
15:14 - returning this thing so for if this is
15:17 - returning something so obviously you
15:19 - have to accept that in other variable
15:22 - name right so I'm taking like new
15:26 - function right so new
15:29 - function it is returning
15:32 - greet so now to execute this greet you
15:35 - have to call this new function you have
15:38 - to call this new function right let's
15:41 - run this see now hello has been executed
15:45 - and Har Krishna will
15:47 - print right and if the name is not Jenny
15:51 - suppose name is Jenny uh
15:55 - katri so definitely this time it will
15:57 - print J Shri
15:59 - Ram okay because the condition was not
16:02 - satisfied so it will return welcome so
16:04 - whatever it will return we are just
16:06 - storing this into new function that at
16:09 - first of this video I have discussed
16:11 - this thing addition is equal to add and
16:14 - to call that add you have to call
16:16 - addition with bracket so now you have to
16:18 - call this new function with
16:21 - bracket
16:22 - right so right now this simply like an
16:25 - object Okay so something like this you
16:29 - have to do if you simply print new
16:36 - function
16:38 - see Hello has been executed function
16:41 - hello do local
16:43 - welcome
16:46 - because a new function now it is
16:48 - returning because of this condition
16:50 - welcome so local is welcome at this just
16:54 - giving you the address where is this
16:56 - welcome but actually it is not executing
16:59 - the welcome so to execute welcome what
17:02 - you have to
17:03 - do just this new function and you know
17:06 - these brackets you have to call this
17:09 - right now it's been it has been executed
17:13 - so this hello is a higher order function
17:15 - in this case so this is the case first
17:17 - one was when the function is accepting
17:22 - other function as an argument and here
17:24 - it is returning a function right so this
17:27 - is H function I hope you got with this
17:30 - example now a high order function is
17:33 - either is a function which either accept
17:37 - a function as an argument or returns a
17:39 - function okay now one assignment for you
17:42 - is you have to do this thing you know in
17:46 - calculator simple calculator we have add
17:48 - subtract multiplication and division
17:50 - these are four function returning
17:52 - addition subtraction multiplication and
17:54 - division but you have to now Define this
17:56 - type of calculate function
17:59 - calculator function and then calculator
18:01 - function you have to pass the name of
18:04 - these functions with two argument and
18:08 - whatever name you will pass that
18:10 - function should be
18:11 - executed that function should be called
18:14 - from these functions and that should be
18:16 - executed means this is an example of
18:18 - passing a function as an
18:20 - argument right so this is your
18:22 - assignment you have to do this thing you
18:24 - can write down the logic in comment
18:26 - section right now that's it for this
18:28 - video and the next video probably we
18:30 - will see event listeners or we will see
18:33 - decorators right either event listeners
18:35 - or decorators so now I'll see you in the
18:38 - next video till then bye-bye take care