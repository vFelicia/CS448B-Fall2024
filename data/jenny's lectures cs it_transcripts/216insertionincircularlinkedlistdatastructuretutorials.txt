00:00 - linked list why so because the last node
00:01 - is containing address of the first node
00:04 - right so this thing the creation we have
00:07 - already discussed how to implement the
00:09 - circular linked list in the previous
00:10 - video you can check out that video in
00:12 - this I button as well as how to traverse
00:14 - the list but you can see how to display
00:16 - the content of this list that also we
00:18 - have discussed in that video in this
00:20 - video we will see how to insert a data
00:22 - in our circular linked list insertion at
00:25 - the beginning insertion at and and
00:27 - insertion at any specific position so
00:31 - first of all you will see how to insert
00:32 - a new node at beginning of the list see
00:35 - we are not having any head pointer so we
00:37 - don't have any idea which node is the
00:40 - first node but here still we can find
00:42 - out which is the first node the address
00:44 - of the first node how as we know in
00:46 - circular linked list always the last
00:48 - node is containing address of the first
00:50 - node this this would be the address of
00:53 - the first node and we have a pointer to
00:56 - the last node that is tail pointer so
00:58 - you can say tail off next this is what
01:01 - address of the first node right so now
01:05 - to insert a node at the beginning first
01:07 - of all obviously we're going to create a
01:08 - node and how to create a node that we
01:10 - have already discussed this is how you
01:13 - can define your own datatype how your
01:15 - opens have to represent a node this
01:17 - thing we have already discussed many
01:18 - times here I'm maintaining only the tail
01:21 - pointer so now I am defining a function
01:23 - insert add big knee fine so obviously we
01:27 - are going to create a new node for
01:29 - inserting that not here so for that what
01:33 - that method the dynamic memory location
01:35 - will be used and so in that case you
01:38 - will have to declare a pointer that is
01:40 - new node pointer and this new node
01:43 - pointer is going to store address of
01:45 - that newly created node and how to
01:46 - allocate a memory to newly created node
01:48 - using malloc function and whatever the
01:51 - malloc function will return that address
01:54 - we are going to store in this new node
01:55 - pointer so I guess the syntax we have
01:57 - discussed many times in the previous
02:00 - video so this is how we have created at
02:02 - this this new node and user has entered
02:04 - the data that is 7 and here in the next
02:07 - part we have inserted 0
02:10 - which means it is not pointing to any
02:11 - node and this point there is a new node
02:13 - this node is containing this address
02:15 - that is 600 fine
02:17 - this concept we have discussed many
02:18 - times so now I want to insert this node
02:20 - here at the beginning of this list right
02:22 - so now first of all you can check if the
02:26 - list is empty in that case what you will
02:27 - do how you will check
02:28 - we don't have any head pointer we have
02:30 - only tail pointer so here you can check
02:31 - if L is equal to is equal to 0 it means
02:35 - there is no node in the list and then
02:37 - this node would be the first and last
02:39 - node in the list right so how you will
02:41 - insert this thing also we have discussed
02:43 - how we will do this thing suppose there
02:45 - is no node we have only tail pointer and
02:47 - tail is containing 0 and we have created
02:49 - this node so what you will do this would
02:52 - be the first node so now tail would
02:54 - point to this node only and this is the
02:56 - last node also so here you can say in
02:58 - tail we will store what this this
03:01 - address that is new node so now in tail
03:05 - 600 would be stores are not there good
03:07 - point here one more thing in circular
03:10 - list the last node would contain address
03:12 - of the first node so this is the first
03:14 - and last node so this node this this
03:16 - will contain address of itself so now
03:19 - here you will store 600 so now how to
03:21 - exit this part new node next or you can
03:24 - say the scale of next tale of next is
03:31 - equal to new node right this is how you
03:36 - can insert the very first node or you
03:38 - can say if Lester is empty then you can
03:40 - write down the DS line else if list is
03:43 - not empty now suppose this is the case
03:45 - we have 4 node in the list and if I want
03:47 - to insert this node here now what you
03:49 - will do now view you have to update what
03:52 - first of all here in this address part
03:57 - this address this pointer should contain
04:00 - address of the next node that is hundred
04:01 - Harry I want to store hundred right and
04:06 - tail would point
04:08 - now after inserting this payload point
04:11 - here so here you will store address of
04:14 - this that is 600 now here how we will
04:17 - come to know that which node is the
04:19 - first node and what is the address of
04:21 - the first node because obviously before
04:23 - that first node I want to insert this
04:25 - one right so I will store that address
04:28 - here only one way is there the last node
04:32 - next pointer is containing address of
04:34 - the first node right so first of all
04:37 - update this thing how to X is this part
04:39 - you can say new node next here I can
04:42 - write new node next is equal to tail off
04:47 - next how you can it says this part
04:51 - pointer to this node is print tail off
04:53 - next now see here now L of next is
04:58 - containing hundreds so here I have
04:59 - stored 100 now this is pointing to this
05:02 - node now this become the first node but
05:04 - this is not done yet you have to change
05:07 - this part also because last node is
05:09 - going to contain address of the first
05:10 - node that is 600 so here what you will
05:13 - write in tail of next we will store the
05:19 - 600 from where I can get 600 in the new
05:22 - roll pointer we have 600 now that is
05:26 - done now this is pointing to this node
05:30 - right here now I have 600 right and now
05:36 - the system that is the insertion at the
05:37 - beginning of circular linked list and
05:39 - now if you want to check that you have
05:41 - inserted correctly or not
05:42 - then what you can do the same funda here
05:45 - after this else before closing this this
05:48 - function here I will close this function
05:50 - before this closing this function you
05:52 - can write you can print what printf
05:54 - percentage D what you can print C tail
05:57 - next tail off next means this side plus
06:03 - 600 means we have reached till this
06:05 - address and data tail of next data is 7
06:11 - so it should print 7 because this is now
06:14 - the you can say the first node so it
06:16 - should print 7 right this is how you can
06:19 - change now we will see how to insert
06:21 - data at the end of the list so now
06:24 - suppose we have created this node having
06:27 - gate at 10 right and address is 700 so
06:31 - this address the 700 edges should be
06:33 - stored in new node pointer and now
06:35 - I want to insert this node here insert
06:37 - @n so in this code what you need to
06:41 - change see here I have changed what
06:43 - insert edy and same we are going to
06:45 - declare one new node pointer using
06:47 - malloc dynamic memory will be allocated
06:49 - to that node that this would be stored
06:51 - in new node pointer we will ask from the
06:53 - user using printf and scanf write the
06:55 - data and all and if tail is equal to
06:57 - zero and then then this same line would
06:59 - be written find same what would look
07:01 - there but there is a difference in else
07:03 - Python right now in else part what you
07:06 - will write see now if you insert this
07:09 - paw this node here three things you need
07:12 - to update first thing is now this is
07:15 - going to be the last node so here the
07:18 - last node should contain address of the
07:20 - first node that is 600
07:22 - this is our first node right so here you
07:24 - will update what here you will write 600
07:27 - right second thing now this node is
07:30 - containing address of the next node that
07:32 - is here you will update 700 third thing
07:35 - you will update what now this this is
07:37 - the last node so in tail pointer also we
07:39 - are going to store what is the address
07:41 - of the last node that is 700 three
07:44 - things you have to a bit but you have to
07:46 - take care which pointer you need to
07:48 - update first see here I want to store
07:52 - address of the first node right this one
07:55 - 600 and there is only one way to get
07:58 - address of the first node this because
08:01 - we are not maintaining any header
08:02 - pointer right so this is now address
08:05 - over the first node that is 600 because
08:07 - last mode is containing address of the
08:09 - first node and this is the last node
08:11 - right now so before updating this
08:13 - pointer you need to take out this
08:15 - address and store here because if you
08:17 - update this thing first if you if you
08:20 - have written like this tale of next is
08:22 - equal to new node means you have
08:24 - inserted here 700 means this node is
08:27 - pointing to this node now now there is
08:29 - no way you can get to the address 600
08:32 - from where you will get 600 right so now
08:35 - first of all update this thing and have
08:37 - you'll update this thing how you can
08:39 - access this part new node next so in
08:41 - else part you will write new node and
08:43 - next is equal to tail off next to that
08:45 - is here now
08:47 - six-hundred we have stored 600 right so
08:50 - now the thing is now this node is
08:54 - pointing to this node right this sign
08:58 - would be safe
08:59 - sacred the second thing what you need to
09:01 - update this one so how you can write
09:04 - this thing tail of next tale of next is
09:06 - equal to which address I want to store
09:08 - this address 7 700 so from where I can
09:11 - get this address in new node pointer is
09:12 - equal to new node so now here I have 700
09:16 - right so now this is not pointing to the
09:19 - first node this is pointing to the last
09:21 - node right third thing you need to
09:23 - update now before closing this else here
09:26 - what you will write now you need to
09:28 - update this spell pointer also now tail
09:30 - would be containing address of the last
09:32 - node so here third line what you will
09:34 - write L is equal to new node in new node
09:38 - we have 700 now tail is also containing
09:40 - 700 now tail is pointing to this node
09:44 - right and now you can close else blow
09:47 - write these three lines you have to
09:50 - write in else no right same as inserted
09:54 - beginning just this line you have to add
09:56 - extra fine
09:57 - and if you want to check you want to
09:59 - cross out and after this else you can
10:01 - obviously print in printf you can write
10:03 - print a percentage beyond this thing
10:05 - tail next data right so tail mixed means
10:10 - 600 so data at 600 is seven so seven
10:13 - should be printed so this is how you can
10:15 - insert at end position now we will see
10:18 - how to insert at any specific position
10:21 - so now I want to insert at this node a
10:24 - newly created node at position suppose 3
10:27 - means 1 2 & 3 here after this before
10:30 - this one right so here in this case see
10:34 - if position is 1 in that case 1 means
10:37 - here only you want to insert 1 means at
10:40 - the beginning only so in that case if
10:43 - position is 1 you can call that function
10:45 - insert at beginning right or second
10:48 - thing you will check position is valid
10:49 - or not suppose in this case position is
10:52 - 6 now is there any position 6 one here
10:56 - is position one here is position to
10:57 - position 3 position 4 but no position
11:00 - there that is six so that should print
11:02 - invalid position fine so you will check
11:06 - the length of the list length of the
11:08 - list is four one two three and four
11:11 - so if position is less than zero or
11:13 - greater than this four then it should
11:15 - print invalid position right now maybe
11:18 - you can say mommy position is five then
11:20 - also I can insert here it means we can
11:22 - call insert at and so you can implement
11:25 - that concept also but here I'm
11:27 - considering what if position is less
11:30 - than a 1 and greater than this length it
11:33 - means that position is invalid right so
11:36 - now obviously we are going to create
11:39 - this node we need a pointer that is new
11:41 - node and as well as we will ask from the
11:43 - user at which position he wants to
11:44 - insert right to store that position also
11:46 - we need another variable you can say
11:49 - position right and suppose user has
11:53 - entered position is three means one two
11:55 - and three here I want to insert so I
11:57 - have to reach till this position now so
11:59 - you have to traverse this this list so
12:01 - for ever single so we need another
12:03 - pointer to node because this new node is
12:05 - containing address of new node one
12:06 - pointer tail is containing address of
12:08 - the last node we cannot move the string
12:10 - so we need we need another point that
12:12 - you can say temp pointer for this
12:15 - traversing to reach till this position
12:17 - right so now we will ask from the user
12:22 - for the position like this using printf
12:25 - and scanf suppose user has entered here
12:28 - we have a position variable and user has
12:30 - entered position is three for Trevor
12:32 - single so we need one another variable
12:35 - that is I suppose we are initializing I
12:37 - is equal to one now first step is
12:40 - calculate this length and for that you
12:43 - can create a function in the in this
12:45 - program only get length function and
12:47 - that function will return the length of
12:50 - this list and that we can call that
12:52 - function in this function only that is
12:55 - in created position only and we can
12:58 - suppose get length is a function that
13:00 - will return the length of this list and
13:03 - we are going to store that in variable L
13:05 - so here I am going to declare one
13:06 - variable
13:07 - el oso right and we also check now if
13:12 - our position is less than zero or
13:16 - position is greater than this el it
13:20 - means here you can print invalid
13:22 - position in print f you can write
13:24 - invalid physicians right this how to
13:28 - calculate this length of this list that
13:30 - code is very easy if you want me to
13:32 - explain how to calculate the length of
13:35 - death of the list then you can comment
13:36 - being in the comment box I will provided
13:38 - that that video also fine now we will
13:42 - check
13:42 - now if position is this it means invalid
13:44 - a position we can not insert if position
13:46 - is seven we cannot insert that is
13:47 - invalid position again we check else if
13:52 - position is equal to equal to 1 in that
13:56 - case means that starting only I want to
13:59 - insert so insert add beginning that
14:02 - function you can call now suppose
14:06 - position is valid and position is not
14:08 - one position is now three so now we have
14:10 - to reach till this position till three
14:12 - so we will try it trace out this we will
14:14 - traverse this linked list till position
14:17 - minus one that is built to here after
14:19 - that I can insert here at third a
14:21 - position right and have you will to
14:24 - traverse this way I wanted really
14:25 - discussed many times in the previous
14:27 - video also so now in else part now we
14:29 - are going to create this node now we are
14:31 - going to allocate a memory to this node
14:33 - see here I have declared only a pointer
14:34 - we haven't allocated any memory to this
14:36 - because if position is not valid then no
14:39 - need to create this node if position is
14:40 - one then already that insert at the
14:42 - beginning function would be called now
14:44 - you can allocate the memory using malloc
14:46 - function right so now this is how we
14:49 - have allocated the memory to this node
14:52 - dynamically allocated to the memory
14:53 - using malloc function right ended is a
14:56 - pointer pointing to this node we have
14:57 - asked for the data from the user the
15:00 - user has entered seven and here in the
15:01 - next part we have stored 0 now I want to
15:04 - insert this here now we need to traverse
15:06 - right so here I'm going to write hit I
15:09 - guess this is everybody know how to
15:11 - write down this code so I am going to
15:13 - rub this now see we will traverse the
15:15 - list so for traversing we need to
15:18 - which is the first node we need a
15:21 - pointer to the first node but we don't
15:23 - have any head pointer here so now how we
15:26 - can come to know that which is the first
15:27 - node see in the till next we know that
15:31 - we always have an address of the first
15:33 - node right so here what I can write
15:37 - another pointer I have taken that is
15:39 - temp so here M in temp I can store what
15:42 - tail off next right so here I have temp
15:47 - pointer and what is the value of tail of
15:50 - Nyx see tail of next is having hundred
15:53 - so now this is pointing to this node
15:55 - means now we can say temp is pointing to
15:58 - this first node right so you can say
16:01 - temp is now I had pointer now we can
16:03 - reverse so we will write a while loop
16:05 - while this I we have taken one variable
16:10 - that is I is less than position minus
16:13 - one till then we will move this temp
16:16 - temp is equal to temp off next right and
16:21 - we will do I plus plus and we will close
16:25 - this while loop now as you can see my
16:27 - value is what one it's starting we have
16:30 - taken one now C 1 is less than position
16:32 - minus one position minus 1 is 2 so 1 is
16:34 - less than 2 yes
16:35 - now temp is equal to temp next so what
16:37 - is the temp next temp off next means 200
16:40 - so that would be stored in M now M
16:43 - becomes 200 now temp is pointing to this
16:46 - node right and I plus plus now I becomes
16:49 - 2 now again to less than position minus
16:53 - 1 that is 2 2 less than to know that
16:55 - condition is not true so we are not
16:57 - going to enter into this loop we are not
16:58 - going to move this temp now see we have
17:00 - reached till position minus 1 because
17:02 - after this only I want to insert now
17:04 - position third here only right so now
17:07 - what do you need to update you are going
17:09 - to update two things now first thing is
17:11 - what we will update this link this node
17:15 - is now containing address of the next
17:16 - node that is here I want to store 250
17:19 - right and this is going to contain
17:22 - address of the this node that is 150
17:24 - here I want to store 150 right so these
17:28 - two links I want to establish this one
17:31 - and this one and we are going to break
17:33 - this thing this is how you can insert so
17:36 - now which link you will update first see
17:38 - first we will update the right link this
17:41 - one this one because if you updated this
17:43 - link first suppose you have updated here
17:45 - 250 how to access this part amp of next
17:49 - is equal to new node that is here we
17:51 - have 250 now so now here I want to store
17:53 - 150 enough room where I can get 150 from
17:56 - here only I can get 150 but this link we
17:59 - have updated already so first of all
18:01 - before updating this set the right link
18:03 - first so update this thing so how you
18:05 - can update that link that is new node
18:09 - next say new no order next means in this
18:12 - this part I mixes in this part here I
18:14 - want to store 150 150 address of next
18:17 - node from where I can get 150 here I
18:18 - have 150 so how you can access this part
18:21 - using this M pointer temp of next right
18:26 - now here I have 150 so now this is
18:29 - pointing to this node now you can update
18:31 - this thing so how you get it says this
18:32 - part temp off next temp off next what I
18:38 - want to store here 250 so the address of
18:41 - this node because this is going to be
18:42 - the third node now from where I can get
18:44 - 150 in new node I have 150 right and
18:48 - after that you can close this inserted
18:51 - position function right so the first of
18:53 - all else after that
18:54 - this one this function fine so now here
18:58 - I have 250 so this link is no more now
19:01 - and this is now pointing to this node
19:04 - and now you can call these function into
19:06 - that main function inserted beginning
19:08 - inserted end and insert at any position
19:10 - fine as well as create a linked list and
19:13 - hit display link list that two functions
19:15 - we have already discussed in the
19:16 - previous video right so this is how you
19:18 - can insert in a circular linked list and
19:20 - if you maintain both head pointer and
19:23 - tail pointer then I guess it is very
19:26 - easy to insert any data in the circular
19:29 - linked list insert at beginning also at
19:31 - end and at any position fine so I guess
19:33 - no need to explain that code fine so now
19:37 - I will see in the next video in next
19:38 - video we'll see
19:40 - how to delete data from a circular
19:41 - linked list fine so till then bye-bye
19:43 - taking