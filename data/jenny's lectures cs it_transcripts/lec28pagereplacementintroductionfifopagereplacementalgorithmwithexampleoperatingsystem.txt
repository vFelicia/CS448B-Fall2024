00:00 - important thing you should know is for
00:02 - execution of a process that process has
00:05 - to be in main memory that is for sure
00:09 - if one process is there suppose this is
00:11 - a process p1 and if CP wants to execute
00:15 - this process so this process this is now
00:18 - a secondary memory so for execution this
00:24 - process has to be loaded into your main
00:28 - memory that is the simple rule otherwise
00:31 - this process cannot be executed and
00:34 - second thing is as we know the size of
00:37 - main memory see main memory is also
00:38 - known as physical memory the size of
00:41 - main memory is what finite and may be
00:45 - sometimes it happens the size of this
00:48 - process is larger than this main memory
00:52 - size then we cannot load this complete
00:55 - process into main memory okay or maybe
00:58 - sometimes it possible see rather than
01:01 - rather than loading the complete process
01:04 - into main memory is it possible that we
01:09 - can we can load only some part of the
01:11 - process see because when CPU is working
01:16 - CPU is executing this process it is not
01:18 - like that CPU is executing the complete
01:20 - process baby CPU is executing only this
01:25 - part of the process may be CPU is
01:27 - executing only this part of the process
01:29 - so it is better to if it is better to
01:33 - load only this part or this part to main
01:36 - memory rather than loading the entire
01:38 - process into the main memory if you can
01:42 - implement this funda for memory
01:45 - management then what what is the benefit
01:47 - of this thing because as the size of
01:49 - this memory is finite so if you
01:51 - implement this funda only the required
01:54 - portion of that that process is to be
01:56 - loaded into the main memory then what
01:59 - will happen many many processes can
02:02 - reside in the main memory at same time
02:03 - because if you load the complete process
02:06 - then it will take larger space in the
02:08 - main memory and maybe
02:11 - maybe two processors can be there in
02:13 - main memory three processes can be there
02:14 - in main memory and if you look like this
02:16 - one dozen maybe at the same time 5 10 15
02:19 - processes can reside in main memory ok
02:22 - now how does funda is to be implemented
02:24 - simple break is if we divide this
02:27 - process into these portions equal sized
02:32 - portions and this this is known as pages
02:35 - so process is divided into equal sized
02:38 - pages this is supposed page 0 1 2 3 4 we
02:43 - are we are taking page number at some
02:45 - time CPU is executing this process and
02:47 - CPU needs only the page number 3 so only
02:53 - this page is to be loaded into main
02:56 - memory these pages will not be loaded
02:58 - into main map so these pages will will
03:01 - be in secondary memory like that suppose
03:03 - this is our secondary memory what you
03:06 - can say hard disk ok somewhere in
03:11 - secondary memory all the pages of this
03:13 - process is there in secondary memory and
03:16 - when the CPU needs a particular page
03:18 - then that pages to be loaded into main
03:21 - memory this kind of fund is also known
03:22 - as demand paging and when you apply this
03:25 - funded and many processes can be there
03:28 - in main memory so it seems that that
03:30 - main size of main memory is very large
03:32 - but actually that's not true and that
03:34 - thing is known as what virtual memory
03:39 - because that is virtually it seems that
03:42 - the size of main memory is very large
03:44 - because many processes can be there in
03:46 - main memory why so because we are not
03:48 - loading the complete process into the
03:50 - main memory we are just loading the
03:53 - required pages into the main memory okay
03:56 - so that that thing is known as virtual
03:58 - memory actually virtual memory is say
04:01 - this this some portion of hard disk is
04:04 - known as virtual memory now see if at
04:08 - some point of time CPU needs this page
04:13 - number 2 of this process p1 now if this
04:18 - requested page is available in the main
04:21 - memory then normal execution
04:24 - we'll be there if some if suppose this
04:27 - page number two is not load not there in
04:31 - the main memory then that thing is known
04:34 - as page four if the needed page is not
04:39 - available in the main memory then that
04:41 - thing is known as page fault
04:44 - now if page fault occurs then what will
04:46 - happen if operating system finds that
04:48 - that particular page is not in main
04:50 - memory then what operating system will
04:52 - do first of all operating system will
04:54 - contact with hard disk where the process
04:57 - reside in highness it will find okay and
04:59 - it will find that page of that process
05:02 - the needed page of that process and it
05:06 - will load that page into main memory now
05:09 - if the situation is something like that
05:12 - the main memory is full see the process
05:16 - is divided into equal sized pages and
05:18 - the main memories is divided into frames
05:22 - like this equal sized frames if the
05:29 - memory if this main memory is full all
05:32 - the frames are having some pages so if
05:36 - this main memory is full then you cannot
05:38 - put the requested page the page number
05:40 - two in this main memory then what
05:42 - operating system will do obviously some
05:46 - page has to be swapped out in to
05:48 - secondary memory so that the new
05:50 - requested page can be swapped into main
05:53 - memory you see page guapo yamazaki
05:56 - minimum this a secondary memory made a
05:57 - la bodega that is known as swap out okay
06:00 - and when you put a page from secondary
06:02 - memory to main memory that is known as
06:04 - swapping now the question is which pages
06:07 - to be replaced the operating system will
06:10 - choose which page to swap out that thing
06:14 - is decided by page replacement algorithm
06:17 - so there are many algorithms to decide
06:19 - which to decide this thing that which
06:22 - pages to if main memory is full all the
06:24 - frames are full then which pages to be
06:26 - replaced with this new page for deciding
06:30 - this thing we have many types of
06:31 - algorithm so in this video we'll discuss
06:33 - first-in-first-out algorithm now one
06:36 - more
06:36 - thing is how operating system knows
06:41 - which page of which process is in main
06:45 - memory and which page of that process is
06:48 - in secondary memory obviously the
06:50 - operating system has to keep this
06:52 - information also that which paces in
06:55 - suppose the page of P this process p2
06:59 - this two or three pages are in main
07:02 - memory and this zero one four are in
07:05 - secondary memory okay
07:06 - so operating system keeps this
07:08 - information also and for keeping this
07:10 - information one page table is there so
07:16 - this page table is also reside in this
07:19 - main memory
07:20 - okay somewhere so maybe here here this
07:25 - is base table many many information are
07:27 - stored in the space table I am just
07:30 - telling about valid and invalid bits if
07:33 - the space number 2 and page number 3 is
07:36 - in main memory then we said this bit to
07:40 - valid and if the particular page is not
07:43 - there in this memory than that that bit
07:46 - is corresponding to that page is set to
07:48 - I invalid bit
07:50 - now suppose main mode is completely full
07:52 - and you have to swap out some page from
07:55 - here to here and operating system using
07:57 - some page replacement algorithm
07:59 - operating system chose this 3 page
08:02 - number 3 to swap out in secondary memory
08:05 - now the operating system will also
08:09 - update this page table it have it has to
08:12 - update the space table ok so the bit
08:16 - corresponding to the space number 3 is
08:19 - said to invalid now why invalid because
08:22 - this page is not available in main
08:24 - memory right now because this face has
08:27 - been swept out to secondary memory
08:29 - so this is the processor when a page
08:31 - fault occurs an operating system will do
08:32 - operating system will first of all
08:35 - contact with the hardware to locate
08:37 - where that process is where the pages
08:38 - second thing is then operating system
08:40 - will choose the victim page which page
08:43 - is to be replaced or you can see which
08:46 - pages to be swapped out of secondary
08:47 - memory then that page would be swapped
08:49 - out and second
08:50 - that secondary memory and the requested
08:52 - page would be swapped into the main
08:53 - memory plus operating system will also
08:56 - update the space table the corresponding
08:58 - bit to that page which has been swapped
09:00 - out is set to invalid okay and the
09:03 - corresponding bit to the page which has
09:05 - been swapped in is set to valid so this
09:08 - is the processor so before going to that
09:10 - algorithm I just want to tell you one
09:12 - more thing one example of that page fold
09:15 - see when you open some movie in VLC
09:17 - player suppose this is your VLC player
09:19 - with this one is your screen so here you
09:22 - have some that bar and the cursor is now
09:25 - at this place at time zero zero and
09:28 - movies you have stuck at the movie now
09:30 - suddenly if you forward this cursor here
09:33 - to here
09:34 - maybe suppose at five minute then I
09:38 - guess you have noticed that that VLC
09:40 - player will not play this movie
09:42 - instantly okay it takes some time it
09:47 - takes maybe one second two second or
09:49 - three seconds why so because that is
09:51 - page fault you can say you can take
09:55 - something like this this complete is
09:56 - known as a process so this complete
09:59 - entire process will not be loaded into
10:01 - main memory when you start the movie
10:03 - okay all the pages of that process will
10:06 - not be loaded into main memory when when
10:08 - the operating system is using paging
10:10 - technique for memory management in that
10:12 - case only so maybe it's starting the
10:14 - operating system will load only some
10:16 - pages like this maybe from here to here
10:19 - okay and you suddenly put the cursor to
10:23 - here so this page is not there in the
10:25 - main memory so that is why it takes some
10:28 - time to load the space may be time for
10:32 - swap in and swap out that is why it
10:34 - takes VLC player takes some time to play
10:37 - the movie from here so see so for peas
10:39 - replacement there are many algorithms
10:41 - now which algorithm means to be choose
10:42 - there are many factors on which you will
10:45 - choose which page replacement algorithm
10:46 - is good when is this this also page
10:50 - fault should be less that algorithm
10:52 - should reduce page four that is one
10:55 - criteria now we'll discuss that first-in
10:57 - first-out
10:57 - algorithm now the question is something
11:00 - like this the reference string is given
11:02 - that
11:03 - this one pages reference string four
11:06 - pages it means CPU CPU request pages in
11:10 - this order it will request first of all
11:12 - the page number three then page number
11:14 - two then one three like this okay and
11:16 - you are given only three frames three
11:18 - frames has been allocated to this
11:20 - process okay
11:22 - f1 f2 and f3 now how you will apply the
11:27 - space replacement algorithm FIFO page
11:30 - replacement algorithm C and will also
11:33 - calculate the hit ratio and as well as
11:35 - the page number of page faults okay now
11:37 - see the first first requirement of CPU
11:40 - is what a page number 3 okay now check
11:45 - frame frame means this is our main
11:47 - memory now three frames are there
11:50 - allocated to this process allocated to
11:52 - this process having these these page
11:54 - numbers now you chip you check whether
11:57 - you have this page into this main memory
11:59 - no this one is empty this one is
12:01 - important this one is empty we don't
12:03 - have this page number
12:04 - okay so we'll swap in this page will
12:08 - load this page here in frame 1 and this
12:12 - is known as page fold because this page
12:14 - was not available in our main memory
12:16 - okay so this is no you can say a miss or
12:19 - you can say page is not available page
12:22 - is not available in the main memory okay
12:26 - second page now second is page number
12:29 - two check
12:30 - we have only one page having number
12:32 - three we don't have to so now the
12:34 - operating system will load this page
12:36 - here we have three in second frame we
12:39 - will put to say no need to swap out any
12:44 - page wise so because we still have two
12:46 - frames left two frames are still empty
12:48 - so we can put new page into frame two so
12:52 - this is also known as page phone because
12:54 - two was not available in our main memory
12:56 - so you can say page was not available or
12:58 - you can say it is a mess okay next is
13:01 - one see we have only page number 3 n 2 1
13:04 - is not available now
13:06 - 3 2 still we have one frame empty so we
13:09 - will put one here and this is also a
13:12 - Miss or you can say page for now
13:16 - now our main memory is full now what to
13:20 - do see next page requirement is three
13:23 - the operating system first of all check
13:26 - whether if the spin is available in the
13:28 - main memory yes this is available see
13:30 - this one three so no there is no page
13:34 - fault so page is available so here three
13:39 - two and one
13:40 - no need to swap out and swap in okay
13:43 - next there's page number four is this
13:46 - page number available
13:47 - three two one no this is not available
13:49 - not available so this is a page fault
13:51 - you can say a miss now our memory is
13:55 - full now we have to swap out one page
13:58 - operating system has to swap out one
14:00 - page from main memory to secondary
14:02 - memory to put this needed pages into the
14:05 - frames because we have only three frames
14:07 - now which page is to be swapped out
14:11 - which pages to be selected as a width M
14:14 - page in first in first in first out
14:18 - algorithm so the page the oldest page
14:22 - obviously the names are just first in
14:24 - first out so the oldest page will be
14:27 - selected as victim the page which has
14:30 - come first very first and for this thing
14:34 - for this thing operating system will
14:35 - maintain a queue okay because the the in
14:40 - queue queue operates in which manner 3/4
14:43 - manner so operating system will will
14:44 - maintain a queue like this and it will
14:48 - put the pages something like this and
14:49 - when when it has to select a page for
14:53 - swap out then it will select the page
14:56 - from the from front of the queue ok
14:59 - because we we insert data from the rear
15:03 - now which pain is to be selected out of
15:06 - three two and one which pages in the
15:08 - which page is the oldest page which has
15:10 - come first this three page this this
15:13 - page having number three so the
15:16 - operating system will swap out this page
15:18 - so here we will put four two and one
15:21 - will be same fine now see for one this
15:26 - pain is all already available so this is
15:29 - a hit for two and one pages available so
15:34 - it is a hit now next is six this page is
15:37 - not available now which page is to be
15:39 - swapped out
15:40 - out of these three pages which one is
15:43 - the oldest one see this 4 has come here
15:46 - this too has come ad from here and one
15:49 - has come here so see the sampled record
15:52 - I use to apply this trick basically I
15:54 - just see here only see 4 is here
15:58 - starting off to his hair and starting
16:00 - off one is here so obviously this one is
16:01 - the oldest Erna so you will choose this
16:04 - page 2 4 6 n 1 and this is a mess
16:09 - because this this page was not available
16:11 - now - if the space available no so this
16:15 - is a miss now which page is to be
16:17 - replaced for has come here 6 has come
16:21 - here only one has come here only so see
16:25 - after after looking at this table after
16:28 - looking at this scenario 6 was here
16:31 - initial point of 4 is here initial point
16:33 - of 1 is here so obviously this one is
16:36 - the oldest one ok so we will select 1 4
16:39 - 6 and 2 so this is the simple trick I
16:43 - used to apply next is for this page is
16:45 - available for so this is a hit for 6 -
16:50 - no need to do any swap out swapping now
16:52 - next is 3 4 6 2 this page is not
16:55 - available now which pin is to be
16:57 - selected see the initial point of 4 is
16:59 - here initial point of success here
17:02 - initial point of 2 is here so obviously
17:04 - this 4 is the oldest one so we will
17:07 - choose this 4 so 4 will be replaced with
17:10 - 3 3 6 2 and here is a Miss now next is 4
17:16 - 4 is not available now which page is to
17:19 - be tuesd initial point of 3 is here only
17:21 - 6 initial point of success here only
17:24 - initial point of this 2 is here only
17:27 - so 6 1 6 is the oldest one so we'll
17:30 - choose 6 3 and 2 here is also a miss
17:36 - because this page was not available next
17:39 - is to this page is available so here it
17:41 - is a hit
17:43 - three four and two next is one this is
17:46 - not a variable this is a Miss which
17:48 - pages to be selected three the initial
17:52 - point of three is here initial point of
17:53 - this one is here initial point of two is
17:55 - here so this is the oldest one so we
17:58 - will put one here four and three next is
18:01 - 4 4 is available this is a hit three
18:04 - four and one
18:05 - next is five this is not available so
18:07 - this is a Miss which pages will be
18:09 - selected see initial point of three is
18:11 - here initial point of four is here
18:13 - initial point of one is here so we will
18:14 - select three because this is the oldest
18:16 - one so here five four and one
18:19 - okay next is two next do is not aware
18:23 - available so this is a Miss which pins
18:25 - to be selected five initial point of
18:27 - five is here initial point of 4s here an
18:30 - initial point of this one is here so
18:31 - this is the oldest one so we'll put two
18:34 - here - what next is one one is available
18:37 - so this is a hit five two and one so
18:40 - next is three say this page is not
18:42 - available so this is a Miss which is to
18:43 - be selected or isn't over this five is
18:46 - initial point is here initial point of
18:48 - two is here initial point of one is here
18:49 - so this one is the oldest one okay so
18:52 - we'll choose this one - 105 4 4 is not
18:56 - available you will choose which one I
18:58 - guess 5 has here 2 is here and 3 is here
19:02 - so so sorry 5's here - 0 & 3 0 he needs
19:06 - to choose this one for 2 & 3 so number
19:12 - of page folds how many page holes you
19:16 - just count this cross one two three four
19:19 - five six seven eight nine ten eleven
19:22 - twelve thirteen and hit ratio hit ratio
19:28 - is what number of hits divided by total
19:31 - how many number of hits are there one
19:34 - two three four five and six six divided
19:39 - by total is how many is 19 total is 19
19:43 - so this is what's the hit ratio you can
19:46 - also find out to miss a ratio that is 13
19:49 - by 19 total number of Miss total number
19:51 - of a faceful divided by total so this is
19:55 - how the pay is replaced
19:56 - algorithm will work so in next video
19:58 - I'll discuss with you both
20:00 - that LRU technique and optimal page
20:02 - replacement technique will compare all
20:04 - the three techniques in that video so
20:06 - till then bye bye take it