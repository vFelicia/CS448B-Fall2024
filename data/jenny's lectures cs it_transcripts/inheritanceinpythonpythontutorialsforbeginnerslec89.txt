00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:03 - Python programming language we are
00:05 - discussing object or programming Concept
00:07 - in Python so till now we have discussed
00:09 - classes and object concept right now the
00:13 - second thing is the second important
00:15 - concept of Hope is inheritance so that
00:17 - thing we'll see in this video what is
00:19 - inheritance and the important
00:22 - thing is why inheritance why you need
00:25 - inheritance the need the benefits of
00:27 - using this concept because whenever you
00:30 - go to A New Concept you must first clear
00:33 - this answer why you need that concept
00:35 - why you are studying that concept the
00:37 - need of that thing so the need of
00:38 - inheritance why obviously there are some
00:40 - benefits of using this concept that is
00:42 - why we are using this conception but
00:44 - what are those what are those benefits
00:46 - this thing we'll see practically with
00:48 - the help of programs right first we will
00:51 - see basically what is inheritance right
00:53 - now
00:55 - don't go too into that programming kind
00:57 - of thing in just real life we inherit
00:59 - properties from our parents right means
01:02 - if our parents are having some
01:04 - Properties or some business means
01:05 - automatically we are means that property
01:08 - or business belong to
01:10 - us right not just this we inherit like
01:15 - now uh that appearance also like my eyes
01:19 - are exactly same as my mother's eyes
01:22 - so we inherited the appearance the
01:24 - features like maybe your nose is same as
01:26 - your father's nose
01:28 - like this right maybe your height
01:31 - whether you are tall or you are you know
01:33 - sure it depends on your parents height
01:36 - like this
01:37 - right
01:38 - so each other you can say it's in our
01:40 - genes
01:42 - not only the these properties not only
01:45 - the appearance we also inherit the
01:48 - behavior of our parents
01:50 - like sometimes maybe you uh you have
01:53 - faced this kind of situation you just
01:55 - you know
01:56 - you behave in a weird way and maybe your
01:59 - mother say like father like son
02:03 - means
02:04 - or maybe your father or your parents are
02:07 - having anger issues they are short
02:09 - tempered and so you are your also are
02:11 - having anger issues you are also short
02:13 - temper
02:14 - you also react same as your parents or
02:18 - your father or your mother behave you
02:20 - know in a particular situation you also
02:22 - you know react or you also behave in
02:24 - that situation exactly same means we are
02:27 - inheriting the behavior also from our
02:30 - parents or maybe from our grandparents
02:32 - right this is I think you know and also
02:37 - you have experienced this thing and
02:38 - obviously you can uh like right now you
02:42 - can feel this kind of thing maybe right
02:43 - now you can feel this kind of thing
02:45 - right
02:46 - so this is what inheritance in real life
02:49 - fine now this concept we can implement
02:54 - in programming
02:56 - right with the help of object only
02:58 - programming there we have a concept of
03:00 - inheritance right means we can say like
03:04 - uh in programming we have classes till
03:07 - now we have discussed classes and
03:08 - objects
03:10 - so classes are just blueprints those are
03:12 - having some attributes and methods
03:14 - attributes mean means what what an
03:16 - object has are attributes what an object
03:20 - does the methods those are methods
03:23 - so in a class
03:25 - we are having these attributes and
03:28 - methods
03:32 - right now inheritance is the ability
03:38 - to inherit
03:39 - the attributes or the method so you can
03:42 - see the properties of the class or the
03:45 - features of the class already created
03:48 - class
03:49 - to a newly created class
03:53 - we can inherit all these attributes and
03:55 - methods from this class
03:57 - into another class
04:01 - so this class is
04:03 - this is basically
04:05 - from here we are inheriting these
04:07 - attributes and methods so this is known
04:09 - as base class or parent class
04:13 - or super class
04:16 - and the second class which inherit
04:19 - see which inherit these properties
04:22 - attributes and methods from this class
04:24 - this class is known as Drive class
04:27 - or child class or subclass
04:31 - right
04:32 - so this is simple you can say
04:35 - inheritance
04:36 - so we can say inheritance is the ability
04:39 - to inherit the features or the
04:41 - properties or the attributes and methods
04:44 - from an already existing classes or
04:47 - already created classes into newer
04:50 - classes that we make right rather than
04:53 - creating that class from scratch we can
04:55 - inherit these features
04:58 - okay
04:59 - now this is what inheritance but why why
05:02 - we are inheriting these attribute and
05:04 - methods we can also write down our
05:06 - attributes and methods in this class so
05:09 - why inheritance the answer of this
05:11 - question is important so if you got the
05:13 - answer of this question why inheritance
05:15 - and you understand this thing
05:17 - then means you are done almost you got
05:20 - everything about inheritance yeah we are
05:23 - studying many things like types of
05:24 - inheritance and many other things but
05:27 - the answer of this question is important
05:28 - one before proceeding further why why
05:31 - inheritance so this thing now I'll see
05:34 - you with the help of program right okay
05:36 - let me just first tell you the syntax
05:39 - before
05:40 - you just write down a name this keyword
05:43 - class then
05:45 - this derived class name
05:49 - right and in bracket we write down
05:52 - Base Class name
05:56 - and the colon and here the class
05:58 - definition
06:00 - whatever you want to Define in this
06:02 - class that definition you can write
06:04 - right
06:06 - so now here you're gonna like like class
06:09 - definition or statements
06:12 - so this is simple syntax of inheritance
06:14 - now let's see practically
06:17 - okay so let's create a new file here
06:19 - inheritance intro dot py right
06:23 - I am simply
06:25 - Define the class and the class name I'm
06:28 - taking like human
06:31 - okay now I'm defining some functions
06:33 - like eat
06:35 - and in it simply I am printing like I
06:38 - can
06:39 - eat
06:41 - and one more function suppose I am
06:43 - defining like work
06:46 - right
06:48 - and simply I am going to print here I
06:51 - can work
06:54 - so these two methods sorry not function
06:56 - these are two methods eat and
06:59 - not word its work I can work
07:03 - right now
07:05 - let's define see I'm having only right
07:07 - now methods no attributes that was we'll
07:10 - see later about attributes now I am
07:12 - having a class
07:14 - and suppose I am having a class mail
07:18 - right
07:19 - now obviously Paul male and obviously
07:22 - females are human human being
07:24 - so male can also eat we know male can
07:28 - also work right
07:30 - now one way is either in mail also you
07:33 - can Define these two functions for male
07:35 - and like this Ctrl C and
07:39 - they eat deaf work I can work I can eat
07:42 - right and simply if I like if I create
07:46 - an object of male male underscore one
07:48 - any name you can take and I'm creating
07:51 - an object of this male class
07:54 - right and with the help of this now male
07:58 - object male dot see eat and work these
08:03 - two methods are from this male and male
08:06 - class as you can see right so you can
08:08 - access these methods like if I access it
08:10 - and if you run this then obviously it
08:13 - will print
08:14 - I can eat see right but the thing is
08:19 - this is what just a waste of time
08:23 - right and just to increase the number of
08:27 - lines in our code unnecessarily because
08:29 - we are just repeating these lines these
08:32 - two things
08:34 - if you are a human obviously male or
08:36 - human so they can eat and they can work
08:38 - so rather than writing again
08:41 - I can just use these
08:45 - methods these are these are already
08:47 - defined these are already in this
08:49 - already created class so rather than
08:50 - creating this class from scratch what I
08:53 - can do
08:54 - I can just inherit these methods so this
08:58 - is what inheritance and this will
09:00 - definitely save a lot of time because
09:03 - here we are I'm only two classes and
09:05 - only two methods small example but on
09:07 - industry level there are multiple
09:10 - classes and very large project on very
09:12 - last project we are working right so
09:15 - obviously this is going to save a lot of
09:17 - time and less number of lines in our
09:20 - code so that is why if less number of
09:21 - lines then readability of our code will
09:23 - automatically increase maintainability
09:25 - as well as readability right so these
09:28 - are I guess you are getting now the
09:30 - benefits of using this concept so this
09:32 - is same the answer of why we need
09:35 - inheritance so now so the syntax I have
09:37 - told you derived class name and in
09:39 - bracket you just have to pass simply the
09:42 - base class
09:43 - from this class I am going to inherit
09:46 - these two features so these two methods
09:48 - so just write down the name of that
09:50 - class that's it now if you don't want to
09:53 - Define anything in main class obviously
09:54 - male class if we cannot leave this like
09:56 - this so just have to pass
09:59 - just a past statement means we we don't
10:02 - know what to write down in this mail
10:03 - class right now but later on we will
10:05 - Define this class also right now in mail
10:08 - now see with the help of this male
10:11 - object
10:12 - mail one
10:13 - can you access eat and walk see
10:18 - here also see the difference now method
10:20 - eat and what you can access but here see
10:23 - the name of the class is human human and
10:27 - at previous case the name of the here
10:29 - the class was male and male so from
10:31 - Human class we are accessing it and self
10:33 - so this is inheritance so now also I can
10:36 - print I can access it and yeah I can eat
10:41 - so the main purpose of inheritance is to
10:45 - increase the reusability of the code we
10:47 - are either using this code again rather
10:49 - than writing this again we are just
10:52 - using it
10:53 - right
10:54 - now
10:56 - this thing this is the simplest concept
10:58 - of inheritance the second thing is this
11:00 - derived class
11:03 - can Implement can have its own
11:06 - attributes and its own behavior
11:09 - right like we
11:10 - we can have our own behavior it's not
11:13 - like that everything the all the
11:15 - properties all the appearance properties
11:16 - and all the like our Behavior we inherit
11:18 - from our parents know
11:20 - we are having our own identity maybe
11:23 - their their you know uh
11:26 - uh their way of doing some work is
11:28 - different our way of doing our work is
11:30 - different so we can have different
11:31 - Behavior so like this the derived class
11:33 - can also have its own attribute and
11:36 - methods so right now just I'm not taking
11:38 - the attributes I'm taking just methods
11:40 - so I'm just defining a method one more
11:43 - method like maybe flood
11:47 - no offense
11:49 - it's just an example don't take it
11:51 - seriously
11:52 - so I can
11:55 - see
11:57 - these now see using this mail how many
12:00 - thing you can access male dot
12:03 - eat and work from Human class and flirt
12:06 - from male class all the three methods I
12:09 - can access right so if I access this
12:12 - slot so it will print yeah I can flirt
12:15 - right and both if I want to access like
12:19 - male 1 Dot and work
12:22 - this is also fine see I can plot I can
12:25 - work
12:27 - right so this work
12:30 - this may class is accessing from human
12:31 - and this is its own method so our own
12:33 - attribute and methods we can Define this
12:36 - is second thing
12:37 - third Point important is
12:40 - this derived class can have its own
12:44 - implementation
12:46 - of the method that has that are already
12:49 - defined in human class
12:51 - now what does that mean let's see
12:53 - practically if you're not getting my
12:55 - words see
12:57 - I am
12:59 - taking the same method work
13:03 - from Human class work right but my way
13:06 - of work is different from Human class so
13:08 - I can redefine this method here
13:12 - so my way of work is
13:15 - like maybe I'm specific I can call
13:20 - so I have just I am my I'm having my own
13:23 - implementation of this work method and
13:26 - this women class is having
13:27 - implementation of this work method I can
13:29 - work but I am having I can code
13:31 - so this particular thing is called
13:34 - overridden this is what
13:37 - override concept method over it
13:40 - overriding
13:41 - means you have overruled this method
13:44 - work method previously this but you have
13:46 - overrun this method right now if you
13:49 - want to access using this object mail
13:50 - one dot C flirt walk from male eat from
13:55 - Human
13:56 - see this work is from male you are
13:59 - accessing not from Human because I am
14:01 - having my own implementation
14:04 - of this method so if you print
14:06 - work then it will print not I can walk
14:09 - it will print I can code because you
14:11 - have overridden this method I can plot I
14:13 - can code
14:14 - right
14:16 - this is overriding concept
14:18 - okay fine now next point is
14:21 - if you want if you want to have this
14:25 - this definition also this Implement
14:27 - implementation also as well as you want
14:29 - to add something extra
14:32 - in that definition of that method
14:36 - see means I want to print I can work as
14:39 - well as I can code
14:41 - right I am not
14:43 - ah implementing I am not defining this
14:46 - method from the scratch I want the
14:48 - previous definition from the base class
14:50 - and I want to add some extra
14:54 - right
14:55 - so that what how you can do that you can
14:58 - access with the help of we have a
15:00 - function
15:00 - super
15:04 - just call this function dot what method
15:08 - see with the help of super it indicates
15:10 - that
15:12 - from Human class from Super means
15:14 - superclass we know the base class so
15:16 - Base Class is what class you have passed
15:19 - here human so this is human is what the
15:21 - base class so from Base Class you can
15:24 - access all the attributes and methods of
15:26 - that class
15:27 - right with the help of with the super
15:30 - Super Dome now work see human and eat so
15:35 - work
15:37 - sorry
15:39 - and I want to access this thing super
15:42 - dot work right
15:44 - now see let's print mail one dot work
15:48 - see I can plot and I can work I can code
15:54 - now this work definition is
15:57 - because we have accessed this
15:59 - implementation from Super so it will
16:01 - print I can work as well as now I have
16:03 - added my extra feature means one more
16:05 - statement I can code so both think it
16:07 - will print and now if you see here
16:10 - this work is from mail only not from
16:14 - human male only
16:16 - right
16:18 - so I hope you got this thing right I can
16:21 - figure out I can work I can code
16:23 - so these kind of thing you can do now
16:26 - this is about methods if suppose I am
16:29 - having attribute 2.
16:31 - so so this super class the super
16:34 - function is basically give you the
16:36 - access to all the methods and attributes
16:38 - of parent class right so let's define
16:42 - some attribute also I am having a init
16:44 - function and there
16:46 - I'm having like two attribute all the
16:49 - human are having like maybe two eyes
16:51 - maybe not not maybe yeah definitely they
16:54 - are having two eyes so numb underscore
16:57 - ions equal to I'm setting two right and
17:02 - nose
17:05 - number of no is equal to one only two
17:08 - attribute I am taking number five is the
17:09 - number of nodes so obviously male is
17:11 - also having the same thing number of
17:13 - eyes and knows two eyes and one knows
17:15 - right
17:16 - now see
17:21 - with the help of
17:23 - this male object
17:26 - now you can access and number of nose
17:30 - from Human class and number of eyes from
17:33 - Human class right so if you want to
17:35 - print Nam underscore ions
17:37 - I want to print this thing so let's
17:39 - print
17:41 - how many number of eyes uh this male
17:43 - object are having
17:45 - so let's run this and it will show you
17:48 - see I can flirt I can work I can code
17:51 - random number of eyes are two
17:54 - number five is two
17:55 - we haven't defined any attribute in mail
17:59 - but it is accessing from parent class
18:02 - like this
18:04 - and if
18:06 - rather than eyes and nose I want to
18:09 - specify one more attribute specifically
18:11 - for mail so that also you can do with
18:13 - the help of depth I want to
18:16 - initialize and like
18:19 - I want to pass one parameter name name
18:22 - of the mail
18:23 - with this class right so while calling
18:26 - this now creating object you have to
18:27 - pass name
18:29 - so I'm writing like self thought name is
18:33 - equal to
18:34 - name
18:36 - right now it will give error while
18:39 - calling this object because see
18:42 - in line number 17 while you are creating
18:45 - this object mail type error mail in it
18:47 - missing one required positional argument
18:49 - name because in defining in this
18:52 - Constructor you have to pass
18:55 - this parameter name so let's pass this
18:58 - name
19:00 - maybe Akash
19:05 - let's send this
19:07 - mail object has no attribute Namaz
19:12 - see
19:13 - no attribute
19:15 - num eyes
19:18 - why so because see last time
19:22 - in line number 20 because you are
19:23 - printing numbers and mail object is not
19:25 - having attribute namise in mail object
19:28 - now I am having only name attribute
19:31 - but see now at this point of time
19:34 - let's see let me just show you this
19:36 - thing
19:37 - if you want to print mail One Note
19:40 - then name
19:43 - Namaz are from human number of nose from
19:46 - human and maybe you think you can access
19:49 - let's access number of nose
19:51 - maybe you think it should print let's
19:54 - comment out this these lines work and
19:57 - all
19:58 - I'll just print number of nodes
20:01 - see it is not printing anything male
20:03 - object has no attribute num nose why you
20:05 - are getting this attribute because this
20:07 - is dried glass we can access all the
20:09 - attribute from here
20:11 - because now you have defined your own
20:14 - init function here
20:16 - right
20:18 - now if you want to access these
20:20 - attributes
20:21 - if you want to access these attributes
20:23 - then you have to use super function
20:25 - function so yeah we can use these
20:30 - attributes as well but for that in this
20:33 - init function in this derived class init
20:35 - function you have to call
20:39 - this super function
20:42 - Dot
20:44 - in it
20:46 - init function of super
20:48 - right
20:50 - and now that's fine
20:53 - now let me just run this see if again
20:56 - mail one don't
20:59 - name number of nodes number of eyes from
21:02 - human and work plot and these are the
21:04 - methods eat as well as from human right
21:06 - so number of nose or number of eyes I
21:09 - want to print
21:10 - let's run this and it will print number
21:12 - of eyes are two
21:14 - okay
21:16 - if I'll print the name
21:20 - mail one dot
21:22 - name so it will print
21:25 - C Akash
21:26 - right so this is what the beauty of this
21:30 - super function it will give you the
21:32 - access
21:33 - of all the attributes and methods of
21:36 - superclass
21:37 - right
21:38 - because here you have if you don't
21:40 - Define your own init function it's okay
21:42 - without any super function you can use
21:45 - this thing but if you if you have
21:47 - defined
21:48 - your own init function in that case you
21:51 - have to call Super function to access
21:52 - the attribute of
21:54 - parent class
21:56 - see the difference here right in case
21:59 - here also I want to pass one argument
22:02 - like maybe
22:05 - self Dot
22:08 - heart equal to
22:11 - foreign
22:24 - because this time this initialization is
22:27 - also having one parameter
22:28 - if you run this like this
22:30 - see
22:31 - in line number 19 because you are
22:34 - calling this Akash and in line number 12
22:36 - super init this type error women don't
22:40 - init missing one required positional
22:41 - argument num heart
22:45 - in line number 12 in line number
22:48 - 12.
22:49 - so you have to pass one argument num
22:53 - hard any other name you can take it's
22:56 - not like that you have to use this
22:58 - number same name so I am calling suppose
23:00 - heart only heart
23:03 - right
23:05 - okay
23:06 - still it will give an error see now
23:09 - maybe you think we have passed one
23:10 - parameter name as well now why it is
23:12 - giving an error let's run this here
23:15 - heart is not defined as well as see this
23:16 - line line number 19
23:18 - Akash
23:21 - here also we got an error see you are
23:26 - you are accessing all the attributes
23:28 - from this human class right means one
23:31 - parameter is nam hard so rather than
23:33 - name one more you have to pass here
23:38 - one more attribute for number of heart
23:40 - to the seed number of R so hard right
23:44 - and whatever you write down the
23:46 - parameter name you have to pass the same
23:48 - parameter name in super init
23:51 - it's not compulsive that these should be
23:53 - same as this parameter this can be
23:55 - different right now it will work fine
23:57 - now it will give error because Akash as
24:00 - well as okay let's run this whatever you
24:02 - will get see
24:04 - while calling this mail one while
24:06 - creating this object this is missing one
24:08 - required positional argument r so
24:11 - obviously you have to pass your name as
24:12 - well as R so Akash comma one heart
24:17 - and if you print here
24:21 - using male 1 Dot
24:26 - see you can access now
24:29 - this attribute of human class
24:39 - foreign or if suppose I want to define a
24:43 - function here
24:45 - one more function like display and
24:47 - simply I want to print here
24:52 - using F string
24:54 - like High
24:56 - m
24:58 - name of this object
25:00 - on which you are calling so I am
25:03 - the name obviously we can
25:06 - Fetch with the help of we have a name
25:08 - attribute here name so I am self dot
25:11 - name
25:12 - and suppose I want profit I have
25:15 - number of Parts how many number of part
25:18 - so this much
25:20 - hard
25:21 - from where you can fetch the value of
25:24 - this heart
25:26 - from
25:28 - self dot C
25:30 - um hard from Human
25:34 - and other than this just call this
25:38 - display
25:39 - mail one dot
25:42 - display let's run this
25:45 - hi I'm Akash and I have one heart
25:47 - although the smell is not having any
25:50 - attribute numb heart but still we are
25:52 - using self-load numb heart because we
25:54 - are accessing this from the parent class
25:56 - the same attribute num underscore heart
25:58 - not simply hard or hard just a parameter
26:02 - name
26:03 - the attribute name is nam underscore
26:05 - Heart Like This
26:09 - so now you got the main purpose or need
26:12 - or use or you can say advantage of
26:14 - inheritance concept
26:16 - what main purpose of inheritance is
26:19 - reusability of the code because we can
26:21 - create
26:22 - a new class from already existing class
26:26 - right we can inherit all the features
26:28 - and attributes the methods from already
26:30 - created class rather than creating our
26:33 - class derived class from scratch right
26:35 - and that will definitely save a lot of
26:38 - time
26:39 - right so it enhanced the reusability of
26:41 - the code and your code would be more
26:43 - maintainable more readable
26:45 - right and as well as a child class can
26:48 - provide its own specific implementation
26:51 - of the methods that
26:54 - inherit that the class derived class
26:56 - inherit from base class right or you can
27:00 - add in child class also you can add your
27:02 - own attribute and methods right
27:05 - so now I hope you have a basic idea of
27:08 - inheritance and why we need inheritance
27:09 - some use of inheritance or you can say
27:11 - advantage of using this concept right
27:13 - now in the lecture we will see types of
27:15 - inheritance so now it's in the next
27:17 - video till then bye bye take care