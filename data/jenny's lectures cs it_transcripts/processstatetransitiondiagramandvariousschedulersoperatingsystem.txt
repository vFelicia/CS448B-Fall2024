00:00 - hey guys in this video I'm going to
00:02 - discuss with you process state
00:03 - transition diagram so mainly everywhere
00:07 - you will find that five state transition
00:10 - diagram new already running waiting and
00:12 - then terminated
00:14 - okay we'll discuss two more state here
00:16 - okay and we'll also discuss the
00:18 - different types of she jeweler so the
00:21 - very first state is new if a process is
00:24 - a new state it doesn't mean that it has
00:27 - been created fine we cannot say it is a
00:31 - process we can say it is a program which
00:33 - is in secondary memory will be picked by
00:36 - operating system and it will be put into
00:39 - the main memory so process here you can
00:44 - say a process is about to create it is
00:47 - it has not been created yet fine
00:50 - now next state is after the creation of
00:53 - the process it go to ready state here
00:59 - you can say the process has been after
01:04 - the creation of the process the process
01:06 - go to ready state it means that process
01:09 - is now ready to run okay
01:13 - now after ready state where it will go
01:16 - it will go to running State fine and
01:22 - this this phenomena is known as she do
01:26 - this process this this process has been
01:29 - scheduled and when that process goes to
01:32 - running state or you can say this is
01:34 - dispatch now after running state where
01:38 - it can go see if everything goes
01:42 - smoothly then after running if suppose
01:45 - running means to that process CPU has
01:48 - been allocated and if the process has
01:51 - been completed then the process will go
01:54 - to terminate state here the process has
02:00 - been completed then it will go to the
02:05 - stay terminated now one more state is
02:07 - there so if someone asks what are the
02:11 - minimum
02:12 - number of processes minimum number of
02:14 - states a process can go through so you
02:17 - can say for new already running in
02:19 - Turpan 8 now suppose at some point of
02:23 - time processes running in the processes
02:26 - in CPU and process want some IO devices
02:29 - some use process wants to perform some
02:32 - i/o operations then process will go to
02:36 - which state to waiting state or
02:42 - somewhere it is also written as blob
02:45 - State fine means i/o request here is our
02:53 - u request and after the completion of
02:55 - the i/o operation the back to ready
02:59 - state here you can write ru completion
03:04 - fine so this is the basic 5 state model
03:09 - of any process almost in every operating
03:12 - system this diagram would be there and
03:14 - the process would go to these five
03:16 - states now see this diagram is basically
03:20 - you know for non preemption you can say
03:24 - non preemption means see I have told you
03:27 - in multi programming that you cannot
03:28 - forcefully remove a process from the CPU
03:32 - here is the same case you cannot remove
03:36 - if processes running then process if
03:39 - process wants any i/o device then it can
03:41 - go to waiting our process can go to only
03:44 - the terminated state so this is what the
03:47 - known preemption you cannot forcefully
03:49 - remove a process from CP now we also
03:53 - have that multitasking of sneaky owatta
03:56 - we have located is some time quantum to
03:59 - each process and if time quantum
04:01 - completes then the process would began
04:04 - the process would be removed forcefully
04:06 - or you can say preempted from the CPU
04:08 - and again go to the ready key something
04:11 - like this we can show one more
04:14 - transition like this from running to
04:17 - ready
04:18 - so this says for preemption this is
04:22 - showing the preemption of the process
04:24 - and if you will not right
04:25 - not draw this one then that is known as
04:27 - non preemption when the process will go
04:30 - from running to ready state maybe some
04:33 - time quantum expires then our second
04:39 - thing maybe because of priority if any
04:43 - another process which is having higher
04:45 - priority than which is having higher
04:49 - priority than a process which is running
04:51 - then what operating system will do
04:53 - operating system will remove that
04:54 - running process from the CPU and the CPU
04:57 - would be allocated to that process
04:59 - having higher priority so this is the
05:01 - preemption case next two states are also
05:05 - there see one is suspend ready
05:12 - now when the process will go to this
05:18 - state a process from ready state will go
05:25 - to this state this is known as suspend
05:28 - and when process resumes then again go
05:33 - back to ready state and why the
05:38 - requirement of this state see all the
05:42 - processes this ready queue here here in
05:46 - this state many processes can be there
05:48 - and ready to P 1 P 2 P 3 P 4 like this
05:50 - fine now see this this all the processes
05:56 - which are in ready queue those processes
05:58 - are in main memory fine here also main
06:03 - memory the processes are in main memory
06:04 - and if processes in waiting or blogs
06:06 - then also process is in memory main
06:10 - memory sorry fine and as you all know
06:13 - the size of main memory is limited so we
06:17 - cannot put many or all the processes at
06:20 - the same time into main memory fine and
06:23 - because of some reason may be one higher
06:26 - priority process is there and that
06:28 - process has to come to ready state and
06:31 - but there is no more space for any other
06:35 - process then what operating system will
06:37 - do what the scheduler will do we'll
06:38 - discuss your duel
06:39 - later okay what the operating system
06:41 - will do operating system will pick that
06:43 - process that having low priority from
06:45 - this ready queue suspend that process
06:48 - and then that process will be moved or
06:50 - you can say swap out swapped out from
06:53 - main my main memory to to secondary
06:56 - memory and then that state is known
06:59 - known as suspend ready and maybe after
07:02 - some time when that process when there
07:04 - is the main of space in this ready queue
07:06 - in main memory then that process can be
07:09 - resumed back to this ready state next
07:12 - one more state is what that is suspend
07:18 - wait or suspend block you can see now
07:22 - when a process will go to this state see
07:24 - this processes in waiting state because
07:26 - that process is performing some i/o
07:28 - operations fine and if more and more
07:31 - processes are there more and more
07:33 - processes are performing ru operations
07:35 - see this is also the process which in
07:38 - which is in waiting state that is also
07:40 - in main memory and main memory size of
07:41 - main memory is limited okay if more and
07:45 - more processes are running more and more
07:47 - processes are coming from this running
07:48 - state to this waiting state then at one
07:52 - time this memory would be exhausted fine
07:54 - and what the operating system how to do
07:56 - the operating system have to pick some
07:58 - processes and then swapped out those
08:01 - processes to secondary memory and that
08:04 - state is known as suspend wait suspended
08:08 - and after resume after you know and that
08:11 - process may be may be there is some
08:13 - space available now then that process
08:15 - can be resumed back to this state fine
08:18 - it is not like that if processes in
08:21 - suspend wait state then that process is
08:24 - not performing i/o operation still that
08:28 - process is doing its IO operations and
08:31 - here here this transition is what if
08:34 - that process has completed its i/o
08:37 - operations fine then that process is
08:40 - ready to go to the ready state then that
08:42 - process will switch to suspend ready and
08:45 - after the suspend ready it can resume
08:47 - two ready state so one question may be
08:51 - why the process which has completed
08:53 - sigh operation can't go back to waiting
08:55 - state it is going to the suspend ready
08:57 - state so the answer may be if the
09:00 - process who has completed its i/o
09:02 - operation that it is ready to execute
09:04 - and if it is it is resumed back to this
09:07 - waiting state then it again go to this
09:09 - blog blog state fine so this is the
09:14 - process state transition diagram now we
09:17 - are going to discuss various types of
09:18 -  euler's three types of she new
09:21 - lures are there one is long term
09:23 - scheduler one is short term scheduler
09:25 - and one is medium term should you learn
09:28 - now see from this new state fine process
09:34 - would be pink and put in the ready state
09:39 - fine
09:40 - so this this thing is done with the help
09:43 - of long-term she'd Euler so the long
09:48 - term scheduler pick the processes from
09:50 - new state and then put the processes
09:52 - into ready state it also decide the
09:54 - degree of multi-programming
09:56 - now what is degree of multiprogramming
09:57 - it is you know you can say their maximum
10:00 - number of processes that can be that can
10:03 - reside in this ready state at one time
10:05 - if 50 processes can reside in ready
10:08 - state at one at some particular time
10:11 - then you can say the degree of multi
10:12 - programming is 50 fine
10:15 - so this agree of multi program will be
10:16 - decided by this long term she do that
10:19 - okay now from ready state that the
10:24 - process would be picked and then the CPU
10:26 - would be located to that process them
10:28 - the best task would be done with their
10:30 - short-term edulearn fine and somewhere
10:40 - here it is also written that which
10:43 - processes to be picked that would be
10:45 - decided by short-term scheduler and the
10:50 - short-term scheduler will call the
10:52 - dispatcher and the dispatcher will pick
10:59 - the process from this ready state and
11:01 - CPU would be allocated to that process
11:03 - and they put the process into running
11:06 - state
11:07 - now third type of schedule is that as
11:10 - medium term she do not see this
11:13 - suspension from waiting block to the
11:16 - suspend ready and there from ready to
11:18 - this suspend ready this would be done
11:21 - with the help of medium-term scheduler
11:29 - finds three types of settler are their
11:31 - long-term short-term and medium-term
11:33 - should do that now one more fund is
11:36 - there when a process is running then it
11:40 - takes two times when is cpu time and one
11:44 - is IO time when a process is running and
11:48 - executing on a C on the CPU then that is
11:51 - known as CPU time and when a processes
11:53 - doing some ia operations and that time
11:54 - is known as IO time if a process is you
11:57 - know spending more and more time in the
12:00 - processing or in the CPU then that
12:02 - process is known as CPU bound and if a
12:06 - process is spending more and more time
12:08 - doing I oppressions performing i/o
12:10 - operation then that process is known as
12:12 - IO bound process fine
12:16 - now which so you can say to kind of
12:19 - process CPU bound processing I you bound
12:21 - process now the performance of the
12:24 - system or the CPU also depends on the
12:26 - decision taken by the long term should
12:28 - you let see two types of processes are
12:32 - there CPU bound and IU bound we have
12:33 - already discussed and if long time she
12:36 - do learn head has chosen more and more
12:39 - processes which are IU bound and those
12:41 - are in now and ready state now suppose
12:44 - one process has been allocated to the
12:46 - CPU and then again that process is i/o
12:49 - bound that is why that process requires
12:51 - to do some ie operation and that process
12:53 - will go to waiting state next person
12:56 - that is running state again that
12:58 - requires some IU process and then
12:59 - internal again go to the waiting state
13:01 - so the processors are again and again
13:03 - going to waiting State so that s why CPU
13:06 - utilization would be no and you can say
13:08 - that more and more context switching
13:10 - would be there that is also you know
13:12 - some time consuming process now if if
13:17 - long term scheduler you has chosen more
13:20 - and
13:20 - more jobs which are more and more
13:22 - processors which are cpu-bound then
13:24 - although that cpu utilization would be
13:27 - at maximum but in that case what happens
13:30 - maybe some processors require some i/o
13:34 - operation to perform and if that process
13:36 - is doing I hope raishin then maybe that
13:39 - process would face starvation fine maybe
13:43 - that process would have to wait for a
13:45 - long time to again go back to the CPU
13:47 - because processors are all the processes
13:49 - or more and more processes are CPU bound
13:52 - processes ok so long term scheduler has
13:55 - to decide has to choose a mix of CPU
14:01 - bound and higher bound processes now let
14:04 - us discuss the frequency of these three
14:07 - schindler means how frequently
14:09 - schedulers husband called the maximum
14:12 - frequency is or short term should do not
14:15 - then medium term scheduler and then long
14:18 - term scheduler because short term
14:22 - scheduler has been called again and
14:24 - again see short time scheduler decide
14:27 - which which processes to be chosen from
14:31 - ready state and then is then it called
14:33 - the dispatcher and dispatcher is a
14:36 - software which pick the job and that job
14:39 - is going to from ready state to that
14:41 - running state now so that decision that
14:46 - which job is going that dispatcher will
14:49 - pick from ready state fine that decision
14:51 - is going to well it for a going to you
14:54 - know remain valid for a short time and
14:56 - when that process which is running
14:58 - either that can be terminated or that
15:00 - will go to this waiting state then again
15:02 - short term scheduler has to decide which
15:04 - job is to be pick from this ready state
15:07 - why so very frequently short-term
15:10 - scheduler has been called and the
15:11 - decision which that that the short-term
15:13 - scheduler takes that decision you know
15:16 - remains valid for a short time that is
15:18 - why it is known as short-term scheduler
15:20 - now what about medium-term scheduler see
15:25 - medium-term scheduler
15:27 - see the role of medium-term scheduler is
15:29 - picks swap out the job from main memory
15:32 - don't pick up of the process
15:34 - main memory - secondary memory and vice
15:35 - versa okay that suspension and thus
15:38 - resume this also suspended resume this
15:40 - is done with the help of this
15:42 - medium-term scheduler so the process
15:44 - which is in suspended wait state it is
15:47 - not like that that process would be in
15:49 - waiting state for a long time or you can
15:51 - say that the process would be in waiting
15:53 - state for a short amount of time fine so
15:56 - that is why it is known as medium-term
15:58 - scheduler it is not called so frequently
16:01 - as short-term scheduler now what is the
16:04 - long-term scheduler is so the long-term
16:06 - scheduler decides the degree of
16:07 - multiprogramming means how many
16:09 - processors can decide at ready state at
16:12 - maximum at particular moment of time
16:15 - fine and that that decision is going to
16:19 - last for a long time that is why it it
16:22 - is being called in after a long time
16:24 - long term scheduler is not being called
16:27 - very frequently so this is all about the
16:31 - process state transition diagram and
16:33 - three types of schedulers so I'll say in
16:37 - the next video till then bye bye take
16:38 - care