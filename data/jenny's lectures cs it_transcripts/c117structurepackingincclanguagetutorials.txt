00:00 - so in the series of running c
00:01 - programming we are discussing structures
00:03 - in scene the previous video we have
00:04 - discussed structure padding in c
00:06 - in this video we will see what is
00:08 - structure packing in c we are only left
00:10 - with this small topic of a structure
00:12 - like and i'll show you practical also
00:14 - right we will take two or three examples
00:17 - like we have discussed what we have
00:18 - discussed in the previous video those
00:20 - examples and i'll show you the output
00:23 - right
00:24 - like with the structure padding without
00:25 - structure padding
00:27 - and if you use structure packing
00:30 - in the program then what output you will
00:32 - get so all the kind of variations we
00:34 - will see practically in this video right
00:36 - but before there is one tell you one
00:37 - thing if you guys are preparing for gay
00:39 - 2023 examination or will be preparing
00:42 - for this examination then an academy has
00:44 - started a bash from 8th of december
00:46 - in this course they are going to cover
00:48 - all the subjects of cs and ip and help
00:50 - you to prepare for your gate examination
00:52 - this course will include strategy tips
00:54 - and tricks practice questions and
00:55 - numericals along with the detailed
00:57 - explanation of the concepts and the
00:59 - course will be covered in hindi and
01:00 - english and notes will be given to you
01:02 - in english only and all the doubts
01:04 - related to any topic will be clarified
01:06 - in the doubt clearing sessions in the
01:07 - course
01:08 - so this would be paid subscription but
01:10 - you can use my code jkl10 to get extra
01:12 - 10 percent discount on this page
01:13 - subscription and an academy is also
01:15 - going to conduct a scholarship test for
01:17 - gate and esc on 12th of december at 11
01:20 - am this will be live test and you can
01:22 - take this test for free you just have to
01:24 - enroll for this test so here you will
01:26 - get a chance to compete with thousands
01:28 - of learners from all over india and you
01:29 - stand a chance to win
01:31 - 100 up to 100 scholarship and some other
01:34 - exciting prizes as well in this test you
01:36 - will get 20 questions in the timeline
01:37 - would be 60 minutes and these questions
01:40 - are very challenging and original gate
01:42 - questions that has been curated by their
01:44 - best gate and esc educators so here you
01:47 - can access your preparation in just 60
01:49 - minutes with the help of that live
01:50 - leaderboard
01:52 - you can see how you rank against all the
01:53 - others from all over india with the help
01:55 - of that live leaderboard that would be
01:57 - updated after every question
01:59 - and after every contest detailed video
02:01 - solutions would be given to you by their
02:02 - experts so that you can identify your
02:04 - weak areas and
02:05 - you can change your preparation
02:07 - trajectory if needed
02:09 - plus one more offer you will get here on
02:11 - purchasing a plus subscription of one
02:13 - year or above you will get six months
02:15 - free so you can just unlock your true
02:18 - potential with this extra learning time
02:21 - you will get and this offer is valid for
02:22 - one day only
02:24 - and you can use my code jkl10 to get
02:25 - extra 10 discount on these paid
02:27 - subscriptions so all the links and all
02:29 - the relevant details i'll put in the
02:30 - description box of this video you can go
02:32 - and check out now let's see what is
02:34 - structure packing see first of all i'll
02:36 - write down here the example that we have
02:38 - taken in the previous video right
02:40 - so now what would be the size of this s
02:42 - if you want to print s is what a
02:44 - variable of this struct type the members
02:46 - are care a into b right
02:49 - so how do you calculate the size if you
02:51 - say the size is suppose i am
02:54 - here i am supposing it will take one
02:55 - bite
02:56 - so the care will take one bite and in is
02:59 - going to take four bite so you will say
03:00 - five bite but no with the help of
03:02 - structure padding automatically compiler
03:04 - will insert structure padding here right
03:06 - automatically you don't need to do
03:07 - anything for data alignment purpose
03:10 - right and why stuff the padding is done
03:12 - that we have discussed in previous video
03:13 - you can check out that video in this
03:14 - high button right so now how the memory
03:17 - would be aligned here
03:18 - here you will this is one byte is for a
03:22 - these bytes would be
03:24 - empty bytes and these four bytes would
03:26 - be this for this b so how many
03:28 - bytes four and four that is eight by
03:30 - those total size of this would be
03:33 - eight bytes right this this is what you
03:35 - can see it's wastage of memory these are
03:37 - pad padding bites padding bites one two
03:40 - three no bits bites three bites or
03:42 - padding bites here right so this is what
03:44 - wastage of memory but it will
03:47 - why we do structure padding means why
03:49 - compiler do structure padding
03:50 - automatically not we do compiler will do
03:52 - automatically
03:53 - because to increase the performance
03:56 - right but at a penalty of memory
03:58 - right
03:59 - but what if i don't want to waste this
04:01 - memory i just want to pack everything
04:05 - like this
04:06 - like i don't want compiler insert these
04:09 - extra bytes in between this i don't want
04:12 - any alignment of the memory i want the
04:14 - data should be stored something like
04:16 - this
04:17 - this one byte for this character a and
04:19 - next one two three four
04:22 - these four bytes one two three four
04:24 - these are for this b means total i want
04:27 - five bytes of memory only
04:30 - right i just want to pack this structure
04:33 - so what you can do that is what
04:35 - structure packing is
04:37 - so just have to do one thing you just
04:38 - have to include a simple line in your
04:40 - program
04:42 - in after that header files what you have
04:44 - to write
04:45 - hash pragma
04:49 - and we just write pack
04:51 - and here
04:52 - one
04:53 - in bracket right it's a directive
04:56 - actually which is used to you know turn
04:58 - on and turn off some features in your
05:01 - program so here we are turning on the
05:03 - packing features
05:04 - pack one right
05:06 - so you have turned on the packing here
05:09 - so you have means you can say that you
05:12 - have turned off the padding now compiler
05:14 - will not
05:15 - insert these extra bytes
05:18 - so how much memory would be allocated
05:19 - now total for one for this and four for
05:22 - this five bytes only right you can run
05:24 - this program and you can see so this is
05:26 - what structure packing that's it
05:29 - there is nothing much about structure
05:30 - packing now if i write here one more
05:33 - care c
05:36 - now i'm not writing this
05:38 - hash pragma pack one then how much
05:41 - memory would be allocated automatically
05:42 - compile we will do padding
05:44 - so what
05:45 - four for this one for this three padded
05:48 - bytes then four for integer then four
05:50 - for this character four four four
05:53 - twelve bytes and with this pack one how
05:55 - many bytes should be there one four and
05:58 - one
05:59 - only six bytes right yeah you can save
06:02 - it means you can save a lot of memory
06:05 - with this packing
06:06 - but
06:07 - hair at a cost of performance
06:10 - right more cpu cycles would be required
06:12 - to access the to read the memory to read
06:15 - the data from the memory right so
06:16 - performance would be little bit less
06:18 - so what we can see this hash fragma path
06:22 - will tell or you can say will instruct
06:23 - the compiler
06:25 - to pack these structure members
06:27 - with some you know with a particular
06:29 - alignment
06:31 - right particular alignment here means if
06:33 - you want to give here not one two or
06:36 - four means you are providing your
06:37 - alignment right how many bytes
06:40 - can be padded up to how many bytes right
06:43 - but here we are not
06:45 - writing anything we are just writing one
06:47 - means only one byte no padding would be
06:49 - there right one byte alignment wouldn't
06:51 - be there byte by byte we can access the
06:53 - memory right the processor can access
06:55 - the memory
06:56 - fine
06:58 - so now let's see practically what output
07:00 - you will get if you use this
07:02 - hash pragma directive in your program
07:04 - okay now so this is the program we are
07:06 - taking this the example we are taking
07:07 - simple example i'm going to take without
07:09 - packing we'll see first of all what
07:10 - output you will get like the size of
07:12 - this s only two members carry in p
07:15 - so what output you should get
07:18 - see if i run this and you will see what
07:20 - output you are getting here is eight
07:22 - bytes because of the padding three bytes
07:24 - are padded bytes in care
07:27 - right
07:28 - now
07:29 - if i write here one more care care c
07:33 - suppose
07:34 - right
07:35 - and let me just save it and
07:37 - see let me just run this what output you
07:39 - will get padding would be done
07:41 - automatically by the compiler you cannot
07:42 - do anything with this
07:44 - means you it's not like that you are in
07:46 - so you are inserting the extra bytes
07:48 - just to align the memory no
07:50 - you can stop this you can turn off this
07:52 - feature using uh packing so see now here
07:55 - you will get 12 bytes right
07:57 - one cat
07:58 - then three parrot bites then four four
08:00 - in teaser then one bite for character
08:01 - then three padded bites because word
08:03 - sizes
08:04 - we are assuming four bite right
08:07 - here in 64 bit it's eight bite
08:12 - so here 8 bytes right the size
08:15 - but i do not want to waste these
08:18 - bytes means extra bytes so what you can
08:20 - do i just want to
08:22 - pack the structure members right
08:24 - so what we can do here
08:27 - we can use this pragma directive and
08:29 - here simply you can write down
08:31 - pack
08:32 - and sorry
08:34 - pack
08:35 - 1
08:37 - that's it
08:39 - now in this case what output you should
08:41 - get so see in this case what output you
08:43 - will get here no padding would be done
08:46 - because we have turned off the feature
08:47 - we have turned on the packing feature
08:49 - here so only six bytes
08:51 - one
08:52 - for care a then four for integer then
08:54 - one for care b that is six bytes right
08:58 - so this is what structure packing and
09:00 - padding is in the uh you know in
09:02 - structures in c
09:04 - and if you shift this gear
09:09 - above this end
09:10 - then what output you will get i am not
09:12 - using this pack
09:14 - right we are just commenting out this
09:16 - hashtag pack one so by default padding
09:19 - would be done so in this case what
09:21 - output you'll get previous case 12 bytes
09:24 - in this case what output you will get
09:25 - only eight bytes so here you can save
09:28 - the memory
09:29 - just by you know writing these members
09:31 - in a smart way
09:33 - you can you should write down these
09:35 - members in increasing order of their
09:37 - size or you can also write in decreasing
09:39 - out of their size right so care is one
09:42 - carries one it will take four bytes so
09:43 - we are writing it in increasing order
09:46 - fine so i guess that's it you can now
09:48 - try out different different you know
09:50 - examples and different different
09:51 - programs on this padding and packing
09:53 - fine
09:54 - so now one assignment for you is rather
09:56 - than this care i'm writing here double
10:00 - double c
10:01 - so in this case
10:03 - we are not writing this packing
10:06 - how many bytes would be allocated what
10:08 - would be the size of this s with the
10:10 - structure padding you are supposed to
10:11 - tell me
10:12 - and if you use this hashtag martin how
10:14 - many bytes would be allocated to this s
10:17 - we are using
10:18 - this this care intent double here right
10:22 - so now that's it for this video in the
10:23 - next video we'll see some problems on
10:25 - structures and also in the next video
10:26 - bye take care
10:33 - you