00:00 - so in the series of learning Python
00:01 - programming language in the previous
00:03 - video we have seen tuples in Python the
00:05 - next topic is sets in Python right
00:09 - sets are also used to store multiple
00:11 - items in a single variable name but how
00:13 - they these are different from tuples and
00:15 - list that also we'll be discussing in
00:17 - this video right
00:18 - what are sets how you can use these
00:20 - things in your program when to use sets
00:23 - over tuples and list right how this is
00:25 - different from list and tuples and
00:27 - basically you know different different
00:29 - methods in build function you can use on
00:31 - sets some operations like Union
00:33 - intersection different symmetric
00:34 - difference update many things are there
00:37 - like I hope you have read sets in
00:40 - mathematics these are almost same so
00:43 - these thing these all functions methods
00:45 - and everything we'll be discussing in
00:46 - this video with the help of program
00:48 - practically also I will show you on my
00:50 - laptop right now
00:52 - see sets are same used to store multiple
00:55 - items in a single variable name so how
00:57 - you will you can say Define a set
01:01 - same first thing you will take a name
01:03 - like I am taking set one right and now
01:07 - in curly brackets you will write down
01:10 - those multiple items whatever you want
01:12 - to store it may be integer the item set
01:15 - item can be of any data type integer
01:17 - string float Boolean right or it can be
01:21 - mixed data type right like in the same
01:23 - set I am storing first integer value
01:26 - then I'm taking like a Boolean value
01:28 - then I'm taking
01:31 - string value then I'm taking like maybe
01:33 - float value something like this
01:36 - so this is also possible or maybe if you
01:39 - are taking like 1 to 10 minus 10 0 53
01:45 - the data this is what all the data data
01:49 - items are of integer type all the data
01:51 - Rhymes may be of string type it's okay
01:54 - everything is allowed right but one
01:57 - thing duplicate items are not allowed in
01:59 - set it's like we cannot write down here
02:02 - again one because one and one these are
02:04 - duplicates
02:05 - once you will print this set if you
02:09 - print this set to then only one time one
02:12 - would be printed right so duplicate
02:14 - items are not allowed in set
02:16 - but in tuples hand list duplicate items
02:19 - are allowed next thing
02:21 - these set items are unordered they are
02:24 - not having any defined order like in
02:26 - tuples and list why I am saying this
02:30 - if I ever said something like this
02:32 - this is my set set two and I'm printing
02:35 - this set so maybe you will get this
02:38 - answer
02:39 - to 10 0 minus 10 53 and 1.
02:44 - it is not a guarantee that you will get
02:47 - the same sequence of the order of these
02:50 - items or the same order no you can get
02:52 - this order you can get items in this
02:54 - order maybe you will
02:57 - if you will run this same thing you will
02:59 - get this order like 1 2 minus 10 0 53 10
03:04 - something like this different order
03:06 - so that is why I am saying
03:08 - these items are unordered they are not
03:10 - having any defined order okay but in
03:14 - tuples and list items are ordered and
03:16 - this is what I'm these I am telling you
03:18 - the difference you can note down these
03:19 - things right next thing indexing is not
03:22 - allowed on set
03:24 - because set items are unordered indexing
03:27 - is one using index you can access these
03:29 - items like zero one two three four five
03:31 - so if I write
03:34 - like set two and index is two so maybe
03:39 - you are thinking it will give you this
03:40 - 10.
03:42 - but no indexing is not allowed why so
03:44 - because these are unordered they are not
03:46 - having any they are not having any
03:47 - defined order
03:49 - maybe you print
03:51 - this time this 10 is at first Index this
03:54 - time this 10 is at last index
03:56 - so that is why that is why you cannot
03:58 - exist
03:59 - set items using indexing because these
04:03 - are unordered I hope now you know how
04:05 - why indexing is not possible here right
04:07 - but in less than Tuple indexing is
04:09 - possible
04:10 - next thing is what these set items are
04:13 - unchangeable means you cannot change
04:16 - these items like if I want to change
04:19 - suppose at index 2 this is suppose I am
04:22 - saying this is 10 I'm assuming this is
04:24 - 10 I want to store here 30. this is not
04:27 - allowed why so because using indexing
04:29 - obviously subscripting is not possible
04:31 - here this indexing is not possible
04:33 - it knows it is not necessary that at
04:36 - second index we have 10 right so these
04:40 - items cannot be changed but
04:43 - you can change the complete set means
04:46 - you can add
04:47 - items
04:49 - after creating the set you can remove
04:51 - items for those we are having methods
04:55 - add and remove many methods that I'll
04:57 - show you practically right
04:59 - next property is what okay this I have
05:02 - already told you like this is also
05:04 - possible a set of having mixed airtime
05:07 - items or you can say heterogeneous
05:08 - elements are also allowed inside right
05:10 - now and see if I write like in this set
05:13 - if I'm writing here
05:15 - one
05:17 - then what do you think
05:20 - there is any duplicate item yes because
05:22 - here this is one this is true two means
05:24 - in mathematics true means right one only
05:27 - zero means false so it will while you
05:31 - will print this it will either show this
05:34 - one or this true only because this is
05:36 - also duplicator event zero or we are
05:38 - having zero and false these are also
05:40 - duplicate values right now let me show
05:42 - you this thing practically and some
05:44 - methods also like add remove this card
05:47 - clear these methods object right okay so
05:50 - let's create a new project new file and
05:53 - we are discussing sets
05:55 - underscore python
05:58 - Dot py
05:59 - right so
06:01 - let me just make a set and we are taking
06:04 - value something like this like 10 56 89
06:08 - 90 one is taking like Jenny and we are
06:12 - taking true
06:15 - okay
06:17 - let's print this
06:20 - simply
06:22 - set one
06:24 - okay this is how
06:25 - you can print a set so see First
06:28 - Property I'm telling you these items are
06:31 - unordered I have told you now let's run
06:33 - this end
06:34 - C
06:35 - the order of the items first we got true
06:38 - but we have written through in the last
06:40 - true the 1956 and 19 Jenny right so the
06:44 - set items are unordered they are not
06:46 - having any defined order duplicates are
06:48 - not allowed if I write here again 10 if
06:50 - I write here 1
06:52 - and again run this see you will get 10
06:55 - one time only and you are getting true
06:57 - you are not getting one here this one
07:00 - entry will duplicate ten ten duplicate
07:02 - so one time only it will show duplicate
07:04 - items are not allowed indexing not
07:06 - allowed if I want to X is like
07:08 - second item from set one and let's run
07:11 - this you will get an error like set
07:13 - object is not subscriptable subscribing
07:17 - this is what subscript so this is not
07:19 - allowed here this will give a type error
07:21 - indexing is not allowed
07:22 - slicing is not not allowed here like in
07:25 - Tuple and list
07:26 - all right if you want to create an empty
07:29 - set like
07:30 - set two so what you will do generally
07:33 - like that's it maybe you are thinking
07:36 - this will be an empty set
07:38 - so let's
07:40 - if you want to check the type of this
07:42 - how you will check data type of this
07:45 - we have type function type set one
07:48 - right
07:49 - and for set to also I'll be checking
07:52 - type
07:53 - right type set to
07:57 - fine
07:58 - so let's run this and see what output
08:00 - you are getting see the for first you
08:02 - are getting set okay the class is set
08:03 - for this one but for second set it is
08:06 - not a set it is a dictionary you have
08:09 - created a dictionary empty dictionary
08:12 - because
08:14 - this is not allowed in set if you want
08:16 - to create an empty set then you have to
08:18 - use set function like this
08:21 - there are two method to define a set
08:24 - with these curly bracket and with this
08:26 - method also set and in this bracket you
08:29 - can write down the values so two methods
08:31 - are there so to create an empty set you
08:33 - have to use this method only with curly
08:36 - braces in Python you cannot create an
08:38 - empty set that would be a dictionary now
08:40 - let's run this again
08:41 - this time C both are set and set the
08:45 - type of set 1 is set to a set
08:47 - if you want to change
08:50 - a value here then
08:52 - you can do
08:55 - like this let me just comment this out
09:03 - and uh
09:05 - I want to change like in set one at
09:08 - second index I want it should be 89 No
09:12 - it should be 99 at second index let's
09:14 - run this
09:16 - it will give an error take a set object
09:19 - does not support item assignment
09:21 - so you cannot change these set items are
09:24 - unchangeable but this complete set you
09:26 - can modify we have some method if you
09:28 - want to add a new value in this set so
09:31 - how you can add we have a method
09:34 - let me just
09:36 - show you we have a method
09:38 - set
09:40 - just the name of the set set one we have
09:42 - dot add method
09:45 - so here you can simply print like 99 I
09:47 - want to add 99 and do this and after
09:49 - that I want to print set one Cena
09:54 - be here 99 here right so like this you
09:57 - can add one item
10:00 - one item at a time right if you want to
10:03 - find out length of the set then also we
10:05 - have a method
10:06 - we have Len method and bracket you just
10:09 - pass the name of the set
10:11 - okay after adding 99 let's see now the
10:14 - length would be 7 how is the seven
10:18 - maybe you are thinking one two three
10:20 - four five six seven eight items you are
10:23 - having one item we have added so it
10:24 - should be ten but no because these two
10:27 - are duplicates
10:29 - so we are having only one two three four
10:32 - five six items right and one we have
10:34 - added
10:35 - seven so it will give seven so length
10:38 - you can find out like this right if you
10:40 - want to remove an item simply rather
10:42 - than add you can write down here
10:45 - remove and if you want to remove this
10:47 - one like uh 10 I want to remove so see
10:51 - what you will get here true 90 Jenny 56
10:54 - and 89 right
10:56 - so maybe you are thinking 10 is 2 times
10:59 - so one we have removed so one should be
11:01 - Teno but duplicates are not allowed in
11:02 - set it will take 10 only one time only
11:04 - so n and it has removed that 10 so this
11:09 - you are getting right
11:11 - but the thing is if you will not if I am
11:14 - writing here like 67 68 but 68 is not
11:18 - there in the set so what it will give
11:21 - it will throw a key L exception or you
11:24 - can see an error right key error is 68
11:27 - because 68 is not present here right
11:30 - second thing we can use one more method
11:32 - this card
11:34 - so
11:35 - set one same dot we have a method
11:39 - discard if you want to discard here
11:41 - again 10
11:43 - same it will remove the item from this
11:45 - C10 is not there but if in discard I am
11:49 - writing 68 so it will not give any
11:53 - exception it will just print the
11:55 - original value of this set
11:58 - right this is how this this card is
12:00 - different from remove if this key this
12:03 - element is not present in the set it
12:05 - will do nothing right it will not show
12:07 - any error or any exception right if you
12:10 - want to clear
12:11 - all the element you can have you have a
12:15 - clear method set one dot clear now we do
12:19 - not have anything we have an empty set
12:21 - right
12:22 - we have a pop method also pop will
12:26 - remove any random item from this
12:29 - set and it will return that item also
12:32 - right so let me just run this
12:35 - so this time
12:37 - it has removed this true or one you can
12:40 - say let's remove these duplicate items
12:43 - and now let's run this
12:46 - C
12:47 - this time it has removed what any random
12:51 - item means we have 90 56 89
12:55 - 10 it has removed Jenny from the set
12:58 - right and it will return that item also
13:01 - right
13:02 - so you can
13:05 - if you want to print you can print also
13:10 - directly we can print that item
13:12 - Whatever item this pop has removed let's
13:15 - run this again
13:16 - see this time it has removed through and
13:19 - this is the set so pop will remove any
13:21 - random item from the list right
13:24 - and if nothing is left like you have
13:26 - popped every item like I have run this
13:30 - pop one two three four five six time and
13:34 - seventh time if you run pop then it will
13:35 - raise an exception right
13:40 - because now set is empty so pop cannot
13:43 - remove any item from the set
13:45 - and see one more thing why adding here
13:48 - items like set one dot add
13:52 - because it will not return anything so
13:54 - we cannot print anything
13:56 - while we are
13:58 - writing this ad so here we can add
14:02 - any immutable item that cannot be
14:05 - changed like tuples are immutable so if
14:08 - you want to add a complete Tuple so in
14:10 - add we can write down
14:13 - something like this
14:16 - 13 comma
14:18 - 14 comma 15.
14:20 - this complete Tuple I want to add
14:23 - in this set so let's run this
14:25 - C
14:26 - 13 comma 14 comma 15 this is completable
14:29 - this has been added here right but if
14:31 - you want to add a list
14:36 - because list aren't these square
14:39 - brackets
14:40 - what do you think it will add the list
14:42 - here or not
14:44 - no why so big is less star
14:47 - mutable we can change the list we can
14:51 - change the data of the list we can add
14:53 - remove right
14:55 - so this will give an error see
14:58 - type error and hashable type list
15:01 - because set use what data structure to
15:03 - store these item hash table right if you
15:06 - want to know more about hashing then you
15:08 - can watch out the video that I have
15:10 - discussed I mean you will find in that
15:12 - data structure playlist so I'll put that
15:14 - link of that video in the side button
15:15 - you can check out how hashing works so
15:18 - it use hash table to store these items
15:22 - right
15:23 - so list is not allowed so any immutable
15:26 - data item you can add here
15:28 - like Tuple for any like string or hint
15:31 - you can add or Boolean item you can add
15:33 - float value you can add but you cannot
15:35 - add any mutable data items right so
15:38 - these are some
15:39 - methods here but we are left with now
15:42 - some operations on set like Union
15:44 - intersection difference
15:47 - those we'll be discussing in next video
15:50 - so I hope you got basics of set in the
15:52 - next video the next part of this video
15:53 - will see operate what operation you can
15:56 - perform on set so I'll show you the next
15:58 - video till then bye take care