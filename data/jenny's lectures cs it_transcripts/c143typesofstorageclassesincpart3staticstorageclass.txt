00:00 - so in the series of learning C
00:01 - programming we are discussing types of
00:03 - storage class in C we have discussed two
00:05 - types of storage Class Auto and register
00:08 - now we are left with two uh another type
00:10 - that is static and extern so in this
00:12 - video we'll talk about static storage
00:14 - class and out of these four storage
00:16 - class this is very important most of the
00:20 - time you get question from static
00:22 - storage class in know many competitive
00:25 - exam in Gate or net or in other
00:27 - competitive exams right so this is most
00:31 - important stories class and I have
00:33 - already posted some questions on my
00:35 - community post previous year gate
00:37 - questions that we're using static
00:39 - keyword and many of you answer those
00:41 - questions wrong because you don't know
00:43 - what is the meaning of meaning of the
00:44 - static keyword the scope the lifetime
00:47 - everything right but don't worry
00:49 - everything about the static keyword or
00:51 - the static storage class we are going to
00:53 - discuss in this video right every single
00:56 - detail with the help of a program also
00:57 - I'll show you now let's see what is a
01:00 - static storage class so I hope you
01:02 - remember what a storage class tells
01:04 - about a variable four things default
01:06 - value location where that variable would
01:08 - be stored scope and lifetime of the
01:10 - variable right and how to declare a
01:12 - variable with storage class first you
01:14 - will write storage class then the data
01:16 - type and then the name of the variable
01:19 - so you will write first static then data
01:22 - type suppose I'm writing int you can
01:23 - take float care string up to you it's
01:26 - not like that always I take in so you
01:29 - have to take in only you can take float
01:31 - also care also anything you can take
01:33 - right like you can take static care and
01:36 - CH you can take
01:40 - static uh
01:42 - string you can take
01:44 - static
01:47 - float X anything you can take or in you
01:50 - can take right now by default default
01:54 - value of these variables would be for
01:56 - float it would be 0 point
02:00 - this thing for this null for this null
02:03 - for for INT like for static int
02:08 - y Zer so default value would be zero
02:12 - right not garbage value zero fine if you
02:15 - write down static here next is location
02:18 - where these variable would be stored in
02:19 - Ram note in register in
02:22 - Ram not in CPU registor main memory
02:27 - third thing scope and lifetime these two
02:29 - things are very important right maybe
02:32 - till now you are confused like scope and
02:34 - lifetime is same there is no difference
02:36 - right like scope is within the block
02:38 - lifetime is also till the end of that
02:40 - block so both are same but but but you
02:43 - will get yeah scope and lifetime is
02:45 - different thing and you will get this
02:47 - thing in this video right so here for
02:51 - for here for this static storage class
02:55 - scope is within the block
03:00 - block scope right or the method scope in
03:04 - which you are you know uh in the
03:06 - function or in the main function you are
03:07 - declaring that variable within that
03:09 - block only local de declaration is
03:11 - allowed as well as Global declaration is
03:13 - also allowed outside of main you can
03:14 - also write down like static in y but for
03:18 - in Auto and register you cannot write
03:19 - down this thing Global declaration is
03:21 - not allowed only local declaration is
03:23 - allowed now lifetime is
03:27 - what till the end of the program
03:34 - scope is within the block only but
03:35 - lifetime is till the end of the program
03:37 - throughout the program this variable
03:40 - would be alive and it would be dead
03:42 - after the execution of the program after
03:44 - the exit from the program
03:46 - only now I hope it is not confusing if
03:49 - it is then let me just take one example
03:51 - and let me just clear this thing example
03:54 - of this thing is very important because
03:55 - see out of these four storage class the
03:57 - static is the most important storage
03:59 - class
04:01 - almost
04:02 - 95% you know questions you will get from
04:06 - this class only in every competitive
04:09 - exam for from static storage class so
04:12 - this is very important so please
04:15 - concentrate here and just you know focus
04:17 - on the example the program I'm I'm you
04:20 - know taking here I'm going to
04:22 - demonstrate the program one by one no
04:24 - line by line in this program just taking
04:27 - a simple know function display right
04:30 - this is the definition of this function
04:32 - here here I'm calling this function so
04:35 - before that let me just write down the
04:37 - Prototype or you can say the Declaration
04:38 - of this function void display and that's
04:41 - it right two times I'm calling this
04:43 - function in main fun in Main and this is
04:47 - definition here I'm just I'm just taking
04:49 - a variable X static inex right so in
04:52 - main memory one variable would be X so
04:55 - default value of this is I'm not
04:57 - initializing it so default value would
04:58 - be value would be Z not 6 it's zero next
05:02 - line is x +al
05:03 - 10 it means same as xal x + 10 I'm just
05:08 - adding 10 so you can write down this
05:11 - thing either you know uh xal x + 10 or
05:14 - you can write down something like this X
05:16 - Plus equal to 10 so now x value
05:19 - becomes
05:21 - 10 right in print f x is equal to so now
05:25 - what value would be printed x equal 10
05:28 - right
05:30 - once you know uh when we execute the
05:34 - program from the main function it will
05:35 - be executed then display means we are
05:37 - calling the function so control would be
05:39 - here and after that X would be zero then
05:41 - 10 would be added and then x equal to 10
05:44 - would be displayed now the next line is
05:46 - this thing so exit from this exit from
05:48 - this uh function now back to here where
05:52 - we were calling the function right so
05:54 - xal 10 would be displayed right next
05:57 - again we are calling display so again
05:59 - control would go to
06:01 - here right next first line is static int
06:06 - X so this time this time x would not be
06:11 - initialized again right maybe you will
06:14 - say static inex again this line is there
06:16 - so default value of x is zero so it
06:18 - would be initialized with zero again
06:20 - then 10 would be added and 10 would be
06:22 - printed x equal to 10
06:24 - no this thing you need to take care it
06:27 - would retain its previous value
06:30 - this statement would be skipped it would
06:34 - not be
06:34 - executed why so because as and I have
06:38 - told you the lifetime of this variable
06:40 - is throughout the
06:42 - program lifetime means this x is still
06:45 - alive still alive it's not dead after
06:48 - execution After exiting from this
06:51 - function X is still alive because as I
06:55 - have shown you in the previous videos
06:57 - like how the memory layout of this
06:58 - program and application is some memory
07:01 - segment is for code or you can say
07:03 - instruction this is for Global and
07:06 - static
07:07 - variables here we have static and Heap
07:11 - this is the memory layout of the
07:13 - application right so this x would be
07:16 - here here in this memory section a
07:19 - separate memory section is for Global
07:21 - and static variable right so it would
07:23 - retain its previous value it would not
07:25 - be initialized again with zero right or
07:29 - for better understanding if I initialize
07:31 - it with x equal to Z something like this
07:34 - or if you don't write this thing that
07:35 - this also means same thing default value
07:37 - zero so it would not be initialized
07:39 - again this statement would be skipped
07:43 - because lifetime is throughout the
07:44 - program so this x is still alive it's
07:47 - not dead so this line means you can say
07:49 - it's like a it's like
07:51 - birth birth of this x again but if x is
07:55 - alive still alive then why it will take
07:59 - again birth right after it will dead
08:02 - then only it will take birth now yes or
08:05 - no I hope you are able to relate this
08:07 - thing so this would be skipped this
08:10 - line now next line is X same 10 would be
08:14 - added so now this time value becomes 20
08:17 - so this time x would be 20 that would be
08:19 - printed for this
08:21 - display right why so this thing is
08:25 - because the lifetime is throughout the
08:27 - program but but the scope is with within
08:30 - this function only in this block we are
08:32 - declaring this x so the scope is within
08:34 - within this uh uh block within this
08:38 - function right now what does that mean
08:40 - if I write here print
08:43 - f x equal to percentage D and X if I
08:47 - want to access this x value in main
08:49 - function so it will give error
08:51 - Undeclared X because we are declaring
08:53 - this X in this block in this function so
08:56 - the scope is within this x you can
08:58 - access this x within this this uh
09:00 - function within this block if you write
09:02 - X here it would be Undeclared for the
09:05 - compiler so it will give error that's
09:08 - why I was saying scope is within the
09:10 - block only you cannot access this
09:12 - outside of the block directly but
09:14 - lifetime is throughout the program till
09:17 - the end of the program it will retain
09:19 - its previous value right this is what
09:22 - the
09:23 - lifetime I hope you are getting but see
09:26 - there is a separate section for This
09:27 - Global and static and it will hold the
09:30 - memory throughout the program so better
09:32 - to you know uh know minimize the use of
09:36 - global and static variable if it is
09:38 - necessary to use then only use Global
09:40 - and static variable if not necessary
09:42 - then avoid using Global and static
09:44 - variable because they are holding the
09:45 - memory throughout the
09:47 - program but if rather than static if I
09:50 - don't write anything here it will be
09:52 - considered as
09:54 - Auto at this point of time what is the
09:56 - output of this program I'm not using
09:58 - this there x equal to
10:03 - 0 same x = x + 10 so it would be 10 so x
10:07 - value would be 10 printed then again for
10:10 - this display again control would be here
10:12 - and this time this X is not static this
10:15 - is auto so it would be again initialized
10:18 - because after this block the lifetime is
10:21 - finished you can say life this life of
10:23 - this x is no more this is dead so again
10:25 - it will take birth so in X is equal to Z
10:28 - so it will will be zero again so again +
10:31 - 10 so + 10 and this time
10:35 - 10 so for this both value for this 10 10
10:39 - would be printed but if you write here
10:40 - static one time 10 would be printed and
10:44 - next time 20 would be
10:46 - printed this point is very important
10:49 - that it is going to retain its previous
10:53 - value right that's why this is tricky
10:56 - question that's why almost in every
10:58 - competive exam out of these four stories
11:01 - class they you know give question for on
11:04 - this static stories class because you
11:06 - miss this
11:08 - point what students do again they will
11:10 - initialize this value again it will call
11:12 - again they will initialize the value but
11:15 - it will retain its value right only one
11:17 - time the static variable would be
11:19 - initialized until the end of the program
11:21 - it will retain its value right I hope
11:24 - now you got this program so let me just
11:27 - know show the output you're going a
11:29 - practical of this thing so let me just
11:31 - create a new
11:35 - file static do
11:42 - c and uh this same we are taking a
11:46 - display
11:47 - function this is just a declaration
11:52 - and in
11:55 - main I'm calling display
11:59 - two
12:01 - times right
12:04 - and this would be the definition of this
12:09 - function we taking static int X is equal
12:13 - to
12:15 - 10 and x + = to 10
12:23 - sorry and just we are printing the x
12:27 - value right
12:32 - so see rather than next first of all let
12:34 - me just remove this and we are not
12:36 - initializing this thing so by default it
12:38 - will take zero it should take zero we'll
12:41 - check it is taking zero or not let me
12:43 - just run this simple program and show
12:45 - you the output here it would be zero
12:48 - first of all right then 10 would be
12:50 - added and x equal to 10 would be printed
12:52 - in the first function calling in second
12:54 - function calling it would retain its
12:56 - previous value that is 10 then 10 again
12:58 - would be added and value becomes 20 so x
13:00 - equal to 10 x equal to 20 right so this
13:03 - is what static is now if you want to
13:06 - access this x
13:09 - here print F and x x is equal to
13:14 - percentage D and I want to access X in
13:17 - main
13:19 - function right so what it will give it
13:22 - will give error see Undeclared
13:25 - X here here in this it is Undeclared
13:29 - because the scope is within this block
13:31 - only within this block within this
13:33 - display function only within this
13:35 - function only the scope is within this
13:37 - you cannot access this X in main you
13:39 - cannot write down print FX but yeah the
13:41 - lifetime is throughout the program the
13:43 - value would be same value would remain
13:45 - it would remain its previous value
13:46 - lifetime would be same right sorry
13:49 - lifetime would be till the end of the
13:50 - program so I hope now the difference
13:51 - between scope and lifetime is clear to
13:53 - you these both are different thing not
13:55 - same thing right and if I take here
14:00 - int okay this is fine let me just
14:03 - comment comment this out and if I take
14:07 - here int y one more variable and just
14:12 - int Y is equal to 10 and I'm taking y ++
14:16 - 4 just say Yus
14:18 - minus and just
14:23 - print Y is equal to
14:29 - okay double quotes
14:32 - and comma
14:35 - y so what y value would be printed let's
14:39 - check this out see x value would be 10
14:42 - and 20 y value would be first time it's
14:44 - 9 next time Al also 9 because y value is
14:47 - 10 Yus minus it becomes 9 9 would be
14:50 - printed in next function call Y would
14:53 - again be initialized with 10 y- minus
14:56 - becomes 9 and 9 would be printed because
14:58 - Y is what by default it's Auto variable
15:00 - so it would again be initialized again
15:02 - it would be initialized but static would
15:04 - not be initialized again right so I hope
15:07 - now the static is clear to you guys now
15:10 - here also you can also take like St a i
15:13 - static and let's say care
15:16 - CH that is also fine now this is global
15:20 - so this thing you can access in main
15:22 - function or in any function so in
15:24 - display just I'm
15:26 - writing sln and and CH is equal to
15:31 - percentage C and
15:34 - C sorry it's
15:36 - ch the name of the variable is so we are
15:39 - not initializing it so it will not print
15:43 - anything CS is equal to nothing it is
15:45 - going to print same you can take here
15:47 - float or string or anything you can take
15:49 - right so I'll give you an assignment
15:51 - also we just have to answer that
15:53 - question in comment box right so this is
15:56 - assignment for you guys this is the
15:57 - program you have to to tell the output
15:59 - of this program the same function
16:01 - display we are calling this function I'm
16:03 - just I've just taken a for Loop here 0
16:05 - to three display I'm calling and this is
16:07 - the body of this display this is the
16:09 - definition two variable I'm taking x and
16:11 - y x++ y ++ and then uh we are printing
16:15 - just X and Y so you have to tell me in
16:17 - comment comment box what is the output
16:19 - of this program I hope the everything
16:21 - about static storage class or static
16:22 - variable is clear to you right in the
16:24 - next we'll see uh that external stories
16:27 - class so now see the next video till
16:28 - then bye-bye take care