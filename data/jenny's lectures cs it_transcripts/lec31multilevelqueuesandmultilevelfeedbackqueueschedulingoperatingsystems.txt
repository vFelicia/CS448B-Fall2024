00:00 - fine now see in the actual scenario in
00:03 - your laptop there are many types of
00:05 - processes are there some foreground
00:08 - processes are there some background
00:09 - processes are there right or you can say
00:12 - some processes are that system processes
00:14 - are there like uh interrupt when
00:17 - interrupt comes what happens all the
00:19 - processes all the other processes will
00:21 - be on hold and what CPU will do CPU will
00:24 - first
00:25 - execute what that interrupts if you
00:28 - first handle what the interrupt process
00:30 - right so that kind of process is known
00:32 - as system process
00:34 - so system processes basically you know
00:37 - that that are used to run system
00:39 - programs
00:40 - so that are system processes are of
00:43 - highest priority process some processes
00:46 - are what batch processes are there some
00:48 - processes are interactive processes are
00:50 - there interactive means when you are
00:52 - interacting with an application or you
00:54 - can say when you are working on a word
00:56 - processor or you can say a Microsoft
00:58 - Word or when you are writing a program
00:59 - something like this you are you are
01:02 - continuously working with that
01:03 - application right through the console or
01:06 - something like this right or maybe
01:08 - through command
01:09 - and batch processes are what they are
01:12 - not interactive process these processes
01:14 - are basically running in the background
01:15 - you just submit the processes go and
01:18 - come after some time and collect the
01:20 - result of that processes right so see
01:23 - actually we have different type of
01:25 - processes in our computer which are
01:27 - running right and each process is having
01:31 - its own scheduling needs then why we are
01:34 - going to put all the processes in one
01:36 - ready queue only why we are applying the
01:38 - same scheduling on the all the processes
01:42 - right
01:43 - why can't we divide this ready queue
01:46 - into separate queues so this is the main
01:48 - idea of multi-level Q see as the name
01:51 - suggests to multi-level cues right I'm
01:54 - just taking this example suppose we are
01:56 - having three cues and one queue is
01:59 - assigned to system processes one queue
02:01 - is assigned for interactive processes
02:03 - and one queue is assigned for batch
02:05 - processes right if some system process
02:07 - comes then we are going to put that
02:09 - process into this queue if interactive
02:11 - process comes then in this queue and if
02:13 - batch process comes then in this queue
02:15 - right we have multiple levels of queues
02:18 - that is why it is known as multi-level
02:20 - cues
02:21 - right
02:22 - and
02:23 - now plus more thing
02:25 - now see each queue is having its own
02:28 - scheduling algorithm it's not like that
02:31 - we are going to apply same scheduling
02:33 - algorithm on all the processes like we
02:35 - have discussed in previous hit
02:37 - scheduling algorithms see suppose if if
02:40 - this queue is having system processes
02:41 - maybe maybe this this Q is following
02:44 - round robin scheduling algorithm maybe
02:47 - this queue is following short test job
02:50 - first scheduling algorithm and if batch
02:52 - processes are there then maybe this is
02:55 - following first come first so scheduling
02:57 - algorithm right see this this or this
03:01 - this type of shelling algorithm the
03:03 - queues are following it all depends on
03:05 - the implementer who is going to
03:07 - implement this scenario this scheduling
03:10 - algorithm
03:11 - fine maybe he can Implement that on
03:14 - system processes first come first so on
03:16 - interactive processes are our undone
03:19 - batch processes may be around Robin
03:20 - something like this we can't say it all
03:23 - depends on the implementer who is going
03:25 - to implement this fine
03:27 - now first point is every queue is having
03:29 - its own scheduling algorithm in this
03:31 - case plus second point is as you can see
03:34 - since system processes are having
03:36 - highest priority right
03:40 - and these are having lowest priority
03:47 - fine so these cues how many queues are
03:51 - there it depends on the implementer role
03:53 - so here here may be uh more than three
03:56 - queues can be there four five queues can
03:58 - be there right here I am going to take
03:59 - an example in which I am having only
04:01 - three cues I have divided the process
04:03 - into three different types only right
04:06 - now see this each queue is having its
04:09 - own scheduling algorithm plus plus
04:12 - three queues these queues are also
04:15 - following some scheduling algorithm that
04:17 - is a fixed priority scheduling algorithm
04:20 - in which this queue is having highest
04:23 - priority this queue is having the second
04:24 - highest end this this type of this as we
04:27 - as we come down then the priority of the
04:30 - processes will be
04:31 - you know decreasing so this is having
04:33 - lowest priority so now third important
04:36 - point about this multi-level Hue
04:38 - scheduling is what
04:39 - if a process is assigned to a particular
04:42 - queue then during its execution till its
04:46 - termination that process cannot change
04:49 - its queue cannot migrate to another
04:51 - queue it means in another verse you can
04:54 - say
04:55 - when a process comes then that process
04:57 - will be permanently assigned to a
05:00 - particular queue right if system process
05:03 - comes and that has been assigned to this
05:05 - queue suppose a process P1 comes that
05:07 - has been assigned to this queue
05:09 - then till the termination till the
05:12 - termination this P1 cannot migrate to
05:14 - this Q or this queue and if a process is
05:17 - in this like suppose if P3 is in this
05:19 - batch process in this queue so this P3
05:22 - cannot change its Q it cannot go here or
05:25 - here till its termination it will be
05:27 - permanently assigned to that queue
05:30 - fine
05:31 - and fourth important point about this
05:33 - multi-level Q scheduling is what see let
05:35 - us suppose we in this in this system
05:37 - processes we are having P1 P2 P3 P4 here
05:42 - we have suppose P5 P6 p7
05:45 - and here we have p8 P9
05:48 - right so see no process no process from
05:54 - this this interactive process can
05:56 - execute
05:58 - unless unless this queue this this queue
06:02 - the having system processes becomes
06:04 - empty see after the completion of all
06:08 - these processes
06:09 - any process from this queue can be
06:13 - executed can be assigned to CPU
06:15 - right and same
06:18 - after completion of these processes and
06:21 - these processes from the this q and from
06:24 - this queue after completion of all these
06:26 - processes if this is empathy and this is
06:28 - empathy only then the process from this
06:31 - queue can be executed
06:34 - right
06:36 - Plus
06:37 - fifth important point is if suppose this
06:40 - is empathy and this is empathy all this
06:42 - process has been executed all the
06:43 - process from interactive has been
06:45 - executed from this queue right and CPUs
06:47 - has been assigned to p8
06:49 - and p8 is running and during this during
06:53 - this if any process in this interactive
06:56 - process comes suppose P10 comes in
06:59 - interactive process in this queue then
07:01 - CPU would be preempted from here from p8
07:06 - and CPU would be assigned to P10
07:09 - right so this is you can say a
07:11 - preemptive type of scheduling algorithm
07:14 - right
07:15 - so now
07:18 - see the if suppose the scenario is
07:21 - something like this this queue is having
07:22 - multiple processes the screw is also
07:24 - having multiple processes right and all
07:27 - has been executed now as soon as the
07:29 - time comes that CPU will be assigned to
07:31 - this process paid
07:33 - a process comes in in this queue then
07:36 - CPU would be assigned to this process
07:38 - only
07:39 - right
07:40 - again a process comes in system
07:42 - processes then CPU would be assigned to
07:43 - this process only against a process come
07:46 - in interactive process then CPU would be
07:47 - assigned to this process only
07:49 - and what about this process what about
07:51 - p8
07:52 - this process will have to wait for a
07:55 - long amount of time or you can say
07:56 - indefinite blocking would be therefore
07:59 - the processes which are in this queue
08:01 - batch processes right so this is known
08:04 - as starvation
08:08 - I have already discussed what is
08:10 - starvation problem in the previous
08:11 - videos you can check out that video
08:13 - right so the multi-level Q scheduling
08:16 - algorithm suffers a disadvantage that is
08:19 - starvation problem
08:21 - and why I have already discussed now to
08:25 - avoid this starvation problem
08:27 - what we can do we can do aging
08:32 - now what is aging that also I have
08:35 - already discussed when we were
08:36 - discussing that priority scheduling you
08:38 - can check out that video so what we can
08:40 - do to avoid this starvation problem see
08:42 - let us suppose this p8 is waiting for a
08:45 - long amount of time still waiting
08:46 - waiting and waiting and processes are
08:48 - coming in here and here and CPU is CPU
08:51 - is executing to CP is executing these
08:53 - processes only right so what we can do
08:57 - what with that waiting process we can we
09:00 - can promote this process to
09:02 - this queue
09:04 - so you can say that we have increased
09:07 - the priority of this process and this is
09:09 - known as what aging increasing the
09:12 - priority of the process after some
09:13 - particular amount of time priority of
09:15 - waiting processes right and still maybe
09:19 - maybe still this processes are now at
09:21 - here
09:22 - but many processes are coming in this Q
09:25 - system processes again coming coming and
09:27 - CPU would be assigned to those processes
09:29 - only now same the speed will be waiting
09:32 - will keep on waiting waiting and waiting
09:34 - now after some threshold value we can
09:36 - promote this pa2
09:38 - this queue
09:40 - right and ultimately the processes in
09:44 - this quiz of highest priority so
09:46 - ultimately this process would be
09:48 - executed after some amount of time there
09:51 - is no starvation problem there is no
09:52 - indefinite blocking problem
09:54 - but in multi-level queue
09:57 - we cannot migrate these processes I have
10:00 - already told you once a process has been
10:01 - assigned to a particular queue then tell
10:04 - the termination of that process that
10:06 - would be in that queue only we assign
10:09 - permanently a process to a particular
10:11 - queue so this migration can be done in
10:14 - multi-level feedback you scheduling that
10:16 - is why to avoid this problem next
10:18 - scheduling algorithm comes that is
10:20 - multi-level feedback queue scheduling
10:21 - algorithm
10:23 - so what you can say in multi-level
10:25 - feedback you scheduling the processes
10:28 - from a queue of lower priority can be
10:32 - promoted to a queue which is of higher
10:35 - priority
10:37 - fine now see it's not like that only the
10:40 - lower priority processes can be promoted
10:41 - to higher priority processes the
10:43 - processes from higher priority queue can
10:45 - also be demoted to the processes to the
10:48 - queue which is of lower priority this is
10:51 - also a case in multi-level feedback you
10:53 - scheduling fine now what is this case
10:56 - see let us suppose I am going to take
10:57 - three cues fine and here in this I have
11:01 - implemented RR with round with time
11:04 - Quantum 5 here round robin scheduling
11:07 - with time Quantum 10 and and third Q I
11:09 - have implemented first come first so
11:11 - this is suppose the highest priority
11:14 - queue this is lowest priority
11:16 - and let us suppose one process comes P1
11:19 - and P1 is having worse time 15.
11:23 - right now P1 is of highest priority
11:26 - suppose now P1 would entered into this
11:28 - queue but in this in this queue only the
11:33 - processes can be run for five units of
11:35 - time
11:37 - fine and after completion of five unit
11:40 - those processes would be demoted to here
11:44 - this next queue
11:47 - right so P5 is having both time 15 but
11:50 - here it can be executed for five minutes
11:53 - of time so remaining is 10 so P1 would
11:56 - be demoted to here in this queue
11:59 - right and it will complete its remaining
12:02 - is 10 now and time Quantum is 10 so it
12:05 - will complete its termination here and
12:08 - will be terminated from this queue
12:12 - right and suppose one process come P two
12:15 - that is of having 20 burst time so that
12:18 - process would execute for five minutes
12:19 - of time here then it would be demoted to
12:21 - this process P2
12:23 - remaining is 15 for 10 unit of time only
12:27 - it can execute in this queue
12:29 - and remaining is five so again it would
12:32 - be demoted to here so here we got P2 and
12:34 - here finally it will complete its
12:36 - termination
12:38 - right so like this the higher priority
12:41 - processes can be demoted to the lower
12:43 - priority queue and the process is from
12:45 - lower priority queue can be promoted to
12:47 - the processes which are of higher
12:49 - priority so see the implementation of
12:53 - this multi-level feedback you scheduling
12:54 - is very tough and the algorithm depends
12:57 - on which factors many factors like how
13:00 - many queues could be there
13:02 - and when to when to promote a process
13:05 - after how many time when to demote a
13:08 - process which queue is having which
13:10 - scheduling algorithm fine
13:13 - so it all depends on the implementer who
13:17 - is going to implement this algorithm
13:19 - I am just taking a case where I have
13:22 - taken three cues this is having round
13:24 - robin scheduling this is also having
13:26 - round robin this is having first come
13:28 - first so maybe someone has implemented
13:30 - this is having priority queue this is
13:31 - having round robin
13:32 - something like this maybe someone has
13:34 - implemented five cues all queues are
13:37 - having round drop in scheduling
13:38 - algorithm with different time quantum
13:41 - right so it depends on
13:43 - the implementer only so this is all
13:45 - about multi-level queues and multi-level
13:47 - feedback you should learn algorithm so
13:49 - I'll see you in the next video till then
13:50 - bye take care