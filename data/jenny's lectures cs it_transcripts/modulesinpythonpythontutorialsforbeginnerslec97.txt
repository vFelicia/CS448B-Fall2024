00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:04 - path programming language in the
00:05 - previous video we have seen one project
00:06 - we have worked on a project that was a
00:08 - quiz game right so now in the next video
00:12 - in this video actually we'll see One
00:14 - More Concept that is modules what are
00:17 - modules in Python and basically why do
00:20 - you need this concept why modules
00:23 - right the benefits or advantages of
00:25 - using modules for modularity Concept in
00:28 - your program right and then types of
00:30 - modules and then how to use modules and
00:33 - how will you use the inbuilt modules how
00:36 - to create your own module this thing we
00:38 - will see with the help of program right
00:41 - okay now first of all uh actually why we
00:45 - need modules that we will see the answer
00:47 - of this question the need of modules or
00:49 - you can say what are the benefits of
00:51 - using modularity concept or modules
00:53 - right so if you have gone through the
00:55 - previous video the quiz game then uh
00:59 - there was one file and in that file only
01:01 - we are having the database I mean the
01:04 - question Bank as well as the option and
01:08 - then a code right let me just show you
01:12 - first that project okay see this was a
01:14 - project for our quiz game we have
01:17 - question bank and then we have the
01:18 - answer of this question here and then we
01:21 - have options ABCD for each question we
01:23 - have only five questions we have taken
01:25 - only five questions and the code is also
01:27 - in this file only in one file we have
01:30 - everything our database obviously this
01:32 - is what kind of it's a database for us
01:34 - right so data as well as the main coding
01:37 - right so if I want to add more questions
01:40 - if I just want the in my quiz there
01:42 - should be 50 question
01:44 - so the question question Bank it should
01:46 - be 50 questions there then option also
01:48 - there should be 50 list of having ABCD
01:50 - options for everything
01:52 - right so the program or this program
01:55 - would be very lengthy right and it would
01:57 - not be so much readable because in the
02:00 - same I have database and then here after
02:03 - that I am having the main code so the
02:05 - better option is what what we can do
02:07 - we just
02:09 - take this database from here
02:11 - we just create a new file that is quiz
02:14 - underscore database Dot py and this is
02:18 - our file this file is having a this data
02:21 - right so this database now if you want
02:24 - to use this database in our main file
02:26 - then what you need to do is we just have
02:28 - to import how to you have to import
02:31 - different modules so just use import
02:33 - keyword and the name of that module
02:35 - that's it quiz underscore database right
02:39 - quiz underscore
02:40 - database that's it now this database we
02:43 - can use in this program so I think that
02:45 - is more readable now more manageable
02:47 - right so now this separated this file is
02:50 - what it just a module
02:53 - so in Python every file acts as a module
02:56 - so what we can say what is the model the
02:58 - definition of module it's just a file
03:01 - having or containing some python code
03:03 - you can say like some statements
03:06 - variables or definition of functions or
03:08 - classes
03:10 - anything it can have right so that is
03:13 - simply a module that's it
03:15 - right now if two two you know uh people
03:21 - are working on the same project so this
03:22 - like me and my friends so I can give
03:24 - this file to my friend question Bank
03:26 - file this database file I can just say I
03:28 - want 50 question or 100 question in this
03:30 - database so he or she is going to update
03:33 - this file only and right and in main
03:35 - file there is no need to update anything
03:40 - this main file will work as it is so
03:43 - there should be no change in the in main
03:45 - file
03:46 - right so this is how if you are divided
03:48 - your project into different files
03:50 - multiple you know more than one people
03:53 - can work on that project
03:55 - like then right now in one file in
03:57 - database my friend is working and in
03:59 - main file I am working right if I have
04:01 - only one file main.py and everything is
04:04 - within that file so
04:06 - only one person at a time can work on
04:08 - that file right not two separate person
04:11 - or more than one person
04:13 - okay
04:14 - so this is what concept of modules so
04:17 - now first let's discuss why we need
04:19 - modules this concept so as you have seen
04:22 - after dividing our project into two
04:24 - separate files like one is for database
04:26 - and one is our main file right
04:28 - that was easy to manage your program or
04:31 - our project although we have divided our
04:34 - project into two files only because that
04:37 - was not so much big project or we are
04:39 - having a small program only that was not
04:40 - so much large right but yeah after
04:44 - dividing into two files that was I think
04:47 - more manageable right more reliable so
04:50 - that is what what first reason to use
04:52 - modularity concept or to use modules in
04:55 - python or we can take a real life
04:57 - example suppose see we have our Almira
05:00 - or we have a
05:02 - wardrobe
05:03 - and I'm having like maybe uh multiple
05:07 - you can say shelf in my cupboard so I
05:11 - have like t-shirt tops jeans and
05:13 - everything so I'm putting everything I
05:16 - just fold my t-shirt
05:18 - right and here is suppose I have this
05:21 - one
05:23 - this shell so I'm just putting my
05:27 - t-shirt here there my jeans my pajamas
05:29 - my tops and everything in just one pie
05:33 - right so if I want to pick that one top
05:36 - which is here near the bottom then if I
05:39 - pull this out from here then everything
05:41 - will be messy again
05:43 - right so better idea is what just
05:47 - separate out like my here I'll put my
05:50 - only tops and this I'll put my jeans my
05:53 - pajamas and like this
05:55 - so now it would be easy to manage my
05:59 - clothes it would be easy
06:01 - to put the clothes to take the clothes
06:03 - from the almirah and all right I hope
06:06 - you are going to you know you are able
06:08 - to relate this example right same same
06:11 - thing if your program like gets bigger
06:14 - many lines of code then rather than
06:17 - putting all the lines or everything in a
06:19 - single file because that would be not
06:22 - easy to manage that program right we
06:24 - just split the program into separate
06:26 - files
06:28 - right and that would be very easy after
06:31 - that to manage those files because
06:34 - whenever you want to use any file then I
06:37 - can import that file right how we are
06:40 - going to import that also I will show
06:41 - you using import keyword that is very
06:44 - simple in Python right same like if I
06:46 - want to take my t-shirt from here and I
06:48 - want to put here so I just take my
06:50 - t-shirt here and I can put here it's
06:52 - like just importing
06:54 - by importing the modules or importing
06:57 - something from any other file right so
07:00 - first thing
07:01 - this for easy maintenance of the program
07:04 - right
07:05 - and okay now next next reason is why do
07:09 - you need modules let's take one more
07:12 - real life example I hope you are you are
07:15 - able to relate this example also see I
07:18 - personally love that roasted cumin power
07:22 - I put that powder in buttermilk or curd
07:26 - or in if I have write that then also I
07:28 - just sprinkle that powder on that right
07:30 - there and some
07:32 - snacks also like Chaat or anything then
07:34 - also mix that powder
07:37 - you know in that chat also right
07:40 - so what is one process
07:43 - suppose I have a buttermilk today I am
07:46 - going to drink buttermilk right so what
07:49 - I'll do to make that powder I'll just
07:51 - take cumin seeds I'll just roast those
07:54 - cumin seeds in a pan on medium flame
07:56 - then I'll just you know make the powder
07:59 - I'll just grind those seeds and that the
08:02 - powder and then I'll sprinkle that
08:04 - powder in my buttermilk on the next day
08:06 - I'm I'm this is good
08:10 - I'm going to put I just want to you know
08:13 - use those powder in this curd also same
08:16 - process I'm going to repeat
08:18 - take a pan cumin take cumin seeds then
08:20 - I'll just roast those seeds and grind
08:23 - and then the powder I'll use then I have
08:26 - next layer I'm having right now for that
08:29 - also I have to do same process next day
08:31 - suppose I am having some snacks
08:34 - these kind of things and there also I
08:36 - want to put those powder cube in roasted
08:38 - cumin powder so the same process I'll
08:40 - repeat right so this roasted cumin
08:43 - powder
08:45 - I am using frequently right so rather
08:49 - than
08:50 - repeating the process of making this
08:52 - powder again and again on each day what
08:55 - I'll do on one day only I'll take just
08:57 - one cup of cumin seeds and I'll make
08:59 - powder and I'll just put that powder in
09:01 - a container
09:03 - now this is my container so if I want to
09:06 - use in curd milk or anything I just take
09:09 - this container take some powder and use
09:11 - that rather than repeating the same
09:13 - process of making this powder
09:16 - right so I think that is very useful for
09:20 - me
09:21 - if I do this process
09:23 - you know if I you can say make the
09:26 - powder one day and just put that in a
09:28 - container that is easy for me to use
09:30 - that again and again
09:31 - right same thing so same in programming
09:34 - like if some functions are very handy or
09:37 - some functions are you know those are
09:39 - frequently used functions we use those
09:41 - functions in many programs or in many
09:43 - projects right so rather than writing
09:46 - the definition of those functions again
09:48 - and again in each program like for each
09:51 - project
09:52 - what we can do we just put those
09:55 - functions in a separate module right the
09:58 - definition of those functions in a
10:00 - separate module
10:01 - and in whenever you want to use like in
10:05 - my project I want to use those functions
10:06 - so I just import that module my friend
10:09 - also want to use those functions so my
10:11 - friend will also import that module only
10:13 - rather than writing the definition of
10:15 - the function again
10:17 - it is time saving as well right as well
10:21 - as it is increasing the code reusability
10:25 - okay
10:26 - so I guess now you are able to relate
10:30 - these real life example with the need of
10:33 - modules in programming I guess so if not
10:36 - you can just let me know in comment
10:37 - section I'll just try to improve my
10:39 - quality of examples real life examples
10:41 - right okay now I guess it is clear to
10:45 - you guys why we need modules right first
10:48 - it will increase the code reusability
10:50 - obviously if the time would be saved
10:52 - time saving next the program or the
10:55 - project would be more manageable or
10:57 - easily manageable or maintain you can we
11:01 - can easily maintain that project if that
11:03 - is dividing to separate files right or
11:05 - you can say it would be definitely more
11:07 - readable more understandable right so
11:10 - these are you can say some benefits of
11:12 - using module so you can say this is what
11:14 - in need of modules now we'll see types
11:17 - of modules there are two types of module
11:19 - built in as well as you can create your
11:21 - own module so built-in modules like math
11:25 - random and many modules I'll show you
11:27 - those built-in modules also and we can
11:29 - create an our own module also this thing
11:31 - we will see with the help of program
11:33 - right so let's do some practical okay so
11:36 - let's create a new file here in this
11:39 - project only and for example I am just
11:43 - going to give it my module Dot py
11:47 - any name you can give I've told you like
11:49 - every python file acts as a module so
11:52 - module obviously having dot extension.py
11:55 - okay now in this we can have many thing
11:58 - like maybe definition of some functions
12:00 - classes some simple statements some
12:03 - simple variable anything right so in
12:05 - this module right now in this module I'm
12:08 - not creating my own module
12:10 - let's let's have like uh not my module
12:13 - let's have a new file and I'm just
12:17 - naming it module underscore lecture dot
12:19 - py so first there are two types of
12:21 - module built in and obviously user
12:23 - defined modules so first we will see how
12:26 - to use built-in modules these are
12:28 - already defined right
12:31 - now
12:32 - if you want to check out what are the
12:34 - built-in modules then we have a function
12:36 - we have held and there's some argument
12:38 - you need to pass so I'm just passing
12:42 - modules
12:45 - and I just want to print
12:48 - the what are the different modules I
12:50 - have
12:52 - that's it and this thing you need to
12:54 - write down the help function and bracket
12:56 - in as an argument modules let's just run
12:59 - this
13:04 - and see
13:05 - we are having these number of built-in
13:08 - modules so I guess some modules are see
13:12 - we have I guess a random module total
13:15 - module and we have used math module
13:18 - random module these module we have used
13:19 - right so if you want to check out
13:22 - if in math module what we have on any
13:24 - module what we have then we can check
13:26 - out like
13:29 - um just want to check out in random
13:30 - module what we are having so let's run
13:32 - this see these functions we are we have
13:36 - in this
13:40 - these functions some function we have
13:42 - discussed right random brand and these
13:45 - functions we have okay now suppose if
13:48 - you want to check like in math what I'm
13:50 - having in math module I am having
13:53 - the data
13:54 - via value of e value of pi I mean
13:58 - right so how to import this module in
14:02 - your file you just have to use
14:07 - import keyword and the name of the
14:10 - module math
14:12 - that's it
14:14 - now this has given you the access to use
14:18 - whatever the data or the functions in
14:21 - math module you can use right but it's
14:24 - not like that it has incorporated or
14:26 - imported all the functions and data no
14:28 - it had just incorporated or inserted the
14:32 - name of the module math to use those
14:35 - functions and those data you have to use
14:37 - the name of the module first like if you
14:40 - want to print
14:42 - the value of that variable what we have
14:45 - seen e one variable e that variable so
14:48 - you have to use first the module math
14:51 - dot C we have e Pi INF n a n and this we
14:56 - can use so I just want to print value of
14:58 - E
14:59 - math dot let's run this and see this is
15:02 - the value
15:03 - now you can access everything right
15:05 - so this is how you can import built-in
15:08 - module now we are going to Creator your
15:11 - our own module right
15:13 - so I have my module dot py so here I am
15:16 - going to you know I'm going to take
15:19 - first a variable suppose a is equal to
15:21 - 10 and then I am having a definition of
15:25 - some function maybe like like area of
15:28 - square and just to need to pass one side
15:32 - so one argument like I'm taking the
15:34 - variable inside and it is just returning
15:37 - and the area of sphere is what
15:40 - I think the side Square so power of 2.
15:45 - then I am having one more
15:48 - function maybe suppose calculator
15:51 - and I'll just pass here to argument
15:55 - X and Y and Tool just print addition
15:57 - subtraction multiplication and division
16:00 - in this definition of this function I am
16:02 - having this addition subtraction
16:04 - multiplication and division right and
16:07 - only one function this I am having so
16:09 - that's it I'm having only two functions
16:11 - and one variable
16:12 - okay
16:13 - so now
16:15 - in my module in another file I can
16:18 - import this module so how to import you
16:22 - just have to use the import keyword and
16:24 - my name of my module is my module my
16:27 - underscore module right now I can use
16:29 - anything this function this function and
16:31 - this variable everything from this
16:33 - module so suppose I want to print this
16:37 - what we can say value of a that variable
16:40 - so first you have to use the module name
16:43 - dot a
16:44 - right and let's run this and see it will
16:47 - print 10.
16:49 - right
16:50 - this is one way to import module another
16:53 - way is
16:55 - import module
16:57 - Alias name suppose your module name is a
16:59 - big name so everywhere and here suppose
17:02 - you want to call that function Square so
17:05 - my module Dot
17:07 - square area of square and just pass one
17:10 - side and it is returning something so
17:13 - you have to write here
17:15 - print okay then again I am going to
17:19 - let's run this first
17:21 - see 10 value of a and then 16 is area of
17:24 - square right
17:26 - now if my module name is very long so
17:30 - every time you have to use module name
17:32 - then don't then whatever functional
17:34 - variable you need to use so a small name
17:37 - I want to give here so as an alias you
17:40 - can import that thing so the second way
17:42 - is import that module name as small name
17:45 - I can give like M1
17:49 - now rather than my module now my module
17:52 - name in my file is M so now it will be
17:54 - varied if you run this see
17:57 - name my module is not defined in line
17:59 - number two here my module dot a now it
18:03 - is M only
18:05 - it's not my module because I have
18:08 - renamed this it's m now
18:10 - okay let's run this see now 10 16. so
18:14 - this is second way
18:15 - Third Way is specifically I don't want
18:18 - to import everything from my module
18:20 - suppose I have 10 or 15 functions but I
18:23 - just import one function here I have
18:25 - only two function but I just want to
18:27 - import or use only calculator function
18:29 - so rather than importing everything
18:33 - only one specific function I want to
18:35 - import so therefore for that you have to
18:37 - use from keyword so from the name of the
18:41 - module
18:43 - this is my underscore module
18:46 - and what you would need to import
18:49 - import
18:50 - only calculator
18:55 - so now you cannot use here a or area of
19:00 - square because we have just imported
19:01 - calculator
19:03 - so let's just
19:06 - comment out these thing and
19:10 - call the function calculator and just
19:12 - pass 3 comma
19:15 - 3 comma 2.
19:18 - these two values
19:20 - let's send this
19:22 - addition subtraction multiplication and
19:24 - division
19:26 - right so if you specifically import
19:29 - calculator no need to write down here
19:31 - the module name don't simply you can use
19:35 - the function name calculator
19:38 - or this calculator this also you can
19:41 - give a separate number you can say Alias
19:43 - name like calculator as C
19:46 - so now rather than calculated you need
19:48 - to use C because now calculator is not
19:51 - defined because I have renamed this as C
19:53 - so you just need to pass here the name
19:57 - function name is C like this
20:00 - so when you use this aliasing concept if
20:03 - the module name or the function name is
20:05 - very long so you can use aliasing
20:07 - concept rather than writing the same
20:08 - name again and again the long name right
20:13 - but one problem with this thing is what
20:16 - if you want to import a specific thing
20:19 - then the problem is
20:21 - suppose I want to and next thing next
20:26 - thing is what I want to input as well as
20:28 - the variable name a so just write down
20:31 - comma a
20:32 - so now it will work fine
20:36 - you have to Simply print a and C A let's
20:40 - run this
20:41 - okay name c is not defined because we
20:43 - are using not aliasing now we are using
20:46 - here what
20:48 - the complete name calculator right see
20:51 - 10 and then definitely this calculator
20:54 - function right if I want to import
20:57 - area of square as well
20:59 - or rather than writing here separate
21:02 - separate name of the function and
21:04 - variable name what we can do simply we
21:06 - can put here as asterisk so now
21:10 - specifically it will import everything a
21:12 - whatever is there a this function this
21:16 - function all the three things
21:19 - now it will not give any error if you
21:20 - bring to this thing also
21:23 - area of square over here I just want to
21:25 - print something like this
21:27 - from another module is this so let's run
21:30 - this value of a 16 is area of square and
21:34 - this is that right so this is another
21:37 - way of importing
21:39 - uh now see separately if I want to
21:43 - import separate like a
21:45 - from my module a but the problem in this
21:49 - case or in this way of importing
21:52 - specific thing is what
21:54 - if in this file also I am having one
21:57 - more variable a or suppose a comma B and
22:00 - equal to I am having 4 comma 5. right
22:03 - and then I'm having
22:06 - sum sum equal to a plus b and just I
22:10 - want to print
22:12 - sum
22:13 - see sum is 9
22:16 - 4 plus 5 is 9 value of a from another
22:19 - module is 4. but from another module
22:22 - value of phase 10.
22:24 - it is importing it is just printing this
22:27 - a from this module only a
22:29 - but I want to print I want to access
22:32 - this value
22:33 - so in this case
22:35 - it's compulsory to write down here
22:38 - specifically exclusively said this a is
22:41 - from another model from my module so the
22:44 - name of that module my module dot a like
22:47 - this
22:48 - my underscore module
22:53 - dot a but still it will give error
22:56 - because
22:57 - because we have used this way of
22:59 - importing this a see let's run this and
23:02 - I'll show you the error name my module
23:03 - is not defined here my module wrote In
23:05 - Line number five
23:06 - here
23:08 - my module is not defined because we have
23:10 - just imported this a not the complete my
23:13 - module
23:14 - so the better idea is what I suggest to
23:18 - use is import
23:20 - and the name of your model my module and
23:23 - whatever you want to use now any
23:24 - function or variable or anything
23:27 - exclusively you can just tell I'm using
23:30 - this thing from my module so my module
23:33 - dot a now run this
23:35 - see sum is 9 but value if a from another
23:37 - module is 10. now it is printing
23:39 - everything I mean everything is fine now
23:42 - it is printing the correct value of a
23:44 - right
23:46 - so you got now the way of importing the
23:49 - modules how to create your own module
23:51 - and what can be the problem if to if you
23:53 - use that from keyword that way from
23:56 - module name and import the specific
23:59 - variable or function right and I hope
24:02 - you got
24:03 - the reason or the benefits of using
24:06 - modules right like this I have taken
24:09 - this simple example so if there are many
24:12 - functions 10 to 15 functions
24:15 - so I can just write down those functions
24:17 - here or I can just make two or three
24:19 - separate files right one file is
24:22 - everything about square area of square
24:25 - parameter of square like this right then
24:27 - rectangle area of rectangle parameter of
24:29 - rectangle and like this area of circle
24:32 - perimeter of circle and like this right
24:35 - so two words we separate file for
24:37 - individual object and then in one mail
24:39 - file you can import what file you want
24:42 - to import according to your requirement
24:44 - according to your choice
24:46 - okay so it's not like that you can just
24:49 - have two files only like this you can
24:52 - have three four five as many files as
24:53 - you want
24:54 - and in modules we can have now only
24:57 - variables and definition of functions
24:59 - but we can have classes as well right so
25:02 - that thing we will see I guess
25:04 - uh maybe next video or maybe next to
25:07 - next video when we will discuss this
25:10 - quiz game with the help of oop approach
25:13 - when we will create that quiz game with
25:15 - the help of oop approach okay
25:17 - so I hope you got I guess everything
25:19 - about modules in Python right most
25:22 - probably next video we'll see packages
25:23 - in Python so now I'll see in the next
25:25 - tutorial bye bye take care