00:00 - in this video we are going to talk about
00:01 - binary tree its properties and its types
00:05 - right in the previous video we have
00:07 - discussed what is a tree and you can see
00:10 - that introductory part of trees right
00:13 - some basic terminologies which are used
00:15 - in pre as well as how to uh represent a
00:18 - tree the logical representation of a
00:20 - tree right the basics we have discussed
00:23 - now we will discuss the binary tree see
00:25 - now first of all what is a binary tree
00:28 - see it is a tree in which each node can
00:31 - have
00:32 - maximum two children or you can say at
00:35 - most two children right
00:38 - each node see as the name suggests
00:40 - binary binary means what two i mean zero
00:43 - and one so you can say in which a tree
00:46 - in which each node can have at most two
00:49 - children at most two means each node can
00:52 - have either zero
00:54 - one
00:55 - or two children but cannot have more
00:57 - than two children right that is a binary
01:00 - tree now how to represent a binary tree
01:02 - see
01:02 - if i draw something like this
01:07 - is this a binary tree yes
01:09 - see these are nodes this thing we have
01:11 - discussed already now this is having
01:14 - this node is having two children fine
01:17 - and these are having zero child so that
01:19 - is also fine this is a binary tree now
01:22 - is this a binary tree yes this is also a
01:25 - binary tree this is having only one node
01:27 - that is root node having no children
01:29 - that is possible we can have zero child
01:31 - a node can have zero child right so this
01:34 - is also a binary tree now see
01:37 - what about this one
01:41 - is this a binary tree yes this is also a
01:44 - binary tree
01:45 - see here each node is having this node
01:47 - is having one child one child and one
01:49 - child this is having zero child that is
01:51 - also possible
01:52 - now see
01:54 - is this a binary tree
01:57 - this is not a binary tree because see
01:58 - here in this case this node is having
02:00 - three children that is not possible we
02:02 - can have at most two children so this is
02:05 - not a binary tree
02:06 - right
02:07 - all these are binded trees this is also
02:10 - a binary tree
02:13 - right
02:13 - now if i draw something like this this
02:16 - this this end
02:18 - this this is also a binary tree the only
02:22 - condition is what each node must have at
02:25 - most
02:26 - two children
02:27 - if this condition satisfies that that is
02:29 - a binary tree now how we are going to
02:31 - represent this binary tree in memory
02:33 - that thing we have already discussed in
02:34 - the previous video see here this is the
02:36 - node each node is having what
02:38 - information plus
02:40 - may or may contain links that is not
02:42 - compulsory that each node should contain
02:45 - link to another node maybe
02:47 - if node does not have any child then it
02:49 - will not contain any link right so how
02:52 - you are going to represent this binary
02:54 - tree see this is a node first node is
02:56 - something like this
02:57 - three parts would be there this is what
03:00 - left child this is what right child you
03:03 - can say so here we have the data part
03:05 - you can say here i am storing one
03:07 - this is what left this is what
03:10 - linked to the right child so here we
03:13 - have one node
03:15 - this node is suppose having data two now
03:17 - see this node is having only left child
03:20 - so this is having only this link this
03:22 - link is null
03:24 - right
03:25 - so now here this
03:27 - is also suppose containing three values
03:30 - 1 two and three here i have four five
03:33 - and six because these node are having
03:35 - some information stored there three is
03:37 - not having any child node so there is no
03:40 - this link and this link would be null
03:42 - this is how we are going to represent
03:43 - this one
03:44 - here in this side we have
03:46 - 4
03:47 - 4 is having both left and right child so
03:49 - this is left and this would be right
03:52 - right
03:53 - here we can have 5 and here we have
03:56 - 5 and 6 both 5 and 6 are having no
03:59 - children so the links would be null
04:02 - right this is how we are going to
04:03 - represent the tree actually
04:05 - this is just a logical representation of
04:07 - a tree how we are going to store the
04:09 - tree in memory we are going to
04:11 - dynamically create these nodes we are
04:13 - going to set these links that thing also
04:15 - we will discuss the implementation of
04:16 - binary tree right now next thing is see
04:20 - now some properties of binary tree see
04:23 - we have discussed what is our level in
04:25 - the previous video this is not
04:28 - this is what level zero this is what
04:30 - level one this is what level two now
04:34 - at any level see at suppose i am taking
04:37 - at level one
04:38 - how many maximum nodes can be possible
04:41 - see at level 1 only 2 nodes can be
04:44 - possible maximum nodes here we cannot
04:46 - have 3 nodes because at most 2 children
04:49 - can be there
04:50 - now at level 0 the maximum node possible
04:53 - is only 1
04:55 - right
04:56 - at level two
04:58 - the maximum node possible are see the
05:00 - maximum node maximum node can be here i
05:03 - have two here also i have two and
05:06 - two children of this node so this is
05:08 - what level two at level two we can have
05:11 - four children maximum we cannot have
05:13 - five six or something like this right
05:15 - this thing i guess you are getting my
05:16 - point now suppose i am increasing one
05:19 - level at this level at third level
05:22 - the maximum number of children possible
05:25 - are
05:25 - maximum means each of this node is
05:29 - having maximum children and maximum
05:31 - children can be
05:32 - two only it means one two three four
05:34 - five six seven eight
05:36 - right so here eight can be possible here
05:40 - four maximum here two here we can have
05:42 - zero
05:43 - simply same
05:45 - if i increase one level more then here
05:47 - at this level how many maximum number of
05:49 - nodes are possible you can say each this
05:52 - this node at level three each node will
05:55 - have two children so here i have eight
05:58 - nodes so eight into two that is sixteen
06:01 - can be possible
06:02 - so at level four
06:04 - sixteen maximum node can be possible
06:07 - right now how you can write this thing
06:09 - can i write here 2 raised to the power 0
06:11 - can i write 2 raised to the power 1 2
06:13 - raise to power 2 2 raised to power 3 and
06:14 - 2 raised to power 4
06:16 - so now what you can say here at each
06:20 - level i the maximum number of node
06:23 - possible in a binary tree is 2 raise to
06:26 - power i that is one property right
06:29 - the maximum number of nodes possible at
06:31 - any level i is 2 raise to power i
06:35 - right this thing i have already shown
06:37 - you
06:38 - now next point may be
06:40 - the maximum number of nodes possible at
06:43 - height h the maximum number of nodes of
06:45 - a binary tree right at height h see
06:49 - at this level suppose i have
06:52 - three levels only now height of this
06:54 - tree is what height of the root node is
06:56 - equal to height of the tree height of
06:57 - root node is what one two and three
07:00 - go to the longest path find out the
07:02 - longest path path from the root or you
07:04 - can say from that node to the leaf node
07:06 - so now here height is three only right
07:09 - now at height three maximum number of
07:12 - nodes possible are
07:14 - see how to calculate you are you are
07:16 - supposed to
07:18 - add all these nodes means you are
07:20 - supposed to add first of all 0
07:22 - plus at this level i have 2 plus at this
07:25 - level i have 4 plus at this level i have
07:27 - 8
07:28 - it means you can say 40 number of nodes
07:31 - right maximum number of nodes fine
07:33 - now
07:34 - if i say height is only 2
07:37 - right height is 2 means i am removing
07:40 - this level means now height is 1 and 2
07:42 - height of root is two so height of tree
07:43 - is also two now if height is two maximum
07:46 - number of nodes possible are
07:47 - one two three four five six seven so how
07:50 - to calculate maximum number of nodes if
07:53 - height is h
07:55 - simply you will add all the maximum
07:58 - number of nodes at each level so you can
08:01 - say 2 raised to power 0 at this level
08:04 - 2 raised to the power 1
08:05 - plus 2 raised to the power 2 plus 2
08:07 - raised to the power 3 added till 2
08:09 - raised to power h now this is what
08:12 - simply a gp series and how to find out
08:15 - the sum you can easily google it out i
08:17 - am not going to tell you this thing so
08:19 - answer of this would be 2 raise to power
08:21 - h plus 1 minus 1
08:23 - right so maximum number of nodes of
08:26 - height h i am talking about this binary
08:28 - tree right
08:30 - so maximum number of nodes can be h plus
08:32 - 1 minus 1
08:34 - right and if i ask you the minimum
08:37 - number of nodes
08:39 - if height is h
08:40 - then
08:41 - see
08:42 - minimum number of nodes can be h plus 1
08:46 - how
08:47 - if height is
08:49 - this one 0 it means
08:51 - height is 0 means we have only one node
08:54 - right we do not have this thing we have
08:55 - only one node it means height is 0 so
08:57 - the minimum number of node is 1
09:00 - if height is 1 see
09:04 - this is height 0
09:06 - this is a tree binary tree having height
09:07 - zero minimum number of node is one now
09:11 - if height is one i am going to increase
09:13 - the height now height is one height of
09:15 - this tree is what one
09:17 - minimum number of nodes are one and two
09:19 - only minimum number of nodes i am not
09:21 - adding this node second node right now
09:25 - if you increase the height
09:27 - one more suppose i am increasing height
09:29 - one more now height is one and two
09:32 - now height is two and minimum number of
09:35 - nodes are one two and three
09:37 - if you increase one more now height is
09:40 - one two and three height is three
09:42 - minimum number of node possible are one
09:44 - two three and four
09:46 - so you can say minimum number of node
09:47 - possible are h plus one h plus one h
09:49 - plus one three plus one is four if
09:52 - height is one means this one one height
09:54 - one two two num two nodes are possible
09:56 - means h plus one minimum number of nodes
09:58 - are possible right
10:00 - next thing is
10:01 - if suppose you are given maximum node
10:03 - minimum nodes and you are supposed to
10:05 - calculate the height you can see the
10:07 - maximum height of the tree possible and
10:09 - minimum height of the tree possible then
10:12 - how you will see how you will calculate
10:13 - this thing now suppose you are given
10:16 - there can be n maximum nodes
10:19 - in the binary tree now you have to find
10:21 - out the possible height
10:23 - so maximum number of nodes are
10:26 - and
10:27 - as from this case we can say the maximum
10:29 - number of nodes can be of height h can
10:32 - be 2 raised to power h
10:34 - plus 1 minus 1 here you are supposed to
10:36 - calculate h value means higher i am
10:38 - calculating height of the tree now how
10:41 - you will calculate n plus 1 is equal to
10:43 - 2 raised to power h plus 1 i guess you
10:45 - can easily solve this thing by taking
10:47 - log on both side
10:49 - log of n plus 1 and log of see base is 2
10:53 - 2 raised to power h plus 1
10:56 - now this thing is what
10:58 - log 2 n plus 1
11:00 - log 2 base 2 is this one and this one is
11:03 - also 2. so here simply we can write h
11:05 - plus 1 right now here height you are
11:08 - supposed to calculate height is equal to
11:10 - low 2 n plus 1 minus 1
11:14 - and here we are taking the
11:16 - ceiling function
11:18 - so this can be the height
11:20 - right but this can be the minimum height
11:23 - if maximum nodes are given
11:26 - those nodes can find out using those
11:28 - nodes you can find out the minimum
11:29 - height
11:30 - if minimum number of nodes are given
11:32 - that will give you the maximum height
11:35 - right now
11:37 - suppose minimum number of nodes are
11:38 - given n
11:40 - right n
11:43 - now height is what now minimum number of
11:45 - nodes of height h we know h plus 1 can
11:48 - be there now simply calculate the height
11:50 - is equal to n minus 1
11:54 - so this can be n minus 1 can be what
11:57 - maximum height
11:58 - n minus 1 and minimum height can be this
12:01 - one log to n plus 1 minus 1. now we will
12:04 - see types of binary tree so types are
12:06 - full binary tree this is also known as
12:08 - proper or strict binding tree complete
12:11 - binary tree
12:12 - perfect binary tree degenerate tree and
12:16 - balanced tree also but balanced tree we
12:18 - will discuss when we will discuss the
12:19 - avl trees right that is also that is
12:21 - basically known as balanced tree now
12:24 - what is full or strict or proper binding
12:27 - tree see the definition is what it is a
12:30 - binary tree
12:31 - where each node contains either zero or
12:36 - two children or in another term you can
12:39 - say it is a binary tree see of course
12:42 - obviously it is a binary tree plus one
12:44 - more condition is
12:46 - it is con
12:47 - each node is containing either zero or
12:50 - two children or you can say each node
12:52 - will contain
12:54 - exactly two children
12:56 - except leaf node
12:59 - right now see what is a full uh binary
13:03 - tree now if i draw something like this
13:08 - is it a full binary tree yes because it
13:11 - is a first of all a binary tree plus
13:14 - here each node is containing either 0
13:16 - see this one is containing 0 0 and 0
13:18 - means these are leaf node right or two
13:21 - children this is containing two children
13:23 - this is having two children so this is
13:25 - what a full binary tree now see this is
13:28 - what
13:29 - is this a full binary tree no this is
13:31 - not why so because this node is having
13:34 - only one child but that is not
13:36 - possible in full boundary now see
13:39 - this is what is this a full binary tree
13:42 - yes this is a full binary tree
13:44 - right now
13:46 - see is this a full binary tree yes it is
13:49 - a full binder tree
13:52 - is this a full binding tree no
13:55 - but is this a full binary tree yes
13:58 - each node is containing either zero or
14:00 - two children or
14:02 - all the nodes are containing each node
14:04 - will contain exactly two children except
14:07 - leaf nodes except leaf nodes
14:10 - right
14:11 - now
14:12 - same the property of this full binary
14:14 - tree is what here number of leaf node
14:18 - is equal to
14:20 - number of internal nodes
14:24 - plus one
14:26 - here you can see this is a full binary
14:27 - tree now here number of leaf node count
14:30 - one two three four five and six number
14:32 - of leaf node are six
14:34 - right it should be equal to number of
14:36 - internal node plus one means here number
14:38 - of internal nodes should be five one two
14:41 - three
14:42 - four and five
14:44 - i have discussed what is leaf node what
14:45 - is internal node in the previous video
14:47 - you can check out that video if you
14:48 - don't know now what about maximum node
14:50 - and minimum node in this tree see
14:52 - maximum node is same as binary tree
14:55 - right because here also
14:57 - at this level at this level at this
14:59 - level means at every level i there can
15:02 - be two raised to power i maximum nodes
15:04 - and if height is at h then you need to
15:06 - add all the maximum number of nodes at
15:09 - each level so this is 2 raised to power
15:12 - h plus 1 minus 1 this thing we have
15:14 - already discussed right
15:16 - now what about minimum nodes
15:18 - see the minimum number of nodes height
15:20 - is 1 so the height is 0 so minimum
15:22 - number of node can be 1.
15:24 - if i am increasing height 1 this is
15:27 - height 1 so minimum number of node can
15:29 - be see this is not a full binding tree
15:31 - we need a full binary tree so here you
15:33 - need one more node so 3 can be the
15:36 - minimum number of nodes
15:38 - now if you increase height one more time
15:40 - that is now height is one and two height
15:42 - of this tree is two but this is not a
15:44 - full binary tree you need to find out
15:46 - you need to satisfy that that condition
15:48 - also each node is having either zero or
15:51 - two children so this should contain two
15:53 - children this can have zero children
15:56 - because you are calculating minimum
15:57 - number of nodes so one two three four
16:00 - five five
16:01 - right
16:02 - if height is three
16:05 - i am increasing one more height one two
16:07 - and three here also you need two nodes
16:09 - so minimum number of nodes can be
16:12 - plus two that is five plus two is c so
16:14 - now how you can write down this thing c
16:16 - two raised to power h plus one minimum
16:19 - number of nodes now how to calculate
16:20 - minimum height and maximum height see
16:22 - the maximum nodes will give you minimum
16:24 - height this one minimum height so
16:26 - minimum height would be
16:28 - same
16:29 - as previous one as binary uh tree
16:32 - and plus one hair ceiling minus 1 right
16:36 - because maximum node are same but here
16:39 - the maximum height can be the minimum
16:40 - nodes are 2 raised to power 2 into h
16:43 - plus 1 so how to calculate if minimum
16:46 - number of nodes are given n how to
16:48 - calculate height 2h plus 1
16:51 - h is equal to
16:52 - n minus 1 divided by
16:54 - 2 so here you will write n minus 1
16:56 - divided by
16:58 - 2
16:59 - now next is complete binary tree so now
17:01 - according to the definition of a
17:02 - complete binary tree see a binary tree
17:06 - is a complete binary tree if
17:08 - all the levels are completely filled all
17:11 - the levels are completely filled except
17:14 - possibly the last level
17:16 - fine plus at the last level we have one
17:20 - more condition see
17:21 - and the last level has the nodes as left
17:25 - as possible
17:27 - right we are going to fill the last
17:29 - level
17:30 - from left to right see now
17:34 - i am going to take one example
17:37 - see here
17:38 - this is the last level right and this is
17:41 - not completely filled because these
17:43 - these nodes are not having any child so
17:46 - that is fine in complete mind tree see
17:48 - we have told you i have told you except
17:50 - the possibly the last level all the
17:52 - levels are completely filled see now
17:54 - this level this level this level this is
17:56 - what completely filled right each node
17:58 - is having two child so one condition is
18:01 - true now second condition is complete
18:03 - binary is what in the last level the
18:06 - nodes should be
18:07 - as left as possible means we are going
18:10 - to fill the nodes in the last level from
18:12 - left to right you cannot leave
18:15 - these nodes
18:17 - free these spaces free and you cannot
18:20 - write here
18:21 - then child node right so
18:25 - you need to delete and if i shift here
18:28 - then this is what a complete binary tree
18:30 - now
18:32 - is this a complete binary tree no why so
18:36 - obvious see the from the the except the
18:38 - last level all the nodes are completely
18:40 - filled but second condition is what here
18:42 - the nodes should be
18:43 - as left as possible
18:45 - we have left this node blank and we have
18:48 - put children to this node that is not
18:51 - true in complete binary tree if this is
18:54 - also having two child then this is fine
18:57 - right now
18:58 - is this a complete binding tree
19:01 - yes because here the condition is not
19:04 - that each node is going to have exactly
19:07 - two children
19:08 - so at the last level you can have one
19:10 - child but that should be filled from
19:12 - left to right see
19:13 - here if you write this thing you cannot
19:16 - fill the right child first of all you
19:17 - will have to fill the left child
19:19 - right so now this is also a complete
19:22 - binding tree right and this is also a
19:25 - complete binary tree
19:27 - now see is this a complete binary tree
19:34 - no this is not because now this is the
19:36 - last level right so at the last level
19:39 - you can fill the node from left only so
19:41 - here you should feel the left child you
19:43 - cannot feel first of all the right child
19:45 - is this the complete binding tree yes
19:47 - this is a complete mandatory right
19:49 - somewhere it is also written as it is
19:51 - nearly complete binding tree fine now in
19:54 - this case also same what about maximum
19:57 - node and minimum nodes maximum node
19:59 - obviously this is a binary tree so
20:01 - maximum node are same that is
20:03 - 2 raised to power h plus 1 minus 1
20:06 - maximum node in a complete binary of
20:09 - height h right now what about the
20:11 - minimum number of nodes here the minimum
20:13 - number of nodes are 2 raised to power h
20:16 - this thing you need to find out how the
20:18 - number of minimum number of nodes are 2
20:19 - raised to power h i am not going to
20:22 - trace out this thing now minimum height
20:24 - and maximum height obviously minimum
20:25 - height would be same
20:28 - as the previous one
20:30 - because maximum nodes are same in all
20:33 - the three
20:34 - binary trees right
20:36 - now what is maximum height maximum
20:38 - height means minimum nodes will return
20:40 - you the maximum height so how you will
20:43 - calculate i am going to write down this
20:45 - thing you need to calculate this thing
20:46 - right
20:50 - so the minimum the sorry the maximum
20:52 - height in the complete minded tree is
20:54 - log n this thing you need to calculate
20:56 - how this is 2 raised to power h and how
20:57 - this is log n right so this is what a
21:00 - complete binary tree now perfect binary
21:03 - tree see a tree can be a perfect binary
21:07 - tree if
21:09 - all the internal nodes are having two
21:11 - children and
21:13 - all the levels sorry all the leaves all
21:16 - the leaf nodes are at same level
21:20 - right these two condition fine now see i
21:23 - am drawing one tree
21:26 - all the internal nodes
21:30 - should contain
21:31 - exactly two children so here
21:34 - these are leaf nodes but all the
21:36 - internal nodes are containing how many
21:38 - two children right but second condition
21:40 - is what all the leaf node all the leaves
21:42 - should be at same level but here see
21:46 - this is what level zero one two and this
21:48 - is what three so two leaf node are at
21:51 - level two two leaf node are at level
21:53 - three so this is not a perfect binder
21:55 - tree all the leaf nodes should be at
21:58 - level three
21:59 - so now
22:01 - how to do this thing
22:02 - [Music]
22:04 - now see these are leaf node and all the
22:06 - leaf node are at level three and all the
22:08 - internal nodes are having two children
22:11 - so this is now a perfect binary tree now
22:14 - see this is also a complete binder tree
22:18 - can we say it is a full binary tree yes
22:20 - it is also a full minded tree so every
22:23 - perfect binary tree can be complete
22:26 - binary tree and full
22:28 - binary tree but vice versa is not true
22:30 - see if a tree is complete by injury then
22:33 - it is not necessary that it is perfect
22:35 - binding tree if a tree is full binary
22:38 - tree then it is not necessary that it
22:39 - should be perfect binding tree
22:41 - right now see what is degenerate binary
22:45 - tree here in this case
22:48 - all the
22:49 - nodes all the internal nodes are having
22:51 - only one child that is known as
22:54 - degenerate tree so see
22:57 - this
22:57 - if you draw this thing
23:00 - here this is leaf node and one two three
23:02 - three are internal node and each
23:04 - internal node is having only one child
23:06 - so this is what a degenerate tree and
23:08 - you can say this is what a
23:10 - left skewed binary tree
23:12 - left skewed binary tree means if the
23:15 - nodes the internal node is containing
23:17 - only the left child then it is known as
23:19 - also known as left skewed binary tree
23:22 - see now this tree
23:25 - this is what this is also degenerate
23:27 - tree because each internal node is
23:29 - having only one child that is right
23:31 - child so it is also known as right
23:33 - skewed binary tree right now taking
23:37 - example of this
23:39 - is this a degenerate tree yes
23:42 - because see each internal node is having
23:44 - only
23:45 - one child this is having right child
23:47 - this is having left child right so this
23:49 - is also a
23:50 - degenerate tree we cannot say that it is
23:52 - a left or right skewed it is a mixture
23:54 - of both fine so i guess this is all
23:57 - about binary tree plus properties of
23:59 - binary tree we have discussed and types
24:01 - of binding tree right now in detail how
24:04 - to implement a binary tree that thing we
24:06 - are going to discuss in next video so
24:08 - i'll see you in the next video till then
24:09 - bye bye take care