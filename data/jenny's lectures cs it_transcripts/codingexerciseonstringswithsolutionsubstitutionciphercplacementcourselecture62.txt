00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language we are
00:05 - discussing strings in C++ in the
00:07 - previous video we have seen one coding
00:08 - exercise based on strings that was very
00:11 - simple one and in this video we'll see
00:13 - one more coding exercise that is a
00:15 - little bit difficult right because we
00:16 - are going to make a substitution Cipher
00:18 - here right we're going to encrypt a
00:20 - message and decrypt a message like we
00:22 - generally do uh when we talk uh with our
00:26 - especially friends then we uh use some
00:28 - code language or sign language so that
00:30 - no one can understand our message right
00:32 - these kind of things right so that
00:35 - that's exactly we are going to implement
00:37 - in this video with the help of what like
00:41 - obviously we are going to use strings
00:43 - here so what you are given is like uh
00:46 - you are given those alphabets letters
00:49 - from a to zed in capital letter and
00:52 - small letter and corresponding to that
00:55 - letters you are going to given a
00:58 - key right like a would be replaced here
01:02 - the keys with capital zed B would be
01:05 - replaced with capital Y like this this
01:08 - is a simple just an example the key can
01:10 - be anything right yeah Subs Sher is not
01:14 - so strong so you know hackers can heck
01:17 - this and easily Deer uh the text or
01:21 - decrypt the text right but it's just an
01:24 - example in this example we are going to
01:25 - take only letters small and capital
01:28 - letters but you you can uh make this uh
01:32 - project little bit complicated you can
01:34 - take numbers also 1 2 3 4 5 like this
01:37 - and special characters like space or
01:39 - those um apostrophe and these kind of
01:42 - things also you can take right and
01:44 - corresponding to
01:46 - those uh letters or those characters
01:49 - also we can take a key like space would
01:51 - be replaced with maybe atate one would
01:54 - be replaced with maybe zero like this
01:57 - right so I'm just starting with a simple
02:01 - example right we'll just here decrypt or
02:06 - encrypt and decrypt only letters I'm
02:08 - taking you can update it a little bit
02:11 - you can modify it a little bit right so
02:13 - you are given those alphabets and the
02:15 - key right and what should be the output
02:18 - see let me show you so output would be
02:21 - some something like this it will ask
02:22 - enter your message so suppose I'm
02:25 - entering any message like hi like
02:29 - there's a meeting at 10: a.m. tomorrow
02:31 - right
02:32 - so it will show you something like this
02:34 - like encrypted message is this okay see
02:39 - one 10 is as it is the suppos stop is as
02:42 - it is space is as it is we are just
02:44 - encrypting here at initial stage only
02:48 - alphabets right and then decrypt the
02:51 - message and see this is the decrypted
02:53 - message whatever we have sent right so
02:57 - this should be output the output right
03:00 - at simple at initial stage so I hope you
03:03 - got what is this problem statement and
03:05 - what you have to do right now what you
03:08 - are given is this thing you are given
03:11 - those alphabets you can not down this
03:13 - thing these alphabets would be replaced
03:16 - with these keys right so pause the video
03:20 - and try this out so I hope you have done
03:22 - this see this is you are given one
03:25 - spring is alphabet and here we have
03:28 - small ABCD from a to zed
03:30 - and capital A to Z Now the key is this
03:34 - small a would be rep replaced with this
03:36 - capital z z small B would be replaced
03:40 - with capital Y right this is the key in
03:43 - reverse order I'm taking like small ABCD
03:45 - are replaced with capital ABCD in
03:47 - reverse order and small Capital ABCD up
03:50 - to Z would be replaced with small ABCD
03:52 - in reverse order right key can be
03:54 - anything it's not like that you have to
03:56 - take this key only this is some simple
03:58 - example I'm taking here rather than z y
04:01 - uh X you can take like
04:03 - RP MN or these kind of thing right but
04:07 - yeah this should be replaced with some
04:10 - another character or rather than a b CD
04:12 - you can take a would be replaced with
04:14 - one B would be replaced with the two
04:16 - something like this T can be anything
04:18 - right
04:20 - okay now one thing is what what you will
04:24 - do is simple approach we can take like a
04:27 - message is suppose I'm this is the
04:29 - message
04:30 - hi jny that's it so one thing we can do
04:34 - is this H we will search we will find
04:37 - here in this alphabet in this string
04:40 - where is this H the position Capital H
04:45 - right Capital H is
04:47 - here now at that position same position
04:51 - what is the character in this key that
04:54 - you need to find and just replace this H
04:57 - with that character simple
05:00 - this thing you need to do and while
05:03 - decrypting just take that encrypted
05:05 - message what is that encrypted message
05:08 - right and same search from starting
05:13 - search for first character where is that
05:15 - character in this key in this key in
05:17 - this string right find out the position
05:20 - and at same position what is the
05:22 - character in this string
05:25 - alphabet just replace that with that
05:29 - character or that alphabet and that
05:30 - would be decrypted
05:32 - message I hope you're getting right so
05:35 - now you can pause the video and try this
05:37 - out if you haven't done this okay let's
05:39 - see let's ask from user we will take
05:42 - first like obviously I'll take a string
05:45 - message MSG or secret message right and
05:50 - this thing you can take or simply you
05:54 - can take this an empty string message
05:58 - right now
06:00 - ask from user enter your message we
06:04 - cannot take this message with the help
06:06 - of cing because we are going to take a
06:09 - complete line with space Also and
06:12 - see will not take a complete line as
06:15 - input as soon as it will see a it will
06:17 - get a space it is going to stop taking
06:19 - input so we'll take which function we
06:21 - have a get line function to take a
06:23 - complete line as an input right so get
06:26 - line and first argument of this get line
06:29 - is in from where you are taking that
06:30 - input and in which
06:33 - um the variable you are going to store
06:36 - in which string variable you're going to
06:38 - store that message so that we are having
06:40 - string message so C in and next is
06:45 - message this is get line okay three
06:48 - argument also we can uh take here like a
06:52 - special dter you can give in this get
06:55 - line like whenever you will enter if I'm
06:58 - taking a if you write here like message
07:01 - comma space t so whenever you will enter
07:05 - small T it is going to stop taking input
07:07 - right but this thing we don't want here
07:10 - we just want a complete complete line as
07:12 - soon as you will enter uh you will press
07:15 - enter or you will give a new line as an
07:18 - input it is going to stop taking input
07:20 - right now we have taken input now what
07:23 - should be the
07:26 - process so suppose message is this
07:32 - only High Jenny or suppose message is
07:36 - this let's take a simple message like a
07:38 - a b b space c c this is our message so
07:42 - first character will take a then we'll
07:45 - find the position of this a in alphabet
07:48 - right so better to take here a range
07:52 - based for Loop right that would suit
07:56 - here in this uh you know in this
07:58 - exercise so
08:00 - we'll take care C and from where from
08:06 - message so message is a a space BB space
08:08 - c c so first a would be assigned to this
08:12 - C now in C we have a so let's search
08:15 - this a small a in this alphabet so how
08:19 - to search in string we have discussed a
08:22 - function that is find it will give the
08:24 - position right the first occurrence
08:27 - where is that you that character or
08:31 - where is that particular also you can
08:33 - search a string also here but here we
08:36 - are searching only a
08:37 - character so from alphabet we are
08:39 - searching so I have
08:43 - to call this alphabet dot find this one
08:48 - and what you want to find C whatever is
08:50 - there in this C position of that so it
08:52 - will return the position right let me
08:55 - show you what the find me uh this
08:57 - meaning of this find function is see see
09:00 - this
09:01 - find this find will return it will
09:04 - search the string for the first
09:06 - occurrence of the sequence specified by
09:07 - which argument but rather than that
09:09 - string we are just searching a character
09:11 - individual character also we can search
09:14 - right and it will return the position
09:18 - right let me show you the return value
09:20 - return value the position of the first
09:22 - character of the first match right but
09:25 - if no match is found then it will return
09:28 - NP NP means uh like let me show
09:33 - you unsuccessful search it represent
09:36 - like unsuccessful
09:38 - search uh here NP this is having the
09:42 - value minus one
09:47 - right so if you use this NPS as a return
09:50 - value means it usually used to indicate
09:52 - no matth is found okay this constant is
09:55 - defined with a value of minus one which
09:58 - because and the uh that data type of
10:01 - this is size uncore T it means it is
10:04 - unsigned integral type right rather than
10:07 - int or anything we take size uncore
10:10 - T here it will return the position so
10:14 - equal
10:18 - to position and data type of this
10:20 - position is rather than taking int or
10:22 - anything let's take this only size
10:26 - underscore T it's unsigned integral type
10:30 - right so better to take this okay size d
10:33 - and
10:34 - here we have position position equal to
10:37 - alphabet do find this thing okay now we
10:44 - have got the position of this a now at
10:46 - same position what is the character what
10:49 - is the alphabet or character in this
10:52 - string key that you have to find out
10:55 - okay so first check if position if this
10:58 - position is that
11:01 - npos means no match is found in that
11:04 - case if suppose I have given here space
11:06 - so there is no match this space of this
11:09 - page space in this alphabet right so it
11:11 - will give no npos no matches found so as
11:15 - it is space would be there in encrypted
11:18 - message or if you write here one as it
11:21 - is one would be in encrypted message
11:22 - because we are not going to encrypt this
11:24 - one we are just taking this a BCD
11:28 - letters only right
11:30 - so let's put that condition if this
11:35 - position not equal
11:39 - to string npos this is how we are going
11:42 - to
11:44 - check
11:46 - right semicolon here if this position is
11:50 - not equal to this means yes there is no
11:53 - unsuccessful search we got the position
11:56 - right if you got the position then we
11:58 - search in this key at the same position
12:01 - what is the character so how to fetch
12:04 - that
12:04 - thing from key from this key this string
12:09 - key dot at and let's give whatever the
12:14 - position you have
12:17 - got so it will give a character from
12:20 - this so that character we are going to
12:23 - store in a obviously in a new variable
12:27 - so let's take a care type newcore c a
12:31 - new variable new C we got that character
12:35 - corresponding to a from the ski so let's
12:40 - put that encrypted character to that
12:44 - message encrypted message let's take uh
12:46 - obiously we have to take another
12:51 - variable encrypted
12:54 - message another string string variable
12:57 - encrypted message and
13:02 - and encrypted message plus equal
13:05 - to this new
13:10 - C
13:12 - okay but if sorry
13:17 - else if position is npos me means no
13:20 - match found so as it
13:23 - is in encrypted message we will
13:27 - append that character
13:31 - C suppose
13:33 - here we have space after a we have space
13:37 - so there's no match found here so as it
13:39 - is space would be added to to this
13:41 - encrypted message right so C would be
13:44 - added otherwise whatever the new
13:46 - character you got from Key string that
13:48 - would be added okay so after this for
13:54 - Loop let's print here the that encrypted
13:57 - message
13:59 - so you do that this thing only first
14:01 - encrypt the message let's run this and
14:04 - see enter your message so a a BB c c and
14:09 - suppose 1 2 and suppose here we are
14:12 - taking d g or any apostrophe or
14:16 - anything
14:18 - okay so encrypted messages z z y y XX
14:23 - one 2 is same apostrophe s is same this
14:26 - apostrophe is same okay so this is the
14:29 - encrypted
14:31 - message according to the given key now
14:36 - same logic this logic you have to apply
14:39 - to decrypt the message
14:41 - again so if you got this thing you can
14:43 - easily write down the code for
14:45 - decription please if you're not getting
14:48 - this pause the video again Watch the
14:51 - video dry in this code just write down
14:53 - this on your paper right with pen dryer
14:56 - and this and find out right and please
14:59 - please write down the that code for
15:02 - decryption pause the video and try this
15:04 - out right so now we will decrypt the
15:07 - message now again range based for Loop
15:10 - we have care C now we are going to take
15:14 - character by character from we have that
15:16 - encrypted message so
15:18 - from encrypted
15:21 - message right and find out the position
15:26 - of that encrypted message suppose
15:28 - encrypt message
15:30 - is for a a it's z z for BB it's y y so
15:35 - this message we have okay so first we
15:38 - have Zed in this C so find out the
15:42 - position of this Zed in
15:45 - key and corresponding to same position
15:48 - you have to find out what is the
15:50 - alphabet what is the letter in that
15:52 - string
15:53 - alphabet okay and just add that into
15:56 - another string decrypted message
15:59 - okay so first let's find out the
16:02 - position
16:03 - same we will take this uh data type that
16:06 - is size d and we are
16:11 - finding position equal
16:14 - to now
16:18 - that encrypted sorry key
16:22 - dot key do find and whatever the
16:26 - character C
16:29 - from Key we are going to find the
16:31 - position right same we will check if
16:35 - that position is not equal
16:38 - to
16:41 - npos means search is
16:44 - successful in that case corresponding to
16:48 - that
16:50 - position in alphabets in that string
16:53 - alphabet dot
16:56 - at at this position what is the letter
16:59 - in the that alphabet string right that
17:02 - character we are going to fetch
17:05 - and new C in a new C this character
17:08 - variable we will store that right and
17:11 - let's take another string that is
17:13 - decrypted
17:25 - message in decrypted message we are
17:28 - going to
17:30 - append whatever is that sorry new
17:35 - character new C whatever you have find
17:39 - out from this string alphabet
17:42 - okay
17:46 - lse if search is not successful means
17:49 - position is npos in that case as it is
17:52 - decrypted
17:55 - message plus equal to whatever that c
17:58 - what whatever that character see because
18:00 - if space is that character obviously
18:02 - that would be as it is added to deed
18:05 - message so that is
18:09 - C that's it after this for Loop we'll
18:12 - just print that decrypted
18:15 - message so I hope you got this let's run
18:17 - this and see what output you are
18:20 - getting okay you got something wrong
18:25 - here yes
18:31 - here also we have
18:34 - this let's on
18:37 - this let's take a demo thing to check a
18:40 - a b b 1 2
18:43 - 3 encrypted messages z z y y1 23 only
18:47 - and again the decrypted messages
18:50 - same okay let's run the send see again
18:54 - like um same like this is that encrypted
18:58 - message and this is again decrypted
19:00 - message right so this is the
19:03 - initial at this project is at initial
19:06 - stage we are just encrypting that uh
19:09 - letters only so you can update this you
19:11 - can take numbers also 1 2 3 4 and some
19:15 - special character also space for space
19:17 - also you can like if I update this
19:20 - alphabet in this alphabet I have one
19:22 - space Also and space would be replaced
19:24 - with like maybe at
19:26 - theate so let's run this and see what
19:28 - output you're getting now
19:31 - see a a space BB see z z and at the
19:36 - place of space we have at the rate right
19:38 - so like this you can update this
19:40 - alphabet and key according to that key
19:42 - you can provide so I hope you got this
19:45 - this was not so much tough please if
19:48 - you're if you haven't got this just
19:50 - write down this on a piece of paper and
19:52 - dry run this code right and after that
19:55 - modify this code add some numbers also
19:58 - special special characters also right
20:00 - now that's it for this video in the next
20:02 - video we'll see what are functions in
20:04 - C++ now I I'll see in the next bye take
20:07 - care