00:00 - so in the series of learning c
00:01 - programming we are discussing functions
00:03 - in scene the last video we have
00:04 - discussed function degradation in c
00:06 - everything about function declaration
00:08 - with a proper program
00:09 - in this video i'll talk about function
00:11 - definition and function call with a
00:13 - proper program and i'll show you
00:14 - practical also on my laptop as well as
00:16 - you will see some important points about
00:19 - function declaration function definition
00:20 - and function call so this video will be
00:22 - really very helpful for you guys right
00:28 - if you are looking for a great career in
00:30 - software development then you must think
00:32 - about the aspects like what's trending
00:34 - in the industry and the type of
00:36 - questions being asked in the interviews
00:38 - how to improve your course ranking
00:39 - what's the thought process behind the
00:41 - great applications like flipkart amazon
00:44 - zomato ola
00:45 - so here an academy brings you a platform
00:47 - where you can watch live shows and the
00:50 - host of these shows are seven star
00:52 - coders on code share
00:55 - companies like amazon google flipkart
00:57 - and having years of experience they'll
00:59 - be covering the content which would be
01:01 - really helpful for your career like in
01:03 - the live episodes you can ask take a
01:05 - chat about the top 20 questions being
01:08 - asked and you know the industry leaders
01:10 - about the recruitment process in the
01:12 - startups and mncs and how to apply for
01:14 - them what's the eligibility criteria
01:16 - you can also get your resume reviewed by
01:18 - the experts not only this you can also
01:21 - participate in mock interviews and you
01:23 - can learn courses on programming
01:25 - languages cloud computing blockchain and
01:26 - crypto tech aspects of digital marketing
01:28 - and data analytics and here is one more
01:31 - show where one of the india's leading dm
01:33 - experts will be coming live on weekly
01:34 - basis and teaching dm using practical
01:37 - tools and
01:38 - projects you will be taught all about
01:40 - digital marketing from level 0. so don't
01:42 - worry if you don't know anything about
01:44 - digital marketing see we all know about
01:46 - the ads which are running on the popular
01:47 - apps like instagram youtube amazon
01:49 - flipkart but have these companies target
01:52 - the correct audience and convert their
01:53 - leads to sales so in this show you will
01:56 - get live projects and interactive
01:58 - episodes so you can find out the detail
02:00 - of the show and the badge in the link
02:02 - that i'll put in the description box of
02:03 - this video and don't forget to use my
02:05 - code jkl10 to get 10 percent extra
02:07 - discount on your paid subscription
02:09 - so now let's take one example and
02:11 - discuss function definition in c the
02:14 - same example i am taking
02:15 - that we have discussed in the previous
02:17 - video so see this was the example that
02:19 - we have discussed in previous video
02:21 - right
02:22 - i am taking a function named sum
02:25 - right in main function i am calling that
02:27 - function right and i have i know asked
02:29 - you one question in the previous video
02:31 - like main is what
02:45 - in main so that is why main is user
02:47 - defined function it's not predefined
02:48 - function predefined functions are
02:50 - already defined in libraries
02:53 - like printf scanner for a string
02:55 - function you you we have used a string
02:57 - cad string compare these were defined in
02:59 - header file string dot h if you use any
03:02 - math function like square root sqrt then
03:04 - that is defined in math load action so
03:06 - you have to include that header file
03:08 - math dot h that was declared in that
03:10 - header file right and printf scan if i
03:12 - declared in stdio rotate standard input
03:14 - output clear screen gets chr declared in
03:17 - rotate
03:18 - right but main is user defined function
03:20 - so in main i am calling this function
03:22 - because control will also control will
03:24 - always first go to the main function
03:26 - whenever you run the program
03:27 - so here i am calling this function here
03:30 - now how function works when you call
03:33 - then function
03:35 - will search for the function definition
03:37 - right so here we have function
03:38 - definition and now it is tr it is going
03:41 - to match function definition with
03:43 - function declaration
03:45 - so here return type is void name is same
03:48 - and no argument same so now it is going
03:51 - to run
03:53 - right and whenever the control will
03:55 - reach to this curly braces closing
03:57 - braces it means now the control is going
04:00 - to return
04:01 - where
04:02 - hair only because here i am calling this
04:04 - function
04:05 - right so here if i ask you
04:07 - what is calling function
04:09 - and what is called function you will
04:11 - also you know get to see these two terms
04:14 - so here calling function is main because
04:17 - in main i am calling this function this
04:19 - is what
04:20 - we are calling
04:21 - sum
04:22 - and cold function is what
04:25 - this sum
04:27 - this is what cold function because we
04:29 - are calling this so main is calling
04:31 - function and sum is cold function
04:34 - right you will also get to see these two
04:36 - terms also when we discuss functions
04:38 - i hope this is clear to you
04:41 - right now this is our function
04:42 - definition
04:44 - right
04:45 - so now
04:46 - see in general what we write in function
04:48 - definition we are writing return type
04:51 - so we will write what
04:53 - return type first of all
04:55 - then
04:56 - function name
04:58 - and in bracket
05:00 - if you want to pass any
05:02 - argument then you will write down here
05:06 - those
05:07 - list of arguments with their data type
05:10 - right
05:12 - so you write the arguments with data
05:14 - types and
05:15 - in definition this will be function body
05:18 - right
05:19 - here what you will write some statements
05:22 - maybe you can say if you want to declare
05:24 - some local variables here you can
05:26 - declare those variables
05:28 - you will write some statements
05:31 - statement 1 2 3 and at last we will
05:33 - write return
05:36 - statement if you don't write but it is
05:39 - not necessary that in functional body
05:40 - you have to write down all the three
05:42 - things but at least one
05:44 - i know
05:45 - statement you have to write what this
05:47 - function is doing
05:48 - you can miss you can avoid this
05:51 - you can skip this return statement here
05:53 - i am not
05:54 - you know writing return anything because
05:56 - it is not returning anything
05:58 - right so that is optional local
06:00 - variables here i am declaring local
06:02 - variables and here these are some
06:03 - statements because there is no and no
06:05 - return statement here
06:07 - it is also possible you will not declare
06:09 - any local variable that is also possible
06:11 - and you will also you you can write down
06:13 - some logic and you can write down return
06:14 - statement that is also possible and you
06:16 - can also skip local variables
06:17 - declaration return statement and you can
06:19 - just write down the logic right so now
06:21 - you can say function definition
06:22 - is having two parts this is what
06:26 - function header
06:28 - this line
06:29 - this is what function header
06:31 - and this is what in curly braces this is
06:33 - what function body
06:36 - so in function header what you have to
06:38 - write return type what type of value
06:40 - after processing it is going to return
06:42 - integer or
06:44 - float or character void what type of
06:46 - value or pointer that is also possible
06:49 - function name
06:50 - and
06:52 - the arguments you are going to pass
06:54 - with their data types
06:56 - with their data types that is compulsory
06:58 - in void sorry in declaration what
07:02 - you write return type function name but
07:05 - here
07:06 - if you want to pass any you know
07:08 - argument then you will you can also
07:11 - write down the data types
07:14 - means you can only write down data types
07:16 - it is not necessary to write down the
07:18 - name of the variable
07:19 - suppose here
07:21 - i want to pass two
07:23 - variables so here you can write down int
07:26 - end both should be type in and semicolon
07:30 - it's not necessary to write in a into b
07:32 - the name of the variables but if you
07:34 - write that is also fine
07:35 - right and the difference between
07:38 - now this this with the function
07:40 - definition what if you want to pass
07:42 - then here suppose in calling also
07:45 - two
07:46 - arguments i want to pass suppose i'm
07:48 - calling
07:49 - passing five and seven
07:51 - right so now obviously here also this
07:54 - and this should match so here also in
07:57 - bracket you will write down in
08:00 - data type as well as name of the
08:02 - arguments you can write down a
08:05 - into b
08:07 - this is compulsory here
08:10 - both data type and the name of the
08:11 - argument this is the difference between
08:12 - definition and
08:14 - declaration as well as the function body
08:16 - so here 5 would be
08:18 - stored in a and 7 would be stored in b
08:21 - so here no need to declare the local
08:23 - variables no need to ask
08:25 - these values this this you can skip
08:28 - only you can write down sum is equal to
08:29 - a plus b and here in sum is also
08:32 - variable you are using so here only you
08:33 - can declare sum is equal to
08:36 - 0
08:37 - so here we have 5 here we have 7 that
08:40 - will be 12 in sum we have 12
08:42 - and once controller reach 2 here because
08:44 - we are not writing any return statement
08:46 - so once control would reach here it is
08:48 - going to return you can say its void
08:50 - return so the answer would be 12 and
08:53 - after going to this line control will go
08:55 - back to here so here in main function if
08:57 - suppose after calling this you want to
08:59 - print like printf and hello
09:03 - so now first 12 would be printed now
09:04 - hello would be printed
09:06 - and now control will go to this means
09:08 - that end of the main and that's it
09:11 - exit from your program right so now i
09:14 - hope you can see the difference between
09:16 - declaration and definition and calling
09:18 - also here in calling
09:20 - we are not writing any return type you
09:22 - will you can you you just write the name
09:25 - of the function
09:26 - and
09:27 - if you want to pass the argument then
09:29 - those arguments
09:31 - that's it
09:32 - right here if you don't want to pass the
09:35 - value suppose here i am taking int x
09:39 - into y here i am taking in y is equal to
09:42 - 5
09:44 - and then x is equal to 7
09:46 - semicolon semicolon
09:49 - right
09:50 - so now here
09:52 - you can write x comma y
09:55 - name of the argument all also
09:58 - right or the value also
10:00 - but here no need to write down the data
10:03 - type of the arguments
10:04 - here no need to write down the name of
10:06 - the argument data type is compulsory if
10:08 - you want to pass if this is blank then
10:10 - that is fine
10:12 - here
10:13 - it's mandatory to write down both the
10:14 - data type and the name
10:16 - so i hope the difference is clear
10:17 - between these two function definition
10:19 - call and declaration
10:21 - right and one more thing declaration is
10:24 - always ended with semicolon
10:26 - calling is always ended with semicolon
10:28 - but after definition it's not like that
10:30 - you have to write down semicolon it will
10:32 - give error
10:33 - don't write down semicolon here don't
10:35 - put any semicolon after function
10:37 - definition
10:38 - right this is the next difference
10:41 - so i hope whenever i write something you
10:43 - can also you can also you can tell like
10:45 - this is function calling this is
10:46 - function declaration and this is
10:48 - function definition i will give you some
10:50 - assignment also right so before that
10:52 - before that just want to tell you some
10:54 - important points about function
10:56 - definition first is
10:58 - function definition will not be ended
11:00 - with semicolon
11:02 - second is
11:03 - whenever after executing the function
11:05 - body whenever the control reach to the
11:07 - return statement
11:09 - then the control will go
11:11 - back to where where you are calling that
11:13 - function means here
11:15 - and if you don't write any return
11:17 - statement means this closing braces will
11:20 - act as a return it's void return means
11:23 - the word means nothing so it will act as
11:25 - word return and as soon as control will
11:27 - reach here will reach here
11:29 - now
11:30 - the the control will go back to
11:32 - where you are calling that function
11:35 - right
11:35 - and some important point about function
11:37 - declaration is what
11:39 - no need to specify here name of the
11:41 - parameter you are giving see i am using
11:44 - two terms parameter and argument
11:47 - right
11:48 - so parameters are what
11:51 - these in function declaration and
11:53 - function definition these are known as
11:55 - parameters means a b these are
11:57 - parameters
11:58 - and argument is what
12:01 - this when you are
12:02 - passing the actual value in the calling
12:05 - of the function at that time it is known
12:07 - as argument so here xyz are known as
12:09 - arguments
12:11 - in calling argument in declaration and
12:13 - definition its parameter or parameter
12:15 - are also known as formal parameter
12:17 - arguments are also known as actual
12:20 - parameters
12:22 - these are actual parameter these are
12:24 - formal parameter
12:25 - here and here if you if you pass
12:27 - right so here
12:29 - it is not necessary to write down the
12:31 - name of the parameter but it is always
12:33 - necessary to
12:34 - you know specify the data time
12:37 - if you are passing
12:38 - parameter if you are not passing
12:40 - anything
12:41 - you have to don't you don't need to
12:43 - worry about that thing right because you
12:45 - are not passing anything you are not
12:46 - passing anything so just blank blank
12:48 - blank you can write down here word only
12:51 - end it with semicolon
12:53 - as well as if you write down here name
12:55 - suppose i am writing here in
12:58 - int m
13:00 - int n
13:02 - but here i am writing in a and into b
13:05 - so it is not compulsory to write down
13:08 - the same name
13:10 - like a and a here and b and b here
13:13 - you can write down
13:15 - different different names of these
13:17 - parameters but what is compulsory that
13:20 - data type that should match
13:22 - like int
13:25 - if i'm writing here int float
13:29 - that should match order should match
13:31 - here also you you let in and here
13:35 - float if you write here float the side
13:37 - in this side
13:39 - that is not allowed
13:40 - so order should match like the type the
13:43 - type of order of the data type should
13:45 - match but it is not necessary to match
13:47 - the name of the parameters here and here
13:49 - right and if you do not
13:51 - specify the return type of this here at
13:53 - declaration part by default implicit
13:55 - declaration would be what it would be
13:57 - assumed that the data type is return
13:59 - type is
14:00 - integer if you don't specify what means
14:04 - compiler will implicitly assume that it
14:06 - is it would return the
14:08 - return type of the cell would be int
14:11 - right so better to specify the data type
14:13 - here
14:14 - always so now here is some assignment
14:16 - for you
14:23 - and if there is any error that also you
14:25 - have to identify and you can tell me
14:26 - incoming works right so i guess
14:29 - practical of this thing the function
14:30 - definition we have taken same example so
14:32 - that we have discussed in the previous
14:33 - video already right in the next video we
14:36 - will see now that function calling means
14:38 - call by value as well as call by
14:40 - reference so that thing i will show you
14:41 - practically right so now see in the next
14:43 - video till then bye