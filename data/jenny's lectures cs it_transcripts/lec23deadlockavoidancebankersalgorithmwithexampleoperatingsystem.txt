00:00 - right deadlock we have discussed one
00:02 - approach for deadlock avoidance that is
00:04 - using resource allocation graph
00:06 - algorithm that algorithm is basically
00:08 - used when each resources having single
00:11 - instance so when resources are having
00:14 - multiple instances then it's better to
00:16 - use bankers algorithm and second thing
00:19 - wireless is known as bankers algorithm
00:22 - because this algorithm could be used in
00:24 - banking system so that banks never run
00:28 - out of the resources or you can save
00:30 - money and always be in safe State so
00:34 - this algorithm is to be followed in
00:36 - banking system also now say to to apply
00:40 - this algorithm to apply this bankers
00:42 - algorithm what should be known what what
00:46 - see as we know that forwarding a
00:49 - deadlock some additional information is
00:51 - required fine now for applying this
00:54 - bankers algorithm what is the approach
00:56 - what should be known in advance three
01:00 - things first thing is first thing is see
01:03 - how many instances of each resource each
01:08 - process can maximum request fine so you
01:14 - can say that that maximum request of a
01:18 - process how many video sources
01:21 - particular process can request at its
01:25 - mix fine and this is denoted with this
01:28 - makes array it is a 2d array okay next
01:34 - is how many instances of each resource
01:38 - each process currently holds currently
01:42 - how many resources each processes
01:45 - holding or you can say allocation this
01:48 - is known as allocation of resources how
01:50 - many resources are currently allocated
01:52 - to each process so that is should be you
01:56 - know denoted with this allocation matrix
01:59 - or you can say it is a 2d array
02:01 - allocation 2d array and the third thing
02:04 - is how many instances of each resource
02:06 - is currently available in the system
02:08 - okay and this is denoted by this 1d
02:11 - array that
02:12 - available the name of that is that
02:14 - arrays you will take the name available
02:17 - fine this is one day array this is 2d
02:19 - air and this is will take 2d any when
02:20 - you'll write you know that code for the
02:22 - spanker cell good fine these three
02:25 - things should be known to apply Rinker's
02:28 - algorithm
02:29 - so now we'll discuss bankers algorithm
02:31 - with the help of this numerical in exam
02:33 - they generally give you consider the
02:35 - following snapshot they'll give you this
02:37 - kind of thing and they'll ask such type
02:38 - of question they can ask what is the
02:41 - need matrix and second thing is is the
02:44 - system in safe state and if yes then you
02:46 - have to find out the find out the safe
02:48 - sequence now what is the safe state when
02:51 - the system would be in safe state if by
02:54 - applying ink bankers algorithm you check
02:56 - if you are able to execute all the
03:00 - processes without going into unsafe
03:03 - State then you can say that system is in
03:05 - safe State and then you have to find out
03:08 - the safe sequence in which sequence in
03:11 - which order you execute these processes
03:13 - so that system remains in safe state
03:17 - that is known as say sequence fine so
03:20 - first of all we will find out need
03:22 - matrix see we have a location matrix may
03:27 - have maximum maximum means see we have
03:30 - discussed this in deadlock avoidance
03:32 - that this additional information would
03:33 - be required to avoid deadlock and that
03:35 - additional information is each process
03:38 - have to declare initially that how many
03:42 - number of resources it will need at mix
03:44 - to a completed execution so this is the
03:48 - maximum matrix for each of this process
03:50 - see here ABCD are a source type a may be
03:54 - you can consider CPU B printer C's
03:56 - Kennedy is memory something like this
03:58 - and these numbers are instances of these
04:01 - resources means this allocation CP note
04:05 - has been allocated 0 instance of
04:08 - resource type a 0 instance of resource
04:10 - type B one instance of resource type C
04:13 - and 2 instance of resource type D so
04:16 - these are instances fine and you are
04:19 - given the currently available after the
04:22 - a location after the allocation of
04:24 - resources to processes
04:26 - how many number of resources how many
04:28 - instances of each resource is available
04:31 - in the system this is the current
04:32 - availability fine sometimes they can
04:35 - give you total number of resources in
04:37 - the system they will not give you this
04:39 - available they will give you allocation
04:41 - matrix maximum and then they'll give you
04:43 - total number of resources available in
04:47 - the system and then you have to find out
04:49 - available number of resources find have
04:51 - to find out this available if total the
04:53 - sources are given see total resources
05:00 - they will give and out of these total
05:03 - you can sum all the allocation resources
05:08 - so out of these total these number of
05:11 - resources has been allocated so you can
05:14 - do total - this total location and then
05:17 - you can find out the currently available
05:18 - resources right now just say how many
05:21 - resources are has been allocated see a
05:26 - resource type a how many instances has
05:28 - been allocated total 1 plus 1 - 6 plus 3
05:31 - 9 so you can find out total number of
05:34 - resources see currently available this
05:37 - one total allocated resources of this
05:39 - one so when you find out total resources
05:42 - then this plus this 2 plus 1 is 3
05:45 - instances of resource type a 9 plus 5 is
05:47 - 14 instances of B 10 plus 2 to L and
05:51 - this one is today so total resources in
05:54 - the system are this one out of these
05:56 - resources these are allocated and these
05:59 - resources are currently available means
06:01 - these resources are free right now right
06:04 - now first thing is you have to find out
06:06 - need matrix need means how many
06:11 - resources how many instances of each
06:14 - resource type each process need see we
06:19 - know the maximum number of each resource
06:22 - type for each process and we know the
06:25 - allocated out of these maximum allocated
06:28 - resources are this one so need need
06:31 - would be what this maximum - a location
06:36 - so find out need matrix maximum and
06:38 - allocation of this one so need matrix
06:40 - B 0 minus 0 0 1 minus 1 0 2 minus 2 0
06:44 - for this one maximum is 1 a location 1 1
06:47 - minus 1 0 7 5 0 2 minus 1 1 3 minus 3 5
06:56 - - 5 6 2 so this is the need matrix fine
07:01 - the formula is obviously if you if if
07:03 - you apply the common sense then no need
07:06 - to use this formula obviously so you
07:07 - know the maximum resources need you know
07:10 - the allocated resources see in previous
07:13 - video I have taken that example of guest
07:16 - and all so see you have the maximum need
07:19 - is the maximum need of your s 10 glasses
07:22 - and currently allocated glasses or you
07:24 - have six glasses so need of us 10 minus
07:29 - 6 that is 4 so say maximum - allocation
07:33 - that is your need matrix sometimes they
07:35 - can ask you find out the need vector of
07:38 - process p1 find out the need weapon for
07:41 - process p3 something like this so first
07:44 - question is over this is the need matrix
07:46 - now you have to find out is system in
07:48 - safe state now we apply bankers
07:50 - algorithm see currently available
07:53 - resources are this one now you have to
07:55 - check with these currently available
07:57 - resources can you satisfy the need of
08:00 - these matrices one by one we will check
08:03 - will start from p0 check out need of p 0
08:07 - is 0 0 0 0 currently available are 1 5 2
08:10 - 0 can you satisfy this need yes
08:13 - obviously we can satisfy need of p 0
08:16 - fine if you can take next also see need
08:22 - of this matrixes it needs 0 instances of
08:24 - a we have one yes it needs 7 instances
08:27 - of resource ty B but we have only 5 so
08:30 - we cannot satisfy a need of this matrix
08:32 - this matrix need one instance of a we
08:36 - have 1 0 0 5 2 to see this in matrix
08:39 - this process needs 2 instances of
08:42 - resource type B resource type D and we
08:47 - have only 0 instances of day so you
08:49 - cannot satisfy this need also next is
08:53 - zero-zero see this requires only two
08:55 - instances of the source type see we have
08:58 - two instances so you can satisfy this
09:01 - need also system can satisfy this need
09:03 - also what about this one
09:05 - see this need six of the source type
09:08 - b-but we have only five so you cannot
09:10 - satisfy this need now if you write the
09:13 - safe sequence you can also execute this
09:20 - end system or you can also execute this
09:22 - one it's up to you so see if sequence
09:24 - can start from p0 also and from p3 also
09:28 - so the it's not a rule that safe
09:31 - sequence should be unique no you can
09:34 - have more than one safe sequence of a
09:36 - particular snapshot fine of a particular
09:39 - situation you can say and I'll just move
09:42 - by this number by the order of writing
09:44 - of these processes so first of all I'll
09:46 - execute process P not fine now if you
09:52 - execute this P note C it requires zero
09:55 - zero zero zero obviously we can satisfy
09:57 - this need now next thing what you have
09:59 - to do is you have to add in that is this
10:03 - currently available you have to add the
10:06 - location of this p0 because once all the
10:10 - resources has been allocated to p0 then
10:13 - P note in complete its execution after
10:15 - and after a finite amount of time it
10:17 - will release all its allocated resources
10:19 - fine and when the all the located
10:22 - resources will be released then those
10:24 - resources will be added to the available
10:27 - resources yes so check out the locate
10:31 - allocated resources to P note 0 0 1 0 so
10:34 - we will add these resources to our
10:36 - available resources right this thing you
10:40 - have to keep in your mind because many
10:42 - students usually make mistake in this
10:45 - thing what to add in this available
10:47 - resources the need or the maximum or the
10:50 - location we always add what a location
10:53 - because obviously when a process
10:56 - finishes its execution then it will
10:58 - allow it will release all its allocated
11:00 - resources fine so add these resources 1
11:04 - plus 0 1
11:06 - five two plus one is three and here we
11:08 - have two now currently available
11:10 - resources are this one and we not got
11:14 - completed now with the help of these
11:17 - resources check out which need you can
11:20 - satisfy now this one is done now you
11:24 - have to check out out of these need now
11:26 - P note is Len will check with P 1 P 1
11:28 - require zero instances of this one p one
11:30 - requires seven instances of B but we
11:33 - have only five instances where we cannot
11:34 - satisfy this need move to the next one
11:36 - one yes we can satisfy zero zero it
11:40 - requires two of two instances of D we
11:42 - have two so basically we can satisfy
11:45 - this need because currently available
11:47 - resources are greater than this one fine
11:51 - either greater than or equal to then we
11:53 - can satisfy that need
11:54 - so now I will write P 2 in safe sequence
11:59 - fine P 2 now these resources can be
12:03 - allocated from these available resources
12:06 - to people fine now P 2 will finish
12:09 - finish its execution and release all its
12:12 - allocated resources now what you have to
12:14 - do is in these currently available
12:16 - resources you have to add a location a
12:18 - location they're located resources of P
12:21 - 2 allocated resources are 1 3 5 4 so add
12:24 - in this one 1 + 1 2 5 + 3 8 5 + 3 8 4
12:29 - plus 2 is 6 now we are done with two
12:32 - processes now next this one is done now
12:35 - check out for this this need 0 0 - it
12:38 - needs only two instances of C we have
12:41 - eight instances of C then obviously we
12:44 - can satisfy this need fine
12:45 - so next SP 3 now after these resources
12:51 - will be given to this process then this
12:54 - process will finish finish its execution
12:56 - and release all its allocated resources
12:58 - now all you have to do is now what you
13:00 - have to do is available + allocation 0 2
13:05 - + 0 - 6 plus 8 is 14 3 plus 8 is 11 6
13:12 - plus 2 is 8 now this one is also done
13:18 - remaining is only p4 and P one check out
13:21 - for P for you can also check out for p1
13:24 - it's up to you that is why I am saying
13:25 - safe sequence can be more than one fine
13:27 - I'm just going by the order of writing
13:30 - zero
13:31 - it needs six instances we have 14 yes we
13:34 - can satisfy it needs four we have eleven
13:35 - it needs two we have eight instances yes
13:37 - we can satisfy this need also now you
13:40 - have to check what now you have to do
13:43 - this currently available plus a location
13:47 - resources because after executing its
13:49 - plus after execution it will release all
13:51 - its resources then a variable would be
13:54 - 214 11 plus 1 is 2 well 8 plus 4 is 12
13:59 - now p4 is also done and the remaining is
14:02 - now even obviously you can satisfy this
14:06 - need out of these available resources
14:08 - now when the p1 finish its execution
14:10 - then it will release all its resources
14:12 - now add in these available allocation
14:15 - resources 2 plus 1 is 3 14 12 and 12 so
14:22 - these are now total number of resources
14:25 - fine see and this is the safe sequence
14:30 - you have executed all the processes that
14:34 - is why you can say without going to
14:36 - unsafe state you are with the help of
14:38 - these available resources you are able
14:40 - to fulfill the need of all the resources
14:42 - so you can say that system is in safe
14:44 - state so answer is yes and the safe
14:47 - sequences this one now you can tell your
14:50 - answer see total available resources
14:53 - work three four 14 12 and 12 and now
14:57 - after executing all the processes the
15:00 - resources available are three fourteen
15:02 - twelve and twelve so this and this one
15:03 - is same so you can say that you are
15:05 - going right so this was a safe sequence
15:08 - for this numerical now if you write the
15:13 - bankers algorithm in step step by step
15:15 - then how we will write this bankers
15:17 - algorithm where you can see the safety
15:18 - algorithm see first of all what is the
15:21 - input for this algorithm input should be
15:23 - number of processes should be given
15:26 - second thing is out of these three
15:29 - allocation matrix or need out
15:31 - these three any pour should be given see
15:34 - any two of out of three maximum need or
15:37 - allocation see in this numerical only
15:39 - allocation and metrics was given
15:41 - sometimes they can give you a location
15:43 - plus a location and need so you can find
15:46 - out maximum you just to a location plus
15:48 - need and you will find out maximum or
15:50 - they can give you maximum and need and
15:52 - you can find out a location how makes
15:54 - Emma - need that we will would be
15:57 - allocation so any two of these three
16:00 - third thing is available either
16:04 - available even all total number of
16:06 - resources should be given either
16:08 - available or total number of resources
16:10 - fine now what is the first step in first
16:14 - step we just take when you will write a
16:16 - code then you will take a flag variable
16:18 - and that flag variable should be zero
16:21 - for all the processes flag of I should
16:25 - be zero for all the processes and I
16:26 - should be from 0 to n minus 1 here n is
16:29 - what n is number of processes so flag of
16:33 - all the processes should be 0 initially
16:35 - fine next thing you will find out need
16:38 - metrics or you can say if these two are
16:42 - given then you will find out maximum but
16:44 - generally they give a location and
16:45 - maximum so find out need metrics need of
16:48 - nm am is number of resources so need
16:51 - would be 2d array maximum would be 2d
16:54 - and allocation is also 2d array now how
16:56 - to find out need matrix maximum -
16:59 - allocation fine next step is now after
17:02 - finding this new matrix what we have
17:04 - done next step is what find a process P
17:08 - I such that such that flag for that
17:12 - process is 0 fine when you write the
17:16 - code then write something like this so
17:18 - you can write a for loop for I is equal
17:20 - to 0 to n minus 1 and you will find out
17:23 - a matrix if flag you can write down the
17:26 - situation if flag is equal to 0 and and
17:28 - need of that process need of I is less
17:34 - than equal to available fine say need
17:37 - here we are where we are able to satisfy
17:40 - this need because this need was less
17:42 - than or you can say equal
17:45 - the available resources we have so flan
17:48 - should be zero plus second condition is
17:50 - need should be less than equal to
17:52 - available for that matrix fine next step
17:56 - is if such process exists or if such I
17:59 - exist then what you do then what we have
18:02 - done in this case we find out that we
18:06 - are able to fulfill this need so this
18:09 - kind of high exists right
18:10 - if this I exist if this true then what
18:13 - you will do you will do flag for that
18:15 - matrix 1 or you can say trim and and
18:18 - what you will do available plus
18:21 - available available plus the a location
18:25 - here you can write allocate what you can
18:27 - see a location of that process fine this
18:32 - 2 thing you will do and and again go to
18:35 - step 2 again go to step 2 find a process
18:38 - P I such that these conditions are true
18:41 - because see we have done for P 1 then we
18:43 - have done for pu p 0 then when P 1 that
18:46 - P 2 P 3 and P 4 so again will repeat
18:48 - these steps fine until what
18:52 - until what until flag of all the
18:56 - processes becomes 1 because if flag is 1
18:59 - if flag is 1 then you can say all the
19:02 - processes has been executed and you you
19:05 - reach to a safe State and you find out a
19:07 - safe sequence so go to step 2 otherwise
19:11 - otherwise go to step 4 what is the
19:14 - fourth step so finally the fourth step
19:16 - is here I guess even write one fine if
19:21 - flag of I flag of I is equal is equal to
19:25 - 1 for all the metrics for all the
19:27 - processes or you can say for all I then
19:30 - you can say system is in safe state
19:32 - otherwise otherwise and say state fine
19:36 - so we will repeat this loop repeating
19:40 - means obviously when we are solving this
19:42 - example after execution of p 0 we have
19:45 - examined this P 1 then P 2 then P 3 then
19:48 - P 4 P 5 like this right so will repeat
19:51 - this loop and after executing all the
19:53 - processes just check if flag of all the
19:56 - processes is 1 it means all
19:58 - processes has been executed successfully
19:59 - then you going to system is in safe
20:01 - state otherwise if any of the process is
20:04 - having flags zero then you can say the
20:07 - system is in unsafe state
20:10 - okay so this is how you can write down
20:13 - bankers algorithm you can modify it
20:15 - according to yourself you can just take
20:17 - a flag in instead of flag you can write
20:19 - down F and something like this fine
20:23 - this is or you can say this is safety
20:24 - algorithm in Kelvin also it is given but
20:27 - they have taken some work and finish so
20:31 - you can also go for that thing now the
20:34 - time complexity for this this bankers
20:36 - algorithm is theta n square m here N and
20:45 - square means number of processes and M
20:46 - is number of resources the time
20:49 - complexity in complexity would be theta
20:51 - n square and fine so in next video I
20:55 - will discuss with you and more numerical
20:57 - and we will discuss one more algorithm
20:59 - that is given in your Galvin also that
21:02 - is a resource request algorithm we will
21:05 - discuss that algorithm with an example
21:07 - fine so I will see in the next video
21:10 - till then bye bye
21:10 - take care