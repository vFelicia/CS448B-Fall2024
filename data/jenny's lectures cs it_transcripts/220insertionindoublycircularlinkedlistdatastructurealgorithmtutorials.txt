00:00 - right in this video we will see how to
00:02 - insert a new node in our EE circular
00:05 - linked list insertion and beginning
00:06 - insertion R and an insertion at any
00:10 - specific position right see this is what
00:13 - a doubly circular linked list every node
00:15 - is having three parts data part this
00:17 - pointer is containing address of the
00:18 - next node and this previous pointer is
00:20 - containing address of the previous node
00:22 - right plus here I'm maintaining also
00:25 - tail pointer and head pointer head is
00:26 - containing address of the first node
00:28 - tail is containing address of the last
00:30 - node plus one more thing is see the next
00:34 - pointer of the last node would contain
00:37 - address of the first node right and the
00:41 - previous pointer of the first node would
00:43 - contain address of the last node right
00:46 - to make it a doubly circular linked list
00:48 - this list is having property of both
00:51 - doubly and circular right you can see
00:55 - this this link is bi-directional link
00:57 - right so now we will see first of all
01:01 - you will see how to insert a new node at
01:04 - the beginning of this list I won't I'll
01:07 - create a new node right allocate the
01:10 - memory dynamically using malloc function
01:12 - and here I will insert that node at the
01:15 - beginning right so here I assume that
01:17 - you have created this list means you
01:21 - have hold that create doubly circular
01:23 - link link list function and you have
01:25 - created this list in this list we have
01:27 - three nodes right that we have discussed
01:30 - in the previous video you can check out
01:31 - that video right and now I want to
01:34 - create I will create a new node and I
01:36 - will insert that node here see now how
01:39 - do you like that thing see I hope
01:40 - everybody know how to represent this
01:42 - thing in coding so this is how we are
01:45 - going to represent this node right for
01:47 - this node we will define our own
01:50 - datatype this we have discussed many
01:51 - times in the previous videos struct node
01:54 - is the name of that datatype this
01:56 - complete is the name struct node three
01:58 - parts are they data part one pointer is
02:00 - next pointer one pointer is previous
02:02 - pointer right so these pointers will
02:04 - contain address of the node that is why
02:06 - here will I am writing struct node
02:08 - because here we will write
02:09 - the data type of that thing whose
02:11 - address we are going to store in this
02:13 - pointer right we are maintaining two
02:15 - pointer head and tail so suppose we have
02:18 - created this list by calling that create
02:20 - function and now I am going to define
02:22 - this function in insert at beginning so
02:25 - now this node obviously we will have to
02:27 - create a new node right so for that
02:30 - thing we will take a pointer new node
02:34 - see this thing will already we have
02:36 - discussed many times in the previous
02:37 - videos right now we will allocate memory
02:40 - to this node how you will allocate a
02:42 - dynamic memory location using malloc
02:44 - function right see so the syntax of Milo
02:48 - this you will write that malloc function
02:50 - in the bracket you will write how much
02:52 - size you want size off the name of that
02:55 - datatype you type name is a struct node
02:58 - right and Mel up will return one C now
03:01 - this memory has been allocated how many
03:02 - bytes 12 bytes for for this for integer
03:05 - four bytes for four bytes for this
03:07 - pointer four bytes for this pointer four
03:08 - bytes for pointer in 32-bit compiler
03:10 - eight bytes in 64-bit compiler 12 bytes
03:13 - so this below piece of 12 bytes and this
03:15 - 500 is what address of the first byte so
03:17 - this malloc will return this pointer to
03:20 - the starting address and Malik will it
03:22 - and what void pointer and this pointer
03:24 - in this point we are going to store this
03:27 - head resna but this pointer is what
03:28 - pointer to node so you have to typecast
03:32 - this thing so how you will type cars to
03:35 - the syntaxes is you will write that
03:36 - there type s trick and this address we
03:40 - are going to store in new node pointer
03:42 - right so now suppose s is 500 and we
03:45 - have stored this inside this new node so
03:47 - now new not new nor corresponding to
03:49 - this node fine now we will ask from the
03:52 - user which data
03:54 - he wants to insert right using printf
03:56 - and scanner and how he will store that
04:00 - data see we cannot directly access these
04:03 - structure members so in data part I want
04:05 - to store now how you will access this
04:08 - data part the pointer to this node is
04:10 - new node so using new node address off
04:12 - the pointer name here you will write
04:15 - that arrow Prater means
04:17 - we'll write this thing in your when you
04:20 - will write a C program - and that
04:22 - angular bracket right and here the name
04:25 - of which part I want to access data
04:26 - parts so here I will write data suppose
04:28 - user has entered here seven you can
04:31 - insert null or none but that is of no
04:33 - use because obviously we will we are
04:34 - going to update this point and this
04:37 - point because in this doubly circular
04:40 - linked list no pointer is null pointer
04:42 - right now see how we will insert this
04:45 - thing here now you will check if Phyllis
04:48 - is input in that case what you will do
04:50 - see now we will write a condition if
04:53 - head is equal to is equal to 0 it means
04:56 - there is no node in the list fine and
04:58 - this would be the first node this would
05:00 - be the last node in the list right both
05:03 - head and tail would point to the snowed
05:04 - fine now here you will write head and
05:08 - tail good point to this node that is in
05:11 - head and tail we will store address of
05:12 - this node that is 500 and this 500 is a
05:15 - new mode fine
05:16 - and plus now this good point to itself
05:21 - because the last node is containing
05:23 - address of the first node and this
05:25 - previous pointer of the first node would
05:28 - contain address of the last node but
05:30 - this has the first node this is the last
05:32 - node right so here also 500 and here
05:35 - also 500 in case my list is empty there
05:39 - is no node in the list right so now how
05:42 - we will access this thing both head and
05:44 - tail and all the three wonders new node
05:47 - is pointing to this node so you can
05:48 - access these data these parts using any
05:52 - of these nodes it's up to you right ok
05:55 - suppose I am writing new node P V s is
06:01 - equal to L new node next is equal to
06:08 - head see it is not compulsory that you
06:12 - will write these two lines here right
06:14 - here you can write head of next as equal
06:16 - to head head of previous is equal to
06:18 - head tail of next is equal to head tail
06:20 - of previous is equal to head because all
06:23 - the three 3-pointers head tail and new
06:26 - node would be having that same address
06:29 - that is 500
06:31 - right so it's up to you how you will
06:33 - read this thing now else
06:35 - suppose I have now three nodes in the
06:37 - list and now I want to insert this node
06:39 - here fine now what you will do see here
06:42 - what you need to update this this would
06:47 - be the first node right so now the next
06:50 - pointer would contain address so then
06:52 - now next node that is 200 right so now
06:56 - how we will access this thing new node
06:58 - next so here what you can write new node
07:02 - next equal to from where you can get
07:05 - this 200 in head we have 200 so here you
07:08 - can write head so now here I have 200
07:12 - means now this is pointing to this node
07:14 - next length now this would point to the
07:18 - previous node so this previous pointer
07:19 - would contain address of the previous
07:21 - node so this would be the previous node
07:23 - now so here how many ok since this part
07:25 - head of previous so here what you can
07:27 - write head of 3 is equal to address of
07:32 - the previous node is 500 from where I
07:34 - can get 500 a new node I have 500 so
07:36 - here I can write new node right so now
07:39 - here I have 500 right so now this is
07:43 - pointing to this node right now you have
07:49 - to set 3 more things now this this
07:52 - previous pointer of the first node
07:54 - because this would be the first node now
07:56 - would contain address of the last node
07:58 - right so now how helixes this thing new
08:01 - node previous so here I can write new
08:04 - node 3 now address of the last node is
08:08 - hundred from where I can get this
08:09 - hundred in tail I have hundred so here I
08:11 - can write things right so now here I
08:15 - have what 100 means now this node this
08:21 - this pointer this pointer is pointing to
08:23 - the last move next thing this pointer
08:27 - see now the last node the next pointer
08:30 - of the last one would contain address
08:31 - from the first node so this address that
08:35 - is 500 this should contain have you Alex
08:37 - is the thing tail of next so here I can
08:40 - write tail off next
08:42 - equal to address of this that is 500
08:44 - from where I can get 500 in new note I
08:47 - have 500 right so here you will update
08:50 - what here you will write 500 so now this
08:53 - is not pointing to this node right and
08:56 - this is also not pointing to this node
08:58 - anymore
08:59 - fine so now you can see here we have set
09:05 - this link this link this bi-directional
09:09 - link now this is pointing to this node
09:11 - and this 100 so this is pointing to this
09:14 - node so you can see this this link is
09:16 - bi-directional right next thing last
09:20 - thing you need to update what head now
09:22 - head would contain address of this node
09:24 - because this would be the first node now
09:26 - so head is equal to new node because
09:29 - address of the newly created node is if
09:31 - you know the pointer fine
09:32 - now head is containing 500 so head is
09:35 - not pointing to this node now head is
09:36 - pointing to this node right so I guess
09:40 - we are done with that insertion at
09:43 - beginning say now here it is not
09:46 - compulsory that you will write all the
09:48 - lines in this order fine see but in some
09:53 - point you have to take care like this
09:55 - here at first of all you can update
09:58 - these nodes then you know new node next
10:01 - new node pointer means these two
10:02 - pointers so here you can write you know
10:04 - next is equal to head after that new
10:05 - node previous is equal to tail like this
10:07 - rather than head previous is equal to no
10:09 - no no after that you can write head
10:10 - previous is equal to your own but what
10:12 - you need to take care is this head is
10:15 - equal to a new node in this you cannot
10:17 - update first here because if you have
10:20 - updated head is equal to no new node at
10:22 - starting here means head is now pointing
10:25 - to this node now how you will access
10:27 - this thing fine because we have broke we
10:32 - have broken this link and this node is
10:35 - also not pointing to this node because
10:37 - we haven't said this link right so we
10:41 - cannot update head here this you have to
10:44 - take care these points you have to take
10:46 - it after updation of this thing head
10:48 - previous is equal to new node after
10:50 - you can update this head has a head is
10:52 - equal to no no right but it is not
10:55 - compulsory that you will write all the
10:56 - lines in this order as I have written
10:58 - fine plus one more thing what you can do
11:01 - see here new node previous is equal to
11:03 - take a tail here also a new node
11:04 - previous is equal to tail you know next
11:06 - is equal to head and you know next is
11:07 - equal to head right both the lines are
11:10 - same so what you can do before if and
11:12 - else here after taking this data here
11:15 - you can write both the lines thus new
11:18 - node previous this new node next here
11:20 - before offense
11:21 - not after else you can trace out this
11:25 - algorithm this program by writing these
11:29 - two lines here rather than if in if and
11:33 - else block fine plus second cases you
11:35 - can trace out this thing by writing
11:37 - these two lines after else block you
11:39 - will find out the difference you will
11:41 - find out the mistake automatically fine
11:43 - you can write down these line before if
11:45 - it's not after hyphens right so now we
11:47 - will see how to insert a node here at
11:50 - the end of the list so now we will
11:52 - define the function insert it and write
11:56 - this node we have created using these
11:58 - lines only user has entered the data
12:00 - eight here right now we will insert here
12:03 - what do you need to change in this code
12:05 - see if head is equal to 0 means there is
12:07 - no node then this would be fine right
12:09 - all the three lines would be fine as it
12:11 - is in else part you need to change first
12:14 - of all we will set these pointers now
12:17 - this would be the last node right so now
12:19 - the previous pointer of this node would
12:21 - contain address of the previous node
12:23 - right because after inserting this tail
12:26 - would point so this node means tail is
12:28 - equal to a new node but before updating
12:31 - this tail what you need to take care you
12:33 - have to update this thing because here I
12:35 - want to insert address of the this node
12:38 - previous node and from where I can get
12:40 - this hundred in tail I have 100 right so
12:43 - before updating tail first set this link
12:45 - new node previous here what you will
12:47 - write new node previous here you will
12:50 - store what address of this node that is
12:52 - until I have the sadness so now here 100
12:56 - right this is pointing to this node now
12:59 - now this will go into the next node so
13:02 - here
13:03 - till next tail off next would contain
13:07 - address of this node the next node
13:09 - because this would be the next node
13:11 - after the snow 700 so from where I can
13:14 - get 700 in new node I have 700 so now
13:17 - here I have 700 so now this is not
13:20 - pointing to this move now this is
13:22 - pointing to this move now we have set
13:27 - these two links now you have to set what
13:30 - this link and this link write a new mode
13:33 - next here what you will store the next
13:36 - pointer of the last node would contain
13:38 - address of the first node in a double
13:41 - circular address of the first node is
13:43 - 500 right now here we don't have 500
13:46 - this new node is pointing not to this
13:47 - now now the address of this first node
13:51 - is always in the head pointer so here
13:52 - you will write head right so here I will
13:56 - write 500 means this is now pointing to
13:59 - this node we will draw this link after
14:02 - setting this link so now this first node
14:05 - previous no no first no to contain
14:06 - address of the last node right so head
14:09 - of beam head of breathe the address of
14:14 - last node is in new node pointer so here
14:16 - I will write new node it means now here
14:19 - I have 700 right so now this is also
14:22 - pointing to this node and this is
14:24 - pointing to this node so we can set this
14:26 - link right like this this link is
14:30 - bi-directional this and this right to
14:34 - make it a double circular fine now last
14:37 - thing you need to obtain this tail
14:38 - pointer now tail would point to this
14:40 - node right in tail we will store 700 so
14:43 - from where I can get 700 in you know
14:44 - LaHaye of 700 so now until I have 700 so
14:47 - now tail is pointing to this node and
14:51 - that is done this is how you will insert
14:54 - a data a new node in the last over the
14:57 - EE circular linked list so I hope you
14:59 - got this coding the diagram is little
15:01 - messed up but I guess you are getting my
15:04 - point
15:04 - fine how you will insert the data at
15:06 - beginning at and at end so now we will
15:09 - see how to insert a new node at any
15:11 - specific position so now we will insert
15:14 - this node right
15:15 - and suppose position is
15:17 - three any position you can take position
15:19 - three means one two three here I want to
15:22 - insert you can say before this after
15:24 - this right here three and after that
15:26 - this would be fourth node position one
15:28 - means here at the beginning on you right
15:31 - now if I give position five it means
15:34 - there is no position five so it should
15:35 - print some proper message that is
15:37 - invalid position right now see how we
15:40 - will insert this thing now suppose
15:41 - position is well it we have inserted
15:43 - position is three so this node I want to
15:45 - insert here at position three one two
15:47 - and three now what do you need to update
15:49 - see here the previous node of this
15:52 - previous pointer of this node would
15:54 - contain address of the previous node
15:55 - that is address of this thing right that
15:58 - is three hundred we will set this link
16:00 - plus the next point of this node would
16:03 - contain address of the next node that is
16:04 - hundred we will set this link press the
16:08 - next pointer of this node would contain
16:10 - address of the next node that is this
16:11 - one this would be the next one that is
16:13 - four hundred here also you will store
16:15 - 400 because the previous point of this
16:17 - node would contain address of the
16:18 - previous node right so now you have
16:22 - update for pointers here now see how we
16:24 - actually update these links see to apne
16:28 - to insert this node here obviously we
16:30 - need to reach to this position now till
16:33 - position -1 because we need some pointer
16:36 - pointing to this node if any pointer is
16:39 - pointing to this node then only we can
16:40 - access this pointer this pointer and
16:43 - this point at this point we can access
16:45 - using the new node for inter only so we
16:47 - need some extra pointer you have to
16:49 - traverse the list till that position
16:51 - suppose in my list I have a 15 nodes and
16:53 - I want to insert at position 10 so first
16:55 - of all I have to reach till position 10
16:57 - now you can say till position 9 position
16:59 - -1 after that only I can insert there
17:02 - because here we can directly access any
17:05 - node in the list we have to reach we
17:07 - have to traverse the list you can access
17:10 - only sequential at starting in this case
17:13 - we have only what this head pointer and
17:15 - this tail pointer value right now see we
17:19 - will take another pointer you can say 10
17:20 - pointer right now will ask
17:24 - the user for the position so for that
17:26 - case also you have to take another
17:27 - variable in that variable you will store
17:29 - the position right and for traversing we
17:31 - are taking another variable that is I
17:33 - and I'm initializing this I with one
17:35 - right plus one more thing
17:37 - now suppose position is five then this
17:40 - program should print a proper message
17:42 - that this is invalid position right now
17:45 - you have to find out the length of the
17:47 - list right you have to count the number
17:49 - of node in the list here the length is
17:51 - one two and three so when we the
17:53 - positions are one two and three only
17:55 - right if position is less than one
17:59 - position is greater than this three
18:01 - greater than the length then it should
18:02 - print invalid position right so here I'm
18:06 - also going to call a function that is
18:08 - gate length function and that function
18:09 - would return this length of the list
18:12 - total number of nodes in the list right
18:15 - and that thing also we have discussed
18:16 - when we were discussing the
18:17 - implementation of singly linked list or
18:19 - if you want me to make a video in that
18:22 - case also how to find out the length of
18:24 - the list you can tell me in the comment
18:26 - box right so for storing that length of
18:31 - the list I am taking a variable you can
18:33 - say L right now first of all I ask from
18:37 - the user for the position so this is our
18:39 - using printf and scanf i have us from
18:41 - the user for the position and suppose
18:43 - user has entered position is three right
18:46 - and we have a variable III is equal to
18:48 - one in i we have one only fine now
18:52 - we will call a function you can say get
18:55 - length and that value I am store I will
18:57 - store in this variable that is L so
19:01 - where I am calling that function get
19:02 - length you have to write down the proper
19:04 - code for calculating this when you write
19:08 - the length of the list now gate length
19:09 - function would return three the length
19:11 - is three so in L variable I have al you
19:14 - three right now I would I'll check for
19:18 - the position
19:19 - if position is less than one or position
19:24 - is greater than this L it means here you
19:26 - will print a proper messages that is
19:28 - invalid position in printf else
19:33 - if you can see if position is equal to
19:36 - is equal to one means here only I want
19:39 - to insert insertion insertion are
19:41 - beginning so here I will call that
19:44 - function insert add banging and that we
19:47 - have discussed already right you will
19:49 - directly call this function ends if
19:53 - position is valid and position is not
19:55 - one like in this case position is three
19:58 - then what you will do so now we will
20:00 - allocate memory to this node because
20:02 - here we have only declared this new node
20:05 - pointer we haven't created this node
20:06 - right so now we will allocate the memory
20:09 - using that malloc function and the funk
20:11 - that send text I guess everybody know
20:13 - how to write down that thing and we will
20:16 - ask from the user for the data which
20:19 - data he wants to insert using printf and
20:21 - scanf I guess everybody know the syntax
20:23 - and suppose user has entered minus one
20:25 - now I want to insert this node here now
20:28 - first of all we will traverse this list
20:30 - tail position minus one till two so now
20:33 - I have taken the stamp and we will
20:35 - initialize this temp right and ten put
20:38 - point here because from the first node
20:41 - only we are going to we are going to
20:43 - start our traversing right so the stem
20:45 - should contain address of the first node
20:47 - so now after this only after this
20:49 - declaration after this line in POS I and
20:53 - this L before taking the position here
20:55 - only you can say what temp is equal to
20:58 - head here you can write this line now
21:00 - temp is pointing to this node right now
21:03 - I will start a traversing we will apply
21:06 - a while loop while I less than position
21:09 - minus 1 3 position minus 1 we are going
21:12 - to traverse till then we are going to
21:13 - move the stamp so temp is equal to temp
21:16 - of next and what I plus plus so here you
21:21 - can see I value is 1 position minus 1
21:23 - position is 3 that is 2 I left one less
21:26 - than 2 yes
21:27 - temp is equal to temp of next temp is
21:29 - pointing to this node temp next is 300
21:31 - so this 300 would be stored here now so
21:34 - now temp is pointing to this node right
21:38 - 300 I plus plus now I becomes 2 now
21:42 - again check the condition to less than
21:44 - position
21:45 - - one to listen to know so now we are
21:47 - going to we are not going to move this
21:48 - temp we are going to stop you will not
21:50 - enter this value we will the control
21:52 - would go out from this while loop right
21:54 - as you can see we have really still
21:57 - position - after this I want to insert
21:59 - right so now the coding I will right
22:02 - here so now after this while what you
22:04 - will write how you will insert this
22:05 - thing here see first of all it's better
22:07 - to create these new links rather than
22:11 - updating the previous links because for
22:13 - updating this you have to break these
22:15 - links so rather than breaking the
22:16 - already set links first of all set the
22:19 - new links so update these links here new
22:22 - node previous and you know the next so
22:25 - in new node previous what you will store
22:28 - here address of the previous node that
22:31 - is this node 300 from where I can get
22:33 - 300 in temp I have 300 so here damn
22:36 - means this is pointing to this node now
22:39 - say to this link means how you like says
22:42 - that thing you know that pointer to this
22:45 - node is new node new node next is equal
22:47 - to here I want to store address of the
22:50 - next node that is 100 from where I can
22:52 - get 100 here I have hundred and pointer
22:54 - to this link is temp so you can access
22:56 - this using temp next temp next so here I
23:01 - have hundreds what this is now pointing
23:03 - to this node right now update these
23:05 - links see how you like says this thing
23:08 - here I will store address of the next
23:10 - node that is 400 so temp of next as
23:12 - equal to new node fine
23:13 - now here the previous pointer of this
23:15 - node would contain address of the
23:17 - previous node that is this node that is
23:19 - 400 but how you will access this part of
23:22 - this node is there any pointer to this
23:24 - node we do not have any pointer to this
23:26 - node right see don't consider this tail
23:29 - pointer because suppose in list I have
23:32 - 15 nodes and now I will I'm inserting at
23:35 - position 3
23:36 - so tail would point to the that 15 node
23:39 - right we cannot access this node using T
23:42 - so I don't consider this tail we cannot
23:45 - access this using the state right now
23:47 - see how we will access this thing we
23:50 - don't have any pointer direct to this
23:51 - node but address of this node is 100 and
23:55 - here I have hundred right
23:58 - this pointer this node is still pointing
24:01 - to this node right we haven't broken
24:03 - this link so now can we access this part
24:06 - yes we can access using temp pointer
24:08 - temp off next so here what you can write
24:11 - temp next it means we have reached temp
24:15 - next means 100 means we have reached
24:16 - till the sadness once we reach to this
24:19 - address right then you can access this
24:22 - part of this part or this part any of
24:25 - the 3 through parts just by writing
24:27 - again an arrow and name of that Puttnam
24:30 - of this part is previous now here I want
24:33 - to store address of previous note that
24:35 - is 400 so from where I can get 400 a new
24:37 - node I have 400 now here I have 400 so
24:42 - this link is no more and this is now
24:44 - pointing to this node now you update
24:47 - this thing temp of next temp of next
24:52 - here you will store address of the next
24:53 - node that is 400 a new node I have 400
24:57 - so now here also I have 400 so this link
25:00 - is no more and this is also pointing to
25:02 - this node right and this is done this is
25:05 - how we are going to insert a node at any
25:08 - specific position this you need to take
25:11 - care of this thing that if position is 1
25:13 - then you call that inserted beginning
25:15 - function right in that case we cannot
25:17 - write down these things these lines will
25:19 - not work and now in main function you
25:23 - can call all these function first of all
25:25 - create function then you can call
25:27 - display function then you can call
25:28 - inserted beginning then insert at end
25:30 - insert at position right write down the
25:34 - name of those these function right and
25:36 - after that you can again call the
25:38 - display function right so that's all
25:40 - about insertion in next video we will
25:42 - see how to delete a node from a doubly
25:44 - circular linked list so I've seen the
25:46 - next video till then bye bye take care