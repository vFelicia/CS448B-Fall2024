00:00 - the topic is deadlock handling in
00:02 - operating system see in the previous
00:03 - video we have discussed discussed what
00:05 - is deadlock and other Coffman conditions
00:07 - for deadlock or you can say necessary
00:09 - condition for occurring the deadlock
00:11 - okay
00:11 - now basically four techniques are there
00:13 - for deadlock handling deadlock
00:15 - prevention that lock avoidance deadlock
00:17 - detection and recovery and finally dead
00:19 - block ignorant see in real life also if
00:22 - some problem comes then basically these
00:25 - four approaches are used to solve the
00:27 - problem so I just want to tell you I
00:30 - just want to give you one real-life
00:31 - example like when educational type of
00:34 - example suppose some students are
00:36 - preparing for gate examination fine
00:38 - so one category is those students who
00:42 - you know not only want to get clear the
00:46 - gate examination they also want to get
00:49 - into IITs they want to score very well
00:52 - fine so they'll then do what they'll
00:55 - maybe dedicate to proper one beer and
00:58 - from starting of the year they start
01:00 - preparing nodes doing coaching and
01:03 - solving more and more previous gate
01:06 - problems and all they're very they're
01:09 - working very hard and ultimately the
01:11 - they get into IIT so that is something
01:15 - prevention of the problem problem means
01:17 - they want to prevent the failure prevent
01:21 - the failure plus they want to perform
01:24 - well so for preventing the failure what
01:27 - they are doing they are studying they're
01:29 - working very hard and doing very well
01:32 - now second category of student is see
01:36 - they don't want to get into IIT they
01:38 - just want to clear they just want the
01:40 - passing marks if thirty five is the
01:42 - cutoff for that gate examination then
01:45 - they just one that they get 35 or 36
01:47 - then that's okay with those kind of
01:49 - students so they do what they they will
01:52 - not work for to come they will not work
01:54 - hard for a complete year they maybe just
01:56 - devote three or four months and they
01:59 - just do maybe weekend coaching or
02:00 - something like that and they just got
02:02 - thirty five marks these are second
02:04 - category of students so these these
02:07 - students are just they are just avoiding
02:10 - the failure they don't want to perform
02:12 - well
02:13 - but they just want to avoid the failure
02:15 - Casey there I am passage am failing you
02:17 - Amara get clear huija so third category
02:20 - of student is they'll not work hard
02:23 - they'll not study if they think that why
02:25 - should I study maybe I might apply that
02:28 - took a kind of thing and for first ten
02:32 - questions I just mark a and for next ten
02:36 - question I just mark B and something
02:38 - like this and maybe maybe they can get
02:41 - 35 marks that cutoff marks so they can
02:44 - get past so when maybe at some time and
02:48 - result come then therefore they find
02:50 - that they detect that they got less than
02:52 - 30 marks less than 35 marks so now at
02:55 - that time they detect the problem and
02:56 - then they want to recover that problem
02:58 - maybe they think that the next time
03:00 - we'll work hard and we'll get above 35
03:03 - marks fine
03:04 - so tale problem till the problem doesn't
03:07 - come these kind of students are very
03:10 - cool after problem comes they detect the
03:12 - problem and they try to recover that
03:13 - problem fine now next category of
03:16 - student is they they just ignore the
03:19 - problem it doesn't affect that they are
03:21 - they are getting 35 marks they are
03:24 - getting 30 marks they are getting minus
03:26 - 30 marks or they are getting maybe 80
03:27 - marks that is fine with them so they are
03:30 - just ignoring the problem it's something
03:33 - like that if you think that there is a
03:35 - problem then okay there is a problem if
03:37 - you think that it is no problem then
03:39 - your mindset will be something like that
03:41 - that yeah there is no problem and you
03:43 - are very cool see all the fourth
03:45 - category of students have solved the
03:49 - problem with their own method so if you
03:52 - come to the terms of operating system
03:55 - then here also we have these four kind
03:57 - of method to handle deadlock or problem
04:00 - right now first method is deadlock
04:03 - prevention we can't say this method is
04:05 - best and this method is not good see it
04:08 - depends we will discuss that them all so
04:09 - first of all see what is deadlock
04:11 - prevention means prevent the deadlock
04:15 - from occurring do something that
04:18 - deadlock will never occur maybe using
04:22 - some techniques apply some set of
04:24 - protocols such that
04:26 - and deadlock will never occur in the
04:28 - system so obviously you can say that
04:30 - this one is best if you prevent the
04:34 - deadlock from occurring then obviously
04:35 - this is the best but problem with this
04:37 - case is what lots of effort will be
04:40 - needed to write down the code how to
04:42 - prevent deadlock and obviously that
04:45 - coast would be very much ghost in the
04:47 - sense like in case of time complexity in
04:50 - case of space complexity and if you add
04:53 - one more functionality to operating
04:55 - system C and C suppose this one is your
04:59 - operating system this one is good for
05:00 - your operating system having some
05:03 - functionalities and if you write one
05:05 - more code to handle deadlock in this
05:07 - case then obviously you are adding one
05:10 - more functionality to operating system
05:12 - then you can say that performance it
05:14 - affects the performance of the operating
05:15 - system also so we cannot say that always
05:18 - deadlock prevention method would be best
05:20 - sometimes deadlock ignoring ignorance is
05:23 - also good C next method is deadlock
05:26 - avoidance
05:27 - avoid the deadlock this is something
05:30 - kind of futuristic approach in this case
05:33 - we we the system maintains a table in
05:36 - which it maintains that a process will
05:38 - need how many resources to complete its
05:40 - execution fine and when any process
05:44 - requests some resources then the system
05:46 - checks that if that request has been
05:48 - fulfilled with develop with the
05:50 - resources which are available then if
05:54 - the system goes after fulfilling that
05:56 - after fulfilling that request if that
05:58 - system goes to unsafe state then the
06:01 - operating system will not fulfill that
06:03 - request and if after fulfilling the
06:05 - request of that process the system is
06:07 - still in safe state then the process
06:09 - then that operating system will fulfill
06:12 - that request we'll discuss this case in
06:14 - next videos in DT fine notice deadlock
06:17 - detection and recovery as the name
06:19 - suggests let the deadlock be occur once
06:24 - a deadlock occur detect it and try to
06:27 - resolve it try to recover from it using
06:30 - some methods though those methods we'll
06:33 - discuss in next video last one is
06:35 - deadlock ignorance or you can say
06:37 - ostrich method simply
06:40 - nor deadlock it is assumed that deadlock
06:44 - will never occur in the system so this
06:48 - kind of technique is used in your
06:51 - Windows and Linux operating systems why
06:55 - so because they think that deadlock
06:58 - occurs very rarely once in a year and if
07:04 - you right so why then if deadlock occurs
07:07 - once in a year very rarely then what is
07:10 - the news to write a full-fledged code a
07:13 - complete code for handling the deadlock
07:16 - which requires so much efforts to write
07:19 - it is very complicated for obviously
07:21 - handling a deadlock preventing a
07:23 - deadlock is not very easy task so
07:26 - writing this code is very tough fine and
07:28 - it will also affect the performance of
07:31 - the operating system as I have discussed
07:34 - operating system is having some
07:35 - functionalities and one more
07:36 - functionality you are adding that you
07:38 - have to handle the deadlock also there
07:39 - obviously performance will be affected
07:41 - of operating system and while you are
07:43 - adding extra button to operating system
07:45 - when deadlock occur very rarely once in
07:48 - a year and if deadlock occur then you
07:50 - can easily reboot that system see this
07:53 - kind of technique deadlock ignorance
07:55 - kind of technique is used in operating
07:57 - system which are basically you know used
08:00 - by end users and user Macduff wiII be
08:03 - the end users usually user laptop for
08:05 - maybe browsing or some normal stuff so
08:09 - it's very you know common for us to
08:13 - reboot our system
08:14 - maybe when system got hold we just power
08:17 - of the system we shut down the system
08:19 - and restart it and that is very common
08:21 - for us but say deadlock ignorance is not
08:24 - applicable in some kind of situations
08:28 - like in our aircraft or you can say an
08:31 - aeroplane maybe obviously there are some
08:34 - systems operating system is also there
08:36 - and which is handled by pilots and all
08:39 - something like that and suppose in the
08:42 - middle of the flight deadlock occurs in
08:45 - that case what happens if system is not
08:47 - working you are not the pilots are not
08:49 - able to control the aeroplane then what
08:52 - will happen it is way
08:52 - whiskey right so in that kind of system
08:56 - we cannot say that deadlock ignorant is
08:59 - a good idea we have to prevent deadlock
09:04 - although it is it is it requires lots of
09:07 - effort and all but you have to handle
09:10 - the deadlock so which which method will
09:12 - be applied when it depends on the nature
09:15 - of the problem second thing is if
09:17 - suppose and you can say you can take
09:20 - example of hospital many machines are
09:22 - there today saying you know hospital
09:24 - many machines are there and they are to
09:26 - be operated with the help of obviously
09:28 - computers and in there we have operating
09:30 - system also and in that case if we
09:33 - suppose that we follow the rule of
09:35 - deadlock ignorance then what will happen
09:37 - although deadlock appears once in a year
09:40 - but for once in a year for that time it
09:44 - is very risky it can it can take lives
09:48 - of many patients if that machine is not
09:50 - working working maybe it is possible so
09:54 - in those kind of system when very
09:56 - critical jobs are there in that case we
10:00 - need to prevent the deadlock if simple
10:03 - for end user if you are using for any
10:06 - user systems it is better to ignore the
10:09 - deadlock rather than putting so much
10:13 - efforts in developing in writing the
10:15 - code for handling or for for preventing
10:18 - the deadlock for avoiding the deadlock
10:19 - this is of no use fine
10:22 - because basically end user wants what
10:25 - performance or speed they they do not
10:29 - focus on correctness we are not any
10:31 - doing any scientific task or something
10:33 - like missile-launching and something
10:35 - like that fine
10:37 - so we want speed or performance so if
10:40 - for some amount of time for 2 or 3
10:42 - seconds our system would hold then we
10:44 - simply just restart our system and that
10:46 - is fine with us right so there these are
10:49 - the four techniques will discuss these
10:51 - techniques in details one by one in this
10:53 - video I am going to discuss with you
10:55 - deadlock prevention technique see we
10:58 - have discussed four necessary conditions
11:00 - for occurring deadlock mutual exclusion
11:02 - hold and wait no preemption and
11:05 - circular wait now how to prevent
11:07 - deadlock if suppose you design a system
11:11 - in such a way that anyone at least one
11:17 - at least one out of the four conditions
11:20 - cannot hold in the system then you can
11:24 - say that deadlock will never occur in
11:26 - the system I'm not saying that all the
11:29 - four conditions you have to fail all the
11:31 - four conditions no at least one
11:33 - condition just violate at least one
11:36 - condition from the four from the four
11:39 - necessary conditions and then at any
11:42 - time in the system and then deadlock you
11:44 - can say that deadlock will never occur
11:46 - in the system so first condition was
11:48 - mutual exclusion so you can say that
11:52 - first is the first point is removal of
11:54 - mutual exclusion you have to remove
11:56 - mutual exclusion now what is mutual
11:58 - exclusion at least one resource in the
12:01 - system should be non shareable means
12:03 - only one process can use that particular
12:06 - resource at one time now how to remove
12:08 - which like the mutual exclusion make all
12:10 - the resources shareable but that is not
12:14 - so easy and almost impossible this is in
12:19 - implementable we cannot implement this
12:21 - man and this method we cannot make all
12:23 - the resources shareable because some
12:25 - resources are inherently non shareable
12:28 - you cannot make those resources
12:30 - shareable like a printer that is non
12:33 - shareable resource although in case of
12:35 - printer the spooling method can be used
12:37 - now what is the spooling method see the
12:40 - memory which is associated with that
12:43 - printer takes jobs from all the
12:46 - processes fine and after that printer
12:50 - will collect all the jobs and print one
12:53 - by one in first-come first-serve so
12:56 - process need not to wait for the printer
12:58 - process can do its own work that is
13:01 - spooling basically but this pooling is
13:03 - also a technique which cannot be applied
13:05 - to every resource so we cannot make some
13:09 - resources shareable and if you force a
13:12 - resource to be used by more than one
13:14 - process at one time then maybe some
13:17 - very serious kind of problem may arise
13:20 - in the performance of the system so this
13:22 - is basically invisible not feasible to
13:25 - implement the removal of mutual
13:27 - exclusion fine second technique is was
13:30 - holding weight so you have to fail that
13:34 - condition so you can say that second
13:35 - point is removal of hold and weight but
13:44 - you can say not holding weight negation
13:52 - of hold animate or you can say either
13:53 - hold or weight now how to remove this
13:57 - technique how to fail this holding
13:59 - weight technique what is Alden wait
14:00 - first of all process is holding some
14:02 - resources and requesting for another
14:05 - resources or you can say waiting for
14:07 - some another resources find that is hold
14:09 - and wait but you have to remove this
14:12 - hold and wait so you have to make sure
14:14 - that when a process is requesting for
14:18 - some resource then that process is not
14:21 - holding any resource now how to you can
14:25 - how to ensure this thing there are three
14:28 - methods first is first is see a process
14:32 - must acquire all the necessary resources
14:35 - before execution starts suppose a
14:39 - process wants ten resources fine so
14:44 - before its execution starts the process
14:47 - must acquire must hold all the ten
14:49 - resources after that it can start its
14:51 - execution
14:52 - let us take one one process let I want
14:55 - to you know print some document and
14:57 - first of all I I'll make the document
14:59 - MSF s so I need my laptop and I want to
15:03 - print that also so two resources I need
15:06 - one is laptop and one is printer so
15:08 - before I start typing the document I
15:12 - acquired printer also so we have laptop
15:14 - plus printer also now suppose when I am
15:17 - typing that document
15:19 - I need maybe you 10 minutes 15 minutes
15:21 - half an hour one hour till then the
15:23 - printer I have acquired that printer so
15:25 - this is what that is wastage of that
15:27 - printer now while I
15:29 - I'm working on my on ms word till then
15:33 - any other process can use that printer
15:35 - and after that I can use that printer so
15:37 - the drawback of this approaches resource
15:39 - utilization would be very low second
15:42 - thing is this this kind of approach is
15:46 - practically not feasible to implement
15:47 - why so because it's starting only
15:51 - process need to acquire all the
15:54 - resources it needs for its execution but
15:56 - it is almost impossible to know how many
15:59 - resources that process will need for its
16:01 - insufficient for completing its
16:03 - execution
16:04 - so that is practically not possible so
16:07 - see this approaches not implement a very
16:09 - practically not feasible now second
16:11 - thing is second approaches so see a
16:14 - process is having nothing at one
16:16 - particular amount of time fine
16:18 - now suppose at some point of time it
16:20 - needs only one resource fine some may be
16:23 - at some particular point of time I need
16:25 - only laptop I want to write the document
16:27 - I don't need printer I need printer
16:29 - after some amount of time so the process
16:32 - will acquire the desired resources when
16:35 - it has no resource fine and use those
16:39 - resources and now now that process wants
16:45 - additional resource but before
16:48 - requesting the additional resource that
16:52 - process has to release all its acquired
16:56 - resources let us take that example see I
16:59 - am writing some document in preparing a
17:01 - document in MS Office on my laptop and I
17:03 - have done with my that that kind of work
17:07 - now I need printer but if I request for
17:12 - printer then I have to release laptop
17:15 - cannot see that I hold that laptop also
17:18 - and I request printer also because we
17:21 - have to remove hold and wait condition
17:22 - so if you are requesting for some
17:24 - additional resource you have to release
17:26 - the acquired resources then I have to
17:28 - release laptop fine and again in that
17:33 - case after that I can request printer
17:35 - and suppose printer is free and I got
17:38 - the printer but in this case what
17:42 - happens
17:43 - sometimes that process needs that
17:46 - previous that old resource also plus the
17:50 - new resource also but that process now
17:52 - only have the new resource but that old
17:56 - that old resource has been released by
17:58 - the process now it has to make a request
18:02 - to that old resource but before
18:04 - requesting some additional request it
18:06 - has to release that printer or it has to
18:08 - release the resource that it have at
18:11 - that particular amount of time so this
18:13 - thing happens so see if I have taken my
18:17 - you know that word file in my pendrive
18:20 - then I don't need laptop I release
18:22 - laptop I only take printer and just take
18:24 - out the printout so that is fine but if
18:27 - I didn't take that file into my pendrive
18:31 - then I need laptop also fine but I have
18:36 - now printer only now I will request
18:38 - laptop but before requesting any
18:41 - additional resource I have to release
18:42 - printer now here I released printer okay
18:46 - now suppose I got laptop now I need
18:50 - printer fine so maybe printer is also
18:54 - free at that particular amount of time
18:55 - and laptop is also free so I got all the
18:58 - do all the two resources at the same
19:00 - time so I can do my work but the
19:02 - drawback of this condition is what this
19:05 - this approach is what starvation problem
19:11 - now again again that thing happens if I
19:15 - have laptop then I have to release
19:18 - printer and printer is taken by some
19:20 - other process fine now when I request
19:23 - for printer I have to release laptop now
19:26 - if printer I have printer then I have to
19:28 - make request for laptop fine so this
19:32 - this kind of thing always happens maybe
19:34 - you have to that one process how to
19:36 - release its resources many times and
19:39 - maybe it is a case that once it is
19:42 - having maybe many number of resources
19:44 - and suppose the process is having 10
19:48 - resources and it needs one more resource
19:50 - now before that any additional requests
19:53 - it has to release all the tender sources
19:55 - yes or no
19:56 - now maybe after maybe again if that
20:00 - process request and that process is not
20:02 - able to get so many resources at same
20:06 - time so many times that process has to
20:10 - release its resources so starvation
20:12 - problem can be there
20:13 - so third approaches wait time bound
20:16 - poking out third is you allow one
20:19 - processes holding some resources and
20:21 - waiting for someone other resources but
20:23 - here the condition is you you you just
20:26 - make that time bound on the waiting time
20:29 - maybe suppose I have having that same
20:33 - example I have IMing laptop fine and now
20:36 - I'm holding my laptop and I want I have
20:38 - requested for printer now no need to
20:41 - release this laptop but I can wait for
20:45 - printer for a limited amount of time
20:47 - that is to be set and suppose that time
20:50 - is for that time is 10 minutes so I can
20:53 - hold that laptop and I can wait for
20:54 - printer for 10 minutes only if within
20:57 - those 10 minutes I got the printer then
20:59 - that is the best yes I will get the
21:02 - laptop also and printer also I can do my
21:04 - work but if that time bound expires then
21:08 - I have to release all the acquired
21:10 - resources I have to release my laptop
21:12 - also fine so there would be a time bound
21:15 - on the wait that is why it is known as
21:19 - wait time bound the process can hold
21:21 - something can hold some resource can
21:24 - wait for another resource for some time
21:26 - bound if within that time bound that
21:29 - process worked that resource for which
21:32 - it is waiting and it is best thing and
21:34 - but if but if time quondam expires that
21:37 - waiting time expires then that process
21:39 - has to release its acquired resources
21:41 - also so that is very time bomb so next
21:46 - is removal of no preemption no
21:49 - preemption means you cannot forcefully
21:52 - take any resource from a process fine
21:57 - but now you have to remove the snow
22:00 - preemption means we can forcefully take
22:03 - we can forcefully take any resource from
22:06 - a process but from which process you can
22:09 - take from wait
22:11 - process not from a running process right
22:15 - because if and this this kind of
22:18 - approach is used by higher priority
22:21 - processes or you can say system
22:23 - processes may be some system processes
22:25 - there and that process needs some
22:27 - resource fine
22:29 - obviously system processes having higher
22:31 - priorities highest priority so people
22:34 - who don't want that because of that
22:36 - resources that system process got
22:38 - blocked and deadlock is there so we
22:40 - preempted the resource from some low
22:42 - priority processes and give the
22:44 - resources to that system process so that
22:46 - is known as preemption technique this
22:48 - technique is basically applied for
22:50 - higher priority processes where you can
22:51 - say system processes let us take one
22:53 - example see you you got stuck in traffic
22:57 - but suddenly ambulance comes
23:01 - so obviously everybody will you know
23:04 - give way to ambulance because ambulances
23:06 - if having higher priority we cannot say
23:09 - that if we are we we got stuck in the
23:11 - traffic then why this ambulance is
23:13 - allowed to pass that is not a case fine
23:16 - so for higher higher priority processes
23:19 - this preemption technique can be applied
23:20 - not for all the processes okay now what
23:25 - is in this technique so in a non
23:27 - preemption removal of non preemption see
23:29 - resources can be preempted from
23:31 - processes and this this technique will
23:34 - be applied for higher priority processes
23:36 - end so you can say for system processes
23:38 - what are the techniques one technique is
23:40 - if process is holding some resources and
23:43 - requesting some another resources but
23:46 - that request cannot be immediately
23:48 - fulfilled we cannot give that requested
23:52 - resources to that process at that
23:54 - particular amount of time then what will
23:56 - happen then that process then all the
23:58 - resources of all the acquired resources
24:00 - of that process will be preempted same
24:03 - scenario which we have discussed in
24:04 - olden wait second second technique is if
24:08 - suppose a process is requesting a
24:09 - resource if that resource is available
24:12 - then that would be allocated to that
24:14 - process if that resource is not
24:16 - available then we will check why this
24:18 - resource is not available if that
24:20 - particular resources are located to some
24:22 - other process
24:24 - which is also in waiting state which is
24:27 - also in waiting state then what will
24:29 - happen then that particular resource
24:32 - will be preempted from that from that
24:35 - process and will be given to this
24:38 - process see now here what the funda is
24:41 - always the waiting process will be
24:44 - treated as with we can only preempt
24:47 - resources from waiting process not from
24:51 - a running process as you can see here
24:54 - see if that resource is available then
24:56 - allocated if not available then we will
24:58 - check if that particular resource
25:00 - suppose here is process P 1 it is
25:05 - requesting for some resource if this
25:07 - resource is not available and this
25:08 - resources are located to some other
25:10 - process P 2 P 2 and this process is also
25:15 - in waiting state may be waiting for some
25:18 - other resource then what we'll do a
25:20 - preamp in this resource from P 2 and
25:22 - this resource will be given to P 1 so
25:25 - that P 1 can do it well its execution
25:29 - fine so make this thing very clear
25:32 - always the waiting processes will be
25:34 - treated as victim we can preempted
25:36 - sources from waiting processes from not
25:39 - from running processes right so this is
25:42 - the fund of removal of no preemption
25:44 - technique now the next one is removal of
25:46 - circular wait see now what is the
25:49 - circular wait the processes are waiting
25:51 - in a circle like this suppose P 1 is
25:56 - requesting for this R 1 but our wonder
25:59 - sources with P 2 P 2 is requesting for R
26:02 - 2 but R 2 is held by this P 1 so this is
26:05 - what a circular wait so you have to
26:08 - remove the the circular wait how the
26:10 - circular tube it can be removed
26:13 - simple funda is just a sign R number to
26:18 - each process sorry a sign or integer
26:21 - number two processes to two resources
26:24 - like 1 2 3 4 5 like this and after
26:28 - assigning the number just make sure that
26:30 - the processes can request the resources
26:34 - in increasing order
26:37 - or decreasing order strictly increasing
26:40 - or strictly decreasing order only see
26:44 - let us take this example these are some
26:45 - resources so some numerical some
26:49 - numerical integer value will be assigned
26:51 - to these resources like one suppose five
26:56 - suppose six was suppose seven
26:58 - now suppose two processes are there p1
27:01 - and people now these p1 and p2 processes
27:06 - can only request the resources only in
27:09 - its increasing order fine like 1 5 6 & 7
27:14 - like its some particular amount of time
27:16 - P 1 is P 1 is holding our source having
27:20 - number 5 that is CP and now P 1 is
27:24 - requesting for this printer is it
27:28 - possible no that would not be possible
27:30 - because 1 1 is less than 5 if the
27:34 - algorithm is like that the resources can
27:37 - be requested in increasing order then
27:40 - what what would what would be the case P
27:42 - 1 can request only 6 and 7 even cannot
27:47 - request 1 if the algorithm is applied
27:50 - something like this that processes can
27:52 - request the resources in strictly
27:54 - decreasing order then what will happen
27:56 - then vice versa won't be there then what
27:58 - will happen if it is having 5 then it
28:01 - can request only this one it cannot
28:03 - request 6 & 7 now one case is there for
28:07 - that particular amount of time P 1 is
28:09 - holding a resource number 1 and 6 fine
28:13 - now P 1 wants this 5 resource then what
28:19 - will happen
28:19 - it cannot request this 5 resource then
28:22 - what the alternative approach is what
28:25 - this P 1 would release would release the
28:29 - resource 6 fine and now P 1 can request
28:36 - this resource 5 and again for 6 this is
28:41 - the case so simply you can write to
28:43 - request a resource suppose RJ RJ a
28:47 - process must first release
28:50 - all the acquire resources are I are I
28:54 - such that such that is greater than or
28:59 - equal to J here you can say here just we
29:03 - can just take one case P one is holding
29:07 - one eight six now P one is requesting
29:10 - for this five then P one has to release
29:15 - this six because I here I is what six
29:19 - so P one has to release this 6 because 6
29:22 - is greater than equal to this J fine
29:26 - after that it can request this 5 and
29:28 - then can request to 6 so this is how you
29:32 - can you can implement this removal of
29:34 - circular wait
29:37 - just make sure that processes can
29:40 - request the resources in either strictly
29:43 - increasing order or in strictly
29:45 - decreasing order and every resource is
29:48 - assigned some number so here problem of
29:51 - an implementation of this technique is
29:54 - what see it is very difficult to
29:55 - determine the relative for bring of
29:58 - different resources many resources are
30:01 - there and how to how to determine the
30:03 - know that relative ordering of these
30:05 - resources so that is very tough although
30:09 - it is implementable we can implement we
30:11 - can remove the circular weight just
30:13 - assign a number numeric integer or even
30:16 - say priority to each resource and make
30:18 - sure that processes can only request the
30:21 - resources in increasing order strictly
30:23 - increasing or arrow strictly decreasing
30:25 - order then there would not be circular
30:29 - wait never
30:30 - there would be circular wait let us take
30:34 - this example only see at some particular
30:36 - point of time this P 2 is holding R 1
30:39 - and P 2 is requesting are 2 P 2 can
30:42 - decreased R 2 because it can request all
30:44 - the resources greater than 1 2 3 4 5
30:46 - like this and this suppose R 2 R 2 is
30:51 - with P 1 suppose P 1 is holding this R 2
30:54 - now kill P 1 P 1 request this R 1 know
30:59 - why so because P 1 is holding r2 so we
31:02 - can it cannot request any resource less
31:04 - than
31:04 - so that is why we cannot put this edge
31:08 - if will not put this edge then there
31:10 - will not be circular weight so you can
31:13 - take any other example if this kind of
31:17 - thing total load ring is there then
31:20 - there would not be circular weight
31:22 - definitely so this is all the deadlock
31:24 - of all about deadlock prevention
31:25 - techniques in next video and discuss and
31:28 - lock avoidance technique or you can say
31:30 - bankers algorithm till then bye-bye take