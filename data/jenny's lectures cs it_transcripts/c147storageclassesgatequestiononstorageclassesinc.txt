00:00 - so we are done with types of stories
00:01 - classes and in the previous video I have
00:04 - discussed two question on the stories
00:06 - class technical interview question and
00:08 - this video we'll see three or four more
00:10 - question on stories classes previous
00:12 - year gate question right see this is uh
00:15 - gate CS 2012 question so this question
00:18 - is containing static uh storage class
00:21 - two question we'll discuss on external
00:24 - stories class and one on register
00:25 - stories class total four question we
00:28 - going to discuss in this video now
00:29 - explain what output you will get like a
00:31 - code is given and they they are asking
00:33 - like the output of this code what would
00:35 - be the output of this code so we'll
00:37 - discuss why you are getting that output
00:39 - the reason behind that if you are
00:40 - getting any error why you are getting
00:42 - that kind of error it is a compiler
00:43 - error or is it a Linker error everything
00:46 - we'll discuss in this video now let's
00:48 - see the answer of this
00:50 - question see this question I have
00:53 - already discussed in my previous videos
00:55 - when you are using static and static
00:58 - storage class here the answer of this
01:00 - question would be I'm just going to tell
01:02 - you you just you know practice this and
01:05 - see you are getting the same answer or
01:07 - not this would be 42 then 62 and 2 but
01:12 - one more question was there the code is
01:14 - same but the next question was that was
01:17 - asked in Gate CS 2012 like this is this
01:20 - line This is line one this is line two
01:22 - they have given this line one this line
01:24 - to and this would be replaced
01:26 - by Auto in a equal to 1 and this was
01:30 - replaced by
01:33 - resistor in a is equal to 2 now what
01:36 - output you will
01:37 - get when static word was there then this
01:41 - output was there I have discussed
01:42 - already this question but next question
01:44 - is now Auto and resistor now what output
01:46 - you will get see first of all obviously
01:49 - when you will run this control will go
01:50 - to the main function here you will see
01:52 - auto int a so memory would be allocated
01:54 - to this one a and one would be stored
01:56 - here now function would be called here
02:00 - now here we have resister in a is equal
02:01 - to 2 so one more variable a local to
02:04 - this function and here we have
02:06 - two now
02:08 - second B and here we have one now next
02:12 - line is a plus equal to Plus+ B so it
02:14 - means this line can also be written as
02:16 - AAL A ++ +
02:20 - B right so this plus plus is having
02:22 - higher precedent so this would be
02:24 - executed first plus plus b means B is
02:28 - one pre ment means it becomes 2 now so 2
02:33 - a is 2 2 + 2 is equal 4 now a becomes
02:38 - 4 now print what output you will get
02:40 - first of all four and B value is 2 so 42
02:44 - right now back to here after the exit of
02:47 - this function now next line is a plus
02:50 - equal to 1 so it means a equal to a + 1
02:52 - right so now a value becomes
02:56 - two right again function call again
03:00 - function would be called now resistor in
03:02 - a equal to 2 now this is resistor
03:04 - variable right so it's it's not static
03:07 - so it would it would be initialized
03:09 - again the lifetime of this variable
03:12 - is within this
03:14 - block right till the end of this block
03:16 - only and scope is also within this block
03:20 - right so now again we will initialize
03:24 - this with
03:25 - two the previous previous value would be
03:28 - gone and now again it would be ized with
03:30 - 2 now int B is equal to 1 so again B
03:33 - would be 1 now again this line plus plus
03:37 - b and this thing so now a is 2 and B is
03:40 - plus plus b is 2 four so again four will
03:43 - be printed and B is also four plus plus
03:46 - b plus plus b so it becomes uh 2 so B is
03:50 - also two so four and two now exit from
03:53 - this function means back to here now
03:55 - here again one print of statement A and
03:58 - B we are going to print so
04:00 - A and B which are local to this function
04:02 - that would be printed now a value is two
04:05 - so now two would be printed now in this
04:08 - function we don't have any B any local
04:10 - variable B right so is it give now will
04:14 - it give error no because we have a
04:15 - global variable B so it will search do
04:19 - we have any Global variable B yes we
04:21 - have B so B is equal to Z Now B is equal
04:24 - to 0 so it will print Z so at this point
04:26 - of time answer would be 42 42 and 2 0
04:30 - if we using Auto and static if here is
04:33 - sorry auto and resist if static and
04:34 - static then this output you will get
04:37 - right so this was one question now next
04:40 - question is so these are two more
04:42 - question one is this one is this let me
04:43 - discuss this first we have a global
04:46 - variable in I is equal to 5 so by
04:48 - default this class of this would be
04:49 - extern now in main I have just written
04:52 - extern int J one more variable J and I'm
04:55 - printing I and J and after that I'm
04:59 - defining
05:00 - in J is equal to 10 a local variable to
05:02 - this Main and return zero now what
05:04 - output you will get see okay Global
05:07 - variable in I is equal to Z so maybe you
05:09 - will think it will print okay five now
05:12 - extern int J this line means it's not
05:17 - definition it's not memory allocation of
05:20 - this uh J it is just a declaration of
05:23 - this J it means this line will tell the
05:27 - compiler we are using external keyword
05:29 - this will tell the compiler that J is
05:33 - defined J has been defined in another
05:37 - block not within this block not in this
05:40 - main outside of this block whe where we
05:44 - are using this extern inj statement
05:46 - outside of this block J has been
05:49 - defined and we have to use that
05:53 - J right J is defined somewhere
05:57 - else maybe in another file if if you are
05:59 - including any other file so it will
06:01 - search in that file if you're not
06:03 - including any other file like hash
06:04 - include and in double code that file
06:06 - name then outside of this blog it will
06:10 - search now
06:12 - see after that after that we are having
06:15 - within this block only we are having in
06:18 - J equal to
06:20 - 10 but before this line we have this
06:24 - line so it will tell the Linker like
06:27 - compiler it's okay okay J has has been
06:29 - defined somewhere else outside of this
06:31 - block it will give this problem to
06:34 - Linker to resolve this problem like no
06:36 - link the value of J here Linker but
06:40 - outside of this blog do we have any
06:42 - J no so it will give Linker
06:48 - error undefined reference to this J we
06:51 - don't have any J outside of this blow it
06:54 - will not access this J because this J is
06:56 - within this block only and after this
06:58 - line within this block extern means
07:00 - outside of this block this J must
07:03 - present outside of must be outside of
07:06 - this block but there is no J no Global
07:09 - variable J so it will give error only
07:11 - Linker error not compiler error Linker
07:14 - error it will give I hope you're getting
07:17 - my point now same with this see just a
07:21 - little bit different from this in main
07:24 - we have extern int I print f are
07:27 - printing I and one more block is there
07:31 - here we are taking in I equal to 10 and
07:34 - again we are printing I and that's
07:37 - it what it will give same first line the
07:41 - compiler will see extern int I it means
07:45 - we are using extern it means uh it will
07:48 - tell the compiler that this I has been
07:50 - defined already but outside of this
07:52 - block outside of this block where we are
07:55 - using this statement means outside of
07:57 - this main block let's search for that I
08:00 - and I'm going to use that I that value
08:02 - only this is just a declaration but now
08:05 - Linker will link that thing but Linker
08:08 - will not able to link because outside of
08:10 - this block we don't have any I do we
08:13 - have no maybe you will think this is the
08:16 - in this block but this block is within
08:19 - this block
08:21 - only right so it will not not go for
08:23 - this value it will search the value of
08:26 - five which is outside of this blow if
08:28 - you declare here in I is equal to
08:31 - 10 not here then it's fine because this
08:36 - I is outside of this block where we are
08:38 - using this extern in I so it will exess
08:40 - this 10 at this point of time so 10 and
08:43 - 10 would be printed
08:45 - but this time it will give error Linker
08:49 - error not compiler error Linker error
08:52 - Define reference to this I both will
08:55 - give error right now next uh question is
08:59 - so this is the next question we are
09:01 - using register int data is equal to 10
09:03 - we are taking a pointer int estri Pi
09:06 - some data initializing it with null then
09:10 - address of data we are initializing we
09:12 - are know initializing this pointer with
09:14 - address of this data this variable now
09:16 - in this estri Pi sum data we are
09:19 - entering a value five and then we are
09:21 - printing this the value using the
09:24 - pointer in Direction operator now what
09:26 - value you will get here see here also
09:29 - you will get
09:31 - error why so because I have already told
09:34 - you when we were discussing resist
09:35 - storage class
09:36 - like this is resister variable data so
09:40 - it will be stored not in memory in CPU
09:42 - registor so it is not having any memory
09:45 - location with it if it is not having any
09:48 - memory location with it then how you can
09:52 - access the address of this variable and
09:55 - store in some pointer yes we cannot
09:58 - access the address because it is being
10:00 - stored in register CPU register not in
10:02 - memory location so it will give error
10:04 - like you have requested address of a
10:07 - register variable data and that's
10:10 - wrong right we cannot request address of
10:13 - a register variable only if it is like
10:16 - Auto then it is fine it will access it
10:20 - the address because now at this point of
10:21 - time it is Auto and it will be in memory
10:24 - stored in memory so it will have some
10:26 - memory location we can fetch that memory
10:28 - location we can store that memory
10:29 - location in that pointer and that's it
10:32 - right but if we have register here then
10:34 - at that point in time it will give error
10:37 - so the assignment for you is now we
10:39 - don't have any register here simple in
10:40 - data is equal to 10 now what output you
10:42 - will get here now this you have to tell
10:44 - me in comment box I hope now you are
10:47 - familiar with the storage classes and
10:48 - what type of questions would be asked in
10:50 - competitive exam and maybe asked in y
10:53 - was right we have discussed almost one
10:55 - one question on every stories class
10:58 - right so now I hope you got all these
11:01 - thing about stories classes and the
11:02 - questions why you are getting that kind
11:03 - of output so now I'll see you in the
11:05 - next video till then bye-bye take care