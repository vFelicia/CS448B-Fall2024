00:00 - hey everyone I hope you are safe and
00:01 - doing good so in the series of learning
00:03 - C++ programming language we are
00:05 - discussing functions in C++ in previous
00:07 - video we have seen the basics of
00:09 - function that was about introduction to
00:11 - function like what is function why we
00:12 - need function then what are buil-in
00:15 - function what are user defined function
00:17 - function declaration or prototype
00:18 - function uh calling function definition
00:21 - as well as four types of function
00:23 - function without argument and without
00:26 - return type function without argument
00:28 - with return type function function with
00:30 - argument without return type and
00:32 - function with argument and with return
00:35 - type right these four things four type
00:37 - of function with proper example right
00:40 - advantages of using function and all we
00:42 - have seen in previous video now in this
00:44 - we'll see what are parameter passing
00:46 - mechanism in function how to pass
00:49 - parameters right so there are two types
00:53 - of these mechanism uh parameter passing
00:56 - mechanism one is called by value and
00:57 - called by reference two so these things
00:59 - we will discuss in this video with
01:01 - proper example with proper program right
01:04 - for first of all we will discuss what is
01:06 - an argument and what is a parameter
01:09 - difference between these two these two
01:11 - terms are a little bit confusing let me
01:13 - show you this thing with uh example so
01:15 - see this kind of example we have seen in
01:17 - previous video we have a function add
01:20 - there we are adding two number right
01:23 - this is function definition here we have
01:30 - this is function definition right we
01:32 - don't have any prototype of the function
01:34 - because we have defined this function
01:35 - before calling in main we are calling
01:37 - this function so here we have int XY sum
01:39 - is equal to Z and we are asking from the
01:41 - user the value of XY and we are calling
01:43 - this function add by
01:46 - passing these X and Y two argument and
01:49 - whatever it will return it is returning
01:51 - a plus b see return a plus b so it is
01:53 - returning we are adding to int value so
01:55 - it will return int so return type is int
01:58 - and in some variable
02:00 - suum some variable we are holding we are
02:03 - patching that value whatever this add
02:05 - function will return right and that and
02:07 - then some I'm going to print right now
02:11 - here what are parameter and what are
02:14 - argument so while calling the function
02:17 - I'm passing X and Y so these are known
02:20 - as
02:22 - arguments right the values or the
02:24 - variables you pass while calling the
02:27 - function those are known as arguments or
02:31 - actual
02:32 - parameters right
02:35 - and the
02:37 - variables which we declare in function
02:41 - definition these are known as parameters
02:44 - so here A and B these are parameters and
02:47 - X and Y these are arguments so these
02:49 - these the parameters are just
02:52 - placeholder
02:53 - to you know fetch or to store the value
02:57 - whatever value you pass in arguments
02:59 - while calling
03:00 - right so but these arguments are actual
03:04 - values you pass so here x y means X and
03:06 - Y value whatever you will uh enter you
03:09 - user will enter like three or four those
03:11 - actual values are to be passed three
03:13 - four here and then a would be stored in
03:17 - a uh a three would be stored and in B
03:20 - four would be stored right so you know
03:22 - now the difference between parameter and
03:24 - argument and these arguments are also
03:26 - known as actual parameters and these
03:28 - parameters are known as
03:30 - formal parameters or formal arguments
03:33 - and these are arguments or actual
03:35 - parameters or actual arguments These Are
03:38 - A and B are parameters or formal
03:40 - parameters or formal
03:41 - arguments so now you got the difference
03:44 - between parameter and arguments right
03:46 - now we are passing here the value like
03:50 - maybe XY or rather than asking from user
03:56 - if I write something like this
04:04 - let's fix this and I'm passing three and
04:06 - four so the three and four these are
04:07 - arguments A and B these are
04:10 - parameters so whenever you pass here
04:14 - values or the variables then this data
04:16 - is to be passed by pass by value or call
04:20 - by Value method two type of mechanism
04:24 - are there to pass these parameters these
04:26 - arguments one is call by value second is
04:29 - call by reference so pass by value or
04:30 - pass by
04:31 - reference right now what is call by
04:35 - value so first we will see what is call
04:38 - by value right so in this case in this
04:42 - case these three and four we are passing
04:44 - this is call by value here what is this
04:48 - in this case call by value a copy of
04:51 - these variables these arguments are to
04:53 - be passed not the original uh arguments
04:57 - not the original data not the original
04:59 - values a copy of these are to be passed
05:02 - right and in parameter A and B copy of
05:06 - these variables these arguments are
05:09 - stored right so here if you take X and Y
05:12 - then X and Y are
05:19 - different and a copy of X and Y whatever
05:21 - the value is passed which is in a and b
05:24 - right it's like I have my uh like my own
05:27 - notes of C++ and if student stent ask me
05:30 - came to me and ask me like please give
05:33 - me notes ma'am so what I'll do is I'll
05:36 - not give my original notes what I'll say
05:38 - is you just go to that photo State shop
05:41 - and just copy it right so the original
05:44 - notes are with me and students have a
05:47 - copy of my
05:48 - notes right so
05:50 - whatever like this so one qu one
05:53 - question for you is if the now the
05:57 - student modify those notes
06:00 - like maybe highlight something or add
06:02 - something in those notes any definition
06:04 - or anything will my notes my original
06:07 - notes would be affected obviously not
06:11 - because student has a copy of my notes
06:14 - so in that copy only that modification
06:17 - would be done my my original notes are
06:19 - with me and those would be
06:21 - unaltered would be not modified by the
06:23 - student right you got it that is why in
06:26 - call by value the actual value would not
06:28 - be modified only the copy whatever the
06:31 - value in A and B that would be modified
06:34 - or changed in call by value because we
06:36 - are just passing a copy of the
06:41 - variables right so like this if if uh I
06:45 - do this thing suppose I have a function
06:48 - modify number
06:50 - and like int n this is suppose uh only
06:56 - the Prototype or the Declaration we can
06:59 - this n is optional the name of this is
07:01 - optional and int
07:03 - main suppose I have like int a variable
07:07 - a that is
07:09 - five and I'm calling this function
07:12 - modify num and I'm passing this
07:14 - a
07:21 - right so let's define this function here
07:25 - and in this we are just changing this
07:28 - because five we are going to pass in a
07:31 - and I'm just changing the value to
07:35 - 50 right that's it and suppose in this
07:38 - we will print this we are just printing
07:41 - this and we will print this value here
07:45 - before calling and after calling we are
07:47 - printing value of
07:49 - a okay now this is before and after we
07:51 - are printing this so what you think what
07:55 - output you will get pause the video and
07:56 - just try this out dry run this and just
07:58 - let me know in comments section what
07:59 - would be the output let's run this and
08:02 - I'll show you the output see before
08:05 - calling a is five within modify num
08:08 - value of n is 50 because now we are in
08:10 - this so within modify num the value of n
08:14 - is 50 after calling the function value
08:18 - of a is still
08:19 - five value of a is still five and if you
08:23 - are confused like here we have a here we
08:25 - have n so let's name this as it is a and
08:29 - a
08:32 - in that case
08:33 - also you will get see same
08:37 - result before calling value of a is five
08:40 - then with within modify function value
08:42 - of here a is 50 and after calling value
08:45 - of a is five still five means the
08:48 - original value is five and that would
08:51 - not be
08:51 - changed right so let me show you the
08:54 - working how this is what is the internal
08:57 - working of this thing so let me show you
08:59 - what what is happening behind the scene
09:00 - in call by value right so here first of
09:04 - all control will go to very main
09:05 - function so in main memory obviously in
09:07 - Ram that program would be loaded right
09:10 - so in stack in stack one stack frame or
09:15 - one stack frame or the memory would be
09:17 - allocated for this this main function
09:19 - this main function so now active frame
09:21 - is this main so now in this main we are
09:24 - having a variable n which is having
09:26 - value five right
09:33 - so in this stack in this Frame or the
09:36 - value for the the local variable for
09:38 - this main would be allocated right so
09:41 - here we have n value is five now we are
09:43 - printing just C out n so five would be
09:45 - printed now we are calling modify n so
09:47 - here we have n so this five value is to
09:51 - be passed here right now active frame is
09:55 - this
09:56 - modify we have another stack frame which
09:59 - is is pushed into this stag now active
10:01 - frame is this modify right now here we
10:03 - have a parameter this is argument this
10:05 - is parameter so here we have again n
10:08 - which is having five so this n and n
10:10 - both are different variable right this
10:12 - is local to Main and this n is local to
10:14 - this modify right now n is 50 so here we
10:17 - have n is 50 now it will print 50 it
10:20 - will print 50 modify n now as soon as we
10:23 - see this closing bracket means control
10:26 - will go back to the calling function or
10:28 - the caller function caller function is
10:29 - main here we are calling this modify now
10:32 - this is
10:33 - popped popped back from this step now
10:37 - everything is
10:40 - destroyed this n is now
10:43 - gone right because that was local to
10:46 - this function only so this memory is now
10:48 - freed so this n is still five because we
10:52 - are here the copy is to be passed and
10:56 - there we have modified the value in that
11:00 - right now modify n now see out n now
11:04 - again value is five so five would be
11:05 - printed that is why in call by value the
11:08 - actual value is still same and this
11:10 - return so this would be popped back from
11:13 - the St and stack and that's it right I
11:16 - hope you got the basic idea of the
11:17 - behind the scene how this is working
11:22 - right so now you got this what is called
11:24 - by value but what if you want to change
11:26 - the value original value
11:29 - in that
11:30 - case we cannot pass this number or the
11:34 - argument by call by value we have to
11:36 - pass this by reference so for passing
11:41 - for call by reference also we have two
11:42 - method we can use pointers or we can use
11:45 - here in C++ we have a concept of
11:46 - reference variable that also we can use
11:49 - the concept of pointer we have discussed
11:51 - in
11:52 - C if you have gone through my that
11:54 - playlist like call by value and call by
11:55 - reference call by reference using
11:56 - pointer that I'll show you here also but
11:59 - here More Concept there is there that
12:01 - that is of reference variable yes in C++
12:04 - we have a you know great concept of
12:06 - reference variable what is reference
12:08 - variable let me just tell you in brief
12:10 - in detail we'll see about this reference
12:12 - variable in a separate video it's like
12:15 - in simple time if I say it's like an
12:17 - alternative name to the variable or alas
12:19 - of the that variable suppose you have a
12:22 - nickname I have like jti Jenny or any
12:26 - nickname so if someone call jti then
12:29 - obviously I'll respond if someone call
12:30 - Jenny then obviously I will respond
12:33 - right so it's like a nickname or alas
12:34 - name or alternative name of that
12:37 - variable right so in call by reference
12:41 - we pass the values using we pass the
12:45 - reference of the variable we don't pass
12:47 - the copy of that value we pass the
12:50 - reference means basically pass it's like
12:53 - we pass the address of that variable
12:56 - right suppose uh one example we can take
12:59 - suppose I'll give you or me and my
13:02 - friend are
13:03 - having uh something in Google Drive I
13:06 - have sent something in Google Drive and
13:07 - we both have link of that so and we have
13:11 - access to
13:12 - modify to that document or to that thing
13:15 - so if I will modify that document here
13:19 - then obviously my friend will see that
13:21 - modify document or if my friend will
13:24 - modify in that Google Drive that
13:26 - document then I will also see that
13:27 - modified document right because we both
13:30 - are having address or link of that one
13:32 - file the file is one only data is one
13:35 - only and we are having address of that
13:38 - data so we can modify that data and both
13:42 - me and my friend will see that
13:44 - modified
13:46 - document right and if me and my friend
13:49 - if suppose I have a document and I sent
13:52 - that document using Bluetooth or
13:54 - something else some other software I
13:56 - have shared that document on WhatsApp to
13:58 - my friend right so we both have copy of
14:00 - that document if my friend is going to
14:02 - modify that
14:03 - document then that modification will not
14:06 - be you know there in my file because I
14:09 - have my original file now we both both
14:12 - are having copy so that is like call by
14:15 - value but if that Google Drive example
14:17 - is like called by reference right so we
14:22 - just create a reference
14:24 - variable right so how this is going to
14:27 - work how to create reference variable we
14:29 - just use that ment symbol it's not like
14:33 - address of here right it's ment symbol
14:37 - right so here we pass a only but while
14:42 - in this definition of the function we
14:45 - are having here
14:47 - int this m per a or if you take any
14:51 - other variable that also you can take
14:53 - right suppose I'm taking X
14:55 - here so here x is equal to
15:02 - 50 value of x and here we are printing
15:07 - X right so now this this x is now
15:11 - reference variable of this
15:13 - a
15:21 - right so obviously in declaration also
15:24 - you have to modify int and the S perent
15:26 - symbol because here we are using
15:29 - reference variable so this name of the
15:31 - variable also you can take that is also
15:33 - one but that is optional in declaration
15:36 - right now it will modify the actual
15:39 - value
15:42 - see okay let me
15:49 - just see before calling function the
15:52 - value of a 5 within modify value of x is
15:55 - 50 and after calling the function value
15:57 - of a is 50 it has been
16:00 - modified because here now this reference
16:04 - variable this X and A both are pointing
16:07 - to the same
16:09 - location right let's uh understand this
16:14 - thing see if I give you example of a
16:17 - reference variable like I have int a is
16:19 - equal to
16:20 - 5 and we have a reference variable
16:23 - int this ENT symbol and B is equal to a
16:30 - now the both b and a now this B is
16:33 - alternative name of this
16:35 - a so what do you think what it will
16:38 - return if suppose both A and B are same
16:40 - like suppose J and Jenny both are same
16:43 - so obviously address of Jenny address of
16:44 - JY both are same so this both the
16:47 - statement should print same
16:50 - address right because this B is
16:53 - alternative name of the say so B is like
16:55 - reference variable here let's run the s
16:58 - c it will work or not so address of a is
17:01 - this and address of B is this see both
17:04 - addresses are
17:09 - same let's put andle here for a new
17:13 - line see now A and B both are having
17:17 - same address means both are same
17:19 - variable just with Alia's
17:23 - name right if you change in this
17:26 - a now a is equal to
17:32 - 56 and if you print here see
17:36 - out
17:45 - B so what it will print
17:50 - 56 see
17:52 - 56 we are just changing a but B is
17:57 - printing 56 and before this a56 if you
18:00 - print B
18:09 - then first B was five then it is 56 so
18:12 - first is five then 56 so I hope you got
18:15 - little bit idea of reference variable
18:17 - right in detail you'll see in different
18:18 - video it's not exactly pointer these
18:22 - are no similar like pointers but are
18:25 - having some differences so we'll see in
18:27 - a separate video uh difference between
18:29 - pointer and reference variable right but
18:31 - for now I hope you got the basic idea
18:34 - right of reference variables so that is
18:38 - why here I'm just creating and you have
18:41 - to declare while declaring you have to
18:43 - put this this ment symbol in declaration
18:47 - that's it and the data type int because
18:51 - this a is of int type so here data type
18:53 - of this reference variable while
18:55 - creating should be same because we are
18:57 - passing a that is of type and this x is
19:00 - just a reference variable right of this
19:02 - a or alas of a so just pass a here
19:05 - create reference variable so now both
19:07 - are pointing to same memory location so
19:09 - whatever you will change in this x that
19:12 - obviously would be changed in the
19:13 - original value right so that would be
19:15 - reflected outside of this function also
19:18 - outside of this function also right now
19:21 - one is this using reference variable in
19:23 - C++ this is the concept in C++ not in C
19:26 - we can uh achieve this call by reference
19:28 - but other than this we can use pointers
19:30 - as well right now if you're using
19:33 - pointers if you have a basic idea of
19:35 - pointer then how we can use because
19:37 - pointer variable contain address of
19:39 - another variable so we pass here address
19:43 - of the
19:44 - variable right so we pass here proper
19:47 - address of operator we'll use but here
19:50 - we will not call it address of operator
19:53 - it's just a symbol and percent symbol
19:55 - while you are declaring a reference
19:56 - variable but here it is address of
20:00 - because you are passing the address so
20:02 - if you're passing the address so here
20:05 - you should have a pointer variable to
20:07 - receive that address because only a
20:08 - pointer variable can contain address of
20:10 - another variable so we are having
20:12 - pointer variable int this is how we
20:14 - declare pointer variable this but here
20:18 - now in Prototype also you have to change
20:22 - it because here we are using a pointer
20:24 - variable so here data type should be in
20:26 - s Str right and that is fine but here we
20:29 - cannot use simply use x because X is a
20:32 - pointer variable X is 50 is nothing
20:35 - right here we are passing the address
20:39 - so we have that address in this pointer
20:42 - variable and to access whatever the
20:45 - value at that address we use indirection
20:47 - operator and that is also estri so EST 5
20:51 - is equal to 50 now we are using IND
20:54 - Direction operator to access that value
20:55 - and we are modifying that value to 50
20:59 - now this will also modify the value of a
21:03 - right
21:04 - see before calling value of a 5 after
21:07 - calling value of pH 50 right and here
21:09 - see it is printing address value of x is
21:13 - because we are simply printing here x
21:16 - and x is a pointer variable pointer
21:18 - variable are containing address of a so
21:21 - it is printing address of a not the
21:23 - value if you want to print value then
21:26 - estri
21:28 - let's run
21:30 - this now the value is 50 after modifying
21:33 - value is 50 so this is we
21:37 - are we doing we are achieving this call
21:39 - by reference using pointer
21:41 - variable and in previous case we have
21:44 - done this using reference variable so
21:47 - three things we can do three methods
21:49 - like basically we have methods are to
21:52 - call by Val and call by reference but
21:53 - call by reference we can achieve with
21:54 - two things with pointer variable or with
21:56 - reference variable in C++ right I hope
21:59 - now you got this
22:01 - thing the mechanism and all what is
22:03 - difference between call by value and
22:05 - call by reference so if you want to
22:06 - modify the original value at some point
22:08 - of time just use reference variable or
22:10 - pointer variable right or if you don't
22:12 - want to modify the original value just
22:14 - use uh call by value but in call by
22:17 - value is a little bit slow that process
22:18 - because proper copy is to be passed
22:21 - another variable is to be created in
22:23 - that function local memory in that
22:26 - memory right so for copying also it is
22:29 - going to take some time so efficiency is
22:31 - less right so it is a little bit slow so
22:34 - better to use call by reference then no
22:37 - copy or no copy of the content would be
22:40 - done right no copy would be passed just
22:42 - the address right and we are just
22:45 - directly accessing the original data
22:47 - right no copy is to be
22:50 - done so let's see in call by reference
22:54 - here suppose here we are passing here we
22:57 - passing modify n and here we have
22:58 - address of so not address of it's just
23:01 - ENT symbol while creating reference
23:03 - variable we don't call it address of n
23:06 - right so this ment symbol and N so this
23:10 - is a reference variable let's take a
23:13 - different name here suppose here I'm
23:17 - taking
23:19 - a a is equal to 50 and here we have n so
23:23 - it's like here we have in main function
23:26 - now at first we have n which is
23:30 - five we are calling we are just printing
23:32 - five we modifying we are calling this
23:33 - modify n and here it will see we have a
23:36 - reference variable a so now active frame
23:40 - is
23:41 - modify for this function this stack
23:45 - frame right and here we have a but which
23:50 - is which is a reference variable to This
23:53 - n so it is same as n
23:59 - right both are pointing to this same
24:01 - value
24:02 - five just an alternative name to this
24:05 - value five one is n when is a right like
24:07 - Jenny and JY both have name of me only
24:11 - right so now we call a equal to 50 means
24:14 - here only it will change
24:17 - 50 so see out n so it will print 50 and
24:21 - here also see out n now n is 5050 would
24:23 - be printed after this this Frame would
24:25 - be erased means this reference variable
24:28 - is no more now but still value has been
24:32 - modified it's like Google Drive example
24:34 - so we
24:36 - are getting 50 and after return this is
24:40 - also popped back from the stack and
24:43 - that's
24:44 - it right and if you use this using
24:48 - pointers in that case in this case in
24:52 - pointer case we are first of all main
24:55 - function would be called so a stack
24:57 - frame would be pushed to this stack
25:00 - right here we have like N5 so n a
25:05 - variable that is five we'll just print
25:07 - five modify address of n so suppose
25:10 - address of n is suppose th000
25:13 - suppose address of n would be passed
25:17 - right so address of n would be passed so
25:20 - here there should be something to hold
25:23 - that address only a pointer variable can
25:25 - hold address of another variable right
25:27 - so that is is why here I'm creating a
25:29 - variable a that is pointer variable so
25:31 - once control will go here means this
25:33 - modify on another stack frame would be
25:36 - pushed into that stake for this now
25:38 - active frame is modify right now here we
25:41 - have a but this is a pointer variable
25:44 - and that is storing address of n address
25:46 - of n is th000 so it is storing
25:50 - th000 here we have th000 obviously now
25:53 - this is pointing to here only because
25:56 - address is th so using address we can
25:58 - access the value if you have address of
26:00 - me then you can obviously access me you
26:02 - can send gift right but you don't have
26:04 - address okay it's fine I don't need
26:07 - gifts
26:09 - now we will will uh we want to modify
26:12 - this five so if you simply say a is
26:14 - equal to
26:15 - 50 that would be error you cannot
26:18 - directly modify your pointer variable or
26:19 - address something like this right so you
26:23 - want to fetch whatever the value at this
26:25 - address so for that we use IND Direction
26:27 - operator which is EST so s a is equal to
26:30 - 50 SRI a means s th000 s th000 means
26:35 - whatever the value at th000 Value is
26:37 - five so five this value will be modified
26:40 - to 50 and now it will print here we have
26:45 - not n here we have S A if you want to
26:48 - print this value 50 so in Direction
26:52 - operator and a so 50 would be printed
26:55 - again we are printing here n so n is
26:56 - also 50 50 would be printed so now
26:58 - original value has been modified using
27:01 - pointer variable means this is called by
27:03 - reference using pointer variable and
27:05 - that was before we have discussed call
27:07 - by reference using reference variable
27:10 - right so if we have pointers like in C
27:12 - we have pointers but this reference
27:14 - variable concept is in C++ so what is
27:16 - use of this that thing yeah there is
27:19 - some you know drawbacks and also some
27:21 - advantages of using reference variable
27:22 - but that we see uh we'll see in
27:25 - different video separate video
27:27 - everything about reference variable and
27:28 - pointers and the difference between
27:30 - these two I hope you got the basic idea
27:32 - and the mechanism behind this call by
27:34 - value and call by
27:36 - reference so that's it for this video I
27:38 - hope you got this if you have any doubt
27:39 - you can just let me know in comment
27:40 - section right so in the next video we'll
27:43 - see some more about function some
27:44 - questions and how to pass arrays to a
27:46 - function how to pass string or how to
27:48 - pass a function to a function these
27:49 - things right so now I'll see you in the
27:51 - next by bye take care