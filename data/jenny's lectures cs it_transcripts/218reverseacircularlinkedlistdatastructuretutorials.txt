00:00 - see as we have discussed how to reverse
00:02 - a singly linked list right what a
00:04 - reverse means suppose I have four node
00:07 - in the list right and in circular linked
00:11 - list the last node will contain address
00:13 - of the first node and we are maintaining
00:14 - only in the tail pointer tail pointer is
00:16 - containing address of the last node
00:18 - right so now what the reversing means we
00:20 - are not going to swap these nodes right
00:23 - what we actually do we are going to
00:25 - reverse these legs see here each node is
00:29 - containing address of the next node
00:30 - right
00:31 - but after reversing what it should look
00:34 - like this node would contain address of
00:37 - the previous node we are going to
00:38 - reverse this link right means now see
00:42 - this node is containing address of the
00:43 - next node that is 150 but after
00:45 - reversing this node would contain
00:47 - address this should contain address so
00:49 - the previous node that is here we will
00:51 - store 500 right this node also contain
00:54 - address of the previous node that is we
00:56 - are going to reverse this link we are
00:58 - going to reverse this link so see it is
01:00 - almost same as reversing a singly linked
01:03 - list that we have already discussed only
01:04 - difference is 1 now in this case last
01:07 - node is containing address of the first
01:08 - node but after reversing obviously we
01:11 - are going to reverse this link also so
01:13 - now this node is containing address of
01:15 - the this node now we are going to
01:17 - reverse this now this node should
01:19 - contain address of this node that is
01:21 - this node now should contain 600 so now
01:24 - we are going to reverse this link
01:26 - because after reversing this should be
01:28 - the last node and one more thing now
01:30 - after the versing tail good point here
01:33 - right so when you will display the link
01:36 - list after reversing then then it should
01:38 - print minus 3 6 1 & 7 now for this how
01:42 - you will do this reverse operation see
01:45 - suppose at some point of time I have a
01:48 - pointer to this node right obviously we
01:51 - are going to take some pointers extra
01:53 - pointers because we cannot move this
01:55 - tail right so forever thing we are going
01:57 - to traverse the link this list and with
02:00 - the traversing only we are going to
02:02 - reverse these links right so now suppose
02:04 - I have a pointer M pointing to this node
02:08 - now in this node
02:10 - I should store what value of address of
02:13 - this node for reversing this link right
02:15 - so suppose I have stored temp of next
02:19 - equal to from where I can get this
02:20 - address until I have this address
02:22 - so temp of next equal to L it means here
02:26 - I have stored what rather than this I
02:28 - have 600 now so now you can say this
02:32 - link is no more now this node is
02:33 - pointing to this node okay fine but now
02:37 - this link is no more then how you will
02:38 - reach till this node because obviously
02:40 - we are going to reverse this link also
02:42 - this link also right we need to reverse
02:44 - all the links so now suppose by applying
02:48 - some logic I'll tell you that logic we
02:50 - we have reached till here we have moved
02:53 - our temp here right we will discuss that
02:57 - logic also and we will write that code
02:59 - now in temp of next I will store what
03:02 - this node address of this node address
03:04 - of previous node so we have to maintain
03:07 - address of this node also because if you
03:10 - remove temp here then have you will from
03:12 - there you can get this address 500
03:14 - because we have only one pointer left
03:16 - but tail pointer is pointing to the last
03:18 - node right so now you have to maintain
03:21 - one another pointer suppose I am taking
03:23 - previous pointer so before moving temp
03:25 - forward we are going to set this
03:28 - previous also now in previous we have
03:30 - 500 so we can write temp of next is
03:32 - equal to previous that is also fine
03:34 - now you have broken this link and now
03:37 - here I have 500 so this is now pointing
03:40 - to this node right now have you will
03:43 - move here so you need some extra point
03:47 - or one more pointers there so basically
03:48 - three pointers we need here fine what
03:52 - you can do before setting this before
03:54 - breaking this link before setting here
03:56 - 500 what you can do we can set suppose a
04:00 - pointer next node third pointer to this
04:04 - node and how you can do in next node
04:07 - next we can write next node is equal to
04:09 - temp of next that is 150 so here I have
04:11 - in next node we will have 150 so this
04:14 - will point to here so now you can break
04:18 - this link you can set temp of next is
04:19 - equal to previous and we have a pointer
04:22 - to next node also so we
04:24 - can reach till this mode right after
04:26 - that we can move the stem then we will
04:29 - move this previous also and the next
04:31 - rule becomes this one and now we are
04:34 - going to move till the snowed right till
04:38 - we reach here till the last node it
04:41 - means we are going to take basically
04:43 - three pointers here rather than temp I
04:45 - am taking what current you can take any
04:47 - name current previous and next node
04:50 - right so see how we will write down the
04:52 - code for this thing so as you can see we
04:55 - have declared three pointers preview
04:57 - pointer current and next node and these
05:00 - pointers are pointer to node because
05:02 - these are containing address of the node
05:03 - so here I am taking struct node right
05:05 - this thing I guess you already know that
05:07 - user defined area type the two parts are
05:09 - there this node data part and one is
05:11 - next point two this will contain address
05:12 - of the next only we have maintained only
05:14 - the tail pointer right so this thing we
05:16 - this is what the global part this we are
05:19 - going to use in all the functions if you
05:21 - call that create CLL function and
05:23 - display function or this function so
05:25 - this thing I'm going to write globally
05:28 - out of all these function and out of
05:30 - main function you can say after header
05:32 - files directly right after that you can
05:35 - define this reverse function now see we
05:37 - have taken three pointers now for
05:39 - reverse obviously we are going to
05:40 - traverse the link so for traversing we
05:43 - need one pointer so I'm taking that
05:45 - current pointer that is main pointer
05:47 - these previous and next node you can say
05:49 - these are supportive pointers of this
05:51 - current one is containing one is storing
05:53 - address of previous node and this will
05:54 - contain address of the next node right
05:57 - so first of all what you will do now we
06:00 - are going to start from head Nona from
06:03 - the first one we're going to start the
06:04 - traversing so we are not having any head
06:07 - pointer so how you can come to know that
06:09 - the which node is the first node so tale
06:12 - of next this will always contain address
06:15 - of the first node so how I can do
06:17 - current is equal to tail off next it
06:20 - means now current is pointing to this
06:22 - node in tail next we have 500 in current
06:25 - now we will store 500 so now as you can
06:27 - see this current is pointing to this
06:29 - node that is to the first node right now
06:33 - you can check if L is equal to 0 it
06:35 - means list is empty you cannot reverse
06:37 - the list
06:38 - right so you can after this you can
06:40 - write down this condition also if L
06:43 - equal to equal to 0 it means list as MPT
06:46 - you can print this thing ah
06:49 - if you want to print that's the rule so
06:51 - that if suppose in list we have only one
06:53 - node how you can check that thing we
06:56 - have discussed when we were discussing
06:57 - how to delete node from the circular
06:59 - linked list right if suppose only one
07:01 - node is there then tail good point here
07:03 - and current for point here right and
07:05 - this node would contain address of
07:07 - itself that is here also 500 here also -
07:10 - so you can check else if that tail of
07:14 - Nyx does equal to is equal to pair or
07:15 - you can say current of next is equal to
07:17 - is equal to current right in that case
07:19 - you can directly poll that display
07:21 - function or you can say that there is
07:22 - only one node in the list and only this
07:24 - if seven is the node then seven would be
07:26 - printing after display after reversing
07:28 - the list else we are having four nodes
07:30 - now now see what is the situation now
07:32 - how you will write this thing here I
07:35 - will write a while loop while this
07:40 - current because for traversing we are
07:42 - using this current node when you will
07:44 - stop here right when this current
07:47 - becomes when current will point here it
07:50 - means current is pointing to the tail
07:52 - node it means current becomes equal to
07:55 - tail so we are going to move till
07:57 - current becomes until current becomes
08:00 - still so current is not equal to a till
08:04 - then we are going to move this current
08:05 - right so before moving this current
08:08 - obviously first of all we are going to
08:10 - set our previous pointer right so here
08:12 - you will write the spring is equal to
08:15 - current now the spring is containing
08:18 - five hundred so now this is pointing to
08:21 - this node right now only difference in
08:24 - this case is now it should have address
08:27 - of the this node right because we are
08:31 - going to reverse this link also right
08:33 - but at starting will not reverse this
08:35 - link we are going to reverse this link
08:38 - at last fine
08:40 - because if in while loop only you will
08:43 - write this statement now I can write
08:45 - previous off next here I want to store
08:47 - address of this thing that is 600 so
08:49 - here I can write
08:50 - of next is equal to tail right so if you
08:55 - write that statement in while loop then
08:57 - so then after some iteration current
08:59 - would point to this node in that case
09:01 - previous will point to this node right
09:03 - because this is the previous node now
09:05 - again that condition would be executed
09:08 - means previous of next as equal to tail
09:10 - so previous of next is this this pointer
09:13 - now so here you will store address of
09:14 - 600 so now this node would point to this
09:16 - node but that we don't want and after
09:19 - that previous would be this one current
09:20 - would be this one in that case also
09:22 - previous next is equal to tail so again
09:24 - and again that line would be executed so
09:26 - we don't want that thing so first of all
09:27 - we are not going to reverse this link we
09:29 - are going to reverse what next two links
09:32 - it means we are not going to change this
09:34 - value it means we are not going to break
09:35 - this link right so this link is still
09:37 - there we are going to break this link
09:39 - first of all we are going to store here
09:42 - what address of the previous node that
09:43 - is 500 fine and this link would be there
09:46 - still this link will go to be there at
09:48 - last we will update this pointer so now
09:51 - here obviously we will move this current
09:55 - now so here you will write current has
09:57 - equal to so now in current what we need
10:00 - to store the value of the snake this
10:02 - this node because we are going to move
10:03 - this current now current is pointing to
10:05 - this after that current will point to
10:06 - this node that is 200 right so now here
10:10 - how we can store this 200 in current see
10:12 - now here you need to set this next node
10:15 - pointer also see at starting we have
10:17 - said current is equal to pail next so
10:20 - after this line after this line before
10:22 - this if statement what you will write
10:24 - what you will write you will set next
10:26 - node also next node equal to current off
10:30 - next it means we have set both current
10:35 - and next node pointer now what is
10:36 - current of next current of next that is
10:38 - 200 so here now I have 200 so now this
10:40 - is pointing to this node right so we
10:43 - have said both pointers had starting
10:45 - current and next node after that you
10:47 - will write this if condition if tale
10:49 - equal to equal to 0 here you can print
10:50 - list as empathy right and in else part
10:54 - you will write this while loop now see
10:57 - in current what you will store address
10:59 - of this node from where you can get
11:00 - address of this node that is the next
11:02 - containing this node address of this
11:05 - node so now current is having 200 right
11:09 - so now parent is pointing to this node
11:12 - fine now we have previous we have said
11:15 - previous pointer also current also we
11:17 - have right so now we can update this
11:20 - part here you will store address of
11:24 - previous node for reversing that is 500
11:27 - so here what I can write how you can
11:30 - access the spot current is equal to
11:32 - sorry current of next equal to how you
11:35 - can exist this part current off next
11:37 - equal to pre whatever the value in
11:41 - previous node right so now see we have
11:46 - 500 so here we have 500 now this node is
11:50 - pointing to this node this link is no
11:53 - more now so now see the problem is next
11:57 - node is also pointing to this node now
11:58 - how you can do it till this node so this
12:01 - thing you need to take care you will you
12:03 - need to write which line first so first
12:05 - before updating this we will move this
12:07 - next node in next nor do you want to
12:09 - store 150 from where I can get 150 here
12:12 - before abrading here I was 150 I was
12:15 - having 150 right so here you can write
12:17 - before this line next node equal to
12:22 - current off next current next means here
12:28 - before updating 150 was there so now
12:31 - current node is pointing to this node
12:33 - right and now you can update this now
12:36 - current of next is equal to previous
12:38 - that is 500 now you can break this link
12:41 - there is no problem because we have
12:42 - already set a pointer to next node right
12:44 - so now we will we are going to repeat
12:46 - these steps till here see again why loop
12:48 - current not equal to tail current is 200
12:51 - tail is 600 so that is fine condition is
12:54 - true again will enter into this loop now
12:55 - previous is equal to current that is in
12:57 - previous we will store 200 so now
13:00 - previous is pointing to this node right
13:03 - now we will move this current current is
13:06 - equal to next node in next node we have
13:08 - 150 so in current we have 150 now
13:11 - current is pointing to this node right
13:15 - again we will move our next node should
13:17 - point here next node is equal to current
13:19 - of next current of next current is
13:21 - pointing to this node so current the
13:23 - next is 600 so in next node we have 600
13:25 - so now next node is pointing to this
13:27 - node so now we have set drillings now
13:30 - you can update this value so now here
13:33 - see how you will access this part link
13:35 - to this notice current of only current
13:38 - is pointing to this node so current of
13:39 - next equal to previous in previous you
13:42 - have 200 so here you will store 200 so
13:45 - see what address of previous node is 200
13:47 - so now this is pointing to this node
13:49 - right again current is not null sorry
13:54 - tail current is 150 tail is 600 so the
13:57 - condition is true we are going to enter
13:58 - into this loop again see previous is
14:00 - equal to current so here we will store
14:02 - now whatever the value in current that
14:04 - is 150 right so now you can see previous
14:07 - is pointing to this node we will move
14:10 - this current current is equal to next
14:12 - node so here we will store 600 right so
14:15 - now current node is this one and now
14:19 - next node is next node equal to current
14:22 - next now in current of next Bo 500 so in
14:25 - next node we will store 500 it means you
14:30 - can see next node is containing address
14:32 - 500 that is now this next node of this
14:35 - next node would point to this node right
14:38 - to the first node fine current of next
14:41 - current is pointing to this node current
14:43 - of next is equal to previous in previous
14:45 - we have 150 so here I will store 150 so
14:49 - it means now 150 this is pointing to
14:51 - this node right so this link was no more
14:54 - now 150 so this link has been broken now
14:57 - right
15:00 - now we need to say to this link see we
15:03 - have set all the links now you can see
15:05 - say current not equal to till now
15:06 - current is 600 tail is also 600 so this
15:10 - condition is not true so we are not
15:11 - going to enter into while loop fine so
15:14 - now you need to update and two things
15:16 - now we will set this pointer see this
15:19 - node is the last row now so this node
15:22 - should contain address of this node now
15:24 - fine because this will be the first node
15:26 - that is 6
15:27 - now how do you can access this node
15:30 - pointer to this node is next node right
15:34 - so here what you can write in next node
15:38 - next you will store address of this node
15:40 - that is 600 and we can we we already
15:43 - know the last address the sorry that
15:45 - this of last node is always in tail
15:46 - point so here I can write a it means
15:50 - next node and next here I'm storing 600
15:54 - so now as you can see this is pointing
15:57 - to this node remaining one thing is what
16:01 - you have to move this tail now in a l
16:05 - should point to this node right so in
16:07 - tail we want to store 500 so how you can
16:10 - get this 500 see pointer to this node
16:12 - link is next doors next node is
16:14 - containing 500 so until I can store
16:17 - whatever the value in next node fine so
16:20 - now Intel we have 500 so tail is
16:23 - pointing to this node right as you can
16:26 - see we have reversed all the links as
16:28 - well as tail is pointing to this node
16:30 - and now when you will display when you
16:32 - will call that a display function then
16:33 - what are the value should be printed - 3
16:37 - 6 1 & 7 so this is how you can reverse a
16:41 - circular linked list
16:42 - see after reversing and this link is
16:44 - also there no not there now fine so this
16:48 - is I guess same as reversing of a singly
16:50 - linked list only the simple the
16:52 - difference is what here the last node
16:54 - will contain address of the next sorry
16:55 - the first node right so you have to take
16:57 - care of that link also and that link we
17:00 - will update in the last so after this
17:02 - you can write void main function in that
17:04 - main function you can keep in first of
17:05 - all create this linked list you can call
17:07 - that create CLL function then display
17:09 - function right then output would be
17:11 - before reversing 7 1 6 & 3 then you can
17:13 - call reverse function and after that
17:15 - again you can call display function so
17:17 - after that output would be minus 3 6 1 &
17:19 - 7 right so next video we will see the
17:22 - implementation of our doubly circular
17:24 - linked list see it was what a single a
17:27 - circular link ballistic fine so ice in
17:30 - the next video till then bye bye take