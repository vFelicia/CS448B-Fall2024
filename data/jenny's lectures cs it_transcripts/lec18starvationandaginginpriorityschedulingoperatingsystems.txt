00:00 - see here I'm writing can wait will not
00:04 - say a process which is ready to run
00:07 - we'll wait indefinitely note that that
00:09 - is not always true that a process which
00:11 - is having low priority but or will
00:13 - always wait for indefinite amount of
00:16 - time no sometimes it can wait
00:18 - sometimes it will be the CP would be
00:21 - allocated to that process so here we
00:23 - will write it can wait you will not
00:26 - write it will wait okay now why this
00:29 - process will be it because because of
00:31 - some high priority processes because in
00:34 - priority scheduling CP would be located
00:36 - to the processes which are having high
00:38 - priority okay
00:39 - now maybe there is a char there is a
00:42 - situation where many high priority
00:45 - processes are there are coming in the
00:46 - system so CP would be allocated to those
00:49 - processes rather than apply rather than
00:52 - a process which is having low priority
00:54 - so you can say that high priority
00:58 - processes prevent a low priority process
01:01 - from ever getting the CPU why starvation
01:07 - problem is there because of high
01:09 - priority processes prevents a low
01:11 - priority process from ever getting the
01:13 - CPU this is what the starvation problem
01:15 - is now let us take this example suppose
01:18 - we have four processes first time of
01:21 - these processes and priority of these
01:23 - processes are these processes as you 121
01:26 - 5 & 2 so first of all this suppose we
01:32 - are taking lesser the number higher the
01:34 - priority means 1 this is having the
01:36 - highest priority and this process is
01:38 - having lowest priority now the CP would
01:42 - be allocated to this process first okay
01:45 - P 2 then this P 4 then this P 3 and
01:49 - after that that this P 1 but see this is
01:52 - we are taking static 4 processes but in
01:56 - when you are working on your laptop or
01:58 - in the operating system that is not
01:59 - always true see here is it true that we
02:02 - have we have four processes running in
02:04 - your processor then until the
02:06 - termination of these four processes no
02:09 - new process will come no that is not
02:10 - always true so what are the practical
02:13 - Aereo is maybe processor has been
02:15 - allocated to this process p2 fine from
02:20 - zero first time is 5 5 from 0 to 5 then
02:24 - this p4 from 5 first time is 40 then 45
02:30 - and maybe again this then this p3 for to
02:34 - note of time that is 47 something like
02:37 - this and some some point of time at some
02:40 - point of time before the p1 is allocated
02:44 - to this CPU some another process p5
02:47 - comes with a priority number 3 then see
02:50 - if you will be located to this p5 but
02:53 - more process come p6 with priority
02:55 - number 4 one more process comes p7 with
02:59 - priority number 7 so many processes are
03:03 - coming coming and coming with priority
03:06 - higher than this p1 the number less than
03:11 - 20 having priority from 0 to 19 fine
03:14 - many processes are coming so so this p1
03:18 - would not get CPU and we cannot say for
03:21 - how much amount of time so you can say
03:23 - that p1 will wait indefinitely although
03:26 - this p1 is ready to run
03:28 - p1 is in ready queue suppose if you are
03:31 - taking the arrival time so you can take
03:33 - the arrival time also so p1 is ready to
03:36 - run p1 is in ready queue but p1 is
03:38 - waiting why p1 is waiting because higher
03:41 - priority processes are coming and cpu is
03:45 - biased because of this priority
03:47 - scheduling so CPU will be allocated to
03:50 - the processes having higher priority and
03:52 - that is why this p1 is waiting so this
03:54 - is known as starvation p1 has to wait
03:56 - for indefinite amount of time now the
03:59 - solution of this problem is solution is
04:02 - one aging so what does eating technique
04:08 - is it gradually increase the priority of
04:13 - the processes priority of those
04:15 - processes which are waiting in the
04:19 - system for a long amount of time right
04:22 - or you can say this it it is a method to
04:26 - ensure
04:26 - that processes with lower-priority were
04:30 - eventually complete their execution and
04:34 - how how they'll complete their execution
04:37 - see suppose here in this example suppose
04:41 - at some point of time this this priority
04:43 - it becomes maybe zero or one you can say
04:49 - then ultimately this p1 will get the cpu
04:52 - at some point of time find so this is
04:54 - the frontline imaging we you know
04:56 - gradually increase the priority of the
04:59 - processes which are in waiting state for
05:01 - a long amount of time here increasing
05:04 - the priority means see we are taking
05:06 - lesser the number higher the priority so
05:08 - increasing the priority means we
05:10 - decrease this number from 20 to 19 then
05:12 - 18 and 17 something like this day 0 so
05:15 - there may be a case they can give that
05:17 - after every 3 unit of time in the cpu
05:20 - this priority of the process will be
05:23 - increased by 1 so if it is given that in
05:27 - your question after every 3 unit of time
05:30 - of the cpu priority of the waiting
05:32 - processes will decrease by 1 see here
05:35 - why I am writing this decrease because I
05:38 - am taking lesser the number higher the
05:40 - priority so if you decrease this 20 and
05:44 - you do this 19 then obviously you can
05:47 - say that priority yes ultimately
05:49 - increasing if you are taking the case
05:53 - that higher the number higher the
05:54 - priority then you can write that the
05:56 - after will amount of time of cpu
05:58 - priority number of the waiting processes
06:00 - will increase by 1 something like this
06:02 - ok now see suppose it 1 some point of
06:08 - time the priority is 20 so after 3 unit
06:13 - of time priority becomes 19 because it
06:17 - will be decreased by 1 or ultimately you
06:20 - can say priority is increased because we
06:22 - are taking lesser the number had a
06:23 - priority then after 3 unit of time it
06:26 - will become 18 then again after 3 unit
06:29 - of time it will become 17 see this 3
06:33 - unit of time means maybe some other
06:36 - processes are running in the CPU while
06:38 - you are drawing again chart then you
06:39 - will
06:40 - more processors which are coming having
06:43 - higher priority than this 20 then those
06:46 - processes are running and with the
06:48 - execution of those processes the
06:51 - priority of this process yes
06:53 - increasing so after three unit of time
06:57 - this becomes 16 then 300 of time it
07:00 - becomes 15 like this and ultimately at
07:02 - some point of time maybe this priority
07:05 - will be zero so ultimately when priority
07:10 - will be zero then that process is at
07:12 - that point of find this p1 will be of
07:14 - having the highest priority so p1 will
07:17 - ultimately get the CP this is the fund
07:21 - of ageing see this ageing technique can
07:25 - be implemented in many ways but both are
07:28 - having the same principle and what in
07:30 - that principle is that the priority of
07:33 - the processes should increase when the
07:36 - process waits in the system okay so see
07:41 - here I'm taking the priority of the
07:44 - waiting processes will be increased by
07:46 - one I have written priority of the
07:48 - processes will decrease by one why I
07:51 - have written this decrease by one
07:52 - because see this priority if we decrease
07:54 - this priority 20 to 19 then ultimately
07:57 - what we can say is because here the
08:00 - assumption is lesser than number higher
08:05 - the priority fine so if the number is
08:12 - priority is 19 it means the priority has
08:15 - been increased by 1 ultimately that is
08:18 - the case here if it is written that
08:20 - higher the number and higher the
08:22 - priority then then you will see that
08:25 - then you can write here that the
08:27 - priority of waiting processes will
08:28 - increase by 1 means 20 to 21 ultimately
08:32 - 21 is having higher priority than the 20
08:36 - okay so sometimes they can also say that
08:41 - priority of running processes as well as
08:44 - waiting processes will be increased
08:46 - maybe by some amount of time by 1 or 2
08:50 - but here we are taking just the case the
08:53 - priority of waiting
08:53 - processors only increases okay so you
08:56 - have to take care of that thing also
08:58 - maybe in question they can do priority
08:59 - of running processes will be increased
09:01 - by one and priority of waiting processes
09:04 - will be increased by two something like
09:05 - this
09:06 - okay that is that is but the simple
09:09 - Fanta is the you know that main main
09:11 - fund is that the priority always the
09:13 - priority of the process who are ready to
09:15 - run but who are waiting for the CPU then
09:19 - the priority of those processes will be
09:21 - increased fine
09:23 - and this starvation is different from
09:26 - convoy effect convoy if it comes in
09:29 - first Confessor and this starvation
09:30 - problem comes in shortage of four she
09:32 - running algorithm and priority
09:33 - scheduling algorithm so I have discussed
09:35 - the difference between convoy effect and
09:37 - starvation problem and the starvation
09:39 - problem very nicely in the one of my
09:41 - previous video I'll provide you the link
09:43 - in the description box you can check it
09:44 - out there okay so I'll see in the next
09:46 - video till then bye bye take care