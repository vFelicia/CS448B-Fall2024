00:00 - in the series of learning programming in
00:02 - c in this video i am going to talk about
00:04 - structure of a c program what is basic
00:07 - structure of a c program how the program
00:09 - looks like how to write a c program we
00:11 - will also see this with a simple example
00:15 - we'll take a simple example and we'll
00:16 - write a program here in the previous
00:18 - videos i have already discussed some
00:20 - basics like what is c
00:22 - introduction to programming why do you
00:24 - write programs low level languages high
00:26 - level languages language translators
00:28 - features of c language now let us
00:30 - discuss the basic structure of a c
00:32 - program
00:33 - what sections are there in a c program
00:36 - how you can write a c program what you
00:38 - have to include and see i am going to
00:40 - discuss all the sections but some
00:43 - sections are optional and some sections
00:45 - are essential to include in your program
00:48 - it is not necessary that you have to
00:49 - include all the sections in your program
00:52 - when you are writing a program
00:53 - so very first section is your
00:55 - documentation section
00:57 - or you can say it is comment section
01:00 - here what you include comments means
01:03 - what information you include in this
01:05 - section
01:06 - like
01:07 - the author of that program who has
01:09 - developed that program date
01:11 - the date and time of development of that
01:13 - program and a brief description about
01:16 - that program like suppose let us take
01:18 - one example i want to write a program
01:20 - for addition of two numbers so what you
01:23 - can include in this documentation
01:25 - section this you can include author is
01:27 - jayanti khatri you can include date as
01:29 - well as time and you can also write down
01:31 - a brief description like program for
01:32 - addition of two numbers and now these
01:34 - are comments you have to include this
01:37 - line in comment section like you you can
01:39 - say
01:41 - if you write this one two forward slash
01:43 - this is single line comment in c
01:45 - language now what does this mean
01:48 - this line would be ignored by the
01:50 - compiler compiler will not execute this
01:53 - line right
01:55 - it compiler is not going to convert this
01:57 - line into object code completely
01:59 - compiler will ignore this line and
02:01 - suppose
02:02 - this line also
02:04 - it is a comment and if you want to
02:07 - comment multiple lines then there is
02:09 - also a multiple line comment
02:11 - here you can write forward slash as
02:14 - trick these two lines right
02:17 - and here is trig and this forward slash
02:20 - this is single line command this is
02:22 - multi this is multiple line commands
02:24 - right so whatever command you want to
02:27 - include you can include either a single
02:28 - line comment or multiple line command so
02:31 - now what is the purpose of including
02:33 - this thing if compiler ignore this thing
02:36 - compiler will not execute this thing
02:38 - it is just for understanding
02:40 - for future use like suppose
02:43 - if anyone wants to use your program in
02:46 - future and he wants to understand what
02:49 - this program is all about
02:51 - then rather than looking at code c
02:53 - addition of two number it is simple
02:55 - having maybe four or five lines simple
02:57 - as that you can look that program and
03:00 - you can you can easily figure out this
03:01 - program is about addition of two numbers
03:03 - but actual programs when they develop
03:05 - software the programs are having maybe
03:07 - hundreds of lines line of four thousand
03:09 - lines of code so by looking at that code
03:12 - we cannot easily understand what this
03:13 - program is all about but if you look at
03:16 - this documentation section
03:18 - which is above that program you can
03:20 - easily understand that who has developed
03:22 - this program the date and the time and
03:24 - what this program what this code is all
03:26 - about
03:27 - just by looking at documentation section
03:30 - right so this section
03:32 - is just for the understanding and a
03:35 - reading of the program to enhance the
03:37 - reading of the program to understand the
03:39 - program what the program is all about it
03:41 - is optional
03:42 - generally when you write program when we
03:44 - write program we do not include this
03:47 - documentation section right but it's
03:50 - better to include it should be in your
03:52 - practice but
03:53 - because in future when you will write
03:55 - those programs then obviously you have
03:56 - to include documentation section so it's
03:59 - better you start including this section
04:01 - from today only right when you write
04:03 - program but this is completely optional
04:06 - second section is
04:07 - link section here we include
04:10 - header files uh header files means like
04:12 - we include hash
04:15 - include stdio.hash is what it is
04:17 - preprocessor right
04:19 - now
04:20 - now stdio means the full form is
04:23 - standard input output don't touch
04:25 - extension why because it is header file
04:28 - now there are some predefined functions
04:30 - in c library built-in functions and we
04:33 - use those functions that i have already
04:34 - discussed when we're discussing the
04:36 - features of c language that c is having
04:37 - a
04:38 - many built-in functions many predefined
04:41 - function you can directly use those
04:43 - functions
04:44 - now this header file is for what
04:47 - standard input output means for which
04:50 - function for printf and scanf
04:54 - sprintf is what for output and scanf is
04:58 - what to take input right
05:00 - now see
05:02 - these are predefined functions and where
05:05 - these functions are defined in this
05:07 - library in this header file
05:09 - dot h so if you want to include this in
05:12 - your program
05:14 - then you have to include this
05:16 - header file why so because see compiler
05:20 - doesn't understand what
05:22 - does that mean printf we understand
05:24 - printf is what to give output to print
05:27 - something on screen but compiler is not
05:29 - having its own brain he'll not
05:31 - understand what printf means so you have
05:34 - to provide the meaning the code
05:36 - right
05:37 - and when compiler will look at that code
05:40 - then only compiler is able to understand
05:42 - that printf means he has to print
05:45 - something and where that definition of
05:47 - this
05:48 - function is where that code about this
05:50 - function is written in this header file
05:53 - in this library
05:54 - stdio dot h
05:56 - so see same suppose if you want to add
05:59 - two numbers
06:00 - then simply if you write sum
06:03 - compiler is not able to understand sum
06:05 - is what but if you write down the logic
06:07 - the code sum is equal to suppose a
06:09 - variable a plus
06:10 - b
06:11 - yeah then compiler will do sum of two
06:13 - variables a plus b numbers and will
06:17 - add will store that
06:19 - number into in some variable right
06:22 - same
06:23 - for printf also you have to define you
06:25 - have to tell the compiler what printf
06:28 - means
06:29 - so that meaning
06:31 - is in this header file studio dot h it's
06:34 - already
06:35 - defined you don't have to write down the
06:37 - code in your program
06:38 - for printf function you can directly use
06:40 - this function but you have to include
06:42 - the setter file to tell the compiler the
06:45 - meaning of this thing
06:47 - same as scanf the meaning of this thing
06:49 - is also
06:50 - in this header file
06:51 - if you include hash
06:54 - include corner dot h corneo means
06:56 - console input output the full form
06:58 - some sometimes they can ask in viva
07:01 - this is for what if you use a function
07:03 - gate ch
07:05 - it is basically to hold the screen
07:07 - output screen when when we will discuss
07:09 - a complete program then we will discuss
07:11 - what does that mean so
07:14 - the function or this function is already
07:16 - defined in this header file
07:19 - right
07:19 - so when this you will write this in your
07:22 - compi in your code compiler will not
07:24 - able to understand if you will not
07:25 - include this file
07:27 - but to tell the compiler the meaning of
07:29 - this gets yes then why
07:31 - why you are including this file you have
07:33 - to you want to hold the output screen
07:35 - so that meaning that code of this
07:37 - function is already written in this
07:39 - library
07:41 - right that is why you are including this
07:43 - new rotate
07:44 - now suppose if you want to use some math
07:46 - function like square root sqrt or power
07:50 - those functions are defined in math
07:52 - dotage at that time you will include
07:54 - here hash include math dot
07:56 - if you want to uh use some string
07:58 - functions like uh
08:00 - strlen
08:02 - you want to find out length of a string
08:04 - str cmp string compare string
08:07 - concatenation
08:08 - then compiler is not aware about this
08:10 - thing let string length means he has to
08:13 - find out length of the string no
08:15 - where this definition is written
08:17 - the code of this function is written the
08:19 - meaning of this function is written in
08:21 - the library string dot h
08:23 - so there you will include hash include
08:25 - string dot h then compiler will come to
08:27 - know yeah string length str alien means
08:30 - he has to he will have to find out the
08:33 - length of that string
08:35 - right that is why we include this header
08:37 - file and this is what
08:39 - link section
08:40 - because the linker is going to link this
08:43 - thing the code the c library code means
08:46 - the predefined function code into your
08:49 - program
08:50 - how the linking and loading is done that
08:51 - also will discuss when we will discuss
08:53 - the compilation process so this is what
08:55 - link section
08:56 - when you include the header files third
08:58 - section is what definition section
09:01 - this section defines all the symbolic
09:03 - constants now what does that mean
09:06 - suppose i want to write in a program i
09:09 - want to
09:10 - use pi
09:12 - you know the
09:14 - pi means 3.14 right
09:17 - so i'm using this pi
09:19 - in a program
09:20 - suppose 10 times
09:22 - right
09:25 - so rather than writing 3.14 10 times in
09:28 - a program what you can do you can
09:31 - write down here hash
09:33 - define
09:35 - by
09:37 - 3.14
09:38 - so if you use this hash defined this is
09:40 - what macro definition so whenever in the
09:43 - program this is written pi suppose 10
09:45 - times pi is written in a program so
09:48 - everywhere that
09:51 - will replace that will be replaced with
09:53 - this value
09:54 - right
09:55 - let us suppose one more more example i
09:57 - am writing here hash define
10:00 - suppose any max value or mean value max
10:03 - is 100
10:04 - and max i'm using in a program in
10:06 - suppose 10 times or 15 times so 20 times
10:10 - so rather than writing 10 times 100 100
10:13 - 100 you can write down this thing one
10:15 - more advantage is what if you want to
10:17 - suppose change value of max
10:20 - suppose i want to change it from 100 to
10:23 - 200
10:24 - so if you will not write this thing if
10:27 - in a program you have written that value
10:29 - 100 10 times
10:30 - then
10:31 - at 10 places you have to update that
10:34 - value 200
10:35 - but if you use this thing
10:38 - then in a program rather than this value
10:41 - you can simply write down the name max
10:44 - so when you are going to update then you
10:46 - just have to update here only 100 to 200
10:49 - that's it
10:50 - and that will automatically be replaced
10:52 - by 200 every time you write max in a
10:56 - program
10:58 - so that is you can say advantage of
10:59 - using this these macro or definitions or
11:01 - here you can also write down a small
11:04 - function definition like next comes to
11:06 - global declaration section see in a
11:09 - program we use two types of variables
11:10 - and functions one is local another is
11:13 - global what are those global suppose
11:16 - local variables
11:18 - they can be used within a within that
11:21 - function only where you define those
11:23 - variables like if i am writing a
11:25 - function ah here void
11:29 - sum
11:31 - and if suppose i am
11:33 - declaring a variable a here so
11:35 - a i can use within this function only
11:38 - this a variable i cannot use in main
11:42 - function or maybe another function like
11:44 - maybe any function is therefore
11:46 - subtraction there i cannot use this a
11:49 - but suppose here in a program we have
11:51 - five functions and in all the five
11:53 - functions we are using same variable
11:55 - that is a
11:57 - so now you can globally declare that
11:59 - variable if you globally declare that
12:02 - variable you can use that variable
12:04 - throughout the program in every function
12:06 - of a program in main also and in every
12:08 - user defined functions but if you will
12:10 - not globally declare then if you have
12:13 - five user defined functions like sum or
12:15 - subtraction multiplication division or
12:17 - any function
12:18 - for every function you have to declare
12:20 - this variable like int a
12:23 - two times
12:24 - and five times if five functions are
12:26 - there then you have to declare this
12:28 - variable five times
12:29 - because this is what what local
12:31 - declaration
12:33 - but if you will declare here outside
12:35 - these functions and outside of main
12:37 - function then you can use that
12:40 - like int a
12:42 - then you can use this variable in every
12:44 - function throughout the program in every
12:46 - function of the program
12:48 - right so the variables that are used in
12:51 - more than one functions in a program
12:54 - those are global variables and you can
12:56 - declare those variables globally outside
12:57 - of those functions as well as here you
13:00 - will declare what all the user defined
13:02 - functions will declare here suppose a
13:05 - function is to write to find out some of
13:07 - a program so here you can declare that
13:10 - some word sum
13:13 - and that's it
13:14 - again a function is suppose subtraction
13:18 - void subtraction and that's it this is
13:20 - what global declaration of a variable
13:23 - global declaration of functions now next
13:25 - is
13:26 - main main section
13:28 - this section is
13:30 - compulsory
13:31 - it is not optional
13:33 - this section is optional this section is
13:35 - also optional this you have to include
13:37 - this section is also optional but this
13:39 - is
13:40 - you have to include this is compulsory
13:42 - to include and in a program there can be
13:45 - only one main function
13:46 - this question can also be asked many
13:48 - times by how many main function can be
13:49 - there in a program only one main
13:51 - function always control will go when you
13:54 - compile that program and you run that
13:56 - program the control will go to main
13:57 - function first of all right
13:59 - so one main function can be there now
14:01 - how you will write main function like
14:04 - main
14:05 - i am writing here void main
14:09 - this is body of main function
14:11 - here you will write some statements now
14:13 - here also two parts are there one is
14:15 - declaration part
14:18 - and second one is
14:20 - executable part
14:26 - in declaration part you declare some
14:28 - variables if you want to declare like in
14:30 - a into b in some or any variable and in
14:33 - executable part it it is what
14:35 - the logic like if you want to find out
14:37 - sum
14:38 - then executable part means sum is equal
14:41 - to a plus b
14:42 - you are writing down the logic printf uh
14:44 - you can say enter value of a and b scan
14:47 - f then sum is equal to a plus b then you
14:48 - can print the sum print uh sum and this
14:51 - thing that will discuss the syntax that
14:53 - is executable part the logic and the
14:56 - declaration of variables that is what in
14:59 - declaration part so two parts are there
15:01 - in main function and this is compulsory
15:03 - to include
15:04 - right always control will go ah to main
15:07 - function the first line of main function
15:10 - when you
15:10 - compiling that program right
15:13 - so next is
15:15 - we have sub program section in this
15:18 - section you will include
15:20 - all the user defined functions
15:22 - like
15:23 - after main you can write down so here we
15:26 - can have
15:27 - many user defined functions 1 2 3 4 up
15:30 - to n
15:30 - and generally all the user defined
15:32 - functions
15:34 - comes
15:35 - immediately after main function but that
15:38 - is not compulsory they may appear in any
15:40 - order generally we write just after
15:43 - main function and you call these user
15:46 - defined functions into main function and
15:48 - these are also optional it's not like
15:51 - that you have to compulsory it's
15:52 - compulsory to include user defined
15:54 - function in your program no
15:56 - but yeah main function is main section
15:58 - to include main section that is
16:00 - compulsory and in main also two parts i
16:02 - have
16:03 - told you declaration and executable part
16:05 - so in declaration part we declare those
16:07 - variables that are used in executable
16:09 - parts
16:10 - right and
16:12 - it is completely optional to include
16:14 - declaration part in some program it is
16:16 - not we do not include the declaration
16:18 - part that also will discuss but there
16:20 - should be at least one statement in
16:23 - executable part at least one that is
16:25 - compulsory
16:26 - and both the declaration and executable
16:28 - parts that comes within curly braces
16:31 - word main then curly braces then two
16:33 - parts and then closing of curly braces
16:36 - right now let us see one example so
16:39 - generally your first program is to print
16:41 - hello world now how you will print
16:43 - include header files then i'll write
16:45 - down main function
16:48 - this is compulsory right and within main
16:50 - you have to print so you can write down
16:52 - printf
16:54 - just hello world
16:58 - and that's it
16:59 - right
17:00 - here to hold the output screen you can
17:02 - use get ch
17:05 - fine
17:06 - so see we haven't include documentation
17:08 - section in this suppose i am not writing
17:10 - this thing
17:11 - we have include link section only
17:13 - definition section is not there global
17:15 - declaration section is not there because
17:17 - we are not using these thing in this
17:18 - program this is a simple program
17:20 - in main also i have only executable part
17:23 - there is no declaration part that is
17:25 - fine
17:26 - and after that that's it sub program
17:28 - section there is no sub program section
17:30 - in this program right so it is not
17:33 - compulsive that you have to include all
17:34 - these sections but yeah this is basic
17:37 - structure
17:38 - every program should follow this
17:40 - structure if you are including every
17:42 - part like you have user defined
17:44 - functions also global declaration
17:45 - everything
17:46 - in a program this is small program that
17:48 - is why some sections are missing
17:51 - suppose you want to
17:53 - find out sum of two numbers or suppose
17:55 - you want to include all these sections
17:57 - so let us write down a program for that
17:59 - thing
18:00 - suppose this is a program so here
18:03 - and i have written now this also like
18:05 - program is just to print something it's
18:07 - not addition of two numbers so this is
18:10 - documentation section this is link
18:12 - section
18:13 - this is what
18:14 - definition section i have defined one
18:16 - macro that is mix and max value is
18:18 - handed although i am not using this here
18:21 - and there is no use of this thing but
18:22 - just to make you understand how you
18:24 - write a program when you include all the
18:26 - sections
18:27 - that's it i have used this thing this is
18:29 - what a is equal to 50 this declaration
18:32 - is what
18:33 - see in this data type a is name of the
18:34 - variable and this is value
18:36 - everything will discuss in detail
18:39 - later but this is just to make you
18:41 - understand the structure
18:43 - this is global declaration it is outside
18:45 - of all the functions one function is
18:47 - display function
18:49 - this is also what global
18:51 - global declaration section this is
18:54 - this is for a variable and this is for
18:56 - function right now comes to main
18:58 - function in main i have no declaration
19:01 - part only executable part printf hello
19:04 - this is syntax to write printf printf
19:07 - then these brackets and then your
19:09 - quotation mark and within that you can
19:11 - print something
19:12 - whatever you will write that would be
19:14 - displayed on the screen and here what
19:16 - you are doing i am calling this function
19:18 - this is what calling
19:20 - right calling of a function in calling
19:22 - you not need to specify the
19:25 - data type of any function just name of
19:27 - the function that is display right
19:30 - after this main
19:31 - we have sub program section i have only
19:33 - one user defined function that is
19:35 - display
19:36 - word display this is a definition of
19:38 - this user defined function this is
19:40 - calling of this user defined function
19:42 - and this is what
19:43 - declaration of this user defined
19:45 - function three uh things are there three
19:48 - things are associated with the function
19:50 - this also will discuss in detail so in
19:52 - definition we are just printing printf
19:54 - jenny's lectures
19:56 - so whenever this program is going to be
19:58 - executed
19:59 - control will go to main function
20:02 - so first of all what would be printed
20:04 - hello
20:05 - then
20:06 - you are calling display function then
20:08 - control will go to this function
20:11 - now within this function what is written
20:13 - printf jenny's lecture legend is
20:15 - lectures printf means
20:18 - compiler can understand like printf
20:19 - means he has to give some output because
20:22 - you have included this file
20:24 - and the code of this printf is here so
20:26 - compiler will understand compiler can
20:28 - easily understand printf means he has to
20:29 - print jenny's lectures
20:31 - then first of all hello would be printed
20:34 - and then jenny's lectures would be
20:35 - printed
20:37 - then control will go back to
20:39 - main function and after that you can
20:41 - write down what in main function you can
20:43 - write down get ch to hold
20:45 - that output screen
20:47 - right that's it that this would be about
20:48 - hello and jenny's lectures right so this
20:51 - is what structure of a c program in next
20:53 - video we are going to discuss
20:54 - compilation process
20:56 - how the program is to be converted into
20:58 - object code and then executable code
21:00 - right so now i'll see in the next video
21:02 - till then bye bye take care