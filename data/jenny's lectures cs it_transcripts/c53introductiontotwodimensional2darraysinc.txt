00:00 - in the series of learning programming in
00:02 - c in this video we'll discuss about 2D
00:04 - arrays we have discussed everything
00:06 - about 1D array right same about 2D AR we
00:10 - discuss everything like first of all
00:11 - what is need of 2D array declaration
00:14 - initialization memor representation
00:15 - accessing of elements of 2D are then
00:18 - we'll see some programs on 2D
00:20 - everything right but uh in Parts not in
00:24 - one video because video would be very
00:25 - lengthy so in this video what I'll talk
00:27 - about I'll talk about first of all need
00:30 - of 2D obviously before you know going
00:33 - for any
00:34 - concept that that question should be in
00:36 - your mind why you are why you are
00:38 - studying this concept what is need of
00:40 - this concept so what is need of 2D first
00:42 - of we discuss the need then we will
00:45 - discuss what what is 2D array and then
00:47 - we'll see the Declaration of 2D array I
00:49 - hope you are clear with 1D array what is
00:51 - need of 1D array I have told you if in
00:53 - in my class I want to store uh marks of
00:56 - 60 students then rather than declaring
00:58 - 60 variables
01:00 - what just declare a 1D array how like
01:04 - this int name is I'm taking marks and
01:09 - size is 60 it means no need to declare
01:13 - 60 variables it will store this 1D will
01:17 - store marks for 60 students right 1D
01:20 - means like this only one row and
01:24 - multiple columns one row and multiple
01:27 - multiple columns how many columns for
01:29 - this 0 1 2 60 columns because 60 or you
01:33 - can say blocks because you want to store
01:35 - marks of 60 students so till 0 to 59
01:39 - size minus one this would be the index
01:41 - right and name of the this is marks this
01:44 - is going to store address of the first
01:46 - element The Base address of the array
01:48 - now second situation is what if I want
01:51 - to store marks like students are 60 but
01:57 - in five
01:58 - subjects right right I want to store
02:00 - marks of 60 students and in five
02:04 - subjects so what you can say either you
02:08 - declare five 1D arrays something like
02:11 - this suppose I'm saying subject one 60
02:15 - students then subject two again for
02:20 - subject two also there are 60 students
02:22 - then for subject 3 also 60 students like
02:25 - this five 1D subject 4 60 and subject
02:29 - five 60 five declaration you need right
02:33 - but rather than this can we do something
02:36 - like this under one name only under one
02:38 - variable name only we can
02:41 - store uh marks of 60 students in five
02:45 - subjects right yes we can do using 2D so
02:49 - now how you can declare that thing int
02:54 - and I'm declaring only the name is marks
02:58 - and subjects are five
03:00 - and students are 60 that's
03:05 - it right so there we can store under one
03:10 - declaration only under one variable name
03:12 - only we have done this thing so like
03:15 - this if you want to reduce the number of
03:16 - Declaration the number of declaring the
03:18 - variables then you'll use 1D array or 2D
03:21 - aray it depends according to the
03:22 - situation right like I have told you two
03:25 - situations 60 student marks total marks
03:28 - only no need to deare there 2D array
03:31 - just 1D array and that's it but marks of
03:33 - in five subjects and students are 60
03:36 - then
03:38 - 2D and if you can say uh in a university
03:43 - we have five Department like CS EC and
03:47 - mechanical civil like this Electronics
03:50 - so you want to store there are five
03:53 - departments in each department we have
03:56 - 60 students and marks of 60 students in
03:59 - five subjects
04:00 - then we declare three dimensional array
04:03 - right we can see in marks first in first
04:08 - index we can write if five uh sorry
04:11 - departments then
04:12 - five second index would be again for
04:16 - five subjects and again next is for 60
04:19 - students like this it depends upon your
04:22 - requirement how type of you know which
04:24 - type of data you want to store according
04:27 - to that you can declare
04:28 - multi-dimensional array so I hope the
04:30 - need is clear why we are using 2D arrays
04:33 - in C in C or in any language
04:36 - right so the general Syntax for
04:39 - declaring declaring 2D array is what
04:42 - first same you will write data type
04:45 - then name of
04:47 - array and here size size into subscript
04:54 - right here the number of rows and here
04:57 - number of columns
05:00 - here you can write row size and uh
05:03 - second we declare column size we give
05:05 - column size right so this is General
05:08 - Declaration of food so now one question
05:10 - is what if I want to store marks of five
05:15 - students in 10 different subjects then
05:19 - how to declare declare yourself see how
05:23 - to declare in name of array I'm taking
05:26 - marks right students are five
05:30 - and subjects are seven or
05:35 - 10 this is how you can declare right
05:38 - five students and 10
05:40 - subjects fine see if you don't give any
05:44 - size here if this or this at the time of
05:47 - this declaration then it will give error
05:49 - but if you initialize this thing here
05:52 - only at compile time declaration if you
05:54 - initialize sorry compile time
05:56 - initialization here only if you
05:58 - initialize the array 2D AR then you can
06:01 - skip this one if you not give the size
06:04 - of row size then it will not give err
06:06 - that thing we will discuss in the next
06:08 - video and you see initialization of 2D
06:10 - array with example also and I'll show
06:12 - you that thing on my laptop but for this
06:14 - video you have to give row size also and
06:16 - column size also because I'm just
06:18 - declaring here I'm not initializing at
06:19 - this time so it it is not able to
06:22 - calculate the size right now see 2D
06:26 - array means data is going to be stored
06:29 - in two Dimension like this see if I
06:33 - mathematically if I say this is X and
06:36 - this is y two Dimension are there so we
06:39 - can store data in this and in this
06:41 - Dimension right in 1D array we can store
06:43 - data in one dimension only so how we can
06:46 - store data something like
06:48 - this see this is what row size means
06:51 - number of rows how many number of rows
06:53 - should be there five and for Simplicity
06:55 - purpose I am taking uh small amount of
06:58 - three rows only and and five columns
07:00 - only right
07:03 - so have to visualize how to see how we
07:07 - see that 2D array how data is to be
07:09 - stored in 2D array how we see in memory
07:12 - but actually it's not like that we will
07:14 - see that thing also so this is row
07:18 - zero and Row one and row two because
07:20 - index would be always started from zero
07:22 - in arrays right and columns are five in
07:26 - each
07:28 - row
07:31 - in each row there are five columns so
07:33 - that would be also 0 1 2 3 and 4
07:37 - something like this so see here we can
07:41 - say there are three 1D
07:44 - arrays right so you can say what a 2d
07:47 - array is what an array of several 1D
07:53 - arrays right you would say array of 1D
07:57 - arrays if we combine these three 1D
08:01 - arrays then how it will look like
08:05 - something like this if we have combined
08:07 - this thing so this is what a table form
08:09 - or you can say this is what a
08:13 - Matrix Matrix of what 3 into
08:18 - 5 right so 2D arrays basically what
08:22 - these are you know used to solve
08:25 - problems related to Matrix basically
08:29 - right so now what we think data is
08:32 - stored in 2D array when we use 2D data
08:34 - is stored in this Matrix form or tabular
08:37 - form having rows and columns right so it
08:40 - means for this
08:43 - data row number is 0 and column number
08:46 - is
08:47 - 0 right for this it's 0 1 0 2 0 3 0 4
08:54 - something like this right this is you
08:56 - can say a general picture of the STD
08:58 - array here the row is what one and
09:01 - column is zero 1 1 1 2 1 3 1 4 here 2 0
09:07 - 2 1 22 2 3 and 2
09:10 - 4 so if you want to access any data then
09:14 - for accessing we use what index plus
09:16 - array name so array name is
09:20 - marks and index now there are two index
09:23 - one is for Row one is for column so if
09:25 - you want to access suppose this
09:28 - data so first you will you have to
09:30 - specify the row index that is row is
09:33 - what one and column is what second two
09:38 - this is how you can access the data if
09:39 - you want to access this data then marks
09:43 - then first of all row that is two and in
09:45 - second subscript you will write four and
09:47 - how address is to be calculated that we
09:49 - will discuss in a separate video right
09:51 - memory representation we will discuss
09:53 - accessing we will discuss everything
09:54 - we'll discuss but this is what just a
09:56 - general picture I'm telling you now see
09:59 - it's not like that actually the data is
10:01 - to be stored in memory something like
10:02 - this no because memory
10:04 - is like this in memory we cannot stay
10:07 - store data in Matrix form or tabular
10:08 - form we can we can only store data in a
10:11 - sequence like something like this memory
10:13 - is what it's a long tape of bytes only
10:17 - so we cannot store data something like
10:18 - this so data is always to be stored in a
10:20 - in this form only right so first of all
10:24 - the first row would be stored then the
10:26 - complete second row would be stored then
10:27 - complete third row would be stored right
10:31 - in detail we will discuss in later
10:32 - videos right but this is what general
10:35 - picture or you can say this is how you
10:36 - visualize a 2d array right this is how
10:40 - you think that data is to be stored that
10:43 - memory in memory 2D array would be
10:44 - represented something like this but no
10:46 - this is just to make you understand like
10:49 - it's a 2d array but actually this is how
10:51 - the data is to be stored in memory right
10:55 - and here we have only declared this
10:57 - declared this 2D array it means means
10:59 - only space memory allocations have been
11:02 - allocated here right and the values here
11:06 - are garbage value we haven't initialized
11:09 - yet right so garbage value now if the
11:13 - array is something like this how many
11:15 - elements you can store in this array how
11:17 - to calculate the size of the array row
11:20 - size into column size means 3 into 5
11:23 - that is you can store 15 elements right
11:26 - next thing is how much bytes would be
11:29 - located here total number of elements 15
11:32 - we can store into size of one element we
11:36 - are taking in size of in I'm taking four
11:38 - in four bytes into four that is 60 bytes
11:42 - so in memory for this 2D array 60 bytes
11:45 - would be allocated and you can store 15
11:47 - elements here
11:49 - right so the question for you is what if
11:52 - the array is something like this float a
11:56 - and I'm taking here two and
11:59 - seven so you have to tell me how many
12:03 - elements we can store in this array plus
12:05 - size how many bytes would be allocated
12:07 - to this array this
12:09 - is for you question for you so you have
12:11 - to tell me in comment box right or maybe
12:14 - it will give you error like you cannot
12:16 - uh declare a 2d Arrow uh type float
12:20 - maybe you have to tell me this thing you
12:23 - have to try it at your own and if I
12:26 - declare rather than float if I declare
12:29 - int a 2 and 7 then same how many
12:34 - elements uh not two it's four how many
12:37 - elements and how much bites have been de
12:40 - have been you know specified to this 2D
12:42 - AR so now I hope you are clear with the
12:44 - reason why 2D array we use and means
12:47 - what is 2D array and how to declare a 2d
12:49 - array it's very simple thing in the next
12:52 - video we'll see initialization of 2D
12:54 - array right that is very important so
12:56 - now I'll see you in the next video till
12:57 - then bye-bye take care