00:00 - so in this video i'm going to talk about
00:01 - what is algorithm
00:03 - why we need algorithms and what is
00:05 - difference between algorithm and
00:06 - program this is first lecture in that
00:09 - series of
00:10 - da subject right so see it's not like
00:13 - that you are using algorithms in
00:14 - computer science only we all are using
00:16 - algorithms in our daily life
00:18 - right how see let us take one example if
00:21 - you want to make
00:22 - tea in that case what you will do you
00:25 - will follow some steps
00:26 - first of all you will take a pen add
00:28 - some water in it you will put that pan
00:30 - onto flame
00:31 - then add some tea leaves and ginger or
00:33 - elaichi whatever you want to add
00:35 - then some milk sugar and you will leave
00:38 - that
00:38 - pan onto that flame for some time maybe
00:40 - one minute two minutes like this
00:42 - and your tea is ready right so this is
00:44 - what
00:45 - obviously to make tea you are following
00:47 - some steps this there is a proper
00:49 - processor
00:50 - so this is algorithm in computer science
00:53 - language if you will say then this is
00:54 - what
00:55 - algorithm means informally if you define
00:59 - algorithm then that is what
01:00 - set of steps to accomplish a task
01:04 - in real life in informal ways if you
01:05 - will define like this task is what you
01:07 - want to make t
01:08 - and for to accomplish that task you are
01:10 - following some set of steps
01:12 - and this is what algorithm fine
01:15 - and this is only one example there are
01:17 - many examples like
01:18 - to make sandwich also you are following
01:21 - some steps that is also algorithm to
01:22 - make a phone call you are also using
01:25 - in that case also you are using
01:26 - algorithm everywhere you are using
01:27 - algorithms
01:28 - right so in formal way if we define
01:32 - so what is algorithm and see those steps
01:36 - are
01:36 - finite or infinite like to make t there
01:39 - are some steps those steps are finite or
01:41 - infinite
01:42 - obviously those are finite right
01:46 - so what you can say the proper
01:48 - definition or you can say the formal
01:49 - definition of algorithm is what
01:52 - it is finite number of steps or you can
01:55 - say finite
01:55 - set of instructions used to solve
01:59 - a problem or you can say used to solve a
02:01 - computational problem
02:04 - it's better to say sequence of steps or
02:07 - instructions
02:08 - either you can write steps or
02:09 - instruction why rather than
02:12 - set of steps because in a set we can
02:15 - have
02:16 - same type of multiple values the values
02:18 - can be repeated
02:19 - but that should not be a case in
02:20 - algorithm like we cannot repeat same
02:22 - step again and again like read every day
02:24 - read it
02:25 - one step would be one time like read a
02:29 - fine so it's better to say sequence of
02:31 - instructions to solve a problem or to
02:33 - solve a computational problem
02:34 - right finite sequence of steps
02:38 - now why we need algorithms let us take a
02:41 - real life example
02:42 - like if you want to construct a building
02:44 - in that case first of all what you will
02:45 - do
02:46 - obviously you design a map and then
02:48 - start construction if you want
02:50 - some update then you update that map
02:52 - only
02:53 - and then actually construction should be
02:55 - started right it's not like that
02:57 - without map without any planning without
02:59 - any designing
03:00 - start directly construction if you don't
03:02 - like anything then destroy that
03:04 - already constructed building and again
03:06 - start construction
03:07 - if you do so then it is wasted of money
03:09 - wastage of time
03:11 - right so that map is what it's you can
03:14 - say relate you can say that map is
03:16 - algorithm and the construction actual
03:18 - construction is what
03:19 - program that thing will also discuss
03:23 - so for better construction map
03:26 - is necessary so in computer science
03:29 - language you can say
03:30 - to design a better program algorithms
03:33 - are required
03:33 - first of all algorithms are written then
03:35 - programs are written
03:37 - like if you have knowledge of sdlc
03:38 - software development life cycle then
03:40 - first
03:40 - design phase is there right and then
03:43 - development phase or you can say the
03:44 - implementation phase in implementation
03:46 - phase
03:47 - you code or you can say the programmers
03:49 - write programs
03:50 - and first of all the design phase in
03:52 - design phase actually
03:54 - there that they write algorithms
03:57 - like suppose if anyone want to develop a
04:00 - software it's not like they directly
04:01 - start
04:02 - writing programs and if there
04:05 - there is any mistake or you want to
04:06 - update something then again write
04:09 - a new program fine no first of all you
04:12 - can write algorithms
04:14 - simply if you want to update something
04:16 - updating that algorithm and once
04:17 - finalized
04:18 - the design phase or the algorithm then
04:20 - start implementation
04:22 - right so you can say to design better
04:25 - programs
04:26 - algorithms are required so i hope you
04:29 - got it why you need algorithms
04:31 - now if we discuss the difference between
04:34 - algorithm and program
04:35 - so first already we have discussed these
04:37 - are required at
04:39 - design phase and this is what actual
04:41 - implementation so these are required at
04:44 - implementation phase now i hope
04:47 - everybody have seen
04:49 - programs right so in which language
04:52 - programs are written
04:53 - in any programming language like c c
04:55 - plus plus java python or any language
04:58 - right so these are written in any
05:00 - programming language
05:01 - right and they are required to follow
05:04 - that proper syntax of that language
05:07 - right like if you are writing in c
05:10 - language then how to take input
05:12 - using printf and scanf in c plus plus
05:14 - using c out and c in like this
05:16 - right but here to write
05:19 - algorithm you require what natural
05:21 - language like
05:22 - simple english language you can use
05:24 - right so algorithm can be written in any
05:27 - natural language
05:28 - it's not like that like this you have to
05:29 - follow some proper syntax and rules and
05:32 - all
05:32 - but yeah to some extent a proper format
05:35 - is there to write
05:36 - algorithm right but there are no strict
05:39 - rules or some syntax and all
05:42 - next thing is like programmers
05:46 - will write programs now who will write
05:48 - algorithm
05:49 - that same example that construction of a
05:51 - building to design
05:53 - map you go to an architect that
05:56 - architect will
05:57 - give you map of that building why so
05:59 - because
06:00 - that person is having knowledge of that
06:02 - field right
06:04 - so who will write algorithm the person
06:06 - who is having
06:07 - the domain knowledge for which you want
06:10 - to implement a software
06:12 - right the person should have knowledge
06:13 - of that domain now next is
06:15 - c as the subject name design and
06:18 - analysis of algorithm analysis
06:20 - of algorithm right so we analyze
06:23 - algorithms right
06:26 - and what about programs program are at
06:29 - implementation phase
06:30 - then we are going to test these programs
06:33 - obviously we are going to run and
06:34 - compile those programs so that is what
06:36 - testing of programs so we are going to
06:39 - test programs and we are going to
06:41 - analyze algorithms
06:42 - and algorithms are these you will write
06:44 - in any natural language you can say
06:46 - english language
06:47 - right and you'll write simple on a paper
06:50 - or if you
06:50 - want to use computer then there you can
06:52 - write those programs
06:54 - sorry algorithms into ms word or notepad
06:57 - or wordpress like this
06:58 - right but you will write programs
07:01 - you need some ide to use to write
07:03 - programs
07:04 - so you can say this is what hardware and
07:07 - software independent
07:09 - algorithm and programs are basically
07:11 - dependent on
07:12 - hardware and software you are using or
07:14 - you can see the operating system you are
07:15 - using
07:16 - now properties of algorithm so there are
07:18 - basically
07:19 - two properties first is what c you have
07:23 - written here finite sequence of steps it
07:26 - means algorithm should contain
07:27 - finite steps it should not be in finite
07:30 - right
07:30 - so first is algorithm should be finite
07:33 - and
07:34 - unambiguous you can say there should
07:35 - there shouldn't be any
07:37 - ambiguity in algorithm it should be
07:39 - clear
07:40 - right and second is what correctness
07:42 - means algorithm
07:44 - should be correct let us take that same
07:46 - example
07:47 - if you want to make t and if you follow
07:49 - those steps then ultimately the output
07:51 - would be
07:52 - you will get t right it's not like that
07:54 - you are following those
07:55 - steps and you are getting cappuccino
07:58 - no means your algorithm is correct if
08:00 - you are getting
08:01 - that proper output fine so
08:05 - it should be correct that is second
08:07 - property
08:08 - so that's it for this video in the next
08:10 - video i am going to discuss how to
08:11 - analyze
08:13 - an algorithm right so now i am going to
08:15 - see you in the next video till then
08:16 - bye take care