00:00 - so in the series of learning c
00:01 - programming we are done with file
00:02 - handling concepts in c but we are left
00:04 - with one important concept in c that is
00:06 - dynamic memory allocation so in this
00:08 - video we will see that thing right
00:10 - what is dynamic memory allocation how
00:12 - this is different from static memory
00:14 - allocation how memory can be allocated
00:16 - dynamically means use of you know which
00:18 - function you will use for dynamic memory
00:20 - allocation how to use those function in
00:22 - your program and everything we will see
00:23 - about dynamic memory allocation this
00:25 - video is about basics of dynamic memory
00:28 - allocation you can say it's like
00:29 - introduction to dma dynamic memory
00:31 - allocation right and the difference
00:33 - between static memory location and
00:35 - dynamic memory allocation will see this
00:37 - thing in this video right
00:38 - later on in the later videos we will see
00:41 - everything about dynamic memory
00:42 - allocation like the use of functions and
00:43 - everything with the help of programs
00:46 - right but before this will tell you one
00:47 - thing maximize your gate 2023
00:50 - preparation and academy is conducting a
00:52 - combat on 6th of march at 11am
00:55 - and it is a live test and you can take
00:57 - this test for free it is like a
00:59 - scholarship test to maximize your gait
01:01 - and esc preparation here you will get a
01:03 - chance to compete with thousands of
01:05 - learners and you stand a chance to win
01:07 - up to 100 scholarship in this test you
01:10 - will get 20 question and time limit
01:12 - would be 60 minutes and this test has
01:14 - been cured by their best gate and esc
01:16 - educators and with the help of live
01:19 - leaderboard instantly you can see the
01:21 - answer you got right and you know where
01:23 - you stand among the other learners from
01:26 - all over india and personalized rating
01:28 - and scoring would be given to you with
01:30 - the help of that you can measure your
01:32 - progress
01:33 - and after every combat detail video
01:35 - solutions will be given to you by their
01:36 - experts so that you can identify your
01:38 - weak areas and you can improve according
01:39 - to that so that you get it right next
01:41 - time the enrollment link for this combat
01:43 - you will find in the description box of
01:44 - this video one more thing for gate 2023
01:46 - and 2024 aspirants they also started few
01:49 - batches in these batches they are going
01:51 - to cover the entire slavers for gate
01:53 - preparation in this course you will get
01:55 - preparation strategy tips and tricks
01:56 - practice questions numericals along with
01:58 - the detailed explanation of all the
01:59 - concepts
02:01 - plus you can get your doubt cleared in
02:03 - separate doubt clearing sessions but
02:05 - these are paid subscriptions you can use
02:07 - my code jkl10 to get 10 percent off on
02:10 - your gate subscription so the relevant
02:12 - links and details you will find in the
02:13 - description box of this video you can go
02:15 - and check out
02:16 - now let's see what is dynamic memory
02:18 - allocation see generally we say dynamic
02:20 - memory allocation means allocation of
02:21 - memory at runtime and what is static
02:24 - memory allocation
02:26 - memory would be allocated at compile
02:28 - time
02:29 - and dma memory would be located at
02:31 - runtime but see
02:33 - memory would not be allocated at compile
02:35 - time at compile time what happens see
02:37 - generally suppose you have written a
02:39 - program i am writing a program here
02:41 - simple program
02:42 - like i am just taking two integer
02:44 - variables i am just asking the user to
02:47 - enter the value of a and b i am just
02:48 - printing printing the venue so this is a
02:49 - simple program at combined time what
02:51 - happens
02:52 - the program is in english language high
02:54 - level language so com you know computer
02:56 - cannot understand this language so at
02:57 - compile time this would be converted
02:59 - into
03:00 - obj file or you can say object code
03:02 - right so at this time
03:05 - more precisely if i say memory would not
03:07 - be allocated at compile time
03:09 - right
03:10 - because
03:11 - once program would be in main memory
03:15 - then only we can allocate memory from
03:17 - ram from the main memory but at compile
03:20 - time we are just converting this
03:22 - code into obj file then dot exe file
03:25 - then linking and loading would be done
03:26 - and everything this process would be
03:28 - done and then while executing the
03:31 - program would be loaded in main memory
03:33 - and at that time memory would be
03:34 - allocated to these variables then why we
03:36 - say that sma means memory would be
03:38 - located at compile time
03:40 - so more precisely if i say then it means
03:43 - at compile time
03:45 - it would be fixed like for a and b the
03:48 - data type is integer so four bytes would
03:50 - be allocated for a and four bytes would
03:52 - be allocated for b
03:54 - in traditional compiler it's two bytes
03:56 - and in some you know comparing some
03:58 - machine it's four bytes it depends right
04:01 - so in some machine integer take two
04:03 - bytes and some integer take four bytes
04:04 - but now in my machine it is taking four
04:06 - bytes so that is why i am taking four
04:07 - bytes so now at compile time it is fixed
04:10 - now fixed
04:12 - you can say its fixed memory allocation
04:14 - that four bytes would be located to a
04:16 - four bytes would be allocated to b
04:18 - at runtime you cannot change this thing
04:21 - so this is what exactly static memory
04:23 - allocation
04:25 - right memory will be allocated at
04:27 - runtime only right but at this point of
04:30 - time at compile time only it is fixed
04:32 - like four bytes would belong here to
04:33 - this four bytes will be lower to this
04:36 - this is what exactly means at you know
04:38 - by a static memory allocation
04:40 - right
04:41 - and dynamic memory location meet means
04:45 - memory would be located obviously at run
04:47 - time and it is not fixed at compile time
04:49 - only that this these bytes would be
04:51 - located only no
04:53 - at run time only the memory would be
04:54 - located and that can be modified
04:58 - according to your programming needs
05:01 - you can increase or decrease the memory
05:03 - space according to your programming
05:06 - needs
05:07 - but in static memory allocation its not
05:09 - like that at runtime you cannot increase
05:12 - or decrease the memory which is
05:13 - allocated to you
05:16 - suppose i have taken an array in this
05:18 - program in
05:19 - i have taken an array
05:21 - array 5.
05:24 - so it is fixed that at compile time only
05:26 - that how many bytes would be allocated 5
05:29 - into 4 that is 20 bytes
05:35 - 1 2 3 4 5 right
05:37 - five elements you can store and twenty
05:39 - bytes would be allocated this is fixed
05:41 - now but at rent time suppose suppose you
05:43 - are using only you are entering only one
05:46 - three minus one
05:48 - only three values so these two space
05:52 - these
05:52 - four and four eight bytes are you can
05:54 - see it's
05:55 - wastage of memory right because i am
05:58 - entering only three values
06:00 - or maybe at runtime you want to enter
06:02 - seven values
06:04 - can you do this no
06:07 - in static memory allocation we cannot do
06:08 - this because
06:10 - only
06:11 - for five elements memory has been
06:13 - located so we cannot enter
06:15 - seven elements
06:16 - so this is what you can say drawback of
06:18 - static memory allocation you have fixed
06:20 - this size
06:22 - suppose
06:23 - when we are i know in a program we want
06:25 - to take some names of students so
06:28 - generally we take what
06:30 - like in program we take care
06:32 - and str so we take maximum size suppose
06:36 - i am taking 50.
06:38 - so in this you can take any name like i
06:40 - am one name i am taking jayanti khatri
06:44 - one name i am taking only jenny one is
06:47 - you can say
06:48 - pradhi
06:50 - one is you can say uh sonu
06:54 - so for this only four bytes
06:58 - memory we have used and remaining bytes
07:00 - remaining 46 bytes wastage of memory
07:04 - in this one two three four five five
07:06 - bytes only we have used remaining 45
07:10 - wastage of memory
07:12 - like this
07:13 - right so this is what wastage of memory
07:16 - in this case
07:17 - because memory has been allocated this
07:19 - is fixed we cannot change this at
07:21 - runtime we cannot free this memory at
07:22 - runtime
07:24 - in static memory allocation whatever
07:25 - memory
07:27 - has been allocated you cannot free that
07:29 - memory at runtime
07:31 - after the exit from the program only
07:34 - memory would be freed
07:36 - so it's you can say in static memory
07:38 - allocation memory cannot be reused
07:41 - this memory is fixed
07:43 - for 50
07:45 - you can say 50 bytes
07:46 - so whatever name you will enter
07:49 - like pradeep i'm entering one two three
07:51 - four five six seven only seven bytes i'm
07:54 - using remaining 43 bytes 40 how many
07:58 - bytes we have you know are remaining
07:59 - that are wastage of memory and memory is
08:02 - very crucial resource
08:04 - we are not you know we we don't care
08:06 - about memory because we are writing
08:08 - small small programs so we take enough
08:11 - space at the starting of the program and
08:13 - we don't care about wastage of memory
08:15 - but
08:16 - when we you know create you know when we
08:18 - are doing any you know large com you
08:20 - know computation or you are creating
08:22 - software or in industries
08:25 - right at that point of time you have to
08:28 - take care of memory right so from now
08:31 - only it's a good practice to take care
08:33 - of memory right you at least you have
08:35 - some idea
08:37 - like this is wastage of memory and i
08:39 - should not use this memory that's a good
08:41 - practice
08:43 - you know these small small things you
08:44 - can say create a difference between a
08:46 - good programmer and a bad programmer
08:48 - right so it's a good practice always to
08:50 - save memory because memory is very
08:52 - crucial resource right so at least you
08:54 - have some idea about dynamic memory
08:56 - location static memory location how
08:57 - memory is you are wasting how much
08:59 - memory you are wasting and you don't
09:01 - have any idea right now while writing
09:02 - the programs right
09:04 - so now see at runtime you cannot
09:07 - increase or decrease the size of a
09:08 - located memory right suppose at this
09:11 - point of time i want to enter
09:13 - 10 element in the array we cannot do
09:15 - this if you are entering three
09:17 - it is mischange of memory right
09:20 - so to remove these drawbacks i hope now
09:23 - these drawbacks are clear to you of
09:25 - static memory allocation right so to
09:27 - remove these drawbacks another concept
09:29 - came that is dynamic memory allocation
09:32 - memory can be allocated and be allocated
09:36 - at runtime
09:37 - right according to
09:39 - your programming needs
09:41 - memory would be looked at located at
09:43 - runtime that is that can be modified
09:46 - according to your programming needs in
09:47 - dynamic memory allocation right now
09:50 - how this happens we have some functions
09:53 - for this thing
09:54 - malloc
09:56 - gallop
09:58 - real lock
10:00 - and free these four functions we will
10:02 - discuss these four functions in detail
10:04 - one by one right but right now i think
10:06 - the difference between sma and dma is
10:08 - clear to you
10:09 - or let me just discuss some more points
10:11 - about dma then i guess you will have you
10:14 - know more precisely you will have idea
10:16 - what is dma and how this is different
10:18 - from sma right
10:19 - first of all you must have some idea
10:21 - about the memory layout how memory would
10:23 - be allocated to a program
10:26 - in how many segments see basically four
10:28 - segments are there
10:29 - one is for
10:31 - code or you can say
10:33 - text instructions
10:35 - you know from this memory section one
10:37 - memory section is for
10:39 - global variables or static variables
10:42 - the global variables and static
10:44 - variables will take memory from this
10:45 - memory section
10:46 - one is
10:48 - stack and one is heap
10:52 - right heap is it's like
10:54 - you can say a
10:55 - big free pool of memory
10:58 - so whenever you allocate memory using
11:00 - dynamically using this method always the
11:02 - memory would be located from heap
11:05 - right
11:06 - dynamic memory allocation would be done
11:08 - from heap only it's like a it's
11:11 - you know big pool of free memory you can
11:14 - use this memory you can allocate this
11:15 - memory you can
11:16 - de-allocate this memory at runtime
11:19 - right
11:20 - and
11:20 - stack and heap always
11:22 - grow in opposite direction if stack is
11:24 - growing in this direction heat will grow
11:26 - in this direction
11:28 - right
11:30 - and from the whole memory stack part
11:32 - will take limited size let's suppose
11:36 - stack part is taking only 2 mb
11:38 - whenever you write any program and in
11:40 - stack
11:43 - in stack from this memory
11:45 - all the local variables and functions
11:48 - will you know
11:49 - take memory from this part stack part
11:52 - right now see
11:54 - always the program if suppose outside
11:56 - main we have a global variable in i this
11:59 - is also having
12:00 - two parts for initialized segment and
12:03 - one is uninitialized segment in detail
12:06 - the memory layout we can discuss in a
12:08 - separate video if you want me to upload
12:09 - this video you can write down in comment
12:11 - box right suppose we have a global
12:13 - variable in i is equal to 10 this is
12:15 - global outside main so that this i would
12:18 - take space from this memory segment
12:20 - right
12:22 - and if you have some uninitialized
12:24 - int a we haven't initialized this this
12:27 - also will take from this
12:29 - segment but there are two segments one
12:31 - is initialized one is
12:33 - uninitialized right now
12:36 - always the program would be start from
12:38 - main
12:39 - so one stack frame from this stack
12:42 - one stack frame
12:44 - would be located for main function now
12:46 - in main we have local variables a b so
12:48 - these a b would be
12:51 - memory would be located from this
12:53 - stack for this a b we are going to enter
12:55 - the value and then printf means again we
12:58 - are going to call a function that is
12:59 - printf so one
13:02 - stack frame for printf
13:04 - after
13:05 - doing this operation right then
13:08 - you can say scanf and then again printf
13:10 - and scanf and after executing this
13:12 - printf this can f these function would
13:14 - be removed from the memory and after
13:16 - that return 0 then main would be
13:18 - returned main would be
13:20 - you can say freed from this memory after
13:23 - return zero statement right
13:25 - so now this is how
13:28 - memory would be allocated you can say
13:29 - it's it is what we are not using dynamic
13:31 - memory allocation this we are only using
13:33 - static memory allocation right
13:35 - if you want to use dynamic memory
13:37 - allocation in this case
13:39 - then
13:40 - you will need pointer
13:44 - you cannot use the concept of dma
13:46 - without pointer this is very important
13:48 - or you can say this is one application
13:50 - of pointer
13:51 - right
13:52 - and many data structure almost every
13:54 - data structure stack
13:56 - link list tree queue
13:59 - every data structure use the concept of
14:01 - dma
14:02 - right
14:03 - now without pointer you cannot use the
14:05 - concept of dma
14:07 - now what will happen if you use dma in
14:10 - this case first of all you are going to
14:11 - create a pointer so here suppose i am
14:14 - creating a pointer into star p
14:17 - so this is what
14:18 - [Music]
14:19 - yeah in star p means this is what static
14:22 - memory allocation so this pointer p
14:25 - would be in main now we have a pointer p
14:29 - this is static memory allocation right
14:31 - but at run time
14:33 - i am going to tell
14:35 - using these functions mellow calorie
14:37 - yellow for free
14:39 - using these function i am going to 10
14:41 - like i need
14:43 - 10 bytes of block
14:45 - so those 10 bytes of block would be
14:48 - allocated from this heap
14:53 - this block of 10 bytes suppose
14:57 - or you can say 8 bytes
15:01 - and this pointer would point
15:04 - this pointer would point to this block
15:08 - using this pointer only we can access
15:10 - this memory
15:13 - and the base address this pointer would
15:15 - contain what
15:17 - base address of this block
15:21 - right using this pointer only we can
15:23 - store some value we can access the value
15:25 - from this block and all
15:27 - another thing which is very important is
15:30 - it's your responsibility to free this
15:32 - memory after you are done
15:35 - with this memory
15:36 - once you have used this memory and you
15:38 - are done you don't need this memory
15:40 - anymore in your program right
15:43 - now
15:44 - you have to free this memory using this
15:46 - free function this is very very very
15:48 - important if you will not free this
15:50 - concept if you will not free this memory
15:53 - suppose at some time
15:55 - i have done the i have initialized this
15:57 - pointer after that
15:59 - pointer is equal to null so it is not
16:01 - pointing to this memory anymore but
16:03 - still this memory
16:05 - would be counted in your program use in
16:08 - your program's memory use
16:11 - and suppose you have
16:12 - now created another pointer and you now
16:14 - suppose you need 50 block
16:17 - 50 bytes of memory
16:19 - now this has been allocated to you but
16:21 - this is still in your use you haven't
16:24 - free this memory
16:26 - one more block you have taken more one
16:28 - more block you have taken right but you
16:30 - are not freeing these blocks the
16:32 - previous blocks right so at some point
16:34 - of time it would be exhausted maybe
16:37 - right
16:38 - so
16:38 - once you are done with the use of the
16:40 - block
16:41 - make sure you free that vlog of memory
16:44 - so simple concept the simple syntax is
16:46 - there just write down free
16:48 - and the pointer name suppose i am taking
16:50 - pointer name p just write down this
16:52 - thing that's it
16:54 - now it's up it's totally depends on your
16:57 - understanding
16:58 - how precisely you are getting these
17:01 - dynamic memory looking location concept
17:04 - you can use this free it's not like that
17:06 - you can use this free statement this
17:08 - free function
17:10 - after the
17:11 - end of the program like in the end of
17:12 - the program no in between these programs
17:16 - in between any program like two or three
17:18 - times in a program you can use free
17:20 - statement
17:21 - so it's up to you like it's up to your
17:23 - understanding how clearly you have
17:25 - understood these concept how clearly you
17:27 - have understood the standard memory
17:29 - allocation concept then only you can use
17:31 - this free function you know many times
17:34 - in your program so better if you have
17:37 - used this memory free this memory
17:39 - again you can take another block if you
17:41 - have used this memory you are done with
17:43 - this again free this block
17:45 - this is always a good practice
17:47 - so this is what you can allocate and
17:50 - de-allocate memory at runtime
17:52 - so once you have freed this blog now
17:55 - again you can use in the same program
17:58 - right
17:59 - so this is what reusability in dynamic
18:02 - memory allocation
18:03 - memory can be reused but in static
18:06 - memory allocation memory cannot be
18:08 - reused because we cannot free the memory
18:11 - we have taken like int a b so we cannot
18:13 - free this memory
18:16 - during the execution of the program
18:18 - after
18:19 - exit from the program yes this memory
18:21 - would be freed but during execution you
18:23 - cannot free so memory cannot be reused
18:25 - this is one more you can say drawback of
18:27 - small you can say advantage of dynamic
18:29 - memory allocation i hope you can write
18:31 - these you know points according to
18:33 - yourself in your language only right
18:36 - so now i guess the basics of dynamic
18:38 - memory allocation is clear to you
18:40 - from the heap part memory would be
18:42 - located dynamically and statically from
18:44 - the stack part right
18:47 - so now using these functions we can
18:49 - allocate memory dynamically but use of
18:52 - these function we will discuss one by
18:53 - one in the next one we will see the use
18:55 - of malloc function with the help of a
18:56 - program right so one assignment for you
18:59 - is you are supposed to write down the
19:00 - difference between static memory
19:01 - location and dynamic memory allocation
19:03 - right you can write down that thing in
19:04 - common box so now i'll see in the next
19:06 - video till then bye take care