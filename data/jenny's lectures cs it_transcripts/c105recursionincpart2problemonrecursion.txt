00:00 - so in the series of learning c
00:02 - programming we are discussing recursion
00:03 - in c in the previous video we have
00:05 - discussed what is recursion with one
00:06 - example like one problem is given which
00:09 - is containing recursion and how to solve
00:10 - that problem right but that method was
00:13 - little bit lengthy if a recursion
00:15 - program is given a problem is given that
00:17 - is having recursion in any competitive
00:18 - exam like in gate exam net exam then you
00:21 - don't have much time to follow that
00:23 - approach so here we will solve this
00:25 - problem the recursion problem with
00:27 - second method with this method you will
00:29 - take very less time to solve the problem
00:31 - which is having recursion like this this
00:34 - problem we are going to solve
00:35 - right now before that is going to tell
00:37 - you one thing if you are preparing for
00:39 - gay 2022 exam will be preparing for this
00:41 - exam then an academy has started a rank
00:44 - improvement batch for gay 2022 aspirants
00:47 - in this past the top educators will take
00:49 - practice sessions on each subject
00:51 - followed by a subject test and analysis
00:54 - session of the subject test in a live
00:55 - session so this batch is mainly designed
00:57 - for the learners who are preparing for
00:59 - gay 2022 exam all your doubts related to
01:02 - the topics will be clarified during the
01:04 - sessions in the course and the course
01:06 - will be conducted in hindi and english
01:09 - and they are also going to conduct a
01:10 - test scholarship test for gate and escs
01:12 - parents on 24th of october so you can
01:15 - take this test for free and you can also
01:18 - win a chance to be mentored by the best
01:20 - faculties at an academy it is like all
01:22 - india live test you can compete with the
01:24 - learners from all over the country and
01:26 - get all india rank and you can perform
01:28 - at your best and stand a chance to win
01:30 - personal guidance and scholarship
01:33 - and after the test you can get in-depth
01:35 - topic wise analysis of the test to help
01:38 - you know to improve your weak areas so
01:40 - just have to enroll for this the
01:42 - enrollment link i'll put in the
01:43 - description box for this video and use
01:44 - my code jkl10 to unlock this test you
01:46 - can you know pick the right test for you
01:48 - and just click enroll
01:51 - and one more four month subscription is
01:53 - there for gate and esc 2022 aspirants
01:55 - what you will get in this four month
01:56 - subscription you can see the detail on
01:58 - my screen so it's like the best pick for
02:01 - you guys and if you will use my code
02:03 - jkl10 you will get extra 10 discount on
02:05 - this subscription so all the relevant
02:07 - links and the details i'll put in the
02:09 - description box of this video if you are
02:10 - interested you can go and check out so
02:12 - now let's see how to solve this problem
02:14 - this this is like you can say a program
02:17 - to
02:18 - print sum of n natural numbers
02:21 - like here we are passing sum is equal to
02:23 - five so it will print sum of one five
02:26 - natural number like one two three plus
02:28 - four plus five
02:29 - if you pass a tenth it will print sum of
02:31 - ten natural number up to ten natural
02:33 - number right
02:34 - so now
02:36 - yeah here here better to write here like
02:38 - we will write we are using variable x so
02:40 - we will write here rather than a because
02:42 - a is
02:43 - local to this main so if you
02:45 - use here a it will give error so return
02:47 - x
02:48 - and here also we'll write rather than a
02:50 - we are
02:51 - writing x we are taking variable x
02:55 - right i hope that's fine now
02:57 - now see
02:58 - so we will solve this problem with the
03:00 - second method that will take less time
03:02 - so what is the process first of all the
03:03 - control will go to the main function
03:05 - right i hope whenever the program would
03:07 - be executed that would be
03:09 - you know located some memory into the
03:11 - main memory in three section one is four
03:13 - section one is stack memory one is heap
03:16 - memory
03:16 - right and you can access the program can
03:19 - access like whatever the variable we are
03:21 - going to create here the memory will be
03:22 - directly accessed from the stack memory
03:25 - you cannot directly access the memory
03:27 - from the heap area
03:28 - that memory we can access using pointers
03:31 - like when we dynamically locate memory
03:33 - using malloc and calo obviously using
03:35 - pointer then the memory would be located
03:37 - from the heap area i hope you know this
03:39 - basic concept right
03:42 - now first of all main so some memory
03:44 - would be allocated to this main function
03:46 - like one stack frame would be you know
03:48 - hold for this main memory so here we
03:50 - have a variable a there is nothing in
03:52 - this now a is equal to some phi we are
03:54 - calling this function of sum 5 so it
03:56 - will search for the definition here we
03:58 - have the definition so we are passing
04:00 - 5
04:01 - so simply we can write here sum we are
04:03 - calling
04:04 - we are passing 5 so we are calling this
04:06 - now x becomes
04:08 - x become
04:09 - 5
04:11 - here now here we have s is equal to zero
04:13 - so whatever we are going to execute that
04:15 - we will write here the statement we will
04:17 - write here
04:18 - right so now here s okay we have s
04:22 - variable and that is zero
04:24 - now if x is equal to equal to one this
04:26 - condition is not true so we are not
04:27 - going to enter into this if block
04:29 - i am not writing any curly braces
04:32 - if you do not write curly braces means
04:33 - by default only one statement written
04:35 - after this if would be considered as
04:37 - part of this if block only this return x
04:40 - would be part of this
04:41 - f right
04:43 - so now we are not going to enter into
04:44 - this if now after this we have the
04:46 - statement s is equal to x plus sum x
04:48 - minus 1 so again we are calling this
04:50 - function right so what statement would
04:52 - be executed
04:54 - x plus this now x value here is what 5
04:58 - 5. so 5
05:00 - plus
05:01 - sum x minus 1 that is 4
05:05 - again we are calling this function so
05:07 - whatever you are going to execute that
05:09 - statement we will write here
05:10 - again
05:11 - x is equal to 0 x 1 no condition is not
05:15 - true so we are going to execute the
05:17 - statement now x plus this now is this
05:19 - time x is what 4 we are passing
05:22 - 4
05:23 - so x is 4 plus
05:27 - sum
05:29 - x minus 1 that is 3 4 minus 1 that is 3
05:33 - now where we are again calling this so
05:35 - whatever we are going to execute that
05:36 - will right here so again this condition
05:39 - is not true so x
05:40 - x is 3 3 plus
05:42 - we are calling again sum but x minus 1
05:45 - that is
05:46 - now 2
05:47 - now whenever we will call whenever now
05:50 - this time we will pass 2 so what
05:53 - statement will be executed this
05:54 - condition not true again
05:57 - x
05:58 - plus
05:59 - sum
06:00 - 1
06:01 - 2 minus 1 1 so now we are passing we are
06:04 - calling sum 1 so now this time x is 1 so
06:07 - now whatever we will we are going to
06:09 - execute that statement we are going to
06:10 - write here now c check x is equal to
06:13 - equal to 1
06:14 - yes condition 2 this time this time x
06:16 - value is 1
06:18 - so now which statement would be executed
06:20 - return x so return
06:24 - x value is what 1 return
06:27 - 1
06:28 - so now control will be
06:30 - where
06:32 - back to where you are calling from where
06:34 - you are calling this one right
06:36 - this time this statement would not be
06:38 - executed
06:41 - right
06:42 - now from where we are calling this
06:46 - the statement uh this someone the so
06:49 - this return would be where here
06:53 - back we are going to be no
06:56 - you know we are going to be in backward
06:58 - direction
07:00 - in the same process in the same flow so
07:02 - now return 1 so 1 would be this would be
07:05 - replaced with 1
07:07 - so 2 plus 1 becomes 3
07:11 - right
07:12 - now
07:12 - where this would be returned
07:14 - here
07:17 - because from here we are calling
07:19 - this one so sum 2 now this this function
07:22 - call becomes 3 so now here this will be
07:24 - replaced with 3 now 3 plus 3 is 6 and
07:28 - this would be
07:30 - back to here because from here we were
07:32 - calling this one so 6
07:34 - this is 6 6 plus 4 is
07:37 - 10 now this 10 would be backward
07:40 - from here we were calling this some 4 so
07:42 - this 10 the sum 4 will be replaced with
07:44 - 10 10 plus
07:46 - 5 is equal to
07:48 - 15
07:50 - right and now 15 would be
07:52 - back to here
07:54 - sum 5 from where we were calling the sum
07:56 - 5
07:57 - from the main function
07:58 - so what value would be returned back
08:01 - 15
08:03 - so here it is 15 so now a what value
08:06 - would be store 15 so it will print
08:09 - 15.
08:10 - that's it you just have to write down
08:13 - this thing
08:14 - and simply
08:16 - after reaching the base condition this
08:17 - is the base condition simply go backward
08:20 - in the same direction
08:21 - that's it it will take less time
08:24 - rather than you know keeping that stack
08:26 - and
08:27 - each
08:28 - for each function call one frame and
08:30 - everything that would be lengthy process
08:32 - right
08:34 - this is very easy and
08:36 - you know very simple process
08:38 - less time consuming i hope you go to the
08:40 - working of this program how you are
08:42 - getting the output right
08:44 - if you are not getting this one it's
08:46 - okay this happens with everyone it's
08:49 - little bit tough if you practice some
08:51 - programs if you practice this process
08:54 - with 5 or 10 programs automatically you
08:56 - will get it
08:57 - right so if you're not getting right now
08:59 - it's okay you can watch this video again
09:01 - you can practice this you can pause this
09:03 - video you can write down this program on
09:05 - your you know
09:07 - pen in your copy and you can just
09:09 - practice it at your own
09:11 - if you are still not getting you can
09:12 - watch the video again and you can again
09:13 - practice
09:15 - after practicing 5 or 10 programs you
09:17 - will get it right see we are we are
09:20 - returning this this like 3 plus sorry 2
09:23 - plus 1 3 3 would be returned here now 3
09:26 - plus 3 is 6 now 6 will be returned here
09:29 - so the 6 is what 6 10 15 this is what
09:33 - s sum this variable right and after this
09:37 - we have the statement return s so if you
09:40 - you know you know watch out this code
09:43 - also then also you will get it so return
09:45 - s this statement is returning this 3
09:48 - then 6 then 10 then 15
09:51 - and 15 would be returned here finally
09:53 - right because we are again we are still
09:56 - writing uh one more statement that is
09:57 - return is return this sum
10:01 - fine so on the next video we will see
10:03 - types of recursion right so i'll see you
10:05 - in the next video till then bye take
10:07 - care