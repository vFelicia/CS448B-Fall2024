00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of planning
00:03 - Python programming language we are
00:05 - discussing types of inheritance in
00:06 - Python till now we have discussed single
00:08 - multiple multi-level and hierarchical
00:10 - inheritance so one left is Hybrid
00:12 - inheritance this thing we will see in
00:13 - this video with the help of program
00:14 - practical also we'll see
00:17 - so first thing what is Hybrid
00:19 - inheritance
00:20 - hybrid means simple meaning of hybrid
00:23 - this word is we can say a mixture of two
00:26 - or more things
00:28 - right that is simply hybrid
00:31 - something let me know sometimes we call
00:32 - a breed of cow or buffaloes or this is
00:36 - of hybrid breed like or we use hybrid
00:40 - seeds
00:42 - and for farming purpose
00:44 - so those are mixture of two or more
00:46 - things that is hybrid so in case of
00:49 - inheritance
00:50 - it is a mixture or we can say
00:52 - combination of two or more inheritance
00:54 - that is Hybrid inheritance see
00:58 - this is what
01:01 - parent one child one this is single
01:04 - inheritance right now if I mix this with
01:08 - something like this I have like maybe
01:11 - I have parents two child one and this is
01:16 - child two
01:19 - now this is simple this is single
01:22 - inheritance if you see this part then
01:25 - this is we have more than one parent and
01:27 - only one child so this is multiple
01:30 - inheritance so this is combination of
01:32 - single plus multiple inheritance so this
01:34 - is we can say Hybrid inheritance right
01:37 - something like this
01:39 - right like maybe
01:42 - grandfather then your father this is
01:45 - your father your mother and then you
01:49 - right this combination of more than one
01:51 - inheritance
01:53 - right
01:54 - means two or more than two inheritance
01:56 - so this is what Hybrid inheritance or
01:58 - something we can also derive something
02:00 - like this from there one more child from
02:03 - there one more child so this is what
02:05 - multi-level inheritance so this is a
02:07 - combination of one two and three type of
02:09 - inheritance so this is also possible
02:11 - this is Hybrid inheritance right if I
02:13 - draw something like this this is
02:16 - combination of this one is multiple
02:19 - inheritance and this one is hierarchical
02:21 - inheritance so this is combination of
02:23 - multiple and hierarchical inheritance so
02:24 - this is also Hybrid inheritance right
02:26 - and we also have something like this
02:30 - this is also combination of the first
02:32 - one this is hierarchical and this is
02:35 - multiple so this is also Hybrid
02:37 - inheritance right so I hope now you got
02:40 - the basic idea of Hybrid inheritance so
02:42 - if you want to use the maximum use of
02:45 - inheritance concept then we use in a
02:47 - program Hybrid inheritance means more
02:49 - than
02:50 - one inheritance in our program
02:53 - right so that is basically the use of
02:56 - Hybrid inheritance
02:58 - to increase the usability of this
03:00 - concept inheritance concept right now
03:03 - this this something like this
03:05 - as you can see the shape of this is It's
03:08 - a diamond like so this is also known as
03:10 - classic Diamond problem right and what
03:13 - is the solution why it is called classic
03:15 - Diamond problem that also we will see in
03:17 - detail in next video right but for now
03:21 - you need to know this is Hybrid
03:22 - inheritance the combination of two or
03:24 - more than two inheritance right now
03:27 - let's see this with the help of a
03:29 - program
03:30 - okay so let's create a new file hybrid
03:33 - inheritance.py
03:35 - right simple example let's take like
03:37 - maybe I'm taking a class
03:40 - a
03:42 - right and we simply Define a function
03:46 - here
03:48 - display
03:50 - from a class and then we are having a
03:53 - class
03:54 - B and this B I'm having I'm inheriting
03:57 - from a class
03:59 - same
04:01 - display
04:02 - same function I'm going to take take but
04:04 - this time will print
04:07 - display function from b class right and
04:10 - suppose we are taking a
04:13 - sorry
04:15 - Class C I'm not inheriting this class
04:18 - from any class
04:21 - it is independent class right Class C
04:24 - and there I am having a function sorry
04:27 - simply like show
04:31 - maybe like high from C class I am taking
04:33 - a show method right
04:35 - and one class now D class I am going to
04:38 - inherit from B
04:40 - as well as from C
04:43 - right
04:45 - so the First Class A Class B here
04:49 - till now it is single inheritance
04:52 - right because we are having one parent
04:55 - one child class now we are having C
04:57 - Class
04:57 - as well as D class which is hiring which
05:00 - is you know inheriting from
05:03 - b class and C Class
05:07 - so two parent class so this is multiple
05:09 - inheritance so this is combination of
05:11 - single plus multiple inheritance so this
05:14 - is you can say hybrid one so maybe here
05:17 - also I can say like display
05:21 - right and I'm going to take my own
05:24 - definition
05:28 - display from D class now just take an
05:33 - object of Class D suppose D1
05:36 - and let's call with this cd1 dot we can
05:40 - call show method display method from D
05:43 - show from C and in it from obviously
05:47 - there is no need function in these
05:48 - classes so from object class right
05:51 - because that is root class of every
05:53 - class
05:54 - so using D1
05:57 - can I access this a display method like
06:01 - display from a class
06:04 - yes you can print this thing but
06:06 - directly you cannot print because if I
06:10 - want to access this display method then
06:14 - let's run this
06:16 - see display from D class
06:20 - it will call more specific methods what
06:23 - is the mro method resolution order first
06:25 - it will search let's just print mro of
06:29 - Class D so class name Dot
06:31 - we have
06:32 - a model function
06:34 - so first it will search any attribute or
06:37 - method in its own class B Class so
06:40 - display method we are having in having
06:42 - in D class yes so it will access this
06:45 - thing if not in this D class then it
06:47 - will search in b class in B Class the
06:50 - first parent class is B then it will
06:52 - search in
06:53 - a class right it will search in b class
06:58 - then parent of B is
07:01 - a so it will search now in a class then
07:05 - it will search in C Class
07:08 - right and then in object class right so
07:13 - this is mro Method resolution order now
07:16 - how this MRI would be calculated or it's
07:18 - derived this thing you know we'll see in
07:22 - next video in detail
07:24 - it will have a technique like depth
07:28 - first and left to right technique okay
07:30 - but it's different to find out mro in
07:33 - old class style it's different and a new
07:36 - class style it's different so what is
07:37 - the difference that we'll see next video
07:39 - right I hope no need to you know give
07:42 - more time to this Hybrid inheritance
07:45 - because we have done multiple things
07:47 - multiple programs on inheritance so if
07:50 - you want to use super method like I want
07:52 - to display
07:53 - whatever in this a the Sprint display
07:56 - from a also then using
07:58 - super function we can access we can you
08:02 - know access this method here or maybe
08:04 - using this class name also we can access
08:06 - so this thing we have discussed many
08:08 - times right
08:10 - you just try this out at your own now I
08:13 - have one question for you guys one
08:14 - assignment question
08:15 - so I hope now you got it what is a
08:17 - Hybrid inheritance one question for you
08:18 - is you have to write down a program you
08:21 - have to implement this inheritance this
08:23 - type of Hybrid inheritance first take a
08:25 - class parent class that is University
08:28 - class and then you will take one
08:30 - attribute University name and one method
08:33 - show details it will show the name of
08:36 - the University now from University we
08:38 - are having two child class one is course
08:40 - and one is Branch every University we
08:42 - are having mostly multiple thing so I'm
08:45 - taking only two branch and postcodes
08:48 - means maybe engineering course
08:49 - management course architecture course
08:51 - something like this so here also same
08:52 - you will take course name and show
08:54 - detail it will show only course uh any
08:57 - course name you can take static like
08:58 - course name is equal to engineering and
09:00 - you have to show the detail
09:01 - show the name of that course right in
09:04 - the in this show detail method here also
09:06 - you will have a show detail method here
09:08 - also here also you will have its own
09:10 - show detail method
09:12 - as well as it will show University name
09:14 - and questioning
09:16 - in Branch also Branch name and show
09:19 - detail method right Branch name show
09:21 - detail method will show University
09:25 - now student one more child class and
09:28 - parent of the student is course and
09:30 - Branch the student will also have one
09:33 - attribute student name and show detail
09:36 - method there it will show student name
09:38 - Branch name course name and University
09:41 - name every detail
09:44 - then sorry this is not student this
09:46 - should be faculty
09:50 - one more child class of this branch is
09:53 - faculties faculty is also having its
09:55 - faculty name and show detail method so
09:57 - in show detail it will show faculty name
10:00 - Branch name plus University name right
10:05 - I hope you can show you can do this
10:08 - you know method overriding have to use
10:11 - super function and all right so because
10:15 - we have done many you know programs till
10:19 - now
10:20 - of inheritance so I hope you can do this
10:22 - right so just try this out and you can
10:25 - write down the thing if you want in
10:27 - comment section right so now in the next
10:30 - video we will see what is that classic
10:33 - Diamond problem in inheritance and what
10:35 - is the solution in Python what is
10:38 - basically mro method resolution order so
10:41 - and I was in the next video bye bye take
10:43 - care