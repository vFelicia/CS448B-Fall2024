00:00 - so in the series of learning object
00:02 - oriented programming in c plus plus
00:03 - previous video was about introduction to
00:05 - c plus plus in this video we will
00:07 - discuss some features of c plus plus
00:09 - important features of c plus because
00:10 - sometimes in theory you need to write
00:12 - like they can ask you they can ask what
00:14 - are some features of c so it would be
00:16 - helpful for you guys so discuss all the
00:18 - features one by one right so the very
00:21 - first you can say is it is as we know
00:23 - object oriented programming because
00:26 - it follows that approach right all the
00:29 - features oops concept now what is this
00:31 - object-oriented programming we have
00:33 - discussed
00:34 - what are hoops concept in brief we have
00:35 - discussed all the oops concept the sixth
00:37 - class object abstraction encapsulation
00:40 - polymorphism inheritance
00:42 - these features like so it supports oops
00:45 - concept that is why it is object
00:46 - oriented programming everything revolve
00:48 - around an object
00:50 - right
00:51 - like that is why we it you know we can
00:54 - simply map the real world problems
00:57 - in programming with the help of this c
00:59 - plus language right
01:00 - because in real world also everything in
01:03 - object we consider as an object like
01:05 - jenny it's also it is an object this
01:07 - marker
01:08 - duster white board camera table all
01:11 - things are objects in library we can say
01:13 - books
01:14 - the shelf table chair we consider those
01:17 - thing as object right
01:19 - so we can think the real world problems
01:22 - we can map those real world entities or
01:24 - the problems into programming with the
01:26 - help of c plus plus easily
01:28 - right
01:29 - so any real world so it is you can say
01:32 - close to real world that is why it is
01:35 - known as like we can implement any real
01:37 - world application or software in c plus
01:39 - plus only right so why it is
01:42 - object-oriented programming because it
01:44 - supports those features as well as it is
01:46 - processor oriented programming approach
01:48 - also it follows because it is superset
01:50 - or extension of cnc is processor
01:52 - oriented programming so it follows both
01:55 - approach it comes under procedural data
01:57 - as well as object-oriented programming
01:58 - right
02:00 - now the second thing is
02:01 - but it is not
02:04 - purely
02:05 - object oriented programming or not truly
02:08 - object-oriented programming language
02:10 - right because it is not compulsory to
02:12 - use the classes the concept of classes
02:15 - and all these oops concepts
02:17 - in a program
02:18 - we can write down a program without
02:20 - using oops concept like if you want to
02:22 - print a simple hello world program that
02:23 - we have discussed in the video when we
02:25 - were
02:26 - you know
02:26 - seeing that installation of vs code
02:28 - simple hello world simply you can
02:31 - write down header file hash include
02:33 - iostream
02:36 - and then main
02:38 - and
02:39 - c out
02:40 - and
02:41 - like i want to print jenny so we haven't
02:44 - used any class or object kind of thing
02:46 - we haven't made any class where we
02:48 - haven't created any class an object of
02:50 - those class simply we can print
02:52 - anything
02:53 - so that is why we known as we call it as
02:56 - not true or not purely object oriented
02:59 - programming language without using these
03:01 - concepts we can write down a program it
03:04 - is same as c we have just changed a few
03:06 - things like
03:07 - the for output there we use printf we
03:10 - use the c out the header files and all
03:12 - or int main then you can also write
03:15 - return 0 here so this is simple program
03:18 - right that is why it is sometimes it's a
03:21 - wi-fi questions or in interviews so they
03:23 - ask sometimes this question like why it
03:24 - is not a purely or not a true object
03:27 - oriented programming language
03:29 - and second thing we can say it's general
03:31 - purpose programming language
03:34 - this we have discussed this point in
03:35 - previous video also
03:37 - for general purpose for creating
03:39 - software and application in any domain
03:41 - we can use c plus
03:43 - from system software to
03:45 - application software we can create
03:46 - system software in this
03:48 - right like your operating system
03:51 - your device drivers your kernels
03:54 - another you can create any applications
03:56 - like gui based application graphical
03:58 - user interface any business
04:00 - type of application like school
04:02 - management system college management
04:04 - hospital management these kind of system
04:05 - we can create
04:07 - right translators like compiler
04:09 - uh that interpreter we can code those
04:11 - things we can write those translated
04:13 - into c plus plus
04:15 - as well as databases for example
04:17 - oracle mysql was written in c plus plus
04:21 - so for
04:22 - any kind of for creating any kind of
04:24 - application or software in any domain in
04:26 - any area we can use c plus plus there is
04:29 - something for everyone in this language
04:32 - so that is why it is known as general
04:34 - purpose programming language it's not a
04:36 - specific purpose it's not like that for
04:39 - a particular domain for creating
04:41 - you know software in a particular domain
04:43 - we can create we can use this language
04:45 - no for creating application in all the
04:47 - domain
04:48 - right in any area we can use this
04:50 - language right next is it is compiled
04:53 - language
04:55 - means
04:56 - we write a program compiler will compile
04:59 - the source code into the machine code
05:01 - and then it would be executed so it is a
05:03 - compiled language we need a compiler
05:05 - like java is
05:06 - both compiled as well as
05:08 - interpreted language python is also
05:09 - interpreted language
05:11 - right
05:12 - so
05:13 - sometimes because of this
05:15 - feature we call is that it is faster
05:18 - than
05:20 - other programming languages like java
05:22 - and python way faster than those
05:24 - languages because of this thing it's
05:26 - compiled language
05:28 - like um directly compiler converts the
05:31 - thing into machine code right and in
05:34 - java and python first the code would be
05:37 - converted into byte code then byte code
05:39 - would be converted into machine code so
05:41 - we have a middle thing also so for this
05:43 - conversion it takes time
05:45 - sometimes the compiled languages are
05:48 - considered as faster language this is
05:50 - one factor that it is faster
05:52 - than other language right another
05:55 - factor is what it doesn't have any
05:58 - garbage collection
05:59 - that java is having automatic rbs
06:01 - collection type of thing right so
06:04 - because of that thing
06:05 - also
06:06 - it needs that thing also automatic
06:08 - garbage collection also needs some time
06:11 - but here is no garbage collection
06:13 - so it is faster and see many factors are
06:15 - there with which
06:17 - makes this language fast right it just
06:21 - uh just want to i just want to tell you
06:23 - the features that is why we cannot
06:24 - discuss all the factors i told you one
06:26 - or two factors why it is faster but we
06:28 - can create a separate video on this why
06:30 - it is known as a faster language right
06:33 - next thing is what
06:35 - it is
06:37 - middle level programming language means
06:39 - it supports the features of both low
06:41 - level programming language as well as
06:42 - high level programming language we can
06:44 - create low level application like system
06:46 - software device drivers kernels
06:48 - networking as well as high level
06:50 - applications we can create like gui
06:52 - graphical user interface or any
06:54 - management system these kind of things
06:56 - desktop you know desktop applications we
06:58 - can create
07:00 - so it combines the features of both low
07:02 - level programming as well as high level
07:04 - programming it is close to hardware as
07:06 - well as
07:07 - it is you can say
07:10 - far from hardware
07:12 - we can create those applications which
07:14 - require intense knowledge of hardware
07:16 - for lower level for system programming
07:18 - we need for creating obviously an
07:20 - operating system or device drivers we
07:22 - need
07:23 - a deep
07:24 - level of
07:25 - deep level knowledge of
07:27 - your system or your hardware right
07:31 - so for that thing also we can use this c
07:33 - plus plus
07:34 - this programming this c plus is having
07:37 - those features also
07:38 - as well as the application like
07:40 - application software we create any
07:42 - management system or anything
07:44 - apps those generally don't require
07:47 - these knowledge you know these you know
07:49 - level of knowledge the deep knowledge of
07:51 - hardware the system
07:53 - right so we can create those
07:54 - applications also
07:56 - that is why it is known as middle level
07:58 - programming language this also sometimes
08:00 - they ask in why one interview why it is
08:02 - known as middle level language right
08:05 - so uh next
08:07 - is what
08:08 - it is portable
08:12 - or
08:13 - you can say what does this mean
08:15 - if i write a program
08:17 - in my machine
08:19 - suppose in my laptop i have windows
08:23 - windows 10
08:24 - i have written a c plus program
08:28 - i have compiled it after that obviously
08:30 - dot exe file will be created and we
08:33 - execute this file we run this file and
08:35 - then we go get the output right
08:37 - so this dot exe file
08:41 - we can take this file and this file can
08:43 - run on different
08:45 - machine also we can port this different
08:47 - machine means that but that machine
08:49 - should have same operating system like
08:52 - different machine this is
08:54 - uh your
08:56 - you can say lab in your lab you have
08:57 - written a program in college
08:59 - now.exe file has been created you took
09:01 - this exe file
09:03 - right
09:04 - now this exe file you can run this exe
09:08 - file
09:09 - on at your laptop but that should have
09:12 - windows only windows operating system
09:15 - if it will have operating system like
09:18 - mac
09:18 - or you can say linux
09:21 - there it would not run
09:23 - but yeah it is possible so it is
09:25 - portable language but not platform
09:28 - independent yeah machine independent it
09:31 - is there like one machine
09:33 - this is one machine in your lab another
09:35 - machine your laptop
09:37 - so
09:37 - this program can run here the exe file
09:40 - and you took the cx file and that exe
09:42 - file directly can run on this machine
09:44 - also
09:45 - on your laptop
09:46 - right but that should have same
09:48 - operating system right so you can say
09:51 - portable and here you can say machine
09:54 - independent
09:58 - but
10:00 - it is platform dependent
10:03 - platform means
10:05 - the operating system should be same
10:06 - windows windows if in your laptop you
10:09 - have mac or linux then it would not be
10:12 - possible to run you will have to compile
10:14 - that program again
10:16 - on your laptop and then you can run it
10:19 - just
10:20 - write down the program compile the
10:21 - program again then dot exe file would be
10:24 - created
10:25 - according to your system
10:27 - right
10:29 - here also dot exe file would be created
10:31 - according to your system then you can
10:34 - run it but directly that exe file which
10:36 - is here
10:38 - you cannot run the directly this
10:41 - on mac and linux but yeah if you have
10:43 - windows then you can run maybe with
10:45 - little bit modification
10:47 - right so this is one thing that is why
10:50 - this is portable
10:52 - next you can write it is a very powerful
10:55 - language you know why we call it as
10:57 - powerful or you can say robust language
10:59 - because it supports many built-in first
11:02 - of all data type and many built-in
11:04 - functions predefined functions
11:07 - already in addre files and the libraries
11:09 - we can directly call these functions
11:11 - right you don't have to write down these
11:13 - function again and again we can directly
11:15 - call this function right we can include
11:16 - that header file and we can use all the
11:18 - functions that are predefined in those
11:20 - libraries
11:21 - right
11:23 - second thing
11:24 - why it is so far powerful you can create
11:26 - your own user defined data types also
11:28 - with the help of classes
11:30 - right
11:32 - third thing is what it is extensible
11:37 - now why it is extensible see
11:39 - if in any standard library some built-in
11:41 - functions are there but you can add your
11:44 - own function
11:46 - your own user defined functions in that
11:49 - library
11:50 - right
11:51 - here we have some library
11:53 - in library
11:56 - functions are there
11:57 - built-in functions so you can directly
11:59 - use these functions in your program
12:02 - right
12:03 - like if there is a header file string
12:04 - dot h there are many built-in function
12:07 - for string string cat
12:08 - sdrcad for concatenation of two string
12:11 - string str lin for finding out the
12:13 - length so those functions are really
12:15 - already defined in these libraries
12:18 - right so you can
12:20 - define your user defined functions you
12:22 - can add your user defined function also
12:24 - in this library
12:27 - right so whenever
12:29 - you will call this
12:32 - you know the header file
12:34 - then
12:35 - you can use this
12:36 - this this function also that is why it
12:38 - is known as you have extended
12:40 - the library you have added your own
12:44 - user defined functions
12:46 - in this library that is why it is known
12:48 - as extensible
12:50 - language next is it supports dynamic
12:52 - memory allocation
12:54 - c also supports dynamic memory location
12:56 - with the help of
12:57 - like mellow callout we can use here we
12:59 - have two operators also more operator
13:01 - new and delete however you will use
13:03 - these new you know these two operators
13:05 - that also will see in later videos but
13:07 - it supports dynamic memory allocation
13:09 - dynamically at runtime according to your
13:10 - requirement you can take the memory from
13:13 - the heap you can free the memory right
13:15 - so memory management is in your hand
13:18 - with the help because of this dynamic
13:20 - memory allocation right
13:22 - now in detail we have discussed about
13:23 - dynamic memory location in c programming
13:25 - videos you can refer to those videos the
13:28 - put the link of that video i'll put in
13:29 - there is the cyborg button you can check
13:31 - out right
13:32 - next feature uh what you can write down
13:34 - here it is case sensitive
13:40 - means lowercase uppercase it would
13:41 - consider these things as different if
13:43 - you write down here like
13:46 - jenny and
13:50 - jenny and
13:53 - jenny
13:54 - and if i write like here
13:58 - these are considered as different
14:00 - different thing
14:02 - like here we have only j capital all
14:04 - small all small letters all capital
14:06 - letters only e capital all small so
14:08 - these are considered different different
14:10 - letters uh different different things
14:11 - different different you can say words in
14:14 - c plus plus if you write down name of a
14:17 - variable like
14:18 - if you write down int
14:22 - a r
14:23 - int
14:24 - a r
14:26 - int
14:27 - a r r these are different variables
14:30 - three variables so it is case sensitive
14:33 - that is why
14:34 - see
14:35 - it it give the c plus this programmer
14:38 - more options right but in html
14:41 - and in i think sql also
14:43 - those are not case sensitive
14:45 - these things are same in html
14:49 - it will not differentiate these things
14:50 - these three are same in html and sql
14:52 - they will not differentiate this thing
14:54 - so it is case sensitive next is
14:58 - it supports the concept of pointers
15:01 - java
15:02 - doesn't support pointers with the help
15:04 - of pointers pointers means special
15:06 - variables which contain address of
15:07 - another variable right you can directly
15:09 - interact with the memory
15:11 - right you can directly
15:12 - fetch something from memory
15:15 - obviously it contains some address
15:17 - of some memory location so you are
15:20 - directly interacting that with the
15:21 - memory location right
15:23 - that is why memory management is in your
15:25 - hand
15:26 - in cnc plus well both supports the
15:28 - concept of pointers but java doesn't
15:30 - support pointers
15:31 - right so
15:33 - when you are directly interacting with
15:35 - the memory that is known as low level
15:37 - memory manipulation and this is really
15:41 - required when you are creating system
15:43 - software in this language the concept
15:46 - right because we need to maybe we need
15:48 - to access each and every memory location
15:49 - there
15:50 - pointers it support the concept pointers
15:52 - and next we can say it it is strongly
15:55 - typed
15:57 - strongly typed language or statically
16:00 - typed language now this what is this
16:02 - strongly typed language
16:04 - see before using of any variable you
16:07 - have to declare that variable first
16:09 - suppose
16:10 - i
16:10 - int a
16:12 - and a is equal to 5 and c out
16:15 - a the value i want to print so before
16:18 - using this a we need to declare that
16:20 - variable it's not like that first use
16:22 - this after that you just declare this
16:24 - variable no
16:26 - before using of anything any variable
16:28 - you have to declare first you have to
16:30 - tell the compiler yes this is the thing
16:32 - i'm going to use in future then you can
16:34 - use that thing
16:35 - right that is why it is known as
16:37 - strongly type programming language
16:39 - so i guess these are some important
16:41 - features of c plus plus if i have missed
16:44 - something you can write down that
16:45 - feature in comment box so that other
16:47 - students can also get help from that
16:48 - thing right and if see these are
16:51 - important features sometimes they ask
16:53 - like why this is known as strongly typed
16:55 - why it is
16:56 - portable
16:58 - why it is known as compiled language why
17:00 - it is faster language why it is not a
17:02 - purely object-oriented programming
17:04 - language right i hope answer these
17:06 - things are clear to you guys because i
17:08 - have tried my best to explain the
17:10 - features also why
17:12 - like the why factor also why
17:15 - with all these features so i think
17:16 - that's it for this video in the next
17:18 - video we'll see maybe the
17:21 - uh briefly we can discuss history of c
17:23 - plus plus that is also important thing
17:25 - before going before you know proceeding
17:27 - further before moving deep down into the
17:30 - c plus plus it is you should be clear
17:31 - about the history of this thing so i'll
17:33 - see you next week now till then take
17:35 - care bye