00:00 - in the series of learning programming in
00:01 - c in the previous video we have
00:03 - discussed arrays in c means uh what is
00:05 - need of array what is array a definition
00:08 - and then Declaration of 1D array only
00:11 - right we are left with many points about
00:12 - array like initialization of array uh
00:15 - how arrays are stored like memory
00:17 - representation of array how to access
00:19 - elements of array types of array so
00:20 - we'll discuss all the points one by one
00:22 - in this video I'll talk about
00:24 - initialization of array two types
00:26 - compile time and run time and then I'll
00:28 - show you the practical also on my laptop
00:31 - practical part of previous lecture and
00:33 - for this lecture also like declaration
00:35 - and initialization both I'll show you on
00:37 - my laptop right so you also get ready
00:39 - with your laptop with some ID installed
00:42 - like I have vs code editor in my laptop
00:45 - right so now let us see how arrays can
00:47 - be initialized there are two ways at
00:50 - compile time and at run time both we
00:52 - will see first at compile time it means
00:56 - when you declare the array at that time
00:58 - only you initialize that array means
01:00 - what elements what numbers you want in
01:03 - that array at that time only you will
01:05 - provide the data items like you remember
01:08 - I guess how to declare an array first of
01:10 - all the data type then array name I'm
01:13 - taking here only a and size I'm taking
01:16 - only five right this is what declaration
01:20 - right now at the time of Declaration
01:22 - only we initialize the array we give the
01:25 - data items equal to suppose I'm
01:28 - initializing it 0 - 1 1 11 10 2 and
01:34 - semicolon this is what initialization of
01:37 - array at compile time right five values
01:40 - I have given fine we will see different
01:43 - different types also now first method is
01:47 - this this one we'll see all the methods
01:49 - this is correct second method to
01:51 - initialize at compile time is what you
01:53 - can just write data item array name
01:58 - and I'm I'm not providing here the size
02:02 - right if you declare something like this
02:04 - means it will give error in the previous
02:05 - video I have told you but if you write
02:07 - something like this I'm not giving the
02:09 - size of the array but I'm initializing
02:11 - it like this 0 1 2 again 0 -1 6
02:19 - 7 that is correct this is second method
02:22 - now here automatically the size would be
02:25 - calculated the size of array would be
02:27 - what how many elements are there 1 2 3 4
02:29 - 5 6 7 so it size would be seven now see
02:34 - another variant is what if I write
02:38 - something like this int a and 5 equal to
02:44 - 0 1 - 1 that's it means size is five and
02:50 - I'm giving only three data items then
02:53 - what will happen the
02:56 - remaining data items like two uh we have
02:59 - have left we are left with more two more
03:02 - data items the space for two more data
03:04 - items so those would be initialized with
03:07 - zero
03:09 - fine like zero here suppose if I uh
03:14 - represented something like this then 0 1
03:18 - - 1 and the remaining two locations
03:20 - would be filled with 0 0 automatically
03:24 - right so okay now this is fine but if
03:28 - you write something like this
03:30 - next is what if I write something like
03:32 - this in a 5 and that's it means now the
03:38 - array is having what garbage value any
03:42 - garbage value not zero any garbage value
03:44 - the data items
03:46 - here in these five locations any garbage
03:49 - value would be there if you print
03:51 - without initializing then garbage value
03:53 - would be printed I'll show you the
03:55 - output also right and if you uh write
03:59 - something like this 5 equal to and here
04:02 - I'm giving 1 2 3 4 5 6
04:06 - 7 the size is five but I'm providing
04:09 - seven data items so that this will give
04:14 - error right because we have already
04:16 - fixed what size is five we can only
04:19 - store five
04:20 - numbers next what we can uh do is
04:24 - suppose I have written only this in a 5
04:28 - that's it and here you can write a of0 a
04:33 - of 1 a of 2 and here you can initialize
04:37 - these data items like 1 2 - 1 a of 3 and
04:42 - a of 4 here 11 10 this is also fine
04:47 - individual items you can initialize
04:48 - something like this but obviously we are
04:50 - not going to prefer this method right
04:53 - this is not the right way but yeah you
04:55 - can initialize I'm just telling you the
04:57 - number of ways how to access
05:00 - why I'm writing this a then in these
05:03 - brackets zero means the first index of
05:06 - array would be started from zero so the
05:07 - first element we access the element of
05:10 - the array something like this how to
05:12 - access that we'll discuss in next video
05:15 - right but for this video just I'm just
05:18 - telling you the method so we are not
05:20 - going to prefer this method right next
05:23 - what you can write if you I write
05:25 - something like this int five is equal to
05:28 - I'm writing here Zer only that is also
05:31 - correct all the memory locations would
05:33 - be filled with zero one Zer and
05:36 - remaining would be obviously
05:37 - automatically zero I'm providing only
05:39 - one zero next if you do something like
05:42 - this int a 5 and blank I'm not giving
05:47 - any data here this will give
05:52 - error this is not allowed you have to
05:54 - give at least one data item either you
05:57 - can give zero or any data item or minus
05:59 - one or anything that is fine but you
06:01 - cannot leave it leave it like blanks it
06:04 - will give you error it's not like that
06:06 - you can only write here in I can also
06:08 - write here float that would be a
06:10 - floating type array right all the data
06:13 - items here at that time if you write
06:15 - here float that would be a floating type
06:17 - or you can write character something
06:19 - like this like care array I'm taking
06:21 - care array name is B and here I'm not
06:23 - declaring the size and here I'm just
06:25 - writing how to write down character
06:27 - because it is character array in single
06:29 - codes suppose it's j e n n and
06:38 - y right so this is what a character
06:40 - array of size 1 2 3 4 five data items I
06:45 - have given right or here you can declare
06:48 - the size suppose I'm declaring size 10
06:50 - and I'm giving the data items only five
06:52 - then the remaining items would be null
06:56 - initialized with null value right now
06:59 - here what we have done we have fixed the
07:01 - size this is what a drawback right one
07:04 - by one we'll discuss everything about
07:06 - array and then last video I'll I'll tell
07:08 - you all the properties of array all the
07:09 - points about array so this is what we
07:11 - have fixed the size of the array now we
07:13 - cannot change it and also we have fixed
07:15 - what value we want in Array at run time
07:18 - we cannot change these values but if you
07:21 - want that users should enter at the run
07:24 - time user should enter the element of
07:26 - the array means it will ask enter the
07:28 - number of
07:29 - enter the elements in Array and user
07:31 - will enter any data it means that is
07:34 - what runtime initialization of array
07:36 - this is what compile time we have fixed
07:39 - this data items this is compile time
07:41 - right now these are all variant we'll
07:44 - see practical also right now I'll show
07:47 - you how to initialize array at run time
07:50 - at run time we are going to use some
07:52 - standard functions to initialize are
07:54 - that is obviously for Loop any Loop four
07:57 - while do while and scan aun function
08:00 - right so just declare the array in a
08:03 - suppose I'm taking size is five I'm not
08:05 - initializing here the array now at run
08:08 - time I want so suppose when I'll run the
08:12 - program then it should
08:14 - print at starting enter the elements of
08:17 - array so for that printing we will use
08:20 - what function print F right here you can
08:23 - write enter the elements of array in
08:27 - double quotes and whatever you will
08:28 - write here in double that would be
08:29 - exactly printed on the screen now
08:33 - obviously we have to give five numbers
08:36 - right so what we will use Loops so I'm
08:41 - using here four
08:42 - loop I is equal to I'm going to start
08:45 - from0 I less
08:48 - than uh 5 and I ++ now before using I
08:54 - what you have to declare it int I now
08:58 - here we can take input how we we will
09:02 - take using scanner function I have
09:04 - already discussed print F and scanner
09:05 - function in my previous videos the
09:07 - functioning of these function you can
09:09 - check it out then format specifier for
09:12 - integer it is percentage D address of
09:15 - array is a a of
09:21 - I right now if you want to print then
09:25 - again you have to use again a for Loop
09:27 - and you can print this is what
09:30 - at run time we can initialize the are
09:31 - now this program when this program will
09:33 - be run the compiler will what first of
09:36 - all what compile these uh lines so in I
09:41 - means here in memory some space would be
09:44 - allocated to this I suppose address is
09:46 - th000 here is any garbage value and for
09:49 - a also array name is
09:51 - a and for five numbers the space would
09:55 - be allocated suppose The Base address of
09:57 - array is 2,000 2 2 for this four bytes
10:00 - for this one so this would be 2004
10:05 - 2008 12 and 16 right here also we have
10:10 - some garbage value we haven't
10:11 - initialized it it now enter the elements
10:14 - of would be printed for loop I is equal
10:16 - to 0 so I would be initialized with 0 I
10:19 - less than 0 yes condition true will
10:20 - enter here scanf means it will take you
10:23 - in from the user percentage D address of
10:27 - a of I I value is what
10:29 - zero first of all I Valu is zero means
10:32 - address of a of Zer index is zero here
10:36 - one here two here three here four so a
10:38 - of Z is this one now this address is
10:42 - 2,000 so here whatever number the user
10:45 - will enter that would be stored suppose
10:47 - user will is entering 10 so a 10 would
10:50 - be
10:51 - stored right so like this you can see
10:54 - the I guess you all know the working of
10:56 - for loop I have discussed many times
10:58 - then i++ I would be one then again
11:00 - condition true again this process would
11:02 - be repeated and this is how the array
11:04 - would be initialized index of array
11:06 - would always be started from 0o 0 1 2 3
11:11 - here till size minus one size is 5 5 - 1
11:14 - that is 4 right and if you want to print
11:17 - suppose I have initialized 10 11 - 1 0 2
11:22 - if you want to print the data of the
11:24 - array simply again take again for loop I
11:27 - is equal to from 0 to 5 I Plus+ and in
11:30 - that for Loop rather than scanf to print
11:32 - for output we take what which function
11:34 - print F function print F right
11:38 - percentage D and simply a of I you can
11:41 - write here and there right I'll show you
11:44 - practical of this thing also now when to
11:46 - use compile time initialization and when
11:48 - to use runtime initialization because we
11:51 - have two uh types of initialization of
11:53 - array see if we have only small uh sizes
11:58 - very small like like five or 10 so we
12:01 - can initialize that thing at compile
12:03 - time it's very easy to initialize it in
12:06 - a equal to 5 and you can write five data
12:08 - numbers or you can write 10 that is
12:12 - fine but if the size of array is large
12:17 - like 100 here we have size is 100 int a
12:22 - 100 so obviously it's not possible to
12:26 - write here 100 data items we can write
12:29 - but it's not a proper way it's not a
12:31 - good thing right so there we can do what
12:34 - at runtime initialization and maybe
12:36 - suppose we want like first 50 data items
12:39 - or first 30 data items would be
12:41 - initialized with maybe zero or one or
12:45 - remaining data items would be
12:46 - initialized with uh two or five or
12:49 - anything so at that time it's better to
12:51 - use runtime initialization right how C
12:55 - now here suppose size I have 100 and I
12:58 - want
12:59 - if I is less
13:02 - than uh
13:04 - 30 then a of I would be initialized with
13:09 - one right else a of I would be
13:13 - initialized with remaining portion would
13:15 - be initialized with
13:19 - zero so first
13:21 - 30 numbers in Array would be initialized
13:24 - with one and remaining would be
13:25 - initialized with zero right so if you
13:29 - want something like this this situation
13:31 - is there that that that is also you know
13:33 - we want that runtime initialization is
13:35 - better so now that's it for this video
13:37 - in the next video I'll discuss uh how to
13:40 - access elements of array and memory
13:42 - representation of array and I'll see you
13:45 - in the next video till then bye-bye take
13:49 - care