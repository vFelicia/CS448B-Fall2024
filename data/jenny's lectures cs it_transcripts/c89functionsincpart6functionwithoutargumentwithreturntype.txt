00:00 - so in the series of learning programming
00:01 - in c we are discussing functions in c in
00:03 - the previous video we have discussed a
00:05 - function with no argument and no return
00:07 - type with proper program with example in
00:09 - this video we will talk about the next
00:11 - category of function that is a function
00:13 - having no argument
00:15 - with return time
00:16 - right that will discuss here with proper
00:18 - program and i will show you practical
00:20 - also right and also some you know
00:22 - important points about that thing also
00:24 - we will discuss right whenever we see
00:26 - practical then i'll show you all the
00:27 - important point about that program right
00:30 - but before that i just want to tell you
00:31 - one thing
00:32 - if you are looking for a great career in
00:34 - software development then then you must
00:35 - think about the aspects like what's
00:37 - trending in the industry the questions
00:39 - being asked in the interviews
00:41 - how to improve your course ranking so
00:43 - here an academy brings to your platform
00:45 - where you can get access to weekly shows
00:47 - which you can watch like and the host of
00:49 - these shows are seven star coders on
00:50 - code ship
00:52 - and working in some of the top companies
00:53 - like linkedin google amazon and having
00:56 - years of experience so they'll be
00:58 - covering the content which will be
00:59 - really helpful for your career like in
01:02 - the live episodes you can ask the take a
01:04 - charge the questions being asked in the
01:06 - interview top questions being asked in
01:08 - the interviews and the industry leaders
01:10 - about the recruitment process in the top
01:12 - startups and mncs what is the
01:13 - eligibility criteria and how to apply
01:15 - for them and you can also get your
01:17 - resume reviewed by the experts not only
01:20 - this you can also participate in mock
01:22 - interviews and you can also learn
01:23 - courses on programming languages cloud
01:25 - computing blockchain and crypto tech
01:28 - aspects of digital marketing data
01:29 - analytics and if you want to get some
01:31 - idea about the questions being asked in
01:33 - the top product company interviews then
01:35 - there is a show for you in this show the
01:37 - host will walk through the top interval
01:39 - questions usually asked for the
01:41 - companies like like apple netflix amazon
01:44 - google and how to solve them and respond
01:47 - in a way that will help you to crack the
01:48 - job interviews
01:50 - here you will also get a chance to come
01:51 - live with the host and you get your
01:53 - security result on the spot
01:56 - so if you are a college student and you
01:58 - are looking for a job in the top product
01:59 - company then this show is definitely for
02:00 - you so you can find out the detail of
02:02 - the show and the badge in the link that
02:04 - i'll put in this in the description box
02:06 - of this video and don't forget to use my
02:07 - code jkl10 to get 10 extra discount on
02:10 - your subscription so now let's get back
02:12 - to the topic here we are going to
02:13 - discuss the function which is having
02:16 - what no argument
02:20 - and with return type
02:24 - what are the function which fall in this
02:25 - category
02:26 - suppose i am taking
02:28 - [Music]
02:29 - the general syntax is what suppose i am
02:30 - taking a name of the function fun
02:33 - no argument no argument so i don't want
02:35 - to pass anything here so better to write
02:36 - down here what
02:38 - void
02:39 - right
02:40 - with the return type here it should be
02:43 - some return type may be int care float
02:46 - or maybe no pointer right right but here
02:50 - we are not going to you know discuss the
02:52 - programs at that level that we will
02:53 - discuss one by one here we will just see
02:55 - the program of you know having returning
02:58 - the data type return type would be
03:00 - either into float or cap that will
03:02 - discuss here maybe the function would
03:04 - return address so the data should be
03:06 - pointer right so that also will discuss
03:08 - one by one all the complicated problems
03:10 - on this thing so this is what general
03:12 - declaration of the function which is
03:14 - having return type but no argument right
03:17 - so let's take one example
03:19 - same example i am taking
03:21 - sum
03:22 - right
03:23 - so
03:24 - how to declare
03:26 - return type
03:27 - sum
03:28 - and
03:29 - no argument
03:31 - that's it
03:32 - and here
03:33 - in main
03:35 - certain type of main i am taking word
03:37 - you can also take
03:38 - end so at the last of this main you have
03:41 - to write down simply return statement
03:43 - like return
03:44 - in main i am calling this function sum
03:48 - see what difference is there in calling
03:50 - of the function that also will see
03:52 - some and no argument i want to pose pass
03:56 - so this is what simple calling of the
03:58 - function but here you have to do
04:01 - something with this calling also why
04:03 - see
04:05 - i am not
04:06 - doing something within this main
04:08 - i am defining this function here then we
04:11 - will discuss so return type is in name
04:14 - is sum nothing i want to pass so here
04:17 - write down some logic
04:19 - see
04:20 - no argument it is passing so here we are
04:23 - going to declare
04:24 - our own variables like like in a b
04:29 - and i am taking sum
04:31 - and suppose from the user i want to ask
04:37 - now which category we are discussing
04:39 - with
04:40 - return type with return means i want
04:43 - this function should return something
04:46 - and something means what it is
04:49 - function of what sum i want to do sum of
04:52 - two numbers so what it should return sum
04:54 - of those numbers
04:56 - so rather than printing the sum here
04:59 - i want that this function should return
05:02 - the sum where it will return where you
05:04 - are calling this function so means it is
05:06 - returning
05:07 - so here we are not using that sum using
05:10 - means here we are not printing the sum
05:13 - simply write down what return
05:16 - and what you want to return sum so
05:18 - simply write down return
05:20 - sum semicolon
05:22 - that's it
05:24 - so now it is returning some here some is
05:26 - off i'm taking int type
05:29 - so if it is returning
05:31 - sum
05:32 - so definitely here also we have some
05:34 - variable to store that some or to you
05:37 - know accept that sum from this function
05:41 - right so here also whatever it is
05:43 - returning you have to store that sum in
05:46 - some variable
05:48 - suppose i am taking a variable
05:50 - s
05:52 - so first of all you have to declare this
05:53 - variable s
05:56 - right because i am using that variable
05:58 - so that if you don't declare that will
06:00 - give error
06:01 - so now
06:02 - the sum is whatever it will return the
06:04 - sum that has been stored in this s and
06:06 - now here you can print
06:09 - sum is equal to percentage d and what
06:11 - you will print here
06:13 - s
06:15 - see if you will print here sum because
06:17 - see sum is equal to a plus m so maybe
06:19 - you think that we can directly print
06:21 - here some it will give error why because
06:23 - the sum is what a variable which is
06:25 - local to this function only here i am
06:27 - declaring some within this function
06:29 - as soon as control will go out of this
06:31 - out of this scope the sum would be
06:34 - vanished destroyed like we cannot use a
06:37 - b or sum
06:38 - these variables out of this function so
06:40 - in main
06:41 - that is why we are taking another
06:43 - variable which is going to store the sum
06:45 - s so here you have to print
06:48 - s only
06:50 - so i think here also you can see the
06:52 - difference of of calling of the function
06:56 - in the previous case we are just calling
06:57 - sum and that's it we are not going to
07:00 - store
07:01 - this you know we are we haven't take any
07:03 - variable s is equal to some this kind of
07:05 - thing why because the sum was not
07:07 - returning anything
07:08 - if some will not return anything so
07:10 - simply here you can print some
07:13 - i don't want that this function will
07:14 - return something so here only you can
07:16 - print some and that's it but here this
07:19 - is returning something
07:20 - right so once control first of all
07:22 - control will go here
07:24 - in sum one variable has been assigned
07:26 - like
07:26 - in for main some memory has been
07:28 - assigned so here we have s here this has
07:31 - some garbage value so now s is equal to
07:34 - sum this means this is function call now
07:36 - control will go here
07:38 - right
07:39 - now match the declaration and definition
07:40 - return type same sum
07:43 - nothing is going to pass so we are not
07:45 - going to write down any parameter to
07:47 - receive something here right
07:50 - so some for some also some memory has
07:52 - been allocated whenever you call this
07:54 - function
07:56 - so here we have a b
07:58 - and sum a b and
08:00 - sum in sum we have 0
08:02 - whatever you are suppose i am entering
08:05 - value 5 and 7 so sum is equal to a plus
08:07 - b in sum now we have 12
08:10 - and now the control will reach here
08:11 - return sum so this 12 would be return
08:14 - where
08:15 - here this would return to l so whatever
08:18 - it will return i have a variable to
08:20 - store that value so in sum now we have
08:22 - 12 so simply print
08:24 - okay
08:26 - right
08:26 - but see
08:29 - this return will return the sum value as
08:31 - well as it is going to return the
08:32 - control here so after this return
08:35 - if you write something here suppose i am
08:37 - writing printf
08:39 - and
08:41 - inside
08:43 - some function
08:45 - that also i want to print
08:46 - so
08:48 - it is not going to execute this line
08:50 - this code is what
08:52 - unreachable code why because as soon as
08:54 - the control will see the return
08:55 - statement it will return some the value
08:58 - and the control the control will go here
09:02 - means now the control is here so
09:05 - the program is not able to execute this
09:07 - line so you will not get
09:09 - this output means this line would not be
09:11 - printed on your output screen you will
09:12 - only get the output to n so whatever you
09:14 - will write down after this return
09:16 - statement within this block before this
09:18 - curly brace closing of this curly braces
09:20 - that would be unreachable code
09:22 - right and here
09:24 - return some you can also write down this
09:26 - some in
09:27 - braces
09:28 - maybe in some compiler
09:30 - if you don't write braces it will give
09:31 - error
09:32 - right
09:33 - i can't i can't say so that is a good
09:35 - practice if you write down this in curly
09:37 - braces because see or or if you don't
09:40 - want to
09:41 - write down this line you want to you
09:43 - know get rid of this line so simply
09:45 - you don't have to
09:47 - write down this line and simply you can
09:48 - say return a plus b
09:52 - this will also return a plus b that is 2
09:54 - l
09:55 - so
09:56 - we don't have now suppose sum
09:58 - we have only a plus b
10:00 - so in here we don't have sum
10:03 - so a plus b directly it will return 5
10:05 - plus 7 is 12 so 12 it will return here
10:08 - once control will reach here this will
10:10 - be vanished
10:12 - right
10:13 - or if you write down like
10:15 - a return if you want to return sum
10:19 - like sum is equal to a plus b
10:22 - comma
10:23 - a
10:24 - you want that these both should return i
10:26 - mean return should return sum also and a
10:28 - also
10:29 - so now here
10:31 - comma is operator and the working of
10:33 - comma is what execute the first
10:37 - first operand discard the value and
10:39 - return the value of the next operand so
10:41 - here it will return value of a it will
10:43 - not return sum here value of a is over 5
10:47 - so it will return 5 so 5 would be
10:49 - printed here
10:50 - this i'll show you practical practically
10:52 - also right here i am returning only sum
10:55 - so i hope you got the difference i mean
10:57 - this category of the function with no
10:58 - argument with return type and if you
11:01 - wrote not do not write down here what
11:03 - means
11:04 - if you will pass here some argument like
11:06 - here i am passing 5 and 4
11:09 - then it will not give error
11:12 - but logically means we want obviously
11:14 - this this should give error because i
11:17 - don't want to pass any argument no
11:18 - argument but here you are passing
11:20 - argument so it should be varied but it
11:21 - will not give error so better to write
11:23 - down here no arguments so better to
11:25 - write down here
11:26 - what just to you know guarantee that if
11:30 - you write down now if you write down if
11:32 - you pass any argument now it will give
11:33 - error
11:34 - right so let me show you practical of
11:36 - this program
11:38 - so let me create a file
11:40 - we are discussing what
11:42 - no argument
11:44 - and with return time
11:46 - right
11:57 - here i am taking with return type i am
11:59 - taking int
12:00 - sum
12:01 - no arguments means i am writing here
12:04 - what this is just
12:05 - just a declaration and here in the main
12:08 - i want to call that function that is
12:11 - sum
12:12 - so now here whatever it will return that
12:16 - i want to store in a variable s
12:18 - so first before using this s obviously
12:20 - we have to
12:22 - declare first like int
12:25 - s
12:26 - and now
12:27 - we are printing we have to print what
12:31 - sum equal to
12:34 - this s also we have to print
12:37 - so now
12:38 - what define
12:40 - end
12:41 - sum
12:42 - no argument
12:44 - simply here only i am taking in t
12:45 - suppose here only i am taking value 5
12:48 - comma b is equal to 7
12:51 - right
12:52 - and
12:54 - what simply you can write down here
12:58 - or rather than writing this ret you are
13:01 - in return
13:02 - a plus b
13:06 - that's it
13:07 - directly it will return 12
13:09 - you can also ask from the user like
13:11 - print f enter a b a value of a and b and
13:13 - scan f a and b you can do that thing
13:15 - also
13:16 - so here c sum is equal to 12
13:19 - it is returning a plus b that is 12 so
13:21 - here
13:22 - now 12 would be stored in s and s i am
13:24 - printing right so here
13:27 - suppose here i am writing sum is equal
13:29 - to a plus b
13:33 - now rather than a plus b
13:35 - you can return sum
13:37 - but you cannot use sum here because you
13:38 - are not declaring that variable so first
13:41 - of all you have to declare sum is equal
13:42 - to suppose 0
13:45 - right
13:46 - now let's see what happens it will also
13:48 - give you sum is equal to 12. so now if
13:51 - you write after return statement if you
13:53 - print if you write down something like
13:55 - printf i want to print hi
13:59 - so this printf would not get executed
14:02 - why because it is after return see
14:04 - simply it is printing sum is equal to 12
14:06 - you are not getting any output like high
14:09 - because this code is unreachable
14:11 - after return statement if you write
14:12 - anything that would be unreachable here
14:14 - so we cannot write down here and here
14:18 - same thing if you want to
14:19 - do like
14:20 - comma a comma b
14:24 - so in this case what value it will
14:25 - return
14:27 - b
14:28 - whatever the value of v that is 7 so sum
14:30 - is equal to 7 you will get
14:32 - because the functionality of comma is
14:34 - what this first comma is what
14:36 - execute the first
14:38 - evaluate the first operand discard the
14:40 - value and return the next
14:43 - it will return a but here we have
14:44 - another comma so for this comma operator
14:46 - a is what left open so execute the left
14:49 - expression or the operand
14:51 - discard the value and return the right
14:52 - one right is b so whatever the value in
14:55 - b that it will return
14:56 - right and if b after b also if you do
15:00 - comma
15:01 - sum
15:03 - now it will return sum that is 12 so now
15:06 - you will get sum is equal to 12 because
15:07 - now for this comma b is left and sum is
15:10 - right so it will return the right so so
15:12 - comma operator i have discussed in
15:13 - detail so you can watch out the previous
15:15 - videos
15:16 - right
15:17 - of c programming the list and the
15:19 - playlist link i'll put in the
15:21 - description box of this video
15:22 - so i guess if now here
15:25 - if you don't write down hair void
15:29 - so here if you pass any argument like
15:31 - 4 comma 6
15:34 - it will not give any error and still it
15:36 - will give some is equal to 12
15:39 - obviously because 4 and 6 you are
15:41 - passing but here you do not have any
15:43 - parameter to accept those argument
15:46 - right
15:48 - so better to write down here what
15:50 - void in the declaration
15:52 - to get rid of the situation now now if
15:53 - you will run this it will give error so
15:55 - now here see
15:57 - it is giving error too many argument in
15:59 - function call here only you can see
16:00 - without running
16:02 - so
16:03 - we cannot write down here or you can you
16:06 - can also return a character
16:08 - like suppose i am writing here care
16:11 - or suppose i am writing here float
16:14 - that is also fine you can return float
16:16 - type i want to return the sum should be
16:18 - flow type so here also it should be
16:21 - float
16:23 - right
16:25 - and in main also
16:26 - we have a variable of float type
16:29 - because it is going to return float
16:31 - value sum is equal to this and sum is
16:33 - equal to now percentage f
16:35 - s and return sum so here also you can
16:38 - take float uh variables like float five
16:41 - point seven five point you know one or
16:43 - seven point one like this if you don't
16:44 - take float you don't you will take end
16:47 - then also it will print float because
16:48 - here we are writing percentage f see
16:51 - what it will print twelve point zero
16:53 - zero zero zero like six zeros it will
16:56 - print okay
16:57 - let me run this now
17:00 - see twelve point zero zero zero float
17:02 - value or if you write down here care
17:06 - ah right like
17:08 - i want to return it should return some
17:10 - character value
17:11 - so in declaration also it should be data
17:14 - type should be cat otherwise it is going
17:16 - to give some error
17:17 - right
17:18 - and here
17:21 - before this return
17:23 - return return i want to return
17:27 - now
17:28 - this a
17:30 - character is a
17:33 - so now this return statement is first so
17:35 - now return sum
17:37 - this is what unreachable code so it is
17:39 - not going to execute that that thing so
17:42 - it will return now a so here also
17:45 - function name is sum i am not changing
17:47 - the function name you can change the
17:48 - function name also right
17:50 - it just to get you understand the
17:51 - functioning of the or the data type like
17:53 - in float or care obviously
17:56 - sum is a function name it is not going
17:57 - to return care because you are going to
17:59 - do some of two numbers but here i am not
18:01 - changing the function name so this some
18:03 - function is returning character value so
18:05 - here also
18:07 - s should be of care time
18:10 - because whatever it will return we are
18:11 - going to store that thing in s now s you
18:14 - are printing so that should be
18:15 - percentage c you have to use percentage
18:17 - c and s so now what output you will get
18:19 - think see
18:22 - you will get
18:23 - a
18:25 - c sum is equal to a because here we are
18:27 - returning return a the character
18:30 - right or here also that program i have
18:32 - already discussed like printf enter a
18:34 - character scanf you can ask from the
18:36 - user whatever character
18:38 - the user will
18:39 - you know enter that it will return
18:41 - return that character right that we have
18:43 - discussed in one of the previous videos
18:45 - you can watch out that video also right
18:50 - and so one example one one question for
18:52 - you is i am going to return here comma
18:55 - 0
18:57 - and here comma
19:00 - 1
19:01 - i'm writing this return statement this
19:03 - is the program for you right so now you
19:05 - have to tell me what output you will get
19:07 - here
19:09 - fine in the next video we will see the
19:10 - next category of function that is with
19:12 - argument
19:14 - without return time so now it's in the
19:16 - next video till then bye