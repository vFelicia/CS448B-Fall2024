00:00 - so now see you can reverse a linked list
00:03 - using two methods first one is a pretty
00:06 - approach using loops and second one is
00:09 - using recursion so in this video we'll
00:11 - use what iterative approach to reverse a
00:14 - linked list right so now see suppose
00:17 - this is a linked list in this linked
00:19 - list we are having four nodes this is
00:21 - known as a node this is data part and
00:24 - this is what address part this is going
00:26 - to contain address of the next node fine
00:28 - addresses of this node is 100 200 150
00:32 - and 300 see it's not like that the
00:34 - address should be always in increasing
00:36 - order or decreasing order any random
00:38 - address can be assigned in the memory
00:40 - fine
00:41 - now after reversing of this linked list
00:45 - the output should be something like this
00:47 - see here reversing doesn't mean that we
00:49 - are going to swap this five five would
00:52 - go there and seven would come here six
00:54 - would go there one would come here no
00:56 - hey what I am going to follow is the
00:59 - method in which we are going to reverse
01:02 - these links see this node is going to
01:05 - contain address of next node after you
01:07 - are saying we are going to reverse this
01:09 - link means now this node is going to
01:11 - contain address of the previous node not
01:14 - the next node like this fine and head is
01:18 - pointing here head is going to contain
01:20 - 300 now see this node is going to
01:24 - contain address of previous node that is
01:26 - 150 this node is going to contain
01:29 - address of previous node that is 200 in
01:32 - this case in this case this node is
01:34 - containing address of next node that is
01:36 - 300 so we are going to reverse these
01:40 - links fine so this is the original link
01:43 - list and this should be the output when
01:45 - you will display the link list after
01:48 - reversing then the output should be
01:50 - seven one six and five now how you will
01:54 - implement this thing in C program let us
01:56 - see that thing so now first of all we
01:58 - will discuss the method we will apply
01:59 - the method here and after that we will
02:01 - write down the code see how you can
02:03 - reverse this obviously you have to
02:04 - traverse this linked list
02:06 - fine and when they traversing while you
02:10 - are traversing at that
02:11 - only we are going to reverse the sling
02:13 - fine
02:15 - we are going to traversing the leg link
02:17 - list as well as with the traversing we
02:20 - are going to reverse this link these
02:22 - links so how we usually traverse the
02:25 - linked list we have already discussed in
02:27 - the previous videos using a temp pointer
02:29 - so suppose I am going to take here a
02:32 - temp pointer pointer to node so it's
02:37 - starting temp is going to contain
02:38 - hundreds who tempest containing address
02:42 - hundreds fine both head and M now see
02:47 - for reversing this this node should
02:50 - contain address of previous node but
02:53 - here no previous node is there
02:55 - it means previous node is what null so
02:57 - here you will store what null rather
03:00 - than this we are going to update this
03:02 - with zero you can exist this part by
03:05 - this temp temp next is equal to zero or
03:07 - you can say temp next is equal to
03:09 - previous node because after reversing
03:11 - each node is going to contain address of
03:14 - its previous node so we have to maintain
03:16 - the address of previous node also fine
03:18 - in this case right now previous node is
03:20 - having zero right so now this link has
03:25 - been broken now fine so now we cannot
03:29 - move here because this link has been
03:32 - broken so now suppose with the help of
03:35 - some logic we have moved here now temp
03:39 - is pointing here right MP is not
03:43 - pointing here now MP is pointing here
03:45 - that is temp is going to contain 200
03:47 - fine I'll tell you that logic when you
03:50 - are writing that code
03:51 - so now temp is pointing here now what
03:54 - what you will do temp next here what you
03:57 - will store the address of previous node
04:00 - obviously you are going to reverse this
04:02 - link so you are going to store address
04:04 - of this one fine but we have already
04:07 - moved this temp here now how you can
04:09 - access this address address of this
04:13 - previous node so you have to maintain a
04:15 - pointer that is previous node pointer
04:17 - suppose I am taking a pointer three node
04:21 - and here now I am storing this hundred
04:24 - first of all in
04:26 - jir√¥ was there after that we have moved
04:29 - this free node and now this is pointing
04:31 - to here see I'm not moving this head in
04:35 - this case you can move this head also so
04:38 - now here what you will store this
04:40 - hundred so from where you will get
04:42 - hundred from this previous node so here
04:44 - you can store 100 so now this link has
04:47 - been established now this link has been
04:49 - broken so now how we can move here
04:52 - because this there is no link between
04:55 - this and this fine so what you can do
04:59 - before updating this thing before
05:01 - updating this thing this next part of
05:04 - this one what we can do we can take
05:07 - another pointer variable and we can
05:11 - point that variable here that pointer
05:16 - variable suppose that pointer variable
05:18 - name is next no fine
05:22 - so before so before updating this here
05:27 - we have 150 only so what you can do this
05:30 - next node is at another pointer we are
05:33 - taking three pointers now so next node
05:36 - equal to in next floor we will store 150
05:39 - because address of this is what 150 so
05:41 - here we should store 150 from where you
05:43 - will get 150 from here have you panic
05:46 - says this node because one pointer is
05:48 - there pointing to this node so we can
05:50 - easily access both the parts so next
05:53 - node what you can say next node is equal
05:54 - to temp next now we have one pointer to
05:58 - this thing now you can update this thing
06:00 - now here we can store hundred and now
06:03 - this link has been broken so we have no
06:06 - problem because here also we have one
06:09 - pointer pointing so for reversing a
06:12 - linked list you are going to maintain
06:14 - one two and three pointers so in this
06:18 - case one previous node one next node
06:21 - pointer and suppose I am NOT taking this
06:23 - temp the name I am taking that is
06:25 - current node you can take temp also
06:30 - these are just names you can take the
06:33 - name of
06:33 - to your convenience fine so now how you
06:37 - will write this logic see so now we will
06:40 - see how to write down a C program for
06:42 - this thing fine
06:43 - C in this case also we are going to
06:46 - create three functions one is create
06:48 - linked list second one is reverse and
06:50 - third one is display the linked list
06:52 - create and display that we have already
06:55 - discussed the coding of those function
06:57 - we have already discussed in the
06:58 - previous videos you can check out that
07:00 - we do in this I button fine here I will
07:03 - write down the coding for this reverse
07:04 - function only and you can call these
07:06 - function into main function this thing I
07:08 - hope everybody knows you have discussed
07:10 - many times have to represent how to this
07:12 - big define your own datatype how to
07:14 - represent this node struct node data
07:17 - type name is struct node two parts are
07:18 - there in two data for this part and this
07:20 - is what struct no district next it will
07:23 - this is what a pointer to next node this
07:24 - is going to store address that is why I
07:26 - am taking here the type pointer and one
07:30 - link sorry one pointer we have to
07:32 - maintain that is head pointer this head
07:35 - this pointer is to the 0.02 next node so
07:38 - we in program we just have this pointer
07:41 - address of this pointer or you can say
07:43 - this this value only fine so this is how
07:46 - this you can declare globally fine so
07:50 - that in each function you can use this
07:52 - data type in create linked list also in
07:55 - reverse also and in display also now
07:59 - other than head we are going to use
08:01 - three pointers three more pointers so we
08:05 - are going to declare here these pointers
08:07 - that type these pointers are going to
08:09 - contain address of these nodes so this
08:12 - is how we are going to declare these
08:14 - three pointers fine these pointers are
08:16 - going to contain address of another node
08:19 - fine that is why I am writing here
08:21 - struct node and a strict why because
08:23 - these are pointers and starting previous
08:26 - node will contain what is 0 fine because
08:29 - this node is having no previous node so
08:31 - this node is going to contain this next
08:33 - is going to contain what 0 and Lina the
08:36 - address of previous node and previous
08:37 - node is having 0 only so that is why it
08:40 - starting will initialize this previous
08:43 - node is equal to 0 after that will
08:46 - this value right so it's starting in
08:49 - this we have zero fine and both these
08:52 - current and next node will be
08:54 - initialized with head so both will point
08:57 - to the first node because we are going
08:59 - to traverse the list fine obviously from
09:01 - starting node only we are going to
09:03 - traverse so here what you will write
09:06 - both the current node and next node will
09:11 - contain whatever the value in head in
09:15 - head we have 100 so here hundred and
09:17 - here also hundred so now this is also
09:20 - pointing here and this is also pointing
09:22 - to the first node now we are going to
09:24 - start the traversing till where till
09:27 - here what condition you will write
09:29 - obviously this means the end of the list
09:32 - means that this next would be zero so in
09:35 - while loop what you will write while
09:41 - next node not equal to zero we are going
09:46 - to move next node then current node and
09:48 - previous noodle so this is how we are
09:50 - going to move these so next node not
09:52 - equal to zero till then we are going to
09:54 - move so now we are going to write down
09:56 - the main logic please concentrate on
09:58 - this thing see now both next node and
10:00 - current node are pointing to this node
10:02 - now before updating this 200 before
10:05 - updating this 200 to 0 first of all what
10:09 - you will do you will move one pointer
10:13 - you can say this next node to here
10:15 - because once you update this to 0 you
10:17 - are going to lose this length so there
10:21 - is no way to reach here so first of all
10:24 - we are going to set a link to here then
10:27 - we are going to update this thing so now
10:28 - first of all we are going to move this
10:30 - current node here to the next node so
10:34 - you will update this value means current
10:35 - node now is going to store 200 so from
10:38 - where you can get this 200 from here
10:40 - before updating right so however right
10:44 - in next node what you will store next
10:49 - node is equal to this 200 value how we
10:52 - will get this 200 you can use what next
10:55 - node
10:59 - you can access this using this pointer
11:02 - of this pointer fine so we are using
11:04 - this one next node and the name of this
11:07 - field is what next next right so now
11:15 - after executing this line now the value
11:18 - is of this is what 200 so now it is
11:20 - pointing here so now you can update this
11:23 - link you can break this link now fine
11:26 - then there would be no problem so now
11:28 - here what you will store 0 means
11:30 - whatever the the value in the previous
11:32 - node so how you will access this thing
11:35 - using current node because we we can
11:38 - access this structure variable using a
11:40 - pointer so current node is pointing to
11:42 - this node so what you will write here
11:45 - current node and this part we are going
11:49 - to access this part that is next as
11:51 - equal to whatever the value in previous
11:54 - node right now this is going to store 0
11:59 - now you have broken this link right so
12:04 - now this is pointing to null you can see
12:07 - right there is no link between this and
12:10 - this now so now this node is going to
12:14 - store address of previous node so
12:16 - obviously we have to update the previous
12:18 - node value so now this previous node
12:21 - should contain hundred so we are going
12:23 - to update this previous node we are
12:25 - going to move here so from where we you
12:27 - can get this hundred see the value of
12:29 - current node is hundred so here you can
12:31 - write what this previous node is equal
12:33 - to current node right now after
12:38 - executing this line this becomes hundred
12:41 - so now this is also going to point this
12:44 - node right and obviously we are going to
12:48 - move this current node also here fine so
12:52 - now what you will do in current node we
12:54 - are going to store 200 so from where you
12:56 - can get 200 from next node so after this
12:59 - you will write what current node is
13:04 - equal to next node
13:08 - and now we are going to close this while
13:11 - you now after exhibiting this line
13:13 - current node is equal to next node in
13:14 - next node we have 200 in current node
13:16 - also we are going to store 200 now
13:18 - current node is also pointing to this
13:21 - one the second one right now again this
13:26 - is close of while loop now again while
13:27 - loop will be executed while next node
13:30 - not equal to none now next node is 200
13:32 - 200 is not null again control will go
13:34 - within this loop next node is equal to
13:36 - next node next so next node is 200 next
13:40 - node using this next role pointed you
13:42 - can access this node so next node next
13:45 - is 150 right so here we are going to
13:48 - store 150 now before updating this we
13:52 - have to maintain a pointer to the next
13:54 - node fine
13:55 - so now the next node is going to point
13:58 - where here now you can break this link
14:03 - now you can update this thing second
14:04 - step so current node next is equal to
14:07 - previous node so now current node next
14:09 - is 150 so here you will store previous
14:12 - node previous node is going to contain
14:13 - hundred so here you will update hundred
14:15 - it means 100 is the address of previous
14:18 - node so it is going to point like this
14:21 - so now you have reversed the length this
14:24 - link has been broken now after this we
14:27 - are going to move previous node and
14:28 - current node also now previous node is
14:30 - equal to current node so 200 would be
14:32 - stored here now here we will write 200
14:35 - fine so now this previous node is going
14:38 - to point here and in current node we are
14:42 - going to store next node that is 150 so
14:44 - here if you write 150 so now both
14:47 - current node see this current node and
14:52 - next node is also pointing to 150 right
14:56 - and there is no link between these moves
14:58 - now what you will do again
15:00 - while next no not equal to null next
15:02 - node is 150 if that condition is true so
15:04 - then again control will go within this
15:06 - loop now first of all before we are
15:08 - going to update this thing here you are
15:10 - going to store 200 but before updating
15:12 - the next node we will not Nick we will
15:14 - move next node to here so next node is
15:17 - equal to next node next so next node
15:19 - next we have 3
15:21 - so here you will store what 300 now you
15:25 - can update this thing have you will
15:26 - update have you Alexis this thing using
15:29 - thus known because this node is pointing
15:30 - to this node now current node next is
15:32 - equal to previous node that is two
15:35 - hundreds in previous node we have two
15:38 - hundred previous node means it is going
15:40 - to maintain address of the previous node
15:42 - fine so now it is pointing here right
15:46 - now you can update previous node and
15:48 - current node also previous node is
15:51 - current node that is previous node is
15:52 - now going to contain 150 fine so it is
15:56 - not pointing here now previous node is
15:59 - pointing here and now we will move this
16:02 - current node also current node is equal
16:03 - to next to next or we have three hundred
16:05 - so here we have three hundred so now
16:08 - this is also pointing to here so now
16:12 - again next no not equal to null next
16:15 - node is containing three hundred so next
16:17 - node is not null again control will go
16:19 - within this loop again we are moving
16:21 - this next node is equal to next node
16:23 - next now next node next is containing
16:26 - zero so here you will write to zero so
16:29 - now it is going to point null no we're
16:31 - fine now what you will store here here
16:36 - you are going to update this link and
16:37 - 150 would be stored here so current node
16:40 - next is equal to previous noting
16:42 - previous node we have 150 so the value
16:45 - 150 will be stored here in the current
16:48 - node next so now it is pointing to here
16:53 - because 150 is at the so previous node
16:55 - right now previous node is equal to
16:58 - current node previous node is equal to
17:00 - current node in current node we have
17:01 - three hundred so here we will update
17:04 - this that is 300 now previous node is
17:06 - pointing here again move current node is
17:09 - equal to next node next node is the 0
17:11 - the current node is also 0 both current
17:15 - and next node is going to contain 0 only
17:17 - we have previous node value that is 300
17:20 - now previous node is pointing here so
17:22 - now we have reversed all the links but
17:24 - one thing you have to take care header
17:26 - still pointing here head should point
17:28 - here now head should contain address of
17:31 - this node that is
17:33 - so from where you can get 300 no problem
17:36 - we have previous node link and this is
17:39 - containing 300 that is why we are
17:41 - maintaining this previous node so now
17:43 - after this while loop you can write what
17:45 - head is equal to previous node 3 node
17:50 - and after that you can close the bracket
17:53 - of this function now head is equal to
17:55 - previous node so now head is containing
17:58 - what here I can write this head previous
18:05 - node value is 300 so now head is
18:07 - pointing here fine so as you can see
18:11 - this is the output we have reversed the
18:13 - link list after that you can call the
18:15 - display function fine and the output
18:18 - would be 7 1 6 and 5 and this code will
18:22 - work even if you have only 1 node if
18:24 - only one node is there that is 5 is
18:26 - there then output is also 5 so I hope
18:29 - you can write the coding for the create
18:30 - function and display function and I have
18:32 - written the coding for reverse function
18:34 - and you can call these function into
18:35 - main function so from next video we'll
18:37 - discuss a more operation on link list
18:39 - and as well as we will see doubly linked
18:41 - list so I'll see you in the next video
18:43 - till then bye bye