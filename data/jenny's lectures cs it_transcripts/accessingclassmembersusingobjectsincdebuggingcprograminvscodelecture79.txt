00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - C++ programming language we are
00:05 - discussing oops Concept in C++ in the
00:07 - previous video we have seen what is a
00:08 - class what is an object how to define a
00:10 - class how to create objects right with
00:13 - the help of examples and real life
00:14 - examples as well so in this video we'll
00:16 - see like practically those things we'll
00:19 - be uh you know creating a class defining
00:21 - a class and we'll be creating some
00:23 - objects of that class and then we will
00:25 - be accessing whatever the you know
00:27 - attributes and those uh you know
00:29 - functions or the methods in that class
00:31 - with the help of those objects right
00:33 - practically so I'll show you this thing
00:34 - with the help of a program so we'll take
00:36 - this example this is a class suppose
00:38 - account class and here we have these are
00:40 - two attributes string name and balance
00:44 - and these two are methods of this class
00:47 - right so we will create objects with the
00:50 - help of new keyword as well as without
00:52 - new keyword right these two methods I
00:54 - have discussed in previous video how to
00:55 - create object type one is like uh with
00:58 - the help of new keyword it's like
00:59 - creating pointer to object so both ways
01:03 - we will discuss here and using both ways
01:05 - how to access these attributes and
01:08 - methods with the help of those objects
01:10 - we will see so this video would be a
01:12 - little bit lengthy right in detail we'll
01:14 - see this thing practically and I I'll
01:16 - show you how to debug that program step
01:18 - by step then you will get it clearly
01:21 - right how this program is actually
01:23 - running behind how these values is to be
01:26 - assigned with the help of object and
01:27 - when this values is to be assigned
01:29 - something like this right right so we'll
01:30 - debug this program step by step fine so
01:33 - let's start okay so now we are going to
01:35 - create a class so first where to create
01:37 - that class inside the uh inside this uh
01:40 - main yes you can create this class
01:42 - inside main but this is not recommended
01:45 - because if you create a class inside
01:46 - this main function then the scope of
01:48 - this classes within this main only you
01:50 - can use that class not outside of this
01:52 - Main and when you'll be working on
01:54 - projects then we will be using you know
01:55 - we will be declaring classes in some
01:57 - other file and we'll be using those
01:59 - classes in some other file like in one
02:02 - file what suppose another file I have
02:04 - one another file we have so in a you
02:05 - know project we'll be having different
02:07 - different files So within you know
02:09 - entire application I'll be using those
02:11 - classes maybe so always you don't
02:14 - declare these classes outside main
02:16 - function so that we can use these
02:18 - classes within you know that entire
02:21 - application of the entire project
02:22 - wherever you want to use so how to
02:25 - define a class class keyword and name of
02:29 - the class class I'm taking what is the
02:31 - class
02:33 - account I mean Pascal naming convention
02:35 - we use so first word first letter of
02:38 - every word would be Capital right now
02:42 - here let's take these two things these
02:45 - two
02:49 - attributes and if you're using string
02:51 - here so better better to include here
02:55 - which file I have told you already when
02:56 - we were discussing string string header
02:59 - if you not include include that also by
03:00 - by default using that iio stream also
03:02 - these features would be added but always
03:05 - explicitly include string header if
03:07 - you're using string explicitly you know
03:09 - include Vector header if you using
03:11 - vectors that would be good for you that
03:13 - would be recommended always right so
03:16 - okay these two are attributes we are
03:18 - having and now we will have
03:21 - some methods so like this and there you
03:24 - should have a semicolon after this class
03:26 - so that's it we have like taken two
03:29 - attributes and methods within this class
03:30 - account right now how to create like we
03:34 - will be obviously creating objects in
03:36 - this main so we'll be accessing uh these
03:39 - names this spell attributes and methods
03:40 - with help of object only right so let's
03:42 - create object what is the formula what
03:45 - is the way to create object class name
03:47 - one ways just class name and object name
03:50 - so suppose I'm
03:54 - writing Jenny account
04:01 - right account and object name is Jore
04:04 - account or any object name you can take
04:05 - a BC x y z anything
04:08 - right one object I have created now this
04:12 - thing we have seen in previous video if
04:13 - you run this you will not get any output
04:15 - but you will not get any error as well
04:17 - right that's it compiled
04:20 - successfully now if you debug this if
04:22 - you debug this so let's put that break
04:26 - point here here account Jen I mean when
04:30 - we are creating that object so here you
04:32 - see that run and debug that option or
04:34 - you can just press control plus shift
04:36 - plus d so just enter and here see
04:40 - already I have chosen this compiler C
04:41 - C++ g++ do exe if you are working in C++
04:45 - use this g++ exe right uh select this
04:49 - one otherwise if you're working in C
04:51 - language use GCC so this compiler this D
04:54 - I have already Chosen and
04:57 - run so see here you see variable and
05:00 - watch and call stack see stack I have
05:02 - shown you I mean we have discussed that
05:03 - stack memory right so see in locals I
05:08 - hope you are able to say this we have
05:11 - one object one variable J account in
05:14 - name we have nothing like see let me
05:18 - just show you here in name in data plus
05:22 - we have just nothing right no name and
05:26 - balance is any garbage value right now
05:30 - let me show
05:30 - [Music]
05:32 - you see it now it's debugging our code
05:36 - so once you click here step over the
05:38 - next step is the cursor is here now here
05:42 - means that's it after next that's it
05:46 - means there is nothing right okay fine
05:48 - now we will see
05:50 - what we will be assigning values here
05:54 - let's delete this break point
05:57 - here now have to exess
06:01 - these attributes and methods by default
06:04 - all these attributes method whatever is
06:05 - in class is private by default so we
06:08 - cannot access directly two methods are
06:10 - there with the dot operator with ar
06:11 - operator we'll discuss both these things
06:13 - how to access just the object name dot
06:16 - operator with the help of dot operator
06:18 - one ways with the help of dot operator
06:19 - Dot and name I want to access so just
06:23 - write down the that name of that
06:25 - variable or name of that attribute name
06:27 - is name only and equal to I'm assigning
06:29 - name
06:33 - here jti katri account name is jti Kat
06:38 - and next is J account object name do
06:41 - balance suppose balance is equal to I
06:44 - have like maybe some balance I have or
06:47 - let's take like 5,000 rupees Z because
06:50 - we taking double value right now see
06:53 - here the error this St line member
06:55 - account name is inaccessible why so
06:58 - because these everything is private so
07:00 - to make it public here within this class
07:02 - you use a specifier public and call it
07:05 - we will discuss these ex specifier
07:07 - public private protected in later videos
07:09 - right in detail for now first make
07:12 - everything public and then use for this
07:15 - video okay now we can accept there is no
07:18 - error fine now if I debug this if I
07:21 - debug this and show you so see okay
07:25 - first stop the stagging now add the
07:27 - break point here I'm adding that break
07:28 - point like account gen account the
07:30 - object I'm creating here so let's debug
07:32 - this
07:33 - again and see in the variable here just
07:36 - see see in call stack we have main main
07:39 - function because obviously that
07:41 - activation record for main would be
07:42 - pushed in that stack so here I have main
07:46 - fine now in locals variables local
07:49 - variable I have J account there we have
07:50 - name and balance balance is some garbage
07:52 - value we don't know so now
07:55 - see
07:56 - here now control is here now now step
08:00 - next step over the next line control
08:02 - would be next line so now this jti katri
08:05 - this account this in name this jti katri
08:07 - would be assigned so in
08:10 - name here you will see data plus see
08:13 - there's nothing here just the
08:16 - address once you CL click step over now
08:19 - this line has been executed and see here
08:21 - can you see here Janti katri see this is
08:24 - jtia 3 right the name and the length is
08:27 - 14 character and this is the address
08:28 - balance still some garbage value because
08:31 - cursor is on this line now it's not been
08:34 - executed so once you click on this line
08:36 - now see balance is
08:38 - 5,000 so this is the beauty of like you
08:40 - know debugger step by step what is
08:41 - happening you can
08:43 - see okay fine if you again this click
08:47 - the step over that's it out
08:51 - see posed on here now in call stack
08:54 - there is nothing Main and something like
08:56 - this right okay now
09:00 - let's delete everything and now this we
09:04 - know this is how you can access these
09:06 - things right now let's call these
09:08 - functions with the help of this have to
09:09 - call these
09:10 - functions same name of the object dot
09:14 - name of the function I want to call
09:16 - deposit suppose deposit and double
09:18 - amount what amount you want to deposit
09:20 - suppose
09:21 - 1000.0 this but the thing here is there
09:23 - will be no error but the thing is here
09:26 - we are it's not getting any definition
09:28 - of this function so what will happen
09:30 - nothing it will compile that's it
09:32 - nothing will happen if I show you if I
09:34 - run this and I'll show you see nothing
09:37 - you will get
09:38 - here the
09:40 - output but there is one error like
09:42 - obviously there undefined reference to
09:44 - this deposit because there is no we can
09:47 - say like definition of this function so
09:48 - we can Define the methods so not
09:50 - function call it methods so we can
09:51 - Define these methods there are many ways
09:53 - but one way the simplest one for this
09:54 - video here only within that class only
09:57 - I'm defining it right so after this
10:00 - rather than the semicolon I'm just
10:02 - defining this and I'm just updating the
10:04 - balance because after deposit the
10:06 - balance would
10:07 - be plus would be added whatever the
10:10 - amount you deposit right that would be
10:12 - added and let's just here write see out
10:16 - and updated balance is balance that's it
10:20 - so I have defined this here only it will
10:23 - show me updated balance right and
10:26 - withdraw for this also let's define this
10:28 - here only
10:29 - if you want to withdraw then it would be
10:31 - minus
10:33 - from that balance right that's it so
10:36 - here I'm not writing any say out and all
10:38 - right if you want to write you can write
10:40 - also you can update now deposit is this
10:43 - so after depositing it will show some
10:45 - amount what amount it will show just
10:47 - calculate and just run this and I'll see
10:49 - I'll show you what output you will be
10:50 - getting
10:52 - 6,000 got it now if you debug this break
10:57 - point I have already added here just
10:59 - buug this again and let's see
11:06 - see right now control is here so in
11:08 - local in variable we have J account in
11:10 - name some we don't have anything in
11:12 - Balance we have some garbage Valu so
11:14 - step
11:15 - over and I'll show you in name in this
11:19 - data plus they see the length is zero
11:20 - and see this is empty there's nothing
11:23 - run this and seats updated jti kri
11:26 - length is 14 now balance would be
11:27 - updated
11:29 - see you got it 5,000 rupes and okay now
11:33 - obviously you have to you
11:35 - know 5,000 but now the cursor is here so
11:39 - after depositing 1,000 rupees let me
11:40 - just click this step over again see the
11:42 - balance is 6,000 right and that's
11:45 - exactly you get the
11:46 - output and now after returning from this
11:49 - the variables are out I mean deleted and
11:51 - there is no main in that step right the
11:53 - memories feed so let's just stop this
11:55 - and
11:56 - now call Jenny account do
12:00 - withdraw 500
12:03 - rupees or 500 Point like maybe
12:09 - 50 if you run this or you debug this
12:11 - let's debug this and I'll show you the
12:13 - output you run this and see what output
12:15 - you getting so here we are having some
12:17 - variable just check the
12:18 - balance run
12:20 - this let me show you the name also
12:24 - here run this and you see the what
12:26 - changes you are getting here see 5,000
12:29 - after deposit 6,000 6,000 now the cursor
12:31 - is here now again step over see 54
12:36 - 99.5 has been already updated right so
12:39 - like this this is how you can debug your
12:42 - code right now this is one way to create
12:45 - object and accessing these things now
12:46 - second way is pointer to object okay
12:49 - let's create that also rather than this
12:52 - let's just comment out everything and
12:55 - we'll be creating here
12:59 - account with the help of pointer pointer
13:02 - to object so here I'm
13:08 - writing jny account equal to new
13:12 - and
13:14 - account and this this is second way
13:17 - basically here we are calling the
13:18 - Constructor Constructor this is default
13:20 - Constructor this Constructor would be
13:22 - called here also but it is by default
13:24 - but here you need to write down that
13:25 - Constructor I'll discuss Constructor
13:27 - default Constructor parameterize
13:29 - structor everything in detail but for
13:30 - this video you just you know remember
13:33 - this is the second way to create object
13:34 - but this is not object here we are
13:36 - creating what pointer to object we are
13:38 - not creating object actually pointer to
13:41 - object this will return a pointer to
13:43 - object so we are having now pointer
13:45 - actually not an object here this is an
13:47 - object J account but here we have
13:49 - pointer to object so how to access using
13:51 - pointer to object one ways you have to
13:53 - De reference that pointer right if you
13:55 - remember with the help of s Str uh this
13:58 - op this is referencing operator estri
14:01 - and J account this because this is
14:04 - pointer so D reference it then Dot and
14:08 - then you can access these things like
14:10 - name equal
14:17 - to like this one way is this right this
14:21 - will also work right second way is if
14:24 - you want to check out okay you can check
14:26 - out this also just move this break point
14:28 - and just add a break point
14:31 - here okay let's here do one more
14:36 - thing access this balance as well and
14:39 - 5,000.
14:41 - right and same to access the deposite
14:45 - and withdraw we use this only
14:53 - like so this is how if you create a
14:55 - pointer to object this is how you can
14:56 - access these things right and we are I'm
14:58 - just using these you know brackets for
15:01 - this because this do operator is having
15:03 - higher precedence than this s string but
15:06 - you want to be reference this object
15:07 - first then do operator you want to apply
15:09 - so that is why I'm just putting these
15:11 - brackets here to increase this this
15:13 - precedence of this estri operator
15:16 - right
15:17 - now let me run this first and show you
15:20 - the you know output directly so balance
15:22 - is this
15:24 - 6.5 now what we see let's debug this
15:27 - break point is here when creating this
15:29 - pointer to object let's debug this and
15:31 - step by step we will see okay now in
15:35 - stack we have this Main and in locals we
15:38 - have J account see in J account now we
15:40 - have some you know it's not object it's
15:44 - pointer to
15:45 - object
15:47 - right so here we have see here you
15:52 - should out of bound this address is out
15:53 - of bound rather than your name it will
15:55 - store the address right but ra right now
15:59 - some garbage value is there length is
16:00 - some garbage value and balance is also
16:02 - some garbage value okay now let's run
16:06 - this control is here so step over the
16:09 - next line is see now J account do name
16:12 - after creating this pointer to object we
16:15 - have here some address because pointer
16:17 - in pointer we have obviously address of
16:19 - some other variable so it is having the
16:21 - address see the address right now let's
16:26 - run this again we are not having any
16:27 - particular name now let's run this again
16:30 - see this is J account is having address
16:32 - so it is not object it is pointed to
16:34 - object step over see here now we have
16:37 - jti kri 14 because this line has been
16:41 - executed now cursor is in next line see
16:43 - th now the
16:45 - balance 5,000 let's R this
16:48 - 60.5 after withdraw let's run this
16:54 - 55.5 right and if I again now the cursor
16:58 - is here
16:59 - means if I again run step over means out
17:02 - of this program
17:04 - means means variables and all gone out
17:08 - of the me I mean
17:12 - sorry variables and all destroyed in
17:15 - call stack also we don't have any Main
17:16 - and all right so this is the second
17:19 - way now okay rather than this we can use
17:23 - an arrow operator as well so rather than
17:25 - this let's just comment out everything
17:29 - and object is same pointer to object we
17:31 - are creating but how you can access
17:33 - simple J account and this arrow and see
17:37 - you can access any name is equal to
17:42 - G this also we can do right so rather
17:45 - than this if you're finding it difficult
17:47 - you can use Arrow this only means this
17:50 - means first D reference then apply do
17:52 - operator this Arrow this operator means
17:55 - right so if you are creating pointer to
17:57 - object use either this convention to
17:59 - access the methods and members for AR
18:02 - operator if you're creating object
18:04 - something like this simply use dot
18:06 - operator to access attributes and
18:07 - methods right so I hope you got this the
18:12 - class how to create objects how to
18:13 - access attributes and methods with the
18:15 - help of uh dot operator and AR operator
18:18 - right and I hope you got how to debug
18:19 - and all you got what is happening behind
18:21 - the scene right so I hope you got this
18:24 - concept in the next video we'll see one
18:26 - coding exercise based on this and after
18:27 - that we'll see next two concept right so
18:30 - now that's it for this video now I'll
18:31 - see you in the next video till then
18:32 - bye-bye take care