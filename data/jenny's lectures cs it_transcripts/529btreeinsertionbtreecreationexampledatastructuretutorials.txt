00:00 - if order is given off a tree then
00:02 - maximum children would be same as the
00:05 - order given em minimum children would be
00:07 - my tour ceiling maximum Keys would be M
00:10 - minus 1 and me home keys would be M by 2
00:13 - ceiling minus 1 right so here I am going
00:17 - to take this example order is 4 so here
00:19 - maximum children can be 4 right minimum
00:23 - children can be to maximum keys can be 3
00:26 - and minimum keys can be one except root
00:29 - mode see these rules are not applied on
00:31 - root node the root node can have maybe
00:34 - two children root node can have zero
00:36 - child root node can have one key like
00:39 - that
00:39 - now the me one main important property
00:41 - of B plus 3 is what in B plus 3 the data
00:45 - see this given data this data is stored
00:49 - only in leaf nodes right and in B tree
00:57 - data is stored in leaf node as well as
01:00 - in internal nodes but here the data is
01:03 - stored only in leaf node now what is
01:07 - stored in internal nodes in B plus tree
01:09 - only the pointer so you can see the
01:11 - indexes fine indexes to the data which
01:15 - is stored in the leaf node those indexes
01:17 - are stored in internal nodes and second
01:20 - important point is the data which is
01:22 - present in leaf node those data is
01:24 - present in a formal linked list right
01:26 - all the leaves are connected with a link
01:28 - with each other I will show you how we
01:31 - are when we are creating a B plus tree
01:32 - with this example right so these are the
01:34 - two main differences I am going to make
01:37 - a proper video on V + 3 properties and
01:39 - how we plus we are different from B tree
01:42 - in this video I am going to tell you how
01:44 - data is to be inserted in B plus tree
01:46 - right c + b + r ACB tree is what it was
01:51 - a generalization of BST binary search
01:53 - tree so data in parent node right so the
01:57 - data to the left of parent is always
01:59 - less than parent and data to the right
02:01 - of parent is always the greater than
02:03 - that parent so that property is always
02:05 - that
02:06 - properties also for loading meter here
02:08 - as well as in B plus free so now let us
02:10 - start see here order is four so
02:13 - initially no trains there are three is
02:16 - empty so we are going to construct our
02:17 - node you can say right and that mode can
02:22 - have maximum how many keys three keys so
02:25 - that node can have maximum one two three
02:28 - keys and maximum children can be one to
02:32 - see one two three and four so in between
02:35 - these four links only three keys are
02:37 - possible right so now see first first
02:41 - number is 1 insert 1 so we can insert 1
02:45 - right so next next is 4 now we're 4 is
02:48 - to be inserted food is here only 1 node
02:52 - is there right so 4 is greater than this
02:55 - one so 4 has to be inserted to the right
02:57 - of this one so here we will insert 4
02:59 - next is 7 7 is greater than 1 also
03:02 - greater than 4 also here we will insert
03:04 - 7 next is 10 now where we can insert 10
03:09 - after this 7 here but it is not possible
03:15 - you cannot insert 10 in this node why so
03:18 - because it is all flow condition maximum
03:20 - keys in a node can be only 3 here fine
03:24 - in this case so now what should be done
03:26 - now this node should be splitted now B 3
03:29 - and B plus 2 you also always grow
03:32 - towards root root upward direction not
03:35 - to the towards leaf direction right so
03:40 - we are going to find how how this node
03:42 - is to be splitted now find out the
03:44 - middle element now here we have 4 nodes
03:48 - right see don't do this mistake that 10
03:52 - you are supposed to insert we cannot
03:54 - insert 10 here so remaining elements are
03:56 - 1 2 & 3 find out the middle of this 1 4
03:59 - 4 would go up and one is to the left of
04:02 - 4 and 7 is to the right of 4 no you have
04:05 - pretend you have to pretend it that you
04:07 - have inserted this 10 and now we are
04:09 - going to split this node right but
04:12 - actually we haven't inserted because we
04:14 - cannot answer
04:15 - maximum limit is only three keys so now
04:18 - the middle element can be this one and
04:21 - this one because we are having even
04:23 - factor four right so if you if you
04:26 - consider this as a middle element and
04:29 - you will split from this node you will
04:31 - split from this data then the tree would
04:33 - be left biased and if you consider seven
04:36 - as a medial middle element and you split
04:38 - from this node then you the tree would
04:41 - be right biased so it's up to you you
04:45 - can take four also you can take seven
04:46 - also but in starting if you if you
04:49 - construct the left bias tree then during
04:51 - the completion of the complete tree you
04:53 - are supposed to follow that rule also
04:54 - the left bias tree and if here you
04:57 - selected that way as right biased then
04:59 - in the whole the complete tree you are
05:01 - going to follow that rule that right
05:02 - biased row right so here I'm taking
05:05 - semanas middle element I am going to
05:07 - construct right biased tree right you
05:10 - can construct left biased also and so
05:12 - your answer would be different from my
05:13 - answer but that is also correct right so
05:17 - now seven suppose seven is middle
05:19 - element so I am going to split from this
05:21 - later now house wedding would be done
05:23 - seven would go one level up or you can
05:25 - say to its parent now here we don't have
05:27 - any parent so seven would go up and that
05:29 - seven would become parent now the tree
05:32 - would be something like this
05:33 - C seven would go up so create another
05:39 - node the maximum capacity is three keys
05:41 - to the left of 7 to the left of 7 we
05:44 - have 1 & 4 1 & 4 right here also we can
05:51 - insert one more data and to the right of
05:53 - 7 to the right of 7 what we can insert
05:56 - maximum capacity is 3 to the right of 7
06:00 - we have 10 right plus in B plus 3 what
06:05 - you will insert you will insert this 7
06:07 - also in this node 7 and 10 why so
06:10 - because see I have told you in B plus 3
06:13 - the data over the data this data should
06:16 - be present in leaf node right so if you
06:19 - do not insert 7 here so this is the leaf
06:22 - node and 7 is not present in the leaf
06:24 - node so data should be present in leaf
06:26 - node now
06:28 - you are inserting seven to the right of
06:30 - this this seven why can't you insert
06:32 - seven here so another rule is that to
06:36 - the left of this one all the data should
06:39 - be strictly less than this node right
06:41 - and to the right of the snow to the
06:44 - right of this node from where you are
06:46 - going to split to the right of that node
06:48 - the data can be either greater than or
06:51 - equal to this node so 7 is equal to this
06:56 - 7 so we are going to insert 7 to the to
06:59 - this right side of this 7 to the right
07:01 - child of the 7 right now see the 7 is
07:06 - only for the index value you can see
07:09 - just pointer to this leaf node actual
07:11 - data is present here right another thing
07:15 - I have told you all the leaf node are
07:17 - connected with a link the data is stored
07:21 - in the form of a linked list so this
07:23 - this leaf node is also connected with
07:25 - this one using a link with this leaf
07:28 - node right now next next we are going to
07:31 - insert is this 17 now where 17 can be
07:36 - inserted always data is to be inserted
07:38 - in the leaf node that you have to take
07:41 - care now 17 is greater than 7 so go to
07:44 - move for this link 17 greater than 7
07:47 - greater than save this 10 so here you
07:49 - will insert 17 next is 21 we're 21 can
07:53 - insert 21 is greater than 7 greater than
07:56 - 17 and 21 so here you can insert 21 but
08:00 - actually we cannot insert or flow
08:02 - condition is there now you have to split
08:03 - this node now how splitting needs to be
08:05 - done the metal I'll take the middle
08:07 - element and that middle element would go
08:10 - one level up right so now I'm
08:13 - constructing the right by astrayed Oh
08:14 - Here I am going to take 17 as middle
08:17 - element so 17 would go to its parent
08:19 - node or you can say one level up so here
08:22 - you can insert 17 because 2 spaces are
08:24 - still free so now the tree would be 7
08:27 - and 17 and here still we have one space
08:31 - left same here we have 1 and 4 right and
08:37 - 17 would go up so to the left of 17 7
08:41 - then to the left of the 17 we have seven
08:45 - eight ten right notice maximum capacity
08:49 - of node is three so one space is free
08:51 - and to the right of seventeen to the
08:53 - right of seventeen the data would be 17
08:58 - and 21 right because the data should be
09:03 - present in leaf node fine so now next is
09:07 - 31 now where you can insert 31 greater
09:09 - than 7 greater than 17 so go to this
09:11 - link greater than 21 so we'll insert 31
09:14 - here only now next s 25 very open insert
09:18 - 25 25 has greater than 7 greater than 17
09:20 - so go to this link greater than 17
09:23 - greater than 21 and less than 31 so
09:26 - where you can insert 25 here after 21
09:31 - before 31 right because it is BST also
09:36 - you have to follow the property of BST
09:37 - fine now this cannot be done our flow
09:40 - condition is there now spitting would be
09:42 - done now spitting is what find the
09:45 - middle element sounds I'm going to
09:46 - construct the right bias tree so middle
09:48 - element out from the 17 21 25 and 31 is
09:51 - 25 so 25 would go one level up so 25
09:55 - would go here only fine now I'm going to
09:59 - update this this tree only so 25 would
10:02 - go here so still we have one space left
10:05 - so we can insert 25 here and if you are
10:08 - splitting from this nor then to the left
10:09 - of 25 way of 17 and 21 fine to the left
10:13 - of this we have 17 and 21 and to the
10:16 - right of 25 what would have 25 and 31 so
10:22 - to the right of 25 you will have 25 and
10:27 - 31 and one node is still free and here
10:30 - also one node is still free now next is
10:33 - 19 where you insert 1919 is greater than
10:36 - 17 but less than 25 so go to this link
10:39 - 19 greater than 17 but less than 21 less
10:43 - than 21 so here you will insert to 19
10:45 - and 21 would go here next is 20 where
10:49 - you can insert 20 greater than 17 less
10:53 - than 25 greater than 7
10:54 - greater than 20 in less than 21 so you
10:57 - can insert 20 at this place
11:00 - 17 here you'll write 17 19 20 and 21
11:06 - right there's no rule with something
11:08 - like this but you cannot answer 21 here
11:10 - you have to split this node from where
11:12 - you are going to split middle element is
11:14 - 20 so 20 would go up fine and here also
11:21 - now you cannot answer 20 because this
11:24 - node is also full now you'll repeat the
11:27 - same step of splitting you will split
11:28 - this node also fine and that that node
11:32 - that from where you are going to split
11:33 - that element would go one level up fine
11:36 - so I'm going to first of all do one
11:38 - splitting from this node only fine so if
11:41 - this node is splitted then 20 would go
11:43 - one level up so now now this tree would
11:47 - be something like this seven seventeen
11:50 - so now if 20 would go one level up so in
11:54 - this node where 20 can go after this 17
11:58 - here you would write 20 and hill will
12:00 - write 25 right and to the left of 7 we
12:05 - have 1 + 4 to the left of 17 we have 7
12:10 - and 10 to the right of 17 now from here
12:14 - splitting is done 20 would go up so to
12:17 - the left of 20 we have 17 and 19 to the
12:20 - left of 20 we have 17 and 19 and to the
12:23 - right of 20 we will have 20 and 21 so
12:26 - here you will have 20 and 21 and to the
12:29 - right of 25 you will have 25 and 31 but
12:35 - this is the intermediate space we are
12:37 - not done that is why I am doing there's
12:39 - something like this now again this is
12:41 - not all this is not possible you have to
12:43 - split this node also now from here
12:45 - middle element is 20 20 would go one
12:47 - level up so after that after that after
12:50 - this waiting tree would be something
12:52 - like this see 20 would go one level up
12:58 - when another node would be created
13:00 - having maximum space of 3 keys to the
13:03 - left of 20 we have 7 and 17 7 and 17 at
13:08 - this level right to the right of 20
13:13 - according to the rule what should be the
13:15 - piece 20 and 25 so to the right of 20 we
13:19 - should have 20 and 25 right and as it is
13:26 - these elements would be 1 and 4 to the
13:32 - right of this we have 7 and 10 to the
13:37 - right of 17 we have 17 19 right now
13:47 - these are leaf nodes right and this is
13:50 - internal node and this is also internal
13:52 - node so now the rule is these keys this
13:57 - cannot be repeated in internal nodes so
14:01 - here you have written just 20 so here
14:03 - you cannot write this 2 and D are going
14:06 - to cross 20 from here because what
14:08 - actual data is in leaf node and in
14:11 - internal nodes we just have indexes so
14:16 - what is the point to repeat the same
14:18 - index again and again we just need one
14:21 - index and using that index are using
14:23 - that pointer only we can reach to the
14:25 - actual data on ax right so that is why
14:28 - in this internal nodes we are not going
14:30 - to repeat the same data so here we have
14:32 - written 20 so we are not going to write
14:34 - 2 nd here fine
14:37 - so here you will just write 25 so now
14:41 - here 20 is not there to the left off to
14:44 - the left of this 25 if the data is to
14:49 - the left of 25 the data is what 20 and
14:53 - 21 °c due to the left of 25 we have 20
14:57 - and 21 20 and 21 fine and to the right
15:02 - of 25 we have 25 and 31 so this is from
15:11 - this stage that tree would be something
15:14 - like this so I am going to rub this
15:16 - intermediate stage fine now here 20 is
15:21 - not present so here we don't have any
15:24 - element 20 is not there when you just
15:28 - have 25 now next next is 28 now where 28
15:33 - can go 28 is greater than 20 yes
15:36 - greater than 25 go to the right side of
15:38 - 25 you go to this link greater than 25
15:41 - but less than 31 so here you will insert
15:44 - 28 here you will write 31 next is 42 42
15:48 - can go to right of 31 so here you can
15:51 - insert 42 but actually you cannot insert
15:53 - this is our flow condition again
15:55 - sweating would be done and middle
15:57 - element is 31 31 would go one level up
15:59 - here only here we have a two space left
16:02 - so that is fine 31 can go here so after
16:05 - this the tree will be something like
16:06 - this we have 20 here we have 7 and 17 to
16:13 - the right of 20 we have 25 and I am 31
16:18 - 31 will go one level up so here here we
16:22 - have 31 right these elements would be
16:27 - same 1 and 4 here you write 7 and 10
16:30 - here you will write 17 and 19 fine to
16:34 - the left of 25 would be 20 and 21 right
16:37 - and now to the right of 25 would be c 31
16:42 - would go up so to the left of 31 the
16:45 - data is 25 and 28 to the left of 31 the
16:47 - data is 25 and 28 n to the right of 31
16:51 - 31 and 42 fine and yeah I forgot one
16:57 - more thing see this link this link will
17:00 - all the present in all the between all
17:03 - the leaf nodes from this leaf node to
17:04 - this one from this to this from this to
17:06 - this from this to this from this to this
17:10 - so this link would be present in all the
17:12 - leaf nodes like this you have to insert
17:15 - this link also and from here to here
17:18 - something like
17:19 - right this is the final B+ tree here
17:23 - also you are having the space of the
17:25 - node is having space of three keys so
17:27 - here I have shortage of space that is
17:29 - why I have just made a little bit mashed
17:31 - up fine so I hope you are getting this
17:34 - is that way fine these nodes are having
17:36 - space of three keys right maximum you
17:38 - can insert three keys now see as you can
17:40 - see this this data of this data is
17:42 - present in the leaf node all the data
17:45 - you can check fine and in these internal
17:48 - nodes we are having just the indexes
17:50 - fine or you can say pointers as well as
17:54 - these these leaf nodes are also linked
17:56 - with each other so when you are going to
17:59 - accessor data that is why see that is
18:01 - why in B plus tree searching is very
18:04 - easy because the data is present in the
18:06 - leaf node you have to just fetch the
18:09 - root to block this block and only one
18:11 - leaf one leaf node because one this this
18:13 - leaf node is having the pointer to this
18:15 - leaf node then this then this then this
18:17 - and something like this fine so
18:20 - searching is very easy when data is
18:21 - stored in the form of B plus tree I am
18:24 - going to discuss with you all the
18:26 - properties of B plus tree in next video
18:29 - and in next video we are also going to
18:31 - discuss how to delete a data from B plus
18:33 - tree fine so till then bye bye take care