00:00 - hi guys in this video I'm going to
00:02 - discuss with you graph traversal
00:03 - techniques two types of graph traversal
00:06 - techniques are there BFS and
00:09 - BFS BFS means breadth-first search or
00:14 - sometimes it is also known as level
00:16 - order traversal and the DFS s
00:20 - depth-first search fine so we'll take
00:24 - this example and with the help of this
00:26 - example I am going to discuss with you
00:28 - the BFS traversal fine in BFS traversal
00:33 - when you will start then you can take
00:34 - any node as a root node you can start
00:38 - traversing this graph from any node
00:40 - suppose we can take a zero you can take
00:43 - one you can take six as a root node and
00:45 - you can start your driver self fine but
00:48 - sometimes intuition if it is given that
00:51 - BFS Traverse will find out can I have
00:53 - this graph and considering two as a root
00:56 - node then what you have to do is you're
00:58 - supposed to start from this two to
01:02 - approve not consider curve and you will
01:03 - start traversing this graph from this
01:05 - node only generally suppose in this
01:08 - example nothing is given then we will
01:10 - consider zero as a root node I am just
01:13 - considering zero as a root node you can
01:15 - consider one Phi for any node okay so
01:19 - for BFS traversal what a data structure
01:21 - is used that is q queue data structure
01:24 - would be used fine and here you'll write
01:31 - will print the result and this is our
01:34 - data structure that is Q I hope
01:37 - everybody knows you work in what fashion
01:40 - that is FIFO first-in first-out okay so
01:45 - in this traversal suppose we have taken
01:47 - 0 as a root node okay
01:51 - all the adjacent vertices of this 0 will
01:56 - be traversed first multiply to traverse
01:59 - all the vertices as close as possible to
02:03 - the root vertex C is K close the eye
02:07 - scared this into put no vertices give me
02:08 - here 1 and 3 to 0 is it or how about 1
02:12 - or 3 or either 3 or
02:14 - one in any fashion a visit only after
02:16 - that you would move forward
02:17 - SN you're working zero key about one
02:19 - visit can you yeah then you would visit
02:21 - five okay first of all it may be what
02:25 - ourselves only as close as possible to
02:27 - this zero those who are what it says
02:30 - would be visited fine okay now see
02:34 - suppose we have taken zero as a root
02:36 - node so 0 would be inserted in this
02:39 - queue fine okay now in the result we
02:47 - have suppose we have deleted in this 0
02:49 - and we have printed this zero in the
02:51 - result fine now as soon as the zero is
02:55 - printed means zero has been visited
02:59 - right now next thing what you have to do
03:02 - is zero purchasing has a delete over
03:04 - okay it may be adjacent what this assume
03:07 - is you're okay that would be inserted in
03:09 - this queue now adjacent what this is
03:11 - over the zero is 1 and 3 fine and one
03:15 - entry would be inserted in this cube 1
03:17 - or 3 it's not like if one would be
03:20 - inserted and after that 3 you can insert
03:22 - three or one in any order you can insert
03:25 - fine ok now one and three ok now next is
03:31 - next element in queue is one now one
03:34 - would be deleted and what one would be
03:37 - printed means one go how many delete
03:39 - kill the edit one has all has already
03:42 - been visited the say print format loved
03:46 - one has already been visited now next
03:48 - thing what you have to do is one get it
03:51 - maybe at the same to what this is all
03:54 - the dis in tortoises of one adjacent
03:57 - vertices plus unvisited vertices fine
04:03 - adjacent unvisited vertices of one
04:06 - wouldn't be inserted in this queue see
04:10 - how many i descend vertices of one are
04:12 - there 0 3 2 5 and 6 the medic death you
04:18 - 0 3 2 5 and 6 but up go insert is makan
04:26 - say can hear only the
04:27 - visited what this's zero has already
04:30 - been visited fine zero has already been
04:35 - in visitor to zero copies mini insert
04:37 - karoge and three three has already been
04:39 - inserted fine
04:42 - the yeah be a boys main certain he
04:43 - Colonel Khan say is main certain gate to
04:47 - five and six to five and six you can
04:53 - insert two five six in any order that is
04:56 - you can insert five two and six you can
04:58 - insert two six five you can insert six
05:00 - five and two it is not compulsory that
05:03 - you'll insert two five and six only okay
05:07 - now next is three fine three you go
05:13 - hominid I said delete here and three
05:16 - would be printed and what are the
05:18 - adjacent vertices of this three find out
05:21 - those see this go home find out Korea
05:24 - all the adjacent vertices of any node
05:28 - score both exploration of that node you
05:30 - are going to explore that node fine
05:33 - now find out that at this into vertices
05:36 - of this three adjacent to vertices of
05:38 - this three rc3 company print Korea means
05:42 - that has already been printed or you can
05:43 - say that it already been raised it ready
05:46 - a fine home we have now three three
05:48 - cages into what s is gone constant
05:50 - upkeep as c0 hey you have one you have
05:54 - four you have two for adjacent vertices
05:57 - are there but inside a pecan say carne
06:00 - here to visit and I knew a sc0 has
06:03 - already been visited one has already
06:04 - been visited and two is already there in
06:08 - this queue though you would not insert
06:09 - to again repeat Nanaia for the only
06:12 - element left is that is for now for will
06:15 - be inserted in this queue fine now check
06:21 - next element that is to to be deleted
06:23 - and two would be printed means 2 has
06:26 - already been visited now find out at the
06:28 - st. element of this two adjacent element
06:30 - of this to r1 this 3 this 4 and this 5
06:36 - for element we have one is already
06:39 - visited three is already visited
06:41 - four is already there in this queue only
06:43 - left is five no sorry five is already
06:46 - there in this queue so there is nothing
06:48 - to insert in this queue okay now move to
06:52 - the next part next element that is five
06:55 - five first is deleted from this queue
06:57 - and five would be printed means five
07:01 - husband visited now find out adjacent
07:04 - vertices of five one we have what we
07:07 - have - but these are already visited
07:09 - don't know what this is there to be
07:11 - inserted in this queue okay now check
07:14 - the next six six would be deleted and
07:17 - printed fine 6 min already visited at
07:21 - the same vertices of six are one we are
07:24 - not supposed to insert this one because
07:26 - this is already visited and one is four
07:28 - but four is also there through here we
07:30 - have this means hurt and he care of it
07:31 - next up coca political my four and four
07:35 - would be printed fine so this is the BFS
07:40 - traversal of this graph see I'm this is
07:42 - not the only BFS traversal of this graph
07:45 - there are numerous valid BFS traversals
07:47 - on this graph how see suppose you have
07:52 - inserted in this two five six in this
07:55 - fashion
07:55 - five six and two two zero one three ki
07:59 - baat karta happy - octopus take care so
08:04 - it depends how you are going to insert
08:06 - these numbers into this queue so I'm not
08:12 - saying so this is the only welded DFS
08:14 - traversal you can find out numerous
08:16 - value DFS traversal of this graph using
08:19 - this method fine now we will discuss the
08:25 - DFS traversal of this graph now we would
08:29 - find out the DFS traversal of this graph
08:32 - DFS means depth first search traversal
08:36 - of this graph okay in BFS queue data
08:39 - structure is used and as in DFS what
08:42 - data structure will be used that is
08:44 - stuck and it works only for minute last
08:47 - in first out okay so we'll have one
08:51 - stack
08:52 - fine and here we'll write down the
08:57 - result of this trevor self-same in that
09:02 - BFS we have taken any node as root node
09:04 - so in DFS also you can take any node as
09:06 - root node and you can start traversing
09:08 - from that node okay
09:10 - in case if it is given that consider one
09:14 - as a root node in that case of 100 root
09:16 - node Elaina he pareja but then he give
09:18 - and HECO you can take any notice root
09:20 - node suppose we are taking zero as root
09:22 - node okay now see zero would be inserted
09:27 - in this stack fine and zero would be
09:32 - printed okay now check how many addition
09:37 - what this is of zero are there 1 and 3
09:40 - so BFS may have any idea how all the
09:43 - adjacent vertices of that node Dominic
09:45 - you say delete here just go print yeah
09:47 - okay sorry adjacent what this is
09:50 - commonly katha we have inserted into Q
09:53 - but DFS make a alga only one any one of
09:58 - that node would be inserted into stack
10:04 - depth-first search belly hump depth
10:07 - measure Angus suppose zero common a key
10:09 - after that we have chosen this three
10:12 - fine then we would go three two next is
10:17 - scared the sentiment it may be only for
10:18 - hoga suppose six who or something like
10:20 - that at some points we read suppose we
10:23 - have reached at six fine and SK our gate
10:27 - suppose I'm panicking a couch near this
10:29 - this 1 to 6 is not there let us consider
10:33 - those 6 k bar the panini's are set they
10:35 - after that you'll backtrack you will go
10:37 - to 4 busca path for K at this end image
10:40 - of the in case our pockets new
10:41 - multitudinous then you will backtrack
10:43 - fine but depth-first search MATLAB
10:47 - you'll go deeper and deeper until a dead
10:52 - end dead end min soos car a descent
10:55 - unvisited adjacent which many over and
10:57 - you have to backtrack fine so any one of
11:01 - this vertex 0 has 0 is printed to anyone
11:06 - of this zero would be taken anyone
11:11 - adjacent vertices of the zero will be
11:12 - taken and pushed into this stack suppose
11:15 - we have one we have one and three two
11:18 - adjacent vertices of zero we have so you
11:20 - can take either one or you can take
11:21 - three suppose we are taking one one
11:27 - would be printed and one would be pushed
11:29 - into the stack 0k by thumb camp again
11:34 - here this one after that you would
11:39 - explore this one explore any explore
11:41 - means you explore now they kept sorry
11:44 - what this is co-op Explorer ovo Explorer
11:46 - from Calcutta BFS maker thing now one
11:49 - car you would take any vertex unvisited
11:53 - vertex get my adjacent vertex 1 K
11:55 - addition vertex given vertex con-con
11:57 - same they pass 3 to 6 and 5 fine so you
12:03 - can take any one of these four BFS viiia
12:07 - Charaka insert name karna you take any
12:09 - one of these four three to five or six
12:14 - suppose we have taken this three fine
12:19 - three we have taken or three pop knee
12:23 - cap insert cardia high in the pushkar
12:25 - their head stack may up let's go push
12:27 - Korea fine so you are now it at this
12:30 - three now find out adjacent vertices of
12:32 - this three this for this to this one and
12:37 - zero but obviously zero and one are
12:40 - already visited fine
12:42 - zero and one see hero's ultimate equal
12:44 - zero and one already visited so
12:46 - unrelated vertex up go find out Carnahan
12:49 - and visited vertex Kahn same they pass
12:51 - to and this for so you would take any
12:57 - one of this were the these are descent
13:00 - with the unbusy two vertices and you
13:03 - would push that vertex into this stack
13:05 - up to village therefore be less active
13:08 - suppose you have taken two to go up in a
13:11 - print here to go up in a push kardia
13:13 - into this stack three Chabad aapke hey
13:17 - ho
13:19 - do fine now you are at this - now find
13:24 - out at the st. vitus's of this - fine
13:27 - you scared this invert this is gone same
13:29 - one but you cannot push one at this one
13:32 - because one is already visited you
13:34 - cannot push three three is already
13:35 - visited now but you have give us a
13:38 - decent what this is five five cop is no
13:40 - push cars are still fine and one is this
13:43 - for adjacent vertex fine this five and
13:48 - four so you can take either five for
13:51 - either for anyone take a pulsar in a
13:54 - hill a name a bar wise we focus car do
13:56 - any one up quark tools come and that is
13:57 - unvisited vertex or scared this end bit
14:00 - notchy so you can take either four or
14:02 - five suppose we have taken four for
14:06 - common a push cardia and for co-op nikka
14:08 - hop a spec print bigger than take a talk
14:11 - about topic I am for now find out
14:14 - adjacent vertices of this for fine three
14:19 - here but three is already visited two
14:21 - two is already visited and one is six
14:23 - yeah you can push 6 because 6 is 2 and
14:27 - visited the for Capcom bad kappa going
14:30 - up six three six print table and six
14:33 - would be pushed in this stay now find
14:38 - out after six is there any unvisited
14:41 - adjacent to vertices of six he scared
14:45 - this and what this is for but for is
14:46 - already visited adjacent verses of 6 1
14:49 - is 1 1 is already visited and we have
14:53 - only 1 and 4 so no unvisited adjacent
14:57 - vertices is there fine
14:59 - yeah happy cuyahoga now you cannot move
15:03 - you know further from the six deep me up
15:07 - 6k 1 these are certificates you do not
15:09 - have any unvisited at the central doses
15:11 - of six charges of to do you have a yoga
15:15 - backtracking a backtracking case yoga
15:18 - backtracking me Jonica except attach
15:20 - alegre from this step again I see
15:23 - situation at the Ava hop a key out here
15:25 - one can one that stop is there the
15:29 - topmost element is deleted popped out or
15:31 - you can say popped out then
15:33 - six would be pumped out six poo powder
15:36 - Shugar fine now say the next top element
15:39 - is for a visa package elegantly from six
15:43 - you would go to which element this four
15:47 - element then backtrack to four fine I am
15:52 - now check this for has any unvisited at
15:58 - the center what takes still HECO is
16:01 - força three to six all are visited nor
16:06 - Texas there then four would be popped
16:09 - out from the Staten F next element is
16:13 - two now we would go to to backtrack to
16:17 - to now find out is there any adjacent
16:21 - vertices of two that is still unvisited
16:24 - yes we have what is that
16:27 - this fine this 5 is still invested and
16:30 - it is adjacent of this too though you
16:33 - would go to this five five would be
16:36 - printed and five would be pushed into
16:39 - the step fine
16:42 - now check five is there any adjacent
16:46 - vertices of five which is still
16:48 - undecided
16:49 - no one already visited two already
16:52 - visited what the next step is we cannot
16:56 - go further from five top of backtrack on
16:58 - a backtrack aha corner first step is
17:01 - five would be popped out from the stack
17:04 - ticket the top element would be popped
17:06 - out now check the next top element that
17:08 - is two then five say backtrack can't be
17:11 - hanging to the two now a is there any
17:16 - animated vortex of two that is adjacent
17:19 - of two and still unvisited
17:20 - no one is there okay then pop out this
17:24 - two now next s 3 so to say backtrack AHA
17:28 - pay only three now check out is there
17:32 - any animated vertex adjacent vertex of
17:36 - three zero two four one all are visited
17:39 - then pop out this three from the stack
17:43 - and next is next top of the steak is
17:46 - one so from three we would go to one
17:49 - Joby's kostik Kotoko gram happy I'm
17:52 - dying it see is there any animals it
17:54 - adjacent what this is a one that is you
17:57 - can push into the stack no all vertices
17:59 - are visited you scared the center though
18:02 - pop out this one from the stack and find
18:04 - out the top that is zero now from one
18:07 - way would go to zero find out zero Kaku
18:13 - here descent water says that is still
18:15 - done visited no then pop out the zero
18:17 - from the step now see stack is empty so
18:21 - this is the indication where you have to
18:23 - stop this
18:24 - BFS algorithm fine and this is the DFS
18:29 - traversal of our graph now in this case
18:34 - also this is the only you know this is
18:36 - not the only DFS traversal
18:38 - there are numerous value to DFS
18:41 - traversal of this graph how you can find
18:43 - out C suppose you are starting from zero
18:46 - Hermia has a zero say start Karangahape
18:48 - le to one but from zero you can go to
18:53 - this vertex 3 also take a whiskey by the
18:57 - visit karoge so this would be another
19:00 - DFS traversal fine so I say brought
19:04 - sorry is my DFS traversal okay Oh such a
19:07 - the BFS many up go but are they a BFS
19:09 - make alga all try to explore all the
19:13 - nodes as close as possible to the root
19:18 - node means level order is scared yes and
19:21 - it may be homie paleo sorry explored me
19:24 - after that you will go further fine
19:28 - but DFS make alga any one node would be
19:33 - visited from that root node loose Chabad
19:36 - whose notes a further up visit kirovsk
19:39 - about further further and further you
19:40 - will go deeper and when you will reach
19:43 - that dead end
19:44 - Jos a aapko you know you don't have any
19:47 - unbudgeted adjacent vertices then you
19:49 - would backtrack or backtrack a poke a
19:51 - sabotage it occur from this stuck
19:54 - they say I'm dead end pay poncho V that
19:56 - top of the stack would be popped out
19:59 - fine
20:00 - next dope I got perhaps emo happen
20:02 - school backtrack appear google fine
20:07 - so this is the DFS traversal DFS one
20:10 - another difference is the DFS may up
20:12 - coke out the stack data structure user
20:14 - go DFS sorry BFS macaca kyu-ho call TFS
20:18 - Makabe Stanley the structure won't be
20:20 - used ok then bye see you in the next
20:24 - video