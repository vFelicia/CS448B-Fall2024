00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - C++ programming language we are
00:05 - discussing functions in C++ in previous
00:07 - video we have seen what are inline
00:08 - functions right now in this video we'll
00:10 - talk about what is recursion and what
00:12 - are recursive
00:14 - functions right we'll be discussing
00:16 - everything about this recursive
00:18 - functions in this video right and with
00:19 - example with program and with real life
00:21 - example as well right and then we'll see
00:24 - coding exercises based on recursion
00:26 - right and then I'll give you an
00:27 - assignment also fine now
00:30 - okay let's discuss this recursion with
00:32 - the real life scenario suppose in my
00:34 - class I have like 60 students and when I
00:36 - call one student like I call Angeli and
00:39 - Angeli will say like yes ma'am or Ang
00:41 - will come to me right then I call like w
00:45 - same will say like yes ma'am and
00:47 - something like this then I say Jenny
00:49 - then what you guys will say like ma'am
00:51 - you are calling yourself and that's true
00:54 - because I'm Jenny and I'm calling myself
00:56 - Jenny right so this technique or this
00:59 - process is known as
01:01 - recursion yes in program we have some
01:03 - functions and if a function call calls
01:06 - itself then this technique is known as
01:09 - recursion right suppose I have this like
01:12 - a function
01:15 - uh fun in my program like something like
01:20 - this here I'm writing something and
01:22 - within this I'm again calling fun here I
01:25 - write something so this function is
01:28 - calling itself this is function calling
01:30 - so it will go to here then again execute
01:32 - this again function calling it will go
01:33 - to here so this function is calling
01:35 - itself so this technique is known as
01:37 - recursion and this function fun is known
01:40 - as recursive function so function
01:43 - calling itself then that that function
01:45 - is known as recursive function and the
01:47 - process or the technique of calling I
01:49 - mean the function calling itself that
01:51 - technique is known as recursive but this
01:53 - is not complete definition I'll tell you
01:54 - the complete definition of recursion and
01:56 - recursive function but first let's
01:57 - understand this thing right now the
01:59 - problem here is if I call some student
02:03 - and he or she will come to me right and
02:05 - then obviously I'll not call him or her
02:07 - but if I call myself Jenny then how will
02:09 - I come to
02:11 - myself right it's like Jenny Jenny so
02:14 - how will I come to myself or I will say
02:16 - like yes ma'am or something like this
02:18 - because here the termination condition
02:20 - is or when I will stop calling that
02:22 - student once that student come to me or
02:25 - respond me then I'll stop calling that
02:27 - student right but here I'm calling
02:29 - myself then how
02:30 - I'm going to stop calling
02:32 - myself right how will I come to me right
02:35 - so here one problem with recursion is
02:37 - what how to stop this recursion because
02:41 - these line will be executed again here
02:43 - again it will call itself again it will
02:44 - call itself again it will call itself so
02:46 - when to stop
02:48 - this how to stop this this thing is very
02:51 - important and that is known as base case
02:54 - or base condition right so here we can
02:57 - set a base condition something like this
02:59 - after calling Jenny five times I'm
03:01 - supposed to stop like Jenny Jenny Jenny
03:04 - Jenny Jenny and then stop calling Jenny
03:06 - right so this is base condition in my
03:07 - case right so same to stop this
03:10 - recursion you have to put some base case
03:13 - or base condition right this thing is
03:15 - very important here base condition or
03:18 - base case right if you will not put a
03:22 - proper base condition or base case then
03:25 - your program your recursion will never
03:27 - stop and ultimately you will get
03:29 - obiously that stack Overflow error or
03:32 - something like this
03:35 - right so now if I call what recursion is
03:38 - so recursion is a technique in which
03:41 - function calls itself repeatedly until a
03:44 - given condition is met this is kind of
03:47 - complete definition of recursion right
03:50 - and a recursive function is what a
03:52 - function which calls itself repeatedly
03:55 - that function is known as recursive
03:57 - function right now why recursion
04:00 - this thing is very important why this
04:02 - concept so sometimes there are some
04:05 - problems like factorial of number series
04:09 - and the Tower of ano problem and then
04:11 - binary search and sorting algorithm
04:13 - quick sort M sort and those you know
04:16 - divide and concrete problems we have
04:17 - like n Queen's problem and backtracking
04:19 - problems and these things these problems
04:22 - are you know we can solve easily with
04:24 - recursion we can model the structure of
04:26 - these problem in a program easily with
04:27 - recursion right rather than than that
04:30 - iterative
04:31 - approach so that is why to solve some
04:34 - problems now we use recursion we will
04:37 - see this thing how right so a recursive
04:40 - function will call itself directly or
04:43 - indirectly through another function here
04:45 - the function is calling itself directly
04:48 - or maybe this function can call itself
04:50 - indirectly with the help of some other
04:53 - function right that is also fine so
04:56 - let's take this example factorial of a
04:58 - number I want to find out fact of five
05:01 - so how you will write this is a
05:02 - mathematical problem like obviously
05:04 - we'll write
05:06 - here 5 into 4 into 3 into 2 into 1 right
05:12 - if I write 4 factorial what you will
05:14 - write 4 into 3 into 2 into 1 3 factorial
05:18 - 3 into 2 into 1 like this multiply the
05:20 - number till you get 1 this is how we are
05:22 - going to get factorial of a number right
05:25 - so in general what what can I write n
05:27 - factorial is equal to n into n - 1 into
05:31 - n - 2 and so on till into 1
05:37 - right or can I write this 5 factorial
05:41 - something like this 5 factorial is equal
05:43 - to 5 into 4
05:46 - factorial can I write this because see
05:50 - this is ultimately 4 factorial 4
05:52 - factorial is equal to this so rather
05:54 - than this we can I write here four
05:55 - factorial this is true yes so same we
05:58 - can write here n factorial is equal n
06:01 - into n -1
06:04 - factorial yes or
06:06 - no fine and then again nus1 factorial I
06:11 - can write something like this n
06:13 - -1 into N - 2
06:18 - factorial right so like if I have n
06:23 - minus 1 factorial with me so I just
06:25 - multiply that with n and I'll get n
06:27 - factorial right and to find out n- 1
06:30 - factorial if I have nus 2 factorial then
06:33 - I will simply multiply this with nus1
06:34 - and I will get nus1 factorial right so
06:37 - here what we are going to do what we are
06:39 - doing here we are dividing that larger
06:43 - problem or complex problem into simpler
06:46 - or you can say sub
06:48 - problems right so we can also say
06:51 - recursion is a process of you know
06:53 - solving complex Problems by breaking it
06:56 - down into small sub problem
07:00 - right so rather than find finding out n
07:02 - factorial now you have to find out only
07:04 - nus 1 factorial and for nus1 factorial
07:07 - you just have to find out nus 2
07:09 - factorial right and just multiply with
07:10 - this n minus one so we are just simply
07:12 - breaking down this problem into sub
07:14 - problems right so this is what
07:16 - for right so obviously if you write a
07:20 - program then simply we cannot write you
07:22 - know write down in a program the symbol
07:24 - factorial symbol right so rather than
07:26 - this we will use some function so can I
07:28 - write something like this for for this
07:29 - line can I write something like this
07:33 - like factorial of n is equal n
07:38 - into factorial of n minus
07:41 - 1 right this is how we can like model
07:45 - this problem of finding factorial of a
07:48 - number fine so see factorial we can
07:51 - Define factorial as a function and this
07:53 - function is calling itself by doing like
07:55 - n minus one so this is what recurs in
07:58 - can you write this program but here one
08:01 - thing I have told you one thing which is
08:03 - very important to stop the reion is base
08:05 - condition so first to write a program
08:07 - you have to find out what is the base
08:10 - case because this is recursive case here
08:13 - we are calling the function again and
08:15 - again so this is recursive case so what
08:17 - is base case there are two things when
08:19 - you are solving a problem using
08:20 - recursion base case and recursive case
08:22 - base case when to stop that recursive
08:24 - that condition recursive case divide
08:27 - that the problem the rest of the problem
08:29 - accept that base case divide the rest of
08:32 - the problem into sub problem and just
08:34 - call recurs right now what is the base
08:37 - case here when we are going to stop once
08:39 - we reach to one right and by definition
08:43 - we know factorial 0 factorial is one and
08:47 - one one factorial is also
08:49 - one right so once the number reach to
08:52 - like one one just stop this is the base
08:56 - case so this case you have to write down
08:58 - to stop the Trigg in program so now
09:00 - pause the video and write down this
09:01 - program and if you want to write down
09:03 - the basic or the syntax or the structure
09:05 - of this recursive program then how we
09:08 - are going to write that thing see we
09:11 - just write
09:14 - here first obviously return type then
09:18 - that recursive function right here in
09:23 - recursive function we have two things
09:25 - one is base case just to stop that thing
09:28 - and another is
09:31 - recursive
09:32 - case right that's it this is the basic
09:35 - of the you know syntax of structure of
09:37 - writing recursive function so now pause
09:39 - the video and try this program so I hope
09:41 - you have done this so now let's find out
09:44 - suppose I'm just creating a function
09:48 - factorial and here I'm passing
09:51 - five right let's call this in C out
09:55 - factorial of five but obviously you have
09:57 - to define this before calling so let's
09:59 - Define this function and we just what
10:02 - this function is going to return
10:05 - simply that number num
10:11 - into factorial of num minus
10:15 - one that's it and that we have already
10:17 - seen this line factorial of n is n into
10:21 - factorial of n minus1 that's it so num
10:24 - into factorial of numus one but when to
10:26 - stop this you have to put definitely the
10:28 - base condition to stop the secur so if
10:32 - number equal to equal to 1 in that case
10:36 - return one because factorial of one is
10:39 - yeah one so return one this is the base
10:42 - condition and otherwise return this num
10:44 - into factorial of n minus one right and
10:47 - factorial of
10:49 - uh five so let's run this and see what
10:52 - output we getting here factorial of 5 is
10:54 - 120 and we know that's true right but
10:59 - here that one thing is what like if I
11:01 - write factorial of
11:04 - 50 let's run this and see it will give
11:07 - you zero because that would be a very
11:09 - long number so here what we can do is
11:12 - rather than in better to write here
11:15 - inside long long because the range of
11:19 - inside long long is it's very long right
11:23 - so that would be fine if you want to
11:25 - find out factorial of a long number
11:27 - right so better to use this thing here
11:28 - also other than in uh the num return
11:31 - type or the type of num you can take and
11:33 - signed long long right I hope you got
11:36 - this this is very simple right see how
11:38 - simply the code is readable now and it's
11:42 - very simple to write that you know
11:45 - program the logic of finding a factorial
11:46 - of a number we can easily model that in
11:49 - English we have written that thing and
11:50 - we can easily model that thing here
11:52 - using recursion right so this is beauty
11:54 - of reion sometimes for some programs it
11:57 - would be the know the code would be very
11:59 - clear clean and simple to write and easy
12:00 - to understand and easy to model that
12:03 - structure of that program into structure
12:05 - of that question or that problem into
12:07 - program using recursion like here right
12:10 - so sometimes it's very easy to use
12:11 - recursion but sometimes better to use
12:13 - iterative approach rather than recursion
12:16 - because of now if you don't put you know
12:19 - here the base condition correct then it
12:21 - would be the recursion would never stop
12:24 - and it would be like give you stack
12:26 - Overflow now let me just uh show you
12:28 - what is happening behind the scen have
12:29 - to find out factorial of a number
12:32 - see so this is a program right first you
12:36 - know how the function call works that
12:37 - function called stack so we have this
12:40 - stack and first here we have like that
12:42 - one activation record for main function
12:45 - because from here obviously the
12:46 - execution would be started Main and here
12:48 - we're calling factorial 50 right so in
12:52 - main after that one activation record
12:54 - for this function
12:57 - factorial fine would be pushed in this
13:00 - step 50 would be passed here so in this
13:03 - the local variable for this function is
13:04 - num and num is 50 now this condition
13:08 - true no so here return num into
13:10 - factorial n minus one so num is 50
13:13 - into I'm just writing in short term fact
13:16 - num minus one that is factorial of or
13:20 - rather than 50 obviously it would be
13:22 - very large so let's say let's just keep
13:25 - it five only right just for your
13:28 - understanding purpose so here we are
13:30 - writing simply uh
13:39 - five in Num we have five and five into
13:43 - fact 5 - 1 4 means it will call again
13:47 - this function so again one record again
13:49 - activation record would be push for fact
13:52 - four this was fact five so you see if in
13:55 - one stack there are two activation
13:57 - record for the same function it means
13:59 - there is recursion right so here we have
14:02 - again num num is four and it will return
14:05 - because this condition is not true so it
14:07 - will turn four into fact of three now
14:10 - fact three means again it will call the
14:12 - same function again itself so fact this
14:14 - is activation record for fact three so
14:17 - now num is equal to 3 and 3 into fact of
14:22 - 3 - 1 that is two so again it will call
14:25 - itself for this activation record is
14:28 - perfect 2 so here we have num is equal
14:31 - to 2 this condition is again not true so
14:33 - 2 into it will call again fact 2 - 1 1
14:37 - so one activation record for Fact one so
14:41 - right now num is equal to here one now
14:44 - see num is one is this condition true
14:47 - yes condition is true so return one so
14:50 - this function will return one where to
14:52 - return where you are calling this
14:54 - function here so it will return one to
14:57 - here so fact this is one so 2 into 1 is
15:02 - 1 right now 2 into 1 is 1 but now this
15:06 - function this function will return this
15:08 - value where we are calling this function
15:10 - from
15:11 - here right so it will return this value
15:14 - 2 to here so 3 into 2 this value is 2 3
15:16 - into 2 is 6 now where this value would
15:19 - be returned here so here we have 6 6
15:22 - into 4 is 24 now where this value would
15:25 - be returned here because here we are
15:28 - calling from here we are calling fact 4
15:30 - so 24 into 5 is 120 so this this is 120
15:35 - complete 5 into fact 4 is 120 now where
15:39 - this would be returned and this is after
15:41 - returning back this would be popped from
15:44 - the stack right after returning this
15:47 - this is
15:49 - now right after returning from here this
15:52 - would also be popped out like this would
15:54 - also be popped
15:55 - out this one after that this would be
15:57 - popped out this would be po poed out and
15:59 - after returning 12 to here main because
16:02 - we are calling here in main function 120
16:04 - so this would be out of the step popped
16:06 - out from the step and just C out and see
16:08 - out would be here the answer would be
16:10 - 120 and return zero means successful out
16:13 - successfully I mean the program
16:14 - completion so this main would also be
16:16 - popped out from the stack and that's it
16:18 - right so this is how you will get 120
16:20 - answer right now I hope you got this
16:23 - what is happening behind the sing the
16:24 - function call stack how this is working
16:26 - in case of recursion right and now see
16:28 - if there is no base condition then we
16:31 - will simply call again again again like
16:33 - this the cursion would be deeper and
16:34 - deeper right like perfect then 0 - 1 - 2
16:38 - - 3 something like this and at some
16:40 - point of time obviously the stack M
16:41 - would be exhausted out of space and then
16:43 - it will give you stack Overflow error so
16:45 - this base condition is very crucial to
16:48 - stop the recursion this first you need
16:50 - to identify base condition if you're
16:51 - solving a problem with the help of this
16:53 - reion right I hope you got this now
16:55 - second let's discuss with uh the fibon
16:57 - series let's disc that thing see we have
17:00 - this is the faon series 0 and one at
17:03 - starting we have like sometimes they
17:05 - start from one and one and some starts
17:07 - from zero 0 1 then addition of previous
17:10 - two 0 + 1 1 1 + 1 2 2 + 1 3 3 + 2 5 5 +
17:17 - 8 5 + 3 8 8 + uh this 13 21 and like
17:22 - this this is what F Series right the
17:26 - next term if you want to find out then
17:28 - the sum of the previous two terms right
17:31 - so if I want to find out this two this
17:34 - two would be
17:35 - like 1 + 1 that is two so previous two
17:38 - terms so if you want to find out n FIB
17:41 - of
17:42 - n this is fibon series and this is like
17:46 - one term which this is known as fibon
17:49 - number so if you find out a particular
17:51 - term n then we simply write down here
17:55 - like FIB of n minus1 plus FIB of N - 2
18:00 - that's it because if you want want to
18:02 - find out FIB of like n is what 0 1 2 3 4
18:06 - five or six for this the sixth number
18:12 - you want to find out that is eight so
18:14 - that would
18:15 - be this number plus this number right
18:19 - but now have to find out this five this
18:21 - five is this number plus this number and
18:23 - the three is this number plus this
18:25 - number so obviously you have to find out
18:27 - FIB of N minus1 and FIB of 10 -
18:30 - 2 like this so FIB of we have fifth term
18:34 - and FIB of fourth something like this
18:38 - and then again FIB of five would be FIB
18:40 - of 4 plus FIB of 3 so same we are
18:43 - dividing the problem into smaller sub
18:45 - problems right and by
18:47 - definition FIB of 0 is zero and FIB of 1
18:52 - is 1 so here we have two base conditions
18:56 - FIB of 0 FIB of 1 FIB of 0 is 0 one is
18:59 - one so these are base conditions and
19:01 - this is like this is these are base
19:03 - cases and these are this is what
19:05 - particularly this is recursive
19:08 - case right so see here we are calling 2
19:11 - * FIB
19:13 - FIB right so this is kind of like pre
19:15 - recursion you can say there are types of
19:17 - recursion we'll see the type also in
19:19 - some other video now pause the video and
19:21 - write down the program for the sub
19:22 - Series so this was the program for
19:24 - factorial of a number now let's write
19:26 - for the FCI series I just want to print
19:30 - C out and FIB of suppose same uh that we
19:33 - have done here FIB of five suppose I
19:36 - want to find out FIB 5 that Fibonacci
19:38 - number right obviously you have to
19:41 - Define that function first so that
19:44 - number maybe could be very long so we
19:46 - can take unsigned long long the return
19:49 - type or simply you can take int also
19:51 - right F the name of that function is fib
19:54 - and here we are just taking a number
19:56 - suppose n
19:59 - so what it will return return FIB of
20:03 - nus1 plus FIB of nus 2 but before that
20:08 - you have to put a base condition to stop
20:10 - this so if this n is less than or equal
20:14 - to one then simply return whatever
20:18 - the number n if number is zero return
20:22 - zero if number is one return one you got
20:25 - it and the number should also be
20:27 - unsigned let's take un signed long for
20:30 - this number because obviously we will
20:32 - not find fibon series of minus so okay
20:36 - here we have eror it's minus note
20:37 - underscore
20:38 - right sorry it's not minus it's it's
20:44 - plus sorry my bad and here let's simply
20:48 - print zero so let's run this and see
20:51 - what output we getting here here we have
20:53 - five what is that series 0 1 then two
20:56 - sorry 0 1 1 then two then three then 5
21:01 - then 8 then 13 and something like this
21:04 - so FIB of five like 0 1 2 3 4 5 so here
21:08 - we have five on like this if we find out
21:11 - FIB of
21:13 - six then it will give you 8 C right so
21:18 - now you have to try on this program
21:19 - please check out how this is working the
21:22 - behind the scene what is happening right
21:23 - and one assignment for you is here I'm
21:25 - just printing for six that particular
21:26 - number but sixth term I mean that in
21:30 - that series there should be six term
21:32 - what is the fibon series like 0 1 1 then
21:35 - two then three then five then eight
21:37 - something like this still eight you have
21:38 - to print so this is your assignment you
21:40 - have to print that fibon series up to a
21:43 - given terms using recursion using
21:45 - recursion and if you want to check out
21:47 - how this is working you can continue
21:49 - watching this video otherwise you can
21:50 - stop so at first see what how recursion
21:53 - is working here we have here we have PB
21:56 - of six right right or rather than six
22:00 - let's take FIB of for smaller let's take
22:03 - FIB of four here right so here we will
22:06 - write FIB of
22:10 - four now what is happening FIB of four
22:14 - means here this condition is not true so
22:15 - it will call this and this so it will
22:18 - call fibo 4 - 1 that is 3
22:23 - plus FIB of 4 - 2 that is 2 so this is
22:27 - like three type of reion now again FIB
22:30 - of three we have so this FIB of three it
22:34 - will call again here so FIB of 3 would
22:37 - be divided here like something like this
22:40 - FIB of 2 plus FIB of 1 and this would be
22:45 - something like this FIB of 2 is 1 + FIB
22:50 - of
22:51 - 0 right now FIB of two this would again
22:56 - be divided into FIB of one plus FIB of 0
23:01 - and FIB of one would be obviously this
23:04 - is base case so it would not be further
23:06 - divided because base cases n is less
23:08 - than equal to one return n so we got
23:11 - here all the for all the branches base
23:13 - cases so FIB of this one FIB of one will
23:18 - return this condition is true n is one
23:21 - so return n so it will return 1 plus F
23:24 - of 0 it will return zero so 1 + 0 that
23:27 - is 1 so this would be returned here so
23:30 - here now we have one this would be
23:33 - returned here so F both 2 is now 1 plus
23:38 - of one it will return one so 1 + 1 is 2
23:42 - so this 1 + 1 2 is returned here and
23:44 - here we have now
23:46 - two now for this Branch FIB of one it
23:49 - will return one it will return 0o so 1 +
23:51 - 0 is 1 so it will return one and one is
23:54 - here now 2 + 1 that is 3 so three would
23:59 - be returned here and fibo 4 is three
24:03 - right so as you can see here FIB 4 0 1 1
24:06 - 2 3 F4 is three so this is how that infy
24:11 - series that tree recursion is working
24:14 - right now what are advantages of using
24:17 - recursion that already we have seen like
24:19 - some advantages we have already seen the
24:21 - code would be simple and easy to read a
24:22 - clean code we can write using recursion
24:24 - it can simplify the code of complex
24:26 - problems into sub problems simp sub
24:28 - problems right like those backtracking
24:31 - problems and queen's problem searching
24:33 - problem sorting problem traversing
24:34 - problem DFS BFS those problems in some
24:37 - problems like we can directly model the
24:39 - structure of that problem into program
24:41 - using Rion right but the problem here is
24:43 - what when to stop that that condition
24:45 - sometimes this error generally we get
24:47 - when we use recursion in a program that
24:48 - stack Overflow error this is the
24:50 - drawback of using recursion this you
24:51 - need to handle right and sometimes you
24:54 - know debugging is also difficult in case
24:56 - of recursion because of you know there
24:58 - are so many levels of recursion or that
25:01 - function calling that function call stag
25:05 - there are so many levels that debugging
25:07 - would be a little bit tough right and
25:09 - performance overhead is also there the
25:11 - pushing and popping of activation record
25:14 - rather than in some problems it would be
25:15 - easy to use iterative approach right but
25:18 - for some problems definitely recursive
25:20 - approach is better so now I guess you
25:23 - got it what are recursive function and
25:25 - how recursion Works in detail what are
25:27 - recursion because there are different
25:28 - types of recursion as well direct
25:30 - recursion indirect recursion head
25:32 - recursion tail recursion tree recursion
25:35 - like this tree recursion right so that
25:37 - we will see in a separate video but
25:39 - basics of recursion and what are
25:40 - recursive function that I guess uh you
25:42 - got it right so in the next video we'll
25:44 - see one or two coding exercises for this
25:47 - Rec so now I'll see in the next bye- bye
25:49 - take care