00:00 - so in this lecture i am going to take a
00:02 - complex example or you can say lengthy
00:04 - example
00:05 - and we will see step by step explanation
00:09 - how to convert a relation which is in
00:12 - first
00:12 - normal form to bcnf right
00:16 - already i have discussed from first to
00:18 - second from second to third
00:20 - right but in this video i am going to
00:21 - combine all the steps means from first
00:24 - to bcnf how we are going to convert this
00:26 - relation so this is the relation and
00:28 - these are the functional dependencies
00:30 - given in this relation
00:31 - right and this relation is in first
00:33 - normal form if you want to check out
00:35 - obviously we need to find out the
00:36 - candidate key for this first step is
00:38 - this one because i have already
00:39 - discussed many videos many in many
00:41 - previous videos
00:42 - right so how can you check in this is in
00:45 - first
00:45 - normal form obviously we will find out
00:47 - first of all the candidate keys and then
00:49 - we will check if there is any partial
00:50 - dependency then
00:51 - there this is not in second normal form
00:53 - and that is why it is in first normal
00:55 - form by default
00:56 - the relation which is written something
00:58 - like this this is we consider that it is
01:00 - in first normal form
01:02 - right so now find out the candidate key
01:06 - first of all how to find out that also i
01:07 - have already discussed
01:09 - how to find out candidate keys from a
01:11 - given relation
01:12 - in my previous videos i'll provide the
01:14 - link of the complete
01:15 - dbms playlist in the description box you
01:17 - can check out there
01:18 - right so now
01:24 - take all the ah attributes of the
01:26 - relation and find out the closer
01:28 - obviously it will find out
01:32 - all the attributes right now try to
01:34 - discard the
01:35 - attributes using functional dependencies
01:37 - right a can drive bd so if you have a
01:40 - i can discard b and d right see b can
01:43 - drive
01:44 - c means if you have b you can drive c
01:47 - now obviously if you have a i can drive
01:50 - b
01:50 - right and if i i have b then i can drive
01:53 - c so i can discard c as well
01:56 - using e i can drive e and f so if you
01:58 - have e
01:59 - you can discard f and g sorry f and g
02:02 - right now if you have a and e a
02:06 - and e so you can derive h so you can
02:08 - discard h because i have a and e
02:10 - so the remaining attributes are only a
02:13 - and e
02:14 - find out the closer see using a
02:17 - i can drive a e definitely using a i can
02:20 - drive
02:20 - b d using b i can drive c using e i can
02:24 - drive f
02:25 - g and i can drive h all the attributes i
02:28 - can drive so
02:28 - a is what you can say it is a super key
02:31 - we cannot discard any
02:32 - more elements any more attributes from
02:35 - here so this is super
02:36 - key now proper subset is
02:39 - a and e obviously no proper subset would
02:43 - be
02:43 - super key because a closer would only
02:46 - contain a
02:47 - then bd and then we can drive c right
02:50 - not all the attribute e closure can
02:52 - contain e
02:54 - f and g only right so no this is neither
02:57 - this is superhero nor this is super q so
02:59 - that is why we can say that a
03:01 - e is our candidate key right
03:05 - now prime attributes are a and e
03:08 - fine find out more candidate keys are
03:10 - available or not
03:12 - if prime attributes are available on the
03:13 - right hand side of any functional
03:14 - dependencies
03:16 - means there are still more candidate
03:17 - keys but a and e are not
03:19 - on the right hand side so there is only
03:21 - one candidate key that is
03:22 - a fine now find out
03:26 - which functional dependency is creating
03:29 - problem
03:29 - means which function like dependencies
03:31 - partial dependency
03:33 - right see
03:36 - a can drive bd partial dependency means
03:40 - the proper subset of this candidate key
03:43 - drives known prime attribute then that
03:46 - is partial dependency
03:47 - a is partial subset and b d yeah this is
03:50 - non prime attribute because prime
03:52 - attributes are only a and e so this is
03:54 - partial dependency right
03:57 - s b proper subset of this one no so
04:00 - obviously this cannot be a partial
04:01 - dependency
04:02 - is proper subset of this one yes fg are
04:05 - non-prime attribute yes so this is
04:06 - partial dependency
04:09 - a is proper subset of candidate key no a
04:11 - is
04:12 - itself a candidate here you can see
04:13 - super key so this is not partial
04:15 - dependency
04:15 - means this these two functional
04:17 - dependencies are creating problem
04:19 - because of these two this relation is
04:21 - not in second normal form it is in first
04:23 - normal form
04:24 - now we have identified the
04:28 - dependencies which are creating problem
04:30 - so next
04:31 - step is what take out this one this
04:34 - functional dependency and
04:36 - find out a closer a closer would be this
04:38 - one
04:40 - a b c d right using these i will find
04:43 - out
04:43 - now put all these attributes in one
04:45 - relation
04:49 - right find out e closer
04:52 - e closure would be e f g put all these
04:55 - attributes
04:56 - in another relation right
05:00 - and put all the remaining attributes in
05:03 - a third relation remaining attribute is
05:07 - h only right but we cannot put only one
05:10 - attribute in this
05:11 - so now what you have to do see
05:14 - now there should be something common
05:16 - right because in this and this there is
05:18 - no common in this and this also no
05:20 - common so when you will join there
05:21 - should be something common
05:23 - we to to be a lossless joint
05:25 - decomposition right
05:27 - if nothing is common between the
05:28 - relation then this is low c
05:30 - joint decomposition right and we want
05:32 - lossless zone decomposition and
05:34 - dependency preserving
05:35 - so if we join this one and this one so
05:37 - what should we put
05:38 - common here see the common attribute
05:41 - should be
05:42 - super key or you can say candidate key
05:44 - of at least one sub relation
05:46 - right to be that decomposition a
05:49 - lossless joint decomposition
05:51 - right so suppose i put a common here
05:55 - obviously a is candidate key for this
05:56 - one because because using a i can drive
05:58 - b c d all the attributes
06:00 - so it's better to put a common you can
06:02 - put b common either c
06:04 - or d you can put these things common and
06:06 - you can check out
06:07 - right those would be loss c joint
06:09 - decomposition right
06:12 - now between this and this what should be
06:14 - the common attribute
06:15 - it's better to put what e common because
06:18 - each
06:19 - is what candidate key for this sub
06:21 - relation or you can say super key for
06:22 - the sub relation
06:23 - because e can drive f and g all the
06:25 - attribute of the sub relation
06:27 - right so now this is our third relation
06:30 - or in simple terms you can say one
06:34 - i mean in one relation we always put the
06:36 - candidate key c remaining attribute is
06:38 - h and obviously the candidate key is
06:40 - about a so we put a
06:42 - here so that thing also you can consider
06:44 - or you can apply the logic which i am
06:47 - uh telling here in this video right so
06:50 - now we need to check this is lossless
06:52 - during the
06:52 - decomposition right but we need to check
06:55 - the
06:56 - you know highest normal form for this
06:58 - also this also and this also because we
06:59 - are supposed to convert it into bcnf
07:02 - right now check it is converted into
07:04 - bcnf for node or it is still in
07:06 - first and fourth and second and fourth
07:07 - third and we can't say so for that we
07:09 - need to find out the functional
07:10 - dependencies and candidate keys
07:12 - right so functional dependency for this
07:14 - relation would be how to find out
07:16 - functional dependencies that video i
07:17 - have already discussed in detail
07:20 - i'll provide the link of that video
07:21 - particularly in this i button you can
07:23 - check out there
07:24 - here i am just writing the functional
07:26 - dependencies
07:27 - right so the functional dependency for
07:29 - this one would be
07:31 - here a can drive b c d because when you
07:34 - find out a closer you will
07:36 - get this one and a two a is trivial and
07:38 - b c d right
07:39 - when you will find out b closer then you
07:42 - will get
07:42 - b to c this functional dependency right
07:46 - how to find out you have to consider
07:48 - this functional dependency
07:50 - right now if you find out c closer then
07:53 - what would be the case c
07:54 - closure would be c only because see
07:56 - using c i cannot drive anything so this
07:58 - is
07:59 - trivial so we are not going to take it d
08:01 - closer also you can only get
08:03 - d nothing else so this is also trivial
08:05 - we are not going to take it right
08:07 - now a can drive all the attributes so no
08:09 - need to check with a b
08:11 - a c and a d like this because that would
08:13 - be
08:14 - duplicate right and b can drive c
08:17 - c and d are driving nothing so no need
08:20 - to check bc
08:21 - bd and cd right you'll you will not get
08:24 - anything you will check
08:25 - you can if you want to check out you can
08:27 - check out right so you will find out
08:29 - only these two functional dependencies
08:31 - here
08:31 - right now in r2 functional dependency
08:34 - would be
08:35 - if you find out e closure then f g would
08:38 - be there
08:38 - if you find out f closer nothing you
08:41 - will get
08:42 - f 2 f trivial would be there g closer
08:45 - nothing you will get using this function
08:46 - dependency
08:47 - right so there is only one functional
08:49 - dependency
08:51 - right e can drive all the attributes so
08:53 - no need to check
08:54 - ef closer and e g closer because
08:56 - obviously that would be
08:58 - uh duplicate and if you find out f g
09:01 - then that also would be trivial only f g
09:02 - you can drive using f g
09:04 - f j closure would be f g only right so
09:07 - no need to take there is only one
09:09 - ah functional dependency here now here
09:13 - functional dependency would be see if
09:15 - you find out
09:16 - h closer you will get only h trivial if
09:19 - you find out
09:20 - a closer then you will get this one
09:23 - but a2 is trivial bc bcd are not part of
09:26 - this one
09:27 - so no need to take this one we are not
09:28 - going to take e closure would be e f g
09:31 - e 2 is trivial f g is not part of this
09:34 - sub relation so we are not going to take
09:35 - it right
09:36 - so now one relation one ah dependency
09:39 - would be there here a e
09:41 - if you find out a e closure then that
09:44 - would be
09:48 - a using a i can drive bd
09:52 - using b i can drive c using e i can
09:54 - drive
09:56 - f and g right using a e i can drive
09:59 - h all the attributes a to a a
10:03 - is trivial see d is not part of the sub
10:06 - relation c
10:07 - is not part of the sub relation f is no
10:10 - and g only h is part of the sub relation
10:13 - so a
10:14 - can drive h right same you can find out
10:17 - h
10:18 - same you can find find out eh right you
10:21 - will get
10:21 - nothing all the attributes those you
10:23 - will get in closer that are not part of
10:25 - the sub relation right so we are not
10:27 - going to take those
10:28 - functional dependencies so only one
10:31 - functional dependency would be there in
10:32 - this case
10:33 - right now find out the normal form for
10:36 - this this and
10:38 - this same for that you have to find out
10:40 - candidate key
10:41 - the same process you will apply in each
10:44 - sub relations right i am not going to
10:46 - apply again
10:47 - because we have already discussed one
10:49 - time so when you apply the same process
10:51 - then the candidate key for the
10:53 - subrelation would be
10:54 - a from here only you can check you can
10:57 - drive all the attributes
10:58 - right so candidate key would be one
11:00 - candidate key is
11:01 - a and a is not on the right hand side so
11:04 - there is only one candidate key
11:06 - here the candidate key would be only e
11:08 - and here the candidate key would be
11:10 - a e
11:14 - now see is
11:17 - this partial dependency no is this
11:20 - partial dependency
11:22 - no means this is in second nf definitely
11:25 - but is it in third nfc check for three
11:28 - and f
11:29 - two conditions are there one of those
11:32 - two conditions should be satisfied
11:33 - either left hand side is super key or
11:35 - right hand side is prime attribute
11:37 - is left hand side super key yes so this
11:39 - is not transitive dependency
11:41 - right is left hand side super key no is
11:43 - right hand side prime attribute no
11:45 - because prime attribute is only one a
11:47 - so this is transitive dependency so this
11:50 - relation is not in third normal form it
11:52 - is in
11:53 - second normal form r1
11:56 - check for this one e the left hand side
12:00 - is what
12:01 - only one dependency is there and the e
12:02 - is what candidate here you can see super
12:04 - key
12:04 - right so if the left hand side is super
12:07 - key
12:08 - of the functional dependencies of all
12:10 - the functional dependencies
12:12 - then that relation is in bcnf
12:16 - that rule we already discussed right so
12:18 - this is in bcnf
12:23 - this one left hand side is what super
12:25 - key or you can say candidate obviously
12:27 - candidate key is super key also right
12:29 - so this is also in bcnf
12:33 - but this is in second nf right so
12:36 - it's not like that we have got 2 bcnf so
12:38 - it is in bcnf now no it is still in
12:40 - second normal form because the lowest
12:42 - one we are going to choose
12:43 - right that is second normal form now you
12:46 - have to convert this sub relation only
12:48 - into
12:49 - third nf or bcnf this we have already
12:52 - got two
12:52 - sub relations right now we are going to
12:55 - work on this
12:56 - r1 only now here which functional
12:59 - dependency is creating a problem
13:00 - for third nf this one only because this
13:02 - is not creating a problem this is not
13:04 - transitive dependency this is transitive
13:06 - dependency
13:07 - so now take be closer
13:12 - now see we are not going to consider now
13:14 - this functional dependency
13:16 - because now we are decomposing this
13:18 - relation r1
13:19 - and we have already got the functional
13:22 - dependency set for this
13:23 - sub relation so now we will consider
13:25 - this one to find out be
13:27 - closer so be closer would be b and using
13:29 - b i can write c only
13:32 - bc so one sub relation would be suppose
13:34 - r one one that is
13:36 - b c and a remaining would be
13:40 - in second sub relation that is a
13:44 - and d now we have to put something
13:47 - common right
13:48 - to get a lossless joint decomposition
13:50 - common should be
13:52 - at least super cube one sub relation as
13:54 - you know we can drive c so b
13:56 - would be definitely super key or you can
13:58 - say candidate k for the sub relation so
14:00 - better to put b common
14:02 - right now find out functional
14:05 - dependencies and then find out
14:07 - that this is or this is in bc and for
14:09 - node are still in
14:11 - third nf or still in second nf this is
14:13 - having only two attributes so this is
14:15 - definitely
14:16 - in bcnf right
14:20 - check for this one find out functional
14:22 - dependencies first
14:24 - f one two set would be if you find out a
14:27 - closer you will get
14:28 - a can drive bcd means
14:32 - b d because c
14:35 - is not part of the sub relation right
14:38 - if you find out d closer nothing you
14:40 - will get trivial functional dependence
14:42 - you will get if you find out b
14:43 - closer then you will get b and
14:46 - c b to b is trivalent c is not part of
14:49 - the sub relation so we are going to take
14:50 - only this one
14:51 - right because a can drive all the
14:54 - attributes so no need to check a d
14:56 - and a b closer right and if you want to
14:59 - check b
14:59 - d closer then you will get what b b and
15:02 - c only so b d is trivial c is not part
15:06 - of this one so we are not going to take
15:08 - that functional dependency also right so
15:10 - there is only one functional dependency
15:12 - now if you find out the candidate key
15:13 - then candidate keyword you will get
15:15 - that would be a only right
15:18 - now if you check left hand side of this
15:20 - functional dependency is a
15:22 - that is candidate key or you can say
15:23 - super key so this
15:25 - is definitely in bcnf so now this is in
15:29 - bcnf
15:32 - right now finally
15:35 - we have converted it into bcnf
15:39 - right because and now how many sub
15:41 - relations are there one
15:43 - two three and four we are not going to
15:45 - consider this because we have decomposed
15:47 - it into
15:48 - this one to to convert it into
15:51 - bcnf because it was in second nf right
15:54 - so four sub relations are there this one
15:56 - this one this one and this one
15:58 - and if you are asked how many sub
15:59 - relations would be required to convert
16:01 - this into b c and f then your answer
16:03 - would be four
16:05 - sub relations would be required these
16:06 - four sub relations
16:08 - right this is how this is the step by
16:10 - step explanation how we are going to
16:12 - convert a relation which is in first and
16:13 - m two
16:14 - first nf to bcnf right so that's it for
16:17 - today now i'll see in the next video
16:18 - till then bye bye take care