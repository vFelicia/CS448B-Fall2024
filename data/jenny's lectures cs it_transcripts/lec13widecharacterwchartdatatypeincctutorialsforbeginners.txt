00:00 - so in the series of learning c plus plus
00:01 - programming language in the previous
00:02 - video we have discussed carrier type in
00:04 - c plus plus so now in this video we will
00:06 - see
00:06 - w care underscores t this stereotype
00:09 - this is for white characters in c plus
00:12 - this is almost same as ah cad type which
00:15 - is used to you know
00:16 - store those alphabet digits you can say
00:19 - the letters or special symbols
00:21 - punctuation marks and these things this
00:23 - also used to store these things but few
00:25 - differences are there
00:27 - right now what are those differences how
00:28 - this is different from cairo type and
00:30 - why we need this hair type if you have
00:33 - cadet then why we need this wide
00:34 - character data type right all these
00:36 - things will discuss in this video with
00:38 - the help of a program i will show you
00:40 - practical also right now before that
00:42 - just want to tell you one thing
00:43 - geeksfornix has come up with a hiring
00:45 - challenge called jobathan which will be
00:48 - on 21st of june and the time is
00:50 - 8 pm to 10 30 pm
00:53 - and this contest is for the candidates
00:55 - who are looking for freshers or you know
00:58 - intern job opportunities these six
01:00 - companies will be participating in this
01:02 - contest to fulfill their hiring
01:04 - requirements so first you have to
01:06 - register for this contest after
01:07 - registering for the contest you have to
01:10 - go through the job descriptions even
01:12 - right and then you have to register for
01:14 - one or more companies that you are
01:16 - interested in your profile will be
01:17 - selected will be considered for the
01:19 - company if you have registered for that
01:22 - thing
01:23 - now what is the format how many
01:24 - questions you will get total 18 question
01:27 - you will get and the total mass would be
01:28 - 175 marks three coding questions would
01:30 - be there right three dsa coding problems
01:33 - of 100 marks and the language for these
01:36 - to solve these recording problems are
01:38 - what c plus plus java and python
01:41 - now five mcqs for programming logic five
01:45 - mcqs for quantitative activity aptitude
01:47 - and five mcqs for logical reasoning
01:50 - these mcqs would be of 25 marks each so
01:52 - total 175 marks would be there
01:54 - and there is five percent penalty for
01:56 - each wrong submission so better to first
01:59 - use that compiling test against the
02:01 - sample test cases before you actually
02:03 - submit your answer right and only
02:05 - individual participation is allowed an
02:07 - interview shortlisting would be done for
02:09 - you know specific companies based on
02:11 - their own criteria
02:12 - so to find out more rules and
02:14 - regulations you go to their contest page
02:16 - the link would be in the description box
02:17 - of this video you go and check out from
02:20 - there so and this event is what it's a
02:22 - recurring event it happens on 21st of
02:25 - every month right so you just mark your
02:27 - calendars and you keep track so now all
02:29 - the relevant links and details i'll put
02:31 - in the description box of this video you
02:32 - can go and check out now let's see what
02:34 - is
02:35 - cap or you can say white character data
02:37 - type in c plus plus
02:38 - see
02:39 - same it is used to store
02:42 - the characters wide characters it is
02:44 - known as first of all white character
02:46 - white characters right so the difference
02:48 - is what can take
02:50 - one bite right it take two bites
02:54 - or four bites sometimes it depends on
02:57 - the compiler you are using
02:59 - in my compiler in my machine it is
03:01 - taking two bytes i will show you how to
03:03 - calculate size of this data type right
03:06 - you can check out on your own machine
03:07 - maybe it will take four bytes right
03:09 - so now see
03:10 - can take only one byte
03:13 - means eight bits
03:15 - so using cad air type we can represent
03:18 - only how many characters or you can say
03:21 - the things how many characters or
03:23 - symbols
03:24 - only 256
03:26 - right zero to 255
03:29 - like capital a b c d small a b c d some
03:31 - 0 to 9 numbers and some symbols right
03:36 - but
03:37 - c
03:38 - and that it is used to represent what
03:42 - this we follow what the m the famous
03:45 - character encoding scheme is what sky we
03:46 - follow this thing right
03:49 - but now in the world there are many
03:51 - languages it's not like that
03:54 - only these abcd and these symbols we
03:56 - have
03:57 - so there are many languages in the world
04:00 - right
04:01 - many characters are there many symbols
04:03 - are there emoji you are using nowadays
04:07 - emoji is what
04:09 - also coded right
04:11 - in just a sequence of some unicode
04:13 - characters
04:14 - one or more unicode characters or
04:16 - numbers right
04:19 - so
04:20 - for storing those things
04:23 - right
04:24 - we cannot use this cad type
04:27 - because using this we can
04:30 - store only 256 values
04:33 - right
04:34 - that is why we use wide character data
04:37 - type
04:38 - same how to what is the syntax you have
04:40 - to write w care underscore t the name of
04:43 - the variable suppose i am taking ch
04:45 - but prefix
04:47 - which is used is l first of all l then
04:50 - in single quote you just write down a
04:52 - character
04:53 - for simplicity purpose i am just taking
04:56 - smalling
04:57 - right
04:59 - although small a we can represent this
05:01 - thing using care also but i am just
05:02 - taking one simple simple example right
05:05 - when will uh you know write a program
05:07 - then i'll store a wide character or a
05:10 - character you can say from different
05:11 - language right
05:12 - now
05:13 - see this l is telling the compiler that
05:16 - it is wired character and it is going to
05:18 - take two bytes or maybe four bytes it
05:19 - depends on the compiler in my machine it
05:21 - is taking two bytes so this a now would
05:23 - be stored in two bytes memory
05:26 - right so mainly w this type
05:29 - is used when we deal with international
05:31 - languages like russian japanese these
05:33 - languages they have different different
05:34 - characters and
05:36 - many things many symbols to store
05:38 - those are
05:39 - we are not able to you know represent
05:41 - those symbols using care data type so
05:44 - now that is why if suppose it take two
05:46 - bytes
05:47 - so
05:48 - how many the range of this stereotype
05:50 - would be 0 2 you can say or you can say
05:54 - 6 5 5 i think 3 6.
05:56 - these many characters or symbols or
05:59 - anything you can say we can represent
06:01 - using wide carrier type we can store
06:03 - using white cad air type
06:05 - and with help of care we can represent
06:07 - only 256 values characters
06:11 - right
06:12 - so
06:13 - have you use sky
06:15 - table
06:16 - one more character encoding is what
06:18 - unicode
06:23 - unicode standard or you can see unicode
06:25 - table is there as you can see this is
06:27 - the unicode table in this table we have
06:30 - a unique number for each character
06:34 - or symbols or punctuation marks or emoji
06:37 - even for emojis we have unique
06:39 - characters
06:41 - right and it is still evolving
06:44 - the recent unicode you know you can say
06:46 - version is what 14.0
06:48 - and unicode
06:51 - 15.0 will be coming in september
06:54 - they are planning to release this
06:55 - version on uh 15 13 september 2022 right
07:00 - and for this now what is this unicode
07:02 - it provide unique number unique code for
07:06 - each character
07:07 - right see many character encodings are
07:11 - there
07:12 - just you can google out and there will
07:13 - be list of character encodings right
07:16 - the famous one is sky we generally use
07:19 - and
07:20 - they are limited
07:22 - right they are not suitable to represent
07:25 - all the languages from all over the from
07:28 - all over the world right
07:30 - so a new character coding would be
07:32 - introduced and some other limitations in
07:35 - you know previous character encodings
07:36 - role so they are conflicting with each
07:38 - other
07:39 - sometimes same number is used to
07:41 - represent two different different
07:42 - characters right or maybe the same
07:44 - character
07:45 - is having different different numbers
07:48 - and different different encoding schemes
07:49 - so generally any computer like
07:51 - especially the server have to support
07:53 - multiple encoding schemes and sometimes
07:56 - when we transfer data using these
07:57 - encoding schemes between different
07:59 - character encoding schemes like one
08:01 - computer is following this encoding
08:02 - scheme another computer is holding
08:04 - another encoding scheme you know
08:06 - character encoding
08:08 - so there would be a risk like the loss
08:10 - of data or you can say the data
08:12 - correction you are sending some other
08:14 - data receiving some other data because
08:16 - of the different different platforms or
08:18 - different different character recording
08:20 - scheme
08:21 - but unicode provide a single character
08:23 - unique
08:24 - number right to every character
08:29 - irrespective of the platform the
08:30 - language
08:32 - irrespective of anything unique number
08:34 - it is going to provide right so the
08:36 - recent version they're going to release
08:38 - is 15.0 in which they have
08:41 - i think in unicode 14.0 version there
08:44 - are
08:45 - uh
08:47 - i am not sure but these many characters
08:50 - are there some emojis
08:52 - many symbols are there and they have
08:54 - encoded like uh almost 159 scripts
08:59 - script means uh
09:01 - for example demna is a script or you can
09:03 - say lipi for hindi language dev nagar is
09:06 - a leapy so
09:07 - like this many scripts are there for
09:09 - different different languages
09:11 - so they have encoded 159 scripts in this
09:14 - so in 15.0 they have added
09:17 - these many new characters uh two new
09:19 - scripts they have added and 20 new
09:21 - emojis they have added
09:23 - right
09:24 - this number you have to check out like
09:26 - in 14.0 i think these many characters
09:29 - are there but you have to confirm you
09:31 - just confirm you just google it out
09:33 - right
09:34 - so
09:34 - this white character can take these many
09:37 - values
09:38 - which correspond to the unicode table
09:40 - from unicode table
09:41 - right
09:43 - as you can see this is the unicode table
09:46 - here we have unicode number
09:49 - and you can say the decimal also
09:52 - corresponding to that you can say the
09:54 - letter or the digit or the symbol
09:56 - like suppose for a we have decimal we
09:59 - have 65 and unicode encoding we have u
10:01 - plus 0 0 41.
10:04 - right
10:05 - like this we have unicode
10:08 - you can say the number
10:10 - for each
10:11 - character in this table so i think the
10:14 - basic about this this data type is clear
10:17 - to you guys let me show you a practical
10:19 - let me show you a program
10:20 - right see we use this
10:23 - when we deal with international
10:24 - languages
10:25 - so frankly speaking
10:27 - you you you have to use only care data
10:30 - right because you are not dealing with
10:31 - international languages when you are
10:32 - writing a program and all
10:34 - right but for this you know if this is a
10:37 - built-in area type in c plus plus so you
10:38 - have some idea about the stereotype i
10:41 - guess you've got the basic idea about
10:42 - this data type but there is
10:44 - many thing about this data type right in
10:47 - detail maybe we can discuss in a
10:49 - separate video this is just to give you
10:51 - an overview about wcad type and what is
10:53 - unicode and all these things
10:55 - right
10:56 - so see this is a file a program w care
10:58 - underscore t dot cpp there is nothing
11:01 - much in this we have just that header
11:02 - file name space std
11:05 - and we have declared a variable defined
11:07 - a variable ch the data type of this is w
11:10 - care underscore t and l
11:12 - in single quote i am writing this
11:14 - symbol
11:15 - but first of all let me just write down
11:18 - only simple
11:20 - character a we are
11:21 - using right now second thing we are will
11:25 - just print c out ch the character
11:28 - but for
11:29 - dealing with this
11:30 - w care wide characters because this now
11:33 - a is now would be considered as wide
11:35 - character
11:36 - so for printing this
11:38 - you
11:39 - see out is what for character output
11:41 - but we use wc out wide character output
11:44 - right because a is now a wide character
11:46 - and then we are just
11:48 - finding out the size of this w care
11:50 - underscore t data type that's it right
11:53 - now let me just save it and run
11:57 - it will simply print character is a and
12:00 - the size is two byte
12:02 - this is the difference a is the
12:04 - character but the size is it is taking
12:06 - in my machine two bytes
12:08 - in some machine maybe it can take four
12:09 - bytes it depends on the compiler you are
12:10 - using
12:11 - right
12:12 - but now see let's take
12:14 - another thing let's see see
12:16 - this is unicode table
12:19 - i'm referring this is the unicode table
12:21 - here we have decimal values we have so
12:24 - suppose this symbol i am taking this
12:28 - g and
12:30 - i don't know what is the symbol let me
12:32 - just
12:33 - take this symbol
12:37 - control c and control
12:40 - just paste it because obviously from our
12:42 - keyboard we cannot
12:44 - write down we cannot print these kind of
12:46 - symbols
12:47 - we are limit you know we have limited
12:49 - resources the keyboard is you can say
12:50 - limited having limited numbers and
12:53 - alphabets and all
12:55 - so just copying pasting here
12:57 - and let's just save it and run now see
13:01 - what output you will get only it is
13:03 - printing to the size it is not printing
13:05 - this this symbol why so because this
13:08 - output this console is not compatible to
13:10 - print these kind of things international
13:12 - symbols and these languages limited
13:14 - things it can print but
13:16 - it has
13:17 - the num this the symbol has been stored
13:20 - for sure in the memory in two bytes of
13:22 - the memory right now if you want to
13:24 - print the decimal value of this symbol
13:25 - then just type cast this and write down
13:29 - int
13:31 - right now let me just run this and see
13:34 - it is printing 284
13:36 - 284 is the decimal
13:40 - you know number for this symbol like for
13:42 - a the decimal is 65 for this decimal is
13:45 - 284 as you can see in the table this
13:49 - they see 280 and
13:51 - from above we have fourth column so 284
13:54 - right
13:56 - or if you want to check the character in
13:58 - coding and you can then unicode encoding
14:00 - of the character then we have a
14:02 - character map you just search in the
14:04 - search bar character map this is inbuilt
14:06 - app
14:07 - and you can see you can select anything
14:09 - see and here you will see the unicode
14:11 - encoding u plus 0 0 d6
14:14 - right so for a
14:17 - for capital a let's see the unicode
14:19 - encoding is u plus zero zero four one
14:21 - and the decimal is what
14:23 - sixty
14:24 - five
14:26 - so this is how you can use this wide
14:27 - character type it's not for character
14:30 - it can be used to uh store the string
14:34 - you know white character string also
14:35 - right and as for simple string we have
14:38 - some predefined functions to find out
14:40 - string lines like strle and you can
14:46 - to concatenate two strings
14:50 - so for wide character strings also white
14:52 - strings also we have predefined
14:54 - functions
14:55 - those also we will discuss in later
14:57 - videos like what are those predefined
14:59 - functions the header file you have to
15:00 - include and how to use those functions
15:02 - and on this video just to give you an
15:03 - overview about this wide character type
15:05 - i hope this is clear to you guys now now
15:07 - you can
15:08 - you can from unicode table you just
15:11 - copy paste a symbol you can just store
15:13 - that symbol and see what it is printing
15:15 - the decimal value of that symbol and all
15:18 - right
15:19 - so in the next video we will see the
15:20 - remaining built-in data type in c plus
15:22 - so now i'll see in the next video till
15:24 - then bye take care