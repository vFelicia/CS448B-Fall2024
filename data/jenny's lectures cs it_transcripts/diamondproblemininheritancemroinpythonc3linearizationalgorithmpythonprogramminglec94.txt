00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series programming
00:04 - language we have completed our
00:06 - inheritance Concept in Python what is
00:08 - inheritance and types of inheritance we
00:10 - have discussed right but small but one
00:13 - thing is still remaining in this
00:15 - inheritance we have a
00:17 - Diamond problem and inheritance classic
00:19 - Diamond problem especially in multiple
00:21 - inheritance now that thing we'll discuss
00:24 - in this video what is this problem
00:25 - Diamond problem why they suffer right
00:29 - and how to solve this problem
00:31 - which method python used to solve this
00:34 - problem what is mro Method resolution
00:36 - order which algorithm the mro use to
00:40 - find out the order like C3 linearization
00:42 - algorithm right so in detail we will see
00:45 - that algorithm as well right it's not
00:48 - like that on simply on your laptop just
00:49 - you can just use that tribute you know
00:52 - that
00:53 - this attribute underscore underscore mro
00:55 - underscore underscore or maybe mro
00:58 - function
00:59 - so you will get the mro but how you are
01:01 - getting that mro what is behind the
01:03 - scene
01:05 - what is the algorithm the working that
01:07 - also step by step I'll show you right
01:10 - okay now let's see first of all what is
01:12 - this classic Diamond problem see
01:17 - this thing we have seen this is Hybrid
01:19 - inheritance right
01:22 - this is what hierarchical and this is
01:25 - what multiple inheritance so this is
01:28 - basically
01:29 - this type of structure as you can see it
01:32 - is somewhat like a diamond right and
01:34 - here what is this problem if suppose I
01:36 - am having same method like maybe show
01:40 - in this parent method and as well as
01:42 - show in this child also and this child
01:46 - one has overridden this method right and
01:49 - suppose show in this child too as well
01:52 - and this also has overrid in this method
01:54 - now this child three is inheriting from
01:58 - Child one as well as from Child two
02:00 - these two are parent of child three
02:03 - so
02:05 - so you would be confused which method it
02:07 - will inherit using the object of child
02:10 - three which method should be cold this
02:13 - method or this method
02:15 - or the parent method because ultimately
02:17 - this is we can say like maybe
02:19 - grandfather type of thing right so from
02:22 - there also it is inheriting
02:25 - right so now style 3 is in confusion
02:29 - which method it is going to call or
02:32 - inherit this or this if they have
02:34 - overridden this method if they are not
02:36 - having any show method any show method
02:38 - so it will inherit from show here right
02:41 - fine
02:43 - okay now to solve this problem in Python
02:46 - it is not a big problem basically we use
02:49 - mro method resolution order to solve
02:52 - this problem
02:53 - right now what is this mro it is just a
02:57 - method or you can say to get the order
02:59 - in which the derived class will inherit
03:03 - or will call the attributes and methods
03:05 - from the base classes or you can say
03:09 - from the hierarchy of classes in which
03:11 - order
03:12 - the drive class is going to inherit if
03:14 - it is inheriting from multiple glasses
03:16 - right let's suppose if in my class I
03:20 - just give an assignment
03:21 - right and I asked all the student to
03:24 - submit that assignment tomorrow only
03:26 - so on the next day everyone is
03:29 - ready with their assignment right and if
03:32 - everyone like comes to me ma'am my
03:35 - assignment my assignment then it would
03:37 - be very hectic for me like from from
03:41 - whom I am going to accept the assignment
03:43 - first because everyone is present here
03:45 - right to solve this problem like the
03:48 - order
03:49 - to solve this problem what I can say
03:52 - like I'll say please be seated at where
03:54 - you are at your seats and I'll call
03:57 - according to I'll call your roll number
03:59 - and according to that you will come and
04:00 - submit your assignment it means first
04:01 - I'll uh say roll number one roll number
04:04 - one one will come and submit his or her
04:07 - assignment then roll number two then
04:09 - roll number three
04:10 - normal four like this so I have used the
04:13 - roll number technique the method right
04:16 - to solve this problem fine same kind of
04:19 - thing in programming
04:22 - because assignment is like you can say
04:24 - it's same same method or same attribute
04:27 - I am going to access from all the
04:28 - students right so same method is in all
04:32 - the parent as so the derived class this
04:35 - child class will access method from
04:37 - which parent to solve this problem this
04:41 - is basically this confusion is classic
04:42 - Diamond problem
04:44 - and because of the shape it is Diamond
04:46 - like that is why it is known as Diamond
04:47 - problem and this is an interview
04:49 - question as well but
04:51 - in some language like in Java Java don't
04:55 - support multiple inheritance because of
04:56 - this problem only
04:57 - they use that interfaces concept right
05:00 - but in Python and it would be resolved
05:03 - easily with the help of this technique
05:04 - mro
05:06 - right
05:07 - now I have told you mro is what
05:10 - mro is used to get the order in which
05:13 - the methods or attributes are to be
05:15 - inherited
05:17 - from the hierarchy of classes in case of
05:19 - multiple inheritance because this
05:21 - problem especially arises when we use
05:24 - multiple inheritance in your program
05:26 - right okay now let me just show you
05:29 - practically this thing this class and
05:33 - how Mr is going to solve this problem
05:34 - right and then we will discuss
05:37 - Right Now the default algorithm which is
05:39 - used to solve this problem in this mro
05:42 - in this mro this mro use C3
05:45 - linearization algorithm to get mro now
05:49 - what is this algorithm and how we are
05:51 - going to get this thing that also I will
05:53 - show you right let's see practically
05:55 - okay so let's create a new file here
05:59 - Diamond problem dot py right and let's
06:02 - take this example only
06:05 - we have class A
06:06 - having display function display from a
06:09 - class class B
06:11 - it is inheriting from a class class C as
06:14 - well suppose inheriting let's just
06:16 - modify a little bit from a class right
06:19 - it is having display and it is having
06:21 - show as well as let's say it is having
06:26 - display
06:29 - show is going to show like hi from
06:31 - C-Class and display display from sorry
06:35 - not b class it's from C class now class
06:38 - D is hiring from both B and C
06:41 - and suppose it is not having any any
06:44 - display function
06:46 - so let's just write down here pass
06:49 - okay now with the help of this D1 object
06:51 - with the help of this D1 object I want
06:54 - to call display function so which
06:57 - display it is going to call from b or
06:59 - from C
07:00 - because both are parent of this
07:03 - class this what we can say d class right
07:07 - so this problem can be solved in Python
07:10 - with the help of mro method resolution
07:11 - mode so it will first search
07:15 - what is the first parent is B so it will
07:18 - search in first of all it will search in
07:19 - B we are not having any method display
07:22 - in B so it will search the first parent
07:24 - is B so it will search in b
07:26 - we are having display yes so it will
07:29 - exist it will inherit this display
07:32 - right that's it
07:34 - so let's run this
07:36 - so display from b class it is inheriting
07:39 - from B Class
07:42 - and suppose I'm not having this display
07:45 - in b class
07:46 - in that case pass
07:50 - now first you will Search in b there is
07:52 - no display then it will search in C
07:56 - it will not go deeper it will not go in
07:59 - the parent of p no
08:01 - the latest technique is switch through
08:03 - linearization that is what it follows
08:06 - left to right first then go deeper and
08:10 - previously deeper means depth first then
08:13 - left to right
08:15 - right so if I run this then it will
08:17 - display from C C Class
08:21 - right in B we are not having
08:23 - in the first parent we are not having
08:25 - display then in Search and C if in C as
08:28 - well I am not having
08:30 - then left to right there is no display
08:33 - then it will go deeper means deeper
08:35 - means
08:36 - the superclass of this B and C super
08:39 - class is a now it will go to a see
08:42 - display from a class right so with the
08:45 - help of mro you can solve this problem
08:47 - so if you want to print the mro of this
08:50 - class for D class then with the help of
08:53 - this function or with that Prof
08:55 - attribute we are having this attribute
08:58 - as well as like this this field Mr with
09:02 - the help of this attribute also you can
09:03 - print the mro see
09:06 - first D then B
09:09 - then C then e then object class like o
09:14 - cluster object class
09:15 - let's take a complex example and then
09:18 - I'll show you step by step
09:20 - what is
09:21 - you know going on behind the scene how
09:23 - we are getting this mro like this what
09:26 - are the steps of this algorithm what is
09:27 - the C3 linearization algorithm right
09:30 - step by step I'm going to show you with
09:31 - help of a complex example I hope you
09:33 - will get it right so if you want to go
09:36 - deeper if you want to understand what is
09:38 - the behind the scene process of this mro
09:40 - the algorithm the steps of that
09:43 - algorithm then you can continue to watch
09:45 - this this video otherwise for you that's
09:47 - it
09:48 - right okay let's take this example I am
09:52 - having Class A B C D E and F class is
09:55 - deriving from ABC then G class is
09:58 - inheriting from dbe then H class from d
10:01 - a and then finally Z class from f g and
10:05 - H right so if it is having you know
10:10 - obviously multiple inheritance and many
10:12 - type of inheritance so
10:14 - if you want to access some method with
10:16 - the help of this object of this Z Glass
10:18 - then what is the mro the method
10:21 - resolution order first in which class it
10:23 - is going to search then this then this
10:25 - with the help of mro attribute or mro
10:28 - function you can easily find out but
10:29 - what is behind the scene what is the
10:31 - algorithm the steps right
10:34 - please don't write down the comment
10:35 - section like the syntax is correct and
10:37 - there should be call and then bars
10:39 - column pass okay now let's just draw
10:43 - first uh diagram of this thing so I'm
10:48 - just starting from here the last class
10:51 - is z
10:53 - so Z is inheriting from f g and H so
10:57 - this order is also very important this
11:00 - is one known as local precedence
11:02 - order right and your amp the algorithm
11:06 - or the technique you use to find out mro
11:08 - that should follow this local precedence
11:11 - means first
11:13 - if
11:15 - given the help of object of uh Z class
11:17 - you want to access something then first
11:19 - it will search in this order in this
11:22 - declaration order F then G then H this
11:24 - is local precedence order right second
11:27 - thing which is important that should
11:30 - follow by the algorithm which is used to
11:32 - find out MRI result monotonicity now
11:35 - what is monotonicity see if the class we
11:39 - have a class C
11:40 - and Base Class of C is even and Base
11:43 - Class of C1 is C2 so if you find find
11:46 - out the mro of C the method then it
11:50 - would be first you will search in C then
11:52 - in C1 then in C2 something like this
11:55 - so if this C1 class is before C2 class
12:00 - when you are going to find out
12:03 - the Precedence order of the mro of C
12:06 - if C1 precedes C2 while finding the mro
12:10 - of C then definitely C1 proceeds C2 if
12:15 - you want to find out mro any subclass of
12:19 - this C
12:21 - if you have any sub class or C like Z
12:23 - and if you want to find out the z Mr of
12:26 - Z then definitely it would be Z then C
12:28 - then C1 then C2 C1 is before C2 in this
12:31 - also in this also this is type of
12:33 - monotonicity it's not like that for Z
12:36 - first C2 then C1
12:39 - it will
12:40 - create problem right so I hope now you
12:43 - got what is local precedence order and
12:45 - what is monotoncity
12:46 - so these two rules should be followed by
12:50 - the algorithm which is used to find out
12:52 - the mro and which algorithm is used by
12:55 - default in Python 3 is C3 linearization
12:58 - right now what is this algorithm
13:03 - I'll tell you and how this is different
13:04 - from the what was used
13:07 - before uh you know python 2.3 an old
13:12 - style technique to find out mro
13:14 - that was many problems right
13:18 - so
13:19 - we have first Z now is that f g f so in
13:24 - this order only I'll write in the
13:26 - diagram as well f g and H not like h g f
13:32 - something like this right then
13:36 - for fabc so a b c
13:44 - f is hiring from ABC left to right in
13:46 - this order then G is hiding from d b e
13:51 - so B after B we are having e so let's
13:54 - suppose here we are having e and before
13:56 - D is before B so let's write down B here
14:01 - so d b
14:04 - e then for h d a so D and A
14:10 - that's it or one more thing because we
14:13 - know object class
14:16 - or simply you can write down here oh
14:19 - it is root for all the classes by
14:21 - default in Python 3. right so you can
14:25 - write down something like this like here
14:27 - object
14:28 - or simply o or if you don't write that
14:31 - is also fine automatically it will
14:32 - inherit from object class right
14:34 - now this is the diagrammatic
14:36 - representation now how to find out mro
14:40 - of Z what is that C3 linearization
14:46 - algorithm how to find out let's see the
14:49 - steps
14:51 - if you find out linearization of Z then
14:55 - please watch carefully then
14:58 - Z Plus
15:01 - the name of that class plus merge
15:03 - function we are going to use
15:06 - in this see through linearization
15:07 - algorithm right merge then linearization
15:11 - of all the
15:13 - super classes of this Z then
15:17 - linearization of l means linearization
15:19 - of superclass of Z is what F G H so F
15:25 - comma
15:27 - G comma
15:29 - H and then list of super classes fgh in
15:35 - the same order
15:36 - in which we have written like fgh here
15:39 - right
15:40 - okay now obviously we have to find out
15:44 - first linearization of f linearization
15:47 - of f so first find out this F same
15:50 - technique write down f plus
15:53 - merge of linearization of all the base
15:57 - classes of f based classes of f it's a b
16:00 - c
16:01 - it's a b and
16:05 - C
16:07 - right and just write down list of all
16:10 - the base classes ABC
16:13 - okay now linearization of a okay now
16:17 - linear linearization of a is what means
16:20 - with the help of a object if you want to
16:21 - access the method then from first it
16:24 - will search in a then
16:26 - in its Base Class so Base Class of a is
16:29 - object class only right so from diagram
16:32 - only we can just find out
16:34 - L of a is what a o
16:37 - no need to write down this one or if you
16:39 - want to write down then you can just
16:41 - write down like L of a is equal to a
16:43 - plus
16:45 - merge linearization of
16:48 - o and
16:50 - o
16:53 - both are object objects so it could be
16:55 - only sorry yeah only so it it would be a
17:00 - and o that's it
17:04 - right
17:05 - okay
17:12 - so just write down here f plus
17:15 - merge hello phase a o
17:20 - L of B is obviously B O then C O and
17:24 - then a b c now we have these list list
17:28 - of mineralization of a then this list
17:31 - this list this list I'm not writing down
17:33 - like this particular list
17:35 - okay but these are lists fine now have
17:39 - the submerged function works
17:42 - so first of all take the first list and
17:45 - mark the first
17:47 - element of the list as head
17:50 - so K is what head first step is this
17:54 - second step is you have to find out it
17:56 - is a good head or not now how to find
17:58 - out if this a see this a is head and
18:04 - whatever after this a that is tail of
18:07 - the list here only o so this is tail of
18:10 - the list here B is head this is tail C
18:14 - is head this is tail a is head BC tail
18:18 - BC both are 10 not like only C is tail
18:22 - no
18:23 - except head except the first element all
18:26 - the elements are 10 if there are three
18:28 - four five elements right so now a is
18:31 - head second step is
18:34 - if the head
18:36 - is present
18:37 - in the tail of any other list
18:41 - then it is not a good head and we cannot
18:44 - take it
18:45 - so here a is Mark as head is it present
18:49 - in the tail of any other list no so it
18:52 - is not present means it is a good head
18:55 - okay now head we have got an A's head
18:58 - now if it is a good head third step is
19:00 - if it is a good head then
19:03 - just you have to add this here in the
19:06 - mro
19:08 - that class like suppose F then add to
19:11 - this mro that was at the beginning of
19:14 - this line F A Plus
19:16 - and remove this from all the list so
19:21 - remove the say here o b o c o and BC
19:26 - only
19:27 - okay
19:29 - now if you have done this
19:33 - it's okay then take the second
19:36 - element and same step if it is not a
19:40 - good head suppose a was not a good head
19:43 - in that case what you will do next step
19:45 - is
19:46 - switch to the next list Mark the first
19:48 - element as head
19:50 - and same process you have to repeat
19:52 - check if it is in the tail of the other
19:55 - list
19:56 - right if it is present then it is not a
20:00 - good head then switch to next list and
20:02 - like this right okay now like this now
20:05 - next is o
20:11 - so it is not a good head so switch to
20:13 - next list first element is B so mark it
20:17 - as head is it present in the tail of
20:20 - other list no so B is good head if it is
20:22 - good head just remove this
20:24 - and add here in the mro f a b plus
20:28 - as well as remove this B from the all
20:31 - the list o c o c
20:36 - B was done now next is rho is it the
20:39 - tail of other list yes so it is not a
20:42 - good head
20:43 - move to the next list C now C is
20:47 - present in the tail of other list no so
20:50 - let's
20:51 - consider C is a good head so f a b c
20:56 - plus
21:00 - and this is what object so that is why
21:02 - merge of the show is only so finally f a
21:06 - b c o this is linearization of f class F
21:11 - class
21:13 - f a b c o
21:17 - right okay now if you got this
21:23 - then you have to find out linearization
21:25 - of
21:27 - G and H it is up to you same step you
21:31 - have to repeat for G and H right I'm
21:35 - directly write down the algorithm the
21:36 - linearization of G and H because finally
21:39 - we will find out this Z if you haven't
21:41 - got this thing you can pause the video
21:43 - you can rewind the video you can watch
21:45 - this again right okay
21:49 - okay so this is linearization of f the
21:52 - list this is for G this is for H I hope
21:54 - you got this one correct right
21:57 - okay now you have to find out for Z so Z
22:00 - Plus take the first list consider f as H
22:05 - head Now find out f is in the tail of
22:07 - other list tail of this list is this one
22:10 - d b e o d a o for this GH is it present
22:15 - in the tail of other list no so z f plus
22:19 - just remove this from
22:22 - everywhere so f a a b c o then Z j d b e
22:28 - o
22:29 - h d a o
22:31 - and remove this F as well as GH now this
22:35 - is remaining take the next element a
22:37 - mark it as head now check if it is
22:41 - present in the tail of other list
22:42 - tail of this list is no yes d a o it is
22:46 - present in the tail of this list so it
22:48 - is not a good head so we cannot take
22:50 - this
22:51 - if it is not a good head then jump to
22:54 - the next list and consider G as n now J
22:58 - is present in the tail of other list
23:01 - no so yes G is good head so
23:05 - just add G here in the mro Z and remove
23:10 - this G from the
23:12 - list
23:14 - h d e o and here we have now h of B
23:18 - right now G was done now next is D so is
23:23 - D present in the tail of other list yes
23:25 - D so D is not a good head
23:28 - okay switch to the next list now
23:31 - consider H as head is it present in the
23:34 - tail of other list no so it is good head
23:37 - so z f g h plus
23:41 - merge a b c o
23:48 - then remove h
23:51 - d a o right now next is D now D is
23:56 - present in the tail of other list
23:58 - Plus
24:06 - merge
24:13 - a b c u just remove this d b e o and a o
24:18 - now next is
24:21 - B we have removed
24:23 - after Edge it was D now X is a is a
24:27 - present in the tail of other list
24:30 - you know so take
24:32 - this a as well as d a and remove this
24:37 - from there remove this from a here also
24:40 - a is here so b c o b e o and O from
24:45 - every list you have to remove that
24:46 - element that was head and removed from
24:49 - here now after it is o o is present in
24:51 - the tail of other list yes now move to
24:54 - the next place next is BCU back now take
24:57 - B is we present in the tail of other
24:59 - list no so B is
25:01 - good head so remove this
25:05 - see B is present here but it is head I
25:07 - have told you the first element is head
25:10 - other than first every element is a so
25:13 - EO is T so just remove this
25:17 - c o e o and O
25:20 - now after B we have C from here we were
25:24 - taken like B then C is C in the tail of
25:27 - other list no so Z same thing same thing
25:32 - you have to repeat now C plus merge o u
25:37 - and O next is o o is in the tail of
25:40 - other list yes move to the next list e
25:42 - yes you can take e and after e
25:45 - definitely o so that would be O So
25:48 - finally we will get z f g h d a b c then
25:54 - e then four
25:56 - this is the mro
25:59 - for Z in this diagram
26:03 - with the help of this c three
26:05 - layerization technique which is by
26:07 - default in Python this is by default is
26:10 - used in Python 3 right
26:12 - so see if you see from this diagram then
26:15 - this is z f g h d a b c e o so it is
26:21 - left to right
26:23 - then
26:25 - in deep you are going
26:28 - so this technique use this thing the new
26:32 - one
26:36 - if it is not present in any of the class
26:39 - from left to right then go deeper
26:42 - right but in old style the technique was
26:45 - first depth first then left to right
26:50 - in older technique the problem was if I
26:53 - have something like this a b c let me
26:55 - just take a simple example D so if you
26:58 - want to find out Mr of D then it would
27:01 - be D then B then not left to right first
27:05 - deeper we will go parent of B that is a
27:09 - then finally if you consider O then you
27:13 - can consider here o but I'm not
27:15 - considering Arrow object class then C
27:18 - then a then a r 2 time so in old style
27:22 - just remove this one
27:24 - right and after that a new style was
27:28 - also introduced there it was
27:32 - if this is the case then remove this one
27:35 - first one so dbce but this also you know
27:39 - uh having some problem that is why a new
27:41 - technique was introduced that is C3
27:43 - linearization algorithm and that follows
27:45 - these things like monotony City Rule and
27:48 - local precedence order while finding out
27:51 - the mro
27:52 - but there are still many things left
27:55 - about mro method resolution order right
27:58 - it's very you can say vast concept but
28:02 - if you want to go in deep you can just
28:03 - go to Google and you can find out
28:05 - different different examples and many
28:07 - things that is why I have here taken a
28:10 - complex example so that you can get this
28:13 - algorithm the steps of this algorithm
28:15 - you know clearly I hope you heard this I
28:19 - have tried my best right so this is all
28:21 - about Diamond problem how to solve this
28:22 - problem in Python and the C3
28:25 - linearization technique and all right
28:28 - so now I'll see you in the next video
28:30 - till then bye