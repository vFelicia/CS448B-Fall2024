00:00 - so in the series of learning programming
00:01 - in c we are discussing some programs on
00:03 - strings some predefined functions um you
00:05 - know that we can use on strings in this
00:07 - video we'll talk about a program in
00:09 - which we'll convert a string which is in
00:10 - uppercase letters to lowercase letter
00:12 - and the function which is used the
00:14 - built-in function which is St Str LW lwr
00:18 - this is a function which is used to
00:20 - convert uppercase string which is
00:22 - written in uppercase to lowercase
00:24 - letters right but see you need you need
00:27 - to take care of one thing this is not
00:29 - you can say it's a standard function
00:31 - right because on some compiler it is not
00:33 - going to run it will give you an error
00:34 - like undefined reference to this
00:36 - function right like Str Str Upper St Str
00:40 - upper this function uh this function
00:42 - also and Str Str reverse St St strr some
00:47 - functions are there which are you know
00:48 - we can use in older version of Microsoft
00:52 - C right these are not we can say more
00:55 - precisely if I say that we cannot say
00:57 - these are standard C functions so if it
01:00 - is not running on your system maybe it's
01:03 - because of your compiler it is not going
01:05 - to run is on GCC compilers right now see
01:09 - we'll see this function as well as we'll
01:11 - write down our own function we'll not
01:13 - use this function and we'll write down
01:14 - write down our own function our own
01:16 - logic to convert uppercase to lower case
01:18 - so now what I want suppose a string is j
01:23 - eou n y and I have written this in upper
01:26 - case so I want that output should be in
01:29 - lower case j e n y yes this thing you
01:32 - want but suppose I input something like
01:36 - this j
01:38 - e n and
01:40 - y these two are
01:42 - small then also obviously out output
01:45 - would be this J would be converted to
01:47 - small j e is what small e so no need to
01:51 - convert as it is e then n would be
01:53 - converted this n would be as it is and Y
01:56 - would be converted right and if I write
01:58 - something like this Jenny 1 2
02:02 - 3 1 2 3 these are numbers these are not
02:05 - uppercase letters so the output should
02:07 - be Jenny 1 2 3 number should be exactly
02:11 - same I hope you getting my point if
02:13 - you're using any special symbol like I'm
02:15 - using
02:16 - hash in output also you know we want
02:20 - hash right because that is not any
02:22 - uppercase letter it's special symbol or
02:24 - you use something like this plus you are
02:26 - using then here also I want plus star
02:29 - you are using then star should be in the
02:30 - output only we we want to convert
02:34 - uppercase letters into lowercase
02:37 - letters right this we need to take care
02:40 - while we will write our own logic right
02:43 - now let me write down the program we'll
02:45 - use that function Str
02:47 - Str string lower Str Str
02:50 - lwr now what is the prot of this
02:53 - function this is defined in which
02:56 - Library string. H header file right so
02:59 - now
03:01 - it is going to take one
03:04 - argument care a pointer to string this
03:07 - Str Str is what the string which you
03:09 - want to convert to lower case a pointer
03:12 - to that string and what would be the
03:14 - output of this one I mean the what it
03:17 - will return a pointer to the modified
03:20 - string like care
03:23 - star a pointer to modified string
03:27 - modified string is suppose this is I'm
03:29 - taking St R and in Str Str I have j
03:33 - e n
03:36 - y this is what Str Str right obviously
03:40 - this Str Str name is acting as a pointer
03:42 - to the string so now it will return what
03:45 - now after converting this will become
03:48 - small J small n and small y so modified
03:54 - string so it will return a pointer to
03:56 - this modified string so simply you can
03:59 - print this Str Str and you'll get this
04:01 - output right this prototype of this is
04:04 - very simple right now see how you will
04:08 - use this if you use predefined function
04:10 - it's very simple to write down this
04:12 - program suppose a string is I'm taking
04:19 - here this string I'm taking right so
04:23 - simply use St Str
04:25 - lwr pass the name of the string that is
04:28 - S1 this is s s
04:30 - 1 right and simply
04:35 - print S1 that's it and you will get J
04:40 - small case letters J would be small T
04:43 - would be small and other letters are
04:45 - already small right I guess you got it
04:48 - but if you are not using this Str Str LW
04:52 - lwr function or if you want to convert
04:54 - lower case to uppercase then the
04:55 - function is St Str
04:58 - UPR
05:00 - right but we are going to write down our
05:03 - own logic here so here I'm storing this
05:07 - something like
05:11 - this this is a string this is memory has
05:15 - been allocated the character array is
05:16 - from 0 to 29 like 30 bytes memory
05:19 - allocation in which we have J only and
05:21 - after the completion of the string we
05:23 - have null character so this is string
05:25 - this complete is character array S1 is
05:26 - name of the string which is containing
05:28 - Base address of this director ARR I
05:31 - guess that that is fine now how to
05:34 - convert see we
05:37 - cannot how you can convert see first of
05:39 - all think how you will convert obviously
05:42 - we will store this character using a
05:44 - character system what what is it Sky
05:47 - character system in computer using Sky
05:50 - character system
05:52 - right fade marker let me refill this
05:56 - first so now see SK value SK I value of
06:00 - capital letters capital A is 65 B is 66
06:05 - and something like this Z is having 90
06:08 - small a is having what 97 B is having 98
06:12 - and something like this Z is having what
06:15 - 122 I guess
06:17 - right now see how you will convert what
06:21 - logic you can write it's not like that
06:22 - simply you can check if this is capital
06:25 - letter convert it into small letter you
06:28 - have to tell the compiler we have to
06:29 - write down some logic some some maybe
06:33 - some addition multiplication or
06:34 - something we have to do some
06:35 - modification we have to do so based on
06:38 - Sky numbers we can do some modification
06:40 - right that is one
06:42 - way see the relation find out the
06:45 - relation between capital letter and
06:46 - small letter first of all then obviously
06:49 - you will get the idea right so what is
06:52 - the relation in 65 if you
06:55 - add
06:57 - 32 then you will get get 97 and 97 is
07:01 - small
07:03 - a same in 66 also if you will add 32 you
07:08 - will get
07:09 - 98 in 90 you will get 32 you will add 32
07:13 - you will get
07:15 - 122 so that's the simple logic you have
07:17 - to
07:18 - apply if the letter is any character is
07:23 - uh Capital just add 32 in the SK Sky
07:26 - value and you will get small
07:28 - letter right but it's not like that
07:31 - simply add access this character and
07:34 - simply add 32 access this simply add 32
07:37 - no we have to check if uppercase letter
07:42 - then only add 32 now this a is what
07:44 - small letter if you will add 32 in this
07:47 - case then you will get some other
07:50 - character maybe some special symbol and
07:52 - that's we don't want right so you have
07:55 - to put some condition also before adding
07:57 - 32 if any special character is there
08:00 - like I'm having here special character
08:02 - um uh this one I'm having one jenty one
08:07 - so if you add 32 in Sky value of one
08:11 - then obviously you will get some other
08:13 - like 33 you will get and that is SK SK
08:15 - value of some other special character
08:17 - and that you will get in output then
08:18 - that we don't want we want output one
08:21 - only only uppercase letter should be
08:23 - converted into lower case so you have to
08:25 - put some condition also you got it now
08:28 - what condition we can put C obviously we
08:31 - will will Traverse one by one we will
08:33 - see the character from here till null
08:37 - I'm writing here
08:40 - Star right this is our string I'm
08:43 - modifying the string now we are going to
08:45 - Travers obviously from this to this so
08:48 - write down a for loop I would be zero
08:51 - till null character we are going to
08:54 - Traverse the string we are going to
08:56 - check the characters character by
08:57 - character we are going to check the
08:58 - string right so the condition should be
09:01 - S1 of I not equal to
09:05 - null till then we will enter into this
09:08 - for Loop and we will do some
09:10 - modification as soon as we reach to null
09:13 - exit from the for Loop and just print
09:15 - the modified string right so this should
09:17 - be the should be the condition and I
09:21 - ++ right maybe you can write down some
09:24 - condition in some other way also like
09:25 - find out length of the string and that
09:27 - you can put as a condition it's not like
09:29 - that that is the only way to put the
09:31 - condition here that is only one way
09:33 - right there are multiple ways to write a
09:34 - single uh program
09:37 - right now here what we have to do we
09:40 - have to add 32 in these characters but
09:43 - based on some condition what can be the
09:45 - condition
09:46 - if have to check if S1 of
09:50 - I S1 of I is between A to Z then only we
09:56 - are going to add 32 greater than equal
10:00 - to SK value of a is
10:03 - 65
10:05 - and S1 of I less than equal to SK value
10:10 - of capital Z is
10:13 - 90 if the character is between this to
10:16 - this then only we will add s so5 +
10:21 - 32 and after adding store at s SOI only
10:26 - because we are we are going to modify
10:28 - this only
10:31 - right and that's
10:33 - it and after this for Loop you can
10:36 - simply print percentag s and
10:41 - S1 or if you say like we don't remember
10:43 - SK SK value of a to z that is also fine
10:46 - you can simply write a and z but you
10:48 - cannot write here a because a is
10:50 - character so write here uh single quotes
10:54 - a and here capital z in single quote
10:58 - automatically it will will check you
11:00 - know it will take that SK value that is
11:02 - also fine right now I guess that's it
11:06 - now see let me run this program first of
11:08 - all I
11:09 - is
11:11 - zero sorry I is zero now s105 S1 of0 S1
11:17 - S1 is this this string S1 of Z index is
11:21 - this is this null no not equal to null
11:25 - yes condition true enter here now check
11:28 - S15 s of 0 greater than equal to
11:31 - a j yes it is greater than equal to
11:35 - greater than a as well as you have to
11:38 - check this condition also it should be
11:41 - less than
11:42 - Zed right otherwise it will give some
11:46 - other output so that is why I'm using
11:48 - logical end don't use logical or
11:50 - operator otherwise it will not give you
11:51 - correct output right so S1 I zero yes it
11:57 - is less than uh Z both the conditions
12:00 - are true then only we are going to
12:03 - enter Then only it is supposed to be
12:05 - true because it is logical end if any
12:08 - one of this is false it is false right
12:12 - now S1 of I S1 of Zer that is in J we
12:15 - are going to add 32 so whatever the SK
12:17 - value of J there we will add 32 and we
12:20 - are going to store in si in si I zero
12:24 - same hair we are going to store so it
12:27 - becomes small J
12:30 - right I ++ I becomes
12:34 - 1 s i of 1 it is what a small a not
12:39 - equal to null yes true enter now see S1
12:43 - of
12:44 - 1 S1 of 1 is a is small a greater than
12:50 - equal to this a see now here it is true
12:54 - because small a is having SK value 97
12:57 - capital A is having 6 5 yes uh 97 is
13:01 - greater
13:03 - than uh what
13:05 - 65 condition true yes condition true but
13:10 - again check and this one is now this is
13:13 - I now small a less than equal to
13:18 - Z Zed is having SK value 90 is 97 less
13:23 - than 90 no this condition is not true so
13:27 - if any this this is true
13:29 - this is false so ultimately this would
13:32 - be false so now we are going not going
13:34 - to enter here that is why I'm saying use
13:37 - logical and not logical or if here you
13:40 - use logical or this condition is true so
13:42 - it will directly enter here and it will
13:44 - add 302 in small a also then you will
13:46 - not get correct output so it is not not
13:49 - going to enter now now I becomes two now
13:51 - it will check for S2 and like this I
13:54 - guess you got now you can dry run this
13:56 - completely at your own no need to to do
13:59 - this and once you reach here null now
14:04 - the condition is not true exit from the
14:06 - for Loop and simply print S1 that would
14:08 - be modified
14:10 - S1 right in STO star also it is not
14:13 - going to add anything because star is
14:16 - having some know ski value that is not
14:19 - between a to zed between 65 to
14:25 - 90 right so it is not going to enter
14:27 - here and not going to 32 so as it is
14:30 - star would be printed at your you know
14:32 - at your output screen that's exactly you
14:34 - want right now let me run this program
14:37 - on my laptop okay now let me create a
14:42 - file
14:44 - string lower do c
14:51 - right include header
14:57 - files then we'll write what
15:00 - um main
15:03 - function and here I'm going to take
15:06 - string S1 and size is 30 but I'm not
15:10 - going to initialize here we'll be
15:13 - initializing it run time so I'm asking
15:16 - enter
15:18 - string right and we'll use get S
15:23 - S1
15:26 - right and now simply St Str lwr this one
15:31 - name of the string is this one just pass
15:33 - this
15:34 - function and simply
15:36 - print
15:40 - now string
15:43 - is I'm printing percentage s and name is
15:49 - S1 right and that's it now let me run
15:53 - this
15:54 - program and it should ask see enter
15:57 - string
15:59 - so I'm entering string here in caps j e
16:04 - n n y
16:09 - and right and see it is converting in
16:14 - small letters right some are small
16:17 - letter and some are capital letter which
16:19 - I'm providing the input right so uh now
16:22 - see that is very simple to write down
16:25 - here but let me write down our own logic
16:27 - here we will not use use this um this
16:29 - function so a for
16:32 - loop I is equal to 0 and then S one of
16:39 - what I not equal
16:43 - to I guess
16:46 - null
16:49 - right this is the condition fine and I
16:53 - ++ and within this four Loop just check
16:56 - the condition if s S1 of
17:00 - I uh should be
17:03 - what greater than equal to I'm using a
17:08 - here and logical and S1 of
17:14 - I uh should be less than equal to
17:18 - capital
17:22 - Z
17:24 - right uh
17:27 - it's now here in in within this we are
17:30 - adding what S1 of
17:33 - I should be equal to S1 of I + 32 just
17:40 - add 32 and that's it and after this four
17:43 - Loop just print S1 and now obviously we
17:47 - have to take before using this I we have
17:50 - to declare int
17:52 - I right let me run this
17:56 - now and string I'm entering here 1 2 j e
18:02 - n n y and hash then k h a t r
18:09 - i see output you are getting same one
18:13 - two Jenny hash as it is and katri would
18:16 - be in small
18:19 - letters right so that's it so in the
18:23 - next video you'll see one more program
18:25 - on string now I'll see you in the next
18:26 - video till then bye-bye take care