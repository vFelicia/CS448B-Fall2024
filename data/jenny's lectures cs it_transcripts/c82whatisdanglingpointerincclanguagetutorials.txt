00:00 - so in this phase of learning programming
00:01 - in c we are discussing some special
00:02 - pointers in c we have discussed void and
00:05 - null pointer in this video i'll talk
00:06 - about dangling pointer everything about
00:08 - this pointer like what is dangling
00:10 - pointer the cause of dangling pointers
00:12 - and how to get rid of the situation how
00:14 - to get rid of dangling pointers and if
00:15 - dangling pointer comes in your program
00:17 - then what type of error you can get
00:20 - we will discuss with the help of program
00:22 - or you can say with example i'll show
00:23 - you code also on my laptop right but
00:26 - before that i just want to tell you one
00:27 - thing if you are preparing for gate
00:29 - examination or will be preparing for
00:31 - gate examination then an academy is
00:33 - going to conduct a combat it's like
00:36 - india's largest weekly you know
00:38 - competition for gate aspirants so you
00:39 - can see weekly scholarship test for gate
00:41 - aspirants
00:43 - here it would be on 29th of august the
00:46 - time limit would be 60 minutes and 20
00:48 - questions you will get and the questions
00:50 - has been curated by the an academy's
00:52 - best gate educators so here you will get
00:55 - challenging and original gate questions
00:57 - so better to take it live to compete
00:59 - with the
01:00 - best if you take it live then all india
01:02 - live leaderboard is also there
01:04 - just to you can analyze your ranking
01:07 - using this letterboard because after
01:09 - every questions of this
01:10 - contest it will show your ranking so you
01:14 - know where you are standing among all
01:16 - other you know competitors
01:19 - so you can assess your gate preparation
01:20 - in just 60 minutes and one more thing
01:23 - after every contest detailed video
01:26 - solution would also be given to you by
01:27 - the experts so you can you know you can
01:30 - identify your weak areas and you can
01:32 - improve accordingly and so that you you
01:34 - get it right next time
01:36 - and if you take it live you also get a
01:38 - chance to win some exciting prizes you
01:40 - can also see the detail over here and
01:43 - it's free you don't need to pay anything
01:44 - you just have to enroll for it and use
01:46 - my code jkl10 for enrollment so
01:49 - the enrollment link i'll put in the
01:51 - description box of this video you can go
01:53 - and check out so now let's see what is
01:55 - this pointer before going to the
01:56 - definition directly i just want to show
01:58 - you one example
02:00 - here i am going to use dynamic memory
02:01 - allocation using mallow function right
02:04 - suppose here i am taking a pointer
02:06 - in
02:09 - and dynamically i am going to allocate
02:10 - memory here
02:12 - right so suppose i am allocating memory
02:14 - here
02:15 - this would be syntax of
02:17 - malloc function and here suppose i am
02:20 - writing size of
02:22 - int
02:25 - if you are not getting the syntax its
02:27 - okay we will discuss everything about
02:28 - malloc and kellogg in later videos
02:32 - for this video just you have to you know
02:34 - understand this thing
02:36 - i am going to ask
02:38 - from the malloc function
02:40 - right
02:41 - this is built in function that please
02:43 - allocate me
02:45 - a memory dynamically dynamically means
02:48 - from heap
02:50 - right
02:52 - how much memory size of in size of wind
02:54 - means four bytes means four bytes
02:57 - allocate me four bytes and mellow
02:59 - return void pointer but that is why i i
03:03 - am typecasting it that is why i am
03:05 - writing here in star
03:08 - right because pointer is what type is
03:09 - what in so that is why it is returning
03:12 - word pointer so i am type casting it
03:15 - into in
03:16 - right that that's it this is the you
03:18 - know meaning of this line dynamically we
03:21 - are going to allocate memory to pointer
03:24 - and suppose here
03:25 - uh maybe uh
03:27 - in this memory now
03:29 - in s3 i am storing 10.
03:33 - right so here it's like something like
03:35 - this here we have ptr
03:37 - and dynamically suppose memory has been
03:39 - allocated and sizes
03:42 - size of int that is 4 byte so you can
03:45 - say
03:46 - 4 bytes 1 2 3 4
03:49 - and address is suppose 100 100 and 100
03:52 - 203
03:55 - and it will return word pointer but i
03:56 - have typecasted it so it will return
03:58 - what
03:59 - the obviously the base address of the
04:01 - address of the first byte so 100 has
04:03 - been stored in
04:04 - the address over the first byte has been
04:06 - stored in this point and now pointer is
04:08 - pointing to this memory location
04:10 - i hope you got the meaning of this line
04:11 - now now in a strict ptr means value at
04:14 - this is i'm accessing value
04:17 - at
04:18 - this point in pointer i have 100 so
04:20 - value at 100
04:22 - means here
04:23 - i want to store so i just i'm not
04:26 - representing it something like this i'm
04:28 - representing it with single block size
04:30 - uh sorry address is 100 so i'm storing
04:32 - here 10
04:34 - right now if you want to print like
04:37 - printf
04:38 - and
04:39 - i just want to print a strict ptr
04:41 - whatever the value i want to access this
04:43 - value so it will give you 10
04:46 - right but
04:48 - if after this i have done something with
04:51 - this pointer and after this i want to
04:53 - free this ptr
04:56 - it means
04:58 - it is basically used to free
05:00 - the memory
05:02 - means we have
05:03 - freed this memory
05:05 - now
05:05 - there is nothing here we have freed this
05:08 - memory right we have deleted this memory
05:11 - space we have freed this point
05:14 - but still yeah in pointer we have
05:16 - hundred
05:17 - that is address of this in pointer we
05:19 - have but actually we have deleted this
05:22 - memory
05:24 - right
05:24 - this is no more reserved now
05:28 - it is in what
05:30 - free block of the memory
05:32 - one is consumed one memories one part is
05:35 - consumed memory one part is free memory
05:38 - right when you you know run a program
05:40 - then obviously some memory has been
05:42 - allocated to you from stack also and if
05:44 - you
05:45 - allocate memory dynamically then from
05:47 - heap also
05:48 - so
05:49 - here we have
05:51 - two parts free memory and
05:54 - consumed memory
05:56 - so once we have freed this this block is
05:59 - now in free memory
06:01 - right so
06:02 - and
06:03 - before freeing this it wasn't consumed
06:06 - one here so at that time it was having
06:09 - some valid address
06:11 - like hundred
06:12 - but we have now freed this so now it is
06:14 - in free block and all the memory block
06:16 - here are having
06:18 - invalid address right but this pointer
06:21 - is still pointing to here
06:24 - we haven't updated this thing
06:26 - so now at this time this pointer is
06:29 - acting as dangling pointer so now it is
06:32 - what now
06:34 - dangling pointer
06:37 - here if you will dereference it like
06:39 - printf percentage d and after freeing if
06:42 - you will dereference it
06:45 - it means
06:47 - value at this address but here we don't
06:49 - have anything we have deleted this
06:51 - address with this memory space so it
06:54 - will give you some garbage value or
06:55 - maybe some undefined behavior it will
06:57 - show
06:58 - unpredictable behavior we cannot say
07:00 - maybe program will crash or it will give
07:02 - some garbage we don't know
07:04 - because it is now dangling pointer
07:06 - dangling is what in simple terms you
07:09 - will say like
07:10 - it's hanging
07:12 - it is still hanging
07:14 - right
07:15 - but we don't have anything here
07:18 - let's take one example if you have
07:20 - suppose
07:21 - if you have a
07:23 - phone number of your friend
07:26 - but
07:27 - he has changed
07:29 - his phone number but you still have
07:32 - that old
07:33 - phone number
07:34 - right
07:35 - so that phone number is like a pointer
07:38 - you can access the your friend using
07:41 - that phone number you can call your
07:42 - friend using that phone number but but
07:44 - now
07:45 - that phone number doesn't exist
07:47 - because he has changed his phone number
07:50 - so now that phone number is now it's
07:53 - like dangling pointer
07:56 - right
07:56 - you cannot access you cannot call your
07:58 - friend using that phone number now if
08:00 - you will call
08:02 - then what would happen we don't know
08:04 - maybe that has been allocated to some
08:06 - other
08:07 - person
08:08 - right or maybe that is switched off or
08:11 - we don't know anything
08:13 - can be possible so here also maybe this
08:15 - memory
08:16 - after some time maybe that freed memory
08:18 - has been allocated to do some other you
08:20 - know process or some other variable or
08:22 - some other kind of thing
08:24 - and after that later if you will
08:26 - de-reference it definitely it will show
08:28 - some undefined behavior or it can cause
08:30 - some bug in your program
08:32 - right
08:34 - it's like a risky for your you know
08:36 - security purpose
08:38 - right so don't leave any pointer
08:43 - hanging or dangling pointer so what is
08:45 - the situation how to get rid of the
08:47 - situation
08:49 - after freeing this
08:50 - what you can do
08:54 - ptr is equal to
08:57 - null
08:58 - better to initialize ptr with null so
09:01 - now in ptr we have null that is zero
09:04 - now null pointer we have already
09:05 - discussed now it is pointing to it is it
09:08 - is not pointing to any valid address and
09:10 - we cannot dereference this null pointer
09:12 - and obviously a good practice is what
09:14 - further if in a program you will use
09:16 - first of all we will check if
09:18 - like pointer is equal to is equal to
09:20 - null simply print we cannot de-reference
09:23 - it hence
09:25 - what you want to do with that pointer
09:26 - you can do so that is a good practice
09:29 - before accessing before dereferencing
09:31 - any pointer in the program better to
09:33 - check if pointer is null or not if null
09:35 - we cannot dereference it
09:36 - otherwise your program is going to be
09:39 - crashed
09:40 - right
09:41 - so this is one reason
09:43 - why dangling pointer comes this is what
09:45 - you can say dear location of memory or
09:48 - you can say
09:49 - destruction of objects
09:51 - right so it means what you can say
09:53 - dangling pointer points to a
09:56 - pointing to a freed memory location
10:00 - right because
10:01 - this has been freed
10:03 - so a pointer which is pointing to a free
10:05 - memory location that is known as
10:08 - dangling pointer that's it
10:10 - right i hope you got the definition of
10:12 - dangling pointer now
10:14 - one more reason why a dangling pointer
10:17 - comes in your program is one reason is
10:19 - this
10:20 - right because you have dynamically freed
10:22 - the memory and pointers still exist
10:25 - right
10:26 - one reason is this and how to get rid of
10:27 - the situation you can point it to none
10:30 - second is what in main function
10:33 - i am taking a pointer
10:35 - right
10:36 - and
10:37 - here uh maybe you write down some code
10:40 - and within this code i am writing i am
10:42 - taking on block like again curly braces
10:45 - int a is equal to suppose 9
10:47 - and in within this block i am saying ptr
10:50 - is equal to address of a
10:53 - and within this block i am just printing
10:55 - a is equal to
10:57 - and i am accessing this a using ptr so
11:01 - here it will print 9
11:03 - so this is the block
11:05 - right where i am using this a variable
11:07 - so a is what now
11:09 - local variable to this block only
11:11 - you can say this is the scope of this a
11:14 - out of this scope if you will use this a
11:17 - then it will give error because it is
11:19 - local to this
11:21 - right
11:22 - here only you can say a would be created
11:24 - a is having nine and some address also
11:26 - suppose thousand
11:28 - and
11:29 - ptr is global
11:31 - not global but within this main function
11:33 - so
11:34 - throughout the main
11:35 - this program you can use ptr so in ptr
11:38 - now we have address of a that is
11:40 - thousand so ptr is now pointing to this
11:43 - a
11:44 - right
11:44 - and here if you print strict ptr 9 would
11:46 - be printed but
11:48 - after this block as soon as control will
11:50 - go out of this one
11:52 - this would be vanished
11:54 - if after this you will print printf
11:57 - like directly i am printing a
12:01 - you cannot access a here it will give
12:02 - you error
12:03 - you are accessing a local variable
12:06 - it will give you error
12:07 - right and after
12:10 - this also if you use like a strict ptr
12:13 - then also it it is acting as a dangling
12:16 - pointer now because uh out of this block
12:19 - now a has been vanished
12:22 - this there is no a now
12:24 - but this ptr is still pointing to this
12:26 - memory location but there is no nothing
12:29 - here
12:30 - that has been you can you can say
12:31 - vanished so this pointer is now it's
12:34 - like hanging
12:35 - so this will act as a dangling pointer
12:38 - out of this
12:39 - scope
12:40 - right
12:41 - yeah sometimes still
12:43 - if you run this still maybe for a while
12:46 - you can get 9
12:48 - maybe you are thinking that it's wrong
12:50 - but it's ok maybe for a while for some
12:53 - time you can get correct output nine it
12:55 - shouldn't give nine because now
12:58 - nine is no more here it has been
12:59 - vanished it should give any garbage but
13:01 - maybe you can get nine you can run it
13:03 - and you can check it but
13:05 - after some other function call after
13:07 - some time maybe this memory has been in
13:10 - stack
13:11 - instead
13:13 - because when we run a program then the
13:15 - some memory has been allocated
13:17 - right to main function obviously that
13:20 - would be copied to ram main memory so
13:23 - this for a also some memory has been
13:25 - allocated for ptr also some memory has
13:27 - been allocated for also memory has been
13:29 - allocated this is what within this scope
13:32 - only scope is this one out of this this
13:34 - would be vanished
13:36 - right
13:37 - so maybe for a while you can get nine
13:39 - same output
13:41 - but
13:42 - after some time after other function
13:44 - call after in your program
13:46 - this memory maybe will be allocated by
13:49 - the operating system to some other
13:50 - variable to some other function
13:52 - then if you will dereference it using
13:54 - this pointer it will give some garbage
13:56 - value
13:57 - right
13:58 - but yeah it will act out of the scope as
14:01 - a dangling pointer
14:03 - right
14:03 - third reason may be like
14:07 - one one
14:09 - before this main function before this
14:10 - main function i am taking one function
14:12 - like
14:14 - f and i am taking here
14:18 - a is equal to 10
14:19 - and here i am returning return address
14:22 - of a
14:24 - this function is returning address of
14:26 - this variable
14:27 - right and within main function within
14:30 - main function what i am writing
14:32 - so it is returning address
14:35 - so
14:36 - to catch address to store address of any
14:38 - variable we should have some pointer
14:41 - variable so here i am having pointer
14:43 - variable
14:44 - and whatever this function return f
14:47 - return
14:48 - that would be stored in this pointer
14:50 - right it is returning address so that is
14:53 - why it is int star
14:55 - string
14:56 - right
14:57 - so it will read an address and this
14:58 - pointer is going to
15:00 - store that address and within main
15:02 - function i'm writing like i'm
15:05 - dereferencing this as strict ptr like
15:07 - whatever the value at that address it
15:10 - should be printed like it should be
15:11 - printed 10 because it will get an
15:13 - address of a
15:14 - so in a we have 10 so it should print 10
15:17 - but
15:18 - here this ptr is acting as a dangling
15:21 - pointer why so same
15:23 - this a is within this function so scope
15:26 - of this a is within this function only
15:28 - right
15:29 - now it will return address of a
15:32 - but
15:33 - after returning as soon as control will
15:35 - go out of this function
15:37 - this a would be vanished it would be
15:40 - deleted
15:42 - so now
15:44 - here this pointer is obviously it has
15:46 - returned the address here
15:48 - right
15:49 - so in ptr we have address of a but as
15:52 - soon as control will go out of this
15:55 - function in the main function here
15:57 - here because i am calling function here
16:01 - one the control will go out of this one
16:04 - this would be vanished
16:05 - so now
16:07 - what this pointer is still hanging
16:09 - because whatever the address it is
16:11 - containing that is no more now that
16:12 - memory is now freed
16:14 - it has been vanished
16:16 - right so now also it is acting as a
16:18 - dangling pointer
16:20 - and if you will you know like
16:21 - de-reference it maybe it will give some
16:23 - garbage value to you and see here
16:26 - if because this scope of this is within
16:29 - this function only but if you declare it
16:31 - static
16:33 - static variables are having scope but
16:36 - global globally means throughout the
16:38 - program
16:39 - so if you declare it
16:42 - static
16:43 - then it is not going to vanish it will
16:46 - return address of this a and if in main
16:49 - function if you will dereference it it
16:50 - will give you 10.
16:52 - now it's fine now it is not acting as
16:54 - dangling pointer right because we have
16:56 - used static here this also will discuss
16:59 - in detail but for
17:01 - this video you have to take you know how
17:03 - to understand this thing
17:04 - static variables these are having
17:07 - you know scope you can say globally or
17:09 - throughout the program
17:11 - right
17:12 - so now let me show you uh you know
17:13 - practically what is dangling pointer so
17:16 - now let me create a file
17:31 - header file we use and uh
17:34 - we also use one more header file that is
17:37 - stdlib
17:40 - because here we use like for that
17:44 - malloc and malloc function dynamic
17:45 - memory allocation and that is built-in
17:47 - function that has been i know
17:49 - uh defined in this header file stdlib
17:52 - right
17:56 - so first of all i am taking like uh that
17:59 - same
18:00 - one pointer
18:02 - and dynamically
18:03 - what
18:05 - we are allocating memory
18:07 - using
18:08 - malloc so
18:10 - size of
18:16 - and we have allocated like the memory so
18:19 - that
18:20 - in that memory i am storing
18:22 - 10
18:23 - and i am printing
18:27 - percentage d
18:29 - i'm accessing that thing using
18:31 - that memory using pointer only
18:33 - right
18:36 - so i guess it should print what 10
18:39 - if the syntax is correct so let's see
18:42 - what happens
18:44 - here
18:50 - say it is giving output 10
18:53 - right
18:54 - so now
18:55 - what i'm doing
18:57 - now free the memory
19:01 - whatever the memory pointer is pointing
19:03 - free that
19:04 - this is the syntax of this free function
19:07 - free and just you have to pass the
19:09 - pointer which is pointing to that memory
19:11 - location so that memory has been free
19:13 - like vanished
19:15 - but pointer is still pointing to that so
19:17 - now pointer is acting as a dangling
19:19 - pointer so now if you will access this
19:21 - like printf
19:24 - again here i am using
19:26 - a strict ptr
19:29 - what it should give
19:31 - you don't know maybe it will give some
19:33 - garbage value
19:34 - see
19:35 - 10 first time and after that it is
19:37 - giving some garbage value
19:40 - right and suppose again
19:42 - run this at this time again
19:45 - some another value garbage value right
19:48 - so this is what dangling pointer so how
19:50 - you can get rid of the situation
19:52 - after freeing directly you know simply
19:55 - do
19:56 - ptr is equal to null
19:58 - and you cannot dereference null pointer
20:00 - so please don't dereference null pointer
20:02 - now before dereferencing in a program
20:04 - good practice is what use sorry check
20:07 - if this is null pointer is null you
20:09 - cannot dereference it else you can do
20:12 - whatever you want to do with that
20:13 - pointer so one situation is this
20:16 - next can be
20:18 - next can be like i am just going to
20:20 - comment this out
20:22 - right
20:27 - and next we are using that
20:29 - function
20:31 - right so
20:33 - before using this main function what i
20:35 - am defining a function f
20:40 - and here i am taking a variable int is
20:42 - equal to 9 and
20:45 - return what address of a
20:49 - that's it and in main function what
20:51 - we will take a pointer because
20:54 - to store address obviously we need a
20:56 - pointer variable
20:58 - so whatever this function will return
20:59 - this pointer is going to take right and
21:03 - after that
21:05 - we are printing
21:09 - i'm writing this line like printf
21:11 - percentage d
21:13 - and strict ptr so i'm accessing this ptr
21:16 - now
21:17 - right
21:18 - so let's see what happens let me run
21:20 - this
21:23 - see
21:25 - it is not returning anything like no
21:27 - output you are getting and the function
21:29 - returns address of a local variable
21:32 - address of a is local variable right so
21:35 - here this ptr is acting as a dangling
21:36 - pointer you are not getting any output
21:38 - right
21:40 - maybe sometimes it will give any garbage
21:42 - value it
21:43 - we cannot say it will show some
21:45 - unpredictable behavior
21:47 - right
21:48 - and
21:49 - next is what
21:53 - if i am taking a pointer here
21:55 - right suppose pointer is equal to so
21:58 - better to initialize
22:00 - a pointer at starting when you take a
22:01 - pointer better to initialize it with the
22:03 - null
22:04 - so if you are not initializing here with
22:06 - any valid address so better to
22:07 - initialize it with
22:08 - null so next case is uh i'm not taking
22:12 - this function now i'm deleting it
22:16 - so pti is equal to null and here i am
22:18 - taking
22:20 - like
22:21 - within this block i am taking a variable
22:23 - a is equal to five 5
22:25 - and
22:26 - here ptr is equal to address of
22:30 - a
22:31 - and i am printing printf
22:33 - a is equal to whatever the value is
22:36 - having i'm accessing this using
22:38 - ptr so a strict media
22:41 - right
22:43 - suppose this line i'm going to comment
22:44 - it out right so this is what we have see
22:48 - this is what we have
22:51 - right so what output you will get
22:53 - obviously you will get 5
22:55 - right
23:00 - see a is equal to 5
23:02 - but ah
23:03 - out of this
23:05 - block this is the scope of the say if
23:07 - out of this using this printf statement
23:11 - out of this block i am accessing
23:13 - strict ptr
23:15 - now here it is acting as dangling
23:17 - pointer
23:18 - so it will show some unpredictable
23:20 - behavior maybe a program will crash or
23:21 - it will give some bug or
23:23 - it can it can create some bug or it will
23:25 - give some garbage value we cannot say
23:27 - but sometimes it will give the same
23:30 - value that is 5 it is also possible see
23:33 - let me run this and see what happens
23:41 - okay what
23:43 - just a minute
23:46 - now let me run this
23:49 - see a is equal to 5
23:51 - for this a is equal to 5 and this printf
23:54 - is also giving you 5
23:56 - but although the scope of this a is
23:58 - within this only it has been vanished
24:00 - but still it is giving you 5.
24:03 - it is also possible for a while it this
24:05 - will give you correct output
24:07 - but after some time when you write some
24:10 - other in your program maybe that you
24:12 - know freed memory location would be
24:13 - allocated to some other function or some
24:15 - other variable
24:17 - so after that this this pointer this
24:19 - line this pointer will show
24:21 - it will not give you correct output it
24:22 - will show some unpredictable behavior
24:25 - right so this is also fine maybe you are
24:27 - thinking it is giving 5 so it is i know
24:30 - it is not correct but no yeah it can
24:32 - give you some you know correct result
24:34 - for uh for some time for a while you can
24:37 - say
24:39 - so that's it for this video now so i
24:41 - hope you got what is dangling pointer
24:43 - and see when we are left with one more
24:44 - pointer that is wild point tennessee so
24:46 - now that thing we'll discuss in next
24:47 - video so i'll see in the next video till
24:49 - then bye take care