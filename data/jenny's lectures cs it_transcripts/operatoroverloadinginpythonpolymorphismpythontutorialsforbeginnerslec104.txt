00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of running
00:03 - perfect programming language we are
00:05 - discussing polymorphism and python in
00:07 - the previous video we have seen duck
00:08 - typing in Python means how using typing
00:11 - we can achieve we can implement
00:12 - polymorphism
00:13 - now the next way to implement
00:14 - polymorphism is operator overloading so
00:17 - this thing we'll see in this video what
00:19 - is operator overloading and how you
00:21 - achieve this thing how do you do
00:23 - operator overloading in your program and
00:25 - how using that thing you can achieve for
00:26 - polymorphism and what are some
00:28 - advantages of using of this operator
00:31 - overloading right now first thing we'll
00:33 - understand what is operator overloading
00:35 - see I hope when when I say operator
00:37 - means what pictures come you comes in
00:39 - your mind plus minus into divide these
00:42 - are operators right
00:45 - overloading means what
00:47 - uh see let's take a simple real life
00:50 - example
00:51 - if I ask you
00:53 - uh the setting capacity of a bike on a
00:55 - bike how many person can sit you will
00:57 - say two percent or at Max if there's a
01:00 - critical situation then at Max three
01:03 - portions on a bike but somewhere
01:05 - sometime you must have seen this thing
01:07 - like gonna buy four personal setting or
01:10 - five even five person or setting five to
01:12 - six
01:13 - one is on that tank Fuel and the driver
01:16 - is also like this and three person
01:18 - behind the driver like this means when
01:22 - we see such kind of you know see in such
01:26 - kind of bike then we uh generally say
01:28 - that the bike is overloaded
01:31 - means bike is performing Beyond its
01:35 - capabilities the capability of a bike is
01:38 - the setting capability capacity of a
01:39 - bike is only two person and they are
01:42 - setting 5000 and still the bike is
01:44 - performing means they are going
01:45 - somewhere so the bike is performing
01:47 - Beyond its predefined capabilities
01:51 - in general overloading means like this
01:53 - same thing we can apply with Operator
01:55 - Operator overloading means that operator
01:59 - that is being overloaded that operator
02:01 - performs
02:02 - Beyond its predefined capabilities
02:06 - now what does that mean
02:08 - if I say plus what comes in your mind
02:10 - means it's going to add like if I say
02:12 - one plus two then it is going to add two
02:14 - integer like three addition
02:17 - and if I use this plus with string like
02:21 - these are two strings and I'm going to
02:24 - use this with
02:26 - plus with these two strings means now
02:29 - the answer is it is going to concatenate
02:32 - these two strings three or if I write
02:35 - something like this 1 plus
02:37 - 2 what would be the answer you can write
02:40 - down in comment section
02:42 - now the one is string two string because
02:44 - these are in double quotes or maybe you
02:46 - write these in single quote
02:49 - this is also considered as string what
02:51 - would be the answer one two one two it's
02:54 - not three
02:55 - so the operator is same plus plus but if
02:59 - you the operand are integer it is
03:01 - performing something different if the
03:03 - operand are string it is performing some
03:05 - different operation means this plus is
03:07 - overloaded by int class as well as by
03:11 - Str class see in Python everything is
03:13 - object so int is a class here Str is
03:17 - also is a class
03:19 - so this plus is overload same with like
03:21 - this
03:23 - multiplication operator one into two it
03:26 - is going to multiply but if you use this
03:28 - with any like
03:30 - string into three then it will print
03:32 - Jenny Jenny Jenny in three times like
03:34 - this the star is also overloaded by in
03:36 - class as well as by Str class
03:38 - bye
03:39 - but what if I see I have a class because
03:42 - generally this polymorphism this type of
03:44 - concept is in object content programming
03:46 - and there we deal with class and objects
03:47 - so can we add two object if I have a
03:50 - class suppose I have a class
03:52 - person
03:54 - I have created two object P1 and P2 of
03:57 - this class and I want to add these two
03:58 - objects can we add this thing
04:01 - I don't know maybe let's see this
04:04 - practically okay then you will get it
04:07 - better what is operator overloading how
04:08 - you can overload an operator and what
04:10 - are the advantages of operator
04:11 - overloading I hope you got the basic
04:13 - idea the definition of or the general
04:15 - meaning of operator overloading okay now
04:18 - let's see practical okay so let's create
04:21 - a new file
04:23 - right
04:26 - now see let me just first tell you that
04:30 - overloaded
04:31 - plus operator
04:33 - see now
04:35 - you can see the difference here I'm
04:37 - using this plus with hint as well as
04:40 - with Str
04:43 - UT now
04:46 - first we'll give three and the next line
04:48 - will give one two so one plus two is
04:50 - three but this one into our string so
04:52 - here the pluses performing as
04:54 - concatenation so one and two okay so
04:58 - this plus is
05:00 - overloaded by int class as well as by
05:03 - Str class now see what is happening
05:05 - behind the scene if you write this class
05:07 - means behind the scene there is some
05:09 - method which is going which is to be
05:11 - cold that is ADD method
05:13 - okay now those methods are special
05:17 - methods or magic method because how we
05:20 - are going to overload these operator
05:21 - before that you have to understand what
05:24 - are some special methods so these are
05:25 - called magic method or these are called
05:27 - Dunder methods these are short form of
05:29 - double underscore method like you have
05:32 - seen this method underscore underscore
05:34 - init this these gender methods
05:39 - begin with double underscore and with
05:42 - double underscore so initial method of
05:44 - special method or magic method you can
05:46 - say every time you call object this
05:48 - method is to be called same we have ADD
05:52 - method
05:53 - whenever this plus you write this plus
05:56 - behind this in this add method is going
05:59 - to be called if you write minus then
06:03 - for that also we have this method sub
06:05 - method is being called behind the scene
06:08 - what is happening that is I'm telling
06:10 - right now so see I can
06:13 - show you
06:15 - plus these one and two are end so we
06:18 - have an INT class tint dot C this and
06:24 - this add method gender method on this
06:27 - int class okay we have a net we have d i
06:31 - r mro many methods are there okay
06:35 - many magic method or special methods are
06:38 - there so right now we are dealing with
06:40 - this
06:42 - we are dealing with ADD
06:43 - so like this and it will take two
06:46 - argument one is self one is other right
06:50 - so if you want to print addition of one
06:54 - and two so rather than
06:58 - rather than this line rather than this
07:00 - line we can also write down this thing
07:03 - in dot we can call add method and we can
07:06 - pass simply one and two it will give
07:08 - same result three
07:10 - so as I've told you when you write down
07:12 - this plus behind the scene this add
07:14 - method is being cold
07:16 - okay so this add method is on int class
07:19 - as well as in Str Class C Str dot we
07:24 - have this method add
07:26 - self and S2 is going to be passed
07:29 - two parameter right so here if I pass
07:32 - like 1 comma
07:34 - 2. and if I print
07:41 - rather than this line
07:46 - so you will get what result c 3 and 1 2.
07:50 - now here I think you got it
07:53 - these are some special methods
07:55 - okay now when you use this method that
07:58 - also I'll tell you
08:00 - so same if I take one object if I take
08:03 - one another example if I have a class
08:05 - I hope you have heard or you have used
08:07 - complex number okay we write something
08:10 - like this like maybe three plus
08:13 - two and I is Iota this is complex number
08:16 - so this three is real part this two is
08:19 - imaginary part and if we have two
08:21 - complex number like two Iota and if you
08:25 - are going to add these two complex
08:27 - number then what would be the output the
08:30 - real part would be added to real part 3
08:31 - plus 1 is 4 plus 4 ITA this would be the
08:36 - output
08:37 - okay
08:39 - now let's see I have a class complex
08:41 - number and there I am having two uh
08:45 - thing real and imaginary
08:48 - so let's pass to parameter we have
08:50 - suppose up and I only
08:53 - and I'm taking sorry not depth it should
08:56 - be self load one argument is real equal
08:59 - to whatever R you will pass
09:01 - and that self load
09:04 - imaginary is equal to whatever the value
09:07 - I you will pass so this is the number
09:09 - right and I'm creating two object of
09:12 - this complex number in first I am
09:15 - passing 1 comma 2 and in second object
09:23 - four comma five right and I want to add
09:26 - these two complex numbers so simply if I
09:28 - say
09:29 - if I write something like this like
09:31 - print
09:32 - C1 plus C2
09:35 - can I add these two object of this class
09:38 - directly c 1 plus C2 I don't know let's
09:40 - run this
09:42 - no it will give type error see it is
09:45 - giving type error unsupported operands
09:47 - for Plus
09:49 - complex number and complex number
09:53 - when you add two number one plus two
09:55 - means operand one operating two so you
09:57 - are passing integer when you are passing
10:01 - the operand Jenny plus khatri you are
10:03 - passing string operand that is also fine
10:05 - because plus is defined for Str class
10:08 - also
10:09 - it knows what to do with if a string is
10:13 - passed if integer is passed but it you
10:16 - know it is not defined for these
10:18 - operands for these type of operands
10:21 - when we pass object
10:24 - when we pass I mean any object of this
10:27 - type complex number
10:29 - the python interpreter doesn't know what
10:31 - to do
10:32 - because this plus is not defined on
10:34 - these types on these types because type
10:37 - of these operand is complex number
10:39 - okay
10:41 - now we can overload this plus operator
10:46 - how using that dender method that
10:50 - special method add because automatically
10:52 - if you add two integer then behind the
10:54 - scene the add method is going to be
10:56 - called
10:56 - right so in add method it is defined
11:00 - what is to be executed
11:02 - when you call add when you call Plus
11:06 - with integral so we can modify that add
11:09 - method we can Define our own add method
11:12 - for these objects okay so let's define
11:16 - that special method add
11:20 - and this method obviously will take two
11:22 - arguments one is cell one is other right
11:26 - so self and other
11:27 - if you do not take this other anything
11:29 - you can take selfish as it is but if you
11:32 - want to take like any name x a b c
11:34 - anything you can take
11:36 - simply I am taking only other
11:38 - right
11:40 - now I want to add these two number means
11:42 - transfer should be real part would be
11:44 - added to real part imaginary part would
11:46 - be added to the imaginary part the thing
11:48 - you want right
11:51 - so when you call this when you write
11:53 - this class means by default this add a
11:56 - method would be cold right
11:58 - so C1 C1 means this one and two would be
12:01 - passed so one is what
12:03 - like real part and two is imaginary part
12:09 - right so cell means the C1 object other
12:13 - means C2 object
12:16 - right so ultimately what you want to do
12:20 - I'm not writing the com you know that
12:22 - proper syntax here
12:23 - first let's understand what you want to
12:25 - do
12:27 - the real part of C1
12:29 - plus the real part of C2
12:32 - right
12:33 - so
12:34 - self Dot
12:36 - real because attribute name is real and
12:39 - imaginary self load real
12:43 - Plus
12:44 - C2 object is in other here in this
12:48 - parameter other so Plus
12:50 - other Dot
12:53 - real
12:54 - self not real plus other dot real
12:57 - and second thing
12:59 - self load
13:01 - imaginary Plus
13:04 - other dot management
13:07 - right these two things we want
13:10 - and overseas output should be something
13:11 - like this five plus seven I iota
13:15 - okay
13:17 - so now you have to frame that kind of
13:19 - output so this
13:22 - okay you can you know do this thing with
13:25 - many methods I'm just going to tell you
13:27 - one way
13:28 - so I'm going to return and with the help
13:32 - of F string I want to do this thing just
13:35 - first
13:37 - take the value whatever the value in
13:40 - this then
13:43 - obviously
13:45 - when you add then 5 then Plus
13:48 - seven Iota so this plus is that plus
13:50 - okay then
13:54 - imaginary part
13:57 - this value would be from here right
14:01 - and then at last
14:04 - Iota is also would be printed so
14:08 - that's it
14:11 - what you are getting see
14:12 - now see 5 plus 7 item
14:15 - now it is not giving any error that plus
14:18 - is adding these two complex number
14:21 - because we have overloaded this add
14:24 - method we have given our own definition
14:27 - to this add method
14:29 - so whenever you will write this plus now
14:31 - this add method would be cold
14:34 - not that was predefined by in in class
14:37 - or Str class this add method would be
14:40 - good right and in this third method we
14:42 - have defined our own thing we have given
14:44 - our own definition so now it's working
14:46 - fine on the object as well so this is
14:48 - what operator overloading we have
14:50 - overloaded this plus operator this plus
14:51 - operator is performing
14:53 - Beyond its predefined capabilities
14:56 - right
14:58 - you can do this with other way also like
15:01 - with the help of Str
15:03 - ather than F string just convert this
15:07 - addition addition into Str this addition
15:09 - addition into Str and then just
15:11 - concatenate this plus this this I can
15:14 - get in these things right this is
15:16 - assignment for you guys you have to try
15:18 - that method you can write down the logic
15:20 - in comment section
15:22 - see this is the second wave return you
15:24 - can just convert this thing into Str
15:27 - this thing into Str
15:29 - then you can concatenate Iota with this
15:32 - and you can obviously concatenate this
15:34 - plus also this plus because this plus is
15:37 - not actually plus we are not doing any
15:39 - plus here
15:41 - we are concatenating these two strings
15:43 - so this this plus this plus is
15:46 - concatenating this string and the string
15:49 - this plus is concatenating this string
15:50 - and this string okay let's run this and
15:53 - see you will get same answer
15:55 - five plus seven item so either this way
15:57 - or this way you can do this thing okay
15:59 - now one quiz for you is one assignment
16:02 - for you is or one challenge for you is
16:04 - you have to overload greater than
16:06 - operator
16:07 - just create a class two persons two
16:10 - percent in that object uh you know
16:12 - create two objects of that class person
16:13 - two percent with name and age the one
16:16 - who is
16:18 - Elder is going to pay the bill so you
16:20 - have to compare the age of two person
16:22 - so pause the video and try this out
16:25 - I hope you have done this
16:28 - so let's create a class
16:31 - and init in Constructor I am having
16:35 - two parameter
16:36 - name and age so attribute name same I'm
16:40 - taking name and age you can take
16:42 - different also it's up to you name and
16:45 - age okay and let's create
16:48 - two percent
16:50 - of this class and let's
16:54 - like
16:56 - pass
17:05 - so we have kg2 object Ram sham having
17:08 - 32h 23 age
17:10 - so
17:12 - I want to compare these two if
17:15 - this P1 is greater than P2 the one who
17:19 - is Elder is going to pay the if P1 is
17:21 - greater than P2 means you just print
17:25 - the name of that person name of that
17:27 - person P1
17:29 - Ram now it should print Ram is Ram will
17:32 - pay the bill this thing
17:34 - so using F string we can
17:38 - fetch the name frock of that object P1
17:41 - Dot name
17:44 - will pay the bill
17:51 - else second person will pay the bill
17:54 - same with F string else P2 Dot
17:59 - name
18:01 - will pay the bill
18:03 - I hope this is not so much stuff
18:04 - but directly we cannot obviously compare
18:07 - to these uh we can say objects C
18:11 - not supported between instance of person
18:13 - and person this
18:14 - greater than this operators
18:18 - so this thing I am going to I'm telling
18:20 - you why because it's not like that we
18:22 - can overload only uh these operator plus
18:24 - minus or arithmetic operator no we can
18:26 - overload comparison operators as well
18:30 - okay
18:31 - so we can overload bitwise operator as
18:35 - well
18:40 - so let's overload this greater than
18:41 - operator in this class so for that
18:45 - we have see I'm going to show you first
18:48 - and in class we have
18:50 - g t this greater than when we use this
18:55 - greater than symbol behind the scene
18:57 - this method is called so two argument
18:59 - you need to pass self and one is X or
19:02 - other for less than it's healthy
19:06 - LT for less than equal to also we have l
19:09 - e something like this so we can overload
19:11 - comparison operator as well so let's
19:14 - overload this
19:15 - GTR LT you can overload so
19:19 - GT this self and others so person
19:24 - when you use this thing means rather
19:26 - than this greater than this method is to
19:28 - be called P1 is now self P2 is now other
19:31 - so let's take the age of P1 and P2 and
19:34 - compare
19:35 - so just
19:37 - we can compare like if self dot h
19:42 - greater than
19:45 - other dot h
19:47 - then return
19:52 - else simply return
19:56 - false
19:58 - sorry already you are in its return
20:02 - and return false
20:05 - so this is how we can overload greater
20:06 - than operator right so now
20:09 - when you
20:11 - this line is to be executed then python
20:14 - interpreter will call this GT
20:16 - so P1 dot h means 32
20:20 - P2 dot h means other dot 8 other is P2
20:24 - P2 rotate is 23 so 32 greater than 23
20:27 - Yes means it will return trip
20:29 - so now it will return true true means
20:32 - this thing is going to be executed so
20:34 - obviously it should print Ram will pay
20:36 - the bill now the one who is elderly is
20:38 - going to pay the bill so see Ram will
20:40 - pay the bill no it's working fine we
20:43 - have overloaded this greater than
20:44 - operator as well
20:49 - see this greater than is working fine
20:51 - because now age age these two are int
20:55 - and on tint it is predefined greater
20:58 - than is already defined on hint class
21:03 - right
21:05 - it's not defined on this person class
21:07 - it's not defined so that is why this we
21:09 - are defining here but within this we are
21:11 - using this greater than this is for
21:13 - interning because the operands are hint
21:15 - and hint so by default it will call at
21:18 - this point of time it will call
21:21 - from the int class
21:23 - the GT defined on the in class
21:25 - right that is to be called and here
21:29 - on this this greater than would be
21:33 - called
21:34 - this method this GT that we have defined
21:37 - right
21:38 - now what what I hope you go to what is
21:41 - operator overloading now what are the
21:43 - advantages of using this operator
21:44 - overloading see we can Define the
21:46 - developers can easily Define
21:49 - these operators according to their cell
21:51 - according to their use or on their class
21:54 - and obviously these methods are familiar
21:57 - to us plus addition comparison all the
21:59 - arithmetic comparison relational
22:00 - operators these are
22:02 - familiar to us so it's easy for us to
22:04 - write down the code to maintain the code
22:06 - and definitely it is going to improve
22:08 - the code readability because of the
22:10 - familiar operators right and obviously
22:13 - this overloading kind of concept allows
22:15 - developers to you know create custom
22:17 - operations for their own classrooms and
22:20 - definitely it is making these operators
22:22 - more powerful and flexible
22:24 - this is definitely helpful when you deal
22:26 - in you know scientific Computing okay so
22:29 - now in the next video we'll see method
22:31 - overloading ad method overriding so now
22:33 - let's in the next route and then bye
22:34 - take care