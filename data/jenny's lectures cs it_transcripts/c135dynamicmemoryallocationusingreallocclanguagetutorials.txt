00:00 - so in the series of learning c
00:01 - programming we are discussing dynamic
00:02 - memory allocation in c the previous
00:04 - video we have talked about catalog
00:05 - function in c this video will discuss
00:07 - real log function right how to use it
00:09 - what is this function how the memory
00:11 - would be reallocated with the help of a
00:13 - program we will see practical also i
00:14 - will show you and we'll also see the
00:16 - mechanism the behind the scene process
00:18 - how the memory would actually be
00:20 - reallocated
00:21 - right these are some you can say
00:23 - important points or hidden facts about
00:24 - real low function that rarely you will
00:26 - find at any other place so all the
00:29 - important points about this function we
00:30 - are going to discuss in this video this
00:32 - is going to be very very interesting
00:33 - video for you guys right now before that
00:36 - just want to tell you about an
00:37 - opportunity that you don't want to miss
00:39 - that geeks4geeks has brought for you yes
00:42 - geeks4geeks has come up with an
00:44 - opportunity for you guys to become
00:46 - leader among your peers with their
00:48 - campus mantri program yes you can be a
00:52 - mantri at your campus and it is as
00:55 - prestigious as it sounds so i guess
00:57 - nobody wants to miss this opportunity
00:59 - because it just adds some values to your
01:01 - professional route so as a campus mantra
01:04 - you are responsible to spread awareness
01:06 - about geeks four weeks at your college
01:07 - campus their events their courses and
01:09 - you would be leading various awareness
01:11 - programs workshops seminars and other
01:13 - events at your college campus on the
01:15 - behalf of geeksforgeeks and being being
01:17 - a campus mantri you are a part of giant
01:20 - geeks four weeks parliament also which
01:23 - is having
01:24 - 20 lakhs loser from all over the world
01:27 - so the last date for registration for
01:28 - this campus ambassador program is march
01:31 - 31st and being a campus monthly what you
01:33 - will get you will get career counselling
01:35 - certificates exciting goodies and much
01:37 - more every month top performer will be
01:39 - recognized as campus monthly of the
01:42 - month which would be published on their
01:45 - website and their social handles the top
01:47 - performer will get a chance to go live
01:49 - on instagram and their testimonial will
01:51 - be shared on their website winners will
01:53 - receive gfg coupons up to rupees 8000
01:55 - amazon houses test series courses
01:58 - goodies bags and internship
02:00 - opportunities and depending on the task
02:02 - is given so you can register yourself
02:04 - directly from the campus monthly program
02:06 - which is reachable for college first
02:08 - year and second year students the link
02:10 - the registration link you will find in
02:11 - the description box of this video so you
02:13 - can go and check out
02:15 - see it means reallocation of memory
02:20 - means previously you have dynamically
02:23 - allocated the memory but now you want to
02:25 - resize that memory resize
02:29 - resize means you can increase
02:32 - the size or decrease the size
02:37 - right suppose previously you have
02:39 - allocated memory using the function
02:41 - malloc or callo if you have a located
02:43 - memory dynamically previously then only
02:47 - you can use real lock function to reload
02:48 - them and real okay that will relocate
02:50 - the memory but suppose you haven't
02:53 - allocated memory dynamically and now we
02:55 - are using real lock function then it
02:57 - will show undefined behavior so this
02:59 - point you need to take care
03:01 - it is responsible to resize the
03:03 - previously allocated memory using calo
03:06 - or mellow
03:08 - right you can increase the memory size
03:10 - the memory block size you can decrease
03:12 - the allocated memory block size
03:14 - right
03:15 - i hope this is clear to you this is
03:17 - built in function which is declared in
03:19 - stdlib.h
03:21 - fine now how to use this function what
03:23 - is the syntax just
03:24 - you have to write down yellow it will
03:27 - accept two argument
03:29 - right
03:30 - the previously allocated memory pointer
03:34 - right so this pointer you will write
03:36 - here a strict ptr or you can say pointer
03:40 - next is what
03:43 - new size
03:46 - new size may be increased size or
03:48 - decreased size you want to allocate new
03:50 - size you want to reallocate the memory
03:52 - that size so this is one previously
03:55 - allocated
03:56 - pointer
03:57 - fine suppose previously i have allocated
03:59 - some memory using mellow
04:03 - and 100 bytes
04:04 - i am using mellow 100
04:06 - simple syntax i am using i am not using
04:08 - size of and everything right
04:11 - mallow 100 so it will allocate from the
04:13 - heap section what it will do from the
04:15 - heap section
04:17 - it will allocate a block of 100 bytes
04:20 - and it will return the address of base
04:22 - address of this the address of the first
04:24 - byte and that suppose i am storing in a
04:26 - pointer base address is thousand so that
04:29 - i am storing thousand
04:31 - now i want
04:32 - 400 bytes
04:34 - so i want to reallocate i want to
04:36 - increase this
04:37 - size of this memory block
04:39 - so what you need to pass this pointer
04:41 - the previous pointer
04:43 - that is pointing to the previously
04:44 - located memory that ptr and this would
04:47 - be void star word you know
04:50 - generic pointer
04:52 - so generally this pointer is suppose we
04:54 - i have used this block to store
04:57 - integer values right so you will say
05:00 - that we have type casted this and this
05:01 - is end pointer so this pointer would
05:04 - automatically be converted to generic
05:07 - pointer to void pointer right by real
05:10 - look
05:10 - and the new size here you will give new
05:12 - size suppose 100 here and i want 400
05:16 - bytes so you can write here 400.
05:18 - now realloc will return void pointer so
05:21 - according to your need you need to
05:23 - typecast it
05:24 - right here whatever you will write you
05:26 - can typecast it and you will store that
05:28 - address into
05:29 - this pointer only
05:31 - the new address so
05:34 - the return type of this is
05:36 - void pointer reallock the previously
05:38 - i know located pointer and the new size
05:42 - so this is general syntax of using
05:44 - yellow now one plus point four really
05:46 - function is what it will resize the
05:48 - previously allocated memory block
05:51 - and very important thing is
05:53 - without without losing the previous
05:56 - content
05:58 - let's take an example
06:00 - i have
06:02 - allocated a memory using mellow or
06:04 - calloc also you can take right
06:07 - for
06:09 - five into four five integer
06:14 - right size of
06:15 - in
06:17 - and i am storing this in ptr and here i
06:19 - have taken
06:25 - int star ptr so from heap section
06:30 - suppose
06:32 - i have stored one two three four five
06:35 - five individual right
06:37 - thousand is the base address so it will
06:39 - return thousand in ptr we are going to
06:40 - store thousand and this for five integer
06:44 - we have elongated memory using malloc
06:46 - now i want to relock this memory this
06:48 - memory block
06:49 - i want to store
06:51 - now seven integer
06:53 - so you can relock this how you can use
06:55 - this
06:56 - just use real low
07:00 - pointer
07:01 - ptr
07:03 - previous pointer is previously allocated
07:05 - memory block is pointed by this ptr so
07:07 - just provide this pointer
07:09 - and now new size new size suppose i want
07:12 - to store two more integer so two more
07:14 - means seven integer so this block would
07:16 - be four seven into
07:18 - size of into new sizes
07:20 - seven into size of it five previous two
07:23 - new then seven
07:25 - so
07:26 - it will extend it will expand this block
07:29 - only
07:31 - if possible see these points are very
07:33 - important
07:34 - if possible it will expand
07:36 - these
07:39 - blocks only this memory block only so it
07:41 - will expand this like this one and two
07:45 - in this heap section only
07:47 - so the previous content would be as it
07:49 - is
07:51 - and the base address of this block would
07:53 - be as it is whatever it will return
07:56 - suppose you are suppose you are storing
07:59 - that in ptr on the new pointer
08:01 - or you can take the same pointer also
08:03 - it's okay
08:04 - but i want to store in new ptr
08:07 - fine and now the previous content would
08:09 - be as it is
08:11 - now you want to add extra two values
08:13 - suppose i want to add six and seven that
08:15 - is fine
08:16 - so this is the
08:18 - feature of you can say very important
08:19 - point about
08:20 - this ptr without losing the previous
08:22 - content
08:25 - if possible it will expend the same lock
08:27 - if not possible suppose the situation is
08:30 - something like this
08:32 - suppose in heap
08:34 - this is the case like 1
08:36 - 1 2 3 4
08:38 - 5. this is i i have stored
08:42 - and it is not possible to expand
08:44 - this block
08:46 - so what realop will do now it will
08:48 - allocate a new memory block
08:51 - somewhere else suppose here it is
08:53 - possible so one two three four five one
08:56 - two three four five
08:58 - six and seven
09:00 - it will allocate a new block
09:03 - listen carefully
09:05 - copy the previous content
09:07 - copy the content from this memory block
09:09 - here
09:10 - delocate this thing
09:12 - you can say free this memory
09:15 - right
09:16 - and now it will return
09:18 - this address suppose this previous
09:20 - address was thousand and this address is
09:22 - over suppose three thousand so now it
09:24 - will return three thousand so now this
09:27 - three thousand suppose i am storing in
09:28 - ptr one in ptr one i am storing this
09:32 - address so it will return three thousand
09:34 - here
09:35 - previous was in ptr
09:38 - 1000
09:40 - but
09:41 - this has been
09:42 - deallocated
09:44 - right
09:45 - the main point is
09:46 - whether it will expand the same block or
09:48 - whether it will allocate a new block
09:52 - content would be as it is it will it
09:54 - will
09:55 - if it will allocate a new block if not
09:57 - able to expand that block because of the
09:58 - memory constraint it will copy the
10:00 - previous content first then deallocate
10:02 - this previously located memory and then
10:04 - return the new address
10:06 - right
10:08 - we will also see practical also i'll
10:09 - show you
10:10 - right and if the same block it will
10:12 - expand so you can just print the address
10:15 - you can just print the address for ptr
10:17 - and ptr one the value of beta and ptr
10:20 - one
10:20 - if expend the same log then ptr also
10:23 - thousand it will return and this also
10:24 - thousand it will return
10:27 - right
10:27 - so these are very important point this
10:29 - is behind the scene process how actually
10:31 - it will reallocate the memory right i
10:33 - hope you got this
10:35 - and if it is not able to relocate the
10:37 - memory successfully then it will return
10:39 - null
10:40 - same malocan catalog also return null on
10:43 - failure on success it will return
10:45 - the pointer right so see we are not sure
10:49 - that it will expand the same block or it
10:51 - will allocate
10:52 - memory it will allocate a new memory
10:54 - block we are not sure it depends on the
10:56 - situation it will face right but what we
10:59 - can show sorry what we can be sure about
11:02 - that
11:03 - the data the original content your data
11:06 - would be safe
11:08 - this is for sure and that i'll show you
11:10 - practical so that your data would be
11:11 - safe you will see a program right
11:14 - but if you reduce the size suppose size
11:17 - i am reducing
11:18 - for three integer then obviously data
11:20 - would be lost
11:22 - two integer you are going to lose two
11:23 - integer previously for five integer now
11:25 - you are reducing the size for three
11:27 - integers so obviously you are going to
11:29 - lose two integer that is understood
11:32 - right in that case you will lose your
11:34 - original data fine
11:35 - so let me just write down a program here
11:37 - so see here we have taken one pointer we
11:40 - are going to enter the value same we are
11:41 - going to enter some integer i want to
11:43 - store integer value you can take float
11:44 - or character up to you right it's not
11:46 - like that always i'm taking into value
11:48 - so we cannot take float or care no you
11:50 - can take here type of pointer character
11:52 - you can store or float value or any
11:54 - other type of values you can store right
11:58 - enter value of n then dynamically locate
12:00 - memory using calor num right the syntax
12:03 - i hope you know now it will accept two
12:05 - argument and that's it now we are going
12:07 - to enter the values scanf ptr plus i now
12:11 - update i want to update the size of n i
12:13 - want to resize this memory block right
12:15 - so just
12:17 - enter updated value of n
12:19 - scanf address of n now reallocate the
12:21 - memory according to the updated value so
12:23 - just use real low the previous pointer
12:25 - pass and and into sizeofint whatever the
12:28 - new value you will enter here that value
12:30 - it will take right now you can print
12:34 - you can check whether the same block it
12:36 - will it is going to expand the same logo
12:38 - it is going to change the address right
12:40 - so previous address you can print a new
12:42 - address you can print
12:43 - previous pointer was ptr and the new
12:45 - pointer i am taking what ptr1
12:49 - right industry ptr1 and now i am
12:51 - printing the values from 0 to n the loop
12:53 - and i am just printing the values now
12:55 - the updated pointer is ptr1 so just use
12:57 - ptr1 here
12:59 - right ptr1 plus i and just free the
13:01 - pointer at last
13:03 - fine so now let me just show you
13:05 - practical of this thing
13:06 - and see
13:07 - if you rather than this ptr if you write
13:10 - down here null
13:13 - means previous pointer null and then
13:17 - and into size of n then this really will
13:19 - act as
13:20 - mellow
13:22 - you can see it will be equivalent as
13:24 - malloc function just allocate this
13:26 - memory one block of this memory size the
13:28 - previous is null right and if you pass
13:31 - here null
13:32 - here we are passing ptr
13:35 - and here you are passing null or zero
13:37 - the new size then it will be equivalent
13:40 - as free pointer means you are going to
13:42 - free
13:43 - this this ptr the new size of this pti
13:46 - the new memory uh block size is zero
13:49 - that is null means nothing so just free
13:52 - the previously located memory that's it
13:55 - fine so let me just show you practical
13:57 - on my laptop
13:58 - so let me just create a new file
14:04 - real log dot c file right and we are
14:07 - going to copy the same
14:11 - what we have discussed about in
14:15 - so we are taking a pointer enter total
14:17 - number of values like n and using malloc
14:20 - we are
14:24 - what we are doing
14:25 - we are just allocating the memory right
14:27 - and now
14:29 - we are going to enter the values
14:31 - using printf and now you are not going
14:33 - to print before printing just ask
14:37 - suppose you want to reallocate you want
14:39 - to update the size of end right
14:46 - updated
14:49 - size of
14:51 - n
14:53 - right
15:05 - just
15:06 - this using scanf and now
15:09 - reallocate memory so what you will do i
15:11 - am taking a
15:14 - ptr1 new pointer
15:16 - right sorry this trick
15:19 - and then
15:21 - we will type cast this and
15:24 - reallock and previously pointer we will
15:26 - pass and then new size new size means
15:29 - n into
15:32 - size of
15:34 - end
15:36 - that's it
15:37 - now if you wanna see that the address
15:41 - then you can
15:45 - previous
15:47 - address or you can say previous block
15:49 - address you can print
15:51 - right
15:54 - and after that you can print what
15:59 - new block address
16:03 - and how to print
16:05 - address we are having in ptr previous
16:07 - and
16:08 - new address in ptr1 that's it and now
16:12 - just print the entered values
16:14 - 0 to n and we are just printing i here
16:16 - we are using ptr 1 because the newly
16:19 - eloped pointer is ptr1 right and after
16:22 - that you can
16:23 - free this ptr ptr and ptr1 right both
16:27 - are if both are pointing to same
16:28 - location then it's okay
16:30 - you have to free ptr1 the newly updated
16:32 - pointer fine
16:36 - now let me just run this and show you
16:38 - what output you will get
16:39 - see it is asking total number of values
16:41 - three
16:43 - entering the values one two three
16:45 - updated value suppose now i want to
16:48 - add two more integers then five
16:50 - so
16:51 - it is the previous address it is
16:53 - printing
16:54 - this one and
16:56 - new address is also same so same block
16:59 - it is expanding right
17:01 - both pointer are having same address so
17:04 - see the previous content is as it is one
17:06 - two three and the new content is
17:08 - zero zero or maybe any garbage value it
17:10 - can take right because we haven't
17:12 - initialized these two values but
17:14 - previous content would be as it is one
17:16 - two three
17:17 - right
17:19 - now
17:19 - what you will do suppose i want to
17:21 - reduce the size
17:23 - let me just run this again
17:26 - and enter total number values 5
17:29 - 1 2 3 4 5
17:31 - and now updated values three i want to
17:33 - reduce the size in that case
17:36 - previous address and the new address is
17:38 - same
17:39 - right and the values are only one two
17:41 - three
17:42 - because now you have reduced the memory
17:44 - block so two obviously two values you
17:46 - are going to use for three three values
17:49 - you will get here right
17:51 - so i hope this yellow function is clear
17:52 - to you guys all the important points
17:54 - about yellow function now what points i
17:56 - have discussed this is assignment for
17:58 - you just write down those important
17:59 - points in comment box right and the best
18:02 - comment i'm going to pin that comment so
18:05 - now in the next video we'll see about
18:06 - free functions so i'll show you the next
18:07 - video bye take care