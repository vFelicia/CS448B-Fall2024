00:00 - hey everyone I hope you are safe and
00:01 - doing good so in the series of learning
00:03 - path programming language in the
00:04 - previous video we have seen what is PIP
00:06 - command and what is pi pypi right how to
00:09 - install those external packages that are
00:11 - in that repository public repository
00:13 - piie on your laptop with the help of a
00:16 - package installer or package manager
00:18 - that is pip pip how to use those things
00:20 - we have discussed in previous video and
00:22 - what is a package that thing we have
00:24 - discussed in detail with real life
00:26 - examples two real life examples so to
00:29 - watch this video I would recommend to go
00:31 - and watch previous video first because
00:33 - it's very important to clear the basics
00:35 - it's very important to understand what
00:37 - is a package if you know what is a
00:39 - package then it's good you can watch
00:41 - directly this video so in this video we
00:42 - are going to discuss uh how to create
00:45 - your own package what are user defined
00:47 - package and how to create your own
00:49 - packages right a package is simply I
00:52 - have told you just a collection of
00:54 - modules or sub
00:55 - packages okay making you know uh the
00:59 - excess of modules and sub packages easy
01:02 - like in your laptop also you have
01:04 - folders you have folders within folders
01:06 - and like this just to arrange some data
01:08 - like we have discussed that thing uh if
01:11 - you're arranging pictures on your laptop
01:12 - then you have a folder pictures within
01:14 - that folder you are having different
01:15 - different folders of maybe year-wise
01:17 - like 2022 2023 21 pictures and within
01:22 - those folders also you have different
01:23 - different folders again like road trip
01:27 - road trip uh folder or maybe you can say
01:29 - farewell or maybe you can say like uh
01:31 - any other trip like this and then you
01:33 - have actual pictures so folder within
01:35 - folders within folders and then pictures
01:36 - like this just to arrange the data so
01:39 - that you can access the pictures easily
01:41 - if you put if you put all the pictures
01:44 - under single folder only you have a
01:46 - folder pictures and you are just copy
01:48 - pasting you're just putting all the
01:49 - pictures in that folder so it would be
01:51 - very tough to access the you know the
01:55 - pictures a particular
01:56 - picture if you want to search so that is
01:59 - why saying same thing packages in
02:01 - program also if you are working on a
02:03 - large project or a large application
02:05 - then there would be I guess many modules
02:09 - multiple modules so when there are many
02:12 - modules then definitely after some point
02:14 - of time it would be not easy to manage
02:16 - to track all the modules so what we do
02:18 - we just do grouping of modules we just
02:20 - group similar type of modules the
02:22 - modules having similar
02:24 - functionality in one group right and
02:27 - that is known as package so package is
02:29 - basically a you can say collection of
02:31 - modules or collection of like modules
02:33 - and Sub sub packages making the sub
02:35 - packages and modules easy to access
02:37 - right now we will see in this video how
02:39 - to create your own package right in one
02:41 - example we have taken like home shift
02:43 - home shifting example you are shifting
02:45 - your home and your mom ask you to uh you
02:47 - know shift to pack all your stuff right
02:50 - so you have many cartons and you're are
02:52 - going to pack your stuff there right one
02:55 - cart know clothes within that we are
02:58 - having like one carton for uh shirts for
03:01 - jeans for maybe like boots your Flats
03:04 - your heels and you have multiple cartons
03:06 - so you can group like you can group the
03:10 - carton of shirt jeans and your night
03:13 - suits and your like maybe stalls
03:16 - tops in a big carton that and you can
03:20 - name that carton clothes right one
03:22 - carton Footwear and within that Footwear
03:26 - carton you have multiple modules or
03:28 - multiple small small C like uh carton
03:31 - having small cart having Flats boots
03:34 - heels like this right so that thing we
03:37 - will be seeing practically in this video
03:39 - so let's jump into your laptop and let's
03:43 - see so let's see I have this like python
03:45 - project and within this I'm going to
03:47 - create a package first right so I will
03:51 - I'll just go to this new rather then
03:54 - create file I'll click python package
03:56 - and I will name my package like first
03:59 - pack package like home
04:04 - shift no do py just home shift so it's
04:08 - simply just a folder or a directory home
04:11 - shift see this is our package home shift
04:13 - and within this by default and we have
04:17 - underscore uncore inore py5 right so
04:22 - yeah before 3 I I guess 3.3 and 3 before
04:27 - 3.3 version of python it was compulsory
04:29 - to have this init file because it shows
04:31 - that this home shift is a package this
04:35 - directory is a package right but now in
04:39 - after 3.4 version it's not compulsory to
04:41 - have this in ity file you can just
04:43 - delete it and it would work fine right
04:45 - but we are going to keep it right
04:47 - because I'm going to show you what the
04:50 - use of what is the use of this file at
04:51 - the end of this video so home shift is a
04:54 - package within this package I'm I'm
04:57 - going to create a new python package and
04:59 - that is is like maybe shifting items
05:02 - shifting items uncore
05:04 - Jenny okay because I have my brother my
05:07 - sister my mother father and those are
05:11 - having their different different cartons
05:13 - right so I have my own carton so
05:15 - shifting item joury and within this also
05:19 - I'm having a new python package and the
05:21 - name I'm giving like
05:25 - clothes okay within clothes see we have
05:29 - three file one for clothes one for
05:31 - shifting item Jenny one for home shift
05:32 - jny every package is having its own init
05:34 - file right so within clothes now I'm
05:38 - going to create a new file or you can
05:41 - say it's going to be a module so I'm
05:44 - having
05:45 - like shirts
05:47 - dopy so in shirts. py and suppose one
05:51 - more file I have and there I'm having
05:54 - jeans. py so the shirts. py jeans. these
05:58 - are modules
06:00 - so cloth is a package so in this cloth I
06:03 - I'm having two module you can have
06:05 - multiple modules this home shift is a
06:07 - package this package is having Sub sub
06:10 - packages as well as maybe modules it can
06:13 - have modules so directly in home shift
06:15 - also I can create rather than creating a
06:18 - package I can create a file as well like
06:20 - a module and like maybe
06:25 - description description.
06:27 - py right and in description do py what
06:32 - I'm going to do I'm just going to print
06:35 - so this home shift is a package that is
06:37 - having one module as well as sub
06:39 - packages right so now in shirt. py in
06:45 - this let's write down something in this
06:48 - module let's write down something I'm
06:50 - just writing down like uh like this
06:53 - module or this carton contains all my
06:55 - shirts okay this thing I have in my
06:57 - shirt. py same for this jeans. py let's
07:02 - just copy paste this thing only and we
07:06 - are just going to modify like high from
07:09 - rather than short jeans module and
07:12 - suppose two modules we are having in
07:14 - shifting item joury one for clothes and
07:16 - let's create a new python package there
07:19 - I am having soorry two package we are
07:22 - having shifting items J package one for
07:24 - clothes one for footwares no do py so in
07:27 - this Footwear Dot footware package let's
07:30 - create a file and like maybe flats.
07:35 - py in footware again I'm creating a new
07:38 - file and that is like maybe heels heels.
07:43 - py same you can write down something in
07:46 - this flat and heels so now we have taken
07:49 - a small example now this in home shift
07:53 - in this package main package let's
07:56 - create or in this folder let's create a
07:58 - file and I'm going to name this a file
08:03 - main.py so in this file I'm going to we
08:05 - are going to write down our code we are
08:07 - going to import whatever we need any
08:09 - package any module any function or
08:11 - anything and we are going to run this
08:12 - file right or in this clothes this sorry
08:16 - this shifting items is a package which
08:18 - is having two packages one is clothes
08:21 - one is Footwear and one is this init
08:23 - file three things so it is having only
08:26 - two package sub packages you can say no
08:29 - module you can create a new file and you
08:33 - can create a module like
08:35 - uh books dopy this is also fine right so
08:39 - module as well as package collection of
08:42 - modules and packages sub packages we can
08:43 - say right okay now in main not in main
08:48 - file now how to use these packages right
08:53 - first thing we are going to import a
08:55 - module from a package right so how we
08:59 - are going to do that thing you just
09:01 - write down this import right package
09:05 - name dot module name using do operator
09:08 - so using do operator you're going to
09:10 - import so
09:12 - import package name let's write down the
09:14 - package name like in this main obviously
09:17 - in this main I'm having main module is
09:20 - sorry main package is home shift so
09:22 - within this I'm having main do py so
09:24 - here I'm having shifting item Jenny
09:27 - package only one package and within this
09:29 - I'm having two packages clothes Footwear
09:32 - and this so
09:34 - import a package Nam shifting item Jenny
09:39 - do so see within this shifting item jeny
09:42 - you are having clothes it's a package
09:44 - books it's a file or you can see file
09:47 - it's a module and footware so I'm going
09:50 - to import this module
09:57 - books books
09:59 - right so within books do you have
10:02 - anything no I don't have anything so
10:03 - let's print something okay now in main
10:07 - we have just imported this now I have I
10:09 - don't have anything here I just have
10:12 - only one line I have just imported this
10:15 - from this package books module so let's
10:18 - run this see it will show you hi from
10:22 - books module only this line because we
10:25 - to call to execute this function you
10:27 - have to call this function
10:29 - okay that thing also I'll show you how
10:32 - to call the function how to import the
10:34 - functions or variables or classes from a
10:36 - particular module right now second way
10:40 - is if you have like sub packages so then
10:45 - package name then from clothes I want to
10:48 - access jeans module right so package
10:52 - name then sub packages clothes so what
10:56 - you will write in next line I'm going to
10:58 - write down just import shifting item
11:01 - joury sub package name is clothes from
11:04 - clothes which module
11:07 - genes right so let's comment out this
11:11 - thing and I don't write anything let's
11:13 - run this one line it will print high
11:15 - from gen
11:16 - module okay only this line because you
11:19 - haven't hold this function right so it
11:22 - is not going to be
11:23 - executed I hope you got this now how to
11:27 - call the functions which are in these
11:29 - modules so from genes module if you want
11:32 - to call the function display then what
11:34 - simply you will write not simply gen do
11:38 - uh display no everything you have to
11:40 - write
11:41 - down this
11:44 - path shifting item the main package then
11:48 - sub package then the module name then
11:52 - the function name
11:54 - display
11:55 - see now you are seeing this module
11:58 - contains all my genes whatever is there
12:00 - in this display function right so this
12:04 - is one way right and I hope you got this
12:10 - now from books module your assignment is
12:12 - now from books module I want to call
12:15 - this display function right now how we
12:18 - are going to call that thing you have to
12:20 - write down in comment section okay and
12:23 - not just like uh function you can have
12:26 - any like variable also a is equal to 1
12:29 - you can access this variable also you
12:30 - can have a class as well as like in
12:32 - books suppose I have a
12:35 - class I'm just taking the name my
12:38 - class and within this I'm having one
12:41 - more uh maybe function like uh like in
12:44 - my class I have just one like function
12:47 - book type and it has all my nonfunction
12:49 - books something like this and you want
12:51 - to access this variable this function or
12:53 - this class so function I guess you can
12:54 - easily access let me just show you how
12:56 - to access this class right from Main so
13:01 - first obviously we are going to import
13:03 - this module books
13:05 - module the package name do module name
13:08 - so let's just comment out these
13:10 - lines
13:12 - now I want to access the class so what
13:16 - you need to do you have to create object
13:18 - of this that class like B is equal to
13:20 - complete you need to write down not just
13:23 - directly the class name my class no the
13:25 - path also if you are importing with this
13:27 - method there is a second method also
13:29 - there you need to write down just the
13:30 - class name that also I'll show you one
13:32 - by one now with the help of this B dot c
13:36 - book type as you can see book type right
13:39 - if you run this then hi from books
13:41 - module and it has all my known fiction
13:42 - books right this is how you can access
13:44 - class you can access variable also you
13:45 - can functions also right so how to
13:48 - access the function display that you
13:49 - need to do right you have to write down
13:52 - in comment section now next thing is let
13:55 - me show you the second method now there
13:58 - we'll use
13:59 - from so this is this was first method
14:02 - right so
14:04 - let's delete let's clear this
14:10 - thing now second way is use that from
14:14 - keyword from package name package name
14:18 - import module so package name is
14:21 - Shifting item shifting item Jenny and
14:25 - I'm going to import here I'm having in
14:28 - this
14:30 - what module you have we
14:32 - having this two sub packages and books
14:35 - so we can import books so this is one
14:39 - way this is how you can access let's run
14:42 - this and same it will print one line now
14:44 - in this case if you want to access the
14:46 - function what is there in books that
14:48 - display function then no need to write
14:50 - down the complete path because we have
14:52 - specifically from this package imported
14:55 - books this module right so you just just
14:58 - have to write down what the module name
15:01 - dot function name like display no you
15:07 - don't have to write down shift item
15:08 - joury do books do display like this
15:11 - let's run this
15:15 - see right now maybe you are thinking
15:18 - this description. py we are not able to
15:20 - call this description. py because this
15:23 - description py this module is within
15:26 - this package home shift right and this
15:29 - home shift this main this main file is
15:32 - also in this home shift package so if
15:35 - you want to access this description. py
15:38 - also then you have to write down you
15:41 - have to create a main file your main
15:44 - file outside of this home shift package
15:47 - like in Project python project we have
15:50 - create a new file Main and from there we
15:52 - can access using home shift do shift
15:55 - item joury do description this kind of
15:57 - thing right
16:00 - okay now if sub packages like from shift
16:04 - item Jenny let's comment out these lines
16:09 - and
16:11 - from shift item
16:15 - Jenny do SUB package is what clothes or
16:19 - footwares let's see this time take
16:21 - footwares footwares
16:24 - Import in footwares
16:26 - I'm having
16:29 - two modules flats and heels so I'm going
16:33 - to import
16:36 - Flats right and now Flats dot display
16:43 - simply you can call this kind of thing
16:45 - let's run this and see hi from Flat
16:47 - module this module contains all my flats
16:50 - right and in footwares I'm having like
16:54 - two modules flat and heels so same like
16:57 - comma
17:00 - heels you can have multiple here module
17:03 - name okay so here heels dot
17:08 - display this will work
17:11 - fine now if you want to import all the
17:13 - modules like in this package Footwear
17:16 - package or if under any package I'm
17:18 - having 10 or 15 modules so and I want to
17:21 - import all the
17:22 - modules so what is general idea this
17:27 - thing we have done you know previous
17:28 - also like from the name of the package
17:31 - import maybe estc maybe you think it
17:33 - will work fine but it is going to give
17:35 - error and how to solve that problem that
17:37 - also I'll show you but here one thing I
17:39 - want to tell you if from this particular
17:41 - module footware I want to access
17:45 - particularly specific function not the
17:49 - complete module not this complete module
17:52 - Flats suppose in fo in Flats I'm having
17:56 - three functions so here I'm having three
17:59 - functions display flat type flat color
18:03 - and some description I have in these
18:04 - functions right and or maybe you are
18:07 - having like 15 or 20 functions but from
18:09 - particular module I want to import only
18:11 - one function or two function right so if
18:15 - you write down something like this
18:16 - import
18:18 - Flats then it is going to import
18:20 - everything which is there in this flat
18:22 - module means this line as well as all
18:25 - the like functions every function but I
18:28 - want to import a specific function or
18:30 - specific variable or specific class then
18:34 - what is a way you can just simply write
18:36 - from shifting item J do footwares do
18:40 - Flats
18:41 - import I just want to import only
18:44 - display function so display right now
18:48 - flat don't display but if you
18:52 - will sorry no no need to write down a
18:55 - Flats St display it it is going to give
18:57 - you error let me show you see name Flats
19:00 - is not
19:01 - defined here this Flats is not defined
19:04 - because you are not importing Flats you
19:07 - are importing a specific function from
19:09 - that module only display so here no need
19:13 - to write down anything because you have
19:15 - imported that function so directly write
19:17 - down the name of that function display
19:19 - let's run this and see this module
19:22 - contains all my
19:23 - flats Now display and same I want to uh
19:28 - says like display as well as my flats
19:32 - color so that also you can call Flats
19:36 - color directly like this see right and
19:41 - if you want to import all the functions
19:42 - so rather than writing comma Comma just
19:45 - one way is like you can write down here
19:47 - estc it is going to import all the
19:49 - functions
19:50 - see this this and also here you can call
19:55 - one more function is flat types directly
19:58 - you can call see
20:01 - kapuri right yeah you can import the
20:05 - functions from a particular under a
20:07 - particular module using this estri but
20:10 - under a package if you want to call all
20:13 - the modules then this line will give
20:15 - error because maybe under a package
20:16 - there can be many many many modules and
20:20 - maybe that modules are not of your you
20:22 - use so that is why it is restricted in
20:24 - Python that you cannot call all the
20:26 - modules it is going to definitely some
20:27 - time
20:29 - to load all the modules that you don't
20:31 - even need right so you have to just
20:34 - after import you have to specify module
20:36 - name right so this was third method if
20:39 - you want to import a specific function
20:41 - or a specific variable name also you can
20:43 - write down here like in Flats I'm having
20:46 - a variable a is equal to
20:49 - 1 right so if you import here like uh
20:55 - display comma flat color
20:58 - only these
21:02 - two functions
21:04 - so let's run
21:07 - this see it is not going to show you the
21:10 - variable value a is equal to 1 if you
21:13 - want to import then you have to just
21:15 - write down the name here like a and here
21:18 - I can simply print
21:21 - a see one right so here it's not like
21:26 - that you can specify only fun fun name
21:28 - function name like class variable
21:30 - anything you can specify here right so
21:33 - these are three ways now let's come to
21:35 - the point if under a package I have many
21:38 - modules and I want to import all the
21:40 - modules like under footware package I
21:43 - have two modules flats and heels so I
21:46 - want I want to
21:48 - import to both the modules so I'm just
21:52 - writing this srick maybe it will work I
21:55 - don't know let's run this
22:02 - okay it is not giving you any error so
22:05 - let's print first here like maybe uh you
22:09 - think that under this we are having two
22:11 - modules flats and heels so we have
22:13 - imported these two modules so let's
22:15 - write down
22:17 - here Flats
22:21 - sorry flat do display I want to access
22:25 - that function right let's run this see
22:29 - Flats is not defined because you haven't
22:32 - imported these Flats so what you need to
22:37 - do we have a underscore uncore allore
22:41 - uncore variable in this in it five so
22:46 - you have to overwrite that variable
22:48 - right so within footware because you
22:52 - want to access under this package all
22:54 - the modules so under this package
22:56 - footware we have in it file
22:58 - so open this file and we have a variable
23:01 - now you don't have anything here so we
23:04 - have a variable uncore uncore
23:07 - all underscore underscore you have to
23:10 - overwrite this thing and you just make a
23:12 - list under this footware package the
23:16 - modules you want to import just write
23:18 - down the name of those modules so
23:19 - modules are flats
23:23 - comma H so you want to import all the
23:26 - modules you have to write down the name
23:27 - of all the the modules here specifically
23:30 - right now here if you write down here
23:33 - estri it means it will import all all
23:36 - means it will check the init of this
23:40 - footware this package and here within
23:43 - this all variable you are having the
23:45 - modules name so it is going to import
23:48 - all the modules see now we are not
23:50 - getting any error right so now this SRI
23:52 - is working fine we are able to import
23:54 - all the modules under this package
23:56 - because we have overridden this init
24:00 - file under this footware package and see
24:02 - if you want to access this description
24:05 - so if you have something like we are
24:07 - shifting from gam to Delhi so outside
24:09 - this home shift package within
24:12 - this um project python project let's
24:15 - create a new file maybe
24:18 - like main 1. py something like this from
24:23 - here we can access this description so
24:25 - if you want to access just
24:28 - you have two to three ways I told you
24:30 - all the ways to access this particular
24:33 - module so from package name is home
24:36 - shift we are going to
24:38 - import
24:40 - description right let's run this and see
24:44 - we are shifting from guram to
24:46 - Delhi this is main one. py file outside
24:50 - of this home shift package
24:53 - right I hope you got the idea now what
24:56 - is a package how to create your own
24:57 - package and how to work with these
24:59 - things right so now that's it for this
25:02 - video and we see in the next video then
25:04 - bye- bye take care