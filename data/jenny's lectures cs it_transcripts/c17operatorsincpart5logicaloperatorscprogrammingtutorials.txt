00:00 - in the series of learning programming in
00:02 - c we are talking about operators in c we
00:04 - are done with four type of operators
00:05 - arithmetic assignment
00:06 - increment decrement operator and
00:08 - relation operators in the previous
00:10 - videos
00:10 - now in this video i will be talking
00:12 - about logical operators in c
00:14 - what is logical operator uh the types of
00:16 - logical operators
00:17 - why to use these operators how to use
00:19 - these operators the syntax of writing
00:21 - logical operators
00:22 - and when you use these operators in a
00:23 - program then what output you will get
00:25 - everything we are going to discuss
00:26 - with the help of a program right and
00:28 - this video is brought to you by an
00:30 - academy
00:30 - because an academy has started a series
00:33 - of free special classes for the
00:35 - aspirants preparing for gate 2022 and
00:38 - gate 2023
00:39 - these classes will give you a detailed
00:41 - and structured roadmap of approaching
00:44 - each subject in all the branches and
00:47 - these classes have already been started
00:48 - from 20th of december as
00:50 - you can see the calendar over here in
00:52 - these classes their best faculties
00:55 - will introduce you with the batch agenda
00:58 - and they'll give you
00:59 - that overview of the entire slavers for
01:01 - gate exam date 2022 and gate 2023
01:04 - so you can see here the date the name of
01:07 - the educator and the subject they'll be
01:09 - talking about on that day
01:11 - it's like you can say intro class for
01:13 - that subject
01:14 - in in that class uh they'll discuss some
01:17 - important topics
01:18 - for the gate point of view as well as
01:20 - ugc net point of view
01:22 - or also discuss the exam structure
01:24 - they'll give you an
01:25 - overview of a syllabus of that subject
01:28 - and these classes are free you don't
01:29 - need to pay anything for these classes
01:31 - and if if you like these classes
01:33 - you can go for the paid subscription
01:35 - after paid subscription you will get a
01:36 - complete and structured course
01:39 - for your gate exam right and if you will
01:42 - use
01:42 - the code jkl10 you will get 10 discount
01:45 - on your paid subscription
01:46 - so if you are interested you can go for
01:48 - it better to start your preparation
01:50 - early
01:50 - all the details the link and the the
01:52 - referral code i'll put
01:54 - in the description box of this video you
01:55 - can go and check out so now let us
01:57 - discuss logical operators in c first of
01:59 - all three types of logical operators are
02:01 - in c one is this one one is this symbol
02:05 - is this and one is
02:06 - this one this is logical end this is
02:08 - logical or and this is
02:10 - logical not these two are binary
02:12 - operators this is
02:13 - unity operator it requires only one
02:15 - operand these are binary because they
02:17 - requires to operate
02:18 - now logical operators are used to test
02:22 - more than one condition relational
02:24 - operators we have discussed there we
02:25 - will
02:25 - we were checking about one condition
02:27 - like a less than b a greater than b
02:29 - or something else one condition we will
02:31 - check in
02:32 - using relation operators but logical
02:34 - operators are used to test
02:36 - more than one condition now how you use
02:40 - these operators
02:41 - c like this you can write some
02:42 - conditions a greater than b
02:45 - and logical and c less than d
02:48 - we are checking two conditions here
02:50 - right so they are used to check more
02:52 - than one condition
02:53 - now what output you will get when you
02:56 - use these operators
02:57 - the output will be either true or false
03:00 - true means one or force means zero now
03:03 - based on what you will get output based
03:05 - on these conditions
03:07 - first of all these conditions would be
03:09 - evaluated these expressions you can say
03:11 - these are expression this is relational
03:12 - expression relational expression
03:14 - right and this complete is known as
03:17 - logical expression the expression which
03:20 - is containing logical operators
03:22 - as well as you can say some operands and
03:24 - operators or some other operators
03:26 - this is that is known as logical
03:28 - operators logical expression sorry or
03:31 - you can say it is a compound
03:32 - relational expression or you can say
03:36 - these are used to combine two
03:38 - expressions
03:40 - right now see first of all we are
03:42 - talking about this logical and operator
03:44 - with one example
03:46 - now this is how we use logical and
03:48 - operator we have two expressions
03:50 - one is the side one is the side and it
03:52 - is not compulsory that
03:53 - both the side we will have expressions
03:55 - we can also also write like this
03:57 - simple variables and b you can also
04:00 - write constant like
04:02 - 10 and 5 it's up to you
04:05 - both side the operands can be variables
04:07 - constant or any expression arithmetic
04:10 - expression relational expression it's up
04:12 - to you
04:12 - right now see now what output you will
04:16 - get
04:17 - based on these expressions the output
04:20 - would be either zero or one true or
04:22 - false right
04:24 - now first of all check these conditions
04:27 - see or you can say like check the
04:29 - precedence in this
04:30 - expression we have one operator one and
04:32 - one
04:34 - three operators we have relational
04:36 - operators are having higher precedence
04:38 - than logical operators means higher
04:40 - priority so first of all these operators
04:42 - would be
04:43 - evaluated right this these conditions
04:46 - would be checked first of all now
04:49 - you can say this less than this is
04:51 - having higher priority than
04:52 - equal to so first of all check this
04:54 - condition b less than a b
04:56 - is 5 5 less than 10 no
04:59 - no means false so it will give you 0
05:03 - now this condition a equal to equal to b
05:05 - is 10 equal to 5
05:06 - this is equality operator no so this
05:09 - also will give
05:10 - zero now the operands for this logical
05:13 - end is what
05:14 - one is false this is also false means
05:16 - zero and zero
05:18 - now finally the output would be what
05:21 - zero what output you will get in and
05:25 - if both the operands or both the
05:28 - expressions
05:30 - are true then only it will give true
05:33 - value
05:34 - otherwise you will get false if
05:37 - any one is true one is true one is false
05:40 - then also it will give you force
05:43 - to give a true value for logical and
05:45 - operator
05:46 - all the operands must be true
05:50 - this you need to take care now they see
05:54 - output of this one a and b a is what
05:57 - 10 b is what 5 now here we are not
06:00 - having 0 or 1
06:01 - that is fine other than 0 if you have
06:05 - any number it would be considered as
06:07 - true true means
06:08 - one this is true this is true then it
06:10 - will give you one
06:12 - now ten and five this is true this is
06:13 - true because these are not zero
06:15 - it will give you one if i write here ten
06:18 - logical and
06:19 - zero at this time it will give you what
06:22 - false zero because one operand is zero
06:25 - one expression is
06:26 - zero for getting one value true value
06:29 - all the operands must be true
06:31 - see let us take this example now suppose
06:34 - a value is 10
06:35 - this is 5 and the expression is this one
06:38 - and we are printing the value result
06:40 - whatever the expression will give either
06:42 - 0 1 that would be stored in result and i
06:44 - am printing this result percentage d
06:45 - format specified because
06:47 - i am printing integer value either 0 or
06:48 - 1. now check the conditions
06:51 - all conditions if all the conditions are
06:53 - true then only it will give 1
06:56 - check this condition a greater than b 10
06:58 - greater than 5 yes true then it will
07:00 - give you 1.
07:01 - logical end b not equal to 10
07:04 - yes b is not equal to 10 it will give
07:06 - you true 1
07:07 - and b less than 11 yes it is true it
07:10 - will give you 1
07:12 - and a greater than 5 yes a is greater
07:15 - than 5
07:15 - it will give you 1. so now all the
07:17 - conditions are true then the result
07:19 - would be 1.
07:20 - finally output would be 1 and that would
07:22 - be assigned to this result
07:24 - if i write here like this a
07:27 - is less than 5. now all the conditions
07:31 - are true but
07:31 - a is less than five a is not less than
07:33 - five it will give
07:34 - zero now the final result of this
07:38 - logical end would be
07:39 - one operand one is zero so it will give
07:42 - zero so there is in result we will
07:45 - we will have 0 and the final output
07:46 - would be 0
07:48 - so if you check here the condition then
07:51 - you can say
07:51 - for logical end if both
07:55 - the operands are 0 then it will give 0
07:57 - output
07:58 - if 1 is 1 then also 0 if this is 1 this
08:01 - is 0 then also 0 if this is 1 this is 1
08:04 - then only it will give
08:05 - true right now logical
08:08 - and operator logical sorry logical or
08:10 - operator and one more condition one more
08:13 - thing one more rule about and operator
08:15 - is what
08:16 - see if i am taking this expression for
08:19 - end
08:22 - if this is true means one
08:26 - then only next condition would be
08:29 - checked
08:30 - after this logical end second one right
08:34 - if the first condition is zero
08:38 - then in logical end it will not check
08:41 - the second condition final it will
08:43 - directly give output zero
08:45 - why so because if one is zero then
08:47 - ultimately it will give output
08:49 - zero it will uh give you false so no
08:52 - need to check the second one
08:54 - so this is only one would be check if it
08:56 - is 0 then it will give 0 if it is 1
08:58 - the first operand then only it will
09:00 - check the second condition in logical
09:02 - end
09:02 - now what about logical or operator now
09:05 - this is logical or operator
09:07 - here also if see this is one operand
09:10 - this is another operand this is what
09:11 - logical expression
09:13 - now what is value of this one a greater
09:16 - than b
09:17 - ten greater than five yes true so it
09:19 - will give you one
09:21 - or b equal to equal to four is b equal
09:24 - to four
09:25 - no this is false so this is one
09:28 - this is zero means this is true this is
09:30 - false now logical
09:32 - or operator will give you output what
09:34 - true that is
09:36 - 1 so if any one operand
09:40 - of logical or operator is true then
09:42 - final result would be
09:44 - true when you will get 0
09:47 - if both the operands or you can say all
09:49 - the operands are 0
09:51 - then only it will give you false or it
09:54 - will give you 0.
09:55 - if suppose here i'm writing like this is
09:59 - less than b now is 10 b is 5 is a less
10:02 - than b
10:03 - no it is 0 it is also 0 then all
10:06 - then only it will give 0. so you can say
10:09 - that
10:10 - the truth table of this o is what
10:13 - if both the operands are 0 then output
10:16 - would be
10:17 - zero if any one is one then output is
10:21 - one
10:21 - if this is one then also one if both are
10:23 - one then also one
10:25 - let us discuss about this logical not
10:27 - operator this already we have discussed
10:28 - when we are discussing about unary
10:30 - operator
10:31 - it will take only one operand
10:34 - right and what it will do it will
10:36 - complement
10:38 - that value of that operand or that
10:40 - expression or you can say it will negate
10:42 - the value of that expression or the
10:44 - operand like
10:45 - if i write here negation of
10:49 - suppose i am writing here 5 now i am
10:51 - using here
10:52 - 5 5 is what it's not 0 it's not 1
10:55 - so any value other than 0 is considered
10:57 - as true means 1
10:59 - so if it is true then negation of true
11:01 - is false so it will give
11:03 - zero if i am taking negation of
11:06 - zero means it is false but i am using
11:10 - this complement operator logical not
11:12 - so final output would be 1 so it will
11:15 - give
11:16 - if the this is true the expression is
11:18 - true
11:19 - the negation of that expression would be
11:20 - 0 if the expression is
11:22 - false the negation of that or you can
11:25 - say the logical not
11:26 - of that expression is true if you are
11:28 - using like
11:29 - negation of a greater than b
11:32 - this expression the operand can be any
11:35 - constant any variable
11:36 - any expression here also the operands
11:40 - are
11:40 - hair expression but it can be any
11:42 - constant it can be any variables
11:44 - like in logical end so now check this
11:46 - condition
11:47 - a greater than b
11:50 - is a greater than b yes it is true it
11:53 - will give you
11:54 - 1 and finally logical naught of one is
11:57 - zero so final output would be
11:59 - zero now let me discuss all these
12:00 - operators with the help of a program
12:02 - and one more point about logical or
12:04 - operator is what see the truth table is
12:06 - what
12:07 - zero zero is zero zero 1 1 0 1 1
12:10 - is 1 1 1 and 1 so greater than b
12:13 - or suppose b is equal to is equal to 4 a
12:15 - was 10 and b
12:17 - is equal to 5 now see
12:20 - the first is what a greater than b means
12:23 - yes it is true
12:25 - then in that case it will not check the
12:28 - second condition
12:29 - the final output it will give 1
12:32 - why so because for true value
12:36 - only one operand ah must be
12:39 - true and we have got one operand true so
12:42 - no need to check another one if it is
12:44 - zero
12:44 - then also output would be one if it is
12:46 - one then also output would be one
12:49 - but if suppose this is a less than b
12:52 - now 10 is 10 less than 5 no
12:56 - here we have 0 in that case it will
12:58 - check
12:59 - the second expression b equal to equal
13:02 - to 4
13:03 - no it is also 0 then it will give 0. so
13:06 - these two rows
13:06 - 2 rules you need to take care about
13:08 - logical end and logical not
13:10 - these are short circuit rules right in
13:13 - and if first one is 0
13:18 - then it will not check the second one
13:19 - final output it will give zero
13:21 - in logical or if first is one then it
13:24 - will not check the second one final
13:26 - output it will give
13:27 - one right now let me discuss these with
13:29 - the help of a program
13:30 - now this is a program a is for 6 and i'm
13:34 - taking one result and
13:35 - in result i am taking this logical
13:36 - expression i'm writing here printf jenny
13:39 - it's ok you can also write it is not
13:41 - like that here you can
13:42 - only write that expression or any
13:43 - variable constant this also you can
13:46 - write
13:46 - now what should be the result see first
13:48 - of all a greater than b
13:50 - this condition would be checked is a
13:52 - greater than b
13:53 - 4 greater than 6 no it is 0 it will give
13:56 - false
13:57 - and if it is false then in logical end
14:00 - if first
14:01 - operand will give you false the first
14:03 - expression would give you force then it
14:05 - will not
14:05 - go to second one final output would be
14:08 - zero would be stored in result and final
14:10 - output would be zero
14:12 - let us change this one if i'm writing
14:14 - here a is less than b
14:17 - now is a less than b yes it is true
14:21 - then it will go to second one second is
14:23 - what printf journey
14:25 - here we are not having 0 other than 0
14:27 - means it is
14:28 - true right so it is also one
14:31 - one and one logical end it will give one
14:34 - to result and it will print
14:35 - one and it will also print when
14:38 - the this condition this expression would
14:40 - be executed would be evaluated then it
14:42 - would print
14:43 - printf jenny so jenny would also be
14:45 - printed
14:46 - and after that you will get one if you
14:49 - will use here slash and then
14:51 - one would be next line you can
14:54 - check out this one if it is correct or
14:56 - not if i'm wrong then you can tell me in
14:58 - comment box
14:59 - and suppose if you are printing like
15:01 - this now i'm writing like this
15:03 - see this why i'm writing just to make
15:05 - you understand the the
15:06 - function of this logical end and or like
15:10 - if this is one
15:11 - in logical if this is zero in logical
15:13 - end it will not g
15:14 - it will not uh go to that second uh open
15:18 - operand
15:18 - right so now see here we have two
15:21 - logical
15:22 - uh logical operators precedence is what
15:24 - this is having higher precedence than
15:26 - logical or operator now first of all
15:28 - this would be executed now here we have
15:30 - relation
15:30 - that relational operator so this is
15:32 - having higher precedence so first of all
15:33 - this would be executed
15:34 - a greater than b is 4 greater than 6 no
15:37 - this will give
15:38 - 0 right and in logical end it will not
15:41 - go to this one now
15:45 - finally the result would be of this
15:47 - expression the result would be
15:49 - 0 now we have logical that
15:53 - or if it is zero then in logical
15:56 - or it will check second one second if we
15:58 - have printf
15:59 - uh lectures if we don't have any false
16:01 - value that we don't have zero
16:03 - so it will execute this one so here it
16:05 - means it is one
16:06 - so finally zero and one in logical or it
16:09 - will give one one would be stored in
16:10 - result and one would be printed
16:13 - and when this statement would be
16:14 - executed
16:16 - then first of all lectures would be
16:19 - printed then you will get
16:20 - one output now if i write like this now
16:23 - i have modified it
16:24 - a little bit up to this lectures we have
16:27 - same after that i have added
16:29 - logical and printf jk now again you need
16:32 - to tell me what is the output of this
16:34 - program
16:34 - and one more one you need to tell me
16:37 - exam
16:38 - out of this one and another just replace
16:41 - it with
16:42 - logical or for this also tell me what is
16:45 - the output what will be the output
16:47 - now next next example is
16:50 - now if you have this one if i want to
16:52 - print this one
16:54 - for logical and negation logical not
16:57 - zero then what should be the output see
17:00 - here
17:01 - we have two logical operators in one
17:03 - expression
17:04 - so check the associativity what the
17:06 - precedence is
17:07 - so sorry the precedence of these
17:09 - operatic check first of all the priority
17:11 - the precedence and precedence the
17:12 - priority of logical not
17:14 - is higher than logical and operator so
17:17 - first this would be executed
17:19 - logical not 0 this this will will give
17:22 - 1 means negation of 0 is 1 that is true
17:26 - now it would be executed 4 and 1 this
17:28 - value is other than 0 so means it is
17:30 - true true and true it will give
17:32 - 1 this one 4 and
17:35 - logical and 0 so it will give 0 because
17:38 - this is true this is false so it will
17:40 - give 0
17:40 - right now i'm taking in this example
17:43 - increment operator also
17:44 - so so that you can revise these
17:46 - operators a value is 10
17:48 - b value is 5 so when program when
17:51 - control will go to this line
17:53 - first line of the main function memory
17:55 - would be allocated to a and b
17:56 - 2 bytes here we have 10 here we have 5
17:58 - and one as variable is what
18:01 - result we don't have anything in result
18:02 - now second one
18:04 - now first of all evaluate these
18:07 - expressions now this is what
18:09 - post increment so first post means that
18:13 - original value would be used here in
18:15 - this expression
18:16 - and then the value would be modified
18:18 - after the execution of this line
18:21 - original value of a is 10 so 10 would be
18:23 - used here
18:24 - 10 means true so this side we have to do
18:28 - a greater than b is a greater than b yes
18:31 - a is ten b
18:32 - is five so this is also true means one
18:34 - true
18:35 - and true it will give true that is one
18:37 - one would be stored here so one would be
18:39 - the output and finally what
18:40 - is the output of this a what output you
18:43 - will get
18:45 - after the completion of this line now a
18:46 - plus plus now a becomes 11
18:49 - so now what would be printed 11 and if
18:52 - you take like this now here we have
18:53 - logical or operator
18:55 - now check a less than b yes this
18:58 - is a is less than b sorry not a is less
19:01 - than b
19:02 - no this will give force but it is
19:04 - logical
19:05 - or in logical or if first is 0 then it
19:08 - will check the second one
19:10 - means it will execute this one now a
19:11 - plus plus now it is post so first of all
19:14 - 10 would be used 10 is true so finally
19:17 - it will give
19:18 - false entry true then finally it is 1
19:21 - and then after the execution after
19:23 - execution of this line a plus plus now
19:25 - value becomes 11
19:26 - so now here you will get 11 and
19:30 - if here it is a is greater than b
19:34 - now in this case what would be the
19:36 - output check
19:38 - a greater than b yes it is true so if
19:40 - first is true in logical
19:42 - or it will not check the second one it
19:45 - will not check this one
19:46 - so finally in result one would be stored
19:48 - and no a plus plus so final value is 10.
19:51 - right
19:52 - now for these you need to tell me what
19:54 - should be the output a
19:55 - is 1 b is 6 and in result i'm taking a
19:58 - minus minus
19:59 - and logical and plus plus b second is
20:03 - in result i'm taking first of all tell
20:04 - me this output and then in result i'm
20:08 - saying what i'm taking the expression
20:10 - what minus minus a
20:11 - and plus plus b now what would be would
20:14 - be the output of these
20:15 - two if you are taking in same program
20:17 - you can write result 1 and result 2. so
20:20 - you can tell me in comment box so i hope
20:21 - you got
20:22 - what are logical operators how to use
20:24 - these operators and these are used
20:26 - in decision making used to test more
20:28 - than
20:29 - one condition and used when we are going
20:31 - to make some decisions based on the
20:33 - expressions
20:34 - like true or false so that's it for
20:36 - logical operators in c
20:38 - in next video we are going to discuss
20:40 - bitwise operators so now i'll see in the
20:42 - next video till then bye take
20:49 - you