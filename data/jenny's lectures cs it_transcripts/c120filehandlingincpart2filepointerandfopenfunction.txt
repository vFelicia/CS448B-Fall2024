00:00 - so in the series of learning c
00:01 - programming we are discussing file
00:02 - handling in c last video was
00:04 - introduction to file handling in that
00:05 - video we have discussed like why we need
00:07 - file what is a file what is file
00:09 - handling the basic part we have covered
00:11 - in this video we'll see some more you
00:13 - can say terminology so you can say terms
00:15 - or functions or pointers
00:18 - you know that would be used in this file
00:21 - handling you know concept whenever you
00:23 - write a program file handling program in
00:25 - c you cannot write down this program
00:27 - without the that function or without the
00:29 - pointer or without the terms that we
00:31 - will use in this
00:33 - uh lecture right so first of all get
00:35 - yourself you know familiar with these
00:37 - functions or terms or you know all the
00:40 - terminologies then it would be easy for
00:42 - you to write down programs on file and
00:45 - right so that thing will discuss in this
00:47 - video but before i just want to tell you
00:48 - one thing
00:49 - if you guys are preparing for gate 2022
00:51 - examination then i guess it's only one
00:54 - month left january is left so it's right
00:56 - time to start your revision and go for
00:59 - test series so here an academy is going
01:01 - to start all india mock test
01:04 - series for gate 2022 aspirants in the
01:07 - month of january every sunday and the
01:09 - best part is you can take all these
01:11 - tests for free
01:13 - these are full length mock tests they
01:15 - are going to cover the entire slavers
01:17 - and these
01:18 - tests has been curated by their top
01:20 - educators so you will get yourself
01:22 - familiarized with you know
01:24 - the exam pattern and the trends and the
01:26 - type of questions that can be asked in
01:29 - gate exam right
01:31 - and after every mock test detailed video
01:33 - solution of that test would be given to
01:35 - you by their experts so that you can
01:37 - analyze
01:38 - your you know weak areas and you can
01:40 - improve according to that
01:41 - and an academy is also going to conduct
01:43 - a combat on 2nd of january at 11 am it
01:46 - is a scholarship test for gate and esc
01:48 - aspirants you can take this test for
01:50 - free and it is a live test
01:52 - so here you will get a chance to win up
01:54 - to 100 scholarship and you will compete
01:56 - with thousands of learners from all over
01:58 - india and also you can get some exciting
02:00 - prizes like apple ipads able speaker
02:02 - amazon vouchers and much more
02:04 - and it is a live test you can unlock
02:06 - this compat with my code jkl10 plus they
02:09 - are also giving you two great offers if
02:11 - you subscribe to 12 month of an academy
02:13 - get an esc plus subscription you will
02:14 - get extra two months just to help you in
02:17 - your exams plus if you subscribe to 24
02:19 - months plan
02:21 - then you will get extra four months on
02:23 - it just to help you in your gate and esc
02:25 - 2024 exam preparation the price detail
02:28 - you can see on my screen and use my
02:30 - jkl10 to extra
02:32 - to get extra 10 discount on these paid
02:34 - subscriptions all the relevant links and
02:36 - the detail i'll put in the description
02:38 - box of this video you can go and check
02:39 - out now let's see see in the previous
02:41 - video we have discussed what
02:43 - whenever you execute your program then
02:46 - that would be loaded in ram
02:48 - some memory would be given to that
02:49 - program in maine and this is suppose
02:52 - your hard disk ram is what it's a
02:54 - volatile memory this is non-volatile
02:55 - memory right
02:57 - if you want that whatever you are
02:59 - processing the input data and the output
03:01 - you want to store permanently then in
03:03 - hard disk using file we can store file
03:05 - is what it's nothing but uh you can say
03:07 - some memory block so you can say
03:09 - sequence of bytes where you can store
03:11 - data permanently on hard disk that is
03:13 - simply a file right so if you want to
03:15 - store that thing that data you can store
03:17 - here permanently right
03:19 - so now see
03:21 - here
03:22 - but
03:23 - if this is a file suppose abc dot txt i
03:25 - have a file
03:27 - the file name is abc.txt and if you want
03:30 - to do something with this file some file
03:31 - operation you can perform like you can
03:32 - create a file you can open a file you
03:34 - can read this file whatever is in this
03:36 - file you can write something into this
03:37 - file you can append something into this
03:39 - file many operations are there all we
03:41 - will discuss
03:42 - one by one with the help of program but
03:45 - if you want to perform some operation
03:46 - with this file you cannot directly
03:48 - access this file
03:50 - this file needs to be first of all
03:52 - loaded here you can say a copy of this
03:54 - file would be loaded in main memory
03:56 - while processing right so you cannot
03:59 - directly access this file
04:01 - like that you need a special pointer one
04:04 - point that is very important right that
04:06 - is a file pointer you need a
04:08 - pointer
04:12 - a file pointer right
04:14 - so see if suppose i write int asterisk
04:17 - ptr you know pointer is a variable that
04:19 - store address of another variable that's
04:21 - it if this i'm writing then this pointer
04:23 - is going to store address of a variable
04:25 - whose data type is integer like i am
04:27 - taking into
04:29 - a so i can write ptr is equal to address
04:31 - of a
04:32 - right if i write here floating
04:36 - and pointer type is in so can i can
04:38 - write this thing this this would be
04:40 - illegal right this pointer can store
04:42 - address of
04:44 - whatever data type you write here
04:46 - address of that variable only right
04:49 - so here
04:51 - i want like obviously i want to
04:54 - process i want to access this file or i
04:56 - want to do some operation with this file
04:59 - so
05:00 - the pointer which is going to point to
05:02 - this file
05:03 - that would be what
05:05 - of this file type we cannot take like
05:07 - into pointer float pointer these are
05:09 - primitive data type right so the pointer
05:11 - data type should be file
05:13 - right see here we have a data type file
05:17 - this capital f i l e
05:20 - this is already been
05:22 - defined in which header file
05:24 - stdiu dot h
05:27 - this has already been created and how
05:30 - using type dev string struct
05:36 - struct and here
05:37 - whatever in this data type that are
05:40 - written here and here we have f by l phi
05:43 - so this is the data type i hope you are
05:45 - clear with this type def instead because
05:47 - we have discussed this thing in my
05:49 - previous videos if you are not you can
05:50 - check out those videos first right so
05:53 - this is only been defined in stdio.tx
05:55 - you can directly use this data type in
05:57 - your program you just have to include
05:59 - this header file that's it right
06:02 - now
06:03 - this this implement implementation you
06:05 - know what is there in this data time so
06:07 - actually it depends on operating system
06:09 - machine to machine right
06:11 - so here but definitely we have here we
06:14 - will have a pointer
06:16 - like something we will have a pointer
06:18 - here we will have buffer size here and
06:20 - many variables are there
06:22 - right it depends system dependent its
06:24 - simply it is what implementation
06:26 - dependent actually so here
06:29 - definitely but we will have a pointer
06:30 - that is going to point
06:33 - this file
06:36 - right means what see
06:38 - we are supposed to create a file type of
06:41 - pointer
06:42 - here in in a program we will create this
06:45 - file file
06:47 - s trick a pointer any name you can take
06:51 - i am taking f p file pointer ptr you can
06:54 - take this name can be anything
06:56 - so this pointer
06:58 - will
06:59 - point or will contain address of file
07:02 - type of variable
07:04 - right
07:05 - this pointer will contain address of a
07:07 - variable or you can say address of
07:09 - integer type of variable so this will
07:11 - contain address of a variable whose data
07:13 - type is
07:14 - fine right
07:16 - so ultimately
07:18 - behind actually we think that it is
07:21 - going to point directly to this file
07:23 - whatever the file
07:24 - but behind the scene process is what
07:28 - see
07:29 - this pointer is going to points in in
07:31 - this inner program this is a program
07:37 - in main memory so we have a pointer fp
07:40 - so it is not going to point directly to
07:42 - this file right
07:45 - it is going to point a file type of
07:47 - variable
07:50 - here
07:51 - this type of variable in this type of
07:53 - variable also we will have some
07:55 - information like pointer buffer size or
07:58 - something some other information also
08:00 - right
08:01 - so here we have a pointer and that
08:04 - pointer will point to this file
08:09 - right
08:10 - and if more specifically i say then not
08:12 - actually to this file because this is in
08:14 - hard disk
08:15 - this file first of all would be
08:18 - copied here
08:20 - right this is like buffer
08:22 - and this is going to point here
08:25 - right this is the case
08:29 - because whenever you execute this
08:31 - program obviously
08:32 - that file would be one copy would be
08:34 - there in this the program would be in
08:36 - ram main memory
08:38 - so this is a file type of pointer this
08:40 - is buffer or you can say the copy of
08:41 - this file
08:43 - in which you are maybe reading something
08:44 - from which you are reading something or
08:46 - you are writing something you are
08:47 - appending something
08:49 - now that would be reflected here
08:53 - right if you are reading something then
08:55 - obviously if i have here jenny
08:58 - in this file i have created a file using
09:00 - notepad i have saved that file abc.txt
09:04 - once you will open that file so that
09:06 - jenny would be here so you can read this
09:09 - jenny and you can print on your output
09:11 - screen
09:12 - if you want to write something
09:14 - if you don't have anything you can write
09:16 - this that would be written first of all
09:18 - in this buffer
09:20 - and that
09:21 - would be loaded here finally
09:24 - right
09:25 - but you are not supposed to go
09:27 - you know in such deep process
09:30 - you can just think like we have a
09:31 - pointer
09:32 - this pointer is going to
09:34 - access this file using this pointer only
09:36 - we can access this file whether you want
09:38 - to read this file write this file
09:40 - update this file anything if you want to
09:42 - do using this pointer you can do only
09:44 - right now how this see this pointer
09:47 - variable we are going to create in our
09:48 - program but this file variable we are
09:50 - not going to
09:52 - create in our program
09:54 - so how this file
09:55 - type of variable would be created
09:59 - right
10:00 - for this we have a function f open
10:02 - function
10:06 - f open it means directly the name
10:08 - suggests like it is going to use for
10:10 - opening a file right
10:13 - so
10:13 - whenever you will call this function and
10:15 - this function is also defined in this
10:17 - header file stdio dot h this
10:21 - file data type also this f open function
10:23 - also
10:24 - so this f open function whenever you
10:27 - call this function this would
10:28 - automatically create this file type of
10:31 - pointer and right and it will return
10:34 - address
10:36 - right and that address is going to store
10:38 - into this fp so now fp is going to point
10:40 - here
10:41 - right and
10:43 - these two tasks would be performed with
10:45 - this
10:46 - f open function it will create this file
10:48 - type of pointer as well as a copy of
10:50 - this file would be opened here
10:52 - right
10:53 - and ultimately it will return address
10:56 - right
10:57 - and that address would be stored in this
10:59 - fp
11:01 - so now this fp is pointing to this in
11:03 - this file type of variable we have a
11:05 - pointer
11:06 - that is going to point this buffer and
11:08 - ultimately using this now we can
11:11 - process this file actual file so this is
11:13 - the behind the scene process right
11:16 - but you are not supposed to go in into
11:18 - such deep process you can directly think
11:21 - like this fp is going to point this file
11:23 - right now
11:25 - about f open i hope this this file is
11:27 - clear to you this file pointer is clear
11:29 - to you why we use this file pointer one
11:30 - thing second thing is this f open
11:32 - function right now this is defined here
11:36 - now here
11:39 - it is a function so what are the
11:40 - arguments we are going to pass here
11:43 - f open means you are going to open you
11:44 - want to open a file so here simply will
11:47 - pass a file name
11:50 - first argument
11:52 - and next would be
11:54 - mode
11:56 - in which mode you want to open this file
12:00 - right suppose here in our hard disk i
12:04 - have already have a file abc dot txt if
12:06 - you want to open this file simply in f
12:08 - open function password
12:10 - abc dot txt
12:12 - or you can pass the full path
12:15 - where this is the file like see the
12:17 - folder name and everything and after
12:18 - that the file name after that
12:21 - mode
12:22 - means in which mode you want to open
12:24 - this file
12:25 - many modes are there basically six modes
12:28 - main we will discuss right
12:30 - r read mode write
12:33 - append
12:34 - r plus w plus a plus
12:37 - these six modes are there if you want to
12:40 - read this file only just you can write
12:42 - down here r
12:43 - in
12:44 - double quotes if you want to write
12:46 - something
12:47 - w append something a r plus means for
12:50 - reading and writing both this also
12:52 - reading and writing but something
12:53 - different from ah no this
12:56 - this r plus so see
12:58 - the modes we will discuss
13:01 - every mode we will discuss one by one
13:02 - with the help of program then you will
13:04 - get it better rather than just you know
13:07 - you know
13:08 - teaching you the theory part like this
13:09 - will
13:10 - open the file and read more to write
13:12 - more i'll show you practically with one
13:14 - program one program for this this this
13:16 - for all the modes one one program right
13:20 - so for now for this video i hope
13:22 - you just have to clear this thing in f
13:24 - open we will pass to argument the file
13:27 - name and the mode
13:28 - and now this will return a pointer or
13:31 - you can say address
13:33 - right address of
13:35 - this this this this object
13:38 - file object
13:40 - sorry this variable the file type of
13:42 - variable so this would be stored where
13:46 - that address would be stored in a
13:48 - pointer and obviously we have a file
13:50 - pointer here so that would be
13:52 - fp fp we are going to store that address
13:57 - so with with the help of this line
13:59 - this process is to be done right
14:02 - it is pointing to here here we have a
14:04 - pointer that would point to this buffer
14:07 - and this ultimately will
14:09 - you know lead to this file in this hard
14:11 - disk right
14:12 - so you just have to write down a simple
14:14 - line f open file name mode that's it
14:17 - now
14:18 - you can access now with the help of this
14:21 - pointer you can access this file you can
14:23 - do anything with this file this file
14:25 - read write append whatever you want to
14:27 - do with the help of the mode whatever
14:29 - mode you have written
14:30 - according to that mode you can do
14:32 - something with that file right and one
14:35 - more thing you have to remember third
14:37 - thing
14:38 - after
14:39 - no writing everything like we have done
14:42 - whatever you want to do with this file
14:43 - you are supposed to close the file f
14:46 - close
14:48 - and
14:49 - the file pointer fp
14:51 - this is very important because if you
14:53 - are opening a file if you are using that
14:55 - file it's your responsibility to close
14:57 - that file
14:58 - once you close this file this would be
15:00 - freed
15:03 - right now it means this file can be used
15:06 - by any other person or by any other
15:08 - pointer we are not pointing to this file
15:11 - anymore we have closed this file
15:13 - right so this is very important now this
15:15 - family this memory would be released for
15:18 - this buffer memory and this for this
15:21 - file of variable memory right
15:24 - so this is very important three things
15:25 - we need to take care right first what is
15:28 - fp why we need this then f open function
15:30 - why we need this what is this and then
15:32 - we are supposed to close this file these
15:34 - three things are very important for
15:36 - every program
15:37 - with what program you write in your file
15:40 - handling concept you are supposed to use
15:42 - these three things in all the programs
15:45 - so i hope these basics are clear to you
15:47 - now so from the next video we will see
15:49 - and
15:50 - operations like if you want to read
15:52 - something from this file what operation
15:54 - you need like
15:55 - we need this one this
15:57 - one is f printf
16:00 - if you want to write something to the
16:02 - file
16:03 - f scanf
16:05 - if you want to read from the file f
16:09 - put c
16:10 - if you want to write something write a
16:12 - character f put c to the file
16:15 - f get c if you want to read a character
16:20 - f get s if you want to read a string
16:22 - from the file
16:24 - f put s if you want to write a string to
16:26 - the file
16:27 - right so all the functions all the modes
16:30 - we will discuss in the later videos one
16:32 - by one with proper program and
16:34 - practically also i'll show you on my
16:35 - laptop right how you're going to do that
16:37 - thing
16:38 - i think from this you know for this
16:40 - video whatever i have told you that is
16:41 - clear to you now fine so whenever we use
16:44 - in a program fp
16:46 - this file this f open f close i guess
16:49 - you are not going to have any doubt
16:50 - about these topics right so now i'll see
16:53 - you next video till then bye take care