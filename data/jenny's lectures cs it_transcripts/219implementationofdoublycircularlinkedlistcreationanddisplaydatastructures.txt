00:00 - not linked list right what does doubly
00:02 - circular linked list for that this thing
00:05 - we have already discussed the
00:06 - introduction of this list when you were
00:08 - discussing the types of linked lists so
00:11 - you can check out that video here in
00:12 - this I button fine see this is what a
00:15 - doubly circular linked list in this
00:17 - video we will see how to implement this
00:19 - list or you can say how to create this
00:21 - list and how to reverse this list or you
00:24 - can say how to display the content of a
00:26 - doubly circular linked list see as the
00:29 - name suggests it is having the property
00:31 - of both doubly and circular linked list
00:34 - so as you can see here see this is what
00:37 - are doubly linked lists each node is
00:40 - having three parts one is data part and
00:43 - one is pointer this is pointing to the
00:44 - next node this pointer is containing
00:46 - address of the previous node right now
00:49 - have to add the properties of circular
00:53 - linked list in circular linked list what
00:55 - we have discussed the last node would
00:57 - contain address of the first node as you
01:00 - can see here the next pointer of this
01:03 - last node is containing address of the
01:06 - first node that is 500 fine so there is
01:09 - a link like this this to this node plus
01:13 - 1 extra property of this Leste's what
01:17 - why we are this is known as doubly
01:19 - circular linked list here the previous
01:22 - pointer of the first node would also
01:25 - contain address of the last node right
01:29 - the previous pointer of first noon see
01:31 - here that 600 is there and 600 is
01:34 - address of the last node and here the
01:36 - next pointer of the last four would
01:38 - contain address of the previous node
01:40 - right so in this list we don't have any
01:44 - null pointer right so this is what are
01:47 - doubly secular linked list now in the in
01:49 - this case we have maintained both head
01:51 - pointer and tail pointer head is
01:53 - containing address of the first node
01:54 - tail is containing address of the last
01:56 - node if you maintain only head node then
01:59 - also you can create this list see this
02:01 - this link is bi-directional right rather
02:04 - than creating two links here I made this
02:06 - bi-directional link so this 2 this also
02:08 - in this 2 this also
02:11 - we'll see how to create this list right
02:13 - how to represent this node of the list
02:16 - that King I guess you already discussed
02:18 - when we were discussing doubly circular
02:20 - linkedlist right so initially we assume
02:23 - that list is empty we don't have
02:25 - anything in the list right it means you
02:27 - can say head is equal to null at
02:29 - starting all right see how you will
02:32 - create this list so this is how we are
02:36 - going to define our own data type that
02:37 - is how to represent this node struct
02:39 - node three parts are there data parts
02:41 - next pointer and previous pointer right
02:44 - how much memory would be allocated four
02:46 - bytes for this for for this and four
02:47 - bytes for this pointer will would be
02:49 - allocated four bytes because in 32-bit
02:52 - compiler if 64 bit compiler is there
02:54 - then eight bytes would be allocated so
02:56 - total 12 bytes block is there right we
02:59 - are going tending to pointers head in a
03:00 - right this is what we will define a
03:04 - datatype global outside of all the
03:06 - function so now we are going to define
03:07 - this function that is create dynamic and
03:10 - this doubly circular length list right
03:12 - so obviously first of all we think that
03:15 - we may assume that the list is empty so
03:17 - for inserting the nodes we have to
03:20 - create this node right it means you have
03:23 - to allocate the memory to this node and
03:25 - how we are going to allocate the memory
03:27 - we use what dynamic memory allocation in
03:29 - linked list right why we use dynamic
03:31 - memory allocation that thing we have
03:33 - discussed when we were discussing
03:34 - introduction to length list you can
03:36 - check out that video here and how we
03:38 - allocate the memory dynamically using
03:40 - malloc function so I guess everybody
03:43 - knows how to write down that syntax you
03:46 - have discussed many times right so it's
03:48 - starting I write here head is equal to
03:50 - null it means there is no list we don't
03:52 - have any list right now I am going to
03:55 - create an node and that pointer of this
03:58 - node this this so the address of this
04:00 - node I am going to store in another
04:02 - pointer that is a new node pointer I
04:04 - have created a new more pointers this
04:06 - this new node is pointer to node that is
04:08 - why I am writing here datatype is struct
04:11 - node right so now what you will do how
04:13 - you will write this so this is the
04:15 - situation now we have created a node we
04:18 - have allocated the memory to this node
04:20 - using malloc function right malloc
04:22 - sizeof how much choice
04:23 - for this struct node for this node so
04:25 - that is why here in bracket will write
04:26 - stock no 12 bytes will be elevated
04:28 - address of the first byte is 500 so
04:30 - malloc would return one point to do the
04:32 - starting address of this node but my
04:33 - luck will return void pointer that is
04:34 - why you have to typecast this thing
04:36 - because this new node in this new node
04:38 - I'm Stu I'm going to store this address
04:40 - and this node is what pointer to node
04:42 - right so here you will write struct no
04:45 - district we are going to typecast to
04:46 - this thing and whatever this will return
04:48 - in new node I am going to store this
04:50 - right now I'm I'm going to ask from the
04:52 - user for the data right which data I
04:55 - want to store here so this is how we are
04:58 - going to store the data right printf
05:00 - enter data scan opposite is d where I
05:03 - want to store data here so how you can
05:05 - exist this part of this node we cannot
05:07 - directly access structure members you
05:09 - need a pointer to this node pointer to
05:10 - this node is new node address of new
05:12 - node and name of this data part so here
05:14 - I am writing arrow data part to suppose
05:16 - user head has entered seven right here
05:19 - you can store 0 and 0 it means null and
05:21 - name but no need to store head because
05:23 - we are going to update both the pointers
05:24 - right so you can leave it like this now
05:27 - it's starting with check work if head is
05:30 - equal to empty it means sorry if head is
05:33 - equal to null it means there is no road
05:35 - is no node in the list right so then
05:38 - have you are going to insert this node
05:40 - in the list see now both head and tail
05:43 - would point to this node because this is
05:45 - the first node this would be the last
05:47 - node oniy right so here what I will
05:49 - write head is equal to tail is equal to
05:52 - new node yes now see both the scale is
05:58 - also pointing to this node and head is
06:00 - also pointing to this node but now you
06:03 - have to insert here also something and
06:05 - here also something now what we have
06:08 - discussed the next pointer of the last
06:11 - node is containing address of the first
06:13 - node right so this pointer would contain
06:16 - this is only the last and first node so
06:18 - here we have to insert 500 address of
06:22 - itself right and here also the previous
06:27 - pointer of first node is containing
06:29 - address of the last node right and this
06:31 - is first and last node so here also you
06:33 - will store 500
06:35 - now this would be the doubly circular
06:37 - linked list so now how you can exit this
06:40 - part see tail new node and head all the
06:44 - three pointers are pointing to this node
06:45 - so you can access it using any pointer
06:48 - suppose I am writing here head off next
06:51 - equal to head that is also fine if you
06:54 - write tail off next equal to tail that
06:56 - is also fine if you write moon or the
06:58 - next equal to new node that is also fine
07:00 - right and now head set the third thing
07:05 - head of previous this thing is equal to
07:07 - head right so now this is done if there
07:12 - is no node in the list else if we are
07:15 - having some node in the list suppose one
07:17 - node is there and now I want to insert a
07:19 - second node this node I have created a
07:22 - second node and user has entered suppose
07:25 - six here right so now in that case this
07:28 - new node suppose address is 600 so a new
07:30 - node now this new node is having 600
07:33 - address right so new node is pointing to
07:36 - this node here we are going to run this
07:39 - code again right this one again we are
07:42 - going to create this thing and whatever
07:43 - this will return we are going to store a
07:44 - new node pointer right now I want to
07:46 - store this node in this list now in this
07:49 - case head is not null so now how many
07:53 - pointers you need to update here you
07:55 - need to update I guess five things see
07:59 - this this would contain address of the
08:01 - next node the next pointer means 600
08:03 - second thing this would contain address
08:05 - of previous node that is 500 third thing
08:08 - now this would contain this would be the
08:11 - last node so this would contain address
08:13 - of the first node that is here also 500
08:16 - you need to store plus you need to
08:18 - appear decimals because the previous
08:20 - pointer of the first node would contain
08:22 - address of the last node that is here
08:24 - you will store 600 plus fifth thing is
08:26 - now tail would point to this node
08:28 - because this is to win this is now the
08:30 - last node right so now how you will
08:33 - write down that thing see in this case
08:35 - also you need to take care which line
08:38 - you need to write first right see now
08:41 - here I need to store 600 address of the
08:44 - next node right 600 so how you will ex
08:48 - this part tail is pointing to this node
08:50 - tail off next so here I can write tail
08:53 - off next see the obviously hair head is
08:56 - also pointing to this node so you can
08:59 - ask can I can we write head off next no
09:01 - we cannot write head of next because
09:03 - after inserting second node if you we
09:05 - will insert the third node in that case
09:07 - here you need to store address of this
09:09 - node right and how you can access this
09:12 - part because after that tail would be
09:13 - pointing to this node using tail off
09:15 - next we cannot remove this head head
09:17 - will head will always point to the first
09:19 - node so better to use ill know right
09:22 - rather than head we cannot use head tail
09:25 - of next here
09:26 - 600 I want to store from where I can get
09:28 - 600 in new node I have 600 right so now
09:32 - this is pointing to this node this is
09:35 - not pointing to itself now so now this
09:38 - node here we will store address of the
09:40 - previous node right the previous pointer
09:42 - of this node will contain address of the
09:44 - previous node right how you can access
09:45 - this part new node 3 so here I will
09:48 - write new node 3 you because pointer to
09:51 - this node is new node what I want to
09:54 - store address so previous node that is
09:55 - 500 so until we have 500 so I will write
09:58 - here what okay see here also we will not
10:00 - write head because head is also going to
10:02 - containing 500 but we will not write
10:03 - here head because head will also pan
10:06 - head will always contain address of the
10:08 - first movement because but when you will
10:10 - insert third node in that case we need
10:12 - address of the previous node means this
10:14 - node in that case tail would be pointing
10:16 - to this node so we use here a right so
10:19 - here I have now 500 so now we have set 2
10:22 - links now you need to update 2 links
10:25 - more see this last me this is the last
10:30 - node now so this node would contain
10:32 - address of the the next point of this
10:35 - node would contain address of the first
10:36 - node to make it a circular list right so
10:40 - now how you can access this part here I
10:41 - will write new node next address of the
10:47 - first node we will always find in head
10:51 - pointer so here I will write head in
10:54 - head we have 500 so 500 so now this is
10:57 - this is pointing to this node
11:00 - right plus you need to update this thing
11:02 - also the previous pointer of the first
11:06 - node have you connects is the first node
11:08 - there is always a pointer that is head
11:09 - so here I can write head of dream
11:13 - address of the this this node last node
11:17 - so here what you will write new node
11:21 - right because in you know do we have 600
11:24 - so here I can write what now it will
11:27 - contain 600 so now this is pointing to
11:30 - this node so I'm making this a
11:32 - bi-directional link right this end this
11:35 - now another thing you need to update now
11:38 - PL will point to this node this would be
11:41 - the last node so in Taylorville store
11:42 - 600 from where I can get the address new
11:44 - node is containing 600 so here so now
11:49 - this is having 600 and and tail is
11:51 - pointing to this node so this is as you
11:55 - can see we have inserted that's not
11:57 - successful now suppose if you want to
11:59 - check out these lines are working
12:01 - properly or not here you can create
12:03 - another node third node suppose user has
12:06 - entered data -1 and this is what the
12:10 - address is 700s and so in new node we
12:12 - have 700 now so and you know this
12:14 - pointing to this node right now I want
12:17 - to insert this node in the list this
12:19 - node in the list right so now if head is
12:21 - equal to null that is not true so we are
12:24 - going to enter into else part now see
12:26 - Elif next in else we have written tale
12:28 - of next means tail of next there is one
12:31 - you do this node that is this one is
12:33 - equal to new node in new node we have
12:35 - 700 that is now this is pointing to this
12:39 - node that is fine new node previous new
12:43 - node previous here I will store tail
12:45 - until we have 600 so 600 so this is the
12:50 - dress so previous node so that is also
12:51 - fine this is pointing to this node third
12:54 - thing new node next new node next this
12:57 - data
12:58 - sorry this part is equal to head in head
13:00 - I have 500 that is 500 this is now
13:05 - pointing to this node right this node
13:10 - for slang head of previous means head is
13:13 - pointing to this node head of previous
13:14 - means you are accessing this part is
13:16 - equal to new node in new node I have 700
13:18 - so here 700 so this would point to this
13:22 - node so I'm making so I will make the
13:25 - link bi-directional right v if v is
13:29 - equal to new node
13:30 - tail is equal to new node a new node I
13:32 - have 700 so here now tail is moved into
13:34 - this move so now after this you can
13:38 - write down that same while loop while
13:40 - sorry here you can write printf press 1
13:43 - for continuation and press 0 for exit so
13:46 - here you can write scan a percentage D
13:47 - and the user choice you can take out you
13:51 - know variable you can say choice here
13:53 - you need to initialize the choice is
13:56 - equal to 1 right if user press 1 the
13:59 - data the again node would be created
14:01 - right so now for creation these lines
14:04 - after that these lines should be
14:05 - executed again and again so we will
14:07 - write this code into it while you while
14:10 - the variable is choice and after that
14:14 - you will start while loop and now here
14:15 - you will end this while you write so
14:17 - before closing this while loop you will
14:19 - write what printf press 1 for
14:20 - continuation 0 for exit scanner
14:23 - percentage the address of choice right
14:24 - now if you want to cross-check that we
14:27 - have created this list or not then see
14:30 - here I am saying the next pointer is
14:33 - containing address of the first node so
14:34 - can we print using this pointer the data
14:37 - of first node right so before closing
14:40 - this create function you can write what
14:42 - printf percentage D and here you can
14:45 - write C a sorry the pointer to this node
14:49 - is now tail is pointing to the last node
14:51 - so here I can write L off next right I
14:56 - will access tail off next so and data
15:01 - again pointer and data so it should
15:04 - print what 7 using this tail and I am
15:06 - printing this first node right as well
15:10 - as you can print using head using the
15:12 - first node can we print to this data so
15:14 - again you can write here head off
15:17 - previous see this previous is containing
15:20 - address of the last node so second thing
15:22 - what you can write here head off please
15:25 - it means 700 means we have reached in
15:27 - this address and again arrow data
15:30 - it means minus 1 it should print minus 1
15:32 - and it should print 7 so this is how we
15:35 - have created our doubly circular linked
15:37 - list now we will traverse this list
15:39 - means we are going to display the
15:40 - content 7 6 and minus 1 how you will
15:43 - write down that code C so this was the
15:45 - list we have created now I want to
15:47 - define a function that does display how
15:51 - to display the content of this list
15:53 - right so obviously for displaying or for
15:56 - traversing we need a pointer that we can
15:58 - move because head will also head will
16:00 - always point to the first node T will
16:02 - always going to the last node we cannot
16:04 - move these pointers so here we need a
16:07 - third pointer you can say m pointer and
16:09 - initially this temp would point to the
16:12 - first node means in temp we are going to
16:15 - store head right so now this is what a
16:19 - temp pointer in temp we have head that
16:24 - is 500 so temp is pointing to this node
16:27 - to the first node right now you will
16:31 - check if the list is empty or not so
16:33 - here what you can write if head is equal
16:36 - to 0 head is equal to is equal to 0
16:38 - means you can print list is empty there
16:40 - is no data in the business otherwise in
16:42 - else part what you will write now we
16:45 - will print this head data and move the
16:48 - stem print this head data and we'll move
16:50 - the stem in what till we reach to the
16:53 - last node so what is the termination
16:56 - condition then temp would point to this
16:59 - node it means 10 becomes equal to pay
17:03 - right because tail is containing address
17:05 - of the last node and at some point of
17:08 - time temp will also contain address off
17:10 - this one that is 700 it means we have
17:13 - reached till the last node then we are
17:15 - going to stop right so now in while look
17:18 - what you will write why then not equal
17:22 - to pain in that case we will move and
17:26 - so temp is pointing to this node so
17:29 - first of all what you will print at the
17:31 - data bring their percentage B temp of
17:35 - data and after that we will move this
17:37 - temp right now temporal point to this
17:40 - node that is 600 we will store in temp
17:42 - so in temp we will store temp is equal
17:45 - to temp off next temp off next now see
17:50 - the working of this while loop and
17:52 - starting m+ 500 temp is not equal to pl
17:55 - clearly 700 condition is true so we will
17:57 - enter into this loop end of template a
17:59 - temp of data is 7 temp is equal to temp
18:02 - next now see in temp next we have amp of
18:05 - next 600 so in temp we will store 600 so
18:09 - now this is pointing to this node right
18:13 - now again check temp not equal to L
18:15 - times 600 till is 700 yes condition is
18:18 - true we will enter into this loop again
18:19 - again printf temp of data that is 6 now
18:23 - temp is equal to temp next in temp next
18:25 - we have 700 so here number we will store
18:27 - 700 so now temp is pointing to this node
18:30 - now take the conditioned temp not equal
18:34 - to take MP 700 tail is also 700 means we
18:37 - have raised to the last node right but
18:40 - see condition is not prove enough so we
18:42 - will not enter into this loop control
18:44 - will not go into this loop control will
18:46 - go out from this while loop here but now
18:49 - the output is only 7 and 6 we need to
18:51 - print this data also right so here after
18:54 - this while loop you will write one more
18:55 - line that is percentage D and have you
18:59 - gonna print minus 1 see temp is pointing
19:02 - to this node so temp of data here you
19:04 - can write one more line after that
19:07 - closes the cells else statement and
19:09 - after that this function display
19:10 - function so this is how we are going to
19:12 - display the data but if you are if you
19:15 - don't want to print the last this this
19:17 - data separately then what you can do
19:19 - rather than this while look you can do
19:21 - use do I look right here you can use do
19:24 - because these statements should be
19:26 - executed first in do I look and after
19:28 - that condition would be checked right
19:30 - after that you can write this while
19:31 - condition that thing do by loop also we
19:33 - have discussed when you that implement
19:36 - the circular link list so how to write
19:38 - down do I look that also you can check
19:39 - out in the side button for that when you
19:41 - fine see here in the termination
19:43 - condition
19:44 - if you don't find this thing then you
19:46 - can also write a second termination
19:47 - condition see temp off next temp off
19:51 - next
19:51 - when type of next becomes what the stale
19:55 - of next tale of next as always
19:58 - containing address of the first node
20:00 - right so it means we have race to the
20:03 - last node
20:04 - so while camp off next not equal to
20:06 - Palos next till then we are going to
20:08 - move otherwise we will stop right this
20:10 - condition you can also right so this is
20:12 - the implementation of a doubly circular
20:14 - linked list fine in next video we will
20:16 - see the insertion operation in doubly
20:19 - circular linked list
20:20 - fine inserts not beginning at end and at
20:23 - any specified position so else in the
20:25 - next video till then bye thank you