00:00 - that is why I am going to take order
00:01 - five and these are the elements and we
00:04 - are going to create a B+ tree
00:06 - so if order is five if maximum children
00:08 - can be five minimum children can be
00:10 - three maximum keys can be four and
00:13 - minimum keys can be - I hope you know
00:16 - the formula how to find out the minimum
00:18 - and maximum child and all and these
00:20 - property this minimum property minimum
00:22 - children can be three right and here
00:25 - minimum keys can be two but as property
00:28 - of minimum children and minimum key this
00:30 - would not be followed by the root
00:32 - element if only one node we have and
00:35 - that is root and that is the leaf node
00:37 - only because Ovi only one node so in
00:39 - that case that property would not be
00:40 - followed right this minimum children and
00:42 - minimum T because root can have minimum
00:46 - zero child and root can also have two
00:51 - children that is also possible and root
00:53 - can have only one key also that is also
00:56 - possible but a maximum K should be four
00:58 - in doot also right so how to insert how
01:01 - to create a B plus tree first data is
01:03 - seven right so we don't have any dreams
01:06 - so first of all we are going to create a
01:08 - node and in this node in this node how
01:12 - many keys can be there for one two three
01:17 - four right and C you can also draw
01:19 - something like this
01:20 - these are pointers five pointers why so
01:27 - because five children maximum children
01:29 - can be one two three four and five now
01:32 - this is the pointer for this children
01:34 - this is the pointer for the children
01:36 - like this right and starting these
01:38 - pointers are none so but here I am going
01:40 - to create a simple node without showing
01:43 - the pointers right so this is the node
01:47 - one two three four four keys can be
01:49 - there firstly is seven insert seven next
01:52 - is ten see this this will also follow
01:55 - follow the property of BST binary search
01:57 - tree right so this ten would be greater
02:01 - than the seven so it would be to the
02:02 - right of this seven fine one now one is
02:06 - less than seven so this that is why one
02:08 - would be to the left of 7 so that
02:11 - would be something like this here we'll
02:13 - write one here we'll write seven and
02:15 - here we will write and these are going
02:17 - to be ship next is twenty three twenty
02:21 - three is greater than all of these so
02:22 - here you can write or anything fine
02:24 - next is five now where you can insert
02:26 - this 5 here 5 is greater than 1 but less
02:35 - than 7 so here you can insert 5 right
02:41 - according to the route but here on
02:44 - maximum keys can be forced and this is
02:46 - overflow condition now what what you
02:49 - will do you have to split the node and
02:51 - splitting will also be done from the
02:53 - middle element only and B plus 3 and B
02:56 - tree always grow towards the root so
03:00 - find out the middle element out of these
03:02 - middle element is this 7 right after
03:06 - inserting we are going to you are
03:08 - pretending that we have inserted this 5
03:10 - and after that we are going to find out
03:11 - the middle element it's not like don't
03:13 - insert 5 and now find out the middle
03:15 - element and spread the node no 7 would
03:22 - go one level up another node would be
03:26 - created having maximum capacity 1 2 3 4
03:28 - right and to the left of 7 we have 1 8 5
03:31 - to the left of 7 we have 1 and 5
03:35 - capacity of this node is also 1 2 3 4 4
03:40 - keys and to the right of 7 to the right
03:43 - of 7 what we will have to the right of 7
03:47 - we have ten and twenty three but the
03:49 - property of B plus tree is what the data
03:52 - this data should be present in leaf node
03:55 - the data is present in leaf node only
03:57 - right so we are going to put 7 here 10
04:02 - and 23 I am going to follow the rule
04:05 - that to the left of this node to the
04:07 - parent left of the spent the data would
04:09 - be strictly less than this node and to
04:11 - the right of this we can write down
04:13 - either greater value or equal value so 7
04:16 - is equal to 7 so that is why we are
04:18 - writing 7 to the right child of this one
04:20 - right so see this is now the in
04:23 - and these are leaf node C in internal
04:27 - nodes only the indexes are there now
04:30 - next s 15 now where you can insert 15
04:34 - data would be inserted only in leaf mode
04:36 - 15 is greater than 7 greater than 7
04:39 - greater than 10 but less than 23 so here
04:41 - we will write 15 and here you will know
04:43 - 23 17 where you can insert 17 to the
04:47 - right of 50 and to the left of 17 so
04:50 - here you can insert 17 but this is not
04:54 - possible this is our flow condition
04:55 - because maximum means can be for now
04:57 - spread this node from the median element
04:59 - median element is what 15 15 would go
05:02 - one level up so we can kill me insert 15
05:05 - here yes because still we have three
05:07 - spaces left so I'm going to update this
05:08 - tree only 15 would go one level up right
05:13 - and this node would be splitted to the
05:16 - left of 15 we will write 7 and 10 right
05:18 - and to the right of 15 what you will
05:20 - write 15 17 and 23 so to the right of 15
05:27 - you will write 15 17 and 23 next is 9
05:35 - greater than 7 but less than 17 go to
05:37 - this one greater than 7 less than this
05:40 - 10 so here you can insert 9 right so the
05:45 - node would be 7 9 and 10 and still space
05:51 - of one element next is 11 where you can
05:53 - insert 11 greater than 7 less than 15
05:56 - greater than 11 here you can insert 11
05:58 - next 39 here you can insert 3935 now
06:03 - where you can insert 35 after 23n before
06:07 - 39 so here you can insert 35 but this is
06:11 - our flow condition splitting would be
06:13 - done from the median element so the
06:15 - middle element is 23 so 2001 level up
06:19 - here can win so 23 here yes we have
06:22 - still space so I'm going to update this
06:24 - tree only here you will write 23 after
06:27 - 15 because 23 is greater than 15 and to
06:30 - the left of 23 we have 15 and 17 and to
06:32 - the right of 23 we will have 23 35 and
06:35 - 39
06:36 - so to the right of 23 you will write 23
06:41 - 35 and 39 so now next is 8 where you can
06:48 - insert 8 8 is greater than 7 less than
06:51 - 15 go to the side greater than 7 less
06:53 - than 8 9 so here you can insert 8 after
06:57 - 7 and before 9 but this is our flow
07:00 - condition so you are going to split now
07:02 - right splitting would be done from the
07:04 - middle element middle element is this 9
07:06 - 9 would go one level up so here you are
07:08 - going to insert 9 so in this node where
07:11 - you can insert 9 after 7 and before 15
07:15 - right so now the tree would be something
07:18 - like this 7 9 15 and 23 now this node is
07:26 - also full to the left of 7 we have 1 + 5
07:29 - so now here to the left of 9 and right
07:32 - of 7 we are going to split this node now
07:34 - so 9 will go up so to the left of 9 we
07:36 - have 7 and 8 here you will have 7 and 8
07:41 - right and to the right of 9 9 10 and 11
07:44 - 9 10 and 11 these are still same 15 and
07:51 - 17 and with the right of 23 we have 23
07:57 - 35 and 39 so now next is 40 where to
08:01 - insert this 40 here you can insert after
08:05 - 39 right next is 25 25 is greater than
08:10 - 23 greater than all these 23 so go to
08:12 - this link now 23 25 is greater than 23
08:16 - but less than 35 so here you can insert
08:19 - 25 but this is all flow condition again
08:21 - splitting would be done middle element
08:23 - is 35 35 would go one level up here but
08:26 - we cannot insert 35 here because this
08:29 - node is full now repeat the same step of
08:33 - splitting now here on C here also you
08:36 - will do splitting so middle element from
08:38 - this is 15 15 would go one level up fine
08:43 - so I am going to do this splitting first
08:46 - of all right after that we are going to
08:48 - split this No
08:49 - so after this splitting I'm going to
08:52 - update in this case only 35 would go
08:54 - here 35 would go here 35 is greater than
08:57 - 2 anything so we will insert here only
08:59 - right to the left of 35 we have 23 and
09:02 - 25 23 and 25 right and to the right of
09:09 - this one we will have 35 39 and 40 to
09:13 - the right we will have 35 39 and 40 but
09:18 - this is just thing just the intermediate
09:21 - stage because we are going to split this
09:23 - node also this is also full this is also
09:25 - our flow condition so middle element of
09:28 - this is 15 15 go to go one level up so
09:31 - final the tree would be 15 would go one
09:33 - level up to the left of 15 we have 7 + 9
09:36 - 7 and 9 to the right of 15 what you
09:40 - should have 15 23 and 35 right so if you
09:45 - will right here 16 23 and 35 15 is here
09:52 - also here also and 15 is also in the
09:54 - leaf node right so if no data should be
09:58 - present in E if not that is fine but
10:00 - these are internal nodes now this is
10:02 - also internal or this is also internal
10:04 - node so no need to repeat the data in
10:06 - internal nodes because they hear only
10:08 - the indexes are there so what's the
10:10 - point to repeat the data in the index is
10:12 - only 1 indexes in to reach till the data
10:16 - so here you will not write 15 this you
10:21 - have to take care fine to the left of 7
10:24 - we have 1 + 5 this one we have 7 + 8 to
10:28 - the right of 9 we will have 9 and in 11
10:32 - now now see to the right of 15 we have
10:36 - 15 and 17 right so to the right of 15 we
10:40 - will have 15 and 17 but this would be to
10:42 - the left of this 23 15 and 17 and after
10:47 - 23 after 23 you will have 20 through 25
10:49 - and after 35 you will have 35 39 14 35
10:54 - 39 and 40 so you can draw this through
10:59 - something like this just just me
11:02 - as a known having space of four and one
11:05 - more important point about the sabitri
11:07 - is what see these leaf node are also
11:10 - connected with a link like this right
11:13 - the data in the leaf node is present as
11:15 - a form of link list so these are also
11:18 - connected like this like this like this
11:20 - like this right so finally if you have
11:23 - this tree so this leaf node would be
11:25 - connected to this then this then this
11:26 - then this then this all the leaf node
11:29 - are connected with a link so here you
11:32 - can see in the root node we are having
11:34 - only one key but according to the rule
11:37 - minimum key should be to see here
11:39 - children also minimum children can be 3
11:42 - but here children are only 2 so root
11:44 - node would not follow the property of
11:46 - this minimum children and minimum key so
11:49 - this is how we are going to create a B+
11:50 - tree when old value of this order is
11:52 - given fine so I'll see you in the next
11:54 - video till then bye-bye take