00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - Python programming language in the
00:05 - previous video we have seen operator
00:06 - overloading
00:07 - right
00:08 - this video we'll see method overloading
00:11 - and method overriding because we have I
00:14 - have told you to implement polymorphism
00:16 - we have some ways like four ways first
00:19 - is done IP and python operate
00:21 - overloading method overloading and
00:22 - Method overriding so duct typing and
00:24 - operator overloading we have discussed
00:26 - now the two are remaining method
00:28 - overloading and Method overriding these
00:30 - things we'll discuss in this video right
00:31 - because it's very clear I mean it's very
00:35 - important to clear the difference
00:37 - between method overloading and method
00:39 - overriding that we will see with the
00:42 - help of example and practically I will
00:43 - show you but before that I want to tell
00:46 - you something it is important especially
00:47 - for those who are preparing for gate
00:49 - 2024 exam an academy is conducting a
00:52 - gate ready combat one 24th of September
00:54 - at 11 am and the duration of this test
00:57 - is 45 minutes and the 20 number of
01:00 - questions you will get in this test
01:02 - right now why you should go for this
01:04 - test what are the advantages
01:06 - so the first one is which is very
01:08 - important
01:09 - the top 1000 tankers will get their gate
01:12 - 2024 registration fee sponsored by an
01:16 - academy
01:17 - so prepare well and try to be in top
01:20 - 1000 rankers if you want to get your
01:22 - free refunded the registration fee
01:24 - refunded by an academy
01:26 - you have a chance to win up 200
01:28 - scholarship plus many exciting rewards
01:31 - like MacBook Air laptop mobiles JBL
01:34 - speakers and much more
01:36 - now how you will enroll for this test
01:37 - the enrollment link you will find in the
01:40 - description box of this video
01:41 - so once you click on that enrollment the
01:43 - link in the description box of this
01:44 - video this type of page will be opened
01:46 - and you can just click on enroll now so
01:49 - see gate ready combat for csit then 24th
01:52 - of September all the details you will
01:53 - get here 20 questions of General
01:55 - aptitude and Engineering mathematics the
01:57 - syllabus and just click on enroll
02:04 - just click on login and you will get an
02:07 - OTP
02:08 - after that you have to enter some
02:10 - details the center your basic detail
02:12 - like name mail address state of
02:14 - residence and continue
02:17 - now once again
02:19 - you have after filling those detail once
02:22 - again you have to click on enroll now
02:23 - the invite code invite code is you can
02:25 - use my code that is
02:28 - grcma okay and then click on enroll now
02:32 - and see you are being enrolled for this
02:36 - test so now you can take this test on
02:39 - the specified date and time okay all the
02:41 - relevant links and details the code the
02:44 - invite code everything you will get in
02:45 - the description box of this video you
02:47 - can go and check out now let's see what
02:50 - our method overloading and Method
02:51 - overwriting I hope operator overloading
02:54 - is clear to you guys now first we will
02:56 - see method overloading now let me just
02:58 - first clear one point python doesn't
03:01 - support method overloading
03:04 - okay but yeah we can achieve this type
03:07 - of feature this type of method
03:09 - overloading feature
03:10 - with some other ways in Python how that
03:13 - all helps you I'll show you but by
03:15 - default python doesn't support method
03:17 - overloading first let me just show you
03:19 - what is method overloading
03:21 - method overloading means
03:24 - we are defining multiple
03:26 - or many methods with same name but
03:30 - different argument
03:33 - in a same class
03:36 - okay because obviously we are discussing
03:38 - this thing under polymorphism and this
03:40 - is one of the pillar of oop
03:42 - object-oriented programming and there
03:44 - everything we do or every program we
03:47 - write with type of classes and objects
03:49 - right that is why in the context of that
03:52 - I am going to tell you this thing right
03:55 - so method loading means defining many
03:58 - methods with same name but different
04:02 - parameters or different number of
04:04 - arguments within a same class
04:08 - what does that mean let me show you
04:10 - first let's just create a new file in
04:13 - this project polymorphism demo
04:16 - method overloading and overriding Dot py
04:18 - okay
04:19 - first let's take a class and I am taking
04:23 - simple class name like maybe demo
04:26 - any classroom you can take
04:28 - and in this class I am defining a
04:30 - function
04:31 - the simplest example I am taking add
04:33 - function
04:35 - right and I want to add like
04:39 - two numbers
04:40 - so what I will do just return a plus b
04:44 - that's it
04:45 - right and see if I class object of this
04:49 - demo object of this demo class
04:52 - if I create then how to call this method
04:55 - V Dot add and what you need to pass two
04:57 - parameter like maybe two and three I'm
04:59 - going to pass
05:00 - okay so obviously it is returning
05:03 - something so you have to print whatever
05:05 - it will return the value of addition you
05:08 - have to print let's run this and it will
05:10 - show you five okay now overloading means
05:14 - we have within the same class we have
05:17 - many methods with same name so let's
05:20 - create one more method with same name
05:22 - add but different
05:24 - number of parameter
05:26 - you know and the first we are having two
05:29 - parameter now I am passing three
05:31 - parameter suppose a comma B comma C
05:33 - these three numbers ABC so maybe you
05:36 - think we can just call this method also
05:38 - d dot
05:40 - uh sorry uh D dot add
05:44 - but
05:45 - this time I want to call this method so
05:47 - three parameter I will pass so one comma
05:49 - two comma three
05:52 - and yeah it is returning so you have to
05:55 - print the value
05:57 - now maybe you think this will return
05:59 - five and this will return six okay let's
06:01 - run this
06:03 - C now this time you are getting an error
06:07 - type error
06:08 - in this line line number seven where you
06:11 - are calling this thing missing one
06:13 - required positional argument C
06:17 - demo dot add missing one required
06:19 - positional argument C
06:23 - but using this set I assume that it will
06:27 - call this ad because there are two
06:29 - argument and using this calling this add
06:31 - method this calling it will call this
06:35 - if it happens then this is method
06:38 - overloading
06:39 - because same method but different
06:42 - parameter and we are able to call but
06:44 - here in Python we are not able to call
06:46 - this
06:48 - add method because python I have told
06:51 - you doesn't support method overloading
06:54 - okay
06:55 - you can Define multiple
06:58 - method with same name and different
07:00 - parameter but out of all the definitions
07:04 - it will consider the latest definition
07:07 - of that function
07:09 - so it will discard this definition the
07:11 - python interpreter and it will just
07:14 - consider this definition of head
07:16 - now for a python interpreter the
07:19 - definition of ad is this so here you
07:21 - have to pass three parameter to call
07:22 - this one that is why this line you are
07:25 - getting an error
07:27 - okay
07:28 - so this is the thing python doesn't
07:30 - support method method overloading but
07:32 - this feature or this kind of
07:34 - functionality this method overloading we
07:36 - can achieve with some different method
07:38 - one way is using default argument
07:41 - let's have
07:45 - let's define only one method a b and
07:47 - let's have one default argument C that
07:49 - is by default zero and it will return a
07:53 - B plus c
07:56 - bye
07:58 - now
07:59 - see these two lines are as it is
08:02 - but you will not get any error this time
08:04 - see you will get 5 and 6.
08:08 - because we have used default argument if
08:12 - you are not passing third argument then
08:14 - by default it will take c as 0 if you
08:17 - are passing the value of C then it will
08:19 - take back the value of C whatever you
08:21 - will pass
08:23 - so this is same kind of functionality we
08:26 - are implementing that method overloading
08:28 - feature we are implementing with the
08:29 - help of default argument right
08:32 - because we are calling this add and add
08:33 - like there are two methods like there
08:36 - are two uh you know definition of this
08:38 - ad one is accepting two argument one is
08:41 - accepting three but actually there is
08:43 - only one
08:44 - second way is using
08:46 - ads we can
08:50 - create this we can achieve again you can
08:52 - say we can Implement method overloading
08:53 - in Python
08:56 - foreign
09:04 - total and
09:06 - for I in
09:08 - us
09:10 - because we don't know how many arguments
09:12 - we are going to pass while we are
09:14 - calling this function right
09:16 - so total is equal to
09:20 - total Plus
09:22 - sorry I
09:24 - right and at last we will simply either
09:28 - return
09:29 - sorry in the spelling mistake total
09:33 - like we can
09:37 - return this variable total right
09:40 - so this is also fine
09:43 - so this time let's suppose we are
09:46 - calling this add
09:48 - with six argument as well so three times
09:51 - we are calling this ad every time the
09:52 - number of arguments are different
09:55 - okay
09:56 - but method is only add so let's run this
09:58 - see
10:00 - 5 6 and 94 it is working fine because
10:04 - using our apps it means
10:12 - so this is also like same kind of
10:17 - functionality or you can see same kind
10:18 - of feature of method overloading
10:21 - so this is how you can achieve method
10:22 - overloading impact I hope you got what
10:25 - is Method overloading and how you can
10:26 - achieve in Python because python doesn't
10:28 - support this thing at last I'll tell you
10:30 - the difference proper difference between
10:31 - overloading and Method overriding but
10:34 - first let's clear this thing what is
10:36 - Method overload what is method of
10:37 - loading in now this is clear to you guys
10:39 - next is what is method overriding okay
10:44 - now here see we have only one class
10:47 - within one class we are having
10:50 - different many methods with same name
10:53 - but with a different
10:55 - argument different number of argument
10:57 - different number of parameters
10:59 - right
11:00 - in method overriding
11:03 - there must be two classes
11:06 - so method overriding is used in
11:09 - implemented in inheritance one
11:11 - okay
11:12 - so we have a parent class in parent
11:14 - class we have a method
11:16 - the same method is in child class
11:20 - but child class defines the same method
11:24 - in its own way method name is same
11:27 - parameter number of parameters the
11:30 - number of arguments are also same
11:32 - method name same number of arguments
11:35 - same in method overriding okay so how
11:38 - these methods are different
11:40 - because they're differing in location
11:44 - these methods are in different classes
11:46 - one is in Period class one is in child
11:48 - class okay
11:50 - let's comment out these
11:52 - thing and okay let's create a class
11:56 - like we have a class father
11:59 - okay and father we have a function sleep
12:03 - so like a father for father sleeping
12:07 - time is or sleeps
12:09 - from
12:11 - 10 pm to 5am
12:15 - and let's see we have one more uh method
12:18 - we can say like eat
12:22 - and just nothing it's less just eating
12:26 - we are printing just eating
12:28 - this is parent class and we have one
12:31 - more class that is sun and the sun I'm
12:34 - going to drive from father
12:37 - so now this father is parent class or
12:39 - base class or super class and the Sun is
12:41 - child class or we can say it's a
12:43 - subclass or we can say Drive class
12:46 - okay now Sun
12:49 - is inheriting
12:51 - these two functions automatically
12:53 - because this is Drive class
12:56 - right if you do not write anything here
12:59 - just write pass here and with the help
13:01 - of object of sun suppose object of some
13:05 - uh this creating Ram is equal to object
13:08 - of
13:09 - Sun class
13:10 - and with the help of ram I am going to
13:13 - call
13:14 - sleep
13:16 - so obviously we can call
13:18 - and it will print sleeps from 10 pm to
13:20 - 5km because these sleep and eat both the
13:24 - methods we can call with the help of
13:26 - child class object that is inheritance
13:28 - obviously you know this thing we have
13:30 - discussed this thing but now
13:32 - Sun wants to Define
13:35 - I mean father sleeps at 10 pm but
13:39 - obviously we know nowadays children
13:42 - doesn't sleep at 10 pm
13:44 - sleeping time for sun is it's from 3 AM
13:48 - or you can say 2 A.M to 10 am so Sun
13:53 - wants to Define its own sleeping time
13:57 - sleeps from 2 am to 10 am
14:00 - so sun has its own definition of the
14:03 - sleep this is method overriding method
14:06 - overriding
14:08 - right Sun or the drive class has defined
14:13 - this method
14:15 - accordingly according to itself right
14:18 - although method name and number of
14:19 - parameters same now this time if you
14:21 - will call this sleep then using object
14:24 - of Drive class then sleeps from 2 am to
14:27 - 10 AM it will call
14:29 - its own Sleep Method
14:32 - now you want to inherit the Sleep also
14:35 - then obviously one way we have we have
14:37 - this super function
14:40 - super Dot
14:43 - sleep see super don't sleep it's from
14:45 - father class
14:48 - if you run this then you can print both
14:52 - as you can see here thank you
14:54 - but the thing I want to show is not
14:56 - super it's method overriding so this is
14:59 - overriding
15:00 - so what can be the main difference
15:02 - between uh method overloading and Method
15:05 - overriding see first of all method
15:07 - overloading is compile time polymorphism
15:09 - method overriding is runtime polymer
15:11 - polymorphism why compile time
15:14 - office because at compile time on
15:16 - with the help of number of argument you
15:19 - pass
15:20 - the appropriate method to be cold is
15:23 - decided at compile time only which
15:26 - method is to be cold with the help of
15:27 - these number of parameter this is
15:29 - decided at compile time only that is why
15:31 - it is known as compile time polymorphism
15:34 - why method overriding is known as
15:36 - runtime for morphism bkc we know method
15:39 - name is same number of arguments number
15:41 - of parameters also same
15:43 - so when you run at run time only it
15:47 - decide with help of mro like you are
15:48 - calling this with object of sun class so
15:51 - it's Sun class with lfmro method
15:53 - resolution order
15:54 - we have Sleep Method yes so that is why
15:57 - it is called the Sleep Method would be
15:59 - good if you don't have any Sleep Method
16:00 - here then
16:02 - parent class deep method would be called
16:04 - so it is the salary at runtime which
16:06 - method is to be called so that is why
16:07 - overriding method overriding known as
16:09 - runtime polymorphism okay
16:12 - second difference is what method
16:14 - overloading occurs within a same class
16:16 - within same class we are having multiple
16:19 - method with the same name but different
16:22 - parameters
16:23 - right although in Python we don't have
16:26 - this kind of thing because python
16:27 - doesn't support method overloading so we
16:29 - have only one method
16:30 - okay
16:32 - and Method overriding occurs in two
16:35 - classes
16:36 - it will occur in inheritance okay that
16:39 - is must
16:41 - parent class and there should be in one
16:43 - parent class there should be one parent
16:44 - class and one child class okay two
16:48 - difference
16:49 - third is what in method overloading
16:52 - method must have same name but different
16:55 - number of parameters in method
16:58 - overriding methods must have same name
17:01 - and same number of parameter
17:04 - they differ in location one method is in
17:07 - parent class one method is in child
17:09 - class
17:10 - and last you can say like a python
17:14 - doesn't support method overloading and
17:15 - in method overriding yes python supports
17:17 - method overriding okay so how you can
17:19 - achieve method overloading if python
17:21 - doesn't support this thing with the help
17:22 - of default argument or we can say there
17:24 - is args these type of products right I
17:28 - hope you got the difference between
17:30 - these two and how practically we can
17:33 - achieve this thing
17:35 - overriding
17:39 - so that's it for this video now I'll see
17:41 - you in the next video till then bye take
17:43 - care