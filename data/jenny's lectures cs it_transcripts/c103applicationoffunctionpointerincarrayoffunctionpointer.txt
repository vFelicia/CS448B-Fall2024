00:00 - so in the series of learning c
00:01 - programming we are discussing function
00:03 - pointers in the previous video we have
00:04 - discussed callback function that is one
00:06 - application of function pointer in this
00:07 - video we will discuss one more
00:08 - application and what is that
00:11 - the program you use you write with
00:13 - switch case statement the same program
00:15 - you can write with function pointer but
00:17 - why we will use function pointer to
00:18 - write that program because if you use
00:21 - function pointer to write down the same
00:22 - program then you will have to write down
00:24 - less code
00:26 - right
00:27 - so we'll see practically i'll write down
00:29 - one program using switch case as well as
00:32 - using function pointer then you will get
00:33 - it better and we will run that code also
00:35 - like what output you are getting
00:37 - fine but before that i just want to tell
00:38 - you one thing if you are preparing for
00:40 - gate exam or will be preparing for gate
00:43 - exam then an academy is conducting a
00:44 - combat it's like india's largest weekly
00:47 - competition for gate and esa's parents
00:49 - here you can compete with thousands of
00:51 - learners from all over india and you
00:53 - stand a chance to win up to 100
00:55 - scholarship
00:57 - so 20 question you will get under the
00:58 - time time limit would be 60 minutes and
01:00 - the questions are very challenging and
01:02 - original gate questions curated by the
01:04 - best you know gate and esc educators at
01:07 - an academy so better to take it live to
01:09 - compete with the best and you can
01:10 - measure your progress with the help of
01:12 - personalized scoring and ranking you can
01:15 - see your ranking against
01:17 - all the others from all over india with
01:19 - all india live lead report
01:21 - that will be updated after every
01:23 - question
01:24 - and after every contest a detailed video
01:26 - solutions will be given to you by their
01:28 - experts so that you can identify your
01:30 - weak areas and you can improve
01:31 - yourselves and you can get it right next
01:34 - time and this is free you can take it
01:37 - for free just how to enroll the
01:39 - enrollment link i'll put in the
01:40 - description box of this video you just
01:41 - go to that link
01:43 - scroll down
01:44 - pick the right test for you and just
01:46 - click enroll and use my code jkl10 to
01:48 - unlock this comment and if you will go
01:50 - for any paid subscription plan for 12
01:52 - months or above then here their special
01:54 - price week is going on that plan you
01:56 - will get at 10 discounted rate and if
01:58 - you will use my course jkl10 you will
02:00 - get extra 10 percent
02:02 - on that discounted rate you can see the
02:04 - detail over here so if you are
02:06 - interested you can go for it the link
02:07 - i'll put in the description box of this
02:09 - video so now let's see one more
02:11 - application of function pointer see
02:14 - one example i am taking simple example i
02:16 - am going to take suppose we have we want
02:18 - to design a calculator and we have four
02:20 - function one is add
02:22 - subtract
02:24 - multiply
02:25 - and
02:27 - divide
02:29 - right these four functions we have
02:32 - now i want that
02:34 - according to the user choice
02:37 - when user will enter suppose i say that
02:39 - press 0 for
02:42 - addition
02:43 - 1 4 subtraction 2 4
02:46 - this multiplication and 3 4
02:49 - division so according to the user choice
02:51 - we will call these functions and that
02:53 - operation would be performed
02:54 - how you will write down this i know
02:57 - program
02:58 - your first answer would be what
03:00 - switch case statement because that is
03:02 - exactly we do when user want to enter a
03:05 - choice and you have to select according
03:07 - to the user choice what you have to you
03:09 - know execute what you have to run then
03:11 - simply use switch case statement right i
03:13 - hope you can write down that this
03:15 - program with switch case that is very
03:16 - easy i am not going to write down that
03:18 - program here with switch case but yeah
03:20 - when we will run i'll show you that
03:22 - program right so rather than switch case
03:25 - statement we will run that this code
03:27 - using function pointer also
03:30 - right because obviously we know function
03:33 - pointer is what will contain address of
03:35 - any function
03:37 - so address of this function function
03:39 - pointer can contain this is also
03:40 - function this is also function so now
03:42 - for this
03:43 - what we have to take obviously we have
03:46 - four function pointer
03:48 - or rather than i say rather than taking
03:50 - four function pointer we can take
03:52 - array of function pointer that's it
03:55 - so in this video you will also come to
03:56 - know how to you know
03:58 - take area of function pointers
04:01 - so we have four
04:02 - you know ah these function let me write
04:05 - down simple code for these
04:07 - here i'm writing void add and
04:11 - a and b
04:13 - right and in the definition part i am
04:15 - just writing
04:17 - printf percentage d a plus b
04:22 - right
04:27 - so i guess these are four function and
04:29 - this is definition of these functions in
04:31 - a program now in main
04:34 - what i'm taking
04:36 - i am taking one choice variable
04:39 - and
04:40 - two variable intent a and b
04:43 - so from the user i'll ask we'll just
04:46 - print 0 for addition
04:48 - see 0 for edition 1 for this 2 for this
04:51 - and 3 for this
04:53 - right i'm not writing here you just have
04:55 - to write down in a program and i just
04:57 - ask from the user enter choice
05:02 - and here also
05:03 - only i am writing scanf percentage d and
05:06 - choice
05:07 - now we will ask from the user enter
05:10 - values of a and b
05:14 - right
05:20 - i hope you are getting
05:22 - whatever i am writing here so now
05:25 - see choice we have
05:27 - you know user will enter an a and b
05:29 - value user will enter
05:31 - now
05:32 - we have to take area of function pointer
05:34 - also right so here only here only i am
05:37 - declaring here only i am declaring
05:39 - suppose after after this line i'll
05:40 - declare
05:41 - here we will write what what you will
05:43 - write here
05:45 - function pointer means the return type
05:46 - of these functions is word so void
05:49 - and we will take array of function
05:51 - pointer obviously
05:53 - so function pointer how you declare
05:54 - asterisk fptr
05:57 - something like this
05:58 - and here we write what
06:00 - you know the data type of these argument
06:02 - int and in
06:04 - right and here whatever address you want
06:07 - to store that you can write but here we
06:09 - have
06:10 - four function so what address you need
06:12 - to store obviously address of all the
06:14 - function
06:15 - right and according to the choice we
06:17 - will execute the pointer will call
06:20 - either this this or this or this
06:22 - fine
06:23 - so how to take arrow function pointer
06:26 - here you will write
06:29 - suppose i am taking size is 10 and
06:33 - bracket
06:34 - and here we will take this this is what
06:37 - area of function pointers
06:41 - and those functions will take two
06:42 - argument of integer type and return
06:45 - nothing
06:46 - right so this thing you have to put in
06:50 - brackets so now here
06:52 - how to initialize it
06:54 - simply write down
06:56 - name of the function add
06:58 - subtract
07:00 - multiplication and division
07:03 - that's it
07:05 - so now we have array of function pointer
07:08 - array means uh some it will have
07:10 - something like this we will have
07:11 - something like this like this we have
07:14 - fptr array
07:18 - 0 1 2 3 4 up to 9 because the size i
07:22 - have taken 10 so these are function
07:24 - pointers
07:25 - so now at 0th place which address would
07:28 - be stored address of
07:30 - addition function this is pointing to
07:33 - here
07:34 - at zeroth place
07:35 - at one index
07:38 - address of sub at second index address
07:40 - of multiplication and a third address of
07:43 - division
07:44 - right and these pointers may we are
07:46 - having some garbage value we do not know
07:48 - we have initialized only 4
07:51 - up to 4 0 to 3 now how to call this
07:55 - how you are going to call this c
07:59 - f p t r
08:00 - or you can say s trig f p tr or simply f
08:03 - pti is also fine
08:04 - or i'll say asterisk fptr and here
08:09 - according to the choice we want to call
08:11 - the function
08:13 - and the choice we are going to store in
08:15 - which variable
08:16 - ch we have taken one variable ch so
08:19 - simply will write ch
08:21 - here
08:22 - and in bracket
08:24 - we are going to pass the arguments which
08:25 - arguments the values we are entering a
08:28 - and b values a comma b
08:31 - right and this this would be in
08:34 - bracket this something like this
08:37 - and
08:38 - semicolon
08:39 - here we are calling the functions using
08:42 - function pointer
08:44 - that's it
08:47 - only one line you have to write and if
08:49 - you use switch case then you have to
08:51 - write switch then four cases also and if
08:55 - you want to add any extra function
08:57 - modulo function or one more function
08:59 - according to that you have to write some
09:01 - cases
09:03 - four cases five cases six cases or seven
09:05 - cases so code would be lengthy but here
09:07 - you just have to write down a simple
09:09 - line that's it this line will replace
09:11 - the complete switch case code so i hope
09:13 - you are getting why i was saying that
09:15 - when you use function pointer then you
09:17 - have to write down less code
09:19 - right
09:20 - now
09:21 - see
09:22 - whenever the program will run from the
09:25 - main function we have
09:26 - variable ch a and b
09:28 - and function pointer array something
09:30 - like this and address of this ad is here
09:33 - suppose address of add is 100 suppose we
09:37 - don't know
09:38 - address of this this function right
09:40 - address of this function starting
09:41 - address base address is suppose 146
09:45 - for this suppose 200 for this suppose
09:47 - 300
09:49 - right so now this this is pointing to
09:51 - this function
09:53 - this first is pointing to subtraction
09:55 - the second is pointing to multiplication
09:57 - and this third is pointing to this
09:58 - division
09:59 - now user will enter the choice suppose
10:01 - user enters 0
10:03 - right
10:04 - and now
10:06 - it will ask enter a and b a and b value
10:08 - i'm entering 2
10:09 - and 3.
10:11 - now next line is calling so now strict
10:14 - fbtr
10:15 - at the place ch we have zero
10:18 - so now first of all
10:20 - this would be d referenced
10:23 - function pointer
10:24 - zero at zeroth index what value we have
10:27 - hundred hundred means we are going to
10:29 - strict means we are going to dereference
10:30 - it so the function
10:32 - the the the control will first of all we
10:35 - are going to dereference the code now
10:36 - the control is here and now we are
10:37 - passing the argument a and b a and b is
10:39 - value 2 and 3 so now we are passing 2
10:41 - and 3 so what it will print 5.
10:46 - this time this ad would be called
10:48 - using this function pointer next time if
10:50 - you enter the choice suppose i'm
10:52 - entering choice 3
10:54 - now here we have 3
10:57 - so now
10:58 - fbtr 3 here index three we have address
11:01 - 300 that that is address of division
11:04 - because this is pointing to division so
11:06 - we are going to first of all dereference
11:07 - means control is here now and now we are
11:09 - passing the argument a and b and we
11:11 - suppose i am passing 4 and 2
11:14 - so what well you will get 2
11:16 - so this is how using function pointer
11:19 - array of function pointer actually
11:22 - we can access
11:23 - these functions according to the user's
11:25 - choice at runtime user will you know
11:27 - enter the choice like i want to run
11:30 - addition uh function or multiplication
11:33 - function or subtraction or division and
11:34 - according to that just pass the choice
11:36 - and we can call these functions that's
11:38 - it at compile time you know we don't
11:40 - know which function is going to be
11:42 - called
11:43 - at runtime user will enter the choice
11:45 - and then only this function would be
11:46 - called any of these functions
11:49 - i hope you are getting my point
11:51 - this is one more application of function
11:54 - pointer
11:55 - obviously this is very simple right
11:57 - you can write down some complicated code
11:59 - also using a function pointer and this
12:01 - is how i guess you know how to declare
12:04 - array of function pointer this is array
12:06 - of function pointer
12:07 - right so now let us run this code and
12:09 - see what output you are getting
12:11 - see this is a program this uh we i have
12:14 - i know defined four function add
12:16 - subtraction multiplication and division
12:18 - here you can also write return type int
12:20 - and rather than printf you can uh write
12:22 - down return a plus b return a minus b
12:24 - that is also fine and while you are
12:26 - calling you can take another variable
12:27 - like any variable you know result or
12:30 - anything
12:31 - and you can store that result into that
12:33 - variable and you can print that in main
12:35 - function it's up to you right so four
12:37 - function we have and in main i'm just
12:39 - taking i'm just asking you know
12:42 - enter the choice 0 for addition one for
12:44 - subtraction something like this and two
12:46 - numbers a and b and using switch case
12:49 - i'm
12:50 - calling these functions case 1 in case
12:53 - sorry not case 1 in case a 0
12:56 - 1
12:57 - and
12:58 - 2 and
13:00 - 3 because you can see i have
13:02 - here i have written 0 for addition so
13:04 - case zero
13:06 - and that there we will call addition
13:08 - right so let me run this and see what
13:11 - output you are getting and one is
13:12 - default if you enter in choice rather
13:14 - than zero one two three it will print
13:16 - enter valid choice
13:18 - right so let me just run this and see
13:21 - what output you are getting
13:23 - see here it is asking enter choice so i
13:26 - am entering 1
13:27 - now it will ask enter 2 number i am
13:29 - entering
13:30 - 5 and
13:32 - 1
13:33 - so it is printing subtraction is 4
13:36 - because choice 1 means we are calling
13:38 - subtraction function
13:40 - means it will go to the case 1 that is
13:42 - it will call subtraction and it will
13:43 - print the subtraction of these so this
13:45 - is how you can do with switch case but
13:48 - if you want to replace this switch case
13:50 - with the function pointer then what you
13:52 - will write here we are going to
13:55 - take one
13:58 - fptr
14:00 - arrow function pointer i am taking size
14:02 - 10
14:03 - and here simply write argument
14:06 - data type intent end you can take float
14:08 - and float also better to take float and
14:10 - float
14:11 - right
14:12 - means the argument the data type of
14:14 - these argument a and b float right
14:16 - because division would be in float
14:18 - something like this you can take float
14:21 - and here i am initializing it with
14:24 - addresses so addresses first add
14:27 - just write down the name of the function
14:29 - and name of the function means it will
14:32 - pass the base address of that code that
14:34 - function code
14:36 - sub then multiplication and third is
14:39 - division
14:42 - that's it and
14:44 - rather than now switch case i am just
14:46 - commenting this out you just have to
14:48 - write down a simple
14:50 - line
14:51 - just call the function using function
14:54 - pointer based on the choice so how to
14:56 - call
14:57 - asterisk f p t r
15:00 - and here simply pass the choice the
15:02 - variable name
15:04 - and here pass the argument a comma b
15:09 - that's it
15:10 - so the complete switch case statement
15:13 - will be replaced with this simple line
15:18 - uh this line
15:20 - so i hope now you are getting rather
15:21 - than writing these five six line in
15:23 - switch case it's better to write down
15:25 - this one line so here you need to write
15:27 - down less code the code will be concise
15:28 - and very understandable you can read
15:30 - this code easily
15:32 - now let me run this and see you are
15:34 - getting the exact output or not
15:39 - so here yeah here you are getting some
15:40 - warning message why so because
15:43 - see here the return type of these
15:44 - functions are void
15:46 - right and but the return type of pointer
15:48 - we are taking in so that is why it is
15:51 - not giving any error it just you know
15:53 - giving any you know warning message so
15:55 - you need to take care of this thing
15:57 - program is running so let me just enter
15:59 - the choice 0
16:01 - so it will ask to number 1 and 1 and it
16:04 - is printing addition is equal to 2. so
16:06 - now here better to write down the type
16:08 - of this function pointer same as the
16:10 - return type of the functions that is why
16:13 - right
16:14 - now let me just save it and run this
16:17 - see this time you're not getting any
16:18 - warning message
16:19 - right so now this time i'm entering the
16:22 - choice three
16:24 - enter two number four and two
16:26 - and division is two
16:30 - right
16:31 - and you can also uh you know
16:33 - write down some condition also if the
16:35 - choice is rather than 0 1 2 3 what it
16:37 - will print for that also you can you
16:39 - know
16:40 - like choices
16:41 - less than 0 or greater than 3
16:45 - or other than 0 1 2 3
16:47 - just print invalid choice otherwise call
16:50 - the function pointer something like this
16:52 - you can also write using if else if you
16:54 - want
16:54 - right
16:56 - so that's it for this video now so i
16:58 - think that's it about function pointers
17:00 - in the next video we'll see recursion in
17:02 - c so i'll see you in the next video till
17:03 - then bye take care