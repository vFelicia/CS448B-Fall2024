00:00 - so in the series of learning Python
00:01 - programming language in the last video
00:03 - we have seen while loop till now we have
00:05 - discussed Loops in Python 4 and while
00:07 - loop there is no doubt Loop in Python
00:09 - two Loops four and while loop these we
00:11 - have discussed now as we know the
00:14 - execution of loops
00:16 - means why we need Loops actually if you
00:19 - want if you want that some statements
00:21 - for a block of code you want to execute
00:23 - that code repeatedly multiple times then
00:25 - you can put that code into a loop either
00:27 - for Loop or while loop and those line
00:29 - would be executed again and again
00:32 - right like until a specific condition is
00:34 - satisfied and all
00:36 - right the working you know very well so
00:39 - if you have like here we have Loop while
00:41 - or do I Loop and within this block I am
00:43 - having statement one like
00:47 - statement one two three four five five
00:50 - statements in this block all the fives
00:53 - are obviously indented
00:54 - so
00:56 - if the condition is true we will enter
00:58 - here then this condition would be
00:59 - executed then this then this then this
01:02 - then this then again next iteration then
01:04 - next then next iteration then all the
01:06 - five conditions like this
01:08 - if this condition is
01:09 - false then exit from the loop something
01:11 - like this we are having
01:13 - right
01:15 - now if if you want to you know change
01:19 - this flow of execution of this Loop
01:24 - if you want to change it
01:26 - from its normal way this is normal
01:27 - execution it's normal way then we use
01:30 - some control statements see as the name
01:32 - suggests Loop control statements
01:36 - means with the help of these statements
01:38 - basically these statements you know help
01:40 - us to gain better control on our Loop
01:45 - right that is why they are known as Loop
01:47 - control statements they can control the
01:49 - loop
01:50 - you know control the way of execution of
01:53 - the loop
01:54 - so three basically Loop control
01:55 - statements are there break continue and
01:57 - pass in Python so these will be
01:59 - discussing in this video with the help
02:00 - of programs and practical uh practically
02:03 - I'll show you right now see there are
02:06 - some situation when you want to exit
02:09 - from the loop completely
02:11 - when an external you know condition
02:13 - trigger then you want to exit the loop
02:15 - completely
02:16 - right so in that case we use break for
02:20 - that we have a statement control
02:21 - statement break or sometimes you want to
02:24 - skip
02:25 - a section of the loop or skip some part
02:27 - of the Loom and start the next iteration
02:31 - in that case also for that also we have
02:33 - a control statement continue
02:35 - sometimes we want to do nothing
02:38 - and then we have passed okay that's you
02:41 - know sounds weird if you want to do
02:42 - nothing then use pass statement what is
02:44 - the use of this pass okay this thing you
02:47 - will get with the help of program right
02:50 - now I hope you have now the basic idea
02:53 - of these three statements right discuss
02:57 - these statements one by one first we'll
02:59 - be seeing break
03:03 - so this control statement can be used
03:06 - only within four and while loop
03:08 - right as the name suggests break means
03:10 - exit from the loop immediately
03:13 - and once the program Encounters this
03:15 - break statement whatever statement you
03:17 - have written right after the loop body
03:20 - that would be executed like okay what is
03:23 - the syntax simply you will write break
03:25 - that's it right like in four we have a
03:28 - for Loop
03:29 - and I have written some code here 102 or
03:32 - line I don't know how many lines then
03:34 - suppose a condition occurs
03:36 - if I have some condition and within if
03:39 - this condition is true there I am using
03:41 - break and here
03:44 - I have some more code
03:47 - and after this see this is what block
03:51 - these lines are within this for Loop
03:54 - right and out of this four Loop suppose
03:56 - we have
03:57 - like outside Loop
04:00 - outside of you
04:02 - so if this we are entering if we are
04:06 - entering in the loop then this code
04:07 - would be executed then if this condition
04:09 - is true in that case we will enter here
04:11 - the control will enter here and break
04:13 - break means
04:15 - exit from this Loop so these statement
04:18 - would not be executed
04:19 - right because these are also part of
04:22 - this Loop and even though this condition
04:24 - is true it here it can be for Loop or
04:28 - while loop
04:30 - right both the loops can be there even
04:32 - though this condition is true here
04:34 - whatever you have written still break
04:37 - will cause out of the loop
04:40 - you know you have to exit from the loop
04:42 - right now so these statement would not
04:44 - be executed the remaining statement and
04:46 - whatever statement you will write
04:48 - right after this Loop body those would
04:50 - be executed this is what simply meaning
04:52 - of break
04:54 - right
04:55 - okay let's understand this thing with
04:57 - the help of flowchart suppose we are
05:00 - entering into a loop
05:01 - entry Loop so here we are having a test
05:06 - suppose some condition or expression we
05:08 - are having
05:09 - okay if this condition is true
05:13 - the two cases can be there true or false
05:15 - if false then simply exit from the loop
05:18 - exit from Loop note exit from program
05:21 - right if this condition is true and then
05:24 - we check if there is a break or not
05:28 - maybe some statement would be executed
05:30 - then would be checked break or not
05:33 - if yes
05:36 - if yes then
05:38 - exit from the loop
05:41 - no break
05:43 - then the remaining Loop body would be
05:46 - executed
05:48 - means remaining means here we have some
05:50 - more codes so this would be executed so
05:52 - this would be executed and then again
05:55 - here
05:56 - so this is you can say it's like a flow
05:59 - chart of
06:01 - break you can understand the working of
06:04 - this break statement with the help of
06:06 - this flowchart I guess okay now let me
06:08 - show you this thing with the help of two
06:10 - programs how we can use this break when
06:12 - within while loop within for loop as
06:14 - well as within nested Loop right let's
06:17 - see so let's create a new file here
06:22 - group control
06:23 - statements.py okay
06:26 - let's first we will be discussing now
06:29 - break so let's see with count sorry with
06:34 - while loop first we will see this one
06:36 - okay simple example will be taking while
06:39 - like count
06:41 - less than equal to 10 1 2 print I want
06:44 - to print the count value
06:46 - right but
06:49 - if
06:51 - once the count value becomes like
06:57 - once the count value becomes if this
07:00 - count equal to equal to 7.
07:04 - then break
07:06 - okay and still one more statement I am
07:10 - printing here like hi
07:13 - and out of the loop I am printing one
07:15 - more statement
07:18 - out from Loop
07:20 - simple example
07:21 - right in previous video also we have
07:23 - discussed this thing
07:25 - so let's run this and I'll show you what
07:27 - output you will get here
07:31 - see
07:32 - one high too high then three
07:35 - again high would be printed four five
07:37 - six once
07:40 - six the control you know you know the
07:43 - value becomes six so first it will print
07:46 - six
07:49 - it will print 6 and then this statement
07:52 - six plus one is seven now if condition
07:55 - would be checked seven count equal to
07:57 - equal to seven yes condition true then
07:59 - break break means
08:01 - just exit from this Loop so this print
08:03 - hi this would not be executed right
08:05 - whatever the statement
08:08 - immediately you have written after this
08:10 - Loop body that is this one that would be
08:13 - executed out from Loop right so this is
08:16 - our break
08:17 - would work
08:18 - in for Loop also we can use this thing
08:20 - or in nested Loop also we can use this
08:23 - thing so let's see one
08:26 - uh with nested loop I am using two for
08:29 - Loop nested for Loop so if sorry four
08:34 - uh first thing I am having a suppose two
08:36 - list so list one
08:39 - okay so I'll be having two list in list
08:41 - one I'm having like hi hello welcome and
08:43 - in second is names three name I'm having
08:46 - Krishna RAM and mother
08:48 - so one for Loop
08:52 - like I want to print something like this
08:53 - hi Krish hi Ram hi madhav then hello
08:56 - Krish hello Ram hello Mother then
08:59 - welcome Christian welcome Ram welcome
09:00 - like this so for that
09:04 - one for Loop two nested Loop we will use
09:07 - so for any variable name suppose item in
09:11 - list one
09:13 - right and one more for Loop here four
09:16 - variable I'm taking name in
09:20 - names
09:22 - see the difference names and here item
09:24 - name I'm taking just just name
09:27 - so simply we'll be printing print
09:31 - item comma whatever the name is right
09:35 - but within this inner for Loop I'm
09:38 - writing one condition if if
09:41 - like
09:42 - this item equal to equal to hello
09:48 - and
09:49 - suppose name equal to equal to
09:53 - Ram
09:55 - if this is the condition then
09:57 - break
10:00 - right
10:02 - and
10:05 - after this after from an outside of
10:08 - these four Loops nested Loops from this
10:11 - from this Loop
10:13 - outside of the loop body just after
10:14 - these nested Loops I am just printing
10:17 - print
10:20 - out from Loop
10:23 - right
10:24 - or better for better understanding let's
10:26 - do one thing
10:28 - see
10:29 - this within this inner for Loop we have
10:32 - these three statements
10:34 - so outside of this for loop with from
10:37 - this inner for Loop I'm writing one
10:40 - statement print
10:44 - out from
10:47 - inner loop
10:48 - right
10:50 - and this this is the statement out from
10:55 - Outer Loop
10:57 - this is out from inner loop here and
11:00 - this is out from Outer Loop
11:02 - right
11:04 - so let's run this and see what output
11:07 - you will get here
11:12 - see
11:15 - first first see the list one would be
11:18 - replaced with this complete list hi
11:21 - hello welcome so first what is the
11:23 - working of for Loop high would be
11:24 - assigned to item right
11:27 - hi in this list yes condition true enter
11:30 - here then one more for Loop the in names
11:33 - rather than names we have Krishna Ram
11:34 - madhav so firstly in name I am having
11:38 - creation so Krishna in names yes
11:40 - condition tree both the condition to
11:41 - enter here then it will print item item
11:43 - is high and name value is now crashed so
11:46 - it will print high creation right as you
11:49 - can see
11:53 - now
11:54 - see this condition is satisfied no
11:57 - then no break
11:59 - right
12:01 - then
12:03 - obviously we are within the inner loop
12:05 - so we are not out from this inner loop
12:07 - so again now next time in names Ram
12:11 - would be assigned so it will print hi
12:13 - Ram still this condition is not true so
12:16 - in names still we have madhav so it will
12:19 - print hi madhav
12:21 - check this condition not satisfied so no
12:23 - break right now end of the list end of
12:26 - the list means we are now out from this
12:29 - inner loop so it will print out from
12:31 - inner loop but we are still within this
12:33 - outer loop so next time
12:36 - now hello would be assigned to this item
12:39 - right and for hello same condition same
12:42 - you know that would be repeated same
12:44 - process would be repeated right so first
12:46 - of all hello Krishna then hello Ram but
12:49 - this time this condition is also
12:51 - satisfied
12:52 - item is hello and name is Ram yes
12:54 - condition is satisfied now break
12:58 - so here what you have to understand is
13:01 - break means it's not like that out from
13:04 - both the loops no this break is we are
13:07 - using within this inner loop obviously
13:10 - obviously this inner loop is within this
13:12 - outer loop but
13:15 - the nearest Loop to this break is this
13:17 - inner loop so we are out from the inner
13:20 - loop only
13:21 - not from Outer Loop so it will not print
13:25 - now hello madhav it will simply break
13:28 - exit from this inner loop so it will
13:31 - print out from inner loop out from inner
13:33 - loop but we are still
13:36 - in Outer Loop
13:37 - so next it will print same list one
13:40 - welcome would be assigned so for welcome
13:42 - also same condition same stay would be
13:44 - repeated welcome question then Ram then
13:46 - mother then out from a minute Loop out
13:48 - from
13:49 - outer loop so I hope you would
13:52 - if you use this break with a nested Loop
13:54 - means will be out from the nearest Loop
13:59 - so a break is within this inner loop so
14:01 - we are out from inner loop only not from
14:02 - Outer Loop so in for Loop also we can
14:05 - use a break something like this so I
14:07 - hope you got these two you know examples
14:10 - of break statement next is continue
14:13 - so the next statement is continue
14:17 - continuous you can say it's opposite of
14:20 - break statement break means exit from
14:22 - the loop continue means continue with
14:23 - the next iteration right
14:26 - not exit from the loop continue continue
14:29 - but with the next iteration uh like this
14:32 - same example if I take here we have
14:34 - maybe four Loop or while loop okay same
14:37 - example like this this is what
14:40 - a block within this for Loop or while
14:43 - loop I don't know anything Loop you can
14:44 - take so what is the uh the the flowchart
14:48 - or working of this continue statement
14:50 - if suppose any how the condition is true
14:53 - or within four Loop maybe four I enlist
14:56 - or anything if this something we have
14:58 - entered into this Loop condition is true
15:01 - satisfied so that is why we have entered
15:02 - into this Loop code would be executed
15:04 - then some specific condition external
15:07 - condition would be triggered if this
15:08 - condition is true then enter here and it
15:11 - will find continue
15:14 - in the previous case break means outside
15:16 - of the loop here but here we have
15:18 - continue continue means
15:20 - whatever statement is written just after
15:23 - this continue
15:25 - within this
15:27 - Loop within this block of the loop those
15:31 - would be skipped
15:32 - and it will control the ego at the
15:36 - beginning of the loop means the next
15:39 - iteration would be executed
15:41 - I hope you got the working
15:44 - right okay let's uh the same flowchart
15:48 - we are having same like
15:50 - we are having the test condition or that
15:52 - text expression after entering into the
15:55 - loop entry Loop
15:58 - okay so after entering the loop test the
16:01 - condition will be checked if this is
16:02 - true enter into the loop if false then
16:05 - simply exit from Loop right
16:10 - and again we'll check if within this
16:13 - Loop we have any continuous statement if
16:15 - yes if yes then
16:18 - control will go at the beginning of the
16:20 - loop
16:21 - just skip the remaining body of the loop
16:25 - the remaining body right means we have
16:28 - written some more codes so this would
16:29 - not be executed control will go here and
16:33 - next iteration would be started so here
16:35 - we have
16:37 - remaining Loop body
16:44 - if yes then continue if no no then this
16:48 - body would be executed and then
16:50 - obviously
16:52 - again the next iteration
16:54 - so this is the flowchart of continue I
16:57 - hope now you can figure out the
16:58 - difference between the break statement
17:00 - and continue statement with the help of
17:02 - this flowchart right
17:04 - let's discuss this with the help of
17:07 - program the same example we have taken
17:09 - with break then you will get it better
17:11 - the difference between break and
17:12 - continue Okay so
17:15 - let's take this example same example
17:17 - here count from 1 to 10.
17:20 - right
17:22 - but here rather than break just replace
17:26 - this with continue just to see the
17:28 - difference what will happen
17:31 - so if count is equal to is equal to 7
17:33 - then continue
17:35 - write continue means
17:37 - once the program the control find
17:39 - continue it will skip whatever you have
17:42 - written just after this continue within
17:44 - this Loop and it will start it will
17:47 - start with the next iteration it will go
17:49 - from into the beginning of the loop at
17:51 - the beginning of the loop right okay
17:53 - let's run this
17:55 - see what output you will get here
17:59 - one then high would be printed C
18:04 - see count is one condition true it will
18:07 - print one then count becomes two then
18:10 - this condition true no so after this we
18:13 - have one more statement within this Loop
18:15 - hi so that would also be executed then
18:18 - one high
18:19 - again
18:21 - now count value becomes 2 so condition
18:24 - would be checked two printed count
18:26 - becomes three
18:27 - condition satisfied no then
18:30 - high would be printed so one then High
18:32 - then two then High then three high four
18:35 - high five
18:36 - high now six after six see there is no
18:40 - high after seven it's high
18:43 - so once it will print 6 then count plus
18:46 - one it becomes count becomes what seven
18:49 - now
18:52 - count become seven now check this
18:54 - condition next statement is Count equal
18:56 - to equal to seven yes condition true
18:58 - continue continue means it will skip
19:00 - whatever statement you have written just
19:01 - after continue within this Loop so only
19:03 - one statement is there high within this
19:05 - Loop so this would be skipped and it
19:07 - will continue with the next iteration
19:10 - right so after six no high would be
19:12 - printed it will go to the here beginning
19:15 - of the loop now at this point of time
19:17 - count value is seven so seven condition
19:18 - two yes so it will print seven directly
19:21 - now
19:23 - 7 after this count becomes 8 so this
19:25 - condition is not true so then high would
19:27 - be printed
19:28 - okay it will not exit from the loop if
19:31 - there is break then
19:34 - here it will exit from here after six
19:38 - it will print directly out from Loop but
19:41 - it will this while loop will go till 10.
19:45 - and then out from Loop so I hope now you
19:47 - got the difference
19:48 - between you know continue and break
19:51 - statement if you want to exit from the
19:54 - loop completely based on some external
19:56 - condition use break if you want to skip
19:58 - only some part of the loop here I have
20:01 - skipped this part of the loop
20:04 - if this condition is satisfied skip this
20:06 - part
20:07 - if you want to skip or bypass a section
20:09 - of the loop and continue with the next
20:12 - iteration then just use continue
20:14 - statement
20:15 - right like the same same thing you can
20:18 - do with for Loop also something like
20:20 - this
20:21 - uh
20:29 - like I have four I in
20:32 - range
20:34 - ranges from 1 to 10 I want to print so 1
20:37 - to 11 I should take
20:39 - so if I value equal to equal to 7 then
20:44 - continue
20:46 - else simply print
20:49 - I value that's it
20:51 - let's run this
20:54 - okay we haven't printed
20:56 - High one two three four five six and
21:01 - seven is not printed eight nine ten so
21:03 - if you want to print number from 1 to 10
21:05 - but not seven then this something like
21:07 - this if I is equal to 7 simply continue
21:10 - continue means
21:12 - this part would not be executed print I
21:16 - right and just continue with the next
21:18 - iteration
21:19 - right so I becomes now 8 and 8 will be
21:22 - printed something like this so let's see
21:25 - now pass statement okay so the next one
21:27 - is
21:28 - pass
21:30 - means do nothing means it's like a null
21:33 - operation
21:37 - like
21:39 - say let's take one real life example if
21:41 - there is sale going on right on Flipkart
21:45 - or Amazon any you know website and right
21:48 - now I don't need any let's say kurti
21:51 - right or any top or any kurti right now
21:53 - but if there is say like fifty percent
21:55 - off then I'll purchase that maybe in
21:57 - future I can use that kurti
21:59 - so right now I don't need that one
22:02 - means it has nothing to do with me the
22:05 - kurti but I still purchase that one for
22:08 - future reference
22:09 - right in future I'll use I'll wear that
22:12 - kurti yeah I know that is not a good
22:14 - idea it's waste of money but it's just
22:16 - an example so same maybe this weekend in
22:21 - future maybe I want to you know use a
22:23 - function
22:24 - right but right now I don't know what is
22:27 - the working of that function so to
22:29 - Define an empty function we can use pass
22:32 - to Define an empty Loop we can use pass
22:36 - right
22:37 - something like this
22:39 - uh like this if I have a four Loop 4 I
22:43 - in range 5.
22:48 - I want to use this Loop in future but I
22:50 - don't know what to do in this Loop right
22:52 - now I don't know
22:54 - so if you leave it something like this
22:57 - then it will give indentation error
22:59 - because after this colon it will need an
23:01 - intent intended block
23:03 - so you have to write down something
23:05 - so simply write down here pass
23:08 - means nothing to do with this Loop right
23:10 - now it's an empty Loop
23:13 - but in future I can replace this pass
23:16 - the statement with some meaningful
23:18 - statements according to my need
23:21 - right
23:22 - so it's like just uh you can say
23:24 - placeholder
23:26 - for future right if you want to Define
23:29 - an empty function then also you can use
23:31 - although we haven't discussed function
23:32 - but no this is a simple example how to
23:35 - define def function name suppose
23:37 - Function One
23:39 - and I don't know what to do with this
23:41 - function in future but I want this
23:43 - function in future but right now I don't
23:44 - know what to do with this function so I
23:46 - cannot leave this simply like this
23:47 - because it will be valid so pass means
23:50 - it's an empty function future I can
23:52 - replace this pass statement with some
23:54 - meaningful statement like in future
23:56 - maybe in the program in future I can
23:59 - replace this pass with simply print hi
24:03 - yeah it doesn't make any sense just an
24:05 - example
24:06 - so I have replaced this with some
24:08 - statement
24:09 - right so I hope you got it why we use
24:13 - this pass control statement let's
24:15 - discuss this with the help of example
24:17 - program I'll show you practically
24:19 - okay so let's see this example only
24:23 - I have for written an empty Loop for I
24:27 - in range this but I don't I don't know
24:29 - right now that I want to do something
24:30 - like this I don't know what to do
24:33 - like I want to do something
24:37 - do something but that's something right
24:39 - now I don't know in future I'll replace
24:41 - this do something with something
24:43 - meaningful
24:44 - so I want to write down right now an
24:46 - empty Loop
24:47 - so for empty Loop
24:50 - if we cannot leave this something like
24:51 - this
24:52 - because it will give an error if I run
24:54 - this
24:55 - there would be indentation error
24:58 - after this four expected indented block
25:01 - so what is the thing right thing for
25:04 - this just use this control statement
25:06 - pass let's run this it will print
25:09 - nothing see it's an empty Loop right or
25:13 - same here also
25:15 - uh let me just
25:18 - do this thing
25:20 - if count equal to equal to 7 I don't
25:23 - know what to do here right now I don't
25:24 - know if count is seven I want to
25:27 - continue or I want to break or I want to
25:29 - do something else
25:31 - I don't know right now but in future
25:33 - I'll replace this thing with something
25:36 - so I cannot leave this something like
25:38 - this it will give error obviously it
25:39 - will give error so
25:41 - pass pass mean just passes pass it do
25:44 - nothing
25:45 - right so
25:47 - here it will do nothing it will simply
25:50 - print one two
25:52 - 10.
25:53 - and high obviously one high two High
25:55 - three High
25:56 - like this one to ten and high and out
25:59 - from Loop
26:00 - so what is use of this condition here
26:02 - right now nothing maybe you will say
26:04 - like just remove these two statements
26:07 - now why you are writing this thing
26:08 - because it is simply working of this
26:10 - while loop
26:11 - but maybe in future I want this if
26:13 - statement here
26:15 - and I want to do something so just for
26:17 - reference just it's a placeholder just a
26:19 - placeholder right like I will do nothing
26:23 - just pass it
26:24 - if you want to you know Define uh like
26:28 - there is a function and suppose in that
26:30 - function I want to call another function
26:33 - but right now I'm not sure what is that
26:35 - that calling function will do
26:37 - right so you can simply pass that thing
26:40 - right
26:42 - to write down an empty class or empty
26:44 - control statement empty Loop empty
26:46 - function empty method you can use this
26:49 - pass
26:50 - I hope now you got what is the meaning
26:52 - of this pass statement here okay
26:55 - like if you want to Define an empty
26:57 - function
26:58 - just there and function name suppose
27:02 - function one here this
27:05 - but I don't know what this function
27:07 - should do right now so let's do pass
27:09 - here if you do something like this it
27:12 - will give error if you you know keep it
27:14 - something like this it will give
27:15 - indentation error indented block after
27:17 - this function expected intended block
27:20 - after this function so just use pass
27:23 - statement it will not give any error so
27:26 - in future you can replace this pass
27:27 - statement with some meaningful code one
27:29 - two three four five six lines of code I
27:31 - don't know how many lines of code I
27:32 - don't know what this function will do in
27:34 - future but yeah I will use this function
27:36 - in future that is for sure or maybe you
27:39 - can delete this later
27:41 - so I hope now you got what is break
27:43 - continue and pass statement
27:45 - so I hope you got the working of these
27:47 - three rule Loop control statement break
27:48 - and then you pass and how to use them
27:50 - when to use them and all the difference
27:52 - between these three so now I'll see in
27:54 - the next video till then bye take care