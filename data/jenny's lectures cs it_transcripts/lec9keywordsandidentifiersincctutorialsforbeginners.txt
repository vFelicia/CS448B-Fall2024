00:00 - so in the series of learning c plus plus
00:02 - programming language in the previous
00:03 - video we have discussed constants and
00:05 - variables in c plus plus in this video
00:07 - we'll talk about keywords and
00:09 - identifiers in c plus plus see these two
00:11 - are very important part
00:13 - of a c plus plus program you cannot
00:15 - write a program without
00:17 - these two things keywords and
00:19 - identifiers you cannot write down even a
00:20 - simple program
00:22 - that program to print hello world
00:24 - without using keywords and identifiers
00:28 - right so these things are very important
00:30 - you can say building blocks of uh c plus
00:32 - plus program so i'll show you these
00:34 - things i will discuss first of all
00:36 - keywords and identifiers i'll show and
00:38 - i'll tell you what are keywords what are
00:40 - identifiers
00:42 - and we'll also see some important facts
00:45 - about these things especially about
00:48 - keywords right that i'm damn sure 95 of
00:52 - you guys don't know about these facts
00:55 - right so this video would be really very
00:57 - helpful for you guys and i'll show you
00:59 - more precisely if i say i'll show you
01:01 - these facts on my laptop
01:03 - now while writing a program i'll write a
01:05 - program i'll show you these things all
01:07 - the interesting interesting facts all
01:09 - the points about keywords and
01:10 - identifiers right
01:12 - so now first thing we'll discuss what is
01:14 - identifier see
01:17 - in this program in a this a you will
01:20 - call it as a
01:21 - variable name right
01:23 - so this is nothing but identifier if i
01:26 - take a function in this suppose i am
01:28 - taking a function
01:31 - void
01:32 - display
01:34 - and we will define this function here
01:36 - suppose i am writing c out
01:38 - hi
01:40 - right and before this function we will
01:42 - call this function here display
01:47 - before calling you have to give what
01:51 - prototype
01:52 - or you can say declaration of the
01:54 - function void
01:55 - display that's it right so
01:58 - if i i'll ask what is this display you
02:01 - will say its name of the function
02:03 - name it is name of variable it is name
02:06 - of a function if i declare any class
02:09 - something like this class
02:11 - and my class name i am taking my class
02:15 - and here we will take data members and
02:16 - member functions so my class will say it
02:18 - is name of a class
02:20 - so these are
02:21 - nothing but identifiers
02:23 - identifier is what you can say just a
02:27 - sequence of characters
02:29 - that will form a name
02:32 - user defined name whatever user defined
02:34 - name we will you know
02:36 - give in a program those are identifiers
02:39 - it can be name of a variable name of a
02:41 - function name of class name of object
02:44 - name of namespace name of
02:46 - any function or what we can say name of
02:49 - macros
02:51 - any user defined name you take
02:53 - that are nothing but identifiers
02:57 - simple
02:58 - so this is identifier this is also
03:00 - identifier this is also identifier name
03:02 - space name that is also identifier
03:04 - right
03:05 - if you if you will create a object of
03:07 - this class suppose i am taking um how to
03:10 - create object
03:12 - the name of this class and name of the
03:14 - object suppose i am taking m so this m
03:16 - is what name of object so this is
03:18 - identifier nothing but identifier
03:21 - right
03:22 - so some rules are there to form
03:25 - uh these uh identifier because these are
03:27 - just user defined names we give to
03:29 - anything in a program
03:31 - so same rule that we have discussed in
03:33 - variable
03:34 - like identifier can contain letters a 2
03:37 - z a 2 z digit 0 to 9 and underscore no
03:41 - special characters are allowed it must
03:43 - start with either a letter or
03:46 - you can say this underscore
03:49 - cannot start from a digit right and
03:53 - you can say space is not allowed between
03:55 - these
03:56 - between
03:57 - suppose i am taking my class this name
03:59 - so you cannot take my space class
04:02 - this would not be valid right yeah my
04:05 - underscore class this would be valid you
04:07 - can take underscore
04:08 - right that is valid space is not allowed
04:10 - right any special
04:12 - symbol like comma dollar hash these are
04:16 - not allowed while forming the name of an
04:17 - identifier rules are same as the rules
04:20 - of you can say uh as we have discussed
04:23 - rules of naming a variable almost same
04:26 - right so now what about the length
04:29 - of a
04:30 - name identifier name
04:32 - how many characters you can take
04:35 - long length of your name like only genti
04:38 - gente khatri namjanti country lamba
04:40 - length of the name how many characters
04:42 - you can take so specifically c plus plus
04:44 - do not
04:45 - impose any restriction
04:47 - on the length of the name but generally
04:49 - first 30 31 characters
04:52 - are
04:53 - considered as significant right
04:57 - so
04:58 - first 31 character name can be and a
05:00 - name can contain 31 characters right
05:04 - so now this is i hope you go to what is
05:07 - identified right now
05:09 - what is a keyword see keyword or
05:14 - reserved word you can say
05:16 - or reserved word means
05:18 - have some special meaning to the
05:20 - compiler
05:22 - and these are written in small letters
05:28 - we cannot use keywords as identifiers
05:31 - right so iron if keywords are having
05:34 - some special meaning to the compiler
05:36 - they are already reserved they are
05:37 - already defined compiler know the
05:39 - meaning of keywords
05:41 - right you cannot redefine those keywords
05:44 - this is the list of keywords in c plus
05:47 - plus we have in c we have 32 keywords
05:50 - so c plus plus is super set of c so
05:52 - those 32 would be in c plus plus plus
05:54 - some extra keywords are also there here
05:56 - right and some keywords for added in c
05:59 - plus plus 11 version then 14 then 17
06:02 - then 20. so this is the list of all the
06:04 - keywords i think total 95 or 97 you can
06:07 - count these keywords i guess these are
06:10 - total 97
06:12 - keywords right
06:14 - some are these some uh in keywords we
06:17 - have something like this a and d and
06:20 - or
06:21 - or you can say not or these kind of
06:24 - things not i think eq
06:27 - for eq and eq these are simply
06:30 - alternative of those
06:32 - operators like and
06:35 - operator logical or operator not equal
06:38 - to operator but rather than those
06:40 - operators we can use alternative
06:43 - something like this we can also write so
06:45 - these also comes in keywords they are
06:48 - having reserved words right
06:50 - so
06:51 - see
06:52 - now let's see
06:54 - see this program and how many keywords
06:56 - are there in this program generally we
06:58 - know keywords like int is a keyword
07:02 - right
07:03 - so
07:04 - in this
07:05 - program how many keywords are there
07:08 - if i say see int this is a keyword right
07:12 - or
07:13 - is this main is a keyword
07:17 - is include
07:18 - a keyword
07:21 - you have to tell these thing without
07:23 - referring to the list of the keywords
07:25 - you have to tell because generally
07:28 - 1999 students
07:30 - used to get confused in these things
07:32 - they think that main is a keyword they
07:34 - think that this include this is a
07:35 - keyword this io stream this is a keyword
07:39 - no the c out
07:41 - keyword no these are not keywords this
07:45 - you need to take care
07:47 - these are
07:48 - predefined identifiers
07:52 - two things are there
07:54 - keyword and predefined
07:56 - identifiers these are simple identifiers
07:59 - but predefined predefined means already
08:02 - defined have some meaning
08:04 - right
08:06 - so see if i write in my program if i
08:09 - write rather than a if i write in
08:12 - main equal to 10
08:15 - and if i print value of
08:18 - main
08:19 - here i am printing
08:21 - main
08:22 - what do you think what output you will
08:24 - get here
08:26 - you will get
08:27 - 10
08:28 - yes
08:29 - main is not a keyword
08:31 - see keyword or reserved words you cannot
08:33 - use keyword as identifier i have told
08:35 - you
08:36 - if main is a keyword then this would
08:38 - give error but main is not a keyword
08:40 - main is predefined identifier
08:44 - you can use it in your program
08:47 - as a name of a variable simple variable
08:49 - and it will not give error
08:51 - but i
08:52 - i'm damn sure 99 percent of you guys
08:55 - haven't tried this thing you can try
08:56 - this i'll show you on my laptop also
08:58 - there are some other predefined
09:00 - uh you know uh you can say
09:03 - identifiers
09:05 - let me just show you these things on my
09:07 - laptop then you will get it better i
09:09 - hope basic query is clear to you guys
09:11 - what is identifier what is keyword and
09:12 - list i i have already shown you i'll
09:14 - show you i'll
09:16 - show you again also that
09:18 - list
09:19 - okay let me create a new file
09:24 - keyword and
09:29 - identifier.cpp right
09:32 - and same i'm writing here
09:34 - include i o stream
09:38 - this header
09:40 - and
09:42 - int
09:43 - main
09:46 - and simply we are printing like end
09:50 - main i am taking
09:52 - is equal to 89 semicolon enter
09:56 - c out
09:59 - main
10:01 - and
10:02 - endn
10:03 - i hope
10:05 - you got the mistake i have done in the
10:07 - program as well as on the whiteboard
10:10 - right
10:10 - we have to use std namespace so before
10:13 - this i am using std
10:15 - and endl is also in which namespace std
10:19 - so we are writing this and
10:20 - now there is no error
10:22 - so see
10:23 - main
10:24 - we can take main as a name of identifier
10:27 - as a name of variable and it is printing
10:29 - 89 it will not give any error
10:31 - main is predefined
10:33 - identifier so here is a list of
10:34 - predefined some
10:36 - predefined identifiers i'm showing you
10:39 - so anything you can take if i'm taking
10:41 - here like not main again we will take
10:44 - int
10:45 - c out
10:46 - now let me just show you one interesting
10:48 - thing
10:49 - c out is equal to 45
10:52 - right
10:54 - and
10:56 - maybe you will think rather than writing
10:57 - std here simply we can write map
11:01 - using
11:03 - name space although it's not a good
11:05 - practice to write this thing but still
11:07 - we are writing because i have got many
11:08 - comments rather than writing this you
11:10 - simply write using namespace std okay we
11:13 - are writing using namespace std right
11:18 - now
11:20 - it is giving
11:21 - error why so because we have take see
11:23 - out and seen these are also predefined
11:25 - identify these are not keywords so you
11:28 - can use it you can use these thing as a
11:30 - name of variable generally we don't use
11:32 - this thing but if we use then what
11:34 - happens still i'm using this namespace
11:37 - std but still this c out would be
11:39 - considered as c
11:44 - i hope you can see this whenever i'll
11:46 - move cursor to c out it is showing int c
11:49 - out
11:50 - it is not considering the c out from
11:52 - this std namespace it is considering
11:54 - this considering this c out this intc
11:57 - out the variable
12:00 - that is why this endl is giving an error
12:03 - right
12:05 - so what we can do if suppose i write
12:09 - here so
12:10 - std
12:11 - this thing
12:14 - and i am going to comment this using
12:16 - namespace std
12:18 - now it is fine it will not give any
12:20 - error and endl is also from std
12:24 - right so you can write down this thing
12:27 - now
12:27 - this is clear to clear to the compiler
12:30 - this c out is from std namespace this is
12:33 - the object cnc outdoor object it is from
12:36 - the o stream
12:38 - header file
12:39 - right
12:41 - so that is why
12:43 - sometimes it is a good practice to use
12:45 - this std whenever you write down c out
12:49 - like std colon colon c out rather than
12:51 - writing using name space std see i have
12:54 - written this program using namespace std
12:55 - but still it was giving error
12:58 - because i am taking c out as a name of
13:00 - variable generally we don't take and we
13:02 - should not take these thing as a name of
13:04 - variable but
13:05 - just i want to show you all the cases
13:08 - right if by mistake we take this then
13:10 - what can happen
13:12 - so this can also be a
13:14 - thing in your program so better to use
13:16 - std see how these kind of things at this
13:19 - point of time if i print
13:21 - like if i print
13:26 - this
13:28 - see out
13:36 - see what output you will get 89 and 45
13:39 - 89 for main 45 for c out right
13:42 - but see if same
13:44 - like
13:46 - let us take example of a keyword else is
13:48 - a keyword so if i take
13:50 - else
13:51 - if i want to take else as a name of
13:55 - variable then it will give it because
13:58 - keywords are reserved words you cannot
14:00 - take keywords as a name of identifier
14:03 - right see it is giving error expected an
14:06 - identifier here you should take an
14:07 - identifier but else is a keyword
14:10 - but the c out main io stream include c
14:14 - in
14:15 - these are
14:16 - some predefined identifiers you can use
14:18 - these as a name of variable as a new
14:20 - function
14:21 - right
14:22 - but we should not do this thing
14:25 - this can give
14:27 - you know
14:28 - conflict in your program as i have
14:30 - shown you here c out if you take as a
14:33 - name of variable then if you don't use
14:36 - here stdc out if you use here using
14:38 - namespace std
14:39 - still it is showing error it was taking
14:43 - c out as in c out not from std not that
14:47 - object
14:48 - right so you can take like include as a
14:51 - variable name iostream as a variable
14:52 - name
14:53 - rather than it you can take float also
14:55 - so you just try out these things right
14:58 - and see the reserved word that i have
15:00 - told you like and
15:02 - and underscore
15:03 - eq these 11 are reserved what but these
15:06 - are not essential when we use ansi
15:08 - character set then we have corresponding
15:11 - operator for this thing and operator we
15:13 - have operator we have
15:14 - no not operator we have so we can use
15:16 - those operators rather than writing a
15:18 - and d and oro but you can use this also
15:21 - these are not essential but you can use
15:23 - if you want to use right
15:25 - keywords and identifiers is clear to you
15:28 - those who already have the knowledge of
15:30 - keyword and identifiers simply i'm damn
15:32 - sure definitely they have you know got
15:35 - something new some new effects from this
15:37 - video right so now i'll see in the next
15:39 - video maybe the next we will discuss
15:41 - namespace right so i'll see in the next
15:43 - video till then bye