00:00 - doubly-linked list so far we have
00:02 - discussed all about singly-linked list
00:05 - all the operations on singly linked list
00:07 - like insertion deletion reverse
00:09 - traversal creation of a singly linked
00:11 - list I will provide you the link of all
00:14 - the videos of singly linked lists in the
00:16 - description box you can check out there
00:17 - so see how a singly linked list can be
00:21 - represented we have already discussed
00:23 - like this this is a node this is data
00:26 - part and this part is what address part
00:28 - or you can say it's a pointer to next
00:30 - node it is going to a store address of
00:33 - next node right 100 200 400 is I'm
00:36 - taking addresses in memory random
00:38 - addresses it's not compulsory that these
00:40 - addresses are in increasing order only
00:43 - maybe here you can write in 150 fine any
00:46 - random location can be assigned in
00:49 - memory fine so now see this mode is
00:52 - having only a single link this link
00:54 - single link to its next node that is why
00:57 - it is known as singly linked list
00:59 - now what is an doubly linked list it is
01:02 - going to contain two links one linked to
01:05 - its next node and one linked to its
01:07 - previous node fine
01:09 - so now logically how you will represent
01:11 - a doubly linked list see and see this is
01:15 - the head pointer this pointer is going
01:17 - to store address of the first node see
01:20 - this is just a pointer you cannot say
01:22 - this is a head node this is a head
01:24 - pointer fine pointer to this first node
01:27 - this is known as you can say head node
01:29 - the first node in the list when you are
01:31 - writing a program and you are
01:32 - implementing a linked list then we are
01:34 - going to maintain the this information
01:36 - only the head only the head pointer only
01:38 - it means address of the first node only
01:41 - we have with us when you are writing a
01:43 - program when you are going to implement
01:45 - a linked list so now see in doubly
01:48 - linked list this is singly linked list
01:49 - and this is what a doubly linked list so
01:51 - here each node is having three parts one
01:56 - is data part this is known as data part
01:59 - this is known as address part this is
02:01 - also known as address part fine now
02:03 - suppose in data part we have same data
02:06 - seven four and nine right now
02:10 - this part is going to contain
02:12 - of the next node suppose address of the
02:14 - next node in the sequence we have only
02:16 - through nodes is 200 so it is going to
02:19 - contain 200 it means this node is
02:22 - pointing to the next node right now same
02:25 - that this part of this node is going to
02:26 - contain address of next node that is 400
02:29 - so it is going to point here and this
02:31 - part is going to contain 0 because this
02:34 - is not pointing anywhere this is the
02:36 - last node you can say this is none now
02:39 - one more thing in W let's now see what
02:41 - you are going to store in this address
02:44 - part of this node this is having the
02:47 - address of previous node this is going
02:50 - to point this is you can say a point to
02:52 - previous node so previous node is null
02:55 - no previous node is there so that is why
02:57 - here we are going to store 0 but you can
03:00 - say null in this part of this node it is
03:03 - having address of previous node that is
03:06 - hundred so here you will write hundred
03:08 - that is why now it is going to point to
03:10 - the previous node so you can say it is a
03:14 - doubly linked list two links are there
03:16 - double links fine here what you are
03:18 - going to store that is 200 so it is
03:21 - going to point here fine and ahead point
03:25 - obviously we are going to maintain a
03:26 - head pointer and it will have address of
03:29 - the first node in the list so now this
03:33 - is known as a node this is also a node
03:36 - in the linked list so now how we are
03:38 - going to represent these nodes in the
03:40 - program how we can represent this node
03:42 - node of a singly linked list we have
03:44 - discussed many times C so this is how we
03:48 - are going to represent a node of a
03:50 - singly linked list if you are not
03:51 - getting why I am writing like this then
03:53 - you can check out the video introductory
03:55 - video singly linked list I provided the
03:57 - link of that we do in this I button so
03:59 - first of all check out that video fine
04:01 - in this case the data type of this node
04:03 - is what struct node this complete is
04:05 - what data die we have defined our own
04:07 - data type fine like we have integer
04:09 - float character these are data types now
04:11 - so here in this case we have defined our
04:14 - own data type this is user defined
04:15 - anytime that is a struct node two parts
04:18 - are there that is this is having integer
04:20 - data type and
04:21 - says a pointer pointer to the next node
04:23 - so how they are going to represent this
04:25 - struct no district next this is for next
04:28 - now in this case data part and this part
04:32 - is same but we have added one more
04:34 - pointer that is previous pointer this
04:36 - pointer is going to store address of
04:38 - previous node so only difference in this
04:41 - representation is what you are going to
04:43 - declare one more pointer within this
04:47 - struct node within this struct node
04:49 - right three parts would be there one two
04:51 - and three so struct node one more
04:54 - pointer you can say three pointer right
04:58 - two pointers are there in one data part
05:00 - and obviously this is what this is a
05:03 - head pointer you are going to declare a
05:06 - head pointer which are containing
05:07 - address of this one why we are having
05:09 - this head pointer because you cannot
05:10 - directly access the members of the
05:12 - structure to access these fields this
05:15 - data this node this next and this
05:17 - previous you need either a struct
05:21 - variable or a pointer right and here we
05:24 - are discussing about dynamic memory
05:26 - allocation so that is why we are taking
05:28 - what a pointer because we can access the
05:31 - dynamically allocated memory using a
05:33 - pointer that is why we are taking a
05:34 - pointer here right so this is how you
05:38 - are going to represent this node when we
05:40 - will write a program on w linked list
05:42 - now see what are some advantages of
05:45 - doubly linked list of all you will
05:46 - discuss those things see in this case
05:49 - you can traverse the linked list in
05:51 - forward direction as well as in backward
05:54 - direction because two links are there
05:56 - but in this case we can go only forward
05:58 - next thing is see suppose we have a
06:01 - pointer m and which is pointing to the
06:04 - second node that is it is having address
06:07 - 200 so now using this pointer only we
06:10 - can look forward also and we can look
06:12 - backward also to this node also and this
06:15 - node also right if if I say 10 next is
06:19 - it means this address so we can access
06:21 - this node if I say temp temp arrow this
06:25 - pointer pre pointer then we have value
06:28 - is 100 so we can look to this node also
06:31 - but in this case
06:32 - you cannot look backward you cannot look
06:36 - reverse see if here is the temp pointer
06:39 - you can only look forward because temp
06:43 - next means 400 so you can go here you
06:46 - can access the state only we don't have
06:48 - any information regarding this we cannot
06:50 - move back but here we can do this right
06:53 - so in this case deletion is easy if you
06:56 - want to delete a node then only one
06:59 - pointer is enough but here we have to
07:01 - maintain what two pointers for deletion
07:03 - as well as insertion is also easy both
07:07 - deletion and insertion we will discuss
07:09 - in detail in the next video finally we
07:12 - are also going to implement insertion
07:14 - and deletion in doubly linked list right
07:16 - but one drawback of this linked list is
07:19 - what see here we are storing two
07:21 - pointers right so this is going to take
07:24 - more memory space suppose here if you
07:28 - want to calculate the memory space
07:30 - requirement of this node then integer is
07:32 - going to take 4 bytes in typical
07:34 - compilers and pointer is also going to
07:35 - take 4 bytes in 32-bit compilers so it
07:39 - means 8 bytes for this node but here for
07:43 - storing the same information that is 7
07:45 - you need how many bytes for for this 7
07:49 - this end is a data for for this pointer
07:52 - and 4 for this pointer right so here you
07:56 - will need 2 l bytes so you can say in
07:59 - this case extra memory would be required
08:01 - then this singly linked list to store
08:04 - the data right but many advantages are
08:08 - also there of doubly linked list that is
08:10 - why the concept of doubly linked list
08:12 - came into picture see and one more thing
08:15 - is that for of printing this doubly
08:18 - linked list in reverse direction you
08:19 - just traverse the linked list till here
08:22 - and from here only you can print this
08:25 - data then this data and the statement
08:27 - this data because you we can traverse
08:29 - this list in backward Direction also
08:32 - because of this link but here we cannot
08:34 - do something like this we can note
08:35 - traversal 8 in backward direction so in
08:39 - next lecture we will discuss how to
08:41 - implement a doubly linked list have to
08:43 - perform insertion operation
08:45 - deletion operation and how to traverse
08:47 - how to display the data offer doubly
08:49 - linked list right so I'll see in the
08:51 - next video till then bye-bye take it