00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language we are
00:05 - discussing vectors in C++ right so till
00:09 - now we have discussed like what is STL
00:11 - because vectors are part of STL standard
00:13 - template Library what are vectors how to
00:15 - declare a vector how to initialize it
00:17 - how to access Vector elements how to
00:18 - modify Vector elements right now there
00:22 - are basic things we have discussed about
00:24 - vectors but there are more you know
00:26 - member functions that we can use on
00:28 - vectors and these functions these
00:31 - methods are extremely useful when you
00:34 - are using
00:35 - vectors right so you should know about
00:38 - these functions or these member
00:39 - functions right why I'm calling this
00:42 - like member functions because Vector is
00:44 - a class I have told you and whatever
00:45 - Vector we create that acts as a object
00:48 - of that class right so those member
00:52 - function of that vector class we will be
00:54 - using one by one in this video right
00:56 - okay now let's create a file first new
00:59 - file
01:01 - Vector functions. CPP right so first
01:06 - obviously we will include iio stream
01:09 - that header then if you use vectors then
01:12 - you have to
01:14 - include Vector right and then name
01:19 - space first let's create a vector
01:23 - right and suppose Vector is integer and
01:27 - I'm just taking V right
01:33 - so first thing we'll be discussing is
01:35 - iterators so first let me just tell you
01:38 - what is an iterator it's like a pointer
01:40 - but it's not exactly a pointer you know
01:43 - what is a pointer it is a variable that
01:45 - contain address of another variable
01:47 - right okay now iterator is also like
01:52 - pointer but not exactly same iterator
01:54 - and pointers are different right but we
01:58 - can say like an iterator is used uh you
02:00 - know to point the memory address of STL
02:04 - container classes we know Vector is a
02:07 - class we I told you like it's a sequence
02:09 - container it is class so it Itor is like
02:12 - many other sequence container classes
02:14 - also like list map and many more so
02:17 - Vector is used to point the memory
02:19 - address of these container classes right
02:22 - and using Vector we can access what we
02:24 - can do basically we can access the
02:26 - elements of those container and we can
02:29 - perform some operation on those elements
02:31 - right like it's like a pointer like in
02:33 - my class if suppose I'm pointing to
02:35 - someone using this finger like so this
02:38 - is what a
02:39 - pointer so using this pointer this is
02:42 - like an iterator we can say I can call
02:45 - that student like come here rather than
02:47 - calling his or her name or rle number
02:50 - just pointing so it's like a pointer or
02:53 - I can access that student with this
02:55 - pointer only right I hope you're getting
02:57 - my point so same iterator
03:00 - right so using iterator we can access
03:03 - elements okay of that container class
03:06 - like vector or list or map like this
03:09 - right now see and exactly see I don't
03:13 - remember like all the member functions
03:15 - on vectors but there is a side and you
03:18 - also don't need to remember all the
03:19 - things right one by one we'll be using
03:22 - you just learn and remember the
03:25 - frequently used member function right
03:28 - and whenever you use in your program
03:30 - again and again you know the these
03:32 - things would be in your mind I think you
03:35 - don't need to put extra efforts to learn
03:38 - these things you just use these things
03:40 - in your program practice right so
03:42 - there's a website like CPP uh sorry C++
03:45 - doom and
03:47 - there and there is a website like C+
03:50 - plus.com and here you will get Vector so
03:54 - here you will get all the functions
03:56 - member functions of vector see member
03:58 - functions right first are iterators so
04:01 - here we have these functions begin and R
04:03 - begin R and C begin C end and like this
04:06 - so we'll be discussing two or three
04:08 - functions and these you will practice
04:11 - remaining function you will practice
04:13 - right so first we'll be using begin and
04:15 - end see as you know when whenever you
04:17 - click on this function uh there is a
04:20 - proper description of this function
04:22 - begin it is going to return the iterator
04:25 - to the beginning return an iterator
04:27 - pointing to the first element in the
04:29 - vector
04:30 - right same
04:32 - end it will Point not to the last
04:36 - element let me show you what is end see
04:39 - this function returns an iterator
04:40 - referring to the past the end element in
04:43 - the vector container not the last
04:45 - element no see what is this past the end
04:48 - this element is theoretical element that
04:50 - would follow the last element in the
04:53 - vector right so after last element and
04:56 - practically if we see there is no last
04:59 - element no element after the last
05:01 - element so basically it does not point
05:04 - to any
05:06 - element right now what does this mean
05:08 - how to use this begin and end let me
05:10 - just show you so suppose this is a
05:14 - vector and I want to print this Vector
05:17 - right using iterator so first you have
05:21 - to you know declare an iterator how to
05:24 - declare you have to write same like
05:27 - vector and whatever the object type of
05:30 - this Vector int right an INT type of
05:33 - iterator we want scope resolution
05:35 - operator and you have to use proper here
05:38 - iterator this and after that name of the
05:41 - iterator x y z a b c any name you can
05:44 - take I'm taking here
05:47 - it right now this is a iterator it okay
05:52 - now with four Loop what we can do we are
05:55 - not taking any normal variable to access
05:58 - to print these element ments like we
06:00 - have done in previous lectures but we
06:01 - will use iterator so we just call on
06:05 - this iterator I sorry I is equal to now
06:10 - first we we want to point this iterator
06:12 - to the beginning of this Vector the
06:14 - first element so which function you will
06:16 - call on this Vector begin V
06:19 - Dot
06:21 - begin right so this function is going to
06:26 - return the iterator to the first
06:30 - element so now this it is pointing to
06:33 - one
06:35 - then it the
06:38 - iterator not equal to the end till then
06:42 - we are going to print the elements right
06:45 - so V Dot
06:47 - end and then we just do Plus+ or Plus+
06:51 - it or it ++ iterator Plus+ right and
06:56 - simply we are going to print these
06:59 - numbers now
07:01 - uh we have a d referencing operator if
07:03 - because it's like a pointer so if you
07:06 - want to D reference a pointer then we
07:08 - use this this is a d referencing
07:11 - operator star estri estri
07:19 - it so this is how we can access using it
07:22 - trator all the elements right it's like
07:24 - pointer now right so with pointer also
07:26 - if you want to access because in it we
07:28 - have like some address
07:30 - so at this address what is the value
07:32 - using SRI operator we can access that
07:34 - value so that is why this thing right
07:41 - now and if you run this then
07:49 - the okay there is this error this is
07:52 - extra to here right and in Vector also
07:56 - we have this thing so save this and now
07:58 - let's run this see 1 2 3 4 0 78 now why
08:03 - what is we can use only simple variable
08:06 - also like intial to Z I should be less
08:09 - than whatever the size right but here
08:11 - you don't need to you know remember or
08:14 - the size of this
08:15 - Vector you just increase you just put
08:18 - some more variable and that's it you
08:21 - don't need to change the size here right
08:25 - so directly the iterator would move from
08:27 - here to
08:28 - here
08:38 - see now this time this value you will
08:40 - get so you don't need to remember or
08:42 - take care of the size of the vector and
08:44 - you can also do something like this uh
08:46 - we can modify this like if I write + one
08:50 - here so I want to start from
08:53 - two so this also we can do and let's run
08:58 - this
09:06 - see from two it will print two 3 4 like
09:08 - this right and there are many more ways
09:11 - here we can use this begin and end we'll
09:14 - be discussing in you know later videos
09:17 - when we writing more and more programs
09:19 - on vectors right this is just a simple
09:22 - example just to tell you yeah this is
09:24 - how we can use begin and end right so it
09:27 - is pointing to the first element and
09:30 - this will
09:32 - point this element after the end the
09:35 - last element is nine so whatever after
09:37 - this last element it will Point here but
09:39 - practically there is no element so it is
09:41 - not pointing to any particular element
09:43 - so we cannot deference this end now next
09:47 - are this R begin R end means it return
09:50 - the reverse iterator to reverse
09:52 - beginning right and R end so what does
09:56 - this mean if I use a reverse itat
10:00 - suppose let's just copy paste this thing
10:04 - here
10:09 - and let's comment out this thing because
10:13 - this
10:14 - is so these are for begin and end and
10:19 - this thing next whatever we will be
10:21 - discussing here that is for our begin R
10:23 - end so to create a reverse
10:26 - iterator you have to write here reverse
10:29 - iterator Ator right and the iterator
10:31 - name it or any other iterator name also
10:34 - you can take I ABC XY Z anything so
10:39 - let's take R reverse iterator okay now
10:43 - RIT this
10:48 - iterator on this we cannot call this
10:50 - begin function because it is reverse
10:52 - iterator so you have to call R begin
10:56 - right and this RIT not equal to R end
11:01 - till then RIT ++ and while referencing
11:06 - you have to use R so what you think what
11:10 - it will print
11:12 - see this R
11:14 - begin it it will return a reverse
11:17 - iterator pointing to the last element in
11:20 - the vector last element it will point to
11:22 - the last element means it is like
11:24 - reverse beginning so if you want to
11:26 - print that Vector in reverse order we
11:28 - can just use this thing and whenever you
11:30 - increase this the iterator r begin then
11:34 - it will iterate
11:36 - backward right towards the
11:41 - beginning and R end means see R end will
11:46 - point
11:47 - to see this RN it returns a reverse
11:50 - iterator pointing to I mean to the
11:53 - theoretical element preceding the first
11:55 - element in the vector so that is RN
11:58 - before the first element
11:59 - practically obviously there is no
12:01 - element but theoretically we consider
12:03 - that there's a element before the first
12:05 - element so R end will point to that
12:07 - element right so we are moving in
12:10 - reverse order right so this will print
12:15 - this R begin this will point where here
12:20 - to this element nine and whenever we
12:23 - increase this RIT ++ then it will move
12:26 - backward like
12:27 - this right
12:29 - and this R end will point to one element
12:32 - before this first element before one but
12:35 - practically there no there's no element
12:36 - so it will point to no element so uh we
12:40 - cannot deference this thing so it will
12:43 - print what that Vector in reverse order
12:47 - right okay
12:48 - sorry let me just run this again and see
12:53 - it will print it is printing in reverse
12:55 - order to that Vector right same we have
12:58 - some more function like
12:59 - C begin C and for constant so those
13:02 - thing you will try Okay so next is this
13:06 - capacity we have discussed like size and
13:08 - capacity these two uh member function
13:11 - but let's discuss more things size
13:13 - maximum size and capacity these thing
13:16 - let's discuss size it will return the
13:18 - actual size of that Vector how many
13:20 - elements in that Vector right now
13:21 - maximum size maximum number of element
13:24 - that Vector can contain can hold it will
13:27 - return that thing right and capacity
13:30 - means uh it will return on the size of
13:32 - allocated storage capacity for that
13:34 - Vector how size and capacity are
13:36 - different let me just show you with an
13:38 - example so for this I'm creating another
13:41 - Vector let's suppose I'm taking a vector
13:44 - of type
13:45 - care okay we have a e i o these four vs
13:49 - here right so let's print size Max size
13:53 - and capacity size of this Vector is we
13:57 - have a function size size that we
13:59 - directly call on this Vector right
14:03 - same for mix size we have a function mix
14:06 - size and for capacity we have a member
14:10 - function
14:11 - capacity so like this we are
14:14 - printing okay now let's run this and see
14:17 - what's happening here size is four okay
14:20 - let's just decorate a little
14:24 - bit after everything we have a new line
14:26 - operator so here size is four maximum
14:30 - number of element this Vector can hold
14:32 - these number of elements and capacity is
14:34 - also right now four so both size and
14:36 - capacity are same four and four because
14:38 - initially we have initialized only four
14:40 - elements now what we do let's insert one
14:42 - more element here in this Vector so we
14:46 - can use push
14:50 - back push back function right it is
14:53 - going to push a uh element in the last
14:59 - of this Vector right so what I want to
15:01 - push back I O
15:03 - [Music]
15:05 - U right now let's just again print all
15:10 - the three things so after pushing back
15:13 - one Vol U I'm just printing again size
15:17 - Max size and capacity so first four this
15:22 - is the capacity and this is the maximum
15:24 - size after inserting size is actually
15:27 - five Max size would be same but capacity
15:30 - is now eight see the difference size and
15:32 - capacity because it is going to double
15:36 - its size right so first four was the
15:40 - size capacity was four now if you insert
15:42 - one more element so it is going to
15:44 - double its size so 1 2 3 4 it becomes 8
15:49 - right now capacity is eight right now
15:51 - the capacity of this Vector is eight it
15:52 - can store eight element
15:54 - and actual size is five maximum size is
15:58 - I have told you
15:59 - now why this capacity is going to be
16:01 - doubled because to avoid the re you know
16:05 - reallocation of this Vector again and
16:07 - again after each insertion what we do
16:10 - here if I'm inserting this U now so what
16:14 - it will do
16:15 - internally another Vector would be
16:17 - created of capacity 8 and all these
16:20 - values would be copied in that vector
16:22 - and this Vector is to be destroyed
16:25 - dumped right so rather than reallocate
16:28 - getting again and again after each
16:31 - insertion right now capacity is 8 so
16:34 - till
16:35 - 8 I I mean after U we can insert five
16:39 - more element here and there would be no
16:41 - reallocation of the these elements right
16:45 - but after eight if you insert nine
16:47 - element then the capacity would become
16:48 - again double mean 16 right okay so this
16:54 - is the thing size Max size and capacity
16:56 - now if you want to resize for that also
16:59 - we have a thing like resize if you want
17:01 - to change the size of the vector then
17:05 - also we can change but here in this case
17:07 - what will happen let me just show you so
17:10 - now the size of this Vector is what
17:14 - actually five so I want to resize it so
17:17 - how to
17:19 - resize wals dot just call this
17:23 - resize and how many number of
17:26 - element the size would be to store how
17:29 - many elements so here you have to give
17:31 - that n value so that would be
17:35 - three right so right now in this Vector
17:37 - we have a e i o u after resize if you
17:41 - print this Vector if you print this
17:44 - Vector let me just show you what it will
17:46 - print so what it will print after resize
17:49 - till 0 to uh size of that vector and we
17:52 - are using add function to access the
17:55 - elements right now right so see it is
17:58 - going to to print a e I only three
18:01 - elements because we have resized the
18:04 - vector to three so resizing means this
18:07 - is like n the number of element you want
18:10 - to store in that that Vector the size so
18:14 - after three after n number of elements
18:16 - if there are extra elements in that
18:18 - Vector right now so it is going to erase
18:21 - all that elements remove all those
18:22 - elements and destroy those elements
18:25 - because in Vector we have five elements
18:27 - after inserting this U after push push
18:29 - back the U but after resizing it will
18:32 - print only three element a e i removing
18:34 - all the two elements right so yeah it is
18:36 - going to alter the vector elements also
18:40 - this resize this operation sorry this
18:43 - function right and if the vector is here
18:47 - integer let's take integer Vector here
18:51 - int I want to
18:54 - resize this Vector resize 10
19:05 - I have resized this Vector to 10 so see
19:09 - let's what let's see what it will print
19:12 - see 1 2 3 5 0 0 0 0 0 because it is
19:15 - integer so it would be the remaining
19:17 - element would be initialized to zero
19:19 - because you are not providing any value
19:20 - right now Vector size is five but you
19:22 - have size to 10 now it will insert 10
19:24 - element here so five are there by
19:27 - default it will insert 0 0 0 right and
19:31 - see here right now the capacity of this
19:33 - Vector is also five but you have to
19:35 - resize you have resized this to 10 so if
19:38 - you want to print here the capacity of
19:40 - this Vector size and
19:43 - capacity let's Sprint both size and
19:46 - capacity of this Vector after
19:49 - resizing see size is 10 capacity is also
19:52 - 10 right here we have empty Reserve sh
19:55 - to fit empty means you have to test
19:57 - whether the vector is empty or not
20:00 - Reserve means request a change in
20:02 - capacity if you want to like reserve a
20:04 - seat if you are setting somewhere in a
20:07 - classroom right and you have reserved a
20:10 - seat next to you and if someone is
20:13 - coming you will say that my friend is
20:14 - coming so this seat is reserved right
20:17 - now there is no one on that seat it's no
20:19 - element but someone is going to come in
20:21 - future you know that thing so you have
20:24 - reserved that thing so capacity is of
20:26 - two seats but right now only one element
20:29 - only only you are sitting there so if
20:31 - you want to
20:32 - reserve extra capacity if you want to uh
20:34 - you know request a change in capacity we
20:37 - can use this Reserve function see
20:41 - request that the vector capacity be at
20:43 - least enough to contain n elements right
20:46 - N means any number of elements you can
20:48 - say okay let's see how to use this empty
20:51 - and Reserve so see the capacity was 10
20:56 - and after the size size was also 10 but
20:58 - but if you want to reserve the capacity
21:00 - to 100 so what we can do like I know
21:04 - I'll be inserting 100
21:06 - elements uh you know uh in this program
21:09 - later so rather than reallocating again
21:12 - and again after the insertion you know
21:15 - for capacity because capacity is going
21:16 - to double right after if the that is
21:20 - capacity is exhausted so at first I I
21:24 - I'm going to reserve 100 capacity for
21:26 - 100 elements so here if you want to
21:28 - reserve then we can call this reserve
21:31 - and here 100 100 for 100 elements I want
21:35 - to reserve so right now capacity would
21:37 - be 100 if you run this thing see let me
21:40 - show
21:42 - you see capacity is 100 and size is 10
21:46 - right so you can reserve extra capacity
21:49 - also space Also and what was empty
21:52 - before printing this Vector if you want
21:55 - to check like the vector is empty or not
21:58 - so so we can use that thing also like if
22:01 - this Vector uh V Dot
22:07 - Mt we can call this
22:10 - function then we simply print no element
22:14 - in Vector so it will return if the
22:17 - vector is empty it will return true so
22:19 - if true there is no element but right
22:21 - now we have elements in this Vector so
22:25 - it is going to print those elements
22:28 - right okay
22:30 - let's run this
22:34 - again see it is going to print these
22:38 - elements right but if the vector is
22:40 - empty Suppose there is
22:46 - nothing don't resize it right now let's
22:51 - run
22:53 - this see no element in vector v size is
22:56 - zero capacity is 100
22:59 - because Vector is empty size is zero and
23:01 - capacity we have reserved 100 for 100
23:03 - element and no element in the vector so
23:05 - this is how you can test using Mt shrink
23:08 - to fit means if you want to you know
23:10 - shrink the capacity of that Vector equal
23:13 - to the size of that Vector then we can
23:15 - call that string to fit function and see
23:18 - in resize we can give like the resize 10
23:21 - and I want to insert 50
23:24 - here so it will insert 1050 in this
23:27 - vector
23:29 - right so this thing also we can do in
23:32 - Rec like 50 50 50 right 10 * 50 right
23:36 - number of times and then the value you
23:38 - can give that is also fine in resize or
23:41 - only resize only size you give 10 then
23:44 - the element would be by default
23:46 - initialized to 0 0 0 0 right 10 element
23:48 - 10 Z in that Vector okay now string to
23:51 - fit is what so it request the container
23:53 - to reduce its capacity to fix its size
23:56 - please go through this website and you
23:57 - will get here everything right you don't
24:00 - need to remember everything any I don't
24:02 - remember everything every function and
24:04 - the description and how to use that
24:06 - function right so how to use this thing
24:11 - see right now size is 10 of this Vector
24:15 - because we have resized this vector and
24:17 - reserve the capacity is 100 right but
24:21 - now I know that I don't want to insert
24:23 - 100 elements so I want to
24:25 - shrink its capacity to the actual size
24:29 - so what we can do here after printing
24:32 - this capacity if you want to shrink then
24:34 - you can call that function in this
24:36 - vector v on this vector v dot shrink of
24:39 - it and now after this if you print again
24:42 - the capacity after Shing to fit the
24:45 - capacity is okay whatever the capacity
24:48 - it is going to print see first the
24:51 - capacity was 100 size was 10 but
24:53 - capacity of we after Shing to fit is
24:57 - 10 we we are requesting to shrink its
25:00 - capacity to the actual size so 10 and 10
25:03 - right okay this is what we can
25:07 - do but it is not necessary that this
25:10 - request would be granted strength to fit
25:12 - it depends okay next are how to exess
25:16 - the elements this thing we have
25:17 - discussed in previous video using this
25:19 - operator then add front back and like
25:22 - this now next is modifier we have some
25:24 - modifier push back we have discussed add
25:27 - element at the end pop back means it
25:29 - will delete the last element right
25:32 - insert so let's see these two push back
25:35 - and pop back first so this is our vector
25:38 - v and there is nothing in this Vector so
25:41 - now I'm going to push back some elements
25:42 - in this Vector right so it is going to
25:44 - add the element at the last of that
25:46 - vector and it's going to increase the
25:48 - obviously the size of that vector by one
25:51 - by one by one right one element we can
25:53 - add using this thing so let's use do I
25:58 - Loop
26:00 - here okay
26:04 - here it will ask like enter element and
26:11 - uh we are taking a value suppose well so
26:15 - let's take into well a variable first
26:19 - right and then this thing we are going
26:22 - to push back in this Vector this
26:25 - variable push back and well
26:29 - right and if you enter zero
26:34 - then
26:35 - exit this is the condition we'll take
26:38 - we'll put here right and in this y Loop
26:41 - we just put Val if the Val is zero exit
26:45 - right okay now pop back pop back means
26:50 - it it remove the last element and it
26:52 - will decrease the container size by one
26:55 - right so let's pop back here also V do
26:59 - pop
27:01 - back and that's it last element it will
27:04 - it will pop back again pop back two po
27:07 - backs I'm using and uh we are now
27:11 - printing the element of this Vector this
27:13 - is how we are going to print after P
27:18 - back
27:20 - okay let's run
27:24 - this and see what output you are
27:27 - getting now enter element 1 2 3 4 and
27:31 - now
27:33 - zero now Vector elements after pop back
27:35 - is only one 2 three because we have used
27:37 - two pop back so 1 2 3 4 0 0 was last
27:41 - element Zer was pop back four was popped
27:43 - back and remaining elements are 1 to
27:45 - three only right so this is how we can
27:47 - use before popping back you can again
27:49 - you can just if you want to print if you
27:52 - want to check the number of elements we
27:55 - can
27:57 - check
28:00 - it's before pop back so now it will
28:03 - print two times 1 2 3 4 5 0 Vector
28:08 - elements before pop back 1 2 3 4 5 0
28:10 - after pop back 1 2 3 4 two elements 0
28:13 - and 5 are out and destroyed continous
28:16 - size was decreased by two right now next
28:19 - is we have insert okay this function is
28:23 - also
28:25 - useful so if you want to insert some
28:28 - elements at a particular position so you
28:31 - can give like obviously you have to
28:34 - point to that position iterator will use
28:36 - to
28:37 - point how many number of elements you
28:39 - want to insert that thing you need to
28:41 - give and what element you want to insert
28:43 - that thing you need to give three
28:44 - things right and it will insert
28:50 - see the the new elements before the
28:53 - element at the specified position
28:54 - whatever position you will give that
28:56 - using that iterator before that position
28:59 - those uh elements new elements would be
29:01 - inserted right and definitely to
29:04 - increase the container size by the
29:06 - number of element inserted right so
29:10 - let's see how you are going to use this
29:12 - now we have some Vector like I have a
29:14 - vector v and the these are the values in
29:16 - this Vector okay now I want to insert
29:20 - values
29:21 - here at position three right so now you
29:26 - have to give what value you want to
29:27 - insert how many value you want to insert
29:29 - and the position so position I mean to
29:32 - point to this thing we use iterator
29:34 - obviously so let's create an
29:37 - iterator we know there is a thing in STL
29:42 - iterator so let's use that
29:45 - thing iterator and suppose it I'm taking
29:48 - the name of that iterator and it I'm
29:51 - initializing this it it to point where
29:54 - it is equal to V Dot
29:59 - begin let's suppose first begin so first
30:02 - it will point to this here begin right
30:05 - so whatever value will insert if I call
30:08 - this V do
30:10 - insert and pass the iterator the
30:13 - position the location
30:15 - it how many value you want to insert
30:18 - suppose two and the value is suppose 80
30:22 - now let's print the vector
30:24 - elements so let's run this and see what
30:27 - output you will get here Vector element
30:29 - after insertion 80 80 see the position
30:32 - was beginning so before the position
30:34 - inserted 2 80 and 80 right if you want
30:36 - to insert at some more specific position
30:38 - like at third so begin plus 3 so two so
30:43 - this is begin plus two means 1 and two
30:46 - at third position 280 would be inserted
30:49 - right or if you don't want to insert two
30:53 - only one that is also fine let's run
30:56 - this
30:59 - see only 180 at third position right and
31:03 - these these elements would be
31:07 - reallocated right shifting to like
31:10 - towards the right one position so all
31:12 - the elements are reallocated so
31:14 - definitely it's not an efficient method
31:16 - to insert element in
31:19 - vectors but in list we can uh use we can
31:23 - you know insert an element at specific
31:26 - position more efficiently
31:28 - right this is more tedious because of
31:30 - this reallocation of all the elements
31:32 - after that position right so this is how
31:34 - we can use insert or you can you can
31:36 - insert like maybe
31:38 - 1080s
31:40 - 580s 1080s or th000 time any other any
31:45 - element right so see
31:49 - 108s this is what insert at specific
31:51 - position if you want to insert then you
31:53 - can insert more
31:56 - erray clear can use Clear means it will
31:59 - destroy all the elements of this Vector
32:02 - right so how to call V do clear fine if
32:07 - you want to clear sorry this all the
32:10 - elements of this Vector you can use B
32:13 - dot clear and it will erase all the
32:17 - elements destroy all the elements and
32:19 - after that if you
32:21 - print Vector elements after calling
32:23 - clear let's run this and see what out
32:27 - outut you will get
32:30 - here so after insertion these are the
32:33 - elements after clear there are no
32:35 - elements because size is zero and if you
32:37 - print size that would be zero if you
32:40 - want to erase particular element if you
32:43 - want to remove any particular element
32:44 - and any particular position you can use
32:46 - erase see we have erase this is clear
32:50 - this is
32:51 - erase so it is going to remove the from
32:53 - the vector either a single element or a
32:55 - range of element first and last last
32:58 - range you can give first element would
33:00 - be included in that range means first
33:02 - element would be removed but last
33:03 - element is not in that range last
33:05 - element would not be removed right let
33:08 - me show you one example of the
33:10 - series this Vector now if I apply V Dot
33:13 - erase if I call this function then first
33:17 - the position you need to give and that
33:19 - we can give using iterator because
33:21 - iterators are obviously pointing to any
33:24 - use to point the elements in that
33:27 - container class
33:30 - so you either you can create an iterator
33:33 - like this right or directly we can use
33:35 - like V Dot
33:42 - begin this element I want to remove this
33:45 - five so this is from begin to 1 2 3 + 3
33:50 - so after erasing one element which
33:53 - element would be erased from beginning 1
33:56 - 2 3 this five so let's run this what
34:00 - output you will get here there will be
34:01 - no five here and if you want to give a
34:03 - range like more than one element I want
34:06 - to erase so we can give a range also
34:09 - suppose from
34:12 - beginning to V
34:18 - Dot uh begin plus three or begin plus
34:23 - two these elements I want to erase I
34:27 - don't want to erase any particular thing
34:29 - so begin means from 1 to begin plus two
34:33 - 1 and
34:35 - 2 so this is the last iterator position
34:38 - but this four is not included so only
34:40 - one and two would be deleted 4 5 6
34:43 - 098 that should be the output let's run
34:46 - this and
34:47 - see 45
34:49 - 6098
34:51 - right this also we can do like uh + 1
34:55 - from 2 to 5 these I want to erase 2 4 5
34:59 - so begin + one first would be erased and
35:03 - last would be six because six is not
35:05 - included so we begin plus from two it
35:09 - would start so how many you will add I
35:12 - want to delete 2 4 5 so this is for your
35:14 - assignment now pause the video and write
35:16 - down this this function erase function
35:18 - what you will write here so plus one 2 1
35:22 - 2 3 +
35:25 - 3+ three means right now itat is is here
35:28 - six but six is not included so only 2 45
35:31 - would be raised 1608 should be the
35:34 - output so1
35:37 - 5608 let me just see begin + one now
35:41 - here is the iterator plus okay it's
35:45 - begin plus three so from here 1 2 3 it
35:49 - should be begin plus
35:51 - 4
35:53 - right now 2 45 would be raised 1608
35:57 - right so this is how we can use series
36:00 - the remaining function are like Swap and
36:02 - more function also there so you can use
36:03 - those functions too right just try out
36:05 - those functions if you're not getting
36:07 - you can let me know in comment section
36:08 - we can just discuss the remaining
36:09 - function in next video right so I think
36:12 - vectors are clear so now I'll see you in
36:14 - the next Tut bye bye take care