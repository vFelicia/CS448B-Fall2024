00:00 - so in the series of learning programming
00:02 - in c we are discussing pointers in C in
00:04 - pointers also there are some special
00:06 - pointers like word pointer generic
00:08 - pointer null pointer dangling pointer
00:10 - and these pointers are also very helpful
00:13 - right so we are going to discuss these
00:15 - pointers one by one in this video I'll
00:17 - discuss void pointer everything about
00:19 - void pointer like what is void pointer
00:21 - the need of void pointer why we use void
00:23 - pointer how to declare this pointer how
00:25 - to use this pointer right with the help
00:27 - of a program right and I'll show you
00:29 - that program also on my laptop practical
00:31 - also we'll see right everything we'll
00:33 - discuss about this pointer in this video
00:35 - and one by one by one in later videos
00:37 - you will discuss dangling pointer null
00:38 - pointer all the these special pointers
00:40 - we'll discuss right so you'll also see
00:43 - how this pointer is different from the
00:45 - other pointers we have discussed like
00:47 - integer pointer character pointer float
00:49 - pointer everything about this pointer we
00:51 - will discuss in this video every single
00:53 - detail right so now let's discuss what
00:55 - is void pointer I hope you know the
00:56 - meaning of this void in general term in
00:59 - English term like K or empty right so
01:03 - it's like if there's a glass and that is
01:05 - empty that is void you can fill that
01:07 - glass with maybe water with some other
01:11 - drink or with milk anything you can you
01:14 - know put in that glass right so apply
01:17 - the same concept here also try to relate
01:19 - that thing void pointer means this
01:23 - pointer is of void type means this
01:26 - pointer is having no Associated data
01:29 - type if you will see the definition it
01:32 - that maybe on internet or in any book
01:35 - then you must you must uh see that word
01:39 - pointer is what it is not having any
01:42 - Associated data type that is in simple
01:45 - terms that is a the same example you can
01:48 - take an empty glass you can fill that
01:51 - glass with either you know with water or
01:54 - with milk or with some other drink or
01:55 - anything right so same this pointer is
01:59 - having no Associated data type with it
02:01 - so you can convert this pointer in any
02:04 - other pointer also now whatever I am
02:06 - saying what's the meaning of that thing
02:08 - see first of all if I write a pointer
02:10 - something like this int
02:12 - star
02:14 - P one is float star FP here I'm writing
02:19 - IP or here I'm writing
02:22 - CP it means there are three pointers
02:25 - this is integer pointer see data type of
02:28 - pointer is not integer it means IP is a
02:30 - pointer which is pointing to
02:33 - a int data type or maybe this is storing
02:37 - an address of a variable whose data type
02:39 - is integer or simply we call it as in
02:42 - integer pointer or pointer to integer
02:44 - this is float pointer or you can say a
02:46 - pointer to float this is pointer to
02:49 - character right so they they are having
02:52 - their Associated data type the data type
02:55 - of this is the data type which is
02:56 - associated with this pointer is int with
02:59 - this float with this care but word
03:02 - pointer is having no Associated data
03:04 - type so how to declare this pointer see
03:07 - the synx is same obviously if it is a
03:11 - pointer you have to use EST this will
03:12 - tell that it is a pointer name here you
03:15 - will write pointer name suppose I'm
03:18 - writing pointer name word pointer that
03:20 - is WEP so what you will write here at
03:22 - the place of this data type simply we
03:24 - will write what this void this keyword
03:28 - void so this this is what a declaration
03:30 - of void pointer right I hope you
03:35 - understand what is void pointer it is it
03:37 - it is not having any Associated data
03:38 - type right so you can convert it into
03:42 - any other data type you can type cast it
03:47 - right here it means this can store
03:50 - address of a variable like if a address
03:53 - variable is in a another variable I'm
03:56 - taking float B one variable I'm taking
03:59 - care
04:01 - C so this pointer can store IP is equal
04:05 - to address of
04:06 - a only this is possible this can store
04:10 - address of a only if you write IP is
04:12 - equal to address of B this would be
04:15 - wrong and what if we can write FP is
04:17 - equal to address of B and this pointer
04:21 - CP is equal to address of
04:24 - C right but here this pointer can store
04:28 - address of
04:31 - this int variable also float variable
04:34 - also care variable
04:36 - also right so it's like a generic
04:39 - pointer same in Empty Glass we can fill
04:43 - maybe water some other drink or maybe
04:47 - milk anything we can typ cast it so we
04:50 - can typ cast this pointer for that you
04:52 - have to typ cast this pointer directly
04:56 - if you write suppose here I'm writing
05:00 - VP is equal to address of
05:03 - a it means now this word pointer is
05:06 - storing address of
05:08 - this variable a and suppose in a I'm
05:11 - having a is equal to 5 but if you will
05:15 - print like print F percentage D and
05:20 - whatever in a I want to print in a I
05:23 - have five and this WEP this
05:27 - pointer this is pointer
05:30 - this is pointing to a suppose address is
05:33 - th000 so in VP we have address of a that
05:35 - is
05:37 - 1,000 so if you want to access this
05:40 - using this wordid pointer what you will
05:41 - write D reference you will D reference
05:44 - this pointer I hope you know this
05:46 - because we have discussed these Concepts
05:49 - I know uh in our previous videos of
05:51 - pointers right it means estri VP value
05:57 - at this address here we have th so so it
05:59 - should give
06:00 - five but it is wrong you cannot
06:03 - dreference aoid pointer it will give you
06:08 - error first of all you have to typ cast
06:12 - it because see when you deference then
06:18 - it will see suppose I'm D referencing
06:20 - this IP I'm writing here IP IP is equal
06:24 - to address of a suppose this is not VP
06:26 - this is IP this pointer right
06:30 - and EST IP so it will give you five this
06:33 - is correct because this is integer
06:35 - pointer this is not word pointer so now
06:38 - when you dreference it it means compiler
06:42 - now know add the data type of this
06:45 - pointer the associated data type with
06:46 - this pointer is integer means now
06:49 - compiler know in modern compiler
06:53 - obviously it depends on machine to
06:54 - machine but I take like in modern
06:56 - compiler integer take four bytes so now
06:59 - compiler
07:00 - [Music]
07:02 - know 1 2 3 4 suppose in memory within
07:05 - these four bytes this a the value has
07:08 - been stored five converted into binary
07:11 - form like 32 bits and then this five has
07:14 - been stored here and address of first
07:17 - bite is 1,000 then 1,1 1, and2 1,
07:21 - and3 something like this right so
07:27 - now value at this address address is
07:30 - th000 address is th000 so now from here
07:33 - we want to access now Associated data
07:36 - type is integer so when you apply D
07:38 - referencing now the compiler know
07:41 - that he has to access four bytes 1 2 34
07:46 - because data type is
07:48 - integer that is why the data type is
07:51 - needed when you dreference that pointer
07:54 - right so now it will access four
07:57 - bytes and it will give you
08:00 - value same if you access D reference
08:03 - this character pointer character will
08:05 - take one bite so now compiler know by
08:08 - seeing this data type compiler will know
08:10 - that he has to access only one by
08:14 - because dat type is
08:16 - character right same float if float is
08:19 - there means four bytes so it has to
08:21 - access four bytes but here we are using
08:24 - suppose
08:25 - VP now word is what it is not a data
08:28 - type now how compiler will know
08:31 - that it has to access one byte or 4 byte
08:34 - or how many bytes compiler doesn't know
08:38 - so how to access this void pointer how
08:40 - to dreference this void pointer how to
08:42 - get the
08:44 - value right value may be within one by
08:47 - or value may be in four bytes don't know
08:50 - it is void pointer right that is why we
08:53 - we cannot dreference this word pointer I
08:55 - hope you got the reason why you cannot
08:57 - dreference this word pointer right if
08:59 - not then you can ask me in comment box
09:01 - maybe in maybe in another video I can
09:04 - tell you the process in a separate video
09:06 - right so now that is why it will give
09:09 - error so first of all we will have to
09:11 - typ cast this
09:13 - one typ cast means now I'm storing in VP
09:17 - address of a so here we have VP I'm
09:20 - storing address of a and data type of
09:23 - this is what integer so we have to typ
09:27 - cast it into integer pointer so now how
09:31 - to type cast it here rather than using
09:33 - this what you will
09:36 - write int
09:39 - estri VP so first this word pointer
09:44 - would be typ casted or you can say
09:46 - converted into an integer pointer and
09:49 - now we apply this D referencing
09:52 - operator right now it will give you what
09:55 - value
09:57 - five because now now we have converted
10:00 - into int or we you can say typ casted
10:02 - into integer pointer so now compiler
10:04 - know if int then it has to access four
10:07 - bytes so data would be in four bytes so
10:11 - starting by is this so it will access
10:13 - 1,00,000
10:16 - 1,2,3 till 103 4 bytes and obviously
10:20 - this is integer type and this would be
10:22 - stored in four bytes only so definitely
10:23 - you will get five
10:26 - right now if I write if I write
10:29 - something like this VP is equal to
10:31 - address
10:32 - of CP uh sorry address of uh
10:38 - C I'm storing VP this address variable
10:44 - is what character type right so here in
10:47 - C suppose I'm storing character is uh
10:51 - zero yeah 0 is character it's not like
10:54 - that AB BCD is only character whatever
10:55 - you will write in single code that will
10:58 - be in character A Single Character you
10:59 - can write so if you write zero here so
11:01 - zero would be considered as a character
11:04 - right so now address of C now VP is
11:08 - suppose here we have this is C here we
11:12 - have zero obviously in that form like in
11:16 - uh Zer and one form that would be stored
11:19 - right and now VP this is a pointer and
11:23 - this is pointing to here suppose address
11:26 - is 2,000 so it we are storing 2000
11:30 - now now how to
11:33 - print how to print this is character we
11:36 - know this is character so we'll use
11:37 - percentage C estri first type
11:42 - cast type cast into a character pointer
11:46 - so we'll write here care s and now name
11:50 - is
11:52 - VP that's it first of all it will be typ
11:55 - casted into character pointer and then
11:58 - we'll der reference it so D reference
12:00 - means value at this point value is what
12:03 - zero so it will give zero I hope you got
12:06 - this and if you write here VP is equal
12:09 - to address of float variable so before
12:12 - printing type cast into float and that
12:14 - it will print floating value suppose in
12:17 - B I have 1.11 so it will print
12:20 - 1.11
12:22 - right so simple point about word pointer
12:26 - there is nothing much about word pointer
12:27 - it is not having an data type you can
12:30 - convert it into any other pointer or you
12:32 - can typ cast it into any other pointer
12:35 - right so now what's the use maybe you
12:38 - think that rather than typ casting
12:40 - obviously ultimately we have to typ cast
12:42 - it so rather than this directly use an
12:45 - INT pointer and directly deference that
12:48 - pointer what's the use of using this
12:50 - void pointer so here if in the same
12:53 - program same program if I'm using this
12:57 - int also float also so care
12:59 - also so we have to declare three
13:02 - pointers one is for INT one is for float
13:05 - one is for
13:06 - character but if you use this word
13:08 - pointer no need to declare these
13:12 - pointers you can access all these three
13:15 - values using single pointer word pointer
13:18 - only a single pointer how I know I I I
13:23 - hope you know the
13:24 - answer first store the address of a type
13:28 - card it and print then assign in this
13:33 - address of B while printing type cast it
13:37 - then assign address of C while printing
13:39 - type cast it and you can print you can
13:41 - access all the three values three values
13:44 - of different different data
13:46 - types so here we are using only one
13:48 - pointer we are using only one pointer
13:50 - and we are accessing values of three you
13:53 - can say data types integer also float
13:56 - also car also one more thing when we use
14:00 - Melo and
14:01 - kello we'll also discuss these
14:04 - things these are built-in function for
14:06 - dynamic memory allocation so they return
14:10 - what void
14:14 - pointer right when they assign they
14:17 - return memory like they return word
14:19 - pointer to that memory so in that memory
14:21 - we can store any uh value like integer
14:24 - also float also character also right so
14:28 - there also these void pointers would be
14:30 - used right in Malo and
14:33 - kog so that also discuss when we discuss
14:35 - dynamic memory location these are
14:37 - Advanced you know Concepts and see right
14:41 - so that is why we use I guess uh word
14:43 - pointer you you are clear with what is
14:44 - word pointer why we use word pointer
14:47 - like and you can say what's the need of
14:49 - word pointer now let me show you know
14:52 - practically we'll write down some code
14:54 - and we'll see use of word pointer right
14:57 - so now let me create a file here
15:01 - I'm taking name void pointer do c
15:15 - right and I'm taking only one pointer
15:18 - like void estri
15:20 - VP right and I'm taking in a is equal to
15:24 - 5 and one more thing that is float
15:29 - suppose I'm taking float B is equal to
15:32 - 1.56 and
15:34 - care care C at H is equal to uh anything
15:39 - you can take like I'm taking
15:42 - C right and now I'll access all the
15:45 - three variables using one pointer only
15:47 - so I'm first of all I'm writing VP is
15:50 - equal to address of a and now I want to
15:55 - dreference
15:56 - this a is equal to
15:59 - we are printing value of a and see if
16:02 - you der reference like this s will be
16:06 - simple so it will give you error let me
16:09 - run
16:11 - this here we it is giving error like d
16:13 - referencing word pointer and invalid use
16:16 - of word expression so we cannot this
16:19 - deference this word pointer something
16:20 - like this now we have to type cast it so
16:24 - I'm typ casting it into integer pointer
16:27 - first
16:29 - and see now let me run this and it will
16:31 - print a is equal to
16:33 - 5
16:37 - see see it is printing the value a is
16:39 - equal to 5 right now I want to access
16:44 - that variable float so in VP I'm storing
16:47 - address of B now so now this word
16:50 - pointer is
16:52 - pointing
16:53 - what float variable so now B value is
16:57 - equal to percentage
17:00 - F and here I'm D referencing this now so
17:04 - we have to convert it into
17:07 - float we have to type cast it into float
17:10 - see let me run this and it will give you
17:13 - a equal to uh sorry this a is equal 5 b
17:16 - is equal to 1.5
17:18 - 6 right and now same address of
17:25 - CH and let me print
17:29 - C = to percentage
17:33 - C and uh
17:36 - estri we now we have to type cast into
17:42 - care
17:44 - right and now let me print this sorry
17:47 - run this see it is printing a b c uh CH
17:51 - value all the three values so we are
17:52 - accessing all the three data types
17:55 - variables with a single pointer
17:57 - only so that is benefit of using word
18:00 - pointer that is why programmers use this
18:02 - word pointer right