00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:03 - Python programming language we are
00:04 - discussing types of inheritance till now
00:06 - we have discussed singer inheritance
00:08 - multiple inheritance and multi-level
00:10 - inheritance right so the next is
00:12 - hierarchical inheritance this thing
00:14 - we'll see in this video with the help of
00:16 - proper exam right so what is
00:19 - hierarchical inheritance see in single
00:22 - linearities 1 pin class one child class
00:24 - in multi multiple inheritance we have
00:28 - more than one parent class
00:30 - one child class right in multi-level we
00:33 - can also derive the child class can
00:36 - inherit Properties or you can say
00:39 - attributes or methods from a derived
00:42 - class as well that is multi-level
00:44 - heritage hierarchical inherited
00:48 - we have one
00:50 - and from this class you can derive
00:54 - multiple child class
00:56 - child one child two up to n so this is
01:00 - hierarchical inheritance right like our
01:04 - father or our parent
01:06 - and son and daughter like this so from
01:10 - one parent to child like this or two or
01:13 - more than two child means more than one
01:15 - child
01:16 - one parent and more than one child it
01:18 - can be any number of child so this type
01:20 - of thing is known as hierarchical
01:22 - inheritance
01:24 - now let's see with the help of program
01:27 - okay so let's create a new file
01:30 - radical inheritance dot py so we will
01:33 - take one class
01:37 - okay you can write down this thing also
01:39 - right
01:41 - and because here the root class or the
01:44 - base class all the classes are object
01:46 - class right now we can use some built-in
01:49 - functions and properties of object like
01:52 - a super function in it function like
01:54 - this right or if you don't write any in
01:57 - bracket No Object class then
01:58 - automatically in Python three point x in
02:01 - Python 3.x version automatically it
02:03 - would it will inherit object class right
02:06 - okay now we are having only one class
02:08 - human and let's suppose no first let's
02:12 - take
02:13 - a function
02:14 - now let's have one more class and that
02:16 - class I am having male and this male is
02:19 - inheriting from
02:21 - human class
02:23 - right mail is child class human is base
02:25 - class for super class or parent class
02:27 - vacancy and here we have one more method
02:31 - so one more class I'm going to take and
02:34 - that is female so we know male and
02:38 - female both are human right so both are
02:42 - deriving from the same class that is
02:44 - women class all the properties and
02:45 - attributes whatever in human class or
02:48 - human can eat so obviously male can eat
02:50 - female can eat
02:51 - right so let's have female class and we
02:54 - are also deriving this class from Human
02:56 - class only so we have not two child
02:58 - class and one parent class
03:01 - and this also having its own property
03:04 - like sorry on methods and attributes so
03:07 - I'm just taking method here like I get
03:10 - code so only two classes I am going to
03:12 - take okay
03:13 - now let's create an object of first
03:17 - female class
03:20 - and I'm taking like
03:22 - female underscore
03:24 - one the object name and
03:27 - female sorry it's not false like
03:30 - the class name should be Capital like
03:34 - it's convention if you take small F that
03:37 - is also fine but we follow Pascal case
03:39 - convention while uh you know naming a
03:42 - class
03:43 - so the first letter of each word should
03:47 - be capital
03:48 - so let's take here from female class
03:51 - now with help of this object
03:53 - female one
03:56 - with the help of this object what you
03:58 - can access see dot we can access it from
04:02 - Human class work from female class and
04:05 - init function would be called
04:07 - from object class right is there any
04:10 - init function in female no female is
04:13 - inheriting from Human inhuman also who
04:16 - have a new function no so it will search
04:18 - The Base Class of every class it means
04:21 - the root class is object class so that
04:23 - is why it is driving unit from object
04:24 - class now it can exist
04:27 - with this we can access only eat
04:29 - sorry don't
04:32 - eat from Human
04:33 - and work from female you cannot access
04:36 - this sleep from male
04:39 - right because male and female they are
04:43 - not having any connection
04:44 - here in the form of you know right now
04:48 - in the form of inheritance hierarchical
04:49 - inheritance I am saying this because
04:52 - they are having no like relationship
04:55 - we cannot access this method or
04:58 - attribute of mail class using female
05:00 - class object but you cannot access
05:01 - attribute or method of female class
05:03 - using male class object right but both
05:06 - can access
05:07 - properties of human class so if you want
05:10 - to print like eat
05:13 - yeah that is fine
05:15 - now it will print I can eat see
05:19 - right
05:21 - okay
05:23 - Now using male class object also if if
05:26 - you want to create a mail class object
05:28 - as well and like this
05:31 - so with the help of this object mail one
05:33 - you can access see it from Human class
05:37 - same thing sleep from male class
05:39 - no work method you can access from
05:41 - female class and eat from object class
05:43 - right so I want to access sleep the
05:46 - number sleep will print I can sleep
05:48 - whole day
05:50 - or same thing if you want to access like
05:53 - heat that is also fine let me just show
05:55 - you
05:57 - see
05:59 - two times I can eat I can eat one for
06:02 - female one for male like this
06:05 - and if you have suppose I am having now
06:07 - some attribute method I guess you know
06:10 - methods
06:12 - now we have attribute and in human I am
06:15 - having two things
06:16 - every human will have their name and
06:20 - age so like self note attribute name I'm
06:24 - taking same as parameter name name you
06:26 - can take different as well it's up to
06:28 - you a is equal to h two parameter I'm
06:32 - going to take right and suppose let's
06:34 - take one more uh here like what
06:38 - function
06:39 - show details
06:42 - right and this function will simply
06:45 - print
06:46 - from where you can access this name
06:48 - obviously self load name attribute sorry
06:57 - and comma age also we can access self
07:01 - dot we have an attribute age like this
07:04 - two function I'm having in human show
07:06 - detail and eat right
07:08 - so
07:10 - using female
07:12 - see let's comment out these two lines we
07:17 - are just creating female object right
07:20 - now let's run this see what will happen
07:23 - now you will get an error
07:25 - in line number 15
07:28 - in line number 15 when you are creating
07:30 - this object you are calling this
07:31 - Constructor in it human dot in it
07:34 - missing two required positional argument
07:36 - name and age
07:38 - because now which init function will be
07:42 - called let's if you want to check out
07:44 - you can just print here here calling
07:47 - unit from Human class so you will get to
07:49 - know now see
07:53 - get anything because still we have an
07:55 - error while calling this we are calling
07:57 - init from
07:59 - human class so in human class any
08:02 - function is having name and age
08:04 - so you have to pass two parameter while
08:06 - calling while creating this thing right
08:08 - and if suppose I create like maybe Gia
08:12 - and
08:19 - just a is two parameter it will not give
08:21 - any error see calling in it from Human
08:23 - class and I can eat
08:26 - right and with help of this female
08:28 - object you know we can access these
08:30 - attributes name and see name and H2
08:34 - field
08:36 - if you want to print age it will print
08:38 - 20.
08:39 - sorry to print you have to write down
08:43 - print statements
08:45 - [Music]
08:47 - okay now it's it's fine age is 20. like
08:51 - this right
08:53 - so if there are some attributes some
08:55 - methods in one class and more than one
08:57 - in more than one classes I want to
09:00 - access those things so you can use this
09:01 - type of inertness hierarchical
09:03 - inheritance right and
09:06 - see supposing mail as well I am having
09:09 - this its own edit function so
09:13 - mail obviously male is having name and
09:16 - age so these both two things we can
09:19 - access from Human class name and age no
09:21 - need to Define its own right so name
09:23 - comma age and one more thing suppose I'm
09:27 - taking location
09:28 - right
09:30 - so to initialize name and age simply
09:32 - call this in it from Human class super
09:34 - class so one way is just write down the
09:37 - name of the class dot which function you
09:40 - want to call init and you have to pass
09:42 - cell and then the parameter name two
09:45 - parameter name name and age right
09:49 - so if
09:51 - C
09:53 - this name and age this name it's not
09:56 - compulsory should be same as this name
09:58 - if you take like M underscore name that
10:02 - is also fine but here you need to take M
10:04 - underscore me
10:06 - these two parameter name should be same
10:09 - right M underscore H you need to take M
10:12 - underscore H okay
10:16 - and one
10:18 - more attribute it is having suppose this
10:21 - is location and same name I'm taking
10:24 - location
10:25 - right so right now it will not give any
10:28 - error because C
10:31 - it's working fine although maybe you
10:33 - will say I have enough three parameter
10:35 - then it should say you have to pass
10:36 - three parameter but no because female is
10:39 - inheriting from Human class
10:41 - right
10:48 - so you know only to worry
10:51 - if human class you will add one more
10:53 - parameter then it will give error right
10:55 - so if you create an object of male class
10:59 - then
11:01 - let's comment out these thing
11:05 - and with help of male 1 it will give now
11:08 - error because it will create when you
11:12 - are creating this init function will be
11:13 - called and the mro is what first it will
11:15 - check in mail class only if you want to
11:17 - print the mro then also you can print
11:19 - like print
11:20 - and for mail class mail Dot
11:24 - mro
11:26 - let's print this
11:29 - okay first you need to figure out you
11:32 - need to you know correct this thing
11:34 - while creating this because we are
11:36 - calling in it from mail only so three
11:38 - parameter name age and location you need
11:40 - to pass while creating the object so
11:42 - male name I am taking simply may be like
11:45 - Ram
11:47 - let's take our capital and age I am
11:51 - taking maybe 34 and what is next thing
11:54 - location location is like maybe Delhi
11:58 - let's run this
12:00 - see calling in it from Human class see
12:02 - it is calling in it from both the
12:03 - classes women as well as male
12:06 - if you want to check out let's just
12:08 - print this statement here as well let's
12:12 - run this see
12:13 - male human
12:16 - body classes first it will check in mail
12:19 - class then human class and then object
12:22 - class which is root for all the classes
12:25 - so for in it it will check first in mail
12:28 - in mail we have in it yes
12:30 - so it will call init function you have
12:32 - to pass three parameter then it will
12:33 - print first line this calling it for
12:35 - mail class then it will call init from
12:37 - Human class so control will go to
12:39 - hearing in it in this unit function then
12:42 - first line it would print this then name
12:44 - and age it will assign right self here
12:48 - self means referring to
12:51 - the object of mail class
12:53 - in female as well let's
12:56 - have its own unit function
12:59 - and in here obviously it will take name
13:02 - and age every female is also having name
13:04 - and age from Human class we can inherit
13:06 - one more thing one more attribute we can
13:08 - take maybe like can
13:11 - dance
13:13 - so for this for name and age to
13:15 - initialize name and is just call in it
13:17 - from Super class or human class just
13:19 - call to Super function dot what you need
13:22 - to call the name in it no need to pass
13:25 - self here just you need to pass the
13:27 - parameter name name and age
13:31 - foreign
13:45 - now just comment out these line and
13:47 - let's create
13:49 - female object so now you need to pass
13:52 - node GI and 20 only it will give error C
13:57 - while creating this you are missing one
13:59 - required positional argument Can Dance
14:02 - so can dance means it is expecting
14:06 - either true or false so I'm just writing
14:07 - here true
14:09 - it will not give any Arena calling unit
14:12 - from Human class because it is calling
14:15 - in it from both female and
14:19 - so let's print this line as well in
14:20 - female class so it is calling from
14:22 - female class as well as from Human class
14:24 - I can eat and 20 right like this and if
14:28 - you want to show the detail of female so
14:31 - let's define one more function here
14:33 - there
14:34 - f
14:36 - [Music]
14:38 - okay and now it should print name age as
14:43 - well as can dance so no need to print
14:46 - like name and is again you can just call
14:50 - from Human class
14:53 - show details
14:55 - right and there you just need to pass
14:58 - self that's it
15:02 - and for third we can print
15:05 - Excel do
15:08 - no dancing right and using female
15:12 - object I don't want to fold the seat I
15:16 - want to call see show details you can
15:19 - call either for human or you can call
15:22 - show detail for
15:24 - female so let's call this thing let's
15:26 - run this
15:27 - calling in it from female as well as
15:30 - human then it is shown the detail name
15:32 - age no dancing through and age
15:37 - 20 for this line
15:39 - like this you can I like call method
15:41 - from Super class as well right
15:44 - so you can add your own functionality as
15:46 - well as you can call whatever in super
15:48 - class by just calling the superclass
15:50 - function either with the album super
15:52 - function like this or with the help of
15:54 - the name of that super class right
15:57 - so you can try this out you can create
16:00 - more than two classes as well from the
16:02 - same base class from same human class
16:04 - right so I hope you got what is
16:06 - hierarchical inheritance so one
16:08 - assignment for you is now see you have
16:10 - to create one super classes you can take
16:12 - a person class
16:14 - right you can take some attribute there
16:16 - to attribute and two methods
16:19 - and like in a university we are having
16:21 - student as well as faculty both are
16:24 - person or maybe human so from person
16:27 - class you are driving student class and
16:29 - one more is faculty class
16:32 - right and student classes having its own
16:35 - one more attribute and its method and
16:37 - faculty classes also having its own some
16:40 - attributes and methods right
16:43 - so you have to create like these two
16:45 - classes right and you have to access the
16:48 - super class attribute and methods the
16:50 - person class attributed method with the
16:52 - help of student object as well as
16:54 - faculty object so this is your
16:56 - assignment you have to try this out okay
16:58 - you can just write down that simple code
17:00 - in comment section
17:02 - so in the next video we'll see Hybrid
17:04 - inheritance so now I'll see you in the
17:06 - next video we'll never buy take ticket