00:00 - so in the series of learning c
00:01 - programming we are discussing functions
00:03 - in c the previous video we have
00:04 - discussed how to pass a string to a
00:06 - function in c now in this video we'll
00:08 - see how to return a string from a
00:10 - function see this
00:12 - this concept is very important and you
00:14 - can say it's very confusing i'm damn
00:16 - sure 90 percent students are not able to
00:18 - answer this question
00:20 - in their b tech time like how to return
00:22 - a string from a function
00:24 - and
00:24 - if you can answer this question
00:26 - or
00:27 - the the further question is what if you
00:29 - want to return if you have returned a
00:31 - string but i want to modify that string
00:33 - also in main function then how you can
00:36 - do that so under this topic returning a
00:38 - string of from a function there are many
00:40 - important point under this concept but
00:42 - you can say important sub concepts all
00:45 - the things all the important points we
00:46 - will discuss with proper program and
00:48 - i'll show you practical also so this is
00:50 - very important
00:51 - uh you can say uh from the point of view
00:53 - of interview
00:54 - and also in why was they asked these
00:56 - type of tricky questions
00:58 - so this is a little bit tricky and
00:59 - confusing so you have to pay attention
01:01 - on this topic right but before starting
01:03 - just want to tell you one thing if you
01:04 - want to build a great career in software
01:06 - development then you must think about
01:08 - the aspects like what's trending in the
01:09 - industry the questions being asked in
01:11 - the interviews what is the thought
01:12 - process behind the great application
01:14 - like zometo ola google amazon how to
01:16 - improve your culture ranking so here an
01:19 - academy brings you a platform where you
01:20 - can get access to weekly shows which you
01:22 - can watch like and the host of these
01:24 - shows are working in some of the top
01:26 - companies like linkedin google amazon
01:29 - and our seven star coders on codeshare
01:31 - and industry experts with years of
01:33 - experience so they'll be covering the
01:35 - content which would be really helpful
01:36 - for your career like in the live
01:38 - episodes you get an opportunity to ask
01:40 - take a charge about the top 20 questions
01:43 - being asked and the industry leaders
01:45 - directly about the recruitment process
01:47 - in top startups and mncs and what is the
01:49 - eligibility criteria and how to apply
01:51 - for them and you can also get your
01:53 - resume reviewed by the experts stes not
01:56 - only this you can also participate into
01:58 - mock interviews and you can learn
02:00 - courses on programming languages
02:01 - blockchain and crypto cloud computing
02:03 - take aspects of digital marketing and
02:05 - data analytics
02:07 - and there's one more show in which the
02:09 - host will help the users to understand
02:11 - how the applications we use on our
02:14 - android phones are made
02:17 - and in these sessions he'll take the
02:18 - learners through how to get started with
02:21 - the native android development in detail
02:24 - and this show consists of learning java
02:26 - language for android and building blocks
02:27 - of android studio ide to make native
02:30 - android apps so you can find out the
02:32 - detail of the show and the batch in the
02:34 - link that i'll put in the description
02:35 - box of this video and don't forget to
02:37 - use my code jkl10 to get 10 percent
02:39 - extra discount on your paid subscription
02:41 - so now let's see how to return a string
02:43 - from a function see simple i am just
02:45 - taking a simple example so here
02:49 - if i want to define that function
02:52 - right
02:53 - so how you will define that function
02:55 - here i am defining that function like
02:57 - obviously first of all if you are
02:59 - returning a string
03:01 - there must be some return type
03:03 - right the name of the function name of
03:05 - the function i am taking
03:07 - display
03:08 - right and
03:10 - here i am not going to pass anything
03:13 - means the function should return
03:14 - something
03:15 - but don't take any argument that kind of
03:18 - function i am going to write here right
03:20 - so
03:21 - here here suppose i am writing what
03:24 - return and string is what jenny
03:30 - this is obviously string or more
03:32 - specifically if i say it's string
03:33 - literal
03:35 - right so i'm returning this string
03:37 - literal
03:38 - so what should be the return type that
03:40 - is you can say a confusing type of
03:42 - question
03:43 - right what you will write here
03:45 - see
03:46 - here we will write
03:48 - string is what nothing but character
03:50 - array
03:52 - right
03:52 - so can
03:54 - but we cannot simple write care because
03:56 - it is character array and care means it
03:58 - it will return only a single character
04:00 - but it is going to return a string
04:03 - so ultimately what it will return
04:05 - if you know the behind the scene process
04:07 - it will return
04:09 - the
04:10 - pointer to the
04:11 - first character of the string
04:14 - pointer to the base
04:16 - you know base address of this string or
04:18 - character array so just you will write
04:21 - down care as trick
04:24 - simple you are not returning jenny
04:26 - completely we are just returning what
04:30 - pointer to the first character of the
04:32 - string and that's it using that pointer
04:34 - we can access the string
04:37 - yes or no are you getting my point so i
04:39 - hope you know why you will write here
04:41 - cares trick
04:42 - it is a pointer pointer to character
04:46 - right and using this pointer obviously
04:47 - we can access the complete string
04:49 - so this it will return this pointer to
04:52 - wherever you call this function suppose
04:54 - in main we are calling this function
04:56 - right in main i'm calling this function
04:59 - uh right here
05:01 - i'm writing main
05:03 - and here i'll call this function right
05:06 - so i'm calling this like
05:08 - display
05:10 - but it will return
05:12 - something so you have to accept that
05:14 - thing
05:15 - so what you will write here
05:17 - here also it is returning pointer to
05:19 - this
05:21 - so here also you have something the this
05:23 - kind of thing only to accept
05:26 - whatever it is returning so here i am
05:28 - taking suppose here i am declaring one
05:30 - care asterisk str
05:35 - a string something like this you can
05:37 - declare a string something like this
05:38 - also or
05:40 - care str and size you i can say 20 this
05:43 - whole so this is also fine but yeah
05:44 - there is a difference
05:46 - how the memory would be allocated to
05:47 - this string how the memory would be
05:48 - allocated to the string that is
05:50 - different thing means how these strings
05:52 - are to be stored in memory that is
05:54 - different thing right so this is also
05:56 - very important concepts in c
05:58 - how the string literals are stored in
06:00 - memory
06:01 - that is very important and that is very
06:03 - confusing
06:05 - but if you pay attention you will get
06:06 - easily that also will discuss in a
06:08 - separate video
06:09 - right how these string literals are
06:12 - stored in memory
06:14 - so now here something like this and you
06:17 - can simply write here
06:18 - str so this str whatever it will return
06:22 - the steer will store that thing and you
06:25 - can simply print printf
06:28 - and string is percentage s and
06:32 - str
06:34 - that's it
06:35 - now obviously declaration is also there
06:37 - for this function so how to declare
06:39 - return type is
06:41 - castric
06:43 - and the name is
06:44 - display
06:46 - and that's it we are not passing any
06:47 - argument
06:49 - right
06:50 - but there are many
06:52 - many things here this is not
06:54 - it this is not done
06:56 - one by one will discuss all the points
06:58 - so now see whenever control will go to
07:00 - the main function will execute this
07:02 - means
07:03 - here
07:05 - for the main
07:07 - one stack
07:09 - frame would be allocated and here we
07:11 - have str
07:12 - a pointer
07:14 - right here this time it is having some
07:16 - garbage value now here we are calling
07:18 - this function so control will go here
07:20 - so for display function also what
07:25 - memory would be located
07:27 - right
07:29 - now this is what you can just stack and
07:31 - this is what the stack frame for this
07:32 - display so now return jenny here we are
07:35 - having this string
07:37 - gen
07:38 - so this would be stored in memory
07:41 - right
07:42 - so now how this would be stored in
07:43 - memory here
07:45 - this string would not be stored in the
07:48 - stack memory of this function
07:50 - i hope you know that like the memory
07:52 - would be like one is a stack one is
07:55 - memory heap memory and some
07:57 - some you know memory is for you can say
07:59 - static or global variables and sum is
08:01 - for that code or the text whatever you
08:03 - write that is how the memory would be
08:06 - divided
08:07 - right
08:08 - so whatever the thing in the stack the
08:10 - variable declaration or anything in the
08:12 - stack that would be destroyed once
08:15 - control will go out of this function
08:18 - but if
08:19 - you have used the heap memory
08:22 - for storing something
08:24 - then
08:25 - after returning the control from here
08:28 - but still the heap memory will not be
08:30 - cleared
08:31 - right
08:32 - no generally from the heap when memory
08:35 - would be allocated dynamically that we
08:37 - call as dynamic memory allocation
08:39 - another dynamic memory location if you
08:41 - use malloc and calo means the memory
08:43 - would be located from the heap area not
08:45 - the stack area
08:47 - by default if you here take any variable
08:50 - in
08:51 - you know a b or you can say care abc
08:54 - something like this
08:55 - by default those variables are stored in
08:57 - step
08:58 - so once control will go out of this
09:00 - function
09:01 - stack memory would be vanished
09:05 - right
09:06 - so now this is also string literal and
09:09 - this will be stored in a
09:11 - you can say
09:12 - separate its kind of separate memory
09:14 - section which is
09:16 - read only
09:17 - you cannot modify this string
09:21 - right
09:22 - so this would be stored in a separate
09:25 - you can say i know memory allocation j e
09:28 - double and
09:29 - y and
09:31 - null
09:32 - but this memory is read only memory you
09:34 - can only access this but you cannot
09:36 - modify this
09:38 - right
09:39 - so now return jenny so once
09:42 - we will see the return statement control
09:43 - will go back here
09:46 - but still this memory is what it's like
09:48 - you can say a static memory section
09:50 - static means
09:51 - the lifetime of this is throughout the
09:53 - program it's not like that once we go
09:55 - back
09:56 - this will be finished
09:58 - there is no jenny now no
10:00 - still you can access this
10:02 - right so now once we go back here what
10:04 - it would return suppose the first
10:06 - character addresses hundred one zero one
10:08 - one zero two one zero three one zero
10:10 - four one zero five
10:12 - so it will return hundred
10:14 - right the pointer to the address of the
10:16 - first character hundred now in str also
10:19 - we have hundred so now it is pointing to
10:21 - this and now simply you can print this
10:23 - str right
10:25 - second way is if you do something like
10:27 - this see rather than writing this i'm
10:30 - writing
10:31 - taking care str
10:34 - something like this engine
10:37 - and
10:38 - return
10:40 - str
10:42 - this is also same thing
10:43 - i am
10:44 - now initializing string something like
10:46 - this taking a character array name str
10:48 - i'm initializing it and i'm returning
10:49 - this str
10:51 - so now at this time if you initialize a
10:53 - string if you declare a string something
10:55 - like this now
10:56 - how this jenny would be stored
10:59 - the
11:00 - in the stack area of this function
11:04 - in the stack memory of this function not
11:06 - the heap memory or not in a separate
11:08 - memory section
11:09 - right
11:11 - in the stack so here in the stack frame
11:13 - suppose we have jenny
11:17 - something like this
11:20 - and null and the address is suppose i am
11:22 - taking 200 201 202 and something like
11:25 - this right
11:26 - so now str
11:28 - is containing obviously str is what here
11:30 - also we have str and str name of the
11:32 - string this is containing good address
11:35 - 200
11:36 - this i hope you know address of by
11:37 - default this act is a pointer which
11:39 - contains base headers of this character
11:41 - array so 200 is it is containing so we
11:43 - are returning str str means we are
11:45 - returning 200 so now this str will store
11:48 - 200
11:49 - and now we can display this this is also
11:52 - fine
11:53 - right
11:55 - but now it will not work
11:57 - see why it will not work
11:59 - see
12:01 - maybe you are thinking last time
12:03 - it worked but this time it will not work
12:06 - why
12:06 - because
12:07 - this stack memory now this time this
12:10 - jenny has been stored in the stack
12:12 - memory of this function display function
12:15 - so now once control will go
12:17 - after returning here
12:19 - means this memory has been freed
12:21 - has been vanished
12:23 - so now you cannot access the original
12:26 - value of this str that is jenny whatever
12:28 - this str is containing jenny
12:30 - in the main function or in any other
12:33 - function where you are calling this
12:35 - so now what it will print null or any
12:38 - garbage value it can print
12:42 - right because this is what local to this
12:44 - function this time
12:46 - if you declare something like this
12:48 - it is local to this function because the
12:50 - memory has been allocated from the stack
12:52 - area
12:54 - so now what you can do
12:56 - the solution is one thing what you can
12:58 - do you can write down here
13:02 - static static means now
13:06 - static means now this this lifetime of
13:08 - this is what throughout the program
13:12 - right
13:13 - for static and global variable there is
13:15 - a separate section and those static and
13:17 - global variable you can access from
13:19 - throughout the program
13:21 - so now this time it will print gen
13:24 - now the memory would not be allocated
13:25 - from the stack part of this function
13:28 - only no
13:29 - separate memory allocation static means
13:32 - for static and global there is a
13:33 - separate memory allocation
13:35 - now where
13:37 - at that place danny would be stored and
13:38 - you can access jenny from here also
13:42 - right
13:43 - or another thing is if you will not do
13:45 - if you will not write static here what
13:47 - you can do
13:50 - this is one another way of declaring
13:52 - string is would care asterisk
13:55 - str
13:57 - this you can also you can do
13:59 - because obviously in str
14:02 - a star is a pointer it will contain base
14:04 - address of this so that is why i am just
14:06 - declaring str as a pointer
14:08 - and pointer will contain the if you
14:10 - write something like this it still will
14:12 - contain means it means i am initializing
14:15 - this pointer with base address of this
14:17 - character based address of the string
14:18 - literal
14:20 - that's it and i'm returning this str
14:23 - now this time this time also no need to
14:25 - write down static here
14:27 - this time
14:29 - this pointer
14:31 - the value this pointer is pointing to
14:34 - that would be allocated some space from
14:36 - the heap area
14:38 - so this jenny now stored not from the
14:40 - stack area of this function in the heap
14:42 - area and that heap area whatever the
14:46 - heap is in the c period that would not
14:48 - be cleared
14:49 - after returning from this function
14:53 - so that is why when we return from this
14:55 - function still gen is there and you can
14:57 - access that jenny using this pointer str
15:00 - whatever it will return the address of
15:01 - the first pointer
15:03 - here also
15:04 - that is also fine
15:07 - right
15:08 - but here the problem is see the problem
15:11 - is
15:12 - if i want to modify this thing here
15:16 - suppose i have returned this jenny jenny
15:18 - has been printed but i want to after
15:21 - returning after returning here before
15:23 - printing
15:25 - or after printing also you can take
15:27 - so here i am writing
15:29 - here i am writing i am modifying this
15:32 - i am accessing str of 0
15:34 - first
15:35 - first character str of 0
15:39 - z
15:41 - rather than j it should be z
15:45 - right
15:46 - but now
15:47 - see at this time if you write something
15:49 - like this right
15:51 - so it will give it will not give error
15:55 - it will give you can say segmentation
15:56 - fold type of thing it will not give
15:58 - compile time error but at runtime your
15:59 - program will crash either your program
16:01 - will crash or
16:02 - it will not print anything
16:06 - right
16:07 - if before this printf you are writing
16:09 - this and after you are printing it will
16:11 - not print anything
16:12 - its kind run time exception or error you
16:14 - can say this kind of thing you will not
16:16 - get any compile time error why so
16:18 - we cannot modify this because because
16:21 - now this if you declare something like
16:23 - this
16:25 - now this string literally has been
16:26 - stored i have told you enough you can
16:28 - say
16:30 - that section of memory which is uh it is
16:32 - read only
16:34 - but here you are not getting any compile
16:35 - time error
16:36 - only your program is going to crash so
16:38 - that is a big issue i want if someone
16:41 - want to modify the string here it should
16:44 - give compile time error
16:46 - so what you can do what you can do here
16:49 - you can declare it const
16:51 - const means
16:53 - now
16:54 - everybody knows that it is not
16:55 - modifiable
16:57 - so now
16:58 - here also you have to declare it
17:02 - const care
17:04 - style if you only declare its conest
17:06 - here and here not means while returning
17:09 - this return statement will discard this
17:11 - const
17:12 - right it is of no use so you have to
17:14 - declare hair also const now if you will
17:17 - modify if you want to modify this it
17:19 - will you compile time error
17:20 - your program is not going to crash it
17:22 - will come we will compile time error to
17:24 - you that is a good idea
17:26 - now you have handled that issue
17:29 - right and here also you can write cones
17:31 - care asterisk display
17:33 - this function also you can write down
17:34 - here const now
17:37 - what the thing you want you want to
17:38 - return a string and you want to modify
17:41 - that string also
17:42 - at that time what you will do
17:44 - if you declare something like this you
17:46 - cannot modify it because in this
17:48 - declaration and initialization this
17:50 - jenny has been you know allocated from
17:52 - the memory which is read only read only
17:54 - memory so
17:57 - you can write down something like this
17:59 - now this gene would be stored in the
18:01 - stack part of this display and you can
18:02 - modify it also it is modifiable
18:05 - right so rather than writing here what
18:07 - what i can write static
18:10 - right
18:11 - now return str
18:13 - and here you can modify it and you can
18:16 - print it
18:17 - so i hope you got all this thing yeah
18:18 - its little bit confusing but i will run
18:20 - it we will run it and we will see what
18:22 - kind of thing you are getting right so
18:24 - you have to practice of returning a
18:26 - string from a function so
18:28 - string in a cr considered as character
18:30 - array so we cannot return a string
18:33 - actually
18:34 - right what you can return
18:36 - the pointer to the first character of
18:39 - the string
18:41 - you can see the address of the first
18:43 - character of that string that thing you
18:45 - can return that is why i guess you know
18:47 - now you go to the why the return type of
18:49 - this function is characteristic
18:51 - pointer to character type
18:53 - right so now let's run this and see what
18:55 - kind of thing you are getting
18:57 - so now let's create a new file
19:02 - return spring
19:04 - right
19:10 - and here we are using what
19:14 - only one function that is display will
19:16 - not pass anything
19:19 - we'll just see how this function will
19:21 - return a string so in main
19:23 - what we are taking
19:25 - cares trick and str
19:28 - right
19:32 - so now
19:33 - what you can do is equal to
19:36 - take nothing and
19:39 - whatever this display will return this
19:42 - str is going to hold that thing and it
19:45 - just
19:46 - will print the value
19:48 - so string is percentage s and str
19:53 - that's it
19:55 - now
19:56 - what the definition part
20:00 - here i am taking
20:03 - first example is simple
20:05 - this jenny
20:07 - return journey right
20:10 - now let me run this and see what kind of
20:13 - output you are getting
20:15 - so say string is jenny it is returning
20:17 - the string and suppose you want to
20:19 - modify this type of string str
20:22 - 0 at the place of 0
20:24 - i want that it
20:26 - has
20:27 - z
20:30 - and after that i'll print z e double n y
20:33 - so now let's see
20:34 - what is going to happen see it is not
20:36 - returning anything
20:39 - because we cannot modify this string
20:41 - it is a it is only read only
20:44 - the string is only you know we can read
20:46 - only we cannot modify this now see next
20:49 - is what i'm not going to return
20:51 - something like this here i'm going to
20:52 - take
20:53 - care
20:55 - str
20:56 - and
20:59 - gen
21:00 - right
21:02 - and this time i will return str only
21:06 - fine
21:07 - so now if you declare a string something
21:10 - like this now it will take memory in the
21:13 - stack part of this display function
21:16 - right
21:17 - so now that stack memory will be cleared
21:20 - once the control will go out to this
21:21 - function so now it will not you know
21:23 - print anything or it will print any
21:25 - garbage value you can say now see let's
21:28 - check what it is printing
21:30 - see
21:33 - okay now
21:34 - we are printing something like this
21:38 - see the warning is what
21:40 - in the display the function return
21:42 - address of a local variable
21:45 - right local variable
21:47 - local variable means that variable has
21:49 - been by default those variables would be
21:51 - you know will be taking place in the
21:52 - memory which is stack
21:54 - you can say from the stack part of this
21:56 - this display function so that will would
21:59 - be considered considered as
22:01 - local to this
22:02 - so it is not going to print anything
22:04 - right
22:05 - now
22:06 - see
22:09 - one way is you can make it steady
22:14 - right and we will not modify this first
22:16 - we will just
22:18 - display the string
22:20 - now this time it is printing string is
22:22 - gen because now static means
22:25 - in a separate memory location it has
22:27 - been
22:28 - the gen is being stored
22:30 - that is what
22:32 - you can say that memory allocation you
22:33 - can access through throughout the
22:34 - program
22:35 - it's like global
22:37 - and if you want to modify this
22:41 - now what will happen see now what it
22:43 - will print see z e double and y
22:46 - you can also modify this
22:49 - right
22:50 - if you
22:51 - declare it something like this
22:53 - using this method
22:55 - but
22:56 - now
22:58 - if i declare it something like this here
23:02 - this is another way
23:04 - for declaring a string care strict str
23:07 - jenny and i will not modify it first
23:10 - we'll just display this one
23:12 - we are not using any static keyword here
23:14 - but still it will print jenny
23:18 - see string is because now the memory has
23:20 - been allocated
23:22 - from the
23:23 - what
23:24 - heap area of this function not the stack
23:27 - area and that heap area you can access
23:30 - where you are calling it means that
23:32 - whatever the in the heap area that would
23:33 - not be cleared once control will go out
23:36 - of this thing but you cannot modify it
23:39 - you can say that memory section is what
23:41 - it's kind of for read-only
23:44 - yeah you can access it
23:46 - where you are calling it right that is
23:48 - global you can say considered as you can
23:50 - you can say that you can access it
23:52 - throughout the program but
23:53 - that would be it's kind of separate
23:55 - memory allocation for string literal and
23:57 - that is only read only you cannot modify
23:59 - that thing you can access
24:01 - the string but you cannot modify so if
24:03 - you will modify it
24:06 - see
24:07 - what you will get
24:10 - see it is not printing anything
24:13 - right
24:14 - and if you modify it
24:17 - after printing the string
24:21 - right
24:24 - i am modifying it str
24:26 - 0
24:28 - equal to
24:30 - z
24:32 - and again i am printing this
24:38 - after modifying also i want to print now
24:41 - see what kind of thing you are getting
24:44 - you will only get string is jenny only
24:47 - one printf would be executed
24:49 - not this this one
24:52 - right or sometimes in some compiler you
24:54 - will get segmentation fold type of thing
24:56 - and the program would hold means it
24:58 - would break you will get some undefined
25:01 - behavior
25:02 - so
25:03 - you know to remove this kind of thing
25:06 - you know we want that
25:08 - it should at compile time only it should
25:09 - give error that you cannot modify the
25:11 - string
25:12 - right so what you can do here what
25:14 - generally we will write here
25:16 - const keyword right and here also
25:21 - const
25:24 - right
25:26 - now see now
25:29 - we are not modifying it
25:31 - we are just printing
25:36 - see what it will give
25:37 - string is jenny it is printing string is
25:40 - jenny right
25:41 - and also it is giving warning likes
25:43 - return discard const qualifier from the
25:45 - pointer target type because
25:47 - here return type is only characteristic
25:49 - it's not const so here you have to write
25:53 - down
25:54 - const to get the error
25:59 - now see
26:04 - okay sorry in declaration also obviously
26:06 - in definition you have write down this
26:08 - const so here also
26:14 - in declaration also it should be const
26:16 - right
26:17 - now let me run this and see you are
26:18 - getting string is jenny and now if you
26:20 - want to modify this
26:23 - and again i want to print
26:25 - at this time it will give error
26:28 - see
26:30 - assignment of read-only location
26:33 - asterisk str
26:35 - here it is giving error in this line
26:37 - this line
26:38 - right because it is only read only
26:41 - location str where the journey would be
26:43 - stored at read only location only see
26:45 - read only location assignment of read
26:47 - only location here
26:50 - so better to write down this cost
26:52 - keyword here and if you don't write down
26:54 - here the cost give a return type
26:57 - here const care star then also it will
27:00 - discard the const
27:02 - right so better to write down here what
27:04 - const return type of this type of
27:07 - function would be const care asterisk
27:09 - right
27:10 - now see
27:11 - and see if you just
27:13 - write down return type of this is const
27:15 - but here you are not writing
27:18 - in the main because str is accepting
27:21 - whatever this display would be return so
27:23 - here if you will not write const at this
27:25 - place
27:26 - then what
27:28 - it will discard response it is printing
27:30 - string is jenny and
27:32 - warning is what assignment discards cost
27:34 - qualifier from the pointer target type
27:37 - it will discard this const so
27:41 - here also you have to write down the
27:43 - sconced keyword
27:46 - right
27:46 - now it will return what cons type of
27:49 - pointer
27:50 - so
27:51 - it will accept also that return type
27:54 - should also match const care s3 at this
27:57 - time you will get error
27:59 - this program will not run
28:01 - right see
28:05 - see assignment of read only location str
28:08 - this is now read only location and we
28:10 - are
28:10 - we want to modify this location so it
28:12 - will give compile timer so we have
28:13 - handled this issue i guess right
28:18 - so i guess you got
28:20 - how to return a string how to return a
28:22 - modifiable string means you are more to
28:24 - return a string and you want to modify
28:26 - that also
28:28 - and if you want to just return a string
28:29 - and you don't want to modify
28:31 - that string
28:32 - and if you want to if you modify that
28:34 - string in main function then it should
28:36 - you compile time error that also we have
28:38 - discussed right so you have to try out
28:40 - different different things you know
28:43 - how to return a string
28:45 - right and if you you know
28:46 - if you get any error you can ask me in
28:48 - comment box so i guess that's it the
28:50 - basics of this how to return a string
28:51 - that is what basic
28:53 - right
28:54 - so in the next we will see how to pass a
28:56 - pointer to a function
28:58 - pointer as an argument to a function
29:00 - here i am
29:01 - going to pass a pointer while calling
29:04 - right so now in the next video till then
29:06 - bye take care