00:00 - so in the series of learning c
00:01 - programming we are discussing functions
00:03 - in c we have discussed how to pass a
00:05 - string as an argument to a function how
00:07 - to return a string from a function in c
00:10 - in this video we will discuss how to
00:11 - return a pointer from a function say
00:14 - returning a string is also it's like
00:16 - returning a pointer character pointer
00:18 - because there also we were returning the
00:20 - address of the first character of the
00:21 - string that is nothing
00:23 - but obviously it's a pointer right but
00:25 - here you can also return an integer
00:27 - pointer float pointer from a function
00:29 - that we will discuss here you will take
00:30 - example of array and that thing will
00:32 - discuss here one by one with proper
00:34 - program and i will show you the program
00:36 - practically also we will run that
00:37 - program also
00:38 - right and also some important point
00:40 - about this concept also no we are going
00:42 - to discuss in this video and we can also
00:44 - pass a pointer as an argument to a
00:46 - function but that is nothing but call by
00:48 - reference method that we have already
00:50 - discussed call by value call by
00:51 - reference so here we will discuss how to
00:53 - return a pointer from a function but
00:54 - before that this will tell you one thing
00:56 - if you want to build a great career in
00:58 - software development then you must think
00:59 - about the aspects like what's trending
01:01 - in the industry what is the thought
01:03 - process behind the great application
01:04 - like like amazon flipkart zomato ola how
01:08 - to improve your code share ranking so
01:09 - here and again brings you a platform
01:11 - where you can get access to weekly shows
01:13 - which you can watch live and the host of
01:15 - these shows are working in some of the
01:17 - top companies like amazon google
01:19 - linkedin
01:20 - and our seven star coders on code chef
01:22 - and industry experts with years of
01:24 - experience so here they'll be covering
01:26 - the content which will be really helpful
01:28 - for your career like in the live
01:30 - episodes you can ask you can get
01:32 - opportunity to ask take a chat about the
01:34 - top 20 questions being asked and the
01:36 - industry leaders about the recruitment
01:38 - process you know in top startups and
01:40 - mncs and what is the eligibility
01:42 - criteria and how to apply for them even
01:44 - you can also get your resume reviewed by
01:46 - the exports sdgs
01:48 - not only this you can also participate
01:49 - into mock interviews and you can learn
01:52 - courses on programming languages cloud
01:53 - computing blockchain and crypto tech
01:55 - aspects of digital marketing and data
01:57 - analytics
01:58 - and have you ever thought about how
02:00 - these frontline apps like zometo paytm
02:03 - ola practo amazon flipkart
02:05 - were made and what was the thought
02:07 - process so here is a show to answer all
02:10 - these questions in this show anush is
02:13 - going to discuss the architectural
02:14 - breakdown of all the popular apps and
02:16 - learners will get to know how these apps
02:19 - were made and how these apps work so you
02:22 - can find out the detail of the show and
02:24 - the batch in the link that i'll put in
02:25 - the description box of this video and
02:27 - don't forget to use my code jkl10 to get
02:30 - 10 extra discount on your subscription
02:32 - so now let's discuss how to return a
02:34 - pointer from a function here i am going
02:36 - to take a simple example so
02:39 - if i am taking a function name suppose
02:41 - return pointer function name is
02:45 - return pointer only you can take any
02:47 - function name right
02:49 - and i'm going to take an array which we
02:51 - will pass here
02:53 - right and then in this function
02:57 - i'll increment
02:59 - the you know the address of that pointer
03:01 - that you are passing that address by two
03:03 - or four any number and then we are going
03:05 - to return that address
03:07 - right
03:08 - whatever i am saying that i will show
03:09 - you here what what i am saying what does
03:11 - that mean so this is function name and
03:14 - here we i want to pass an array integer
03:17 - type so just
03:18 - you have to write down in this this
03:20 - indication part that's it right no need
03:22 - to write down the name of the array now
03:24 - the main question is what would be the
03:25 - return type here we are returning a
03:28 - pointer
03:30 - so what would be the return type here
03:33 - i am taking integer type of array right
03:36 - so
03:36 - here pointer means
03:38 - int
03:39 - string
03:40 - if you simply write in it means it will
03:42 - return integer value but we are we don't
03:45 - you don't want the function will return
03:46 - integer value we want that this would
03:47 - return a pointer so in s3 integer
03:51 - pointer so it means this function is
03:52 - going to accept
03:54 - array as an argument and
03:56 - is going to return integer pointer or
03:58 - you can say pointer to integer
04:01 - that's it
04:02 - right now this is what the declaration
04:04 - in main
04:06 - what i'll call this function
04:09 - right so it is returning a pointer it
04:12 - means we have to accept that value
04:14 - whatever this function is returning and
04:16 - it is returning a pointer type of value
04:18 - it is a pointer so to return that thing
04:20 - also will take integer asterisk suppose
04:23 - i am taking p
04:26 - right and one more thing i am taking int
04:29 - array
04:30 - and i am initializing this one two three
04:32 - four five
04:35 - and i am calling this function
04:38 - return pointer
04:39 - how to pass error as an argument just
04:41 - pass the name of that that's it only one
04:44 - argument i want to pass right whatever
04:46 - it is going to return i'm going to store
04:47 - that in p
04:48 - p is what it is a type of pointer
04:51 - and it is also going to return integer
04:52 - pointer so obviously we have to accept
04:55 - that thing in the same time it is a
04:56 - pointer so
04:58 - after returning just printf percentage d
05:01 - and strict p whatever the value at this
05:04 - address that we are going to bring
05:05 - that's it now what would be the
05:07 - definition part of this function strict
05:11 - name of the function is return pointer
05:13 - and here
05:14 - i am taking an array to accept
05:17 - this thing
05:18 - right so this array is what it's called
05:21 - call by reference note call by value we
05:22 - have already discussed how to pass array
05:24 - as an argument so here we are passing
05:26 - the address of the first element so this
05:27 - is what it's not adding here we are not
05:30 - going to copy the complete one two three
05:32 - four five the values no
05:34 - here it will act compiler will interpret
05:36 - this line as something like this int
05:39 - asterisk a
05:41 - means here a is a pointer which will
05:43 - store the address of the first element
05:45 - whatever we are passing here
05:47 - right
05:48 - this thing we have already discussed in
05:50 - one of my previous videos you can watch
05:52 - that video first now here i am going to
05:55 - update this a is equal to a plus 2
05:58 - and just return a
06:02 - that's it
06:04 - right
06:05 - now see
06:06 - whenever you will execute this what will
06:08 - happen first of all control will go here
06:09 - in the main function right
06:11 - if you will not write here anything it
06:13 - will consider
06:14 - that the compiler consider it as a
06:17 - no in so you have to write down a return
06:19 - statement so if you write down here void
06:22 - then means it it is not returning
06:24 - anything so first to the main
06:27 - now here we are taking what so what will
06:30 - happen
06:32 - generally the memory which would be
06:34 - allocated to this application this
06:36 - program will be divided into you can say
06:38 - four parts
06:39 - some memory to store the instruction
06:41 - whatever we are going to return here
06:43 - some memory for static and global
06:46 - variable
06:47 - one part of memory is stack memory and
06:49 - one is heap memory
06:50 - so whatever you are declaring the local
06:52 - variables and these that would be stored
06:55 - in the stack
06:56 - memory of this function
06:58 - stack memory of this program so the main
07:01 - function for memory has been allocated
07:02 - to this main function right so now once
07:05 - from that
07:06 - stack one stack frame
07:09 - would be for this main
07:12 - suppose this is for main so here we have
07:14 - a pointer p
07:17 - here we have what an array a
07:20 - so here i am just
07:23 - you know
07:25 - writing this one two three four five
07:28 - so here
07:29 - the address of this is what hundred then
07:31 - one zero four one zero eight one one two
07:33 - one one six i'm supposing integer is
07:35 - taking four bytes so in a we are having
07:37 - hundred so a is pointing to here a is
07:39 - acting as an internal pointer constant
07:41 - internal pointer to this
07:43 - array right
07:44 - so base address of this error is 100
07:46 - that is that it will be a so return
07:48 - pointer here we are calling this
07:50 - function now control will go here now
07:52 - for this function also
07:55 - one stack frame would be a
07:57 - right
07:59 - here we have in a so this is nothing but
08:02 - a pointer
08:03 - right
08:04 - and here what what you are passing
08:07 - a we are passing here it means we are
08:09 - passing 100 so in this a also we are
08:11 - having 100 so this is also pointing to
08:14 - here now
08:15 - right
08:17 - a is equal to a plus 2 means we are
08:19 - incrementing the pointer
08:21 - it it doesn't mean that 100 100 plus to
08:23 - 102
08:25 - its pointer arithmetic means we are
08:27 - going to
08:29 - move the pointer to position forward
08:32 - right
08:33 - actually it means what a means 100 plus
08:36 - 2 into size of
08:39 - the data type data type is integer
08:42 - into size of ray type is 4 so 100
08:45 - and 8 means here now a is containing 108
08:50 - now a is pointing to here
08:53 - now this a is pointing to here
08:55 - this a whatever the a in this function
08:57 - this pointer right
08:59 - two position forward we are moving one
09:01 - two now return a
09:02 - [Music]
09:04 - a means one zero eight we are going to
09:05 - return one zero eight and that would be
09:07 - stored in this p
09:08 - one zero it is what obviously address so
09:10 - we need some pointer to store piece
09:12 - pointer no problem in p also now we have
09:15 - one zero
09:16 - eight
09:18 - so now this p is also pointing to here
09:20 - now strict p value at one zero eight is
09:23 - three so it is going to print what
09:26 - three
09:28 - all right
09:29 - i hope you got the working see returning
09:32 - a pointer means
09:33 - not nothing but returning address maybe
09:36 - you will say here we are returning
09:37 - address obviously we are returning
09:39 - address here in a we are having address
09:41 - 108
09:42 - you will say that we are returning
09:43 - address we are not returning pointer but
09:45 - returning address means
09:47 - returning a pointer
09:49 - same thing
09:51 - right say return type is obviously we
09:53 - need to write down a pointer so that is
09:54 - why we say we are returning pointer
09:57 - because return type of this function is
09:58 - pointer right but here see if i modify
10:02 - this thing something like this here here
10:05 - before calling this function
10:07 - here i want to write one line a is equal
10:10 - to
10:11 - a plus 2
10:13 - right and after this i am just printing
10:16 - printf percentage d
10:19 - asterisk a
10:21 - because a is also
10:23 - containing base address
10:25 - means we are incrementing this a 2 and
10:27 - whatever the value after incrementing
10:29 - that i am going to print
10:31 - so
10:33 - what will happen
10:36 - please think about it
10:38 - what will happen if i increase a here
10:40 - i'm incrementing a here and i'm printing
10:42 - this a
10:44 - string after incrementing in this main
10:48 - it is not allowed it will give error
10:51 - why so
10:52 - because you have to you know
10:55 - this you have to put this point in your
10:57 - mind very carefully that this a the name
11:00 - of the array is constant pointer
11:03 - constant pointer to this
11:06 - first element of the array we cannot
11:09 - do increment or decrement with this a
11:11 - like a plus plus or a minus minus or a
11:13 - plus 2 something like this we cannot
11:15 - change the value of this a
11:19 - right so here it will give error
11:23 - but here it is not giving error why so
11:26 - because here it is not an array
11:30 - we are just writing this that it is an
11:32 - array maybe you are thinking here also
11:34 - we have something like this this a is
11:36 - what
11:39 - a means array having five elements one
11:41 - two three four five but no actually
11:43 - compiler will interpret it as a pointer
11:46 - just a pointer
11:48 - right int
11:50 - asterisk a just a pointer
11:53 - you can type you can take any other
11:55 - variable name b c p anything
11:58 - so
11:59 - it's just a normal pointer and obviously
12:01 - we can do pointer arithmetic operation p
12:04 - plus plus pointer plus plus pointer
12:06 - minus minus pointer plus two or anything
12:08 - so here that is why it is not giving any
12:10 - error but here it will give error here
12:12 - it is name of the array
12:14 - it is constant i hope you are getting my
12:16 - point this is very very very important
12:18 - point
12:20 - right
12:21 - so now let's see
12:22 - let's run this and see what output you
12:24 - will get so this is how you can return a
12:25 - pointer you can take float arrow also
12:28 - here you can take float float that's it
12:31 - float area you can take you just have to
12:33 - change the data type
12:34 - character
12:35 - we have already discussed character
12:37 - array means string how to return a
12:38 - string that also we have already
12:39 - discussed so now let's run this and see
12:41 - what kind of output you are getting so
12:43 - let's create a file
12:47 - named return pointer
12:50 - right
12:56 - now here i'm taking a function end
12:58 - as trick and function name is
13:02 - just
13:04 - a return pointer
13:06 - you can take any function name right
13:11 - so here i am passing
13:14 - i want to pass array
13:16 - that's it
13:18 - now in main
13:21 - what will take an actual array
13:23 - and i'm initializing this
13:27 - array here only
13:30 - right
13:31 - and one more thing we'll take
13:34 - one more pointer
13:36 - to receive whatever the function
13:38 - will
13:42 - return
13:43 - here i am passing what
13:45 - simple an array so whatever it is going
13:46 - to return that we will store where in
13:49 - p
13:51 - right
13:52 - and we will simply print
13:55 - that value
13:58 - how to print a string p
14:00 - using indirection operator
14:02 - right
14:03 - if you want you can also pass the length
14:05 - of the array
14:06 - right means the size of the five
14:08 - elements and you can check
14:10 - in that
14:12 - function also if you you know increase
14:15 - the length by if the length of the array
14:18 - is 5 and you you know in the return
14:20 - function in the definition you are
14:22 - writing a plus 7 so obviously it will be
14:24 - out of bound so that also you can check
14:26 - some kind of condition
14:27 - right that you can modify this program
14:29 - according to yourself you have to try
14:30 - different different variations of this
14:32 - program right
14:38 - here what we are passing
14:40 - so array so just accept that thing here
14:45 - right or in test trick a you can also
14:48 - write or different name you can also
14:49 - take right so here
14:52 - what i am writing return
14:54 - a
14:55 - plus
14:56 - 2.
14:58 - that is also fine
15:00 - or you can write here
15:04 - a is equal to a plus 2
15:08 - and you can return simply
15:10 - a
15:12 - right
15:13 - now i hope it will work and let's run
15:15 - this and see what output will get so
15:17 - what output you should get i think it
15:18 - will print three
15:21 - after doing ac
15:23 - a plus two three
15:24 - at first time
15:26 - pointer was at one then we are
15:28 - incrementing by two so it will print
15:29 - three
15:30 - this is how you can win but here if you
15:32 - do
15:34 - a is equal to a plus two
15:38 - it will give error see let me run this
15:41 - and show you what what error you will
15:42 - get see error is what assignment to
15:45 - expression with array type
15:48 - a is equal to a plus 2
15:49 - this is not allowed
15:51 - is what obviously array type so you
15:53 - cannot do a plus two
15:55 - right
15:56 - so but here a plus two is allowed so i
15:58 - hope you got
16:00 - the reason why
16:02 - right so that's it for this video you
16:03 - can try out different different programs
16:05 - how to return a pointer float pointer
16:06 - and disappointer or sometimes they can
16:08 - also ask like they'll give you this kind
16:10 - of thing like in stricken function name
16:12 - and anything and they'll
16:14 - ask you the meaning of this thing so if
16:17 - you have if they have written in test
16:19 - trick something like this it means the
16:20 - function will return a pointer
16:23 - of which data type whatever they have
16:25 - written in float or care that's it
16:28 - so i think i have occurred almost
16:29 - everything about function we are left
16:31 - with the recursion so that we are going
16:33 - to you know discuss in the next videos
16:34 - and i'll see you next video till then
16:36 - bye take care