00:00 - so in the series of learning c plus plus
00:02 - programming language we are discussing
00:03 - data types in c plus plus in the
00:05 - previous video we have discussed
00:06 - into data type so now the next data type
00:08 - is float these are
00:11 - uh built in data type or you can say
00:12 - primitive data type so you can say
00:14 - fundamental data type so in this video
00:15 - we'll talk about flow data type float
00:17 - double long double long is water data
00:20 - data type or you can say data modifier
00:22 - that we can use with the double we
00:24 - cannot use with any we cannot use any
00:26 - data modifier with float as we have
00:28 - discussed data modifiers are four signed
00:30 - and signed
00:31 - a short and long
00:33 - no data modifier can be used with float
00:36 - only we can use with double that is we
00:39 - can use long with double long double so
00:42 - these three we will discuss in this
00:43 - video float double and long double the
00:45 - range you can say the size how you can
00:49 - use this in your program everything we
00:51 - are going to discuss the precision the
00:53 - deserts significant digits right
00:56 - some interesting facts also i'll show
00:58 - you or you can say i'll tell you in this
00:59 - video about these things with the help
01:02 - of a program we will discuss these
01:04 - things right
01:05 - but before that just want to ask you one
01:07 - thing you all have summer breaks then
01:09 - how we are going to utilize your summer
01:10 - breaks and if you don't have then
01:12 - definitely you have weekend after a long
01:14 - working
01:15 - week right
01:16 - yeah taking a break is important but
01:19 - holding on to every opportunity that
01:22 - helps you become better is more
01:23 - important so that is why i have
01:25 - something interesting for you guys to do
01:28 - during this free time during this break
01:30 - and upskill yourself
01:32 - geeks four weeks is organizing a summer
01:35 - break challenge for the coming weeks
01:38 - they are hosting data structure and
01:40 - algorithm contest the dsa contest for a
01:43 - few weeks and these contests would be on
01:45 - every saturday 7 to 9 00 pm till 31st of
01:49 - july there will be nine contests of data
01:51 - structure and algorithm so participating
01:53 - in these contests will give you a boost
01:55 - in your confidence and definitely it
01:57 - will enhance your skill set of dsa which
02:00 - is one of the critical skill
02:02 - to get into the world of geeks apart
02:05 - from this the winners will also get some
02:07 - prizes
02:08 - the first
02:09 - prize the first position will get smart
02:12 - watch pens stickers and mentorship
02:15 - sessions on social media second position
02:18 - will get lenovo tablet pens and stickers
02:22 - and third
02:23 - we'll get
02:24 - earbuds pens and stickers so get ready
02:26 - to ace your game at dsa every saturday
02:29 - with geeks4gigs and see this event is
02:31 - invite only
02:32 - so if you want to participate in this
02:34 - contest you should contact to your
02:36 - campus mantri and if you don't have any
02:39 - campus monthly in your college or if you
02:41 - are working then you can use my code
02:43 - to enter so all the relevant details and
02:45 - the link
02:46 - the participation link i'll put in the
02:49 - description box of this video you can go
02:50 - and check out now let's see what is a
02:53 - float data type
02:54 - ok the size is 4 bytes
02:57 - float means
02:58 - it is used to represent
03:00 - the decimal numbers single precision
03:03 - decimal numbers floating point numbers
03:05 - like
03:06 - 3.14
03:09 - we have float ah this is decimal so this
03:12 - is float and see the floating point
03:14 - number would always
03:16 - be ended with the f
03:18 - right
03:19 - otherwise if you write this thing
03:21 - how we will write this data type float
03:24 - then variable name suppose i am taking f
03:28 - or not f suppose i am taking x is equal
03:30 - to one point
03:33 - if you write down something like this
03:34 - then by default
03:36 - your this would be understood like it is
03:39 - double
03:40 - double number flow double and long
03:42 - double we have right
03:44 - so automatically compiler will convert
03:46 - it into float the automatic type
03:48 - conversion that we'll see later in the
03:50 - video but there is a concept of
03:51 - automatic time type conversion that
03:53 - would be converted into float and that
03:55 - after that it would be stored in this
03:56 - one
03:57 - so better
03:59 - write f at the end just to clarify that
04:02 - it is float
04:04 - right one thing this you need to take
04:06 - care
04:07 - we generally don't you know write this f
04:10 - we don't care but we should write this f
04:13 - to represent that it is a floating point
04:15 - number
04:15 - so
04:16 - how many bytes it would consider sorry
04:18 - how many digits would be considered as
04:20 - significant digits in flow
04:22 - up to seven digits
04:25 - like if i want to print this thing one
04:27 - two three point five six seven eight
04:31 - nine f
04:32 - and if you print something like this c
04:35 - out
04:36 - and f
04:37 - right sorry x
04:40 - definitely you use std colon colon or
04:42 - using name space std uh
04:46 - so it will print by default how many
04:48 - digits
04:50 - seven digits significant digits right
04:53 - so
04:54 - one two three one two three four five
04:57 - six seven
04:58 - these many digits so means it will print
05:01 - only this number one two three point
05:03 - five six seven eight
05:05 - seven digits are there right
05:08 - or
05:09 - more precisely if i say then if you
05:11 - print something like this then c out
05:13 - this c out will print only
05:16 - six digits in gw compiler automatically
05:19 - the precision of the c out is only six
05:22 - digits so it will print only six digits
05:25 - like one two three point five six seven
05:28 - right only this one
05:31 - you can set this precision like if you
05:32 - want to print more ah
05:35 - digits like a number is very
05:38 - like 0 1 5
05:41 - 0 7 8 9 this one and i want to print
05:45 - number something like this
05:46 - right
05:48 - so
05:49 - c out will print only six digits but you
05:52 - can set the precision of the c out and
05:54 - if you set like c out
05:57 - set precision p r e c i s i s i o n and
06:01 - i right here 10
06:03 - then it will print up to how many digits
06:06 - 10
06:07 - right so
06:09 - what it will print one two three point
06:11 - five six seven eight nine zero
06:13 - up to one it will print or it will round
06:16 - off this one would be two something like
06:18 - this
06:19 - because after that its five
06:21 - right
06:22 - but this float is having seven digits of
06:25 - precision only right so till seven
06:28 - digits if you are taking this float
06:30 - still seven digits it will print
06:33 - correct value like
06:34 - up to this one
06:38 - up to this up to 8
06:40 - it will print correct value after that
06:42 - it may print some garbage value right
06:45 - because
06:46 - the precision of this float is what
06:49 - only up to seven digits
06:52 - so now i if you want to print a large
06:54 - number correctly suppose up to ten
06:57 - precision or up to thirteen percent up
06:59 - to fifteen precision
07:00 - correctly i want to print may be some
07:03 - scientific calculation we need large
07:05 - number
07:06 - so then we do not take float we take
07:08 - double
07:13 - it will take 8 bytes
07:14 - and
07:16 - it print up to 15 digits
07:20 - precision digits are up to 15
07:23 - it is that is why it is known as float
07:24 - is known as single precision floating
07:26 - point number it is used to open single
07:29 - precision floating point number and it
07:31 - is for double
07:33 - so now
07:34 - if i take like double x rather than
07:38 - float if i take here
07:40 - double x
07:42 - okay if you write float here then better
07:44 - to write f at the last right i forgot
07:46 - this thing
07:47 - in double
07:48 - we don't write anything
07:50 - now for double
07:52 - if you don't write this set precision
07:54 - value and you write only these two lines
07:56 - c out x then what it will print
07:59 - so you need to take care of this thing
08:00 - the c out the default precision for c
08:03 - out is only six digit in gw compiler
08:06 - that we are using generally right so it
08:09 - will print only six digit one two three
08:11 - five six seven that's it
08:14 - but i want to print up to ten precision
08:17 - so just write down set the precision by
08:19 - default like manually you can set ten
08:22 - now it will print up to ten
08:24 - like nine 0 2 correctly
08:27 - correctly why correctly because now it
08:29 - is double
08:30 - right and
08:32 - the double can print up to 15 digits
08:35 - precision up to 15 digits right so if we
08:38 - write here 15 then
08:41 - what it will print 9
08:43 - okay this complete
08:45 - number is having digit only 15 digits so
08:48 - it will print the complete number if it
08:50 - is having like
08:52 - 0 1 2
08:54 - 16 17 18 digits
08:56 - right so it will print up to 15 digits
08:59 - only up to 9
09:01 - right and if you set precision like
09:03 - something like this
09:05 - 17 or 18
09:09 - then
09:11 - it will print the up to 18 digits
09:14 - right but up to 15 it will print the
09:18 - correct value and after that three three
09:21 - digits would be any garbage value
09:22 - because
09:23 - because the precision for double edge
09:26 - only 15 digits
09:28 - right
09:29 - so if more digits you want to print
09:31 - precisely then you can take long double
09:37 - long double is taking 12 bytes
09:40 - and
09:41 - the present digits for this is
09:44 - 18 digits
09:45 - so it will print 18 digits
09:48 - up to 18 digits precisely the number
09:50 - right after that if you take the
09:52 - precision like the number is having 1 2
09:55 - 3 4
09:56 - this one
09:58 - total i guess 21 digits are there so if
10:01 - you want to print
10:02 - if you want to print 21 bits so up to 18
10:05 - digits it will print correct value after
10:07 - that it will pin some garbage value
10:10 - right
10:11 - so i hope and see if you are taking this
10:14 - number long double long double x
10:17 - at the last better to write l either
10:19 - small l or capital l
10:21 - just to indicate that this number is
10:23 - double in case of float just write f
10:27 - just to indicate that it is float number
10:28 - capital f 4 small f but if you are
10:30 - taking double then it's okay because by
10:32 - default the number would be considered
10:34 - as double by the compiler
10:37 - right i hope you go to these points
10:39 - some more points if i specify then
10:42 - how you can find out like the the
10:44 - precision for the c out is 6 that i will
10:47 - show you practically right not here
10:51 - and these numbers these you know data
10:54 - types are used to
10:55 - store decimal numbers and exponential
10:57 - number also
10:59 - in e form i guess you have some idea
11:01 - like let us take an example of
11:03 - exponential number if i have 1.2
11:07 - 0
11:08 - e
11:10 - plus 4 this is exponential number this
11:13 - would be written as 1.20 into 10 raised
11:16 - to power 4
11:17 - if you have minus 4 then 10 raised to
11:19 - power minus 4
11:21 - right so if a large number is there that
11:23 - scientifically would be represented in
11:25 - exponential form
11:27 - see internally this floating numbers are
11:30 - stored in the system
11:32 - completely different from the int number
11:34 - how in number are stored right but you
11:37 - don't have to go into deep like how to
11:39 - represent
11:41 - this float floating point number because
11:42 - they have some scaling factor and all
11:44 - see if you take this number like
11:47 - 3.1456
11:49 - so
11:50 - this number or 34.567
11:53 - this number
11:55 - so the scaling factor for this says c
11:58 - it would be
12:01 - 0.3456
12:04 - and scaling factor would be 100
12:08 - right
12:09 - same you if you take this number
12:10 - something like this
12:12 - seven eight nine
12:14 - then this number would be zero point
12:15 - three four five six
12:18 - a seven
12:20 - seven eight nine and scaling factor
12:21 - would be
12:26 - something like this so see you do not
12:29 - have to go into this thing because
12:30 - internally they represent this number in
12:33 - binary form and the scaling factor would
12:35 - be in binary number also it is like the
12:38 - base in decimal
12:39 - right like 10 a super 5 10 raised to
12:41 - power 2 scaling factor would be 10
12:43 - raised to power 2 10 raised to power 5
12:45 - but in binary
12:47 - that would be in the form of 2 base
12:48 - would be 2
12:50 - so this you don't need to take care like
12:52 - you don't have to
12:53 - go into this much detail how they are
12:55 - going to represent if you want to go in
12:57 - this detail
12:59 - then you can tell me in comment box we
13:00 - can just upload a separate video like
13:02 - how the floating point numbers are to be
13:04 - stored internally right
13:07 - but for the data types for the sake of
13:09 - data types you just need to know these
13:12 - fix
13:13 - and the range for this float and double
13:16 - would be
13:18 - so you can see the range because the
13:19 - number is very large so they have
13:21 - written in exponential form that i have
13:24 - told you you can write down capital e or
13:26 - small e that's same thing so for float
13:28 - is it is minus 3.4 e plus 38 to plus 3.4
13:33 - e plus 38
13:34 - and for double it's 1.7 e plus 308 to
13:38 - 1.7 e plus 308 now how you can represent
13:40 - this number into this you can just check
13:43 - out
13:44 - that i have told you you don't have to
13:45 - remember the range actually right but
13:48 - all the points you have to remember
13:50 - these things so let me just show you
13:51 - practically like these things
13:54 - so this is a program we have just taken
13:58 - three variables float double and long
14:00 - double right this header io stream in
14:03 - main we have float f4 rather than f i
14:06 - should write suppose i am writing x
14:08 - this number is float at the end i am
14:09 - writing f then double a this number is
14:12 - double then long number and last we are
14:14 - writing l right and simply we are
14:17 - printing
14:18 - simply we are printing like
14:21 - a you want to print
14:23 - so
14:25 - i should
14:26 - remove this command c out a we are
14:29 - printing a is double
14:31 - so let me just write down
14:32 - just to clear out let this is double
14:35 - double a the value we are printing then
14:37 - a is long double
14:41 - long double a and this is
14:44 - float x
14:46 - right so we are printing the values it's
14:49 - not f it's x
14:53 - we are not taking any precision value
14:55 - because these are all commented outlines
14:57 - right after that we will set some
15:00 - precision value
15:01 - this line like numeric limit this and no
15:04 - meaning also i will tell you but
15:06 - for now
15:08 - return 0 and that's it right
15:11 - so now if you run this program then what
15:13 - output you will get c
15:16 - for double a nine point one two three
15:18 - four six
15:19 - for this long double a triple nine point
15:20 - one two three four float a three four
15:23 - five six point one two
15:25 - so the main point here
15:27 - what you need to note is
15:29 - every number
15:31 - is having six digits only six digits
15:35 - i'm not saying after decimal six this
15:37 - you need to take care only six including
15:39 - the previous one which is before decimal
15:42 - also
15:43 - total deserts are six so c out is
15:45 - allowed to print only six deserts
15:48 - precision of c out is six digits only by
15:50 - default
15:52 - so double long double float it doesn't
15:55 - you know tense like it is double or long
15:57 - double or float see out only print six
15:59 - digits right
16:01 - now
16:02 - you can set precision value so if you
16:05 - want to set like
16:08 - let me just increase the size and here i
16:11 - want to set the precise value like set
16:14 - precision 10 but see it is
16:18 - what saying set reason is undefined
16:20 - because this is not in this header file
16:23 - which header file you need to include
16:25 - which header you need to include for
16:26 - this
16:28 - i o manage this header you need to
16:30 - include right in this header
16:34 - we have this function set precision
16:37 - right
16:38 - now
16:39 - it will not give any error
16:41 - right
16:42 - so and see one more thing i want to show
16:44 - you
16:45 - let me just remove this header file
16:49 - and we are writing c out
16:51 - set
16:52 - p r e c i see it is not
16:56 - giving any option to us right like auto
16:59 - fill options
17:01 - and if i include this header file
17:05 - include io
17:07 - manip
17:08 - this header
17:10 - and if
17:12 - now i want to write p r e
17:15 - s i c
17:16 - now it is giving you
17:19 - these
17:20 - options like you can just select this
17:23 - because this is in this header file i o
17:25 - menu so whatever is this header file now
17:27 - we can use those thing those methods
17:29 - classes objects functions in this
17:31 - program right so just click on this now
17:34 - i am setting this value
17:36 - 7 okay let's say 7
17:41 - so all these
17:42 - things would be printed
17:44 - up to 7 digits see now this double is
17:47 - also having now
17:49 - seven digits up to seven digits the long
17:51 - uh double is also seven digits and float
17:54 - is also three four five
17:56 - six point one to three seven digits if i
17:59 - set this one to
18:01 - 9
18:02 - we just show you the difference exactly
18:04 - let me just comment out this double and
18:07 - long double first
18:14 - and let me just clear the previous
18:16 - output
18:17 - now
18:18 - up to nine
18:19 - digits you want to print and let me just
18:21 - run this now
18:22 - see float value is three four five six
18:25 - point one two four
18:27 - one two
18:28 - it's one two three in float but one to
18:30 - four it is printing because after three
18:32 - we have nine so it would round off right
18:35 - so by default uh the floating precision
18:38 - i have told you is
18:39 - seven digits right so
18:42 - till seven digits it will print correct
18:45 - after that
18:47 - it will give some garbage value
18:49 - still seven like one two three
18:53 - it should be three but it is rounding
18:54 - off like it is 4 because of the 9 if
18:57 - suppose i change this 9 to 0
18:59 - or 2 1
19:02 - then let me just show you the output
19:04 - see now 1 2 3
19:06 - 1 2 3 then
19:08 - it is printing zero five but after one
19:10 - two three we have one zero and it is
19:12 - printing zero five any garbage value
19:13 - because
19:14 - the precision digits for float is only
19:17 - seven digits
19:19 - right
19:21 - but
19:22 - if
19:23 - now float is clear to you let us take
19:25 - double
19:27 - and long double
19:30 - right
19:32 - let me just run this
19:34 - they will print up to nine digits
19:36 - correctly
19:37 - you can see here
19:39 - last number it it should be in double it
19:42 - should be eight and it is rounding off
19:43 - because after that we have five we have
19:45 - does it greater than five or five then
19:47 - it will
19:49 - increase one
19:50 - so if i set the precision
19:53 - uh 15
19:56 - right and the number i am taking
19:58 - like
20:01 - 0 1 2 3 4 5 6 7 8 9 0 right and long
20:05 - double also i am taking
20:17 - so now it will print
20:19 - see
20:20 - 15 precision up to it will print double
20:22 - a so long double
20:24 - we don't have any no problem because the
20:26 - present digits are 18
20:28 - so in double we have 15 so till 15 it is
20:31 - printing exact same one two three
20:33 - 4 not 4 that is 5
20:36 - because of rounding off but if i take
20:38 - this value
20:40 - 17
20:43 - now let me just run this
20:45 - now you see the double value
20:48 - one two three four one two three four
20:51 - okay
20:52 - after that it will printing six one
20:55 - one two three four but it should print
20:57 - five six but it is printing six one
20:59 - right
21:00 - because up to 15 degrees it will print
21:02 - precise value after that any garbage
21:03 - value so same you can take you know set
21:06 - the precision like 18 digits so long
21:08 - double will print up to 18 digits
21:11 - you know correct value if you set the
21:13 - precision 20 then those last two does it
21:17 - would be any garbage value right but if
21:18 - you you can set the places in
21:21 - individual for float
21:23 - separate for c long double separate for
21:25 - double separate in c out in this
21:27 - statement you can write down this
21:29 - like c out for double you can first of
21:32 - all set precision digits
21:34 - like you know for double its up to
21:36 - 15 so up to 15 you can write down the
21:39 - digits for long double separate for
21:42 - float separate so this is for your
21:44 - assignment you have to take three
21:46 - these float numbers float double long
21:48 - double and you have to set the precision
21:50 - digits
21:51 - for
21:52 - ah float double and long double
21:53 - different for each not same here i am
21:56 - setting same for each
21:59 - this data type but you have to set
22:01 - different for each data type
22:02 - in separate say out statement you just
22:04 - said you can write down this function
22:06 - that's very easy i can i guess you can
22:08 - do this right so just try out these
22:11 - things
22:12 - i hope now this is clear to you if you
22:14 - want to find out the default precision
22:16 - for c out then what you can
22:18 - write down here if you are writing c out
22:22 - c out
22:25 - see outdoor precision you need to write
22:27 - down
22:28 - let me just save it and run
22:31 - see it is printing
22:33 - before double it is printing six
22:36 - i hope you can see this thing
22:38 - see
22:39 - before double it is printing the digit
22:41 - six
22:43 - so it is for
22:45 - this one the default precision four c
22:48 - out is six digits only as i have told
22:50 - you this is how you can
22:52 - right now if you want to find out the
22:54 - limit
22:55 - then see you can write down this thing
22:58 - let me just
23:00 - comment out these things
23:03 - right
23:05 - numeric limit if you want to find out
23:07 - numeric limit for float and these
23:08 - numbers so you have to first include
23:12 - this header l i m i t limits
23:15 - right
23:21 - battery down
23:23 - laptop the limits you have to write down
23:25 - and after that you can write down this
23:26 - line numeric limit then which data type
23:28 - limit you want to find out and
23:31 - double colon digits 10.
23:36 - so it is for decimal digit 10 is for
23:37 - decimal now let me just run this and
23:40 - show you what output it is giving
23:43 - okay see it is not printing anything see
23:46 - because after return 0 we have this line
23:48 - c out and return 0 means successfully we
23:51 - have exit did from this program right so
23:54 - it is not taking this line into
23:55 - consideration
23:57 - this is the thing so before
24:00 - return 0 we have to paste it right now
24:04 - let me just show you for float it is six
24:07 - see
24:09 - the limit
24:10 - six
24:11 - roughly we say
24:12 - you know
24:14 - six seven or sometimes it's eight right
24:16 - roughly we say up to 7 digits precision
24:19 - value is there
24:20 - if you want to find out for
24:23 - like double
24:28 - then let me just run this for double
24:30 - it's
24:31 - right
24:32 - if you want to find out for
24:39 - long double
24:41 - then it would be
24:42 - 18 c 18. so this is how you can find out
24:46 - the limit or you can say the precision
24:48 - for these things
24:49 - or many functions are there like maximum
24:51 - deserts minimum deserts you can
24:54 - find out this thing also you just
24:56 - explore these things
24:59 - you can just press ctrl and click to
25:01 - this limit and you can just read out
25:03 - what this limit is all about
25:05 - right
25:06 - so this documentation this type of thing
25:08 - you need to read out if you have time
25:12 - like you know
25:13 - if you want to know more detail like how
25:16 - these are stored what is the scene this
25:18 - header and all
25:19 - and you have time
25:21 - then the better to explore these things
25:23 - also right it's not like that i can tell
25:25 - you everything
25:27 - here and if you find out anything any
25:29 - problem then you can ask me in comment
25:30 - box you can just send us you know and
25:32 - send a screenshot and you can just ask
25:33 - me on my instagram account or on my
25:36 - this
25:38 - comment comment section so i hope flow
25:40 - data is clear to you now the next video
25:42 - will see cad air types and i'll see the
25:44 - next video till then bye