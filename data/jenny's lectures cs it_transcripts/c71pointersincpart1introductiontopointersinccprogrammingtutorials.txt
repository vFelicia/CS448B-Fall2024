00:00 - so in the series of learning programming
00:02 - in c we have discussed strings in C from
00:04 - this lecture I'm going to start pointers
00:07 - in C right first of all in this lecture
00:10 - we'll discuss some introduction about
00:11 - pointers like what is pointer need of
00:13 - pointer how to declare a pointer how to
00:15 - initialize a pointer with a simple
00:17 - example nothing much right after that
00:20 - one by one we'll discuss some more
00:22 - detail you know about pointers with some
00:24 - programs and all we'll also see some
00:26 - complicated programs on pointers right
00:29 - so first of all let me clear this thing
00:31 - pointers are it's not so tough for some
00:34 - students they think that pointers are
00:36 - like you know aliens for them it's very
00:39 - tough concept and see no it's not like
00:41 - that these are very simple pointer
00:43 - concept is very simple you just have to
00:45 - concentrate and you just have to you
00:47 - know try to understand with full
00:49 - concentration once you get once you you
00:52 - know get the basics of pointer like what
00:54 - is pointer right just how to declare and
00:57 - how to initialize and how to use a
00:58 - pointer that's it there is nothing much
01:01 - in pointers it's very simple to use
01:03 - pointers know concept right what is
01:06 - pointer before uh you know discussing
01:08 - pointer just I just want to recap that
01:12 - thing what is a variable how to declare
01:14 - a variable we have some fundamental lay
01:16 - types in see like int flow double care
01:19 - like if suppose I want to declare a
01:20 - variable of type int this is a variable
01:22 - name that's it and if this is the case
01:25 - declaration means space would be
01:27 - allocated to this variable variable name
01:30 - is a right and how many bytes four bytes
01:34 - integer will take four bytes like this
01:36 - is our computer
01:39 - memory it's a long Tye of bytes this is
01:42 - one b one b one b one b and somewhere
01:45 - four bytes like suppose these four bytes
01:47 - 1 2 3 4 these four bytes has been
01:49 - allocated to to this a having some
01:52 - address suppose th000 first bite address
01:55 - is th th000 then 1,001 2 and and three
02:01 - these four byes would be allocated to
02:03 - this a right so I'm not writing it
02:06 - something like this I'm just writing the
02:08 - four bits in a single block right I'm
02:10 - writing it it like this and address is
02:13 - what like obviously we will see we will
02:17 - suppose the address of a is what Base
02:19 - address Base address means the address
02:21 - of the first bite that would be address
02:23 - of this variable we consider it right so
02:25 - address would be
02:27 - 1,000 from 1,000 to 1,000 and three but
02:30 - we take Base address that is th000 only
02:33 - so for Simplicity purpose I'm writing
02:34 - this something like this I hope you got
02:37 - it right so now see this variable is
02:41 - having when suppose I'm initializing it
02:44 - now I'm going I haven't initialized it
02:46 - so it is having some garbage value so
02:48 - I'm initializing suppose it with 10
02:50 - value so 10 would be stored here so this
02:54 - a is what name of the variable this is
02:57 - what value of this variable aable right
03:00 - and this is what address of the variable
03:03 - three things the variable will have
03:06 - right name value and address this is
03:10 - name of the variable this is what value
03:13 - and this is
03:14 - address of the variable right now
03:19 - pointer are
03:21 - also variables or we must say these are
03:24 - special variables these are not these
03:26 - kind of
03:27 - variables pointers are special variables
03:30 - which contain address of any other
03:35 - variable right pointer contains address
03:38 - of any other
03:40 - variable pointer does not contain any
03:42 - simple value like 10 five or like
03:45 - integer value or float value float if I
03:47 - take float variable like float B it is
03:50 - going to take floating type of know
03:52 - values like
03:54 - 1.1 right if I take care care C it will
03:57 - take character like a b c or if I write
04:01 - one in single code that is also
04:03 - considered as car if I write one this is
04:06 - considered as integer I hope you got it
04:10 - right if you declare a double type of
04:12 - variable that will contain you know
04:13 - double type of value but pointer always
04:17 - contain address address of any other
04:21 - variable
04:22 - right so now see how I hope you got what
04:27 - is a pointer or we can say po are
04:30 - derived data
04:32 - type this comes under the category of
04:36 - derived data type right because we drive
04:39 - it using these fundamentals data types
04:43 - right fine so now how to declare a
04:47 - pointer how to declare a pointer see
04:51 - this is this thing is very you know
04:52 - important please watch it carefully if I
04:55 - write something like this first we will
04:57 - write the general syntax would be data
04:59 - type
05:00 - typ
05:02 - then estri and
05:06 - then pointer
05:08 - name this is General synx to declare a
05:12 - variable right so if I write here int s
05:17 - and pointer name I'm taking suppose p
05:20 - and see what if you write this something
05:22 - like this like in estri this is also
05:25 - fine if you write int star p this is
05:29 - also fine in C if you write int star
05:34 - P these are same in C right so please
05:39 - don't get confused I'm writing something
05:41 - like this int Then star and then P so
05:46 - now if you write simply int P it means p
05:50 - is a variable which will contain which
05:52 - type of value integer type of value but
05:54 - if you write here this
05:56 - SRI it means p is what a pointer
06:01 - variable which will contain address
06:05 - of any other
06:07 - variable right and more specifically if
06:11 - I say address of a integer type of
06:17 - variable right here we cannot say like
06:21 - the data type of pointer is int no if I
06:26 - write something like this float estri
06:30 - P maybe you will say data type of this
06:33 - pointer is float here you will say data
06:35 - type of this pointer is
06:37 - int this is the you know mistake many
06:39 - students do but here
06:42 - here here also pointer will contain
06:45 - address here also pointer will contain
06:47 - address right in both the cases pointer
06:49 - will contain address so how you can say
06:52 - here dat type is in here type is float
06:55 - because pointer is containing address
06:58 - only right
07:00 - right so now what does this data type
07:03 - mean int float this if I write here like
07:06 - double double star P why I'm writing
07:10 - this in float
07:11 - double it means here this pointer p is
07:16 - containing address of a variable whose
07:20 - data type is
07:22 - integer right means here I can say p is
07:26 - containing address of a
07:30 - like right because see we can say a the
07:33 - data type of a is integer you can say
07:36 - this here P will contain address of a
07:39 - variable whose data type is float so P
07:42 - can contain here address of B Because
07:45 - data type of B is
07:47 - float here P will contain address of a
07:50 - variable whose data type is
07:53 - double I'm not writing here double if I
07:56 - declare double any know variable there
07:59 - you can say pointer will point you know
08:02 - address of that variable I hope you got
08:04 - like why this what does this data type
08:08 - mean right so the size of pointer is
08:12 - what 2 bytes for 32
08:14 - bits machine right it depends right so
08:19 - now I hope you got the meaning of this
08:21 - thing and if you declare if you write so
08:24 - the basic you know what is pointer
08:27 - pointer will contain address of any
08:29 - other variable
08:31 - right so now here this is what
08:35 - declaration of pointer now here what can
08:37 - I say how to initialize a pointer how to
08:40 - initialize a pointer P equal to now P
08:43 - will contain address and how we will get
08:45 - address of any other variable using
08:47 - address of
08:48 - operator so address of what I can write
08:52 - here
08:54 - a address of a see here if you write p
08:59 - is equal to address of
09:03 - B it is not
09:06 - correct why because according to the
09:09 - Declaration of pointer P should contain
09:12 - address of a variable whose data type is
09:15 - iner but here I'm initializing p is
09:18 - equal to address of B I'm going to store
09:21 - address of B in P but data type of B is
09:24 - float so that would be illegal right
09:28 - this is not possible
09:30 - so now here you can only write down a
09:33 - name of the variable whose data type is
09:34 - integer so a is having in type so that
09:38 - is
09:39 - fine right so now see if you declare a
09:43 - pointer something like this
09:46 - then name obviously this is a variable
09:49 - this is special variable which would
09:51 - will contain address but this is also a
09:53 - variable it is going to take some space
09:54 - in memory right so and if in memory
09:59 - memory has been allocated to this P so
10:00 - obviously this will have its own address
10:03 - also right so address may be 2,000 see
10:07 - this address would be in hexadecimal
10:08 - form right but just for Simplicity
10:11 - purpose I'm taking these integers right
10:14 - so now I have initialized p is equal to
10:15 - address of a now address of a is 1,000
10:19 - so in P we have
10:22 - 1,000 so now what we can say
10:25 - this p is pointing to
10:29 - a here we can write
10:32 - P points to
10:35 - a if somewhere somewhere it is written
10:38 - like any variable name
10:41 - PTR Point 2
10:44 - a means definitely you will get PTR is a
10:47 - pointer which is containing address of
10:50 - variable a points two points 2 means it
10:53 - will it is containing address of this a
10:58 - right I hope you got the you know the
11:00 - Declaration and initialization of this
11:02 - pointer and what is a pointer right it's
11:05 - very
11:06 - simple you don't have to be very you
11:08 - know don't have to get confused in this
11:11 - case I hope you got meaning of this in
11:13 - Star P float starp and double starp
11:16 - right please it's not data type of
11:17 - pointer it is data type of that
11:20 - variable whose V whose address this
11:22 - pointer is going to
11:25 - store right and this declaration this is
11:28 - declaration of pointer this is
11:30 - initialization of pointer right so
11:32 - declaration is going to tell the
11:33 - compiler like three things this SRI
11:37 - means this would be a poter type of
11:39 - variable right and this p is having some
11:44 - space in memory some address in memory
11:46 - like 2000 maybe 2000 let us suppose 2000
11:50 - third thing is this this is having
11:52 - address of a
11:54 - variable whose data type is integer so
11:57 - it is having address of integer data
11:59 - I right now uh you can do this
12:03 - declaration and this initialization in
12:05 - same step like I can declare something
12:07 - like
12:09 - this int star p and here only I can say
12:14 - is equal to address of a that is also
12:17 - fine in the same step or this is also
12:21 - fine you can merge this and this in one
12:24 - line also in a is equal to 10 in the
12:28 - same line
12:29 - I'm going to declare a pointer star p
12:32 - and I'm going to initialize it address
12:35 - of a this is also
12:38 - fine this will also you know uh uh
12:41 - points to this thing visualize you can
12:43 - visualize this thing something like this
12:45 - right but this is not correct if you
12:48 - just do something like this int star p
12:51 - is equal to address of a and after this
12:53 - I'm going to initialize this a a is
12:56 - equal to 10 this would be wrong why so
13:00 - because we are you are going to store
13:02 - address of a in this pointer but you
13:04 - haven't declared a yet you are declaring
13:07 - a after this so where is
13:11 - a here till here we don't have any a
13:14 - value or a variable name in memory right
13:17 - any address of a in memory so this would
13:20 - be illegal but yeah this is possible
13:22 - first declare a or you can say
13:24 - initialize this you can also initialize
13:26 - it or if you don't want to initialize
13:28 - then it will any garbage that is also
13:30 - fine like int a Comm star p is equal to
13:34 - add that is also fine right a will
13:37 - contain any garbage value but this is
13:39 - not you know uh this would be illegal
13:41 - this would be wrong
13:57 - fine
14:02 - so now see um now we have two way to
14:06 - print the value of a you can directly
14:08 - print print a percentage d and a and you
14:10 - can also print the value of a using this
14:12 - pointer because this pointer is also
14:15 - pointing to here but how you will print
14:19 - the value how you will access this value
14:22 - using
14:23 - pointer there we have to use some
14:25 - special operator that is D referencing
14:28 - operator
14:29 - or IND Direction operator this star that
14:33 - we'll discuss in next video right with
14:34 - some proper example and I'll show you
14:36 - that program on my laptop also here I
14:40 - just I just want to you know get you
14:42 - familiar with the with the basics of
14:44 - pointer right now one question for you
14:47 - is if I write something like this is
14:50 - this correct you have to tell me in
14:52 - comment box right two variable of type
14:55 - float X and Y one variable int a a
14:59 - pointer and in pointer I'm storing
15:00 - address of X and then address of a I'm
15:03 - storing right so which would be correct
15:05 - and which maybe which would be wrong and
15:07 - if both are correct then at last in
15:08 - pointer what would be the value you can
15:11 - take any you know address obviously you
15:13 - will take up to you 1,00 2,000 anything
15:16 - right and then you can tell me in
15:17 - comment box is it correct or not right
15:19 - so I hope this the basics of pointer you
15:22 - got and see if I write something like
15:25 - this end estri PTR
15:29 - so means here we have pointer name this
15:32 - is a pointer because of the sric we came
15:35 - to know name is PTR suppose address is
15:38 - 3,000 and here we haven't initialized
15:40 - this pointer so it is going to point
15:42 - some unknown location we don't know so
15:46 - the these you know un initialized
15:48 - pointers are very risky to use so before
15:50 - using the pointer we have to initialize
15:51 - these pointers in our program right and
15:54 - if you initialize like uh in Star PTR
15:57 - and if you initialize like like PTR is
15:59 - equal to address of B maybe compiler
16:03 - will not detect will not give any error
16:06 - because of this but it will give you
16:08 - wrong output so you have to take care
16:11 - while initializing pointer you have to
16:13 - take care of the data types because see
16:15 - B data type is float right and here it
16:20 - should point to integer data type if you
16:23 - write here a that would be fine right if
16:26 - I write here float B this sorry float
16:29 - star PTR then it is fine it will point
16:33 - to a variable whose data type is float
16:37 - and B is having flow data type so it
16:39 - will contain address of that is fine
16:41 - right so please you have to take care
16:42 - about these assignments you have to take
16:45 - care of the data type also fine so now
16:48 - that's it about the introduction of
16:49 - pointer in the next video we'll see some
16:52 - example and some you know that D
16:54 - referencing operator and some programs
16:55 - on pointers so I'll see in the next
16:57 - video till then bye-bye take
17:00 - yeah