00:00 - so in the series of learning C plus plus
00:01 - programming language we are discussing
00:03 - operators in C plus plus till now we
00:04 - have discussed arithmetic relational
00:06 - bitwise and logical operators now next
00:09 - type of operator is assignment operator
00:10 - so this video will be discussing
00:12 - assignment operator as well as some
00:13 - slainess operators we have like a
00:16 - conditional operator which is known as
00:17 - ternary operators also right that we
00:20 - have discussed like uni three categories
00:22 - of operators are there unary binary
00:24 - internally so conditional operator is
00:25 - ternary operator so that also comes
00:28 - under miscellaneous we'll discuss in
00:30 - this video then size of operator then
00:32 - cast operator then we have that address
00:35 - of operator then we have that the
00:37 - reference operator that asterisk a
00:39 - pointer to a variable so these are some
00:41 - miscellaneous operators so these
00:43 - operators and assignments operators will
00:45 - be discussing in this video with the
00:47 - help of program I'll show you practical
00:49 - also right example of each and every
00:51 - operator will see on my laptop
00:53 - right but before they just want to tell
00:55 - you one thing Geeks four weeks has come
00:57 - up with a fun filled event for you guys
00:59 - called geek Olympics so what you have to
01:03 - do is you just go to the link which I'll
01:05 - put in the description box of this video
01:06 - and a resistor for the event free of
01:09 - post and once you register after
01:11 - registering you will get access to the
01:13 - calendar where you can see the upcoming
01:16 - events and activities see they have
01:18 - something new and something different
01:20 - every day in the month of July from 1st
01:22 - to 31st of July so do check out this
01:24 - link every day where you can get a
01:26 - chance to win some rewards and
01:28 - definitely it would be a great learning
01:30 - experience for you guys now let me just
01:31 - brief you on one of such events through
01:33 - geek Olympics which is 24 hour doubt
01:36 - support Marathon yes Geeks four Geeks is
01:39 - conducting a 24 hour doubt support
01:41 - Marathon for free
01:43 - when their mentors will be live for 24
01:46 - hours on 9th of July to solve all your
01:50 - doubts so whatever doubt in which
01:52 - subject you have you can ask all your
01:54 - doubts but for that you have to register
01:55 - first so register now the link would be
01:57 - in the description box of this video you
01:59 - can go and register and the timing and
02:02 - this loads would be like this that you
02:04 - can see on my screen from nine on 9th of
02:07 - July the that this session would be
02:09 - started from 9 am so from 9 am to 11 am
02:13 - Python and machine learning then from
02:16 - 11AM to 1 pm at a linked list stack and
02:19 - cues like this you can see on my screen
02:21 - so all the relevant links and detail
02:23 - I'll put in this in the description box
02:24 - of this video you can go and check out
02:26 - now let's see what is what are
02:28 - assignments operators I think these are
02:30 - very simple and no need to discuss C
02:31 - this is assignment operator here not
02:34 - equal to but here in programming
02:36 - languages assignment operator which will
02:38 - do whatever the value in the right hand
02:40 - side it would be assigned to the left
02:42 - hand side right like we write like a is
02:44 - equal to 5 so this 5 could be assigned
02:46 - to a so this is assignment operator now
02:48 - you can combine this operator with
02:50 - something like this plus equal to so it
02:53 - means nothing but if you write a plus
02:55 - equal to 1 it means a is equal to a plus
03:00 - 1 means just add right hand side to the
03:04 - left hand side and assign the value to
03:07 - left hand side that's it if I write like
03:10 - minus equal to It Means A minus equal to
03:12 - 1 it means a is equal to a minus 1
03:15 - that's it you can write something like
03:18 - this or this fine it means what just
03:21 - subtract this right hand side from left
03:24 - hand side and assign the value to left
03:26 - hand side that's it
03:28 - I think you are clear with this so
03:30 - you can use this operator something like
03:32 - this with multiplication with the
03:34 - division with modulo also with left
03:37 - shift operator right shift operator
03:40 - and same like if I write a left shift
03:44 - equal to 1 it means what a equal to a
03:48 - left shift one
03:49 - means just left shift this a by one bit
03:53 - and assign the value to left hand side a
03:56 - so you can use this assignment operator
03:58 - with these operators as well right I
04:02 - hope you got this and no need to explain
04:03 - all these operators
04:05 - right now let let's discuss some
04:08 - miscellaneous operators we have first of
04:09 - all we will discuss conditional operator
04:11 - okay now conditional operator comes
04:14 - under which category ternary operator
04:15 - means
04:16 - it used three operands right so this
04:20 - operator is this question mark and
04:22 - column how to write this operator first
04:24 - of all we write some condition then
04:26 - question mark then expression one then
04:29 - colon then expression two so three
04:30 - operands are there for this operator
04:33 - that is why it is known as ternary
04:34 - operator now you can write down this
04:37 - thing see
04:38 - if there are two uh variable we have an
04:42 - end is equal to Three B is equal to 2
04:44 - and I want to check out the maximum of
04:47 - these two so what you will write if a
04:49 - greater than b a is maximum else B is
04:51 - maximum simple if else but rather than
04:53 - if else you can do this thing with
04:55 - conditional operator as well how just
04:58 - write down the condition here like a
05:00 - greater than b
05:03 - then question mark
05:05 - if a is greater than b
05:08 - then
05:09 - if I write a here then colon then B
05:12 - means if this condition is true then
05:14 - Express expression 1 would be evaluated
05:17 - if the condition is false then
05:19 - Expression 2 would be evaluated that
05:21 - means output would be this if condition
05:22 - is true then I'll proclude with this if
05:24 - condition is false output would be this
05:26 - so if a greater than b
05:28 - if yes it would print a if this
05:31 - condition is false it would print B
05:33 - so rather than writing if else simple in
05:36 - one statement you can write down this
05:38 - thing
05:40 - here you can write down some expression
05:42 - as well right something like this if a
05:45 - greater than B I want to print a plus 2.
05:48 - otherwise B minus 2 something like this
05:51 - it's not like that you have to write
05:53 - down operand only no here also you can
05:55 - write down some expression having some
05:58 - arithmetic operators maybe plus minus or
06:01 - complex expression also but the working
06:04 - is condition expression expression if
06:08 - condition is true first expression would
06:10 - be evaluated means output would be this
06:11 - one if condition is false this would be
06:14 - the output that's it so it would be you
06:16 - can say it's a substitute of if else
06:18 - block
06:19 - like why Tannery because three operands
06:22 - are there so this is what conditional
06:24 - operator right now next we have
06:26 - size of operator so I think you know
06:28 - this meaning of the size of Operator
06:31 - just
06:32 - used to uh you know calculate or the
06:34 - find out the size of a data type or a
06:37 - variable you can say suppose I want to
06:39 - find out size of this a so in C out
06:41 - Simply you can write down
06:43 - size or in bracket you can write down a
06:46 - it will give a is of integer 4 byte or
06:49 - rather than a simply data type also you
06:51 - can write down int
06:53 - that's it right so this is size of
06:56 - operator now next is uh we can say this
07:00 - address of operator what it will give
07:03 - address of a variable suppose I'm
07:05 - writing like in pointer we use these
07:08 - kind of operator in PTR this we have a
07:11 - variable in a
07:13 - and you assign PTR is equal to address
07:15 - of a
07:17 - see this pointer concept we have
07:18 - discussed in C language
07:20 - if you want to find out the meaning of
07:23 - this string and all what is pointed you
07:24 - can check out that video the link of
07:26 - that video I'll put in the side button
07:27 - if not it's okay just I just want to
07:30 - tell you address office address so this
07:33 - operator will give address of a variable
07:35 - right like address of a it will give
07:38 - address of a and that address of a would
07:40 - be assigned to this PTR pointer we'll be
07:42 - discussing pointers in this course also
07:45 - in detail right
07:47 - next is this this is what this operator
07:50 - pointer to a variable operator right or
07:54 - when you want to dereference the value
07:55 - of the sale we generally use this
07:57 - operator right or simply it's a pointer
07:59 - to a variable right
08:01 - we will be discussing in you know these
08:03 - operators in detail the meaning of these
08:05 - operators in detail when we will discuss
08:06 - those
08:09 - pointers right now one is cast operator
08:13 - also we have
08:15 - cast
08:16 - Casting means
08:19 - convert forcefully convert one data type
08:21 - to another data type let us take one
08:24 - example see and it is Unity operator
08:27 - means it will take only one operand
08:29 - right now suppose I am writing here
08:32 - see I am taking a variable float a a
08:36 - variable of
08:37 - a data type is float 6.18 the value I am
08:39 - taking 6.18 f
08:41 - right now I want to print if you simply
08:45 - print a
08:46 - okay it will print the floating point
08:48 - value 6.18 right or maybe 0 0 after that
08:52 - see how it will print up to six digit
08:55 - right now
08:57 - next is I want to convert it into int
09:01 - means I want to cast it into int cast
09:04 - operatory is used to convert one data
09:06 - type to another so what you need to do
09:08 - simply write down
09:11 - in
09:12 - and
09:14 - a because this variable I want to
09:16 - convert from floor to end so just simply
09:19 - put in here in braces brackets and a now
09:22 - it will print only six now a would be
09:25 - converted into int that is only 6 value
09:27 - would be printed
09:29 - so if you want to forcefully convert a
09:31 - data type into another cast operator
09:33 - would be used it is urinary operator two
09:35 - types of this this casting is done one
09:39 - is automatically by the compiler second
09:40 - is manually right so in detail you will
09:43 - be discussing cast operating in a
09:44 - separate video for that you just have
09:47 - but I just want to give you an overview
09:49 - like what is this cast operator and how
09:51 - to use this this is a simple syntax
09:54 - in which data type you want to convert
09:55 - simply write down that and here the
09:57 - operand
09:59 - that's it fine
10:01 - so the types of this type casting like
10:03 - implicit type casting explicit type
10:05 - casting that we'll discuss in a separate
10:07 - video with help of an example so these
10:09 - are some miscellaneous operator and
10:10 - assignment operators so now let me just
10:12 - show you these operators with the help
10:14 - of a program okay so this is our same
10:16 - you know that C plus plus fine operators
10:19 - dot CPP I think no need to discuss
10:21 - assignment operator because these are
10:23 - very simple those uh we have assigned
10:26 - the left hand side right hand side value
10:27 - to left hand side so we'll be discussing
10:29 - some miscellaneous operator see first is
10:32 - the cast operator let's discuss here
10:34 - this is the one cost operator simply
10:38 - simple example I am taking we are taking
10:40 - a value float X is equal to 6.78 and I'm
10:43 - just converting casting it into int
10:46 - and x and we are just printing now the x
10:50 - value right after casting we are
10:53 - Printing and in the next line I am
10:55 - simply printing X without casting
10:58 - so two output you will get here right
11:00 - now let's run this and show you what
11:03 - output you will get see
11:07 - see the first output is 6 because we
11:11 - have casted it into int and the next
11:13 - next one is 6.78 that is float we are
11:16 - simply printing X so that will give
11:18 - float right so this is how you can
11:20 - convert one layer type to another a type
11:22 - forcefully with the cast operator right
11:25 - now next let's see you can try out these
11:29 - operators and you can try out some
11:31 - complex examples also and I just want to
11:34 - tell you the basic you know how to use
11:36 - these operators right if you know the
11:38 - basics how to use the operator how to
11:40 - type casted the syntax I think in any
11:43 - expression or in complex way also you
11:45 - can write down these operators you can
11:47 - use these operators now next is
11:49 - conditional operator C
11:51 - we are having two variable A and B so
11:54 - I'm just want to print maximum see out
11:56 - maximum is see the conditional operator
11:59 - I am writing first of all
12:01 - I'll take simply
12:04 - A and B C condition is a greater than b
12:09 - right then this
12:12 - question mark then a then colon B right
12:16 - so if this condition is true if a is
12:18 - greater than b it will print value of a
12:20 - see the maximum is 3.
12:24 - you can see
12:26 - a is greater than b because a is 3 B is
12:28 - 2 so maximum is a that is it is printing
12:31 - a value a is three if I change it B is
12:35 - equal to 12.
12:37 - A3 B12 now this condition would be false
12:39 - right if condition is false then it will
12:43 - give second expression second expression
12:45 - is B so what is B value 12 so it should
12:48 - give 12. so see it is giving maximum is
12:50 - 12. right now if rather than like a I'm
12:54 - writing here A Plus 2.
12:59 - like simple expression also you can
13:01 - write down and here I am writing
13:05 - B minus 5.
13:10 - right
13:15 - now let's run this and now what output
13:18 - you will get
13:20 - I think seven so see you are getting
13:22 - seven because the condition is not true
13:24 - condition is false so second expression
13:26 - would be evaluated means P minus 5 b is
13:28 - 12 12 minus 5 is 7.
13:31 - I hope you got the meaning of this
13:34 - conditional operator and how to use this
13:36 - so it is basically a substitute of if
13:38 - else statement right and if you want to
13:41 - use the size of operator simply here
13:43 - also you can use C out
13:46 - size of and in bracket I want to print
13:51 - size of I want to find out size of a
13:54 - that's it
13:56 - so now it will give maximum is 7 and 4
14:00 - because a is of type integer integer
14:02 - will take 4 bytes
14:04 - right 2 or 4 it depends on the you know
14:07 - compiler the machine you are using
14:09 - so now I think size of operate is also
14:11 - fine
14:12 - and this address of operator and that
14:14 - District operator those are related to
14:16 - pointer so that also will be discussing
14:18 - when we will discuss pointers
14:20 - right
14:21 - so I think that's set about these
14:24 - operators in C plus plus so we are done
14:26 - with the operators type of operators and
14:28 - C plus plus in the next video we will
14:30 - see operator precedence and
14:31 - associativity after discussing
14:33 - precedence and associativity then we'll
14:35 - discuss two or three complex you know
14:37 - problems on operators right so now it's
14:39 - in the next video till then bye take
14:40 - care