00:00 - in this video we are going to see the
00:02 - insertion operation in doubly linked
00:04 - list insertion ad beginning insertion at
00:07 - end insertion at any specific position
00:10 - as well as insertion after a given
00:13 - position right or another case may be
00:15 - insertion before a given position right
00:18 - so far we have discussed the
00:20 - introduction of doubly linked list what
00:22 - is doubly linked list and how to create
00:25 - a doubly linked list as well as how to
00:27 - display the content of a doubly linked
00:30 - list I will provide you the link of
00:32 - those video in the side button you can
00:34 - check out there before going to this
00:35 - video you must check out those videos
00:37 - right see in the previous video we have
00:40 - created a doubly linked list right like
00:43 - this one head pointer is there this is
00:45 - the node each node is having two
00:47 - pointers one is pointing to the next
00:50 - node and another pointer the previous
00:51 - pointer is pointing to the previous node
00:54 - right it means this point is going to
00:56 - contain address of the next node and
00:57 - this pointer is going to contain address
00:59 - of the previous node right and this is
01:01 - what the data part three parts are there
01:03 - basically right we have already
01:04 - discussed how to represent this node
01:07 - when you are going to write down a c
01:08 - program right and c in that case we
01:11 - haven't maintained our tail pointer
01:14 - since this is doubly linked list it is
01:17 - you know very useful to maintain our
01:19 - tail pointer why so that thing also we
01:21 - will discuss now what is a tail pointer
01:23 - but you can say a last pointer see this
01:27 - head pointer is going to contain the
01:28 - address of the first node right or you
01:32 - can say the head node so the tail
01:34 - pointer is containing the address of the
01:37 - last node like this so in this case we
01:42 - have a pointer to the first node of the
01:45 - list also and to the last node of the
01:48 - list also now what is the use of this
01:50 - tail pointer why we are going to
01:52 - maintain this pointer see when you are
01:54 - going to insert any node in the last
01:58 - suppose I want to insert at end and I'm
02:01 - not maintaining this tail pointer right
02:03 - in that case what we will do we can not
02:05 - directly insert here we have to traverse
02:08 - the list till end right because
02:13 - sequential
02:13 - as possible and we have the information
02:15 - what you have we have just this head
02:18 - pointer we just have the address of the
02:21 - first node right that is why you have to
02:25 - traverse the list till end after
02:27 - reaching till this and now you can
02:30 - insert here right if the tail pointer is
02:34 - not there and if you maintain while
02:36 - creating the list if you maintain the
02:38 - tail pointer in that case you don't need
02:40 - to traverse the list till here why so
02:43 - directly you can insert one node here
02:46 - because we can access this node using
02:49 - the stale pointer right we have the
02:51 - address of this last node so simply you
02:54 - can update these links right how do we
02:57 - are going to update these links that
02:58 - also we are going to discuss when when
03:00 - we will discuss this function inserted
03:03 - and right so in this case the insertion
03:07 - in doubly linked list at end will take
03:09 - time order of 1 if you maintain this
03:13 - tail pointer if you don't maintain the
03:15 - stale pointer in that case you have to
03:17 - press the complete list it means it will
03:20 - be order of N and same with deletion if
03:25 - you want to believe this last node and
03:27 - if you maintain this tail then time
03:30 - complexity which would be order of 1 and
03:32 - if you don't maintain this tail then the
03:36 - time complexity would be order of n the
03:39 - delete operation also we'll discuss in
03:40 - next video so these are some advantages
03:42 - of maintaining this tail pointer but the
03:45 - drawback is what this is going to take
03:47 - some memory space right you have to
03:50 - store the stale pointer for bytes if the
03:52 - 32-bit compiler is there and 8 bytes if
03:55 - 64 bit compiler is there if you don't
03:57 - maintain this then only 3 nodes is there
04:01 - then this this this node and that head
04:03 - pointer you have to store but if tail
04:05 - pointer you are maintaining then you
04:06 - have to store this also some memory
04:08 - space would be required to main to store
04:10 - the stale pointer also and you have to
04:12 - maintain this also if you are going to
04:14 - create a list in that case you have to
04:17 - maintain this trail pointer at starting
04:19 - if Lester is having only one node then
04:21 - head is also 100 tail is also hundred if
04:23 - you are inserted second node then head
04:26 - is 100
04:26 - al is now 200 if you are inserted this
04:30 - node then tail becomes 250 so you have
04:31 - to maintain the value of the stale
04:33 - pointer also right now how to keep we
04:36 - have already discussed how to create a
04:38 - linked list but in that case we haven't
04:39 - maintained this tail pointer if you are
04:41 - going to maintain this tail pointer then
04:43 - how we are going to create the doubly
04:45 - linked list I am quickly write down the
04:47 - code for that thing this is what we have
04:49 - declared on we have defined our own data
04:52 - type that is struct node for this node
04:54 - you can say the type data type of thus
04:56 - node 3 parts are there one is data part
04:58 - and two are pointers and these are
05:00 - pointers to node that is why here data
05:03 - type in the struct node so here we are
05:05 - maintaining would two pointers head and
05:08 - tail so we are going to declare two
05:10 - pointers struct node estwick one is head
05:14 - and one is tail right these pointers are
05:18 - containing address off c head is
05:20 - containing address of this node right so
05:24 - here that is why I am writing we are
05:26 - writing the address of those thing or
05:28 - that that variable whose address this
05:30 - pointer is going to store so that is why
05:32 - here I am writing struct node because
05:33 - they retire both this node is what
05:35 - struct node now how we are going to
05:37 - create the list we are going to define a
05:39 - function you can say a create doubly
05:43 - linked list right so first of all we are
05:45 - going to create a node right first of
05:48 - all I want to create these type of nodes
05:50 - so that we can store these values and
05:52 - these pointers and mommy how in the
05:54 - memory is to be allocated dynamic memory
05:56 - allocation that we have already
05:57 - discussed many times so I'm going to
05:59 - write down that thing here right first
06:02 - of all what do you will do you will
06:06 - declare a pointer struct node type and
06:10 - this is how you can assign the memory
06:13 - dynamically to this new node see this
06:15 - this thing the syntax we have already
06:17 - discussed many times right right Malik
06:20 - is a function for dynamic memory
06:21 - allocation how much size you want size
06:24 - for this node right so here you write
06:26 - size of the data type data type is a
06:27 - struct node and malloc is going to
06:29 - return a pointer to the starting address
06:32 - of the located space or you can say my
06:35 - lock is going to return a void pointer
06:36 - and this pointer is what
06:38 - two nodes so that is why you have to
06:40 - typecast this pointer typecast means you
06:43 - are going to write here struck nodes s
06:45 - trick and whatever this fungus will
06:47 - going to return you are going to store
06:48 - that address in this new node pointer so
06:51 - after executing this wine one node has
06:54 - been created means memory has been
06:56 - assigned to that node so here suppose I
06:58 - am taking that we don't have anything in
07:00 - the list the list is empty right so you
07:03 - can say we have created a node address
07:05 - suppose is hundred and this new node is
07:09 - a pointer that is going to contain the
07:11 - address of this newly created node right
07:13 - say this node is having how many bytes
07:16 - for for this food for this and four for
07:18 - this to L bytes and this 100 is what
07:20 - address of the first byte right so it
07:23 - will malloc will return this address so
07:25 - now this address we will store in this
07:27 - new node fine you know disappointing you
07:29 - know the pointer is pointing to this
07:30 - node at starting me assume that head is
07:33 - equal to zero it means we don't have
07:37 - anything in the list and we have just to
07:39 - declare this tail pointer also fine now
07:42 - we are going to insert this newly
07:44 - created node in the list now first of
07:45 - all we are asked we will ask from the
07:47 - user what data I want to insert here so
07:49 - this is how you can ask from the user
07:51 - using printf and scanf the data I want
07:53 - to insert here into data and how you
07:55 - will insert the data here how you can
07:56 - access this part of this node this part
07:59 - you can do directly access this node you
08:01 - can access this using a pointer we have
08:03 - we have one pointer pointing to this
08:05 - node so new node new node and this arrow
08:08 - crater and which part you want to access
08:10 - data part so the data address of new
08:13 - road and data so here suppose I have
08:15 - inserted five and now here you will
08:18 - insert 0 and 0 first of all so I will in
08:21 - access this part that pointer to this
08:24 - node is new node new node arrow and name
08:27 - of this pointer is previous so is equal
08:30 - to 0 new node arrow next is equal to 0
08:33 - fine now I want to insert this node in
08:36 - this head pointer now how you will
08:38 - insert this thing see first of all
08:39 - obviously you have to update this head
08:42 - value here you will store what 100 it
08:46 - means after that this is going to point
08:48 - here
08:49 - 5
08:50 - and the next there is no next note so
08:53 - this is fine it will be zero there is no
08:54 - previous node so this is also fine that
08:56 - this would be zero now one another thing
08:59 - you have to do we are maintaining the
09:01 - scale pointer also so in tail also you
09:03 - are going to store this 100
09:06 - so now tail is also going to point here
09:08 - now this is done fine now how do you
09:11 - write this thing into this code we have
09:14 - just updated head value and elven so
09:17 - here what I can write head is equal to
09:20 - tail is equal to here you will store
09:22 - hundred from where we can get this 180
09:25 - so this is stored in this pointer so
09:27 - here I can write new node see but this
09:31 - is the case when head is equal to 0 it
09:34 - means when list is empty if suppose we
09:37 - have inserted this data one node and I
09:40 - want to insert second node right and
09:42 - second node the address of second node
09:43 - is 200 in that case the new node will
09:46 - contain 200 right and if in that case
09:50 - you will do head is equal to tail is
09:51 - equal to new node means both head and
09:53 - tail are going to point that new node
09:55 - that is 200 is going to store in head
09:57 - and tail now you are going you lose the
10:01 - reference to this node so there should
10:03 - not be a case so before writing this you
10:06 - will write if condition if head is equal
10:09 - to is equal to 0 in that case only you
10:12 - will write this thing that is fine but
10:15 - if head is not a 0 then in else part
10:18 - what you will do now this is suppose the
10:20 - list now I am I want to insert a second
10:24 - node in that case what we will do now
10:27 - suppose we have created one more node
10:28 - address is 200 this in this new node now
10:31 - 200 is going to store we have asked from
10:33 - the user using this new printf and scanf
10:36 - the data inserted is 6 and here is 0 and
10:40 - 0 now I want to insert this node into
10:43 - this list so now if head is equal to 0
10:46 - but head is now 100 so this condition is
10:49 - not true and tail is also hundred so now
10:51 - we are going to enter into else part now
10:53 - in else part what you will do see what
10:55 - you are going to update here this part
10:57 - also and this part also here you will
11:00 - store what address of previous node that
11:02 - is hundred
11:04 - and here you will store address of next
11:07 - note that is this 200 fine after that
11:13 - this link would be established and this
11:16 - link would be established plus one more
11:18 - thing you are going to update this tail
11:21 - also now tail is going to point here
11:23 - because this is the last node so Intel
11:25 - you will store address this that is 200
11:28 - so here you will store 200 right three
11:31 - things you are going to update now see
11:34 - now first of all this was 0 so how you
11:36 - can exist this part both using head
11:39 - pointer and tail pointer because before
11:41 - updating this tail corner is containing
11:43 - hundred so I can write here in next
11:49 - Elauf next here you will store this one
11:51 - where we from where you can get 200 from
11:53 - this new node because new node is
11:54 - containing 200 is equal to new node
11:57 - so here we I can write 200 so this link
12:02 - is established now enough how you can
12:04 - access this part the link to this node
12:06 - is pointer to this node is a new node so
12:08 - how you can access this new node and the
12:11 - name of this part is previous here you
12:15 - will store 100 from where you can get
12:17 - hundred using this tailored you can say
12:19 - using this head so here I am writing
12:20 - what they write I'm not writing head
12:25 - because say we cannot move this head
12:27 - when you will insert the third node then
12:29 - obviously the Hybris of second node we
12:31 - are going to store here and tail is
12:33 - containing address of the first node
12:34 - only right so here we are going to write
12:37 - here only the tail because we can move
12:40 - this tail only we cannot move this head
12:42 - so now this is containing 100 now
12:46 - remaining part is you are going to
12:48 - update this tail tail is equal to new
12:51 - node from here we can store here 200 now
12:56 - tail is pointing to this node right now
13:01 - the same logic you can apply after this
13:04 - it will ask you do you want to continue
13:06 - and if you press 1 then another a node
13:09 - would be created and inserted if you
13:11 - press 0 then no extra node would be
13:13 - created and only you can call after that
13:15 - you can call the display function so
13:16 - that thing you have missed
13:17 - how you write here you can write printf
13:20 - we want to continue in scanf you can
13:21 - take the value from the user and you can
13:24 - write down a while loop here before this
13:27 - line before this line because if you if
13:32 - you'll insert one in that case only new
13:34 - node would be created so before this
13:35 - line you can write down word while and
13:39 - choice right choice is a variable you
13:44 - can take in this function only into
13:45 - torus is equal to 1 right and here also
13:48 - printf do you want to continue in scanf
13:50 - you can write percentage d address of
13:52 - choice this as we have discussed already
13:54 - here the main motor is what have you can
13:57 - maintain this tail pointer so high hope
14:00 - you got the concept now we are going to
14:01 - insert at beginning how you will write
14:03 - this function C so now let us take this
14:06 - case we have these three node in the
14:08 - doubly linked list head is containing
14:10 - 150 and tail is containing the address
14:12 - of the last node that is 200 we have
14:14 - created this list by calling the Creator
14:16 - DLL function now I am going to insert a
14:19 - node and at the beginning of this list
14:21 - fine so this thing we have already
14:23 - discussed many times we have created
14:26 - this node that is new node we have
14:28 - allocated the memory using the Mallo
14:30 - function dynamic memory allocation and
14:31 - their dress is 500 so this new in new
14:34 - nor pointer we are going to store what
14:36 - 500 son of this is pointing here now we
14:38 - have taken input from the user using
14:40 - this printf and scanf enter data and we
14:44 - have user has entered what the 6 value
14:47 - is 6 so we are going to store the value
14:49 - here in the data part so have you can
14:51 - access this part address of new node
14:53 - pointers new node arrow operator and
14:55 - name of this part is data fine and here
14:58 - we will store a 0 and 0 see here you can
15:00 - store in the previous pointer obviously
15:02 - this is the first this is going to be
15:04 - the first node so in the previous node
15:06 - null would be there so here I can store
15:08 - new nor previous is equal to null but we
15:10 - are going to update this pointer so if
15:13 - you have you will not store this new
15:14 - node next is equal to 0 that is also
15:16 - fine you can only write new node
15:18 - previous as is equal to 0 now how to
15:20 - insert this node into this list right we
15:24 - assume that list is not empty so we are
15:27 - not going to write down that and
15:28 - if head is equal to is equal to null in
15:30 - that case head is equal to tail is equal
15:32 - to this new node only one node is there
15:34 - I'm here assuming that we have three
15:37 - node in the list so how you can write if
15:39 - you want to write you can write down
15:40 - that condition also in else part you can
15:42 - write whatever I am going to write here
15:43 - so now which link we are going to update
15:47 - see you have to update this link first
15:50 - of all this is going to contain address
15:53 - of this mode because this is now the
15:55 - first node right so here you will store
15:59 - what address of this node that is 500
16:02 - here you will store 500 so how you can
16:05 - store this this 500 here how you can
16:09 - access this part the pointer to this
16:10 - node is head yes we have a pointer so we
16:13 - can access all the three parts so here
16:16 - what you can write head of previous this
16:20 - part is previous is equal to from where
16:22 - I can get this 500 this address in the
16:24 - new node we have 500 so is equal to new
16:28 - node so now this is now containing 500
16:30 - fine so now this is pointing to this
16:33 - node now again you have to set this link
16:36 - this node should point here so this node
16:38 - should contain address of the next node
16:40 - that is 150 right so here you will store
16:43 - what 150 how you can access this part
16:46 - the pointer to this node is new nodes so
16:49 - here I how you can access new node
16:52 - this part is next name of this pointer
16:54 - is next is equal to from where I can get
16:56 - 150 value in head point that is 150 so
17:00 - is equal to hey now this is pointing to
17:03 - this node now you have to update one
17:06 - more thing that is head now head is
17:08 - containing address of this thing that is
17:10 - 500 so here you will store 500 so now
17:13 - head is pointing to this node this is
17:15 - the first node now from where you can
17:17 - get this 500 from this new node head
17:20 - head is equal to new node right so this
17:26 - is how you can insert this is done now
17:27 - this is how you can insert this inserted
17:30 - beginning no need to change the tail
17:33 - value right now next thing is how you
17:35 - insert how we will insert it and so now
17:38 - the situation is something like this
17:39 - after inserting at the beginning
17:41 - we have enough for node in the list 1 2
17:43 - 3 & 4 and now I want to insert a node at
17:46 - the end right here this node I want to
17:49 - insert here so I hope you got that this
17:52 - coding would be same here I have just
17:54 - updated the name of this function that
17:55 - is inserted and same we have created
17:58 - this node dynamically we have allocated
18:01 - the memory addresses suppose 400 this
18:03 - 400 would be stored in this new node
18:05 - pointer we have taken the data from the
18:07 - user we have here we have put 7 and here
18:11 - we have put 0 and 0 now how to insert
18:14 - this data here see if you don't mean in
18:17 - the scale pointer suppose tail pointer
18:19 - is not there now how you can access this
18:23 - part bigger foreign because for
18:25 - inserting this node here you have to
18:27 - update what you have ported this part
18:30 - here you will store what 400 rather than
18:32 - 0 here you will store 400 right but we
18:35 - cannot access this part because we can
18:37 - only access the structure values or you
18:42 - can say the variables you need some
18:44 - pointer pointing to this node but here
18:46 - we don't have any pointer that is wife
18:47 - tail pointer is not there then you have
18:49 - to Trevor still here like we have
18:52 - discussed in singly linked list using a
18:53 - ten-pointer temp is pointing here then
18:55 - here then here and then finally temp
18:57 - will reach here after that using temp
19:00 - you can access this part but here and in
19:02 - that case that time complexity would be
19:04 - what order of n because you are
19:06 - traversing the complete list but here we
19:07 - have maintained a tail pointer already
19:10 - right so no need to traverse the list we
19:12 - can access this part of directly using
19:14 - the tail pointer right so no need to
19:17 - write down the while loop for traversing
19:18 - simply you will write so how you can
19:20 - access this thing the pointer to this
19:22 - node is tail so here you can write tail
19:25 - off next the part of this the name of
19:29 - this part is next is equal to from where
19:31 - I can get 400 the address of the next
19:33 - node in the new node pointer is 400 so
19:35 - here I can write new node so 400 would
19:38 - be stored here now so now this pointer
19:41 - is pointing to this node one another
19:44 - thing you have to take care the previous
19:46 - node of the newly created node here you
19:48 - will store what previous of the sorry
19:51 - then address of the previous node that
19:52 - is 200
19:54 - right so how you can access this part
19:56 - the pointer to this node is new node so
19:59 - here I can write new node and the name
20:02 - of this part is previous is equal to
20:04 - from where I can get 200 tail is
20:06 - containing 200 so here I can write a so
20:09 - now this is also pointing to this node
20:11 - one ik one more thing see you have to
20:15 - update this tail also because here the
20:16 - last node is this one so tail in tail
20:19 - you should store address this 400 from
20:23 - where I can get 400 from the new node so
20:25 - here I can write new node
20:28 - so now tail is pointing to this node
20:33 - right and this is done say this tail is
20:38 - equal to new node please don't write
20:40 - this here at starting if your right tail
20:42 - is equal to new node here means 10 is
20:46 - equal to new node means now tail is
20:48 - containing 400 so this is pointing to
20:50 - this node so now how you will access
20:52 - this part because you have already
20:53 - changed that L value that is 400 so now
20:56 - we don't have any pointer to this node
20:57 - so we cannot access this part so better
21:00 - you change this point to this point
21:02 - first after that update the tail value
21:04 - right so next thing is how you can
21:07 - insert and is at any specific position
21:10 - so now we will insert a node at a
21:12 - specific position
21:13 - now suppose user enter that I want to
21:15 - insert a node at position 3 it means 1 2
21:19 - & 3 after this here I want to insert
21:23 - before this and after this because
21:25 - position third is here only after these
21:28 - two nodes right so now first of all you
21:31 - will check if position is in negative or
21:34 - less than 1 then you can say in valid
21:36 - position if position is greater than the
21:38 - length of the list it means also that is
21:41 - invalid position right and how to
21:43 - calculate the length of this list using
21:47 - the predefined function that is length
21:49 - function you can use and you can
21:50 - calculate the length and store that
21:52 - length into a variable you can say L or
21:54 - you can say le n or you can say length
21:57 - variable and an if condition you can
21:59 - check if position is less than 1 and
22:01 - position is greater than length it
22:04 - that is invalid position in else part
22:07 - what you will write that thing Here I am
22:09 - going to write so first of all in this
22:10 - function what you can write you can ask
22:12 - from the user enter the position and in
22:14 - if statement you can write if position
22:16 - is less than 1 or greater than the
22:18 - length then you can say inverted
22:19 - position right here in this function you
22:21 - can declare this variable that is int
22:24 - POS fine and suppose if position is 1 it
22:28 - means position 1 means here at starting
22:31 - only you want to insert fine
22:33 - so here you can write else if position
22:37 - is equal to is equal to 1 in that case
22:39 - you can simply call that function insert
22:42 - add beginning fine if you have created
22:48 - all these function in the same program
22:50 - or you can write down here if you are
22:52 - not creating in the same program then
22:54 - here you can write down that code
22:55 - inserted beginning and now in else part
22:58 - so now if suppose position is 3 user has
23:01 - entered position is 3 means 1 2 & 3 here
23:03 - after this node and before this node so
23:06 - you have to create it create a newly new
23:08 - node you have to assign a memory using
23:11 - malloc function we will here you will
23:13 - put say 7 here we will put a 0 and 0 how
23:16 - we are going to create that this thing
23:18 - you have already discussed many times I
23:20 - am going to write down here simply that
23:22 - thing so now say this is how we have
23:24 - created this new node we have taken the
23:26 - data from the user that is 7 if you
23:28 - don't exert here 7 and 7 that is also
23:30 - sorry 0 and 0 that is also fine because
23:33 - you have to update this thing also in
23:34 - this pointer also right now how you can
23:38 - insert this thing at position 3 you can
23:41 - know that it'll insert here you have to
23:43 - traverse the list till here so we are
23:46 - where we are traversing the list till
23:48 - position minus 1 means till this second
23:50 - node right so how you can traverse using
23:53 - a while loop so here what you will write
23:55 - why and using a variable suppose I am
23:58 - taking a variable I I less then position
24:01 - minus 1 right position is 3 so 3 minus 1
24:05 - that is 2 he till here I want to
24:07 - traverse the list so here you have to
24:10 - declare this I variable also in this
24:12 - function word insert at position after
24:14 - this when you are going to declare this
24:16 - pose here also
24:17 - can declare int I is equal to 1 you can
24:20 - initialize this also to 1 suppose I is 1
24:23 - from here I want to start so now see I
24:25 - value is 1 at static values 1 position
24:28 - is suppose 3 so now how he will traverse
24:30 - this list till here see we cannot move
24:34 - this head so we are going to take one
24:36 - another pointer right pointer to a node
24:39 - so here you have to declare one another
24:42 - pointer suppose here I can declare
24:44 - struct node new node and one more point
24:47 - that you can set them right and at
24:52 - starting temp is equal to head temp is
24:54 - also pointing to this one that is 150 so
24:59 - temp is also pointing to this node so
25:01 - here in else part after declaring this
25:04 - temp here what you can write M is equal
25:07 - to head right now you can move the stem
25:12 - now see I less then position minus 1 I
25:14 - is 1 position minus 1 that is 2 so 1 is
25:18 - less than this right how you will move
25:20 - this thing first of all then we will
25:21 - move this temp is equal to here it means
25:24 - now temp is going to store address of
25:26 - the next node that is 100 from where we
25:28 - can get this 100 here we have 100 so
25:31 - here what you how you can write temp is
25:34 - equal to M next because this part is
25:39 - what temp off next
25:41 - so now temp is containing what hundred
25:45 - and amp is now pointing to the snow and
25:49 - we will do it I plus plus right now in I
25:55 - plus plus now I becomes 2 now take 2
25:59 - less than position minus 1 2 less than 2
26:01 - no so we are not going to move this temp
26:04 - now see we have reached till that
26:08 - position till position minus 1 because
26:10 - after this only you are going to insert
26:12 - now position is 3 1 2 so here I want to
26:15 - insert this node right now we have
26:18 - raised till this position now we are
26:20 - going to write down the code how to
26:22 - insert this node here see I am going to
26:24 - rub this thing say this is just you know
26:26 - you have
26:27 - find your own datatype this thing you
26:28 - will write outside of these function and
26:30 - outside of the main function that is
26:32 - globally because we are accessing these
26:34 - this thing in all the functions right so
26:37 - now you have to update four links one is
26:40 - this this will contain address of the
26:42 - next node next is this newly created
26:43 - node that is 501 is this this will
26:46 - contain address of the previous node
26:48 - that is 501 link is this this will
26:50 - contain address of the previous node now
26:52 - previous of this node is this one that
26:54 - is hundred and here you will store
26:55 - address of next next one that is 200 so
26:58 - for links we're going to update now
27:00 - first of all it is better to maintain to
27:02 - better it better to update these links
27:04 - so here what you will store address of
27:07 - the previous node address of the
27:08 - previous node would be hundred so from
27:11 - where I can get this hundred see the
27:14 - temp well you is now 100 right so simply
27:18 - what you will write how you can access
27:19 - this part new node previous so here what
27:22 - I can write new node previous as equal
27:27 - to M now we have updated this link now
27:30 - update this link here you will store
27:32 - address of the next node that is 200 so
27:35 - now from where I can get this 200 see
27:37 - here the tail is also containing 200 but
27:40 - always that is not a case suppose I have
27:42 - 10 node in the list so Ted will contain
27:44 - address of the last node so we are not
27:46 - considering the stale now so frame from
27:48 - where I can get this 200 from here now
27:51 - how you can access this part here you
27:54 - will store 200 means it will point to
27:57 - here so first of all I will access this
27:59 - part say new node next so new node next
28:05 - now from 200 how you can access this
28:08 - part this 200 how you will get this
28:11 - thing link of this node is temp so here
28:14 - you can write temp off next so now this
28:19 - link has been set now you can update
28:21 - this end this so now here you will store
28:24 - what address of next node that is 500
28:26 - here also address of previous node that
28:28 - is 500 so here also 500 and here also
28:31 - 500 and from there we can get 500 that
28:34 - is new node but the main point is how
28:36 - you will
28:37 - this part in this part see how you can
28:39 - access this part simply pointer to this
28:42 - node is yes we have a pointer that is
28:44 - temp so how you can write temp off next
28:49 - is equal to new no so now this link has
28:54 - been set now we have 500 here so this
28:56 - link has been broken and this is now
28:58 - pointing to here right now how you can
29:02 - access this thing because we don't have
29:04 - any link to any pointer to this node
29:07 - right just don't consider now the stale
29:11 - pointer I am considering that suppose I
29:13 - have 10 node in the list and tail is
29:14 - pointing to the last node right so now
29:17 - how you can access this part see the
29:22 - address of this node is 200 right how
29:25 - you can reach till 200 see here we will
29:29 - have 200 right and how you can access
29:32 - this part the link of the pointer to
29:35 - this node is new nodes so here what you
29:36 - will write new node and this part is
29:41 - next it means we have reached till here
29:45 - till 200 right now at this point also we
29:49 - are going to insert we are going to
29:50 - access in this part means previous part
29:52 - so here again multiple arrows you can
29:55 - write and the name is this previous
29:59 - right now we this is how we can access
30:02 - this part so here you will store 500
30:06 - that is the value of this new node right
30:10 - so now here 500 is there this link has
30:14 - been broken and now this is also
30:16 - pointing to this see I'm not saying that
30:18 - this is the only method you can update
30:20 - these links right maybe after this temp
30:25 - is equal to hundred so you can at this
30:27 - point only you can write down you can
30:29 - take another pointer that is tempo 1 or
30:31 - you can say next node and a next node
30:34 - you can store this 200 from where you
30:36 - can get 200 because before updating here
30:38 - we will have 200 right so in new next
30:43 - node we can write next node is equal to
30:45 - temp off next so now next node is
30:48 - pointing to this node right
30:50 - so you don't have to write these
30:52 - multiple pointers you have a pointer to
30:55 - this node also you have a pointer to
30:56 - this node also right after reaching
30:59 - after this while loop here you can write
31:01 - maybe you can say a next node is equal
31:03 - to tempo next here you have to declare
31:09 - one another pointer that is s trick new
31:11 - node in that case you have to take two
31:12 - pointers but say the concept of two
31:15 - pointers basically be used in singly
31:17 - linked lists but here only the single
31:19 - node is having previous node address and
31:21 - next node address so no need to maintain
31:23 - two pointers using single pointer on
31:26 - only we can insert any node in any
31:28 - specific at any specific position and
31:30 - one third method is also there to access
31:32 - this part right before updating this
31:35 - before updating this 500 here value is
31:37 - 200 right so how you can access this
31:40 - part here you can write temp next temp
31:43 - here you can write temp next and after
31:46 - that again arrow and then previous and
31:49 - there you can store new node so third
31:51 - page also there right if you go to this
31:54 - point then you can write down in the
31:55 - comment box what is the third way have
31:57 - you will write that thing so now we will
31:59 - insert a node after any position so now
32:02 - the function is insert after position
32:05 - here the coding would be same except few
32:08 - changes see after position means suppose
32:12 - now position is 3 1 2 & 3
32:15 - so after third here I want to insert
32:18 - it's not like at third 1 2 3 here I want
32:22 - to insert in that case here I will
32:24 - insert fine so here I can take that case
32:27 - suppose suppose position is 2 means 1 &
32:30 - 2 so after this after 2 here I want to
32:34 - insert same thing say at starting I am
32:37 - considering this this and this 3 nodes
32:39 - and this is the newly created node and
32:40 - this node I want to insert here so now
32:43 - everything would be same now what you
32:44 - have to change same you will enter the
32:46 - position you will ask from the user if
32:48 - position is you will check position is
32:49 - valid or invalid if invalid then you
32:51 - will print invalid position in else part
32:53 - see you will not write this case else if
32:55 - position is equal is equal to 1 if
32:57 - position is 1 means 1 so after this one
33:00 - here
33:00 - to insert this is not a case of insert
33:03 - at beginning right so this you will not
33:05 - write in this case after position case
33:08 - after this invalid you write directly
33:11 - else and now you are going to create a
33:13 - new node like this you will ask from the
33:15 - user what data you want to insert so now
33:18 - in while look what you will write the
33:19 - condition suppose position is 2 Here I
33:21 - am taking that case where position is 2
33:24 - C position is 2 in this case after this
33:27 - here I want to insert right so now we
33:30 - are going to traverse the list till this
33:33 - position right so here you will insert I
33:35 - less then position would denote position
33:38 - minus 1 because in that case if you
33:41 - insert insert at position position is
33:44 - supposed 3 means 1 2 & 3 here I want to
33:47 - insert so you have to traverse till 2
33:50 - means position minus 1 but here after
33:52 - position I want to insert so you have to
33:55 - traverse till that position or position
33:57 - minus 1 if your if position is 2 and you
34:00 - will Trevor still position minus 1 then
34:04 - how you can insert this node here right
34:07 - so you have to reach till here so I is
34:10 - less than position now and this this
34:14 - coding would be same if you don't use
34:17 - this another pointer simply you can
34:19 - write this thing here so here I am NOT
34:20 - going to explain this thing I recommend
34:22 - you to please practice the operation of
34:25 - these doubly linked list and tell me
34:27 - after writing the same code and this
34:30 - change whether insert after position
34:32 - function is working properly or not see
34:36 - I recommend you to please write down the
34:38 - score with your own hand please type
34:40 - each and every line it's not like that
34:43 - copy the code from the neck and just
34:45 - simply run the program and here it's
34:47 - done because if you want to remember the
34:50 - things for a long amount of time for a
34:52 - long period of time then it's better to
34:54 - type each line with their own hand so
34:57 - here now what about time complexity see
34:59 - if you want to insert at beginning then
35:02 - order of 1 if you want to insert it and
35:05 - give tail pointer is there then order of
35:07 - 1 right if you want to insert at any
35:11 - specific position then it depends on the
35:14 - then
35:14 - you can say this proportional to the
35:16 - number of elements in the list you can
35:18 - say if you want to insert in the middle
35:20 - then how many node you have to traverse
35:23 - n by two half node so in that case it is
35:26 - order of n so next video will discuss
35:29 - how to delete a node from a doubly
35:31 - linked list right so I'll so in the next
35:33 - video till then bye bye I take