00:00 - in the series of learning programming in
00:01 - c in previous videos i have covered
00:03 - arithmetic operators assignment
00:04 - operators increment and decrement
00:06 - operators logical operators and
00:08 - relational operators with examples in
00:11 - detail now in this video i'll talk about
00:13 - bitwise operators in c what are bitwise
00:15 - operators types of bitwise operators why
00:18 - to use these operators and how to use
00:20 - these operators the syntax the meaning
00:23 - and
00:24 - when you use these operators in your
00:25 - program then what type of output you
00:27 - will get everything will be discussing
00:29 - in detail about bitwise operators
00:32 - with some examples you can say with the
00:33 - program right so now let us discuss what
00:35 - are bitwise operators in cc as the name
00:37 - suggest bit we have bit in this one bit
00:40 - wise
00:41 - so these operators are used to perform
00:43 - operations at bit level what is bit bit
00:46 - is what the smallest unit storage unit
00:49 - in computer memory we have first of all
00:52 - bit then we have byte
00:54 - byte is what equal to
00:56 - 8 bits right the bit is the smallest ah
01:00 - you need to store some data in computer
01:02 - memory and after that you have kilobyte
01:04 - and then megabyte gigabyte a terabyte
01:07 - like this so bit is what the smallest
01:10 - unit to store data in computer memory
01:12 - and using these operators we can perform
01:15 - in c we can perform bit level expression
01:17 - we can manipulate you can say data at
01:20 - bit level although in alu in arithmetic
01:22 - logic unit we though in cpu we have that
01:25 - logical unit
01:26 - there every mathematical and logical
01:28 - operations are executed so those
01:30 - operations are obviously at a bit level
01:32 - because in computer memory we cannot
01:33 - store directly like five plus four so we
01:35 - cannot directly store five and four
01:37 - these are stored in binary form zeros
01:39 - and one one forms right either in four
01:41 - bits or eight bits generally eight bits
01:44 - right
01:45 - but in c also in
01:47 - when we uh do programming in c then also
01:49 - we can perform bit wise operations we
01:51 - can perform operations at bit level
01:53 - so in this case we can apply these
01:56 - operators on integer values and
01:58 - character values but we cannot apply
01:59 - these operators on float and double
02:01 - values right now types of bitwise
02:04 - operators we are going to discuss one by
02:06 - one so these are bitwise operators
02:07 - bitwise and bitwise or bitwise xor
02:11 - bitwise not or you can say one's
02:13 - complement this is left shift and this
02:16 - is right shift
02:18 - and these are binary operators we
02:20 - require two operands for these operators
02:22 - this one is this bitwise node this one
02:25 - is unary operator we require only one
02:27 - operand to perform this operator right
02:29 - and see if you write like this 5 plus 4
02:33 - then
02:34 - or if you write five and four
02:36 - then these type of operators
02:39 - minimum inputs for these type of
02:41 - operators are what
02:43 - a byte they perform at byte level eight
02:45 - bits minimum ah that requirement minimum
02:48 - input you can give off
02:50 - eight byte sorry eight bits that is one
02:53 - byte right now first of all discuss what
02:55 - is that bitwise and operator so it is
02:57 - binary operator so it requires two
02:59 - operand let us suppose i'm writing here
03:01 - a bit wise and b and i am taking in a is
03:04 - equal to 10
03:05 - and b is equal to 5
03:08 - so now
03:09 - it is different from logical end there
03:11 - we use double end double ampersand so
03:13 - now first of all in bitwise operators
03:16 - the data would be converted into binary
03:18 - form the decimal a value would be
03:20 - converted at binary form
03:22 - then the operation is to be performed on
03:24 - that data after that you will get result
03:27 - and then result would be in binary form
03:29 - and then the result would be converted
03:30 - into decimal form and then the output
03:33 - would be printed to you so the output of
03:35 - these operators are what integer value
03:37 - any decimal value
03:39 - and output of logical and
03:41 - this operator is what either true or
03:43 - false means 0 or 1 but here we are not
03:45 - getting true or false we are getting
03:46 - proper output so now first of all see
03:49 - prerequisite of this is what you should
03:51 - know how to convert a decimal number to
03:53 - binary number you should know how to
03:55 - convert a binary number to decimal
03:56 - number
03:57 - if you don't know then maybe we can
03:59 - discuss in some other video when we are
04:00 - going to discuss number system
04:02 - so now first of all convert 10 c 10 and
04:07 - 5 but we cannot perform directly 10
04:09 - should be converted to binary 5 should
04:11 - be converted to binary now the binary
04:13 - value of 10 is what 1 0 1 0 i am using 4
04:16 - bits to represent a number see like this
04:23 - i am just writing down the shortcut here
04:25 - 2 raised to the power 0 2 raised to the
04:26 - power 2 to this to power 2 2 raise to
04:29 - the power 3 so 2 power 0 is 1 it is 2 it
04:32 - is 4 it is 8 like this 2 raised to power
04:35 - 4 and like this you can write these
04:36 - numbers but i am using 4 bit
04:38 - representations in 4 bit representation
04:40 - we can take maximum number as
04:42 - minimum is 0 0 0 means 0 and maximum is
04:45 - 1 1 1 1 we can put every place at 1 so
04:48 - now when you will add these numbers then
04:51 - it would be 15 in decimal so i am taking
04:54 - numbers
04:55 - from 0 to 15 i am not taking greater
04:56 - than 15. if you take greater than 15
04:58 - then what you can do you can again write
05:01 - 2 raised to the power 4 that is 16 36
05:04 - 64. like this you can write and you can
05:06 - take any number greater number also
05:08 - but i'll take only number less than 15
05:11 - right
05:12 - and this is short cut this is how you we
05:14 - will uh convert from decimal to binary
05:16 - and binary decimal so now
05:18 - these are places
05:20 - now
05:21 - 10
05:22 - so where you will write down 1 1 0 0 so
05:27 - that the addition of
05:28 - these numbers
05:30 - will become 10 8 plus 2 is 10 so this is
05:32 - 10
05:33 - in binary
05:35 - 5 in binary is what here you place 1
05:37 - here you place 1 4 plus 1 is 5
05:40 - at other places remaining places i'll
05:42 - put a 0 so this is 5
05:44 - right we have converted into binary form
05:47 - now apply this logical and operator in
05:51 - on these so at a bit level we are going
05:53 - to perform this logical end
05:55 - now what is the output same
05:57 - here
05:58 - you when you apply logical end then what
06:01 - was the truth table for logical and if
06:03 - you have 0 0 then you will get 0
06:06 - if you have 0 1 then 0 1 0 then 0 if you
06:09 - have 1 1 then only you will get 1
06:12 - if both the places are 1 then only you
06:13 - will get 1 right same you apply that
06:16 - logic here
06:17 - we have 0 and 1
06:19 - 0 1 0 0
06:21 - 0 and 0
06:23 - and when you convert this this binary
06:25 - when you convert this into decimal then
06:28 - it would be 0 because there is no 1 so
06:31 - you cannot add any number so finally
06:33 - output would be zero so the output would
06:35 - be
06:36 - zero you will get zero output
06:39 - that is bitwise and operator and we
06:41 - cannot perform these operators on minus
06:44 - numbers negative numbers right now see
06:47 - if you store like this c is equal to a
06:49 - bitwise and b then what you can see
06:52 - after execution of this statement
06:54 - each bit in c
06:56 - will be one
06:57 - only if
06:59 - the corresponding bits in both a and b
07:02 - are one
07:03 - both a and b are one otherwise bit would
07:06 - be zero here we don't have both bits in
07:09 - a and b is uh are one so it is zero
07:13 - so this is what bitwise and operator now
07:15 - what about bitwise or operator i am
07:17 - taking same example and this is bitwise
07:19 - or
07:20 - or when you will use that laptop or
07:23 - that key then this the key is like this
07:26 - this and this
07:28 - right now what is bit wise or operator
07:31 - here
07:31 - logical or is this one so what was truth
07:34 - table of logical or operator
07:37 - this is for end for logical or it is
07:39 - zero if any one is one then you will get
07:42 - one if both are zero then it is only
07:44 - zero
07:45 - so at a bit level
07:47 - you can say ultimately we are applying
07:49 - logical or but at a bit level
07:51 - right and it and at bit level we are
07:54 - applying the concept of logical or
07:56 - right now see
07:59 - 10 is this one 5 is this one is binary
08:01 - form
08:02 - 10 or
08:03 - that logic bitwise or and 5
08:06 - what output you will get 0 1 1 this is 1
08:10 - this is 1 this is 1 at every place you
08:12 - are getting one now convert this into
08:14 - binary at every place you are having one
08:16 - so add all the numbers this is having
08:19 - the number is 15 so final output you
08:22 - will get
08:23 - 50 right and if you write like this
08:27 - 10
08:29 - logical or 5 then output you will get 1
08:32 - that is true because this is true this
08:34 - is true and here if you you will use
08:37 - like and then also you will get output
08:39 - one this is true this is true but here
08:41 - you are getting a number decimal number
08:44 - so this is the difference between these
08:46 - operators logical operators and bitwise
08:48 - operators now next is a bit wide bitwise
08:51 - xor operator now same here if i store
08:53 - this one into c then what you can say
08:55 - after execution of the statement
08:58 - each bit in c would be one
09:00 - only if
09:02 - the corresponding bits in either a or b
09:05 - is one otherwise it is
09:07 - 0 right now but why bitwise xor operator
09:10 - same example i am taking here
09:12 - this one a and b
09:14 - the values are same so now a xor
09:18 - b now what you will get see the table of
09:21 - this xor is what
09:25 - if both the bits are same
09:27 - then
09:28 - output would be zero zero
09:30 - if both the bits are different then you
09:33 - will get output one
09:35 - right
09:36 - so this is basically you can say
09:38 - to toggle the bits toggle means either
09:41 - the bit is 0 then it would be 1 if the
09:43 - bit is 1 it would become 0 right
09:46 - so now see ax or b here same a is having
09:49 - this value in binary b is having this
09:50 - value in binary now apply xor operations
09:53 - here zero one both beta bits are
09:56 - different so you will get one different
09:58 - one different one different one
10:01 - right so the final output would be same
10:03 - this also in decimal it could be 15 so
10:06 - output you will get
10:07 - 15. so i hope you got the meaning of
10:09 - these operators and these are decimal
10:11 - values if you apply these operators on
10:13 - character values then character is also
10:15 - like
10:16 - this one a then a would be first of all
10:20 - map to the sky value that is 97 97 would
10:23 - be converted into binary number so we
10:25 - cannot store the 97 using four bits
10:28 - because maximum number can be stored can
10:30 - be 15. so we will use 8 bits
10:33 - 8 bits means here 16 here we have 32
10:36 - here we have 64.
10:37 - and
10:38 - you can write down here 1 means addition
10:41 - of if you write one then addition of
10:42 - those numbers here those places should
10:44 - be 297
10:47 - so where you can put write down one here
10:50 - like this here and here here and here 64
10:52 - plus 32 is 96
10:54 - and all the bits would be 0 and this bit
10:57 - would be 1 96 plus 1 is 97 like this so
11:00 - you can use character also
11:02 - so now let us take one example with a
11:05 - program i am going to discuss
11:07 - this all the these type of operators the
11:09 - three operators so let us let us take
11:10 - this program no need to tell i guess
11:12 - output of this one this one and this one
11:13 - because i have already discussed value
11:15 - is here six
11:16 - and a is five so you can tell me in
11:18 - comment box let me discuss uh this
11:20 - statement
11:21 - in this expression i am having multiple
11:23 - operators bitwise and also logical and
11:26 - also logical or also relational operator
11:28 - also now how the statement would be
11:30 - executed if in expression we have
11:31 - multiple operators check the precedence
11:33 - first of all precedence of
11:35 - this relational operator
11:38 - is higher
11:39 - then the priority of bitwise operators
11:42 - bitwise end then logical end then
11:45 - logical or operator right
11:47 - so first of all what would be converted
11:50 - what would be executed
11:52 - the
11:52 - operator which is having higher priority
11:54 - that is one that is plus so here b plus
11:56 - 1 b is what 6 so value becomes 7
12:00 - right
12:01 - now priority of bitwise and is higher
12:04 - than logical operators so now this
12:05 - operator a and b a is 10 b 6 first of
12:09 - all convert it into binary form then
12:12 - bitwise and depends
12:14 - if both the bits of a and b are 1 then
12:17 - only it will give 1 otherwise it will
12:19 - give 0. so the final output i am writing
12:22 - here you can
12:23 - write down you can check out by
12:25 - converting it into binary and then the
12:27 - result can you can convert into decimal
12:29 - the final output you will get 2
12:32 - 2 you will get here we have 7
12:35 - logical end or 0. now this is the
12:38 - expression now logical line is having
12:40 - higher priority so this would be
12:41 - executed first 2 and 7
12:44 - both values are true values because
12:46 - these are not 0 true true means it will
12:48 - give true that is 1 1 or 0 if one is
12:52 - value is one about a logical or operator
12:55 - then final output you will get one so it
12:57 - will print one and suppose if i update
12:59 - the statement like this after this i am
13:01 - writing here logical or and i am writing
13:03 - here um b plus plus so now this is post
13:07 - so original value would be used here in
13:09 - this expression and after the execution
13:11 - of this line after the semicolon after
13:13 - completion of the execution then b value
13:15 - can be incremented in post so b value 6
13:17 - so 6 would be used so here i have this
13:19 - one and six value right everything is
13:22 - same
13:23 - so now this operator is is having higher
13:25 - precedence so this is one logical or
13:27 - year zero here we have logical or end
13:29 - six logical or having same precedence
13:32 - associativity check the associativity
13:34 - that is left to right here left to right
13:35 - this would be executed first now first
13:37 - operand is one so it will not check the
13:39 - second one because if logical or open if
13:42 - in logical or if first operand is one
13:43 - final it will it will give one
13:45 - so it will not check this one then
13:48 - or and here we have b plus plus b plus
13:50 - plus value is six
13:52 - now the first operand for this is one so
13:54 - it will not execute the second one final
13:57 - output would be one
13:58 - so the output would be one but if after
14:01 - this if you will print value of b
14:05 - then what value you will get
14:06 - you will get 6
14:08 - you will not get 7 why because
14:11 - this
14:12 - this expression is has not been executed
14:15 - because the first operand was one so
14:17 - this was not executed that is why no b
14:20 - plus plus only you will get six
14:22 - right
14:23 - if you maybe if you replace this by and
14:28 - then maybe you can get b plus plus that
14:31 - is 7. so you can tell me in comment box
14:33 - if i write here and operator logical and
14:35 - then what output you will get first of
14:37 - all output of the statement either 1 or
14:40 - 0 and after that
14:42 - value of b what out what value you will
14:44 - get right so i hope you got the basic
14:47 - idea of bitwise operators now in next
14:49 - video i will discuss these three
14:50 - remaining operators bitwise not once
14:52 - complement left shift and right shift
14:54 - operator with the help of a program if
14:57 - you have any doubt in bitwise operators
14:58 - you can tell me in comment box maybe i
15:00 - can
15:01 - make a separate video and with that
15:03 - proper examples with some
15:05 - difficult type of example tricky
15:07 - examples right so now that's it for this
15:09 - video now i'll see you in the next video
15:11 - till then bye take