00:00 - so in the series of learning cpus
00:02 - programming language we are discussing
00:03 - fundamental data type in c plus plus
00:05 - till now we have discussed in float
00:07 - double care white character these are
00:09 - types like
00:10 - so now we will be discussing
00:12 - two more data in built in air type that
00:14 - is bool and voided type in c plus plus
00:16 - like everything about these data types
00:18 - like what is bool what is void how to
00:19 - use them when to use them the
00:21 - application in which situation we should
00:23 - use void and bold airtimes everything up
00:25 - with the help of a program we will
00:27 - discuss about these stereotypes see
00:29 - until
00:30 - c99 wasn't bool was not a data type in c
00:33 - but yet it was introduced in c also
00:35 - after c 99 wasn't right but in c plus
00:37 - plus we have these bool and void data
00:40 - type
00:41 - right so we'll be discussing these
00:42 - things uh in this video see as we know
00:45 - that c plus plus is still one of the
00:46 - most popular programming language in
00:49 - industry still they have demand of you
00:51 - know the candidates who are you know
00:53 - good in c plus programming language and
00:55 - as we have seen that there is high
00:56 - demand of candidates who are equipped
00:58 - with technical and industrial skills so
01:01 - it is important for students to start
01:03 - acquiring these skills in early stage of
01:06 - your academic journey many students have
01:09 - been asking me about like colleges only
01:11 - you know focus theoretical
01:13 - on theory they don't provide practical
01:15 - knowledge right so we just have a degree
01:17 - we don't have that industrial skills
01:19 - here we don't don't have that practical
01:21 - skills that is actually required in you
01:23 - know industries and that is true if you
01:26 - want to sit in a high-tech company in
01:28 - the interview of a high-tech company yes
01:29 - degree just an eligibility criteria to
01:32 - sit in the interview but in interview
01:33 - they will analyze you based on your
01:34 - skills
01:35 - what makes you stand out from the rest
01:38 - companies not just look for a degree
01:40 - they look more than that in you like
01:41 - your skills
01:43 - uh your certification internship project
01:45 - training and there are very few
01:47 - institutions which prepare you on these
01:50 - things that's why i researched and found
01:53 - sunstone sunstone is a leading higher
01:55 - education service provider that works
01:57 - with academic institutions in upscaling
02:00 - students for employability courses like
02:02 - bcamc mba btec etc are offered with
02:06 - sunstone edge through their 35 campuses
02:09 - in 30 cities and you can also do
02:12 - advanced certification in the most in
02:14 - demand skills like blockchain artificial
02:17 - intelligence machine learning data
02:19 - science big data data analytics and many
02:21 - more they also provide 50 plus
02:23 - guaranteed interviews to each of their
02:25 - student
02:26 - with the recruiters like google amazon
02:29 - microsoft accenture icsci sbi etc that
02:32 - they have on board they also have zero
02:34 - post tmi option available with fast
02:36 - approval and zero loan processing fee
02:38 - together with a scholarship of worth
02:40 - rupees one plus crore so if you are
02:42 - planning to pursue any
02:44 - course from the above mentioned courses
02:46 - then i have got an assured scholarship
02:48 - of world rupees 20 000 for you guys on
02:51 - all the courses but you can avail this
02:53 - scholarship only through my link the
02:55 - link i'll put in the description box of
02:56 - this video you can go and check out and
02:58 - this offer is for limited time only so
03:00 - now let's see what is google and why
03:01 - data type in c plus plus first we will
03:03 - see bool see it can take
03:05 - two values bool means boolean value
03:07 - either true or
03:09 - false true means
03:11 - the
03:12 - default integer value
03:14 - for this is one for false it's
03:17 - 0
03:18 - right so how you can use this you can
03:21 - simply write like int
03:23 - or you can write boolean data type so
03:26 - simply write the data type the name of
03:28 - the variable suppose i am taking a is
03:29 - equal to true you can write
03:32 - now true means by default implicitly it
03:35 - would be converted into end so it means
03:37 - one now b will contain one so if you
03:39 - print c out
03:41 - a this a will print
03:43 - one
03:45 - right if you write here false it means
03:47 - it will take 0 so it will print 0.
03:51 - fine
03:52 - so we generally use this data type in
03:55 - conditional statements if you want to
03:56 - check like two variables are there
03:58 - right we have suppose in
04:01 - x is equal to 10 and y is equal to 12
04:04 - right and something like if you want to
04:06 - check if
04:07 - x greater than y is equal to is equal to
04:10 - true
04:11 - you can simply write true rather than
04:12 - writing one or zero
04:14 - right see yeah you can write one over
04:16 - zero also one means also true zero means
04:19 - false
04:20 - but
04:21 - rather than writing one and zero if you
04:23 - write true and false it would be i guess
04:26 - increase the readability
04:28 - right simply if we
04:30 - rather than one if we read true means it
04:33 - is more readable more understandable for
04:35 - us right means true or false
04:38 - so we can use
04:40 - directly trigger poles here right
04:43 - now see until c99 was in how we
04:47 - were using this bool using enum data
04:49 - type like this
04:51 - enum and here you can write down bool
04:54 - the name of your data type and here you
04:56 - can write down
04:57 - like false preview the list
05:00 - and semicolon then by default enum would
05:06 - associate this force with zero and this
05:08 - true with one now in your program you
05:10 - can write down false or true
05:13 - right
05:13 - because you have defined your own data
05:15 - type you using enum this is enumerated
05:17 - data type that we have discussed when
05:19 - you were discussing
05:21 - c language the link i'll put in this i
05:23 - button you can check out that video
05:25 - right but now in c99 they have
05:27 - introduced this bool and in c plus plus
05:30 - also we have this data type bool data
05:32 - type
05:32 - right so you can directly use this bool
05:35 - data type and we can use this in
05:37 - expression also suppose you are writing
05:40 - int
05:42 - and in x and y
05:44 - right and here i am writing in
05:47 - z
05:48 - and z is equal to x plus y plus true
05:53 - minus false
05:56 - this is also correct
05:58 - x means 10 y means 12 true means 1
06:01 - false means it would be implicitly
06:02 - converted into
06:04 - 0
06:05 - right so it means 10 plus 12 plus 1
06:08 - minus
06:09 - 0
06:10 - that is also fine in expression also you
06:12 - can directly write down true and false
06:14 - in conditional statement you can write
06:16 - down true or false right
06:18 - or if you want to rather than this like
06:20 - i am writing bool
06:22 - k is equal to
06:25 - 2n
06:27 - it means what it is also true
06:31 - means if
06:32 - this other than 0 anything any integer
06:35 - you will write that means true
06:38 - so it returns true
06:39 - if you write here 0 it means it is false
06:43 - right that is also fine
06:46 - so this is how ah this is what
06:48 - all about bool data type right there is
06:51 - not much more about this data type now
06:53 - next is voided type see and see the size
06:56 - of bool is one byte
06:59 - but sometimes you know it is also you
07:02 - can say implementation dependent
07:04 - implementation defined so sometimes in
07:06 - some compiler you can get
07:09 - other results then this one
07:12 - right but in my compiler on my machine
07:15 - it is taking one byte only so generally
07:17 - we say that that you know the size of
07:19 - this bool is one byte how you can
07:21 - find out in c out you can simply write
07:24 - like size of
07:26 - bool that's it it will give you the byte
07:28 - number byte one byte
07:30 - fine
07:31 - so this is all about bool data type now
07:34 - next is void data type see void means
07:38 - simply if i say then nothing
07:40 - generally we
07:43 - write this void
07:45 - use this word data type
07:47 - as a return type of function means if a
07:49 - function is not returning anything then
07:51 - we write something like this void
07:53 - suppose a function is add
07:56 - and it will we have something and it is
07:59 - not returning anything
08:01 - we don't have this return statement in
08:03 - this function we don't have this one
08:05 - means it is not returning anything so
08:07 - that's why we write down here void means
08:08 - nothing
08:09 - right
08:10 - second use of this void type is what if
08:13 - the function is not accepting any
08:14 - argument so we simply write here
08:17 - void
08:18 - it means it will not accept any argument
08:22 - so we write here the parameter list
08:23 - argument list is void third thing
08:27 - we can create a void pointer
08:30 - like void asterisk ptr
08:34 - means it is a generic pointer universal
08:36 - pointer you can typecast it
08:38 - according to your requirement see
08:41 - if i write int asterisk ptr
08:45 - it means this pointer would be
08:46 - containing address of a variable whose
08:48 - data type is
08:50 - integer
08:51 - this is a pointer to int if i write here
08:54 - float
08:55 - asterisk ptr
08:57 - means this pointer will contain address
08:59 - of a variable whose data type is float
09:02 - this is float pointer right but this is
09:04 - void
09:06 - so we do don't know the data type of the
09:08 - variable
09:09 - like
09:10 - which variable address we want to store
09:12 - in this pointer we don't know the data
09:14 - type of that variable is inter
09:16 - float or character or we don't know
09:19 - so according to our requirement if you i
09:20 - want to store address of a int variable
09:23 - i can typecast this pointer into in
09:25 - pointer if i want to store address of a
09:27 - float variable i can typecast it
09:30 - into float
09:32 - right
09:33 - on this word control so i have already
09:35 - uploaded a video the link of that video
09:37 - so you will find the side button you can
09:38 - check out that video right so this is
09:40 - generic pointer universal pointer you
09:41 - can type cast it according to your
09:43 - requirement right these three main uses
09:46 - of this void data type is there but we
09:48 - cannot use like see i am writing in x is
09:51 - equal to 10
09:53 - void strict ptr and in ptr is equal to
09:55 - address of x
09:58 - right in ptr i am assigning address of
10:00 - this x means this is x is integer type
10:02 - and if you want to
10:05 - dereference this point like how to do
10:08 - dereference this
10:09 - asterisk ptr and suppose e and dl
10:13 - it will give error
10:15 - because this this is not void pointer
10:17 - right and we are storing address over
10:19 - int
10:20 - data type into variable so first you
10:23 - have to type cast it you cannot
10:24 - dereference a void pointer
10:27 - right word means nothing means no memory
10:30 - would be allocated so when you are going
10:32 - to dereference
10:34 - it doesn't have any idea how many bytes
10:36 - still how many bytes it has to access
10:39 - the value
10:41 - right how many bytes the size of the
10:44 - time one only one byte value or the
10:46 - value is in four bytes so the value is
10:48 - in eight bytes
10:49 - it doesn't know so you have to specify
10:51 - so first type cast it how to type cast
10:53 - it you just have to write down like s
10:55 - trick how to type cast int asterisk and
10:59 - ptr
11:01 - now we have type casted it into end
11:03 - pointer
11:04 - now
11:06 - it means
11:07 - now pointer no like four bytes
11:10 - so it has to dereference the value of
11:12 - till four bytes starting address then
11:16 - the like starting address is thousand
11:18 - and thousand and one then thousand into
11:20 - till thousand and three till four bytes
11:22 - it has to access
11:24 - right
11:26 - so this is how you can type cast this
11:29 - word pointer
11:30 - if you want to store address of a float
11:33 - variable you just have to type cast into
11:35 - float so these are three main uses of
11:37 - this void type but we cannot
11:40 - declare something like this void and
11:42 - name of the variable a this would be
11:44 - incorrect because word is nothing
11:46 - no memory would be allocated to void so
11:48 - you cannot declare a variable of word
11:50 - airtime
11:52 - right
11:53 - this is incorrect how you can use this
11:55 - void type in three ways
11:57 - return type of a function
11:59 - word
12:00 - rather than if you don't want to pass
12:01 - any argument then you can write down
12:03 - void and you can declare a word pointer
12:05 - right but you cannot declare a variable
12:07 - of word data type right
12:10 - so i think this is all about bool and
12:13 - void data type let me just show you with
12:15 - the help of a program okay so we have
12:17 - this file bool underscore dt dot cpp
12:19 - right so now first of all we will
12:22 - take bull data type bool and we are
12:25 - taking b is equal to suppose i am taking
12:28 - true
12:30 - and simply we are printing c out
12:34 - b
12:35 - right
12:37 - that's it
12:39 - let me just run this and this if this
12:41 - will print one
12:43 - automatically it would be converted into
12:44 - interior type so the integer value and
12:47 - true is one right
12:49 - so if you write here false
12:54 - then it will give you 0
12:56 - right in expression also you can write
12:58 - down these thing like suppose i am right
13:00 - i am taking
13:02 - i am not taking this
13:03 - boo
13:05 - whole data type
13:12 - we are taking int
13:14 - x is equal to 10
13:16 - comma y
13:18 - suppose not
13:21 - next i am taking float y is equal to
13:24 - 12.5
13:26 - and next i am taking
13:32 - float
13:35 - z
13:36 - equal to
13:38 - true plus
13:40 - x
13:42 - plus
13:44 - false plus
13:46 - y
13:48 - and we are just
13:50 - printing
13:53 - c out z
13:57 - one more thing we are printing
13:59 - c out uh size of
14:04 - bool
14:06 - right
14:08 - so now let me just run this and show you
14:10 - see
14:11 - 23.5
14:13 - means 10 plus 12.5 22.5 one true but
14:18 - false is zero so in expression also you
14:20 - can use this in conditional statement
14:22 - you can use like if else statement right
14:25 - there also you can directly write down
14:27 - this one if suppose you are writing if
14:31 - and i'm writing here x
14:34 - less than y
14:37 - is equal to is equal to
14:39 - true
14:42 - simply
14:44 - c out
14:50 - and x
14:52 - is
14:53 - lesser
14:55 - right x less than y we are printing
14:57 - right
14:58 - and
15:03 - in else part
15:07 - c out
15:13 - y is lesser
15:18 - that's it
15:19 - right
15:20 - now
15:21 - in this
15:24 - let me just run this and show you see
15:27 - first of all the value and the size then
15:29 - x is lesser because x is 10 and y is
15:32 - 12.5 so x is less than it is printing it
15:35 - is true
15:36 - right
15:37 - now next thing is what so this is all
15:40 - about bool
15:41 - about void c if you want to declare a
15:45 - variable of type void void
15:49 - and x sub void suppose i am taking
15:53 - v
15:56 - it will
15:57 - show error see incomplete type is not
16:00 - allowed because void is considered as
16:02 - incomplete type you cannot do these kind
16:05 - of things
16:06 - in three ways you can use this yeah if
16:08 - you declare it as a pointer
16:11 - like this
16:13 - that is fine
16:15 - i am taking pointer name ptr
16:19 - semicolon
16:20 - right that is fine
16:23 - and suppose
16:26 - let me just uh comment out these things
16:31 - and we will just
16:33 - see what
16:34 - ptr
16:36 - equal to address of
16:39 - x
16:40 - right
16:41 - and in c out we are
16:44 - dereferencing it this is strict ptr
16:48 - end
16:50 - see it is showing red line means
16:53 - it if you run this it will give error
16:57 - word is not a pointer to object type you
16:59 - are dereferencing word pointer that is
17:01 - not allowed so you have to type cast it
17:03 - how to type cast
17:05 - int
17:06 - star
17:08 - because x is of into type now it will
17:11 - print 10. it is printing now 10. so you
17:14 - have to typecast it is generic pointer
17:17 - so same written type of function you can
17:19 - use as void or parameter list if there
17:21 - is nothing you can
17:22 - write down word there but you cannot
17:24 - write down you cannot declare a variable
17:27 - of y data type right so i think this is
17:29 - all about void and rule data type in c
17:31 - plus plus and see
17:32 - if you write something like this
17:36 - if i'm writing bool
17:38 - and i'm writing
17:40 - suppose
17:42 - p
17:43 - array type name i'm taking p is equal to
17:46 - 45
17:47 - and now i am printing
17:49 - this p
17:53 - just c out
17:55 - p
18:00 - see what it will give you
18:03 - 1
18:05 - in at the place of it is
18:08 - printing 1 because it is considering
18:10 - this 45 as true value other than 0 every
18:13 - value is true value
18:15 - right only zero is false so forty five
18:17 - is also if you print this it will print
18:19 - one that is true
18:20 - so i think that's it about boolean word
18:22 - data in c plus plus
18:24 - so i think we have covered all the
18:26 - points about void and wool data type if
18:29 - there is something missing you can i
18:30 - don't know write down that point in
18:32 - common comment section or if you have
18:33 - any doubt you can ask me in comment
18:35 - section right
18:36 - so in the from the next video most
18:38 - probably we are going to start control
18:39 - structure in c plus plus so i'll see you
18:41 - next video till then bye take care