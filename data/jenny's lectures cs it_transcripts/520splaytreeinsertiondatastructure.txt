00:00 - so in this video we will see insertion
00:02 - in split rings see in the previous video
00:04 - we have discussed what is splay tree
00:06 - advantages and drawbacks of spear trees
00:08 - and applications of splay trees and how
00:11 - splay trees are different from other
00:14 - balancing binary search trees so you can
00:17 - check out that video in the cyber turn
00:18 - right and in that video also we have
00:20 - discussed that how to perform searching
00:22 - operation in splay trees what is
00:24 - splaying operation right in this video
00:26 - we will see the insertion operation in
00:29 - splay trees right after that after this
00:31 - example we will see we will write down
00:34 - the code or you you can see we will
00:35 - write down the algorithm for insertion
00:37 - operation as well as for displaying
00:40 - operation means first of all you will
00:42 - discuss it with the help of an example
00:43 - you will create a splay tree by
00:46 - inserting these numbers and then we will
00:48 - write down the algorithm for insertion
00:50 - operation as well as
00:51 - splaying operation right now see as we
00:55 - have discussed in the previous video all
00:57 - the basic operations that we can perform
00:58 - in BST like search insert and delete
01:01 - those operations will be performed in
01:04 - splay tree and the processor will would
01:06 - be same as in BST the difference is what
01:08 - those operations are are going to be
01:12 - followed by one basic operation of splay
01:14 - tree that is splaying operation right
01:16 - now in this case also first of all you
01:18 - will insert the data and then we will
01:21 - loose playing splaying means the data we
01:24 - have inserted on that data on that
01:27 - element we are going to perform splaying
01:29 - operation means now we are going to make
01:32 - that inserted node the newly inserted
01:34 - node as the root of the tree right and
01:37 - why we are going to make that element
01:40 - the root of the tree that we have
01:41 - discussed in the previous video because
01:44 - it's it's because that advantage of the
01:47 - Splane tree is what because of this step
01:49 - only the most frequently exist elements
01:52 - you know move closer to the root so that
01:55 - we can easily or frick quickly we can
01:58 - access those elements right now first
02:02 - data you want to insert is 15 right so
02:05 - obviously this is a BST self-balancing
02:08 - bsts 8 is a self adjusted BST it is
02:11 - roughly balanced not strictly balanced
02:13 - really so first of all you will create
02:16 - an or and after that you will insert
02:17 - that thing in node we have what the data
02:19 - that is the value 15 plus the left
02:22 - pointer plus the right pointer I'm not
02:24 - here representing the node right and
02:27 - I'll just write down 15 the data of that
02:30 - node only right now initially there is
02:33 - nothing in the tree so what you will do
02:35 - we will insert 15 and we will create a
02:38 - node and we will simply insert the 15 in
02:42 - the tree and now you displaying explain
02:45 - on this data on the data on which you
02:48 - are going to perform the operation that
02:49 - is insertion operation so 15 is the data
02:51 - you want to insert and 15 is the root in
02:55 - splaying we will make this as a root but
02:57 - this is already root so no need to do
02:59 - anything right now next is what 10 now
03:03 - simple BST insertion first of all you
03:06 - will do compare with this one 10 is less
03:07 - than 15 so where you will insert here to
03:11 - the left of this 15 right now this is
03:14 - not done in splay tree now you do what
03:16 - splaying playing on this data the data
03:20 - you have inserted that is 10 means now
03:23 - we will make this 10 as the root of the
03:25 - tree how we are going to make this as a
03:27 - root of a root of the tree what is that
03:29 - playing operation check if the this the
03:34 - newly created node or this is what this
03:35 - the data on which you want to do splay
03:38 - operation is what having parent only and
03:40 - the parent of this is what root means
03:42 - this is not having any grandparent so
03:45 - this is what a zigg situation right now
03:48 - check out this is a left child or right
03:50 - child so this is a left child of this
03:52 - root so we will do it right rotation or
03:55 - you can say Zig rotation right this
03:57 - these rotations we have already
03:58 - discussed right rotation about this
04:03 - parent parent of this node you have
04:06 - inserted so right rotation means we will
04:09 - pull this 15 downward and 10 would go
04:11 - upwards so now this is the tree after
04:14 - insertion of this 10 splay tree right
04:17 - next is 17
04:19 - insert 17 industry say that BST
04:25 - insertion
04:26 - greater than 10 greater than 15 so here
04:28 - you will insert 17 but now you will do
04:32 - splaying operation on this 17 we will
04:34 - splay the 17 now check 17 is having
04:38 - parent as well as grandparent now this
04:41 - is what and 17 is to the right of its
04:44 - parent and 15 is also to the right of
04:46 - its parent means on the same side both
04:49 - this node and parent are on the same
04:53 - side right either maybe left or right
04:55 - but here these are on the right side so
04:57 - this is what a situation of zigzag
04:59 - situation right now
05:02 - here first of all you will do what to
05:05 - left rotation you need to do to make the
05:09 - 17 as a root so first rotation would be
05:12 - about this grandparent next rotation
05:16 - would be about this parent see don't get
05:19 - confused that first rotation would be
05:21 - about this parent and then this no in
05:22 - this situation first rotation would be
05:24 - about this grandparent of the newly
05:27 - inserted node so now left rotation means
05:31 - we will pull this downward and 15 would
05:33 - go upward right after first left
05:39 - rotation again left rotation around this
05:43 - 15 of 17 would go upward 15 and here we
05:46 - have n now this is the tree after
05:49 - insertion of 17 now see this you can say
05:52 - a zigzag situation or a zigzag rotation
05:56 - sorry right somewhere it is written that
05:59 - the left rotation we have already
06:01 - discussed is egg rotation the right is
06:03 - Zig rotation right
06:04 - but somewhere both the cases are taken
06:07 - into one situation that is zig zag
06:10 - situation so it is what zig zag but you
06:12 - can say left rotation situation fine
06:15 - it's up to you how you will write either
06:18 - a zig zag situation or a zig zag left
06:21 - left rotation both are correct right now
06:24 - this is the tree now here you will
06:26 - insert 7 how you will insert 7 compare
06:29 - with the 70 in less than 17 less than 15
06:31 - less than 10 so now here we will insert
06:34 - 7 now splay the tree so display this
06:40 - seven right because you need to make the
06:43 - seven as a root of the tree
06:44 - now check seven is having parent as well
06:47 - as grandparent and seven is left child
06:50 - of parent and this parent of seven is
06:53 - also left child of its parent right both
06:57 - are on the same side so it is a zigzag
07:00 - situation here first of all two right
07:02 - rotation you need to do if these are
07:05 - left child means right rotation here
07:07 - these are right child so means a left
07:09 - rotation so two right rotation you need
07:12 - to do now first right rotation would be
07:15 - about this this one fifteen grandparent
07:19 - of the seven so now the tree would be
07:21 - seventeen you will pull this fifteen
07:24 - downward and ten would go upward so
07:27 - after first a right rotation tree
07:28 - something like this now again a right
07:31 - rotation around about this in so will
07:35 - right rotate to this means ten would go
07:37 - downward and seven would go upward so
07:39 - now here we have seven ten this side and
07:44 - this side fifteen but we are not done
07:47 - yet because seven is still not root now
07:49 - check which case you need to apply now
07:51 - seven is having the parent of seven is
07:54 - root node means this is not having any
07:57 - grandparent now so this is what I was
07:59 - igg situation now check it is left cell
08:02 - or right child of the root it is left
08:03 - child of the root so do right rotation
08:06 - right rotation about this parent so
08:09 - right rotation means we will pull the
08:10 - seven downwards
08:11 - sorry 17 downward and seven would go
08:14 - upward so now here we have seventeen now
08:18 - see after pulling the seven downward now
08:21 - seven is here now the right child of
08:24 - seven is 10 the right child of seven is
08:26 - where this 10 would go the right child
08:28 - is now 17 so it would go to the left of
08:31 - ten and fifteen would be as a teaser as
08:34 - the and the right child of the stem now
08:37 - this is the final tree after insertion
08:39 - of seven so this is what you can see a
08:42 - physic situation was a groat asian now
08:45 - we will insert 13 compared with this one
08:47 - simple BST insertion first of all you
08:51 - will need to perform greater than say
08:53 - less than 17 greater than 10 less than
08:56 - 15 so here you can insert 13 now it's
09:00 - playing on this elements play the
09:03 - studying now see 13 is having parent as
09:08 - well as grandparent but this is a zigzag
09:11 - situation why so because this and this
09:13 - both are in opposite direction one is in
09:17 - left direction one is in right direction
09:19 - this is not this case that both are in
09:21 - same direction so it is what a zigzag
09:24 - situation now you need to check out
09:27 - which rotation you need to apply a left
09:28 - or right first of all see this is the
09:32 - node this is parent or you can say this
09:34 - is grandparent G you can say right now
09:37 - 13 is to the left of 15 first of all if
09:42 - this is the case that zigzag situation
09:45 - is there then first we will perform the
09:49 - rotation on the parent only not the
09:51 - grandparent here we perform rotation on
09:53 - grandparent then parent right don't get
09:55 - confused in this scenario right now
09:59 - first over will perform rotation on the
10:01 - parent now this is what left child off
10:04 - parent so we will do first of all right
10:07 - rotation on this parent now the tree
10:09 - would be something like this
10:11 - right after first right rotation now we
10:14 - will do left rotation right because it
10:17 - is a zigzag situation left rotation on
10:19 - grandparent on G so now the tree would
10:23 - be something like this left rotation
10:25 - means we will pull this 10 downward so
10:27 - 13 would go upwards so now here we go 13
10:30 - here we have 10 and here we have 15 but
10:33 - we are not done yet because 13 is still
10:36 - not root node because we have to make
10:39 - this 13 as root mode because we are
10:41 - going to perform insertion of 13 right
10:43 - so now 13 would be root more so now what
10:47 - you will do see now 13 is having parent
10:49 - as well as grandparent now it is also a
10:52 - zigzag situation right so now because
10:56 - both are in opposite direction one is
10:58 - left one is right so 13 is to the left
11:00 - of parent so first of all right rotation
11:02 - on parent right Zig rotation so now that
11:05 - we would be something like
11:06 - we will rotate it something like this so
11:08 - 13 would go upward 17 would go downward
11:11 - and here we have 10 now see 15 is to the
11:14 - right of 13 so it will go right of 13
11:16 - and left of 15 but we are not done yet
11:20 - now zeg rotation means now 13 is to the
11:23 - right of 7 now
11:26 - zeg rotation means left rotation on
11:28 - grandparent so now the tree would be
11:31 - something like this see here the left
11:33 - side of 13 is 10 to the left of but
11:36 - today it will go to the right of this 7
11:38 - right so now this is the tree after
11:41 - insertion of 13 now insert 16 industry
11:45 - where you can insert 16 see greater than
11:48 - 13 less than 17 and greater than 16 now
11:52 - here you can insert 16 right now see
11:55 - which rotation you need to do here we
11:58 - have the 16 is having parent as well as
12:01 - grandparent now it is the right child of
12:03 - this one and this is the left child of
12:05 - this one so both are in opposite
12:07 - direction so this is also a zigzag
12:08 - situation or here you can say this is
12:10 - zigzag situation both are correct right
12:13 - now see 16 is to the right of this 15 so
12:17 - we will do first of all left rotation on
12:20 - parent right so now the tree would be
12:24 - something like this left rotation on
12:27 - parent so 16 will go upward and here we
12:29 - go to 15 now we do right rotation on 17
12:34 - on the grandparent so now the tree would
12:37 - be something like this but we are not
12:39 - done yet because 16 is still not the
12:41 - root node we have to make it root move
12:43 - not check 16 is having only parent not
12:46 - grandparents because 16th parent is root
12:48 - node now this is the situation of only
12:50 - zyg rotation right now here you need to
12:53 - check which left or right rotation so 16
12:55 - is right of 13 so we you need to do left
12:58 - rotation but you can see here zig left
13:01 - rotation or you can say a seg rotation
13:02 - so now after this rotation the tree
13:05 - would be see here the 16 is left child
13:09 - of 16 is 15 means left child of 16 it
13:12 - will go to the left of 16 but here we
13:14 - have 13 so it will go to the right of
13:15 - now this 13 that is so now this is the
13:18 - final tree I guess we are
13:20 - left with 10 see here to the right of 7
13:23 - we have n so here you will write 10 to
13:26 - the right of 7 we have 10 and here also
13:29 - to the right of 7 year 10 so this is the
13:32 - final tray now after inserting of this
13:34 - data so now I hope you got how to do
13:37 - insertion splay trees now we will write
13:39 - down the algorithm for insertion
13:42 - operation right and then we'll write
13:44 - down algorithm for splaying operation
13:46 - fine so now we are going to perform
13:48 - insert operation on the tree T and n is
13:52 - what and is the number or the node I
13:55 - want to insert see here n is not the
13:58 - data that is 15 here n is what the
14:01 - complete node in which data part is 15
14:04 - here we have left pointer here we have
14:05 - right pointer but I am NOT writing this
14:07 - thing simply n means this node you need
14:10 - to take care of this thing right here
14:12 - suppose now I want to insert after the
14:15 - 16 I want to insert 14 so same the BST
14:19 - insertion process and we are going to
14:20 - follow first of all we are comparing we
14:22 - will compare with this root if this is
14:25 - less than root then we will go towards
14:26 - this one the left side and like this if
14:29 - greater than then we will go towards the
14:30 - right subtree right so this thing you
14:33 - will write down here this is same as the
14:35 - BST insertion so suppose I am taking on
14:38 - m variable and there I am storing the
14:43 - root address right T dot root something
14:46 - like this you can write and I'm taking
14:49 - another variable Y and there I am
14:51 - storing now why you are taking this Y
14:53 - this thing you will get cleared further
14:57 - now see now we will write down a while
15:01 - loop while temp not equal to null if you
15:07 - write down the algorithm and simply you
15:08 - can write down this thing right temp not
15:10 - equal to null see in till 10 we are
15:14 - going to move either left or right it
15:17 - depends on the value of this the value
15:21 - you want to insert right so first of all
15:24 - you will set Y is equal to 10 so now I
15:28 - will write if the data you want to
15:30 - insert that is n of data
15:33 - and I you told I have told you this is a
15:35 - node and the data part is having 14 here
15:39 - we have left pointer right pointer now
15:41 - this this is having null this is also
15:43 - not so n of data is less than temp of
15:48 - data right now see here we have temp
15:51 - because temp is equal to T of root root
15:53 - is this one so temp is a variable which
15:55 - is containing address of this root temp
15:58 - is not containing 16 temp is a pointer
16:01 - variable see here I have already told
16:02 - you if I am taking n this is a node temp
16:05 - is what I am taking a complete or you
16:07 - can say pointer variable pointer to node
16:09 - Y is also containing address of these
16:12 - nodes right if the 14 is C temp of data
16:17 - is 16 14 is less than so we will go to
16:19 - the left right so now temper becomes
16:23 - temp of left whatever the value in temp
16:27 - of left that address would be stored in
16:29 - temp right so now you can say temp is
16:32 - pointing to here right and now C else
16:38 - else you will do what temp is equal to
16:42 - temp right else we will go to the right
16:45 - side fine once you reach where you want
16:49 - to insert the data suppose once you here
16:51 - I want to insert 14 so once you reach
16:53 - here so now you you'll write down what
16:57 - here after this while loop after this
16:59 - while loop you will write this n dot
17:02 - parent is equal to Y now see why you we
17:08 - are writing this thing initially temp is
17:10 - this one right so now while temp not
17:13 - equal to null amp is not null because it
17:15 - is containing address of root node Y is
17:17 - equal to M now see Y is equal to temp
17:20 - now tempo is this one so Y is also now
17:23 - this one Y is also containing address of
17:24 - the root node right now comparing of
17:27 - data is 1414 is less than temp of data
17:29 - yes now temp is equal to temp left so
17:31 - temp becomes this one right now again
17:36 - while temp not non yes temp is not null
17:38 - temp is containing address of this node
17:40 - temp is not null now again Y is equal to
17:42 - M now Y becomes here now why is this one
17:46 - right now temp is equal to temp left so
17:51 - now see check n of data now n of data is
17:56 - about 14 less than temp of data temp is
17:59 - this one temp of data is 13 but this is
18:02 - not true
18:03 - so we will go to the else part that is
18:04 - temp is equal to temp right now temp is
18:07 - this one temp right means this one now
18:10 - temp is a containing address of this
18:13 - note that is 15 now again check member
18:15 - is not not yes now Y is equal to temp
18:17 - now Y becomes temp that is why is this
18:20 - one so now check if n of data animal
18:23 - data is 14 14 is less than temp of date
18:25 - and our temp is this one temp of data is
18:27 - 15 yes the condition is true
18:29 - so temp is equal to temp left now temp
18:32 - is equal to temp left so here this node
18:35 - is having M depth is equal to not
18:38 - because this is not having any left or
18:39 - right child so now temp is pointing to
18:42 - null so now you can say tempis here temp
18:45 - is null right because this is not having
18:48 - any left child or any right shine
18:51 - so now temp is now now again check the
18:53 - condition temp is not null but this
18:55 - condition is now more true because temp
18:56 - is null so we are going out from we are
18:59 - going to exit from this while loop and
19:01 - the after this while loop we have the
19:03 - situation right so now you have would
19:06 - the location where you can insert the 14
19:10 - it means 14 would be child of this 15
19:14 - this is for sure either left or right
19:16 - child and so that is why I'm tracking
19:19 - this Y so n of parent and it's 14 parent
19:23 - of this 14 would be Y C Y is right now
19:28 - containing address of this node that is
19:30 - 15 node and that is for sure because 15
19:34 - would be parent of this 14 right so now
19:38 - Y is what parent of this 14 if still Y
19:43 - is equal to null means the parent of 10
19:48 - is null so n is not having any parent
19:52 - here you can say root would be that
19:55 - element which is having no parent so no
19:59 - need to do any
20:00 - we will simply return and we will not do
20:03 - any splaying operation right so here you
20:05 - will check if still y is equal to is
20:07 - equal to null after checking this then
20:10 - we will set T Oh fruit would be and
20:14 - right only one element we have that is
20:18 - this one that is this case 15 case
20:21 - initially that he was empty so we will
20:23 - insert 15 so 15 would be root right no
20:26 - splaying would be done if Y is not null
20:28 - now else if we're to insert this 14 2 to
20:34 - the left or to the right where you need
20:36 - to check now we will check hence if this
20:39 - n of data is less than Y is this one y
20:44 - of data so this n would be the left
20:47 - child of this Y so here you will set in
20:52 - the left pointer of Y we will store the
20:55 - address of the newly created node that
20:57 - is n right hence Y of right is equal to
21:05 - n now insertion is done and now we will
21:07 - call what display on this tree on which
21:14 - element on the data you have inserted on
21:17 - the node you have inserted that is n see
21:20 - here the n is what this address address
21:23 - is suppose hundreds so n is what the
21:25 - address would in the Y of left means Y
21:27 - is also address Y of left is this one
21:30 - suppose this is y y is data part of Y is
21:34 - 15 here the left so in the left part we
21:37 - will store 100 right so here we are you
21:41 - know considering it as a address not the
21:44 - value when you if you want to access
21:46 - then you need to access something like
21:47 - this n of data right so here also you
21:51 - can write this error or something like
21:53 - this fine
21:54 - now we will see the algorithm for this
21:56 - splay operation I'm going to rub this
21:58 - one and now we will insert see here we
22:01 - have inserted this 14 after this
22:04 - algorithm to the left child of this 15
22:07 - now we will do splaying on this 14
22:10 - because 14 you need to make this 14 as a
22:12 - root of the tree now
22:14 - so now this is the pre after insertion
22:16 - of this 14 now we'll lose play on this
22:18 - 14 right so we will do the algorithm for
22:21 - this play playing of the string on the N
22:23 - and node is what 14 right now we will
22:27 - check all the cases of us play suppose
22:30 - this 14 would be the root initially if
22:33 - suppose we have inserted 14 only one
22:35 - element then 14 would be the root so no
22:37 - need to do anything we will do is
22:39 - playing telling this 14 becomes root so
22:43 - we will write down a loop while a
22:47 - no-parent
22:48 - is not null because if the parent of
22:53 - this node is null it means that would be
22:55 - the root node because root is 2 root is
22:57 - not having any parent right what here
23:00 - you can check while you can write way
23:02 - while n is not root node till then we
23:05 - are going to do some splain now what you
23:08 - will do now we will check if if the
23:13 - parent of this n is root node in that
23:16 - case either you will do zig-zag rotation
23:20 - means only one left or only one right
23:22 - rotation that case may be there right so
23:26 - now here you will write what if n of
23:28 - parent is equal to is equal to T of root
23:36 - means both are same right the parent of
23:39 - n is rude
23:41 - suppose taking this example the parent
23:44 - of 13 is root so here you will do what
23:46 - only one right rotation but if this is
23:48 - the case then we will do only left a
23:50 - rotation left or right rotation on this
23:53 - one parent or you can so on root of the
23:55 - tree right so now here also we will
23:58 - check now if n is equal to is equal to n
24:02 - of parent and enough parent means this
24:06 - one so we will check whether n is left
24:08 - side or right side according to that
24:10 - only we will decide we will do left
24:11 - rotation or right rotation so now if
24:13 - this is the left child suppose it is
24:16 - left then we will do one right rotation
24:21 - so here you will write right rotation on
24:24 - the tree on which on the
24:27 - root or you can say on the parent of
24:30 - this n so here you can write you can
24:33 - pass parent of n else else obviously we
24:38 - will do left rotation now this is one
24:40 - case second you said this is one case
24:44 - there's a second case now third case is
24:46 - having four sub cases that is if the N
24:50 - is having parent as well as grandparent
24:52 - now what you will write here C so now
24:56 - this this part is within this if now we
24:59 - have else for this if right else we have
25:03 - parent as well as grandparent so suppose
25:05 - I am taking P is equal to n of parent
25:11 - and G is equal to P of parent so P is
25:16 - parent of n G's grandparent of 10 right
25:19 - so here you can say n is this one parent
25:23 - is this one and grandparent is this one
25:25 - so G would be this one right now we will
25:27 - check the four cases if now here both N
25:31 - and P are left child means suppose here
25:33 - I'm taking seven is n so P parent four
25:36 - seven seven is this one grandparent
25:38 - parent is this one so both have left
25:40 - child it means we will do two right
25:42 - rotation first right rotation on 16 then
25:44 - right rotation on thirteen right so here
25:47 - you will do or simply here you can write
25:49 - if you will not write at this condition
25:51 - in elbow you can write in your simple
25:53 - English language if both N and P are
25:55 - left child or this is the same condition
25:58 - C n of parent and is this one n of
26:01 - parent is this one parent of left means
26:03 - this one only so n would be the left P
26:06 - of parent and left would be P so here
26:10 - you will do two right rotation first
26:12 - right rotation would be on G and second
26:16 - right rotation would be on P this thing
26:20 - you need to take care first of all their
26:22 - own grandparent then parent now else if
26:26 - both and NPR right child that could also
26:29 - be a case so now here you can write in
26:31 - this case we will do two left rotations
26:36 - first left rotation would be on grandpa
26:40 - and then on Baron now third case maybe
26:44 - now suppose I'm taking this case now n
26:47 - is what left child of P but P is what
26:50 - right child of G so here what you will
26:53 - do it is a zigzag situation these are
26:56 - these two are zigzag situation fine this
26:59 - is simply Zig situation right now here
27:03 - first of all we will do right rotation
27:06 - on parent because this n is what left
27:09 - child of this one so right rotation on
27:11 - parent right and after that we will do
27:14 - left rotation on grandparent so see now
27:17 - after the rotation the tree would be
27:19 - something like this now again left
27:22 - rotation you can say zag rotation on
27:24 - this grandparent so now the tree would
27:26 - be thirteen would go downward fourteen
27:29 - would go upward right but still we are
27:31 - not done because obviously I am taking
27:34 - this in while loop so end of parent now
27:38 - n is this one and of parent is no
27:40 - Tinnell so again we are going to follow
27:41 - steps
27:42 - whichever if condition is true that
27:44 - condition we are going to follow now
27:46 - here what you will write else if n is
27:50 - the left child and parent is what the
27:55 - right child then first we will do here
28:01 - right rotation on parent then we will do
28:08 - left rotation on grandparent 1g right
28:15 - hence forth cases only left cases what
28:19 - this n is what the right child and
28:22 - parent is what left child so in that
28:25 - case no need to write down that
28:27 - condition simply first of all we will do
28:28 - left rotation on parent then right
28:31 - rotation on grandparent opposite to this
28:33 - case so this is the elbow force plate
28:38 - now here see this is not yet done now
28:40 - again the while loop we are we are
28:42 - writing these in while loop so while n
28:44 - of parent a knows not now I know parent
28:46 - is not null so again check if a
28:49 - no-parent
28:49 - ut-oh fruit yes and of parent is now
28:52 - root yes so now we will enter into this
28:56 - if condition not in else condition now
28:58 - we will check if this is a left or right
29:00 - child it is left child right so we will
29:03 - do right rotation on end of parent and
29:06 - no parent is this one and here we will
29:07 - do right rotation right Mason this is a
29:10 - zigg situation so after right rotation
29:13 - the tree would be finally would be here
29:15 - to the right of 14 we have 15 so it will
29:18 - go to the right of 14 and to the left of
29:20 - 16 so here we have 15 so this is now the
29:25 - final tree after insertion of this case
29:27 - now see here also the right rotation and
29:30 - this left rotation are also function so
29:33 - you need to write down coding for this
29:35 - right rotation as well as for left
29:36 - rotation so let us write down the steps
29:39 - for the left hand right rotations as
29:41 - well now see let us take example of this
29:44 - right rotation right rotation of T and n
29:46 - of parent will be passed so in this case
29:48 - suppose I am taking this scenario end of
29:50 - parent is 16 so the address of 16 will
29:53 - be passed and Here I am receiving that
29:54 - addressing X right
29:56 - that is a pointer variable it is not
29:58 - simple variable a pointer variable you
30:00 - need to take care of this thing fine now
30:02 - this is X right now what you will do now
30:09 - I am taking this also because this is
30:10 - what n right this 14 I want to make the
30:15 - root node so we have to store address of
30:18 - this also so now this is what X of left
30:22 - right X of left is address of this 14 so
30:26 - you can store that thing in a another
30:28 - variable that is why Y is equal to X of
30:30 - left so Y is a pointer variable which is
30:33 - containing the address of 14 so this is
30:35 - y now how to do right rotation now see
30:39 - steps are after right rotation see you
30:43 - can check the 14 right child is 15 now
30:47 - 15 become left child of 16 means this 15
30:52 - become left child of X right now I'm
30:58 - writing this step so how you can write
31:00 - down this thing see X is this one
31:03 - right so X of left should contain should
31:10 - contain Y of right yes you can see here
31:17 - X of left containing Y of Y Oh fried
31:19 - that is 15 now next what you need to do
31:22 - now see we have break broken this link
31:26 - right so now here X of left means X of
31:32 - left is now containing this one address
31:35 - off Y of right sorry we have broken this
31:39 - link note this now we have to set this
31:43 - link right means how we will set this
31:47 - link now the right of 14 see the right
31:51 - of 14 would be containing address of X
31:55 - so here X we will store in Y of right
32:01 - and we will return we can return Y right
32:05 - address of this Y node C these are Y and
32:08 - X these are pointer variables so don't
32:10 - get confused I am taking these as a
32:12 - variable so I'm not saying that this is
32:13 - a correct I'm writing a correct program
32:16 - you need to take care of this thing
32:18 - right now how to do left rotation how to
32:21 - write down steps of left rotation see
32:23 - here you need to take care
32:25 - first of all you need to check this link
32:27 - if you write down this line first rather
32:30 - than this one then see Y of right is
32:33 - equal to X means Y of right is equal to
32:36 - X so this is the link and you have
32:39 - broken this link right so now from where
32:42 - you can get this link of 15 so first of
32:44 - all set this link after that second this
32:47 - link you need to take care of this thing
32:48 - also
32:48 - now what about left rotation suppose
32:50 - here I am going on to do left rotation
32:52 - on this 14 right I won't display 16
32:56 - right 16 is right child so I want to do
32:59 - left rotation so after left rotation the
33:01 - tree would be something like this see
33:06 - the left child of the 16 left child of
33:08 - 16 and it would become the right child
33:10 - of now the 14 so I guess you can easily
33:13 - write down this encoding first of all
33:15 - set the sling
33:16 - after that you can set this link the
33:19 - left side of the 16 so now same here X
33:23 - is this one we are going to pass this 14
33:26 - address because we are going to do left
33:28 - rotation on this thing now we will set
33:30 - first of all why Y suppose Y is 16 that
33:33 - and that is why I am taking left
33:35 - rotation
33:36 - I won't display 16 so now we will set Y
33:38 - is equal to X off right right now we
33:43 - will set the link for this y of this
33:46 - left child so now Y off left now become
33:52 - the 15 become now right child of 14 that
33:55 - is right child of X so X off right and
33:59 - now simply you can set what Y of left
34:03 - would be X and you can return Y see
34:10 - these are pointer variables these are
34:12 - going to return address of these nodes
34:14 - not value of the nodes right so this is
34:17 - all about insertion in splay trees in
34:19 - the next video we will discuss how to do
34:21 - deletion in Spade rays well so in the
34:23 - next video till then bye-bye take