00:00 - in this series of da lectures today we
00:02 - will see how to write an algorithm
00:04 - i have already discussed what is
00:05 - algorithm how algorithm is different
00:07 - from program
00:09 - and some properties of algorithm right
00:12 - so today in this video we will see with
00:13 - help of two example
00:14 - how to write an algorithm right but
00:17 - before proceeding i just want to tell
00:19 - you one thing
00:19 - for those who are interested in
00:21 - competitive programming an academy in
00:23 - collaboration with code chef
00:25 - has started a course to learn
00:27 - competitive programming
00:29 - there you can watch live classes but if
00:31 - you have missed any live class then it's
00:33 - okay you can also watch their
00:35 - recorded sessions and the top educators
00:38 - will teach you
00:40 - and these educators are already toppers
00:42 - of acm icpc
00:44 - i hope those who are interested in
00:46 - competitive programming they know
00:48 - what is icpc right and they are also
00:51 - working in
00:51 - top mncs like google flipkart and they
00:55 - are going to teach you
00:56 - all the important topics of competitive
00:58 - programming
00:59 - means the topics from which many
01:01 - questions are generally asked in
01:03 - competitive programming
01:04 - like string analysis segment trees
01:07 - dynamic programming
01:08 - greedy algorithm these kind of things
01:11 - right and with the theoretical part
01:14 - they'll also
01:15 - show you in a proper lecture like how to
01:17 - solve a particular type of problem like
01:19 - how to solve this kind of
01:20 - dynamic programming problem if you like
01:23 - their free classes then you can go for
01:25 - their paid
01:26 - subscription there they you will get a
01:28 - proper structured course
01:30 - so this is the pricing detail and if
01:33 - you'll
01:34 - use my code then you will get 10
01:36 - discount my code is
01:38 - jenny 10 and after purchasing their paid
01:40 - subscription you can also see the
01:42 - upcoming lectures like
01:43 - on what date and on at what time the
01:46 - next class will be conducted
01:49 - so if you like it you can go for it all
01:51 - the details and the link of
01:53 - this course i will give you in the
01:54 - description box of this video you can go
01:56 - and check out there
01:57 - so now let us take one example i am
01:59 - going to take simple example
02:01 - sum of two numbers right half
02:04 - the processor is what like you need to
02:06 - take two numbers input of two numbers
02:09 - then add two numbers say plus b then
02:11 - print the sum
02:12 - right these are the steps so algorithm
02:14 - is what
02:15 - obviously these are sequence of
02:17 - instruction or sequence of steps to
02:19 - solve a particular type of
02:21 - problem right now how to write an
02:23 - algorithm
02:24 - see generally we write out there is no
02:27 - standard rule for writing algorithm like
02:30 - you have to follow these rules only you
02:31 - have to write
02:32 - this type only that thing also will
02:34 - discuss so first
02:36 - thing is generally we write numbering of
02:38 - each instruction or each
02:40 - step like first is step one
02:44 - and in step one we write what start
02:48 - right then step two now for adding two
02:51 - numbers
02:52 - you need two numbers right so you need
02:55 - input of two numbers so here you can
02:58 - write
02:59 - read
03:02 - a and b or you can write
03:05 - input two numbers a
03:09 - and b or you can write enter a
03:12 - b yeah enter num1 num2 it's up to you
03:16 - right but see here i am writing either
03:19 - read or input or enter
03:21 - but whatever i am writing you are able
03:23 - to understand right that is the
03:25 - main thing each instruction should be
03:28 - clear
03:28 - and unambiguous it's not like that i'm
03:31 - simply writing
03:32 - read now this is what
03:35 - we are not able to understand it is
03:38 - ambiguous statement
03:39 - but if i am writing read a and b it
03:42 - means what
03:42 - i am reading two numbers i am inputting
03:44 - two numbers
03:46 - fine now next step
03:51 - now we need to process on these inputs
03:53 - process is what
03:54 - you need to calculate sum now in step
03:58 - four what you will do just you will
04:01 - print
04:02 - some you can all write here print
04:05 - sum and step five is what
04:09 - stop or here you can also write end so
04:12 - this is simple example
04:14 - now here you can also write something
04:15 - like this the symbol is equal to so here
04:17 - you can also write
04:18 - like this in algorithm you can also
04:20 - write like this
04:22 - this is the same i mean the meaning is
04:24 - same sum of a plus b
04:26 - and that value would be assigned to sum
04:29 - now if you will say you haven't i
04:31 - haven't declared a b
04:32 - or sum so when you write algorithm then
04:35 - no need to declare any variables but
04:38 - if you want to declare you can also
04:39 - write here after start
04:41 - declare variable a b and sum that is
04:44 - also fine
04:45 - that is why i have already told you that
04:47 - there is no standard
04:48 - standard rule for writing algorithm
04:51 - right
04:51 - if you are not declaring these variables
04:53 - that is also fine
04:55 - here you are writing print sum here you
04:57 - can write output
04:58 - sum that is also fine
05:01 - but whatever you you are you are going
05:03 - to written that should be understandable
05:05 - that each instruction should be very
05:07 - clear
05:08 - and unambiguous that is the main thing
05:12 - this is a simple example now let me take
05:14 - one more example
05:15 - like suppose if you want to write an
05:17 - algorithm for finding out a largest
05:19 - among three numbers
05:21 - then here obviously you will need if
05:23 - else statements
05:25 - so first is same you will write step one
05:28 - and
05:28 - start step two
05:33 - three numbers you need right so you can
05:36 - write
05:37 - here read a b c
05:41 - fine or you can write enter abc or you
05:43 - can write input
05:44 - abc now step third is
05:49 - now you need to check which one is
05:51 - largest so
05:52 - how can you check like if we write if
05:56 - a greater than b then
06:01 - here also we'll check a greater than b
06:04 - again if
06:05 - a greater than c means largest
06:08 - is what a so here you can write
06:12 - print a is largest
06:17 - right else print
06:21 - c is largest i hope you are getting why
06:24 - i am writing c is largest
06:25 - right now if else for this if
06:29 - else will check if
06:34 - b greater than c then you will print
06:39 - b is largest
06:42 - else print
06:45 - c is largest and now it's done
06:49 - in step four you can write stop or end
06:52 - this is one way of writing algorithm for
06:55 - finding
06:56 - largest number there are multiple ways
06:59 - second way maybe i'm writing step one
07:02 - same start in step two
07:06 - you have to read input if there is any
07:09 - input in algorithm
07:10 - same properties we have seen there can
07:12 - be zero input or more than
07:14 - zero inputs like one two three so here
07:16 - we have three inputs
07:17 - so you can write read a
07:20 - b c or num1 num two num3 up to you these
07:24 - are
07:24 - variables name of variables in step
07:27 - three i can write
07:28 - if a greater than b see in one step only
07:31 - i have written
07:33 - all these but here you can write down in
07:35 - different different steps
07:37 - so what you can do suppose i'm writing
07:39 - if
07:40 - a greater than b then
07:46 - go to step 4 like next step
07:50 - otherwise see when you are writing
07:54 - algorithm then at place of
07:55 - else you can also write otherwise
07:58 - go to step 5 now step 4 is what
08:03 - in step 4 i am writing this condition i
08:06 - am checking this condition
08:07 - if a is greater than c
08:12 - then print
08:16 - a is largest
08:20 - it's okay you can write then if you
08:22 - don't write then then
08:24 - it then it's also fine ok otherwise
08:32 - print c is largest
08:36 - right and step 5 is what
08:39 - this condition i am writing in step 5
08:42 - if b greater than c then
08:48 - print b is largest
08:52 - otherwise
08:56 - print c is largest
09:00 - and next step step six here you can
09:03 - write stop or
09:04 - end so this is how you can write
09:07 - algorithm and algorithm is what it is
09:10 - independent of any programming language
09:12 - simple natural in natural language or
09:14 - you can say in english language you will
09:17 - write down algorithm and you can
09:18 - implement the algorithm in
09:20 - any programming language it doesn't
09:22 - matter that if you will write this type
09:24 - of algorithm then you can implement in c
09:26 - always c only right and if you write
09:29 - this kind of algorithm you can implement
09:31 - it in in
09:32 - java only like the same example if you
09:34 - want to prepare t then steps are what
09:36 - you will add some water in a pan put it
09:39 - on flame add tea leaves
09:40 - sugar milk and then boil and your tea is
09:44 - ready
09:45 - now it's it doesn't matter that you are
09:48 - preparing tea on
09:49 - gas stove or on chula or on
09:52 - induction or on heater right
09:55 - obviously steps would be same so steps
09:58 - would be same
09:59 - it doesn't matter you are implementing
10:01 - this in c language
10:03 - java language python or dot net or in
10:06 - any other language
10:07 - but when you are writing algorithm you
10:08 - have to follow the properties
10:11 - input there should be one output input
10:13 - can be zero or more
10:15 - input output should be one and every
10:18 - statement would be clear
10:19 - have one meaning unambiguous
10:22 - there should be finiteness means finite
10:25 - step should be there in algorithm
10:27 - all these properties we have already
10:28 - discussed so i hope you got how to write
10:30 - an algorithm
10:31 - if you want to write any loop like in
10:33 - loop what you need to do
10:35 - within that loop whatever you will write
10:37 - those statements would be repeated right
10:40 - so you can write what simple repeat step
10:44 - next step like suppose here in this step
10:47 - i am writing
10:50 - this is step suppose third and i want to
10:53 - repeat next
10:54 - step so you can write repeat step
10:57 - four until
11:00 - the condition here you can write
11:02 - condition means no need to write down
11:04 - brackets just write down condition
11:06 - and next step is 4 you can whatever you
11:08 - want to repeat
11:09 - you can write down here obviously
11:11 - whatever you will written in the loops
11:13 - those in those
11:14 - brackets those statements will be
11:16 - repeated till that condition you
11:19 - give that is true right so same repeat
11:22 - it you can also write this
11:24 - a simple word repeat so that's it for
11:26 - this video but if you want me to make
11:28 - one more video like
11:29 - in algorithm how to write for loop while
11:31 - loop or do value then you can tell me in
11:33 - the comment box i'll
11:34 - upload one more video right with some
11:37 - more example two or three more examples
11:39 - right so now i'll see in the next video
11:41 - till then bye take care