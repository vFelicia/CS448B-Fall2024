00:00 - in the series of learning programming in
00:01 - c in previous lecture i have discussed
00:03 - character data type means we are done
00:05 - with all the data types we have
00:06 - discussed all data types
00:08 - now from this lecture i am going to
00:09 - start operators in c we will be
00:11 - discussing every operator every type of
00:13 - operator in detail
00:14 - with proper examples or you can say with
00:16 - programs like i'll show you how to use
00:18 - that operator when to use that operator
00:20 - and
00:20 - in programs i'll show you and what you
00:22 - will get output
00:24 - right what output you will get if you
00:26 - are using that operator
00:27 - so in this video i'm going to start with
00:30 - basics like what is operator and um
00:32 - how to classify operators means
00:34 - operators can be classified into
00:35 - you know based on two categories like
00:37 - based on operations and based on
00:40 - uh that operands so that thing i am
00:42 - going to discuss in this video
00:44 - and this video is brought to you by an
00:45 - academy on an academy multiple batches
00:48 - are going on for
00:49 - csir ugc net june 2021
00:54 - so if you are planning to prepare if you
00:56 - are planning to appear for csir net exam
00:59 - in june 2021
01:00 - you can go for it they are going to
01:02 - cover the complete syllabus
01:04 - and one batch is going to be started
01:06 - from 8th of january
01:08 - that is for life sciences in this batch
01:11 - their best faculties will cover the
01:14 - entire syllabus
01:15 - for life sciences for csir net june 2021
01:19 - exam
01:20 - and this batch the classes in dispatch
01:23 - classes would be conducted in hindi
01:25 - and they'll also provide you notes and
01:26 - the content they'll provide the notes
01:28 - they'll provide you in
01:29 - english language right and this is you
01:32 - can say the paid subscription because
01:34 - they are going to cover the entire
01:36 - syllabus you will get
01:38 - complete course a structured course and
01:41 - if you use the code jkl10 you will get
01:44 - 10 discount on your paid subscription
01:47 - so if you are interested you can go for
01:49 - it all the details and the link
01:51 - as well as the referral code i'll put in
01:53 - the description box of this video
01:55 - you can go and check out you just have
01:57 - to download an academy app and you have
01:58 - to
01:59 - get the subscription of that course
02:01 - right now let us discuss
02:03 - what are operators see operator is it's
02:06 - you can say just a symbol
02:08 - which tells the compiler or which tells
02:10 - the computer
02:11 - which operation has to perform on the
02:13 - data or you can say
02:14 - which tells the computer which
02:17 - mathematical
02:18 - or you can say logical manipulation is
02:20 - to be done
02:21 - like many operators are there plus minus
02:24 - divide
02:24 - logical and logical or relational
02:26 - operators many operators are there
02:28 - so let us take this example this is what
02:30 - an operator it is a symbol
02:32 - so it is going to tell the compiler that
02:35 - it has to perform
02:36 - plus operation plus operation means if
02:37 - you will give the value 1
02:39 - and 2 then output would be 3 and if you
02:42 - write here minus it means compiler will
02:43 - come to know that it has to perform
02:45 - minus
02:46 - that minus operation or based on these
02:48 - data given this data is what this is
02:50 - what
02:50 - operands this is what operator now you
02:53 - can say
02:54 - operator is what operators are basically
02:57 - used to
02:57 - manipulate you can say variables or data
03:01 - in c language i'm going to discuss all
03:03 - the operators in the context of c
03:04 - language only right
03:06 - and with the help of operators variables
03:08 - and constant or you can say with the
03:09 - help of operators and operands in
03:11 - expression is to be formed so you can
03:13 - say what
03:14 - expression is a sequence of operators
03:16 - and operands
03:17 - which gives a single value after
03:19 - processing suppose i am taking like this
03:22 - a is equal to 5 plus
03:25 - 5 so this is what an expression
03:28 - here 5 5 these are what operands
03:32 - plus and equal to this is operator a is
03:35 - what
03:36 - variable and after processing it will
03:38 - give
03:39 - single value so after processing it will
03:41 - give what 10 that would be assigned to
03:43 - this variable so this is what an
03:45 - expression right now
03:47 - types of operators types of operators
03:50 - based on operands and types of operators
03:53 - based on operations
03:55 - two categories are there so here i am
03:58 - going to discuss types of operators
04:01 - based on
04:01 - operands number of operands so there are
04:04 - three categories
04:05 - three types unity next one is binary and
04:09 - ternary operator
04:13 - unary means only one operand is there
04:16 - binary means two operands ten array
04:19 - means three operands
04:20 - now what are these unary operators
04:24 - this is unary minus see this minus is
04:27 - different
04:28 - from binary minus here also we have plus
04:30 - minus that is minus
04:31 - this is unity minus this is binary what
04:34 - is the difference that is we will see
04:36 - also this is unity minus unary minus
04:40 - increment decrement operator
04:43 - logical not operator this is logical not
04:46 - this is
04:47 - address of operator and this is size of
04:49 - operator
04:50 - so these operators required only one
04:53 - operand
04:53 - only one operand now what is this unary
04:56 - minus it is going to change
04:58 - the value means if positive value then
05:00 - it is going to change that value to
05:02 - negative
05:02 - if negative then positive suppose i am
05:05 - writing here
05:06 - uh like in a and b
05:09 - and i am taking a is equal to if you
05:11 - write like this
05:13 - a value 5 b value 10 and c is equal to a
05:15 - plus b but here
05:16 - we have used unity minus operator it
05:19 - means the value of this is not 10 this
05:21 - is minus 10 and this is what 5 so output
05:24 - would be minus 5
05:26 - right and if you write like this a is
05:28 - equal to suppose i am writing here minus
05:30 - b
05:31 - b is what 10 but this is preceded by
05:33 - minus sign unary minus so that that is
05:36 - minus 10 and this value would be
05:37 - assigned
05:38 - to variable a now a will becomes minus
05:41 - 10
05:42 - so this is different from that binary
05:45 - minus operator
05:46 - right next is increment and decrement
05:49 - operator
05:50 - this increment and decrement operator we
05:52 - can use in two
05:53 - ah types in two cases prefix and
05:57 - postfix suppose i am writing here x
06:00 - plus plus or plus plus
06:03 - x so this is what this is also increment
06:07 - operator this is increment operator
06:09 - but here this is postfix and this is
06:12 - prefix because i am writing this one
06:15 - after variable means post
06:17 - before variable means pre
06:20 - and the result is also different it's
06:22 - not like that this will give save this
06:24 - and this will give same result see
06:26 - if you are writing here this one x plus
06:28 - plus and suppose here i am writing
06:30 - see x plus plus means here x plus
06:34 - 1 x is equal to x plus 1 right
06:37 - now this is what after this variable
06:39 - means postfix
06:40 - so the value of this x would be altered
06:44 - after the execution of this line y is 10
06:47 - here
06:48 - space would be allocated to y 10 one
06:51 - variable is x
06:52 - memory allocation 11 would be stored
06:54 - here now i am writing y is equal to x
06:57 - plus plus so now in y what would be
06:59 - store
07:00 - you will say x plus plus means 11 plus 1
07:03 - 12 would be stored here
07:04 - no but here 11 would be stored because
07:07 - this is post
07:10 - first value see you can say right after
07:12 - equal to we have x
07:13 - x value is 11 11 would be stored here
07:16 - and plus plus s
07:18 - after this variable so after execution
07:21 - of this statement
07:22 - now x value will be 12
07:26 - but y is 11 so output of y is 11 now
07:29 - output of this is 12
07:30 - i hope you got my point and if you write
07:32 - here
07:33 - plus plus x here
07:37 - the value of x would be altered before
07:39 - execution of this line
07:41 - now here here x becomes 11 is equal to
07:44 - 12
07:45 - and here it will be stored 12
07:48 - right here also we have now plus plus x
07:51 - means x is also updated that is
07:53 - 12 now y value would be 12 and x value
07:56 - would be
07:56 - 12. because here plus plus is before
07:59 - this
08:00 - x so first of all x would be incremented
08:04 - that would be stored in y right so that
08:06 - is why
08:07 - the y output is 12 and same
08:11 - minus minus is what minus minus means
08:14 - minus minus x x minus minus this is pre
08:16 - this is post
08:17 - it means also x uh what x minus 1 and x
08:20 - minus
08:21 - 1 right same rule will be applied
08:24 - in minus minus also as in plus plus
08:26 - right now we'll be discussing these
08:28 - operators in detail
08:29 - one by one in separate video this is
08:31 - just an overview i hope you got my point
08:33 - what is plus plus and
08:34 - what is minus minus here plus plus it is
08:36 - taking only one operand that is why it
08:38 - is unary operator
08:39 - this is also taking only one operand
08:41 - only x
08:43 - right next is logical not
08:46 - it is it is going to convert true value
08:49 - into force and false value into true
08:51 - it is going to i know reserve this
08:54 - logical state of any operand
08:56 - now suppose if i am writing here
09:00 - suppose this condition and x and y value
09:03 - are this one
09:04 - so x is 11 greater than y
09:07 - 10 11 is greater than 10 this is true
09:10 - but you have used logical not
09:14 - it means it will return false
09:18 - right now if suppose i am writing here
09:23 - y greater than x so here
09:26 - y is equal to 10 greater than x 11
09:29 - is 10 greater than 11 no so this
09:32 - expression will give what
09:33 - false value but you have use logical not
09:37 - that is why it will give true
09:41 - i hope you got why this logical not what
09:45 - does that mean right next is address of
09:48 - operator it is going to retrieve
09:50 - the receive or you can say fetch the
09:51 - address of any operand from memory
09:54 - this operand we will use in scanner
09:56 - function we generally use or when we
09:57 - will use pointers
09:59 - at that time this operator we are going
10:01 - to use
10:02 - next is sizeof will give you can say
10:05 - size of whatever value
10:07 - you you are given here whatever data
10:08 - type suppose you are giving a data type
10:10 - here
10:11 - size of int
10:14 - and if you want to print this one so it
10:16 - will give 2 bytes or maybe 4 bytes
10:19 - size of float it will give 4 bytes it
10:21 - will give
10:22 - size and bytes memory size in bytes so
10:25 - it is used to find out the size of any
10:27 - data type
10:28 - or it is also you can also use it with a
10:30 - variable also here you can also write
10:32 - any variable
10:33 - if you are writing here like suppose int
10:36 - a
10:37 - and you can find out size of a that will
10:40 - give
10:40 - a is what type is what integer so it
10:43 - will give size
10:44 - 2 bytes right so all these operators
10:48 - we are using with only single operand
10:51 - that is why these are known as
10:52 - unary operators next is binary operators
10:56 - here we are going to use two operands
10:59 - like in plus minus divide
11:00 - many type of binary operators are there
11:03 - just let me just write down the list
11:05 - here
11:05 - so these are some binary operators we
11:07 - are going to perform these operators on
11:09 - two operands
11:09 - arithmetic all the plus minus divide
11:13 - into and that modulo relational less
11:15 - than equal to less than equal to greater
11:17 - than equal to logical and logical or
11:18 - bitwise operator bitwise end bitwise or
11:20 - left shift right shift bitwise xor and
11:23 - bitwise negation
11:25 - equality operator also and not equal
11:27 - operator also this you can include in
11:29 - relational also if you are not
11:30 - specifying it uh separately
11:32 - comma operator assignment operator also
11:35 - so all these operators one by one we are
11:37 - going to discuss in detail
11:39 - in separate videos because this video
11:41 - would be lengthy if i am going to
11:42 - discuss
11:43 - these operators right next is what
11:46 - ternary operator
11:49 - ternary means it requires three operands
11:52 - it is also known as conditional operator
11:55 - so here
11:56 - we are using this question mark and
11:59 - these columns now how the syntax of
12:02 - using ternary operator is what
12:04 - here we are writing some expression
12:06 - expression means you can say sequence of
12:08 - operands and operators
12:10 - that after processing give a single
12:11 - result so
12:13 - if expression after the processing of
12:15 - expression 1
12:16 - if expression 1 is true first
12:20 - first would be what condition first
12:23 - expression should be a condition here
12:26 - that is a rule
12:27 - so now if this expression one if this
12:30 - condition is true
12:32 - then this one
12:35 - this expression would be evaluated and
12:37 - it will give you result
12:39 - whatever result you will get after
12:40 - evaluating expression 2 that would be
12:42 - output
12:43 - if expression 1 is false then
12:47 - control will go in expression 3 this
12:50 - expression would be evaluated and
12:52 - it will give you the result let us take
12:54 - one example
12:55 - uh if i am writing here this is suppose
12:58 - an example a value is 10 b value is 15
13:00 - so now this is expression 1
13:02 - this is second this is third first of
13:04 - all this expression would be evaluated
13:06 - some rules are for this for some rules
13:09 - are there the first expression must be a
13:11 - condition
13:12 - second rule is either this expression 2
13:15 - or this
13:16 - only one either this or this would be
13:19 - evaluated
13:20 - based on the value of expression one
13:23 - it is not that both would be evaluated
13:26 - only one
13:27 - and this must be a condition so here a
13:29 - is ten and b is fifteen
13:32 - ten greater than 15 is it true or false
13:34 - it is false
13:35 - so now this expression control will go
13:38 - here
13:39 - at b now b value is what 15 so in x what
13:43 - value would be store
13:45 - 15 if you will print printf this x then
13:48 - 15 would be the output
13:50 - right and suppose if you write here a
13:53 - less than b
13:54 - now is it true yes it is true now
13:59 - the control will go to a this expression
14:01 - would be evaluated here we do not have
14:03 - any expression we just have any of an
14:05 - operand that is a value is 10
14:06 - so now 10 would be assigned to x and
14:10 - output would be 10. so this is what
14:12 - ternary operator or you can say
14:13 - condition
14:14 - you can use a ternary operator to form a
14:16 - conditional expression
14:18 - and you can use this one conditional
14:20 - expression conditional operator
14:23 - in place of effects
14:27 - because if else also you can convert it
14:30 - into if
14:30 - if else this statement if
14:34 - a less than b you can
14:37 - say x is equal to a
14:41 - and else
14:44 - x is equal to b that's it
14:48 - if a is less than b means if this is
14:50 - true
14:51 - then a value would be assigned same if
14:54 - this is true then
14:55 - a is going to be performed and
14:58 - if this is false then control will go
15:00 - here and this expression is going to be
15:02 - evaluated
15:03 - same here meaning of this and if else
15:06 - statement is same so you can use
15:08 - this conditional operator this statement
15:11 - rather than if else if else we will we
15:12 - are going to discuss
15:14 - in later videos in detail right so
15:16 - that's it about types of operator based
15:18 - on operands
15:19 - uh i hope you go to all these operators
15:21 - if you want me to make a separate video
15:23 - on the stunner operator in more detail
15:25 - then you can tell me in the comment box
15:26 - so in next video i'm going to discuss
15:28 - types of operator based on
15:30 - operations so now i'll see you in the
15:31 - next video till then bye bye take care