00:00 - so in the series of learning c plus plus
00:02 - programming language we are discussing
00:03 - operators in c plus plus in the last
00:05 - video we have discussed arithmetic and
00:07 - relational operators right so the next
00:09 - two types of operators will discuss in
00:11 - this video is logical operator and
00:13 - bitwise operator with the help of
00:14 - program i'll show you right practical
00:17 - also we'll see
00:18 - so firstly you will see just logical
00:21 - operators i hope you know what does an
00:24 - operator make the previous video we have
00:25 - discussed it's like just the symbol to
00:28 - tell the compiler which you know
00:30 - specific logical or mathematical
00:32 - operation is to be performed on the
00:34 - operands i hope you know what is operand
00:35 - what is operator now it is clear to you
00:37 - guys now logical operators see basically
00:40 - three logical operators we have
00:42 - logical and
00:44 - logical or and
00:47 - logical not
00:49 - it's logical and logical or logical not
00:52 - the symbol is this for or this and for
00:55 - not
00:56 - this exclamatory symbol right
00:59 - so these type of operators basically you
01:01 - know they are used to combine
01:05 - two or more
01:07 - conditions
01:08 - right
01:09 - and the operand for these operators are
01:12 - of type boolean type
01:15 - right
01:15 - uh let's see
01:17 - if i have three numbers a b and c and
01:21 - you want to find out maximum of three
01:23 - numbers
01:24 - so i'll say
01:26 - if a greater than b
01:28 - and a greater than c
01:31 - it means
01:32 - a is maximum
01:34 - if i write like a greater than b
01:36 - and
01:38 - a greater than c
01:41 - it means we can print a is maximum right
01:44 - so this and its logical end so we can
01:47 - replace it with this operator and
01:50 - means this logical add operator is
01:51 - combining two conditions
01:54 - right
01:55 - and this is one operand for this and
01:58 - this is another operand for this logical
02:00 - and operator so this operands
02:02 - should be of type boolean
02:05 - right
02:07 - see
02:08 - a great suppose a is equal to 10 b is
02:10 - equal to 5 and c is equal to 11
02:14 - right
02:16 - now is a greater than b
02:19 - this is relational operator greater than
02:21 - right a greater than b 10 greater than 5
02:23 - yes true it means it is true means 1
02:27 - and a greater than c no false that is 0
02:32 - right now this operator will work on
02:35 - these operands this is true this is full
02:37 - so it will give you false that is zero
02:41 - so the operand for these operators
02:43 - should be of boolean type
02:46 - right
02:47 - now logical and operators will work how
02:51 - see
02:52 - if
02:53 - something like this
02:55 - if both the operands are true then only
02:57 - it will give true value otherwise false
02:59 - value
03:00 - the truth table if i say then for this
03:03 - logical and operator is what
03:09 - if both the operands are 0 0 or you can
03:11 - say false it will give 0.
03:14 - if
03:15 - 1 is true 1 is false then also false
03:18 - this also falls and this will give
03:21 - true
03:22 - right
03:24 - so this is you can see the truth table
03:26 - for this logical and if both the
03:28 - operands are true then only it will give
03:30 - true right now
03:33 - and for logical or the truth table is
03:36 - what
03:37 - if both the operands are false then only
03:40 - it will give false if any of the one
03:43 - operand is true it will give true so
03:46 - something like this for logical this is
03:48 - for logical and for logical or
03:54 - zero zero zero one one one if any one of
03:58 - the operand is true it will give true
04:01 - and logical not means
04:03 - if true
04:04 - operand is true it will give false if
04:07 - false it will give true
04:10 - means
04:11 - not 0 will be 1 node one will be zero
04:15 - for this logical node now how these
04:18 - operators work basically they
04:21 - uh work you know on the method of
04:24 - short circuiting i hope you know what is
04:27 - short circuit
04:28 - or let me just discuss this thing also
04:31 - so these both the operators you can say
04:33 - they perform
04:36 - short
04:38 - circuit evaluation
04:40 - now what is this short circuit
04:42 - evaluation see
04:44 - if
04:45 - the first
04:47 - operand means if after evaluating the
04:50 - first operand
04:51 - the result is known to you right
04:54 - then
04:55 - it will not evaluate the second operand
04:57 - this is what short circuit evaluation
05:00 - they don't evaluate the second operand
05:03 - if the result is known after evaluating
05:07 - the first operand only now what does
05:09 - this line mean see
05:12 - here see
05:14 - a greater than b means 10 greater than 5
05:19 - right yes it is true
05:22 - but after evaluating the first operand
05:24 - only we cannot say what would be the
05:26 - result
05:27 - because
05:28 - for logical on and both should be one so
05:31 - you have to evaluate the second also a
05:33 - greater than c no it is a zero now you
05:35 - can say
05:37 - you have to
05:38 - you know
05:39 - you have to evaluate the both the
05:41 - operands in this case then only we can
05:43 - say what would be the result
05:45 - if this is something like this suppose b
05:47 - is 15
05:49 - now see
05:50 - 10 greater than 15 is 10 greater than 15
05:54 - no means
05:56 - false that is a zero
05:59 - in this case
06:00 - it will not evaluate the second operand
06:02 - why so because after evaluating the
06:04 - first operand first is false and we know
06:07 - if any one of the operand is false in
06:09 - logical and it will give false
06:11 - ultimately
06:13 - this is the truth table if both are true
06:14 - then only it will give one so it will
06:16 - not evaluate the second operand directly
06:19 - the result would be false this is what
06:22 - short circuit evaluation
06:24 - i hope this point is clear to you guys
06:26 - same logical or also
06:29 - work on this type of
06:30 - evaluation if suppose i am not writing
06:33 - here this i am writing here
06:35 - logical or and b is
06:38 - 5 only
06:40 - now 10 greater than 5
06:44 - yes it is true so it would be 1.
06:47 - now it will not evaluate the second one
06:49 - why so because the operand operator is
06:51 - logical
06:52 - or
06:53 - and in logical or if any one of the
06:55 - operand is true ultimately the result
06:57 - will be true
06:59 - so one operand is true so we know the
07:01 - result would be one
07:05 - it doesn't depend that second operand is
07:06 - giving false if this is false then also
07:09 - it will give one if this is true then
07:10 - also
07:11 - it will give one so it will not evaluate
07:13 - the second one only by evaluating the
07:15 - first operand we know the result that's
07:17 - it
07:18 - right
07:19 - so i hope these logical operators are
07:22 - clear to you guys
07:24 - so in some situation maybe you want to
07:25 - check two three four conditions and we
07:27 - want all the conditions must be true
07:29 - then only
07:31 - we can do something if you want to do
07:32 - something then you will perform logical
07:35 - and operator
07:36 - right suppose if i say
07:39 - if camera is there
07:42 - and
07:43 - board is there
07:44 - whiteboard
07:46 - and
07:47 - marker is there
07:49 - then only i'll shoot the video means all
07:51 - the three conditions should be true
07:54 - camera i have board and marker then only
07:57 - i'll shoot so i'm putting and in between
07:59 - these
08:00 - if any one of these this is false if any
08:02 - one of it is not available suppose more
08:04 - whiteboard is not available so i'll not
08:06 - shoot the video right
08:08 - second condition if i take like if
08:11 - camera if i say
08:13 - if i have phone or maybe camera i'm fine
08:16 - with phone also if i don't have camera i
08:19 - can shoot with phone
08:21 - so here i can take or like camera or
08:24 - phone
08:25 - mobile phone
08:28 - if i have camera but not phone then only
08:30 - then also i can shoot if i don't have
08:32 - camera but i have phone
08:34 - that is also fine
08:35 - i don't need both camera and phone i
08:37 - need only one thing to shoot the video
08:39 - so that is what logical or type of thing
08:42 - so this is how no i hope the basic idea
08:44 - is clear to you now you can relate it
08:45 - with your real life examples and you can
08:47 - visualize everything so try to relate
08:49 - each and every concept with your real
08:50 - life examples
08:52 - right in everyday example then you will
08:54 - get it better and it will be in your you
08:57 - know memory for a longer period of time
08:59 - so i hope this logical operators are
09:01 - clear to you now let's see bitwise
09:02 - operators and see one assignment for you
09:05 - is if i write
09:06 - not 15
09:10 - what value it will give you have to tell
09:12 - me in common section
09:13 - now bitwise operators as the name
09:16 - suggest bitwise means they work on bits
09:18 - they perform operations bits by bits
09:22 - they work on individual bits right now
09:25 - let's see how they works
09:27 - here also we have bitwise and
09:30 - bitwise or
09:31 - bitwise xor
09:33 - bitwise
09:35 - not
09:36 - ah left shift left shift right shift you
09:40 - know right shift and left shift
09:41 - operators
09:43 - this is what right shift and this is
09:44 - what left shift operator right
09:48 - now bitwise and
09:50 - the symbol is this thing so they work on
09:52 - bits they perform operation bits by bits
09:55 - suppose i say i have two numbers x is
09:57 - equal to 26 and y is equal to 9
10:00 - and you have to perform x
10:02 - and y but twice and so first translate
10:06 - these into bits
10:08 - zeros and ones in that form so 26 would
10:11 - be this one and nine would be one zero
10:15 - zero
10:16 - zero sorry this would be one zero zero
10:20 - zero zero
10:21 - in eight bits i am representing right
10:24 - how you can translate like if i separate
10:27 - 1 2 4 8 16 32 64 like something like
10:32 - this 128
10:33 - 16 plus 8 plus 2 that would be 26
10:37 - in these uh under these i know
10:40 - places we have 1 and 1
10:42 - plus 8 8 plus 1 that is 9 so we have
10:44 - this so i hope you know how to convert
10:46 - decibel into binary now bits by bit
10:48 - super form operation now bit wise and
10:51 - same if both are one
10:53 - then only it will give one otherwise
10:55 - false
10:56 - so now it will give what
10:59 - 0 1 0 this is also 0 0 1 1 yes that is 1
11:03 - 1 0 0 0 0 0
11:05 - so bit wise and this is what in decimal
11:08 - we can say this is 8 so this is bitwise
11:10 - and operator if you perform bitwise or
11:14 - this is bitwise and this is bitwise or
11:16 - the result i am writing here
11:18 - bitwise or means if
11:20 - any one is true it will give true
11:22 - otherwise false
11:24 - 0 1 this is true yes 1
11:26 - 1
11:27 - 0 1
11:28 - 1 0 0 0
11:31 - it will give what see 16 plus 8 plus 2
11:35 - plus 3 it will give
11:37 - 27
11:39 - right
11:40 - now bit wise xor
11:43 - bitwise xor means
11:45 - if both the bits are same
11:48 - then it will give false
11:52 - if both the bits are same
11:54 - then it will give holds otherwise trip
11:57 - right
11:59 - zero and one
12:01 - not same so it will give true one zero
12:04 - true zero zero both are
12:07 - same false force so it will give false
12:09 - true true both are same then also it
12:11 - will give false one zero one is true one
12:14 - is false yeah both are different so it
12:16 - will give one
12:17 - zero zero both are same zero zero zero
12:21 - so the output the result of this would
12:23 - be 16 plus 2 plus 1
12:27 - 90 now
12:29 - this is what
12:30 - negation or you can say a bit wise not
12:32 - operator so if i say
12:35 - uh like something like this negation of
12:38 - x it will
12:40 - uh convert true to false and false to
12:43 - true
12:44 - means 1 to 0 0 to 1 so x is this one y
12:47 - is this one
12:49 - negation of x not x would be 1 1 1 0 0 1
12:55 - 0 1 something like this
12:58 - right
12:59 - so it will give
13:02 - in system if you will print like
13:05 - negation of x
13:07 - then it will give two's complement the
13:09 - value would be two's complement the
13:11 - system value two's complement of x and
13:13 - how the two's complement would be
13:14 - converted first of all once complement
13:16 - then add plus you know add one to the
13:19 - that or
13:20 - the formula is like if i say negation of
13:23 - x would be minus x plus 1 this would be
13:27 - 2's complement so minus x is 26 26 plus
13:30 - 1 that is minus 27
13:33 - so in system if you put bit wise not
13:35 - operator with x it will give minus 27
13:38 - right
13:39 - it will give two's complement fine now
13:41 - left shift and right shift c
13:44 - on x i am applying the shifting
13:47 - operation so if i apply
13:50 - x
13:51 - left shift one
13:54 - we are going to
13:56 - left shift this
13:58 - by
13:59 - one bit
14:00 - so
14:01 - x is this means left shift one left
14:04 - shift one so this would be discarded
14:07 - this zero would be here
14:10 - right
14:10 - then this zero would be here then we
14:13 - have one then one then 0 then 1
14:16 - then 0 and 1
14:19 - space 1 2 3 4 sorry 1 2 3 4 5 6 7 we
14:23 - have only 7 so the remaining bit would
14:25 - be filled with 0 so this would be left
14:28 - shifted by one if you want to left shift
14:31 - it by two this two left bit these which
14:34 - would be discarded we will left shift
14:36 - these by two and here
14:39 - the two places will be filled with zero
14:41 - i hope you got this so if i write x left
14:44 - shift 2 then the result would be these
14:46 - two would be discarded and i i write
14:49 - from here 0 1 1 0 1 0 and these two bits
14:52 - would be filled with 0
14:55 - x left shift 3
14:57 - these three bits would be discarded and
14:59 - i'll write from here one one zero one
15:01 - zero zero zero zero these three places
15:04 - would be filled with zero
15:06 - right
15:07 - right shift if i say x right shift 1
15:13 - means
15:14 - right shift
15:16 - that side this is right side this is the
15:17 - left side so right side 1 bit from the
15:19 - right side would be discarded i'll write
15:21 - from here 1 0 1 1
15:25 - 0 0
15:26 - 0
15:27 - 3 0's and here the one place will be
15:29 - filled with 0
15:31 - so
15:33 - this is
15:34 - what x right shift to 1
15:37 - same with 2 and 3
15:39 - right
15:40 - if x right shift
15:43 - two bits by two bits then
15:45 - these two bits would be discarded and we
15:47 - will start writing from here
15:49 - zero one one zero zero zero then 2 0
15:55 - filled with 2 0 right
15:58 - so simply if you want to
15:59 - you know tell you the answer then how
16:01 - you can say
16:03 - the formula is
16:04 - if you shift like x
16:07 - left shift by n bits then what would be
16:10 - the result
16:11 - x
16:12 - into
16:13 - 2 raised to power n
16:16 - so here x is 26 26 left shift
16:20 - n is 1 so the answer should be 26 into 2
16:24 - raised to power 1 that is 52
16:28 - x
16:28 - left shift 1 and the answer is this
16:32 - you can try out the decimal of this is
16:35 - 52
16:36 - like 1 2 4
16:39 - 8 16 32 so 32 plus 16 plus 4 that would
16:43 - be 52 right
16:45 - same for right shift x
16:47 - right shift n
16:49 - the result would be
16:51 - x into sorry x
16:53 - divided by 2 raised to power n
16:56 - so if i x right shift 1 this is the
16:58 - result so result would be 26 divided by
17:01 - 2 raised to power 1 that is
17:03 - 13 so it is 13 1 2 4 8 so 8 plus 4 plus
17:08 - 1 that is 13
17:10 - so this is how you can tell you the
17:12 - answer by this formula
17:15 - right
17:16 - for left shift and right shift i hope
17:17 - you would right now let me show you
17:20 - practical
17:21 - okay so we have this program operator
17:24 - operator stored cpp now we have this
17:27 - logical operator
17:29 - this is the code
17:31 - right
17:32 - we have x and y x is x 5 y 10 and we are
17:35 - checking if x greater than 5 and
17:38 - y less than 15
17:40 - then c out it will print x plus y
17:43 - else if x less than equal to 5 y greater
17:45 - than 15 it will give x minus 5
17:48 - else suppose it will give
17:51 - not equal to x right logical not
17:54 - x
17:55 - ok
17:56 - let me just run this code and show you
17:58 - the answer what you will get here
18:02 - see
18:03 - it is giving x minus y that is minus 5
18:06 - why so
18:07 - because
18:11 - first condition is x is x greater than 5
18:14 - no because x is equal to 5 so only first
18:18 - condition is false so it will not
18:19 - evaluate the second one because if one
18:21 - is false logical not will give false so
18:24 - not enter into this if statement block
18:26 - now else if next condition x less than
18:28 - equal to 5
18:30 - yes less than or equal to yes it is
18:32 - equal to 5 so this is true
18:34 - right now it will not evaluate the
18:36 - second condition because it is logical
18:38 - or so in this case if only one operand
18:41 - is true the result would be ultimately
18:43 - true
18:43 - so yes it would be true now it will
18:45 - enter into this else block and it will
18:47 - give x minus y x minus five that is
18:48 - minus five
18:50 - right
18:51 - so this is how these operators will work
18:53 - they just choose to you know combine two
18:56 - or more conditions here you can put one
18:59 - more and
19:00 - some more condition one more logical and
19:03 - some more condition this kind of thing
19:05 - you can do right
19:07 - so
19:08 - now
19:08 - if i change the condition else if
19:10 - condition if i remove this equal to
19:14 - now what output you will get see it will
19:16 - give now
19:17 - logical not x
19:19 - so x is 5 it means true so it will give
19:22 - false because this condition is also not
19:24 - true now x less than equal to 5
19:26 - no
19:28 - that is 0
19:29 - right false but it will check the second
19:31 - also because 1 is 0 second is true it
19:34 - will give true
19:35 - so only by evaluating the first we
19:37 - cannot say what would be the result
19:39 - right in case if the first operand is
19:41 - zero now evaluate the second one y
19:43 - greater than 15
19:45 - no this is also false so ultimately this
19:47 - will give false logical or operator and
19:49 - will not enter into this lcd block and
19:51 - that will jump to the else block and it
19:53 - will print not x right
19:56 - now let's see
19:58 - logical sorry bitwise operators
20:01 - let me just comment the section out
20:04 - and we have now bitwise operator
20:08 - see what would be the result x is 26 and
20:11 - y is 9
20:13 - so let's run this code
20:15 - and
20:16 - see the result
20:18 - x and y equal to 8
20:21 - that we have discussed already
20:24 - x or y would be 27 x x or y would be 19
20:27 - x left shift 1 would be 52 x right shift
20:31 - 1 would be 13 that i have shown you on
20:33 - the whiteboard
20:34 - and
20:35 - not bitwise not x would be minus 27 i
20:38 - have told you why it is giving minus 27
20:40 - because it is the system is giving two's
20:43 - complement of the number
20:44 - right
20:45 - so now you can try out these operators
20:48 - with different different operands or
20:49 - maybe the operand directly constant you
20:52 - can write other rather than x and y you
20:54 - can write one or zero or one operand can
20:56 - be x the variable second operand can be
20:58 - any
20:59 - like zero or one or any constant you can
21:01 - try out these different different type
21:02 - of variations right so just try these
21:04 - out practice these operators on
21:06 - different different type of operands and
21:08 - the more you explore the more and more
21:11 - about these operators you will get right
21:13 - so i guess that's about logical and
21:15 - bitwise operator from my side so in the
21:17 - next video you will see assignment
21:18 - operators and some miscellaneous
21:20 - operators in c plus plus so nas in the
21:21 - next video till then bye take care