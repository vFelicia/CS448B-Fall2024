00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language we are
00:05 - discussing functions in C++ in previous
00:07 - video we have seen what is function
00:09 - overloading right everything about
00:11 - function overloading now in this video
00:12 - we'll see two to three coding exercises
00:14 - based on functions we'll start with with
00:16 - basic one like how to find factorial of
00:18 - a number F series then how to find out
00:21 - like from a given uh between two numbers
00:23 - like suppose two numbers are given 11 to
00:25 - 13 so between 11 to uh 20 so between
00:28 - those numbers you have to find out all
00:30 - the prime numbers right so these type of
00:33 - exercises we'll do in this video Let's
00:35 - Start first we'll uh see how to find out
00:38 - factorial of a number so we'll do this
00:40 - thing using function so suppose I'm just
00:43 - creating a function void fact and it
00:47 - will take
00:48 - any int value as an argument so this
00:51 - just declaration or protype of that
00:55 - function now in main function obviously
00:57 - we will call that function
01:00 - so first let's take a number for which
01:02 - you want to find out like the factorial
01:06 - from user we'll take this number and in
01:08 - this fact this function we call this
01:11 - function just
01:13 - pass
01:16 - n right and suppose if you want to
01:19 - return something then you can take here
01:20 - int suppose not void I want this
01:23 - function should return the value like
01:24 - factorial it should return some that
01:26 - factorial so if you are returning
01:30 - returning if this function is returning
01:32 - something then here you cannot directly
01:34 - write down like this because it is
01:35 - returning something so you have to use
01:37 - some variable to store that value right
01:40 - or directly in C out we can call that
01:42 - function so suppose um directly in C out
01:46 - I'm calling this
01:49 - function now let's define this
01:54 - function we
01:56 - have a parameter in a and how to find
02:00 - out factorial I hope you know if you
02:02 - want to find out factorial of five
02:04 - number then 5 into 4 into 3 into 2 into
02:06 - 1 right like if you want to find out
02:08 - factorial of uh n like n factorial then
02:11 - this this would be the formula would be
02:13 - n into n -1 into N - 2 into like this up
02:16 - to into one right so the factorial of a
02:21 - number is the multiplication of all the
02:22 - numbers between one to that
02:26 - number like five factorial means all the
02:29 - multiplication of all the numbers
02:30 - between 1 to five that's it right so
02:34 - this formula this logic you have to
02:35 - write down in this function right so and
02:40 - one thing if the number is zero I mean 0
02:43 - factorial is always one and one
02:44 - factorial is always one right so
02:49 - whatever the number you pass right if
02:52 - that number if like a is equal to equal
02:54 - to 0 or AAL toal to 1
03:00 - then
03:02 - simply return
03:04 - one because 0 factorial is 1 1 factorial
03:08 - is one right else we do though those
03:12 - multiplication of that like between one
03:15 - to that number right so for that 14 Loop
03:19 - and I is equal to let's start with i
03:22 - equal to
03:23 - 2 and I less than equal to whatever the
03:27 - number you pass and I Plus
03:31 - plus and here we do what first let's
03:34 - take like here
03:37 - uh a number
03:41 - factorial sorry a variable factorial and
03:44 - let's suppose this is one if you don't
03:46 - take any value here so it will take any
03:47 - garbage value in starting of this uh
03:50 - variable factorial so better to
03:51 - initialize it with one and
03:55 - here what is the that formula factorial
03:58 - equal to
04:01 - factorial into I and simply return
04:05 - whatever the
04:08 - factorial right that's
04:11 - it and whatever you return here that
04:14 - will be
04:15 - printed
04:17 - here let's run this and see you get the
04:20 - output or
04:23 - not factorial of 3 it's 6 3 into 2 into
04:27 - 1 let's run this again
04:30 - again factorial of 5 it should be 120 5
04:34 - into 4 into 3 into 2 into 1 right and if
04:37 - you you don't write down here see out
04:39 - let's SC this like this so what should
04:43 - it print let's
04:48 - see four see it is not printing
04:53 - anything it is not giving any error to
04:55 - you guys but it is not printing that
04:57 - factorial why so because once when it
05:00 - will return that factorial number then
05:02 - here we're directly calling it we we
05:05 - don't have anything to store that number
05:08 - so how to print that number right if I
05:11 - just want to suppose I give you
05:12 - something right so you should have
05:15 - something like maybe your hand should be
05:17 - something like this or you should have a
05:18 - ball or glass or anything just to hold
05:20 - that thing right
05:22 - otherwise you will not get that thing
05:24 - right so same here either we should have
05:27 - some variable right
05:30 - and in that variable we can just like
05:33 - maybe suppose you have a variable here
05:34 - int n and one more suppose F and F equal
05:41 - to this so the factorial would be stored
05:44 - in F and after that we can just print
05:46 - that
05:48 - F this also will work
05:51 - fine
05:53 - see 24 right otherwise in direct C out
05:56 - you can call this and let's run this and
05:59 - I'll show you like that 0 factorial and
06:04 - 1 factorial so if I pass zero it will
06:07 - print one if you pass one it will print
06:09 - one so it is like how to find out
06:11 - factorial of a number using function I
06:14 - hope you got it next is fibon series
06:17 - what is fibon series fibon series is
06:19 - something like this first term is zero
06:22 - and next is one and then 0 + 1 1 then
06:26 - add the previous two 1 + 1 2 then add
06:29 - previous two 2 + 1 that is 3 then 3 + 2
06:34 - 5 like this then 5 + 3 8 and so
06:39 - on so addition of previous two numbers
06:42 - and the series would be so on okay so
06:46 - now how to find out fabon series up to
06:48 - whatever number of terms you want to
06:49 - find out let's suppose I want to find
06:50 - out faban series up to five terms so it
06:53 - would print 0 1 1 2 3 up to five terms 0
06:57 - like 1 2 3 4 5 five terms right now how
07:01 - to find out fabon series see first we
07:04 - will take 0 and one are fixed so we can
07:08 - take a variable A or B like a is zero
07:10 - and B is 1 something like
07:14 - this B is one now the next term next
07:17 - term is addition of previous two terms
07:19 - so a plus b that is one right so we can
07:24 - say like
07:26 - NT n stands for next term next term
07:29 - would be be A+
07:35 - B it's a plus b right I I hope you are
07:37 - getting this 0 + 1 is 1 and we just
07:40 - print one here now next term is addition
07:44 - of previous two right so at first it is
07:49 - a this is
07:51 - B and this one is next
07:56 - term after that now to find out next
08:00 - term like two we should add this and
08:02 - this so now this should be
08:05 - a this should be B and now a plus b
08:10 - becomes this becomes next term two
08:12 - becomes next term right we do a plus b
08:16 - so this kind of thing you have to do
08:18 - this logic you have to apply so pause
08:19 - the video and try this out so let's
08:21 - comment out this
08:24 - and write
08:25 - down another program let have
08:30 - a
08:32 - function function per type like function
08:35 - name FIB return type and it will take a
08:38 - argument of type int right if you want
08:42 - to take here variable name that is also
08:44 - fun you can take now let's define this
08:48 - first void FIB after main I'm going you
08:52 - know I'll Define this in mean I'm
08:54 - calling this I'll call this so int
08:57 - suppose a the variable name can be
08:59 - different
09:01 - so at first we'll take like int or if
09:06 - you take like
09:08 - uh
09:10 - T1 or we can take x x is equal
09:14 - to0 and into Y is equal to 1 first two
09:18 - terms 0 and 1 right we do x + y
09:21 - right now in four Loop because obviously
09:24 - that addition would be in Loop so let's
09:27 - take a for Loop and I is equal to
09:31 - from how many times this Loop should
09:35 - be
09:37 - iterated till the number of terms you
09:40 - want in that febon Series so I should be
09:44 - less than equal to whatever whatever
09:47 - this value you passed here right here
09:50 - while calling if suppose I pass s
09:55 - n right for that you have to take
10:00 - int n and from user we'll take input so
10:03 - we'll take this input from user right
10:05 - and we'll pass that number of terms and
10:08 - so it will be in this a variable right
10:11 - and this would be till the number of
10:15 - terms you want in that F Series right so
10:17 - I should be less than equal to whatever
10:19 - the number of terms you want and I
10:23 - ++ here what we will
10:25 - do we do to find out next term
10:31 - like next term equal to x + y addition
10:35 - of previous two so better to take here
10:39 - first a
10:49 - variable next term next term is equal to
10:51 - x + y and then after that after that see
11:00 - here the previous it was B but now it
11:03 - becomes a and the previous the next term
11:06 - now it becomes B right so this logic you
11:09 - have to apply so now a is equal to B and
11:14 - B is equal to whatever the next
11:18 - term
11:19 - right and yeah obviously you have to
11:22 - print so here first let's print C out
11:27 - whatever the first term like
11:30 - X
11:33 - okay let's put one space here sorry it's
11:37 - not a and b it's X and Y right here x is
11:39 - equal to Y and rather than b here we
11:43 - have y y is equal to next term I hope
11:46 - you got this right and we are not
11:48 - returning anything so you can just leave
11:51 - this or you can just write down here
11:52 - simple
11:54 - return okay
12:03 - so I hope you got
12:08 - this let's turn this and I'll show
12:10 - you enter the number of terms you want
12:13 - five so 0 1 1 2 3 you this again run
12:17 - this and suppose
12:19 - 10 so this is up to 10 F Series
12:25 - right see if you're not getting this
12:27 - logic it's I guess simple one you'll
12:30 - easily get it while writing this one but
12:32 - still if you're not getting pause the
12:34 - video write down this program or this
12:36 - logic you know on a piece of paper and
12:38 - dry run this dry run this with your hand
12:42 - right like this is the variable in
12:44 - memory this this would be updated this
12:46 - for Loop and all dry than this and
12:48 - definitely you will get it it's a simple
12:50 - one right so next is let's find out
12:53 - prime number between whatever the number
12:55 - you will give I hope you know the logic
12:58 - of finding out prime number right so
13:04 - let's I want like in
13:08 - main let's give two numbers A and
13:14 - B between these two numbers suppose
13:16 - number is one and 50 a is 1 B is 50 so
13:19 - between these two numbers whatever the
13:21 - prime number those I want to find out
13:23 - all the prime numbers right so obviously
13:26 - Loop would be from A to B so in I is =
13:31 - to a to I less than equal to B and I
13:38 - ++
13:39 - right for all the numbers if that number
13:43 - is prime number then we simply print
13:45 - that number so to find out Prime we just
13:49 - suppose Define a
13:51 - function is prime or prime any this type
13:53 - of function so
13:56 - is prime
13:59 - whatever the number like whatever I
14:01 - because I would be suppose A and B is 1
14:03 - and 50 here suppose I have a is equal to
14:07 - 1 and B is equal to
14:11 - 50 so I would be from 1 to 50 so we
14:14 - check for all the numbers that number is
14:16 - prime or not if this is prime that this
14:19 - says like you can say true we simply
14:23 - print
14:25 - I that's
14:27 - it so now let's define
14:30 - this is prime I and suppose this will
14:34 - return true or false if the number is
14:37 - prime it suppose the function will
14:38 - return true if the number is not prime
14:40 - it will return false right so return
14:44 - type should be
14:46 - bo bu is prime whatever the number you
14:49 - pass here suppose a let's take a
14:53 - variable a and now how to find out
14:56 - number is prime or note if the number is
14:57 - divisible by one and it's self then that
14:59 - is prime otherwise not like 1 2 3 7 5 9
15:05 - 11 13 17 19 these are prime numbers
15:08 - these are divisible only with itself or
15:11 - one right so how to find out suppose the
15:15 - number is
15:16 - 10 one way is divide this with we know
15:21 - every number is divisible by two so
15:22 - let's start with two divide this with 2
15:25 - then 3 then 4 5 6 7 8 9 up to
15:30 - 9 or up to 10 we know the number is
15:31 - divisible by itself also right if you
15:33 - find any other between this 2 to
15:37 - 9 which can divide this 10 means it is
15:39 - not prime number right but if suppose
15:42 - number is 50 so you have to divide till
15:45 - 2 3 4 5 up to
15:47 - 49 and if the number is suppose 500 so
15:50 - you have to do that same process the
15:53 - division step you have to check from 2
15:55 - to 449 up to 500 suppose number is 500
15:59 - that is very lengthy thing what we can
16:01 - do is we can just check suppose 2 3 4
16:09 - 5 we can just check till n by 2 N is
16:13 - suppose here n is
16:15 - 10 you want to find out this n is prime
16:18 - or not so till n by2 we check till
16:21 - 5 right because 10 would not be
16:24 - divisible by 6 7 8 9 we know suppose
16:29 - number is 50 we check only from 22 and
16:33 - by2 till 25 because we know this would
16:35 - not be divisible by 26
16:38 - definitely after n by2 that number would
16:41 - not be divisible by any number because n
16:43 - by2 here is 26 if you do 26 into 2 like
16:48 - 26 2 are
16:50 - it's 52 so that would be more right so
16:55 - it's not like that you have to check
16:57 - till that number just
16:59 - check just run the loop till n
17:02 - by2 and yeah the time complexity would
17:05 - be less right or one more efficient
17:09 - solution is you can check till square
17:10 - root of that and that is also possible
17:12 - but we just write down that uh logic
17:15 - here till n by2 that square root you uh
17:18 - you just try out right we'll check from
17:22 - 2
17:23 - to uh uh the loop will run from 2 to n
17:27 - by2 right 2 to I should be less than
17:30 - equal to whatever the number here we
17:32 - have like a / by
17:35 - 2 and
17:38 - i++ okay
17:41 - if that
17:43 - number
17:44 - a is completely divisible like
17:48 - modulo I is equal to equal
17:51 - to0 then it will return false
17:59 - right if this is divisible by any of
18:01 - these two from 2 to n by two definitely
18:03 - that would not be a prime number so it
18:05 - will return
18:06 - false okay and after
18:10 - that
18:13 - otherwise return
18:15 - true after completing this whole
18:18 - Loop if this condition would not
18:21 - hit then it will return true that would
18:24 - be a prime number so in main for
18:27 - successful completion just
18:29 - return zero and let's run this and see
18:31 - what output you will get a and b suppose
18:34 - 1 to
18:36 - 10 1 2 3 5
18:39 - 7 let's run this again and see from 11
18:43 - to 20 11 13 17 19 yes you're getting
18:48 - right let's run this again and 1
18:53 - 1250 1 2 3 5 7 11 13 and up to 15 47
18:59 - right so I hope you got this so I hope
19:02 - you got these exercises if you didn't
19:04 - get this it's okay just pause the video
19:06 - write down all these exercises on a
19:08 - piece of paper and write on these These
19:10 - are easy one right in the next video
19:12 - we'll see that Pascal triangle because I
19:16 - got many comments regarding that like
19:18 - write a program to print Pascal triangle
19:19 - so we'll see that thing in next video
19:21 - right so now I'll see you in the next
19:22 - then byebye take care