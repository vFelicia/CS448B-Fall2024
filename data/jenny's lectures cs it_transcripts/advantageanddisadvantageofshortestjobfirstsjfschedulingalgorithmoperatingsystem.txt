00:00 - hey guys we have already discussed both
00:02 - the versions of shortage of first CP
00:05 - filling algorithm that is pre-emptive
00:06 - and non pre-emptive that pre-emptive
00:08 - version is also known as shortest
00:10 - remaining time first CPU scheduling
00:11 - algorithm fine so in this video we'll
00:14 - see the advantages and drawbacks of the
00:16 - this algorithm right see now first of
00:19 - all the advantages of this algorithm the
00:22 - that pre-emptive version of SJ 4 you can
00:24 - say that s RTS shortest remain shortest
00:27 - remaining time first scheduling
00:29 - algorithm gives you the minimal average
00:33 - waiting time I'm not saying that s jf
00:37 - with non preemption gives you the
00:39 - minimal average waiting time but this s
00:43 - RTF guarantees you to give the minimal
00:47 - average waiting time fine you will take
00:50 - any numerical and any problem and you
00:53 - apply all the algorithms on that problem
00:56 - see the society when you apply this si
01:00 - TF then you will get the average waiting
01:02 - time which is minimum out of all the
01:05 - algorithms ok no algorithm will give a
01:08 - burst time less than whatever the si TF
01:12 - will give you ok so the main advantages
01:15 - of this is what it gives you you can say
01:18 - the minimum average waiting time and
01:19 - main minimum turnaround time also fine
01:22 - second thing is it gives the better
01:25 - response time then first-come
01:28 - first-serve response time is 1 when the
01:31 - CPU would be allocated the first time to
01:34 - the process after arrival of that
01:36 - process so the response response time
01:39 - would be better in case of sjf rather
01:42 - than FCFS why so because you know we
01:46 - maybe apply the funded at the shorter
01:48 - the processes having shorter bursts time
01:51 - will be allocated to the CPU first that
01:55 - is why the response time would be better
01:57 - in this case third one is it gives you
02:00 - the maximum throughput now to put is
02:03 - what you can say a number of processors
02:05 - per unit time like see when you solve
02:09 - any numerical then
02:11 - this you draw the Ghent chart or you can
02:13 - say from here to here suppose we have
02:16 - completed one two three four five
02:18 - processes suppose fine so and here we
02:22 - have like from zero to let us suppose
02:25 - twenty two so from this to this this is
02:28 - known as what shade you'll how much time
02:31 - it is from zero to twenty two that is
02:33 - twenty three unit of time and in twenty
02:35 - three unit of time how many processes
02:36 - has been completed five processes so
02:39 - true patrolling will be five divided by
02:41 - twenty three so this is what the
02:44 - throughput fine so this sjf will give
02:47 - you the maximum throughput fine
02:51 - or you can say that s RTF specifically
02:53 - if you say then you can say aasaiya TF
02:56 - will give you the maximum throughput
02:58 - okay see this overall throughput would
03:02 - be same for all the processes from
03:04 - starting to the ending suppose this is
03:07 - the ending of the range chart this
03:08 - overall throughput would be same for all
03:11 - the algorithms because obviously if
03:13 - there are five processes then five
03:15 - processes would be there till from
03:17 - starting to the ending of this game
03:20 - chart but main funda is what when you
03:23 - stop at any point the schedule at any
03:27 - point and then you check the throughput
03:28 - from here to here in that case you can
03:32 - say that this s RTF will give you the
03:34 - maximum throughput okay more and because
03:39 - in s RTF or you can say in SJ if we try
03:42 - to you know complete or we try to
03:45 - execute the processes as early as
03:48 - possible because we choose the processes
03:52 - having minimum birth time first so we
03:56 - try to you know execute the processes
03:58 - many processes more and more processes
04:01 - as early as possible that is why it
04:03 - gives you the maximum throughput you
04:05 - check at any point of time in between
04:08 - the schedule C or D okay they say
04:10 - overall overall throughput would be same
04:12 - for all the algorithms okay now the
04:16 - fourth point is it providers standard
04:19 - for other algorithm in case of average
04:21 - waiting time okay
04:23 - standard mean means what siano algorithm
04:27 - will give you the burst time less than
04:28 - the Society F will give okay that is why
04:32 - if you apply any other algorithm on any
04:35 - process and the average waiting time is
04:38 - a very close to this average waiting
04:41 - time given by the Society F then you can
04:43 - say that that algorithm is also good
04:45 - fine that is why it it set up standard
04:49 - for other algorithms by checking out the
04:53 - average waiting time and comparing the
04:55 - waiting time with this algorithm you can
04:57 - say that particular algorithm is good or
04:59 - not good fine now let us see that
05:03 - disadvantages of this algorithm the very
05:06 - first or the main drawback is what that
05:08 - this algorithm is not implementable now
05:13 - you will say that if it is not
05:14 - implementable then why we are studying
05:16 - this algorithm although this algorithm
05:19 - is not implementable we cannot you know
05:21 - practically implement this algorithm
05:23 - this has not been implemented in any
05:25 - operating system yet okay but it
05:27 - provides us tender for other algorithm
05:30 - and why this algorithm is not
05:33 - implementable see this algorithm
05:35 - basically depends on the birth time main
05:38 - criteria is what we choose the
05:40 - processors having minimum having the you
05:42 - know shorter births time first rather
05:45 - than the process having larger burst
05:46 - time okay now see in FCFS what is the
05:51 - case the criteria was arrival time
05:54 - obviously that algorithm is
05:57 - implementable why so because in that
05:59 - case we know arrival time of every
06:02 - process before execution of that process
06:04 - when that process came into the ready
06:06 - queue okay that is why that is
06:07 - implementable but in this case prior to
06:10 - the execution it is almost impossible to
06:13 - you know know the burst time of the
06:16 - process or you can say how much time
06:18 - that process would take for its complete
06:21 - execution it is almost impossible to say
06:24 - before the execution of that process
06:26 - okay and the main criteria is what
06:28 - obviously the burst time and we don't
06:30 - know the burst time then how this
06:33 - algorithm can be implemented that is why
06:35 - I am saying
06:36 - this algorithm is practically not
06:38 - feasible to implement okay now although
06:43 - there are some ways using those method
06:46 - we can predict the burst time of the
06:49 - process just approximate prediction of
06:53 - the burst time of the processor I can
06:54 - you know I cannot say that we can
06:57 - predict the exact burst time of the
06:58 - process but we can predict the
07:00 - approximate burst time of a process so
07:04 - that those methods are discuss in next
07:06 - video now second disadvantages is it
07:10 - starvation problem with the processes
07:13 - having larger burst time now what does
07:16 - this starvation problem see in the
07:19 - previous video I have already discussed
07:21 - what is the difference between the
07:22 - convoy effect in the starvation problem
07:24 - FCFS is having convoy effect and in this
07:28 - in that video also I have discussed what
07:30 - a starvation problem okay a process is
07:34 - waiting for a you know indefinite amount
07:37 - of time because of some may be because
07:42 - if they know that processor is biased
07:45 - towards some other processes and that
07:49 - criteria may be priority of the
07:51 - processes or anything okay so let us
07:55 - discuss how the starvation problem is
07:57 - there in stf now let us take a pure life
08:00 - example now suppose you go to a burger
08:02 - shop and there you want to purchase
08:04 - around hundred burgers okay and suppose
08:10 - here is that counter boy and you went
08:15 - there and you you want to purchase
08:17 - hundred burgers and see what if the fund
08:22 - out for this shop is the counter boy
08:25 - will serve those person who are having
08:30 - order of maybe one two three or five
08:33 - burgers or less than you can save
08:35 - hundred burgers okay because 100 is very
08:39 - large amount and this counter boy will
08:42 - serve those persons who are having you
08:44 - know order of small amount of burgers
08:47 - and
08:49 - some other person come who require only
08:52 - one burger then counter boy will will
08:55 - will you know serve this person first
08:58 - fine another person came who is her
09:02 - requirement of two burger another person
09:04 - came three burger one burger five burger
09:06 - and so many persons are coming who
09:10 - require the burger less than 100 less
09:14 - than 100 so you are waiting here fine
09:18 - although you came first maybe after one
09:24 - person maybe you come after one person
09:26 - but he is serving the person who are
09:29 - coming after you but the case is he is
09:34 - serving those person because he is
09:36 - giving priority to those person who want
09:38 - one two or three burger so you can say
09:40 - less than hundred burgers okay now you
09:43 - are waiting waiting and waiting so this
09:45 - is what called starvation this is a long
09:48 - process so starvation problem will be
09:52 - with the processes having larger births
09:55 - time okay this is called starvation that
10:00 - is why here because the priority is what
10:02 - CPU will execute those processes Hamming
10:05 - shorter Borstein like in this case who
10:10 - who wants one or two burger the counter
10:13 - boy will serve those person first rather
10:15 - than you because they want 100 perverse
10:17 - so the first time of you is hundred you
10:19 - can say or these processes are having
10:21 - shorter bursts time than you that is why
10:24 - CPU is executed if you will execute
10:26 - those processes and you will have to
10:28 - wait that is why in this case starvation
10:31 - problem is there with the larger the
10:33 - processes having larger bursts I'm fine
10:37 - see now there can also be convoy effect
10:42 - although this this is not mentioned in
10:45 - any
10:46 - textbook that SDF will suffer from
10:49 - convoy effect but sometimes it is
10:51 - possible I feel it is possible because I
10:55 - observe I observe a case where in a safe
10:58 - also we the processes can suffer from
11:00 - convoy effect okay
11:03 - now let us take that example see I'm
11:05 - taking two cases case 1 and this one is
11:08 - case 2 now we are going to apply sjf
11:14 - with known preemption case as they up
11:18 - with known preemption I am NOT taking
11:20 - the example of SRT F okay with
11:22 - preemption because that gives you the
11:25 - that is the best one see here game chart
11:30 - will start the time from 0 I to 0 only
11:34 - one process is there that is P 1 so we
11:38 - are we are taking SJ with known
11:40 - preemption known preemption in that case
11:42 - once CPU is allocated one process that
11:44 - process will continue its execution tell
11:46 - its termination now the first time is if
11:51 - this one is 50 so it will execute till
11:54 - 50 now next is next see at 50 we have 1
11:58 - this one is done P 2 and P 3 not ready
12:01 - cube now now pick the process having
12:03 - minimum burst time 1 and 1 the first
12:05 - time is same for those before both the
12:07 - processes in that case you will check
12:09 - the arrival time where you will apply
12:10 - first come first so now check out who
12:13 - came first P to arrival time of this one
12:16 - is 1 this one is 2 1 is less than this 2
12:18 - so when I locate CPU do P 2 for 1 unit
12:21 - of time burst time is 151 and after that
12:24 - P 3 and this one is 50 so this one is
12:28 - first time is 1 so this would be 52 now
12:32 - calculate the completion time completion
12:35 - time of P 1 is what at what time P 1 has
12:38 - been completed at time 54 p2 it's 51 for
12:42 - P 3s it's 52 now turn around time
12:45 - turnaround time goobie completion time -
12:47 - arrival time 50 - 0 that is 50 51 minus
12:50 - 150 52 minus 2 that is 50 now waiting
12:55 - time waiting time would be turnaround
12:57 - time - first time
12:59 - turnaround time worse time 50-50 50
13:02 - minus 1 49 50 minus 1 that is 49 okay
13:07 - now the average would be so the average
13:10 - waiting time would be thirty two point
13:12 - six not check out this case grow again
13:15 - chart time you start from zero at zero
13:17 - we have two processes P 2 and P 3
13:20 - now the criteria is you have to pick a
13:22 - process having minimum Borstein but both
13:24 - are humming same boss time 1 and 1 so
13:27 - apply first come first so check out the
13:30 - arrival time but arrival time is also
13:32 - same for both the processes in that case
13:34 - what you will do to break the style you
13:36 - will you will check that for the
13:38 - ordering of that process CP 2 has been
13:42 - written before P 3 so we'll take P 2
13:43 - first okay for how long
13:46 - it will execute first time is 1 so from
13:49 - 0 to 1 in the after that at 1 say at 1
13:53 - we have 2 processes P 3 is also there P
13:56 - 2 has been done P 3 is also there and P
13:58 - 1 has also arrived at 1 so out of 50 and
14:01 - 1 out of these processes you will choose
14:03 - which one having minimum burst time
14:05 - because we are we are discussing the SJ
14:08 - with known preemption so will allocate
14:11 - cpu 2 P 3 for 1 unit of time 1 2 sorry 1
14:15 - 2 2 now next to P 1 for 15 out of time
14:19 - that is here we have 52 now here
14:23 - calculate completion time of P 1 it's 52
14:27 - completion time of T 2 1 completion time
14:31 - of P 3 to turnaround time done a long
14:34 - time means completion time - arrival
14:36 - time 52 minus 151 1 minus 0 1 2 minus 2
14:41 - minus 0 that is 2 now check out the
14:43 - waiting time waiting time turnaround
14:45 - time - burst time 51 minus 51 1 minus 1
14:47 - is 0 2 minus 1 that is 1 average waiting
14:50 - time would be 2 by 3 that is 0.6 now you
14:57 - can compare although we have applied
14:59 - what here sjf with known preemption
15:11 - but see here average waiting time is
15:14 - 32.6 here F is waiting time would be 0.6
15:18 - so this is what convoy effect we have
15:21 - discussed this in FCFS because because
15:24 - of this long process this process the
15:27 - long you can say that the process having
15:29 - larger burst time this p2 and p3 are
15:32 - having very small burst time but small
15:35 - the process is having shorter bursts
15:37 - time had to wait for a long time
15:41 - 450 unit of time that is why average
15:43 - waiting time has increased okay so for
15:49 - the same thing here we have three
15:51 - processes three processes same burst
15:52 - time but the change is what only the
15:54 - arrival time okay here I would hear the
15:58 - processes having shorter bursts time
16:01 - came first that is why we are located
16:04 - CPU to those processes first and that is
16:06 - why average waiting time is very less so
16:10 - we can say that if I feel that if we
16:14 - cannot say that sjf remove the convoy
16:17 - effect totally yes SRT F in a society F
16:21 - there is no if we convoy effect but sjf
16:25 - with known preemption is having convoy
16:28 - effect in some cases okay in next video
16:33 - I will discuss how to predict the burst
16:36 - time what are the methods to predict the
16:39 - burst time for sjf fine so till then
16:42 - bye-bye take