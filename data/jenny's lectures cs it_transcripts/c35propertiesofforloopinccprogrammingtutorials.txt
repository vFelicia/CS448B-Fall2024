00:00 - and the series of learning programming
00:01 - in c in the previous video I have
00:03 - discussed four Loops in C we have
00:05 - discussed General syntax of writing for
00:07 - Loop working of for loop with the help
00:09 - of a flowchart as well as with the help
00:10 - of a program right but we can do many
00:14 - things with for Loop means you can say
00:16 - some properties of for Loop or you can
00:17 - say uh you can do some tricky things
00:19 - some experiment with for loop it's not
00:21 - like that the way we have discussed in
00:24 - the previous video that is the only way
00:25 - to write for Loop no you can write four
00:28 - Loops in your program in multiple ways
00:31 - in many ways right and I'll be telling
00:34 - you some interesting facts you can say
00:36 - about four Loops how you can write for
00:39 - Loop in different different ways and
00:41 - that thing these facts are very
00:42 - important for you because uh these kind
00:46 - of questions when you see like uh code
00:48 - is given three or four lines are given
00:50 - and you are asked to uh give to tell the
00:52 - output of that code in these kind of
00:54 - questions they don't use that General
00:56 - syntax of for Loop they use those tricky
00:59 - things which you can do with for Loop
01:01 - means other ways to write for Loop right
01:04 - they they used to write for Loop in some
01:06 - other ways and if you don't know that in
01:09 - this way also you can write for Loop
01:10 - then what you will say then this program
01:12 - will give error but no that code will
01:14 - produce an output right so those things
01:17 - I'll be discussing in this video with
01:18 - for loop with proper examples right what
01:21 - other in what other ways you can write
01:22 - for Loops so now let us see some
01:24 - interesting facts about for Loop first
01:26 - of all I hope you remember what is that
01:29 - syntax of General syntax of writing four
01:31 - Loop four is a keyword in C in this we
01:35 - have three Expressions right and after
01:38 - the every expression we have semicolon
01:40 - means after expression one and two we
01:42 - have semicolon not after expression
01:44 - three so these two semicolons are
01:48 - compulsory in for Loop these are
01:52 - optional right that I have already told
01:53 - you in previous video now this is the
01:55 - general synx whatever you will write
01:57 - here uh you can say this is body of Loop
02:00 - the statements you want to execute again
02:02 - and again those we'll write here and
02:04 - that's it right now here this expression
02:07 - one is what this is
02:11 - initialization rather than this you can
02:12 - also write initialization this is what
02:14 - condition termination condition this is
02:16 - what update expression or modify
02:18 - expression right now what about this
02:21 - this is for initialization first of all
02:22 - discuss the properties of expression one
02:25 - right what you can do with this
02:26 - expression simply if you write for Loop
02:29 - like I want to print number from 1 to
02:30 - five then how you will write four we
02:33 - will take a variable we will initialize
02:34 - that uh suppose I'm taking I variable to
02:37 - 1 semicolon I less than equal to 5 and I
02:42 - ++ and in this you can simply print
02:45 - value of
02:48 - I what would be the output of this
02:50 - program it will print value from 1 2 3 4
02:53 - 5 output will be something like this 1 2
02:55 - 3 4 5 right after that obviously you
02:58 - have to use slash and here otherwise it
03:00 - will give output what 1 2 3 4 5 because
03:03 - we are not using any slash and for new
03:05 - line right so this kind kind of output
03:07 - you will get and if you will use here
03:10 - slash then what output you will get one
03:13 - would be printed after that we have
03:14 - slash slash means compiler will come to
03:16 - know that the cursor will move to next
03:19 - line so 1 2 3 4 5 this output you will
03:22 - get right now this is what
03:23 - initialization obviously in a program
03:25 - I'm not writing complete program
03:26 - somewhere before using this I have to
03:29 - declare the the variable in I right and
03:32 - before that we will suppose writing void
03:36 - Main in I and then for Loop and that's
03:39 - it I'm uh here you will write get and
03:43 - that's it over you will write that
03:45 - header files fine now this is what
03:48 - expression one and this is first of all
03:50 - optional in this C right you can write
03:53 - down for Loop without initializing this
03:55 - variable let me write down the program
03:58 - in a better way
04:08 - now this is our program I hope there
04:10 - would be no error in this program see
04:12 - now this is what optional in this so
04:15 - what you can write you can remove this
04:17 - from here fine but you have to put
04:21 - semicolon here right these two
04:23 - semicolons are compulsory you can remove
04:26 - this don't write anything here directly
04:28 - put semicolon and condition and then
04:30 - that increment or decrement but we are
04:33 - not initializing here rather than this
04:35 - we can initialize this I here only I
04:37 - equal to 1 that is also fine it will
04:39 - also give you same output 1 2 3 4 5
04:44 - right and if you will not initialize
04:47 - this here also and I am taking I'm not
04:49 - initializing this here and here I'm not
04:52 - initializing value of I then what output
04:54 - you will get you will get no output
04:56 - right see please write down the this
04:58 - code and whatever I'm going to tell you
05:00 - please note down those things and you
05:02 - have to run this program after removing
05:05 - this from here after initializing here
05:08 - and second thing is don't initialize
05:10 - here and do not initialize here means
05:12 - neither here nor here and then see what
05:14 - output you are getting and if I'm
05:16 - telling you wrong if I'm wrong then
05:17 - please let me know in comment box but in
05:19 - this case according to me it will not
05:21 - give any output right because you are
05:22 - not initializing value of I from where
05:25 - it is going to start right now next next
05:28 - is what the in this initialization here
05:32 - you can initialize more than one
05:34 - variable also it is not like that we can
05:36 - initialize only I here fine so you can
05:38 - also write here something like
05:41 - this suppose I is equal to 1 and I'm
05:45 - another taking a variable I'm taking J J
05:47 - is equal to Zer two variable I'm
05:50 - initializing three four you can
05:52 - initialize any variable and one more
05:54 - thing you have to take care between this
05:57 - initialization we should put what comma
06:00 - only not semicolon only two semicolons
06:03 - are allowed here this is what first
06:05 - expression initialization right in
06:08 - initialization I'm writing two one and
06:11 - two two syntax so you have to separate
06:13 - these two with comma only no semicolon
06:16 - right so now here what output you will
06:18 - get I is 1 and J is equal to Z and
06:21 - suppose I'm printing here both I and J
06:28 - right
06:30 - now what output you will get I value is
06:33 - one okay I value would be printed J
06:35 - value is zero J value will be printed J
06:38 - right now see I value become now I ++
06:42 - now I value becomes 2 2 is less than 5
06:44 - yes condition is true so it will again
06:46 - go here two would be printed but still J
06:49 - value is what zero only we are not doing
06:51 - anything with with J we are not
06:53 - incrementing we are not decrementing it
06:55 - right so it will print 0 0 0 0 J value
06:59 - would remain 0 0 and I value would be
07:01 - till 1 2 3 4 5 because once I value
07:04 - becomes six the condition would be false
07:05 - and it will exit the control will go out
07:08 - from the loop so this output you will
07:09 - get here right if you some do some
07:13 - increment of J also or decrement of J
07:14 - then also then you will get some
07:16 - different value of J but that also we
07:17 - discuss right so this is next case more
07:21 - than one initialization in this
07:23 - expression right next is what here you
07:26 - can also do something like this I is
07:27 - equal to 1 J is equal to Z and you can
07:31 - remove initialization part from here in
07:34 - this case also you will get same output
07:36 - right but if you have to tell me now
07:38 - this is question for you I'm writing
07:40 - simply like this I and J right and I'm
07:43 - writing suppose J is equal to zero and I
07:47 - is nothing and this is what there I'm
07:50 - writing nothing then semicolon I less
07:51 - than equal to 5 I ++ and I'm printing
07:53 - both I and J now what output you will
07:55 - get this is first question for you so
07:57 - you have to tell me in comment box right
07:59 - now next is I think we have discussed
08:02 - all the properties about expression one
08:03 - now expression two this is what you have
08:06 - we will give condition termination
08:08 - condition where the loop is going to end
08:10 - that condition this is also optional
08:13 - second property is what here also you
08:15 - can write down multiple conditions right
08:18 - so let me take uh let me take one case
08:28 - here
08:35 - see First cases it is optional suppose
08:38 - you remove the condition here we are not
08:40 - putting any condition here just i1 J1
08:44 - semicolon nothing here right you don't
08:47 - need to put any space semicolon again
08:49 - semicolon I ++ and you are printing I
08:52 - and J what output you will get here
08:55 - there is no condition means condition
08:57 - would not be false so so it would be an
08:59 - infinite Loop if you remove condition
09:02 - from the loop then that Loop would be
09:05 - infinite Loop right you can run this and
09:07 - you can see the output you have to put
09:09 - some condition to terminate the loop so
09:12 - next Cas is I'm putting two conditions
09:14 - here multiple conditions we can put here
09:17 - I suppose great sorry less than equal to
09:20 - 5 and if you're putting two condition
09:23 - then we will put comma in between those
09:25 - no semicolon and J less than
09:30 - three then semicolon and here I'm
09:33 - putting suppose I
09:35 - ++ right no j++ I'm not doing anything
09:38 - with J here so now I'm printing I and J
09:41 - what output you will get C both I and J
09:44 - in starting would be
09:46 - zero right now see this Loop will
09:51 - execute until this the second condition
09:55 - becomes false all the other conditions
09:58 - before the last condition would be
09:59 - treated as simply statements there would
10:03 - be no effect of these
10:05 - conditions what does this mean whatever
10:07 - I am saying so it will check the
10:10 - termination condition this would be
10:13 - treated as a termination condition the
10:14 - last one if here I'm putting three
10:17 - conditions I less than equal to 5 J Less
10:19 - Than 3 and suppose one variable again
10:21 - I'm taking k k less than equal to 6 then
10:24 - termination condition would be K less
10:26 - than equal to 6 these condition would be
10:29 - be Tre treated as a statement only so
10:32 - the last condition whatever you will
10:34 - whatever you will give that would be
10:36 - treated as a termination condition only
10:38 - right now here this is termination
10:41 - condition it is not going to uh know
10:44 - make any effect on the loop so now J is
10:46 - zero yeah J is less than three right now
10:50 - enter into this Loop what would be
10:52 - printed i1 J uh Zer now after that
10:55 - control we go to this expression three I
10:58 - ++ I becomes now two right now two would
11:02 - not be printed two not be you know
11:03 - checked here again I value is two and J
11:07 - value is still zero we are not doing any
11:09 - updation on J so now J is less than
11:11 - three yes so I value would be two J
11:14 - value again zero now value becomes three
11:17 - J value is again zero that is less than
11:19 - three 0 now do you think this Loop is
11:23 - going to end no why so because I have
11:27 - told you the rule is what
11:29 - this for Loop will treat the last
11:31 - condition you have given that it would
11:33 - be it is treated as the termination
11:36 - condition and the J would always be less
11:39 - than three because we are not updating J
11:41 - value in this Loop so this would be
11:43 - infinite Loop this condition is okay
11:46 - this is termination condition once I
11:48 - value becomes 4 five you will say that
11:51 - yeah once I value becomes six it should
11:53 - be terminated here but no this would be
11:55 - treated as simple statement this would
11:57 - be treated as a termination condition
11:59 - and this would never fail because I
12:01 - value is 0 0 would always be less than
12:03 - three so it would be an infinite Loop
12:06 - right you can run this program if you do
12:09 - something like this I'm putting here
12:12 - comma
12:15 - j++ this is property of expression three
12:18 - here also you can update you can write
12:21 - down multiple update statements right 1
12:25 - 2 3 now J value also
12:27 - becomes one and after that it becomes
12:31 - one after that it becomes two and once
12:34 - it becomes three three is not less than
12:36 - three so it will terminate here so this
12:38 - output you will get here I value would
12:40 - be 1 2 3 J value would be
12:42 - 012 right I hope you got the properties
12:46 - of expression two right see here suppose
12:49 - if you update I less than equal to 100
12:52 - and J is less than 3 I ++ j++ and you
12:55 - are in you are just know printing value
12:57 - of I and J then only the output would be
13:00 - till 1 2 3 I would be incremented till
13:03 - three because here this would be treated
13:06 - as a termination condition so it is not
13:08 - going to take give any effect not going
13:11 - to make any effect on the termination
13:13 - condition although I is less than equal
13:14 - to 100 I is three only but still it will
13:17 - not print 4 5 6 up to 100 right I hope
13:20 - you got my point here and one more thing
13:22 - in expression two the condition you can
13:24 - also write either zero or one zero would
13:27 - be treated as false condition one would
13:29 - be Tre treated as a true or 1 2 3
13:32 - anything you will write other than zero
13:33 - that would be treated as true condition
13:36 - right and it's not like that always you
13:38 - have to write less than greater than
13:39 - equal to you can also write I equal
13:44 - [Music]
13:46 - to uh 10 that also you can give now this
13:50 - is assignment for you simple the loop is
13:53 - i1 j 0 rather than these two condition
13:56 - I'm just putting the termination
13:58 - condition I equal to equal to 10
14:01 - semicolon I ++ j++ I'm printing I and J
14:04 - value right you have to tell me in
14:05 - comment box what should be the answer of
14:07 - this thing right if you write this here
14:10 - next is what here you can also write
14:13 - down those logical statements also it's
14:15 - not like that you can only write down
14:17 - these conditions suppose I'm writing
14:19 - here and logical
14:22 - and J Less Than 3 right and I ++ j++ so
14:27 - now see I value is one this condition is
14:30 - true so it will check both the
14:32 - conditions if both are true then only it
14:35 - will enter into this Loop then only it
14:37 - would be considered as a true condition
14:40 - J Less Than 3 yes J is less than three
14:42 - so okay it will enter into this uh one
14:45 - into this uh you can say body of the
14:47 - loop right if any of this condition is
14:50 - false it is going to exit right and
14:53 - rather than this you can also write down
14:55 - here I less than equal to uh this 100
14:59 - or logical or J Less Than
15:05 - 3 and i++ j++ now see this is one
15:10 - condition now please don't think we are
15:11 - putting two condition here we are using
15:14 - logical or operator between this and
15:16 - this so this would be considered
15:18 - considered as a complete termination
15:20 - condition now here see what output you
15:22 - will get either this is true or this is
15:25 - true it will considered as true only if
15:27 - both are false then then only it will it
15:29 - will be considered as false I hope you
15:31 - remember the truth table of this logical
15:33 - or operator so now I less than 1 first
15:37 - of all J is less than three condition is
15:39 - true now I becomes 2 3 J becomes 0 1 2
15:43 - right now
15:44 - see when I value becomes 4 and J value
15:47 - becomes after 2 it will become three
15:50 - right now I less than equal to 100 four
15:53 - 4 is less than 100 right but you you can
15:56 - say J is not less than than three but
16:00 - still it is going to execute the control
16:02 - will enter into here why so because one
16:06 - condition is true and in logical or
16:07 - operator if the first condition is true
16:09 - then it will not check the second
16:11 - condition it will give what result true
16:14 - and if this condition is true then
16:15 - control will enter into this Loop right
16:18 - now I value becomes
16:20 - four and J value becomes
16:23 - 3 again I value becomes five J value
16:26 - becomes now four but still it will enter
16:30 - here right I hope you got my point if
16:33 - you put this logical or then it will
16:36 - print up to
16:37 - 100 means I value becomes when I value
16:40 - becomes one 1 then only it is going to
16:43 - stop
16:45 - right but if you will not put this
16:48 - logical or and if you will you will put
16:50 - simply comma here means it will consider
16:52 - the this as two conditions and this
16:54 - would be considered as a termination
16:56 - condition right means here you can use
16:58 - less than means relational operator also
17:00 - that what logical operator also here and
17:03 - those equality operator also it's not
17:04 - like that you can only use less than or
17:06 - greater than and these kind of things
17:08 - right so please try to do some
17:09 - experiment with these conditions and all
17:11 - third expression this is what this is
17:13 - also optional second property is what
17:14 - here also you can include more than one
17:16 - update expression here I'm writing i++
17:18 - as well as j++ right you can do three
17:21 - also or you can remove this if you
17:23 - remove this from here I'm removing
17:26 - suppose this is what I'm writing comma
17:30 - again two two conditions right and I'm
17:34 - removing here both the conditions I ++
17:37 - and
17:38 - j++ so what you can do here you can put
17:43 - one way is here you can put I ++ as well
17:46 - as j++ within the body of the loop after
17:49 - that you can close this Loop or I equal
17:51 - to I + 1 J equal to J + one right and
17:55 - this is also same output you will get
17:57 - here till this condition become false
18:00 - you will get this output only right and
18:03 - if you will not increment or decrement
18:06 - these things anything you're not writing
18:08 - here you you are not writing here then
18:10 - in that case what output you will get
18:12 - then that this condition would always be
18:15 - true because Zer is always less than
18:16 - three and it would be an infinite Loop
18:20 - right so in this case what output you
18:22 - will get because we are not doing any
18:24 - plus plus or minus minus here values
18:27 - would be always one and zero right 1 0 1
18:30 - 0 it will print one 0 infinite time
18:32 - because condition would always be true
18:35 - fine now suppose second variation is
18:38 - what I'm doing here I
18:41 - ++ just I ++ only here I'm not using any
18:45 - updation on J then also it is going to
18:48 - be an infinite Loop but here if it will
18:51 - not print one one J value is 0 0 but on
18:55 - I value I'm going to increment I value
18:57 - so that is 1 2 2 3 like this it is going
19:00 - to print J value would be zero I value
19:02 - would be 1 2 3 it is increasing fine but
19:05 - that would be infinite Loop because this
19:07 - condition would always be true right
19:10 - next is if you are not using I ++ and
19:14 - I'm just printing j++ I'm just uh
19:16 - writing what j++ here no I ++ no iusus
19:20 - no updation on I just j++ I'm doing in
19:23 - that case what output you will get I
19:26 - value would be same that is 1 one but
19:28 - now j++ means one time first of all J is
19:32 - zero one once it will enter here then J
19:35 - becomes two after that sorry j becomes
19:38 - one then becomes two then once J value
19:41 - is three this condition would not be
19:42 - true and it will be out of the loop so
19:44 - this output you will get right I value
19:47 - would be same always right and one more
19:50 - thing it is not always compulsory to
19:52 - initialize these variables something
19:53 - like this I'm taking suppose only one
19:55 - variable here uh I only right right and
19:59 - uh no J variable I'm just putting I ++
20:02 - here and here Al here you can also write
20:05 - I is equal to suppose I'm taking two
20:07 - more uh that uh variables here INT in
20:11 - next line int a is equal to 5 b is equal
20:14 - 6 you can also write here A + B
20:18 - something like this you can Al also
20:20 - write a + bide by 2 A Plus bide by 5 so
20:24 - here you can also write down some
20:26 - expression while you are initializing
20:28 - the value of I right it is not always
20:31 - compulsory to put any constant value
20:33 - here also it is always not compulsory to
20:35 - put I ++ IUS minus you can also do here
20:38 - something like this I is equal to i/ 2
20:41 - that is also fine or you can write write
20:44 - down here uh that is I + 2 that is also
20:48 - fine I into 2 that is also fine right or
20:51 - you can write down here what I equal to
20:54 - I + a that is also fine or I + b
20:58 - something like this means ultimately
21:01 - what I want to say is here also you can
21:03 - use any type of expression not just I ++
21:05 - I minus minus here also you can
21:07 - initialize this with any type of
21:08 - expression also right now next uh
21:13 - property is what if all the expressions
21:16 - are optional then suppose if you are
21:18 - writing Loop something like this for
21:21 - Just Two
21:22 - semicolons and you are writing something
21:24 - here I'm just printing suppose Jenny
21:27 - here
21:28 - what output you will get see I have told
21:31 - you if you don't write condition in this
21:33 - Loop then that Loop would be up to run
21:36 - up to Infinity so this Loop would be an
21:38 - infinite Loop because you're not putting
21:40 - any condition here this would always be
21:41 - true right but this is fine you can
21:44 - write down this something like this it
21:46 - is not give it is not going to give you
21:47 - any error right next thing is what if
21:51 - you put here some condition right
21:53 - suppose I less than 5 that's it and here
21:57 - I'm initializing this in I is equal to 1
22:01 - then what output you will get how many
22:02 - times J would be printed here because we
22:04 - have put some condition so I is one
22:07 - right 1 2 3 4 four times Jenny would be
22:09 - printed after that Jenny would not be
22:11 - printed because this condition will
22:12 - become false right so I hope you got my
22:15 - point next point is you can also write
22:18 - something like this suppose I want to
22:20 - print 10 9 8 up to 1 then in for Loop
22:23 - you can write down I is equal to 10 I
22:26 - greater than what greater than 0 and
22:29 - iusus and then you can simply print here
22:32 - I so those values would be printed here
22:35 - right uh next point about for Loop is
22:38 - what now let us take uh this
22:42 - example so now let us take this example
22:44 - same i j i less than 5 J less than equal
22:47 - to 6 and I'm giving what condition I ++
22:49 - j++ but what is the difference here
22:52 - please note here I'm putting semicolon
22:54 - after this four Loop but it will not
22:56 - give you any error don't think it will
22:57 - give error but you will not get the
22:59 - output whatever you think see you are
23:02 - terminating this four Loop here so it
23:04 - will not consider this as a body of the
23:06 - loop it is not going to enter here this
23:09 - would be considered as a simple
23:11 - statement of means this is a part of
23:13 - this program it would considered as the
23:15 - statement as a part of this program but
23:17 - not part of this for Loop so it will not
23:19 - run again and again what output you will
23:21 - get here first i1 j0 this is what
23:25 - treated as termination condition the
23:27 - second condition
23:29 - next time it will not give any it will
23:31 - not enter here because you are
23:32 - terminating this for Loop here but
23:34 - condition is true so without entering
23:36 - here next step is what it will execute
23:39 - this thing I ++ j++ I becomes what 2
23:42 - J1 condition is still true 3
23:49 - 2
23:52 - 6 6
23:56 - now once J value becomes six condition
23:59 - is still true again j++ means 7 and I
24:02 - becomes what uh 8 right but now see what
24:07 - condition is not true but the values in
24:10 - memories are updated I value becomes
24:12 - what this is I this is a I value becomes
24:15 - eight and J value becomes seven right
24:18 - now it's fine and the condition is not
24:21 - true out of the loop and this statement
24:24 - would be treated as a part of the
24:25 - program so now the statement would be ex
24:27 - uted now value of I you will print what
24:31 - what output you will get 8 87 I value is
24:34 - 8 J value is 7 right if you put
24:37 - semicolon there next case is what if you
24:41 - put semicolon here but you are not
24:43 - putting j++ here you putting j++ in
24:47 - this in this body of the loop right I'm
24:50 - just putting I ++ here now what output
24:53 - you will get this Loop will run to
24:55 - infinite why so because is I told you if
24:59 - you put semicolon here means you are
25:00 - terminating this four Loop and this this
25:03 - would be not be treated as a part of the
25:05 - four Loop this would be treated as these
25:08 - two statement would be treated treated
25:10 - as a simple part of the program not part
25:12 - of the four Loop so now if you will not
25:15 - do any increment in J then this
25:17 - condition would always be true J value
25:19 - would always be zero this condition
25:22 - would always be true means no
25:23 - termination condition and this would
25:25 - become an infinite Loop
25:28 - right but if you do something like this
25:30 - here I'm putting j++ and here I'm
25:33 - putting I
25:35 - ++ now what output you will get this is
25:39 - I think assignment for you guys I have
25:41 - already discussed two types of things
25:43 - here I hope you got the working of the
25:46 - for Loop once you find semicolon after
25:48 - the for Loop so now tell me you are
25:51 - giving j++ here and I ++ here right what
25:54 - output you will get please don't run
25:56 - this first of all first of all try at
25:58 - your own dry run this program after that
26:00 - run it on your laptop and see what
26:02 - output you are getting and tell me what
26:03 - output you will get here right
26:09 - now and if you you don't get how you are
26:13 - getting that output then you can ask me
26:14 - in comment box I'll explain in next
26:16 - video fine so I hope I have discussed
26:20 - everything about these expression
26:22 - properties of these expression and what
26:23 - different kind of ways you can write
26:25 - down for Loop so this is for you you
26:28 - have to tell me again the output of this
26:35 - thing so now tell me this is the for
26:38 - Loop I'm taking here three uh variables
26:42 - actually and I'm printing i j k so what
26:45 - output you will get you have to tell me
26:46 - in comment box right so that's it about
26:48 - for Loop in next video I'm going to
26:50 - discuss a simple program uh using for
26:54 - Loop so now I'll see you in the next
26:55 - video till then bye-bye take care