00:00 - first are given then you are arranging
00:01 - the data in either ascending order or
00:03 - descending order you can see and if
00:05 - character data is given then sorting
00:07 - means to arrange that data
00:09 - alphabetically fine many sorting
00:12 - techniques are there bubble sort
00:13 - insertion selection quick merge for a
00:16 - Dix shell heapsort
00:17 - okay we'll discuss all the sorting
00:19 - techniques one by one in this video I am
00:21 - going to discuss with you what is bubble
00:23 - sort
00:23 - first of all we'll discuss the working
00:26 - principle of this bubble sort with an
00:29 - example how bubble sort works how the
00:31 - data is to be sorted using this
00:33 - technique then we'll write down the code
00:35 - and after that we will see what
00:37 - modification we can do we can make in
00:40 - that algorithm of bubble sort for
00:43 - improving that algorithm okay now first
00:46 - of all let us take one example suppose
00:49 - data is given 15 16 6 8 and 5 and the
01:01 - state is stored in an array suppose
01:03 - there a name is a so the index would be
01:06 - from 0 1 2 3 4 something like this ok
01:10 - number of elements are 1 2 3 4 5 so
01:14 - suppose n is equal to 5 number of
01:16 - elements are n and n is equal to 5 now
01:20 - what is the basic principle of bubble
01:24 - sort in this case the adjacent to
01:27 - adjacent elements are to be compared if
01:30 - those elements are in correct order then
01:34 - it's fine
01:35 - will move further and if those elements
01:38 - are not in correct order then we will
01:41 - swap these elements now what do you mean
01:44 - by this in correct order see it depends
01:47 - you are you are sorting the data in
01:49 - ascending order or descending order
01:52 - now here by default if I say sorting
01:54 - then here I mean we are going to arrange
01:57 - the data in ascending order fine
02:00 - so the question is the data is given
02:03 - when area is given having these elements
02:06 - and you are going to arrange this data
02:08 - in ascending order you are going to sort
02:10 - the data in
02:11 - ascending order using bubble sort okay
02:15 - now what are the simple four nine bubble
02:17 - sort we are going to start from first
02:19 - element and in bubble sort this first
02:23 - element is compared with the second
02:24 - element fine and if these are in these
02:28 - elements are in you know in correct
02:30 - order these are not in correct order
02:32 - then we are going to swap these elements
02:34 - then next to it
02:35 - adjacent elements are to be compared the
02:37 - next two adjacent element are to be
02:39 - compared and next two adjacent elements
02:41 - are to be compared fine until we reach
02:44 - to the last of the serie so now
02:47 - according to the bubble sort first of
02:49 - all these two elements are to be
02:53 - compared a of zero name of there is a of
02:56 - zero is compared with you one or you can
02:58 - say in bubble sorting a of name of
03:02 - suppose I raise this a a of I is
03:05 - compared with a of I plus one fine and
03:12 - if these two elements are in wrong order
03:16 - then they are to be swap and if the
03:19 - these elements are in correct order then
03:24 - no swapping would be done fine now see
03:30 - 15 and 16 are to be compared we are
03:32 - going to arrange the data in ascending
03:34 - order then no swapping would be done so
03:36 - after that after this comparison the
03:39 - array would be something like that 15 16
03:42 - 6 8 and 5 because no swapping is to be
03:47 - done fine because 15 is less than 16 so
03:50 - 15 and 16 are in correct position now
03:55 - next is a 1 and a 2 are to be compared
04:00 - fine now see these are in wrong order
04:05 - so we are going to do swapping so 6
04:09 - would be at this place and 16 would be
04:11 - it would be at this place so after
04:13 - swapping the array would be 15 6 16 8
04:18 - and 5 now
04:22 - makes sense these two elements are to be
04:25 - compared a of two and a of three now now
04:29 - in this case also swapping would be done
04:31 - because 16 is greater than 8 so 16 would
04:34 - be at this side so the array would be is
04:37 - 15 6 8 16 and 5 next comparison is this
04:43 - with this one
04:45 - now also swapping would be done now the
04:47 - array would be 15 6 8 5 and 16 okay
04:54 - now this is known as this complete is
04:59 - known as pass 1 and here you can see the
05:07 - largest element from this array has
05:11 - bubbled up to its right position to the
05:15 - end of the array after completion of
05:18 - pass 1 the one element that which is the
05:23 - largest element has bubbled up to its
05:26 - correct position okay that is why it is
05:29 - known as bubble sort
05:31 - okay so now one element is in its
05:35 - correct position fine and this this
05:39 - complete is known as pass 1 now we are
05:43 - not still done with the sorting because
05:45 - the array is now this and this is not a
05:47 - sorted array now after this again we are
05:51 - going to start from first element okay
05:55 - after pass 1 we are going to start pass
05:59 - to and now in passed to array is 15 6 8
06:05 - 5 and 16 fine say apply the logic of
06:11 - bubble sort to adjacent we are going to
06:13 - start from the zeroth element and two
06:15 - adjacent elements have to be compared if
06:17 - they are in you know correct position
06:19 - the no swapping would be done if these
06:21 - elements are in wrong position then
06:23 - swapping would be done now start from
06:25 - here only
06:27 - first of all compare 15 and 6 so
06:31 - swapping would be done yes
06:33 - 6
06:34 - fifteen eight five and sixteen next
06:38 - these two elements would be compared
06:40 - swapping would be done yes six eight the
06:44 - side 15 5 and 16 next these two elements
06:49 - would be compared swapping would be done
06:51 - yes 6 8 5 15 and 16 next these elements
06:58 - is to be compared 6 8 5 swapping would
07:01 - be done no 15 and 16 now we are reached
07:06 - we have reached to the end of this array
07:08 - now this is pass - now after completion
07:13 - of pass to say see two elements are at
07:19 - its correct position this is the largest
07:21 - element and this is the second largest
07:24 - element now these two elements are at
07:27 - its correct position now remaining
07:30 - elements are these three elements now
07:32 - again we are going to repeat the same
07:34 - state where we are going to we are going
07:36 - to start from the here only from the 0th
07:39 - position and we are going to compare a
07:40 - decent elements because still we are not
07:43 - done with the sorting so now in past
07:46 - three in past three see now array is
07:52 - what 6 8 5 15 and 16 now again we are
08:02 - going to start from this to this from
08:04 - starting only starting element swapping
08:07 - would be done knows no swapping would be
08:09 - done so the array is 6 8 5 15 and 16
08:13 - next these elements are to be compared
08:15 - swapping would be done yes 6 5 here SEC
08:19 - 8 this position 59 16th
08:23 - next these elements 6 5 swapping would
08:27 - be done no hate 15 and 16 next is this
08:33 - one and this one 6 5 8 no swapping would
08:37 - be done 5916 now we are raised to the
08:40 - end of the array now this is passed
08:42 - 3 now after passed 3 3 element
08:47 - Harr at its correct position largest
08:50 - second largest and third largest now
08:53 - remaining are two elements now next pass
08:57 - would be passed for and in pass for
09:01 - arrays six five eight fifteen and
09:04 - sixteen now again same steps would be
09:07 - repeated from the zeroth element
09:09 - swapping sorry the comparison would be
09:12 - done with the adjacent element here
09:15 - swapping would be done yes so after
09:17 - swapping array would be five six eight
09:19 - fifteen or sixteen next this with this
09:23 - five no swapping six eight fifteen and
09:26 - sixteen next with this one five six no
09:31 - swapping would be done eight fifteen and
09:33 - sixteen next with this one five six
09:37 - eight fifteen and sixteen now this is
09:41 - the now we have reached to the end of
09:44 - the array okay now this is what the
09:46 - sorted array after pass for these four
09:50 - elements four elements these four
09:53 - elements are its correct position and
09:55 - total elements are five then obviously
09:59 - you can say it's common sense if five
10:01 - elements are there then you need to
10:04 - solve only four elements then obviously
10:06 - the fifth element would automatically be
10:09 - at its correct position right so now we
10:14 - have sorted these four elements so this
10:16 - element the fifth element is
10:17 - automatically at its correct position so
10:20 - now this array is now sorted how many
10:24 - passes you require one two three and
10:27 - four to sort how many elements five
10:31 - elements okay so how to calculate how
10:35 - many number of passes required number of
10:37 - elements minus one if number of elements
10:41 - are six then how many passes would be
10:43 - required five number of elements are ten
10:46 - the number of paths number of passes
10:48 - would be nine okay we will modify this
10:52 - also it's not like that if number of
10:54 - elements are ten then those elements
10:56 - would be sorted in nine passes only
11:00 - okay that is not a rule we are going to
11:03 - see that case also okay this is the
11:05 - general case if n elements are there
11:07 - then in bubble sort these these steps
11:11 - would be repeated how many times n minus
11:13 - 1 times C now within this path how many
11:18 - comparisons are there 1 2 3 4 4
11:22 - comparisons right within this purpose
11:25 - also we have 1 2 3 4 comparisons within
11:28 - this past 1 2 3 4 this past 1 2 3 4 so 2
11:34 - loops would be there one loop is 4
11:36 - passes 1 2 3 4 and 2nd loop is for these
11:42 - comparisons or you can say iterations
11:45 - fine with in the past how many
11:48 - comparisons are there so one outer loop
11:52 - is for pass passes and within the passes
11:56 - one inner loop would be there for these
11:58 - comparisons fine now how to write the
12:02 - code write down the outer loop for
12:06 - suppose we are taking one variable I is
12:10 - equal to outer Lopes for these number of
12:13 - passes and how many times this loop
12:16 - would be executed n minus 1 times right
12:21 - because number of elements are air-five
12:23 - number of passes are 4 that is n minus 1
12:26 - so this loop would be executed for how
12:30 - many times n minus 1 times so if we are
12:34 - going to start I from 0 then I should be
12:38 - less than n minus 1 and I plus plus I
12:45 - hope you got the concept ok here here
12:49 - suppose is from 0 so here you can say
12:52 - this pass is for i is equal to 0 when I
12:56 - is equal equal to 1 then this pass when
12:58 - I is equal to 2 then this pass and when
13:00 - I is equal to 3 then this pass okay
13:06 - that is why I am taking I is equal to
13:08 - from 0 to less than n minus 1 here n is
13:10 - 5 5
13:12 - - one that is four so I is less than
13:15 - four it means I is equal to till I is
13:18 - equal to or you can say is till three if
13:21 - you take I is equal to one then you can
13:23 - say I is less than equal to n minus one
13:25 - now within this within this loop one
13:29 - inner loop would be there that is for
13:32 - suppose J is equal to zero and this loop
13:37 - is for these comparisons so how many
13:41 - comparison within each pass one two
13:43 - three four four four four and four
13:45 - it means n minus one comparison so you
13:48 - can say J is less than n minus one same
13:53 - fine we are going to start from zero
13:55 - that is why I'm taking J is less than n
13:57 - minus one if you write here J is equal
14:01 - to one then you can say J is less than
14:02 - equal to n minus 1 and here you write J
14:06 - plus plus fine now the main logic is
14:12 - what now we are we are going to check if
14:14 - this element is greater than this
14:17 - element then you do what swapping fine
14:21 - see here this case you can say here no
14:24 - swapping is done but here this element
14:26 - is greater than the next element so that
14:29 - is why we have done what swapping so
14:32 - here what you will check if if name of
14:37 - this array is a a of J is greater than a
14:44 - OH J plus 1 then you do what swapping
14:50 - and swapping is you I guess you know the
14:53 - logic you just take a temp variable and
14:55 - do the swapping so we do what temp is
14:58 - equal to a of J and a of J is equal to
15:04 - AO J plus 1 and then a of J plus 1 is
15:09 - equal to M this is the simple logic of
15:13 - swapping fine this is for if this is for
15:16 - the this for loop and this is for outer
15:19 - for loop like this
15:21 - but now you can modify this logic how
15:24 - see here how many comparisons are there
15:28 - for comparisons but after pass one the
15:30 - largest element is at its correct
15:33 - position right so in in this pass do you
15:38 - really need to compare 15 with 16 I
15:41 - guess no why so because we know that the
15:45 - last element is the largest element so
15:48 - no need to compare this element because
15:50 - we know that this element is always less
15:52 - than this element and no swapping would
15:55 - be done so here no need to do this
15:57 - comparison right in this path also see
16:01 - now after pass to these two elements are
16:04 - its correct position the largest element
16:05 - and the second largest element so here
16:08 - we know this is the largest element this
16:10 - is the second largest element fine then
16:13 - do you really need to compare eight with
16:16 - 15 no because these elements are it's
16:20 - correct position these are the two
16:22 - largest element so we can say that
16:25 - obviously this element would not be
16:27 - greater than this element so no need to
16:30 - compare this and obviously then no need
16:32 - to do this comparison fine
16:35 - so in this pass only two comparisons are
16:37 - required in this pass only one two three
16:40 - comparisons are required and in this
16:42 - pass see after pass three three elements
16:45 - are in its correct position so you can
16:47 - say this array is sorted and this is
16:50 - unsorted now you just have to compare
16:53 - these elements because these are already
16:55 - sorted so in this case we only need this
16:59 - comparison we don't need this comparison
17:01 - we don't need this one and we don't need
17:03 - this one no need to compare this element
17:06 - with this one because we know this is
17:08 - the third lads third largest element and
17:11 - this element cannot be greater than this
17:12 - element so why we are comparing this
17:14 - element we are only increasing the
17:16 - computation time no need to do this
17:18 - comparison fine
17:20 - now how to modify this code see this
17:24 - number of comparison depends on this
17:28 - I value because when I when you zero
17:32 - then
17:33 - how many comparison n minus-1 comparison
17:35 - but when I value is 1 then only 1 2 3 3
17:40 - comparisons it means one comparison less
17:44 - so when I value is 2 then how many
17:47 - comparisons only 1 2 comparisons so you
17:51 - can say when I when you is increasing
17:53 - number of comparisons are decreasing so
17:57 - this number of comparison depends on
17:59 - high value fine and for number of
18:04 - comparison which loop is there this
18:06 - inner loop is for number of comparisons
18:08 - so we can modify this inner loop we have
18:11 - to modify this inner loop now how to
18:12 - modify this loop this loop now this loop
18:16 - is not dependent on this I because we
18:20 - are just going to start J with the 0 and
18:23 - then we are going to increase the day
18:25 - value till less than n minus 1 so now
18:28 - you can do what here you can write n
18:35 - minus 1 minus I n minus 1 minus I if you
18:49 - do this case then that that unnecessary
18:53 - comparisons can be avoided so how this
18:57 - will work see let us take one case let
18:59 - us take a value is equal to 2 fine 2 is
19:04 - less than n minus 1 n minus 1 is what n
19:07 - is 5 5 minus 1 is 4 yes this condition
19:09 - is true 2 is less than 4 then we'll go
19:12 - to this loop J is equal to 0 now J is
19:16 - equal to 0 so J is less than n minus 1
19:21 - minus I n is equal to 5 5 minus 1 4 4
19:25 - minus I value is 2 4 minus 2 is 2 yes 0
19:31 - is less than 2 yes then we will enter
19:34 - this loop now we'll compare what a of 0
19:40 - greater than a of 1 now see I is equal
19:44 - to 2
19:46 - a of zero greater than a of one no this
19:49 - condition is not true because 6 is less
19:51 - than 8 fine so we will not enter in this
19:55 - condition because this condition is not
19:57 - true so we will not enter here finally
20:00 - what what should be done
20:01 - J plus plus now J is 1 now here what is
20:05 - there 5 minus 1 minus 2 that is 5 minus
20:09 - 3 is 2 now 1 is less than 2 yes we will
20:11 - enter again this loop now we will check
20:14 - a off now J is what one there is 1
20:19 - greater than a or J plus 1 is 2
20:24 - now check a of 1 is this one and a of 2
20:28 - is this one if this one 8 is greater
20:31 - than 5 yes then swapping would be done
20:34 - so we have done the swapping 5 & 8 now J
20:39 - value it been increased now J is equal
20:41 - to 2 but 2 is not less than 2 so now
20:47 - they will not enter into this loop this
20:49 - condition is not true and we will go out
20:54 - from this loop and I plus 4 plus now I
20:57 - is equal to 3 how many comparisons are
21:00 - there 1 & 2 only so in this case how
21:03 - many comparisons are required one end to
21:05 - only because 15 and 16 I have already
21:08 - told you this comparison not required
21:10 - this comparison in this comparison is
21:11 - also not required fine so this is how
21:16 - you can you can avoid the unnecessary
21:18 - comparison so only by writing here n
21:20 - minus 1 minus I this is why we write
21:23 - here n minus 1 minus I now one more
21:26 - modification you can do in this
21:28 - algorithm and that is known as optimized
21:30 - bubble sort now what is that
21:32 - modification see in this case how many
21:35 - passes after how many passes you got the
21:38 - sorted array after four passes you can
21:41 - say after n minus 1 passes but every
21:44 - time this is not true maybe sometimes 10
21:47 - elements are there and only after
21:49 - executing 3 passes you got the sorted
21:53 - array fine but when you apply this logic
21:58 - then this this program would be executed
22:01 - for how many times n minus 1 you can say
22:05 - if n is equal to 10 then for nine times
22:10 - this is to be executed fine
22:13 - and if suppose this this all the
22:16 - elements all the elements has been
22:18 - sorted after the third pass only then
22:22 - remaining passes are wasted wastage of
22:24 - time now so what you can do is so to get
22:29 - this point let us take one more example
22:31 - see now we are going to take one more
22:33 - example see suppose this is the array 16
22:36 - 14 5 6 & 8 how many elements five
22:40 - elements okay now according to this case
22:43 - how many passes would be required this
22:45 - this numerical urn you can say this
22:46 - program would be executed for how many
22:48 - buses four passes n minus 1 n minus 1
22:54 - fine now see when you apply the bubble
22:56 - sort then you see that you see that in
23:00 - pass 1
23:01 - yes swapping is done we got the largest
23:03 - element here in past two we have just
23:06 - done three comparisons and two largest
23:09 - elements are there and in past three in
23:12 - past three see when you are comparing 5
23:15 - 8 6 no swapping is there when you are
23:17 - comparing 6 with it no swapping is there
23:19 - and already 14 and 16 are its correct
23:22 - position after past 2 so you just have
23:24 - to sort these 3 elements you compare 5 8
23:28 - 6 6 with 8 no need to compare with 14
23:31 - and 16 so here no swapping is there so
23:37 - in this part only two comparisons are
23:39 - there because we are going to write down
23:41 - this condition okay and minus 1 minus I
23:43 - so in this pass no swapping is there and
23:45 - after this pass only we got this sorted
23:48 - array see 5 6 8 14 and 16 but according
23:53 - to this program pass 4 is going to be
23:57 - there although we know that in past 3
24:01 - only we got not no swapping and we are
24:04 - we got the sorted array but when you
24:07 - apply this case then pass 4 would be
24:09 - executed 1 comparison
24:11 - would be there for this five and six but
24:14 - that is of no use because we know that
24:16 - after past three only we got the sorted
24:19 - array so we have to know we have to
24:22 - modify this program how to modify this
24:25 - program we have to check if you got any
24:30 - pass in which no swapping is there see
24:33 - in which no swapping is there then you
24:36 - can say that then you can break this
24:39 - loop you can break this loop and you can
24:41 - say that now array is sorted if see in
24:46 - this pass one swapping is there 14 and
24:48 - 15 yes this swapping was there so here
24:50 - we go to one swapping here also we got
24:54 - swapping but in this pass no swapping is
24:57 - there so we can say that now that is
25:00 - sorted no need to do any other passes so
25:02 - how to check that condition so you can
25:04 - take one flag variable fine now in
25:08 - starting these in this loop suppose
25:11 - after this loop we are going to set this
25:13 - flag variable is equal to 0 and now if
25:18 - swapping is done then you can set this
25:21 - variable as 1 so the swap the code for
25:24 - swapping is here only so if the control
25:27 - has entered here it means swapping has
25:31 - been done if swapping has been done then
25:34 - you can set this variable within this if
25:37 - if condition flag is equal to 1 after
25:44 - this if is to be closed
25:47 - flags equal to 1 fine
25:51 - if flag is equal to 1 then it means
25:54 - swapping has been done and you cannot
25:55 - stop this loop fine and if sometimes it
26:00 - happens that no swapping is done if no
26:04 - swapping is done then control will not
26:06 - enter here fine so the flag variable
26:11 - will not be set to one flag variable
26:14 - will remain 0 right so you can check you
26:19 - can check here see here
26:22 - after this if and after this for fine
26:27 - after this you can check if flag is
26:34 - equal to is equal to zero then you can
26:36 - say break and after that you will close
26:41 - the outer loop here on if flag is zero
26:47 - then break it means break means from
26:50 - this loop you will go out and you can
26:54 - here print that arrays sorted this is
26:57 - not the complete code I am just write
26:59 - down I am just writing the logic you are
27:01 - you obviously you have to declare one
27:03 - array a size of the array and the flag
27:06 - variable and something like this so this
27:09 - is the optimized bubble sort so now let
27:12 - us trace out this thing this program is
27:15 - the help of one example let us take one
27:17 - I value high value is equal to suppose
27:20 - to see when I value zero so I value is 0
27:24 - for this pass for this pass I value is 1
27:27 - for this pass I value is 2 because we
27:29 - are going to start I from 0 so let us
27:32 - take I values 2 now if this this this
27:36 - chord is correct if we have written the
27:38 - flag variable and we have checked the
27:40 - flag where you will at the right
27:41 - position then you find out that I well
27:44 - you would not be increased to 3 because
27:48 - according to because if we don't write
27:51 - this flag variable this will this flag
27:53 - variable this this code then how many
27:55 - passes would be there four passes would
27:57 - be there and I would be increased from 0
28:00 - to 3 but if you write down this code and
28:03 - if this code is correct then I value
28:05 - would not be increased to 3 the outer
28:08 - loop would be executed for I values 0 1
28:11 - & 2 only for I value 2 because after
28:14 - this pass only we got the sorted array
28:16 - fine now check when I value is 2 so 2 is
28:21 - this 2 is less than n minus 1 n is 5 5
28:27 - minus 1 that is 4 so this condition is
28:29 - true now control will go to this so now
28:32 - see flag is equal to 0 1 variable is
28:35 - there
28:35 - flat and the value of that is zero fine
28:39 - now J value is equal to 0 J is equal to
28:43 - less than n minus 1 minus I so this is
28:45 - what 0 is less than n is equal to 5
28:49 - minus 1 minus AI value is 2 so 5 minus 3
28:52 - that is 2 this condition is true so
28:55 - control will go within this loop now
28:57 - check a of JJ value 0 a of J greater
29:01 - than a of one here here when I value is
29:06 - 2 fine
29:07 - a of 0 greater than a of 1 is 5 greater
29:12 - than 6
29:13 - no this this condition is not true so
29:16 - the control will not go within this
29:18 - condition fine now if this condition is
29:23 - not true then again what will happen J
29:25 - plus plus now J is equal to 1 now 1 is
29:29 - less than 5 minus 1 minus 2 vs 1 is less
29:31 - than 5 minus 3 is 2 when it's less than
29:33 - 2 yes this condition is true so control
29:36 - will go within this loop now check if is
29:40 - equal to j j is now 1 1 greater than 2
29:44 - now see a of 1 a of 2 is 6 greater than
29:48 - 8 no this condition is not true so
29:51 - control will not go within this within
29:54 - these conditions within this if
29:56 - statement
29:57 - now j plus plus if control will not go
30:00 - within this condition then the next
30:03 - condition is the next statement to be
30:05 - executed if j plus plus now j is equal
30:08 - to 2 now condition is 2 less than 5
30:12 - minus 1 minus 2 2 less than 2 this
30:14 - condition is not true now fine
30:19 - so now control will not go within this
30:22 - for statement if the condition is not
30:26 - true
30:27 - fine now where control will go now
30:32 - control will go to here only because in
30:36 - after j plus plus s not true so control
30:40 - if you will not write this one the
30:42 - finally control will go here only i plus
30:46 - plus but
30:47 - now we have two more statements in this
30:51 - for look within this for loop within
30:53 - this outer for loop fine
30:55 - so now control will go here and now
30:58 - we'll check if fly is equal to is equal
31:00 - to 0 say flag variable is 0 it has not
31:04 - been updated wise because in this case
31:06 - the control have not gone within this
31:09 - condition so flag variable is flag
31:13 - variable or remain 0 only it has not
31:16 - been set to 1 so flag is is equal to is
31:21 - equal to 0 and guess this condition is
31:22 - true so now this is what break now
31:25 - brakeman means what the loop in which
31:28 - this statement has been written fine
31:31 - when after finding this statement the
31:34 - control will go out from that loop or
31:37 - you can say the control will exit from
31:39 - that loop fine so now this statement
31:42 - this break has been written where within
31:46 - this outer for loop after the closing of
31:48 - this inner for loop fine
31:50 - within this outer for loop now we find
31:53 - the break statement now control will go
31:55 - from out from this this for loop out
31:58 - from this outer for loop fine now
32:02 - control will never go to I plus plus so
32:06 - I value would not be increased to 3 that
32:10 - is why this pass will never get executed
32:13 - and now maybe here you can write printf
32:16 - the the array has been sorted something
32:18 - like this okay you can print that sorry
32:19 - see this this this case is best when you
32:24 - have a sorted array suppose you have an
32:27 - array something like this 2 3 4 6 10 11
32:32 - 15 18 now this is there and you are
32:37 - supposed to apply bubble sort to sort
32:39 - this array this array is already sorted
32:40 - how many elements are there 1 2 3 4 5 6
32:43 - 7 8 n is equal to 8 now if you don't
32:48 - apply this logic if you don't apply this
32:49 - flag variable then how many times how
32:51 - many passes would be there seven passes
32:57 - fine this program would be executed for
33:00 - seven passes again and again but no need
33:03 - to execute for seven passes because this
33:05 - hair is already sorted now in one pass
33:08 - only we can come to know that this array
33:11 - is already sorted because in one pass
33:13 - when you will start with pass one then
33:16 - two is compared with three no swapping
33:18 - then three even wood will be compared
33:20 - with four no swapping then four with six
33:22 - no swapping six with ten no swapping no
33:25 - swapping no swapping and no swapping and
33:27 - if in any part you find out that no
33:30 - swapping has been done then you can say
33:32 - that this array is already sorted fine
33:35 - so no need to do seven passes no need to
33:39 - execute this program for seven passes
33:41 - just in one pass only you can come to
33:44 - know that array is sorted but only if
33:46 - you apply this logic if you apply this
33:48 - flag variable then only you can come to
33:50 - know in one pass only that this array is
33:53 - already sorted so this is the best case
33:56 - so best cases then our pairing is
33:58 - already sorted so in this case the time
34:00 - complexity is what how to find out time
34:03 - complexity see how many four loops are
34:05 - there one eight two so to find out the
34:08 - fine with time complexity you just have
34:10 - to check out how many times how many
34:13 - calculations are there how many
34:14 - computations are there within this inner
34:17 - for loop so the best cases array is
34:19 - already sorted so in one pass only you
34:23 - can come to know that array is already
34:24 - sorted so this loop will be executed for
34:27 - one time only and this look would be
34:29 - executed for how many times for n minus
34:32 - 1 and minus 1 comparison would be there
34:36 - so the time complexity would be order of
34:38 - n in best case when you apply this logic
34:41 - but in worst case worst case means the
34:45 - array is given in descending order and
34:46 - you are supposed to arrange there in
34:48 - ascending order in that case the time
34:50 - complexity would be order of n square
34:53 - why so because outer loop would all
34:56 - would be executed for how many times n
34:59 - minus 1 times and inner loop would also
35:02 - be executed for how many times
35:04 - approximately n minus 1 times so n minus
35:09 - 1 into n minus 1
35:10 - that this it would be a polynomial
35:14 - function and when polynomial the
35:16 - polynomial is there then we just take
35:18 - the highest order of n so highest order
35:21 - of n is n square so we just simply write
35:24 - order of n square in worst case time
35:26 - complexity would be order of n square so
35:28 - in next video I am going to discuss with
35:30 - you the insertion sort so I'll see in
35:33 - the next video till then bye bye take
35:34 - care