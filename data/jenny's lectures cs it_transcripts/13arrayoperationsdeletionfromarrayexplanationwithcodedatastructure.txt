00:00 - see I have taken this example in the
00:03 - previous video so I'm going to take this
00:04 - example only for explaining the deletion
00:07 - operation if you get how to delete a
00:09 - data from a specific position then you
00:12 - can easily get how to delete data from
00:13 - beginning and how to delete data from
00:15 - end of theory fine so first of all we'll
00:18 - discuss the delete process with the help
00:20 - of this example then we will write down
00:22 - the code fine and also we'll discuss the
00:24 - time complexity see here we I have I
00:29 - have taken these lines from the previous
00:32 - code only from the previous video that I
00:33 - have declared one area of size 50 so
00:36 - these bits from 102 to 99 would be
00:40 - located 200 bytes would be allocated by
00:43 - the memory manager for this array one
00:45 - variable size fine this is the maximum
00:47 - size but actually suppose the user wants
00:49 - to insert only 10 element 5 elements
00:51 - then we will ask from the user how much
00:54 - sighs he wants for the area so he'll ask
00:57 - enter the size of the array and the user
00:59 - will enter the size so for the size also
01:01 - 4 bytes would be a located somewhere in
01:04 - the memory suppose the here I'm taking
01:05 - the position at the address 3 0 4 and
01:09 - then we'll ask from the user the for the
01:14 - elements of the array we are going to
01:15 - initialize there at runtime so into the
01:17 - elements of array for entering the
01:19 - elements loop would be started from 0 to
01:21 - size sizes suppose 5 here I'm taking
01:25 - edit the image size is 5 so Luke would
01:27 - be from 0 to 4 because an index would be
01:29 - started from 0 and we are going to
01:32 - populate the array like this
01:34 - fine I have why I have discussed this
01:36 - coding in the previous video in details
01:38 - so you can check out that video see now
01:41 - suppose user has entered this data in
01:44 - the a now you will ask the user from
01:48 - which position he wants to delete the
01:50 - data and now see suppose he said I want
01:55 - to delete the data from position pool
01:58 - right so position 2 means from this
02:01 - position index is 1 I'm taking index and
02:06 - positional different thing index is 1
02:08 - but position is what 1 2 second position
02:11 - so from this position
02:12 - I want to delete the data this do I want
02:15 - to delete so simply if you delete this -
02:19 - so now what you will do you cannot shift
02:21 - six here because this space you cannot
02:24 - leave it blank but one thing you can do
02:26 - you can shift ten this side for this
02:29 - side and five the side that would be
02:31 - fine and after shifting these elements
02:34 - the size will be decreased by one so
02:37 - after deleting this data size would
02:39 - become for right now size is five so we
02:44 - are going to shift this 10 this side
02:45 - this for this side and five to this
02:48 - location right so we are going to start
02:51 - a loop how you can do this see here we
02:54 - have two so we are going to start a loop
02:57 - from here suppose we are I am going to
02:58 - take a variable I I would be started
03:00 - from this one from with index position
03:03 - minus one I would be started from
03:05 - position of minus 1 because position is
03:07 - 2 so I value is 1 right till position
03:11 - minus 1 to here till 4 or you can say
03:13 - size minus 1 size is 5 so here till 4 or
03:17 - you can say till 3 white L 3 and tell
03:20 - you see now we are going to shift I
03:24 - would be stuck in from here so now we
03:26 - are going to shift this value here so
03:29 - here what you can write this value of
03:31 - this area of 2 would be shifted to array
03:35 - of 1 so you can say I plus 1 to I right
03:40 - so we have shifted this 10 here now
03:45 - again we shift this I would be
03:47 - implemented by 1 now I is this one now
03:49 - now we will shift 3 value at index 3 to
03:52 - 2 so 4 would be shifted to here so here
03:55 - we will write for fine 10 would be
03:59 - overwritten then is no more now again we
04:02 - are going to shift now I would be
04:03 - incremented eyes at this place now this
04:06 - 5 would be I plus 1 value would be
04:08 - shifted to I value 5 would be shifted
04:10 - here so here you will write 5 so now
04:13 - simply you can say you can delete this
04:15 - one or you can say now size becomes size
04:17 - minus one so you just reduce eyes - -
04:20 - see I am going to process the loop I am
04:24 - going to run the loop
04:25 - till three not till four because when I
04:28 - is equal to three then simply we write
04:32 - what this a of I plus 1 that is four
04:37 - would be shifted to a of I that is three
04:40 - here on so no need to increment this I
04:43 - here we are going to run the loop from
04:46 - here till here only till size minus one
04:49 - that is fine fine so this is now the
04:51 - updated area and if you want to print
04:54 - which data you have deleted so what you
04:56 - can see before shifting this these
04:59 - values you can write downward you can
05:01 - take this value and you can store this
05:03 - value to somewhere you can say you can
05:05 - take one variable that has item and you
05:08 - can store here too
05:10 - and after that you can print this if you
05:14 - simply want to delete then no need to
05:16 - store this two value here you simply
05:18 - start a for loop and start shifting
05:21 - these values start a for loop from
05:24 - position minus one so now we will write
05:27 - down code for this say here size we have
05:29 - taken area of size initially we have
05:31 - taken five after deletion it becomes
05:33 - four so now you want you will ask from
05:36 - the user at from which position you want
05:38 - to delete the data fine and user will
05:40 - enter its position so you will write so
05:43 - this is how we are going to ask from the
05:45 - user so you are going to take variable
05:49 - that is pose for position for storing
05:53 - the position fine because obviously when
05:55 - user will enter the data for position
05:57 - then that value would be stored in
05:59 - memory and how value would be stored in
06:01 - memory using variables fine so see now
06:05 - now you also check see now if position
06:09 - is minus one if user entered minus one
06:13 - then what happens then obviously there
06:16 - is no index of minus one so we will also
06:18 - check the position should be a valid
06:21 - position and if user interposition is
06:23 - equal to 48 so now at for to it you
06:27 - don't have any data fine so this is also
06:30 - invalid position we have data from zero
06:33 - to fourth index only before deletion the
06:36 - data was from zero to
06:38 - for so you can enter from zero to four
06:40 - the position would be valid so you are
06:43 - also right down if statement to check
06:46 - the validity of this position if
06:50 - position is less than equal to zero or
06:54 - position is greater than sense right
07:00 - then it becomes you will print invalid
07:02 - position see here I am taking position
07:06 - would be started from one that is why
07:08 - this is position 1 so that is why I am
07:11 - taking position should be greater than
07:14 - zero that as position would be started
07:16 - from one right and position should be
07:20 - less than sign size is 5 so 1 2 3 4 5
07:24 - this is the very position right because
07:28 - if you build 6 then at 6 we don't have
07:30 - any data right and you will also check
07:32 - if there is no data in this array then
07:36 - obviously that is under flow condition
07:38 - and you cannot delete the data else you
07:41 - will right now for loop could be started
07:45 - now you are going to delete see suppose
07:48 - position is this one so position is 2
07:53 - user has entered a value 2 for this from
07:56 - this position you want to delete
07:57 - so from this position only you are going
08:00 - to shift this to this then this value to
08:02 - this you're going to shift something
08:04 - like this so we are going to start a
08:06 - loop from I is equal to position minus 1
08:09 - position is 2 so Luke would be started
08:11 - from 1 I is equal to 1 now and I should
08:14 - be less than size minus 1 minus minus I
08:20 - plus plus y I less than size minus 1 see
08:23 - size way of taken 5 at starting and we
08:26 - are going to run this I for loop in 3 so
08:32 - till 3 means size minus 1 size minus 1
08:34 - is 4 so I should be less than 4 that is
08:37 - still 3 we are going to run you can run
08:40 - the sole loop till 4 that is also fine
08:42 - but obviously that would that
08:44 - is that time taken for computing for the
08:47 - slow loop only find so that is of no use
08:49 - so now in this case you will write work
08:52 - so now if head you write the a of I plus
08:55 - 1 value would be shifted to a of I when
08:58 - I is equal to position minus 1 that it's
09:00 - position minus 1 that is 1 I is equal to
09:02 - 1 so value of this 1 plus 1 that is 2 ay
09:06 - value of 2 we transfer to value at 1
09:10 - that's that is exactly we have done
09:12 - right and now now what you will do now
09:16 - you have done your shifting till this
09:18 - till this so now you will right size - -
09:22 - because size has been decremented by 1
09:23 - now right and now at last you can print
09:27 - the array I'm just I guess you can print
09:30 - there a updated arrays just write down a
09:32 - for loop from I is equal to 0 to size
09:36 - less than size now size is 4 after size
09:39 - - - this size becomes 4 right this value
09:44 - becomes now 4 so from 0 to 3 value would
09:48 - be printed eyes less than size and in
09:50 - for loop you can write print a
09:52 - percentage Dao I this is how we are
09:55 - going to believe the data and one more
09:57 - thing I have told you in the previous
09:58 - video also that in arrays when we are
10:01 - discussing arrays and see then there is
10:03 - no concept of bounds checking it means
10:05 - suppose you have declared array of size
10:08 - 50 and if here you will enter the size
10:11 - of array is 60 and if you start entering
10:14 - the data you can you can easily enter 60
10:16 - elements but that is not possible
10:18 - because that should not be possible
10:20 - right because at starting how much space
10:23 - has been allocated for 50 elements only
10:25 - for this only from 100 to this 200 bytes
10:29 - so how can you store 60 elements once
10:31 - you are declared and as we have read
10:34 - that that array size is fixed once you
10:38 - have declared the size you cannot change
10:39 - the size right so this is now the you
10:43 - have to check the programmer programmer
10:45 - how to write a code to check the
10:47 - boundaries of theory so after this after
10:50 - entering the size you can write down one
10:51 - if statement if sy
10:53 - is greater than this maximum size
10:54 - greater than 15 then you can print out
10:56 - of bound and in else broke you can write
11:00 - further enter the elements and this for
11:02 - loop right and after that you can print
11:05 - the updated array
11:05 - see here no need to store this element
11:08 - in any anywhere because we just want to
11:12 - delete the data so just shifting would
11:14 - be enough if you want to print which
11:17 - data you have deleted from the array
11:19 - then you can store before before this
11:22 - for loop you can write item suppose you
11:25 - you'll take one variable where you store
11:27 - the value so you can write item is equal
11:29 - to a of position minus one position
11:33 - minus 1 that is y 1 y -2 2 would be
11:36 - stored in this item right and after that
11:38 - you can print the value deleted is and
11:41 - you can print you can say that print
11:44 - percentage d an item you can print so if
11:47 - you take this case here also you are
11:49 - going to declare a variable item fine
11:52 - but if you don't want to print the value
11:54 - you can simply ignore this one and
11:56 - simply write down this for loop so if
11:58 - you want to delete a data from the end
11:59 - of there a then that is very easy no
12:01 - shifting will be done no need to ask for
12:03 - the position no need to write down the
12:05 - so loop just - sighs - - right now fine
12:07 - and if you want to print then you can
12:10 - store this value in item and you can
12:11 - print that while fine and if you want to
12:14 - delete from the beginning then what you
12:15 - will do if you want to delete this 6
12:18 - then from the beginning only you are
12:19 - going to start the for loop for I and
12:22 - all the values will be shifted here left
12:25 - side so you are going to start this for
12:27 - loop from I so updated for loop from if
12:32 - you want to delete from the beginning
12:33 - then the updated for look would be for I
12:36 - is equal to 0 I would be started from 0
12:39 - only and I should go less than size
12:41 - minus minus the minus 1 same and I plus
12:44 - plus and simply write down this thing
12:46 - only a off I and I plus 1 and after that
12:50 - size - - fine because we are going to
12:55 - start from this position only 'no we
12:57 - know the fixed position is you are going
12:59 - to believe the data from 0th index so
13:01 - start from the 0 only so if you talk
13:03 - about the time taken
13:04 - and complexity then here also the time
13:06 - complexity depends on the position from
13:08 - where you want to delete the data if you
13:10 - want to delete the data from this
13:11 - position then you are going to shift all
13:13 - the elements and theta n if you want to
13:16 - read from n then obviously theta one so
13:19 - it depends on the position and as we
13:21 - have discussed in insertion keys so
13:23 - theta n minus B you can write but simple
13:26 - logic is say this is unsorted array so
13:29 - ordering of these elements doesn't
13:31 - matter here so rather than shifting we
13:34 - can do what the very quick algorithm is
13:36 - what if suppose you want to delete data
13:38 - from this position position to so simply
13:42 - what you can do you can pick the last
13:43 - data from there and you can put this
13:47 - data here only right and you can do
13:51 - sighs - my you - - and size will be from
13:54 - zero to three so this is now our array
13:56 - and that's deletion so it is it will
14:00 - take constant time that is theta one
14:02 - order of one you can say but if air is
14:04 - sorted in that case this hole during of
14:07 - the elements would matter in that case
14:09 - you cannot do this thing you can
14:11 - directly in that case you can't pick
14:13 - that really the last element in place
14:14 - and the position from where you want to
14:17 - delete the data because it will you know
14:19 - disturb the order of the elements in
14:21 - sorted array in sorted array it is must
14:24 - to use this process the shifting process
14:27 - but an unsorted air you can do this
14:29 - thing so the best elgu will take how
14:31 - much time thither one you can see order
14:34 - of one one but the condition is this
14:38 - area should be unsorted here you are
14:40 - here we are taking what linear array or
14:42 - you can say 1d area that is unsorted in
14:44 - that case the best algo would take
14:46 - constraint thank you delete data from
14:48 - any position from the beginning from any
14:51 - specific positional from the end so now
14:54 - I'm going to start the topic linked list
14:55 - from the next video so I'll see in the
14:57 - next video till then bye take care