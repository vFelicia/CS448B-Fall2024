00:00 - so in the series of learning c plus plus
00:01 - programming language we have discussed
00:03 - all the built in data type in c plus
00:05 - plus int care float double white
00:07 - character boot void right
00:10 - now we will discuss one small topic and
00:11 - that is important also for beginner
00:13 - point of view that is for input and
00:15 - output in c plus plus how to take input
00:16 - from the user how to print output
00:18 - right actually i should have discussed
00:20 - this uh topic a long ago uh after uh
00:24 - discussing the structure of a c plus
00:25 - program but i forgot to discuss this
00:27 - thing right because whenever you write a
00:29 - program these two things are obviously
00:31 - will do this these two things will take
00:32 - some input do some processing will print
00:35 - something or maybe we can skip to take
00:37 - input but output is necessary for every
00:40 - program in every program we print
00:41 - something we need some output like
00:44 - simple we you write a program of
00:46 - printing hello world then the output is
00:47 - hello you are printing something right
00:50 - so output is you know important part or
00:52 - you can say compulsory in a program
00:55 - so now how to print we we were using
00:59 - like c out right
01:01 - but for input we use seen so these two
01:02 - things we will discuss in this video how
01:04 - to take input from the user how to print
01:06 - output with the help of a program i will
01:08 - show you
01:09 - right so see for input and output in c
01:12 - plus plus we have many standard you know
01:15 - built-in libraries standard libraries
01:17 - one of them is generally we use is io
01:20 - stream
01:22 - like we write hash include io string
01:24 - this is header input output stream i
01:28 - means input o means output and string
01:30 - right now this stream is what
01:32 - it's just a sequence of bytes
01:36 - or you can say sequence of characters
01:39 - right in 1984 actually strausstrap made
01:43 - the first stream input output library
01:46 - right so the input we take the output we
01:48 - generate everything would be considered
01:51 - as a sequence of byte or you can see
01:53 - sequence of characters
01:55 - right
01:56 - that's why we don't use in this uh you
01:58 - know that format specifiers like
01:59 - percentage d percentage f for flow they
02:02 - consider everything as a sequence of
02:04 - character or sequence of bytes so we
02:06 - generally use some operators
02:08 - we generally write something like this c
02:10 - out and this this is what operator c
02:12 - this is what known as operator now this
02:15 - operator is what everything will be
02:17 - discussing in this video one by one
02:18 - right
02:20 - so this would be considered as sequence
02:22 - of
02:23 - characters or bytes the input and output
02:24 - so stream is what sequence of bytes or
02:27 - characters now two types of streams are
02:29 - there one is input stream and one is
02:31 - output string
02:39 - input stream
02:41 - i stream
02:42 - and
02:44 - this is generally basically we can say
02:46 - class name of the class is i stream for
02:48 - input stream and name of the class for
02:49 - this is o stream for output
02:52 - right it means
02:54 - i stream input stream means uh using
02:57 - this we take input
02:59 - right so means flow characters or flow
03:03 - of bytes
03:05 - from
03:06 - any standard input device like for
03:09 - example you can say a keyboard
03:11 - to the main memory obviously we store
03:14 - the whatever we will take
03:16 - we store that in memory main memory
03:19 - right because whenever program would be
03:21 - executed that would be loaded into main
03:23 - memory so the input is going to be
03:25 - stored in main memory
03:27 - right the variables and everything we
03:29 - make
03:30 - fine and output stream means the flow of
03:33 - bytes or the flow of characters the flow
03:35 - of data would be
03:37 - from main memory to
03:39 - output screen
03:41 - to any output device for example we can
03:44 - say our console screen that is one
03:46 - output device
03:47 - right so two uh streams are there input
03:50 - stream output stream the class regarding
03:53 - to this is what i stream and oh stream
03:55 - right now
03:57 - for input or first of all let me discuss
04:00 - one thing basically in this standard
04:02 - library we have four standard input
04:06 - output objects
04:09 - four standard input output objects has
04:11 - been defined in this standard
04:14 - library right now what are those four
04:17 - input output object first is
04:20 - one is c in
04:21 - c out
04:23 - c e double r and c low
04:26 - so c in c out standard input c out for
04:30 - standard output crr standard error
04:33 - unbuffered right
04:35 - the error is not to be stored
04:37 - just generally you can at that no at the
04:41 - same point of time you can print the
04:42 - error message
04:44 - and buffer this is unbuffered and c log
04:46 - is what yeah actually buffer log you
04:49 - have heard general information we used
04:51 - to store
04:52 - right so this is for general information
04:55 - right
04:57 - so now this c in is of type
05:00 - i stream class or you can say the c in
05:03 - is what a predefined object
05:06 - see this thing you need to take care c
05:08 - in c out this c e double rc look these
05:10 - are what objects
05:12 - so sometimes they can ask you in waiver
05:14 - or sometimes in interview like from a
05:16 - fresher
05:17 - seen and see out or what and students
05:19 - got confused
05:21 - they don't know they sometimes call it's
05:23 - these are keywords or these are
05:24 - functions or these kind of things but
05:26 - cnc out these are predefined objects
05:28 - scene is predefined object of
05:30 - class i stream
05:32 - see out predefined object of class
05:34 - o stream i'll show you this thing also
05:38 - right on my laptop i will discuss a
05:40 - program
05:41 - so stay tuned
05:42 - now this is
05:44 - of type o stream crr this is also of
05:47 - type o stream and this is also of type
05:50 - o string and scene is of type i string
05:55 - right
05:56 - predefined objects
05:58 - this is what a class you can size stream
06:00 - is a class h stream is a class
06:02 - now see
06:04 - this c scene is
06:06 - linked to
06:08 - standard input
06:10 - standard input means keyboard it is
06:12 - linked to standard input
06:14 - right used to take input from keyboard c
06:17 - out is what it is linked to standard
06:20 - output standard output is what your
06:23 - output screen please note down these
06:25 - points you can make your own nodes right
06:28 - or actually i have also some
06:30 - you know handwritten nodes and i am
06:32 - planning to distribute these nodes but
06:34 - i'm not getting so much time because of
06:36 - some busy schedule but i'll distribute
06:38 - these nodes also
06:40 - see
06:41 - i guess we have discussed these things
06:43 - now what more about input and output in
06:45 - c plus plus
06:47 - okay one more thing is left the
06:48 - operators we use with the scene and
06:50 - generally we use these two things only
06:52 - for input and output right so with c out
06:54 - we use this op
06:56 - this operator with c and we use
06:59 - this operator
07:00 - right these are operators
07:04 - right
07:05 - so
07:07 - this operator is known as
07:09 - insertion operator
07:11 - this is known as extraction operator
07:15 - y insertion c whatever you will write
07:17 - like i am printing j k
07:19 - right so this c out is linked to
07:22 - standard output right so now this this
07:26 - output we need so this output would be
07:28 - considered as sequence of characters so
07:30 - this would be inserted using this
07:33 - operator
07:35 - you can say to this object and this
07:37 - object is linked to output device and
07:39 - that that is why it will give output to
07:42 - our output spring that is why it is
07:44 - known as insertion operator
07:46 - right or sometime they call it as
07:49 - output operator also
07:51 - right
07:51 - this is extraction operator now c in is
07:54 - linked to standard input
07:56 - suppose we can say a keyboard
07:58 - so whatever you will type that would be
08:00 - inserted
08:02 - into scene like using this object we
08:04 - take and using extraction operator that
08:07 - input would be extracted and
08:10 - suppose i am writing here a so that
08:13 - output or suppose i am entering this is
08:14 - integer array i am entering five so that
08:16 - phi could be extracted from the scene
08:18 - and would be put into this a in main
08:20 - memory
08:22 - so flow data is from
08:25 - you can say that input device to main
08:27 - memory flow of data is from
08:29 - main memory to
08:31 - standard output device
08:33 - right in cnc out
08:36 - so i guess these operators are also
08:38 - clear to you now let me show you with
08:40 - the help of a program
08:42 - see let's take a simple program just i
08:44 - am taking one integer
08:46 - a variable a
08:48 - want to ask
08:49 - the value from the user user will enter
08:51 - the value and whatever enter entered a
08:53 - value that would be printed on the
08:54 - screen so first is hash include
08:56 - obviously we we are using c n and c out
08:59 - these are objects right which are
09:02 - already defined in which header
09:04 - in this uh you know
09:05 - library i o string so that is why
09:08 - the library is standard library for that
09:10 - header is what i o stream so that's why
09:11 - we simply use this header i o string
09:14 - right
09:15 - hash include you know this is
09:16 - preprocessor hash include means
09:18 - preprocessor directive it will show it
09:21 - will direct to that
09:23 - you know
09:24 - preprocessor that you have to include
09:26 - the content of this
09:28 - file into this program right and then
09:30 - after that only we can use whatever the
09:32 - content in this file
09:34 - right
09:34 - now using namespace std why we are using
09:37 - this namespace as name namespace is just
09:40 - simply uh you can say group you can say
09:42 - declaration of objects classes or
09:45 - variables or functions etc right
09:48 - so whatever is defined in this io stream
09:51 - that is within the namespace std it is
09:53 - mainly used to
09:55 - resolve the name conflicts
09:57 - right and you can also create your own
09:59 - namespace namespace about this header
10:01 - file i have discussed in more detail in
10:03 - the video when we were discussing
10:05 - structure of a c christmas program you
10:06 - can see that video in the side button
10:09 - right
10:10 - or separately i'll also upload a video
10:12 - on the name space so the scene and see
10:14 - out these objects are all defined in
10:17 - this header in this file but in this
10:20 - file also within a namespace std
10:23 - right so it means we are using std or if
10:26 - you don't write here using namespace std
10:28 - simply you can write std
10:30 - column column means this c out we are
10:33 - using from this standard namespace std
10:36 - this c in we are using from this
10:38 - standard namespace std
10:40 - right
10:42 - that is also fine
10:44 - because the c out it is also possible
10:46 - you can create
10:49 - a variable name c out
10:51 - so now compiler would be confused like
10:53 - this c out this is a simple variable or
10:56 - what is the c out so you have to tell
10:58 - the c out and scene is from the standard
11:01 - name space
11:02 - to resolve the name conflict that is why
11:04 - because if you don't write this std std
11:07 - compiler would be confused there would
11:09 - be name conflict a variable also see out
11:11 - name
11:12 - this object also see out this is
11:14 - predefined object and this is simply a
11:16 - user defined variable right that's why
11:18 - we use
11:19 - mainly name space right so i'm using
11:22 - here's using namespace std that is why
11:24 - i'm not writing here this thing right
11:27 - now simply main is what you can say a
11:29 - driver for this program
11:31 - first of all control whenever you
11:32 - execute this control will go to the main
11:34 - function right
11:36 - from here it would be
11:38 - execution would be started so now hint a
11:41 - one in memory a variable name that would
11:43 - be
11:44 - created 4 byte of space now c out
11:47 - enter a this would be printed on the
11:49 - screen as it is
11:50 - whatever you will write in double quote
11:52 - as it is would be printed as an output
11:54 - right now c in a user suppose will enter
11:57 - 5 so this 5 would be stored here
12:00 - now again we want to print the value so
12:02 - c out this operator insertion operator
12:04 - value of a equal to this would be as it
12:06 - is printed on the screen and if you want
12:08 - to fetch the value obviously you want to
12:10 - fetch the value
12:12 - of a so simply you will write a again
12:14 - these operators and a why again these
12:17 - operators
12:19 - because this is what
12:20 - a string
12:22 - and this is what i want to print value
12:24 - like value of this a so this output has
12:27 - been changed from simply a string to i
12:30 - want to fetch the value from the memory
12:32 - that's why if you this output this kind
12:34 - of switching is done then before that
12:36 - you have to put again the operator
12:40 - insertion operator
12:42 - right same other in case you want to
12:44 - include you want to
12:46 - enter two value
12:47 - again you can put this operator and see
12:50 - three value again you can put this
12:52 - operator and see
12:53 - whenever change happens we
12:56 - write down these operators right so now
12:58 - let me show you this thing on my laptop
13:01 - okay see i have taken a simple program
13:03 - in which i am just i just want to print
13:05 - age and name of a person right
13:07 - so we have included this i o stream
13:09 - using namespace std main function we
13:12 - have just taken care
13:13 - because name would be string right and
13:15 - the length i have taken 50 then into h
13:18 - and i'm asking c out enter name
13:21 - right
13:22 - and then again this operator and e
13:24 - candle this is what manipulator handle
13:26 - means it will insert you can say new
13:28 - line or you can say after enter name the
13:30 - cursor would be
13:32 - next line it is just a manipulator not a
13:34 - string so that is why
13:35 - this kind of
13:37 - output has been changed inter name is
13:39 - string then we are just using a
13:41 - manipulator so if changed these kind of
13:43 - changes done then again we have used
13:45 - this
13:46 - operator right then how to input c in
13:49 - and the name of the variable is name
13:51 - then c out enter edge then handle then c
13:55 - and again
13:56 - age now i am printing the name is
14:00 - the name is
14:03 - this would be printed as a tease
14:05 - and whatever the value in that name
14:08 - variable string type of thing
14:10 - that that would be printed i want to
14:12 - fetch that thing
14:13 - so for that we have to use obviously the
14:16 - name of that variable we have taken name
14:18 - so name
14:20 - again these operators and age is that i
14:23 - guess i want as it is would be printed
14:26 - and age is and after that
14:29 - whatever the age whatever the value in
14:30 - that age variable so simply again this
14:32 - operator end simply route write down the
14:35 - name of the variable h and at last we
14:37 - have used ndl again then it turns 0
14:39 - right
14:40 - now let me just first of all run this
14:43 - and show you what kind of output you
14:44 - will get see
14:47 - okay error name does not okay
14:50 - it's nothing let me just run this again
14:53 - see enter name
14:55 - and cursor is in new line because of
14:58 - handle we have used right
15:00 - so i am just entering name jenny
15:04 - right
15:05 - enter
15:06 - age right so a is i'm entering 30
15:11 - name is jenny and age is 30
15:14 - right
15:15 - so see the name is added as it is would
15:17 - be printed and jenny is in the variable
15:21 - name
15:22 - name variable name is name so rather
15:25 - than this at the place of this name this
15:27 - name has been replaced by jenny and this
15:30 - age variable has been replaced by 30
15:32 - right now see let me just show you what
15:36 - is this in io stream i have told you in
15:38 - this io stream
15:40 - we have standard objects right this is
15:43 - the standard io stream objects in this
15:46 - so now let me just show you
15:49 - see these objects are in namespace std
15:53 - right and in std we have mainly four
15:56 - standard object
15:58 - c c out c double r c no
16:00 - right these four are for white character
16:02 - because here also uh this uh support
16:05 - white characters also we have a type w
16:08 - current score t so for those we use wc
16:11 - in w c o w uh c double r and w c low
16:14 - right
16:15 - you can also uh see the description also
16:18 - link to standard input c out is linked
16:20 - to standard output this is linked to
16:22 - standard error and before this is also
16:24 - linked to standard error this is what
16:26 - buffer
16:27 - this would be store right
16:29 - now see
16:31 - if you click on this i
16:34 - stream see here the cursor is there
16:38 - right
16:39 - so base class for character input
16:43 - streams
16:44 - this high stream right
16:46 - and this whole stream is would be what
16:49 - press control and click on this
16:51 - the source stream is what just base
16:53 - class for output streams
16:56 - right
16:57 - so
16:58 - so i hope this is clear to you like why
17:00 - we are including iostream and why we are
17:01 - using this std because this definition
17:04 - is
17:06 - in this name space std as you can see
17:09 - right so we are using we we have we have
17:12 - to tell the compiler that we are using
17:14 - these c and c out from this name space
17:16 - standard name space std right and if you
17:19 - want to take the input in the same line
17:21 - simply you can write like enter name
17:24 - and
17:25 - edge
17:27 - right
17:28 - and we just delete these two lines and
17:30 - in one line only we simply write
17:33 - name again these operator and age
17:36 - because one more input we want to take
17:38 - right
17:41 - and after that the name is this and this
17:43 - would be printed now let me just run
17:45 - this and show you what output you will
17:46 - get see enter a's name and age the name
17:49 - is you can say
17:51 - rahul
17:52 - okay where i'm from
17:55 - here
17:57 - rahul and age is suppose 25
18:00 - see the name is rahul and age is 25
18:02 - right
18:03 - so in one line
18:05 - also you can take
18:06 - these kind of input many input one two
18:08 - three four five as many as you want
18:11 - so i think that's it about input and
18:13 - output in c plus plus
18:14 - see one more you know input output
18:17 - standard library for input output is not
18:19 - i o manip for manipulators that also
18:21 - discuss in separate video right two to
18:23 - three input output standard libraries
18:25 - are there but mainly we use generally
18:27 - these two things for this thing we use
18:29 - io string right i hope this input and
18:31 - output is clear to you guys if you have
18:33 - any doubt you can ask me in comment
18:34 - section right or you can message me on
18:36 - my instagram account i'll try to answer
18:38 - those queries right now
18:41 - see you in the next video till then bye