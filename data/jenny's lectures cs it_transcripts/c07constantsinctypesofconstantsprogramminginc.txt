00:00 - in the series of learning programming in
00:02 - c we have already discussed
00:04 - some basic about c introduction to c
00:06 - language structure of a c
00:08 - program and execution process of a c
00:10 - program the steps the translation
00:11 - linking and
00:12 - loading model in the previous videos
00:14 - right and before writing a program
00:17 - you should aware about some more
00:18 - concepts and these concepts we will use
00:20 - while you write a program
00:22 - like constants variables will use
00:24 - functions data types
00:26 - without these you cannot write program
00:28 - so first of all we will discuss these
00:30 - concepts then we will come to programs
00:32 - writing programs right so now in this
00:34 - video today i am going to talk about
00:36 - constants in c language all the type of
00:38 - constants will discuss
00:39 - with some examples and some rules to
00:42 - declare
00:43 - declare constants like um this value is
00:46 - a constant and this value is not a
00:47 - constant
00:48 - means valid and invalid constants you
00:50 - can say right
00:52 - and this video is brought to you by an
00:53 - academy because an academy is going to
00:56 - start a
00:57 - test series for all the gate 2021
01:00 - aspirants
01:01 - named gate challenge and the series is
01:05 - having
01:05 - four levels first three levels would be
01:09 - consisting
01:10 - 30 questions and 90 minutes it's three
01:13 - levels are just it's like to warm you up
01:15 - for for the final
01:16 - round in the final level you are having
01:19 - 65 questions and you need to solve those
01:21 - questions in 180 minutes it's
01:23 - like the final grand finale test it's
01:26 - like you are
01:27 - you are sitting in your proper gate exam
01:29 - final exam
01:30 - right and these tests has been curated
01:34 - by the best faculties at uh an academy
01:37 - and
01:37 - these are going to cover the complete
01:38 - syllabus of csitga 2021
01:41 - and the series is going to start from
01:42 - 19th of december as you can
01:44 - see here and you can also take the these
01:47 - tests
01:47 - live if you take the test live all india
01:50 - ranking would be provided to you
01:52 - and you will get to know your position
01:54 - means where you are standing in the
01:56 - competition how well you have prepared
01:57 - how well your preparation is for your
01:59 - gate exam and one more thing if you are
02:01 - not able to take the test
02:03 - lie it's okay you can also write the
02:05 - test after the live test is over
02:08 - right so if you are interested you can
02:10 - go for it
02:11 - all you need to do is you just have to
02:13 - download an academy app and you have to
02:15 - enroll for this
02:16 - test series so if you are interested you
02:18 - can go for it all the details
02:19 - and the involvement link as well as the
02:21 - invitation code i'll put in the
02:23 - description box of this video
02:25 - you can go and check out so now let us
02:27 - discuss constants
02:28 - in c constants are having fixed values
02:30 - the value of constants are not going to
02:32 - be changed
02:33 - throughout the programmer you can say
02:35 - during the execution of a program the
02:36 - values are to be
02:38 - fixed the programmer while writing a
02:40 - program will
02:41 - specify these values means compiler know
02:44 - the value of constant
02:46 - during compile time you will not give
02:48 - the value at runtime
02:49 - right one thing is what we use symbolic
02:51 - constants so
02:53 - that we use to define some fixed values
02:54 - like suppose um
02:56 - value of pi so you will write hash
02:58 - define pi is
03:02 - 3.14
03:07 - this is what that definition section we
03:09 - have discussed when we were discussing
03:10 - structure of a c program
03:12 - so the value of pi is fixed 3.14 it is
03:15 - symbolic constant if you write hash
03:16 - define
03:17 - suppose max value is 50. so the value of
03:20 - that max is what is to be 50 throughout
03:23 - the program it is not going to be change
03:25 - you cannot change that value
03:26 - these are symbolic constants right so we
03:29 - are having basically two types of
03:31 - constants in c
03:32 - you can say numeric constants and
03:35 - character constants
03:36 - or somewhere it is also written four
03:38 - types of constant integer constant
03:40 - floating point constant
03:42 - and character constant and string
03:44 - constant let us discuss so these are
03:46 - four types of constant or you can say
03:48 - two types numeric and character constant
03:50 - is numeric is further divided into two
03:52 - types integer constant and real constant
03:54 - of floating constant
03:55 - here single character constant string
03:57 - constant so basically four types
03:58 - so let us discuss first one is integer
04:00 - constants these are having
04:02 - decimal values like if you write this uh
04:06 - 10 it is it is a constant five
04:09 - integer constant one integer constant
04:13 - integer constant right these are valid
04:16 - but
04:17 - if you write 0 5
04:20 - this is not you can say decimal constant
04:24 - see in integer also we have 3 types
04:27 - decimal
04:28 - constant octal constant and hexadecimal
04:31 - constraint
04:32 - right decimal means we can use
04:35 - uh the the numbers from 0 to 9 base is
04:39 - 10 octal constant means from 0 to
04:43 - 7 base is 8 and hexadecimal means we can
04:48 - use from 0 to 15
04:50 - and bases base of these constants are 16
04:53 - so
04:54 - integer also having three categories so
04:56 - if you write
04:57 - 0 5 that comes under ah
05:00 - octal constant because the rule is what
05:03 - octal constants
05:04 - starts with the value 0 always
05:08 - right but decimal constant means yeah
05:11 - you can use
05:11 - 0 but if there are two digit
05:15 - in that constant so 0 can be at this
05:18 - side
05:18 - right side but 0 cannot be at this side
05:21 - left side
05:21 - if you write like this this comes under
05:24 - category
05:24 - octal constant right and constants are
05:28 - also called
05:28 - literals right so here also you can we
05:30 - can express an integer in three forms
05:36 - decimal
05:38 - octal and hexadecimal and by default
05:41 - if we say integer constant generally by
05:44 - default we represent that
05:46 - in decimal constant not octal not
05:48 - hexadecimal
05:49 - right difference i have told you what is
05:51 - octal now how you write hexadecimal
05:53 - constant c
05:54 - in hexadecimal we have sequence of
05:56 - digits
05:57 - preceded by either
06:01 - 0 x or you can say 0 small x
06:05 - let us suppose i write ah 0
06:08 - x this is what hexadecimal constant
06:12 - right and see in hexadecimal we use what
06:15 - from 0 to 9 numbers and
06:19 - a to f characters i have told i have
06:22 - written here 0 to 15 but
06:24 - here we use from 0 to 9 numbers 10
06:27 - numbers
06:28 - like right and after that 5 is what
06:31 - alphabets a to f right
06:35 - so here you can say a means 10 0 to 9 we
06:38 - use numbers 10 numbers
06:40 - then b
06:46 - like this we are having from 0 to 15 0
06:48 - to 9 numbers and then 10 to 15 we
06:50 - represent like abcdef
06:52 - so if i write 0x that is also exactly
06:55 - decimal constant
06:56 - if i write like
06:59 - 0 x and 7
07:02 - f this is also hexadecimal constant but
07:05 - if you write
07:06 - 0 x and suppose i am i am writing 7
07:10 - g this is not hexadecimal constant
07:13 - because we cannot use
07:14 - g we can use only a to f
07:17 - right so you can say these integer
07:20 - constants are sequence of digits
07:23 - suppose i am writing here one two three
07:25 - four
07:26 - this is also what integer constant but
07:29 - rule or what you cannot write like this
07:31 - 56
07:32 - comma 100 you cannot write any comma or
07:35 - special character
07:37 - between these constants so this is not
07:39 - valid this is invalid
07:40 - constant integer constant right or if
07:43 - and by default the sign is what plus
07:47 - you can also use sine plus or by default
07:49 - x plus if i write
07:50 - minus 1 to 3 this is also valid so you
07:53 - can
07:54 - write a sign either minus 1 plus if you
07:56 - write like this dollar one two three
07:58 - this is incorrect you cannot use any
08:00 - special character you can you you cannot
08:02 - use any comma you cannot use any space
08:04 - like fifty
08:05 - seven space hundred this is also invalid
08:08 - you cannot use space uh between these
08:12 - sequence of digits this there should not
08:15 - be any space
08:16 - any commas any special character this is
08:18 - valid one two three four
08:19 - or like 56 or five six
08:22 - seven eight this is also valid right so
08:25 - now i hope you got
08:26 - integer constant let us discuss real
08:28 - constants
08:31 - so real constants are also known as
08:33 - floating point constants these are
08:35 - having fractional part
08:36 - like if you uh write 12.56
08:42 - this is decimal part this is
08:45 - you can say you can say this is what the
08:47 - integer part this is decimal point and
08:49 - this
08:50 - is fractional part so
08:53 - having decimal point these are what real
08:55 - constants
08:56 - so if i write plus this that is also
08:59 - fine if i write minus 50
09:01 - 6.02 that is also fine sine can be plus
09:04 - or minus by default
09:05 - sign is plus right but if you write
09:14 - this is invalid there cannot be two
09:17 - decimal points
09:18 - right and you can also represent these
09:22 - uh decimal points or these floating
09:24 - point constant in uh
09:26 - exponential form having mantissa then e
09:29 - then exponent mantissa can be anything
09:32 - like having that decimal point and
09:35 - exponent
09:36 - is always constant right so these are
09:39 - some examples
09:40 - see which one is valid constant or
09:42 - numeric constant or not
09:44 - this one is valid 0x this is also valid
09:46 - this this is not valid
09:48 - this one this is not valid because here
09:49 - we have space 0 1 2
09:51 - this is valid 1 2 3 yes this is valid
09:54 - right
09:55 - and if suppose i write 0x
09:59 - af this is also valid and suppose if i
10:02 - write
10:03 - hash one two three this is invalid you
10:05 - cannot use any special character or
10:07 - known digit character
10:08 - right so these are numeric constant let
10:10 - us discuss now character constraints
10:13 - these are also two types single
10:15 - character and string string constant
10:17 - what is single character constants
10:19 - if i write like suppose single character
10:22 - is
10:23 - a so you will write like this
10:27 - in single quotation so this is what
10:29 - character constant
10:31 - so you can say character constant is
10:33 - what it is having a single character
10:36 - enclosed within single quote marks
10:39 - this is character constant this is also
10:43 - character constant and suppose i write
10:46 - this
10:47 - backslash this one zero this is also
10:50 - character constant these are backs
10:51 - backslash character constraints these
10:54 - are having different meanings there is
10:55 - list of
10:56 - backslash character constants right
10:59 - those are having different meanings
11:00 - fine and you can say like if you write
11:03 - this one
11:04 - comma this is also character constant
11:06 - right
11:08 - and if you write this at the rate this
11:11 - is also character constant
11:13 - so any single character which is
11:15 - enclosed within these
11:16 - single quotation mark within this you
11:19 - can also write down some
11:20 - characters also like a b c d capital a b
11:22 - c d
11:23 - or some numbers and some special
11:26 - characters also those are character
11:27 - constraints
11:28 - and these character constraints are
11:30 - within computer it
11:31 - these are being stored in the form of
11:33 - sky codes right
11:35 - like uh here this a means
11:38 - 97 capital a means what 65
11:44 - like this small b means 98 and like this
11:48 - capital b means 66 and like this so on
11:51 - right and these are also having uh their
11:54 - different
11:55 - this this value this is also character
11:57 - constant if you write
11:58 - 1 and see 5
12:02 - is not equal to this 5
12:05 - this is character constant it is having
12:07 - some different value
12:08 - this is numeric constant this you need
12:11 - to take care
12:12 - right if you are writing anything
12:14 - between these single quotes the number
12:16 - then that is character constant
12:18 - that is not numeric constant this is not
12:20 - integer constant
12:21 - fine so sky value i am writing here you
12:25 - can see
12:26 - so these are sky values capital a to z
12:30 - 65 to 90 small a to z 97 to 122
12:34 - zero to nine numbers are having a sky
12:36 - value 48 to 57 and
12:38 - some special character like this um coma
12:41 - or at the rate or some special
12:42 - characters are having values from 0 to
12:44 - 47 then 58 to 64 and 91 to 96
12:48 - right you can also check out like which
12:50 - special character is having
12:52 - between these lie between these values
12:54 - and between these and between these
12:55 - you can google it out right but you have
12:57 - to take care of this thing
12:59 - and you can also perform some arithmetic
13:00 - operations on these character constants
13:02 - right
13:03 - suppose i am printing uh this
13:06 - see if you are writing like this
13:08 - percentage printf percentage d
13:10 - this is for integer format specifier and
13:13 - a
13:13 - it is what single quote mark so this is
13:16 - what character constant
13:17 - so it will print what integer value of
13:20 - this
13:20 - a because i am writing here format
13:22 - specifier percentage d
13:23 - this is for integer this is to print
13:25 - integer value
13:27 - right here if you compiler will find it
13:29 - is percentage d
13:30 - then it will print what whatever is
13:32 - given here after this coma the first
13:35 - one the first one for that
13:38 - it will print the decimal value means
13:40 - that that integer value the integer
13:42 - value of a is 97 so it will print 97
13:45 - and if you write percentage c it is what
13:48 - character constant it is used to print
13:49 - characters
13:50 - and if you write here 97 then it will
13:52 - print the equivalent value character
13:54 - value of this 97
13:56 - that is smally
13:59 - so you can check out these thing maybe
14:01 - you it may the output may be wrong so
14:03 - you can tell me in the comment box if it
14:04 - is room or right
14:06 - fine and see every character is having
14:10 - integer value that is why i am saying
14:12 - that you can also perform arithmetic
14:13 - operations
14:14 - on character constants right next comes
14:17 - to string constant
14:19 - so string constants are you can say
14:21 - sequence of characters
14:23 - enclosed within double could take code
14:25 - mark like i am
14:26 - writing here this is what sequence of
14:29 - characters
14:30 - and enclosed within double quote mark so
14:33 - this is string constant if you write
14:35 - abc this is what string constant
14:39 - and these characters may be letters
14:41 - numbers
14:42 - some special characters space everything
14:45 - if i write like uh here a
14:48 - b dollar this is also string constant
14:53 - but here c one thing if i write
14:57 - a in double quote this is not
15:00 - it is single character but enclosed in
15:03 - double quotation mark
15:04 - so it is not character single character
15:07 - constant it is a string constant
15:10 - and if i write a this is what
15:13 - single character constant but these are
15:16 - not
15:16 - equal this is different thing this is
15:19 - different thing
15:20 - this you need to take care this is
15:22 - string constant this is
15:23 - what character single character constant
15:25 - fine
15:26 - and if i write like 1 2 3 4 5
15:30 - in double quote this is also string
15:32 - constant
15:34 - right but here this like 1
15:37 - is not equal to this one because this is
15:40 - single character
15:41 - and it is equivalent to its sky value
15:44 - sky value of
15:45 - 1 is 49 but string constant
15:49 - this is not equal to its sky value this
15:51 - is string constant
15:52 - right so you need to take care of this
15:54 - thing also and whenever
15:56 - this string constant is there in a
15:58 - program and when compiler
16:00 - read this string constant then what
16:02 - compiler will do
16:03 - compiler will store the address of the
16:05 - first character
16:07 - reads the address of the first character
16:09 - and it will append
16:11 - a null character constant
16:15 - it will append a null character constant
16:17 - at last why so
16:18 - just to mark this is end of the screw
16:21 - end of this
16:22 - string right so length of the string is
16:25 - what
16:26 - one two three four five six
16:29 - here if you find out the length of this
16:31 - string then it is not five it should be
16:33 - six because a compiler has added
16:35 - null character just to mark that this is
16:38 - end of this
16:38 - string fine so now let us discuss
16:42 - how to declare constants in your program
16:45 - we use what
16:46 - keyword const keyword to declare
16:48 - constant like this
16:52 - right one method is this one so
16:56 - if you write in a program suppose i am
16:57 - writing a function word main
16:59 - i am not writing a complete program you
17:01 - can include those header files and i am
17:03 - writing here const
17:05 - int a value is 10
17:08 - in this program right means this value
17:12 - of
17:12 - a is constant throughout the program you
17:14 - cannot change this value
17:17 - if suppose you will print this value a
17:19 - then always the output
17:20 - would be 10 and suppose after that i am
17:22 - writing a
17:23 - is equal to 50. you are trying to change
17:26 - the value of a
17:27 - then it this line will give error
17:31 - that this value is you can say its read
17:33 - only value you cannot change this value
17:35 - because you have written conest keyword
17:38 - before this declaration before this
17:40 - initialization of this variable
17:41 - this is variable name that also will
17:43 - discuss what are variables in c
17:44 - this is data type but if you write like
17:47 - this
17:48 - into a is equal to 10 fine when you will
17:50 - print value of a
17:51 - 10 would be printed but after that
17:54 - anywhere in a program you can change
17:56 - this value if you write a is equal to 50
17:58 - and then if you print value of a then
18:00 - the updated value would be printed 50.
18:03 - now you can change this value this will
18:05 - not give error
18:06 - so you have to declare constant using
18:09 - const
18:10 - keyword right another thing is
18:13 - that i have discussed in starting of
18:15 - this video you can use hash define macro
18:17 - definition symbolic constant
18:18 - so there you can write this would be
18:21 - above this main
18:23 - although you can use anywhere the hash
18:24 - define statement but generally we use
18:26 - where above this main function right so
18:30 - we write like what hash
18:31 - define suppose i am writing a
18:34 - 10 this is also fine
18:38 - right but generally here we write what
18:40 - capital
18:42 - uh letters only like if you're writing
18:45 - pi
18:45 - then pi also if you write max then max
18:47 - also like this
18:49 - right and why i am using these capital
18:51 - letters so that you can
18:53 - distinguish between the normal variables
18:56 - within the programs and the symbolic
18:57 - constraints
18:58 - that is why there are some rules when
19:00 - you use this hash define
19:02 - statement then there are some rules to
19:04 - write this the statements and what are
19:06 - those rules
19:07 - there should not be any space between
19:08 - hash and define
19:10 - there should also be a space between
19:12 - hash define this
19:14 - and then name of that constant and then
19:17 - value of that constant
19:18 - another thing you cannot use here equal
19:20 - to
19:21 - right this would be wrong fine you
19:24 - cannot use
19:25 - semicolon after the statement this would
19:27 - be wrong so these rules you have to take
19:29 - care
19:29 - so this is you can say types of constant
19:32 - and how you declare constant
19:34 - in your c program so you can also write
19:37 - down this thing
19:38 - on your ide or you can run this program
19:40 - and you can check
19:41 - this is giving an error or not and when
19:44 - you remove this
19:44 - you can also check the value is going to
19:47 - be updated or not you and you can tell
19:48 - me in the comment box
19:50 - right so i think that's it about
19:52 - constant in next video i'm going to
19:54 - discuss
19:54 - that variables in c so now that's it for
19:57 - this video and i'll see in the next
19:58 - video till then bye take care
20:09 - you