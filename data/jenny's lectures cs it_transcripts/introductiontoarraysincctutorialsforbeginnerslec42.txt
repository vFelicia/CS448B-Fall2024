00:00 - hey everyone I hope you are safe and
00:01 - doing good so in the series of learning
00:03 - C++ programming language we have
00:05 - discussed Loops in C++ right break
00:08 - continue and coding exercise based on
00:10 - that in previous videos now in this
00:11 - video we'll discuss what are arrays in
00:13 - C++ so first thing we will discuss what
00:16 - is need of array this thing is important
00:18 - why we use arrays the need first we'll
00:21 - understand this thing then we'll see
00:23 - what is an array how to declare an array
00:25 - how to initialize arrays something like
00:26 - this right so okay first see what is of
00:30 - haing before that let me just ask you
00:32 - one thing if uh I ask you to store I
00:35 - want to store
00:38 - five right in a program then how you are
00:40 - going to store this thing in memory you
00:43 - just take a variable of integer type
00:45 - like int a is equal to 5 very simple
00:48 - right so in memory four bytes would be
00:50 - allocated to this a five would be stored
00:53 - and suppose address is th000 it would be
00:56 - some heximal form we don't know but
00:57 - suppose address is 1,000 I'm just
00:59 - supposing this thing I don't know the
01:01 - address and obviously five would be
01:02 - stored first converted into binary form
01:05 - then it would be stored right but just
01:09 - for your understanding I'm just simply
01:10 - storing five in this block this block is
01:13 - of 4 bytes and the name of this memory
01:16 - location is a but if I want to store six
01:19 - then the previous value would be erased
01:22 - and six would be stored if you want to
01:23 - store 10 then previous value would be
01:26 - erased and 10 would be
01:28 - stored right right in the same variable
01:31 - if you want to store right now if I want
01:34 - to store 1 to five like five number 1 2
01:39 - 3 4
01:41 - 5 then what is an
01:44 - idea what uh can be a case like int a
01:48 - int B we can
01:51 - just
01:53 - uh declare we can just take five
01:56 - variables and then we can store 1 2 3 4
02:00 - five okay fine then five variables would
02:01 - be there and five values would be stored
02:04 - because under a one under one variable
02:06 - name single variable name we can store
02:07 - only single value that is for sure right
02:10 - what if in my class I have 60 students I
02:12 - want to store role numbers of 60
02:14 - students then is it possible to have 60
02:18 - variables and
02:19 - store to of 60 60 students okay suppose
02:24 - I can take this thing also I can declare
02:26 - 60 variables I can take but suppose I
02:28 - have 1,000
02:30 - customers and the name of those
02:32 - customers I want to store or the
02:33 - customer ID of thousand customer I want
02:35 - to store then obviously we cannot
02:37 - declare thousand variables
02:39 - right so is there any
02:42 - way that under a single variable name we
02:45 - can store more than one value like under
02:50 - a single variable name I can store 1 2 3
02:53 - 4 5 something like this 1 2 3 4 5 but
02:58 - variable name would be single single
02:59 - only or maybe 10 values or maybe a ro
03:04 - number of 60 students or th000 customer
03:07 - name or thousand customer ID something
03:09 - like this yes it is possible with the
03:11 - help of
03:14 - arrays right uh when we were discussing
03:17 - data type then we have seen like there
03:18 - are three type of data type buil-in
03:20 - drived and user defined buil-in data
03:23 - types are int float Bo void double these
03:27 - right arrays come under derived data
03:31 - types or we can say compound data types
03:33 - or we can also say arrow is a data
03:35 - structure right so with help of array we
03:40 - can store more than one value under a
03:42 - single variable name right how we are
03:46 - going to store this is important so how
03:49 - you basically declare an array so I
03:51 - think the need is clear to you right
03:54 - because obviously we are going to deal
03:56 - in real life you know with a large
03:59 - amount of data and you have to store
04:00 - that data also right so to store that
04:03 - data to manage that data obviously we
04:05 - need array we cannot take for each value
04:09 - a different variable name right so I
04:13 - think the need is clear to you guys
04:16 - right now how to declare arrays simple
04:19 - we will write data type first suppose
04:22 - int just I'm taking int then array name
04:26 - suppose I'm taking same a and
04:30 - in these brackets array size so I want
04:35 - to store suppose R number of 60 students
04:37 - so just take size
04:40 - 60 this is data type of the array name
04:43 - of array and this is the maximum value
04:46 - this array can hold maximum number of
04:48 - elements sorry not maximum value maximum
04:51 - number of elements this array can store
04:53 - 60 numbers 60 values this are can store
04:57 - right so under a single variable name I
04:59 - can can store like 1 2 3 up to
05:03 - 60 R numbers now okay one thing is how
05:06 - to access these R numbers that also
05:08 - we'll see later but till now it is I
05:10 - think clear to you guys right have to
05:12 - declare arrays now array can be of many
05:17 - types like float value if you want to
05:20 - store like float marks of student so
05:23 - float marks and marks of 60 students I
05:26 - want to store so that is also fine
05:28 - character type is also fine car like
05:32 - maybe car name is C and five so five
05:34 - character we can store here but the
05:36 - problem is same type of elements we can
05:42 - store under a single
05:44 - name right or in an array so it's like a
05:48 - collection
05:49 - of elements which are of same data type
05:53 - means in this array a we can store only
05:56 - integer values only integer value it's
05:58 - not like that we can store 1 2 1.1 and
06:03 - character also no this would be wrong we
06:06 - can store 60 Inger value only here we
06:09 - can store only float
06:11 - values right character values string
06:13 - values are not
06:15 - allowed right here we can store only
06:18 - characters five characters
06:20 - here
06:23 - right so I hope this is clear to you
06:25 - guys so these are some characters
06:27 - characteristics of array and arrays are
06:29 - of fixed size once you have fixed this
06:32 - size in your program during run time you
06:34 - cannot change
06:36 - this right if you want to change get
06:39 - back to your program addit to your
06:40 - program change the size here then you
06:43 - have to recompile it and then run it
06:45 - right yeah Dynamic arrays are also
06:48 - possible that is also a concept that
06:50 - also we'll discuss later right and it
06:54 - can store same type of elements one
06:57 - array can store same type of element mix
06:58 - is not allowed like in Python in list we
07:00 - can store mixed data type float uh like
07:05 - uh you can say in a list we can
07:07 - store integer 1.1 float or string
07:12 - something like this but this is in
07:14 - Python list right and this is C++ and we
07:19 - are discussing arrays so in arrays this
07:21 - mixing is not allowed right and see this
07:23 - array size must be a positive constant
07:28 - right it cannot be negative or here
07:31 - rather than this this you know constant
07:34 - value we can take expression also but
07:36 - that expression should be should give a
07:39 - positive that should be a positive
07:41 - constant expression right what I'm
07:44 - saying I'll tell you this thing with
07:46 - help of program we will see let's see
07:48 - practical of this thing and while vas
07:51 - are also allowed variable length ARS
07:54 - while we declare these arrays there are
07:57 - several variations of this array type
08:00 - right how you can what you can write
08:01 - here here in this array
08:04 - size it can be a constant value it can
08:07 - be variable length arrays it can be like
08:10 - um or without giving the size also you
08:14 - can declare this array but how I'll show
08:17 - you practically okay okay so let's
08:19 - create a new file arrays intro. CPP
08:23 - right so first you have to include that
08:27 - um header I stream
08:29 - then the name
08:31 - space and which name space that is STD
08:34 - it is a standard STD means standard name
08:38 - space here we have those definition of C
08:41 - and C out these objects right now in
08:44 - main function
08:49 - sorry let's
08:51 - declare now array integer array so the
08:56 - data type array name so suppose I'm
08:59 - taking R number of 60 students better to
09:02 - take a meaningful name if you want to
09:04 - store R number then better to take name
09:06 - RO number or you can take like x y z a
09:08 - BC any name but better to take a
09:10 - meaningful name so R number of 60
09:15 - students right so this is how this is
09:18 - just you can say this is how we can
09:21 - declare an ARR right it's not just
09:24 - declaration it's actually uh it's
09:26 - definition right because at this time
09:29 - memory has been
09:31 - allocated how much memory for 60
09:34 - students for 60 numbers and one if you
09:38 - want to store one integer it will take 4
09:40 - bytes so 60 into 4 240 bytes has been
09:44 - allocated to this array right and if you
09:47 - only store like 15 raw numbers
09:52 - then you are only using 15 into 4 60
09:57 - bytes remaining Byes are a
10:01 - waste that is why this is what a kind of
10:03 - drawback because arrays are of fixed
10:06 - size we here generally take maximum size
10:11 - right okay so this is what declaration
10:15 - we can say
10:17 - now rather than this if suppose I want
10:20 - to take this minus value is it allowed
10:22 - no see a red line here the size of an
10:25 - array must be greater than zero right if
10:29 - you run this you can check out there
10:31 - would be an error see the size of a
10:35 - number is negative right it should be
10:38 - positive fine okay now rather than this
10:43 - constant while declaring this array this
10:45 - this size there are several variations
10:49 - allowed for the size first is first I
10:52 - have told you arrays of a know constant
10:55 - size so this is a known constant size 60
10:59 - now something like this is also allowed
11:00 - if I take a variable like uh if you want
11:04 - to declare a constant then just write
11:06 - down con the key word data type int and
11:08 - suppose I'm taking n is equal to 5 right
11:12 - and there I can write down this variable
11:15 - n five so this also comes into that
11:18 - category only AR is of nonn constant
11:20 - size because n is what it's a constant
11:23 - the value cannot be changed so this is
11:25 - also allowed right now or rather than
11:30 - this you can here we can also take like
11:32 - I have taken 60 that also comes under
11:35 - this one or you can also write here like
11:39 - size
11:41 - of suppose double this is also
11:45 - fine the size of this is also a constant
11:49 - regular expression right so this is fine
11:52 - there would be no error let me just run
11:54 - this obviously no output but there would
11:56 - be uh okay I have selected this let me
12:01 - just run this now see there would be no
12:03 - error right so the size of is also a
12:07 - constant expression so constant
12:09 - expressions are also allowed any
12:11 - constant value is also allowed right now
12:13 - next is variable length arrays suppose
12:16 - I'm not taking this constant I'm just
12:18 - taking a variable int n is equal to 5
12:21 - and here I'm writing this
12:24 - n this is fine there would be no error
12:28 - yeah this is allow obviously this is not
12:30 - a
12:30 - constant but this is allowed this
12:34 - n we can change this n something like
12:36 - this if you want to change it suppose I
12:40 - just uh write down this n ++ less than
12:43 - uh
12:45 - 10 and is 5 then and this is less than
12:49 - 10 then within this
12:52 - Loop I'm
12:54 - just declaring this are int roll number
12:58 - and size n so see the N is
13:01 - changing n++ first it was five then six
13:04 - then seven then 8 then 9 then less than
13:07 - suppose equal to 10 then 10 right so the
13:11 - size is changing if you want to print
13:12 - number of elements because this n is
13:15 - what array size so I simply print this n
13:19 - that's it e and DL for a new line right
13:26 - and return zero for success
13:29 - completion if I run this then see array
13:32 - size is 6 7 8 9 10 11 till
13:38 - 11 see in this case it is it has also
13:41 - printed 11 and is 11 but you think that
13:43 - 11 is the condition was not true and why
13:46 - is printing 11 but actually n value is
13:49 - 10 10 less than equal to 10 yes
13:52 - condition true after evaluating this
13:54 - expression after that it would be Plus+
13:57 - so now it be becomes 11 so condition
14:01 - true as well and then n becomes 11 so it
14:04 - is printing 11 so this is what every
14:08 - time the control will go to this this
14:11 - you know
14:14 - expression then this this expression
14:16 - this is simply n this would be evaluated
14:18 - every time and a new size would be
14:19 - allocated to this array right now next
14:23 - is um array of unknown size is the
14:28 - allowed let's take one
14:32 - example if suppose I'm taking here array
14:35 - name is same R
14:38 - number and it is of unknown size I don't
14:42 - know but it will give error this is not
14:45 - allowed incomplete time is not allowed
14:49 - because but see one thing I'll I'll show
14:52 - you
14:54 - extern
14:57 - int suppose rather than R I'm taking AR
15:00 - a and that's
15:03 - it see now in first line you're not
15:06 - getting any error no red line but in
15:09 - second line you are getting a red line
15:12 - here it is an error why so let me just
15:14 - run this and I'll show you the error
15:22 - see error uh storage type of rle number
15:26 - is not known
15:29 - only one error it is not known but
15:31 - obviously a is also array and the size
15:33 - is not known but why this is not an
15:35 - error see this
15:38 - is declaration and this
15:42 - is actually
15:46 - definition I know I hope you have the
15:48 - idea of Declaration definition
15:50 - declaration means we just telling the
15:53 - type and the name of the array that's it
15:56 - no memory allocation so so if you don't
15:59 - want to allocate any memory then
16:00 - obviously size is not allowed right here
16:04 - definition definition means memory
16:08 - allocation means that obviously the type
16:10 - name of the array as well as memory
16:12 - allocation but how much memory to be
16:14 - allocated how much when you will tell
16:17 - the size then only it would be you know
16:20 - the memory manager will allocate the
16:22 - memory now so that is why size is
16:24 - important in this case that is why it is
16:27 - giving error when you use this extern
16:30 - keyword right this class it means
16:34 - somewhere else outside of this scope
16:37 - somewhere else in another
16:40 - file this is defined here we are just
16:44 - declaring just
16:46 - declaring means we are just telling the
16:48 - type of data type and the name that's it
16:53 - but somewhere else we have definition so
16:56 - while you know it is uh you know uh you
16:59 - can say the responsibility of linker
17:01 - actually to link when you compile this
17:05 - then it is actually the uh when you
17:07 - execute this then uh the comp sorry the
17:09 - Linker will link this thing it will see
17:12 - the extern keyword then it will link
17:14 - where is definition of this a in any
17:17 - other file then it will link that file
17:20 - and then it will be executed right it is
17:22 - not the responsibility of actually
17:24 - compiler it is a responsibility of
17:27 - linker right we have
17:29 - discussed like uh you can say this how
17:32 - this is to be executed the complete
17:34 - execution process of a program of a c
17:38 - program actually right so you can check
17:39 - out that video that is why it is not
17:41 - giving anyr it is just a declaration but
17:43 - it is definition so you have to tell the
17:45 - size here so this is what arrays of
17:48 - unknown size now see in one case this
17:53 - thing is allowed you can write down this
17:54 - thing but you have to initialize the
17:57 - array here here only so equal to how to
18:00 - initialize an array this is what
18:01 - declaration how to initialize array now
18:03 - two uh ways are there at compile time at
18:06 - run time so at compile time have to have
18:08 - to initialize let me just tell you if
18:10 - you don't give the size it's okay just
18:12 - give the list like 1 4 8 0 - 5 something
18:18 - like this
18:20 - right now you'll not get any error
18:23 - because automatically the array size
18:25 - will be calculated because there are 1 2
18:27 - 3 4 5 ments so the size is five so how
18:31 - much memory would be allocated 20 bytes
18:33 - would be allocated right so this is
18:35 - allowed if you are initializing at the
18:38 - same time then don't you don't need to
18:40 - give here the size right and same if I
18:45 - write like here I R number is equal to
18:48 - 10 and here I want to initialize 1 2 3 4
18:51 - only five right so five elements are 1 2
18:55 - 3 4 5 but remaining elements would be
18:58 - zero 0 0 because the memory would be
19:00 - allocated for 10 elements that is fixed
19:03 - right so obviously the remaining would
19:05 - be waste because we have just used 5
19:09 - into 4 20 bytes and there 40 bytes has
19:12 - been allocated 10 into 4 40 bytes has
19:14 - been allocated right so wastage of
19:16 - memory is more when we are using these
19:19 - arrays and if I write here something
19:21 - like this zero so all the elements would
19:25 - be allocated to zero because one is z
19:28 - and remaining is nothing so
19:30 - automatically zero but see one question
19:32 - for you is if I want to allocate all the
19:34 - R numbers all the 10 numbers in this
19:37 - array with a same value like
19:40 - one all should be one so rather than
19:44 - writing here one 10 Time 1 one one one
19:47 - one no this is not the case suppose here
19:50 - I have 50 or the size is 100 and all the
19:55 - elements I want
19:56 - one all the 100 element should be 1 one
19:59 - one one one so how you are going to do
20:01 - this that is your assignment you have to
20:03 - let me know in comment section right and
20:07 - if right if suppose the size is only uh
20:11 - five and
20:15 - here I'm just I'm writing six values so
20:19 - that would be an error right two my
20:21 - initializer values because size is five
20:23 - so only five Val it can store
20:26 - right although there is no bound
20:28 - checking in this array that is a
20:29 - drawback but that thing we'll discuss
20:31 - when I'll tell you how to access the
20:33 - elements of array right then you will
20:35 - get that thing better right so this is
20:37 - what initialization at compile time but
20:39 - at run time from the user I want to ask
20:42 - the RO numbers right so with the help of
20:46 - like obviously we can ask enter
20:50 - the
20:52 - rumos
20:54 - right and then because I want five
20:57 - number
20:58 - numbers right so that would be a that
21:01 - would be in a loop so
21:04 - four let's take a variable for Loop in I
21:07 - is equal to0 because array index always
21:09 - start from zero I should be less than 5
21:15 - and I ++ not less than equal to 5 0 1 2
21:19 - 3 4 five elements so till four index
21:22 - would be till four
21:25 - right and with the help of C in
21:28 - we can
21:29 - take value from the user right so R
21:32 - number and
21:35 - I like this this is what kind of index
21:39 - kind of thing right and one question
21:41 - here is why the index always starts from
21:44 - zero this is one question for you guys
21:47 - you have to let me know in comment
21:49 - section the answer of this
21:51 - question if you're not getting the
21:52 - answer it's okay we'll discuss this
21:54 - thing the answer of uh this question
21:56 - also in next video why the array index
21:58 - always starts from zero right why not
22:01 - from
22:02 - one and this is kind of index because to
22:05 - access array elements we use what method
22:08 - index method right now how to access
22:12 - this is what initialization at run time
22:15 - so from
22:16 - user uh we are asking suppose I if I run
22:20 - this then it will ask from the user
22:23 - enter the R numbers 1 2 3 4 4
22:29 - five obviously it is not showing us the
22:32 - r numers it has only stored these R
22:35 - numbers right because we are not writing
22:38 - any code to access those Ro numbers how
22:41 - to access array elements that thing we
22:44 - will see in next video
22:45 - right so I hope now till now it is clear
22:49 - to you guys like Neo and some
22:52 - introduction it was like introductory
22:54 - part of arrays and see rather than this
22:57 - four Loop we we can use while loop do
22:59 - while loop also right to initialize
23:04 - these arrays or range based for Loop
23:05 - also that is up to you which Loop you're
23:08 - using so I hope till now arrays are
23:10 - clear to you guys what is need of array
23:12 - what is an array how to declare an array
23:14 - how to initialize an array so in the
23:15 - next video we'll see how to you know the
23:17 - memory representation of arrays and uh
23:21 - how to access elements of arrays 1D
23:23 - array we are discussing discussing here
23:25 - right 2D arrays multi-dimensional arrays
23:27 - we will disc discuss later right so now
23:29 - I'll see you in the next video till then
23:31 - bye-bye take
23:34 - care