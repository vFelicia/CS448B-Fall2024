00:00 - so in the series of running c
00:01 - programming we are discussing file
00:02 - handling in c in the last video we have
00:04 - discussed f seq function in c
00:07 - we are left with one more function that
00:08 - is f tail function so in this video we
00:10 - will discuss about that function
00:12 - everything about this function with the
00:13 - help of a program
00:15 - right practically i will show you
00:16 - in file handling we have some special
00:18 - function like fc caftel rewind so while
00:21 - you are randomly accessing the file then
00:23 - these functions play an important role
00:25 - these functions are having their
00:26 - specific applications right so these are
00:29 - also very important i know in file
00:31 - handling so everything about f2l
00:33 - function we'll discuss in this video but
00:34 - before that this won't tell you one
00:36 - thing for the gate 2022 aspirants an
00:38 - academy has started all india mock test
00:40 - series in the month of january every
00:42 - sunday as we know practice is the key so
00:45 - these mock tests will definitely boost
00:46 - up your confidence and help you to you
00:48 - know identify your weak areas and you
00:51 - can take these mock tests for free these
00:53 - are full length mock tests covering the
00:54 - entire slavers and these has been these
00:56 - tests has been curated by their best
00:58 - educators so here you will experience
01:00 - actual exam like a setting and you also
01:02 - get all india ranking so that you know
01:05 - you can you can see where you are
01:06 - standing among the other gate aspirants
01:08 - from all over india and after every mock
01:10 - test you will get detailed video
01:12 - solutions by their experts so you can
01:14 - identify your weak areas and your
01:15 - strength and you can you know prepare
01:17 - according to that one more thing they
01:18 - are also going to conduct a combat on
01:20 - 30th of january
01:22 - and this is a live test and you can take
01:25 - this test also for free this combat
01:27 - consists of 20 questions and time limit
01:29 - would be 60 minutes so here you will get
01:31 - a chance to compete with thousands of
01:33 - learners from all over india and you
01:34 - stand a chance to win up to 100
01:36 - scholarship plus some exciting prizes
01:39 - like jbl speakers samsung tab amazon
01:42 - vouchers and much more
01:44 - and after this combat also you will get
01:46 - detailed video solutions by their top
01:48 - educators so that you can map your
01:50 - strength and weaknesses and you can you
01:51 - know change your preparation project
01:53 - trajectory according to that
01:55 - and they also started few batches for
01:57 - gate 2023 and 2024 aspirants from 27th
02:00 - of january so you can also check out
02:02 - these batches and use my code jkl10 to
02:05 - enroll in these free tests and to get 10
02:07 - discount on your plus subscription so
02:09 - all the details and the relevant links
02:11 - i'll put in the description box of this
02:13 - video you can go and check out now let's
02:15 - see what is f10 function in c see as the
02:17 - name suggests it will
02:19 - tell something so what it will tell it
02:22 - will tell the position of the file
02:24 - pointer in that file with respect to
02:27 - starting of the file see
02:29 - whatever i am saying let me just you
02:30 - know tell you what i am saying suppose i
02:33 - have a file
02:35 - txt and in this i have
02:38 - jenny kathryn only this
02:40 - i have in this file this is starting of
02:42 - the file right and it would be started
02:44 - like index would be 0 1 2 3 4 5 6 7
02:48 - something like this so now at starting
02:51 - if you open the file in read mode then
02:53 - the file pointer would be here in the
02:56 - starting at here
02:58 - so
02:59 - the position of this file pointer is 0th
03:02 - index 0
03:04 - so using f10 function you can find out
03:07 - the position of the file pointer
03:10 - if suppose you have moved this file
03:12 - pointer like to a specific position
03:14 - using fc we can do this thing using fseq
03:16 - we have moved this to here to k and
03:19 - after that if you will use f tail
03:21 - function then what it will return
03:23 - 6
03:26 - because the index of this k is 6
03:29 - right from the starting 1 2 3 four five
03:31 - six six bytes you have skipped and and
03:34 - the seventh byte the file pointer is
03:36 - right now so it will tell
03:39 - the position of that that file pointer
03:41 - right with respect to starting of the
03:43 - file starting of the file right not end
03:45 - of the file starting of the file
03:47 - one application of this ftl function is
03:49 - what
03:50 - this function is generally used to find
03:52 - out
03:53 - the length of this file
03:55 - now how you can find out the length that
03:57 - also we will see with help of a program
03:59 - right now see
04:01 - let me just write down a simple code
04:04 - see i am opening this file in read more
04:07 - simple read more right and i am just
04:10 - checking if fp is equal to is equal to
04:12 - null means
04:16 - error in opening file or you can say
04:18 - can't open file
04:21 - and directly exit from this point only
04:25 - right otherwise what we will do at first
04:28 - i am going to print where is the
04:30 - file pointer so directly you can use ftl
04:33 - function what is the syntax
04:35 - f10 and simply you are suppo it will
04:37 - accept only one argument that is the
04:38 - file pointer so file pointer is fp
04:42 - right
04:43 - and see return type of ftl function is
04:45 - what
04:48 - long end
04:50 - this is the return type and we have
04:52 - simply f2l and here we will use
04:55 - file
04:56 - pointer here file pointer
04:59 - the name of the pointer right the return
05:02 - type is long end what it will return
05:04 - integer value
05:06 - right
05:07 - so whatever it will return that thing i
05:08 - am going to store
05:10 - in an integer type of variable suppose
05:12 - variable i am taking
05:14 - position pos
05:16 - so before using this you have to
05:19 - declare position pos position is equal
05:22 - to ftl whatever it will return i am
05:23 - going to store in pos and i am going to
05:25 - print that simply
05:27 - percentage d because it is uh you know
05:30 - int
05:31 - the type isn't and i am printing
05:33 - here what p os
05:36 - that's it
05:38 - and at last f close
05:42 - so if you will write down this program
05:44 - then what it will run see you are
05:45 - opening this in read mode
05:47 - so definitely the file pointer at
05:49 - starting would be here only
05:51 - whenever this file would be opened the
05:53 - file pointer will be at the starting of
05:55 - the file so what it will return the pos
05:57 - would be zero so it will return zero
06:00 - here is the file pointer right
06:02 - now
06:04 - suppose
06:05 - i have moved this file pointer using f
06:08 - seek
06:08 - f seek and here i am using fp and the
06:12 - offset i am providing five
06:15 - and
06:16 - from the starting seek underscore set
06:21 - now five is offset so one two three four
06:24 - five right
06:26 - now here file pointer would be at this
06:28 - position
06:29 - here we have space
06:31 - right
06:32 - five byte you are going to skip from the
06:34 - starting and 5.2 would be here so after
06:37 - that if you will print the file
06:39 - position
06:41 - then what it will return percentage
06:42 - directly i am writing in f printf only
06:45 - f10 this also you can do
06:48 - rather than writing this in two line
06:50 - like f tell a pos is equal to f tell
06:52 - then i will print the pos directly you
06:53 - can in printf only you can write down
06:55 - this function f1l pos right so it will
06:58 - print what
06:59 - now
07:00 - the position of file pointer is here so
07:02 - it will return five
07:05 - right
07:06 - if you will move the file pointer
07:07 - backward like fc
07:09 - fp
07:10 - like minus three
07:12 - and
07:14 - seek underscore cur from the current
07:16 - position and after that if you will
07:17 - print
07:19 - this according to that it will give the
07:21 - where is the file pointer right
07:24 - now
07:25 - see file pointer is here
07:27 - suppose here after this printf after
07:30 - this printf i am writing
07:32 - f get c
07:35 - i am reading a single character in ch i
07:37 - am going to store that thing
07:39 - right
07:40 - and i am
07:42 - printing only percentage c
07:44 - ch
07:46 - and after this again i am printing
07:48 - printf percentage d
07:50 - f10
07:53 - i want to check where is the position of
07:55 - this file pointer so after this see and
07:58 - right now file pointer is here
08:00 - so what it will print space
08:03 - the character is space only right so it
08:05 - will print space
08:07 - right and now
08:10 - f tell f p now what is the
08:12 - position of the file pointer
08:14 - see
08:15 - space it will print and file pointer
08:17 - would be moved to next one if get c
08:20 - will do this thing it will print this
08:22 - and file pointer would be moved here so
08:25 - now at file pointer is now at sixth
08:27 - index so it will print six now
08:30 - right
08:32 - if here you will print a complete string
08:37 - using f scanf you can also do see
08:40 - if after this line in this i have jenny
08:43 - khatri is
08:47 - awesome suppose this i have in this file
08:49 - and after this printf what i am writing
08:52 - f
08:54 - scanf scanf function is used to read
08:57 - from the file formatted
08:59 - read right so what is the syntax file
09:02 - pointer then percentage is the format
09:05 - specifier and
09:07 - whatever you will read the string that
09:09 - i'll store in str in this str
09:12 - right
09:13 - and after this scanf
09:16 - suppose i am printing
09:17 - percentage s this str i am going to
09:20 - print
09:21 - and after this again i am writing
09:25 - percentage d
09:26 - f tell
09:28 - fb
09:30 - so what would be the output
09:32 - right now right now the file pointer is
09:35 - here at k
09:37 - after this line
09:38 - so
09:39 - this khatri would be considered as a
09:41 - complete string
09:42 - right note space
09:44 - if space occurred then end of the string
09:47 - right so this khatri would be considered
09:50 - as a complete string
09:52 - and this would be
09:54 - fast and stored in str now it will
09:57 - print khatri here
09:59 - this language will print khatri
10:02 - right and now what is the position of f
10:04 - tell
10:05 - how many bytes one two three four five
10:07 - six like at six
10:08 - then this is seven then eight nine ten
10:12 - eleven
10:13 - and at twelve
10:15 - now it will print twelve
10:20 - i hope you got this
10:22 - right because we are reading a complete
10:24 - string
10:25 - so now file pointer would be moved what
10:28 - is whatever the length of the string
10:30 - that many characters the file pointer
10:32 - would be moved and now the position of
10:34 - file pointer would be 12. now i have
10:37 - told you this function is also the one
10:38 - application is what
10:40 - to find out the length of the complete
10:43 - file
10:43 - right
10:45 - now what is the length how to find out c
10:47 - i hope now till now you go this right
10:50 - i'm going to rub this and i'm going to
10:51 - write down another syntax
10:57 - fc
10:58 - fp
10:59 - offset is 0
11:01 - seek underscore end
11:05 - seek underscore end means here
11:08 - we are going to move file pointer
11:10 - backward
11:12 - how offset is what 0 only
11:14 - so file pointer would be here only
11:18 - right
11:19 - and now
11:21 - you can simply print the position of
11:23 - this file pointer
11:25 - whatever the position that would be the
11:27 - length of the file that's it
11:29 - right
11:30 - so simply here you can print printf
11:33 - percentage d
11:35 - f10
11:37 - fp
11:38 - and what it will print the position of
11:40 - file pointer right now is here
11:43 - so this is how you can use this f2l
11:45 - function to find out the length of the
11:47 - file and if suppose here you have space
11:50 - so one more character that is 23
11:54 - right so according to that it will print
11:56 - whatever the length of the file right so
11:58 - this is one application of the section i
12:00 - hope now you have some idea about this f
12:03 - tell function how you can use this
12:04 - function and why we use this function
12:06 - right now let me show you practical
12:09 - so let me just create a new file
12:15 - f2l
12:18 - dot c right and we are going to go with
12:20 - this thing because
12:23 - till this line it would be same
12:26 - so just copy this thing
12:32 - right and i'm opening this in r mode
12:34 - only right abc dot txt file in abc dot
12:36 - txt what we have this we have janika
12:38 - three is awesome right this content we
12:41 - have
12:41 - so now
12:43 - at starting
12:46 - rather than using two line i'm just
12:48 - printing the location in one line only
12:50 - percentage
12:51 - d and here only i am using f
12:54 - right fb
12:58 - and
12:59 - f close
13:02 - so it's starting this would be the it
13:04 - what it would print
13:06 - zero
13:07 - right because the file pointer would be
13:09 - at
13:10 - zero within index at the starting of the
13:12 - file right
13:14 - see it is printing zero
13:16 - right
13:17 - now
13:17 - after this f tell c suppose i am using f
13:21 - get c
13:22 - one character
13:25 - i am reading right
13:28 - ch is equal to f get c
13:30 - right and after that again
13:32 - what i want to print the location
13:35 - if you want to print the character you
13:37 - have read that also you can print
13:39 - but here my main motto is
13:41 - to get you familiar with f tail function
13:43 - so after this
13:45 - see let me just
13:47 - format this slash and with slasher so
13:50 - now again i am going to run this and
13:51 - what output you will get here c 0 and
13:54 - next time
13:56 - the file pointer would be at one index
13:59 - if you want to print the character then
14:01 - simply you can add this line and again
14:02 - let me just run this and show you see
14:05 - it will print 0 first of all first is 0
14:07 - then it will print j
14:10 - j it will print and after that
14:13 - e the index of e is
14:14 - after you know f gate c will first of
14:17 - all print j that character and then
14:19 - cursor would move one position you know
14:21 - uh forward so here we have one next time
14:25 - it will print the location would be one
14:28 - if suppose rather than a single
14:30 - character
14:31 - here i am going to print
14:34 - the complete string
14:36 - i am get i'm writing f
14:40 - scanf
14:43 - fp comma the format specifier would be
14:46 - percentage s
14:47 - and i'm going to print that in str i'll
14:50 - store that in str and rather than ch
14:53 - here i'm printing
14:54 - what
14:55 - str
14:57 - percentage percentages
14:58 - fine
14:59 - and now
15:02 - str i have taken this
15:05 - f p
15:06 - so here we have
15:08 - uh comma
15:10 - right
15:13 - after this i'm printing after printing
15:15 - the string i'm printing what is the
15:17 - location so jenny would be considered as
15:20 - a complete string that would be printed
15:22 - c 0 then jenny would be printed and
15:25 - after that 5
15:27 - is the
15:28 - that what
15:29 - location of your file pointer phi
15:32 - at fifth index right at space
15:35 - j j
15:36 - j e double n y
15:38 - the length of this string is 5 so length
15:41 - is 5 that is why it is printing after
15:43 - that 5.
15:44 - so
15:45 - if if you want to use this to get the
15:49 - length of the complete file then what
15:50 - you can do
15:52 - here i'm using f
15:54 - seek function
15:58 - offset is 0 and then i'm
16:01 - writing what
16:03 - seek
16:06 - end
16:07 - right
16:09 - so now we have moved the cursor to the
16:11 - end of this file right and after this i
16:14 - am printing the location like printf
16:17 - f10
16:18 - fp right
16:20 - so now let me just run this and show you
16:23 - what output you are getting
16:27 - see
16:28 - 0 at starting it will print 0
16:31 - then we are printing a string that is
16:33 - jenny and then we are moving this to the
16:35 - end of the file right from the end of
16:37 - the file 0 is the offset so file point
16:39 - would be to the end of the file and now
16:41 - i am printing the position of the file
16:42 - pointer that is why that's what the
16:44 - length of this file so that is what 23
16:46 - so 23 is the length of the file you can
16:49 - you know find out you can count these
16:51 - characters these are 25
16:53 - right
16:54 - so 23 you know 25 23 is the length of
16:57 - this file 23
16:59 - right
17:02 - so i hope now you got the basic idea
17:03 - about f tail function now you can use
17:05 - this
17:05 - f c also you can use here and then f
17:07 - tell also you can move using fc forward
17:10 - and then from the current position to
17:11 - the backward and again you can use f10
17:13 - to get the position and this thing i
17:15 - hope you can do yourself practice right
17:18 - so that's it for this video now
17:20 - so that's it for this video and the next
17:21 - video we will see rewind function in
17:22 - file handling so now in the next video
17:24 - till then bye take care