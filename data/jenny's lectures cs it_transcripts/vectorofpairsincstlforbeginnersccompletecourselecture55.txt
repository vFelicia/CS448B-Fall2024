00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language in the previous
00:06 - video we have seen what is a pair in C++
00:08 - and the series we have also seen what
00:10 - are vectors in C++ so I hope you are now
00:13 - aware about vectors and pairs if not
00:15 - please watch the previous videos in this
00:17 - playlist then you will get this concept
00:19 - better so in this video we'll see Vector
00:22 - of pair like we are going to combine
00:24 - both these things vector and pairs okay
00:27 - if you want to combine the features of
00:29 - both these things vector and pairs then
00:32 - yes we can do this thing and that would
00:35 - be more powerful you can say uh kind of
00:38 - data structure right because yeah uh
00:41 - data structure is nothing but just a way
00:44 - to store and manage the data so in this
00:47 - video we'll see that thing that Vector
00:49 - of pairs what is this Vector of pairs
00:51 - how to use it why to use it when to use
00:53 - it the application and all with help of
00:55 - programs also I'll show you right so now
00:59 - see pair I hope now you have idea like a
01:04 - set of two things or if you combine two
01:06 - values or two uh you know uh things then
01:09 - that is called a pair like a in general
01:11 - terms if I say pair of Hues pair of
01:14 - shirt you know these kind of things
01:16 - means two things we are going to combine
01:19 - these two things or two values and those
01:21 - values can be of same type of or
01:23 - different type like int INT in string
01:26 - string B these kind of things right so
01:30 - like for example uh the detail student
01:34 - details name plus r number so name is
01:37 - string R number is what integer so as a
01:40 - single object I want to store this
01:42 - information student name plus you can
01:45 - say the r number right so we can make
01:48 - this we can do uh we can make a pair to
01:51 - store this thing and how to do this
01:54 - thing like pair I have int and like
01:58 - string two data types and P and here
02:01 - only if you want to uh one one way is
02:05 - what many way to initialize this Vector
02:07 - right we can do one thing this thing I
02:10 - have I I I forgotten to tell you in the
02:13 - previous video so one thing we can do is
02:16 - p is equal to in these curly bracket one
02:19 - comma and name
02:23 - j this is also like we can assign the
02:27 - values to this pair right like
02:30 - we can assign values to these the spare
02:34 - right but now I have like 60 students in
02:37 - my class right so for storing the detail
02:42 - of all the 60 students like name withraw
02:44 - number maybe you need 60 pairs P1 P2 P3
02:49 - but better idea is what we can create a
02:51 - vector of pairs that a simple thing
02:54 - right so Vector means what it's a
02:57 - dynamic array we can say it's like same
03:00 - like arrays collection of homogeneous
03:02 - stereotypes but what makes it the vector
03:05 - different from array is what it is
03:06 - dynamic array means Vector can
03:08 - automatically increase its size or
03:10 - Shrink it its size right in arrays size
03:14 - is fixed that is drawback of Ares that
03:16 - is why we use vectors right now here we
03:20 - can create Vector of pairs so how to
03:22 - create that thing what is the syntax
03:25 - please watch out the previous videos
03:26 - first like what is a pair what is a
03:28 - vector how to use vector all then you
03:30 - will get this thing better right so we
03:32 - have a simple simple Vector if I want to
03:36 - create a vector not Vector of pair
03:38 - simple Vector then we write here Vector
03:41 - the data type suppose I'm creating a
03:43 - vector of type integer and Vector name
03:46 - uh suppose
03:47 - numbers that's it this is a vector
03:50 - numbers which will
03:52 - store integer only in right or we can
03:57 - write write down here float or we can
03:59 - create a integer of string like this or
04:01 - Bo like this right but all the values in
04:04 - the single Vector would be of same type
04:07 - right but here rather than storing this
04:10 - primitive data type we are going to
04:11 - store pairs in this Vector not this
04:16 - fundamental data type no right that is
04:19 - called Vector of pairs so how
04:21 - to what should be the syntax int but
04:25 - here it's simple data type but here I
04:26 - want to store pair so for pair we just
04:32 - write down here what is the syntax to
04:34 - create a pair pair and here again data
04:38 - type of whatever value you want to store
04:41 - suppose int and
04:44 - string right this is pair and again
04:48 - close this for Vector right and then
04:51 - Vector name uh suppose student
04:58 - detail so this this is how we are going
05:00 - to create a vector of
05:03 - pairs right so now this student detail
05:06 - this is a vector which is going to
05:09 - contain these pairs int and string
05:11 - having two values one of int one is
05:13 - string right simple sentex I hope it is
05:17 - not so much done right now same
05:20 - operation you can apply here what you
05:22 - have you know done in case of vectors
05:25 - like if you want to uh uh push back a
05:28 - value in this Vector of pair same push
05:31 - back a function we can use pop back pop
05:34 - back we can use erase delete swap clear
05:38 - all the iterators we can use begin end C
05:41 - begin C end and reverse R begin R end
05:44 - like this right so those things I'll
05:48 - show you two to three things with the
05:50 - help of programs remaining things you
05:52 - are going to practice right I hope this
05:55 - is clear what is Vector of pairs so we
05:58 - can say it Vector of pair it is a
06:00 - dynamic array which contain pairs
06:03 - instead of primitive data types right so
06:07 - we can say like what is use of this
06:09 - thing or the application when to use
06:11 - this thing if sometimes suppose if you
06:13 - want to group and perform some operation
06:15 - on two related piece of
06:18 - data then we can use Vector of pairs
06:21 - right like maybe some coordinates or
06:24 - values or keys or like this thing in
06:26 - student detail if you want to store this
06:28 - kind of thing as a pair right like name
06:32 - of the student and R number of the
06:34 - student and if you want to perform some
06:36 - operation on this data later then one
06:38 - way to achieve this thing is to use
06:40 - Vector of pairs I'm not saying that this
06:42 - is the only way to achieve this thing or
06:43 - to store this kind of data no one way is
06:47 - this and there can be multiple ways to
06:50 - store this kind of data but one way is
06:52 - to use Vector of pairs right now let's
06:55 - see this thing with the help of program
06:58 - so let's create a new file here and same
07:01 - we are going to include header file and
07:03 - name space and yeah we are going to
07:05 - include the header file Vector also
07:07 - because we are going to use Vector right
07:10 - so let's define a vector of pair
07:14 - Vector simply we write here
07:17 - pair int and
07:21 - string right and name of the vector is
07:24 - Vector of pair is
07:26 - student details
07:29 - now if you want to initialize this here
07:31 - only then yeah we can do this thing also
07:34 - right we can just put equal to and here
07:39 - in this curly bracket just put the pair
07:42 - of values right in curly bracket so
07:45 - first is string sorry first is integer
07:48 - so suppose R number one and then name
07:52 - this is one pair suppose another pair in
07:55 - curly bracket curly Braes right not
07:58 - those round bra that would give you
08:00 - error right because this is the way to
08:03 - initialize uh the
08:05 - spare so uh next is suppose R number
08:09 - maybe two and I'm just writing
08:12 - here
08:15 - pile I'm just initializing this with two
08:18 - pairs one and two
08:22 - right now if you want to print these two
08:26 - things then yeah we have
08:30 - uh a loop like let's use for Loop in I
08:33 - is equal to 0 and then I less than till
08:39 - Vector size so Vector name
08:41 - is student
08:43 - details dot size till Vector size this
08:47 - Loop is going to iterate and then simply
08:51 - I
08:55 - ++ right and how to access the values of
08:59 - of vector simply we can use at also we
09:02 - can use that subscript operator also so
09:05 - let's use first subscript so name of the
09:08 - vector student details and here in this
09:13 - we are going to write down that index 0
09:15 - 1 2 3 4 so here firstly we this I is the
09:20 - variable which is going to iterate for
09:22 - this Vector so here we will put I but
09:26 - now I want to access this you know uh
09:31 - this value the pair values right suppose
09:34 - just write down this thing student
09:35 - details Vector name and just I and
09:38 - that's it see it will give you error no
09:42 - operator this matches these operants
09:44 - these operants right because in this
09:49 - Vector now we are not storing simple
09:51 - values or simple numbers or primitive
09:53 - dat types there are pairs so how to
09:55 - access pair values we have two keyword
09:57 - first and second so you have to use that
10:00 - thing to access the spare values right
10:03 - so student
10:05 - details after that dot
10:10 - first let's put some space and
10:14 - then same
10:17 - here to access second we use just
10:22 - second and
10:29 - and that's it so let's run this and see
10:31 - what it is going to print
10:34 - see both the vectors one jny 2
10:38 - p right now if you want to push back
10:41 - some values to this Vector yeah we can
10:43 - do that thing also simply we have that
10:47 - uh member function push back so same
10:51 - student detail dot just call this push
10:54 - back function and now
10:57 - again print
11:00 - the
11:01 - values let's run this and see what
11:03 - output you are
11:05 - getting so yeah it's
11:09 - working this pair has been inserted 3G
11:13 - so it's working or another way is what
11:15 - here you can use that make pair function
11:17 - rather than this we can also do one
11:20 - thing here we can do what oh sorry we
11:24 - can just call that function what is make
11:28 - pair function
11:31 - make pair and in bracket simply we can
11:34 - pass something like
11:36 - this
11:40 - right this is another way so let's run
11:44 - this and I'll show you what output you
11:45 - will get here see it's done right P back
11:50 - P back you can use all the functions
11:52 - whatever is there on Vector we can use
11:54 - on Vector of pairs right if you want to
11:57 - erase something yes yes we can use that
12:00 - thing also let's
12:01 - erase
12:03 - uh which function you have to call on
12:06 - this Vector
12:08 - erase so let's call erray and in bracket
12:11 - you have to pass the location location
12:14 - on which location you want to erase the
12:16 - data so that location you have to pass
12:18 - in the series member function so and
12:20 - using iterator we can find out you know
12:23 - iterator is basically that is going to
12:26 - point that uh you know object so it's
12:29 - basically containing the address of the
12:31 - location so let's first um just I want
12:35 - to delete this okay after inserting this
12:39 - I want to delete the third one 3G this
12:42 - student detail
12:44 - so what you can do on this Vector
12:47 - student detail dot we can just call the
12:50 - iterator begin so it is going
12:53 - to return what that iterator to the at
12:56 - the beginning of this
12:59 - Vector so here at this
13:02 - pair so we can do
13:06 - plus
13:08 - 2 0 then 1 and then 2 right so then this
13:15 - student would be deleted three and
13:18 - g let's see I don't know it will work so
13:23 - let's just put here a semicolon and
13:26 - again just print these students details
13:30 - right let's run
13:31 - this first was 1 2 Jenny then 1 2 3 and
13:36 - again 1 2 3 has been deleted 3j has been
13:39 - deleted so yeah it's working so all the
13:42 - functions you can use on this Vector of
13:45 - pairs I hope now you are familiar with
13:47 - this Vector of pairs so just create
13:50 - Vector of pairs having here different
13:52 - different data types right and just try
13:55 - out all the operations all the iterators
13:58 - right begin end R begin C begin C end
14:03 - all the member functions swap clear and
14:07 - uh pop back erase and push back we have
14:09 - done right insert you can use those
14:13 - thing also size mix size capacity you
14:15 - can find out that thing also here right
14:18 - so I hope now now this is your
14:20 - assignment you have to try this out
14:23 - right now right on this Vector only you
14:26 - can try this out all the member
14:27 - functions so yeah it is quite useful
14:29 - Vector of pairs because in this we have
14:32 - combined features or power of both the
14:34 - things vector and Pairs and we have
14:37 - created another type of uh you can say
14:39 - it's a data structure which is going to
14:42 - manage the collection of related data
14:44 - type or you can say related
14:47 - data right but rather than this we can
14:50 - use that add function also to
14:52 - access this you know these values so
14:57 - suppose here I'm using add uh function
15:00 - student details dot at and here in
15:06 - bracket pass that index something like
15:10 - this but don't forget to put this DOT
15:12 - first and do second these keywords
15:16 - student details dot add I do second so
15:21 - using this also we can access right
15:24 - let's run this and
15:26 - see see it's working
15:29 - right so I hope this concept is clear to
15:32 - you guys uh so in the next video we'll
15:33 - see some coding exercise on Pairs and
15:35 - Vector of pairs right so now I'll see
15:37 - you in the next video till then bye take
15:39 - care