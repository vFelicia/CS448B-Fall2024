00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:04 - Python programming language in the
00:05 - previous video we have seen types of
00:07 - arguments in Python right positional
00:10 - keyword default required arbitrary or
00:12 - variable and arguments right now two
00:15 - specific types of things are also there
00:18 - in Python node you can see specific kind
00:20 - of argument like
00:22 - arcs and quarks these arguments here is
00:26 - one star here we have two stars so what
00:28 - are these arguments and why we use and
00:30 - when we use these type of arguments
00:33 - right so we'll see this thing in this
00:35 - video with the help of program I'll show
00:37 - you both for arcs and works we'll see
00:39 - programs right practically we will see
00:41 - okay now first is us so this is star
00:46 - arcs this is short form for
00:49 - arbitrary positional arguments see in
00:52 - the last video if you have watched that
00:54 - video I have told you in arbitrary
00:55 - arguments
00:57 - like what is the example you have taken
01:00 - Edition add function right maybe in
01:03 - advance I don't know how many number of
01:04 - arguments I want to pass at the runtime
01:06 - right or every time I call the function
01:09 - the number of arguments changes like it
01:13 - if I call this add function so I want to
01:16 - add only two numbers second type second
01:19 - time I want to add like five seven ten
01:21 - nine four numbers third time if I want
01:24 - to call then I want to add like five
01:26 - seven ten nine five then eleven minus
01:30 - one
01:32 - these numbers so one solution is what
01:34 - maybe you can Define three add functions
01:37 - one will accept only two argument one
01:39 - will accept four argument one will
01:41 - accept these type of arguments but why
01:43 - we are defining three add functions
01:46 - because function same ad only number of
01:49 - arguments are changing for this thing in
01:50 - Python we have a solution we can pass
01:53 - arbitrary arguments also right and for
01:56 - that we use these are what positional
01:58 - arguments these are not keyword argument
02:00 - right I have told you the difference
02:02 - positional versus keyword argument in
02:04 - previous video
02:05 - so we are passing arbitrary positional
02:08 - argument right so we can define a
02:10 - function simply like diff add and here
02:15 - one star and
02:17 - arms so this is what short form of
02:20 - arbitrary positional argument or rather
02:22 - than R because this is simple convention
02:24 - right you can use any name like numbers
02:28 - like Star numbers that is also fine
02:32 - star data star info
02:35 - this kind of thing right or this is
02:38 - convention only this is for arbitrary
02:40 - position for arbitrary keyword arguments
02:44 - right so first time it will accept only
02:47 - two arguments then four argument then
02:49 - this much type of type of either means
02:51 - right only one you have to specify so
02:54 - this is arbitrary positional argument as
02:57 - I'll show you this thing with the help
02:59 - of example and how this thing actually
03:02 - works basic difference I'm just going to
03:05 - tell you now now this is what one star
03:08 - will accept only arbitrary known
03:11 - keyworded arguments or arbitrary
03:12 - positional argument but I want to pass
03:15 - keyworded argument keyword argument like
03:17 - information of a person
03:19 - like info person we have a function and
03:23 - I want to pass like name like this name
03:26 - is equal to something like Ram
03:29 - then age equal to 31 then some phone
03:33 - number equal to 99 something like this
03:37 - so these are keyworded arguments but
03:39 - this will not accept keyworded argument
03:41 - right arbitrary keyword argument because
03:45 - maybe some person want to like I don't
03:48 - want to reveal my maybe phone number so
03:51 - I will just pass name Jenny and age
03:53 - that's it maybe some other person don't
03:55 - want to reveal age and phone number
03:59 - and she want to pass only name and maybe
04:01 - department so every time you are passing
04:04 - different number of arguments
04:06 - so to accept this thing we need
04:07 - arbitrary
04:09 - keyworded argument as the name suggests
04:12 - KW keyword arbitrary key worded
04:16 - arguments so for this we will Define a
04:20 - function something like this like depth
04:23 - and info
04:24 - person and a double star and
04:29 - works like this and here we can write
04:32 - down whatever you want to do with this
04:33 - information
04:35 - right or rather than quas this is simple
04:37 - convention in Python right we can use
04:40 - arcs and quarks or rather than this we
04:42 - can change the name rather than this I
04:44 - can write down info or I can write down
04:46 - data anyway
04:49 - or simple a variable name like a
04:52 - but better to take a meaningful name
04:55 - right so this thing also I'll show you
04:57 - with the help of example like program
05:00 - I hope the main difference the basic
05:02 - difference is clear to you what is this
05:04 - arcs and what is
05:06 - quarks so okay let's see with the help
05:09 - of program okay so let's create a new
05:12 - file here
05:14 - and just to give the name arbitrary
05:17 - positional underscore arbitrary keyword
05:22 - arguments Dot
05:24 - p y right
05:27 - first arbitrary positional argument so
05:29 - same we will take the uh you know that
05:32 - add function example of this like I want
05:36 - to pass two number at this time
05:38 - again I want to add like six four two
05:42 - three numbers
05:43 - it should be comma right
05:45 - six like five or six again
05:48 - maybe next time I want to add one two
05:51 - three four five six fifty six and eight
05:56 - four five six numbers right so every
05:59 - time I'm calling the function
06:01 - the number of arguments are changing for
06:04 - this thing we use arbitrary arguments so
06:07 - arbitrary positional arguments because
06:09 - these are positional arguments so just
06:10 - Define the function add and one star and
06:14 - arbitrary positional argument
06:16 - right or rather than ask if you don't
06:18 - want to use this convention
06:20 - as you can simply write down any like
06:22 - data numbers or anything like numbers I
06:25 - I'm adding I'm writing right and what
06:28 - you want to do like addition of these
06:30 - numbers so now the point is okay now see
06:33 - what happens suppose this I am passing
06:35 - four five six arguments are there here
06:38 - right
06:39 - so these six arguments should be passed
06:41 - here now this operator this star will
06:44 - take all the
06:45 - arbitrary positional arguments and
06:49 - pack them them into a Tuple
06:54 - this thing is you need to note down
06:57 - this would be packed into a tuple not a
07:00 - list
07:01 - right so now it will become Tuple here
07:05 - this this one
07:08 - so this is as a apple would be passed
07:11 - right so if you want to access each and
07:13 - each element of the Tuple what yeah we
07:16 - can use using index we can access but if
07:19 - you want to add we have four Loop 4 like
07:21 - any number or for I in
07:25 - what is the name of this Tuple numbers
07:27 - and we will just add this upon I'm
07:30 - taking a variable C
07:33 - okay first let's just
07:35 - initialize c c is equal to 0 in C I am
07:39 - you know putting the sum so C is equal
07:42 - to C plus I or C plus equal to I short
07:46 - form also you can write something like
07:47 - this C plus equal to I
07:50 - this is also fine right and outside of
07:53 - this for loop after that you can simply
07:56 - print sum like something like this using
07:59 - F string
08:00 - the sum is
08:03 - in C variable we have sum
08:05 - right
08:06 - so let's call this and see what output
08:08 - you will get here
08:11 - so first we will get sum is three second
08:13 - time 13 sorry 17 and next time it's 74.
08:18 - right for these
08:20 - fine
08:26 - so these are now why it is passed as a
08:30 - tuple why this this star this operator
08:33 - will pack these arguments as a double
08:35 - not a list because tuples are immutable
08:37 - you cannot change the value of the Tuple
08:40 - after assigning the value means if you
08:43 - have passed these arguments then here
08:46 - after passing we cannot change the value
08:47 - suppose suppose I want to print like
08:50 - print
08:53 - numbers the name of couple is numbers
08:55 - and at zeroth index that also I want to
08:58 - print so let's run this and see one then
09:03 - for the next
09:04 - we have at zeroth index we have six then
09:07 - again for third function call we have
09:09 - one so you can access this thing but you
09:12 - cannot change like if you want to change
09:14 - after printing this how to change simple
09:18 - whatever a zeroth index I want to rather
09:21 - than one it should be 4.
09:25 - right
09:26 - so suppose I just want to call this
09:28 - thing with the only
09:31 - one add function
09:33 - right and rather than 1 at 0 index I
09:36 - want to change it to four so let's run
09:38 - this you will get an error see the Tuple
09:41 - object does not support item assignment
09:42 - so that is why it is passed as a tuple
09:45 - because Tuple sorry mutable we cannot
09:47 - change the value
09:48 - because obviously whatever we are
09:50 - passing here we want the sum for those
09:53 - numbers only it's not like that someone
09:54 - will change here in the definition and
09:56 - that sum we will get so that would be
09:58 - incorrect right that is why it is passed
10:00 - as a double right so I hope you are
10:02 - you're getting with what are the hours
10:04 - arbitrary positional argument now I want
10:07 - to pass keyword argument so this will
10:09 - not accept keyword arguments right
10:12 - suppose suppose here I will pass
10:15 - something like this okay normal argument
10:18 - let's pass so I'm passing
10:21 - Jenny right and
10:24 - here I am taking a one more variable
10:27 - name name so what I am expecting one and
10:31 - two these would be numbers and name
10:32 - would be Jenny right so let's just print
10:35 - here rather than number this let's just
10:37 - print name so it should print name
10:41 - Jenny I think it will work fine
10:44 - but let's run this
10:46 - C
10:47 - this add missing one required keyword
10:51 - only argument name in line number nine
10:56 - in line number nine
10:59 - so this
11:01 - it will accept what C the functioning 1
11:04 - 2 Jenny all the three would be
11:07 - considered as a tuple and would be there
11:10 - in numbers
11:13 - now that is why it is showing one
11:15 - missing argument because for name we are
11:17 - not passing anything according to this
11:20 - let's just print rather than name let's
11:22 - just print here I'll show you numbers
11:24 - the Tuple entire Tuple okay let's run
11:27 - this
11:30 - okay we have like here an error so let's
11:34 - remove this name and then also we'll get
11:38 - an error because we are doing sum and we
11:41 - cannot add number integer with string
11:44 - see you will get an error
11:47 - okay item assignment let's just remove
11:50 - this line as well okay now go to edit
11:52 - you will get see unsupported operator
11:54 - operand type plus equal to 4 intent
11:57 - string
12:00 - string so okay let's just
12:03 - comment out these two lines also and I
12:06 - just want to show you what this numbers
12:08 - is getting
12:11 - see in numbers in this Tuple we have 1 2
12:15 - and Jenny
12:16 - all the three thing all the three
12:18 - argument one two Jenny
12:21 - right but I want this Jenny should be as
12:24 - a separate then it should be there in
12:26 - name so for that you can just pass what
12:31 - keyworded argument name is equal to
12:33 - engine
12:36 - now let's run this what error you will
12:38 - get nothing we are getting error one two
12:40 - numbers are only now this time one two
12:43 - now Jenny is for name okay let's just
12:46 - print here
12:48 - name as well so let's run this see one
12:51 - two and gen like this
12:54 - fine okay let's just remove
12:57 - these also
13:02 - and now okay we are running so if you
13:06 - run this you will get one two three
13:07 - numbers in name we have Jenny and sum is
13:11 - 3 right something like this so while
13:15 - passing the mix of normal arguments and
13:17 - like arbitrary positional argument you
13:20 - need to take care this thing this is
13:22 - keyword argument then it's fine you can
13:25 - pass after this but if it's a normal
13:28 - argument
13:29 - suppose I am passing a
13:33 - and
13:35 - here
13:36 - I want like in one two should be in
13:39 - numbers and a should be 5.
13:43 - will you get an error yes you will get
13:46 - an error missing one required keyword
13:48 - only argument a
13:50 - because one to five would be numbers
13:52 - only so better to pass a normal argument
13:54 - first like in a first then arbitrary
13:59 - positional argument so in a Now by
14:01 - default 2 would be a one would be
14:04 - assigned and after that this 2 5 would
14:06 - be assigned to numbers let's run this
14:11 - okay name is not uh defined let's just
14:15 - remove this because we don't have any
14:17 - name here now let's run this
14:20 - in numbers now we have only 2 and 5.
14:25 - because 1 because 1 been assigned to
14:28 - this normal argument a and sum is 7 only
14:31 - so first better to
14:33 - write down first the normal argument
14:35 - then arbitrary positional arguments
14:38 - right what is the convention normal
14:40 - argument arbitrary position argument and
14:42 - then arbitrary keyword argument now
14:44 - let's just take
14:46 - one more example rather than that's what
14:48 - we will do
14:50 - okay now
14:54 - we just take an example of
14:57 - arbitrary keyword arguments okay
15:01 - let's we are passing information of a
15:03 - person like info
15:06 - person
15:07 - and here I am passing like name is equal
15:10 - to something like this like Ram
15:13 - and then
15:15 - age
15:16 - is suppose I am passing like
15:18 - maybe 30
15:21 - and suppose
15:23 - Department equal to
15:26 - CSC
15:28 - 3 for this info for this person right
15:33 - and next time next time info person name
15:37 - is equal to suppose I am pass
15:40 - it's sham and we are not passing this
15:43 - time age because sham is not willing to
15:46 - reveal his age only Department
15:48 - department is CSE right so this time
15:52 - three argument this time two argument so
15:54 - for this and these are keyword arguments
15:57 - so for this you have to define a
15:58 - function like depth suppose the name
16:02 - should be what same info person
16:06 - right and here we it's not it it is not
16:10 - going to work like if I pass one star
16:13 - with one star only you have to pass two
16:16 - star
16:18 - sorry two star
16:19 - and keyword arguments rather than quarks
16:23 - we can use any other variable data in
16:25 - for anything but double star is
16:27 - mandatory because then only it will
16:30 - accept all the arbitrary keyword
16:32 - argument right and for this what
16:37 - how to access now I just want to print
16:39 - like Ram name Ram then age then
16:42 - Department then name sham then
16:43 - Department CSC so how to access this
16:45 - thing now at this point of time this
16:47 - this these arguments will be passed in
16:49 - the form of dictionary
16:52 - although having discussed dictionary but
16:54 - dictionary means it is having a key and
16:55 - value pair
16:56 - right you have a dictionary if you are
16:58 - writing a phone number of any person the
17:00 - person name Jenny then maybe Colin or
17:03 - Dash or anything or equal to and then
17:06 - for number of Journey then like phone
17:08 - number of any other Rahul then phone
17:11 - number of Rahul so dictionary is having
17:13 - key and value pair key is What Jenny and
17:16 - value of
17:17 - value is what the phone number
17:19 - right so two things we want to access
17:21 - now here key is What name and RAM is
17:24 - value key is What age and 30 is what
17:27 - value so both the key and value you want
17:31 - to access key and value pair
17:33 - so for how to access this thing
17:36 - how to access the dictionary
17:38 - because it is passing in the form of
17:40 - dictionary and in this case
17:44 - previous case in ark's case it was
17:46 - passing in the form of Tuple all the
17:48 - arguments so for it's not like that we
17:50 - simply write one argument like in and
17:53 - quals
17:55 - maybe you are thinking like this but the
17:57 - syntax is little bit different of
17:58 - dictionary in detail we will discuss in
18:00 - the next video
18:01 - because 2
18:03 - key and value both you want to access so
18:06 - rather than one item you have to take
18:07 - sorry two variable name either I or J or
18:10 - a b or X Y anything or for better
18:13 - understanding we take like four
18:15 - key and
18:18 - value two thing he and Value First key
18:20 - then value
18:21 - in quotes
18:22 - you have to use a function
18:24 - we have a function here items so note
18:28 - items using this function we can access
18:30 - right and now I will simply print what
18:34 - key and
18:36 - value or if you write down here I and J
18:39 - so simply write down here I and J in
18:41 - print also simply write down I and J
18:43 - okay hello let's run this
18:46 - see
18:47 - first name Ram is 30 Department CSE name
18:50 - sham Department CSC so this is how you
18:53 - can pass arbitrary keyword argument and
18:55 - you can access those arguments right
18:58 - so this is the difference between RX and
19:00 - quarks fine but if you want to pass like
19:03 - some arbitrary
19:06 - positional argument also so here I can
19:09 - write down like uh start
19:12 - suppose I am writing a star ax
19:17 - okay that a r g s
19:20 - fine
19:21 - but see
19:25 - see the uh that error star parameter
19:28 - after double star parameter so this is
19:30 - not possible always this star parameter
19:33 - or arbitrary positional argument
19:35 - must be before
19:38 - arbitrary keyword argument otherwise it
19:41 - will give error like here I want to pass
19:44 - positional argument like three four
19:46 - that's it and here also I want to pass
19:49 - like seven eight nine something like
19:51 - this okay let's run this and I'll show
19:53 - you the error see this is invalid syntax
19:56 - this is invalid syntax
19:57 - and if I write something like this
19:59 - rather than
20:01 - after this
20:04 - first
20:05 - I am passing as
20:08 - and then double start then quarks okay
20:12 - so here also you have to pass first ah
20:15 - not after this so first we'll pass like
20:18 - maybe one comma two
20:21 - comma and here I am passing only one
20:23 - comma 2 comma three
20:25 - see you are not getting any error right
20:29 - so if you want to access these arcs then
20:31 - also you can print
20:33 - like if you want to print print
20:38 - as
20:39 - simply I will print as
20:41 - so let's run this
20:43 - first
20:46 - in this
20:47 - we are printing first
20:49 - that key value pair so Ram 30 and CSE
20:54 - and then one and two one and two are
20:56 - arbitrary positional then Shaman
20:58 - department and then one two
21:00 - three one two three because after that
21:03 - we are printing asks so what is the
21:05 - convention of passing these arguments
21:08 - first any normal argument then arbitrary
21:11 - positional argument like us then
21:14 - arbitrary keyword argument works
21:18 - right otherwise you will get some kind
21:21 - of error or maybe different type of
21:23 - output right I hope now the friends what
21:26 - is the X and quotes that's clear to you
21:28 - guys okay now one assignment for you is
21:30 - you have to write down a function that
21:31 - will take arbitrary number of arguments
21:34 - variable number of arguments and
21:35 - multiply those arguments together so you
21:38 - have to run that thing for these two
21:40 - input multiply
21:41 - and multiply the function name two three
21:44 - minus 6 8 and second for this thing
21:47 - right multiply so this is what your
21:49 - assignment you can just write down that
21:51 - logic only in the comment section
21:53 - okay so I hope now you are clear with
21:55 - this arcs and quarks arguments in Python
21:58 - now and actually we'll see one coding
21:59 - exercise so now I'll see in the next
22:00 - video till then bye take care