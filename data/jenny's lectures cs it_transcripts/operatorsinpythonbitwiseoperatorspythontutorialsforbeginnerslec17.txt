00:00 - so in the series of learning Python
00:02 - programming language we are discussing
00:03 - operators in Python till now we have
00:05 - discussed arithmetic operator assignment
00:07 - operator comparison operator and logical
00:09 - operators the next test is bitwise
00:11 - operator so these operators will be
00:13 - discussing in this video
00:15 - okay which are bitwise operators like
00:17 - what are bitwise operators how to use
00:19 - them with help of example program will
00:22 - be seeing the working of bitwise
00:24 - operators and I'll show you on my laptop
00:26 - also right the notes of this lecture you
00:28 - will get in the description box of this
00:29 - description box of this video I'll put
00:31 - the link you can click there click on
00:34 - that link and you will get the notes for
00:35 - this class
00:36 - okay now see as the name suggests to bit
00:40 - twice operators so these operators works
00:43 - on bits
00:45 - you can say binary numbers
00:47 - like same in C and C plus plus also we
00:50 - have discussed midwise operators so they
00:52 - work on bits actually
00:54 - they used to operate on binary numbers
00:57 - on bits now how they are going to
00:59 - operate first of all let me tell you
01:01 - what are bitwise operators we have
01:03 - bitwise and
01:05 - bitwise over
01:07 - exhort then we have complement
01:11 - or you can say not then we have left
01:14 - shift and then we have right shift
01:17 - so these are bitwise operator so first
01:19 - of all we are discussing the working of
01:20 - bitwise and operator see let's see
01:24 - we have a is equal to 5
01:27 - and B is equal to 4 rather than in two
01:30 - lines you can do assignment in one line
01:32 - only okay now
01:34 - if I want to print like print A and B I
01:40 - want to do a and b this end is for
01:43 - bitwise and so the sand is going to
01:46 - perform on the bits not on these numbers
01:48 - so first of all convert the these
01:52 - numbers into binary numbers
01:54 - so now a becomes what
01:57 - 5 is 1 0 1 and B is what four or zero
02:01 - zero or generally we represent numbers
02:04 - means these decimal numbers in either 4
02:07 - bits or eight bits so let's represent in
02:10 - four bits okay
02:12 - now
02:14 - I hope you know five is one zero one
02:17 - like or you can say you can calculate
02:19 - this one two four eight something like
02:21 - this so four plus one is five and
02:25 - four this is four at the place of four
02:27 - only we have one only right so now
02:31 - do bitwise and
02:33 - bitwise and means same
02:35 - if both are one then only it will give
02:37 - one otherwise zero so one zero zero zero
02:39 - zero zero one one both are one it will
02:41 - give one zero zero zero
02:44 - so now convert this number into decimal
02:47 - number this would be 4.
02:48 - so the answer would be
02:51 - okay so bitwise and same will give
02:55 - if both are 1 then only it will give one
02:57 - otherwise 0. okay now let's see we have
03:00 - the twice over the next is bitwise over
03:05 - a is this B is this so bitwise or now
03:08 - what is the
03:10 - result of this thing the twice over
03:12 - means it will give 0 if both are 0. if
03:16 - anyone is one any one of the bit is one
03:19 - equal give one
03:20 - so one zero one zero zero zero one one
03:24 - one and zero zero zero
03:27 - so now convert this into decimal number
03:29 - it would be five so the result of this
03:32 - would be five logical and sorry these
03:34 - are bitwise now bitwise xor
03:38 - what would be without C
03:41 - bit wise xor
03:43 - now bitwise xor means what
03:47 - if
03:48 - both the bits are same then it will give
03:52 - zero
03:54 - it will give one only if bits are
03:58 - different
03:59 - let's see
04:01 - two bits one one xor zero one example
04:05 - zero both bits are different so it will
04:07 - give one zero zero both bits are same
04:09 - zero one one both bits are same so it
04:12 - will give zero
04:14 - zero zero both bits are same so it will
04:16 - give zero
04:18 - so the decimal of this is what 1 so it
04:22 - will give one
04:23 - so I hope you got working of bitwise and
04:26 - or an xor now this is little bit tricky
04:30 - so let's understand this complement
04:33 - operator now if you print
04:36 - if you do negation of a and if you print
04:40 - this thing
04:42 - it will give you
04:45 - K is 5 so negation of 5 it will give you
04:48 - minus 6.
04:50 - how you are getting minus 6
04:53 - this is little bit tricky now let's see
04:57 - this not node will reverse the bits if
05:00 - bit is one it will be zero if it is 0 it
05:02 - will be one so now let's see negation of
05:06 - 5 5 in binary we have 0 1 0 1 in 4 bits
05:09 - I am representing the number okay
05:12 - one zero this is Phi now negation of 5
05:16 - would be
05:19 - reverse the bit 0
05:22 - 1 0 1 so this would be negation of 5.
05:26 - now what are this one zero one zero
05:29 - maybe if you apply that logic like 1 1 2
05:33 - 4 8 you will say it is 10.
05:36 - so it should give 10 not minus six but
05:38 - how we are getting minus six C it is not
05:40 - ten
05:42 - we are getting minus 6 so see we cannot
05:45 - store negative numbers actually in
05:47 - memory
05:48 - okay we have to convert this into
05:50 - positive number so yeah there is a
05:52 - method to store negative numbers in
05:54 - memory now what is that method two's
05:56 - complement
05:58 - we have to find out two's complement of
06:00 - the number then we can store that
06:02 - negative number into
06:04 - computer memory okay so this is minus 6.
06:09 - if you are going to store this minus 6
06:10 - into computer memory first of all
06:12 - convert into positive number find out
06:14 - the two's complement now two's
06:16 - complement is what
06:17 - two's complement is once complement plus
06:20 - one
06:22 - I guess you are aware about these things
06:25 - if you ever I think red Boolean algebra
06:27 - in that we have these kind of things or
06:29 - in basics of programming also computer
06:31 - programming also in the first chapter we
06:33 - have these things
06:34 - or in digital electronics one subject is
06:37 - there
06:37 - with that also we have these things so
06:39 - two's complement is once complement plus
06:42 - one this is one's complement like one
06:44 - apostrophe s
06:46 - this is a post office now how to
06:48 - calculate one's complement once
06:50 - complement we can get simply by
06:53 - reversing the digits
06:55 - means if there is one reversing the bits
06:58 - sorry not digits bits if one then zero
07:01 - if zero then one okay now we have to
07:04 - find out whose complement of 6 so 6 in
07:07 - binary how we represent 6 in binary this
07:10 - is what
07:11 - 1 1 0
07:14 - 4 bits I'm taking so this is six
07:16 - like one two four eight four plus two is
07:18 - six okay
07:20 - now once complement of six
07:23 - just reverse the bits one zero zero one
07:27 - now two's complement add one had one so
07:33 - you know
07:34 - I hope you know binary Edition binary
07:36 - addition one plus one is zero plus carry
07:39 - one so one plus one is zero carry one so
07:43 - one plus zero is one
07:45 - zero then one so two's complement is
07:49 - this one
07:51 - see binary addition of is
07:53 - 0 plus 0 would be zero zero plus one one
07:58 - one plus zero one one plus one
08:02 - it would be 0 with carry 1 with carry 1
08:06 - okay
08:07 - so now two's complement of this is one
08:10 - zero one zero
08:12 - this is how we store -6 and this is
08:15 - exactly negation of five one zero one
08:18 - zero
08:19 - that is why we got negation of 5 is
08:22 - minus 6.
08:24 - always
08:25 - so simple method is what negation of any
08:29 - number like negation of 10. if you will
08:32 - do simply you will get that number plus
08:35 - 1 with minus sign so it will you will
08:38 - you will get minus 11.
08:41 - okay I hope you would have these this
08:43 - thing works okay
08:46 - why we are getting the result of this
08:48 - like this not or this complement we say
08:50 - it complement also this complement
08:52 - operator something like this I hope you
08:54 - got this thing now okay now next is left
08:57 - shift see
08:59 - this is also
09:01 - very interesting now if I left shift
09:05 - this a left shift two
09:09 - okay so it is going to left shift the
09:13 - First operand with respect to Second
09:15 - operand so first operand is a a is 5 so
09:19 - we are going to left shift 5 by 2 bits
09:22 - this is what bits here you can write
09:24 - down one three four five any number of
09:27 - bits you can write down it's not like
09:28 - that you have to write them only okay
09:30 - now a a is 5 so 5 in binary we have one
09:35 - zero one where we write it as one zero
09:39 - one zero one this is 5. now left shift
09:43 - by two bits means this side we are going
09:45 - to shift by
09:47 - two bits
09:48 - okay
09:50 - so here we are not going to discard the
09:52 - maybe you will say just left shift by
09:54 - two bits discard these two bits so 0 1
09:58 - and add two zeros
10:01 - at the right hand side the remaining
10:03 - places we will add will fill those
10:04 - places with zero so this would be the
10:06 - case no no no no we are not going to
10:08 - discard these bits remember this thing
10:11 - okay
10:13 - so left shift would be what we are going
10:16 - to Simply add
10:19 - left shift two bits like zero one zero
10:22 - one so here we have
10:25 - places of two bits remaining
10:27 - so simply add 0 0.
10:30 - see generally if I write 5 so it is 5.0
10:34 - 2 means 2.0 with floating Point number
10:38 - after floating point also we have
10:39 - something
10:40 - zero zero zero zero or something like
10:42 - this okay
10:44 - now
10:46 - so if you left shift this this you can
10:49 - say zero zero zero this sign if you are
10:52 - going to left chip this these two zeros
10:54 - would be shifted to this one
10:56 - we are not going to discard these two
10:58 - bits we will keep these two bits
11:01 - okay if zeros are there you can discard
11:04 - zeros like if in eight bits I represent
11:07 - five zero zero zero zero zero one zero
11:10 - one in eight bits this would be five
11:13 - in this case we simply can say because
11:15 - these are zeros zeros you can discard
11:16 - simply we can say left shift these this
11:19 - side so discard these two zero so this
11:22 - zero would be at this place now this
11:24 - would be at this place
11:25 - here we have 0 here we have one here we
11:28 - have zero one now remaining two places
11:31 - will fill these places with two zeros
11:34 - that can be a case but here in four bits
11:36 - two bits are zero and one we cannot
11:38 - discard this one otherwise we will get
11:41 - some unexpected result okay so in left
11:44 - shift we always gain bits we are not
11:47 - going to lose anything okay
11:50 - I hope you got my you know logic here so
11:54 - now see
11:57 - so this you will get after left shift by
12:00 - two so now what is this decimal number
12:02 - one two four eight sixteen thirty two
12:05 - something like this so 16 plus 4 20.
12:08 - so this would be 20.
12:12 - simply the formula is what if you left
12:15 - shift like X as a number if you are
12:17 - going to left shift this number with n
12:18 - Bits so what output you will get this X
12:22 - into 2 raised to power n
12:26 - see here x is 5
12:28 - into 2 raised to power 2.
12:31 - it would be 4 that is 5 into 4 that is
12:34 - 20. okay this is the left chip now what
12:37 - about right shift C
12:40 - if we right shift this e by 2 then what
12:43 - is it you will get now a is what 0 1 0 1
12:47 - okay now right shift by 2 we are going
12:50 - to right shift by two bits in this case
12:53 - we will lose bits we are going to
12:56 - discard
12:57 - so right shift by two bits so these two
13:00 - bits would be discarded so here we have
13:03 - this one would be at this place this 0
13:04 - would be at
13:06 - this place now these two bits
13:09 - these two places would be filled with
13:11 - zero
13:12 - so this would become now one
13:15 - so the answer would be 1. in this case
13:17 - in right shift we will discard the bits
13:19 - means we are going to lose the bits but
13:21 - in left shift we gain bits we don't lose
13:25 - I hope you got this thing okay because
13:27 - there's two bits maybe you can see after
13:29 - decimal we have zero zero so these two
13:31 - which would be after decimal so we are
13:32 - going to discard these two bits
13:36 - so if
13:37 - left if right if you buy three then
13:39 - three bits we are going to discard so
13:41 - this is 0 will be at this place the
13:43 - remaining three bits would be full of
13:44 - the zero so the answer would be zero
13:46 - okay now
13:48 - here we have answer one so simple
13:50 - formula is if x would be right shift by
13:54 - n Bits then the answer would be x
13:56 - divided by 2 raised to power n so here x
13:59 - is 5 5 divided by 2 raised to power 2
14:01 - that is 1 5 divided by 4 that is 1 okay
14:05 - so this is right shift so I guess you
14:08 - got the working of these Operator Let me
14:10 - just show you practically we will see
14:12 - this thing practically and then I'll
14:14 - give you one exercise also okay
14:16 - okay now we will take this
14:19 - here we will take two variables
14:23 - A5 and B 4. so we are going to just
14:27 - print
14:28 - a bit wise and
14:31 - B
14:32 - okay
14:33 - let's see what output you will get here
14:35 - you will get four
14:38 - if you print
14:41 - a bit y zor
14:43 - B in that case what you will get
14:47 - you are getting 5 here you are getting
14:49 - 5.
14:51 - now
14:52 - if I print
14:54 - let's try with xor
15:02 - Axor B the last one will get 1 right and
15:09 - we simply print not
15:15 - a
15:18 - what you can say complement a this is
15:20 - bitwise note or you can say complement
15:23 - so this will give you minus 6. not B
15:26 - would be your assignment if you print
15:29 - not B then what it will print you have
15:30 - to try
15:31 - if I print like a
15:34 - left shift by two bits
15:38 - so then you will get what it would be 20
15:41 - see it would be 20 and if I print
15:45 - like a right shift by 2
15:48 - what you will get it would be 1 see the
15:51 - last it would be 1.
15:54 - so if you are aware about you know if
15:57 - you got the working of these operators
15:59 - you can try out with different different
16:00 - operate you know different different
16:02 - values and all paste or like that you
16:05 - can only try with five and four you can
16:07 - it's not like that you have to left
16:09 - shift or write it by two bits you can
16:11 - have you can do with one weight or three
16:13 - beat five weight four bit up to you
16:16 - so now I'll give you one assignment so
16:18 - this is for your assignment you have to
16:20 - tell what would be the result of these
16:22 - things okay rather than simply just you
16:25 - know
16:26 - going to do your ID your laptop and just
16:28 - print these things no no first of all
16:30 - try out at your own without your laptop
16:33 - then run this this thing on your laptop
16:36 - like print print and you can tell you an
16:38 - answer so this 26 and 23 17 or 24 17 EXO
16:44 - 24 negation or you can say complement 45
16:47 - not 45 68 left shift by 2 bits 56 right
16:51 - shift by three bits
16:52 - so I guess you can do this
16:55 - you are aware about these bitwise
16:57 - operators now so now two special
16:59 - operators are remaining intd and
17:00 - membership operator those thing we will
17:02 - discuss in next video so now it's in the
17:03 - next video till then bye take care