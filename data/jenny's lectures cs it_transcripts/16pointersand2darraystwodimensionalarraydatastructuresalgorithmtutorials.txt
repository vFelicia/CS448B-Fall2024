00:00 - now see in this video we'll discuss how
00:01 - to da Rays are related with pointers how
00:04 - you can access the elements of a 2d
00:07 - array with the help of pointer rather
00:09 - than using the array name fine so if you
00:12 - have discussed the relationship between
00:13 - arrays and pointers I mean that 1d array
00:17 - and pointers you can check out that
00:18 - video also in that I button fine now see
00:22 - let us take this this is to react this
00:25 - is how we are going to declare the 2d
00:26 - area you can say that initialize the 2d
00:28 - I have initialized this area at compile
00:31 - time only fine 3 into 3 means this 3
00:34 - rows would be there and 3 columns would
00:36 - be there like this this is a 3 into 3
00:40 - matrix 3 rows are there and 3 columns
00:43 - are there these are the values and this
00:45 - is the actual representation of this 3
00:48 - into 3 matrix or you can say this 2d
00:50 - array in memory this is just a logical
00:52 - representation fine we have taken that
00:55 - row major implementation of 2d array
00:58 - first of all this first row is to be
01:00 - stored 6 to 5 then second row and then
01:02 - third row fine
01:04 - so you can say that it's 2d array is
01:07 - what it's an array of arrays how see in
01:12 - this case we are having 3 arrays if you
01:15 - see this 1 6 2 & 3 this is what a 1d
01:18 - array this is another 1d array and this
01:21 - is another one dear and each 1d arrays
01:24 - having three integer elements fine and
01:27 - if you combine these three then it forms
01:30 - a 2d array so you can say the 2d array
01:33 - is what it's an array of arrays or this
01:37 - this 2d arrays what it's an array of 3
01:40 - 1d arrays and each one day array is
01:43 - having elements how many three elements
01:46 - fine so you can see this this is what
01:49 - this is what a of zero that 1d array of
01:58 - zero or this is what another 1d array
02:00 - the name is a of 1 and this is another
02:04 - one D and the a name is a of 2 right
02:08 - so a 2d array
02:11 - e is having 3 1 diaries' a 0 a 1 and a 2
02:16 - and each one D a D is having 3 in pisa
02:20 - elements 3 integer values right so see
02:26 - have you can see how you can write this
02:28 - this way of zeroes you can say this so
02:32 - this element first element is a of 0 if
02:35 - you simply write a of 0 it means it
02:38 - itself a 1d array and the name of an
02:42 - array name of an array contains what
02:44 - address of its that first element of the
02:48 - array or you can say it points to the
02:50 - first element of the array so if you
02:52 - write a of 0 it means it contains
02:54 - hundred the element of its first address
02:57 - so 100 if you write a of 1 it means it
03:00 - itself your 1 is a 1d array and if you
03:03 - say a of 1 it it means it is a name of
03:06 - array name of array contains base
03:09 - address or you can say address it points
03:11 - to the first integer element in there
03:13 - the first element is containing address
03:15 - 1 1 to save a of 2 contains 1 2 4 you
03:21 - can you can write it like this this a of
03:25 - 0 contains these three integer values
03:28 - this contains these three integer values
03:30 - and this contains these three integer
03:32 - values and this is the base address of
03:34 - these arrays fine so a 2d array is what
03:37 - it's an array of arrays now let us take
03:41 - a pointer now I have initialized I have
03:44 - taken a pointer this is how you are
03:47 - going to be clear a pointer variable
03:49 - this point this variable this pointer
03:51 - variable is going to contain address of
03:53 - another variable and the data type of
03:55 - that variable is integer so it is a
03:57 - pointer to integer fine
04:00 - so here can we write P is equal to CP
04:03 - contains what address of some another
04:06 - integer variable address off integer
04:09 - readable so can I write here a the name
04:13 - of theory as we have discussed in 1d
04:16 - array in 1d array that is fine but here
04:19 - this is not right this
04:21 - invalid now why so see if you write
04:24 - simple this a is name of 2d array and
04:27 - what array name returns array name
04:30 - returns the pointer to its first element
04:35 - right so now in 2d array first element
04:38 - is what in this 2d array we are having
04:41 - three elements this one this one and
04:43 - this one you can say it is having three
04:46 - one DNA's so if you simply write a it
04:49 - means it returns what this pointer to
04:53 - its first element first element is what
04:56 - a of zero it means it returns one
04:58 - pointer to our 1d array it is not going
05:02 - to return pointer to an integer fine so
05:06 - but P can contain address of an integer
05:10 - variable only so this is invalid right
05:15 - so now here you can write here you can
05:18 - write address of a of zero and zero a of
05:26 - 0 0 means this value an address so this
05:30 - is what 100 so it means address of a of
05:32 - 0 0 means it will return address of a
05:35 - integer variable that is the 6 is an
05:38 - integer variable it will return address
05:40 - of this integer variable and that is
05:42 - fine or you can write or you can write P
05:47 - is equal to a of 0 that is also valid
05:53 - now why so see if you write a of 0 it
05:58 - means this first array 1 D array fine so
06:04 - if you write the name of the serie the
06:06 - name of the name of the array
06:08 - what name of dairy always returns what
06:11 - pointer to its first variable right but
06:16 - you can say address of its first
06:18 - variable fine so it will point to here
06:22 - if you write name of there it will point
06:24 - to here address of its point to its
06:26 - first integer variable and 6
06:28 - what variable it will return 100 100
06:32 - will be stored at in this pointer
06:35 - because pointer can contain address of
06:37 - another integer variable so this is fine
06:39 - you can write this thing fine
06:42 - but you cannot write P is equal to a of
06:45 - zero and zero why so because a of zero
06:49 - and zero it means it will return what
06:51 - when you that is six but pointer cannot
06:54 - contain a value so this is invalid right
06:58 - so you cannot write this thing so now if
07:01 - you want to print the address of this to
07:03 - DNA that is this base address that is
07:05 - hundred I have taken hundred here fine
07:07 - so if you want to print in hexadecimal
07:09 - form you can write down percentage P
07:11 - otherwise you can write down percentage
07:13 - you fine it will print in unsigned
07:17 - integer some integer value so you can
07:21 - print if you print in printf I guess you
07:23 - can write printf % is you and you can
07:25 - write whatever you want to print so if
07:27 - you print I am NOT going to write the
07:31 - complete printf statement P right if you
07:36 - simply print this P then it will return
07:39 - what because here we have declared a
07:43 - pointer P somewhere in memory this
07:45 - pointer is going to be allocated some
07:48 - memory location so this P is now going
07:51 - to store address of a of 0 0 that is 100
07:54 - so now P is going to point here so if
07:58 - you will print this P then 100 would be
08:00 - printed fine
08:01 - or rather than P you can write what a
08:03 - simply the name of the area so the name
08:07 - of there a 2d or it will give what the
08:10 - address of the first element first
08:11 - element is what a of 0 and the address
08:14 - of a of 0 is what 100 only fine you can
08:18 - say that base address of this is 100 so
08:20 - it will print hundred or you can write
08:23 - address of a of 0 0 this will also print
08:28 - hundred fine or you can write address of
08:33 - a address of a means a means this array
08:39 - name complete
08:40 - name address of a means it will give
08:42 - points to the address base address of
08:45 - the complete area the whole area come
08:47 - they said this is what hundred so it
08:49 - will print hundred all you can write s
08:51 - trick e now high strike a will print 100
08:55 - because Esther it means dereferencing
08:57 - operator and it will print what the
08:59 - value at that address now see if you
09:01 - write simple a it means it will return
09:03 - what any name is a it will return what
09:06 - that pointer to its first element or you
09:08 - can say that address of its first
09:10 - element now in this area first element
09:13 - in 2d arrays this complete 1d array
09:15 - right because it is having three
09:17 - elements three 1d array so a of zero now
09:22 - s trick a of zero it means well you add
09:24 - as a of zero when you add this means
09:26 - this complete 1d array value doesn't
09:29 - mean doesn't mean that it is it is
09:31 - returning either six two or five because
09:34 - at a over zero at this address it will
09:36 - return at this element the complete 1d
09:39 - array fine so it will return what this
09:42 - this base address of this one that is
09:44 - 100 100 0 of 0 contains what 100 fine so
09:50 - it will return 100 or you can write a of
09:53 - 0 this will also return what hundred
09:59 - because a of 0 means a of 0 that is name
10:02 - of the array this this a of 0 means this
10:06 - name of this complete array 1d array
10:08 - name of the array if you write down name
10:11 - of that a that that will return what
10:12 - address of the first element in this
10:15 - area means the first element in this
10:17 - array 6 address is 100 so it will litter
10:19 - 100 fine although this a and address of
10:24 - a is returning the same value but they
10:27 - are different how they are different I
10:29 - will discuss in this video later so now
10:31 - if you print a plus 1 in % is F if you
10:34 - write a plus 1 then what should be the
10:36 - value C this a name of the 2d array it
10:39 - will return what pointer to this first
10:42 - element in this area first element is
10:44 - this complete 1d array that is a of 0
10:48 - fine and this is a pointer a of 0 that
10:52 - is it is going to return
10:53 - Poynter to do this one and if you add in
10:57 - a pointer if you add plus one it means
10:58 - it is going to point to the next
11:02 - variable that we have discussed in 1d
11:05 - array also so it will point here next
11:08 - variable and this is complete 1d array
11:10 - that is this a of one right now it is
11:16 - going to point here
11:17 - now what what if it will return if you
11:20 - write a 1 then it means it will return
11:22 - the base address of its first element or
11:24 - you can say it points to here the first
11:27 - element in this array the address of
11:29 - this one is 1 1 2 so it is going to
11:31 - return 1 1 so from here you can see a
11:35 - will return this point a will point to a
11:38 - of 0 a of 0 contains hundred and if you
11:40 - add +1 then it will jump to the next
11:43 - element next element is a 1 that is the
11:46 - complete 1d array so it is going to
11:48 - return the base address of the first
11:50 - element that is 1 1 2 or you can write
11:53 - address OFI of 1 because you often you
11:56 - can write in this form also at the sofa
11:58 - of 1 fine a of 1 this array name address
12:02 - of array will return the base address of
12:04 - this array base address of this this
12:06 - complete array is 1 1 2 so it will
12:08 - return 1 1 2 only and if you write this
12:12 - 1s trick a plus 1 then what should be
12:17 - the value then also it will return 1 1 2
12:19 - how see here a means same name of this
12:24 - 2d array it is going to points to the
12:27 - first element but you can say it is
12:29 - going to return the address of the first
12:32 - element now first element in this 2d
12:34 - array is this complete 1d array that is
12:36 - a of 0 fine
12:38 - if you add plus 1 if you add plus 1 in
12:41 - this case then it is going to point to
12:43 - the next element that is next element is
12:46 - also complete 1d airing in this 2d array
12:49 - that is a of 1 fine and if you do s
12:53 - trick a of 1 it means when you act this
12:59 - pointer value at this address when you
13:01 - is this complete 1d array value is not
13:04 - single integer value it value is this
13:07 - complete 1d array fine so it is going to
13:11 - return what this one one to the this
13:13 - this base head is that is one one two so
13:16 - it is also going to return 1 1 to here
13:19 - or you can write a of one only because s
13:24 - tricky up one is equal to a o 1 only
13:27 - so if you write a of 1 here 1 means this
13:31 - one and array this is a complete array a
13:33 - of 1 is complete array and array name
13:35 - will points will return always the
13:38 - address of its first element so this is
13:41 - 1 1 2 it is going to return 1 1 2 only
13:43 - this can also be written something like
13:45 - this estwick a plus 1 fine that we have
13:48 - discussed in 1d array also and if you
13:52 - write address of a of 1 and 0 a of 1
13:58 - means roll number row is this one index
14:02 - of row is this one second robot index is
14:05 - 1 and column is 0 and address of this
14:08 - one is 1 1 2 so it is going to it
14:10 - another one to only this is also same
14:12 - fine
14:13 - now if you write a strict a plus 1 plus
14:19 - supposed to now what it is going to
14:23 - print now cs3 K plus 1 a is going to
14:27 - return what this the address of 1st
14:30 - element first element is this complete
14:32 - array if you add plus 1 here then it is
14:35 - going to point to the next element in
14:37 - this array next element is also a
14:39 - complete 1d array and s trick this means
14:42 - it is going to return this complete 1d
14:44 - array value is complete 1d array so the
14:46 - sequence of the base address so for you
14:48 - address of this first element that is 1
14:50 - 1 2 it in this 1 1 2 you are going to
14:53 - add plus 2 it means it is going to add
14:57 - how many bytes 1 integer is going to
15:01 - take 4 bytes that is 8 bytes so it is
15:03 - going to point here at 120 so it will
15:05 - return 120 and if you want to print the
15:09 - value at 120 that is 3 then simply print
15:15 - the value what you are going to
15:17 - take that dereferencing operator so if
15:20 - you you are going to print this value
15:22 - then simply you can write say this one
15:25 - this is same this is giving this is
15:28 - going to give you 120 and value at 120
15:30 - if you want to print then just do a
15:32 - again write an e referencing operator so
15:35 - it is going to print the value that is 3
15:37 - so you can say it is a double pointer
15:39 - you can implement you can also declare a
15:41 - double pointer and you can implement the
15:43 - studio fine now see this is how we are
15:48 - going to print the value now this this
15:50 - is going to print the value ad see if
15:53 - you print a of 1 and 2 that will also
15:57 - going to print 3 means if one roll
16:02 - number is 1 this row 1 and second column
16:05 - 0 1 2 and second column that is 3 a of 1
16:08 - and 2 you here you will write Plus this
16:11 - roll number and here you will write
16:13 - column number so if you are going to
16:16 - print this value suppose this one for it
16:19 - means a of 2 and 0 then in this form hub
16:25 - you can write you can write s trick
16:27 - again s trick a plus this row number
16:32 - that is 2 plus column number that is 0
16:36 - and this is going to print 4 right
16:40 - so in general you can write C this is
16:44 - how we are going to access a of I and J
16:46 - the value of 2d array so if you want to
16:48 - write this in the form of pointer then
16:50 - how you can write you can write here s
16:52 - trick again s trick a plus I plus J this
17:01 - is same if I J's you can do this one
17:03 - right or if you want to use the pointer
17:06 - then this pointer is also going to store
17:09 - the space address 2 rather than using
17:10 - this a you can write here the pointer
17:13 - name P all rather than this rather than
17:16 - this how you can write this C astrick of
17:20 - a plus 1 is equal to a of 1 right so in
17:23 - this case here we can write a of 1 plus
17:27 - 2
17:29 - plus two and you just write a straight
17:32 - fine
17:33 - so here simply you can write a strick a
17:37 - of this I plus J so this this and this
17:46 - is going to be this is going to give you
17:49 - same result that as you can access that
17:51 - this value is using either this one or
17:53 - this or this expression or rather than a
17:56 - you can write here P also that will also
17:59 - do that is also going to give you same
18:02 - result now suppose if you want to print
18:04 - a straight A plus one and again a
18:11 - straight now what should be the output
18:13 - of this thing just think about it
18:17 - see Esther it a here step by step here
18:22 - in to solve this a a means it is going
18:25 - to return a snake of 2d array so it is
18:27 - going to return what if you write down
18:30 - name of an array so it is going to
18:32 - return pointer to its first element or
18:35 - you can say address of its first element
18:36 - first element in 2d arrays this complete
18:39 - one dear fine so it is going to return
18:42 - pointer to this one da find out you can
18:46 - say this address of this 1d array now a
18:49 - straight a astray K means value at this
18:53 - address value is what value is this
18:56 - complete 1d array fine or you can say
18:59 - that base address of the say dress of
19:02 - its first element that is hundred it is
19:04 - going to return value at a of zero is
19:06 - what hundred it is going to return
19:08 - hundred this element sorry the pointer
19:10 - to its first element that is 100 now 100
19:15 - plus one this is a pointer if you want
19:18 - to add some arithmetic or some integer
19:21 - values and then it is going to what
19:24 - point to the next variable how many
19:27 - bytes is going to be added four bytes
19:29 - fine so it is going to point here at
19:31 - 1:04 so this is what 1 0 4 s trick 1 0 4
19:37 - means value at 1 0 4 is 2 so it is going
19:39 - to
19:39 - turn what to here now the question for
19:43 - you is if you print history s trick a
19:47 - then what will be the output right and
19:50 - if you print a strict s trick this P
19:54 - then what will be the output so you are
19:57 - going to try this one and you are going
19:59 - to tell me in the comment box what
20:00 - should be the output of AD Esther that's
20:03 - tricky and Esther gets trick P now last
20:05 - point is add one plus one and address of
20:09 - a oh one plus one what should be the
20:11 - output of B's - when you see here a of 1
20:15 - a of 1 means this one the name of this
20:18 - one D array and name of 1d array means
20:21 - it is going to return
20:24 - what does pointer to its first integer
20:29 - value or first variable you can say that
20:31 - address of its first in Pisa variable
20:35 - that is 1 1 2 it is going to return 1 1
20:37 - 2 in this one if you add 1 then it is
20:41 - going to point to the obviously the next
20:44 - variable is sorry the next value so that
20:47 - is it is going to point here it means it
20:50 - becomes 1 1 6 fine now what is the value
20:54 - of this address of a of 1 + 1 C address
20:58 - of 1 if you printed a of 1 and address
21:01 - of a of 1 both will return what this 1 1
21:04 - 2 so you will say this and this would
21:08 - also return same value that is 1 1 6
21:11 - button that is not right how these
21:13 - things are different see let us discuss
21:16 - it with one DNA then you will get it
21:19 - better see now suppose we have taken one
21:21 - area one D array size 3 elements are 1 4
21:25 - & 3 address the whole base address is
21:27 - 200 next element 4 to 0 for our next is
21:29 - 2 0 8 if you print a and address of a a
21:34 - means name of the array C name of there
21:38 - is address of a and a both will return
21:40 - 200 fine and save a plus 1 and address
21:45 - of a plus 1 then you will say these are
21:49 - going to return same thing because a and
21:50 - address of a are same but that is
21:52 - different thing see here it simple you
21:56 - are writing name of the array name of
21:59 - there a means it is going to give you
22:01 - the pointer to its first value or you
22:06 - can say it is going to give you the
22:09 - address of the first element of theory
22:12 - so first element of the array first
22:14 - element of their address is 200 that is
22:16 - why it is going to give 200 fine and
22:19 - address of a address of a means it is
22:23 - going to give you the address or you can
22:26 - say the base address of the complete
22:29 - array for this complete array the base
22:32 - address is also 200 that is why it is
22:34 - going to give you 200 that is why these
22:36 - both are same but if you had plus one
22:38 - and plus one in that case they are
22:40 - different see a plus one it means it is
22:43 - it is pointing to the first variable
22:46 - first variable and if you do plus one
22:49 - arithmetic
22:50 - plus one in the pointer then it is going
22:52 - to point the CUDA obviously the next
22:54 - element so it is going to point here
22:57 - that is two zero four but address of a
23:00 - means it is going to give you the array
23:02 - the pointer to the complete array so
23:06 - that is also 200 address of a but if you
23:10 - do plus one plus one it means it is
23:12 - going to add how many bytes size of
23:16 - arrays 3 so 3 into 4 that is it is going
23:20 - to add to L bytes because it is going to
23:22 - give you the address of the complete end
23:25 - so now in this case it is going to point
23:28 - here after this complete array here the
23:32 - next part so it means you can say this
23:34 - plus 12 that is 2 1 2 it is going to
23:37 - give you 2 & 2 same in this case a 1
23:41 - plus 1 that is 1 1 6 now address of a 1
23:44 - plus 1 address of a 1 a 1 means this
23:47 - this array this 1d array address means
23:50 - this it is going to give you the address
23:53 - or the base address of this complete 1d
23:56 - array that is 1 1 ok 1 1 2 plus now if
24:00 - you add plus 1 it means how many bytes
24:02 - is going to add see
24:05 - sighs Oh fairies one two and through
24:07 - three elements are there in this one-day
24:09 - era so 3 into 4 that is 2l bytes that is
24:11 - 2 well it means 1 to 4 so that is why
24:14 - now it is going to point from 1 1 to 2
24:18 - here 1 2 1 2 the next element it is
24:23 - going to switch this complete array then
24:25 - it is going to point this the next
24:28 - element of or you can say the next one
24:30 - the error that is 1 2 4 this is the
24:32 - difference between this and this see I
24:35 - can now discuss everything in one video
24:37 - so it's up to you you can try different
24:38 - different expressions like this like
24:40 - this or any other expression and you can
24:42 - check out what the output is fine
24:45 - so I'll see in the next video till then
24:47 - bye-bye taking