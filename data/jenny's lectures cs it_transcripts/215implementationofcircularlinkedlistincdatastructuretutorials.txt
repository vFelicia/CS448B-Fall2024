00:00 - same a singly linked list but the
00:01 - difference is what here the last node of
00:04 - circular linked list will contain
00:06 - address of its first node here 200 would
00:10 - be stored in singly linked list here we
00:12 - will store null right and in that video
00:16 - we have maintained only head pointer so
00:19 - now the problem is if I want to insert a
00:23 - node at the beginning in circular linked
00:25 - list now suppose I want to insert a node
00:28 - I have created a node write this and I
00:31 - want the data is 6 here I've inserted 0
00:35 - and the address of this node is suppose
00:38 - 500 so we have created a new node
00:41 - pointer and this pointer is containing
00:43 - the center's 500 now I want to store
00:45 - this address at the beginning sorry this
00:48 - node at the beginning what you have to
00:50 - do for inserting it at the beginning
00:53 - first thing you have to update this
00:55 - length here you will store this 200
00:59 - right so now it is going to point here
01:02 - plus second thing that you have to
01:05 - update this head pointer now head will
01:07 - contain for this address 500 because
01:09 - this is going to be the first node so
01:12 - here you will store 500 so now this link
01:14 - would be broken in now head would point
01:16 - here plus third thing you have to update
01:20 - what see the last node and circularly
01:23 - linked list will contain address of the
01:25 - first node and after inserting new node
01:27 - this would be the first node so you have
01:29 - to update in this pointer also now in
01:33 - this point that you will store what
01:34 - address of this node that is 500 but now
01:37 - the problem is say you can access this
01:40 - part easily you can access this part
01:42 - because this node is having a point a
01:45 - new node so using new node we can access
01:46 - this part because we cannot directly
01:48 - access the structure members as you know
01:51 - now how you can access this part having
01:54 - any pointer pointing to this node no we
01:58 - don't have so how we can access this
02:00 - part how we can reach till this part
02:02 - till this address 400 because we have
02:05 - only two pointers head head is having
02:07 - address this head is pointing to this
02:10 - node and one point is new node new
02:12 - knowledge point
02:12 - to this node we cannot preach till this
02:14 - node directly so now what you have to do
02:17 - you have one solution you have to
02:19 - traverse this this list till here right
02:24 - before updating these links what we will
02:26 - do how to traverse that thing we have
02:28 - discussed in the previous video we are
02:29 - going to take a temp pointer temp ill
02:32 - point to here then temp is equal to temp
02:35 - next temp is equal to temp next and we
02:37 - are going to stop here once we reach
02:38 - here the condition is what here we house
02:40 - what temp next becomes that equal to
02:44 - head because here we have not the
02:47 - condition null condition termination
02:49 - condition we have what termination
02:50 - condition is what this next is
02:52 - containing what the address of the head
02:54 - if next is containing address of the
02:56 - head it means this is the last node so
02:58 - now here we are going to stop and here
03:00 - we are going we are going to have a
03:03 - pointer that is M after that we can we
03:06 - can easily access this part that is temp
03:08 - next is equal to new node right this is
03:11 - the solution another solution is what
03:13 - when we are creating a circular linked
03:16 - list we can maintain a tail pointer
03:18 - roles right and how to maintain a tail
03:22 - pointer as well as a head pointer that
03:24 - we have discussed when we were creating
03:26 - a doubly linked list the link for that
03:28 - video will so I will provide you here in
03:30 - the SCI button you can check out there
03:31 - right so in this video we will see how
03:35 - to create this linked list and
03:37 - maintaining both head pointer and tail
03:40 - pointer at starting only if we maintain
03:43 - this pale pointer means tail would
03:45 - contain 400 so for inserting there's no
03:50 - need to traverse this list we can
03:51 - directly X is this part that is tail
03:53 - next till next is equal to new node and
03:55 - now this this node is pointing to this
03:57 - node and that is fine now another thing
04:00 - is one interesting point about circular
04:03 - link list is what there is no need to
04:05 - maintain this head counter you can
04:08 - maintain only the tail pointer that is
04:11 - also fine right and how we can create
04:15 - the list only maintaining the scale
04:18 - pointer that for that thing the code I
04:21 - will discuss in this video only fine and
04:23 - after
04:24 - we will discuss in the next video how to
04:26 - insert data in circular linked lists
04:28 - only by maintaining the stale pointer as
04:31 - well as both hadn't they now we'll see
04:34 - how to create our circular linked list
04:36 - right and we both we will maintain both
04:39 - head pointer and tail pointer right we
04:42 - have discussed how to create a circular
04:44 - linked list in the previous video also
04:45 - but in that video I have maintained only
04:48 - the head pointer now in this video see I
04:50 - guess everybody knows this coding
04:53 - because we have discussed many times
04:54 - this coding how to represent this node
04:57 - of a circular linked list obviously the
04:59 - we will define our own data type that is
05:01 - struct node structure using a structure
05:04 - that is keyword and this is a tab two
05:07 - parts are there in two data the data
05:08 - type of this is int and this is a
05:10 - pointer to the next node so we are
05:13 - taking a pointer that is next and this
05:15 - will point to next node right so an
05:18 - datatype of that node is struct node
05:20 - that is why here I am writing struct
05:22 - node so you can see it is a pointer to
05:24 - node we have we are having two pointers
05:27 - head and tail right now what creates we
05:32 - are having a function that is create CLL
05:35 - and we are going to define this function
05:36 - now for inserting initially we assume
05:40 - that list is empty we don't have
05:41 - anything in the list if it means head is
05:43 - having 0 and you can say tail is also
05:46 - having 0 but that is fine if head is
05:47 - equal to 0 means no node is it there in
05:50 - the list now to insert the node first of
05:52 - all you how to create that node you have
05:54 - to you know allocate the memory to that
05:57 - node and we will use what dynamic memory
05:59 - allocation in the linked list right why
06:03 - we are using dynamic memory allocation
06:04 - that came also we have discussed when we
06:05 - were discussing introduction to length
06:07 - list you can check out this video now
06:10 - how to use malloc function in C we are
06:13 - using malloc function here you write
06:14 - sizeof struct node the datatype is
06:17 - struct node this memory for this node I
06:19 - want memory so how much memory would be
06:20 - allocated for for this and for meit's
06:23 - for this that is 8 bytes would be
06:25 - allocated right and address of the first
06:27 - byte is 200 so malloc will it and what
06:29 - is 200 so malloc is going to return a
06:32 - void pointer but here this point that is
06:34 - new node pointer is what it is a point
06:36 - node so we have to typecast these things
06:39 - through typecasting means struct notice
06:41 - trick we will write in the bracket and
06:42 - here whatever this will return you will
06:44 - store in this new node and we have asked
06:47 - from the user which data I want to
06:48 - insert suppose a user has entered seven
06:50 - have you can exist this part how you can
06:52 - store seven here address off new node
06:55 - because pointer to this node is new node
06:57 - pointer new node and data pattern here I
07:00 - have stored none now I will insert this
07:02 - part this node in the list right now you
07:06 - will see what initially list is empty so
07:08 - we will write what if head is equal to
07:10 - zero it means there is no node in the
07:15 - list now what you will do you will
07:17 - simply do head is equal to you can say
07:20 - tail is equal to new node because we are
07:23 - maintaining both head and tail here so
07:27 - now head is also containing whatever the
07:29 - value new node that is 200 so head is
07:31 - containing 200 so head is pointing to
07:34 - this node as well as this is the first
07:36 - node as well as the last node so tail is
07:38 - also 200 tail is also going to point
07:42 - here fine but one more thing now in
07:47 - circular linked list the last node would
07:50 - contain address of the first node so in
07:54 - this case this is the last node this is
07:56 - the first node so here we cannot leave
07:59 - it like this here we cannot say that it
08:01 - is 0 so here before closing this if you
08:04 - will write what tail off next it means a
08:11 - love next this part this part will
08:14 - contain address of first node so address
08:16 - so first node is 200 only from where I
08:19 - can get 200 new node is having 200 so
08:22 - here you will write new node this is the
08:24 - extra line you will write when you are
08:26 - creating a circular linked list right
08:29 - now we have inserted first no now I want
08:32 - to insert second node so after inserting
08:34 - first node this is the list now I want
08:37 - to insert this node I have created one
08:39 - more node using the by you know running
08:42 - the same food when I want to insert here
08:44 - I have store 0 see now if head is equal
08:46 - to is equal to null
08:48 - but head is not now it means we have
08:49 - something in the list list is not empty
08:51 - so we are not going to do this thing now
08:53 - what you will do is else part what you
08:55 - will write see now you have to change
09:00 - what this node this point this node will
09:03 - point to this node that is why here we
09:06 - will store address of the next node fine
09:09 - second thing you will update what with
09:10 - the stable good point here because now
09:13 - this is the last node right
09:15 - third thing what you will update this is
09:17 - the last node so here this pointer will
09:19 - contain address of the first node that
09:21 - is here we will store two hundred three
09:23 - things you will have to update fine now
09:26 - how you will write this thing see so now
09:28 - first of all you need to update this
09:30 - pointer we cannot change this tail first
09:32 - of all we will update this thing after
09:33 - that after then we will update this tail
09:36 - pointer because if first at first only
09:38 - you will update this tail now tail is
09:40 - equal to new node that is hundred tail
09:41 - is pointing to here right now how we can
09:44 - access this node although it is the
09:47 - first node so we have a head pointer but
09:49 - suppose it is the second node and this
09:52 - is the third node so head will point
09:54 - always to the first node so we cannot
09:57 - change tail first first of all will
09:59 - change this path so here what you will
10:01 - write tail off next tale of next is
10:06 - equal to hundred I want to store here is
10:08 - equal to a new node right so here now I
10:12 - have hundred so this is now going to
10:15 - point here second thing we are going to
10:18 - update now the stain so now L is equal
10:21 - to new node right in ter also we have
10:25 - hundred now so now tail is also pointing
10:29 - to the snow
10:30 - third thing you have to update this
10:32 - thing now this will contain address of
10:34 - the first node so now here what can I
10:37 - write tail off next I can write L off
10:41 - next as equal to now here I want to
10:46 - store add in here I'm going to show the
10:48 - address of the first node and where I
10:50 - have address of the first node always
10:52 - the head pointer is going to contain
10:54 - this thing so we can write here okay
10:57 - fine
10:58 - here also new note if you write new note
11:02 - that is also fine but here also you can
11:04 - write what head it would be better if
11:07 - you write head because always head is
11:10 - going to contain address of the first
11:11 - node so simply you can write head now
11:14 - see the benefit of this thing right
11:17 - benefit of writing head here is what
11:19 - both in if and else this is the same
11:22 - statement tail next head tail next is
11:24 - equal to head so rather than writing it
11:25 - twice you can write this statement after
11:29 - this else block here I can write after
11:31 - this closing this else block here I can
11:33 - write tail off next is equal to head and
11:38 - no need to write hair and no need to
11:41 - write here so that is also fine because
11:44 - if after if block also this is going to
11:46 - be executed after else block also this
11:48 - statement is going to be executed that
11:50 - is why that I new node it is better to
11:52 - write here head right so now here tail
11:56 - next al next is equal to head means here
11:58 - I am going to store 200 so now this is
12:01 - pointing to this node and that is fine
12:05 - this last node is going to point to the
12:08 - first node this is the circular list
12:09 - right so you can insert as many node as
12:12 - you want simply by writing that logical
12:14 - logic only here you can ID printf do you
12:16 - want to continue you can say press 1 for
12:18 - continuing process press 0 for exit in
12:20 - scanf you can take your choice the users
12:23 - choice and for taking this you can
12:25 - declare you can initialize a variable
12:27 - here choice is equal to 1 right and if
12:30 - user will press 1 then a new node would
12:32 - be created right so these statements
12:35 - would be executed again and again so
12:37 - here before this thing I can write why
12:39 - choice right or if you are not
12:44 - comfortable with this while loop then
12:46 - you can use for loop also right
12:48 - initially we you can take from the user
12:51 - how many nodes the user wants to insert
12:53 - and suppose user interst 10 node I want
12:56 - to insert in the linked list so you can
12:57 - run the for loop from the node to 2 or
13:01 - 10 right and here if you want to check
13:04 - if this pointer has been set properly or
13:08 - not then how you can check here before
13:11 - closing this
13:13 - bracket of this function after this
13:16 - while loop you can check you can write
13:18 - what printf percent is D and what you
13:21 - can write tail off next means tail next
13:27 - this thing and arrow data in printf you
13:34 - can write percent is d and after that
13:35 - you can add this thing it means it
13:37 - should print seven it means you can say
13:39 - this link has been set properly this is
13:42 - a circularly list now right so now this
13:46 - is how you can create a circular list
13:47 - and maintain both head and tail pointer
13:49 - now in this case I have told you no need
13:51 - to maintain head pointer only by
13:53 - maintaining tail pointer you can create
13:54 - a circular linked list as well as you
13:56 - can perform the operations insertion
13:58 - deletion and all other operations so now
14:01 - how to create a linked list only by
14:03 - maintaining a tail pointer we will seem
14:04 - that thing so as you can see here I have
14:07 - only one point to that ass trail pointer
14:09 - and tail pointer is having null it's
14:11 - starting we are not having head so here
14:13 - I will write out tail is equal to 0 fine
14:17 - only few changes would be there
14:19 - remaining part would be same so now we
14:22 - have created this node write the same
14:24 - syntax would be there we have entered
14:26 - data 7 and here I have inserted a 0 now
14:28 - new null pointer is pointing to this
14:29 - node now here you will check if tail is
14:32 - equal to is equal to 0 in that case what
14:35 - you will do we are not having this head
14:37 - pointer right so now if L is equal to 0
14:41 - it means we don't have any node in the
14:45 - list so now we are going to point tail
14:46 - is equal to this one right we are going
14:49 - to set this link so here you will store
14:52 - 100 right so now we will write what it
14:57 - is equal to it new node new node is
14:59 - having hundreds so tail is equal to a
15:01 - new node so this link has been set
15:04 - second thing now this is the first node
15:07 - also in the last node also so the last
15:09 - node will contain address of the first
15:11 - node fine so here what you need to write
15:15 - this tale of next here I want to store
15:19 - this hundred right so tail next is equal
15:23 - to new node so here I will write
15:26 - till next as equal to new note right now
15:30 - in else part now suppose I have inserted
15:33 - one node and now I have created another
15:36 - node second node and data I have
15:38 - inserted by using this same coding seven
15:42 - six and here I've inserted zero now the
15:45 - new node is pointing obviously to this
15:46 - node suppose address is 500 so here new
15:50 - node we have 500 right and after doing
15:53 - this part here we have hundreds so this
15:56 - is now pointing to itself only right now
15:59 - I want to insert this second node now
16:01 - how you can insert this thing in else
16:03 - part what you will write see here you
16:05 - have to update this thing also because
16:07 - this is the last node and this one would
16:09 - contain it so the first note that is
16:10 - here you will store hundred right and
16:14 - the scale would be updated tail would
16:17 - point here now right as well as you how
16:20 - to update this link this this node this
16:22 - link would contain address of the next
16:24 - node that is here we will update 500 so
16:27 - these three things you have to do but
16:28 - here you have you have to take care of
16:30 - one thing because see here we will
16:32 - insert address of the first node in the
16:34 - previous node we are we were maintaining
16:36 - head pointer so we can get the address
16:38 - of the first node always in the head
16:41 - pointer if we don't have to take care of
16:43 - anything we know that the head is going
16:45 - header country is having address of the
16:47 - first node but here we don't have any
16:49 - head node so you have to take care of
16:51 - that thing so first of all we will
16:54 - update this pointer here I want to store
16:56 - address of the first node right and
16:59 - address of the first node is hundred
17:02 - from where I can get this hundred here I
17:05 - have hundred before updating this thing
17:07 - so here what you will write how you can
17:10 - access this part new node next and here
17:16 - I want to store address of the first
17:17 - node that is hundred here I have hundred
17:20 - how you connect since this part the
17:22 - pointer to this node is ill so tail off
17:24 - next heel of next now here I have
17:30 - hundred and now this is now pointing to
17:33 - this node
17:35 - right now we will update what we will
17:39 - update this thing have you can access
17:41 - this part tail off next so here I will
17:45 - right tail off next is equal to address
17:50 - of the next note that is 500 a new node
17:52 - I have 500 here I can write new node so
17:56 - now here I have 500 and now this link is
18:01 - there third thing we have to update this
18:04 - Trail pointer because this is the last
18:06 - node now so here one third thing you
18:08 - will right now tail is equal to new node
18:11 - in tail we have new node
18:13 - that is 500 so now tail is pointing to
18:16 - this mode and that is done now suppose
18:21 - we have created third node and I want to
18:23 - insert third node here right
18:25 - so if tail is equal to is equal to 0
18:26 - this condition is not true because tail
18:28 - is not now having address of the snowed
18:30 - last node right so now we are going to
18:33 - enter into the else part so in else part
18:35 - what you will write new node next what
18:37 - we have written new node next means new
18:39 - node next here and store tail of next
18:42 - tail is pointing to this node tail next
18:44 - is hundred see here I guess you have
18:47 - noticed that in the tail next pointer
18:51 - always we will get address of the head
18:53 - node right so no need to maintain the
18:56 - head node because from here I can get
18:58 - the address of head node but before
19:00 - updating this part we will update this
19:02 - thing because this is the only way we
19:04 - can get the address of the first node so
19:06 - first of all we will take this address
19:08 - and we will write that address here that
19:11 - is why you know next is equal to tail
19:13 - next till next is hundred so here I have
19:15 - 100 right now this is the last node and
19:19 - this is now pointing to this node right
19:23 - now we can mean we can update this thing
19:25 - this this will get contain address of
19:27 - the next node so in tail next tail next
19:30 - we are and we are having we will assign
19:32 - new moon that is 150 so here 150 so now
19:36 - this is pointing to this node third
19:38 - thing you have to update talos so tail
19:40 - is equal to new node that is 150 so now
19:43 - tail is not pointing to here tail is now
19:46 - to the snowed and this is the circular
19:49 - link list here we are maintaining only
19:51 - the tail pointer see as you have noticed
19:53 - in the previous case you have we will
19:56 - update at this point that if L is equal
19:58 - to if there is no node in the list if
20:00 - head is equal to 0 then also we are
20:01 - going to update this link if head is not
20:04 - a zero then also we're going to update
20:06 - this link so that line we have written
20:08 - after this if and else block but here I
20:11 - cannot write this line till next is
20:13 - equal to new node till next is equal to
20:14 - new node after this else look why so
20:16 - because see in this else block before
20:19 - this line this line is going to be
20:21 - executed and if you write this line
20:23 - after the else block in that case what
20:26 - will happen when control will enter into
20:28 - the else block then first of all this
20:29 - line will be executed right after that
20:32 - tail is equal to is equal to tail is
20:34 - equal to a new node so after that
20:35 - suppose here I want to insert this thing
20:37 - L is equal to new node means 150 now
20:40 - tail is pointing to this node right and
20:42 - we haven't updated this thing till next
20:45 - is equal to new node method means we
20:47 - haven't updated this thing right this is
20:51 - we haven't said this pointer so now
20:53 - after that if you right tail next is
20:56 - equal to a new node it means a next you
20:58 - are fixing this node right and that is
21:02 - not correct because we want to access
21:04 - this part we want to insert here that
21:07 - base of the next node that is why I am
21:09 - writing here in the else part only this
21:12 - line right same we will apply this while
21:15 - loop and if you want to print this thing
21:17 - after this while loop tail next and data
21:19 - tail next this and data is equal to the
21:22 - 7 would be printed so see it's not like
21:25 - that this is the only way you can create
21:26 - a circular linked list maybe you can
21:28 - apply your own loads you can you can
21:29 - create a circular linked list right now
21:32 - if we have only a tail pointer then how
21:34 - you are going to traverse the circular
21:37 - linked list so this is the circular
21:38 - linked list we have created we have
21:40 - maintained a tail pointer here and now I
21:43 - want to traverse the list I want to
21:44 - display the content that is 1 2 & 3 but
21:47 - here I don't know from where the list is
21:50 - going to be started because we have a
21:52 - pointer to the last node only we don't
21:54 - have any pointer to the first node right
21:56 - how we can come to know that which
21:58 - is the first node see I have told you in
22:01 - this case always the tail next right L
22:05 - of next means 150 this is going to be
22:08 - stored the address of the first node in
22:11 - the circular list right so till next we
22:15 - have 150 so from where I can come to
22:16 - know that the address of the first node
22:18 - is 150 that is this one right so we will
22:22 - take another pointer m and we will
22:24 - assign temp is equal to L of next so we
22:27 - are going to start from here now
22:29 - so here I will take another pointer that
22:31 - is M and you can also check if L is
22:35 - equal to is equal to zero it means here
22:37 - you can print list as empathy in else
22:39 - part what we will do first of all we
22:42 - will assign C we will write what M is
22:45 - equal to L of next so here we have
22:50 - another pointer temp which is going to
22:53 - contain whatever the value in tail next
22:54 - in tail next Intel we have 200 so using
23:00 - this pointer we can access we can reach
23:01 - till this address till next means here
23:04 - that is 150 so in temp we have 150 it
23:07 - means this is the first node we are
23:09 - pointing with the first node now right
23:11 - so now we are going to print this data
23:14 - and we will move this stamp here then we
23:17 - will print this with this one then we'll
23:18 - molted we will move temp here and then
23:21 - we will print this data where the
23:23 - termination condition is what where you
23:25 - want to stop this while loop see the
23:27 - only thing is we don't have any null
23:29 - condition the only thing is here the
23:32 - tail next is having the address of the
23:35 - first node always right so when the temp
23:40 - next once we reach here when once temp
23:43 - become the spot so now the temp next
23:46 - means 150 right temp next now is same as
23:51 - tail off next that is 150 and we know
23:55 - that the tail next is always containing
23:58 - the address of the head node it means we
24:01 - have reached to the last node so in the
24:03 - while loop what you will write while
24:07 - temp of next not equal to
24:12 - tail off next till then we are going to
24:15 - move we are going to print the status so
24:16 - here you can write printf percentage D
24:20 - temp of deta and you will move the stamp
24:25 - temp is equal to M next so now you can
24:31 - check the one you move this while loop
24:32 - see it starting temp is equal to tail of
24:37 - next that is 150 campus pointing to this
24:39 - node so now temp of next not equal to
24:42 - tail next temp next means F of next
24:45 - means one hundred hundred is not equal
24:47 - to 10 X because tail next is 150 so the
24:49 - condition is true so we will enter into
24:51 - the this loop we are going to print the
24:53 - data temp of data that is 1 will be
24:55 - printed now M is equal to temp next in
24:58 - temp next we have hundred so now in temp
25:01 - we have hundred we are going to move the
25:02 - stamp now now temp is pointing to this
25:05 - node again check temp next
25:07 - temp of next is 200 200 is not equal to
25:10 - tail next tail next is 150 yes condition
25:12 - is true so again in 10 to the loop print
25:15 - temp of data that has to be printed and
25:18 - now temp is equal to temp next that is
25:20 - 200 so here we are store we will store
25:22 - 200 so now temp is pointing to this node
25:26 - right now check the condition temp of
25:30 - next now temp next means 150 and not
25:35 - equal to tail next tail next is also 150
25:38 - but this condition is not true it means
25:41 - now if amp of next is equal to tail off
25:44 - next it means we have reached till the
25:47 - last node to the last node right so now
25:50 - if you are not going to enter into the
25:52 - loop the this the control will go out
25:54 - from the loop and whatever the statement
25:56 - or then here that would be easier to it
25:58 - now the problem is we have displayed
26:00 - only 1 in 2 we are left with 1 this data
26:04 - so now after this what you can write you
26:06 - can write printf % is D and temp of data
26:11 - right so now temp is pointing to this
26:15 - node temple data means three now three
26:17 - would be printed and now you can close
26:20 - this display function right so this is
26:23 - how you can traverse
26:25 - circular length list if we have if we
26:27 - have maintained only one pointer that is
26:29 - tail pointer right so we have discussed
26:31 - all the options of creating a circular
26:34 - linked list by maintaining head only by
26:37 - maintaining both head and tail and by
26:39 - maintaining only the tail pointer then
26:41 - how and how to display the circular
26:43 - linked list right and if you here don't
26:45 - use this while loop then you can write
26:47 - this dua loop because if you don't want
26:49 - to print this at the last node
26:52 - separately then what you can do rather
26:54 - than using a while loop you can do what
26:56 - you can use do while loop so here don't
26:59 - use this while loop here right would do
27:01 - fine and in do first of all the this
27:04 - data the statement would be executed and
27:06 - after that the condition would be
27:08 - checked so after here you can write Y
27:10 - and now what you can write M not equal
27:15 - to tail off next in that case no need to
27:22 - write this line after this loop in this
27:26 - case if you use this why do I loop then
27:29 - 1 2 3 would be printed so here I am not
27:31 - going to trace out this do I loop you
27:33 - trace out you will trace out this do I
27:35 - loop is it working properly or not is
27:37 - the output is 1 2 3 or not without
27:40 - writing this line here fine and tell me
27:42 - in the comment box it is working
27:44 - properly or not right so as in the next
27:46 - we you know till then nobody take