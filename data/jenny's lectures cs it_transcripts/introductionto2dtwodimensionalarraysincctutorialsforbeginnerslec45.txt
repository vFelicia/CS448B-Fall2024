00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - C++ programming language in the previous
00:05 - video we have seen arrays in C me we
00:08 - have discussed the concept of arrays 1D
00:09 - arrays in see right the need of 1D array
00:12 - what is 1D array how to declare 1D array
00:15 - how to initialize 1D array how to uh you
00:17 - know the memory representation of 1D
00:19 - arrays and how to access elements of
00:21 - those arrays and based on that we have
00:23 - discussed four or five coding problems
00:25 - as well lead code problem right so now
00:29 - in this video we'll see see what are
00:31 - multi-dimensional arrays especially 2D
00:33 - arrays
00:34 - right so multi-dimensional arrays are
00:37 - having more than one dimension that is
00:40 - for sure right so you see how you
00:43 - declare 1D array just write data type
00:47 - right like this int a AR name and here
00:51 - size like five so data type here we
00:55 - write array name
00:57 - and size of the array that's it this is
01:00 - how you declare 1D aray so now if you
01:03 - have more than one dimension so you can
01:06 - declare you can give like same data type
01:08 - array name here size one size two
01:11 - according to the dimension and up to
01:15 - size n how many Dimension you
01:19 - have that many size you have to give
01:22 - here right so like 2D array 3D arrays
01:26 - mostly we use 2D arrays right so now if
01:31 - I take like example of 2D arrays
01:34 - so 2D array it is the simplest form of
01:38 - multi-dimensional arrays right so have
01:41 - you declare 2D arrays same data type
01:43 - array name and only two size size one
01:45 - size two because we are having only two
01:48 - Dimension right so which type of data to
01:50 - be stored right this is AR name and here
01:54 - the you can say the maximum element to
01:57 - be stored in that array that size we
01:59 - give
02:00 - right now first of all we will see like
02:03 - what is 2D array but the need of 2D
02:06 - array we discuss first right so if I ask
02:10 - you I just declare you have to declare
02:12 - an array uh in which I want to store
02:16 - marks of 15 students let's suppose in my
02:19 - class I
02:20 - have 15 students so you simply declare a
02:24 - array of marks with name marks and size
02:28 - 15 okay fine now I say marks of 15
02:33 - students but in five subjects in each
02:35 - subject you I want to store the marks of
02:38 - 15 uh students so one way is what either
02:43 - I can say like marks or you can
02:46 - say sub one for 15 student then another
02:51 - array name sub two marks for 15 student
02:56 - like this and you just declare
03:00 - five arrays because you have five
03:03 - subjects
03:05 - right now you have five arrays but is
03:09 - there any you know simple way in which I
03:11 - just have to declare only
03:14 - once yeah we can do this with the help
03:17 - of 2D AR just add one dimension here
03:19 - only for five subject that's it no need
03:21 - to declare five times the arrays right
03:25 - that is why we also say that 2D arrays
03:28 - array of arrays
03:30 - right because here we are five arrays
03:33 - but in one array I'm going
03:35 - to declare this so simply I can say like
03:40 - how to declare that thing float name of
03:43 - the array five subjects and 15 students
03:48 - that's it oh you can also declare
03:50 - something like this maybe this question
03:53 - is in your mind like 15 here five here
03:57 - that is also fine okay
04:00 - but the difference is what I'm going to
04:02 - tell you so here also five subject 15
04:06 - students or 15 subjects we have and each
04:09 - subject I have sorry 15 students and in
04:12 - five subject I want to store the marks
04:14 - right it's okay now we so how we can say
04:19 - that this is row so if you write the
04:23 - general syntax of declaring 2D array
04:26 - then simply we write here data type
04:28 - array name and here we write row size
04:32 - and the first one is sorry the first one
04:35 - is row size the second one is column
04:38 - size right this you need to take
04:44 - care so in this case we have five rows
04:46 - 15 columns in this case we have 15 rows
04:49 - and five columns right first would be
04:51 - row size second dimension would be
04:53 - column size that is for
04:55 - sure right now have you you you know if
05:01 - I declare this this array so how you
05:04 - think like if I say how you can
05:06 - visualize this array how this array is
05:08 - to be stored in memory so generally we
05:11 - visualize this thing something like this
05:13 - like rather than 15 let's take only uh
05:18 - five subject and or we can say let's
05:20 - take a smaller number two and three only
05:24 - right two subject and three students
05:26 - that's it I have a very special subject
05:31 - two special subject in which I have only
05:32 - three student like maybe I'm guiding PhD
05:35 - students right so now or second way is
05:38 - here we can write down write down two
05:40 - and three so how you visualize this
05:43 - thing in memory sorry not in memory but
05:47 - how we visualize this thing first is row
05:50 - size so two
05:51 - rows column size so three columns
05:55 - something like this right and index
05:57 - would be start you note index start from
06:00 - 0o right so 0 1 0 1 2 these are rows and
06:06 - these are
06:08 - columns something like this right this
06:11 - is how we see so we can say 2D arrays we
06:14 - can also see this in a matrix form or
06:16 - tab form right it's nothing but but a t
06:20 - table or we can say it's like a matrix
06:21 - also Matrix is something like this so in
06:25 - Matrix also we store data something in
06:27 - this form only so that is Matrix also
06:30 - right now if you want to access the
06:32 - element of 2D array then we need more
06:34 - than one index in 1D array we need only
06:36 - one index there 0 1 2 3 4 but here if
06:38 - you want to access this element you need
06:40 - two index which row and which column you
06:43 - need to specify two thing which row and
06:45 - which column right so row index is zero
06:48 - and column index is also
06:50 - zero for this element row is zero column
06:53 - is one for this 02 for this 1 0 1 1 and
06:57 - 1
06:57 - 2 so more than one index you need
07:00 - basically two index you need if you are
07:03 - accessing element any element from 2D
07:04 - array right but this is not how exactly
07:06 - in memory the data is to be stored of 2D
07:09 - no no no no no because memories it's
07:11 - like a long tape of you know b in a
07:16 - sequence so we cannot store data in
07:18 - Matrix form or tular form but how the
07:21 - data should be stored that I'm going to
07:22 - show you in detail in the next video but
07:25 - for now in this video for this video let
07:28 - me just tell you in brief
07:30 - this first row would be stored here
07:32 - continuously then the second row would
07:34 - be
07:35 - stored rowwise there is to be stor but
07:38 - in detail we'll discuss in next video
07:39 - the memory representation and accessing
07:41 - of the array elements like 2D array
07:44 - elements
07:45 - right so this is the pictorial
07:47 - representation if the array is something
07:49 - like this so nothing change here column
07:53 - size is
07:55 - three and rows sorry rows are three rows
07:59 - are three columns are
08:02 - two 0 1 2 0
08:05 - 1 right so in this case suppose three
08:09 - student so here I have student in this
08:13 - Dimension and two subject so in this
08:16 - Dimension I have subject but here in
08:19 - this Dimension I have student and here I
08:21 - have subject it's okay you can do either
08:24 - this or this it's fine right but first
08:27 - would be row size second would be column
08:28 - size this you need to take care right so
08:30 - this is the difference between these two
08:32 - uh declaration right now if you want to
08:36 - calculate how many element you can store
08:38 - or how much memory how many bytes are to
08:40 - be allocated for the particular array so
08:42 - if this is the case first one so how
08:45 - many elements we can store two row and
08:48 - in each row we have three columns means
08:50 - we can store 2 into three total six
08:52 - elements in the St so the memory manager
08:55 - has to allocate bytes for memory for six
08:58 - elements and it is a
09:00 - float type so each element will take 4
09:03 - by so 6 into 4 that is 24 by would be
09:06 - allocated for this array for this AR
09:08 - also 3 into 2 6 6 into 4 24 by would be
09:11 - allocated
09:13 - right okay this is how I'm going to tell
09:16 - you I'm going to show you like if you
09:18 - want to calculate the size of these
09:20 - thing then we have a size of operator
09:22 - also this thing practically I'll show
09:24 - you right we'll calculate the size we'll
09:26 - show the size also with the help of
09:28 - program using size of operator right
09:30 - this is our first program and I'll show
09:32 - you with the help of program how to
09:33 - declare array how to initialize array
09:35 - it's okay now the Declaration is I think
09:37 - almost clear to you guys if you are just
09:39 - only you know if you are only uh
09:42 - declaring the array you're not
09:44 - initializing the array then you have to
09:46 - give both the size column size and row
09:49 - size right but yeah we can skip this row
09:53 - size this can be
09:56 - empty but that case is different right
09:59 - for now if you are just declaring
10:01 - something like this you have to specify
10:03 - both row size and row size and column
10:04 - size so I hope the Declaration is clear
10:06 - to you guys and how to calculate the
10:08 - number of elements and the how much
10:09 - memory would be allocated to the 2D
10:11 - array right and the pictorial
10:13 - representation how you visualize 2D
10:15 - array right how to access that in detail
10:19 - I'll show you next video now next thing
10:21 - is how to initialize 2D array so same as
10:24 - 1D ARR we have two you
10:27 - know method
10:29 - like we can initialize this at compile
10:31 - time and at run time so at compile time
10:34 - just we give the initializer list at
10:38 - compile time only and at run time if you
10:40 - want to initialize and if you want to
10:42 - ask the numbers the element of the from
10:45 - the user at run time then we use Loops
10:47 - right so first we'll see how to
10:49 - initialize it at compile time right
10:52 - don't worry I'll you know show you this
10:54 - thing with the help of program as well
10:57 - so while declaring only like float marks
11:01 - 2 and three here only I
11:05 - can this is two sorry two and three here
11:10 - only I can give the data the elements
11:13 - the marks this is known as the
11:16 - initializer list using initializer list
11:18 - so how you been initialize this thing we
11:21 - can do in three ways so first way how
11:24 - many element we can store 3 into two six
11:25 - element so just give six element so you
11:28 - just give give the marks six element we
11:31 - can store just give six marks right so
11:35 - how this is going to be stored in memory
11:39 - now here this is one thing so first two
11:44 - rows so first we'll take the first value
11:46 - and that like this is the array
11:50 - victorial representation of the AR so
11:52 - first is
11:54 - 5695 next in the same row 10.2 98
11:59 - 99 three elements we have three columns
12:03 - then next row 95 91 like
12:07 - this so this is first row this is second
12:11 - row or one more clear way is you can
12:15 - some do something like this initializer
12:18 - list uh let me just write down here like
12:23 - this nested list we can use like within
12:26 - this we can just have one more like list
12:30 - and only three elements for first row
12:32 - and three elements for second row so
12:33 - this is I think more clear way here we
12:35 - can directly say like this is Row one
12:37 - and these element would be stored in row
12:39 - two right or something like this also we
12:42 - can do like here just this bracket this
12:46 - would be same and in the next we can
12:49 - just store the
12:53 - marks then in Matrix
12:56 - form 91 91
13:01 - and that's it this also you can write
13:03 - down this bracket then in next line this
13:05 - thing in next line write down this thing
13:07 - then in next line this bracket and just
13:09 - close right this also we can do so this
13:12 - is more clear way right like Row one and
13:16 - row two so this is how you can
13:18 - initialize that compile time with
13:20 - initializer list this is known as
13:22 - initializer list and now if you do this
13:24 - thing here we can skip this row size
13:27 - here also we can skip this row size
13:30 - in this case also we can skip row size
13:32 - because ultimately we know okay row size
13:35 - is not there but we have three columns
13:38 - so we'll take first element 1 2 3 three
13:41 - columns would be there that is for sure
13:43 - now if there is next element after the
13:45 - three values so that would be stored
13:47 - definitely in the next Row 1 2 3 so
13:50 - ultimately row would be two row size
13:53 - would be automatically calculated you
13:55 - can skip row size but you cannot skip
13:57 - column size if you give a row size and
13:59 - no column size that would
14:02 - be you know
14:05 - confusing because 56 95 this this this I
14:09 - don't know how many columns so in one
14:12 - row I don't know how many columns are
14:14 - there right so this is the case this
14:17 - would be given error but that this is
14:20 - fine sorry this is fine you can skip row
14:23 - siid right but here if I take this
14:27 - example like three and
14:29 - two so half the STA is to be stored we
14:32 - have two columns so this in first row
14:35 - these two in second row these two in
14:37 - third row like this right I hope this is
14:40 - clear to you guys now if I write
14:43 - something like this if this is the case
14:46 - a name is a I I haven't specified row
14:48 - size columns are three and only one
14:51 - value zero then how many rows would be
14:55 - there here so Z would be stored 0 would
14:59 - be stored Z would be stored because
15:01 - there are three
15:02 - columns then nothing else so this is
15:06 - like 1D right if I write something like
15:09 - this rather than this zero I write
15:11 - something like this 0 1
15:13 - 2 in that case in that case also 0 1 2
15:18 - would be
15:19 - stored because there are three columns
15:21 - but we don't know the row so is there
15:22 - any Element no no element so this also
15:25 - will act as a 1D array that's it right
15:29 - but if I write something like this - 2
15:33 - now in this
15:35 - case three columns so 0 1 2 would be
15:39 - stored next we have any element yes so
15:41 - that would be in next row so definitely
15:45 - there would be two rows and remaining
15:47 - element would be 0 0 initialized with 0
15:49 - 0 so this is how this would be
15:51 - initialized right and if you want to
15:53 - store this 02 in First Row 2 two in
15:56 - second row so just do something like
15:58 - this explicitly you have to
16:00 - tell like this so now this is first row
16:04 - this is second row we can clearly see
16:07 - right so here 0 1 and 2 - 2 so remaining
16:13 - would be 0
16:14 - 0 I hope you're getting these things
16:17 - right okay now this is like compile time
16:20 - initialization at run time at run time
16:23 - how you can
16:27 - initialize so so let's take a simple
16:29 - array we have two rows and three columns
16:31 - so we have something like this two rows
16:34 - and three columns index would be like
16:38 - this so obviously we need nested Loops
16:41 - to initialize to uh you know take value
16:44 - from the user when we use Loops so we
16:47 - use two Loops we require nested Loops
16:50 - because two Dimension so we need two
16:52 - Loops if there are three dimension we'll
16:53 - need three Loops right one Loop is for
16:57 - rows one Loop is for columns I have
16:59 - already discussed in a video the need of
17:01 - nested Loops in C programming language
17:03 - in that playlist also and in C++ also
17:06 - right so if you deal with something like
17:08 - this with Matrix or tular form obviously
17:10 - you need one Loop for to increase the
17:13 - row and one is for to Traverse columns
17:17 - right so
17:19 - first this first row within this we have
17:24 - three columns so I will take I and J2
17:27 - variable so let's take I is equal to 0
17:29 - and I less than I would Traverse number
17:32 - of rows so outer loop would be for rows
17:34 - and inner loop would be for columns
17:36 - right less than two number of row row
17:40 - sizes two within this we
17:45 - have J less than column and j++ and
17:50 - within this we can simply take the value
17:53 - a r r first is I second is J because I
17:57 - is handling row and J is handing column
18:00 - so first is row second is column
18:02 - definitely right that's it right so
18:07 - first thing we have an element like I we
18:09 - have J so I is zero at first right
18:13 - condition true yes we'll enter here now
18:14 - J is z condition true yes we will enter
18:17 - here now a r r of i j now I is z J is z
18:20 - 0 0 means this we can access this memory
18:23 - location so whatever you will enter that
18:26 - element would be stored here suppose I'm
18:27 - entering minus
18:28 - one now we are within this inner loop so
18:31 - j++ J becomes one so condition true yes
18:34 - we will enter here I still one I is Zer
18:37 - and J is 1 so 0 1 means this location so
18:39 - whatever you will enter that would be
18:40 - stored here so let's suppose I'm
18:41 - entering
18:42 - one like this now j++ J is 2 now 02 so
18:47 - next element suppose I'm entering 10
18:49 - that will be stored here now j++ J
18:50 - becomes three but this condition is not
18:52 - true so exit from inner loop but still
18:54 - we are in outer loop so I ++ now I
18:56 - becomes one condition true yes and
18:58 - Center here again J would be initialized
19:00 - with
19:02 - zero now for i1 first R so this process
19:06 - would be repeated and three element like
19:08 - this we can you know take input from the
19:10 - user using Loops I hope you are clear
19:13 - with the fun nested Loops right so but
19:16 - how actually these elements are to be
19:18 - stored that we'll see next video in
19:19 - memory and how to access these element
19:21 - that also I'll show you in next video
19:22 - right now let's you know discuss this
19:25 - thing practically and I'll show you
19:26 - programs as well okay so so let's create
19:29 - a new file here
19:33 - and okay now in main function let's
19:36 - declare first a 2d array so simple let's
19:38 - take any element AR or if you take like
19:42 - float marks
19:44 - float marks of I have only like two
19:51 - subject and I have suppose uh three
19:55 - students
19:57 - right so this is how we can declare and
20:01 - if I write here
20:05 - another let's suppose
20:13 - int this is another array and suppose we
20:16 - have one more array the DAT type is
20:18 - because type can be anything int care
20:20 - float double right so I'm taking care so
20:24 - care and just I'm taking like
20:30 - name
20:33 - 20 or
20:37 - 15 so if you want to calculate the size
20:40 - of these arrays then we have a size of
20:42 - operator I have told you this is just
20:44 - the Declaration or here like memory has
20:46 - been also located for these thing right
20:49 - so we can say
20:51 - it's uh definition actually more
20:53 - precisely I say I say then definition
20:56 - because in declaration we just declare
20:58 - no memory allocation is there but here
21:00 - memory has been allocated right so
21:05 - now if I want to print like C
21:08 - out size of aray one that is marks so we
21:12 - have a size of operator size of just
21:14 - give the name of that array
21:17 - marks and obviously if you want to print
21:20 - bytes as well so you have to write down
21:23 - here
21:24 - bytes and for new line e and
21:29 - right same for next array and next
21:33 - array so just try this out with me right
21:38 - so like this we have calculated the size
21:41 - of each
21:43 - array so first calculate this right and
21:48 - then run this and tell your answer let's
21:51 - run
21:52 - this size of array Marks One is 24 bytes
21:56 - second 48 by and and third 15 by so
22:00 - first is 24 by 3 into 2 6 6 into 4 24
22:05 - next 4 into 3 12 12 into 4 48 by right
22:10 - because in also take 4 by actually
22:12 - depends on
22:13 - compiler so in my compiler it take four
22:16 - bytes car car take only one by so 15
22:19 - bytes only right so this is how we can
22:23 - calculate the size also we can see and
22:25 - if you now declare sorry initialize the
22:28 - array at compile time only so equal to
22:30 - here we can give the initializer list
22:32 - only so this is how we can write down
22:35 - marks or second way is if I want to
22:38 - write if I want to write down something
22:39 - like this like in bracket so three rows
22:43 - and four column so in each row I have
22:45 - four values so first row let's
22:48 - give four values right then this is for
22:53 - second row four values this is for third
22:57 - row
23:01 - four values and this is for fourth row
23:04 - in fourth I'm just giving only one value
23:07 - sorry we have only three row right so we
23:10 - have only three row so in third row I'm
23:12 - just giving two values it's
23:15 - okay first row would be this second row
23:17 - would be this third row would be 2 3 0 0
23:20 - right so this also we can do right and
23:23 - yeah third this is like simple example
23:25 - of 1D so let's remove this right
23:28 - so that is fine if you remove this size
23:31 - that is also fine you will not get get
23:33 - any error right but if you remove this
23:36 - suppose here I'm just removing this
23:39 - three let's see what is happening
23:41 - here see you got a red line here an
23:44 - array may not have an element of this
23:47 - type right so if I run this what error
23:50 - you will get
23:51 - here so in line number five we have
23:55 - declaration of marks as
23:56 - multi-dimensional array must have B BS
23:58 - for all the dimension except the first
24:01 - except the first so first is row you can
24:06 - skip this one but other than that if
24:08 - there are here we have 2D array so other
24:11 - than this we have only one dimension so
24:12 - you have to specify this if you have 3D
24:14 - array then 1 2 3 three dimension so
24:16 - first you can skip but other than first
24:18 - you have to give for two you have to
24:20 - give
24:21 - the limit or you can see that bound
24:25 - right so this is we giving you an error
24:29 - so let's two and here we have what three
24:33 - now you just try out the different
24:35 - different declaration I have you know
24:38 - told you while you discussing this thing
24:40 - so just try out all the Declaration and
24:42 - just calculate the size of that array
24:44 - right now how to initialize the array if
24:47 - I don't want to initialize this array
24:51 - at compile time so if this is not the
24:55 - case then you have to specify the row
24:57 - size here right incomplete type is not
25:00 - allowed right because we are not
25:01 - initializing so how to calculate the
25:04 - size because this is actually definition
25:06 - the memory manager is going to allocate
25:08 - memory based on this so have to
25:11 - calculate how many bytes to be allocated
25:12 - because there is no row size you know we
25:15 - know the number of columns I four but we
25:17 - don't know number of rows so how to
25:18 - calculate the size now how to the how to
25:22 - allocate the number of pipes so you have
25:25 - to specify so let's suppose two
25:28 - you have only two now it will give it
25:31 - will not give any error and now let's
25:33 - initialize this
25:35 - with initialize at run time with loops
25:38 - so we have one variable to Travers or to
25:42 - hold the rows so number of row the row
25:45 - size is two so this would be like this
25:49 - now inner loop would
25:51 - be for columns so obviously initialize
25:55 - with zero index would be zero less than
25:57 - column size is
25:59 - four it it should not be like less than
26:02 - equal to
26:03 - 4 index should be always less than the
26:07 - size not less than equal to right now
26:11 - within this simply with C in we can take
26:14 - the value name of that is a first I
26:17 - second is
26:20 - J first is row so first obviously this I
26:23 - you have to specify next element is J
26:25 - for column we have taken J so J
26:30 - right if I run this let's run this and
26:33 - see what kind of output you are
26:35 - getting so it it will just ask the
26:38 - elements so how many elements we need to
26:40 - give here see 4 into to eight elements
26:45 - it will accept only eight element so 1 2
26:48 - 3 4 5 6 7 8 and that's it it is not
26:52 - printing anything obviously we are not
26:53 - accessing the those elements we are just
26:56 - taking the values from the user so this
26:57 - is how we can take value from the user
26:59 - right with nested Loops this is at run
27:03 - time initialization at run time so I
27:04 - hope till now this is clear to you guys
27:06 - if you have any doubt you can just let
27:07 - me know in comment section so in the
27:09 - next video we'll see memory
27:10 - representation of 2D array and how to
27:12 - access elements of 2D are right so now
27:15 - I'll see in the next video Then by bye
27:16 - take
27:22 - care