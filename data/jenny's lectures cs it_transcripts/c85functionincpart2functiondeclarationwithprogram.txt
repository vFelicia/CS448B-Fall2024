00:00 - so in the stage of learning programming
00:02 - in severe discussing functions in c in
00:04 - the previous video i have discussed some
00:06 - basics about function like that was
00:07 - introduction to function what is
00:09 - function and why we need functions or
00:12 - you can say what are the advantages of
00:13 - using functions right and there i have
00:17 - you know given you one program or you
00:18 - can say one example there we have a
00:20 - discussed one function addition of two
00:22 - numbers so we have discussed like what
00:25 - is function definition and what is
00:26 - function called
00:27 - a little bit right we have left with
00:29 - function declaration so that will
00:31 - discuss in this video because basically
00:32 - when you you know
00:34 - go to this topic function in c typically
00:37 - three uh parts are there for a function
00:39 - function declaration or that is also
00:41 - known as function prototype
00:43 - function definition and function cool so
00:45 - all the three things will discuss detail
00:48 - right everything about these three uh
00:50 - things of functions or you can say this
00:52 - is what structure of a function
00:54 - so in this video i'll talk about
00:55 - function declaration or function
00:57 - prototype
00:58 - with proper example with a program and
01:00 - i'll show you practical also on my
01:02 - laptop right
01:03 - but before that just want to tell you
01:05 - one thing if you are looking for a great
01:07 - career in software development then you
01:09 - must have to think about the aspects
01:10 - like what's trending in the industry and
01:12 - the type of questions being asked in the
01:14 - interviews and how to improve your
01:16 - co-share ranking so here an academy
01:18 - brings you a platform where you can get
01:21 - access to weekly shows which you can
01:22 - watch live and the host of these shows
01:24 - are seven star coders
01:26 - in codeshare and they're also working
01:28 - some of the top companies like amazon
01:30 - google linkedin having years of
01:32 - experience and they'll be covering a lot
01:34 - of content which is really helpful for
01:35 - your career like in live episode you can
01:38 - ask the tech hr's the top 20 question
01:40 - asked in the interviews and industry
01:42 - leaders about the recruitment process in
01:45 - the startups and mncs and what is the
01:47 - eligibility criteria how to apply for
01:48 - them not only this you can also
01:50 - participate into mock interviews and you
01:52 - can also learn courses on programming
01:54 - languages blockchain and crypto data
01:56 - analytics and many more courses like
01:58 - that and have you ever thought about how
02:00 - these frontline apps like amazon flip
02:03 - card practo zumato were made at first
02:05 - place and what is the thought process
02:07 - behind that so here is a show to answer
02:09 - all these questions in this show their
02:11 - host anus is going to discuss
02:14 - the architecture breakdown of all the
02:15 - popular apps so learners will get to see
02:17 - how these apps were made and how these
02:19 - apps work
02:21 - so the details you can find out the
02:22 - detail of the show and the batch you
02:24 - will find out the link that i'll put in
02:25 - the description box of this video and
02:27 - don't forget to use my code jkl10 to get
02:29 - 10 percent extra discount on your
02:31 - subscription
02:32 - so now let's see what is function
02:33 - declaration
02:35 - when we use variables in a program then
02:37 - before using those variables we have to
02:39 - declare those variables first
02:41 - suppose here the same example i am
02:43 - taking
02:45 - sum
02:46 - this was a this is a function
02:48 - and here i am suppose i am here writing
02:52 - printf
02:56 - enter two numbers
02:58 - right
03:00 - so address of an address so we are
03:02 - taking name
03:03 - and sum is equal to a plus b
03:05 - right
03:06 - so it will give error suppose in word
03:08 - main you are writing this thing and
03:10 - here i am printing
03:13 - sum is equal to percentage d and
03:17 - some in main you are writing only this
03:19 - additional food number so it will give
03:20 - it why because you are using a b and sum
03:23 - and you haven't declared these variables
03:26 - right so when user will enter then how
03:28 - that value would be stored
03:30 - you have to tell
03:32 - you know these variables first of all
03:34 - means you have to declare these
03:36 - variables first so here i am declaring
03:38 - in
03:38 - a
03:39 - b
03:40 - and
03:41 - sum
03:42 - so when you declare variable what you
03:43 - are telling
03:44 - to the compiler the data type and name
03:48 - of the variable two things we are
03:49 - telling
03:50 - same before using function you have to
03:53 - declare function also
03:55 - otherwise it will give error or maybe it
03:57 - will not give error
03:59 - but
04:00 - always it's you can say it's a good
04:02 - practice to declare
04:04 - function before using it
04:07 - but it is not necessary in some
04:09 - situations you can omit you can you it's
04:12 - not necessary to declare function you
04:14 - can only define function and you can
04:15 - call function and you will get exact
04:17 - output means correct output
04:19 - all the things all the situations all
04:21 - the conditions you will discuss in
04:22 - program
04:24 - right
04:25 - but it is always a good practice to
04:27 - declare function first of all
04:29 - right we'll see all the situations like
04:31 - if you don't declare a function and then
04:33 - you are executing a program then what
04:34 - will happen maybe you will get correct
04:36 - output maybe you you will get error or
04:37 - maybe you will just get warning and you
04:40 - will get the output whatever you want
04:42 - right
04:43 - so
04:44 - now how to declare a function so this is
04:46 - a function
04:47 - this is what function definition i hope
04:49 - you are clear if you have seen the
04:50 - previous video
04:52 - so here because here you are defining
04:53 - what this function is doing the process
04:55 - so it is function definition right and
04:57 - in main
04:59 - we call the function so suppose before
05:01 - the definition here i am writing i am
05:03 - writing
05:06 - void mean
05:07 - and here i am calling this function
05:10 - sum that's it
05:12 - so this is what function calling this is
05:14 - what function definition
05:17 - right
05:18 - so now
05:20 - when program runs first of all control
05:22 - will go to the main function and first
05:24 - line is sum this means
05:26 - function calling
05:28 - so
05:30 - it will go to the definition part of the
05:31 - function so this is the definition part
05:33 - of the function so now it is going to
05:35 - match the function definition as well as
05:38 - the function declaration
05:40 - right but here we are not declaring
05:42 - function
05:43 - right so how to declare this function
05:46 - before using before this main
05:48 - here what you can write i am i hope you
05:51 - are not able to see this so i am writing
05:52 - here
05:53 - this side
05:55 - the data type
05:57 - name of function
05:58 - and here
06:00 - in brackets
06:02 - some arguments or some input
06:04 - right but here this function is not
06:07 - taking anything because in the function
06:09 - only we are declaring variables and it
06:12 - is not returning anything because here
06:13 - only i am printing some
06:15 - that also will discuss the type of
06:17 - function which takes argument and which
06:19 - return something these are four
06:21 - categories of function that later we
06:23 - will see
06:24 - so it is simple declaration of function
06:26 - here you can say
06:28 - some argument so i am not taking any
06:29 - argument in this function so generally
06:31 - if you write the declaration of function
06:33 - it is your data type or you can say
06:35 - return time no data type it should be a
06:37 - return type what type of value the
06:40 - function is returning that we will
06:42 - return that will return here right so
06:44 - this function is returning nothing so
06:46 - that is why i am writing void word means
06:48 - nothing
06:50 - is it
06:50 - taking any argument
06:53 - i don't want that this function will
06:54 - take any argument that is why this is
06:56 - blank so rather than leave it blank
06:59 - better to write here
07:01 - y
07:04 - why so that also will discuss because if
07:06 - if you will not write anything here
07:08 - and in calling if you write something
07:10 - like this 5 and 7
07:15 - means i want to do sum of 5 and 7
07:18 - but it will not do sum of 5 and 7
07:20 - because it will call this function and
07:21 - here it will ask enter two numbers and
07:23 - whatever number we will return it will
07:25 - give some of those numbers
07:27 - so according to the logic it should give
07:29 - error but it will not give error
07:31 - if you leave it something like blank
07:34 - so this would be in dilemma if you take
07:36 - this then also it will not give error if
07:38 - you don't take any argument here in the
07:40 - calling then also it will not take it
07:42 - will not give any error right
07:45 - so don't leave the situation in dilemma
07:47 - better to
07:49 - write here void
07:51 - means at this time if you write in
07:53 - declaration void and here
07:55 - if you are passing any argument while
07:57 - calling this function it will give error
07:59 - and that's exactly we want
08:01 - it should give error
08:02 - because we don't want to pass any
08:04 - argument in function right so better to
08:06 - use here void everything will discuss
08:08 - practically i will show you on my laptop
08:10 - right
08:11 - so this is what
08:14 - function declaration
08:16 - what is the general syntax
08:18 - if i write
08:19 - return type
08:22 - function name
08:25 - arguments
08:26 - so suppose if a function is taking any
08:29 - argument suppose a and b i want to pass
08:32 - here
08:33 - right
08:34 - like i want to do sum of 5 and 7
08:37 - i don't want
08:38 - to
08:40 - ask from the user directly i want to
08:42 - print sum is equal to the say plus b and
08:44 - it should print 5 plus 7 that is 12
08:46 - so in declaration part what you will do
08:49 - two arguments i want to take like in
08:51 - a
08:53 - in b and semicolon in declaration
08:57 - semicolon is must
09:00 - here in declaration part and also now
09:04 - in definition also that should match
09:07 - declaration and definition should match
09:09 - so what data type is return type is void
09:11 - function name is some fine but argument
09:13 - here i'm passing two argument of integer
09:15 - type but here it is nothing so it will
09:17 - give error so better to
09:19 - pass your argument like in
09:22 - if you take like a
09:25 - or in b
09:27 - or you can take any other name also x
09:29 - and y and so here you can write down sum
09:31 - is equal to x plus y
09:33 - right suppose i am taking x and y
09:37 - and here i am writing x
09:39 - and y obviously you should write here x
09:41 - and y a and b you cannot write because a
09:43 - or b are here
09:45 - not in this one
09:46 - or here we are not writing this line
09:49 - right
09:50 - i am just
09:51 - writing here in sum is equal to zero i
09:54 - am not taking a and b because i am
09:57 - taking here two variables
09:59 - so you will get some right
10:01 - it is not necessary to write down name
10:03 - of the argument in declaration you can
10:04 - omit this
10:05 - but it is always necessary to write down
10:08 - the
10:09 - data type
10:11 - data type of the arguments you want to
10:12 - pass this is always necessary integer or
10:15 - float or character
10:17 - right
10:18 - this is the situation when
10:21 - function is accepting some input
10:24 - right
10:25 - but here in this case i am not passing
10:28 - anything so i just write down here
10:31 - void and semicolon i don't want to pass
10:33 - anything i don't want to pass anything
10:35 - that's it and this i want to write this
10:38 - i want to write this i want to write
10:41 - right this i want to write right and so
10:43 - here a plus
10:45 - b
10:46 - right so this is what function
10:48 - declaration so here it is types of
10:50 - argument means data types of argument
10:52 - you have to do data type right
10:55 - so basically the function declaration
10:56 - will tell compiler three things about
10:58 - function
11:00 - which type of value the function is
11:02 - going to return after completing of the
11:03 - execution right return type name of the
11:06 - function through which you are going to
11:08 - call that function that is you can say
11:10 - identity of that function name
11:13 - and a type of arguments and how many
11:15 - arguments you are going to pass in the
11:17 - function data type of the arguments in
11:19 - float or character and how many
11:20 - arguments
11:22 - if you want to pass two argument you
11:23 - have to separate those arguments with
11:25 - comma three argument you can pass four
11:26 - argument you can pass it's up to you
11:28 - right so three things the declaration
11:30 - part is going to tell the compiler right
11:33 - and if in declaration at the time of
11:35 - declaration if you don't specify the
11:37 - return type
11:38 - then by default compiler
11:41 - think what its data type is
11:43 - in
11:44 - so better to specify the data type here
11:48 - right
11:49 - so now let me show you practical of this
11:52 - whatever we have discussed here
11:54 - so now let me create a new file
11:58 - named function declaration
12:00 - right
12:06 - header file we are using here i'm using
12:08 - void main
12:10 - and the last whatever we have discussed
12:12 - in the previous video the add function
12:14 - that i'm going to you know copy that
12:16 - code first here right
12:25 - see that's it here we are defining the
12:28 - sum
12:28 - right and in main function i am calling
12:30 - the sum right so a good practice is
12:35 - here
12:36 - i am using the sum in main function
12:38 - right so before using first you have to
12:41 - declare sum
12:42 - so i'm declaring some void sum
12:46 - and i'm providing nothing here and
12:47 - semicolon so this is what function
12:49 - declaration this part
12:55 - right and this is what function calling
12:58 - this
12:59 - and this is what function definition
13:01 - this is what function definition
13:04 - right
13:05 - so now let me run this first of all let
13:07 - me run this like this only
13:09 - so
13:11 - from the main function it is going to
13:12 - start you know and now
13:15 - definition
13:16 - and declaration it is going to
13:18 - match the function definition and
13:20 - declaration both are matching yes return
13:23 - type is void
13:24 - name is exact and arguments type of
13:27 - arguments we are not passing any
13:28 - arguments both are matching so now it
13:30 - will run so it is asking enter two
13:32 - numbers four and five and it is giving
13:34 - sum is equal to nine
13:35 - that's it but now let's do something
13:37 - with this code i am not
13:39 - declaring this function here
13:42 - right
13:43 - so now let's see what will happen if you
13:45 - don't declare the function see let me
13:48 - run this
13:50 - see yeah although it's running c it is
13:52 - asking enter two numbers it will give
13:54 - output correct output but you are
13:56 - getting here warning and not what
13:58 - warning you are getting c
14:00 - implicit declaration of function sum
14:04 - sixth line sixth line
14:07 - here because we are calling right
14:10 - so it will call it this function and it
14:12 - will check for the declaration but there
14:13 - is no declaration so
14:15 - by default if there is no declaration
14:17 - the compiler assume
14:20 - that implicit declaration of the
14:21 - function right and what it is it's
14:23 - assuming always it will assume the
14:26 - return type of the function is integer
14:29 - right it is assuming that thing
14:31 - fine
14:33 - now
14:33 - it is assuming return type is integer
14:35 - but actually in the definition return
14:37 - type is void
14:39 - but still it is running it is not giving
14:41 - any error why
14:43 - because we are not returning anything
14:45 - here
14:46 - so it's fine
14:48 - it will run and here if you print 5 6 it
14:52 - will your sum is equal to 11 right but
14:55 - here the problem comes when in the
14:56 - definition part i want to add float
14:59 - number
15:01 - suppose
15:03 - i am writing data type of this function
15:05 - is float
15:06 - right
15:07 - so
15:08 - it should return like float i mean i
15:11 - want it should return
15:12 - float
15:13 - so
15:15 - here i am writing float a b
15:17 - and here i am printing
15:19 - percentage f sum and
15:22 - row
15:25 - it's okay if you take variable is
15:27 - integer a b intent some it is that is
15:29 - also fine and if you just change
15:31 - this type
15:33 - the return type of this function
15:35 - from word to float that also gives error
15:38 - see now
15:39 - let me run this
15:41 - now it will not run it will give you
15:42 - error
15:43 - see
15:45 - see first of all warning implicit
15:47 - declaration of the function implicitly
15:48 - it assume that the return type of the
15:50 - function is integer right but actually
15:52 - when it finds that in definition return
15:55 - type is float
15:56 - means
15:57 - mismatch of the return type see
16:00 - conflicting types of sum
16:03 - it is assuming it should return in but
16:05 - actually you are in definition you are
16:07 - writing flow so it's conflicting now so
16:09 - now it will not run and it will give
16:12 - error
16:13 - right so at this time it is you know
16:16 - compulsory to
16:18 - declare your function first before using
16:20 - it to get rid of the situation so here
16:24 - i'm
16:26 - writing float sorry it's flyt
16:31 - spelling
16:35 - see now it is asking enter two number
16:36 - i'm entering three point four four uh
16:40 - that
16:41 - point
16:43 - five point four and it is giving like
16:44 - eight point eight
16:46 - right
16:47 - so that's it
16:48 - so here that is why declaration is
16:50 - compulsory in this type of cases
16:53 - right
16:54 - and see here one more thing here we are
16:56 - not writing anything like word or
16:58 - anything so suppose here i am passing
17:01 - in calling i am passing 5 comma 7 i'm
17:05 - passing arguments
17:07 - so according to s us it should give
17:09 - maybe it should give error like i want
17:11 - it should give error or maybe i want to
17:13 - do sum of 5 and 6
17:16 - so now let's see what you are getting
17:19 - let me say we need to run it
17:22 - see enter two numbers it is asking and
17:24 - i'm entering four five and it is giving
17:26 - you nine point this this because i'm
17:28 - printing this float i'm taking it f
17:30 - float
17:31 - right
17:32 - so it is not giving any error
17:35 - so
17:36 - it is in dilemma
17:38 - this is blank declaration is blank
17:40 - so it will take it can take also it
17:43 - doesn't take also it will not give any
17:44 - error
17:45 - so if you want that it shouldn't take
17:48 - any argument i want to pass i want to
17:50 - enter numbers whatever number i enter it
17:53 - should print some of those number i
17:54 - don't want to pass any argument that is
17:56 - for sure hundred percent
17:58 - so better to write here
18:01 - void
18:03 - now it is guaranteed that
18:05 - it will not take it will not accept any
18:07 - argument
18:09 - word means nothing
18:10 - so now if you pass in calling if you
18:12 - pass argument it will give you error see
18:14 - let me run this
18:17 - see
18:19 - error is too many arguments in function
18:21 - sum line number six
18:23 - line number six
18:25 - and here i am passing the column is
18:27 - the that fifth i hope you
18:30 - you know how to uh see there like six
18:32 - this line number and five is like that
18:34 - you can say column number so too many
18:36 - argument to function because i don't
18:37 - want to pass any argument
18:40 - right here i have written void in the
18:42 - function declaration
18:44 - because i have explicitly declared this
18:46 - one and i am passing argument here
18:48 - 5 and 7 right so that is why it will
18:51 - give error so in this case
18:56 - just this thing and it will work fine
18:59 - right
19:00 - so to get rid of the situation you
19:02 - explicitly write down here word that
19:04 - would be better if you don't write that
19:05 - is also fine right
19:07 - and see if i am not writing void hair
19:09 - and i am writing void
19:11 - in definition part
19:13 - i am not writing word in declaration
19:14 - part i am writing in definition part
19:17 - right and here i am passing argument 4
19:19 - and 5.
19:22 - now what it will give c
19:26 - see now it is going to run
19:29 - so it's must to write down here in
19:31 - declaration part white
19:34 - right if you want that dish in calling
19:38 - it shouldn't ask it shouldn't you know
19:40 - take any argument if you give any
19:42 - argument it should be varied so in
19:43 - declaration only you should write down
19:45 - here void
19:46 - i hope this function declaration is
19:48 - clear to you right
19:50 - when
19:51 - to declare a function
19:53 - when it is not necessary to declare a
19:55 - function right suppose i am not
19:57 - declaring function here
20:00 - and here also i am taking int
20:05 - right
20:07 - or
20:07 - it doesn't matter here you can take
20:09 - float or something like this and in this
20:11 - case i'm not declaring anything so now
20:13 - it will give you warning only like
20:15 - implicit declaration of function it's
20:16 - okay implicitly also
20:18 - see
20:19 - let me run this see here you are getting
20:21 - warning implicit declaration of function
20:23 - implicitly it is assuming the return
20:25 - type of function is end and in definite
20:27 - definition also you are writing in
20:30 - right
20:31 - so
20:32 - it will run
20:34 - it will give you output right
20:38 - now let me take another example
20:54 - see here i am taking a function care
20:57 - name is fun and here i am taking a
20:59 - character type of variable and i am just
21:01 - going to enter a character and whatever
21:03 - it i am going to enter that i am going
21:05 - to return return c so here i am
21:07 - returning a value so return i am
21:10 - returning a value whose data type is
21:12 - character so that is why the return type
21:14 - of this function should be care so i'm
21:16 - writing air care right and main function
21:20 - whatever the function is returning that
21:21 - i am storing obviously that function is
21:23 - returning something if someone is giving
21:26 - you something so you have something to
21:28 - hold that thing maybe you you you hold
21:30 - that thing into your hand or maybe in
21:32 - some other you know port or something
21:34 - like that so here i am taking a
21:36 - character type of variable because
21:38 - obviously i am returning a character so
21:39 - character type of variable and in ch i'm
21:41 - storing that value and whatever i'm
21:43 - returning that i'm going to print in
21:45 - main
21:46 - right so now let me run this here i'm
21:48 - just defining this and i'm calling this
21:51 - function here no declaration
21:54 - so according to you what it should give
21:57 - think
21:58 - see it is giving you error
22:01 - expected
22:05 - sorry
22:07 - so now let me run this
22:10 - see now
22:11 - it is giving error conflicting types of
22:13 - fun why because when we are calling this
22:15 - function it is us it is it it is going
22:18 - to this definition part and now it is
22:21 - going to match
22:22 - definition and declaration because and
22:24 - we are not declaring anything so
22:25 - implicitly it is assuming that the
22:27 - declaring that a return type of this
22:29 - function is integer but actually
22:33 - at definition you are giving return type
22:35 - care
22:36 - so intent care both are conflicting so
22:38 - that is why it is giving you error so in
22:39 - this case it is must
22:41 - to declare this function
22:43 - and it's not like that outside main you
22:45 - have to declare
22:46 - before using you have to declare so in
22:48 - inside main also you can declare this
22:50 - function so inside main i am declaring
22:52 - data type return type must be character
22:55 - name is fun
22:56 - and i don't want to you know accept any
22:58 - argument and semicolon right that's it
23:01 - now let me run this
23:04 - see now it is asking enter a character i
23:05 - am returning h and ch is equal to h so
23:09 - whatever h you are going
23:11 - to enter that is going to pass here h
23:13 - and that h would be stored in ch and i
23:15 - am printing here ch
23:16 - that is also fine but its better to
23:18 - declare the function outside main
23:21 - because the scope of this declaration is
23:23 - only now within this main
23:26 - so if you take another function like one
23:29 - two and there i am calling this function
23:32 - fun again
23:34 - so
23:34 - the declaration scope is only this so
23:37 - for that function there is no
23:38 - declaration of function fun function
23:41 - right so implicitly it is it will assume
23:44 - that declaring that the return type of
23:46 - this fun function is integer and maybe
23:48 - it will be conflicting so better to
23:50 - declare function
23:52 - outside main
23:53 - right so that scope would be throughout
23:55 - the program not within the main block
23:58 - only
23:59 - maybe in some other functions we are
24:00 - calling other functions it is also
24:02 - possible any function can call any other
24:04 - function right
24:06 - so here i am declaring
24:08 - care
24:10 - and
24:11 - fun
24:13 - this thing is for your assignment
24:15 - you have to test it right you that like
24:17 - you are declaring a function here and in
24:19 - another function you are calling that
24:20 - function may be so it is giving any
24:22 - conflicting type of uh data type or not
24:25 - i hope you got what exercise did this
24:27 - right so you practice this thing
24:30 - so outside this fund i am declaring it
24:32 - so that is fine
24:34 - right
24:35 - so now
24:36 - i hope you got
24:38 - what is function declaration what kind
24:40 - of thing you can do with function
24:41 - declaration when it is necessary to
24:42 - declare a function when it is optional
24:44 - to declare a function and if you don't
24:46 - declare what type of warning or error
24:48 - you can get and in what situation right
24:51 - so now one exercise for you is here i'm
24:53 - returning just i'm changing a little bit
24:57 - i'm writing this c
24:59 - in single quote
25:01 - return
25:02 - c
25:04 - right
25:04 - and suppose when
25:07 - it will ask i will enter a number
25:10 - uh k h only
25:12 - right so now what output you will get
25:14 - you have to tell me this in command box
25:16 - right
25:17 - so that's it for this video now so in
25:19 - the next video we will see some more
25:20 - about function definition and function
25:22 - calling with proper program so that's in
25:24 - the next video till then bye