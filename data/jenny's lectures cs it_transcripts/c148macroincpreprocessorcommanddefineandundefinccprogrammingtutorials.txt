00:00 - so in the previous video we have
00:01 - discussed what is pre-processor how to
00:03 - use that thing what pre-processing means
00:05 - what is the you know meaning of that
00:06 - symbol hash we use in every program like
00:09 - hash include H hash include string Doge
00:12 - so what is this hash symbol what is
00:15 - pre-processing right the functioning of
00:16 - that thing and what is Hash include that
00:19 - pre-processor command there are many pre
00:21 - pre-processor command one command we
00:23 - have discussed in previous video that is
00:25 - Hash include what does that mean exactly
00:27 - what is the meaning of hash include
00:29 - command and in how many ways we can use
00:31 - that command in two ways to include
00:33 - something right the file from a standard
00:37 - library or you can say from a local
00:39 - directory so those things we have
00:40 - discussed everything in the previous
00:42 - videos with the help of proper example
00:43 - now next pre-processor commands are hash
00:46 - Define and hash
00:47 - under so these are to you can say Define
00:50 - a macro or defining constant now how we
00:53 - will use this thing this is to undefine
00:55 - that thing the macro but how you will
00:57 - use this thing in your program that
00:59 - thing discuss in this video I'll show
01:00 - you a program also practical also I show
01:03 - you and all the important points about
01:04 - these two uh pre-processor commands
01:06 - we'll discuss in this video now let's
01:08 - see what is this hash Define and hash
01:11 - UND in one of my previous video I have
01:13 - told you like hash Define is used to
01:15 - define
01:18 - constants using const keyword also we
01:21 - can Define constant and using hash
01:22 - Define also this uh command also we can
01:25 - Define constant like what you can Define
01:27 - the example is you can write hash Define
01:29 - simply
01:30 - you can suppose I'm writing here a
01:32 - constant
01:34 - a and the value of this is
01:38 - 10 please don't put any semicolon after
01:40 - this hash defined Line This is General
01:42 - mistake students do you have to remember
01:44 - this thing now whenever in a program I
01:47 - will use this a that would be replaced
01:49 - by this 10 now in main function suppose
01:53 - I'm writing here another variable int X
01:57 - I'm writing x equal to a
02:01 - if you don't Define this constant here
02:03 - this is not possible because the right
02:04 - side there should be a constant right
02:07 - integer constant but we already defined
02:09 - this constant the value would be 10 so
02:11 - this would be replaced by 10 before
02:14 - compilation in the preprocessing phase
02:17 - right because pre-processing comes
02:18 - before compilation it's a step in
02:20 - compilation so now whenever you will
02:22 - print like print F and percentage D and
02:25 - you will print X so it will print value
02:27 - 10 so this is how you can Define
02:29 - constant using this right or another
02:32 - thing what you can Define like generally
02:36 - whatever you will write after this hash
02:37 - Define this thing this is known as
02:40 - macro right now one more example suppose
02:43 - we are we are writing here like Pi 3.14
02:47 - I think 15 and 8 or 9 something like
02:51 - this let me write down 9 here the value
02:55 - of pi is this here I'm defining this
02:58 - macro this is known as macro name and
03:01 - this is the value or you can say the
03:03 - character sequence here we can write
03:05 - this is macro name and this is character
03:08 - sequence it's not like that here you can
03:10 - write only the integer value you can
03:11 - also print a me you uh string also this
03:16 - also I'll show you an example now let us
03:17 - discuss this example first suppose we
03:19 - have taken this thing it has to find pi
03:22 - and this now whenever in a program we
03:25 - use this P that would be replaced with
03:27 - this thing during the pre-processor
03:30 - phase only this is to Define uh macro
03:34 - this is how we can use uh this hash
03:36 - Define to Define uh macros or you can
03:38 - say to Define pre-processor variables
03:41 - this is what pre-processor variable also
03:43 - you can call it right now how you can
03:46 - use this thing suppose we are writing in
03:49 - uh
03:51 - radius area of a circle we uh printing
03:54 - so we are we are going to calculate so
03:57 - suppose I'm taking at compile time only
03:58 - in R is equal to 5
04:00 - and in print F I'm just writing area
04:05 - of circle
04:07 - is I'm just writing percentage F and Pi
04:13 - into R into R Pi R square this is the
04:16 - formula I guess
04:18 - right return zero so this at the time of
04:22 - pre-processing only when you will
04:23 - compile pre-processing would be done and
04:25 - this whatever the line which are
04:27 - beginning with hash that would be
04:29 - process by the pre-processor program
04:31 - right so if pre-processor see this thing
04:34 - hash defined it means we are defining a
04:36 - macro it means whenever in a program we
04:38 - are writing this Pi that would be
04:40 - replaced with
04:42 - 3.14159 now compiler will see this value
04:45 - not pi
04:47 - value right so this is what the role of
04:50 - hash Define one one so here suppose at
04:53 - many many uh know places we are using
04:57 - this spy in a program 5 10 15 places so
05:01 - rather than writing this value 10 times
05:03 - in your program better to use this small
05:06 - Name by it is better to understand
05:07 - readability would be more right and we
05:11 - don't need to write this this value
05:12 - 3.1415 again and again just write down
05:15 - Pi
05:17 - Pi right so this you can say this task
05:20 - would be more you can say efficient for
05:23 - us guys if we Define a macro something
05:26 - like this now if you don't write here
05:29 - this character sequence I want to print
05:31 - a message like hash Define I'm printing
05:35 - the macroon name MSG message and just
05:38 - printing like
05:41 - Jenny lectures suppose the name of my
05:45 - channel complete name
05:47 - csit net and
05:50 - jrf this thing so this message suppose I
05:53 - want to print 10 times in my program 10
05:57 - times or 15 times suppose 10 times so
06:00 - rather than writing this complete a long
06:02 - message 10 times better to write down
06:05 - this thing better to Define this hash
06:07 - Define MSG now why I'm writing this MSG
06:11 - like in caps it as you can say a rule it
06:14 - would be recommended it's not like that
06:16 - if I write MSG in small letter that
06:18 - would give error no but it is you can
06:21 - say specific you can say it's a rule for
06:25 - better understanding of the program
06:27 - because generally when we Define
06:29 - variables see we take small
06:32 - letters and if by default suppose here
06:36 - also I have defined a constant and I'm
06:38 - using R and 10 so this would be this R
06:43 - would be replaced by this 10 10 is equal
06:45 - to 5 it will give error and if I write
06:48 - here capital letter then it would be
06:50 - fine right the compiler the
06:53 - pre-processor would not be confused in
06:55 - this thing right so better to use caps
06:59 - while you write macro name because
07:02 - generally in variables we use small
07:04 - letters so just to avoid the confusion
07:07 - we use capital letters so simply how you
07:10 - can print this
07:12 - thing you can write print F percentage s
07:16 - and
07:17 - MSG that's it it will print Jenny's
07:20 - lecture csit net and JR this MSG
07:23 - whenever we use in program this m that
07:25 - would be replaced with this character
07:27 - sequence so this can be a con you can
07:30 - say this constant integer value or a
07:32 - string value also fine so this is how
07:36 - you can use this hash Define just to
07:38 - Define a variable or these type of
07:40 - messages or constant now another thing
07:43 - is you can Al also Define function macro
07:46 - you can say functions macros sometimes
07:48 - acts like functions also now how you can
07:51 - do that thing see suppose here I want to
07:54 - define a function product or multiply m
07:57 - u l I'm writing for multiplication
08:00 - and a and b two variables I'm going to
08:04 - pass and just I'm defining it a into B
08:08 - that's it no semicolon here remember
08:11 - this thing now in our
08:14 - program we are writing something like
08:16 - this like uh print F percentage D or you
08:20 - can say multiplication is percentage D
08:22 - and I'm just writing here M UL L and I'm
08:27 - passing 2 3
08:31 - so it is what now we are defining the
08:33 - macro but this will act as a function so
08:36 - whenever we use we will use this line in
08:39 - the program like m 2 into 3 I'm passing
08:42 - the value so this would be replaced by a
08:45 - into B A into b means now a value is 2
08:49 - and 3 so this would be replaced by 2
08:51 - into 3 now 2 into 3 means 6 it will
08:56 - print six during the pre-processing
08:58 - phase it will replace this thing so this
09:00 - is what obviously this is a function
09:02 - function calling we can just you know uh
09:05 - Define a function M and we can call that
09:07 - but it is faster than that thing because
09:10 - during pre-processing phase only this
09:12 - would be
09:13 - replaced and if we Define another
09:15 - function then during the compilation
09:17 - then it will call the function then
09:18 - return from that function and all these
09:20 - thing would happen but here no such kind
09:22 - of thing will happen right before
09:24 - compilation only it would be replaced
09:26 - directly 2 into three and directly
09:27 - compiler will give you output six so it
09:29 - is is
09:30 - faster right so this small function if
09:33 - you want to write down then rather than
09:36 - just defining function giving protype of
09:39 - that function calling that function use
09:40 - macro you can use macro also right now
09:43 - one thing is what you have to take care
09:46 - one thing like if this here I'm passing
09:50 - No 2 into three I'm passing here I'm
09:53 - passing here this 5 - 2 7 + 4 this also
09:56 - we can pass so maybe you will think if a
09:59 - is what 5 - 2 means a is 3 and b is 7 +
10:03 - 4 that is 11 so it will give 33 output
10:07 - right no this thing you need to take
10:11 - care
10:12 - see
10:14 - first the expansion the substitution
10:16 - would be done after that evaluation of
10:20 - the expression would be done so first
10:21 - thing what what I am saying let me just
10:24 - clear this thing first so first thing
10:26 - what would be done at the place of this
10:29 - yeah obviously a is what 5 - 2 this
10:31 - would be replaced a into B because this
10:34 - means we have defined it something like
10:36 - this a into B so at the place of this a
10:38 - into B would be replaced now a is 5 - 2
10:41 - b is 7 + 4 so what would be replaced
10:43 - here 5 - 2 is a into 7 + 4 so this would
10:50 - be the expression first expansion or you
10:54 - can say the substitution after that
10:56 - evaluation now we are going to evaluate
10:58 - according to the board M Rule now this
11:00 - multiplication would be evaluated first
11:02 - so that would be 5 - 14 + 4 now this
11:08 - value becomes 9 - 14 that is - 5 so the
11:13 - output would be - 5 not 33 this is
11:17 - important Point here you need to take
11:19 - care right now rather than this you can
11:23 - also write multiple lines but you have
11:26 - to use that slash like suppose I'm
11:29 - writing
11:30 - here
11:32 - Max maximum of A and
11:34 - B right
11:38 - now here we'll check if a greater than
11:42 - b just a slash in another line in
11:45 - another line you can
11:47 - write print
11:49 - F A is
11:52 - maximum semicolon you can you will use
11:55 - semicolon obviously after the Sprint F
11:56 - right then slash l then slash then print
12:02 - f b is
12:05 - maximum no slash after this last
12:08 - line you can write down multiple line
12:11 - something like this right now here if I
12:15 - pass Max and if I pass here 5A
12:24 - 6 what output you will get simply it
12:26 - will print Max a so this would be
12:29 - replaced with this thing so a is five
12:31 - five and six so 5 greater than 6 no so
12:36 - else it will print B is maximum
12:39 - obviously B is maximum if you want to
12:42 - print the value also like six is maximum
12:45 - then what you can say see this this A
12:47 - and B would not be
12:49 - replaced one more important point about
12:51 - this thing this A and B would not be
12:53 - replaced by five and six only this A and
12:56 - B would be replaced with the values why
12:58 - so because this A and B we are writing
13:00 - in double
13:02 - quotes So if the this thing is written
13:05 - in double quotes that would not be
13:07 - replaced with these values if you want
13:11 - to replace it then you can write down
13:15 - here percentage D is maximum and after
13:17 - that you can print
13:20 - a percentage D is maximum after that you
13:23 - can print
13:27 - B now this a is out outside of this
13:30 - double quote so this would be replaced
13:32 - with five this would be replaced with
13:34 - six right
13:37 - here and this see this substitution
13:40 - would be done here only not here because
13:43 - Max A and B this is the definition you
13:45 - can say of this macro so macro this I'm
13:47 - using here so this this at this place
13:51 - this complete code would be substituted
13:54 - here don't get like confused this would
13:58 - be same here and this a would be
13:59 - replaced here first of all this code
14:00 - would be replaced here this is you can
14:03 - say would be expanded source code not I
14:07 - file would be created and after that
14:09 - compiler will compile this thing here
14:11 - this code would be copied here or you
14:13 - can say substituted here at the place of
14:15 - this thing right now here only this
14:18 - changes would be done now it will print
14:21 - six is
14:24 - maximum right so if the value is written
14:27 - within double quotes that would not be
14:29 - replaced with the this this macro fine
14:33 - now I think that is it about hash Define
14:36 - I have told you every point you can just
14:39 - write down these important points I have
14:41 - told you right now how to use this
14:44 - undefine if you want to undefine the
14:45 - macro which we have defined using hash
14:48 - Define then you can use hash and now I
14:51 - want to undefine this one after this you
14:53 - can write
14:54 - hash andf just write down the macro name
14:57 - m ax no semicolon here and after if this
15:01 - undi function you you want to write down
15:04 - print F percentage D and Max again you
15:06 - want to use 11 and six it will give
15:10 - undefined reference to this Max because
15:12 - we have undefined this
15:15 - macro at this point so after this point
15:18 - you cannot use this Max it will not be
15:20 - recognized if you don't undefine then it
15:23 - would be fine so it is just to undefine
15:25 - the macro you have defined right let me
15:29 - just uh write down the program here and
15:32 - show you okay so let's create a new
15:37 - file Define macro I'm just writing the
15:40 - name Define
15:46 - macro hash include s and first of all
15:50 - we'll see we'll uh Define a constant
15:52 - hash Define a and 10 right now in
16:02 - main we'll take int X is equal to
16:06 - a and simply print X percentage uh D and
16:13 - you'll simply print the value of this
16:16 - x
16:19 - right turn zero and let me save it and
16:22 - let me just run this and show you what
16:24 - output you will get it should print
16:26 - 10 because whenever we use in program a
16:30 - that will be replaced with this 10 right
16:33 - so X is equal to 10 and it would print
16:34 - 10 right so this is how you can use to
16:37 - Define constant or another program you
16:40 - can write down yourself we use here Pi
16:43 - the value of pi and you can calculate
16:45 - area of the circle P Pi R square that is
16:47 - for your assignment you have to do that
16:50 - program I'm just taking another example
16:53 - there I'm taking a function that we have
16:56 - taken M multiple function
16:59 - so a comma B and just I'm a into B
17:05 - that's it now at this point of time just
17:09 - I'm writing print F and
17:13 - iting multiplication
17:17 - is percentage D and just calling the
17:21 - function and I'm simply passing 5 comma
17:26 - 2 that's it
17:29 - right so now what output you will get
17:31 - this time Al you get 10 see the
17:33 - multiplication is 10 because this M 52
17:37 - would be replaced by 5 into 2 a into B
17:41 - that is a is 5 b is 2 5 into 2 that is
17:43 - 10 now this point of Time same example
17:47 - we'll take here we are taking 5 - 2
17:50 - comma
17:51 - 7 +
17:54 - 4 this time what you will get - 5 see
17:58 - see multiplication is min -
18:01 - 5 not 33 right now another example what
18:07 - we can take like we want to calculate
18:10 - Max
18:13 - Max and uh a comma B here I'm writing if
18:19 - a greater than
18:21 - b sorry simply write okay after this
18:26 - line we write this thing
18:31 - fine and after that I'm just printing
18:34 - print
18:36 - F A
18:39 - is
18:43 - maximum semicolon after print F put
18:46 - semicolon otherwise it will give error
18:48 - then next line is else same for next
18:53 - line if you want to move to next line
18:55 - the slash then print f B
19:01 - is
19:03 - maximum no slash after the last line
19:07 - right simply now in main end we are
19:12 - calling
19:15 - here we are not printing anything we are
19:18 - simply calling this one M ax sorry M
19:22 - ax and 3A 4
19:30 - semicolon that's it let's run this and
19:33 - see what output you will get see B is
19:37 - maximum because four is B now this A and
19:41 - B would not be
19:42 - replaced right so if you want to replace
19:45 - if you want to print the value then you
19:47 - have to use here percentage
19:49 - D and after that we simply print
19:54 - a and rather than this P percentage d
19:58 - and we simply print
20:01 - B now let me just turn this and show you
20:04 - now this time it will print four is
20:07 - maximum so the main motto is just to
20:09 - show you like you can write down here
20:11 - multiple line also how to you write down
20:14 - just use the slash now if you want to
20:17 - undefine this let's write down here hash
20:21 - unde
20:24 - and
20:26 - Max and after this line again I'm going
20:29 - to call MX Max 5A 4 I don't know it is
20:36 - right or no let me just you know here
20:39 - would be comma and Max would be
20:41 - obviously capital m
20:45 - x now at this point of time we have
20:48 - undefined this mix at this point of time
20:51 - and after undefining I want to access
20:54 - Max I want to access this
20:56 - macro so just run run this and see okay
21:00 - it is giving error implicit Declaration
21:03 - of function me my Max see it would
21:05 - consider it as a now normal function not
21:08 - a macro right UND defin reference to
21:12 - Max fine because we have undefined this
21:16 - one if we remove this
21:20 - line and now we are using this again Max
21:24 - 54
21:26 - then what it will print first for first
21:30 - Macro for this calling four is maximum
21:32 - for second five is maximum so both are
21:35 - working now see I have shown you if you
21:38 - want to undefine Simply write
21:40 - undef only the name of that macro Max
21:44 - that's it no semicolon nothing else so
21:47 - this is how we can use hash Define and
21:49 - hash undefine macros so that is it about
21:53 - hash defin and hash undefined macro now
21:55 - we are some we have some predefined
21:57 - macros also and some other
21:59 - pre-processor commands those commands
22:00 - we'll discuss in the next video so now
22:02 - see in the next video till then bye-bye
22:03 - take care