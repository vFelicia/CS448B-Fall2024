00:00 - so in the series of learning Python
00:01 - programming language previous video was
00:03 - a coding exercise we have designed a log
00:05 - calculator in which we have used if
00:07 - nestedly fails a leave statements
00:09 - because these control statements we have
00:11 - discussed right what is simple if nested
00:14 - if if else necessary fails L if and all
00:16 - we have discussed right so now in this
00:18 - video we'll be talking about A New
00:20 - Concept in Python that is python list
00:23 - right what is list why we use list some
00:27 - features characteristics of list and as
00:30 - well as some functions or you can say
00:32 - methods of list that can be applied on
00:34 - list how to create a list and all we'll
00:37 - be discussing in this video with the
00:38 - help of program practical I'll show you
00:41 - right
00:42 - see first thing ah let me just ask one
00:45 - question if I want to store like one
00:48 - integer suppose I want to store 10 so
00:51 - simply what we do just create a variable
00:53 - like a
00:54 - and is equal to 10 so the stand would be
00:57 - stored here
00:58 - some a is a variable in right simply one
01:03 - name Jenny I want to store one another
01:04 - variable I can take like name name is
01:07 - equal to gen simple this is string this
01:11 - is of integer right same Boolean type we
01:14 - can store same flow type we can store
01:15 - like I am going to store B is equal to
01:17 - 10.10 so this is float but the problem
01:21 - is if I want to store suppose I in my
01:25 - class I have a 15 students so I want to
01:28 - store roll number of 15 students so one
01:31 - method is what
01:32 - the method still now we have discussed
01:34 - is what we can create 10 variables A B C
01:37 - D and in individual we can store one one
01:39 - roll number
01:40 - right but that is I guess not a good eye
01:43 - idea right if suppose I want to store in
01:46 - my class I have 60 students so I'm going
01:48 - to store roll numbers of 60 students and
01:50 - names of 60 students then you have to
01:53 - create 60 variables right because in one
01:55 - variable we can store only one one value
01:58 - right but I guess that is not a good
02:01 - idea to create 60 variables to store 60
02:03 - roll number of 60 students that would be
02:05 - very time consuming length you know code
02:07 - would be very lengthy and error prone
02:09 - code would be there that was not
02:11 - readable many problems will be there so
02:14 - is there any way under a single variable
02:17 - name we can store
02:19 - roll number of 10 student or 60 students
02:22 - or 100 students under a single variable
02:25 - name yes we can do with the help of list
02:28 - right there are other ways also in
02:31 - Python Tuple set dictionary those also
02:33 - will be discussing one by one in later
02:34 - video but here you will be discussing
02:36 - list right so what we can do
02:39 - I can create some simple a variable
02:41 - suppose I am taking row number
02:44 - right and then I can store
02:47 - these square brackets opening brackets
02:49 - roll numbers of 5 10 or 50 or 60
02:52 - students
02:54 - as many students as you want like I'm
02:56 - taking only five students one two three
02:59 - four five and closing square bracket
03:03 - that's it so this is what I list right
03:06 - under a single variable name we have
03:08 - stored these roll number of five
03:10 - students so basically this list is what
03:12 - it's a data structure it's just a way of
03:14 - storing and organizing the data it comes
03:18 - under sequence data type because it
03:20 - contains sequence of you know types of
03:23 - data and see if once list I am creating
03:28 - for names names is equal to
03:31 - like this so this is these are strings
03:34 - these are integers
03:36 - right but we can have mixed type of list
03:40 - suppose in one list I am taking one
03:43 - integer and one is
03:45 - string one is
03:48 - true or false these are Boolean data
03:49 - type
03:50 - 10.10 this is float so uh suppose this I
03:55 - am taking mix underscore list
03:57 - so this is also allowed
03:59 - collection of different different data
04:01 - types also allowed same data type also
04:03 - allowed like uh if you have read the
04:06 - array Concept in C then array is what
04:08 - collection of similar data type
04:09 - homogeneous
04:11 - right so
04:13 - if this integer integer data you want to
04:16 - store then in one array you can store
04:18 - only integer types of data only it's not
04:21 - like that this you this is allowed no
04:22 - but unless it is allowed
04:25 - a mixed list is also possible integer
04:27 - string Boolean float this is valid list
04:30 - this is also valid this is also valid so
04:33 - this is I think very powerful tool of
04:35 - Python language the list and still there
04:38 - are many functions and many you know
04:40 - interesting things we can do with this
04:42 - those also will be discussing so
04:43 - basically list is what you can say it's
04:45 - a container or it's you can say
04:48 - collection of things enclosed in square
04:52 - brackets and separated by comma that is
04:55 - a list it is you can say it's a
04:57 - dynamically sized array not fixed size
05:00 - array dynamically sized array we can say
05:02 - it's just a container or you can say
05:04 - collection of things and list is what
05:07 - are sequence air type because it is this
05:09 - is just a sequence of data it is used to
05:11 - store sequence of various data types and
05:13 - it is not homogeneous need not to be
05:15 - homogeneous right a single list can
05:17 - contain many data types like integer
05:20 - string Boolean float and as well as
05:22 - objects
05:23 - right now some characteristics are of
05:26 - list you can say like but these are
05:28 - ordered list are ordered these items are
05:31 - having a defined order and these orders
05:34 - this order of these items will not
05:37 - change right
05:39 - one more characteristic is what these
05:42 - are new table
05:43 - two words are there mutable immutable
05:45 - simply mutable means in simple words I'm
05:48 - taking can change immutable means cannot
05:51 - change
05:53 - mutable means after creating the list we
05:58 - can alter the list we can change the
06:00 - list we can add some element we can
06:02 - remove some element we can you know
06:04 - change the hair suppose here I have Ram
06:08 - we can change this name I can do this
06:10 - Mohan
06:11 - so this alteration is possible after
06:13 - creating the list so let's start mutable
06:16 - but list are ordered as well as we can
06:19 - access how you can print the list now if
06:22 - I I want to print the store number so
06:24 - simply
06:24 - print and
06:27 - name of the list so it will print this
06:29 - thing output would be something like
06:31 - this one two three four five in these
06:34 - square brackets right
06:36 - but if you want to access individual
06:39 - elements suppose I want to access this
06:40 - three that is also possible using Index
06:43 - right now index is what index of this is
06:46 - index will be started from 0 0 1 2 3 4.
06:50 - why this is from 0
06:53 - it is not you can say position
06:56 - it is you can say offset from the
07:00 - starting position so so from the
07:03 - starting position this is starting
07:04 - position
07:06 - you can say the shifting or offset of
07:09 - the variable so offset of this variable
07:12 - from starting is what nothing it's 0 or
07:15 - shifting is zero so that is why index is
07:17 - 0.
07:18 - shifting of this is from starting
07:20 - position is one then two then three then
07:23 - four that is why
07:25 - index generally starts in programming
07:28 - from zero so for programmers counting
07:31 - starts from zero actually right so using
07:34 - index we can access like uh if I write
07:36 - print
07:38 - roll number and in these brackets just
07:42 - put the index suppose I am putting one
07:45 - so at 1 at this index what is 2 so it
07:49 - will print
07:50 - 2 so you can access individual elements
07:53 - also right and many operation we can
07:56 - perform on list like we can sort the
07:58 - list we can reverse the list we can
07:59 - append more data we can extend the list
08:02 - right we can count
08:04 - the no occurrence of
08:07 - these items in the list we can find out
08:09 - index of individual item in the list you
08:12 - can find out length of the list minimum
08:13 - or maximum from the list many methods
08:16 - are there so those methods will be
08:17 - discussing with the help of a program
08:18 - I'll show you practically right but you
08:22 - don't have to remember all the methods
08:24 - just take a look like because everything
08:28 - is available on this documentation on
08:30 - the Google can you see the python
08:32 - documentation many methods are available
08:34 - so don't have no you don't have to
08:35 - memorize all the methods right just take
08:38 - a look how to yes we can do this thing
08:40 - with list we can do this thing with list
08:41 - right so that you have in your mind yes
08:44 - you can do you can sort the list there
08:45 - is a method you don't have to write that
08:47 - thing right you just Google that method
08:50 - how to you know use that method and
08:52 - that's it and yes one more thing in list
08:55 - list can have duplicates value like five
08:57 - and comma one more item I want to add 2
09:00 - comma one so these are duplicates so
09:03 - this is allowed in set actually actually
09:05 - duplicates are not allowed right but
09:07 - unless you duplicates are allowed right
09:09 - so these are some character the
09:10 - characteristics also uh you know of list
09:13 - so let's see some functions of list
09:17 - so let's create a new file
09:26 - python list Dot py right and we will be
09:30 - taking first of all our list
09:33 - suppose numbers
09:35 - so suppose I have like only four
09:37 - elements 10 0 minus one seven and if you
09:41 - want to print this you can simply print
09:44 - that's it so let me just run this and it
09:47 - will print C
09:49 - this thing with brackets right rather
09:52 - than this if I want to store some names
09:55 - that is also fine you can store
09:59 - like this if you want to store names
10:01 - that is also fine this is also fine if
10:04 - you want to print simply print and
10:07 - names so it will print this list also
10:11 - right as you can see mixed list is also
10:14 - possible like uh if I take a mix
10:16 - underscore list or name and yeah integer
10:20 - then I am going to store like
10:22 - Jenny then I moved to store like
10:27 - true Boolean data type and 10.10
10:30 - something like this and if I print this
10:36 - mix list then it will print
10:41 - okay rather than this we have an error
10:44 - like this p r i n g it's print node p r
10:47 - i n g p r i n t right let's run this so
10:51 - see it is printing this so mix is also
10:54 - possible but now let's comment on these
10:56 - lists and if you want to access
10:58 - individual
11:00 - using index individual you know these
11:03 - items in the list then you can access
11:04 - like number one
11:06 - so now it will print what 0 because at
11:09 - one index 0 is there
11:12 - rather than one if you will if you will
11:15 - write six obviously six is not in this
11:17 - list the index six sixth right so
11:21 - it will give error like list index out
11:24 - of range
11:25 - so you can up to 0 1 2 3 up to three
11:29 - index you can put if you put three then
11:32 - it will print seven right if you want to
11:34 - print one function is like length then
11:37 - you can simply use one function length
11:39 - and in bracket you can simply
11:43 - put the name of the list numbers so see
11:46 - length would be four one two three four
11:49 - right so this is what length but if you
11:53 - want to access
11:55 - like this is something called as slicing
11:59 - but negative indexing is also possible
12:01 - see let me tell you print
12:05 - numbers if I write minus 1 minus 1
12:08 - negative index start from backward so
12:10 - minus one index is for this element
12:13 - seven so it will print seven
12:16 - see
12:17 - if I write minus 2
12:19 - then it will print minus one so minus 1
12:22 - minus 2 minus 3 minus 4 something like
12:23 - this so backward negative indexing is
12:26 - also available in in list now what is
12:29 - list slicing
12:30 - see if I write something like this
12:32 - starting index is 0
12:34 - colon what is length of the list four
12:39 - so if I write 0 colon 4
12:41 - it will print simple the complete list
12:45 - if I do not write this 4 just blank 0
12:48 - nothing so by default it will take 4
12:50 - here it will print
12:52 - the list if I do not write a 0 simply
12:55 - the colon so by default starting is
12:58 - starting point is
12:59 - starting index ending point is length by
13:02 - default these numbers are there so still
13:05 - it will print to the list but if I do
13:08 - string slicing if I write index should
13:11 - be started from 1.
13:12 - and 1 2
13:14 - suppose 3.
13:17 - so one is the index so 0 and 3 is what
13:22 - till third length so one two three mean
13:26 - till minus one so it will print 0 and
13:28 - minus 1 only see
13:30 - 0 and minus 1.
13:33 - right if list is something like this 7 8
13:38 - 10 comma suppose minus 67.
13:43 - and now if I print one two four
13:47 - so see now what it will print
13:51 - index 1
13:53 - 0 from 0 right because at one index 0 is
13:57 - there 0 to
14:00 - this 4 is not index because index so
14:03 - of 0 1 2 3 4 index of 8 is 4 so means
14:09 - you think that it will print till eight
14:12 - no this 4 is what length till 4 length
14:17 - this is length so length would be
14:19 - started from 1 1 2 3 4.
14:23 - so till 7 we have the four length fourth
14:26 - length of the string means length length
14:29 - four of the string so it will print till
14:31 - 7 only so 0 minus one seven
14:34 - right so you can say whatever you will
14:37 - provide here four
14:39 - that minus one index it will print right
14:42 - so means till third index it will print
14:44 - zero one two three third index 7 is
14:48 - having index three right so this is what
14:50 - string slicing if I do not write
14:52 - anything here so from starting from 0 it
14:55 - will print by default last argument is
14:58 - what
15:00 - complete length of the stream right and
15:02 - if I do not put somewhere here and if I
15:05 - write fifth till fifth length it will
15:07 - print so from starting
15:09 - it will print in eight till fifth length
15:12 - and by default it is zero right but one
15:16 - more is what if you want to print the
15:18 - sub list or you can say this is about
15:19 - extended slicing like
15:22 - from 0
15:24 - to length five one more colon and
15:29 - third argument is the steps suppose I am
15:31 - writing here 1.
15:34 - right so one step it will Skip and it
15:36 - will print the next like one step
15:39 - is nothing it will skip so okay let me
15:42 - show you first of all
15:44 - from 0 to fifth length so ten zero minus
15:48 - one seven eight okay but rather than one
15:50 - if I write 2 here then
15:53 - it will jump
15:54 - Two Step C
15:56 - at starting from zeroth index so 10 then
16:00 - steps are two so like from 10 10 to 0 1
16:06 - then 2 so 0 it will Skip and it will
16:09 - print next element minus one then one
16:12 - then two
16:13 - then after second step it is eight so
16:17 - eight it will print
16:18 - till fifth index it should print
16:21 - right so this is what extended slicing
16:23 - if I write here
16:25 - 3.
16:26 - then what it will print 10
16:33 - okay sorry
16:42 - see it will print only 10 and 7 because
16:44 - it would be started from 10 from 0th
16:47 - index 10 then it will skip
16:49 - 2 because third step so one two three at
16:54 - third step we have seven so seven it
16:56 - will print one two three minus 67 but
17:00 - till fifth length we have to print if
17:03 - you do not write five here then by
17:05 - default it will print minus 67 also
17:08 - because till the end it will print right
17:10 - so I hope you got
17:12 - and now some functions like if you want
17:14 - to sort the list so we can simply write
17:18 - what
17:19 - like numbers the list name dot a
17:22 - function we have
17:23 - salt and then we can simply print
17:27 - the list numbers
17:29 - right let's see what happens
17:32 - that would be in sorted order
17:34 - right so duplicates are allowed 10 10 we
17:37 - have I have W duplicates are allowed in
17:39 - list right but if you think directly
17:42 - here I can print like in one line only
17:45 - rather than writing it in two line
17:48 - numbers print so it will print nothing
17:51 - none it will give
17:53 - because this function will return
17:55 - nothing no return type right so we
17:58 - cannot do this thing you have to sort
18:00 - first
18:01 - right
18:04 - and then you have to print the list
18:07 - because it will change this original
18:09 - list only right
18:11 - now one function is reverse so rather
18:14 - than sort we can
18:16 - do reverse
18:18 - right and if I print then it would be
18:21 - reverse of the list minus 67 10 8 7
18:24 - minus 1 0 10.
18:26 - so this reverse will do reverse of the
18:29 - list as the name suggests a length we
18:32 - can find out maximum minimum just you
18:34 - can write down Min and Max so this main
18:38 - function will simply print the minimum
18:40 - from the list if I write like Max then
18:45 - Maxwell return simply the max
18:47 - Max is 10 but one thing we cannot apply
18:51 - this sort on the mix list this will give
18:55 - error if I do something like this
19:07 - if I apply the sort on this mix list
19:11 - having the list is having mixed data
19:14 - type and if I run this then C
19:16 - this less than not supported between
19:18 - instance of string and end because this
19:20 - is int this is string this is Boolean so
19:23 - we cannot compare different different
19:24 - data types so sorting on mixed a mixed
19:28 - list is not allowed right now if you
19:30 - want to add something in the list
19:33 - so there are three methods basically
19:35 - so one is you can append you can use
19:37 - append append means at the end of the
19:40 - list we can add one element at a time
19:44 - one element at a time at the end of the
19:46 - list if you want to add then you can use
19:48 - a pen so how you can use that thing just
19:51 - the list name of the list numbers then
19:55 - dot then append
19:57 - and the value what you want to add 45
20:01 - and after that I am printing this
20:03 - numbers so let's run this see now 45 is
20:07 - at the end of the list right
20:09 - one more append you can 46 47 like this
20:12 - these will be added at the end of the
20:13 - list but at one element at a time so
20:15 - generally what we do we create a you
20:18 - know
20:19 - empty list like numbers just the
20:21 - brackets nothing and then we append the
20:24 - numbers
20:25 - right in the list that also we can do
20:28 - so next is you can insert but at
20:30 - specific position I want to insert a
20:32 - data node at the end specific index like
20:36 - at second index third index then we can
20:38 - use insert function
20:40 - so here what we can do like numbers
20:42 - rather than append
20:43 - we can do insert but in append we pass
20:47 - only one argument the value you want to
20:48 - add but here you will pass two argument
20:50 - first argument is at which index you
20:52 - want to add suppose that uh Second index
20:55 - I want to add right comma what you want
20:59 - to add 45 or I want to add at second
21:03 - means 0 1 2 means here at second index
21:06 - 45 would be added and this would be
21:10 - shifted to right side
21:12 - all the data let me just run this and
21:15 - that you then you will get it below see
21:16 - 10 0 then 45
21:20 - right at second index then minus one
21:22 - seven eight it's not like that we will
21:25 - replace this minus 1 because that second
21:28 - index minus 1 is there maybe you will
21:30 - think it would be replaced with 45 no it
21:33 - will add 45.
21:35 - minus 1 would be still in the list and
21:37 - would be right shifted so this is our
21:39 - particular position you can insert one
21:41 - is if I want to
21:43 - add more than one data at one at same
21:46 - time
21:47 - right
21:48 - then using a pen we can only add one
21:51 - data using insert also we can at one
21:53 - time we can add only one data yes you
21:55 - can use insert in third and set to do
21:57 - three times if you want to add two to
21:58 - three items but at the same time you
22:01 - want to add three items then one
22:03 - function is extend so that you can do
22:08 - extend and in bracket now we can pass
22:11 - list
22:13 - like I want to add 45 46 47
22:19 - 8
22:21 - 9
22:23 - this list I want to add and simply we
22:25 - just print the numbers now see
22:28 - this list now extended at the end of
22:32 - course minus 67 45 46 47 for 78 89 this
22:35 - list would be added
22:37 - more than one item but
22:39 - at the end of the list
22:41 - extend also add at the end of the list
22:43 - more than one item append will add at
22:46 - the end of end of the list at only one
22:48 - item at a single time at one time right
22:50 - so this is what extended list now right
22:53 - one more thing what we can do like if
22:56 - you want to change
22:58 - like At first index I have 0 but I want
23:01 - to change the zero so what we can do
23:03 - like numbers the name of the list then
23:08 - at which index you want to change the
23:09 - data
23:10 - first index
23:12 - what you want to insert now rather than
23:14 - 0 I want to insert suppose 45 here and
23:17 - now I'll print numbers
23:19 - so this at the place of zero now I have
23:22 - 45 in the list right
23:25 - so this is how you can change the list
23:27 - so that is why I told you list our new
23:30 - table we can alter the list after
23:32 - creation of the list we can add change
23:34 - the data and remove and remove the data
23:37 - now I want to remove something
23:40 - okay now one more thing if
23:43 - I want if I do something like this
23:47 - index 1 2
23:50 - 4. one two four
23:53 - means one two three three element I want
23:57 - to add so if I do something like this 45
24:02 - 46
24:04 - 47.
24:08 - now what will happen C
24:12 - these three elements
24:14 - from the index is 1 and this 4 is what
24:17 - not in the X this is length
24:19 - till fourth length means till Index this
24:22 - length minus 1 till third index
24:25 - so it is first index second index third
24:28 - index 45 46 47 rather than 0 minus one
24:31 - and seven and all the other elements
24:33 - would be same
24:35 - right so you can modify more than one
24:37 - item also you just have to provide the
24:39 - range
24:40 - where you want to modify
24:42 - right now if you want to remove
24:44 - something then we have two methods
24:46 - remove as well as Pop
24:48 - remove will search the item and just
24:51 - remove it will not return anything
24:54 - so like
24:57 - sorry first the name of the list numbers
25:01 - dot remove
25:04 - and in bracket we will pass the value
25:06 - the item you want to remove right so
25:10 - suppose I want to remove 0 from this
25:13 - this list
25:15 - so let's run this
25:17 - C
25:19 - 0 is not there now see maybe you are
25:22 - thinking we have modified this list here
25:23 - like extend and all but I have just
25:25 - commented out these line so original
25:27 - list is now
25:29 - this right and on this all only I am
25:33 - performing this remove operation so it
25:35 - will not return anything it will just
25:37 - search the item and remove but it will
25:39 - remove the first occurrence of that
25:41 - letter suppose here I have one more zero
25:44 - two zero are there and now I am removing
25:47 - zero let's run this but still in the
25:49 - list we have 0 but first occurrence
25:52 - it will search from starting it will
25:55 - find 0 here it will remove 0 and it will
25:58 - print the list it will not remove this
26:00 - zero removal remove only first
26:03 - occurrence of that letter right
26:06 - now
26:07 - pop
26:10 - number stored pop
26:13 - yeah it will return what pop means it
26:17 - will chop off the remove the last
26:20 - element by default the last element of
26:22 - the list
26:23 - so if now I print numbers then see now
26:28 - then there is the last zero has been
26:31 - removed so Pope will remove the last
26:33 - zero and if it will remove that it will
26:36 - remove as well as it will return that
26:38 - element so if I want to print
26:41 - what this Pope
26:43 - has removed from the list so it will
26:45 - print that element also it will return
26:47 - that element C
26:48 - 0.
26:50 - 0 has been removed and after that we
26:52 - have printed the list
26:53 - right but if you want to remove specific
26:56 - element then you just pass the index in
26:58 - this box
26:59 - suppose I I want to remove
27:02 - not the last zero this is zero so index
27:06 - of this zero is one now let me just run
27:09 - this see now it has removed zero but but
27:13 - from first index last zero is as it is
27:16 - right so just pass the index if I pass 5
27:21 - so it will
27:23 - delete this file this L this 10 at the
27:27 - fifth Index this 10 is there so it will
27:29 - remove the sand it will print the list
27:30 - so this is how pop
27:33 - will work
27:35 - and there are many methods see as you
27:37 - can see here this this uh the python
27:41 - documentation of python here there are
27:43 - many methods like appendix stand insert
27:45 - remove pop clear index count sort
27:49 - reverse copy and how to use these method
27:51 - with one example they have given
27:53 - so don't do not have to memorize these
27:56 - methods you can just search but you just
27:58 - have to go through these methods yeah we
28:00 - can can you reverse a string
28:03 - then you have in your mind yes you
28:06 - should know you can reverse the string
28:07 - and
28:08 - then how to reverse that you can simply
28:10 - search so you just try out these methods
28:13 - this count will return the number of
28:14 - times that item appears in the list so
28:17 - this you have to
28:18 - try out index
28:21 - if you find out the index of a
28:23 - particular item in the list then also
28:25 - you can find out right
28:28 - clear will remove all the element from
28:30 - the list
28:31 - so if you want to count like numbers
28:33 - don't count how many times 0 is there in
28:36 - the list so you can just run this and 0
28:38 - is 2 times right so count will just
28:41 - return the number of times the item is
28:43 - present in the list so I hope you got
28:45 - what our list why List have been
28:46 - introduced what are the advantages
28:47 - benefits of list what are some methods
28:50 - of list at all you have got everything
28:52 - right so in the next video we'll be
28:54 - seeing what is random module and then
28:56 - we'll see you on coding exercise so now
28:58 - I'll show you the next video till number
28:59 - bye take care