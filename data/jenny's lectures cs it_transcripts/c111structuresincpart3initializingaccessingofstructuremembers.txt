00:00 - so in the series of learning c
00:01 - programming we are discussing structures
00:03 - in c in the previous video we have
00:04 - discussed how to declare variable of a
00:07 - structure or you can see how to declare
00:09 - object of a structure so now in this
00:11 - video we will see how to initialize
00:12 - the structure and how to access the
00:14 - members of the structure how to assign
00:16 - values to the structure members like we
00:19 - have taken roll number name marks how to
00:21 - assign the values to roll number like
00:23 - problem is equal to one how we are going
00:25 - to initialize those members right and
00:28 - now how we will access those members and
00:30 - how we are going to print the values
00:31 - whatever you have assigned compile time
00:33 - initialization as well as runtime
00:35 - initialization both we will discuss with
00:37 - the help of a program but before they
00:38 - just want to tell you one thing if you
00:40 - are preparing for gay 2022 examination
00:42 - then academy brings you the gate yoda's
00:44 - free test cds targeting gate 2022
00:48 - this three test series consists of three
00:51 - rounds in round one you will get 15
00:53 - question
00:54 - and time limit would be
00:55 - 45 minutes round 2 will have 30
00:57 - questions to be sold in 90 minutes and
01:00 - final round will be having 65 questions
01:02 - and time limit would be 180 minutes
01:05 - so these tests are designed to help you
01:07 - to track your overall preparation for
01:09 - gate examination and you can take these
01:11 - tests for free one more thing they are
01:13 - also going to conduct a scholarship test
01:15 - for gate and esc that would be on 21st
01:17 - of november
01:18 - so here you can compete with thousands
01:20 - of learners and you stand a chance to
01:21 - win up to 100 percent scholarship you
01:24 - will get in the test you guys you will
01:25 - get 20 questions and those quest
01:27 - questions has been curated by their best
01:29 - gate and esc educators
01:31 - and the time limit would be 60 minutes
01:34 - so you can assess your gate preparation
01:35 - in just 60 minutes you can see how you
01:38 - rank against all the others from all
01:39 - over india on
01:41 - live lead reward that would be updated
01:43 - after every question so you can measure
01:45 - your progress with the help of
01:46 - personalized scoring and waiting that
01:47 - could be given to you and after every
01:49 - contest detailed video solutions would
01:50 - be given to you by their experts so you
01:52 - can identify your weak areas and you can
01:54 - improve and so that you you get it right
01:56 - next time and you can take this test for
01:58 - free you just have to enroll the
01:59 - enrollment link i'll put in the
02:00 - description box of this video just click
02:02 - to that link scroll down pick up the
02:04 - right test for you and
02:06 - just click enroll and use my code jkl10
02:08 - uh to unlock the test and if you take
02:11 - the scholarship test live then you will
02:12 - also get a chance to win some exciting
02:14 - prizes so the relevant links and the
02:16 - details i'll put in the description box
02:17 - of this video you can go and check out
02:19 - so now let's see how to initialize that
02:23 - structure
02:24 - let us take the the example that we have
02:26 - taken in the previous video
02:28 - so how you can declare the variable of
02:29 - the stereotype because the structure and
02:31 - this is all user-defined type or you can
02:33 - have to declare the object just write it
02:35 - the name of this data type struct stored
02:37 - in this complete is data type struct
02:38 - student now the name of the variable i'm
02:40 - taking suppose
02:41 - s
02:43 - right so how we will initialize these
02:45 - members like i want to take values in
02:48 - these members these are structural
02:50 - members so can i write here roll number
02:52 - is equal to 1 this would be wrong
02:54 - because we cannot initialize here this
02:56 - is what just a template here memory has
02:58 - not been allocated so i cannot store any
03:00 - value so that would be wrong so how you
03:02 - will initialize
03:04 - like here what i can write
03:06 - while declaring this object this
03:08 - variable of this structure
03:10 - here only you can initialize this is
03:12 - compile time initialization same like we
03:14 - can take here what if you take into a if
03:17 - you want to initialize this at compile
03:18 - time directly write down
03:20 - and a is equal to 5
03:22 - if i take like
03:24 - can
03:25 - name is equal to 20 any variable simple
03:27 - variable so here simply you can write
03:29 - down like name is equal to
03:31 - j
03:32 - this is what compile time initialization
03:33 - so same here you can initialize
03:36 - but here
03:37 - how many values you are supposed to
03:38 - initialize one is roll number then name
03:40 - then marks
03:42 - so first is what roll number so i am
03:44 - going to write one comma
03:47 - name
03:48 - that would be string suppose i am
03:49 - writing
03:50 - jenny coma
03:52 - then marks i am writing suppose marks
03:54 - are 90.91
03:57 - and semicolon
03:58 - this is what simple compile time
04:00 - initialization of
04:02 - these members that's it
04:04 - at runtime also you can initialize using
04:06 - printf and scan that also will discuss
04:08 - right
04:09 - now
04:10 - one thing you need to take care about
04:12 - this some rules of this initialization
04:14 - is what this order would be same
04:16 - if first is in
04:18 - first should be in next one is string
04:20 - then string float hair float means the
04:24 - order should match
04:25 - if you write here like
04:27 - first time writing jenny then 1 then 90
04:30 - point this this
04:31 - then it would be wrong
04:33 - maybe it will give some garbage value it
04:35 - will you know give some error
04:37 - because this is first
04:39 - what it is expecting integer value but
04:41 - you are providing j that is string
04:43 - so how it will store this value so the
04:46 - poorest this order should match this is
04:48 - the first point second point is what
04:51 - if
04:53 - you are not initializing like here i am
04:55 - writing only one
04:58 - this is what partial initialization so
05:00 - this one first
05:02 - this value first of all obviously should
05:04 - be assigned to this first
05:06 - variable so roll number would be one
05:09 - and the remaining would be what
05:11 - null automatically the compiler will
05:13 - will initialize these
05:15 - string to null this float to zero by
05:18 - default intent float would be
05:19 - initialized with a zero and the string
05:21 - and character would be initialized with
05:23 - null
05:25 - right
05:26 - so now next
05:28 - point about this is what
05:30 - if you don't want an initial don't want
05:32 - to take this variable here you can
05:34 - just omit this and here only i want to
05:37 - declare the variable so here also you
05:40 - can initialize like s is equal to
05:43 - here you can write 1
05:45 - jenny
05:47 - and suppose 90.91 and semicolon
05:50 - that is also fine
05:53 - right
05:54 - now what you can do
05:56 - if you want to take suppose two
05:59 - variables
06:00 - two objects s1 and s2
06:02 - so here how you will take like it's not
06:04 - like that here i am taking s1
06:06 - then initialize it and after that i am
06:08 - writing s2 and the values that would be
06:11 - wrong
06:12 - right because we have used the semicolon
06:14 - after that this s2
06:16 - would not be considered as object of
06:18 - this structure the variable of this data
06:19 - type this this structure right
06:22 - so now how you can do that thing suppose
06:25 - i am taking here two
06:28 - variables
06:31 - like s1 equal to here you can initialize
06:34 - and another is struct student
06:38 - s2
06:40 - i'm just writing the values some values
06:42 - here
06:43 - this is also fine
06:44 - you can take how many
06:46 - you know
06:47 - variables how many objects you want s 1
06:49 - s 2 s 3 4 5 6 it's up to you right but
06:53 - suppose if you want to take like 60
06:55 - variables or you can say i want to store
06:58 - information of 60 students so it's not a
07:00 - good idea to take s 1 s 2 s 3 up to 60
07:02 - variables no
07:04 - that i will take array array of this
07:07 - object that will discuss in next video
07:09 - right
07:10 - now
07:10 - one more thing about this is what if you
07:13 - will take something like this this is
07:14 - also fine right
07:16 - so now and if you want to take here like
07:18 - one variable here s
07:20 - here you can initialize that variable
07:22 - like s is equal to 3 or in like 35 and
07:26 - name is you like
07:28 - ankur
07:30 - suppose i am taking here sorry marks are
07:32 - suppose i'm taking 70.
07:34 - that is also fine three object we have
07:35 - created s
07:37 - s s one and s two right
07:40 - before you know outside this main also
07:42 - you can
07:43 - write down like i am not writing this
07:44 - main function
07:46 - and after just writing this
07:49 - s you can write one variable like this
07:51 - and after this you just write down these
07:52 - two statements and so three variables
07:54 - will be created one is s s one and s2
07:58 - right so it's not compulsory that you
08:01 - are supposed to write down this these
08:02 - statements in main only outside main
08:04 - also
08:05 - you can initialize you can declare the
08:07 - variables of the structure that is also
08:09 - fine
08:10 - like if you take outside main
08:12 - like
08:13 - i'm
08:14 - declaring this structure outside this
08:15 - main so this is not global you can
08:18 - access this this structure in any
08:20 - function in main function or suppose you
08:22 - have in your program you have two three
08:24 - more functions
08:25 - there also you can use this one
08:27 - in every function you can declare these
08:30 - type of variables
08:32 - right and you can access these members
08:34 - right so i hope this is clear how to
08:35 - initialize these
08:37 - members of the structure how to
08:38 - initialize this structure
08:40 - right
08:41 - and some rules about initialization of
08:43 - the structure like order should match
08:45 - if you don't write down the all the
08:47 - values like i am writing only one so
08:49 - this one would be assigned to this roll
08:50 - number
08:52 - you but this is partial initialization
08:54 - but if you are doing partially
08:55 - initialization then
08:57 - the first
08:58 - these members should be initialized you
09:00 - can leave
09:01 - the end members like it's not like that
09:04 - here i want to initialize i want to you
09:06 - know initialize only marks not roll
09:07 - number and name so i'll write 90.91
09:11 - so it will be initialized the marks
09:13 - would be this and this would be zero and
09:14 - now no
09:16 - by default it is the first first value
09:18 - that would be given to the first member
09:20 - hero number would be
09:22 - this 90 it is integer so maybe it will
09:24 - take 90 only not float
09:26 - or maybe it will take some garbage value
09:28 - this you need to take care right
09:30 - now how to access these members suppose
09:33 - i want to print i have initialized this
09:36 - thing right and i have taken only
09:40 - these two
09:42 - objects like s1 and s2 and i want to
09:43 - print these values so what you will
09:46 - write
09:47 - printf
09:48 - percentage d
09:50 - and
09:52 - see this individual name roll number you
09:54 - cannot write down here roll number
09:56 - and it will print some value like roll
09:58 - number value which roller it will print
10:00 - simple roll number it it doesn't have
10:02 - any meaning
10:03 - you cannot access these members
10:05 - by writing the name only the name of the
10:07 - variable only
10:08 - these are not simple variable you are
10:10 - supposed to link
10:12 - these
10:13 - variable name
10:14 - with the structure with the structure
10:16 - object right if i write here like
10:21 - s1 dot
10:22 - roll number
10:25 - yeah now this is having some meaning it
10:27 - is what roll number of
10:30 - s1 so it is a variable representing what
10:32 - roll number of s1
10:34 - fine so this is how you can access these
10:37 - members
10:38 - object name
10:39 - dot operator or it is known as member
10:41 - operator
10:43 - then
10:43 - the member name structure member name
10:46 - right
10:47 - so if you are going to print this s1 dot
10:49 - roll number so it will print s1 dot roll
10:51 - number means
10:52 - one
10:53 - right here we have
10:55 - in memory for s1 and s2 s1
10:59 - roll number is 1
11:00 - this is what roll number
11:02 - this is for name and this space is for
11:06 - marks
11:07 - same for s2
11:10 - row number
11:13 - name
11:15 - and marks
11:16 - so here we have roll number one but
11:19 - these two value we haven't initialized
11:20 - so this will take null and this will
11:22 - take 0.
11:23 - so if you will print s1 dot name it will
11:25 - print null it will not print anything s
11:28 - one dot marks it will print zero zero
11:30 - point zero zero zero like this because
11:32 - it is float
11:33 - right
11:34 - in s2 we have in roll number we have two
11:37 - in name we have gia and here we have
11:39 - mark 85 so how you will print this
11:41 - information
11:43 - simply you can write down here s2 dot
11:44 - roll number
11:46 - so it will print now 2
11:48 - s2 dot name percentage s s2 dot name it
11:51 - will print gia
11:52 - s2 dot
11:54 - max percentage f s two root marks it
11:56 - will print eighty five point zero zero
11:58 - zero to six zeros after decimal
12:01 - right so this is how you can access
12:03 - these members using dot operator this is
12:05 - very important
12:06 - right and here you can also initialize
12:10 - these members suppose i will not i am
12:12 - not going to initialize here
12:14 - this thing
12:15 - right simply s1 s2 is this so what you
12:18 - can write
12:19 - s1 is equal to s2
12:22 - this will work you can copy these values
12:25 - so whatever the value in s2
12:28 - these value would be copied for s1 also
12:31 - so in s1 also now we have 2
12:33 - we have here gr
12:35 - and here we have 85
12:38 - same values we have
12:40 - so that's fine to you
12:42 - next
12:43 - some point is what
12:46 - s one dot roll number this is also fine
12:48 - no number is equal to one
12:50 - s one dot name is equal to
12:54 - jenny
12:55 - and s one dot
12:56 - marks is equal to
12:58 - ninety so individual members also you
13:00 - can initialize but
13:02 - like this
13:04 - not here
13:05 - so at this point time point of time s
13:06 - one roll number is equal to one here we
13:08 - have jenny
13:09 - and marks we have
13:11 - ninety
13:13 - right
13:14 - using printf and scanf so this is what
13:16 - compile time initialization now what
13:18 - about
13:19 - run time initialization using printf and
13:22 - scanf you can take these values like uh
13:25 - you can write down here printf
13:29 - enter
13:31 - information for
13:33 - s1
13:35 - right so i am simply writing scan f scan
13:38 - f is equal to percentage d
13:41 - address of what
13:43 - s one dot
13:45 - row number not s address of roll number
13:47 - s1 dot roll number
13:49 - next scanf
13:51 - percentage s at address of
13:54 - s1 dot
13:56 - name
13:57 - and same scanf percentage f
14:00 - as address of s1 dot marks so this is
14:03 - how it run time you can initialize at
14:05 - the run time it will ask from the user
14:07 - like enter information for s1 and then
14:09 - you will enter and after that you can
14:11 - print how you can print that we already
14:13 - discussed
14:15 - and here uh like at the place of if you
14:18 - write down here string so you can omit
14:20 - this address of operator you can simply
14:21 - write down s1 dot name that is also fine
14:24 - right
14:25 - now
14:26 - uh next is what
14:28 - see you can write down here if you are
14:30 - not entering this information
14:32 - and if you want to copy this information
14:34 - in s1 so s1 is equal to s2 that is fine
14:37 - but
14:38 - this is valid only because this s1 and
14:40 - s2 are of same type
14:42 - struct student the data type is same
14:46 - if we have one more structure
14:48 - like struct employee
14:50 - right and struct employee we have
14:53 - declared a variable e and struck student
14:55 - s1
14:57 - or structure and s2 in that case we
14:58 - cannot write e is equal to s2 that would
15:00 - be wrong
15:02 - these are of same type this is why this
15:04 - copy allowed copy of these
15:08 - object
15:09 - values are allowed
15:10 - see suppose i am taking here 1
15:14 - and jenny and
15:16 - 90.
15:18 - see one thing you cannot compare these
15:20 - objects like s1 greater than s2 or s1
15:24 - less than s2 this would be wrong how you
15:26 - can compare these objects right or you
15:29 - can say s1 equal to equal to s2 this
15:31 - equality condition we cannot check check
15:33 - s1 not equal to s2 this would not be
15:35 - allowed
15:36 - right yeah but you can compare
15:38 - individual
15:40 - members of these
15:42 - objects how see i can write here
15:46 - if s1 dot
15:48 - row number
15:50 - less than
15:51 - s2 dot
15:54 - roll number here simply you can write
15:56 - something like
15:57 - i just print print f hi
16:02 - yeah that is fine
16:03 - s one dot row number is what one s two
16:05 - dot number is what two is this condition
16:07 - true
16:08 - one less than two yes condition two so
16:10 - it will print high
16:12 - individual members you can compare marks
16:15 - you can compare this string you can
16:16 - compare using string compare function
16:19 - right
16:20 - but these objects directly you cannot
16:22 - compare right
16:24 - so now i hope this is clear to you how
16:26 - to initialize the structure how to
16:28 - access these members of the structure
16:30 - right
16:31 - so now let me show you practically this
16:33 - thing on my laptop let me take a simple
16:35 - program i will show you so now let me
16:37 - create a file
16:40 - structure
16:43 - one dot c
16:44 - okay
16:50 - here we'll take
16:52 - struct name i'm taking student
16:58 - and i'm taking into
17:01 - roll number then
17:08 - name
17:15 - marks right
17:20 - and in main only i am taking
17:23 - i'm declaring
17:25 - struck student s1
17:28 - right and i'm initializing this here
17:30 - like first we have roll number then one
17:33 - then string so jenny
17:36 - then i'm taking like
17:38 - marks 90.
17:44 - struct student second is what s2
17:47 - is equal to roll number i'm taking 2
17:50 - then
17:51 - name
17:54 - g i and mark suppose i'm taking 85
17:58 - right
17:59 - so now if you want to print this printf
18:11 - information for
18:13 - s1
18:15 - this you want to print
18:17 - right
18:18 - so what it will be printed
18:20 - printf
18:24 - you'll write here first is what
18:25 - percentage d
18:27 - then
18:28 - percentage s
18:30 - then percentage f
18:33 - right
18:34 - and i am printing s one dot
18:38 - the name
18:44 - then s1 dot
18:46 - name
18:48 - then
18:49 - s1 dot
18:52 - marks
18:55 - right
18:57 - same for s2 you can print this thing
19:03 - but for s2 like you can you are supposed
19:05 - to write what s2
19:08 - here also s2
19:11 - name of the object s2
19:13 - right
19:14 - and here i am writing printf
19:20 - info
19:23 - 4s2
19:24 - i am writing
19:27 - right
19:28 - this is what compile time initialization
19:30 - now let me just run this and see what
19:32 - you are getting oh this is error
19:34 - struct
19:36 - right
19:40 - now okay now one error is what here we
19:42 - are supposed to write semicolon
19:46 - now let me just run this and see what
19:47 - you're getting
19:52 - c in four four s one is one jenny
19:54 - nineteen four four s two is two g and
19:56 - eighty five this is how you can access
19:57 - this is called compile time
19:58 - initialization if i'm not writing
20:00 - anything here like
20:02 - i'm not writing anything in s2 and i'm
20:04 - here i am writing s2 is equal to
20:07 - s1
20:08 - right and now let me just run this and
20:11 - see what output are getting for every
20:13 - for s1 and s2 same information 1 jenny
20:15 - 91 jenny 90
20:17 - right so this is fine
20:19 - here also you can write down like i am
20:21 - writing any name s
20:23 - s equal to you can initialize it
20:25 - something like this
20:26 - i am taking only row number
20:28 - that's it
20:30 - and
20:31 - here i am printing the information for s
20:34 - also
20:37 - like info for
20:39 - s3 i am taking suppose
20:41 - this is s3
20:44 - right
20:49 - yes
20:51 - three
20:53 - so info for s3 is what
20:55 - has
20:56 - three dot roll number
20:58 - then s3
21:00 - and here also has 3
21:02 - right
21:05 - now let me just save it and run it see
21:08 - what output you are getting
21:11 - see for s1 s2 both are same for s3 only
21:14 - 2 you are getting then name at the place
21:16 - of name it's blank because it's null it
21:19 - is not printing anything and for marks
21:21 - it is float 0.000
21:24 - okay because you have initialized only
21:25 - row number two but here if you write
21:27 - here suppose name
21:29 - like i am writing here pile
21:33 - and now
21:34 - let me just run this and see what output
21:36 - you get
21:38 - see
21:39 - here some garbage value
21:41 - then nothing
21:42 - then
21:43 - 0
21:45 - because pile is what string and first is
21:47 - what it is supposed to be integer so it
21:49 - is printing any garbage value
21:51 - now name is what obviously null
21:54 - and marks would also be null sorry a 0
21:57 - right so this is what some garbage value
21:59 - then null and then 0
22:02 - right
22:03 - so order you are supposed to match
22:05 - first is roll number so one first value
22:07 - should be integer suppose i am writing
22:09 - at 3 that is fine
22:11 - now next
22:12 - next what you can write here if you
22:14 - don't want to declare these these values
22:16 - in main you can declare these
22:19 - outside main
22:21 - here
22:23 - that is also fine but now
22:25 - see
22:27 - what output you will get
22:30 - see for s1 and s2 same because we are
22:33 - writing s2 is equal to s1 and for s3
22:36 - only 3 that's it
22:38 - so outside main also you can
22:40 - take these
22:42 - objects
22:44 - right
22:46 - next point was what
22:49 - using scanf have you can take right
22:52 - so for roll number for s2 i'm going to
22:55 - take
22:56 - printf
23:01 - enter info for
23:04 - s2
23:05 - this i'll take using scanf so what you
23:07 - can write scanf
23:09 - percentage d
23:11 - and
23:12 - what address of
23:13 - s
23:14 - 2 dot
23:17 - roll number
23:19 - right
23:26 - and then
23:27 - in the same line i am writing percentage
23:28 - s
23:30 - and uh
23:31 - percentage f so address of s to dot
23:34 - number
23:35 - then comma s2 dot
23:38 - name
23:39 - then comma s2 dot
23:43 - max
23:44 - right and after that i am printing this
23:48 - so i am just deleting this line
23:55 - now let me run this and see what output
23:57 - you get
23:58 - see first it is asking enter info for s2
24:01 - so
24:02 - first is what roll number
24:06 - next would be name suppose i am writing
24:08 - here
24:09 - akash
24:11 - next would be marks for 45 or 54
24:16 - it should be address of s2 dot marks
24:19 - right
24:22 - now let me just run this and see what
24:23 - output you get
24:26 - information for s2 row number is 3
24:28 - name is what suppose j k marks 56 see
24:33 - for s1
24:34 - one gen in this for s2 roll number we
24:36 - have entered what
24:38 - three
24:39 - name is jk and max 561 does this n for
24:42 - s3 obviously we have initialized in
24:44 - three only so using scanf also you can
24:45 - take this runtime initialization of this
24:48 - ah you know members of this structure
24:50 - right so i guess this is fine all the
24:52 - points we have cleared
24:54 - so now in the next we will see how to
24:55 - take array of these structure objects
24:59 - in the next video till then bye take
25:00 - care