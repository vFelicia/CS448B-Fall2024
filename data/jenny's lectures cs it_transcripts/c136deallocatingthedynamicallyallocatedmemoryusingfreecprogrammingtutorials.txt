00:00 - so in the series of running c
00:01 - programming we are discussing dynamic
00:02 - memory and location in c
00:04 - in the previous videos we have discussed
00:06 - all the three functions that has been
00:07 - used to
00:08 - locate memory dynamically
00:10 - those are malloc and real now one
00:13 - function is to deal locate memory to
00:15 - diallocate the dynamically allocated
00:17 - memory or to release that memory that is
00:19 - free function in c language the function
00:22 - is free so in this video we will talk
00:23 - about this function right so i am not
00:25 - going to talk about the you know on the
00:26 - surface detail like what is free
00:27 - function the syntax and i'll just show
00:29 - you a simple program no
00:31 - we'll deep down into the working of this
00:33 - function what actually you know this
00:36 - free function do
00:38 - freeing of memory or releasing of the
00:39 - memory what exactly this means what is
00:42 - behind the process what happens when you
00:44 - use free function in your program right
00:47 - what exactly that means right and after
00:50 - freeing the memory if you want to
00:52 - dereference the pointer if you want to
00:54 - access that memory again then what
00:55 - happens
00:56 - we will see all these things with the
00:58 - help of a program right i'll show you
00:59 - practical also this is so this video is
01:01 - going to be very very
01:02 - you know important for you guys fine now
01:05 - before that just want to tell you one
01:06 - thing if you guys are planning to
01:08 - prepare for gate 2023 and 2024 exam then
01:11 - an academy is coming up with coming up
01:13 - with a great opportunity for you guys
01:16 - an academy is conducting a scholarship
01:18 - test for gate and esc
01:20 - it is all india scholarship tests for
01:23 - all the gate 2023 and 2020 for exams
01:27 - the most important thing is you can take
01:29 - this test for free it is a live test and
01:32 - it would be conducted on
01:34 - 20 march at 11 am
01:37 - as it is all india live scholarship test
01:40 - so you will compete live with learners
01:42 - from all over the country and you also
01:45 - get a chance to have all india rank
01:48 - and the slaves for this test is
01:51 - simple general aptitude and engineering
01:53 - mathematics so here if you attempt it
01:56 - live you can get a chance to win up to
01:58 - 100 percent scholarship
02:00 - so now what is the format of this test
02:03 - here you will get 50 question carrying
02:05 - one mark each the syllabus is general
02:08 - aptitude and engineering mathematics
02:11 - right
02:12 - and
02:13 - there is no negative marking and the
02:15 - duration of the test is 60 minutes so
02:17 - now how can you enroll for this test see
02:20 - the enrollment link or the registration
02:22 - link i'll put in the description box of
02:24 - this video you just go to that link
02:26 - click to that link and this type of
02:28 - screen will be opened in front of you
02:30 - and that's it here you just enter you
02:32 - can enroll with your mobile number also
02:34 - or your mail id also you can enter your
02:36 - mobile number and just you can click
02:38 - enroll for free so the relevant links
02:40 - and details i'll put in the description
02:42 - box of this video if you are interested
02:44 - you can go and check out now let's see
02:46 - what is free function
02:48 - so what free function do it will release
02:53 - release the dynamically allocated memory
02:56 - and how you can allocate a memory
02:57 - dynamically using mellow core maybe you
03:00 - are using real so that memory it is
03:03 - going to release right now it is
03:05 - built-in function defined in stdlib
03:09 - now see one question is what
03:11 - how to use this function let's see the
03:13 - syntax first
03:14 - you just write down this free and
03:17 - the pointer
03:20 - previously you have a located memory
03:21 - dynamically obviously that using mellow
03:23 - core callo and whatever the address that
03:26 - malloc or galock will return you're
03:27 - going to store that address into a
03:28 - pointer so just pass that pointer here
03:32 - and the return type of this is void only
03:34 - it is not going to return anything void
03:37 - right so if pointer is ptr suppose i
03:39 - have written this thing int
03:42 - asterisk
03:43 - malloc and 2 into sizeofint for two in
03:46 - teaser i have a located memory
03:48 - dynamically now i want to free this
03:50 - memory and i have taken int star ptr i'm
03:54 - going to store this thing in ptr so just
03:56 - how to use after doing something on this
04:00 - you know
04:01 - after doing some computational
04:02 - calculation on these integers just free
04:03 - the memory
04:05 - free and just pass the pointer name ptr
04:07 - that's it
04:09 - now what does this exactly means
04:12 - first thing
04:13 - see
04:14 - so data is suppose from the heap section
04:18 - this is heap section
04:19 - and this is the memory two entities are
04:21 - i have stored ten and two
04:23 - right i have done something with these
04:25 - integers right now the base address in
04:29 - ptr
04:31 - suppose base address is thousand
04:34 - it will return the address of the first
04:36 - byte so that ptr we are going to store
04:39 - right
04:40 - now once you do free ptr
04:42 - means you have freed this memory you
04:44 - have released this dynamically allocated
04:47 - memory and back to heat
04:50 - this memory now is back to heap section
04:53 - right
04:54 - back to heap section right
04:57 - so now you have released this memory
05:00 - but still still in ptr we have 1000
05:05 - right
05:06 - right
05:07 - this memory can be reused
05:10 - right now what does that mean another if
05:14 - after free i'm using another malloc or
05:16 - catalog function and i'm going to you
05:18 - know enter like now five into size of it
05:21 - for five integer so maybe this memory
05:23 - below can be reused this is for two then
05:26 - one two three four three
05:28 - right this is how dynamically you can
05:30 - allocate and reallocate memory now
05:33 - the question is
05:35 - will this free
05:36 - function erase the previous data
05:40 - the simple and straightforward answer is
05:42 - no
05:44 - it is not going to erase the previous
05:46 - data here
05:48 - so now second question is
05:50 - can you access after frame
05:53 - can you access the data again if after
05:56 - freeing this memory if i want to print
05:59 - like
06:00 - printf
06:02 - percentage d and strict
06:05 - ptr plus
06:07 - 1
06:10 - means 0 index 1 index so
06:13 - will it print 2
06:16 - or not after freeing
06:18 - this
06:20 - so answer is simple answer is it will
06:23 - show undefined behavior
06:27 - undefined behavior means first thing
06:31 - it is not allowed to use the pointer
06:34 - after you have freed that pointer
06:36 - right
06:38 - because maybe
06:39 - you can get two hair maybe you can get
06:42 - garbage value maybe
06:44 - your program can crash or anything can
06:46 - happen so that is why i am saying it
06:48 - will show undefined behavior maybe you
06:50 - will get value too
06:51 - and you will say that after freeing also
06:53 - i am able to access the
06:55 - value
06:56 - so how it is possible yes it is possible
06:58 - it comes under the case of undefined
07:01 - behavior
07:03 - maybe you can get zero or the same value
07:05 - or any garbage value minus value
07:07 - anything can happen
07:09 - right but it is not allowed it is not
07:12 - safe
07:13 - to
07:14 - use to dereference the pointer after you
07:17 - have freed that pointer it's not safe
07:20 - right
07:21 - because now this pointer is
07:24 - having indeterminate value
07:27 - before calling free function yeah it is
07:30 - having thousand it is pointing to this
07:32 - after calling it is still containing
07:34 - thousand but
07:36 - this object this object whatever it is
07:38 - pointing this object this memory now you
07:40 - have released this memory this memory
07:42 - can be reused this memory is now back to
07:44 - heap section although the data is still
07:46 - there
07:47 - free is not responsible to erase the
07:49 - data right but it is not allowed you can
07:53 - you can you know access this at your own
07:55 - risk
07:56 - maybe sometimes it will give you correct
07:58 - value maybe sometimes it will give you
07:59 - wrong value or maybe after this again i
08:02 - have used malloc and i have overwritten
08:04 - this value like i have written here 20
08:07 - and you are still
08:08 - accessing this and maybe you think that
08:10 - it will give 2 but you have overwritten
08:12 - this value now this time it will give 20
08:15 - or in in your calculation it will you
08:16 - know give you some wrong output or
08:19 - something like this
08:21 - right
08:22 - so these are some points this will
08:24 - actually happen when you free the
08:26 - pointer right now see
08:29 - as you have seen if you use static
08:31 - memory allocation like i am using here
08:34 - in my program like in a or into b
08:37 - so this is what static memory allocation
08:39 - from stack section
08:42 - the memory would be allocated like for a
08:44 - and b
08:45 - and it would be automatically
08:48 - you know freed or you know automatically
08:50 - released the memory would be
08:51 - automatically released once you exit
08:54 - from the program right
08:55 - in
08:56 - this thing in static memory location but
08:58 - in dynamic memory allocation from heap
09:00 - section the memory would not be released
09:04 - automatically this thing you need to
09:06 - take care you have to free the memory
09:08 - that's why we are using free function
09:10 - you have to free the memory
09:12 - right
09:14 - so it's your responsibility if you are
09:15 - not going to free the memory at some
09:17 - point of time the memory maybe memory
09:19 - would be exhausted right maybe your
09:21 - program will crash or your system will
09:23 - shut down with this type of behavior
09:25 - your system will show
09:27 - so always use free function after using
09:30 - or after you know
09:33 - using this concept of dynamic memory
09:34 - location in your program maybe if you
09:36 - don't know how to use free function in
09:38 - between the program in between the
09:40 - program also you can use free function
09:42 - it's not like that in in a program only
09:44 - in the you know at the end of the
09:46 - program you will use free function
09:48 - no
09:49 - within the same program two three four
09:51 - times you can use free function
09:53 - but for that thing you have to
09:54 - understand like how you can use three
09:56 - function what does that mean what output
09:59 - you will get after fleeing if you can't
10:00 - access this pointer now and these kind
10:02 - of thing right
10:04 - so it's your assignment for you guys
10:06 - like in a program you have to use free
10:09 - free function
10:11 - at least two times
10:14 - you have to write down a program this
10:16 - such type of program at least use
10:19 - the free function two times right after
10:21 - using this free ptr now ptr is still
10:24 - containing this address this thousand so
10:27 - this pointer is something like dangling
10:29 - pointer
10:32 - it is pointing to a
10:34 - known
10:35 - existing memory location
10:38 - thousand it is known existing now
10:40 - because you have released this memory
10:42 - this object it is still having the
10:44 - address of this object but it is you can
10:46 - say non-existing memory known existing
10:49 - object that's why it is dangling if you
10:51 - dereference it it will definitely show
10:52 - some undefined behavior you cannot
10:54 - de-reference it right
10:56 - so it's a you can say it's better not to
10:57 - de-reference it
10:59 - you can dereference this pointer at your
11:01 - own risk now better after using free
11:03 - better to use better to do
11:06 - better to re-initialize this point that
11:08 - you can
11:09 - write down something like this simple
11:11 - thing is the simplest thing what you can
11:13 - do just assign ptr is equal to null so
11:15 - now in ptr we have null
11:19 - that's it
11:20 - right and if you again use free
11:23 - ptr once you're freed again you are
11:26 - using free so you it's like double free
11:28 - you are doing
11:30 - so double free it will show some you
11:32 - know be you know like code um error you
11:35 - can get
11:36 - or double free error you can get this
11:38 - type of error you can get you can
11:40 - practice this thing at your own right
11:43 - if are you after freeing if you want to
11:45 - access this
11:46 - ptr dereference this ptr maybe it will
11:48 - show segmentation fault error that is
11:49 - also possible
11:51 - so always use free function carefully
11:54 - right
11:55 - and always free the memory after using
11:58 - mellow calorie load after using a dma
12:01 - concept always free the memory right now
12:04 - let me show you
12:05 - a program on this free function
12:07 - so this is a program
12:09 - it's simple program i'm just allocating
12:11 - for three in teaser dynamically i'm
12:13 - locating memory using mellow just
12:15 - entering the value three values and just
12:17 - i'm printing the entered value it's very
12:19 - simple we have discussed this
12:20 - programming
12:21 - three times i guess in mellow catalog
12:22 - and real look also so i'm not going to
12:24 - write this thing again i'm just copying
12:26 - and pasting this thing right so now let
12:28 - me just first of all run this program
12:31 - and show you is it yeah no
12:34 - we are getting the same output or not
12:38 - say enter the values
12:40 - one two three so entered values are one
12:42 - to three right now let's see after
12:45 - entering the values
12:47 - here i'm using
12:48 - free pdf
12:57 - now after freeing the memory i want to
12:59 - print the values i want to access those
13:01 - values so now what type of output you
13:04 - will get
13:05 - after frame
13:06 - i am
13:07 - printing the values let's just remove
13:10 - this free from here
13:11 - right
13:13 - and yeah always it's a good practice to
13:15 - after using you know this mellow after
13:17 - this
13:18 - use just check if ptr is equal to is
13:22 - equal to
13:23 - null
13:25 - then
13:26 - printf
13:29 - memory not
13:32 - located just print this thing
13:35 - otherwise
13:37 - we haven't used you know we have this
13:38 - condition in the previous program so
13:40 - better to use this thing
13:42 - if because of something malloc is you
13:45 - know not able to
13:46 - allocate the memory in case of failure
13:48 - it will return null so better to check
13:49 - the pointer first after that
13:51 - write down whatever you want to do with
13:53 - the program right now
13:55 - we have freed the memory but still i'm
13:57 - dereferencing this pointer i want to
13:59 - access those values so let's see what
14:01 - output you will get here
14:03 - see enter the values one two three
14:07 - so you are getting the output
14:09 - first and you garbage value second
14:11 - ending rb's value but third value you
14:12 - are getting three
14:14 - right
14:15 - so let me just run this again
14:18 - and at this time i'm running four five
14:20 - six
14:21 - so any garbage value any garbage value
14:23 - and third value six so it is what
14:25 - undefined behavior you are for first two
14:27 - values you are getting any garbage value
14:28 - for third value you are getting right
14:31 - because
14:32 - this happens because you are accessing
14:34 - you are dereferencing the dangling
14:36 - pointer this pointer you have freed the
14:38 - memory but still you are accessing the
14:39 - value that was there at that memory
14:42 - location right so it is
14:44 - you can say undefined behavior of this
14:46 - monitor fine
14:48 - now i have told you that whenever you
14:50 - use dynamic memory allocation from heap
14:52 - section if you allocate the memory then
14:54 - that memory would not be automatically
14:57 - dear located you have to
14:59 - manually you have to use free function
15:00 - to deal with that memory right now let's
15:03 - see one more example of that thing one
15:05 - more program see
15:07 - let's take
15:08 - this function
15:23 - i am
15:24 - having a function here
15:26 - display function right and in that
15:28 - function
15:30 - what
15:30 - i'm using mellow function to allocate
15:33 - memory i'm entering the values right and
15:35 - after that this function is returning
15:37 - the pointer so this function is
15:38 - returning address so that is why
15:41 - what int star the
15:43 - type of this return type of this
15:45 - function is display function is in star
15:47 - so whatever it is
15:48 - returning the address i am storing that
15:50 - address i am accepting that that is in
15:52 - main function so here i am taking
15:55 - suppose
15:56 - one more point ptr1
15:58 - right
15:58 - [Music]
16:00 - no no need of n here and obviously
16:04 - we are not so here we will just call
16:08 - which function
16:10 - display
16:14 - and this is going to return address so
16:16 - in ptr1 i am storing that address ptr1
16:19 - is also a pointer fine
16:21 - now no free here
16:23 - now here in main i am printing the
16:25 - values
16:26 - the entered values are from i23 and here
16:29 - not no ptr you cannot use because that
16:32 - ptr is the scope of this pdrs within the
16:36 - display function so here we are using
16:38 - ptr one
16:41 - right ptr one plus i
16:43 - and after that we are freeing this ptr
16:45 - one
16:46 - right
16:49 - now
16:50 - see
16:51 - maybe you will say like in this function
16:55 - we are using this ptr we are allocating
16:57 - memory in this function and this ptr is
17:00 - we are going to return this ptr
17:02 - but
17:03 - the scope of those values whatever
17:05 - values you are entering the scope of
17:07 - those values is within within this
17:08 - function only right so this function
17:11 - will act as a this pointer will act as a
17:13 - dangling pointer outside this function
17:16 - outside this display function we are not
17:18 - able to retrieve the values
17:21 - outside this display function definitely
17:24 - the memory would be dl update and we are
17:26 - not able to access those values but that
17:28 - is not the case because it is dynamic
17:30 - memory allocation
17:31 - dynamically if you look at memory that
17:34 - memory would not be freed automatically
17:36 - that case happens only if you use static
17:39 - memory allocation
17:40 - that concept we have discussed in
17:42 - dangling pointers so now let me run this
17:44 - and show you what output you will get
17:46 - are you getting the exact values or not
17:47 - see enter the values i am entering
17:49 - values four five six and you are getting
17:51 - the values four five six
17:54 - right
17:55 - we are entering values in this function
17:57 - the returning pointer and we are we are
18:00 - not accessing the values from main
18:01 - function but still you are able to
18:03 - access those values
18:06 - so why this thing because
18:09 - when you use dma concept to allocate
18:11 - memory from heap section then that
18:13 - memory would not be deallocated
18:15 - automatically
18:16 - automatically thing happens
18:19 - only in static memory allocation right
18:21 - so you have to use free function to free
18:23 - this memory i hope this point is also
18:25 - clear to you with help of this program
18:28 - right so now i guess that's it for free
18:30 - function
18:32 - so now i guess we have covered all the
18:33 - concepts of c language if i'm left with
18:36 - any concept which is important then you
18:38 - can tell me in common comment box i'll
18:40 - try to make a video on that thing also
18:42 - so now i'll see you in the next video
18:43 - till then bye bye take care