00:00 - in this video we will see how to delete
00:02 - data from our doubly linked list see we
00:05 - have already discussed how to create a
00:07 - doubly linked list and how to insert a
00:09 - data in doubly linked list insertion and
00:12 - beginning insertion at end an insertion
00:14 - insertion at any specific position as
00:17 - well as an insertion after a given
00:19 - position right so I'll prior to the link
00:21 - of all these video in the description
00:23 - box as well as you can check out this I
00:25 - button fine in this video we will see
00:27 - how to delete a data delete from
00:29 - beginning delete from end and delete
00:32 - from our specific position or you can
00:34 - say delete from any given position fine
00:38 - see suppose I assume that we have
00:41 - created our doubly linked list having
00:43 - three nodes two pointers we have one is
00:45 - tail pointer and when his head pointer
00:47 - head is going to store what address of
00:49 - the first node tail is going to store
00:51 - address of the last node this thing we
00:53 - have already discussed in the previous
00:54 - video right how to maintain this tail
00:57 - and head and how to create this W linked
00:59 - list right now I want to delete data
01:02 - from beginning see this node I want to
01:05 - believe in the list from the list fine
01:08 - so now what you have to update for this
01:11 - see if you want to delete this node in
01:14 - that case the head will contain address
01:18 - of this node right so in head you will
01:21 - store 400 fine now head is going to
01:25 - point here second thing what you have to
01:28 - update now this would be the first node
01:30 - right so this link the previous link of
01:34 - this node would contain null why so
01:36 - because we have already delete this node
01:38 - so this is going to point where null see
01:42 - this is I I guess you know the node is
01:44 - having three part this is data part this
01:46 - is what containing address of the next
01:47 - node this pointer is containing address
01:50 - of the previous node so that is why here
01:52 - also you will store what 0 fine means we
01:56 - have detached this node from this list
01:58 - but still we have to free this space
02:02 - because say this space is still located
02:05 - to this node although we have detached
02:07 - this node from the list but second task
02:10 - is you have to free this memory
02:12 - you see memories very crucial part so we
02:15 - cannot leave it like this this is just a
02:18 - garbage now so you have to clean this
02:20 - garbage how you can free this memory you
02:23 - can use a free function in C we are
02:25 - using free function and in free function
02:27 - what you will pass a pointer to this
02:31 - node you can see address of this node
02:33 - that is 200 fine
02:34 - so suppose one pointer is there which is
02:37 - pointing to this node and name of the
02:39 - pointer is temp so here we can pass M if
02:43 - there is no pointer then how you can
02:45 - access this node how you can get this
02:47 - 200 fine so another important point is
02:51 - you how to maintain a pointer to this
02:53 - node fine so you will take another point
02:56 - of that is temp now how to believe this
03:01 - now see how to delete this node see we
03:05 - are going to create a function you can
03:06 - say void delete from Big D fine and here
03:16 - first of all we're going to take another
03:17 - pointer that is M and Y we have I have
03:20 - already discussed here so I am going to
03:22 - take another pointer that is struct node
03:25 - it's trick then why I am taking this
03:29 - truck node we have already discussed
03:31 - many times in the previous video fine
03:33 - because this pointer is going to point
03:35 - this node so here what you will write
03:38 - here always see if if I write int star P
03:41 - it means this is a pointer P and it is a
03:44 - pointer to integer it means this pointer
03:47 - is going to store address of a integer
03:49 - variable so here we always write the
03:52 - data type of that variable whose address
03:54 - this pointer is going to store now here
03:57 - this temp is going to store what this
03:59 - 200 means address of this node and type
04:03 - of this notice we have already discussed
04:05 - we will define our own data type that is
04:06 - struct node so that is why I am taking
04:08 - here struct node fine
04:11 - so now see so now we have taken another
04:14 - pointer that is M amp is not pointing to
04:18 - this node now still by now see first of
04:23 - all you will take
04:24 - if there is no node in the list then we
04:27 - cannot delete anything so you can check
04:29 - what if this head pointer is equal to is
04:33 - equal to 0 means null it means here you
04:36 - can print what list is empty otherwise
04:42 - we will do what now see in else part
04:46 - what you will write now first of all we
04:49 - are going to point this pointer here
04:51 - fine
04:53 - so now in temp we are going to store
04:55 - what temp is equal to head that is this
04:58 - 200 the address of this node 200 now
05:01 - temp is also pointing to this node fine
05:04 - now we can update this head value and
05:08 - this value in head they are going to
05:11 - store what this 400 fine now from where
05:14 - I can get to this 400 address of this
05:16 - node see this node is containing 400
05:19 - this pointer the next pointer and how we
05:21 - can access this node we can do what this
05:24 - head is also pointing here in temp is
05:26 - also pointing here so basically we use
05:27 - what head so here you can write now head
05:30 - is equal to head off next
05:36 - it means hand the next value would be
05:39 - assigned to head head and next value is
05:41 - head next means 400 would be assigned to
05:43 - head here we will write 400 now this
05:46 - link has been broken fine now
05:48 - this head is pointing to this node now
05:52 - another thing what you will do obviously
05:55 - we are going to break this link also
05:57 - fine now here this would be the first
06:00 - node now so in the previous node of
06:02 - first nor you would store what null that
06:04 - is 0 so now how we can access this part
06:08 - now pointer to this node is what head we
06:11 - have set this pointer so how we can
06:13 - access this part we can write head and
06:17 - previous is equal to null it means here
06:20 - we are going to store 0 it means this
06:23 - link has been broken fine and if you
06:29 - want you can also store here 0 you can
06:31 - say how we can access this node M of
06:34 - next as equal to 0 so here also we can
06:36 - store 0 and this
06:37 - would be broken otherwise by writing
06:40 - these two lines simply you can do what
06:42 - now you can free this memory now how you
06:45 - will free using this free function free
06:49 - and free what you will pass address of
06:52 - this node from where I can get this this
06:54 - temp pointer is pointing to this node
06:56 - tempest containing this address so here
06:58 - I can write then and now this node has
07:04 - been deleted the memory has been freed
07:06 - now this is how you can delete a data
07:09 - from the beginning these four lines code
07:11 - would be there fine now we will see how
07:14 - to delete from end so now to delete this
07:17 - node what you have to do you need to
07:20 - break these links fine means you have to
07:22 - store here what 0 means this node is not
07:25 - pointing to any node now fine how we can
07:28 - access this part see obviously we don't
07:31 - have any pointer pointing to this node
07:33 - because directly we cannot access this
07:34 - part we need some pointer variable or we
07:38 - need some structure member structure
07:40 - variable fine so that is why in single
07:43 - linked list what if in this case also if
07:45 - you don't maintain this tail pointer
07:46 - then you will have to traverse the list
07:48 - till here after that you can delete this
07:50 - data but we have already a tail pointer
07:52 - pointing to this node now no need of
07:53 - traversal order of one time pick would
07:56 - be taken for deleting this node see now
07:58 - how we can update this part see how you
08:03 - can access this part the address of this
08:06 - node is about 400 from where I can get
08:07 - 400 here we have 400 fine and the
08:10 - pointer to this node is a it means tail
08:12 - previous fine we have reached here now
08:16 - how we can access this part in previous
08:19 - and this has what next is equal to 0
08:23 - this is how you can set fine one more
08:25 - thing you will set what you will also
08:27 - update this tail pointer now tail will
08:29 - contain 400 right and from where I can
08:32 - get 400 see here we have 400 so from
08:35 - here I can get 400 I can store here so
08:37 - simply first of all we will do what and
08:39 - and third thing is also you you are also
08:43 - into free this memory fine because after
08:46 - updating here suppose now tail is
08:48 - containing 400
08:49 - so now this link has been broken and
08:51 - this link also has been broken fine
08:55 - so now how you can access this node we
08:59 - are also going to maintain a pointer
09:01 - that is spam which is going to point
09:03 - this node and after that we can do free
09:05 - and M so now first of all what we will
09:08 - do we will declare another pointer that
09:12 - is M means we have another pointer m and
09:15 - temp is not pointing to anywhere first
09:17 - of all I will check if L is equal to is
09:21 - equal to 0 or head is equal to is equal
09:24 - to 0 it means Leicester's m / t so here
09:25 - what you can print simply list is empty
09:28 - fine I guess you can all write down this
09:31 - thing now in else part what you will do
09:34 - now we will initialize this ten-pointer
09:39 - temp is equal to a now temp is also
09:43 - containing 150 means temp is also
09:45 - pointing to this node now we can update
09:47 - this temp well you now temp we can set
09:50 - this temp pointer pointing to this node
09:52 - and after that we can free this node
09:54 - using this 10 pointer right we can
09:56 - change this tail pointer now now see how
09:59 - we can do here I want to store 0 so that
10:03 - this link I can break this link now how
10:06 - we can access this part see this this
10:09 - part of this mood find that is 400 from
10:12 - where I can get this address here we
10:14 - have 400 and pointer to this node is
10:16 - tail also in temp also fine so you can
10:18 - access this node using temp or tail so
10:20 - here I am writing what tail of tail of
10:25 - previous fine and again double pointer
10:29 - tail of previous means we have reached
10:31 - to this address now this I want exactly
10:33 - I want to reach to this location and now
10:35 - this is what next button again the name
10:39 - of this part is next is equal to 0 it
10:43 - means here now I have 0
10:45 - now this link has been broken fine
10:49 - second thing we are also going to update
10:51 - this tail so in tail pointer what we are
10:54 - going to store that is 400 address of
10:57 - this node now from where I can get 400
11:00 - from here
11:01 - and how we can access this part we can
11:04 - write tale of tale of previous that is
11:09 - 400 so here now I have 400 so tale is
11:13 - now pointing to the snow right now I can
11:18 - free this memory so so here simply you
11:21 - can write free m because the pointer to
11:25 - this node is 10 how we can access this
11:27 - address using temp and this is done now
11:31 - now this node has been deleted right
11:34 - this is how we are going to delete a
11:35 - node from the end of the list
11:37 - fine and this will take time complexity
11:39 - order of 1 because we just updated these
11:43 - links we haven't done any traversal and
11:46 - from beginning also it is it will take
11:49 - order of 1 because we just in that case
11:53 - also we have just updated the links fine
11:55 - now we will see how to delete a node
11:58 - from a specific position now before
12:00 - going to the third function I want to
12:02 - tell you something see if you don't get
12:03 - this double pointer concept then what
12:05 - you can do
12:06 - see suppose we haven't updated this part
12:09 - still we have this link pointing to this
12:12 - node and tail is not pointing to this
12:14 - tail is still pointing to this one tail
12:16 - is having now 150 fine
12:19 - so first of all what we can do first
12:21 - update this tail pointer so first you
12:23 - will write M is equal to tail and after
12:25 - this line don't write this line directly
12:28 - line this line tail is equal to tail
12:29 - previous means tail is equal to tail
12:32 - previous that is 400 now it is having
12:34 - 400 so this link has been broken and our
12:36 - tail is pointing to this node now we can
12:39 - update this part have you can access
12:41 - this that node the pointer to this node
12:43 - is tail now after this line after this
12:47 - line do not write this line you can
12:49 - directly write tail off next is equal to
12:54 - 0 so now here 0 this link has been
12:57 - broken after that you can write free
12:58 - temp so 2 is how you can write this
13:01 - thing or this thing also right so now
13:04 - suppose this is our list we have 4 node
13:06 - in the list and I want to delete this
13:08 - node the position is 3 1 2 & 3
13:11 - this node I want to delete this one
13:15 - so now you have to update what you need
13:17 - to update this linker thusly because
13:19 - this node will indirectly point through
13:21 - this node and this node will directly
13:22 - point to this node so now how they can
13:25 - access this part in this part how we can
13:27 - change obviously we need some point are
13:28 - using a pointer only we can access these
13:30 - parts and second thing the need of point
13:32 - that is what obviously we want to free
13:35 - that memory find so I want to use that
13:37 - free function so so I need a pointer
13:39 - pointing to this node fine
13:41 - so that I can free this suppose I want
13:44 - to delete this data and I'm have a
13:48 - pointer I'm having a pointer pointing to
13:50 - this node that is this one so after
13:52 - updating this link and this link this
13:54 - these links has been broken fine now I
13:56 - can free this node free temp right so
14:00 - now how we can set this pointer to this
14:03 - node you how to traverse the list
14:06 - because only we have the stale value and
14:08 - this head value fine now we will start
14:12 - the traversing from here because
14:13 - sequential access is possible till this
14:16 - position once we reach tail position
14:18 - then we are going to stop after that
14:20 - using a single pointer only I can update
14:22 - this cell also and I can update this
14:24 - also because in the single node I have
14:27 - address of the next node and address of
14:29 - the previous node that is why deletion
14:31 - is also easy in doubly linked list
14:32 - because in this case we need only one
14:34 - pointer but in singly linked list we
14:35 - need two pointers fine that we have
14:38 - already discussed fine you can check out
14:40 - that video in this I button now see what
14:43 - you will do obviously we will ask from
14:45 - the user from which position he wants to
14:47 - delete the data and to get the input we
14:49 - need a variable you can say post field
14:52 - and also we are going to take one this
14:56 - ayah variable I is equal to 1 for Trevor
14:59 - Singh fine now see and we are going to
15:01 - take this M pointer also so how you can
15:05 - declare this struct know a strip M and
15:10 - now temp is not having anything so temp
15:14 - is now not pointing to this node right
15:15 - now see if position is 1 in that case
15:20 - that case is similar to delete from
15:22 - beginning fine so in if you can write if
15:25 - position is equal to is equal to 1 then
15:27 - you can directly
15:28 - delete from beginning function and if
15:30 - position is this one and off this list
15:33 - then simply you can call delete from and
15:36 - fine
15:37 - means how many you can count how many
15:39 - nodes are there one two three and four
15:41 - nodes and if position is four then you
15:43 - can say it is the you you want to delete
15:45 - from the end of the list so you can call
15:47 - delete from and otherwise you will
15:50 - implement the logic to delete from a
15:52 - specific position so first of all will
15:54 - ask from the user using printf and scanf
15:57 - enter the position right and after that
16:04 - we will traverse so suppose user has
16:08 - entered position is equal to three so in
16:12 - post variable we have value three and we
16:14 - have one more variable I in that we have
16:17 - one so now we are going to start
16:19 - traversing till this position right
16:22 - because we need a pointer to this
16:24 - position for freeing this memory so now
16:27 - here what I can write while I less than
16:33 - pose and then we are going to traverse
16:36 - fine so now at starting what you will do
16:41 - have you will Traverse obviously we
16:43 - cannot move this head so we need a
16:46 - pointer we have declared one pointer
16:47 - temp and we first of all set this
16:50 - pointer to the first node and then we
16:52 - are going to update this temp then we
16:54 - are going to update this temp till we
16:55 - reach to tulip to the position so now
16:58 - before traversing before start this
17:00 - traversing we need to set this pointer
17:02 - to first node see you can write after
17:05 - this line after declaring the stem here
17:07 - like you can write temp as equal to head
17:10 - now temp is containing 200 means temp is
17:14 - now pointing to this node head and
17:16 - campus pointing to the first node now
17:18 - I'll start reversing I less than is
17:20 - equal to post then we will move this
17:23 - temp so in M now we will store temp off
17:27 - next
17:29 - it means temp next means hundred fine
17:33 - so in temp we are going to store temp
17:35 - next now it is having hundreds so now
17:38 - temp is pointing to
17:40 - the snow's right and we will do it I
17:43 - plus plus now see one iteration we have
17:50 - done one I was one and position is three
17:52 - one less than three so we have done temp
17:53 - is equal to temp next here now temp now
17:55 - I plus plus now I is equal to 2 now 2 is
17:59 - less than 3
17:59 - yes now again we will do temp is equal
18:01 - to temp Knicks now temp next is equal to
18:04 - temp is pointing to this node temp next
18:06 - s500 so now here we have 500 so now this
18:11 - camp is pointing to this node fine and I
18:13 - plus plus now I becomes 3 it's 3 less
18:16 - than sorry
18:17 - no so now we are going to we are not
18:19 - going to move this step now we have
18:21 - reached till this position because
18:23 - position is 3 and we have reached till
18:25 - this one point 3 now I can update these
18:28 - links and after that I can free this
18:29 - memory fine so now after this while loop
18:32 - what you will write see now how you can
18:35 - access this part here I want to store
18:38 - address of this node after deleting this
18:40 - that is 150 here I want to store 150
18:44 - right how you can access this part 500
18:49 - the address of this node is hundred so
18:51 - how we can reach till this node here we
18:53 - have 100 address of this food and we
18:56 - have a pointer to this node that is temp
18:59 - so how we can access this this part temp
19:02 - of previous so here I can write after
19:04 - this while loop I can write temp temp of
19:10 - previous that is hundred means we have
19:11 - we have raised in this node but in this
19:14 - particular node also I want to reach to
19:16 - this part so here I can write this part
19:19 - is next next is equal to now here I want
19:24 - to store 150 that is this one from where
19:27 - I can get this 150 see here we have 150
19:30 - and we can access this node because we
19:32 - have a pointer so here I can write temp
19:34 - off next
19:37 - because temp next means 150 it means
19:40 - this is now containing 150 and now this
19:44 - is not pointing to this node now this is
19:46 - pointing to here to this node
19:50 - one Ling we have set one link and now we
19:53 - have we are going to set this link now
19:55 - see how we can reach till here till this
19:59 - part see this know till this node how we
20:02 - can reach that address of this node is
20:04 - 150 but directly we don't have any
20:06 - pointer pointing to this node but don't
20:08 - worry we have a pointer to its previous
20:10 - node and from previous node here here
20:12 - from where I hide from here I can get
20:14 - this 150 fine and pointer to the to this
20:17 - node is 10 so here I can write temp next
20:22 - temp next means we have reached till
20:26 - this node but in this note also I want
20:28 - to reach till this part so the name of
20:30 - this part is again you will write this
20:32 - arrow and the name of this part is
20:34 - previous is equal to now here I want to
20:38 - store what 100 now from where I can get
20:42 - this hundred see here we have hundred
20:45 - and I can access this node because I
20:48 - have a pointer pointing to this node now
20:50 - temp off previous right temp of previous
20:55 - hundred would be stored here now here I
20:57 - am the store hundred so this link is no
21:00 - more and now this is pointing to this
21:02 - node right now we have set this link
21:06 - also and this link also now we can free
21:09 - this space and how you can free this
21:11 - free 10 because stamp is pointing to
21:15 - this node means from this address 500
21:19 - from this address we are going to free
21:21 - this memory fine so now that's it
21:24 - that is how we can be lead from any
21:26 - specific position I hope you can modify
21:28 - this if I want to ask how to delete a
21:30 - data from a given sorry how to delete a
21:33 - data after a given position or how to
21:36 - delete a data from before a given
21:38 - position fine so now the time complexity
21:42 - for this case has what now we have
21:44 - prover still here means one and two
21:46 - nodes if position is suppose 10 so you
21:49 - need to traverse 10 node if position is
21:52 - 50 so you need to traverse 50 nodes
21:54 - it means obviously it is proportional to
21:57 - end the number of nodes in the list and
22:00 - if you want to delete from middle then
22:02 - you have
22:02 - was what and by two nodes so that is why
22:06 - the time complexity in average case is
22:08 - what it order of in fine so this is all
22:13 - about the deletion from a doubly linked
22:15 - list fine next we will see the circular
22:18 - length list and some operations on
22:20 - circular length is defined so I'll see
22:22 - you in the next video till then bye-bye
22:23 - take care