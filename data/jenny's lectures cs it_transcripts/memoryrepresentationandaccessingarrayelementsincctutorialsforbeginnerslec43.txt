00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - C++ programming language we are
00:05 - discussing arrays in C++ in the previous
00:07 - video we have seen what is need of array
00:10 - why you use array and what is an array
00:12 - how to declare an array how to
00:14 - initialize an array at compile time and
00:16 - at run time this thing we have seen
00:18 - right now the next thing in arrays are
00:22 - the memory representation of array
00:23 - elements and how to access array
00:26 - elements these things these two things
00:28 - we'll be discussing in this video right
00:30 - Theory plus practical also we'll see
00:31 - with the help of program I'll show you
00:33 - on my laptop right now before moving
00:36 - further let me just tell you one thing
00:38 - if you are preparing for gate 2024 then
00:41 - I have an exciting news for you guys an
00:43 - academy is conducting all India mock
00:45 - test for gate 2024 aspirants which is on
00:49 - 24th of December and the important point
00:52 - about this is you can enroll for this
00:54 - test freely you don't need to pay
00:56 - anything right the link you'll get in
00:58 - the description box of this video right
01:00 - now why this teste is so special because
01:03 - here you get a chance to win up to 100%
01:06 - scholarship Yes you heard it right plus
01:09 - it is all India live mock test so uh you
01:13 - have a chance to compete with thousands
01:15 - of Learners from all over India and you
01:17 - will get your all India ranking and by
01:19 - that you will get to know where you
01:20 - stand among the other Learners right how
01:23 - your preparation is going on so actually
01:26 - it's right time to test your uh gate
01:28 - preparation and this test has been
01:30 - created by their top Educators based on
01:33 - the latest exam exam pattern right so
01:37 - you will get here actual exam like
01:39 - experience which is definitely help you
01:41 - when you are going to sit in actual gate
01:43 - exam so the enrollment link and the
01:46 - other information related to this exam
01:48 - I'll put in the description box of this
01:50 - video you can go and check out right now
01:52 - let's discuss memory representation of
01:54 - array elements see we have discussed if
01:58 - I want to take array of five elements
02:00 - and I want to initialize it at this time
02:02 - only like 1 2 Z only three elements I
02:05 - have so remaining elements would be zero
02:07 - right data type name of aray size of
02:10 - aray and something like this if you
02:12 - don't give size here that is also fine
02:14 - size would be
02:16 - automatically uh you can say calculated
02:18 - right but here the size would be only
02:21 - three according to this because we have
02:23 - given three elements only but if suppose
02:25 - you give size five right so how in m
02:30 - this these array elements are to be
02:31 - stored so this is like we
02:35 - have memory memory blocks right
02:39 - something like this you can represent
02:42 - this horizontally or vertically it's up
02:45 - to you I'm comfortable with this thing
02:47 - horiz horizontally right so suppose one
02:50 - bite I don't know the address suppose
02:53 - the address of this one by I'm taking
02:54 - 100 101 102 103 104 5 six something like
03:01 - this right I don't know the address I'm
03:03 - just supposing the address of each bite
03:06 - right now how how much memory to be
03:09 - allocated first this would be calculated
03:12 - right so the type is integer integer
03:16 - will take four bytes five integer the
03:19 - size is five so 5 into 4 20 bytes would
03:22 - be allocated by the memory manager right
03:26 - and these bytes would be allocated
03:29 - contigous L memory like if I start from
03:32 - here if the memory manager has started
03:35 - to allocate memory for this array from
03:37 - here 100 so till sorry till uh till
03:41 - suppose here is last is the address of
03:43 - last bite would be 119 right from 100 to
03:47 - 119 so 20 bytes are there so
03:50 - these these Arrow elements are to be
03:53 - stored continuously in memory right in
03:57 - continuous memory locations
04:00 - so now one would be stored in these four
04:02 - bytes from here to
04:05 - here one would be stored in these four
04:08 - bytes right then here two would be
04:10 - stored in these four bytes then next
04:12 - four bytes the zero would be stored next
04:15 - four bytes again zero would be stored
04:17 - next four bytes again zero would be
04:18 - stored because only three elements we
04:21 - have given remaining two elements would
04:22 - be by default zero right so that is why
04:26 - if if more simply if I this then we can
04:30 - draw something like this 1 2 3 4 5 so 1
04:35 - 2 0 and remaining would be 0 0 so if the
04:38 - address is 100 next address would be 104
04:41 - 108 112 and
04:44 - 116 so now the name of this array is a
04:48 - and in a the address of first element is
04:51 - stored or you can say this is the Base
04:53 - address of this are Base address the
04:55 - starting address so in a the name of the
04:59 - array stores the address of the first
05:02 - element right so these are you know by
05:04 - default considered as pointers but
05:07 - sometimes know except sometimes if I use
05:11 - something like this size of operator
05:14 - with size of operator if I uh write down
05:16 - the name of this array here it is not
05:18 - considered as pointer it will give the
05:20 - size of this complete array not just the
05:23 - size of this pointer right so here are
05:26 - some situation where arrays array name
05:29 - is not considered by default you know as
05:32 - a pointer but other than that array
05:35 - names are implicitly considered as
05:38 - pointer right so you have to take care
05:41 - of this thing also now if I say m a it
05:45 - means it is indicating the Base address
05:48 - of the sing right so this is how memory
05:51 - is to be allocated now if I want to
05:54 - allocate memory to a second array
05:57 - suppose if I write down here here um
06:01 - float
06:03 - marks and
06:06 - [Music]
06:07 - 10 now you have to tell me in comment
06:10 - section how much memory is to be
06:12 - allocated right so same float is going
06:15 - to take 4 bytes 4 into 10 like 40 bytes
06:18 - is to be loated but continuous family
06:20 - location right if we are going to start
06:24 - it's not like that maybe from one uh
06:26 - here you can say from 120 Maybe from
06:29 - this 120 memories to be located to this
06:33 - Marx array or maybe from some other
06:35 - memory location maybe from 150 address
06:37 - or maybe from th000 address I'm just
06:39 - supposing this address it's not the
06:41 - actual address like 100 or 150 no I'm
06:43 - just supposing it right so maybe from
06:47 - th000 address starting from 1,000 how
06:50 - much by is to be allocated for this 40
06:52 - bytes continously in memory from 1,00 to
06:56 - 10 39 40 bytes right it's up to you know
07:00 - how much data you store how much how
07:03 - many elements you store 1 2 3 4 or 10
07:05 - elements right so this is how the uh you
07:08 - know the memory representation of the
07:11 - array elements so this is how the arrays
07:13 - elements are to be stored in memory
07:15 - right now how to access these Arrow
07:18 - elements if I have I'll show you
07:21 - practically also we'll just access we
07:23 - will print the memory address also of
07:26 - array elements don't worry if I write I
07:29 - have a int x
07:33 - 5 so if I want to access this just see
07:36 - out and X that's
07:39 - it but in Array I have three elements in
07:41 - this array I want to access these three
07:43 - elements so first thing randomly you can
07:46 - access any element directly you can
07:48 - access any any element of the array if
07:51 - you want to access zero directly you can
07:53 - access it's not like that you have to go
07:54 - from 1 to Z no directly you can access
07:57 - this zero how using indexing using index
08:02 - actually
08:04 - index now this is
08:07 - what main thing here index starts from
08:12 - zero in arrays so here 0 1 2 3 4 maybe
08:18 - you think
08:19 - that how to exis let me just show you
08:22 - the array name and in this these
08:25 - brackets are known as subscript just
08:27 - write down the index suppose
08:29 - if I simply if you don't know the index
08:33 - start from zero if I say I want to
08:35 - access the first element so obviously
08:36 - you will say the position of first
08:38 - element I think should be one so it
08:40 - should be a of one means a of one will
08:43 - give you first element a of two will
08:45 - give you second element but no that is
08:48 - not a case if you want to access the
08:50 - first element then index would be zero
08:54 - now why this index start from
08:57 - zero actually there was a programming
09:00 - language bcpm they designed this
09:03 - language you know uh Martin Richard that
09:06 - they designed arrays in that language in
09:08 - such a way that it would be initiating
09:10 - from zero Index right and after that b
09:14 - language comes after that c language
09:16 - comes and they followed the same pattern
09:18 - and C language actually becom so popular
09:20 - that all the other languages considered
09:24 - consider c as a base language so they
09:26 - follow the same pattern right although
09:28 - we have some except cases also like
09:30 - language mat lab Lua and I think Small
09:34 - Talk Pascal these languages Visual Basic
09:39 - in that array starts from not from zero
09:43 - right so there are exception languages
09:46 - also it's not like that all the
09:47 - programming language consider this
09:49 - pattern and array starts from zero index
09:52 - no but why now this in C language
09:57 - actually this index I mean this actually
10:00 - we call this Index this subscript this
10:03 - is actually offset it is not the
10:06 - position first position second position
10:08 - no it is actually
10:11 - offset
10:12 - means the number of or you can say the
10:15 - distance from the first element of the
10:18 - array right the distance from the
10:20 - array's
10:22 - head right so if I write here if I want
10:25 - to access this zero right so the
10:29 - distance from of this Zero from the
10:31 - first element is how much step you need
10:34 - to take to reach to this zero if you are
10:37 - here then one and two after taking two
10:40 - step you will reach to this zero so that
10:42 - is why index is two means this is
10:44 - actually the offset from the first
10:46 - element right if you want to exess the
10:48 - fourth element the last element so the
10:52 - last element in this arrays how much
10:54 - step away from the first element the
10:56 - distance so if you are here then one 1 2
10:59 - 3 4 if you take four step then you will
11:02 - reach to this last element that is why
11:04 - index is four right so the first element
11:08 - from the starting is how much step you
11:11 - need to take to reach to first element
11:13 - no step because first element is at
11:15 - starting only right that is why index is
11:18 - at zeroth element so this is actually an
11:20 - offset offset from the AR's head
11:25 - right and it makes we you know generally
11:29 - the second reason is what it makes uh
11:31 - you know simpler implementation of these
11:34 - things because in C arrays are closely
11:37 - tied with pointer pointer arithmetics I
11:40 - have told you right now in C many times
11:44 - this AR name is considered as pointer
11:46 - implicitly except few cases right so
11:50 - when you want to access actually if you
11:52 - want to exess any element in the array
11:54 - so we will write a of here the number
11:58 - Index right right so if I write here
12:00 - suppose I
12:02 - General then this would be
12:06 - converted a + I like this the inner
12:11 - working I'm telling you and you have to
12:13 - deference this to get the actual element
12:17 - so this star is D referencing operator
12:19 - don't worry we'll discuss this thing in
12:21 - detail when when we'll discuss pointers
12:24 - okay so this is how it is to be
12:26 - converted A+ I this now a is having
12:30 - address of the first element or the Base
12:32 - address suppose we are taking this
12:34 - example to 100 100 plus here I is what
12:38 - suppose I want to exess a of one right
12:41 - so I is
12:43 - one so one means in pointer arithmetic
12:46 - this one means it's not like that it
12:48 - will become one 1 no this is what
12:52 - address so if you add one here means
12:55 - address of next element not one 1 and
12:58 - and one element take here because it is
13:01 - integer four bytes so address of next
13:04 - element is what you have to add four
13:07 - here so this one means actually + 4
13:11 - right it's plus actually + 4 so 1 4 and
13:17 - this is D referencing operator so at 104
13:19 - I have two D referencing operator will
13:22 - give the actual value two right so if I
13:27 - want to exess the first element maybe
13:29 - you will like you think that it should
13:31 - print one but it is printing two so if
13:34 - the array index start from one the first
13:36 - element we are never going to you know
13:39 - fetch right that is why this says that
13:42 - zero index I hope you got this so if I
13:47 - want to access like a of Z first element
13:49 - zero so I is what here zero right so
13:55 - obviously 100 plus I is Zer so same Z Z
13:59 - right it is at first element it is the
14:01 - first element only so address 100 so at
14:05 - 100 at first first element is one right
14:08 - so you
14:09 - will it one would be printed here right
14:13 - it's okay we'll discuss this pointer and
14:15 - all in detail right just a brief just to
14:19 - uh you know make things clear out like
14:22 - why index starts from zero right if you
14:26 - got this you can let me know in comment
14:28 - section yeah about this why index start
14:30 - from zero you can just write down the
14:31 - answer if you're not getting this you
14:33 - can just let me know in comment section
14:34 - we can make a different video on this
14:37 - right so like this we can access AR
14:39 - elements so if you want to access any
14:42 - element right in Array so index would be
14:46 - from 0 to size minus one size of array
14:49 - is five so 0 to 4 so like this a of 0 a
14:53 - of 1 in C out we can simply write C out
14:55 - a of Zer so it will print it will give
14:57 - you output
14:59 - one right and to access these obviously
15:03 - we need a loop because if I want to
15:08 - print all the elements so one way is you
15:10 - can simply write C
15:13 - out if you want to print all the five
15:16 - elements in this so simply one way is
15:19 - five C out statement you can write down
15:20 - a of Z A of 1 a of 2 a of 3 a of four
15:22 - something like this it will give you all
15:24 - the five elements right 1 2 0 0 0 but if
15:28 - in AR I have 10 element I have 100
15:30 - element I have thousand elements
15:32 - obviously we cannot write down thousand
15:33 - statement see out statement right
15:35 - because
15:37 - here something is repeating as you can
15:39 - see see out we are accessing a only this
15:42 - index is changing right it is
15:46 - increasing you know one uh by one number
15:49 - first 0 1 2 3 like this right so
15:53 - obviously this is what repetion of these
15:57 - statements so repetion we use Loops that
16:00 - is why we use Loops in arrays right to
16:03 - access all the elements we can just
16:04 - write down one four Loop y Loop do y
16:06 - Loop or R based for Loop and there only
16:08 - single C out statement how to write that
16:11 - I'll show you this I'm telling you this
16:15 - because I have seen one comment like why
16:18 - in Array we use four Loops to
16:20 - get to access elements in from the array
16:23 - or to get input from the user why we use
16:25 - Loops so this is the reason we use loops
16:28 - right because of this repetition right
16:32 - now let me just show you
16:34 - practically so this was we have
16:35 - discussed in previous video how to take
16:38 - declare array how to you know initialize
16:40 - the array at run time this is at run
16:42 - time see we have taken a loop you can
16:44 - take four Loop while while loop or any
16:45 - loop I have taken four Loop to
16:47 - initialize arrays because we want to
16:49 - enter Five Element from the user we are
16:52 - we are going to ask Five Element right
16:54 - that is why obviously we'll repeat enter
16:57 - first element enter second element enter
16:59 - third element fourth element Five
17:01 - Element right so we are repeating here
17:03 - so that is why we are using Loop so AR
17:06 - index start from zero so I would be 0
17:08 - less than 5 I ++ and just to take input
17:11 - from the user we use C in this object R
17:14 - number and in subscript simply I so at
17:16 - first I value is zero so at zero index
17:19 - value would be stored then whatever you
17:21 - will enter I value becomes one then at
17:23 - one index value would be stored then 2 3
17:26 - 4 till four right
17:28 - and how memory is to be allocated that
17:31 - also I have shown you let me just show
17:33 - you address if you want to you know
17:37 - print the address of
17:40 - array okay it's not a actually it's the
17:44 - sorry the name of the arrrow here is RO
17:47 - number
17:49 - right so let's just run this and we'll
17:52 - see what output we'll get
17:55 - here enter the role number first second
17:58 - third fourth five so this address is
18:02 - some in some hexadecimal form see 0 x61
18:05 - f
18:06 - f8 right and if you want to print the
18:11 - address of first element so if you don't
18:14 - write this address of Operator just
18:15 - simply R number I want to print let's
18:18 - run this and see what output you will
18:19 - get
18:21 - here see then also you will get address
18:26 - why so because array name name is array
18:29 - name this contains the address of the
18:33 - first element it itself acts as a
18:35 - pointer that is why I no need to write
18:36 - down here address of so to print to
18:40 - access the Base address of the array
18:42 - just simply write down name of array and
18:44 - I have shown you it will give you
18:45 - address right no need to write down the
18:47 - address of operator but if you want to
18:50 - access suppose address of first element
18:53 - second element third element fourth
18:54 - element all the element then obviously
18:57 - you need to write down address
19:00 - of because in Array we have just the
19:03 - Base address of the array in Array name
19:05 - right or you can see the element the
19:07 - address of the first element so simply
19:11 - I'm just printing writing here address
19:13 - of R number 0 1 2 3 4 this is what and
19:16 - the Base address of the array as well
19:18 - right so let's save this and run this
19:21 - let me show you what kind of output you
19:23 - will get
19:25 - here okay you have selected this yes
19:28 - it's okay just run this again there is
19:30 - no error actually so enter the role
19:33 - number 1 2 3 4 uh sorry 4 and five okay
19:38 - address we are getting in this line so
19:40 - you have to put
19:42 - a endl or sln also for new line
19:46 - right now let's run
19:52 - this see addresses this first f8
19:57 - starting two address are same because
20:00 - the Base address of the array as well as
20:03 - the address of first element obviously
20:05 - that is at zero index so that would be
20:07 - same so as you can see these are same
20:10 - and then different if you add four by
20:14 - then you will get the same address in
20:15 - the first address right 8 + 4 12 12 is
20:19 - in hexadecimal it's C right something
20:21 - like this now same see here we are
20:24 - repeating the same line again and again
20:26 - for printing everything for for printing
20:28 - the address so you just put these thing
20:30 - also in a loop right for Loop would be
20:33 - from 0 to 5 and there just print uh
20:37 - address of R number and in bracket just
20:39 - put I that's it so you just do this
20:42 - thing this is assignment for you guys
20:44 - right now this is how memory is to be
20:47 - allocated
20:49 - continuously if you run this again if
20:51 - you just pause the video there write
20:53 - down the address hexadecimal form and
20:56 - then starting take the first address and
20:59 - add four by four by four by you will get
21:01 - the consecutive those same addresses
21:04 - right now next is how to access array
21:07 - elements so let's not print these
21:09 - addresses
21:10 - now now how to access we have entered
21:13 - five R numbers so how to access those
21:15 - five R numbers one way I have told you
21:17 - just write down five C out statement but
21:18 - no that is not I want so we'll just take
21:21 - a four Loop same so here obviously you
21:25 - have to uh declare the cyer in I I mean
21:30 - you have to tell the data type also
21:31 - before using this I because this scope
21:33 - of this I is within this for Loop only
21:35 - so we cannot use this I here if you
21:38 - declare in I here then you can directly
21:42 - use in this for Loop this for Loop
21:43 - throughout the program I is equal to Z
21:46 - without writing this int right I hope
21:48 - you are getting my point so 0 to 5 I ++
21:52 - and how to access the values to print
21:55 - values we use C out to take values to
21:57 - input values we use you seen so see out
22:00 - and just name of the array in subscript
22:04 - the index or the offset so that is I
22:09 - right at first I zero then one then two
22:11 - then three then four so like this we are
22:13 - will'll be able to access all the
22:15 - elements 1 3 4
22:20 - 67 okay you have to decorate it a little
22:24 - bit
22:25 - obviously uh that new line after
22:28 - printing every roll number so just enter
22:32 - roll
22:42 - numbers 13456 78 45 so again it is
22:46 - printing 13456 7845 right before this
22:50 - for Loop just to decorate it a little
22:52 - bit you can just write down the R
22:56 - numbers are like this so if if I run
23:01 - this R numbers are this right so this is
23:04 - how we can access or if any particular R
23:07 - you want to access like at maybe zero
23:11 - element or first r or second R something
23:13 - like this so directly also we can access
23:15 - using index so rather than this for Loop
23:18 - like the role number of First Student is
23:21 - so number of First Student means
23:23 - obviously the first R number would be at
23:25 - zero index so just in subscript just
23:28 - write down
23:30 - zero see the RO number of First Student
23:33 - is 23 so it will print 23
23:36 - here so directly also you can access you
23:39 - can zero or either 1 2 3 4 till 4 right
23:44 - now one thing is if I want to access a r
23:46 - number of R number six so obviously
23:49 - there is no index six because there are
23:51 - only five the AR size is five so index
23:55 - will be from 0 to four but I I am
23:57 - accessing
23:58 - six right so what you think pause the
24:02 - video and just give it a try what it
24:04 - should give I think it should give an
24:06 - error but no it will not give any error
24:09 - it will give a garbage value let me just
24:11 - show you
24:15 - this see the RO number of First
24:17 - obviously this we haven't changed but
24:19 - see the value is any gbas value why so
24:22 - because there is no bound checking in
24:24 - Array this is the major drawback in
24:27 - Array
24:28 - bound checking means it is not checking
24:30 - the boundaries you have to if you're
24:33 - using array this kind of thing you have
24:35 - to take care the array of the size or
24:38 - the boundaries of the arrays right if
24:40 - you will access anything outside of
24:42 - beyond the boundaries it will not give
24:44 - any error it will just give you any
24:45 - garbage value or just unexpected
24:48 - output right so this thing you need to
24:50 - take care so the drawback one drawback
24:53 - is this there is no bound checking in
24:56 - arrays fine and arrays are of fixed size
24:59 - actually and maybe next drawback you can
25:02 - write down like this contains elements
25:04 - of same type right this can be a
25:08 - drawback but advantages are like more
25:11 - than one element we can store under a
25:13 - single variable I'm using arrays and
25:15 - these are simple to use fine second
25:18 - thing is you can directly access any
25:21 - element in the array with the help of
25:23 - index that's it that is very simple
25:25 - accessing is very simple right when you
25:27 - discuss list then accessing is not that
25:29 - simple you cannot directly access any
25:31 - list element you have to start from
25:34 - first first element then you'll go to
25:36 - Second element third element fourth
25:37 - element like this if you want to exess
25:39 - the last element then you have to start
25:41 - from first first second thir four like
25:42 - this right except the case it is a that
25:46 - double link list but that is different
25:50 - you know concept the linked list
25:51 - actually linked list list is in Python
25:54 - but here that is linked list right so
25:57 - after arrays we'll discuss those also so
26:00 - I hope arrays are clear to you guys so
26:03 - this is about 1D arrays actually so in
26:06 - the next video we'll see 2D arrays so
26:08 - now I'll see you in the next then
26:09 - bye-bye take
26:15 - care