00:00 - in the series of learning programming in
00:01 - c we are discussing about operators in c
00:04 - in previous video i have discussed two
00:05 - types of operators arithmetic and
00:07 - assignment operators all the operators
00:10 - with in detail with some examples in
00:13 - this video i am going to talk about
00:14 - increment and decrement operators
00:17 - these are the most confusing operators i
00:19 - guess out of all operators for me
00:22 - these operators was the most confusing
00:23 - during my btec
00:25 - because see these operators we can use
00:27 - into two cases in two types prefix as
00:30 - well as postfix so we are going to
00:32 - discuss all these cases in this video
00:34 - with some examples also you'll see the
00:36 - output like when we use these operators
00:38 - in a program then what should be the
00:40 - output what is the precedence of these
00:41 - operator associativity of these
00:43 - operators all the things we are going to
00:44 - discuss in this video right so now let
00:46 - us discuss what are increment and
00:49 - decrement operators these are unary
00:52 - operators actually
00:53 - increment
00:55 - we can use these
00:57 - in both two cases
00:59 - prefix and postfix you can say
01:02 - pre increment operator post increment
01:04 - operator pre-decrement operator post
01:06 - decrement operator
01:08 - if you write pre means
01:10 - we write
01:11 - this this the the that operator before
01:15 - the operand
01:16 - and post means we write
01:20 - these operators after the operand
01:23 - right like this
01:25 - same with minus minus you can write
01:27 - so plus plus means it is going to
01:29 - increase the value by 1 the of the
01:32 - operand value by 1
01:34 - minus minus decrement operator means it
01:36 - is going to decrease
01:37 - the operand value by 1
01:40 - if i write plus plus x it means x is
01:42 - equal to x plus 1
01:45 - if i write
01:46 - minus minus x or x minus minus it means
01:50 - x is equal to x minus 1
01:53 - right and here this x is what it is
01:56 - operand so now let us discuss about
01:58 - prefix notation so you can say
02:01 - pre
02:02 - increment and pre decrement operators
02:04 - right
02:04 - in prefix notation
02:07 - what will happen
02:08 - the value
02:10 - is first the value is going to be
02:12 - incremented and then we use that value
02:14 - the incremented value the updated value
02:16 - right if we use this one that that
02:19 - increment operators i am discussing
02:20 - about increment operators right then we
02:22 - will discuss decrement see suppose i am
02:24 - taking x is equal to int x is equal to
02:27 - 10
02:28 - and here i am writing suppose i am
02:30 - taking another variable y
02:32 - and here i am writing y is equal to i am
02:35 - discussing this pre
02:37 - means
02:37 - before
02:39 - x
02:41 - suppose i am writing this one so this is
02:42 - what pre-increment operator so now if
02:45 - you print the value here
02:48 - when in program execution suppose you
02:50 - write a complete program let me write
02:53 - you can also include that clear screen
02:55 - and get ch and then you can include that
02:56 - konu dotage i am not including those
02:58 - here so now control will go to here the
03:00 - first line of this main function when
03:02 - you start execution then in x one
03:05 - variable x value would be assigned two
03:07 - bytes and the value is here ten i mean
03:10 - memory would be assigned to x and
03:11 - another variable is y
03:13 - memory would be assigned to this y also
03:15 - suppose memory address is thousand and
03:17 - here we have two thousand
03:19 - i don't know that this i'm just
03:21 - supposing the address and then why we
03:23 - don't have anything we are not initially
03:25 - initializing this y
03:26 - now next line is control will go to next
03:28 - line now y is equal to plus plus x now
03:31 - here we have two operators assignment
03:33 - and
03:34 - that increment operator so
03:37 - precedence of this increment operator is
03:39 - higher than ah assignment operator so
03:41 - first this
03:43 - operation this operator would going to
03:44 - be executed right now this is what pre
03:49 - prefix notation or pre increment pre
03:51 - means first the value would be
03:54 - incremented
03:55 - and then that value would be used
03:58 - in this expression right so now x value
04:01 - is 10 so now x value becomes 11
04:05 - and now this 11 would be assigned now
04:07 - this operator is what it is going to
04:09 - assign whatever the value at right hand
04:11 - side to left hand side so y now becomes
04:13 - 11
04:14 - if you will print x then output is 11 y
04:17 - output is 11
04:19 - right
04:20 - and here suppose you are using now
04:23 - x plus plus
04:26 - in that case
04:27 - in starting x value is 10 we don't have
04:29 - anything in y
04:31 - now i am going to print x and y
04:33 - now what will happen
04:35 - control will go here here first of all
04:38 - that
04:38 - increment operator would be executed now
04:41 - here we have post
04:43 - fixed notation post increment post means
04:46 - first
04:47 - that original value of that operand
04:50 - would be used in this expression and
04:52 - then the value would be updated then the
04:55 - value would be incremented
04:57 - right
04:58 - so now first whatever the value of x
05:01 - that would be used first of all because
05:04 - after here if you suppose you can
05:08 - understand like this
05:09 - if it is post
05:11 - then
05:12 - after the semicolon after the completion
05:14 - of the statement after the semicolon
05:17 - now the value would be incremented
05:20 - before semicolon the value would be same
05:22 - in post in pre value would be
05:25 - incremented first so now x value is what
05:28 - 10 so x value would be used in this
05:31 - expression
05:33 - now x value that original value would be
05:35 - assigned to y so now y is equal to 10
05:40 - and now x would be incremented now x
05:43 - becomes 11
05:45 - so now here x is 11 and y is
05:48 - 10
05:48 - i hope you got it
05:50 - next suppose i am using it same with the
05:52 - decrement operator if you will use minus
05:54 - minus here
05:56 - then
05:57 - at its starting x is this one 10 and y
06:00 - is nothing we don't have we haven't
06:02 - initialized y
06:03 - so now see this is what post decrement
06:07 - it means post means
06:09 - first the original value of this operand
06:12 - would be used
06:13 - in this expression
06:15 - and then it would be decremented then it
06:18 - would be modified original value is 10
06:19 - so 10 would be assigned here
06:22 - and now the value would be decremented
06:24 - that is
06:26 - x minus minus 10 minus minus means
06:29 - value would be decremented by 1 so it
06:31 - becomes 9. now value is 9 and here
06:33 - output is 10
06:35 - if you will use here minus minus x then
06:38 - what should be the output here we have
06:40 - 10 here we have nothing it's starting
06:42 - it is
06:44 - pre
06:45 - in pre-decrement
06:46 - in pre-decrement
06:48 - first of all the value of that operand
06:50 - would be modified would be decremented
06:52 - and then the modified value the updated
06:55 - value would be used
06:56 - in that expression
06:58 - so
06:59 - minus minus x first value of x is 10
07:01 - first of all it would be decremented
07:03 - that is
07:04 - 9
07:05 - it becomes 9 see values would be
07:07 - incremented and decremented or you can
07:09 - say modified in memory
07:12 - right
07:13 - because we have initialized some memory
07:15 - to this and we have stored that value in
07:17 - memory so now whatever operation would
07:19 - be performed that would be on the value
07:21 - which is in memory right
07:23 - and now this 9 9 would be assigned to y
07:27 - updated value so here we have 9 output
07:29 - would be 9 and 9.
07:32 - so this is what you can say that
07:34 - fend off this increment and decrement
07:36 - and prefix
07:37 - and postfix notation of these operators
07:40 - right now
07:42 - the this increment and decrement
07:44 - operator you can use with integer value
07:46 - as well as float value
07:48 - it's fine
07:49 - right here you can use 10.1 and then
07:51 - also you can use this plus plus and
07:53 - minus minus so you can try it out at
07:55 - your own right and let us take one
07:58 - simple example also
08:00 - and see if you are using this line
08:03 - it means
08:04 - you can also write this line how
08:07 - first the value would be decremented x
08:10 - is equal to x minus 1 and then the value
08:12 - would be assigned to y is equal to x
08:16 - these two statements and this line is
08:18 - same and if you are writing like this y
08:20 - is equal to x minus minus
08:22 - how you can write down this statement
08:25 - first value would be assigned
08:27 - to y
08:28 - and then
08:30 - value would be
08:31 - decremented
08:33 - this line is equivalent to
08:35 - these two lines you can also write down
08:37 - this line in the form of these two lines
08:39 - and this in the form of this same with
08:41 - plus plus so now let us write down a
08:43 - simple program and let me show you the
08:46 - output of that program
08:48 - let us take this example
08:50 - simple program i am taking here you can
08:52 - also use that clear screen and get
08:53 - states also i am not writing that
08:55 - complete program but here the control
08:57 - will go here to main function you can
08:59 - see the first statement in main function
09:00 - this is variable declaration so in
09:02 - memory
09:04 - a
09:04 - how many variables four variables would
09:06 - be assigned some memory
09:09 - right and in a we have five and in bcd
09:11 - we don't have anything right there are
09:13 - some addresses of these memory locations
09:16 - now next control will go to here now b
09:19 - is equal to plus plus a plus plus a
09:20 - means
09:22 - it is pre increment right
09:25 - pre-increment mean means first of all
09:27 - the value would be incremented and then
09:29 - the updated value we will use in this
09:32 - expression so a is 5 it becomes 6.
09:35 - and now 6 would be assigned to b now b
09:37 - becomes 6
09:39 - right now control will go to next
09:41 - statement c is equal to plus a plus plus
09:43 - now this is what post increment post
09:46 - means
09:47 - first the value original value would be
09:50 - used in this expression
09:52 - and then that value would be updated
09:55 - so now first of all a is what 6 see we
09:58 - are not using here 5
10:00 - because
10:01 - the the meaning of this line is just to
10:03 - declare these variables now that's it
10:05 - now we are going to
10:07 - operate on the these memories memory
10:10 - locations whatever value is there in
10:11 - this memory location now updated value
10:13 - is here 6 because by executing this line
10:16 - we have already updated value of a6
10:19 - now
10:20 - post means first of all that six would
10:22 - be assigned to c
10:24 - and now the value would be implemented
10:26 - that is seven
10:28 - next line d is equal to plus plus eight
10:30 - this is pre
10:31 - increment so first of all the value
10:33 - would be incremented that is it becomes
10:36 - eight
10:37 - and now eight would be assigned to d
10:39 - that is eight
10:41 - and now if you will print a then output
10:43 - is eight
10:44 - same if you will print b output is 6 c 6
10:47 - and d
10:48 - 8
10:49 - right
10:50 - same you can use here minus minus so
10:52 - there are see many types many examples
10:56 - we can take based on increment and
10:57 - decrement operators i hope you go to the
10:59 - basics what is the meaning of these
11:01 - operators right
11:03 - in a one expression only we can use
11:04 - multiple increment and decrement
11:06 - operators like maybe here here also i
11:08 - can use here like plus and
11:11 - plus plus a
11:12 - or maybe i can use plus plus a minus a
11:15 - plus plus like this in one expression i
11:18 - can use multiple other these
11:20 - increment decrement operators if this is
11:22 - the case then
11:23 - we will check precedence as well as
11:25 - associativity precedence means
11:27 - that these arithmetic operators are
11:29 - having lower precedence this increment
11:32 - decrementer are having a higher
11:33 - precedence and associativity of these
11:35 - increment and decrement operators are
11:37 - what
11:37 - right to left
11:39 - so that
11:40 - some more maybe four or five examples we
11:43 - are going to discuss in next video then
11:45 - you will get a better understanding of
11:47 - these
11:48 - operators but i hope you know the basics
11:51 - you get the basics of these operators
11:52 - right so now i'll see you in the next
11:54 - video till then bye bye take care