00:00 - in the series of learning programming in
00:01 - c I'm going to start a new Concept in C
00:04 - that is arrays in C right we'll discuss
00:07 - everything about array first of all what
00:09 - is need of array what is array the
00:11 - proper definition Declaration of array
00:13 - types of array initialization of array
00:16 - different type of operations uh that you
00:18 - can perform on arrays in C right but all
00:23 - the things I'm going to discuss in
00:24 - detail with minute details so that would
00:28 - be in separate videos in this video I'm
00:30 - going to tell you the basics like what
00:31 - is need of array right why why you use
00:34 - array in C and array in any programming
00:38 - language not in C C C++ and any
00:40 - programming language Java or python
00:42 - anything right what is Nero then we will
00:45 - see proper definition of array and then
00:48 - we will see what declaration of array
00:50 - right and first of all I'll uh I'll know
00:54 - teach you on this whiteboard the logic
00:57 - I'll tell you whatever thing the theory
00:59 - part and and then I'll show you this
01:01 - concept means practical of arrays how
01:04 - arrays can be declared what error you
01:06 - will get if you do this type of
01:07 - Declaration on my laptop right so one
01:10 - thing you need to take care you have to
01:12 - get ready with your laptop first of all
01:14 - if you are you want to loar C
01:15 - programming it's not like that just
01:17 - watch the lecture and that's it you got
01:19 - the concept no you have to be get ready
01:22 - with your laptop with any ID installed
01:24 - in my laptop I have vs code editor so
01:26 - I'll show you there if you don't have
01:28 - please install that thing or any other
01:30 - ID in which you are comfortable right
01:32 - but you have to practice the concept on
01:35 - the same day if you're watching this
01:37 - lecture right now you got this concept
01:39 - arrays you have to practice after this
01:42 - lecture on your laptop if really you
01:44 - want to learn C programming right and
01:46 - that is the biggest mistake every
01:48 - beginner do simple concept it's silly
01:51 - thing no need to practice we will jump
01:53 - direct to the complex concept right a
01:56 - complicated concept that is the biggest
01:58 - mistake even even the concept is very
02:00 - small very simple you have to practice
02:03 - that thing also right so now back to the
02:05 - topic first of all we'll discuss why
02:08 - arrays need of arrays in any programming
02:10 - language here I'm discussing arrays in
02:13 - the context of C programming right I
02:15 - hope everybody is aware about the
02:16 - fundamental data types int float care
02:19 - right now see if I write something like
02:23 - this if you want to store a number if
02:24 - you want to process any number if you
02:27 - want to store in that memory in the
02:28 - computer memory what you need to do you
02:30 - have to declare a variable means you
02:32 - have to you know take a variable and
02:33 - there only we can store what any number
02:36 - you want to store right like int a this
02:39 - is what declaration of a variable of
02:41 - type integer right now here it means
02:45 - what compiler will do what some memory
02:47 - allocation would be Memory would be
02:49 - allocated to this a right a is what name
02:52 - of variable data type is integer now
02:55 - memory is what it's something like this
02:57 - so memory is what these are what bites
02:59 - this is one b one b one bite so this is
03:01 - what memory it's type like a long tape
03:04 - of you can say these are bytes so now in
03:08 - this memory what how many bites would be
03:11 - allocated to this a size of integer is
03:14 - what it depends basically on machine to
03:16 - machine right somewhere it takes two
03:18 - bytes or somewhere in some compiler it
03:21 - takes four bytes whatever I'm using it
03:24 - is it is taking what four bites so we
03:26 - cannot say uh you know directly that in
03:29 - inte will take two byes or integer will
03:31 - take four bytes it can take two also
03:33 - four also it depends on your machine
03:35 - right here I'm taking that is why
03:36 - integer will take what four bites so
03:38 - four bytes would be allocated to this a
03:41 - like suppose from any address address is
03:44 - what suppose this is 1,000 address is
03:47 - what in the form of hexadecimal form but
03:49 - for Simplicity purpose I'm taking just
03:51 - th000 so this is what th000 this is what
03:54 - 1,1
03:56 - 1,2,3 something like this and suppose
03:59 - these four bytes has been allocated to
04:01 - this a 1 2 3 4 four bytes for integer or
04:04 - you will take two bytes right now
04:07 - whatever number if you initialize if you
04:09 - want to store five like I'm initializing
04:11 - five so here this five would be stored
04:14 - first of all it would be converted into
04:16 - binary then it would be stored here
04:18 - right so now for Simplicity purpose I'm
04:20 - not taking these bytes I'm converting it
04:23 - something like this just one box the
04:27 - name of this memory location is a here
04:30 - we have stored five and the address of
04:32 - this is what 1,000 these four bytes Base
04:36 - address is 1,000 so we will see we'll
04:38 - take what address is what th000 right
04:43 - now see if you want to store here
04:45 - another number six I want to store what
04:47 - you will do here six so this five would
04:50 - be overwritten means five is no more now
04:53 - and we have stored six now we want to
04:55 - store seven so now six is no more we
04:58 - have stored seven if it means what I
05:00 - hope you getting my point you can store
05:02 - only one number right if you want to
05:04 - store another number the previous number
05:06 - has gone right but practically you you
05:11 - want to process you have to process
05:13 - large amount of data if suppose I want
05:16 - to in my class I have 60 students so now
05:19 - I want to store R numbers of 60 students
05:22 - now how I can store one way is what I
05:25 - can declare what a b c like int a int B
05:29 - and c and 60 variables you can declare
05:32 - in and in one variable I can store RO
05:35 - number one RO number two RO number three
05:37 - like this obviously this is silly thing
05:40 - no need I mean nobody wants this kind of
05:43 - thing if you do this kind of thing your
05:45 - program will be what filled with uh
05:48 - declaration and this initialization of
05:50 - variables only we don't want this kind
05:51 - of thing right so that is why what I
05:54 - want can we do something like this under
05:57 - one variable name only I can store 60
06:01 - numbers yes that is possible with the
06:04 - help of arrays now that is called
06:07 - arrays right under one variable name I
06:10 - can store more than one data item this
06:14 - is what suppose considering it as a
06:16 - number or a data item so here in Array
06:18 - we can store more than one data item
06:21 - right but it is not the complete
06:23 - definition complete definition I'll tell
06:24 - you step by step right so now if suppose
06:27 - I want to store R number of six students
06:30 - of my class then and type obviously you
06:34 - have to tell the compiler the type based
06:37 - on that only you have the compiler will
06:39 - allocate you space the in memory man in
06:42 - memory memory manager will allocate you
06:45 - space so suppose R number are obviously
06:47 - of integer type I'm taking what name of
06:51 - here names I'm taking a only and now you
06:55 - have to tell the size means how many
06:57 - number you want to store
07:01 - 60 right in these brackets size is 60 so
07:07 - this is what array now here data type A
07:11 - is what name of array if you want to
07:14 - take any name any a b c or anything you
07:17 - can take better to take a meaningful
07:20 - name suppose I want to store R number so
07:22 - better to take here what name what R
07:24 - number so I'm taking here what
07:28 - int R number and size is
07:32 - 60 so name of my array is R number size
07:37 - is 60 and data type is integer so this
07:40 - is what declaration of array this is how
07:42 - you declare an array right so now how
07:45 - many bytes would be allocated to this
07:49 - when this would be compiled then how
07:50 - many bytes would be allocated integer
07:53 - will take four
07:54 - bytes into how many number you want to
07:58 - store how many item
08:00 - 60 so how many bytes would be
08:04 - allocated 240 bytes would be allocated
08:08 - here right and how these 240 bytes would
08:11 - be allocated in consecutive memory
08:13 - locations continous it's not like that
08:16 - here allocated four bytes then leaves uh
08:20 - leave some space then 10 bytes then
08:22 - leave some space then uh in another
08:25 - place 20 bytes something like this no
08:28 - these 240 by should be located in
08:32 - consecutive uh memory locations like
08:35 - from 1,000 it is going to start suppose
08:37 - from 1,000 it is going to start till how
08:40 - many bytes 1,000 and 240 then how many
08:44 - bytes till 1 12 4 0 the address would be
08:48 - 1 12 4 0 till then continuous the memory
08:51 - locations would be allocated to this and
08:53 - now you can store here 60
08:55 - numbers right so now I hope need is
08:58 - clear to you
08:59 - why array what is need of array now what
09:01 - is array here just I'm taking a simple
09:05 - array in a and size is only five I'm
09:09 - taking right so now the Declaration is
09:12 - also clear to you how to declare array
09:15 - General syntax if you write then what
09:16 - you will write here data
09:19 - type then what name of
09:23 - array and then in this bracket what size
09:27 - of
09:28 - aray
09:30 - and semicolon this is what general
09:32 - syntax to declare array this is 1D array
09:35 - 2D array is also there multi-dimensional
09:37 - arrays also there 1D array means here we
09:39 - have only one row and multiple columns
09:42 - right now see the proper definition of
09:44 - array
09:46 - see here one one point you know it is
09:50 - what collection of more than one data
09:53 - item right but second point is what the
09:57 - condition here is what or you can say
09:58 - the const here is what all the data
10:02 - items should be of same type like
10:05 - suppose this is what integer the name of
10:08 - I mean the data type of the are is what
10:10 - integer so all the five numbers must be
10:14 - of integer type right it's not like that
10:17 - you can store two integer type two
10:20 - character and one float no all should be
10:23 - of integer type like I can store here
10:26 - five number 1 2 3 4 4 5 or maybe 10 20 0
10:32 - - 1
10:34 - 0 these are of integer type this is
10:36 - correct this is correct but if you want
10:39 - to store here 10 20 and uh 1.2 and uh 0
10:45 - and
10:46 - 2.2 this is not correct these are what
10:50 - integer but this is what float so this
10:54 - is
10:55 - wrong so the condition is what you can
10:58 - store more than one data item but all
11:00 - the data items should be of same type
11:03 - this is the condition right or you can
11:05 - say that homogeneous data item
11:07 - collection of array is what collection
11:09 - of homogeneous data items and array can
11:12 - be of any type like here this is what
11:14 - I'm taking integer integer type of array
11:17 - you can also take float or B and size is
11:22 - 10 here all the 10 dat item should be of
11:24 - float type you can also take character
11:27 - array c c
11:30 - 10 here all the data items the 10 data
11:33 - items you want to Sol in this ARR should
11:35 - be of character type so now you what you
11:38 - can say array is what collection of
11:39 - homogeneous data items which are stored
11:42 - in how contigous memory locations I'll
11:46 - also discuss memory representation of
11:48 - array 1D array 2D array also
11:50 - multi-dimensional array in a separate
11:52 - video right when when once we have
11:55 - complete all the concepts of arrays
11:57 - everything about arrays then you can
11:59 - form a complete proper definition right
12:01 - but here in this for this video just uh
12:04 - you have to uh you know remember what
12:06 - collection of data items which are of
12:09 - same type or collection of homogeneous
12:10 - data items which are stored in contigous
12:12 - memory locations right now I guess need
12:16 - is clear and what is array is clear now
12:17 - Declaration of array declaration is also
12:20 - clear clear this is the general syntax
12:22 - right but now see here you have to take
12:25 - care you have to take care some points
12:27 - something like this if I write here
12:29 - something like
12:32 - this I'm not specifying the size but
12:37 - when you will write this line and here
12:38 - semicolon it will give error the
12:41 - compiler will give error you have to
12:42 - specify the size one thing you need to
12:44 - take care second thing what you need to
12:45 - take care about declaration here you can
12:47 - only specify what any constant like 5 10
12:54 - 15 anything constant but here you cannot
12:57 - write minus like Min - 5 this would be
13:01 - incorrect so you can say what more
13:03 - specifically you can say this should be
13:05 - a
13:07 - positive number positive constant or if
13:11 - you say more specifically then what you
13:13 - can say this is also correct if you
13:15 - declare something like this in a 2 +
13:20 - 2 is this correct yes this is correct 2
13:23 - + 2 is equivalent to 4 and four is what
13:26 - positive constant okay fine this is also
13:30 - fine in a 3
13:33 - into 2 3 into 2 is 6 6 is also constant
13:36 - this is also fine you can declare
13:38 - something like this and what you can
13:41 - declare you can also declare something
13:43 - like this int a and here you can write
13:45 - 10 by
13:47 - 2 this is also fine right that would be
13:52 - five right and if you write something
13:55 - like this 11 by 2 that is also five now
13:58 - so this is
13:59 - what you can say it's a uh expression
14:02 - also so one thing you need to take care
14:04 - the size of are should be a
14:06 - positive expression can be positive
14:09 - regular expression right this this is
14:12 - what expression only because here we are
14:13 - writing oper and prer so this is what
14:16 - expression this is right this is right
14:18 - this is also right this is incorrect
14:20 - blank is also incorrect right and if you
14:23 - write something like this int suppose
14:25 - I'm writing a and u here another
14:29 - variable B is equal 11 by 2 this would
14:32 - also give error right or you have to
14:35 - tell me you have to try this and you
14:37 - have to tell me is it correct or not you
14:41 - can also declare before this line int B
14:45 - because I'm taking another variable B
14:47 - int B and in a a is equal to in bracket
14:50 - you will say B is equal to any
14:51 - expression 11 by2 so you have to tell me
14:54 - this will give error or this is correct
14:56 - and this is what 1D array because here
14:58 - we have only when you declare something
15:01 - like this I'm taking this example then
15:03 - what five 1 2 3 4 five this name of this
15:09 - array is what a right and here we can
15:12 - store five numbers so this is what four
15:16 - bytes this is what four bytes how many
15:18 - bytes total have been allocated to this
15:21 - array 4 into 5 that is 20 bines suppose
15:24 - address is started from 1,000 then this
15:26 - address would be what next element
15:29 - address of next element would be
15:31 - 104 four bytes for one integer then 8
15:34 - then 12 then
15:35 - 1,6 this is how in contigous memory
15:38 - location 20 byes should be allocated to
15:40 - this are and one more thing in uh this
15:43 - declaration see you cannot write
15:44 - something like this int a and size is n
15:49 - suppose you are taking in int n and you
15:51 - are writing here the variable no this
15:54 - should be what a constant so this is
15:56 - what incorrect right you have to try it
15:59 - at your own but you can use
16:04 - macros in that case you can write here
16:07 - what that whatever macro name you take
16:11 - how macros see I hope you are aware
16:14 - about macros uh before main function we
16:17 - declare what hash Define macro name is
16:20 - I'm taking n and size I'm taking five
16:23 - here we will write what header files and
16:26 - then in main function what I'm declaring
16:29 - array in a and here I can take size what
16:33 - the name of the macro is
16:35 - n this is correct that would be replaced
16:39 - with this five this is what macro and
16:43 - it's better to when you use array it's
16:45 - better to use macros to Define to the
16:49 - size of the array why it is better to
16:52 - use macros that I'll show you in next
16:54 - video right so that that is correct but
16:57 - this is what not
16:59 - correct so everything the Practical we
17:02 - will see in next video only I think
17:04 - that's it for this video in the next
17:05 - video I'll I'll tell you what uh
17:08 - initialization of arrays right and I'll
17:12 - show you this this macro is this correct
17:14 - or not and why it is better to use
17:17 - macros when we are you know dealing with
17:20 - array right on my laptop I'll show you
17:23 - in the next video but for this video
17:25 - that's it and you have to practice at
17:27 - your own you have to try all is
17:28 - declaration whether these are correct or
17:30 - not maybe I'm wrong whether these are
17:32 - you know giving error or not one more
17:34 - thing you have to try what int a and the
17:37 - size is zero is this correct or not this
17:40 - declar declaration correct or not right
17:43 - so you have to tell me in com comment
17:45 - box for this and this you have to try
17:47 - these for your own right I'll show you
17:50 - on my laptop in next video right so now
17:53 - I think that's it for this video I hope
17:54 - you are clear with the need of array why
17:56 - array uh definition of array
17:59 - not proper definition we have discussed
18:01 - because uh all the properties we are
18:03 - discussing one by one in all the videos
18:05 - but that whatever we have discussed in
18:07 - this video that you I think you are
18:09 - cleared with that thing and the
18:10 - Declaration of array and different
18:12 - different types of Declaration how you
18:13 - can declare array right so I'll see you
18:16 - in the next video till then bye-bye take
18:17 - care