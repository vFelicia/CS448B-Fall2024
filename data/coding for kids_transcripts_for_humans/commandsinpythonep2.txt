With timestamps:

00:00 - [Music]
00:08 - hi guys welcome back to
00:10 - ep 2 of python um and today i'm going to
00:14 - be showing you
00:15 - some basic codes and um
00:18 - yeah so why don't we start going into it
00:22 - so the basic codes is like printing
00:25 - variables doing math and printing
00:28 - and like types of um variables like
00:32 - boolean
00:33 - uh integer uh
00:36 - yeah stuff like that okay strings yeah
00:39 - now i'm going to show you
00:41 - so first of all in here you click
00:44 - add new file i'm going to name it
00:48 - type 2 and remember to
00:52 - do dot py which means
00:55 - python or else you won't be able to i
00:58 - mean you wouldn't be able to do the code
01:00 - but it's not going to be python so once
01:02 - you do that click enter
01:03 - okay you can resolve this back and
01:07 - um open up the terminal
01:11 - uh terminal okay right here
01:14 - nice now what we do is i'm going to
01:17 - start with the basic stuff first
01:20 - so um we already did commentary right
01:23 - yeah okay we did
01:25 - so today right now we're going to be
01:28 - looking
01:28 - at uh
01:31 - [Music]
01:33 - oh yeah printing numbers so
01:36 - not not only can you print uh words and
01:40 - numbers but you can also print uh
01:43 - letters and strings so let me just show
01:46 - you
01:51 - this and then um instead of just a
01:54 - string
01:55 - and letters we could do negative one
01:58 - or
02:02 - whoops
02:05 - negative one or zero
02:10 - or we could even do
02:14 - one like that so yeah
02:17 - we could do that and let's click play
02:21 - negative one zero and one there
02:24 - nice so now we're going to do some
02:27 - quick really quick math okay
02:30 - so pretend like um you want to
02:34 - like uh do some calculations
02:38 - and you're tired and you don't want to
02:40 - like calculate like the 10
02:42 - um 150 plus
02:45 - 150 you wouldn't have to come and
02:48 - calculate that
02:49 - like 150 150
02:52 - oh 300 and then you have to do it this
02:54 - one automatically does it for you
02:56 - the visual studio will just translate
03:00 - all this into 300
03:03 - okay so watch 300 right there
03:07 - see that so you won't have to come back
03:09 - to calculate stuff
03:12 - now that's um simple maps first and you
03:15 - can
03:16 - even print boolean which means true or
03:19 - false
03:20 - so let's see how about we do something
03:23 - like this
03:25 - okay and then we print
03:30 - um true like that
03:33 - remember it needs to be capitalized for
03:35 - boolean if you don't capitalize it
03:38 - it's not gonna work okay so remember to
03:41 - capitalize it
03:42 - and now once you play as you can see 300
03:46 - and it's true so yeah that's it
03:49 - for um the simple stuff moving on
03:53 - to uh tabbing and new space
03:56 - so not only can you type like this and
04:00 - you would have to go to the next line
04:01 - next line
04:02 - it's kind of annoying right don't you
04:03 - think so instead of doing that
04:06 - what you could do is this and then
04:10 - for slash um i mean for a
04:13 - new tab you click back slash then you
04:17 - do t for tab after that you can type
04:20 - whatever you want like
04:22 - false pretend oops you can't do that i
04:26 - don't think you can put
04:27 - um backslash t does that work
04:32 - which will yeah okay yeah for that that
04:35 - backspace there's a slash
04:38 - and now let's pretend let's add a number
04:40 - so five hundred
04:45 - say tax error
04:49 - oh wait let me just
04:52 - try something else i'm not that advanced
04:55 - either so we're
04:56 - basically on the same level i'm just
04:57 - learning from my tutorials and i'm going
05:00 - to like share them with you
05:02 - so um we're learning as we're going okay
05:05 - so
05:05 - let's do a number instead so 500
05:10 - and um
05:13 - 100 that work
05:16 - let's let's try it no
05:21 - oh guys i'm so sorry what you need to do
05:25 - i totally forgot this step you have to
05:28 - put
05:29 - quotation marks in here then it will
05:31 - work
05:32 - oh see like that oh
05:36 - learning as we're going okay after that
05:40 - uh we i think we could do false and true
05:42 - now since we know we need
05:44 - quotation marks wait why
05:48 - does does true and false
05:53 - being work in quotation marks
05:58 - that's a question so i'm still a
06:00 - beginner
06:01 - i might not knows as we go along i think
06:04 - we will figure it out
06:05 - let's just try first quotation mark
06:08 - true um backslash
06:12 - and this is for new tab do backslash
06:15 - n false
06:19 - it shouldn't have any errors but it's
06:21 - not a boolean instead it's a text
06:23 - so i'm not sure if you can do it like
06:26 - that
06:26 - you can do it like as a text but you
06:28 - can't do it as a movie ah nice
06:31 - okay moving on to uh so
06:34 - now you both learned i mean you all
06:37 - learned that
06:38 - um slash and equal
06:42 - backslash and sorry backslash
06:45 - backslash n equals to
06:48 - new line and
06:52 - backslash t equals to
06:55 - mu tab okay here and that's the common
06:58 - sign remember
06:59 - nice moving on and this one
07:03 - is going to get a little bit more
07:04 - complicated so
07:06 - what i'm looking at is um
07:10 - so okay variables
07:14 - let me just show you what variables are
07:16 - first variables
07:18 - um is like pretend a box
07:21 - that you can name and you can put
07:25 - numbers strings letters
07:28 - whatever into it and it'll keep that for
07:31 - you and you can pull it out whenever you
07:32 - want
07:33 - that's a variable okay um now a variable
07:36 - is like this how you activate a variable
07:40 - is pretend you want to name it um what
07:43 - should we need
07:44 - bob okay bob
07:48 - and put an equal sign bob
07:51 - equals two one okay pretend
07:54 - now if we were to print bob do you think
07:58 - that it would be bob or one
08:01 - one right so print
08:08 - now for printing a variable you won't
08:12 - need a quotation because quotations are
08:14 - only for text
08:15 - and this one is not a text so yeah um
08:19 - if you print bob it should be
08:22 - one let's see let's clear this first
08:25 - let's comment out this
08:34 - wait one sec oh you can't do that
08:38 - you can do that with um c language so i
08:40 - thought you could do it
08:44 - oops let's just calm down this so
08:48 - our terminal won't get in the way
08:53 - right there okay nice so now that we
08:55 - have only these
08:56 - um three things two things let's just
08:59 - clear the terminal
09:02 - oh no i cleared it already and it
09:04 - cleared again which means i deleted it
09:06 - okay it's fine we're coming back and now
09:09 - let's press
09:10 - play one as you can see
09:13 - if you want it to say mob
09:16 - equals to one which is
09:20 - kind of difficult because bob is
09:23 - now turning to a string okay forget
09:25 - about variables per sec
09:27 - if you want to combine um
09:31 - you're going to combine a string with an
09:33 - integer
09:34 - it's kind of complicated because they're
09:36 - not compatible with each other
09:37 - let's try so here is
09:40 - a string right now we do
09:44 - add which means to connect each other
09:47 - add one okay
09:48 - it's going to say syntax error right
09:51 - here can only
09:52 - con con concaternate
09:55 - um string not integer so
09:59 - what we need to do is we need to turn
10:01 - this into str
10:02 - right right in front of the one we turn
10:05 - to
10:06 - str
10:10 - no oh okay all you need to do
10:14 - is turn this into a variable so let's
10:17 - just delete
10:18 - valve or set okay str
10:22 - and then something like this bob there
10:24 - we go
10:25 - and now it should work since bob equals
10:27 - to one
10:29 - bob plus string bob which is one
10:32 - will equal to bob one
10:36 - yes there we go good okay
10:40 - now let's just try without the string
10:44 - okay this is without the string syntax
10:47 - error
10:47 - okay good so we need to have
10:51 - string in front of it and two
10:53 - parenthesis for bob which is
10:55 - um which means that bob is a variable so
10:57 - that's how you put a variable combined
11:00 - with an integer so um this is the
11:04 - variable
11:04 - that's the string combined together and
11:07 - you bought one
11:08 - if you don't have the string it won't
11:10 - work or you could just put str it just
11:12 - depends on you
11:14 - sdr string is the same thing okay
11:17 - next one is um
11:20 - naming functions naming functions is
11:23 - very important
11:25 - this one i'm going to explain to you so
11:28 - there are three rules of naming
11:32 - one you cannot use a special
11:35 - letter for variable such as uh
11:39 - dollar signs andersand
11:42 - um like
11:46 - uh ads stuff like that you can't do that
11:49 - instead
11:49 - uh the only thing you can use in front
11:52 - of your
11:53 - uh variable name is the underscore
11:57 - like that then you could type um
12:00 - in but if you put for example
12:05 - dollar sign equals to 10
12:08 - okay pretend and then you print
12:14 - and you print dollar sign you think
12:16 - it'll work
12:18 - no right because as you know
12:21 - this you can't do it because you can't
12:25 - start with an unusual letter
12:27 - however if
12:30 - we name it underscore like this
12:33 - you think it'll be evil yes
12:38 - because um no you need a letter behind
12:41 - it i'm sorry i'm sorry
12:42 - you know lecture behind this like one
12:45 - two one here and there's
12:48 - still not experiencing some technical
12:51 - difficulties please stand by
12:56 - okay um moving back to
12:59 - the dollar sign so what happens is that
13:02 - uh the dollar sign doesn't work but i'm
13:05 - surprised that the
13:06 - underscore doesn't work either
13:10 - except for the underscore i wrote that
13:13 - when i was learning
13:14 - so this is my little learning pad that i
13:17 - keep by so i wouldn't
13:19 - lose any information oh
13:23 - i get it okay so oh
13:27 - so um not only can you not use
13:30 - an underscore like alone
13:34 - you have to have
13:39 - wait crucial moment what if you do
13:43 - underscore boom
13:48 - it works okay guys i just realized
13:51 - something
13:52 - if you put the variable underneath the
13:55 - print
13:56 - they won't know what this is
13:59 - so you would need to put this in front
14:02 - oh i'm
14:02 - so dumb okay now we're just going to try
14:06 - out the dollar sign again
14:09 - okay so
14:12 - now that shouldn't work because yep the
14:16 - dollar sign
14:16 - isn't uh um is an unusual letter so it
14:20 - doesn't work
14:21 - moving on to the second rule the second
14:24 - rule
14:25 - is that um if you
14:28 - there is some keyword that you can't use
14:30 - like d f
14:32 - you can't use that okay let's pretend
14:35 - e f you cannot use that at all
14:38 - because it's a keyword of python and if
14:41 - you use it
14:43 - like you won't be able to like it does
14:46 - that and it's not
14:48 - you know it's not what we want we only
14:50 - want 10
14:51 - and it's invalid too so yeah you can use
14:54 - def
14:55 - and there's some more keywords you can
14:57 - search it up in the internet
14:58 - like python keywords and you'll find a
15:01 - lot
15:02 - and then that's the um that's the words
15:04 - you can't
15:05 - use for your variable name now
15:08 - third rule is case sensitive case
15:11 - sensitive
15:12 - meaning that your uppercase and
15:14 - lowercase
15:16 - are really important so your uppercase
15:19 - like pretend if you name your
15:24 - um your uh variable like
15:30 - name wait wrong place
15:36 - name something like that and then in
15:38 - here
15:40 - you put name
15:44 - it won't work name
15:47 - is not defined see if however you change
15:51 - this to name
15:52 - lowercase then it will print 10 normal
15:56 - so yeah it's also really case sensitive
15:59 - remember to
16:00 - check your variable names if you're
16:03 - going to put capitalize remember it's
16:04 - capitalized okay
16:06 - okay moving on to the last one
16:10 - this one is to add a variable
16:14 - with a flow okay last time it was a
16:17 - variable with a string right
16:19 - now this time it was a very is the
16:21 - variable with a float so let me just
16:23 - show you how to do that
16:24 - first of all let's set bob right here to
16:27 - a flow
16:28 - float meaning that it's a decimal an
16:31 - integer is a whole number
16:33 - a float is a decimal okay so
16:36 - a flow can hold both whole numbers and
16:39 - decimals
16:40 - but it just requires a little bit more
16:42 - like space i'm pretty sure
16:45 - so yeah float is decimals and integers
16:49 - is whole numbers just don't get mixed up
16:51 - okay
16:52 - so now let's send bob to a float
16:56 - 1.9 pretend let's do some easy equations
17:00 - set name right here to two okay
17:06 - one sec uh okay okay
17:11 - oh okay so what you do
17:15 - is when you print it you print
17:19 - something like this
17:22 - um so we're gonna put make it
17:26 - to 21.9 i'm pretty sure so
17:30 - we do something like name
17:38 - name plus
17:41 - uh float
17:47 - and then parentheses bob
17:52 - and then it will automatically calculate
17:55 - right yes
17:55 - 3.9 so it adds it up i'm i'm wrong 21.9
18:01 - i'm bad at math or i'm just okay
18:04 - so something like that um 3.9
18:08 - but we don't want that instead we want
18:11 - like
18:12 - um some like connecting it together okay
18:15 - so this is uh not a string
18:18 - plus flow plus a float but it's
18:22 - just a variable plus float
18:25 - so let's try string plus float but the
18:28 - variable is a string
18:30 - so um 2 is now
18:34 - a text now it's going to be
18:37 - 2 1.9 21.9
18:41 - okay since name is now
18:45 - a string
18:49 - not float okay
18:54 - um
18:56 - so what happened was that
19:00 - name was a variable right
19:03 - but we used it as a text
19:07 - so instead of that why don't we just do
19:10 - two so that worked
19:13 - you can only do it for float to strip
19:16 - print
19:18 - [Music]
19:20 - so i guess that we can't do this
19:24 - i'm just going to show you some
19:25 - equations this is going to be some maths
19:28 - okay so i'm going to show you maths
19:31 - let me just delete all this okay so the
19:34 - math
19:35 - is quite simple it's not that hard okay
19:38 - so
19:39 - um some x plus y some algebra okay
19:43 - so for 10 let's say like we're going to
19:46 - set a variable
19:47 - x equals to 10
19:51 - y equals to
19:55 - nine okay and then we're going to say
20:00 - um what about it
20:06 - z equals to
20:12 - x minus y there
20:16 - okay and then we're gonna print
20:20 - z like that what do you think will
20:22 - happen
20:24 - it's going to be one right okay let's
20:26 - see
20:27 - one right there now what if we want to
20:31 - combine
20:32 - one with
20:36 - um let's say 9.1
20:39 - okay so we could do
20:42 - we could take a step further and add
20:46 - the um the one with another thing
20:50 - so we could go like once they print that
20:53 - we could
20:55 - do something like add in here z
21:00 - plus this is
21:03 - a then okay
21:08 - a equals to
21:12 - um a equals to three point
21:17 - so it should be 4.9 okay so
21:20 - uh not okay so
21:25 - float
21:28 - hey there okay let's try that
21:32 - boom 4.9 yeah that's correct
21:36 - so that wraps it up for this lesson um i
21:39 - hope you
21:39 - found this helpful in the slightest bit
21:43 - if not uh well
21:46 - um i'm like sorry
21:49 - so yeah see you in the next episode of
21:51 - python
21:53 - see you next time

Cleaned transcript:

hi guys welcome back to ep 2 of python um and today i'm going to be showing you some basic codes and um yeah so why don't we start going into it so the basic codes is like printing variables doing math and printing and like types of um variables like boolean uh integer uh yeah stuff like that okay strings yeah now i'm going to show you so first of all in here you click add new file i'm going to name it type 2 and remember to do dot py which means python or else you won't be able to i mean you wouldn't be able to do the code but it's not going to be python so once you do that click enter okay you can resolve this back and um open up the terminal uh terminal okay right here nice now what we do is i'm going to start with the basic stuff first so um we already did commentary right yeah okay we did so today right now we're going to be looking at uh oh yeah printing numbers so not not only can you print uh words and numbers but you can also print uh letters and strings so let me just show you this and then um instead of just a string and letters we could do negative one or whoops negative one or zero or we could even do one like that so yeah we could do that and let's click play negative one zero and one there nice so now we're going to do some quick really quick math okay so pretend like um you want to like uh do some calculations and you're tired and you don't want to like calculate like the 10 um 150 plus 150 you wouldn't have to come and calculate that like 150 150 oh 300 and then you have to do it this one automatically does it for you the visual studio will just translate all this into 300 okay so watch 300 right there see that so you won't have to come back to calculate stuff now that's um simple maps first and you can even print boolean which means true or false so let's see how about we do something like this okay and then we print um true like that remember it needs to be capitalized for boolean if you don't capitalize it it's not gonna work okay so remember to capitalize it and now once you play as you can see 300 and it's true so yeah that's it for um the simple stuff moving on to uh tabbing and new space so not only can you type like this and you would have to go to the next line next line it's kind of annoying right don't you think so instead of doing that what you could do is this and then for slash um i mean for a new tab you click back slash then you do t for tab after that you can type whatever you want like false pretend oops you can't do that i don't think you can put um backslash t does that work which will yeah okay yeah for that that backspace there's a slash and now let's pretend let's add a number so five hundred say tax error oh wait let me just try something else i'm not that advanced either so we're basically on the same level i'm just learning from my tutorials and i'm going to like share them with you so um we're learning as we're going okay so let's do a number instead so 500 and um 100 that work let's let's try it no oh guys i'm so sorry what you need to do i totally forgot this step you have to put quotation marks in here then it will work oh see like that oh learning as we're going okay after that uh we i think we could do false and true now since we know we need quotation marks wait why does does true and false being work in quotation marks that's a question so i'm still a beginner i might not knows as we go along i think we will figure it out let's just try first quotation mark true um backslash and this is for new tab do backslash n false it shouldn't have any errors but it's not a boolean instead it's a text so i'm not sure if you can do it like that you can do it like as a text but you can't do it as a movie ah nice okay moving on to uh so now you both learned i mean you all learned that um slash and equal backslash and sorry backslash backslash n equals to new line and backslash t equals to mu tab okay here and that's the common sign remember nice moving on and this one is going to get a little bit more complicated so what i'm looking at is um so okay variables let me just show you what variables are first variables um is like pretend a box that you can name and you can put numbers strings letters whatever into it and it'll keep that for you and you can pull it out whenever you want that's a variable okay um now a variable is like this how you activate a variable is pretend you want to name it um what should we need bob okay bob and put an equal sign bob equals two one okay pretend now if we were to print bob do you think that it would be bob or one one right so print now for printing a variable you won't need a quotation because quotations are only for text and this one is not a text so yeah um if you print bob it should be one let's see let's clear this first let's comment out this wait one sec oh you can't do that you can do that with um c language so i thought you could do it oops let's just calm down this so our terminal won't get in the way right there okay nice so now that we have only these um three things two things let's just clear the terminal oh no i cleared it already and it cleared again which means i deleted it okay it's fine we're coming back and now let's press play one as you can see if you want it to say mob equals to one which is kind of difficult because bob is now turning to a string okay forget about variables per sec if you want to combine um you're going to combine a string with an integer it's kind of complicated because they're not compatible with each other let's try so here is a string right now we do add which means to connect each other add one okay it's going to say syntax error right here can only con con concaternate um string not integer so what we need to do is we need to turn this into str right right in front of the one we turn to str no oh okay all you need to do is turn this into a variable so let's just delete valve or set okay str and then something like this bob there we go and now it should work since bob equals to one bob plus string bob which is one will equal to bob one yes there we go good okay now let's just try without the string okay this is without the string syntax error okay good so we need to have string in front of it and two parenthesis for bob which is um which means that bob is a variable so that's how you put a variable combined with an integer so um this is the variable that's the string combined together and you bought one if you don't have the string it won't work or you could just put str it just depends on you sdr string is the same thing okay next one is um naming functions naming functions is very important this one i'm going to explain to you so there are three rules of naming one you cannot use a special letter for variable such as uh dollar signs andersand um like uh ads stuff like that you can't do that instead uh the only thing you can use in front of your uh variable name is the underscore like that then you could type um in but if you put for example dollar sign equals to 10 okay pretend and then you print and you print dollar sign you think it'll work no right because as you know this you can't do it because you can't start with an unusual letter however if we name it underscore like this you think it'll be evil yes because um no you need a letter behind it i'm sorry i'm sorry you know lecture behind this like one two one here and there's still not experiencing some technical difficulties please stand by okay um moving back to the dollar sign so what happens is that uh the dollar sign doesn't work but i'm surprised that the underscore doesn't work either except for the underscore i wrote that when i was learning so this is my little learning pad that i keep by so i wouldn't lose any information oh i get it okay so oh so um not only can you not use an underscore like alone you have to have wait crucial moment what if you do underscore boom it works okay guys i just realized something if you put the variable underneath the print they won't know what this is so you would need to put this in front oh i'm so dumb okay now we're just going to try out the dollar sign again okay so now that shouldn't work because yep the dollar sign isn't uh um is an unusual letter so it doesn't work moving on to the second rule the second rule is that um if you there is some keyword that you can't use like d f you can't use that okay let's pretend e f you cannot use that at all because it's a keyword of python and if you use it like you won't be able to like it does that and it's not you know it's not what we want we only want 10 and it's invalid too so yeah you can use def and there's some more keywords you can search it up in the internet like python keywords and you'll find a lot and then that's the um that's the words you can't use for your variable name now third rule is case sensitive case sensitive meaning that your uppercase and lowercase are really important so your uppercase like pretend if you name your um your uh variable like name wait wrong place name something like that and then in here you put name it won't work name is not defined see if however you change this to name lowercase then it will print 10 normal so yeah it's also really case sensitive remember to check your variable names if you're going to put capitalize remember it's capitalized okay okay moving on to the last one this one is to add a variable with a flow okay last time it was a variable with a string right now this time it was a very is the variable with a float so let me just show you how to do that first of all let's set bob right here to a flow float meaning that it's a decimal an integer is a whole number a float is a decimal okay so a flow can hold both whole numbers and decimals but it just requires a little bit more like space i'm pretty sure so yeah float is decimals and integers is whole numbers just don't get mixed up okay so now let's send bob to a float 1.9 pretend let's do some easy equations set name right here to two okay one sec uh okay okay oh okay so what you do is when you print it you print something like this um so we're gonna put make it to 21.9 i'm pretty sure so we do something like name name plus uh float and then parentheses bob and then it will automatically calculate right yes 3.9 so it adds it up i'm i'm wrong 21.9 i'm bad at math or i'm just okay so something like that um 3.9 but we don't want that instead we want like um some like connecting it together okay so this is uh not a string plus flow plus a float but it's just a variable plus float so let's try string plus float but the variable is a string so um 2 is now a text now it's going to be 2 1.9 21.9 okay since name is now a string not float okay um so what happened was that name was a variable right but we used it as a text so instead of that why don't we just do two so that worked you can only do it for float to strip print so i guess that we can't do this i'm just going to show you some equations this is going to be some maths okay so i'm going to show you maths let me just delete all this okay so the math is quite simple it's not that hard okay so um some x plus y some algebra okay so for 10 let's say like we're going to set a variable x equals to 10 y equals to nine okay and then we're going to say um what about it z equals to x minus y there okay and then we're gonna print z like that what do you think will happen it's going to be one right okay let's see one right there now what if we want to combine one with um let's say 9.1 okay so we could do we could take a step further and add the um the one with another thing so we could go like once they print that we could do something like add in here z plus this is a then okay a equals to um a equals to three point so it should be 4.9 okay so uh not okay so float hey there okay let's try that boom 4.9 yeah that's correct so that wraps it up for this lesson um i hope you found this helpful in the slightest bit if not uh well um i'm like sorry so yeah see you in the next episode of python see you next time
