With timestamps:

00:01 - hello everybody welcome back to another
00:02 - episode of python go
00:04 - today we're going to be um i'm going to
00:06 - be giving you a brief overview on
00:08 - modules and packages
00:09 - in python so let's begin
00:14 - so first off what are modules and
00:16 - packages well packages
00:18 - is just a way of saying a folder to
00:20 - store modules in
00:23 - and inside of the packages there can be
00:25 - multiple modules a module is a dot py
00:28 - file
00:28 - like pikachu.py or magikarp.py
00:33 - a module is any dot py file so any
00:35 - python file
00:36 - is classified as a module inside of the
00:39 - module there can be multiple
00:42 - objects of python such as classes
00:45 - variables and functions
00:48 - the what are the benefits of using
00:50 - modules well number one
00:52 - it's simple number two it's maintainable
00:55 - and number three
00:55 - it's reusable and these three uh
00:59 - benefits are pretty much gonna guarantee
01:01 - you faster coding
01:03 - and more efficient coding
01:06 - i'm going to show you some of the ways
01:08 - you can import a module
01:09 - and keep in mind while i'm talking i'm
01:11 - going to be referencing these three
01:14 - um these three uh how do you call it
01:18 - uh these three letters i can say a
01:21 - module name
01:22 - object and alias name xyz so
01:25 - that is uh just a little reminder for
01:27 - you
01:29 - import x import x is the one of the most
01:31 - simple
01:32 - importing a module or how to because you
01:35 - just need
01:36 - two words import and the name of the
01:38 - module
01:40 - import x as z gets a little bit more
01:42 - complicated
01:43 - it imports the module but with a
01:45 - different name
01:46 - so if we're importing a module called
01:48 - pokemon
01:49 - we can say import pokemon as pk
01:52 - which turned it down so in when encoding
01:55 - instead of using pokemon we're going to
01:57 - be only using pk
02:00 - from x import y1 and y2 is also pretty
02:04 - simple
02:04 - it imports um some objects from
02:08 - the module instead of every object so
02:11 - instead
02:12 - of like import x as z or import x which
02:15 - imports
02:16 - every single object from the module
02:18 - import x
02:19 - from x import y1 y2 only import
02:23 - y1 or y2 uh aka the things we want
02:27 - it to import the next one is from x
02:30 - import start from x import star is very
02:33 - similar to
02:34 - import x and it just imports everything
02:36 - from the module
02:38 - however there is a difference and i will
02:39 - be talking about that later on in the
02:41 - video
02:43 - let's move on to organizing and
02:45 - importing files
02:47 - so here is the file tree and i will show
02:50 - you
02:50 - how you can use modules um in
02:54 - this file tree so here's some code that
02:57 - you can use
02:58 - but um there's six of them in total
03:01 - let's begin with the first one from
03:03 - pokey import pica
03:05 - uh we're in main dot py right now okay
03:08 - we're gonna be uh pretending that we're
03:10 - coding right now
03:11 - inside of the python file called main.py
03:15 - and right now we're gonna call up the
03:17 - module called pica
03:19 - which is in another folder inside pokey
03:22 - so main.py will call up
03:25 - the pokey folder and then it's going to
03:27 - say hey i want pika.py
03:29 - so from pokey the folder name or the
03:32 - package name
03:33 - it will import the module called pika
03:35 - inside of pokey
03:36 - that's it and then um you can also do
03:39 - this
03:40 - and make pika instead of being pika
03:43 - short for pikachu it's it's going to be
03:46 - imported as pk
03:48 - so pokey uh from pokey import pika as
03:52 - pk and that's it and then import test
03:56 - basically um we'll import the module
03:58 - called test.py which is inside the same
04:02 - folder tree as app i mean as main dot py
04:05 - so that's why we don't need to do
04:06 - from and yeah now from
04:10 - pokey.magi import my class is another
04:13 - way of calling up
04:14 - a module that is not in the same file
04:17 - basically you just have to
04:18 - call up the package name dot the uh
04:22 - dot the uh sorry dot the module name
04:26 - and then import my class or any object
04:29 - you want to import from that module
04:33 - and now let's move on to from test
04:35 - import func 1 and func 2.
04:37 - so from test which is this module
04:40 - import function 1 and function 2 or the
04:42 - things we want
04:43 - to import from test.py and then the last
04:46 - one
04:47 - from test import star imports every
04:49 - object from test.pui
04:53 - let's move on to import x i will be
04:55 - explaining the
04:56 - commands i showed you earlier in detail
04:59 - import x will import
05:00 - every object from the module x and here
05:03 - is a real code reference
05:04 - so we have a module called pika.py which
05:07 - has
05:08 - class 1 class 2 class 3 and inside of
05:10 - main dot py
05:11 - we have uh two lines of code import pica
05:14 - which will import every single
05:17 - object from pica and then we will put
05:19 - them like
05:20 - this a equals to pica dot class 1
05:22 - parenthesis
05:25 - import x as z basically we'll import uh
05:28 - the module as another name as an alias
05:31 - name so like
05:32 - uh pica dot py it will and p dot py in
05:35 - this case has function one function two
05:37 - in function three
05:38 - when we import pica as pk however um
05:42 - this is what we would do if it wasn't
05:44 - for
05:45 - dot um if it wasn't for
05:48 - as z we would have to do a equals to
05:51 - pica dot funk one however if we
05:54 - did uh import pica as pk then will be
05:58 - a equals to pk dot funk one instead of
06:01 - pika
06:01 - which is shorter however um this one it
06:04 - might not be
06:05 - too drastic however in some modules
06:08 - their name is really long
06:09 - like pretend pokemon um we can turn it
06:12 - down to pk
06:13 - or pikachu and it will make a drastic
06:15 - difference when your
06:16 - drastic difference when you're coding
06:20 - now let's move on to from x import y
06:22 - from x import y
06:23 - basically just import some object from
06:25 - the module x
06:26 - the um it will import uh the mod or
06:29 - sorry the object that you choose the end
06:31 - you want to import from the
06:33 - module and in this case i want to import
06:36 - only class 1 from pca dot p
06:39 - p y and that's what i did and in here
06:42 - main dot p y we can see that
06:44 - from pica import class 1 and only import
06:47 - class 1
06:48 - and then a equals to pica dot class 1.
06:52 - now let's move on to from x import star
06:55 - so i will be going over why it's
06:57 - different from
06:58 - uh import x really soon however
07:02 - let me just take a sip of water really
07:03 - quick
07:07 - okay i'm back and my throat is very
07:09 - refreshed um for some reason i am not
07:12 - i can't really talk for a long period of
07:14 - time anymore i don't know why
07:16 - i used to talk for 40 minutes straight
07:17 - without having to drink a single sip of
07:19 - water
07:19 - but now i can't so yeah let me just
07:23 - take a sip of water and i can continue
07:24 - with the rest of the video so as i was
07:26 - saying
07:27 - from x import star is basically just
07:30 - like
07:30 - um import x where you import everything
07:33 - from
07:34 - the file uh in this case pika.py
07:37 - i mean you import everything from the
07:39 - module which is called pika.py
07:42 - and inside of pico.py there is three
07:44 - objects class one class two and class
07:46 - three
07:47 - and we're going to be calling all of
07:48 - them in main.py
07:50 - so from pica import uh star
07:55 - a equals class one b equals
07:58 - class 2 and c equals class 3. and now
08:01 - let me
08:01 - tell you why it's different from import
08:03 - x so
08:05 - notice the code in main.py a equals to
08:08 - class 1
08:08 - parenthesis let's move back
08:12 - to import x if you look instead of a
08:15 - equals class one parenthesis this one is
08:18 - a equals pica dot class one parenthesis
08:21 - you can see that pica is here however if
08:24 - um we look at uh from x import star
08:29 - there is no dot pica or pika dot and
08:32 - this is because
08:33 - when you use from x import star it
08:36 - automatically
08:37 - calls or like pretends the function or
08:40 - the objects are
08:41 - in your uh program that you are coding
08:44 - right now
08:44 - and this one is useful if you
08:47 - aren't um like on a large scale
08:49 - production however if your code
08:52 - you're planning to use like a large
08:54 - scale then
08:55 - this is not a recommended uh import
08:57 - because
08:58 - if you import multiple modules then um
09:01 - and then
09:01 - they have the objects that have the same
09:03 - name then you wouldn't
09:05 - uh you would have run into a problem
09:08 - where if like the objects have the same
09:10 - name
09:10 - in like multiple modules then it would
09:13 - be
09:14 - complicated and then you would have to
09:15 - try to fix the problem and if you were
09:18 - me i would probably just stick with
09:20 - uh import x which you just need to type
09:24 - out
09:24 - the module name again and that is it
09:26 - however
09:27 - if you um do import x right
09:30 - you can do import x as z and you can
09:33 - make
09:33 - your module name even smaller and this
09:36 - will basically help you
09:38 - and won't make you run to any problems
09:40 - or
09:41 - if you prefer you can just use uh from x
09:45 - import star
09:45 - because you don't need to type out the
09:47 - module name and
09:49 - yeah it depends on your situation but
09:51 - thank you for watching
09:52 - i hope to see in the next video and i
09:55 - also hope you found something useful
09:56 - see you next episode bye for now

Cleaned transcript:

hello everybody welcome back to another episode of python go today we're going to be um i'm going to be giving you a brief overview on modules and packages in python so let's begin so first off what are modules and packages well packages is just a way of saying a folder to store modules in and inside of the packages there can be multiple modules a module is a dot py file like pikachu.py or magikarp.py a module is any dot py file so any python file is classified as a module inside of the module there can be multiple objects of python such as classes variables and functions the what are the benefits of using modules well number one it's simple number two it's maintainable and number three it's reusable and these three uh benefits are pretty much gonna guarantee you faster coding and more efficient coding i'm going to show you some of the ways you can import a module and keep in mind while i'm talking i'm going to be referencing these three um these three uh how do you call it uh these three letters i can say a module name object and alias name xyz so that is uh just a little reminder for you import x import x is the one of the most simple importing a module or how to because you just need two words import and the name of the module import x as z gets a little bit more complicated it imports the module but with a different name so if we're importing a module called pokemon we can say import pokemon as pk which turned it down so in when encoding instead of using pokemon we're going to be only using pk from x import y1 and y2 is also pretty simple it imports um some objects from the module instead of every object so instead of like import x as z or import x which imports every single object from the module import x from x import y1 y2 only import y1 or y2 uh aka the things we want it to import the next one is from x import start from x import star is very similar to import x and it just imports everything from the module however there is a difference and i will be talking about that later on in the video let's move on to organizing and importing files so here is the file tree and i will show you how you can use modules um in this file tree so here's some code that you can use but um there's six of them in total let's begin with the first one from pokey import pica uh we're in main dot py right now okay we're gonna be uh pretending that we're coding right now inside of the python file called main.py and right now we're gonna call up the module called pica which is in another folder inside pokey so main.py will call up the pokey folder and then it's going to say hey i want pika.py so from pokey the folder name or the package name it will import the module called pika inside of pokey that's it and then um you can also do this and make pika instead of being pika short for pikachu it's it's going to be imported as pk so pokey uh from pokey import pika as pk and that's it and then import test basically um we'll import the module called test.py which is inside the same folder tree as app i mean as main dot py so that's why we don't need to do from and yeah now from pokey.magi import my class is another way of calling up a module that is not in the same file basically you just have to call up the package name dot the uh dot the uh sorry dot the module name and then import my class or any object you want to import from that module and now let's move on to from test import func 1 and func 2. so from test which is this module import function 1 and function 2 or the things we want to import from test.py and then the last one from test import star imports every object from test.pui let's move on to import x i will be explaining the commands i showed you earlier in detail import x will import every object from the module x and here is a real code reference so we have a module called pika.py which has class 1 class 2 class 3 and inside of main dot py we have uh two lines of code import pica which will import every single object from pica and then we will put them like this a equals to pica dot class 1 parenthesis import x as z basically we'll import uh the module as another name as an alias name so like uh pica dot py it will and p dot py in this case has function one function two in function three when we import pica as pk however um this is what we would do if it wasn't for dot um if it wasn't for as z we would have to do a equals to pica dot funk one however if we did uh import pica as pk then will be a equals to pk dot funk one instead of pika which is shorter however um this one it might not be too drastic however in some modules their name is really long like pretend pokemon um we can turn it down to pk or pikachu and it will make a drastic difference when your drastic difference when you're coding now let's move on to from x import y from x import y basically just import some object from the module x the um it will import uh the mod or sorry the object that you choose the end you want to import from the module and in this case i want to import only class 1 from pca dot p p y and that's what i did and in here main dot p y we can see that from pica import class 1 and only import class 1 and then a equals to pica dot class 1. now let's move on to from x import star so i will be going over why it's different from uh import x really soon however let me just take a sip of water really quick okay i'm back and my throat is very refreshed um for some reason i am not i can't really talk for a long period of time anymore i don't know why i used to talk for 40 minutes straight without having to drink a single sip of water but now i can't so yeah let me just take a sip of water and i can continue with the rest of the video so as i was saying from x import star is basically just like um import x where you import everything from the file uh in this case pika.py i mean you import everything from the module which is called pika.py and inside of pico.py there is three objects class one class two and class three and we're going to be calling all of them in main.py so from pica import uh star a equals class one b equals class 2 and c equals class 3. and now let me tell you why it's different from import x so notice the code in main.py a equals to class 1 parenthesis let's move back to import x if you look instead of a equals class one parenthesis this one is a equals pica dot class one parenthesis you can see that pica is here however if um we look at uh from x import star there is no dot pica or pika dot and this is because when you use from x import star it automatically calls or like pretends the function or the objects are in your uh program that you are coding right now and this one is useful if you aren't um like on a large scale production however if your code you're planning to use like a large scale then this is not a recommended uh import because if you import multiple modules then um and then they have the objects that have the same name then you wouldn't uh you would have run into a problem where if like the objects have the same name in like multiple modules then it would be complicated and then you would have to try to fix the problem and if you were me i would probably just stick with uh import x which you just need to type out the module name again and that is it however if you um do import x right you can do import x as z and you can make your module name even smaller and this will basically help you and won't make you run to any problems or if you prefer you can just use uh from x import star because you don't need to type out the module name and yeah it depends on your situation but thank you for watching i hope to see in the next video and i also hope you found something useful see you next episode bye for now
