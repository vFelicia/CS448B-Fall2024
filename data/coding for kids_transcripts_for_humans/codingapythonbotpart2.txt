With timestamps:

00:00 - hello everybody my name is Jimmy and
00:01 - today I would like to continue my series
00:04 - of making a python bot today is part two
00:06 - and we're going to be continuing our
00:08 - basics for uh our robot so yeah let's go
00:12 - ahead and get straight into it first
00:13 - things first again open visual
00:16 - Studios
00:17 - okay and this is our part one if you
00:20 - haven't seen the video you should go
00:21 - check it out it's just covering some
00:23 - basic python commands like printing F El
00:27 - concatenation uh commenting and arrays
00:29 - today we're going to be covering
00:30 - dictionaries for Loops while loops and
00:33 - also uh functions and yeah let's go
00:36 - ahead and get straight into it first we
00:38 - press crln this creates a new file let's
00:41 - close can actually I'll leave that open
00:43 - it's fine I'll press contr s to save it
00:45 - into my folder nameing this python bot 2
00:50 - no actually P2 G simple py okay and now
00:55 - now once we're over here uh we are now
00:57 - in our. py file and we're going to to
01:00 - start off with uh
01:03 - dictionaries dictionary all right so
01:06 - dictionaries are quite are kind of
01:09 - similar to uh lists but dictionaries can
01:12 - store two things they store a word or
01:16 - keyword and also the meaning or it's
01:18 - more like the term and then there's a
01:21 - subject and there's a term I'll show you
01:23 - what it looks like we can say dig equals
01:26 - to uh equals to these little curly
01:30 - brackets and we're going to say first
01:32 - one we're going to say uh bun
01:36 - bun into M cat and then we're going to
01:39 - store his age or let's store his color
01:42 - first actually I'm going to make this
01:44 - Buton button all right I'm going to make
01:47 - color like
01:50 - orange okay and that's our first term
01:53 - and our second we just put a comma and
01:55 - then we can WR another one we can say
01:58 - age I think he's like a eight or seven I
02:00 - don't know but we can also store
02:02 - integers as well as uh as well as
02:05 - strings and we can store lists as well
02:06 - so we can store a lot of things inside
02:08 - of a dictionary I'm going to say uh we
02:12 - have the Color age and also what
02:16 - else food favorite food is probably cat
02:19 - food it's the only thing he eats cat
02:21 - food okay so if we have why is it like
02:25 - that oh I forgot had to comment
02:28 - okay all right now once we do this we
02:30 - can print out bun bun so
02:33 - print bun bun like so and we're to run
02:36 - this as you can see it prints out the
02:39 - dictionary and if we were to print the
02:41 - type what type is run bun so
02:45 - type bun bun like so it would also say
02:48 - dictionary like that now let's go ahead
02:51 - and print out an individual term so for
02:53 - example we can say print bun bun and
02:56 - have this uh bracket right here we can
02:59 - go for each of these categories I can
03:01 - say color PR bu button color like that
03:04 - one press Center and it would say orange
03:07 - and if we were to change color to
03:10 - age it would say seven and then the last
03:12 - one food would be like cat food there
03:15 - you go and now this is basically the
03:18 - simplest way to do dictionaries uh I
03:21 - realized spell dictionary wrong and now
03:23 - we can also make bun bun into a
03:26 - different type of diction we can do dick
03:28 - like this and then we can have uh
03:31 - parenthesis and this also turns to
03:32 - dictionary using the dictionary
03:35 - Command right uh wait
03:38 - maybe
03:41 - dictionary maybe it requires a function
03:43 - I'm not sure we have to change from
03:46 - those colons into an equal sign so let's
03:48 - go ahead and do that equal to equal to
03:52 - and equal to like that let's try it
03:56 - out uh I also think we have to make into
03:59 - one line
04:00 - oh and then we can delete these really
04:03 - quickly like
04:05 - so okay let's run it out all right okay
04:09 - now it works and then we can also uh
04:11 - check the type still it's probably still
04:13 - going to be dictionary print type bun
04:19 - bun like so it's going to be dictionary
04:22 - yeah so we can have two ways of writing
04:23 - a dictionary that way or the other way
04:25 - let me control Z back the other way
04:26 - because it looks more
04:28 - original like
04:31 - so
04:35 - okay there you go all right once we're
04:39 - done the dictionaries let's move on to
04:40 - our next one which is while Loops so
04:42 - while
04:43 - loop a while loop we can use to run
04:46 - something infinitely so for example we
04:48 - say while
04:50 - true what do we do uh let's have a
04:52 - variable called like a or
04:55 - something a equal to one and while true
04:59 - print
05:01 - a print a
05:05 - plus plus equal to
05:08 - one okay does this
05:12 - work I'm going to comment these this
05:14 - really
05:16 - quickly one two three okay right out A+
05:21 - one is invalid
05:23 - syntax what if we go into here and we
05:26 - say A+ = 1 which basically adding itself
05:30 - and do
05:32 - that okay and also I'm going to import
05:34 - time because we need we need to slow it
05:38 - down just in case it goes too fast so
05:40 - import time we can go uh time do
05:45 - sleep well let's say like one second
05:50 - okay let's try it
05:52 - out one two three as you can see it will
05:56 - go on forever unless we stop it uh so
05:59 - let's go ahead and
06:02 - type okay wait let me just trash this
06:05 - all right after that uh that's basically
06:08 - while the while loop if you want
06:09 - something to go on for a long time
06:10 - that's what you can use it
06:16 - for but now what if we don't want to go
06:19 - on forever so we can say while a is less
06:24 - or equal to one uh equal
06:27 - to five then keep going okay once it is
06:32 - greater than five then we say
06:36 - else
06:39 - else uh
06:43 - break like
06:45 - so that work I'm not sure wa I have to
06:48 - have an
06:55 - if all right so instead of this I say if
06:58 - a is
07:00 - is I'm going say while true sorry while
07:04 - true if a is greater than
07:07 - five then break like so let's try it
07:13 - out one two three four five break there
07:19 - you go so that's basically how to stop a
07:21 - while loop you can keep adding it and
07:24 - then break it after that all right once
07:26 - we're done with this uh we can move on
07:28 - to our next one which is the for Loop
07:33 - the for Loop is quite similar to the
07:35 - while loop but it's more easy to control
07:37 - it has a lot more purpose I feel like so
07:39 - we can do 4 I in range and then we can
07:42 - specify how much we wanted to run so
07:44 - let's say run five times again we can
07:46 - I'm G to I'm going to copy this control
07:49 - C contr control V like that okay I'm G
07:53 - also going
07:54 - to comp this out okay so a goes to zero
07:58 - and then we can can do kind of the same
08:00 - thing so a plus = to 1 uh print
08:04 - a it's going to come out really quickly
08:06 - because I have no weight yeah as you can
08:09 - see 1 2 3 four five we can change this
08:10 - again to like six yeah and it goes to
08:13 - six uh another way to use for Loop is if
08:16 - we were to have like a like a list for
08:18 - example or an array we can do something
08:21 - like this so let's have a
08:25 - poex equals to uh
08:30 - this we're going to have Pikachu like so
08:35 - Pikachu uh I haven't played Pokemon a
08:37 - long time so I don't remember all of
08:39 - them Pichu I kind of forgot
08:42 - Pichu there's Raichu I think we'll do
08:45 - the evolutionary tree of Pikachu for now
08:49 - so now we're going to say
08:52 - po Pokey in Pokedex like that we don't
08:57 - need this anymore we're going to say
08:59 - print poke and what it does it's going
09:00 - to go through the loop and you're going
09:02 - to print each one of them
09:03 - out oh this is not
09:09 - callable
09:12 - poex print
09:14 - Pokey oh sorry make this an I then we
09:18 - can say in
09:20 - Pokedex print
09:23 - poke I like
09:25 - that Pokedex eye okay
09:31 - Iron Range list object is not
09:35 - callable Iron Range
09:37 - Pokedex this
09:40 - work L Pok√©dex
09:44 - okay maybe we do this L Pokedex so now
09:47 - it prints out okay there you go finally
09:49 - so it prints out the amount of Pokemon
09:52 - in here we can change it to add more so
09:54 - 10 pip
09:56 - plop as you can see just prints out pip
09:58 - plop instead of us having when you print
09:59 - it on our own so we can just keep adding
10:00 - to this list it'll print out everything
10:02 - that is inside here and yeah that's
10:04 - basically it for for Loops it's quite
10:06 - useful okay let's move on to our last
10:09 - one which is kind of complicated
10:11 - functions it's not complicated in the
10:13 - sense where it's hard to do but there's
10:14 - a lot of commands for us to execute
10:17 - which makes it a little bit longer than
10:18 - the rest so in functions we basically
10:21 - have to it's basically combining a big
10:24 - command into a small command so for
10:25 - example if we were to have if we were to
10:27 - dissect our walk so when we walk we put
10:30 - our right foot forward and our left foot
10:31 - then our right foot right so instead of
10:33 - saying right foot forward left foot
10:34 - forward we could say walk equals like
10:37 - Define walk and we can left foot forward
10:39 - right foot forward so when we walk we
10:41 - could say we walk instead of those
10:43 - individual commands uh for example let
10:45 - me demonstrate it so this is going to be
10:46 - a simple one we're going to move on to
10:47 - Advanced ones uh like after done this
10:50 - one so let's go ahead create this one
10:52 - really quickly uh let's
10:56 - say huh what is a good command and that
10:59 - is not useless but it's also not
11:02 - complicated uh we can say math again
11:06 - formula formula formula and I'm going to
11:08 - divide something by two then add two to
11:10 - it okay so Define
11:14 - formula we're going to have in here this
11:16 - is going to be our local variable where
11:17 - people can put stuff inside and then we
11:19 - can edit through there so inside of
11:22 - formula the local variable is going to
11:23 - be X as a number so we can save Define
11:26 - formula we're going to X Plus divide by
11:30 - two divide by two then x + 2 print
11:36 - X like so if we to run it nothing should
11:38 - happen because we haven't used it yet
11:41 - but if we say
11:42 - formula uh equal formula and we decide
11:45 - to call a variable and inside is going
11:47 - to be our number so we're going to put
11:48 - 4id two is no that doesn't really work
11:51 - let's do eight 8id by 2 is 4 plus 2 is
11:53 - six so let's try
11:56 - it what Okay so
12:00 - by two is 4 plus 2 is six why did it
12:01 - come out
12:02 - eight did not do this one yet
12:07 - uh print
12:10 - x what if we set this as a variable so
12:13 - AAL 2 and
12:17 - then xide
12:20 - two D that + two like that and we say
12:23 - print
12:24 - a all right now this works because I
12:27 - think if we print X it just print I what
12:29 - have we put inside but now since we make
12:31 - a new variable we can uh now make it
12:34 - work so let's do 12 12 2 is 6 2 8 so it
12:38 - should be eight there you go so this is
12:40 - a simple formula that we can use I mean
12:42 - simple function that we can use to do
12:44 - our Command instead of having to do do
12:45 - having to do this for all of them we can
12:47 - just say formula 12 and it will
12:49 - calculate it for us which is quite easy
12:51 - all right let's move on to some
12:52 - complicated things now so I'm going to
12:53 - com this out all right uh let's make
12:56 - this into a game scenario because I feel
12:58 - it's most inter aining so we're going to
13:00 - have a battle I guess and then this is
13:02 - to uh I'm going to make two functions to
13:06 - heal and to attack so let's make our
13:08 - Attack One first Define attack inside
13:10 - we're going to have
13:12 - um
13:14 - enemy and what health enemy and enemy
13:19 - health health and let's just say eh for
13:24 - enemy Health all right so we're going to
13:27 - do this and we're going to say enemy I'm
13:29 - just say n k n so uh if we say attack
13:35 - enemy and we put the name then we put
13:37 - the amount of HP they have right now we
13:39 - can say
13:41 - like
13:42 - uh F string
13:45 - print F string we're going to say
13:50 - n
13:52 - n got
13:54 - taken wait got
13:57 - attacked
14:00 - okay and then we're going to print
14:01 - another one we're going to
14:03 - say uh
14:06 - n
14:09 - lost and okay we got and got attacked
14:13 - and then after that we're going to say n
14:16 - is now at is now
14:19 - at uh eh minus let me make
14:22 - ehly current health so I'm say h equals
14:25 - to eh minus let's say 20
14:29 - I put D for damage actually H minus D is
14:33 - now at H oh F
14:36 - string
14:38 - H like so all right so that's our attack
14:40 - we can try testing it so we can see
14:43 - attack who are we attacking let's see
14:45 - we're attacking bun bun bun
14:48 - bun okay and then no let not let's
14:53 - attack
14:55 - uh Ryon okay and then we're going to say
14:59 - eh is his current health so 100 then
15:03 - attacking maybe for like 10
15:05 - HP I'm not I'm not going to put these in
15:08 - that okay 10 HP like so if you to run it
15:11 - we' say Ryon got attack Ryon is now 90
15:13 - HP 90
15:16 - HP okay which makes sense because uh
15:20 - basically we put our string in and then
15:22 - it subtract its current health from its
15:25 - the damage we put in and 100us 10 is 90
15:28 - as you can see this is how to make a
15:30 - function that's a little bit more
15:31 - complicated so it has three local
15:33 - variables all right now I'm going to
15:34 - make a heal so heal a character uh this
15:38 - is the current H current health and
15:39 - let's say our heal
15:41 - so what should Health uh
15:45 - health I'm going to say life I guess so
15:48 - eh plus life instead of
15:51 - subtract okay and that's it so instead
15:54 - of heal we can say heal Ryon at 90 let's
15:58 - let's heal for
15:59 - 20 bam now it says okay I got so get
16:03 - attack R got
16:04 - healed okay let's try it again R got
16:07 - healed R is now at 110 HP there you go
16:10 - so that's basically these two uh
16:12 - functions but there is more as well we
16:14 - can have this in a separate folder and
16:17 - call it from this one from that uh file
16:21 - so let's go ahead and make a new file
16:22 - control n Save this as
16:26 - functions functions
16:29 - Ty I'm going to grab both of my
16:31 - functions and put them aside so contrl +
16:32 - C contrl + V I'm going to comment this
16:35 - function like so I'm going to save it
16:38 - make sure to save by the RO W work and
16:40 - then now I'm going to call it from here
16:41 - so if we were to run this right now with
16:43 - our heel with these commented as you can
16:45 - see it does not work because heel is not
16:47 - defined however if we were to do
16:49 - something like this from functions right
16:52 - it's our folder name functions
16:55 - import Star when we import Star we're
16:58 - basically saying import both of the all
17:00 - the functions that's inside of this file
17:02 - but if we were if we don't want to
17:04 - import everything we can just say import
17:05 - a tack like this and it'll only import a
17:08 - tack so he won't work if we try as you
17:10 - can see it still won't work so let's do
17:12 - import Star like so and it's going to
17:14 - heal the squiggly marks went away and
17:17 - now it works so yeah this is what I'm
17:19 - trying to say that it does work if you
17:21 - call from a different file and if we
17:23 - were to change something in this file
17:24 - for example if I were to change HP to
17:26 - Mana let's Mana
17:31 - Mana like so and if we don't save it
17:33 - it's still going to say HP because it
17:35 - didn't update yet but if we control s
17:37 - come back in here it's going to change
17:38 - to Mana so yeah make sure to save it if
17:40 - you want to ever do something like this
17:42 - it's going to be useful in like bigger
17:43 - projects where you don't want to you
17:45 - don't want your uh functions to get
17:47 - cluttered in your code so you separate
17:49 - them to another file this way you can
17:51 - also carry it around and you don't have
17:52 - to copy paste into different projects
17:54 - and anyways that's it for this video I
17:56 - hope you enjoyed and learned something
17:57 - uh the next video we're going to be
17:59 - covering some more Basics and yeah
18:01 - that's it see you

Cleaned transcript:

hello everybody my name is Jimmy and today I would like to continue my series of making a python bot today is part two and we're going to be continuing our basics for uh our robot so yeah let's go ahead and get straight into it first things first again open visual Studios okay and this is our part one if you haven't seen the video you should go check it out it's just covering some basic python commands like printing F El concatenation uh commenting and arrays today we're going to be covering dictionaries for Loops while loops and also uh functions and yeah let's go ahead and get straight into it first we press crln this creates a new file let's close can actually I'll leave that open it's fine I'll press contr s to save it into my folder nameing this python bot 2 no actually P2 G simple py okay and now now once we're over here uh we are now in our. py file and we're going to to start off with uh dictionaries dictionary all right so dictionaries are quite are kind of similar to uh lists but dictionaries can store two things they store a word or keyword and also the meaning or it's more like the term and then there's a subject and there's a term I'll show you what it looks like we can say dig equals to uh equals to these little curly brackets and we're going to say first one we're going to say uh bun bun into M cat and then we're going to store his age or let's store his color first actually I'm going to make this Buton button all right I'm going to make color like orange okay and that's our first term and our second we just put a comma and then we can WR another one we can say age I think he's like a eight or seven I don't know but we can also store integers as well as uh as well as strings and we can store lists as well so we can store a lot of things inside of a dictionary I'm going to say uh we have the Color age and also what else food favorite food is probably cat food it's the only thing he eats cat food okay so if we have why is it like that oh I forgot had to comment okay all right now once we do this we can print out bun bun so print bun bun like so and we're to run this as you can see it prints out the dictionary and if we were to print the type what type is run bun so type bun bun like so it would also say dictionary like that now let's go ahead and print out an individual term so for example we can say print bun bun and have this uh bracket right here we can go for each of these categories I can say color PR bu button color like that one press Center and it would say orange and if we were to change color to age it would say seven and then the last one food would be like cat food there you go and now this is basically the simplest way to do dictionaries uh I realized spell dictionary wrong and now we can also make bun bun into a different type of diction we can do dick like this and then we can have uh parenthesis and this also turns to dictionary using the dictionary Command right uh wait maybe dictionary maybe it requires a function I'm not sure we have to change from those colons into an equal sign so let's go ahead and do that equal to equal to and equal to like that let's try it out uh I also think we have to make into one line oh and then we can delete these really quickly like so okay let's run it out all right okay now it works and then we can also uh check the type still it's probably still going to be dictionary print type bun bun like so it's going to be dictionary yeah so we can have two ways of writing a dictionary that way or the other way let me control Z back the other way because it looks more original like so okay there you go all right once we're done the dictionaries let's move on to our next one which is while Loops so while loop a while loop we can use to run something infinitely so for example we say while true what do we do uh let's have a variable called like a or something a equal to one and while true print a print a plus plus equal to one okay does this work I'm going to comment these this really quickly one two three okay right out A+ one is invalid syntax what if we go into here and we say A+ = 1 which basically adding itself and do that okay and also I'm going to import time because we need we need to slow it down just in case it goes too fast so import time we can go uh time do sleep well let's say like one second okay let's try it out one two three as you can see it will go on forever unless we stop it uh so let's go ahead and type okay wait let me just trash this all right after that uh that's basically while the while loop if you want something to go on for a long time that's what you can use it for but now what if we don't want to go on forever so we can say while a is less or equal to one uh equal to five then keep going okay once it is greater than five then we say else else uh break like so that work I'm not sure wa I have to have an if all right so instead of this I say if a is is I'm going say while true sorry while true if a is greater than five then break like so let's try it out one two three four five break there you go so that's basically how to stop a while loop you can keep adding it and then break it after that all right once we're done with this uh we can move on to our next one which is the for Loop the for Loop is quite similar to the while loop but it's more easy to control it has a lot more purpose I feel like so we can do 4 I in range and then we can specify how much we wanted to run so let's say run five times again we can I'm G to I'm going to copy this control C contr control V like that okay I'm G also going to comp this out okay so a goes to zero and then we can can do kind of the same thing so a plus = to 1 uh print a it's going to come out really quickly because I have no weight yeah as you can see 1 2 3 four five we can change this again to like six yeah and it goes to six uh another way to use for Loop is if we were to have like a like a list for example or an array we can do something like this so let's have a poex equals to uh this we're going to have Pikachu like so Pikachu uh I haven't played Pokemon a long time so I don't remember all of them Pichu I kind of forgot Pichu there's Raichu I think we'll do the evolutionary tree of Pikachu for now so now we're going to say po Pokey in Pokedex like that we don't need this anymore we're going to say print poke and what it does it's going to go through the loop and you're going to print each one of them out oh this is not callable poex print Pokey oh sorry make this an I then we can say in Pokedex print poke I like that Pokedex eye okay Iron Range list object is not callable Iron Range Pokedex this work L Pok√©dex okay maybe we do this L Pokedex so now it prints out okay there you go finally so it prints out the amount of Pokemon in here we can change it to add more so 10 pip plop as you can see just prints out pip plop instead of us having when you print it on our own so we can just keep adding to this list it'll print out everything that is inside here and yeah that's basically it for for Loops it's quite useful okay let's move on to our last one which is kind of complicated functions it's not complicated in the sense where it's hard to do but there's a lot of commands for us to execute which makes it a little bit longer than the rest so in functions we basically have to it's basically combining a big command into a small command so for example if we were to have if we were to dissect our walk so when we walk we put our right foot forward and our left foot then our right foot right so instead of saying right foot forward left foot forward we could say walk equals like Define walk and we can left foot forward right foot forward so when we walk we could say we walk instead of those individual commands uh for example let me demonstrate it so this is going to be a simple one we're going to move on to Advanced ones uh like after done this one so let's go ahead create this one really quickly uh let's say huh what is a good command and that is not useless but it's also not complicated uh we can say math again formula formula formula and I'm going to divide something by two then add two to it okay so Define formula we're going to have in here this is going to be our local variable where people can put stuff inside and then we can edit through there so inside of formula the local variable is going to be X as a number so we can save Define formula we're going to X Plus divide by two divide by two then x + 2 print X like so if we to run it nothing should happen because we haven't used it yet but if we say formula uh equal formula and we decide to call a variable and inside is going to be our number so we're going to put 4id two is no that doesn't really work let's do eight 8id by 2 is 4 plus 2 is six so let's try it what Okay so by two is 4 plus 2 is six why did it come out eight did not do this one yet uh print x what if we set this as a variable so AAL 2 and then xide two D that + two like that and we say print a all right now this works because I think if we print X it just print I what have we put inside but now since we make a new variable we can uh now make it work so let's do 12 12 2 is 6 2 8 so it should be eight there you go so this is a simple formula that we can use I mean simple function that we can use to do our Command instead of having to do do having to do this for all of them we can just say formula 12 and it will calculate it for us which is quite easy all right let's move on to some complicated things now so I'm going to com this out all right uh let's make this into a game scenario because I feel it's most inter aining so we're going to have a battle I guess and then this is to uh I'm going to make two functions to heal and to attack so let's make our Attack One first Define attack inside we're going to have um enemy and what health enemy and enemy health health and let's just say eh for enemy Health all right so we're going to do this and we're going to say enemy I'm just say n k n so uh if we say attack enemy and we put the name then we put the amount of HP they have right now we can say like uh F string print F string we're going to say n n got taken wait got attacked okay and then we're going to print another one we're going to say uh n lost and okay we got and got attacked and then after that we're going to say n is now at is now at uh eh minus let me make ehly current health so I'm say h equals to eh minus let's say 20 I put D for damage actually H minus D is now at H oh F string H like so all right so that's our attack we can try testing it so we can see attack who are we attacking let's see we're attacking bun bun bun bun okay and then no let not let's attack uh Ryon okay and then we're going to say eh is his current health so 100 then attacking maybe for like 10 HP I'm not I'm not going to put these in that okay 10 HP like so if you to run it we' say Ryon got attack Ryon is now 90 HP 90 HP okay which makes sense because uh basically we put our string in and then it subtract its current health from its the damage we put in and 100us 10 is 90 as you can see this is how to make a function that's a little bit more complicated so it has three local variables all right now I'm going to make a heal so heal a character uh this is the current H current health and let's say our heal so what should Health uh health I'm going to say life I guess so eh plus life instead of subtract okay and that's it so instead of heal we can say heal Ryon at 90 let's let's heal for 20 bam now it says okay I got so get attack R got healed okay let's try it again R got healed R is now at 110 HP there you go so that's basically these two uh functions but there is more as well we can have this in a separate folder and call it from this one from that uh file so let's go ahead and make a new file control n Save this as functions functions Ty I'm going to grab both of my functions and put them aside so contrl + C contrl + V I'm going to comment this function like so I'm going to save it make sure to save by the RO W work and then now I'm going to call it from here so if we were to run this right now with our heel with these commented as you can see it does not work because heel is not defined however if we were to do something like this from functions right it's our folder name functions import Star when we import Star we're basically saying import both of the all the functions that's inside of this file but if we were if we don't want to import everything we can just say import a tack like this and it'll only import a tack so he won't work if we try as you can see it still won't work so let's do import Star like so and it's going to heal the squiggly marks went away and now it works so yeah this is what I'm trying to say that it does work if you call from a different file and if we were to change something in this file for example if I were to change HP to Mana let's Mana Mana like so and if we don't save it it's still going to say HP because it didn't update yet but if we control s come back in here it's going to change to Mana so yeah make sure to save it if you want to ever do something like this it's going to be useful in like bigger projects where you don't want to you don't want your uh functions to get cluttered in your code so you separate them to another file this way you can also carry it around and you don't have to copy paste into different projects and anyways that's it for this video I hope you enjoyed and learned something uh the next video we're going to be covering some more Basics and yeah that's it see you
