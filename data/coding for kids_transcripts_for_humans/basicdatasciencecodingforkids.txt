With timestamps:

00:00 - hello my name is jemmy and today i am
00:02 - going to be giving you a brief overview
00:04 - on
00:04 - a basic data science and basically it's
00:07 - just
00:08 - uh syntax in python uh we probably
00:11 - mostly know all this already i'm just
00:13 - going to uh
00:14 - give a quick review over it so these are
00:17 - the basic
00:18 - like functions or like the basic uh what
00:21 - python can do basically
00:22 - and i'm going to be testing it in google
00:24 - collab since it's easy
00:26 - and it's very accessible um you just
00:28 - need to go search google collab click
00:30 - the first link and then sign
00:31 - in and then just click uh file and then
00:35 - a new notebook and then you just can
00:37 - come into a page like mine
00:39 - although mine has code and um yours
00:41 - probably doesn't
00:42 - so yeah let's get into it so the first
00:45 - thing
00:45 - um one of the most basic things is um
00:48 - um math in python so here is math
00:52 - uh here's math um basically this is one
00:55 - plus one
00:56 - and if i were to run it they would come
00:58 - out two
01:00 - uh one second it's going to connect to
01:02 - your account it's gonna initialize
01:03 - so you gotta wait for a bit and if
01:06 - you're wondering how like i got
01:08 - this uh doggo or like these kitty cats
01:12 - what i did was i just need to go into uh
01:16 - edit and then go to notebook settings
01:19 - and then wait no sorry go to
01:23 - uh tools settings
01:26 - and then go to miscellaneous and then in
01:30 - here we just
01:31 - um enable core key mode and kitty mode
01:33 - and then
01:34 - the site i set it to dark if you set it
01:36 - to light
01:37 - then it's going to burn your eyes like
01:39 - so holy
01:40 - um so yeah i recommend saying to dark
01:43 - because it's more
01:45 - better for coding in my opinion light it
01:47 - just makes your eyes like
01:49 - be gone um yeah so yeah first
01:52 - is just addition and you can see that it
01:54 - comes out two
01:56 - and uh that's just one plus one two
01:58 - minus one
01:59 - is going to come out one one times three
02:03 - is going to come out three i should
02:05 - probably just re
02:06 - restart runtime which uh
02:11 - which should just restart all these
02:14 - output
02:14 - so let me restart runtime
02:19 - there you go
02:22 - restarting initializing all right
02:25 - so now i'm just going to go ahead and
02:26 - just going to
02:28 - clear out the output so we can look at
02:30 - it together
02:33 - um these are really basic stuff so
02:36 - uh we should be able to cover them in no
02:39 - time
02:41 - okay so i just finished deleting on all
02:43 - of the outputs
02:44 - and now we're going to be back at this
02:45 - page so uh shift enters to run okay one
02:48 - plus one equals to two
02:51 - two minus one equals to one one times
02:54 - three
02:54 - equals to three and so on and then in
02:56 - here
02:57 - one divided by two it goes to zero point
02:59 - five
03:00 - and then two point one minus one this
03:03 - just goes to show that python can also
03:05 - run
03:05 - um floats not only integers
03:09 - like there one point one and then if
03:12 - you're wondering how to use exponents
03:14 - and this is how
03:15 - uh two two uh stars um
03:18 - instead of one like multiplication
03:20 - instead we have two
03:22 - and that is exponent so two by the power
03:24 - four equals to four
03:26 - oh sorry sixteen um yeah i look really
03:29 - stupid um
03:30 - so yeah four squared is 16. i forgot uh
03:33 - yeah anyways okay we're not going to be
03:34 - looking at that too much
03:36 - so for now we have the percentage sign
03:39 - it's called mod
03:40 - uh mod is to just get the remainder so
03:42 - we might you might have learned about
03:44 - remainders in like
03:45 - first or second grade or you divide two
03:47 - numbers and then like the leftover
03:48 - number
03:49 - then you just like use that you just
03:51 - like put r and then the leftover number
03:54 - uh yeah so this is basically like that
03:56 - so pretend i have five right so then the
03:59 - oops i deleted the thing so pretend i
04:03 - have
04:03 - five divided uh or like mod two
04:07 - two goes into five two times and then
04:08 - there's a leftover of one
04:10 - and it would print out the leftover
04:12 - which is one
04:13 - like so and then here uh python also
04:16 - knows pemdas which is orders of
04:18 - operation
04:19 - so parentheses first then exponents um
04:22 - then multiplication and division are the
04:24 - same thing and then addition and
04:25 - subtraction
04:26 - so you can see parentheses it'll do this
04:29 - and this first and then it will times
04:30 - each other
04:31 - so it would be five ten times together
04:34 - equals fifty
04:35 - so it should come out fifty like so
04:38 - okay and then in this one just print
04:40 - hello world
04:42 - um you can print it with uh quotation
04:44 - marks like so
04:46 - uh and then it will get you this result
04:48 - hello world
04:49 - and you can print it with single quotes
04:51 - too and it will also get you
04:53 - to a result of hello world and then here
04:56 - we're going to
04:56 - be moving on to lists um list is
05:00 - uh just really simple it's like a
05:03 - a place to store data in python so in
05:06 - here we create a list by
05:08 - having two brackets like so um i might
05:11 - need to increase it
05:12 - because yeah like so there's two
05:14 - brackets like this
05:16 - and then inside of the brackets there
05:18 - are integers
05:19 - uh strings
05:23 - another list in there anything basically
05:26 - and um just put it inside of this and
05:29 - have
05:29 - the name of the list equals to uh like
05:33 - so and then in between each uh
05:36 - object there is a comma to separate them
05:39 - and then let's just print the list so
05:41 - right now the list contains of one two
05:42 - three and high
05:45 - there you go one two three high and to
05:47 - get into a specific part of the list
05:49 - like pretend you only want the number
05:50 - one
05:51 - then it would be print list but then
05:54 - inside of there it would be
05:55 - um printed not parentheses of brackets
05:58 - and then the
05:59 - digit you want and then you can also
06:00 - hover your mouse over it
06:02 - and you can see the list like list um
06:05 - and then
06:06 - so number zero or list uh
06:09 - position zero is one and one um position
06:12 - one is two position
06:14 - two is three and position uh three is
06:17 - high
06:18 - it might be a little confusing because
06:20 - uh in python we start from
06:21 - zero and then we work our way up so the
06:24 - first position would be zero
06:26 - all right let's run this and it should
06:28 - be one but okay
06:29 - and pretend we want like uh one two
06:32 - three but we don't want hi
06:34 - then we would print list uh brackets
06:37 - zero
06:37 - parentheses and not parentheses colon
06:40 - and then to the one that you
06:41 - want so right now it's three and we got
06:44 - if we want
06:45 - three two then we gotta make sure to
06:46 - change this to uh
06:49 - no 3 since it stops at the last one
06:53 - so 3 over here this one right however it
06:55 - would stop
06:56 - before it so it would be 1 2 3.
06:59 - so we got plan 1 over um like so
07:02 - and then in here list zero equals to new
07:05 - this is how to append into a list
07:07 - there's other ways too um such as dot
07:09 - append uh but this is one of them
07:12 - list z uh list bracket zero equal new uh
07:16 - you can
07:16 - assign this to wherever you want like
07:18 - what position you want this new
07:20 - uh object to go in and right now we want
07:23 - to go into
07:24 - uh slot zero so if we were to run this
07:27 - then it would uh do that but we wouldn't
07:29 - see it yet since we need to print it out
07:31 - again
07:32 - oh no sorry i need to print it
07:34 - separately because
07:36 - or else it would just set list so print
07:39 - list like so and there we go new
07:44 - two three high and you can see that one
07:46 - is also removed since this one just
07:48 - replaces one
07:49 - um there's also another way um i'll show
07:52 - you
07:52 - uh down here it's dot append and
07:56 - it's also a way to do this however dota
07:59 - pen doesn't require
08:00 - you to replace it it just uh
08:03 - it just like adds it in uh whether
08:07 - rather than just replacing it
08:09 - but this is one way of adding a new
08:10 - thing into the list
08:12 - and then here this is uh we're moving on
08:15 - to complicated list i called it c
08:18 - list because it's a little bit more
08:20 - complicated uh in here
08:22 - uh you can see that there's a list
08:24 - inside of the list right so it's a bit
08:26 - complicated
08:27 - uh so there's a b c and then after that
08:30 - that's a 0 b 1 c
08:33 - 2 and then in number slot number 3 there
08:36 - is a list
08:37 - and now you can access this list by just
08:40 - saying c list three
08:42 - which prints out that a smaller list and
08:45 - inside that smaller list we can go into
08:47 - even
08:47 - um so like pretend we want number three
08:49 - right so we would just
08:51 - print two into that smaller list and
08:54 - there we go we have the number three
08:55 - so you can go even inside of this list
08:58 - you can have another list and another
08:59 - list in another list
09:00 - and you can even have multiple stuff
09:02 - like a dictionary and i'll be going over
09:04 - a dictionary
09:05 - soon right here and this is a comment by
09:07 - the way uh
09:08 - you just need a hashtag before and then
09:10 - it'll just uh
09:11 - be a comment the comments are used for
09:14 - uh
09:15 - data scientists or programmers to know
09:17 - like what this code is used for
09:19 - so the next time they come back they
09:21 - won't forget what it is
09:25 - uh yeah so this is a comment and it's
09:27 - used for
09:28 - data scientists to know and programmers
09:30 - to know
09:31 - uh what it is what this piece of code is
09:33 - used for
09:34 - and um you can just make it anything and
09:36 - you can put it anywhere too
09:38 - as long as it has the hashtag in front
09:40 - of it okay
09:41 - let's move on to the next one which is
09:43 - list i mean dictionaries
09:45 - so dictionary equals to name uh this is
09:48 - called i'm pretty sure this is called
09:50 - the item and then there's another one
09:53 - inside of here and you can just call out
09:55 - the item and it'll just
10:00 - it's sorry it's just um so the
10:04 - dictionary right
10:05 - there is the item and then inside the
10:07 - item there's the object
10:08 - and oops sorry and then there's the
10:10 - object so you just have to call out the
10:16 - item
10:21 - well since he wants to be in the scene
10:23 - so badly here he is
10:25 - um
10:28 - you really wanted to be here um
10:32 - say hello to the camera
10:35 - hello hello good boy okay
10:39 - i can go hey don't be naughty cat
10:43 - hello say hello
10:46 - all right you can go now don't come back
10:50 - all right so yeah that was a quick uh
10:53 - bang bang thingy he wanted to come in so
10:56 - i let him in but yeah continuing
10:58 - of what we just said um there's the item
11:00 - and then there is the object
11:02 - so you just have to call out the item
11:04 - and it'll print out the object so in
11:05 - here the item is name
11:07 - and then the object is gemmy and what
11:09 - you do is print
11:11 - uh the name of the dictionary and then
11:13 - inside of the dictionary we have the
11:16 - of the brackets and inside the brackets
11:18 - we just print out the name of the item
11:20 - uh in the quotation marks or single
11:23 - quotes
11:24 - to make sure that it's like it it's like
11:27 - a string
11:28 - and we're gonna just shift enter and
11:31 - there we go it prints out gemmy
11:32 - um and in here to create a dictionary we
11:35 - need
11:36 - uh two curly brackets not like a
11:38 - straight one anymore
11:40 - and inside uh separating the uh the item
11:43 - from the object
11:44 - we have a colon um like so
11:48 - and yeah it will print out the object
11:50 - for us if we call out the item
11:54 - now let's move on to another thing it's
11:56 - a tuple or a tuple or a tuple
11:59 - you know people have a lot of uh a lot
12:02 - of opinions about
12:03 - uh this this word um p some people call
12:06 - it tuples some people call tuples some
12:08 - people call it
12:09 - tuple i don't know so i'm just going to
12:11 - call it tuple um or tuple
12:13 - i don't know either i'll just call tuple
12:15 - okay i'm just going to call it two tuple
12:18 - uh i just call it whatever you want okay
12:20 - um so i'll call it two bull
12:21 - and uh a table is very similar to a list
12:25 - being that they are uh similar to each
12:29 - other
12:29 - um a dictionary is not similar because
12:31 - it has the item and object
12:33 - however a tuple also stores uh
12:36 - objects just like a list does however
12:38 - there is a big difference
12:40 - um in tuples right you cannot edit it
12:43 - meaning that you cannot like
12:44 - add any more information uh or you can
12:47 - like delete any information
12:48 - um it's like set in stone so it's like
12:51 - when you create it then it's set
12:53 - uh and inside of a list however we can
12:56 - add it or replace it or cut it out as we
12:58 - saw earlier
12:59 - so both of them have their good and bad
13:01 - sides um
13:02 - but yeah a tuple is different from a
13:04 - list but they are pretty similar
13:07 - and into create a troop tuple we need uh
13:11 - two parentheses surrounding our objects
13:14 - inside of the
13:15 - tuple and then once we have it then
13:18 - we're done
13:19 - so inside of this tuple i have one two
13:21 - three and when we print out the tuple we
13:23 - can print out the whole thing
13:24 - like a list or we can print out one of
13:26 - them which is going to be number two
13:28 - this time so tuple uh brackets
13:31 - oh what type is not subscriptable
13:35 - okay so yeah this is because you can't
13:38 - edit it so we have to print out the
13:40 - whole thing
13:42 - yeah okay print tuple
13:45 - okay i don't okay let's just delete this
13:48 - what if we just do like that
13:50 - it just prints out tuple um okay
13:54 - let's try uh hello
13:58 - okay hello equals to the tuple
14:01 - maybe you can't use tuples since it's a
14:02 - keyword or something
14:04 - hello is not defined and you forgot to
14:07 - capitalize
14:09 - hello is not defined
14:13 - okay let's try it now there we go
14:16 - so i don't know why you can't do it in
14:19 - separate cells
14:20 - um but it you can't do in separate cells
14:23 - i guess
14:23 - uh so in here i renamed my
14:27 - tuple to hello and we could in google
14:30 - call out you just need to type out the
14:31 - name then it prints out it for you
14:33 - however it we should inhabit this
14:34 - because in other
14:36 - like ides then it wouldn't do this for
14:38 - us um
14:39 - but in google collab is an exception so
14:41 - i don't
14:42 - understand why it couldn't run in
14:43 - separate cells however
14:45 - we can just run in the same cell it
14:47 - doesn't really matter so in here we're
14:49 - going to do this use the same code we
14:50 - did earlier
14:51 - we're going to print out number two
14:55 - there we go it prints out number two
14:56 - okay let's move on to the next one
14:58 - so this one let's try to add in a new
15:02 - uh and a new object into the tubal it's
15:05 - not going to work i it's gonna come it's
15:07 - gonna come up an error
15:08 - but i'm just going to show you that it's
15:10 - different from a list
15:11 - because you can't add new stuff there we
15:14 - go it comes up an
15:15 - error this type does not support
15:18 - um does not support item assignment
15:20 - meaning that the tuple
15:21 - you cannot add anything new or you
15:23 - cannot really edit it it's just set in
15:25 - stone
15:26 - um yeah okay let's move on to the next
15:28 - one this one is a set
15:30 - uh a set is kind of like um another
15:34 - uh tuple but and like a list however
15:37 - it's different
15:38 - so um one two three right let's just run
15:40 - this
15:41 - it prints out one two three simple right
15:43 - let me just delete this i don't like
15:44 - yours
15:45 - um like so and then however if we have
15:48 - this long set
15:49 - right let's see what it does we'll print
15:52 - out one two three yes it does
15:53 - this is because a set will eliminate
15:55 - every single duplicate number
15:57 - and will only have the same uh number so
16:00 - no matter how much ones you put on there
16:02 - if the list is just
16:03 - one it'll just print out one one
16:07 - okay if that makes sense um or like
16:09 - pretend you have a million a's right
16:11 - then it will only print out one if you
16:13 - just uh run it
16:15 - and this is the speci uh the special the
16:18 - special latte
16:19 - no the special
16:22 - the specialty of set okay it prints out
16:25 - only one of the duplicate number or the
16:28 - duplicate object
16:29 - it will only print one of them and yeah
16:31 - that's a set
16:32 - now let's move on to comparing um
16:34 - comparing is like uh the things we do in
16:36 - math right
16:37 - one is greater than two which is
16:39 - obviously not true so we're going to run
16:41 - this
16:42 - and it should come out false it's like a
16:43 - boolean kind of like
16:45 - uh comparing like true or false one
16:48 - equals to one true
16:49 - or false true right yeah so in here this
16:52 - is
16:53 - how to measure greater than this one is
16:55 - equal sign um you don't actually have
16:57 - one equal sign in python
16:58 - instead you use two of them uh because i
17:01 - don't know i didn't make python um but
17:03 - yeah you you need to use two of them
17:05 - uh to make it uh work
17:08 - because uh if we see down here this is
17:11 - one is less or equal to two um
17:15 - if one of these applies then it's going
17:16 - to be true so like so
17:18 - 1 is less or equal to true to 2 is true
17:22 - 1 is greater or equal to 2 none of these
17:25 - 1 are
17:26 - so it's going to be false and then here
17:29 - is
17:29 - n equal it's a exclamation point
17:33 - and then an equal sign so one is not
17:35 - equal to one
17:37 - false right all right let's move on to
17:40 - logic operation
17:41 - so this one is just um and and or
17:45 - so and right here we just uh
17:48 - and is very special if one of those
17:51 - conditions
17:52 - are not true then it will be a false
17:54 - however if both of them are true then
17:56 - it's going to be a true
17:57 - okay so let's look at the first one one
17:59 - is greater than zero
18:01 - true one is equal to one that's also
18:03 - true so it should
18:04 - come out true okay now let's look at the
18:07 - true and false so one of them one of the
18:10 - conditions are false
18:11 - and the other one is true right so it's
18:13 - going to come out false since
18:15 - it's like going to do this and um i'll
18:18 - try true and true
18:20 - it should be true right so at first when
18:22 - i was doing this when i start first
18:24 - started python i was like huh
18:25 - i'm just going to make it look like it's
18:27 - a negative and positive number
18:29 - false is going to be negative true is
18:30 - going to be positive because we all know
18:32 - that if a negative number
18:34 - comes with a positive number right it's
18:36 - going to turn into a negative
18:37 - um like pretend um
18:41 - like we have a plus and minus sign next
18:43 - to each other
18:44 - and then it would become a minus because
18:47 - let me just show you
18:48 - in the example like one plus one like so
18:52 - and then like a plus and in brackets
18:56 - negative two
18:58 - plus uh one right so then we would do
19:00 - both of the equations
19:02 - this one would come out two this would
19:04 - come out um
19:05 - what would come out negative one right
19:07 - so then we will
19:08 - open the parenthesis and now we don't
19:11 - usually see this in math but we have a
19:13 - plus
19:13 - and minus sign next to each other and
19:15 - this would turn out into a minus sign
19:18 - and making this into one but yeah this
19:20 - is not math class but i'm just going to
19:22 - say that at first i thought that was
19:23 - going to be an accurate represent
19:25 - representation however once i looked at
19:27 - false and false right
19:28 - so two negative signs would equal to a
19:31 - positive
19:32 - however let's try false and false it
19:35 - still turns out false since
19:36 - um if one of them is false then it will
19:38 - be false okay
19:40 - and let's look at or now so one of this
19:43 - isn't true
19:44 - one equals to two is not um true it's
19:46 - false two equals to true on the other
19:48 - hand
19:48 - is true so if we were to run this what
19:51 - would come out
19:52 - it would come out true um in or only one
19:54 - of the conditions need to be
19:56 - true for it to say true um that's a
19:59 - that's a wrap
19:59 - um but okay it's unlike and which both
20:02 - of them needs to be true to true to be
20:04 - true
20:04 - however if on or you only need one of
20:08 - them
20:08 - to be true to make the results
20:11 - true it's really complicated because
20:13 - it's true and false but yeah
20:15 - um you probably get a gist of it and now
20:17 - let's look on if
20:18 - alif and else
20:22 - yeah so we're going to be moving on if
20:23 - alif and else so let's start
20:26 - so if um is just like you know
20:30 - in basic programming if there's if this
20:32 - then that
20:33 - um alif is a combination of elves and if
20:36 - uh else you can see it el and if is
20:39 - if and then a lift is just like if
20:43 - but it's just between if and else and in
20:45 - else we just
20:46 - do the rest in else so if one plus one
20:50 - equals to two
20:51 - then print first if a lift oh sorry a
20:54 - lift three goes to three
20:56 - print middle else print last so if it
20:59 - goes into
21:00 - one plus one equals to two it's going to
21:02 - print out first right
21:03 - so let's try yeah first
21:06 - however if we change this to three okay
21:09 - it's going to
21:10 - not work anymore so it's gonna pop out
21:12 - and it's gonna come to a lift
21:14 - and it says middle since three equals to
21:17 - three um
21:18 - and print middle however if this wasn't
21:20 - correct either
21:21 - let's pretend like it's an equal to
21:25 - it would print out last since it pops
21:27 - out of a lift and it goes into else
21:29 - and then since else doesn't have a
21:30 - condition it just prints out whatever's
21:32 - in else which is last
21:34 - um and yeah that's how if alif and else
21:36 - works
21:37 - now let's look at some loops uh let's
21:39 - begin with four loops
21:40 - so this is my list that i'm going to be
21:42 - using for this for loop
21:44 - it consists of one two three abc okay
21:49 - and let's move on to this one for item
21:52 - in for list
21:53 - print item so this will just print out
21:55 - one two three abc
21:58 - okay there we go um it just like repeats
22:01 - itself until it's done
22:02 - so for item an item in here can actually
22:06 - be anything it can be a b
22:07 - c d whatever you want um it'll print it
22:10 - out
22:12 - and in here we have four item in for
22:14 - list print item plus item
22:16 - so we're going to add all these up to so
22:19 - let's see what the results
22:21 - so you can see it doubles two four six
22:23 - instead of one two three
22:25 - and instead of a b c it's a a b b c c
22:28 - and then in here it's four item in for
22:31 - list print yes
22:32 - so this is just just printing out the
22:35 - printing out yes so just sees how much
22:37 - um there are in here
22:39 - uh and every time there's a list sorry
22:42 - there's an item then it'll print out yes
22:44 - so you can see there's six and then
22:46 - there's gonna be six yeses
22:48 - and let's move on to the while loop
22:51 - uh the while loop in here uh it's pretty
22:55 - simple kind of like the
22:56 - for loop however the while loop it's
22:58 - like while this
22:59 - then you can run this however if it does
23:01 - if it's out then just stop
23:03 - so here we have a while list and it's
23:06 - one
23:06 - while while list is smaller than 5
23:10 - print while list is and then it just
23:12 - prints out the number
23:13 - and then every time it repeats itself it
23:15 - adds a 1 to the while list
23:18 - so there you go it's 1 2 3 four if we
23:21 - wanted to
23:22 - go to five then we gotta make it six
23:26 - like so and then now let's move on to
23:29 - four iron range
23:30 - uh this is another for loop i just
23:31 - forgot to add it up there so i add it
23:33 - down here
23:34 - four iron range it's pretty special you
23:36 - can limit how much you want
23:38 - um like repeating itself so if you
23:40 - wanted to repeat it five times
23:42 - then you set it to five um like so
23:46 - it print zero one two three four because
23:48 - it will print i and i
23:50 - is this number so if you want to go to
23:52 - like 10 right um we will have to 10
23:55 - 0 1 2 3 4 5 6 7 8 9. uh this is because
23:58 - it starts at zero it actually has
24:00 - 10 items but it just doesn't have the
24:03 - number 10
24:04 - itself and now let's move on to list
24:07 - com comprehension or compensation list
24:11 - compensation okay
24:12 - the in this compensation there is sorry
24:14 - i just hit the mic um in this
24:15 - compensation there is
24:17 - two main things the map and the filter
24:20 - so the map
24:20 - is it gets this um it you can just like
24:23 - it's a kind of like a way to um
24:27 - eliminate some of the stuff so you can
24:29 - have like a
24:30 - you can have like a data that you want
24:34 - two three four you can see that my list
24:36 - was 12
24:37 - 23 and 44 but then it just got the
24:40 - second number of the list
24:41 - and it got two three four um
24:44 - and yeah that's it
24:47 - okay let's move on to this one uh let's
24:51 - see
24:51 - this one is complex equals to this is a
24:54 - filter now
24:55 - so just filter out the things you don't
24:56 - want so if the
24:58 - the list or the item is longer
25:01 - than five uh then five how do you call
25:05 - it
25:06 - then five uh characters then it won't
25:09 - print it out
25:09 - so the only two two items that exceed
25:12 - five characters are
25:14 - motorcycle and scooter so if we were to
25:17 - run this
25:18 - it would only print out motorcycle and
25:20 - scooter and however if we were to
25:23 - do this uh doesn't no that's not gonna
25:26 - work um
25:27 - is less than five that would print out
25:30 - car and bus
25:31 - there we go car and bus and yeah you can
25:34 - do a lot of stuff with it now let's move
25:35 - on to the last one which is functions
25:37 - so this one is a function called square
25:40 - and it's just going to square our how
25:43 - you call it
25:44 - it's going to square our uh the variable
25:47 - that we put in it
25:48 - right now it has a local variable of x
25:50 - and we're going to be setting
25:52 - x so let's uh define it let's run this
25:55 - first
25:56 - um so we can put in the answer we can
25:58 - put in the number
26:00 - and then it will square it for us so we
26:02 - put in two it's going to
26:03 - give um give us four and four there we
26:07 - go
26:08 - if we put in like a bigger number like
26:10 - this oh gosh
26:12 - it's going to come out the squared
26:14 - version of this
26:15 - and we could make this bigger even um
26:19 - like make it uh not squared instead
26:22 - let's make it cubed then we could
26:24 - just change this to times x again and
26:27 - then it would become
26:28 - not square anymore it's going to become
26:30 - cubed
26:31 - as you can see even bigger and yeah that
26:34 - is it for today
26:35 - um i hope you enjoyed it was quite a
26:36 - long video averaging around 30 minutes
26:39 - um but
26:39 - yeah i hope you found something useful
26:41 - out of this see the next one bye

Cleaned transcript:

hello my name is jemmy and today i am going to be giving you a brief overview on a basic data science and basically it's just uh syntax in python uh we probably mostly know all this already i'm just going to uh give a quick review over it so these are the basic like functions or like the basic uh what python can do basically and i'm going to be testing it in google collab since it's easy and it's very accessible um you just need to go search google collab click the first link and then sign in and then just click uh file and then a new notebook and then you just can come into a page like mine although mine has code and um yours probably doesn't so yeah let's get into it so the first thing um one of the most basic things is um um math in python so here is math uh here's math um basically this is one plus one and if i were to run it they would come out two uh one second it's going to connect to your account it's gonna initialize so you gotta wait for a bit and if you're wondering how like i got this uh doggo or like these kitty cats what i did was i just need to go into uh edit and then go to notebook settings and then wait no sorry go to uh tools settings and then go to miscellaneous and then in here we just um enable core key mode and kitty mode and then the site i set it to dark if you set it to light then it's going to burn your eyes like so holy um so yeah i recommend saying to dark because it's more better for coding in my opinion light it just makes your eyes like be gone um yeah so yeah first is just addition and you can see that it comes out two and uh that's just one plus one two minus one is going to come out one one times three is going to come out three i should probably just re restart runtime which uh which should just restart all these output so let me restart runtime there you go restarting initializing all right so now i'm just going to go ahead and just going to clear out the output so we can look at it together um these are really basic stuff so uh we should be able to cover them in no time okay so i just finished deleting on all of the outputs and now we're going to be back at this page so uh shift enters to run okay one plus one equals to two two minus one equals to one one times three equals to three and so on and then in here one divided by two it goes to zero point five and then two point one minus one this just goes to show that python can also run um floats not only integers like there one point one and then if you're wondering how to use exponents and this is how uh two two uh stars um instead of one like multiplication instead we have two and that is exponent so two by the power four equals to four oh sorry sixteen um yeah i look really stupid um so yeah four squared is 16. i forgot uh yeah anyways okay we're not going to be looking at that too much so for now we have the percentage sign it's called mod uh mod is to just get the remainder so we might you might have learned about remainders in like first or second grade or you divide two numbers and then like the leftover number then you just like use that you just like put r and then the leftover number uh yeah so this is basically like that so pretend i have five right so then the oops i deleted the thing so pretend i have five divided uh or like mod two two goes into five two times and then there's a leftover of one and it would print out the leftover which is one like so and then here uh python also knows pemdas which is orders of operation so parentheses first then exponents um then multiplication and division are the same thing and then addition and subtraction so you can see parentheses it'll do this and this first and then it will times each other so it would be five ten times together equals fifty so it should come out fifty like so okay and then in this one just print hello world um you can print it with uh quotation marks like so uh and then it will get you this result hello world and you can print it with single quotes too and it will also get you to a result of hello world and then here we're going to be moving on to lists um list is uh just really simple it's like a a place to store data in python so in here we create a list by having two brackets like so um i might need to increase it because yeah like so there's two brackets like this and then inside of the brackets there are integers uh strings another list in there anything basically and um just put it inside of this and have the name of the list equals to uh like so and then in between each uh object there is a comma to separate them and then let's just print the list so right now the list contains of one two three and high there you go one two three high and to get into a specific part of the list like pretend you only want the number one then it would be print list but then inside of there it would be um printed not parentheses of brackets and then the digit you want and then you can also hover your mouse over it and you can see the list like list um and then so number zero or list uh position zero is one and one um position one is two position two is three and position uh three is high it might be a little confusing because uh in python we start from zero and then we work our way up so the first position would be zero all right let's run this and it should be one but okay and pretend we want like uh one two three but we don't want hi then we would print list uh brackets zero parentheses and not parentheses colon and then to the one that you want so right now it's three and we got if we want three two then we gotta make sure to change this to uh no 3 since it stops at the last one so 3 over here this one right however it would stop before it so it would be 1 2 3. so we got plan 1 over um like so and then in here list zero equals to new this is how to append into a list there's other ways too um such as dot append uh but this is one of them list z uh list bracket zero equal new uh you can assign this to wherever you want like what position you want this new uh object to go in and right now we want to go into uh slot zero so if we were to run this then it would uh do that but we wouldn't see it yet since we need to print it out again oh no sorry i need to print it separately because or else it would just set list so print list like so and there we go new two three high and you can see that one is also removed since this one just replaces one um there's also another way um i'll show you uh down here it's dot append and it's also a way to do this however dota pen doesn't require you to replace it it just uh it just like adds it in uh whether rather than just replacing it but this is one way of adding a new thing into the list and then here this is uh we're moving on to complicated list i called it c list because it's a little bit more complicated uh in here uh you can see that there's a list inside of the list right so it's a bit complicated uh so there's a b c and then after that that's a 0 b 1 c 2 and then in number slot number 3 there is a list and now you can access this list by just saying c list three which prints out that a smaller list and inside that smaller list we can go into even um so like pretend we want number three right so we would just print two into that smaller list and there we go we have the number three so you can go even inside of this list you can have another list and another list in another list and you can even have multiple stuff like a dictionary and i'll be going over a dictionary soon right here and this is a comment by the way uh you just need a hashtag before and then it'll just uh be a comment the comments are used for uh data scientists or programmers to know like what this code is used for so the next time they come back they won't forget what it is uh yeah so this is a comment and it's used for data scientists to know and programmers to know uh what it is what this piece of code is used for and um you can just make it anything and you can put it anywhere too as long as it has the hashtag in front of it okay let's move on to the next one which is list i mean dictionaries so dictionary equals to name uh this is called i'm pretty sure this is called the item and then there's another one inside of here and you can just call out the item and it'll just it's sorry it's just um so the dictionary right there is the item and then inside the item there's the object and oops sorry and then there's the object so you just have to call out the item well since he wants to be in the scene so badly here he is um you really wanted to be here um say hello to the camera hello hello good boy okay i can go hey don't be naughty cat hello say hello all right you can go now don't come back all right so yeah that was a quick uh bang bang thingy he wanted to come in so i let him in but yeah continuing of what we just said um there's the item and then there is the object so you just have to call out the item and it'll print out the object so in here the item is name and then the object is gemmy and what you do is print uh the name of the dictionary and then inside of the dictionary we have the of the brackets and inside the brackets we just print out the name of the item uh in the quotation marks or single quotes to make sure that it's like it it's like a string and we're gonna just shift enter and there we go it prints out gemmy um and in here to create a dictionary we need uh two curly brackets not like a straight one anymore and inside uh separating the uh the item from the object we have a colon um like so and yeah it will print out the object for us if we call out the item now let's move on to another thing it's a tuple or a tuple or a tuple you know people have a lot of uh a lot of opinions about uh this this word um p some people call it tuples some people call tuples some people call it tuple i don't know so i'm just going to call it tuple um or tuple i don't know either i'll just call tuple okay i'm just going to call it two tuple uh i just call it whatever you want okay um so i'll call it two bull and uh a table is very similar to a list being that they are uh similar to each other um a dictionary is not similar because it has the item and object however a tuple also stores uh objects just like a list does however there is a big difference um in tuples right you cannot edit it meaning that you cannot like add any more information uh or you can like delete any information um it's like set in stone so it's like when you create it then it's set uh and inside of a list however we can add it or replace it or cut it out as we saw earlier so both of them have their good and bad sides um but yeah a tuple is different from a list but they are pretty similar and into create a troop tuple we need uh two parentheses surrounding our objects inside of the tuple and then once we have it then we're done so inside of this tuple i have one two three and when we print out the tuple we can print out the whole thing like a list or we can print out one of them which is going to be number two this time so tuple uh brackets oh what type is not subscriptable okay so yeah this is because you can't edit it so we have to print out the whole thing yeah okay print tuple okay i don't okay let's just delete this what if we just do like that it just prints out tuple um okay let's try uh hello okay hello equals to the tuple maybe you can't use tuples since it's a keyword or something hello is not defined and you forgot to capitalize hello is not defined okay let's try it now there we go so i don't know why you can't do it in separate cells um but it you can't do in separate cells i guess uh so in here i renamed my tuple to hello and we could in google call out you just need to type out the name then it prints out it for you however it we should inhabit this because in other like ides then it wouldn't do this for us um but in google collab is an exception so i don't understand why it couldn't run in separate cells however we can just run in the same cell it doesn't really matter so in here we're going to do this use the same code we did earlier we're going to print out number two there we go it prints out number two okay let's move on to the next one so this one let's try to add in a new uh and a new object into the tubal it's not going to work i it's gonna come it's gonna come up an error but i'm just going to show you that it's different from a list because you can't add new stuff there we go it comes up an error this type does not support um does not support item assignment meaning that the tuple you cannot add anything new or you cannot really edit it it's just set in stone um yeah okay let's move on to the next one this one is a set uh a set is kind of like um another uh tuple but and like a list however it's different so um one two three right let's just run this it prints out one two three simple right let me just delete this i don't like yours um like so and then however if we have this long set right let's see what it does we'll print out one two three yes it does this is because a set will eliminate every single duplicate number and will only have the same uh number so no matter how much ones you put on there if the list is just one it'll just print out one one okay if that makes sense um or like pretend you have a million a's right then it will only print out one if you just uh run it and this is the speci uh the special the special latte no the special the specialty of set okay it prints out only one of the duplicate number or the duplicate object it will only print one of them and yeah that's a set now let's move on to comparing um comparing is like uh the things we do in math right one is greater than two which is obviously not true so we're going to run this and it should come out false it's like a boolean kind of like uh comparing like true or false one equals to one true or false true right yeah so in here this is how to measure greater than this one is equal sign um you don't actually have one equal sign in python instead you use two of them uh because i don't know i didn't make python um but yeah you you need to use two of them uh to make it uh work because uh if we see down here this is one is less or equal to two um if one of these applies then it's going to be true so like so 1 is less or equal to true to 2 is true 1 is greater or equal to 2 none of these 1 are so it's going to be false and then here is n equal it's a exclamation point and then an equal sign so one is not equal to one false right all right let's move on to logic operation so this one is just um and and or so and right here we just uh and is very special if one of those conditions are not true then it will be a false however if both of them are true then it's going to be a true okay so let's look at the first one one is greater than zero true one is equal to one that's also true so it should come out true okay now let's look at the true and false so one of them one of the conditions are false and the other one is true right so it's going to come out false since it's like going to do this and um i'll try true and true it should be true right so at first when i was doing this when i start first started python i was like huh i'm just going to make it look like it's a negative and positive number false is going to be negative true is going to be positive because we all know that if a negative number comes with a positive number right it's going to turn into a negative um like pretend um like we have a plus and minus sign next to each other and then it would become a minus because let me just show you in the example like one plus one like so and then like a plus and in brackets negative two plus uh one right so then we would do both of the equations this one would come out two this would come out um what would come out negative one right so then we will open the parenthesis and now we don't usually see this in math but we have a plus and minus sign next to each other and this would turn out into a minus sign and making this into one but yeah this is not math class but i'm just going to say that at first i thought that was going to be an accurate represent representation however once i looked at false and false right so two negative signs would equal to a positive however let's try false and false it still turns out false since um if one of them is false then it will be false okay and let's look at or now so one of this isn't true one equals to two is not um true it's false two equals to true on the other hand is true so if we were to run this what would come out it would come out true um in or only one of the conditions need to be true for it to say true um that's a that's a wrap um but okay it's unlike and which both of them needs to be true to true to be true however if on or you only need one of them to be true to make the results true it's really complicated because it's true and false but yeah um you probably get a gist of it and now let's look on if alif and else yeah so we're going to be moving on if alif and else so let's start so if um is just like you know in basic programming if there's if this then that um alif is a combination of elves and if uh else you can see it el and if is if and then a lift is just like if but it's just between if and else and in else we just do the rest in else so if one plus one equals to two then print first if a lift oh sorry a lift three goes to three print middle else print last so if it goes into one plus one equals to two it's going to print out first right so let's try yeah first however if we change this to three okay it's going to not work anymore so it's gonna pop out and it's gonna come to a lift and it says middle since three equals to three um and print middle however if this wasn't correct either let's pretend like it's an equal to it would print out last since it pops out of a lift and it goes into else and then since else doesn't have a condition it just prints out whatever's in else which is last um and yeah that's how if alif and else works now let's look at some loops uh let's begin with four loops so this is my list that i'm going to be using for this for loop it consists of one two three abc okay and let's move on to this one for item in for list print item so this will just print out one two three abc okay there we go um it just like repeats itself until it's done so for item an item in here can actually be anything it can be a b c d whatever you want um it'll print it out and in here we have four item in for list print item plus item so we're going to add all these up to so let's see what the results so you can see it doubles two four six instead of one two three and instead of a b c it's a a b b c c and then in here it's four item in for list print yes so this is just just printing out the printing out yes so just sees how much um there are in here uh and every time there's a list sorry there's an item then it'll print out yes so you can see there's six and then there's gonna be six yeses and let's move on to the while loop uh the while loop in here uh it's pretty simple kind of like the for loop however the while loop it's like while this then you can run this however if it does if it's out then just stop so here we have a while list and it's one while while list is smaller than 5 print while list is and then it just prints out the number and then every time it repeats itself it adds a 1 to the while list so there you go it's 1 2 3 four if we wanted to go to five then we gotta make it six like so and then now let's move on to four iron range uh this is another for loop i just forgot to add it up there so i add it down here four iron range it's pretty special you can limit how much you want um like repeating itself so if you wanted to repeat it five times then you set it to five um like so it print zero one two three four because it will print i and i is this number so if you want to go to like 10 right um we will have to 10 0 1 2 3 4 5 6 7 8 9. uh this is because it starts at zero it actually has 10 items but it just doesn't have the number 10 itself and now let's move on to list com comprehension or compensation list compensation okay the in this compensation there is sorry i just hit the mic um in this compensation there is two main things the map and the filter so the map is it gets this um it you can just like it's a kind of like a way to um eliminate some of the stuff so you can have like a you can have like a data that you want two three four you can see that my list was 12 23 and 44 but then it just got the second number of the list and it got two three four um and yeah that's it okay let's move on to this one uh let's see this one is complex equals to this is a filter now so just filter out the things you don't want so if the the list or the item is longer than five uh then five how do you call it then five uh characters then it won't print it out so the only two two items that exceed five characters are motorcycle and scooter so if we were to run this it would only print out motorcycle and scooter and however if we were to do this uh doesn't no that's not gonna work um is less than five that would print out car and bus there we go car and bus and yeah you can do a lot of stuff with it now let's move on to the last one which is functions so this one is a function called square and it's just going to square our how you call it it's going to square our uh the variable that we put in it right now it has a local variable of x and we're going to be setting x so let's uh define it let's run this first um so we can put in the answer we can put in the number and then it will square it for us so we put in two it's going to give um give us four and four there we go if we put in like a bigger number like this oh gosh it's going to come out the squared version of this and we could make this bigger even um like make it uh not squared instead let's make it cubed then we could just change this to times x again and then it would become not square anymore it's going to become cubed as you can see even bigger and yeah that is it for today um i hope you enjoyed it was quite a long video averaging around 30 minutes um but yeah i hope you found something useful out of this see the next one bye
