With timestamps:

00:00 - hello everybody welcome back to another
00:02 - video today i will be giving you a brief
00:04 - overview on object oriented programming
00:06 - in python uh ep1 so object oriented
00:09 - programming is basically
00:12 - classes and objects it's going to get a
00:14 - little bit more complicated than that
00:15 - but that's just overall so i already
00:18 - know i taught in the past but this is
00:20 - more simple and it's easier to
00:22 - understand because uh i am using
00:24 - pokemons and it's going to be just a
00:27 - short lesson it's not too long but it
00:29 - has a lot of detail in it so let's look
00:32 - at our first code by the way the link to
00:34 - download this notebook is in the
00:36 - description if you want to try it out
00:37 - for yourself or you can do it along with
00:39 - me you can download it and then open it
00:42 - in google collab or in jupyter notebook
00:45 - so how to create a class uh the first
00:47 - thing you want to do is you want to put
00:49 - class right type up like the word class
00:52 - and then the name of the class at the
00:54 - behind of it uh which is pokemon in my
00:56 - case and then after that you have a
00:59 - little uh
01:01 - how you call it colon and click enter
01:03 - and it should give you a little indent
01:05 - over here and in that indent you can put
01:08 - the
01:09 - the
01:10 - attributes of the pokemon or whatever
01:12 - you want to create like name and then
01:14 - the string of the name and then attack
01:16 - and the integer and once you did that
01:19 - after that you have p1 p1 is pokemon one
01:22 - it's just a variable and it equals to
01:24 - the class pokemon so p1 equals to class
01:27 - pokemon and print p1.name which is
01:30 - pikachu and comma p1.attack which is 20.
01:34 - and it might look a little complicated
01:36 - but let me say something so the class
01:38 - right here is like a blueprint where you
01:40 - can use it over and over again to create
01:42 - different stuff so pretend uh like the
01:45 - word car is very
01:47 - uh
01:48 - general so there's like could be a
01:51 - toyota
01:52 - uh ford um
01:55 - chevrolet whatever but basically the car
01:58 - is kind of like the class and then p1 is
02:01 - kind of like the model of the car like
02:03 - chevrolet ford uh toyota or whatever p1
02:06 - is kind of like the model and the class
02:08 - is the car so it's just an overall thing
02:11 - like pokemon and pokemon one is a
02:14 - comparison we can implement this is that
02:17 - uh we can put this inside of a big
02:20 - string so print p1.name which is pikachu
02:23 - pikachu has an attack power of and then
02:27 - strp1.attack
02:29 - this is so that i can combine it with a
02:31 - exclamation point but you don't need
02:32 - this sdr if you don't want an
02:34 - exclamation point at the end but since i
02:36 - do i just put it there so it's the same
02:38 - type as each other so of
02:41 - strp1.attack which is 20 and plus
02:44 - exclamation point
02:46 - there we go pikachu has an attack power
02:48 - of 20 and that is a way to implement
02:51 - classes into your code uh let's look at
02:54 - another one called python constructors
02:56 - um
02:57 - not like python cons oh that's actually
02:59 - really um ironic uh can get a
03:01 - constructor construct
03:04 - snake
03:06 - like this uh it's a snake and then
03:09 - there's the python
03:11 - python
03:13 - like this oh python principles no
03:16 - but there's the the bow constrictor or
03:18 - constructor um like some people might
03:20 - read a constructor but python
03:22 - constrictors it's very ironic but uh
03:24 - let's move on so patent constructors are
03:27 - such as dot underscore underscore new
03:30 - underscore underscore uh that is a
03:33 - little
03:34 - uh python constructor that we can use so
03:37 - class pokemon defined underscore
03:39 - underscore new underscore underscore
03:41 - self uh this is this uh com
03:44 - python constructor is used to
03:47 - uh every time a new uh
03:51 - object is declared like p1 equals to
03:53 - pokemon like this this is how to declare
03:55 - an object this underscore underscore new
03:58 - underscore underscore a
04:00 - constructor gets activated and to check
04:02 - that it actually gets activated we're
04:04 - going to do define new self print
04:07 - pokemon has been created and then if
04:10 - it's if it's been defined right it will
04:12 - trigger this uh constructor and it'll
04:15 - print out this thing so let's try and
04:18 - run it
04:19 - as you can see it did trigger it uh so
04:21 - it typed it out printed it out sorry and
04:24 - if we were to trigger it again
04:26 - by using p2 it should print out two
04:28 - times there we go so even how much
04:31 - objects it is created there is always
04:33 - going to trigger that underscore
04:35 - underscore new underscore underscore
04:37 - it's kind of hard to say but you'll get
04:38 - used to it and yeah that is python
04:41 - constructors
04:42 - let's move on to initializing objects
04:45 - initializing objects is uh
04:49 - using it with the underscore underscore
04:51 - init underscore underscore method um so
04:53 - we have a class called pokeball and i'm
04:55 - sure most of you know that there is
04:57 - different types of pokeballs like the
04:59 - normal one there is the ultra ball great
05:01 - ball and master ball i am doing some of
05:04 - them in pokemon go because i don't know
05:07 - every single one because there's like
05:08 - safari balls uh and a lot more in
05:10 - different game modes but i'm only going
05:12 - to do it for pokemon go and i'm pretty
05:15 - sure poke does pokemon go have a master
05:17 - ball does pokemon go have
05:21 - a master ball
05:24 - uh
05:25 - oh yes you can you can't
05:27 - not really have one missing game so far
05:30 - oh no there is no master ball so you
05:32 - there's no master bomb pokemon go but i
05:34 - just added it there because it's very
05:37 - infamous um
05:38 - and it's because it has a 100 catch rate
05:41 - but anyways let's get back to the code
05:43 - so we have our class called pokeball and
05:45 - inside of that we have a method or a
05:47 - constructor called init
05:50 - and in it is used to create objects uh
05:53 - like kind of like the new one except
05:55 - that this is actually used to create
05:56 - some so define in it self name and see
05:59 - rate these are some parameters or global
06:02 - not global variables i mean local
06:04 - variables uh that is stored inside of
06:07 - this function right here this is also
06:09 - known as a function but anyways these
06:11 - are some variables that we can use later
06:13 - on and inside of that we have self.name
06:16 - equals to name and self.catch rate
06:19 - equals to catch rate so self name and
06:21 - catch rate and let's look at this one so
06:24 - now we're declaring four objects okay we
06:26 - have pk one pokeball one pokeball two
06:28 - pokeball three and four so pokeball one
06:31 - it goes this is the name by the way name
06:34 - is pokeball comma catch rate as you can
06:36 - see here name comma catch rate
06:39 - uh 50
06:41 - pk2 pokeball is pokeball by the way is
06:44 - the name of the class so
06:46 - that's not actually the name of the
06:48 - actual pk2 and pk2 equals to
06:51 - great ball and 65 so it has six it has a
06:54 - great ball it's called a great ball and
06:56 - has 65 catch rate by the way these catch
06:59 - rate are not accurate because i just
07:01 - made them up um but you know they have a
07:04 - ranking by themselves so i just assumed
07:06 - i took uh i took an educated guess um
07:09 - but yeah the great ball has 65 percent
07:12 - catch rate pk 3 is an ultra ball with an
07:15 - 85 catch rate and pk4 is a master ball
07:18 - with a 100 catch rate so now we can use
07:21 - this and we can print some uh things out
07:24 - like pk1 dot name has a catch rate of
07:26 - and then pk1 dot catch rate and this
07:29 - basically makes it so that we can like
07:31 - print out stuff that is actually
07:33 - meaningful instead of just pokeball 50
07:36 - but uh it makes it more context i guess
07:39 - so pokeball has a catchword of 50
07:42 - uh you can change the the pokeball or
07:44 - the the
07:46 - the pokeball's name and the pokeballs
07:47 - catch rate by
07:49 - changing uh the one to four over here so
07:52 - let's do the master ball so instead of
07:54 - one it's four pk4 there you go master
07:57 - ball has a catch rate of 100 percent so
07:59 - there is how to implement it
08:02 - let's look at the next one which is
08:03 - adding attributes to empty class so
08:05 - right now we have an empty class and the
08:07 - way to create it is to just you clasp
08:10 - and the name of the class which is
08:11 - pokedex and colon after that put in the
08:15 - command pass which will just make it so
08:17 - that there is no errors that's going to
08:19 - happen it just declares it as an empty
08:22 - class once we did that we can do pdx
08:25 - which is pokedex equals to pokedex um
08:28 - this is just declaring uh
08:30 - object so don't get surprised it might
08:32 - sound a little complicated but after
08:34 - that we will do print pdx dot name
08:37 - underscore pdx.cp which is two things uh
08:40 - two attributes we're going to be adding
08:42 - to our class however it's not there yet
08:44 - right so what happens when we run it of
08:46 - course it's going to come up an error
08:48 - because uh there is no attribute name
08:52 - and cp in there yet so once we activate
08:55 - it by using these commands pdx one dot
08:58 - name equals to caterpie and
09:00 - pdx1.cp equals to 25 it should have it
09:03 - and there we go once you type it out
09:05 - again there is no error instead it types
09:07 - out caterpie 25 so there is how to add
09:10 - attributes to an empty class you can
09:13 - even do this with a class that already
09:15 - has some attributes to it and you can
09:17 - add even more to it it works both ways
09:20 - let's look at some object methods so we
09:23 - might have already known underscore
09:24 - underscore init underscore underscore
09:26 - but we can also create our own method
09:28 - called polka detail and i'll show you
09:30 - what it does so we have a class called
09:32 - createpokey and we can create our own
09:34 - pokemon and we can define underscore
09:37 - underscore init underscore underscore uh
09:39 - as self name and cp and p type um self
09:44 - is of course mandatory we need to have
09:46 - that in order to declare uh
09:49 - our pokemon's name and stuff but self
09:51 - then name the name of the pokemon the
09:53 - combat power of the pokemon and the type
09:56 - the reason i didn't put the straight
09:58 - type like this is because it's a python
10:00 - uh keyword and i am scared that's going
10:03 - to have an error so i just played it
10:04 - safe and named it p-type for pokemon
10:06 - type and after that we do self.name
10:09 - equals to name self.cp equals to cp
10:12 - self.p type equals to p type uh and so
10:15 - on if you have more but after that we
10:17 - will declare another function or method
10:19 - called poke underscore detail and inside
10:22 - of there we have the only one parameter
10:25 - called self which is mandatory as you
10:27 - said earlier and well it's not mandatory
10:29 - i'm just
10:30 - it's mandatory if you want to do like
10:33 - adding in um or changing the
10:36 - the name of it like what we did up here
10:38 - with the pokeballs
10:40 - and once we did that we're going to
10:42 - declare threes print uh print uh code
10:46 - print the name of the pokemon is and
10:48 - then the self.name uh which is what
10:51 - we're gonna set print self.name has cp
10:54 - of stealth.cp this is so that we can use
10:58 - the pokemon's name instead of just
10:59 - writing your pokemon and you can do
11:02 - print the type of pokemon's name is self
11:05 - type which self p type which is the
11:08 - pokemon's type so once we did that we
11:10 - need to declare the actual name the cp
11:13 - and the type so i will do p1 equals to
11:16 - create pokey which is the name of the
11:18 - class python which is my name of the
11:20 - pokemon uh and 100 which is the combat
11:23 - power and grass which is the type after
11:26 - that we just need to do
11:28 - p1.pokedetail which we'll call this
11:30 - function or this method and it will just
11:33 - do the rest for us so as you can see if
11:35 - you run it it will come up the name of
11:37 - the pokemon is python python has cp of
11:40 - 100 and the type of python is grass
11:44 - and yeah you can create your own pokemon
11:45 - like uh using classes and object
11:47 - oriented programming of course there is
11:49 - going to be more
11:51 - episodes later on so i hope you stay
11:53 - tuned for that and again see you in the
11:55 - next video bye

Cleaned transcript:

hello everybody welcome back to another video today i will be giving you a brief overview on object oriented programming in python uh ep1 so object oriented programming is basically classes and objects it's going to get a little bit more complicated than that but that's just overall so i already know i taught in the past but this is more simple and it's easier to understand because uh i am using pokemons and it's going to be just a short lesson it's not too long but it has a lot of detail in it so let's look at our first code by the way the link to download this notebook is in the description if you want to try it out for yourself or you can do it along with me you can download it and then open it in google collab or in jupyter notebook so how to create a class uh the first thing you want to do is you want to put class right type up like the word class and then the name of the class at the behind of it uh which is pokemon in my case and then after that you have a little uh how you call it colon and click enter and it should give you a little indent over here and in that indent you can put the the attributes of the pokemon or whatever you want to create like name and then the string of the name and then attack and the integer and once you did that after that you have p1 p1 is pokemon one it's just a variable and it equals to the class pokemon so p1 equals to class pokemon and print p1.name which is pikachu and comma p1.attack which is 20. and it might look a little complicated but let me say something so the class right here is like a blueprint where you can use it over and over again to create different stuff so pretend uh like the word car is very uh general so there's like could be a toyota uh ford um chevrolet whatever but basically the car is kind of like the class and then p1 is kind of like the model of the car like chevrolet ford uh toyota or whatever p1 is kind of like the model and the class is the car so it's just an overall thing like pokemon and pokemon one is a comparison we can implement this is that uh we can put this inside of a big string so print p1.name which is pikachu pikachu has an attack power of and then strp1.attack this is so that i can combine it with a exclamation point but you don't need this sdr if you don't want an exclamation point at the end but since i do i just put it there so it's the same type as each other so of strp1.attack which is 20 and plus exclamation point there we go pikachu has an attack power of 20 and that is a way to implement classes into your code uh let's look at another one called python constructors um not like python cons oh that's actually really um ironic uh can get a constructor construct snake like this uh it's a snake and then there's the python python like this oh python principles no but there's the the bow constrictor or constructor um like some people might read a constructor but python constrictors it's very ironic but uh let's move on so patent constructors are such as dot underscore underscore new underscore underscore uh that is a little uh python constructor that we can use so class pokemon defined underscore underscore new underscore underscore self uh this is this uh com python constructor is used to uh every time a new uh object is declared like p1 equals to pokemon like this this is how to declare an object this underscore underscore new underscore underscore a constructor gets activated and to check that it actually gets activated we're going to do define new self print pokemon has been created and then if it's if it's been defined right it will trigger this uh constructor and it'll print out this thing so let's try and run it as you can see it did trigger it uh so it typed it out printed it out sorry and if we were to trigger it again by using p2 it should print out two times there we go so even how much objects it is created there is always going to trigger that underscore underscore new underscore underscore it's kind of hard to say but you'll get used to it and yeah that is python constructors let's move on to initializing objects initializing objects is uh using it with the underscore underscore init underscore underscore method um so we have a class called pokeball and i'm sure most of you know that there is different types of pokeballs like the normal one there is the ultra ball great ball and master ball i am doing some of them in pokemon go because i don't know every single one because there's like safari balls uh and a lot more in different game modes but i'm only going to do it for pokemon go and i'm pretty sure poke does pokemon go have a master ball does pokemon go have a master ball uh oh yes you can you can't not really have one missing game so far oh no there is no master ball so you there's no master bomb pokemon go but i just added it there because it's very infamous um and it's because it has a 100 catch rate but anyways let's get back to the code so we have our class called pokeball and inside of that we have a method or a constructor called init and in it is used to create objects uh like kind of like the new one except that this is actually used to create some so define in it self name and see rate these are some parameters or global not global variables i mean local variables uh that is stored inside of this function right here this is also known as a function but anyways these are some variables that we can use later on and inside of that we have self.name equals to name and self.catch rate equals to catch rate so self name and catch rate and let's look at this one so now we're declaring four objects okay we have pk one pokeball one pokeball two pokeball three and four so pokeball one it goes this is the name by the way name is pokeball comma catch rate as you can see here name comma catch rate uh 50 pk2 pokeball is pokeball by the way is the name of the class so that's not actually the name of the actual pk2 and pk2 equals to great ball and 65 so it has six it has a great ball it's called a great ball and has 65 catch rate by the way these catch rate are not accurate because i just made them up um but you know they have a ranking by themselves so i just assumed i took uh i took an educated guess um but yeah the great ball has 65 percent catch rate pk 3 is an ultra ball with an 85 catch rate and pk4 is a master ball with a 100 catch rate so now we can use this and we can print some uh things out like pk1 dot name has a catch rate of and then pk1 dot catch rate and this basically makes it so that we can like print out stuff that is actually meaningful instead of just pokeball 50 but uh it makes it more context i guess so pokeball has a catchword of 50 uh you can change the the pokeball or the the the pokeball's name and the pokeballs catch rate by changing uh the one to four over here so let's do the master ball so instead of one it's four pk4 there you go master ball has a catch rate of 100 percent so there is how to implement it let's look at the next one which is adding attributes to empty class so right now we have an empty class and the way to create it is to just you clasp and the name of the class which is pokedex and colon after that put in the command pass which will just make it so that there is no errors that's going to happen it just declares it as an empty class once we did that we can do pdx which is pokedex equals to pokedex um this is just declaring uh object so don't get surprised it might sound a little complicated but after that we will do print pdx dot name underscore pdx.cp which is two things uh two attributes we're going to be adding to our class however it's not there yet right so what happens when we run it of course it's going to come up an error because uh there is no attribute name and cp in there yet so once we activate it by using these commands pdx one dot name equals to caterpie and pdx1.cp equals to 25 it should have it and there we go once you type it out again there is no error instead it types out caterpie 25 so there is how to add attributes to an empty class you can even do this with a class that already has some attributes to it and you can add even more to it it works both ways let's look at some object methods so we might have already known underscore underscore init underscore underscore but we can also create our own method called polka detail and i'll show you what it does so we have a class called createpokey and we can create our own pokemon and we can define underscore underscore init underscore underscore uh as self name and cp and p type um self is of course mandatory we need to have that in order to declare uh our pokemon's name and stuff but self then name the name of the pokemon the combat power of the pokemon and the type the reason i didn't put the straight type like this is because it's a python uh keyword and i am scared that's going to have an error so i just played it safe and named it ptype for pokemon type and after that we do self.name equals to name self.cp equals to cp self.p type equals to p type uh and so on if you have more but after that we will declare another function or method called poke underscore detail and inside of there we have the only one parameter called self which is mandatory as you said earlier and well it's not mandatory i'm just it's mandatory if you want to do like adding in um or changing the the name of it like what we did up here with the pokeballs and once we did that we're going to declare threes print uh print uh code print the name of the pokemon is and then the self.name uh which is what we're gonna set print self.name has cp of stealth.cp this is so that we can use the pokemon's name instead of just writing your pokemon and you can do print the type of pokemon's name is self type which self p type which is the pokemon's type so once we did that we need to declare the actual name the cp and the type so i will do p1 equals to create pokey which is the name of the class python which is my name of the pokemon uh and 100 which is the combat power and grass which is the type after that we just need to do p1.pokedetail which we'll call this function or this method and it will just do the rest for us so as you can see if you run it it will come up the name of the pokemon is python python has cp of 100 and the type of python is grass and yeah you can create your own pokemon like uh using classes and object oriented programming of course there is going to be more episodes later on so i hope you stay tuned for that and again see you in the next video bye
