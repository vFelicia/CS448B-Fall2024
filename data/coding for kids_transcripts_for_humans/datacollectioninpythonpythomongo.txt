With timestamps:

00:01 - hello everybody my name is jemmy and
00:03 - today i will be giving you a brief
00:05 - overview on collections in python
00:07 - collections are like lists tuples
00:09 - dictionaries
00:11 - etc so i'm going to be doing that in
00:13 - jupyter notebook
00:14 - the way to open jupyter notebook is if
00:16 - you're in windows type in cmd in your
00:18 - command prompt
00:19 - click enter then just type in jupyter
00:21 - notebook
00:23 - okay and it should open in your browser
00:28 - uh just wait a few seconds okay and
00:30 - there we go so now once it opens
00:32 - uh what you want to do is you want to
00:34 - click on
00:35 - new python 3 ipy kernel but since i
00:38 - already have it i will just
00:39 - um open it from my uh jupiter notebook
00:44 - and by the way the link to download this
00:46 - notebook is in the description
00:47 - if you want to go check it out you can
00:49 - um but just download it and then
00:51 - work with me through collab or jupiter
00:53 - notebook
00:54 - anything would do so now let's
00:57 - get into the video so let's look at
01:00 - lists first since list
01:02 - is one of the best ways to store data in
01:05 - python
01:05 - and is one of the most used ways either
01:07 - um two
01:09 - um so let's look at how to create a list
01:12 - by the way a list is mutable which means
01:14 - that you can change it throughout the
01:16 - coding instead of like not being able to
01:20 - change it you can like add stuff to it
01:21 - you can delete stuff from it
01:23 - uh but yeah let's look at how to create
01:25 - it so right here is
01:27 - a list name pokedex uh and in pokedex
01:30 - there is pikachu ev ditto and magikarp
01:33 - and
01:34 - let me show you the way to create one so
01:36 - this is a list now you're declaring
01:38 - pokedex as an empty list
01:40 - so to create a list you need two
01:42 - brackets one
01:43 - to uh the right bracket in the left
01:45 - bracket once you did that
01:46 - anything you put in into this list such
01:50 - as
01:50 - numbers integers strings
01:53 - and uh another list i can you can also
01:56 - put a list inside of a list
01:57 - uh anything in here that is separate by
02:00 - a comma
02:01 - is a part of the list so now we have
02:03 - three objects
02:04 - eight an integer sdf a string
02:08 - and another empty list so you can put
02:11 - anything inside of here but i'm going to
02:12 - create a list of strings
02:14 - so i'm going to put in my pokemons
02:16 - pikachu eevee ditto and magikarp all of
02:18 - them are strings
02:19 - so once we did this we need to know a
02:21 - bit of information
02:22 - just like yesterday how i was saying
02:24 - stuff about indexing and slicing
02:26 - list index start from zero so pikachu
02:29 - zero eb
02:30 - is one ditto is two and magikarp is
02:32 - three
02:33 - and just to remember this so you don't
02:34 - get confused like pikachu is one
02:36 - and then you put in one and it's
02:38 - actually eevee so don't get confused it
02:40 - starts from zero
02:41 - so now let's just print out the whole
02:43 - list so if we were to print out the
02:45 - whole list it would look somewhat like
02:47 - this
02:47 - pikachu eevee ditto magikarp with the
02:49 - brackets and
02:50 - the uh the quotations but however we if
02:54 - we want just a specific
02:56 - one um or a specific pokemon we can
02:59 - uh type it type in their index and we
03:02 - will get it
03:02 - so let's pretend we want ditto ditto is
03:05 - index
03:05 - two so if we put in two there we go just
03:08 - the plain text ditto and if we want
03:12 - like pikachu and evie then we would put
03:14 - in one through
03:15 - three like this and now we need to know
03:18 - something
03:19 - um three you might say hey isn't three
03:22 - all the way to uh magikarp well yes it
03:26 - is
03:26 - but the reason we want to do this is
03:28 - because all every time you want to slice
03:31 - something you need
03:32 - to have one above the limit so if we
03:34 - want ditto and ditto
03:35 - is two we need to put it to three
03:37 - however because if we put it to two
03:39 - then we'll just print out eb and uh this
03:42 - doesn't go
03:43 - this doesn't apply to starting hover the
03:45 - start just goes
03:46 - with the starting pokemon so eevee is
03:48 - index one so we put index one here
03:50 - if you put index zero then it will be
03:52 - pikachu to ditto
03:54 - but we don't want that so you want one
03:56 - two three
03:58 - like so um and anyways that is the
04:01 - basics of a list
04:02 - let's move on to the list structure so
04:04 - as i said earlier inside of a list there
04:07 - can be another list
04:08 - um and we can also access this list so
04:11 - what we need to do
04:12 - is first uh let's look at the main list
04:14 - so
04:15 - this big one which is called pokedex so
04:17 - this big list right here
04:19 - contains pikachu eevee ditto magikarp
04:22 - and
04:22 - one smaller list uh and now let's look
04:25 - at how we can access a smaller list
04:28 - if we count the index we can know what
04:30 - uh indexes is
04:32 - which is 0 1 2 3 4. so this is index
04:36 - 4 right here and if we were to do print
04:38 - pokedex
04:39 - index 4 then it would print out the
04:42 - whole list
04:42 - or the smaller list and if we want to
04:45 - access one of these individual numbers
04:47 - we can also do that so if we want
04:49 - pretend number
04:51 - 20 then we can do pokedex 4
04:54 - and then after that we have another brac
04:57 - or yeah another bracket
04:58 - one so it will go to bracket four and it
05:01 - will go into bracket
05:02 - uh no sorry it will go to index four of
05:05 - pokedex
05:06 - and it will go into index one of the
05:07 - smaller list so now we can access the
05:10 - number 15.
05:11 - i'm so sorry um i got confused myself so
05:14 - remember when i said the index starts
05:15 - from zero well we need to put zero in
05:18 - there
05:18 - and now we get 20 so so sorry um i got
05:21 - confused myself there
05:22 - but yeah we can access smaller lists
05:24 - throughout the big list
05:26 - and if we were to have another list
05:27 - inside of this list i mean you can go on
05:29 - forever but we're not going to do that
05:31 - and the more list you have and if you
05:33 - want to access the smaller one you can
05:34 - just
05:35 - add print add brackets through your
05:37 - printing and it will go into
05:39 - each list individually and now let's
05:42 - look at
05:43 - lists with functions and if statements
05:45 - so this is basically what we can
05:47 - implement or apply to our everyday life
05:50 - and
05:50 - i'll show you an example right here let
05:52 - me drink some water
05:56 - um but yeah this is a way to implement
06:00 - our list
06:00 - i made this by myself so uh yeah
06:04 - so we have our pokedex here with pikachu
06:06 - eevee ditto magikarp and the smaller
06:08 - list
06:09 - and also we have a
06:12 - uh input variable here which is called
06:14 - pokemon and the input is
06:16 - enter oh sorry enter there enter
06:20 - the poke watch enter the in your
06:22 - pokemon's name
06:24 - i think i kind of messed something up um
06:27 - enter
06:27 - your pokemon enter your pokemon's name
06:31 - or the pokemon's name okay enter the
06:35 - pokemon's name
06:36 - and then basically it will let them type
06:37 - it in and once we do that
06:39 - we will go into well but we'll create
06:42 - this
06:42 - uh function right here which is called
06:44 - pokeprint and in pokeprint there is a
06:47 - parameter called index
06:48 - and we're going to be using index as the
06:51 - way to access our
06:52 - uh our little um individual
06:55 - strings so pokedex index which is
06:58 - one through four uh go into
07:02 - or know one two one zero two three and
07:05 - then it'll
07:05 - go to that pokemon is that is a pokemon
07:09 - that has
07:09 - pokedex four which is our smaller list
07:12 - index which goes into that smaller list
07:14 - is index
07:14 - attack power i know it might look
07:16 - confusing right now but
07:18 - throughout the when i run it it will
07:20 - probably be more
07:21 - less confusing so stick around um and
07:23 - also after that
07:24 - once we made the function we will go in
07:26 - here and we will
07:28 - go into an if statement so we have if
07:30 - pokemon equals to pikachu
07:32 - which is by the way the pokemon is the
07:35 - text that they inserted
07:36 - if it goes to pikachu poke print zero so
07:40 - now we're going to call up the function
07:42 - and um
07:43 - make it to zero the parameter index
07:45 - equals to zero and alif
07:47 - which is else if uh which is used
07:49 - between if and else
07:50 - um if pokemon equals equals to ev
07:53 - poke print one and so on until magikarp
07:56 - and after that we put an
07:58 - else and in the else we put print your
08:00 - pokemon is not currently inside of the
08:02 - database
08:03 - to let them know that it's not there yet
08:05 - so
08:06 - uh yeah so if we were to try this out
08:08 - and let's pretend we type in something
08:10 - random
08:11 - or something not in the not in the data
08:14 - set like moltres
08:16 - then it goes your pokemon is not
08:18 - currently inside the database
08:19 - however if you were to type in something
08:22 - that was inside the database
08:23 - like eevee like so and here
08:27 - is the string that they will pop up evie
08:29 - is a pokemon that has 15 attack power
08:31 - as i said earlier this doesn't really
08:33 - make sense but
08:34 - this makes a lot more sense because you
08:37 - know we can read it easier
08:38 - but yeah this is how you can implement
08:41 - it we can do other pokemons too that we
08:43 - have
08:44 - like magikarp and there we go
08:48 - but yeah as i said earlier you can do
08:50 - many things with lists
08:51 - uh a lot of good things and this is just
08:54 - an example
08:55 - this is of course really small scale but
08:57 - you can enlarge it to be
08:58 - a really large scale project that you
09:01 - can make and list
09:02 - will be a part of them i promise you'll
09:04 - lose you will use
09:05 - lists inside of your project once or
09:08 - twice
09:09 - and now let's look at how we can uh add
09:11 - some values onto our list
09:13 - so pretend we have a list made of
09:15 - pikachu eevee ditto and magikarp right
09:17 - uh and pretend we wanted to add another
09:20 - uh pokemon to it so
09:22 - instead of having to like type it out
09:25 - again like this
09:26 - we can just use the command dot append
09:29 - and
09:29 - inside of data pen we can put anything
09:31 - we want inside there
09:33 - and it'll add it to the end of the list
09:35 - so we're going to be adding moltres
09:36 - there
09:37 - and let's print out the pokedex before
09:39 - it was before moltres is added
09:41 - and then printed again after moltres was
09:43 - added so as you can see there is the
09:45 - difference uh
09:46 - in here there is no moltres but then on
09:48 - the second list there is
09:50 - uh moltres at the end now let's pretend
09:53 - we want to remove
09:54 - a list or a value um let's
09:57 - pretend we have this pokedex which is a
09:59 - list of pikachu eevee ditto magikarp
10:02 - and we're going to print out the list
10:03 - before it was changed but then we're
10:05 - going to print out the list after it was
10:07 - removed
10:07 - so we can put dot remove ditto so now
10:10 - ditto will be gone
10:11 - uh it'll print out the pokedex so it
10:14 - will delete dudeo as you can see
10:16 - ditto is gone from the second list but
10:18 - it's still inside of the first list
10:21 - now uh instead of having to uh
10:24 - delete and then insert uh
10:28 - how to call it instead of having to
10:29 - delete and then re-insert
10:31 - a new pokemon we can just replace the
10:33 - value
10:34 - using the command uh pokedex bracket
10:37 - three or
10:38 - basically where you want to go equals to
10:40 - your pokemon that you want to add or no
10:42 - sorry replace
10:43 - so let me tell you in more detail so
10:46 - this one
10:46 - right now is the pokedex which is the
10:49 - default pikachu eevee ditto and magikarp
10:51 - we're gonna print it out one time before
10:53 - it was changed then after that we'll
10:54 - print it again
10:55 - after jolteon replaced index number
10:58 - three
10:58 - which is magikarp so once we did that
11:02 - let's look at it so we can see here that
11:04 - the first index magikarp is still there
11:06 - but the second index magikarp is gone
11:09 - and instead is it's replaced by jolteon
11:11 - jolteon by the way is a electric dog
11:14 - it's an evolution of eevee
11:16 - uh and i'm pretty sure to evolve it from
11:19 - evie to jolteon in pokemon go you gotta
11:21 - name it sparky or spark
11:23 - i'm not sure but i'm pretty sure that
11:25 - you need to name it something like that
11:27 - in order to get jolteon
11:29 - and now we need to check the list values
11:31 - so pretend we have a really really long
11:34 - list
11:34 - okay and we want to check it what like
11:37 - pretend we forgot like what we added
11:39 - there and we want to see if it's still
11:41 - there
11:41 - we can find it using this command so
11:44 - in here we have a function called check
11:47 - and inside of a check there is parameter
11:49 - called pokemon
11:50 - and inside of this function what it goes
11:53 - is an if loop
11:54 - if pokemon in pokedex so pokemon by the
11:57 - way
11:58 - is this uh perimeter if it's inside of
12:01 - this
12:01 - list then print the pokemon or the index
12:05 - is still in the list but if it's not
12:08 - then just print
12:09 - pokemon is not in the list or the what
12:11 - they entered in
12:12 - so and to trigger this function what we
12:15 - need to do is we need to type the name
12:16 - of the function
12:17 - which is check and moltres which is the
12:20 - index
12:21 - so moltres is uh not
12:24 - inside of the list so let's see
12:27 - so now we can see that moltres is not in
12:30 - the list
12:31 - however if we were to change it to
12:32 - something inside of the list like
12:34 - uh ho oh pretend ho oh
12:38 - then it is in the list ho o is in the
12:40 - list but if it's not
12:41 - then it would say the pokemon is not in
12:44 - the list
12:45 - okay now let's move on to iterating
12:47 - lists uh which is a for loop
12:49 - and iterating basically means to type
12:52 - out each uh
12:53 - each item inside of the list
12:55 - individually so it will go pikachu
12:57 - then evie then ditto the magikarp on
12:59 - separate uh rose
13:01 - so let's get started so we have a
13:04 - pokedex or a list
13:05 - that contains pikachu ev ditto magikarp
13:08 - and then we want to
13:09 - print each of them individually so what
13:12 - we want to do is want to create a for
13:14 - loop
13:14 - and inside the for loop we have a
13:16 - variable called a and
13:17 - a is each of these values put together
13:20 - one
13:21 - one by one and for a in pokedex
13:24 - print a so now it's going to be uh going
13:27 - to type out a
13:28 - which is these values as you can see it
13:31 - types out all four pokemon pikachu eevee
13:34 - ditto and magikarp
13:35 - so once we are done with this let's move
13:37 - on to stack list structure
13:39 - so we can put our list inside of a
13:42 - stacked structure
13:43 - what extracts sorry a stack structure is
13:46 - is basically a type of list um and we
13:50 - can pop it
13:51 - too a pop will basically up
13:54 - delete the last uh the last item
13:57 - on the list so in this case it is ho-oh
14:00 - and by the way our list is moltres
14:02 - articuno zapdos and ho
14:03 - oh and it'll print out the pokedex
14:05 - before it was popped off
14:07 - and after that we can add pokedex.pop
14:10 - and parentheses at the end
14:11 - and then it'll pop off the the ho-oh
14:14 - which is
14:14 - the last item in the list so let's look
14:16 - at it so we can see
14:18 - up here that ho is still there in the
14:20 - first list but then the second one ho-oh
14:22 - is gone
14:23 - and we can also continue doing this uh
14:26 - until we like have what we need
14:29 - so now we delete it from ho oh zapdos we
14:32 - deleted the 7000 hello
14:34 - and we can do this one more time so we
14:36 - can only have multis now
14:38 - there we go we deleted articuno zapdos
14:41 - ho oh and now we're only left with
14:42 - moltres if we delete moltres then it'll
14:44 - just
14:44 - type uh it'll just print out the type of
14:47 - the list
14:49 - or it just prints nothing so nothing
14:51 - anymore but if we
14:53 - i'm curious why we do one more time
14:54 - it'll print the type right
14:56 - no it comes with an error okay okay if
14:58 - we do it too much times then it'll come
15:00 - in here
15:01 - but we do it uh just what we need but um
15:04 - anyways
15:04 - let's just run it again so there's no
15:06 - error i hate errors on my screen
15:08 - um i can't work with any error but here
15:10 - we can see
15:11 - that we are at the end of the list and
15:13 - now we're going to look at tuples tuples
15:15 - is a cousin or
15:16 - a brother of the list it is kind of the
15:19 - same thing except
15:20 - that tuples are immutable which means
15:22 - they cannot be changed
15:24 - oh basically it means they cannot add
15:26 - anything in there
15:27 - they cannot delete anything from it uh
15:29 - they just you have to set it again if
15:31 - you want to change something
15:32 - so we have a tuple here called backpack
15:35 - and the way to create a tuple
15:37 - is similar to a list but the tuple is
15:41 - you need to create it with parentheses
15:42 - so parentheses will equal to a tuple
15:44 - and brackets will equal to a list and
15:46 - inside of this tuple there
15:48 - is uh strings um this is our backpack
15:52 - which is the name of the tuple
15:53 - there's the super potion the revive
15:55 - crystal the remote battle pass
15:57 - the pokeball so it has these strings
16:00 - inside of our tuple
16:02 - and let's just print out our tuple
16:04 - really quick or backpack
16:05 - and you can see that it just prints it
16:07 - out normally but pretend we want to try
16:09 - to
16:10 - add something to it so backpack dota pen
16:13 - gymbad so we will uh theoretically add
16:16 - gym badge at the end
16:18 - of our tuple but let's see what happens
16:21 - so you can see
16:22 - that there is an error and it says
16:25 - attribute error tuple has no attribute
16:27 - append which means that tuple cannot
16:29 - support this command
16:30 - because it's immutable so we cannot use
16:32 - this
16:34 - and now let's look at deleting tuples so
16:37 - you might have been like hey this is
16:39 - deleting a tuple right but
16:41 - it's different from deleting a thing
16:42 - from a list uh when we're deleting from
16:44 - a list we're deleting a single item
16:46 - but if we want to delete a tuple we
16:48 - can't delete a single
16:50 - item instead we need to delete the whole
16:51 - tuple and uh let's take a look at it
16:54 - so let's click delete or not delete but
16:57 - let's do delete backpack
16:58 - and here it is a backpack is not defined
17:03 - what uh what do you mean backpack is not
17:06 - defined
17:07 - ah yeah nevermind i am dumb um but the
17:10 - reason it's not defined is because we
17:12 - deleted it so
17:13 - if we don't want to delete it and we can
17:14 - just do like this and there we go
17:16 - it's still here but if we delete it then
17:19 - it will say it's not defined
17:20 - because it's gone so there's no point of
17:23 - being there
17:24 - but yeah so this is how to delete uh
17:27 - tuple
17:27 - and we can look uh slicing tuples now
17:30 - slicing tuples
17:31 - is kind of like using a list where you
17:33 - can have uh just a
17:35 - slice of it so we're going to do revive
17:37 - crystal
17:38 - and remote battle pass and if we want
17:40 - those two then we just do what we do for
17:42 - a list
17:43 - one two three and the same rules apply
17:46 - for a tuple two
17:48 - the limit or the end the stopping right
17:50 - here needs to be one above
17:52 - so that it prints out the things you
17:53 - want now it will print out
17:55 - revive crystal and remote battle pass so
17:58 - yeah this
17:58 - is uh two collections in python ep1
18:01 - tomorrow there will be an ep two
18:03 - uh stay tuned and watch it i hope you
18:05 - enjoyed this episode thank you very much
18:06 - for watching see you in the next one
18:09 - bye

Cleaned transcript:

hello everybody my name is jemmy and today i will be giving you a brief overview on collections in python collections are like lists tuples dictionaries etc so i'm going to be doing that in jupyter notebook the way to open jupyter notebook is if you're in windows type in cmd in your command prompt click enter then just type in jupyter notebook okay and it should open in your browser uh just wait a few seconds okay and there we go so now once it opens uh what you want to do is you want to click on new python 3 ipy kernel but since i already have it i will just um open it from my uh jupiter notebook and by the way the link to download this notebook is in the description if you want to go check it out you can um but just download it and then work with me through collab or jupiter notebook anything would do so now let's get into the video so let's look at lists first since list is one of the best ways to store data in python and is one of the most used ways either um two um so let's look at how to create a list by the way a list is mutable which means that you can change it throughout the coding instead of like not being able to change it you can like add stuff to it you can delete stuff from it uh but yeah let's look at how to create it so right here is a list name pokedex uh and in pokedex there is pikachu ev ditto and magikarp and let me show you the way to create one so this is a list now you're declaring pokedex as an empty list so to create a list you need two brackets one to uh the right bracket in the left bracket once you did that anything you put in into this list such as numbers integers strings and uh another list i can you can also put a list inside of a list uh anything in here that is separate by a comma is a part of the list so now we have three objects eight an integer sdf a string and another empty list so you can put anything inside of here but i'm going to create a list of strings so i'm going to put in my pokemons pikachu eevee ditto and magikarp all of them are strings so once we did this we need to know a bit of information just like yesterday how i was saying stuff about indexing and slicing list index start from zero so pikachu zero eb is one ditto is two and magikarp is three and just to remember this so you don't get confused like pikachu is one and then you put in one and it's actually eevee so don't get confused it starts from zero so now let's just print out the whole list so if we were to print out the whole list it would look somewhat like this pikachu eevee ditto magikarp with the brackets and the uh the quotations but however we if we want just a specific one um or a specific pokemon we can uh type it type in their index and we will get it so let's pretend we want ditto ditto is index two so if we put in two there we go just the plain text ditto and if we want like pikachu and evie then we would put in one through three like this and now we need to know something um three you might say hey isn't three all the way to uh magikarp well yes it is but the reason we want to do this is because all every time you want to slice something you need to have one above the limit so if we want ditto and ditto is two we need to put it to three however because if we put it to two then we'll just print out eb and uh this doesn't go this doesn't apply to starting hover the start just goes with the starting pokemon so eevee is index one so we put index one here if you put index zero then it will be pikachu to ditto but we don't want that so you want one two three like so um and anyways that is the basics of a list let's move on to the list structure so as i said earlier inside of a list there can be another list um and we can also access this list so what we need to do is first uh let's look at the main list so this big one which is called pokedex so this big list right here contains pikachu eevee ditto magikarp and one smaller list uh and now let's look at how we can access a smaller list if we count the index we can know what uh indexes is which is 0 1 2 3 4. so this is index 4 right here and if we were to do print pokedex index 4 then it would print out the whole list or the smaller list and if we want to access one of these individual numbers we can also do that so if we want pretend number 20 then we can do pokedex 4 and then after that we have another brac or yeah another bracket one so it will go to bracket four and it will go into bracket uh no sorry it will go to index four of pokedex and it will go into index one of the smaller list so now we can access the number 15. i'm so sorry um i got confused myself so remember when i said the index starts from zero well we need to put zero in there and now we get 20 so so sorry um i got confused myself there but yeah we can access smaller lists throughout the big list and if we were to have another list inside of this list i mean you can go on forever but we're not going to do that and the more list you have and if you want to access the smaller one you can just add print add brackets through your printing and it will go into each list individually and now let's look at lists with functions and if statements so this is basically what we can implement or apply to our everyday life and i'll show you an example right here let me drink some water um but yeah this is a way to implement our list i made this by myself so uh yeah so we have our pokedex here with pikachu eevee ditto magikarp and the smaller list and also we have a uh input variable here which is called pokemon and the input is enter oh sorry enter there enter the poke watch enter the in your pokemon's name i think i kind of messed something up um enter your pokemon enter your pokemon's name or the pokemon's name okay enter the pokemon's name and then basically it will let them type it in and once we do that we will go into well but we'll create this uh function right here which is called pokeprint and in pokeprint there is a parameter called index and we're going to be using index as the way to access our uh our little um individual strings so pokedex index which is one through four uh go into or know one two one zero two three and then it'll go to that pokemon is that is a pokemon that has pokedex four which is our smaller list index which goes into that smaller list is index attack power i know it might look confusing right now but throughout the when i run it it will probably be more less confusing so stick around um and also after that once we made the function we will go in here and we will go into an if statement so we have if pokemon equals to pikachu which is by the way the pokemon is the text that they inserted if it goes to pikachu poke print zero so now we're going to call up the function and um make it to zero the parameter index equals to zero and alif which is else if uh which is used between if and else um if pokemon equals equals to ev poke print one and so on until magikarp and after that we put an else and in the else we put print your pokemon is not currently inside of the database to let them know that it's not there yet so uh yeah so if we were to try this out and let's pretend we type in something random or something not in the not in the data set like moltres then it goes your pokemon is not currently inside the database however if you were to type in something that was inside the database like eevee like so and here is the string that they will pop up evie is a pokemon that has 15 attack power as i said earlier this doesn't really make sense but this makes a lot more sense because you know we can read it easier but yeah this is how you can implement it we can do other pokemons too that we have like magikarp and there we go but yeah as i said earlier you can do many things with lists uh a lot of good things and this is just an example this is of course really small scale but you can enlarge it to be a really large scale project that you can make and list will be a part of them i promise you'll lose you will use lists inside of your project once or twice and now let's look at how we can uh add some values onto our list so pretend we have a list made of pikachu eevee ditto and magikarp right uh and pretend we wanted to add another uh pokemon to it so instead of having to like type it out again like this we can just use the command dot append and inside of data pen we can put anything we want inside there and it'll add it to the end of the list so we're going to be adding moltres there and let's print out the pokedex before it was before moltres is added and then printed again after moltres was added so as you can see there is the difference uh in here there is no moltres but then on the second list there is uh moltres at the end now let's pretend we want to remove a list or a value um let's pretend we have this pokedex which is a list of pikachu eevee ditto magikarp and we're going to print out the list before it was changed but then we're going to print out the list after it was removed so we can put dot remove ditto so now ditto will be gone uh it'll print out the pokedex so it will delete dudeo as you can see ditto is gone from the second list but it's still inside of the first list now uh instead of having to uh delete and then insert uh how to call it instead of having to delete and then reinsert a new pokemon we can just replace the value using the command uh pokedex bracket three or basically where you want to go equals to your pokemon that you want to add or no sorry replace so let me tell you in more detail so this one right now is the pokedex which is the default pikachu eevee ditto and magikarp we're gonna print it out one time before it was changed then after that we'll print it again after jolteon replaced index number three which is magikarp so once we did that let's look at it so we can see here that the first index magikarp is still there but the second index magikarp is gone and instead is it's replaced by jolteon jolteon by the way is a electric dog it's an evolution of eevee uh and i'm pretty sure to evolve it from evie to jolteon in pokemon go you gotta name it sparky or spark i'm not sure but i'm pretty sure that you need to name it something like that in order to get jolteon and now we need to check the list values so pretend we have a really really long list okay and we want to check it what like pretend we forgot like what we added there and we want to see if it's still there we can find it using this command so in here we have a function called check and inside of a check there is parameter called pokemon and inside of this function what it goes is an if loop if pokemon in pokedex so pokemon by the way is this uh perimeter if it's inside of this list then print the pokemon or the index is still in the list but if it's not then just print pokemon is not in the list or the what they entered in so and to trigger this function what we need to do is we need to type the name of the function which is check and moltres which is the index so moltres is uh not inside of the list so let's see so now we can see that moltres is not in the list however if we were to change it to something inside of the list like uh ho oh pretend ho oh then it is in the list ho o is in the list but if it's not then it would say the pokemon is not in the list okay now let's move on to iterating lists uh which is a for loop and iterating basically means to type out each uh each item inside of the list individually so it will go pikachu then evie then ditto the magikarp on separate uh rose so let's get started so we have a pokedex or a list that contains pikachu ev ditto magikarp and then we want to print each of them individually so what we want to do is want to create a for loop and inside the for loop we have a variable called a and a is each of these values put together one one by one and for a in pokedex print a so now it's going to be uh going to type out a which is these values as you can see it types out all four pokemon pikachu eevee ditto and magikarp so once we are done with this let's move on to stack list structure so we can put our list inside of a stacked structure what extracts sorry a stack structure is is basically a type of list um and we can pop it too a pop will basically up delete the last uh the last item on the list so in this case it is hooh and by the way our list is moltres articuno zapdos and ho oh and it'll print out the pokedex before it was popped off and after that we can add pokedex.pop and parentheses at the end and then it'll pop off the the hooh which is the last item in the list so let's look at it so we can see up here that ho is still there in the first list but then the second one hooh is gone and we can also continue doing this uh until we like have what we need so now we delete it from ho oh zapdos we deleted the 7000 hello and we can do this one more time so we can only have multis now there we go we deleted articuno zapdos ho oh and now we're only left with moltres if we delete moltres then it'll just type uh it'll just print out the type of the list or it just prints nothing so nothing anymore but if we i'm curious why we do one more time it'll print the type right no it comes with an error okay okay if we do it too much times then it'll come in here but we do it uh just what we need but um anyways let's just run it again so there's no error i hate errors on my screen um i can't work with any error but here we can see that we are at the end of the list and now we're going to look at tuples tuples is a cousin or a brother of the list it is kind of the same thing except that tuples are immutable which means they cannot be changed oh basically it means they cannot add anything in there they cannot delete anything from it uh they just you have to set it again if you want to change something so we have a tuple here called backpack and the way to create a tuple is similar to a list but the tuple is you need to create it with parentheses so parentheses will equal to a tuple and brackets will equal to a list and inside of this tuple there is uh strings um this is our backpack which is the name of the tuple there's the super potion the revive crystal the remote battle pass the pokeball so it has these strings inside of our tuple and let's just print out our tuple really quick or backpack and you can see that it just prints it out normally but pretend we want to try to add something to it so backpack dota pen gymbad so we will uh theoretically add gym badge at the end of our tuple but let's see what happens so you can see that there is an error and it says attribute error tuple has no attribute append which means that tuple cannot support this command because it's immutable so we cannot use this and now let's look at deleting tuples so you might have been like hey this is deleting a tuple right but it's different from deleting a thing from a list uh when we're deleting from a list we're deleting a single item but if we want to delete a tuple we can't delete a single item instead we need to delete the whole tuple and uh let's take a look at it so let's click delete or not delete but let's do delete backpack and here it is a backpack is not defined what uh what do you mean backpack is not defined ah yeah nevermind i am dumb um but the reason it's not defined is because we deleted it so if we don't want to delete it and we can just do like this and there we go it's still here but if we delete it then it will say it's not defined because it's gone so there's no point of being there but yeah so this is how to delete uh tuple and we can look uh slicing tuples now slicing tuples is kind of like using a list where you can have uh just a slice of it so we're going to do revive crystal and remote battle pass and if we want those two then we just do what we do for a list one two three and the same rules apply for a tuple two the limit or the end the stopping right here needs to be one above so that it prints out the things you want now it will print out revive crystal and remote battle pass so yeah this is uh two collections in python ep1 tomorrow there will be an ep two uh stay tuned and watch it i hope you enjoyed this episode thank you very much for watching see you in the next one bye
