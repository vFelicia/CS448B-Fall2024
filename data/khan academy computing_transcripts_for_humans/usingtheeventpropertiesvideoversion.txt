With timestamps:

00:00 - I've got this webpage with a
picture of Winston.
00:03 - It's getting cold here,
and Winston is getting old,
00:06 - so he wishes he had a beard.
00:08 - I could draw the beard myself.
00:10 - But I think it'd be way cooler if
the user could draw the beard
00:13 - on Winston themselves,
however they want it to look--
00:16 - a long beard, some stubble,
whatever they're into.
00:20 - So how could we do that?
00:22 - One way is to add an event listener
for the `mouseMove` event on the image,
00:28 - so that our function would get called
whenever the user moved their mouse
00:33 - over the face.
00:34 - Let's set that up, using 
what we just learned.
00:37 - The first step is to find
the element, the image.
00:41 - [typing]
00:47 - ..."face", since I had that nice ID.
00:50 - The second step is to define
the callback function.
00:53 - And we're going to start with a simple one
just to make sure that it worked,
00:58 - and we'll make it do more later.
01:01 - [typing]
01:11 - Okay.
01:13 - And the final step is to
connect this to this,
01:17 - to make sure that this gets called
when this gets the `mouseMove` event.
01:21 - So we'll write
`face.addEventListener("mousemove",`
01:27 - and then pass it the name
of the function, `onMouseMove`.
01:32 - Now, pause the talk-through, and try
moving your mouse over the face.
01:36 - Do you see the message?
01:39 - Okay, hopefully you saw that
we've got that event working.
01:43 - But it's not what we want
our event listener to do.
01:47 - We want it to draw, not to write text.
01:50 - How can we draw in a webpage?
01:53 - We could bring in the `` tag
and draw pixels on it, like we do
01:58 - with ProcessingJS programs here.
02:00 - But all we're drawing is a beard,
which is really a bunch of black dots.
02:06 - So we could just create a `` for
each dot, and position that ``
02:11 - with absolute positioning.
02:13 - Here, let me show you with
one beard follicle.
02:18 - So I'll make a `` with class `beard`,
and then I've got some nice CSS
02:24 - to style that beard,
which I'll just stick in here.
02:29 - And let's just fix that up.
02:31 - So you can see our beard is a
black background, it's 5 by 5 pixels,
02:36 - it's got this 2 pixel border radius
to make it a little bit round,
02:40 - and it's using absolute
positioning scheme.
02:44 - Currently, the ``
shows up under the image.
02:48 - How do we get it to show up
on top of the face?
02:51 - We're using absolute positioning,
so that means that we should use
02:55 - the `top` and `left` properties
to say where it should actually
02:59 - get positioned,
now that it's absolute.
03:02 - So let's say `top: 80px;`,
and then `left:15px;`.
03:07 - Beautiful.
03:09 - Now that we've got that working in HTML,
let's make it work in JavaScript,
03:13 - so that the user dynamically creates this
`` every time they move their mouse.
03:18 - We'll go back down to our
JavaScript callback function.
03:22 - The first thing is to create a ``,
03:25 - which we can do with our
`document.createElement()` function--
03:31 - it's going to be a `div`.
03:33 - Second thing to do is to add that class:
`beard.className = "beard";`.
03:39 - So we've got this ``,
it's floating off in space.
03:42 - Final step, append it to the body.
03:47 - All right, so now we've basically done
in JavaScript what we had done in HTML,
03:52 - so we can delete this HTML.
03:54 - Now you should pause the talk-through,
and try clicking Winston.
03:58 - See what happens.
04:02 - Did you see the beard follicle show up?
04:04 - And did you try clicking multiple times?
04:07 - If you did, you probably noticed that
your second click did nothing--
04:11 - or at least it appeared to do nothing.
04:13 - That's because every `` has
the same `top` and `left` properties,
04:17 - so new ones just pile
on top of the old ones.
04:21 - We want the `` to show up
wherever the user's mouse is instead.
04:25 - How do we actually find out
where the user's mouse is?
04:30 - As it turns out, the browser
records a lot of information
04:34 - every time any user event happens,
like where it happens.
04:38 - And the browser gives you
that information every time
04:41 - it calls your event listener function.
04:43 - But where, how, can we get this
amazing information?
04:46 - I'll type one letter, to give you a hint.
04:51 - That `e` here, is the event
information object.
04:56 - And the browser sends it as the first
argument whenever it calls
04:59 - an event listener callback function.
05:02 - We didn't need it before, so I didn't
bother writing out the arguments list.
05:06 - But now that we're going to use it,
I'm giving it a name, to make it
05:09 - easy to reference inside the function.
05:11 - Remember that in JavaScript, a function
can be called with any number
05:14 - of arguments, even if the function
doesn't use or refer to any of them.
05:18 - So we were always getting this
information, we just didn't know it.
05:22 - Now I'm going to log out `e`:
`console.log(e)`.
05:28 - Pause the talk-through, click Winston,
and check your console.
05:32 - You should see the
event object logged out,
05:34 - and you can skim through
all the properties on it.
05:38 - There are two event properties in
particular that we're very interested in:
05:43 - `clientX` and `clientY`.
05:45 - They record the x and y of the event,
and that's what we're going to use
05:49 - to position the beard.
05:51 - Let's set the top of the beard equal to
e.clientY, plus "px", for the units.
06:02 - And set the left equal to
e.clientX, plus "px" for units.
06:10 - Now pause and try mousing over.
06:14 - Draw Winston a beard.
06:17 - Pretty cool, huh?
06:19 - I bet you can imagine all sorts of fun
painting apps that you can make,
06:23 - using clientX and clientY.
06:25 - And as you saw in the console,
there were a bunch of other properties
06:28 - on the event object
that you could use as well.
06:31 - The most useful, I think, are
the keyboard-related ones.
06:35 - So that you can find out
what keys the user was pressing
06:38 - when the event happened,
and use that to make a
06:40 - keyboard-accessible interface, 
or a really fun game.
06:44 - Oh, and one more thing:
06:47 - you don't have to call this argument `e`.
06:49 - That's typical, but some developers
call it `evt`, or `event`.
06:57 - It doesn't matter what you call it,
as long as it's referring to
07:00 - the first argument that the browser
passes to your function,
07:03 - and as long as you then
refer to it that way later as well.
07:09 - If you're having trouble with it,
make sure you use console.log
07:13 - to help you debug what's going on.
07:15 - When you're a web developer,
07:17 - the console is pretty much
your best friend ever-- use it!

Cleaned transcript:

I've got this webpage with a picture of Winston. It's getting cold here, and Winston is getting old, so he wishes he had a beard. I could draw the beard myself. But I think it'd be way cooler if the user could draw the beard on Winston themselves, however they want it to look a long beard, some stubble, whatever they're into. So how could we do that? One way is to add an event listener for the `mouseMove` event on the image, so that our function would get called whenever the user moved their mouse over the face. Let's set that up, using what we just learned. The first step is to find the element, the image. [typing] ..."face", since I had that nice ID. The second step is to define the callback function. And we're going to start with a simple one just to make sure that it worked, and we'll make it do more later. [typing] Okay. And the final step is to connect this to this, to make sure that this gets called when this gets the `mouseMove` event. So we'll write `face.addEventListener("mousemove",` and then pass it the name of the function, `onMouseMove`. Now, pause the talkthrough, and try moving your mouse over the face. Do you see the message? Okay, hopefully you saw that we've got that event working. But it's not what we want our event listener to do. We want it to draw, not to write text. How can we draw in a webpage? We could bring in the `` tag and draw pixels on it, like we do with ProcessingJS programs here. But all we're drawing is a beard, which is really a bunch of black dots. So we could just create a `` for each dot, and position that `` with absolute positioning. Here, let me show you with one beard follicle. So I'll make a `` with class `beard`, and then I've got some nice CSS to style that beard, which I'll just stick in here. And let's just fix that up. So you can see our beard is a black background, it's 5 by 5 pixels, it's got this 2 pixel border radius to make it a little bit round, and it's using absolute positioning scheme. Currently, the `` shows up under the image. How do we get it to show up on top of the face? We're using absolute positioning, so that means that we should use the `top` and `left` properties to say where it should actually get positioned, now that it's absolute. So let's say `top 80px;`, and then `left15px;`. Beautiful. Now that we've got that working in HTML, let's make it work in JavaScript, so that the user dynamically creates this `` every time they move their mouse. We'll go back down to our JavaScript callback function. The first thing is to create a ``, which we can do with our `document.createElement()` function it's going to be a `div`. Second thing to do is to add that class `beard.className = "beard";`. So we've got this ``, it's floating off in space. Final step, append it to the body. All right, so now we've basically done in JavaScript what we had done in HTML, so we can delete this HTML. Now you should pause the talkthrough, and try clicking Winston. See what happens. Did you see the beard follicle show up? And did you try clicking multiple times? If you did, you probably noticed that your second click did nothing or at least it appeared to do nothing. That's because every `` has the same `top` and `left` properties, so new ones just pile on top of the old ones. We want the `` to show up wherever the user's mouse is instead. How do we actually find out where the user's mouse is? As it turns out, the browser records a lot of information every time any user event happens, like where it happens. And the browser gives you that information every time it calls your event listener function. But where, how, can we get this amazing information? I'll type one letter, to give you a hint. That `e` here, is the event information object. And the browser sends it as the first argument whenever it calls an event listener callback function. We didn't need it before, so I didn't bother writing out the arguments list. But now that we're going to use it, I'm giving it a name, to make it easy to reference inside the function. Remember that in JavaScript, a function can be called with any number of arguments, even if the function doesn't use or refer to any of them. So we were always getting this information, we just didn't know it. Now I'm going to log out `e` `console.log(e)`. Pause the talkthrough, click Winston, and check your console. You should see the event object logged out, and you can skim through all the properties on it. There are two event properties in particular that we're very interested in `clientX` and `clientY`. They record the x and y of the event, and that's what we're going to use to position the beard. Let's set the top of the beard equal to e.clientY, plus "px", for the units. And set the left equal to e.clientX, plus "px" for units. Now pause and try mousing over. Draw Winston a beard. Pretty cool, huh? I bet you can imagine all sorts of fun painting apps that you can make, using clientX and clientY. And as you saw in the console, there were a bunch of other properties on the event object that you could use as well. The most useful, I think, are the keyboardrelated ones. So that you can find out what keys the user was pressing when the event happened, and use that to make a keyboardaccessible interface, or a really fun game. Oh, and one more thing you don't have to call this argument `e`. That's typical, but some developers call it `evt`, or `event`. It doesn't matter what you call it, as long as it's referring to the first argument that the browser passes to your function, and as long as you then refer to it that way later as well. If you're having trouble with it, make sure you use console.log to help you debug what's going on. When you're a web developer, the console is pretty much your best friend ever use it!
