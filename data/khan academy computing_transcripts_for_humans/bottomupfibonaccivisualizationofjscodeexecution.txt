With timestamps:

00:00 - - [Instructor] This is a
JavaScript implementation
00:02 - of the Fibonacci number
generation algorithm
00:05 - using a bottom-up approach.
00:08 - We're gonna walk through the function
00:10 - for n of five, and see what
it does behind the scenes.
00:15 - So after we define the
function, this code calls
00:19 - fib with five.
00:22 - So we're in the function,
with an n of five,
00:24 - and n is not zero, and it's not one,
00:27 - so this condition is false,
00:29 - and we come down here.
00:31 - Now here is the real bottom-up code.
00:35 - So we start off by
declaring three variables
00:37 - that are going to be the only variables
00:38 - that we need here, and
they're going to remember
00:41 - three things at a time,
00:42 - so we have twoBehind, which
we initialize to zero,
00:45 - which is the very first Fibonacci number,
00:47 - oneBehind, which we initialize to one,
00:49 - it's the second number,
00:50 - and result, which we'll
initialize to zero,
00:53 - and this will eventually store
the answer we're looking for.
00:56 - Then we have a for loop,
that starts at one,
00:59 - and goes for n minus one times.
01:03 - So inside that for loop,
01:05 - the first thing we do is set result
01:07 - equal to twoBehind plus oneBehind,
01:09 - so this is going to be zero plus one,
01:12 - so result is currently one,
01:14 - then we set twoBehind to oneBehind,
01:17 - so that it becomes one,
01:18 - and we set oneBehind to the result,
01:20 - so that it also becomes one.
01:23 - Now we're in the next iteration,
01:25 - and this time, result we set
to twoBehind plus oneBehind,
01:29 - so that's going to be two,
01:31 - and then twoBehind to oneBehind,
01:33 - so that's one, and then
oneBehind to result,
01:36 - so that's two.
01:38 - Now we're in the next iteration,
01:40 - we set result equal to
twoBehind plus oneBehind,
01:43 - so that will give us three,
01:44 - twoBehind to oneBehind,
so it will become two,
01:49 - and oneBehind to result,
so it becomes three.
01:52 - Next iteration, result we set
to twoBehind plus oneBehind,
01:55 - so that'll be five,
01:57 - we set twoBehind to oneBehind,
so it will become three,
02:01 - and then oneBehind to the
result, so it becomes five.
02:06 - Now, next iteration, are we going to it?
02:09 - Nope, instead, we're going to the end
02:12 - and returning the result,
which is now five.
02:15 - That is the result when n equals five.
02:19 - And this is a bottom-up approach
02:21 - to generating Fibonacci numbers.

Cleaned transcript:

[Instructor] This is a JavaScript implementation of the Fibonacci number generation algorithm using a bottomup approach. We're gonna walk through the function for n of five, and see what it does behind the scenes. So after we define the function, this code calls fib with five. So we're in the function, with an n of five, and n is not zero, and it's not one, so this condition is false, and we come down here. Now here is the real bottomup code. So we start off by declaring three variables that are going to be the only variables that we need here, and they're going to remember three things at a time, so we have twoBehind, which we initialize to zero, which is the very first Fibonacci number, oneBehind, which we initialize to one, it's the second number, and result, which we'll initialize to zero, and this will eventually store the answer we're looking for. Then we have a for loop, that starts at one, and goes for n minus one times. So inside that for loop, the first thing we do is set result equal to twoBehind plus oneBehind, so this is going to be zero plus one, so result is currently one, then we set twoBehind to oneBehind, so that it becomes one, and we set oneBehind to the result, so that it also becomes one. Now we're in the next iteration, and this time, result we set to twoBehind plus oneBehind, so that's going to be two, and then twoBehind to oneBehind, so that's one, and then oneBehind to result, so that's two. Now we're in the next iteration, we set result equal to twoBehind plus oneBehind, so that will give us three, twoBehind to oneBehind, so it will become two, and oneBehind to result, so it becomes three. Next iteration, result we set to twoBehind plus oneBehind, so that'll be five, we set twoBehind to oneBehind, so it will become three, and then oneBehind to the result, so it becomes five. Now, next iteration, are we going to it? Nope, instead, we're going to the end and returning the result, which is now five. That is the result when n equals five. And this is a bottomup approach to generating Fibonacci numbers.
