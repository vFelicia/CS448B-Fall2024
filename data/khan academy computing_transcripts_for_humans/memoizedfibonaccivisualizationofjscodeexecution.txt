With timestamps:

00:00 - - [Instructor] This is a
JavaScript function that generates
00:03 - the nth fibonacci number using recursion
00:06 - as well as memoization.
00:08 - So we're gonna go through
it and see what the computer
00:11 - actually does behind the scenes.
00:15 - So the first thing it does is
declare this data structure
00:17 - which is an empty JavaScript
object called memo
00:20 - and that's where the memoization
is going to happen later.
00:22 - Then it defines the fib function.
00:25 - And finally it calls the fib
function with the input value
00:30 - of five, so the first thing
that happens is that we're
00:33 - in fib function with N of five.
00:36 - This first condition is false
'cause N is not zero and it's
00:39 - not one, the second condition
is false because five
00:43 - is not in the memo data
structure which is completely
00:46 - empty and this third condition
is where we're gonna go into.
00:52 - Well it's not really a condition is it?
00:55 - So we go into this else block
and it wants to calculate
00:59 - what fibonacci five is by
calling fib of N minus one
01:03 - plus fib of N minus two.
01:05 - So what it first does is call
fib of N minus one so that's
01:07 - gonna be fib of four so it
immediately calls that and now
01:11 - we're in the fib function
with N equals four.
01:14 - This is false, this is
false, so we're here again
01:18 - and this time it wants to
calculate the result of fib three
01:21 - plus fib two.
01:23 - So it first calls fib three
and we're in fib for fib equals
01:26 - three, this is false, this
is false, and now we're gonna
01:31 - calculate fib three as
being fib two plus fib one.
01:35 - It immediately calls fib two
so we're in fib for N equals
01:39 - two this is false, this is
false, and it's gonna calculate
01:43 - fib two as being fib one plus fib zero.
01:49 - So it immediately calls fib one
and now finally this is true
01:54 - so it's gonna return N which is one again.
01:56 - And it'll end up going back
to the fib function when N
02:02 - was two because now it's
got the result of that first
02:05 - fib call.
02:06 - So now it needs to call fib
zero and get that result.
02:10 - So we're in fib for N equals
zero, now that first condition
02:14 - is true again so it's going
to return N which is zero
02:19 - and come back to when fib
was two, when N was two
02:23 - and now it has a result, so
now it can update the memo
02:27 - object with the result for N
of two and we can see indeed
02:33 - that the object updates over there.
02:35 - And then it returns
the result for fib two.
02:39 - All right so now we're back
up to fib three and fib three
02:46 - we've called fib two so now
it wants to call fib one.
02:49 - So we're back in when N
equals one, it once again
02:53 - returns one and now it knows
what fib three is it's got
02:58 - a result of two, it can update
the memo structure with that
03:01 - result and return it.
03:04 - So now we're back in when
N was four and it already
03:09 - calculated fib three, so
now it needs to call fib two
03:12 - and this time when it calls
fib two and N equals two,
03:16 - it finds that N is indeed
in the memo data structure
03:21 - so it can return the value
for N equals two from that
03:26 - structure so it's going
to get that result of one
03:28 - and it doesn't have to do
the recursive calculation.
03:32 - So now we're back with N equals
four and now we know what
03:36 - fib four is it's three, we can
update the memo and return.
03:43 - Now finally we're back up
to when N is five in the fib
03:47 - function it's called fib four
and then it just needs to call
03:52 - fib three, so we see it's
false but then here three
03:59 - is in the memo structure
so it can return the value
04:02 - in the memo structure which
is two and go back up here.
04:07 - Now it knows that fib of five
is five and it can update
04:12 - the memo structure with
that result and return it.
04:17 - Whew and now the whole memoized
recursive function is done.

Cleaned transcript:

[Instructor] This is a JavaScript function that generates the nth fibonacci number using recursion as well as memoization. So we're gonna go through it and see what the computer actually does behind the scenes. So the first thing it does is declare this data structure which is an empty JavaScript object called memo and that's where the memoization is going to happen later. Then it defines the fib function. And finally it calls the fib function with the input value of five, so the first thing that happens is that we're in fib function with N of five. This first condition is false 'cause N is not zero and it's not one, the second condition is false because five is not in the memo data structure which is completely empty and this third condition is where we're gonna go into. Well it's not really a condition is it? So we go into this else block and it wants to calculate what fibonacci five is by calling fib of N minus one plus fib of N minus two. So what it first does is call fib of N minus one so that's gonna be fib of four so it immediately calls that and now we're in the fib function with N equals four. This is false, this is false, so we're here again and this time it wants to calculate the result of fib three plus fib two. So it first calls fib three and we're in fib for fib equals three, this is false, this is false, and now we're gonna calculate fib three as being fib two plus fib one. It immediately calls fib two so we're in fib for N equals two this is false, this is false, and it's gonna calculate fib two as being fib one plus fib zero. So it immediately calls fib one and now finally this is true so it's gonna return N which is one again. And it'll end up going back to the fib function when N was two because now it's got the result of that first fib call. So now it needs to call fib zero and get that result. So we're in fib for N equals zero, now that first condition is true again so it's going to return N which is zero and come back to when fib was two, when N was two and now it has a result, so now it can update the memo object with the result for N of two and we can see indeed that the object updates over there. And then it returns the result for fib two. All right so now we're back up to fib three and fib three we've called fib two so now it wants to call fib one. So we're back in when N equals one, it once again returns one and now it knows what fib three is it's got a result of two, it can update the memo structure with that result and return it. So now we're back in when N was four and it already calculated fib three, so now it needs to call fib two and this time when it calls fib two and N equals two, it finds that N is indeed in the memo data structure so it can return the value for N equals two from that structure so it's going to get that result of one and it doesn't have to do the recursive calculation. So now we're back with N equals four and now we know what fib four is it's three, we can update the memo and return. Now finally we're back up to when N is five in the fib function it's called fib four and then it just needs to call fib three, so we see it's false but then here three is in the memo structure so it can return the value in the memo structure which is two and go back up here. Now it knows that fib of five is five and it can update the memo structure with that result and return it. Whew and now the whole memoized recursive function is done.
