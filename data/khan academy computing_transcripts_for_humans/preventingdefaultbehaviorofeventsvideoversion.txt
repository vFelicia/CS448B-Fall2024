With timestamps:

00:00 - Now I want to show you one more thing
that you could do with the `event` object.
00:05 - This webpage that I've made
answers the eternal question:
00:09 - "What does Oh Noes say?"
00:12 - Or, more specifically, what would
he sound like if you could hear him?
00:16 - If you click on the link,
you'll be brought to an mp3 file
00:20 - that should play in the browser and
answer that burning question for you.
00:25 - However, I don't want the user
to have to leave the webpage.
00:30 - You should be able to hear it
directly on the page.
00:33 - We can do that with JavaScript,
by playing an `` tag
00:37 - as soon as the user clicks the link.
00:40 - First, let's store the link
in a variable.
00:45 - (typing)
00:55 - Now let's define a callback function.
00:58 - This is going to be
a pretty interesting one.
01:03 - So in that callback function, we want
to create an audio tag dynamically.
01:10 - (typing)
01:15 - And this is a nice new tag
available in modern browsers.
01:19 - And then audio.src equals--
and we're going to set it equal to
01:26 - what the `href` is up here--
the audio tag is a lot like the image tag.
01:32 - And then we're also going to say
`audioEl.autoplay = true`,
01:37 - that'll make it play as soon as
we add it to the page.
01:40 - And finally, we add it to the page.
01:42 - And it doesn't really matter
where I put it,
01:45 - since we're not really visualizing it.
01:48 - So now, when they click, it should
create an audio, set the source,
01:52 - set it to autoplay,
and add it to the page.
01:55 - Finally, we make sure that
the event listener is called
01:59 - when the link is clicked.
02:01 - (typing)
02:08 - ...and then we just pass in
the name of the function.
02:12 - Okay, you know the deal:
pause the talk-through, try it out.
02:17 - ♪ humming ♪
02:19 - What happened?
02:21 - For me, the sound plays--
that low, deep grumble of Oh Noes--
02:26 - but the link still opens up
in a new window.
02:29 - Ideally, once that sound played,
the browser would no longer
02:33 - try to navigate the user to the link
because they've already heard it.
02:37 - The way to do this is to tell the browser
to cancel its default behavior.
02:42 - You see, by default,
when a user clicks a link
02:47 - the browser navigates
the user to that link.
02:50 - But if we've overridden the way
that the link works, in JavaScript,
02:54 - we often don't want the browser
to do that navigation.
02:58 - We can tell it to stop by using
a method on the `event` property
03:02 - called `preventDefault()`.
03:05 - So we need to refer to that
event object that we get passed,
03:09 - and then inside here, we say:
`e.preventDefault();`
03:15 - This should tell the browser
to prevent the default behavior
03:19 - associated with this event.
03:21 - Now pause the talk-through,
and try it again.
03:25 - You just heard the sound, right?
03:28 - That is a much nicer user experience.
03:30 - And that is what is known as
"progressive enhancement"--
03:34 - starting the webpage as HTML with
the default browser behavior
03:39 - but then enhancing it with JavaScript
to be a richer experience.
03:44 - You'll often want to use this
`preventDefault` when you're
03:48 - attaching click listeners to links.
03:50 - And you may also find yourself using it
when you're doing form processing,
03:54 - since the browser does some
default behavior there as well,
03:57 - submitting to a server.
03:59 - The important thing is to keep
the user experience in mind,
04:02 - and if the user experience
isn't optimal on your webpage,
04:06 - figure out how to make it better.
04:08 - We may not be able
to teach you everything here,
04:11 - but the Internet has
thousands of answers for you.

Cleaned transcript:

Now I want to show you one more thing that you could do with the `event` object. This webpage that I've made answers the eternal question "What does Oh Noes say?" Or, more specifically, what would he sound like if you could hear him? If you click on the link, you'll be brought to an mp3 file that should play in the browser and answer that burning question for you. However, I don't want the user to have to leave the webpage. You should be able to hear it directly on the page. We can do that with JavaScript, by playing an `` tag as soon as the user clicks the link. First, let's store the link in a variable. (typing) Now let's define a callback function. This is going to be a pretty interesting one. So in that callback function, we want to create an audio tag dynamically. (typing) And this is a nice new tag available in modern browsers. And then audio.src equals and we're going to set it equal to what the `href` is up here the audio tag is a lot like the image tag. And then we're also going to say `audioEl.autoplay = true`, that'll make it play as soon as we add it to the page. And finally, we add it to the page. And it doesn't really matter where I put it, since we're not really visualizing it. So now, when they click, it should create an audio, set the source, set it to autoplay, and add it to the page. Finally, we make sure that the event listener is called when the link is clicked. (typing) ...and then we just pass in the name of the function. Okay, you know the deal pause the talkthrough, try it out. ♪ humming ♪ What happened? For me, the sound plays that low, deep grumble of Oh Noes but the link still opens up in a new window. Ideally, once that sound played, the browser would no longer try to navigate the user to the link because they've already heard it. The way to do this is to tell the browser to cancel its default behavior. You see, by default, when a user clicks a link the browser navigates the user to that link. But if we've overridden the way that the link works, in JavaScript, we often don't want the browser to do that navigation. We can tell it to stop by using a method on the `event` property called `preventDefault()`. So we need to refer to that event object that we get passed, and then inside here, we say `e.preventDefault();` This should tell the browser to prevent the default behavior associated with this event. Now pause the talkthrough, and try it again. You just heard the sound, right? That is a much nicer user experience. And that is what is known as "progressive enhancement" starting the webpage as HTML with the default browser behavior but then enhancing it with JavaScript to be a richer experience. You'll often want to use this `preventDefault` when you're attaching click listeners to links. And you may also find yourself using it when you're doing form processing, since the browser does some default behavior there as well, submitting to a server. The important thing is to keep the user experience in mind, and if the user experience isn't optimal on your webpage, figure out how to make it better. We may not be able to teach you everything here, but the Internet has thousands of answers for you.
