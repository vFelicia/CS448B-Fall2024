With timestamps:

00:00 - - We're back with our grocery list.
00:02 - I can see that it has six rows in it,
00:04 - but I can also see that we need to buy
00:06 - more than one of each
item, like our bananas.
00:09 - So I'm not sure offhand how many items
00:11 - we'll end up buying total.
00:14 - And I'd like to know that total number
00:16 - so that when we're cashing out,
00:18 - we can just do a quick check to see
00:19 - if we have the right number
of items in our cart.
00:22 - Well to do that in SQL we can use
00:24 - what's called an aggregate function.
00:26 - An aggregate function is useful
00:28 - for things like getting the maximum,
00:29 - minimum, sum and average
00:31 - of values in our database.
00:33 - In this example, to get
the total number of items,
00:36 - we'll start with SELECT.
00:37 - Then the name of the aggregate function
00:39 - we'll be using, SUM.
00:40 - Then the name of the column we want.
00:43 - And then FROM, the name of the table
00:45 - we're selecting from.
00:47 - Tah-dah!
00:48 - So you can see on the
right that the SUM is 15
00:51 - so we should have 15 items in our cart
00:53 - if we got everything correctly.
00:56 - And notice if I go up here
00:57 - and change the number of bananas
00:59 - because, you know, I'm gonna
invite my monkey friends
01:02 - over for a jungle party,
01:03 - we can see the SUM increase in real time
01:07 - and get bigger and bigger.
01:08 - So we know that we're now gonna need
01:09 - 67 items in our cart.
01:12 - Now we can easily try out
other aggregate functions here.
01:15 - Cause SUM's not the only one.
01:17 - So if we wanted to know what is the most
01:19 - that we'll be buying of any one item,
01:22 - then we could use MAX.
01:24 - See, 56, those are obviously our bananas.
01:27 - But this information isn't
as useful for this case.
01:31 - Let's go back to SUM. Okay.
01:34 - Now what if we wanted to make sure
01:36 - we had the right number
of items after each aisle?
01:39 - Well we can do that in SQL
using the GROUP BY clause.
01:43 - We add it to the end of a query,
01:45 - specifying the column
name to GROUP BY "aisle."
01:49 - Okay, so now we can see that
in one aisle we have nine,
01:53 - in another we have one,
but I don't actually know
01:55 - which aisle we're
getting each of those in.
01:58 - So what we can do there
is just add "aisle"
02:01 - to the beginning of this SELECT.
02:03 - So there you can see it, okay.
02:05 - So we're gonna get nine
items in aisle two,
02:08 - one item in aisle four, 56 in aisle seven,
02:11 - and one in aisle twelve.
02:13 - Awesome.
02:14 - Now how did that actually
work behind the scenes?
02:17 - The SQL engine first did
the grouping of the rows
02:20 - based on aisle.
02:22 - So first did this GROUP BY.
02:23 - Then it summed up the quantity
in each of those groups.
02:26 - And then, finally, it
selected the first aisle value
02:29 - that it saw in each group.
02:32 - And, you know, the aisle value
was the same for all of them
02:34 - so we got the aisles back out.
02:37 - But we could've also said "name" here
02:41 - and we do see a name for each of the rows.
02:44 - But it's a bit misleading
because for some of these aisles
02:47 - there are actually multiple
items in that group.
02:50 - But the SQL engine just picked
the first item out of it.
02:53 - So you really shouldn't be
using something different
02:57 - from what you're grouping by
02:58 - cause you might not get a sensible result.
03:00 - So let's say "aisle" and
now that's an accurate
03:04 - presentation of our data.
03:07 - Okay, so great.
03:09 - You've seen aggregate functions.
03:10 - You've seen grouping it by
03:12 - and now you can officially gather
03:13 - useful statistics on your data.
03:15 - Another tool for your SQL toolbox.

Cleaned transcript:

We're back with our grocery list. I can see that it has six rows in it, but I can also see that we need to buy more than one of each item, like our bananas. So I'm not sure offhand how many items we'll end up buying total. And I'd like to know that total number so that when we're cashing out, we can just do a quick check to see if we have the right number of items in our cart. Well to do that in SQL we can use what's called an aggregate function. An aggregate function is useful for things like getting the maximum, minimum, sum and average of values in our database. In this example, to get the total number of items, we'll start with SELECT. Then the name of the aggregate function we'll be using, SUM. Then the name of the column we want. And then FROM, the name of the table we're selecting from. Tahdah! So you can see on the right that the SUM is 15 so we should have 15 items in our cart if we got everything correctly. And notice if I go up here and change the number of bananas because, you know, I'm gonna invite my monkey friends over for a jungle party, we can see the SUM increase in real time and get bigger and bigger. So we know that we're now gonna need 67 items in our cart. Now we can easily try out other aggregate functions here. Cause SUM's not the only one. So if we wanted to know what is the most that we'll be buying of any one item, then we could use MAX. See, 56, those are obviously our bananas. But this information isn't as useful for this case. Let's go back to SUM. Okay. Now what if we wanted to make sure we had the right number of items after each aisle? Well we can do that in SQL using the GROUP BY clause. We add it to the end of a query, specifying the column name to GROUP BY "aisle." Okay, so now we can see that in one aisle we have nine, in another we have one, but I don't actually know which aisle we're getting each of those in. So what we can do there is just add "aisle" to the beginning of this SELECT. So there you can see it, okay. So we're gonna get nine items in aisle two, one item in aisle four, 56 in aisle seven, and one in aisle twelve. Awesome. Now how did that actually work behind the scenes? The SQL engine first did the grouping of the rows based on aisle. So first did this GROUP BY. Then it summed up the quantity in each of those groups. And then, finally, it selected the first aisle value that it saw in each group. And, you know, the aisle value was the same for all of them so we got the aisles back out. But we could've also said "name" here and we do see a name for each of the rows. But it's a bit misleading because for some of these aisles there are actually multiple items in that group. But the SQL engine just picked the first item out of it. So you really shouldn't be using something different from what you're grouping by cause you might not get a sensible result. So let's say "aisle" and now that's an accurate presentation of our data. Okay, so great. You've seen aggregate functions. You've seen grouping it by and now you can officially gather useful statistics on your data. Another tool for your SQL toolbox.
