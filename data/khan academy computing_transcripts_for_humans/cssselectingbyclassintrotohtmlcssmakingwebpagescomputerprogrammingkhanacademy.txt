With timestamps:

00:00 - - Let's take a look at our Web page.
00:02 - It's got these top headings,
00:04 - has this paragraph describing rabbits,
00:07 - and now it actually
has multiple paragraphs
00:10 - with the lyrics to my
favorite song about rabbits.
00:13 - Last time, we styled the first
lyrics paragraph using an ID,
00:18 - but now that I have multiple
paragraphs with lyrics,
00:20 - I want them all to have that
yellow background color.
00:24 - How could we do that
using what we know so far?
00:28 - The first thing that we learned how to do
00:30 - was to select all tags of particular type,
00:32 - like with the p selector,
00:34 - but that colored all the paragraphs,
00:36 - not just the paragraphs with lyrics.
00:39 - We need something more specific.
00:41 - Then we learned how to select
tags with a particular ID,
00:44 - like selecting the paragraph
with the rabbit song ID,
00:48 - but that only selected
the first paragraph.
00:51 - We can't add that ID
to the other paragraphs
00:53 - because we're not allowed
to use the same ID
00:56 - on multiple tags.
00:57 - If we wanted to select
the other paragraphs,
00:59 - we'd have to give each of them new IDs,
01:02 - like "song lyrics two"
and "song lyrics three,"
01:05 - because every ID must be unique
01:07 - and then add rules for each of them.
01:09 - We could do that, but wow,
that is a lot of work,
01:12 - and every time we added
a new verse to the song,
01:14 - we'd have to remember to
add another ID to the HTML,
01:16 - another ID to the CSS rules.
01:19 - If we added hundreds of verse,
it would just be exhausting.
01:23 - Well, guess what?
01:24 - There is a better way,
and it's called classes.
01:27 - A class is basically a way
01:29 - of assigning a particular
element to a group,
01:32 - and you can assign as many
elements as you want to a group.
01:34 - (ping)
01:35 - To add a class, we need
to add a class attribute,
01:38 - like we did with IDs.
01:40 - First, I'll just delete these IDs
01:42 - since I'm going to replace it.
01:45 - Now I've got my cursor in the start p tag,
01:47 - and I add a space and write class=".
01:53 - Now we need to come up with a class name
01:54 - and a nice descriptive one.
01:56 - Let's call it song-lyrics,
01:59 - type that in there.
02:01 - What other elements should
have this class name?
02:04 - Well, all the other lyric paragraphs.
02:06 - So just go down the page
and add the attribute
02:10 - to each of the paragraph classes.
02:13 - Lyrics,
02:14 - okay, great.
02:16 - Now we're ready to add the CSS rule,
02:18 - so we go back up to our style tag
02:21 - and delete the ID selector
that we had before
02:24 - since we're replacing it,
02:26 - and now we need to come up
with our class selector.
02:29 - Well, to start a class selector,
02:32 - we use a period, a dot,
02:34 - and then we write the class name after it,
02:36 - song-lyrics.
02:39 - Then just like always, curly braces,
02:42 - property, colon, value.
02:46 - Tada!
02:47 - All of our lyrics now
have yellow backgrounds.
02:51 - What would happen if we
capitalized the S here?
02:55 - It doesn't work because class names
02:57 - are also case-sensitive.
02:58 - It matters which letters are
lower case and upper case,
03:01 - just like with IDs.
03:04 - What would happen if we used a hash sign
03:07 - instead of a period?
03:08 - It doesn't work
03:09 - because then the browser thinks
03:11 - that song lyrics is an ID,
03:12 - and when it can't find anything
03:13 - with an ID attribute of song lyrics,
03:16 - it gives up.
03:18 - What would happen if we put spaces
03:22 - in our class names?
03:25 - Well, that doesn't work either
03:27 - because classes can't have white space.
03:30 - And as we'll find out later,
03:31 - a space means something
very specific in CSS land.
03:35 - So, we'll just fix this back,
03:39 - and one more time.
03:41 - When we want to add a class,
03:43 - we come up with a class name,
03:45 - we add it to our class
attribute in the HTML,
03:49 - and then we write a style rule
03:51 - starting with the period
and the class name.
03:55 - And now your CSS can be classy!

Cleaned transcript:

Let's take a look at our Web page. It's got these top headings, has this paragraph describing rabbits, and now it actually has multiple paragraphs with the lyrics to my favorite song about rabbits. Last time, we styled the first lyrics paragraph using an ID, but now that I have multiple paragraphs with lyrics, I want them all to have that yellow background color. How could we do that using what we know so far? The first thing that we learned how to do was to select all tags of particular type, like with the p selector, but that colored all the paragraphs, not just the paragraphs with lyrics. We need something more specific. Then we learned how to select tags with a particular ID, like selecting the paragraph with the rabbit song ID, but that only selected the first paragraph. We can't add that ID to the other paragraphs because we're not allowed to use the same ID on multiple tags. If we wanted to select the other paragraphs, we'd have to give each of them new IDs, like "song lyrics two" and "song lyrics three," because every ID must be unique and then add rules for each of them. We could do that, but wow, that is a lot of work, and every time we added a new verse to the song, we'd have to remember to add another ID to the HTML, another ID to the CSS rules. If we added hundreds of verse, it would just be exhausting. Well, guess what? There is a better way, and it's called classes. A class is basically a way of assigning a particular element to a group, and you can assign as many elements as you want to a group. (ping) To add a class, we need to add a class attribute, like we did with IDs. First, I'll just delete these IDs since I'm going to replace it. Now I've got my cursor in the start p tag, and I add a space and write class=". Now we need to come up with a class name and a nice descriptive one. Let's call it songlyrics, type that in there. What other elements should have this class name? Well, all the other lyric paragraphs. So just go down the page and add the attribute to each of the paragraph classes. Lyrics, okay, great. Now we're ready to add the CSS rule, so we go back up to our style tag and delete the ID selector that we had before since we're replacing it, and now we need to come up with our class selector. Well, to start a class selector, we use a period, a dot, and then we write the class name after it, songlyrics. Then just like always, curly braces, property, colon, value. Tada! All of our lyrics now have yellow backgrounds. What would happen if we capitalized the S here? It doesn't work because class names are also casesensitive. It matters which letters are lower case and upper case, just like with IDs. What would happen if we used a hash sign instead of a period? It doesn't work because then the browser thinks that song lyrics is an ID, and when it can't find anything with an ID attribute of song lyrics, it gives up. What would happen if we put spaces in our class names? Well, that doesn't work either because classes can't have white space. And as we'll find out later, a space means something very specific in CSS land. So, we'll just fix this back, and one more time. When we want to add a class, we come up with a class name, we add it to our class attribute in the HTML, and then we write a style rule starting with the period and the class name. And now your CSS can be classy!
