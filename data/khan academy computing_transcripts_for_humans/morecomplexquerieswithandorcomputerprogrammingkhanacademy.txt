With timestamps:

00:00 - I've spent the last few talk-throughs
making a grocery list.
00:04 - Well now that I've realized
how much eating I do,
00:07 - I realize what else
I should be tracking in a database:
00:11 - how much exercise I'm doing. [LAUGH]
00:14 - So, I'll start by pasting in
some statements that create a table
00:19 - and insert a few rows of data.
00:21 - Let's see what I have in `exercise_logs`.
00:24 - We have an `id`, of course,
00:26 - a `type`, which is a string
like biking or dancing,
00:29 - `minutes`, for how many I spent,
00:31 - `calories`, for how many I burned,
00:33 - and `heart_rate` for how high it went.
00:36 - Now, I'm inserting the data using
a slightly different syntax than before.
00:41 - Notice how I'm specifying the column names
in parentheses after the table name.
00:48 - When I do that, it means that I don't
have to specify every column value here,
00:53 - I only have to specify the ones
that I give in this list of column names.
01:00 - Now, do you see which one
I didn't specify here?
01:05 - The missing column is `id`.
01:08 - And that's very much on purpose.
01:11 - `id`, here we go.
01:12 - The `id` column is
the primary key in the table,
01:15 - and it's set to auto-increment.
01:18 - That means that the database
01:20 - will automatically fill it in for us
when we tell it to,
01:25 - by picking an id that's different
from the other rows in the table,
01:28 - usually a number that's one bigger
than the biggest number so far.
01:32 - Now I'd rather have the database figure
that out than have me figure it out,
01:36 - so I usually like to do my `INSERT`s
this way, leave out the id,
01:40 - let the database do that work for me.
01:43 - Okay, so there we go,
my database table is set up,
01:47 - and it looks like I have even
done a bit of exercise.
01:51 - [LAUGH] Go me!
01:53 - Let's find out where I'm burning
the most calories, with a simple query.
01:59 - I'll just modify this one, so,
02:02 - `SELECT * FROM exercise_logs
WHERE calories > 50`,
02:08 - and we'll just
`ORDER BY calories` as well.
02:12 - Okay, so I've done two activities
where I've burned more than 50 calories,
02:16 - and it looks like dancing burned the most.
02:19 - Now, I want to find out
which activities I've done
02:23 - that have burned more than 50 calories,
but also taken less than 30 minutes.
02:31 - Because I want to exercise
more efficiently in the future.
02:35 - It's pretty obvious from looking at the
current results, there's only two results,
02:40 - it's easy to look at that,
but just imagine that there are
02:43 - thousands of rows, maybe this is data
from thousands of users.
02:48 - I would need a way to filter that down
in the SQL query itself.
02:53 - To do that, I can use the `AND` operator,
02:58 - to combine those multiple conditions,
like to only return the rows
03:04 - where calories are greater than 50,
and minutes are less than 30.
03:14 - Ha-ha! So now I only see one result,
dancing, which means I should just
03:19 - spend my whole life dancing.
03:22 - Which sounds pretty good to me.
03:24 - Okay, so in a similar way,
I could use the `OR` operator
03:30 - to return rows that meet
any of some conditions.
03:35 - Like, let's say rows where
`calories` are greater than 50,
03:43 - `OR heart_rate` is above 100.
03:49 - And that helps me find the most
vigorous exercises.
03:52 - Now we can see that
dancing and biking are both good,
03:56 - and actually, I do like biking,
it's just a bit harder.
04:00 - Now, you can have
as many `OR` and `AND` operators
04:04 - in your query as you'd like.
04:06 - The `AND` operator
has precedence over the `OR`,
04:09 - if you've got both of them
in the same same query,
04:11 - but you can always use parentheses
to change the order of evaluation,
04:15 - just like with math expressions.
04:18 - Now I want you to try these out
in the next challenge,
04:21 - and stay tuned for the next talk-through,
where I'm going to show
04:25 - how to do some interesting things
using this `type` column here.
04:30 - See you then!

Cleaned transcript:

I've spent the last few talkthroughs making a grocery list. Well now that I've realized how much eating I do, I realize what else I should be tracking in a database how much exercise I'm doing. [LAUGH] So, I'll start by pasting in some statements that create a table and insert a few rows of data. Let's see what I have in `exercise_logs`. We have an `id`, of course, a `type`, which is a string like biking or dancing, `minutes`, for how many I spent, `calories`, for how many I burned, and `heart_rate` for how high it went. Now, I'm inserting the data using a slightly different syntax than before. Notice how I'm specifying the column names in parentheses after the table name. When I do that, it means that I don't have to specify every column value here, I only have to specify the ones that I give in this list of column names. Now, do you see which one I didn't specify here? The missing column is `id`. And that's very much on purpose. `id`, here we go. The `id` column is the primary key in the table, and it's set to autoincrement. That means that the database will automatically fill it in for us when we tell it to, by picking an id that's different from the other rows in the table, usually a number that's one bigger than the biggest number so far. Now I'd rather have the database figure that out than have me figure it out, so I usually like to do my `INSERT`s this way, leave out the id, let the database do that work for me. Okay, so there we go, my database table is set up, and it looks like I have even done a bit of exercise. [LAUGH] Go me! Let's find out where I'm burning the most calories, with a simple query. I'll just modify this one, so, `SELECT * FROM exercise_logs WHERE calories > 50`, and we'll just `ORDER BY calories` as well. Okay, so I've done two activities where I've burned more than 50 calories, and it looks like dancing burned the most. Now, I want to find out which activities I've done that have burned more than 50 calories, but also taken less than 30 minutes. Because I want to exercise more efficiently in the future. It's pretty obvious from looking at the current results, there's only two results, it's easy to look at that, but just imagine that there are thousands of rows, maybe this is data from thousands of users. I would need a way to filter that down in the SQL query itself. To do that, I can use the `AND` operator, to combine those multiple conditions, like to only return the rows where calories are greater than 50, and minutes are less than 30. Haha! So now I only see one result, dancing, which means I should just spend my whole life dancing. Which sounds pretty good to me. Okay, so in a similar way, I could use the `OR` operator to return rows that meet any of some conditions. Like, let's say rows where `calories` are greater than 50, `OR heart_rate` is above 100. And that helps me find the most vigorous exercises. Now we can see that dancing and biking are both good, and actually, I do like biking, it's just a bit harder. Now, you can have as many `OR` and `AND` operators in your query as you'd like. The `AND` operator has precedence over the `OR`, if you've got both of them in the same same query, but you can always use parentheses to change the order of evaluation, just like with math expressions. Now I want you to try these out in the next challenge, and stay tuned for the next talkthrough, where I'm going to show how to do some interesting things using this `type` column here. See you then!
