With timestamps:

00:00 - Since we were just talking
about slideshows,
00:02 - I'm going to walk through an example of
using a slideshow library on a webpage.
00:08 - Now, I've created this webpage
with five images on it.
00:12 - And they're currently displayed
just normally, down the page.
00:16 - I'd like to use JavaScript to only show
one of these images at a time.
00:21 - And I've already written
the code to do that,
00:24 - which I'll paste in now and explain.
00:27 - All right, so what do we have here?
00:30 - We have a function named `slideShow`,
00:33 - which takes a single parameter,
a reference to a DOM node.
00:37 - Then inside, we go through
all of the DOM node's children,
00:42 - and we hide all of them.
00:44 - Then we call the `nextSlide` function.
00:46 - `nextSlide` goes through,
hides all of them again,
00:50 - and then sets the current image to visible
by changing the CSS display property.
00:55 - It then increments the
current image numeric property,
00:59 - to make sure that
the next time it's called,
01:02 - it'll display the next image.
01:04 - And then at the end, it uses
`window.setTimeout`
01:08 - to call `nextSlide` again, and this way
it does it after 1000 milliseconds.
01:15 - And that's it, that's how it works.
01:18 - It's okay if you
don't quite understand it,
01:20 - just to get the general idea
of what's happening.
01:24 - So after I define that function,
I can use it.
01:28 - And I use it just by
passing it a reference
01:31 - to the slideshow div that's on my page.
01:34 - And if I wanted to use it
multiple times on my page, I could.
01:39 - Because I could call it multiple times,
and each time, I would pass it
01:43 - a reference to a different div
that had images inside of it.
01:48 - But what if I wanted to use this code
on another webpage,
01:53 - or if I wanted other developers
to be able to use it on their webpage?
01:59 - I could just paste it into my webpages,
and other developers could
02:03 - paste it into their webpages.
02:05 - But that's not as nice.
02:08 - What's better is if I put it
in its own JavaScript file,
02:12 - put that JavaScript file on a server,
and then bring it in from there.
02:17 - So that is what I've done.
02:19 - I've taken this code and
I've uploaded it to a server,
02:23 - and now it's basically a library.
02:27 - So let me try using that library.
02:30 - I'm going to delete
the code that's in here.
02:33 - And now you can see it's just
not working anymore,
02:35 - because that slideshow
function doesn't exist.
02:38 - And I'm going to add
a `` tag back,
02:43 - but this time, the `` tag
is going to have the source attribute,
02:47 - and that source attribute is going to 
point at the location of my library.
02:53 - Ha-ha! And it's working again!
02:56 - Very nice.
02:57 - I encourage you to open this URL up
in the browser and see what it looks like.
03:02 - It looks pretty much like
what I just showed you.
03:05 - But now it's its own JavaScript file,
and now I can use it on any webpage,
03:10 - and so can any of you.
03:12 - That is the power of a library--
03:14 - a reusable bundle of
JavaScript functionality.
03:18 - Now my slideshow library
is pretty easy to use.
03:21 - Because there's only
one function I could use,
03:24 - and it only takes one parameter.
03:26 - Other libraries will be more complicated,
and you'll have to read the documentation
03:30 - to understand what functions
to call and how.
03:33 - But, that usually means that
the libraries will be more powerful.
03:36 - So it'll be worth to spend the time
learning about those libraries.

Cleaned transcript:

Since we were just talking about slideshows, I'm going to walk through an example of using a slideshow library on a webpage. Now, I've created this webpage with five images on it. And they're currently displayed just normally, down the page. I'd like to use JavaScript to only show one of these images at a time. And I've already written the code to do that, which I'll paste in now and explain. All right, so what do we have here? We have a function named `slideShow`, which takes a single parameter, a reference to a DOM node. Then inside, we go through all of the DOM node's children, and we hide all of them. Then we call the `nextSlide` function. `nextSlide` goes through, hides all of them again, and then sets the current image to visible by changing the CSS display property. It then increments the current image numeric property, to make sure that the next time it's called, it'll display the next image. And then at the end, it uses `window.setTimeout` to call `nextSlide` again, and this way it does it after 1000 milliseconds. And that's it, that's how it works. It's okay if you don't quite understand it, just to get the general idea of what's happening. So after I define that function, I can use it. And I use it just by passing it a reference to the slideshow div that's on my page. And if I wanted to use it multiple times on my page, I could. Because I could call it multiple times, and each time, I would pass it a reference to a different div that had images inside of it. But what if I wanted to use this code on another webpage, or if I wanted other developers to be able to use it on their webpage? I could just paste it into my webpages, and other developers could paste it into their webpages. But that's not as nice. What's better is if I put it in its own JavaScript file, put that JavaScript file on a server, and then bring it in from there. So that is what I've done. I've taken this code and I've uploaded it to a server, and now it's basically a library. So let me try using that library. I'm going to delete the code that's in here. And now you can see it's just not working anymore, because that slideshow function doesn't exist. And I'm going to add a `` tag back, but this time, the `` tag is going to have the source attribute, and that source attribute is going to point at the location of my library. Haha! And it's working again! Very nice. I encourage you to open this URL up in the browser and see what it looks like. It looks pretty much like what I just showed you. But now it's its own JavaScript file, and now I can use it on any webpage, and so can any of you. That is the power of a library a reusable bundle of JavaScript functionality. Now my slideshow library is pretty easy to use. Because there's only one function I could use, and it only takes one parameter. Other libraries will be more complicated, and you'll have to read the documentation to understand what functions to call and how. But, that usually means that the libraries will be more powerful. So it'll be worth to spend the time learning about those libraries.
