With timestamps:

00:00 - I've got this webpage
with a picture of Oh Noes,
00:03 - who is freaking out that
the world is going to end soon--
00:07 - specifically, in 500 seconds.
00:10 - I want to make this webpage
way more useful,
00:13 - by turning this number into
a live countdown,
00:16 - so that visitors can see exactly
how much time they have left.
00:20 - Now, when we animate
part of a webpage,
00:23 - the strategy is to find 
some element in it,
00:26 - then change something
about that element,
00:29 - and do that a particular
number of times a second.
00:32 - So, for the first step,
I will find the countdown by ID.
00:37 - Simple.
00:39 - [typing]
00:47 - For the second step, I'll make
a function that counts down.
00:51 - [typing]
00:54 - And what we'll do--
00:56 - I want to set the `textContent`,
and I want to set it equal to
01:01 - the previous number minus one.
01:03 - And the `textContent`
will actually be a string,
01:06 - so we want to turn it into a number.
01:09 - We can do that using `parsefloat()`.
01:12 - And then we can subtract one from it.
01:15 - Okay, so finally, we want to
call this function on an interval,
01:21 - which means a certain
number of times per second.
01:25 - And we can use that using
`window.setInterval()`.
01:30 - And this function takes two arguments:
01:33 - the callback function, and
the number of milliseconds to wait
01:38 - before that function gets
called back again.
01:40 - We can specify the callback function
01:43 - just like we specify it
for event listeners: by name.
01:46 - And then-- it's going really
fast right now
01:49 - because we haven't specified
the second argument--
01:51 - so for that, we want it to be
a certain number of milliseconds,
01:55 - and we want it once per second,
so we're going to say a thousand,
01:58 - because there are
a thousand milliseconds in a second.
02:01 - There we go, now it's
counting down one per second.
02:05 - So you'd better learn as much as you can
in the next 490 seconds!
02:10 - There is one more window function that we
sometimes use instead of `setInterval`,
02:15 - and that's setTimeout.
02:17 - And I'll just change it to that,
and see if you can see the difference.
02:21 - Have to wait a second.
02:23 - Okay, so, now maybe you can see
that when we use `setTimeout`,
02:28 - the browser only calls
the function once, not repeatedly.
02:33 - That's not so useful for
when we're making animations.
02:38 - But it can be super useful in other cases,
02:41 - like if we showed a warning banner
to our users, and then we wanted
02:45 - to hide it after 10 seconds.
02:48 - So let me change this
back to `setInterval`.
02:52 - Now, when we're testing
animations like this,
02:56 - we should really see what they look like
at all points in the animation,
03:00 - like what happens
when it gets down to zero.
03:02 - Well that's going to take
a really long time to get there,
03:05 - and you're going to
get really bored, so
03:07 - we'll just change
our beginning data to 5,
03:10 - and watch what happens.
03:12 - Four, three, two, one, zero...
03:16 - negative one, negative two.
03:19 - Okay, so now it's getting weird.
03:21 - When the world ends, it should just go
"Kaboom!" and stop counting.
03:26 - So what we actually want to do,
is stop this animation
03:30 - once it gets to that zero point.
03:32 - And we can do that using
an `if` condition inside the function.
03:36 - So, let me start by storing
the current time in a variable
03:42 - since we're going to use it a few times.
03:44 - So I'll just take this,
put it here,
03:47 - and replace this with `currentTime`.
03:51 - Now what I can do is
have an `if` condition
03:55 - that makes sure we only update the text
if `currentTime` is greater than zero.
04:01 - So that's the only time we want
to actually subtract one.
04:04 - So I need to move this inside here.
04:10 - This works, but there is something
really bad about this approach.
04:15 - The browser is still calling the
`countItDown` function once per second
04:19 - as long as this webpage is open.
04:21 - You shouldn't make browsers
call functions for no reason--
04:24 - they have lots of other
important things to do.
04:27 - What we really want to do
is to tell the browser that
04:30 - once it gets to zero, it doesn't need
to call this function anymore at all.
04:35 - We can do that using a new method:
`window.clearInterval()`.
04:40 - We can stick that in this `else` here--
`window.clearInterval()`.
04:47 - Now, we need to pass it an argument,
so that it knows which interval to clear.
04:52 - Because we might actually have
multiple intervals on a page.
04:55 - The way that we know
which interval to clear
04:58 - is to store the result
of `setInterval` in a variable.
05:02 - So now I've got it in a timer variable,
I can copy and paste it into there,
05:07 - and now it knows what to clear,
so when it gets to zero,
05:11 - it should stop updating, and
it should stop calling that function.
05:15 - For every animation that you make,
you should think carefully about
05:19 - what the condition
should be for stopping it.
05:21 - And yes, you might have some animations
that should go on and on, my friends--
05:26 - but they'd better be
really sweet animations.
05:29 - Because your browser is working every time
it calls that callback function.
05:33 - Now spin this off, and make the world
actually go kaboom!

Cleaned transcript:

I've got this webpage with a picture of Oh Noes, who is freaking out that the world is going to end soon specifically, in 500 seconds. I want to make this webpage way more useful, by turning this number into a live countdown, so that visitors can see exactly how much time they have left. Now, when we animate part of a webpage, the strategy is to find some element in it, then change something about that element, and do that a particular number of times a second. So, for the first step, I will find the countdown by ID. Simple. [typing] For the second step, I'll make a function that counts down. [typing] And what we'll do I want to set the `textContent`, and I want to set it equal to the previous number minus one. And the `textContent` will actually be a string, so we want to turn it into a number. We can do that using `parsefloat()`. And then we can subtract one from it. Okay, so finally, we want to call this function on an interval, which means a certain number of times per second. And we can use that using `window.setInterval()`. And this function takes two arguments the callback function, and the number of milliseconds to wait before that function gets called back again. We can specify the callback function just like we specify it for event listeners by name. And then it's going really fast right now because we haven't specified the second argument so for that, we want it to be a certain number of milliseconds, and we want it once per second, so we're going to say a thousand, because there are a thousand milliseconds in a second. There we go, now it's counting down one per second. So you'd better learn as much as you can in the next 490 seconds! There is one more window function that we sometimes use instead of `setInterval`, and that's setTimeout. And I'll just change it to that, and see if you can see the difference. Have to wait a second. Okay, so, now maybe you can see that when we use `setTimeout`, the browser only calls the function once, not repeatedly. That's not so useful for when we're making animations. But it can be super useful in other cases, like if we showed a warning banner to our users, and then we wanted to hide it after 10 seconds. So let me change this back to `setInterval`. Now, when we're testing animations like this, we should really see what they look like at all points in the animation, like what happens when it gets down to zero. Well that's going to take a really long time to get there, and you're going to get really bored, so we'll just change our beginning data to 5, and watch what happens. Four, three, two, one, zero... negative one, negative two. Okay, so now it's getting weird. When the world ends, it should just go "Kaboom!" and stop counting. So what we actually want to do, is stop this animation once it gets to that zero point. And we can do that using an `if` condition inside the function. So, let me start by storing the current time in a variable since we're going to use it a few times. So I'll just take this, put it here, and replace this with `currentTime`. Now what I can do is have an `if` condition that makes sure we only update the text if `currentTime` is greater than zero. So that's the only time we want to actually subtract one. So I need to move this inside here. This works, but there is something really bad about this approach. The browser is still calling the `countItDown` function once per second as long as this webpage is open. You shouldn't make browsers call functions for no reason they have lots of other important things to do. What we really want to do is to tell the browser that once it gets to zero, it doesn't need to call this function anymore at all. We can do that using a new method `window.clearInterval()`. We can stick that in this `else` here `window.clearInterval()`. Now, we need to pass it an argument, so that it knows which interval to clear. Because we might actually have multiple intervals on a page. The way that we know which interval to clear is to store the result of `setInterval` in a variable. So now I've got it in a timer variable, I can copy and paste it into there, and now it knows what to clear, so when it gets to zero, it should stop updating, and it should stop calling that function. For every animation that you make, you should think carefully about what the condition should be for stopping it. And yes, you might have some animations that should go on and on, my friends but they'd better be really sweet animations. Because your browser is working every time it calls that callback function. Now spin this off, and make the world actually go kaboom!
