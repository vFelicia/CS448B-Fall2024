With timestamps:

00:00 - Let's say that we want to create tables
to store the data for a diary app.
00:06 - A basic setup would be a users table,
00:09 - and a diary logs table.
00:12 - Now when a user wrote up
their diary on the website,
00:16 - we would have some code
to execute an `INSERT` statement
00:20 - like what I'm pasting in here.
00:23 - So this inserts two rows for two
diary logs, one day after the other--
00:28 - first where somebody has a horrible fight,
00:31 - and buries their woes
in three pounds of dark chocolate,
00:34 - and the next day, of course,
00:36 - they make up and celebrate
with ice cream, as you do.
00:39 - So, we can check to see what
our `diary_logs` table looks like now.
00:45 - And we can see those two posts in there.
00:48 - Now, imagine that the user comes back
and wants to modify their logs.
00:53 - Maybe because they
don't want to admit,
00:56 - even to themselves, that they
have eaten that much dark chocolate.
01:01 - 
01:02 - Now, we've already inserted the data, so
at this point we would need to have
01:06 - code that would execute
an `UPDATE` statement, like this--
01:11 - `UPDATE diary_logs SET content =
"I had a horrible fight with OhNoesGuy"`
01:23 - Now this is telling it to update
that table and set the content,
01:27 - but it's not telling
which row to update.
01:31 - We need to tell the database
which row to update,
01:33 - because we don't want it updating
every row with that content, just one row.
01:38 - So, how do we find the log to update?
01:42 - Well, we can use the ID, like that.
01:46 - If we didn't know the ID,
we could also filter
01:50 - by columns that we knew
were unique to the log,
01:53 - like `user_id`, and the date,
which was 2015-04-01.
02:04 - But really, if you know the ID,
it's safer because you're not relying on
02:09 - having to filter on columns which
could actually be the same
02:13 - across multiple rows if you might have
a diary app where users are allowed
02:16 - to write multiple logs per day.
02:19 - It really depends on how the app
and the tables are designed.
02:24 - I'll go back to the ID,
since I know the ID.
02:28 - Now we can do another `SELECT`
to see that our table changed.
02:33 - And it did.
02:35 - No more knowledge of those
three pounds of chocolate.
02:40 - Okay, so the user made that change,
but then the user decides
02:45 - that they actually want
to delete the entire log entry.
02:49 - Like, maybe because they want to forget
that they even had that horrible fight.
02:54 - So in that case, we would need
to have code to execute a `DELETE`.
02:59 - So we can say
`DELETE FROM diary_logs WHERE`,
03:04 - and once again, I'm going to
use the id because I know it.
03:08 - And let's select again
to see what it looks like.
03:11 - Ha-ha, so we only have one row left,
which means that our `DELETE` worked.
03:18 - Now, you should be very careful whenever
you're doing `UPDATE` or `DELETE`,
03:24 - because you want to make sure you're
03:26 - updating the actual rows
that you intend to update.
03:29 - You don't want to update the wrong rows,
03:32 - or delete the wrong rows
and lose that data.
03:35 - In fact, some apps never issue `DELETE`s,
they never really delete rows.
03:41 - Instead, they add, like,
a `deleted` column to their database,
03:47 - and then they'll do something
like set `deleted` to `TRUE`
03:52 - when the user wants to delete.
03:54 - And then they filter based on
`deleted = FALSE` in the `SELECT` queries.
03:58 - Something like that.
04:00 - So that means that you
never actually delete data,
04:03 - which can be a little bit safer,
04:05 - but it's a little more complicated
to do that as well.
04:09 - So anyway, that's up to
how you design the app.
04:12 - So now, with `SELECT` and `INSERT`
and `UPDATE` and `DELETE`,
04:17 - you have all the commands you need
to handle what a user would want
04:21 - out of your diary app.
04:22 - And now hopefully you can better
imagine which commands are happening
04:26 - behind the scenes when you
use your favorite apps every day.

Cleaned transcript:

Let's say that we want to create tables to store the data for a diary app. A basic setup would be a users table, and a diary logs table. Now when a user wrote up their diary on the website, we would have some code to execute an `INSERT` statement like what I'm pasting in here. So this inserts two rows for two diary logs, one day after the other first where somebody has a horrible fight, and buries their woes in three pounds of dark chocolate, and the next day, of course, they make up and celebrate with ice cream, as you do. So, we can check to see what our `diary_logs` table looks like now. And we can see those two posts in there. Now, imagine that the user comes back and wants to modify their logs. Maybe because they don't want to admit, even to themselves, that they have eaten that much dark chocolate. Now, we've already inserted the data, so at this point we would need to have code that would execute an `UPDATE` statement, like this `UPDATE diary_logs SET content = "I had a horrible fight with OhNoesGuy"` Now this is telling it to update that table and set the content, but it's not telling which row to update. We need to tell the database which row to update, because we don't want it updating every row with that content, just one row. So, how do we find the log to update? Well, we can use the ID, like that. If we didn't know the ID, we could also filter by columns that we knew were unique to the log, like `user_id`, and the date, which was 20150401. But really, if you know the ID, it's safer because you're not relying on having to filter on columns which could actually be the same across multiple rows if you might have a diary app where users are allowed to write multiple logs per day. It really depends on how the app and the tables are designed. I'll go back to the ID, since I know the ID. Now we can do another `SELECT` to see that our table changed. And it did. No more knowledge of those three pounds of chocolate. Okay, so the user made that change, but then the user decides that they actually want to delete the entire log entry. Like, maybe because they want to forget that they even had that horrible fight. So in that case, we would need to have code to execute a `DELETE`. So we can say `DELETE FROM diary_logs WHERE`, and once again, I'm going to use the id because I know it. And let's select again to see what it looks like. Haha, so we only have one row left, which means that our `DELETE` worked. Now, you should be very careful whenever you're doing `UPDATE` or `DELETE`, because you want to make sure you're updating the actual rows that you intend to update. You don't want to update the wrong rows, or delete the wrong rows and lose that data. In fact, some apps never issue `DELETE`s, they never really delete rows. Instead, they add, like, a `deleted` column to their database, and then they'll do something like set `deleted` to `TRUE` when the user wants to delete. And then they filter based on `deleted = FALSE` in the `SELECT` queries. Something like that. So that means that you never actually delete data, which can be a little bit safer, but it's a little more complicated to do that as well. So anyway, that's up to how you design the app. So now, with `SELECT` and `INSERT` and `UPDATE` and `DELETE`, you have all the commands you need to handle what a user would want out of your diary app. And now hopefully you can better imagine which commands are happening behind the scenes when you use your favorite apps every day.
