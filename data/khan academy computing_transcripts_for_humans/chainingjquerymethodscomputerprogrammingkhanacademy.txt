With timestamps:

00:01 - - [Voiceover] I keep
talking about how jQuery
00:02 - lets you write less code,
00:05 - but it might not seem that way yet
00:07 - because I've been writing jQuery
00:09 - in a pretty verbose way.
00:12 - For example, do you remember this code?
00:15 - It creates a new paragraph, sets a text,
00:18 - adds a class name,
00:20 - and then appends it to the 'body'.
00:23 - It actually takes as many lines of code
00:25 - as it would take without jQuery,
00:28 - but we can make it shorter, if we want,
00:31 - by using a technique we call chaining.
00:35 - Here, I'll show you.
00:37 - So, take this
00:41 - and then call the text on it
00:45 - and then I'll add the class name
00:50 - and then finally,
00:52 - I will append it to the 'body'.
00:56 - There we go.
00:57 - I just did the same thing
in one line of code.
01:01 - Amazing.
01:02 - I can do that with jQuery
01:04 - because most jQuery methods
01:06 - return the jQuery collection object,
01:08 - which means that I can
call another jQuery method
01:12 - on the return value.
01:13 - So, explain that again.
01:16 - This here makes end returns
a jQuery collection.
01:21 - Then, 'text' takes that collection
01:25 - and sets the text of the elements inside
01:27 - and returns a collection.
01:30 - So 'addClass' takes that collection,
01:32 - adds a class name to the elements inside
01:35 - and returns that collection again.
01:38 - And finally, 'appendTo'
01:41 - takes the elements inside the collection
01:43 - and appends it to the 'body' tag.
01:47 - So, that's how that works.
01:48 - Now notice that I use
'appendTo' instead of 'append'.
01:53 - I needed to do that
01:55 - because the 'append' method
01:57 - expects to be called on the
element we want to append to,
02:03 - not on the element that we want appended.
02:05 - The 'appendTo' method
02:07 - expects to be called on
the element to append
02:11 - and then it takes a parameter
02:12 - that tells jQuery where to append it to.
02:16 - So, the lesson there is
that if you use chaining,
02:20 - you have to think about your
functions, inputs and outputs,
02:23 - and whether your chain
of methods make sense.
02:27 - Now, I find that a single line
02:30 - of multiple chained method calls
02:32 - is a bit hard to read,
02:35 - so I like to make my code
a bit cleaner like this.
02:44 - Beautiful.
02:45 - I have not saved on lines
of code by doing this.
02:48 - This is the same number of lines of code
02:49 - as the non-chained version,
02:52 - but I have saved on
unnecessary variable creation
02:56 - and I think I have made
my code pretty readable.
03:01 - Remember that the goal of writing code
03:03 - isn't always to do it in the
fewest lines of code possible.
03:07 - It's also to write your code
03:09 - in a way that makes sense to yourself
03:12 - and anybody else who might look
at your code in the future,
03:16 - including your future selves.
03:19 - And let me tell you,
03:20 - your future selves can
get really critical.
03:24 - It's up to you
03:25 - if you want to chain your
jQuery methods or not,
03:28 - but regardless, you'll need
to get used to reading code
03:31 - that looks like this,
03:32 - because you'll probably encounter
code that uses chaining.
03:36 - I personally find it a
little weird at first,
03:38 - so, don't worry if you find it weird too.

Cleaned transcript:

[Voiceover] I keep talking about how jQuery lets you write less code, but it might not seem that way yet because I've been writing jQuery in a pretty verbose way. For example, do you remember this code? It creates a new paragraph, sets a text, adds a class name, and then appends it to the 'body'. It actually takes as many lines of code as it would take without jQuery, but we can make it shorter, if we want, by using a technique we call chaining. Here, I'll show you. So, take this and then call the text on it and then I'll add the class name and then finally, I will append it to the 'body'. There we go. I just did the same thing in one line of code. Amazing. I can do that with jQuery because most jQuery methods return the jQuery collection object, which means that I can call another jQuery method on the return value. So, explain that again. This here makes end returns a jQuery collection. Then, 'text' takes that collection and sets the text of the elements inside and returns a collection. So 'addClass' takes that collection, adds a class name to the elements inside and returns that collection again. And finally, 'appendTo' takes the elements inside the collection and appends it to the 'body' tag. So, that's how that works. Now notice that I use 'appendTo' instead of 'append'. I needed to do that because the 'append' method expects to be called on the element we want to append to, not on the element that we want appended. The 'appendTo' method expects to be called on the element to append and then it takes a parameter that tells jQuery where to append it to. So, the lesson there is that if you use chaining, you have to think about your functions, inputs and outputs, and whether your chain of methods make sense. Now, I find that a single line of multiple chained method calls is a bit hard to read, so I like to make my code a bit cleaner like this. Beautiful. I have not saved on lines of code by doing this. This is the same number of lines of code as the nonchained version, but I have saved on unnecessary variable creation and I think I have made my code pretty readable. Remember that the goal of writing code isn't always to do it in the fewest lines of code possible. It's also to write your code in a way that makes sense to yourself and anybody else who might look at your code in the future, including your future selves. And let me tell you, your future selves can get really critical. It's up to you if you want to chain your jQuery methods or not, but regardless, you'll need to get used to reading code that looks like this, because you'll probably encounter code that uses chaining. I personally find it a little weird at first, so, don't worry if you find it weird too.
