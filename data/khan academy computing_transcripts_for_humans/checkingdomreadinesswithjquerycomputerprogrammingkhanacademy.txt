With timestamps:

00:01 - - [Voiceover] I'm back with my example
00:02 - where I turn a page about cats
00:04 - into a page about crocodiles,
00:06 - thanks to jQuery.
00:08 - Now, you may have noticed
something about all my examples.
00:12 - I've been putting the 'script' tags
00:14 - at the very bottom of the page
00:17 - after all my HTML and CSS.
00:20 - I do that because it's typically
better for performance.
00:25 - Why?
00:26 - Well, browsers tend to load web pages
00:30 - in the order that the
tags appear in the page.
00:33 - When I structure the web page like this,
00:37 - the browser can load the
content of the web page first
00:40 - and then process the JavaScript.
00:43 - And there could be a lot of JavaScript.
00:46 - This way, the user has
some content to look at
00:50 - while waiting for the
JavaScript to load and execute.
00:54 - So that's generally a good practice,
00:56 - but there may be times
when you want or need
00:59 - to put the 'script' tags
earlier in your page.
01:03 - Like if you're working inside
a content management system
01:05 - or a blogging engine,
01:07 - and it doesn't give you
full control of your HTML.
01:11 - Let's pretend that that's the case here
01:14 - and move these 'script' tags up.
01:17 - Just put it in my ''
01:21 - All right. And they don't work anymore.
01:24 - There's no more crocodiles on my page.
01:27 - What happened?
01:28 - Well, this code here is trying to modify
01:32 - the DOM of the web page,
01:34 - but because of the order
01:35 - that the browser loads in the web page,
01:38 - the DOM doesn't actually exist yet.
01:40 - There is no 'h2' to change the text of.
01:44 - So, we need to tell jQuery to
wait until the DOM is ready
01:49 - to execute all this code.
01:51 - Well, luckily, jQuery
provides a special function
01:54 - for doing that.
01:56 - We can call it by calling jQuery,
01:59 - passing in the 'document' object
02:01 - and calling '.ready' on that
02:05 - giving it a 'callback function'
02:07 - and then inside this 'callback function,'
02:10 - put the code that we want to be executed
02:12 - once the DOM is ready.
02:14 - Ta-da!
02:15 - Our code works now
02:16 - because jQuery isn't running this code
02:19 - until the document is fully
ready for manipulation.
02:24 - So, great. Now we can put
our 'script' tags anywhere
02:27 - and feel safe.
02:29 - And if you want, you can
decide to always wrap your code
02:32 - inside '(document).ready'
02:34 - even if you have it at the
very bottom of your page.
02:37 - It doesn't hurt to be on the safe side.

Cleaned transcript:

[Voiceover] I'm back with my example where I turn a page about cats into a page about crocodiles, thanks to jQuery. Now, you may have noticed something about all my examples. I've been putting the 'script' tags at the very bottom of the page after all my HTML and CSS. I do that because it's typically better for performance. Why? Well, browsers tend to load web pages in the order that the tags appear in the page. When I structure the web page like this, the browser can load the content of the web page first and then process the JavaScript. And there could be a lot of JavaScript. This way, the user has some content to look at while waiting for the JavaScript to load and execute. So that's generally a good practice, but there may be times when you want or need to put the 'script' tags earlier in your page. Like if you're working inside a content management system or a blogging engine, and it doesn't give you full control of your HTML. Let's pretend that that's the case here and move these 'script' tags up. Just put it in my '' All right. And they don't work anymore. There's no more crocodiles on my page. What happened? Well, this code here is trying to modify the DOM of the web page, but because of the order that the browser loads in the web page, the DOM doesn't actually exist yet. There is no 'h2' to change the text of. So, we need to tell jQuery to wait until the DOM is ready to execute all this code. Well, luckily, jQuery provides a special function for doing that. We can call it by calling jQuery, passing in the 'document' object and calling '.ready' on that giving it a 'callback function' and then inside this 'callback function,' put the code that we want to be executed once the DOM is ready. Tada! Our code works now because jQuery isn't running this code until the document is fully ready for manipulation. So, great. Now we can put our 'script' tags anywhere and feel safe. And if you want, you can decide to always wrap your code inside '(document).ready' even if you have it at the very bottom of your page. It doesn't hurt to be on the safe side.
