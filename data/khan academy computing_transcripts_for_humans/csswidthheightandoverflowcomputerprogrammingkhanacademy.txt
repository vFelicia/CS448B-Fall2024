With timestamps:

00:00 - - When we use divs, it's often because
00:02 - we want to divide our
page into different boxes,
00:05 - resize those boxes, and move them around.
00:07 - It takes a good eye for
design to decide exactly
00:09 - how to lay out a page so it looks good.
00:12 - Right now, we're going to ignore the goal
00:14 - of making a page look good,
00:16 - and just show you how to change stuff up.
00:18 - Let's resize the official info div.
00:22 - By default, a div takes up
100% of the available width.
00:25 - That's why you see the grey box
going across the whole page.
00:29 - Maybe I only want it to take up 300 px.
00:32 - Well I'll add another property
to the CSS rule up here,
00:37 - width: 300px;.
00:41 - That worked, but let's do
something more interesting.
00:43 - Let's use percentage
width, and say that the div
00:45 - will always take up 70%
of the available width.
00:51 - Now, the text is constrained
to that smaller box,
00:53 - and the div has gotten taller.
00:55 - If we really want to, we can also
00:57 - constrain the height of the box,
00:59 - with the height property.
01:01 - height: 180px;.
01:03 - Mmm, okay, something funny happened.
01:06 - The grey box resized to 180 pixels,
01:09 - but the text is overflowing
outside of that grey box.
01:13 - Why'd that happen?
01:16 - That is because of a
property we call overflow.
01:20 - The default value for overflow is visible,
01:24 - which means that the element resizes,
01:26 - but the content flows outside of it,
01:28 - which looks a bit silly.
01:30 - What other options do
we have for overflow?
01:33 - Well, we could try hidden.
01:37 - That cuts the content off,
trimming it at the border.
01:40 - That's not what we want though,
01:42 - because then our viewers
won't be able to read
01:44 - all of our amazing official info.
01:46 - We could also try auto,
01:49 - which tells the browser to add
01:50 - scroll bars if the content overflows.
01:53 - Now, I can scroll around inside the box,
01:55 - to see the text.
01:57 - If we want, we can be even more specific
01:59 - and specify different overflow properties
02:01 - for each direction, for example,
02:03 - we want it to overflow with
scroll bars in the Y direction,
02:06 - up and down, we'll just overflow-y: auto;.
02:11 - Then if we want to trim
it in the X direction,
02:14 - we can say overflow-x: hidden;.
02:18 - Okay.
02:19 - Be careful any time you're using overflow,
02:21 - because scroll bars can get
really annoying for the user,
02:24 - especially scroll bars within scroll bars.
02:27 - Avoid those if you can.
02:30 - Now going back to width height,
02:32 - we can actually use width and height
02:34 - for all sorts of elements,
02:35 - like our images.
02:38 - Now that you know CSS, you
can use the width height
02:40 - CSS properties instead of
the width height attributes.
02:45 - Let's make this cat image a bit bigger
02:48 - by giving it an ID.
02:51 - Cute-cat.
02:53 - Deleting the attribute, and
going up to our style rule.
02:58 - Let's say cute-cat, and width: 120px;.
03:04 - Just like before with attributes,
03:06 - it's best to only specify
the width or the height
03:09 - and let the browser figure out
03:10 - the best value for the other dimension.
03:12 - Otherwise, we'll have a squashed kitty.
03:15 - Well, okay that sounds kind of awesome,
03:16 - so let's just try that for a second.
03:18 - Height: 40px;, Ahh! Squashed kitty! Yay!
03:22 - Okay, okay.
03:23 - I got that urge out, I'll be
a responsible web developer
03:26 - and delete it now.
03:29 - The more knowledge you have,
03:31 - the more responsibility
you need to take on.
03:33 - Just because you can add
scroll bars to everything,
03:36 - and squash all the kitties, it doesn't
03:38 - mean that you should.
03:39 - You're usually making websites
for other people to use.
03:42 - What you think is hilarious, might be what
03:44 - they find super hard to use.
03:47 - If you make a few funny
things were on Khan Academy,
03:50 - I won't mind. (laughs)

Cleaned transcript:

When we use divs, it's often because we want to divide our page into different boxes, resize those boxes, and move them around. It takes a good eye for design to decide exactly how to lay out a page so it looks good. Right now, we're going to ignore the goal of making a page look good, and just show you how to change stuff up. Let's resize the official info div. By default, a div takes up 100% of the available width. That's why you see the grey box going across the whole page. Maybe I only want it to take up 300 px. Well I'll add another property to the CSS rule up here, width 300px;. That worked, but let's do something more interesting. Let's use percentage width, and say that the div will always take up 70% of the available width. Now, the text is constrained to that smaller box, and the div has gotten taller. If we really want to, we can also constrain the height of the box, with the height property. height 180px;. Mmm, okay, something funny happened. The grey box resized to 180 pixels, but the text is overflowing outside of that grey box. Why'd that happen? That is because of a property we call overflow. The default value for overflow is visible, which means that the element resizes, but the content flows outside of it, which looks a bit silly. What other options do we have for overflow? Well, we could try hidden. That cuts the content off, trimming it at the border. That's not what we want though, because then our viewers won't be able to read all of our amazing official info. We could also try auto, which tells the browser to add scroll bars if the content overflows. Now, I can scroll around inside the box, to see the text. If we want, we can be even more specific and specify different overflow properties for each direction, for example, we want it to overflow with scroll bars in the Y direction, up and down, we'll just overflowy auto;. Then if we want to trim it in the X direction, we can say overflowx hidden;. Okay. Be careful any time you're using overflow, because scroll bars can get really annoying for the user, especially scroll bars within scroll bars. Avoid those if you can. Now going back to width height, we can actually use width and height for all sorts of elements, like our images. Now that you know CSS, you can use the width height CSS properties instead of the width height attributes. Let's make this cat image a bit bigger by giving it an ID. Cutecat. Deleting the attribute, and going up to our style rule. Let's say cutecat, and width 120px;. Just like before with attributes, it's best to only specify the width or the height and let the browser figure out the best value for the other dimension. Otherwise, we'll have a squashed kitty. Well, okay that sounds kind of awesome, so let's just try that for a second. Height 40px;, Ahh! Squashed kitty! Yay! Okay, okay. I got that urge out, I'll be a responsible web developer and delete it now. The more knowledge you have, the more responsibility you need to take on. Just because you can add scroll bars to everything, and squash all the kitties, it doesn't mean that you should. You're usually making websites for other people to use. What you think is hilarious, might be what they find super hard to use. If you make a few funny things were on Khan Academy, I won't mind. (laughs)
