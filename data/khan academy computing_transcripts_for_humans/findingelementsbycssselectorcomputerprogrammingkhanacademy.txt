With timestamps:

00:02 - You've now got a lot of tools
in your toolbox for finding elements.
00:06 - And those will work great
a lot of the time.
00:08 - But there is one final tool
that's the most powerful of them all:
00:12 - the ability to find elements
based on any CSS selector.
00:18 - Do you remember CSS selectors?
00:20 - The basic ones were
finding by tag name,
00:24 - or ID
00:26 - or class
00:27 - But there are many
more advanced selectors:
00:30 - descendant selectors, attribute selectors,
combined class plus element selectors--
00:35 - this would be a good time
for you to review CSS selectors
00:38 - if you've forgotten all of those.
00:40 - For example, what if I wanted
to specifically style only the elements
00:45 - with class name "animal"
that are inside a paragraph?
00:50 - Let's stick a `` tag in
and do that.
00:54 - So I would first write `p`,
00:57 - and then a space, to say that
I'm looking inside ``s,
01:01 - and then dot animal to say that
I'm looking for any elements
01:06 - with class name "animal".
01:09 - And I'll just color them red.
01:12 - Beautiful.
01:14 - Now, I could use the same CSS selector
to find those elements in JavaScript,
01:19 - using the
`document.querySelectorAll()` method.
01:24 - So I'll change this line here.
01:30 - And I need to pass the CSS selector
as the argument,
01:35 - as a string in quotes.
01:38 - And there, the paragraph
is about cats again.
01:42 - You could pass any valid
CSS selector to that function,
01:45 - and it will return back
a collection of elements
01:48 - that you can then loop through.
01:50 - Do you remember last time
how we said
01:53 - that `getElementsByTagName()`
returns an HTML collection
01:57 - that looks a lot like an array?
01:59 - Well this method returns a `NodeList`,
which is also a lot like an array,
02:06 - in that we can use the brackets on it,
we can check the length, all of that.
02:12 - And you probably won't run into
the differences between
02:16 - a NodeList and an HTMLCollection
when you're using these methods.
02:20 - But you are welcome to look them up
if you'd like to learn more about them.
02:24 - Okay, now, there's also a method
that will look up CSS selectors,
02:28 - and return only one element,
if you know your CSS selector
02:32 - is only selecting one thing.
02:35 - In practice, it's not really as useful,
02:37 - because you usually have
an ID that you can use in that case.
02:40 - But I'll show it to you just in case.
02:43 - So here, instead of `getElementById`,
I could actually say:
02:46 - `document.querySelector("`
02:48 - and then for the actual query,
to make it be an ID, I just add that hash.
02:53 - Ta-da.
02:54 - So, as you see, this is really similar
to `querySelectorAll()`,
02:57 - except we're only selecting one,
so it's just `querySelector()`,
03:01 - and we just pass in some CSS selector
that we expect to get back one element.
03:06 - So when should you use
each of these tools in your toolbox?
03:10 - The first ones that I showed you
tend to perform better.
03:13 - So I suggest using those when you can.
03:15 - But if you're in a situation where
you need to use a complex CSS selector,
03:19 - and you can't use those,
then `querySelectorAll()` is your friend.
03:24 - Try it out in the next challenge,
03:26 - then get ready to see way more ways
that you can manipulate this webpage.

Cleaned transcript:

You've now got a lot of tools in your toolbox for finding elements. And those will work great a lot of the time. But there is one final tool that's the most powerful of them all the ability to find elements based on any CSS selector. Do you remember CSS selectors? The basic ones were finding by tag name, or ID or class But there are many more advanced selectors descendant selectors, attribute selectors, combined class plus element selectors this would be a good time for you to review CSS selectors if you've forgotten all of those. For example, what if I wanted to specifically style only the elements with class name "animal" that are inside a paragraph? Let's stick a `` tag in and do that. So I would first write `p`, and then a space, to say that I'm looking inside ``s, and then dot animal to say that I'm looking for any elements with class name "animal". And I'll just color them red. Beautiful. Now, I could use the same CSS selector to find those elements in JavaScript, using the `document.querySelectorAll()` method. So I'll change this line here. And I need to pass the CSS selector as the argument, as a string in quotes. And there, the paragraph is about cats again. You could pass any valid CSS selector to that function, and it will return back a collection of elements that you can then loop through. Do you remember last time how we said that `getElementsByTagName()` returns an HTML collection that looks a lot like an array? Well this method returns a `NodeList`, which is also a lot like an array, in that we can use the brackets on it, we can check the length, all of that. And you probably won't run into the differences between a NodeList and an HTMLCollection when you're using these methods. But you are welcome to look them up if you'd like to learn more about them. Okay, now, there's also a method that will look up CSS selectors, and return only one element, if you know your CSS selector is only selecting one thing. In practice, it's not really as useful, because you usually have an ID that you can use in that case. But I'll show it to you just in case. So here, instead of `getElementById`, I could actually say `document.querySelector("` and then for the actual query, to make it be an ID, I just add that hash. Tada. So, as you see, this is really similar to `querySelectorAll()`, except we're only selecting one, so it's just `querySelector()`, and we just pass in some CSS selector that we expect to get back one element. So when should you use each of these tools in your toolbox? The first ones that I showed you tend to perform better. So I suggest using those when you can. But if you're in a situation where you need to use a complex CSS selector, and you can't use those, then `querySelectorAll()` is your friend. Try it out in the next challenge, then get ready to see way more ways that you can manipulate this webpage.
