With timestamps:

00:00 - Okay, so far we've been modifying
a lot of existing elements on the page.
00:06 - But what if we want to add
new elements to the page?
00:09 - We could do that with `innerHTML`,
writing the HTML for the tags
00:15 - inside the string that we
pass in, like we did here.
00:18 - That can get a bit messy though,
especially if you want to create
00:22 - multiple tags with different
attributes, styles, and classes.
00:25 - So instead, we can use a whole suite
of sweet document methods
00:31 - for creating new elements from scratch
and adding them to the page.
00:35 - Let's say that we want to add
an image of a cat to the page,
00:40 - because we just don't
think it has enough yet.
00:44 - The first step is to create
that new `` element, right?
00:48 - We want to create that.
00:50 - So we'll start off by creating
a variable to store it, `catEl`.
00:55 - And then we're going to use
`document.createElement`,
01:00 - and pass in the name of the tag
we're making, `img`.
01:06 - So now you can imagine that the browser
has made an image tag, like this,
01:12 - and it's floating off in space somewhere.
01:15 - The next step is to assign a source to it.
01:19 - So, `catEl.src =`,
01:23 - and let's just grab our source
from up here,
01:29 - and-- oh, we should add an `alt`,
to make this image more accessible--
01:34 - haven't been doing that, and really should
always have `alt` tags` on our images.
01:42 - So now you can imagine that this
`` tag that we've made
01:47 - has a `src`, and it also has an `alt`,
"Photo of cute cat".
01:58 - Okay, so this is what we've made
using this JavaScript here.
02:04 - The `` tag that we made
is still floating off in space,
02:08 - because we haven't
told the browser where to put it.
02:11 - And there's so many different places
in our DOM where it could go.
02:15 - Let's do the easiest thing, and just
make it show up at the bottom of the page.
02:21 - We can do that by sticking it at the end
of the `` tag, so we say:
02:26 - `document.body.appendChild(catEl);`
02:29 - Haha-- there it is!
02:31 - It's quite large as well.
02:32 - Very large cat-- scary.
02:34 - Now you can call `appendChild` on
any existing DOM node in your page,
02:41 - and it will make the passed in element
the final child of that node.
02:47 - This is where it helps to really
visualize the DOM as a tree.
02:52 - The `` tag is a node in that tree,
and it has a bunch of children,
02:57 - like `` and ``,
03:00 - and you're adding one more child
at the end of its children.
03:04 - So, actually it'd be after the
`` tag, right here.
03:09 - Using DOM methods, you should 
theoretically be able to append elements
03:13 - anywhere inside the DOM tree.
03:15 - We just put it in the easiest,
most obvious spot.
03:19 - Okay, let's do one more example.
03:22 - We used `innerHTML` down here, to put
`` tags inside the ``s.
03:28 - Instead, we could use `createElement`.
03:31 - [typing]
03:39 - And I misspelled it,
and spelling is very important.
03:43 - So that creates an empty `` tag,
floating off in space.
03:48 - So, first thing we'll do is
set the text of it,
03:51 - so, `strongEl.textContent = "cat";`.
03:56 - Alright?
03:57 - Alternatively, actually, we could
do this other thing where
04:01 - we create what's known as a `textNode`.
04:04 - Many DOM nodes in the DOM tree can have
special types of nodes, `textNode`s,
04:09 - as their children.
04:10 - And these nodes aren't elements, but they
are still nodes in the DOM tree.
04:14 - We actually call them
"leaf nodes", because they're
04:17 - the very final thing
that can be in a tree.
04:20 - [typing]
04:27 - And we'll just pass in the text, "cat".
04:31 - If we use this technique, we've now
04:34 - created two nodes that are floating
off in space: a `` tag,
04:42 - and then this `textNode`, which
just says "cat".
04:46 - And we need to connect them
up to each other.
04:49 - And we want the ``
to be the parent of "cat".
04:54 - So what we'll do is say
`strongEl.appendChild(strongText);`.
05:03 - Okay, so now we've got
the ``with "cat" inside,
05:12 - and we have to append it where we want,
because it's still floating off in space.
05:18 - We are inside the `for` loop
for `nameEls`, and each `nameEl`
05:24 - is where we want to append
the `` tag.
05:27 - So here,
`nameEls[i].appendChild(strongEl);`.
05:34 - A-ha, and now actually we see it twice,
because I left in the old way.
05:42 - So it's appending to a `` tag
that already has a `` in it.
05:47 - We could change this line to
`innerHTML` equals empty string,
05:52 - which will effectively clear out the span
before we append to it.
05:57 - Now, as you saw, that took way more lines
of code than the `innerHTML` version.
06:04 - So, you know, why did we do it?
06:06 - Well, you know, a lot of developers
don't like modifying the document this way
06:11 - because it does take a lot more code.
06:13 - Most developers actually
use libraries, like jQuery,
06:16 - to do DOM modification for them,
which provides functions that
06:21 - does the same code with a lot less
lines of code for you as the developer,
06:26 - because you're using the
library functions instead.
06:29 - I do kind of like writing my code
this way, because I like that
06:33 - I can see exactly how I'm modifying
the DOM tree, one line at a time.
06:38 - And it feels cleaner than shoving
everything into a string of innerHTML.
06:43 - But maybe you hate it.
06:44 - Either way, now you know it exists.
06:47 - So you can use it if you need it,
and you can understand
06:50 - what libraries like jQuery are
actually doing behind the scenes.

Cleaned transcript:

Okay, so far we've been modifying a lot of existing elements on the page. But what if we want to add new elements to the page? We could do that with `innerHTML`, writing the HTML for the tags inside the string that we pass in, like we did here. That can get a bit messy though, especially if you want to create multiple tags with different attributes, styles, and classes. So instead, we can use a whole suite of sweet document methods for creating new elements from scratch and adding them to the page. Let's say that we want to add an image of a cat to the page, because we just don't think it has enough yet. The first step is to create that new `` element, right? We want to create that. So we'll start off by creating a variable to store it, `catEl`. And then we're going to use `document.createElement`, and pass in the name of the tag we're making, `img`. So now you can imagine that the browser has made an image tag, like this, and it's floating off in space somewhere. The next step is to assign a source to it. So, `catEl.src =`, and let's just grab our source from up here, and oh, we should add an `alt`, to make this image more accessible haven't been doing that, and really should always have `alt` tags` on our images. So now you can imagine that this `` tag that we've made has a `src`, and it also has an `alt`, "Photo of cute cat". Okay, so this is what we've made using this JavaScript here. The `` tag that we made is still floating off in space, because we haven't told the browser where to put it. And there's so many different places in our DOM where it could go. Let's do the easiest thing, and just make it show up at the bottom of the page. We can do that by sticking it at the end of the `` tag, so we say `document.body.appendChild(catEl);` Haha there it is! It's quite large as well. Very large cat scary. Now you can call `appendChild` on any existing DOM node in your page, and it will make the passed in element the final child of that node. This is where it helps to really visualize the DOM as a tree. The `` tag is a node in that tree, and it has a bunch of children, like `` and ``, and you're adding one more child at the end of its children. So, actually it'd be after the `` tag, right here. Using DOM methods, you should theoretically be able to append elements anywhere inside the DOM tree. We just put it in the easiest, most obvious spot. Okay, let's do one more example. We used `innerHTML` down here, to put `` tags inside the ``s. Instead, we could use `createElement`. [typing] And I misspelled it, and spelling is very important. So that creates an empty `` tag, floating off in space. So, first thing we'll do is set the text of it, so, `strongEl.textContent = "cat";`. Alright? Alternatively, actually, we could do this other thing where we create what's known as a `textNode`. Many DOM nodes in the DOM tree can have special types of nodes, `textNode`s, as their children. And these nodes aren't elements, but they are still nodes in the DOM tree. We actually call them "leaf nodes", because they're the very final thing that can be in a tree. [typing] And we'll just pass in the text, "cat". If we use this technique, we've now created two nodes that are floating off in space a `` tag, and then this `textNode`, which just says "cat". And we need to connect them up to each other. And we want the `` to be the parent of "cat". So what we'll do is say `strongEl.appendChild(strongText);`. Okay, so now we've got the ``with "cat" inside, and we have to append it where we want, because it's still floating off in space. We are inside the `for` loop for `nameEls`, and each `nameEl` is where we want to append the `` tag. So here, `nameEls[i].appendChild(strongEl);`. Aha, and now actually we see it twice, because I left in the old way. So it's appending to a `` tag that already has a `` in it. We could change this line to `innerHTML` equals empty string, which will effectively clear out the span before we append to it. Now, as you saw, that took way more lines of code than the `innerHTML` version. So, you know, why did we do it? Well, you know, a lot of developers don't like modifying the document this way because it does take a lot more code. Most developers actually use libraries, like jQuery, to do DOM modification for them, which provides functions that does the same code with a lot less lines of code for you as the developer, because you're using the library functions instead. I do kind of like writing my code this way, because I like that I can see exactly how I'm modifying the DOM tree, one line at a time. And it feels cleaner than shoving everything into a string of innerHTML. But maybe you hate it. Either way, now you know it exists. So you can use it if you need it, and you can understand what libraries like jQuery are actually doing behind the scenes.
