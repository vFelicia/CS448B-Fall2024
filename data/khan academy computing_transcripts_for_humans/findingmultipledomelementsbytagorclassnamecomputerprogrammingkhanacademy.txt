With timestamps:

00:00 - I'm back with my webpage about dogs
that I'm slowly but surely
00:05 - turning into a webpage
all about cats instead.
00:08 - Now, the next thing I want to do
00:11 - is to change all instances
of the word "dog" into the word "cat",
00:15 - and leave the rest of the text the same.
00:17 - How could I do that?
00:21 - Well, we found a heading by ID,
but we can't find these dog words by ID,
00:28 - because there are multiple of them,
and we know we can only have
00:32 - one element with a certain ID on a page.
00:34 - Well, let's look at what else
is similar about them.
00:37 - Each of them are surrounded
by a `` tag.
00:41 - And for each of them, that `` tag
has a class of "animal".
00:46 - So we could either find all the ``
tags, or find all the tags of that class.
00:52 - And now I'll show you
how to do either of those.
00:55 - Let's start with finding
all the `` tags,
00:59 - using a new method:
`document.getElementsByTagName`.
01:03 - Let's go down to our `` tag,
and add a new variable: `var nameEls =`.
01:11 - Notice I put an "s" at the end,
and that helps to remember
01:14 - that I'm storing multiple elements
in this variable, not just one.
01:19 - Now I'm going to use the method
`document.getElementsByTagname`.
01:26 - And now, inside here, in the parentheses,
I need to pass it an argument,
01:30 - which is a string, which should
be the tag name.
01:34 - And the tag name is whatever's
between the angle brackets.
01:38 - So in this case, the tag name is "span".
01:41 - Beautiful.
01:43 - Now, how do I check if it works?
01:45 - Do you remember what we did before?
01:47 - Da-da-da... `console.log`!
01:50 - So we type `console.log`,
and now before you check,
01:54 - let me tell you something about
what you might see in your console.
01:59 - Different browsers will represent
the elements in the console
02:03 - in different ways, since the variable
that you're logging out
02:06 - isn't just one element.
02:08 - It's actually an `HTMLCollection`,
02:10 - which is something that's
a lot like an array,
02:14 - and it lets you access elements by index
using the bracket notation,
02:18 - and find out how many elements are in it.
02:20 - So, your console might show you
something that looks like an array
02:24 - that you can expand
and see all the elements.
02:27 - Or it might show you something
that looks like the HTML for all three.
02:30 - Now, pause the talk-through, and see
for yourself what your console shows.
02:35 - [humming]
02:38 - Okay, so if you want, you could also
log out each element in that collection,
02:43 - by using bracket notation.
02:45 - So you could say `nameEls[0]`.
02:48 - Just like arrays, the first element
is at index zero.
02:53 - So we put zero between the two brackets.
02:56 - Alright, so hopefully you saw that
step one worked, we found the elements.
03:00 - Now, we want to modify them.
03:03 - You might try doing something
like what we did before:
03:07 - `nameEls.innerHTML = "cats";
03:11 - But nothing happened there.
03:14 - That's because we've
set the InnerHTML property
03:17 - on the array of elements,
not each element.
03:21 - So the browser ignores it.
03:24 - Instead, we need to use a `for` loop
to actually get at each element.
03:29 - [typing]
03:35 - That will through all the indices.
03:38 - And then, for each element,
we're going to say:
03:41 - `nameEls[i].innerHTML = "cat"`;
03:46 - Ta-da-- we did it!
03:49 - The cat is now man's best friend,
03:52 - there's almost one billion
cats in the world... wowee!
03:56 - And this is why you should not trust
anything on the Internet, my friends.
04:01 - Okay, the part that worries me
about this approach
04:05 - is that if there were any other
`` tags on the page,
04:09 - it would change those, too.
04:11 - And `` is actually a pretty popular
tag used for a variety of things.
04:16 - It would be safer if we just changed
everything with the `animal` class name,
04:22 - because that seems to be much more
specifically used only for occurences
04:27 - of the animal name.
04:30 - So to do that, all we have to do
is change this method here
04:34 - to a new method, `getElementsByClassName`.
04:39 - And then instead of passing in `span`,
we would pass in the class name: animal.
04:45 - Ta-da!
04:46 - It worked, and we didn't have to change
anything besides that line.
04:51 - Okay, remember, when you're using
these methods, you have to
04:56 - spell them correctly.
04:57 - If you don't, you're either going to
get an error, or it just won't work,
05:01 - and I've seen hundreds of spelling
mistakes with these names.
05:05 - Like this-- that's not going to work.
05:07 - That's not going to work.
05:09 - Make sure you're spelling it correctly.
05:11 - And that's where
console.log is super helpful--
05:14 - to check that you're getting
the expected results at each step.
05:19 - Also remember, `getElementById`
returns only one element,
05:23 - and `getElementsByClassName`, 
or `getElementsByTagName`
05:27 - return multiple elements, so we have to
use a `for` loop to go through them.
05:33 - Alright, you ready to get a few
elements yourself?
05:36 - Go try it out!

Cleaned transcript:

I'm back with my webpage about dogs that I'm slowly but surely turning into a webpage all about cats instead. Now, the next thing I want to do is to change all instances of the word "dog" into the word "cat", and leave the rest of the text the same. How could I do that? Well, we found a heading by ID, but we can't find these dog words by ID, because there are multiple of them, and we know we can only have one element with a certain ID on a page. Well, let's look at what else is similar about them. Each of them are surrounded by a `` tag. And for each of them, that `` tag has a class of "animal". So we could either find all the `` tags, or find all the tags of that class. And now I'll show you how to do either of those. Let's start with finding all the `` tags, using a new method `document.getElementsByTagName`. Let's go down to our `` tag, and add a new variable `var nameEls =`. Notice I put an "s" at the end, and that helps to remember that I'm storing multiple elements in this variable, not just one. Now I'm going to use the method `document.getElementsByTagname`. And now, inside here, in the parentheses, I need to pass it an argument, which is a string, which should be the tag name. And the tag name is whatever's between the angle brackets. So in this case, the tag name is "span". Beautiful. Now, how do I check if it works? Do you remember what we did before? Dadada... `console.log`! So we type `console.log`, and now before you check, let me tell you something about what you might see in your console. Different browsers will represent the elements in the console in different ways, since the variable that you're logging out isn't just one element. It's actually an `HTMLCollection`, which is something that's a lot like an array, and it lets you access elements by index using the bracket notation, and find out how many elements are in it. So, your console might show you something that looks like an array that you can expand and see all the elements. Or it might show you something that looks like the HTML for all three. Now, pause the talkthrough, and see for yourself what your console shows. [humming] Okay, so if you want, you could also log out each element in that collection, by using bracket notation. So you could say `nameEls[0]`. Just like arrays, the first element is at index zero. So we put zero between the two brackets. Alright, so hopefully you saw that step one worked, we found the elements. Now, we want to modify them. You might try doing something like what we did before `nameEls.innerHTML = "cats"; But nothing happened there. That's because we've set the InnerHTML property on the array of elements, not each element. So the browser ignores it. Instead, we need to use a `for` loop to actually get at each element. [typing] That will through all the indices. And then, for each element, we're going to say `nameEls[i].innerHTML = "cat"`; Tada we did it! The cat is now man's best friend, there's almost one billion cats in the world... wowee! And this is why you should not trust anything on the Internet, my friends. Okay, the part that worries me about this approach is that if there were any other `` tags on the page, it would change those, too. And `` is actually a pretty popular tag used for a variety of things. It would be safer if we just changed everything with the `animal` class name, because that seems to be much more specifically used only for occurences of the animal name. So to do that, all we have to do is change this method here to a new method, `getElementsByClassName`. And then instead of passing in `span`, we would pass in the class name animal. Tada! It worked, and we didn't have to change anything besides that line. Okay, remember, when you're using these methods, you have to spell them correctly. If you don't, you're either going to get an error, or it just won't work, and I've seen hundreds of spelling mistakes with these names. Like this that's not going to work. That's not going to work. Make sure you're spelling it correctly. And that's where console.log is super helpful to check that you're getting the expected results at each step. Also remember, `getElementById` returns only one element, and `getElementsByClassName`, or `getElementsByTagName` return multiple elements, so we have to use a `for` loop to go through them. Alright, you ready to get a few elements yourself? Go try it out!
