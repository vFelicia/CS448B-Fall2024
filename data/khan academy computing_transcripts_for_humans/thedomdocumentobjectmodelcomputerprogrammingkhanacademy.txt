With timestamps:

00:00 - Going forward, you're going to hear 
me say a certain acronym a lot: DOM.
00:06 - Dom de dom dom dom
00:09 - DOM stands for 
Document Object Model,
00:15 - and it's the way that browsers 
let us developers
00:18 - manipulate webpages with JavaScript.
00:21 - Whenever a browser loads a webpage,
it parses all the HTML and CSS,
00:26 - and converts the document into a DOM.
00:30 - That DOM is really a 
big JavaScript object
00:33 - that contains everything we'd ever 
want to know or change about a page,
00:37 - like every single tag, and 
attribute and style for each tag.
00:43 - To access the DOM on a 
webpage from JavaScript,
00:46 - we use the global variable `document`,
and then we can use properties
00:52 - and call functions that 
are attached to this object here.
00:57 - The general strategy for 
DOM manipulation is two steps.
01:04 - Let me just make a list of them here.
01:09 - Here we go, and then we 
have the second step.
01:14 - Let's go through each 
of these steps now.
01:17 - So the first step is to find the DOM node
using an access method.
01:23 - If all we're looking for is the 
tag, we can access that really easily
01:28 - just by saying `document.body`.
01:33 - And now the second step is to 
manipulate the DOM node that we found
01:39 - by changing its attributes, 
styles, inner HTML,
01:43 - appending new nodes to it, ... .
01:46 - So if we just want to replace 
the contents of the whole tag,
01:50 - then we can use the 
`innerHTML` property.
01:53 - So `document.body.innerHTML = 
"Webpage be gone!";`
01:58 - Ta da, I did it.
02:01 - The browser is watching for 
changes to the document object,
02:05 - and as soon as it sees you change the 
innerHTML of document.body,
02:10 - it reflects it back in 
the actual document.
02:13 - Remember, the document object 
isn't the actual webpage,
02:17 - but the browser tries to make it reflect
the current page as much as possible.
02:24 - Now, there are a lot more
ways to do step one,
02:28 - because usually you want to find
something besides just the body tag.
02:32 - Maybe you want to find a tag with a 
certain ID, or all tags of a certain type--
02:37 - That's what we'll talk about in 
the DOM access methods tutorial.
02:41 - There's also a lot more cool stuff 
you can do in step two,
02:45 - like changing the attributes 
or styles of the tags you find.
02:49 - We'll talk about all that in the 
DOM modification tutorial.
02:52 - Once you've mastered DOM access and 
manipulation, we'll move on to fun ways
02:57 - to use it, like when responding to 
user events or making an animation.
03:02 - Right now, it is a little silly 
that we use JavaScript to do
03:06 - what we could have just done 
with HTML at the beginning,
03:10 - but trust me, you'll want to master 
DOM access and DOM modification
03:14 - so that you can make full 
interactive experiences later.
03:18 - So, keep it up, and see you soon.

Cleaned transcript:

Going forward, you're going to hear me say a certain acronym a lot DOM. Dom de dom dom dom DOM stands for Document Object Model, and it's the way that browsers let us developers manipulate webpages with JavaScript. Whenever a browser loads a webpage, it parses all the HTML and CSS, and converts the document into a DOM. That DOM is really a big JavaScript object that contains everything we'd ever want to know or change about a page, like every single tag, and attribute and style for each tag. To access the DOM on a webpage from JavaScript, we use the global variable `document`, and then we can use properties and call functions that are attached to this object here. The general strategy for DOM manipulation is two steps. Let me just make a list of them here. Here we go, and then we have the second step. Let's go through each of these steps now. So the first step is to find the DOM node using an access method. If all we're looking for is the tag, we can access that really easily just by saying `document.body`. And now the second step is to manipulate the DOM node that we found by changing its attributes, styles, inner HTML, appending new nodes to it, ... . So if we just want to replace the contents of the whole tag, then we can use the `innerHTML` property. So `document.body.innerHTML = "Webpage be gone!";` Ta da, I did it. The browser is watching for changes to the document object, and as soon as it sees you change the innerHTML of document.body, it reflects it back in the actual document. Remember, the document object isn't the actual webpage, but the browser tries to make it reflect the current page as much as possible. Now, there are a lot more ways to do step one, because usually you want to find something besides just the body tag. Maybe you want to find a tag with a certain ID, or all tags of a certain type That's what we'll talk about in the DOM access methods tutorial. There's also a lot more cool stuff you can do in step two, like changing the attributes or styles of the tags you find. We'll talk about all that in the DOM modification tutorial. Once you've mastered DOM access and manipulation, we'll move on to fun ways to use it, like when responding to user events or making an animation. Right now, it is a little silly that we use JavaScript to do what we could have just done with HTML at the beginning, but trust me, you'll want to master DOM access and DOM modification so that you can make full interactive experiences later. So, keep it up, and see you soon.
