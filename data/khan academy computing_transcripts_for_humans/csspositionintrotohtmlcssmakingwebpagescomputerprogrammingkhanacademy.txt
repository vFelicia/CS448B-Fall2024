With timestamps:

00:00 - - Now we'll learn how to use CSS to
00:02 - really move things around,
00:04 - not just put them next to each other,
00:05 - but actually put things
on top of each other.
00:08 - Here, we have a web page with a few
00:12 - headers and images and
some paragraphs down here
00:17 - and it's currently all laid out
00:19 - with the default positioning strategy,
00:21 - which the browser uses,
00:24 - which we call static
or normal positioning.
00:27 - It just means that inline
elements, like images,
00:30 - are laid out from left to
right and block elements,
00:33 - like headers and paragraphs,
00:34 - are laid out from top to bottom.
00:37 - We can change that positioning strategy
00:39 - using the CSS position property.
00:42 - Let's try it on the landscape image.
00:46 - We'll type position: and
then relative for the value.
00:51 - The relative positioning strategy means
00:53 - position it how you normally would,
00:55 - but then offset it by some amount.
00:57 - Now, to tell the browser what
amount we wanna offset by,
01:01 - we need to use some combination
of four new CSS properties.
01:05 - Top, bottom, left and right.
01:07 - Like, let's say we wanna have it be
01:10 - 20 pixels down, say top:
20px and 10 pixels over,
01:14 - we'll say left: 10px.
01:17 - So, that's kind of neat,
but not really that neat.
01:20 - I wanna show you something way cooler,
01:23 - absolute positioning.
01:25 - We can use it to take an element
01:26 - completely out of the normal flow
01:28 - and put it anywhere on the screen.
01:30 - To do that, I will change
relative to absolute
01:34 - on the landscape and keep the top left.
01:36 - And you can see the image is now
01:38 - hiding our images and dance party heading
01:41 - and now, we're gonna fix that.
01:42 - Let's start with winston.
01:44 - So, add a rule for winston
01:47 - and give winston a position: absolute
01:51 - and then, let me say top: 40 px,
01:55 - so we'll say top: 50px and then,
01:59 - left: 50 px.
02:00 - Okay, that looks good and hopper is
02:03 - really eager to get on top as well.
02:05 - So, let's say hopper also
needs a position: absolute
02:10 - and let's say top: 30px and left: 60px.
02:17 - Okay. So, my goal is to
make it look like hopper
02:21 - is kinda dancing in front of winston.
02:24 - But, right now, it doesn't look that way
02:26 - because winston is being
drawn on top of hopper.
02:30 - To fix this, I could
either change the order
02:33 - of the actual image tags in the html.
02:36 - But, a kinda better way is to
use the CSS z index property.
02:42 - We can use that to tell the browser
02:43 - exactly what order to draw elements in
02:45 - by giving them different z indexes.
02:48 - So, I'll start with the landscape
02:50 - and give it a z-index of 1
02:53 - and then winston goes on top with 2.
02:56 - Hopper goes on top with 3.
02:59 - Alright, now hopper is
dancing in front of winston,
03:02 - even if he doesn't like
that, but have to deal.
03:05 - Now, we still have headings
and poems that are hidden.
03:09 - So, let's see, let's try and get the,
03:12 - maybe I want the Dance Party
to be on top of everything.
03:16 - So, I'm also gonna give
that position: absolute
03:19 - and z-index 4.
03:22 - Okay, it looks good.
03:22 - Maybe left: 10 px, just
move it over a bit.
03:25 - Maybe, maybe a bit more.
03:26 - Alright, that looks good.
03:28 - Now, for the song lyrics,
I actually just want
03:30 - them to display underneath everything.
03:32 - So, for those, I'm
thinking position: relative
03:36 - and then we could just do a top,
03:39 - which is, ya know, kinda
equal height of the image.
03:41 - So, maybe 220px.
03:44 - Alright, so that is looking really good.
03:48 - We've got a crazy dance
party going on now.
03:51 - Now, if you pause the talk-through
03:53 - and try scrolling the page,
03:55 - you'll see that everything
scrolls together
03:58 - and the important thing is that
04:00 - absolute positioning,
04:01 - it's relative to the top of the web page.
04:03 - So, as you scroll down the web page,
04:05 - things that were 10px from the top
04:07 - are going to be moving off screen
04:10 - 'cause you're going farther away
04:11 - from the top of the web page.
04:14 - Another option is fixed positioning,
04:16 - which will actually make it seem like
04:18 - things don't move at all.
04:20 - And, if you wanna try that out,
04:21 - we can just change each
one from absolute to fixed
04:26 - and now, pause and try scrolling.
04:29 - And you'll see that Dance Party
04:31 - just stays in the same place, because now,
04:34 - it's actually relative to the top of the,
04:38 - this screen, the window.
04:40 - Okay, so, we've managed
to use three different
04:44 - position properties to do
some pretty cool stuff.
04:47 - When would we actually use
absolute or fixed positioning?
04:51 - Well, you can use them to
make a game like I did here
04:55 - because you'll want to lay out
04:56 - all the parts of the scene in the browser.
04:59 - But, you can also use
them for normal web pages,
05:01 - like on Khan Academy.
05:02 - We use absolute positioning for the models
05:04 - that we pop up in the middle of the page
05:06 - and used fixed positioning
for the search box
05:08 - on our team page so that it's
always visible as you scroll.
05:12 - You probably won't use
position in every web page.
05:15 - But, when you do use it, you'll
be really happy it exists.

Cleaned transcript:

Now we'll learn how to use CSS to really move things around, not just put them next to each other, but actually put things on top of each other. Here, we have a web page with a few headers and images and some paragraphs down here and it's currently all laid out with the default positioning strategy, which the browser uses, which we call static or normal positioning. It just means that inline elements, like images, are laid out from left to right and block elements, like headers and paragraphs, are laid out from top to bottom. We can change that positioning strategy using the CSS position property. Let's try it on the landscape image. We'll type position and then relative for the value. The relative positioning strategy means position it how you normally would, but then offset it by some amount. Now, to tell the browser what amount we wanna offset by, we need to use some combination of four new CSS properties. Top, bottom, left and right. Like, let's say we wanna have it be 20 pixels down, say top 20px and 10 pixels over, we'll say left 10px. So, that's kind of neat, but not really that neat. I wanna show you something way cooler, absolute positioning. We can use it to take an element completely out of the normal flow and put it anywhere on the screen. To do that, I will change relative to absolute on the landscape and keep the top left. And you can see the image is now hiding our images and dance party heading and now, we're gonna fix that. Let's start with winston. So, add a rule for winston and give winston a position absolute and then, let me say top 40 px, so we'll say top 50px and then, left 50 px. Okay, that looks good and hopper is really eager to get on top as well. So, let's say hopper also needs a position absolute and let's say top 30px and left 60px. Okay. So, my goal is to make it look like hopper is kinda dancing in front of winston. But, right now, it doesn't look that way because winston is being drawn on top of hopper. To fix this, I could either change the order of the actual image tags in the html. But, a kinda better way is to use the CSS z index property. We can use that to tell the browser exactly what order to draw elements in by giving them different z indexes. So, I'll start with the landscape and give it a zindex of 1 and then winston goes on top with 2. Hopper goes on top with 3. Alright, now hopper is dancing in front of winston, even if he doesn't like that, but have to deal. Now, we still have headings and poems that are hidden. So, let's see, let's try and get the, maybe I want the Dance Party to be on top of everything. So, I'm also gonna give that position absolute and zindex 4. Okay, it looks good. Maybe left 10 px, just move it over a bit. Maybe, maybe a bit more. Alright, that looks good. Now, for the song lyrics, I actually just want them to display underneath everything. So, for those, I'm thinking position relative and then we could just do a top, which is, ya know, kinda equal height of the image. So, maybe 220px. Alright, so that is looking really good. We've got a crazy dance party going on now. Now, if you pause the talkthrough and try scrolling the page, you'll see that everything scrolls together and the important thing is that absolute positioning, it's relative to the top of the web page. So, as you scroll down the web page, things that were 10px from the top are going to be moving off screen 'cause you're going farther away from the top of the web page. Another option is fixed positioning, which will actually make it seem like things don't move at all. And, if you wanna try that out, we can just change each one from absolute to fixed and now, pause and try scrolling. And you'll see that Dance Party just stays in the same place, because now, it's actually relative to the top of the, this screen, the window. Okay, so, we've managed to use three different position properties to do some pretty cool stuff. When would we actually use absolute or fixed positioning? Well, you can use them to make a game like I did here because you'll want to lay out all the parts of the scene in the browser. But, you can also use them for normal web pages, like on Khan Academy. We use absolute positioning for the models that we pop up in the middle of the page and used fixed positioning for the search box on our team page so that it's always visible as you scroll. You probably won't use position in every web page. But, when you do use it, you'll be really happy it exists.
