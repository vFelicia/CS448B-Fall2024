With timestamps:

00:01 - - [Voiceover] Let's look
at this line of code here.
00:04 - This, called a jQuery, stores a collection
00:06 - of multiple matched elements.
00:09 - All of the paragraphs on this page.
00:12 - It then uses jQuery to modify each
00:14 - of the paragraphs in the same way.
00:16 - Changing their HTML to the same value.
00:20 - That's cool. But we might,
00:23 - in some cases, want to modify each element
00:26 - slightly differently,
00:28 - depending on what's already inside of it.
00:31 - For example, what if
00:32 - instead of completely replacing
00:34 - the paragraph contents,
we just inserted text
00:37 - at the end of each of them?
00:41 - To do that, we would
need to iterate through
00:43 - each of the matched paragraphs
in the collection somehow.
00:46 - So that we could find out
what was currently in it,
00:49 - and then just add to it.
00:52 - There are two ways to do that.
00:53 - One way is to use a
traditional 'for' loop.
00:56 - Treating the jQuery
collection like an array.
01:01 - To do that, I'm going to start off by
01:03 - storing the collection in a variable.
01:08 - Since I am going to end up referencing it
01:11 - a few times.
01:12 - Then I'll write a
standard 'for' loop like,
01:15 - 'i = 0; 0 < $paragraphs.length; i++)
01:24 - Inside the loop I'll
store the current item
01:27 - in a variable.
01:28 - So 'var element = $paragraphs'
01:34 - is our collection which
we're treating as an array,
01:36 - which means we use bracket notation,
01:38 - and pass in 'i', and that should give us
01:40 - the 'i' element in the collection.
01:45 - This here, this is
actually storing a DOM node
01:49 - because each item in the jQuery collection
01:52 - is actually a DOM node.
01:55 - If we want to be able
to call a jQuery method
01:57 - on the element, then we need to
02:00 - turn it back into a jQuery collection.
02:04 - To do that I can just say
02:06 - '$paragraph =' and then pass 'element'
02:13 - into the jQuery function.
02:15 - That should turn it back
into a jQuery collection.
02:19 - Now finally, I can call
the jQuery method .html
02:25 - on that single paragraph,
02:27 - and I'll set it equal to its current .html
02:32 - + something else. Huzzah!
02:37 - Very nice.
02:40 - Let me just get rid of the previous part
02:42 - where we changed the .html.
02:44 - There.
02:46 - So now we can see those cat paragraphs,
02:47 - and they're the same,
except they each have
02:49 - 'Huzzah!' at the end.
02:53 - There is another way to do it,
02:56 - which is using JQuery's 'each' method.
03:00 - We can call that 'each' method
03:01 - on the collection variables.
03:04 - We can say '$paragraphs.each'.
03:09 - Now we pass it a callback function,
03:12 - that gets called back for every item
03:15 - in the collection.
03:17 - When jQuery calls that callback function,
03:20 - it will always pass it the current index,
03:25 - and the current DOM node.
03:29 - Now we can just take these two lines
03:32 - from the 'for' loop technique
03:35 - and paste them inside
the callback function.
03:37 - Now we have 'Huzzah!', and this
03:39 - changes to 'Wowee!'
03:46 - That works there, and this is using
03:48 - the callback function, which is something
03:49 - that maybe you haven't seen in a while.
03:52 - Maybe you need a little more review on,
03:55 - and that's fine.
03:57 - Basically it looks through each element
04:00 - in the collection, and for each of them
04:02 - it calls that callback function.
04:04 - It'll end up calling this code
04:07 - for each of the elements
in that collection.
04:13 - Now there is another
way using this technique
04:17 - that you can access the current 'element'.
04:23 - That is by referring to
this instead of 'element'.
04:29 - In JavaScript, this is a special keyword
04:32 - that refers to the context of a function.
04:36 - When jQuery calls your callback function,
04:39 - jQuery sets the context
to the current 'element'.
04:43 - Which means that this
will refer to 'element'.
04:47 - To prove it to myself,
I can add this little
04:50 - console.log here.
04:53 - 'element = this'
04:56 - Open up the console, and if you want to
04:57 - prove it to you, you can pause now
04:59 - and do that.
05:02 - Basically this will end up being the same
05:04 - as 'element'.
05:07 - It's up to you if you use element,
05:09 - or if you use this.
05:12 - You now have multiple looping techniques
05:13 - in your toolbox.
05:14 - You'll hopefully recognize them
05:16 - when other developers use them,
05:18 - and figure out which of them
05:19 - you like the most yourself.

Cleaned transcript:

[Voiceover] Let's look at this line of code here. This, called a jQuery, stores a collection of multiple matched elements. All of the paragraphs on this page. It then uses jQuery to modify each of the paragraphs in the same way. Changing their HTML to the same value. That's cool. But we might, in some cases, want to modify each element slightly differently, depending on what's already inside of it. For example, what if instead of completely replacing the paragraph contents, we just inserted text at the end of each of them? To do that, we would need to iterate through each of the matched paragraphs in the collection somehow. So that we could find out what was currently in it, and then just add to it. There are two ways to do that. One way is to use a traditional 'for' loop. Treating the jQuery collection like an array. To do that, I'm going to start off by storing the collection in a variable. Since I am going to end up referencing it a few times. Then I'll write a standard 'for' loop like, 'i = 0; 0 < $paragraphs.length; i++) Inside the loop I'll store the current item in a variable. So 'var element = $paragraphs' is our collection which we're treating as an array, which means we use bracket notation, and pass in 'i', and that should give us the 'i' element in the collection. This here, this is actually storing a DOM node because each item in the jQuery collection is actually a DOM node. If we want to be able to call a jQuery method on the element, then we need to turn it back into a jQuery collection. To do that I can just say '$paragraph =' and then pass 'element' into the jQuery function. That should turn it back into a jQuery collection. Now finally, I can call the jQuery method .html on that single paragraph, and I'll set it equal to its current .html + something else. Huzzah! Very nice. Let me just get rid of the previous part where we changed the .html. There. So now we can see those cat paragraphs, and they're the same, except they each have 'Huzzah!' at the end. There is another way to do it, which is using JQuery's 'each' method. We can call that 'each' method on the collection variables. We can say '$paragraphs.each'. Now we pass it a callback function, that gets called back for every item in the collection. When jQuery calls that callback function, it will always pass it the current index, and the current DOM node. Now we can just take these two lines from the 'for' loop technique and paste them inside the callback function. Now we have 'Huzzah!', and this changes to 'Wowee!' That works there, and this is using the callback function, which is something that maybe you haven't seen in a while. Maybe you need a little more review on, and that's fine. Basically it looks through each element in the collection, and for each of them it calls that callback function. It'll end up calling this code for each of the elements in that collection. Now there is another way using this technique that you can access the current 'element'. That is by referring to this instead of 'element'. In JavaScript, this is a special keyword that refers to the context of a function. When jQuery calls your callback function, jQuery sets the context to the current 'element'. Which means that this will refer to 'element'. To prove it to myself, I can add this little console.log here. 'element = this' Open up the console, and if you want to prove it to you, you can pause now and do that. Basically this will end up being the same as 'element'. It's up to you if you use element, or if you use this. You now have multiple looping techniques in your toolbox. You'll hopefully recognize them when other developers use them, and figure out which of them you like the most yourself.
