With timestamps:

00:00 - i've set up two tables in this database
00:02 - that are just like the ones from the
00:04 - article there's a students table with
00:06 - detailed information about each student
00:08 - and a student grades table with the
00:10 - student id test and test grade
00:14 - now if we just
00:15 - selected from student grades
00:18 - we'd see
00:19 - student id test and grade
00:22 - but i don't want to see that i want to
00:23 - see the student's first name their last
00:25 - name and their test and their grade
00:26 - because i think of the students as
00:28 - having names not ids
00:31 - now as you've probably figured out the
00:33 - student id in the grades table
00:35 - is related to the id
00:38 - of each row in the students table
00:40 - so we just need some way to bring these
00:42 - two tables together
00:44 - and we can do that with joins
00:46 - so
00:47 - there are various ways that we can join
00:49 - tables in sql and we're going to try out
00:51 - a bunch of those right now
00:54 - so the simplest way is called a cross
00:57 - join
00:59 - and i can do that just by saying select
01:02 - star from
01:03 - and then putting
01:04 - both of the table names
01:07 - after here
01:09 - now that join returned the cartesian
01:13 - product of all the rows
01:15 - and you might remember that concept from
01:16 - math class
01:18 - basically for every row in the first
01:20 - table it creates a row for each row in
01:23 - the other table
01:25 - and we end up with eight rows since it's
01:27 - creating
01:27 - four rows for each of these two rows
01:31 - that's a simple join to do but it's also
01:33 - the least useful
01:35 - because
01:36 - it's matched everything with everything
01:38 - but really we only want the rows
01:41 - matched together
01:42 - if the student id
01:45 - matches the id of the student row
01:48 - so we can do that
01:50 - with the inner join which is the super
01:53 - useful join
01:54 - inner join
01:56 - okay so
01:57 - one way to do an inner join
01:59 - is that we're going to do what we did
02:02 - before
02:03 - with the two table names
02:05 - and then we're adding a where
02:08 - and the where is going to do that
02:11 - checking
02:12 - to see that the student id
02:14 - matches
02:16 - the student site grade student id so
02:18 - it's basically taking that cartesian
02:19 - product and filtering it down to the
02:22 - rosette match and there we have it that
02:24 - is what i want
02:26 - so that worked
02:28 - um this is called an implicit
02:31 - inner join
02:33 - and it works but it's also not
02:34 - considered best practice
02:36 - so i'm going to show you another way of
02:39 - getting the same result called an
02:41 - explicit inner join
02:43 - and that's actually using
02:45 - the join keyword
02:48 - so for that we're actually going to
02:50 - start
02:51 - and just have one table name after the
02:54 - firm so from students
02:56 - join
02:57 - student grades
02:59 - on
03:01 - students.id
03:03 - it's the same check as before
03:05 - studentgrades.student
03:07 - id
03:09 - same results but this is best practice
03:11 - using that join making it explicit
03:15 - great
03:16 - so now that i have those tables joined
03:19 - i can
03:20 - filter down these results whittle down
03:22 - the column names to just the ones that i
03:25 - care about so i
03:27 - want
03:28 - their
03:29 - first name
03:30 - their last name
03:33 - the test
03:34 - and the grade
03:37 - great
03:38 - and we can use on these join queries we
03:40 - can use any of the other things we've
03:41 - learned before we can use where we can
03:43 - use group by like for example if i
03:46 - want to filter down the results to just
03:49 - grades
03:50 - greater
03:51 - than 90. we can say where
03:54 - grade
03:55 - greater than 90.
03:57 - and now i can email the students and
03:59 - give them a little virtual high five
04:02 - okay
04:03 - so
04:04 - looking here see how we have these
04:06 - column names
04:07 - and we're pulling out these column names
04:09 - from two different tables
04:11 - and this is working because we have two
04:13 - different column names in each of the
04:14 - tables so it assumes when it sees first
04:17 - name it must be from the students table
04:19 - but what would happen if there was
04:21 - a grade column in both tables like maybe
04:25 - we had an overall grade in the students
04:27 - table then it would get confused and it
04:30 - could pick out the one from students it
04:32 - could pick out the one from student
04:33 - grades
04:34 - so in fact what would be safer is to
04:37 - explicitly tell sql where we're getting
04:40 - these from so we can say students dot
04:43 - so we're just adding a prefix in
04:46 - students dot and then this one is from
04:48 - student grades
04:50 - and this one is also from student grade
04:52 - so now it knows exactly where it's
04:54 - pulling those column names and it's not
04:56 - ambiguous at all
04:58 - we always like to be not ambiguous when
05:00 - we can when we're making these scripts
05:02 - and programs
05:04 - all right so that is our basic inner
05:06 - join and it's what you'll use for most
05:08 - of your joints across related tables in
05:10 - life
05:12 - stay tuned and i'll show you one other
05:14 - type of joint maybe two

Cleaned transcript:

i've set up two tables in this database that are just like the ones from the article there's a students table with detailed information about each student and a student grades table with the student id test and test grade now if we just selected from student grades we'd see student id test and grade but i don't want to see that i want to see the student's first name their last name and their test and their grade because i think of the students as having names not ids now as you've probably figured out the student id in the grades table is related to the id of each row in the students table so we just need some way to bring these two tables together and we can do that with joins so there are various ways that we can join tables in sql and we're going to try out a bunch of those right now so the simplest way is called a cross join and i can do that just by saying select star from and then putting both of the table names after here now that join returned the cartesian product of all the rows and you might remember that concept from math class basically for every row in the first table it creates a row for each row in the other table and we end up with eight rows since it's creating four rows for each of these two rows that's a simple join to do but it's also the least useful because it's matched everything with everything but really we only want the rows matched together if the student id matches the id of the student row so we can do that with the inner join which is the super useful join inner join okay so one way to do an inner join is that we're going to do what we did before with the two table names and then we're adding a where and the where is going to do that checking to see that the student id matches the student site grade student id so it's basically taking that cartesian product and filtering it down to the rosette match and there we have it that is what i want so that worked um this is called an implicit inner join and it works but it's also not considered best practice so i'm going to show you another way of getting the same result called an explicit inner join and that's actually using the join keyword so for that we're actually going to start and just have one table name after the firm so from students join student grades on students.id it's the same check as before studentgrades.student id same results but this is best practice using that join making it explicit great so now that i have those tables joined i can filter down these results whittle down the column names to just the ones that i care about so i want their first name their last name the test and the grade great and we can use on these join queries we can use any of the other things we've learned before we can use where we can use group by like for example if i want to filter down the results to just grades greater than 90. we can say where grade greater than 90. and now i can email the students and give them a little virtual high five okay so looking here see how we have these column names and we're pulling out these column names from two different tables and this is working because we have two different column names in each of the tables so it assumes when it sees first name it must be from the students table but what would happen if there was a grade column in both tables like maybe we had an overall grade in the students table then it would get confused and it could pick out the one from students it could pick out the one from student grades so in fact what would be safer is to explicitly tell sql where we're getting these from so we can say students dot so we're just adding a prefix in students dot and then this one is from student grades and this one is also from student grade so now it knows exactly where it's pulling those column names and it's not ambiguous at all we always like to be not ambiguous when we can when we're making these scripts and programs all right so that is our basic inner join and it's what you'll use for most of your joints across related tables in life stay tuned and i'll show you one other type of joint maybe two
