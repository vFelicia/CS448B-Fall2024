With timestamps:

00:00 - A form is a way for a webpage
to send information to a server.
00:05 - We don't let the webpages here
on Khan Academy interact with servers
00:09 - for security reasons.
00:11 - So we don't teach forms here.
00:13 - But, now that you are learning JavaScript
to manipulate webpages,
00:16 - I can show you how to use JavaScript
to process form elements
00:20 - instead of having to
send them to a server.
00:23 - I've set up a bunch of form elements
on this page to find out the user's name,
00:28 - and their language.
00:30 - And I want the webpage to say hello
to the user in their language
00:34 - once they click this button.
00:36 - The first step is to store
the button element in a variable.
00:41 - So we'll just say:
`document.getElementById("button")`.
00:49 - The next step is to define
the event listener function.
00:53 - `var onButtonClick = function() {`
00:57 - and then inside of here, we'll just start
with having it append a message.
01:03 - So,
`document.getElementById("message")`,
01:08 - we have a nice little message `div`.
01:10 - And we'll just: `textContent +=
"You clicked me! Thank you so much!"`
01:20 - A very grateful div!
01:23 - Finally, step three, we will
add the event listener to the button
01:28 - so that it calls that function
when it's clicked.
01:31 - so, `("click", onButtonClick)`.
01:36 - Pause the talk-through now, and see for
yourself that it works like you expected.
01:42 - Now, let's make it actually say something
based on what's in the form.
01:47 - We need to figure out how to get whatever
the user typed in the name input field.
01:52 - Let's make a variable for it.
01:55 - So,
`var name = document.getElementById`,
02:04 - since it had an ID,
02:07 - so we've got that there.
02:11 - Let's make a new string for the greeting,
and concatenate the name of it,
02:17 - so `var greeting = "Heyaz"`,
that's my favorite greeting,
02:22 - ` + name`.
02:24 - Okay, so we've got a string, plus
whatever's being stored in that variable.
02:30 - And now, this here, this text content,
should actually be `greeting`.
02:38 - Let's see, that looks right--
02:41 - we found the name input, 
we made a greeting string,
02:44 - and we appended it to the div.
02:47 - Pause the talk-through,
and see if it worked.
02:53 - Not quite, right?
02:55 - Did you see "Heyaz [object Object]", or
"Heyaz object Element"?
03:01 - Assuming that your name isn't Object--
03:04 - and no offense if it is,
that's a great name--
03:08 - that means that something's wrong.
03:10 - We expected to see whatever you typed in.
03:13 - But we saw "object" instead.
03:16 - That means that the `name` variable
is pointing at an object,
03:20 - not the string we expected it to point at.
03:23 - Maybe you've already
figured out the problem.
03:26 - We stored the whole element object
inside the `name` variable.
03:31 - And the element object is a big object
03:34 - with lots of information
about the element:
03:37 - all of its attributes, all of its methods.
03:39 - To find out what the user typed in,
we have to access a particular property
03:43 - of the element: the value.
03:46 - I'll just go ahead and type `.value`,
and that should fix it.
03:51 - Pause the talk-through, try again.
03:56 - It worked, right?
03:57 - Now that's a common mistake to make,
so look out for it.
04:01 - I want to show you
one more common mistake.
04:05 - I'll take this line here, and move it
outside of the function.
04:13 - Now, pause the talk-through,
type in the input, and press the button.
04:22 - If it broke the way it should,
then you should have seen
04:25 - an empty string for your name.
04:28 - Have you figured out why?
04:29 - You have to think carefully about
when each line of code is executed.
04:33 - In the current code,
the browser loads the page,
04:37 - and executes the JavaScript line-by-line.
04:39 - First, it stores
the button element in a variable.
04:42 - Then, it stores the value of
the input element in the variable.
04:46 - But it stores the value
at the time that the page loads--
04:50 - which would be empty.
04:52 - Then, it defines a function and
assigns the event listener.
04:56 - When the listener is called,
the name is still the same string
05:00 - as it was when the page loaded.
05:02 - So the listener never finds out
the latest thing that the user typed.
05:06 - That's why this line of code
05:08 - has to be inside
this event listener function,
05:13 - so that it finds out the value
at the time that the event happens.
05:18 - Let's add some code to look at
the language value now,
05:21 - to make sure you're really getting this.
05:24 - Inside the listener, I'll store
the language in a `lang` variable.
05:31 - Ugh, look at this indenting,
this is horrible.
05:34 - Let's just line these things up.
05:36 - Okay, so...
05:38 - [typing]
05:46 - And you'll notice that I am naming
my variables the same thing as my IDs,
05:51 - but that's just what I'm doing,
you don't have to do that.
05:55 - Now I want to output a different message
based on what language they picked.
05:59 - Notice the value isn't
what's shown in the drop-down.
06:03 - It's the value attribute in the HTML.
06:06 - So `lang` should be either
"en", "es", or "plt".
06:11 - So that means:
`if (lang === "es")`,
06:17 - then the greeting should be "Hola,".
06:23 - Let's go ahead and make this 
`greeting` variable here.
06:26 - So then `greeting` will be
"Hola, " plus the name.
06:35 - And then if the lang equals "plt",
good old Pig Latin,
06:41 - the greeting should be,
"Ello-hey, " plus the name.
06:48 - and then we can just
use an `else` for our English.
06:53 - I'll just move this in here.
06:55 - All right.
06:56 - Ooh, and if you want a
fun bonus challenge,
07:00 - try making a Pig Latin
converter for names,
07:03 - so that the entire greeting,
including their name gets translated.
07:07 - That'd be pretty neat.
07:10 - Now pause the talk-through,
enter your name,
07:13 - pick a different language, and try it out.
07:19 - Neat, huh?
07:20 - Now, there's a lot of stuff you can do
with form inputs and a little JavaScript:
07:24 - word games, number games,
story makers...
07:27 - and if you do have a server
outside of Khan Academy,
07:30 - you can use JavaScript to do
pre-processing on form input
07:33 - before sending it to a server.
07:35 - There are also a lot more events
you can listen to on forms,
07:38 - like keypress and focus events.
07:40 - Just remember to look at
the value of the inputs,
07:44 - and to check that value at the right time.
07:47 - You'll get to practice that
in the next challenge,
07:50 - which is a personal favorite of mine.

Cleaned transcript:

A form is a way for a webpage to send information to a server. We don't let the webpages here on Khan Academy interact with servers for security reasons. So we don't teach forms here. But, now that you are learning JavaScript to manipulate webpages, I can show you how to use JavaScript to process form elements instead of having to send them to a server. I've set up a bunch of form elements on this page to find out the user's name, and their language. And I want the webpage to say hello to the user in their language once they click this button. The first step is to store the button element in a variable. So we'll just say `document.getElementById("button")`. The next step is to define the event listener function. `var onButtonClick = function() {` and then inside of here, we'll just start with having it append a message. So, `document.getElementById("message")`, we have a nice little message `div`. And we'll just `textContent += "You clicked me! Thank you so much!"` A very grateful div! Finally, step three, we will add the event listener to the button so that it calls that function when it's clicked. so, `("click", onButtonClick)`. Pause the talkthrough now, and see for yourself that it works like you expected. Now, let's make it actually say something based on what's in the form. We need to figure out how to get whatever the user typed in the name input field. Let's make a variable for it. So, `var name = document.getElementById`, since it had an ID, so we've got that there. Let's make a new string for the greeting, and concatenate the name of it, so `var greeting = "Heyaz"`, that's my favorite greeting, ` + name`. Okay, so we've got a string, plus whatever's being stored in that variable. And now, this here, this text content, should actually be `greeting`. Let's see, that looks right we found the name input, we made a greeting string, and we appended it to the div. Pause the talkthrough, and see if it worked. Not quite, right? Did you see "Heyaz [object Object]", or "Heyaz object Element"? Assuming that your name isn't Object and no offense if it is, that's a great name that means that something's wrong. We expected to see whatever you typed in. But we saw "object" instead. That means that the `name` variable is pointing at an object, not the string we expected it to point at. Maybe you've already figured out the problem. We stored the whole element object inside the `name` variable. And the element object is a big object with lots of information about the element all of its attributes, all of its methods. To find out what the user typed in, we have to access a particular property of the element the value. I'll just go ahead and type `.value`, and that should fix it. Pause the talkthrough, try again. It worked, right? Now that's a common mistake to make, so look out for it. I want to show you one more common mistake. I'll take this line here, and move it outside of the function. Now, pause the talkthrough, type in the input, and press the button. If it broke the way it should, then you should have seen an empty string for your name. Have you figured out why? You have to think carefully about when each line of code is executed. In the current code, the browser loads the page, and executes the JavaScript linebyline. First, it stores the button element in a variable. Then, it stores the value of the input element in the variable. But it stores the value at the time that the page loads which would be empty. Then, it defines a function and assigns the event listener. When the listener is called, the name is still the same string as it was when the page loaded. So the listener never finds out the latest thing that the user typed. That's why this line of code has to be inside this event listener function, so that it finds out the value at the time that the event happens. Let's add some code to look at the language value now, to make sure you're really getting this. Inside the listener, I'll store the language in a `lang` variable. Ugh, look at this indenting, this is horrible. Let's just line these things up. Okay, so... [typing] And you'll notice that I am naming my variables the same thing as my IDs, but that's just what I'm doing, you don't have to do that. Now I want to output a different message based on what language they picked. Notice the value isn't what's shown in the dropdown. It's the value attribute in the HTML. So `lang` should be either "en", "es", or "plt". So that means `if (lang === "es")`, then the greeting should be "Hola,". Let's go ahead and make this `greeting` variable here. So then `greeting` will be "Hola, " plus the name. And then if the lang equals "plt", good old Pig Latin, the greeting should be, "Ellohey, " plus the name. and then we can just use an `else` for our English. I'll just move this in here. All right. Ooh, and if you want a fun bonus challenge, try making a Pig Latin converter for names, so that the entire greeting, including their name gets translated. That'd be pretty neat. Now pause the talkthrough, enter your name, pick a different language, and try it out. Neat, huh? Now, there's a lot of stuff you can do with form inputs and a little JavaScript word games, number games, story makers... and if you do have a server outside of Khan Academy, you can use JavaScript to do preprocessing on form input before sending it to a server. There are also a lot more events you can listen to on forms, like keypress and focus events. Just remember to look at the value of the inputs, and to check that value at the right time. You'll get to practice that in the next challenge, which is a personal favorite of mine.
