When we write code, we're writing in a language that a computer can understand. Now fellow programmers can also understand that language but it's not our native language and honestly, some code just looks weird. And sometimes you'll look at code and you'll think, what? And you wish that you had the original code creator there to explain it to you. Well luckily, that's where comments come in. A comment is just a bit of text in our program that the computer completely ignores and is just there for other humans to look at, like you and me? You are human, right? In JavaScript, we write a single line comment by starting the line with two slashes and everything comes after we consider a comment until there's a new line, right? And we can write anything in whatever language we want. And we can have a little comment part here, right? Keep going, going, going, going. So that's cool but if our comment gets really long, you might wanna actually do what's called a multiline comment. So to do that we start off with a slash and a star and you know maybe I'll write a poem here. So roses are red, next line. Violets are blue. Comments are cool, and so are you. Very nice. Notice how our comments are both colored green. That's good, that's a sign that the program knows it's a comment, it colors it green. But notice how everything else is green too. That means that we've managed to turn our entire program into a comment which is bad because we want our program to be code. And we also get an error here that says unclosed comment. So all these signs mean that uhoh, I started multiline comment and I didn't finish it. No problem, just do a star and a slash. That'll finish the comment and everything will be beautiful again. Alright so back to the point. Comments are not just for me to write ridiculous things or amazing poetry. They're a way for us to describe our code to other humans because we want them to understand it as well as we did. So for example, let's look at a cool program. This is a bouncing ball program, right? And it's a pretty cool program and it's the kind of program that I'd really like to modify and spin off and do my own thing with because there's a lot of things I can imagine doing with this bouncing ball. Right, maybe turning into a bouncing penguin. But when I look at the code I don't quite understand it. There's a lot of math going on and I'm not sure what it's calculating and where it's getting these formulas from. So if I wanted to understand it, I'd have to go through line by line and tinker things and try and figure it out. Now what would happen if it was written with comments? Tada, magic. So now we have the same program with comments. So you can see how the program starts off with this general comment at the top that describes the purpose of the program and then throughout the program there's these single line comments that describe things like what these variables are, like the initial variables are the time and the height. And then we got three lines of comments about this formula here because it's really important because this is what determines the y position of the ball. And here we can see it's actually calculating this parabola based on velocity and acceleration. So now that I see this comment, it's actually really easy for me to change this code here and say, oh okay, well what happens if we gave the ball higher initial velocity? Huh huh, well it's gonna go a lot higher, awesome. So you can see that as soon as I saw comments in the code, I was able to understand the program much faster and modify it much more easily. So they're cool, right? Now let's just go over what the nice parts about comments are and why you should be doing them in your code. Alright, so first of all, if you put comments in your code, you'll help other people learn from your code and that's something that we're really into here at Khan Academy, right? Second of all, if you put comments in your code, you make it easier for other people to fix bugs in your code or add new features. And that's something you probably want too, right? If somebody sees something in your program and they think, "Oh it would be really cool if it did this", and if they actually understood your program, they can actually add that and say like, "Hey I took your program and I added it" and then you can, you know, have a better program because of that, so that's really cool. But you don't just have to have comments when you're working with other people. Even when you're working with yourself because you're a human too. So if you write comments in your code, you'll make it much easier for yourself to understand your own code. And you might think to yourself right now that oh, you understand your code perfectly, but trust me, just wait a month, wait a year, wait 15 years. You're gonna look at your code and you're gonna think, what, what did I do? And you're gonna wish that you wrote comments in your code. So just comment your code now and it'll help you and it'll help everybody else. So hopefully that's convinced you to comment and now you might be asking like okay, when should I comment? You know, where should I put comments in my code? What line should I comment? So that's a really good question and there's no right or wrong answer. What I would do is start off at the beginning of the program and do this general description of the program here, right? And then I would go through the program and pretend that I was explaining it to someone, and if I got to a line that wasn't obvious, I might add a comment there to try and explain it more. So you don't have to comment every line in this program. You just comment the things that you think might not be obvious, right? And everyone will be a lot happier because of that. So go forth, comment!