Do you remember why I originally started the crocodilization of this web page? It was because I have a deep fear of crocodiles. Well, I think that I'm ready to tackle my fear even more, to bring even more crocodiles onto this page. Well, how is that even possible? I think it would be really fun if I could just cover a web page with crocodile images wherever I click my mouse, so that's what we're going to do. Now, I've written this plan in pseudocode in the script tag here. If you've never used pseudocode, it's like a more humanfriendly version of code. I find it helpful to write out my plan in pseudocode first, especially for more complex interactions that I want to implement. Now, I'm going to convert this pseudocode to real code. Okay, so the first thing, when the user clicks on the page. So, I want to know whenever the user clicks anywhere on the page. To do that, I can attach an event listener to the entire body tag, "body" then we use the 'on' method, and we give it the event name "click", and then we pass it a callback function. Now, inside that callback function, I want to create a new image. So, I'll store it into a variable. '$img =' then we pass in the image tag, and then we need to change the source of it, and I'll use the source up here, and then I'll set the width of it to 100, and then, of course, we need to attach this somewhere to the page, so I'll just append it to the body. There we go. So, currently, if I click, I'll just see this crocodile image appear at the end of the page. If you want, you can pause and see that happen for yourself, too, but I want to position that image according to where the click happened on the page. How do we know where the click happened? Well, whenever a mouse event happens, the browser gives the page that information, and jQuery stores it inside a jQuery event object. So, where is that event object? Well, jQuery actually passes it to our callback function as the first parameter. I'll give it a name so I can access it by name inside the callback function. Now, sometimes I like to log out my event to inspect all its properties before I use it just to see what I'm dealing with. If you pause the talkthrough and click the page, you should see a jQuery event object logged out with a long list of interesting properties. You can also look at the jQuery documentation to see what properties to expect and what they actually mean The two properties that I'm interested in are pageX and pageY, as those tell me the position of the click relative to the page, and I can use them to position my image with CSS. So, first, I need to make sure to set my CSS position property to absolute. If you don't remember CSS absolute positioning, you look back in the HTML/CSS course. Now I'm going to actually position it according to the mouse position. So, I'm going to do the top equal to 'event.pageY' so we're accessing the pageY property of the jQuery event object that gets passed to our callback function, and then I'm going to set the left to 'event.pageX' Oh, and I should also add a unit, px, because CSS expects us to give a unit so that it knows which unit to use or if you're doing percentages, or, you know, what you're doing, so we're doing pixels, because that's what the pageY and pageX are representing. They're representing pixels. Okay, now, try, this is a cool part. Pause the talkthrough; click the page. It's pretty cool, crocodiles everywhere, and I actually like looking at them; I'm not afraid. So, the event object can be pretty useful. We can use it for cases like this when we need to find out the mouse position, like painting apps, point and click games, drag and drop interfaces. We can also use the event object to find out what keys were presses when an event happens so we can make keyboardcontrolled apps like sidescrolling games and online code editors, like this one. Pretty neat.