[Voiceover] Let's turn a drawing into an animation. I've created this program which draws a red car against a bright blue sky. I have one variable in this program, 'x.' And I start that variable at 10. 'x' stands for the the x position of the car, and I use it when I draw the car body, these two rectangles. I also use it when I draw the car wheels, these two ellipses. So, let's see what happens when I change 'x.' Oh, the car is moving across the screen. (makes triumphant vocal music sounds) But it's not really an animation. It would only be an animation if the car moved without me having to change the code. It'd be an animation if anybody could see our program, not have to change the code, and they would just see the car move in front of them. So how do we really make this an animation? Well, we need to somehow get this programming environment to make new drawings many times a second. And for those drawings to have a different 'x' value each time. I'll show you how we can do that. At the bottom of my program, I'm going to type 'draw =' And then it autocompleted the rest for me. You probably haven't seen this syntax before. This is a function definition. And we're going to go deep into that in the functions tutorial later. But basically, a function makes it easy for us to group a bunch of code together so that the program knows to run all that code together. So we're going to end up putting multiple lines of code inside here. The 'draw' function is a special function. So we define a function called 'draw' in our program, the programming environment, on Khan Academy, will then run the code inside 'draw' repeatedly. Many times a second. So all lines of code inside here will be run repeatedly. Everything that's not inside this function, so all of this, will only get run once when the program first loads. So we want to get our car code inside of this function. I'm going to select all of it, and cut it. Paste it in here. Then I'm going to indent it so that it really looks like it's inside the function in between these curly braces here. Alright, now everything looks the same as it was before. Well, it looks the same. It actually isn't the same. We are now actually having our car drawing drawn over and over many time a second. But it looks the same because it's always getting drawn in the same spot. Right? Because 'x' is 281. And that 'x' gets fed into this 'rect' in these ellipses. And the 'x' stays 281 every single time. So that car is not going to move. It's just going to stay there. We want the car to be in a new spot every time. Conceptually, we want to be able to tell the program, "Let's start the car's 'x' position at 10, "and then add one to that position "in every drawing of the animation." To do that, I'm going to move the 'x' variable outside of the draw function, up here. Set it back to 10. Now, since this is outside the 'draw' function, this line of code will get run once at the beginning of the program, setting 'x' to 10. Now, inside 'draw' at the very end, I'll add a line of code to add one to that variable. 'x = x + 1' Ha ha! It's moving! Alright. It's a little smeary. So it looks more like paint than a car. The reason it's smearing is because we're telling the program to redraw the car each time, but it's redrawing it on top of the car from before, because it's sill there. If we want the program to erase the car from before, then what we can do is take the 'background' call and move it inside of 'draw.' Let me just press restart, and there you go. A car going across a screen. Ha ha. What if I wanted a faster car? In that case I could just add more, more to 'x.' Like if I want it to jump by 10 pixels every time. Just restart. Woohoo! Zoomy, zoomy, zoomy! I could even, I could make it negative and make it go in reverse. So let's try that. Oh! There is went. Off the screen. So, as you can see, I can change the way that I'm modifying the 'x' each time to make the car change, you know the drawings of the car change differently in each frame of the animation. So, I did that quickly. Let's review how this program works. At the beginning, outside of the 'draw' function, I declare my variable, and I set it to 10. I then define the 'draw' function, and I put a bunch of drawing code inside of it. At the end of the function, I add some amount to 'x.' And when the programming environemnt sees that I define the 'draw' function, it knows that it should run the code inside the function over and over many times a second. That is how we do animations in the processing JS environment on Khan Academy. Now, you'll get a chance to try animating a drawing yourself. Ready, set, animate!