I'm back with my related tables about students with the students, and the student grades. And I added a new table to keep track of what projects students are working on. And once again this one has a `student_id` to relate it to the `students` table, just like `student_grades` had. And it also has a `title` for each project. Now what I want is a list of student names and the projects they're working on. So that means I need to join `student_projects` with `students`. We can do that, as you can probably guess, using an `INNER JOIN` that we just learned. So what do we want? So we want `students.firstname`, we want `students.lastname`, we want the title of the projects from the student_projects table, and then we'll say `FROM students JOIN student projects` and `ON students.id = studentprojects.studentid`. All right, so I see one project, Peter, and his very promising carrotapault experiment. But where is my other student, Alice? Well we're missing Alice because an `INNER JOIN` only creates rows if there are matching records in the two tables. There's no row for Alice, because there's no row in `student_projects` that has Alice's student ID in it. And this makes sense, and often times with joins, we do only want rows where the records matched. But in this case, we want a comprehensive list of every student and their project, and we want every student to be on that list, even if they don't have a project yet. And that is where an `OUTER JOIN` is super useful. And it's really easy to use. We're just going to go right here and type `LEFT OUTER`. Tada! Now we see Alice, and there's a big old `NULL` for the project title. Okay, so how this works is that the `LEFT` tells SQL that it should make sure to retain every row from the left table, which is the one after the `FROM`, `students`. And the `OUTER` tells it that it should retain the rows even if there's no match in the right table, which is `student_projects`. And that's our outer join, and there's a lot of cases where you might find you want an outer join. And just keep in mind the behavior of inner versus outer joins. There are also some other outer joins. There's a `RIGHT OUTER JOIN`, and it basically does the opposite, makes sure that it keeps everything from the right and then joins with the left. We don't actually support right outer joins here, but if you want that, you can just switch the table order and it's the same thing. So you don't actually need to have a `RIGHT OUTER JOIN`, you can always use `LEFT OUTER JOIN`. And there's also something called a `FULL OUTER JOIN`, and that matches rows, if it can, on both the left and the right side, and fills in `NULL`s when it can't on either side. And that's pretty interesting, but also is not supported in our environment here. And that is one of the interesting things about learning SQL I'm showing you lots of things that work here, and work in other SQL environments, but every environment is a little different, so you'll constantly be tweaking the tools in your SQL toolbox for each new environment. And that's true about a lot of things with computers honestly. You'll learn the general techniques, and then learn how to adapt it for a specific language, or app, or environment. And you basically just get really good at learning. So yay! [LAUGH]