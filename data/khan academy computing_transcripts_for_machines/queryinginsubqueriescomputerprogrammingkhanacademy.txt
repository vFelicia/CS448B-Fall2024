I'm back with my table of exercise logs, and I've added a few more rows. Now, if I wanted to fliter these logs to just show my biking logs, I could just add `WHERE type = "biking";`. Simple. It's getting sunny outside, so actually what I want to find is all of the outdoor activities, not just biking. So to do that, I can use the `OR` operator that we just learned, checking each of the different outdoor types. `type = "hiking" OR type = "treeclimbing" OR type="rowing";` Unfortunately, I don't yet have a mountain, or a tree, or a lake in my home, so all of these are outdoor activities. All right, so that worked, but there is actually a simpler way to do this query, and that's using the `IN` operator. The `IN` operator will check to see if a particular value is in a list of values. Let me show you. So we'll take this query, and I'll paste it, and then I'm going to replace this equals sign with `IN`, and then put a parenthesis, and then I'm just going to separate each of these strings with a comma, instead of that whole long `OR type = "blah";`. Tada! Same results, like we expected, but this query is easier to read and it's a bit shorter, too. We could easily also do the inverse query, if we just want to see the indoor activities. We just write`NOT IN`, ha. So that's just dancing, and I'll save that for the wintertime. Let's change it back to `IN`, and our outdoor activities, and I'm going to show you something a little more interesting that we can do with `IN`. First, I'm going to need another table, of doctor recommended activities. I'll paste in the SQL for that let's see, where do we have it? Here. So, here we've created a table of doctor recommended activities which just has a `type`, which matches our type from up here, and a `reason`, which is why the doctor recommended it. Now, what if I wanted to see all of my exercise logs that correspond to doctor recommended activities? Well first, I might want to see, what are those doctor recommended activities? So, `SELECT type FROM drs_favorites;`. Okay, biking and hiking. So, I could just take this query, and modify it, and just shorten it to biking and hiking. However, if the `drs_favorites` tables changed like, there was a new row added, or a row deleted then this query would be out of date. What I want is for this query to always be up to date with what's in this table here. So what I can do is use the `IN` operator directly with the results of a SQL query a `SELECT` query. And it's actually very simple to do. I'll replace what's in the parentheses with the query that we did before. ♪ Tata! ♪ Cool! So, we call this inner query a subquery. It's the query that we're doing inside the outer query. And now, this query will always pull based on whatever's in the doctor's table at the time, it will stay up to date. And this is a pretty simple subquery, but it could actually get really complex. It could be as complex as any of the queries that we've learned so far. Let me show you an example. What if we only want to select the favorites that the doctor recommended for cardiovascular reasons? So we could say, `WHERE reason = ` and then we could paste this whole long reason in here, and we see hiking. But what if for some reason we didn't have the period in here? Well now we actually see nothing for that query. Because it's trying to do an exact match, and it can't exactly match that. So there are times like this when we want to do an inexact match. And we can do that with the `LIKE` operator, which is a pretty neat operator. And so to do that, we're then just going to take this and I'm going to replace the equals sign with `LIKE` and get rid of because all we care about is that very important word, cardiovascular, that is what we're looking for. So we say `"cardiovascular"`, and we also put a percentage sign on either side, which acts as a wildcard. So this should match any rows which contains the word cardiovascular anywhere and it did, yay! Okay, so that's pretty cool. Whew! We covered a lot, `IN`, subqueries, `LIKE`. Hopefully, you're pumped to try them out in the next challenge, or, take a break, go climb a tree, and come back. Either way I hope you have fun with it.