I'm back with just the table about students this time. I've added one more column to the table, `buddy_id`. See, I decided that every student should have a buddy somebody that they can pair up with, do assignments with, study with, all of that. Now the buddy ID is what it sounds like, it's an ID that relates to the ID of the student that they're buddied up with. So for example, here, Peter is buddied up with 2, and 2 is Alice. Let me just do a `SELECT` that should make that more that clear. So, `SELECT id, firstname, lastname, buddy_id FROM students`. Okay. The interesting thing here is that this `buddy_id` is a column in a table that's related to another column in the same table. That's a bit different from before, where we'd have columns related across different tables. So, what if we wanted to show the names of each student next to the email of the buddy, not just the ID, the email. To do that, we need to actually join the `students` table with itself, because the two bits of related data that we need both happen to be in the same table. We can do that by let's see, so we want the first name, last name, email so to join `students` with itself, we're going to write `FROM students` and then `JOIN students;`. Hm, okay? All right, okay, so we get an error `first_name` is an ambiguous column. And that's true, we're telling it to select `first_name`, but it's joined across two tables, and both of these tables have the same column names. And before, we would just prefix these with the table names, but we can't do that here, because actually, they're both named students. So we need to give it a way to distinguish between this one and this one, even if they're kind of the same thing. And we can do that by giving one of them an alias. So, we're going to write the alias right after here. The alias is like a nickname. So here's the alias, `buddies`. And then we just have to specify that the email is coming from `buddies.email`. Haha, there we go. Now, we're seeing too many rows, way too many rows, and that's because we don't have an `ON` clause yet. So it's just joining every possible row with every other one. Now our `ON` should check that the buddy ID from the `students` table, that first one, matches the ID from the second table, `buddies`, or what we called `buddies`. Haha! Now we can see Peter with Alice's email address, Alice with Peter's, et cetera, et cetera. To make this results table even a little more clear, I'm going to rename `buddiesemail as buddyemail`. Okay, so now it's a lot more clear that we're looking at Peter Rabbit and his buddy's email. Cool. Now this type of join is called a self join. And that's because it's a table being joined to itself. You can try this out in the next challenge, and I'll show you one more way to use self joins in the talkthrough after. I hope you'll join me, if not, just join yourself. [LAUGH]