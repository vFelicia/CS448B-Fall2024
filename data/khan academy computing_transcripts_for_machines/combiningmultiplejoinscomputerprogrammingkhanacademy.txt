Now I want to show you a combination of joins and self joins. So, this time I'm back with multiple tables tracking the students and their projects. Now, since I have students working on great projects, I want them to review each other's work in pairs. For example, Hyena Habitats should review Carpet Physics. That's why I've created this new table, `project_pairs`. And all it stores is two project IDs that are paired with each other. Now let's see, what do I see if I `SELECT * FROM project_pairs`? Ugh, okay, It's just a bunch of numbers, a bunch of IDs, all the IDs that are mapped with each other. It is not the most human readable output at all. What I'd like instead, is rows of project titles paired with each other. The project titles are in the `student_projects` table. So that gives me a clue that I need to somehow join `projectpairs` with `studentprojects`. Let's see what happens if I do that. [TYPING] Aha, so now we see project IDs and project titles in each row. What I eventually want, in the results table, is to see two project titles in each row, not just one. So that's another clue that we need to do another join, a self join of `student_projects` with itself, so that we can get those same column values twice. Now it may not be obvious how to add a self join at this point, because we already have a join. If we want to add another one, we can actually use the join keyword again. So `JOIN student_projects` and we need to make sure we give them different aliases, so that they're not ambiguous. So `a` and `b`. All right, so now we've got a lot of stuff in this results table, but if you'll scroll, you'll see that the project titles show up twice in each row. So maybe let's make it easier to see, `a.title, b.title`. Great. But we still have way too many rows, because we're matching every row with every other row, and we haven't added the `ON` clause, the very important `ON` clause. So we're actually going to add two `ON` clauses, one for each of the joins. So, `ON project_pairs.project1.id = a.id`, and then `ON project_pairs.project2.id = b.id`. Aha, there we go! So thanks to this combination of joins and self joins, we can see a nice list of project titles paired with their project title. Now you can use as many joins in your query as you need to get the data that you want. But generally, more joins means slower queries. If you're interested in how to figure out if your queries are slow, and making them more efficient, we'll talk about that soon. So, stay tuned, and keep at it!