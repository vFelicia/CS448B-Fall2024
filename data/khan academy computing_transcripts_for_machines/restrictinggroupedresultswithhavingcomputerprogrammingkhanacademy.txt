Let's continue with more queries of my exercise logs. Let's say that I want to see how many calories I've burned for each type of activity. We can do that with an aggregate query. Say `SELECT type,` and then `SUM(calories) FROM exercise_logs`, and then we're going to `GROUP BY type;`. Now I can see each type with how many calories I've burned total for that type of exercise. Now, do you notice how the column shows up as `SUM(calories)` in the results? If we want, we can actually tell SQL to give that column a new name, just by writing `AS` and then giving it the new name, `total_calories`. That can make our results easier to read and it also has another benefit, which we'll use later. So next, I want to filter the results, to only show activities where I burned more than 150 calories total, across all the times I've done that exercise. It turns out that 150 calories is the amount in one ounce of dark chocolate, so it seems like a good amount to shoot for. Now, my first instinct might be using `WHERE` to filter. Like if I took this query here, and then said `WHERE calories > 150`. Then we only see dancing, and we don't see biking, which we'd expect to see. The reason we only see dancing is because it filters each individual row that comes in. And dancing is the only exercise where I burned more than 150 calories in a single log. But what I want to know is which exercise type or types have I burned more than 150 calories across all of the logs for that exercise type. We actually have to use something new for that, which is the `HAVING` clause. To use that, we'll remove this `WHERE`, and then after the `GROUP BY` we'll write `HAVING` and then `total_calories > 150`. Tada! Now we see biking. Because now it's actually looking at the total calories, and I've indeed earned more than 150 over time in my logs. So as you can see, those two queries are actually different, but they are easy to confuse. When we use `HAVING`, we're applying the conditions to the grouped values, not the individual values in the individual rows. We could use any aggregate function on a grouped column that makes sense, `SUM`, `MIN`, `MAX`, `AVG`, whatever we want to check. Let's do another example. So if we want to see the average calories for all the exercises where we burned, let's say, more than 50 average total Oh, that's all of them, so let's up it. A hundred, in the middle, still doing good, seventy cool. So you can see we can play around with that query there, get different results with that `HAVING`. Now let me do something a little different. Let's say we want to see all the exercise where we logged at least two activities for that type of exercise. For that we're going to use a `COUNT` function. So, I'll `SELECT type FROM exercise_logs`, `GROUP BY type`, and then `HAVING count(*)`, doesn't matter what column, so we can just do star, greater than or equal to two. Okay, so now we can see biking, dancing, tree climbing. I've done all of those at least two times. Makes sense, because those are my three favorite activities in life besides coding, of course! Okay, so now you've seen `HAVING`. Remember that it's easy to confuse `HAVING` with `WHERE` when using these aggregate functions. So think through your results, and make sure they make sense. And now you get to try it yourself.