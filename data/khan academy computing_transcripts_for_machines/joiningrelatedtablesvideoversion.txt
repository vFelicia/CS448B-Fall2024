i've set up two tables in this database that are just like the ones from the article there's a students table with detailed information about each student and a student grades table with the student id test and test grade now if we just selected from student grades we'd see student id test and grade but i don't want to see that i want to see the student's first name their last name and their test and their grade because i think of the students as having names not ids now as you've probably figured out the student id in the grades table is related to the id of each row in the students table so we just need some way to bring these two tables together and we can do that with joins so there are various ways that we can join tables in sql and we're going to try out a bunch of those right now so the simplest way is called a cross join and i can do that just by saying select star from and then putting both of the table names after here now that join returned the cartesian product of all the rows and you might remember that concept from math class basically for every row in the first table it creates a row for each row in the other table and we end up with eight rows since it's creating four rows for each of these two rows that's a simple join to do but it's also the least useful because it's matched everything with everything but really we only want the rows matched together if the student id matches the id of the student row so we can do that with the inner join which is the super useful join inner join okay so one way to do an inner join is that we're going to do what we did before with the two table names and then we're adding a where and the where is going to do that checking to see that the student id matches the student site grade student id so it's basically taking that cartesian product and filtering it down to the rosette match and there we have it that is what i want so that worked um this is called an implicit inner join and it works but it's also not considered best practice so i'm going to show you another way of getting the same result called an explicit inner join and that's actually using the join keyword so for that we're actually going to start and just have one table name after the firm so from students join student grades on students.id it's the same check as before studentgrades.student id same results but this is best practice using that join making it explicit great so now that i have those tables joined i can filter down these results whittle down the column names to just the ones that i care about so i want their first name their last name the test and the grade great and we can use on these join queries we can use any of the other things we've learned before we can use where we can use group by like for example if i want to filter down the results to just grades greater than 90. we can say where grade greater than 90. and now i can email the students and give them a little virtual high five okay so looking here see how we have these column names and we're pulling out these column names from two different tables and this is working because we have two different column names in each of the tables so it assumes when it sees first name it must be from the students table but what would happen if there was a grade column in both tables like maybe we had an overall grade in the students table then it would get confused and it could pick out the one from students it could pick out the one from student grades so in fact what would be safer is to explicitly tell sql where we're getting these from so we can say students dot so we're just adding a prefix in students dot and then this one is from student grades and this one is also from student grade so now it knows exactly where it's pulling those column names and it's not ambiguous at all we always like to be not ambiguous when we can when we're making these scripts and programs all right so that is our basic inner join and it's what you'll use for most of your joints across related tables in life stay tuned and i'll show you one other type of joint maybe two