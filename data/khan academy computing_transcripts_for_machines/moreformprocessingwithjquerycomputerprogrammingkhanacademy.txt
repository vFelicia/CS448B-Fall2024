(Voiceover) Now I'm going to show you a few more tips for processing forms using this crocodile order form as an example. The user will pick the species and we deliver the crocodile. Although, it's not actually legal to send crocodiles to people in the mail, so we'll do the next best thing. We'll show them a picture of the ordered crocodile straight in their webpage, instantaneously. Alright, so let's look at our setup. We've got a similar form like we had before. A 'form' tag, a 'select,' a 'button.' And then down here we've got our 'script' tags. Now, inside this second script tag, I've set up this object, crocImages, which maps species to URLs, and we're gonna end up using this later when we wanna show a picture of the crocodile that they ordered. And, like before, I've got my pseudocode at the bottom that describes what I want to accomplish. When the user submits the form, we'll check which species they ordered, and display an image of it. So, let's start coding that. The first thing we want, the event for when the user submits the form. Like before, I'll just attach an event listener to the form and I'll listen for the 'submit' event. And pass it the callback function, and, once again, we want to make sure that the browser doesn't send this form to a server and reload the page, so we want to prevent the default behavior, and we can do that by calling 'event.preventDefault'. Alright, so now we need to implement this JavaScript here. The first thing we wanna do is check which species the user selected in the dropdown. So we need to find a dropdown in the page. Let's go up an look at the HTML to see how we can select it. This one doesn't have an ID, and it doesn't have a class, but it does have this name attribute and we can use this CSS attribute selector to find the elements based on name. Let's do that. I'll make a variable, it's going to store it. Start that with a dollar sign, $crocSpecies = then for attribute selector we start with a bracket, and then the attribute name, and then the attribute value, and so that'll find whatever element on the page has an attribute name with this value. So that should match this. Alright, so is this selector unique enough to only find a dropdown that we're interested in? Well, within a form, a name should be unique. But, theoretically, there could be multiple forms on a page, and each of those forms could have an input with a 'name=species' so it not, this is not the most unique selector here. That means that we should 'scope' the selector. We want to 'scope' the selector so that it only selects dropdowns with name=species that are inside this form here. One simple way of doing that is to just put 'crocform' in the CSS selector, and that just makes it a lot more specific and makes sure it's only gonna match things with that attribute name and value inside that form. There is another way doing it that we prefer, however. Okay, so let me explain. When we listen to an event on an element, like here, jQuery makes that element accessible inside the callback function in a special way. It makes that element the context of the function. Storing it inside this, remember this from before? So that this is the 'DOM element' and its, its the DOM element thats this crocform here. So, if we want to turn it back into a jQuery object, we can wrap this in the jQuery function, giving us a jQuery object. So, that means since the submit happens on the form, this should be the same as this. Alright, so this is nice that we can reference this, because that means we dont have to repeat the selector here, cause that kinda redundant and you say this, this is what we're interested in. But we don't just want the form, we want that, we want that dropdown inside of it, right? Well, once we have a jQuery object, we can call 'find' on that jQuery object and that limits our search to only look inside this element. So we can take our CSS selector from here, and pass it to the 'find' method, and that should then scope this search to being children of this element. Okay, so this, I'm going to take it, and put it here, and now, now it's scoped. Now I can be confident that it's only going to find things that match the selector that are inside the form that the submit event happened to, alright? Cool, whew. So, now we've got this crocSpecies variable that's storing a jQuery collection with a dropdown inside of it. Once again, we want the value of that dropdown, the string representing the option that the user selected. So for that, we need to call the val function, so let's just make a new variable to hold the string, and we'll reference the element, and then we'll call 'val' on it, and so jQuery will know that its going to look inside that select, find the option that user selected, and give back the value, which is going to be a string, either freshwater, saltwater, or american. Cool, and once again, if you want, you can 'console.log' it at this point and make sure that it's working. Let's get to the fun stuff, though. Let's display an image of the appropriate crocodile to the user. So first, I will use jQuery to create an image, just like this, and I'll give that image a width, and I will set the source using 'attr', and here, I need to decide on the URL. It should be whatever value matches the key in the crocImages object, right? So if they picked 'american', it should be this URL and if they picked 'saltwater', it should be this URL, and etc. So the way we can do that is this reference that object, crocImages, and use bracket notation, and pass in the string which represents the key in that, it's gonna be used as the key in that object. So crocSpecies, and that should give us back the appropriate value in the object. If you want, it might be easier to think of it this way, crocImages, you know if it was 'american', it's like saying this, right? Or another way of saying that, if we don't use bracket notation, is this. It's all the same, okay? Alright, so we've got this image, but it's floating off in space, so we need to append it to the page, and I'll just go ahead and append it to the body. Okay, alright, so once again, our code is theoretically complete, and it's time for you to do some quality insurance. Pause, (laughs), pause the talk through, order a crocodile, and see what you get, and make sure you order a few different crocodiles to see that it shows different images. It would be an absolute tragedy if we accidentally delivered a saltwater crocodile to a user who wanted a freshwater one. Don't wanna make that mistake.