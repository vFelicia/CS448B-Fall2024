[Voiceover] Now I want to talk about a concept that can be really confusing. The difference between jQuery collections and DOM nodes. Let's take a look at this code down here. The first line uses 'document.getElementById' Define the element with the Id of 'cuteness' and save it into this variable. The line after uses jQuery to find the element with the Id of 'cuteness' and save it into this variable. Now what is the actual return value of these functions? Are both of these variables storing the exact same data? Pause and think about it for a second. The answer is no. They're not storing the same data. The first variable is storing a DOM node. Since it's storing a DOM node, that means that we can use DOM properties on it. Things that the browser gives us, like innerHTML. You can see that we're successfully changing innerHTML. This variable is storing a jQuery collection, a special object that jQuery creates. Since it's returning a jQuery collection, that means that we can call jQuery methods on it, like '.html.' We can see that it's successfully changing the '.html' Now if we tried using that method on this variable it wouldn't work. If we tried setting the innerHTML property on this variable, it also wouldn't work. You might be wondering why does jQuery go through the effort to turn DOM nodes into jQuery collections? Why doesn't it just return the DOM node? Well, jQuery has also provided functions like '.html' and '.attr' and '.addClass' and '.css'. These functions make it so you can do DOM manipulation and have it work across browsers, and be able to do it in a small amount of code. jQuery wants to make it easy for you to call these methods on everything you find and create with jQuery. These methods are only defined for jQuery collections therefore jQuery has to return a jQuery collection object. Hopefully you understand the reason why we have jQuery collection objects. Now it can still be confusing sometimes to keep track of which of your variables are storing DOM nodes, and which of them are storing jQuery collections. That's why many of us like to use a naming convention where we prefix jQuery collection variables with a '$' sign. Let's see. So 'var $heading = ' We'll just do the same thing as before. Get the Id of 'cuteness'. Now we've got a jQuery variable. I'll just prove that. 'Using jQuery again!' I use this convention and it means that any time I see a variable name starting with '$' in my code, I'm pretty sure that it's a jQuery collection object, and that I can call jQuery collection methods on it. Now sometimes I actually want access to the DOM node that's inside the jQuery collection. We can pull it out pretty simply. Let me show you. I'm going to create a variable to store it. I'll call it 'headingD'. What I need to do is reference the jQuery collection object, and then treat it like an array. Since I want to pull out the first matched element, because there's only one matched element, I'm going to say [0]. There we go. That does it. Now this variable should store the same as this variable. They're both storing DOM nodes, and the same DOM node. Cool. Okay. Sometimes I might have a DOM node, and I want to turn it into a jQuery collection. To do that, let me show you. I'll create, let me create a variable starting with a '$'. We're doing that now. Then the way I do this is I call a jQuery function and then I can just pass in the DOM node variable. Now jQuery will take that and turn it into a jQuery collection. Now we can store it there. So 'headingJ' is now storing the same thing as 'headingFromJ'. jQuery collections that both have this element inside of it. Cool. All right. So now you hopefully have a better understanding of collections versus DOM nodes. Normally you don't have to do all this conversion between on and the other, and keep track of it so much. It is handy to know how to do it when you need it. It's also just important to really understand what data your code is storing.