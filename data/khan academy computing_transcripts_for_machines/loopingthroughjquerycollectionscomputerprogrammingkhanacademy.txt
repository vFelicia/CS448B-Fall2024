[Voiceover] Let's look at this line of code here. This, called a jQuery, stores a collection of multiple matched elements. All of the paragraphs on this page. It then uses jQuery to modify each of the paragraphs in the same way. Changing their HTML to the same value. That's cool. But we might, in some cases, want to modify each element slightly differently, depending on what's already inside of it. For example, what if instead of completely replacing the paragraph contents, we just inserted text at the end of each of them? To do that, we would need to iterate through each of the matched paragraphs in the collection somehow. So that we could find out what was currently in it, and then just add to it. There are two ways to do that. One way is to use a traditional 'for' loop. Treating the jQuery collection like an array. To do that, I'm going to start off by storing the collection in a variable. Since I am going to end up referencing it a few times. Then I'll write a standard 'for' loop like, 'i = 0; 0 < $paragraphs.length; i++) Inside the loop I'll store the current item in a variable. So 'var element = $paragraphs' is our collection which we're treating as an array, which means we use bracket notation, and pass in 'i', and that should give us the 'i' element in the collection. This here, this is actually storing a DOM node because each item in the jQuery collection is actually a DOM node. If we want to be able to call a jQuery method on the element, then we need to turn it back into a jQuery collection. To do that I can just say '$paragraph =' and then pass 'element' into the jQuery function. That should turn it back into a jQuery collection. Now finally, I can call the jQuery method .html on that single paragraph, and I'll set it equal to its current .html + something else. Huzzah! Very nice. Let me just get rid of the previous part where we changed the .html. There. So now we can see those cat paragraphs, and they're the same, except they each have 'Huzzah!' at the end. There is another way to do it, which is using JQuery's 'each' method. We can call that 'each' method on the collection variables. We can say '$paragraphs.each'. Now we pass it a callback function, that gets called back for every item in the collection. When jQuery calls that callback function, it will always pass it the current index, and the current DOM node. Now we can just take these two lines from the 'for' loop technique and paste them inside the callback function. Now we have 'Huzzah!', and this changes to 'Wowee!' That works there, and this is using the callback function, which is something that maybe you haven't seen in a while. Maybe you need a little more review on, and that's fine. Basically it looks through each element in the collection, and for each of them it calls that callback function. It'll end up calling this code for each of the elements in that collection. Now there is another way using this technique that you can access the current 'element'. That is by referring to this instead of 'element'. In JavaScript, this is a special keyword that refers to the context of a function. When jQuery calls your callback function, jQuery sets the context to the current 'element'. Which means that this will refer to 'element'. To prove it to myself, I can add this little console.log here. 'element = this' Open up the console, and if you want to prove it to you, you can pause now and do that. Basically this will end up being the same as 'element'. It's up to you if you use element, or if you use this. You now have multiple looping techniques in your toolbox. You'll hopefully recognize them when other developers use them, and figure out which of them you like the most yourself.