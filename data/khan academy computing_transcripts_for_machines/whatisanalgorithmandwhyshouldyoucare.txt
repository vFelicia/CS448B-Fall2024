What is an algorithm? A broad answer might be a set of steps to accomplish a task. You might have an algorithm for getting from home to school or making a grilled cheese sandwich or for finding what you're looking for in the grocery store. In computer science, an algorithm is a set of steps for a computer program to accomplish a task. Algorithms put the science in computer science, and finding good algorithms and knowing when to apply them will allow you to write interesting and important programs. Let's talk about some famous examples of algorithms. How does Google Hangouts transmit live video across the internet securely? Using audio and video compression algorithms. How does Google Maps figure out how to get from Dallas, Texas to Orlando, Florida so that you could get to Disney World? Using a routefinding algorithm. How does Pixar color a 3D model of a character based on the lighting in a 3D model of a room? Using a rendering algorithm. How does NASA choose how to arrange the solar panels on the international space station and when to rearrange them? With optimization and scheduling algorithms. Those algorithms are more complex than our everyday algorithms, like making a grilled cheese sandwich, but they boil down to the same thing, a set of steps to accomplish a task. If you know something about existing algorithms, you can save yourself some effort and make your programs faster by applying the right one. For example, let's say you're writing a game and you want the user to be able to play against the computer. Well, computer scientists have figured out how to write chessplaying programs that beat the top chess grandmasters using an algorithm called Minimax Search Tree with alphabeta pruning. If your game is similar to chess, then you might be able to use algorithms based on those techniques. If not, then knowing the limitations of those algorithms might lead you to redesign your game, if it does require having a skilled computer player. It's also important to know how to design new algorithms, as well as how to analyze their correctness and efficiency. In the biological sciences, new algorithms are continually being designed for purposes such as designing the molecular structures that are the core of diseasefighting drugs. In physics, algorithms simulate climate and weather patterns and other algorithms search and analyze the vast data about stars and the universe that is collected by automated space telescopes. Across all the sciences, and even on websites like Khan Academy, efficient algorithms are needed to analyze huge datasets or to select intelligently from a vast number of possible decisions. In just about any area you might be interested in, new algorithms will allow massive computational power to be harnessed to do things people really need and care about. Not all algorithms are created equal. So what makes a good algorithm? The two most important criteria are that it solves a problem at hand and that it does so efficiently. Most of the time, we want an algorithm to give us an answer that we know is always correct. Sometimes, though, we can live with an algorithm that doesn't give us a correct answer or the best answer, because the only perfect algorithms that we know for these problems take a really, really long time. For example, let's say we want a program that would determine the most efficient route for a truck that delivers packages starting and ending the day at a depot. It would take weeks to run, but if we're okay with a program that would determine a route that's good, but maybe not the best, then it could run in seconds. In some cases, good is good enough. How do you measure the efficiency of an algorithm? We could time how long it takes to physically run the code, but that would tell us only about that particular implementation in a certain programming language on a particular computer and just for the input it was given. Instead, computer scientists use a technique called asymptotic analysis, which allows algorithms to be compared independently of particular programming language or hardware, so that we can conclusively say that yes, some algorithms are more efficient than others. Now you can learn about algorithms and asymptotic analysis on Khan Academy thanks to the contribution of two Dartmouth college professors. Tom Cormen is the first author of the most popular college algorithms textbook in the world, plus the author of Algorithms Unlocked. Devin Balkcom designed Dartmouth's Intro CS course and researches robotics. He built the world's first origami folding robot. Tom and Devin will teach you many of the algorithms that you would learn in APCS or CS101, like searching, sorting, recursive algorithms, and my personal favorite, graph algorithms. They'll be tons of interactive visualizations, quizzes, and coding challenges to help you understand better along your learning journey. Ready for the next step?