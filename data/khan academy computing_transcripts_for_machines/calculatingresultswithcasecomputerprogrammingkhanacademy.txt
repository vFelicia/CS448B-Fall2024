Let's try a few more advanced SQL features. I've been logging heart rate for each of my exercises, and I haven't done anything interesting with this data yet. So now it's time. I did a little research on the Internet, and I found that the maximum heart rate is 220 minus your age. So one thing I can do is query my logs to see if my heart rate ever goes above max, since that would be pretty scary, or tell me that there's something wrong with my heart rate checking device. Okay, to do that, I'm going to do a `COUNT(*)`. So `COUNT(*) FROM exercise_logs` and then `WHERE heart_rate` greater than 220 minus my age, 30. Woo hoo, there's no results, and that makes my heart happy. Now, notice I'm using the subtraction operator? And in fact, I can use most math operators in SQL, like to add, subtract, multiply, or divide. And if I need to, just like in math, I can throw in parentheses and change the order of evaluation. All right, so, we've confirmed that my heart doesn't go above max, that's good. Now let's look to see if my heart gets into the target heart rate zone. And that is 50 to 90 percent of max. So we're going to start with our `COUNT(*)`, and we just need to change our `WHERE`. So this time we're going to say heart rate is greater than and let's look at 50 percent of max that's 220 minus 30. Okay, so you see I'm combining a few math operators here. And I'm going to also throw in the `ROUND` function, just to show you that we can use that function, it's pretty nifty. And then we're going to say `AND`, and I'll just copypaste this, and change it to less than 90. Let's go ahead and throw an equals in there. All right, so now, we're checking to see 50 to 90 percent of max and we see there are four logs that fall in that target zone. But what about my other logs? What zones are they in? We don't know, all we know is that four of them are in that target zone, the rest could be maybe they're 90 to 100 percent, maybe they're less than 50 percent. What I would really like to see is a summary of all my logs and how many were in each of the heart rate zones. Now that sounds like a situation where I would use a `GROUP BY`, like `GROUP BY` this column that says which heart rate zone this row is in. But I don't actually have a column like that to group by. Well, I can effectively create a column, using the `CASE` statement. Now, I'll admit that I find this the trickiest statement to use in SQL. So, I struggle with it a bit, and don't worry if you find it a bit odd as well. It is similar to an `if` or a `switch` from programming languages, if you're familiar with those. Otherwise, don't worry about it. All right, so, we're going to use `CASE`, but I'm just going to start with outputting what we know, which is `type` and `heart rate` `FROM exercise_logs`, and see what that looks like. Okay, now for each of these rows, I want to add a new column that says which zone the heart rate is in. To do that, I go into the `SELECT` part of the query. And I'm going to write `CASE`, to begin the `CASE` statement, then I type `WHEN`, and the first condition which is checking if it's above max, so that was `heart_rate > 220 30`. Then I write `THEN`, [LAUGHS] and an expression, which is just a string. So we'll say above max. Okay, so this is my first case. Now I'm going to keep going with my other conditions. So, `WHEN heart_rate > 90`, `THEN` we'll say that it's above target. And then so if greater than 90 and then we'll say, at that point, if it's greater than 50, we can say it's within target. And everything else would be below target, so I could do another condition for that. But I can also just be lazy, or smart, however you want to think of it, and say `ELSE "below target"`. Okay? Now my conditions are all done, but I haven't told SQL what to name this new column. For that, I write `END as "hr_zone"`. Awesome. So now, for each of the rows, I can see the new column with a nice description of what zone they're in. Now that we've done that finally, I can make a query that summarizes how many of my logs are in each of the zones. And that is a whole lot easier now that I've set up this `CASE`. I'm just going to take this query here, copy it, and I'm going to `GROUP BY` the new column we created. And then add `COUNT(*)`, get rid of the heart rate, see what we have here aha! And now we see that we've got four below target and four within target. That's pretty neat, huh? That `CASE` statement, it is a tricky one, but it sure is handy once you get the hang of it. You may not use it all the time, but it's good to know just in case.