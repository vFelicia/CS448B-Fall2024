We're back with the database for our diary app. Now, when we first created these tables, like the `diary_logs` table, we decided to store user ID, date, and content. And now I want you to imagine that a few months after we launch this diary app, a user designer suggests adding a how are you feeling dropdown on each diary entry. And the user would say something like happy, or sad, or confused. In order to store that, we need to add an emotion column to the table. Now we could just add it like this. But if this was a database for an app in a real production environment, then we couldn't just edit the `CREATE` statement because that's something that we actually issued months ago, and it's already happened. And if we rerun it, it'll actually remove the current data. And we don't want to lose all the data that we've gotten over these many months. So, at this point, after we've done `CREATE`, and after we've got data, we're going to need to use the `ALTER TABLE` statement. And to use that, we write `ALTER TABLE`, and then the name of the table, and then `ADD`, and then the name of the column name we're adding, and then the data type of that new column. Great! So now, the next time that the user makes an entry, we'll need to specify that column or we can specify that column. So let's say they went to Disneyland, and to specify that new column, we're going to put `, emotion`, and then here we'll just say happy most people are happy to go there. Okay, so, let's see what it looks like now if we `SELECT` it all. So can we see the latest row has happy in the emotion column, and the row before it has that big old `NULL` in it. And that is what databases usually do, they fill in `NULL` for unspecified values. If we want, we can actually get it to fill in some other value for rows where it wasn't set, and that's what we think of as the default value for a column. So to do that, if we had wanted to do that, we would have put `default` and then the value in that `ALTER TABLE` statement when we ran it. So now you can see, instead of `NULL` we see unknown. So that's an option for you when you're adding a column, and just something to keep in mind, depends what you're adding to the database. Okay, so now let me show you something that you rarely do deleting an entire table. Maybe I would do this if I migrated all of the data out of the this table into some new table, or if I just got mad and decided to be a horrible person, and take a rampage all over a database. That's bad. But anyway, we can do this using the `DROP TABLE` statement. And now, if I try to `SELECT`, what happens? I actually get an error, because my table no longer exists. So it can't select from it. So that was a bad idea, and I'll just delete it. You should think really carefully about dropping tables. Do not just drop them willynilly. You should also be careful with `ALTER TABLE`, especially if you're running it on a table with a lot of rows, because you could have performance issues there. Really, I don't want to scare you, but you should be careful whenever you're making any changes to your database. With great power comes great responsibility and now you have both.