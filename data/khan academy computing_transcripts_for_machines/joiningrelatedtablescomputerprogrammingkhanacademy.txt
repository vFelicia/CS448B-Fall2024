I've set up two tables in this database a `students` table, with detailed information about each student, like their name and email. And a `student_grades` table, which has their student ID, test name, and grade. Let's see what happens if we just select everything from `student_grades`. Tada. Okay, so we see student IDs, test names, and grades. I'd actually rather be able to see student names, emails, that sort of thing. Now, what you might notice is that the student ID in `student_grades` is related to the ID in `students`. So this 1 here is actually referring to Peter Rabbit. And this 2 here is actually referring to Allison Wonderland. Now, I want to form a query that will output the student name and email next to each test grade. And that information is in two different tables. So that means I need to join the tables. And there are a few ways that we can do that in SQL, and we'll try them all out actually. The simplest is called a cross join. And I can make that happen just by putting both table names after the `FROM`. Tada! So as you can see, lots of rows, and basically what this did is that for each row in the first table, it created a row for each of these rows here. That means we end up with eight rows, because it creates four rows for each of these two rows. This is the simplest join, but it's also the least useful. We don't want every row matched with every other row. We only want them matched if the student ID matches. Now we can do that using an inner join, which isn't actually much more work at all, and is way more useful. So, there's actually a few ways of doing an inner join. We'll start with just building off the last query, and we can add a `WHERE`. The `WHERE` will check to see that the student ID matches students to ID. All right, so now we actually have what we wanted is test grades next to names. Because it's done the the cross join and then just limited to the rows where those columns were the same. Great! This syntax here is called an implicit inner join, and it works, but it's not actually the best practice. The better way is if we do something called an explicit inner join. And that is using the `JOIN` keyword. So to do that, we're going to start with just doing from one table. And actually, I'll do from `students`, and then `JOIN` on `student_grades`. And then, instead of `WHERE`, we do `ON`. And that specifies what columns are being matched. So `ON students.id = studentsgrades.studentid;` All right, so now we have the same results as before switched, but really the same. Now that I have these tables joined, I'm just going to whittle down the columns I'm outputting to the names, the email, the test name, and the grade. Okay, beautiful. Now the cool thing is, once we've done joins, we can still use `WHERE` and `GROUP BY`, and all those fancy things. Like, let's say that we want to filter down to results to just grades greater than 90. Woo hoo! Let's see oh, nope. Uh, grade, grade there we go. Aha, lots of ones above 90, now I can email all those students with a highfive. Okay, but what would happen if my tables both contained columns with the same column name but different meanings? Like right now, our student grades table has a grade column, But what if my students table also had a grade column for their overall class grade? That would mean down here, when we selected grade, it wouldn't know which table to pull it from, because there'd be a grade column in both of our tables. So actually, to be super safe, we should prefix our columns with the table name that they're from. So we say `students.firstname, students.lastname, students.email,` `studentgrades.test, studentgrades.grade`. Okay, now we know that we're going to get the columns from the table we expect them to be in. Great. Now that is our basic explicit inner join. And it is what you'll use for most of your joins across related tables. But if you stay tuned, I'll show you a few other types of joins as well.