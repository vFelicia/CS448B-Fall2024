[Voiceover] Let's keep exploring what we can do with objects. We're back with the program that we used in the functions tutorial. This program has this drawWinston function which knows how to draw Winston, and it gets a certain x and y. And then down here, we call drawWinston four times. Each with a different set of x and y coordinates. Well, you know me. When I look at those four drawWinston calls that are so similar looking, all I can think about is how much better it would be if we could use a loop and just call it one time inside the loop, changing the x and y in each iteration of the loop. So to do that, we need to find a way to store these x and y positions in an array so that we can loop through it. Well, with two sets of values, so that we could do is have two arrays one for x positions, and one for y positions. So xPositions, we might have 99, 294 101, and 294. And yPositions, we'll have 117, 117, 316, 316. Okay, and now we can loop through those with our 'for' loop, var i equals zero, i less than xPositions.length, i++. So we're going through each element in xPositions, and we'll say drawWinston, xPositions[i]s, and yPositions[i]. Okay. So let's see if that worked by deleting. All right, that worked. So now we can actually just call this, you know, we just have this one line of code that does drawWinston, but it does it for every position in the xPositions array. So we could go and add more to this by saying like 10 and then we add 1, and then add 1 and then 1, and then 100 and 1. Now it's getting to look a little bit messy, and I don't like it because it's really hard for me to see which x's relate to which y's. And I want it to be just a look and a glance to know what my x, y pairs are. Instead of having to make sure that I perfectly line them up above each other like this maybe. So I wanna find a different way of storing these positions. Now one idea is that we can actually store them as objects because think about it, each position is really two basic information, the x and the y. So we could have an object which has x and y properties. And then we could have an array of objects with all these x, y positions. So let's do that. We'll say var positions equals, and this is gonna be an array as well, but each element, instead of being a number, it's going to be an object. So here we have our curly brackets, and then we're just gonna say x 99, y 117. Okay, so now we have one of our positions in here, and then we'll go add another one, add another one here. All right, x should be 294, 117. Okay, the third one is going to be 101, 316. And the final one is 294 and 316. Okay, so now we have an array of objects where each object has x and y properties in it. So down here in our 'for' loop, we'll just change this to iterate through positions.length, and then we'll pass in the objects. Now, right now, it's passing the entire object, but we wanna pass the x and the y, so we need positions[i].x and positions[i].y. Tadah! Now we can get rid of these old clustered arrays. Great! So this looks a lot nicer to me, and makes a code much readable, and anytime we can have more readable code is better. And it also makes it easier to add, so if I wanna add one, I'll actually add the pair together, and then we can say x 200, y 200, get a little Winston in the middle there. Cool. Now I wanna show you something even fancier than this. Notice how our function right now accepts two numbers, and then uses those two numbers. Well, we could change our function so that it expects an object, and then it gets the x and y from that object. Meaning that down here, we could just pass the object. Now let's try that. We pass the object, now it's broken. That's because our function still is expecting two objects, and it's only getting one. So we'll change it to say it's getting facePosition. And now we get an error which is faceX is not defined because before, we're passing in faceX as an argument but now it doesn't exist. We're only getting an object so what we could do is actually save the x position from the object inside the faceX variable, so we're saying, "Okay, we got this object. "We know this object has an x property, "so we're just gonna store that into the faceX variable." And then we could do the same thing with y, so faceY equals facePosition.y. Tadah! And then the rest of the function that uses faceX and faceY. Now we have to make sure we spell them correctly. If we did xx, it's not gonna work because that's not what it is down here in our array of objects, so it needs to match. But it's pretty neat because now, you can have arrays of objects, you can have functions that take in objects, and you'll really find that your programs can be very powerful with the way that they structure their data. And especially since it's so often to want to pair x and y together, I think you'll find them especially useful in all your drawing and animation programs here. So go to it and have fun.