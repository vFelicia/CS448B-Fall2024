[Instructor] I'm back with this database that's tracking students' grades and student projects, and I added a few more students and student projects, and now that the students are working on these super amazing projects, I want them to review each other's work in pairs. So I want "Carpet Physics" to review "Hyena Habitats." To track that, I created the project_pairs table, and all it stores is two project_ids that are paired with each other. So what do I see if I just select everything from project_pairs? (musing) Hmm, okay, so I see rows of IDs mapping to each other. And it's not the most humanfriendly output. What I want instead is rows of project names mapping to each other. Now those project names are in the student_projects table, so that gives me a clue that I need to join student_projects with project_pairs somehow. Well, we can always start with a cross join and see what we see. So we'll just add on student_projects. Okay, so we see the Cartesian product, which shows project IDs and a single project name in each row, but imagine what we eventually want, what we eventually want is going to have two project names in each row, not just one, so that gives me another clue that I actually, I need to join the students project table to itself, so that I can get its columns joined up twice, and we call that a self join. In order to do a self join, I'll keep this student_projects here, and give it an alias, a nickname. So I'll just call it a, and then I'll add another student_projects b. Okay, so now we can see our rows contain two project IDs and two project names. And now the problem is just that there are far too many rows, because this is every row mapped with each other, so we need to narrow it down to just the rows where the project IDs match across the tables. So we can add a where, so where project_pairs.project1_id equals a.id, and project_pairs.project2_id equals b.id, aha! There we go, we can see the names match with each other. And if we want, we can just get rid of the things we don't care about, so what we only care about is the title of b and the title of a. There we go, very readable, very humanfriendly. So that is a self join, or one way of using a self join. There are various times when you may want to use a self join, and it might seem a bit tricky. You can always do what I do, which is start with a cross join, and keep modifying it until you narrow it down to what it is you're actually looking for, and of course, just doublecheck your results with yourself, and think to yourself, "Does this make sense, "is this what I was expecting?" All right, so go join yourselves! (chuckles)