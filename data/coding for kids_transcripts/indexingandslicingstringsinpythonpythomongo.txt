00:01 - hello everybody my name is jemmy and
00:03 - today i will be giving you a brief
00:04 - overview
00:05 - on indexing slicing strings so
00:08 - basically what this is is um you know
00:11 - we're going to be do
00:12 - looking at indexing slicing uh and
00:15 - mostly we're going to be doing
00:16 - these two topics on strings so let's get
00:18 - started
00:20 - so first off we need to know that in a
00:23 - python string
00:24 - uh each character is labeled into a
00:27 - number
00:28 - so pretend we have this string or a text
00:30 - if you don't know what a string is
00:32 - it's basically a word or text um in
00:35 - quotation marks or single quotes like
00:37 - this one so pretend we have the string
00:39 - pikachu right
00:40 - uh there is one two three four five
00:44 - six seven there is seven letters in
00:45 - pikachu however in python we start
00:48 - counting from zero so p would equal to
00:50 - zero
00:51 - i would equal to one k would go to two
00:54 - a three c four h 5 and u 6.
00:59 - so this is the way we count in python um
01:02 - from zero up and so this is basically
01:06 - how the numbers
01:07 - are assigned to the letters and we'll be
01:09 - looking at how to index that
01:10 - so let's look uh pretend we only want
01:15 - pika right we only want pika and that
01:18 - would be from zero to three
01:20 - so let's do that okay
01:23 - uh this pica however you might notice
01:25 - it's not zero to three
01:27 - because if you were to do zero two three
01:30 - it would only do pick this is the the
01:32 - reason this happens is because
01:34 - once you're indexing something you need
01:37 - the
01:37 - stop or the ending to be greater than
01:40 - the limit
01:40 - so if you want to stop at three you have
01:43 - to go to four
01:44 - so oops sorry four like this and it
01:48 - should print out pika
01:49 - and that is a rule while you're indexing
01:51 - also
01:52 - negative indexing also is there so
01:55 - we learn how to do uh indexing with
01:57 - positive numbers
01:58 - now let's learn how to index with
02:00 - negative numbers so
02:02 - n is the last one right is oh
02:05 - this is pokemon now so it's not pikachu
02:07 - it might be a little confusing but it's
02:09 - okay
02:09 - so the last number now is the greatest
02:12 - number
02:13 - here i'll put it this way i'll just
02:14 - change it back to pikachu so we can get
02:17 - a
02:17 - better understanding pikachu
02:22 - like so okay and i'll put these two next
02:25 - to each other
02:27 - like so oops sorry
02:30 - um if i paste it down yeah it's gonna
02:32 - mess it up but basically we're gonna
02:34 - have zero here right
02:36 - um and we're going to have uh p here
02:39 - and then down here we're going to have
02:41 - oh we're gonna
02:42 - we're not gonna have p there we're gonna
02:43 - have a dash there
02:46 - and then p here so that would be zero uh
02:50 - and then we just get this one and put it
02:52 - there but yeah
02:54 - you probably get the point um sorry
02:57 - i i will put it in so we can see it
02:59 - better
03:00 - so basically uh it's kind of like a
03:03 - number line if you
03:04 - ever uh experienced a number line before
03:07 - it's like counting negative to positive
03:10 - so let's take a look it sort of looks
03:12 - like this
03:17 - oops sorry okay so
03:21 - here this is what looks like okay so
03:23 - zero is p right
03:24 - and then um so zero is p
03:28 - uh and then if we want to count
03:29 - backwards negative one would be u
03:32 - negative two would be h negative three
03:34 - would be c negative four would be a
03:36 - negative five would be k negative six
03:38 - would be i
03:39 - and negative seven would be p now the
03:42 - reason u cannot be
03:43 - zero in this case is because a p right
03:46 - here is already zero
03:47 - so you can't have it uh two numbers
03:50 - or not two numbers two letters that
03:52 - share the same number
03:53 - it just won't work so once we get this
03:56 - information that
03:57 - of negative indexing let's try it out
04:01 - so pretend we want pika again right let
04:03 - me change this to pikachu
04:06 - so pretend we only want pika again but
04:08 - this case we're going to be using
04:10 - negative
04:11 - right we're going to be using negative
04:12 - indexing so
04:14 - seven is over here so this is the start
04:16 - right and the stop
04:18 - is uh a which is negative four
04:21 - but you can see that uh the same rule
04:24 - applies the end of the slice of the
04:27 - slice or the stop
04:28 - needs to be above one above the limit so
04:32 - if negative four plus one it would be
04:33 - negative three so we have to put the
04:35 - stop to negative three to get pika
04:37 - let's try it out and there we go pika
04:41 - now let's move on to slicing strings so
04:43 - slicing strings
04:44 - um is kind of like indexing but it's
04:47 - different in a way
04:48 - uh let's run it first so you can see
04:51 - that
04:52 - this is kind of what the outcome of the
04:55 - indexing is however the process behind
04:58 - it is a bit different
04:59 - so we have the r string which is python
05:01 - go by the way that's the name of this
05:03 - series
05:03 - and uh s1 which is slice one equals to
05:07 - slice
05:08 - 9 comma eleven this is how you slice you
05:11 - have
05:12 - the first uh you had the first how you
05:14 - call it
05:16 - the first number which is where it
05:19 - starts and then the last
05:20 - the second number which is where it
05:21 - stops and this the rules apply for
05:24 - slicing two
05:25 - the ending needs to be one above the
05:27 - limit and
05:28 - uh i'll show you a unique part of
05:30 - slicing later on
05:31 - but for now this is basically slicing so
05:34 - it's kind of like
05:35 - indexing but there is a special case
05:37 - called step
05:38 - and i will be showing that later so now
05:41 - we're going to be looking
05:42 - at step and in step what it does it it
05:46 - skips
05:46 - so pretend you have uh this whole
05:49 - chunk of numbers which is actually a
05:51 - string one two three four five six seven
05:53 - eight nine
05:53 - right and we want to have only the
05:57 - odd numbers right uh we would do zero to
05:59 - nine which is
06:00 - one through nine and we skip by two so
06:02 - one
06:03 - instead of going to two it goes one
06:05 - three
06:06 - five seven nine so that is what step
06:09 - does it
06:09 - uh it's how much you step or how much
06:11 - you skip
06:12 - so in this case it goes by two so
06:14 - instead of going by one
06:16 - it goes one one two and two three
06:20 - and then it goes one two to five one two
06:22 - to seven and so on
06:23 - so let's run this you can see it prints
06:26 - out all the
06:28 - uh odd numbers however if we want only
06:30 - the positive numbers we need to change
06:31 - the starting point
06:32 - instead of zero to one and now it prints
06:35 - out all the even numbers
06:37 - okay let's move on to the next one which
06:40 - is slicing with four loops
06:41 - so uh slicing we can also use it with
06:44 - four loops
06:45 - in this case right now i am going to be
06:48 - getting the first
06:49 - uh the first letter of the string so
06:52 - we're going to be making a function here
06:54 - our function is called the slicer
06:56 - and inside the slicer there's parameter
06:58 - called string
06:59 - and uh after that we have we're going to
07:02 - um set uh empty string which is result
07:06 - result is a string but there's nothing
07:07 - inside of the string and then we're
07:09 - going to put up a for loop
07:11 - 4a in range lens string
07:14 - len is for length so it finds out how
07:16 - long string is
07:17 - and then it repeats it that much times
07:19 - if a mod
07:21 - two equals equals to zero if you don't
07:23 - understand a
07:24 - mod two is basically uh how what is the
07:27 - remainder
07:28 - of a divided by two and we might have
07:31 - you might have learned this in like
07:32 - third grade or two second grade two
07:34 - grade
07:34 - second grade um but basically when you
07:37 - divide a number
07:38 - and there's something left over there's
07:39 - going to be r and then that number
07:41 - this is kind of like that and if r equal
07:43 - to zero
07:44 - then it goes on to the next one so if uh
07:48 - a mod two equals equals to zero then
07:50 - result
07:51 - plus equals to string a so this might be
07:54 - a little tricky but this what it means
07:56 - is result equals to
07:58 - result plus string so it's going to add
08:02 - itself again and string
08:04 - um but we can shorten that down by doing
08:06 - plus equal to
08:07 - so it will add string a and it'll return
08:10 - the result
08:10 - which means it'll print it out and it
08:12 - will this is to
08:14 - just and that's the end of the function
08:16 - and then this code is just to call up
08:18 - the function and put in the parameter
08:19 - which is python go
08:21 - so let's run this and you can see that
08:23 - it starts off with a p uh
08:24 - slicer is used for getting the first
08:26 - word so if we can type anything like so
08:28 - it'll always get the first letter
08:30 - whether or not it's capitalized
08:32 - you'll always get the first letter so
08:36 - uh that is slicer and let's move on to
08:38 - the next one
08:39 - so now we're going to be looking at
08:40 - slicing string formatting
08:42 - um basically we're going to format uh
08:45 - slicing
08:46 - if i can say that but this is what it
08:48 - looks like
08:49 - so blissey's nickname is bliss i don't
08:52 - know sorry
08:53 - i'm really bad at making up these
08:54 - sentences but uh i just wanted something
08:56 - that works
08:57 - so we have a string that says blissy
09:00 - and we're going to print out a sentence
09:02 - which says blissy
09:03 - nickname is and then in here instead of
09:06 - typing out bliss
09:07 - we can uh we type out percentage sign s
09:10 - uh this is so that we can replace this
09:13 - right here
09:14 - with anything we want so once we did
09:16 - that we can go outside
09:17 - of the string but we're still inside
09:21 - of the parentheses uh and we put a
09:24 - percentage sign
09:25 - string zero to five zero to five
09:27 - actually i don't need the zero
09:28 - um but basically what this does it it's
09:31 - get it's going to get blissey
09:33 - or bliss from blissy uh and it will just
09:36 - print that out
09:37 - so right now it should still print bliss
09:39 - and if we were to change this one to one
09:42 - then would be list like so so yeah that
09:45 - is another way to format spicing
09:48 - next one we're going to be formatting a
09:50 - string so uh this one
09:52 - we have magikarp has blah blah attack
09:55 - power
09:56 - so this is another way of formatting
09:58 - string uh
09:59 - so this is the string and we're going to
10:01 - print string.format attack equals to
10:03 - five
10:04 - attack right here is right this one so
10:07 - this is the variable and we can set what
10:09 - the variable is
10:10 - so right now we're gonna set it as five
10:12 - um and it'll just print out magikarp has
10:14 - five
10:14 - attack power like so now let's move on
10:18 - to uppercase string
10:19 - so this will basically uh make your
10:22 - whole text
10:23 - uppercase if there's two capital letters
10:27 - inside of the string um but if there's
10:29 - one or zero then it's not going to make
10:31 - it capital
10:32 - or uppercase but if it has two or more
10:35 - capital letters then it'll make the
10:37 - whole
10:37 - string capitalized so let's look at it
10:40 - so our
10:41 - function is called uppercase or upper
10:43 - convert and there is a parameter called
10:45 - string
10:46 - uh once we get into it we're going to
10:47 - set up our variable which is
10:49 - a variable to zero for i in string
10:53 - if i dot upper parenthesis equals equals
10:56 - to i
10:57 - this makes sure that um if it's
11:00 - uppercase or not
11:01 - and this one upper bear plus equals to
11:04 - one
11:04 - remember that this is basically upper
11:06 - bear equals to upper where
11:08 - plus one and if upper bear is
11:11 - greater or equal to three upper vapor by
11:14 - the way is the count of how much
11:16 - upper cases there are um if it's greater
11:19 - or equal to three
11:20 - return string dot upper return string
11:24 - and this will basically print out the
11:26 - make it so that the whole
11:28 - uh the whole text is upper upper case
11:31 - and then after here we just trigger the
11:32 - function
11:33 - by doing upper convert and then putting
11:35 - in the parameter which is python
11:37 - go and currently it only has one wait i
11:40 - gotta change this to two
11:41 - but currently only has one uh upper case
11:44 - or capital letter so it shouldn't
11:46 - trigger oh
11:47 - oh wait i forgot and he said this is
11:49 - three yes sorry um like so it shouldn't
11:51 - trigger yet
11:52 - but once we fill in two or more so like
11:55 - python
11:55 - go like this then you can see it makes
11:57 - the whole text uppercase
11:59 - and if we want to increase the limit so
12:01 - like pretend
12:02 - two capital letters are allowed but
12:04 - three is not we can change this text to
12:06 - four
12:07 - and now with two capital letters it
12:09 - won't be all capitalized
12:11 - and at the end we can if we want to
12:13 - trigger it then we just put in
12:15 - o like so and there we go it triggers
12:17 - and makes everything capitalized
12:20 - let's look at max value max value is
12:22 - very interesting i find it very
12:24 - fun to uh experiment with and basically
12:28 - string equals to max and then max has
12:31 - parentheses and inside the parenthesis
12:33 - there is a text
12:34 - um this text is just the alphabet uh in
12:37 - order
12:37 - a b c to z um and then let's print
12:40 - string
12:41 - so as you can see it only prints z this
12:43 - is because max value
12:44 - will find if it's a string it will find
12:47 - uh
12:48 - the one with the most value i can say
12:51 - that so z
12:52 - is the farthest out in uh the
12:54 - alphabetical order
12:55 - so it goes for z first since it is the
12:58 - max value that it has
13:00 - and then after that if we can also do it
13:02 - with numbers however the number is still
13:04 - a string
13:04 - so it's a string of numbers um and
13:08 - we have one two nine so if we were to
13:10 - print this out it would go
13:12 - to nine like so and
13:15 - this is like a scenario where you can
13:16 - use it if you have ever an assignment to
13:19 - find the
13:20 - the alphabet with the lowest letter
13:24 - or like the lowest uh yeah the lowest
13:28 - the letter that is the least in
13:30 - alphabetical order if that makes sense
13:32 - then um not the least but the most value
13:35 - in alphabetical order
13:36 - then you just use this code and type in
13:38 - your sentence then they'll find it for
13:39 - you which is
13:40 - in this case y so from very is why
13:44 - um and yeah that is today's lesson
13:46 - however today i
13:48 - did prepare a little exercise that we
13:51 - can do together
13:52 - so this exercise well it's not really an
13:54 - exercise but
13:55 - i want to show oh no don't don't don't
13:57 - don't look at that don't look at that
13:58 - okay so i just want to challenge you
14:00 - guys a little bit and i want to see what
14:02 - this code does
14:04 - so uh at first it prints out enter
14:07 - number
14:08 - and number equals to input so basically
14:10 - we can
14:11 - enter in our stuff and then i equals to
14:14 - 2
14:14 - which is a variable while i is less or
14:18 - equal to in
14:19 - number which is the input j equals to 2
14:22 - count equals to 0 this is just to set up
14:25 - some variables
14:27 - while j is less or equal to i
14:30 - if i mod j equals equals to zero
14:34 - count equals to count plus one again i
14:36 - can simplify this to plus
14:38 - equals two but after that
14:41 - uh in here j equals to j plus one if
14:44 - into count
14:46 - is less or equal to one and in number
14:48 - mod one equals equal to zero print
14:50 - i i equals i plus one what does this do
14:54 - well since i already i made it i think i
14:56 - know what it does
14:58 - um basically it will uh
15:01 - you put in a number and it will find the
15:03 - prime factorization of that number
15:05 - so pretend i put like in 10 uh so shift
15:08 - enter
15:09 - and like you put in 10 then it'll be 2
15:11 - and 5 because those are prime numbers
15:13 - and
15:14 - if they times each other then it'll
15:15 - equal to 10. so this is just to find the
15:18 - prime factorization
15:20 - but if you ask what if they what
15:23 - no sh this is the wrong one um
15:26 - can you stop please okay thank you so
15:29 - what if they put in a prime number like
15:31 - three right so then it'll just print out
15:33 - three because if it's a prime number
15:35 - it'll print itself
15:36 - out again and now let's look at the
15:38 - second one this one basically will
15:39 - reverse
15:40 - any text that you put in and
15:43 - once it reverses it it not only does
15:46 - reversing it will also
15:47 - um it will also make
15:50 - it will be like alternating between
15:52 - capital capitalist capital case
15:54 - capital case gosh upper case and lower
15:57 - case letters so pretend you put it in
15:58 - like
15:59 - uh the right it'll be e ht but e will be
16:02 - capitalized
16:04 - h will be lowercase and t would be
16:05 - capitalized again so it's pretty cool
16:08 - and uh if you want to see your name
16:09 - backward like jimmy
16:11 - and then make it really look weird then
16:14 - you can do
16:15 - you can use this code and there we go
16:17 - yamaga
16:20 - ym meg um and you can see that it's
16:22 - alternate
16:23 - out alternating between uppercase and
16:25 - lowercase letters
16:26 - uh but yeah this is today's exercise and
16:29 - today's lesson
16:30 - uh it's a 16 minute video but i hope you
16:33 - enjoyed
16:34 - thank you very much for watching see you
16:36 - in the next one bye