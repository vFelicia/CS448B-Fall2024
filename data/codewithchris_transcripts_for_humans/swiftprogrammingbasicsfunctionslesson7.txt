With timestamps:

00:04 - hello and welcome in the previous lesson you 
learned about swift variables and constants  
00:09 - you learn how to create some data and declare a 
variable or constant to keep track of it and if  
00:14 - you did the challenge you also learned about math 
operations using variables well in this lesson  
00:19 - you're going to learn how to organize and group 
together your code statements so that number one  
00:25 - all of the code statements that you've grouped 
together can work together for a common task and  
00:30 - number two once your code is organized into groups 
you can choose which group of code statements to  
00:35 - run depending on what task you need to be done 
these groups of code statements are known as  
00:40 - functions in swift all right but before we dive 
in just in case you're new here my name is chris  
00:45 - and welcome to code with chris the place to be 
if you want to learn how to make an app now i  
00:50 - have a quick question for you have you tried to 
learn swift programming before and if you have  
00:54 - how did that go let me know by leaving a quick 
comment below and on your way down there please  
00:58 - give this video a thumbs up it helps out 
the video more than you know so thank you  
01:03 - all right now let's take a look at the view 
update life cycle diagram from the previous  
01:07 - lesson and see where functions might play a part 
in this life cycle remember that when the user  
01:15 - interacts with the ui swift code captures that 
event and reacts to it well here we might have a  
01:21 - couple of different functions depending on how the 
user interacts with our ui for example the user  
01:27 - tapping a button might trigger the app to switch 
screens in that case maybe we'll run function a  
01:34 - to perform that task or on the other hand what 
if the user taps on an item to see more detail  
01:40 - then in that case we'll run function b to bring up 
the details screen now let's go over the code that  
01:46 - performs the data retrieval for example we might 
have a function c that does the actual retrieval  
01:53 - of the data maybe the networking code and it 
grabs the data and then gives it to function d  
01:59 - as input and the responsibility of this function 
might be to process that data and turn it into a  
02:05 - format that our app can understand so function 
d takes that data as input and then outputs the  
02:12 - formatted data for our app now i could go on but 
as you can see functions are a basic component of  
02:19 - swift programming it's everywhere so now let's 
go and see how we can create our own functions  
02:26 - all right so here i have a brand new xcode 
playground and we're going to take a look at  
02:30 - the function syntax and just in case i haven't 
explained it yet the word syntax is simply a  
02:35 - word describing the structure or the grammar of 
the language so function syntax to declare a new  
02:41 - function you start with the func keyword f u n 
c so it's a funky function and then you follow  
02:48 - it by the name of the function and then a set of 
parentheses or rounded brackets and then a set of  
02:56 - curly brackets inside the set of curly brackets 
you put your code statements anything you want to  
03:03 - execute or run whenever we call this function so 
let me just put some statements here let's say  
03:11 - declare two constants like this and then let's 
print you know a plus b so if i run this right now  
03:22 - and execute all these lines of code nothing 
is going to happen you don't see any output  
03:27 - and that's because we haven't actually called 
this function in order to call and to execute  
03:32 - this function we just have to reference it by the 
function name so that's my f u n c followed by  
03:41 - the pair parentheses and that is how you 
execute all of the code in between here  
03:47 - so let's try this out i'm going to stop executing 
and then run my playground again and we get 30  
03:54 - as we expect if i wanted to run those set of 
instructions again then i can just simply call  
04:03 - it again and if i print it out now it executes 
that code twice now i want to go back to that view  
04:10 - update lifecycle diagram for just a second because 
if you notice back in that data retrieval area  
04:17 - i said that we might have two functions c and 
functions d where c would fetch the data and pass  
04:24 - it into d as input parameters so that function d 
can work with that data and format it how we need  
04:32 - so a function being able to accept data into it to 
work with it is a very powerful feature let's take  
04:38 - a look at how we would declare a function that 
would accept some sort of input data all right so  
04:44 - i'm going to erase these two lines and i'm going 
to modify my function here instead of declaring  
04:51 - two constants a and b i am going to specify 
that a and b have to be passed into the  
04:58 - function so the way we do that is through the use 
of function parameters in between the two rounded  
05:05 - brackets that is where we would specify all of the 
parameters we want to be passed into this function  
05:12 - you can pass in multiple parameters but actually 
let's just start with one let's just start with a  
05:16 - so first i would put the name of the 
parameter so i would want that to be  
05:21 - a and then i would put colon specified 
by the data type that this parameter is  
05:29 - since i expect it to be int i'm 
going to declare this parameter  
05:33 - as a followed by the data type int and then i 
can erase this constant from here as you can  
05:40 - see this is almost like a variable declaration 
or a constant declaration except without the var  
05:47 - and without the let here we're specifying that 
whenever this function is called one int parameter  
05:54 - needs to be passed in along with it and it's 
going to be referenced by this parameter name  
06:00 - a inside this function so now you can see that 
nowhere did i declare a variable a or constant a  
06:08 - but i can still put a as part of my equation a 
plus b because a is being passed in as a parameter  
06:15 - so let's take a look at what calling this 
function would look like now i'm going to  
06:19 - rely on auto complete so i'm going to type in 
m y f u n and you can see as soon as i do that  
06:27 - it detects my function here so i'm going to go 
ahead and click that and you can see that now  
06:33 - in the process of calling this function i also 
have to pass in an integer piece of data so  
06:38 - i'm going to go ahead and pass in let's pass in 
something different let's pass in five you can see  
06:44 - here there indicates this is the parameter that 
i'm passing in let's go ahead stop and execute run  
06:51 - my lines of code again and this time the output 
is 25 because 5 was being passed in the function  
06:57 - plus 20 is 25. now going back to the view update 
lifecycle diagram again function d accepts  
07:04 - input as a parameter but it also returns output 
so that is another very powerful feature of  
07:12 - functions being able to take in some input work 
with that data and provide some output back to  
07:19 - the caller of the function so let's take a look 
at our playground and see how we can specify that  
07:24 - a function should return some data so to modify 
this function to indicate that it will return some  
07:30 - data we go up here right after the rounded bracket 
for the parameter and just before the start of the  
07:37 - curly brackets in here we write a dash followed 
by a greater than symbol which makes sort of  
07:43 - like an arrow like output and then we specify the 
data type of the output so what i'm going to do  
07:49 - is i'm going to output the sum of a and b 
instead of printing it out to the console  
07:54 - so i'm going to erase this line and then i'm going 
to output an int so that's where i specify that  
08:03 - right after that dash greater than symbol now you 
can see that xcode throws some errors now because  
08:10 - in addition to specifying that your function 
returns an in you actually have to return an  
08:15 - int inside of the code statements so as the last 
line of our code we can use the return keyword  
08:23 - meaning that this is the data we're 
going to return from the function  
08:27 - and then we specify the int data that we want 
to return so i'm going to return a plus b  
08:33 - and all is well now keep in mind that whatever 
the data type you specify up here in the function  
08:41 - declaration that is the data type that you have 
to return if there's a mismatch for example if i  
08:47 - specified that this function returns an int but i 
go ahead and return a string like a piece of text  
08:55 - you're going to see xcode complain about that as 
well because that is that is incorrect so we're  
09:02 - going to return a plus b and we're going to turn 
in so why don't we run our function now and see  
09:08 - what happens nothing happens well what's going on 
i'm returning a plus b so here's what's happening  
09:16 - calling this function is returning that data but 
i need to somehow reference and track that data  
09:22 - right and that's what a variable is for so 
i am going to declare a variable up here var  
09:30 - let's declare constant actually since i'm 
not going to change this let my sum equals
09:39 - the result of that function so you can understand 
this code statement right we're declaring a  
09:46 - constant called my sum and then we are calling 
this function on the same line that returns  
09:53 - 25 and we're assigning 25 to my 
sum so now i can print my sum  
10:00 - and let's double check that we get the output 
there we go now before we move on there are two  
10:06 - very important things that i want to mention so 
this return statement actually ends the execution  
10:13 - of that function so once this return statement 
is run execution returns out of that function  
10:19 - so any code statements that you put down here 
like let's say i had return a b right there  
10:25 - and i printed a plus b right here that 
print statement is not going to be run  
10:31 - see code after return will never be executed so 
that's just um important to keep in mind that  
10:38 - when you write return and it executes that line 
of code the execution stops and gets out of that  
10:44 - function another thing that i wanted to mention is 
this return type so earlier when i told you that  
10:53 - declaring a function didn't have a return 
type like that well it actually did  
10:57 - it was just that the return type was void and 
void means nothing so let me let me do a basic  
11:04 - demonstration actually let me just declare another 
function down here um i'll just call this myfunk2
11:16 - see back then i told you this was a 
basic declaration of a function but  
11:23 - actually that was a shorthand the full 
declaration actually has a return type  
11:28 - of void like that if you're 
not going to return anything  
11:31 - but it's just that when you don't return 
anything then you don't actually have to specify  
11:38 - the return type of void so so i just thought 
i'd mention that so you know what that void  
11:45 - keyword means so if you see some function that has 
a return type of void you know that that basically  
11:51 - means that it's not returning anything all right 
so now let's reset a little bit it's starting to  
11:55 - get a little messy so let's erase everything 
except that except our function right here  
12:01 - now i want to show you how we can pass in multiple 
parameters so instead of specifying b here let's  
12:08 - put b into the parameter listing here and have 
it be passed in instead okay so let me erase  
12:15 - this line of code so that we get b from up here 
well how do we add another parameter to this one  
12:22 - what you do is simply put comma and then declare 
another parameter for your function easy right  
12:28 - we're going to name this one b followed by colon 
and then the data type of b that's going to be  
12:33 - another integer all right so now let's take a look 
at how we call this function with two parameters  
12:40 - my func you can see that here now you just 
specify oh one quick thing is when you're  
12:50 - calling functions an easy way to just fill in the 
parameters in the list is by pressing tab that  
12:57 - just brings you over to the next parameter that 
you have to fill so i'll put two and three let's  
13:04 - execute all of this code and we get a result we 
get no result remember i erased my line of code so  
13:12 - why don't we just print out the result instead of 
assigning it to a variable this time so i'm going  
13:17 - to go ahead and directly pass that function call 
into my print statement that's going to print out  
13:23 - the output of my function let's go ahead and run 
that code and we get five now obviously you can  
13:32 - have more than two parameters just put a comma 
in between each parameter in your function and  
13:38 - another thing i want to mention that's pretty cool 
with parameters is that you can specify a default  
13:43 - value for a parameter so for example for parameter 
b i could make this an optional input data  
13:52 - by specifying a default value for this parameter 
if i do that that means that when this function is  
13:59 - called passing in data for parameter b is going to 
be optional let's take a look at how this works so  
14:05 - after i specify the data type for my b parameter 
i can put an equal sign and then i can give it a  
14:13 - value let's say 0 is the default value if b is 
not passed in then b is just going to be zero  
14:21 - now let's erase my function call and let's 
try calling it again and take a look at what  
14:29 - the autocomplete menu shows us here you can 
see that there are two different forms of my  
14:35 - function call now one is with parameters 
a and b so i pass in both pieces of data  
14:41 - and one is just simply passing in parameter 
a if i do that b is just going to be zero  
14:49 - but if i pass in both of them let's say 
i pass in two and three again then b  
14:56 - is going to be three instead of 0. so that's 
one way to make your parameters optional  
15:02 - now i want to talk about argument labels as you 
can imagine the more parameters we have the more  
15:08 - confusing things are going to be in terms of 
these function calls especially when it comes  
15:12 - to parameter names like a and b well sometimes 
a and b makes sense in the context of the code  
15:18 - inside of the function but to the caller of the 
function a and b they don't mean anything so  
15:25 - there's a special feature called argument labels 
and let me show you what that looks like so i'm  
15:31 - going to declare a new function right here i'm 
going to call it myfunk as well and i am going to  
15:39 - actually you know what i'm going to just copy this 
function and make a copy of it and show you how  
15:47 - how argument labels change it so an argument 
label goes in front of each parameter so  
15:53 - each parameter can have its own argument 
label and you're essentially just putting  
15:58 - a name in front of that 
parameter i'm going to call  
16:04 - this first parameter i'm going to give it 
a an argument label called first number and  
16:10 - for my uh for the second parameter i'm 
going to give it an argument labeled called  
16:17 - second number so that's literally all it is 
an argument label is a name in front of the  
16:24 - parameter name separated by a space let's take 
a look at how this affects the function call  
16:31 - if i type in my func you can see here i still 
have these these first two ones a and b and  
16:38 - that's from the first function up here but look 
down here i have first number and first number  
16:46 - and second number and this corresponds to my 
second function right here because the second  
16:51 - number is still optional right because i have 
this default value there so if i call that one  
17:01 - my function call becomes this myfunc first 
number one and second number three however  
17:08 - internally inside of that function i'm still 
referencing those parameters using a and b  
17:15 - so argument labels they're they're a way for you 
to distinguish the naming for a function call  
17:25 - versus how it's referenced inside the code whereas 
if you omit the argument labels like we've done  
17:32 - up here then the parameter names are used for 
both the function call and also the referencing  
17:40 - of those parameters inside of the function so 
hopefully you notice the difference here one  
17:46 - cool trick you can do with argument labels is if 
you don't want to show any text in your function  
17:52 - call at all you can use an underscore 
as your argument label so if you do this  
18:01 - let's see what happens to your function call
18:05 - so my func you can see here 
these two correspond to  
18:12 - what i've done right here using 
underscores for the argument labels
18:19 - so if you use an underscore for argument label 
the function calls just become my func and then  
18:28 - the first piece of data comma second 
piece of data there's no parameter names  
18:32 - there's no argument labels in your function call 
at all so this makes things really succinct and  
18:39 - really neat and tidy but it also makes things more 
confusing if it's not clear what those parameters  
18:46 - are supposed to be for so there's a lot of 
versatility here my personal preference is  
18:53 - simply to do it this first way and i don't 
usually specify any argument labels at all  
18:59 - and i simply use the parameter names okay last 
thing i promise before we end off with functions  
19:06 - is i don't know if you've noticed but we've 
declared two different functions here both  
19:11 - with the same function name we can't do that with 
variables right if you try to declare variable a  
19:18 - and then variable a again then you're going to 
get an error on the second one the next code is  
19:23 - going to complain you cannot redeclare variable 
a for functions things are a little bit different  
19:30 - functions have what's called a function signature 
and that is comprised of the function name the  
19:38 - parameter listing and then followed by the 
return type so let's type myfunk and take a  
19:44 - look at what the autocomplete menu gives us 
as you can see all four of these variations  
19:50 - have the same function name called myfunc but 
because the parameter values the argument labels  
19:57 - they're different xcode is able to discern and 
to know which function we're trying to call  
20:05 - right so if i call this one and i 
don't specify any parameter names or  
20:10 - any argument labels it knows that i'm trying 
to call this second one right here because  
20:17 - you know this method call this function 
call i mean it doesn't match this first one  
20:22 - whereas if i do my func and i specify parameter 
labels a and b then it definitely knows  
20:30 - that i'm trying to call the first one because 
this call this parameter listing here matches  
20:36 - up here okay so i promise you that we went a 
little deeper than you probably need to know  
20:42 - right now by showing you all of these options 
and and ways that functions can be flexible as  
20:49 - we code together more you'll see me just using 
more basic forms of functions but at least hey  
20:55 - now you know a lot more and i'm sure you can 
appreciate how powerful these functions are  
21:03 - all right this lesson was pretty action-packed 
let's do a recap before we wrap up the lesson  
21:08 - first of all you learned how to declare 
basic functions and then you learned how  
21:12 - to declare functions which accept input data 
as parameters furthermore you learn how to  
21:17 - declare a function with multiple parameters and 
again functions wouldn't nearly be as useful if  
21:22 - it couldn't output data right you learn how 
to do that using return types and the return  
21:27 - keyword you also learned about argument labels 
and finally you learned about function signatures  
21:35 - now to really get the hang of functions and to 
reinforce your learning make sure you do the quiz  
21:39 - and challenge for this lesson and don't forget 
you have a swift cheat sheet that you can get  
21:43 - from the nav link at the top of your student 
dashboard and print it out and keep it handy  
21:48 - you don't need to memorize anything to get all of 
these extra resources just visit codewithkris.com  
21:55 - and sign in or create your account and then 
enroll in the 14 day beginner challenge  
21:59 - if you like this video please give it a 
thumbs up and don't forget to subscribe  
22:03 - and to turn on bell notifications so you don't 
miss the next lesson did i mention how glad i  
22:08 - am to have you here learning with me well i 
am you're making great progress and in the  
22:13 - next lesson i'll show you how to organize your 
functions into structures so i'll see you there

Cleaned transcript:

hello and welcome in the previous lesson you learned about swift variables and constants you learn how to create some data and declare a variable or constant to keep track of it and if you did the challenge you also learned about math operations using variables well in this lesson you're going to learn how to organize and group together your code statements so that number one all of the code statements that you've grouped together can work together for a common task and number two once your code is organized into groups you can choose which group of code statements to run depending on what task you need to be done these groups of code statements are known as functions in swift all right but before we dive in just in case you're new here my name is chris and welcome to code with chris the place to be if you want to learn how to make an app now i have a quick question for you have you tried to learn swift programming before and if you have how did that go let me know by leaving a quick comment below and on your way down there please give this video a thumbs up it helps out the video more than you know so thank you all right now let's take a look at the view update life cycle diagram from the previous lesson and see where functions might play a part in this life cycle remember that when the user interacts with the ui swift code captures that event and reacts to it well here we might have a couple of different functions depending on how the user interacts with our ui for example the user tapping a button might trigger the app to switch screens in that case maybe we'll run function a to perform that task or on the other hand what if the user taps on an item to see more detail then in that case we'll run function b to bring up the details screen now let's go over the code that performs the data retrieval for example we might have a function c that does the actual retrieval of the data maybe the networking code and it grabs the data and then gives it to function d as input and the responsibility of this function might be to process that data and turn it into a format that our app can understand so function d takes that data as input and then outputs the formatted data for our app now i could go on but as you can see functions are a basic component of swift programming it's everywhere so now let's go and see how we can create our own functions all right so here i have a brand new xcode playground and we're going to take a look at the function syntax and just in case i haven't explained it yet the word syntax is simply a word describing the structure or the grammar of the language so function syntax to declare a new function you start with the func keyword f u n c so it's a funky function and then you follow it by the name of the function and then a set of parentheses or rounded brackets and then a set of curly brackets inside the set of curly brackets you put your code statements anything you want to execute or run whenever we call this function so let me just put some statements here let's say declare two constants like this and then let's print you know a plus b so if i run this right now and execute all these lines of code nothing is going to happen you don't see any output and that's because we haven't actually called this function in order to call and to execute this function we just have to reference it by the function name so that's my f u n c followed by the pair parentheses and that is how you execute all of the code in between here so let's try this out i'm going to stop executing and then run my playground again and we get 30 as we expect if i wanted to run those set of instructions again then i can just simply call it again and if i print it out now it executes that code twice now i want to go back to that view update lifecycle diagram for just a second because if you notice back in that data retrieval area i said that we might have two functions c and functions d where c would fetch the data and pass it into d as input parameters so that function d can work with that data and format it how we need so a function being able to accept data into it to work with it is a very powerful feature let's take a look at how we would declare a function that would accept some sort of input data all right so i'm going to erase these two lines and i'm going to modify my function here instead of declaring two constants a and b i am going to specify that a and b have to be passed into the function so the way we do that is through the use of function parameters in between the two rounded brackets that is where we would specify all of the parameters we want to be passed into this function you can pass in multiple parameters but actually let's just start with one let's just start with a so first i would put the name of the parameter so i would want that to be a and then i would put colon specified by the data type that this parameter is since i expect it to be int i'm going to declare this parameter as a followed by the data type int and then i can erase this constant from here as you can see this is almost like a variable declaration or a constant declaration except without the var and without the let here we're specifying that whenever this function is called one int parameter needs to be passed in along with it and it's going to be referenced by this parameter name a inside this function so now you can see that nowhere did i declare a variable a or constant a but i can still put a as part of my equation a plus b because a is being passed in as a parameter so let's take a look at what calling this function would look like now i'm going to rely on auto complete so i'm going to type in m y f u n and you can see as soon as i do that it detects my function here so i'm going to go ahead and click that and you can see that now in the process of calling this function i also have to pass in an integer piece of data so i'm going to go ahead and pass in let's pass in something different let's pass in five you can see here there indicates this is the parameter that i'm passing in let's go ahead stop and execute run my lines of code again and this time the output is 25 because 5 was being passed in the function plus 20 is 25. now going back to the view update lifecycle diagram again function d accepts input as a parameter but it also returns output so that is another very powerful feature of functions being able to take in some input work with that data and provide some output back to the caller of the function so let's take a look at our playground and see how we can specify that a function should return some data so to modify this function to indicate that it will return some data we go up here right after the rounded bracket for the parameter and just before the start of the curly brackets in here we write a dash followed by a greater than symbol which makes sort of like an arrow like output and then we specify the data type of the output so what i'm going to do is i'm going to output the sum of a and b instead of printing it out to the console so i'm going to erase this line and then i'm going to output an int so that's where i specify that right after that dash greater than symbol now you can see that xcode throws some errors now because in addition to specifying that your function returns an in you actually have to return an int inside of the code statements so as the last line of our code we can use the return keyword meaning that this is the data we're going to return from the function and then we specify the int data that we want to return so i'm going to return a plus b and all is well now keep in mind that whatever the data type you specify up here in the function declaration that is the data type that you have to return if there's a mismatch for example if i specified that this function returns an int but i go ahead and return a string like a piece of text you're going to see xcode complain about that as well because that is that is incorrect so we're going to return a plus b and we're going to turn in so why don't we run our function now and see what happens nothing happens well what's going on i'm returning a plus b so here's what's happening calling this function is returning that data but i need to somehow reference and track that data right and that's what a variable is for so i am going to declare a variable up here var let's declare constant actually since i'm not going to change this let my sum equals the result of that function so you can understand this code statement right we're declaring a constant called my sum and then we are calling this function on the same line that returns 25 and we're assigning 25 to my sum so now i can print my sum and let's double check that we get the output there we go now before we move on there are two very important things that i want to mention so this return statement actually ends the execution of that function so once this return statement is run execution returns out of that function so any code statements that you put down here like let's say i had return a b right there and i printed a plus b right here that print statement is not going to be run see code after return will never be executed so that's just um important to keep in mind that when you write return and it executes that line of code the execution stops and gets out of that function another thing that i wanted to mention is this return type so earlier when i told you that declaring a function didn't have a return type like that well it actually did it was just that the return type was void and void means nothing so let me let me do a basic demonstration actually let me just declare another function down here um i'll just call this myfunk2 see back then i told you this was a basic declaration of a function but actually that was a shorthand the full declaration actually has a return type of void like that if you're not going to return anything but it's just that when you don't return anything then you don't actually have to specify the return type of void so so i just thought i'd mention that so you know what that void keyword means so if you see some function that has a return type of void you know that that basically means that it's not returning anything all right so now let's reset a little bit it's starting to get a little messy so let's erase everything except that except our function right here now i want to show you how we can pass in multiple parameters so instead of specifying b here let's put b into the parameter listing here and have it be passed in instead okay so let me erase this line of code so that we get b from up here well how do we add another parameter to this one what you do is simply put comma and then declare another parameter for your function easy right we're going to name this one b followed by colon and then the data type of b that's going to be another integer all right so now let's take a look at how we call this function with two parameters my func you can see that here now you just specify oh one quick thing is when you're calling functions an easy way to just fill in the parameters in the list is by pressing tab that just brings you over to the next parameter that you have to fill so i'll put two and three let's execute all of this code and we get a result we get no result remember i erased my line of code so why don't we just print out the result instead of assigning it to a variable this time so i'm going to go ahead and directly pass that function call into my print statement that's going to print out the output of my function let's go ahead and run that code and we get five now obviously you can have more than two parameters just put a comma in between each parameter in your function and another thing i want to mention that's pretty cool with parameters is that you can specify a default value for a parameter so for example for parameter b i could make this an optional input data by specifying a default value for this parameter if i do that that means that when this function is called passing in data for parameter b is going to be optional let's take a look at how this works so after i specify the data type for my b parameter i can put an equal sign and then i can give it a value let's say 0 is the default value if b is not passed in then b is just going to be zero now let's erase my function call and let's try calling it again and take a look at what the autocomplete menu shows us here you can see that there are two different forms of my function call now one is with parameters a and b so i pass in both pieces of data and one is just simply passing in parameter a if i do that b is just going to be zero but if i pass in both of them let's say i pass in two and three again then b is going to be three instead of 0. so that's one way to make your parameters optional now i want to talk about argument labels as you can imagine the more parameters we have the more confusing things are going to be in terms of these function calls especially when it comes to parameter names like a and b well sometimes a and b makes sense in the context of the code inside of the function but to the caller of the function a and b they don't mean anything so there's a special feature called argument labels and let me show you what that looks like so i'm going to declare a new function right here i'm going to call it myfunk as well and i am going to actually you know what i'm going to just copy this function and make a copy of it and show you how how argument labels change it so an argument label goes in front of each parameter so each parameter can have its own argument label and you're essentially just putting a name in front of that parameter i'm going to call this first parameter i'm going to give it a an argument label called first number and for my uh for the second parameter i'm going to give it an argument labeled called second number so that's literally all it is an argument label is a name in front of the parameter name separated by a space let's take a look at how this affects the function call if i type in my func you can see here i still have these these first two ones a and b and that's from the first function up here but look down here i have first number and first number and second number and this corresponds to my second function right here because the second number is still optional right because i have this default value there so if i call that one my function call becomes this myfunc first number one and second number three however internally inside of that function i'm still referencing those parameters using a and b so argument labels they're they're a way for you to distinguish the naming for a function call versus how it's referenced inside the code whereas if you omit the argument labels like we've done up here then the parameter names are used for both the function call and also the referencing of those parameters inside of the function so hopefully you notice the difference here one cool trick you can do with argument labels is if you don't want to show any text in your function call at all you can use an underscore as your argument label so if you do this let's see what happens to your function call so my func you can see here these two correspond to what i've done right here using underscores for the argument labels so if you use an underscore for argument label the function calls just become my func and then the first piece of data comma second piece of data there's no parameter names there's no argument labels in your function call at all so this makes things really succinct and really neat and tidy but it also makes things more confusing if it's not clear what those parameters are supposed to be for so there's a lot of versatility here my personal preference is simply to do it this first way and i don't usually specify any argument labels at all and i simply use the parameter names okay last thing i promise before we end off with functions is i don't know if you've noticed but we've declared two different functions here both with the same function name we can't do that with variables right if you try to declare variable a and then variable a again then you're going to get an error on the second one the next code is going to complain you cannot redeclare variable a for functions things are a little bit different functions have what's called a function signature and that is comprised of the function name the parameter listing and then followed by the return type so let's type myfunk and take a look at what the autocomplete menu gives us as you can see all four of these variations have the same function name called myfunc but because the parameter values the argument labels they're different xcode is able to discern and to know which function we're trying to call right so if i call this one and i don't specify any parameter names or any argument labels it knows that i'm trying to call this second one right here because you know this method call this function call i mean it doesn't match this first one whereas if i do my func and i specify parameter labels a and b then it definitely knows that i'm trying to call the first one because this call this parameter listing here matches up here okay so i promise you that we went a little deeper than you probably need to know right now by showing you all of these options and and ways that functions can be flexible as we code together more you'll see me just using more basic forms of functions but at least hey now you know a lot more and i'm sure you can appreciate how powerful these functions are all right this lesson was pretty actionpacked let's do a recap before we wrap up the lesson first of all you learned how to declare basic functions and then you learned how to declare functions which accept input data as parameters furthermore you learn how to declare a function with multiple parameters and again functions wouldn't nearly be as useful if it couldn't output data right you learn how to do that using return types and the return keyword you also learned about argument labels and finally you learned about function signatures now to really get the hang of functions and to reinforce your learning make sure you do the quiz and challenge for this lesson and don't forget you have a swift cheat sheet that you can get from the nav link at the top of your student dashboard and print it out and keep it handy you don't need to memorize anything to get all of these extra resources just visit codewithkris.com and sign in or create your account and then enroll in the 14 day beginner challenge if you like this video please give it a thumbs up and don't forget to subscribe and to turn on bell notifications so you don't miss the next lesson did i mention how glad i am to have you here learning with me well i am you're making great progress and in the next lesson i'll show you how to organize your functions into structures so i'll see you there
