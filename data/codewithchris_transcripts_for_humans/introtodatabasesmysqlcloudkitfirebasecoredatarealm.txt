With timestamps:

00:00 - hey cuckoo what's going on today I'm
00:02 - gonna go over some database options and
00:04 - what I like and what I don't like about
00:06 - each one specifically we're going to go
00:09 - through MySQL cloud kit firebase core
00:12 - data and realm now that's a lot of
00:15 - options to go through so I won't spend
00:16 - that much time on each one I'm gonna
00:19 - give you an overview how data is stored
00:21 - how much it costs and pros and cons for
00:24 - each of the options so alright let's get
00:27 - started
00:27 - undoubtedly MySQL is the most popular
00:30 - out of all the options we've listed
00:32 - traditionally MySQL has been used for
00:34 - web development and powers many websites
00:37 - including my own the most popular
00:39 - content management system WordPress
00:41 - which is installed on over 16 million
00:44 - websites also runs off of MySQL however
00:48 - what's right for web development doesn't
00:50 - mean that it's automatically right for
00:52 - app development before you can
00:54 - understand the difference let's talk
00:56 - about clients versus servers think of a
00:59 - server as a computer sitting somewhere
01:01 - whose sole job is to receive requests
01:03 - and send responses in the web
01:06 - development scenario we call this the
01:08 - web server your database sits on a
01:11 - database server when you sign up for
01:13 - some website hosting and you create your
01:15 - website those files also sit on a web
01:18 - server your browser like Safari and
01:21 - Chrome is called a client when you
01:23 - launch the browser and you visit your
01:24 - website your browser makes a request to
01:27 - the web server the web server then
01:29 - requests the data from the database
01:31 - server combines that data with HTML and
01:34 - CSS and returns it as a response to your
01:38 - browser then your response renders that
01:41 - HTML and CSS code on the screen for you
01:44 - to see so that's what happens in web
01:46 - development in app development your app
01:49 - is a client just like the web browser it
01:51 - cannot connect directly to the database
01:54 - server it needs some sort of middle
01:56 - layer just like the web site files in
01:58 - the web development scenario for app
02:01 - development we call these files web
02:03 - services these web services sit on the
02:06 - web server and wait for requests when
02:09 - your app makes a request to the web
02:10 - service the web service makes a request
02:13 - to the database server and returns that
02:15 - data in some sort of format that your
02:18 - app will understand typically it will be
02:20 - the JSON format that you learned about
02:22 - in the beginner course so here lies the
02:25 - challenge with using MySQL as a database
02:27 - solution for mobile apps you need to
02:30 - build the app client and the web
02:32 - services yourself
02:33 - whereas in web development the browser
02:35 - is already built for you and you only
02:37 - need to construct your website now I'm
02:40 - not saying that we should never use
02:41 - MySQL for app development for example
02:43 - you might already have a MySQL database
02:46 - full of data and you're looking to build
02:48 - an app to serve that data up another
02:51 - example is that you already have a
02:53 - membership site where all of the user
02:55 - accounts are stored in a MySQL database
02:57 - and you're looking to make a companion
02:59 - app for your website or maybe you are
03:02 - already familiar with using MySQL SQL
03:05 - queries and writing web services then go
03:08 - ahead and use it for your app too
03:09 - however if you're starting a brand new
03:12 - app that is free of any constraints then
03:15 - consider all of your options first next
03:18 - up we're going to talk about how data is
03:20 - stored in MySQL data is stored in a
03:23 - MySQL database much like how a
03:25 - spreadsheet would be organized for
03:27 - instance you might have a spreadsheet to
03:29 - keep track of all of the employees in
03:31 - your company you name the spreadsheet
03:33 - employees and inside it you create
03:36 - columns to represent different details
03:38 - of each employee then each row in the
03:42 - spreadsheet would represent one employee
03:43 - in MySQL you have tables instead of
03:47 - spreadsheets so you'll have an employee
03:49 - table in my SQL table is organized
03:52 - exactly like your spreadsheet you'll
03:54 - have columns for the different pieces of
03:56 - data you want to track per employee and
03:58 - each row in your table will represent an
04:01 - employee now let's talk about how much
04:03 - using MySQL will cost in terms of costs
04:07 - most web hosting plans come with a MySQL
04:11 - database and they can start as low as
04:12 - four dollars a month you'll also need a
04:15 - domain name so that your app has a URL
04:17 - to hit for your web services this costs
04:19 - around 10 to 20 dollars a year if you're
04:22 - thinking about going down this route
04:23 - check out the links in the description
04:25 - below however if you
04:26 - haven't explored all of the options in
04:28 - this module yet I would strongly urge
04:30 - you to watch all of them before making
04:32 - up your mind next let's talk about some
04:34 - pros and cons some advantages of using
04:38 - MySQL for app development are
04:40 - familiarity lots of people are familiar
04:43 - with how a MySQL database is structured
04:46 - it's also tried and tested MySQL has
04:49 - been around for a while now some
04:51 - disadvantages are you need to write your
04:55 - own web services this may require you to
04:57 - learn a completely different programming
04:59 - language such as PHP also with a low
05:02 - cost web hosting plan you probably won't
05:04 - be getting the infrastructure to support
05:06 - high load scenarios and you also
05:08 - probably won't have any data redundancy
05:10 - so if your database server goes offline
05:12 - then your app won't be able to access it
05:15 - cloudkit is Apple's back-end as a
05:17 - service solution to store your app and
05:19 - user data in the cloud now if this is
05:22 - your first time hearing the term
05:23 - back-end as a service it's basically all
05:26 - of the back-end infrastructure to enable
05:28 - things like file storage and data
05:31 - storage user management and
05:33 - notifications and more all done for you
05:35 - and available through a single API now
05:39 - it sounds great right it is except that
05:42 - these back-end platforms aren't free
05:44 - however most of these platforms have a
05:47 - free tier that allow you to use all of
05:49 - the infrastructure and services for free
05:51 - until you reach the limits of the free
05:53 - tier the great thing about using one of
05:56 - these back-end platforms is that you get
05:58 - a lot of robust infrastructure for your
06:00 - data storage for example data redundancy
06:04 - your data is backed up and synced across
06:06 - multiple data centers so if one goes
06:09 - down the request is routed to one that
06:11 - is online another freebie is load
06:14 - balancing so requests for data get
06:16 - distributed across multiple data centers
06:19 - to prevent creating a bottleneck at one
06:21 - specific server this prevents the
06:23 - scenario where your app is waiting for a
06:25 - long time for data because of high
06:27 - volume so those are just two examples of
06:30 - why I like using these back-end services
06:32 - such as cloud kit now we're not going to
06:35 - dive too deep into how cloud kit works
06:37 - but I wanted to give you an overview
06:39 - of how the data is stored cloudkit uses
06:42 - the concept of containers databases and
06:45 - records your app has one container which
06:47 - contains three different databases a
06:49 - public database where the data is
06:51 - accessible by anyone a private database
06:54 - where the data is accessed by a specific
06:57 - user a shared database where the data is
07:00 - accessible between a group of users
07:02 - within each database you store the
07:05 - actual data in what is called a record
07:07 - each record contains key value pairs
07:10 - just like a dictionary in Swift however
07:13 - each record is of a certain type and you
07:16 - defined these record types in your cloud
07:18 - kit dashboard for instance you might
07:20 - have an employee record type containing
07:23 - these properties and a manager record
07:25 - type containing other properties then in
07:28 - your database you can create employee
07:30 - and manager records each of these
07:33 - records will contain the key value pairs
07:35 - that you defined in the record types
07:37 - furthermore these records are organized
07:39 - into record zones so on the cloud kit
07:43 - page on developer.apple.com there is a
07:46 - pricing calculator that you can
07:48 - calculate how much it would cost
07:51 - depending on how many active users you
07:53 - have and you can see that it scales up
07:57 - as you get more and more active users
08:00 - and even at 10 million active users your
08:03 - total cost is 0 as long as you stay
08:05 - within these limits here now before we
08:08 - mentioned that your app has different
08:12 - databases there's a public one there's a
08:14 - private one and there's a shared one the
08:16 - private and shared one and where you
08:18 - store data that is specific to a user or
08:20 - shared between certain users that
08:22 - storage is calculated against the user's
08:25 - iCloud account limits and it's not
08:28 - counted toward your app limits however
08:30 - the public data that you store is
08:34 - counted towards these limits here now
08:37 - the next question is what is defined as
08:40 - an active user well actually if you
08:42 - scroll down on the page here in this
08:44 - fine print it says that an active user
08:46 - is defined as having active container
08:49 - usage that means they've been using
08:52 - the database capabilities of your app
08:54 - within the last 16 months and then it
08:58 - also tells you some of the fees that are
09:00 - involved if you have any overage
09:06 - I have to start off with the major
09:08 - drawback of cloudkit and that is that
09:11 - there's no official SDK for Android they
09:14 - obviously have an iOS SDK that you can
09:16 - just drop into your Xcode project to
09:18 - work with cloud kit and they also have a
09:20 - JavaScript SDK that you can have a web
09:24 - map connect to your cloud kid database
09:25 - but there's no official Android SDK
09:28 - which means that if you have an Android
09:30 - app you're gonna have to build a set of
09:32 - web surfaces using the JavaScript SDK
09:34 - and then have your Android app send
09:37 - requests to that set of web services
09:39 - which you built another thing is you can
09:42 - store public data on the cloud kit
09:44 - databases however private data is stored
09:48 - on the user's iCloud account that means
09:51 - if you're using cloud kit and you're
09:52 - gonna be storing private data your users
09:55 - must have an iCloud account now this
09:58 - shouldn't be a problem if you're
09:59 - building an app that runs on iOS because
10:01 - as part of the set up process for the
10:03 - device the users have to sign in with an
10:05 - Apple ID or sign up for a new one and
10:07 - that is basically an iCloud account too
10:10 - however if you're building an Android
10:12 - version of the app and an Android user
10:15 - might not necessarily have an iCloud
10:17 - account or an Apple ID and they'd have
10:19 - to go and sign up for one if your app is
10:21 - going to be Apple only such as mac OS
10:23 - iPad app or an iPhone app then Club kit
10:26 - might be an easy solution for you
10:28 - so some pros of cloud kit include it's
10:31 - easy to use if you're developing for
10:33 - Apple platforms only and there's a
10:35 - generous free tier now some cons users
10:39 - must be signed into iCloud to store
10:41 - private data and it's not easily a
10:44 - cross-platform solution even though you
10:46 - can make it work all right so that's
10:48 - cloud kit firebase is also a back-end as
10:51 - a service but unlike cloud kit it is
10:54 - cross-platform in the sense that it
10:56 - fully supports Android meaning that it
10:58 - has an SDK for it as well so if you're
11:00 - gonna build an Android version or a web
11:02 - version of the same app then it's going
11:05 - to easily be able to use the same
11:07 - firebase database as your iOS app does
11:09 - in addition to that the firebase
11:11 - platform also includes a lot of
11:13 - additional back-end features such as
11:15 - notifications user management file
11:18 - storage
11:19 - lytx crash reporting and more there's
11:22 - actually quite a bit more as you can see
11:23 - from their homepage however let's focus
11:25 - on the database aspect of the platform
11:28 - right now
11:29 - the only tough thing about using
11:31 - firebase for data storage is that you
11:33 - have to wrap your head around the way
11:35 - that the data is stored firebase is a no
11:38 - SQL database if you're used to writing
11:41 - SQL queries with a traditional database
11:43 - like MySQL or Microsoft sequel server
11:46 - then it's going to take a bit of
11:48 - practice to get used to using a no SQL
11:50 - database like firebase in firebase data
11:54 - is stored as a JSON document think about
11:57 - how we structured the question data in
11:59 - the quiz module of the beginner course
12:00 - you can literally import that JSON
12:02 - document to the firebase database here's
12:05 - how it would look in your firebase
12:07 - database to access data you would just
12:10 - need to know the path to the element
12:12 - that you need to add data you can add
12:14 - key value pairs to existing objects or
12:17 - create new nodes
12:25 - there's no concept of tables rows or
12:28 - columns that's why it takes a little
12:30 - time to wrap your head around if you're
12:32 - coming from the world of traditional
12:33 - databases
12:37 - in terms of pricing firebase has a free
12:39 - tier but it's not based on active users
12:42 - like cloud kit is your going to have to
12:44 - see how this fits within your budget and
12:46 - within the plans for your app to be
12:48 - honest with you my own point of view is
12:50 - that it's more important for me to get
12:53 - my app up and running as quickly as
12:55 - possible rather than worrying about
12:56 - incurring some extra costs if I'm
12:59 - hitting the limits of the free tier and
13:01 - I think that's a great problem to have
13:02 - and I fully expect to be generating some
13:04 - sort of revenue from my app anyways the
13:07 - only thing I'd worry about in terms of
13:09 - hitting the limits of this firebase free
13:12 - plan is the file storage limits if you
13:14 - allow your users to upload large files
13:16 - that you might hit that cap pretty
13:18 - quickly so some of the pros are the
13:23 - firebase platform has a lot of back-end
13:25 - features firebase is owned by Google who
13:27 - is arguably pretty good at handling data
13:30 - I would trust their infrastructure now
13:33 - some of the cons no ask you all might
13:35 - take some time to get used to query
13:37 - efficiency also really depends on how
13:40 - your data is structured and coming up
13:42 - with the data schema is a big learning
13:44 - curve now compared to the other database
13:47 - solutions we've talked about so far core
13:49 - data is very different first of all
13:51 - MySQL cloud kit and firebase are all
13:54 - remote database solutions that means
13:56 - that the data is stored on a remote
13:58 - server somewhere where all your users
14:00 - can access it core data is different
14:02 - because it's local on the user's device
14:04 - that means that it's not the solution
14:06 - for connected scenarios like generating
14:09 - user accounts or having user generated
14:11 - content core data is a solution where
14:14 - you need data persistence on your local
14:16 - device for instance your app works with
14:18 - a large offline data set that is stored
14:20 - locally on the device now notice that
14:23 - I've been very careful not to call core
14:25 - data a database and that's because it is
14:28 - not core data is an object graph manager
14:31 - and you can think of an object graph as
14:33 - simply a bunch of objects and the
14:35 - relationships between those objects
14:37 - let's take a closer look remember back
14:41 - in the beginner course in the quiz app
14:43 - we downloaded a JSON file which we
14:45 - parsed to get an array of questioned
14:47 - objects although there aren't any
14:49 - relationships but
14:51 - the question objects this is still an
14:53 - object graph with core data we could
14:56 - preserve all these objects in their
14:58 - current state on disk and then bring
15:00 - them back later
15:01 - it's like putting this graph on deep
15:02 - freeze and then thawing it later to get
15:05 - back all of these objects the cool thing
15:07 - is that you don't have to get back all
15:09 - of them you can query and look for what
15:11 - you need and retrieve a subset of your
15:13 - objects that are stored in core data
15:15 - let's take a look at another example
15:17 - let's say that you have an employee
15:19 - class and a manager class the manager
15:22 - class actually has a property called
15:23 - managed employees that stores an array
15:26 - of employee object references we create
15:30 - a new manager object and three new
15:32 - employee objects then we assign these
15:34 - three employee objects to the managed
15:36 - employees property of the manager object
15:39 - now this manager object has a reference
15:41 - to these three employee objects now this
15:44 - is an object graph with relationships we
15:47 - could use core data to save this manager
15:49 - object and then later to get it back
15:51 - however before you can get to this point
15:53 - there are actually a series of steps
15:55 - that you must first do in Xcode there's
15:58 - a tool called the Xcode data model
16:01 - editor which you use to design your data
16:03 - schema well you have to first create
16:06 - your data model consisting of the
16:08 - manager and employee and how they're
16:10 - related in this Xcode data model editor
16:13 - then from this data model you generate
16:16 - the manager and employee classes so
16:18 - instead of declaring the classes
16:20 - yourself you first model them in the
16:22 - Xcode data model editor and then you
16:25 - generate the classes from that and as a
16:27 - side note under the hood core data uses
16:30 - an SQLite database that's something that
16:33 - is hidden from you and not designed for
16:35 - you to peek into the core data framework
16:39 - is free to use and you can simply add it
16:41 - to your Xcode project and start using it
16:44 - some advantages of using core data are
16:47 - it's a first-party library it's created
16:49 - and endorsed by Apple it's easier to use
16:53 - now compared with before it used to be
16:55 - that it took a lot of code to do routine
16:56 - tasks with core data but Apple has now
16:59 - cut down on the amount of code needed so
17:01 - it's the perfect
17:02 - time to get into it and some cons it's
17:05 - not for connected scenarios so it really
17:07 - depends on what you're doing with your
17:09 - app and secondly it might be overkill if
17:12 - what you need to do in your app is just
17:13 - store some settings or store some
17:16 - offline data that isn't a huge volume if
17:20 - you fire up your browser and visit their
17:22 - website at realm IO you'll see that they
17:25 - actually have two products one is called
17:28 - realm platform and the other is realm
17:30 - database the realm database is what
17:33 - we're after and it's open source and
17:34 - free to use the realm platform is
17:36 - they're paid offering that provides data
17:38 - synchronization capabilities to your app
17:40 - if you need it in this course we're
17:42 - going to be using the free realm
17:44 - database alright
17:45 - let's dive in in the previous lesson
17:48 - about core data I told you about how
17:50 - core data can persist your object graph
17:52 - on the local device
17:53 - well realm does the same thing at the
17:55 - end of the day they are both used to
17:57 - persist data on the local device so that
17:59 - it can be retrieved later however the
18:02 - way they persist data behind the scene
18:04 - is different and also how you implement
18:06 - these two frameworks in your Xcode
18:08 - project is also different in the
18:10 - previous lesson you learn that core data
18:12 - uses SQLite behind the scenes while
18:15 - realm just stores the data for your app
18:16 - in a file locally on your device this
18:19 - file can be opened to look at the data
18:21 - inside in fact they have a free tool
18:23 - called the realm studio that lets you
18:26 - open the data file and browse or edit
18:28 - the data with core data you learn that
18:30 - in order to persist objects these
18:32 - objects must be from a class that was
18:34 - generated from the data model which you
18:36 - designed in the Xcode data model editor
18:39 - with realm you don't do any of that you
18:42 - can persist any class you want simply
18:44 - make it a subclass of object which is a
18:47 - realm class that has all of the code to
18:49 - make the magic happen furthermore you
18:52 - dictate which properties of the objects
18:54 - should also be persisted by adding this
18:57 - in front of the object declaration realm
19:01 - database is pretty simple to understand
19:03 - and to get up and running with
19:06 - the realm database is open source and
19:08 - free to use realm studio is also free
19:12 - some advantages of using realm database
19:15 - are it's a lot easier to jump in and use
19:17 - compared to core data you don't need to
19:20 - understand as much about the framework
19:22 - and how it works underneath the hood you
19:25 - can just get up and start using it and
19:27 - pretty easy to understand another
19:29 - advantage is that it's got the realm
19:31 - studio so you can actually browse the
19:34 - data local to the device and you can
19:36 - edit you can delete you can add data
19:39 - into it where compared to core data you
19:42 - don't have that sort of administrative
19:43 - back-end to use now some cons again it's
19:48 - not for connected scenarios so again it
19:50 - really depends what your app is trying
19:52 - to do and for the second one make of it
19:54 - what you will but core data is a
19:56 - first-party apple framework whereas
19:59 - realm is a third party framework so
20:03 - there you have it my thoughts on MySQL
20:05 - cloud kit firebase core data and realm
20:08 - if you want my opinion on which one I
20:11 - would choose personally then stay tuned
20:13 - for the next video because that's
20:15 - exactly what I'm going to tell you guys
20:17 - now I want to turn over to you which one
20:20 - appeals to you the most and is there
20:22 - another database option that you'd like
20:24 - me to cover let me know by leaving a
20:26 - comment below right now and lastly if
20:29 - you'd like this video please give it a
20:30 - thumbs up and don't forget to subscribe
20:32 - for videos every week all right so we're
20:35 - gonna talk again soon bye

Cleaned transcript:

hey cuckoo what's going on today I'm gonna go over some database options and what I like and what I don't like about each one specifically we're going to go through MySQL cloud kit firebase core data and realm now that's a lot of options to go through so I won't spend that much time on each one I'm gonna give you an overview how data is stored how much it costs and pros and cons for each of the options so alright let's get started undoubtedly MySQL is the most popular out of all the options we've listed traditionally MySQL has been used for web development and powers many websites including my own the most popular content management system WordPress which is installed on over 16 million websites also runs off of MySQL however what's right for web development doesn't mean that it's automatically right for app development before you can understand the difference let's talk about clients versus servers think of a server as a computer sitting somewhere whose sole job is to receive requests and send responses in the web development scenario we call this the web server your database sits on a database server when you sign up for some website hosting and you create your website those files also sit on a web server your browser like Safari and Chrome is called a client when you launch the browser and you visit your website your browser makes a request to the web server the web server then requests the data from the database server combines that data with HTML and CSS and returns it as a response to your browser then your response renders that HTML and CSS code on the screen for you to see so that's what happens in web development in app development your app is a client just like the web browser it cannot connect directly to the database server it needs some sort of middle layer just like the web site files in the web development scenario for app development we call these files web services these web services sit on the web server and wait for requests when your app makes a request to the web service the web service makes a request to the database server and returns that data in some sort of format that your app will understand typically it will be the JSON format that you learned about in the beginner course so here lies the challenge with using MySQL as a database solution for mobile apps you need to build the app client and the web services yourself whereas in web development the browser is already built for you and you only need to construct your website now I'm not saying that we should never use MySQL for app development for example you might already have a MySQL database full of data and you're looking to build an app to serve that data up another example is that you already have a membership site where all of the user accounts are stored in a MySQL database and you're looking to make a companion app for your website or maybe you are already familiar with using MySQL SQL queries and writing web services then go ahead and use it for your app too however if you're starting a brand new app that is free of any constraints then consider all of your options first next up we're going to talk about how data is stored in MySQL data is stored in a MySQL database much like how a spreadsheet would be organized for instance you might have a spreadsheet to keep track of all of the employees in your company you name the spreadsheet employees and inside it you create columns to represent different details of each employee then each row in the spreadsheet would represent one employee in MySQL you have tables instead of spreadsheets so you'll have an employee table in my SQL table is organized exactly like your spreadsheet you'll have columns for the different pieces of data you want to track per employee and each row in your table will represent an employee now let's talk about how much using MySQL will cost in terms of costs most web hosting plans come with a MySQL database and they can start as low as four dollars a month you'll also need a domain name so that your app has a URL to hit for your web services this costs around 10 to 20 dollars a year if you're thinking about going down this route check out the links in the description below however if you haven't explored all of the options in this module yet I would strongly urge you to watch all of them before making up your mind next let's talk about some pros and cons some advantages of using MySQL for app development are familiarity lots of people are familiar with how a MySQL database is structured it's also tried and tested MySQL has been around for a while now some disadvantages are you need to write your own web services this may require you to learn a completely different programming language such as PHP also with a low cost web hosting plan you probably won't be getting the infrastructure to support high load scenarios and you also probably won't have any data redundancy so if your database server goes offline then your app won't be able to access it cloudkit is Apple's backend as a service solution to store your app and user data in the cloud now if this is your first time hearing the term backend as a service it's basically all of the backend infrastructure to enable things like file storage and data storage user management and notifications and more all done for you and available through a single API now it sounds great right it is except that these backend platforms aren't free however most of these platforms have a free tier that allow you to use all of the infrastructure and services for free until you reach the limits of the free tier the great thing about using one of these backend platforms is that you get a lot of robust infrastructure for your data storage for example data redundancy your data is backed up and synced across multiple data centers so if one goes down the request is routed to one that is online another freebie is load balancing so requests for data get distributed across multiple data centers to prevent creating a bottleneck at one specific server this prevents the scenario where your app is waiting for a long time for data because of high volume so those are just two examples of why I like using these backend services such as cloud kit now we're not going to dive too deep into how cloud kit works but I wanted to give you an overview of how the data is stored cloudkit uses the concept of containers databases and records your app has one container which contains three different databases a public database where the data is accessible by anyone a private database where the data is accessed by a specific user a shared database where the data is accessible between a group of users within each database you store the actual data in what is called a record each record contains key value pairs just like a dictionary in Swift however each record is of a certain type and you defined these record types in your cloud kit dashboard for instance you might have an employee record type containing these properties and a manager record type containing other properties then in your database you can create employee and manager records each of these records will contain the key value pairs that you defined in the record types furthermore these records are organized into record zones so on the cloud kit page on developer.apple.com there is a pricing calculator that you can calculate how much it would cost depending on how many active users you have and you can see that it scales up as you get more and more active users and even at 10 million active users your total cost is 0 as long as you stay within these limits here now before we mentioned that your app has different databases there's a public one there's a private one and there's a shared one the private and shared one and where you store data that is specific to a user or shared between certain users that storage is calculated against the user's iCloud account limits and it's not counted toward your app limits however the public data that you store is counted towards these limits here now the next question is what is defined as an active user well actually if you scroll down on the page here in this fine print it says that an active user is defined as having active container usage that means they've been using the database capabilities of your app within the last 16 months and then it also tells you some of the fees that are involved if you have any overage I have to start off with the major drawback of cloudkit and that is that there's no official SDK for Android they obviously have an iOS SDK that you can just drop into your Xcode project to work with cloud kit and they also have a JavaScript SDK that you can have a web map connect to your cloud kid database but there's no official Android SDK which means that if you have an Android app you're gonna have to build a set of web surfaces using the JavaScript SDK and then have your Android app send requests to that set of web services which you built another thing is you can store public data on the cloud kit databases however private data is stored on the user's iCloud account that means if you're using cloud kit and you're gonna be storing private data your users must have an iCloud account now this shouldn't be a problem if you're building an app that runs on iOS because as part of the set up process for the device the users have to sign in with an Apple ID or sign up for a new one and that is basically an iCloud account too however if you're building an Android version of the app and an Android user might not necessarily have an iCloud account or an Apple ID and they'd have to go and sign up for one if your app is going to be Apple only such as mac OS iPad app or an iPhone app then Club kit might be an easy solution for you so some pros of cloud kit include it's easy to use if you're developing for Apple platforms only and there's a generous free tier now some cons users must be signed into iCloud to store private data and it's not easily a crossplatform solution even though you can make it work all right so that's cloud kit firebase is also a backend as a service but unlike cloud kit it is crossplatform in the sense that it fully supports Android meaning that it has an SDK for it as well so if you're gonna build an Android version or a web version of the same app then it's going to easily be able to use the same firebase database as your iOS app does in addition to that the firebase platform also includes a lot of additional backend features such as notifications user management file storage lytx crash reporting and more there's actually quite a bit more as you can see from their homepage however let's focus on the database aspect of the platform right now the only tough thing about using firebase for data storage is that you have to wrap your head around the way that the data is stored firebase is a no SQL database if you're used to writing SQL queries with a traditional database like MySQL or Microsoft sequel server then it's going to take a bit of practice to get used to using a no SQL database like firebase in firebase data is stored as a JSON document think about how we structured the question data in the quiz module of the beginner course you can literally import that JSON document to the firebase database here's how it would look in your firebase database to access data you would just need to know the path to the element that you need to add data you can add key value pairs to existing objects or create new nodes there's no concept of tables rows or columns that's why it takes a little time to wrap your head around if you're coming from the world of traditional databases in terms of pricing firebase has a free tier but it's not based on active users like cloud kit is your going to have to see how this fits within your budget and within the plans for your app to be honest with you my own point of view is that it's more important for me to get my app up and running as quickly as possible rather than worrying about incurring some extra costs if I'm hitting the limits of the free tier and I think that's a great problem to have and I fully expect to be generating some sort of revenue from my app anyways the only thing I'd worry about in terms of hitting the limits of this firebase free plan is the file storage limits if you allow your users to upload large files that you might hit that cap pretty quickly so some of the pros are the firebase platform has a lot of backend features firebase is owned by Google who is arguably pretty good at handling data I would trust their infrastructure now some of the cons no ask you all might take some time to get used to query efficiency also really depends on how your data is structured and coming up with the data schema is a big learning curve now compared to the other database solutions we've talked about so far core data is very different first of all MySQL cloud kit and firebase are all remote database solutions that means that the data is stored on a remote server somewhere where all your users can access it core data is different because it's local on the user's device that means that it's not the solution for connected scenarios like generating user accounts or having user generated content core data is a solution where you need data persistence on your local device for instance your app works with a large offline data set that is stored locally on the device now notice that I've been very careful not to call core data a database and that's because it is not core data is an object graph manager and you can think of an object graph as simply a bunch of objects and the relationships between those objects let's take a closer look remember back in the beginner course in the quiz app we downloaded a JSON file which we parsed to get an array of questioned objects although there aren't any relationships but the question objects this is still an object graph with core data we could preserve all these objects in their current state on disk and then bring them back later it's like putting this graph on deep freeze and then thawing it later to get back all of these objects the cool thing is that you don't have to get back all of them you can query and look for what you need and retrieve a subset of your objects that are stored in core data let's take a look at another example let's say that you have an employee class and a manager class the manager class actually has a property called managed employees that stores an array of employee object references we create a new manager object and three new employee objects then we assign these three employee objects to the managed employees property of the manager object now this manager object has a reference to these three employee objects now this is an object graph with relationships we could use core data to save this manager object and then later to get it back however before you can get to this point there are actually a series of steps that you must first do in Xcode there's a tool called the Xcode data model editor which you use to design your data schema well you have to first create your data model consisting of the manager and employee and how they're related in this Xcode data model editor then from this data model you generate the manager and employee classes so instead of declaring the classes yourself you first model them in the Xcode data model editor and then you generate the classes from that and as a side note under the hood core data uses an SQLite database that's something that is hidden from you and not designed for you to peek into the core data framework is free to use and you can simply add it to your Xcode project and start using it some advantages of using core data are it's a firstparty library it's created and endorsed by Apple it's easier to use now compared with before it used to be that it took a lot of code to do routine tasks with core data but Apple has now cut down on the amount of code needed so it's the perfect time to get into it and some cons it's not for connected scenarios so it really depends on what you're doing with your app and secondly it might be overkill if what you need to do in your app is just store some settings or store some offline data that isn't a huge volume if you fire up your browser and visit their website at realm IO you'll see that they actually have two products one is called realm platform and the other is realm database the realm database is what we're after and it's open source and free to use the realm platform is they're paid offering that provides data synchronization capabilities to your app if you need it in this course we're going to be using the free realm database alright let's dive in in the previous lesson about core data I told you about how core data can persist your object graph on the local device well realm does the same thing at the end of the day they are both used to persist data on the local device so that it can be retrieved later however the way they persist data behind the scene is different and also how you implement these two frameworks in your Xcode project is also different in the previous lesson you learn that core data uses SQLite behind the scenes while realm just stores the data for your app in a file locally on your device this file can be opened to look at the data inside in fact they have a free tool called the realm studio that lets you open the data file and browse or edit the data with core data you learn that in order to persist objects these objects must be from a class that was generated from the data model which you designed in the Xcode data model editor with realm you don't do any of that you can persist any class you want simply make it a subclass of object which is a realm class that has all of the code to make the magic happen furthermore you dictate which properties of the objects should also be persisted by adding this in front of the object declaration realm database is pretty simple to understand and to get up and running with the realm database is open source and free to use realm studio is also free some advantages of using realm database are it's a lot easier to jump in and use compared to core data you don't need to understand as much about the framework and how it works underneath the hood you can just get up and start using it and pretty easy to understand another advantage is that it's got the realm studio so you can actually browse the data local to the device and you can edit you can delete you can add data into it where compared to core data you don't have that sort of administrative backend to use now some cons again it's not for connected scenarios so again it really depends what your app is trying to do and for the second one make of it what you will but core data is a firstparty apple framework whereas realm is a third party framework so there you have it my thoughts on MySQL cloud kit firebase core data and realm if you want my opinion on which one I would choose personally then stay tuned for the next video because that's exactly what I'm going to tell you guys now I want to turn over to you which one appeals to you the most and is there another database option that you'd like me to cover let me know by leaving a comment below right now and lastly if you'd like this video please give it a thumbs up and don't forget to subscribe for videos every week all right so we're gonna talk again soon bye
