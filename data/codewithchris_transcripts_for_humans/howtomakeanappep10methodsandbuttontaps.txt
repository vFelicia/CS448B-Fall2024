With timestamps:

00:04 - hey guys welcome to lesson 10 of how to
00:07 - make iphone apps with no programming
00:09 - experience and in this lesson we are
00:12 - going to look at some more complicated
00:14 - methods how to have methods where they
00:18 - accept input data and as well as
00:21 - returning data to the caller of the
00:23 - method and then we're going to create a
00:25 - method and see how we can attach it to a
00:28 - button tap so before we get to the
00:31 - latter part we're going to start with a
00:33 - playground and I'm gonna show you some
00:35 - examples of more complex methods so if
00:39 - you're unfamiliar with starting a new
00:40 - playground you should look at I think it
00:42 - was lesson 2 where we introduced
00:45 - playgrounds as a way to just test out
00:48 - some code and I'm just gonna name this
00:50 - one methods playground I'm gonna save it
00:57 - on my desktop we're going to start by
01:01 - declaring the person class just like
01:04 - we've done in our previous playground
01:06 - sessions and it's just to give us a
01:09 - little more practice in declaring and
01:13 - working with classes so if you can
01:17 - follow along on your own laptop or your
01:20 - own computer and we're going to declare
01:22 - a method called
01:25 - actually before we do that let's give
01:27 - this guy some properties so we can
01:29 - practice doing that and we're gonna use
01:32 - these properties in the methods that
01:34 - we're going to declare so VAR I'm gonna
01:39 - create a name property it's gonna be of
01:41 - type string it's gonna have an initial
01:44 - actually let's do things a little bit
01:46 - differently this time I'm not gonna give
01:48 - it an initial value I'm gonna go far age
01:53 - and it's gonna be of type int which is a
01:57 - number and instead of setting the
02:00 - initial value there if you don't set it
02:01 - in the declaration you have to set it in
02:04 - the init method so I'm gonna go self dot
02:07 - name equals initial name
02:12 - and self dot H equals let's say ten okay
02:19 - and now we're going to create a method
02:21 - that will update both the name and age
02:25 - so that's right func
02:28 - update name and age okay and inside here
02:37 - we're gonna update the name to Tom and
02:43 - update the Nate at the age to twelve
02:47 - let's say so below here let's create a
02:51 - new person object VAR a equals person
02:55 - and as you can see from the values on
03:00 - the right hand side the initial name the
03:03 - name property is set to initial name and
03:05 - the age of set to ten now if we call the
03:07 - method update name and age you can see
03:15 - now the result is telling us that the
03:18 - name Tom and the age is twelve so let's
03:23 - verify that by just doing that and you
03:30 - can see that the name property is at Tom
03:32 - right now
03:33 - now that method update name and age
03:35 - would be a lot more useful if we could
03:37 - actually pass in the name and the age
03:40 - and have the property set to the values
03:42 - that we pass in instead of these
03:44 - hard-coded values and hard-code is just
03:47 - the programming term to describe that
03:49 - the values are set to a non changing
03:52 - value which is what these two are so
03:56 - calling this method will always set the
03:58 - properties to these hard-coded values
04:00 - instead we want to set these properties
04:02 - to whatever values are passed in to make
04:06 - the dynamic so let's see how we can do
04:09 - that inside the set of round brackets
04:12 - here we can just declare two parameters
04:14 - and they're declared the same way we've
04:16 - done in the properties up here so let's
04:19 - call it
04:22 - name string so that's the first
04:26 - parameter comma the next one age in and
04:34 - just like that we've declared that this
04:37 - method accepts two parameters one of
04:39 - type string and one of type in and these
04:42 - parameter names that we give it here we
04:45 - can refer to those names inside these
04:47 - methods to refer to the values that are
04:49 - passed in so if I wanted to set the
04:52 - property name to the name that's passed
04:57 - in then I use this parameter name and
05:00 - I'll write that or you can even change
05:05 - this to say name to set so it's not as
05:09 - confusing okay and if we want to set the
05:14 - age property of this person object to
05:17 - the age that's passed in let's change
05:20 - that and right age to set we write each
05:25 - to set and now you can see that the
05:28 - playground is is complaining about this
05:30 - method called because it it knows that
05:34 - the method needs two parameters to be
05:37 - passed in and right now we're not
05:38 - passing in any okay so let's pass it in
05:42 - and let me actually erase that and erase
05:44 - this if we were to write a line of code
05:47 - to call that method and we start by
05:49 - typing in the object we want to call the
05:51 - method on because that's part of the
05:53 - method call so we go a which is our
05:56 - object dot and then from this menu you
05:59 - can see that the update name and age
06:01 - method appears now I press Enter you
06:05 - know Xcode has pretty much filled in the
06:08 - the method call for us and I can press
06:11 - tab on my keyboard to tab between the
06:14 - two parameters that I need to specify
06:16 - now pay attention to this and take note
06:19 - that the second parameter you can see
06:22 - has the parameter name followed by colon
06:26 - and then I'm going to fill in an INT in
06:29 - here to pass in but the first parameter
06:31 - doesn't have the parameter name that's
06:34 - kind of how the syntax
06:36 - goes so let's fill in a name here and
06:40 - I'm gonna type it as Brad and I'm gonna
06:44 - press tab to go to the next parameter
06:45 - and I'm gonna set the age to 15 so I'm
06:49 - gonna pass it to 15 now if there were
06:52 - three parameters that I needed pass in
06:55 - it would actually look like comma and
06:58 - then the third parameter name followed
07:00 - by colon and then the value I pass it in
07:01 - it's always just the first parameter
07:04 - that I don't have to put the parameter
07:07 - name or parameter label there if the
07:10 - method only accepted one parameter then
07:14 - I wouldn't have to put any parameter
07:17 - label and it just looked like something
07:19 - like that but when you have more than
07:23 - one parameter in a method call after the
07:27 - first one the subsequent ones you have
07:29 - to call it with the parameter name
07:32 - usually that's not a problem because
07:35 - Xcode kind of autocompletes the method
07:38 - call so it's very easy when you you know
07:41 - start typing the method name and then
07:42 - you just press enter and it kind of
07:44 - fills in all of the labels for you and
07:46 - all you have to do is tab between the
07:48 - values and fill it in so now when I call
07:55 - the name property you can see in the
07:57 - result it's set to Brad and the age is
08:02 - set to 15 so that's very simply how you
08:06 - can declare a method which accepts data
08:11 - to be used inside of the method now what
08:15 - if we wanted to create a method that
08:17 - would return a value to the caller for
08:20 - example you may want a method that
08:22 - performs some sort of calculation and
08:24 - returns the result to the calling to the
08:27 - caller or perhaps you have a method that
08:31 - performs some sort of task and it should
08:34 - return back to the caller some sort of
08:37 - status whether that task succeeded or
08:40 - failed let's create a method that will
08:43 - increase the age of the object of the
08:49 - an object and then returned the new age
08:52 - back to the caller so let's put one
08:58 - parameter age to increase by and it's
09:04 - going to be an int and now to specify a
09:07 - return value all you need to do is use
09:11 - this - symbol and then that arrow and
09:15 - now you can specify the type of data
09:18 - that the method is going to return to
09:21 - the caller in this case it's going to be
09:22 - an int and then I'm going to do the
09:25 - curly braces and now I'm going to write
09:30 - self dot age plus equals and this is
09:34 - going to take the number and it's going
09:38 - to add it to the existing number in the
09:41 - property so I'm gonna type age to
09:44 - increase by now another way I've could
09:47 - have written this is self thought age
09:51 - equals self dot age plus age to increase
09:58 - by either of these lines of code can be
10:01 - used they're equivalent so the first one
10:03 - is a little bit of shorthand okay so now
10:07 - I've actually taken the parameter the
10:10 - input parameter and added it to the age
10:13 - and now I have to return a value from
10:18 - this method because I've specified this
10:21 - up here as a return value so we have to
10:24 - use the return keyword and then I have
10:28 - to put some sort of data here to return
10:31 - to the caller and it has to be of the
10:33 - type int because that's what I specified
10:35 - there so I'm just going to return the
10:37 - new age which happens to be what we set
10:41 - into here so I'm just gonna return self
10:44 - dot H okay so let's try this out erase
10:49 - those two I'm gonna declare a new
10:51 - variable called new age equals a dot
10:57 - increase age and I'm gonna increase it
11:01 - by five
11:03 - so the reason I'm creating a new
11:05 - variable is because this method returns
11:08 - some sort of value so whatever value it
11:12 - returns I want to store it into new age
11:14 - so now I've made this method call and it
11:18 - passes in five into the increased age
11:20 - method it's gonna add five to South dot
11:23 - H which was 15 because this line here
11:27 - set it to 15 so it added five to that
11:32 - and then it's gonna return the current
11:34 - value in self age which is 20 so I take
11:40 - that value that this method returns and
11:43 - I store it into new age so now when I
11:47 - just check what's in here you can see in
11:51 - the result here there's 20 so note that
11:54 - when you have this symbol here with the
11:57 - datatype that the method is going to
12:00 - return you have to have a return keyword
12:02 - in your method now in addition to that
12:07 - after you return some data that method
12:11 - is done even if you write some code
12:13 - right here below the return statement it
12:16 - won't get executed as soon as it
12:19 - executes to return whatever data that's
12:22 - as far as it goes the execution stops at
12:25 - this line and then returns to the caller
12:32 - now both of these methods that we
12:35 - declared for this person class they're
12:37 - called instance methods and that means
12:40 - that these methods must be called on a
12:44 - person object so you can see down here
12:46 - that we created a person object and we
12:49 - assigned it to the variable a and we're
12:51 - always calling these methods using a dot
12:54 - the method name because the method call
12:58 - structure or syntax is the object that
13:02 - you want to call the method on and then
13:04 - dot and then the method name well
13:06 - there's another kind of method called
13:07 - type methods and these methods don't
13:10 - require any sort of object to call
13:13 - instead you specify the class
13:17 - method so let's demonstrate in the
13:20 - person class I'm going to create a class
13:22 - method so in order to create a class
13:26 - method it looks just like a regular
13:28 - method except that it has a class
13:31 - keyword in front of it so don't get
13:33 - confused with declaring a new class
13:35 - because that's not what we're doing here
13:37 - you go class func and then let's say
13:41 - that this method will return the average
13:45 - age I'm just going to return a
13:54 - hard-coded number for the purpose of
13:57 - demonstration I'm just going to put 50
14:02 - so if we wanted to call this new method
14:05 - that we created we don't type a dot
14:08 - because this is a class method or type
14:11 - method as it's called in Swift we don't
14:14 - call it on an instance or an object we
14:17 - call it on the class itself so you have
14:20 - to write person dot average age and
14:25 - because it returns a value I probably
14:27 - want to just create a new variable and
14:31 - store that value that it returns so when
14:33 - would you use a class method versus an
14:36 - instance method well by and large you'll
14:38 - be declaring and using instance methods
14:40 - because those are the ones that pertain
14:42 - to the object in question and those are
14:44 - more commonly used whereas a class
14:46 - method is typically used for a quick
14:48 - calculation or to return some values
14:51 - that don't have to do with any specific
14:54 - object so you can see here in my example
14:57 - the other two methods specifically deal
14:59 - with that person objects name and H
15:02 - whereas the class method is kind of
15:05 - asking a general question like what's
15:07 - the average age of a person this is not
15:10 - that great of an example but when we go
15:12 - back to Xcode and we're working with
15:14 - building our apps you're going to see
15:16 - some great examples of some type methods
15:18 - in the UI kid classes I just wanted to
15:21 - introduce these type methods to you so
15:23 - that later on when we're working in our
15:25 - Xcode project and we come across some
15:27 - type methods that belong to the UI kid
15:29 - classes
15:30 - I'll be able to point them out and
15:32 - you'll be able to understand what it is
15:33 - and then connect the dots okay and now
15:36 - we're going to go back into our Xcode
15:37 - project for our card game war and we're
15:40 - gonna see how we can attach a method to
15:42 - a button tap in the storyboard okay so
15:45 - I'm back in our Xcode project that we've
15:47 - been working on for the last couple
15:49 - lessons and I'm also in assistant editor
15:53 - view where we have the
15:54 - viewcontroller.swift
15:56 - on the right-hand side and the
15:58 - storyboard on the left-hand side and
16:00 - just like how we created iboutlet
16:03 - properties for all of the storyboard
16:05 - elements we can do the same thing with
16:08 - creating a method that is going to be
16:12 - attached to our play round button so I'm
16:15 - going to hold down control on my
16:16 - keyboard I'm going to click the play
16:19 - round button and I'm gonna drag it over
16:21 - here instead of putting it up here where
16:24 - you declare properties I'm gonna put it
16:27 - outside outside of any other methods but
16:31 - above this closing bracket it's kind of
16:33 - where you would normally declare a
16:35 - method and in here for the connection I
16:40 - don't want to put outlet because that
16:42 - would be creating an iboutlet property
16:43 - instead I want to put action and this is
16:46 - gonna create an action method for the
16:49 - event you can leave it as touch up
16:51 - inside and that just means that this
16:54 - event is when the user taps the button
16:56 - and when they let go when they raise
16:59 - their finger and they let go of the
17:01 - button that their finger is still inside
17:03 - and within the button so that's what
17:04 - touch up inside means so for the type
17:10 - I'm just going to put my UI button and
17:14 - then for the name I'm going to put play
17:18 - round tapped okay so now it creates a
17:26 - method for me and you can see that this
17:28 - looks like a normal method except that
17:31 - it's got this IB action keyword and just
17:34 - like the IB outlet keyword this
17:37 - specifies that this method can be
17:40 - connected to an event for an element in
17:43 - our storyboard
17:44 - in this case it's going to be an event
17:47 - for our button and just like the
17:50 - property you can see that there's a
17:51 - filled in gray circle here indicating
17:54 - that this method is connected to an
17:57 - element in our storyboard and also just
17:59 - like properties if you if you have a two
18:02 - button mouse and you right-click this
18:04 - guy or if you have a single button now
18:06 - so you can hold down control and click
18:08 - it and you get this menu you can see
18:11 - that here touch up inside is connected
18:15 - to this method play round tapped as well
18:19 - as it's connected to an outlet play
18:22 - round button all right so it's kind of
18:24 - similar to the way we did properties in
18:27 - here I can put in any code that I want
18:30 - executed when this button is tapped now
18:34 - this method has one parameter the
18:37 - parameter name is sender and the type is
18:40 - UI button and that's what type this guy
18:43 - is so what this parameter is is that it
18:48 - gives me access or gives me a reference
18:50 - to the button that triggered this method
18:53 - I don't really need it because I already
18:56 - have a property here play around button
18:59 - that we connected to that element so you
19:02 - know I have two ways of referring to
19:05 - that button either with the sender
19:08 - parameter or with the property the
19:13 - iboutlet property that i connected to
19:15 - the button so just for demonstration
19:17 - purposes when this play round tapped is
19:20 - tapped I am going to change the button
19:25 - name back to back to play round because
19:30 - up here in the viewdidload
19:31 - we changed it to play so in the future
19:34 - obviously we're going to be when the
19:36 - play round button is tapped we're going
19:38 - to be changing card images randomizing
19:41 - the cards and so on and so forth but for
19:43 - now I just want to demonstrate this
19:45 - method so I'm gonna copy this code I'm
19:47 - gonna put it here and then I changed the
19:49 - title of the button back to play round
19:52 - so I'm gonna run it
20:01 - so you can see that this line of code in
20:04 - the viewdidload changed the button title
20:06 - to play when I tap it however it's going
20:09 - to execute this method and it's gonna
20:12 - execute this line of code which is going
20:14 - to change it back to play round so you
20:17 - can see that now when you run your app
20:21 - and the screen is just black you might
20:23 - think your app has crashed well there's
20:25 - one thing that beginners actually
20:27 - accidentally do so let me demonstrate in
20:30 - the code some beginners accidentally set
20:33 - a breakpoint by clicking this gray area
20:36 - here you'll notice that when you click
20:39 - this gray area it puts this blue mark
20:41 - here and that's what's called a
20:43 - breakpoint when we get to debugging our
20:46 - code and tracing our code we're going to
20:49 - be using and learning about breakpoints
20:50 - but for now breakpoints is just going to
20:52 - pause the execution of your code so for
20:55 - example if I accidentally set a
20:57 - breakpoint here when I run my app and I
21:03 - click this button to run this code it's
21:09 - gonna highlight this line in green
21:11 - because I've set a breakpoint here and
21:13 - this just means that the execution of my
21:17 - program has stopped at this point it's
21:19 - paused right so if you've accidentally
21:22 - set a breakpoint you want to stop your
21:24 - project and then you just want to click
21:27 - it again to deactivate you can see now
21:29 - it's kind of still there but it's
21:31 - deactivated it's in faint blue or you
21:34 - can completely drag it off in and kill
21:36 - the breakpoint by just clicking and
21:38 - dragging it off that bar see if you had
21:43 - your breakpoint let's say here in the
21:45 - viewdidload method and then you ran your
21:48 - app you know it it would stop at that
21:54 - point so you wouldn't even see your
21:56 - loaded screen so that's just something
21:58 - to watch out for if you've accidentally
22:00 - set a breakpoint you can just drag it
22:03 - off and then stop your project and then
22:06 - rerun it in the next lesson we're going
22:08 - to generate a random
22:09 - when we tapped the play round button and
22:11 - we're gonna store that inside a variable

Cleaned transcript:

hey guys welcome to lesson 10 of how to make iphone apps with no programming experience and in this lesson we are going to look at some more complicated methods how to have methods where they accept input data and as well as returning data to the caller of the method and then we're going to create a method and see how we can attach it to a button tap so before we get to the latter part we're going to start with a playground and I'm gonna show you some examples of more complex methods so if you're unfamiliar with starting a new playground you should look at I think it was lesson 2 where we introduced playgrounds as a way to just test out some code and I'm just gonna name this one methods playground I'm gonna save it on my desktop we're going to start by declaring the person class just like we've done in our previous playground sessions and it's just to give us a little more practice in declaring and working with classes so if you can follow along on your own laptop or your own computer and we're going to declare a method called actually before we do that let's give this guy some properties so we can practice doing that and we're gonna use these properties in the methods that we're going to declare so VAR I'm gonna create a name property it's gonna be of type string it's gonna have an initial actually let's do things a little bit differently this time I'm not gonna give it an initial value I'm gonna go far age and it's gonna be of type int which is a number and instead of setting the initial value there if you don't set it in the declaration you have to set it in the init method so I'm gonna go self dot name equals initial name and self dot H equals let's say ten okay and now we're going to create a method that will update both the name and age so that's right func update name and age okay and inside here we're gonna update the name to Tom and update the Nate at the age to twelve let's say so below here let's create a new person object VAR a equals person and as you can see from the values on the right hand side the initial name the name property is set to initial name and the age of set to ten now if we call the method update name and age you can see now the result is telling us that the name Tom and the age is twelve so let's verify that by just doing that and you can see that the name property is at Tom right now now that method update name and age would be a lot more useful if we could actually pass in the name and the age and have the property set to the values that we pass in instead of these hardcoded values and hardcode is just the programming term to describe that the values are set to a non changing value which is what these two are so calling this method will always set the properties to these hardcoded values instead we want to set these properties to whatever values are passed in to make the dynamic so let's see how we can do that inside the set of round brackets here we can just declare two parameters and they're declared the same way we've done in the properties up here so let's call it name string so that's the first parameter comma the next one age in and just like that we've declared that this method accepts two parameters one of type string and one of type in and these parameter names that we give it here we can refer to those names inside these methods to refer to the values that are passed in so if I wanted to set the property name to the name that's passed in then I use this parameter name and I'll write that or you can even change this to say name to set so it's not as confusing okay and if we want to set the age property of this person object to the age that's passed in let's change that and right age to set we write each to set and now you can see that the playground is is complaining about this method called because it it knows that the method needs two parameters to be passed in and right now we're not passing in any okay so let's pass it in and let me actually erase that and erase this if we were to write a line of code to call that method and we start by typing in the object we want to call the method on because that's part of the method call so we go a which is our object dot and then from this menu you can see that the update name and age method appears now I press Enter you know Xcode has pretty much filled in the the method call for us and I can press tab on my keyboard to tab between the two parameters that I need to specify now pay attention to this and take note that the second parameter you can see has the parameter name followed by colon and then I'm going to fill in an INT in here to pass in but the first parameter doesn't have the parameter name that's kind of how the syntax goes so let's fill in a name here and I'm gonna type it as Brad and I'm gonna press tab to go to the next parameter and I'm gonna set the age to 15 so I'm gonna pass it to 15 now if there were three parameters that I needed pass in it would actually look like comma and then the third parameter name followed by colon and then the value I pass it in it's always just the first parameter that I don't have to put the parameter name or parameter label there if the method only accepted one parameter then I wouldn't have to put any parameter label and it just looked like something like that but when you have more than one parameter in a method call after the first one the subsequent ones you have to call it with the parameter name usually that's not a problem because Xcode kind of autocompletes the method call so it's very easy when you you know start typing the method name and then you just press enter and it kind of fills in all of the labels for you and all you have to do is tab between the values and fill it in so now when I call the name property you can see in the result it's set to Brad and the age is set to 15 so that's very simply how you can declare a method which accepts data to be used inside of the method now what if we wanted to create a method that would return a value to the caller for example you may want a method that performs some sort of calculation and returns the result to the calling to the caller or perhaps you have a method that performs some sort of task and it should return back to the caller some sort of status whether that task succeeded or failed let's create a method that will increase the age of the object of the an object and then returned the new age back to the caller so let's put one parameter age to increase by and it's going to be an int and now to specify a return value all you need to do is use this symbol and then that arrow and now you can specify the type of data that the method is going to return to the caller in this case it's going to be an int and then I'm going to do the curly braces and now I'm going to write self dot age plus equals and this is going to take the number and it's going to add it to the existing number in the property so I'm gonna type age to increase by now another way I've could have written this is self thought age equals self dot age plus age to increase by either of these lines of code can be used they're equivalent so the first one is a little bit of shorthand okay so now I've actually taken the parameter the input parameter and added it to the age and now I have to return a value from this method because I've specified this up here as a return value so we have to use the return keyword and then I have to put some sort of data here to return to the caller and it has to be of the type int because that's what I specified there so I'm just going to return the new age which happens to be what we set into here so I'm just gonna return self dot H okay so let's try this out erase those two I'm gonna declare a new variable called new age equals a dot increase age and I'm gonna increase it by five so the reason I'm creating a new variable is because this method returns some sort of value so whatever value it returns I want to store it into new age so now I've made this method call and it passes in five into the increased age method it's gonna add five to South dot H which was 15 because this line here set it to 15 so it added five to that and then it's gonna return the current value in self age which is 20 so I take that value that this method returns and I store it into new age so now when I just check what's in here you can see in the result here there's 20 so note that when you have this symbol here with the datatype that the method is going to return you have to have a return keyword in your method now in addition to that after you return some data that method is done even if you write some code right here below the return statement it won't get executed as soon as it executes to return whatever data that's as far as it goes the execution stops at this line and then returns to the caller now both of these methods that we declared for this person class they're called instance methods and that means that these methods must be called on a person object so you can see down here that we created a person object and we assigned it to the variable a and we're always calling these methods using a dot the method name because the method call structure or syntax is the object that you want to call the method on and then dot and then the method name well there's another kind of method called type methods and these methods don't require any sort of object to call instead you specify the class method so let's demonstrate in the person class I'm going to create a class method so in order to create a class method it looks just like a regular method except that it has a class keyword in front of it so don't get confused with declaring a new class because that's not what we're doing here you go class func and then let's say that this method will return the average age I'm just going to return a hardcoded number for the purpose of demonstration I'm just going to put 50 so if we wanted to call this new method that we created we don't type a dot because this is a class method or type method as it's called in Swift we don't call it on an instance or an object we call it on the class itself so you have to write person dot average age and because it returns a value I probably want to just create a new variable and store that value that it returns so when would you use a class method versus an instance method well by and large you'll be declaring and using instance methods because those are the ones that pertain to the object in question and those are more commonly used whereas a class method is typically used for a quick calculation or to return some values that don't have to do with any specific object so you can see here in my example the other two methods specifically deal with that person objects name and H whereas the class method is kind of asking a general question like what's the average age of a person this is not that great of an example but when we go back to Xcode and we're working with building our apps you're going to see some great examples of some type methods in the UI kid classes I just wanted to introduce these type methods to you so that later on when we're working in our Xcode project and we come across some type methods that belong to the UI kid classes I'll be able to point them out and you'll be able to understand what it is and then connect the dots okay and now we're going to go back into our Xcode project for our card game war and we're gonna see how we can attach a method to a button tap in the storyboard okay so I'm back in our Xcode project that we've been working on for the last couple lessons and I'm also in assistant editor view where we have the viewcontroller.swift on the righthand side and the storyboard on the lefthand side and just like how we created iboutlet properties for all of the storyboard elements we can do the same thing with creating a method that is going to be attached to our play round button so I'm going to hold down control on my keyboard I'm going to click the play round button and I'm gonna drag it over here instead of putting it up here where you declare properties I'm gonna put it outside outside of any other methods but above this closing bracket it's kind of where you would normally declare a method and in here for the connection I don't want to put outlet because that would be creating an iboutlet property instead I want to put action and this is gonna create an action method for the event you can leave it as touch up inside and that just means that this event is when the user taps the button and when they let go when they raise their finger and they let go of the button that their finger is still inside and within the button so that's what touch up inside means so for the type I'm just going to put my UI button and then for the name I'm going to put play round tapped okay so now it creates a method for me and you can see that this looks like a normal method except that it's got this IB action keyword and just like the IB outlet keyword this specifies that this method can be connected to an event for an element in our storyboard in this case it's going to be an event for our button and just like the property you can see that there's a filled in gray circle here indicating that this method is connected to an element in our storyboard and also just like properties if you if you have a two button mouse and you rightclick this guy or if you have a single button now so you can hold down control and click it and you get this menu you can see that here touch up inside is connected to this method play round tapped as well as it's connected to an outlet play round button all right so it's kind of similar to the way we did properties in here I can put in any code that I want executed when this button is tapped now this method has one parameter the parameter name is sender and the type is UI button and that's what type this guy is so what this parameter is is that it gives me access or gives me a reference to the button that triggered this method I don't really need it because I already have a property here play around button that we connected to that element so you know I have two ways of referring to that button either with the sender parameter or with the property the iboutlet property that i connected to the button so just for demonstration purposes when this play round tapped is tapped I am going to change the button name back to back to play round because up here in the viewdidload we changed it to play so in the future obviously we're going to be when the play round button is tapped we're going to be changing card images randomizing the cards and so on and so forth but for now I just want to demonstrate this method so I'm gonna copy this code I'm gonna put it here and then I changed the title of the button back to play round so I'm gonna run it so you can see that this line of code in the viewdidload changed the button title to play when I tap it however it's going to execute this method and it's gonna execute this line of code which is going to change it back to play round so you can see that now when you run your app and the screen is just black you might think your app has crashed well there's one thing that beginners actually accidentally do so let me demonstrate in the code some beginners accidentally set a breakpoint by clicking this gray area here you'll notice that when you click this gray area it puts this blue mark here and that's what's called a breakpoint when we get to debugging our code and tracing our code we're going to be using and learning about breakpoints but for now breakpoints is just going to pause the execution of your code so for example if I accidentally set a breakpoint here when I run my app and I click this button to run this code it's gonna highlight this line in green because I've set a breakpoint here and this just means that the execution of my program has stopped at this point it's paused right so if you've accidentally set a breakpoint you want to stop your project and then you just want to click it again to deactivate you can see now it's kind of still there but it's deactivated it's in faint blue or you can completely drag it off in and kill the breakpoint by just clicking and dragging it off that bar see if you had your breakpoint let's say here in the viewdidload method and then you ran your app you know it it would stop at that point so you wouldn't even see your loaded screen so that's just something to watch out for if you've accidentally set a breakpoint you can just drag it off and then stop your project and then rerun it in the next lesson we're going to generate a random when we tapped the play round button and we're gonna store that inside a variable
