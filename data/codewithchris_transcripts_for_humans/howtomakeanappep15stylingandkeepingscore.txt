With timestamps:

00:01 - [Music]
00:05 - hey guys welcome to lesson 15 of how to
00:07 - make iPhone apps with no programming
00:09 - experience in this lesson we are going
00:12 - to add code to keep score for each round
00:16 - for the player and the enemy now before
00:18 - we do that though I created some
00:20 - graphics to improve the look and feel of
00:23 - our app so I've got a logo here that I'm
00:26 - going to put near the top I've got a
00:28 - deal button which I'm going to replace
00:31 - the playround button with or rather I'm
00:33 - going to add the image to the button and
00:35 - I created a new background so it's got
00:37 - this sort of Spotlight feel to it rather
00:39 - than just uh solid green so let's go
00:43 - ahead and add those Graphics to our
00:47 - asset Library
00:51 - first okay so first we're going to
00:53 - change the background now I named my new
00:56 - graphic assets new background and
00:59 - instead of of adding a new image set
01:01 - called new background I'm just going to
01:03 - highlight these three and I'm going to
01:05 - drag it into uh the spot I'm going to
01:09 - drag it into the image set for the
01:11 - original
01:13 - background and then just like that I can
01:17 - keep the background asset name but the
01:20 - actual assets are using my new
01:23 - image I've got the logo here so I'm just
01:26 - going to drag that into
01:30 - there and I've also got the deal button
01:33 - graphic here so I'm going to drag that
01:36 - there as
01:39 - well okay now let's go into our
01:42 - storyboard now to change our button so
01:45 - you can see that the background image
01:47 - has taken effect already so in order to
01:50 - uh add an image to our button we're
01:53 - going to come here click the button go
01:55 - into the inspector pane on the right
01:56 - hand side and if you scroll down see
02:00 - there's image and there's background if
02:03 - you specify background and you
02:07 - pick uh deal button you see the image is
02:10 - going to appear there but the text is
02:12 - going to appear on top of
02:13 - it so you can either do that and then
02:16 - erase the
02:18 - text or let me just erase the background
02:22 - or you can set it as the image for
02:24 - example if you
02:26 - wanted what was it deal button for
02:29 - example if you wanted the image beside
02:31 - some
02:33 - text so I'm just going to do that but
02:36 - I'm going to erase the
02:38 - text so that we have a button with just
02:41 - an image right there uh but also in view
02:45 - controller. Swift in the viewed load
02:48 - method we were practicing setting uh
02:52 - properties and calling methods in here
02:54 - so this one actually adds the title play
02:57 - so I need to get rid of this line or
02:58 - else it's going to add the the text play
03:00 - beside my button
03:02 - image so I don't want a title for my
03:09 - button okay next we need to add an image
03:14 - uh at the top of our
03:16 - view so we search for UI image view
03:21 - here I'm just going to drag it and drop
03:24 - it right there and now we got to add
03:26 - some constraints to it it's going to get
03:28 - a little bit tricky it took me a little
03:30 - bit to figure out a good way to make it
03:34 - scale in both orientations I'll show you
03:36 - in a second for example I want it
03:39 - centered right so I'm going to
03:42 - click this down here I'm going to put
03:44 - horizontal Center in container I'm going
03:47 - to add that
03:51 - constraint and then I'm also going to
03:53 - add the
03:54 - constraint that it should
03:57 - be let's say 10
04:01 - pixels off the top
04:03 - margin so I'm going to add that
04:06 - constraint and then up here I'm going to
04:08 - set the image to the
04:12 - logo okay I'm going to run the app now
04:16 - so you can see what it looks
04:22 - like okay so you can see that the image
04:25 - looks pretty small and our button image
04:28 - is there
04:31 - if I rotate it you can see that the logo
04:34 - fits as well however I kind of want the
04:37 - logo to be
04:39 - larger uh when it's in portrait View and
04:44 - the original size of the image is
04:46 - actually not this small it's actually
04:48 - larger than this it's actually this size
04:51 - right here so I'm going to add some
04:54 - constraints I'm actually also going to
04:56 - set a background for this uh UI image
05:00 - view so we can see how it
05:05 - stretches so I'm going to add some
05:07 - constraints
05:09 - to uh the margins of this UI image view
05:13 - so I'm going to say
05:17 - that I'm just going to add
05:20 - margins uh all the way around cuz I've
05:24 - already got the top margin I added so
05:25 - I'm going to add the left right and
05:28 - bottom constraint
05:35 - and by doing that it's going to
05:37 - make this UI image view have a
05:42 - constraint right here right here and
05:46 - right here between uh this card
05:49 - container View and this logo so now
05:52 - let's see how it
05:56 - looks okay so now it's you can see it's
05:58 - stretched the bit in this
06:01 - View and when I change it you can see
06:04 - it's stretched flat like
06:06 - that the reason is because uh it's
06:09 - maintaining that this UI image view
06:13 - should be 64 from the left 64 from the
06:16 - right and 50 59 between these two
06:21 - elements between this card view
06:22 - container and the image view so and it's
06:25 - maintaining 10 so that's why it's
06:27 - stretched like this in this View
06:30 - and that's why it's also stretched like
06:31 - that from this view because it's 64 from
06:33 - here 64 from here 59 from here and 10
06:38 - from the
06:39 - top well there's one thing we can change
06:42 - here off the bat is that for the UI
06:45 - image view you can make the image not
06:48 - stretch so there's a mode if you click
06:51 - your UI image view go to the inspector
06:54 - right now it's set to scale to fill so
06:56 - it's just going to scale up the image
06:57 - and disregard the aspect ratio and and
07:00 - that's how we get uh the stretch to
07:02 - image if we don't want it to stretch uh
07:05 - we can do aspect to fit and this is
07:08 - going to maintain the aspect ratio of
07:10 - the image and it's going to fit it
07:12 - inside the bounds of the UI image view
07:16 - aspect fill is kind of the same it's
07:18 - going to uh maintain the aspect ratio of
07:21 - the image but it's going to ignore uh
07:24 - the bounds of the uh UI image view this
07:27 - is the one we want you can play around
07:29 - with it and to see what the difference
07:31 - is visually if you
07:34 - want but now in this way we can it looks
07:38 - pretty decent in portrait and when we go
07:41 - to the landscape view it maintains the
07:44 - aspect ratio so it's not stretched but I
07:47 - find that because this is 59 it's
07:51 - maintaining that this margin here is 59
07:54 - it's squishing the height but here 59 is
07:59 - actually
08:01 - fine so what I want to do instead is
08:04 - maybe specify that this margin shouldn't
08:07 - be 59 but maybe rather should be
08:10 - something like maybe 20 so let's try
08:13 - that I'm going to look for this
08:15 - constraint here when I click it um on
08:19 - the right hand side here on the right
08:21 - hand pane you can see that card view
08:24 - container top which is this guy and the
08:28 - logo bottom which is this guy uh the
08:31 - relationship is equal to 59 so I'm going
08:35 - to change that 59 to
08:38 - 20 okay so let's
08:44 - update update the
08:46 - frames now let's run it
08:53 - again so that looks a lot
08:58 - better so so keep in mind that you can
09:00 - also if we go back to that
09:06 - constraint if I can find it there it is
09:09 - instead of equal you can also do less
09:11 - than or equal to or greater than or
09:13 - equal instead of just
09:17 - equal so like I said playing around with
09:21 - the auto layout and getting your
09:23 - constraints right with the elements does
09:25 - take a little bit of time so try not to
09:28 - get too frustrated
09:30 - now we're going to add some labels for
09:33 - the
09:34 - score so I'm going to search here for
09:37 - the
09:37 - label and I'm going to drag it here and
09:40 - I'm going to add it inside the play
09:42 - button container actually in this lower
09:46 - corner so first of all uh let's add some
09:49 - constraints to this guy I want to Anchor
09:52 - it to the lower left so I'm going to
09:57 - go click this guy here
10:00 - uh anchor
10:02 - anchor and I'm going to
10:05 - put let's say
10:07 - 10 oops I don't want let's try that
10:13 - again add a constraint to the left
10:16 - margin and the right one and I want to
10:18 - set both of them to
10:25 - 10 okay and I want to change the text to
10:28 - White
10:30 - and I want
10:33 - to change the font
10:37 - size to
10:41 - 100 and I want to Center Line it so
10:44 - let's put a number here instead of the
10:46 - label let's just
10:48 - put um
10:51 - one now let's
10:53 - update the frames on this
10:57 - guy okay and let's see if that sticks in
11:00 - that corner when we rotate it left and
11:02 - right and actually we can remove the red
11:05 - background on that image
11:06 - view okay so that stays put the score
11:11 - down
11:12 - there next I'm going to add a
11:15 - lab to indicate that this is the player
11:20 - score and I'm going to select this label
11:23 - I'm going to hold down command and also
11:25 - select
11:26 - my uh score label
11:30 - I'm going to horizontally Center both of
11:34 - them uh in relationship to each other so
11:36 - they'll both be centered down uh this
11:39 - line right here like that you can see
11:41 - that orange line and I also want to
11:46 - basically make this label uh stay on top
11:49 - of the score label so I can add whoops I
11:53 - don't want to select both of them I want
11:55 - to select just this label here
12:00 - and I want specify
12:01 - that the margin below here should be
12:06 - 10 and one trick uh because it says
12:10 - spacing to nearest
12:12 - neighbor right and the nearest neighbor
12:15 - should be this score label but sometimes
12:18 - when your element is overlapping the
12:22 - other element it doesn't
12:23 - detect uh that there is a neighbor here
12:27 - so in order to verify
12:29 - you can click this little drop- down
12:32 - arrow so you can see here that the
12:36 - element I'm
12:37 - specifying my label to be 10 pixels
12:41 - above is actually the play button
12:43 - container which is not what I want
12:45 - because the play button container
12:49 - is is this guy right here this whole
12:53 - container if I specified that my label
12:56 - should be 10 pixels from that it's going
12:58 - to be at the bottom here so
13:01 - instead the problem is is because you
13:04 - see the label the two labels are kind of
13:05 - overlapping and so when I'm trying to
13:07 - add a constraint to my uh my player
13:11 - label here is not detecting this guy as
13:13 - the neighbor so I just want to move this
13:15 - up a little bit so it's not touching
13:18 - this label and I can try it
13:21 - again so now when I
13:24 - add oops let's click select that click
13:28 - this
13:30 - I want to add a
13:31 - 10 pixel um constraint to the bottom
13:37 - let's click this arrow and now you can
13:39 - see that this label the player score
13:42 - label is selected which is actually the
13:46 - one I wanted to do but it changed the
13:48 - value let me put
13:50 - 10 at that
13:53 - constraint now we can update the
13:56 - frame so now I'll actually sit on top
13:59 - right here now let's set the properties
14:02 - for this
14:04 - guy I'm gonna write U as the text I'm
14:07 - going to change the color to
14:10 - white I'm going to Center align the text
14:14 - I'm going to change the font size
14:16 - to
14:22 - 30 okay so I'm going to run it let's see
14:25 - how that looks
14:30 - okay maybe 30 is too big of a font
14:41 - size so let's try
14:44 - 20 um I'm going to change this
14:49 - background to transparent again okay now
14:52 - I'm going to do the same for the other
14:55 - side into the play button container
14:59 - they add the constraints there and
15:01 - [Music]
15:02 - there 10 and
15:12 - 10 update
15:15 - frames and let's change this to a one
15:19 - change the color to
15:20 - white font size is
15:23 - 100 and Center align the text
15:30 - okay there we
15:31 - go now I want to add another label here
15:35 - for the
15:36 - enemy and for this
15:41 - one I want to Center align both these
15:45 - guys so I selected both them and added a
15:49 - constraint for horizontal centers and
15:51 - now I'm going to specify that this guy
15:54 - should
15:55 - be
15:57 - 10 above the nearest neighbor which
16:01 - is that
16:03 - one
16:08 - 10 update the
16:10 - frame and now I'm going to change that
16:13 - to
16:15 - enemy change the color to white change
16:19 - the font size to
16:21 - 20 uh Center
16:24 - Line okay now let's run
16:27 - it take a look at how it
16:30 - looks okay so now we've got our score
16:35 - labels and I want to now expose this and
16:41 - this as IB Outlets to the view
16:45 - controller actually let me put zero the
16:48 - default value should be
16:51 - zero okay so I'm going to go into
16:53 - assistant
16:55 - editor Let me just make some space
17:03 - here okay so let's do it right
17:09 - here hold down control click
17:16 - drag uh this is going to be the
17:20 - player
17:21 - score I'm going to do it again
17:25 - here this is going to be the enemy a
17:34 - score and now let's go into single
17:39 - View and go into viewcontroller.swift
17:43 - okay so I want to show you guys
17:47 - something about variable scoping
17:50 - here and that is basically any variables
17:54 - that you declare and use within a method
17:58 - doesn't retain its value okay so what do
18:01 - I mean by that I think it's better if I
18:03 - demonstrate so let me open up some lines
18:06 - here and let me say VAR player
18:10 - score equals
18:15 - zero let me just change
18:18 - that player score total enemy score
18:23 - total equals
18:25 - z okay so now let's implement this code
18:28 - in here if the first random number is
18:31 - greater than the second random number
18:33 - then player score total plus equals 1 so
18:37 - this increments the player score total
18:40 - by
18:41 - one right and these are two variables
18:43 - that we created and declared inside this
18:46 - method to keep track of the
18:48 - score let's update the label text so
18:53 - self
18:56 - dot uh player score
19:03 - text
19:05 - equals player score
19:10 - total and we can actually create a new
19:16 - string and pass in that
19:20 - number now if the first n if the first
19:23 - random number is the same as the second
19:26 - random number then we we don't increase
19:29 - the
19:30 - score
19:32 - otherwise it's actually the enemy score
19:35 - total uh plus equals 1 so we increment
19:39 - the enemy score if the second number is
19:42 - larger and self. enemys score. text
19:48 - that's the text property of the label
19:50 - that we're
19:52 - changing
19:57 - string enemies score
20:00 - total okay let's run
20:09 - that okay so that's a tie so no one gets
20:13 - a score so the player gets a queen and
20:17 - the enemy gets a seven so we incremented
20:20 - the score that means our if statement is
20:22 - working properly now watch this I'm
20:25 - going to deal
20:27 - again and the enemy gets a king it's
20:30 - bigger so this is correct I'm going to
20:32 - deal
20:33 - again okay so the player gets a king
20:36 - which is larger than the enemy but why
20:38 - didn't the score
20:40 - increase I'm going to keep doing
20:43 - it but the score never
20:47 - increases now why is that it's because
20:51 - we declared these variables in
20:54 - here right but each time this method
20:57 - executes
20:59 - these variables are set are
21:01 - reset so instead of declaring these
21:04 - variables in here we actually need to
21:07 - move these guys
21:10 - out because in
21:13 - here they're in the scope of this
21:16 - method right so these values only
21:19 - pertain to what's going on in this
21:22 - method but if we move it outside to the
21:25 - top here
21:29 - by moving the variables up here now the
21:32 - scope of these variables is for the
21:34 - entire class so they'll maintain their
21:37 - values even throughout the lifetime of
21:42 - any method executions or method
21:46 - calls simply by doing
21:51 - that the scores can now be
21:55 - tracked Beyond a single method call
21:59 - so that's very important to remember for
22:03 - example in this method we declared first
22:07 - card
22:08 - string as a variable and then we
22:11 - assigned some string into that variable
22:15 - I wouldn't be able to call or use this
22:19 - or reference this variable name from
22:21 - another method because it's not in the
22:23 - same
22:24 - scope because this variable is declared
22:27 - in here inside this method I can only
22:29 - use it inside this method so let's go
22:32 - back to our
22:48 - app so I hope you were able to follow
22:50 - along and build this war card game on
22:52 - your own computer and if not don't worry
22:55 - I'm going to post the source code below
22:56 - the video and you can download it and
22:59 - see what's different also in the next
23:01 - lesson we're going to do a recap of what
23:04 - we've learned so far from lessons one to
23:06 - 15 and we've definitely learned a lot
23:09 - especially if you've never programmed
23:12 - before I bet you're amazed at how far
23:14 - you've come and how much you've learned
23:16 - in the future we can even add animations
23:18 - to the cards and add some sound effects
23:21 - to really bring this game to life okay
23:23 - so I'll see you in the next lesson
23:31 - [Music]

Cleaned transcript:

hey guys welcome to lesson 15 of how to make iPhone apps with no programming experience in this lesson we are going to add code to keep score for each round for the player and the enemy now before we do that though I created some graphics to improve the look and feel of our app so I've got a logo here that I'm going to put near the top I've got a deal button which I'm going to replace the playround button with or rather I'm going to add the image to the button and I created a new background so it's got this sort of Spotlight feel to it rather than just uh solid green so let's go ahead and add those Graphics to our asset Library first okay so first we're going to change the background now I named my new graphic assets new background and instead of of adding a new image set called new background I'm just going to highlight these three and I'm going to drag it into uh the spot I'm going to drag it into the image set for the original background and then just like that I can keep the background asset name but the actual assets are using my new image I've got the logo here so I'm just going to drag that into there and I've also got the deal button graphic here so I'm going to drag that there as well okay now let's go into our storyboard now to change our button so you can see that the background image has taken effect already so in order to uh add an image to our button we're going to come here click the button go into the inspector pane on the right hand side and if you scroll down see there's image and there's background if you specify background and you pick uh deal button you see the image is going to appear there but the text is going to appear on top of it so you can either do that and then erase the text or let me just erase the background or you can set it as the image for example if you wanted what was it deal button for example if you wanted the image beside some text so I'm just going to do that but I'm going to erase the text so that we have a button with just an image right there uh but also in view controller. Swift in the viewed load method we were practicing setting uh properties and calling methods in here so this one actually adds the title play so I need to get rid of this line or else it's going to add the the text play beside my button image so I don't want a title for my button okay next we need to add an image uh at the top of our view so we search for UI image view here I'm just going to drag it and drop it right there and now we got to add some constraints to it it's going to get a little bit tricky it took me a little bit to figure out a good way to make it scale in both orientations I'll show you in a second for example I want it centered right so I'm going to click this down here I'm going to put horizontal Center in container I'm going to add that constraint and then I'm also going to add the constraint that it should be let's say 10 pixels off the top margin so I'm going to add that constraint and then up here I'm going to set the image to the logo okay I'm going to run the app now so you can see what it looks like okay so you can see that the image looks pretty small and our button image is there if I rotate it you can see that the logo fits as well however I kind of want the logo to be larger uh when it's in portrait View and the original size of the image is actually not this small it's actually larger than this it's actually this size right here so I'm going to add some constraints I'm actually also going to set a background for this uh UI image view so we can see how it stretches so I'm going to add some constraints to uh the margins of this UI image view so I'm going to say that I'm just going to add margins uh all the way around cuz I've already got the top margin I added so I'm going to add the left right and bottom constraint and by doing that it's going to make this UI image view have a constraint right here right here and right here between uh this card container View and this logo so now let's see how it looks okay so now it's you can see it's stretched the bit in this View and when I change it you can see it's stretched flat like that the reason is because uh it's maintaining that this UI image view should be 64 from the left 64 from the right and 50 59 between these two elements between this card view container and the image view so and it's maintaining 10 so that's why it's stretched like this in this View and that's why it's also stretched like that from this view because it's 64 from here 64 from here 59 from here and 10 from the top well there's one thing we can change here off the bat is that for the UI image view you can make the image not stretch so there's a mode if you click your UI image view go to the inspector right now it's set to scale to fill so it's just going to scale up the image and disregard the aspect ratio and and that's how we get uh the stretch to image if we don't want it to stretch uh we can do aspect to fit and this is going to maintain the aspect ratio of the image and it's going to fit it inside the bounds of the UI image view aspect fill is kind of the same it's going to uh maintain the aspect ratio of the image but it's going to ignore uh the bounds of the uh UI image view this is the one we want you can play around with it and to see what the difference is visually if you want but now in this way we can it looks pretty decent in portrait and when we go to the landscape view it maintains the aspect ratio so it's not stretched but I find that because this is 59 it's maintaining that this margin here is 59 it's squishing the height but here 59 is actually fine so what I want to do instead is maybe specify that this margin shouldn't be 59 but maybe rather should be something like maybe 20 so let's try that I'm going to look for this constraint here when I click it um on the right hand side here on the right hand pane you can see that card view container top which is this guy and the logo bottom which is this guy uh the relationship is equal to 59 so I'm going to change that 59 to 20 okay so let's update update the frames now let's run it again so that looks a lot better so so keep in mind that you can also if we go back to that constraint if I can find it there it is instead of equal you can also do less than or equal to or greater than or equal instead of just equal so like I said playing around with the auto layout and getting your constraints right with the elements does take a little bit of time so try not to get too frustrated now we're going to add some labels for the score so I'm going to search here for the label and I'm going to drag it here and I'm going to add it inside the play button container actually in this lower corner so first of all uh let's add some constraints to this guy I want to Anchor it to the lower left so I'm going to go click this guy here uh anchor anchor and I'm going to put let's say 10 oops I don't want let's try that again add a constraint to the left margin and the right one and I want to set both of them to 10 okay and I want to change the text to White and I want to change the font size to 100 and I want to Center Line it so let's put a number here instead of the label let's just put um one now let's update the frames on this guy okay and let's see if that sticks in that corner when we rotate it left and right and actually we can remove the red background on that image view okay so that stays put the score down there next I'm going to add a lab to indicate that this is the player score and I'm going to select this label I'm going to hold down command and also select my uh score label I'm going to horizontally Center both of them uh in relationship to each other so they'll both be centered down uh this line right here like that you can see that orange line and I also want to basically make this label uh stay on top of the score label so I can add whoops I don't want to select both of them I want to select just this label here and I want specify that the margin below here should be 10 and one trick uh because it says spacing to nearest neighbor right and the nearest neighbor should be this score label but sometimes when your element is overlapping the other element it doesn't detect uh that there is a neighbor here so in order to verify you can click this little drop down arrow so you can see here that the element I'm specifying my label to be 10 pixels above is actually the play button container which is not what I want because the play button container is is this guy right here this whole container if I specified that my label should be 10 pixels from that it's going to be at the bottom here so instead the problem is is because you see the label the two labels are kind of overlapping and so when I'm trying to add a constraint to my uh my player label here is not detecting this guy as the neighbor so I just want to move this up a little bit so it's not touching this label and I can try it again so now when I add oops let's click select that click this I want to add a 10 pixel um constraint to the bottom let's click this arrow and now you can see that this label the player score label is selected which is actually the one I wanted to do but it changed the value let me put 10 at that constraint now we can update the frame so now I'll actually sit on top right here now let's set the properties for this guy I'm gonna write U as the text I'm going to change the color to white I'm going to Center align the text I'm going to change the font size to 30 okay so I'm going to run it let's see how that looks okay maybe 30 is too big of a font size so let's try 20 um I'm going to change this background to transparent again okay now I'm going to do the same for the other side into the play button container they add the constraints there and there 10 and 10 update frames and let's change this to a one change the color to white font size is 100 and Center align the text okay there we go now I want to add another label here for the enemy and for this one I want to Center align both these guys so I selected both them and added a constraint for horizontal centers and now I'm going to specify that this guy should be 10 above the nearest neighbor which is that one 10 update the frame and now I'm going to change that to enemy change the color to white change the font size to 20 uh Center Line okay now let's run it take a look at how it looks okay so now we've got our score labels and I want to now expose this and this as IB Outlets to the view controller actually let me put zero the default value should be zero okay so I'm going to go into assistant editor Let me just make some space here okay so let's do it right here hold down control click drag uh this is going to be the player score I'm going to do it again here this is going to be the enemy a score and now let's go into single View and go into viewcontroller.swift okay so I want to show you guys something about variable scoping here and that is basically any variables that you declare and use within a method doesn't retain its value okay so what do I mean by that I think it's better if I demonstrate so let me open up some lines here and let me say VAR player score equals zero let me just change that player score total enemy score total equals z okay so now let's implement this code in here if the first random number is greater than the second random number then player score total plus equals 1 so this increments the player score total by one right and these are two variables that we created and declared inside this method to keep track of the score let's update the label text so self dot uh player score text equals player score total and we can actually create a new string and pass in that number now if the first n if the first random number is the same as the second random number then we we don't increase the score otherwise it's actually the enemy score total uh plus equals 1 so we increment the enemy score if the second number is larger and self. enemys score. text that's the text property of the label that we're changing string enemies score total okay let's run that okay so that's a tie so no one gets a score so the player gets a queen and the enemy gets a seven so we incremented the score that means our if statement is working properly now watch this I'm going to deal again and the enemy gets a king it's bigger so this is correct I'm going to deal again okay so the player gets a king which is larger than the enemy but why didn't the score increase I'm going to keep doing it but the score never increases now why is that it's because we declared these variables in here right but each time this method executes these variables are set are reset so instead of declaring these variables in here we actually need to move these guys out because in here they're in the scope of this method right so these values only pertain to what's going on in this method but if we move it outside to the top here by moving the variables up here now the scope of these variables is for the entire class so they'll maintain their values even throughout the lifetime of any method executions or method calls simply by doing that the scores can now be tracked Beyond a single method call so that's very important to remember for example in this method we declared first card string as a variable and then we assigned some string into that variable I wouldn't be able to call or use this or reference this variable name from another method because it's not in the same scope because this variable is declared in here inside this method I can only use it inside this method so let's go back to our app so I hope you were able to follow along and build this war card game on your own computer and if not don't worry I'm going to post the source code below the video and you can download it and see what's different also in the next lesson we're going to do a recap of what we've learned so far from lessons one to 15 and we've definitely learned a lot especially if you've never programmed before I bet you're amazed at how far you've come and how much you've learned in the future we can even add animations to the cards and add some sound effects to really bring this game to life okay so I'll see you in the next lesson
