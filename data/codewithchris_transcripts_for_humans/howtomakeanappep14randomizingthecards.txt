With timestamps:

00:05 - hey everyone welcome to lesson 14 of how
00:09 - to make iphone apps with no programming
00:10 - experience in this lesson we're going to
00:13 - learn how to generate some random
00:14 - numbers and then we're going to
00:15 - integrate that into our project so that
00:17 - we're generating random cards and
00:20 - displaying The Associated card images
00:23 - Before we jump into the Xcode project
00:26 - let's get started with a playground so
00:28 - I'm just going to call this let's just
00:30 - call it random playground and I'm going
00:33 - to save it on my desktop there and it's
00:37 - actually very very easy to generate
00:38 - random numbers let me show you how
00:41 - so the function we're going to use is
00:43 - called arc for random and you you might
00:49 - get autocomplete you might not but if
00:51 - you do it's this one right here arc for
00:53 - random underscore uniform and then
00:55 - you're going to pass in and a whole
00:57 - number that is an upper bound okay so
01:00 - let's say 13 and that's going to
01:03 - generate a number between 0 and 12 just
01:08 - give the playground a chance to run and
01:10 - compile the code and you can see we have
01:13 - zero we can rerun the playground again
01:17 - actually just hitting Enter or you can
01:21 - hit stop playground and run it again and
01:24 - they'll generate a different number so
01:25 - now you can see it's ten here if I press
01:28 - run again it's going to generate another
01:30 - one too okay so you just learned about
01:33 - functions in a couple lessons ago and I
01:38 - want to point out that I mentioned there
01:40 - were instance functions which you call
01:42 - on an instance of a class right you you
01:46 - type in object dot and then the function
01:50 - that's associated with that class right
01:53 - so in our example we had the person
01:55 - class and then we had some functions
01:58 - associated with the person class and we
02:00 - would call the person object dot and
02:03 - then the function name and then you
02:05 - learned about class functions which
02:08 - aren't called on a specific object in
02:13 - said they're called on the class itself
02:15 - so we had something like the person
02:17 - class dot and then I think our our class
02:21 - function was called get average age or
02:25 - something like that right and in the
02:28 - instance one was something like when we
02:30 - created a new person object we assigned
02:32 - it to the variable a so then we would
02:35 - type a dot like update age or whatever
02:38 - that function was called right so this
02:41 - is your class function it's called on
02:44 - class and this is a regular instance
02:47 - function so you call that on an instance
02:50 - of an object in this case or in in that
02:53 - lesson we had assigned that object to
02:55 - the variable a okay so let's get rid of
02:58 - these two lines the reason why I pointed
03:01 - that out is because this function right
03:04 - here arc for random underscore uniform
03:06 - doesn't seem to be either of those right
03:10 - I'm not calling it on an instance of the
03:12 - object and I'm not calling it on a class
03:15 - either so what sort of function is this
03:18 - well it's part of the uikit
03:21 - libraries it's available to us because
03:23 - we've imported the uikit
03:26 - framework from here so if I comment that
03:29 - out you're going to see a Xcode complain
03:32 - about this function because it can no
03:34 - longer find it so these are special
03:37 - functions that are made available to us
03:40 - because of the uikit framework and we
03:42 - don't call it on any instance of the
03:45 - class or we don't call it as a class
03:47 - function another example of this would
03:51 - be print I showed you this earlier and
03:54 - you know print is a function where we
03:56 - pass in a string and then it prints it
03:59 - out into the console all right so
04:02 - another thing I want to show you is
04:04 - something that we're going to need to do
04:06 - in our project so let's take for example
04:09 - this test we're printing tests out on
04:12 - the console but what if I wanted to
04:15 - print out tests along with whatever
04:19 - number was generated in here so let's
04:22 - assign this into a variable so we can
04:24 - reference it later let's call this
04:27 - let's call it R and like that and now
04:34 - what we're going to do and how we can
04:36 - kind of insert this R and variable into
04:39 - this string is by doing something like
04:42 - this so type in backslash and then open
04:46 - a set of parentheses autocomplete might
04:49 - do something funny it's just flash there
04:51 - and just ignore that you want to close
04:54 - the parentheses or the round bracket and
04:57 - inside here you can type in your
05:00 - variable name so I'm going to put in R
05:02 - and there and what that does is it takes
05:07 - this string which we had as test and
05:10 - this is basically a shorthand for
05:13 - inserting whatever value you have in R
05:16 - and into the string so as you can see
05:20 - here it randomized number two and then
05:23 - what did it print out I print it out
05:25 - test space - if I run it again yeah
05:30 - that's two again but let's let's give
05:32 - that another try okay nine so test nine
05:35 - so you can do this with another string
05:38 - or any sort of variable like that the
05:41 - reason why we're going to need to use
05:43 - this is because if you remember in our
05:45 - card asset library we named the assets
05:49 - like card two three four and so on what
05:53 - we're going to do is create that name
05:55 - dynamically using something like this so
05:58 - here I have cards 0 which we actually
06:00 - don't have and we're going to find out
06:02 - how to make sure it doesn't randomize 0
06:04 - in when we get into our Xcode project
06:07 - but this is how we're going to generate
06:09 - our asset names see as I'm randomizing
06:13 - it I'm getting the different asset card
06:16 - names from the asset library okay let's
06:19 - jump into our Xcode project now I'm
06:22 - going to open recent and let's open our
06:24 - war card game project and now we're
06:29 - going to go into the view controller and
06:31 - I'm going to get rid of this print deal
06:35 - tapped and instead I'm going to type in
06:38 - a comment
06:39 - randomize left number so var left number
06:46 - equals arc for random uniform and we're
06:52 - going to put the upper bound a 13 right
06:54 - now but let's take a look at our asset
06:57 - library what do we have we have cards
07:00 - from 2 to 10 so for now I'm going to
07:05 - randomize between 2 to 10 in a couple
07:08 - lessons later I'll show you guys what
07:10 - are called arrays and we can include our
07:12 - Jack Queen and King and ace so now let's
07:16 - randomize between 2 and 10 so what I'm
07:19 - probably going to want to do is because
07:24 - I want it to start from 2 I'm going to
07:28 - add 2 to whatever number gets randomized
07:31 - so now this is going to randomize from 2
07:33 - to 14 all right I'm going to do 8 right
07:39 - 7 know and do 9 so this randomizes from
07:44 - 0 to 8 and then I'm going to add 2 to it
07:46 - giving the range 2 to 10 so which is
07:50 - perfect for us
07:52 - okay so randomize left number from 2 to
07:56 - 10 ok and now we're going to assign not
08:02 - card 10 but remember we're going to want
08:04 - to pass in left number into here so
08:07 - let's use that special notation
08:09 - backslash open up a set of round
08:13 - brackets and in here I'm going to put in
08:16 - left number okay let's do the same thing
08:22 - with the right side but let me add a
08:24 - comment here set the left image okay
08:30 - randomize right number from 2 to 10 so
08:35 - far right number equals arc for random 9
08:41 - plus 2 technically you could reuse your
08:45 - variable here instead of declaring a
08:48 - brand new one but just for the sake of
08:50 - clarity for you guys right now
08:53 - just splitting that up into two and
08:56 - declaring a new variable set the right
08:58 - image here we're going to want to set it
09:01 - to card backslash open up a set of
09:06 - brackets and pass in right number make
09:09 - sure you pass in right number not
09:11 - passing in left number again or else
09:13 - you're going to get the same cards so
09:15 - let's try this out I'll tell you about
09:17 - what those yellow lines are in a second
09:23 - okay so here goes when I click deal
09:27 - there we go we get random cards from two
09:32 - to ten and I think oh there was a two
09:37 - I'm just making sure that the range is
09:39 - two to ten all right so let's take a
09:43 - look at what these yellow lines are
09:45 - variable left number was never mutated
09:48 - consider changing to let constant so the
09:51 - word mutated basically means changed
09:54 - what it's saying is that after you set
09:57 - something into this variable left number
09:59 - you've never changed it ever since like
10:02 - you've never assigned something else
10:03 - into it so consider changing this
10:06 - variable instead to use a constant which
10:09 - is like a variable but once you set
10:12 - something into a constant you can't
10:14 - change it again
10:15 - so Xcode is detecting that hey you're
10:18 - not changing it after the first time you
10:20 - set something into it anyways why not
10:21 - just use a constant instead of a
10:24 - variable and it's a best practice always
10:26 - to use constants if you don't need to
10:29 - change the value and the reason for that
10:31 - is because it's more efficient and it's
10:33 - also helps when you're debugging things
10:36 - because you can rely on the fact that
10:38 - you know this isn't going to be changing
10:40 - so let's change these variables into
10:43 - constants very simply by changing var to
10:47 - let that's the keyword for a constant so
10:51 - let left number equals this and then
10:55 - from this point on because it's a
10:57 - constant
10:57 - I can't assign anything else into the
11:00 - left number
11:01 - as a constant so if I try to do
11:03 - something like this you know to assign
11:05 - something else into it
11:06 - Xcode is not going to like that because
11:09 - can't assign a value to left number
11:12 - because it is a constant and the fix
11:15 - that it suggests is changing the let
11:17 - back to a var since now it it thinks
11:20 - that I want to change it okay so this is
11:25 - our deal tapped function so far we're
11:29 - randomizing two numbers one for the left
11:31 - card one for the right card and we're
11:32 - displaying the appropriate image in the
11:35 - following lesson I'm going to show you
11:36 - guys how to include the ace Jack queen
11:40 - and king obviously we're going to have
11:42 - to do something a little different
11:44 - because right now we're assigning images
11:47 - based on the word card followed by a
11:50 - number and in our asset library the
11:52 - asset name is ace Jack queen and king
11:57 - alright stay tuned thanks for watching
12:00 - and I'll see you guys in the next lesson
12:01 - bye for now

Cleaned transcript:

hey everyone welcome to lesson 14 of how to make iphone apps with no programming experience in this lesson we're going to learn how to generate some random numbers and then we're going to integrate that into our project so that we're generating random cards and displaying The Associated card images Before we jump into the Xcode project let's get started with a playground so I'm just going to call this let's just call it random playground and I'm going to save it on my desktop there and it's actually very very easy to generate random numbers let me show you how so the function we're going to use is called arc for random and you you might get autocomplete you might not but if you do it's this one right here arc for random underscore uniform and then you're going to pass in and a whole number that is an upper bound okay so let's say 13 and that's going to generate a number between 0 and 12 just give the playground a chance to run and compile the code and you can see we have zero we can rerun the playground again actually just hitting Enter or you can hit stop playground and run it again and they'll generate a different number so now you can see it's ten here if I press run again it's going to generate another one too okay so you just learned about functions in a couple lessons ago and I want to point out that I mentioned there were instance functions which you call on an instance of a class right you you type in object dot and then the function that's associated with that class right so in our example we had the person class and then we had some functions associated with the person class and we would call the person object dot and then the function name and then you learned about class functions which aren't called on a specific object in said they're called on the class itself so we had something like the person class dot and then I think our our class function was called get average age or something like that right and in the instance one was something like when we created a new person object we assigned it to the variable a so then we would type a dot like update age or whatever that function was called right so this is your class function it's called on class and this is a regular instance function so you call that on an instance of an object in this case or in in that lesson we had assigned that object to the variable a okay so let's get rid of these two lines the reason why I pointed that out is because this function right here arc for random underscore uniform doesn't seem to be either of those right I'm not calling it on an instance of the object and I'm not calling it on a class either so what sort of function is this well it's part of the uikit libraries it's available to us because we've imported the uikit framework from here so if I comment that out you're going to see a Xcode complain about this function because it can no longer find it so these are special functions that are made available to us because of the uikit framework and we don't call it on any instance of the class or we don't call it as a class function another example of this would be print I showed you this earlier and you know print is a function where we pass in a string and then it prints it out into the console all right so another thing I want to show you is something that we're going to need to do in our project so let's take for example this test we're printing tests out on the console but what if I wanted to print out tests along with whatever number was generated in here so let's assign this into a variable so we can reference it later let's call this let's call it R and like that and now what we're going to do and how we can kind of insert this R and variable into this string is by doing something like this so type in backslash and then open a set of parentheses autocomplete might do something funny it's just flash there and just ignore that you want to close the parentheses or the round bracket and inside here you can type in your variable name so I'm going to put in R and there and what that does is it takes this string which we had as test and this is basically a shorthand for inserting whatever value you have in R and into the string so as you can see here it randomized number two and then what did it print out I print it out test space if I run it again yeah that's two again but let's let's give that another try okay nine so test nine so you can do this with another string or any sort of variable like that the reason why we're going to need to use this is because if you remember in our card asset library we named the assets like card two three four and so on what we're going to do is create that name dynamically using something like this so here I have cards 0 which we actually don't have and we're going to find out how to make sure it doesn't randomize 0 in when we get into our Xcode project but this is how we're going to generate our asset names see as I'm randomizing it I'm getting the different asset card names from the asset library okay let's jump into our Xcode project now I'm going to open recent and let's open our war card game project and now we're going to go into the view controller and I'm going to get rid of this print deal tapped and instead I'm going to type in a comment randomize left number so var left number equals arc for random uniform and we're going to put the upper bound a 13 right now but let's take a look at our asset library what do we have we have cards from 2 to 10 so for now I'm going to randomize between 2 to 10 in a couple lessons later I'll show you guys what are called arrays and we can include our Jack Queen and King and ace so now let's randomize between 2 and 10 so what I'm probably going to want to do is because I want it to start from 2 I'm going to add 2 to whatever number gets randomized so now this is going to randomize from 2 to 14 all right I'm going to do 8 right 7 know and do 9 so this randomizes from 0 to 8 and then I'm going to add 2 to it giving the range 2 to 10 so which is perfect for us okay so randomize left number from 2 to 10 ok and now we're going to assign not card 10 but remember we're going to want to pass in left number into here so let's use that special notation backslash open up a set of round brackets and in here I'm going to put in left number okay let's do the same thing with the right side but let me add a comment here set the left image okay randomize right number from 2 to 10 so far right number equals arc for random 9 plus 2 technically you could reuse your variable here instead of declaring a brand new one but just for the sake of clarity for you guys right now just splitting that up into two and declaring a new variable set the right image here we're going to want to set it to card backslash open up a set of brackets and pass in right number make sure you pass in right number not passing in left number again or else you're going to get the same cards so let's try this out I'll tell you about what those yellow lines are in a second okay so here goes when I click deal there we go we get random cards from two to ten and I think oh there was a two I'm just making sure that the range is two to ten all right so let's take a look at what these yellow lines are variable left number was never mutated consider changing to let constant so the word mutated basically means changed what it's saying is that after you set something into this variable left number you've never changed it ever since like you've never assigned something else into it so consider changing this variable instead to use a constant which is like a variable but once you set something into a constant you can't change it again so Xcode is detecting that hey you're not changing it after the first time you set something into it anyways why not just use a constant instead of a variable and it's a best practice always to use constants if you don't need to change the value and the reason for that is because it's more efficient and it's also helps when you're debugging things because you can rely on the fact that you know this isn't going to be changing so let's change these variables into constants very simply by changing var to let that's the keyword for a constant so let left number equals this and then from this point on because it's a constant I can't assign anything else into the left number as a constant so if I try to do something like this you know to assign something else into it Xcode is not going to like that because can't assign a value to left number because it is a constant and the fix that it suggests is changing the let back to a var since now it it thinks that I want to change it okay so this is our deal tapped function so far we're randomizing two numbers one for the left card one for the right card and we're displaying the appropriate image in the following lesson I'm going to show you guys how to include the ace Jack queen and king obviously we're going to have to do something a little different because right now we're assigning images based on the word card followed by a number and in our asset library the asset name is ace Jack queen and king alright stay tuned thanks for watching and I'll see you guys in the next lesson bye for now
